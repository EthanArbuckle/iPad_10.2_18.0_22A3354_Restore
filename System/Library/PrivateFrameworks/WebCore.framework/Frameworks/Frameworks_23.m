unint64_t write_modes_b_0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, _BYTE **a5, int a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  unsigned __int8 **v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  __int16 v39;
  _BOOL4 v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  _DWORD *v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  int v80;
  _DWORD *v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _DWORD *v94;
  _BYTE **v95;
  uint64_t *v96;
  unsigned __int16 *v97;
  _WORD *v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t result;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  _DWORD *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int16 *v121;
  _DWORD *v122;
  unsigned int v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  _BYTE *v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  unsigned int v147;
  uint8x8_t v148;
  __int16 v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL4 v152;
  _BOOL4 v153;
  unsigned int v154;
  int v155;
  unsigned __int16 *v156;
  _DWORD *v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  char v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned __int8 *v172;
  int v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  char v179;
  uint64_t v180;
  char v181;
  int *v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  _BYTE *v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  uint64_t v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  unsigned int v212;
  BOOL v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  char *v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int16 v229;
  char v230;
  int16x8_t *v231;
  uint64_t v232;
  unsigned int v233;
  unint64_t v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  uint32x4_t v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  uint64x2_t v243;
  uint64_t v244;
  int16x8_t *v245;
  int32x4_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  uint32x4_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  __int16 v257;
  __int16 v258;
  _BOOL4 v259;
  unsigned __int8 *v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  size_t v265;
  unsigned int v266;
  BOOL v267;
  int v268;
  int v269;
  void *v270;
  int v271;
  int v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  int v276;
  unsigned __int8 *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  int v298;
  BOOL v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  int v310;
  uint64_t v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  unsigned __int8 *v317;
  unsigned int v318;
  unsigned __int8 *v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  unsigned __int8 *v324;
  int v325;
  unsigned __int8 *v326;
  BOOL v327;
  uint64_t v328;
  BOOL v329;
  uint64_t v330;
  int v331;
  int v332;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  unint64_t v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  uint32x4_t v356;
  uint32x4_t v357;
  int64x2_t v358;
  uint64_t v359;
  int16x8_t *v360;
  _WORD *v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  __int16 v365;
  uint64_t v366;
  int v367;
  unsigned int v368;
  int v369;
  int v370;
  unsigned __int16 *v371;
  unsigned int v372;
  unsigned int v373;
  unint64_t v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  uint64_t v390;
  unsigned __int16 *v391;
  _DWORD *v392;
  unsigned int v393;
  unint64_t v394;
  unsigned int v395;
  unsigned int v396;
  unsigned __int16 *v397;
  _DWORD *v398;
  unsigned int v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  int v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned __int16 *v418;
  unsigned int v419;
  unint64_t v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned __int16 *v426;
  unsigned int v427;
  unint64_t v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  int v438;
  unsigned int v439;
  int v440;
  unsigned int v441;
  unsigned int v442;
  int v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  unsigned __int16 *v449;
  unsigned int v450;
  unint64_t v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  uint64_t v457;
  unsigned int v458;
  unint64_t v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  uint64_t v479;
  unsigned __int16 *v480;
  unsigned int v481;
  unint64_t v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t v488;
  unsigned __int16 *v489;
  unsigned int v490;
  unint64_t v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  int v501;
  unsigned int v502;
  int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned __int16 *v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  _WORD *v519;
  unsigned int v520;
  int v521;
  unsigned int v522;
  unsigned int v523;
  unsigned int v524;
  int v525;
  int v526;
  unsigned int v527;
  unsigned int v528;
  unsigned int v529;
  unsigned __int16 *v530;
  unsigned int v531;
  unint64_t v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  unsigned int v540;
  int v541;
  unsigned int v542;
  unsigned int v543;
  int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  uint64_t v548;
  unsigned __int16 *v549;
  unsigned int v550;
  unint64_t v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned __int16 *v561;
  _WORD *v562;
  unsigned int v563;
  int v564;
  unsigned int v565;
  unsigned int v566;
  int v567;
  int v568;
  unsigned int v569;
  unsigned int v570;
  int v571;
  unsigned int v572;
  int v573;
  unsigned int v574;
  unsigned int v575;
  int v576;
  uint64_t v577;
  unsigned int v578;
  unsigned int v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  int v586;
  unsigned int v587;
  int v588;
  unsigned int v589;
  unsigned int v590;
  int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  unsigned int v598;
  _WORD *v599;
  uint64_t v600;
  unsigned int v601;
  unint64_t v602;
  unsigned int v603;
  unsigned int v604;
  unsigned __int16 *v605;
  int v606;
  int v607;
  unsigned int v608;
  unint64_t v609;
  unsigned int v610;
  unsigned int v611;
  int v612;
  unsigned int v613;
  unsigned int v614;
  _WORD *v615;
  unsigned int v616;
  int v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v623;
  unsigned int v624;
  unsigned int v625;
  _WORD *v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  uint64_t v632;
  unsigned int v633;
  int v634;
  unsigned int v635;
  int v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int v639;
  int v640;
  uint64_t v641;
  unsigned __int8 *v642;
  unsigned int v643;
  uint64_t v644;
  _BYTE **v645;
  uint64_t v646;
  uint64_t v647;
  unsigned __int16 *v648;
  unsigned int v649;
  unsigned int v650;
  unsigned __int16 *v651;
  unsigned int v652;
  int v653;
  unsigned int v654;
  unint64_t v655;
  unsigned int v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  uint64_t v660;
  unsigned __int8 *v661;
  unsigned int v662;
  uint64_t v663;
  uint64_t v664;
  unsigned __int16 *v665;
  unsigned int v666;
  unsigned int v667;
  int v668;
  unsigned __int16 *v669;
  unsigned int v670;
  int v671;
  unsigned int v672;
  unsigned int v673;
  _WORD *v674;
  unsigned int v675;
  int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  int v680;
  unsigned int v681;
  int v682;
  unsigned int v683;
  unsigned int v684;
  int v685;
  unsigned int v686;
  unsigned __int16 *v687;
  _WORD *v688;
  unsigned int v689;
  int v690;
  unsigned int v691;
  unsigned int v692;
  _WORD *v693;
  int v694;
  unsigned int v695;
  unsigned int v696;
  int v697;
  unsigned int v698;
  uint64_t *v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int v702;
  int v703;
  _DWORD *v704;
  char v705;
  unsigned __int16 *v706;
  uint64_t v707;
  uint64_t v708;
  unsigned int v709;
  _DWORD *v710;
  _DWORD *v711;
  _DWORD *v712;
  uint64_t *v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  unsigned int v717;
  _DWORD *v718;
  unsigned int v719;
  uint64_t v720;
  __int16 *v721;
  unsigned int v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unsigned int v727;
  _DWORD *v728;
  uint64_t v729;
  uint64_t v730;
  unsigned int v731;
  _DWORD *v732;
  _DWORD *v733;
  unsigned int v734;
  unsigned int v735;
  _DWORD *v736;
  int v737;
  unsigned int v738;
  unsigned __int16 *v739;
  uint64_t v740;
  unsigned int v741;
  int v742;
  unsigned int v743;
  unsigned int v744;
  int v745;
  uint64_t v746;
  unsigned int v747;
  int *v748;
  int v749;
  int v750;
  unsigned __int8 v751;
  unsigned __int16 *v752;
  _WORD *v753;
  unsigned int v754;
  int v755;
  unsigned int v756;
  unsigned int v757;
  unsigned __int16 *v758;
  unsigned int v759;
  unsigned int v760;
  int v761;
  _BOOL4 v763;
  int v764;
  int v765;
  unsigned int v766;
  unsigned int v767;
  _WORD *v768;
  unsigned int v769;
  int v770;
  unsigned int v771;
  unsigned int v772;
  unsigned int v773;
  unsigned int v774;
  unsigned int v775;
  __int16 *v776;
  unsigned int v777;
  unsigned int v778;
  uint64_t v779;
  uint64_t v780;
  unsigned int v781;
  unint64_t v782;
  unsigned __int16 *v783;
  unsigned int v784;
  unint64_t v785;
  unsigned int v786;
  unsigned int v787;
  int v788;
  int v789;
  unsigned int v790;
  int v791;
  unsigned int v792;
  unsigned int v793;
  _DWORD *v794;
  uint64_t v795;
  int v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  _WORD *v800;
  unsigned int v801;
  int v802;
  unsigned int v803;
  unsigned int v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  int v808;
  int v809;
  int v810;
  int v811;
  unint64_t v812;
  unint64_t v813;
  int v814;
  unsigned int v815;
  unsigned __int16 *v816;
  unsigned int v817;
  unint64_t v818;
  unsigned int v819;
  unsigned int v820;
  unsigned int v821;
  unsigned int v822;
  unsigned int v823;
  int v824;
  unsigned int v825;
  unsigned int v826;
  uint64_t v827;
  _WORD *v828;
  uint64_t v829;
  unsigned int v830;
  int v831;
  unint64_t v832;
  unsigned int v833;
  unsigned int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v837;
  unsigned int v838;
  unsigned int v839;
  unsigned int v840;
  unsigned int v841;
  unsigned int v842;
  unsigned int v843;
  unsigned int v844;
  unsigned int v845;
  unsigned int v846;
  unsigned int v847;
  unsigned int v848;
  uint64_t v849;
  int v850;
  unsigned __int8 **v851;
  unsigned __int8 *v852;
  uint64_t v853;
  int v854;
  uint64_t v855;
  unsigned int v856;
  unsigned int v857;
  int v858;
  uint64_t v859;
  int v860;
  int v861;
  unsigned __int8 *v862;
  int v863;
  uint64_t v864;
  int v865;
  unsigned __int8 *v866;
  _BYTE **v867;
  int v868;
  int v869;
  int v870;
  int v871;
  unsigned int v872;
  uint64_t v873;
  unsigned __int16 *v874;
  unsigned int v875;
  unint64_t v876;
  unsigned int v877;
  unsigned int v878;
  int v879;
  unsigned int v880;
  uint64_t v881;
  unsigned int v882;
  int v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  int pred_context_switchable_interp;
  uint64_t v888;
  unsigned __int16 *v889;
  unsigned int v890;
  int v891;
  unsigned int v892;
  unsigned int v893;
  unsigned int v894;
  int v895;
  _WORD *v896;
  unsigned int v897;
  int v898;
  unsigned int v899;
  unsigned int v900;
  uint64_t v901;
  _WORD *v902;
  unsigned int v903;
  int v904;
  unint64_t v905;
  unsigned int v906;
  unsigned int v907;
  unsigned int v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  unsigned int v912;
  unsigned int v913;
  unsigned int v914;
  unsigned int v915;
  unsigned int v916;
  unsigned int v917;
  unsigned int v918;
  unsigned int v919;
  unsigned int v920;
  unsigned int v921;
  _DWORD *v922;
  uint64_t v923;
  int v924;
  unsigned __int8 *v925;
  int v926;
  uint64_t v927;
  _QWORD *v928;
  unsigned __int8 *v929;
  uint64_t v930;
  char v931;
  int v932;
  int v933;
  int v934;
  unsigned int v935;
  uint64_t v936;
  uint64_t v937;
  unsigned int v938;
  signed __int8 v939;
  uint64_t v940;
  unsigned int v941;
  uint64_t v942;
  int v943;
  unsigned int v944;
  char v945;
  int v946;
  int v947;
  uint64_t v948;
  int64x2_t v949;
  unsigned int v950;
  uint64_t v951;
  int v952;
  int v953;
  unsigned int v954;
  unsigned int v955;
  int v956;
  int v957;
  int v958;
  int v959;
  char v960;
  int v961;
  int v962;
  int v963;
  unsigned __int8 *v964;
  _BOOL4 v965;
  _DWORD *v966;
  int v967;
  int v968;
  uint64_t v969;
  _DWORD *v970;
  _DWORD *v971;
  uint64_t v972;
  unint64_t v973;
  int *v974;
  _DWORD *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  __int16 *v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int v984;
  uint64_t v985;

  v8 = a1;
  v985 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a2 + 11064);
  v10 = *(_DWORD *)(a1 + 239620);
  v11 = a7 + (uint64_t)(v10 * a6);
  v12 = (unsigned __int8 **)(*(_QWORD *)(a1 + 239608) + 8 * v11);
  *(_QWORD *)(a2 + 8280) = v12;
  v13 = *(_QWORD *)(a1 + 238992);
  v14 = mi_size_wide_5[*(unsigned __int8 *)(a1 + 239600)];
  v959 = a7 / v14 + a6 / v14 * *(_DWORD *)(a1 + 239004);
  v15 = (_DWORD *)(v13 + 84 * v959);
  *(_QWORD *)(a2 + 16760) = v15;
  *(_QWORD *)(a2 + 8328) = *(_QWORD *)(a1 + 239624) + v11;
  *(_DWORD *)(a2 + 8336) = v10;
  v16 = *v12;
  v17 = **v12;
  v18 = mi_size_high_4[v17];
  v19 = mi_size_wide_5[v17];
  v20 = *(_DWORD *)(a1 + 239572);
  v927 = a1 + 238992;
  LODWORD(v11) = *(_DWORD *)(a1 + 239576);
  v21 = *a3;
  v22 = a3[2];
  *(_DWORD *)(a2 + 8348) = -32 * a6;
  *(_DWORD *)(a2 + 8352) = 32 * (v20 - a6 - v18);
  *(_DWORD *)(a2 + 8340) = -32 * a7;
  *(_DWORD *)(a2 + 8344) = 32 * (v11 - (v19 + a7));
  *(_DWORD *)(a2 + 416) = a6;
  *(_DWORD *)(a2 + 420) = a7;
  v23 = v21 < a6;
  *(_BYTE *)(a2 + 8288) = v23;
  v24 = *(_DWORD *)(a2 + 3044);
  v25 = *(_DWORD *)(a2 + 3048);
  v26 = v22 < a7;
  *(_BYTE *)(a2 + 8289) = v26;
  *(_BYTE *)(a2 + 8290) = v23;
  if (!((0x3EFFFCuLL >> v17) & 1 | (v24 == 0)))
    v26 = a7 - 1 > v22;
  *(_BYTE *)(a2 + 8291) = v26;
  if (((0x20005uLL >> v17) & 1) != 0 && v25)
  {
    v23 = a6 - 1 > v21;
    *(_BYTE *)(a2 + 8290) = v23;
  }
  if (v21 >= a6)
  {
    *(_QWORD *)(a2 + 8304) = 0;
    if (v22 >= a7)
    {
LABEL_8:
      *(_QWORD *)(a2 + 8296) = 0;
      if ((a6 & 1) != 0)
        goto LABEL_15;
      goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8304) = v12[-*(int *)(a2 + 424)];
    if (v22 >= a7)
      goto LABEL_8;
  }
  *(_QWORD *)(a2 + 8296) = *(v12 - 1);
  if ((a6 & 1) != 0)
    goto LABEL_15;
LABEL_12:
  if ((v18 & 1) != 0 && v25)
  {
    *(_BYTE *)(a2 + 428) = 0;
    goto LABEL_25;
  }
LABEL_15:
  if ((a7 & 1) != 0 || (v19 & 1) == 0)
  {
    *(_BYTE *)(a2 + 428) = 1;
    goto LABEL_20;
  }
  *(_BYTE *)(a2 + 428) = v24 == 0;
  if (!v24)
  {
LABEL_20:
    v27 = *(_DWORD *)(a2 + 424);
    v28 = &(&v12[-(v24 & a7)])[-(v27 * (v25 & a6))];
    if (v23)
    {
      *(_QWORD *)(a2 + 8320) = v28[v24 - v27];
      if (v26)
      {
LABEL_22:
        *(_QWORD *)(a2 + 8312) = v28[v27 * v25 - 1];
        goto LABEL_25;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8320) = 0;
      if (v26)
        goto LABEL_22;
    }
    *(_QWORD *)(a2 + 8312) = 0;
  }
LABEL_25:
  v923 = v17;
  v29 = a1 + 258032;
  *(_BYTE *)(a2 + 8725) = v18;
  v30 = (_DWORD *)(a1 + 239040);
  *(_BYTE *)(a2 + 8724) = v19;
  *(_BYTE *)(a2 + 11048) = 0;
  if (v19 >= v18 || ((v19 + a7) & (v18 - 1)) != 0)
  {
    v31 = a2 + 11050;
    v974 = (int *)(a2 + 416);
    *(_BYTE *)(a2 + 11049) = 0;
    if (v19 <= v18)
      goto LABEL_31;
  }
  else
  {
    *(_BYTE *)(a2 + 11048) = 1;
    v31 = a2 + 11050;
    v974 = (int *)(a2 + 416);
    *(_BYTE *)(a2 + 11049) = 0;
    if (v19 <= v18)
      goto LABEL_31;
  }
  if (((v19 - 1) & a6) == 0)
    *(_BYTE *)(a2 + 11049) = 1;
LABEL_31:
  v922 = (_DWORD *)(a2 + 148376);
  *(_QWORD *)(a2 + 8544) = *(_QWORD *)(*(_QWORD *)(a1 + 264376) + 8 * a3[4]) + a7;
  *(_QWORD *)(a2 + 8552) = a2 + 8560 + (a6 & 0x1F);
  v976 = a2;
  v977 = a4;
  v975 = (_DWORD *)(a1 + 239040);
  v925 = (unsigned __int8 *)(a2 + 8288);
  v930 = a1 + 258032;
  v926 = v19;
  v924 = v18;
  if ((*(_BYTE *)v30 & 0xFD) == 0)
  {
    v978 = v9 + 12490;
    v41 = *v12;
    if (*(_BYTE *)(a1 + 258200) && *(_BYTE *)(a1 + 258033))
    {
      write_segment_id_0((_DWORD *)a1, v974, v41, a4, a1 + 258032, v978, 0);
      a2 = v976;
      a4 = v977;
    }
    v964 = v41;
    if (*(_BYTE *)v29 && (*(_DWORD *)(v8 + 4 * (*(_WORD *)(v41 + 167) & 7) + 258164) & 0x40) != 0)
    {
      v43 = 1;
      if (*(_BYTE *)(v8 + 258200))
        goto LABEL_89;
      goto LABEL_87;
    }
    v970 = v15;
    v42 = v8;
    v43 = v41[144];
    v44 = *(_QWORD *)(a2 + 8296);
    v45 = *(_QWORD *)(a2 + 8304);
    if (v45)
    {
      v46 = v9;
      LODWORD(v45) = *(unsigned __int8 *)(v45 + 144);
      v47 = v31;
      if (!v44)
        goto LABEL_54;
    }
    else
    {
      v46 = v9;
      v47 = v31;
      if (!v44)
      {
LABEL_54:
        v48 = (unsigned __int16 *)(*(_QWORD *)(a2 + 11064) + 6 * (v44 + v45) + 11870);
        v49 = (_DWORD *)(a4 + 16);
        if (v43)
        {
          v50 = v48[v43];
          v51 = *(_QWORD *)(a4 + 32);
          v52 = *(unsigned __int16 *)(a4 + 40);
          v53 = v52 >> 8;
          if (((__int16)v48[v43 - 1] & 0x80000000) == 0)
          {
            v54 = ((v53 * (v48[v43 - 1] >> 6)) >> 1) - 4 * v43 + 8;
            od_ec_enc_normalize(v49, v51 + v52 - v54, 4 * v43 - ((v53 * (v50 >> 6)) >> 1) + v54 - 4);
            a4 = v977;
            if (!*(_BYTE *)(v977 + 48))
              goto LABEL_57;
LABEL_81:
            v70 = v48[2];
            v71 = (v70 >> 4) + 4;
            v72 = *v48;
            a2 = v976;
            if ((char)v43 < 1)
              v73 = v72 - (v72 >> v71);
            else
              v73 = v72 + ((int)(0x8000 - v72) >> v71);
            *v48 = v73;
            if (v70 < 0x20)
              LOWORD(v70) = v70 + 1;
            v48[2] = v70;
            v31 = v47;
            v9 = v46;
            v8 = v42;
            v15 = v970;
            if (*(_BYTE *)(v29 + 168))
            {
LABEL_89:
              if (!*(_BYTE *)(v927 + 547) && !*(_BYTE *)(v927 + 544))
              {
                v74 = *(_QWORD *)(v29 + 5688);
                v75 = *(_DWORD *)(a2 + 416);
                v76 = *(_DWORD *)(a2 + 420);
                if (((v75 | v76) & (*(_DWORD *)(v74 + 32) - 1)) == 0)
                  *(_DWORD *)(v31 + 123) = 0;
                if (*(_BYTE *)(v74 + 28) == 15)
                  v77 = (v75 >> 3) & 2 | (v76 >> 4) & 1;
                else
                  v77 = 0;
                if (!v43)
                {
                  v78 = (_BYTE *)(a2 + 11173 + v77);
                  if (!*v78)
                  {
                    v971 = v15;
                    v79 = *(_DWORD *)(v29 + 4712);
                    if (v79 >= 1)
                    {
                      v80 = (__int16)(2
                                    * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v927 + 616)
                                                           + 8
                                                           * (int)((v76 & 0xFFFFFFF0)
                                                                 + *(_DWORD *)(v927 + 628) * (v75 & 0xFFFFFFF0)))
                                               + 167)) >> 12;
                      v81 = (_DWORD *)(a4 + 16);
                      v82 = v79 + 1;
                      do
                      {
                        v83 = *(unsigned __int16 *)(a4 + 40);
                        v84 = (v83 >> 1) & 0x7F80 | 4;
                        v85 = 1 << (v82 - 2);
                        v86 = v83 - v84;
                        v87 = (v85 & v80) == 0;
                        if ((v85 & v80) != 0)
                          v88 = v86;
                        else
                          v88 = 0;
                        if (v87)
                          v89 = v86;
                        else
                          v89 = v84;
                        od_ec_enc_normalize(v81, *(_QWORD *)(a4 + 32) + v88, v89);
                        a4 = v977;
                        --v82;
                      }
                      while (v82 > 1);
                    }
                    *v78 = 1;
                    v29 = v930;
                    v15 = v971;
                  }
                }
              }
              write_delta_q_params(v30, (uint64_t)v974, v43, a4);
              v90 = v977;
              if ((*(_BYTE *)v30 & 0xFD) != 0 || !*(_BYTE *)(v927 + 543) || !*(_BYTE *)(v927 + 544))
              {
LABEL_109:
                v92 = (uint64_t)v974;
                v91 = (uint64_t)v975;
                v93 = 1;
LABEL_223:
                result = (unint64_t)write_intra_prediction_modes(v91, v92, v93, v90);
                v90 = v977;
                goto LABEL_224;
              }
              v94 = v15;
              v95 = a5;
              v96 = *(uint64_t **)(v976 + 8280);
              v97 = *(unsigned __int16 **)(v976 + 11064);
              v98 = v97 + 6242;
              v99 = *v96;
              v100 = ((unint64_t)*(unsigned __int16 *)(*v96 + 167) >> 7) & 1;
              if ((_DWORD)v100)
              {
                v101 = (unsigned __int16)v98[v100];
                v102 = *(_QWORD *)(v977 + 32);
                v103 = *(unsigned __int16 *)(v977 + 40);
                v104 = v103 >> 8;
                v105 = v964;
                if (((__int16)v98[(v100 - 1)] & 0x80000000) == 0)
                {
                  v106 = ((v104 * ((unsigned __int16)v98[(v100 - 1)] >> 6)) >> 1) - 4 * v100 + 8;
                  v102 += v103 - v106;
                  v107 = 4 * v100 - ((v104 * (v101 >> 6)) >> 1) + v106;
                  goto LABEL_122;
                }
              }
              else
              {
                v101 = (unsigned __int16)*v98;
                v102 = *(_QWORD *)(v977 + 32);
                v103 = *(unsigned __int16 *)(v977 + 40);
                v104 = v103 >> 8;
                v105 = v964;
              }
              v107 = v103 + 4 * v100 - (((v101 >> 6) * v104) >> 1);
LABEL_122:
              result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v977 + 16), v102, v107 - 4);
              v90 = v977;
              if (*(_BYTE *)(v977 + 48))
              {
                v113 = v97[6244];
                v114 = (v113 >> 4) + 4;
                v115 = (unsigned __int16)*v98;
                if ((_DWORD)v100)
                  v116 = v115 + ((int)(0x8000 - v115) >> v114);
                else
                  v116 = v115 - (v115 >> v114);
                *v98 = v116;
                if (v113 < 0x20)
                  LOWORD(v113) = v113 + 1;
                v97[6244] = v113;
              }
              if ((_DWORD)v100)
              {
                LODWORD(v983) = *v94;
                result = (unint64_t)av1_encode_dv(v977, (unsigned __int16 *)(v99 + 8), (unsigned __int16 *)&v983, v97 + 6099);
                v90 = v977;
              }
              a5 = v95;
              if ((*(_WORD *)(v105 + 167) & 0x80) != 0)
                goto LABEL_224;
              goto LABEL_109;
            }
LABEL_87:
            if (*(_BYTE *)(v29 + 1))
            {
              write_segment_id_0((_DWORD *)v8, v974, v964, a4, v29, v978, v43);
              a2 = v976;
              a4 = v977;
            }
            goto LABEL_89;
          }
        }
        else
        {
          v50 = *v48;
          v51 = *(_QWORD *)(a4 + 32);
          v52 = *(unsigned __int16 *)(a4 + 40);
          v53 = v52 >> 8;
        }
        od_ec_enc_normalize(v49, v51, v52 + 4 * v43 - (((v50 >> 6) * v53) >> 1) - 4);
        a4 = v977;
        if (!*(_BYTE *)(v977 + 48))
        {
LABEL_57:
          a2 = v976;
          v31 = v47;
          v9 = v46;
          v8 = v42;
          v15 = v970;
          if (*(_BYTE *)(v29 + 168))
            goto LABEL_89;
          goto LABEL_87;
        }
        goto LABEL_81;
      }
    }
    LODWORD(v44) = *(unsigned __int8 *)(v44 + 144);
    goto LABEL_54;
  }
  v32 = (char)(*v12)[16];
  LOBYTE(v33) = (*v12)[17];
  if (v32 <= 1)
    v32 = 1;
  if (v32 > 8
    || (v34 = *(_DWORD *)(a1 + 239040 + 4 * (v32 - 1) + 240), v34 == -1))
  {
    v35 = 0;
  }
  else
  {
    v35 = a1 + 239040 + 16 * v34 + 288;
  }
  *(_QWORD *)(a2 + 8360) = v35;
  v33 = (char)v33;
  if ((char)v33 <= 1)
    v33 = 1;
  v948 = v31;
  if (v33 > 8 || (v36 = *(_DWORD *)(a1 + 239040 + 4 * (v33 - 1) + 240), v36 == -1))
    v37 = 0;
  else
    v37 = a1 + 239040 + 16 * v36 + 288;
  *(_QWORD *)(a2 + 8368) = v37;
  v38 = *v12;
  v955 = (*v12)[2];
  v39 = *(_WORD *)(*v12 + 167);
  v969 = v39 & 7;
  v942 = *v38;
  v945 = *(_BYTE *)(a1 + 239533);
  v40 = (v39 & 0x80) != 0 || (char)v38[16] > 0;
  v965 = v40;
  v939 = v38[17];
  write_inter_segment_id((_DWORD *)a1, (uint64_t)v974, a4, (_BYTE *)(a1 + 258032), v9 + 12490, 0, 1);
  v56 = (_QWORD *)v976;
  v55 = v977;
  if (*(_DWORD *)(v927 + 72) && (!*(_BYTE *)v29 || (*(_DWORD *)(v8 + 4 * v969 + 258164) & 0x40) == 0))
  {
    v57 = *v38;
    v58 = block_size_wide_3[v57];
    v59 = block_size_high_2[v57];
    if (v58 < v59)
      v59 = v58;
    if (v59 >= 8 && (!*(_BYTE *)v29 || (*(_DWORD *)(v8 + 4 * v969 + 258164) & 0xA0) == 0))
    {
      v60 = ((unint64_t)*(unsigned __int16 *)(v38 + 167) >> 6) & 1;
      v61 = *(_QWORD *)(v976 + 8296);
      v62 = *(_QWORD *)(v976 + 8304);
      if (v62)
        v62 = ((unint64_t)*(unsigned __int16 *)(v62 + 167) >> 6) & 1;
      if (v61)
        v61 = ((unint64_t)*(unsigned __int16 *)(v61 + 167) >> 6) & 1;
      v63 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 6 * (v61 + v62) + 11852);
      if ((_DWORD)v60)
      {
        v64 = v63[v60];
        v65 = *(_QWORD *)(v977 + 32);
        v66 = *(unsigned __int16 *)(v977 + 40);
        v67 = v66 >> 8;
        if (((__int16)v63[(v60 - 1)] & 0x80000000) == 0)
        {
          v68 = ((v67 * (v63[(v60 - 1)] >> 6)) >> 1) - 4 * v60 + 8;
          v65 += v66 - v68;
          v69 = 4 * v60 - ((v67 * (v64 >> 6)) >> 1) + v68;
          goto LABEL_117;
        }
      }
      else
      {
        v64 = *v63;
        v65 = *(_QWORD *)(v977 + 32);
        v66 = *(unsigned __int16 *)(v977 + 40);
        v67 = v66 >> 8;
      }
      v69 = v66 + 4 * v60 - (((v64 >> 6) * v67) >> 1);
LABEL_117:
      od_ec_enc_normalize((_DWORD *)(v977 + 16), v65, v69 - 4);
      v56 = (_QWORD *)v976;
      v55 = v977;
      if (*(_BYTE *)(v977 + 48))
      {
        v108 = v63[2];
        v109 = (v108 >> 4) + 4;
        v110 = *v63;
        if ((_DWORD)v60)
          v111 = v110 + ((int)(0x8000 - v110) >> v109);
        else
          v111 = v110 - (v110 >> v109);
        *v63 = v111;
        if (v108 < 0x20)
          LOWORD(v108) = v108 + 1;
        v63[2] = v108;
      }
    }
  }
  v979 = (__int16 *)v38;
  v951 = v13;
  if ((*(_WORD *)(v38 + 167) & 0x40) != 0)
  {
    v118 = 1;
    v117 = (_DWORD *)(v8 + 239040);
    goto LABEL_150;
  }
  v117 = (_DWORD *)(v8 + 239040);
  if (*(_BYTE *)v29 && (*(_DWORD *)(v8 + 4 * v969 + 258164) & 0x40) != 0)
  {
    v118 = 1;
    goto LABEL_150;
  }
  v118 = v38[144];
  v119 = v56[1037];
  v120 = v56[1038];
  if (v120)
    LODWORD(v120) = *(unsigned __int8 *)(v120 + 144);
  if (v119)
    LODWORD(v119) = *(unsigned __int8 *)(v119 + 144);
  v121 = (unsigned __int16 *)(v56[1383] + 6 * (v119 + v120) + 11870);
  v122 = (_DWORD *)(v55 + 16);
  if (!v38[144])
  {
    v123 = *v121;
    v124 = *(_QWORD *)(v55 + 32);
    v125 = *(unsigned __int16 *)(v55 + 40);
    v126 = v125 >> 8;
LABEL_143:
    od_ec_enc_normalize(v122, v124, v125 + 4 * v118 - (((v123 >> 6) * v126) >> 1) - 4);
    v55 = v977;
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_150;
    goto LABEL_144;
  }
  v123 = v121[v38[144]];
  v124 = *(_QWORD *)(v55 + 32);
  v125 = *(unsigned __int16 *)(v55 + 40);
  v126 = v125 >> 8;
  if ((__int16)v121[v118 - 1] < 0)
    goto LABEL_143;
  v127 = ((v126 * (v121[v118 - 1] >> 6)) >> 1) - 4 * v118 + 8;
  od_ec_enc_normalize(v122, v124 + v125 - v127, 4 * v118 - ((v126 * (v123 >> 6)) >> 1) + v127 - 4);
  v55 = v977;
  if (!*(_BYTE *)(v977 + 48))
    goto LABEL_150;
LABEL_144:
  v128 = v121[2];
  v129 = (v128 >> 4) + 4;
  v130 = *v121;
  if ((char)v118 < 1)
    v131 = v130 - (v130 >> v129);
  else
    v131 = v130 + ((int)(0x8000 - v130) >> v129);
  *v121 = v131;
  if (v128 < 0x20)
    LOWORD(v128) = v128 + 1;
  v121[2] = v128;
LABEL_150:
  write_inter_segment_id((_DWORD *)v8, (uint64_t)v974, v55, (_BYTE *)(v8 + 258032), v9 + 12490, v118, 0);
  v132 = v977;
  if (!*(_BYTE *)(v927 + 547) && !*(_BYTE *)(v927 + 544))
  {
    v133 = *(_QWORD *)(v8 + 263720);
    v134 = *(_DWORD *)(v976 + 416);
    v135 = *(_DWORD *)(v976 + 420);
    if (((v134 | v135) & (*(_DWORD *)(v133 + 32) - 1)) == 0)
      *(_DWORD *)(v948 + 123) = 0;
    if (*(_BYTE *)(v133 + 28) == 15)
      v136 = (v134 >> 3) & 2 | (v135 >> 4) & 1;
    else
      v136 = 0;
    if (!v118)
    {
      v137 = (_BYTE *)(v976 + 11173 + v136);
      if (!*v137)
      {
        v936 = v8;
        v138 = *(_DWORD *)(v8 + 262744);
        if (v138 >= 1)
        {
          v139 = (__int16)(2
                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v927 + 616)
                                                + 8
                                                * (int)((v135 & 0xFFFFFFF0)
                                                      + *(_DWORD *)(v927 + 628) * (v134 & 0xFFFFFFF0)))
                                    + 167)) >> 12;
          v140 = v138 + 1;
          do
          {
            v141 = *(unsigned __int16 *)(v132 + 40);
            v142 = (v141 >> 1) & 0x7F80 | 4;
            v143 = 1 << (v140 - 2);
            v144 = v141 - v142;
            v145 = (v143 & v139) == 0;
            if ((v143 & v139) != 0)
              v146 = v144;
            else
              v146 = 0;
            if (v145)
              v147 = v144;
            else
              v147 = v142;
            od_ec_enc_normalize((_DWORD *)(v977 + 16), *(_QWORD *)(v132 + 32) + v146, v147);
            v132 = v977;
            --v140;
          }
          while (v140 > 1);
        }
        *v137 = 1;
        v29 = v930;
        v8 = v936;
      }
    }
  }
  result = (unint64_t)write_delta_q_params(v117, (uint64_t)v974, v118, v132);
  v90 = v977;
  v149 = *(__int16 *)((char *)v979 + 167);
  if ((v149 & 0x40) == 0 && (!*(_BYTE *)v29 || (*(_DWORD *)(v8 + 4 * (v149 & 7) + 258164) & 0xA0) == 0))
  {
    v150 = *(_QWORD *)(v976 + 8304);
    v151 = *(_QWORD *)(v976 + 8296);
    if (!*v925 || !v925[1])
    {
      if (!(v925[1] | *v925))
        goto LABEL_182;
      if (*v925)
        v151 = *(_QWORD *)(v976 + 8304);
      if ((*(_WORD *)(v151 + 167) & 0x80) != 0)
LABEL_182:
        v154 = 0;
      else
        v154 = 2 * (*(char *)(v151 + 16) < 1);
LABEL_188:
      v156 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 6 * v154 + 11888);
      v157 = (_DWORD *)(v977 + 16);
      if (v965)
      {
        v158 = v156[v965];
        v159 = *(_QWORD *)(v977 + 32);
        v160 = *(unsigned __int16 *)(v977 + 40);
        v161 = v160 >> 8;
        if (((__int16)v156[v965 - 1] & 0x80000000) == 0)
        {
          v162 = ((v161 * (v156[v965 - 1] >> 6)) >> 1) - 4 * v965 + 8;
          result = (unint64_t)od_ec_enc_normalize(v157, v159 + v160 - v162, 4 * v965 - ((v161 * (v158 >> 6)) >> 1) + v162 - 4);
          v90 = v977;
          if (!*(_BYTE *)(v977 + 48))
            goto LABEL_199;
          goto LABEL_194;
        }
      }
      else
      {
        v158 = *v156;
        v159 = *(_QWORD *)(v977 + 32);
        v160 = *(unsigned __int16 *)(v977 + 40);
        v161 = v160 >> 8;
      }
      result = (unint64_t)od_ec_enc_normalize(v157, v159, v160 + 4 * v965 - (((v158 >> 6) * v161) >> 1) - 4);
      v90 = v977;
      if (!*(_BYTE *)(v977 + 48))
        goto LABEL_199;
LABEL_194:
      v163 = v156[2];
      v164 = (v163 >> 4) + 4;
      v165 = *v156;
      v166 = v165 - (v165 >> v164);
      v167 = v165 + ((int)(0x8000 - v165) >> v164);
      if (!v965)
        LOWORD(v167) = v166;
      *v156 = v167;
      if (v163 < 0x20)
        LOWORD(v163) = v163 + 1;
      v156[2] = v163;
      goto LABEL_199;
    }
    if ((*(_WORD *)(v150 + 167) & 0x80) != 0)
    {
      v152 = 0;
      if ((*(_WORD *)(v151 + 167) & 0x80) != 0)
        goto LABEL_176;
    }
    else
    {
      v152 = *(char *)(v150 + 16) < 1;
      if ((*(_WORD *)(v151 + 167) & 0x80) != 0)
      {
LABEL_176:
        v153 = 0;
        goto LABEL_185;
      }
    }
    v153 = *(char *)(v151 + 16) < 1;
LABEL_185:
    v155 = v153 || v152;
    v87 = !v153 || !v152;
    v154 = 3;
    if (v87)
      v154 = v155;
    goto LABEL_188;
  }
LABEL_199:
  if ((*(__int16 *)((char *)v979 + 167) & 0x40) != 0)
    goto LABEL_224;
  if (!v965)
  {
    v92 = (uint64_t)v974;
    v91 = (uint64_t)v975;
    v93 = 0;
    goto LABEL_223;
  }
  *(_QWORD *)v948 = 0;
  v168 = *(_QWORD *)(v976 + 8304);
  v169 = *(_QWORD *)(v976 + 8296);
  v170 = *v925;
  v171 = v925[1];
  if (*v925 && ((*(_WORD *)(v168 + 167) & 0x80) != 0 || *(char *)(v168 + 16) >= 1))
  {
    ++*(_BYTE *)(v948 + *(char *)(v168 + 16));
    if (*(char *)(v168 + 17) >= 1)
      ++*(_BYTE *)(v948 + *(unsigned __int8 *)(v168 + 17));
  }
  v937 = v9;
  if (v171 && ((*(_WORD *)(v169 + 167) & 0x80) != 0 || *(char *)(v169 + 16) >= 1))
  {
    ++*(_BYTE *)(v948 + *(char *)(v169 + 16));
    if (*(char *)(v169 + 17) >= 1)
      ++*(_BYTE *)(v948 + *(unsigned __int8 *)(v169 + 17));
  }
  v172 = **(unsigned __int8 ***)(v976 + 8280);
  v173 = (char)v172[17];
  if (*(_BYTE *)v29 && (*(_DWORD *)(v8 + 4 * (*(_WORD *)(v172 + 167) & 7) + 258164) & 0xE0) != 0)
    goto LABEL_691;
  if (*(_BYTE *)(v927 + 49) == 2)
  {
    v174 = *v172;
    v175 = block_size_wide_3[v174];
    v176 = block_size_high_2[v174];
    if (v175 < v176)
      v176 = v175;
    if (v176 >= 8)
    {
      if (!v170 || !v171)
      {
        if (!(v171 | v170))
        {
          v178 = 1;
          goto LABEL_451;
        }
        if (v170)
          v169 = v168;
        if (*(char *)(v169 + 17) <= 0)
        {
          v178 = *(unsigned __int8 *)(v169 + 16) - 5 < 3;
          goto LABEL_451;
        }
        goto LABEL_445;
      }
      v177 = *(char *)(v169 + 17);
      if (*(char *)(v168 + 17) <= 0)
      {
        v367 = *(unsigned __int8 *)(v168 + 16);
        v368 = v367 - 5;
        if (v177 <= 0)
        {
          v178 = (v368 < 3) ^ (*(unsigned __int8 *)(v169 + 16) - 5 < 3);
          goto LABEL_451;
        }
        if (v368 < 3)
        {
LABEL_445:
          v178 = 3;
          goto LABEL_451;
        }
        v369 = (*(unsigned __int16 *)(v168 + 167) >> 7) & 1;
        v370 = (char)v367;
      }
      else
      {
        if (v177 > 0)
        {
          v178 = 4;
          goto LABEL_451;
        }
        v370 = *(unsigned __int8 *)(v169 + 16);
        if ((v370 - 5) < 3)
          goto LABEL_445;
        v369 = (*(unsigned __int16 *)(v169 + 167) >> 7) & 1;
        v370 = (char)v370;
      }
      if (v370 > 0)
        v369 = 1;
      v178 = v369 ^ 3;
LABEL_451:
      v371 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 6 * v178 + 11342);
      v372 = *v371;
      if (v173 <= 0)
      {
        v374 = *(_QWORD *)(v90 + 32);
        v375 = *(unsigned __int16 *)(v90 + 40);
        v376 = v375 >> 8;
      }
      else
      {
        v373 = *(unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 6 * v178 + 11344);
        v374 = *(_QWORD *)(v90 + 32);
        v375 = *(unsigned __int16 *)(v90 + 40);
        v376 = v375 >> 8;
        if ((v372 & 0x8000) == 0)
        {
          v377 = ((v376 * (v372 >> 6)) >> 1) + 4;
          v374 += v375 - v377;
          v378 = v377 - ((v376 * (v373 >> 6)) >> 1);
          goto LABEL_460;
        }
        v372 = v371[1];
      }
      v379 = (v372 >> 6) * v376;
      if (v173 >= 1)
        v380 = 0;
      else
        v380 = -1;
      v378 = v375 + 4 * v380 - (v379 >> 1);
LABEL_460:
      od_ec_enc_normalize((_DWORD *)(v90 + 16), v374, v378);
      v90 = v977;
      if (*(_BYTE *)(v977 + 48))
      {
        v381 = v371[2];
        v382 = (v381 >> 4) + 4;
        v383 = *v371;
        if (v173 < 1)
          v384 = v383 - (v383 >> v382);
        else
          v384 = v383 + ((int)(0x8000 - v383) >> v382);
        *v371 = v384;
        if (v381 < 0x20)
          LOWORD(v381) = v381 + 1;
        v371[2] = v381;
      }
    }
  }
  if (v173 < 1)
  {
    v386 = v172[16] - 8;
    v148.i32[0] = *(_DWORD *)(v948 + 1);
    v387 = vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v148)));
    v388 = *(unsigned __int8 *)(v948 + 6) + *(unsigned __int8 *)(v948 + 5) + *(unsigned __int8 *)(v948 + 7);
    v389 = 2 * (v387 >= v388);
    if (v387 == v388)
      v389 = 1;
    v390 = *(_QWORD *)(v976 + 11064) + 36 * v389;
    v391 = (unsigned __int16 *)(v390 + 11372);
    v392 = (_DWORD *)(v90 + 16);
    v393 = *(unsigned __int16 *)(v390 + 11372);
    if (v386 > 0xFFFFFFFC)
    {
      v409 = *(unsigned __int16 *)(v390 + 11374);
      v394 = *(_QWORD *)(v90 + 32);
      v395 = *(unsigned __int16 *)(v90 + 40);
      v396 = v395 >> 8;
      if ((v393 & 0x8000) == 0)
      {
        v410 = ((v396 * (v393 >> 6)) >> 1) + 4;
        v394 += v395 - v410;
        v411 = v410 - ((v396 * (v409 >> 6)) >> 1);
        goto LABEL_536;
      }
      v393 = v391[1];
    }
    else
    {
      v394 = *(_QWORD *)(v90 + 32);
      v395 = *(unsigned __int16 *)(v90 + 40);
      v396 = v395 >> 8;
    }
    v468 = (v393 >> 6) * v396;
    if (v386 >= 0xFFFFFFFD)
      v469 = 0;
    else
      v469 = -1;
    v411 = v395 + 4 * v469 - (v468 >> 1);
LABEL_536:
    od_ec_enc_normalize((_DWORD *)(v90 + 16), v394, v411);
    if (*(_BYTE *)(v977 + 48))
    {
      v470 = v391[2];
      v471 = (v470 >> 4) + 4;
      v472 = *v391;
      if (v386 >= 0xFFFFFFFD)
        v473 = v472 + ((int)(0x8000 - v472) >> v471);
      else
        v473 = v472 - (v472 >> v471);
      *v391 = v473;
      if (v470 < 0x20)
        LOWORD(v470) = v470 + 1;
      v391[2] = v470;
    }
    v474 = v172[16];
    if (v386 < 0xFFFFFFFD)
    {
      v475 = v474 - 5;
      v476 = *(unsigned __int8 *)(v948 + 2) + *(unsigned __int8 *)(v948 + 1);
      v477 = *(unsigned __int8 *)(v948 + 4) + *(unsigned __int8 *)(v948 + 3);
      v87 = v476 == v477;
      v478 = 2 * (v476 >= v477);
      if (v87)
        v478 = 1;
      v479 = *(_QWORD *)(v976 + 11064) + 36 * v478;
      v480 = (unsigned __int16 *)(v479 + 11384);
      v481 = *(unsigned __int16 *)(v479 + 11384);
      if (v475 > 0xFFFFFFFD)
      {
        v494 = *(unsigned __int16 *)(v479 + 11386);
        v482 = *(_QWORD *)(v977 + 32);
        v483 = *(unsigned __int16 *)(v977 + 40);
        v484 = v483 >> 8;
        if ((v481 & 0x8000) == 0)
        {
          v495 = ((v484 * (v481 >> 6)) >> 1) + 4;
          v482 += v483 - v495;
          v496 = v495 - ((v484 * (v494 >> 6)) >> 1);
          goto LABEL_648;
        }
        v481 = v480[1];
      }
      else
      {
        v482 = *(_QWORD *)(v977 + 32);
        v483 = *(unsigned __int16 *)(v977 + 40);
        v484 = v483 >> 8;
      }
      v570 = (v481 >> 6) * v484;
      if (v475 >= 0xFFFFFFFE)
        v571 = 0;
      else
        v571 = -1;
      v496 = v483 + 4 * v571 - (v570 >> 1);
LABEL_648:
      od_ec_enc_normalize(v392, v482, v496);
      if (*(_BYTE *)(v977 + 48))
      {
        v572 = v480[2];
        v573 = (v572 >> 4) + 4;
        v574 = *v480;
        if (v475 >= 0xFFFFFFFE)
          v575 = v574 + ((int)(0x8000 - v574) >> v573);
        else
          v575 = v574 - (v574 >> v573);
        *v480 = v575;
        if (v572 < 0x20)
          LOWORD(v572) = v572 + 1;
        v480[2] = v572;
      }
      v576 = v172[16];
      v577 = *(_QWORD *)(v976 + 11064);
      if (v475 > 0xFFFFFFFD)
      {
        v581 = *(unsigned __int8 *)(v948 + 3);
        v582 = *(unsigned __int8 *)(v948 + 4);
        v87 = v581 == v582;
        v583 = 2 * (v581 >= v582);
        if (v87)
          v583 = 1;
        v561 = (unsigned __int16 *)(v577 + 36 * v583 + 11396);
        result = (unint64_t)od_ec_encode_cdf_q15((uint64_t)v392, v576 != 3, (uint64_t)v561, 2);
        v90 = v977;
        if (!*(_BYTE *)(v977 + 48))
          goto LABEL_691;
        v562 = v561 + 2;
        v563 = v561[2];
        v564 = (v563 >> 4) + 4;
        v565 = *v561;
        if (v576 != 3)
          goto LABEL_686;
      }
      else
      {
        v578 = *(unsigned __int8 *)(v948 + 1);
        v579 = *(unsigned __int8 *)(v948 + 2);
        v87 = v578 == v579;
        v580 = 2 * (v578 >= v579);
        if (v87)
          v580 = 1;
        v561 = (unsigned __int16 *)(v577 + 36 * v580 + 11390);
        result = (unint64_t)od_ec_encode_cdf_q15((uint64_t)v392, v576 != 1, (uint64_t)v561, 2);
        v90 = v977;
        if (!*(_BYTE *)(v977 + 48))
          goto LABEL_691;
        v562 = v561 + 2;
        v563 = v561[2];
        v564 = (v563 >> 4) + 4;
        v565 = *v561;
        if (v576 != 1)
          goto LABEL_686;
      }
      goto LABEL_667;
    }
    v485 = *(unsigned __int8 *)(v948 + 6) + *(unsigned __int8 *)(v948 + 5);
    v486 = *(unsigned __int8 *)(v948 + 7);
    v87 = v485 == v486;
    v487 = 2 * (v485 >= v486);
    if (v87)
      v487 = 1;
    v488 = *(_QWORD *)(v976 + 11064) + 36 * v487;
    v489 = (unsigned __int16 *)(v488 + 11378);
    v490 = *(unsigned __int16 *)(v488 + 11378);
    if (v474 == 7)
    {
      v497 = *(unsigned __int16 *)(v488 + 11380);
      v491 = *(_QWORD *)(v977 + 32);
      v492 = *(unsigned __int16 *)(v977 + 40);
      v493 = v492 >> 8;
      if ((v490 & 0x8000) == 0)
      {
        v498 = ((v493 * (v490 >> 6)) >> 1) + 4;
        v491 += v492 - v498;
        v499 = v498 - ((v493 * (v497 >> 6)) >> 1);
        goto LABEL_673;
      }
      v490 = v489[1];
    }
    else
    {
      v491 = *(_QWORD *)(v977 + 32);
      v492 = *(unsigned __int16 *)(v977 + 40);
      v493 = v492 >> 8;
    }
    v585 = (v490 >> 6) * v493;
    if (v474 == 7)
      v586 = 0;
    else
      v586 = -1;
    v499 = v492 + 4 * v586 - (v585 >> 1);
LABEL_673:
    result = (unint64_t)od_ec_enc_normalize(v392, v491, v499);
    v90 = v977;
    if (*(_BYTE *)(v977 + 48))
    {
      v587 = v489[2];
      v588 = (v587 >> 4) + 4;
      v589 = *v489;
      if (v474 == 7)
        v590 = v589 + ((int)(0x8000 - v589) >> v588);
      else
        v590 = v589 - (v589 >> v588);
      *v489 = v590;
      if (v587 < 0x20)
        LOWORD(v587) = v587 + 1;
      v489[2] = v587;
    }
    if (v474 == 7)
      goto LABEL_691;
    v591 = v172[16];
    v592 = *(unsigned __int8 *)(v948 + 5);
    v593 = *(unsigned __int8 *)(v948 + 6);
    v87 = v592 == v593;
    v594 = 2 * (v592 >= v593);
    if (v87)
      v594 = 1;
    v561 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 36 * v594 + 11402);
    result = (unint64_t)od_ec_encode_cdf_q15((uint64_t)v392, v591 == 6, (uint64_t)v561, 2);
    v90 = v977;
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_691;
    v562 = v561 + 2;
    v563 = v561[2];
    v564 = (v563 >> 4) + 4;
    v565 = *v561;
    if (v591 == 6)
      goto LABEL_686;
    goto LABEL_667;
  }
  if ((char)v172[17] < 1)
    v385 = 1;
  else
    v385 = (v172[17] > 4u) ^ ((char)v172[16] > 4);
  v397 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064)
                            + 6 * (int)av1_get_comp_reference_type_context((uint64_t)v974)
                            + 11480);
  v398 = (_DWORD *)(v977 + 16);
  if (v385)
  {
    v399 = v397[v385];
    v400 = *(_QWORD *)(v977 + 32);
    v401 = *(unsigned __int16 *)(v977 + 40);
    v402 = v401 >> 8;
    if (((__int16)v397[v385 - 1] & 0x80000000) == 0)
    {
      v403 = ((v402 * (v397[v385 - 1] >> 6)) >> 1) - 4 * v385 + 8;
      v400 += v401 - v403;
      v404 = 4 * v385 - ((v402 * (v399 >> 6)) >> 1) + v403;
      goto LABEL_480;
    }
  }
  else
  {
    v399 = *v397;
    v400 = *(_QWORD *)(v977 + 32);
    v401 = *(unsigned __int16 *)(v977 + 40);
    v402 = v401 >> 8;
  }
  v404 = v401 + 4 * v385 - (((v399 >> 6) * v402) >> 1);
LABEL_480:
  od_ec_enc_normalize((_DWORD *)(v977 + 16), v400, v404 - 4);
  if (*(_BYTE *)(v977 + 48))
  {
    v405 = v397[2];
    v406 = (v405 >> 4) + 4;
    v407 = *v397;
    if (v385)
      v408 = v407 + ((int)(0x8000 - v407) >> v406);
    else
      v408 = v407 - (v407 >> v406);
    *v397 = v408;
    if (v405 < 0x20)
      LOWORD(v405) = v405 + 1;
    v397[2] = v405;
  }
  v412 = v172[16];
  v413 = *(unsigned __int8 *)(v948 + 4);
  if (!v385)
  {
    v423 = *(unsigned __int8 *)(v948 + 2) + *(unsigned __int8 *)(v948 + 1) + *(unsigned __int8 *)(v948 + 3) + v413;
    v424 = *(unsigned __int8 *)(v948 + 6) + *(unsigned __int8 *)(v948 + 5) + *(unsigned __int8 *)(v948 + 7);
    v87 = v423 == v424;
    v425 = 2 * (v423 >= v424);
    if (v87)
      v425 = 1;
    v426 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * v425 + 11510);
    v427 = *v426;
    if (v412 == 5)
    {
      v434 = *(unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * v425 + 11512);
      v428 = *(_QWORD *)(v977 + 32);
      v429 = *(unsigned __int16 *)(v977 + 40);
      v430 = v429 >> 8;
      if ((v427 & 0x8000) == 0)
      {
        v435 = ((v430 * (v427 >> 6)) >> 1) + 4;
        v428 += v429 - v435;
        v436 = v435 - ((v430 * (v434 >> 6)) >> 1);
        goto LABEL_563;
      }
      v427 = v426[1];
    }
    else
    {
      v428 = *(_QWORD *)(v977 + 32);
      v429 = *(unsigned __int16 *)(v977 + 40);
      v430 = v429 >> 8;
    }
    v500 = (v427 >> 6) * v430;
    if (v412 == 5)
      v501 = 0;
    else
      v501 = -1;
    v436 = v429 + 4 * v501 - (v500 >> 1);
LABEL_563:
    result = (unint64_t)od_ec_enc_normalize(v398, v428, v436);
    v90 = v977;
    if (*(_BYTE *)(v977 + 48))
    {
      v502 = v426[2];
      v503 = (v502 >> 4) + 4;
      v504 = *v426;
      if (v412 == 5)
        v505 = v504 + ((int)(0x8000 - v504) >> v503);
      else
        v505 = v504 - (v504 >> v503);
      *v426 = v505;
      if (v502 < 0x20)
        LOWORD(v502) = v502 + 1;
      v426[2] = v502;
    }
    if (v412 == 5)
      goto LABEL_691;
    v506 = v172[17] - 3;
    v507 = *(unsigned __int8 *)(v948 + 2);
    v508 = *(unsigned __int8 *)(v948 + 4) + *(unsigned __int8 *)(v948 + 3);
    v87 = v508 == v507;
    v509 = 2 * (v508 <= v507);
    if (v87)
      v509 = 1;
    v510 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * v509 + 11516);
    result = (unint64_t)od_ec_encode_cdf_q15(v977 + 16, v506 < 2, (uint64_t)v510, 2);
    v90 = v977;
    if (*(_BYTE *)(v977 + 48))
    {
      v511 = v510[2];
      v512 = (v511 >> 4) + 4;
      v513 = *v510;
      if (v506 > 1)
        v514 = v513 - (v513 >> v512);
      else
        v514 = v513 + ((int)(0x8000 - v513) >> v512);
      *v510 = v514;
      if (v511 < 0x20)
        LOWORD(v511) = v511 + 1;
      v510[2] = v511;
    }
    if (v506 > 1)
      goto LABEL_691;
    v557 = v172[17];
    v558 = *(unsigned __int8 *)(v948 + 3);
    v559 = *(unsigned __int8 *)(v948 + 4);
    v87 = v558 == v559;
    v560 = 2 * (v558 >= v559);
    if (v87)
      v560 = 1;
    v561 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * v560 + 11522);
    result = (unint64_t)od_ec_encode_cdf_q15(v977 + 16, v557 == 4, (uint64_t)v561, 2);
    v90 = v977;
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_691;
    v562 = v561 + 2;
    v563 = v561[2];
    v564 = (v563 >> 4) + 4;
    v565 = *v561;
    if (v557 == 4)
    {
LABEL_686:
      v584 = v565 + ((int)(0x8000 - v565) >> v564);
      goto LABEL_687;
    }
LABEL_667:
    v584 = v565 - (v565 >> v564);
LABEL_687:
    *v561 = v584;
LABEL_688:
    if (v563 < 0x20)
      LOWORD(v563) = v563 + 1;
    *v562 = v563;
    goto LABEL_691;
  }
  v414 = v412 - 5;
  v415 = *(unsigned __int8 *)(v948 + 2) + *(unsigned __int8 *)(v948 + 1);
  v416 = v413 + *(unsigned __int8 *)(v948 + 3);
  v87 = v415 == v416;
  v417 = 2 * (v415 >= v416);
  if (v87)
    v417 = 1;
  v418 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * v417 + 11564);
  v419 = *v418;
  if (v414 > 0xFFFFFFFD)
  {
    v431 = *(unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * v417 + 11566);
    v420 = *(_QWORD *)(v977 + 32);
    v421 = *(unsigned __int16 *)(v977 + 40);
    v422 = v421 >> 8;
    if ((v419 & 0x8000) == 0)
    {
      v432 = ((v422 * (v419 >> 6)) >> 1) + 4;
      v420 += v421 - v432;
      v433 = v432 - ((v422 * (v431 >> 6)) >> 1);
      goto LABEL_509;
    }
    v419 = v418[1];
  }
  else
  {
    v420 = *(_QWORD *)(v977 + 32);
    v421 = *(unsigned __int16 *)(v977 + 40);
    v422 = v421 >> 8;
  }
  v437 = (v419 >> 6) * v422;
  if (v414 >= 0xFFFFFFFE)
    v438 = 0;
  else
    v438 = -1;
  v433 = v421 + 4 * v438 - (v437 >> 1);
LABEL_509:
  od_ec_enc_normalize(v398, v420, v433);
  if (*(_BYTE *)(v977 + 48))
  {
    v439 = v418[2];
    v440 = (v439 >> 4) + 4;
    v441 = *v418;
    if (v414 >= 0xFFFFFFFE)
      v442 = v441 + ((int)(0x8000 - v441) >> v440);
    else
      v442 = v441 - (v441 >> v440);
    *v418 = v442;
    if (v439 < 0x20)
      LOWORD(v439) = v439 + 1;
    v418[2] = v439;
  }
  v443 = v172[16];
  v444 = *(_QWORD *)(v976 + 11064);
  if (v414 > 0xFFFFFFFD)
  {
    v454 = *(unsigned __int8 *)(v948 + 3);
    v455 = *(unsigned __int8 *)(v948 + 4);
    v87 = v454 == v455;
    v456 = 2 * (v454 >= v455);
    if (v87)
      v456 = 1;
    v457 = v444 + 18 * v456;
    v449 = (unsigned __int16 *)(v457 + 11576);
    v458 = *(unsigned __int16 *)(v457 + 11576);
    if (v443 == 4)
    {
      v465 = *(unsigned __int16 *)(v457 + 11578);
      v459 = *(_QWORD *)(v977 + 32);
      v460 = *(unsigned __int16 *)(v977 + 40);
      v461 = v460 >> 8;
      if ((v458 & 0x8000) == 0)
      {
        v466 = ((v461 * (v458 >> 6)) >> 1) + 4;
        v459 += v460 - v466;
        v467 = v466 - ((v461 * (v465 >> 6)) >> 1);
        goto LABEL_590;
      }
      v458 = v449[1];
    }
    else
    {
      v459 = *(_QWORD *)(v977 + 32);
      v460 = *(unsigned __int16 *)(v977 + 40);
      v461 = v460 >> 8;
    }
    v524 = (v458 >> 6) * v461;
    if (v443 == 4)
      v525 = 0;
    else
      v525 = -1;
    v467 = v460 + 4 * v525 - (v524 >> 1);
LABEL_590:
    od_ec_enc_normalize(v398, v459, v467);
    v518 = v976;
    v517 = v977;
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_596;
    v519 = v449 + 2;
    v520 = v449[2];
    v521 = (v520 >> 4) + 4;
    v522 = *v449;
    if (v443 == 4)
      goto LABEL_584;
LABEL_592:
    v523 = v522 - (v522 >> v521);
    goto LABEL_593;
  }
  v445 = *(unsigned __int8 *)(v948 + 1);
  v446 = *(unsigned __int8 *)(v948 + 2);
  v87 = v445 == v446;
  v447 = 2 * (v445 >= v446);
  if (v87)
    v447 = 1;
  v448 = v444 + 18 * v447;
  v449 = (unsigned __int16 *)(v448 + 11570);
  v450 = *(unsigned __int16 *)(v448 + 11570);
  if (v443 == 2)
  {
    v462 = *(unsigned __int16 *)(v448 + 11572);
    v451 = *(_QWORD *)(v977 + 32);
    v452 = *(unsigned __int16 *)(v977 + 40);
    v453 = v452 >> 8;
    if ((v450 & 0x8000) == 0)
    {
      v463 = ((v453 * (v450 >> 6)) >> 1) + 4;
      v451 += v452 - v463;
      v464 = v463 - ((v453 * (v462 >> 6)) >> 1);
      goto LABEL_582;
    }
    v450 = v449[1];
  }
  else
  {
    v451 = *(_QWORD *)(v977 + 32);
    v452 = *(unsigned __int16 *)(v977 + 40);
    v453 = v452 >> 8;
  }
  v515 = (v450 >> 6) * v453;
  if (v443 == 2)
    v516 = 0;
  else
    v516 = -1;
  v464 = v452 + 4 * v516 - (v515 >> 1);
LABEL_582:
  od_ec_enc_normalize(v398, v451, v464);
  v518 = v976;
  v517 = v977;
  if (!*(_BYTE *)(v977 + 48))
    goto LABEL_596;
  v519 = v449 + 2;
  v520 = v449[2];
  v521 = (v520 >> 4) + 4;
  v522 = *v449;
  if (v443 != 2)
    goto LABEL_592;
LABEL_584:
  v523 = v522 + ((int)(0x8000 - v522) >> v521);
LABEL_593:
  *v449 = v523;
  if (v520 < 0x20)
    LOWORD(v520) = v520 + 1;
  *v519 = v520;
LABEL_596:
  v526 = v172[17];
  v527 = *(unsigned __int8 *)(v948 + 6) + *(unsigned __int8 *)(v948 + 5);
  v528 = *(unsigned __int8 *)(v948 + 7);
  v87 = v527 == v528;
  v529 = 2 * (v527 >= v528);
  if (v87)
    v529 = 1;
  v530 = (unsigned __int16 *)(*(_QWORD *)(v518 + 11064) + 12 * v529 + 11618);
  v531 = *v530;
  if (v526 == 7)
  {
    v535 = *(unsigned __int16 *)(*(_QWORD *)(v518 + 11064) + 12 * v529 + 11620);
    v532 = *(_QWORD *)(v517 + 32);
    v533 = *(unsigned __int16 *)(v517 + 40);
    v534 = v533 >> 8;
    if ((v531 & 0x8000) == 0)
    {
      v536 = ((v534 * (v531 >> 6)) >> 1) + 4;
      v532 += v533 - v536;
      v537 = v536 - ((v534 * (v535 >> 6)) >> 1);
      goto LABEL_608;
    }
    v531 = v530[1];
  }
  else
  {
    v532 = *(_QWORD *)(v517 + 32);
    v533 = *(unsigned __int16 *)(v517 + 40);
    v534 = v533 >> 8;
  }
  v538 = (v531 >> 6) * v534;
  if (v526 == 7)
    v539 = 0;
  else
    v539 = -1;
  v537 = v533 + 4 * v539 - (v538 >> 1);
LABEL_608:
  result = (unint64_t)od_ec_enc_normalize(v398, v532, v537);
  v90 = v977;
  if (*(_BYTE *)(v977 + 48))
  {
    v540 = v530[2];
    v541 = (v540 >> 4) + 4;
    v542 = *v530;
    if (v526 == 7)
      v543 = v542 + ((int)(0x8000 - v542) >> v541);
    else
      v543 = v542 - (v542 >> v541);
    *v530 = v543;
    if (v540 < 0x20)
      LOWORD(v540) = v540 + 1;
    v530[2] = v540;
  }
  if (v526 != 7)
  {
    v544 = v172[17];
    v545 = *(unsigned __int8 *)(v948 + 5);
    v546 = *(unsigned __int8 *)(v948 + 6);
    v87 = v545 == v546;
    v547 = 2 * (v545 >= v546);
    if (v87)
      v547 = 1;
    v548 = *(_QWORD *)(v976 + 11064) + 12 * v547;
    v549 = (unsigned __int16 *)(v548 + 11624);
    v550 = *(unsigned __int16 *)(v548 + 11624);
    if (v544 == 6)
    {
      v554 = *(unsigned __int16 *)(v548 + 11626);
      v551 = *(_QWORD *)(v977 + 32);
      v552 = *(unsigned __int16 *)(v977 + 40);
      v553 = v552 >> 8;
      if ((v550 & 0x8000) == 0)
      {
        v555 = ((v553 * (v550 >> 6)) >> 1) + 4;
        v551 += v552 - v555;
        v556 = v555 - ((v553 * (v554 >> 6)) >> 1);
LABEL_639:
        result = (unint64_t)od_ec_enc_normalize(v398, v551, v556);
        v90 = v977;
        if (!*(_BYTE *)(v977 + 48))
          goto LABEL_691;
        v562 = v549 + 2;
        v563 = v549[2];
        v568 = (v563 >> 4) + 4;
        v569 = *v549;
        if (v544 == 6)
          *v549 = v569 + ((int)(0x8000 - v569) >> v568);
        else
          *v549 = v569 - (v569 >> v568);
        goto LABEL_688;
      }
      v550 = v549[1];
    }
    else
    {
      v551 = *(_QWORD *)(v977 + 32);
      v552 = *(unsigned __int16 *)(v977 + 40);
      v553 = v552 >> 8;
    }
    v566 = (v550 >> 6) * v553;
    if (v544 == 6)
      v567 = 0;
    else
      v567 = -1;
    v556 = v552 + 4 * v567 - (v566 >> 1);
    goto LABEL_639;
  }
LABEL_691:
  v595 = *(unsigned __int16 *)(v951 + 84 * v959 + 76);
  if (*((char *)v979 + 17) >= 1)
  {
    v596 = v595 & 7;
    if ((v595 & 4) != 0)
      v596 = 4;
    v595 = compound_mode_ctx_map[5 * (v595 >> 5) + v596];
  }
  v597 = v955;
  v9 = v937;
  if (*(_BYTE *)v29 && (*(_DWORD *)(v8 + 4 * v969 + 258164) & 0x40) != 0)
    goto LABEL_806;
  v598 = (v955 - 17);
  if (v598 <= 7)
  {
    v605 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 18 * (__int16)v595 + 0x2000);
    v606 = (v955 - 17);
    if ((_BYTE)v955 == 17)
    {
      v608 = *v605;
      v609 = *(_QWORD *)(v90 + 32);
      v610 = *(unsigned __int16 *)(v90 + 40);
      v611 = v610 >> 8;
    }
    else
    {
      v607 = (__int16)v605[v606 - 1];
      v608 = v605[(v955 - 17)];
      v609 = *(_QWORD *)(v90 + 32);
      v610 = *(unsigned __int16 *)(v90 + 40);
      v611 = v610 >> 8;
      if ((v607 & 0x80000000) == 0)
      {
        v612 = 4 * v606;
        v613 = ((v611 * ((unsigned __int16)v607 >> 6)) >> 1) - v612 + 32;
        v609 += v610 - v613;
        v614 = v612 - ((v611 * (v608 >> 6)) >> 1) + v613;
        goto LABEL_706;
      }
    }
    v614 = v610 + 4 * v606 - (((v608 >> 6) * v611) >> 1);
LABEL_706:
    result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v90 + 16), v609, v614 - 28);
    v90 = v977;
    v597 = v955;
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_727;
    v615 = v605 + 8;
    v616 = v605[8];
    v617 = (v616 >> 4) + 5;
    v618 = *v605;
    if ((_BYTE)v955 == 17)
    {
      *v605 = v618 - (v618 >> v617);
      v619 = v605[1];
    }
    else
    {
      *v605 = v618 + ((int)(0x8000 - v618) >> v617);
      v619 = v605[1];
      if ((v955 - 17) != 1)
      {
        v605[1] = v619 + ((int)(0x8000 - v619) >> v617);
        v620 = v605[2];
        if ((v955 - 17) > 2u)
        {
          v605[2] = v620 + ((int)(0x8000 - v620) >> v617);
          v621 = v605[3];
          if ((v955 - 17) != 3)
          {
            v605[3] = v621 + ((int)(0x8000 - v621) >> v617);
            v622 = v605[4];
            if ((v955 - 17) > 4u)
            {
              v605[4] = v622 + ((int)(0x8000 - v622) >> v617);
              v623 = v605[5];
              if ((v955 - 17) != 5)
              {
                v624 = v623 + ((int)(0x8000 - v623) >> v617);
                v627 = v605[6];
                v626 = v605 + 6;
                v625 = v627;
                *(v626 - 1) = v624;
                if ((v955 - 17) > 6u)
                {
                  *v626 = v625 + ((int)(0x8000 - v625) >> v617);
                  v597 = v955;
LABEL_724:
                  if (v616 < 0x20)
                    LOWORD(v616) = v616 + 1;
                  *v615 = v616;
                  goto LABEL_727;
                }
LABEL_723:
                v597 = v955;
                *v626 = v625 - (v625 >> v617);
                goto LABEL_724;
              }
LABEL_722:
              v630 = v623 - (v623 >> v617);
              v631 = v605[6];
              v626 = v605 + 6;
              v625 = v631;
              *(v626 - 1) = v630;
              goto LABEL_723;
            }
LABEL_721:
            v605[4] = v622 - (v622 >> v617);
            v623 = v605[5];
            goto LABEL_722;
          }
LABEL_720:
          v605[3] = v621 - (v621 >> v617);
          v622 = v605[4];
          goto LABEL_721;
        }
LABEL_719:
        v605[2] = v620 - (v620 >> v617);
        v621 = v605[3];
        goto LABEL_720;
      }
    }
    v605[1] = v619 - (v619 >> v617);
    v620 = v605[2];
    goto LABEL_719;
  }
  if (v598 < 0xFC)
    goto LABEL_727;
  v599 = (_WORD *)(v937 + 6 * (v595 & 7) + 8090);
  v600 = v90 + 16;
  v601 = (unsigned __int16)*v599;
  if (v955 == 16)
  {
    v602 = *(_QWORD *)(v90 + 32);
    v603 = *(unsigned __int16 *)(v90 + 40);
    v604 = v603 >> 8;
  }
  else
  {
    v602 = *(_QWORD *)(v90 + 32);
    v603 = *(unsigned __int16 *)(v90 + 40);
    v604 = v603 >> 8;
    if ((v601 & 0x8000) == 0)
    {
      v628 = ((v604 * (v601 >> 6)) >> 1) + 4;
      v602 += v603 - v628;
      v629 = v628 - ((v604 * (*(unsigned __int16 *)(v937 + 6 * (v595 & 7) + 8092) >> 6)) >> 1);
      goto LABEL_736;
    }
    v601 = *(unsigned __int16 *)(v937 + 6 * (v595 & 7) + 8092);
  }
  v633 = (v601 >> 6) * v604;
  if (v955 == 16)
    v634 = -1;
  else
    v634 = 0;
  v629 = v603 + 4 * v634 - (v633 >> 1);
LABEL_736:
  v632 = v951;
  result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v90 + 16), v602, v629);
  v90 = v977;
  v597 = v955;
  if (*(_BYTE *)(v977 + 48))
  {
    v635 = *(unsigned __int16 *)(v937 + 6 * (v595 & 7) + 8094);
    v636 = (v635 >> 4) + 4;
    v637 = (unsigned __int16)*v599;
    if (v955 == 16)
      v638 = v637 - (v637 >> v636);
    else
      v638 = v637 + ((int)(0x8000 - v637) >> v636);
    *v599 = v638;
    if (v635 < 0x20)
      LOWORD(v635) = v635 + 1;
    *(_WORD *)(v937 + 6 * (v595 & 7) + 8094) = v635;
  }
  if (v955 == 16)
    goto LABEL_744;
  v674 = (_WORD *)(v937 + 6 * ((v595 >> 3) & 1) + 8126);
  result = (unint64_t)od_ec_encode_cdf_q15(v600, v955 != 15, (uint64_t)v674, 2);
  v90 = v977;
  if (*(_BYTE *)(v977 + 48))
  {
    v675 = *(unsigned __int16 *)(v937 + 6 * ((v595 >> 3) & 1) + 8130);
    v676 = (v675 >> 4) + 4;
    v677 = (unsigned __int16)*v674;
    if (v955 == 15)
      v678 = v677 - (v677 >> v676);
    else
      v678 = v677 + ((int)(0x8000 - v677) >> v676);
    *v674 = v678;
    if (v675 < 0x20)
      LOWORD(v675) = v675 + 1;
    *(_WORD *)(v937 + 6 * ((v595 >> 3) & 1) + 8130) = v675;
  }
  if (v955 == 15)
    goto LABEL_846;
  v693 = (_WORD *)(v937 + 6 * (v595 >> 4) + 8138);
  result = (unint64_t)od_ec_encode_cdf_q15(v600, v955 != 13, (uint64_t)v693, 2);
  v597 = v955;
  v90 = v977;
  if (*(_BYTE *)(v977 + 48))
  {
    v615 = (_WORD *)(v937 + 6 * (v595 >> 4) + 8142);
    v616 = (unsigned __int16)*v615;
    v694 = (v616 >> 4) + 4;
    v695 = (unsigned __int16)*v693;
    if (v955 == 13)
    {
      v696 = v695 - (v695 >> v694);
    }
    else
    {
      v597 = v955;
      v696 = v695 + ((int)(0x8000 - v695) >> v694);
    }
    *v693 = v696;
    goto LABEL_724;
  }
LABEL_727:
  v632 = v951;
  if ((v597 & 0xFFFFFFF7) != 0x10 && (v597 > 0x16 || ((1 << v597) & 0x644000) == 0))
    goto LABEL_806;
LABEL_744:
  v639 = *((unsigned __int8 *)v979 + 2);
  if (v639 > 0x18)
    goto LABEL_806;
  v640 = 1 << v639;
  if ((v640 & 0x644000) != 0)
  {
    v641 = v632 + 84 * v959;
    v643 = *(unsigned __int8 *)(v641 + 40);
    v642 = (unsigned __int8 *)(v641 + 40);
    if (v643 < 3)
      goto LABEL_806;
    v644 = v632;
    v645 = a5;
    v646 = v90 + 16;
    v647 = v644 + 84 * v959;
    v649 = *(unsigned __int16 *)(v647 + 36);
    v648 = (unsigned __int16 *)(v647 + 36);
    v650 = v649 < 0x280;
    if (*(v648 - 1) <= 0x27Fu)
      v650 *= 2;
    v651 = (unsigned __int16 *)(v937 + 6 * v650 + 8174);
    v652 = *v651;
    v653 = *(__int16 *)((char *)v979 + 167) & 0x30;
    if (v653)
    {
      v654 = *(unsigned __int16 *)(v937 + 6 * v650 + 8176);
      v655 = *(_QWORD *)(v90 + 32);
      v656 = *(unsigned __int16 *)(v90 + 40);
      v657 = v656 >> 8;
      if ((v652 & 0x8000) == 0)
      {
        v658 = ((v657 * (v652 >> 6)) >> 1) + 4;
        v655 += v656 - v658;
        v659 = v658 - ((v657 * (v654 >> 6)) >> 1);
        goto LABEL_768;
      }
      v652 = v651[1];
    }
    else
    {
      v655 = *(_QWORD *)(v90 + 32);
      v656 = *(unsigned __int16 *)(v90 + 40);
      v657 = v656 >> 8;
    }
    v679 = (v652 >> 6) * v657;
    if (v653)
      v680 = 0;
    else
      v680 = -1;
    v659 = v656 + 4 * v680 - (v679 >> 1);
LABEL_768:
    result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v90 + 16), v655, v659);
    v90 = v977;
    v597 = v955;
    if (*(_BYTE *)(v977 + 48))
    {
      v681 = v651[2];
      v682 = (v681 >> 4) + 4;
      v683 = *v651;
      if (v653)
        v684 = v683 + ((int)(0x8000 - v683) >> v682);
      else
        v684 = v683 - (v683 >> v682);
      *v651 = v684;
      if (v681 < 0x20)
        LOWORD(v681) = v681 + 1;
      v651[2] = v681;
    }
    v685 = *(__int16 *)((char *)v979 + 167) & 0x30;
    a5 = v645;
    if (v685 && *v642 >= 4u)
    {
      v686 = *v648 <= 0x27Fu
           ? 2 * (*(unsigned __int16 *)(v951 + 84 * v959 + 38) < 0x280u)
           : *(unsigned __int16 *)(v951 + 84 * v959 + 38) < 0x280u;
      v687 = (unsigned __int16 *)(v937 + 6 * v686 + 8174);
      result = (unint64_t)od_ec_encode_cdf_q15(v646, v685 != 16, (uint64_t)v687, 2);
      v597 = v955;
      v90 = v977;
      if (*(_BYTE *)(v977 + 48))
      {
        v688 = v687 + 2;
        v689 = v687[2];
        v690 = (v689 >> 4) + 4;
        v691 = *v687;
        if (v685 != 16)
        {
LABEL_782:
          v597 = v955;
          v692 = v691 + ((int)(0x8000 - v691) >> v690);
LABEL_803:
          *v687 = v692;
          if (v689 < 0x20)
            LOWORD(v689) = v689 + 1;
          *v688 = v689;
          goto LABEL_806;
        }
LABEL_802:
        v692 = v691 - (v691 >> v690);
        goto LABEL_803;
      }
    }
    goto LABEL_806;
  }
  if ((v640 & 0x1010000) != 0)
  {
    v660 = v632 + 84 * v959;
    v662 = *(unsigned __int8 *)(v660 + 40);
    v661 = (unsigned __int8 *)(v660 + 40);
    if (v662 >= 2)
    {
      v663 = v90 + 16;
      v664 = v632 + 84 * v959;
      v666 = *(unsigned __int16 *)(v664 + 34);
      v665 = (unsigned __int16 *)(v664 + 34);
      v667 = v666 < 0x280;
      if (*(v665 - 1) <= 0x27Fu)
        v667 *= 2;
      v668 = *(__int16 *)((char *)v979 + 167) & 0x30;
      v669 = (unsigned __int16 *)(v937 + 6 * v667 + 8174);
      result = (unint64_t)od_ec_encode_cdf_q15(v90 + 16, v668 != 0, (uint64_t)v669, 2);
      v90 = v977;
      if (*(_BYTE *)(v977 + 48))
      {
        v670 = v669[2];
        v671 = (v670 >> 4) + 4;
        v672 = *v669;
        if (v668)
          v673 = v672 + ((int)(0x8000 - v672) >> v671);
        else
          v673 = v672 - (v672 >> v671);
        *v669 = v673;
        if (v670 < 0x20)
          LOWORD(v670) = v670 + 1;
        v669[2] = v670;
      }
      v697 = *(__int16 *)((char *)v979 + 167) & 0x30;
      v597 = v955;
      if (v697)
      {
        if (*v661 >= 3u)
        {
          v698 = *v665 <= 0x27Fu
               ? 2 * (*(unsigned __int16 *)(v951 + 84 * v959 + 36) < 0x280u)
               : *(unsigned __int16 *)(v951 + 84 * v959 + 36) < 0x280u;
          v687 = (unsigned __int16 *)(v937 + 6 * v698 + 8174);
          result = (unint64_t)od_ec_encode_cdf_q15(v663, v697 != 16, (uint64_t)v687, 2);
          v597 = v955;
          v90 = v977;
          if (*(_BYTE *)(v977 + 48))
          {
            v688 = v687 + 2;
            v689 = v687[2];
            v690 = (v689 >> 4) + 4;
            v691 = *v687;
            if (v697 != 16)
              goto LABEL_782;
            goto LABEL_802;
          }
        }
      }
    }
  }
LABEL_806:
  if ((v597 & 0xFFFFFFF7) == 0x10)
  {
    LODWORD(v983) = 0;
    v699 = *(uint64_t **)(v976 + 8280);
    v700 = *(_QWORD *)(v976 + 16760);
    v701 = *v699;
    v702 = (*(unsigned __int16 *)(*v699 + 167) >> 4) & 3;
    if (*(unsigned __int8 *)(v701 + 2) - 21 < 2)
      ++v702;
    v703 = *(char *)(v701 + 17);
    if (v939 < 1)
    {
      if (v703 <= 0)
      {
        v735 = *(unsigned __int8 *)(v700 + 40);
        v736 = (_DWORD *)(v700 + 8 * v702);
        v712 = (_DWORD *)(v700 + 4 * *(char *)(v701 + 16) + 44);
        if (v702 < v735)
          v712 = v736;
      }
      else
      {
        v712 = (_DWORD *)(v700 + 8 * v702);
      }
      LODWORD(v983) = *v712;
      v721 = v979 + 4;
    }
    else
    {
      if (v703 <= 0)
      {
        v727 = *(unsigned __int8 *)(v700 + 40);
        v728 = (_DWORD *)(v700 + 8 * v702);
        v704 = (_DWORD *)(v700 + 4 * *(char *)(v701 + 16) + 44);
        if (v702 < v727)
          v704 = v728;
      }
      else
      {
        v704 = (_DWORD *)(v700 + 8 * v702);
      }
      LODWORD(v983) = *v704;
      av1_encode_mv(v8, v977, v976, v979 + 4, (unsigned __int16 *)&v983, (unsigned __int16 *)(v937 + 11912), v945);
      LODWORD(v983) = 0;
      v729 = *(_QWORD *)(v976 + 16760);
      v730 = **(_QWORD **)(v976 + 8280);
      v731 = (*(unsigned __int16 *)(v730 + 167) >> 4) & 3;
      if (*(unsigned __int8 *)(v730 + 2) - 21 < 2)
        ++v731;
      v732 = (_DWORD *)(v729 + 8 * v731);
      if (*(char *)(v730 + 17) <= 0)
      {
        v734 = *(unsigned __int8 *)(v729 + 40);
        v733 = (_DWORD *)(v729 + 4 * *(char *)(v730 + 16) + 44);
        if (v731 < v734)
          v733 = v732;
      }
      else
      {
        v733 = v732 + 1;
      }
      LODWORD(v983) = *v733;
      v721 = v979 + 6;
    }
    v723 = v8;
    v724 = v976;
    v725 = v977;
    v726 = v977;
    v706 = (unsigned __int16 *)(v937 + 11912);
    v705 = v945;
  }
  else
  {
    v705 = v945;
    if (v597 == 21 || v597 == 19)
    {
      v706 = (unsigned __int16 *)(v937 + 11912);
      LODWORD(v983) = 0;
      v707 = *(_QWORD *)(v976 + 16760);
      v708 = **(_QWORD **)(v976 + 8280);
      v709 = (*(unsigned __int16 *)(v708 + 167) >> 4) & 3;
      if (*(unsigned __int8 *)(v708 + 2) - 21 < 2)
        ++v709;
      v710 = (_DWORD *)(v707 + 8 * v709);
      if (*(char *)(v708 + 17) < 1)
      {
        v722 = *(unsigned __int8 *)(v707 + 40);
        v711 = (_DWORD *)(v707 + 4 * *(char *)(v708 + 16) + 44);
        if (v709 < v722)
          v711 = v710;
      }
      else
      {
        v711 = v710 + 1;
      }
      LODWORD(v983) = *v711;
      v721 = v979 + 6;
    }
    else
    {
      if ((v597 & 0xFFFFFFFD) != 0x14)
        goto LABEL_846;
      v706 = (unsigned __int16 *)(v937 + 11912);
      LODWORD(v983) = 0;
      v713 = *(uint64_t **)(v976 + 8280);
      v714 = *(_QWORD *)(v976 + 16760);
      v715 = *v713;
      v716 = (*(unsigned __int16 *)(*v713 + 167) >> 4) & 3;
      if (*(unsigned __int8 *)(v715 + 2) - 21 >= 2)
        v717 = v716;
      else
        v717 = v716 + 1;
      v718 = (_DWORD *)(v714 + 8 * v717);
      if (*(char *)(v715 + 17) < 1)
      {
        v719 = *(unsigned __int8 *)(v714 + 40);
        v720 = v714 + 4 * *(char *)(v715 + 16) + 44;
        if (v717 >= v719)
          v718 = (_DWORD *)v720;
      }
      LODWORD(v983) = *v718;
      v721 = v979 + 4;
    }
    v723 = v8;
    v724 = v976;
    v725 = v977;
    v726 = v977;
  }
  result = (unint64_t)av1_encode_mv(v723, v726, v724, v721, (unsigned __int16 *)&v983, v706, v705);
  v90 = v725;
LABEL_846:
  if (*(_BYTE *)(v927 + 49) != 1
    && *(_BYTE *)(*(_QWORD *)(v29 + 5688) + 62)
    && *(unsigned __int8 *)v979 - 10 >= 0xFFFFFFF9
    && *((unsigned __int8 *)v979 + 2) - 17 >= 0xFFFFFFFC
    && *((char *)v979 + 16) >= 1)
  {
    v737 = *((unsigned __int8 *)v979 + 17);
    if (*((char *)v979 + 17) > 0)
      goto LABEL_863;
    v738 = size_group_lookup_0[v942];
    v739 = (unsigned __int16 *)(v937 + 6 * size_group_lookup_0[v942] + 9216);
    v740 = v90 + 16;
    result = (unint64_t)od_ec_encode_cdf_q15(v90 + 16, v737 == 0, (uint64_t)v739, 2);
    v90 = v977;
    if (*(_BYTE *)(v977 + 48))
    {
      v741 = v739[2];
      v742 = (v741 >> 4) + 4;
      v743 = *v739;
      if (v737)
        v744 = v743 - (v743 >> v742);
      else
        v744 = v743 + ((int)(0x8000 - v743) >> v742);
      *v739 = v744;
      if (v741 < 0x20)
        LOWORD(v741) = v741 + 1;
      v739[2] = v741;
    }
    if (!v737)
    {
      v767 = *((unsigned __int8 *)v979 + 64);
      v768 = (_WORD *)(v937 + 10 * v738 + 9372);
      result = (unint64_t)od_ec_encode_cdf_q15(v740, v767, (uint64_t)v768, 4);
      v90 = v977;
      if (!*(_BYTE *)(v977 + 48))
        goto LABEL_1094;
      v769 = *(unsigned __int16 *)(v937 + 10 * v738 + 9380);
      v770 = (v769 >> 4) + 5;
      v771 = (unsigned __int16)*v768;
      if ((char)v767 <= 0)
      {
        *v768 = v771 - (v771 >> v770);
        v772 = *(unsigned __int16 *)(v937 + 10 * v738 + 9374);
      }
      else
      {
        *v768 = v771 + ((int)(0x8000 - v771) >> v770);
        v772 = *(unsigned __int16 *)(v937 + 10 * v738 + 9374);
        if (v767 != 1)
        {
          *(_WORD *)(v937 + 10 * v738 + 9374) = v772 + ((int)(0x8000 - v772) >> v770);
          v773 = *(unsigned __int16 *)(v937 + 10 * v738 + 9376);
          if (v767 > 2)
          {
            v774 = v773 + ((int)(0x8000 - v773) >> v770);
LABEL_1091:
            *(_WORD *)(v937 + 10 * v738 + 9376) = v774;
            if (v769 < 0x20)
              LOWORD(v769) = v769 + 1;
            *(_WORD *)(v937 + 10 * v738 + 9380) = v769;
LABEL_1094:
            if ((int)av1_wedge_params_lookup[8 * v942] < 1)
              goto LABEL_862;
            v895 = (*(unsigned __int16 *)((char *)v979 + 167) >> 10) & 1;
            v896 = (_WORD *)(v937 + 6 * v942 + 9240);
            result = (unint64_t)od_ec_encode_cdf_q15(v740, v895, (uint64_t)v896, 2);
            v90 = v977;
            if (*(_BYTE *)(v977 + 48))
            {
              v897 = *(unsigned __int16 *)(v937 + 6 * v942 + 9244);
              v898 = (v897 >> 4) + 4;
              v899 = (unsigned __int16)*v896;
              if (v895)
                v900 = v899 + ((int)(0x8000 - v899) >> v898);
              else
                v900 = v899 - (v899 >> v898);
              *v896 = v900;
              if (v897 < 0x20)
                LOWORD(v897) = v897 + 1;
              *(_WORD *)(v937 + 6 * v942 + 9244) = v897;
            }
            if ((*(__int16 *)((char *)v979 + 167) & 0x400) == 0)
              goto LABEL_862;
            v901 = *((char *)v979 + 65);
            v902 = (_WORD *)(v937 + 34 * v942 + 8468);
            result = (unint64_t)od_ec_encode_cdf_q15(v740, *((char *)v979 + 65), (uint64_t)v902, 16);
            v90 = v977;
            if (!*(_BYTE *)(v977 + 48))
              goto LABEL_862;
            v903 = *(unsigned __int16 *)(v937 + 34 * v942 + 8500);
            v904 = (v903 >> 4) + 5;
            v905 = v901 << 56;
            v906 = (unsigned __int16)*v902;
            if (v901 << 56 <= 0)
            {
              *v902 = v906 - (v906 >> v904);
              v907 = *(unsigned __int16 *)(v937 + 34 * v942 + 8470);
            }
            else
            {
              *v902 = v906 + ((int)(0x8000 - v906) >> v904);
              v907 = *(unsigned __int16 *)(v937 + 34 * v942 + 8470);
              if (v905 > 0x100000000000000)
              {
                *(_WORD *)(v937 + 34 * v942 + 8470) = v907 + ((int)(0x8000 - v907) >> v904);
                v908 = *(unsigned __int16 *)(v937 + 34 * v942 + 8472);
                if (v905 > 0x200000000000000)
                {
                  *(_WORD *)(v937 + 34 * v942 + 8472) = v908 + ((int)(0x8000 - v908) >> v904);
                  v909 = *(unsigned __int16 *)(v937 + 34 * v942 + 8474);
                  if (v905 > 0x300000000000000)
                  {
                    *(_WORD *)(v937 + 34 * v942 + 8474) = v909 + ((int)(0x8000 - v909) >> v904);
                    v910 = *(unsigned __int16 *)(v937 + 34 * v942 + 8476);
                    if (v905 > 0x400000000000000)
                    {
                      *(_WORD *)(v937 + 34 * v942 + 8476) = v910 + ((int)(0x8000 - v910) >> v904);
                      v911 = *(unsigned __int16 *)(v937 + 34 * v942 + 8478);
                      if (v905 > 0x500000000000000)
                      {
                        *(_WORD *)(v937 + 34 * v942 + 8478) = v911 + ((int)(0x8000 - v911) >> v904);
                        v912 = *(unsigned __int16 *)(v937 + 34 * v942 + 8480);
                        if (v905 > 0x600000000000000)
                        {
                          *(_WORD *)(v937 + 34 * v942 + 8480) = v912 + ((int)(0x8000 - v912) >> v904);
                          v913 = *(unsigned __int16 *)(v937 + 34 * v942 + 8482);
                          if (v905 > 0x700000000000000)
                          {
                            *(_WORD *)(v937 + 34 * v942 + 8482) = v913 + ((int)(0x8000 - v913) >> v904);
                            v914 = *(unsigned __int16 *)(v937 + 34 * v942 + 8484);
                            if (v905 > 0x800000000000000)
                            {
                              *(_WORD *)(v937 + 34 * v942 + 8484) = v914
                                                                                  + ((int)(0x8000 - v914) >> v904);
                              v915 = *(unsigned __int16 *)(v937 + 34 * v942 + 8486);
                              if (v905 > 0x900000000000000)
                              {
                                *(_WORD *)(v937 + 34 * v942 + 8486) = v915
                                                                                    + ((int)(0x8000 - v915) >> v904);
                                v916 = *(unsigned __int16 *)(v937 + 34 * v942 + 8488);
                                if (v905 > 0xA00000000000000)
                                {
                                  *(_WORD *)(v937 + 34 * v942 + 8488) = v916
                                                                                      + ((int)(0x8000 - v916) >> v904);
                                  v917 = *(unsigned __int16 *)(v937 + 34 * v942 + 8490);
                                  if (v905 > 0xB00000000000000)
                                  {
                                    *(_WORD *)(v937 + 34 * v942 + 8490) = v917
                                                                                        + ((int)(0x8000 - v917) >> v904);
                                    v918 = *(unsigned __int16 *)(v937 + 34 * v942 + 8492);
                                    if (v905 > 0xC00000000000000)
                                    {
                                      *(_WORD *)(v937 + 34 * v942 + 8492) = v918
                                                                                          + ((int)(0x8000 - v918) >> v904);
                                      v919 = *(unsigned __int16 *)(v937 + 34 * v942 + 8494);
                                      if (v905 > 0xD00000000000000)
                                      {
                                        *(_WORD *)(v937 + 34 * v942 + 8494) = v919
                                                                                            + ((int)(0x8000 - v919) >> v904);
                                        v920 = *(unsigned __int16 *)(v937 + 34 * v942 + 8496);
                                        if (v905 > 0xE00000000000000)
                                        {
                                          v921 = v920 + ((int)(0x8000 - v920) >> v904);
                                          v90 = v977;
                                          v29 = v930;
LABEL_1135:
                                          *(_WORD *)(v937 + 34 * v942 + 8496) = v921;
                                          if (v903 < 0x20)
                                            LOWORD(v903) = v903 + 1;
                                          *(_WORD *)(v937 + 34 * v942 + 8500) = v903;
                                          goto LABEL_862;
                                        }
                                        v90 = v977;
                                        v29 = v930;
LABEL_1134:
                                        v921 = v920 - (v920 >> v904);
                                        goto LABEL_1135;
                                      }
                                      v90 = v977;
                                      v29 = v930;
LABEL_1133:
                                      *(_WORD *)(v937 + 34 * v942 + 8494) = v919 - (v919 >> v904);
                                      v920 = *(unsigned __int16 *)(v937 + 34 * v942 + 8496);
                                      goto LABEL_1134;
                                    }
                                    v90 = v977;
                                    v29 = v930;
LABEL_1132:
                                    *(_WORD *)(v937 + 34 * v942 + 8492) = v918 - (v918 >> v904);
                                    v919 = *(unsigned __int16 *)(v937 + 34 * v942 + 8494);
                                    goto LABEL_1133;
                                  }
                                  v90 = v977;
                                  v29 = v930;
LABEL_1131:
                                  *(_WORD *)(v937 + 34 * v942 + 8490) = v917 - (v917 >> v904);
                                  v918 = *(unsigned __int16 *)(v937 + 34 * v942 + 8492);
                                  goto LABEL_1132;
                                }
                                v90 = v977;
                                v29 = v930;
LABEL_1130:
                                *(_WORD *)(v937 + 34 * v942 + 8488) = v916 - (v916 >> v904);
                                v917 = *(unsigned __int16 *)(v937 + 34 * v942 + 8490);
                                goto LABEL_1131;
                              }
                              v90 = v977;
                              v29 = v930;
LABEL_1129:
                              *(_WORD *)(v937 + 34 * v942 + 8486) = v915 - (v915 >> v904);
                              v916 = *(unsigned __int16 *)(v937 + 34 * v942 + 8488);
                              goto LABEL_1130;
                            }
                            v90 = v977;
                            v29 = v930;
LABEL_1128:
                            *(_WORD *)(v937 + 34 * v942 + 8484) = v914 - (v914 >> v904);
                            v915 = *(unsigned __int16 *)(v937 + 34 * v942 + 8486);
                            goto LABEL_1129;
                          }
                          v90 = v977;
                          v29 = v930;
LABEL_1127:
                          *(_WORD *)(v937 + 34 * v942 + 8482) = v913 - (v913 >> v904);
                          v914 = *(unsigned __int16 *)(v937 + 34 * v942 + 8484);
                          goto LABEL_1128;
                        }
                        v90 = v977;
                        v29 = v930;
LABEL_1126:
                        *(_WORD *)(v937 + 34 * v942 + 8480) = v912 - (v912 >> v904);
                        v913 = *(unsigned __int16 *)(v937 + 34 * v942 + 8482);
                        goto LABEL_1127;
                      }
                      v90 = v977;
                      v29 = v930;
LABEL_1125:
                      *(_WORD *)(v937 + 34 * v942 + 8478) = v911 - (v911 >> v904);
                      v912 = *(unsigned __int16 *)(v937 + 34 * v942 + 8480);
                      goto LABEL_1126;
                    }
                    v90 = v977;
                    v29 = v930;
LABEL_1124:
                    *(_WORD *)(v937 + 34 * v942 + 8476) = v910 - (v910 >> v904);
                    v911 = *(unsigned __int16 *)(v937 + 34 * v942 + 8478);
                    goto LABEL_1125;
                  }
                  v90 = v977;
                  v29 = v930;
LABEL_1123:
                  *(_WORD *)(v937 + 34 * v942 + 8474) = v909 - (v909 >> v904);
                  v910 = *(unsigned __int16 *)(v937 + 34 * v942 + 8476);
                  goto LABEL_1124;
                }
LABEL_1122:
                *(_WORD *)(v937 + 34 * v942 + 8472) = v908 - (v908 >> v904);
                v909 = *(unsigned __int16 *)(v937 + 34 * v942 + 8474);
                goto LABEL_1123;
              }
            }
            *(_WORD *)(v937 + 34 * v942 + 8470) = v907 - (v907 >> v904);
            v908 = *(unsigned __int16 *)(v937 + 34 * v942 + 8472);
            goto LABEL_1122;
          }
LABEL_1090:
          v774 = v773 - (v773 >> v770);
          goto LABEL_1091;
        }
      }
      *(_WORD *)(v937 + 10 * v738 + 9374) = v772 - (v772 >> v770);
      v773 = *(unsigned __int16 *)(v937 + 10 * v738 + 9376);
      goto LABEL_1090;
    }
  }
LABEL_862:
  LOBYTE(v737) = *((_BYTE *)v979 + 17);
  if (!(_BYTE)v737)
    goto LABEL_1031;
LABEL_863:
  if (!*(_BYTE *)(v927 + 551) || !*((_BYTE *)v979 + 26))
    goto LABEL_908;
  v745 = *(_DWORD *)(v976 + 11144);
  v746 = *(unsigned __int8 *)v979;
  if (v745)
  {
    v747 = block_size_wide_3[v746];
    if (v747 >= block_size_high_2[v746])
      v747 = block_size_high_2[v746];
    goto LABEL_868;
  }
  v761 = *((unsigned __int8 *)v979 + 2);
  v747 = block_size_wide_3[v746];
  if (v747 >= block_size_high_2[v746])
    v747 = block_size_high_2[v746];
  v763 = v761 == 15 || v761 == 23;
  if (*(unsigned __int8 *)(v8 + 263428 + 36 * *((char *)v979 + 16) + 32) < 2u || !v763 || v747 <= 7)
  {
LABEL_868:
    if (v747 < 8 || (v737 & 0x80) == 0 || *((unsigned __int8 *)v979 + 2) - 25 < 0xFFFFFFF4)
      goto LABEL_908;
    if (v745
      || !*(_BYTE *)(v927 + 545)
      || !*((_BYTE *)v979 + 25)
      || (v748 = *(int **)(v976 + 8360), v749 = *v748, *v748 != -1)
      && (v750 = v748[1], v750 != -1)
      && (v749 != 0x4000 || v750 != 0x4000))
    {
      v764 = *((unsigned __int8 *)v979 + 24);
      v758 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 6 * *(unsigned __int8 *)v979 + 9588);
      result = (unint64_t)od_ec_encode_cdf_q15(v90 + 16, v764 == 1, (uint64_t)v758, 2);
      v90 = v977;
      if (!*(_BYTE *)(v977 + 48))
        goto LABEL_908;
      v753 = v758 + 2;
      v754 = v758[2];
      v765 = (v754 >> 4) + 4;
      v766 = *v758;
      if (v764 == 1)
        v760 = v766 + ((int)(0x8000 - v766) >> v765);
      else
        v760 = v766 - (v766 >> v765);
      goto LABEL_905;
    }
    v751 = *((_BYTE *)v979 + 24);
    v752 = (unsigned __int16 *)(*(_QWORD *)(v976 + 11064) + 8 * v746 + 9412);
    result = (unint64_t)od_ec_encode_cdf_q15(v90 + 16, v751, (uint64_t)v752, 3);
    v90 = v977;
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_908;
    v753 = v752 + 3;
    v754 = v752[3];
    v755 = (v754 >> 4) + 4;
    v756 = *v752;
    if ((char)v751 <= 0)
    {
      *v752 = v756 - (v756 >> v755);
      v775 = v752[1];
      v758 = v752 + 1;
      v757 = v775;
    }
    else
    {
      *v752 = v756 + ((int)(0x8000 - v756) >> v755);
      v759 = v752[1];
      v758 = v752 + 1;
      v757 = v759;
      if (v751 != 1)
      {
        v760 = v757 + ((int)(0x8000 - v757) >> v755);
LABEL_905:
        *v758 = v760;
        if (v754 < 0x20)
          LOWORD(v754) = v754 + 1;
        *v753 = v754;
        goto LABEL_908;
      }
    }
    v760 = v757 - (v757 >> v755);
    goto LABEL_905;
  }
LABEL_908:
  v776 = v979;
  if (*((char *)v979 + 17) < 1)
    goto LABEL_1031;
  v777 = block_size_wide_3[v942];
  if (v777 >= block_size_high_2[v942])
    v777 = block_size_high_2[v942];
  if (v777 < 8)
  {
    v778 = *(unsigned __int16 *)((char *)v979 + 167);
    if ((v778 & 0x100) != 0)
      goto LABEL_992;
    goto LABEL_942;
  }
  if (*(_BYTE *)(*(_QWORD *)(v29 + 5688) + 63))
  {
    v779 = *(_QWORD *)(v976 + 8296);
    v780 = *(_QWORD *)(v976 + 8304);
    if (v780)
    {
      if (*(char *)(v780 + 17) < 1)
      {
        if (*(_BYTE *)(v780 + 16) == 7)
          LODWORD(v780) = 3;
        else
          LODWORD(v780) = 0;
      }
      else
      {
        LODWORD(v780) = HIBYTE(*(unsigned __int16 *)(v780 + 167)) & 1;
      }
    }
    if (v779)
    {
      if (*(char *)(v779 + 17) < 1)
      {
        if (*(_BYTE *)(v779 + 16) == 7)
          LODWORD(v779) = 3;
        else
          LODWORD(v779) = 0;
      }
      else
      {
        LODWORD(v779) = HIBYTE(*(unsigned __int16 *)(v779 + 167)) & 1;
      }
    }
    v781 = v779 + v780;
    if (v781 >= 5)
      v781 = 5;
    v782 = ((unint64_t)*(unsigned __int16 *)((char *)v979 + 167) >> 8) & 1;
    v783 = (unsigned __int16 *)(v937 + 6 * v781 + 11816);
    if ((_DWORD)v782)
    {
      v784 = v783[v782];
      v785 = *(_QWORD *)(v90 + 32);
      v786 = *(unsigned __int16 *)(v90 + 40);
      v787 = v786 >> 8;
      if (((__int16)v783[(v782 - 1)] & 0x80000000) == 0)
      {
        v788 = ((v787 * (v783[(v782 - 1)] >> 6)) >> 1) - 4 * v782 + 8;
        v785 += v786 - v788;
        v789 = 4 * v782 - ((v787 * (v784 >> 6)) >> 1) + v788;
        goto LABEL_934;
      }
    }
    else
    {
      v784 = *v783;
      v785 = *(_QWORD *)(v90 + 32);
      v786 = *(unsigned __int16 *)(v90 + 40);
      v787 = v786 >> 8;
    }
    v789 = v786 + 4 * v782 - (((v784 >> 6) * v787) >> 1);
LABEL_934:
    result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v90 + 16), v785, v789 - 4);
    v90 = v977;
    if (*(_BYTE *)(v977 + 48))
    {
      v790 = v783[2];
      v791 = (v790 >> 4) + 4;
      v792 = *v783;
      if ((_DWORD)v782)
        v793 = v792 + ((int)(0x8000 - v792) >> v791);
      else
        v793 = v792 - (v792 >> v791);
      *v783 = v793;
      if (v790 < 0x20)
        LOWORD(v790) = v790 + 1;
      v783[2] = v790;
    }
  }
  v778 = *(unsigned __int16 *)((char *)v979 + 167);
  if ((v778 & 0x100) != 0)
  {
    if ((int)av1_wedge_params_lookup[8 * v942] >= 1)
    {
      v799 = *((unsigned __int8 *)v979 + 83) - 2;
      v800 = (_WORD *)(v937 + 6 * v942 + 8336);
      od_ec_encode_cdf_q15(v90 + 16, *((unsigned __int8 *)v979 + 83) - 2, (uint64_t)v800, 2);
      v90 = v977;
      if (*(_BYTE *)(v977 + 48))
      {
        v801 = *(unsigned __int16 *)(v937 + 6 * v942 + 8340);
        v802 = (v801 >> 4) + 4;
        v803 = (unsigned __int16)*v800;
        if (v799 << 56 < 1)
          v804 = v803 - (v803 >> v802);
        else
          v804 = v803 + ((int)(0x8000 - v803) >> v802);
        *v800 = v804;
        if (v801 < 0x20)
          LOWORD(v801) = v801 + 1;
        *(_WORD *)(v937 + 6 * v942 + 8340) = v801;
      }
    }
LABEL_992:
    if (*((_BYTE *)v979 + 83) != 2)
    {
      v849 = v90 + 16;
      v850 = v979[41] & 1;
LABEL_1030:
      result = (unint64_t)od_ec_encode_BOOL_q15(v849, v850, 0x4000u);
      v90 = v977;
      goto LABEL_1031;
    }
    v827 = *((char *)v979 + 80);
    v828 = (_WORD *)(v937 + 34 * v942 + 8468);
    v829 = v90 + 16;
    od_ec_encode_cdf_q15(v90 + 16, *((char *)v979 + 80), (uint64_t)v828, 16);
    if (!*(_BYTE *)(v977 + 48))
    {
LABEL_1029:
      v850 = *((char *)v776 + 81);
      v849 = v829;
      goto LABEL_1030;
    }
    v830 = *(unsigned __int16 *)(v937 + 34 * v942 + 8500);
    v831 = (v830 >> 4) + 5;
    v832 = v827 << 56;
    v833 = (unsigned __int16)*v828;
    if (v827 << 56 <= 0)
    {
      *v828 = v833 - (v833 >> v831);
      v834 = *(unsigned __int16 *)(v937 + 34 * v942 + 8470);
    }
    else
    {
      *v828 = v833 + ((int)(0x8000 - v833) >> v831);
      v834 = *(unsigned __int16 *)(v937 + 34 * v942 + 8470);
      if (v832 > 0x100000000000000)
      {
        *(_WORD *)(v937 + 34 * v942 + 8470) = v834 + ((int)(0x8000 - v834) >> v831);
        v835 = *(unsigned __int16 *)(v937 + 34 * v942 + 8472);
        if (v832 > 0x200000000000000)
        {
          *(_WORD *)(v937 + 34 * v942 + 8472) = v835 + ((int)(0x8000 - v835) >> v831);
          v836 = *(unsigned __int16 *)(v937 + 34 * v942 + 8474);
          if (v832 > 0x300000000000000)
          {
            *(_WORD *)(v937 + 34 * v942 + 8474) = v836 + ((int)(0x8000 - v836) >> v831);
            v837 = *(unsigned __int16 *)(v937 + 34 * v942 + 8476);
            if (v832 > 0x400000000000000)
            {
              *(_WORD *)(v937 + 34 * v942 + 8476) = v837 + ((int)(0x8000 - v837) >> v831);
              v838 = *(unsigned __int16 *)(v937 + 34 * v942 + 8478);
              if (v832 > 0x500000000000000)
              {
                *(_WORD *)(v937 + 34 * v942 + 8478) = v838 + ((int)(0x8000 - v838) >> v831);
                v839 = *(unsigned __int16 *)(v937 + 34 * v942 + 8480);
                if (v832 > 0x600000000000000)
                {
                  *(_WORD *)(v937 + 34 * v942 + 8480) = v839 + ((int)(0x8000 - v839) >> v831);
                  v840 = *(unsigned __int16 *)(v937 + 34 * v942 + 8482);
                  if (v832 > 0x700000000000000)
                  {
                    *(_WORD *)(v937 + 34 * v942 + 8482) = v840 + ((int)(0x8000 - v840) >> v831);
                    v841 = *(unsigned __int16 *)(v937 + 34 * v942 + 8484);
                    if (v832 > 0x800000000000000)
                    {
                      *(_WORD *)(v937 + 34 * v942 + 8484) = v841 + ((int)(0x8000 - v841) >> v831);
                      v842 = *(unsigned __int16 *)(v937 + 34 * v942 + 8486);
                      if (v832 > 0x900000000000000)
                      {
                        *(_WORD *)(v937 + 34 * v942 + 8486) = v842 + ((int)(0x8000 - v842) >> v831);
                        v843 = *(unsigned __int16 *)(v937 + 34 * v942 + 8488);
                        if (v832 > 0xA00000000000000)
                        {
                          *(_WORD *)(v937 + 34 * v942 + 8488) = v843 + ((int)(0x8000 - v843) >> v831);
                          v844 = *(unsigned __int16 *)(v937 + 34 * v942 + 8490);
                          if (v832 > 0xB00000000000000)
                          {
                            *(_WORD *)(v937 + 34 * v942 + 8490) = v844 + ((int)(0x8000 - v844) >> v831);
                            v845 = *(unsigned __int16 *)(v937 + 34 * v942 + 8492);
                            if (v832 > 0xC00000000000000)
                            {
                              *(_WORD *)(v937 + 34 * v942 + 8492) = v845
                                                                                  + ((int)(0x8000 - v845) >> v831);
                              v846 = *(unsigned __int16 *)(v937 + 34 * v942 + 8494);
                              if (v832 > 0xD00000000000000)
                              {
                                *(_WORD *)(v937 + 34 * v942 + 8494) = v846
                                                                                    + ((int)(0x8000 - v846) >> v831);
                                v847 = *(unsigned __int16 *)(v937 + 34 * v942 + 8496);
                                if (v832 > 0xE00000000000000)
                                {
                                  v848 = v847 + ((int)(0x8000 - v847) >> v831);
                                  v29 = v930;
                                  v776 = v979;
LABEL_1026:
                                  *(_WORD *)(v937 + 34 * v942 + 8496) = v848;
                                  if (v830 < 0x20)
                                    LOWORD(v830) = v830 + 1;
                                  *(_WORD *)(v937 + 34 * v942 + 8500) = v830;
                                  goto LABEL_1029;
                                }
                                v29 = v930;
                                v776 = v979;
LABEL_1025:
                                v848 = v847 - (v847 >> v831);
                                goto LABEL_1026;
                              }
                              v29 = v930;
                              v776 = v979;
LABEL_1024:
                              *(_WORD *)(v937 + 34 * v942 + 8494) = v846 - (v846 >> v831);
                              v847 = *(unsigned __int16 *)(v937 + 34 * v942 + 8496);
                              goto LABEL_1025;
                            }
                            v29 = v930;
                            v776 = v979;
LABEL_1023:
                            *(_WORD *)(v937 + 34 * v942 + 8492) = v845 - (v845 >> v831);
                            v846 = *(unsigned __int16 *)(v937 + 34 * v942 + 8494);
                            goto LABEL_1024;
                          }
                          v29 = v930;
                          v776 = v979;
LABEL_1022:
                          *(_WORD *)(v937 + 34 * v942 + 8490) = v844 - (v844 >> v831);
                          v845 = *(unsigned __int16 *)(v937 + 34 * v942 + 8492);
                          goto LABEL_1023;
                        }
                        v29 = v930;
                        v776 = v979;
LABEL_1021:
                        *(_WORD *)(v937 + 34 * v942 + 8488) = v843 - (v843 >> v831);
                        v844 = *(unsigned __int16 *)(v937 + 34 * v942 + 8490);
                        goto LABEL_1022;
                      }
                      v29 = v930;
                      v776 = v979;
LABEL_1020:
                      *(_WORD *)(v937 + 34 * v942 + 8486) = v842 - (v842 >> v831);
                      v843 = *(unsigned __int16 *)(v937 + 34 * v942 + 8488);
                      goto LABEL_1021;
                    }
                    v29 = v930;
                    v776 = v979;
LABEL_1019:
                    *(_WORD *)(v937 + 34 * v942 + 8484) = v841 - (v841 >> v831);
                    v842 = *(unsigned __int16 *)(v937 + 34 * v942 + 8486);
                    goto LABEL_1020;
                  }
LABEL_1018:
                  *(_WORD *)(v937 + 34 * v942 + 8482) = v840 - (v840 >> v831);
                  v841 = *(unsigned __int16 *)(v937 + 34 * v942 + 8484);
                  goto LABEL_1019;
                }
LABEL_1017:
                *(_WORD *)(v937 + 34 * v942 + 8480) = v839 - (v839 >> v831);
                v840 = *(unsigned __int16 *)(v937 + 34 * v942 + 8482);
                goto LABEL_1018;
              }
LABEL_1016:
              *(_WORD *)(v937 + 34 * v942 + 8478) = v838 - (v838 >> v831);
              v839 = *(unsigned __int16 *)(v937 + 34 * v942 + 8480);
              goto LABEL_1017;
            }
LABEL_1015:
            *(_WORD *)(v937 + 34 * v942 + 8476) = v837 - (v837 >> v831);
            v838 = *(unsigned __int16 *)(v937 + 34 * v942 + 8478);
            goto LABEL_1016;
          }
LABEL_1014:
          *(_WORD *)(v937 + 34 * v942 + 8474) = v836 - (v836 >> v831);
          v837 = *(unsigned __int16 *)(v937 + 34 * v942 + 8476);
          goto LABEL_1015;
        }
LABEL_1013:
        *(_WORD *)(v937 + 34 * v942 + 8472) = v835 - (v835 >> v831);
        v836 = *(unsigned __int16 *)(v937 + 34 * v942 + 8474);
        goto LABEL_1014;
      }
    }
    *(_WORD *)(v937 + 34 * v942 + 8470) = v834 - (v834 >> v831);
    v835 = *(unsigned __int16 *)(v937 + 34 * v942 + 8472);
    goto LABEL_1013;
  }
LABEL_942:
  v794 = *(_DWORD **)(v29 + 5688);
  if (!v794[12])
    goto LABEL_1031;
  v795 = **(_QWORD **)(v976 + 8280);
  v796 = *(unsigned __int8 *)(v795 + 16);
  if ((v796 - 1) > 7
    || (v797 = *(int *)(v8 + 4 * (v796 - 1) + 239280), (_DWORD)v797 == -1))
  {
    v798 = 0;
  }
  else
  {
    v798 = *(_QWORD *)(v8 + 8 * v797 + 239456);
  }
  v805 = *(unsigned __int8 *)(v795 + 17);
  if ((v805 - 1) > 7
    || (v806 = *(int *)(v8 + 4 * (v805 - 1) + 239280), (_DWORD)v806 == -1))
  {
    v807 = 0;
  }
  else
  {
    v807 = *(_QWORD *)(v8 + 8 * v806 + 239456);
  }
  if (v798)
    LODWORD(v798) = *(_DWORD *)(v798 + 4);
  if (v807)
    LODWORD(v807) = *(_DWORD *)(v807 + 4);
  if (v794[10])
  {
    v808 = *(_DWORD *)(*(_QWORD *)(v927 + 280) + 4);
    v809 = 1 << v794[11];
    v810 = ((v809 - 1) & (v807 - v808)) - (v809 & (v807 - v808));
    v811 = ((v809 - 1) & (v808 - v798)) - (v809 & (v808 - v798));
  }
  else
  {
    v810 = 0;
    v811 = 0;
  }
  v812 = *(_QWORD *)(v976 + 8304);
  v813 = *(_QWORD *)(v976 + 8296);
  if (v812)
  {
    if (*(char *)(v812 + 17) < 1)
      LODWORD(v812) = *(unsigned __int8 *)(v812 + 16) == 7;
    else
      v812 = ((unint64_t)*(unsigned __int16 *)(v812 + 167) >> 9) & 1;
  }
  if (v813)
  {
    if (*(char *)(v813 + 17) < 1)
      LODWORD(v813) = *(unsigned __int8 *)(v813 + 16) == 7;
    else
      v813 = ((unint64_t)*(unsigned __int16 *)(v813 + 167) >> 9) & 1;
  }
  if (v810 < 0)
    v810 = -v810;
  if (v811 < 0)
    v811 = -v811;
  v87 = v810 == v811;
  v814 = 3;
  if (!v87)
    v814 = 0;
  v815 = (v778 >> 9) & 1;
  v816 = (unsigned __int16 *)(v937 + 6 * (v812 + v813 + v814) + 11780);
  if (v815)
  {
    v817 = v816[v815];
    v818 = *(_QWORD *)(v90 + 32);
    v819 = *(unsigned __int16 *)(v90 + 40);
    v820 = v819 >> 8;
    if (((__int16)v816[v815 - 1] & 0x80000000) == 0)
    {
      v821 = ((v820 * (v816[v815 - 1] >> 6)) >> 1) - 4 * v815 + 8;
      v818 += v819 - v821;
      v822 = 4 * v815 - ((v820 * (v817 >> 6)) >> 1) + v821;
      goto LABEL_981;
    }
  }
  else
  {
    v817 = *v816;
    v818 = *(_QWORD *)(v90 + 32);
    v819 = *(unsigned __int16 *)(v90 + 40);
    v820 = v819 >> 8;
  }
  v822 = v819 + 4 * v815 - (((v817 >> 6) * v820) >> 1);
LABEL_981:
  result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v90 + 16), v818, v822 - 4);
  v90 = v977;
  if (*(_BYTE *)(v977 + 48))
  {
    v823 = v816[2];
    v824 = (v823 >> 4) + 4;
    v825 = *v816;
    if (v815)
      v826 = v825 + ((int)(0x8000 - v825) >> v824);
    else
      v826 = v825 - (v825 >> v824);
    *v816 = v826;
    if (v823 < 0x20)
      LOWORD(v823) = v823 + 1;
    v816[2] = v823;
  }
LABEL_1031:
  v851 = *(unsigned __int8 ***)(v976 + 8280);
  v852 = *v851;
  if ((*(_WORD *)(*v851 + 167) & 0x40) != 0 || v852[24] == 2)
    goto LABEL_224;
  v853 = *(_QWORD *)(v976 + 11064);
  v854 = v852[2];
  if (v854 == 23 || v854 == 15)
  {
    v855 = *v852;
    v856 = mi_size_wide_5[v855];
    v857 = mi_size_high_4[v855];
    if (v856 < v857)
      v857 = v856;
    if (v857 >= 2)
    {
      v858 = (char)v852[17];
      v859 = *(_QWORD *)(v976 + 11160);
      v860 = *(unsigned __int8 *)(v859 + 36 * (char)v852[16] + 32);
      if (v858 < 1 || v860 == 1)
      {
        if (v858 <= 0 && v860 != 1)
          goto LABEL_224;
      }
      else if (*(_BYTE *)(v859 + 36 * v852[17] + 32) != 1)
      {
        goto LABEL_224;
      }
    }
  }
  if (*(_BYTE *)(v927 + 553) != 4)
    goto LABEL_224;
  v861 = v852[16];
  if (v925[1] && ((v862 = *(v851 - 1), v862[16] == v861) || v862[17] == v861))
    v863 = v862[20];
  else
    v863 = 3;
  v864 = v90 + 16;
  v865 = 4 * ((char)v852[17] > 0);
  if (*v925 && ((v866 = v851[-*(int *)(v976 + 424)], v866[16] == v861) || v866[17] == v861))
  {
    v867 = a5;
    v868 = v866[20];
  }
  else
  {
    v867 = a5;
    v868 = 3;
  }
  v869 = v865 | 3;
  v870 = v863 + v865;
  if (v868 == 3)
    v869 = v863 + v865;
  v871 = v868 + v865;
  if (v863 == 3)
    v869 = v871;
  if (v863 == v868)
    v872 = v870;
  else
    v872 = v869;
  v873 = v852[20];
  v874 = (unsigned __int16 *)(v853 + 8 * v872 + 14058);
  if (v852[20])
  {
    v875 = v874[v873];
    v876 = *(_QWORD *)(v90 + 32);
    v877 = *(unsigned __int16 *)(v90 + 40);
    v878 = v877 >> 8;
    if (((__int16)v874[(v873 - 1)] & 0x80000000) == 0)
    {
      v879 = ((v878 * (v874[(v873 - 1)] >> 6)) >> 1) - 4 * v873 + 12;
      v876 += v877 - v879;
      v880 = 4 * v873 - ((v878 * (v875 >> 6)) >> 1) + v879 - 8;
      v881 = v852[20];
      goto LABEL_1068;
    }
    v881 = v852[20];
  }
  else
  {
    v881 = 0;
    v875 = *v874;
    v876 = *(_QWORD *)(v90 + 32);
    v877 = *(unsigned __int16 *)(v90 + 40);
    v878 = v877 >> 8;
  }
  v880 = v877 + 4 * v873 - (((v875 >> 6) * v878) >> 1) - 8;
LABEL_1068:
  result = (unint64_t)od_ec_enc_normalize((_DWORD *)(v90 + 16), v876, v880);
  v90 = v977;
  if (!*(_BYTE *)(v977 + 48))
    goto LABEL_1077;
  v882 = v874[3];
  v883 = (v882 >> 4) + 4;
  v884 = *v874;
  if (v881 << 56 <= 0)
  {
    *v874 = v884 - (v884 >> v883);
    v885 = v874[1];
    goto LABEL_1073;
  }
  *v874 = v884 + ((int)(0x8000 - v884) >> v883);
  v885 = v874[1];
  if (v873 <= 1)
  {
LABEL_1073:
    v886 = v885 - (v885 >> v883);
    goto LABEL_1074;
  }
  v886 = v885 + ((int)(0x8000 - v885) >> v883);
LABEL_1074:
  v874[1] = v886;
  if (v882 < 0x20)
    LOWORD(v882) = v882 + 1;
  v874[3] = v882;
LABEL_1077:
  ++*(_DWORD *)(v976 + 4 * v881 + 148384);
  a5 = v867;
  if (*(_BYTE *)(*(_QWORD *)(v29 + 5688) + 64))
  {
    pred_context_switchable_interp = av1_get_pred_context_switchable_interp((uint64_t)v974, 1);
    v888 = v852[22];
    v889 = (unsigned __int16 *)(v853 + 8 * pred_context_switchable_interp + 14058);
    result = (unint64_t)od_ec_encode_cdf_q15(v864, v852[22], (uint64_t)v889, 3);
    v90 = v977;
    if (!*(_BYTE *)(v977 + 48))
    {
LABEL_1087:
      ++*(_DWORD *)(v976 + 4 * v888 + 148384);
      goto LABEL_224;
    }
    v890 = v889[3];
    v891 = (v890 >> 4) + 4;
    v892 = *v889;
    if (v888 << 56 <= 0)
    {
      *v889 = v892 - (v892 >> v891);
      v893 = v889[1];
    }
    else
    {
      *v889 = v892 + ((int)(0x8000 - v892) >> v891);
      v893 = v889[1];
      if (v888 > 1)
      {
        v894 = v893 + ((int)(0x8000 - v893) >> v891);
LABEL_1084:
        v889[1] = v894;
        if (v890 < 0x20)
          LOWORD(v890) = v890 + 1;
        v889[3] = v890;
        goto LABEL_1087;
      }
    }
    v894 = v893 - (v893 >> v891);
    goto LABEL_1084;
  }
LABEL_224:
  v179 = 0;
  v180 = 0;
  v966 = (_DWORD *)(v90 + 16);
  v181 = 1;
  v182 = v974;
  v928 = a5;
  v929 = v16;
  v949 = vdupq_n_s64(8uLL);
  do
  {
    v184 = v16[v180 + 142];
    if (v16[v180 + 142])
    {
      v185 = *v16;
      result = *(unsigned int *)(v976 + 8344);
      v186 = v976 + 2608 * v180;
      v187 = *(_DWORD *)(v186 + 436);
      v188 = block_size_high_2[v185];
      v189 = *(_DWORD *)(v186 + 440);
      v190 = *(_DWORD *)(v976 + 8352);
      if ((v179 & (v188 >> v189 < 4)) != 0)
        v191 = 2;
      else
        v191 = 0;
      if ((v179 & (block_size_wide_3[v185] >> v187 < 4u)) != 0)
        v192 = 2;
      else
        v192 = 0;
      v931 = v181;
      v193 = v9 + 10574;
      if ((v181 & 1) != 0)
        v193 = v9 + 9944;
      v972 = v193;
      v194 = *a5;
      v195 = *v194 & 7;
      v196 = __clz(v184) ^ 0x1F;
      v980 = v184;
      v197 = (2 << v196) - v184;
      v198 = v195 - v197;
      v960 = v187;
      v956 = block_size_wide_3[v185];
      v952 = *(_DWORD *)(v976 + 8344);
      v946 = v191;
      v943 = v192;
      if (v195 >= v197)
      {
        if (v196)
        {
          v207 = v197 + (v198 >> 1);
          v208 = v196 + 1;
          do
          {
            v209 = *(unsigned __int16 *)(v90 + 40);
            v210 = (v209 >> 1) & 0x7F80 | 4;
            v211 = 1 << (v208 - 2);
            v212 = v209 - v210;
            v213 = (v211 & v207) == 0;
            if ((v211 & v207) != 0)
              v214 = v212;
            else
              v214 = 0;
            if (v213)
              v215 = v212;
            else
              v215 = v210;
            od_ec_enc_normalize(v966, *(_QWORD *)(v90 + 32) + v214, v215);
            v90 = v977;
            --v208;
          }
          while (v208 > 1);
        }
        v216 = *(unsigned __int16 *)(v90 + 40);
        v217 = (v216 >> 1) & 0x7F80 | 4;
        v218 = v216 - v217;
        if ((v198 & 1) != 0)
          v219 = v217;
        else
          v219 = v218;
        result = (unint64_t)od_ec_enc_normalize(v966, *(_QWORD *)(v90 + 32) + ((v198 << 31 >> 31) & v218), v219);
        v90 = v977;
      }
      else if (v196)
      {
        v199 = v196 + 1;
        do
        {
          v200 = *(unsigned __int16 *)(v90 + 40);
          v201 = (v200 >> 1) & 0x7F80 | 4;
          v202 = 1 << (v199 - 2);
          v203 = v200 - v201;
          v204 = (v202 & v195) == 0;
          if ((v202 & v195) != 0)
            v205 = v203;
          else
            v205 = 0;
          if (v204)
            v206 = v203;
          else
            v206 = v201;
          result = (unint64_t)od_ec_enc_normalize(v966, *(_QWORD *)(v90 + 32) + v205, v206);
          v90 = v977;
          --v199;
        }
        while (v199 > 1);
      }
      v220 = (((int)(((v190 >> 31) & (v190 >> 3)) + v188) >> v189) + v946)
           * (v943 + ((((v952 >> 31) & (v952 >> 3)) + v956) >> v960));
      v221 = v194 + 1;
      v961 = v220 - 2;
      if (v220 >= 2)
      {
        v222 = 0;
        v223 = v980;
        if ((int)v980 <= 2)
          v224 = 2;
        else
          v224 = v980;
        v225 = v224;
        v226 = (v224 - 1);
        v953 = v980 - 1;
        v227 = v226 & 0xFFFFFFF8;
        v940 = v226;
        v228 = -v226;
        do
        {
          v230 = *v221;
          v231 = (int16x8_t *)(v972 + 90 * ((int)v980 - 2) + 18 * (*v221 >> 4));
          v232 = *v221 & 7;
          if ((*v221 & 7) != 0)
          {
            v233 = v231->u16[v232];
            v234 = *(_QWORD *)(v90 + 32);
            v235 = *(unsigned __int16 *)(v90 + 40);
            v236 = v235 >> 8;
            if ((v231->i16[(v232 - 1)] & 0x80000000) == 0)
            {
              v237 = ((v236 * (v231->u16[(v232 - 1)] >> 6)) >> 1) + 4 * (v223 - v232);
              v234 += v235 - v237;
              v238 = v237 - ((v236 * (v233 >> 6)) >> 1) + 4 * (v232 - v953);
              goto LABEL_274;
            }
          }
          else
          {
            v233 = v231->u16[0];
            v234 = *(_QWORD *)(v90 + 32);
            v235 = *(unsigned __int16 *)(v90 + 40);
            v236 = v235 >> 8;
          }
          v238 = v235 + 4 * (v232 - v953) - (((v233 >> 6) * v236) >> 1);
LABEL_274:
          result = (unint64_t)od_ec_enc_normalize(v966, v234, v238);
          v90 = v977;
          v223 = v980;
          v239.i64[0] = 0x800000008000;
          v239.i64[1] = 0x800000008000;
          if (*(_BYTE *)(v977 + 48))
          {
            v240 = v231->u16[v980];
            v241 = (v980 > 3) + (v240 >> 4) + 4;
            if (v225 >= 9)
            {
              v243 = (uint64x2_t)vdupq_n_s64(v232);
              v244 = v227;
              v245 = v231;
              v246 = vdupq_n_s32(v241);
              v247 = (int64x2_t)xmmword_208F05120;
              v248 = (int64x2_t)xmmword_208F08AD0;
              v249 = (int64x2_t)xmmword_208F30F10;
              v250 = (int64x2_t)xmmword_208F30F00;
              do
              {
                v251 = (uint32x4_t)vnegq_s32(v246);
                *v245 = vaddq_s16(*v245, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v243, (uint64x2_t)v247), (int32x4_t)vcgtq_u64(v243, (uint64x2_t)v248)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v243, (uint64x2_t)v249), (int32x4_t)vcgtq_u64(v243, (uint64x2_t)v250))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v239, *(uint16x4_t *)v245->i8), (int32x4_t)v251), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v239, *(uint16x8_t *)v245), (int32x4_t)v251)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v245->i8), v251),
                                                      (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v245), v251)))));
                ++v245;
                v249 = vaddq_s64(v249, v949);
                v248 = vaddq_s64(v248, v949);
                v247 = vaddq_s64(v247, v949);
                v250 = vaddq_s64(v250, v949);
                v244 -= 8;
              }
              while (v244);
              v242 = v227;
              if (v227 != v940)
                goto LABEL_280;
            }
            else
            {
              v242 = 0;
LABEL_280:
              v252 = v242 - 90;
              v253 = v972 + 90 * v980 + 18 * ((uint64_t)v230 >> 4);
              do
              {
                v254 = *(unsigned __int16 *)(v253 + 2 * v252);
                v255 = v254 - (v254 >> v241);
                v256 = v254 + ((int)(0x8000 - v254) >> v241);
                if (v252 + 90 < (unint64_t)v232)
                  v257 = v256;
                else
                  v257 = v255;
                *(_WORD *)(v253 + 2 * v252++) = v257;
              }
              while (v228 + v252 != -90);
            }
            v299 = v240 >= 0x20;
            v229 = v231->u16[v980];
            if (!v299)
              ++v229;
            v231->i16[v980] = v229;
          }
          ++v221;
          v87 = v222++ == v961;
        }
        while (!v87);
      }
      a5 = (_BYTE **)v928;
      *v928 = v221;
      v182 = v974;
      v16 = v929;
      v29 = v930;
      v181 = v931;
    }
    v183 = v181 & (*(_BYTE *)(*(_QWORD *)(v29 + 5688) + 77) == 0);
    v179 = 1;
    v180 = 1;
    v181 = 0;
  }
  while ((v183 & 1) != 0);
  v258 = *(_WORD *)(v16 + 167);
  if ((v258 & 0x80) != 0)
  {
    v259 = 1;
    v260 = v925;
    v261 = v924;
    v262 = v923;
    v263 = v16[144];
    if (!(_DWORD)v923)
      goto LABEL_294;
  }
  else
  {
    v259 = (char)v16[16] > 0;
    v260 = v925;
    v261 = v924;
    v262 = v923;
    v263 = v16[144];
    if (!(_DWORD)v923)
      goto LABEL_294;
  }
  if (*(_BYTE *)(v927 + 552) != 2 || v259 && v263 || *(_DWORD *)(v976 + 4 * (v258 & 7) + 11108))
  {
LABEL_294:
    v264 = v16[145];
    v265 = v260[436];
    v266 = v260[437];
    if (v263)
      v267 = !v259;
    else
      v267 = 1;
    v268 = v267;
    if (v267)
      v269 = tx_size_high_2[v264];
    else
      v269 = 4 * v266;
    if (v260[436])
    {
      v270 = *(void **)(v976 + 8544);
      v271 = tx_size_wide_3[v264];
      if (v268)
        v272 = v271;
      else
        v272 = 4 * v265;
      goto LABEL_307;
    }
    goto LABEL_308;
  }
  v317 = **(unsigned __int8 ***)(v976 + 8280);
  if (!v259)
  {
    v319 = v16;
    v320 = *v317;
    if (!*v317)
      goto LABEL_438;
    v321 = max_txsize_rect_lookup_0[v320];
    v322 = **(unsigned __int8 **)(v976 + 8544);
    v323 = **(unsigned __int8 **)(v976 + 8552);
    if (*v925)
    {
      v324 = *(unsigned __int8 **)(v976 + 8304);
      if ((*(_WORD *)(v324 + 167) & 0x80) != 0 || (char)v324[16] >= 1)
        v322 = block_size_wide_3[*v324];
    }
    v325 = v317[145];
    if (v925[1])
    {
      v326 = *(unsigned __int8 **)(v976 + 8296);
      if ((*(_WORD *)(v326 + 167) & 0x80) != 0 || (char)v326[16] >= 1)
        v323 = block_size_high_2[*v326];
    }
    if (v925[1])
      v327 = tx_size_high_2[max_txsize_rect_lookup_0[v320]] <= v323;
    else
      v327 = 0;
    v328 = v327;
    if (*v925)
      v329 = tx_size_wide_3[max_txsize_rect_lookup_0[v320]] <= v322;
    else
      v329 = 0;
    if (v329)
      v330 = v328 + 1;
    else
      v330 = v328;
    if (v321 == v325)
    {
      v331 = 0;
    }
    else
    {
      v331 = 0;
      do
      {
        ++v331;
        v321 = sub_tx_size_map[v321];
      }
      while (v321 != v325);
    }
    v337 = bsize_to_max_depth_bsize_to_max_depth_table[v320];
    v338 = bsize_to_tx_size_cat_bsize_to_tx_size_depth_table[v320];
    v982 = *(_QWORD *)(v976 + 11064);
    v339 = v982 + 24 * bsize_to_tx_size_cat_bsize_to_tx_size_depth_table[v320] + 8 * v330 + 14990;
    v340 = v337 + 1;
    if (v331 <= 0)
    {
      v341 = *(unsigned __int16 *)(v339 + 2 * v331);
      v342 = *(_QWORD *)(v90 + 32);
      v343 = *(unsigned __int16 *)(v90 + 40);
      v344 = v343 >> 8;
    }
    else
    {
      v341 = *(unsigned __int16 *)(v339 + 2 * v331);
      v342 = *(_QWORD *)(v90 + 32);
      v343 = *(unsigned __int16 *)(v90 + 40);
      v344 = v343 >> 8;
      if ((*(__int16 *)(v339 + 2 * (v331 - 1)) & 0x80000000) == 0)
      {
        v345 = ((v344 * (*(unsigned __int16 *)(v339 + 2 * (v331 - 1)) >> 6)) >> 1) + 4 * (v340 - v331);
        v342 += v343 - v345;
        v346 = v345 - ((v344 * (v341 >> 6)) >> 1) + 4 * (v331 - v337);
        goto LABEL_422;
      }
    }
    v346 = v343 + 4 * (v331 - v337) - (((v341 >> 6) * v344) >> 1);
LABEL_422:
    result = (unint64_t)od_ec_enc_normalize(v966, v342, v346);
    if (!*(_BYTE *)(v977 + 48))
      goto LABEL_438;
    v347 = *(unsigned __int16 *)(v339 + 2 * v340);
    v348 = (v347 >> 4) + 4;
    if ((int)v337 <= 1)
      v349 = 1;
    else
      v349 = v337;
    if (v349 >= 8)
    {
      v350 = v349 & 0xF8;
      v351 = vdupq_n_s64((char)v331);
      v352 = (int64x2_t)xmmword_208F30F00;
      v353 = (int64x2_t)xmmword_208F30F10;
      v354 = (int64x2_t)xmmword_208F08AD0;
      v355 = (int64x2_t)xmmword_208F05120;
      v356 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v348));
      v357.i64[0] = 0x800000008000;
      v357.i64[1] = 0x800000008000;
      v358 = vdupq_n_s64(8uLL);
      v359 = v350;
      v360 = (int16x8_t *)v339;
      do
      {
        *v360 = vaddq_s16(*v360, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v351, v355), (int32x4_t)vcgtq_s64(v351, v354)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v351, v353), (int32x4_t)vcgtq_s64(v351, v352))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v357, *(uint16x4_t *)v360->i8), (int32x4_t)v356), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v357, *(uint16x8_t *)v360), (int32x4_t)v356)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v360->i8), v356),
                                              (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v360), v356)))));
        ++v360;
        v353 = vaddq_s64(v353, v358);
        v354 = vaddq_s64(v354, v358);
        v355 = vaddq_s64(v355, v358);
        v352 = vaddq_s64(v352, v358);
        v359 -= 8;
      }
      while (v359);
      if (v350 == v349)
      {
LABEL_435:
        v365 = *(_WORD *)(v339 + 2 * v340);
        if (v347 < 0x20)
          ++v365;
        *(_WORD *)(v339 + 2 * v340) = v365;
LABEL_438:
        v16 = v319;
        v366 = v319[145];
        v265 = v925[436];
        v266 = v925[437];
        v269 = tx_size_high_2[v366];
        if (v925[436])
        {
          v270 = *(void **)(v976 + 8544);
          v272 = tx_size_wide_3[v366];
LABEL_307:
          result = (unint64_t)memset(v270, v272, v265);
        }
LABEL_308:
        if (v266)
          result = (unint64_t)memset(*(void **)(v976 + 8552), v269, v266);
        goto LABEL_310;
      }
    }
    else
    {
      v350 = 0;
    }
    v361 = (_WORD *)(8 * v330 + 24 * v338 + 2 * v350 + v982 + 14990);
    do
    {
      v362 = (unsigned __int16)*v361;
      v363 = v362 - (v362 >> v348);
      v364 = v362 + ((int)(0x8000 - v362) >> v348);
      if (v350 >= (char)v331)
        LOWORD(v364) = v363;
      *v361++ = v364;
      ++v350;
    }
    while (v349 != v350);
    goto LABEL_435;
  }
  if (*(_DWORD *)(v976 + 4 * (*(_WORD *)(v317 + 167) & 7) + 11108))
    v318 = 0;
  else
    v318 = max_txsize_rect_lookup_0[v262];
  v332 = 0;
  v333 = v318;
  v334 = tx_size_high_unit_0[v333];
  v335 = tx_size_wide_unit_0[v333];
  do
  {
    v336 = 0;
    do
    {
      result = (unint64_t)write_tx_size_vartx(v182, v16, v318, 0, v332, v336, v977);
      v336 += v335;
    }
    while (v336 < v926);
    v332 += v334;
  }
  while (v332 < v261);
LABEL_310:
  if (v16[144])
    return result;
  v273 = v976;
  v274 = v977;
  v275 = *(__int16 *)(v977 + 42);
  v276 = *(_DWORD *)(v977 + 28);
  v277 = **(unsigned __int8 ***)(v976 + 8280);
  v278 = *v277;
  if ((*(_WORD *)(v277 + 167) & 0x80) == 0 && (char)v277[16] <= 0)
  {
    result = (unint64_t)av1_write_intra_coeffs_mb(v975, v976, v977, v278);
    v274 = v977;
    goto LABEL_367;
  }
  v932 = *(_DWORD *)(v977 + 28);
  v933 = *(__int16 *)(v977 + 42);
  v950 = 0;
  v279 = 0;
  v984 = 0;
  v983 = 0;
  v280 = mi_size_wide_5[v278];
  v941 = v280;
  if (v280 >= 0x10)
    v280 = 16;
  v938 = v280;
  v935 = mi_size_high_4[v278];
  if (v935 >= 0x10)
    v281 = 16;
  else
    v281 = mi_size_high_4[v278];
  v934 = v281;
  v947 = *(unsigned __int8 *)(*(_QWORD *)(v930 + 5688) + 77);
  v981 = (uint64_t)v277;
  while (2)
  {
    v954 = 0;
    for (result = 0; ; result = 0)
    {
      do
      {
        v973 = result;
        if (result)
        {
          if (!*(_BYTE *)(v273 + 428))
            break;
          v282 = v273 + 416 + 2608 * result;
          v283 = *(int *)(v282 + 20);
          v284 = *(int *)(v282 + 24);
          v285 = av1_ss_size_lookup[4 * *v277 + 2 * v283 + v284];
          if (*(_DWORD *)(v273 + 416 + 4 * (*(_WORD *)(**(_QWORD **)(v273 + 8280) + 167) & 7) + 10692))
          {
            v286 = 0;
          }
          else
          {
            v286 = 3;
            switch(av1_ss_size_lookup[4 * *v277 + 2 * v283 + v284])
            {
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x2Du:
              case 0x30u:
              case 0x35u:
                break;
              case 0x14u:
              case 0x37u:
                v286 = 9;
                break;
              case 0x15u:
              case 0x38u:
                v286 = 10;
                break;
              default:
                v286 = max_txsize_rect_lookup_0[v285];
                break;
            }
          }
          v303 = av1_ss_size_lookup[2 * v283 + 48 + v284];
          v304 = mi_size_wide_5[v303];
          v305 = v950 >> v284;
          v306 = (v950 >> v284) + mi_size_high_4[v303];
          if (v306 >= mi_size_high_4[v285])
            v307 = mi_size_high_4[v285];
          else
            v307 = v306;
          v308 = v954 >> v283;
          v309 = (v954 >> v283) + v304;
          if (v309 >= mi_size_wide_5[v285])
            v310 = mi_size_wide_5[v285];
          else
            v310 = v309;
          v968 = v307;
          v963 = v308;
          if (v305 < v307 && v308 < v310)
          {
            v944 = v279;
            v312 = v286;
            v313 = tx_size_wide_unit_0[v312];
            v958 = tx_size_high_unit_0[v312];
            v314 = *((unsigned int *)&v983 + result);
            do
            {
              v315 = v963;
              do
              {
                v316 = v286;
                result = pack_txb_tokens(v274, (uint64_t)v975, v273, (uint64_t)v974, v981, v973, v285, v314, v305, v315, v286);
                v286 = v316;
                v274 = v977;
                v277 = (unsigned __int8 *)v981;
                v273 = v976;
                v314 = (v314 + v958 * v313);
                *((_DWORD *)&v983 + v973) = v314;
                v315 += v313;
              }
              while (v315 < v310);
              v305 += v958;
            }
            while (v305 < v968);
            v279 = v944;
          }
        }
        else
        {
          v287 = *(int *)(v273 + 436);
          v288 = *(int *)(v273 + 440);
          v289 = av1_ss_size_lookup[4 * *v277 + 2 * v287 + v288];
          if (*(_DWORD *)(v273 + 4 * (*(_WORD *)(**(_QWORD **)(v273 + 8280) + 167) & 7) + 11108))
            v290 = 0;
          else
            v290 = max_txsize_rect_lookup_0[v289];
          v291 = av1_ss_size_lookup[2 * v287 + 48 + v288];
          v292 = mi_size_wide_5[v291];
          v293 = v950 >> v288;
          v294 = (v950 >> v288) + mi_size_high_4[v291];
          if (v294 >= mi_size_high_4[v289])
            v295 = mi_size_high_4[v289];
          else
            v295 = v294;
          v296 = v954 >> v287;
          v297 = (v954 >> v287) + v292;
          if (v297 >= mi_size_wide_5[v289])
            v298 = mi_size_wide_5[v289];
          else
            v298 = v297;
          v967 = v295;
          v962 = v296;
          v299 = v293 >= v295 || v296 >= v298;
          if (!v299)
          {
            v300 = v290;
            v301 = tx_size_wide_unit_0[v300];
            v957 = tx_size_high_unit_0[v300];
            do
            {
              v302 = v962;
              do
              {
                result = pack_txb_tokens(v274, (uint64_t)v975, v273, (uint64_t)v974, v981, 0, v289, v279, v293, v302, v290);
                v274 = v977;
                v277 = (unsigned __int8 *)v981;
                v273 = v976;
                v279 = (v279 + v957 * v301);
                v302 += v301;
              }
              while (v302 < v298);
              v293 += v957;
            }
            while (v293 < v967);
          }
        }
        if (v947)
          break;
        result = v973 + 1;
      }
      while (v973 < 2);
      v954 += v938;
      if (v954 >= v941)
        break;
    }
    v950 += v934;
    if (v950 < v935)
      continue;
    break;
  }
  v276 = v932;
  v275 = v933;
LABEL_367:
  *v922 = *v922 - v275 + *(__int16 *)(v274 + 42) + 8 * (*(_DWORD *)(v274 + 28) - v276);
  return result;
}

_DWORD *write_tx_size_vartx(_DWORD *result, unsigned __int8 *a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7)
{
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  size_t v27;
  size_t v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _BOOL8 v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  size_t v51;
  int v52;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int16 *v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  size_t v82;
  int v83;
  int v84;
  uint64_t v86;
  int v87;

  v8 = result;
  v9 = *a2;
  v10 = block_size_high_2[v9];
  v11 = result[1984];
  v12 = v10;
  if (v11 < 0)
    v12 = (v11 >> (result[6] + 3)) + v10;
  v13 = v12 >> 2;
  v14 = block_size_wide_3[v9];
  v15 = result[1982];
  if (v15 < 0)
  {
    if (v13 <= a5 || (int)((v15 >> (result[5] + 3)) + v14) >> 2 <= a6)
      return result;
  }
  else if (v13 <= a5 || (int)block_size_wide_3[v9] >> 2 <= a6)
  {
    return result;
  }
  v18 = a6;
  v19 = (unsigned __int8 *)(*((_QWORD *)result + 1016) + a6);
  v20 = a5;
  v21 = (unsigned __int8 *)(*((_QWORD *)result + 1017) + a5);
  if (a4 == 2)
  {
    v22 = txsize_to_bsize_1[a3];
    v23 = mi_size_wide_5[v22];
    v24 = 4 * a3;
    v25 = *(_DWORD *)((char *)&tx_size_wide_3 + v24);
    v26 = mi_size_high_4[v22];
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    memset(v21, *(_DWORD *)((char *)&tx_size_high_2 + v24), v27);
    if (v23 <= 1)
      v28 = 1;
    else
      v28 = v23;
    v29 = v19;
LABEL_76:
    v52 = v25;
    return memset(v29, v52, v28);
  }
  v30 = *v19;
  v31 = a3;
  v32 = 4 * a3;
  v33 = *((unsigned __int8 *)&tx_size_wide_3 + v32);
  v34 = *((unsigned __int8 *)&tx_size_high_2 + v32);
  v35 = v33 > v30;
  if (a3)
  {
    if (v14 <= v10)
      v36 = block_size_high_2[v9];
    else
      v36 = block_size_wide_3[v9];
    v37 = 63;
    if (v36 <= 31)
    {
      if (v36 == 8)
      {
        v39 = 0;
        v38 = 1;
        goto LABEL_36;
      }
      if (v36 == 16)
      {
        v38 = 2;
        v39 = 1;
        goto LABEL_36;
      }
    }
    else
    {
      v38 = 4;
      v39 = 1;
      if (v36 == 128 || v36 == 64)
      {
LABEL_36:
        if (txsize_sqr_up_map[a3] == v38)
          v41 = 0;
        else
          v41 = v39;
        v37 = 3 * (v41 | (2 * (4 - v38)));
        goto LABEL_40;
      }
      if (v36 == 32)
      {
        v38 = 3;
        goto LABEL_36;
      }
    }
LABEL_40:
    v40 = (v34 > *v21) + v35 + v37;
    goto LABEL_41;
  }
  v40 = 0;
LABEL_41:
  v42 = v8;
  v43 = *((_QWORD *)v8 + 1331);
  if (a2[(a6 >> av1_get_txb_size_index_tw_w_log2_table_0[v9])
        + 146
        + (a5 >> av1_get_txb_size_index_tw_h_log2_table_0[v9] << av1_get_txb_size_index_stride_log2_table_0[v9])] == a3)
  {
    v44 = (unsigned __int16 *)(v43 + 6 * v40 + 11654);
    od_ec_enc_normalize((_DWORD *)(a7 + 16), *(_QWORD *)(a7 + 32), *(unsigned __int16 *)(a7 + 40) - ((HIBYTE(*(unsigned __int16 *)(a7 + 40)) * (*v44 >> 6)) >> 1) - 4);
    if (*(_BYTE *)(a7 + 48))
    {
      v46 = v44[2];
      *v44 -= *v44 >> ((v46 >> 4) + 4);
      if (v46 < 0x20)
        LOWORD(v46) = v46 + 1;
      v44[2] = v46;
    }
    v47 = (void *)(v42[1016] + v18);
    v48 = txsize_to_bsize_1[v31];
    v49 = mi_size_wide_5[v48];
    v50 = mi_size_high_4[v48];
    if (v50 <= 1)
      v51 = 1;
    else
      v51 = v50;
    memset((void *)(v42[1017] + v20), v34, v51);
    if (v49 <= 1)
      v28 = 1;
    else
      v28 = v49;
    v29 = v47;
    v52 = v33;
    return memset(v29, v52, v28);
  }
  v86 = a5;
  v55 = a3;
  v56 = sub_tx_size_map[a3];
  v57 = tx_size_wide_unit_0[v56];
  v84 = tx_size_high_unit_0[v56];
  v58 = (unsigned __int16 *)(v43 + 6 * v40 + 11654);
  v59 = (__int16)*v58;
  v60 = *(unsigned __int16 *)(a7 + 40);
  v61 = (v60 >> 8) * (*(unsigned __int16 *)(v43 + 6 * v40 + 11656) >> 6);
  v62 = v60 - (v61 >> 1);
  v63 = (((v60 >> 8) * (*v58 >> 6)) >> 1) + 4;
  v64 = *(_QWORD *)(a7 + 32) + v60 - v63;
  v65 = v63 - (v61 >> 1);
  if (v59 >= 0)
    v66 = v64;
  else
    v66 = *(_QWORD *)(a7 + 32);
  if (v59 >= 0)
    v67 = v65;
  else
    v67 = v62;
  od_ec_enc_normalize((_DWORD *)(a7 + 16), v66, v67);
  if (*(_BYTE *)(a7 + 48))
  {
    v69 = v58[2];
    *v58 += (0x8000 - *v58) >> ((v69 >> 4) + 4);
    if (v69 < 0x20)
      LOWORD(v69) = v69 + 1;
    v58[2] = v69;
  }
  v70 = v55;
  result = v42;
  if (((0x63uLL >> v55) & 1) != 0)
  {
    v77 = (void *)(v42[1016] + v18);
    v78 = (void *)(v42[1017] + v86);
    v79 = txsize_to_bsize_1[v70];
    v80 = mi_size_wide_5[v79];
    v25 = *((_DWORD *)&tx_size_wide_3 + v56);
    v81 = mi_size_high_4[v79];
    if (v81 <= 1)
      v82 = 1;
    else
      v82 = v81;
    memset(v78, *((_DWORD *)&tx_size_high_2 + v56), v82);
    if (v80 <= 1)
      v28 = 1;
    else
      v28 = v80;
    v29 = v77;
    goto LABEL_76;
  }
  v71 = 0;
  v83 = tx_size_high_unit_0[v55];
  v72 = tx_size_wide_unit_0[v55];
  v73 = (a4 + 1);
  v74 = a5;
  do
  {
    v75 = 0;
    v87 = v71;
    v76 = (v71 + v74);
    do
    {
      write_tx_size_vartx(result, a2, v56, v73, v76, (a6 + v75), a7);
      result = v42;
      v75 += v57;
    }
    while (v75 < v72);
    v71 = v87 + v84;
    v74 = a5;
  }
  while (v87 + v84 < v83);
  return result;
}

_DWORD *write_segment_id_0(_DWORD *result, int *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int v22;
  int v23;
  int v24;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  size_t v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  size_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  _DWORD *v56;
  unsigned __int16 *v57;
  _DWORD *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  _DWORD *v68;
  unsigned int v72;
  unsigned int v73;
  unsigned int v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned __int8 v91;
  int v92;
  size_t v93;
  int v94;

  if (!*(_BYTE *)a5 || !*(_BYTE *)(a5 + 1))
    return result;
  v9 = result + 114164;
  result += 59818;
  if (*(_DWORD *)(v9[2] + 108))
    v10 = 2;
  else
    v10 = 1;
  v12 = *a2;
  v11 = a2[1];
  v13 = *(_QWORD *)(*(_QWORD *)result + 80);
  if (!*((_BYTE *)a2 + 7872))
  {
    v18 = 255;
    v20 = 255;
    if (!*((_BYTE *)a2 + 7873))
      goto LABEL_53;
    goto LABEL_19;
  }
  if (*((_BYTE *)a2 + 7873))
  {
    v14 = v12 - v10;
    v15 = v11 - v10;
    v16 = result[75];
    v17 = result[76];
    v18 = 8;
    if (v16 > v12 - v10 && v17 > v15)
    {
      v73 = *(unsigned __int8 *)(v13 + v15 + v17 * v14);
      if (v73 >= 8)
        v18 = 8;
      else
        v18 = v73;
      v20 = 8;
      if (v16 > v14 && v17 > v11)
        goto LABEL_88;
LABEL_18:
      if (!*((_BYTE *)a2 + 7873))
        goto LABEL_53;
      goto LABEL_19;
    }
    v20 = 8;
    if (v16 <= v14 || v17 <= v11)
      goto LABEL_18;
  }
  else
  {
    v17 = result[76];
    v14 = v12 - v10;
    v18 = 255;
    v20 = 8;
    if (result[75] <= v12 - v10 || v17 <= v11)
      goto LABEL_18;
  }
LABEL_88:
  v72 = *(unsigned __int8 *)(v13 + v11 + v17 * v14);
  if (v72 >= 8)
    v20 = 8;
  else
    v20 = v72;
  if (!*((_BYTE *)a2 + 7873))
  {
LABEL_53:
    v24 = 255;
    if (v18 != 255)
      goto LABEL_54;
LABEL_27:
    v27 = 0;
    v28 = v20;
    if (v20 == 255)
      goto LABEL_57;
    goto LABEL_28;
  }
LABEL_19:
  v22 = v11 - v10;
  v23 = result[76];
  v24 = 8;
  if (result[75] > v12 && v23 > v22)
  {
    v26 = *(unsigned __int8 *)(v13 + v22 + v23 * v12);
    if (v26 >= 8)
      v24 = 8;
    else
      v24 = v26;
  }
  if (v18 == 255)
    goto LABEL_27;
LABEL_54:
  if (v18 == v20 && v18 == v24)
  {
    v27 = 2;
    v28 = v18;
    if (v20 == 255)
      goto LABEL_57;
  }
  else
  {
    v27 = v18 == v20 || v18 == v24 || v24 == v20;
    v28 = v20;
    if (v20 == 255)
    {
LABEL_57:
      if (v24 == 255)
        v30 = 0;
      else
        v30 = v24;
      if (!a7)
        goto LABEL_61;
      goto LABEL_35;
    }
  }
LABEL_28:
  if (v18 == v28)
    v29 = v28;
  else
    v29 = v24;
  if (v24 == 255)
    v30 = v20;
  else
    v30 = v29;
  if (!a7)
  {
LABEL_61:
    v51 = a2[1];
    v52 = *(_WORD *)(a3 + 167) & 7;
    if (!v30)
      goto LABEL_69;
    v53 = *(_DWORD *)(a5 + 164);
    if (v53 <= v30)
      goto LABEL_68;
    v54 = v52 - v30;
    if ((int)v52 - v30 >= 0)
      v55 = v52 - v30;
    else
      v55 = v30 - v52;
    if (v53 >= 2 * v30)
    {
      if (v55 > v30)
        goto LABEL_69;
    }
    else if (v55 > v53 - v30)
    {
LABEL_68:
      v52 = (v53 - v52);
      goto LABEL_69;
    }
    if (v54 > 0)
    {
      v56 = result;
      v52 = (2 * v54 - 1);
      v57 = (unsigned __int16 *)(a6 + 18 * v27 + 18);
      v58 = (_DWORD *)(a4 + 16);
      goto LABEL_70;
    }
    v52 = (-2 * v54);
LABEL_69:
    v56 = result;
    v57 = (unsigned __int16 *)(a6 + 18 * v27 + 18);
    v58 = (_DWORD *)(a4 + 16);
    if ((int)v52 <= 0)
    {
      v65 = *a2;
      v61 = v57[(int)v52];
      v62 = *(_QWORD *)(a4 + 32);
      v63 = *(unsigned __int16 *)(a4 + 40);
      v64 = v63 >> 8;
      goto LABEL_102;
    }
LABEL_70:
    v59 = a6 + 18 * v27 + 18;
    v60 = *(__int16 *)(v59 + 2 * (v52 - 1));
    v61 = *(unsigned __int16 *)(v59 + 2 * v52);
    v62 = *(_QWORD *)(a4 + 32);
    v63 = *(unsigned __int16 *)(a4 + 40);
    v64 = v63 >> 8;
    v65 = v12;
    if ((v60 & 0x80000000) == 0)
    {
      v66 = ((v64 * ((unsigned __int16)v60 >> 6)) >> 1) - 4 * v52 + 32;
      result = od_ec_enc_normalize(v58, v62 + v63 - v66, 4 * v52 - ((v64 * (v61 >> 6)) >> 1) + v66 - 28);
      v67 = v65;
      v68 = v56;
      if (!*(_BYTE *)(a4 + 48))
      {
LABEL_121:
        v86 = *a3;
        v87 = v68[75] - v67;
        if (v87 >= mi_size_high_4[v86])
          v88 = mi_size_high_4[v86];
        else
          v88 = v87;
        if ((int)v88 >= 1)
        {
          v89 = (int)v68[76];
          v90 = (char *)(*(_QWORD *)(*(_QWORD *)v68 + 80) + v51 + (int)v89 * v67);
          v91 = a3[167];
          v92 = mi_size_wide_5[v86];
          if ((int)v89 - v51 < v92)
            v92 = v89 - v51;
          v93 = v92;
          v94 = v91 & 7;
          do
          {
            result = memset(v90, v94, v93);
            v90 += v89;
            --v88;
          }
          while (v88);
        }
        return result;
      }
LABEL_103:
      v75 = v57[8];
      v76 = (v75 >> 4) + 5;
      v77 = v52 << 56;
      v78 = *v57;
      if (v52 << 56 <= 0)
      {
        *v57 = v78 - (v78 >> v76);
        v79 = v57[1];
      }
      else
      {
        *v57 = v78 + ((int)(0x8000 - v78) >> v76);
        v79 = v57[1];
        if (v77 > 0x100000000000000)
        {
          v57[1] = v79 + ((int)(0x8000 - v79) >> v76);
          v80 = v57[2];
          if (v77 > 0x200000000000000)
          {
            v57[2] = v80 + ((int)(0x8000 - v80) >> v76);
            v81 = v57[3];
            if (v77 > 0x300000000000000)
            {
              v57[3] = v81 + ((int)(0x8000 - v81) >> v76);
              v82 = v57[4];
              if (v77 > 0x400000000000000)
              {
                v57[4] = v82 + ((int)(0x8000 - v82) >> v76);
                v83 = v57[5];
                if (v77 > 0x500000000000000)
                {
                  v57[5] = v83 + ((int)(0x8000 - v83) >> v76);
                  v84 = v57[6];
                  if (v77 > 0x600000000000000)
                  {
                    v85 = v84 + ((int)(0x8000 - v84) >> v76);
LABEL_118:
                    v57[6] = v85;
                    if (v75 < 0x20)
                      LOWORD(v75) = v75 + 1;
                    v57[8] = v75;
                    goto LABEL_121;
                  }
LABEL_117:
                  v85 = v84 - (v84 >> v76);
                  goto LABEL_118;
                }
LABEL_116:
                v57[5] = v83 - (v83 >> v76);
                v84 = v57[6];
                goto LABEL_117;
              }
LABEL_115:
              v57[4] = v82 - (v82 >> v76);
              v83 = v57[5];
              goto LABEL_116;
            }
LABEL_114:
            v57[3] = v81 - (v81 >> v76);
            v82 = v57[4];
            goto LABEL_115;
          }
LABEL_113:
          v57[2] = v80 - (v80 >> v76);
          v81 = v57[3];
          goto LABEL_114;
        }
      }
      v57[1] = v79 - (v79 >> v76);
      v80 = v57[2];
      goto LABEL_113;
    }
LABEL_102:
    result = od_ec_enc_normalize(v58, v62, v63 + 4 * v52 - (((v61 >> 6) * v64) >> 1) - 28);
    v67 = v65;
    v68 = v56;
    if (!*(_BYTE *)(a4 + 48))
      goto LABEL_121;
    goto LABEL_103;
  }
LABEL_35:
  v32 = *a3;
  v33 = result[75] - v12;
  if (v33 >= mi_size_high_4[v32])
    v34 = mi_size_high_4[v32];
  else
    v34 = v33;
  if ((int)v34 >= 1)
  {
    v35 = result;
    v36 = (int)result[76];
    v37 = *a2;
    v38 = (char *)(v13 + v11 + (int)v36 * v12);
    v39 = a2[1];
    v40 = v36 - v11;
    v41 = mi_size_wide_5[v32];
    if ((int)v36 - v11 >= v41)
      v40 = v41;
    v42 = v40;
    do
    {
      result = memset(v38, v30, v42);
      v38 += v36;
      --v34;
    }
    while (v34);
    v43 = *a3;
    v44 = v35;
    v45 = v35[75] - v37;
    if (v45 >= mi_size_high_4[v43])
      v46 = mi_size_high_4[v43];
    else
      v46 = v45;
    if ((int)v46 >= 1)
    {
      v47 = (int)v44[76];
      v48 = (char *)(*v9 + v39 + (int)v47 * v37);
      v49 = mi_size_wide_5[v43];
      if ((int)v47 - v39 < v49)
        v49 = v47 - v39;
      v50 = v49;
      do
      {
        result = memset(v48, v30, v50);
        v48 += v47;
        --v46;
      }
      while (v46);
    }
  }
  *(_WORD *)(a3 + 167) = *(_WORD *)(a3 + 167) & 0xFFF8 | v30 & 7;
  return result;
}

_DWORD *write_delta_q_params(_DWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;

  v4 = result + 6092;
  if (!result[6092])
    return result;
  v6 = result;
  v7 = *((_QWORD *)result + 3085);
  v8 = *(_DWORD *)(v7 + 32) - 1;
  if ((v8 & *(_DWORD *)a2) != 0)
    return result;
  v9 = **(unsigned __int8 ***)(a2 + 7864);
  v10 = *(_DWORD *)(a2 + 4) & v8;
  v11 = *v9 != *(unsigned __int8 *)(v7 + 28) || a3 == 0;
  if (!v11 || v10 != 0)
    return result;
  v14 = (*((_DWORD *)v9 + 1) - *(_DWORD *)(a2 + 10724)) / result[6093];
  v15 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 15110);
  if (v14 >= 0)
    v16 = (*((_DWORD *)v9 + 1) - *(_DWORD *)(a2 + 10724)) / result[6093];
  else
    v16 = -v14;
  if (v16 >= 3)
    v17 = 3;
  else
    v17 = v16;
  v18 = (_DWORD *)(a4 + 16);
  if (v17)
  {
    v19 = v15[v17];
    v20 = *(_QWORD *)(a4 + 32);
    v21 = *(unsigned __int16 *)(a4 + 40);
    v22 = v21 >> 8;
    if (((__int16)v15[v17 - 1] & 0x80000000) == 0)
    {
      v23 = ((v22 * (v15[v17 - 1] >> 6)) >> 1) - 4 * v17 + 16;
      v20 += v21 - v23;
      v24 = 4 * v17 - ((v22 * (v19 >> 6)) >> 1) + v23;
      goto LABEL_22;
    }
  }
  else
  {
    v19 = *v15;
    v20 = *(_QWORD *)(a4 + 32);
    v21 = *(unsigned __int16 *)(a4 + 40);
    v22 = v21 >> 8;
  }
  v24 = v21 + 4 * v17 - (((v19 >> 6) * v22) >> 1);
LABEL_22:
  result = od_ec_enc_normalize((_DWORD *)(a4 + 16), v20, v24 - 12);
  if (*(_BYTE *)(a4 + 48))
  {
    v25 = v15[4];
    v26 = (v25 >> 4) + 5;
    v27 = *v15;
    if (v17)
    {
      *v15 = v27 + ((int)(0x8000 - v27) >> v26);
      v28 = v15[1];
      if (v17 != 1)
      {
        v15[1] = v28 + ((int)(0x8000 - v28) >> v26);
        v29 = v15[2];
        if (v16 <= 2)
        {
LABEL_26:
          v30 = v29 - (v29 >> v26);
LABEL_30:
          v15[2] = v30;
          if (v25 < 0x20)
            LOWORD(v25) = v25 + 1;
          v15[4] = v25;
          goto LABEL_33;
        }
LABEL_29:
        v30 = v29 + ((int)(0x8000 - v29) >> v26);
        goto LABEL_30;
      }
    }
    else
    {
      *v15 = v27 - (v27 >> v26);
      v28 = v15[1];
    }
    v15[1] = v28 - (v28 >> v26);
    v29 = v15[2];
    if (v16 <= 2)
      goto LABEL_26;
    goto LABEL_29;
  }
LABEL_33:
  if (v16 >= 3)
  {
    v31 = __clz(v16 - 1) ^ 0x1F;
    v32 = v31 - 1;
    v33 = *(unsigned __int16 *)(a4 + 40);
    v34 = (v33 >> 1) & 0x7F80 | 4;
    v35 = v33 - v34;
    v36 = ((v31 - 1) & 4) != 0 ? v34 : v35;
    od_ec_enc_normalize(v18, *(_QWORD *)(a4 + 32) + (v35 & ((int)((v31 - 1) << 29) >> 31)), v36);
    v37 = *(unsigned __int16 *)(a4 + 40);
    v38 = (v37 >> 1) & 0x7F80 | 4;
    v39 = v37 - v38;
    v40 = (v32 & 2) != 0 ? v38 : v39;
    od_ec_enc_normalize(v18, *(_QWORD *)(a4 + 32) + (v39 & ((int)(v32 << 30) >> 31)), v40);
    v41 = *(unsigned __int16 *)(a4 + 40);
    v42 = (v41 >> 1) & 0x7F80 | 4;
    v43 = v41 - v42;
    v44 = (v32 & 1) != 0 ? v42 : v43;
    result = od_ec_enc_normalize(v18, *(_QWORD *)(a4 + 32) + (((int)(v32 << 31) >> 31) & v43), v44);
    if (v31)
    {
      v45 = v16 + ~(1 << v31);
      v46 = v31 + 1;
      do
      {
        v47 = *(unsigned __int16 *)(a4 + 40);
        v48 = (v47 >> 1) & 0x7F80 | 4;
        v49 = 1 << (v46 - 2);
        v50 = v47 - v48;
        v51 = (v49 & v45) == 0;
        if ((v49 & v45) != 0)
          v52 = v50;
        else
          v52 = 0;
        if (v51)
          v53 = v50;
        else
          v53 = v48;
        result = od_ec_enc_normalize(v18, *(_QWORD *)(a4 + 32) + v52, v53);
        --v46;
      }
      while (v46 > 1);
    }
  }
  if (v14)
  {
    v54 = *(unsigned __int16 *)(a4 + 40);
    v55 = (v54 >> 1) & 0x7F80 | 4;
    v56 = v54 - v55;
    if (v14 < 0)
      v57 = v56;
    else
      v57 = 0;
    if (v14 < 0)
      v58 = v55;
    else
      v58 = v56;
    result = od_ec_enc_normalize(v18, *(_QWORD *)(a4 + 32) + v57, v58);
  }
  *(_DWORD *)(a2 + 10724) = *((_DWORD *)v9 + 1);
  if (v4[2])
  {
    if (v4[4])
    {
      v59 = 0;
      if (*(_BYTE *)(*((_QWORD *)v6 + 3085) + 77))
        v60 = 2;
      else
        v60 = 4;
      v61 = a2 + 10753;
      v62 = v9 + 163;
      do
      {
        result = write_delta_lflevel(*(_QWORD *)(a2 + 10648), v59, ((char)v62[v59] - *(char *)(v61 + v59)) / v4[3], 1, a4);
        *(_BYTE *)(v61 + v59) = v62[v59];
        ++v59;
      }
      while (v60 != v59);
    }
    else
    {
      result = write_delta_lflevel(*(_QWORD *)(a2 + 10648), -1, ((char)v9[162] - *(char *)(a2 + 10752)) / v4[3], 0, a4);
      *(_BYTE *)(a2 + 10752) = v9[162];
    }
  }
  return result;
}

_DWORD *write_intra_prediction_modes(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int16 *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  _DWORD *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _DWORD *result;
  _WORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _WORD *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned __int16 *v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int16 v83;
  _WORD *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  unsigned __int16 *v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned __int16 v140;
  unsigned __int16 v141;
  uint64_t v142;
  unsigned __int16 *v143;
  unsigned int v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  char v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned __int16 *v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  int palette_cache;
  int v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  _DWORD *v189;
  unsigned __int16 *v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  _DWORD *v194;
  uint64_t v195;
  unsigned __int16 *v196;
  uint64_t v198;
  uint16x4_t *v199;
  uint32x4_t *v200;
  uint64_t v201;
  uint16x8_t v202;
  uint32x4_t v203;
  uint32x4_t v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned __int8 *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  int v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  unsigned __int16 *v219;
  unsigned int v220;
  char v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  unsigned __int16 *v226;
  unsigned int v227;
  int v228;
  unint64_t v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  int palette_delta_bits_v;
  unint64_t v248;
  unsigned int v249;
  int v250;
  int v251;
  char v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  BOOL v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  _BOOL4 v263;
  unsigned __int16 *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  int v273;
  unsigned int v274;
  BOOL v275;
  uint64_t v276;
  unsigned int v277;
  _BOOL4 v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  BOOL v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t i;
  int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  int v292;
  unsigned int v293;
  BOOL v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  unsigned __int16 *v298;
  uint64_t v299;
  unsigned int v300;
  unint64_t v301;
  unsigned int v302;
  unsigned int v303;
  int v304;
  int v305;
  unsigned int v306;
  int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  uint64_t v324;
  int v325;
  int v326;
  int v327;
  unsigned int v328;
  uint64_t v329;
  unint64_t v330;
  int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  int v335;
  unsigned __int16 *v336;
  _DWORD *v337;
  _DWORD *v338;
  uint64_t v339;
  unsigned int v340;
  _DWORD v341[4];
  unsigned int v342[8];
  uint32x4_t v343;
  _OWORD v344[2];
  uint64_t v345;

  v345 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned __int16 **)(a2 + 10648);
  v8 = *(unsigned __int8 ***)(a2 + 7864);
  v9 = *v8;
  v10 = (*v8)[2];
  v11 = **v8;
  if (!a3)
  {
    v14 = &v7[14 * size_group_lookup_0[v11] + 6363];
    v15 = (_DWORD *)(a4 + 16);
    if ((*v8)[2])
      goto LABEL_7;
LABEL_11:
    v16 = *v14;
    v17 = *(_QWORD *)(a4 + 32);
    v18 = *(unsigned __int16 *)(a4 + 40);
    v19 = v18 >> 8;
LABEL_12:
    result = od_ec_enc_normalize(v15, v17, v18 + 4 * v10 - (((v16 >> 6) * v19) >> 1) - 48);
    if (!*(_BYTE *)(a4 + 48))
      goto LABEL_41;
    goto LABEL_13;
  }
  v12 = *(_QWORD *)(a2 + 7888);
  v13 = *(_QWORD *)(a2 + 7880);
  if (v12)
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 2);
  if (v13)
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 2);
  v14 = &v7[70 * intra_mode_context[v12] + 7093 + 14 * intra_mode_context[v13]];
  v15 = (_DWORD *)(a4 + 16);
  if (!(_DWORD)v10)
    goto LABEL_11;
LABEL_7:
  v16 = v14[v10];
  v17 = *(_QWORD *)(a4 + 32);
  v18 = *(unsigned __int16 *)(a4 + 40);
  v19 = v18 >> 8;
  if ((__int16)v14[(v10 - 1)] < 0)
    goto LABEL_12;
  v20 = ((v19 * (v14[(v10 - 1)] >> 6)) >> 1) - 4 * v10 + 52;
  result = od_ec_enc_normalize(v15, v17 + v18 - v20, 4 * v10 - ((v19 * (v16 >> 6)) >> 1) + v20 - 48);
  if (!*(_BYTE *)(a4 + 48))
    goto LABEL_41;
LABEL_13:
  v22 = v14 + 13;
  v23 = v14[13];
  v24 = (v23 >> 4) + 5;
  v25 = *v14;
  if ((char)v10 <= 0)
  {
    *v14 = v25 - (v25 >> v24);
    v26 = v14[1];
    goto LABEL_27;
  }
  *v14 = v25 + ((int)(0x8000 - v25) >> v24);
  v26 = v14[1];
  if ((_DWORD)v10 == 1)
  {
LABEL_27:
    v14[1] = v26 - (v26 >> v24);
    v27 = v14[2];
    goto LABEL_28;
  }
  v14[1] = v26 + ((int)(0x8000 - v26) >> v24);
  v27 = v14[2];
  if (v10 <= 2)
  {
LABEL_28:
    v14[2] = v27 - (v27 >> v24);
    v28 = v14[3];
    goto LABEL_29;
  }
  v14[2] = v27 + ((int)(0x8000 - v27) >> v24);
  v28 = v14[3];
  if ((_DWORD)v10 == 3)
  {
LABEL_29:
    v14[3] = v28 - (v28 >> v24);
    v29 = v14[4];
    goto LABEL_30;
  }
  v14[3] = v28 + ((int)(0x8000 - v28) >> v24);
  v29 = v14[4];
  if (v10 <= 4)
  {
LABEL_30:
    v14[4] = v29 - (v29 >> v24);
    v30 = v14[5];
    goto LABEL_31;
  }
  v14[4] = v29 + ((int)(0x8000 - v29) >> v24);
  v30 = v14[5];
  if ((_DWORD)v10 == 5)
  {
LABEL_31:
    v14[5] = v30 - (v30 >> v24);
    v31 = v14[6];
    goto LABEL_32;
  }
  v14[5] = v30 + ((int)(0x8000 - v30) >> v24);
  v31 = v14[6];
  if (v10 <= 6)
  {
LABEL_32:
    v14[6] = v31 - (v31 >> v24);
    v32 = v14[7];
    goto LABEL_33;
  }
  v14[6] = v31 + ((int)(0x8000 - v31) >> v24);
  v32 = v14[7];
  if ((_DWORD)v10 == 7)
  {
LABEL_33:
    v14[7] = v32 - (v32 >> v24);
    v33 = v14[8];
    goto LABEL_34;
  }
  v14[7] = v32 + ((int)(0x8000 - v32) >> v24);
  v33 = v14[8];
  if (v10 <= 8)
  {
LABEL_34:
    v14[8] = v33 - (v33 >> v24);
    v34 = v14[9];
    goto LABEL_35;
  }
  v14[8] = v33 + ((int)(0x8000 - v33) >> v24);
  v34 = v14[9];
  if ((_DWORD)v10 == 9)
  {
LABEL_35:
    v14[9] = v34 - (v34 >> v24);
    v35 = v14[10];
    goto LABEL_36;
  }
  v14[9] = v34 + ((int)(0x8000 - v34) >> v24);
  v35 = v14[10];
  if (v10 <= 0xA)
  {
LABEL_36:
    v41 = v35 - (v35 >> v24);
    v42 = v14[11];
    v38 = v14 + 11;
    v37 = v42;
    *(v38 - 1) = v41;
    goto LABEL_37;
  }
  v36 = v35 + ((int)(0x8000 - v35) >> v24);
  v39 = v14[11];
  v38 = v14 + 11;
  v37 = v39;
  *(v38 - 1) = v36;
  if ((_DWORD)v10 == 11)
  {
LABEL_37:
    v40 = v37 - (v37 >> v24);
    goto LABEL_38;
  }
  v40 = v37 + ((int)(0x8000 - v37) >> v24);
LABEL_38:
  *v38 = v40;
  if (v23 < 0x20)
    LOWORD(v23) = v23 + 1;
  *v22 = v23;
LABEL_41:
  v43 = v11 >= 3 && (v10 - 9) >= 0xFFFFFFF8;
  if (v43)
    result = write_angle_delta(a4, (char)v9[88], &v7[8 * v10 + 7435]);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 77) && *(_BYTE *)(a2 + 12))
  {
    v44 = v9[3];
    v45 = **(unsigned __int8 ***)(a2 + 7864);
    v46 = *v45;
    if (*(_DWORD *)(a2 + 4 * (*(_WORD *)(v45 + 167) & 7) + 10692))
      LOBYTE(v46) = av1_ss_size_lookup[4 * v46 + 2 * *(int *)(a2 + 2628) + *(int *)(a2 + 2632)] == 0;
    else
      v46 = 0xF03FFuLL >> v46;
    v69 = &v7[195 * (v46 & 1) + 6419 + 15 * v10];
    if ((v46 & 1) != 0)
      v70 = 14;
    else
      v70 = 13;
    v338 = (_DWORD *)(a4 + 16);
    if ((_BYTE)v44)
    {
      v71 = v69[v9[3]];
      v72 = *(_QWORD *)(a4 + 32);
      v73 = *(unsigned __int16 *)(a4 + 40);
      v74 = v70 - 1;
      v75 = v73 >> 8;
      if (((__int16)v69[(v44 - 1)] & 0x80000000) == 0)
      {
        v76 = ((v75 * (v69[(v44 - 1)] >> 6)) >> 1) + 4 * (v70 - v44);
        result = od_ec_enc_normalize(v338, v72 + v73 - v76, v76 - ((v75 * (v71 >> 6)) >> 1) + 4 * (v44 - v74));
        if (!*(_BYTE *)(a4 + 48))
          goto LABEL_90;
        goto LABEL_83;
      }
    }
    else
    {
      v71 = *v69;
      v72 = *(_QWORD *)(a4 + 32);
      v73 = *(unsigned __int16 *)(a4 + 40);
      v74 = v70 - 1;
      v75 = v73 >> 8;
    }
    result = od_ec_enc_normalize(v338, v72, v73 + 4 * (v44 - v74) - (((v71 >> 6) * v75) >> 1));
    if (!*(_BYTE *)(a4 + 48))
      goto LABEL_90;
LABEL_83:
    v77 = 0;
    v78 = v69[v70];
    v79 = (v78 >> 4) + 5;
    do
    {
      v80 = v69[v77];
      v81 = v80 - (v80 >> v79);
      v82 = v80 + ((int)(0x8000 - v80) >> v79);
      if (v77 >= (char)v44)
        LOWORD(v82) = v81;
      v69[v77++] = v82;
    }
    while ((_DWORD)v70 - 1 != v77);
    v43 = v78 >= 0x20;
    v83 = v69[v70];
    if (!v43)
      ++v83;
    v69[v70] = v83;
LABEL_90:
    if ((_DWORD)v44 != 13)
      goto LABEL_399;
    v84 = v7 + 10509;
    v85 = v9[93];
    v86 = (char)v9[92];
    if ((int)v86 <= 0)
    {
      v87 = (unsigned __int16)v84[(char)v9[92]];
      v88 = *(_QWORD *)(a4 + 32);
      v89 = *(unsigned __int16 *)(a4 + 40);
      v90 = v89 >> 8;
    }
    else
    {
      v87 = (unsigned __int16)v84[v86];
      v88 = *(_QWORD *)(a4 + 32);
      v89 = *(unsigned __int16 *)(a4 + 40);
      v90 = v89 >> 8;
      if (((__int16)v84[(v86 - 1)] & 0x80000000) == 0)
      {
        v91 = ((v90 * ((unsigned __int16)v84[(v86 - 1)] >> 6)) >> 1) - 4 * v86 + 32;
        v88 += v89 - v91;
        v92 = 4 * v86 - ((v90 * (v87 >> 6)) >> 1) + v91;
        goto LABEL_96;
      }
    }
    v92 = v89 + 4 * v86 - (((v87 >> 6) * v90) >> 1);
LABEL_96:
    result = od_ec_enc_normalize(v338, v88, v92 - 28);
    if (!*(_BYTE *)(a4 + 48))
      goto LABEL_115;
    v93 = v7[10517];
    v94 = (v93 >> 4) + 5;
    v95 = v86 << 56;
    v96 = (unsigned __int16)*v84;
    if (v86 << 56 <= 0)
    {
      *v84 = v96 - (v96 >> v94);
      v97 = v7[10510];
    }
    else
    {
      *v84 = v96 + ((int)(0x8000 - v96) >> v94);
      v97 = v7[10510];
      if (v95 > 0x100000000000000)
      {
        v7[10510] = v97 + ((int)(0x8000 - v97) >> v94);
        v98 = v7[10511];
        if (v95 > 0x200000000000000)
        {
          v7[10511] = v98 + ((int)(0x8000 - v98) >> v94);
          v99 = v7[10512];
          if (v95 > 0x300000000000000)
          {
            v7[10512] = v99 + ((int)(0x8000 - v99) >> v94);
            v100 = v7[10513];
            if (v95 > 0x400000000000000)
            {
              v7[10513] = v100 + ((int)(0x8000 - v100) >> v94);
              v101 = v7[10514];
              if (v95 > 0x500000000000000)
              {
                v7[10514] = v101 + ((int)(0x8000 - v101) >> v94);
                v102 = v7[10515];
                if (v95 > 0x600000000000000)
                {
                  v103 = v102 + ((int)(0x8000 - v102) >> v94);
LABEL_112:
                  v7[10515] = v103;
                  if (v93 < 0x20)
                    LOWORD(v93) = v93 + 1;
                  v7[10517] = v93;
LABEL_115:
                  v104 = v86 + 1;
                  v105 = 11 * (v86 + 1);
                  v106 = v105 >> 5;
                  if (v105 < 0x20)
                    goto LABEL_358;
                  v107 = &v7[17 * (int)v86 + 10484];
                  v108 = v85 >> 4;
                  v330 = v85 >> 4;
                  v334 = v85;
                  if (v85 > 0xF)
                  {
                    v113 = (__int16)v107[(v108 - 1)];
                    v109 = v107[v108];
                    v110 = *(_QWORD *)(a4 + 32);
                    v111 = *(unsigned __int16 *)(a4 + 40);
                    v112 = v111 >> 8;
                    if ((v113 & 0x80000000) == 0)
                    {
                      LODWORD(v85) = v106;
                      v114 = 4 * v108;
                      v115 = ((v112 * ((unsigned __int16)v113 >> 6)) >> 1) - v114 + 64;
                      v110 += v111 - v115;
                      v116 = v114 - ((v112 * (v109 >> 6)) >> 1) + v115;
                      goto LABEL_121;
                    }
                  }
                  else
                  {
                    v109 = v107[v108];
                    v110 = *(_QWORD *)(a4 + 32);
                    v111 = *(unsigned __int16 *)(a4 + 40);
                    v112 = v111 >> 8;
                  }
                  LODWORD(v85) = v106;
                  v116 = v111 + 4 * v108 - (((v109 >> 6) * v112) >> 1);
LABEL_121:
                  result = od_ec_enc_normalize(v338, v110, v116 - 60);
                  v106 = v85;
                  LOBYTE(v85) = v334;
                  if (!*(_BYTE *)(a4 + 48))
                    goto LABEL_358;
                  v117 = v107[16];
                  v118 = (v117 >> 4) + 5;
                  v119 = *v107;
                  if (v334 > 0xF)
                  {
                    *v107 = v119 + ((int)(0x8000 - v119) >> v118);
                    v120 = v107[1];
                    if (v334 > 0x1F)
                    {
                      v107[1] = v120 + ((int)(0x8000 - v120) >> v118);
                      v121 = v107[2];
                      if (v334 > 0x2F)
                      {
                        v107[2] = v121 + ((int)(0x8000 - v121) >> v118);
                        v122 = v107[3];
                        if (v334 > 0x3F)
                        {
                          v107[3] = v122 + ((int)(0x8000 - v122) >> v118);
                          v123 = v107[4];
                          if (v334 > 0x4F)
                          {
                            v107[4] = v123 + ((int)(0x8000 - v123) >> v118);
                            v124 = v107[5];
                            if (v334 > 0x5F)
                            {
                              v107[5] = v124 + ((int)(0x8000 - v124) >> v118);
                              v125 = v107[6];
                              if (v334 > 0x6F)
                              {
                                v107[6] = v125 + ((int)(0x8000 - v125) >> v118);
                                v126 = v107[7];
                                if ((v334 & 0x80) != 0)
                                {
                                  v107[7] = v126 + ((int)(0x8000 - v126) >> v118);
                                  v128 = v107[8];
                                  if (v334 > 0x8F)
                                  {
                                    v107[8] = v128 + ((int)(0x8000 - v128) >> v118);
                                    v129 = v107[9];
                                    if (v334 > 0x9F)
                                    {
                                      v107[9] = v129 + ((int)(0x8000 - v129) >> v118);
                                      v130 = v107[10];
                                      if (v334 > 0xAF)
                                      {
                                        v107[10] = v130 + ((int)(0x8000 - v130) >> v118);
                                        v131 = v107[11];
                                        if (v334 > 0xBF)
                                        {
                                          v107[11] = v131 + ((int)(0x8000 - v131) >> v118);
                                          v132 = v107[12];
                                          if (v334 > 0xCF)
                                          {
                                            v107[12] = v132 + ((int)(0x8000 - v132) >> v118);
                                            v297 = v107[13];
                                            if (v334 <= 0xDF)
                                            {
                                              LOBYTE(v85) = v334;
                                              v107[13] = v297 - (v297 >> v118);
                                              v133 = v107[14];
                                              if ((_DWORD)v330 == 15)
                                                goto LABEL_144;
                                            }
                                            else
                                            {
                                              LOBYTE(v85) = v334;
                                              v107[13] = v297 + ((int)(0x8000 - v297) >> v118);
                                              v133 = v107[14];
                                              if ((_DWORD)v330 == 15)
                                                goto LABEL_144;
                                            }
                                            goto LABEL_354;
                                          }
                                          v127 = v330;
                                          LOBYTE(v85) = v334;
LABEL_143:
                                          v107[12] = v132 - (v132 >> v118);
                                          v107[13] -= v107[13] >> v118;
                                          v133 = v107[14];
                                          if (v127 == 15)
                                          {
LABEL_144:
                                            v134 = v133 + ((int)(0x8000 - v133) >> v118);
LABEL_355:
                                            v107[14] = v134;
                                            if (v117 < 0x20)
                                              LOWORD(v117) = v117 + 1;
                                            v107[16] = v117;
LABEL_358:
                                            if (!(-3 * v106 + v104))
                                              goto LABEL_399;
                                            v298 = &v7[51 * v104 + 10467 + 17 * v106 + -153 * v106];
                                            v299 = v85 & 0xF;
                                            if ((v85 & 0xF) != 0)
                                            {
                                              v300 = v298[v299];
                                              v301 = *(_QWORD *)(a4 + 32);
                                              v302 = *(unsigned __int16 *)(a4 + 40);
                                              v303 = v302 >> 8;
                                              if (((__int16)v298[(v299 - 1)] & 0x80000000) == 0)
                                              {
                                                v304 = ((v303 * (v298[(v299 - 1)] >> 6)) >> 1)
                                                     - 4 * v299
                                                     + 64;
                                                v301 += v302 - v304;
                                                v305 = 4 * v299 - ((v303 * (v300 >> 6)) >> 1) + v304;
                                                goto LABEL_364;
                                              }
                                            }
                                            else
                                            {
                                              v300 = *v298;
                                              v301 = *(_QWORD *)(a4 + 32);
                                              v302 = *(unsigned __int16 *)(a4 + 40);
                                              v303 = v302 >> 8;
                                            }
                                            v305 = v302 + 4 * v299 - (((v300 >> 6) * v303) >> 1);
LABEL_364:
                                            result = od_ec_enc_normalize(v338, v301, v305 - 60);
                                            if (*(_BYTE *)(a4 + 48))
                                            {
                                              v306 = v298[16];
                                              v307 = (v306 >> 4) + 5;
                                              v308 = *v298;
                                              if ((v85 & 0xF) != 0)
                                              {
                                                *v298 = v308 + ((int)(0x8000 - v308) >> v307);
                                                v309 = v298[1];
                                                if ((_DWORD)v299 != 1)
                                                {
                                                  v298[1] = v309 + ((int)(0x8000 - v309) >> v307);
                                                  v310 = v298[2];
                                                  if (v299 > 2)
                                                  {
                                                    v298[2] = v310 + ((int)(0x8000 - v310) >> v307);
                                                    v311 = v298[3];
                                                    if ((_DWORD)v299 != 3)
                                                    {
                                                      v298[3] = v311 + ((int)(0x8000 - v311) >> v307);
                                                      v312 = v298[4];
                                                      if (v299 > 4)
                                                      {
                                                        v298[4] = v312 + ((int)(0x8000 - v312) >> v307);
                                                        v313 = v298[5];
                                                        if ((_DWORD)v299 != 5)
                                                        {
                                                          v298[5] = v313 + ((int)(0x8000 - v313) >> v307);
                                                          v314 = v298[6];
                                                          if (v299 > 6)
                                                          {
                                                            v298[6] = v314 + ((int)(0x8000 - v314) >> v307);
                                                            v315 = v298[7];
                                                            if ((_DWORD)v299 != 7)
                                                            {
                                                              v298[7] = v315 + ((int)(0x8000 - v315) >> v307);
                                                              v316 = v298[8];
                                                              if (v299 > 8)
                                                              {
                                                                v298[8] = v316 + ((int)(0x8000 - v316) >> v307);
                                                                v317 = v298[9];
                                                                if ((_DWORD)v299 != 9)
                                                                {
                                                                  v298[9] = v317 + ((int)(0x8000 - v317) >> v307);
                                                                  v318 = v298[10];
                                                                  if (v299 > 0xA)
                                                                  {
                                                                    v298[10] = v318 + ((int)(0x8000 - v318) >> v307);
                                                                    v319 = v298[11];
                                                                    if ((_DWORD)v299 != 11)
                                                                    {
                                                                      v298[11] = v319 + ((int)(0x8000 - v319) >> v307);
                                                                      v320 = v298[12];
                                                                      if (v299 > 0xC)
                                                                      {
                                                                        v298[12] = v320 + ((int)(0x8000 - v320) >> v307);
                                                                        v321 = v298[13];
                                                                        if ((_DWORD)v299 != 13)
                                                                        {
                                                                          v298[13] = v321
                                                                                   + ((int)(0x8000 - v321) >> v307);
                                                                          v322 = v298[14];
                                                                          if ((_DWORD)v299 == 15)
                                                                          {
                                                                            v323 = v322 + ((int)(0x8000 - v322) >> v307);
LABEL_396:
                                                                            v298[14] = v323;
                                                                            if (v306 < 0x20)
                                                                              LOWORD(v306) = v306 + 1;
                                                                            v298[16] = v306;
                                                                            goto LABEL_399;
                                                                          }
LABEL_395:
                                                                          v323 = v322 - (v322 >> v307);
                                                                          goto LABEL_396;
                                                                        }
LABEL_394:
                                                                        v298[13] = v321 - (v321 >> v307);
                                                                        v322 = v298[14];
                                                                        goto LABEL_395;
                                                                      }
LABEL_393:
                                                                      v298[12] = v320 - (v320 >> v307);
                                                                      v321 = v298[13];
                                                                      goto LABEL_394;
                                                                    }
LABEL_392:
                                                                    v298[11] = v319 - (v319 >> v307);
                                                                    v320 = v298[12];
                                                                    goto LABEL_393;
                                                                  }
LABEL_391:
                                                                  v298[10] = v318 - (v318 >> v307);
                                                                  v319 = v298[11];
                                                                  goto LABEL_392;
                                                                }
LABEL_390:
                                                                v298[9] = v317 - (v317 >> v307);
                                                                v318 = v298[10];
                                                                goto LABEL_391;
                                                              }
LABEL_389:
                                                              v298[8] = v316 - (v316 >> v307);
                                                              v317 = v298[9];
                                                              goto LABEL_390;
                                                            }
LABEL_388:
                                                            v298[7] = v315 - (v315 >> v307);
                                                            v316 = v298[8];
                                                            goto LABEL_389;
                                                          }
LABEL_387:
                                                          v298[6] = v314 - (v314 >> v307);
                                                          v315 = v298[7];
                                                          goto LABEL_388;
                                                        }
LABEL_386:
                                                        v298[5] = v313 - (v313 >> v307);
                                                        v314 = v298[6];
                                                        goto LABEL_387;
                                                      }
LABEL_385:
                                                      v298[4] = v312 - (v312 >> v307);
                                                      v313 = v298[5];
                                                      goto LABEL_386;
                                                    }
LABEL_384:
                                                    v298[3] = v311 - (v311 >> v307);
                                                    v312 = v298[4];
                                                    goto LABEL_385;
                                                  }
LABEL_383:
                                                  v298[2] = v310 - (v310 >> v307);
                                                  v311 = v298[3];
                                                  goto LABEL_384;
                                                }
                                              }
                                              else
                                              {
                                                *v298 = v308 - (v308 >> v307);
                                                v309 = v298[1];
                                              }
                                              v298[1] = v309 - (v309 >> v307);
                                              v310 = v298[2];
                                              goto LABEL_383;
                                            }
LABEL_399:
                                            if (v11 >= 3)
                                            {
                                              v324 = get_uv_mode_uv2y[v44];
                                              if ((v324 - 9) >= 0xFFFFFFF8)
                                                result = write_angle_delta(a4, (char)v9[89], &v7[8 * v324 + 7435]);
                                            }
                                            goto LABEL_48;
                                          }
LABEL_354:
                                          v134 = v133 - (v133 >> v118);
                                          goto LABEL_355;
                                        }
                                        v127 = v330;
                                        LOBYTE(v85) = v334;
LABEL_142:
                                        v107[11] = v131 - (v131 >> v118);
                                        v132 = v107[12];
                                        goto LABEL_143;
                                      }
                                      v127 = v330;
                                      LOBYTE(v85) = v334;
LABEL_141:
                                      v107[10] = v130 - (v130 >> v118);
                                      v131 = v107[11];
                                      goto LABEL_142;
                                    }
                                    v127 = v330;
                                    LOBYTE(v85) = v334;
LABEL_140:
                                    v107[9] = v129 - (v129 >> v118);
                                    v130 = v107[10];
                                    goto LABEL_141;
                                  }
                                  v127 = v330;
LABEL_139:
                                  v107[8] = v128 - (v128 >> v118);
                                  v129 = v107[9];
                                  goto LABEL_140;
                                }
                                v127 = v330;
LABEL_138:
                                v107[7] = v126 - (v126 >> v118);
                                v128 = v107[8];
                                goto LABEL_139;
                              }
                              v127 = v330;
LABEL_137:
                              v107[6] = v125 - (v125 >> v118);
                              v126 = v107[7];
                              goto LABEL_138;
                            }
                            v127 = v330;
LABEL_136:
                            v107[5] = v124 - (v124 >> v118);
                            v125 = v107[6];
                            goto LABEL_137;
                          }
                          v127 = v330;
LABEL_135:
                          v107[4] = v123 - (v123 >> v118);
                          v124 = v107[5];
                          goto LABEL_136;
                        }
                        v127 = v330;
LABEL_134:
                        v107[3] = v122 - (v122 >> v118);
                        v123 = v107[4];
                        goto LABEL_135;
                      }
                      v127 = v330;
LABEL_133:
                      v107[2] = v121 - (v121 >> v118);
                      v122 = v107[3];
                      goto LABEL_134;
                    }
                  }
                  else
                  {
                    *v107 = v119 - (v119 >> v118);
                    v120 = v107[1];
                  }
                  v127 = v330;
                  v107[1] = v120 - (v120 >> v118);
                  v121 = v107[2];
                  goto LABEL_133;
                }
LABEL_111:
                v103 = v102 - (v102 >> v94);
                goto LABEL_112;
              }
LABEL_110:
              v7[10514] = v101 - (v101 >> v94);
              v102 = v7[10515];
              goto LABEL_111;
            }
LABEL_109:
            v7[10513] = v100 - (v100 >> v94);
            v101 = v7[10514];
            goto LABEL_110;
          }
LABEL_108:
          v7[10512] = v99 - (v99 >> v94);
          v100 = v7[10513];
          goto LABEL_109;
        }
LABEL_107:
        v7[10511] = v98 - (v98 >> v94);
        v99 = v7[10512];
        goto LABEL_108;
      }
    }
    v7[10510] = v97 - (v97 >> v94);
    v98 = v7[10511];
    goto LABEL_107;
  }
LABEL_48:
  if (!*(_BYTE *)(a1 + 495) || v11 <= 0xF && ((1 << v11) & 0xE007) != 0)
    goto LABEL_51;
  v56 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24680) + 77);
  v57 = (uint64_t)(v9 + 94);
  v58 = num_pels_log2_lookup_3[*v9] - 6;
  if (v9[2])
    goto LABEL_248;
  v59 = v9[142];
  v60 = *(_QWORD *)(a2 + 7880);
  v61 = *(_QWORD *)(a2 + 7888);
  if (v61)
    LODWORD(v61) = *(unsigned __int8 *)(v61 + 142) != 0;
  if (v60 && *(_BYTE *)(v60 + 142))
    LODWORD(v61) = v61 + 1;
  v62 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 18 * (int)v58 + 6 * v61 + 11204);
  v337 = (_DWORD *)(a4 + 16);
  v63 = *v62;
  if (v9[142])
  {
    v64 = *(_QWORD *)(a4 + 32);
    v65 = *(unsigned __int16 *)(a4 + 40);
    v66 = v65 >> 8;
    if ((v63 & 0x8000) == 0)
    {
      v67 = ((v66 * (v63 >> 6)) >> 1) + 4;
      v64 += v65 - v67;
      v68 = v67 - ((v66 * (v62[1] >> 6)) >> 1);
      goto LABEL_173;
    }
    v63 = v62[1];
  }
  else
  {
    v64 = *(_QWORD *)(a4 + 32);
    v65 = *(unsigned __int16 *)(a4 + 40);
    v66 = v65 >> 8;
  }
  v157 = (v63 >> 6) * v66;
  if (v9[142])
    v158 = 0;
  else
    v158 = -1;
  v68 = v65 + 4 * v158 - (v157 >> 1);
LABEL_173:
  result = od_ec_enc_normalize(v337, v64, v68);
  if (*(_BYTE *)(a4 + 48))
  {
    v159 = v62[2];
    v160 = (v159 >> 4) + 4;
    v161 = *v62;
    v162 = v161 - (v161 >> v160);
    v163 = v161 + ((int)(0x8000 - v161) >> v160);
    if (!v59)
      LOWORD(v163) = v162;
    *v62 = v163;
    if (v159 < 0x20)
      LOWORD(v159) = v159 + 1;
    v62[2] = v159;
  }
  if (v59)
  {
    v331 = v58;
    v164 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 16 * v58 + 9720);
    v165 = v59 - 2;
    if (v59 <= 2)
    {
      v166 = v164[(int)v165];
      v167 = *(_QWORD *)(a4 + 32);
      v168 = *(unsigned __int16 *)(a4 + 40);
      v169 = v168 >> 8;
    }
    else
    {
      v166 = v164[v165];
      v167 = *(_QWORD *)(a4 + 32);
      v168 = *(unsigned __int16 *)(a4 + 40);
      v169 = v168 >> 8;
      if (((__int16)v164[v59 - 3] & 0x80000000) == 0)
      {
        v170 = ((v169 * (v164[v59 - 3] >> 6)) >> 1) - 4 * v59 + 36;
        v167 += v168 - v170;
        v171 = 4 * v59 - ((v169 * (v166 >> 6)) >> 1) + v170;
        goto LABEL_185;
      }
    }
    v171 = v168 + 4 * v59 - (((v166 >> 6) * v169) >> 1);
LABEL_185:
    od_ec_enc_normalize(v337, v167, v171 - 32);
    if (!*(_BYTE *)(a4 + 48))
      goto LABEL_209;
    v172 = v164[7];
    v173 = (v172 >> 4) + 5;
    v174 = v165 << 56;
    v175 = *v164;
    if (v165 << 56 <= 0)
    {
      *v164 = v175 - (v175 >> v173);
      v176 = v164[1];
    }
    else
    {
      *v164 = v175 + ((int)(0x8000 - v175) >> v173);
      v176 = v164[1];
      if (v174 > 0x100000000000000)
      {
        v164[1] = v176 + ((int)(0x8000 - v176) >> v173);
        v177 = v164[2];
        if (v174 > 0x200000000000000)
        {
          v164[2] = v177 + ((int)(0x8000 - v177) >> v173);
          v178 = v164[3];
          if (v174 > 0x300000000000000)
          {
            v164[3] = v178 + ((int)(0x8000 - v178) >> v173);
            v179 = v164[4];
            if (v174 > 0x400000000000000)
            {
              v164[4] = v179 + ((int)(0x8000 - v179) >> v173);
              v180 = v164[5];
              if (v174 > 0x500000000000000)
              {
                v181 = v180 + ((int)(0x8000 - v180) >> v173);
LABEL_206:
                v164[5] = v181;
                if (v172 < 0x20)
                  LOWORD(v172) = v172 + 1;
                v164[7] = v172;
LABEL_209:
                v182 = *(_DWORD *)(*(_QWORD *)(a1 + 24680) + 72);
                v183 = v9[142];
                palette_cache = av1_get_palette_cache(a2, 0, (uint64_t)&v343);
                v335 = v182;
                if (palette_cache > 0)
                {
                  v185 = palette_cache;
                  v186 = palette_cache;
                  __memset_chk();
                  memset(v344, 0, sizeof(v344));
                  if ((_DWORD)v183)
                  {
                    v187 = 0;
                    v188 = 0;
                    palette_cache = v185;
                    do
                    {
                      v189 = v344;
                      v190 = (unsigned __int16 *)(v9 + 94);
                      v191 = v183;
                      while (1)
                      {
                        v192 = *v190++;
                        if (v192 == v343.u16[v187])
                          break;
                        ++v189;
                        if (!--v191)
                          goto LABEL_217;
                      }
                      *v189 = 1;
                      *((_BYTE *)v341 + v187) = 1;
                      ++v188;
LABEL_217:
                      ++v187;
                    }
                    while (v187 < v186 && v188 < (int)v183);
                    v193 = 0;
                    v194 = v344;
                    v195 = v183;
                    v196 = (unsigned __int16 *)(v9 + 94);
                    do
                    {
                      if (!*v194++)
                        v342[v193++] = *v196;
                      ++v196;
                      --v195;
                    }
                    while (v195);
                  }
                  else
                  {
                    v193 = 0;
                    palette_cache = v185;
                  }
                  goto LABEL_235;
                }
                if (!(_DWORD)v183)
                {
                  v193 = 0;
LABEL_247:
                  result = delta_encode_palette_colors(v342, v193, v182, 1, a4);
                  LODWORD(v58) = v331;
                  goto LABEL_248;
                }
                if (v183 >= 0x10)
                {
                  v198 = v183 & 0xF0;
                  v199 = (uint16x4_t *)(v9 + 110);
                  v200 = &v343;
                  v201 = v198;
                  do
                  {
                    v202 = *(uint16x8_t *)v199[-2].i8;
                    v203 = vmovl_u16(*v199);
                    v204 = vmovl_high_u16(*(uint16x8_t *)v199->i8);
                    v200[-2] = vmovl_u16(*(uint16x4_t *)v202.i8);
                    v200[-1] = vmovl_high_u16(v202);
                    *v200 = v203;
                    v200[1] = v204;
                    v200 += 4;
                    v199 += 4;
                    v201 -= 16;
                  }
                  while (v201);
                  if (v198 == v183)
                    goto LABEL_234;
                }
                else
                {
                  v198 = 0;
                }
                v205 = v183 - v198;
                v206 = &v342[v198];
                v207 = &v9[2 * v198 + 94];
                do
                {
                  v208 = *(unsigned __int16 *)v207;
                  v207 += 2;
                  *v206++ = v208;
                  --v205;
                }
                while (v205);
LABEL_234:
                v193 = v183;
LABEL_235:
                if (palette_cache >= 1 && (_DWORD)v183)
                {
                  v325 = v56;
                  v209 = 0;
                  v210 = 0;
                  v211 = palette_cache;
                  do
                  {
                    v212 = *((unsigned __int8 *)v341 + v209);
                    v213 = *(unsigned __int16 *)(a4 + 40);
                    v214 = (v213 >> 1) & 0x7F80 | 4;
                    v215 = v213 - v214;
                    if (*((_BYTE *)v341 + v209))
                      v216 = v215;
                    else
                      v216 = 0;
                    if (*((_BYTE *)v341 + v209))
                      v217 = v214;
                    else
                      v217 = v215;
                    od_ec_enc_normalize(v337, v216 + *(_QWORD *)(a4 + 32), v217);
                    if (++v209 >= v211)
                      break;
                    v210 += v212;
                  }
                  while (v210 < v183);
                  v57 = (uint64_t)(v9 + 94);
                  v56 = v325;
                  v182 = v335;
                }
                goto LABEL_247;
              }
LABEL_205:
              v181 = v180 - (v180 >> v173);
              goto LABEL_206;
            }
LABEL_204:
            v164[4] = v179 - (v179 >> v173);
            v180 = v164[5];
            goto LABEL_205;
          }
LABEL_203:
          v164[3] = v178 - (v178 >> v173);
          v179 = v164[4];
          goto LABEL_204;
        }
LABEL_202:
        v164[2] = v177 - (v177 >> v173);
        v178 = v164[3];
        goto LABEL_203;
      }
    }
    v164[1] = v176 - (v176 >> v173);
    v177 = v164[2];
    goto LABEL_202;
  }
LABEL_248:
  if (!v56 && !v9[3] && *(_BYTE *)(a2 + 12))
  {
    v218 = v9[143];
    v219 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * (v9[142] != 0) + 11330);
    result = od_ec_encode_cdf_q15(a4 + 16, v9[143] != 0, (uint64_t)v219, 2);
    if (*(_BYTE *)(a4 + 48))
    {
      v220 = v219[2];
      v221 = (v220 >> 4) + 4;
      v222 = *v219;
      v223 = v222 - (v222 >> v221);
      v224 = v222 + ((int)(0x8000 - v222) >> v221);
      if (!v218)
        LOWORD(v224) = v223;
      *v219 = v224;
      if (v220 < 0x20)
        LOWORD(v220) = v220 + 1;
      v219[2] = v220;
    }
    if (v218)
    {
      v225 = (v218 - 2);
      v226 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 16 * (int)v58 + 9832);
      od_ec_encode_cdf_q15(a4 + 16, v225, (uint64_t)v226, 7);
      if (!*(_BYTE *)(a4 + 48))
      {
LABEL_276:
        v329 = a1;
        v327 = *(_DWORD *)(*(_QWORD *)(a1 + 24680) + 72);
        v237 = v9[143];
        v336 = (unsigned __int16 *)(v9 + 126);
        v238 = av1_get_palette_cache(a2, 1, (uint64_t)v344);
        v339 = v237;
        v332 = av1_index_color_cache((uint64_t)v344, v238, (uint16x4_t *)(v9 + 110), v237, v342, &v343);
        if (v238 >= 1 && (_DWORD)v237)
        {
          v239 = 0;
          v240 = 0;
          do
          {
            v241 = *((unsigned __int8 *)v342 + v239);
            v242 = *(unsigned __int16 *)(a4 + 40);
            v243 = (v242 >> 1) & 0x7F80 | 4;
            v244 = v242 - v243;
            if (*((_BYTE *)v342 + v239))
              v245 = v244;
            else
              v245 = 0;
            if (*((_BYTE *)v342 + v239))
              v246 = v243;
            else
              v246 = v244;
            od_ec_enc_normalize((_DWORD *)(a4 + 16), v245 + *(_QWORD *)(a4 + 32), v246);
            if (++v239 >= (unint64_t)v238)
              break;
            v240 += v241;
          }
          while (v240 < v339);
        }
        delta_encode_palette_colors((unsigned int *)&v343, v332, v327, 0, a4);
        v340 = 0;
        v341[0] = 0;
        palette_delta_bits_v = av1_get_palette_delta_bits_v(v57, v327, v341, &v340);
        v248 = *(_QWORD *)(a4 + 32);
        v249 = *(unsigned __int16 *)(a4 + 40);
        v250 = (v249 >> 1) & 0x7F80;
        if (v327 - v341[0] + (int)v339 - 1 + ((int)v339 - 1) * palette_delta_bits_v + 2 >= v327 * (int)v339)
        {
          result = od_ec_enc_normalize((_DWORD *)(a4 + 16), v248, v249 - v250 - 4);
          if (v327 >= 1 && (_DWORD)v339)
          {
            for (i = 0; i != v339; ++i)
            {
              v288 = v336[i];
              v289 = v327 + 1;
              do
              {
                v290 = *(unsigned __int16 *)(a4 + 40);
                v291 = (v290 >> 1) & 0x7F80 | 4;
                v292 = 1 << (v289 - 2);
                v293 = v290 - v291;
                v294 = (v292 & v288) == 0;
                if ((v292 & v288) != 0)
                  v295 = v293;
                else
                  v295 = 0;
                if (v294)
                  v296 = v293;
                else
                  v296 = v291;
                result = od_ec_enc_normalize((_DWORD *)(a4 + 16), *(_QWORD *)(a4 + 32) + v295, v296);
                --v289;
              }
              while (v289 > 1);
            }
          }
        }
        else
        {
          v251 = palette_delta_bits_v;
          od_ec_enc_normalize((_DWORD *)(a4 + 16), v248 + v249 - (v250 | 4), v250 | 4);
          v252 = v251 - v340;
          od_ec_encode_BOOL_q15(a4 + 16, ((v251 - v340) >> 1) & 1, 0x4000u);
          result = od_ec_encode_BOOL_q15(a4 + 16, v252 & 1, 0x4000u);
          if (v327 >= 1)
          {
            v253 = *v336;
            v254 = v327 + 1;
            do
            {
              v255 = *(unsigned __int16 *)(a4 + 40);
              v256 = (v255 >> 1) & 0x7F80 | 4;
              v257 = 1 << (v254 - 2);
              v258 = v255 - v256;
              v259 = (v257 & v253) == 0;
              if ((v257 & v253) != 0)
                v260 = v258;
              else
                v260 = 0;
              if (v259)
                v261 = v258;
              else
                v261 = v256;
              result = od_ec_enc_normalize((_DWORD *)(a4 + 16), *(_QWORD *)(a4 + 32) + v260, v261);
              --v254;
            }
            while (v254 > 1);
          }
          if (v339 >= 2)
          {
            v326 = 1 << v327;
            v328 = v251 + 1;
            v262 = 1;
            v333 = v251;
            do
            {
              v264 = &v336[v262];
              v265 = *v264;
              v266 = *(v264 - 1);
              if (v265 == v266)
              {
                if (v251 >= 1)
                {
                  v267 = v328;
                  do
                  {
                    result = od_ec_enc_normalize((_DWORD *)(a4 + 16), *(_QWORD *)(a4 + 32), *(unsigned __int16 *)(a4 + 40) - ((*(unsigned __int16 *)(a4 + 40) >> 1) & 0x7F80u) - 4);
                    --v267;
                  }
                  while (v267 > 1);
                }
              }
              else
              {
                v263 = v265 < v266;
                if ((int)(v265 - v266) >= 0)
                  v268 = v265 - v266;
                else
                  v268 = v266 - v265;
                v269 = v326 - v268;
                if (v268 <= v326 - v268)
                {
                  if (v333 >= 1)
                  {
                    v278 = v265 < v266;
                    v279 = v328;
                    do
                    {
                      v280 = *(unsigned __int16 *)(a4 + 40);
                      v281 = (v280 >> 1) & 0x7F80 | 4;
                      v282 = 1 << (v279 - 2);
                      v283 = v280 - v281;
                      v284 = (v282 & v268) == 0;
                      if ((v282 & v268) != 0)
                        v285 = v283;
                      else
                        v285 = 0;
                      if (v284)
                        v286 = v283;
                      else
                        v286 = v281;
                      od_ec_enc_normalize((_DWORD *)(a4 + 16), *(_QWORD *)(a4 + 32) + v285, v286);
                      --v279;
                    }
                    while (v279 > 1);
                    v263 = v278;
                  }
                }
                else
                {
                  if (v333 >= 1)
                  {
                    v270 = v328;
                    do
                    {
                      v271 = *(unsigned __int16 *)(a4 + 40);
                      v272 = (v271 >> 1) & 0x7F80 | 4;
                      v273 = 1 << (v270 - 2);
                      v274 = v271 - v272;
                      v275 = (v273 & v269) == 0;
                      if ((v273 & v269) != 0)
                        v276 = v274;
                      else
                        v276 = 0;
                      if (v275)
                        v277 = v274;
                      else
                        v277 = v272;
                      od_ec_enc_normalize((_DWORD *)(a4 + 16), *(_QWORD *)(a4 + 32) + v276, v277);
                      --v270;
                    }
                    while (v270 > 1);
                  }
                  v263 = v265 >= v266;
                }
                result = od_ec_encode_BOOL_q15(a4 + 16, v263, 0x4000u);
                v251 = v333;
              }
              ++v262;
            }
            while (v262 != v339);
          }
        }
        a1 = v329;
        goto LABEL_51;
      }
      v227 = v226[7];
      v228 = (v227 >> 4) + 5;
      v229 = v225 << 56;
      v230 = *v226;
      if (v225 << 56 <= 0)
      {
        *v226 = v230 - (v230 >> v228);
        v231 = v226[1];
      }
      else
      {
        *v226 = v230 + ((int)(0x8000 - v230) >> v228);
        v231 = v226[1];
        if (v229 > 0x100000000000000)
        {
          v226[1] = v231 + ((int)(0x8000 - v231) >> v228);
          v232 = v226[2];
          if (v229 > 0x200000000000000)
          {
            v226[2] = v232 + ((int)(0x8000 - v232) >> v228);
            v233 = v226[3];
            if (v229 > 0x300000000000000)
            {
              v226[3] = v233 + ((int)(0x8000 - v233) >> v228);
              v234 = v226[4];
              if (v229 > 0x400000000000000)
              {
                v226[4] = v234 + ((int)(0x8000 - v234) >> v228);
                v235 = v226[5];
                if (v229 > 0x500000000000000)
                {
                  v236 = v235 + ((int)(0x8000 - v235) >> v228);
LABEL_273:
                  v226[5] = v236;
                  if (v227 < 0x20)
                    LOWORD(v227) = v227 + 1;
                  v226[7] = v227;
                  goto LABEL_276;
                }
LABEL_272:
                v236 = v235 - (v235 >> v228);
                goto LABEL_273;
              }
LABEL_271:
              v226[4] = v234 - (v234 >> v228);
              v235 = v226[5];
              goto LABEL_272;
            }
LABEL_270:
            v226[3] = v233 - (v233 >> v228);
            v234 = v226[4];
            goto LABEL_271;
          }
LABEL_269:
          v226[2] = v232 - (v232 >> v228);
          v233 = v226[3];
          goto LABEL_270;
        }
      }
      v226[1] = v231 - (v231 >> v228);
      v232 = v226[2];
      goto LABEL_269;
    }
  }
LABEL_51:
  if (v9[2])
    return result;
  if (v9[142])
    return result;
  v47 = *v9;
  if (v47 == 255
    || !*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 60)
    || ((0x1F07FFuLL >> v47) & 1) == 0
    || ((0x2F0BFFuLL >> v47) & 1) == 0)
  {
    return result;
  }
  v48 = v9[91];
  v49 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * *v9 + 12562);
  if (v9[91])
  {
    v50 = v49[v9[91]];
    v51 = *(_QWORD *)(a4 + 32);
    v52 = *(unsigned __int16 *)(a4 + 40);
    v53 = v52 >> 8;
    if (((__int16)v49[v48 - 1] & 0x80000000) == 0)
    {
      v54 = ((v53 * (v49[v48 - 1] >> 6)) >> 1) - 4 * v48 + 8;
      v51 += v52 - v54;
      v55 = 4 * v48 - ((v53 * (v50 >> 6)) >> 1) + v54;
      goto LABEL_147;
    }
  }
  else
  {
    v50 = *v49;
    v51 = *(_QWORD *)(a4 + 32);
    v52 = *(unsigned __int16 *)(a4 + 40);
    v53 = v52 >> 8;
  }
  v55 = v52 + 4 * v48 - (((v50 >> 6) * v53) >> 1);
LABEL_147:
  result = od_ec_enc_normalize((_DWORD *)(a4 + 16), v51, v55 - 4);
  if (*(_BYTE *)(a4 + 48))
  {
    v135 = v49[2];
    v136 = (v135 >> 4) + 4;
    v137 = *v49;
    v138 = v137 - (v137 >> v136);
    v139 = v137 + ((int)(0x8000 - v137) >> v136);
    if ((char)v48 >= 1)
      v140 = v139;
    else
      v140 = v138;
    *v49 = v140;
    if (v135 >= 0x20)
      v141 = v135;
    else
      v141 = v135 + 1;
    v49[2] = v141;
  }
  if (v9[91])
  {
    v142 = v9[90];
    v143 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12694);
    if (v9[90])
    {
      v144 = v143[v142];
      v145 = *(_QWORD *)(a4 + 32);
      v146 = *(unsigned __int16 *)(a4 + 40);
      v147 = v146 >> 8;
      if (((__int16)v143[(v142 - 1)] & 0x80000000) == 0)
      {
        v148 = ((v147 * (v143[(v142 - 1)] >> 6)) >> 1) - 4 * v142 + 20;
        v145 += v146 - v148;
        v149 = 4 * v142 - ((v147 * (v144 >> 6)) >> 1) + v148;
        goto LABEL_162;
      }
    }
    else
    {
      v144 = *v143;
      v145 = *(_QWORD *)(a4 + 32);
      v146 = *(unsigned __int16 *)(a4 + 40);
      v147 = v146 >> 8;
    }
    v149 = v146 + 4 * v142 - (((v144 >> 6) * v147) >> 1);
LABEL_162:
    result = od_ec_enc_normalize((_DWORD *)(a4 + 16), v145, v149 - 16);
    if (!*(_BYTE *)(a4 + 48))
      return result;
    v150 = v143[5];
    v151 = (v150 >> 4) + 5;
    v152 = *v143;
    if ((char)v142 <= 0)
    {
      *v143 = v152 - (v152 >> v151);
      v153 = v143[1];
    }
    else
    {
      *v143 = v152 + ((int)(0x8000 - v152) >> v151);
      v153 = v143[1];
      if ((_DWORD)v142 != 1)
      {
        v143[1] = v153 + ((int)(0x8000 - v153) >> v151);
        v154 = v143[2];
        if (v142 > 2)
        {
          v143[2] = v154 + ((int)(0x8000 - v154) >> v151);
          v155 = v143[3];
          if ((_DWORD)v142 != 3)
          {
            v156 = v155 + ((int)(0x8000 - v155) >> v151);
LABEL_197:
            v143[3] = v156;
            if (v150 < 0x20)
              LOWORD(v150) = v150 + 1;
            v143[5] = v150;
            return result;
          }
LABEL_196:
          v156 = v155 - (v155 >> v151);
          goto LABEL_197;
        }
LABEL_195:
        v143[2] = v154 - (v154 >> v151);
        v155 = v143[3];
        goto LABEL_196;
      }
    }
    v143[1] = v153 - (v153 >> v151);
    v154 = v143[2];
    goto LABEL_195;
  }
  return result;
}

_DWORD *write_delta_lflevel(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  _DWORD *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *result;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;

  if (a3 >= 0)
    v7 = a3;
  else
    v7 = -a3;
  if (v7 >= 3)
    v8 = 3;
  else
    v8 = v7;
  if (a4)
  {
    v9 = (unsigned __int16 *)(a1 + 10 * a2 + 15120);
    v10 = (_DWORD *)(a5 + 16);
    if (v8)
      goto LABEL_9;
LABEL_13:
    v11 = *v9;
    v12 = *(_QWORD *)(a5 + 32);
    v13 = *(unsigned __int16 *)(a5 + 40);
    v14 = v13 >> 8;
    goto LABEL_14;
  }
  v9 = (unsigned __int16 *)(a1 + 15160);
  v10 = (_DWORD *)(a5 + 16);
  if (!v8)
    goto LABEL_13;
LABEL_9:
  v11 = v9[v8];
  v12 = *(_QWORD *)(a5 + 32);
  v13 = *(unsigned __int16 *)(a5 + 40);
  v14 = v13 >> 8;
  if (((__int16)v9[v8 - 1] & 0x80000000) == 0)
  {
    v15 = ((v14 * (v9[v8 - 1] >> 6)) >> 1) - 4 * v8 + 16;
    result = od_ec_enc_normalize(v10, v12 + v13 - v15, 4 * v8 - ((v14 * (v11 >> 6)) >> 1) + v15 - 12);
    if (!*(_BYTE *)(a5 + 48))
      goto LABEL_25;
    goto LABEL_15;
  }
LABEL_14:
  result = od_ec_enc_normalize(v10, v12, v13 + 4 * v8 - (((v11 >> 6) * v14) >> 1) - 12);
  if (!*(_BYTE *)(a5 + 48))
    goto LABEL_25;
LABEL_15:
  v17 = v9[4];
  v18 = (v17 >> 4) + 5;
  v19 = *v9;
  if (!v8)
  {
    *v9 = v19 - (v19 >> v18);
    v20 = v9[1];
LABEL_20:
    v9[1] = v20 - (v20 >> v18);
    v21 = v9[2];
    if (v7 <= 2)
      goto LABEL_18;
LABEL_21:
    v22 = v21 + ((int)(0x8000 - v21) >> v18);
    goto LABEL_22;
  }
  *v9 = v19 + ((int)(0x8000 - v19) >> v18);
  v20 = v9[1];
  if (v8 == 1)
    goto LABEL_20;
  v9[1] = v20 + ((int)(0x8000 - v20) >> v18);
  v21 = v9[2];
  if (v7 > 2)
    goto LABEL_21;
LABEL_18:
  v22 = v21 - (v21 >> v18);
LABEL_22:
  v9[2] = v22;
  if (v17 < 0x20)
    LOWORD(v17) = v17 + 1;
  v9[4] = v17;
LABEL_25:
  if (v7 >= 3)
  {
    v23 = __clz(v7 - 1) ^ 0x1F;
    v24 = v23 - 1;
    v25 = *(unsigned __int16 *)(a5 + 40);
    v26 = (v25 >> 1) & 0x7F80 | 4;
    v27 = v25 - v26;
    v28 = ((v23 - 1) & 4) != 0 ? v26 : v27;
    od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + (v27 & ((int)((v23 - 1) << 29) >> 31)), v28);
    v29 = *(unsigned __int16 *)(a5 + 40);
    v30 = (v29 >> 1) & 0x7F80 | 4;
    v31 = v29 - v30;
    v32 = (v24 & 2) != 0 ? v30 : v31;
    od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + (v31 & ((int)(v24 << 30) >> 31)), v32);
    v33 = *(unsigned __int16 *)(a5 + 40);
    v34 = (v33 >> 1) & 0x7F80 | 4;
    v35 = v33 - v34;
    v36 = (v24 & 1) != 0 ? v34 : v35;
    result = od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + (((int)(v24 << 31) >> 31) & v35), v36);
    if (v23)
    {
      v37 = v7 + ~(1 << v23);
      v38 = v23 + 1;
      do
      {
        v39 = *(unsigned __int16 *)(a5 + 40);
        v40 = (v39 >> 1) & 0x7F80 | 4;
        v41 = 1 << (v38 - 2);
        v42 = v39 - v40;
        v43 = (v41 & v37) == 0;
        if ((v41 & v37) != 0)
          v44 = v42;
        else
          v44 = 0;
        if (v43)
          v45 = v42;
        else
          v45 = v40;
        result = od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + v44, v45);
        --v38;
      }
      while (v38 > 1);
    }
  }
  if (a3)
  {
    v46 = *(unsigned __int16 *)(a5 + 40);
    v47 = (v46 >> 1) & 0x7F80 | 4;
    v48 = v46 - v47;
    if (a3 < 0)
      v49 = v48;
    else
      v49 = 0;
    if (a3 < 0)
      v50 = v47;
    else
      v50 = v48;
    return od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + v49, v50);
  }
  return result;
}

_DWORD *write_angle_delta(uint64_t a1, int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  _DWORD *result;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v6 = (a2 + 3);
  v7 = (_DWORD *)(a1 + 16);
  if (a2 <= -3)
  {
    v9 = a3[(int)v6];
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned __int16 *)(a1 + 40);
    v12 = v11 >> 8;
  }
  else
  {
    v8 = (__int16)a3[a2 + 2];
    v9 = a3[v6];
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned __int16 *)(a1 + 40);
    v12 = v11 >> 8;
    if ((v8 & 0x80000000) == 0)
    {
      v13 = 4 * a2;
      v14 = ((v12 * ((unsigned __int16)v8 >> 6)) >> 1) - v13 + 16;
      result = od_ec_enc_normalize(v7, v10 + v11 - v14, v13 - ((v12 * (v9 >> 6)) >> 1) + v14 - 12);
      if (!*(_BYTE *)(a1 + 48))
        return result;
      goto LABEL_7;
    }
  }
  result = od_ec_enc_normalize(v7, v10, v11 + 4 * a2 - (((v9 >> 6) * v12) >> 1) - 12);
  if (!*(_BYTE *)(a1 + 48))
    return result;
LABEL_7:
  v16 = a3[7];
  v17 = (v16 >> 4) + 5;
  v18 = v6 << 56;
  v19 = *a3;
  if (v6 << 56 <= 0)
  {
    *a3 = v19 - (v19 >> v17);
    v20 = a3[1];
    goto LABEL_15;
  }
  *a3 = v19 + ((int)(0x8000 - v19) >> v17);
  v20 = a3[1];
  if (v18 <= 0x100000000000000)
  {
LABEL_15:
    a3[1] = v20 - (v20 >> v17);
    v21 = a3[2];
    goto LABEL_16;
  }
  a3[1] = v20 + ((int)(0x8000 - v20) >> v17);
  v21 = a3[2];
  if (v18 <= 0x200000000000000)
  {
LABEL_16:
    a3[2] = v21 - (v21 >> v17);
    v22 = a3[3];
    goto LABEL_17;
  }
  a3[2] = v21 + ((int)(0x8000 - v21) >> v17);
  v22 = a3[3];
  if (v18 <= 0x300000000000000)
  {
LABEL_17:
    a3[3] = v22 - (v22 >> v17);
    v23 = a3[4];
    goto LABEL_18;
  }
  a3[3] = v22 + ((int)(0x8000 - v22) >> v17);
  v23 = a3[4];
  if (v18 <= 0x400000000000000)
  {
LABEL_18:
    a3[4] = v23 - (v23 >> v17);
    v24 = a3[5];
    goto LABEL_19;
  }
  a3[4] = v23 + ((int)(0x8000 - v23) >> v17);
  v24 = a3[5];
  if (v18 <= 0x500000000000000)
  {
LABEL_19:
    v25 = v24 - (v24 >> v17);
    goto LABEL_20;
  }
  v25 = v24 + ((int)(0x8000 - v24) >> v17);
LABEL_20:
  a3[5] = v25;
  if (v16 < 0x20)
    LOWORD(v16) = v16 + 1;
  a3[7] = v16;
  return result;
}

unsigned int *delta_encode_palette_colors(unsigned int *result, unsigned int a2, int a3, int a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int32x4_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int8x16_t v24;
  int32x4_t *v25;
  int8x16_t *v26;
  unint64_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  BOOL v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 >= 1)
  {
    v8 = result;
    if (a3 >= 1)
    {
      v9 = *result;
      v10 = a3 + 1;
      do
      {
        v11 = *(unsigned __int16 *)(a5 + 40);
        v12 = (v11 >> 1) & 0x7F80 | 4;
        v13 = 1 << (v10 - 2);
        v14 = v11 - v12;
        v15 = (v13 & v9) == 0;
        if ((v13 & v9) != 0)
          v16 = v14;
        else
          v16 = 0;
        if (v15)
          v17 = v14;
        else
          v17 = v12;
        result = od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + v16, v17);
        --v10;
      }
      while (v10 > 1);
    }
    v72 = a2 - 1;
    if (a2 != 1)
    {
      v18 = 0uLL;
      v73 = 0u;
      v74 = 0u;
      v19 = *v8;
      if (a2 >= 9)
      {
        v23 = (a2 - 1) & 0xFFFFFFFFFFFFFFF8;
        v24 = (int8x16_t)vdupq_n_s32(v19);
        v21 = v23 | 1;
        v25 = (int32x4_t *)&v74;
        v26 = (int8x16_t *)(v8 + 5);
        v27 = v23;
        v28 = 0uLL;
        do
        {
          v29 = v26[-1];
          v30 = (int32x4_t)vextq_s8(v24, v29, 0xCuLL);
          v31 = *v26;
          v26 += 2;
          v24 = v31;
          v32 = (int32x4_t)vextq_s8(v29, v31, 0xCuLL);
          v33 = vsubq_s32((int32x4_t)v29, v30);
          v34 = vsubq_s32((int32x4_t)v31, v32);
          v25[-1] = v33;
          *v25 = v34;
          v18 = vmaxq_s32(v33, v18);
          v28 = vmaxq_s32(v34, v28);
          v25 += 2;
          v27 -= 8;
        }
        while (v27);
        v20 = vmaxvq_s32(vmaxq_s32(v18, v28));
        if (a2 - 1 == v23)
        {
LABEL_23:
          v42 = a3 - 3;
          v43 = v20 - a4;
          v44 = v43 + 1;
          v45 = __clz(v43) ^ 0x1F;
          if (v44 >= 2)
            v46 = v45 + 1;
          else
            v46 = 0;
          if (v46 <= v42)
            v47 = a3 - 3;
          else
            v47 = v46;
          v48 = v47 - v42;
          v49 = *(unsigned __int16 *)(a5 + 40);
          v50 = (v49 >> 1) & 0x7F80 | 4;
          v51 = v49 - v50;
          if (((v47 - v42) & 2) != 0)
            v52 = v50;
          else
            v52 = v51;
          od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + (v51 & ((v47 - v42) << 30 >> 31)), v52);
          v53 = *(unsigned __int16 *)(a5 + 40);
          v54 = (v53 >> 1) & 0x7F80 | 4;
          v55 = v53 - v54;
          if ((v48 & 1) != 0)
            v56 = v54;
          else
            v56 = v55;
          result = od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + ((v48 << 31 >> 31) & v55), v56);
          v57 = 0;
          v58 = (1 << a3) - (v19 + a4);
          do
          {
            v61 = *((_DWORD *)&v73 + v57);
            if (v47 >= 1)
            {
              v62 = v61 - a4;
              v63 = v47 + 1;
              do
              {
                v64 = *(unsigned __int16 *)(a5 + 40);
                v65 = (v64 >> 1) & 0x7F80 | 4;
                v66 = 1 << (v63 - 2);
                v67 = v64 - v65;
                v68 = (v66 & v62) == 0;
                if ((v66 & v62) != 0)
                  v69 = v67;
                else
                  v69 = 0;
                if (v68)
                  v70 = v67;
                else
                  v70 = v65;
                result = od_ec_enc_normalize((_DWORD *)(a5 + 16), *(_QWORD *)(a5 + 32) + v69, v70);
                --v63;
              }
              while (v63 > 1);
            }
            v58 -= v61;
            v59 = __clz(v58 - 1) ^ 0x1F;
            if (v58 >= 2)
              v60 = v59 + 1;
            else
              v60 = 0;
            if (v47 >= v60)
              v47 = v60;
            ++v57;
          }
          while (v57 != v72);
          return result;
        }
        v22 = v24.u32[3];
      }
      else
      {
        v20 = 0;
        v21 = 1;
        v22 = *v8;
      }
      v35 = a2 - v21;
      v36 = v21;
      v37 = (int *)&v73 + v21 - 1;
      v38 = &v8[v36];
      do
      {
        v40 = *v38++;
        v39 = v40;
        v41 = v40 - v22;
        *v37++ = v41;
        if (v41 > v20)
          v20 = v41;
        v22 = v39;
        --v35;
      }
      while (v35);
      goto LABEL_23;
    }
  }
  return result;
}

_DWORD *write_inter_segment_id(_DWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, int a6, int a7)
{
  _DWORD *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 *v18;
  _DWORD *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 v35;
  int v36;
  size_t v37;
  int v38;

  if (!a4[1])
    return result;
  v11 = result;
  v12 = **(unsigned __int8 ***)(a2 + 7864);
  v14 = *(_DWORD *)a2;
  v13 = *(_DWORD *)(a2 + 4);
  if (a7)
  {
    if (!a4[168])
      return result;
    goto LABEL_4;
  }
  if (a4[168])
    return result;
  if (!a6)
  {
LABEL_4:
    if (!a4[3])
      return write_segment_id_0(v11, (int *)a2, v12, a3, (uint64_t)a4, a5, 0);
    v15 = ((unint64_t)*(unsigned __int16 *)(v12 + 167) >> 3) & 1;
    v16 = *(_QWORD *)(a2 + 7880);
    v17 = *(_QWORD *)(a2 + 7888);
    if (v17)
      v17 = ((unint64_t)*(unsigned __int16 *)(v17 + 167) >> 3) & 1;
    if (v16)
      v16 = ((unint64_t)*(unsigned __int16 *)(v16 + 167) >> 3) & 1;
    v18 = (unsigned __int16 *)(a5 + 6 * (v16 + v17));
    v19 = (_DWORD *)(a3 + 16);
    if ((_DWORD)v15)
    {
      v20 = v18[v15];
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(unsigned __int16 *)(a3 + 40);
      v23 = v22 >> 8;
      if (((__int16)v18[(v15 - 1)] & 0x80000000) == 0)
      {
        v24 = ((v23 * (v18[(v15 - 1)] >> 6)) >> 1) - 4 * v15 + 8;
        result = od_ec_enc_normalize(v19, v21 + v22 - v24, 4 * v15 - ((v23 * (v20 >> 6)) >> 1) + v24 - 4);
        if (!*(_BYTE *)(a3 + 48))
          goto LABEL_24;
        goto LABEL_19;
      }
    }
    else
    {
      v20 = *v18;
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(unsigned __int16 *)(a3 + 40);
      v23 = v22 >> 8;
    }
    result = od_ec_enc_normalize(v19, v21, v22 + 4 * v15 - (((v20 >> 6) * v23) >> 1) - 4);
    if (!*(_BYTE *)(a3 + 48))
      goto LABEL_24;
LABEL_19:
    v25 = v18[2];
    v26 = (v25 >> 4) + 4;
    v27 = *v18;
    v28 = v27 - (v27 >> v26);
    v29 = v27 + ((int)(0x8000 - v27) >> v26);
    if (!(_DWORD)v15)
      LOWORD(v29) = v28;
    *v18 = v29;
    if (v25 < 0x20)
      LOWORD(v25) = v25 + 1;
    v18[2] = v25;
LABEL_24:
    if ((_DWORD)v15)
    {
      v30 = *v12;
      v31 = v11[59893] - v14;
      if (v31 >= mi_size_high_4[v30])
        v32 = mi_size_high_4[v30];
      else
        v32 = v31;
      if ((int)v32 >= 1)
      {
        v33 = (int)v11[59894];
        v34 = (char *)(*(_QWORD *)(*((_QWORD *)v11 + 29909) + 80) + v13 + (int)v33 * v14);
        v35 = v12[167];
        v36 = mi_size_wide_5[v30];
        if ((int)v33 - v13 < v36)
          v36 = v33 - v13;
        v37 = v36;
        v38 = v35 & 7;
        do
        {
          result = memset(v34, v38, v37);
          v34 += v33;
          --v32;
        }
        while (v32);
      }
      return result;
    }
    return write_segment_id_0(v11, (int *)a2, v12, a3, (uint64_t)a4, a5, 0);
  }
  result = write_segment_id_0(result, (int *)a2, **(unsigned __int8 ***)(a2 + 7864), a3, (uint64_t)a4, a5, 1);
  if (a4[3])
    *(_WORD *)(v12 + 167) &= ~8u;
  return result;
}

unint64_t pack_txb_tokens(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10, unsigned __int8 a11)
{
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;

  v17 = (_DWORD *)result;
  v18 = block_size_high_2[a7];
  v19 = *(_DWORD *)(a4 + 7936);
  if (v19 < 0)
    v18 += v19 >> (*(_BYTE *)(a4 + 2608 * a6 + 24) + 3);
  v20 = a9;
  v21 = v18 >> 2;
  v22 = block_size_wide_3[a7];
  v23 = *(_DWORD *)(a4 + 7928);
  if (v23 < 0)
  {
    v24 = ((v23 >> (*(_BYTE *)(a4 + 2608 * a6 + 20) + 3)) + v22) >> 2;
    v25 = __OFSUB__(v21, a9);
    v26 = v21 - a9;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v28 = 1;
    else
      v28 = v24 <= a10;
    if (v28)
      return result;
  }
  else
  {
    v24 = v22 >> 2;
    v25 = __OFSUB__(v21, a9);
    v26 = v21 - a9;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v27 = 1;
    else
      v27 = v24 <= a10;
    if (v27)
      return result;
  }
  if (a6
    || *(unsigned __int8 *)(a5
                          + (a10 >> av1_get_txb_size_index_tw_w_log2_table_0[a7])
                          + (a9 >> av1_get_txb_size_index_tw_h_log2_table_0[a7] << av1_get_txb_size_index_stride_log2_table_0[a7])
                          + 146) == a11)
  {
    return (unint64_t)av1_write_coeffs_txb(a2, a3);
  }
  v29 = tx_size_high_unit_0[a11];
  if (v29 >= v26)
    v29 = v26;
  v30 = v24 - a10;
  if (tx_size_wide_unit_0[a11] >= v30)
    v31 = v30;
  else
    v31 = tx_size_wide_unit_0[a11];
  v38 = v29;
  if (v29 >= 1 && v31 >= 1)
  {
    v32 = 0;
    v33 = sub_tx_size_map[a11];
    v37 = tx_size_high_unit_0[v33];
    v40 = v37 * tx_size_wide_unit_0[v33];
    v41 = tx_size_wide_unit_0[v33];
    do
    {
      v34 = 0;
      v39 = v32;
      v42 = v32 + v20;
      do
      {
        v43 = a8;
        LOBYTE(v36) = v33;
        HIDWORD(v35) = a10 + v34;
        LODWORD(v35) = v42;
        pack_txb_tokens(v17, a2, a3, a4, a5, 0, a7, a8, v35, v36);
        result = v41;
        a8 = (v43 + v40);
        v34 += v41;
      }
      while (v34 < v31);
      v20 = a9;
      v32 = v39 + v37;
    }
    while (v39 + v37 < v38);
  }
  return result;
}

uint64_t remux_tiles(int *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int *a6, int *a7)
{
  int v7;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  char v24;
  int v25;
  int v26;
  _BYTE *v27;
  int i;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  int v36;
  int v37;

  v7 = a3;
  if (!a1[145])
  {
    if (!HIBYTE(a4))
    {
      if (a4 < 0x100)
        v13 = 1;
      else
        v13 = 2;
      if (HIWORD(a4))
        v12 = 3;
      else
        v12 = v13;
      v14 = 4;
      *a6 = v12;
      *a7 = 4;
      v15 = *a1;
      if (a1[145])
        goto LABEL_42;
      goto LABEL_23;
    }
    goto LABEL_71;
  }
  v10 = HIBYTE(a5);
  if ((a4 & 0x80000000) != 0)
  {
    v12 = -1;
    if (!v10)
      goto LABEL_36;
LABEL_22:
    v14 = 4;
    *a6 = v12;
    *a7 = 4;
    v15 = *a1;
    if (a1[145])
      goto LABEL_42;
    goto LABEL_23;
  }
  if (a4 >> 23)
  {
    if (!v10)
    {
      v12 = 4;
      goto LABEL_36;
    }
LABEL_71:
    *a6 = 4;
    *a7 = 4;
    return a3;
  }
  if (a4 < 0x80)
    v11 = 1;
  else
    v11 = 2;
  if (a4 >> 15)
    v12 = 3;
  else
    v12 = v11;
  if (v10)
    goto LABEL_22;
LABEL_36:
  if (a5 < 0x100)
    v14 = 1;
  else
    v14 = 2;
  if (HIWORD(a5))
    v14 = 3;
  *a6 = v12;
  *a7 = v14;
  v15 = *a1;
  if (a1[145])
  {
LABEL_42:
    if (v15 >= 1)
    {
      v22 = 0;
      v23 = 0;
      v18 = 0;
      v36 = v14;
      if (v12 >= 4)
        v24 = 0;
      else
        v24 = 32 - 8 * v12;
      v25 = a1[1];
      v37 = v14 - 1;
      do
      {
        if (v22 < v15 - 1)
        {
          v26 = *(_DWORD *)(a2 + v23) + v25 * (v12 - 4);
          v27 = (_BYTE *)(a2 + v18);
          switch(v37)
          {
            case 0:
              *v27 = v26;
              break;
            case 1:
              *(_WORD *)v27 = v26;
              break;
            case 2:
              *(_WORD *)v27 = v26;
              v27[2] = BYTE2(v26);
              break;
            case 3:
              *(_DWORD *)v27 = v26;
              break;
            default:
              break;
          }
          v23 += 4;
          v18 = (v18 + v36);
          v25 = a1[1];
        }
        if (v25 >= 1)
        {
          for (i = 0; i < v25; ++i)
          {
            v31 = *(unsigned int *)(a2 + v23);
            v23 += 4;
            if ((v31 & 0x80000000) != 0)
            {
              v33 = v31 >> v24;
              v34 = (_BYTE *)(a2 + v18);
              switch(v12)
              {
                case 1:
                  *v34 = v33;
                  v18 = (v18 + v12);
                  break;
                case 2:
                  *(_WORD *)v34 = v33;
                  v18 = (v18 + v12);
                  break;
                case 3:
                  *(_WORD *)v34 = v33;
                  v34[2] = BYTE2(v33);
                  v18 = (v18 + v12);
                  break;
                case 4:
                  *(_DWORD *)v34 = v33;
                  goto LABEL_70;
                default:
LABEL_70:
                  v18 = (v18 + v12);
                  break;
              }
            }
            else
            {
              v32 = (_BYTE *)(a2 + v18);
              switch(v12)
              {
                case 1:
                  *v32 = v31;
                  break;
                case 2:
                  *(_WORD *)v32 = v31;
                  break;
                case 3:
                  *(_WORD *)v32 = v31;
                  v32[2] = BYTE2(v31);
                  break;
                case 4:
                  *(_DWORD *)v32 = v31;
                  break;
                default:
                  break;
              }
              v29 = (v18 + v12);
              v30 = v31 + 1;
              memmove((void *)(a2 + v29), (const void *)(a2 + v23), v31 + 1);
              v23 += v30;
              v18 = (v30 + v29);
            }
            v25 = a1[1];
          }
        }
        ++v22;
        v15 = *a1;
      }
      while (v22 < *a1);
      return v18;
    }
    return 0;
  }
LABEL_23:
  v16 = a1[1] * v15;
  if (v16 < 1)
    return 0;
  v17 = 0;
  LODWORD(v18) = 0;
  do
  {
    if (v16 == 1)
    {
      v19 = v7 - v17;
    }
    else
    {
      v20 = *(_DWORD *)(a2 + v17);
      v21 = (_BYTE *)(a2 + v18);
      switch(v12)
      {
        case 1:
          *v21 = v20;
          break;
        case 2:
          *(_WORD *)v21 = v20;
          break;
        case 3:
          *(_WORD *)v21 = v20;
          v21[2] = BYTE2(v20);
          break;
        case 4:
          *(_DWORD *)v21 = v20;
          break;
        default:
          break;
      }
      v17 += 4;
      v19 = v20 + 1;
      LODWORD(v18) = v18 + v12;
    }
    memmove((void *)(a2 + v18), (const void *)(a2 + v17), v19);
    v17 += v19;
    v18 = (v19 + v18);
    --v16;
  }
  while (v16);
  return v18;
}

uint64_t *aom_wb_write_bit(uint64_t *result, int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *((_DWORD *)result + 2);
  v3 = v2 + 7;
  if (v2 >= 0)
    v3 = *((_DWORD *)result + 2);
  v4 = v3 & 0xFFFFFFF8;
  v5 = *result;
  v6 = (uint64_t)v3 >> 3;
  v7 = v2 - v4;
  if (v7)
  {
    v8 = 7 - v7;
    *(_BYTE *)(v5 + v6) &= ~(1 << v8);
    *(_BYTE *)(*result + v6) |= a2 << v8;
  }
  else
  {
    *(_BYTE *)(v5 + v6) = (_BYTE)a2 << 7;
  }
  *((_DWORD *)result + 2) = v2 + 1;
  return result;
}

uint64_t *aom_wb_write_literal(uint64_t *result, unsigned int a2, int a3)
{
  int v3;
  char v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  if (a3 >= 1)
  {
    v3 = *((_DWORD *)result + 2);
    v4 = 7 - v3;
    v5 = a3 + 1;
    do
    {
      v8 = (a2 >> (v5 - 2)) & 1;
      v9 = v3 + 7;
      if (v3 >= 0)
        v9 = v3;
      v10 = v9 & 0xFFFFFFF8;
      v7 = *result;
      v11 = (uint64_t)v9 >> 3;
      if (v10 == v3)
      {
        LOBYTE(v8) = (_BYTE)v8 << 7;
      }
      else
      {
        v6 = v4 + v10;
        *(_BYTE *)(v7 + v11) &= ~(1 << v6);
        v7 = *result;
        v8 = *(unsigned __int8 *)(*result + v11) | (v8 << v6);
      }
      *(_BYTE *)(v7 + v11) = v8;
      *((_DWORD *)result + 2) = ++v3;
      --v4;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t *aom_wb_write_inv_signed_literal(uint64_t *result, unsigned int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  if ((a3 & 0x80000000) == 0)
  {
    v3 = *((_DWORD *)result + 2);
    v4 = 7 - v3;
    do
    {
      v7 = (a2 >> a3) & 1;
      v9 = v3 + 7;
      if (v3 >= 0)
        v9 = v3;
      v10 = v9 & 0xFFFFFFF8;
      v6 = *result;
      v11 = (uint64_t)v9 >> 3;
      if (v10 == v3)
      {
        LOBYTE(v7) = (_BYTE)v7 << 7;
      }
      else
      {
        v5 = v4 + v10;
        *(_BYTE *)(v6 + v11) &= ~(1 << v5);
        v6 = *result;
        v7 = *(unsigned __int8 *)(*result + v11) | (v7 << v5);
      }
      *(_BYTE *)(v6 + v11) = v7;
      *((_DWORD *)result + 2) = ++v3;
      --v4;
      v8 = a3-- + 1;
    }
    while (v8 > 1);
  }
  return result;
}

uint64_t *aom_wb_write_signed_primitive_refsubexpfin(uint64_t *result, __int16 a2, int a3, __int16 a4, __int16 a5)
{
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned int v7;
  int v8;
  __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  signed int v32;
  unsigned int v33;
  int v34;
  int v35;
  char v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  char v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char v68;

  v5 = a2 - 1 + a4;
  v6 = a2 - 1 + a5;
  v7 = 2 * v5;
  v8 = (unsigned __int16)(2 * a2 - 1);
  v9 = 2 * a2 - 2;
  v10 = v9 - v5;
  v11 = v9 - v6;
  v12 = 2 * (v10 - v11) - 1;
  if (v11 >= v10)
    v12 = 2 * (v11 - v10);
  if (v11 <= 2 * v10)
    v11 = v12;
  if ((unsigned __int16)(a2 - 1 + a5) >= v5)
    v13 = 2 * (v6 - v5);
  else
    v13 = 2 * (v5 - v6) - 1;
  if (v7 < v6)
    v13 = a2 - 1 + a5;
  if (v7 > v8)
    v13 = v11;
  if (3 << a3 >= v8)
  {
    LOWORD(v21) = 0;
    v29 = (unsigned __int16)(2 * a2 - 1);
    if (v29 >= 2)
    {
LABEL_24:
      v30 = __clz(v29);
      v31 = v30 ^ 0x1F;
      v32 = (2 << (v30 ^ 0x1F)) - v29;
      v33 = (unsigned __int16)(v13 - v21);
      v34 = v33 - v32;
      if ((int)v33 >= v32)
      {
        v52 = *((_DWORD *)result + 2);
        if (v31)
        {
          v53 = v32 + (v34 >> 1);
          v54 = 7 - v52;
          v55 = v31 + 1;
          do
          {
            v58 = (v53 >> (v55 - 2)) & 1;
            v59 = v52 + 7;
            if (v52 >= 0)
              v59 = v52;
            v60 = v59 & 0xFFFFFFF8;
            v57 = *result;
            v61 = (uint64_t)v59 >> 3;
            if (v60 == v52)
            {
              LOBYTE(v58) = (_BYTE)v58 << 7;
            }
            else
            {
              v56 = v54 + v60;
              *(_BYTE *)(v57 + v61) &= ~(1 << v56);
              v57 = *result;
              v58 = *(unsigned __int8 *)(*result + v61) | (v58 << v56);
            }
            *(_BYTE *)(v57 + v61) = v58;
            *((_DWORD *)result + 2) = ++v52;
            --v54;
            --v55;
          }
          while (v55 > 1);
        }
        v62 = v34 & 1;
        v63 = v52 + 7;
        if (v52 >= 0)
          v63 = v52;
        v64 = v63 & 0xFFFFFFF8;
        v65 = *result;
        v66 = (uint64_t)v63 >> 3;
        v67 = v52 - v64;
        if (v67)
        {
          v68 = 7 - v67;
          *(_BYTE *)(v65 + v66) &= ~(1 << v68);
          *(_BYTE *)(*result + v66) |= v62 << v68;
        }
        else
        {
          *(_BYTE *)(v65 + v66) = v62 << 7;
        }
        *((_DWORD *)result + 2) = v52 + 1;
      }
      else if (v31)
      {
        v35 = *((_DWORD *)result + 2);
        v36 = 7 - v35;
        v37 = v31 + 1;
        do
        {
          v40 = (v33 >> (v37 - 2)) & 1;
          v41 = v35 + 7;
          if (v35 >= 0)
            v41 = v35;
          v42 = v41 & 0xFFFFFFF8;
          v39 = *result;
          v43 = (uint64_t)v41 >> 3;
          if (v42 == v35)
          {
            LOBYTE(v40) = (_BYTE)v40 << 7;
          }
          else
          {
            v38 = v36 + v42;
            *(_BYTE *)(v39 + v43) &= ~(1 << v38);
            v39 = *result;
            v40 = *(unsigned __int8 *)(*result + v43) | (v40 << v38);
          }
          *(_BYTE *)(v39 + v43) = v40;
          *((_DWORD *)result + 2) = ++v35;
          --v36;
          --v37;
        }
        while (v37 > 1);
      }
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = v13;
    v17 = *((_DWORD *)result + 2);
    v18 = 7 - v17;
    v19 = a3;
    v20 = a3;
    do
    {
      v21 = v15 + (1 << v20);
      v22 = v17 + 7;
      if (v17 >= 0)
        v22 = v17;
      v23 = v22 & 0xFFFFFFF8;
      v24 = *result;
      v25 = (uint64_t)v22 >> 3;
      if (v23 == v17)
      {
        *(_BYTE *)(v24 + v25) = (v21 <= v13) << 7;
        v26 = v17 + 1;
        *((_DWORD *)result + 2) = v17 + 1;
        if (v21 > v13)
          goto LABEL_33;
      }
      else
      {
        v27 = v18 + v23;
        *(_BYTE *)(v24 + v25) &= ~(1 << v27);
        *(_BYTE *)(*result + v25) |= (v21 <= v13) << v27;
        v26 = v17 + 1;
        *((_DWORD *)result + 2) = v17 + 1;
        if (v21 > v13)
        {
LABEL_33:
          if (v20 >= 1)
          {
            v44 = 6 - v17;
            v45 = v20 + 1;
            do
            {
              v48 = ((v16 - v15) >> (v45 - 2)) & 1;
              v49 = v26 + 7;
              if (v26 >= 0)
                v49 = v26;
              v50 = v49 & 0xFFFFFFF8;
              v47 = *result;
              v51 = (uint64_t)v49 >> 3;
              if (v50 == v26)
              {
                LOBYTE(v48) = (_BYTE)v48 << 7;
              }
              else
              {
                v46 = v44 + v50;
                *(_BYTE *)(v47 + v51) &= ~(1 << v46);
                v47 = *result;
                v48 = *(unsigned __int8 *)(*result + v51) | (v48 << v46);
              }
              *(_BYTE *)(v47 + v51) = v48;
              *((_DWORD *)result + 2) = ++v26;
              --v44;
              --v45;
            }
            while (v45 > 1);
          }
          return result;
        }
      }
      v20 = v14 + a3;
      ++v14;
      v28 = (3 << v19) + v21;
      --v18;
      ++v19;
      v17 = v26;
      v15 = v21;
    }
    while (v28 < v8);
    v29 = (unsigned __int16)(v8 - v21);
    if (v29 >= 2)
      goto LABEL_24;
  }
  return result;
}

_DWORD *aom_blend_a64_hmask_neon(_DWORD *result, unsigned int a2, uint8x8_t *a3, unsigned int a4, uint8x8_t *a5, unsigned int a6, const float *a7, int a8, int a9)
{
  int v9;
  int8x16_t v10;
  unint64_t i;
  int8x16_t v12;
  uint8x16_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  uint8x8_t v26;
  __int16 *v27;
  uint8x8_t v28;
  int v29;
  int v30;
  unsigned int v31;

  v9 = a9;
  if (a8 < 9)
  {
    if (a8 == 4)
    {
      v16 = (int8x8_t)vld1_dup_f32(a7);
      v17 = (uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v16);
      do
      {
        v18.i32[0] = a3->i32[0];
        v18.i32[1] = *(__int32 *)((char *)a3->i32 + (int)a4);
        v19.i32[0] = a5->i32[0];
        v19.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
        v20 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v17, v19), (uint8x8_t)v16, v18), 6uLL);
        *result = v20.i32[0];
        *(_DWORD *)((char *)result + a2) = v20.i32[1];
        a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
        a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
        result = (_DWORD *)((char *)result + 2 * a2);
        v9 -= 2;
      }
      while (v9);
    }
    else if (a8 == 8)
    {
      v14 = *(uint8x8_t *)a7;
      v15 = (uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, *(int8x8_t *)a7);
      do
      {
        *(int8x8_t *)result = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v15, *a5), v14, *a3), 6uLL);
        a3 = (uint8x8_t *)((char *)a3 + a4);
        a5 = (uint8x8_t *)((char *)a5 + a6);
        result = (_DWORD *)((char *)result + a2);
        --v9;
      }
      while (v9);
    }
    else if (a8 == 2 && a9 >= 16)
    {
      v21 = (int8x8_t)vld1_dup_s16((const __int16 *)a7);
      v22 = (uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v21);
      do
      {
        v25 = (__int16 *)((char *)a3 + (int)a4);
        v26 = (uint8x8_t)vld1_dup_s16((const __int16 *)a3);
        v23 = 2 * a4;
        a3 = (uint8x8_t *)((char *)a3 + v23);
        v26.i16[1] = *v25;
        v27 = (__int16 *)((char *)a5 + (int)a6);
        v28 = (uint8x8_t)vld1_dup_s16((const __int16 *)a5);
        v24 = 2 * a6;
        a5 = (uint8x8_t *)((char *)a5 + v24);
        v28.i16[1] = *v27;
        v26.i32[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v22, v28), (uint8x8_t)v21, v26), 6uLL).u32[0];
        *(_WORD *)result = v26.i16[0];
        *(_WORD *)((char *)result + a2) = v26.i16[1];
        result = (_DWORD *)((char *)result + 2 * a2);
        v9 -= 2;
      }
      while (v9);
    }
    else if (a8 >= 1 && a9 >= 1)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      do
      {
        *((_BYTE *)result + v31) = ((64 - *(unsigned __int8 *)a7) * a5->u8[v30]
                                  + a3->u8[v29] * *(unsigned __int8 *)a7
                                  + 32) >> 6;
        if (a8 != 1)
        {
          *((_BYTE *)result + v31 + 1) = ((64 - *((unsigned __int8 *)a7 + 1)) * a5->u8[v30 + 1]
                                        + a3->u8[v29 + 1] * *((unsigned __int8 *)a7 + 1)
                                        + 32) >> 6;
          if (a8 != 2)
          {
            *((_BYTE *)result + v31 + 2) = ((64 - *((unsigned __int8 *)a7 + 2)) * a5->u8[v30 + 2]
                                          + a3->u8[v29 + 2] * *((unsigned __int8 *)a7 + 2)
                                          + 32) >> 6;
            if (a8 != 3)
            {
              *((_BYTE *)result + v31 + 3) = ((64 - *((unsigned __int8 *)a7 + 3)) * a5->u8[v30 + 3]
                                            + a3->u8[v29 + 3] * *((unsigned __int8 *)a7 + 3)
                                            + 32) >> 6;
              *((_BYTE *)result + v31 + 4) = ((64 - *((unsigned __int8 *)a7 + 4)) * a5->u8[v30 + 4]
                                            + a3->u8[v29 + 4] * *((unsigned __int8 *)a7 + 4)
                                            + 32) >> 6;
              if (a8 != 5)
              {
                *((_BYTE *)result + v31 + 5) = ((64 - *((unsigned __int8 *)a7 + 5)) * a5->u8[v30 + 5]
                                              + a3->u8[v29 + 5] * *((unsigned __int8 *)a7 + 5)
                                              + 32) >> 6;
                if (a8 != 6)
                  *((_BYTE *)result + v31 + 6) = ((64 - *((unsigned __int8 *)a7 + 6)) * a5->u8[v30 + 6]
                                                + a3->u8[v29 + 6] * *((unsigned __int8 *)a7 + 6)
                                                + 32) >> 6;
              }
            }
          }
        }
        v31 += a2;
        v30 += a6;
        v29 += a4;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v10.i64[0] = 0x4040404040404040;
    v10.i64[1] = 0x4040404040404040;
    do
    {
      for (i = 0; i < a8; i += 16)
      {
        v12 = *(int8x16_t *)&a7[i / 4];
        v13 = (uint8x16_t)vsubq_s8(v10, v12);
        *(int8x16_t *)&result[i / 4] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v13.i8, a5[i / 8]), *(uint8x8_t *)v12.i8, a3[i / 8]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v13, *(uint8x16_t *)a5[i / 8].i8), (uint8x16_t)v12, *(uint8x16_t *)a3[i / 8].i8), 6uLL);
      }
      a3 = (uint8x8_t *)((char *)a3 + a4);
      a5 = (uint8x8_t *)((char *)a5 + a6);
      result = (_DWORD *)((char *)result + a2);
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *aom_lowbd_blend_a64_d16_mask_neon(_DWORD *result, unsigned int a2, uint16x4_t *a3, unsigned int a4, uint16x4_t *a5, unsigned int a6, int8x8_t *a7, unsigned int a8, int a9, int a10, uint64_t a11)
{
  uint64_t v14;
  char *v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v18;
  unint64_t k;
  uint8x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  unint64_t m;
  uint8x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint64_t v32;
  unint64_t i;
  uint8x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint8x8_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint64_t v44;
  unint64_t j;
  uint8x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint8x8_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  uint8x8_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint8x8_t v63;
  int8x16_t v64;
  int8x16_t v65;

  if (a11)
  {
    if ((_DWORD)a11 == 1 && HIDWORD(a11) == 1)
    {
      if (a9 <= 7)
      {
        v49.i64[0] = 0x40004000400040;
        v49.i64[1] = 0x40004000400040;
        v50.i64[0] = 0x1800180018001800;
        v50.i64[1] = 0x1800180018001800;
        do
        {
          v51 = vrshr_n_u8(vqadd_u8((uint8x8_t)vpadd_s8(*a7, *(int8x8_t *)((char *)a7 + 2 * a8)), (uint8x8_t)vpadd_s8(*(int8x8_t *)((char *)a7 + a8), *(int8x8_t *)((char *)a7 + 3 * a8))), 2uLL);
          v52 = (int8x16_t)vmovl_u8(v51);
          v53 = (int8x16_t)vsubw_u8(v49, v51);
          *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v53.i8, *a5), *(uint16x4_t *)v52.i8, *a3), 6uLL), (int32x4_t)vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), *(uint16x4_t *)((char *)a5 + 2 * a6)), (uint16x4_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), *(uint16x4_t *)((char *)a3 + 2 * a4)), 6uLL), v50), 4uLL);
          a7 = (int8x8_t *)((char *)a7 + 4 * a8);
          *result = v53.i32[0];
          *(_DWORD *)((char *)result + a2) = v53.i32[1];
          result = (_DWORD *)((char *)result + 2 * a2);
          a5 = (uint16x4_t *)((char *)a5 + 4 * a6);
          a3 = (uint16x4_t *)((char *)a3 + 4 * a4);
          a10 -= 2;
        }
        while (a10);
      }
      else
      {
        v30.i64[0] = 0x40004000400040;
        v30.i64[1] = 0x40004000400040;
        v31.i64[0] = 0x1800180018001800;
        v31.i64[1] = 0x1800180018001800;
        do
        {
          v32 = 0;
          for (i = 0; i < a9; i += 8)
          {
            v34 = vrshr_n_u8(vqadd_u8((uint8x8_t)vpadd_s8(a7[v32], a7[v32 + 1]), (uint8x8_t)vpadd_s8(*(int8x8_t *)((char *)a7 + a8 + v32 * 8), *(int8x8_t *)((char *)&a7[1] + a8 + v32 * 8))), 2uLL);
            v35 = vsubw_u8(v30, v34);
            v36 = vmovl_u8(v34);
            *(uint8x8_t *)&result[i / 4] = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v35.i8, a5[v32]), *(uint16x4_t *)v36.i8, a3[v32]), 6uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v35, *(uint16x8_t *)a5[v32].i8), v36, *(uint16x8_t *)a3[v32].i8), 6uLL), v31), 4uLL);
            v32 += 2;
          }
          a7 = (int8x8_t *)((char *)a7 + 2 * a8);
          result = (_DWORD *)((char *)result + a2);
          a5 = (uint16x4_t *)((char *)a5 + 2 * a6);
          a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
          --a10;
        }
        while (a10);
      }
    }
    else if ((_DWORD)a11 == 1 && HIDWORD(a11) == 0)
    {
      if (a9 <= 7)
      {
        v61.i64[0] = 0x40004000400040;
        v61.i64[1] = 0x40004000400040;
        v62.i64[0] = 0x1800180018001800;
        v62.i64[1] = 0x1800180018001800;
        do
        {
          v63 = vrshr_n_u8((uint8x8_t)vpadd_s8(*a7, *(int8x8_t *)((char *)a7 + a8)), 1uLL);
          v64 = (int8x16_t)vmovl_u8(v63);
          v65 = (int8x16_t)vsubw_u8(v61, v63);
          *(uint8x8_t *)v65.i8 = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v65.i8, *a5), *(uint16x4_t *)v64.i8, *a3), 6uLL), (int32x4_t)vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), *(uint16x4_t *)((char *)a5 + 2 * a6)), (uint16x4_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(uint16x4_t *)((char *)a3 + 2 * a4)), 6uLL), v62), 4uLL);
          a7 = (int8x8_t *)((char *)a7 + 2 * a8);
          *result = v65.i32[0];
          *(_DWORD *)((char *)result + a2) = v65.i32[1];
          result = (_DWORD *)((char *)result + 2 * a2);
          a5 = (uint16x4_t *)((char *)a5 + 4 * a6);
          a3 = (uint16x4_t *)((char *)a3 + 4 * a4);
          a10 -= 2;
        }
        while (a10);
      }
      else
      {
        v42.i64[0] = 0x40004000400040;
        v42.i64[1] = 0x40004000400040;
        v43.i64[0] = 0x1800180018001800;
        v43.i64[1] = 0x1800180018001800;
        do
        {
          v44 = 0;
          for (j = 0; j < a9; j += 8)
          {
            v46 = vrshr_n_u8((uint8x8_t)vpadd_s8(a7[v44], a7[v44 + 1]), 1uLL);
            v47 = vsubw_u8(v42, v46);
            v48 = vmovl_u8(v46);
            *(uint8x8_t *)&result[j / 4] = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v47.i8, a5[v44]), *(uint16x4_t *)v48.i8, a3[v44]), 6uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v47, *(uint16x8_t *)a5[v44].i8), v48, *(uint16x8_t *)a3[v44].i8), 6uLL), v43), 4uLL);
            v44 += 2;
          }
          a7 = (int8x8_t *)((char *)a7 + a8);
          result = (_DWORD *)((char *)result + a2);
          a5 = (uint16x4_t *)((char *)a5 + 2 * a6);
          a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
          --a10;
        }
        while (a10);
      }
    }
    else
    {
      v14 = 2 * a8;
      if (a9 <= 7)
      {
        v54.i64[0] = 0x40004000400040;
        v54.i64[1] = 0x40004000400040;
        v55.i64[0] = 0x1800180018001800;
        v55.i64[1] = 0x1800180018001800;
        do
        {
          v56.i32[0] = a7->i32[0];
          v57.i32[0] = *(__int32 *)((char *)a7->i32 + a8);
          v56.i32[1] = *(__int32 *)((char *)a7->i32 + (int)v14);
          v57.i32[1] = *(__int32 *)((char *)a7->i32 + (int)v14 + (unint64_t)a8);
          v58 = vrhadd_u8(v56, v57);
          v59 = (int8x16_t)vmovl_u8(v58);
          v60 = (int8x16_t)vsubw_u8(v54, v58);
          *(uint8x8_t *)v60.i8 = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v60.i8, *a5), *(uint16x4_t *)v59.i8, *a3), 6uLL), (int32x4_t)vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), *(uint16x4_t *)((char *)a5 + 2 * a6)), (uint16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), *(uint16x4_t *)((char *)a3 + 2 * a4)), 6uLL), v55), 4uLL);
          a7 = (int8x8_t *)((char *)a7 + 4 * a8);
          *result = v60.i32[0];
          *(_DWORD *)((char *)result + a2) = v60.i32[1];
          result = (_DWORD *)((char *)result + 2 * a2);
          a5 = (uint16x4_t *)((char *)a5 + 4 * a6);
          a3 = (uint16x4_t *)((char *)a3 + 4 * a4);
          a10 -= 2;
        }
        while (a10);
      }
      else
      {
        v15 = (char *)a7 + a8;
        v16.i64[0] = 0x40004000400040;
        v16.i64[1] = 0x40004000400040;
        v17.i64[0] = 0x1800180018001800;
        v17.i64[1] = 0x1800180018001800;
        do
        {
          v18 = 0;
          for (k = 0; k < a9; k += 8)
          {
            v20 = vrhadd_u8((uint8x8_t)a7[k / 8], *(uint8x8_t *)&v15[k]);
            v21 = vmovl_u8(v20);
            v22 = vsubw_u8(v16, v20);
            *(uint8x8_t *)&result[k / 4] = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v22.i8, a5[v18]), *(uint16x4_t *)v21.i8, a3[v18]), 6uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v22, *(uint16x8_t *)a5[v18].i8), v21, *(uint16x8_t *)a3[v18].i8), 6uLL), v17), 4uLL);
            v18 += 2;
          }
          a7 = (int8x8_t *)((char *)a7 + v14);
          result = (_DWORD *)((char *)result + a2);
          a5 = (uint16x4_t *)((char *)a5 + 2 * a6);
          a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
          v15 += v14;
          --a10;
        }
        while (a10);
      }
    }
  }
  else if (a9 <= 7)
  {
    v37.i64[0] = 0x40004000400040;
    v37.i64[1] = 0x40004000400040;
    v38.i64[0] = 0x1800180018001800;
    v38.i64[1] = 0x1800180018001800;
    do
    {
      v39.i32[0] = a7->i32[0];
      v39.i32[1] = *(__int32 *)((char *)a7->i32 + (int)a8);
      v40 = (int8x16_t)vmovl_u8(v39);
      v41 = (int8x16_t)vsubw_u8(v37, v39);
      *(uint8x8_t *)v41.i8 = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v41.i8, *a5), *(uint16x4_t *)v40.i8, *a3), 6uLL), (int32x4_t)vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), *(uint16x4_t *)((char *)a5 + 2 * a6)), (uint16x4_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(uint16x4_t *)((char *)a3 + 2 * a4)), 6uLL), v38), 4uLL);
      *result = v41.i32[0];
      a7 = (int8x8_t *)((char *)a7 + 2 * a8);
      *(_DWORD *)((char *)result + a2) = v41.i32[1];
      result = (_DWORD *)((char *)result + 2 * a2);
      a5 = (uint16x4_t *)((char *)a5 + 4 * a6);
      a3 = (uint16x4_t *)((char *)a3 + 4 * a4);
      a10 -= 2;
    }
    while (a10);
  }
  else
  {
    v23.i64[0] = 0x40004000400040;
    v23.i64[1] = 0x40004000400040;
    v24.i64[0] = 0x1800180018001800;
    v24.i64[1] = 0x1800180018001800;
    do
    {
      v25 = 0;
      for (m = 0; m < a9; m += 8)
      {
        v27 = (uint8x8_t)a7[m / 8];
        v28 = vmovl_u8(v27);
        v29 = vsubw_u8(v23, v27);
        *(uint8x8_t *)&result[m / 4] = vqrshrn_n_u16(vqsubq_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v29.i8, a5[v25]), *(uint16x4_t *)v28.i8, a3[v25]), 6uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v29, *(uint16x8_t *)a5[v25].i8), v28, *(uint16x8_t *)a3[v25].i8), 6uLL), v24), 4uLL);
        v25 += 2;
      }
      a7 = (int8x8_t *)((char *)a7 + a8);
      result = (_DWORD *)((char *)result + a2);
      a5 = (uint16x4_t *)((char *)a5 + 2 * a6);
      a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
      --a10;
    }
    while (a10);
  }
  return result;
}

int8x8_t *aom_blend_a64_mask_neon(int8x8_t *result, unsigned int a2, uint8x8_t *a3, unsigned int a4, uint8x8_t *a5, unsigned int a6, int8x8_t *a7, unsigned int a8, int a9, int a10, uint64_t a11)
{
  uint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint8x16_t v20;
  int8x16_t v21;
  unint64_t j;
  int8x16_t v23;
  uint8x16_t v24;
  uint64_t v26;
  int8x16_t v27;
  char *v28;
  unint64_t i;
  int8x16_t v30;
  uint8x16_t v31;
  int16x8_t v32;
  int8x8_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  unint64_t v36;
  int8x16_t *v37;
  int8x16_t v38;
  uint8x16_t v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint8x8_t v42;
  int8x8_t v43;
  uint64_t v44;
  int8x8_t v45;
  uint8x8_t v46;
  uint8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t *v50;
  int8x8_t v51;
  int16x8_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8x8_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  uint8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  uint8x8_t v61;
  uint8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;

  if (a11)
  {
    if ((HIDWORD(a11) & a11) == 1)
    {
      v12 = 2 * a8;
      if (a9 < 9)
      {
        if (a9 == 8)
        {
          do
          {
            v33 = (int8x8_t)vrshr_n_u8(vqadd_u8((uint8x8_t)vpadd_s8(*a7, a7[1]), (uint8x8_t)vpadd_s8(*(int8x8_t *)((char *)a7 + a8), *(int8x8_t *)((char *)&a7[1] + a8))), 2uLL);
            a7 = (int8x8_t *)((char *)a7 + v12);
            *result = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v33), *a5), (uint8x8_t)v33, *a3), 6uLL);
            a3 = (uint8x8_t *)((char *)a3 + a4);
            a5 = (uint8x8_t *)((char *)a5 + a6);
            result = (int8x8_t *)((char *)result + a2);
            --a10;
          }
          while (a10);
        }
        else
        {
          do
          {
            v46.i32[0] = a3->i32[0];
            v46.i32[1] = *(__int32 *)((char *)a3->i32 + (int)a4);
            v47.i32[0] = a5->i32[0];
            v47.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
            v48 = (int8x8_t)vrshr_n_u8(vqadd_u8((uint8x8_t)vpadd_s8(*a7, *(int8x8_t *)((char *)a7 + v12)), (uint8x8_t)vpadd_s8(*(int8x8_t *)((char *)a7 + a8), *(int8x8_t *)((char *)a7 + 3 * a8))), 2uLL);
            v49 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v48), v47), (uint8x8_t)v48, v46), 6uLL);
            result->i32[0] = v49.i32[0];
            a7 = (int8x8_t *)((char *)a7 + 4 * a8);
            *(__int32 *)((char *)result->i32 + a2) = v49.i32[1];
            a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
            a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
            result = (int8x8_t *)((char *)result + 2 * a2);
            a10 -= 2;
          }
          while (a10);
        }
      }
      else
      {
        v13.i64[0] = 0x4040404040404040;
        v13.i64[1] = 0x4040404040404040;
        do
        {
          v14 = 0;
          v15 = (int8x16_t *)a7;
          do
          {
            v16 = (int8x16_t *)((char *)v15 + a8);
            v17 = *v15;
            v18 = v15[1];
            v15 += 2;
            v19 = (int8x16_t)vrshrq_n_u8(vqaddq_u8((uint8x16_t)vpaddq_s8(v17, v18), (uint8x16_t)vpaddq_s8(*v16, v16[1])), 2uLL);
            v20 = (uint8x16_t)vsubq_s8(v13, v19);
            *(int8x16_t *)result[v14 / 8].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v20.i8, a5[v14 / 8]), *(uint8x8_t *)v19.i8, a3[v14 / 8]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v20, *(uint8x16_t *)a5[v14 / 8].i8), (uint8x16_t)v19, *(uint8x16_t *)a3[v14 / 8].i8), 6uLL);
            v14 += 16;
          }
          while (v14 < a9);
          a7 = (int8x8_t *)((char *)a7 + v12);
          a3 = (uint8x8_t *)((char *)a3 + a4);
          a5 = (uint8x8_t *)((char *)a5 + a6);
          result = (int8x8_t *)((char *)result + a2);
          --a10;
        }
        while (a10);
      }
    }
    else if ((_DWORD)a11 == 1 && HIDWORD(a11) == 0)
    {
      if (a9 < 9)
      {
        if (a9 == 8)
        {
          v50 = a7 + 1;
          do
          {
            v51 = (int8x8_t)vrshr_n_u8((uint8x8_t)vpadd_s8(v50[-1], *v50), 1uLL);
            v52 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v51), *a5), (uint8x8_t)v51, *a3);
            a3 = (uint8x8_t *)((char *)a3 + a4);
            *result = vrshrn_n_s16(v52, 6uLL);
            a5 = (uint8x8_t *)((char *)a5 + a6);
            result = (int8x8_t *)((char *)result + a2);
            v50 = (int8x8_t *)((char *)v50 + a8);
            --a10;
          }
          while (a10);
        }
        else
        {
          do
          {
            v61.i32[0] = a3->i32[0];
            v61.i32[1] = *(__int32 *)((char *)a3->i32 + (int)a4);
            v62.i32[0] = a5->i32[0];
            v62.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
            v63 = (int8x8_t)vrshr_n_u8((uint8x8_t)vpadd_s8(*a7, *(int8x8_t *)((char *)a7 + a8)), 1uLL);
            v64 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v63), v62), (uint8x8_t)v63, v61), 6uLL);
            result->i32[0] = v64.i32[0];
            a7 = (int8x8_t *)((char *)a7 + 2 * a8);
            *(__int32 *)((char *)result->i32 + a2) = v64.i32[1];
            a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
            a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
            result = (int8x8_t *)((char *)result + 2 * a2);
            a10 -= 2;
          }
          while (a10);
        }
      }
      else
      {
        v34 = (int8x16_t *)&a7[2];
        v35.i64[0] = 0x4040404040404040;
        v35.i64[1] = 0x4040404040404040;
        do
        {
          v36 = 0;
          v37 = v34;
          do
          {
            v38 = (int8x16_t)vrshrq_n_u8((uint8x16_t)vpaddq_s8(v37[-1], *v37), 1uLL);
            v39 = (uint8x16_t)vsubq_s8(v35, v38);
            *(int8x16_t *)result[v36 / 8].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v39.i8, a5[v36 / 8]), *(uint8x8_t *)v38.i8, a3[v36 / 8]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v39, *(uint8x16_t *)a5[v36 / 8].i8), (uint8x16_t)v38, *(uint8x16_t *)a3[v36 / 8].i8), 6uLL);
            v36 += 16;
            v37 += 2;
          }
          while (v36 < a9);
          a3 = (uint8x8_t *)((char *)a3 + a4);
          a5 = (uint8x8_t *)((char *)a5 + a6);
          result = (int8x8_t *)((char *)result + a2);
          v34 = (int8x16_t *)((char *)v34 + a8);
          --a10;
        }
        while (a10);
      }
    }
    else if (a9 < 9)
    {
      v44 = a2;
      if (a9 == 8)
      {
        do
        {
          v45 = (int8x8_t)vrhadd_u8((uint8x8_t)*a7, *(uint8x8_t *)((char *)a7 + a8));
          a7 = (int8x8_t *)((char *)a7 + 2 * a8);
          *result = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v45), *a5), (uint8x8_t)v45, *a3), 6uLL);
          a3 = (uint8x8_t *)((char *)a3 + a4);
          a5 = (uint8x8_t *)((char *)a5 + a6);
          result = (int8x8_t *)((char *)result + a2);
          --a10;
        }
        while (a10);
      }
      else
      {
        v53 = (int)(2 * a8);
        v54 = 2 * a2;
        do
        {
          v55.i32[0] = a7->i32[0];
          v55.i32[1] = *(__int32 *)((char *)a7->i32 + v53);
          v56.i32[0] = *(__int32 *)((char *)a7->i32 + a8);
          v56.i32[1] = *(__int32 *)((char *)a7->i32 + v53 + a8);
          v57.i32[0] = a3->i32[0];
          v57.i32[1] = *(__int32 *)((char *)a3->i32 + (int)a4);
          v58.i32[0] = a5->i32[0];
          v58.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
          v59 = (int8x8_t)vrhadd_u8(v55, v56);
          v60 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v59), v58), (uint8x8_t)v59, v57), 6uLL);
          result->i32[0] = v60.i32[0];
          a7 = (int8x8_t *)((char *)a7 + 4 * a8);
          *(__int32 *)((char *)result->i32 + v44) = v60.i32[1];
          a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
          a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
          result = (int8x8_t *)((char *)result + v54);
          a10 -= 2;
        }
        while (a10);
      }
    }
    else
    {
      v26 = 2 * a8;
      v27.i64[0] = 0x4040404040404040;
      v27.i64[1] = 0x4040404040404040;
      v28 = (char *)a7 + a8;
      do
      {
        for (i = 0; i < a9; i += 16)
        {
          v30 = (int8x16_t)vrhaddq_u8(*(uint8x16_t *)a7[i / 8].i8, *(uint8x16_t *)&v28[i]);
          v31 = (uint8x16_t)vsubq_s8(v27, v30);
          *(int8x16_t *)result[i / 8].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v31.i8, a5[i / 8]), *(uint8x8_t *)v30.i8, a3[i / 8]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v31, *(uint8x16_t *)a5[i / 8].i8), (uint8x16_t)v30, *(uint8x16_t *)a3[i / 8].i8), 6uLL);
        }
        a7 = (int8x8_t *)((char *)a7 + v26);
        a3 = (uint8x8_t *)((char *)a3 + a4);
        a5 = (uint8x8_t *)((char *)a5 + a6);
        result = (int8x8_t *)((char *)result + a2);
        v28 += v26;
        --a10;
      }
      while (a10);
    }
  }
  else if (a9 < 9)
  {
    if (a9 == 8)
    {
      do
      {
        v32 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, *a7), *a5), (uint8x8_t)*a7, *a3);
        a7 = (int8x8_t *)((char *)a7 + a8);
        *result = vrshrn_n_s16(v32, 6uLL);
        a3 = (uint8x8_t *)((char *)a3 + a4);
        a5 = (uint8x8_t *)((char *)a5 + a6);
        result = (int8x8_t *)((char *)result + a2);
        --a10;
      }
      while (a10);
    }
    else
    {
      do
      {
        v40.i32[0] = a7->i32[0];
        v40.i32[1] = *(__int32 *)((char *)a7->i32 + (int)a8);
        v41.i32[0] = a3->i32[0];
        v41.i32[1] = *(__int32 *)((char *)a3->i32 + (int)a4);
        v42.i32[0] = a5->i32[0];
        v42.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
        v43 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v40), v42), (uint8x8_t)v40, v41), 6uLL);
        result->i32[0] = v43.i32[0];
        a7 = (int8x8_t *)((char *)a7 + 2 * a8);
        *(__int32 *)((char *)result->i32 + a2) = v43.i32[1];
        a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
        a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
        result = (int8x8_t *)((char *)result + 2 * a2);
        a10 -= 2;
      }
      while (a10);
    }
  }
  else
  {
    v21.i64[0] = 0x4040404040404040;
    v21.i64[1] = 0x4040404040404040;
    do
    {
      for (j = 0; j < a9; j += 16)
      {
        v23 = *(int8x16_t *)a7[j / 8].i8;
        v24 = (uint8x16_t)vsubq_s8(v21, v23);
        *(int8x16_t *)result[j / 8].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v24.i8, a5[j / 8]), *(uint8x8_t *)v23.i8, a3[j / 8]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v24, *(uint8x16_t *)a5[j / 8].i8), (uint8x16_t)v23, *(uint8x16_t *)a3[j / 8].i8), 6uLL);
      }
      a7 = (int8x8_t *)((char *)a7 + a8);
      a3 = (uint8x8_t *)((char *)a3 + a4);
      a5 = (uint8x8_t *)((char *)a5 + a6);
      result = (int8x8_t *)((char *)result + a2);
      --a10;
    }
    while (a10);
  }
  return result;
}

int8x8_t *aom_blend_a64_vmask_neon(int8x8_t *result, unsigned int a2, uint8x8_t *a3, unsigned int a4, uint8x8_t *a5, unsigned int a6, const char *a7, int a8, double a9, int8x16_t a10, int a11)
{
  uint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  int8x8_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  const char *v17;
  int8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  int8x8_t v26;
  __int16 *v27;
  uint8x8_t v28;
  __int16 *v29;
  uint8x8_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v11 = a11;
  if (a8 < 9)
  {
    if (a8 == 8)
    {
      do
      {
        v22 = vld1_dup_s8(a7++);
        *result = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v22), *a5), (uint8x8_t)v22, *a3), 6uLL);
        a3 = (uint8x8_t *)((char *)a3 + a4);
        a5 = (uint8x8_t *)((char *)a5 + a6);
        result = (int8x8_t *)((char *)result + a2);
        LODWORD(v11) = v11 - 1;
      }
      while ((_DWORD)v11);
    }
    else if (a8 == 4)
    {
      do
      {
        v17 = a7;
        v18.i32[0] = vld1_dup_s8(v17++).u32[0];
        v19 = (uint8x8_t)vld1_dup_s8(v17);
        v18.i32[1] = v19.i32[1];
        v19.i32[0] = a3->i32[0];
        v19.i32[1] = *(__int32 *)((char *)a3->i32 + (int)a4);
        v20.i32[0] = a5->i32[0];
        v20.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
        v21 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v18), v20), (uint8x8_t)v18, v19), 6uLL);
        a7 += 2;
        result->i32[0] = v21.i32[0];
        *(__int32 *)((char *)result->i32 + a2) = v21.i32[1];
        a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
        a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
        result = (int8x8_t *)((char *)result + 2 * a2);
        LODWORD(v11) = v11 - 2;
      }
      while ((_DWORD)v11);
    }
    else if (a8 == 2 && a11 >= 16)
    {
      do
      {
        v25 = *(_WORD *)a7;
        a7 += 2;
        v26 = vzip1_s8((int8x8_t)v25, (int8x8_t)v25);
        v27 = (__int16 *)((char *)a3 + (int)a4);
        v28 = (uint8x8_t)vld1_dup_s16((const __int16 *)a3);
        v23 = 2 * a4;
        a3 = (uint8x8_t *)((char *)a3 + v23);
        v28.i16[1] = *v27;
        v29 = (__int16 *)((char *)a5 + (int)a6);
        v30 = (uint8x8_t)vld1_dup_s16((const __int16 *)a5);
        v24 = 2 * a6;
        a5 = (uint8x8_t *)((char *)a5 + v24);
        v30.i16[1] = *v29;
        v26.i32[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v26), v30), (uint8x8_t)v26, v28), 6uLL).u32[0];
        result->i16[0] = v26.i16[0];
        *(__int16 *)((char *)result->i16 + a2) = v26.i16[1];
        result = (int8x8_t *)((char *)result + 2 * a2);
        LODWORD(v11) = v11 - 2;
      }
      while ((_DWORD)v11);
    }
    else if (a8 >= 1 && a11 >= 1)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      do
      {
        v35 = *(unsigned __int8 *)a7++;
        v34 = v35;
        v36 = 64 - v35;
        result->i8[v33] = ((64 - v35) * a5->u8[v32] + a3->u8[v31] * v35 + 32) >> 6;
        if (a8 != 1)
        {
          result->i8[v33 + 1] = (v36 * a5->u8[v32 + 1] + a3->u8[v31 + 1] * v34 + 32) >> 6;
          if (a8 != 2)
          {
            result->i8[v33 + 2] = (v36 * a5->u8[v32 + 2] + a3->u8[v31 + 2] * v34 + 32) >> 6;
            if (a8 != 3)
            {
              result->i8[v33 + 3] = (v36 * a5->u8[v32 + 3] + a3->u8[v31 + 3] * v34 + 32) >> 6;
              result->i8[v33 + 4] = (v36 * a5->u8[v32 + 4] + a3->u8[v31 + 4] * v34 + 32) >> 6;
              if (a8 != 5)
              {
                result->i8[v33 + 5] = (v36 * a5->u8[v32 + 5] + a3->u8[v31 + 5] * v34 + 32) >> 6;
                if (a8 != 6)
                  result->i8[v33 + 6] = (v36 * a5->u8[v32 + 6] + a3->u8[v31 + 6] * v34 + 32) >> 6;
              }
            }
          }
        }
        v33 += a2;
        v32 += a6;
        v31 += a4;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v12.i64[0] = 0x4040404040404040;
    v12.i64[1] = 0x4040404040404040;
    do
    {
      v13 = 0;
      a10.i8[0] = *a7;
      v14 = (int8x8_t)vsubq_s8(v12, a10).u64[0];
      do
      {
        v15 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)a10.i8, 0);
        v16 = (uint8x16_t)vdupq_lane_s8(v14, 0);
        *(int8x16_t *)result[v13 / 8].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v16.i8, a5[v13 / 8]), *(uint8x8_t *)v15.i8, a3[v13 / 8]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v16, *(uint8x16_t *)a5[v13 / 8].i8), v15, *(uint8x16_t *)a3[v13 / 8].i8), 6uLL);
        v13 += 16;
      }
      while (v13 < a8);
      ++a7;
      a3 = (uint8x8_t *)((char *)a3 + a4);
      a5 = (uint8x8_t *)((char *)a5 + a6);
      result = (int8x8_t *)((char *)result + a2);
      LODWORD(v11) = v11 - 1;
    }
    while ((_DWORD)v11);
  }
  return result;
}

void av1_set_entropy_contexts(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int __c, int a7, int a8)
{
  char *v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v9 = (char *)(*(_QWORD *)(a2 + 112) + a7);
  v10 = (char *)(*(_QWORD *)(a2 + 120) + a8);
  v11 = a5;
  v12 = tx_size_wide_unit_1[v11];
  v13 = *(int *)((char *)&tx_size_high_unit_1 + v11 * 4);
  if (!__c)
  {
    bzero((void *)(*(_QWORD *)(a2 + 112) + a7), tx_size_wide_unit_1[a5]);
    goto LABEL_10;
  }
  v17 = *(_DWORD *)(a1 + 7928);
  if (v17 < 0)
  {
    v19 = (((v17 >> (*(_BYTE *)(a1 + 2608 * a3 + 20) + 3)) + block_size_wide_4[a4]) >> 2) - a7;
    if ((int)v12 >= v19)
      v20 = v19;
    else
      v20 = v12;
    memset(v9, __c, v20);
    bzero(&v9[v20], (int)v12 - v20);
    v18 = *(_DWORD *)(a1 + 7936);
    if (v18 < 0)
      goto LABEL_11;
LABEL_10:
    memset(v10, __c, v13);
    return;
  }
  memset(v9, __c, v12);
  v18 = *(_DWORD *)(a1 + 7936);
  if ((v18 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_11:
  v21 = (((v18 >> (*(_BYTE *)(a1 + 2608 * a3 + 24) + 3)) + block_size_high_3[a4]) >> 2) - a8;
  if ((int)v13 >= v21)
    v22 = v21;
  else
    v22 = v13;
  memset(v10, __c, v22);
  bzero(&v10[v22], (int)v13 - v22);
}

void av1_reset_entropy_context(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  void **v5;
  unsigned __int8 *v6;
  uint64_t v7;
  size_t v8;

  v3 = (a3 - 1) * *(unsigned __int8 *)(a1 + 12);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = (v3 + 1);
    v5 = (void **)(a1 + 136);
    v6 = &av1_ss_size_lookup[4 * a2];
    do
    {
      v7 = v6[2 * *((int *)v5 - 29) + *((int *)v5 - 28)];
      v8 = mi_size_high_5[v7];
      bzero(*(v5 - 1), mi_size_wide_6[v7]);
      bzero(*v5, v8);
      v5 += 326;
      --v4;
    }
    while (v4);
  }
}

uint16x8_t *av1_cdef_copy_sb8_16_lowbd(uint16x8_t *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  return cdef_copy_rect8_8bit_to_16bit_neon(a1, a2, (uint8x8_t *)(a3 + a5 + a6 * (uint64_t)a4), a6, a8, a7);
}

void av1_cdef_init_fb_row(uint64_t a1, _DWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, int a7)
{
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  signed int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint16x8_t **v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint16x8_t *v39;
  int v40;
  uint64_t v41;
  uint16x8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint16x8_t *v45;
  uint16x8_t *v46;
  uint16x8_t v47;
  __int128 *v48;
  __int8 *v49;
  __int128 v50;
  uint16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint16x8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint16x8_t *v57;
  uint16x8_t *v58;
  uint16x8_t v59;
  __int128 *v60;
  __int8 *v61;
  __int128 v62;
  signed int v63;
  int v64;
  uint64_t v65;
  int v66;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24680) + 77);
  v12 = *(_DWORD *)(a1 + 532);
  v14 = v12 + 15;
  v13 = v12 < -15;
  v15 = v12 + 30;
  if (!v13)
    v15 = v14;
  v16 = v15 >> 4;
  v17 = 4 * *(_DWORD *)(a1 + 536) + 15;
  *(_DWORD *)(a3 + 592) = a7 == 0;
  v18 = v16 - 1;
  v64 = 16 * a7 + 16;
  v19 = v16 - 1 == a7 || 16 * a7 + 16 == *(_DWORD *)(a1 + 532);
  v20 = v17 & 0xFFFFFFF0;
  *(_DWORD *)(a3 + 600) = v19;
  *(_QWORD *)a3 = a5;
  *(_DWORD *)(a3 + 608) = *(_DWORD *)(a1 + 23568);
  *(_DWORD *)(a3 + 612) = *(_DWORD *)(*(_QWORD *)(a1 + 24680) + 72) - 8;
  bzero((void *)(a3 + 628), 0x400uLL);
  bzero((void *)(a3 + 1652), 0x400uLL);
  v66 = 2 * (a7 & 1);
  v21 = v66 ^ 2;
  v22 = 3;
  if (v11)
    v22 = 1;
  v65 = v22;
  if (v18 == a7)
  {
    v23 = v20 >> a2[5];
    *(_QWORD *)(a3 + 32) = *a4 + 8 * v23;
    *(_QWORD *)(a3 + 8) = *a4 + 2 * v23 * v21;
    if (!v11)
    {
      v24 = v20 >> a2[657];
      *(_QWORD *)(a3 + 40) = a4[1] + 8 * v24;
      *(_QWORD *)(a3 + 16) = a4[1] + 2 * v24 * v21;
      v25 = v20 >> a2[1309];
      *(_QWORD *)(a3 + 48) = a4[2] + 8 * v25;
      *(_QWORD *)(a3 + 24) = a4[2] + 2 * v25 * v21;
    }
  }
  else
  {
    v26 = 0;
    v27 = v20;
    v63 = v20;
    v28 = v64;
    do
    {
      v29 = &a2[652 * v26];
      v30 = v27 >> v29[5];
      v31 = a4[v26];
      v32 = a3 + 8 * v26;
      *(_QWORD *)(v32 + 32) = v31 + 8 * v30;
      v33 = (uint16x8_t **)(v32 + 32);
      v36 = *((_QWORD *)v29 + 4);
      v35 = v29 + 8;
      v34 = v36;
      v37 = v28 << (2 - *(v35 - 2));
      v38 = v30;
      v39 = (uint16x8_t *)(v31 + 2 * v30 * v66);
      v40 = v37 - 2;
      v41 = (int)v35[6];
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 76))
      {
        v42 = (uint16x8_t *)(2 * v34 + 2 * (int)v41 * (uint64_t)v40);
        if ((int)v38 < 8)
        {
          if ((_DWORD)v38 == 4)
          {
            v39->i64[0] = v42->i64[0];
            *(uint64_t *)((char *)v39->i64 + 2 * v38) = *(uint64_t *)((char *)v42->i64 + 2 * v41);
          }
        }
        else
        {
          v43 = v38;
          v44 = v38;
          v45 = v42;
          v46 = v39;
          do
          {
            v47 = *v45++;
            *v46++ = v47;
            v44 -= 8;
          }
          while (v44 > 7);
          if ((_DWORD)v44 == 4)
            v46->i64[0] = v45->i64[0];
          v48 = (__int128 *)&v42->i8[2 * v41];
          v49 = &v39->i8[2 * v38];
          do
          {
            v50 = *v48++;
            *(_OWORD *)v49 = v50;
            v49 += 16;
            v43 -= 8;
          }
          while (v43 > 7);
          if ((_DWORD)v43 == 4)
            *(_QWORD *)v49 = *(_QWORD *)v48;
        }
      }
      else
      {
        cdef_copy_rect8_8bit_to_16bit_neon(v39, v38, (uint8x8_t *)(v34 + (int)v41 * (uint64_t)v40), v41, v38, 2);
        v21 = v66 ^ 2;
        v27 = v63;
        v28 = v64;
      }
      *(_QWORD *)(a3 + 8 * v26 + 8) = a4[v26] + 2 * (int)v38 * v21;
      v51 = *v33;
      v52 = *(_QWORD *)v35;
      v53 = (int)v35[6];
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 76))
      {
        v54 = (uint16x8_t *)(2 * v52 + 2 * (int)v53 * (uint64_t)v37);
        if ((int)v38 < 8)
        {
          if ((_DWORD)v38 == 4)
          {
            v51->i64[0] = v54->i64[0];
            *(uint64_t *)((char *)v51->i64 + 2 * v38) = *(uint64_t *)((char *)v54->i64 + 2 * v53);
          }
        }
        else
        {
          v55 = v38;
          v56 = v38;
          v57 = v54;
          v58 = *v33;
          do
          {
            v59 = *v57++;
            *v58++ = v59;
            v56 -= 8;
          }
          while (v56 > 7);
          if ((_DWORD)v56 == 4)
            v58->i64[0] = v57->i64[0];
          v60 = (__int128 *)&v54->i8[2 * v53];
          v61 = &v51->i8[2 * v38];
          do
          {
            v62 = *v60++;
            *(_OWORD *)v61 = v62;
            v61 += 16;
            v55 -= 8;
          }
          while (v55 > 7);
          if ((_DWORD)v55 == 4)
            *(_QWORD *)v61 = *(_QWORD *)v60;
        }
      }
      else
      {
        cdef_copy_rect8_8bit_to_16bit_neon(v51, v38, (uint8x8_t *)(v52 + (int)v53 * (uint64_t)v37), v53, v38, 2);
        v21 = v66 ^ 2;
        v27 = v63;
        v28 = v64;
      }
      ++v26;
    }
    while (v26 != v65);
  }
}

uint64_t av1_cdef_fb_row(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(void), uint64_t a8)
{
  int v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;
  unsigned int v23;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v30;
  _BOOL4 v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v74;
  _OWORD v75[3];
  __int128 v76;
  _OWORD v77[32];
  int v78;
  int v79;
  int v80;
  int v81;
  _BOOL4 v82;
  _BOOL4 v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  _BYTE v89[1024];
  _BYTE v90[1024];
  int __n;
  int __n_4;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  memset(v77, 0, 448);
  v76 = 0u;
  memset(v75, 0, sizeof(v75));
  v11 = *(_DWORD *)(a1 + 536);
  v95 = 1;
  if (v11 >= -15)
    v12 = v11 + 15;
  else
    v12 = v11 + 30;
  v94 = 0x100000001;
  result = a7();
  if (!a8 || *(int *)(a1 + 23712) <= 1)
  {
    if (v11 < 1)
      return result;
    goto LABEL_10;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)a8);
  v14 = *(unsigned __int8 *)(a8 + 28);
  result = pthread_mutex_unlock(*(pthread_mutex_t **)a8);
  if (!v14 && v11 > 0)
  {
LABEL_10:
    v15 = 0;
    LODWORD(v16) = v12 >> 4;
    v74 = 16 * a6;
    if (v12 >> 4 <= 1)
      v16 = 1;
    else
      v16 = v16;
    v66 = v16;
    v67 = ((v12 >> 4) - 1);
    do
    {
      v82 = v15 == 0;
      if (v15 == v67)
      {
        v17 = 1;
        v18 = 16 * v67;
      }
      else
      {
        v18 = 16 * v15;
        v17 = 16 * v15 + 16 == *(_DWORD *)(a1 + 536);
      }
      v83 = v17;
      v19 = *(_QWORD *)(a1 + 568);
      v20 = *(int *)(a1 + 580);
      v21 = *(_QWORD *)(v19 + 8 * (v18 + v20 * v74));
      v22 = (*(unsigned __int16 *)(v21 + 167) << 17 >> 4) & 0xFF000000;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 77))
        v23 = 1;
      else
        v23 = 3;
      if (v21)
        _ZF = v22 == -16777216;
      else
        _ZF = 1;
      if (_ZF)
        goto LABEL_73;
      v25 = *(_DWORD *)(a1 + 4 * (v22 >> 24) + 23576);
      v26 = v25 + 3;
      if (v25 >= 0)
        v27 = *(_DWORD *)(a1 + 4 * (v22 >> 24) + 23576);
      else
        v27 = v25 + 3;
      v28 = v25 - (v27 & 0xFFFFFFFC);
      if (v28 == 3)
        v28 = 4;
      v71 = v28;
      v30 = v26 < 7 && v28 == 0;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 77))
      {
        v69 = 0;
        v70 = 0;
        v31 = 1;
        if (v30)
          goto LABEL_73;
      }
      else
      {
        v32 = *(_DWORD *)(a1 + 4 * ((uint64_t)v22 >> 24) + 23640);
        v33 = v32 + 3;
        if (v32 >= 0)
          v34 = v32;
        else
          v34 = v32 + 3;
        v35 = v32 - (v34 & 0xFFFFFFFC);
        if (v35 == 3)
          v35 = 4;
        v69 = v35;
        v70 = v34 >> 2;
        v31 = v33 < 7 && v35 == 0;
        if (!v31)
          v30 = 0;
        if (v30)
          goto LABEL_73;
      }
      v37 = *(_DWORD *)(a1 + 532) - v74;
      if (v37 < 1 || (v38 = *(_DWORD *)(a1 + 536), v39 = v38 - v18, v38 <= (int)v18))
      {
        v88 = 0;
        goto LABEL_73;
      }
      v40 = 0;
      v41 = 0;
      v68 = v27 >> 2;
      if (v37 >= 16)
        v42 = 16;
      else
        v42 = v37;
      if (v39 >= 16)
        v43 = 16;
      else
        v43 = v39;
      v44 = v19 + 8;
      v45 = v19 + 8 + 8 * v18 + (((unint64_t)(int)v74 >> 4 << 7) | 8) * v20;
      v46 = 16 * v20;
      v47 = v44 + 8 * v18 + 8 * (int)v74 * v20;
      do
      {
        v48 = 0;
        v49 = 0;
        result = v47;
        v50 = v45;
        do
        {
          if (!*(_BYTE *)(*(_QWORD *)(result - 8) + 144)
            || !*(_BYTE *)(*(_QWORD *)result + 144)
            || !*(_BYTE *)(*(_QWORD *)(v50 - 8) + 144)
            || !*(_BYTE *)(*(_QWORD *)v50 + 144))
          {
            v51 = (char *)v77 + 2 * v41;
            *v51 = v40 >> 1;
            v51[1] = v48;
            ++v41;
          }
          v49 += 2;
          ++v48;
          v50 += 16;
          result += 16;
        }
        while (v49 < v43);
        v40 += 2;
        v45 += v46;
        v47 += v46;
      }
      while (v40 < v42);
      v88 = v41;
      if (v41)
      {
        v52 = 0;
        v53 = 0;
        v54 = 2608 * v23;
        v55 = (int *)&v94;
        while (v53)
        {
          if (v31)
          {
            *v55++ = 0;
            v53 += 2608;
            ++v52;
            if (v54 == v53)
              goto LABEL_74;
          }
          else
          {
            _X8 = a2 + v53 + 2640;
            v86 = v70;
            v87 = v69;
            __asm { PRFM            #0, [X8] }
            *((_QWORD *)&v76 + 1) = *(_QWORD *)(a2 + v53 + 32);
            __n = *(_DWORD *)(a2 + v53 + 56);
            v64 = *(_DWORD *)(a2 + v53 + 24);
            v78 = *(_DWORD *)(a2 + v53 + 20);
            v79 = v64;
            v80 = 2 - v78;
            v81 = 2 - v64;
            v93 = (_DWORD)v74 << (2 - v64);
            __n_4 = (_DWORD)v18 << (2 - v78);
            cdef_prepare_fb(a1, (uint64_t)v75, a4, *v55, v15, a6, v52);
            v65 = *((_QWORD *)&v76 + 1) + __n_4 + v93 * (uint64_t)__n;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 76))
              result = av1_cdef_filter_fb(0, 2 * v65, __n, *(_QWORD *)&v75[0] + 592, v78, v79, (uint64_t)v89, 0, (uint64_t)v90, v52, (uint64_t)v77, v88, v86, v87, v84, v85);
            else
              result = av1_cdef_filter_fb(v65, 0, __n, *(_QWORD *)&v75[0] + 592, v78, v79, (uint64_t)v89, 0, (uint64_t)v90, v52, (uint64_t)v77, v88, v86, v87, v84, v85);
            v56 = (uint64_t *)v55;
LABEL_78:
            *(_DWORD *)v56 = 1;
            v53 += 2608;
            ++v55;
            ++v52;
            if (v54 == v53)
              goto LABEL_74;
          }
        }
        v86 = v68;
        v87 = v71;
        *((_QWORD *)&v76 + 1) = *(_QWORD *)(a2 + 32);
        __n = *(_DWORD *)(a2 + 56);
        v57 = *(_DWORD *)(a2 + 24);
        v78 = *(_DWORD *)(a2 + 20);
        v79 = v57;
        v80 = 2 - v78;
        v81 = 2 - v57;
        v93 = (_DWORD)v74 << (2 - v57);
        __n_4 = (_DWORD)v18 << (2 - v78);
        cdef_prepare_fb(a1, (uint64_t)v75, a4, v94, v15, a6, 0);
        v58 = *((_QWORD *)&v76 + 1) + __n_4 + v93 * (uint64_t)__n;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 76))
          result = av1_cdef_filter_fb(0, 2 * v58, __n, *(_QWORD *)&v75[0] + 592, v78, v79, (uint64_t)v89, 0, (uint64_t)v90, 0, (uint64_t)v77, v88, v86, v87, v84, v85);
        else
          result = av1_cdef_filter_fb(v58, 0, __n, *(_QWORD *)&v75[0] + 592, v78, v79, (uint64_t)v89, 0, (uint64_t)v90, 0, (uint64_t)v77, v88, v86, v87, v84, v85);
        v56 = &v94;
        goto LABEL_78;
      }
LABEL_73:
      result = __memset_chk();
LABEL_74:
      ++v15;
    }
    while (v15 != v66);
  }
  return result;
}

uint64_t av1_cdef_frame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;

  v7 = *(_QWORD *)(a2 + 24680);
  if (*(_BYTE *)(v7 + 77))
    v8 = 1;
  else
    v8 = 3;
  v9 = *(_DWORD *)(a2 + 532);
  result = av1_setup_dst_planes(a3 + 16, *(_BYTE *)(v7 + 28), a1, 0, 0, 0, v8);
  if (v9 >= 1)
  {
    v11 = 0;
    do
      result = av1_cdef_fb_row(a2, a3, a2 + 23480, a2 + 23456, *(_QWORD *)(a2 + 23504), v11++, a4, 0);
    while ((v9 + 15) >> 4 != v11);
  }
  return result;
}

void cdef_prepare_fb(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  _DWORD *v8;
  _WORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint16x8_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  __int16 *v54;
  __int16 v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  __int16 *v60;
  __int16 v61;
  _WORD *v62;
  _WORD *v63;
  _WORD *v64;
  _BOOL4 v65;
  _WORD *v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  char *v70;
  _WORD *v71;
  int v72;
  int v73;
  _WORD *v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _WORD *v81;
  __int16 *v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;
  _WORD *v86;
  __int16 *v87;
  __int16 v88;
  _WORD *v89;
  _WORD *v90;
  _WORD *v91;
  _WORD *v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  _WORD *v96;
  _WORD *v97;
  uint64_t v98;
  _WORD *v99;
  _WORD *v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  __int128 *v104;
  _OWORD *v105;
  uint64_t v106;
  __int128 v107;
  __int128 *v108;
  _OWORD *v109;
  uint64_t v110;
  __int128 v111;
  __int128 *v112;
  _OWORD *v113;
  uint64_t v114;
  __int128 v115;
  __int128 *v116;
  _OWORD *v117;
  uint64_t v118;
  __int128 v119;
  int v121;
  int v122;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;

  v8 = (_DWORD *)a2;
  v9 = *(_WORD **)a2;
  v10 = *(_DWORD *)(a1 + 536);
  v11 = 4 * v10 + 15;
  v12 = *(_DWORD *)(a1 + 532);
  v13 = v12 + 15;
  if (v12 < -15)
    v13 = v12 + 30;
  v14 = v13 >> 4;
  v15 = v10 + 15;
  if (v10 < -15)
    v15 = v10 + 30;
  v16 = v15 >> 4;
  if (a4)
    v17 = 0;
  else
    v17 = -8;
  v18 = v10 - 16 * a5;
  if (v18 >= 16)
    v18 = 16;
  v19 = v12 - 16 * a6;
  if (v19 >= 16)
    v19 = 16;
  v20 = (v18 << *(_DWORD *)(a2 + 584));
  v21 = v19 << *(_DWORD *)(a2 + 588);
  v22 = a2 + 8 * a7;
  v23 = *(_QWORD *)(a1 + 24680);
  if (a7)
    v24 = *(_DWORD *)(v23 + 96);
  else
    LOBYTE(v24) = 0;
  v25 = v11 & 0xFFFFFFF0;
  v125 = *(_QWORD *)(v22 + 8);
  v26 = *(_QWORD *)(v22 + 32);
  v127 = v16 - 1;
  v128 = v20 + 8;
  if (v16 - 1 == a5)
    v27 = v20;
  else
    v27 = v20 + 8;
  v28 = v14 - 1;
  if (v14 - 1 == a6)
    v29 = v19 << *(_DWORD *)(a2 + 588);
  else
    v29 = v21 + 2;
  v121 = v29;
  v30 = (uint16x8_t *)&v9[v17 + 296];
  v31 = *(_QWORD *)(a2 + 56);
  v32 = *(_DWORD *)(a2 + 2684);
  v33 = *(int *)(a2 + 2680) + (uint64_t)v17;
  v34 = *(int *)(a2 + 2676);
  v35 = (v27 - v17);
  v126 = a5;
  if (*(_BYTE *)(v23 + 76))
  {
    v36 = (uint64_t *)(2 * v31 + 2 * (v33 + (int)v34 * (uint64_t)v32));
    v37 = a6;
    if ((int)v35 < 8)
    {
      if ((_DWORD)v35 == 4)
      {
        v44 = v19 << *(_DWORD *)(a2 + 588);
        do
        {
          v30->i64[0] = *v36;
          v30 += 18;
          v36 = (uint64_t *)((char *)v36 + 2 * v34);
          --v44;
        }
        while (v44);
      }
    }
    else
    {
      v38 = v19 << *(_DWORD *)(a2 + 588);
      do
      {
        v39 = 0;
        for (i = v35; i > 7; i -= 8)
        {
          v30[v39 / 0x10] = *(uint16x8_t *)&v36[v39 / 8];
          v39 += 16;
        }
        if ((_DWORD)i == 4)
          v30[v39 / 0x10].i64[0] = v36[v39 / 8];
        v30 += 18;
        v36 = (uint64_t *)((char *)v36 + 2 * v34);
        --v38;
      }
      while (v38);
    }
  }
  else
  {
    v37 = a6;
    v41 = v26;
    v42 = v20;
    v43 = v28;
    cdef_copy_rect8_8bit_to_16bit_neon(v30, 144, (uint8x8_t *)(v31 + (int)v34 * (uint64_t)v32 + (int)v33), v34, v35, v21);
    v28 = v43;
    v20 = v42;
    v26 = v41;
  }
  v45 = 144 * (v21 + 2);
  v129 = v25 >> v24;
  v122 = v21;
  if (v28 <= v37)
  {
    v67 = v8;
    v68 = v28;
    v69 = v26;
    if ((int)v20 > 0)
    {
      v70 = (char *)v9 + ((2 * v45) | 0x10);
      memset_pattern16(v70, &unk_208F562B0, 2 * v20);
      memset_pattern16(v70 + 288, &unk_208F562B0, 2 * v20);
      v45 = 144 * (v21 + 2);
    }
    v65 = v126 > 0;
    goto LABEL_52;
  }
  v46 = (int)v8[670];
  v47 = v126;
  if ((int)v20 < 1)
    goto LABEL_45;
  if (v20 >= 0x10 && (v48 = &v9[v45], v49 = 2 * v46 + v26, (unint64_t)v48 - v49 + 16 >= 0x20))
  {
    v50 = v20 & 0x7FFFFFF0;
    v112 = (__int128 *)(v49 + 16);
    v113 = v48 + 16;
    v114 = v20 & 0xFFFFFFF0;
    do
    {
      v115 = *v112;
      *(v113 - 1) = *(v112 - 1);
      *v113 = v115;
      v112 += 2;
      v113 += 2;
      v114 -= 16;
    }
    while (v114);
    if (v50 == v20)
      goto LABEL_40;
  }
  else
  {
    v50 = 0;
  }
  v51 = v20 - v50;
  v52 = 2 * v50;
  v53 = &v9[v50 + 8 + v45];
  v54 = (__int16 *)(v26 + v52 + 2 * v46);
  do
  {
    v55 = *v54++;
    *v53++ = v55;
    --v51;
  }
  while (v51);
LABEL_40:
  if (v20 >= 0x10 && (v56 = &v9[v45], (unint64_t)v56 + -v26 + -2 * v129 + -2 * v46 + 304 >= 0x20))
  {
    v57 = v20 & 0x7FFFFFF0;
    v116 = (__int128 *)(2 * v46 + 2 * v129 + v26 + 16);
    v117 = v56 + 160;
    v118 = v20 & 0xFFFFFFF0;
    do
    {
      v119 = *v116;
      *(v117 - 1) = *(v116 - 1);
      *v117 = v119;
      v116 += 2;
      v117 += 2;
      v118 -= 16;
    }
    while (v118);
    if (v57 == v20)
      goto LABEL_45;
  }
  else
  {
    v57 = 0;
  }
  v58 = v20 - v57;
  v59 = &v9[v57 + 152 + v45];
  v60 = (__int16 *)(v26 + 2 * (v57 + v129) + 2 * v46);
  do
  {
    v61 = *v60++;
    *v59++ = v61;
    --v58;
  }
  while (v58);
LABEL_45:
  if (v126 >= 1)
  {
    v62 = &v9[v45];
    v63 = (_WORD *)(v26 + 2 * ((int)v46 - 8));
    *v62 = *v63;
    v62[1] = v63[1];
    v62[2] = v63[2];
    v62[3] = v63[3];
    v62[4] = v63[4];
    v62[5] = v63[5];
    v62[6] = v63[6];
    v62[7] = v63[7];
    v64 = &v63[v129];
    v62[144] = *v64;
    v62[145] = v64[1];
    v62[146] = v64[2];
    v62[147] = v64[3];
    v62[148] = v64[4];
    v62[149] = v64[5];
    v62[150] = v64[6];
    v62[151] = v64[7];
    v65 = 1;
    v66 = &v9[v45 + v128];
    if (v127 <= v126)
      goto LABEL_57;
    goto LABEL_53;
  }
  v67 = v8;
  v68 = v28;
  v69 = v26;
  v65 = 0;
LABEL_52:
  v71 = &v9[v45];
  v72 = v45;
  memset_pattern16(v71, &unk_208F562B0, 0x10uLL);
  memset_pattern16(v71 + 144, &unk_208F562B0, 0x10uLL);
  v73 = v72;
  v26 = v69;
  v28 = v68;
  v8 = v67;
  v66 = &v9[v73 + v128];
  v47 = v126;
  if (v127 <= v126)
    goto LABEL_57;
LABEL_53:
  if (v28 > v37)
  {
    v74 = (_WORD *)(v26 + 2 * (v8[670] + (int)v20));
    *v66 = *v74;
    v66[1] = v74[1];
    v66[2] = v74[2];
    v66[3] = v74[3];
    v66[4] = v74[4];
    v66[5] = v74[5];
    v66[6] = v74[6];
    v66[7] = v74[7];
    v75 = &v74[v129];
    v66[144] = *v75;
    v66[145] = v75[1];
    v66[146] = v75[2];
    v66[147] = v75[3];
    v66[148] = v75[4];
    v66[149] = v75[5];
    v66[150] = v75[6];
    v66[151] = v75[7];
    v76 = v125;
    if (v37 >= 1)
      goto LABEL_58;
LABEL_55:
    if ((int)v20 >= 1)
    {
      memset_pattern16(v9 + 8, &unk_208F562B0, 2 * v20);
      memset_pattern16(v9 + 152, &unk_208F562B0, 2 * v20);
    }
    goto LABEL_71;
  }
LABEL_57:
  memset_pattern16(v66, &unk_208F562B0, 0x10uLL);
  memset_pattern16(v66 + 144, &unk_208F562B0, 0x10uLL);
  v76 = v125;
  if (v37 < 1)
    goto LABEL_55;
LABEL_58:
  v77 = (int)v8[670];
  if ((int)v20 < 1)
    goto LABEL_69;
  if (v20 < 0x10 || (unint64_t)v9 + -v76 + -2 * v77 + 16 < 0x20)
  {
    v78 = 0;
LABEL_62:
    v79 = v20 - v78;
    v80 = 2 * v78;
    v81 = &v9[v78 + 8];
    v82 = (__int16 *)(v76 + v80 + 2 * v77);
    do
    {
      v83 = *v82++;
      *v81++ = v83;
      --v79;
    }
    while (v79);
    goto LABEL_64;
  }
  v78 = v20 & 0x7FFFFFF0;
  v104 = (__int128 *)(2 * v77 + v76 + 16);
  v105 = v9 + 16;
  v106 = v20 & 0xFFFFFFF0;
  do
  {
    v107 = *v104;
    *(v105 - 1) = *(v104 - 1);
    *v105 = v107;
    v104 += 2;
    v105 += 2;
    v106 -= 16;
  }
  while (v106);
  if (v78 != v20)
    goto LABEL_62;
LABEL_64:
  if (v20 < 0x10 || (unint64_t)v9 + -v76 + -2 * v129 + -2 * v77 + 304 < 0x20)
  {
    v84 = 0;
LABEL_67:
    v85 = v20 - v84;
    v86 = &v9[v84 + 152];
    v87 = (__int16 *)(v76 + 2 * (v84 + v129) + 2 * v77);
    do
    {
      v88 = *v87++;
      *v86++ = v88;
      --v85;
    }
    while (v85);
    goto LABEL_69;
  }
  v84 = v20 & 0x7FFFFFF0;
  v108 = (__int128 *)(2 * v77 + 2 * v129 + v76 + 16);
  v109 = v9 + 160;
  v110 = v20 & 0xFFFFFFF0;
  do
  {
    v111 = *v108;
    *(v109 - 1) = *(v108 - 1);
    *v109 = v111;
    v108 += 2;
    v109 += 2;
    v110 -= 16;
  }
  while (v110);
  if (v84 != v20)
    goto LABEL_67;
LABEL_69:
  if (!v65)
  {
LABEL_71:
    memset_pattern16(v9, &unk_208F562B0, 0x10uLL);
    memset_pattern16(v9 + 144, &unk_208F562B0, 0x10uLL);
    goto LABEL_72;
  }
  v89 = (_WORD *)(v76 + 2 * ((int)v77 - 8));
  *v9 = *v89;
  v9[1] = v89[1];
  v9[2] = v89[2];
  v9[3] = v89[3];
  v9[4] = v89[4];
  v9[5] = v89[5];
  v9[6] = v89[6];
  v9[7] = v89[7];
  v90 = &v89[v129];
  v9[144] = *v90;
  v9[145] = v90[1];
  v9[146] = v90[2];
  v9[147] = v90[3];
  v9[148] = v90[4];
  v9[149] = v90[5];
  v9[150] = v90[6];
  v9[151] = v90[7];
LABEL_72:
  v91 = &v9[v128];
  if (v37 < 1 || v127 <= v47)
  {
    memset_pattern16(&v9[v128], &unk_208F562B0, 0x10uLL);
    memset_pattern16(v91 + 144, &unk_208F562B0, 0x10uLL);
    v94 = *(_QWORD *)(a3 + 8 * a7);
    if (!a4)
      goto LABEL_80;
  }
  else
  {
    v92 = (_WORD *)(v125 + 2 * (v8[670] + (int)v20));
    *v91 = *v92;
    v91[1] = v92[1];
    v91[2] = v92[2];
    v91[3] = v92[3];
    v91[4] = v92[4];
    v91[5] = v92[5];
    v91[6] = v92[6];
    v91[7] = v92[7];
    v93 = &v92[v129];
    v91[144] = *v93;
    v91[145] = v93[1];
    v91[146] = v93[2];
    v91[147] = v93[3];
    v91[148] = v93[4];
    v91[149] = v93[5];
    v91[150] = v93[6];
    v91[151] = v93[7];
    v94 = *(_QWORD *)(a3 + 8 * a7);
    if (!a4)
      goto LABEL_80;
  }
  if (v121 < -1)
    goto LABEL_83;
  v95 = (v121 + 2);
  v96 = (_WORD *)(v94 + 8);
  v97 = v9 + 4;
  do
  {
    *(v97 - 4) = *(v96 - 4);
    *(v97 - 3) = *(v96 - 3);
    *(v97 - 2) = *(v96 - 2);
    *(v97 - 1) = *(v96 - 1);
    *v97 = *v96;
    v97[1] = v96[1];
    v97[2] = v96[2];
    v97[3] = v96[3];
    v96 += 8;
    v97 += 144;
    --v95;
  }
  while (v95);
LABEL_80:
  if (v121 >= -1)
  {
    v98 = (v121 + 2);
    v99 = &v9[(int)v20 + 4];
    v100 = (_WORD *)(v94 + 8);
    do
    {
      *(v100 - 4) = *(v99 - 4);
      *(v100 - 3) = *(v99 - 3);
      *(v100 - 2) = *(v99 - 2);
      *(v100 - 1) = *(v99 - 1);
      *v100 = *v99;
      v100[1] = v99[1];
      v100[2] = v99[2];
      v100[3] = v99[3];
      v99 += 144;
      v100 += 8;
      --v98;
    }
    while (v98);
  }
LABEL_83:
  if (v8[149] && v122 >= -3)
  {
    v101 = (v122 + 4);
    do
    {
      memset_pattern16(v9, &unk_208F562B0, 0x10uLL);
      v9 += 144;
      --v101;
    }
    while (v101);
  }
  if (v8[151])
    v102 = v122 < -3;
  else
    v102 = 1;
  if (!v102)
  {
    v103 = (v122 + 4);
    do
    {
      memset_pattern16(v91, &unk_208F562B0, 0x10uLL);
      v91 += 144;
      --v103;
    }
    while (v103);
  }
}

uint64_t av1_cdef_filter_fb(uint64_t result, uint64_t a2, size_t __n, uint64_t a4, int a5, int a6, uint64_t a7, _DWORD *a8, uint64_t a9, int a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  __int32 *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  __int32 *v87;
  uint64_t v89;
  uint64_t v90;
  uint16x8_t *v91;
  uint16x8_t *v92;
  _DWORD *v93;
  uint64_t v94;
  unsigned int v96;
  uint64_t v97;
  char v98;

  v16 = a7;
  v17 = a4;
  v18 = __n;
  v97 = result;
  v20 = a10;
  v21 = a12;
  v22 = a13 << a16;
  v23 = a14 << a16;
  v24 = 3 - a5;
  v98 = 3 - a6;
  if (!a8 || (!v22 ? (v25 = v23 == 0) : (v25 = 0), !v25))
  {
    v30 = a9;
    v93 = a8;
    if (a10 == 1)
    {
      if (a5 != a6 && a12 >= 1)
      {
        v39 = &av1_cdef_filter_fb_conv422;
        if (!a5)
          v39 = &av1_cdef_filter_fb_conv440;
        v40 = (unsigned __int8 *)(a11 + 1);
        v41 = a12;
        do
        {
          v42 = *(v40 - 1);
          v43 = *v40;
          v40 += 2;
          *(_DWORD *)(a7 + (v42 << 6) + 4 * v43) = v39[*(int *)(a7 + (v42 << 6) + 4 * v43)];
          --v41;
        }
        while (v41);
      }
    }
    else if (!a10)
    {
      if (a8)
      {
        if (!*a8)
        {
          if (a12 < 2)
          {
            v38 = 0;
          }
          else
          {
            v85 = __n;
            v31 = 0;
            v32 = (unsigned __int8 *)(a11 + 3);
            do
            {
              v33 = *(v32 - 3);
              v34 = *(v32 - 2);
              v35 = *(v32 - 1);
              v36 = *v32;
              v32 += 4;
              v37 = 4 * v36;
              v87 = (__int32 *)(v30 + (v35 << 6) + v37);
              v89 = v16 + (v35 << 6);
              v91 = (uint16x8_t *)(v17 + 2 * (8 * v36 + 1152 * v35));
              *(_DWORD *)(v16 + v33 + 4 * v34) = cdef_find_dir_neon((uint16x8_t *)(v17 + 2 * (8 * v34 + 1152 * v33)), 144, (__int32 *)(v30 + (v33 << 6) + 4 * v34), a16);
              v30 = a9;
              v17 = a4;
              result = cdef_find_dir_neon(v91, 144, v87, a16);
              *(_DWORD *)(v89 + v37) = result;
              v31 += 2;
            }
            while (a12 - 1 > v31);
            v38 = v31 & 0xFFFFFFFE;
            v20 = a10;
            v23 = a14 << a16;
            v22 = a13 << a16;
            a8 = v93;
            v18 = v85;
          }
          if ((a12 & 1) != 0)
          {
            v69 = (unsigned __int8 *)(a11 + 2 * v38);
            v70 = *v69;
            v71 = v69[1];
            v72 = v70 << 6;
            v73 = 4 * v71;
            result = cdef_find_dir_neon((uint16x8_t *)(v17 + 2 * (8 * v71 + 1152 * v70)), 144, (__int32 *)(v30 + (v70 << 6) + 4 * v71), a16);
            a8 = v93;
            v23 = a14 << a16;
            v22 = a13 << a16;
            v20 = a10;
            *(_DWORD *)(v16 + v72 + v73) = result;
          }
          *a8 = 1;
          if (!v97)
            goto LABEL_57;
LABEL_39:
          if (a12 >= 1)
          {
            v59 = (unsigned __int8 *)(a11 + 1);
            v60 = 8 * (v23 == 0);
            do
            {
              v61 = *(v59 - 1);
              v62 = *v59;
              if (v20)
              {
                v63 = v22 == 0;
              }
              else
              {
                v64 = *(_DWORD *)(a9 + (v61 << 6) + 4 * v62);
                if (v64 >= 0x40)
                {
                  v66 = __clz(v64 >> 6) ^ 0x1F;
                  if (v66 >= 0xC)
                    v65 = 16;
                  else
                    v65 = v66 + 4;
                }
                else
                {
                  v65 = 4;
                }
                v67 = (v65 * v22 + 8) >> 4;
                if (v64)
                  v68 = v67;
                else
                  v68 = 0;
                v63 = v68 == 0;
              }
              v59 += 2;
              result = (*(uint64_t (**)(uint64_t, size_t, uint64_t))((char *)off_24C0DDE08 + (v60 | (16 * v63))))(v97 + ((_DWORD)v62 << v24) + ((_DWORD)v61 << v98) * (int)v18, v18, v17 + 2 * (((144 * (int)v61) << v98) + ((_DWORD)v62 << v24)));
              --v21;
              v20 = a10;
              v22 = a13 << a16;
            }
            while (v21);
          }
          return result;
        }
      }
      else
      {
        if (a12 < 2)
        {
          v52 = 0;
        }
        else
        {
          v44 = 0;
          v86 = __n;
          v45 = (unsigned __int8 *)(a11 + 3);
          do
          {
            v46 = *(v45 - 3);
            v47 = *(v45 - 2);
            v48 = *(v45 - 1);
            v49 = *v45;
            v45 += 4;
            v50 = 4 * v49;
            v51 = (__int32 *)(v30 + (v48 << 6) + v50);
            v90 = a7 + (v48 << 6);
            v92 = (uint16x8_t *)(v17 + 2 * (8 * v49 + 1152 * v48));
            *(_DWORD *)(a7 + v46 + 4 * v47) = cdef_find_dir_neon((uint16x8_t *)(v17 + 2 * (8 * v47 + 1152 * v46)), 144, (__int32 *)(v30 + (v46 << 6) + 4 * v47), a16);
            v30 = a9;
            v17 = a4;
            result = cdef_find_dir_neon(v92, 144, v51, a16);
            *(_DWORD *)(v90 + v50) = result;
            v44 += 2;
          }
          while (a12 - 1 > v44);
          v52 = v44 & 0xFFFFFFFE;
          v16 = a7;
          v18 = v86;
          v20 = a10;
          v23 = a14 << a16;
          v22 = a13 << a16;
          a8 = v93;
        }
        if ((a12 & 1) != 0)
        {
          v53 = (unsigned __int8 *)(a11 + 2 * v52);
          v54 = *v53;
          v55 = v53[1];
          v56 = v54 << 6;
          v57 = v18;
          v58 = 4 * v55;
          result = cdef_find_dir_neon((uint16x8_t *)(v17 + 2 * (8 * v55 + 1152 * v54)), 144, (__int32 *)(v30 + (v54 << 6) + 4 * v55), a16);
          a8 = v93;
          v23 = a14 << a16;
          v22 = a13 << a16;
          v20 = a10;
          *(_DWORD *)(v16 + v56 + v58) = result;
          v18 = v57;
        }
      }
    }
    if (!v97)
    {
LABEL_57:
      if (a12 >= 1)
      {
        v74 = 0;
        v75 = 1 << v24;
        if (!a8)
          v75 = v18;
        v96 = v75;
        v76 = (unsigned __int8 *)(a11 + 1);
        v94 = 8 * (v23 == 0);
        do
        {
          v77 = *(v76 - 1);
          v78 = *v76;
          v79 = v22;
          if (!v20)
          {
            v80 = *(_DWORD *)(a9 + (v77 << 6) + 4 * v78);
            if (v80 >= 0x40)
            {
              v82 = __clz(v80 >> 6) ^ 0x1F;
              if (v82 >= 0xC)
                v81 = 16;
              else
                v81 = v82 + 4;
            }
            else
            {
              v81 = 4;
            }
            v83 = (v81 * v22 + 8) >> 4;
            if (v80)
              v79 = v83;
            else
              v79 = 0;
          }
          v84 = ((_DWORD)v78 << v24) + ((_DWORD)v77 << v98) * v18;
          if (a8)
            v84 = (_DWORD)v74 << (v98 + v24);
          v76 += 2;
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))((char *)off_24C0DDE28
                                                                       + (v94 | (16 * (v79 == 0)))))(a2 + 2 * v84, v96, v17 + 2 * (((144 * (int)v77) << v98) + ((_DWORD)v78 << v24)));
          ++v74;
          v20 = a10;
          v22 = a13 << a16;
          a8 = v93;
        }
        while (a12 != v74);
      }
      return result;
    }
    goto LABEL_39;
  }
  if (a12 >= 1 && a6 != -28)
  {
    v26 = 0;
    if (1 << v98 <= 1)
      v27 = 1;
    else
      v27 = (1 << v98);
    do
    {
      v28 = 0;
      v29 = (char *)(v17
                   + 2 * (*(unsigned __int8 *)(a11 + 2 * v26 + 1) << v24)
                   + 288 * (*(unsigned __int8 *)(a11 + 2 * v26) << v98));
      do
      {
        result = (uint64_t)memcpy((void *)(a2 + 2 * (((_DWORD)v28++ << v24) + ((_DWORD)v26 << (v98 + v24)))), v29, 2 << v24);
        v29 += 288;
      }
      while (v27 != v28);
      ++v26;
      v17 = a4;
    }
    while (v26 != a12);
  }
  return result;
}

uint16x8_t *cdef_copy_rect8_8bit_to_16bit_neon(uint16x8_t *result, int a2, uint8x8_t *a3, int a4, int a5, int a6)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int16 *v11;
  uint8x8_t *v12;
  __int16 *v13;
  uint8x8_t *v14;

  if (a5 >= 16)
  {
    v6 = 0uLL;
    while (1)
    {
      v7 = 0;
      v8 = 0;
      v9 = (char *)result;
      do
      {
        v10 = *(_OWORD *)&a3->i8[v8];
        vst2q_s8(v9, *(int8x16x2_t *)(&v6 - 1));
        v9 += 32;
        v8 += 16;
        v7 -= 16;
      }
      while (a5 + v7 > 15);
      if (a5 - (int)v8 <= 7)
      {
        if (a5 - (_DWORD)v8 == 4)
        {
LABEL_10:
          result->i16[(int)v8] = a3->u8[(int)v8];
          result->i16[(int)v8 + 1] = a3->u8[(int)v8 + 1];
          result->i16[(int)v8 + 2] = a3->u8[(int)v8 + 2];
          result->i16[(int)v8 + 3] = a3->u8[(int)v8 + 3];
        }
      }
      else
      {
        *(uint16x8_t *)v9 = vmovl_u8(*(uint8x8_t *)((char *)a3 + v8));
        LODWORD(v8) = v8 + 8;
        if (a5 - (_DWORD)v8 == 4)
          goto LABEL_10;
      }
      a3 = (uint8x8_t *)((char *)a3 + a4);
      result = (uint16x8_t *)((char *)result + 2 * a2);
      if (!--a6)
        return result;
    }
  }
  if (a5 < 8)
  {
    if (a5 == 4)
    {
      v13 = &result->i16[2];
      v14 = (uint8x8_t *)((char *)a3 + 1);
      do
      {
        *(v13 - 2) = v14[-1].u8[7];
        *(v13 - 1) = v14->u8[0];
        *v13 = v14->u8[1];
        v13[1] = v14->u8[2];
        v13 += a2;
        v14 = (uint8x8_t *)((char *)v14 + a4);
        --a6;
      }
      while (a6);
    }
  }
  else if (a5 == 12)
  {
    v11 = &result[1].i16[3];
    v12 = (uint8x8_t *)((char *)a3 + 11);
    do
    {
      *(uint16x8_t *)(v11 - 11) = vmovl_u8(*(uint8x8_t *)((char *)v12 - 11));
      *(v11 - 3) = v12[-1].u8[5];
      *(v11 - 2) = v12[-1].u8[6];
      *(v11 - 1) = v12[-1].u8[7];
      *v11 = v12->u8[0];
      v11 += a2;
      v12 = (uint8x8_t *)((char *)v12 + a4);
      --a6;
    }
    while (a6);
  }
  else
  {
    do
    {
      *result = vmovl_u8(*a3);
      a3 = (uint8x8_t *)((char *)a3 + a4);
      result = (uint16x8_t *)((char *)result + 2 * a2);
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t cdef_find_dir_neon(uint16x8_t *a1, int a2, __int32 *a3, int a4)
{
  uint16x8_t v4;
  int16x8_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  uint32x4_t v61;
  int32x4_t v62;
  __int32 v63;
  uint64_t result;
  int32x4_t v65[2];
  uint64_t v66;
  int8x16x2_t v67;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = (uint16x8_t)vdupq_n_s16(-a4);
  v5.i64[0] = 0x7F007F007F007FLL;
  v5.i64[1] = 0x7F007F007F007FLL;
  v6 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*a1, v4), v5);
  v7 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 2 * a2), v4), v5);
  v8 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 4 * a2), v4), v5);
  v9 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 6 * a2), v4), v5);
  v10 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 8 * a2), v4), v5);
  v11 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 10 * a2), v4), v5);
  v12 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 12 * a2), v4), v5);
  v13 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)((char *)a1 + 14 * a2), v4), v5);
  v5.i8[0] = 0;
  v14 = (int8x16_t)vaddq_s16((int16x8_t)v7, (int16x8_t)v6);
  v15 = (int8x16_t)vaddq_s16((int16x8_t)v9, (int16x8_t)v8);
  v16 = vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v15, 8uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v14, 6uLL));
  v17 = vaddq_s16((int16x8_t)vextq_s8(v15, (int8x16_t)v5.u16[0], 8uLL), (int16x8_t)vextq_s8(v14, (int8x16_t)v5.u16[0], 6uLL));
  v18 = vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v15, 0xAuLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v14, 0xCuLL));
  v19 = vaddq_s16((int16x8_t)vextq_s8(v15, (int8x16_t)v5.u16[0], 0xAuLL), (int16x8_t)vextq_s8(v14, (int8x16_t)v5.u16[0], 0xCuLL));
  v20 = vaddq_s16((int16x8_t)v15, (int16x8_t)v14);
  v21 = (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v11, 0xCuLL);
  v22 = (int16x8_t)vextq_s8(v11, (int8x16_t)v5.u16[0], 0xCuLL);
  v23 = (int8x16_t)vaddq_s16((int16x8_t)v11, (int16x8_t)v10);
  v24 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v7, 4uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v6, 2uLL)), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v8, 6uLL)), vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v9, 8uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v10, 0xAuLL))), vaddq_s16(vaddq_s16(v21, (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v12, 0xEuLL)), (int16x8_t)v13));
  v25 = (int8x16_t)vaddq_s16((int16x8_t)v13, (int16x8_t)v12);
  v26 = vaddq_s16(v16, vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v23, 0xAuLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v25, 0xCuLL)));
  v27 = (int8x16_t)vaddq_s16(v17, vaddq_s16((int16x8_t)vextq_s8(v23, (int8x16_t)v5.u16[0], 0xAuLL), (int16x8_t)vextq_s8(v25, (int8x16_t)v5.u16[0], 0xCuLL)));
  v28 = vaddq_s16(v18, vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v23, 8uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v25, 6uLL)));
  v29 = (int8x16_t)vaddq_s16(v19, vaddq_s16((int16x8_t)vextq_s8(v23, (int8x16_t)v5.u16[0], 8uLL), (int16x8_t)vextq_s8(v25, (int8x16_t)v5.u16[0], 6uLL)));
  v30 = vaddq_s16(v20, vaddq_s16((int16x8_t)v23, (int16x8_t)v25));
  v31 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8), v30, v30);
  v32 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vextq_s8(v7, (int8x16_t)v5.u16[0], 4uLL), (int16x8_t)vextq_s8(v6, (int8x16_t)v5.u16[0], 2uLL)), (int16x8_t)vextq_s8(v8, (int8x16_t)v5.u16[0], 6uLL)), vaddq_s16((int16x8_t)vextq_s8(v9, (int8x16_t)v5.u16[0], 8uLL), (int16x8_t)vextq_s8(v10, (int8x16_t)v5.u16[0], 0xAuLL))), vaddq_s16(v22, (int16x8_t)vextq_s8(v12, (int8x16_t)v5.u16[0], 0xEuLL))), unk_208F56370);
  v33 = vmlaq_s32(vmulq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v24.i8), (int32x4_t)xmmword_208F56380), vmlal_high_s16(vmull_high_s16(v32, v32), v24, v24), (int32x4_t)xmmword_208F56390);
  v34 = (int16x8_t)vqtbl1q_s8(v27, unk_208F56370);
  v35 = vmlaq_s32(vmulq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v26.i8, *(int16x4_t *)v26.i8), (int32x4_t)xmmword_208F563A0), vmlal_high_s16(vmull_high_s16(v34, v34), v26, v26), (int32x4_t)xmmword_208F563B0);
  v34.i64[0] = 0x6900000069;
  v34.i64[1] = 0x6900000069;
  v36 = (int16x8_t)vqtbl1q_s8(v29, unk_208F56370);
  v37 = vpaddq_s32(vpaddq_s32(v33, v35), vpaddq_s32(vmulq_s32(v31, (int32x4_t)v34), vmlaq_s32(vmulq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8), (int32x4_t)xmmword_208F563A0), vmlal_high_s16(vmull_high_s16(v36, v36), v28, v28), (int32x4_t)xmmword_208F563B0)));
  v38 = (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v8, 0xCuLL);
  v39 = (int16x8_t)vextq_s8(v8, (int8x16_t)v5.u16[0], 0xCuLL);
  v40 = vaddq_s16(vaddq_s16(v39, (int16x8_t)vextq_s8(v7, (int8x16_t)v5.u16[0], 0xEuLL)), (int16x8_t)vextq_s8(v9, (int8x16_t)v5.u16[0], 0xAuLL));
  v41 = vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v7, 0xCuLL), (int16x8_t)v6), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v8, 8uLL)), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v9, 4uLL));
  v42 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vextq_s8(v7, (int8x16_t)v5.u16[0], 8uLL), (int16x8_t)vextq_s8(v6, (int8x16_t)v5.u16[0], 4uLL)), v39);
  v43 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v7, 0xEuLL), (int16x8_t)v6), v38), vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v9, 0xAuLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v10, 8uLL))), vaddq_s16(vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v11, 6uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v12, 4uLL)), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v13, 2uLL)));
  v44 = (int8x16_t)vaddq_s16(vaddq_s16(v40, vaddq_s16((int16x8_t)vextq_s8(v10, (int8x16_t)v5.u16[0], 8uLL), (int16x8_t)vextq_s8(v11, (int8x16_t)v5.u16[0], 6uLL))), vaddq_s16((int16x8_t)vextq_s8(v12, (int8x16_t)v5.u16[0], 4uLL), (int16x8_t)vextq_s8(v13, (int8x16_t)v5.u16[0], 2uLL)));
  v45 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vextq_s8(v8, (int8x16_t)v5.u16[0], 8uLL), (int16x8_t)vextq_s8(v7, (int8x16_t)v5.u16[0], 0xCuLL)), (int16x8_t)vextq_s8(v9, (int8x16_t)v5.u16[0], 4uLL)), vaddq_s16((int16x8_t)v10, v21)), vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v12, 8uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v13, 4uLL)));
  v46 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vextq_s8(v12, (int8x16_t)v5.u16[0], 8uLL), v22), (int16x8_t)vextq_s8(v13, (int8x16_t)v5.u16[0], 4uLL));
  v47 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v7, 8uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v6, 4uLL)), vaddq_s16(v38, (int16x8_t)v9)), vaddq_s16((int16x8_t)vextq_s8(v10, (int8x16_t)v5.u16[0], 4uLL), (int16x8_t)vextq_s8(v11, (int8x16_t)v5.u16[0], 8uLL))), (int16x8_t)vextq_s8(v12, (int8x16_t)v5.u16[0], 0xCuLL));
  v48 = vaddq_s16(vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v11, 8uLL), (int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v10, 4uLL)), vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v5.u16[0], v12, 0xCuLL), (int16x8_t)v13));
  v49 = vpaddlq_s16(vpaddq_s16(vpaddq_s16((int16x8_t)v6, (int16x8_t)v7), vpaddq_s16((int16x8_t)v8, (int16x8_t)v9)));
  v50 = vpaddlq_s16(vpaddq_s16(vpaddq_s16((int16x8_t)v10, (int16x8_t)v11), vpaddq_s16((int16x8_t)v12, (int16x8_t)v13)));
  v51 = (int16x8_t)vqtbl1q_s8(v44, unk_208F56370);
  v52 = vmlaq_s32(vmulq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8), (int32x4_t)xmmword_208F56380), vmlal_high_s16(vmull_high_s16(v51, v51), v43, v43), (int32x4_t)xmmword_208F56390);
  v53 = vpaddlq_s16(v41);
  v54 = vpaddlq_s16(v45);
  v55 = vpaddlq_s16((int16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_208F563C0));
  v56 = vmlaq_s32(vmulq_s32(vmulq_s32(v54, v54), (int32x4_t)v34), vmlaq_s32(vmulq_s32(v53, v53), v55, v55), (int32x4_t)xmmword_208F563D0);
  v57 = vmulq_s32(vmlaq_s32(vmulq_s32(v49, v49), v50, v50), (int32x4_t)v34);
  v58 = vpaddlq_s16(v48);
  v59 = vpaddlq_s16(v47);
  v60 = vpaddlq_s16((int16x8_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_208F563C0));
  v65[0] = vpaddq_s32(vpaddq_s32(v52, v56), vpaddq_s32(v57, vmlaq_s32(vmulq_s32(vmulq_s32(v59, v59), (int32x4_t)v34), vmlaq_s32(vmulq_s32(v58, v58), v60, v60), (int32x4_t)xmmword_208F563D0)));
  v65[1] = v37;
  v61 = vmaxq_u32((uint32x4_t)v65[0], (uint32x4_t)v37);
  v61.i32[0] = vmaxvq_u32(v61);
  v62 = vdupq_lane_s32(*(int32x2_t *)v61.i8, 0);
  v63 = v61.i32[0];
  v67.val[0] = (int8x16_t)vceqq_s32(v62, v65[0]);
  v67.val[1] = (int8x16_t)vceqq_s32(v62, v37);
  result = __clz(*(_QWORD *)&vqtbl2_s8(v67, (int8x8_t)0x4080C1014181CLL)) >> 3;
  *a3 = (v63 - v65[0].i32[((_BYTE)result + 4) & 7]) >> 10;
  return result;
}

int8x8_t *cdef_filter_8_0_neon(int8x8_t *result, int a2, uint16x8_t *a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, char a9, int a10, int a11)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __int16 *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int16x8_t v27;
  const __int16 *v28;
  int16x8_t v29;
  uint16x8_t v30;
  int v31;
  uint16x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;
  unsigned __int128 v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  uint16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int16x8_t v86;
  uint16x8_t v87;
  int8x16_t v88;
  int16x8_t v89;
  unsigned __int128 v90;
  uint16x8_t v91;
  int16x8_t v92;
  uint64_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  int8x16_t v100;
  uint16x8_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint16x8_t v104;
  int8x16_t v105;
  int8x16_t v106;
  uint16x8_t v107;
  int8x16_t v108;
  int8x16_t v109;
  unsigned __int128 v110;
  int8x16_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  uint16x8_t v117;
  int16x8_t v118;
  int8x16_t v119;
  uint16x8_t v120;
  int8x16_t v121;
  int16x8_t v122;
  uint16x8_t v123;
  int8x16_t v124;
  int16x8_t v125;
  int16x8_t v126;
  uint16x8_t v127;
  int16x8_t v128;
  int8x16_t v129;
  uint16x8_t v130;
  int16x8_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int16x8_t v134;
  uint16x8_t v135;
  int8x16_t v136;
  uint16x8_t v137;
  int16x8_t v138;
  int8x16_t v139;
  uint16x8_t v140;
  int8x16_t v141;
  int16x8_t v142;
  int16x8_t v143;
  unsigned __int128 v144;
  uint16x8_t v145;
  uint16x8_t v146;
  int16x8_t v147;

  v12 = (int *)((char *)&cdef_directions_padded + 8 * a6);
  v13 = v12[4];
  v14 = v12[5];
  v16 = v12[8];
  v15 = v12[9];
  v18 = *v12;
  v17 = v12[1];
  v19 = (const __int16 *)((char *)&cdef_pri_taps + 8 * ((a4 >> a9) & 1));
  v20 = __clz(a4) ^ 0x1F;
  v21 = __OFSUB__(a7, v20);
  v22 = a7 - v20;
  if (v22 < 0 != v21)
    v22 = 0;
  if (!a4)
    v22 = a7;
  v23 = __clz(a5) ^ 0x1F;
  v21 = __OFSUB__(a8, v23);
  v24 = a8 - v23;
  v25 = (uint16x8_t)vdupq_n_s16(a4);
  if (v24 < 0 != v21)
    v24 = 0;
  v26 = (uint16x8_t)vdupq_n_s16(-v22);
  v27 = vld1q_dup_s16(v19);
  v28 = v19 + 2;
  v29 = vld1q_dup_s16(v28);
  v30 = (uint16x8_t)vdupq_n_s16(a5);
  if (a5)
    v31 = v24;
  else
    v31 = a8;
  v32 = (uint16x8_t)vdupq_n_s16(-v31);
  v33 = 2 * v17;
  if (a10 == 8)
  {
    v34 = 2 * v13;
    v35 = -2 * v13;
    do
    {
      v36 = *(uint16x8_t *)((char *)a3 + v34);
      v37 = *(uint16x8_t *)((char *)a3 + v35);
      v38 = *(uint16x8_t *)((char *)a3 + 2 * v14);
      v39 = *(uint16x8_t *)((char *)a3 - 2 * v14);
      v40 = vabdq_u16(v36, *a3);
      v41 = (int8x16_t)vcgtq_u16(v36, *a3);
      v42 = (int8x16_t)vminq_u16(v40, vqsubq_u16(v25, vshlq_u16(v40, v26)));
      v43 = vabdq_u16(v37, *a3);
      v44 = (int8x16_t)vcgtq_u16(v37, *a3);
      v45 = (int8x16_t)vminq_u16(v43, vqsubq_u16(v25, vshlq_u16(v43, v26)));
      v46 = vabdq_u16(v38, *a3);
      v47 = (int8x16_t)vcgtq_u16(v38, *a3);
      v48 = (int8x16_t)vminq_u16(v46, vqsubq_u16(v25, vshlq_u16(v46, v26)));
      v49 = vabdq_u16(v39, *a3);
      v50 = (int8x16_t)vcgtq_u16(v39, *a3);
      v51 = (int8x16_t)vminq_u16(v49, vqsubq_u16(v25, vshlq_u16(v49, v26)));
      v52 = *(_OWORD *)&vmaxq_u8(vmaxq_u8((uint8x16_t)v36, (uint8x16_t)v37), vmaxq_u8((uint8x16_t)v38, (uint8x16_t)v39)) & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL);
      v53 = vminq_u16(v36, v37);
      v54 = *(uint16x8_t *)((char *)a3 + 2 * v16);
      v55 = *(uint16x8_t *)((char *)a3 - 2 * v16);
      v56 = vminq_u16(v38, v39);
      v57 = *(uint16x8_t *)((char *)a3 + 2 * v18);
      v58 = *(uint16x8_t *)((char *)a3 - 2 * v18);
      v59 = (int16x8_t)vbslq_s8(v41, v42, (int8x16_t)vnegq_s16((int16x8_t)v42));
      v60 = *(uint16x8_t *)((char *)a3 + 2 * v15);
      v61 = *(uint16x8_t *)((char *)a3 - 2 * v15);
      v62 = (int16x8_t)vbslq_s8(v44, v45, (int8x16_t)vnegq_s16((int16x8_t)v45));
      v63 = *(uint16x8_t *)((char *)a3 + v33);
      v64 = *(uint16x8_t *)((char *)a3 - v33);
      v65 = (int16x8_t)vbslq_s8(v47, v48, (int8x16_t)vnegq_s16((int16x8_t)v48));
      v66 = vabdq_u16(v54, *a3);
      v67 = (int8x16_t)vminq_u16(v66, vqsubq_u16(v30, vshlq_u16(v66, v32)));
      v68 = (int16x8_t)vbslq_s8(v50, v51, (int8x16_t)vnegq_s16((int16x8_t)v51));
      v69 = vabdq_u16(v55, *a3);
      v70 = (int8x16_t)vminq_u16(v69, vqsubq_u16(v30, vshlq_u16(v69, v32)));
      v71 = vabdq_u16(v57, *a3);
      v72 = (int8x16_t)vminq_u16(v71, vqsubq_u16(v30, vshlq_u16(v71, v32)));
      v73 = vabdq_u16(v58, *a3);
      v74 = vaddq_s16(v62, v59);
      v75 = (int8x16_t)vminq_u16(v73, vqsubq_u16(v30, vshlq_u16(v73, v32)));
      v76 = vaddq_s16(v68, v65);
      v77 = vabdq_u16(v60, *a3);
      v78 = vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v55, *a3), v70, (int8x16_t)vnegq_s16((int16x8_t)v70)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v54, *a3), v67, (int8x16_t)vnegq_s16((int16x8_t)v67)));
      v79 = (int8x16_t)vminq_u16(v77, vqsubq_u16(v30, vshlq_u16(v77, v32)));
      v80 = vabdq_u16(v61, *a3);
      v81 = vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v57, *a3), v72, (int8x16_t)vnegq_s16((int16x8_t)v72)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v58, *a3), v75, (int8x16_t)vnegq_s16((int16x8_t)v75)));
      v82 = (int8x16_t)vminq_u16(v80, vqsubq_u16(v30, vshlq_u16(v80, v32)));
      v83 = vabdq_u16(v63, *a3);
      v84 = (int8x16_t)vminq_u16(v83, vqsubq_u16(v30, vshlq_u16(v83, v32)));
      v85 = vaddq_s16(v78, v81);
      v86 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v63, *a3), v84, (int8x16_t)vnegq_s16((int16x8_t)v84));
      v87 = vabdq_u16(v64, *a3);
      v88 = (int8x16_t)vminq_u16(v87, vqsubq_u16(v30, vshlq_u16(v87, v32)));
      v89 = vaddq_s16(vmlaq_s16(vmulq_s16(v74, v27), v76, v29), v86);
      v90 = *(_OWORD *)&vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)v54, (uint8x16_t)v55), vmaxq_u8((uint8x16_t)v57, (uint8x16_t)v58)), vmaxq_u8(vmaxq_u8((uint8x16_t)v60, (uint8x16_t)v61), vmaxq_u8((uint8x16_t)v63, (uint8x16_t)v64))) & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL);
      v91 = vminq_u16(vminq_u16(v54, v55), vminq_u16(v57, v58));
      v92 = vaddq_s16(v89, vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v85, v85), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v60, *a3), v79, (int8x16_t)vnegq_s16((int16x8_t)v79))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v61, *a3), v82, (int8x16_t)vnegq_s16((int16x8_t)v82))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v64, *a3), v88, (int8x16_t)vnegq_s16((int16x8_t)v88))));
      *result = vqmovun_s16(vminq_s16(vmaxq_s16(vrsraq_n_s16(*(int16x8_t *)a3, vsraq_n_s16(v92, v92, 0xFuLL), 4uLL), (int16x8_t)vminq_u16(vminq_u16(*a3, vminq_u16(v53, v56)), vminq_u16(v91, vminq_u16(vminq_u16(v60, v61), vminq_u16(v63, v64))))), (int16x8_t)vmaxq_u16(vmaxq_u16(*a3, (uint16x8_t)v52), (uint16x8_t)v90)));
      a3 += 18;
      result = (int8x8_t *)((char *)result + a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    v93 = 2 * v15;
    do
    {
      v94.i64[0] = a3->i64[0];
      v94.i64[1] = a3[18].i64[0];
      v95.i64[0] = *(uint64_t *)((char *)a3->i64 + 2 * v13);
      v95.i64[1] = *(uint64_t *)((char *)a3[18].i64 + 2 * v13);
      v96.i64[0] = *(uint64_t *)((char *)a3->i64 - 2 * v13);
      v96.i64[1] = *(uint64_t *)((char *)a3[18].i64 - 2 * v13);
      v97.i64[0] = *(uint64_t *)((char *)a3->i64 + 2 * v14);
      v97.i64[1] = *(uint64_t *)((char *)a3[18].i64 + 2 * v14);
      v98.i64[0] = *(uint64_t *)((char *)a3->i64 - 2 * v14);
      v98.i64[1] = *(uint64_t *)((char *)a3[18].i64 - 2 * v14);
      v99 = vabdq_u16(v95, v94);
      v100 = (int8x16_t)vcgtq_u16(v95, v94);
      v101 = vabdq_u16(v96, v94);
      v102 = (int8x16_t)vcgtq_u16(v96, v94);
      v103 = (int8x16_t)vminq_u16(v99, vqsubq_u16(v25, vshlq_u16(v99, v26)));
      v104 = vabdq_u16(v97, v94);
      v105 = (int8x16_t)vcgtq_u16(v97, v94);
      v106 = (int8x16_t)vminq_u16(v101, vqsubq_u16(v25, vshlq_u16(v101, v26)));
      v107 = vabdq_u16(v98, v94);
      v108 = (int8x16_t)vcgtq_u16(v98, v94);
      v109 = (int8x16_t)vminq_u16(v104, vqsubq_u16(v25, vshlq_u16(v104, v26)));
      v110 = *(_OWORD *)&vmaxq_u8(vmaxq_u8((uint8x16_t)v95, (uint8x16_t)v96), vmaxq_u8((uint8x16_t)v97, (uint8x16_t)v98)) & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL);
      v111 = (int8x16_t)vminq_u16(v107, vqsubq_u16(v25, vshlq_u16(v107, v26)));
      v112 = vminq_u16(v94, vminq_u16(vminq_u16(v95, v96), vminq_u16(v97, v98)));
      v113 = vmaxq_u16(v94, (uint16x8_t)v110);
      v97.i64[0] = *(uint64_t *)((char *)a3->i64 + 2 * v16);
      v97.i64[1] = *(uint64_t *)((char *)a3[18].i64 + 2 * v16);
      v98.i64[0] = *(uint64_t *)((char *)a3->i64 - 2 * v16);
      v98.i64[1] = *(uint64_t *)((char *)a3[18].i64 - 2 * v16);
      *(_QWORD *)&v110 = *(uint64_t *)((char *)a3->i64 + 2 * v18);
      *((_QWORD *)&v110 + 1) = *(uint64_t *)((char *)a3[18].i64 + 2 * v18);
      v104.i64[0] = *(uint64_t *)((char *)a3->i64 - 2 * v18);
      v104.i64[1] = *(uint64_t *)((char *)a3[18].i64 - 2 * v18);
      v107.i64[0] = *(uint64_t *)((char *)a3->i64 + v93);
      v107.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v93);
      v114 = (int16x8_t)vbslq_s8(v100, v103, (int8x16_t)vnegq_s16((int16x8_t)v103));
      v100.i64[0] = *(uint64_t *)((char *)a3->i64 - v93);
      v100.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v93);
      v115 = (int16x8_t)vbslq_s8(v102, v106, (int8x16_t)vnegq_s16((int16x8_t)v106));
      v102.i64[0] = *(uint64_t *)((char *)a3->i64 + v33);
      v102.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v33);
      v116 = (int16x8_t)vbslq_s8(v105, v109, (int8x16_t)vnegq_s16((int16x8_t)v109));
      v105.i64[0] = *(uint64_t *)((char *)a3->i64 - v33);
      v105.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v33);
      v117 = vabdq_u16(v97, v94);
      v118 = (int16x8_t)vbslq_s8(v108, v111, (int8x16_t)vnegq_s16((int16x8_t)v111));
      v119 = (int8x16_t)vminq_u16(v117, vqsubq_u16(v30, vshlq_u16(v117, v32)));
      v120 = vabdq_u16(v98, v94);
      v121 = (int8x16_t)vminq_u16(v120, vqsubq_u16(v30, vshlq_u16(v120, v32)));
      v122 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v98, v94), v121, (int8x16_t)vnegq_s16((int16x8_t)v121));
      v123 = vabdq_u16((uint16x8_t)v110, v94);
      v124 = (int8x16_t)vminq_u16(v123, vqsubq_u16(v30, vshlq_u16(v123, v32)));
      v125 = vaddq_s16(v115, v114);
      v126 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v110, v94), v124, (int8x16_t)vnegq_s16((int16x8_t)v124));
      v127 = vabdq_u16(v104, v94);
      v128 = vaddq_s16(v118, v116);
      v129 = (int8x16_t)vminq_u16(v127, vqsubq_u16(v30, vshlq_u16(v127, v32)));
      v130 = vabdq_u16(v107, v94);
      v131 = vaddq_s16(v122, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v97, v94), v119, (int8x16_t)vnegq_s16((int16x8_t)v119)));
      v132 = (int8x16_t)vminq_u16(v130, vqsubq_u16(v30, vshlq_u16(v130, v32)));
      v133 = vaddq_s16(v126, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v104, v94), v129, (int8x16_t)vnegq_s16((int16x8_t)v129)));
      v134 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v107, v94), v132, (int8x16_t)vnegq_s16((int16x8_t)v132));
      v135 = vabdq_u16((uint16x8_t)v100, v94);
      v136 = (int8x16_t)vminq_u16(v135, vqsubq_u16(v30, vshlq_u16(v135, v32)));
      v137 = vabdq_u16((uint16x8_t)v102, v94);
      v138 = vaddq_s16(v131, v133);
      v139 = (int8x16_t)vminq_u16(v137, vqsubq_u16(v30, vshlq_u16(v137, v32)));
      v140 = vabdq_u16((uint16x8_t)v105, v94);
      v141 = (int8x16_t)vminq_u16(v140, vqsubq_u16(v30, vshlq_u16(v140, v32)));
      v142 = vmlaq_s16(vmulq_s16(v125, v27), v128, v29);
      v143 = vaddq_s16(vaddq_s16(vaddq_s16(v138, v138), v134), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v100, v94), v136, (int8x16_t)vnegq_s16((int16x8_t)v136)));
      v144 = *(_OWORD *)&vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)v97, (uint8x16_t)v98), vmaxq_u8((uint8x16_t)v110, (uint8x16_t)v104)), vmaxq_u8(vmaxq_u8((uint8x16_t)v107, (uint8x16_t)v100), vmaxq_u8((uint8x16_t)v102, (uint8x16_t)v105))) & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL);
      v145 = vminq_u16(v97, v98);
      v146 = vminq_u16((uint16x8_t)v110, v104);
      v147 = vaddq_s16(vaddq_s16(v142, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v102, v94), v139, (int8x16_t)vnegq_s16((int16x8_t)v139))), vaddq_s16(v143, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v105, v94), v141, (int8x16_t)vnegq_s16((int16x8_t)v141))));
      *(int8x8_t *)v94.i8 = vqmovun_s16(vminq_s16(vmaxq_s16(vrsraq_n_s16((int16x8_t)v94, vsraq_n_s16(v147, v147, 0xFuLL), 4uLL), (int16x8_t)vminq_u16(v112, vminq_u16(vminq_u16(v145, v146), vminq_u16(vminq_u16(v107, (uint16x8_t)v100), vminq_u16((uint16x8_t)v102, (uint16x8_t)v105))))), (int16x8_t)vmaxq_u16(v113, (uint16x8_t)v144)));
      result->i32[0] = v94.i32[0];
      *(__int32 *)((char *)result->i32 + a2) = v94.i32[1];
      a3 += 36;
      result = (int8x8_t *)((char *)result + 2 * a2);
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

int8x8_t *cdef_filter_8_1_neon(int8x8_t *result, int a2, uint16x8_t *a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, char a9, int a10, int a11)
{
  char *v12;
  const __int16 *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint16x8_t v17;
  uint16x8_t v18;
  int16x8_t v19;
  uint64_t v20;
  uint64_t v21;
  const __int16 *v22;
  int16x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int8x16_t v33;
  uint16x8_t v34;
  int16x8_t v35;
  int8x16_t v36;
  uint16x8_t v37;
  int16x8_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  int8x16_t v43;
  int16x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  int8x16_t v55;
  int16x8_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int16x8_t v63;

  v12 = (char *)&cdef_directions_padded + 8 * a6;
  v13 = (const __int16 *)((char *)&cdef_pri_taps + 8 * ((a4 >> a9) & 1));
  v14 = __clz(a4) ^ 0x1F;
  v15 = __OFSUB__(a7, v14);
  v16 = a7 - v14;
  if (v16 < 0 != v15)
    v16 = 0;
  if (!a4)
    v16 = a7;
  v17 = (uint16x8_t)vdupq_n_s16(a4);
  v18 = (uint16x8_t)vdupq_n_s16(-v16);
  v19 = vld1q_dup_s16(v13);
  v21 = *((int *)v12 + 4);
  v20 = *((int *)v12 + 5);
  v22 = v13 + 2;
  v23 = vld1q_dup_s16(v22);
  if (a10 == 8)
  {
    v24 = 2 * v20;
    v25 = -2 * v20;
    v26 = 2 * v21;
    v27 = -2 * v21;
    do
    {
      v28 = *(uint16x8_t *)((char *)a3 + v26);
      v29 = *(uint16x8_t *)((char *)a3 + v27);
      v30 = *(uint16x8_t *)((char *)a3 + v24);
      v31 = *(uint16x8_t *)((char *)a3 + v25);
      v32 = vabdq_u16(v28, *a3);
      v33 = (int8x16_t)vminq_u16(v32, vqsubq_u16(v17, vshlq_u16(v32, v18)));
      v34 = vabdq_u16(v29, *a3);
      v35 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v28, *a3), v33, (int8x16_t)vnegq_s16((int16x8_t)v33));
      v36 = (int8x16_t)vminq_u16(v34, vqsubq_u16(v17, vshlq_u16(v34, v18)));
      v37 = vabdq_u16(v30, *a3);
      v38 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v29, *a3), v36, (int8x16_t)vnegq_s16((int16x8_t)v36));
      v39 = (int8x16_t)vminq_u16(v37, vqsubq_u16(v17, vshlq_u16(v37, v18)));
      v40 = vaddq_s16(v38, v35);
      v41 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v30, *a3), v39, (int8x16_t)vnegq_s16((int16x8_t)v39));
      v42 = vabdq_u16(v31, *a3);
      v43 = (int8x16_t)vminq_u16(v42, vqsubq_u16(v17, vshlq_u16(v42, v18)));
      v44 = vmlaq_s16(vmulq_s16(v40, v19), vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v31, *a3), v43, (int8x16_t)vnegq_s16((int16x8_t)v43)), v41), v23);
      *result = vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)a3, vsraq_n_s16(v44, v44, 0xFuLL), 4uLL));
      a3 += 18;
      result = (int8x8_t *)((char *)result + a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    v45 = 2 * v20;
    v46 = 2 * v21;
    do
    {
      v47.i64[0] = a3->i64[0];
      v47.i64[1] = a3[18].i64[0];
      v48.i64[0] = *(uint64_t *)((char *)a3->i64 + v46);
      v48.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v46);
      v49.i64[0] = *(uint64_t *)((char *)a3->i64 - v46);
      v49.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v46);
      v50.i64[0] = *(uint64_t *)((char *)a3->i64 + v45);
      v50.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v45);
      v51.i64[0] = *(uint64_t *)((char *)a3->i64 - v45);
      v51.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v45);
      v52 = vabdq_u16(v48, v47);
      v53 = (int8x16_t)vminq_u16(v52, vqsubq_u16(v17, vshlq_u16(v52, v18)));
      v54 = vabdq_u16(v49, v47);
      v55 = (int8x16_t)vminq_u16(v54, vqsubq_u16(v17, vshlq_u16(v54, v18)));
      v56 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v48, v47), v53, (int8x16_t)vnegq_s16((int16x8_t)v53));
      v57 = vabdq_u16(v50, v47);
      v58 = (int8x16_t)vminq_u16(v57, vqsubq_u16(v17, vshlq_u16(v57, v18)));
      v59 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v50, v47), v58, (int8x16_t)vnegq_s16((int16x8_t)v58));
      v60 = vabdq_u16(v51, v47);
      v61 = vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v49, v47), v55, (int8x16_t)vnegq_s16((int16x8_t)v55)), v56);
      v62 = (int8x16_t)vminq_u16(v60, vqsubq_u16(v17, vshlq_u16(v60, v18)));
      v63 = vmlaq_s16(vmulq_s16(v61, v19), vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v51, v47), v62, (int8x16_t)vnegq_s16((int16x8_t)v62)), v59), v23);
      *(int8x8_t *)v47.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)v47, vsraq_n_s16(v63, v63, 0xFuLL), 4uLL));
      result->i32[0] = v47.i32[0];
      *(__int32 *)((char *)result->i32 + a2) = v47.i32[1];
      a3 += 36;
      result = (int8x8_t *)((char *)result + 2 * a2);
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

int8x8_t *cdef_filter_8_2_neon(int8x8_t *result, int a2, uint16x8_t *a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int8x16_t v32;
  uint16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  uint16x8_t v39;
  int16x8_t v40;
  int8x16_t v41;
  uint16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  uint16x8_t v53;
  int16x8_t v54;
  int8x16_t v55;
  int16x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x8_t v78;
  uint16x8_t v79;
  int8x16_t v80;
  int16x8_t v81;
  uint16x8_t v82;
  int8x16_t v83;
  uint16x8_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int16x8_t v87;
  uint16x8_t v88;
  int16x8_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  int8x16_t v95;
  int16x8_t v96;

  v12 = (int *)((char *)&cdef_directions_padded + 8 * a6);
  v14 = v12[8];
  v13 = v12[9];
  v16 = *v12;
  v15 = v12[1];
  LODWORD(v12) = __clz(a5) ^ 0x1F;
  v17 = __OFSUB__(a8, (_DWORD)v12);
  v18 = a8 - (_DWORD)v12;
  if (v18 < 0 != v17)
    v18 = 0;
  v19 = (uint16x8_t)vdupq_n_s16(a5);
  if (!a5)
    v18 = a8;
  v20 = (uint16x8_t)vdupq_n_s16(-v18);
  v21 = 2 * v15;
  if (a10 == 8)
  {
    v22 = 2 * v14;
    do
    {
      v23 = *(uint16x8_t *)((char *)a3 + v22);
      v24 = *(uint16x8_t *)((char *)a3 - v22);
      v25 = *(uint16x8_t *)((char *)a3 + 2 * v16);
      v26 = *(uint16x8_t *)((char *)a3 - 2 * v16);
      v27 = *(uint16x8_t *)((char *)a3 + 2 * v13);
      v28 = *(uint16x8_t *)((char *)a3 - 2 * v13);
      v29 = *(uint16x8_t *)((char *)a3 + v21);
      v30 = *(uint16x8_t *)((char *)a3 - v21);
      v31 = vabdq_u16(v23, *a3);
      v32 = (int8x16_t)vminq_u16(v31, vqsubq_u16(v19, vshlq_u16(v31, v20)));
      v33 = vabdq_u16(v24, *a3);
      v34 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v23, *a3), v32, (int8x16_t)vnegq_s16((int16x8_t)v32));
      v35 = (int8x16_t)vminq_u16(v33, vqsubq_u16(v19, vshlq_u16(v33, v20)));
      v36 = vabdq_u16(v25, *a3);
      v37 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v24, *a3), v35, (int8x16_t)vnegq_s16((int16x8_t)v35));
      v38 = (int8x16_t)vminq_u16(v36, vqsubq_u16(v19, vshlq_u16(v36, v20)));
      v39 = vabdq_u16(v26, *a3);
      v40 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v25, *a3), v38, (int8x16_t)vnegq_s16((int16x8_t)v38));
      v41 = (int8x16_t)vminq_u16(v39, vqsubq_u16(v19, vshlq_u16(v39, v20)));
      v42 = vabdq_u16(v27, *a3);
      v43 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v26, *a3), v41, (int8x16_t)vnegq_s16((int16x8_t)v41));
      v44 = (int8x16_t)vminq_u16(v42, vqsubq_u16(v19, vshlq_u16(v42, v20)));
      v45 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v27, *a3), v44, (int8x16_t)vnegq_s16((int16x8_t)v44));
      v46 = vabdq_u16(v28, *a3);
      v47 = (int8x16_t)vminq_u16(v46, vqsubq_u16(v19, vshlq_u16(v46, v20)));
      v48 = vaddq_s16(v37, v34);
      v49 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v28, *a3), v47, (int8x16_t)vnegq_s16((int16x8_t)v47));
      v50 = vabdq_u16(v29, *a3);
      v51 = vaddq_s16(v40, v43);
      v52 = (int8x16_t)vminq_u16(v50, vqsubq_u16(v19, vshlq_u16(v50, v20)));
      v53 = vabdq_u16(v30, *a3);
      v54 = vaddq_s16(v48, v51);
      v55 = (int8x16_t)vminq_u16(v53, vqsubq_u16(v19, vshlq_u16(v53, v20)));
      v56 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v45, v49), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v29, *a3), v52, (int8x16_t)vnegq_s16((int16x8_t)v52))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v30, *a3), v55, (int8x16_t)vnegq_s16((int16x8_t)v55))), vaddq_s16(v54, v54));
      *result = vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)a3, vsraq_n_s16(v56, v56, 0xFuLL), 4uLL));
      a3 += 18;
      result = (int8x8_t *)((char *)result + a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    v57 = 2 * v14;
    v58 = -2 * v14;
    v59 = 2 * v13;
    v60 = 2 * v16;
    v61 = -2 * v16;
    do
    {
      v62.i64[0] = a3->i64[0];
      v62.i64[1] = a3[18].i64[0];
      v63.i64[0] = *(uint64_t *)((char *)a3->i64 + v57);
      v63.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v57);
      v64.i64[0] = *(uint64_t *)((char *)a3->i64 + v58);
      v64.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v58);
      v65.i64[0] = *(uint64_t *)((char *)a3->i64 + v60);
      v65.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v60);
      v66.i64[0] = *(uint64_t *)((char *)a3->i64 + v61);
      v66.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v61);
      v67.i64[0] = *(uint64_t *)((char *)a3->i64 + v59);
      v67.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v59);
      v68.i64[0] = *(uint64_t *)((char *)a3->i64 - v59);
      v68.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v59);
      v69.i64[0] = *(uint64_t *)((char *)a3->i64 + v21);
      v69.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v21);
      v70.i64[0] = *(uint64_t *)((char *)a3->i64 - v21);
      v70.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v21);
      v71 = vabdq_u16(v63, v62);
      v72 = (int8x16_t)vminq_u16(v71, vqsubq_u16(v19, vshlq_u16(v71, v20)));
      v73 = vabdq_u16(v64, v62);
      v74 = (int8x16_t)vminq_u16(v73, vqsubq_u16(v19, vshlq_u16(v73, v20)));
      v75 = vabdq_u16(v65, v62);
      v76 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v63, v62), v72, (int8x16_t)vnegq_s16((int16x8_t)v72));
      v77 = (int8x16_t)vminq_u16(v75, vqsubq_u16(v19, vshlq_u16(v75, v20)));
      v78 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v64, v62), v74, (int8x16_t)vnegq_s16((int16x8_t)v74));
      v79 = vabdq_u16(v66, v62);
      v80 = (int8x16_t)vminq_u16(v79, vqsubq_u16(v19, vshlq_u16(v79, v20)));
      v81 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v65, v62), v77, (int8x16_t)vnegq_s16((int16x8_t)v77));
      v82 = vabdq_u16(v67, v62);
      v83 = (int8x16_t)vminq_u16(v82, vqsubq_u16(v19, vshlq_u16(v82, v20)));
      v84 = vabdq_u16(v68, v62);
      v85 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v67, v62), v83, (int8x16_t)vnegq_s16((int16x8_t)v83));
      v86 = (int8x16_t)vminq_u16(v84, vqsubq_u16(v19, vshlq_u16(v84, v20)));
      v87 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v68, v62), v86, (int8x16_t)vnegq_s16((int16x8_t)v86));
      v88 = vabdq_u16(v69, v62);
      v89 = vaddq_s16(v78, v76);
      v90 = (int8x16_t)vcgtq_u16(v69, v62);
      v91 = (int8x16_t)vminq_u16(v88, vqsubq_u16(v19, vshlq_u16(v88, v20)));
      v92 = vaddq_s16(v81, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v66, v62), v80, (int8x16_t)vnegq_s16((int16x8_t)v80)));
      v93 = vabdq_u16(v70, v62);
      v94 = vaddq_s16(v89, v92);
      v95 = (int8x16_t)vminq_u16(v93, vqsubq_u16(v19, vshlq_u16(v93, v20)));
      v96 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v85, v87), (int16x8_t)vbslq_s8(v90, v91, (int8x16_t)vnegq_s16((int16x8_t)v91))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v70, v62), v95, (int8x16_t)vnegq_s16((int16x8_t)v95))), vaddq_s16(v94, v94));
      *(int8x8_t *)v62.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)v62, vsraq_n_s16(v96, v96, 0xFuLL), 4uLL));
      result->i32[0] = v62.i32[0];
      *(__int32 *)((char *)result->i32 + a2) = v62.i32[1];
      a3 += 36;
      result = (int8x8_t *)((char *)result + 2 * a2);
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

uint8x8_t *cdef_filter_8_3_neon(uint8x8_t *result, int a2, uint16x8_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint16x8_t v12;

  if (a10 == 8)
  {
    do
    {
      *result = vqmovn_u16(*a3);
      a3 += 18;
      result = (uint8x8_t *)((char *)result + a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    do
    {
      v12.i64[0] = a3->i64[0];
      v12.i64[1] = a3[18].i64[0];
      *(uint8x8_t *)v12.i8 = vqmovn_u16(v12);
      result->i32[0] = v12.i32[0];
      *(__int32 *)((char *)result->i32 + a2) = v12.i32[1];
      result = (uint8x8_t *)((char *)result + 2 * a2);
      a3 += 36;
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

int16x8_t *cdef_filter_16_0_neon(int16x8_t *result, unsigned int a2, uint16x8_t *a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, char a9, int a10, int a11)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __int16 *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int v27;
  int16x8_t v28;
  const __int16 *v29;
  int16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  uint16x8_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  uint16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int16x8_t v86;
  uint16x8_t v87;
  int8x16_t v88;
  int16x8_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint64_t *v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int8x16_t v107;
  uint16x8_t v108;
  int8x16_t v109;
  uint16x8_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint16x8_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  uint16x8_t v117;
  int8x16_t v118;
  uint16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  uint64_t *v122;
  int16x8_t v123;
  uint16x8_t v124;
  int16x8_t v125;
  int8x16_t v126;
  uint16x8_t v127;
  int8x16_t v128;
  int16x8_t v129;
  uint16x8_t v130;
  int8x16_t v131;
  int16x8_t v132;
  int16x8_t v133;
  uint16x8_t v134;
  int16x8_t v135;
  int8x16_t v136;
  uint16x8_t v137;
  int16x8_t v138;
  int8x16_t v139;
  int16x8_t v140;
  int16x8_t v141;
  uint16x8_t v142;
  int8x16_t v143;
  uint16x8_t v144;
  int16x8_t v145;
  int8x16_t v146;
  uint16x8_t v147;
  int8x16_t v148;
  int16x8_t v149;
  int16x8_t v150;
  uint16x8_t v151;
  int16x8_t v152;
  uint16x8_t v153;
  uint16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;

  v12 = (int *)((char *)&cdef_directions_padded + 8 * a6);
  v13 = v12[4];
  v14 = v12[5];
  v16 = v12[8];
  v15 = v12[9];
  v18 = *v12;
  v17 = v12[1];
  v19 = (const __int16 *)((char *)&cdef_pri_taps + 8 * ((a4 >> a9) & 1));
  v20 = __clz(a4) ^ 0x1F;
  v21 = __OFSUB__(a7, v20);
  v22 = a7 - v20;
  if (v22 < 0 != v21)
    v22 = 0;
  if (!a4)
    v22 = a7;
  v23 = __clz(a5) ^ 0x1F;
  v21 = __OFSUB__(a8, v23);
  v24 = a8 - v23;
  if (v24 < 0 != v21)
    v24 = 0;
  v25 = (uint16x8_t)vdupq_n_s16(a4);
  v26 = (uint16x8_t)vdupq_n_s16(-v22);
  if (a5)
    v27 = v24;
  else
    v27 = a8;
  v28 = vld1q_dup_s16(v19);
  v29 = v19 + 2;
  v30 = vld1q_dup_s16(v29);
  v31 = (uint16x8_t)vdupq_n_s16(a5);
  v32 = (uint16x8_t)vdupq_n_s16(-v27);
  if (a10 == 8)
  {
    v33 = 2 * v17;
    v34 = 2 * v13;
    v35 = -2 * v13;
    do
    {
      v36 = *(uint16x8_t *)((char *)a3 + v34);
      v37 = *(uint16x8_t *)((char *)a3 + v35);
      v38 = *(uint16x8_t *)((char *)a3 + 2 * v14);
      v39 = *(uint16x8_t *)((char *)a3 - 2 * v14);
      v40 = vabdq_u16(v36, *a3);
      v41 = (int8x16_t)vcgtq_u16(v36, *a3);
      v42 = vabdq_u16(v37, *a3);
      v43 = (int8x16_t)vcgtq_u16(v37, *a3);
      v44 = (int8x16_t)vminq_u16(v40, vqsubq_u16(v25, vshlq_u16(v40, v26)));
      v45 = vabdq_u16(v38, *a3);
      v46 = (int8x16_t)vcgtq_u16(v38, *a3);
      v47 = (int8x16_t)vminq_u16(v42, vqsubq_u16(v25, vshlq_u16(v42, v26)));
      v48 = (int8x16_t)vminq_u16(v45, vqsubq_u16(v25, vshlq_u16(v45, v26)));
      v49 = vabdq_u16(v39, *a3);
      v50 = (int8x16_t)vcgtq_u16(v39, *a3);
      v51 = (int8x16_t)vminq_u16(v49, vqsubq_u16(v25, vshlq_u16(v49, v26)));
      v52 = vminq_u16(*a3, vminq_u16(vminq_u16(v36, v37), vminq_u16(v38, v39)));
      v53 = vmaxq_u16((uint16x8_t)(*(_OWORD *)&v36 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v37 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)));
      v54 = *(uint16x8_t *)((char *)a3 + 2 * v16);
      v55 = *(uint16x8_t *)((char *)a3 - 2 * v16);
      v56 = vmaxq_u16((uint16x8_t)(*(_OWORD *)&v38 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v39 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)));
      v57 = *(uint16x8_t *)((char *)a3 + 2 * v18);
      v58 = *(uint16x8_t *)((char *)a3 - 2 * v18);
      v59 = (int16x8_t)vbslq_s8(v41, v44, (int8x16_t)vnegq_s16((int16x8_t)v44));
      v60 = *(uint16x8_t *)((char *)a3 + 2 * v15);
      v61 = *(uint16x8_t *)((char *)a3 - 2 * v15);
      v62 = (int16x8_t)vbslq_s8(v43, v47, (int8x16_t)vnegq_s16((int16x8_t)v47));
      v63 = *(uint16x8_t *)((char *)a3 + v33);
      v64 = *(uint16x8_t *)((char *)a3 - v33);
      v65 = (int16x8_t)vbslq_s8(v46, v48, (int8x16_t)vnegq_s16((int16x8_t)v48));
      v66 = vabdq_u16(v54, *a3);
      v67 = (int8x16_t)vminq_u16(v66, vqsubq_u16(v31, vshlq_u16(v66, v32)));
      v68 = (int16x8_t)vbslq_s8(v50, v51, (int8x16_t)vnegq_s16((int16x8_t)v51));
      v69 = vabdq_u16(v55, *a3);
      v70 = (int8x16_t)vminq_u16(v69, vqsubq_u16(v31, vshlq_u16(v69, v32)));
      v71 = vabdq_u16(v57, *a3);
      v72 = (int8x16_t)vminq_u16(v71, vqsubq_u16(v31, vshlq_u16(v71, v32)));
      v73 = vabdq_u16(v58, *a3);
      v74 = (int8x16_t)vminq_u16(v73, vqsubq_u16(v31, vshlq_u16(v73, v32)));
      v75 = vaddq_s16(v68, v65);
      v76 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v58, *a3), v74, (int8x16_t)vnegq_s16((int16x8_t)v74));
      v77 = vabdq_u16(v60, *a3);
      v78 = vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v55, *a3), v70, (int8x16_t)vnegq_s16((int16x8_t)v70)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v54, *a3), v67, (int8x16_t)vnegq_s16((int16x8_t)v67)));
      v79 = (int8x16_t)vminq_u16(v77, vqsubq_u16(v31, vshlq_u16(v77, v32)));
      v80 = vabdq_u16(v61, *a3);
      v81 = vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v57, *a3), v72, (int8x16_t)vnegq_s16((int16x8_t)v72)), v76);
      v82 = (int8x16_t)vminq_u16(v80, vqsubq_u16(v31, vshlq_u16(v80, v32)));
      v83 = vabdq_u16(v63, *a3);
      v84 = (int8x16_t)vminq_u16(v83, vqsubq_u16(v31, vshlq_u16(v83, v32)));
      v85 = vaddq_s16(v78, v81);
      v86 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v63, *a3), v84, (int8x16_t)vnegq_s16((int16x8_t)v84));
      v87 = vabdq_u16(v64, *a3);
      v88 = (int8x16_t)vminq_u16(v87, vqsubq_u16(v31, vshlq_u16(v87, v32)));
      v89 = vaddq_s16(vaddq_s16(vmlaq_s16(vmulq_s16(vaddq_s16(v62, v59), v28), v75, v30), v86), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v85, v85), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v60, *a3), v79, (int8x16_t)vnegq_s16((int16x8_t)v79))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v61, *a3), v82, (int8x16_t)vnegq_s16((int16x8_t)v82))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v64, *a3), v88, (int8x16_t)vnegq_s16((int16x8_t)v88))));
      *result = vminq_s16(vmaxq_s16(vrsraq_n_s16(*(int16x8_t *)a3, vsraq_n_s16(v89, v89, 0xFuLL), 4uLL), (int16x8_t)vminq_u16(v52, vminq_u16(vminq_u16(vminq_u16(v54, v55), vminq_u16(v57, v58)), vminq_u16(vminq_u16(v60, v61), vminq_u16(v63, v64))))), (int16x8_t)vmaxq_u16(vmaxq_u16(*a3, vmaxq_u16(v53, v56)), vmaxq_u16(vmaxq_u16(vmaxq_u16((uint16x8_t)(*(_OWORD *)&v54 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v55 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL))), vmaxq_u16(
                                     (uint16x8_t)(*(_OWORD *)&v57 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v58 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)))), vmaxq_u16(vmaxq_u16((uint16x8_t)(*(_OWORD *)&v60 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v61 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL))), vmaxq_u16((uint16x8_t)(*(_OWORD *)&v63 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v64 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL,
                                                                      0xBFFFBFFFBFFFBFFFLL)))))));
      a3 += 18;
      result = (int16x8_t *)((char *)result + 2 * (int)a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    v90 = 2 * (int)(2 * a2);
    v91 = 2 * v17;
    v92 = 2 * v13;
    v93 = -2 * v13;
    v94 = 2 * v15;
    v95 = 2 * v14;
    v96 = -2 * v14;
    v97 = 2 * v16;
    v98 = -2 * v16;
    v99 = 2 * a2;
    do
    {
      v100.i64[0] = a3->i64[0];
      v100.i64[1] = a3[18].i64[0];
      v101.i64[0] = *(uint64_t *)((char *)a3->i64 + v92);
      v101.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v92);
      v102.i64[0] = *(uint64_t *)((char *)a3->i64 + v93);
      v103 = (uint64_t *)((char *)a3[18].i64 + v95);
      v102.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v93);
      v104.i64[0] = *(uint64_t *)((char *)a3->i64 + v95);
      v105.i64[0] = *(uint64_t *)((char *)a3->i64 + v96);
      v104.i64[1] = *v103;
      v105.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v96);
      v106 = vabdq_u16(v101, v100);
      v107 = (int8x16_t)vcgtq_u16(v101, v100);
      v108 = vabdq_u16(v102, v100);
      v109 = (int8x16_t)vcgtq_u16(v102, v100);
      v110 = vabdq_u16(v104, v100);
      v111 = (int8x16_t)vminq_u16(v106, vqsubq_u16(v25, vshlq_u16(v106, v26)));
      v112 = (int8x16_t)vcgtq_u16(v104, v100);
      v113 = vabdq_u16(v105, v100);
      v114 = (int8x16_t)vcgtq_u16(v105, v100);
      v115 = (int8x16_t)vminq_u16(v108, vqsubq_u16(v25, vshlq_u16(v108, v26)));
      v116 = (int8x16_t)vminq_u16(v110, vqsubq_u16(v25, vshlq_u16(v110, v26)));
      v117 = vminq_u16(v100, vminq_u16(vminq_u16(v101, v102), vminq_u16(v104, v105)));
      v104.i64[0] &= 0xBFFFBFFFBFFFBFFFLL;
      v104.i32[2] = *v103 & 0xBFFFBFFF;
      v104.i16[6] = HIDWORD(*v103) & 0xBFFF;
      v104.i16[7] = v104.i16[6];
      v118 = (int8x16_t)vminq_u16(v113, vqsubq_u16(v25, vshlq_u16(v113, v26)));
      v119 = vmaxq_u16(v100, vmaxq_u16(vmaxq_u16((uint16x8_t)(*(_OWORD *)&v101 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v102 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL))), vmaxq_u16(v104, (uint16x8_t)(*(_OWORD *)&v105 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)))));
      v102.i64[0] = *(uint64_t *)((char *)a3->i64 + v97);
      v102.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v97);
      v104.i64[0] = *(uint64_t *)((char *)a3->i64 + v98);
      v104.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v98);
      v105.i64[0] = *(uint64_t *)((char *)a3->i64 + 2 * v18);
      v105.i64[1] = *(uint64_t *)((char *)a3[18].i64 + 2 * v18);
      v113.i64[0] = *(uint64_t *)((char *)a3->i64 - 2 * v18);
      v113.i64[1] = *(uint64_t *)((char *)a3[18].i64 - 2 * v18);
      v108.i64[0] = *(uint64_t *)((char *)a3->i64 + v94);
      v108.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v94);
      v120 = (int16x8_t)vbslq_s8(v107, v111, (int8x16_t)vnegq_s16((int16x8_t)v111));
      v107.i64[0] = *(uint64_t *)((char *)a3->i64 - v94);
      v107.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v94);
      v121 = (int16x8_t)vbslq_s8(v109, v115, (int8x16_t)vnegq_s16((int16x8_t)v115));
      v109.i64[0] = *(uint64_t *)((char *)a3->i64 + v91);
      v109.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v91);
      v122 = (uint64_t *)((char *)a3[18].i64 - v91);
      v123 = (int16x8_t)vbslq_s8(v112, v116, (int8x16_t)vnegq_s16((int16x8_t)v116));
      v112.i64[0] = *(uint64_t *)((char *)a3->i64 - v91);
      v112.i64[1] = *v122;
      v124 = vabdq_u16(v102, v100);
      v125 = (int16x8_t)vbslq_s8(v114, v118, (int8x16_t)vnegq_s16((int16x8_t)v118));
      v126 = (int8x16_t)vminq_u16(v124, vqsubq_u16(v31, vshlq_u16(v124, v32)));
      v127 = vabdq_u16(v104, v100);
      v128 = (int8x16_t)vminq_u16(v127, vqsubq_u16(v31, vshlq_u16(v127, v32)));
      v129 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v104, v100), v128, (int8x16_t)vnegq_s16((int16x8_t)v128));
      v130 = vabdq_u16(v105, v100);
      v131 = (int8x16_t)vminq_u16(v130, vqsubq_u16(v31, vshlq_u16(v130, v32)));
      v132 = vaddq_s16(v121, v120);
      v133 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v105, v100), v131, (int8x16_t)vnegq_s16((int16x8_t)v131));
      v134 = vabdq_u16(v113, v100);
      v135 = vaddq_s16(v125, v123);
      v136 = (int8x16_t)vminq_u16(v134, vqsubq_u16(v31, vshlq_u16(v134, v32)));
      v137 = vabdq_u16(v108, v100);
      v138 = vaddq_s16(v129, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v102, v100), v126, (int8x16_t)vnegq_s16((int16x8_t)v126)));
      v139 = (int8x16_t)vminq_u16(v137, vqsubq_u16(v31, vshlq_u16(v137, v32)));
      v140 = vaddq_s16(v133, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v113, v100), v136, (int8x16_t)vnegq_s16((int16x8_t)v136)));
      v141 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v108, v100), v139, (int8x16_t)vnegq_s16((int16x8_t)v139));
      v142 = vabdq_u16((uint16x8_t)v107, v100);
      v143 = (int8x16_t)vminq_u16(v142, vqsubq_u16(v31, vshlq_u16(v142, v32)));
      v144 = vabdq_u16((uint16x8_t)v109, v100);
      v145 = vaddq_s16(v138, v140);
      v146 = (int8x16_t)vminq_u16(v144, vqsubq_u16(v31, vshlq_u16(v144, v32)));
      v147 = vabdq_u16((uint16x8_t)v112, v100);
      v148 = (int8x16_t)vminq_u16(v147, vqsubq_u16(v31, vshlq_u16(v147, v32)));
      v149 = vmlaq_s16(vmulq_s16(v132, v28), v135, v30);
      v150 = vaddq_s16(vaddq_s16(v145, v145), v141);
      v151 = vminq_u16(vminq_u16(vminq_u16(v102, v104), vminq_u16(v105, v113)), vminq_u16(vminq_u16(v108, (uint16x8_t)v107), vminq_u16((uint16x8_t)v109, (uint16x8_t)v112)));
      v152 = vaddq_s16(vaddq_s16(v150, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v107, v100), v143, (int8x16_t)vnegq_s16((int16x8_t)v143))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v112, v100), v148, (int8x16_t)vnegq_s16((int16x8_t)v148)));
      v112.i64[0] &= 0xBFFFBFFFBFFFBFFFLL;
      v112.i32[2] = *v122 & 0xBFFFBFFF;
      v112.i16[6] = HIDWORD(*v122) & 0xBFFF;
      v112.i16[7] = v112.i16[6];
      v153 = vmaxq_u16((uint16x8_t)(*(_OWORD *)&v102 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v104 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)));
      v154 = vmaxq_u16((uint16x8_t)(*(_OWORD *)&v105 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v113 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)));
      v155 = vaddq_s16(vaddq_s16(v149, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v109, v100), v146, (int8x16_t)vnegq_s16((int16x8_t)v146))), v152);
      v156 = vminq_s16(vmaxq_s16(vrsraq_n_s16((int16x8_t)v100, vsraq_n_s16(v155, v155, 0xFuLL), 4uLL), (int16x8_t)vminq_u16(v117, v151)), (int16x8_t)vmaxq_u16(v119, vmaxq_u16(vmaxq_u16(v153, v154), vmaxq_u16(vmaxq_u16((uint16x8_t)(*(_OWORD *)&v108 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)), (uint16x8_t)(*(_OWORD *)&v107 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL))), vmaxq_u16((uint16x8_t)(*(_OWORD *)&v109 & __PAIR128__(0xBFFFBFFFBFFFBFFFLL, 0xBFFFBFFFBFFFBFFFLL)),
                                  (uint16x8_t)v112)))));
      result->i64[0] = v156.i64[0];
      *(uint64_t *)((char *)result->i64 + v99) = v156.i64[1];
      a3 += 36;
      result = (int16x8_t *)((char *)result + v90);
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

int16x8_t *cdef_filter_16_1_neon(int16x8_t *result, unsigned int a2, uint16x8_t *a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, char a9, int a10, int a11)
{
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const __int16 *v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int16x8_t v21;
  const __int16 *v22;
  int16x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int8x16_t v31;
  uint16x8_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int16x8_t v35;
  uint16x8_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  int16x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  uint16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;

  v12 = (char *)&cdef_directions_padded + 8 * a6;
  v14 = *((int *)v12 + 4);
  v13 = *((int *)v12 + 5);
  v15 = (const __int16 *)((char *)&cdef_pri_taps + 8 * ((a4 >> a9) & 1));
  v16 = __clz(a4) ^ 0x1F;
  v17 = __OFSUB__(a7, v16);
  v18 = a7 - v16;
  if (v18 < 0 != v17)
    v18 = 0;
  if (!a4)
    v18 = a7;
  v19 = (uint16x8_t)vdupq_n_s16(a4);
  v20 = (uint16x8_t)vdupq_n_s16(-v18);
  v21 = vld1q_dup_s16(v15);
  v22 = v15 + 2;
  v23 = vld1q_dup_s16(v22);
  if (a10 == 8)
  {
    v24 = 2 * v13;
    v25 = 2 * v14;
    do
    {
      v26 = *(uint16x8_t *)((char *)a3 + v25);
      v27 = *(uint16x8_t *)((char *)a3 - v25);
      v28 = *(uint16x8_t *)((char *)a3 + v24);
      v29 = *(uint16x8_t *)((char *)a3 - v24);
      v30 = vabdq_u16(v26, *a3);
      v31 = (int8x16_t)vminq_u16(v30, vqsubq_u16(v19, vshlq_u16(v30, v20)));
      v32 = vabdq_u16(v27, *a3);
      v33 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v26, *a3), v31, (int8x16_t)vnegq_s16((int16x8_t)v31));
      v34 = (int8x16_t)vminq_u16(v32, vqsubq_u16(v19, vshlq_u16(v32, v20)));
      v35 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v27, *a3), v34, (int8x16_t)vnegq_s16((int16x8_t)v34));
      v36 = vabdq_u16(v28, *a3);
      v37 = (int8x16_t)vminq_u16(v36, vqsubq_u16(v19, vshlq_u16(v36, v20)));
      v38 = vaddq_s16(v35, v33);
      v39 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v28, *a3), v37, (int8x16_t)vnegq_s16((int16x8_t)v37));
      v40 = vabdq_u16(v29, *a3);
      v41 = (int8x16_t)vminq_u16(v40, vqsubq_u16(v19, vshlq_u16(v40, v20)));
      v42 = vmlaq_s16(vmulq_s16(v38, v21), vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v29, *a3), v41, (int8x16_t)vnegq_s16((int16x8_t)v41)), v39), v23);
      *result = vrsraq_n_s16(*(int16x8_t *)a3, vsraq_n_s16(v42, v42, 0xFuLL), 4uLL);
      a3 += 18;
      result = (int16x8_t *)((char *)result + 2 * (int)a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    v43 = 2 * v13;
    v44 = 2 * v14;
    do
    {
      v45.i64[0] = a3->i64[0];
      v45.i64[1] = a3[18].i64[0];
      v46.i64[0] = *(uint64_t *)((char *)a3->i64 + v44);
      v46.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v44);
      v47.i64[0] = *(uint64_t *)((char *)a3->i64 - v44);
      v47.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v44);
      v48.i64[0] = *(uint64_t *)((char *)a3->i64 + v43);
      v48.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v43);
      v49.i64[0] = *(uint64_t *)((char *)a3->i64 - v43);
      v49.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v43);
      v50 = vabdq_u16(v46, v45);
      v51 = (int8x16_t)vminq_u16(v50, vqsubq_u16(v19, vshlq_u16(v50, v20)));
      v52 = vabdq_u16(v47, v45);
      v53 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v46, v45), v51, (int8x16_t)vnegq_s16((int16x8_t)v51));
      v54 = (int8x16_t)vminq_u16(v52, vqsubq_u16(v19, vshlq_u16(v52, v20)));
      v55 = vabdq_u16(v48, v45);
      v56 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v47, v45), v54, (int8x16_t)vnegq_s16((int16x8_t)v54));
      v57 = (int8x16_t)vminq_u16(v55, vqsubq_u16(v19, vshlq_u16(v55, v20)));
      v58 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v48, v45), v57, (int8x16_t)vnegq_s16((int16x8_t)v57));
      v59 = vabdq_u16(v49, v45);
      v60 = vaddq_s16(v56, v53);
      v61 = (int8x16_t)vcgtq_u16(v49, v45);
      v62 = (int8x16_t)vminq_u16(v59, vqsubq_u16(v19, vshlq_u16(v59, v20)));
      v63 = vmlaq_s16(vmulq_s16(v60, v21), vaddq_s16((int16x8_t)vbslq_s8(v61, v62, (int8x16_t)vnegq_s16((int16x8_t)v62)), v58), v23);
      v64 = vrsraq_n_s16((int16x8_t)v45, vsraq_n_s16(v63, v63, 0xFuLL), 4uLL);
      result->i64[0] = v64.i64[0];
      *(uint64_t *)((char *)result->i64 + 2 * a2) = v64.i64[1];
      a3 += 36;
      result = (int16x8_t *)((char *)result + 2 * (int)(2 * a2));
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

int16x8_t *cdef_filter_16_2_neon(int16x8_t *result, unsigned int a2, uint16x8_t *a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int8x16_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  uint16x8_t v35;
  int16x8_t v36;
  int8x16_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  int8x16_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  uint16x8_t v53;
  int8x16_t v54;
  int16x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  int16x8_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  uint16x8_t v83;
  int16x8_t v84;
  int8x16_t v85;
  uint16x8_t v86;
  int16x8_t v87;
  int8x16_t v88;
  int16x8_t v89;
  uint16x8_t v90;
  int8x16_t v91;
  int16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  int8x16_t v95;
  int16x8_t v96;
  int16x8_t v97;

  v12 = (int *)((char *)&cdef_directions_padded + 8 * a6);
  v14 = v12[8];
  v13 = v12[9];
  v16 = *v12;
  v15 = v12[1];
  LODWORD(v12) = __clz(a5) ^ 0x1F;
  v17 = __OFSUB__(a8, (_DWORD)v12);
  v18 = a8 - (_DWORD)v12;
  if (v18 < 0 != v17)
    v18 = 0;
  if (!a5)
    v18 = a8;
  v19 = (uint16x8_t)vdupq_n_s16(a5);
  v20 = (uint16x8_t)vdupq_n_s16(-v18);
  if (a10 == 8)
  {
    v21 = 2 * v15;
    v22 = 2 * v14;
    do
    {
      v23 = *(uint16x8_t *)((char *)a3 + v22);
      v24 = *(uint16x8_t *)((char *)a3 - v22);
      v25 = *(uint16x8_t *)((char *)a3 + 2 * v16);
      v26 = *(uint16x8_t *)((char *)a3 - 2 * v16);
      v27 = *(uint16x8_t *)((char *)a3 + 2 * v13);
      v28 = *(uint16x8_t *)((char *)a3 - 2 * v13);
      v29 = *(uint16x8_t *)((char *)a3 + v21);
      v30 = *(uint16x8_t *)((char *)a3 - v21);
      v31 = vabdq_u16(v23, *a3);
      v32 = (int8x16_t)vminq_u16(v31, vqsubq_u16(v19, vshlq_u16(v31, v20)));
      v33 = vabdq_u16(v24, *a3);
      v34 = (int8x16_t)vminq_u16(v33, vqsubq_u16(v19, vshlq_u16(v33, v20)));
      v35 = vabdq_u16(v25, *a3);
      v36 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v23, *a3), v32, (int8x16_t)vnegq_s16((int16x8_t)v32));
      v37 = (int8x16_t)vminq_u16(v35, vqsubq_u16(v19, vshlq_u16(v35, v20)));
      v38 = vabdq_u16(v26, *a3);
      v39 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v24, *a3), v34, (int8x16_t)vnegq_s16((int16x8_t)v34));
      v40 = (int8x16_t)vminq_u16(v38, vqsubq_u16(v19, vshlq_u16(v38, v20)));
      v41 = vabdq_u16(v27, *a3);
      v42 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v25, *a3), v37, (int8x16_t)vnegq_s16((int16x8_t)v37));
      v43 = (int8x16_t)vminq_u16(v41, vqsubq_u16(v19, vshlq_u16(v41, v20)));
      v44 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v27, *a3), v43, (int8x16_t)vnegq_s16((int16x8_t)v43));
      v45 = vabdq_u16(v28, *a3);
      v46 = vaddq_s16(v39, v36);
      v47 = (int8x16_t)vminq_u16(v45, vqsubq_u16(v19, vshlq_u16(v45, v20)));
      v48 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v28, *a3), v47, (int8x16_t)vnegq_s16((int16x8_t)v47));
      v49 = vabdq_u16(v29, *a3);
      v50 = vaddq_s16(v42, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v26, *a3), v40, (int8x16_t)vnegq_s16((int16x8_t)v40)));
      v51 = (int8x16_t)vminq_u16(v49, vqsubq_u16(v19, vshlq_u16(v49, v20)));
      v52 = vaddq_s16(v46, v50);
      v53 = vabdq_u16(v30, *a3);
      v54 = (int8x16_t)vminq_u16(v53, vqsubq_u16(v19, vshlq_u16(v53, v20)));
      v55 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v44, v48), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v29, *a3), v51, (int8x16_t)vnegq_s16((int16x8_t)v51))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v30, *a3), v54, (int8x16_t)vnegq_s16((int16x8_t)v54))), vaddq_s16(v52, v52));
      *result = vrsraq_n_s16(*(int16x8_t *)a3, vsraq_n_s16(v55, v55, 0xFuLL), 4uLL);
      a3 += 18;
      result = (int16x8_t *)((char *)result + 2 * (int)a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    v56 = 2 * (int)(2 * a2);
    v57 = 2 * v15;
    v58 = 2 * v14;
    v59 = -2 * v14;
    v60 = 2 * v13;
    v61 = 2 * v16;
    v62 = -2 * v16;
    v63 = 2 * a2;
    do
    {
      v64.i64[0] = a3->i64[0];
      v64.i64[1] = a3[18].i64[0];
      v65.i64[0] = *(uint64_t *)((char *)a3->i64 + v58);
      v65.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v58);
      v66.i64[0] = *(uint64_t *)((char *)a3->i64 + v59);
      v66.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v59);
      v67.i64[0] = *(uint64_t *)((char *)a3->i64 + v61);
      v67.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v61);
      v68.i64[0] = *(uint64_t *)((char *)a3->i64 + v62);
      v68.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v62);
      v69.i64[0] = *(uint64_t *)((char *)a3->i64 + v60);
      v69.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v60);
      v70.i64[0] = *(uint64_t *)((char *)a3->i64 - v60);
      v70.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v60);
      v71.i64[0] = *(uint64_t *)((char *)a3->i64 + v57);
      v71.i64[1] = *(uint64_t *)((char *)a3[18].i64 + v57);
      v72.i64[0] = *(uint64_t *)((char *)a3->i64 - v57);
      v72.i64[1] = *(uint64_t *)((char *)a3[18].i64 - v57);
      v73 = vabdq_u16(v65, v64);
      v74 = (int8x16_t)vminq_u16(v73, vqsubq_u16(v19, vshlq_u16(v73, v20)));
      v75 = vabdq_u16(v66, v64);
      v76 = (int8x16_t)vminq_u16(v75, vqsubq_u16(v19, vshlq_u16(v75, v20)));
      v77 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v65, v64), v74, (int8x16_t)vnegq_s16((int16x8_t)v74));
      v78 = vabdq_u16(v67, v64);
      v79 = (int8x16_t)vminq_u16(v78, vqsubq_u16(v19, vshlq_u16(v78, v20)));
      v80 = vabdq_u16(v68, v64);
      v81 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v67, v64), v79, (int8x16_t)vnegq_s16((int16x8_t)v79));
      v82 = (int8x16_t)vminq_u16(v80, vqsubq_u16(v19, vshlq_u16(v80, v20)));
      v83 = vabdq_u16(v69, v64);
      v84 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v68, v64), v82, (int8x16_t)vnegq_s16((int16x8_t)v82));
      v85 = (int8x16_t)vminq_u16(v83, vqsubq_u16(v19, vshlq_u16(v83, v20)));
      v86 = vabdq_u16(v70, v64);
      v87 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v69, v64), v85, (int8x16_t)vnegq_s16((int16x8_t)v85));
      v88 = (int8x16_t)vminq_u16(v86, vqsubq_u16(v19, vshlq_u16(v86, v20)));
      v89 = vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v66, v64), v76, (int8x16_t)vnegq_s16((int16x8_t)v76)), v77);
      v90 = vabdq_u16(v71, v64);
      v91 = (int8x16_t)vminq_u16(v90, vqsubq_u16(v19, vshlq_u16(v90, v20)));
      v92 = vaddq_s16(v81, v84);
      v93 = vabdq_u16(v72, v64);
      v94 = vaddq_s16(v89, v92);
      v95 = (int8x16_t)vminq_u16(v93, vqsubq_u16(v19, vshlq_u16(v93, v20)));
      v96 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v87, (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v70, v64), v88, (int8x16_t)vnegq_s16((int16x8_t)v88))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v71, v64), v91, (int8x16_t)vnegq_s16((int16x8_t)v91))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16(v72, v64), v95, (int8x16_t)vnegq_s16((int16x8_t)v95))), vaddq_s16(v94, v94));
      v97 = vrsraq_n_s16((int16x8_t)v64, vsraq_n_s16(v96, v96, 0xFuLL), 4uLL);
      result->i64[0] = v97.i64[0];
      *(uint64_t *)((char *)result->i64 + v63) = v97.i64[1];
      a3 += 36;
      result = (int16x8_t *)((char *)result + v56);
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

_OWORD *cdef_filter_16_3_neon(_OWORD *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v12;

  if (a10 == 8)
  {
    do
    {
      *result = *(_OWORD *)a3;
      a3 += 288;
      result = (_OWORD *)((char *)result + 2 * (int)a2);
      --a11;
    }
    while (a11);
  }
  else
  {
    do
    {
      v12 = *(_QWORD *)(a3 + 288);
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)((char *)result + 2 * a2) = v12;
      result = (_OWORD *)((char *)result + 2 * (int)(2 * a2));
      a3 += 576;
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

uint64_t av1_cfl_predict_block(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int16x8_t *v22;
  unsigned int v23;
  uint64_t v24;
  int16x8_t v25;
  uint64_t v26;
  int16x8_t *v27;
  int v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;

  v10 = **(_QWORD **)(a1 + 7864);
  if (*(_DWORD *)(a1 + 15012))
    goto LABEL_27;
  v11 = a4;
  v12 = tx_size_wide_4[v11];
  v13 = tx_size_high_3[v11];
  v14 = a1 + 10776;
  v15 = *(int *)(a1 + 15008);
  v16 = (v12 - v15);
  v17 = *(int *)(a1 + 15004);
  v18 = v13 - v17;
  if ((int)v16 >= 1)
  {
    if ((int)v17 >= 1)
    {
      v19 = 0;
      v20 = 2 * v15;
      v21 = v14 + 2 * v15;
      v22 = (int16x8_t *)(v20 + a1 + 10792);
      do
      {
        v23 = *(unsigned __int16 *)(v21 - 2);
        if (v16 >= 0x10)
        {
          v25 = vdupq_n_s16(v23);
          v26 = v16 & 0xFFFFFFF0;
          v27 = v22;
          do
          {
            v27[-1] = v25;
            *v27 = v25;
            v27 += 2;
            v26 -= 16;
          }
          while (v26);
          v24 = v16 & 0x7FFFFFF0;
          if ((v16 & 0xFFFFFFF0) == v16)
            goto LABEL_5;
        }
        else
        {
          v24 = 0;
        }
        do
          *(_WORD *)(v21 + 2 * v24++) = v23;
        while (v16 != v24);
LABEL_5:
        v21 += 64;
        ++v19;
        v22 += 4;
      }
      while (v19 != (_DWORD)v17);
    }
    *(_DWORD *)(a1 + 15008) = v12;
  }
  if (v18 < 1)
    goto LABEL_26;
  v28 = 0;
  v29 = v17 << 6;
  v30 = (_OWORD *)(v14 + (v17 << 6));
  v31 = v29 + a1 + 10712;
  do
  {
    if (((0x2021uLL >> a4) & 1) != 0)
    {
      v34 = 0;
      do
      {
LABEL_23:
        *((_WORD *)v30 + v34) = *(_WORD *)(v31 + 2 * v34);
        ++v34;
      }
      while (v12 != v34);
      goto LABEL_16;
    }
    v32 = v12 & 0xFFFFFFF8;
    v33 = v30;
    do
    {
      *v33 = *(v33 - 4);
      ++v33;
      v32 -= 8;
    }
    while (v32);
    v34 = v12 & 0xFFFFFFF8;
    if (v34 != v12)
      goto LABEL_23;
LABEL_16:
    v30 += 4;
    ++v28;
    v31 += 64;
  }
  while (v28 != v18);
  *(_DWORD *)(a1 + 15004) = v13;
LABEL_26:
  cfl_get_subtract_average_fn_neon_sub_avg[(a4 - 19 * ((27 * a4) >> 9))]();
  *(_DWORD *)(a1 + 15012) = 1;
LABEL_27:
  v35 = *(unsigned __int8 *)(v10 + 93);
  v36 = *(char *)(v10 + 92);
  v37 = -3 * ((11 * (v36 + 1)) >> 5) + v36 + 1;
  v38 = (11 * v36 + 11) >> 5;
  if (a5 != 1)
    v38 = v37;
  v39 = v35 >> 4;
  v40 = v35 & 0xF;
  if (a5 == 1)
    v40 = v39;
  if (v38 == 2)
    v41 = v40 + 1;
  else
    v41 = ~v40;
  if (v38)
    v42 = v41;
  else
    v42 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))cfl_get_predict_lbd_fn_neon_pred[(a4 - 19 * ((27 * a4) >> 9))])(a1 + 12824, a2, a3, v42);
}

uint64_t cfl_store_tx(uint64_t a1, int a2, int a3, unsigned int a4, char a5)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t (**v22)();

  v6 = *(_DWORD *)(a1 + 56);
  if (((0x20005uLL >> a5) & 1) != 0 || (v7 = a2, v8 = a3, ((0x10003uLL >> a5) & 1) != 0))
  {
    v7 = a2;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      if (*(_DWORD *)(a1 + 15020))
        v7 = a2 + 1;
      else
        v7 = a2;
    }
    if ((*(_DWORD *)(a1 + 4) & 1) != 0)
    {
      if (*(_DWORD *)(a1 + 15016))
        v8 = a3 + 1;
      else
        v8 = a3;
    }
    else
    {
      v8 = a3;
    }
  }
  v9 = a4;
  v10 = a4;
  v11 = tx_size_wide_4[v10];
  v12 = tx_size_high_3[v10];
  v13 = *(_DWORD *)(a1 + 15016);
  v14 = *(_DWORD *)(a1 + 15020);
  v15 = v7 << (2 - v14);
  v16 = v8 << (2 - v13);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = v12 >> v14;
  v19 = v11 >> v13;
  *(_DWORD *)(a1 + 15012) = 0;
  if (v8 | v7)
  {
    v20 = v16 + v19;
    if (v16 + v19 <= *(_DWORD *)(a1 + 15008))
      v20 = *(_DWORD *)(a1 + 15008);
    *(_DWORD *)(a1 + 15008) = v20;
    v21 = v15 + v18;
    if (v15 + v18 <= *(_DWORD *)(a1 + 15004))
      v21 = *(_DWORD *)(a1 + 15004);
    *(_DWORD *)(a1 + 15004) = v21;
  }
  else
  {
    *(_DWORD *)(a1 + 15008) = v19;
    *(_DWORD *)(a1 + 15004) = v18;
  }
  v22 = cfl_get_luma_subsampling_422_lbd_neon_subfn_422;
  if (v14 == 1)
    v22 = cfl_get_luma_subsampling_420_lbd_neon_subfn_420;
  if (v13 != 1)
    v22 = cfl_get_luma_subsampling_444_lbd_neon_subfn_444;
  return ((uint64_t (*)(uint64_t))v22[v9])(v17 + 4 * (a3 + v6 * a2));
}

uint64_t cfl_store_block(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  signed int v9;
  int v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t (**v29)();

  if (((0x20005uLL >> a2) & 1) != 0 || ((0x10003uLL >> a2) & 1) != 0)
  {
    v7 = *(_DWORD *)(a1 + 4);
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v3 = *(_DWORD *)(a1 + 15020) != 0;
      if ((v7 & 1) != 0)
      {
LABEL_7:
        v4 = *(_DWORD *)(a1 + 15016) != 0;
        v5 = block_size_wide_5[a2];
        v6 = *(_DWORD *)(a1 + 7928);
        if ((v6 & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    else
    {
      v3 = 0;
      if ((v7 & 1) != 0)
        goto LABEL_7;
    }
    v4 = 0;
    v5 = block_size_wide_5[a2];
    v6 = *(_DWORD *)(a1 + 7928);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v3 = 0;
  v4 = 0;
  v5 = block_size_wide_5[a2];
  v6 = *(_DWORD *)(a1 + 7928);
  if ((v6 & 0x80000000) == 0)
    goto LABEL_12;
LABEL_11:
  v5 += v6 >> (*(_BYTE *)(a1 + 20) + 3);
LABEL_12:
  v8 = -1 << tx_size_wide_log2_1[a3];
  v9 = ((v5 & 0xFFFFFFFC) + ~v8) & v8;
  v10 = block_size_high_4[a2];
  v11 = *(_DWORD *)(a1 + 7936);
  if (v11 < 0)
    v10 += v11 >> (*(_BYTE *)(a1 + 24) + 3);
  v12 = -1 << tx_size_high_log2_1[a3];
  v13 = ((v10 & 0xFFFFFFFC) + ~v12) & v12;
  if (v9 != v13)
  {
    if (v9 >= v13)
    {
      if (v9 != 2 * v13)
      {
        switch(v13)
        {
          case 4:
            v14 = 14;
            break;
          case 16:
            v14 = 18;
            break;
          case 8:
            v14 = 16;
            goto LABEL_45;
          default:
            goto LABEL_39;
        }
        goto LABEL_45;
      }
      HIDWORD(v18) = v13;
      LODWORD(v18) = v13 - 4;
      v15 = v18 >> 2;
      if (v15 < 8)
      {
        v17 = &unk_208F56588;
        goto LABEL_27;
      }
    }
    else
    {
      if (v13 != 2 * v9)
      {
        switch(v9)
        {
          case 4:
            v14 = 13;
            break;
          case 16:
            v14 = 17;
            break;
          case 8:
            v14 = 15;
            goto LABEL_45;
          default:
            goto LABEL_39;
        }
        goto LABEL_45;
      }
      HIDWORD(v16) = v9;
      LODWORD(v16) = v9 - 4;
      v15 = v16 >> 2;
      if (v15 < 8)
      {
        v17 = &unk_208F56548;
LABEL_27:
        v14 = v17[v15];
        goto LABEL_45;
      }
    }
LABEL_39:
    v14 = 0;
    goto LABEL_45;
  }
  if (v9 <= 31)
  {
    if (v9 != 8)
    {
      if (v9 == 16)
      {
        v14 = 2;
        goto LABEL_45;
      }
      goto LABEL_39;
    }
    v14 = 1;
  }
  else
  {
    v14 = 4;
    if (v9 != 128 && v9 != 64)
    {
      if (v9 == 32)
      {
        v14 = 3;
        goto LABEL_45;
      }
      goto LABEL_39;
    }
  }
LABEL_45:
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(a1 + 15016);
  v21 = *(_DWORD *)(a1 + 15020);
  v22 = v3 << (2 - v21);
  v23 = v4 << (2 - v20);
  v24 = *(unsigned int *)(a1 + 56);
  v25 = tx_size_high_3[v14] >> v21;
  v26 = tx_size_wide_4[v14] >> v20;
  *(_DWORD *)(a1 + 15012) = 0;
  if (v4 | v3)
  {
    v27 = v23 + v26;
    if (v23 + v26 <= *(_DWORD *)(a1 + 15008))
      v27 = *(_DWORD *)(a1 + 15008);
    *(_DWORD *)(a1 + 15008) = v27;
    v28 = v22 + v25;
    if (v22 + v25 <= *(_DWORD *)(a1 + 15004))
      v28 = *(_DWORD *)(a1 + 15004);
    *(_DWORD *)(a1 + 15004) = v28;
  }
  else
  {
    *(_DWORD *)(a1 + 15008) = v26;
    *(_DWORD *)(a1 + 15004) = v25;
  }
  v29 = cfl_get_luma_subsampling_422_lbd_neon_subfn_422;
  if (v21 == 1)
    v29 = cfl_get_luma_subsampling_420_lbd_neon_subfn_420;
  if (v20 != 1)
    v29 = cfl_get_luma_subsampling_444_lbd_neon_subfn_444;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29[v14])(v19, v24, a1 + 2 * (v23 + 32 * v22) + 10776);
}

int16x4_t cfl_subsample_lbd_420_4x4_neon(const float *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  const float *v5;
  const float *v6;
  uint8x8_t v7;
  uint8x8_t v8;
  int16x4_t v9;
  const float *v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int16x4_t v13;
  int16x4_t result;

  v3 = 2 * a2;
  v4 = a2;
  v5 = (const float *)((char *)a1 + a2);
  v7 = (uint8x8_t)vld1_dup_f32(a1);
  v6 = (const float *)((char *)a1 + v3);
  v8 = (uint8x8_t)vld1_dup_f32(v5);
  v9 = (int16x4_t)vpadal_u8(vpaddl_u8(v8), v7);
  *a3 = vadd_s16(v9, v9).u32[0];
  v11 = (uint8x8_t)vld1_dup_f32(v6);
  v10 = (const float *)((char *)v6 + v4);
  v12 = (uint8x8_t)vld1_dup_f32(v10);
  v13 = (int16x4_t)vpadal_u8(vpaddl_u8(v12), v11);
  result = vadd_s16(v13, v13);
  a3[16] = result.i32[0];
  return result;
}

int16x4_t cfl_subsample_lbd_420_8x8_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint64_t v3;
  int16x4_t v4;
  int16x4_t v5;
  uint8x8_t *v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t result;

  v3 = 2 * a2;
  v4 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + a2)), *a1);
  *a3 = vadd_s16(v4, v4);
  v5 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + v3 + a2)), *(uint8x8_t *)((char *)a1 + v3));
  a3[8] = vadd_s16(v5, v5);
  v6 = (uint8x8_t *)((char *)a1 + v3 + v3);
  v7 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v6 + a2)), *v6);
  a3[16] = vadd_s16(v7, v7);
  v8 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v6 + v3 + a2)), *(uint8x8_t *)((char *)v6 + v3));
  result = vadd_s16(v8, v8);
  a3[24] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_420_16x16_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  uint8x16_t *v6;
  int16x8_t v7;
  uint8x16_t *v8;
  int16x8_t v9;
  uint8x16_t *v10;
  int16x8_t v11;
  uint8x16_t *v12;
  int16x8_t v13;
  uint8x16_t *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t result;

  v3 = 2 * a2;
  v4 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + a2)), *a1);
  *a3 = vaddq_s16(v4, v4);
  v5 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + v3 + a2)), *(uint8x16_t *)((char *)a1 + v3));
  a3[4] = vaddq_s16(v5, v5);
  v6 = (uint8x16_t *)((char *)a1 + v3 + v3);
  v7 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v6 + a2)), *v6);
  a3[8] = vaddq_s16(v7, v7);
  v8 = (uint8x16_t *)((char *)v6 + v3);
  v9 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v8 + a2)), *v8);
  a3[12] = vaddq_s16(v9, v9);
  v10 = (uint8x16_t *)((char *)v8 + v3);
  v11 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v10 + a2)), *v10);
  a3[16] = vaddq_s16(v11, v11);
  v12 = (uint8x16_t *)((char *)v10 + v3);
  v13 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v12 + a2)), *v12);
  a3[20] = vaddq_s16(v13, v13);
  v14 = (uint8x16_t *)((char *)v12 + v3);
  v15 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v14 + a2)), *v14);
  a3[24] = vaddq_s16(v15, v15);
  v16 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v14 + v3 + a2)), *(uint8x16_t *)((char *)v14 + v3));
  result = vaddq_s16(v16, v16);
  a3[28] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_420_32x32_neon(const char *a1, int a2, __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  int16x8_t v7;
  const char *v8;
  const char *v9;
  __int16 *v10;
  const char *v11;
  const char *v12;
  __int16 *v13;
  const char *v14;
  const char *v15;
  __int16 *v16;
  const char *v17;
  const char *v18;
  __int16 *v19;
  const char *v20;
  const char *v21;
  __int16 *v22;
  const char *v23;
  const char *v24;
  __int16 *v25;
  const char *v26;
  const char *v27;
  __int16 *v28;
  const char *v29;
  const char *v30;
  __int16 *v31;
  const char *v32;
  const char *v33;
  __int16 *v34;
  const char *v35;
  const char *v36;
  __int16 *v37;
  const char *v38;
  const char *v39;
  __int16 *v40;
  const char *v41;
  const char *v42;
  __int16 *v43;
  const char *v44;
  const char *v45;
  __int16 *v46;
  const char *v47;
  const char *v48;
  __int16 *v49;
  __int16 *v50;
  const char *v51;
  int16x8_t result;
  int16x8x2_t v53;
  int8x8x4_t v54;
  int8x8x4_t v55;
  int8x8x4_t v56;
  int8x8x4_t v57;
  int8x8x4_t v58;
  int8x8x4_t v59;
  int8x8x4_t v60;
  int8x8x4_t v61;
  int8x8x4_t v62;
  int8x8x4_t v63;
  int8x8x4_t v64;
  int8x8x4_t v65;
  int8x8x4_t v66;
  int8x8x4_t v67;
  int8x8x4_t v68;
  int8x8x4_t v69;
  int8x8x4_t v70;
  int8x8x4_t v71;
  int8x8x4_t v72;
  int8x8x4_t v73;
  int8x8x4_t v74;
  int8x8x4_t v75;
  int8x8x4_t v76;
  int8x8x4_t v77;
  int8x8x4_t v78;
  int8x8x4_t v79;
  int8x8x4_t v80;
  int8x8x4_t v81;
  int8x8x4_t v82;
  int8x8x4_t v83;
  int8x8x4_t v84;
  int8x8x4_t v85;

  v3 = 2 * a2;
  v4 = a2;
  v5 = &a1[a2];
  v54 = vld4_s8(a1);
  v6 = &a1[v3];
  v70 = vld4_s8(v5);
  v7 = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v54.val[0], (uint8x8_t)v54.val[1]), (uint8x8_t)v70.val[1]), (uint8x8_t)v70.val[0]);
  v53.val[0] = vaddq_s16(v7, v7);
  *(uint16x8_t *)v54.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v54.val[2], (uint8x8_t)v54.val[3]), (uint8x8_t)v70.val[3]), (uint8x8_t)v70.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v54.val[0].i8, *(int16x8_t *)v54.val[0].i8);
  vst2q_s16(a3, v53);
  v8 = &v6[a2];
  v55 = vld4_s8(v6);
  v9 = &v6[v3];
  v71 = vld4_s8(v8);
  v10 = a3 + 32;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v55.val[0], (uint8x8_t)v55.val[1]), (uint8x8_t)v71.val[1]), (uint8x8_t)v71.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v55.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v55.val[2], (uint8x8_t)v55.val[3]), (uint8x8_t)v71.val[3]), (uint8x8_t)v71.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v55.val[0].i8, *(int16x8_t *)v55.val[0].i8);
  vst2q_s16(v10, v53);
  v11 = &v9[a2];
  v56 = vld4_s8(v9);
  v12 = &v9[v3];
  v72 = vld4_s8(v11);
  v13 = a3 + 64;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v56.val[0], (uint8x8_t)v56.val[1]), (uint8x8_t)v72.val[1]), (uint8x8_t)v72.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v56.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v56.val[2], (uint8x8_t)v56.val[3]), (uint8x8_t)v72.val[3]), (uint8x8_t)v72.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v56.val[0].i8, *(int16x8_t *)v56.val[0].i8);
  vst2q_s16(v13, v53);
  v14 = &v12[a2];
  v57 = vld4_s8(v12);
  v15 = &v12[v3];
  v73 = vld4_s8(v14);
  v16 = a3 + 96;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v57.val[0], (uint8x8_t)v57.val[1]), (uint8x8_t)v73.val[1]), (uint8x8_t)v73.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v57.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v57.val[2], (uint8x8_t)v57.val[3]), (uint8x8_t)v73.val[3]), (uint8x8_t)v73.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v57.val[0].i8, *(int16x8_t *)v57.val[0].i8);
  vst2q_s16(v16, v53);
  v17 = &v15[a2];
  v58 = vld4_s8(v15);
  v18 = &v15[v3];
  v74 = vld4_s8(v17);
  v19 = a3 + 128;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v58.val[0], (uint8x8_t)v58.val[1]), (uint8x8_t)v74.val[1]), (uint8x8_t)v74.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v58.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v58.val[2], (uint8x8_t)v58.val[3]), (uint8x8_t)v74.val[3]), (uint8x8_t)v74.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v58.val[0].i8, *(int16x8_t *)v58.val[0].i8);
  vst2q_s16(v19, v53);
  v20 = &v18[a2];
  v59 = vld4_s8(v18);
  v21 = &v18[v3];
  v75 = vld4_s8(v20);
  v22 = a3 + 160;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v59.val[0], (uint8x8_t)v59.val[1]), (uint8x8_t)v75.val[1]), (uint8x8_t)v75.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v59.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v59.val[2], (uint8x8_t)v59.val[3]), (uint8x8_t)v75.val[3]), (uint8x8_t)v75.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v59.val[0].i8, *(int16x8_t *)v59.val[0].i8);
  vst2q_s16(v22, v53);
  v23 = &v21[a2];
  v60 = vld4_s8(v21);
  v24 = &v21[v3];
  v76 = vld4_s8(v23);
  v25 = a3 + 192;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v60.val[0], (uint8x8_t)v60.val[1]), (uint8x8_t)v76.val[1]), (uint8x8_t)v76.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v60.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v60.val[2], (uint8x8_t)v60.val[3]), (uint8x8_t)v76.val[3]), (uint8x8_t)v76.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v60.val[0].i8, *(int16x8_t *)v60.val[0].i8);
  vst2q_s16(v25, v53);
  v26 = &v24[a2];
  v61 = vld4_s8(v24);
  v27 = &v24[v3];
  v77 = vld4_s8(v26);
  v28 = a3 + 224;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v61.val[0], (uint8x8_t)v61.val[1]), (uint8x8_t)v77.val[1]), (uint8x8_t)v77.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v61.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v61.val[2], (uint8x8_t)v61.val[3]), (uint8x8_t)v77.val[3]), (uint8x8_t)v77.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v61.val[0].i8, *(int16x8_t *)v61.val[0].i8);
  vst2q_s16(v28, v53);
  v29 = &v27[a2];
  v62 = vld4_s8(v27);
  v30 = &v27[v3];
  v78 = vld4_s8(v29);
  v31 = a3 + 256;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v62.val[0], (uint8x8_t)v62.val[1]), (uint8x8_t)v78.val[1]), (uint8x8_t)v78.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v62.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v62.val[2], (uint8x8_t)v62.val[3]), (uint8x8_t)v78.val[3]), (uint8x8_t)v78.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v62.val[0].i8, *(int16x8_t *)v62.val[0].i8);
  vst2q_s16(v31, v53);
  v32 = &v30[a2];
  v63 = vld4_s8(v30);
  v33 = &v30[v3];
  v79 = vld4_s8(v32);
  v34 = a3 + 288;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v63.val[0], (uint8x8_t)v63.val[1]), (uint8x8_t)v79.val[1]), (uint8x8_t)v79.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v63.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v63.val[2], (uint8x8_t)v63.val[3]), (uint8x8_t)v79.val[3]), (uint8x8_t)v79.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v63.val[0].i8, *(int16x8_t *)v63.val[0].i8);
  vst2q_s16(v34, v53);
  v35 = &v33[a2];
  v64 = vld4_s8(v33);
  v36 = &v33[v3];
  v80 = vld4_s8(v35);
  v37 = a3 + 320;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v64.val[0], (uint8x8_t)v64.val[1]), (uint8x8_t)v80.val[1]), (uint8x8_t)v80.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v64.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v64.val[2], (uint8x8_t)v64.val[3]), (uint8x8_t)v80.val[3]), (uint8x8_t)v80.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v64.val[0].i8, *(int16x8_t *)v64.val[0].i8);
  vst2q_s16(v37, v53);
  v38 = &v36[a2];
  v65 = vld4_s8(v36);
  v39 = &v36[v3];
  v81 = vld4_s8(v38);
  v40 = a3 + 352;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v65.val[0], (uint8x8_t)v65.val[1]), (uint8x8_t)v81.val[1]), (uint8x8_t)v81.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v65.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v65.val[2], (uint8x8_t)v65.val[3]), (uint8x8_t)v81.val[3]), (uint8x8_t)v81.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v65.val[0].i8, *(int16x8_t *)v65.val[0].i8);
  vst2q_s16(v40, v53);
  v41 = &v39[a2];
  v66 = vld4_s8(v39);
  v42 = &v39[v3];
  v82 = vld4_s8(v41);
  v43 = a3 + 384;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v66.val[0], (uint8x8_t)v66.val[1]), (uint8x8_t)v82.val[1]), (uint8x8_t)v82.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v66.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v66.val[2], (uint8x8_t)v66.val[3]), (uint8x8_t)v82.val[3]), (uint8x8_t)v82.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v66.val[0].i8, *(int16x8_t *)v66.val[0].i8);
  vst2q_s16(v43, v53);
  v44 = &v42[a2];
  v67 = vld4_s8(v42);
  v45 = &v42[v3];
  v83 = vld4_s8(v44);
  v46 = a3 + 416;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v67.val[0], (uint8x8_t)v67.val[1]), (uint8x8_t)v83.val[1]), (uint8x8_t)v83.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v67.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v67.val[2], (uint8x8_t)v67.val[3]), (uint8x8_t)v83.val[3]), (uint8x8_t)v83.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v67.val[0].i8, *(int16x8_t *)v67.val[0].i8);
  vst2q_s16(v46, v53);
  v47 = &v45[a2];
  v68 = vld4_s8(v45);
  v48 = &v45[v3];
  v84 = vld4_s8(v47);
  v49 = a3 + 448;
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v68.val[0], (uint8x8_t)v68.val[1]), (uint8x8_t)v84.val[1]), (uint8x8_t)v84.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  *(uint16x8_t *)v68.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v68.val[2], (uint8x8_t)v68.val[3]), (uint8x8_t)v84.val[3]), (uint8x8_t)v84.val[2]);
  v53.val[1] = vaddq_s16(*(int16x8_t *)v68.val[0].i8, *(int16x8_t *)v68.val[0].i8);
  vst2q_s16(v49, v53);
  v50 = a3 + 480;
  v69 = vld4_s8(v48);
  v51 = &v48[v4];
  v85 = vld4_s8(v51);
  v53.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v69.val[0], (uint8x8_t)v69.val[1]), (uint8x8_t)v85.val[1]), (uint8x8_t)v85.val[0]);
  v53.val[0] = vaddq_s16(v53.val[0], v53.val[0]);
  result = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v69.val[2], (uint8x8_t)v69.val[3]), (uint8x8_t)v85.val[3]), (uint8x8_t)v85.val[2]);
  v53.val[1] = vaddq_s16(result, result);
  vst2q_s16(v50, v53);
  return result;
}

int16x4_t cfl_subsample_lbd_420_4x8_neon(const float *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  const float *v5;
  const float *v6;
  uint8x8_t v7;
  uint8x8_t v8;
  int16x4_t v9;
  const float *v10;
  const float *v11;
  uint8x8_t v12;
  uint8x8_t v13;
  int16x4_t v14;
  const float *v15;
  const float *v16;
  uint8x8_t v17;
  uint8x8_t v18;
  int16x4_t v19;
  const float *v20;
  uint8x8_t v21;
  uint8x8_t v22;
  int16x4_t v23;
  int16x4_t result;

  v3 = 2 * a2;
  v4 = a2;
  v5 = (const float *)((char *)a1 + a2);
  v7 = (uint8x8_t)vld1_dup_f32(a1);
  v6 = (const float *)((char *)a1 + v3);
  v8 = (uint8x8_t)vld1_dup_f32(v5);
  v9 = (int16x4_t)vpadal_u8(vpaddl_u8(v8), v7);
  *a3 = vadd_s16(v9, v9).u32[0];
  v10 = (const float *)((char *)v6 + v3);
  v12 = (uint8x8_t)vld1_dup_f32(v6);
  v11 = (const float *)((char *)v6 + v4);
  v13 = (uint8x8_t)vld1_dup_f32(v11);
  v14 = (int16x4_t)vpadal_u8(vpaddl_u8(v13), v12);
  a3[16] = vadd_s16(v14, v14).u32[0];
  v15 = (const float *)((char *)v10 + a2);
  v17 = (uint8x8_t)vld1_dup_f32(v10);
  v16 = (const float *)((char *)v10 + v3);
  v18 = (uint8x8_t)vld1_dup_f32(v15);
  v19 = (int16x4_t)vpadal_u8(vpaddl_u8(v18), v17);
  a3[32] = vadd_s16(v19, v19).u32[0];
  v21 = (uint8x8_t)vld1_dup_f32(v16);
  v20 = (const float *)((char *)v16 + v4);
  v22 = (uint8x8_t)vld1_dup_f32(v20);
  v23 = (int16x4_t)vpadal_u8(vpaddl_u8(v22), v21);
  result = vadd_s16(v23, v23);
  a3[48] = result.i32[0];
  return result;
}

int16x4_t cfl_subsample_lbd_420_8x4_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t result;

  v3 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + a2)), *a1);
  *a3 = vadd_s16(v3, v3);
  v4 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2 + a2)), *(uint8x8_t *)((char *)a1 + 2 * a2));
  result = vadd_s16(v4, v4);
  a3[8] = result;
  return result;
}

int16x4_t cfl_subsample_lbd_420_8x16_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint64_t v3;
  int16x4_t v4;
  int16x4_t v5;
  uint8x8_t *v6;
  int16x4_t v7;
  uint8x8_t *v8;
  int16x4_t v9;
  uint8x8_t *v10;
  int16x4_t v11;
  uint8x8_t *v12;
  int16x4_t v13;
  uint8x8_t *v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t result;

  v3 = 2 * a2;
  v4 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + a2)), *a1);
  *a3 = vadd_s16(v4, v4);
  v5 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + v3 + a2)), *(uint8x8_t *)((char *)a1 + v3));
  a3[8] = vadd_s16(v5, v5);
  v6 = (uint8x8_t *)((char *)a1 + v3 + v3);
  v7 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v6 + a2)), *v6);
  a3[16] = vadd_s16(v7, v7);
  v8 = (uint8x8_t *)((char *)v6 + v3);
  v9 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v8 + a2)), *v8);
  a3[24] = vadd_s16(v9, v9);
  v10 = (uint8x8_t *)((char *)v8 + v3);
  v11 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v10 + a2)), *v10);
  a3[32] = vadd_s16(v11, v11);
  v12 = (uint8x8_t *)((char *)v10 + v3);
  v13 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v12 + a2)), *v12);
  a3[40] = vadd_s16(v13, v13);
  v14 = (uint8x8_t *)((char *)v12 + v3);
  v15 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v14 + a2)), *v14);
  a3[48] = vadd_s16(v15, v15);
  v16 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v14 + v3 + a2)), *(uint8x8_t *)((char *)v14 + v3));
  result = vadd_s16(v16, v16);
  a3[56] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_420_16x8_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  uint8x16_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t result;

  v3 = 2 * a2;
  v4 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + a2)), *a1);
  *a3 = vaddq_s16(v4, v4);
  v5 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + v3 + a2)), *(uint8x16_t *)((char *)a1 + v3));
  a3[4] = vaddq_s16(v5, v5);
  v6 = (uint8x16_t *)((char *)a1 + v3 + v3);
  v7 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v6 + a2)), *v6);
  a3[8] = vaddq_s16(v7, v7);
  v8 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v6 + v3 + a2)), *(uint8x16_t *)((char *)v6 + v3));
  result = vaddq_s16(v8, v8);
  a3[12] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_420_16x32_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  uint8x16_t *v6;
  int16x8_t v7;
  uint8x16_t *v8;
  int16x8_t v9;
  uint8x16_t *v10;
  int16x8_t v11;
  uint8x16_t *v12;
  int16x8_t v13;
  uint8x16_t *v14;
  int16x8_t v15;
  uint8x16_t *v16;
  int16x8_t v17;
  uint8x16_t *v18;
  int16x8_t v19;
  uint8x16_t *v20;
  int16x8_t v21;
  uint8x16_t *v22;
  int16x8_t v23;
  uint8x16_t *v24;
  int16x8_t v25;
  uint8x16_t *v26;
  int16x8_t v27;
  uint8x16_t *v28;
  int16x8_t v29;
  uint8x16_t *v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t result;

  v3 = 2 * a2;
  v4 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + a2)), *a1);
  *a3 = vaddq_s16(v4, v4);
  v5 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + v3 + a2)), *(uint8x16_t *)((char *)a1 + v3));
  a3[4] = vaddq_s16(v5, v5);
  v6 = (uint8x16_t *)((char *)a1 + v3 + v3);
  v7 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v6 + a2)), *v6);
  a3[8] = vaddq_s16(v7, v7);
  v8 = (uint8x16_t *)((char *)v6 + v3);
  v9 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v8 + a2)), *v8);
  a3[12] = vaddq_s16(v9, v9);
  v10 = (uint8x16_t *)((char *)v8 + v3);
  v11 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v10 + a2)), *v10);
  a3[16] = vaddq_s16(v11, v11);
  v12 = (uint8x16_t *)((char *)v10 + v3);
  v13 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v12 + a2)), *v12);
  a3[20] = vaddq_s16(v13, v13);
  v14 = (uint8x16_t *)((char *)v12 + v3);
  v15 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v14 + a2)), *v14);
  a3[24] = vaddq_s16(v15, v15);
  v16 = (uint8x16_t *)((char *)v14 + v3);
  v17 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v16 + a2)), *v16);
  a3[28] = vaddq_s16(v17, v17);
  v18 = (uint8x16_t *)((char *)v16 + v3);
  v19 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v18 + a2)), *v18);
  a3[32] = vaddq_s16(v19, v19);
  v20 = (uint8x16_t *)((char *)v18 + v3);
  v21 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v20 + a2)), *v20);
  a3[36] = vaddq_s16(v21, v21);
  v22 = (uint8x16_t *)((char *)v20 + v3);
  v23 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v22 + a2)), *v22);
  a3[40] = vaddq_s16(v23, v23);
  v24 = (uint8x16_t *)((char *)v22 + v3);
  v25 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v24 + a2)), *v24);
  a3[44] = vaddq_s16(v25, v25);
  v26 = (uint8x16_t *)((char *)v24 + v3);
  v27 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v26 + a2)), *v26);
  a3[48] = vaddq_s16(v27, v27);
  v28 = (uint8x16_t *)((char *)v26 + v3);
  v29 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v28 + a2)), *v28);
  a3[52] = vaddq_s16(v29, v29);
  v30 = (uint8x16_t *)((char *)v28 + v3);
  v31 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v30 + a2)), *v30);
  a3[56] = vaddq_s16(v31, v31);
  v32 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)v30 + v3 + a2)), *(uint8x16_t *)((char *)v30 + v3));
  result = vaddq_s16(v32, v32);
  a3[60] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_420_32x16_neon(const char *a1, int a2, __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  int16x8_t v7;
  const char *v8;
  const char *v9;
  __int16 *v10;
  const char *v11;
  const char *v12;
  __int16 *v13;
  const char *v14;
  const char *v15;
  __int16 *v16;
  const char *v17;
  const char *v18;
  __int16 *v19;
  const char *v20;
  const char *v21;
  __int16 *v22;
  const char *v23;
  const char *v24;
  __int16 *v25;
  __int16 *v26;
  const char *v27;
  int16x8_t result;
  int16x8x2_t v29;
  int8x8x4_t v30;
  int8x8x4_t v31;
  int8x8x4_t v32;
  int8x8x4_t v33;
  int8x8x4_t v34;
  int8x8x4_t v35;
  int8x8x4_t v36;
  int8x8x4_t v37;
  int8x8x4_t v38;
  int8x8x4_t v39;
  int8x8x4_t v40;
  int8x8x4_t v41;
  int8x8x4_t v42;
  int8x8x4_t v43;
  int8x8x4_t v44;
  int8x8x4_t v45;

  v3 = 2 * a2;
  v4 = a2;
  v5 = &a1[a2];
  v30 = vld4_s8(a1);
  v6 = &a1[v3];
  v38 = vld4_s8(v5);
  v7 = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v30.val[0], (uint8x8_t)v30.val[1]), (uint8x8_t)v38.val[1]), (uint8x8_t)v38.val[0]);
  v29.val[0] = vaddq_s16(v7, v7);
  *(uint16x8_t *)v30.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v30.val[2], (uint8x8_t)v30.val[3]), (uint8x8_t)v38.val[3]), (uint8x8_t)v38.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v30.val[0].i8, *(int16x8_t *)v30.val[0].i8);
  vst2q_s16(a3, v29);
  v8 = &v6[a2];
  v31 = vld4_s8(v6);
  v9 = &v6[v3];
  v39 = vld4_s8(v8);
  v10 = a3 + 32;
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v31.val[0], (uint8x8_t)v31.val[1]), (uint8x8_t)v39.val[1]), (uint8x8_t)v39.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  *(uint16x8_t *)v31.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v31.val[2], (uint8x8_t)v31.val[3]), (uint8x8_t)v39.val[3]), (uint8x8_t)v39.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v31.val[0].i8, *(int16x8_t *)v31.val[0].i8);
  vst2q_s16(v10, v29);
  v11 = &v9[a2];
  v32 = vld4_s8(v9);
  v12 = &v9[v3];
  v40 = vld4_s8(v11);
  v13 = a3 + 64;
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v32.val[0], (uint8x8_t)v32.val[1]), (uint8x8_t)v40.val[1]), (uint8x8_t)v40.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  *(uint16x8_t *)v32.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v32.val[2], (uint8x8_t)v32.val[3]), (uint8x8_t)v40.val[3]), (uint8x8_t)v40.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v32.val[0].i8, *(int16x8_t *)v32.val[0].i8);
  vst2q_s16(v13, v29);
  v14 = &v12[a2];
  v33 = vld4_s8(v12);
  v15 = &v12[v3];
  v41 = vld4_s8(v14);
  v16 = a3 + 96;
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v33.val[0], (uint8x8_t)v33.val[1]), (uint8x8_t)v41.val[1]), (uint8x8_t)v41.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  *(uint16x8_t *)v33.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v33.val[2], (uint8x8_t)v33.val[3]), (uint8x8_t)v41.val[3]), (uint8x8_t)v41.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v33.val[0].i8, *(int16x8_t *)v33.val[0].i8);
  vst2q_s16(v16, v29);
  v17 = &v15[a2];
  v34 = vld4_s8(v15);
  v18 = &v15[v3];
  v42 = vld4_s8(v17);
  v19 = a3 + 128;
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v34.val[0], (uint8x8_t)v34.val[1]), (uint8x8_t)v42.val[1]), (uint8x8_t)v42.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  *(uint16x8_t *)v34.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v34.val[2], (uint8x8_t)v34.val[3]), (uint8x8_t)v42.val[3]), (uint8x8_t)v42.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v34.val[0].i8, *(int16x8_t *)v34.val[0].i8);
  vst2q_s16(v19, v29);
  v20 = &v18[a2];
  v35 = vld4_s8(v18);
  v21 = &v18[v3];
  v43 = vld4_s8(v20);
  v22 = a3 + 160;
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v35.val[0], (uint8x8_t)v35.val[1]), (uint8x8_t)v43.val[1]), (uint8x8_t)v43.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  *(uint16x8_t *)v35.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v35.val[2], (uint8x8_t)v35.val[3]), (uint8x8_t)v43.val[3]), (uint8x8_t)v43.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v35.val[0].i8, *(int16x8_t *)v35.val[0].i8);
  vst2q_s16(v22, v29);
  v23 = &v21[a2];
  v36 = vld4_s8(v21);
  v24 = &v21[v3];
  v44 = vld4_s8(v23);
  v25 = a3 + 192;
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v36.val[0], (uint8x8_t)v36.val[1]), (uint8x8_t)v44.val[1]), (uint8x8_t)v44.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  *(uint16x8_t *)v36.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v36.val[2], (uint8x8_t)v36.val[3]), (uint8x8_t)v44.val[3]), (uint8x8_t)v44.val[2]);
  v29.val[1] = vaddq_s16(*(int16x8_t *)v36.val[0].i8, *(int16x8_t *)v36.val[0].i8);
  vst2q_s16(v25, v29);
  v26 = a3 + 224;
  v37 = vld4_s8(v24);
  v27 = &v24[v4];
  v45 = vld4_s8(v27);
  v29.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v37.val[0], (uint8x8_t)v37.val[1]), (uint8x8_t)v45.val[1]), (uint8x8_t)v45.val[0]);
  v29.val[0] = vaddq_s16(v29.val[0], v29.val[0]);
  result = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v37.val[2], (uint8x8_t)v37.val[3]), (uint8x8_t)v45.val[3]), (uint8x8_t)v45.val[2]);
  v29.val[1] = vaddq_s16(result, result);
  vst2q_s16(v26, v29);
  return result;
}

int16x4_t cfl_subsample_lbd_420_4x16_neon(const float *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  const float *v5;
  const float *v6;
  uint8x8_t v7;
  uint8x8_t v8;
  int16x4_t v9;
  const float *v10;
  const float *v11;
  uint8x8_t v12;
  uint8x8_t v13;
  int16x4_t v14;
  const float *v15;
  const float *v16;
  uint8x8_t v17;
  uint8x8_t v18;
  int16x4_t v19;
  const float *v20;
  const float *v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int16x4_t v24;
  const float *v25;
  const float *v26;
  uint8x8_t v27;
  uint8x8_t v28;
  int16x4_t v29;
  const float *v30;
  const float *v31;
  uint8x8_t v32;
  uint8x8_t v33;
  int16x4_t v34;
  const float *v35;
  const float *v36;
  uint8x8_t v37;
  uint8x8_t v38;
  int16x4_t v39;
  const float *v40;
  uint8x8_t v41;
  uint8x8_t v42;
  int16x4_t v43;
  int16x4_t result;

  v3 = 2 * a2;
  v4 = a2;
  v5 = (const float *)((char *)a1 + a2);
  v7 = (uint8x8_t)vld1_dup_f32(a1);
  v6 = (const float *)((char *)a1 + v3);
  v8 = (uint8x8_t)vld1_dup_f32(v5);
  v9 = (int16x4_t)vpadal_u8(vpaddl_u8(v8), v7);
  *a3 = vadd_s16(v9, v9).u32[0];
  v10 = (const float *)((char *)v6 + v3);
  v12 = (uint8x8_t)vld1_dup_f32(v6);
  v11 = (const float *)((char *)v6 + v4);
  v13 = (uint8x8_t)vld1_dup_f32(v11);
  v14 = (int16x4_t)vpadal_u8(vpaddl_u8(v13), v12);
  a3[16] = vadd_s16(v14, v14).u32[0];
  v15 = (const float *)((char *)v10 + a2);
  v17 = (uint8x8_t)vld1_dup_f32(v10);
  v16 = (const float *)((char *)v10 + v3);
  v18 = (uint8x8_t)vld1_dup_f32(v15);
  v19 = (int16x4_t)vpadal_u8(vpaddl_u8(v18), v17);
  a3[32] = vadd_s16(v19, v19).u32[0];
  v20 = (const float *)((char *)v16 + v3);
  v22 = (uint8x8_t)vld1_dup_f32(v16);
  v21 = (const float *)((char *)v16 + v4);
  v23 = (uint8x8_t)vld1_dup_f32(v21);
  v24 = (int16x4_t)vpadal_u8(vpaddl_u8(v23), v22);
  a3[48] = vadd_s16(v24, v24).u32[0];
  v25 = (const float *)((char *)v20 + a2);
  v27 = (uint8x8_t)vld1_dup_f32(v20);
  v26 = (const float *)((char *)v20 + v3);
  v28 = (uint8x8_t)vld1_dup_f32(v25);
  v29 = (int16x4_t)vpadal_u8(vpaddl_u8(v28), v27);
  a3[64] = vadd_s16(v29, v29).u32[0];
  v30 = (const float *)((char *)v26 + v3);
  v32 = (uint8x8_t)vld1_dup_f32(v26);
  v31 = (const float *)((char *)v26 + v4);
  v33 = (uint8x8_t)vld1_dup_f32(v31);
  v34 = (int16x4_t)vpadal_u8(vpaddl_u8(v33), v32);
  a3[80] = vadd_s16(v34, v34).u32[0];
  v35 = (const float *)((char *)v30 + a2);
  v37 = (uint8x8_t)vld1_dup_f32(v30);
  v36 = (const float *)((char *)v30 + v3);
  v38 = (uint8x8_t)vld1_dup_f32(v35);
  v39 = (int16x4_t)vpadal_u8(vpaddl_u8(v38), v37);
  a3[96] = vadd_s16(v39, v39).u32[0];
  v41 = (uint8x8_t)vld1_dup_f32(v36);
  v40 = (const float *)((char *)v36 + v4);
  v42 = (uint8x8_t)vld1_dup_f32(v40);
  v43 = (int16x4_t)vpadal_u8(vpaddl_u8(v42), v41);
  result = vadd_s16(v43, v43);
  a3[112] = result.i32[0];
  return result;
}

int16x8_t cfl_subsample_lbd_420_16x4_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t result;

  v3 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + a2)), *a1);
  *a3 = vaddq_s16(v3, v3);
  v4 = (int16x8_t)vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)((char *)a1 + 2 * a2 + a2)), *(uint8x16_t *)((char *)a1 + 2 * a2));
  result = vaddq_s16(v4, v4);
  a3[4] = result;
  return result;
}

int16x4_t cfl_subsample_lbd_420_8x32_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint64_t v3;
  int16x4_t v4;
  int16x4_t v5;
  uint8x8_t *v6;
  int16x4_t v7;
  uint8x8_t *v8;
  int16x4_t v9;
  uint8x8_t *v10;
  int16x4_t v11;
  uint8x8_t *v12;
  int16x4_t v13;
  uint8x8_t *v14;
  int16x4_t v15;
  uint8x8_t *v16;
  int16x4_t v17;
  uint8x8_t *v18;
  int16x4_t v19;
  uint8x8_t *v20;
  int16x4_t v21;
  uint8x8_t *v22;
  int16x4_t v23;
  uint8x8_t *v24;
  int16x4_t v25;
  uint8x8_t *v26;
  int16x4_t v27;
  uint8x8_t *v28;
  int16x4_t v29;
  uint8x8_t *v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t result;

  v3 = 2 * a2;
  v4 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + a2)), *a1);
  *a3 = vadd_s16(v4, v4);
  v5 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)a1 + v3 + a2)), *(uint8x8_t *)((char *)a1 + v3));
  a3[8] = vadd_s16(v5, v5);
  v6 = (uint8x8_t *)((char *)a1 + v3 + v3);
  v7 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v6 + a2)), *v6);
  a3[16] = vadd_s16(v7, v7);
  v8 = (uint8x8_t *)((char *)v6 + v3);
  v9 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v8 + a2)), *v8);
  a3[24] = vadd_s16(v9, v9);
  v10 = (uint8x8_t *)((char *)v8 + v3);
  v11 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v10 + a2)), *v10);
  a3[32] = vadd_s16(v11, v11);
  v12 = (uint8x8_t *)((char *)v10 + v3);
  v13 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v12 + a2)), *v12);
  a3[40] = vadd_s16(v13, v13);
  v14 = (uint8x8_t *)((char *)v12 + v3);
  v15 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v14 + a2)), *v14);
  a3[48] = vadd_s16(v15, v15);
  v16 = (uint8x8_t *)((char *)v14 + v3);
  v17 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v16 + a2)), *v16);
  a3[56] = vadd_s16(v17, v17);
  v18 = (uint8x8_t *)((char *)v16 + v3);
  v19 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v18 + a2)), *v18);
  a3[64] = vadd_s16(v19, v19);
  v20 = (uint8x8_t *)((char *)v18 + v3);
  v21 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v20 + a2)), *v20);
  a3[72] = vadd_s16(v21, v21);
  v22 = (uint8x8_t *)((char *)v20 + v3);
  v23 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v22 + a2)), *v22);
  a3[80] = vadd_s16(v23, v23);
  v24 = (uint8x8_t *)((char *)v22 + v3);
  v25 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v24 + a2)), *v24);
  a3[88] = vadd_s16(v25, v25);
  v26 = (uint8x8_t *)((char *)v24 + v3);
  v27 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v26 + a2)), *v26);
  a3[96] = vadd_s16(v27, v27);
  v28 = (uint8x8_t *)((char *)v26 + v3);
  v29 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v28 + a2)), *v28);
  a3[104] = vadd_s16(v29, v29);
  v30 = (uint8x8_t *)((char *)v28 + v3);
  v31 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v30 + a2)), *v30);
  a3[112] = vadd_s16(v31, v31);
  v32 = (int16x4_t)vpadal_u8(vpaddl_u8(*(uint8x8_t *)((char *)v30 + v3 + a2)), *(uint8x8_t *)((char *)v30 + v3));
  result = vadd_s16(v32, v32);
  a3[120] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_420_32x8_neon(const char *a1, int a2, __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  int16x8_t v7;
  const char *v8;
  const char *v9;
  __int16 *v10;
  const char *v11;
  const char *v12;
  __int16 *v13;
  __int16 *v14;
  const char *v15;
  int16x8_t result;
  int16x8x2_t v17;
  int8x8x4_t v18;
  int8x8x4_t v19;
  int8x8x4_t v20;
  int8x8x4_t v21;
  int8x8x4_t v22;
  int8x8x4_t v23;
  int8x8x4_t v24;
  int8x8x4_t v25;

  v3 = 2 * a2;
  v4 = a2;
  v5 = &a1[a2];
  v18 = vld4_s8(a1);
  v6 = &a1[v3];
  v22 = vld4_s8(v5);
  v7 = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v18.val[0], (uint8x8_t)v18.val[1]), (uint8x8_t)v22.val[1]), (uint8x8_t)v22.val[0]);
  v17.val[0] = vaddq_s16(v7, v7);
  *(uint16x8_t *)v18.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v18.val[2], (uint8x8_t)v18.val[3]), (uint8x8_t)v22.val[3]), (uint8x8_t)v22.val[2]);
  v17.val[1] = vaddq_s16(*(int16x8_t *)v18.val[0].i8, *(int16x8_t *)v18.val[0].i8);
  vst2q_s16(a3, v17);
  v8 = &v6[a2];
  v19 = vld4_s8(v6);
  v9 = &v6[v3];
  v23 = vld4_s8(v8);
  v10 = a3 + 32;
  v17.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v19.val[0], (uint8x8_t)v19.val[1]), (uint8x8_t)v23.val[1]), (uint8x8_t)v23.val[0]);
  v17.val[0] = vaddq_s16(v17.val[0], v17.val[0]);
  *(uint16x8_t *)v19.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v19.val[2], (uint8x8_t)v19.val[3]), (uint8x8_t)v23.val[3]), (uint8x8_t)v23.val[2]);
  v17.val[1] = vaddq_s16(*(int16x8_t *)v19.val[0].i8, *(int16x8_t *)v19.val[0].i8);
  vst2q_s16(v10, v17);
  v11 = &v9[a2];
  v20 = vld4_s8(v9);
  v12 = &v9[v3];
  v24 = vld4_s8(v11);
  v13 = a3 + 64;
  v17.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v20.val[0], (uint8x8_t)v20.val[1]), (uint8x8_t)v24.val[1]), (uint8x8_t)v24.val[0]);
  v17.val[0] = vaddq_s16(v17.val[0], v17.val[0]);
  *(uint16x8_t *)v20.val[0].i8 = vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v20.val[2], (uint8x8_t)v20.val[3]), (uint8x8_t)v24.val[3]), (uint8x8_t)v24.val[2]);
  v17.val[1] = vaddq_s16(*(int16x8_t *)v20.val[0].i8, *(int16x8_t *)v20.val[0].i8);
  vst2q_s16(v13, v17);
  v14 = a3 + 96;
  v21 = vld4_s8(v12);
  v15 = &v12[v4];
  v25 = vld4_s8(v15);
  v17.val[0] = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v21.val[0], (uint8x8_t)v21.val[1]), (uint8x8_t)v25.val[1]), (uint8x8_t)v25.val[0]);
  v17.val[0] = vaddq_s16(v17.val[0], v17.val[0]);
  result = (int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v21.val[2], (uint8x8_t)v21.val[3]), (uint8x8_t)v25.val[3]), (uint8x8_t)v25.val[2]);
  v17.val[1] = vaddq_s16(result, result);
  vst2q_s16(v14, v17);
  return result;
}

int16x4_t cfl_subsample_lbd_422_4x4_neon(const float *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  const float *v4;
  uint8x8_t v5;
  const float *v6;
  uint8x8_t v7;
  const float *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  int16x4_t result;

  v3 = a2;
  v5 = (uint8x8_t)vld1_dup_f32(a1);
  v4 = (const float *)((char *)a1 + v3);
  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(v5), 2uLL).u32[0];
  v7 = (uint8x8_t)vld1_dup_f32(v4);
  v6 = (const float *)((char *)v4 + v3);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(v7), 2uLL).u32[0];
  v9 = (uint8x8_t)vld1_dup_f32(v6);
  v8 = (const float *)((char *)v6 + v3);
  a3[32] = vshl_n_s16((int16x4_t)vpaddl_u8(v9), 2uLL).u32[0];
  v10 = (uint8x8_t)vld1_dup_f32(v8);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(v10), 2uLL);
  a3[48] = result.i32[0];
  return result;
}

int16x4_t cfl_subsample_lbd_422_8x8_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  int16x4_t result;

  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(*a1), 2uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[8] = vshl_n_s16((int16x4_t)vpaddl_u8(*v3), 2uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(*v4), 2uLL);
  v5 = (uint8x8_t *)((char *)v4 + a2);
  a3[24] = vshl_n_s16((int16x4_t)vpaddl_u8(*v5), 2uLL);
  v6 = (uint8x8_t *)((char *)v5 + a2);
  a3[32] = vshl_n_s16((int16x4_t)vpaddl_u8(*v6), 2uLL);
  v7 = (uint8x8_t *)((char *)v6 + a2);
  a3[40] = vshl_n_s16((int16x4_t)vpaddl_u8(*v7), 2uLL);
  v8 = (uint8x8_t *)((char *)v7 + a2);
  a3[48] = vshl_n_s16((int16x4_t)vpaddl_u8(*v8), 2uLL);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)((char *)v8 + a2)), 2uLL);
  a3[56] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_422_16x16_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  int16x8_t result;

  *a3 = vshlq_n_s16((int16x8_t)vpaddlq_u8(*a1), 2uLL);
  v3 = (uint8x16_t *)((char *)a1 + a2);
  a3[4] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v3), 2uLL);
  v4 = (uint8x16_t *)((char *)v3 + a2);
  a3[8] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v4), 2uLL);
  v5 = (uint8x16_t *)((char *)v4 + a2);
  a3[12] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v5), 2uLL);
  v6 = (uint8x16_t *)((char *)v5 + a2);
  a3[16] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v6), 2uLL);
  v7 = (uint8x16_t *)((char *)v6 + a2);
  a3[20] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v7), 2uLL);
  v8 = (uint8x16_t *)((char *)v7 + a2);
  a3[24] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v8), 2uLL);
  v9 = (uint8x16_t *)((char *)v8 + a2);
  a3[28] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v9), 2uLL);
  v10 = (uint8x16_t *)((char *)v9 + a2);
  a3[32] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v10), 2uLL);
  v11 = (uint8x16_t *)((char *)v10 + a2);
  a3[36] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v11), 2uLL);
  v12 = (uint8x16_t *)((char *)v11 + a2);
  a3[40] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v12), 2uLL);
  v13 = (uint8x16_t *)((char *)v12 + a2);
  a3[44] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v13), 2uLL);
  v14 = (uint8x16_t *)((char *)v13 + a2);
  a3[48] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v14), 2uLL);
  v15 = (uint8x16_t *)((char *)v14 + a2);
  a3[52] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v15), 2uLL);
  v16 = (uint8x16_t *)((char *)v15 + a2);
  a3[56] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v16), 2uLL);
  result = vshlq_n_s16((int16x8_t)vpaddlq_u8(*(uint8x16_t *)((char *)v16 + a2)), 2uLL);
  a3[60] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_422_32x32_neon(const char *a1, int a2, __int16 *a3)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  __int16 *v6;
  const char *v7;
  __int16 *v8;
  const char *v9;
  __int16 *v10;
  const char *v11;
  __int16 *v12;
  const char *v13;
  __int16 *v14;
  const char *v15;
  __int16 *v16;
  const char *v17;
  __int16 *v18;
  const char *v19;
  __int16 *v20;
  const char *v21;
  __int16 *v22;
  const char *v23;
  __int16 *v24;
  const char *v25;
  __int16 *v26;
  const char *v27;
  __int16 *v28;
  const char *v29;
  __int16 *v30;
  const char *v31;
  __int16 *v32;
  const char *v33;
  __int16 *v34;
  const char *v35;
  __int16 *v36;
  const char *v37;
  __int16 *v38;
  const char *v39;
  __int16 *v40;
  const char *v41;
  __int16 *v42;
  const char *v43;
  __int16 *v44;
  const char *v45;
  __int16 *v46;
  const char *v47;
  __int16 *v48;
  const char *v49;
  __int16 *v50;
  const char *v51;
  __int16 *v52;
  const char *v53;
  __int16 *v54;
  const char *v55;
  __int16 *v56;
  const char *v57;
  __int16 *v58;
  const char *v59;
  __int16 *v60;
  const char *v61;
  __int16 *v62;
  const char *v63;
  __int16 *v64;
  __int16 *v65;
  int16x8_t result;
  int16x8x2_t v67;
  int8x8x4_t v68;
  int8x8x4_t v69;
  int8x8x4_t v70;
  int8x8x4_t v71;
  int8x8x4_t v72;
  int8x8x4_t v73;
  int8x8x4_t v74;
  int8x8x4_t v75;
  int8x8x4_t v76;
  int8x8x4_t v77;
  int8x8x4_t v78;
  int8x8x4_t v79;
  int8x8x4_t v80;
  int8x8x4_t v81;
  int8x8x4_t v82;
  int8x8x4_t v83;
  int8x8x4_t v84;
  int8x8x4_t v85;
  int8x8x4_t v86;
  int8x8x4_t v87;
  int8x8x4_t v88;
  int8x8x4_t v89;
  int8x8x4_t v90;
  int8x8x4_t v91;
  int8x8x4_t v92;
  int8x8x4_t v93;
  int8x8x4_t v94;
  int8x8x4_t v95;
  int8x8x4_t v96;
  int8x8x4_t v97;
  int8x8x4_t v98;
  int8x8x4_t v99;

  v3 = a2;
  v68 = vld4_s8(a1);
  v4 = &a1[v3];
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v68.val[0], (uint8x8_t)v68.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v68.val[2], (uint8x8_t)v68.val[3]), 2uLL);
  vst2q_s16(a3, v67);
  v69 = vld4_s8(v4);
  v5 = &v4[v3];
  v6 = a3 + 32;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v69.val[0], (uint8x8_t)v69.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v69.val[2], (uint8x8_t)v69.val[3]), 2uLL);
  vst2q_s16(v6, v67);
  v70 = vld4_s8(v5);
  v7 = &v5[v3];
  v8 = a3 + 64;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v70.val[0], (uint8x8_t)v70.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v70.val[2], (uint8x8_t)v70.val[3]), 2uLL);
  vst2q_s16(v8, v67);
  v71 = vld4_s8(v7);
  v9 = &v7[v3];
  v10 = a3 + 96;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v71.val[0], (uint8x8_t)v71.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v71.val[2], (uint8x8_t)v71.val[3]), 2uLL);
  vst2q_s16(v10, v67);
  v72 = vld4_s8(v9);
  v11 = &v9[v3];
  v12 = a3 + 128;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v72.val[0], (uint8x8_t)v72.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v72.val[2], (uint8x8_t)v72.val[3]), 2uLL);
  vst2q_s16(v12, v67);
  v73 = vld4_s8(v11);
  v13 = &v11[v3];
  v14 = a3 + 160;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v73.val[0], (uint8x8_t)v73.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v73.val[2], (uint8x8_t)v73.val[3]), 2uLL);
  vst2q_s16(v14, v67);
  v74 = vld4_s8(v13);
  v15 = &v13[v3];
  v16 = a3 + 192;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v74.val[0], (uint8x8_t)v74.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v74.val[2], (uint8x8_t)v74.val[3]), 2uLL);
  vst2q_s16(v16, v67);
  v75 = vld4_s8(v15);
  v17 = &v15[v3];
  v18 = a3 + 224;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v75.val[0], (uint8x8_t)v75.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v75.val[2], (uint8x8_t)v75.val[3]), 2uLL);
  vst2q_s16(v18, v67);
  v76 = vld4_s8(v17);
  v19 = &v17[v3];
  v20 = a3 + 256;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v76.val[0], (uint8x8_t)v76.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v76.val[2], (uint8x8_t)v76.val[3]), 2uLL);
  vst2q_s16(v20, v67);
  v77 = vld4_s8(v19);
  v21 = &v19[v3];
  v22 = a3 + 288;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v77.val[0], (uint8x8_t)v77.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v77.val[2], (uint8x8_t)v77.val[3]), 2uLL);
  vst2q_s16(v22, v67);
  v78 = vld4_s8(v21);
  v23 = &v21[v3];
  v24 = a3 + 320;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v78.val[0], (uint8x8_t)v78.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v78.val[2], (uint8x8_t)v78.val[3]), 2uLL);
  vst2q_s16(v24, v67);
  v79 = vld4_s8(v23);
  v25 = &v23[v3];
  v26 = a3 + 352;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v79.val[0], (uint8x8_t)v79.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v79.val[2], (uint8x8_t)v79.val[3]), 2uLL);
  vst2q_s16(v26, v67);
  v80 = vld4_s8(v25);
  v27 = &v25[v3];
  v28 = a3 + 384;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v80.val[0], (uint8x8_t)v80.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v80.val[2], (uint8x8_t)v80.val[3]), 2uLL);
  vst2q_s16(v28, v67);
  v81 = vld4_s8(v27);
  v29 = &v27[v3];
  v30 = a3 + 416;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v81.val[0], (uint8x8_t)v81.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v81.val[2], (uint8x8_t)v81.val[3]), 2uLL);
  vst2q_s16(v30, v67);
  v82 = vld4_s8(v29);
  v31 = &v29[v3];
  v32 = a3 + 448;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v82.val[0], (uint8x8_t)v82.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v82.val[2], (uint8x8_t)v82.val[3]), 2uLL);
  vst2q_s16(v32, v67);
  v83 = vld4_s8(v31);
  v33 = &v31[v3];
  v34 = a3 + 480;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v83.val[0], (uint8x8_t)v83.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v83.val[2], (uint8x8_t)v83.val[3]), 2uLL);
  vst2q_s16(v34, v67);
  v84 = vld4_s8(v33);
  v35 = &v33[v3];
  v36 = a3 + 512;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v84.val[0], (uint8x8_t)v84.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v84.val[2], (uint8x8_t)v84.val[3]), 2uLL);
  vst2q_s16(v36, v67);
  v85 = vld4_s8(v35);
  v37 = &v35[v3];
  v38 = a3 + 544;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v85.val[0], (uint8x8_t)v85.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v85.val[2], (uint8x8_t)v85.val[3]), 2uLL);
  vst2q_s16(v38, v67);
  v86 = vld4_s8(v37);
  v39 = &v37[v3];
  v40 = a3 + 576;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v86.val[0], (uint8x8_t)v86.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v86.val[2], (uint8x8_t)v86.val[3]), 2uLL);
  vst2q_s16(v40, v67);
  v87 = vld4_s8(v39);
  v41 = &v39[v3];
  v42 = a3 + 608;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v87.val[0], (uint8x8_t)v87.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v87.val[2], (uint8x8_t)v87.val[3]), 2uLL);
  vst2q_s16(v42, v67);
  v88 = vld4_s8(v41);
  v43 = &v41[v3];
  v44 = a3 + 640;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v88.val[0], (uint8x8_t)v88.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v88.val[2], (uint8x8_t)v88.val[3]), 2uLL);
  vst2q_s16(v44, v67);
  v89 = vld4_s8(v43);
  v45 = &v43[v3];
  v46 = a3 + 672;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v89.val[0], (uint8x8_t)v89.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v89.val[2], (uint8x8_t)v89.val[3]), 2uLL);
  vst2q_s16(v46, v67);
  v90 = vld4_s8(v45);
  v47 = &v45[v3];
  v48 = a3 + 704;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v90.val[0], (uint8x8_t)v90.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v90.val[2], (uint8x8_t)v90.val[3]), 2uLL);
  vst2q_s16(v48, v67);
  v91 = vld4_s8(v47);
  v49 = &v47[v3];
  v50 = a3 + 736;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v91.val[0], (uint8x8_t)v91.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v91.val[2], (uint8x8_t)v91.val[3]), 2uLL);
  vst2q_s16(v50, v67);
  v92 = vld4_s8(v49);
  v51 = &v49[v3];
  v52 = a3 + 768;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v92.val[0], (uint8x8_t)v92.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v92.val[2], (uint8x8_t)v92.val[3]), 2uLL);
  vst2q_s16(v52, v67);
  v93 = vld4_s8(v51);
  v53 = &v51[v3];
  v54 = a3 + 800;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v93.val[0], (uint8x8_t)v93.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v93.val[2], (uint8x8_t)v93.val[3]), 2uLL);
  vst2q_s16(v54, v67);
  v94 = vld4_s8(v53);
  v55 = &v53[v3];
  v56 = a3 + 832;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v94.val[0], (uint8x8_t)v94.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v94.val[2], (uint8x8_t)v94.val[3]), 2uLL);
  vst2q_s16(v56, v67);
  v95 = vld4_s8(v55);
  v57 = &v55[v3];
  v58 = a3 + 864;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v95.val[0], (uint8x8_t)v95.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v95.val[2], (uint8x8_t)v95.val[3]), 2uLL);
  vst2q_s16(v58, v67);
  v96 = vld4_s8(v57);
  v59 = &v57[v3];
  v60 = a3 + 896;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v96.val[0], (uint8x8_t)v96.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v96.val[2], (uint8x8_t)v96.val[3]), 2uLL);
  vst2q_s16(v60, v67);
  v97 = vld4_s8(v59);
  v61 = &v59[v3];
  v62 = a3 + 928;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v97.val[0], (uint8x8_t)v97.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v97.val[2], (uint8x8_t)v97.val[3]), 2uLL);
  vst2q_s16(v62, v67);
  v98 = vld4_s8(v61);
  v63 = &v61[v3];
  v64 = a3 + 960;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v98.val[0], (uint8x8_t)v98.val[1]), 2uLL);
  v67.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v98.val[2], (uint8x8_t)v98.val[3]), 2uLL);
  vst2q_s16(v64, v67);
  v99 = vld4_s8(v63);
  v65 = a3 + 992;
  v67.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v99.val[0], (uint8x8_t)v99.val[1]), 2uLL);
  result = (int16x8_t)vaddl_u8((uint8x8_t)v99.val[2], (uint8x8_t)v99.val[3]);
  v67.val[1] = vshlq_n_s16(result, 2uLL);
  vst2q_s16(v65, v67);
  return result;
}

int16x4_t cfl_subsample_lbd_422_4x8_neon(const float *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  const float *v4;
  uint8x8_t v5;
  const float *v6;
  uint8x8_t v7;
  const float *v8;
  uint8x8_t v9;
  const float *v10;
  uint8x8_t v11;
  const float *v12;
  uint8x8_t v13;
  const float *v14;
  uint8x8_t v15;
  const float *v16;
  uint8x8_t v17;
  uint8x8_t v18;
  int16x4_t result;

  v3 = a2;
  v5 = (uint8x8_t)vld1_dup_f32(a1);
  v4 = (const float *)((char *)a1 + v3);
  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(v5), 2uLL).u32[0];
  v7 = (uint8x8_t)vld1_dup_f32(v4);
  v6 = (const float *)((char *)v4 + v3);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(v7), 2uLL).u32[0];
  v9 = (uint8x8_t)vld1_dup_f32(v6);
  v8 = (const float *)((char *)v6 + v3);
  a3[32] = vshl_n_s16((int16x4_t)vpaddl_u8(v9), 2uLL).u32[0];
  v11 = (uint8x8_t)vld1_dup_f32(v8);
  v10 = (const float *)((char *)v8 + v3);
  a3[48] = vshl_n_s16((int16x4_t)vpaddl_u8(v11), 2uLL).u32[0];
  v13 = (uint8x8_t)vld1_dup_f32(v10);
  v12 = (const float *)((char *)v10 + v3);
  a3[64] = vshl_n_s16((int16x4_t)vpaddl_u8(v13), 2uLL).u32[0];
  v15 = (uint8x8_t)vld1_dup_f32(v12);
  v14 = (const float *)((char *)v12 + v3);
  a3[80] = vshl_n_s16((int16x4_t)vpaddl_u8(v15), 2uLL).u32[0];
  v17 = (uint8x8_t)vld1_dup_f32(v14);
  v16 = (const float *)((char *)v14 + v3);
  a3[96] = vshl_n_s16((int16x4_t)vpaddl_u8(v17), 2uLL).u32[0];
  v18 = (uint8x8_t)vld1_dup_f32(v16);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(v18), 2uLL);
  a3[112] = result.i32[0];
  return result;
}

int16x4_t cfl_subsample_lbd_422_8x4_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  int16x4_t result;

  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(*a1), 2uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[8] = vshl_n_s16((int16x4_t)vpaddl_u8(*v3), 2uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(*v4), 2uLL);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)((char *)v4 + a2)), 2uLL);
  a3[24] = result;
  return result;
}

int16x4_t cfl_subsample_lbd_422_8x16_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  int16x4_t result;

  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(*a1), 2uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[8] = vshl_n_s16((int16x4_t)vpaddl_u8(*v3), 2uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(*v4), 2uLL);
  v5 = (uint8x8_t *)((char *)v4 + a2);
  a3[24] = vshl_n_s16((int16x4_t)vpaddl_u8(*v5), 2uLL);
  v6 = (uint8x8_t *)((char *)v5 + a2);
  a3[32] = vshl_n_s16((int16x4_t)vpaddl_u8(*v6), 2uLL);
  v7 = (uint8x8_t *)((char *)v6 + a2);
  a3[40] = vshl_n_s16((int16x4_t)vpaddl_u8(*v7), 2uLL);
  v8 = (uint8x8_t *)((char *)v7 + a2);
  a3[48] = vshl_n_s16((int16x4_t)vpaddl_u8(*v8), 2uLL);
  v9 = (uint8x8_t *)((char *)v8 + a2);
  a3[56] = vshl_n_s16((int16x4_t)vpaddl_u8(*v9), 2uLL);
  v10 = (uint8x8_t *)((char *)v9 + a2);
  a3[64] = vshl_n_s16((int16x4_t)vpaddl_u8(*v10), 2uLL);
  v11 = (uint8x8_t *)((char *)v10 + a2);
  a3[72] = vshl_n_s16((int16x4_t)vpaddl_u8(*v11), 2uLL);
  v12 = (uint8x8_t *)((char *)v11 + a2);
  a3[80] = vshl_n_s16((int16x4_t)vpaddl_u8(*v12), 2uLL);
  v13 = (uint8x8_t *)((char *)v12 + a2);
  a3[88] = vshl_n_s16((int16x4_t)vpaddl_u8(*v13), 2uLL);
  v14 = (uint8x8_t *)((char *)v13 + a2);
  a3[96] = vshl_n_s16((int16x4_t)vpaddl_u8(*v14), 2uLL);
  v15 = (uint8x8_t *)((char *)v14 + a2);
  a3[104] = vshl_n_s16((int16x4_t)vpaddl_u8(*v15), 2uLL);
  v16 = (uint8x8_t *)((char *)v15 + a2);
  a3[112] = vshl_n_s16((int16x4_t)vpaddl_u8(*v16), 2uLL);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)((char *)v16 + a2)), 2uLL);
  a3[120] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_422_16x8_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  int16x8_t result;

  *a3 = vshlq_n_s16((int16x8_t)vpaddlq_u8(*a1), 2uLL);
  v3 = (uint8x16_t *)((char *)a1 + a2);
  a3[4] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v3), 2uLL);
  v4 = (uint8x16_t *)((char *)v3 + a2);
  a3[8] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v4), 2uLL);
  v5 = (uint8x16_t *)((char *)v4 + a2);
  a3[12] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v5), 2uLL);
  v6 = (uint8x16_t *)((char *)v5 + a2);
  a3[16] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v6), 2uLL);
  v7 = (uint8x16_t *)((char *)v6 + a2);
  a3[20] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v7), 2uLL);
  v8 = (uint8x16_t *)((char *)v7 + a2);
  a3[24] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v8), 2uLL);
  result = vshlq_n_s16((int16x8_t)vpaddlq_u8(*(uint8x16_t *)((char *)v8 + a2)), 2uLL);
  a3[28] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_422_16x32_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint8x16_t *v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint8x16_t *v22;
  uint8x16_t *v23;
  uint8x16_t *v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  uint8x16_t *v28;
  uint8x16_t *v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  int16x8_t result;

  *a3 = vshlq_n_s16((int16x8_t)vpaddlq_u8(*a1), 2uLL);
  v3 = (uint8x16_t *)((char *)a1 + a2);
  a3[4] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v3), 2uLL);
  v4 = (uint8x16_t *)((char *)v3 + a2);
  a3[8] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v4), 2uLL);
  v5 = (uint8x16_t *)((char *)v4 + a2);
  a3[12] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v5), 2uLL);
  v6 = (uint8x16_t *)((char *)v5 + a2);
  a3[16] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v6), 2uLL);
  v7 = (uint8x16_t *)((char *)v6 + a2);
  a3[20] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v7), 2uLL);
  v8 = (uint8x16_t *)((char *)v7 + a2);
  a3[24] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v8), 2uLL);
  v9 = (uint8x16_t *)((char *)v8 + a2);
  a3[28] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v9), 2uLL);
  v10 = (uint8x16_t *)((char *)v9 + a2);
  a3[32] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v10), 2uLL);
  v11 = (uint8x16_t *)((char *)v10 + a2);
  a3[36] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v11), 2uLL);
  v12 = (uint8x16_t *)((char *)v11 + a2);
  a3[40] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v12), 2uLL);
  v13 = (uint8x16_t *)((char *)v12 + a2);
  a3[44] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v13), 2uLL);
  v14 = (uint8x16_t *)((char *)v13 + a2);
  a3[48] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v14), 2uLL);
  v15 = (uint8x16_t *)((char *)v14 + a2);
  a3[52] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v15), 2uLL);
  v16 = (uint8x16_t *)((char *)v15 + a2);
  a3[56] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v16), 2uLL);
  v17 = (uint8x16_t *)((char *)v16 + a2);
  a3[60] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v17), 2uLL);
  v18 = (uint8x16_t *)((char *)v17 + a2);
  a3[64] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v18), 2uLL);
  v19 = (uint8x16_t *)((char *)v18 + a2);
  a3[68] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v19), 2uLL);
  v20 = (uint8x16_t *)((char *)v19 + a2);
  a3[72] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v20), 2uLL);
  v21 = (uint8x16_t *)((char *)v20 + a2);
  a3[76] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v21), 2uLL);
  v22 = (uint8x16_t *)((char *)v21 + a2);
  a3[80] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v22), 2uLL);
  v23 = (uint8x16_t *)((char *)v22 + a2);
  a3[84] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v23), 2uLL);
  v24 = (uint8x16_t *)((char *)v23 + a2);
  a3[88] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v24), 2uLL);
  v25 = (uint8x16_t *)((char *)v24 + a2);
  a3[92] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v25), 2uLL);
  v26 = (uint8x16_t *)((char *)v25 + a2);
  a3[96] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v26), 2uLL);
  v27 = (uint8x16_t *)((char *)v26 + a2);
  a3[100] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v27), 2uLL);
  v28 = (uint8x16_t *)((char *)v27 + a2);
  a3[104] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v28), 2uLL);
  v29 = (uint8x16_t *)((char *)v28 + a2);
  a3[108] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v29), 2uLL);
  v30 = (uint8x16_t *)((char *)v29 + a2);
  a3[112] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v30), 2uLL);
  v31 = (uint8x16_t *)((char *)v30 + a2);
  a3[116] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v31), 2uLL);
  v32 = (uint8x16_t *)((char *)v31 + a2);
  a3[120] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v32), 2uLL);
  result = vshlq_n_s16((int16x8_t)vpaddlq_u8(*(uint8x16_t *)((char *)v32 + a2)), 2uLL);
  a3[124] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_422_32x16_neon(const char *a1, int a2, __int16 *a3)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  __int16 *v6;
  const char *v7;
  __int16 *v8;
  const char *v9;
  __int16 *v10;
  const char *v11;
  __int16 *v12;
  const char *v13;
  __int16 *v14;
  const char *v15;
  __int16 *v16;
  const char *v17;
  __int16 *v18;
  const char *v19;
  __int16 *v20;
  const char *v21;
  __int16 *v22;
  const char *v23;
  __int16 *v24;
  const char *v25;
  __int16 *v26;
  const char *v27;
  __int16 *v28;
  const char *v29;
  __int16 *v30;
  const char *v31;
  __int16 *v32;
  __int16 *v33;
  int16x8_t result;
  int16x8x2_t v35;
  int8x8x4_t v36;
  int8x8x4_t v37;
  int8x8x4_t v38;
  int8x8x4_t v39;
  int8x8x4_t v40;
  int8x8x4_t v41;
  int8x8x4_t v42;
  int8x8x4_t v43;
  int8x8x4_t v44;
  int8x8x4_t v45;
  int8x8x4_t v46;
  int8x8x4_t v47;
  int8x8x4_t v48;
  int8x8x4_t v49;
  int8x8x4_t v50;
  int8x8x4_t v51;

  v3 = a2;
  v36 = vld4_s8(a1);
  v4 = &a1[v3];
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v36.val[0], (uint8x8_t)v36.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v36.val[2], (uint8x8_t)v36.val[3]), 2uLL);
  vst2q_s16(a3, v35);
  v37 = vld4_s8(v4);
  v5 = &v4[v3];
  v6 = a3 + 32;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v37.val[0], (uint8x8_t)v37.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v37.val[2], (uint8x8_t)v37.val[3]), 2uLL);
  vst2q_s16(v6, v35);
  v38 = vld4_s8(v5);
  v7 = &v5[v3];
  v8 = a3 + 64;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v38.val[0], (uint8x8_t)v38.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v38.val[2], (uint8x8_t)v38.val[3]), 2uLL);
  vst2q_s16(v8, v35);
  v39 = vld4_s8(v7);
  v9 = &v7[v3];
  v10 = a3 + 96;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v39.val[0], (uint8x8_t)v39.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v39.val[2], (uint8x8_t)v39.val[3]), 2uLL);
  vst2q_s16(v10, v35);
  v40 = vld4_s8(v9);
  v11 = &v9[v3];
  v12 = a3 + 128;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v40.val[0], (uint8x8_t)v40.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v40.val[2], (uint8x8_t)v40.val[3]), 2uLL);
  vst2q_s16(v12, v35);
  v41 = vld4_s8(v11);
  v13 = &v11[v3];
  v14 = a3 + 160;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v41.val[0], (uint8x8_t)v41.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v41.val[2], (uint8x8_t)v41.val[3]), 2uLL);
  vst2q_s16(v14, v35);
  v42 = vld4_s8(v13);
  v15 = &v13[v3];
  v16 = a3 + 192;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v42.val[0], (uint8x8_t)v42.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v42.val[2], (uint8x8_t)v42.val[3]), 2uLL);
  vst2q_s16(v16, v35);
  v43 = vld4_s8(v15);
  v17 = &v15[v3];
  v18 = a3 + 224;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v43.val[0], (uint8x8_t)v43.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v43.val[2], (uint8x8_t)v43.val[3]), 2uLL);
  vst2q_s16(v18, v35);
  v44 = vld4_s8(v17);
  v19 = &v17[v3];
  v20 = a3 + 256;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v44.val[0], (uint8x8_t)v44.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v44.val[2], (uint8x8_t)v44.val[3]), 2uLL);
  vst2q_s16(v20, v35);
  v45 = vld4_s8(v19);
  v21 = &v19[v3];
  v22 = a3 + 288;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v45.val[0], (uint8x8_t)v45.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v45.val[2], (uint8x8_t)v45.val[3]), 2uLL);
  vst2q_s16(v22, v35);
  v46 = vld4_s8(v21);
  v23 = &v21[v3];
  v24 = a3 + 320;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v46.val[0], (uint8x8_t)v46.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v46.val[2], (uint8x8_t)v46.val[3]), 2uLL);
  vst2q_s16(v24, v35);
  v47 = vld4_s8(v23);
  v25 = &v23[v3];
  v26 = a3 + 352;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v47.val[0], (uint8x8_t)v47.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v47.val[2], (uint8x8_t)v47.val[3]), 2uLL);
  vst2q_s16(v26, v35);
  v48 = vld4_s8(v25);
  v27 = &v25[v3];
  v28 = a3 + 384;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v48.val[0], (uint8x8_t)v48.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v48.val[2], (uint8x8_t)v48.val[3]), 2uLL);
  vst2q_s16(v28, v35);
  v49 = vld4_s8(v27);
  v29 = &v27[v3];
  v30 = a3 + 416;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v49.val[0], (uint8x8_t)v49.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v49.val[2], (uint8x8_t)v49.val[3]), 2uLL);
  vst2q_s16(v30, v35);
  v50 = vld4_s8(v29);
  v31 = &v29[v3];
  v32 = a3 + 448;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v50.val[0], (uint8x8_t)v50.val[1]), 2uLL);
  v35.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v50.val[2], (uint8x8_t)v50.val[3]), 2uLL);
  vst2q_s16(v32, v35);
  v51 = vld4_s8(v31);
  v33 = a3 + 480;
  v35.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v51.val[0], (uint8x8_t)v51.val[1]), 2uLL);
  result = (int16x8_t)vaddl_u8((uint8x8_t)v51.val[2], (uint8x8_t)v51.val[3]);
  v35.val[1] = vshlq_n_s16(result, 2uLL);
  vst2q_s16(v33, v35);
  return result;
}

int16x4_t cfl_subsample_lbd_422_4x16_neon(const float *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  const float *v4;
  uint8x8_t v5;
  const float *v6;
  uint8x8_t v7;
  const float *v8;
  uint8x8_t v9;
  const float *v10;
  uint8x8_t v11;
  const float *v12;
  uint8x8_t v13;
  const float *v14;
  uint8x8_t v15;
  const float *v16;
  uint8x8_t v17;
  const float *v18;
  uint8x8_t v19;
  const float *v20;
  uint8x8_t v21;
  const float *v22;
  uint8x8_t v23;
  const float *v24;
  uint8x8_t v25;
  const float *v26;
  uint8x8_t v27;
  const float *v28;
  uint8x8_t v29;
  const float *v30;
  uint8x8_t v31;
  const float *v32;
  uint8x8_t v33;
  uint8x8_t v34;
  int16x4_t result;

  v3 = a2;
  v5 = (uint8x8_t)vld1_dup_f32(a1);
  v4 = (const float *)((char *)a1 + v3);
  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(v5), 2uLL).u32[0];
  v7 = (uint8x8_t)vld1_dup_f32(v4);
  v6 = (const float *)((char *)v4 + v3);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(v7), 2uLL).u32[0];
  v9 = (uint8x8_t)vld1_dup_f32(v6);
  v8 = (const float *)((char *)v6 + v3);
  a3[32] = vshl_n_s16((int16x4_t)vpaddl_u8(v9), 2uLL).u32[0];
  v11 = (uint8x8_t)vld1_dup_f32(v8);
  v10 = (const float *)((char *)v8 + v3);
  a3[48] = vshl_n_s16((int16x4_t)vpaddl_u8(v11), 2uLL).u32[0];
  v13 = (uint8x8_t)vld1_dup_f32(v10);
  v12 = (const float *)((char *)v10 + v3);
  a3[64] = vshl_n_s16((int16x4_t)vpaddl_u8(v13), 2uLL).u32[0];
  v15 = (uint8x8_t)vld1_dup_f32(v12);
  v14 = (const float *)((char *)v12 + v3);
  a3[80] = vshl_n_s16((int16x4_t)vpaddl_u8(v15), 2uLL).u32[0];
  v17 = (uint8x8_t)vld1_dup_f32(v14);
  v16 = (const float *)((char *)v14 + v3);
  a3[96] = vshl_n_s16((int16x4_t)vpaddl_u8(v17), 2uLL).u32[0];
  v19 = (uint8x8_t)vld1_dup_f32(v16);
  v18 = (const float *)((char *)v16 + v3);
  a3[112] = vshl_n_s16((int16x4_t)vpaddl_u8(v19), 2uLL).u32[0];
  v21 = (uint8x8_t)vld1_dup_f32(v18);
  v20 = (const float *)((char *)v18 + v3);
  a3[128] = vshl_n_s16((int16x4_t)vpaddl_u8(v21), 2uLL).u32[0];
  v23 = (uint8x8_t)vld1_dup_f32(v20);
  v22 = (const float *)((char *)v20 + v3);
  a3[144] = vshl_n_s16((int16x4_t)vpaddl_u8(v23), 2uLL).u32[0];
  v25 = (uint8x8_t)vld1_dup_f32(v22);
  v24 = (const float *)((char *)v22 + v3);
  a3[160] = vshl_n_s16((int16x4_t)vpaddl_u8(v25), 2uLL).u32[0];
  v27 = (uint8x8_t)vld1_dup_f32(v24);
  v26 = (const float *)((char *)v24 + v3);
  a3[176] = vshl_n_s16((int16x4_t)vpaddl_u8(v27), 2uLL).u32[0];
  v29 = (uint8x8_t)vld1_dup_f32(v26);
  v28 = (const float *)((char *)v26 + v3);
  a3[192] = vshl_n_s16((int16x4_t)vpaddl_u8(v29), 2uLL).u32[0];
  v31 = (uint8x8_t)vld1_dup_f32(v28);
  v30 = (const float *)((char *)v28 + v3);
  a3[208] = vshl_n_s16((int16x4_t)vpaddl_u8(v31), 2uLL).u32[0];
  v33 = (uint8x8_t)vld1_dup_f32(v30);
  v32 = (const float *)((char *)v30 + v3);
  a3[224] = vshl_n_s16((int16x4_t)vpaddl_u8(v33), 2uLL).u32[0];
  v34 = (uint8x8_t)vld1_dup_f32(v32);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(v34), 2uLL);
  a3[240] = result.i32[0];
  return result;
}

int16x8_t cfl_subsample_lbd_422_16x4_neon(uint8x16_t *a1, int a2, int16x8_t *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  int16x8_t result;

  *a3 = vshlq_n_s16((int16x8_t)vpaddlq_u8(*a1), 2uLL);
  v3 = (uint8x16_t *)((char *)a1 + a2);
  a3[4] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v3), 2uLL);
  v4 = (uint8x16_t *)((char *)v3 + a2);
  a3[8] = vshlq_n_s16((int16x8_t)vpaddlq_u8(*v4), 2uLL);
  result = vshlq_n_s16((int16x8_t)vpaddlq_u8(*(uint8x16_t *)((char *)v4 + a2)), 2uLL);
  a3[12] = result;
  return result;
}

int16x4_t cfl_subsample_lbd_422_8x32_neon(uint8x8_t *a1, int a2, int16x4_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  uint8x8_t *v17;
  uint8x8_t *v18;
  uint8x8_t *v19;
  uint8x8_t *v20;
  uint8x8_t *v21;
  uint8x8_t *v22;
  uint8x8_t *v23;
  uint8x8_t *v24;
  uint8x8_t *v25;
  uint8x8_t *v26;
  uint8x8_t *v27;
  uint8x8_t *v28;
  uint8x8_t *v29;
  uint8x8_t *v30;
  uint8x8_t *v31;
  uint8x8_t *v32;
  int16x4_t result;

  *a3 = vshl_n_s16((int16x4_t)vpaddl_u8(*a1), 2uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[8] = vshl_n_s16((int16x4_t)vpaddl_u8(*v3), 2uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[16] = vshl_n_s16((int16x4_t)vpaddl_u8(*v4), 2uLL);
  v5 = (uint8x8_t *)((char *)v4 + a2);
  a3[24] = vshl_n_s16((int16x4_t)vpaddl_u8(*v5), 2uLL);
  v6 = (uint8x8_t *)((char *)v5 + a2);
  a3[32] = vshl_n_s16((int16x4_t)vpaddl_u8(*v6), 2uLL);
  v7 = (uint8x8_t *)((char *)v6 + a2);
  a3[40] = vshl_n_s16((int16x4_t)vpaddl_u8(*v7), 2uLL);
  v8 = (uint8x8_t *)((char *)v7 + a2);
  a3[48] = vshl_n_s16((int16x4_t)vpaddl_u8(*v8), 2uLL);
  v9 = (uint8x8_t *)((char *)v8 + a2);
  a3[56] = vshl_n_s16((int16x4_t)vpaddl_u8(*v9), 2uLL);
  v10 = (uint8x8_t *)((char *)v9 + a2);
  a3[64] = vshl_n_s16((int16x4_t)vpaddl_u8(*v10), 2uLL);
  v11 = (uint8x8_t *)((char *)v10 + a2);
  a3[72] = vshl_n_s16((int16x4_t)vpaddl_u8(*v11), 2uLL);
  v12 = (uint8x8_t *)((char *)v11 + a2);
  a3[80] = vshl_n_s16((int16x4_t)vpaddl_u8(*v12), 2uLL);
  v13 = (uint8x8_t *)((char *)v12 + a2);
  a3[88] = vshl_n_s16((int16x4_t)vpaddl_u8(*v13), 2uLL);
  v14 = (uint8x8_t *)((char *)v13 + a2);
  a3[96] = vshl_n_s16((int16x4_t)vpaddl_u8(*v14), 2uLL);
  v15 = (uint8x8_t *)((char *)v14 + a2);
  a3[104] = vshl_n_s16((int16x4_t)vpaddl_u8(*v15), 2uLL);
  v16 = (uint8x8_t *)((char *)v15 + a2);
  a3[112] = vshl_n_s16((int16x4_t)vpaddl_u8(*v16), 2uLL);
  v17 = (uint8x8_t *)((char *)v16 + a2);
  a3[120] = vshl_n_s16((int16x4_t)vpaddl_u8(*v17), 2uLL);
  v18 = (uint8x8_t *)((char *)v17 + a2);
  a3[128] = vshl_n_s16((int16x4_t)vpaddl_u8(*v18), 2uLL);
  v19 = (uint8x8_t *)((char *)v18 + a2);
  a3[136] = vshl_n_s16((int16x4_t)vpaddl_u8(*v19), 2uLL);
  v20 = (uint8x8_t *)((char *)v19 + a2);
  a3[144] = vshl_n_s16((int16x4_t)vpaddl_u8(*v20), 2uLL);
  v21 = (uint8x8_t *)((char *)v20 + a2);
  a3[152] = vshl_n_s16((int16x4_t)vpaddl_u8(*v21), 2uLL);
  v22 = (uint8x8_t *)((char *)v21 + a2);
  a3[160] = vshl_n_s16((int16x4_t)vpaddl_u8(*v22), 2uLL);
  v23 = (uint8x8_t *)((char *)v22 + a2);
  a3[168] = vshl_n_s16((int16x4_t)vpaddl_u8(*v23), 2uLL);
  v24 = (uint8x8_t *)((char *)v23 + a2);
  a3[176] = vshl_n_s16((int16x4_t)vpaddl_u8(*v24), 2uLL);
  v25 = (uint8x8_t *)((char *)v24 + a2);
  a3[184] = vshl_n_s16((int16x4_t)vpaddl_u8(*v25), 2uLL);
  v26 = (uint8x8_t *)((char *)v25 + a2);
  a3[192] = vshl_n_s16((int16x4_t)vpaddl_u8(*v26), 2uLL);
  v27 = (uint8x8_t *)((char *)v26 + a2);
  a3[200] = vshl_n_s16((int16x4_t)vpaddl_u8(*v27), 2uLL);
  v28 = (uint8x8_t *)((char *)v27 + a2);
  a3[208] = vshl_n_s16((int16x4_t)vpaddl_u8(*v28), 2uLL);
  v29 = (uint8x8_t *)((char *)v28 + a2);
  a3[216] = vshl_n_s16((int16x4_t)vpaddl_u8(*v29), 2uLL);
  v30 = (uint8x8_t *)((char *)v29 + a2);
  a3[224] = vshl_n_s16((int16x4_t)vpaddl_u8(*v30), 2uLL);
  v31 = (uint8x8_t *)((char *)v30 + a2);
  a3[232] = vshl_n_s16((int16x4_t)vpaddl_u8(*v31), 2uLL);
  v32 = (uint8x8_t *)((char *)v31 + a2);
  a3[240] = vshl_n_s16((int16x4_t)vpaddl_u8(*v32), 2uLL);
  result = vshl_n_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)((char *)v32 + a2)), 2uLL);
  a3[248] = result;
  return result;
}

int16x8_t cfl_subsample_lbd_422_32x8_neon(const char *a1, int a2, __int16 *a3)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  __int16 *v6;
  const char *v7;
  __int16 *v8;
  const char *v9;
  __int16 *v10;
  const char *v11;
  __int16 *v12;
  const char *v13;
  __int16 *v14;
  const char *v15;
  __int16 *v16;
  __int16 *v17;
  int16x8_t result;
  int16x8x2_t v19;
  int8x8x4_t v20;
  int8x8x4_t v21;
  int8x8x4_t v22;
  int8x8x4_t v23;
  int8x8x4_t v24;
  int8x8x4_t v25;
  int8x8x4_t v26;
  int8x8x4_t v27;

  v3 = a2;
  v20 = vld4_s8(a1);
  v4 = &a1[v3];
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v20.val[0], (uint8x8_t)v20.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v20.val[2], (uint8x8_t)v20.val[3]), 2uLL);
  vst2q_s16(a3, v19);
  v21 = vld4_s8(v4);
  v5 = &v4[v3];
  v6 = a3 + 32;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v21.val[0], (uint8x8_t)v21.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v21.val[2], (uint8x8_t)v21.val[3]), 2uLL);
  vst2q_s16(v6, v19);
  v22 = vld4_s8(v5);
  v7 = &v5[v3];
  v8 = a3 + 64;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v22.val[0], (uint8x8_t)v22.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v22.val[2], (uint8x8_t)v22.val[3]), 2uLL);
  vst2q_s16(v8, v19);
  v23 = vld4_s8(v7);
  v9 = &v7[v3];
  v10 = a3 + 96;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v23.val[0], (uint8x8_t)v23.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v23.val[2], (uint8x8_t)v23.val[3]), 2uLL);
  vst2q_s16(v10, v19);
  v24 = vld4_s8(v9);
  v11 = &v9[v3];
  v12 = a3 + 128;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v24.val[0], (uint8x8_t)v24.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v24.val[2], (uint8x8_t)v24.val[3]), 2uLL);
  vst2q_s16(v12, v19);
  v25 = vld4_s8(v11);
  v13 = &v11[v3];
  v14 = a3 + 160;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v25.val[0], (uint8x8_t)v25.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v25.val[2], (uint8x8_t)v25.val[3]), 2uLL);
  vst2q_s16(v14, v19);
  v26 = vld4_s8(v13);
  v15 = &v13[v3];
  v16 = a3 + 192;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v26.val[0], (uint8x8_t)v26.val[1]), 2uLL);
  v19.val[1] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v26.val[2], (uint8x8_t)v26.val[3]), 2uLL);
  vst2q_s16(v16, v19);
  v27 = vld4_s8(v15);
  v17 = a3 + 224;
  v19.val[0] = vshlq_n_s16((int16x8_t)vaddl_u8((uint8x8_t)v27.val[0], (uint8x8_t)v27.val[1]), 2uLL);
  result = (int16x8_t)vaddl_u8((uint8x8_t)v27.val[2], (uint8x8_t)v27.val[3]);
  v19.val[1] = vshlq_n_s16(result, 2uLL);
  vst2q_s16(v17, v19);
  return result;
}

int16x4_t cfl_subsample_lbd_444_4x4_neon(__int32 *a1, int a2, int16x4_t *a3, uint8x8_t a4)
{
  uint8x8_t v4;
  __int32 *v5;
  uint8x8_t v6;
  __int32 *v7;
  uint8x8_t v8;
  int16x4_t result;

  a4.i32[0] = *a1;
  v4 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a4), 3uLL);
  *a3 = (int16x4_t)v4;
  v5 = (__int32 *)((char *)a1 + a2);
  v4.i32[0] = *v5;
  v6 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v4), 3uLL);
  a3[8] = (int16x4_t)v6;
  v7 = (__int32 *)((char *)v5 + a2);
  v6.i32[0] = *v7;
  v8 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v6), 3uLL);
  a3[16] = (int16x4_t)v8;
  v8.i32[0] = *(__int32 *)((char *)v7 + a2);
  result = vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v8), 3uLL);
  a3[24] = result;
  return result;
}

uint16x8_t cfl_subsample_lbd_444_8x8_neon(uint8x8_t *a1, int a2, uint16x8_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint16x8_t result;

  *a3 = vshll_n_u8(*a1, 3uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[4] = vshll_n_u8(*v3, 3uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[8] = vshll_n_u8(*v4, 3uLL);
  v5 = (uint8x8_t *)((char *)v4 + a2);
  a3[12] = vshll_n_u8(*v5, 3uLL);
  v6 = (uint8x8_t *)((char *)v5 + a2);
  a3[16] = vshll_n_u8(*v6, 3uLL);
  v7 = (uint8x8_t *)((char *)v6 + a2);
  a3[20] = vshll_n_u8(*v7, 3uLL);
  v8 = (uint8x8_t *)((char *)v7 + a2);
  a3[24] = vshll_n_u8(*v8, 3uLL);
  result = vshll_n_u8(*(uint8x8_t *)((char *)v8 + a2), 3uLL);
  a3[28] = result;
  return result;
}

uint8x16_t *cfl_subsample_lbd_444_16x16_neon(uint8x16_t *result, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  unint64_t v4;
  uint16x8_t v5;

  v3 = a3 + 1;
  v4 = -32;
  do
  {
    v5 = vshll_high_n_u8(*result, 3uLL);
    v3[-1] = vshll_n_u8(*(uint8x8_t *)result->i8, 3uLL);
    *v3 = v5;
    result = (uint8x16_t *)((char *)result + a2);
    v4 += 32;
    v3 += 4;
  }
  while (v4 < 0x1E0);
  return result;
}

uint16x8_t cfl_subsample_lbd_444_32x32_neon(uint8x16_t *a1, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  uint8x16_t *v4;
  unint64_t v5;
  uint8x16_t v6;
  uint16x8_t result;

  v3 = a3 + 2;
  v4 = a1 + 1;
  v5 = -32;
  do
  {
    v6 = v4[-1];
    v3[-2] = vshll_n_u8(*(uint8x8_t *)v6.i8, 3uLL);
    v3[-1] = vshll_high_n_u8(v6, 3uLL);
    result = vshll_high_n_u8(*v4, 3uLL);
    *v3 = vshll_n_u8(*(uint8x8_t *)v4->i8, 3uLL);
    v3[1] = result;
    v3 += 4;
    v5 += 32;
    v4 = (uint8x16_t *)((char *)v4 + a2);
  }
  while (v5 < 0x3E0);
  return result;
}

int16x4_t cfl_subsample_lbd_444_4x8_neon(__int32 *a1, int a2, int16x4_t *a3, uint8x8_t a4)
{
  uint8x8_t v4;
  __int32 *v5;
  uint8x8_t v6;
  __int32 *v7;
  uint8x8_t v8;
  __int32 *v9;
  uint8x8_t v10;
  __int32 *v11;
  uint8x8_t v12;
  __int32 *v13;
  uint8x8_t v14;
  __int32 *v15;
  uint8x8_t v16;
  int16x4_t result;

  a4.i32[0] = *a1;
  v4 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a4), 3uLL);
  *a3 = (int16x4_t)v4;
  v5 = (__int32 *)((char *)a1 + a2);
  v4.i32[0] = *v5;
  v6 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v4), 3uLL);
  a3[8] = (int16x4_t)v6;
  v7 = (__int32 *)((char *)v5 + a2);
  v6.i32[0] = *v7;
  v8 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v6), 3uLL);
  a3[16] = (int16x4_t)v8;
  v9 = (__int32 *)((char *)v7 + a2);
  v8.i32[0] = *v9;
  v10 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v8), 3uLL);
  a3[24] = (int16x4_t)v10;
  v11 = (__int32 *)((char *)v9 + a2);
  v10.i32[0] = *v11;
  v12 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v10), 3uLL);
  a3[32] = (int16x4_t)v12;
  v13 = (__int32 *)((char *)v11 + a2);
  v12.i32[0] = *v13;
  v14 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v12), 3uLL);
  a3[40] = (int16x4_t)v14;
  v15 = (__int32 *)((char *)v13 + a2);
  v14.i32[0] = *v15;
  v16 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v14), 3uLL);
  a3[48] = (int16x4_t)v16;
  v16.i32[0] = *(__int32 *)((char *)v15 + a2);
  result = vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v16), 3uLL);
  a3[56] = result;
  return result;
}

uint16x8_t cfl_subsample_lbd_444_8x4_neon(uint8x8_t *a1, int a2, uint16x8_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint16x8_t result;

  *a3 = vshll_n_u8(*a1, 3uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[4] = vshll_n_u8(*v3, 3uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[8] = vshll_n_u8(*v4, 3uLL);
  result = vshll_n_u8(*(uint8x8_t *)((char *)v4 + a2), 3uLL);
  a3[12] = result;
  return result;
}

uint16x8_t cfl_subsample_lbd_444_8x16_neon(uint8x8_t *a1, int a2, uint16x8_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  uint16x8_t result;

  *a3 = vshll_n_u8(*a1, 3uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[4] = vshll_n_u8(*v3, 3uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[8] = vshll_n_u8(*v4, 3uLL);
  v5 = (uint8x8_t *)((char *)v4 + a2);
  a3[12] = vshll_n_u8(*v5, 3uLL);
  v6 = (uint8x8_t *)((char *)v5 + a2);
  a3[16] = vshll_n_u8(*v6, 3uLL);
  v7 = (uint8x8_t *)((char *)v6 + a2);
  a3[20] = vshll_n_u8(*v7, 3uLL);
  v8 = (uint8x8_t *)((char *)v7 + a2);
  a3[24] = vshll_n_u8(*v8, 3uLL);
  v9 = (uint8x8_t *)((char *)v8 + a2);
  a3[28] = vshll_n_u8(*v9, 3uLL);
  v10 = (uint8x8_t *)((char *)v9 + a2);
  a3[32] = vshll_n_u8(*v10, 3uLL);
  v11 = (uint8x8_t *)((char *)v10 + a2);
  a3[36] = vshll_n_u8(*v11, 3uLL);
  v12 = (uint8x8_t *)((char *)v11 + a2);
  a3[40] = vshll_n_u8(*v12, 3uLL);
  v13 = (uint8x8_t *)((char *)v12 + a2);
  a3[44] = vshll_n_u8(*v13, 3uLL);
  v14 = (uint8x8_t *)((char *)v13 + a2);
  a3[48] = vshll_n_u8(*v14, 3uLL);
  v15 = (uint8x8_t *)((char *)v14 + a2);
  a3[52] = vshll_n_u8(*v15, 3uLL);
  v16 = (uint8x8_t *)((char *)v15 + a2);
  a3[56] = vshll_n_u8(*v16, 3uLL);
  result = vshll_n_u8(*(uint8x8_t *)((char *)v16 + a2), 3uLL);
  a3[60] = result;
  return result;
}

uint8x16_t *cfl_subsample_lbd_444_16x8_neon(uint8x16_t *result, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  unint64_t v4;
  uint16x8_t v5;

  v3 = a3 + 1;
  v4 = -32;
  do
  {
    v5 = vshll_high_n_u8(*result, 3uLL);
    v3[-1] = vshll_n_u8(*(uint8x8_t *)result->i8, 3uLL);
    *v3 = v5;
    result = (uint8x16_t *)((char *)result + a2);
    v4 += 32;
    v3 += 4;
  }
  while (v4 < 0xE0);
  return result;
}

uint8x16_t *cfl_subsample_lbd_444_16x32_neon(uint8x16_t *result, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  unint64_t v4;
  uint16x8_t v5;

  v3 = a3 + 1;
  v4 = -32;
  do
  {
    v5 = vshll_high_n_u8(*result, 3uLL);
    v3[-1] = vshll_n_u8(*(uint8x8_t *)result->i8, 3uLL);
    *v3 = v5;
    result = (uint8x16_t *)((char *)result + a2);
    v4 += 32;
    v3 += 4;
  }
  while (v4 < 0x3E0);
  return result;
}

uint16x8_t cfl_subsample_lbd_444_32x16_neon(uint8x16_t *a1, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  uint8x16_t *v4;
  unint64_t v5;
  uint8x16_t v6;
  uint16x8_t result;

  v3 = a3 + 2;
  v4 = a1 + 1;
  v5 = -32;
  do
  {
    v6 = v4[-1];
    v3[-2] = vshll_n_u8(*(uint8x8_t *)v6.i8, 3uLL);
    v3[-1] = vshll_high_n_u8(v6, 3uLL);
    result = vshll_high_n_u8(*v4, 3uLL);
    *v3 = vshll_n_u8(*(uint8x8_t *)v4->i8, 3uLL);
    v3[1] = result;
    v3 += 4;
    v5 += 32;
    v4 = (uint8x16_t *)((char *)v4 + a2);
  }
  while (v5 < 0x1E0);
  return result;
}

__int32 *cfl_subsample_lbd_444_4x16_neon(__int32 *result, int a2, double *a3, uint8x8_t a4)
{
  unint64_t v4;

  v4 = -32;
  do
  {
    a4.i32[0] = *result;
    a4 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a4), 3uLL);
    *a3 = *(double *)&a4;
    a3 += 8;
    result = (__int32 *)((char *)result + a2);
    v4 += 32;
  }
  while (v4 < 0x1E0);
  return result;
}

uint8x16_t *cfl_subsample_lbd_444_16x4_neon(uint8x16_t *result, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  unint64_t v4;
  uint16x8_t v5;

  v3 = a3 + 1;
  v4 = -32;
  do
  {
    v5 = vshll_high_n_u8(*result, 3uLL);
    v3[-1] = vshll_n_u8(*(uint8x8_t *)result->i8, 3uLL);
    *v3 = v5;
    result = (uint8x16_t *)((char *)result + a2);
    v4 += 32;
    v3 += 4;
  }
  while (v4 < 0x60);
  return result;
}

uint16x8_t cfl_subsample_lbd_444_8x32_neon(uint8x8_t *a1, int a2, uint16x8_t *a3)
{
  uint8x8_t *v3;
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  uint8x8_t *v17;
  uint8x8_t *v18;
  uint8x8_t *v19;
  uint8x8_t *v20;
  uint8x8_t *v21;
  uint8x8_t *v22;
  uint8x8_t *v23;
  uint8x8_t *v24;
  uint8x8_t *v25;
  uint8x8_t *v26;
  uint8x8_t *v27;
  uint8x8_t *v28;
  uint8x8_t *v29;
  uint8x8_t *v30;
  uint8x8_t *v31;
  uint8x8_t *v32;
  uint16x8_t result;

  *a3 = vshll_n_u8(*a1, 3uLL);
  v3 = (uint8x8_t *)((char *)a1 + a2);
  a3[4] = vshll_n_u8(*v3, 3uLL);
  v4 = (uint8x8_t *)((char *)v3 + a2);
  a3[8] = vshll_n_u8(*v4, 3uLL);
  v5 = (uint8x8_t *)((char *)v4 + a2);
  a3[12] = vshll_n_u8(*v5, 3uLL);
  v6 = (uint8x8_t *)((char *)v5 + a2);
  a3[16] = vshll_n_u8(*v6, 3uLL);
  v7 = (uint8x8_t *)((char *)v6 + a2);
  a3[20] = vshll_n_u8(*v7, 3uLL);
  v8 = (uint8x8_t *)((char *)v7 + a2);
  a3[24] = vshll_n_u8(*v8, 3uLL);
  v9 = (uint8x8_t *)((char *)v8 + a2);
  a3[28] = vshll_n_u8(*v9, 3uLL);
  v10 = (uint8x8_t *)((char *)v9 + a2);
  a3[32] = vshll_n_u8(*v10, 3uLL);
  v11 = (uint8x8_t *)((char *)v10 + a2);
  a3[36] = vshll_n_u8(*v11, 3uLL);
  v12 = (uint8x8_t *)((char *)v11 + a2);
  a3[40] = vshll_n_u8(*v12, 3uLL);
  v13 = (uint8x8_t *)((char *)v12 + a2);
  a3[44] = vshll_n_u8(*v13, 3uLL);
  v14 = (uint8x8_t *)((char *)v13 + a2);
  a3[48] = vshll_n_u8(*v14, 3uLL);
  v15 = (uint8x8_t *)((char *)v14 + a2);
  a3[52] = vshll_n_u8(*v15, 3uLL);
  v16 = (uint8x8_t *)((char *)v15 + a2);
  a3[56] = vshll_n_u8(*v16, 3uLL);
  v17 = (uint8x8_t *)((char *)v16 + a2);
  a3[60] = vshll_n_u8(*v17, 3uLL);
  v18 = (uint8x8_t *)((char *)v17 + a2);
  a3[64] = vshll_n_u8(*v18, 3uLL);
  v19 = (uint8x8_t *)((char *)v18 + a2);
  a3[68] = vshll_n_u8(*v19, 3uLL);
  v20 = (uint8x8_t *)((char *)v19 + a2);
  a3[72] = vshll_n_u8(*v20, 3uLL);
  v21 = (uint8x8_t *)((char *)v20 + a2);
  a3[76] = vshll_n_u8(*v21, 3uLL);
  v22 = (uint8x8_t *)((char *)v21 + a2);
  a3[80] = vshll_n_u8(*v22, 3uLL);
  v23 = (uint8x8_t *)((char *)v22 + a2);
  a3[84] = vshll_n_u8(*v23, 3uLL);
  v24 = (uint8x8_t *)((char *)v23 + a2);
  a3[88] = vshll_n_u8(*v24, 3uLL);
  v25 = (uint8x8_t *)((char *)v24 + a2);
  a3[92] = vshll_n_u8(*v25, 3uLL);
  v26 = (uint8x8_t *)((char *)v25 + a2);
  a3[96] = vshll_n_u8(*v26, 3uLL);
  v27 = (uint8x8_t *)((char *)v26 + a2);
  a3[100] = vshll_n_u8(*v27, 3uLL);
  v28 = (uint8x8_t *)((char *)v27 + a2);
  a3[104] = vshll_n_u8(*v28, 3uLL);
  v29 = (uint8x8_t *)((char *)v28 + a2);
  a3[108] = vshll_n_u8(*v29, 3uLL);
  v30 = (uint8x8_t *)((char *)v29 + a2);
  a3[112] = vshll_n_u8(*v30, 3uLL);
  v31 = (uint8x8_t *)((char *)v30 + a2);
  a3[116] = vshll_n_u8(*v31, 3uLL);
  v32 = (uint8x8_t *)((char *)v31 + a2);
  a3[120] = vshll_n_u8(*v32, 3uLL);
  result = vshll_n_u8(*(uint8x8_t *)((char *)v32 + a2), 3uLL);
  a3[124] = result;
  return result;
}

uint16x8_t cfl_subsample_lbd_444_32x8_neon(uint8x16_t *a1, int a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  uint8x16_t *v4;
  unint64_t v5;
  uint8x16_t v6;
  uint16x8_t result;

  v3 = a3 + 2;
  v4 = a1 + 1;
  v5 = -32;
  do
  {
    v6 = v4[-1];
    v3[-2] = vshll_n_u8(*(uint8x8_t *)v6.i8, 3uLL);
    v3[-1] = vshll_high_n_u8(v6, 3uLL);
    result = vshll_high_n_u8(*v4, 3uLL);
    *v3 = vshll_n_u8(*(uint8x8_t *)v4->i8, 3uLL);
    v3[1] = result;
    v3 += 4;
    v5 += 32;
    v4 = (uint8x16_t *)((char *)v4 + a2);
  }
  while (v5 < 0xE0);
  return result;
}

int16x4_t cfl_subtract_average_4x4_neon(int16x4_t *a1, int16x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int16x4_t result;

  v2 = (int32x4_t)vaddl_u16((uint16x4_t)vadd_s16(a1[24], a1[16]), (uint16x4_t)vadd_s16(a1[8], *a1));
  v3 = vpaddq_s32(v2, v2);
  *(uint16x4_t *)v3.i8 = vqrshrn_n_u32((uint32x4_t)vpaddq_s32(v3, v3), 4uLL);
  *a2 = vsub_s16(*a1, *(int16x4_t *)v3.i8);
  a2[8] = vsub_s16(a1[8], *(int16x4_t *)v3.i8);
  a2[16] = vsub_s16(a1[16], *(int16x4_t *)v3.i8);
  result = vsub_s16(a1[24], *(int16x4_t *)v3.i8);
  a2[24] = result;
  return result;
}

int16x4_t cfl_subtract_average_4x8_neon(int16x4_t *a1, int16x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int16x4_t result;

  v2 = (int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16((uint16x4_t)vadd_s16(a1[24], a1[16]), (uint16x4_t)vadd_s16(a1[8], *a1)), (uint16x4_t)vadd_s16(a1[40], a1[32])), (uint16x4_t)vadd_s16(a1[56], a1[48]));
  v3 = vpaddq_s32(v2, v2);
  *(uint16x4_t *)v3.i8 = vqrshrn_n_u32((uint32x4_t)vpaddq_s32(v3, v3), 5uLL);
  *a2 = vsub_s16(*a1, *(int16x4_t *)v3.i8);
  a2[8] = vsub_s16(a1[8], *(int16x4_t *)v3.i8);
  a2[16] = vsub_s16(a1[16], *(int16x4_t *)v3.i8);
  a2[24] = vsub_s16(a1[24], *(int16x4_t *)v3.i8);
  a2[32] = vsub_s16(a1[32], *(int16x4_t *)v3.i8);
  a2[40] = vsub_s16(a1[40], *(int16x4_t *)v3.i8);
  a2[48] = vsub_s16(a1[48], *(int16x4_t *)v3.i8);
  result = vsub_s16(a1[56], *(int16x4_t *)v3.i8);
  a2[56] = result;
  return result;
}

int16x4_t cfl_subtract_average_4x16_neon(int16x4_t *a1, int16x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int16x4_t result;

  v2 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16(vaddl_u16((uint16x4_t)vadd_s16(a1[24], a1[16]), (uint16x4_t)vadd_s16(a1[8], *a1)), (uint16x4_t)vadd_s16(a1[40], a1[32])), (uint16x4_t)vadd_s16(a1[56], a1[48])), (uint16x4_t)vadd_s16(a1[72], a1[64])), (uint16x4_t)vadd_s16(a1[88], a1[80])), (uint16x4_t)vadd_s16(a1[104], a1[96])), (uint16x4_t)vadd_s16(a1[120], a1[112]));
  v3 = vpaddq_s32(v2, v2);
  *(uint16x4_t *)v3.i8 = vqrshrn_n_u32((uint32x4_t)vpaddq_s32(v3, v3), 6uLL);
  *a2 = vsub_s16(*a1, *(int16x4_t *)v3.i8);
  a2[8] = vsub_s16(a1[8], *(int16x4_t *)v3.i8);
  a2[16] = vsub_s16(a1[16], *(int16x4_t *)v3.i8);
  a2[24] = vsub_s16(a1[24], *(int16x4_t *)v3.i8);
  a2[32] = vsub_s16(a1[32], *(int16x4_t *)v3.i8);
  a2[40] = vsub_s16(a1[40], *(int16x4_t *)v3.i8);
  a2[48] = vsub_s16(a1[48], *(int16x4_t *)v3.i8);
  a2[56] = vsub_s16(a1[56], *(int16x4_t *)v3.i8);
  a2[64] = vsub_s16(a1[64], *(int16x4_t *)v3.i8);
  a2[72] = vsub_s16(a1[72], *(int16x4_t *)v3.i8);
  a2[80] = vsub_s16(a1[80], *(int16x4_t *)v3.i8);
  a2[88] = vsub_s16(a1[88], *(int16x4_t *)v3.i8);
  a2[96] = vsub_s16(a1[96], *(int16x4_t *)v3.i8);
  a2[104] = vsub_s16(a1[104], *(int16x4_t *)v3.i8);
  a2[112] = vsub_s16(a1[112], *(int16x4_t *)v3.i8);
  result = vsub_s16(a1[120], *(int16x4_t *)v3.i8);
  a2[120] = result;
  return result;
}

int16x8_t cfl_subtract_average_8x4_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[12], a1[8])), (uint16x8_t)vaddq_s16(a1[4], *a1));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 5uLL), v4, 5uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  result = vsubq_s16(a1[12], v5);
  a2[12] = result;
  return result;
}

int16x8_t cfl_subtract_average_8x8_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[12], a1[8])), (uint16x8_t)vaddq_s16(a1[4], *a1)), (uint16x8_t)vaddq_s16(a1[20], a1[16])), (uint16x8_t)vaddq_s16(a1[28], a1[24]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 6uLL), v4, 6uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[16] = vsubq_s16(a1[16], v5);
  a2[20] = vsubq_s16(a1[20], v5);
  a2[24] = vsubq_s16(a1[24], v5);
  result = vsubq_s16(a1[28], v5);
  a2[28] = result;
  return result;
}

int16x8_t cfl_subtract_average_8x16_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[12], a1[8])), (uint16x8_t)vaddq_s16(a1[4], *a1)), (uint16x8_t)vaddq_s16(a1[20], a1[16])), (uint16x8_t)vaddq_s16(a1[28], a1[24])), (uint16x8_t)vaddq_s16(a1[36], a1[32])), (uint16x8_t)vaddq_s16(a1[44], a1[40])), (uint16x8_t)vaddq_s16(a1[52], a1[48])), (uint16x8_t)vaddq_s16(a1[60], a1[56]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 7uLL), v4, 7uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[16] = vsubq_s16(a1[16], v5);
  a2[20] = vsubq_s16(a1[20], v5);
  a2[24] = vsubq_s16(a1[24], v5);
  a2[28] = vsubq_s16(a1[28], v5);
  a2[32] = vsubq_s16(a1[32], v5);
  a2[36] = vsubq_s16(a1[36], v5);
  a2[40] = vsubq_s16(a1[40], v5);
  a2[44] = vsubq_s16(a1[44], v5);
  a2[48] = vsubq_s16(a1[48], v5);
  a2[52] = vsubq_s16(a1[52], v5);
  a2[56] = vsubq_s16(a1[56], v5);
  result = vsubq_s16(a1[60], v5);
  a2[60] = result;
  return result;
}

int16x8_t cfl_subtract_average_8x32_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[12], a1[8])), (uint16x8_t)vaddq_s16(a1[4], *a1)), (uint16x8_t)vaddq_s16(a1[20], a1[16])), (uint16x8_t)vaddq_s16(a1[28], a1[24])), (uint16x8_t)vaddq_s16(a1[36], a1[32])),
                                        (uint16x8_t)vaddq_s16(a1[44], a1[40])),
                                      (uint16x8_t)vaddq_s16(a1[52], a1[48])),
                                    (uint16x8_t)vaddq_s16(a1[60], a1[56])),
                                  (uint16x8_t)vaddq_s16(a1[68], a1[64])),
                                (uint16x8_t)vaddq_s16(a1[76], a1[72])),
                              (uint16x8_t)vaddq_s16(a1[84], a1[80])),
                            (uint16x8_t)vaddq_s16(a1[92], a1[88])),
                          (uint16x8_t)vaddq_s16(a1[100], a1[96])),
                        (uint16x8_t)vaddq_s16(a1[108], a1[104])),
                      (uint16x8_t)vaddq_s16(a1[116], a1[112])),
                    (uint16x8_t)vaddq_s16(a1[124], a1[120]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 8uLL), v4, 8uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[16] = vsubq_s16(a1[16], v5);
  a2[20] = vsubq_s16(a1[20], v5);
  a2[24] = vsubq_s16(a1[24], v5);
  a2[28] = vsubq_s16(a1[28], v5);
  a2[32] = vsubq_s16(a1[32], v5);
  a2[36] = vsubq_s16(a1[36], v5);
  a2[40] = vsubq_s16(a1[40], v5);
  a2[44] = vsubq_s16(a1[44], v5);
  a2[48] = vsubq_s16(a1[48], v5);
  a2[52] = vsubq_s16(a1[52], v5);
  a2[56] = vsubq_s16(a1[56], v5);
  a2[60] = vsubq_s16(a1[60], v5);
  a2[64] = vsubq_s16(a1[64], v5);
  a2[68] = vsubq_s16(a1[68], v5);
  a2[72] = vsubq_s16(a1[72], v5);
  a2[76] = vsubq_s16(a1[76], v5);
  a2[80] = vsubq_s16(a1[80], v5);
  a2[84] = vsubq_s16(a1[84], v5);
  a2[88] = vsubq_s16(a1[88], v5);
  a2[92] = vsubq_s16(a1[92], v5);
  a2[96] = vsubq_s16(a1[96], v5);
  a2[100] = vsubq_s16(a1[100], v5);
  a2[104] = vsubq_s16(a1[104], v5);
  a2[108] = vsubq_s16(a1[108], v5);
  a2[112] = vsubq_s16(a1[112], v5);
  a2[116] = vsubq_s16(a1[116], v5);
  a2[120] = vsubq_s16(a1[120], v5);
  result = vsubq_s16(a1[124], v5);
  a2[124] = result;
  return result;
}

int16x8_t cfl_subtract_average_16x4_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[5], a1[4])), (uint16x8_t)vaddq_s16(a1[1], *a1)), (uint16x8_t)vaddq_s16(a1[9], a1[8])), (uint16x8_t)vaddq_s16(a1[13], a1[12]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 6uLL), v4, 6uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[1] = vsubq_s16(a1[1], v5);
  a2[5] = vsubq_s16(a1[5], v5);
  a2[9] = vsubq_s16(a1[9], v5);
  result = vsubq_s16(a1[13], v5);
  a2[13] = result;
  return result;
}

int16x8_t cfl_subtract_average_16x8_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[5], a1[4])), (uint16x8_t)vaddq_s16(a1[1], *a1)), (uint16x8_t)vaddq_s16(a1[9], a1[8])), (uint16x8_t)vaddq_s16(a1[13], a1[12])), (uint16x8_t)vaddq_s16(a1[17], a1[16])), (uint16x8_t)vaddq_s16(a1[21], a1[20])), (uint16x8_t)vaddq_s16(a1[25], a1[24])), (uint16x8_t)vaddq_s16(a1[29], a1[28]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 7uLL), v4, 7uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[1] = vsubq_s16(a1[1], v5);
  a2[5] = vsubq_s16(a1[5], v5);
  a2[9] = vsubq_s16(a1[9], v5);
  a2[13] = vsubq_s16(a1[13], v5);
  a2[16] = vsubq_s16(a1[16], v5);
  a2[20] = vsubq_s16(a1[20], v5);
  a2[24] = vsubq_s16(a1[24], v5);
  a2[28] = vsubq_s16(a1[28], v5);
  a2[17] = vsubq_s16(a1[17], v5);
  a2[21] = vsubq_s16(a1[21], v5);
  a2[25] = vsubq_s16(a1[25], v5);
  result = vsubq_s16(a1[29], v5);
  a2[29] = result;
  return result;
}

int16x8_t cfl_subtract_average_16x16_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[5], a1[4])), (uint16x8_t)vaddq_s16(a1[1], *a1)), (uint16x8_t)vaddq_s16(a1[9], a1[8])), (uint16x8_t)vaddq_s16(a1[13], a1[12])), (uint16x8_t)vaddq_s16(a1[17], a1[16])),
                                        (uint16x8_t)vaddq_s16(a1[21], a1[20])),
                                      (uint16x8_t)vaddq_s16(a1[25], a1[24])),
                                    (uint16x8_t)vaddq_s16(a1[29], a1[28])),
                                  (uint16x8_t)vaddq_s16(a1[33], a1[32])),
                                (uint16x8_t)vaddq_s16(a1[37], a1[36])),
                              (uint16x8_t)vaddq_s16(a1[41], a1[40])),
                            (uint16x8_t)vaddq_s16(a1[45], a1[44])),
                          (uint16x8_t)vaddq_s16(a1[49], a1[48])),
                        (uint16x8_t)vaddq_s16(a1[53], a1[52])),
                      (uint16x8_t)vaddq_s16(a1[57], a1[56])),
                    (uint16x8_t)vaddq_s16(a1[61], a1[60]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 8uLL), v4, 8uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[1] = vsubq_s16(a1[1], v5);
  a2[5] = vsubq_s16(a1[5], v5);
  a2[9] = vsubq_s16(a1[9], v5);
  a2[13] = vsubq_s16(a1[13], v5);
  a2[16] = vsubq_s16(a1[16], v5);
  a2[20] = vsubq_s16(a1[20], v5);
  a2[24] = vsubq_s16(a1[24], v5);
  a2[28] = vsubq_s16(a1[28], v5);
  a2[17] = vsubq_s16(a1[17], v5);
  a2[21] = vsubq_s16(a1[21], v5);
  a2[25] = vsubq_s16(a1[25], v5);
  a2[29] = vsubq_s16(a1[29], v5);
  a2[32] = vsubq_s16(a1[32], v5);
  a2[36] = vsubq_s16(a1[36], v5);
  a2[40] = vsubq_s16(a1[40], v5);
  a2[44] = vsubq_s16(a1[44], v5);
  a2[33] = vsubq_s16(a1[33], v5);
  a2[37] = vsubq_s16(a1[37], v5);
  a2[41] = vsubq_s16(a1[41], v5);
  a2[45] = vsubq_s16(a1[45], v5);
  a2[48] = vsubq_s16(a1[48], v5);
  a2[52] = vsubq_s16(a1[52], v5);
  a2[56] = vsubq_s16(a1[56], v5);
  a2[60] = vsubq_s16(a1[60], v5);
  a2[49] = vsubq_s16(a1[49], v5);
  a2[53] = vsubq_s16(a1[53], v5);
  a2[57] = vsubq_s16(a1[57], v5);
  result = vsubq_s16(a1[61], v5);
  a2[61] = result;
  return result;
}

int16x8_t cfl_subtract_average_16x32_neon(int16x8_t *a1, int16x8_t *a2)
{
  uint16x8_t v2;
  uint16x8_t v3;
  uint32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint32x4_t v7;
  int16x8_t v8;
  int16x8_t result;

  v2 = (uint16x8_t)vaddq_s16(a1[85], a1[84]);
  v3 = (uint16x8_t)vaddq_s16(a1[89], a1[88]);
  v4 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(
                                               vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[5], a1[4])), (uint16x8_t)vaddq_s16(a1[1], *a1)), (uint16x8_t)vaddq_s16(a1[9], a1[8])), (uint16x8_t)vaddq_s16(a1[13], a1[12])), (uint16x8_t)vaddq_s16(a1[17], a1[16])), (uint16x8_t)vaddq_s16(a1[21], a1[20])), (uint16x8_t)vaddq_s16(a1[25], a1[24])), (uint16x8_t)vaddq_s16(a1[29], a1[28])), (uint16x8_t)vaddq_s16(a1[33], a1[32])), (uint16x8_t)vaddq_s16(a1[37], a1[36])), (uint16x8_t)vaddq_s16(a1[41], a1[40])), (uint16x8_t)vaddq_s16(a1[45], a1[44])), (uint16x8_t)vaddq_s16(a1[49], a1[48])), (uint16x8_t)vaddq_s16(a1[53], a1[52])), (uint16x8_t)vaddq_s16(a1[57], a1[56])), (uint16x8_t)vaddq_s16(a1[61], a1[60])), (uint16x8_t)vaddq_s16(a1[65], a1[64])), (uint16x8_t)vaddq_s16(a1[69], a1[68])),
                 (uint16x8_t)vaddq_s16(a1[73], a1[72])),
               (uint16x8_t)vaddq_s16(a1[77], a1[76])),
             (uint16x8_t)vaddq_s16(a1[81], a1[80])),
           v2),
         v3);
  v5 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v4, (uint16x8_t)vaddq_s16(a1[93], a1[92])), (uint16x8_t)vaddq_s16(a1[97], a1[96])), (uint16x8_t)vaddq_s16(a1[101], a1[100])), (uint16x8_t)vaddq_s16(a1[105], a1[104])), (uint16x8_t)vaddq_s16(a1[109], a1[108])), (uint16x8_t)vaddq_s16(a1[113], a1[112])), (uint16x8_t)vaddq_s16(a1[117], a1[116])), (uint16x8_t)vaddq_s16(a1[121], a1[120])), (uint16x8_t)vaddq_s16(a1[125], a1[124]));
  v6 = vpaddq_s32(v5, v5);
  v7 = (uint32x4_t)vpaddq_s32(v6, v6);
  v8 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v7, 9uLL), v7, 9uLL);
  *a2 = vsubq_s16(*a1, v8);
  a2[4] = vsubq_s16(a1[4], v8);
  a2[8] = vsubq_s16(a1[8], v8);
  a2[12] = vsubq_s16(a1[12], v8);
  a2[1] = vsubq_s16(a1[1], v8);
  a2[5] = vsubq_s16(a1[5], v8);
  a2[9] = vsubq_s16(a1[9], v8);
  a2[13] = vsubq_s16(a1[13], v8);
  a2[16] = vsubq_s16(a1[16], v8);
  a2[20] = vsubq_s16(a1[20], v8);
  a2[24] = vsubq_s16(a1[24], v8);
  a2[28] = vsubq_s16(a1[28], v8);
  a2[17] = vsubq_s16(a1[17], v8);
  a2[21] = vsubq_s16(a1[21], v8);
  a2[25] = vsubq_s16(a1[25], v8);
  a2[29] = vsubq_s16(a1[29], v8);
  a2[32] = vsubq_s16(a1[32], v8);
  a2[36] = vsubq_s16(a1[36], v8);
  a2[40] = vsubq_s16(a1[40], v8);
  a2[44] = vsubq_s16(a1[44], v8);
  a2[33] = vsubq_s16(a1[33], v8);
  a2[37] = vsubq_s16(a1[37], v8);
  a2[41] = vsubq_s16(a1[41], v8);
  a2[45] = vsubq_s16(a1[45], v8);
  a2[48] = vsubq_s16(a1[48], v8);
  a2[52] = vsubq_s16(a1[52], v8);
  a2[56] = vsubq_s16(a1[56], v8);
  a2[60] = vsubq_s16(a1[60], v8);
  a2[49] = vsubq_s16(a1[49], v8);
  a2[53] = vsubq_s16(a1[53], v8);
  a2[57] = vsubq_s16(a1[57], v8);
  a2[61] = vsubq_s16(a1[61], v8);
  a2[64] = vsubq_s16(a1[64], v8);
  a2[68] = vsubq_s16(a1[68], v8);
  a2[72] = vsubq_s16(a1[72], v8);
  a2[76] = vsubq_s16(a1[76], v8);
  a2[65] = vsubq_s16(a1[65], v8);
  a2[69] = vsubq_s16(a1[69], v8);
  a2[73] = vsubq_s16(a1[73], v8);
  a2[77] = vsubq_s16(a1[77], v8);
  a2[80] = vsubq_s16(a1[80], v8);
  a2[84] = vsubq_s16(a1[84], v8);
  a2[88] = vsubq_s16(a1[88], v8);
  a2[92] = vsubq_s16(a1[92], v8);
  a2[81] = vsubq_s16(a1[81], v8);
  a2[85] = vsubq_s16(a1[85], v8);
  a2[89] = vsubq_s16(a1[89], v8);
  a2[93] = vsubq_s16(a1[93], v8);
  a2[96] = vsubq_s16(a1[96], v8);
  a2[100] = vsubq_s16(a1[100], v8);
  a2[104] = vsubq_s16(a1[104], v8);
  a2[108] = vsubq_s16(a1[108], v8);
  a2[97] = vsubq_s16(a1[97], v8);
  a2[101] = vsubq_s16(a1[101], v8);
  a2[105] = vsubq_s16(a1[105], v8);
  a2[109] = vsubq_s16(a1[109], v8);
  a2[112] = vsubq_s16(a1[112], v8);
  a2[116] = vsubq_s16(a1[116], v8);
  a2[120] = vsubq_s16(a1[120], v8);
  a2[124] = vsubq_s16(a1[124], v8);
  a2[113] = vsubq_s16(a1[113], v8);
  a2[117] = vsubq_s16(a1[117], v8);
  a2[121] = vsubq_s16(a1[121], v8);
  result = vsubq_s16(a1[125], v8);
  a2[125] = result;
  return result;
}

int16x8_t cfl_subtract_average_32x8_neon(int16x8_t *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  uint32x4_t v4;
  int16x8_t v5;
  int16x8_t result;

  v2 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[5], a1[4])), (uint16x8_t)vaddq_s16(a1[1], *a1)), (uint16x8_t)vaddq_s16(a1[9], a1[8])), (uint16x8_t)vaddq_s16(a1[13], a1[12])), (uint16x8_t)vaddq_s16(a1[3], a1[2])),
                                        (uint16x8_t)vaddq_s16(a1[7], a1[6])),
                                      (uint16x8_t)vaddq_s16(a1[11], a1[10])),
                                    (uint16x8_t)vaddq_s16(a1[15], a1[14])),
                                  (uint16x8_t)vaddq_s16(a1[17], a1[16])),
                                (uint16x8_t)vaddq_s16(a1[21], a1[20])),
                              (uint16x8_t)vaddq_s16(a1[25], a1[24])),
                            (uint16x8_t)vaddq_s16(a1[29], a1[28])),
                          (uint16x8_t)vaddq_s16(a1[19], a1[18])),
                        (uint16x8_t)vaddq_s16(a1[23], a1[22])),
                      (uint16x8_t)vaddq_s16(a1[27], a1[26])),
                    (uint16x8_t)vaddq_s16(a1[31], a1[30]));
  v3 = vpaddq_s32(v2, v2);
  v4 = (uint32x4_t)vpaddq_s32(v3, v3);
  v5 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v4, 8uLL), v4, 8uLL);
  *a2 = vsubq_s16(*a1, v5);
  a2[4] = vsubq_s16(a1[4], v5);
  a2[8] = vsubq_s16(a1[8], v5);
  a2[12] = vsubq_s16(a1[12], v5);
  a2[1] = vsubq_s16(a1[1], v5);
  a2[5] = vsubq_s16(a1[5], v5);
  a2[9] = vsubq_s16(a1[9], v5);
  a2[13] = vsubq_s16(a1[13], v5);
  a2[2] = vsubq_s16(a1[2], v5);
  a2[6] = vsubq_s16(a1[6], v5);
  a2[10] = vsubq_s16(a1[10], v5);
  a2[14] = vsubq_s16(a1[14], v5);
  a2[3] = vsubq_s16(a1[3], v5);
  a2[7] = vsubq_s16(a1[7], v5);
  a2[11] = vsubq_s16(a1[11], v5);
  a2[15] = vsubq_s16(a1[15], v5);
  a2[16] = vsubq_s16(a1[16], v5);
  a2[20] = vsubq_s16(a1[20], v5);
  a2[24] = vsubq_s16(a1[24], v5);
  a2[28] = vsubq_s16(a1[28], v5);
  a2[17] = vsubq_s16(a1[17], v5);
  a2[21] = vsubq_s16(a1[21], v5);
  a2[25] = vsubq_s16(a1[25], v5);
  a2[29] = vsubq_s16(a1[29], v5);
  a2[18] = vsubq_s16(a1[18], v5);
  a2[22] = vsubq_s16(a1[22], v5);
  a2[26] = vsubq_s16(a1[26], v5);
  a2[30] = vsubq_s16(a1[30], v5);
  a2[19] = vsubq_s16(a1[19], v5);
  a2[23] = vsubq_s16(a1[23], v5);
  a2[27] = vsubq_s16(a1[27], v5);
  result = vsubq_s16(a1[31], v5);
  a2[31] = result;
  return result;
}

int16x8_t cfl_subtract_average_32x16_neon(int16x8_t *a1, int16x8_t *a2)
{
  uint16x8_t v2;
  uint16x8_t v3;
  uint32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint32x4_t v7;
  int16x8_t v8;
  int16x8_t result;

  v2 = (uint16x8_t)vaddq_s16(a1[39], a1[38]);
  v3 = (uint16x8_t)vaddq_s16(a1[43], a1[42]);
  v4 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(
                                               vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(a1[5], a1[4])), (uint16x8_t)vaddq_s16(a1[1], *a1)), (uint16x8_t)vaddq_s16(a1[9], a1[8])), (uint16x8_t)vaddq_s16(a1[13], a1[12])), (uint16x8_t)vaddq_s16(a1[3], a1[2])), (uint16x8_t)vaddq_s16(a1[7], a1[6])), (uint16x8_t)vaddq_s16(a1[11], a1[10])), (uint16x8_t)vaddq_s16(a1[15], a1[14])), (uint16x8_t)vaddq_s16(a1[17], a1[16])), (uint16x8_t)vaddq_s16(a1[21], a1[20])), (uint16x8_t)vaddq_s16(a1[25], a1[24])), (uint16x8_t)vaddq_s16(a1[29], a1[28])), (uint16x8_t)vaddq_s16(a1[19], a1[18])), (uint16x8_t)vaddq_s16(a1[23], a1[22])), (uint16x8_t)vaddq_s16(a1[27], a1[26])), (uint16x8_t)vaddq_s16(a1[31], a1[30])), (uint16x8_t)vaddq_s16(a1[33], a1[32])), (uint16x8_t)vaddq_s16(a1[37], a1[36])),
                 (uint16x8_t)vaddq_s16(a1[41], a1[40])),
               (uint16x8_t)vaddq_s16(a1[45], a1[44])),
             (uint16x8_t)vaddq_s16(a1[35], a1[34])),
           v2),
         v3);
  v5 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v4, (uint16x8_t)vaddq_s16(a1[47], a1[46])), (uint16x8_t)vaddq_s16(a1[49], a1[48])), (uint16x8_t)vaddq_s16(a1[53], a1[52])), (uint16x8_t)vaddq_s16(a1[57], a1[56])), (uint16x8_t)vaddq_s16(a1[61], a1[60])), (uint16x8_t)vaddq_s16(a1[51], a1[50])), (uint16x8_t)vaddq_s16(a1[55], a1[54])), (uint16x8_t)vaddq_s16(a1[59], a1[58])), (uint16x8_t)vaddq_s16(a1[63], a1[62]));
  v6 = vpaddq_s32(v5, v5);
  v7 = (uint32x4_t)vpaddq_s32(v6, v6);
  v8 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v7, 9uLL), v7, 9uLL);
  *a2 = vsubq_s16(*a1, v8);
  a2[4] = vsubq_s16(a1[4], v8);
  a2[8] = vsubq_s16(a1[8], v8);
  a2[12] = vsubq_s16(a1[12], v8);
  a2[1] = vsubq_s16(a1[1], v8);
  a2[5] = vsubq_s16(a1[5], v8);
  a2[9] = vsubq_s16(a1[9], v8);
  a2[13] = vsubq_s16(a1[13], v8);
  a2[2] = vsubq_s16(a1[2], v8);
  a2[6] = vsubq_s16(a1[6], v8);
  a2[10] = vsubq_s16(a1[10], v8);
  a2[14] = vsubq_s16(a1[14], v8);
  a2[3] = vsubq_s16(a1[3], v8);
  a2[7] = vsubq_s16(a1[7], v8);
  a2[11] = vsubq_s16(a1[11], v8);
  a2[15] = vsubq_s16(a1[15], v8);
  a2[16] = vsubq_s16(a1[16], v8);
  a2[20] = vsubq_s16(a1[20], v8);
  a2[24] = vsubq_s16(a1[24], v8);
  a2[28] = vsubq_s16(a1[28], v8);
  a2[17] = vsubq_s16(a1[17], v8);
  a2[21] = vsubq_s16(a1[21], v8);
  a2[25] = vsubq_s16(a1[25], v8);
  a2[29] = vsubq_s16(a1[29], v8);
  a2[18] = vsubq_s16(a1[18], v8);
  a2[22] = vsubq_s16(a1[22], v8);
  a2[26] = vsubq_s16(a1[26], v8);
  a2[30] = vsubq_s16(a1[30], v8);
  a2[19] = vsubq_s16(a1[19], v8);
  a2[23] = vsubq_s16(a1[23], v8);
  a2[27] = vsubq_s16(a1[27], v8);
  a2[31] = vsubq_s16(a1[31], v8);
  a2[32] = vsubq_s16(a1[32], v8);
  a2[36] = vsubq_s16(a1[36], v8);
  a2[40] = vsubq_s16(a1[40], v8);
  a2[44] = vsubq_s16(a1[44], v8);
  a2[33] = vsubq_s16(a1[33], v8);
  a2[37] = vsubq_s16(a1[37], v8);
  a2[41] = vsubq_s16(a1[41], v8);
  a2[45] = vsubq_s16(a1[45], v8);
  a2[34] = vsubq_s16(a1[34], v8);
  a2[38] = vsubq_s16(a1[38], v8);
  a2[42] = vsubq_s16(a1[42], v8);
  a2[46] = vsubq_s16(a1[46], v8);
  a2[35] = vsubq_s16(a1[35], v8);
  a2[39] = vsubq_s16(a1[39], v8);
  a2[43] = vsubq_s16(a1[43], v8);
  a2[47] = vsubq_s16(a1[47], v8);
  a2[48] = vsubq_s16(a1[48], v8);
  a2[52] = vsubq_s16(a1[52], v8);
  a2[56] = vsubq_s16(a1[56], v8);
  a2[60] = vsubq_s16(a1[60], v8);
  a2[49] = vsubq_s16(a1[49], v8);
  a2[53] = vsubq_s16(a1[53], v8);
  a2[57] = vsubq_s16(a1[57], v8);
  a2[61] = vsubq_s16(a1[61], v8);
  a2[50] = vsubq_s16(a1[50], v8);
  a2[54] = vsubq_s16(a1[54], v8);
  a2[58] = vsubq_s16(a1[58], v8);
  a2[62] = vsubq_s16(a1[62], v8);
  a2[51] = vsubq_s16(a1[51], v8);
  a2[55] = vsubq_s16(a1[55], v8);
  a2[59] = vsubq_s16(a1[59], v8);
  result = vsubq_s16(a1[63], v8);
  a2[63] = result;
  return result;
}

int16x8_t *cfl_subtract_average_32x32_neon(int16x8_t *result, int16x8_t *a2)
{
  int16x8_t *v2;
  uint16x8_t v3;
  uint16x8_t v4;
  uint32x4_t v5;
  uint32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint32x4_t v9;
  int16x8_t v10;
  unint64_t v11;

  v2 = result + 8;
  v3 = (uint16x8_t)vaddq_s16(result[39], result[38]);
  v4 = (uint16x8_t)vaddq_s16(result[43], result[42]);
  v5 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(
                                               vpadalq_u16(vpadalq_u16(vpaddlq_u16((uint16x8_t)vaddq_s16(result[5], result[4])), (uint16x8_t)vaddq_s16(result[1], *result)), (uint16x8_t)vaddq_s16(result[9], result[8])), (uint16x8_t)vaddq_s16(result[13], result[12])), (uint16x8_t)vaddq_s16(result[3], result[2])), (uint16x8_t)vaddq_s16(result[7], result[6])), (uint16x8_t)vaddq_s16(result[11], result[10])), (uint16x8_t)vaddq_s16(result[15], result[14])), (uint16x8_t)vaddq_s16(result[17], result[16])), (uint16x8_t)vaddq_s16(result[21], result[20])), (uint16x8_t)vaddq_s16(result[25], result[24])), (uint16x8_t)vaddq_s16(result[29], result[28])), (uint16x8_t)vaddq_s16(result[19], result[18])), (uint16x8_t)vaddq_s16(result[23], result[22])), (uint16x8_t)vaddq_s16(result[27], result[26])), (uint16x8_t)vaddq_s16(result[31], result[30])), (uint16x8_t)vaddq_s16(result[33], result[32])), (uint16x8_t)vaddq_s16(result[37], result[36])),
                 (uint16x8_t)vaddq_s16(result[41], result[40])),
               (uint16x8_t)vaddq_s16(result[45], result[44])),
             (uint16x8_t)vaddq_s16(result[35], result[34])),
           v3),
         v4);
  v6 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(
                                               vpadalq_u16(v5, (uint16x8_t)vaddq_s16(result[47], result[46])),
                                               (uint16x8_t)vaddq_s16(result[49], result[48])),
                                             (uint16x8_t)vaddq_s16(result[53], result[52])),
                                           (uint16x8_t)vaddq_s16(result[57], result[56])),
                                         (uint16x8_t)vaddq_s16(result[61], result[60])),
                                       (uint16x8_t)vaddq_s16(result[51], result[50])),
                                     (uint16x8_t)vaddq_s16(result[55], result[54])),
                                   (uint16x8_t)vaddq_s16(result[59], result[58])),
                                 (uint16x8_t)vaddq_s16(result[63], result[62])),
                               (uint16x8_t)vaddq_s16(result[65], result[64])),
                             (uint16x8_t)vaddq_s16(result[69], result[68])),
                           (uint16x8_t)vaddq_s16(result[73], result[72])),
                         (uint16x8_t)vaddq_s16(result[77], result[76])),
                       (uint16x8_t)vaddq_s16(result[67], result[66])),
                     (uint16x8_t)vaddq_s16(result[71], result[70])),
                   (uint16x8_t)vaddq_s16(result[75], result[74])),
                 (uint16x8_t)vaddq_s16(result[79], result[78])),
               (uint16x8_t)vaddq_s16(result[81], result[80])),
             (uint16x8_t)vaddq_s16(result[85], result[84])),
           (uint16x8_t)vaddq_s16(result[89], result[88])),
         (uint16x8_t)vaddq_s16(result[93], result[92]));
  v7 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v6, (uint16x8_t)vaddq_s16(result[83], result[82])),
                                                        (uint16x8_t)vaddq_s16(result[87], result[86])),
                                                      (uint16x8_t)vaddq_s16(result[91], result[90])),
                                                    (uint16x8_t)vaddq_s16(result[95], result[94])),
                                                  (uint16x8_t)vaddq_s16(result[97], result[96])),
                                                (uint16x8_t)vaddq_s16(result[101], result[100])),
                                              (uint16x8_t)vaddq_s16(result[105], result[104])),
                                            (uint16x8_t)vaddq_s16(result[109], result[108])),
                                          (uint16x8_t)vaddq_s16(result[99], result[98])),
                                        (uint16x8_t)vaddq_s16(result[103], result[102])),
                                      (uint16x8_t)vaddq_s16(result[107], result[106])),
                                    (uint16x8_t)vaddq_s16(result[111], result[110])),
                                  (uint16x8_t)vaddq_s16(result[113], result[112])),
                                (uint16x8_t)vaddq_s16(result[117], result[116])),
                              (uint16x8_t)vaddq_s16(result[121], result[120])),
                            (uint16x8_t)vaddq_s16(result[125], result[124])),
                          (uint16x8_t)vaddq_s16(result[115], result[114])),
                        (uint16x8_t)vaddq_s16(result[119], result[118])),
                      (uint16x8_t)vaddq_s16(result[123], result[122])),
                    (uint16x8_t)vaddq_s16(result[127], result[126]));
  v8 = vpaddq_s32(v7, v7);
  v9 = (uint32x4_t)vpaddq_s32(v8, v8);
  v10 = (int16x8_t)vqrshrn_high_n_u32(vqrshrn_n_u32(v9, 0xAuLL), v9, 0xAuLL);
  v11 = -128;
  do
  {
    *a2 = vsubq_s16(v2[-8], v10);
    a2[4] = vsubq_s16(v2[-4], v10);
    a2[8] = vsubq_s16(*v2, v10);
    a2[12] = vsubq_s16(v2[4], v10);
    a2[1] = vsubq_s16(v2[-7], v10);
    a2[5] = vsubq_s16(v2[-3], v10);
    a2[9] = vsubq_s16(v2[1], v10);
    a2[13] = vsubq_s16(v2[5], v10);
    a2[2] = vsubq_s16(v2[-6], v10);
    a2[6] = vsubq_s16(v2[-2], v10);
    a2[10] = vsubq_s16(v2[2], v10);
    a2[14] = vsubq_s16(v2[6], v10);
    a2[3] = vsubq_s16(v2[-5], v10);
    a2[7] = vsubq_s16(v2[-1], v10);
    a2[11] = vsubq_s16(v2[3], v10);
    a2[15] = vsubq_s16(v2[7], v10);
    v11 += 128;
    v2 += 16;
    a2 += 16;
  }
  while (v11 < 0x380);
  return result;
}

double cfl_predict_lbd_4x4_neon(int8x8_t *a1, _DWORD *a2, int a3, signed int a4, int16x8_t a5, double a6, double a7, int16x8_t a8)
{
  int v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  _DWORD *v12;
  int16x4_t v13;
  _DWORD *v14;
  int16x4_t v15;
  int16x4_t v16;

  if (a4 >= 0)
    v8 = a4;
  else
    v8 = -a4;
  *(int16x4_t *)a5.i8 = vdup_n_s16(a4);
  v9 = vdup_n_s16(*(unsigned __int8 *)a2);
  v10 = vdup_n_s16(v8 << 9);
  v11 = (int16x4_t)veor_s8(*a1, *(int8x8_t *)a5.i8);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16((int16x4_t)*a1), v10), v11, 0xFuLL), (int8x8_t)vcltz_s16(v11)), v9);
  *a2 = vqmovun_s16(a8).u32[0];
  v12 = (_DWORD *)((char *)a2 + a3);
  *(int8x8_t *)a8.i8 = a1[8];
  v13 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a5.i8);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v13, 0xFuLL), (int8x8_t)vcltz_s16(v13)), v9);
  *v12 = vqmovun_s16(a8).u32[0];
  v14 = (_DWORD *)((char *)v12 + a3);
  *(int8x8_t *)a8.i8 = a1[16];
  v15 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a5.i8);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v15, 0xFuLL), (int8x8_t)vcltz_s16(v15)), v9);
  *v14 = vqmovun_s16(a8).u32[0];
  v16 = (int16x4_t)a1[24];
  *(int8x8_t *)a5.i8 = veor_s8((int8x8_t)v16, *(int8x8_t *)a5.i8);
  *(int16x4_t *)a5.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(v16), v10), *(int16x4_t *)a5.i8, 0xFuLL), (int8x8_t)vcltz_s16(*(int16x4_t *)a5.i8)), v9);
  *(int8x8_t *)a5.i8 = vqmovun_s16(a5);
  *(_DWORD *)((char *)v14 + a3) = a5.i32[0];
  return *(double *)a5.i64;
}

double cfl_predict_lbd_4x8_neon(int8x8_t *a1, _DWORD *a2, int a3, signed int a4, int16x8_t a5, double a6, double a7, int16x8_t a8)
{
  int v8;
  int8x8_t v9;
  int16x4_t v10;
  int16x4_t v11;
  _DWORD *v12;
  int16x4_t v13;
  _DWORD *v14;
  int16x4_t v15;
  _DWORD *v16;
  int16x4_t v17;
  _DWORD *v18;
  int16x4_t v19;
  _DWORD *v20;
  int16x4_t v21;
  _DWORD *v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;

  if (a4 >= 0)
    v8 = a4;
  else
    v8 = -a4;
  v9 = (int8x8_t)vdup_n_s16(a4);
  *(int16x4_t *)a5.i8 = vdup_n_s16(*(unsigned __int8 *)a2);
  v10 = vdup_n_s16(v8 << 9);
  v11 = (int16x4_t)veor_s8(*a1, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16((int16x4_t)*a1), v10), v11, 0xFuLL), (int8x8_t)vcltz_s16(v11)), *(int16x4_t *)a5.i8);
  *a2 = vqmovun_s16(a8).u32[0];
  v12 = (_DWORD *)((char *)a2 + a3);
  *(int8x8_t *)a8.i8 = a1[8];
  v13 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v13, 0xFuLL), (int8x8_t)vcltz_s16(v13)), *(int16x4_t *)a5.i8);
  *v12 = vqmovun_s16(a8).u32[0];
  v14 = (_DWORD *)((char *)v12 + a3);
  *(int8x8_t *)a8.i8 = a1[16];
  v15 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v15, 0xFuLL), (int8x8_t)vcltz_s16(v15)), *(int16x4_t *)a5.i8);
  *v14 = vqmovun_s16(a8).u32[0];
  v16 = (_DWORD *)((char *)v14 + a3);
  *(int8x8_t *)a8.i8 = a1[24];
  v17 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v17, 0xFuLL), (int8x8_t)vcltz_s16(v17)), *(int16x4_t *)a5.i8);
  *v16 = vqmovun_s16(a8).u32[0];
  v18 = (_DWORD *)((char *)v16 + a3);
  *(int8x8_t *)a8.i8 = a1[32];
  v19 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v19, 0xFuLL), (int8x8_t)vcltz_s16(v19)), *(int16x4_t *)a5.i8);
  *v18 = vqmovun_s16(a8).u32[0];
  v20 = (_DWORD *)((char *)v18 + a3);
  *(int8x8_t *)a8.i8 = a1[40];
  v21 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v21, 0xFuLL), (int8x8_t)vcltz_s16(v21)), *(int16x4_t *)a5.i8);
  *v20 = vqmovun_s16(a8).u32[0];
  v22 = (_DWORD *)((char *)v20 + a3);
  *(int8x8_t *)a8.i8 = a1[48];
  v23 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v23, 0xFuLL), (int8x8_t)vcltz_s16(v23)), *(int16x4_t *)a5.i8);
  *v22 = vqmovun_s16(a8).u32[0];
  v24 = (int16x4_t)a1[56];
  v25 = (int16x4_t)veor_s8((int8x8_t)v24, v9);
  *(int16x4_t *)a5.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(v24), v10), v25, 0xFuLL), (int8x8_t)vcltz_s16(v25)), *(int16x4_t *)a5.i8);
  *(int8x8_t *)a5.i8 = vqmovun_s16(a5);
  *(_DWORD *)((char *)v22 + a3) = a5.i32[0];
  return *(double *)a5.i64;
}

double cfl_predict_lbd_4x16_neon(int8x8_t *a1, _DWORD *a2, int a3, signed int a4, int16x8_t a5, double a6, double a7, int16x8_t a8)
{
  int v8;
  int8x8_t v9;
  int16x4_t v10;
  int16x4_t v11;
  _DWORD *v12;
  int16x4_t v13;
  _DWORD *v14;
  int16x4_t v15;
  _DWORD *v16;
  int16x4_t v17;
  _DWORD *v18;
  int16x4_t v19;
  _DWORD *v20;
  int16x4_t v21;
  _DWORD *v22;
  int16x4_t v23;
  _DWORD *v24;
  int16x4_t v25;
  _DWORD *v26;
  int16x4_t v27;
  _DWORD *v28;
  int16x4_t v29;
  _DWORD *v30;
  int16x4_t v31;
  _DWORD *v32;
  int16x4_t v33;
  _DWORD *v34;
  int16x4_t v35;
  _DWORD *v36;
  int16x4_t v37;
  _DWORD *v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;

  if (a4 >= 0)
    v8 = a4;
  else
    v8 = -a4;
  v9 = (int8x8_t)vdup_n_s16(a4);
  *(int16x4_t *)a5.i8 = vdup_n_s16(*(unsigned __int8 *)a2);
  v10 = vdup_n_s16(v8 << 9);
  v11 = (int16x4_t)veor_s8(*a1, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16((int16x4_t)*a1), v10), v11, 0xFuLL), (int8x8_t)vcltz_s16(v11)), *(int16x4_t *)a5.i8);
  *a2 = vqmovun_s16(a8).u32[0];
  v12 = (_DWORD *)((char *)a2 + a3);
  *(int8x8_t *)a8.i8 = a1[8];
  v13 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v13, 0xFuLL), (int8x8_t)vcltz_s16(v13)), *(int16x4_t *)a5.i8);
  *v12 = vqmovun_s16(a8).u32[0];
  v14 = (_DWORD *)((char *)v12 + a3);
  *(int8x8_t *)a8.i8 = a1[16];
  v15 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v15, 0xFuLL), (int8x8_t)vcltz_s16(v15)), *(int16x4_t *)a5.i8);
  *v14 = vqmovun_s16(a8).u32[0];
  v16 = (_DWORD *)((char *)v14 + a3);
  *(int8x8_t *)a8.i8 = a1[24];
  v17 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v17, 0xFuLL), (int8x8_t)vcltz_s16(v17)), *(int16x4_t *)a5.i8);
  *v16 = vqmovun_s16(a8).u32[0];
  v18 = (_DWORD *)((char *)v16 + a3);
  *(int8x8_t *)a8.i8 = a1[32];
  v19 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v19, 0xFuLL), (int8x8_t)vcltz_s16(v19)), *(int16x4_t *)a5.i8);
  *v18 = vqmovun_s16(a8).u32[0];
  v20 = (_DWORD *)((char *)v18 + a3);
  *(int8x8_t *)a8.i8 = a1[40];
  v21 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v21, 0xFuLL), (int8x8_t)vcltz_s16(v21)), *(int16x4_t *)a5.i8);
  *v20 = vqmovun_s16(a8).u32[0];
  v22 = (_DWORD *)((char *)v20 + a3);
  *(int8x8_t *)a8.i8 = a1[48];
  v23 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v23, 0xFuLL), (int8x8_t)vcltz_s16(v23)), *(int16x4_t *)a5.i8);
  *v22 = vqmovun_s16(a8).u32[0];
  v24 = (_DWORD *)((char *)v22 + a3);
  *(int8x8_t *)a8.i8 = a1[56];
  v25 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v25, 0xFuLL), (int8x8_t)vcltz_s16(v25)), *(int16x4_t *)a5.i8);
  *v24 = vqmovun_s16(a8).u32[0];
  v26 = (_DWORD *)((char *)v24 + a3);
  *(int8x8_t *)a8.i8 = a1[64];
  v27 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v27, 0xFuLL), (int8x8_t)vcltz_s16(v27)), *(int16x4_t *)a5.i8);
  *v26 = vqmovun_s16(a8).u32[0];
  v28 = (_DWORD *)((char *)v26 + a3);
  *(int8x8_t *)a8.i8 = a1[72];
  v29 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v29, 0xFuLL), (int8x8_t)vcltz_s16(v29)), *(int16x4_t *)a5.i8);
  *v28 = vqmovun_s16(a8).u32[0];
  v30 = (_DWORD *)((char *)v28 + a3);
  *(int8x8_t *)a8.i8 = a1[80];
  v31 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v31, 0xFuLL), (int8x8_t)vcltz_s16(v31)), *(int16x4_t *)a5.i8);
  *v30 = vqmovun_s16(a8).u32[0];
  v32 = (_DWORD *)((char *)v30 + a3);
  *(int8x8_t *)a8.i8 = a1[88];
  v33 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v33, 0xFuLL), (int8x8_t)vcltz_s16(v33)), *(int16x4_t *)a5.i8);
  *v32 = vqmovun_s16(a8).u32[0];
  v34 = (_DWORD *)((char *)v32 + a3);
  *(int8x8_t *)a8.i8 = a1[96];
  v35 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v35, 0xFuLL), (int8x8_t)vcltz_s16(v35)), *(int16x4_t *)a5.i8);
  *v34 = vqmovun_s16(a8).u32[0];
  v36 = (_DWORD *)((char *)v34 + a3);
  *(int8x8_t *)a8.i8 = a1[104];
  v37 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v37, 0xFuLL), (int8x8_t)vcltz_s16(v37)), *(int16x4_t *)a5.i8);
  *v36 = vqmovun_s16(a8).u32[0];
  v38 = (_DWORD *)((char *)v36 + a3);
  *(int8x8_t *)a8.i8 = a1[112];
  v39 = (int16x4_t)veor_s8(*(int8x8_t *)a8.i8, v9);
  *(int16x4_t *)a8.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(*(int16x4_t *)a8.i8), v10), v39, 0xFuLL), (int8x8_t)vcltz_s16(v39)), *(int16x4_t *)a5.i8);
  *v38 = vqmovun_s16(a8).u32[0];
  v40 = (int16x4_t)a1[120];
  v41 = (int16x4_t)veor_s8((int8x8_t)v40, v9);
  *(int16x4_t *)a5.i8 = vadd_s16((int16x4_t)veor_s8((int8x8_t)vsra_n_s16(vqrdmulh_s16(vabs_s16(v40), v10), v41, 0xFuLL), (int8x8_t)vcltz_s16(v41)), *(int16x4_t *)a5.i8);
  *(int8x8_t *)a5.i8 = vqmovun_s16(a5);
  *(_DWORD *)((char *)v38 + a3) = a5.i32[0];
  return *(double *)a5.i64;
}

int8x8_t cfl_predict_lbd_8x4_neon(int8x16_t *a1, int8x8_t *a2, int a3, signed int a4)
{
  int v4;
  int8x16_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t *v9;
  int8x16_t v10;
  int16x8_t v11;
  int8x8_t *v12;
  int8x16_t v13;
  int16x8_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int8x8_t result;

  if (a4 >= 0)
    v4 = a4;
  else
    v4 = -a4;
  v5 = (int8x16_t)vdupq_n_s16(a4);
  v6 = vdupq_n_s16(a2->u8[0]);
  v7 = vdupq_n_s16(v4 << 9);
  v8 = (int16x8_t)veorq_s8(*a1, v5);
  *a2 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(*(int16x8_t *)a1), v7), v8, 0xFuLL), (int8x16_t)vcltzq_s16(v8)), v6));
  v9 = (int8x8_t *)((char *)a2 + a3);
  v10 = a1[4];
  v11 = (int16x8_t)veorq_s8(v10, v5);
  *v9 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v10), v7), v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v6));
  v12 = (int8x8_t *)((char *)v9 + a3);
  v13 = a1[8];
  v14 = (int16x8_t)veorq_s8(v13, v5);
  *v12 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v13), v7), v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v6));
  v15 = a1[12];
  v16 = (int16x8_t)veorq_s8(v15, v5);
  result = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v15), v7), v16, 0xFuLL), (int8x16_t)vcltzq_s16(v16)), v6));
  *(int8x8_t *)((char *)v12 + a3) = result;
  return result;
}

int8x8_t cfl_predict_lbd_8x8_neon(int8x16_t *a1, int8x8_t *a2, int a3, signed int a4)
{
  int v4;
  int8x16_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t *v9;
  int8x16_t v10;
  int16x8_t v11;
  int8x8_t *v12;
  int8x16_t v13;
  int16x8_t v14;
  int8x8_t *v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x8_t *v18;
  int8x16_t v19;
  int16x8_t v20;
  int8x8_t *v21;
  int8x16_t v22;
  int16x8_t v23;
  int8x8_t *v24;
  int8x16_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int16x8_t v28;
  int8x8_t result;

  if (a4 >= 0)
    v4 = a4;
  else
    v4 = -a4;
  v5 = (int8x16_t)vdupq_n_s16(a4);
  v6 = vdupq_n_s16(a2->u8[0]);
  v7 = vdupq_n_s16(v4 << 9);
  v8 = (int16x8_t)veorq_s8(*a1, v5);
  *a2 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(*(int16x8_t *)a1), v7), v8, 0xFuLL), (int8x16_t)vcltzq_s16(v8)), v6));
  v9 = (int8x8_t *)((char *)a2 + a3);
  v10 = a1[4];
  v11 = (int16x8_t)veorq_s8(v10, v5);
  *v9 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v10), v7), v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v6));
  v12 = (int8x8_t *)((char *)v9 + a3);
  v13 = a1[8];
  v14 = (int16x8_t)veorq_s8(v13, v5);
  *v12 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v13), v7), v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v6));
  v15 = (int8x8_t *)((char *)v12 + a3);
  v16 = a1[12];
  v17 = (int16x8_t)veorq_s8(v16, v5);
  *v15 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v16), v7), v17, 0xFuLL), (int8x16_t)vcltzq_s16(v17)), v6));
  v18 = (int8x8_t *)((char *)v15 + a3);
  v19 = a1[16];
  v20 = (int16x8_t)veorq_s8(v19, v5);
  *v18 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v19), v7), v20, 0xFuLL), (int8x16_t)vcltzq_s16(v20)), v6));
  v21 = (int8x8_t *)((char *)v18 + a3);
  v22 = a1[20];
  v23 = (int16x8_t)veorq_s8(v22, v5);
  *v21 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v22), v7), v23, 0xFuLL), (int8x16_t)vcltzq_s16(v23)), v6));
  v24 = (int8x8_t *)((char *)v21 + a3);
  v25 = a1[24];
  v26 = (int16x8_t)veorq_s8(v25, v5);
  *v24 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v25), v7), v26, 0xFuLL), (int8x16_t)vcltzq_s16(v26)), v6));
  v27 = a1[28];
  v28 = (int16x8_t)veorq_s8(v27, v5);
  result = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v27), v7), v28, 0xFuLL), (int8x16_t)vcltzq_s16(v28)), v6));
  *(int8x8_t *)((char *)v24 + a3) = result;
  return result;
}

int8x8_t cfl_predict_lbd_8x16_neon(int8x16_t *a1, int8x8_t *a2, int a3, signed int a4)
{
  int v4;
  int8x16_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t *v9;
  int8x16_t v10;
  int16x8_t v11;
  int8x8_t *v12;
  int8x16_t v13;
  int16x8_t v14;
  int8x8_t *v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x8_t *v18;
  int8x16_t v19;
  int16x8_t v20;
  int8x8_t *v21;
  int8x16_t v22;
  int16x8_t v23;
  int8x8_t *v24;
  int8x16_t v25;
  int16x8_t v26;
  int8x8_t *v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x8_t *v30;
  int8x16_t v31;
  int16x8_t v32;
  int8x8_t *v33;
  int8x16_t v34;
  int16x8_t v35;
  int8x8_t *v36;
  int8x16_t v37;
  int16x8_t v38;
  int8x8_t *v39;
  int8x16_t v40;
  int16x8_t v41;
  int8x8_t *v42;
  int8x16_t v43;
  int16x8_t v44;
  int8x8_t *v45;
  int8x16_t v46;
  int16x8_t v47;
  int8x8_t *v48;
  int8x16_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int8x8_t result;

  if (a4 >= 0)
    v4 = a4;
  else
    v4 = -a4;
  v5 = (int8x16_t)vdupq_n_s16(a4);
  v6 = vdupq_n_s16(a2->u8[0]);
  v7 = vdupq_n_s16(v4 << 9);
  v8 = (int16x8_t)veorq_s8(*a1, v5);
  *a2 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(*(int16x8_t *)a1), v7), v8, 0xFuLL), (int8x16_t)vcltzq_s16(v8)), v6));
  v9 = (int8x8_t *)((char *)a2 + a3);
  v10 = a1[4];
  v11 = (int16x8_t)veorq_s8(v10, v5);
  *v9 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v10), v7), v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v6));
  v12 = (int8x8_t *)((char *)v9 + a3);
  v13 = a1[8];
  v14 = (int16x8_t)veorq_s8(v13, v5);
  *v12 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v13), v7), v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v6));
  v15 = (int8x8_t *)((char *)v12 + a3);
  v16 = a1[12];
  v17 = (int16x8_t)veorq_s8(v16, v5);
  *v15 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v16), v7), v17, 0xFuLL), (int8x16_t)vcltzq_s16(v17)), v6));
  v18 = (int8x8_t *)((char *)v15 + a3);
  v19 = a1[16];
  v20 = (int16x8_t)veorq_s8(v19, v5);
  *v18 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v19), v7), v20, 0xFuLL), (int8x16_t)vcltzq_s16(v20)), v6));
  v21 = (int8x8_t *)((char *)v18 + a3);
  v22 = a1[20];
  v23 = (int16x8_t)veorq_s8(v22, v5);
  *v21 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v22), v7), v23, 0xFuLL), (int8x16_t)vcltzq_s16(v23)), v6));
  v24 = (int8x8_t *)((char *)v21 + a3);
  v25 = a1[24];
  v26 = (int16x8_t)veorq_s8(v25, v5);
  *v24 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v25), v7), v26, 0xFuLL), (int8x16_t)vcltzq_s16(v26)), v6));
  v27 = (int8x8_t *)((char *)v24 + a3);
  v28 = a1[28];
  v29 = (int16x8_t)veorq_s8(v28, v5);
  *v27 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v28), v7), v29, 0xFuLL), (int8x16_t)vcltzq_s16(v29)), v6));
  v30 = (int8x8_t *)((char *)v27 + a3);
  v31 = a1[32];
  v32 = (int16x8_t)veorq_s8(v31, v5);
  *v30 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v31), v7), v32, 0xFuLL), (int8x16_t)vcltzq_s16(v32)), v6));
  v33 = (int8x8_t *)((char *)v30 + a3);
  v34 = a1[36];
  v35 = (int16x8_t)veorq_s8(v34, v5);
  *v33 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v34), v7), v35, 0xFuLL), (int8x16_t)vcltzq_s16(v35)), v6));
  v36 = (int8x8_t *)((char *)v33 + a3);
  v37 = a1[40];
  v38 = (int16x8_t)veorq_s8(v37, v5);
  *v36 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v37), v7), v38, 0xFuLL), (int8x16_t)vcltzq_s16(v38)), v6));
  v39 = (int8x8_t *)((char *)v36 + a3);
  v40 = a1[44];
  v41 = (int16x8_t)veorq_s8(v40, v5);
  *v39 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v40), v7), v41, 0xFuLL), (int8x16_t)vcltzq_s16(v41)), v6));
  v42 = (int8x8_t *)((char *)v39 + a3);
  v43 = a1[48];
  v44 = (int16x8_t)veorq_s8(v43, v5);
  *v42 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v43), v7), v44, 0xFuLL), (int8x16_t)vcltzq_s16(v44)), v6));
  v45 = (int8x8_t *)((char *)v42 + a3);
  v46 = a1[52];
  v47 = (int16x8_t)veorq_s8(v46, v5);
  *v45 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v46), v7), v47, 0xFuLL), (int8x16_t)vcltzq_s16(v47)), v6));
  v48 = (int8x8_t *)((char *)v45 + a3);
  v49 = a1[56];
  v50 = (int16x8_t)veorq_s8(v49, v5);
  *v48 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v49), v7), v50, 0xFuLL), (int8x16_t)vcltzq_s16(v50)), v6));
  v51 = a1[60];
  v52 = (int16x8_t)veorq_s8(v51, v5);
  result = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16((int16x8_t)v51), v7), v52, 0xFuLL), (int8x16_t)vcltzq_s16(v52)), v6));
  *(int8x8_t *)((char *)v48 + a3) = result;
  return result;
}

int8x16_t *cfl_predict_lbd_8x32_neon(int8x16_t *result, int8x8_t *a2, int a3, signed int a4, double a5, double a6, int16x4_t a7)
{
  int v7;
  int8x16_t v8;
  int16x8_t v9;
  unint64_t v10;
  int8x16_t v11;
  int16x8_t v12;

  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = (int8x16_t)vdupq_n_s16(a4);
  v9 = vdupq_n_s16(a2->u8[0]);
  v10 = -32;
  do
  {
    v11 = *result;
    result += 4;
    v12 = (int16x8_t)veorq_s8(v11, v8);
    a7.i32[0] = v7 << 9;
    *a2 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_lane_s16(vabsq_s16((int16x8_t)v11), a7, 0), v12, 0xFuLL), (int8x16_t)vcltzq_s16(v12)), v9));
    a2 = (int8x8_t *)((char *)a2 + a3);
    v10 += 32;
  }
  while (v10 < 0x3E0);
  return result;
}

int16x8_t cfl_predict_lbd_16x4_neon(const __int16 *a1, char *a2, int a3, signed int a4)
{
  int v4;
  int8x16_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  char *v12;
  const __int16 *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  char *v17;
  const __int16 *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  char *v22;
  const __int16 *v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t result;
  int16x8x2_t v27;
  int16x8x2_t v28;
  int16x8x2_t v29;
  int16x8x2_t v30;

  if (a4 >= 0)
    v4 = a4;
  else
    v4 = -a4;
  v5 = (int8x16_t)vdupq_n_s16(a4);
  v6 = vdupq_n_s16(*a2);
  v7 = vdupq_n_s16(v4 << 9);
  v8 = a3;
  v27 = vld2q_s16(a1);
  v9 = (int16x8_t)veorq_s8((int8x16_t)v27.val[0], v5);
  v10 = (int16x8_t)veorq_s8((int8x16_t)v27.val[1], v5);
  v11 = vqrdmulhq_s16(vabsq_s16(v27.val[0]), v7);
  v27.val[0] = vqrdmulhq_s16(vabsq_s16(v27.val[1]), v7);
  *(int8x8_t *)v27.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v11, v9, 0xFuLL), (int8x16_t)vcltzq_s16(v9)), v6));
  *(int8x8_t *)v9.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v27.val[0], v10, 0xFuLL), (int8x16_t)vcltzq_s16(v10)), v6));
  vst2_s8(a2, (int8x8x2_t)v27.val[1]);
  v12 = &a2[v8];
  v13 = a1 + 32;
  v28 = vld2q_s16(v13);
  v14 = (int16x8_t)veorq_s8((int8x16_t)v28.val[0], v5);
  v15 = (int16x8_t)veorq_s8((int8x16_t)v28.val[1], v5);
  v16 = vqrdmulhq_s16(vabsq_s16(v28.val[0]), v7);
  v28.val[0] = vqrdmulhq_s16(vabsq_s16(v28.val[1]), v7);
  *(int8x8_t *)v28.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v16, v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v6));
  *(int8x8_t *)v14.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v28.val[0], v15, 0xFuLL), (int8x16_t)vcltzq_s16(v15)), v6));
  vst2_s8(v12, (int8x8x2_t)v28.val[1]);
  v17 = &v12[v8];
  v18 = a1 + 64;
  v29 = vld2q_s16(v18);
  v19 = (int16x8_t)veorq_s8((int8x16_t)v29.val[0], v5);
  v20 = (int16x8_t)veorq_s8((int8x16_t)v29.val[1], v5);
  v21 = vqrdmulhq_s16(vabsq_s16(v29.val[0]), v7);
  v29.val[0] = vqrdmulhq_s16(vabsq_s16(v29.val[1]), v7);
  *(int8x8_t *)v29.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v21, v19, 0xFuLL), (int8x16_t)vcltzq_s16(v19)), v6));
  *(int8x8_t *)v19.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v29.val[0], v20, 0xFuLL), (int8x16_t)vcltzq_s16(v20)), v6));
  vst2_s8(v17, (int8x8x2_t)v29.val[1]);
  v22 = &v17[v8];
  v23 = a1 + 96;
  v30 = vld2q_s16(v23);
  v24 = (int16x8_t)veorq_s8((int8x16_t)v30.val[0], v5);
  v25 = (int16x8_t)veorq_s8((int8x16_t)v30.val[1], v5);
  v30.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v30.val[0]), v7), v24, 0xFuLL), (int8x16_t)vcltzq_s16(v24)), v6);
  result = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v30.val[1]), v7), v25, 0xFuLL), (int8x16_t)vcltzq_s16(v25)), v6);
  *(int8x8_t *)v25.i8 = vqmovun_s16(v30.val[0]);
  *(int8x8_t *)v7.i8 = vqmovun_s16(result);
  vst2_s8(v22, *(int8x8x2_t *)((char *)&v7 - 8));
  return result;
}

int16x8_t cfl_predict_lbd_16x8_neon(const __int16 *a1, char *a2, int a3, signed int a4)
{
  int v4;
  int8x16_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  char *v12;
  const __int16 *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  char *v17;
  const __int16 *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  char *v22;
  const __int16 *v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  char *v27;
  const __int16 *v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  char *v32;
  const __int16 *v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  char *v37;
  const __int16 *v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  char *v42;
  const __int16 *v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t result;
  int16x8x2_t v47;
  int16x8x2_t v48;
  int16x8x2_t v49;
  int16x8x2_t v50;
  int16x8x2_t v51;
  int16x8x2_t v52;
  int16x8x2_t v53;
  int16x8x2_t v54;

  if (a4 >= 0)
    v4 = a4;
  else
    v4 = -a4;
  v5 = (int8x16_t)vdupq_n_s16(a4);
  v6 = vdupq_n_s16(*a2);
  v7 = vdupq_n_s16(v4 << 9);
  v8 = a3;
  v47 = vld2q_s16(a1);
  v9 = (int16x8_t)veorq_s8((int8x16_t)v47.val[0], v5);
  v10 = (int16x8_t)veorq_s8((int8x16_t)v47.val[1], v5);
  v11 = vqrdmulhq_s16(vabsq_s16(v47.val[0]), v7);
  v47.val[0] = vqrdmulhq_s16(vabsq_s16(v47.val[1]), v7);
  *(int8x8_t *)v47.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v11, v9, 0xFuLL), (int8x16_t)vcltzq_s16(v9)), v6));
  *(int8x8_t *)v9.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v47.val[0], v10, 0xFuLL), (int8x16_t)vcltzq_s16(v10)), v6));
  vst2_s8(a2, (int8x8x2_t)v47.val[1]);
  v12 = &a2[v8];
  v13 = a1 + 32;
  v48 = vld2q_s16(v13);
  v14 = (int16x8_t)veorq_s8((int8x16_t)v48.val[0], v5);
  v15 = (int16x8_t)veorq_s8((int8x16_t)v48.val[1], v5);
  v16 = vqrdmulhq_s16(vabsq_s16(v48.val[0]), v7);
  v48.val[0] = vqrdmulhq_s16(vabsq_s16(v48.val[1]), v7);
  *(int8x8_t *)v48.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v16, v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v6));
  *(int8x8_t *)v14.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v48.val[0], v15, 0xFuLL), (int8x16_t)vcltzq_s16(v15)), v6));
  vst2_s8(v12, (int8x8x2_t)v48.val[1]);
  v17 = &v12[v8];
  v18 = a1 + 64;
  v49 = vld2q_s16(v18);
  v19 = (int16x8_t)veorq_s8((int8x16_t)v49.val[0], v5);
  v20 = (int16x8_t)veorq_s8((int8x16_t)v49.val[1], v5);
  v21 = vqrdmulhq_s16(vabsq_s16(v49.val[0]), v7);
  v49.val[0] = vqrdmulhq_s16(vabsq_s16(v49.val[1]), v7);
  *(int8x8_t *)v49.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v21, v19, 0xFuLL), (int8x16_t)vcltzq_s16(v19)), v6));
  *(int8x8_t *)v19.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v49.val[0], v20, 0xFuLL), (int8x16_t)vcltzq_s16(v20)), v6));
  vst2_s8(v17, (int8x8x2_t)v49.val[1]);
  v22 = &v17[v8];
  v23 = a1 + 96;
  v50 = vld2q_s16(v23);
  v24 = (int16x8_t)veorq_s8((int8x16_t)v50.val[0], v5);
  v25 = (int16x8_t)veorq_s8((int8x16_t)v50.val[1], v5);
  v26 = vqrdmulhq_s16(vabsq_s16(v50.val[0]), v7);
  v50.val[0] = vqrdmulhq_s16(vabsq_s16(v50.val[1]), v7);
  *(int8x8_t *)v50.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v26, v24, 0xFuLL), (int8x16_t)vcltzq_s16(v24)), v6));
  *(int8x8_t *)v24.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v50.val[0], v25, 0xFuLL), (int8x16_t)vcltzq_s16(v25)), v6));
  vst2_s8(v22, (int8x8x2_t)v50.val[1]);
  v27 = &v22[v8];
  v28 = a1 + 128;
  v51 = vld2q_s16(v28);
  v29 = (int16x8_t)veorq_s8((int8x16_t)v51.val[0], v5);
  v30 = (int16x8_t)veorq_s8((int8x16_t)v51.val[1], v5);
  v31 = vqrdmulhq_s16(vabsq_s16(v51.val[0]), v7);
  v51.val[0] = vqrdmulhq_s16(vabsq_s16(v51.val[1]), v7);
  *(int8x8_t *)v51.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v31, v29, 0xFuLL), (int8x16_t)vcltzq_s16(v29)), v6));
  *(int8x8_t *)v29.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v51.val[0], v30, 0xFuLL), (int8x16_t)vcltzq_s16(v30)), v6));
  vst2_s8(v27, (int8x8x2_t)v51.val[1]);
  v32 = &v27[v8];
  v33 = a1 + 160;
  v52 = vld2q_s16(v33);
  v34 = (int16x8_t)veorq_s8((int8x16_t)v52.val[0], v5);
  v35 = (int16x8_t)veorq_s8((int8x16_t)v52.val[1], v5);
  v36 = vqrdmulhq_s16(vabsq_s16(v52.val[0]), v7);
  v52.val[0] = vqrdmulhq_s16(vabsq_s16(v52.val[1]), v7);
  *(int8x8_t *)v52.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v36, v34, 0xFuLL), (int8x16_t)vcltzq_s16(v34)), v6));
  *(int8x8_t *)v34.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v52.val[0], v35, 0xFuLL), (int8x16_t)vcltzq_s16(v35)), v6));
  vst2_s8(v32, (int8x8x2_t)v52.val[1]);
  v37 = &v32[v8];
  v38 = a1 + 192;
  v53 = vld2q_s16(v38);
  v39 = (int16x8_t)veorq_s8((int8x16_t)v53.val[0], v5);
  v40 = (int16x8_t)veorq_s8((int8x16_t)v53.val[1], v5);
  v41 = vqrdmulhq_s16(vabsq_s16(v53.val[0]), v7);
  v53.val[0] = vqrdmulhq_s16(vabsq_s16(v53.val[1]), v7);
  *(int8x8_t *)v53.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v41, v39, 0xFuLL), (int8x16_t)vcltzq_s16(v39)), v6));
  *(int8x8_t *)v39.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v53.val[0], v40, 0xFuLL), (int8x16_t)vcltzq_s16(v40)), v6));
  vst2_s8(v37, (int8x8x2_t)v53.val[1]);
  v42 = &v37[v8];
  v43 = a1 + 224;
  v54 = vld2q_s16(v43);
  v44 = (int16x8_t)veorq_s8((int8x16_t)v54.val[0], v5);
  v45 = (int16x8_t)veorq_s8((int8x16_t)v54.val[1], v5);
  v54.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v54.val[0]), v7), v44, 0xFuLL), (int8x16_t)vcltzq_s16(v44)), v6);
  result = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v54.val[1]), v7), v45, 0xFuLL), (int8x16_t)vcltzq_s16(v45)), v6);
  *(int8x8_t *)v45.i8 = vqmovun_s16(v54.val[0]);
  *(int8x8_t *)v7.i8 = vqmovun_s16(result);
  vst2_s8(v42, *(int8x8x2_t *)((char *)&v7 - 8));
  return result;
}

const __int16 *cfl_predict_lbd_16x16_neon(const __int16 *result, char *a2, int a3, signed int a4, double a5, double a6, int16x4_t a7)
{
  int v7;
  int8x16_t v8;
  int16x8_t v9;
  unint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8x2_t v14;

  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = (int8x16_t)vdupq_n_s16(a4);
  v9 = vdupq_n_s16(*a2);
  a7.i32[0] = v7 << 9;
  v10 = -32;
  do
  {
    v14 = vld2q_s16(result);
    v11 = (int16x8_t)veorq_s8((int8x16_t)v14.val[0], v8);
    v12 = (int16x8_t)veorq_s8((int8x16_t)v14.val[1], v8);
    v13 = vqrdmulhq_lane_s16(vabsq_s16(v14.val[0]), a7, 0);
    v14.val[0] = vqrdmulhq_lane_s16(vabsq_s16(v14.val[1]), a7, 0);
    *(int8x8_t *)v14.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v13, v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v9));
    *(int8x8_t *)v11.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v14.val[0], v12, 0xFuLL), (int8x16_t)vcltzq_s16(v12)), v9));
    vst2_s8(a2, (int8x8x2_t)v14.val[1]);
    a2 += a3;
    v10 += 32;
    result += 32;
  }
  while (v10 < 0x1E0);
  return result;
}

const __int16 *cfl_predict_lbd_16x32_neon(const __int16 *result, char *a2, int a3, signed int a4, double a5, double a6, int16x4_t a7)
{
  int v7;
  int8x16_t v8;
  int16x8_t v9;
  unint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8x2_t v14;

  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = (int8x16_t)vdupq_n_s16(a4);
  v9 = vdupq_n_s16(*a2);
  a7.i32[0] = v7 << 9;
  v10 = -32;
  do
  {
    v14 = vld2q_s16(result);
    v11 = (int16x8_t)veorq_s8((int8x16_t)v14.val[0], v8);
    v12 = (int16x8_t)veorq_s8((int8x16_t)v14.val[1], v8);
    v13 = vqrdmulhq_lane_s16(vabsq_s16(v14.val[0]), a7, 0);
    v14.val[0] = vqrdmulhq_lane_s16(vabsq_s16(v14.val[1]), a7, 0);
    *(int8x8_t *)v14.val[1].i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v13, v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v9));
    *(int8x8_t *)v11.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v14.val[0], v12, 0xFuLL), (int8x16_t)vcltzq_s16(v12)), v9));
    vst2_s8(a2, (int8x8x2_t)v14.val[1]);
    a2 += a3;
    v10 += 32;
    result += 32;
  }
  while (v10 < 0x3E0);
  return result;
}

int16x8_t cfl_predict_lbd_32x8_neon(const __int16 *a1, char *a2, int a3, signed int a4)
{
  int v4;
  unsigned int v5;
  int8x16_t v6;
  int16x8_t v7;
  const __int16 *v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  char *v17;
  const __int16 *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  char *v25;
  const __int16 *v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  char *v33;
  const __int16 *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  char *v41;
  const __int16 *v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  char *v49;
  const __int16 *v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  char *v57;
  const __int16 *v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  char *v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t result;
  int16x8x4_t v71;
  int16x8x4_t v72;
  int16x8x4_t v73;
  int16x8x4_t v74;
  int16x8x4_t v75;
  int16x8x4_t v76;
  int16x8x4_t v77;
  int16x8x4_t v78;

  if (a4 >= 0)
    v4 = a4;
  else
    v4 = -a4;
  v5 = v4 << 9;
  v6 = (int8x16_t)vdupq_n_s16(a4);
  v7 = vdupq_n_s16(*a2);
  v8 = a1;
  v71 = vld4q_s16(v8);
  v8 += 32;
  v9 = a3;
  v10 = vdupq_n_s16(v5);
  v11 = (int16x8_t)veorq_s8((int8x16_t)v71.val[0], v6);
  v12 = (int16x8_t)veorq_s8((int8x16_t)v71.val[1], v6);
  v13 = (int16x8_t)veorq_s8((int8x16_t)v71.val[2], v6);
  v14 = (int16x8_t)veorq_s8((int8x16_t)v71.val[3], v6);
  v15 = vqrdmulhq_s16(vabsq_s16(v71.val[0]), v10);
  v16 = vqrdmulhq_s16(vabsq_s16(v71.val[2]), v10);
  v71.val[0] = vqrdmulhq_s16(vabsq_s16(v71.val[3]), v10);
  v71.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v71.val[1]), v10), v12, 0xFuLL), (int8x16_t)vcltzq_s16(v12)), v7);
  v71.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v16, v13, 0xFuLL), (int8x16_t)vcltzq_s16(v13)), v7);
  v71.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v71.val[0], v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v7);
  *(int8x8_t *)v12.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v15, v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v7));
  *(int8x8_t *)v13.i8 = vqmovun_s16(v71.val[2]);
  *(int8x8_t *)v14.i8 = vqmovun_s16(v71.val[3]);
  *(int8x8_t *)v15.i8 = vqmovun_s16(v71.val[0]);
  vst4_s8(a2, *(int8x8x4_t *)v12.i8);
  v17 = &a2[v9];
  v72 = vld4q_s16(v8);
  v18 = a1 + 64;
  v19 = (int16x8_t)veorq_s8((int8x16_t)v72.val[0], v6);
  v20 = (int16x8_t)veorq_s8((int8x16_t)v72.val[1], v6);
  v21 = (int16x8_t)veorq_s8((int8x16_t)v72.val[2], v6);
  v22 = (int16x8_t)veorq_s8((int8x16_t)v72.val[3], v6);
  v23 = vqrdmulhq_s16(vabsq_s16(v72.val[0]), v10);
  v24 = vqrdmulhq_s16(vabsq_s16(v72.val[2]), v10);
  v72.val[0] = vqrdmulhq_s16(vabsq_s16(v72.val[3]), v10);
  v72.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v72.val[1]), v10), v20, 0xFuLL), (int8x16_t)vcltzq_s16(v20)), v7);
  v72.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v24, v21, 0xFuLL), (int8x16_t)vcltzq_s16(v21)), v7);
  v72.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v72.val[0], v22, 0xFuLL), (int8x16_t)vcltzq_s16(v22)), v7);
  *(int8x8_t *)v20.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v23, v19, 0xFuLL), (int8x16_t)vcltzq_s16(v19)), v7));
  *(int8x8_t *)v21.i8 = vqmovun_s16(v72.val[2]);
  *(int8x8_t *)v22.i8 = vqmovun_s16(v72.val[3]);
  *(int8x8_t *)v23.i8 = vqmovun_s16(v72.val[0]);
  vst4_s8(v17, *(int8x8x4_t *)v20.i8);
  v25 = &v17[v9];
  v73 = vld4q_s16(v18);
  v26 = a1 + 96;
  v27 = (int16x8_t)veorq_s8((int8x16_t)v73.val[0], v6);
  v28 = (int16x8_t)veorq_s8((int8x16_t)v73.val[1], v6);
  v29 = (int16x8_t)veorq_s8((int8x16_t)v73.val[2], v6);
  v30 = (int16x8_t)veorq_s8((int8x16_t)v73.val[3], v6);
  v31 = vqrdmulhq_s16(vabsq_s16(v73.val[0]), v10);
  v32 = vqrdmulhq_s16(vabsq_s16(v73.val[2]), v10);
  v73.val[0] = vqrdmulhq_s16(vabsq_s16(v73.val[3]), v10);
  v73.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v73.val[1]), v10), v28, 0xFuLL), (int8x16_t)vcltzq_s16(v28)), v7);
  v73.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v32, v29, 0xFuLL), (int8x16_t)vcltzq_s16(v29)), v7);
  v73.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v73.val[0], v30, 0xFuLL), (int8x16_t)vcltzq_s16(v30)), v7);
  *(int8x8_t *)v28.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v31, v27, 0xFuLL), (int8x16_t)vcltzq_s16(v27)), v7));
  *(int8x8_t *)v29.i8 = vqmovun_s16(v73.val[2]);
  *(int8x8_t *)v30.i8 = vqmovun_s16(v73.val[3]);
  *(int8x8_t *)v31.i8 = vqmovun_s16(v73.val[0]);
  vst4_s8(v25, *(int8x8x4_t *)v28.i8);
  v33 = &v25[v9];
  v74 = vld4q_s16(v26);
  v34 = a1 + 128;
  v35 = (int16x8_t)veorq_s8((int8x16_t)v74.val[0], v6);
  v36 = (int16x8_t)veorq_s8((int8x16_t)v74.val[1], v6);
  v37 = (int16x8_t)veorq_s8((int8x16_t)v74.val[2], v6);
  v38 = (int16x8_t)veorq_s8((int8x16_t)v74.val[3], v6);
  v39 = vqrdmulhq_s16(vabsq_s16(v74.val[0]), v10);
  v40 = vqrdmulhq_s16(vabsq_s16(v74.val[2]), v10);
  v74.val[0] = vqrdmulhq_s16(vabsq_s16(v74.val[3]), v10);
  v74.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v74.val[1]), v10), v36, 0xFuLL), (int8x16_t)vcltzq_s16(v36)), v7);
  v74.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v40, v37, 0xFuLL), (int8x16_t)vcltzq_s16(v37)), v7);
  v74.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v74.val[0], v38, 0xFuLL), (int8x16_t)vcltzq_s16(v38)), v7);
  *(int8x8_t *)v36.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v39, v35, 0xFuLL), (int8x16_t)vcltzq_s16(v35)), v7));
  *(int8x8_t *)v37.i8 = vqmovun_s16(v74.val[2]);
  *(int8x8_t *)v38.i8 = vqmovun_s16(v74.val[3]);
  *(int8x8_t *)v39.i8 = vqmovun_s16(v74.val[0]);
  vst4_s8(v33, *(int8x8x4_t *)v36.i8);
  v41 = &v33[v9];
  v75 = vld4q_s16(v34);
  v42 = a1 + 160;
  v43 = (int16x8_t)veorq_s8((int8x16_t)v75.val[0], v6);
  v44 = (int16x8_t)veorq_s8((int8x16_t)v75.val[1], v6);
  v45 = (int16x8_t)veorq_s8((int8x16_t)v75.val[2], v6);
  v46 = (int16x8_t)veorq_s8((int8x16_t)v75.val[3], v6);
  v47 = vqrdmulhq_s16(vabsq_s16(v75.val[0]), v10);
  v48 = vqrdmulhq_s16(vabsq_s16(v75.val[2]), v10);
  v75.val[0] = vqrdmulhq_s16(vabsq_s16(v75.val[3]), v10);
  v75.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v75.val[1]), v10), v44, 0xFuLL), (int8x16_t)vcltzq_s16(v44)), v7);
  v75.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v48, v45, 0xFuLL), (int8x16_t)vcltzq_s16(v45)), v7);
  v75.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v75.val[0], v46, 0xFuLL), (int8x16_t)vcltzq_s16(v46)), v7);
  *(int8x8_t *)v44.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v47, v43, 0xFuLL), (int8x16_t)vcltzq_s16(v43)), v7));
  *(int8x8_t *)v45.i8 = vqmovun_s16(v75.val[2]);
  *(int8x8_t *)v46.i8 = vqmovun_s16(v75.val[3]);
  *(int8x8_t *)v47.i8 = vqmovun_s16(v75.val[0]);
  vst4_s8(v41, *(int8x8x4_t *)v44.i8);
  v49 = &v41[v9];
  v76 = vld4q_s16(v42);
  v50 = a1 + 192;
  v51 = (int16x8_t)veorq_s8((int8x16_t)v76.val[0], v6);
  v52 = (int16x8_t)veorq_s8((int8x16_t)v76.val[1], v6);
  v53 = (int16x8_t)veorq_s8((int8x16_t)v76.val[2], v6);
  v54 = (int16x8_t)veorq_s8((int8x16_t)v76.val[3], v6);
  v55 = vqrdmulhq_s16(vabsq_s16(v76.val[0]), v10);
  v56 = vqrdmulhq_s16(vabsq_s16(v76.val[2]), v10);
  v76.val[0] = vqrdmulhq_s16(vabsq_s16(v76.val[3]), v10);
  v76.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v76.val[1]), v10), v52, 0xFuLL), (int8x16_t)vcltzq_s16(v52)), v7);
  v76.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v56, v53, 0xFuLL), (int8x16_t)vcltzq_s16(v53)), v7);
  v76.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v76.val[0], v54, 0xFuLL), (int8x16_t)vcltzq_s16(v54)), v7);
  *(int8x8_t *)v52.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v55, v51, 0xFuLL), (int8x16_t)vcltzq_s16(v51)), v7));
  *(int8x8_t *)v53.i8 = vqmovun_s16(v76.val[2]);
  *(int8x8_t *)v54.i8 = vqmovun_s16(v76.val[3]);
  *(int8x8_t *)v55.i8 = vqmovun_s16(v76.val[0]);
  vst4_s8(v49, *(int8x8x4_t *)v52.i8);
  v57 = &v49[v9];
  v77 = vld4q_s16(v50);
  v58 = a1 + 224;
  v59 = (int16x8_t)veorq_s8((int8x16_t)v77.val[0], v6);
  v60 = (int16x8_t)veorq_s8((int8x16_t)v77.val[1], v6);
  v61 = (int16x8_t)veorq_s8((int8x16_t)v77.val[2], v6);
  v62 = (int16x8_t)veorq_s8((int8x16_t)v77.val[3], v6);
  v63 = vqrdmulhq_s16(vabsq_s16(v77.val[0]), v10);
  v64 = vqrdmulhq_s16(vabsq_s16(v77.val[2]), v10);
  v77.val[0] = vqrdmulhq_s16(vabsq_s16(v77.val[3]), v10);
  v77.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v77.val[1]), v10), v60, 0xFuLL), (int8x16_t)vcltzq_s16(v60)), v7);
  v77.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v64, v61, 0xFuLL), (int8x16_t)vcltzq_s16(v61)), v7);
  v77.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v77.val[0], v62, 0xFuLL), (int8x16_t)vcltzq_s16(v62)), v7);
  *(int8x8_t *)v60.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v63, v59, 0xFuLL), (int8x16_t)vcltzq_s16(v59)), v7));
  *(int8x8_t *)v61.i8 = vqmovun_s16(v77.val[2]);
  *(int8x8_t *)v62.i8 = vqmovun_s16(v77.val[3]);
  *(int8x8_t *)v63.i8 = vqmovun_s16(v77.val[0]);
  vst4_s8(v57, *(int8x8x4_t *)v60.i8);
  v65 = &v57[v9];
  v78 = vld4q_s16(v58);
  v66 = (int16x8_t)veorq_s8((int8x16_t)v78.val[0], v6);
  v67 = (int16x8_t)veorq_s8((int8x16_t)v78.val[1], v6);
  v68 = (int16x8_t)veorq_s8((int8x16_t)v78.val[2], v6);
  v69 = (int16x8_t)veorq_s8((int8x16_t)v78.val[3], v6);
  v78.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v78.val[0]), v10), v66, 0xFuLL), (int8x16_t)vcltzq_s16(v66)), v7);
  v78.val[1] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v78.val[1]), v10), v67, 0xFuLL), (int8x16_t)vcltzq_s16(v67)), v7);
  v78.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v78.val[2]), v10), v68, 0xFuLL), (int8x16_t)vcltzq_s16(v68)), v7);
  result = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_s16(vabsq_s16(v78.val[3]), v10), v69, 0xFuLL), (int8x16_t)vcltzq_s16(v69)), v7);
  *(int8x8_t *)v67.i8 = vqmovun_s16(v78.val[0]);
  *(int8x8_t *)v68.i8 = vqmovun_s16(v78.val[1]);
  *(int8x8_t *)v62.i8 = vqmovun_s16(v78.val[2]);
  *(int8x8_t *)v63.i8 = vqmovun_s16(result);
  vst4_s8(v65, *(int8x8x4_t *)(&v62 - 1));
  return result;
}

const __int16 *cfl_predict_lbd_32x16_neon(const __int16 *result, char *a2, int a3, signed int a4, double a5, double a6, int16x4_t a7)
{
  int v7;
  int8x16_t v8;
  int16x8_t v9;
  unint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8x4_t v17;

  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = (int8x16_t)vdupq_n_s16(a4);
  v9 = vdupq_n_s16(*a2);
  a7.i32[0] = v7 << 9;
  v10 = -32;
  do
  {
    v17 = vld4q_s16(result);
    result += 32;
    v11 = (int16x8_t)veorq_s8((int8x16_t)v17.val[0], v8);
    v12 = (int16x8_t)veorq_s8((int8x16_t)v17.val[1], v8);
    v13 = (int16x8_t)veorq_s8((int8x16_t)v17.val[2], v8);
    v14 = (int16x8_t)veorq_s8((int8x16_t)v17.val[3], v8);
    v15 = vqrdmulhq_lane_s16(vabsq_s16(v17.val[0]), a7, 0);
    v16 = vqrdmulhq_lane_s16(vabsq_s16(v17.val[2]), a7, 0);
    v17.val[0] = vqrdmulhq_lane_s16(vabsq_s16(v17.val[3]), a7, 0);
    v17.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_lane_s16(vabsq_s16(v17.val[1]), a7, 0), v12, 0xFuLL), (int8x16_t)vcltzq_s16(v12)), v9);
    v17.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v16, v13, 0xFuLL), (int8x16_t)vcltzq_s16(v13)), v9);
    v17.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v17.val[0], v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v9);
    *(int8x8_t *)v12.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v15, v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v9));
    *(int8x8_t *)v13.i8 = vqmovun_s16(v17.val[2]);
    *(int8x8_t *)v14.i8 = vqmovun_s16(v17.val[3]);
    *(int8x8_t *)v15.i8 = vqmovun_s16(v17.val[0]);
    vst4_s8(a2, *(int8x8x4_t *)v12.i8);
    a2 += a3;
    v10 += 32;
  }
  while (v10 < 0x1E0);
  return result;
}

const __int16 *cfl_predict_lbd_32x32_neon(const __int16 *result, char *a2, int a3, signed int a4, double a5, double a6, int16x4_t a7)
{
  int v7;
  int8x16_t v8;
  int16x8_t v9;
  unint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8x4_t v17;

  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = (int8x16_t)vdupq_n_s16(a4);
  v9 = vdupq_n_s16(*a2);
  a7.i32[0] = v7 << 9;
  v10 = -32;
  do
  {
    v17 = vld4q_s16(result);
    result += 32;
    v11 = (int16x8_t)veorq_s8((int8x16_t)v17.val[0], v8);
    v12 = (int16x8_t)veorq_s8((int8x16_t)v17.val[1], v8);
    v13 = (int16x8_t)veorq_s8((int8x16_t)v17.val[2], v8);
    v14 = (int16x8_t)veorq_s8((int8x16_t)v17.val[3], v8);
    v15 = vqrdmulhq_lane_s16(vabsq_s16(v17.val[0]), a7, 0);
    v16 = vqrdmulhq_lane_s16(vabsq_s16(v17.val[2]), a7, 0);
    v17.val[0] = vqrdmulhq_lane_s16(vabsq_s16(v17.val[3]), a7, 0);
    v17.val[2] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(vqrdmulhq_lane_s16(vabsq_s16(v17.val[1]), a7, 0), v12, 0xFuLL), (int8x16_t)vcltzq_s16(v12)), v9);
    v17.val[3] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v16, v13, 0xFuLL), (int8x16_t)vcltzq_s16(v13)), v9);
    v17.val[0] = vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v17.val[0], v14, 0xFuLL), (int8x16_t)vcltzq_s16(v14)), v9);
    *(int8x8_t *)v12.i8 = vqmovun_s16(vaddq_s16((int16x8_t)veorq_s8((int8x16_t)vsraq_n_s16(v15, v11, 0xFuLL), (int8x16_t)vcltzq_s16(v11)), v9));
    *(int8x8_t *)v13.i8 = vqmovun_s16(v17.val[2]);
    *(int8x8_t *)v14.i8 = vqmovun_s16(v17.val[3]);
    *(int8x8_t *)v15.i8 = vqmovun_s16(v17.val[0]);
    vst4_s8(a2, *(int8x8x4_t *)v12.i8);
    a2 += a3;
    v10 += 32;
  }
  while (v10 < 0x3E0);
  return result;
}

int16x4_t *av1_dist_wtd_convolve_2d_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int16 a10, char a11, uint64_t a12)
{
  int16x4_t *result;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int16x8_t *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  uint64_t v28;
  int16x8_t v29;
  int16x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x4_t v33;
  int16x4_t v34;
  uint8x8_t *v35;
  int16x4_t v37;
  int8x16_t v38;
  int16x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t *v74;
  int8x16_t v75;
  uint64_t *v76;
  int8x16_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint8x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  uint64_t *v102;
  int v111;
  int64x2_t *v112;
  int8x16_t v113;
  uint64_t *v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  uint8x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int v170;
  BOOL v171;
  int16x8_t v172;
  int8x16_t v173;
  int v175;
  int16x8_t *v176;
  uint8x8_t *v177;
  uint8x8_t v178;
  int8x16_t v179;
  int v180;
  uint16x4_t *v181;
  uint64_t v182;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  int16x4_t v186;
  int16x4_t *v187;
  int16x4_t v188;
  int16x8_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int16x8_t v204;
  int32x4_t v205;
  int16x8_t v206;
  int32x4_t v207;
  uint16x4_t *v208;
  _DWORD *v209;
  uint16x4_t *v210;
  uint64_t v211;
  int16x4_t v212;
  int16x4_t v213;
  int16x4_t v214;
  int16x4_t v215;
  int16x4_t *v216;
  int16x4_t v217;
  int16x4_t v218;
  int16x8_t v219;
  int16x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int16x8_t v242;
  int32x4_t v243;
  uint16x4_t *v244;
  int16x4_t *v245;
  uint64_t v246;
  int16x4_t v247;
  int16x4_t v248;
  int16x4_t v249;
  int16x4_t v250;
  int16x4_t v251;
  int16x4_t *v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int16x4_t *v272;
  uint64_t v273;
  int16x4_t v274;
  int16x4_t v275;
  int16x4_t v276;
  int16x4_t v277;
  int16x4_t *v278;
  int16x4_t v279;
  int16x4_t v280;
  int16x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  uint64_t v305;
  uint64_t v306;
  int16x4_t *v307;
  uint64_t v308;
  char *v309;
  char *v310;
  int16x8_t v311;
  char *v312;
  char *v313;
  char *v314;
  uint64_t v315;
  int16x8_t v316;
  int16x8_t v317;
  uint16x4_t *v318;
  int16x8_t v319;
  char *v320;
  char *v321;
  int16x8_t v322;
  char *v323;
  _QWORD *v324;
  int v325;
  int16x8_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int16x8_t v363;
  int16x8_t v364;
  int16x8_t v365;
  int16x8_t v366;
  uint64_t v367;
  uint64_t v368;
  int16x4_t *v369;
  uint64_t v370;
  char *v371;
  char *v372;
  char *v373;
  int16x8_t v374;
  char *v375;
  char *v376;
  uint64_t v377;
  int16x8_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  uint16x4_t *v382;
  int16x8_t v383;
  char *v384;
  char *v385;
  int16x8_t v386;
  char *v387;
  _QWORD *v388;
  int v389;
  int16x8_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  int16x8_t v433;
  int16x8_t v434;
  int16x8_t v435;
  uint64_t v436;
  char *v437;
  char *v438;
  int16x4_t *v439;
  char *v440;
  uint64_t v441;
  int16x8_t v442;
  int16x8_t v443;
  int16x8_t v444;
  int16x8_t v445;
  uint64_t v446;
  int v447;
  int16x8_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int16x8_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int16x8_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  uint64_t v478;
  char *v479;
  char *v480;
  int16x4_t *v481;
  char *v482;
  uint64_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int16x8_t v488;
  int16x8_t v489;
  uint64_t v490;
  int v491;
  int16x8_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int16x8_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int16x8_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int16x4_t v529[32];
  int16x4_t v530;
  int16x4_t v531;
  int16x4_t v532;
  int16x4_t v533;
  _QWORD v534[32];
  int16x4_t v535;
  _QWORD v536[4098];

  result = (int16x4_t *)MEMORY[0x24BDAC7A8](a1, a2);
  v19 = v16;
  v536[4097] = *MEMORY[0x24BDAC8D0];
  v21 = *(unsigned __int16 *)(v20 + 8);
  v22 = (int16x8_t *)(*(_QWORD *)v20 + 2 * (a11 & 0xFu) * v21);
  if (v21 == 12)
  {
    v23 = 12;
  }
  else if (v22->u16[7] | v22->u16[0])
  {
    v23 = 8;
  }
  else if (v22->u16[6] | v22->u16[1])
  {
    v23 = 6;
  }
  else if (v22->u16[5] | v22->u16[2])
  {
    v23 = 4;
  }
  else
  {
    v23 = 2;
  }
  if (v23 <= 6)
    v24 = 6;
  else
    v24 = v23;
  v25 = v17 + v24 - 1;
  v26 = *(unsigned __int16 *)(v18 + 8);
  _X11 = (uint8x8_t *)((char *)result + -(v26 >> 1) - (int)(((v24 >> 1) - 1) * v13) + 1);
  v28 = *(_QWORD *)v18 + 2 * (a9 & 0xF) * v26;
  v29 = *v22;
  if (v16 == 4)
  {
    v30 = vshr_n_s16(*(int16x4_t *)(v28 + 4), 1uLL);
    *(int16x4_t *)v31.i8 = vdup_lane_s16(v30, 0);
    *(int16x4_t *)v32.i8 = vdup_lane_s16(v30, 1);
    v33 = vdup_lane_s16(v30, 2);
    v34 = vdup_lane_s16(v30, 3);
    v35 = (uint8x8_t *)((char *)_X11 + 2);
    _X14 = v529;
    v37 = vdup_n_s16(0x2002u);
    do
    {
      v38 = (int8x16_t)vmovl_u8(*v35);
      __asm { PRFM            #0, [X14] }
      *_X14 = vshr_n_s16(vadd_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)*(_OWORD *)&vextq_s8(v38, v38, 2uLL), *(int16x4_t *)v32.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v31.i8), (int16x4_t)*(_OWORD *)&vextq_s8(v38, v38, 4uLL), v33), (int16x4_t)*(_OWORD *)&vextq_s8(v38, v38, 6uLL), v34), v37), 2uLL);
      v35 = (uint8x8_t *)((char *)v35 + v13);
      _X14 += 32;
      --v25;
    }
    while (v25);
  }
  else
  {
    v44 = vshrq_n_s16(*(int16x8_t *)v28, 1uLL);
    v45 = v13;
    v46 = 8 * v13;
    v47 = 2 * v13;
    v48 = 3 * v13;
    result = (int16x4_t *)(4 * v13);
    v49 = 5 * v13;
    v31 = vdupq_lane_s16(*(int16x4_t *)v44.i8, 0);
    v32 = vdupq_lane_s16(*(int16x4_t *)v44.i8, 1);
    v50 = vdupq_lane_s16(*(int16x4_t *)v44.i8, 2);
    v51 = vdupq_lane_s16(*(int16x4_t *)v44.i8, 3);
    v52 = vdupq_laneq_s16(v44, 4);
    v53 = vdupq_laneq_s16(v44, 5);
    v54 = vdupq_laneq_s16(v44, 6);
    v55 = vdupq_laneq_s16(v44, 7);
    _X14 = v529;
    do
    {
      __asm { PRFM            #0, [X11] }
      _X20 = (char *)_X11 + v45;
      __asm { PRFM            #0, [X20] }
      _X21 = (char *)_X11 + v47;
      __asm { PRFM            #0, [X21] }
      _X21 = (char *)_X11 + v48;
      __asm { PRFM            #0, [X21] }
      _X21 = (char *)result + (_QWORD)_X11;
      __asm { PRFM            #0, [X21] }
      _X21 = (char *)_X11 + v49;
      __asm { PRFM            #0, [X21] }
      _X21 = (char *)_X11 + 2 * v48;
      __asm { PRFM            #0, [X21] }
      _X21 = (char *)_X11 + v46 - v45;
      __asm { PRFM            #0, [X21] }
      *(uint8x8_t *)v72.i8 = *_X11;
      *(uint8x8_t *)v73.i8 = *(uint8x8_t *)((char *)_X11 + v45);
      v74 = (uint64_t *)((char *)_X11 + v45 + v45);
      v75.i64[0] = *v74;
      v76 = (uint64_t *)((char *)v74 + v45);
      v77.i64[0] = *v76;
      v78 = (uint64_t *)((char *)v76 + v45);
      v79 = *v78;
      v80 = (uint64_t *)((char *)v78 + v45);
      v81 = *v80;
      v82 = (uint64_t *)((char *)v80 + v45);
      v72.i64[1] = v79;
      v73.i64[1] = v81;
      v83 = (int16x8_t)vtrn1q_s8(v72, v73);
      v84 = (int16x8_t)vtrn2q_s8(v72, v73);
      v75.i64[1] = *v82;
      v77.i64[1] = *(uint64_t *)((char *)v82 + v45);
      v85 = (int16x8_t)vtrn1q_s8(v75, v77);
      v86 = (int16x8_t)vtrn2q_s8(v75, v77);
      v87 = (int32x4_t)vtrn1q_s16(v83, v85);
      v88 = (int8x16_t)vtrn2q_s16(v83, v85);
      v89 = (int32x4_t)vtrn1q_s16(v84, v86);
      v90 = (int32x4_t)vtrn2q_s16(v84, v86);
      v91 = (int8x16_t)vuzp1q_s32(v87, v89);
      v92 = (int8x16_t)vuzp2q_s32(v87, v89);
      v93 = (int8x16_t)vuzp1q_s32((int32x4_t)v88, v90);
      v94 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v88.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
      v95 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v91.i8);
      v96 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
      v97 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v93.i8);
      v98 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL));
      v99 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v92.i8);
      v100 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
      v101 = (int16x8_t)vmovl_u8(v94);
      v102 = (uint64_t *)((char *)_X11 + 7);
      __asm
      {
        PRFM            #0, [X14]
        PRFM            #0, [X14,#0x100]
        PRFM            #0, [X14,#0x200]
        PRFM            #0, [X14,#0x300]
        PRFM            #0, [X14,#0x400]
        PRFM            #0, [X14,#0x500]
        PRFM            #0, [X14,#0x600]
        PRFM            #0, [X14,#0x700]
      }
      v111 = v16 + 8;
      v112 = (int64x2_t *)_X14;
      do
      {
        v113.i64[0] = *v102;
        v114 = (uint64_t *)((char *)v102 + v45 + v45);
        v115.i64[0] = *(uint64_t *)((char *)v102 + v45);
        v116.i64[0] = *v114;
        v117.i64[0] = *(uint64_t *)((char *)v114 + v45);
        v118 = (uint64_t *)((char *)v114 + v45 + v45);
        v119 = *v118;
        v120 = *(uint64_t *)((char *)v118 + v45);
        v121 = (uint64_t *)((char *)v118 + v45 + v45);
        v113.i64[1] = v119;
        v115.i64[1] = v120;
        v116.i64[1] = *v121;
        v122 = (int16x8_t)vtrn1q_s8(v113, v115);
        v123 = (int16x8_t)vtrn2q_s8(v113, v115);
        v117.i64[1] = *(uint64_t *)((char *)v121 + v45);
        v124 = (int16x8_t)vtrn1q_s8(v116, v117);
        v125 = (int16x8_t)vtrn2q_s8(v116, v117);
        v126 = (int32x4_t)vtrn1q_s16(v122, v124);
        v127 = (int32x4_t)vtrn2q_s16(v122, v124);
        v128 = (int32x4_t)vtrn1q_s16(v123, v125);
        v129 = (int32x4_t)vtrn2q_s16(v123, v125);
        v130 = (int8x16_t)vuzp1q_s32(v126, v128);
        v131 = (int8x16_t)vuzp2q_s32(v126, v128);
        v132 = (int8x16_t)vuzp1q_s32(v127, v129);
        v133 = (int8x16_t)vuzp2q_s32(v127, v129);
        v134 = (uint8x8_t)vextq_s8(v131, v131, 8uLL).u64[0];
        v126.i64[0] = vextq_s8(v133, v133, 8uLL).u64[0];
        v135 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v130.i8);
        v136 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v53), v101, v54), v99, v52), v98, v51), v97, v50), v96, v32), v95, v31);
        v95 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
        v137 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v52), v101, v53), v99, v51), v98, v50), v97, v32), v96, v31);
        v96 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v132.i8);
        v138 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v51), v101, v52), v99, v50), v98, v32), v97, v31);
        v97 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL));
        v139 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v50), v101, v51), v99, v32), v98, v31);
        v98 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v131.i8);
        v140 = vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v32), v101, v50), v99, v31);
        v99 = (int16x8_t)vmovl_u8(v134);
        v141 = vmulq_s16(v100, v31);
        v100 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v133.i8);
        v142 = vmlaq_s16(v141, v101, v32);
        v143 = vmlaq_s16(vmulq_s16(v32, v135), v101, v31);
        v101 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v126.i8);
        v144 = vdupq_n_s16(0x2002u);
        v145 = vshrq_n_s16(vaddq_s16(vmlaq_s16(v136, v55, v135), v144), 2uLL);
        v146 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(v137, v54, v135), v55, v95), v144), 2uLL);
        v147 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v138, v53, v135), v54, v95), v55, v96), v144), 2uLL);
        v148 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v139, v52, v135), v53, v95), v54, v96), v55, v97), v144), 2uLL);
        v149 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v140, v51, v135), v52, v95), v53, v96), v54, v97), v55, v98), v144), 2uLL);
        v150 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v142, v50, v135), v51, v95), v52, v96), v53, v97), v54, v98), v55, v99), v144), 2uLL);
        v151 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v32, v95), v31, v135), v50, v96), v51, v97), v52, v98);
        v152 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v143, v50, v95), v51, v96), v52, v97), v53, v98), v54, v99), v55, v100), v144), 2uLL);
        v153 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v151, v53, v99), v54, v100), v55, v101), v144), 2uLL);
        v154 = (int32x4_t)vtrn1q_s16(v145, v146);
        v155 = (int32x4_t)vtrn2q_s16(v145, v146);
        v156 = (int32x4_t)vtrn1q_s16(v147, v148);
        v157 = (int32x4_t)vtrn2q_s16(v147, v148);
        v158 = (int32x4_t)vtrn1q_s16(v149, v150);
        v159 = (int32x4_t)vtrn2q_s16(v149, v150);
        v160 = (int32x4_t)vtrn1q_s16(v152, v153);
        v161 = (int32x4_t)vtrn2q_s16(v152, v153);
        v162 = (int64x2_t)vtrn1q_s32(v154, v156);
        v163 = (int64x2_t)vtrn2q_s32(v154, v156);
        v164 = (int64x2_t)vtrn1q_s32(v155, v157);
        v165 = (int64x2_t)vtrn2q_s32(v155, v157);
        v166 = (int64x2_t)vtrn1q_s32(v158, v160);
        v167 = (int64x2_t)vtrn2q_s32(v158, v160);
        v168 = (int64x2_t)vtrn1q_s32(v159, v161);
        v169 = (int64x2_t)vtrn2q_s32(v159, v161);
        *v112 = vzip1q_s64(v162, v166);
        v112[16] = vzip1q_s64(v164, v168);
        v112[32] = vzip1q_s64(v163, v167);
        ++v102;
        v111 -= 8;
        v112[48] = vzip1q_s64(v165, v169);
        v112[64] = vzip2q_s64(v162, v166);
        v112[80] = vzip2q_s64(v164, v168);
        v112[96] = vzip2q_s64(v163, v167);
        v112[112] = vzip2q_s64(v165, v169);
        ++v112;
      }
      while (v111 > 8);
      _X11 = (uint8x8_t *)((char *)_X11 + v46);
      _X14 += 256;
      v170 = v25 - 8;
      v171 = v25 <= 16;
      v25 -= 8;
    }
    while (!v171);
    v172 = vdupq_n_s16(0x2002u);
    do
    {
      v173 = (int8x16_t)vmovl_u8(*_X11);
      __asm { PRFM            #0, [X14] }
      v175 = v16 + 8;
      v176 = (int16x8_t *)_X14;
      v177 = _X11;
      do
      {
        v178 = v177[1];
        ++v177;
        v179 = (int8x16_t)vmovl_u8(v178);
        *v176++ = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)vextq_s8(v173, v179, 2uLL), v32), (int16x8_t)v173, v31), (int16x8_t)vextq_s8(v173, v179, 4uLL), v50), (int16x8_t)vextq_s8(v173, v179, 6uLL), v51), (int16x8_t)vextq_s8(v173, v179, 8uLL), v52), (int16x8_t)vextq_s8(v173, v179, 0xAuLL), v53), (int16x8_t)vextq_s8(v173, v179, 0xCuLL), v54), (int16x8_t)vextq_s8(v173, v179, 0xEuLL),
                        v55),
                      v172),
                    2uLL);
        v175 -= 8;
        v173 = v179;
      }
      while (v175 > 8);
      _X11 = (uint8x8_t *)((char *)_X11 + v45);
      _X14 += 32;
      --v170;
    }
    while (v170);
  }
  v180 = *(_DWORD *)a12;
  if (v23 > 6)
  {
    if (v180)
    {
      if (*(_DWORD *)(a12 + 36))
      {
        return dist_wtd_convolve_2d_vert_8tap_dist_wtd_avg_neon(v529, v14, v15, a12, v17, v16, v29, *(uint16x4_t *)v31.i8, *(uint16x4_t *)v32.i8);
      }
      else
      {
        v210 = *(uint16x4_t **)(a12 + 8);
        v211 = *(int *)(a12 + 16);
        if (v19 == 4)
        {
          v212 = v529[0];
          v213 = v530;
          v214 = v531;
          v215 = v532;
          v216 = (int16x4_t *)v536;
          v217 = v533;
          v218 = (int16x4_t)v534[0];
          v219.i64[0] = 0xE800E800E800E800;
          v219.i64[1] = 0xE800E800E800E800;
          v220 = v535;
          do
          {
            v221.i64[0] = 0x8000000080000;
            v221.i64[1] = 0x8000000080000;
            v222 = vmlal_lane_s16(v221, v212, *(int16x4_t *)v29.i8, 0);
            v212 = v217;
            v223 = vmlal_lane_s16(v222, v213, *(int16x4_t *)v29.i8, 1);
            v224.i64[0] = 0x8000000080000;
            v224.i64[1] = 0x8000000080000;
            v225 = vmlal_lane_s16(v224, v213, *(int16x4_t *)v29.i8, 0);
            v213 = v218;
            v226.i64[0] = 0x8000000080000;
            v226.i64[1] = 0x8000000080000;
            v227 = vmlal_lane_s16(vmlal_lane_s16(v223, v214, *(int16x4_t *)v29.i8, 2), v215, *(int16x4_t *)v29.i8, 3);
            v228 = vmlal_lane_s16(vmlal_lane_s16(v225, v214, *(int16x4_t *)v29.i8, 1), v215, *(int16x4_t *)v29.i8, 2);
            v229 = vmlal_lane_s16(vmlal_lane_s16(v226, v214, *(int16x4_t *)v29.i8, 0), v215, *(int16x4_t *)v29.i8, 1);
            v230.i64[0] = 0x8000000080000;
            v230.i64[1] = 0x8000000080000;
            v231 = vmlal_lane_s16(v230, v215, *(int16x4_t *)v29.i8, 0);
            v215 = *v216;
            v232 = vmlal_laneq_s16(v227, v217, v29, 4);
            v233 = vmlal_lane_s16(v228, v217, *(int16x4_t *)v29.i8, 3);
            v234 = vmlal_lane_s16(v229, v217, *(int16x4_t *)v29.i8, 2);
            v235 = vmlal_lane_s16(v231, v217, *(int16x4_t *)v29.i8, 1);
            v217 = v216[32];
            v236 = vmlal_laneq_s16(v232, v218, v29, 5);
            v237 = vmlal_laneq_s16(v233, v218, v29, 4);
            v238 = vmlal_lane_s16(v234, v218, *(int16x4_t *)v29.i8, 3);
            v239 = vmlal_lane_s16(v235, v218, *(int16x4_t *)v29.i8, 2);
            v218 = v216[64];
            v240 = (int16x8_t)vmlal_laneq_s16(v236, v220, v29, 6);
            v241 = vmlal_laneq_s16(v237, v220, v29, 5);
            v242 = (int16x8_t)vmlal_laneq_s16(v238, v220, v29, 4);
            v243 = vmlal_lane_s16(v239, v220, *(int16x4_t *)v29.i8, 3);
            v214 = v220;
            v220 = v216[96];
            v244 = (uint16x4_t *)((char *)v210 + 2 * v211 + 2 * v211);
            *(uint16x4_t *)v240.i8 = vhadd_u16(*v210, (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16((int32x4_t)v240, *v216, v29, 7), 7uLL));
            *(uint16x4_t *)v242.i8 = vhadd_u16(*v244, (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16((int32x4_t)v242, *v216, v29, 5), v217, v29, 6), v218, v29, 7), 7uLL));
            v240.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)((char *)v210 + 2 * v211), (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v241, *v216, v29, 6), v217, v29, 7), 7uLL));
            v242.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)((char *)v244 + 2 * v211), (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v243, *v216, v29, 4), v217, v29, 5), v218, v29, 6), v220, v29, 7), 7uLL));
            *(int8x8_t *)v240.i8 = vqrshrun_n_s16(vaddq_s16(v240, v219), 4uLL);
            *v14 = v240.i32[0];
            *(_DWORD *)((char *)v14 + v15) = v240.i32[1];
            *(int8x8_t *)v240.i8 = vqrshrun_n_s16(vaddq_s16(v242, v219), 4uLL);
            *(_DWORD *)((char *)v14 + 2 * v15) = v240.i32[0];
            *(_DWORD *)((char *)v14 + 2 * v15 + v15) = v240.i32[1];
            v14 += v15;
            v216 += 128;
            v210 += (int)v211;
            v17 -= 4;
          }
          while (v17);
        }
        else
        {
          v367 = 0;
          v368 = 4 * v15;
          v369 = v529;
          v370 = 8 * v211;
          v371 = (char *)v210 + 6 * (int)v211;
          v372 = (char *)v14 + 3 * v15;
          v373 = (char *)v14 + 2 * v15;
          result = (int16x4_t *)((char *)v14 + v15);
          v374.i64[0] = 0xE800E800E800E800;
          v374.i64[1] = 0xE800E800E800E800;
          v375 = (char *)v210 + 4 * v211;
          v376 = (char *)v210 + 2 * v211;
          do
          {
            v377 = 0;
            v378 = *(int16x8_t *)v369->i8;
            v379 = *(int16x8_t *)v369[32].i8;
            v380 = *(int16x8_t *)v369[64].i8;
            v381 = *(int16x8_t *)v369[96].i8;
            v382 = v210;
            v383 = *(int16x8_t *)v369[128].i8;
            v384 = v376;
            v385 = v375;
            v386 = *(int16x8_t *)v369[160].i8;
            v387 = v371;
            v388 = v536;
            v389 = v17;
            v390 = *(int16x8_t *)v369[192].i8;
            do
            {
              v391.i64[0] = 0x8000000080000;
              v391.i64[1] = 0x8000000080000;
              v392 = vmlal_lane_s16(v391, *(int16x4_t *)v378.i8, *(int16x4_t *)v29.i8, 0);
              v393.i64[0] = 0x8000000080000;
              v393.i64[1] = 0x8000000080000;
              v394 = vmlal_high_lane_s16(v393, v378, *(int16x4_t *)v29.i8, 0);
              v378 = v383;
              v395.i64[0] = 0x8000000080000;
              v395.i64[1] = 0x8000000080000;
              v396.i64[0] = 0x8000000080000;
              v396.i64[1] = 0x8000000080000;
              v397.i64[0] = 0x8000000080000;
              v397.i64[1] = 0x8000000080000;
              v398.i64[0] = 0x8000000080000;
              v398.i64[1] = 0x8000000080000;
              v399 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v395, *(int16x4_t *)v379.i8, *(int16x4_t *)v29.i8, 0), *(int16x4_t *)v380.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v381.i8, *(int16x4_t *)v29.i8, 2);
              v400 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v396, v379, *(int16x4_t *)v29.i8, 0), v380, *(int16x4_t *)v29.i8, 1), v381, *(int16x4_t *)v29.i8, 2);
              v401 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v392, *(int16x4_t *)v379.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v380.i8, *(int16x4_t *)v29.i8, 2), *(int16x4_t *)v381.i8, *(int16x4_t *)v29.i8, 3);
              v402 = vmlal_lane_s16(vmlal_lane_s16(v397, *(int16x4_t *)v380.i8, *(int16x4_t *)v29.i8, 0), *(int16x4_t *)v381.i8, *(int16x4_t *)v29.i8, 1);
              v403 = vmlal_high_lane_s16(vmlal_high_lane_s16(v398, v380, *(int16x4_t *)v29.i8, 0), v381, *(int16x4_t *)v29.i8, 1);
              v404.i64[0] = 0x8000000080000;
              v404.i64[1] = 0x8000000080000;
              v405 = vmlal_lane_s16(v404, *(int16x4_t *)v381.i8, *(int16x4_t *)v29.i8, 0);
              v406.i64[0] = 0x8000000080000;
              v406.i64[1] = 0x8000000080000;
              v407 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v394, v379, *(int16x4_t *)v29.i8, 1), v380, *(int16x4_t *)v29.i8, 2), v381, *(int16x4_t *)v29.i8, 3);
              v408 = vmlal_high_lane_s16(v406, v381, *(int16x4_t *)v29.i8, 0);
              v381 = *(int16x8_t *)&v388[v367];
              v409 = vmlal_laneq_s16(v401, *(int16x4_t *)v383.i8, v29, 4);
              v410 = vmlal_lane_s16(v399, *(int16x4_t *)v383.i8, *(int16x4_t *)v29.i8, 3);
              v411 = vmlal_high_lane_s16(v400, v383, *(int16x4_t *)v29.i8, 3);
              v412 = vmlal_high_laneq_s16(v407, v383, v29, 4);
              v413 = vmlal_lane_s16(v402, *(int16x4_t *)v383.i8, *(int16x4_t *)v29.i8, 2);
              v414 = vmlal_high_lane_s16(v403, v383, *(int16x4_t *)v29.i8, 2);
              v415 = vmlal_lane_s16(v405, *(int16x4_t *)v383.i8, *(int16x4_t *)v29.i8, 1);
              v416 = vmlal_high_lane_s16(v408, v383, *(int16x4_t *)v29.i8, 1);
              v383 = *(int16x8_t *)&v388[v367 + 32];
              v417 = vmlal_laneq_s16(v409, *(int16x4_t *)v386.i8, v29, 5);
              v418 = vmlal_laneq_s16(v410, *(int16x4_t *)v386.i8, v29, 4);
              v419 = vmlal_high_laneq_s16(v411, v386, v29, 4);
              v420 = vmlal_lane_s16(v413, *(int16x4_t *)v386.i8, *(int16x4_t *)v29.i8, 3);
              v421 = vmlal_high_lane_s16(v414, v386, *(int16x4_t *)v29.i8, 3);
              v422 = vmlal_high_laneq_s16(v412, v386, v29, 5);
              v423 = vmlal_lane_s16(v415, *(int16x4_t *)v386.i8, *(int16x4_t *)v29.i8, 2);
              v424 = vmlal_high_lane_s16(v416, v386, *(int16x4_t *)v29.i8, 2);
              v379 = v386;
              v386 = *(int16x8_t *)&v388[v367 + 64];
              v425 = vmlal_laneq_s16(v418, *(int16x4_t *)v390.i8, v29, 5);
              v426 = vmlal_laneq_s16(v417, *(int16x4_t *)v390.i8, v29, 6);
              v427 = vmlal_high_laneq_s16(v419, v390, v29, 5);
              v428 = vmlal_laneq_s16(v420, *(int16x4_t *)v390.i8, v29, 4);
              v429 = vmlal_high_laneq_s16(v421, v390, v29, 4);
              v430 = vmlal_lane_s16(v423, *(int16x4_t *)v390.i8, *(int16x4_t *)v29.i8, 3);
              v431 = vmlal_high_lane_s16(v424, v390, *(int16x4_t *)v29.i8, 3);
              v432 = vmlal_high_laneq_s16(v422, v390, v29, 6);
              v380 = v390;
              v390 = *(int16x8_t *)&v388[v367 + 96];
              v433 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)v382[v367].i8, (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(v426, *(int16x4_t *)v381.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(v432, v381, v29, 7), 7uLL));
              v434 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)&v384[v367 * 8], (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v425, *(int16x4_t *)v381.i8, v29, 6), *(int16x4_t *)v383.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(v427, v381, v29, 6), v383, v29, 7), 7uLL));
              v435 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)&v387[v367 * 8], (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v430, *(int16x4_t *)v381.i8, v29, 4), *(int16x4_t *)v383.i8, v29, 5), *(int16x4_t *)v386.i8, v29, 6), *(int16x4_t *)v390.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(
                                                    vmlal_high_laneq_s16(vmlal_high_laneq_s16(v431, v381, v29, 4), v383, v29, 5), v386, v29, 6), v390, v29, 7), 7uLL));
              *(int8x8_t *)v425.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)&v385[v367 * 8], (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v428, *(int16x4_t *)v381.i8, v29, 5), *(int16x4_t *)v383.i8, v29, 6), *(int16x4_t *)v386.i8, v29, 7), 7uLL),
                                                                    vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v429, v381, v29, 5), v383, v29, 6), v386, v29, 7), 7uLL)), v374), 4uLL);
              *(int8x8_t *)((char *)v14 + v377) = vqrshrun_n_s16(vaddq_s16(v433, v374), 4uLL);
              *(int8x8_t *)((char *)result + v377) = vqrshrun_n_s16(vaddq_s16(v434, v374), 4uLL);
              *(_QWORD *)&v373[v377] = v425.i64[0];
              v388 += 128;
              v387 += v370;
              *(int8x8_t *)&v372[v377] = vqrshrun_n_s16(vaddq_s16(v435, v374), 4uLL);
              v385 += v370;
              v384 += v370;
              v382 = (uint16x4_t *)((char *)v382 + v370);
              v377 += v368;
              v389 -= 4;
            }
            while (v389);
            v369 += 2;
            v14 += 2;
            v367 += 2;
            v372 += 8;
            v373 += 8;
            ++result;
            v19 -= 8;
          }
          while (v19);
        }
      }
    }
    else
    {
      v272 = *(int16x4_t **)(a12 + 8);
      v273 = *(int *)(a12 + 16);
      if (v16 == 4)
      {
        v274 = v529[0];
        v275 = v530;
        v276 = v531;
        v277 = v532;
        v278 = (int16x4_t *)v536;
        v279 = v533;
        v280 = (int16x4_t)v534[0];
        v281 = v535;
        do
        {
          v282.i64[0] = 0x8000000080000;
          v282.i64[1] = 0x8000000080000;
          v283 = vmlal_lane_s16(v282, v274, *(int16x4_t *)v29.i8, 0);
          v274 = v279;
          v284 = vmlal_lane_s16(v283, v275, *(int16x4_t *)v29.i8, 1);
          v285.i64[0] = 0x8000000080000;
          v285.i64[1] = 0x8000000080000;
          v286 = vmlal_lane_s16(v285, v275, *(int16x4_t *)v29.i8, 0);
          v275 = v280;
          v287.i64[0] = 0x8000000080000;
          v287.i64[1] = 0x8000000080000;
          v288 = vmlal_lane_s16(vmlal_lane_s16(v284, v276, *(int16x4_t *)v29.i8, 2), v277, *(int16x4_t *)v29.i8, 3);
          v289 = vmlal_lane_s16(vmlal_lane_s16(v286, v276, *(int16x4_t *)v29.i8, 1), v277, *(int16x4_t *)v29.i8, 2);
          v290 = vmlal_lane_s16(vmlal_lane_s16(v287, v276, *(int16x4_t *)v29.i8, 0), v277, *(int16x4_t *)v29.i8, 1);
          v291.i64[0] = 0x8000000080000;
          v291.i64[1] = 0x8000000080000;
          v292 = vmlal_lane_s16(v291, v277, *(int16x4_t *)v29.i8, 0);
          v277 = *v278;
          v293 = vmlal_laneq_s16(v288, v279, v29, 4);
          v294 = vmlal_lane_s16(v289, v279, *(int16x4_t *)v29.i8, 3);
          v295 = vmlal_lane_s16(v290, v279, *(int16x4_t *)v29.i8, 2);
          v296 = vmlal_lane_s16(v292, v279, *(int16x4_t *)v29.i8, 1);
          v279 = v278[32];
          v297 = vmlal_laneq_s16(v293, v280, v29, 5);
          v298 = vmlal_laneq_s16(v294, v280, v29, 4);
          v299 = vmlal_lane_s16(v295, v280, *(int16x4_t *)v29.i8, 3);
          v300 = vmlal_lane_s16(v296, v280, *(int16x4_t *)v29.i8, 2);
          v280 = v278[64];
          v301 = vmlal_laneq_s16(v297, v281, v29, 6);
          v302 = vmlal_laneq_s16(v298, v281, v29, 5);
          v303 = vmlal_laneq_s16(v299, v281, v29, 4);
          v304 = vmlal_lane_s16(v300, v281, *(int16x4_t *)v29.i8, 3);
          v276 = v281;
          v281 = v278[96];
          *(int16x4_t *)v302.i8 = vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v302, *v278, v29, 6), v279, v29, 7), 7uLL);
          *(int16x4_t *)v303.i8 = vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v303, *v278, v29, 5), v279, v29, 6), v280, v29, 7), 7uLL);
          *(int16x4_t *)v304.i8 = vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v304, *v278, v29, 4), v279, v29, 5), v280, v29, 6), v281, v29, 7), 7uLL);
          *v272 = vqrshrun_n_s32(vmlal_laneq_s16(v301, *v278, v29, 7), 7uLL);
          *(int16x4_t *)((char *)v272 + 2 * v273) = *(int16x4_t *)v302.i8;
          *(int16x4_t *)((char *)v272 + 4 * v273) = *(int16x4_t *)v303.i8;
          *(int16x4_t *)((char *)v272 + 6 * v273) = *(int16x4_t *)v304.i8;
          v272 += (int)v273;
          v278 += 128;
          v17 -= 4;
        }
        while (v17);
      }
      else
      {
        v478 = 8 * v273;
        v479 = (char *)v272 + 6 * (int)v273;
        v480 = (char *)v272 + 4 * v273;
        v481 = v529;
        v482 = (char *)v272 + 2 * v273;
        do
        {
          v483 = 0;
          v484 = *(int16x8_t *)v481->i8;
          v485 = *(int16x8_t *)v481[32].i8;
          v486 = *(int16x8_t *)v481[64].i8;
          v487 = *(int16x8_t *)v481[96].i8;
          v488 = *(int16x8_t *)v481[128].i8;
          v489 = *(int16x8_t *)v481[160].i8;
          v490 = 224;
          v491 = v17;
          v492 = *(int16x8_t *)v481[192].i8;
          do
          {
            result = &v481[v490];
            v493.i64[0] = 0x8000000080000;
            v493.i64[1] = 0x8000000080000;
            v494 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v493, *(int16x4_t *)v484.i8, *(int16x4_t *)v29.i8, 0), *(int16x4_t *)v485.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v486.i8, *(int16x4_t *)v29.i8, 2), *(int16x4_t *)v487.i8, *(int16x4_t *)v29.i8, 3);
            v495.i64[0] = 0x8000000080000;
            v495.i64[1] = 0x8000000080000;
            v496 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v495, v484, *(int16x4_t *)v29.i8, 0), v485, *(int16x4_t *)v29.i8, 1), v486, *(int16x4_t *)v29.i8, 2), v487, *(int16x4_t *)v29.i8, 3);
            v497.i64[0] = 0x8000000080000;
            v497.i64[1] = 0x8000000080000;
            v498 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v497, *(int16x4_t *)v485.i8, *(int16x4_t *)v29.i8, 0), *(int16x4_t *)v486.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v487.i8, *(int16x4_t *)v29.i8, 2);
            v499.i64[0] = 0x8000000080000;
            v499.i64[1] = 0x8000000080000;
            v500 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v499, v485, *(int16x4_t *)v29.i8, 0), v486, *(int16x4_t *)v29.i8, 1), v487, *(int16x4_t *)v29.i8, 2);
            v501.i64[0] = 0x8000000080000;
            v501.i64[1] = 0x8000000080000;
            v502 = vmlal_lane_s16(vmlal_lane_s16(v501, *(int16x4_t *)v486.i8, *(int16x4_t *)v29.i8, 0), *(int16x4_t *)v487.i8, *(int16x4_t *)v29.i8, 1);
            v503.i64[0] = 0x8000000080000;
            v503.i64[1] = 0x8000000080000;
            v504 = vmlal_high_lane_s16(vmlal_high_lane_s16(v503, v486, *(int16x4_t *)v29.i8, 0), v487, *(int16x4_t *)v29.i8, 1);
            v505.i64[0] = 0x8000000080000;
            v505.i64[1] = 0x8000000080000;
            v506 = vmlal_lane_s16(v505, *(int16x4_t *)v487.i8, *(int16x4_t *)v29.i8, 0);
            v507.i64[0] = 0x8000000080000;
            v507.i64[1] = 0x8000000080000;
            v508 = vmlal_high_lane_s16(v507, v487, *(int16x4_t *)v29.i8, 0);
            v487 = *(int16x8_t *)v481[v490].i8;
            v509 = vmlal_laneq_s16(v494, *(int16x4_t *)v488.i8, v29, 4);
            v510 = vmlal_high_laneq_s16(v496, v488, v29, 4);
            v511 = vmlal_lane_s16(v498, *(int16x4_t *)v488.i8, *(int16x4_t *)v29.i8, 3);
            v512 = vmlal_high_lane_s16(v500, v488, *(int16x4_t *)v29.i8, 3);
            v513 = vmlal_lane_s16(v502, *(int16x4_t *)v488.i8, *(int16x4_t *)v29.i8, 2);
            v514 = vmlal_high_lane_s16(v504, v488, *(int16x4_t *)v29.i8, 2);
            v515 = vmlal_lane_s16(v506, *(int16x4_t *)v488.i8, *(int16x4_t *)v29.i8, 1);
            v516 = vmlal_high_lane_s16(v508, v488, *(int16x4_t *)v29.i8, 1);
            v484 = v488;
            v488 = *(int16x8_t *)v481[v490 + 32].i8;
            v517 = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v509, *(int16x4_t *)v489.i8, v29, 5), *(int16x4_t *)v492.i8, v29, 6), *(int16x4_t *)v487.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v510, v489, v29, 5), v492, v29, 6), v487, v29, 7), 7uLL);
            v518 = vmlal_laneq_s16(v511, *(int16x4_t *)v489.i8, v29, 4);
            v519 = vmlal_high_laneq_s16(v512, v489, v29, 4);
            v520 = vmlal_lane_s16(v513, *(int16x4_t *)v489.i8, *(int16x4_t *)v29.i8, 3);
            v521 = vmlal_high_lane_s16(v514, v489, *(int16x4_t *)v29.i8, 3);
            v522 = vmlal_lane_s16(v515, *(int16x4_t *)v489.i8, *(int16x4_t *)v29.i8, 2);
            v523 = vmlal_high_lane_s16(v516, v489, *(int16x4_t *)v29.i8, 2);
            v485 = v489;
            v489 = *(int16x8_t *)v481[v490 + 64].i8;
            v524 = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v518, *(int16x4_t *)v492.i8, v29, 5), *(int16x4_t *)v487.i8, v29, 6), *(int16x4_t *)v488.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v519, v492, v29, 5), v487, v29, 6), v488, v29, 7), 7uLL);
            v525 = vmlal_laneq_s16(v520, *(int16x4_t *)v492.i8, v29, 4);
            v526 = vmlal_high_laneq_s16(v521, v492, v29, 4);
            v527 = vmlal_lane_s16(v522, *(int16x4_t *)v492.i8, *(int16x4_t *)v29.i8, 3);
            v528 = vmlal_high_lane_s16(v523, v492, *(int16x4_t *)v29.i8, 3);
            v486 = v492;
            v492 = *(int16x8_t *)v481[v490 + 96].i8;
            *(int16x8_t *)&v272->i8[v483] = v517;
            *(int16x8_t *)&v482[v483] = v524;
            *(int16x8_t *)&v480[v483] = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v525, *(int16x4_t *)v487.i8, v29, 5), *(int16x4_t *)v488.i8, v29, 6), *(int16x4_t *)v489.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v526, v487, v29, 5), v488, v29, 6), v489, v29, 7), 7uLL);
            *(int16x8_t *)&v479[v483] = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v527, *(int16x4_t *)v487.i8, v29, 4), *(int16x4_t *)v488.i8, v29, 5), *(int16x4_t *)v489.i8, v29, 6), *(int16x4_t *)v492.i8, v29, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v528, v487, v29, 4),
                                                v488,
                                                v29,
                                                5),
                                              v489,
                                              v29,
                                              6),
                                            v492,
                                            v29,
                                            7),
                                          7uLL);
            v490 += 128;
            v483 += v478;
            v491 -= 4;
          }
          while (v491);
          v481 += 2;
          v272 += 2;
          v479 += 16;
          v480 += 16;
          v482 += 16;
          v19 -= 8;
        }
        while (v19);
      }
    }
  }
  else if (v180)
  {
    if (*(_DWORD *)(a12 + 36))
    {
      return dist_wtd_convolve_2d_vert_6tap_dist_wtd_avg_neon(v529, v14, v15, a12, v17, v16, v29, *(uint16x4_t *)v31.i8, *(uint16x4_t *)v32.i8);
    }
    else
    {
      v181 = *(uint16x4_t **)(a12 + 8);
      v182 = *(int *)(a12 + 16);
      if (v19 == 4)
      {
        v183 = v529[0];
        v184 = v530;
        v185 = v531;
        v186 = v532;
        v187 = (int16x4_t *)v534;
        v188 = v533;
        v189.i64[0] = 0xE800E800E800E800;
        v189.i64[1] = 0xE800E800E800E800;
        do
        {
          v190.i64[0] = 0x8000000080000;
          v190.i64[1] = 0x8000000080000;
          v191 = vmlal_lane_s16(v190, v183, *(int16x4_t *)v29.i8, 1);
          v183 = v188;
          v192 = vmlal_lane_s16(v191, v184, *(int16x4_t *)v29.i8, 2);
          v193.i64[0] = 0x8000000080000;
          v193.i64[1] = 0x8000000080000;
          v194 = vmlal_lane_s16(v193, v184, *(int16x4_t *)v29.i8, 1);
          v184 = *v187;
          v195 = vmlal_lane_s16(v192, v185, *(int16x4_t *)v29.i8, 3);
          v196 = vmlal_lane_s16(v194, v185, *(int16x4_t *)v29.i8, 2);
          v197.i64[0] = 0x8000000080000;
          v197.i64[1] = 0x8000000080000;
          v198 = vmlal_lane_s16(v197, v185, *(int16x4_t *)v29.i8, 1);
          v185 = v187[32];
          v199 = vmlal_laneq_s16(v195, v186, v29, 4);
          v200 = vmlal_lane_s16(v196, v186, *(int16x4_t *)v29.i8, 3);
          v201 = vmlal_lane_s16(v198, v186, *(int16x4_t *)v29.i8, 2);
          v202.i64[0] = 0x8000000080000;
          v202.i64[1] = 0x8000000080000;
          v203 = vmlal_lane_s16(v202, v186, *(int16x4_t *)v29.i8, 1);
          v186 = v187[64];
          v204 = (int16x8_t)vmlal_laneq_s16(v199, v188, v29, 5);
          v205 = vmlal_laneq_s16(v200, v188, v29, 4);
          v206 = (int16x8_t)vmlal_lane_s16(v201, v188, *(int16x4_t *)v29.i8, 3);
          v207 = vmlal_lane_s16(v203, v188, *(int16x4_t *)v29.i8, 2);
          v188 = v187[96];
          v208 = (uint16x4_t *)((char *)v181 + 2 * v182 + 2 * v182);
          *(uint16x4_t *)v204.i8 = vhadd_u16(*v181, (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16((int32x4_t)v204, *v187, v29, 6), 7uLL));
          *(uint16x4_t *)v206.i8 = vhadd_u16(*v208, (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16((int32x4_t)v206, *v187, v29, 4), v185, v29, 5), v186, v29, 6), 7uLL));
          v204.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)((char *)v181 + 2 * v182), (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v205, *v187, v29, 5), v185, v29, 6), 7uLL));
          v206.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)((char *)v208 + 2 * v182), (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v207, *v187, *(int16x4_t *)v29.i8, 3), v185, v29, 4), v186, v29, 5), v188, v29, 6), 7uLL));
          *(int8x8_t *)v204.i8 = vqrshrun_n_s16(vaddq_s16(v204, v189), 4uLL);
          *v14 = v204.i32[0];
          *(_DWORD *)((char *)v14 + v15) = v204.i32[1];
          *(int8x8_t *)v204.i8 = vqrshrun_n_s16(vaddq_s16(v206, v189), 4uLL);
          *(_DWORD *)((char *)v14 + 2 * v15) = v204.i32[0];
          v209 = (_DWORD *)((char *)v14 + 2 * v15 + v15);
          v14 += v15;
          v187 += 128;
          v181 += (int)v182;
          *v209 = v204.i32[1];
          v17 -= 4;
        }
        while (v17);
      }
      else
      {
        v305 = 0;
        v306 = 4 * v15;
        v307 = v529;
        v308 = 8 * v182;
        v309 = (char *)v181 + 6 * (int)v182;
        v310 = (char *)v14 + 3 * v15;
        v311.i64[0] = 0xE800E800E800E800;
        v311.i64[1] = 0xE800E800E800E800;
        v312 = (char *)v14 + 2 * v15;
        result = (int16x4_t *)((char *)v14 + v15);
        v313 = (char *)v181 + 4 * v182;
        v314 = (char *)v181 + 2 * v182;
        do
        {
          v315 = 0;
          v316 = *(int16x8_t *)v307->i8;
          v317 = *(int16x8_t *)v307[32].i8;
          v318 = v181;
          v319 = *(int16x8_t *)v307[64].i8;
          v320 = v314;
          v321 = v313;
          v322 = *(int16x8_t *)v307[96].i8;
          v323 = v309;
          v324 = v534;
          v325 = v17;
          v326 = *(int16x8_t *)v307[128].i8;
          do
          {
            v327.i64[0] = 0x8000000080000;
            v327.i64[1] = 0x8000000080000;
            v328 = vmlal_lane_s16(v327, *(int16x4_t *)v316.i8, *(int16x4_t *)v29.i8, 1);
            v329.i64[0] = 0x8000000080000;
            v329.i64[1] = 0x8000000080000;
            v330 = vmlal_high_lane_s16(v329, v316, *(int16x4_t *)v29.i8, 1);
            v316 = v326;
            v331 = vmlal_lane_s16(v328, *(int16x4_t *)v317.i8, *(int16x4_t *)v29.i8, 2);
            v332 = vmlal_high_lane_s16(v330, v317, *(int16x4_t *)v29.i8, 2);
            v333.i64[0] = 0x8000000080000;
            v333.i64[1] = 0x8000000080000;
            v334 = vmlal_lane_s16(v333, *(int16x4_t *)v317.i8, *(int16x4_t *)v29.i8, 1);
            v335.i64[0] = 0x8000000080000;
            v335.i64[1] = 0x8000000080000;
            v336 = vmlal_high_lane_s16(v335, v317, *(int16x4_t *)v29.i8, 1);
            v317 = *(int16x8_t *)&v324[v305];
            v337 = vmlal_lane_s16(v331, *(int16x4_t *)v319.i8, *(int16x4_t *)v29.i8, 3);
            v338 = vmlal_lane_s16(v334, *(int16x4_t *)v319.i8, *(int16x4_t *)v29.i8, 2);
            v339 = vmlal_high_lane_s16(v336, v319, *(int16x4_t *)v29.i8, 2);
            v340.i64[0] = 0x8000000080000;
            v340.i64[1] = 0x8000000080000;
            v341 = vmlal_lane_s16(v340, *(int16x4_t *)v319.i8, *(int16x4_t *)v29.i8, 1);
            v342 = vmlal_high_lane_s16(v332, v319, *(int16x4_t *)v29.i8, 3);
            v343.i64[0] = 0x8000000080000;
            v343.i64[1] = 0x8000000080000;
            v344 = vmlal_high_lane_s16(v343, v319, *(int16x4_t *)v29.i8, 1);
            v319 = *(int16x8_t *)&v324[v305 + 32];
            v345 = vmlal_lane_s16(v338, *(int16x4_t *)v322.i8, *(int16x4_t *)v29.i8, 3);
            v346 = vmlal_high_lane_s16(v339, v322, *(int16x4_t *)v29.i8, 3);
            v347 = vmlal_laneq_s16(v337, *(int16x4_t *)v322.i8, v29, 4);
            v348 = vmlal_lane_s16(v341, *(int16x4_t *)v322.i8, *(int16x4_t *)v29.i8, 2);
            v349 = vmlal_high_lane_s16(v344, v322, *(int16x4_t *)v29.i8, 2);
            v350.i64[0] = 0x8000000080000;
            v350.i64[1] = 0x8000000080000;
            v351 = vmlal_lane_s16(v350, *(int16x4_t *)v322.i8, *(int16x4_t *)v29.i8, 1);
            v352.i64[0] = 0x8000000080000;
            v352.i64[1] = 0x8000000080000;
            v353 = vmlal_high_laneq_s16(v342, v322, v29, 4);
            v354 = vmlal_high_lane_s16(v352, v322, *(int16x4_t *)v29.i8, 1);
            v322 = *(int16x8_t *)&v324[v305 + 64];
            v355 = vmlal_laneq_s16(v347, *(int16x4_t *)v326.i8, v29, 5);
            v356 = vmlal_laneq_s16(v345, *(int16x4_t *)v326.i8, v29, 4);
            v357 = vmlal_high_laneq_s16(v346, v326, v29, 4);
            v358 = vmlal_high_laneq_s16(v353, v326, v29, 5);
            v359 = vmlal_lane_s16(v348, *(int16x4_t *)v326.i8, *(int16x4_t *)v29.i8, 3);
            v360 = vmlal_high_lane_s16(v349, v326, *(int16x4_t *)v29.i8, 3);
            v361 = vmlal_lane_s16(v351, *(int16x4_t *)v326.i8, *(int16x4_t *)v29.i8, 2);
            v362 = vmlal_high_lane_s16(v354, v326, *(int16x4_t *)v29.i8, 2);
            v326 = *(int16x8_t *)&v324[v305 + 96];
            v363 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)v318[v305].i8, (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(v355, *(int16x4_t *)v317.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(v358, v317, v29, 6), 7uLL));
            v364 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)&v320[v305 * 8], (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v356, *(int16x4_t *)v317.i8, v29, 5), *(int16x4_t *)v319.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(v357, v317, v29, 5), v319, v29, 6), 7uLL));
            v365 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)&v321[v305 * 8], (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v359, *(int16x4_t *)v317.i8, v29, 4), *(int16x4_t *)v319.i8, v29, 5), *(int16x4_t *)v322.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v360, v317, v29, 4), v319, v29,
                                                    5),
                                                  v322,
                                                  v29,
                                                  6),
                                                7uLL)),
                     v311);
            v366 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)&v323[v305 * 8], (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v361, *(int16x4_t *)v317.i8, *(int16x4_t *)v29.i8, 3), *(int16x4_t *)v319.i8, v29, 4), *(int16x4_t *)v322.i8, v29, 5), *(int16x4_t *)v326.i8,
                                                    v29,
                                                    6),
                                                  7uLL),
                                                vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v362, v317, *(int16x4_t *)v29.i8, 3), v319, v29, 4), v322, v29, 5), v326, v29, 6), 7uLL)), v311);
            *(int8x8_t *)((char *)v14 + v315) = vqrshrun_n_s16(vaddq_s16(v363, v311), 4uLL);
            *(int8x8_t *)((char *)result + v315) = vqrshrun_n_s16(vaddq_s16(v364, v311), 4uLL);
            v324 += 128;
            *(int8x8_t *)&v312[v315] = vqrshrun_n_s16(v365, 4uLL);
            v323 += v308;
            v321 += v308;
            v320 += v308;
            *(int8x8_t *)&v310[v315] = vqrshrun_n_s16(v366, 4uLL);
            v318 = (uint16x4_t *)((char *)v318 + v308);
            v315 += v306;
            v325 -= 4;
          }
          while (v325);
          v307 += 2;
          v14 += 2;
          v305 += 2;
          v310 += 8;
          v312 += 8;
          ++result;
          v19 -= 8;
        }
        while (v19);
      }
    }
  }
  else
  {
    v245 = *(int16x4_t **)(a12 + 8);
    v246 = *(int *)(a12 + 16);
    if (v16 == 4)
    {
      v247 = v529[0];
      v248 = v530;
      v249 = v531;
      v250 = v532;
      v251 = v533;
      v252 = (int16x4_t *)v534;
      do
      {
        v253.i64[0] = 0x8000000080000;
        v253.i64[1] = 0x8000000080000;
        v254 = vmlal_lane_s16(v253, v247, *(int16x4_t *)v29.i8, 1);
        v247 = v251;
        v255 = vmlal_lane_s16(v254, v248, *(int16x4_t *)v29.i8, 2);
        v256.i64[0] = 0x8000000080000;
        v256.i64[1] = 0x8000000080000;
        v257 = vmlal_lane_s16(v256, v248, *(int16x4_t *)v29.i8, 1);
        v248 = *v252;
        v258 = vmlal_lane_s16(v255, v249, *(int16x4_t *)v29.i8, 3);
        v259 = vmlal_lane_s16(v257, v249, *(int16x4_t *)v29.i8, 2);
        v260.i64[0] = 0x8000000080000;
        v260.i64[1] = 0x8000000080000;
        v261 = vmlal_lane_s16(v260, v249, *(int16x4_t *)v29.i8, 1);
        v249 = v252[32];
        v262 = vmlal_laneq_s16(v258, v250, v29, 4);
        v263 = vmlal_lane_s16(v259, v250, *(int16x4_t *)v29.i8, 3);
        v264 = vmlal_lane_s16(v261, v250, *(int16x4_t *)v29.i8, 2);
        v265.i64[0] = 0x8000000080000;
        v265.i64[1] = 0x8000000080000;
        v266 = vmlal_lane_s16(v265, v250, *(int16x4_t *)v29.i8, 1);
        v250 = v252[64];
        v267 = vmlal_laneq_s16(v262, v251, v29, 5);
        v268 = vmlal_laneq_s16(v263, v251, v29, 4);
        v269 = vmlal_lane_s16(v264, v251, *(int16x4_t *)v29.i8, 3);
        v270 = vmlal_lane_s16(v266, v251, *(int16x4_t *)v29.i8, 2);
        v251 = v252[96];
        *(int16x4_t *)v268.i8 = vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v268, *v252, v29, 5), v249, v29, 6), 7uLL);
        *(int16x4_t *)v269.i8 = vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v269, *v252, v29, 4), v249, v29, 5), v250, v29, 6), 7uLL);
        v271 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v270, *v252, *(int16x4_t *)v29.i8, 3), v249, v29, 4), v250, v29, 5);
        *v245 = vqrshrun_n_s32(vmlal_laneq_s16(v267, *v252, v29, 6), 7uLL);
        *(int16x4_t *)((char *)v245 + 2 * v246) = *(int16x4_t *)v268.i8;
        *(int16x4_t *)((char *)v245 + 4 * v246) = *(int16x4_t *)v269.i8;
        *(int16x4_t *)((char *)v245 + 6 * v246) = vqrshrun_n_s32(vmlal_laneq_s16(v271, v251, v29, 6), 7uLL);
        v245 += (int)v246;
        v252 += 128;
        v17 -= 4;
      }
      while (v17);
    }
    else
    {
      v436 = 8 * v246;
      v437 = (char *)v245 + 6 * (int)v246;
      v438 = (char *)v245 + 4 * v246;
      v439 = v529;
      v440 = (char *)v245 + 2 * v246;
      do
      {
        v441 = 0;
        v442 = *(int16x8_t *)v439->i8;
        v443 = *(int16x8_t *)v439[32].i8;
        v444 = *(int16x8_t *)v439[64].i8;
        v445 = *(int16x8_t *)v439[96].i8;
        v446 = 160;
        v447 = v17;
        v448 = *(int16x8_t *)v439[128].i8;
        do
        {
          result = &v439[v446];
          v449.i64[0] = 0x8000000080000;
          v449.i64[1] = 0x8000000080000;
          v450 = vmlal_lane_s16(vmlal_lane_s16(v449, *(int16x4_t *)v442.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v443.i8, *(int16x4_t *)v29.i8, 2);
          v451.i64[0] = 0x8000000080000;
          v451.i64[1] = 0x8000000080000;
          v452 = vmlal_high_lane_s16(vmlal_high_lane_s16(v451, v442, *(int16x4_t *)v29.i8, 1), v443, *(int16x4_t *)v29.i8, 2);
          v453.i64[0] = 0x8000000080000;
          v453.i64[1] = 0x8000000080000;
          v454 = vmlal_lane_s16(v453, *(int16x4_t *)v443.i8, *(int16x4_t *)v29.i8, 1);
          v455.i64[0] = 0x8000000080000;
          v455.i64[1] = 0x8000000080000;
          v456 = vmlal_high_lane_s16(v455, v443, *(int16x4_t *)v29.i8, 1);
          v443 = *(int16x8_t *)v439[v446].i8;
          v457 = vmlal_lane_s16(v450, *(int16x4_t *)v444.i8, *(int16x4_t *)v29.i8, 3);
          v458 = vmlal_high_lane_s16(v452, v444, *(int16x4_t *)v29.i8, 3);
          v459 = vmlal_lane_s16(v454, *(int16x4_t *)v444.i8, *(int16x4_t *)v29.i8, 2);
          v460 = vmlal_high_lane_s16(v456, v444, *(int16x4_t *)v29.i8, 2);
          v461.i64[0] = 0x8000000080000;
          v461.i64[1] = 0x8000000080000;
          v462 = vmlal_lane_s16(v461, *(int16x4_t *)v444.i8, *(int16x4_t *)v29.i8, 1);
          v463.i64[0] = 0x8000000080000;
          v463.i64[1] = 0x8000000080000;
          v464 = vmlal_high_lane_s16(v463, v444, *(int16x4_t *)v29.i8, 1);
          v444 = *(int16x8_t *)v439[v446 + 32].i8;
          v465 = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v457, *(int16x4_t *)v445.i8, v29, 4), *(int16x4_t *)v448.i8, v29, 5), *(int16x4_t *)v443.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v458, v445, v29, 4), v448, v29, 5), v443, v29, 6), 7uLL);
          v466 = vmlal_lane_s16(v459, *(int16x4_t *)v445.i8, *(int16x4_t *)v29.i8, 3);
          v467 = vmlal_high_lane_s16(v460, v445, *(int16x4_t *)v29.i8, 3);
          v468 = vmlal_lane_s16(v462, *(int16x4_t *)v445.i8, *(int16x4_t *)v29.i8, 2);
          v469 = vmlal_high_lane_s16(v464, v445, *(int16x4_t *)v29.i8, 2);
          v458.i64[0] = 0x8000000080000;
          v458.i64[1] = 0x8000000080000;
          v470 = vmlal_lane_s16(v458, *(int16x4_t *)v445.i8, *(int16x4_t *)v29.i8, 1);
          v471.i64[0] = 0x8000000080000;
          v471.i64[1] = 0x8000000080000;
          v472 = vmlal_high_lane_s16(v471, v445, *(int16x4_t *)v29.i8, 1);
          v445 = *(int16x8_t *)v439[v446 + 64].i8;
          v473 = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v466, *(int16x4_t *)v448.i8, v29, 4), *(int16x4_t *)v443.i8, v29, 5), *(int16x4_t *)v444.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v467, v448, v29, 4), v443, v29, 5), v444, v29, 6), 7uLL);
          v474 = vmlal_lane_s16(v468, *(int16x4_t *)v448.i8, *(int16x4_t *)v29.i8, 3);
          v475 = vmlal_high_lane_s16(v469, v448, *(int16x4_t *)v29.i8, 3);
          v476 = vmlal_lane_s16(v470, *(int16x4_t *)v448.i8, *(int16x4_t *)v29.i8, 2);
          v477 = vmlal_high_lane_s16(v472, v448, *(int16x4_t *)v29.i8, 2);
          v442 = v448;
          v448 = *(int16x8_t *)v439[v446 + 96].i8;
          *(int16x8_t *)&v245->i8[v441] = v465;
          *(int16x8_t *)&v440[v441] = v473;
          *(int16x8_t *)&v438[v441] = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v474, *(int16x4_t *)v443.i8, v29, 4), *(int16x4_t *)v444.i8, v29, 5), *(int16x4_t *)v445.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v475, v443, v29, 4), v444, v29, 5), v445, v29, 6), 7uLL);
          *(int16x8_t *)&v437[v441] = vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v476, *(int16x4_t *)v443.i8, *(int16x4_t *)v29.i8, 3), *(int16x4_t *)v444.i8, v29, 4), *(int16x4_t *)v445.i8, v29, 5), *(int16x4_t *)v448.i8, v29, 6), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v477, v443, *(int16x4_t *)v29.i8, 3),
                                              v444,
                                              v29,
                                              4),
                                            v445,
                                            v29,
                                            5),
                                          v448,
                                          v29,
                                          6),
                                        7uLL);
          v446 += 128;
          v441 += v436;
          v447 -= 4;
        }
        while (v447);
        v439 += 2;
        v245 += 2;
        v437 += 16;
        v438 += 16;
        v440 += 16;
        v19 -= 8;
      }
      while (v19);
    }
  }
  return result;
}

int16x4_t *dist_wtd_convolve_2d_vert_6tap_dist_wtd_avg_neon(int16x4_t *result, _DWORD *a2, int a3, uint64_t a4, int a5, int a6, int16x8_t a7, uint16x4_t a8, uint16x4_t a9)
{
  __int32 v9;
  __int32 v10;
  uint16x4_t *v11;
  uint64_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t *v17;
  int16x4_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int16x4_t *v43;
  uint64_t v44;
  char *v45;
  int16x8_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int16x8_t v53;
  int16x8_t v54;
  uint16x4_t *v55;
  int16x8_t v56;
  char *v57;
  char *v58;
  int16x8_t v59;
  char *v60;
  int16x4_t *v61;
  int v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;

  v10 = *(_DWORD *)(a4 + 40);
  v9 = *(_DWORD *)(a4 + 44);
  v11 = *(uint16x4_t **)(a4 + 8);
  v12 = *(int *)(a4 + 16);
  if (a6 == 4)
  {
    v13 = *result;
    v14 = result[32];
    v15 = result[64];
    v16 = result[96];
    v17 = result + 160;
    a8.i32[0] = v10;
    a9.i32[0] = v9;
    v18 = result[128];
    v19.i64[0] = 0xE800E800E800E800;
    v19.i64[1] = 0xE800E800E800E800;
    do
    {
      v20.i64[0] = 0x8000000080000;
      v20.i64[1] = 0x8000000080000;
      v21 = vmlal_lane_s16(v20, v13, *(int16x4_t *)a7.i8, 1);
      v13 = v18;
      v22.i64[0] = 0x8000000080000;
      v22.i64[1] = 0x8000000080000;
      v23 = vmlal_lane_s16(v21, v14, *(int16x4_t *)a7.i8, 2);
      v24 = vmlal_lane_s16(v22, v14, *(int16x4_t *)a7.i8, 1);
      v14 = *v17;
      v25 = vmlal_lane_s16(v24, v15, *(int16x4_t *)a7.i8, 2);
      v26.i64[0] = 0x8000000080000;
      v26.i64[1] = 0x8000000080000;
      v27 = vmlal_lane_s16(v26, v15, *(int16x4_t *)a7.i8, 1);
      v28 = vmlal_lane_s16(v23, v15, *(int16x4_t *)a7.i8, 3);
      v15 = v17[32];
      v29 = vmlal_lane_s16(v25, v16, *(int16x4_t *)a7.i8, 3);
      v30 = vmlal_lane_s16(v27, v16, *(int16x4_t *)a7.i8, 2);
      v31.i64[0] = 0x8000000080000;
      v31.i64[1] = 0x8000000080000;
      v32 = vmlal_lane_s16(v31, v16, *(int16x4_t *)a7.i8, 1);
      v33 = vmlal_laneq_s16(v28, v16, a7, 4);
      v16 = v17[64];
      v34 = vmlal_laneq_s16(v33, v18, a7, 5);
      v35 = vmlal_laneq_s16(v29, v18, a7, 4);
      v36 = vmlal_lane_s16(v30, v18, *(int16x4_t *)a7.i8, 3);
      v37 = vmlal_lane_s16(v32, v18, *(int16x4_t *)a7.i8, 2);
      v18 = v17[96];
      v38 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v34, *v17, a7, 6), 7uLL), a9, 0), *v11, a8, 0), 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v35, *v17, a7, 5), v15, a7, 6), 7uLL), a9, 0), *(uint16x4_t *)((char *)v11 + 2 * v12),
                             a8,
                             0),
                4uLL),
              v19);
      v39 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v36, *v17, a7, 4), v15, a7, 5), v16, a7, 6), 7uLL), a9, 0), *(uint16x4_t *)((char *)v11 + 2 * v12 + 2 * v12), a8, 0), 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16(
                               (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v37, *v17, *(int16x4_t *)a7.i8, 3), v15, a7, 4), v16, a7, 5), v18, a7, 6), 7uLL), a9, 0), *(uint16x4_t *)((char *)v11 + 2 * v12 + 2 * v12 + 2 * v12), a8, 0),
                4uLL),
              v19);
      *(int8x8_t *)v38.i8 = vqrshrun_n_s16(v38, 4uLL);
      *a2 = v38.i32[0];
      *(_DWORD *)((char *)a2 + a3) = v38.i32[1];
      *(int8x8_t *)v38.i8 = vqrshrun_n_s16(v39, 4uLL);
      *(_DWORD *)((char *)a2 + 2 * a3) = v38.i32[0];
      v40 = (_DWORD *)((char *)a2 + 2 * a3 + a3);
      v17 += 128;
      v11 += (int)v12;
      a2 += a3;
      *v40 = v38.i32[1];
      a5 -= 4;
    }
    while (a5);
  }
  else
  {
    v41 = 0;
    a8.i32[0] = v10;
    a9.i32[0] = v9;
    v42 = 4 * a3;
    v43 = result + 160;
    v44 = 8 * v12;
    v45 = (char *)v11 + 6 * (int)v12;
    v46.i64[0] = 0xE800E800E800E800;
    v46.i64[1] = 0xE800E800E800E800;
    v47 = (char *)a2 + 3 * a3;
    v48 = (char *)a2 + 2 * a3;
    v49 = (char *)a2 + a3;
    v50 = (char *)v11 + 4 * v12;
    v51 = (char *)v11 + 2 * v12;
    do
    {
      v52 = 0;
      v53 = *(int16x8_t *)result->i8;
      v54 = *(int16x8_t *)result[32].i8;
      v55 = v11;
      v56 = *(int16x8_t *)result[64].i8;
      v57 = v51;
      v58 = v50;
      v59 = *(int16x8_t *)result[96].i8;
      v60 = v45;
      v61 = v43;
      v62 = a5;
      v63 = *(int16x8_t *)result[128].i8;
      do
      {
        v64.i64[0] = 0x8000000080000;
        v64.i64[1] = 0x8000000080000;
        v65.i64[0] = 0x8000000080000;
        v65.i64[1] = 0x8000000080000;
        v66 = vmlal_lane_s16(v64, *(int16x4_t *)v53.i8, *(int16x4_t *)a7.i8, 1);
        v67 = vmlal_high_lane_s16(v65, v53, *(int16x4_t *)a7.i8, 1);
        v53 = v63;
        v68 = vmlal_lane_s16(v66, *(int16x4_t *)v54.i8, *(int16x4_t *)a7.i8, 2);
        v69.i64[0] = 0x8000000080000;
        v69.i64[1] = 0x8000000080000;
        v70 = vmlal_high_lane_s16(v67, v54, *(int16x4_t *)a7.i8, 2);
        v71 = vmlal_lane_s16(v69, *(int16x4_t *)v54.i8, *(int16x4_t *)a7.i8, 1);
        v72.i64[0] = 0x8000000080000;
        v72.i64[1] = 0x8000000080000;
        v73 = vmlal_high_lane_s16(v72, v54, *(int16x4_t *)a7.i8, 1);
        v54 = *(int16x8_t *)v61[v41].i8;
        v74 = vmlal_lane_s16(v71, *(int16x4_t *)v56.i8, *(int16x4_t *)a7.i8, 2);
        v75 = vmlal_lane_s16(v68, *(int16x4_t *)v56.i8, *(int16x4_t *)a7.i8, 3);
        v76 = vmlal_high_lane_s16(v73, v56, *(int16x4_t *)a7.i8, 2);
        v77.i64[0] = 0x8000000080000;
        v77.i64[1] = 0x8000000080000;
        v78 = vmlal_lane_s16(v77, *(int16x4_t *)v56.i8, *(int16x4_t *)a7.i8, 1);
        v79.i64[0] = 0x8000000080000;
        v79.i64[1] = 0x8000000080000;
        v80 = vmlal_high_lane_s16(v79, v56, *(int16x4_t *)a7.i8, 1);
        v81 = vmlal_high_lane_s16(v70, v56, *(int16x4_t *)a7.i8, 3);
        v56 = *(int16x8_t *)v61[v41 + 32].i8;
        v82 = vmlal_laneq_s16(v75, *(int16x4_t *)v59.i8, a7, 4);
        v83 = vmlal_lane_s16(v74, *(int16x4_t *)v59.i8, *(int16x4_t *)a7.i8, 3);
        v84 = vmlal_high_lane_s16(v76, v59, *(int16x4_t *)a7.i8, 3);
        v85 = vmlal_lane_s16(v78, *(int16x4_t *)v59.i8, *(int16x4_t *)a7.i8, 2);
        v86 = vmlal_high_laneq_s16(v81, v59, a7, 4);
        v87 = vmlal_high_lane_s16(v80, v59, *(int16x4_t *)a7.i8, 2);
        v88.i64[0] = 0x8000000080000;
        v88.i64[1] = 0x8000000080000;
        v89 = vmlal_lane_s16(v88, *(int16x4_t *)v59.i8, *(int16x4_t *)a7.i8, 1);
        v90.i64[0] = 0x8000000080000;
        v90.i64[1] = 0x8000000080000;
        v91 = vmlal_high_lane_s16(v90, v59, *(int16x4_t *)a7.i8, 1);
        v59 = *(int16x8_t *)v61[v41 + 64].i8;
        v92 = vmlal_laneq_s16(v82, *(int16x4_t *)v63.i8, a7, 5);
        v93 = vmlal_laneq_s16(v83, *(int16x4_t *)v63.i8, a7, 4);
        v94 = vmlal_high_laneq_s16(v84, v63, a7, 4);
        v95 = vmlal_lane_s16(v85, *(int16x4_t *)v63.i8, *(int16x4_t *)a7.i8, 3);
        v96 = vmlal_high_lane_s16(v87, v63, *(int16x4_t *)a7.i8, 3);
        v97 = vmlal_high_laneq_s16(v86, v63, a7, 5);
        v98 = vmlal_lane_s16(v89, *(int16x4_t *)v63.i8, *(int16x4_t *)a7.i8, 2);
        v99 = vmlal_high_lane_s16(v91, v63, *(int16x4_t *)a7.i8, 2);
        v63 = *(int16x8_t *)v61[v41 + 96].i8;
        v100 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v92, *(int16x4_t *)v54.i8, a7, 6), 7uLL), a9, 0), v55[v41], a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(v97, v54, a7, 6), 7uLL), a9, 0), *(uint16x8_t *)v55[v41].i8, a8, 0), 4uLL);
        v101 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v93, *(int16x4_t *)v54.i8, a7, 5), *(int16x4_t *)v56.i8, a7, 6), 7uLL), a9, 0), *(uint16x4_t *)&v57[v41 * 8], a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(
                                              vmlal_high_laneq_s16(vmlal_high_laneq_s16(v94, v54, a7, 5), v56, a7, 6),
                                              7uLL),
                                a9,
                                0),
                              *(uint16x8_t *)&v57[v41 * 8],
                              a8,
                              0),
                 4uLL);
        v102 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v95, *(int16x4_t *)v54.i8, a7, 4), *(int16x4_t *)v56.i8, a7, 5), *(int16x4_t *)v59.i8, a7, 6), 7uLL), a9, 0), *(uint16x4_t *)&v58[v41 * 8], a8,
                                  0),
                     4uLL),
                   (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v96, v54, a7, 4), v56, a7, 5), v59, a7, 6), 7uLL), a9, 0), *(uint16x8_t *)&v58[v41 * 8], a8, 0), 4uLL), v46);
        v103 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v98, *(int16x4_t *)v54.i8, *(int16x4_t *)a7.i8, 3), *(int16x4_t *)v56.i8, a7, 4), *(int16x4_t *)v59.i8, a7, 5),
                                                    *(int16x4_t *)v63.i8,
                                                    a7,
                                                    6),
                                                  7uLL),
                                    a9,
                                    0),
                                  *(uint16x4_t *)&v60[v41 * 8],
                                  a8,
                                  0),
                     4uLL),
                   (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v99, v54, *(int16x4_t *)a7.i8, 3), v56, a7, 4), v59, a7, 5), v63, a7, 6), 7uLL), a9, 0), *(uint16x8_t *)&v60[v41 * 8],
                                a8,
                                0),
                   4uLL),
                 v46);
        *(int8x8_t *)((char *)a2 + v52) = vqrshrun_n_s16(vaddq_s16(v100, v46), 4uLL);
        *(int8x8_t *)&v49[v52] = vqrshrun_n_s16(vaddq_s16(v101, v46), 4uLL);
        v61 += 128;
        *(int8x8_t *)&v48[v52] = vqrshrun_n_s16(v102, 4uLL);
        v60 += v44;
        v58 += v44;
        v57 += v44;
        *(int8x8_t *)&v47[v52] = vqrshrun_n_s16(v103, 4uLL);
        v55 = (uint16x4_t *)((char *)v55 + v44);
        v52 += v42;
        v62 -= 4;
      }
      while (v62);
      result += 2;
      a2 += 2;
      v41 += 2;
      v47 += 8;
      v48 += 8;
      v49 += 8;
      a6 -= 8;
    }
    while (a6);
  }
  return result;
}

int16x4_t *dist_wtd_convolve_2d_vert_8tap_dist_wtd_avg_neon(int16x4_t *result, _DWORD *a2, int a3, uint64_t a4, int a5, int a6, int16x8_t a7, uint16x4_t a8, uint16x4_t a9)
{
  __int32 v9;
  __int32 v10;
  uint16x4_t *v11;
  uint64_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t *v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int16x8_t v45;
  int16x8_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x4_t *v49;
  uint64_t v50;
  char *v51;
  int16x8_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  uint16x4_t *v63;
  int16x8_t v64;
  char *v65;
  char *v66;
  int16x8_t v67;
  char *v68;
  int16x4_t *v69;
  int v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;

  v10 = *(_DWORD *)(a4 + 40);
  v9 = *(_DWORD *)(a4 + 44);
  v11 = *(uint16x4_t **)(a4 + 8);
  v12 = *(int *)(a4 + 16);
  if (a6 == 4)
  {
    v13 = *result;
    v14 = result[32];
    v15 = result + 224;
    a8.i32[0] = v10;
    v16 = result[64];
    v17 = result[96];
    a9.i32[0] = v9;
    v18 = result[128];
    v19 = result[160];
    v20 = result[192];
    v21.i64[0] = 0xE800E800E800E800;
    v21.i64[1] = 0xE800E800E800E800;
    do
    {
      v22.i64[0] = 0x8000000080000;
      v22.i64[1] = 0x8000000080000;
      v23 = vmlal_lane_s16(v22, v13, *(int16x4_t *)a7.i8, 0);
      v13 = v18;
      v24 = vmlal_lane_s16(v23, v14, *(int16x4_t *)a7.i8, 1);
      v25.i64[0] = 0x8000000080000;
      v25.i64[1] = 0x8000000080000;
      v26 = vmlal_lane_s16(v25, v14, *(int16x4_t *)a7.i8, 0);
      v14 = v19;
      v27.i64[0] = 0x8000000080000;
      v27.i64[1] = 0x8000000080000;
      v28 = vmlal_lane_s16(vmlal_lane_s16(v26, v16, *(int16x4_t *)a7.i8, 1), v17, *(int16x4_t *)a7.i8, 2);
      v29 = vmlal_lane_s16(vmlal_lane_s16(v27, v16, *(int16x4_t *)a7.i8, 0), v17, *(int16x4_t *)a7.i8, 1);
      v30 = vmlal_lane_s16(vmlal_lane_s16(v24, v16, *(int16x4_t *)a7.i8, 2), v17, *(int16x4_t *)a7.i8, 3);
      v31.i64[0] = 0x8000000080000;
      v31.i64[1] = 0x8000000080000;
      v32 = vmlal_lane_s16(v31, v17, *(int16x4_t *)a7.i8, 0);
      v17 = *v15;
      v33 = vmlal_lane_s16(v28, v18, *(int16x4_t *)a7.i8, 3);
      v34 = vmlal_lane_s16(v29, v18, *(int16x4_t *)a7.i8, 2);
      v35 = vmlal_laneq_s16(v30, v18, a7, 4);
      v36 = vmlal_lane_s16(v32, v18, *(int16x4_t *)a7.i8, 1);
      v18 = v15[32];
      v37 = vmlal_laneq_s16(v33, v19, a7, 4);
      v38 = vmlal_lane_s16(v34, v19, *(int16x4_t *)a7.i8, 3);
      v39 = vmlal_lane_s16(v36, v19, *(int16x4_t *)a7.i8, 2);
      v40 = vmlal_laneq_s16(v35, v19, a7, 5);
      v19 = v15[64];
      v41 = vmlal_laneq_s16(v37, v20, a7, 5);
      v42 = vmlal_laneq_s16(v38, v20, a7, 4);
      v43 = vmlal_lane_s16(v39, v20, *(int16x4_t *)a7.i8, 3);
      v44 = vmlal_laneq_s16(v40, v20, a7, 6);
      v16 = v20;
      v20 = v15[96];
      v45 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v44, *v15, a7, 7), 7uLL), a9, 0), *v11, a8, 0), 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v41, *v15, a7, 6), v18, a7, 7), 7uLL), a9, 0), *(uint16x4_t *)((char *)v11 + 2 * v12),
                             a8,
                             0),
                4uLL),
              v21);
      v46 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v42, *v15, a7, 5), v18, a7, 6), v19, a7, 7), 7uLL), a9, 0), *(uint16x4_t *)((char *)v11 + 2 * v12 + 2 * v12), a8, 0), 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16(
                               (uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v43, *v15, a7, 4), v18, a7, 5), v19, a7, 6), v20, a7, 7), 7uLL), a9, 0), *(uint16x4_t *)((char *)v11 + 2 * v12 + 2 * v12 + 2 * v12), a8, 0), 4uLL), v21);
      *(int8x8_t *)v45.i8 = vqrshrun_n_s16(v45, 4uLL);
      *a2 = v45.i32[0];
      *(_DWORD *)((char *)a2 + a3) = v45.i32[1];
      *(int8x8_t *)v45.i8 = vqrshrun_n_s16(v46, 4uLL);
      *(_DWORD *)((char *)a2 + 2 * a3) = v45.i32[0];
      *(_DWORD *)((char *)a2 + 2 * a3 + a3) = v45.i32[1];
      a2 += a3;
      v15 += 128;
      v11 += (int)v12;
      a5 -= 4;
    }
    while (a5);
  }
  else
  {
    v47 = 0;
    a8.i32[0] = v10;
    a9.i32[0] = v9;
    v48 = 4 * a3;
    v49 = result + 224;
    v50 = 8 * v12;
    v51 = (char *)v11 + 6 * (int)v12;
    v52.i64[0] = 0xE800E800E800E800;
    v52.i64[1] = 0xE800E800E800E800;
    v53 = (char *)a2 + 3 * a3;
    v54 = (char *)a2 + 2 * a3;
    v55 = (char *)a2 + a3;
    v56 = (char *)v11 + 4 * v12;
    v57 = (char *)v11 + 2 * v12;
    do
    {
      v58 = 0;
      v59 = *(int16x8_t *)result->i8;
      v60 = *(int16x8_t *)result[32].i8;
      v61 = *(int16x8_t *)result[64].i8;
      v62 = *(int16x8_t *)result[96].i8;
      v63 = v11;
      v64 = *(int16x8_t *)result[128].i8;
      v65 = v57;
      v66 = v56;
      v67 = *(int16x8_t *)result[160].i8;
      v68 = v51;
      v69 = v49;
      v70 = a5;
      v71 = *(int16x8_t *)result[192].i8;
      do
      {
        v72.i64[0] = 0x8000000080000;
        v72.i64[1] = 0x8000000080000;
        v73.i64[0] = 0x8000000080000;
        v73.i64[1] = 0x8000000080000;
        v74 = vmlal_lane_s16(v72, *(int16x4_t *)v59.i8, *(int16x4_t *)a7.i8, 0);
        v75 = vmlal_high_lane_s16(v73, v59, *(int16x4_t *)a7.i8, 0);
        v59 = v64;
        v76 = vmlal_lane_s16(v74, *(int16x4_t *)v60.i8, *(int16x4_t *)a7.i8, 1);
        v77.i64[0] = 0x8000000080000;
        v77.i64[1] = 0x8000000080000;
        v78 = vmlal_lane_s16(v77, *(int16x4_t *)v60.i8, *(int16x4_t *)a7.i8, 0);
        v79 = vmlal_high_lane_s16(v75, v60, *(int16x4_t *)a7.i8, 1);
        v80.i64[0] = 0x8000000080000;
        v80.i64[1] = 0x8000000080000;
        v81 = vmlal_high_lane_s16(v80, v60, *(int16x4_t *)a7.i8, 0);
        v60 = v67;
        v82.i64[0] = 0x8000000080000;
        v82.i64[1] = 0x8000000080000;
        v83.i64[0] = 0x8000000080000;
        v83.i64[1] = 0x8000000080000;
        v84 = vmlal_lane_s16(vmlal_lane_s16(v76, *(int16x4_t *)v61.i8, *(int16x4_t *)a7.i8, 2), *(int16x4_t *)v62.i8, *(int16x4_t *)a7.i8, 3);
        v85 = vmlal_lane_s16(vmlal_lane_s16(v78, *(int16x4_t *)v61.i8, *(int16x4_t *)a7.i8, 1), *(int16x4_t *)v62.i8, *(int16x4_t *)a7.i8, 2);
        v86 = vmlal_high_lane_s16(vmlal_high_lane_s16(v81, v61, *(int16x4_t *)a7.i8, 1), v62, *(int16x4_t *)a7.i8, 2);
        v87 = vmlal_lane_s16(vmlal_lane_s16(v82, *(int16x4_t *)v61.i8, *(int16x4_t *)a7.i8, 0), *(int16x4_t *)v62.i8, *(int16x4_t *)a7.i8, 1);
        v88 = vmlal_high_lane_s16(vmlal_high_lane_s16(v79, v61, *(int16x4_t *)a7.i8, 2), v62, *(int16x4_t *)a7.i8, 3);
        v89 = vmlal_high_lane_s16(vmlal_high_lane_s16(v83, v61, *(int16x4_t *)a7.i8, 0), v62, *(int16x4_t *)a7.i8, 1);
        v90.i64[0] = 0x8000000080000;
        v90.i64[1] = 0x8000000080000;
        v91 = vmlal_lane_s16(v90, *(int16x4_t *)v62.i8, *(int16x4_t *)a7.i8, 0);
        v92.i64[0] = 0x8000000080000;
        v92.i64[1] = 0x8000000080000;
        v93 = vmlal_high_lane_s16(v92, v62, *(int16x4_t *)a7.i8, 0);
        v62 = *(int16x8_t *)v69[v47].i8;
        v94 = vmlal_laneq_s16(v84, *(int16x4_t *)v64.i8, a7, 4);
        v95 = vmlal_lane_s16(v85, *(int16x4_t *)v64.i8, *(int16x4_t *)a7.i8, 3);
        v96 = vmlal_high_lane_s16(v86, v64, *(int16x4_t *)a7.i8, 3);
        v97 = vmlal_lane_s16(v87, *(int16x4_t *)v64.i8, *(int16x4_t *)a7.i8, 2);
        v98 = vmlal_high_lane_s16(v89, v64, *(int16x4_t *)a7.i8, 2);
        v99 = vmlal_high_laneq_s16(v88, v64, a7, 4);
        v100 = vmlal_lane_s16(v91, *(int16x4_t *)v64.i8, *(int16x4_t *)a7.i8, 1);
        v101 = vmlal_high_lane_s16(v93, v64, *(int16x4_t *)a7.i8, 1);
        v64 = *(int16x8_t *)v69[v47 + 32].i8;
        v102 = vmlal_laneq_s16(v95, *(int16x4_t *)v67.i8, a7, 4);
        v103 = vmlal_laneq_s16(v94, *(int16x4_t *)v67.i8, a7, 5);
        v104 = vmlal_high_laneq_s16(v96, v67, a7, 4);
        v105 = vmlal_lane_s16(v97, *(int16x4_t *)v67.i8, *(int16x4_t *)a7.i8, 3);
        v106 = vmlal_high_lane_s16(v98, v67, *(int16x4_t *)a7.i8, 3);
        v107 = vmlal_lane_s16(v100, *(int16x4_t *)v67.i8, *(int16x4_t *)a7.i8, 2);
        v108 = vmlal_high_lane_s16(v101, v67, *(int16x4_t *)a7.i8, 2);
        v109 = vmlal_high_laneq_s16(v99, v67, a7, 5);
        v67 = *(int16x8_t *)v69[v47 + 64].i8;
        v110 = vmlal_laneq_s16(v103, *(int16x4_t *)v71.i8, a7, 6);
        v111 = vmlal_laneq_s16(v102, *(int16x4_t *)v71.i8, a7, 5);
        v112 = vmlal_high_laneq_s16(v104, v71, a7, 5);
        v113 = vmlal_high_laneq_s16(v109, v71, a7, 6);
        v114 = vmlal_laneq_s16(v105, *(int16x4_t *)v71.i8, a7, 4);
        v115 = vmlal_high_laneq_s16(v106, v71, a7, 4);
        v116 = vmlal_lane_s16(v107, *(int16x4_t *)v71.i8, *(int16x4_t *)a7.i8, 3);
        v117 = vmlal_high_lane_s16(v108, v71, *(int16x4_t *)a7.i8, 3);
        v61 = v71;
        v71 = *(int16x8_t *)v69[v47 + 96].i8;
        v118 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v110, *(int16x4_t *)v62.i8, a7, 7), 7uLL), a9, 0), v63[v47], a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(v113, v62, a7, 7), 7uLL), a9, 0), *(uint16x8_t *)v63[v47].i8, a8, 0), 4uLL);
        v119 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v111, *(int16x4_t *)v62.i8, a7, 6), *(int16x4_t *)v64.i8, a7, 7), 7uLL), a9, 0), *(uint16x4_t *)&v65[v47 * 8], a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(
                                              vmlal_high_laneq_s16(vmlal_high_laneq_s16(v112, v62, a7, 6), v64, a7, 7),
                                              7uLL),
                                a9,
                                0),
                              *(uint16x8_t *)&v65[v47 * 8],
                              a8,
                              0),
                 4uLL);
        v120 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v116, *(int16x4_t *)v62.i8, a7, 4), *(int16x4_t *)v64.i8, a7, 5), *(int16x4_t *)v67.i8, a7, 6), *(int16x4_t *)v71.i8, a7, 7), 7uLL), a9,
                                  0),
                                *(uint16x4_t *)&v68[v47 * 8],
                                a8,
                                0),
                   4uLL),
                 (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v117, v62, a7, 4), v64, a7, 5), v67, a7, 6), v71, a7, 7), 7uLL), a9, 0), *(uint16x8_t *)&v68[v47 * 8],
                              a8,
                              0),
                 4uLL);
        *(int8x8_t *)v111.i8 = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v114, *(int16x4_t *)v62.i8, a7, 5), *(int16x4_t *)v64.i8, a7, 6), *(int16x4_t *)v67.i8, a7, 7),
                                                                    7uLL),
                                                      a9,
                                                      0),
                                                    *(uint16x4_t *)&v66[v47 * 8],
                                                    a8,
                                                    0),
                                       4uLL),
                                     (int32x4_t)vmlal_high_lane_u16(vmull_lane_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v115, v62, a7, 5), v64, a7, 6), v67, a7, 7), 7uLL), a9, 0), *(uint16x8_t *)&v66[v47 * 8], a8, 0), 4uLL), v52),
                                 4uLL);
        *(int8x8_t *)((char *)a2 + v58) = vqrshrun_n_s16(vaddq_s16(v118, v52), 4uLL);
        *(int8x8_t *)&v55[v58] = vqrshrun_n_s16(vaddq_s16(v119, v52), 4uLL);
        *(_QWORD *)&v54[v58] = v111.i64[0];
        v69 += 128;
        v68 += v50;
        *(int8x8_t *)&v53[v58] = vqrshrun_n_s16(vaddq_s16(v120, v52), 4uLL);
        v66 += v50;
        v65 += v50;
        v63 = (uint16x4_t *)((char *)v63 + v50);
        v58 += v48;
        v70 -= 4;
      }
      while (v70);
      result += 2;
      a2 += 2;
      v47 += 2;
      v53 += 8;
      v54 += 8;
      v55 += 8;
      a6 -= 8;
    }
    while (a6);
  }
  return result;
}

uint8x8_t *av1_dist_wtd_convolve_2d_copy_neon(uint8x8_t *result, int a2, _DWORD *a3, int a4, int a5, int a6, uint64_t a7, uint16x4_t a8, uint16x8_t a9, int16x8_t a10, int16x8_t a11, int16x8_t a12, uint16x8_t a13, uint16x8_t a14)
{
  uint16x4_t *v14;
  uint64_t v15;
  int16x8_t v16;
  uint8x8_t *v17;
  uint16x4_t v18;
  uint16x4_t *v19;
  int16x8_t v20;
  int16x8_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  int16x8_t v39;
  unint64_t v40;
  unint64_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;

  if (*(_DWORD *)a7)
  {
    if (*(_DWORD *)(a7 + 36))
    {
      return dist_wtd_convolve_2d_copy_dist_wtd_avg_neon(result, a2, a3, a4, a5, a6, a7, a8, *(uint16x4_t *)a9.i8, *(double *)a10.i64, *(double *)a11.i64, a12, (int16x8_t)a13, (uint32x4_t)a14);
    }
    else
    {
      v14 = *(uint16x4_t **)(a7 + 8);
      v15 = *(int *)(a7 + 16);
      if (a5 == 4)
      {
        v16.i64[0] = 0xE800E800E800E800;
        v16.i64[1] = 0xE800E800E800E800;
        do
        {
          v17 = (uint8x8_t *)((char *)result + a2 + a2);
          a14.i32[0] = 402659328;
          a14.i16[2] = 6144;
          a14.i16[3] = 6144;
          a14 = vmlal_u8(a14, *result, (uint8x8_t)0x1010101010101010);
          a10.i32[0] = 402659328;
          a10.i16[2] = 6144;
          a10.i16[3] = 6144;
          a11.i32[0] = 402659328;
          a11.i16[2] = 6144;
          a11.i16[3] = 6144;
          v18 = (uint16x4_t)vmlal_u8((uint16x8_t)a11, *v17, (uint8x8_t)0x1010101010101010).u64[0];
          a13.i32[0] = 402659328;
          a13.i16[2] = 6144;
          a13.i16[3] = 6144;
          a13 = vmlal_u8(a13, *(uint8x8_t *)((char *)v17 + a2), (uint8x8_t)0x1010101010101010);
          v19 = (uint16x4_t *)((char *)v14 + 2 * v15 + 2 * v15);
          *(uint16x4_t *)v20.i8 = vhadd_u16(*v14, *(uint16x4_t *)a14.i8);
          *(uint16x4_t *)v21.i8 = vhadd_u16(*v19, v18);
          v20.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)((char *)v14 + 2 * v15), (uint16x4_t)*(_OWORD *)&vmlal_u8((uint16x8_t)a10, *(uint8x8_t *)((char *)result + a2), (uint8x8_t)0x1010101010101010));
          v21.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)((char *)v19 + 2 * v15), *(uint16x4_t *)a13.i8);
          a10 = vaddq_s16(v20, v16);
          a11 = vaddq_s16(v21, v16);
          *(int8x8_t *)a10.i8 = vqrshrun_n_s16(a10, 4uLL);
          *(int8x8_t *)a11.i8 = vqrshrun_n_s16(a11, 4uLL);
          *a3 = a10.i32[0];
          *(_DWORD *)((char *)a3 + a4) = a10.i32[1];
          *(_DWORD *)((char *)a3 + 2 * a4) = a11.i32[0];
          *(_DWORD *)((char *)a3 + 2 * a4 + a4) = a11.i32[1];
          result = (uint8x8_t *)((char *)result + 4 * a2);
          v14 += (int)v15;
          a3 += a4;
          a6 -= 4;
        }
        while (a6);
      }
      else
      {
        v25 = 4 * a2;
        v26 = a4;
        v27 = 4 * a4;
        v28 = (char *)result + 3 * a2;
        v29 = (char *)result + 2 * a2;
        v30 = (char *)result + a2;
        v31 = 8 * v15;
        v32 = (char *)v14 + 6 * (int)v15;
        v33 = (char *)v14 + 4 * v15;
        v34 = 2 * a4;
        v35 = (char *)v14 + 2 * v15;
        v36 = (char *)a3 + v34 + v26;
        v37 = (char *)a3 + v34;
        v38 = (char *)a3 + v26;
        v39.i64[0] = 0xE800E800E800E800;
        v39.i64[1] = 0xE800E800E800E800;
        do
        {
          v40 = 0;
          v41 = 0;
          do
          {
            v42.i64[0] = 0x1800180018001800;
            v42.i64[1] = 0x1800180018001800;
            v43.i64[0] = 0x1800180018001800;
            v43.i64[1] = 0x1800180018001800;
            v44.i64[0] = 0x1800180018001800;
            v44.i64[1] = 0x1800180018001800;
            v45.i64[0] = 0x1800180018001800;
            v45.i64[1] = 0x1800180018001800;
            v46 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)&v32[v40], vmlal_u8(v45, *(uint8x8_t *)&v28[v41], (uint8x8_t)0x1010101010101010)), v39);
            *(int8x8_t *)v43.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)&v35[v40], vmlal_u8(v43, *(uint8x8_t *)&v30[v41], (uint8x8_t)0x1010101010101010)), v39), 4uLL);
            *(int8x8_t *)v44.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)&v33[v40], vmlal_u8(v44, *(uint8x8_t *)&v29[v41], (uint8x8_t)0x1010101010101010)), v39), 4uLL);
            *(int8x8_t *)&a3[v41 / 4] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)v14[v40 / 8].i8, vmlal_u8(v42, result[v41 / 8], (uint8x8_t)0x1010101010101010)), v39), 4uLL);
            *(_QWORD *)&v38[v41] = v43.i64[0];
            *(_QWORD *)&v37[v41] = v44.i64[0];
            *(int8x8_t *)&v36[v41] = vqrshrun_n_s16(v46, 4uLL);
            v41 += 8;
            v40 += 16;
          }
          while (a5 != (_DWORD)v41);
          result = (uint8x8_t *)((char *)result + v25);
          a3 = (_DWORD *)((char *)a3 + v27);
          v28 += v25;
          v29 += v25;
          v30 += v25;
          v32 += v31;
          v33 += v31;
          v35 += v31;
          v14 = (uint16x4_t *)((char *)v14 + v31);
          v36 += v27;
          v37 += v27;
          v38 += v27;
          a6 -= 4;
        }
        while (a6);
      }
    }
  }
  else
  {
    v22 = *(_QWORD **)(a7 + 8);
    v23 = *(int *)(a7 + 16);
    if (a5 == 4)
    {
      do
      {
        v24 = *(uint8x8_t *)((char *)result + 3 * a2);
        a13.i32[0] = 402659328;
        a13.i16[2] = 6144;
        a13.i16[3] = 6144;
        a13 = vmlal_u8(a13, *result, (uint8x8_t)0x1010101010101010);
        a9.i32[0] = 402659328;
        a9.i16[2] = 6144;
        a9.i16[3] = 6144;
        a9 = vmlal_u8(a9, *(uint8x8_t *)((char *)result + a2), (uint8x8_t)0x1010101010101010);
        a10.i32[0] = 402659328;
        a10.i16[2] = 6144;
        a10.i16[3] = 6144;
        a10 = (int16x8_t)vmlal_u8((uint16x8_t)a10, *(uint8x8_t *)((char *)result + 2 * a2), (uint8x8_t)0x1010101010101010);
        a11.i32[0] = 402659328;
        a11.i16[2] = 6144;
        a11.i16[3] = 6144;
        *v22 = a13.i64[0];
        *(_QWORD *)((char *)v22 + 2 * v23) = a9.i64[0];
        *(_QWORD *)((char *)v22 + 4 * v23) = a10.i64[0];
        a11 = (int16x8_t)vmlal_u8((uint16x8_t)a11, v24, (uint8x8_t)0x1010101010101010);
        *(_QWORD *)((char *)v22 + 6 * v23) = a11.i64[0];
        result = (uint8x8_t *)((char *)result + 4 * a2);
        v22 += v23;
        a6 -= 4;
      }
      while (a6);
    }
    else
    {
      v47 = 4 * a2;
      v48 = (char *)result + 3 * a2;
      v49 = (char *)result + 2 * a2;
      v50 = (char *)result + a2;
      v51 = 8 * v23;
      v52 = (char *)v22 + 4 * v23;
      v53 = (char *)v22 + 6 * (int)v23;
      v54 = (char *)v22 + 2 * v23;
      do
      {
        v55 = 0;
        v56 = 0;
        do
        {
          v57 = *(uint8x8_t *)&v48[v56];
          v58.i64[0] = 0x1800180018001800;
          v58.i64[1] = 0x1800180018001800;
          v59.i64[0] = 0x1800180018001800;
          v59.i64[1] = 0x1800180018001800;
          v60 = vmlal_u8(v59, *(uint8x8_t *)&v50[v56], (uint8x8_t)0x1010101010101010);
          v61.i64[0] = 0x1800180018001800;
          v61.i64[1] = 0x1800180018001800;
          v62 = vmlal_u8(v61, *(uint8x8_t *)&v49[v56], (uint8x8_t)0x1010101010101010);
          v63.i64[0] = 0x1800180018001800;
          v63.i64[1] = 0x1800180018001800;
          *(uint16x8_t *)&v22[v55 / 8] = vmlal_u8(v58, result[v56 / 8], (uint8x8_t)0x1010101010101010);
          *(uint16x8_t *)&v54[v55] = v60;
          *(uint16x8_t *)&v52[v55] = v62;
          *(uint16x8_t *)&v53[v55] = vmlal_u8(v63, v57, (uint8x8_t)0x1010101010101010);
          v56 += 8;
          v55 += 16;
        }
        while (a5 != (_DWORD)v56);
        result = (uint8x8_t *)((char *)result + v47);
        v48 += v47;
        v49 += v47;
        v50 += v47;
        v53 += v51;
        v52 += v51;
        v54 += v51;
        v22 = (_QWORD *)((char *)v22 + v51);
        a6 -= 4;
      }
      while (a6);
    }
  }
  return result;
}

uint8x8_t *dist_wtd_convolve_2d_copy_dist_wtd_avg_neon(uint8x8_t *result, int a2, _DWORD *a3, int a4, int a5, int a6, uint64_t a7, uint16x4_t a8, uint16x4_t a9, double a10, double a11, int16x8_t a12, int16x8_t a13, uint32x4_t a14)
{
  int32x4_t v14;
  __int32 v15;
  __int32 v16;
  uint16x4_t *v17;
  uint64_t v18;
  int16x8_t v19;
  uint8x8_t *v20;
  uint16x4_t v21;
  uint16x4_t v22;
  uint16x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int16x8_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;

  v15 = *(_DWORD *)(a7 + 40);
  v16 = *(_DWORD *)(a7 + 44);
  v17 = *(uint16x4_t **)(a7 + 8);
  v18 = *(int *)(a7 + 16);
  if (a5 == 4)
  {
    a8.i32[0] = v15;
    a9.i32[0] = v16;
    v19.i64[0] = 0xE800E800E800E800;
    v19.i64[1] = 0xE800E800E800E800;
    do
    {
      v20 = (uint8x8_t *)((char *)result + a2 + a2);
      v14.i32[0] = 402659328;
      v14.i16[2] = 6144;
      v14.i16[3] = 6144;
      a12.i32[0] = 402659328;
      a12.i16[2] = 6144;
      a12.i16[3] = 6144;
      a13.i32[0] = 402659328;
      a13.i16[2] = 6144;
      a13.i16[3] = 6144;
      v21 = (uint16x4_t)vmlal_u8((uint16x8_t)a13, *v20, (uint8x8_t)0x1010101010101010).u64[0];
      a14.i32[0] = 402659328;
      a14.i16[2] = 6144;
      a14.i16[3] = 6144;
      v22 = (uint16x4_t)vmlal_u8((uint16x8_t)a14, *(uint8x8_t *)((char *)v20 + a2), (uint8x8_t)0x1010101010101010).u64[0];
      v23 = (uint16x4_t *)((char *)v17 + 2 * v18 + 2 * v18);
      v14 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)*(_OWORD *)&vmlal_u8((uint16x8_t)v14, *result, (uint8x8_t)0x1010101010101010), a9, 0), *v17, a8, 0);
      a14 = vmlal_lane_u16(vmull_lane_u16(v22, a9, 0), *(uint16x4_t *)((char *)v23 + 2 * v18), a8, 0);
      a12 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v14, 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)*(_OWORD *)&vmlal_u8((uint16x8_t)a12, *(uint8x8_t *)((char *)result + a2), (uint8x8_t)0x1010101010101010), a9, 0), *(uint16x4_t *)((char *)v17 + 2 * v18), a8, 0), 4uLL), v19);
      a13 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(v21, a9, 0), *v23, a8, 0), 4uLL), (int32x4_t)a14, 4uLL), v19);
      *(int8x8_t *)a12.i8 = vqrshrun_n_s16(a12, 4uLL);
      *(int8x8_t *)a13.i8 = vqrshrun_n_s16(a13, 4uLL);
      *a3 = a12.i32[0];
      *(_DWORD *)((char *)a3 + a4) = a12.i32[1];
      *(_DWORD *)((char *)a3 + 2 * a4) = a13.i32[0];
      *(_DWORD *)((char *)a3 + 2 * a4 + a4) = a13.i32[1];
      result = (uint8x8_t *)((char *)result + 4 * a2);
      v17 += (int)v18;
      a3 += a4;
      a6 -= 4;
    }
    while (a6);
  }
  else
  {
    v24 = 4 * a2;
    a8.i32[0] = v15;
    a9.i32[0] = v16;
    v25 = 4 * a4;
    v26 = (char *)result + 3 * a2;
    v27 = (char *)result + 2 * a2;
    v28 = (char *)result + a2;
    v29 = 8 * v18;
    v30 = (char *)v17 + 6 * (int)v18;
    v31 = (char *)v17 + 4 * v18;
    v32.i64[0] = 0xE800E800E800E800;
    v32.i64[1] = 0xE800E800E800E800;
    v33 = (char *)a3 + 3 * a4;
    v34 = (char *)a3 + 2 * a4;
    v35 = (char *)a3 + a4;
    v36 = (char *)v17 + 2 * v18;
    do
    {
      v37 = 0;
      v38 = 0;
      do
      {
        v39.i64[0] = 0x1800180018001800;
        v39.i64[1] = 0x1800180018001800;
        v40 = vmlal_u8(v39, result[v38 / 8], (uint8x8_t)0x1010101010101010);
        v41.i64[0] = 0x1800180018001800;
        v41.i64[1] = 0x1800180018001800;
        v42 = vmlal_u8(v41, *(uint8x8_t *)&v28[v38], (uint8x8_t)0x1010101010101010);
        v43.i64[0] = 0x1800180018001800;
        v43.i64[1] = 0x1800180018001800;
        v44 = vmlal_u8(v43, *(uint8x8_t *)&v27[v38], (uint8x8_t)0x1010101010101010);
        v45.i64[0] = 0x1800180018001800;
        v45.i64[1] = 0x1800180018001800;
        v46 = *(uint16x8_t *)&v36[v37 * 8];
        v47 = vmlal_u8(v45, *(uint8x8_t *)&v26[v38], (uint8x8_t)0x1010101010101010);
        v48 = *(uint16x8_t *)&v31[v37 * 8];
        v49 = *(uint16x8_t *)&v30[v37 * 8];
        *(int8x8_t *)&a3[v38 / 4] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v40.i8, a9, 0), v17[v37], a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v40, a9, 0), *(uint16x8_t *)v17[v37].i8, a8, 0), 4uLL), v32), 4uLL);
        *(int8x8_t *)&v35[v38] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v42.i8, a9, 0), *(uint16x4_t *)v46.i8, a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v42, a9, 0), v46, a8, 0), 4uLL), v32), 4uLL);
        *(int8x8_t *)&v34[v38] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v44.i8, a9, 0), *(uint16x4_t *)v48.i8, a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v44, a9, 0), v48, a8, 0), 4uLL), v32), 4uLL);
        *(int8x8_t *)&v33[v38] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v47.i8, a9, 0), *(uint16x4_t *)v49.i8, a8, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v47, a9, 0), v49, a8, 0), 4uLL), v32), 4uLL);
        v38 += 8;
        v37 += 2;
      }
      while (a5 != (_DWORD)v38);
      result = (uint8x8_t *)((char *)result + v24);
      a3 = (_DWORD *)((char *)a3 + v25);
      v26 += v24;
      v27 += v24;
      v28 += v24;
      v30 += v29;
      v31 += v29;
      v36 += v29;
      v17 = (uint16x4_t *)((char *)v17 + v29);
      v33 += v25;
      v34 += v25;
      v35 += v25;
      a6 -= 4;
    }
    while (a6);
  }
  return result;
}

char *av1_dist_wtd_convolve_x_neon(char *result, int a2, _DWORD *_X2, int a4, int a5, int a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, uint16x4_t a13, uint16x4_t a14, uint64_t a15)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint8x8_t *v22;
  int16x4_t v23;
  uint8x8_t *v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  uint64_t v29;
  int8x16_t v30;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint8x8_t *v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  uint8x8_t *v46;
  int16x4_t v47;
  uint64_t v48;
  int8x16_t v49;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int16x8_t v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t *v77;
  int8x16_t v78;
  uint64_t *v79;
  int8x16_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint8x8_t v98;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  uint16x8_t *v120;
  int8x16_t v121;
  uint64_t *v122;
  int8x16_t v123;
  uint64_t *v124;
  int8x16_t v125;
  uint64_t *v126;
  int8x16_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int32x4_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  uint16x8_t v178;
  uint16x8_t v179;
  uint16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int v183;
  BOOL v184;
  int v185;
  int v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  uint64_t v196;
  int8x16_t v197;
  int8x16_t v198;
  uint64_t *v199;
  int8x16_t v200;
  uint64_t *v201;
  int8x16_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int32x4_t v212;
  int8x16_t v213;
  int32x4_t v214;
  int32x4_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  uint8x8_t v222;
  int16x8_t v223;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  uint64_t *v242;
  int v243;
  int64x2_t *v244;
  int8x16_t v245;
  int8x16_t v246;
  uint64_t *v247;
  int8x16_t v248;
  uint64_t *v249;
  int8x16_t v250;
  uint64_t v251;
  uint64_t *v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int16x8_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t v295;
  int64x2_t v296;
  int64x2_t v297;
  int64x2_t v298;
  int64x2_t *v299;
  int64x2_t *v300;
  int64x2_t *v301;
  int v302;
  int16x8_t v303;
  unint64_t v304;
  int8x16_t v305;
  uint16x8_t *v307;
  int8x16_t v308;
  int16x8_t v309;
  uint16x8_t v310;
  uint64_t v311;
  int8x16_t v312;
  int16x8_t *v314;
  int8x16_t v315;
  int16x8_t v316;

  if (*(_DWORD *)a15)
  {
    v16 = *(_QWORD *)a7;
    v17 = *(unsigned __int16 *)(a7 + 8);
    if (*(_DWORD *)(a15 + 36))
      return dist_wtd_convolve_x_dist_wtd_avg_neon(result, a2, _X2, a4, a5, a6, v16, v17, a9, a10, a11, a12, a13, a14, a8, a15);
    _X17 = *(uint16x4_t **)(a15 + 8);
    v19 = *(int *)(a15 + 16);
    v20 = v16 + 2 * (a8 & 0xF) * v17;
    v21 = &result[-(v17 >> 1)];
    v22 = (uint8x8_t *)(v21 + 1);
    if (a5 == 4)
    {
      v23 = vshr_n_s16(*(int16x4_t *)(v20 + 4), 1uLL);
      v24 = (uint8x8_t *)(v21 + 3);
      v25 = vdup_lane_s16(v23, 0);
      v26 = vdup_lane_s16(v23, 1);
      v27 = vdup_lane_s16(v23, 2);
      v28 = vdup_lane_s16(v23, 3);
      v29 = 2 * v19;
      do
      {
        v30 = (int8x16_t)vmovl_u8(*v24);
        __asm
        {
          PRFM            #0, [X17]
          PRFM            #0, [X2]
        }
        *(int16x4_t *)v30.i8 = vadd_s16((int16x4_t)vhadd_u16(*_X17, (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)*(_OWORD *)&vextq_s8(v30, v30, 2uLL), v26), *(int16x4_t *)v30.i8, v25), (int16x4_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), v27), (int16x4_t)*(_OWORD *)&vextq_s8(v30, v30, 6uLL), v28), 2uLL)), (int16x4_t)0xE800E800E800E800);
        *_X2 = vqrshrun_n_s16((int16x8_t)v30, 4uLL).u32[0];
        v24 = (uint8x8_t *)((char *)v24 + a2);
        _X2 = (_DWORD *)((char *)_X2 + a4);
        _X17 = (uint16x4_t *)((char *)_X17 + v29);
        --a6;
      }
      while (a6);
      return result;
    }
    v51 = vshrq_n_s16(*(int16x8_t *)v20, 1uLL);
    v52 = vdupq_lane_s16(*(int16x4_t *)v51.i8, 0);
    v53 = vdupq_lane_s16(*(int16x4_t *)v51.i8, 1);
    v54 = vdupq_lane_s16(*(int16x4_t *)v51.i8, 2);
    v55 = vdupq_lane_s16(*(int16x4_t *)v51.i8, 3);
    v56 = vdupq_laneq_s16(v51, 4);
    v57 = vdupq_laneq_s16(v51, 5);
    v58 = vdupq_laneq_s16(v51, 6);
    v59 = vdupq_laneq_s16(v51, 7);
    if (a6 < 8)
    {
      v183 = a6;
      v185 = a2;
      v186 = a5;
      if (a6 < 1)
        return result;
    }
    else
    {
      v60 = a2;
      v61 = a4;
      v62 = 2 * a4;
      v63 = 3 * a4;
      v64 = &_X2[v61];
      v65 = (char *)&_X2[v61] + v63;
      result = (char *)_X2 + v62 + v61 * 4;
      v66 = (char *)_X2 + 5 * a4;
      v67 = (char *)_X2 + v63;
      v68 = 8 * a2;
      v69 = (char *)_X2 + v62;
      v70 = (char *)_X2 + a4;
      v71 = 8 * a4;
      v72 = v21 + 8;
      v73.i64[0] = 0xE800E800E800E800;
      v73.i64[1] = 0xE800E800E800E800;
      do
      {
        v74 = 0;
        *(uint8x8_t *)v75.i8 = *v22;
        *(uint8x8_t *)v76.i8 = *(uint8x8_t *)((char *)v22 + v60);
        v77 = (uint64_t *)((char *)v22 + v60 + v60);
        v78.i64[0] = *v77;
        v79 = (uint64_t *)((char *)v77 + v60);
        v80.i64[0] = *v79;
        v81 = (uint64_t *)((char *)v79 + v60);
        v82 = *v81;
        v83 = (uint64_t *)((char *)v81 + v60);
        v84 = *v83;
        v85 = (uint64_t *)((char *)v83 + v60);
        v75.i64[1] = v82;
        v76.i64[1] = v84;
        v86 = (int16x8_t)vtrn1q_s8(v75, v76);
        v87 = (int16x8_t)vtrn2q_s8(v75, v76);
        v78.i64[1] = *v85;
        v80.i64[1] = *(uint64_t *)((char *)v85 + v60);
        v88 = (int16x8_t)vtrn1q_s8(v78, v80);
        v89 = (int16x8_t)vtrn2q_s8(v78, v80);
        v90 = (int32x4_t)vtrn1q_s16(v86, v88);
        v91 = (int8x16_t)vtrn2q_s16(v86, v88);
        v92 = (int32x4_t)vtrn1q_s16(v87, v89);
        _X9 = (char *)_X17 + 2 * v19;
        v94 = (int32x4_t)vtrn2q_s16(v87, v89);
        v95 = (int8x16_t)vuzp1q_s32(v90, v92);
        v96 = (int8x16_t)vuzp2q_s32(v90, v92);
        v97 = (int8x16_t)vuzp1q_s32((int32x4_t)v91, v94);
        v98 = (uint8x8_t)vextq_s8(v97, v97, 8uLL).u64[0];
        __asm
        {
          PRFM            #0, [X17]
          PRFM            #0, [X9]
        }
        _X9 = (char *)_X17 + 4 * v19;
        __asm { PRFM            #0, [X9] }
        _X9 = (char *)_X17 + 6 * (int)v19;
        __asm { PRFM            #0, [X9] }
        _X9 = &_X17[v19];
        v106 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v95.i8);
        v107 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL));
        v108 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v97.i8);
        v109 = (int16x8_t)vmovl_u8(v98);
        v110 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v96.i8);
        v111 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL));
        v112 = (int16x8_t)vmovl_u8((uint8x8_t)vzip2_s32(*(int32x2_t *)v91.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)));
        __asm { PRFM            #0, [X9] }
        _X9 = (char *)_X17 + 10 * (int)v19;
        __asm { PRFM            #0, [X9] }
        _X9 = (char *)_X17 + 12 * (int)v19;
        __asm { PRFM            #0, [X9] }
        _X9 = (char *)_X17 + 14 * (int)v19;
        __asm { PRFM            #0, [X9] }
        v120 = (uint16x8_t *)_X17;
        do
        {
          v121.i64[0] = *(_QWORD *)&v72[v74];
          v122 = (uint64_t *)&v72[v74 + v60];
          v123.i64[0] = *v122;
          v124 = (uint64_t *)((char *)v122 + v60);
          v125.i64[0] = *v124;
          v126 = (uint64_t *)((char *)v124 + v60);
          v127.i64[0] = *v126;
          v128 = (uint64_t *)((char *)v126 + v60);
          v129 = *v128;
          v130 = (uint64_t *)((char *)v128 + v60);
          v131 = *v130;
          v132 = (uint64_t *)((char *)v130 + v60);
          v121.i64[1] = v129;
          v123.i64[1] = v131;
          v133 = (int16x8_t)vtrn1q_s8(v121, v123);
          v125.i64[1] = *v132;
          v127.i64[1] = *(uint64_t *)((char *)v132 + v60);
          v134 = (int16x8_t)vtrn2q_s8(v121, v123);
          v135 = (int16x8_t)vtrn1q_s8(v125, v127);
          v136 = (int16x8_t)vtrn2q_s8(v125, v127);
          v137 = (int32x4_t)vtrn1q_s16(v133, v135);
          v138 = vtrn2q_s16(v133, v135);
          v139 = (int32x4_t)vtrn1q_s16(v134, v136);
          v140 = (int32x4_t)vtrn2q_s16(v134, v136);
          v141 = (int8x16_t)vuzp1q_s32(v137, v139);
          v142 = (int8x16_t)vuzp2q_s32(v137, v139);
          v143 = (int8x16_t)vuzp1q_s32((int32x4_t)v138, v140);
          v144 = (int8x16_t)vuzp2q_s32((int32x4_t)v138, v140);
          v133.i64[0] = vextq_s8(v142, v142, 8uLL).u64[0];
          v138.i64[0] = vextq_s8(v144, v144, 8uLL).u64[0];
          v145 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v141.i8);
          v146 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v112, v58), v111, v57), v110, v56), v109, v55), v108, v54), v107, v53), v106, v52);
          v106 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL));
          v147 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v112, v57), v111, v56), v110, v55), v109, v54), v108, v53), v107, v52);
          v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v143.i8);
          v148 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v112, v56), v111, v55), v110, v54), v109, v53), v108, v52);
          v108 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
          v149 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v112, v55), v111, v54), v110, v53), v109, v52);
          v109 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v142.i8);
          v150 = vmlaq_s16(vmlaq_s16(vmulq_s16(v112, v54), v111, v53), v110, v52);
          v110 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v133.i8);
          v151 = vmlaq_s16(vmulq_s16(v112, v53), v111, v52);
          v111 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v144.i8);
          v152 = vmulq_s16(v112, v52);
          v112 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v138.i8);
          v138.i64[0] = 0x1800180018001800;
          v138.i64[1] = 0x1800180018001800;
          v153 = vrsraq_n_s16(v138, vmlaq_s16(v146, v59, v145), 2uLL);
          v146.i64[0] = 0x1800180018001800;
          v146.i64[1] = 0x1800180018001800;
          v154 = vrsraq_n_s16(v146, vmlaq_s16(vmlaq_s16(v147, v58, v145), v59, v106), 2uLL);
          v147.i64[0] = 0x1800180018001800;
          v147.i64[1] = 0x1800180018001800;
          v155 = vrsraq_n_s16(v147, vmlaq_s16(vmlaq_s16(vmlaq_s16(v148, v57, v145), v58, v106), v59, v107), 2uLL);
          v148.i64[0] = 0x1800180018001800;
          v148.i64[1] = 0x1800180018001800;
          v156 = vrsraq_n_s16(v148, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v149, v56, v145), v57, v106), v58, v107), v59, v108), 2uLL);
          v149.i64[0] = 0x1800180018001800;
          v149.i64[1] = 0x1800180018001800;
          v157 = vrsraq_n_s16(v149, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v150, v55, v145), v56, v106), v57, v107), v58, v108), v59, v109), 2uLL);
          v150.i64[0] = 0x1800180018001800;
          v150.i64[1] = 0x1800180018001800;
          v158 = vrsraq_n_s16(v150, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v151, v54, v145), v55, v106), v56, v107), v57, v108), v58, v109), v59, v110), 2uLL);
          v151.i64[0] = 0x1800180018001800;
          v151.i64[1] = 0x1800180018001800;
          v159 = vrsraq_n_s16(v151, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v152, v53, v145), v54, v106), v55, v107), v56, v108), v57, v109), v58, v110), v59, v111), 2uLL);
          v160 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v53, v106), v52, v145), v54, v107), v55, v108), v56, v109), v57, v110), v58, v111), v59, v112);
          v145.i64[0] = 0x1800180018001800;
          v145.i64[1] = 0x1800180018001800;
          v161 = vrsraq_n_s16(v145, v160, 2uLL);
          v162 = (int32x4_t)vtrn1q_s16(v153, v154);
          v163 = (int32x4_t)vtrn2q_s16(v153, v154);
          v164 = (int32x4_t)vtrn1q_s16(v155, v156);
          v165 = (int32x4_t)vtrn2q_s16(v155, v156);
          v166 = (int32x4_t)vtrn1q_s16(v157, v158);
          v167 = (int32x4_t)vtrn2q_s16(v157, v158);
          v168 = (int32x4_t)vtrn1q_s16(v159, v161);
          v169 = (int32x4_t)vtrn2q_s16(v159, v161);
          v170 = (int64x2_t)vtrn1q_s32(v162, v164);
          v171 = (int64x2_t)vtrn2q_s32(v162, v164);
          v172 = (int64x2_t)vtrn1q_s32(v163, v165);
          v173 = (int64x2_t)vtrn2q_s32(v163, v165);
          v174 = (int64x2_t)vtrn1q_s32(v166, v168);
          v175 = (int64x2_t)vtrn2q_s32(v166, v168);
          v176 = (int64x2_t)vtrn1q_s32(v167, v169);
          v177 = (int64x2_t)vtrn2q_s32(v167, v169);
          v178 = *(uint16x8_t *)((char *)v120 + 2 * v19);
          v179 = *(uint16x8_t *)((char *)v120 + 4 * v19);
          v180 = *(uint16x8_t *)((char *)v120 + 6 * v19);
          *(int8x8_t *)&_X2[v74 / 4] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*v120, (uint16x8_t)vzip1q_s64(v170, v174)), v73), 4uLL);
          *(int8x8_t *)&v70[v74] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(v178, (uint16x8_t)vzip1q_s64(v172, v176)), v73), 4uLL);
          *(int8x8_t *)&v69[v74] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(v179, (uint16x8_t)vzip1q_s64(v171, v175)), v73), 4uLL);
          *(int8x8_t *)&v67[v74] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(v180, (uint16x8_t)vzip1q_s64(v173, v177)), v73), 4uLL);
          v181 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v120 + 12 * v19), (uint16x8_t)vzip2q_s64(v171, v175)), v73);
          v182 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v120 + 14 * v19), (uint16x8_t)vzip2q_s64(v173, v177)), v73);
          *(int8x8_t *)v172.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v120 + 10 * v19), (uint16x8_t)vzip2q_s64(v172, v176)), v73), 4uLL);
          *(int8x8_t *)&v64[v74 / 4] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v120 + 8 * v19), (uint16x8_t)vzip2q_s64(v170, v174)), v73), 4uLL);
          *(_QWORD *)&v66[v74] = v172.i64[0];
          *(int8x8_t *)&result[v74] = vqrshrun_n_s16(v181, 4uLL);
          *(int8x8_t *)&v65[v74] = vqrshrun_n_s16(v182, 4uLL);
          ++v120;
          v74 += 8;
        }
        while (a5 != (_DWORD)v74);
        _X17 += 2 * (int)v19;
        v22 = (uint8x8_t *)((char *)v22 + v68);
        _X2 = (_DWORD *)((char *)_X2 + v71);
        v183 = a6 - 8;
        v65 += v71;
        result += v71;
        v66 += v71;
        v64 = (_DWORD *)((char *)v64 + v71);
        v67 += v71;
        v69 += v71;
        v70 += v71;
        v72 += v68;
        v184 = a6 <= 15;
        a6 -= 8;
      }
      while (!v184);
      v185 = a2;
      v186 = a5;
      if (v183 < 1)
        return result;
    }
    v303.i64[0] = 0xE800E800E800E800;
    v303.i64[1] = 0xE800E800E800E800;
    do
    {
      v304 = 0;
      v305 = (int8x16_t)vmovl_u8(*v22);
      __asm { PRFM            #0, [X17] }
      v307 = (uint16x8_t *)_X17;
      do
      {
        v308 = (int8x16_t)vmovl_u8(v22[v304 / 2 + 1]);
        v309.i64[0] = 0x1800180018001800;
        v309.i64[1] = 0x1800180018001800;
        v310 = *v307++;
        *(int8x8_t *)&_X2[v304] = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(v310, (uint16x8_t)vrsraq_n_s16(v309, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v305, v52), (int16x8_t)vextq_s8(v305, v308, 2uLL), v53), (int16x8_t)vextq_s8(v305, v308, 4uLL), v54), (int16x8_t)vextq_s8(v305, v308, 6uLL), v55),
                                                                         (int16x8_t)vextq_s8(v305, v308, 8uLL),
                                                                         v56),
                                                                       (int16x8_t)vextq_s8(v305, v308, 0xAuLL),
                                                                       v57),
                                                                     (int16x8_t)vextq_s8(v305, v308, 0xCuLL),
                                                                     v58),
                                                                   (int16x8_t)vextq_s8(v305, v308, 0xEuLL),
                                                                   v59),
                                                                 2uLL)),
                                      v303),
                                    4uLL);
        v304 += 2;
        v305 = v308;
      }
      while (v186 != (_DWORD)(v304 * 4));
      v22 = (uint8x8_t *)((char *)v22 + v185);
      _X17 = (uint16x4_t *)((char *)_X17 + 2 * v19);
      _X2 = (_DWORD *)((char *)_X2 + a4);
      _VF = __OFSUB__(v183--, 1);
    }
    while (!((v183 < 0) ^ _VF | (v183 == 0)));
    return result;
  }
  v37 = *(unsigned __int16 *)(a7 + 8);
  _X8 = *(int16x4_t **)(a15 + 8);
  v39 = *(int *)(a15 + 16);
  v40 = *(_QWORD *)a7 + 2 * (a8 & 0xF) * v37;
  v41 = (uint8x8_t *)&result[-(v37 >> 1) + 1];
  if (a5 == 4)
  {
    v42 = vshr_n_s16(*(int16x4_t *)(v40 + 4), 1uLL);
    v43 = vdup_lane_s16(v42, 0);
    v44 = vdup_lane_s16(v42, 1);
    v45 = vdup_lane_s16(v42, 2);
    v46 = (uint8x8_t *)&result[-(v37 >> 1) + 3];
    v47 = vdup_lane_s16(v42, 3);
    v48 = 2 * v39;
    do
    {
      v49 = (int8x16_t)vmovl_u8(*v46);
      __asm { PRFM            #0, [X8] }
      *_X8 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 2uLL), v44), *(int16x4_t *)v49.i8, v43), (int16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 4uLL), v45), (int16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 6uLL), v47), 2uLL);
      v46 = (uint8x8_t *)((char *)v46 + a2);
      _X8 = (int16x4_t *)((char *)_X8 + v48);
      --a6;
    }
    while (a6);
    return result;
  }
  v187 = vshrq_n_s16(*(int16x8_t *)v40, 1uLL);
  v188 = vdupq_lane_s16(*(int16x4_t *)v187.i8, 0);
  v189 = vdupq_lane_s16(*(int16x4_t *)v187.i8, 1);
  v190 = vdupq_lane_s16(*(int16x4_t *)v187.i8, 2);
  v191 = vdupq_lane_s16(*(int16x4_t *)v187.i8, 3);
  v192 = vdupq_laneq_s16(v187, 4);
  v193 = vdupq_laneq_s16(v187, 5);
  v194 = vdupq_laneq_s16(v187, 6);
  v195 = vdupq_laneq_s16(v187, 7);
  if (a6 < 8)
  {
    v302 = a6;
    if (a6 < 1)
      return result;
    goto LABEL_35;
  }
  v196 = 2 * v39;
  result = (char *)(8 * a2);
  do
  {
    *(uint8x8_t *)v197.i8 = *v41;
    *(uint8x8_t *)v198.i8 = *(uint8x8_t *)((char *)v41 + a2);
    v199 = (uint64_t *)((char *)v41 + a2 + a2);
    v200.i64[0] = *v199;
    v201 = (uint64_t *)((char *)v199 + a2);
    v202.i64[0] = *v201;
    v203 = (uint64_t *)((char *)v201 + a2);
    v204 = *v203;
    v205 = (uint64_t *)((char *)v203 + a2);
    v206 = *v205;
    v207 = (uint64_t *)((char *)v205 + a2);
    v197.i64[1] = v204;
    v198.i64[1] = v206;
    v208 = (int16x8_t)vtrn1q_s8(v197, v198);
    v200.i64[1] = *v207;
    v209 = (int16x8_t)vtrn2q_s8(v197, v198);
    v202.i64[1] = *(uint64_t *)((char *)v207 + a2);
    v210 = (int16x8_t)vtrn1q_s8(v200, v202);
    v211 = (int16x8_t)vtrn2q_s8(v200, v202);
    v212 = (int32x4_t)vtrn1q_s16(v208, v210);
    v213 = (int8x16_t)vtrn2q_s16(v208, v210);
    v214 = (int32x4_t)vtrn1q_s16(v209, v211);
    _X2 = (char *)_X8 + 2 * v39;
    v216 = (int32x4_t)vtrn2q_s16(v209, v211);
    v217 = (int8x16_t)vuzp1q_s32(v212, v214);
    v218 = (int8x16_t)vuzp2q_s32(v212, v214);
    v219 = (int8x16_t)vuzp1q_s32((int32x4_t)v213, v216);
    _X3 = (char *)_X8 + 4 * v39;
    _X6 = (char *)_X8 + 6 * (int)v39;
    v222 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v213.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v213, v213, 8uLL));
    v223 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v217.i8);
    __asm
    {
      PRFM            #0, [X8]
      PRFM            #0, [X2]
    }
    _X2 = &_X8[v39];
    v227 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL));
    v228 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v219.i8);
    v229 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
    v230 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v218.i8);
    v231 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL));
    v232 = (int16x8_t)vmovl_u8(v222);
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X6]
      PRFM            #0, [X2]
    }
    _X2 = (char *)_X8 + 10 * (int)v39;
    __asm { PRFM            #0, [X2] }
    _X2 = (char *)_X8 + 12 * (int)v39;
    __asm { PRFM            #0, [X2] }
    _X2 = (char *)_X8 + 14 * (int)v39;
    __asm { PRFM            #0, [X2] }
    v242 = (uint64_t *)((char *)v41 + 7);
    v243 = a5;
    v244 = (int64x2_t *)_X8;
    do
    {
      v245.i64[0] = *v242;
      v246.i64[0] = *(uint64_t *)((char *)v242 + a2);
      v247 = (uint64_t *)((char *)v242 + a2 + a2);
      v248.i64[0] = *v247;
      v249 = (uint64_t *)((char *)v247 + a2);
      v250.i64[0] = *v249;
      v251 = *(uint64_t *)((char *)v249 + a2);
      v252 = (uint64_t *)((char *)v249 + a2 + a2);
      v245.i64[1] = v251;
      v246.i64[1] = *v252;
      v253 = (int16x8_t)vtrn1q_s8(v245, v246);
      v254 = (int16x8_t)vtrn2q_s8(v245, v246);
      v248.i64[1] = *(uint64_t *)((char *)v252 + a2);
      v250.i64[1] = *(uint64_t *)((char *)v252 + a2 + a2);
      v255 = (int16x8_t)vtrn1q_s8(v248, v250);
      v256 = (int16x8_t)vtrn2q_s8(v248, v250);
      v257 = vtrn1q_s16(v253, v255);
      v258 = (int32x4_t)vtrn2q_s16(v253, v255);
      v259 = (int32x4_t)vtrn1q_s16(v254, v256);
      v260 = vtrn2q_s16(v254, v256);
      v261 = (int8x16_t)vuzp1q_s32((int32x4_t)v257, v259);
      v262 = (int8x16_t)vuzp2q_s32((int32x4_t)v257, v259);
      v263 = (int8x16_t)vuzp1q_s32(v258, (int32x4_t)v260);
      v264 = (int8x16_t)vuzp2q_s32(v258, (int32x4_t)v260);
      v260.i64[0] = vextq_s8(v262, v262, 8uLL).u64[0];
      v257.i64[0] = vextq_s8(v264, v264, 8uLL).u64[0];
      v265 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v232, v194), v231, v193), v230, v192), v229, v191), v228, v190), v227, v189), v223, v188);
      v223 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v261, v261, 8uLL));
      v266 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v232, v193), v231, v192), v230, v191), v229, v190), v228, v189), v227, v188);
      v267 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v261.i8);
      v268 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v232, v192), v231, v191), v230, v190), v229, v189);
      v227 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v263.i8);
      v269 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v232, v191), v231, v190), v230, v189), v229, v188);
      v229 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v262.i8);
      v270 = vmlaq_s16(v268, v228, v188);
      v271 = vmlaq_s16(vmulq_s16(v232, v190), v231, v189);
      v228 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL));
      v272 = vmlaq_s16(vmulq_s16(v232, v189), v231, v188);
      v231 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v264.i8);
      v273 = vmlaq_s16(v271, v230, v188);
      v274 = vmulq_s16(v232, v188);
      v230 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v260.i8);
      v232 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v257.i8);
      v260.i64[0] = 0x1800180018001800;
      v260.i64[1] = 0x1800180018001800;
      v275 = vrsraq_n_s16(v260, vmlaq_s16(v265, v195, v267), 2uLL);
      v265.i64[0] = 0x1800180018001800;
      v265.i64[1] = 0x1800180018001800;
      v257.i64[0] = 0x1800180018001800;
      v257.i64[1] = 0x1800180018001800;
      v276 = vrsraq_n_s16(v265, vmlaq_s16(vmlaq_s16(v266, v194, v267), v195, v223), 2uLL);
      v266.i64[0] = 0x1800180018001800;
      v266.i64[1] = 0x1800180018001800;
      v277 = vrsraq_n_s16(v257, vmlaq_s16(vmlaq_s16(vmlaq_s16(v270, v193, v267), v194, v223), v195, v227), 2uLL);
      v263.i64[0] = 0x1800180018001800;
      v263.i64[1] = 0x1800180018001800;
      v278 = vrsraq_n_s16(v266, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v269, v192, v267), v193, v223), v194, v227), v195, v228), 2uLL);
      v270.i64[0] = 0x1800180018001800;
      v270.i64[1] = 0x1800180018001800;
      v279 = vrsraq_n_s16((int16x8_t)v263, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v273, v191, v267), v192, v223), v193, v227), v194, v228), v195, v229), 2uLL);
      v273.i64[0] = 0x1800180018001800;
      v273.i64[1] = 0x1800180018001800;
      v280 = vrsraq_n_s16(v270, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v272, v190, v267), v191, v223), v192, v227), v193, v228), v194, v229), v195, v230), 2uLL);
      v281 = vrsraq_n_s16(v273, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v274, v189, v267), v190, v223), v191, v227), v192, v228), v193, v229), v194, v230), v195, v231), 2uLL);
      v274.i64[0] = 0x1800180018001800;
      v274.i64[1] = 0x1800180018001800;
      v282 = vrsraq_n_s16(v274, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v189, v223), v188, v267), v190, v227), v191, v228), v192, v229), v193, v230), v194, v231), v195, v232), 2uLL);
      v283 = (int32x4_t)vtrn1q_s16(v275, v276);
      v284 = (int32x4_t)vtrn2q_s16(v275, v276);
      v285 = (int32x4_t)vtrn1q_s16(v277, v278);
      v286 = (int32x4_t)vtrn2q_s16(v277, v278);
      v287 = (int32x4_t)vtrn1q_s16(v279, v280);
      v288 = (int32x4_t)vtrn2q_s16(v279, v280);
      v289 = (int32x4_t)vtrn1q_s16(v281, v282);
      v290 = (int32x4_t)vtrn2q_s16(v281, v282);
      v291 = (int64x2_t)vtrn1q_s32(v283, v285);
      v292 = (int64x2_t)vtrn2q_s32(v283, v285);
      v293 = (int64x2_t)vtrn1q_s32(v284, v286);
      v294 = (int64x2_t)vtrn2q_s32(v284, v286);
      v295 = (int64x2_t)vtrn1q_s32(v287, v289);
      v296 = (int64x2_t)vtrn2q_s32(v287, v289);
      v297 = (int64x2_t)vtrn1q_s32(v288, v290);
      v298 = (int64x2_t)vtrn2q_s32(v288, v290);
      *v244 = vzip1q_s64(v291, v295);
      v299 = (int64x2_t *)((char *)v244 + v196 + v196);
      *(int64x2_t *)((char *)v244 + 2 * v39) = vzip1q_s64(v293, v297);
      *v299 = vzip1q_s64(v292, v296);
      *(int64x2_t *)((char *)v299 + 2 * v39) = vzip1q_s64(v294, v298);
      v300 = (int64x2_t *)((char *)v299 + v196 + v196);
      *v300 = vzip2q_s64(v291, v295);
      *(int64x2_t *)((char *)v300 + 2 * v39) = vzip2q_s64(v293, v297);
      v301 = (int64x2_t *)((char *)v300 + v196 + v196);
      *v301 = vzip2q_s64(v292, v296);
      *(int64x2_t *)((char *)v301 + 2 * v39) = vzip2q_s64(v294, v298);
      ++v242;
      ++v244;
      v243 -= 8;
    }
    while (v243);
    v41 = (uint8x8_t *)&result[(_QWORD)v41];
    _X8 += 2 * (int)v39;
    v302 = a6 - 8;
    v184 = a6 <= 15;
    a6 -= 8;
  }
  while (!v184);
  if (v302 >= 1)
  {
    do
    {
LABEL_35:
      v311 = 0;
      v312 = (int8x16_t)vmovl_u8(*v41);
      __asm { PRFM            #0, [X8] }
      v314 = (int16x8_t *)_X8;
      do
      {
        v315 = (int8x16_t)vmovl_u8(v41[v311 + 1]);
        v316.i64[0] = 0x1800180018001800;
        v316.i64[1] = 0x1800180018001800;
        *v314++ = vrsraq_n_s16(v316, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v312, v188), (int16x8_t)vextq_s8(v312, v315, 2uLL), v189), (int16x8_t)vextq_s8(v312, v315, 4uLL), v190), (int16x8_t)vextq_s8(v312, v315, 6uLL), v191), (int16x8_t)vextq_s8(v312, v315, 8uLL), v192), (int16x8_t)vextq_s8(v312, v315, 0xAuLL), v193), (int16x8_t)vextq_s8(v312, v315, 0xCuLL), v194), (int16x8_t)vextq_s8(v312, v315, 0xEuLL),
                      v195),
                    2uLL);
        ++v311;
        v312 = v315;
      }
      while (a5 != (_DWORD)(v311 * 8));
      v41 = (uint8x8_t *)((char *)v41 + a2);
      _X8 = (int16x4_t *)((char *)_X8 + 2 * v39);
      _VF = __OFSUB__(v302--, 1);
    }
    while (!((v302 < 0) ^ _VF | (v302 == 0)));
  }
  return result;
}

char *dist_wtd_convolve_x_dist_wtd_avg_neon(char *result, int a2, _DWORD *_X2, int a4, int a5, int a6, uint64_t a7, unsigned __int16 a8, double a9, double a10, double a11, double a12, uint16x4_t a13, uint16x4_t a14, char a15, uint64_t a16)
{
  uint16x4_t v16;
  uint16x4_t v17;
  __int32 v18;
  uint64_t v19;
  char *v20;
  uint8x8_t *v21;
  uint64_t v23;
  int16x4_t v24;
  uint8x8_t *v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  uint64_t v30;
  int8x16_t v31;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  int16x8_t v60;
  unint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint64_t *v64;
  int8x16_t v65;
  uint64_t *v66;
  int8x16_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint8x8_t v85;
  uint8x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  uint16x4_t *v108;
  int8x16_t v109;
  uint64_t *v110;
  int8x16_t v111;
  uint64_t *v112;
  int8x16_t v113;
  uint64_t *v114;
  int8x16_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  uint16x8_t v168;
  uint16x8_t v169;
  uint16x8_t v170;
  uint16x8_t v171;
  uint16x8_t v172;
  uint16x8_t v173;
  uint16x8_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  uint16x8_t v178;
  uint16x8_t v179;
  int v180;
  BOOL v181;
  int16x8_t v182;
  unint64_t v183;
  int8x16_t v184;
  uint16x8_t *v186;
  int8x16_t v187;
  int16x8_t v188;
  uint16x8_t v189;
  uint16x8_t v190;
  __int32 v191;

  v18 = *(_DWORD *)(a16 + 40);
  v19 = a7 + 2 * (a15 & 0xF) * a8;
  v20 = &result[-(a8 >> 1)];
  v21 = (uint8x8_t *)(v20 + 1);
  _X6 = *(uint16x4_t **)(a16 + 8);
  v23 = *(int *)(a16 + 16);
  if (a5 == 4)
  {
    v24 = vshr_n_s16(*(int16x4_t *)(v19 + 4), 1uLL);
    v25 = (uint8x8_t *)(v20 + 3);
    v26 = vdup_lane_s16(v24, 0);
    v27 = vdup_lane_s16(v24, 1);
    v28 = vdup_lane_s16(v24, 2);
    v29 = vdup_lane_s16(v24, 3);
    a13.i32[0] = *(_DWORD *)(a16 + 40);
    a14.i32[0] = *(_DWORD *)(a16 + 44);
    v30 = 2 * v23;
    do
    {
      v31 = (int8x16_t)vmovl_u8(*v25);
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X2]
      }
      v38 = (int16x8_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v27), *(int16x4_t *)v31.i8, v26), (int16x4_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v28), (int16x4_t)*(_OWORD *)&vextq_s8(v31, v31, 6uLL), v29), 2uLL), a14, 0), *_X6, a13, 0);
      *(int16x4_t *)v38.i8 = vadd_s16(vshrn_n_s32((int32x4_t)v38, 4uLL), (int16x4_t)0xE800E800E800E800);
      *_X2 = vqrshrun_n_s16(v38, 4uLL).u32[0];
      v25 = (uint8x8_t *)((char *)v25 + a2);
      _X2 = (_DWORD *)((char *)_X2 + a4);
      _X6 = (uint16x4_t *)((char *)_X6 + v30);
      --a6;
    }
    while (a6);
    return result;
  }
  v39 = vshrq_n_s16(*(int16x8_t *)v19, 1uLL);
  v40 = vdupq_lane_s16(*(int16x4_t *)v39.i8, 0);
  v41 = vdupq_lane_s16(*(int16x4_t *)v39.i8, 1);
  v42 = vdupq_lane_s16(*(int16x4_t *)v39.i8, 2);
  v43 = vdupq_lane_s16(*(int16x4_t *)v39.i8, 3);
  v44 = vdupq_laneq_s16(v39, 4);
  v45 = vdupq_laneq_s16(v39, 5);
  v46 = vdupq_laneq_s16(v39, 6);
  v47 = vdupq_laneq_s16(v39, 7);
  v191 = *(_DWORD *)(a16 + 44);
  if (a6 < 8)
  {
    v180 = a6;
    if (a6 < 1)
      return result;
    goto LABEL_14;
  }
  v16.i32[0] = *(_DWORD *)(a16 + 40);
  v17.i32[0] = *(_DWORD *)(a16 + 44);
  v48 = a4;
  v49 = 2 * a4;
  v50 = 3 * a4;
  v51 = &_X2[v48];
  result = (char *)&_X2[v48] + v50;
  v52 = (char *)_X2 + v49 + v48 * 4;
  v53 = (char *)_X2 + 5 * a4;
  v54 = (char *)_X2 + v50;
  v55 = 8 * a2;
  v56 = (char *)_X2 + v49;
  v57 = (char *)_X2 + a4;
  v58 = 8 * a4;
  v59 = v20 + 8;
  v60.i64[0] = 0xE800E800E800E800;
  v60.i64[1] = 0xE800E800E800E800;
  do
  {
    v61 = 0;
    *(uint8x8_t *)v62.i8 = *v21;
    *(uint8x8_t *)v63.i8 = *(uint8x8_t *)((char *)v21 + a2);
    v64 = (uint64_t *)((char *)v21 + a2 + a2);
    v65.i64[0] = *v64;
    v66 = (uint64_t *)((char *)v64 + a2);
    v67.i64[0] = *v66;
    v68 = (uint64_t *)((char *)v66 + a2);
    v69 = *v68;
    v70 = (uint64_t *)((char *)v68 + a2);
    v71 = *v70;
    v72 = (uint64_t *)((char *)v70 + a2);
    v62.i64[1] = v69;
    v63.i64[1] = v71;
    v73 = (int16x8_t)vtrn1q_s8(v62, v63);
    v74 = (int16x8_t)vtrn2q_s8(v62, v63);
    v65.i64[1] = *v72;
    v67.i64[1] = *(uint64_t *)((char *)v72 + a2);
    v75 = (int16x8_t)vtrn1q_s8(v65, v67);
    v76 = (int16x8_t)vtrn2q_s8(v65, v67);
    v77 = (int32x4_t)vtrn1q_s16(v73, v75);
    v78 = (int32x4_t)vtrn2q_s16(v73, v75);
    v79 = (int32x4_t)vtrn1q_s16(v74, v76);
    _X8 = (char *)_X6 + 2 * v23;
    v81 = (int32x4_t)vtrn2q_s16(v74, v76);
    v82 = (int8x16_t)vuzp1q_s32(v77, v79);
    v83 = (int8x16_t)vuzp2q_s32(v77, v79);
    v84 = (int8x16_t)vuzp1q_s32(v78, v81);
    v85 = (uint8x8_t)vextq_s8(v83, v83, 8uLL).u64[0];
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X8]
    }
    _X8 = (char *)_X6 + 4 * v23;
    __asm { PRFM            #0, [X8] }
    _X8 = (char *)_X6 + 6 * (int)v23;
    __asm { PRFM            #0, [X8] }
    _X8 = &_X6[v23];
    v93 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v78.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
    v94 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v82.i8);
    v95 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
    v96 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v84.i8);
    v97 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
    v98 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v83.i8);
    v99 = (int16x8_t)vmovl_u8(v85);
    v100 = (int16x8_t)vmovl_u8(v93);
    __asm { PRFM            #0, [X8] }
    _X8 = (char *)_X6 + 10 * (int)v23;
    __asm { PRFM            #0, [X8] }
    _X8 = (char *)_X6 + 12 * (int)v23;
    __asm { PRFM            #0, [X8] }
    _X8 = (char *)_X6 + 14 * (int)v23;
    __asm { PRFM            #0, [X8] }
    v108 = _X6;
    do
    {
      v109.i64[0] = *(_QWORD *)&v59[v61];
      v110 = (uint64_t *)&v59[v61 + a2];
      v111.i64[0] = *v110;
      v112 = (uint64_t *)((char *)v110 + a2);
      v113.i64[0] = *v112;
      v114 = (uint64_t *)((char *)v112 + a2);
      v115.i64[0] = *v114;
      v116 = (uint64_t *)((char *)v114 + a2);
      v117 = *v116;
      v118 = (uint64_t *)((char *)v116 + a2);
      v119 = *v118;
      v120 = (uint64_t *)((char *)v118 + a2);
      v109.i64[1] = v117;
      v111.i64[1] = v119;
      v121 = (int16x8_t)vtrn1q_s8(v109, v111);
      v113.i64[1] = *v120;
      v122 = (int16x8_t)vtrn2q_s8(v109, v111);
      v115.i64[1] = *(uint64_t *)((char *)v120 + a2);
      v123 = (int16x8_t)vtrn1q_s8(v113, v115);
      v124 = (int16x8_t)vtrn2q_s8(v113, v115);
      v125 = (int32x4_t)vtrn1q_s16(v121, v123);
      v126 = vtrn2q_s16(v121, v123);
      v127 = (int32x4_t)vtrn1q_s16(v122, v124);
      v128 = (int32x4_t)vtrn2q_s16(v122, v124);
      v129 = (int8x16_t)vuzp1q_s32(v125, v127);
      v130 = (int8x16_t)vuzp2q_s32(v125, v127);
      v131 = (int8x16_t)vuzp1q_s32((int32x4_t)v126, v128);
      v132 = (int8x16_t)vuzp2q_s32((int32x4_t)v126, v128);
      v121.i64[0] = vextq_s8(v130, v130, 8uLL).u64[0];
      v126.i64[0] = vextq_s8(v132, v132, 8uLL).u64[0];
      v133 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v129.i8);
      v134 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v46), v99, v45), v98, v44), v97, v43), v96, v42), v95, v41), v94, v40);
      v94 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL));
      v135 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v45), v99, v44), v98, v43), v97, v42), v96, v41), v95, v40);
      v95 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v131.i8);
      v136 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v44), v99, v43), v98, v42), v97, v41), v96, v40);
      v96 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL));
      v137 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v43), v99, v42), v98, v41), v97, v40);
      v97 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v130.i8);
      v138 = vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v42), v99, v41), v98, v40);
      v98 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v121.i8);
      v139 = vmlaq_s16(vmulq_s16(v100, v41), v99, v40);
      v99 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v132.i8);
      v140 = vmulq_s16(v100, v40);
      v100 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v126.i8);
      v126.i64[0] = 0x1800180018001800;
      v126.i64[1] = 0x1800180018001800;
      v141 = vrsraq_n_s16(v126, vmlaq_s16(v134, v47, v133), 2uLL);
      v134.i64[0] = 0x1800180018001800;
      v134.i64[1] = 0x1800180018001800;
      v142 = vrsraq_n_s16(v134, vmlaq_s16(vmlaq_s16(v135, v46, v133), v47, v94), 2uLL);
      v135.i64[0] = 0x1800180018001800;
      v135.i64[1] = 0x1800180018001800;
      v143 = vrsraq_n_s16(v135, vmlaq_s16(vmlaq_s16(vmlaq_s16(v136, v45, v133), v46, v94), v47, v95), 2uLL);
      v136.i64[0] = 0x1800180018001800;
      v136.i64[1] = 0x1800180018001800;
      v144 = vrsraq_n_s16(v136, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v137, v44, v133), v45, v94), v46, v95), v47, v96), 2uLL);
      v137.i64[0] = 0x1800180018001800;
      v137.i64[1] = 0x1800180018001800;
      v145 = vrsraq_n_s16(v137, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v138, v43, v133), v44, v94), v45, v95), v46, v96), v47, v97), 2uLL);
      v138.i64[0] = 0x1800180018001800;
      v138.i64[1] = 0x1800180018001800;
      v146 = vrsraq_n_s16(v138, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v139, v42, v133), v43, v94), v44, v95), v45, v96), v46, v97), v47, v98), 2uLL);
      v139.i64[0] = 0x1800180018001800;
      v139.i64[1] = 0x1800180018001800;
      v147 = vrsraq_n_s16(v139, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v140, v41, v133), v42, v94), v43, v95), v44, v96), v45, v97), v46, v98), v47, v99), 2uLL);
      v148 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v41, v94), v40, v133), v42, v95), v43, v96), v44, v97), v45, v98), v46, v99), v47, v100);
      v133.i64[0] = 0x1800180018001800;
      v133.i64[1] = 0x1800180018001800;
      v149 = vrsraq_n_s16(v133, v148, 2uLL);
      v150 = (int32x4_t)vtrn1q_s16(v141, v142);
      v151 = (int32x4_t)vtrn2q_s16(v141, v142);
      v152 = (int32x4_t)vtrn1q_s16(v143, v144);
      v153 = (int32x4_t)vtrn2q_s16(v143, v144);
      v154 = (int32x4_t)vtrn1q_s16(v145, v146);
      v155 = (int32x4_t)vtrn2q_s16(v145, v146);
      v156 = (int32x4_t)vtrn1q_s16(v147, v149);
      v157 = (int32x4_t)vtrn2q_s16(v147, v149);
      v158 = (int64x2_t)vtrn1q_s32(v150, v152);
      v159 = (int64x2_t)vtrn2q_s32(v150, v152);
      v160 = (int64x2_t)vtrn1q_s32(v151, v153);
      v161 = (int64x2_t)vtrn2q_s32(v151, v153);
      v162 = (int64x2_t)vtrn1q_s32(v154, v156);
      v163 = (int64x2_t)vtrn2q_s32(v154, v156);
      v164 = (int64x2_t)vtrn1q_s32(v155, v157);
      v165 = (int64x2_t)vtrn2q_s32(v155, v157);
      v166 = (uint16x8_t)vzip1q_s64(v158, v162);
      v167 = (uint16x8_t)vzip2q_s64(v158, v162);
      v168 = (uint16x8_t)vzip1q_s64(v160, v164);
      v169 = (uint16x8_t)vzip2q_s64(v160, v164);
      v170 = (uint16x8_t)vzip1q_s64(v159, v163);
      v171 = (uint16x8_t)vzip2q_s64(v159, v163);
      v172 = (uint16x8_t)vzip1q_s64(v161, v165);
      v173 = (uint16x8_t)vzip2q_s64(v161, v165);
      v174 = *(uint16x8_t *)&v108->i8[2 * v23];
      v175 = *(uint16x8_t *)&v108->i8[4 * v23];
      v176 = *(uint16x8_t *)&v108->i8[6 * v23];
      *(int8x8_t *)&_X2[v61 / 4] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v166.i8, v17, 0), *v108, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v166, v17, 0), *(uint16x8_t *)v108->i8, v16, 0), 4uLL), v60), 4uLL);
      *(int8x8_t *)&v57[v61] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v168.i8, v17, 0), *(uint16x4_t *)v174.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v168, v17, 0), v174, v16, 0), 4uLL), v60), 4uLL);
      *(int8x8_t *)&v56[v61] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v170.i8, v17, 0), *(uint16x4_t *)v175.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v170, v17, 0), v175, v16, 0), 4uLL), v60), 4uLL);
      *(int8x8_t *)&v54[v61] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v172.i8, v17, 0), *(uint16x4_t *)v176.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v172, v17, 0), v176, v16, 0), 4uLL), v60), 4uLL);
      v177 = *(uint16x8_t *)&v108->i8[10 * v23];
      v178 = *(uint16x8_t *)&v108->i8[12 * v23];
      v179 = *(uint16x8_t *)&v108->i8[14 * v23];
      *(int8x8_t *)&v51[v61 / 4] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v167.i8, v17, 0), v108[v23], v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v167, v17, 0), *(uint16x8_t *)v108[v23].i8, v16, 0), 4uLL), v60), 4uLL);
      *(int8x8_t *)&v53[v61] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v169.i8, v17, 0), *(uint16x4_t *)v177.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v169, v17, 0), v177, v16, 0), 4uLL), v60), 4uLL);
      *(int8x8_t *)&v52[v61] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v171.i8, v17, 0), *(uint16x4_t *)v178.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v171, v17, 0), v178, v16, 0), 4uLL), v60), 4uLL);
      *(int8x8_t *)&result[v61] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v173.i8, v17, 0), *(uint16x4_t *)v179.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v173, v17, 0), v179, v16, 0), 4uLL), v60), 4uLL);
      v108 += 2;
      v61 += 8;
    }
    while (a5 != (_DWORD)v61);
    _X6 += 2 * (int)v23;
    v21 = (uint8x8_t *)((char *)v21 + v55);
    _X2 = (_DWORD *)((char *)_X2 + v58);
    v180 = a6 - 8;
    result += v58;
    v52 += v58;
    v53 += v58;
    v51 = (_DWORD *)((char *)v51 + v58);
    v54 += v58;
    v56 += v58;
    v57 += v58;
    v59 += v55;
    v181 = a6 <= 15;
    a6 -= 8;
  }
  while (!v181);
  if (v180 >= 1)
  {
LABEL_14:
    v16.i32[0] = v18;
    v17.i32[0] = v191;
    v182.i64[0] = 0xE800E800E800E800;
    v182.i64[1] = 0xE800E800E800E800;
    do
    {
      v183 = 0;
      v184 = (int8x16_t)vmovl_u8(*v21);
      __asm { PRFM            #0, [X6] }
      v186 = (uint16x8_t *)_X6;
      do
      {
        v187 = (int8x16_t)vmovl_u8(v21[v183 / 2 + 1]);
        v188.i64[0] = 0x1800180018001800;
        v188.i64[1] = 0x1800180018001800;
        v189 = (uint16x8_t)vrsraq_n_s16(v188, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v184, v40), (int16x8_t)vextq_s8(v184, v187, 2uLL), v41), (int16x8_t)vextq_s8(v184, v187, 4uLL), v42), (int16x8_t)vextq_s8(v184, v187, 6uLL), v43), (int16x8_t)vextq_s8(v184, v187, 8uLL), v44), (int16x8_t)vextq_s8(v184, v187, 0xAuLL), v45),
                                 (int16x8_t)vextq_s8(v184, v187, 0xCuLL),
                                 v46),
                               (int16x8_t)vextq_s8(v184, v187, 0xEuLL),
                               v47),
                             2uLL);
        v190 = *v186++;
        *(int8x8_t *)&_X2[v183] = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v189.i8, v17, 0), *(uint16x4_t *)v190.i8, v16, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v189, v17, 0), v190, v16, 0), 4uLL), v182), 4uLL);
        v183 += 2;
        v184 = v187;
      }
      while (a5 != (_DWORD)(v183 * 4));
      v21 = (uint8x8_t *)((char *)v21 + a2);
      _X6 = (uint16x4_t *)((char *)_X6 + 2 * v23);
      _X2 = (_DWORD *)((char *)_X2 + a4);
      _VF = __OFSUB__(v180--, 1);
    }
    while (!((v180 < 0) ^ _VF | (v180 == 0)));
  }
  return result;
}

uint64_t av1_dist_wtd_convolve_y_neon(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, uint16x4_t a15, uint16x4_t a16, uint64_t a17)
{
  int16x4_t v17;
  int16x4_t v18;
  int16x8_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x8_t v23;
  int16x4_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x4_t v28;
  uint16x4_t v29;
  int v30;
  unsigned int v32;
  int16x8_t v33;
  int16x8_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint64_t v50;
  uint64_t v51;
  int16x8_t v52;
  uint64_t v53;
  int16x8_t v54;
  uint64_t v55;
  uint8x8_t *v75;
  uint8x8_t v76;
  uint8x8_t *v77;
  uint8x8_t v78;
  uint8x8_t *v79;
  uint8x8_t v80;
  uint8x8_t *v81;
  uint8x8_t v82;
  uint8x8_t v83;
  int16x8_t v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int16x8_t v98;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint8x8_t *v103;
  uint8x8_t v104;
  uint8x8_t *v105;
  uint8x8_t v106;
  uint8x8_t *v107;
  uint8x8_t v108;
  uint8x8_t *v109;
  uint8x8_t v110;
  uint8x8_t *v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  uint16x8_t v151;
  uint16x8_t v152;
  uint16x8_t v153;
  int16x8_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  uint16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  uint8x8_t *v172;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  uint8x8_t *v203;
  uint8x8_t v204;
  uint8x8_t *v205;
  uint8x8_t v206;
  uint8x8_t *v207;
  uint8x8_t v208;
  uint8x8_t *v209;
  uint8x8_t v210;
  uint8x8_t v211;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t *v222;
  uint64_t v223;
  int v224;
  uint8x8_t *v225;
  uint8x8_t v226;
  uint8x8_t *v227;
  uint8x8_t v228;
  uint8x8_t *v229;
  int16x8_t v230;
  uint8x8_t v231;
  uint8x8_t *v232;
  uint8x8_t v233;
  uint8x8_t *v234;
  uint8x8_t v235;
  uint8x8_t *v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t *v264;
  int16x8_t *v265;
  int16x8_t *v266;
  int16x8_t *v267;
  int16x8_t *v268;
  int16x8_t *v269;
  int16x8_t *v270;
  uint64_t v271;
  int16x4_t v272;
  int16x4_t v273;
  int16x4_t v274;
  int16x4_t v275;
  int16x4_t v276;
  int16x4_t v277;
  uint64_t v278;
  int16x4_t v279;
  uint64_t v280;
  int16x4_t v281;
  int16x8_t v282;
  int v283;
  uint8x8_t *v291;
  int16x4_t v292;
  int16x4_t v293;
  int16x4_t v294;
  int16x4_t v295;
  uint64_t v298;
  uint64_t v300;
  uint64_t v301;
  uint64_t v304;
  uint64_t v305;
  uint16x8_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int16x4_t v314;
  int16x4_t v315;
  int16x4_t v317;
  int16x4_t v318;
  int16x4_t v319;
  int16x4_t v320;
  int16x4_t v321;
  int16x4_t v322;
  int16x4_t v323;
  int8x8_t v338;
  _DWORD *v339;
  uint64_t v340;
  uint16x8_t *v341;
  uint64_t v342;
  uint64_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int16x8_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int16x8_t v363;
  uint64_t v364;
  int v365;
  uint8x8_t *v366;
  uint8x8_t v367;
  uint8x8_t *v368;
  int16x8_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int16x8_t v381;
  uint16x8_t *v382;
  uint64_t v383;
  int v384;
  uint8x8_t *v385;
  uint8x8_t v386;
  uint8x8_t *v387;
  uint8x8_t v388;
  uint8x8_t *v389;
  uint8x8_t v390;
  uint8x8_t *v391;
  uint8x8_t v392;
  uint8x8_t *v393;
  uint8x8_t v394;
  uint8x8_t *v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  uint16x8_t v414;
  uint16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  uint16x8_t v418;
  uint16x8_t v419;
  uint16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t v423;
  int16x4_t v424;
  int16x4_t v425;
  int16x4_t v426;
  int16x4_t v427;
  int16x4_t v428;
  int16x4_t v429;
  int16x4_t v430;
  int16x4_t v431;
  __int32 *v440;
  int16x4_t v441;
  int16x4_t v442;
  int16x4_t v443;
  int16x4_t *v450;
  int v451;
  int16x4_t v453;
  int16x4_t v454;
  int16x4_t v455;
  int16x4_t v456;
  int16x4_t v457;
  uint64_t v458;
  uint8x8_t *v459;
  int16x4_t *v460;
  uint64_t v461;
  int16x8_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int16x8_t v466;
  int16x8_t v467;
  uint64_t v468;
  uint8x8_t *v469;
  uint8x8_t *v470;
  uint8x8_t v471;
  uint8x8_t *v472;
  int16x8_t v473;
  int16x8_t v474;
  int16x8_t v475;
  int16x8_t v476;
  int16x8_t v477;
  int16x8_t *v478;
  int v479;
  uint8x8_t v480;
  uint8x8_t *v481;
  uint8x8_t v482;
  uint8x8_t *v483;
  int16x8_t v484;
  uint8x8_t v485;
  uint8x8_t *v486;
  int16x8_t v487;
  uint8x8_t v488;
  uint8x8_t *v489;
  int16x8_t v490;
  uint8x8_t v491;
  uint8x8_t *v492;
  uint8x8_t v493;
  uint8x8_t *v494;
  uint8x8_t v495;
  uint8x8_t *v496;
  int16x8_t v497;
  int16x8_t v498;
  int16x8_t v499;
  int16x8_t v500;
  int16x8_t v501;
  int16x8_t v502;
  int16x8_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int16x8_t v509;
  int16x8_t v510;
  int16x8_t v511;
  int16x8_t v512;
  int16x8_t v513;
  int16x8_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int16x8_t *v517;
  int16x8_t *v518;
  int16x8_t *v519;
  int16x8_t *v520;
  int16x8_t *v521;
  int16x8_t *v522;
  int16x8_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int16x4_t v527;
  int16x4_t v528;
  int16x4_t v529;
  int16x4_t v530;
  int16x4_t v531;
  uint64_t v532;
  __int8 *v533;
  uint64_t v534;
  uint64_t v535;
  int16x4_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int16x8_t v540;
  uint64_t v541;
  __int8 *v542;
  __int8 *v543;
  int v544;
  uint64_t v545;
  int16x4_t v546;
  uint64_t v547;
  int16x4_t v548;
  int16x4_t v549;
  int16x4_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int16x4_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  int16x4_t v560;
  int16x4_t v561;
  int16x4_t v562;
  int16x4_t v563;
  int16x4_t v564;
  int16x4_t v565;
  int16x4_t v566;
  int16x8_t v567;
  _DWORD *v568;
  uint64_t v569;
  int16x4_t v570;
  int16x4_t v571;
  int16x4_t v572;
  int16x4_t v573;
  int16x4_t v574;
  int16x4_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int16x4_t v582;
  int16x4_t v583;
  int16x4_t v584;
  uint8x8_t *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int16x4_t *v589;
  int v590;
  int16x4_t v591;
  int16x4_t v592;
  int16x4_t v593;
  int16x4_t v594;
  int16x4_t v595;
  int16x4_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint8x8_t *v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  __int8 *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  __int8 *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  __int8 *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;

  v30 = a5;
  v32 = *(unsigned __int16 *)(a7 + 8);
  v33 = *(int16x8_t *)(*(_QWORD *)a7 + 2 * (a8 & 0xF) * v32);
  v34 = vshrq_n_s16(v33, 1uLL);
  v35 = (int)(((v32 >> 1) - 1) * a2);
  result = a1 - v35;
  if (v32 == 12 || v33.i16[7] | v33.i16[0])
  {
    if (*(_DWORD *)a17)
    {
      if (*(_DWORD *)(a17 + 36))
      {
        return (uint64_t)dist_wtd_convolve_y_8tap_dist_wtd_avg_neon((uint8x8_t *)result, a2, a3, a4, a5, a6, a17, v34, *(uint16x4_t *)v33.i8, *(uint16x4_t *)&a11);
      }
      else
      {
        _X16 = (uint8x8_t *)result;
        _X4 = *(uint16x8_t **)(a17 + 8);
        v619 = *(int *)(a17 + 16);
        v39 = a2;
        v617 = 2 * a2;
        v40 = 4 * a2;
        v615 = 5 * a2;
        v616 = 3 * a2;
        v614 = 6 * a2;
        if (v30 == 4 || a6 == 4)
        {
          v271 = 0;
          v635 = 2 * (int)v619;
          v631 = 3 * (int)v619;
          v272 = vdup_lane_s16(*(int16x4_t *)v34.i8, 0);
          v273 = vdup_lane_s16(*(int16x4_t *)v34.i8, 1);
          v274 = vdup_lane_s16(*(int16x4_t *)v34.i8, 2);
          v275 = vdup_lane_s16(*(int16x4_t *)v34.i8, 3);
          v276 = vdup_laneq_s16(v34, 4);
          v277 = vdup_laneq_s16(v34, 5);
          v278 = 7 * a2;
          v279 = vdup_laneq_s16(v34, 6);
          v627 = a3 + 3 * a4;
          v624 = a3 + 2 * a4;
          v280 = 4 * a4;
          v611 = a3 + a4;
          v613 = a3 + 3 * a4;
          v281 = vdup_laneq_s16(v34, 7);
          v607 = a1 + v278 + v616 - v35;
          v609 = a1 + v278 + v617 - v35;
          v282.i64[0] = 0xE800E800E800E800;
          v282.i64[1] = 0xE800E800E800E800;
          v604 = a1 + v278 - v35;
          v606 = a1 + v39 + v278 - v35;
          do
          {
            v283 = v30;
            __asm { PRFM            #0, [X16] }
            _X9 = (char *)_X16 + v39;
            __asm { PRFM            #0, [X9] }
            _X10 = (char *)_X16 + v617;
            __asm { PRFM            #0, [X10] }
            _X12 = (char *)_X16 + v616;
            __asm { PRFM            #0, [X12] }
            v20.i32[0] = *(__int32 *)((char *)_X16->i32 + v39);
            v21.i32[0] = *(__int32 *)((char *)_X16->i32 + v617);
            v22.i32[0] = *(__int32 *)((char *)_X16->i32 + v616);
            v24.i32[0] = _X16->i32[v39];
            v291 = _X16;
            v25.i32[0] = *(__int32 *)((char *)_X16->i32 + v615);
            v26.i32[0] = *(__int32 *)((char *)_X16->i32 + v614);
            v292 = (int16x4_t)vmovl_u8((uint8x8_t)_X16->u32[0]).u64[0];
            v293 = (int16x4_t)vmovl_u8((uint8x8_t)v20).u64[0];
            v294 = (int16x4_t)vmovl_u8((uint8x8_t)v21).u64[0];
            v295 = (int16x4_t)vmovl_u8((uint8x8_t)v22).u64[0];
            v21 = (int16x4_t)vmovl_u8((uint8x8_t)v24).u64[0];
            _X13 = &_X4->i8[2 * v619];
            _X1 = &_X4->i8[2 * v635];
            v22 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v25.i8).u64[0];
            v24 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v26.i8).u64[0];
            v298 = v627;
            _X3 = &_X4->i8[2 * v631];
            v300 = v604;
            v301 = v606;
            __asm
            {
              PRFM            #0, [X4]
              PRFM            #0, [X13]
            }
            v305 = v607;
            v304 = v609;
            v306 = _X4;
            result = (uint64_t)_X4;
            v307 = v611;
            v308 = v613;
            __asm
            {
              PRFM            #0, [X1]
              PRFM            #0, [X3]
            }
            v311 = v624;
            v312 = a3;
            v313 = a6;
            do
            {
              v314 = v21;
              v315 = v24;
              _X1 = (_DWORD *)(v312 + v271);
              v29.i32[0] = *(_DWORD *)(v300 + v271);
              v24.i32[0] = *(_DWORD *)(v301 + v271);
              v25.i32[0] = *(_DWORD *)(v304 + v271);
              v27.i32[0] = *(_DWORD *)(v305 + v271);
              v317 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v315, v279), v22, v277), v314, v276), v295, v275);
              v318 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v315, v277), v22, v276), v314, v275), v295, v274);
              v319 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v315, v276), v22, v275), v314, v274), v295, v273);
              v320 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v315, v275), v22, v274), v314, v273), v295, v272);
              v295 = (int16x4_t)vmovl_u8((uint8x8_t)v29).u64[0];
              v321 = vmla_s16(vmla_s16(v317, v294, v274), v293, v273);
              v322 = vmla_s16(vmla_s16(v318, v294, v273), v293, v272);
              v293 = v22;
              v22 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v25.i8).u64[0];
              v323 = vmla_s16(v319, v294, v272);
              v294 = v315;
              v21 = (int16x4_t)vmovl_u8((uint8x8_t)v24).u64[0];
              v24 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v27.i8).u64[0];
              __asm { PRFM            #0, [X0] }
              _X15 = (uint16x4_t *)(result + 2 * v619);
              __asm { PRFM            #0, [X15] }
              _X16 = result + 2 * v635;
              __asm { PRFM            #0, [X16] }
              _X16 = result + 2 * v631;
              __asm
              {
                PRFM            #0, [X16]
                PRFM            #0, [X1]
              }
              _X16 = (_DWORD *)(v307 + v271);
              __asm { PRFM            #0, [X16] }
              _X5 = (_DWORD *)(v311 + v271);
              __asm { PRFM            #0, [X5] }
              _X24 = v298 + v271;
              __asm { PRFM            #0, [X24] }
              *(uint16x4_t *)v26.i8 = vhadd_u16(*(uint16x4_t *)result, (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(v321, v292, v272), v295, v281), 2uLL));
              v29 = (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmla_s16(v320, v295, v276), v21, v277), v22, v279), v24, v281), 2uLL);
              *(uint16x4_t *)v27.i8 = vhadd_u16(*(uint16x4_t *)(result + 4 * v619), (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(v323, v295, v277), v21, v279), v22, v281), 2uLL));
              v26.u64[1] = (unint64_t)vhadd_u16(*_X15, (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(v322, v295, v279), v21, v281), 2uLL));
              v27.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)(result + 6 * v619), v29);
              v292 = v314;
              v25 = vaddq_s16(v27, v282);
              v338 = vqrshrun_n_s16(vaddq_s16(v26, v282), 4uLL);
              v339 = (_DWORD *)(v308 + v271);
              *_X1 = v338.i32[0];
              v312 += v280;
              v298 += v280;
              v311 += v280;
              v308 += v280;
              *_X16 = v338.i32[1];
              v20 = (int16x4_t)vqrshrun_n_s16(v25, 4uLL);
              v307 += v280;
              result += 8 * (_DWORD)v619;
              v305 += v40;
              v304 += v40;
              *_X5 = v20.i32[0];
              *v339 = v20.i32[1];
              v301 += v40;
              v300 += v40;
              v313 -= 4;
            }
            while (v313);
            _X16 = (uint8x8_t *)((char *)v291 + 4);
            _X4 = (uint16x8_t *)&v306->u64[1];
            v271 += 4;
            v30 = v283 - 4;
          }
          while (v283 != 4);
        }
        else
        {
          v41 = 0;
          v42 = 8 * a2;
          v43 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 0);
          v44 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 1);
          v45 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 2);
          v46 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 3);
          v47 = vdupq_laneq_s16(v34, 4);
          v48 = vdupq_laneq_s16(v34, 5);
          v608 = 7 * a2;
          v49 = vdupq_laneq_s16(v34, 6);
          v605 = a1 + v608 - v35;
          v50 = 10 * v619;
          v51 = 2 * a4;
          v623 = 6 * a4;
          v52 = vdupq_laneq_s16(v34, 7);
          v602 = a3 + 4 * a4 + 3 * a4;
          v603 = a3 + 4 * a4;
          v53 = 8 * a4;
          v600 = a3 + a4;
          v601 = a3 + v623;
          v598 = a3 + 3 * a4;
          v599 = v600 + 4 * a4;
          v597 = a3 + v51;
          v54.i64[0] = 0xE800E800E800E800;
          v54.i64[1] = 0xE800E800E800E800;
          v55 = 4 * a4;
          do
          {
            v612 = v30;
            __asm { PRFM            #0, [X16] }
            _X8 = (char *)_X16 + v39;
            __asm { PRFM            #0, [X8] }
            _X9 = (char *)_X16 + v617;
            __asm { PRFM            #0, [X9] }
            _X9 = (char *)_X16 + v616;
            __asm { PRFM            #0, [X9] }
            _X9 = (char *)_X16 + v40;
            __asm { PRFM            #0, [X9] }
            _X9 = (char *)_X16 + v615;
            __asm { PRFM            #0, [X9] }
            _X9 = (char *)_X16 + v614;
            __asm { PRFM            #0, [X9] }
            _X9 = (char *)_X16 + v608;
            __asm { PRFM            #0, [X9] }
            v610 = _X16;
            v75 = (uint8x8_t *)((char *)_X16 + v39 + v39);
            v76 = *v75;
            v77 = (uint8x8_t *)((char *)v75 + v39);
            v78 = *v77;
            v79 = (uint8x8_t *)((char *)v77 + v39);
            v80 = *v79;
            v81 = (uint8x8_t *)((char *)v79 + v39);
            v82 = *(uint8x8_t *)((char *)v81 + v39);
            v83 = *v81;
            v84 = (int16x8_t)vmovl_u8(*_X16);
            v85 = a3;
            v630 = &_X4->i8[4 * v619];
            v634 = &_X4->i8[2 * v619];
            v86 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)_X16 + v39));
            v87 = (int16x8_t)vmovl_u8(v76);
            result = v605;
            v626 = &_X4->i8[6 * (_DWORD)v619];
            v89 = v599;
            v88 = v600;
            v90 = v597;
            v91 = v598;
            v92 = (int16x8_t)vmovl_u8(v78);
            v93 = (int16x8_t)vmovl_u8(v80);
            v94 = (int16x8_t)vmovl_u8(v83);
            v95 = v602;
            v96 = v603;
            v97 = v601;
            v98 = (int16x8_t)vmovl_u8(v82);
            _X20 = _X4;
            v100 = a6;
            do
            {
              v101 = v50;
              v102 = v42;
              v103 = (uint8x8_t *)(result + v41 + v39);
              v104 = *v103;
              v105 = (uint8x8_t *)((char *)v103 + v39);
              v106 = *v105;
              v107 = (uint8x8_t *)((char *)v105 + v39);
              v108 = *v107;
              v109 = (uint8x8_t *)((char *)v107 + v39);
              v110 = *v109;
              v111 = (uint8x8_t *)((char *)v109 + v39);
              v112 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(result + v41));
              v113 = vmulq_s16(v84, v43);
              v84 = (int16x8_t)vmovl_u8(v104);
              v114 = vmlaq_s16(v113, v86, v44);
              v115 = vmulq_s16(v86, v43);
              v86 = (int16x8_t)vmovl_u8(v106);
              v116 = vmlaq_s16(v114, v87, v45);
              v117 = vmlaq_s16(v115, v87, v44);
              v118 = vmulq_s16(v87, v43);
              v87 = (int16x8_t)vmovl_u8(v108);
              v119 = vmlaq_s16(v116, v92, v46);
              v120 = vmlaq_s16(v117, v92, v45);
              v121 = vmlaq_s16(v118, v92, v44);
              v122 = vmulq_s16(v92, v43);
              v92 = (int16x8_t)vmovl_u8(v110);
              v123 = vmlaq_s16(v119, v93, v47);
              v124 = vmlaq_s16(v120, v93, v46);
              v125 = vmlaq_s16(v121, v93, v45);
              v126 = vmlaq_s16(v122, v93, v44);
              v127 = vmulq_s16(v93, v43);
              v93 = (int16x8_t)vmovl_u8(*v111);
              v128 = vmlaq_s16(v123, v94, v48);
              v129 = vmlaq_s16(v124, v94, v47);
              v130 = vmlaq_s16(v125, v94, v46);
              v131 = vmlaq_s16(v126, v94, v45);
              v132 = vmlaq_s16(v127, v94, v44);
              v133 = vmulq_s16(v94, v43);
              v94 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v111 + v39));
              __asm { PRFM            #0, [X20] }
              _X13 = v634;
              __asm { PRFM            #0, [X13] }
              _X13 = v630;
              __asm { PRFM            #0, [X13] }
              _X13 = v626;
              __asm { PRFM            #0, [X13] }
              v141 = vmlaq_s16(v129, v98, v48);
              v142 = vmlaq_s16(v128, v98, v49);
              v143 = vmlaq_s16(v130, v98, v47);
              v144 = vmlaq_s16(v131, v98, v46);
              v145 = vmlaq_s16(v132, v98, v45);
              v146 = vmlaq_s16(v133, v98, v44);
              v147 = vmulq_s16(v98, v43);
              v98 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v111 + v39 + v39));
              v148.i64[0] = 0x1800180018001800;
              v148.i64[1] = 0x1800180018001800;
              v149.i64[0] = 0x1800180018001800;
              v149.i64[1] = 0x1800180018001800;
              v150.i64[0] = 0x1800180018001800;
              v150.i64[1] = 0x1800180018001800;
              v151 = (uint16x8_t)vrsraq_n_s16(v148, vmlaq_s16(v142, v52, v112), 2uLL);
              v142.i64[0] = 0x1800180018001800;
              v142.i64[1] = 0x1800180018001800;
              v152 = (uint16x8_t)vrsraq_n_s16(v149, vmlaq_s16(vmlaq_s16(v141, v49, v112), v52, v84), 2uLL);
              v141.i64[0] = 0x1800180018001800;
              v141.i64[1] = 0x1800180018001800;
              v153 = (uint16x8_t)vrsraq_n_s16(v150, vmlaq_s16(vmlaq_s16(vmlaq_s16(v143, v48, v112), v49, v84), v52, v86), 2uLL);
              v154 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v146, v45, v112), v46, v84), v47, v86), v48, v87), v49, v92), v52, v93);
              v155 = (uint16x8_t)vrsraq_n_s16(v142, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v144, v47, v112), v48, v84), v49, v86), v52, v87), 2uLL);
              v143.i64[0] = 0x1800180018001800;
              v143.i64[1] = 0x1800180018001800;
              v156 = (uint16x8_t)vrsraq_n_s16(v141, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v145, v46, v112), v47, v84), v48, v86), v49, v87), v52, v92), 2uLL);
              v145.i64[0] = 0x1800180018001800;
              v145.i64[1] = 0x1800180018001800;
              v144.i64[0] = 0x1800180018001800;
              v144.i64[1] = 0x1800180018001800;
              __asm { PRFM            #0, [X4] }
              _X6 = &_X4->i8[v51];
              __asm { PRFM            #0, [X6] }
              _X6 = &_X4->i8[v55];
              __asm { PRFM            #0, [X6] }
              _X6 = &_X4->i8[v623];
              __asm { PRFM            #0, [X6] }
              v42 = v102;
              v50 = v101;
              v164 = (uint16x8_t)vrsraq_n_s16(v145, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v147, v44, v112), v45, v84), v46, v86), v47, v87), v48, v92), v49, v93), v52, v94), 2uLL);
              v165 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + 2 * v619), v152);
              v166 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + 4 * v619), v153);
              *(int8x8_t *)v155.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + 6 * v619), v155), v54), 4uLL);
              v167 = (uint16x8_t)vrsraq_n_s16(v144, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v43, v112), v44, v84), v45, v86), v46, v87), v47, v92), v48, v93), v49, v94), v52, v98), 2uLL);
              *(int8x8_t *)(v85 + v41) = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*_X4, v151), v54), 4uLL);
              *(int8x8_t *)(v88 + v41) = vqrshrun_n_s16(vaddq_s16(v165, v54), 4uLL);
              *(int8x8_t *)(v90 + v41) = vqrshrun_n_s16(vaddq_s16(v166, v54), 4uLL);
              *(_QWORD *)(v91 + v41) = v155.i64[0];
              v168 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + 8 * v619), v156);
              v169 = (int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + 14 * v619), v167);
              v170 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + v101), (uint16x8_t)vrsraq_n_s16(v143, v154, 2uLL)), v54);
              v171 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)_X4 + 12 * v619), v164), v54);
              *(int8x8_t *)(v96 + v41) = vqrshrun_n_s16(vaddq_s16(v168, v54), 4uLL);
              *(int8x8_t *)(v89 + v41) = vqrshrun_n_s16(v170, 4uLL);
              *(int8x8_t *)(v97 + v41) = vqrshrun_n_s16(v171, 4uLL);
              *(int8x8_t *)(v95 + v41) = vqrshrun_n_s16(vaddq_s16(v169, v54), 4uLL);
              result += v42;
              _X4 += v619;
              v95 += v53;
              v97 += v53;
              v91 += v53;
              v89 += v53;
              v90 += v53;
              v88 += v53;
              v85 += v53;
              v96 += v53;
              v100 -= 8;
            }
            while (v100);
            _X16 = v610 + 1;
            _X4 = _X20 + 1;
            v41 += 8;
            v30 = v612 - 8;
          }
          while (v612 != 8);
        }
      }
    }
    else
    {
      v172 = (uint8x8_t *)result;
      _X8 = *(int16x4_t **)(a17 + 8);
      v174 = *(int *)(a17 + 16);
      v175 = 2 * a2;
      v176 = 3 * a2;
      v177 = 4 * a2;
      if (a5 == 4 || a6 == 4)
      {
        result = 7 * a2;
        v424 = vdup_lane_s16(*(int16x4_t *)v34.i8, 0);
        v425 = vdup_lane_s16(*(int16x4_t *)v34.i8, 1);
        v426 = vdup_lane_s16(*(int16x4_t *)v34.i8, 2);
        v427 = vdup_lane_s16(*(int16x4_t *)v34.i8, 3);
        v428 = vdup_laneq_s16(v34, 4);
        v429 = vdup_laneq_s16(v34, 5);
        v430 = vdup_laneq_s16(v34, 6);
        v431 = vdup_laneq_s16(v34, 7);
        _X20 = v172;
        do
        {
          __asm { PRFM            #0, [X20] }
          _X6 = (__int32 *)((char *)_X20 + a2);
          __asm { PRFM            #0, [X6] }
          _X7 = (char *)_X20 + v175;
          __asm { PRFM            #0, [X7] }
          _X19 = (char *)_X20 + v176;
          __asm { PRFM            #0, [X19] }
          v440 = (__int32 *)((char *)_X20 + result);
          v18.i32[0] = *_X6;
          v19.i32[0] = *(__int32 *)((char *)_X20->i32 + 2 * a2);
          v20.i32[0] = *(__int32 *)((char *)_X20->i32 + 3 * a2);
          v21.i32[0] = _X20->i32[a2];
          v23.i32[0] = *(__int32 *)((char *)_X20->i32 + 5 * a2);
          v24.i32[0] = *(__int32 *)((char *)_X20->i32 + 6 * a2);
          v441 = (int16x4_t)vmovl_u8((uint8x8_t)_X20->u32[0]).u64[0];
          v442 = (int16x4_t)vmovl_u8((uint8x8_t)v18).u64[0];
          v443 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v19.i8).u64[0];
          v18 = (int16x4_t)vmovl_u8((uint8x8_t)v20).u64[0];
          v20 = (int16x4_t)vmovl_u8((uint8x8_t)v21).u64[0];
          v21 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v23.i8).u64[0];
          v19.i64[0] = vmovl_u8((uint8x8_t)v24).u64[0];
          __asm { PRFM            #0, [X8] }
          _X6 = (char *)_X8 + 2 * v174;
          __asm { PRFM            #0, [X6] }
          _X6 = (char *)_X8 + 4 * (int)v174;
          __asm { PRFM            #0, [X6] }
          _X19 = (char *)_X8 + 6 * (int)v174;
          v450 = _X8;
          v451 = a6;
          __asm { PRFM            #0, [X19] }
          do
          {
            v28.i32[0] = *v440;
            v23.i32[0] = *(__int32 *)((char *)v440 + a2);
            v24.i32[0] = *(__int32 *)((char *)v440 + 2 * a2);
            v453 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v19.i8, v430), v21, v429), v20, v428), v18, v427), v443, v426), v442, v425), v441, v424);
            v454 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v19.i8, v429), v21, v428), v20, v427), v18, v426), v443, v425), v442, v424);
            v455 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v19.i8, v428), v21, v427), v20, v426), v18, v425);
            v456 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v19.i8, v427), v21, v426), v20, v425), v18, v424);
            v18.i32[0] = *(__int32 *)((char *)v440 + 3 * a2);
            v28 = (int16x4_t)vmovl_u8((uint8x8_t)v28).u64[0];
            v441 = v20;
            v20 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v23.i8).u64[0];
            v442 = v21;
            v21 = (int16x4_t)vmovl_u8((uint8x8_t)v24).u64[0];
            v457 = vmla_s16(v455, v443, v424);
            v443 = *(int16x4_t *)v19.i8;
            v19.i64[0] = vmovl_u8((uint8x8_t)v18).u64[0];
            *(int16x4_t *)v23.i8 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(v454, v28, v430), v20, v431), 2uLL);
            v24 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(v457, v28, v429), v20, v430), v21, v431), 2uLL);
            *v450 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(v453, v28, v431), 2uLL);
            *(int16x4_t *)((char *)v450 + 2 * v174) = *(int16x4_t *)v23.i8;
            *(int16x4_t *)((char *)v450 + 4 * v174) = v24;
            *(int16x4_t *)((char *)v450 + 6 * v174) = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmla_s16(v456, v28, v428), v20, v429), v21, v430), *(int16x4_t *)v19.i8, v431), 2uLL);
            v440 = (__int32 *)((char *)v440 + v177);
            v450 += (int)v174;
            v18 = v28;
            v451 -= 4;
          }
          while (v451);
          _X20 = (uint8x8_t *)((char *)_X20 + 4);
          ++_X8;
          v30 -= 4;
        }
        while (v30);
      }
      else
      {
        v178 = 2 * v174;
        v179 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 0);
        v180 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 1);
        v181 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 2);
        v182 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 3);
        v183 = vdupq_laneq_s16(v34, 4);
        v184 = vdupq_laneq_s16(v34, 5);
        v185 = vdupq_laneq_s16(v34, 6);
        result = 8 * a2;
        v186 = vdupq_laneq_s16(v34, 7);
        _X21 = v172;
        do
        {
          __asm { PRFM            #0, [X21] }
          _X3 = (char *)_X21 + a2;
          __asm { PRFM            #0, [X3] }
          _X4 = (char *)_X21 + v175;
          __asm { PRFM            #0, [X4] }
          _X4 = (char *)_X21 + v176;
          __asm { PRFM            #0, [X4] }
          _X4 = (char *)_X21 + v177;
          __asm { PRFM            #0, [X4] }
          _X4 = (char *)_X21 + 5 * a2;
          __asm { PRFM            #0, [X4] }
          _X4 = (char *)_X21 + 6 * a2;
          __asm { PRFM            #0, [X4] }
          _X4 = (char *)_X21 + 7 * a2;
          __asm { PRFM            #0, [X4] }
          v203 = (uint8x8_t *)&_X3[a2];
          v204 = *v203;
          v205 = (uint8x8_t *)((char *)v203 + a2);
          v206 = *v205;
          v207 = (uint8x8_t *)((char *)v205 + a2);
          v208 = *v207;
          v209 = (uint8x8_t *)((char *)v207 + a2);
          v210 = *(uint8x8_t *)((char *)v209 + a2);
          v211 = *v209;
          _X3 = (char *)_X8 + 2 * v174;
          v213 = (int16x8_t)vmovl_u8(*_X21);
          v214 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)_X21 + a2));
          v215 = (int16x8_t)vmovl_u8(v204);
          v216 = (int16x8_t)vmovl_u8(v206);
          v217 = (int16x8_t)vmovl_u8(v208);
          v218 = (int16x8_t)vmovl_u8(v211);
          v219 = (int16x8_t)vmovl_u8(v210);
          _X4 = (char *)_X8 + 4 * v174;
          _X5 = (char *)_X8 + 6 * (int)v174;
          v222 = (int16x8_t *)_X8;
          v223 = 7 * a2;
          v224 = a6;
          do
          {
            v225 = (uint8x8_t *)((char *)_X21 + v223 + a2);
            v226 = *v225;
            v227 = (uint8x8_t *)((char *)v225 + a2);
            v228 = *v227;
            v229 = (uint8x8_t *)((char *)v227 + a2);
            v230 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v213, v179), v214, v180), v215, v181), v216, v182);
            v231 = *v229;
            v232 = (uint8x8_t *)((char *)v229 + a2);
            v233 = *v232;
            v234 = (uint8x8_t *)((char *)v232 + a2);
            v235 = *v234;
            v236 = (uint8x8_t *)((char *)v234 + a2);
            v237 = vmlaq_s16(vmlaq_s16(vmulq_s16(v214, v179), v215, v180), v216, v181);
            v238 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)_X21 + v223));
            v239 = vmlaq_s16(vmulq_s16(v215, v179), v216, v180);
            v213 = (int16x8_t)vmovl_u8(v226);
            v214 = (int16x8_t)vmovl_u8(v228);
            v240 = vmulq_s16(v216, v179);
            v215 = (int16x8_t)vmovl_u8(v231);
            v216 = (int16x8_t)vmovl_u8(v233);
            v241 = vmlaq_s16(v230, v217, v183);
            v242 = vmlaq_s16(v237, v217, v182);
            v243 = vmlaq_s16(v239, v217, v181);
            v244 = vmlaq_s16(v240, v217, v180);
            v245 = vmulq_s16(v217, v179);
            v217 = (int16x8_t)vmovl_u8(v235);
            v246 = vmlaq_s16(v241, v218, v184);
            v247 = vmlaq_s16(v242, v218, v183);
            v248 = vmlaq_s16(v243, v218, v182);
            v249 = vmlaq_s16(v244, v218, v181);
            v250 = vmlaq_s16(v245, v218, v180);
            v251 = vmulq_s16(v218, v179);
            v218 = (int16x8_t)vmovl_u8(*v236);
            v252 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v236 + a2));
            __asm
            {
              PRFM            #0, [X8]
              PRFM            #0, [X3]
              PRFM            #0, [X4]
              PRFM            #0, [X5]
            }
            v257.i64[0] = 0x1800180018001800;
            v257.i64[1] = 0x1800180018001800;
            v258 = vrsraq_n_s16(v257, vmlaq_s16(vmlaq_s16(v246, v219, v185), v186, v238), 2uLL);
            v246.i64[0] = 0x1800180018001800;
            v246.i64[1] = 0x1800180018001800;
            v259 = vrsraq_n_s16(v246, vmlaq_s16(vmlaq_s16(vmlaq_s16(v247, v219, v184), v185, v238), v186, v213), 2uLL);
            v247.i64[0] = 0x1800180018001800;
            v247.i64[1] = 0x1800180018001800;
            v260 = vrsraq_n_s16(v247, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v248, v219, v183), v184, v238), v185, v213), v186, v214), 2uLL);
            v248.i64[0] = 0x1800180018001800;
            v248.i64[1] = 0x1800180018001800;
            v261 = vrsraq_n_s16(v248, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v249, v219, v182), v183, v238), v184, v213), v185, v214), v186, v215), 2uLL);
            v249.i64[0] = 0x1800180018001800;
            v249.i64[1] = 0x1800180018001800;
            v262 = vrsraq_n_s16(v249, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v250, v219, v181), v182, v238), v183, v213), v184, v214), v185, v215), v186, v216), 2uLL);
            v250.i64[0] = 0x1800180018001800;
            v250.i64[1] = 0x1800180018001800;
            v263 = vrsraq_n_s16(v250, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v251, v219, v180), v181, v238), v182, v213), v183, v214), v184, v215), v185, v216), v186, v217), 2uLL);
            v251.i64[0] = 0x1800180018001800;
            v251.i64[1] = 0x1800180018001800;
            *v222 = v258;
            v258.i64[0] = 0x1800180018001800;
            v258.i64[1] = 0x1800180018001800;
            v264 = (int16x8_t *)((char *)v222 + v178);
            *v264 = v259;
            v265 = (int16x8_t *)((char *)v264 + v178);
            *v265 = v260;
            v266 = (int16x8_t *)((char *)v265 + v178);
            *v266 = v261;
            v267 = (int16x8_t *)((char *)v266 + v178);
            *v267 = v262;
            v268 = (int16x8_t *)((char *)v267 + v178);
            *v268 = v263;
            v269 = (int16x8_t *)((char *)v268 + v178);
            *v269 = vrsraq_n_s16(v251, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v219, v179), v180, v238), v181, v213), v182, v214), v183, v215), v184, v216), v185, v217), v186, v218), 2uLL);
            v270 = (int16x8_t *)((char *)v269 + v178);
            v223 += result;
            v222 = (int16x8_t *)((char *)v269 + v178 + 16 * v174 - 14 * (int)v174);
            *v270 = vrsraq_n_s16(v258, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v179, v238), v180, v213), v181, v214), v182, v215), v183, v216), v184, v217), v185, v218), v186, v252), 2uLL);
            v219 = v252;
            v224 -= 8;
          }
          while (v224);
          ++_X21;
          _X8 += 2;
          v30 -= 8;
        }
        while (v30);
      }
    }
  }
  else if (*(_DWORD *)a17)
  {
    v340 = a2;
    result += a2;
    if (*(_DWORD *)(a17 + 36))
    {
      return (uint64_t)dist_wtd_convolve_y_6tap_dist_wtd_avg_neon((uint8x8_t *)result, a2, a3, a4, a5, a6, a17, v34, *(double *)v33.i64, a11, a12, a13, a14, a15, a16);
    }
    else
    {
      v341 = *(uint16x8_t **)(a17 + 8);
      v342 = *(int *)(a17 + 16);
      if (a5 == 4 || a6 == 4)
      {
        v524 = 0;
        v525 = 4 * a2;
        v526 = 5 * a2;
        v527 = vdup_lane_s16(*(int16x4_t *)v34.i8, 1);
        v528 = vdup_lane_s16(*(int16x4_t *)v34.i8, 2);
        v529 = vdup_lane_s16(*(int16x4_t *)v34.i8, 3);
        v530 = vdup_laneq_s16(v34, 4);
        v531 = vdup_laneq_s16(v34, 5);
        v532 = 4 * a4;
        v633 = a3 + 3 * a4;
        v637 = a3 + 2 * a4;
        v629 = a3 + a4;
        v533 = &v341->i8[6 * (int)v342];
        v534 = 8 * (_DWORD)v342;
        v535 = a2 + v526;
        v536 = vdup_laneq_s16(v34, 6);
        v537 = a1 + v535 + 3 * a2 - v35;
        v538 = a1 + v535 + 2 * a2 - v35;
        v539 = a1 + 2 * a2 + v526 - v35;
        v540.i64[0] = 0xE800E800E800E800;
        v540.i64[1] = 0xE800E800E800E800;
        v541 = a1 + v535 - v35;
        v542 = &v341->i8[4 * v342];
        v543 = &v341->i8[2 * v342];
        do
        {
          v544 = v30;
          v545 = 0;
          v18.i32[0] = *(_DWORD *)(result + a2);
          v19.i32[0] = *(_DWORD *)(result + 2 * a2);
          v20.i32[0] = *(_DWORD *)(result + 3 * a2);
          v23.i32[0] = *(_DWORD *)(result + 4 * a2);
          v546 = (int16x4_t)vmovl_u8((uint8x8_t)*(unsigned int *)result).u64[0];
          v547 = v541;
          v548 = (int16x4_t)vmovl_u8((uint8x8_t)v18).u64[0];
          v549 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v19.i8).u64[0];
          v550 = (int16x4_t)vmovl_u8((uint8x8_t)v20).u64[0];
          v551 = v539;
          v552 = v538;
          v553 = v537;
          v554 = v629;
          v555 = v633;
          v556 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v23.i8).u64[0];
          v557 = v637;
          v558 = a3;
          v559 = a6;
          do
          {
            v26.i32[0] = *(_DWORD *)(v547 + v524);
            v25.i32[0] = *(_DWORD *)(v551 + v524);
            v27.i32[0] = *(_DWORD *)(v552 + v524);
            v18.i32[0] = *(_DWORD *)(v553 + v524);
            v560 = vmla_s16(vmla_s16(vmul_s16(v556, v531), v550, v530), v549, v529);
            v561 = vmla_s16(vmla_s16(vmul_s16(v556, v530), v550, v529), v549, v528);
            v562 = vmla_s16(vmla_s16(vmul_s16(v556, v529), v550, v528), v549, v527);
            v549 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v25.i8).u64[0];
            v563 = vmla_s16(v560, v548, v528);
            v564 = vmla_s16(v561, v548, v527);
            v548 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v26.i8).u64[0];
            v565 = vmla_s16(vmul_s16(v556, v528), v550, v527);
            v550 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v27.i8).u64[0];
            v566 = vmla_s16(v563, v546, v527);
            v546 = v556;
            v556 = (int16x4_t)vmovl_u8((uint8x8_t)v18).u64[0];
            *(int16x4_t *)v25.i8 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(v565, v548, v529), v549, v530), v550, v531), v556, v536);
            *(int16x4_t *)v26.i8 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(v564, v548, v531), v549, v536), 2uLL);
            *(int16x4_t *)v27.i8 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(v562, v548, v530), v549, v531), v550, v536), 2uLL);
            v20 = vrsra_n_s16((int16x4_t)0x1800180018001800, *(int16x4_t *)v25.i8, 2uLL);
            *(uint16x4_t *)v567.i8 = vhadd_u16(*(uint16x4_t *)&v341->i8[v545], (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(v566, v548, v536), 2uLL));
            *(uint16x4_t *)v23.i8 = vhadd_u16(*(uint16x4_t *)&v542[v545], *(uint16x4_t *)v27.i8);
            v567.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)&v543[v545], *(uint16x4_t *)v26.i8);
            v23.u64[1] = (unint64_t)vhadd_u16(*(uint16x4_t *)&v533[v545], (uint16x4_t)v20);
            v19 = vaddq_s16(v23, v540);
            *(int8x8_t *)v567.i8 = vqrshrun_n_s16(vaddq_s16(v567, v540), 4uLL);
            *(_DWORD *)(v558 + v524) = v567.i32[0];
            v568 = (_DWORD *)(v555 + v524);
            *(_DWORD *)(v554 + v524) = v567.i32[1];
            v558 += v532;
            v555 += v532;
            v18 = (int16x4_t)vqrshrun_n_s16(v19, 4uLL);
            v554 += v532;
            *(_DWORD *)(v557 + v524) = v18.i32[0];
            v545 += v534;
            v553 += v525;
            v552 += v525;
            v551 += v525;
            v547 += v525;
            v557 += v532;
            *v568 = v18.i32[1];
            v559 -= 4;
          }
          while (v559);
          result += 4;
          v341 = (uint16x8_t *)((char *)v341 + 8);
          v524 += 4;
          v533 += 8;
          v542 += 8;
          v543 += 8;
          v30 = v544 - 4;
        }
        while (v544 != 4);
      }
      else
      {
        v343 = 0;
        v344 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 1);
        v345 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 2);
        v346 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 3);
        v347 = vdupq_laneq_s16(v34, 4);
        v348 = vdupq_laneq_s16(v34, 5);
        v349 = 4 * a4;
        v636 = a1 + a2 + (uint64_t)(5 * a2) - v35;
        v350 = 2 * v342;
        v351 = 6 * v342;
        v352 = 8 * v342;
        v353 = 14 * v342;
        v354 = 4 * v342;
        v355 = 12 * v342;
        v356 = 10 * v342;
        v357 = 2 * a4;
        v358 = 3 * a4;
        v632 = a3 + v349;
        v628 = a3 + v349 + v358;
        v359 = vdupq_laneq_s16(v34, 6);
        v360 = 16 * v342;
        v625 = a3 + v357 + v349;
        v361 = 8 * a4;
        v618 = a3 + v358;
        v620 = a3 + 5 * a4;
        v362 = a3 + v357;
        v363.i64[0] = 0xE800E800E800E800;
        v363.i64[1] = 0xE800E800E800E800;
        v364 = a3 + a4;
        do
        {
          v365 = v30;
          v366 = (uint8x8_t *)(result + v340 + v340);
          v367 = *v366;
          v368 = (uint8x8_t *)((char *)v366 + v340);
          v369 = (int16x8_t)vmovl_u8(*(uint8x8_t *)result);
          v371 = v620;
          v370 = a3;
          v372 = v364;
          v373 = v362;
          v374 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(result + v340));
          v375 = (int16x8_t)vmovl_u8(v367);
          v376 = (int16x8_t)vmovl_u8(*v368);
          v377 = v618;
          v378 = v628;
          v379 = v632;
          v380 = v625;
          v381 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v368 + v340));
          v382 = v341;
          v383 = v636;
          v384 = a6;
          do
          {
            v385 = (uint8x8_t *)(v383 + v343 + v340);
            v386 = *v385;
            v387 = (uint8x8_t *)((char *)v385 + v340);
            v388 = *v387;
            v389 = (uint8x8_t *)((char *)v387 + v340);
            v390 = *v389;
            v391 = (uint8x8_t *)((char *)v389 + v340);
            v392 = *v391;
            v393 = (uint8x8_t *)((char *)v391 + v340);
            v394 = *v393;
            v395 = (uint8x8_t *)((char *)v393 + v340);
            v396 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v383 + v343));
            v397 = (int16x8_t)vmovl_u8(v386);
            v398 = (int16x8_t)vmovl_u8(v388);
            v399 = vmulq_s16(v369, v344);
            v369 = (int16x8_t)vmovl_u8(v390);
            v400 = vmlaq_s16(vmlaq_s16(v399, v374, v345), v375, v346);
            v401 = vmlaq_s16(vmulq_s16(v374, v344), v375, v345);
            v402 = vmulq_s16(v375, v344);
            v374 = (int16x8_t)vmovl_u8(v392);
            v375 = (int16x8_t)vmovl_u8(v394);
            v403 = vmlaq_s16(v400, v376, v347);
            v404 = vmlaq_s16(v401, v376, v346);
            v405 = vmlaq_s16(v402, v376, v345);
            v406 = vmulq_s16(v376, v344);
            v376 = (int16x8_t)vmovl_u8(*v395);
            v407 = vmlaq_s16(v403, v381, v348);
            v408 = vmlaq_s16(v404, v381, v347);
            v409 = vmlaq_s16(v405, v381, v346);
            v410 = vmlaq_s16(v406, v381, v345);
            v411 = vmulq_s16(v381, v344);
            v381 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v395 + v340));
            v412.i64[0] = 0x1800180018001800;
            v412.i64[1] = 0x1800180018001800;
            v413.i64[0] = 0x1800180018001800;
            v413.i64[1] = 0x1800180018001800;
            v414 = (uint16x8_t)vrsraq_n_s16(v412, vmlaq_s16(v407, v359, v396), 2uLL);
            v407.i64[0] = 0x1800180018001800;
            v407.i64[1] = 0x1800180018001800;
            v415 = (uint16x8_t)vrsraq_n_s16(v413, vmlaq_s16(vmlaq_s16(v408, v348, v396), v359, v397), 2uLL);
            v408.i64[0] = 0x1800180018001800;
            v408.i64[1] = 0x1800180018001800;
            v416 = vrsraq_n_s16(v407, vmlaq_s16(vmlaq_s16(vmlaq_s16(v409, v347, v396), v348, v397), v359, v398), 2uLL);
            v409.i64[0] = 0x1800180018001800;
            v409.i64[1] = 0x1800180018001800;
            v417.i64[0] = 0x1800180018001800;
            v417.i64[1] = 0x1800180018001800;
            v418 = (uint16x8_t)vrsraq_n_s16(v408, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v410, v346, v396), v347, v397), v348, v398), v359, v369), 2uLL);
            v410.i64[0] = 0x1800180018001800;
            v410.i64[1] = 0x1800180018001800;
            v419 = (uint16x8_t)vrsraq_n_s16(v409, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v411, v345, v396), v346, v397), v347, v398), v348, v369), v359, v374), 2uLL);
            v420 = (uint16x8_t)vrsraq_n_s16(v417, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v344, v396), v345, v397), v346, v398), v347, v369), v348, v374), v359, v375), 2uLL);
            v421 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v351), v418), v363);
            *(int8x8_t *)v411.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v350), v415), v363), 4uLL);
            *(int8x8_t *)v416.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v354), (uint16x8_t)v416), v363), 4uLL);
            *(int8x8_t *)(v370 + v343) = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*v382, v414), v363), 4uLL);
            *(_QWORD *)(v372 + v343) = v411.i64[0];
            *(_QWORD *)(v373 + v343) = v416.i64[0];
            *(int8x8_t *)(v377 + v343) = vqrshrun_n_s16(v421, 4uLL);
            v416.i64[0] = 0x1800180018001800;
            v416.i64[1] = 0x1800180018001800;
            v422 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v355), (uint16x8_t)vrsraq_n_s16(v410, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v344, v397), v345, v398), v346, v369), v347, v374), v348, v375), v359, v376), 2uLL)), v363);
            v423 = vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v353), (uint16x8_t)vrsraq_n_s16(v416, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v344, v398), v345, v369), v346, v374), v347, v375), v348, v376), v359, v381), 2uLL)), v363);
            *(int8x8_t *)v397.i8 = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v356), v420), v363), 4uLL);
            *(int8x8_t *)(v379 + v343) = vqrshrun_n_s16(vaddq_s16((int16x8_t)vhaddq_u16(*(uint16x8_t *)((char *)v382 + v352), v419), v363), 4uLL);
            *(_QWORD *)(v371 + v343) = v397.i64[0];
            *(int8x8_t *)(v380 + v343) = vqrshrun_n_s16(v422, 4uLL);
            *(int8x8_t *)(v378 + v343) = vqrshrun_n_s16(v423, 4uLL);
            v383 += 8 * v340;
            v382 = (uint16x8_t *)((char *)v382 + v360);
            v378 += v361;
            v380 += v361;
            v371 += v361;
            v377 += v361;
            v373 += v361;
            v372 += v361;
            v370 += v361;
            v379 += v361;
            v384 -= 8;
          }
          while (v384);
          result += 8;
          ++v341;
          v343 += 8;
          v30 = v365 - 8;
        }
        while (v365 != 8);
      }
    }
  }
  else
  {
    v458 = a2;
    v459 = (uint8x8_t *)(result + a2);
    v460 = *(int16x4_t **)(a17 + 8);
    v461 = *(int *)(a17 + 16);
    if (a5 == 4 || a6 == 4)
    {
      v569 = 4 * a2;
      v570 = vdup_lane_s16(*(int16x4_t *)v34.i8, 1);
      v571 = vdup_lane_s16(*(int16x4_t *)v34.i8, 2);
      v572 = vdup_lane_s16(*(int16x4_t *)v34.i8, 3);
      v573 = vdup_laneq_s16(v34, 4);
      v574 = vdup_laneq_s16(v34, 5);
      v575 = vdup_laneq_s16(v34, 6);
      v576 = 2 * v461;
      v577 = 6 * v461;
      result = 8 * (_DWORD)v461;
      v578 = 4 * v461;
      v579 = a1 + 4 * v458 - v35;
      v580 = a1 + 3 * v458 - v35;
      v581 = a1 + 2 * v458 - v35;
      do
      {
        a16.i32[0] = *(__int32 *)((char *)v459->i32 + v458);
        v17.i32[0] = *(__int32 *)((char *)v459->i32 + 2 * v458);
        v18.i32[0] = *(__int32 *)((char *)v459->i32 + 3 * v458);
        v21.i32[0] = v459->i32[v458];
        v582 = (int16x4_t)vmovl_u8((uint8x8_t)v459->u32[0]).u64[0];
        v583 = (int16x4_t)vmovl_u8((uint8x8_t)a16).u64[0];
        v584 = (int16x4_t)vmovl_u8((uint8x8_t)v17).u64[0];
        v17 = (int16x4_t)vmovl_u8((uint8x8_t)v18).u64[0];
        v585 = v459;
        v586 = v581;
        a16 = (uint16x4_t)vmovl_u8((uint8x8_t)v21).u64[0];
        v587 = v580;
        v588 = v579;
        v589 = v460;
        v590 = a6;
        do
        {
          v22.i32[0] = *(__int32 *)((char *)v585->i32 + 5 * v458);
          v23.i32[0] = *(_DWORD *)(v586 + 5 * v458);
          v24.i32[0] = *(_DWORD *)(v587 + 5 * v458);
          v591 = vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)a16, v574), v17, v573), v584, v572), v583, v571);
          v592 = vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)a16, v573), v17, v572), v584, v571), v583, v570);
          v593 = vmla_s16(vmla_s16(vmul_s16((int16x4_t)a16, v572), v17, v571), v584, v570);
          v594 = vmla_s16(vmul_s16((int16x4_t)a16, v571), v17, v570);
          v17.i32[0] = *(_DWORD *)(v588 + 5 * v458);
          v22 = (int16x4_t)vmovl_u8((uint8x8_t)v22).u64[0];
          v23.i64[0] = vmovl_u8(*(uint8x8_t *)v23.i8).u64[0];
          v24 = (int16x4_t)vmovl_u8((uint8x8_t)v24).u64[0];
          v595 = vmla_s16(v591, v582, v570);
          v582 = (int16x4_t)a16;
          a16 = (uint16x4_t)vmovl_u8((uint8x8_t)v17).u64[0];
          v596 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(v595, v22, v575), 2uLL);
          v18 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(v592, v22, v574), *(int16x4_t *)v23.i8, v575), 2uLL);
          v21 = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(v593, v22, v573), *(int16x4_t *)v23.i8, v574), v24, v575), 2uLL);
          *v589 = v596;
          *(int16x4_t *)((char *)v589 + v576) = v18;
          *(int16x4_t *)((char *)v589 + v578) = v21;
          *(int16x4_t *)((char *)v589 + v577) = vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmla_s16(v594, v22, v572), *(int16x4_t *)v23.i8, v573), v24, v574), (int16x4_t)a16, v575), 2uLL);
          v589 = (int16x4_t *)((char *)v589 + result);
          v588 += v569;
          v587 += v569;
          v586 += v569;
          v585 = (uint8x8_t *)((char *)v585 + v569);
          v17 = v24;
          v584 = *(int16x4_t *)v23.i8;
          v583 = v22;
          v590 -= 4;
        }
        while (v590);
        v459 = (uint8x8_t *)((char *)v459 + 4);
        ++v460;
        v579 += 4;
        v580 += 4;
        v581 += 4;
        v30 -= 4;
      }
      while (v30);
    }
    else
    {
      v462 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 1);
      v463 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 2);
      v464 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 3);
      v465 = vdupq_laneq_s16(v34, 4);
      v466 = vdupq_laneq_s16(v34, 5);
      v467 = vdupq_laneq_s16(v34, 6);
      v468 = 2 * v461;
      do
      {
        v469 = (uint8x8_t *)((char *)v459 + 5 * a2);
        v470 = (uint8x8_t *)((char *)v459 + a2 + a2);
        v471 = *v470;
        v472 = (uint8x8_t *)((char *)v470 + a2);
        v473 = (int16x8_t)vmovl_u8(*v459);
        v474 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v459 + a2));
        v475 = (int16x8_t)vmovl_u8(v471);
        v476 = (int16x8_t)vmovl_u8(*v472);
        v477 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v472 + a2));
        v478 = (int16x8_t *)v460;
        v479 = a6;
        do
        {
          v480 = *v469;
          v481 = (uint8x8_t *)((char *)v469 + a2);
          v482 = *v481;
          v483 = (uint8x8_t *)((char *)v481 + a2);
          v484 = vmlaq_s16(vmulq_s16(v473, v462), v474, v463);
          v485 = *v483;
          v486 = (uint8x8_t *)((char *)v483 + a2);
          v487 = vmlaq_s16(vmlaq_s16(v484, v475, v464), v476, v465);
          v488 = *v486;
          v489 = (uint8x8_t *)((char *)v486 + a2);
          v490 = vmulq_s16(v474, v462);
          v491 = *v489;
          v492 = (uint8x8_t *)((char *)v489 + a2);
          v493 = *v492;
          v494 = (uint8x8_t *)((char *)v492 + a2);
          v495 = *v494;
          v496 = (uint8x8_t *)((char *)v494 + a2);
          v497 = (int16x8_t)vmovl_u8(v480);
          v498 = (int16x8_t)vmovl_u8(v482);
          v499 = vmlaq_s16(vmlaq_s16(v490, v475, v463), v476, v464);
          v500 = vmlaq_s16(vmulq_s16(v475, v462), v476, v463);
          v501 = (int16x8_t)vmovl_u8(v485);
          v473 = (int16x8_t)vmovl_u8(v488);
          v502 = vmulq_s16(v476, v462);
          v474 = (int16x8_t)vmovl_u8(v491);
          v475 = (int16x8_t)vmovl_u8(v493);
          v476 = (int16x8_t)vmovl_u8(v495);
          v503 = vmlaq_s16(v487, v477, v466);
          v504 = vmlaq_s16(v499, v477, v465);
          v505 = vmlaq_s16(v500, v477, v464);
          v506 = vmlaq_s16(v502, v477, v463);
          v507 = vmulq_s16(v477, v462);
          v477 = (int16x8_t)vmovl_u8(*v496);
          v508.i64[0] = 0x1800180018001800;
          v508.i64[1] = 0x1800180018001800;
          v509 = vrsraq_n_s16(v508, vmlaq_s16(v503, v467, v497), 2uLL);
          v503.i64[0] = 0x1800180018001800;
          v503.i64[1] = 0x1800180018001800;
          v510 = vrsraq_n_s16(v503, vmlaq_s16(vmlaq_s16(v504, v466, v497), v467, v498), 2uLL);
          v504.i64[0] = 0x1800180018001800;
          v504.i64[1] = 0x1800180018001800;
          v511 = vrsraq_n_s16(v504, vmlaq_s16(vmlaq_s16(vmlaq_s16(v505, v465, v497), v466, v498), v467, v501), 2uLL);
          v512.i64[0] = 0x1800180018001800;
          v512.i64[1] = 0x1800180018001800;
          v513 = vrsraq_n_s16(v512, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v506, v464, v497), v465, v498), v466, v501), v467, v473), 2uLL);
          v506.i64[0] = 0x1800180018001800;
          v506.i64[1] = 0x1800180018001800;
          v514 = vrsraq_n_s16(v506, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v507, v463, v497), v464, v498), v465, v501), v466, v473), v467, v474), 2uLL);
          v507.i64[0] = 0x1800180018001800;
          v507.i64[1] = 0x1800180018001800;
          v515 = vrsraq_n_s16(v507, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v462, v497), v463, v498), v464, v501), v465, v473), v466, v474), v467, v475), 2uLL);
          v516 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v462, v498), v463, v501), v464, v473), v465, v474), v466, v475), v467, v476);
          v498.i64[0] = 0x1800180018001800;
          v498.i64[1] = 0x1800180018001800;
          v505.i64[0] = 0x1800180018001800;
          v505.i64[1] = 0x1800180018001800;
          *v478 = v509;
          v517 = (int16x8_t *)((char *)v478 + v468);
          *v517 = v510;
          v518 = (int16x8_t *)((char *)v517 + v468);
          *v518 = v511;
          v519 = (int16x8_t *)((char *)v518 + v468);
          *v519 = v513;
          v520 = (int16x8_t *)((char *)v519 + v468);
          *v520 = v514;
          v521 = (int16x8_t *)((char *)v520 + v468);
          *v521 = v515;
          v522 = (int16x8_t *)((char *)v521 + v468);
          *v522 = vrsraq_n_s16(v498, v516, 2uLL);
          v523 = (int16x8_t *)((char *)v522 + v468);
          *v523 = vrsraq_n_s16(v505, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v462, v501), v463, v473), v464, v474), v465, v475), v466, v476), v467, v477), 2uLL);
          v469 = (uint8x8_t *)((char *)&v496[a2] - 7 * a2);
          v478 = (int16x8_t *)((char *)v523 + 16 * v461 - 14 * (int)v461);
          v479 -= 8;
        }
        while (v479);
        ++v459;
        v460 += 2;
        v30 -= 8;
      }
      while (v30);
    }
  }
  return result;
}

uint8x8_t *dist_wtd_convolve_y_6tap_dist_wtd_avg_neon(uint8x8_t *result, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, int16x8_t a8, double a9, double a10, double a11, double a12, double a13, uint16x4_t a14, uint16x4_t a15)
{
  uint8x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint16x4_t v20;
  uint16x4_t v21;
  __int32 v22;
  __int32 v23;
  uint16x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int16x8_t v45;
  uint64_t v46;
  uint64_t v47;
  int16x8_t v48;
  uint64_t v49;
  uint8x8_t *v50;
  uint8x8_t v51;
  uint8x8_t *v52;
  int16x8_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int16x8_t v66;
  uint16x4_t *v67;
  int v68;
  uint8x8_t *v69;
  uint8x8_t v70;
  uint8x8_t *v71;
  uint8x8_t v72;
  uint8x8_t *v73;
  uint8x8_t v74;
  uint8x8_t *v75;
  uint8x8_t v76;
  uint8x8_t *v77;
  uint8x8_t v78;
  uint8x8_t *v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  uint16x8_t v96;
  int16x8_t v97;
  uint16x8_t v98;
  int16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int16x8_t v107;
  uint16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  uint16x8_t v112;
  int32x4_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int16x4_t v124;
  int16x4_t v125;
  int16x4_t v126;
  uint64_t v127;
  int16x4_t v128;
  int16x4_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  int16x4_t v133;
  char *v134;
  char *v135;
  char *v136;
  int16x8_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  int16x4_t v142;
  char *v143;
  int16x4_t v144;
  int16x4_t v145;
  int16x4_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int16x4_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int16x4_t v155;
  int16x4_t v156;
  int16x4_t v157;
  int16x4_t v158;
  int16x4_t v159;
  uint16x4_t v160;
  int32x4_t v161;
  int16x8_t v162;
  _DWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;

  v23 = *(_DWORD *)(a7 + 40);
  v22 = *(_DWORD *)(a7 + 44);
  v24 = *(uint16x4_t **)(a7 + 8);
  v25 = *(int *)(a7 + 16);
  if (a5 == 4 || a6 == 4)
  {
    v119 = 0;
    v120 = a2;
    v121 = 2 * a2;
    v122 = 3 * a2;
    v123 = 4 * a2;
    v124 = vdup_lane_s16(*(int16x4_t *)a8.i8, 1);
    v125 = vdup_lane_s16(*(int16x4_t *)a8.i8, 2);
    v126 = vdup_lane_s16(*(int16x4_t *)a8.i8, 3);
    v127 = 5 * a2;
    v128 = vdup_laneq_s16(a8, 4);
    v129 = vdup_laneq_s16(a8, 5);
    a14.i32[0] = v23;
    a15.i32[0] = v22;
    v130 = 4 * a4;
    v131 = (char *)v24 + 6 * (int)v25;
    v132 = 8 * (_DWORD)v25;
    v172 = v122;
    v167 = (char *)result + v127 + v122;
    v133 = vdup_laneq_s16(a8, 6);
    v134 = (char *)result + v121 + v127;
    v135 = (char *)result + v120 + v127;
    v136 = (char *)result + v127;
    v137.i64[0] = 0xE800E800E800E800;
    v137.i64[1] = 0xE800E800E800E800;
    v138 = (char *)v24 + 4 * v25;
    v139 = (char *)v24 + 2 * v25;
    do
    {
      v140 = 0;
      v15.i32[0] = *(__int32 *)((char *)result->i32 + v120);
      v16.i32[0] = *(__int32 *)((char *)result->i32 + v121);
      v141 = a3;
      v17.i32[0] = *(__int32 *)((char *)result->i32 + v172);
      v18.i32[0] = result->i32[v120];
      v142 = (int16x4_t)vmovl_u8((uint8x8_t)result->u32[0]).u64[0];
      v143 = v136;
      v144 = (int16x4_t)vmovl_u8(v15).u64[0];
      v145 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v16.i8).u64[0];
      v146 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v17.i8).u64[0];
      v147 = v135;
      v148 = v134;
      v149 = v167;
      v150 = a3 + a4;
      v151 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v18.i8).u64[0];
      v153 = a3 + 3 * a4;
      v152 = a3 + 2 * a4;
      v154 = a6;
      do
      {
        v19.i32[0] = *(_DWORD *)&v143[v119];
        v20.i32[0] = *(_DWORD *)&v147[v119];
        v21.i32[0] = *(_DWORD *)&v148[v119];
        v15.i32[0] = *(_DWORD *)&v149[v119];
        v155 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v151, v129), v146, v128), v145, v126), v144, v125);
        v156 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v151, v128), v146, v126), v145, v125), v144, v124);
        v157 = vmla_s16(vmla_s16(vmul_s16(v151, v126), v146, v125), v145, v124);
        v144 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v19.i8).u64[0];
        v145 = (int16x4_t)vmovl_u8((uint8x8_t)v20).u64[0];
        v158 = vmla_s16(vmul_s16(v151, v125), v146, v124);
        v146 = (int16x4_t)vmovl_u8((uint8x8_t)v21).u64[0];
        v159 = vmla_s16(v155, v142, v124);
        v142 = v151;
        v151 = (int16x4_t)vmovl_u8(v15).u64[0];
        v160 = (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(v159, v144, v133), 2uLL);
        v20 = (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(v157, v144, v128), v145, v129), v146, v133), 2uLL);
        v21 = (uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmla_s16(v158, v144, v126), v145, v128), v146, v129), v151, v133), 2uLL);
        v161 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(v156, v144, v129), v145, v133), 2uLL), a15, 0), *(uint16x4_t *)&v139[v140], a14, 0);
        v18 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(v20, a15, 0), *(uint16x4_t *)&v138[v140], a14, 0);
        v19 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(v21, a15, 0), *(uint16x4_t *)&v131[v140], a14, 0);
        v17 = vshrn_high_n_s32(vshrn_n_s32(v18, 4uLL), v19, 4uLL);
        v162 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(v160, a15, 0), *(uint16x4_t *)((char *)v24 + v140), a14, 0), 4uLL), v161, 4uLL), v137);
        v16 = vaddq_s16(v17, v137);
        *(int8x8_t *)v162.i8 = vqrshrun_n_s16(v162, 4uLL);
        *(_DWORD *)(v141 + v119) = v162.i32[0];
        v163 = (_DWORD *)(v153 + v119);
        *(_DWORD *)(v150 + v119) = v162.i32[1];
        v141 += v130;
        v153 += v130;
        v15 = (uint8x8_t)vqrshrun_n_s16(v16, 4uLL);
        v150 += v130;
        *(_DWORD *)(v152 + v119) = v15.i32[0];
        v140 += v132;
        v149 += v123;
        v148 += v123;
        v147 += v123;
        v143 += v123;
        v152 += v130;
        *v163 = v15.i32[1];
        v154 -= 4;
      }
      while (v154);
      result = (uint8x8_t *)((char *)result + 4);
      ++v24;
      v119 += 4;
      v131 += 8;
      v138 += 8;
      v139 += 8;
      a5 -= 4;
    }
    while (a5);
  }
  else
  {
    v26 = 0;
    v27 = a2;
    v28 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 1);
    v29 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 2);
    v30 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 3);
    v31 = vdupq_laneq_s16(a8, 4);
    v32 = vdupq_laneq_s16(a8, 5);
    a14.i32[0] = *(_DWORD *)(a7 + 40);
    a15.i32[0] = *(_DWORD *)(a7 + 44);
    v34 = a4;
    v35 = 4 * a4;
    v36 = 8 * a2;
    v171 = (char *)result + 5 * a2;
    v37 = 2 * v25;
    v38 = 6 * v25;
    v39 = v25;
    v40 = 14 * v25;
    v41 = 4 * v25;
    v42 = 12 * v25;
    v43 = 10 * v25;
    v44 = 2 * a4;
    v45 = vdupq_laneq_s16(a8, 6);
    v46 = 16 * v25;
    v170 = a3 + v35;
    v169 = a3 + v35 + v44 + v34;
    v47 = 8 * a4;
    v168 = a3 + v44 + v35;
    v165 = a3 + v44 + v34;
    v166 = a3 + v34 + v35;
    v164 = a3 + v44;
    v48.i64[0] = 0xE800E800E800E800;
    v48.i64[1] = 0xE800E800E800E800;
    v49 = a3 + v34;
    do
    {
      v50 = (uint8x8_t *)((char *)result + v27 + v27);
      v51 = *v50;
      v52 = (uint8x8_t *)((char *)v50 + v27);
      v53 = (int16x8_t)vmovl_u8(*result);
      v54 = v171;
      v55 = a3;
      v56 = v49;
      v57 = v164;
      v58 = v165;
      v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)result + v27));
      v60 = (int16x8_t)vmovl_u8(v51);
      v61 = (int16x8_t)vmovl_u8(*v52);
      v63 = v169;
      v62 = v170;
      v65 = v166;
      v64 = v168;
      v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v52 + v27));
      v67 = v24;
      v68 = a6;
      do
      {
        v69 = (uint8x8_t *)&v54[v26 + v27];
        v70 = *v69;
        v71 = (uint8x8_t *)((char *)v69 + v27);
        v72 = *v71;
        v73 = (uint8x8_t *)((char *)v71 + v27);
        v74 = *v73;
        v75 = (uint8x8_t *)((char *)v73 + v27);
        v76 = *v75;
        v77 = (uint8x8_t *)((char *)v75 + v27);
        v78 = *v77;
        v79 = (uint8x8_t *)((char *)v77 + v27);
        v80 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v54[v26]);
        v81 = (int16x8_t)vmovl_u8(v70);
        v82 = (int16x8_t)vmovl_u8(v72);
        v83 = vmulq_s16(v53, v28);
        v53 = (int16x8_t)vmovl_u8(v74);
        v84 = vmlaq_s16(vmlaq_s16(v83, v59, v29), v60, v30);
        v85 = vmulq_s16(v59, v28);
        v59 = (int16x8_t)vmovl_u8(v76);
        v86 = vmlaq_s16(v84, v61, v31);
        v87 = vmlaq_s16(vmlaq_s16(v85, v60, v29), v61, v30);
        v88 = vmlaq_s16(vmulq_s16(v60, v28), v61, v29);
        v60 = (int16x8_t)vmovl_u8(v78);
        v89 = vmulq_s16(v61, v28);
        v61 = (int16x8_t)vmovl_u8(*v79);
        v90 = vmlaq_s16(v87, v66, v31);
        v91 = vmlaq_s16(v88, v66, v30);
        v92 = vmlaq_s16(v89, v66, v29);
        v93 = vmlaq_s16(v86, v66, v32);
        v94 = vmulq_s16(v66, v28);
        v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v79 + v27));
        v95.i64[0] = 0x1800180018001800;
        v95.i64[1] = 0x1800180018001800;
        v96 = (uint16x8_t)vrsraq_n_s16(v95, vmlaq_s16(v93, v45, v80), 2uLL);
        v97.i64[0] = 0x1800180018001800;
        v97.i64[1] = 0x1800180018001800;
        v98 = (uint16x8_t)vrsraq_n_s16(v97, vmlaq_s16(vmlaq_s16(v90, v32, v80), v45, v81), 2uLL);
        v99.i64[0] = 0x1800180018001800;
        v99.i64[1] = 0x1800180018001800;
        v100 = (uint16x8_t)vrsraq_n_s16(v99, vmlaq_s16(vmlaq_s16(vmlaq_s16(v91, v31, v80), v32, v81), v45, v82), 2uLL);
        v90.i64[0] = 0x1800180018001800;
        v90.i64[1] = 0x1800180018001800;
        v101 = (uint16x8_t)vrsraq_n_s16(v90, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v92, v30, v80), v31, v81), v32, v82), v45, v53), 2uLL);
        v93.i64[0] = 0x1800180018001800;
        v93.i64[1] = 0x1800180018001800;
        v102 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v94, v29, v80), v30, v81), v31, v82), v32, v53), v45, v59);
        v103 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v28, v80), v29, v81), v30, v82), v31, v53), v32, v59);
        v80.i64[0] = 0x1800180018001800;
        v80.i64[1] = 0x1800180018001800;
        v104 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v28, v81), v29, v82), v30, v53), v31, v59), v32, v60);
        v81.i64[0] = 0x1800180018001800;
        v81.i64[1] = 0x1800180018001800;
        v105 = *(uint16x8_t *)&v67->i8[v37];
        v106 = (uint16x8_t)vrsraq_n_s16(v93, v102, 2uLL);
        v107 = *(int16x8_t *)&v67->i8[v41];
        v108 = *(uint16x8_t *)&v67->i8[v38];
        v109 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v98.i8, a15, 0), *(uint16x4_t *)v105.i8, a14, 0);
        v110 = (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v98, a15, 0), v105, a14, 0);
        v111 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v100.i8, a15, 0), *(uint16x4_t *)v107.i8, a14, 0);
        v112 = (uint16x8_t)vrsraq_n_s16(v80, vmlaq_s16(v103, v45, v60), 2uLL);
        v113 = (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v100, a15, 0), (uint16x8_t)v107, a14, 0);
        v114 = (uint16x8_t)vrsraq_n_s16(v81, vmlaq_s16(v104, v45, v61), 2uLL);
        v107.i64[0] = 0x1800180018001800;
        v107.i64[1] = 0x1800180018001800;
        v115 = (uint16x8_t)vrsraq_n_s16(v107, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v28, v82), v29, v53), v30, v59), v31, v60), v32, v61), v45, v66), 2uLL);
        *(int8x8_t *)(v55 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v96.i8, a15, 0), *v67, a14, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v96, a15, 0), *(uint16x8_t *)v67->i8, a14, 0), 4uLL), v48), 4uLL);
        *(int8x8_t *)(v56 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v109, 4uLL), v110, 4uLL), v48), 4uLL);
        *(int8x8_t *)(v57 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v111, 4uLL), v113, 4uLL), v48), 4uLL);
        *(int8x8_t *)(v58 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v101.i8, a15, 0), *(uint16x4_t *)v108.i8, a14, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v101, a15, 0), v108, a14, 0), 4uLL), v48), 4uLL);
        v116 = *(uint16x8_t *)&v67->i8[v43];
        v117 = *(uint16x8_t *)&v67->i8[v42];
        v118 = *(uint16x8_t *)&v67->i8[v40];
        *(int8x8_t *)(v62 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v106.i8, a15, 0), v67[v39], a14, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v106, a15, 0), *(uint16x8_t *)v67[v39].i8, a14, 0), 4uLL), v48), 4uLL);
        *(int8x8_t *)(v65 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v112.i8, a15, 0), *(uint16x4_t *)v116.i8, a14, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v112, a15, 0), v116, a14, 0), 4uLL), v48), 4uLL);
        *(int8x8_t *)(v64 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v114.i8, a15, 0), *(uint16x4_t *)v117.i8, a14, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v114, a15, 0), v117, a14, 0), 4uLL), v48), 4uLL);
        *(int8x8_t *)(v63 + v26) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v115.i8, a15, 0), *(uint16x4_t *)v118.i8, a14, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v115, a15, 0), v118, a14, 0), 4uLL), v48), 4uLL);
        v54 += v36;
        v67 = (uint16x4_t *)((char *)v67 + v46);
        v63 += v47;
        v64 += v47;
        v65 += v47;
        v58 += v47;
        v57 += v47;
        v56 += v47;
        v55 += v47;
        v62 += v47;
        v68 -= 8;
      }
      while (v68);
      ++result;
      v24 += 2;
      v26 += 8;
      a5 -= 8;
    }
    while (a5);
  }
  return result;
}

uint8x8_t *dist_wtd_convolve_y_8tap_dist_wtd_avg_neon(uint8x8_t *result, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, int16x8_t a8, uint16x4_t a9, uint16x4_t a10)
{
  uint16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  uint8x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v29;
  int16x8_t v30;
  uint16x4_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8x8_t *v53;
  uint8x8_t v54;
  uint8x8_t *v55;
  uint8x8_t v56;
  uint8x8_t *v57;
  uint8x8_t v58;
  uint8x8_t *v59;
  uint8x8_t v60;
  int16x8_t v61;
  uint64_t v62;
  int16x8_t v63;
  int16x8_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int16x8_t v76;
  int v78;
  uint8x8_t *v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  uint8x8_t v83;
  uint8x8_t *v84;
  uint8x8_t v85;
  uint8x8_t *v86;
  uint8x8_t v87;
  uint8x8_t *v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  uint8x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  uint16x8_t v130;
  int16x8_t v131;
  uint16x8_t v132;
  uint16x8_t v133;
  int16x8_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint16x8_t v141;
  uint16x8_t v145;
  uint16x8_t v146;
  int16x8_t v147;
  uint16x8_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  uint16x8_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint16x8_t v160;
  unint64_t v161;
  int16x4_t v162;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int16x4_t v168;
  uint64_t v169;
  int16x4_t v170;
  int16x8_t v171;
  int16x4_t v180;
  int16x4_t v181;
  int16x4_t v182;
  int16x4_t v183;
  char *v187;
  uint8x8_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint16x4_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  int16x4_t v203;
  int16x4_t v204;
  int16x4_t v205;
  int16x4_t v206;
  int16x4_t v207;
  int16x4_t v208;
  int16x4_t v209;
  int8x8_t v224;
  _DWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint8x8_t *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint8x8_t *v243;
  int v244;
  int v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;

  v241 = *(int *)(a7 + 16);
  v240 = 2 * a2;
  v17 = 4 * a2;
  v239 = 3 * a2;
  v18 = a4;
  a9.i16[0] = *(_WORD *)(a7 + 40);
  v19 = 3 * a4;
  a10.i16[0] = *(_WORD *)(a7 + 44);
  v238 = a6;
  if (a5 == 4 || a6 == 4)
  {
    v161 = 0;
    v251 = 2 * (int)v241;
    v249 = 3 * (int)v241;
    v162 = vdup_lane_s16(*(int16x4_t *)a8.i8, 0);
    v163 = vdup_lane_s16(*(int16x4_t *)a8.i8, 1);
    v164 = vdup_lane_s16(*(int16x4_t *)a8.i8, 2);
    v165 = vdup_lane_s16(*(int16x4_t *)a8.i8, 3);
    v166 = vdup_laneq_s16(a8, 4);
    v167 = vdup_laneq_s16(a8, 5);
    v168 = vdup_laneq_s16(a8, 6);
    v169 = 4 * a4;
    v247 = a3 + v19;
    v170 = vdup_laneq_s16(a8, 7);
    v235 = (uint64_t)result + 7 * a2 + v240;
    v237 = (uint64_t)result + 7 * a2 + v239;
    v234 = &result[a2];
    v233 = (char *)result + 7 * a2;
    v171.i64[0] = 0xE800E800E800E800;
    v171.i64[1] = 0xE800E800E800E800;
    _X25 = *(uint16x4_t **)(a7 + 8);
    do
    {
      v245 = a5;
      __asm { PRFM            #0, [X0] }
      _X8 = (__int32 *)((char *)result + a2);
      __asm { PRFM            #0, [X8] }
      _X11 = (char *)result + v240;
      __asm { PRFM            #0, [X11] }
      _X15 = (char *)result + v239;
      __asm { PRFM            #0, [X15] }
      v11.i32[0] = *_X8;
      v12.i32[0] = *(__int32 *)((char *)result->i32 + 2 * a2);
      v13.i32[0] = *(__int32 *)((char *)result->i32 + 3 * a2);
      v14.i32[0] = result->i32[a2];
      v15.i32[0] = *(__int32 *)((char *)result->i32 + 5 * a2);
      v16.i32[0] = *(__int32 *)((char *)result->i32 + 6 * a2);
      v180 = (int16x4_t)vmovl_u8((uint8x8_t)result->u32[0]).u64[0];
      v181 = (int16x4_t)vmovl_u8((uint8x8_t)v11).u64[0];
      v182 = (int16x4_t)vmovl_u8((uint8x8_t)v12).u64[0];
      v183 = (int16x4_t)vmovl_u8((uint8x8_t)v13).u64[0];
      v13 = (int16x4_t)vmovl_u8(v14).u64[0];
      _X8 = (char *)_X25 + 2 * v241;
      _X11 = (char *)_X25 + 2 * v251;
      v12 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v15.i8).u64[0];
      v11 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v16.i8).u64[0];
      _X15 = (char *)_X25 + 2 * v249;
      v187 = v233;
      v188 = v234;
      v189 = v235;
      v190 = v237;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X8]
      }
      v193 = _X25;
      v194 = a3 + a4;
      v195 = a3 + 3 * a4;
      __asm
      {
        PRFM            #0, [X11]
        PRFM            #0, [X15]
      }
      v198 = a3 + 2 * a4;
      v199 = v247;
      v200 = a3;
      v201 = a6;
      do
      {
        _X11 = (_DWORD *)(v200 + v161);
        v10.i32[0] = *(_DWORD *)&v187[v161];
        v14.i32[0] = v188->i32[v161 / 4];
        v15.i32[0] = *(_DWORD *)(v189 + v161);
        v16.i32[0] = *(_DWORD *)(v190 + v161);
        v203 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v11, v167), v12, v166), v13, v165), v183, v164);
        v204 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v11, v168), v12, v167), v13, v166), v183, v165), v182, v164);
        v205 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v11, v166), v12, v165), v13, v164), v183, v163);
        v206 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v11, v165), v12, v164), v13, v163), v183, v162);
        v183 = (int16x4_t)vmovl_u8((uint8x8_t)v10).u64[0];
        v207 = vmla_s16(vmla_s16(v204, v181, v163), v180, v162);
        v208 = vmla_s16(vmla_s16(v203, v182, v163), v181, v162);
        v180 = v13;
        v13 = (int16x4_t)vmovl_u8(v14).u64[0];
        v181 = v12;
        v12 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v15.i8).u64[0];
        v209 = vmla_s16(v205, v182, v162);
        v182 = v11;
        v11 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v16.i8).u64[0];
        __asm { PRFM            #0, [X25] }
        _X12 = (uint16x4_t *)((char *)_X25 + 2 * v241);
        __asm { PRFM            #0, [X12] }
        _X16 = (char *)_X25 + 2 * v251;
        __asm { PRFM            #0, [X16] }
        _X16 = (char *)_X25 + 2 * v249;
        __asm
        {
          PRFM            #0, [X16]
          PRFM            #0, [X11]
        }
        _X16 = (_DWORD *)(v194 + v161);
        __asm { PRFM            #0, [X16] }
        _X17 = (_DWORD *)(v198 + v161);
        __asm { PRFM            #0, [X17] }
        _X4 = v199 + v161;
        __asm { PRFM            #0, [X4] }
        v10 = *(uint16x4_t *)((char *)_X25 + 6 * v241);
        v16 = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(v209, v183, v167), v13, v168), v12, v170), 2uLL), a10, 0), *(uint16x4_t *)((char *)_X25 + 4 * v241), a9, 0), 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(vmla_s16(vmla_s16(vmla_s16(v206, v183, v166), v13, v167), v12, v168),
                                               v11,
                                               v170),
                                             2uLL),
                               a10,
                               0),
                             v10,
                             a9,
                             0),
                4uLL);
        v15 = vaddq_s16(v16, v171);
        v224 = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800, vmla_s16(v207, v183, v170), 2uLL), a10, 0), *_X25, a9, 0), 4uLL), (int32x4_t)vmlal_lane_u16(vmull_lane_u16((uint16x4_t)vrsra_n_s16((int16x4_t)0x1800180018001800,
                                                  vmla_s16(vmla_s16(v208, v183, v168), v13, v170),
                                                  2uLL),
                                    a10,
                                    0),
                                  *_X12,
                                  a9,
                                  0),
                     4uLL),
                   v171),
                 4uLL);
        v225 = (_DWORD *)(v195 + v161);
        *_X11 = v224.i32[0];
        v200 += v169;
        v199 += v169;
        v198 += v169;
        v195 += v169;
        *_X16 = v224.i32[1];
        v14 = (uint8x8_t)vqrshrun_n_s16(v15, 4uLL);
        v194 += v169;
        _X25 += (int)v241;
        v190 += v17;
        v189 += v17;
        *_X17 = v14.i32[0];
        *v225 = v14.i32[1];
        v188 = (uint8x8_t *)((char *)v188 + v17);
        v187 += v17;
        v201 -= 4;
      }
      while (v201);
      result = (uint8x8_t *)((char *)result + 4);
      _X25 = v193 + 1;
      v161 += 4;
      a5 = v245 - 4;
      a6 = v238;
    }
    while (v245 != 4);
  }
  else
  {
    v20 = 0;
    v21 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 0);
    v22 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 1);
    v23 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 2);
    v24 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 3);
    v25 = vdupq_laneq_s16(a8, 4);
    v26 = vdupq_laneq_s16(a8, 5);
    v27 = vdupq_laneq_s16(a8, 6);
    v236 = (char *)result + 7 * a2;
    v232 = a3 + 4 * a4;
    v231 = v232 + 3 * a4;
    v28 = vdupq_laneq_s16(a8, 7);
    v230 = 4 * a4;
    v29 = 8 * a4;
    v228 = a3 + a4;
    v229 = a3 + 6 * a4;
    v227 = a3 + 3 * a4;
    v226 = a3 + 2 * a4;
    v30.i64[0] = 0xE800E800E800E800;
    v30.i64[1] = 0xE800E800E800E800;
    v31 = *(uint16x4_t **)(a7 + 8);
    v32 = 2 * v18;
    v33 = 2 * v19;
    do
    {
      v244 = a5;
      __asm { PRFM            #0, [X0] }
      _X8 = (char *)result + a2;
      __asm { PRFM            #0, [X8] }
      _X9 = (char *)result + v240;
      __asm { PRFM            #0, [X9] }
      _X9 = (char *)result + v239;
      __asm { PRFM            #0, [X9] }
      _X9 = (char *)result + v17;
      __asm { PRFM            #0, [X9] }
      _X9 = (char *)result + 5 * a2;
      __asm { PRFM            #0, [X9] }
      _X9 = (char *)result + 6 * a2;
      __asm { PRFM            #0, [X9] }
      _X9 = (char *)result + 7 * a2;
      __asm { PRFM            #0, [X9] }
      v243 = result;
      v53 = (uint8x8_t *)&_X8[a2];
      v54 = *v53;
      v55 = (uint8x8_t *)((char *)v53 + a2);
      v56 = *v55;
      v57 = (uint8x8_t *)((char *)v55 + a2);
      v58 = *v57;
      v59 = (uint8x8_t *)((char *)v57 + a2);
      v60 = *(uint8x8_t *)((char *)v59 + a2);
      v61 = (int16x8_t)vmovl_u8(*result);
      v62 = a3;
      v248 = (char *)v31 + 4 * v241;
      v250 = (char *)v31 + 2 * v241;
      v63 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)result + a2));
      v64 = (int16x8_t)vmovl_u8(v54);
      v65 = v236;
      v246 = (char *)v31 + 6 * (int)v241;
      v66 = v228 + v230;
      v67 = v228;
      v69 = v226;
      v68 = v227;
      v70 = (int16x8_t)vmovl_u8(v56);
      v71 = (int16x8_t)vmovl_u8(v58);
      v72 = (int16x8_t)vmovl_u8(*v59);
      v73 = v231;
      v74 = v232;
      v75 = v229;
      v76 = (int16x8_t)vmovl_u8(v60);
      _X4 = v31;
      v78 = a6;
      _X5 = v31;
      do
      {
        v80 = (uint8x8_t *)&v65[v20 + a2];
        v81 = *v80;
        v82 = (uint8x8_t *)((char *)v80 + a2);
        v83 = *v82;
        v84 = (uint8x8_t *)((char *)v82 + a2);
        v85 = *v84;
        v86 = (uint8x8_t *)((char *)v84 + a2);
        v87 = *v86;
        v88 = (uint8x8_t *)((char *)v86 + a2);
        v89 = *v88;
        v90 = (uint8x8_t *)((char *)v88 + a2);
        v91 = *(uint8x8_t *)((char *)v90 + a2);
        v92 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v65[v20]);
        v93 = vmulq_s16(v61, v21);
        v61 = (int16x8_t)vmovl_u8(v81);
        v94 = vmlaq_s16(vmlaq_s16(v93, v63, v22), v64, v23);
        v95 = vmlaq_s16(vmulq_s16(v63, v21), v64, v22);
        v63 = (int16x8_t)vmovl_u8(v83);
        v96 = vmulq_s16(v64, v21);
        v64 = (int16x8_t)vmovl_u8(v85);
        v97 = vmlaq_s16(v95, v70, v23);
        v98 = vmlaq_s16(v96, v70, v22);
        v99 = vmulq_s16(v70, v21);
        v100 = vmlaq_s16(v94, v70, v24);
        v70 = (int16x8_t)vmovl_u8(v87);
        v101 = vmlaq_s16(v97, v71, v24);
        v102 = vmlaq_s16(v98, v71, v23);
        v103 = vmlaq_s16(v99, v71, v22);
        v104 = vmulq_s16(v71, v21);
        v105 = vmlaq_s16(v100, v71, v25);
        v71 = (int16x8_t)vmovl_u8(v89);
        v106 = vmlaq_s16(v101, v72, v25);
        v107 = vmlaq_s16(v102, v72, v24);
        v108 = vmlaq_s16(v103, v72, v23);
        v109 = vmlaq_s16(v104, v72, v22);
        v110 = vmlaq_s16(v105, v72, v26);
        v111 = vmulq_s16(v72, v21);
        v72 = (int16x8_t)vmovl_u8(*v90);
        __asm { PRFM            #0, [X5] }
        _X3 = v250;
        __asm { PRFM            #0, [X3] }
        v115 = vmlaq_s16(v106, v76, v26);
        v116 = vmlaq_s16(v110, v76, v27);
        v117 = vmlaq_s16(v107, v76, v25);
        v118 = vmlaq_s16(v108, v76, v24);
        v119 = vmlaq_s16(v109, v76, v23);
        v120 = vmlaq_s16(v111, v76, v22);
        v121 = vmulq_s16(v76, v21);
        v76 = (int16x8_t)vmovl_u8(v91);
        _X3 = v248;
        __asm { PRFM            #0, [X3] }
        _X3 = v246;
        __asm { PRFM            #0, [X3] }
        v126.i64[0] = 0x1800180018001800;
        v126.i64[1] = 0x1800180018001800;
        v127.i64[0] = 0x1800180018001800;
        v127.i64[1] = 0x1800180018001800;
        v128.i64[0] = 0x1800180018001800;
        v128.i64[1] = 0x1800180018001800;
        v129.i64[0] = 0x1800180018001800;
        v129.i64[1] = 0x1800180018001800;
        v130 = (uint16x8_t)vrsraq_n_s16(v126, vmlaq_s16(v116, v28, v92), 2uLL);
        v131.i64[0] = 0x1800180018001800;
        v131.i64[1] = 0x1800180018001800;
        v132 = (uint16x8_t)vrsraq_n_s16(v127, vmlaq_s16(vmlaq_s16(v115, v27, v92), v28, v61), 2uLL);
        v133 = (uint16x8_t)vrsraq_n_s16(v128, vmlaq_s16(vmlaq_s16(vmlaq_s16(v117, v26, v92), v27, v61), v28, v63), 2uLL);
        v134.i64[0] = 0x1800180018001800;
        v134.i64[1] = 0x1800180018001800;
        v135 = (uint16x8_t)vrsraq_n_s16(v129, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v118, v25, v92), v26, v61), v27, v63), v28, v64), 2uLL);
        v116.i64[0] = 0x1800180018001800;
        v116.i64[1] = 0x1800180018001800;
        v136 = (uint16x8_t)vrsraq_n_s16(v131, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v119, v24, v92), v25, v61), v26, v63), v27, v64), v28, v70), 2uLL);
        __asm { PRFM            #0, [X4] }
        _X3 = (char *)_X4 + v32;
        __asm { PRFM            #0, [X3] }
        _X3 = (char *)_X4 + v230;
        v141 = (uint16x8_t)vrsraq_n_s16(v134, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v120, v23, v92), v24, v61), v25, v63), v26, v64), v27, v70), v28, v71), 2uLL);
        __asm { PRFM            #0, [X3] }
        _X3 = (char *)_X4 + v33;
        __asm { PRFM            #0, [X3] }
        v145 = *(uint16x8_t *)&_X4->i8[2 * v241];
        v146 = *(uint16x8_t *)&_X4->i8[4 * v241];
        v147 = *(int16x8_t *)&_X4->i8[6 * v241];
        v148 = (uint16x8_t)vrsraq_n_s16(v116, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v121, v22, v92), v23, v61), v24, v63), v25, v64), v26, v70), v27, v71), v28, v72), 2uLL);
        v149 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v130.i8, a10, 0), *_X4, a9, 0);
        v150 = (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v130, a10, 0), *(uint16x8_t *)_X4->i8, a9, 0);
        v151 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v132.i8, a10, 0), *(uint16x4_t *)v145.i8, a9, 0);
        v152 = (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v132, a10, 0), v145, a9, 0);
        v153 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v133.i8, a10, 0), *(uint16x4_t *)v146.i8, a9, 0);
        v154 = (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v133, a10, 0), v146, a9, 0);
        v155 = (int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v135.i8, a10, 0), *(uint16x4_t *)v147.i8, a9, 0);
        v156 = (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v135, a10, 0), (uint16x8_t)v147, a9, 0);
        v147.i64[0] = 0x1800180018001800;
        v147.i64[1] = 0x1800180018001800;
        v157 = (uint16x8_t)vrsraq_n_s16(v147, vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v21, v92), v22, v61), v23, v63), v24, v64), v25, v70), v26, v71), v27, v72), v28, v76), 2uLL);
        *(int8x8_t *)(v62 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v149, 4uLL), v150, 4uLL), v30), 4uLL);
        *(int8x8_t *)(v67 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v151, 4uLL), v152, 4uLL), v30), 4uLL);
        *(int8x8_t *)(v69 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v153, 4uLL), v154, 4uLL), v30), 4uLL);
        *(int8x8_t *)(v68 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(v155, 4uLL), v156, 4uLL), v30), 4uLL);
        v158 = *(uint16x8_t *)&_X4->i8[10 * v241];
        v159 = *(uint16x8_t *)&_X4->i8[12 * v241];
        v160 = *(uint16x8_t *)&_X4->i8[14 * v241];
        *(int8x8_t *)(v74 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v136.i8, a10, 0), _X4[v241], a9, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v136, a10, 0), *(uint16x8_t *)_X4[v241].i8, a9, 0), 4uLL), v30), 4uLL);
        *(int8x8_t *)(v66 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v141.i8, a10, 0), *(uint16x4_t *)v158.i8, a9, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v141, a10, 0), v158, a9, 0), 4uLL), v30), 4uLL);
        *(int8x8_t *)(v75 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v148.i8, a10, 0), *(uint16x4_t *)v159.i8, a9, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v148, a10, 0), v159, a9, 0), 4uLL), v30), 4uLL);
        *(int8x8_t *)(v73 + v20) = vqrshrun_n_s16(vaddq_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v157.i8, a10, 0), *(uint16x4_t *)v160.i8, a9, 0), 4uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v157, a10, 0), v160, a9, 0), 4uLL), v30), 4uLL);
        v65 += 8 * a2;
        _X4 += 2 * v241;
        v73 += v29;
        v75 += v29;
        v68 += v29;
        v66 += v29;
        v69 += v29;
        v67 += v29;
        v62 += v29;
        v74 += v29;
        v78 -= 8;
      }
      while (v78);
      result = v243 + 1;
      v31 = _X5 + 2;
      v20 += 8;
      a5 = v244 - 8;
      a6 = v238;
    }
    while (v244 != 8);
  }
  return result;
}

#error "208D14418: call analysis failed (funcsize=1838)"

uint64_t av1_compound_type_rd(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t a8, uint64_t a9, uint8x8_t **a10, int *a11, uint64_t *a12, int *a13, uint64_t a14, uint64_t a15, _DWORD *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  uint8x8_t *v31;
  int32x4_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  int v82;
  uint64_t result;
  int *v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  unsigned __int8 **v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint8x16_t *v132;
  uint8x16_t *v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int8x8_t *v136;
  uint64_t v137;
  uint8x16_t *v138;
  int8x8_t **v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t *v183;
  int v184;
  int32x2_t v185;
  uint16x8_t v186;
  uint64_t v187;
  uint64_t v188;
  _BOOL4 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint16x8_t *v196;
  uint16x8_t *v197;
  uint64_t v198;
  uint8x8_t *v199;
  uint8x8_t *v200;
  unsigned int v201;
  unsigned __int8 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  int32x2_t v225;
  uint16x8_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  unsigned int v244;
  char v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  int32x2_t v260;
  uint16x8_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  _BOOL4 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  unsigned __int8 v278;
  __int16 v279;
  int v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  int v289;
  unsigned int v290;
  _BOOL4 v292;
  _BOOL4 v293;
  _BOOL4 v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned __int8 *v305;
  uint64_t v306;
  unsigned __int8 *v307;
  uint64_t v308;
  unsigned __int8 *v309;
  uint64_t v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  unsigned __int8 v396;
  int v397;
  uint64_t v398;
  int v399;
  _DWORD *v400;
  int v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  BOOL v406;
  int v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  unsigned __int8 v413[128];
  uint64_t v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  int32x4_t v422;
  uint8x8_t *v423;
  uint8x8_t *v424;
  _QWORD v425[5];

  *(_QWORD *)&v376 = a8;
  *(_QWORD *)&v368 = a5;
  v18 = a4;
  v335 = a3;
  v19 = a2;
  v20 = a1;
  v22 = a11;
  v21 = a12;
  v329 = (uint64_t)a10;
  v425[2] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)&v366 + 1) = a1 + 389052;
  v325 = (int *)(a2 + 119984);
  v23 = **(unsigned __int8 ***)(a2 + 8280);
  v24 = v23[2];
  v25 = (char)v23[17];
  v26 = (char)v23[16];
  v27 = (char)v23[16];
  if (v25 >= 1)
  {
    if (v25 >= 5 && v26 < 5)
    {
LABEL_25:
      v27 = (v26 + 4 * v25 - 13);
    }
    else
    {
      switch(v23[16])
      {
        case 1u:
          v29 = v25 - 2;
          if ((v25 - 2) >= 3u)
            goto LABEL_25;
          goto LABEL_24;
        case 2u:
          if ((_DWORD)v25 == 4)
            v29 = 5;
          else
            v29 = -1;
          if ((_DWORD)v25 != 3)
            goto LABEL_23;
          v27 = 24;
          break;
        case 3u:
          if ((_DWORD)v25 != 4)
            goto LABEL_25;
          v27 = 26;
          break;
        case 5u:
          if ((_DWORD)v25 == 6)
            v29 = 7;
          else
            v29 = -1;
          if ((_DWORD)v25 == 7)
          {
            v27 = 23;
            break;
          }
LABEL_23:
          if ((v29 & 0x80) != 0)
            goto LABEL_25;
LABEL_24:
          v27 = (v29 + 20);
          break;
        case 6u:
          if ((_DWORD)v25 != 7)
            goto LABEL_25;
          v27 = 28;
          break;
        default:
          goto LABEL_25;
      }
    }
  }
  v321 = v27;
  v390 = a4;
  v30 = block_size_wide_6[a4];
  HIDWORD(v339) = *a11;
  *(_DWORD *)((char *)v425 + 7) = 0;
  *(_QWORD *)&v384 = a1 + 239272;
  v31 = a10[1];
  v424 = *a10;
  v425[0] = 0;
  v423 = v31;
  v333 = v30;
  v402 = v30;
  v32.i64[1] = 0x7FFFFFFFFFFFFFFFLL;
  v420 = xmmword_208F56640;
  v421 = unk_208F56650;
  v418 = xmmword_208F46BD0;
  v419 = xmmword_208F46BD0;
  v416 = unk_208F56650;
  v417 = xmmword_208F46BD0;
  v415 = xmmword_208F56640;
  v33 = *v325;
  if ((int)v33 < 1)
  {
LABEL_58:
    LODWORD(v35) = 0;
    v39 = 0;
    goto LABEL_59;
  }
  v34 = 0;
  v35 = 0;
  v36 = (_DWORD)v24 == 15 || (_DWORD)v24 == 23;
  v37 = v36;
  v38 = a2 + 109824;
  v39 = 1;
  while (1)
  {
    if (*(_DWORD *)(v38 + v34 + 44) == *((_DWORD *)v23 + 5)
      && *(unsigned __int8 *)(v38 + v34 + 40) == v26
      && *(_DWORD *)(v38 + v34 + 32) == *((_DWORD *)v23 + 2))
    {
      v40 = *(_QWORD *)(v19 + 11160);
      v41 = *v23;
      v42 = block_size_wide_6[v41];
      v43 = block_size_high_5[v41];
      if (v42 < v43)
        v43 = v42;
      if (*(unsigned __int8 *)(v40 + 36 * v26 + 32) > 1u)
        v44 = v37;
      else
        v44 = 0;
      if (v43 <= 7)
        v44 = 0;
      if (*(_DWORD *)(v38 + v34 + 52) == v44
        && *(unsigned __int8 *)(v38 + v34 + 41) == v25
        && *(_DWORD *)(v38 + v34 + 36) == *((_DWORD *)v23 + 3))
      {
        if (*(unsigned __int8 *)(v40 + 36 * (int)v25 + 32) > 1u)
          v45 = v37;
        else
          v45 = 0;
        if (v43 <= 7)
          v45 = 0;
        if (*(_DWORD *)(v38 + v34 + 56) == v45)
          break;
      }
    }
    v39 = ++v35 < v33;
    v34 += 160;
    if (160 * v33 == v34)
      goto LABEL_58;
  }
  v46 = (v24 <= 0x18 && ((1 << v24) & 0x1790000) != 0
      || (v298 = *(unsigned __int8 *)(v19 + v34 + 109866), v298 <= 0x18) && ((1 << v298) & 0x1790000) != 0)
     && !*(_DWORD *)(*((_QWORD *)&v366 + 1) + 148);
  if (*(_DWORD *)(*((_QWORD *)&v366 + 1) + 188))
    goto LABEL_494;
  if ((v24 - 16) < 9u && ((0x179u >> (v24 - 16)) & 1) != 0)
  {
    LOBYTE(v295) = 1;
    goto LABEL_495;
  }
  v297 = *(unsigned __int8 *)(v19 + v34 + 109866);
  if (v297 >= 0x19)
LABEL_494:
    LOBYTE(v295) = 0;
  else
    v295 = (0x1790000u >> v297) & 1;
LABEL_495:
  v296 = v19 + v34;
  *(_QWORD *)&v419 = *(_QWORD *)(v19 + v34 + 109744);
  v420 = *(_OWORD *)(v19 + v34 + 109760);
  *(_QWORD *)&v417 = *(_QWORD *)(v19 + v34 + 109792);
  v32 = *(int32x4_t *)(v19 + v34 + 109808);
  v415 = (__int128)v32;
  *(_QWORD *)&v418 = *(_QWORD *)(v19 + v34 + 109840);
  if (!v46)
  {
    DWORD2(v419) = *(_DWORD *)(v296 + 109752);
    *(_QWORD *)&v421 = *(_QWORD *)(v296 + 109776);
    DWORD2(v417) = *(_DWORD *)(v296 + 109800);
    *(_QWORD *)&v416 = *(_QWORD *)(v296 + 109824);
    DWORD2(v418) = *(_DWORD *)(v296 + 109848);
  }
  if ((v295 & 1) == 0)
  {
    HIDWORD(v419) = *(_DWORD *)(v19 + v34 + 109756);
    *((_QWORD *)&v421 + 1) = *(_QWORD *)(v19 + v34 + 109784);
    HIDWORD(v417) = *(_DWORD *)(v19 + v34 + 109804);
    *((_QWORD *)&v416 + 1) = *(_QWORD *)(v19 + v34 + 109832);
    HIDWORD(v418) = *(_DWORD *)(v19 + v34 + 109852);
  }
LABEL_59:
  v47 = *(_QWORD *)v368;
  *a12 = 0x7FFFFFFFFFFFFFFFLL;
  v401 = 50462976;
  if ((a6 & 2) != 0 && *(_DWORD *)(*(_QWORD *)(v384 + 24448) + 48) == 1)
  {
    v48 = *(unsigned __int8 *)(*((_QWORD *)&v366 + 1) + 152) != 2;
    if ((a6 & 1) == 0)
      goto LABEL_67;
  }
  else
  {
    v48 = 0;
    if ((a6 & 1) == 0)
      goto LABEL_67;
  }
  v49 = block_size_high_5[v390];
  if (v333 < v49)
    v49 = v333;
  if (v49 < 8)
  {
LABEL_67:
    LODWORD(v50) = 0;
    *(_QWORD *)&v378 = v19 + 146576;
    if (!v48)
      goto LABEL_74;
    goto LABEL_70;
  }
  LOBYTE(v401) = 0;
  LODWORD(v50) = 1;
  *(_QWORD *)&v378 = v19 + 146576;
  if (!v48)
    goto LABEL_74;
LABEL_70:
  v51 = block_size_high_5[v390];
  if (v333 < v51)
    v51 = v333;
  if (v51 >= 8)
  {
    v52 = v50;
    LODWORD(v50) = v50 + 1;
    *(_BYTE *)((unint64_t)&v401 | v52) = 1;
  }
LABEL_74:
  if (!a7)
    goto LABEL_92;
  if (*(_DWORD *)(*((_QWORD *)&v366 + 1) + 136) >= *(_DWORD *)v378)
  {
    v53 = 1;
    if ((a6 & 4) == 0)
      goto LABEL_86;
LABEL_79:
    v54 = block_size_high_5[v390];
    if (v333 < v54)
      v54 = v333;
    if (v54 >= 8)
    {
      if ((int)av1_wedge_params_lookup[8 * v390] < 1)
        v53 = 1;
      if (!v53)
      {
        v55 = v50;
        LODWORD(v50) = v50 + 1;
        *(_BYTE *)((unint64_t)&v401 | v55) = 2;
      }
    }
    goto LABEL_86;
  }
  v53 = *(_BYTE *)(v20 + 265500) == 0;
  if ((a6 & 4) != 0)
    goto LABEL_79;
LABEL_86:
  if ((a6 & 8) != 0)
  {
    v56 = block_size_high_5[v390];
    if (v333 < v56)
      v56 = v333;
    if (*(_BYTE *)(v20 + 265499) && v56 >= 8)
    {
      *((_BYTE *)&v401 + v50) = 3;
      LODWORD(v50) = v50 + 1;
    }
  }
LABEL_92:
  v57 = *(_QWORD *)(v19 + 8296);
  v58 = *(_QWORD *)(v19 + 8304);
  if (v58)
  {
    if (*(char *)(v58 + 17) < 1)
    {
      if (*(_BYTE *)(v58 + 16) == 7)
        v59 = 3;
      else
        v59 = 0;
      if (v57)
        goto LABEL_95;
    }
    else
    {
      v59 = HIBYTE(*(unsigned __int16 *)(v58 + 167)) & 1;
      if (v57)
        goto LABEL_95;
    }
LABEL_98:
    v60 = 0;
    goto LABEL_107;
  }
  v59 = 0;
  if (!v57)
    goto LABEL_98;
LABEL_95:
  if (*(char *)(v57 + 17) < 1)
  {
    if (*(_BYTE *)(v57 + 16) == 7)
      v60 = 3;
    else
      v60 = 0;
  }
  else
  {
    v60 = HIBYTE(*(unsigned __int16 *)(v57 + 167)) & 1;
  }
LABEL_107:
  v61 = v60 + v59;
  if (v61 >= 5)
    v61 = 5;
  v62 = v23[16];
  if ((v62 - 1) > 7 || (v63 = *(int *)(v20 + 4 * (v62 - 1) + 239280), (_DWORD)v63 == -1))
  {
    v64 = 0;
    v65 = v23[17];
    if ((v65 - 1) > 7)
      goto LABEL_120;
  }
  else
  {
    v64 = *(_QWORD *)(v20 + 8 * v63 + 239456);
    v65 = v23[17];
    if ((v65 - 1) > 7)
      goto LABEL_120;
  }
  v66 = *(int *)(v20 + 4 * (v65 - 1) + 239280);
  if ((_DWORD)v66 != -1)
  {
    v67 = *(_QWORD *)(v20 + 8 * v66 + 239456);
    if (v64)
      goto LABEL_121;
LABEL_116:
    v68 = 0;
    if (v67)
      goto LABEL_122;
LABEL_117:
    v69 = 0;
    v70 = v384;
    v71 = *(_QWORD *)(v384 + 24448);
    if (*(_DWORD *)(v71 + 40))
      goto LABEL_123;
LABEL_118:
    v72 = 0;
    v73 = 0;
    if (!v58)
      goto LABEL_126;
    goto LABEL_124;
  }
LABEL_120:
  v67 = 0;
  if (!v64)
    goto LABEL_116;
LABEL_121:
  v68 = *(_DWORD *)(v64 + 4);
  if (!v67)
    goto LABEL_117;
LABEL_122:
  v69 = *(_DWORD *)(v67 + 4);
  v70 = v384;
  v71 = *(_QWORD *)(v384 + 24448);
  if (!*(_DWORD *)(v71 + 40))
    goto LABEL_118;
LABEL_123:
  v74 = *(_DWORD *)(*(_QWORD *)v70 + 4);
  v75 = 1 << *(_DWORD *)(v71 + 44);
  v72 = ((v75 - 1) & (v69 - v74)) - (v75 & (v69 - v74));
  v73 = ((v75 - 1) & (v74 - v68)) - (v75 & (v74 - v68));
  if (!v58)
    goto LABEL_126;
LABEL_124:
  if (*(char *)(v58 + 17) < 1)
  {
    v58 = *(unsigned __int8 *)(v58 + 16) == 7;
    if (!v57)
      goto LABEL_132;
    goto LABEL_127;
  }
  v58 = ((unint64_t)*(unsigned __int16 *)(v58 + 167) >> 9) & 1;
LABEL_126:
  if (!v57)
    goto LABEL_132;
LABEL_127:
  if (*(char *)(v57 + 17) < 1)
    v57 = *(unsigned __int8 *)(v57 + 16) == 7;
  else
    v57 = ((unint64_t)*(unsigned __int16 *)(v57 + 167) >> 9) & 1;
LABEL_132:
  v400 = (_DWORD *)(v19 + 16904);
  if (v72 < 0)
    v72 = -v72;
  if (v73 < 0)
    v73 = -v73;
  v36 = v72 == v73;
  v76 = 3;
  if (!v36)
    v76 = 0;
  v77 = v58 + v57 + v76;
  if (a7)
    v32.i64[0] = *(_QWORD *)(v19 + 8 * v61 + 35288);
  else
    v32 = 0uLL;
  v78.i64[0] = *(_QWORD *)(v19 + 16944 + 8 * v77 + 18296);
  v78.i64[1] = *(_QWORD *)(v19 + 16944 + 8 * v390 + 16440);
  v79.i64[0] = vrev64q_s32(v78).u64[0];
  v79.i64[1] = v78.i64[1];
  v80 = vaddq_s32(v79, vzip1q_s32(v32, v32));
  v422 = v80;
  DWORD1(v374) = *(_DWORD *)(v19 + 416);
  LODWORD(v374) = *(_DWORD *)(v19 + 420);
  if ((v39 & 1) != 0 && *(_DWORD *)(*((_QWORD *)&v366 + 1) + 180))
  {
    v81 = *(unsigned __int8 *)(v19 + 160 * (int)v35 + 109899);
    v82 = *((_DWORD *)&v419 + v81);
    if (v82 == 0x7FFFFFFF)
      return 0;
    v23[83] = v81;
    *(_WORD *)(v23 + 167) = ((v81 > 1) << 8) | (((_DWORD)v81 != 1) << 9) | *(_WORD *)(v23 + 167) & 0xFCFF;
    *(_OWORD *)(v23 + 72) = *(_OWORD *)(v19 + 160 * (int)v35 + 109888);
    result = *((unsigned int *)&v418 + v81);
    *a12 = ((*(int *)(v19 + 16920) * (uint64_t)((int)result + v82 + *a11) + 256) >> 9) + (*((_QWORD *)&v420 + v81) << 7);
    *((_DWORD *)v23 + 2) = *(_DWORD *)v368;
    *((_DWORD *)v23 + 3) = *(_DWORD *)(v368 + 4);
    return result;
  }
  v84 = a13;
  if ((_BYTE)v401)
  {
    v85 = *(_DWORD *)(a9 + 24);
    *(_QWORD *)(v19 + 448) = *(_QWORD *)a9;
    *(_DWORD *)(v19 + 472) = v85;
  }
  *(_QWORD *)&v386 = a13;
  if (!(_DWORD)v50)
  {
    v278 = 0;
    v277 = 0;
    result = 0;
    v279 = 512;
    goto LABEL_465;
  }
  v86 = 0;
  LODWORD(v339) = 0;
  v331 = 0;
  v392 = a15;
  *(_QWORD *)&v380 = a14;
  *((_QWORD *)&v372 + 1) = v20 + 239040;
  *((_QWORD *)&v374 + 1) = v19 + 416;
  v311 = a16;
  v317 = a17;
  v87 = &a3[(char)v321 + 1326];
  v307 = &v413[12];
  v309 = &v413[8];
  v305 = &v413[4];
  *((_QWORD *)&v382 + 1) = v20 + 389072;
  v315 = &av1_wedge_params_lookup[8 * v390];
  v323 = (uint64_t)(v23 + 72);
  v50 = v50;
  DWORD1(v366) = v24 - 19;
  v364 = (char *)&v408 + 4;
  v356 = (0x1280000uLL >> v24) & 1;
  v358 = (unint64_t)&v408 & 0xFFFFFFFFFFFFFFFBLL | (4 * v356);
  *((_QWORD *)&v376 + 1) = &av1_ss_size_lookup[4 * v390];
  HIDWORD(v319) = 1;
  v337 = 0x7FFFFFFFFFFFFFFFLL;
  v347 = a12;
  DWORD1(v372) = v18;
  *((_QWORD *)&v380 + 1) = v20;
  *((_QWORD *)&v370 + 1) = a11;
  HIDWORD(v345) = v39;
  v313 = a9;
  v341 = v50;
  v343 = (uint64_t)v87;
  while (2)
  {
    v91 = *((unsigned __int8 *)&v401 + v86);
    if (*v87)
      v92 = 0;
    else
      v92 = (_DWORD)v91 == 2;
    if (v92)
      goto LABEL_152;
    v349 = v86;
    v89 = *v22;
    v93 = v380;
    if ((uint64_t)v380 >= *v21)
      v93 = *v21;
    v23[83] = v91;
    *(_WORD *)(v23 + 167) = ((v91 > 1) << 8) | (((_DWORD)v91 != 1) << 9) | *(_WORD *)(v23 + 167) & 0xFCFF;
    LODWORD(v88) = v422.i32[v91];
    v94 = *v84;
    v95 = (int)v400[4];
    v96 = ((int)v95 * (uint64_t)(*v84 + (int)v88) + 256) >> 9;
    *(_QWORD *)&v380 = v93;
    if (v96 >= v93)
      goto LABEL_151;
    v97 = *(_DWORD *)(*((_QWORD *)&v366 + 1) + 188);
    *((_QWORD *)&v386 + 1) = v422.u32[v91];
    if (v97 == 3)
    {
      if (v91 >= 2)
      {
        if ((_DWORD)v91 != 2)
          goto LABEL_310;
        goto LABEL_188;
      }
      goto LABEL_173;
    }
    if (v97)
      v98 = 0;
    else
      v98 = (_DWORD)v91 == 3;
    v99 = v98;
    if (v91 < 2)
    {
      if (v97 != 2 || (_DWORD)v24 == 24)
      {
        if (v24 <= 0x18 && ((1 << v24) & 0x1390000) != 0 || (_DWORD)v24 == 22)
        {
          v414 = 0;
          v412 = 0u;
          memset(v413, 0, sizeof(v413));
          v410 = 0u;
          v411 = 0u;
          v408 = 0u;
          v409 = 0u;
          v171 = *((_QWORD *)&v372 + 1);
          av1_dist_wtd_comp_weight_assign(*((uint64_t *)&v372 + 1), (uint64_t)v23, v309, v307, v305, 1);
          memset(*(void **)(v19 + 11184), 4 * v413[8], 0x8000uLL);
          HIDWORD(v394) = av1_interinter_compound_motion_search(v20, v19, (_QWORD *)v368, v18, v24);
        }
        else
        {
          HIDWORD(v394) = *v22;
          v171 = *((_QWORD *)&v372 + 1);
        }
        v172 = v171;
        v173 = *((_QWORD *)&v374 + 1);
        av1_enc_build_inter_predictor(v172, *((uint64_t *)&v374 + 1), DWORD1(v374), v374, v376, v18, 0, 0, v299, v301, v303, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
          v321,
          v323,
          (uint64_t)v325,
          v327,
          v329,
          v331,
          v333,
          (uint64_t)v335,
          v337,
          v339,
          v341,
          v343,
          v345,
          (uint64_t)v347,
          v349,
          v351,
          v353,
          v356,
          v358,
          v360,
          v362,
          (uint64_t)v364,
          v366,
          v368,
          v370,
          v372,
          v374,
          v376,
          v378,
          v380,
          v382,
          v384,
          v386,
          v388,
          v390,
          *(int32x2_t *)v80.i8,
          v392,
          (uint16x8_t)v78,
          v394);
        if (!(_DWORD)v91)
          *v311 = 1;
        if (prune_mode_by_skip_rd(v20, v19, v173, v18, v392, *v22 + DWORD2(v386)))
        {
          *(_QWORD *)&v410 = 0;
          v174 = block_size_wide_13[v390];
          v175 = block_size_high_12[v390];
          v408 = 0u;
          v409 = 0u;
          aom_subtract_block_neon(v175, v174, *(uint16x8_t **)v19, v174, *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
          if (av1_estimate_txfm_yrd(v20, v19, (int *)&v408, 0x7FFFFFFFFFFFFFFFLL, v18, max_txsize_rect_lookup_1[v390]) == 0x7FFFFFFFFFFFFFFFLL)
          {
            v176 = v408;
            v84 = (int *)v386;
            LODWORD(v88) = DWORD2(v386);
            v89 = HIDWORD(v394);
          }
          else
          {
            v205 = *(_QWORD *)(v19 + 8304);
            LODWORD(v88) = DWORD2(v386);
            v89 = HIDWORD(v394);
            if (v205)
              v205 = *(unsigned __int8 *)(v205 + 144);
            v84 = (int *)v386;
            v206 = *(_QWORD *)(v19 + 8296);
            if (v206)
              v206 = *(unsigned __int8 *)(v206 + 144);
            v207 = v206 + v205;
            if ((_BYTE)v410)
              v176 = *(_DWORD *)(v19 + 8 * v207 + 35972);
            else
              v176 = v408 + *(_DWORD *)(v19 + 8 * v207 + 35968);
          }
          *(_QWORD *)&v388 = (((int)v400[4] * (uint64_t)(int)(v89 + v88 + v176) + 256) >> 9)
                           + (*((_QWORD *)&v408 + 1) << 7);
          v90 = 0x7FFFFFFFFFFFFFFFLL;
          if (!(_DWORD)v91)
          {
LABEL_390:
            v241 = *(_DWORD *)(v313 + 24);
            *(_QWORD *)(v19 + 448) = *(_QWORD *)v313;
            *(_DWORD *)(v19 + 472) = v241;
            v170 = v388;
            if ((uint64_t)v388 < *v21)
              goto LABEL_446;
            goto LABEL_149;
          }
        }
        else
        {
          v90 = 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
          v84 = (int *)v386;
          LODWORD(v88) = DWORD2(v386);
          v89 = HIDWORD(v394);
          if (!(_DWORD)v91)
            goto LABEL_390;
        }
LABEL_278:
        v170 = v388;
        if ((uint64_t)v388 < *v21)
          goto LABEL_446;
        goto LABEL_149;
      }
LABEL_173:
      LODWORD(v403) = 0;
      LOBYTE(v407) = 0;
      v405 = 0;
      v404 = 0;
      v100 = *((_DWORD *)&v419 + v91);
      if (v100 != 0x7FFFFFFF)
      {
        v169 = *v22 + (uint64_t)(int)v88;
        *(_QWORD *)&v388 = (((int)v95 * (uint64_t)((int)v169 + v100) + 256) >> 9) + (*((_QWORD *)&v420 + v91) << 7);
        v90 = (((*((int *)&v417 + v91) + v169) * v95 + 256) >> 9) + (*((_QWORD *)&v415 + v91) << 7);
        if (!(_DWORD)v91)
          goto LABEL_390;
        goto LABEL_278;
      }
      HIDWORD(v394) = v89;
      v101 = v20;
      v102 = *((_QWORD *)&v374 + 1);
      av1_enc_build_inter_predictor(*((uint64_t *)&v372 + 1), *((uint64_t *)&v374 + 1), DWORD1(v374), v374, v376, v18, 0, 0, v299, v301, v303, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
        v321,
        v323,
        (uint64_t)v325,
        v327,
        v329,
        v331,
        v333,
        (uint64_t)v335,
        v337,
        v339,
        v341,
        v343,
        v345,
        (uint64_t)v347,
        v86,
        v351,
        v353,
        v356,
        v358,
        v360,
        v362,
        (uint64_t)v364,
        v366,
        v368,
        v370,
        v372,
        v374,
        v376,
        v378,
        v380,
        v382,
        v384,
        v386,
        v388,
        v390,
        *(int32x2_t *)v80.i8,
        v392,
        (uint16x8_t)v78,
        v394);
      if (!(_DWORD)v91)
        *v311 = 1;
      *(_QWORD *)&v410 = 0;
      v408 = 0u;
      v409 = 0u;
      v103 = *v347;
      if (prune_mode_by_skip_rd(v101, v19, v102, v18, v392, *v22 + DWORD2(v386)))
      {
        v104 = v317;
        if (v103 < v317)
          v104 = v103;
        v90 = 0x7FFFFFFFFFFFFFFFLL;
        v105 = v104 - v96;
        if (v105 >= 0)
        {
          aom_subtract_block_neon(block_size_high_12[v390], block_size_wide_13[v390], *(uint16x8_t **)v19, block_size_wide_13[v390], *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
          v20 = v101;
          v106 = av1_estimate_txfm_yrd(v101, v19, (int *)&v408, v105, v18, max_txsize_rect_lookup_1[v390]);
          *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
          LODWORD(v88) = DWORD2(v386);
          v21 = v347;
          if (v106 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v107 = *(_QWORD *)(v19 + 8304);
            if (v107)
              v107 = *(unsigned __int8 *)(v107 + 144);
            v108 = *(_QWORD *)(v19 + 8296);
            if (v108)
              v108 = *(unsigned __int8 *)(v108 + 144);
            v109 = v108 + v107;
            if ((_BYTE)v410)
              v110 = *(_DWORD *)(v19 + 8 * v109 + 35972);
            else
              v110 = v408 + *(_DWORD *)(v19 + 8 * v109 + 35968);
            LODWORD(v408) = v110;
            *(_QWORD *)&v388 = (((int)v400[4] * (uint64_t)(v110 + *v22 + DWORD2(v386)) + 256) >> 9)
                             + (*((_QWORD *)&v408 + 1) << 7);
            model_rd_for_sb_with_curvfit(v18, v19, *((uint64_t *)&v374 + 1), (int *)&v403, &v405, (BOOL *)&v407, &v404);
            LODWORD(v88) = DWORD2(v386);
            v237 = v403;
            v238 = v405;
            v90 = (((int)v400[4] * (uint64_t)(*v22 + (int)v403 + DWORD2(v386)) + 256) >> 9) + (v405 << 7);
            v239 = 4 * v91;
            *(_DWORD *)((char *)&v419 + v239) = v408;
            v240 = 8 * v91;
            *(_QWORD *)((char *)&v420 + v240) = *((_QWORD *)&v408 + 1);
            *(_DWORD *)((char *)&v417 + v239) = v237;
            *(_QWORD *)((char *)&v415 + v240) = v238;
            *(_DWORD *)((char *)&v418 + v239) = DWORD2(v386);
            v84 = (int *)v386;
            v89 = HIDWORD(v394);
            if (!(_DWORD)v91)
              goto LABEL_390;
            goto LABEL_278;
          }
LABEL_328:
          v84 = (int *)v386;
          v89 = HIDWORD(v394);
          if (!(_DWORD)v91)
            goto LABEL_390;
          goto LABEL_278;
        }
      }
      else
      {
        v90 = 0x7FFFFFFFFFFFFFFFLL;
      }
      *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(v88) = DWORD2(v386);
      v20 = v101;
      v21 = v347;
      goto LABEL_328;
    }
    if ((_DWORD)v91 != 2)
    {
      if (!v99)
      {
LABEL_310:
        v194 = *v21;
        if (*v21 == 0x7FFFFFFFFFFFFFFFLL
          || v194
           / comp_type_rd_threshold_div[*(int *)(*((_QWORD *)&v366 + 1) + 84)]
           * comp_type_rd_threshold_mul[*(int *)(*((_QWORD *)&v366 + 1) + 84)] < v93)
        {
          HIDWORD(v394) = v89;
          if (v194 >= v317)
            v194 = v317;
          *((_QWORD *)&v388 + 1) = v194;
          v195 = *v22;
          v197 = *(uint16x8_t **)(v329 + 16);
          v196 = *(uint16x8_t **)(v329 + 24);
          *((_QWORD *)&v384 + 1) = **(_QWORD **)(v19 + 8280);
          v198 = *(unsigned __int8 *)(*((_QWORD *)&v384 + 1) + 83);
          *(_QWORD *)&v394 = v196;
          if (HIDWORD(v319))
          {
            LODWORD(v388) = block_size_high_5[v390];
            *(_QWORD *)&v382 = *(unsigned __int8 *)(*((_QWORD *)&v384 + 1) + 83);
            av1_build_inter_predictors_for_planes_single_buf(*((_DWORD **)&v374 + 1), SDWORD1(v372), 0, 0, 0, (uint64_t)&v424, (uint64_t)&v402);
            av1_build_inter_predictors_for_planes_single_buf(*((_DWORD **)&v374 + 1), SDWORD1(v372), 0, 0, 1, (uint64_t)&v423, (uint64_t)&v402);
            aom_subtract_block_neon(v388, v333, v197, v333, *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), v423, v333);
            aom_subtract_block_neon(v388, v333, v196, v333, v423, v333, v424, v333);
          }
          v406 = 0;
          v404 = 0;
          v200 = v423;
          v199 = v424;
          if ((_DWORD)v198 == 2)
          {
            LODWORD(v408) = 0;
            v20 = *((_QWORD *)&v380 + 1);
            (*(void (**)(uint8x8_t *, _QWORD, uint8x8_t *, _QWORD, __int128 *))(**((_QWORD **)&v380 + 1)
                                                                                         + (v390 << 7)
                                                                                         + 51408))(v424, v402, v423, v402, &v408);
            v201 = (v408 + (1 << num_pels_log2_lookup_4[v390] >> 1)) >> num_pels_log2_lookup_4[v390];
            if (v201 < 8
              || (v24 > 0x18 || ((1 << v24) & 0x1390000) == 0) && (_DWORD)v24 != 22 && v201 <= 0x3F)
            {
              v90 = 0x7FFFFFFFFFFFFFFFLL;
              *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
              v84 = (int *)v386;
              LODWORD(v88) = DWORD2(v386);
              v89 = HIDWORD(v394);
              goto LABEL_410;
            }
            v200 = v423;
            v199 = v424;
          }
          else
          {
            v20 = *((_QWORD *)&v380 + 1);
          }
          v403 = -1;
          v208 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint8x8_t *, uint8x8_t *, uint16x8_t *, uint16x8_t *, uint64_t *))off_24C0DE140[v198 - 2])(v20, v19, DWORD1(v372), v199, v200, v197, v196, &v403);
          if (*(_BYTE *)(*((_QWORD *)&v384 + 1) + 83) == 2)
          {
            v209 = **((_BYTE **)&v384 + 1);
            v210 = DWORD2(v386);
            v89 = HIDWORD(v394);
            if ((int)av1_wedge_params_lookup[8 * v209] < 1)
              v211 = 0;
            else
              v211 = *(_DWORD *)(v19 + (v209 << 6) + 4 * *(char *)(*((_QWORD *)&v384 + 1) + 80) + 33560) + 512;
            v84 = (int *)v386;
          }
          else
          {
            v211 = 512;
            v84 = (int *)v386;
            v210 = DWORD2(v386);
            v89 = HIDWORD(v394);
          }
          v231 = v24;
          v88 = (v211 + v210);
          v232 = (int)v400[4];
          if (*((uint64_t *)&v388 + 1) < ((int)v232 * (uint64_t)((int)v88 + v94) + 256) >> 9)
          {
            v90 = 0x7FFFFFFFFFFFFFFFLL;
            *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_409:
            v24 = v231;
            v20 = *((_QWORD *)&v380 + 1);
LABEL_410:
            HIDWORD(v319) = 0;
            v21 = v347;
            v18 = DWORD1(v372);
            v170 = v388;
            if ((uint64_t)v388 < *v347)
              goto LABEL_446;
            goto LABEL_149;
          }
          v233 = v88 + v195;
          v234 = ((int)v232 * (uint64_t)((int)v88 + v195) + 256) >> 9;
          v235 = *(int *)(*((_QWORD *)&v382 + 1) + 8 * (*(_BYTE *)(*(_QWORD *)(v384 + 24448) + 63) != 0));
          if ((_DWORD)v235)
          {
            if ((*(_DWORD *)v378 << (num_pels_log2_lookup_4[v390] + 7)) < v392
              && *v400 >= dword_208F566D4[v235])
            {
              v236 = 4 * dword_208F566BC[v235];
              v90 = 0x7FFFFFFFFFFFFFFFLL;
              if (v392 == 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_396;
            }
            else
            {
              v236 = 4;
              v90 = 0x7FFFFFFFFFFFFFFFLL;
              if (v392 == 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_396;
            }
            *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v236 * v392 * dword_208F566EC[v235]) >> 6 < v234 + (v403 << 11))
              goto LABEL_409;
          }
LABEL_396:
          v242 = *((_DWORD *)&v419 + v198);
          if (v242 != 0x7FFFFFFF)
          {
            *(_QWORD *)&v388 = (*((_QWORD *)&v420 + v198) << 7) + (((int)v232 * (uint64_t)(v242 + v233) + 256) >> 9);
            v90 = (((*((int *)&v417 + v198) + (uint64_t)v233) * v232 + 256) >> 9) + (*((_QWORD *)&v415 + v198) << 7);
            v89 = v195;
            goto LABEL_409;
          }
          v398 = v208;
          *((_QWORD *)&v386 + 1) = v88;
          v303 = v19;
          DWORD2(v378) = v195;
          if (v231 <= 0x18
            && ((1 << v231) & 0x1790000) != 0
            && (_DWORD)v198 == 2
            && !*(_DWORD *)(*((_QWORD *)&v366 + 1) + 148))
          {
            v244 = DWORD1(v372);
            *(_QWORD *)&v382 = v198;
            v259 = av1_interinter_compound_motion_search(*((uint64_t *)&v380 + 1), v19, (_QWORD *)v368, DWORD1(v372), v231);
            v243 = *((_QWORD *)&v374 + 1);
            av1_enc_build_inter_predictor(*((uint64_t *)&v372 + 1), *((uint64_t *)&v374 + 1), *(unsigned int *)(v19 + 416), *(unsigned int *)(v19 + 420), v376, DWORD1(v372), 0, 0, v299, v301, v19, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
              v321,
              v323,
              (uint64_t)v325,
              v327,
              v329,
              v331,
              v333,
              (uint64_t)v335,
              v337,
              v339,
              v341,
              v343,
              v345,
              (uint64_t)v347,
              v349,
              v351,
              v353,
              v356,
              v358,
              v360,
              v362,
              (uint64_t)v364,
              v366,
              v368,
              v370,
              v372,
              v374,
              v376,
              v378,
              v380,
              v382,
              v384,
              v386,
              v388,
              v390,
              v260,
              v392,
              v261,
              v394);
            v245 = 0;
            v195 = v259;
            v233 = v259 + DWORD2(v386);
            v198 = v382;
          }
          else
          {
            v243 = *((_QWORD *)&v374 + 1);
            v244 = DWORD1(v372);
            av1_build_wedge_inter_predictor_from_buf(*((int8x8_t **)&v374 + 1), SDWORD1(v372), 0, 0, (uint64_t)&v424, (uint64_t)&v402, (uint64_t)&v423, (uint64_t)&v402);
            v245 = 1;
          }
          v407 = 0;
          v405 = 0;
          model_rd_for_sb_with_curvfit(v244, v303, v243, &v407, &v405, &v406, &v404);
          v246 = v407;
          v247 = ((int)v400[4] * (uint64_t)(v407 + v233) + 256) >> 9;
          v248 = v405;
          v90 = v247 + (v405 << 7);
          if ((v245 & 1) != 0)
          {
            v89 = v195;
            v19 = v303;
            v84 = (int *)v386;
            if (!*(_DWORD *)(*((_QWORD *)&v366 + 1) + 80))
              goto LABEL_416;
          }
          else
          {
            v249 = v234 + v398;
            v89 = v195;
            if (v90 >= v249)
            {
              *(_QWORD *)(*((_QWORD *)&v384 + 1) + 8) = *(_QWORD *)v368;
              av1_build_wedge_inter_predictor_from_buf(*((int8x8_t **)&v374 + 1), SDWORD1(v372), 0, 0, (uint64_t)&v424, (uint64_t)&v402, (uint64_t)&v423, (uint64_t)&v402);
              v89 = DWORD2(v378);
              v90 = v249;
            }
            v19 = v303;
            v84 = (int *)v386;
            if (!*(_DWORD *)(*((_QWORD *)&v366 + 1) + 80))
              goto LABEL_416;
          }
          if (v90 > v337)
          {
            v90 = 0x7FFFFFFFFFFFFFFFLL;
            *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
            v22 = (int *)*((_QWORD *)&v370 + 1);
            LODWORD(v88) = DWORD2(v386);
            goto LABEL_409;
          }
LABEL_416:
          v399 = v246;
          *(_QWORD *)&v410 = 0;
          v80.i64[0] = 0;
          v408 = 0u;
          v409 = 0u;
          LODWORD(v88) = DWORD2(v386);
          v250 = v89 + DWORD2(v386);
          v251 = *((_QWORD *)&v388 + 1) - (((int)v400[4] * (uint64_t)(int)(v89 + DWORD2(v386)) + 256) >> 9);
          *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
          if (v251 < 0)
          {
            v22 = (int *)*((_QWORD *)&v370 + 1);
          }
          else
          {
            *(_QWORD *)&v382 = v198;
            v252 = v89;
            av1_subtract_plane(v19, SDWORD1(v372), 0);
            v253 = av1_estimate_txfm_yrd(*((uint64_t *)&v380 + 1), v19, (int *)&v408, v251, DWORD1(v372), max_txsize_rect_lookup_1[v390]);
            v89 = v252;
            v84 = (int *)v386;
            LODWORD(v88) = DWORD2(v386);
            v22 = (int *)*((_QWORD *)&v370 + 1);
            if (v253 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v254 = *(_QWORD *)(v19 + 8304);
              if (v254)
                v254 = *(unsigned __int8 *)(v254 + 144);
              v255 = *(_QWORD *)(v19 + 8296);
              if (v255)
                v255 = *(unsigned __int8 *)(v255 + 144);
              v256 = v255 + v254;
              if ((_BYTE)v410)
                v257 = *(_DWORD *)(v19 + 8 * v256 + 35972);
              else
                v257 = v408 + *(_DWORD *)(v19 + 8 * v256 + 35968);
              v274 = *((_QWORD *)&v408 + 1);
              *(_QWORD *)&v388 = (((int)v400[4] * (uint64_t)(int)(v257 + v250) + 256) >> 9)
                               + (*((_QWORD *)&v408 + 1) << 7);
              v275 = 4 * v198;
              *(_DWORD *)((char *)&v419 + v275) = v257;
              v276 = 8 * v198;
              *(_QWORD *)((char *)&v420 + v276) = v274;
              *(_DWORD *)((char *)&v417 + v275) = v399;
              *(_QWORD *)((char *)&v415 + v276) = v248;
              *(_DWORD *)((char *)&v418 + v275) = DWORD2(v386);
            }
          }
          goto LABEL_409;
        }
LABEL_149:
        LODWORD(v88) = v339;
        v89 = HIDWORD(v339);
        v90 = v337;
        goto LABEL_150;
      }
      v180 = v20;
      v181 = v335[1325];
      v182 = v88 + 512;
      if (v181 != -1)
      {
        HIDWORD(v394) = v89;
        v183 = v21;
        v23[82] = v181;
        if ((_BYTE)v181)
          v184 = 26;
        else
          v184 = 38;
        memset(*(void **)(v19 + 11184), v184, 0x8000uLL);
        if (v24 > 0x18)
        {
          v187 = v180;
        }
        else
        {
          v187 = v180;
          if (((1 << v24) & 0x1790000) != 0)
            HIDWORD(v394) = av1_interinter_compound_motion_search(v180, v19, (_QWORD *)v368, v18, v24);
        }
        v396 = v23[82];
        v17 = *((_QWORD *)v23 + 1);
        v188 = *((_QWORD *)&v374 + 1);
        av1_enc_build_inter_predictor(*((uint64_t *)&v372 + 1), *((uint64_t *)&v374 + 1), DWORD1(v374), v374, v376, v18, 0, 0, v299, v301, v303, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
          v321,
          v323,
          (uint64_t)v325,
          v327,
          v329,
          v331,
          v333,
          (uint64_t)v335,
          v337,
          v339,
          v341,
          v343,
          v345,
          (uint64_t)v347,
          v349,
          v351,
          v353,
          v356,
          v358,
          v360,
          v362,
          (uint64_t)v364,
          v366,
          v368,
          v370,
          v372,
          v374,
          v376,
          v378,
          v380,
          v382,
          v384,
          v386,
          v388,
          v390,
          v185,
          v392,
          v186,
          v394);
        *(_QWORD *)&v410 = 0;
        v408 = 0u;
        v409 = 0u;
        v189 = prune_mode_by_skip_rd(v187, v19, v188, v18, v392, *v22 + v182);
        *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v380 & 0x8000000000000000) != 0)
        {
          v21 = v183;
        }
        else
        {
          v21 = v183;
          if (v189)
          {
            aom_subtract_block_neon(block_size_high_12[v390], block_size_wide_13[v390], *(uint16x8_t **)v19, block_size_wide_13[v390], *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
            *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
            if (av1_estimate_txfm_yrd(v180, v19, (int *)&v408, v380, v18, max_txsize_rect_lookup_1[v390]) != 0x7FFFFFFFFFFFFFFFLL)
            {
              v190 = *(_QWORD *)(v19 + 8304);
              if (v190)
                v190 = *(unsigned __int8 *)(v190 + 144);
              v191 = *(_QWORD *)(v19 + 8296);
              if (v191)
                v191 = *(unsigned __int8 *)(v191 + 144);
              v192 = v191 + v190;
              if ((_BYTE)v410)
                v193 = *(_DWORD *)(v19 + 8 * v192 + 35972);
              else
                v193 = v408 + *(_DWORD *)(v19 + 8 * v192 + 35968);
              *(_QWORD *)&v388 = (((int)v400[4] * (uint64_t)(HIDWORD(v394) + v182 + v193) + 256) >> 9)
                               + (*((_QWORD *)&v408 + 1) << 7);
            }
          }
        }
        v84 = (int *)v386;
        LODWORD(v88) = v182;
        v20 = v180;
        v89 = HIDWORD(v394);
        LOBYTE(v258) = v396;
        goto LABEL_445;
      }
      v220 = *v22;
      v23[82] = 0;
      if (v24 > 0x18)
      {
        v221 = *((_QWORD *)&v380 + 1);
        v222 = v390;
      }
      else
      {
        v221 = *((_QWORD *)&v380 + 1);
        v222 = v390;
        if (((1 << v24) & 0x1790000) != 0)
        {
          memset(*(void **)(v19 + 11184), 38, 0x8000uLL);
          v220 = av1_interinter_compound_motion_search(*((uint64_t *)&v380 + 1), v19, (_QWORD *)v368, v18, v24);
        }
      }
      v223 = *((_QWORD *)&v374 + 1);
      av1_enc_build_inter_predictor(*((uint64_t *)&v372 + 1), *((uint64_t *)&v374 + 1), DWORD1(v374), v374, v376, v18, 0, 0, v299, v301, v303, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
        v321,
        v323,
        (uint64_t)v325,
        v327,
        v329,
        v331,
        v333,
        (uint64_t)v335,
        v337,
        v339,
        v341,
        v343,
        v345,
        (uint64_t)v347,
        v349,
        v351,
        v353,
        v356,
        v358,
        v360,
        v362,
        (uint64_t)v364,
        v366,
        v368,
        v370,
        v372,
        v374,
        v376,
        v378,
        v380,
        v382,
        v384,
        v386,
        v388,
        v390,
        *(int32x2_t *)v80.i8,
        v392,
        (uint16x8_t)v78,
        v394);
      *(_QWORD *)&v410 = 0;
      v408 = 0u;
      v409 = 0u;
      v224 = prune_mode_by_skip_rd(v221, v19, v223, v18, v393, *v22 + v182);
      *(_QWORD *)&v389 = 0x7FFFFFFFFFFFFFFFLL;
      if ((v381 & 0x8000000000000000) != 0 || !v224)
      {
        v397 = 0;
      }
      else
      {
        aom_subtract_block_neon(block_size_high_12[v222], block_size_wide_13[v222], *(uint16x8_t **)v19, block_size_wide_13[v222], *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
        *(_QWORD *)&v389 = 0x7FFFFFFFFFFFFFFFLL;
        if (av1_estimate_txfm_yrd(*((uint64_t *)&v381 + 1), v19, (int *)&v408, v381, v18, max_txsize_rect_lookup_1[v222]) == 0x7FFFFFFFFFFFFFFFLL)goto LABEL_432;
        v227 = *(_QWORD *)(v19 + 8304);
        if (v227)
          v227 = *(unsigned __int8 *)(v227 + 144);
        v228 = *(_QWORD *)(v19 + 8296);
        if (v228)
          v228 = *(unsigned __int8 *)(v228 + 144);
        v229 = v228 + v227;
        v230 = (_BYTE)v410 ? *(_DWORD *)(v19 + 8 * v229 + 35972) : v408 + *(_DWORD *)(v19 + 8 * v229 + 35968);
        v262 = (((int)v400[4] * (uint64_t)(v220 + v182 + v230) + 256) >> 9) + (*((_QWORD *)&v408 + 1) << 7);
        *(_QWORD *)&v389 = 0x7FFFFFFFFFFFFFFFLL;
        if (v262 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_432:
          v397 = 0;
        }
        else
        {
          v397 = v23[82];
          v17 = *((_QWORD *)v23 + 1);
          *(_QWORD *)&v389 = v262;
        }
      }
      v263 = (uint64_t *)v348;
      v264 = *((_QWORD *)&v381 + 1);
      v265 = *v22;
      v23[82] = 1;
      if (v24 > 0x18)
      {
        v266 = *((_QWORD *)&v381 + 1);
      }
      else
      {
        v266 = *((_QWORD *)&v381 + 1);
        if (((1 << v24) & 0x1790000) != 0)
        {
          memset(*(void **)(v19 + 11184), 26, 0x8000uLL);
          v265 = av1_interinter_compound_motion_search(*((uint64_t *)&v381 + 1), v19, (_QWORD *)v369, v18, v24);
        }
      }
      HIDWORD(v395) = v265;
      v267 = *((_QWORD *)&v375 + 1);
      av1_enc_build_inter_predictor(*((uint64_t *)&v373 + 1), *((uint64_t *)&v375 + 1), DWORD1(v375), v375, v377, v18, 0, 0, v300, v302, v304, v306, v308, v310, v312, v314, v316, v318, v320,
        v322,
        v324,
        v326,
        v328,
        v330,
        v332,
        v334,
        v336,
        v338,
        v340,
        v342,
        v344,
        v346,
        v348,
        v350,
        v352,
        v355,
        v357,
        v359,
        v361,
        v363,
        v365,
        v367,
        v369,
        v371,
        v373,
        v375,
        v377,
        v379,
        v381,
        v383,
        v385,
        v387,
        v389,
        v391,
        v225,
        v393,
        v226,
        v395);
      *(_QWORD *)&v410 = 0;
      v408 = 0u;
      v409 = 0u;
      v268 = prune_mode_by_skip_rd(v266, v19, v267, v18, v392, *v22 + v182);
      if ((v380 & 0x8000000000000000) != 0)
      {
        v84 = (int *)v386;
        LODWORD(v88) = v182;
        v20 = v264;
        v21 = v263;
      }
      else
      {
        v21 = v263;
        if (v268)
        {
          aom_subtract_block_neon(block_size_high_12[v390], block_size_wide_13[v390], *(uint16x8_t **)v19, block_size_wide_13[v390], *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
          if (av1_estimate_txfm_yrd(v264, v19, (int *)&v408, v380, v18, max_txsize_rect_lookup_1[v390]) != 0x7FFFFFFFFFFFFFFFLL)
          {
            v269 = *(_QWORD *)(v19 + 8304);
            v84 = (int *)v386;
            LODWORD(v88) = v182;
            v89 = HIDWORD(v394);
            if (v269)
              v269 = *(unsigned __int8 *)(v269 + 144);
            v20 = v264;
            v270 = *(_QWORD *)(v19 + 8296);
            v258 = v397;
            if (v270)
              v270 = *(unsigned __int8 *)(v270 + 144);
            v271 = v270 + v269;
            if ((_BYTE)v410)
              v272 = *(_DWORD *)(v19 + 8 * v271 + 35972);
            else
              v272 = v408 + *(_DWORD *)(v19 + 8 * v271 + 35968);
            v273 = (((int)v400[4] * (uint64_t)(HIDWORD(v394) + (int)v88 + v272) + 256) >> 9)
                 + (*((_QWORD *)&v408 + 1) << 7);
            if (v273 < (uint64_t)v388)
            {
              v258 = v23[82];
              v17 = *((_QWORD *)v23 + 1);
              *(_QWORD *)&v388 = v273;
            }
            goto LABEL_443;
          }
        }
        v84 = (int *)v386;
        LODWORD(v88) = v182;
        v20 = v264;
      }
      v89 = HIDWORD(v394);
      v258 = v397;
LABEL_443:
      if ((_DWORD)v24 == 24)
        v335[1325] = v258;
LABEL_445:
      v23[82] = v258;
      *((_QWORD *)v23 + 1) = v17;
      v90 = 0x7FFFFFFFFFFFFFFFLL;
      v170 = v388;
      if ((uint64_t)v388 < *v21)
        goto LABEL_446;
      goto LABEL_149;
    }
LABEL_188:
    DWORD2(v384) = 0;
    if (v24 <= 0x18 && ((1 << v24) & 0x1790000) != 0)
      DWORD2(v384) = *(_DWORD *)(*((_QWORD *)&v366 + 1) + 148) == 0;
    v111 = *((_QWORD *)v23 + 1);
    LODWORD(v353) = *v22;
    LODWORD(v351) = *v315;
    HIDWORD(v327) = v335[1323];
    if (HIDWORD(v327) == -1 && (BYTE8(v384) & 1) == 0)
    {
      v112 = v89;
      av1_build_inter_predictors_for_planes_single_buf(*((_DWORD **)&v374 + 1), v18, 0, 0, 0, (uint64_t)&v424, (uint64_t)&v402);
      av1_build_inter_predictors_for_planes_single_buf(*((_DWORD **)&v374 + 1), v18, 0, 0, 1, (uint64_t)&v423, (uint64_t)&v402);
      v89 = v112;
      v84 = (int *)v386;
      LODWORD(v88) = DWORD2(v386);
    }
    v113 = 0;
    *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
    if ((int)v351 < 1 || HIDWORD(v327) != -1)
    {
      HIDWORD(v353) = 0;
      HIDWORD(v351) = 0;
      goto LABEL_289;
    }
    v114 = 0;
    HIDWORD(v351) = 0;
    HIDWORD(v353) = 0;
    v113 = 0;
    v115 = (uint64_t)v380 / 2;
    *(_QWORD *)&v388 = 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v382 = (uint64_t)v380 / 2;
    *((_QWORD *)&v368 + 1) = v24;
    *(_QWORD *)&v370 = v23;
    while (2)
    {
      HIDWORD(v362) = v113;
      v116 = 0;
      *((_QWORD *)&v378 + 1) = (char)v114;
      v117 = 1;
      v118 = v390;
      *((_QWORD *)&v388 + 1) = v114;
      do
      {
        v119 = v117;
        v89 = *v22;
        v23[80] = v114;
        v23[81] = v116;
        if (v23[83] == 2)
        {
          v120 = *v23;
          if ((int)av1_wedge_params_lookup[8 * v120] < 1)
            v121 = 0;
          else
            v121 = *(_DWORD *)(v19 + (v120 << 6) + 4 * *((_QWORD *)&v378 + 1) + 33560) + 512;
        }
        else
        {
          v121 = 512;
        }
        v122 = v121 + v88;
        if (v115 <= ((*v84 + (uint64_t)(v121 + (int)v88)) * (int)v400[4] + 256) >> 9)
          goto LABEL_202;
        LODWORD(v394) = v119;
        if ((BYTE8(v384) & 1) != 0)
        {
          v123 = *(unsigned __int8 ***)(v19 + 8280);
          v124 = (uint64_t)*v123;
          LODWORD(v405) = 0;
          v125 = *(unsigned __int8 *)(v124 + 83);
          if (*(_BYTE *)(v124 + 83))
          {
            v126 = *(_QWORD *)(v19 + 11184);
            *(_QWORD *)(v124 + 72) = v126;
            if ((_DWORD)v24 == 24)
            {
              v127 = block_size_wide_19[v118];
              if (v125 == 2)
                v126 = *(_QWORD *)(*(_QWORD *)&av1_wedge_params_lookup[8 * **v123 + 6]
                                 + ((uint64_t)*(char *)(v124 + 81) << 7)
                                 + 8 * *(char *)(v124 + 80));
              goto LABEL_221;
            }
            if (BYTE4(v366) < 4u)
              goto LABEL_228;
          }
          else
          {
            *(_QWORD *)(v124 + 72) = 0;
            if ((_DWORD)v24 == 24)
            {
              v126 = 0;
              v127 = block_size_wide_19[v118];
LABEL_221:
              *(_QWORD *)&v408 = *(_QWORD *)v368;
              if (*(_DWORD *)(*((_QWORD *)&v366 + 1) + 188) == 2)
                v143 = 1;
              else
                v143 = 2;
              av1_joint_motion_search(*((uint64_t *)&v380 + 1), v19, v18, (uint64_t)&v408, v126, v127, (uint64_t)&v405, **((_DWORD **)&v366 + 1) == 0, v143);
              *(_DWORD *)(v124 + 8) = v408;
              v144 = v364;
              v145 = 1;
              goto LABEL_229;
            }
            if (BYTE4(v366) <= 3u)
            {
LABEL_228:
              *(_QWORD *)&v408 = *(_QWORD *)v368;
              v145 = v356;
              av1_compound_single_motion_search_interinter(*((uint64_t *)&v380 + 1), v19);
              v144 = (_DWORD *)v358;
LABEL_229:
              *(_DWORD *)(v124 + 4 * v145 + 8) = *v144;
              HIDWORD(v394) = v405;
LABEL_231:
              av1_enc_build_inter_predictor(*((uint64_t *)&v372 + 1), *((uint64_t *)&v374 + 1), DWORD1(v374), v374, v376, v18, 0, 0, v299, v301, v303, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
                v321,
                v323,
                (uint64_t)v325,
                v327,
                v329,
                v331,
                v333,
                (uint64_t)v335,
                v337,
                v339,
                v341,
                v343,
                v345,
                (uint64_t)v347,
                v349,
                v351,
                v353,
                v356,
                v358,
                v360,
                v362,
                (uint64_t)v364,
                v366,
                v368,
                v370,
                v372,
                v374,
                v376,
                v378,
                v380,
                v382,
                v384,
                v386,
                v388,
                v390,
                *(int32x2_t *)v80.i8,
                v392,
                (uint16x8_t)v78,
                v394);
              goto LABEL_237;
            }
          }
          HIDWORD(v394) = 0;
          goto LABEL_231;
        }
        HIDWORD(v394) = v89;
        v128 = av1_ss_size_lookup[4 * v118 + 2 * *(int *)(v19 + 436) + *(int *)(v19 + 440)];
        v129 = v19;
        v130 = block_size_wide_28[v128];
        v131 = block_size_high_26[v128];
        v132 = (uint8x16_t *)v423;
        v133 = (uint8x16_t *)v424;
        v134 = (int)v402;
        v135 = **(unsigned __int8 ***)(v129 + 8280);
        LODWORD(v128) = (char)v135[17];
        v136 = *(int8x8_t **)(v129 + 448);
        v137 = v129;
        v138 = *(uint8x16_t **)(v129 + 11184);
        *((_QWORD *)v135 + 9) = v138;
        v139 = (int8x8_t **)(v135 + 72);
        if ((int)v128 >= 1 && (v140 = v135[83], (v140 & 0xFE) == 2))
        {
          if (v140 == 3)
          {
            v360 = (uint64_t)v132;
            av1_build_compound_diffwtd_mask_neon(v138, v135[82], v133, v134, v132, v134, v131, v130);
            v132 = (uint8x16_t *)v360;
            v141 = v135[83];
          }
          else
          {
            v141 = 2;
          }
          v146 = *v135;
          if (v141 == 2)
            v139 = (int8x8_t **)(*(_QWORD *)&av1_wedge_params_lookup[8 * v146 + 6]
                               + ((uint64_t)(char)v135[81] << 7)
                               + 8 * (char)v135[80]);
          aom_blend_a64_mask_neon(v136, *(_DWORD *)(v137 + 472), (uint8x8_t *)v133, v134, (uint8x8_t *)v132, v134, *v139, block_size_wide_28[v146], v130, v131, __SPAIR64__(2 << mi_size_high_log2_4[v146] == v131, 2 << mi_size_wide_log2_12[v146] == v130));
          v23 = (unsigned __int8 *)v370;
          v19 = v137;
        }
        else
        {
          v142 = v130;
          v19 = v129;
          aom_convolve_copy_neon(v133, v134, v136, *(int *)(v129 + 472), v142, v131);
          v23 = (unsigned __int8 *)v370;
        }
        v22 = (int *)*((_QWORD *)&v370 + 1);
        v24 = *((_QWORD *)&v368 + 1);
        v18 = DWORD1(v372);
LABEL_237:
        *(_QWORD *)&v410 = 0;
        v80.i64[0] = 0;
        v408 = 0u;
        v409 = 0u;
        v147 = *(int *)(*((_QWORD *)&v382 + 1) + 8 * (*(_BYTE *)(*(_QWORD *)(v384 + 24448) + 63) != 0));
        if (!(_DWORD)v147)
          goto LABEL_259;
        v148 = *(int *)(v19 + 436);
        v149 = *(int *)(v19 + 440);
        v150 = *(unsigned __int8 *)(*((_QWORD *)&v376 + 1) + 2 * v148 + v149);
        v151 = block_size_high_5[v150];
        v152 = *(_DWORD *)(v19 + 8352);
        if ((v152 & 0x80000000) == 0)
        {
          v153 = block_size_wide_6[v150];
          v154 = *(_DWORD *)(v19 + 8344);
          if ((v154 & 0x80000000) == 0)
            goto LABEL_240;
LABEL_251:
          v161 = (v154 >> (v148 + 3)) + v153;
          if (v161 >= (int)v153)
            v162 = v153;
          else
            v162 = v161;
          if (v161 >= 0)
            v153 = v162;
          else
            v153 = 0;
          goto LABEL_240;
        }
        v159 = (v152 >> (v149 + 3)) + v151;
        if (v159 >= (int)v151)
          v160 = block_size_high_5[v150];
        else
          v160 = v159;
        if (v159 >= 0)
          v151 = v160;
        else
          v151 = 0;
        v153 = block_size_wide_6[v150];
        v154 = *(_DWORD *)(v19 + 8344);
        if (v154 < 0)
          goto LABEL_251;
LABEL_240:
        v155 = *v22;
        v156 = *(_DWORD *)(v19 + 11072);
        v157 = aom_sse(*(_QWORD *)(v19 + 48), *(unsigned int *)(v19 + 72), *(_QWORD *)(v19 + 448), *(unsigned int *)(v19 + 472), v153, v151);
        if ((*(_DWORD *)v378 << (num_pels_log2_lookup_4[v390] + 7)) < v392
          && *v400 >= dword_208F566D4[v147])
        {
          v158 = 4 * dword_208F566BC[v147];
          if (v392 != 0x7FFFFFFFFFFFFFFFLL)
          {
LABEL_258:
            if ((v158 * v392 * dword_208F566EC[v147]) >> 6 < (((int)v400[4] * (v155 + v122) + 256) >> 9)
                                                            + ((v157 + ((1 << (2 * v156 - 16)) >> 1)) >> (2 * v156 - 16) << 11))
              goto LABEL_200;
          }
        }
        else
        {
          v158 = 4;
          if (v392 != 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_258;
        }
LABEL_259:
        if ((uint64_t)v388 >= (uint64_t)v380)
          v163 = v380;
        else
          v163 = v388;
        if (v163 < 0)
        {
LABEL_200:
          v118 = v390;
LABEL_201:
          v84 = (int *)v386;
          LODWORD(v88) = DWORD2(v386);
          v89 = HIDWORD(v394);
          v115 = v382;
          LODWORD(v114) = DWORD2(v388);
          LOBYTE(v119) = v394;
          goto LABEL_202;
        }
        v118 = v390;
        aom_subtract_block_neon(block_size_high_12[v390], block_size_wide_13[v390], *(uint16x8_t **)v19, block_size_wide_13[v390], *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
        if (av1_estimate_txfm_yrd(*((uint64_t *)&v380 + 1), v19, (int *)&v408, v163, v18, max_txsize_rect_lookup_1[v390]) == 0x7FFFFFFFFFFFFFFFLL)goto LABEL_201;
        v164 = *(_QWORD *)(v19 + 8304);
        v84 = (int *)v386;
        LODWORD(v88) = DWORD2(v386);
        v89 = HIDWORD(v394);
        v115 = v382;
        LODWORD(v114) = DWORD2(v388);
        LOBYTE(v119) = v394;
        if (v164)
          v164 = *(unsigned __int8 *)(v164 + 144);
        v165 = *(_QWORD *)(v19 + 8296);
        if (v165)
          v165 = *(unsigned __int8 *)(v165 + 144);
        v166 = v165 + v164;
        if ((_BYTE)v410)
          v167 = *(_DWORD *)(v19 + 8 * v166 + 35972);
        else
          v167 = v408 + *(_DWORD *)(v19 + 8 * v166 + 35968);
        v168 = (((int)v400[4] * (uint64_t)(HIDWORD(v394) + v122 + v167) + 256) >> 9) + (*((_QWORD *)&v408 + 1) << 7);
        if (v168 < (uint64_t)v388)
        {
          HIDWORD(v362) = DWORD2(v388);
          v111 = *((_QWORD *)v23 + 1);
          v353 = __PAIR64__(v116, HIDWORD(v394));
          HIDWORD(v351) = v122;
          *(_QWORD *)&v388 = v168;
        }
LABEL_202:
        v117 = 0;
        v116 = 1;
      }
      while ((v119 & 1) != 0);
      if ((_DWORD)v114 != 7)
      {
        v21 = v347;
        v20 = *((_QWORD *)&v380 + 1);
        v113 = HIDWORD(v362);
        goto LABEL_198;
      }
      v21 = v347;
      v20 = *((_QWORD *)&v380 + 1);
      v113 = HIDWORD(v362);
      if (!*(_DWORD *)(*((_QWORD *)&v366 + 1) + 196))
      {
LABEL_198:
        v114 = (v114 + 1);
        if ((int)v114 >= (int)v351)
          goto LABEL_289;
        continue;
      }
      break;
    }
    if (SHIDWORD(v362) <= 3)
    {
      LODWORD(v114) = dword_208F56750[SHIDWORD(v362)];
      LODWORD(v351) = v114 + 3;
      goto LABEL_198;
    }
LABEL_289:
    if (HIDWORD(v327) == -1)
    {
      if ((_DWORD)v24 == 24 || *(_DWORD *)(*((_QWORD *)&v366 + 1) + 192))
      {
        v335[1323] = v113;
        v89 = v353;
        v335[1324] = HIDWORD(v353);
        v202 = BYTE4(v353);
        v203 = HIDWORD(v351);
      }
      else
      {
        v89 = v353;
        v202 = BYTE4(v353);
        v203 = HIDWORD(v351);
      }
    }
    else
    {
      v177 = v335[1323];
      v23[80] = v177;
      HIDWORD(v354) = v335[1324];
      v23[81] = BYTE4(v354);
      if (DWORD2(v384))
      {
        v178 = av1_interinter_compound_motion_search(v20, v19, (_QWORD *)v368, v18, v24);
        LODWORD(v88) = DWORD2(v386);
        HIDWORD(v362) = v335[1323];
        LODWORD(v354) = v178;
        HIDWORD(v354) = v335[1324];
        v111 = *((_QWORD *)v23 + 1);
        if (v23[83] != 2)
          goto LABEL_292;
LABEL_323:
        v204 = *v23;
        if ((int)av1_wedge_params_lookup[8 * v204] < 1)
          v179 = 0;
        else
          v179 = *(_DWORD *)(v19 + (v204 << 6) + 4 * (char)v23[80] + 33560) + 512;
      }
      else
      {
        HIDWORD(v362) = v177;
        v111 = *((_QWORD *)v23 + 1);
        LODWORD(v354) = v89;
        if (v23[83] == 2)
          goto LABEL_323;
LABEL_292:
        v179 = 512;
      }
      v212 = v179 + v88;
      v213 = *((_QWORD *)&v374 + 1);
      av1_enc_build_inter_predictor(*((uint64_t *)&v372 + 1), *((uint64_t *)&v374 + 1), DWORD1(v374), v374, v376, v18, 0, 0, v299, v301, v303, (uint64_t)v305, (uint64_t)v307, (uint64_t)v309, (uint64_t)v311, v313, (uint64_t)v315, v317, v319,
        v321,
        v323,
        (uint64_t)v325,
        v327,
        v329,
        v331,
        v333,
        (uint64_t)v335,
        v337,
        v339,
        v341,
        v343,
        v345,
        (uint64_t)v347,
        v349,
        v351,
        v354,
        v356,
        v358,
        v360,
        v362,
        (uint64_t)v364,
        v366,
        v368,
        v370,
        v372,
        v374,
        v376,
        v378,
        v380,
        v382,
        v384,
        v386,
        v388,
        v390,
        *(int32x2_t *)v80.i8,
        v392,
        (uint16x8_t)v78,
        v394);
      v203 = v212;
      if (prune_mode_by_skip_rd(v20, v19, v213, v18, v392, *v22 + v212))
      {
        *(_QWORD *)&v410 = 0;
        v214 = block_size_wide_13[v390];
        v215 = block_size_high_12[v390];
        v408 = 0u;
        v409 = 0u;
        aom_subtract_block_neon(v215, v214, *(uint16x8_t **)v19, v214, *(uint8x8_t **)(v19 + 48), *(int *)(v19 + 72), *(uint8x8_t **)(v19 + 448), *(int *)(v19 + 472));
        if (av1_estimate_txfm_yrd(v20, v19, (int *)&v408, 0x7FFFFFFFFFFFFFFFLL, v18, max_txsize_rect_lookup_1[v390]) == 0x7FFFFFFFFFFFFFFFLL)
        {
          v216 = v408;
          v84 = (int *)v386;
          v89 = v353;
          LOBYTE(v113) = BYTE4(v362);
        }
        else
        {
          v217 = *(_QWORD *)(v19 + 8304);
          v89 = v353;
          if (v217)
            v217 = *(unsigned __int8 *)(v217 + 144);
          v84 = (int *)v386;
          LOBYTE(v113) = BYTE4(v362);
          v218 = *(_QWORD *)(v19 + 8296);
          if (v218)
            v218 = *(unsigned __int8 *)(v218 + 144);
          v219 = v218 + v217;
          if ((_BYTE)v410)
            v216 = *(_DWORD *)(v19 + 8 * v219 + 35972);
          else
            v216 = v408 + *(_DWORD *)(v19 + 8 * v219 + 35968);
        }
        *(_QWORD *)&v388 = (((int)v400[4] * (uint64_t)(int)(v212 + v89 + v216) + 256) >> 9)
                         + (*((_QWORD *)&v408 + 1) << 7);
      }
      else
      {
        v84 = (int *)v386;
        v89 = v353;
        LOBYTE(v113) = BYTE4(v362);
      }
      v202 = BYTE4(v353);
    }
    v23[80] = v113;
    v23[81] = v202;
    v90 = 0x7FFFFFFFFFFFFFFFLL;
    LODWORD(v88) = v203;
    *((_QWORD *)v23 + 1) = v111;
    v170 = v388;
    if ((uint64_t)v388 >= *v21)
      goto LABEL_149;
LABEL_446:
    *v21 = v170;
    v425[0] = *(_QWORD *)v323;
    *(_DWORD *)((char *)v425 + 7) = *(_DWORD *)(v323 + 7);
    LODWORD(v331) = *((_DWORD *)v23 + 21);
    HIDWORD(v331) = v23[83];
    if (v24 <= 0x18 && ((1 << v24) & 0x1790000) != 0)
      v47 = *((_QWORD *)v23 + 1);
    else
      v89 = HIDWORD(v339);
LABEL_150:
    *((_DWORD *)v23 + 2) = *(_DWORD *)v368;
    *((_DWORD *)v23 + 3) = *(_DWORD *)(v368 + 4);
    v339 = __PAIR64__(v89, v88);
    v337 = v90;
LABEL_151:
    LOBYTE(v39) = BYTE4(v345);
    v86 = v349;
    v50 = v341;
    v87 = (_DWORD *)v343;
LABEL_152:
    if (++v86 != v50)
      continue;
    break;
  }
  v277 = v331;
  v278 = BYTE4(v331);
  v279 = ((BYTE4(v331) > 1u) << 8) | ((BYTE4(v331) != 1) << 9);
  result = v339;
LABEL_465:
  *((_QWORD *)v23 + 9) = v425[0];
  *(_WORD *)(v23 + 167) = *(_WORD *)(v23 + 167) & 0xFCFF | v279;
  *(_DWORD *)(v23 + 79) = *(_DWORD *)((char *)v425 + 7);
  v23[83] = v278;
  *((_DWORD *)v23 + 21) = v277;
  if (v24 <= 0x18 && ((1 << v24) & 0x1790000) != 0)
  {
    *((_QWORD *)v23 + 1) = v47;
    *(_DWORD *)v386 += HIDWORD(v339) - *v22;
    *v22 = HIDWORD(v339);
    if ((_DWORD)v24 == 24)
      v335[(char)v321 + 1326] = v278;
  }
  v280 = *(_DWORD *)(v376 + 24);
  *(_QWORD *)(v19 + 448) = *(_QWORD *)v376;
  *(_DWORD *)(v19 + 472) = v280;
  if ((v39 & 1) == 0 && *v325 <= 63)
  {
    v281 = v19 + 160 * *v325 + 109744;
    v282 = v420;
    *(_OWORD *)v281 = v419;
    *(_OWORD *)(v281 + 16) = v282;
    v283 = v417;
    v284 = v418;
    *(_OWORD *)(v281 + 32) = v421;
    *(_OWORD *)(v281 + 48) = v283;
    v285 = v416;
    *(_OWORD *)(v281 + 64) = v415;
    *(_OWORD *)(v281 + 80) = v285;
    *(_OWORD *)(v281 + 96) = v284;
    *(_QWORD *)(v281 + 112) = *(_QWORD *)v368;
    *(_WORD *)(v281 + 120) = *((_WORD *)v23 + 8);
    *(_BYTE *)(v281 + 122) = v23[2];
    *(_DWORD *)(v281 + 124) = *((_DWORD *)v23 + 5);
    *(_DWORD *)(v281 + 128) = (*(unsigned __int16 *)(v23 + 167) >> 4) & 3;
    v286 = *(_QWORD *)(v19 + 11160);
    v287 = *v23;
    v288 = block_size_wide_6[v287];
    v289 = v23[2];
    v290 = block_size_high_5[v287];
    if (v288 < v290)
      v290 = v288;
    v292 = v289 == 15 || v289 == 23;
    v293 = *(unsigned __int8 *)(v286 + 36 * (char)v23[16] + 32) > 1u && v292;
    if (v290 <= 7)
      v293 = 0;
    *(_DWORD *)(v281 + 132) = v293;
    v294 = *(unsigned __int8 *)(v286 + 36 * (char)v23[17] + 32) > 1u && v292;
    if (v290 <= 7)
      v294 = 0;
    *(_DWORD *)(v281 + 136) = v294;
    *(_OWORD *)(v281 + 144) = *(_OWORD *)(v23 + 72);
    ++*v325;
  }
  return result;
}

BOOL prune_mode_by_skip_rd(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(int *)(a1 + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 263720) + 63) != 0) + 389072);
  v7 = 1;
  if ((_DWORD)v6)
  {
    v10 = (_DWORD *)(a2 + 146576);
    v11 = (_DWORD *)(a2 + 16904);
    v12 = *(int *)(a3 + 20);
    v13 = *(int *)(a3 + 24);
    v14 = a4;
    v15 = av1_ss_size_lookup[4 * a4 + 2 * v12 + v13];
    v16 = block_size_high_5[v15];
    v17 = block_size_wide_6[v15];
    v18 = *(_DWORD *)(a3 + 7936);
    v19 = (v18 >> (v13 + 3)) + v16;
    if (v19 >= (int)v16)
      v20 = v16;
    else
      v20 = v19;
    if (v19 >= 0)
      v21 = v20;
    else
      v21 = 0;
    if (v18 < 0)
      v22 = v21;
    else
      v22 = v16;
    v23 = *(_DWORD *)(a3 + 7928);
    v24 = (v23 >> (v12 + 3)) + v17;
    if (v24 >= (int)v17)
      v25 = v17;
    else
      v25 = v24;
    if (v24 >= 0)
      v26 = v25;
    else
      v26 = 0;
    if (v23 < 0)
      v27 = v26;
    else
      v27 = v17;
    v28 = *(_DWORD *)(a3 + 10656);
    v29 = ((*(int *)(a2 + 16920) * (uint64_t)a6 + 256) >> 9)
        + ((aom_sse(*(_QWORD *)(a2 + 48), *(unsigned int *)(a2 + 72), *(_QWORD *)(a3 + 32), *(unsigned int *)(a3 + 56), v27, v22)+ ((1 << (2 * v28 - 16)) >> 1)) >> (2 * v28 - 16) << 11);
    if ((*v10 << (num_pels_log2_lookup_4[v14] + 7)) < a5 && *v11 >= dword_208F566D4[v6])
      v30 = 4 * dword_208F566BC[v6];
    else
      v30 = 4;
    v31 = (v30 * a5 * dword_208F566EC[v6]) >> 6;
    return a5 == 0x7FFFFFFFFFFFFFFFLL || v29 <= v31;
  }
  return v7;
}

uint64_t pick_wedge_fixed_sign(uint64_t a1, unsigned int a2, int16x4_t *a3, int16x4_t *a4, unsigned __int8 a5, _BYTE *a6, int64_t *a7)
{
  uint64_t v7;
  unsigned int v8;
  char v9;
  int v10;
  unint64_t v11;
  double v12;
  int *v13;
  int16x4_t *v14;
  int16x4_t *v15;
  uint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  int16x4_t *v20;
  int16x4_t *v21;
  int64x2_t v22;
  int64x2_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  uint64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  double v44;
  uint64_t v45;
  double *v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  double v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v59;

  v7 = a2;
  v8 = av1_wedge_params_lookup[8 * a2];
  if ((int)(v8 << 24) < 1)
  {
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = 0;
    v10 = (char)v8;
    v11 = block_size_high_5[a2] * block_size_wide_6[a2];
    v12 = (double)(int)v11;
    v13 = (int *)(a1 + 16920);
    v14 = a4 + 2;
    v15 = a3 + 2;
    v16 = 0x7FFFFFFFFFFFFFFFLL;
    v17 = *(_QWORD *)&av1_wedge_params_lookup[8 * a2 + 6] + ((unint64_t)a5 << 7);
    v18 = 0uLL;
    v56 = v17;
    do
    {
      v19 = 0;
      v20 = v15;
      v21 = v14;
      v22 = 0uLL;
      v23 = 0uLL;
      do
      {
        v24 = *(int16x8_t *)v20[-2].i8;
        v25 = *(int16x8_t *)v21[-2].i8;
        v26 = *(int8x16_t *)(*(_QWORD *)(v17 + 8 * v9) + v19);
        v27 = (int16x8_t)vzip1q_s8(v26, v18);
        v28 = (int16x8_t)vzip2q_s8(v26, v18);
        v29 = vshll_n_s16(*(int16x4_t *)v24.i8, 6uLL);
        v30 = vmlal_high_s16(vshll_high_n_s16(v24, 6uLL), v27, v25);
        *(int16x4_t *)v25.i8 = vqmovn_s32(vmlal_s16(v29, *(int16x4_t *)v27.i8, *(int16x4_t *)v25.i8));
        *(int16x4_t *)v30.i8 = vqmovn_s32(v30);
        v31 = vqmovn_s32(vmlal_s16(vshll_n_s16(*v20, 6uLL), *(int16x4_t *)v28.i8, *v21));
        v32 = vqmovn_s32(vmlal_high_s16(vshll_high_n_s16(*(int16x8_t *)v20->i8, 6uLL), v28, *(int16x8_t *)v21->i8));
        v22 = (int64x2_t)vpadalq_u32((uint64x2_t)v22, (uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v25.i8));
        v23 = (int64x2_t)vpadalq_u32((uint64x2_t)v23, (uint32x4_t)vmlal_s16(vmull_s16(v32, v32), v31, v31));
        v19 += 16;
        v21 += 4;
        v20 += 4;
      }
      while (v19 < v11);
      v33 = vaddvq_s64(vaddq_s64(v23, v22));
      v34 = (unint64_t)(v33 + 2048) >> 12;
      if ((unint64_t)(v33 + 2048) >= 0x1000)
      {
        v59 = v16;
        v37 = a1;
        v38 = *(__int16 *)(*(_QWORD *)(a1 + 128) + 2);
        v39 = (double)(v38 >> 3);
        if (v38 <= 15)
          v39 = 1.0;
        v40 = (double)v34 / v12;
        v41 = fmax(log2(v40 / (v39 * v39)), -14.999999);
        if (v41 >= 15.999999)
          v42 = 62.999998;
        else
          v42 = v41 + 15.5 + v41 + 15.5;
        v43 = vcvtmd_s64_f64(v42);
        v44 = v42 - (double)v43;
        v45 = v43 - 1;
        v46 = (double *)((char *)&interp_rgrid_curv + 520 * bsize_curvfit_model_cat_lookup[v7] + 8 * v45);
        v47 = (v46[1]
             + v44
             * 0.5
             * (v46[2]
              - *v46
              + v44
              * (v46[1] * -5.0 + *v46 * 2.0 + v46[2] * 4.0 - v46[3] + v44 * (v46[3] + (v46[1] - v46[2]) * 3.0 - *v46))))
            * v12;
        if (v47 >= 0.0)
          v48 = v47 + 0.5;
        else
          v48 = 0.5;
        if ((int)v48)
        {
          v49 = (double *)((char *)&interp_dgrid_curv + 520 * (v40 > 16.0) + 8 * v45);
          v50 = v40
              * (v49[1]
               + v44
               * 0.5
               * (v49[2]
                - *v49
                + v44
                * (v49[1] * -5.0 + *v49 * 2.0 + v49[2] * 4.0 - v49[3] + v44 * (v49[3] + (v49[1] - v49[2]) * 3.0 - *v49))))
              * v12;
          if (v50 >= 0.0)
            v51 = v50 + 0.5;
          else
            v51 = 0.5;
          v52 = ((uint64_t)v51 << 7) + ((*v13 * (uint64_t)(int)v48 + 256) >> 9);
          v53 = v52 < v34 << 11;
          if (v52 >= v34 << 11)
            v35 = 0;
          else
            v35 = (int)v48;
          if (v53)
            v36 = (uint64_t)v51;
          else
            v36 = 16 * v34;
        }
        else
        {
          v35 = 0;
          v36 = 16 * v34;
        }
        a1 = v37;
        v16 = v59;
        v17 = v56;
        v18 = 0uLL;
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
      v54 = (((*(int *)(a1 + (v7 << 6) + 4 * v9 + 33560) + (uint64_t)v35) * *v13 + 256) >> 9) + (v36 << 7);
      if (v54 < v16)
      {
        *a6 = v9;
        *a7 = v34;
        v16 = v54;
      }
      ++v9;
    }
    while (v10 > v9);
  }
  return v16 - ((*(int *)(a1 + 16920) * (uint64_t)*(int *)(a1 + (v7 << 6) + 4 * (char)*a6 + 33560) + 256) >> 9);
}

void model_rd_for_sb_with_curvfit(unsigned int a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, BOOL *a6, _QWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  int v38;
  double v39;
  uint64_t v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int *v53;

  v53 = (int *)(a2 + 4 * *(char *)(**(_QWORD **)(a3 + 7864) + 16) + 146600);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = av1_ss_size_lookup[4 * a1 + 2 * v12 + v13];
  v15 = block_size_high_5[v14];
  v16 = block_size_wide_6[v14];
  v17 = *(_DWORD *)(a3 + 7936);
  v18 = (v17 >> (v13 + 3)) + v15;
  if (v18 >= v15)
    v19 = block_size_high_5[v14];
  else
    v19 = v18;
  if (v18 >= 0)
    v20 = v19;
  else
    v20 = 0;
  if (v17 < 0)
    v21 = v20;
  else
    v21 = block_size_high_5[v14];
  v22 = *(_DWORD *)(a3 + 7928);
  v23 = (v22 >> (v12 + 3)) + v16;
  if (v23 >= v16)
    v24 = block_size_wide_6[v14];
  else
    v24 = v23;
  if (v23 >= 0)
    v25 = v24;
  else
    v25 = 0;
  if (v22 < 0)
    v26 = v25;
  else
    v26 = block_size_wide_6[v14];
  v27 = *(_DWORD *)(a3 + 10656);
  v28 = (aom_sse(*(_QWORD *)(a2 + 48), *(unsigned int *)(a2 + 72), *(_QWORD *)(a3 + 32), *(unsigned int *)(a3 + 56), v26, v21)+ ((1 << (2 * v27 - 16)) >> 1)) >> (2 * v27 - 16);
  if (!v28)
  {
    v50 = 0;
    v49 = 0;
    *v53 = 0;
    if (!a6)
      goto LABEL_43;
    goto LABEL_42;
  }
  v29 = v26 * v21;
  v30 = *(__int16 *)(*(_QWORD *)(a2 + 128) + 2);
  v31 = (double)(v30 >> 3);
  if (v30 <= 15)
    v31 = 1.0;
  v32 = (double)v29;
  v33 = (double)v28 / (double)v29;
  v34 = fmax(log2(v33 / (v31 * v31)), -14.999999);
  v35 = v34 + 15.5 + v34 + 15.5;
  v36 = v34 < 15.999999;
  v37 = 62.999998;
  if (v36)
    v37 = v35;
  v38 = vcvtmd_s64_f64(v37);
  v39 = v37 - (double)v38;
  v40 = v38 - 1;
  v41 = (double *)((char *)&interp_rgrid_curv + 520 * bsize_curvfit_model_cat_lookup[v14] + 8 * v40);
  v42 = (v41[1]
       + v39
       * 0.5
       * (v41[2]
        - *v41
        + v39 * (v41[1] * -5.0 + *v41 * 2.0 + v41[2] * 4.0 - v41[3] + v39 * (v41[3] + (v41[1] - v41[2]) * 3.0 - *v41))))
      * v32;
  if (v42 >= 0.0)
    v43 = v42 + 0.5;
  else
    v43 = 0.5;
  if ((int)v43)
  {
    v44 = (double *)((char *)&interp_dgrid_curv + 520 * (v33 > 16.0) + 8 * v40);
    v45 = v33
        * (v44[1]
         + v39
         * 0.5
         * (v44[2]
          - *v44
          + v39 * (v44[1] * -5.0 + *v44 * 2.0 + v44[2] * 4.0 - v44[3] + v39 * (v44[3] + (v44[1] - v44[2]) * 3.0 - *v44))))
        * v32;
    if (v45 >= 0.0)
      v46 = v45 + 0.5;
    else
      v46 = 0.5;
    v47 = ((uint64_t)v46 << 7) + ((*(int *)(a2 + 16920) * (uint64_t)(int)v43 + 256) >> 9);
    v48 = v47 < v28 << 11;
    if (v47 >= v28 << 11)
      v49 = 0;
    else
      v49 = (int)v43;
    if (v48)
      v50 = (uint64_t)v46;
    else
      v50 = 16 * v28;
    v51 = -1;
    if (v28 < 0xFFFFFFFFLL)
      v51 = v28;
    *v53 = v51;
    if (!a6)
      goto LABEL_43;
LABEL_42:
    *a6 = v49 == 0;
    goto LABEL_43;
  }
  v49 = 0;
  v50 = 16 * v28;
  v52 = -1;
  if (v28 < 0xFFFFFFFFLL)
    v52 = v28;
  *v53 = v52;
  if (a6)
    goto LABEL_42;
LABEL_43:
  if (a7)
    *a7 = 16 * v28;
  *a4 = v49;
  *a5 = v50;
}

uint64_t pick_interinter_wedge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint8x8_t *v5;
  uint64_t v6;
  int16x4_t *v7;
  int16x4_t *v8;
  int16x4_t *v9;
  int16x4_t *v10;
  uint8x8_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t result;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint16x8_t *v30;
  int64x2_t v31;
  unsigned int v32;
  int64x2_t v33;
  unsigned int v34;
  int16x8_t v35;
  int16x8_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int16x8_t *v44;
  uint64_t v45;
  int64x2_t v46;
  int64x2_t v47;
  uint64_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  int v61;
  int64x2_t v62;
  int v63;
  int64x2_t v64;
  int16x4_t *v65;
  int v66;
  int16x8_t v67;
  int16x8_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int16x8_t *v73;
  uint64_t v74;
  int64x2_t v75;
  int64x2_t v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int16x8_t v84;
  int16x8_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  int16x4_t *v100;
  uint64_t v101;
  int8x16_t v102;
  int8x16_t *v103;
  uint16x8_t *v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int v109;
  int16x8_t v110;
  int16x8_t v111;
  int8x16_t v112;
  int16x8_t v113;
  int16x8_t v114;
  unint64_t v115;
  uint64_t v116;
  int64x2_t v117;
  int16x4_t *v118;
  int16x4_t *v119;
  int64x2_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int8x16_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int16x4_t v128;
  int16x4_t v129;
  BOOL v130;
  uint64_t v131;
  int64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  int v141;
  double v142;
  uint64_t v143;
  double *v144;
  double v145;
  double v146;
  double *v147;
  double v148;
  double v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int64x2_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint16x8_t *v159;
  uint64_t v160;
  int v161;
  int16x4_t *v162;
  int16x4_t *v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int64x2_t v168;
  int64x2_t v169;
  uint64_t v170;
  int16x8_t *v171;
  uint64_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int16x8_t v179;
  int16x8_t v180;
  uint32x4_t v181;
  uint32x4_t v182;
  uint32x4_t v183;
  uint32x4_t v184;
  int v185;
  int16x4_t *v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int64x2_t v190;
  int64x2_t v191;
  uint64_t v192;
  int16x8_t *v193;
  uint64_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int16x8_t v201;
  int16x8_t v202;
  uint32x4_t v203;
  uint32x4_t v204;
  uint32x4_t v205;
  uint32x4_t v206;
  int v207;
  int64x2_t v208;
  int64x2_t v209;
  int16x8_t *v210;
  uint64_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int16x8_t v218;
  int16x8_t v219;
  uint32x4_t v220;
  uint32x4_t v221;
  uint32x4_t v222;
  uint32x4_t v223;
  int v224;
  int64x2_t v225;
  int64x2_t v226;
  int16x8_t *v227;
  uint64_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int16x8_t v235;
  int16x8_t v236;
  uint32x4_t v237;
  uint32x4_t v238;
  uint32x4_t v239;
  uint32x4_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int16x4_t *v244;
  uint64_t v245;
  int16x4_t *v246;
  char v247;
  unsigned int v248;
  unsigned __int8 v249;
  int16x4_t *v250;
  uint64_t v251;
  int64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint16x8_t v255;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v8 = v7;
  v10 = v9;
  v11 = v5;
  STACK[0x8078] = *MEMORY[0x24BDAC8D0];
  v12 = **(_QWORD **)(v3 + 8280);
  v13 = block_size_wide_6[v4];
  HIBYTE(v254) = -1;
  v252 = v14;
  v253 = v3;
  if (*(_DWORD *)(v2 + 389196))
  {
    v15 = (_QWORD *)v2;
    v16 = *(_QWORD *)(v3 + 48);
    v17 = *(unsigned int *)(v3 + 72);
    v242 = v12;
    v18 = block_size_high_5[v4] >> 1;
    v250 = v7;
    v19 = (unint64_t)estimate_wedge_sign_split_qtr[v4] << 7;
    v20 = v6;
    v248 = v4;
    (*(void (**)(uint64_t, uint64_t, uint8x8_t *, unint64_t, uint16x8_t *))(*(_QWORD *)v2 + v19 + 51408))(v16, v17, v5, v13, &v255);
    v246 = v10;
    v21 = v16 + (int)v17 * v18 + (v13 >> 1);
    v22 = (v18 * v13);
    (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, __int8 *))(*v15 + v19 + 51408))(v21, v17, (unint64_t)v11 + (v13 >> 1) + v22, v13, &v255.i8[4]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t *))(*v15 + v19 + 51408))(v16, v17, v20, v13, &v255.u64[1]);
    v23 = v20 + (v13 >> 1) + v22;
    v12 = v242;
    (*(void (**)(unint64_t, uint64_t, uint64_t, unint64_t, __int8 *))(*v15 + v19 + 51408))(v21, v17, v23, v13, &v255.i8[12]);
    v24 = v255.u32[3] + (unint64_t)v255.u32[0] > v255.u32[1] + (unint64_t)v255.u32[2];
    result = pick_wedge_fixed_sign(v253, v248, v246, v250, v24, (_BYTE *)&v254 + 7, v252);
    v26 = HIBYTE(v254);
    goto LABEL_66;
  }
  v27 = block_size_high_5[v4];
  v28 = (v27 * v13);
  v251 = v4;
  v29 = av1_wedge_params_lookup[8 * v4];
  aom_subtract_block_neon(v27, v13, &v255, v13, *(uint8x8_t **)(v3 + 48), *(int *)(v3 + 72), v5, v13);
  if (v28 < 8)
  {
    if (v28 <= 3)
    {
      v157 = (v28 - 1);
      if (v157 >= 0xF)
      {
        v167 = v157 + 1;
        v168 = 0uLL;
        v169 = 0uLL;
        v170 = (v157 + 1) & 0x1FFFFFFF0;
        v158 = v28 - v170;
        v159 = (uint16x8_t *)((char *)&v255 + 2 * v170);
        v171 = (int16x8_t *)((unint64_t)&v255 | 0x10);
        v172 = v170;
        v173 = 0uLL;
        v174 = 0uLL;
        v175 = 0uLL;
        v176 = 0uLL;
        v177 = 0uLL;
        v178 = 0uLL;
        do
        {
          v179 = v171[-1];
          v180 = *v171;
          v181 = (uint32x4_t)vmull_high_s16(v179, v179);
          v182 = (uint32x4_t)vmull_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v179.i8);
          v183 = (uint32x4_t)vmull_high_s16(v180, v180);
          v184 = (uint32x4_t)vmull_s16(*(int16x4_t *)v180.i8, *(int16x4_t *)v180.i8);
          v174 = (int64x2_t)vaddw_high_u32((uint64x2_t)v174, v181);
          v173 = (int64x2_t)vaddw_u32((uint64x2_t)v173, *(uint32x2_t *)v181.i8);
          v169 = (int64x2_t)vaddw_high_u32((uint64x2_t)v169, v182);
          v168 = (int64x2_t)vaddw_u32((uint64x2_t)v168, *(uint32x2_t *)v182.i8);
          v178 = (int64x2_t)vaddw_high_u32((uint64x2_t)v178, v183);
          v177 = (int64x2_t)vaddw_u32((uint64x2_t)v177, *(uint32x2_t *)v183.i8);
          v176 = (int64x2_t)vaddw_high_u32((uint64x2_t)v176, v184);
          v175 = (int64x2_t)vaddw_u32((uint64x2_t)v175, *(uint32x2_t *)v184.i8);
          v171 += 2;
          v172 -= 16;
        }
        while (v172);
        v37 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v175, v168), vaddq_s64(v177, v173)), vaddq_s64(vaddq_s64(v176, v169), vaddq_s64(v178, v174))));
        v39 = v252;
        v38 = v253;
        v40 = v251;
        if (v167 == v170)
          goto LABEL_16;
      }
      else
      {
        v37 = 0;
        v158 = v28;
        v159 = &v255;
        v39 = v252;
        v38 = v253;
        v40 = v251;
      }
      do
      {
        v185 = v159->i16[0];
        v159 = (uint16x8_t *)((char *)v159 + 2);
        v37 += (v185 * v185);
        --v158;
      }
      while (v158);
      goto LABEL_16;
    }
    v153 = vaddvq_s64((int64x2_t)vpaddlq_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v255.i8, *(int16x4_t *)v255.i8)));
    v154 = (v28 - 4);
    if ((_DWORD)v28 == 4)
    {
      v37 = v153;
      v69 = vaddvq_s64((int64x2_t)vpaddlq_u32((uint32x4_t)vmull_s16(*v10, *v10)));
      v39 = v252;
      v38 = v253;
      v40 = v251;
      goto LABEL_30;
    }
    v164 = &v255.i64[1];
    if (v154 >= 0x10)
    {
      v208 = 0uLL;
      v209 = 0uLL;
      v166 = v154 - (v154 & 0xFFFFFFF0);
      v164 = (uint64_t *)((char *)&v255.i64[1] + 2 * (v154 & 0xFFFFFFF0));
      v210 = (int16x8_t *)((unint64_t)&v255 | 0x18);
      v211 = v154 & 0xFFFFFFF0;
      v212 = 0uLL;
      v213 = 0uLL;
      v214 = 0uLL;
      v215 = 0uLL;
      v216 = 0uLL;
      v217 = 0uLL;
      do
      {
        v218 = v210[-1];
        v219 = *v210;
        v220 = (uint32x4_t)vmull_high_s16(v218, v218);
        v221 = (uint32x4_t)vmull_s16(*(int16x4_t *)v218.i8, *(int16x4_t *)v218.i8);
        v222 = (uint32x4_t)vmull_high_s16(v219, v219);
        v223 = (uint32x4_t)vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v219.i8);
        v213 = (int64x2_t)vaddw_high_u32((uint64x2_t)v213, v220);
        v212 = (int64x2_t)vaddw_u32((uint64x2_t)v212, *(uint32x2_t *)v220.i8);
        v209 = (int64x2_t)vaddw_high_u32((uint64x2_t)v209, v221);
        v208 = (int64x2_t)vaddw_u32((uint64x2_t)v208, *(uint32x2_t *)v221.i8);
        v217 = (int64x2_t)vaddw_high_u32((uint64x2_t)v217, v222);
        v216 = (int64x2_t)vaddw_u32((uint64x2_t)v216, *(uint32x2_t *)v222.i8);
        v215 = (int64x2_t)vaddw_high_u32((uint64x2_t)v215, v223);
        v214 = (int64x2_t)vaddw_u32((uint64x2_t)v214, *(uint32x2_t *)v223.i8);
        v210 += 2;
        v211 -= 16;
      }
      while (v211);
      v165 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v214, v208), vaddq_s64(v216, v212)), vaddq_s64(vaddq_s64(v215, v209), vaddq_s64(v217, v213))));
      if ((v154 & 0xFFFFFFF0) == v154)
        goto LABEL_94;
    }
    else
    {
      v165 = 0;
      v166 = v28 - 4;
    }
    do
    {
      v224 = *(__int16 *)v164;
      v164 = (uint64_t *)((char *)v164 + 2);
      v165 += (v224 * v224);
      --v166;
    }
    while (v166);
LABEL_94:
    v37 = v153 + v165;
    v39 = v252;
    v38 = v253;
    v40 = v251;
    goto LABEL_16;
  }
  v30 = &v255;
  v31 = 0uLL;
  v32 = v28;
  v33 = 0uLL;
  do
  {
    v34 = v32;
    v35 = *(int16x8_t *)v30++;
    v36 = v35;
    v31 = (int64x2_t)vpadalq_u32((uint64x2_t)v31, (uint32x4_t)vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8));
    v33 = (int64x2_t)vpadalq_u32((uint64x2_t)v33, (uint32x4_t)vmull_high_s16(v36, v36));
    v32 -= 8;
  }
  while (v34 > 0xF);
  v37 = vaddvq_s64(vaddq_s64(v33, v31));
  v39 = v252;
  v38 = v253;
  v40 = v251;
  if (v32 + 8 >= 9)
  {
    v41 = v28 - 15;
    if (v28 < 0xF)
      v41 = 0;
    v42 = v28 - ((v41 + 7) & 0x1FFF8) - 9;
    if (v42 >= 0xF)
    {
      v44 = (int16x8_t *)&v30[1];
      v45 = v42 + 1;
      v46 = 0uLL;
      v47 = 0uLL;
      v32 -= v45 & 0xFFFFFFF0;
      v30 = (uint16x8_t *)((char *)v30 + 2 * (v45 & 0x1FFFFFFF0));
      v48 = v45 & 0x1FFFFFFF0;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      do
      {
        v55 = v44[-1];
        v56 = *v44;
        v57 = (uint32x4_t)vmull_high_s16(v55, v55);
        v58 = (uint32x4_t)vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v55.i8);
        v59 = (uint32x4_t)vmull_high_s16(v56, v56);
        v60 = (uint32x4_t)vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8);
        v50 = (int64x2_t)vaddw_high_u32((uint64x2_t)v50, v57);
        v49 = (int64x2_t)vaddw_u32((uint64x2_t)v49, *(uint32x2_t *)v57.i8);
        v47 = (int64x2_t)vaddw_high_u32((uint64x2_t)v47, v58);
        v46 = (int64x2_t)vaddw_u32((uint64x2_t)v46, *(uint32x2_t *)v58.i8);
        v54 = (int64x2_t)vaddw_high_u32((uint64x2_t)v54, v59);
        v53 = (int64x2_t)vaddw_u32((uint64x2_t)v53, *(uint32x2_t *)v59.i8);
        v52 = (int64x2_t)vaddw_high_u32((uint64x2_t)v52, v60);
        v51 = (int64x2_t)vaddw_u32((uint64x2_t)v51, *(uint32x2_t *)v60.i8);
        v44 += 2;
        v48 -= 16;
      }
      while (v48);
      v43 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v51, v46), vaddq_s64(v53, v49)), vaddq_s64(vaddq_s64(v52, v47), vaddq_s64(v54, v50))));
      if (v45 == (v45 & 0x1FFFFFFF0))
        goto LABEL_15;
    }
    else
    {
      v43 = 0;
    }
    do
    {
      v61 = v30->i16[0];
      v30 = (uint16x8_t *)((char *)v30 + 2);
      v43 += (v61 * v61);
      --v32;
    }
    while (v32);
LABEL_15:
    v37 += v43;
  }
LABEL_16:
  if (v28 >= 8)
  {
    v62 = 0uLL;
    v63 = v28;
    v64 = 0uLL;
    v65 = v10;
    do
    {
      v66 = v63;
      v67 = *(int16x8_t *)v65->i8;
      v65 += 2;
      v68 = v67;
      v62 = (int64x2_t)vpadalq_u32((uint64x2_t)v62, (uint32x4_t)vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v68.i8));
      v64 = (int64x2_t)vpadalq_u32((uint64x2_t)v64, (uint32x4_t)vmull_high_s16(v68, v68));
      v63 -= 8;
    }
    while (v66 > 15);
    v69 = vaddvq_s64(vaddq_s64(v64, v62));
    if (v63 + 8 < 9)
      goto LABEL_30;
    if ((int)v28 >= 15)
      v70 = 15;
    else
      v70 = v28;
    v71 = v28 - (((_DWORD)v28 - v70 + 7) & 0xFFFFFFF8) - 9;
    if (v71 >= 0xF)
    {
      v73 = (int16x8_t *)&v65[2];
      v74 = v71 + 1;
      v75 = 0uLL;
      v76 = 0uLL;
      v63 -= v74 & 0xFFFFFFF0;
      v65 = (int16x4_t *)((char *)v65 + 2 * (v74 & 0x1FFFFFFF0));
      v77 = v74 & 0x1FFFFFFF0;
      v78 = 0uLL;
      v79 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      v82 = 0uLL;
      v83 = 0uLL;
      do
      {
        v84 = v73[-1];
        v85 = *v73;
        v86 = (uint32x4_t)vmull_high_s16(v84, v84);
        v87 = (uint32x4_t)vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8);
        v88 = (uint32x4_t)vmull_high_s16(v85, v85);
        v89 = (uint32x4_t)vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v85.i8);
        v79 = (int64x2_t)vaddw_high_u32((uint64x2_t)v79, v86);
        v78 = (int64x2_t)vaddw_u32((uint64x2_t)v78, *(uint32x2_t *)v86.i8);
        v76 = (int64x2_t)vaddw_high_u32((uint64x2_t)v76, v87);
        v75 = (int64x2_t)vaddw_u32((uint64x2_t)v75, *(uint32x2_t *)v87.i8);
        v83 = (int64x2_t)vaddw_high_u32((uint64x2_t)v83, v88);
        v82 = (int64x2_t)vaddw_u32((uint64x2_t)v82, *(uint32x2_t *)v88.i8);
        v81 = (int64x2_t)vaddw_high_u32((uint64x2_t)v81, v89);
        v80 = (int64x2_t)vaddw_u32((uint64x2_t)v80, *(uint32x2_t *)v89.i8);
        v73 += 2;
        v77 -= 16;
      }
      while (v77);
      v72 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v80, v75), vaddq_s64(v82, v78)), vaddq_s64(vaddq_s64(v81, v76), vaddq_s64(v83, v79))));
      if (v74 == (v74 & 0x1FFFFFFF0))
        goto LABEL_29;
    }
    else
    {
      v72 = 0;
    }
    do
    {
      v90 = v65->i16[0];
      v65 = (int16x4_t *)((char *)v65 + 2);
      v72 += (v90 * v90);
      --v63;
    }
    while (v63);
LABEL_29:
    v69 += v72;
    goto LABEL_30;
  }
  if (v28 > 3)
  {
    v155 = (int64x2_t)vpaddlq_u32((uint32x4_t)vmull_s16(*v10, *v10));
    v156 = (v28 - 4);
    v162 = v10;
    v186 = v10 + 1;
    if (v156 >= 0x10)
    {
      v225 = 0uLL;
      v226 = 0uLL;
      v188 = v156 - (v156 & 0xFFFFFFF0);
      v186 = (int16x4_t *)((char *)v186 + 2 * (v156 & 0xFFFFFFF0));
      v227 = (int16x8_t *)&v10[3];
      v228 = v156 & 0xFFFFFFF0;
      v229 = 0uLL;
      v230 = 0uLL;
      v231 = 0uLL;
      v232 = 0uLL;
      v233 = 0uLL;
      v234 = 0uLL;
      do
      {
        v235 = v227[-1];
        v236 = *v227;
        v237 = (uint32x4_t)vmull_high_s16(v235, v235);
        v238 = (uint32x4_t)vmull_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v235.i8);
        v239 = (uint32x4_t)vmull_high_s16(v236, v236);
        v240 = (uint32x4_t)vmull_s16(*(int16x4_t *)v236.i8, *(int16x4_t *)v236.i8);
        v230 = (int64x2_t)vaddw_high_u32((uint64x2_t)v230, v237);
        v229 = (int64x2_t)vaddw_u32((uint64x2_t)v229, *(uint32x2_t *)v237.i8);
        v226 = (int64x2_t)vaddw_high_u32((uint64x2_t)v226, v238);
        v225 = (int64x2_t)vaddw_u32((uint64x2_t)v225, *(uint32x2_t *)v238.i8);
        v234 = (int64x2_t)vaddw_high_u32((uint64x2_t)v234, v239);
        v233 = (int64x2_t)vaddw_u32((uint64x2_t)v233, *(uint32x2_t *)v239.i8);
        v232 = (int64x2_t)vaddw_high_u32((uint64x2_t)v232, v240);
        v231 = (int64x2_t)vaddw_u32((uint64x2_t)v231, *(uint32x2_t *)v240.i8);
        v227 += 2;
        v228 -= 16;
      }
      while (v228);
      v187 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v231, v225), vaddq_s64(v233, v229)), vaddq_s64(vaddq_s64(v232, v226), vaddq_s64(v234, v230))));
      if ((v156 & 0xFFFFFFF0) == v156)
        goto LABEL_99;
    }
    else
    {
      v187 = 0;
      v188 = v28 - 4;
    }
    do
    {
      v241 = v186->i16[0];
      v186 = (int16x4_t *)((char *)v186 + 2);
      v187 += (v241 * v241);
      --v188;
    }
    while (v188);
LABEL_99:
    v69 = vaddvq_s64(v155) + v187;
    goto LABEL_100;
  }
  v160 = (v28 - 1);
  if (v160 >= 0xF)
  {
    v189 = v160 + 1;
    v190 = 0uLL;
    v191 = 0uLL;
    v192 = (v160 + 1) & 0x1FFFFFFF0;
    v161 = v28 - v192;
    v163 = (int16x4_t *)((char *)v10 + 2 * v192);
    v162 = v10;
    v193 = (int16x8_t *)&v10[2];
    v194 = v192;
    v195 = 0uLL;
    v196 = 0uLL;
    v197 = 0uLL;
    v198 = 0uLL;
    v199 = 0uLL;
    v200 = 0uLL;
    do
    {
      v201 = v193[-1];
      v202 = *v193;
      v203 = (uint32x4_t)vmull_high_s16(v201, v201);
      v204 = (uint32x4_t)vmull_s16(*(int16x4_t *)v201.i8, *(int16x4_t *)v201.i8);
      v205 = (uint32x4_t)vmull_high_s16(v202, v202);
      v206 = (uint32x4_t)vmull_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v202.i8);
      v196 = (int64x2_t)vaddw_high_u32((uint64x2_t)v196, v203);
      v195 = (int64x2_t)vaddw_u32((uint64x2_t)v195, *(uint32x2_t *)v203.i8);
      v191 = (int64x2_t)vaddw_high_u32((uint64x2_t)v191, v204);
      v190 = (int64x2_t)vaddw_u32((uint64x2_t)v190, *(uint32x2_t *)v204.i8);
      v200 = (int64x2_t)vaddw_high_u32((uint64x2_t)v200, v205);
      v199 = (int64x2_t)vaddw_u32((uint64x2_t)v199, *(uint32x2_t *)v205.i8);
      v198 = (int64x2_t)vaddw_high_u32((uint64x2_t)v198, v206);
      v197 = (int64x2_t)vaddw_u32((uint64x2_t)v197, *(uint32x2_t *)v206.i8);
      v193 += 2;
      v194 -= 16;
    }
    while (v194);
    v69 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v197, v190), vaddq_s64(v199, v195)), vaddq_s64(vaddq_s64(v198, v191), vaddq_s64(v200, v196))));
    if (v189 == v192)
      goto LABEL_100;
  }
  else
  {
    v69 = 0;
    v161 = v28;
    v162 = v10;
    v163 = v10;
  }
  do
  {
    v207 = v163->i16[0];
    v163 = (int16x4_t *)((char *)v163 + 2);
    v69 += (v207 * v207);
    --v161;
  }
  while (v161);
LABEL_100:
  v39 = v252;
  v38 = v253;
  v40 = v251;
  v10 = v162;
LABEL_30:
  v91 = 0;
  v92 = v37 - v69;
  v93 = v28;
  do
  {
    *(int16x8_t *)((char *)&v255 + v91 * 8) = vqmovn_high_s32(vqmovn_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)&v255.i8[v91 * 8], *(int16x4_t *)&v255.i8[v91 * 8]), v10[v91], v10[v91])), vmlsl_high_s16(vmull_high_s16(*(int16x8_t *)((char *)&v255 + v91 * 8), *(int16x8_t *)((char *)&v255 + v91 * 8)), *(int16x8_t *)v10[v91].i8, *(int16x8_t *)v10[v91].i8));
    v91 += 2;
    v93 -= 8;
  }
  while (v93);
  if ((int)(v29 << 24) <= 0)
  {
    v24 = 0;
    LODWORD(v99) = *(_DWORD *)(v38 + 16920);
    v101 = 0x7FFFFFFFFFFFFFFFLL;
    v26 = -1;
  }
  else
  {
    v243 = v12;
    v249 = 0;
    v94 = 0;
    v95 = 32 * v92;
    v96 = (char)v29;
    v97 = *(_QWORD *)&av1_wedge_params_lookup[8 * v40 + 6];
    v98 = (double)(int)v28;
    v99 = *(int *)(v38 + 16920);
    v100 = v10 + 2;
    v101 = 0x7FFFFFFFFFFFFFFFLL;
    v247 = -1;
    v102 = 0uLL;
    v244 = v10 + 2;
    v245 = v97;
    do
    {
      v103 = *(int8x16_t **)(v97 + 8 * v94);
      v104 = &v255;
      v105 = 0uLL;
      v106 = 0uLL;
      v107 = 0uLL;
      v108 = 0uLL;
      v109 = v28;
      do
      {
        v110 = *(int16x8_t *)v104;
        v111 = (int16x8_t)v104[1];
        v104 += 2;
        v112 = *v103++;
        v113 = vmovl_s8(*(int8x8_t *)v112.i8);
        v114 = vmovl_high_s8(v112);
        v105 = vmlal_s16(v105, *(int16x4_t *)v110.i8, *(int16x4_t *)v113.i8);
        v106 = vmlal_high_s16(v106, v110, v113);
        v107 = vmlal_s16(v107, *(int16x4_t *)v111.i8, *(int16x4_t *)v114.i8);
        v108 = vmlal_high_s16(v108, v111, v114);
        v109 -= 16;
      }
      while (v109);
      v115 = 0;
      v116 = vaddvq_s64(vpadalq_s32(vpadalq_s32(vpadalq_s32(vpaddlq_s32(v106), v105), v107), v108));
      v117 = 0uLL;
      v118 = v100;
      v119 = v8 + 2;
      v120 = 0uLL;
      do
      {
        v121 = *(int16x8_t *)v118[-2].i8;
        v122 = *(int16x8_t *)v119[-2].i8;
        v123 = *(int8x16_t *)(*(_QWORD *)(v97 + ((unint64_t)(v116 > v95) << 7) + 8 * v94) + v115);
        v124 = (int16x8_t)vzip1q_s8(v123, v102);
        v125 = (int16x8_t)vzip2q_s8(v123, v102);
        v126 = vshll_n_s16(*(int16x4_t *)v121.i8, 6uLL);
        v127 = vmlal_high_s16(vshll_high_n_s16(v121, 6uLL), v124, v122);
        *(int16x4_t *)v122.i8 = vqmovn_s32(vmlal_s16(v126, *(int16x4_t *)v124.i8, *(int16x4_t *)v122.i8));
        *(int16x4_t *)v127.i8 = vqmovn_s32(v127);
        v128 = vqmovn_s32(vmlal_s16(vshll_n_s16(*v118, 6uLL), *(int16x4_t *)v125.i8, *v119));
        v129 = vqmovn_s32(vmlal_high_s16(vshll_high_n_s16(*(int16x8_t *)v118->i8, 6uLL), v125, *(int16x8_t *)v119->i8));
        v117 = (int64x2_t)vpadalq_u32((uint64x2_t)v117, (uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v127.i8), *(int16x4_t *)v122.i8, *(int16x4_t *)v122.i8));
        v120 = (int64x2_t)vpadalq_u32((uint64x2_t)v120, (uint32x4_t)vmlal_s16(vmull_s16(v129, v129), v128, v128));
        v115 += 16;
        v119 += 4;
        v118 += 4;
      }
      while (v115 < v28);
      v130 = v116 > v95;
      v131 = vaddvq_s64(vaddq_s64(v120, v117));
      v132 = (unint64_t)(v131 + 2048) >> 12;
      if ((unint64_t)(v131 + 2048) >= 0x1000)
      {
        v135 = *(__int16 *)(*(_QWORD *)(v38 + 128) + 2);
        v136 = (double)(v135 >> 3);
        if (v135 <= 15)
          v136 = 1.0;
        v137 = (double)v132 / v98;
        v138 = log2(v137 / (v136 * v136));
        v40 = v251;
        v139 = fmax(v138, -14.999999);
        if (v139 >= 15.999999)
          v140 = 62.999998;
        else
          v140 = v139 + 15.5 + v139 + 15.5;
        v141 = vcvtmd_s64_f64(v140);
        v142 = v140 - (double)v141;
        v143 = v141 - 1;
        v144 = (double *)((char *)&interp_rgrid_curv + 520 * bsize_curvfit_model_cat_lookup[v251] + 8 * v143);
        v145 = (v144[1]
              + v142
              * 0.5
              * (v144[2]
               - *v144
               + v142
               * (v144[1] * -5.0
                + *v144 * 2.0
                + v144[2] * 4.0
                - v144[3]
                + v142 * (v144[3] + (v144[1] - v144[2]) * 3.0 - *v144))))
             * v98;
        if (v145 >= 0.0)
          v146 = v145 + 0.5;
        else
          v146 = 0.5;
        if ((int)v146)
        {
          v147 = (double *)((char *)&interp_dgrid_curv + 520 * (v137 > 16.0) + 8 * v143);
          v148 = v137
               * (v147[1]
                + v142
                * 0.5
                * (v147[2]
                 - *v147
                 + v142
                 * (v147[1] * -5.0
                  + *v147 * 2.0
                  + v147[2] * 4.0
                  - v147[3]
                  + v142 * (v147[3] + (v147[1] - v147[2]) * 3.0 - *v147))))
               * v98;
          if (v148 >= 0.0)
            v149 = v148 + 0.5;
          else
            v149 = 0.5;
          v150 = ((uint64_t)v149 << 7) + (((int)v99 * (uint64_t)(int)v146 + 256) >> 9);
          v151 = v150 < v132 << 11;
          if (v150 >= v132 << 11)
            v133 = 0;
          else
            v133 = (int)v146;
          if (v151)
            v134 = (uint64_t)v149;
          else
            v134 = 16 * v132;
        }
        else
        {
          v133 = 0;
          v134 = 16 * v132;
        }
        v39 = v252;
        v38 = v253;
        v100 = v244;
        v97 = v245;
        v102 = 0uLL;
      }
      else
      {
        v133 = 0;
        v134 = 0;
      }
      v152 = (((*(int *)(v38 + (v40 << 6) + 4 * v94 + 33560) + (uint64_t)v133) * v99 + 256) >> 9) + (v134 << 7);
      if (v152 < v101)
      {
        *v39 = v132;
        v247 = v94;
        v249 = v130;
        v101 = v152;
      }
      ++v94;
    }
    while (v96 > v94);
    v12 = v243;
    v24 = v249;
    v26 = v247;
  }
  result = v101 - (((int)v99 * (uint64_t)*(int *)(v38 + (v40 << 6) + 4 * v26 + 33560) + 256) >> 9);
LABEL_66:
  *(_BYTE *)(v12 + 81) = v24;
  *(_BYTE *)(v12 + 80) = v26;
  return result;
}

uint64_t pick_interinter_seg(uint64_t a1, uint64_t a2)
{
  int64_t *v2;
  int16x4_t *v3;
  int16x4_t *v4;
  int16x4_t *v5;
  int16x4_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint8x16_t *v18;
  double v19;
  unint64_t v20;
  int16x4_t *v21;
  int16x4_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  int v46;
  double v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  int v52;
  double *v53;
  double v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  int16x4_t *v58;
  int16x4_t *v59;
  int64x2_t v60;
  int64x2_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  int v81;
  double v82;
  uint64_t v83;
  double *v84;
  double v85;
  double v86;
  int v87;
  double *v88;
  double v89;
  double v90;
  uint64_t v91;
  char v93;
  int16x4_t *v94;
  int16x4_t *v95;
  uint64_t v96;
  int64_t *v97;
  int *v98;
  uint8x16_t __src[2048];
  uint64_t v100;

  MEMORY[0x24BDAC7A8](a1, a2);
  v97 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v100 = *MEMORY[0x24BDAC8D0];
  v14 = v13;
  v15 = block_size_wide_6[v13];
  v16 = block_size_high_5[v13];
  v96 = **(_QWORD **)(v11 + 8280);
  v93 = num_pels_log2_lookup_4[v13];
  v17 = 1 << v93;
  v18 = *(uint8x16_t **)(v11 + 11184);
  v19 = (double)(1 << v93);
  av1_build_compound_diffwtd_mask_neon(v18, 0, v9, v15, v7, v15, v16, v15);
  v20 = 0;
  v94 = v4;
  v95 = v6;
  v21 = v4 + 2;
  v22 = v6 + 2;
  v23 = 0uLL;
  v24 = 0uLL;
  do
  {
    v25 = *(int16x8_t *)v22[-2].i8;
    v26 = *(int16x8_t *)v21[-2].i8;
    v27 = (int8x16_t)v18[v20 / 0x10];
    v28 = (int16x8_t)vzip1q_s8(v27, (int8x16_t)0);
    v29 = (int16x8_t)vzip2q_s8(v27, (int8x16_t)0);
    v30 = vshll_n_s16(*(int16x4_t *)v25.i8, 6uLL);
    v31 = vmlal_high_s16(vshll_high_n_s16(v25, 6uLL), v28, v26);
    *(int16x4_t *)v26.i8 = vqmovn_s32(vmlal_s16(v30, *(int16x4_t *)v28.i8, *(int16x4_t *)v26.i8));
    *(int16x4_t *)v31.i8 = vqmovn_s32(v31);
    v32 = vqmovn_s32(vmlal_s16(vshll_n_s16(*v22, 6uLL), *(int16x4_t *)v29.i8, *v21));
    v33 = vqmovn_s32(vmlal_high_s16(vshll_high_n_s16(*(int16x8_t *)v22->i8, 6uLL), v29, *(int16x8_t *)v21->i8));
    v23 = (int64x2_t)vpadalq_u32((uint64x2_t)v23, (uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8), *(int16x4_t *)v26.i8, *(int16x4_t *)v26.i8));
    v24 = (int64x2_t)vpadalq_u32((uint64x2_t)v24, (uint32x4_t)vmlal_s16(vmull_s16(v33, v33), v32, v32));
    v20 += 16;
    v21 += 4;
    v22 += 4;
  }
  while ((uint64_t)v20 < v17);
  v34 = (int *)(v12 + 16920);
  v35 = vaddvq_s64(vaddq_s64(v24, v23));
  v36 = (unint64_t)(v35 + 2048) >> 12;
  if ((unint64_t)(v35 + 2048) >= 0x1000)
  {
    v39 = *(__int16 *)(*(_QWORD *)(v12 + 128) + 2);
    v40 = (double)(v39 >> 3);
    if (v39 <= 15)
      v40 = 1.0;
    v41 = (double)v36 / v19;
    v42 = fmax(log2(v41 / (v40 * v40)), -14.999999);
    v43 = v42 + 15.5 + v42 + 15.5;
    v44 = v42 < 15.999999;
    v45 = 62.999998;
    if (v44)
      v45 = v43;
    v46 = vcvtmd_s64_f64(v45);
    v47 = v45 - (double)v46;
    v48 = v46 - 1;
    v49 = (double *)((char *)&interp_rgrid_curv + 520 * bsize_curvfit_model_cat_lookup[v14] + 8 * v48);
    v50 = (v49[1]
         + v47
         * 0.5
         * (v49[2]
          - *v49
          + v47 * (v49[1] * -5.0 + *v49 * 2.0 + v49[2] * 4.0 - v49[3] + v47 * (v49[3] + (v49[1] - v49[2]) * 3.0 - *v49))))
        * v19;
    if (v50 >= 0.0)
      v51 = v50 + 0.5;
    else
      v51 = 0.5;
    v52 = (int)v51;
    if ((int)v51)
    {
      v53 = (double *)((char *)&interp_dgrid_curv + 520 * (v41 > 16.0) + 8 * v48);
      v54 = v41
          * (v53[1]
           + v47
           * 0.5
           * (v53[2]
            - *v53
            + v47
            * (v53[1] * -5.0 + *v53 * 2.0 + v53[2] * 4.0 - v53[3] + v47 * (v53[3] + (v53[1] - v53[2]) * 3.0 - *v53))))
          * v19;
      if (v54 >= 0.0)
        v55 = v54 + 0.5;
      else
        v55 = 0.5;
      v38 = (uint64_t)v55;
      v37 = v52;
      if (((uint64_t)v55 << 7) + ((*v34 * (uint64_t)v52 + 256) >> 9) >= v36 << 11)
      {
        v38 = 16 * v36;
        v37 = 0;
      }
    }
    else
    {
      v37 = 0;
      v38 = 16 * v36;
    }
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v98 = (int *)(v12 + 16920);
  v56 = ((v37 * *v34 + 256) >> 9) + (v38 << 7);
  if (v56 != 0x7FFFFFFFFFFFFFFFLL)
    *v97 = v36;
  av1_build_compound_diffwtd_mask_neon(__src, 1, v10, v15, v8, v15, v16, v15);
  v57 = 0;
  v58 = v94 + 2;
  v59 = v95 + 2;
  v60 = 0uLL;
  v61 = 0uLL;
  do
  {
    v62 = *(int16x8_t *)v59[-2].i8;
    v63 = *(int16x8_t *)v58[-2].i8;
    v64 = (int8x16_t)__src[v57 / 0x10];
    v65 = (int16x8_t)vzip1q_s8(v64, (int8x16_t)0);
    v66 = (int16x8_t)vzip2q_s8(v64, (int8x16_t)0);
    v67 = vshll_n_s16(*(int16x4_t *)v62.i8, 6uLL);
    v68 = vmlal_high_s16(vshll_high_n_s16(v62, 6uLL), v65, v63);
    *(int16x4_t *)v63.i8 = vqmovn_s32(vmlal_s16(v67, *(int16x4_t *)v65.i8, *(int16x4_t *)v63.i8));
    *(int16x4_t *)v68.i8 = vqmovn_s32(v68);
    v69 = vqmovn_s32(vmlal_s16(vshll_n_s16(*v59, 6uLL), *(int16x4_t *)v66.i8, *v58));
    v70 = vqmovn_s32(vmlal_high_s16(vshll_high_n_s16(*(int16x8_t *)v59->i8, 6uLL), v66, *(int16x8_t *)v58->i8));
    v60 = (int64x2_t)vpadalq_u32((uint64x2_t)v60, (uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v68.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v63.i8));
    v61 = (int64x2_t)vpadalq_u32((uint64x2_t)v61, (uint32x4_t)vmlal_s16(vmull_s16(v70, v70), v69, v69));
    v57 += 16;
    v58 += 4;
    v59 += 4;
  }
  while ((uint64_t)v57 < v17);
  v71 = vaddvq_s64(vaddq_s64(v61, v60));
  v72 = (unint64_t)(v71 + 2048) >> 12;
  if ((unint64_t)(v71 + 2048) >= 0x1000)
  {
    v75 = *(__int16 *)(*(_QWORD *)(v12 + 128) + 2);
    v76 = (double)(v75 >> 3);
    if (v75 <= 15)
      v76 = 1.0;
    v77 = (double)v72 / v19;
    v78 = fmax(log2(v77 / (v76 * v76)), -14.999999);
    v79 = v78 + 15.5 + v78 + 15.5;
    v44 = v78 < 15.999999;
    v80 = 62.999998;
    if (v44)
      v80 = v79;
    v81 = vcvtmd_s64_f64(v80);
    v82 = v80 - (double)v81;
    v83 = v81 - 1;
    v84 = (double *)((char *)&interp_rgrid_curv + 520 * bsize_curvfit_model_cat_lookup[v14] + 8 * v83);
    v85 = (v84[1]
         + v82
         * 0.5
         * (v84[2]
          - *v84
          + v82 * (v84[1] * -5.0 + *v84 * 2.0 + v84[2] * 4.0 - v84[3] + v82 * (v84[3] + (v84[1] - v84[2]) * 3.0 - *v84))))
        * v19;
    if (v85 >= 0.0)
      v86 = v85 + 0.5;
    else
      v86 = 0.5;
    v87 = (int)v86;
    if ((int)v86)
    {
      v88 = (double *)((char *)&interp_dgrid_curv + 520 * (v77 > 16.0) + 8 * v83);
      v89 = v77
          * (v88[1]
           + v82
           * 0.5
           * (v88[2]
            - *v88
            + v82
            * (v88[1] * -5.0 + *v88 * 2.0 + v88[2] * 4.0 - v88[3] + v82 * (v88[3] + (v88[1] - v88[2]) * 3.0 - *v88))))
          * v19;
      if (v89 >= 0.0)
        v90 = v89 + 0.5;
      else
        v90 = 0.5;
      v74 = (uint64_t)v90;
      v73 = v87;
      if (((uint64_t)v90 << 7) + ((*v98 * (uint64_t)v87 + 256) >> 9) >= v72 << 11)
      {
        v74 = 16 * v72;
        v73 = 0;
      }
    }
    else
    {
      v73 = 0;
      v74 = 16 * v72;
    }
  }
  else
  {
    v73 = 0;
    v74 = 0;
  }
  v91 = ((v73 * *v98 + 256) >> 9) + (v74 << 7);
  if (v91 >= v56)
  {
    *(_BYTE *)(v96 + 82) = 0;
  }
  else
  {
    *v97 = v72;
    *(_BYTE *)(v96 + 82) = 1;
    memcpy(*(void **)(v12 + 11184), __src, 2 << v93);
    return v91;
  }
  return v56;
}

uint64_t av1_setup_shared_coeff_buffer(uint64_t a1, unint64_t *a2, jmp_buf a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;

  v5 = *(unsigned __int8 *)(a1 + 77);
  v6 = 1 << num_pels_log2_lookup_5[*(unsigned __int8 *)(a1 + 28)];
  v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a1 + 100);
  v9 = 4 * v6;
  if (v9 > 0x1FFFFFFD9)
  {
    *a2 = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->coeff_buf[i]");
    a2[3] = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->qcoeff_buf[i]");
LABEL_15:
    a2[6] = 0;
    goto LABEL_16;
  }
  v10 = v9 + 39;
  v11 = malloc_type_malloc(v9 + 39, 0x70F2D1FBuLL);
  if (v11)
  {
    v12 = ((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v12 - 8) = v11;
    *a2 = v12;
    if (v12)
    {
      v13 = malloc_type_malloc(v10, 0x70F2D1FBuLL);
      if (v13)
        goto LABEL_6;
LABEL_13:
      a2[3] = 0;
LABEL_14:
      aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->qcoeff_buf[i]");
      result = (uint64_t)malloc_type_malloc(v10, 0x70F2D1FBuLL);
      if (!result)
        goto LABEL_15;
      goto LABEL_8;
    }
  }
  else
  {
    *a2 = 0;
  }
  aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->coeff_buf[i]");
  v13 = malloc_type_malloc(v10, 0x70F2D1FBuLL);
  if (!v13)
    goto LABEL_13;
LABEL_6:
  v14 = ((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v14 - 8) = v13;
  a2[3] = v14;
  if (!v14)
    goto LABEL_14;
  result = (uint64_t)malloc_type_malloc(v10, 0x70F2D1FBuLL);
  if (!result)
    goto LABEL_15;
LABEL_8:
  v16 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v16 - 8) = result;
  a2[6] = v16;
  if (v16)
  {
    if (v5)
      return result;
    goto LABEL_18;
  }
LABEL_16:
  result = aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->dqcoeff_buf[i]");
  if (v5)
    return result;
LABEL_18:
  v17 = 4 * (v6 >> (v8 + v7));
  if (v17 > 0x1FFFFFFD9)
  {
    a2[1] = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->coeff_buf[i]");
    a2[4] = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->qcoeff_buf[i]");
    a2[7] = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->dqcoeff_buf[i]");
    a2[2] = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->coeff_buf[i]");
    a2[5] = 0;
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->qcoeff_buf[i]");
LABEL_43:
    a2[8] = 0;
    return aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->dqcoeff_buf[i]");
  }
  v18 = v17 + 39;
  v19 = malloc_type_malloc(v17 + 39, 0x70F2D1FBuLL);
  if (v19)
  {
    v20 = ((unint64_t)v19 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v20 - 8) = v19;
    a2[1] = v20;
    if (v20)
    {
      v21 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
      if (v21)
        goto LABEL_23;
LABEL_35:
      a2[4] = 0;
      goto LABEL_36;
    }
  }
  else
  {
    a2[1] = 0;
  }
  aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->coeff_buf[i]");
  v21 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
  if (!v21)
    goto LABEL_35;
LABEL_23:
  v22 = ((unint64_t)v21 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v22 - 8) = v21;
  a2[4] = v22;
  if (v22)
  {
    v23 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
    if (v23)
      goto LABEL_25;
LABEL_37:
    a2[7] = 0;
    goto LABEL_38;
  }
LABEL_36:
  aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->qcoeff_buf[i]");
  v23 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
  if (!v23)
    goto LABEL_37;
LABEL_25:
  v24 = ((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v24 - 8) = v23;
  a2[7] = v24;
  if (v24)
  {
    v25 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
    if (v25)
      goto LABEL_27;
LABEL_39:
    a2[2] = 0;
    goto LABEL_40;
  }
LABEL_38:
  aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->dqcoeff_buf[i]");
  v25 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
  if (!v25)
    goto LABEL_39;
LABEL_27:
  v26 = ((unint64_t)v25 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v26 - 8) = v25;
  a2[2] = v26;
  if (v26)
  {
    v27 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
    if (v27)
      goto LABEL_29;
LABEL_41:
    a2[5] = 0;
LABEL_42:
    aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->qcoeff_buf[i]");
    result = (uint64_t)malloc_type_malloc(v18, 0x70F2D1FBuLL);
    if (!result)
      goto LABEL_43;
    goto LABEL_31;
  }
LABEL_40:
  aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->coeff_buf[i]");
  v27 = malloc_type_malloc(v18, 0x70F2D1FBuLL);
  if (!v27)
    goto LABEL_41;
LABEL_29:
  v28 = ((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v28 - 8) = v27;
  a2[5] = v28;
  if (!v28)
    goto LABEL_42;
  result = (uint64_t)malloc_type_malloc(v18, 0x70F2D1FBuLL);
  if (!result)
    goto LABEL_43;
LABEL_31:
  v29 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v29 - 8) = result;
  a2[8] = v29;
  if (!v29)
    return aom_internal_error((uint64_t)a3, 2, "Failed to allocate shared_bufs->dqcoeff_buf[i]");
  return result;
}

void av1_free_shared_coeff_buffer(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1)
    free(*(void **)(*a1 - 8));
  v2 = a1[3];
  if (v2)
    free(*(void **)(v2 - 8));
  v3 = a1[6];
  if (v3)
    free(*(void **)(v3 - 8));
  *a1 = 0;
  a1[3] = 0;
  a1[6] = 0;
  v4 = a1[1];
  if (v4)
    free(*(void **)(v4 - 8));
  v5 = a1[4];
  if (v5)
    free(*(void **)(v5 - 8));
  v6 = a1[7];
  if (v6)
    free(*(void **)(v6 - 8));
  a1[1] = 0;
  a1[4] = 0;
  a1[7] = 0;
  v7 = a1[2];
  if (v7)
    free(*(void **)(v7 - 8));
  v8 = a1[5];
  if (v8)
    free(*(void **)(v8 - 8));
  v9 = a1[8];
  if (v9)
    free(*(void **)(v9 - 8));
  a1[2] = 0;
  a1[5] = 0;
  a1[8] = 0;
}

int64x2_t *av1_alloc_pmc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  void *v9;
  _OWORD *v10;
  int v11;
  unsigned int v12;
  size_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int64x2_t *v32;
  jmp_buf v33;
  __int128 v34;
  _DWORD v35[50];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 263720;
  memset(v35, 0, 196);
  v34 = 0u;
  memset(v33, 0, sizeof(v33));
  if (!setjmp(&v35[1]))
  {
    v35[0] = 1;
    v9 = malloc_type_malloc(0x217uLL, 0x70F2D1FBuLL);
    if (v9)
    {
      v10 = (_OWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((_QWORD *)v10 - 1) = v9;
      if (v10)
      {
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1E0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1F0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1C0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1D0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1A0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1B0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x180) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x190) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x160) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x170) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x140) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x150) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x120) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x130) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x100) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x110) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xE0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xF0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xC0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xD0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xA0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xB0) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x80) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x90) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
        *v10 = 0u;
        *(_OWORD *)((((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
        v32 = (int64x2_t *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0);
LABEL_10:
        v32[29].i32[0] = 0;
        v11 = *(unsigned __int8 *)(*(_QWORD *)v6 + 77);
        v12 = block_size_high_6[a2] * block_size_wide_7[a2];
        v13 = v12 >> 4;
        v14 = malloc_type_malloc(v13 + 23, 0x70F2D1FBuLL);
        if (v14
          && (v15 = v14,
              v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0),
              *((_QWORD *)v16 - 1) = v15,
              v16))
        {
          v17 = (uint64_t)v16;
          bzero(v16, v13);
          v32[17].i64[1] = v17;
          if (!v32[17].i64[1])
          {
LABEL_18:
            aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->blk_skip");
            v18 = malloc_type_malloc(v13 + 23, 0x70F2D1FBuLL);
            if (!v18)
              goto LABEL_22;
LABEL_19:
            v19 = v18;
            v20 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0);
            *(v20 - 1) = v19;
            if (v20)
            {
              v21 = v20;
              bzero(v20, v13);
              v32[25].i64[1] = (uint64_t)v21;
              if (v32[25].i64[1])
                goto LABEL_24;
LABEL_23:
              aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->tx_type_map");
LABEL_24:
              v32[26].i32[0] = v13;
              v22 = 2 * v13 + 39;
              v23 = v13 + 39;
              v32[18].i64[0] = *a3;
              v32[19].i64[1] = a3[3];
              v32[21].i64[0] = a3[6];
              v24 = malloc_type_malloc(v22, 0x70F2D1FBuLL);
              if (v24)
              {
                *(_QWORD *)((((unint64_t)v24 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v24;
                v32[22].i64[1] = ((unint64_t)v24 + 39) & 0xFFFFFFFFFFFFFFE0;
                if (v32[22].i64[1])
                  goto LABEL_26;
              }
              else
              {
                v32[22].i64[1] = 0;
                if (v32[22].i64[1])
                {
LABEL_26:
                  v25 = malloc_type_malloc(v23, 0x70F2D1FBuLL);
                  if (v25)
                    goto LABEL_27;
                  goto LABEL_48;
                }
              }
              aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->eobs[i]");
              v25 = malloc_type_malloc(v23, 0x70F2D1FBuLL);
              if (v25)
              {
LABEL_27:
                *(_QWORD *)((((unint64_t)v25 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v25;
                v32[24].i64[0] = ((unint64_t)v25 + 39) & 0xFFFFFFFFFFFFFFE0;
                if (v32[24].i64[0])
                  goto LABEL_29;
                goto LABEL_28;
              }
LABEL_48:
              v32[24].i64[0] = 0;
              if (v32[24].i64[0])
              {
LABEL_29:
                if (v11)
                  goto LABEL_37;
                v32[18].i64[1] = a3[1];
                v32[20].i64[0] = a3[4];
                v32[21].i64[1] = a3[7];
                v26 = malloc_type_malloc(v22, 0x70F2D1FBuLL);
                if (v26)
                {
                  *(_QWORD *)((((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v26;
                  v32[23].i64[0] = ((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFFFE0;
                  if (v32[23].i64[0])
                    goto LABEL_33;
                }
                else
                {
                  v32[23].i64[0] = 0;
                  if (v32[23].i64[0])
                  {
LABEL_33:
                    v27 = malloc_type_malloc(v23, 0x70F2D1FBuLL);
                    if (v27)
                    {
                      *(_QWORD *)((((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v27;
                      v32[24].i64[1] = ((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFE0;
                      if (v32[24].i64[1])
                        goto LABEL_56;
                    }
                    else
                    {
                      v32[24].i64[1] = 0;
                      if (v32[24].i64[1])
                      {
LABEL_56:
                        v32[19].i64[0] = a3[2];
                        v32[20].i64[1] = a3[5];
                        v32[22].i64[0] = a3[8];
                        v30 = malloc_type_malloc(v22, 0x70F2D1FBuLL);
                        if (v30)
                        {
                          *(_QWORD *)((((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v30;
                          v32[23].i64[1] = ((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFE0;
                          if (v32[23].i64[1])
                            goto LABEL_59;
                        }
                        else
                        {
                          v32[23].i64[1] = 0;
                          if (v32[23].i64[1])
                          {
LABEL_59:
                            v31 = malloc_type_malloc(v23, 0x70F2D1FBuLL);
                            if (v31)
                            {
                              *(_QWORD *)((((unint64_t)v31 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v31;
                              v32[25].i64[0] = ((unint64_t)v31 + 39) & 0xFFFFFFFFFFFFFFE0;
                              if (v32[25].i64[0])
                                goto LABEL_37;
                            }
                            else
                            {
                              v32[25].i64[0] = 0;
                              if (v32[25].i64[0])
                                goto LABEL_37;
                            }
                            aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->txb_entropy_ctx[i]");
LABEL_37:
                            if (v12 > 0x1000)
                              goto LABEL_65;
                            if (!*(_BYTE *)(a1 + 239535))
                            {
                              v32[16].i64[1] = 0;
                              goto LABEL_64;
                            }
                            v28 = malloc_type_malloc(v12 + 39, 0x70F2D1FBuLL);
                            if (v28)
                            {
                              *(_QWORD *)((((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v28;
                              v32[16].i64[1] = ((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFE0;
                              if (v32[16].i64[1])
                                goto LABEL_42;
                            }
                            else
                            {
                              v32[16].i64[1] = 0;
                              if (v32[16].i64[1])
                              {
LABEL_42:
                                if (*(_BYTE *)(a1 + 239535))
                                {
                                  v29 = malloc_type_malloc(v12 + 39, 0x70F2D1FBuLL);
                                  if (v29)
                                  {
                                    *(_QWORD *)((((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v29;
                                    v32[17].i64[0] = ((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFE0;
                                    if (!v32[17].i64[0])
                                      goto LABEL_67;
                                  }
                                  else
                                  {
                                    v32[17].i64[0] = 0;
                                    if (!v32[17].i64[0])
LABEL_67:
                                      aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->color_index_map[i]");
                                  }
LABEL_65:
                                  v32[27] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
                                  v32[28].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
                                  v32[28].i8[8] = 0;
                                  v32[26].i64[1] = 0x7FFFFFFFLL;
                                  return v32;
                                }
LABEL_64:
                                v32[17].i64[0] = 0;
                                goto LABEL_65;
                              }
                            }
                            aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->color_index_map[i]");
                            goto LABEL_42;
                          }
                        }
                        aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->eobs[i]");
                        goto LABEL_59;
                      }
                    }
                    aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->txb_entropy_ctx[i]");
                    goto LABEL_56;
                  }
                }
                aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->eobs[i]");
                goto LABEL_33;
              }
LABEL_28:
              aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx->txb_entropy_ctx[i]");
              goto LABEL_29;
            }
LABEL_22:
            v32[25].i64[1] = 0;
            if (v32[25].i64[1])
              goto LABEL_24;
            goto LABEL_23;
          }
        }
        else
        {
          v32[17].i64[1] = 0;
          if (!v32[17].i64[1])
            goto LABEL_18;
        }
        v18 = malloc_type_malloc(v13 + 23, 0x70F2D1FBuLL);
        if (!v18)
          goto LABEL_22;
        goto LABEL_19;
      }
      v32 = 0;
    }
    else
    {
      v32 = 0;
    }
    aom_internal_error((uint64_t)v33, 2, "Failed to allocate ctx");
    goto LABEL_10;
  }
  if (*(_BYTE *)(*(_QWORD *)v6 + 77))
    v7 = 1;
  else
    v7 = 3;
  av1_free_pmc(0, v7);
  return 0;
}

void av1_free_pmc(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    LODWORD(v2) = a2;
    v4 = a1[35];
    if (v4)
      free(*(void **)(v4 - 8));
    a1[35] = 0;
    v5 = a1[51];
    if (v5)
      free(*(void **)(v5 - 8));
    if ((int)v2 >= 1)
    {
      v2 = v2;
      v6 = a1 + 48;
      do
      {
        *(v6 - 12) = 0;
        *(v6 - 9) = 0;
        *(v6 - 6) = 0;
        v7 = *(v6 - 3);
        if (v7)
          free(*(void **)(v7 - 8));
        *(v6 - 3) = 0;
        if (*v6)
          free(*(void **)(*v6 - 8));
        *v6++ = 0;
        --v2;
      }
      while (v2);
    }
    v8 = a1[33];
    if (v8)
    {
      free(*(void **)(v8 - 8));
      a1[33] = 0;
    }
    v9 = a1[34];
    if (v9)
    {
      free(*(void **)(v9 - 8));
      a1[34] = 0;
    }
    free((void *)*(a1 - 1));
  }
}

double av1_reset_pmc(uint64_t a1)
{
  double result;

  bzero(*(void **)(a1 + 280), *(int *)(a1 + 416));
  bzero(*(void **)(a1 + 408), *(int *)(a1 + 416));
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 448) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 424) = 0x7FFFFFFFLL;
  return result;
}

double av1_alloc_pc_tree_node(char a1)
{
  void *v2;
  double result;
  void *v4;
  unint64_t v5;

  v2 = malloc_type_malloc(0x6FuLL, 0x70F2D1FBuLL);
  if (v2)
  {
    v4 = v2;
    v5 = ((unint64_t)v2 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v5 - 8) = v4;
    if (v5)
    {
      result = 0.0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 1) = a1;
    }
  }
  return result;
}

void av1_free_pc_tree_recursive(char *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    return;
  v9 = a4 | a3;
  if ((_DWORD)a5 == 2 && !v9)
  {
    av1_free_pmc(*((_QWORD **)a1 + 1), a2);
    *((_QWORD *)a1 + 1) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 2), a2);
    *((_QWORD *)a1 + 2) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 4), a2);
    *((_QWORD *)a1 + 4) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 3), a2);
    *((_QWORD *)a1 + 3) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 5), a2);
    *((_QWORD *)a1 + 5) = 0;
    v10 = *((_QWORD *)a1 + 6);
    if (v10)
    {
      av1_free_pc_tree_recursive(v10, a2, 0, 0, 2);
      *((_QWORD *)a1 + 6) = 0;
    }
    v11 = *((_QWORD *)a1 + 7);
    if (v11)
    {
      av1_free_pc_tree_recursive(v11, a2, 0, 0, 2);
      *((_QWORD *)a1 + 7) = 0;
    }
    v12 = *((_QWORD *)a1 + 8);
    if (v12)
    {
      av1_free_pc_tree_recursive(v12, a2, 0, 0, 2);
      *((_QWORD *)a1 + 8) = 0;
    }
    v13 = *((_QWORD *)a1 + 9);
    if (v13)
    {
      av1_free_pc_tree_recursive(v13, a2, 0, 0, 2);
      *((_QWORD *)a1 + 9) = 0;
    }
    goto LABEL_36;
  }
  v14 = *a1;
  if (a4)
  {
    v15 = a3 == 0;
    if (a3)
      goto LABEL_14;
LABEL_20:
    if (a3 && v14 == 2)
    {
      av1_free_pmc(*((_QWORD **)a1 + 2), a2);
      *((_QWORD *)a1 + 2) = 0;
      v16 = (_QWORD **)(a1 + 24);
      goto LABEL_23;
    }
LABEL_32:
    av1_free_pmc(*((_QWORD **)a1 + 2), a2);
    *((_QWORD *)a1 + 2) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 4), a2);
    *((_QWORD *)a1 + 4) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 3), a2);
    *((_QWORD *)a1 + 3) = 0;
    av1_free_pmc(*((_QWORD **)a1 + 5), a2);
    *((_QWORD *)a1 + 5) = 0;
    if (v14 == 3 && !v15)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (a3 && !*a1)
  {
    v15 = 0;
    goto LABEL_32;
  }
  av1_free_pmc(*((_QWORD **)a1 + 1), a2);
  *((_QWORD *)a1 + 1) = 0;
  v15 = a3 == 0;
  if (!a3)
    goto LABEL_20;
LABEL_14:
  if (v14 != 1)
    goto LABEL_20;
  av1_free_pmc(*((_QWORD **)a1 + 4), a2);
  *((_QWORD *)a1 + 4) = 0;
  v16 = (_QWORD **)(a1 + 40);
LABEL_23:
  av1_free_pmc(*v16, a2);
  *v16 = 0;
LABEL_24:
  v17 = *((_QWORD *)a1 + 6);
  if (v17)
  {
    av1_free_pc_tree_recursive(v17, a2, 0, 0, a5);
    *((_QWORD *)a1 + 6) = 0;
  }
  v18 = *((_QWORD *)a1 + 7);
  if (v18)
  {
    av1_free_pc_tree_recursive(v18, a2, 0, 0, a5);
    *((_QWORD *)a1 + 7) = 0;
  }
  v19 = *((_QWORD *)a1 + 8);
  if (v19)
  {
    av1_free_pc_tree_recursive(v19, a2, 0, 0, a5);
    *((_QWORD *)a1 + 8) = 0;
  }
  v20 = *((_QWORD *)a1 + 9);
  if (v20)
  {
    av1_free_pc_tree_recursive(v20, a2, 0, 0, a5);
    *((_QWORD *)a1 + 9) = 0;
  }
LABEL_34:
  if (!v9)
LABEL_36:
    free(*((void **)a1 - 1));
}

uint64_t av1_setup_sms_tree(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void ***v3;
  _BOOL4 v4;
  _BOOL4 v5;
  unsigned int v6;
  void **v7;
  uint64_t result;
  int v9;
  int v10;
  void *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  __int8 v18;
  unsigned int v19;
  uint64_t v20;
  int64x2_t *v21;
  _BYTE *v22;
  BOOL v23;

  v2 = a1 + 263720;
  if (!*(_DWORD *)(a1 + 264592))
    return 0;
  v3 = (void ***)(a2 + 148200);
  if (*(_DWORD *)(a1 + 265592) == 1)
  {
    v4 = 0;
    v5 = *(unsigned __int8 *)(*(_QWORD *)v2 + 28) == 15;
    v6 = 1;
    v7 = *v3;
    if (!*v3)
      goto LABEL_14;
    goto LABEL_13;
  }
  v9 = *(unsigned __int8 *)(a1 + 637416);
  v5 = *(unsigned __int8 *)(*(_QWORD *)v2 + 28) == 15;
  if (*(_BYTE *)(*(_QWORD *)v2 + 28) == 15)
    v10 = 1365;
  else
    v10 = 341;
  v4 = v9 != 1;
  if (v9 == 1)
    v6 = 1;
  else
    v6 = v10;
  v7 = *v3;
  if (*v3)
LABEL_13:
    free(*(v7 - 1));
LABEL_14:
  v11 = malloc_type_malloc(120 * v6 + 23, 0x70F2D1FBuLL);
  if (v11 && (v12 = (_BYTE *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v12 - 1) = v11, v12))
  {
    bzero((void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0), 120 * v6);
    *v3 = (void **)v12;
    if (v4)
    {
      if (v5)
        v13 = 1024;
      else
        v13 = 256;
      v14 = v13;
      v15 = v12;
      do
      {
        *v15 = 0;
        v15[120] = 0;
        v15 += 240;
        v14 -= 2;
      }
      while (v14);
      v16 = 1u;
      v17 = v13;
      do
      {
        if (v13 < 4)
          break;
        v18 = *((_BYTE *)&square + v16);
        v19 = v13 >> 2 <= 1 ? 1 : v13 >> 2;
        v20 = 15 * v17;
        v17 += v19;
        do
        {
          v21 = (int64x2_t *)&(*v3)[v20];
          v21->i8[0] = v18;
          v21->i64[1] = (uint64_t)v12;
          v21[1] = vaddq_s64(vdupq_n_s64((unint64_t)v12), (int64x2_t)xmmword_208F56770);
          v22 = v12 + 480;
          v21[2].i64[0] = (uint64_t)(v12 + 360);
          v20 += 15;
          v12 += 480;
          --v19;
        }
        while (v19);
        ++v16;
        v12 = v22;
        v23 = v13 >= 0x10;
        LODWORD(v13) = v13 >> 2;
      }
      while (v23);
      v12 = *v3;
    }
    else
    {
      *v12 = 6;
    }
    result = 0;
    v3[1] = (void **)&v12[120 * v6 - 120];
  }
  else
  {
    *v3 = 0;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t av1_convolve_2d_sr_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  signed int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int32x4_t v37;
  int8x16_t *v38;
  int16x8_t *v39;
  uint64_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int16x8_t v60;
  int16x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  __int16 *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int16x8_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  _WORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  __int16 *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int16 *v104;
  __int16 *v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  _BYTE *v111;
  unint64_t v112;
  _BYTE *v113;
  int v114;
  uint64_t v115;
  int v116;
  _WORD v117[8];
  _QWORD v118[4448];

  result = MEMORY[0x24BDAC7A8]();
  v110 = v19;
  v118[4446] = *MEMORY[0x24BDAC8D0];
  v20 = *(unsigned __int16 *)(v17 + 8);
  v116 = v21;
  v108 = *(unsigned __int16 *)(v17 + 8);
  v112 = v20 >> 1;
  v114 = (v20 >> 1) - 1;
  v22 = *(_DWORD *)(a12 + 20);
  v107 = *(_DWORD *)(a12 + 24);
  v23 = (v21 + v20 - 1);
  if ((int)v23 >= 1 && (int)v15 >= 1)
  {
    v24 = *(unsigned __int16 *)(v16 + 8);
    v25 = 1 << v22 >> 1;
    if (*(_WORD *)(v16 + 8))
    {
      v26 = 0;
      v27 = v114 * v13;
      v28 = *(_QWORD *)v16 + 2 * (a9 & 0xF) * v24;
      v29 = result - v27 + 16;
      v30 = 1 - (v24 >> 1);
      result -= v27;
      while (1)
      {
        v31 = 0;
        v32 = v30;
        do
        {
          v33 = v32;
          if (v24 < 8)
          {
            v34 = 0;
            v35 = 0x4000;
LABEL_19:
            v64 = v24 - v34;
            v65 = (unsigned __int8 *)(result + v34 + v33);
            v66 = (__int16 *)(v28 + 2 * v34);
            do
            {
              v68 = *v66++;
              v67 = v68;
              v69 = *v65++;
              v35 += v69 * v67;
              --v64;
            }
            while (v64);
            goto LABEL_7;
          }
          if (v24 >= 0x20)
          {
            v37 = 0uLL;
            v38 = (int8x16_t *)(v29 + v32);
            v39 = (int16x8_t *)(v28 + 32);
            v40 = (unsigned __int16)v24 & 0xFFE0;
            v41 = (int32x4_t)xmmword_208F567D0;
            v42 = 0uLL;
            v43 = 0uLL;
            v18 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            do
            {
              v47 = v39[-2];
              v48 = v39[-1];
              v49 = *v39;
              v50 = v39[1];
              v39 += 4;
              v51 = v38[-1];
              v52 = (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_208F04F40);
              v53 = (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_208F04F30);
              v54 = (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_208F04F50);
              v43 = vmlaq_s32(v43, (int32x4_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_208F04F20), vmovl_high_s16(v48));
              v37 = vmlaq_s32(v37, (int32x4_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_208F04F40), vmovl_high_s16(v47));
              v42 = vmlaq_s32(v42, (int32x4_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_208F04F30), vmovl_s16(*(int16x4_t *)v48.i8));
              v41 = vmlaq_s32(v41, (int32x4_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_208F04F50), vmovl_s16(*(int16x4_t *)v47.i8));
              v46 = vmlaq_s32(v46, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_208F04F20), vmovl_high_s16(v50));
              v38 += 2;
              v44 = vmlaq_s32(v44, v52, vmovl_high_s16(v49));
              v45 = vmlaq_s32(v45, v53, vmovl_s16(*(int16x4_t *)v50.i8));
              v18 = vmlaq_s32(v18, v54, vmovl_s16(*(int16x4_t *)v49.i8));
              v40 -= 32;
            }
            while (v40);
            v35 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v18, v41), vaddq_s32(v45, v42)), vaddq_s32(vaddq_s32(v44, v37), vaddq_s32(v46, v43))));
            if ((v24 & 0xFFE0) == v24)
              goto LABEL_7;
            v36 = (unsigned __int16)v24 & 0xFFE0;
            v34 = v36;
            if ((v24 & 0x18) == 0)
              goto LABEL_19;
          }
          else
          {
            v36 = 0;
            v35 = 0x4000;
          }
          v55 = 0uLL;
          v56 = (int32x4_t)v35;
          v57 = (int16x8_t *)(v28 + 2 * v36);
          v58 = (uint64_t *)(result + v36 + v33);
          v59 = v36 - ((unsigned __int16)v24 & 0xFFF8);
          do
          {
            v60 = *v57++;
            v61 = *(int16x4_t *)v60.i8;
            v62 = vmovl_high_s16(v60);
            v60.i64[0] = *v58++;
            v18.i64[0] = v60.i64[0];
            v63 = (int32x4_t)vqtbl1q_s8((int8x16_t)v18, (int8x16_t)xmmword_208F04F40);
            v18 = (int32x4_t)vqtbl1q_s8((int8x16_t)v18, (int8x16_t)xmmword_208F04F50);
            v55 = vmlaq_s32(v55, v63, v62);
            v56 = vmlaq_s32(v56, v18, vmovl_s16(v61));
            v59 += 8;
          }
          while (v59);
          v35 = vaddvq_s32(vaddq_s32(v56, v55));
          v34 = (unsigned __int16)v24 & 0xFFF8;
          if (v34 != v24)
            goto LABEL_19;
LABEL_7:
          v117[v31 + v26 * v15] = (int)(v35 + v25) >> v22;
          ++v31;
          v32 = v33 + 1;
        }
        while (v31 != v15);
        ++v26;
        v30 += v13;
        if (v26 == v23)
          goto LABEL_32;
      }
    }
    v70 = 0;
    v71 = 0;
    v72 = (v25 + 0x4000) >> v22;
    v73 = vdupq_n_s16(v72);
    result = (uint64_t)v118;
    do
    {
      if (v15 >= 0x10)
      {
        v75 = v15 & 0xFFFFFFF0;
        v76 = (_OWORD *)result;
        do
        {
          *(v76 - 1) = v73;
          *v76 = v73;
          v76 += 2;
          v75 -= 16;
        }
        while (v75);
        v74 = v15 & 0xFFFFFFF0;
        if (v74 == v15)
          goto LABEL_23;
      }
      else
      {
        v74 = 0;
      }
      v77 = v15 - v74;
      v78 = &v117[v74 + v70];
      do
      {
        *v78++ = v72;
        --v77;
      }
      while (v77);
LABEL_23:
      ++v71;
      result += 2 * v15;
      v70 += v15;
    }
    while (v71 != v23);
  }
LABEL_32:
  v79 = a12;
  if (v116 >= 1 && (int)v15 >= 1)
  {
    v80 = 0;
    v81 = (a11 & 0xFu) * v108;
    v82 = v15;
    v109 = v110;
    v83 = (int)(v114 * v15);
    result = v83 * 2 + 2 * (2 - v112) * v15;
    v84 = (char *)v117 + result;
    v85 = 2 * v15;
    v86 = 4 * v15;
    v87 = *(_QWORD *)v17 + 2 * v81;
    v88 = 1 - v112;
    v89 = &v117[(1 - v112) * v82 + v83];
    v90 = &v117[v83];
    do
    {
      v91 = 0;
      v113 = v84;
      v115 = v80;
      v92 = v80 * v109;
      v111 = v89;
      do
      {
        v95 = *(unsigned __int16 *)(v17 + 8);
        v96 = 1 << (22 - v22);
        if (*(_WORD *)(v17 + 8))
        {
          if ((_DWORD)v95 == 1)
          {
            v97 = 0;
            v96 = 1 << (22 - v22);
          }
          else
          {
            v98 = 0;
            v99 = 0;
            v97 = (unsigned __int16)v95 & 0xFFFE;
            v100 = (__int16 *)(v87 + 2);
            v101 = v97;
            v102 = 1 << (22 - v22);
            do
            {
              result = *v100;
              v102 += *(__int16 *)&v89[v98] * *(v100 - 1);
              v99 += *(__int16 *)&v84[v98] * (_DWORD)result;
              v98 += v86;
              v100 += 2;
              v101 -= 2;
            }
            while (v101);
            v96 = v99 + v102;
            v79 = a12;
            if (v97 == v95)
              goto LABEL_37;
          }
          v103 = v95 - v97;
          v104 = (__int16 *)&v90[2 * v91 + 2 * v82 * (v88 + v97)];
          v105 = (__int16 *)(v87 + 2 * v97);
          do
          {
            v106 = *v105++;
            result = *v104;
            v96 += result * v106;
            v104 = (__int16 *)((char *)v104 + v85);
            --v103;
          }
          while (v103);
        }
LABEL_37:
        v93 = ((1 << (14 - (v22 + v107)) >> 1)
             + (__int16)((-1 << (22 - v22 - *(_DWORD *)(v79 + 24) - 1))
                       + (-1 << (22 - v22 - *(_DWORD *)(v79 + 24)))
                       + ((v96 + (1 << *(_DWORD *)(v79 + 24) >> 1)) >> *(_DWORD *)(v79 + 24)))) >> (14 - (v22 + v107));
        v94 = v93 & ~(v93 >> 31);
        if (v94 >= 255)
          LOBYTE(v94) = -1;
        *(_BYTE *)(v14 + v91 + v92) = v94;
        ++v91;
        v84 += 2;
        v89 += 2;
      }
      while (v91 != v82);
      v80 = v115 + 1;
      v84 = &v113[v85];
      v89 = &v111[v85];
      ++v88;
    }
    while (v115 + 1 != v116);
  }
  return result;
}

uint64_t av1_convolve_2d_facade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, int a12, uint64_t a13)
{
  uint64_t result;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  uint64_t **v19;
  uint64_t v20;
  double v21;
  uint16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t *v46;
  int8x16_t v47;
  uint8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint16x8_t *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v62;
  unint64_t v63;
  uint8x16_t v64;
  uint8x16_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int16x8_t *v70;
  int32x4_t v71;
  _BYTE *v72;
  int32x4_t v73;
  uint64_t v74;
  int16x8_t *v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t *v79;
  uint64_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint8x16_t v98;
  uint8x16_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int32x4_t v120;
  int16x8_t *v121;
  uint64_t v122;
  uint64_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int16x8_t *v138;
  uint64_t v139;
  uint64_t v140;
  int16x8_t v141;
  int32x4_t v142;
  uint64_t v143;
  uint64_t v144;
  __int16 *v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  int16x8_t v151;
  int16x8_t *v152;
  uint64_t v153;
  uint64_t v154;
  int16x8_t *v155;
  uint64_t v156;
  _WORD *v157;
  uint64_t v158;
  int v159;
  char v160;
  int v161;
  uint64_t v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _DWORD *v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  __int16 *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  __int16 *v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  int v192;
  unint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  _WORD v205[8];
  _QWORD v206[8576];
  int8x16x2_t v207;
  int8x16x4_t v208;

  result = MEMORY[0x24BDAC7A8](a1, a2);
  v30 = v20;
  v31 = v18;
  v197 = v17;
  v199 = v15;
  v206[8574] = *MEMORY[0x24BDAC8D0];
  v198 = (uint64_t)v19[1];
  v32 = *((unsigned __int16 *)*v19 + 4);
  if ((_DWORD)v32 == 2 || *(_WORD *)(v198 + 8) == 2)
  {
    if ((_DWORD)v20 && a10)
    {
      v33 = v15;
      if (v31 < 0 || v17 < 1)
        return result;
      v34 = 0;
      v35 = v14;
      v36 = v17 & 0xFFFFFFE0;
      v37 = (2 * v17) & 0x1FFFFFFC0;
      v38 = (int8x16_t *)(result + 17);
      v39 = 2 * v17;
      v40 = v205;
      while (1)
      {
        v42 = *(unsigned __int8 *)result;
        if (v197 >= 0x20)
        {
          v44 = 0;
          v45 = vdupq_n_s8(v42);
          v46 = v38;
          do
          {
            v47 = v46[-1];
            v48 = (uint8x16_t)vextq_s8(v45, v47, 0xFuLL);
            v49 = *v46;
            v46 += 2;
            v45 = v49;
            v50 = (uint8x16_t)vextq_s8(v47, v49, 0xFuLL);
            v51 = (uint16x8_t *)&v40[v44];
            *v51 = vaddw_u8((uint16x8_t)(*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v48.i8) | __PAIR128__(0x100010001000100, 0x100010001000100)), *(uint8x8_t *)v47.i8);
            v51[1] = vaddw_high_u8((uint16x8_t)(*(_OWORD *)&vmovl_high_u8(v48) | __PAIR128__(0x100010001000100, 0x100010001000100)), (uint8x16_t)v47);
            v51[2] = vaddw_u8((uint16x8_t)(*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v50.i8) | __PAIR128__(0x100010001000100, 0x100010001000100)), *(uint8x8_t *)v49.i8);
            v51[3] = vaddw_high_u8((uint16x8_t)(*(_OWORD *)&vmovl_high_u8(v50) | __PAIR128__(0x100010001000100, 0x100010001000100)), (uint8x16_t)v49);
            v44 += 64;
          }
          while (v37 != v44);
          if (v36 == v197)
            goto LABEL_8;
          LOBYTE(v42) = v45.i8[15];
          v43 = v197 & 0xFFFFFFE0;
        }
        else
        {
          v43 = 0;
        }
        do
        {
          v52 = *(unsigned __int8 *)(result + v43 + 1);
          *(_WORD *)&v40[2 * v43] = v52 + v42 + 256;
          LOBYTE(v42) = v52;
          ++v43;
        }
        while (v197 != v43);
LABEL_8:
        result += v35;
        v38 = (int8x16_t *)((char *)v38 + v35);
        v40 += v39;
        if (v34++ == v31)
        {
          if (v31 >= 1)
          {
            v66 = 0;
            v67 = v16;
            v68 = v197 & 0xFFFFFFF0;
            v69 = v197 & 0xFFFFFFF8;
            v70 = (int16x8_t *)v205;
            v71 = vdupq_n_s32(0xFF808000);
            v72 = &v205[(unint64_t)v39 / 2];
            v73.i64[0] = 0xFF000000FFLL;
            v73.i64[1] = 0xFF000000FFLL;
            while (1)
            {
              if (v197 < 8)
              {
                v74 = 0;
                do
                {
LABEL_53:
                  v83 = ((v70->i16[v74] + *(__int16 *)&v72[2 * v74]) << 14) - 8355840;
                  LODWORD(result) = (v83 >> 16) & ~(v83 >> 31);
                  if ((int)result >= 255)
                    result = 255;
                  else
                    result = result;
                  *((_BYTE *)v33 + v74++) = result;
                }
                while (v197 != v74);
                goto LABEL_41;
              }
              if (v197 >= 0x10)
              {
                result = 0;
                v75 = v70;
                do
                {
                  v76 = v75[1];
                  v77 = *(int16x8_t *)((char *)v75 + 2 * (int)v197);
                  v78 = *(int16x8_t *)((char *)&v75[1] + v39);
                  v208.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vshlq_n_s32(vaddl_high_s16(v76, v78), 0xEuLL), v71), 0x10uLL), (int32x4_t)0), v73);
                  v208.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vshlq_n_s32(vaddl_high_s16(*v75, v77), 0xEuLL), v71), 0x10uLL), (int32x4_t)0), v73);
                  v208.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v78.i8), 0xEuLL), v71), 0x10uLL), (int32x4_t)0), v73);
                  v208.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v75->i8, *(int16x4_t *)v77.i8), 0xEuLL), v71), 0x10uLL), (int32x4_t)0), v73);
                  *(int8x16_t *)((char *)v33 + result) = vqtbl4q_s8(v208, (int8x16_t)xmmword_208F05040);
                  result += 16;
                  v75 += 2;
                }
                while (v68 != result);
                if (v68 == v197)
                  goto LABEL_41;
                result = v197 & 0xFFFFFFF0;
                v74 = result;
                if ((v197 & 8) == 0)
                  goto LABEL_53;
              }
              else
              {
                result = 0;
              }
              v79 = (int16x8_t *)((char *)v70 + 2 * result);
              v80 = 2 * ((int)v197 + result);
              do
              {
                v81 = *v79++;
                v82 = *(int16x8_t *)((char *)v70 + v80);
                v207.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vshlq_n_s32(vaddl_high_s16(v81, v82), 0xEuLL), v71), 0x10uLL), (int32x4_t)0), v73);
                v207.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v82.i8), 0xEuLL), v71), 0x10uLL), (int32x4_t)0), v73);
                *(_QWORD *)((char *)v33 + result) = vqtbl2q_s8(v207, (int8x16_t)xmmword_208F05050).u64[0];
                result += 8;
                v80 += 16;
              }
              while (v69 != result);
              v74 = v197 & 0xFFFFFFF8;
              if (v69 != v197)
                goto LABEL_53;
LABEL_41:
              v33 = (_DWORD *)((char *)v33 + v67);
              ++v66;
              v70 = (int16x8_t *)((char *)v70 + v39);
              v72 += v39;
              if (v66 == v31)
                return result;
            }
          }
          return result;
        }
      }
    }
    if ((_DWORD)v20)
    {
      if (v18 < 1 || v17 < 1)
        return result;
      v53 = 0;
      v54 = v14;
      v55 = v16;
      v56 = v17 & 0xFFFFFFE0;
      v57 = v17 & 0xFFFFFFF8;
      v58 = result;
      v59 = v15;
      while (1)
      {
        if (v17 >= 8)
        {
          if ((unint64_t)v59 >= result + (unint64_t)v17 + 1 + v53 * v54
            || v58 >= (unint64_t)v15 + v17 + v53 * v55)
          {
            if (v17 < 0x20)
            {
              v62 = 0;
              do
              {
LABEL_35:
                *(uint8x8_t *)((char *)v59 + v62) = vrhadd_u8(*(uint8x8_t *)(v58 + v62), *(uint8x8_t *)(v58 + v62 + 1));
                v62 += 8;
              }
              while (v57 != v62);
              v60 = v17 & 0xFFFFFFF8;
              if (v57 == v17)
                goto LABEL_21;
              goto LABEL_37;
            }
            v63 = 0;
            do
            {
              v64 = vrhaddq_u8(*(uint8x16_t *)(v58 + v63 + 16), *(uint8x16_t *)(v58 + v63 + 17));
              v65 = (uint8x16_t *)&v59[v63 / 4];
              *v65 = vrhaddq_u8(*(uint8x16_t *)(v58 + v63), *(uint8x16_t *)(v58 + v63 + 1));
              v65[1] = v64;
              v63 += 32;
            }
            while (v56 != v63);
            if (v56 == v17)
              goto LABEL_21;
            v62 = v17 & 0xFFFFFFE0;
            v60 = v62;
            if ((v17 & 0x18) != 0)
              goto LABEL_35;
          }
          else
          {
            v60 = 0;
          }
        }
        else
        {
          v60 = 0;
        }
        do
        {
LABEL_37:
          *((_BYTE *)v59 + v60) = (*(unsigned __int8 *)(v58 + v60)
                                 + *(unsigned __int8 *)(v58 + v60 + 1)
                                 + 1) >> 1;
          ++v60;
        }
        while (v17 != v60);
LABEL_21:
        v58 += v54;
        v59 = (_DWORD *)((char *)v59 + v55);
        if ((_DWORD)++v53 == v18)
          return result;
      }
    }
    if (a10)
    {
      if (v18 < 1 || v17 < 1)
        return result;
      v84 = 0;
      v85 = v14;
      v86 = v16;
      v87 = result + v14;
      v88 = v17 & 0xFFFFFFE0;
      v89 = v17 & 0xFFFFFFF8;
      v90 = v87;
      v91 = result;
      v92 = v15;
      while (1)
      {
        if (v197 >= 8)
        {
          v93 = 0;
          v94 = (char *)v15 + v84 * v86;
          if ((unint64_t)&v94[-v87 - v84 * v85] >= 0x20 && (unint64_t)&v94[-(v84 * v85) - result] >= 0x20)
          {
            if (v197 < 0x20)
            {
              v95 = 0;
LABEL_75:
              v100 = 0;
              v101 = v91 + v95;
              v102 = v91 + v95 + v85;
              v103 = (char *)v92 + v95;
              v104 = v95 - v89;
              do
              {
                *(uint8x8_t *)&v103[v100] = vrhadd_u8(*(uint8x8_t *)(v101 + v100), *(uint8x8_t *)(v102 + v100));
                v100 += 8;
              }
              while (v104 + v100);
              v93 = v197 & 0xFFFFFFF8;
              if (v89 == v197)
                goto LABEL_62;
              goto LABEL_65;
            }
            v96 = 0;
            v97 = v91 + v85;
            do
            {
              v98 = vrhaddq_u8(*(uint8x16_t *)(v91 + v96 + 16), *(uint8x16_t *)(v97 + v96 + 16));
              v99 = (uint8x16_t *)&v92[v96 / 4];
              *v99 = vrhaddq_u8(*(uint8x16_t *)(v91 + v96), *(uint8x16_t *)(v97 + v96));
              v99[1] = v98;
              v96 += 32;
            }
            while (v88 != v96);
            if (v88 == v197)
              goto LABEL_62;
            v95 = v197 & 0xFFFFFFE0;
            v93 = v95;
            if ((v197 & 0x18) != 0)
              goto LABEL_75;
          }
        }
        else
        {
          v93 = 0;
        }
        do
        {
LABEL_65:
          *((_BYTE *)v92 + v93) = (*(unsigned __int8 *)(v91 + v93) + *(unsigned __int8 *)(v90 + v93) + 1) >> 1;
          ++v93;
        }
        while (v197 != v93);
LABEL_62:
        v91 += v85;
        v92 = (_DWORD *)((char *)v92 + v86);
        ++v84;
        v90 += v85;
        if ((_DWORD)v84 == v31)
          return result;
      }
    }
  }
  if (a12)
  {
    v105 = v17;
    v106 = *(unsigned __int16 *)(v198 + 8);
    v203 = *(_QWORD *)(a13 + 8);
    v107 = *(_DWORD *)(a13 + 20);
    v200 = v106 + ((a10 + (v18 - 1) * a11) >> 10);
    v202 = *(int *)(a13 + 16);
    v192 = *(_DWORD *)(a13 + 24);
    v193 = *(unsigned __int16 *)(v198 + 8);
    v194 = (v106 >> 1) - 1;
    v195 = v18;
    if ((int)v200 >= 1)
    {
      if (v17 < 1)
        return result;
      v108 = 1 << v107 >> 1;
      if (*((_WORD *)*v19 + 4))
      {
        v109 = 0;
        v196 = v14;
        v110 = **v19;
        v111 = 1 - (v32 >> 1);
        result -= v194 * v14;
        while (1)
        {
          v112 = 0;
          v113 = v30;
          v114 = v30;
          do
          {
            v115 = 2 * v32 * ((v114 >> 6) & 0xF);
            v116 = (uint64_t)(int)v114 >> 10;
            if (v32 < 8)
            {
              v117 = 0;
              v118 = 0x4000;
LABEL_98:
              v143 = v111 + v117 + v116;
              v144 = v32 - v117;
              v145 = (__int16 *)(v110 + v115 + 2 * v117);
              do
              {
                v146 = *v145++;
                v118 += *(unsigned __int8 *)(result + v143++) * v146;
                --v144;
              }
              while (v144);
              goto LABEL_86;
            }
            if (v32 >= 0x20)
            {
              v120 = 0uLL;
              v121 = (int16x8_t *)(v110 + 32 + v115);
              v122 = v116 - (v32 >> 1);
              v123 = (unsigned __int16)v32 & 0xFFE0;
              v124 = (int32x4_t)xmmword_208F567D0;
              v125 = 0uLL;
              v126 = 0uLL;
              v29 = 0uLL;
              v127 = 0uLL;
              v128 = 0uLL;
              v129 = 0uLL;
              do
              {
                v130 = v121[-2];
                v131 = v121[-1];
                v132 = *v121;
                v133 = v121[1];
                v121 += 4;
                v134 = *(int8x16_t *)(result + v122 + 1);
                v135 = *(int8x16_t *)(result + v122 + 17);
                v126 = vmlaq_s32(v126, (int32x4_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F20), vmovl_high_s16(v131));
                v125 = vmlaq_s32(v125, (int32x4_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F30), vmovl_s16(*(int16x4_t *)v131.i8));
                v120 = vmlaq_s32(v120, (int32x4_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F40), vmovl_high_s16(v130));
                v124 = vmlaq_s32(v124, (int32x4_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F50), vmovl_s16(*(int16x4_t *)v130.i8));
                v129 = vmlaq_s32(v129, (int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_208F04F20), vmovl_high_s16(v133));
                v128 = vmlaq_s32(v128, (int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_208F04F30), vmovl_s16(*(int16x4_t *)v133.i8));
                v127 = vmlaq_s32(v127, (int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_208F04F40), vmovl_high_s16(v132));
                v29 = (int8x16_t)vmlaq_s32((int32x4_t)v29, (int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_208F04F50), vmovl_s16(*(int16x4_t *)v132.i8));
                v122 += 32;
                v123 -= 32;
              }
              while (v123);
              v118 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v29, v124), vaddq_s32(v128, v125)), vaddq_s32(vaddq_s32(v127, v120), vaddq_s32(v129, v126))));
              if ((v32 & 0xFFE0) == v32)
                goto LABEL_86;
              v119 = (unsigned __int16)v32 & 0xFFE0;
              v117 = v119;
              if ((v32 & 0x18) == 0)
                goto LABEL_98;
            }
            else
            {
              v119 = 0;
              v118 = 0x4000;
            }
            v136 = (int32x4_t)v118;
            v137 = 0uLL;
            v138 = (int16x8_t *)(v110 + v115 + 2 * v119);
            v139 = v111 + v119 + v116;
            v140 = v119 - ((unsigned __int16)v32 & 0xFFF8);
            do
            {
              v141 = *v138++;
              v29.i64[0] = *(_QWORD *)(result + v139);
              v142 = (int32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_208F04F40);
              v29 = vqtbl1q_s8(v29, (int8x16_t)xmmword_208F04F50);
              v137 = vmlaq_s32(v137, v142, vmovl_high_s16(v141));
              v136 = vmlaq_s32(v136, (int32x4_t)v29, vmovl_s16(*(int16x4_t *)v141.i8));
              v139 += 8;
              v140 += 8;
            }
            while (v140);
            v118 = vaddvq_s32(vaddq_s32(v136, v137));
            v117 = (unsigned __int16)v32 & 0xFFF8;
            if (v117 != v32)
              goto LABEL_98;
LABEL_86:
            v205[v112 + v109 * v197] = (int)(v118 + v108) >> v107;
            ++v112;
            v114 += a9;
          }
          while (v112 != v197);
          result += v196;
          ++v109;
          v30 = v113;
          if (v109 == v200)
            goto LABEL_121;
        }
      }
      v148 = 0;
      v149 = 0;
      v150 = (v108 + 0x4000) >> v107;
      v151 = vdupq_n_s16(v150);
      result = (uint64_t)v205;
      v152 = (int16x8_t *)v206;
      do
      {
        if (v17 >= 0x10)
        {
          v154 = v17 & 0xFFFFFFF0;
          v155 = v152;
          do
          {
            v155[-1] = v151;
            *v155 = v151;
            v155 += 2;
            v154 -= 16;
          }
          while (v154);
          v153 = v17 & 0xFFFFFFF0;
          if (v153 == v17)
            goto LABEL_112;
        }
        else
        {
          v153 = 0;
        }
        v156 = v17 - v153;
        v157 = &v205[v153 + v148];
        do
        {
          *v157++ = v150;
          --v156;
        }
        while (v156);
LABEL_112:
        ++v149;
        v152 = (int16x8_t *)((char *)v152 + 2 * v17);
        v148 += v17;
      }
      while (v149 != v200);
    }
LABEL_121:
    if ((int)v197 < 1 || v195 < 1)
      return result;
    v158 = 0;
    v204 = 22 - v107;
    v159 = 1 << (22 - v107);
    v160 = 14 - (v107 + v192);
    v161 = 1 << v160 >> 1;
    v162 = (int)(v194 * v197);
    result = (uint64_t)&v205[v162];
    v163 = &v205[(2 - (v193 >> 1)) * v197 + v162];
    v201 = 1 - (v193 >> 1);
    v164 = &v205[v201 * v197 + v162];
    v165 = 2 * v197;
LABEL_125:
    v166 = 0;
    v167 = a10;
    v169 = v198;
    v168 = v199;
    while (1)
    {
      v172 = *(unsigned __int16 *)(v169 + 8);
      v173 = v159;
      if (*(_WORD *)(v169 + 8))
      {
        v174 = (v167 >> 6) & 0xF;
        v175 = (int)((v167 >> 10) * v105);
        v176 = *(_QWORD *)v169;
        if ((_DWORD)v172 == 1)
        {
          v177 = 0;
          v173 = v159;
        }
        else
        {
          v178 = 0;
          v177 = (unsigned __int16)v172 & 0xFFFE;
          v179 = 2 * v175;
          v180 = (__int16 *)(v176 + 2 * (v172 * v174) + 2);
          v181 = v177;
          v182 = v159;
          do
          {
            v182 += *(__int16 *)&v164[v179] * *(v180 - 1);
            v178 += *(__int16 *)&v163[v179] * *v180;
            v179 += 4 * v197;
            v180 += 2;
            v181 -= 2;
          }
          while (v181);
          v173 = v178 + v182;
          v105 = v197;
          v169 = v198;
          v168 = v199;
          if (v177 == v172)
            goto LABEL_138;
        }
        v183 = v172 - v177;
        v184 = v165 * (v201 + v177) + 2 * v175;
        v185 = (__int16 *)(v176 + 2 * v177 + 2 * (v172 * v174));
        do
        {
          v186 = *v185++;
          v173 += *(__int16 *)(result + v184) * v186;
          v184 += v165;
          --v183;
        }
        while (v183);
      }
LABEL_138:
      v187 = *(_DWORD *)(a13 + 24);
      v188 = (v173 + (1 << v187 >> 1)) >> v187;
      if (*(_DWORD *)(a13 + 32))
      {
        v189 = v158 + v166 * v202;
        if (*(_DWORD *)a13)
        {
          v190 = *(unsigned __int16 *)(v203 + 2 * v189);
          if (*(_DWORD *)(a13 + 36))
            v191 = (*(_DWORD *)(a13 + 40) * v190
                  + *(_DWORD *)(a13 + 44) * (unsigned __int16)((v173 + (1 << v187 >> 1)) >> v187)) >> 4;
          else
            v191 = (v190 + (unsigned __int16)v188) >> 1;
          v170 = (-1 << (v204 - v187)) + v161 + (-1 << (v204 - v187 - 1)) + v191;
          goto LABEL_127;
        }
        *(_WORD *)(v203 + 2 * v189) = v188;
        ++v166;
        v167 += a11;
        if (v166 == v195)
          goto LABEL_124;
      }
      else
      {
        v170 = (-1 << (v204 - v187)) + v161 + (-1 << (v204 - v187 - 1)) + (unsigned __int16)v188;
LABEL_127:
        v171 = (v170 >> v160) & ~(v170 >> v160 >> 31);
        if (v171 >= 255)
          LOBYTE(v171) = -1;
        *((_BYTE *)v168 + v158 + v166 * v16) = v171;
        ++v166;
        v167 += a11;
        if (v166 == v195)
        {
LABEL_124:
          result += 2;
          ++v158;
          v163 += 2;
          v164 += 2;
          if (v158 == v197)
            return result;
          goto LABEL_125;
        }
      }
    }
  }
  if (*(_DWORD *)(a13 + 32))
  {
    if (!(v20 | a10))
      return (uint64_t)av1_dist_wtd_convolve_2d_copy_neon((uint8x8_t *)result, v14, v15, v16, v17, v18, a13, *(uint16x4_t *)&v21, v22, v23, v24, v25, v26, v27);
    if (!(_DWORD)v20 || a10)
    {
      if (!(_DWORD)v20 && a10)
        return av1_dist_wtd_convolve_y_neon(result, v14, (uint64_t)v15, v16, v17, v18, v198, a10, v21, *(double *)v22.i64, *(double *)v23.i64, *(double *)v24.i64, *(double *)v25.i64, *(double *)v26.i64, *(uint16x4_t *)v27.i8, v28, a13);
      v147 = &av1_dist_wtd_convolve_2d;
    }
    else
    {
      v147 = &av1_dist_wtd_convolve_x;
    }
  }
  else
  {
    if (!(v20 | a10))
      return (uint64_t)aom_convolve_copy_neon((_WORD *)result, v14, v15, v16, v17, v18);
    if (!(_DWORD)v20 || a10)
    {
      if (!(_DWORD)v20 && a10)
        return av1_convolve_y_sr(result);
      v147 = &av1_convolve_2d_sr;
    }
    else
    {
      v147 = &av1_convolve_x_sr;
    }
  }
  return ((uint64_t (*)(uint64_t))*v147)(result);
}

uint64_t av1_convolve_x_sr_neon(uint64_t result, int a2, _DWORD *_X2, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  int32x4_t v9;
  unsigned int v10;
  uint64_t v11;
  int8x8_t *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t v16;
  int16x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int8x8_t v26;
  int8x8_t *v27;
  int8x8_t v28;
  int8x8_t v29;
  int8x8_t v30;
  int8x8_t *v31;
  int8x8_t v32;
  int8x8_t *v33;
  int8x8_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  uint8x8_t v51;
  uint8x8_t v52;
  uint8x8_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int32x2_t v93;
  int32x2_t v94;
  int32x2_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x8_t v98;
  int8x8_t v99;
  char *v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int32x4_t v116;
  int8x16_t *v117;
  int32x4_t v118;
  uint64_t v119;
  int16x8_t *v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int8x16_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  uint64_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int16x8_t *v138;
  uint64_t *v139;
  uint64_t v140;
  int16x8_t v141;
  int16x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  uint64_t v145;
  unsigned __int8 *v146;
  __int16 *v147;
  int v148;
  int v149;
  int v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  unint64_t v161;
  int8x16_t v162;
  int8x16_t v163;
  uint64_t *v164;
  int8x16_t v165;
  uint64_t *v166;
  int8x16_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  uint8x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int8x16_t v213;
  uint64_t *v214;
  int8x16_t v215;
  uint64_t *v216;
  int8x16_t v217;
  int8x16_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  uint8x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  uint8x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  uint8x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  int v270;
  BOOL v271;
  int16x8_t v272;
  unint64_t v273;
  int8x16_t v274;
  int8x16_t v276;
  int16x4_t v277;
  uint64_t v278;
  __int32 *v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  uint8x8_t v285;
  uint8x8_t v286;
  uint8x8_t v287;
  uint8x8_t v288;
  int8x8_t v289;
  uint64_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  char *v295;
  uint64_t v296;
  int16x8_t v297;
  unint64_t v298;
  int8x8_t v299;

  if (a5 == 2 || a6 == 2)
  {
    if (a6 < 1 || a5 < 1)
      return result;
    v101 = 0;
    v102 = 7 - *(_DWORD *)(a9 + 20);
    v103 = a8 & 0xF;
    v104 = *(unsigned __int16 *)(a7 + 8);
    v105 = v103 * v104;
    v106 = 1 << (7 - *(_BYTE *)(a9 + 20)) >> 1;
    v107 = a5;
    v108 = *(_QWORD *)a7 + 2 * v105;
    v109 = 1 - (v104 >> 1);
LABEL_13:
    v110 = 0;
    v111 = v109;
    while (1)
    {
      v114 = *(unsigned __int16 *)(a7 + 8);
      if (*(_WORD *)(a7 + 8))
        break;
      v112 = 0;
LABEL_15:
      v113 = ((((int)(v112 + (1 << *(_DWORD *)(a9 + 20) >> 1)) >> *(_DWORD *)(a9 + 20)) + v106) >> v102) & ~((((int)(v112 + (1 << *(_DWORD *)(a9 + 20) >> 1)) >> *(_DWORD *)(a9 + 20)) + v106) >> v102 >> 31);
      if (v113 >= 255)
        LOBYTE(v113) = -1;
      *((_BYTE *)_X2 + v110 + v101 * a4) = v113;
      ++v110;
      ++v111;
      if (v110 == v107)
      {
        ++v101;
        v109 += a2;
        if (v101 == a6)
          return result;
        goto LABEL_13;
      }
    }
    if (v114 < 8)
    {
      v115 = 0;
      v112 = 0;
LABEL_30:
      v145 = v114 - v115;
      v146 = (unsigned __int8 *)(result + v115 + v111);
      v147 = (__int16 *)(v108 + 2 * v115);
      do
      {
        v149 = *v147++;
        v148 = v149;
        v150 = *v146++;
        v112 += v150 * v148;
        --v145;
      }
      while (v145);
      goto LABEL_15;
    }
    if (v114 >= 0x20)
    {
      v116 = 0uLL;
      v117 = (int8x16_t *)(result + 16 + v111);
      v118 = 0uLL;
      v115 = (unsigned __int16)v114 & 0xFFE0;
      v119 = v115;
      v120 = (int16x8_t *)(v108 + 32);
      v121 = 0uLL;
      v122 = 0uLL;
      v123 = 0uLL;
      v124 = 0uLL;
      v125 = 0uLL;
      v126 = 0uLL;
      do
      {
        v127 = v120[-2];
        v128 = v120[-1];
        v129 = *v120;
        v130 = v120[1];
        v120 += 4;
        v131 = v117[-1];
        v132 = (int32x4_t)vqtbl1q_s8(*v117, (int8x16_t)xmmword_208F04F40);
        v133 = (int32x4_t)vqtbl1q_s8(*v117, (int8x16_t)xmmword_208F04F30);
        v134 = (int32x4_t)vqtbl1q_s8(*v117, (int8x16_t)xmmword_208F04F50);
        v122 = vmlaq_s32(v122, (int32x4_t)vqtbl1q_s8(v131, (int8x16_t)xmmword_208F04F20), vmovl_high_s16(v128));
        v118 = vmlaq_s32(v118, (int32x4_t)vqtbl1q_s8(v131, (int8x16_t)xmmword_208F04F40), vmovl_high_s16(v127));
        v121 = vmlaq_s32(v121, (int32x4_t)vqtbl1q_s8(v131, (int8x16_t)xmmword_208F04F30), vmovl_s16(*(int16x4_t *)v128.i8));
        v116 = vmlaq_s32(v116, (int32x4_t)vqtbl1q_s8(v131, (int8x16_t)xmmword_208F04F50), vmovl_s16(*(int16x4_t *)v127.i8));
        v126 = vmlaq_s32(v126, (int32x4_t)vqtbl1q_s8(*v117, (int8x16_t)xmmword_208F04F20), vmovl_high_s16(v130));
        v117 += 2;
        v124 = vmlaq_s32(v124, v132, vmovl_high_s16(v129));
        v125 = vmlaq_s32(v125, v133, vmovl_s16(*(int16x4_t *)v130.i8));
        v123 = vmlaq_s32(v123, v134, vmovl_s16(*(int16x4_t *)v129.i8));
        v119 -= 32;
      }
      while (v119);
      v9 = vaddq_s32(v126, v122);
      v112 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v123, v116), vaddq_s32(v125, v121)), vaddq_s32(vaddq_s32(v124, v118), v9)));
      if (v115 == v114)
        goto LABEL_15;
      if ((v114 & 0x18) == 0)
        goto LABEL_30;
    }
    else
    {
      v112 = 0;
      v115 = 0;
    }
    v135 = v115;
    v115 = (unsigned __int16)v114 & 0xFFF8;
    v136 = 0uLL;
    v137 = (int32x4_t)v112;
    v138 = (int16x8_t *)(v108 + 2 * v135);
    v139 = (uint64_t *)(result + v135 + v111);
    v140 = v135 - v115;
    do
    {
      v141 = *v138++;
      v142 = *(int16x4_t *)v141.i8;
      v143 = vmovl_high_s16(v141);
      v141.i64[0] = *v139++;
      v9.i64[0] = v141.i64[0];
      v144 = (int32x4_t)vqtbl1q_s8((int8x16_t)v9, (int8x16_t)xmmword_208F04F40);
      v9 = (int32x4_t)vqtbl1q_s8((int8x16_t)v9, (int8x16_t)xmmword_208F04F50);
      v136 = vmlaq_s32(v136, v144, v143);
      v137 = vmlaq_s32(v137, v9, vmovl_s16(v142));
      v140 += 8;
    }
    while (v140);
    v112 = vaddvq_s32(vaddq_s32(v137, v136));
    if (v115 == v114)
      goto LABEL_15;
    goto LABEL_30;
  }
  v10 = *(unsigned __int16 *)(a7 + 8);
  v11 = ((v10 >> 1) - 1);
  v12 = (int8x8_t *)(result - v11);
  v13 = (unsigned __int16 *)(*(_QWORD *)a7 + 2 * (a8 & 0xF) * v10);
  if (v10 == 12)
  {
    v14 = a2;
    v15 = 4 * a2;
    v16 = *(int16x8_t *)v13;
    v17 = *(int16x4_t *)(v13 + 8);
    v18 = 4 * a4;
    v19 = 3 * a2 - v11 + result + 11;
    v20 = (uint64_t)&v12[1] + 2 * a2 + 3;
    v21 = a2 - v11 + result + 11;
    v22 = (char *)_X2 + 2 * a4;
    v23 = (char *)_X2 + 3 * a4;
    v24 = (char *)_X2 + a4;
    result = a5;
    do
    {
      v25 = 0;
      v26 = *(int8x8_t *)((char *)v12 + v14);
      v27 = (int8x8_t *)((char *)v12 + v14 + v14);
      v28 = *v27;
      v29 = *(int8x8_t *)((char *)v27 + v14);
      v30 = v12[1];
      v31 = (int8x8_t *)((char *)v12 + v14 + 8);
      v32 = *v31;
      v33 = (int8x8_t *)((char *)v31 + v14);
      v34 = *(int8x8_t *)((char *)v33 + v14);
      v35 = (int16x4_t)vtrn1_s8(*v12, v26);
      v36 = (int16x4_t)vtrn2_s8(*v12, v26);
      v37 = (int16x4_t)vtrn1_s8(v28, v29);
      v38 = (int16x4_t)vtrn2_s8(v28, v29);
      v39 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn1_s16(v35, v37));
      v40 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn1_s16(v36, v38));
      v41 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn2_s16(v35, v37));
      v42 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn2_s16(v36, v38));
      v43 = (int16x4_t)vextq_s8(v39, v39, 8uLL).u64[0];
      v44 = (int16x4_t)vextq_s8(v40, v40, 8uLL).u64[0];
      v45 = (int16x4_t)vextq_s8(v41, v41, 8uLL).u64[0];
      v46 = (int16x4_t)vextq_s8(v42, v42, 8uLL).u64[0];
      v47 = (int16x4_t)vtrn1_s8(v30, v32);
      v48 = (int16x4_t)vtrn2_s8(v30, v32);
      v49 = (int16x4_t)vtrn1_s8(*v33, v34);
      v50 = (int16x4_t)vtrn2_s8(*v33, v34);
      v51 = (uint8x8_t)vzip1_s16(v47, v49);
      v52 = (uint8x8_t)vtrn2_s16(v47, v49);
      v53 = (uint8x8_t)vzip1_s16(v48, v50);
      v54 = (int16x4_t)vmovl_u8(v51).u64[0];
      v55 = (int16x4_t)vmovl_u8(v53).u64[0];
      v56 = (int16x4_t)vmovl_u8(v52).u64[0];
      do
      {
        v57 = *(int8x8_t *)(v21 + v25);
        v58 = *(int8x8_t *)(v20 + v25);
        v59 = *(int8x8_t *)((char *)&v12[1] + v25 + 3);
        v60 = *(int8x8_t *)(v19 + v25);
        v61 = (int16x4_t)vtrn1_s8(v59, v57);
        v62 = (int16x4_t)vtrn2_s8(v59, v57);
        v63 = (int16x4_t)vtrn1_s8(v58, v60);
        v64 = (int16x4_t)vtrn2_s8(v58, v60);
        v65 = (uint8x8_t)vzip1_s16(v61, v63);
        v66 = (uint8x8_t)vtrn2_s16(v61, v63);
        v67 = (uint8x8_t)vzip1_s16(v62, v64);
        v68 = (uint8x8_t)vtrn2_s16(v62, v64);
        v69.i64[0] = 0x400000004;
        v69.i64[1] = 0x400000004;
        v70 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v69, *(int16x4_t *)v39.i8, *(int16x4_t *)v16.i8, 0), *(int16x4_t *)v40.i8, *(int16x4_t *)v16.i8, 1), *(int16x4_t *)v41.i8, *(int16x4_t *)v16.i8, 2), *(int16x4_t *)v42.i8, *(int16x4_t *)v16.i8, 3), v43, v16, 4),
                    v44,
                    v16,
                    5),
                  v45,
                  v16,
                  6),
                v46,
                v16,
                7);
        v71.i64[0] = 0x400000004;
        v71.i64[1] = 0x400000004;
        v72 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v71, *(int16x4_t *)v40.i8, *(int16x4_t *)v16.i8, 0), *(int16x4_t *)v41.i8, *(int16x4_t *)v16.i8, 1), *(int16x4_t *)v42.i8, *(int16x4_t *)v16.i8, 2), v43, *(int16x4_t *)v16.i8, 3), v44, v16, 4), v45,
                  v16,
                  5),
                v46,
                v16,
                6);
        v73.i64[0] = 0x400000004;
        v73.i64[1] = 0x400000004;
        v74 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v73, *(int16x4_t *)v41.i8, *(int16x4_t *)v16.i8, 0), *(int16x4_t *)v42.i8, *(int16x4_t *)v16.i8, 1), v43, *(int16x4_t *)v16.i8, 2), v44, *(int16x4_t *)v16.i8, 3), v45, v16, 4), v46, v16,
                5);
        v75.i64[0] = 0x400000004;
        v75.i64[1] = 0x400000004;
        v76 = vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v75, *(int16x4_t *)v42.i8, *(int16x4_t *)v16.i8, 0), v43, *(int16x4_t *)v16.i8, 1), v44, *(int16x4_t *)v16.i8, 2), v45, *(int16x4_t *)v16.i8, 3), v46, v16, 4);
        *(int16x4_t *)v42.i8 = v46;
        v46 = (int16x4_t)vmovl_u8(v65).u64[0];
        v77 = vmlal_lane_s16(v70, v54, v17, 0);
        v78 = vmlal_laneq_s16(v72, v54, v16, 7);
        v79 = vmlal_laneq_s16(v74, v54, v16, 6);
        v80 = vmlal_laneq_s16(v76, v54, v16, 5);
        *(int16x4_t *)v39.i8 = v43;
        v43 = v54;
        v54 = (int16x4_t)vmovl_u8(v67).u64[0];
        v81 = vmlal_lane_s16(v77, v55, v17, 1);
        v82 = vmlal_lane_s16(v78, v55, v17, 0);
        v83 = vmlal_laneq_s16(v79, v55, v16, 7);
        v84 = vmlal_laneq_s16(v80, v55, v16, 6);
        *(int16x4_t *)v40.i8 = v44;
        v44 = v55;
        v55 = (int16x4_t)vmovl_u8(v66).u64[0];
        v85 = vmlal_lane_s16(v81, v56, v17, 2);
        v86 = vmlal_lane_s16(v82, v56, v17, 1);
        v87 = vmlal_lane_s16(v83, v56, v17, 0);
        v88 = vmlal_laneq_s16(v84, v56, v16, 7);
        *(int16x4_t *)v41.i8 = v45;
        v45 = v56;
        v56 = (int16x4_t)vmovl_u8(v68).u64[0];
        v89 = vqrshrn_n_s32(vmlal_lane_s16(v85, v46, v17, 3), 7uLL);
        v90 = vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v86, v46, v17, 2), v54, v17, 3), 7uLL);
        v91 = vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v87, v46, v17, 1), v54, v17, 2), v55, v17, 3), 7uLL);
        v92 = vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v88, v46, v17, 0), v54, v17, 1), v55, v17, 2), v56, v17, 3), 7uLL);
        *(int16x4_t *)v85.i8 = vtrn1_s16(v89, v90);
        v93 = (int32x2_t)vtrn2_s16(v89, v90);
        v94 = (int32x2_t)vtrn1_s16(v91, v92);
        v95 = (int32x2_t)vtrn2_s16(v91, v92);
        *(int32x2_t *)v96.i8 = vzip1_s32(*(int32x2_t *)v85.i8, v94);
        v96.u64[1] = (unint64_t)vzip1_s32(v93, v95);
        *(int32x2_t *)v97.i8 = vzip2_s32(*(int32x2_t *)v85.i8, v94);
        v97.u64[1] = (unint64_t)vzip2_s32(v93, v95);
        v98 = vqmovun_s16(v96);
        _X2[v25 / 4] = v98.i32[0];
        *(_DWORD *)&v24[v25] = v98.i32[1];
        v99 = vqmovun_s16(v97);
        *(_DWORD *)&v22[v25] = v99.i32[0];
        v100 = &v23[v25];
        v25 += 4;
        *(_DWORD *)v100 = v99.i32[1];
      }
      while (a5 != (_DWORD)v25);
      v12 = (int8x8_t *)((char *)v12 + v15);
      _X2 = (_DWORD *)((char *)_X2 + v18);
      v19 += v15;
      v20 += v15;
      v21 += v15;
      v22 += v18;
      v23 += v18;
      v24 += v18;
      a6 -= 4;
    }
    while (a6);
    return result;
  }
  if (v13[7] | *v13 || v13[6] | v13[1])
  {
    v151 = vshrq_n_s16(*(int16x8_t *)v13, 1uLL);
    v152 = vdupq_lane_s16(*(int16x4_t *)v151.i8, 0);
    v153 = vdupq_lane_s16(*(int16x4_t *)v151.i8, 1);
    v154 = vdupq_lane_s16(*(int16x4_t *)v151.i8, 2);
    v155 = vdupq_lane_s16(*(int16x4_t *)v151.i8, 3);
    v156 = vdupq_laneq_s16(v151, 4);
    v157 = vdupq_laneq_s16(v151, 5);
    v158 = vdupq_laneq_s16(v151, 6);
    v159 = vdupq_laneq_s16(v151, 7);
    if (a6 < 8)
    {
      v270 = a6;
      if (!a6)
        return result;
    }
    else
    {
      result = 8 * a2;
      v160.i64[0] = 0x2000200020002;
      v160.i64[1] = 0x2000200020002;
      do
      {
        v161 = 0;
        *(int8x8_t *)v162.i8 = *v12;
        *(int8x8_t *)v163.i8 = *(int8x8_t *)((char *)v12 + a2);
        v164 = (uint64_t *)((char *)v12 + a2 + a2);
        v165.i64[0] = *v164;
        v166 = (uint64_t *)((char *)v164 + a2);
        v167.i64[0] = *v166;
        v168 = (uint64_t *)((char *)v166 + a2);
        v169 = *v168;
        v170 = (uint64_t *)((char *)v168 + a2);
        v171 = *v170;
        v172 = (uint64_t *)((char *)v170 + a2);
        v173 = *v172;
        v174 = *(uint64_t *)((char *)v172 + a2);
        v162.i64[1] = v169;
        __asm { PRFM            #0, [X2] }
        _X19 = (char *)_X2 + a4;
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)_X2 + 2 * a4;
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)_X2 + 3 * a4;
        __asm { PRFM            #0, [X19] }
        _X19 = &_X2[a4];
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)_X2 + 5 * a4;
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)_X2 + 6 * a4;
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)_X2 + 7 * a4;
        __asm { PRFM            #0, [X19] }
        v163.i64[1] = v171;
        v194 = (int16x8_t)vtrn1q_s8(v162, v163);
        v165.i64[1] = v173;
        v195 = (int16x8_t)vtrn2q_s8(v162, v163);
        v167.i64[1] = v174;
        v196 = (int16x8_t)vtrn1q_s8(v165, v167);
        v197 = (int16x8_t)vtrn2q_s8(v165, v167);
        v198 = (int32x4_t)vtrn1q_s16(v194, v196);
        v199 = (int32x4_t)vtrn2q_s16(v194, v196);
        v200 = (int32x4_t)vtrn1q_s16(v195, v197);
        v201 = (int32x4_t)vtrn2q_s16(v195, v197);
        v202 = (int8x16_t)vuzp1q_s32(v198, v200);
        v203 = (int8x16_t)vuzp2q_s32(v198, v200);
        v204 = (int8x16_t)vuzp1q_s32(v199, v201);
        v205 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v199.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL));
        v206 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v202.i8);
        v207 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL));
        v208 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v204.i8);
        v209 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL));
        v210 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v203.i8);
        v211 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL));
        v212 = (int16x8_t)vmovl_u8(v205);
        do
        {
          *(int8x8_t *)v213.i8 = *(int8x8_t *)((char *)&v12[v161 / 2] + 7);
          v214 = (uint64_t *)((char *)&v12[v161 / 2] + a2 + 7);
          v215.i64[0] = *v214;
          v216 = (uint64_t *)((char *)v214 + a2);
          v217.i64[0] = *v216;
          v218.i64[0] = *(uint64_t *)((char *)v216 + a2);
          v219 = (uint64_t *)((char *)v216 + a2 + a2);
          v220 = *v219;
          v221 = (uint64_t *)((char *)v219 + a2);
          v222 = *v221;
          v223 = (uint64_t *)((char *)v221 + a2);
          v213.i64[1] = v220;
          v215.i64[1] = v222;
          v217.i64[1] = *v223;
          v218.i64[1] = *(uint64_t *)((char *)v223 + a2);
          v224 = (int16x8_t)vtrn1q_s8(v213, v215);
          v225 = (int16x8_t)vtrn2q_s8(v213, v215);
          v226 = (int16x8_t)vtrn1q_s8(v217, v218);
          v227 = (int16x8_t)vtrn2q_s8(v217, v218);
          v228 = (int32x4_t)vtrn1q_s16(v224, v226);
          v229 = (int32x4_t)vtrn2q_s16(v224, v226);
          v230 = (int32x4_t)vtrn1q_s16(v225, v227);
          v231 = (int32x4_t)vtrn2q_s16(v225, v227);
          v232 = (int8x16_t)vuzp1q_s32(v228, v230);
          v233 = (int8x16_t)vuzp2q_s32(v228, v230);
          v234 = (int8x16_t)vuzp1q_s32(v229, v231);
          v235 = (int8x16_t)vuzp2q_s32(v229, v231);
          v236 = (uint8x8_t)vextq_s8(v232, v232, 8uLL).u64[0];
          v237 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v211, v157), v212, v158), v210, v156), v209, v155), v208, v154), v207, v153), v206, v152);
          v238 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v211, v156), v212, v157), v210, v155), v209, v154), v208, v153), v207, v152);
          v239 = (uint8x8_t)vextq_s8(v233, v233, 8uLL).u64[0];
          v240 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v211, v155), v212, v156), v210, v154), v209, v153);
          v241 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v211, v154), v212, v155), v210, v153), v209, v152);
          v242 = (uint8x8_t)vextq_s8(v235, v235, 8uLL).u64[0];
          v243 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v232.i8);
          v206 = (int16x8_t)vmovl_u8(v236);
          v207 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v234.i8);
          v209 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v233.i8);
          v244 = vmlaq_s16(v240, v208, v152);
          v208 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v234, v234, 8uLL));
          v245 = vmulq_s16(v211, v153);
          v246 = vmulq_s16(v211, v152);
          v211 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v235.i8);
          v247 = vmlaq_s16(vmlaq_s16(v245, v212, v154), v210, v152);
          v210 = (int16x8_t)vmovl_u8(v239);
          v248 = vmlaq_s16(v246, v212, v153);
          v249 = vmlaq_s16(vmulq_s16(v153, v243), v212, v152);
          v212 = (int16x8_t)vmovl_u8(v242);
          v250 = vqrshrun_high_n_s16(vqrshrun_n_s16(vaddq_s16(vmlaq_s16(v237, v159, v243), v160), 6uLL), vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v247, v155, v243), v156, v206), v157, v207), v158, v208), v159, v209), v160), 6uLL);
          v251 = vqrshrun_high_n_s16(vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(v238, v158, v243), v159, v206), v160), 6uLL), vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v248, v154, v243), v155, v206), v156, v207), v157, v208), v158, v209), v159, v210), v160), 6uLL);
          v252 = (int16x8_t)vtrn1q_s8(v250, v251);
          v253 = (int16x8_t)vtrn2q_s8(v250, v251);
          v254 = vqrshrun_high_n_s16(vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v244, v157, v243), v158, v206), v159, v207), v160), 6uLL), vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v249, v154, v206), v155, v207), v156, v208), v157, v209), v158, v210), v159, v211), v160), 6uLL);
          v255 = vqrshrun_high_n_s16(vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v241, v156, v243), v157, v206), v158, v207), v159, v208), v160), 6uLL), vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v153, v206), v152, v243), v154, v207), v155, v208), v156, v209), v157, v210), v158, v211), v159, v212),
                     v160),
                   6uLL);
          v256 = (int16x8_t)vtrn1q_s8(v254, v255);
          v257 = (int16x8_t)vtrn2q_s8(v254, v255);
          v258 = (int32x4_t)vtrn1q_s16(v252, v256);
          v259 = (int32x4_t)vtrn2q_s16(v252, v256);
          v260 = (int32x4_t)vtrn1q_s16(v253, v257);
          v261 = (int32x4_t)vtrn2q_s16(v253, v257);
          v262 = (int8x16_t)vuzp1q_s32(v258, v260);
          v263 = (int8x16_t)vuzp2q_s32(v258, v260);
          v264 = (int8x16_t)vuzp1q_s32(v259, v261);
          v265 = (int8x16_t)vuzp2q_s32(v259, v261);
          *(_QWORD *)&_X2[v161] = v262.i64[0];
          v266 = (_QWORD *)((char *)&_X2[v161] + a4);
          *v266 = vextq_s8(v262, v262, 8uLL).u64[0];
          v267 = (_QWORD *)((char *)v266 + a4);
          v268 = (_QWORD *)((char *)v267 + a4 + a4);
          *v267 = v264.i64[0];
          *(_QWORD *)((char *)v267 + a4) = vextq_s8(v264, v264, 8uLL).u64[0];
          v269 = (_QWORD *)((char *)v268 + a4 + a4);
          v161 += 2;
          *v268 = v263.i64[0];
          *(_QWORD *)((char *)v268 + a4) = vextq_s8(v263, v263, 8uLL).u64[0];
          *v269 = v265.i64[0];
          *(_QWORD *)((char *)v269 + a4) = vextq_s8(v265, v265, 8uLL).u64[0];
        }
        while (a5 != (_DWORD)(v161 * 4));
        v12 = (int8x8_t *)((char *)v12 + result);
        _X2 += 2 * a4;
        v270 = a6 - 8;
        v271 = a6 <= 15;
        a6 -= 8;
      }
      while (!v271);
      if (!v270)
        return result;
    }
    v272.i64[0] = 0x2000200020002;
    v272.i64[1] = 0x2000200020002;
    do
    {
      v273 = 0;
      v274 = (int8x16_t)vmovl_u8((uint8x8_t)*v12);
      __asm { PRFM            #0, [X2] }
      do
      {
        v276 = (int8x16_t)vmovl_u8((uint8x8_t)v12[v273 / 2 + 1]);
        *(int8x8_t *)&_X2[v273] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)vextq_s8(v274, v276, 2uLL), v153), (int16x8_t)v274, v152), (int16x8_t)vextq_s8(v274, v276, 4uLL), v154), (int16x8_t)vextq_s8(v274, v276, 6uLL), v155), (int16x8_t)vextq_s8(v274, v276, 8uLL), v156), (int16x8_t)vextq_s8(v274, v276, 0xAuLL), v157),
                                          (int16x8_t)vextq_s8(v274, v276, 0xCuLL),
                                          v158),
                                        (int16x8_t)vextq_s8(v274, v276, 0xEuLL),
                                        v159),
                                      v272),
                                    6uLL);
        v273 += 2;
        v274 = v276;
      }
      while (a5 != (_DWORD)(v273 * 4));
      v12 = (int8x8_t *)((char *)v12 + a2);
      _X2 = (_DWORD *)((char *)_X2 + a4);
      --v270;
    }
    while (v270);
    return result;
  }
  v277 = vshr_n_s16(*(int16x4_t *)(v13 + 2), 1uLL);
  v278 = 2 * a4;
  if (a5 == 4)
  {
    v279 = (__int32 *)((char *)v12 + 2);
    v280 = vdupq_lane_s16(v277, 0);
    v281 = vdupq_lane_s16(v277, 1);
    v282 = vdupq_lane_s16(v277, 2);
    v283 = vdupq_lane_s16(v277, 3);
    v284.i64[0] = 0x2000200020002;
    v284.i64[1] = 0x2000200020002;
    do
    {
      v285.i32[0] = *v279;
      v285.i32[1] = *(__int32 *)((char *)v279 + a2);
      v286.i32[0] = *(__int32 *)((char *)v279 + 1);
      v286.i32[1] = *(__int32 *)((char *)v279 + a2 + 1);
      v287.i32[0] = *(__int32 *)((char *)v279 + 2);
      v287.i32[1] = *(__int32 *)((char *)v279 + a2 + 2);
      v288.i32[0] = *(__int32 *)((char *)v279 + 3);
      v288.i32[1] = *(__int32 *)((char *)v279 + a2 + 3);
      v289 = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v281, (int16x8_t)vmovl_u8(v286)), v280, (int16x8_t)vmovl_u8(v285)), v282, (int16x8_t)vmovl_u8(v287)), v283, (int16x8_t)vmovl_u8(v288)), v284), 6uLL);
      *_X2 = v289.i32[0];
      *(_DWORD *)((char *)_X2 + a4) = v289.i32[1];
      v279 = (__int32 *)((char *)v279 + 2 * a2);
      _X2 = (_DWORD *)((char *)_X2 + v278);
      a6 -= 2;
    }
    while (a6);
  }
  else
  {
    v290 = 2 * a2;
    v291 = vdupq_lane_s16(v277, 0);
    v292 = vdupq_lane_s16(v277, 1);
    v293 = vdupq_lane_s16(v277, 2);
    v294 = vdupq_lane_s16(v277, 3);
    v295 = (char *)_X2 + a4;
    v296 = a2 - v11 + result + 2;
    v297.i64[0] = 0x2000200020002;
    v297.i64[1] = 0x2000200020002;
    do
    {
      v298 = 0;
      do
      {
        v299 = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v292, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v296 + v298 + 1))), v291, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v296 + v298))), v293, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v296 + v298 + 2))), v294, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v296 + v298 + 3))), v297), 6uLL);
        *(int8x8_t *)&_X2[v298 / 4] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v292, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v12[v298 / 8] + 3))), v291, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v12[v298 / 8] + 2))), v293, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v12[v298 / 8] + 4))), v294, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v12[v298 / 8] + 5))), v297), 6uLL);
        *(int8x8_t *)&v295[v298] = v299;
        v298 += 8;
      }
      while (a5 != (_DWORD)v298);
      _X2 = (_DWORD *)((char *)_X2 + v278);
      v295 += v278;
      v12 = (int8x8_t *)((char *)v12 + v290);
      v296 += v290;
      a6 -= 2;
    }
    while (a6);
  }
  return result;
}

unint64_t av1_convolve_y_sr_neon(unint64_t result, int a2, _DWORD *a3, int a4, int a5, int a6, uint64_t a7, char a8, double a9, uint8x8_t a10, uint8x8_t a11, uint8x8_t a12, uint8x8_t a13, uint8x8_t a14, uint8x8_t a15)
{
  int16x4_t v15;
  int16x4_t v16;
  unsigned int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  __int16 *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint8x8_t *v47;
  __int128 v48;
  int16x4_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  uint8x8_t v52;
  uint8x8_t *v53;
  uint8x8_t v54;
  uint8x8_t *v55;
  uint8x8_t v56;
  uint8x8_t *v57;
  uint8x8_t v58;
  uint8x8_t *v59;
  uint8x8_t v60;
  uint8x8_t *v61;
  uint8x8_t v62;
  uint8x8_t *v63;
  uint8x8_t v64;
  uint8x8_t *v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  unint64_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v76;
  uint8x8_t *v77;
  int16x4_t v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int16x8_t v98;
  int16x8_t v99;
  _DWORD *v100;
  int16x4_t v101;
  __int32 *v102;
  uint8x8_t v103;
  uint8x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  __int32 *v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint8x8_t v112;
  uint8x8_t v113;
  uint8x8_t v114;
  uint8x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  unint64_t v120;
  uint64_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int16x8_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint8x8_t *v147;
  uint8x8_t v148;
  uint8x8_t *v149;
  uint8x8_t v150;
  uint8x8_t *v151;
  uint8x8_t v152;
  uint8x8_t *v153;
  uint8x8_t v154;
  uint8x8_t *v155;
  uint8x8_t v156;
  uint8x8_t *v157;
  uint8x8_t v158;
  uint8x8_t *v159;
  uint8x8_t v160;
  uint8x8_t *v161;
  uint8x8_t v162;
  uint8x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  _DWORD *v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  int16x8_t v179;
  char *v180;
  char *v181;
  char *v182;
  int v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  uint64_t v202;
  uint8x8_t *v203;
  uint64_t v204;
  int16x4_t v205;
  int16x4_t v206;
  int16x4_t v207;
  int16x4_t v208;
  int16x4_t v209;
  int16x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int16x4_t v213;
  int16x4_t v214;
  int16x4_t v215;
  uint8x8_t *v216;
  int16x4_t v217;
  unsigned int v218;
  int16x4_t v219;
  int16x4_t v220;
  int16x4_t v221;
  int16x4_t v222;
  int16x4_t v223;
  int16x4_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int8x8_t v227;
  int8x8_t v228;
  _DWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int16x8_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  _DWORD *v250;
  int16x8_t v251;
  int16x8_t v252;
  char *v253;
  unint64_t v254;
  char *v255;
  char *v256;
  int16x8_t v257;
  char *v258;
  char *v259;
  char *v260;
  int v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  uint8x8_t *v266;
  uint64_t v267;
  uint64_t v268;
  int16x4_t v269;
  int16x4_t v270;
  int16x4_t v271;
  int16x4_t v272;
  int16x4_t v273;
  int16x4_t v274;
  int16x4_t v275;
  int16x4_t v276;
  int16x4_t v277;
  int16x4_t v278;
  int16x4_t v279;
  int16x4_t v280;
  int16x4_t v281;
  int16x4_t v282;
  int16x4_t v283;
  uint8x8_t *v284;
  unsigned int v285;
  int16x4_t v286;
  int16x4_t v287;
  int16x4_t v288;
  int16x4_t v289;
  int16x4_t v290;
  int16x4_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int8x8_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int16x8_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  uint8x8_t *v317;
  uint8x8_t v318;
  uint8x8_t *v319;
  uint8x8_t v320;
  uint8x8_t v321;
  int16x8_t v322;
  _DWORD *v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  char *v327;
  unint64_t v328;
  char *v329;
  char *v330;
  int16x8_t v331;
  char *v332;
  char *v333;
  char *v334;
  int v335;
  int16x8_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int16x8_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  uint8x8_t *v370;
  uint8x8_t v371;
  uint8x8_t *v372;
  uint8x8_t v373;
  uint8x8_t *v374;
  uint8x8_t v375;
  uint8x8_t *v376;
  uint8x8_t v377;
  uint8x8_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  _DWORD *v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  char *v386;
  unint64_t v387;
  char *v388;
  char *v389;
  int16x8_t v390;
  char *v391;
  char *v392;
  char *v393;
  int v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x4_t v411;
  int16x4_t v412;
  int16x4_t v413;
  unint64_t v414;
  int16x4_t v415;

  v414 = result;
  if (a5 == 2 || a6 == 2)
  {
    if (a5 < 1 || a6 < 1)
      return result;
    v19 = 0;
    v20 = *(unsigned __int16 *)(a7 + 8);
    v21 = a2;
    v22 = a5;
    v23 = (char *)(result + (int)(2 - (v20 >> 1)) * (uint64_t)a2);
    v24 = 2 * a2;
    v25 = *(_QWORD *)a7 + 2 * (a8 & 0xF) * v20;
    v26 = 1 - (v20 >> 1);
    v27 = (char *)(result + (int)v26 * (uint64_t)a2);
LABEL_10:
    v28 = 0;
    v29 = v414;
    v30 = v27;
    v31 = v23;
    while (1)
    {
      v34 = *(unsigned __int16 *)(a7 + 8);
      if (*(_WORD *)(a7 + 8))
      {
        if ((_DWORD)v34 == 1)
        {
          v35 = 0;
          v32 = 0;
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v38 = 0;
          v35 = (unsigned __int16)v34 & 0xFFFE;
          v39 = (__int16 *)(v25 + 2);
          v40 = v35;
          do
          {
            result = *v39;
            v37 += v30[v36] * *(v39 - 1);
            v38 += v31[v36] * (_DWORD)result;
            v36 += v24;
            v39 += 2;
            v40 -= 2;
          }
          while (v40);
          v32 = v38 + v37;
          if (v35 == v34)
            goto LABEL_12;
        }
        v41 = v34 - v35;
        v42 = (unsigned __int8 *)(v29 + v21 * (v26 + v35));
        v43 = (__int16 *)(v25 + 2 * v35);
        do
        {
          v44 = *v43++;
          v32 += *v42 * v44;
          v42 += v21;
          --v41;
        }
        while (v41);
      }
      else
      {
        v32 = 0;
      }
LABEL_12:
      v33 = ((v32 + 64) >> 7) & ~((v32 + 64) >> 31);
      if (v33 >= 255)
        LOBYTE(v33) = -1;
      *((_BYTE *)a3 + v28 + v19 * a4) = v33;
      ++v28;
      ++v31;
      ++v30;
      ++v29;
      if (v28 == v22)
      {
        ++v19;
        v23 += v21;
        v27 += v21;
        ++v26;
        if (v19 == a6)
          return result;
        goto LABEL_10;
      }
    }
  }
  v17 = *(unsigned __int16 *)(a7 + 8);
  v18 = (unsigned __int16 *)(*(_QWORD *)a7 + 2 * (a8 & 0xF) * v17);
  if (v17 != 12)
  {
    if (v18[7] | *v18)
    {
      v17 = 8;
    }
    else if (v18[6] | v18[1])
    {
      v17 = 6;
    }
    else if (v18[5] | v18[2])
    {
      v17 = 4;
    }
    else
    {
      v17 = 2;
    }
  }
  if (v17 <= 4)
    v45 = 4;
  else
    v45 = v17;
  v46 = (int)(((v45 >> 1) - 1) * a2);
  v47 = (uint8x8_t *)(result - v46);
  v48 = *(_OWORD *)v18;
  if (v17 < 9)
  {
    if (v17 > 4)
    {
      v201 = vshrq_n_s16((int16x8_t)v48, 1uLL);
      if (v17 == 6)
      {
        if (a5 >= 5)
        {
          v295 = 0;
          v296 = a2;
          v297 = 5 * a2;
          v298 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 1);
          v299 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 2);
          v300 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 3);
          v301 = vdupq_laneq_s16(v201, 4);
          v302 = vdupq_laneq_s16(v201, 5);
          v303 = 4 * a2;
          v304 = v297 + 2 * a2;
          v305 = v304 + a2 - v46;
          v306 = v304 - v46;
          v307 = vdupq_laneq_s16(v201, 6);
          v308 = a2 + v297 - v46;
          v309 = v297 - v46;
          v310 = 4 * a4;
          v311 = (char *)(result + v305);
          v312 = (char *)(result + v306);
          v313 = (char *)(result + v308);
          v314 = (char *)(result + v309);
          v315 = (char *)a3 + 3 * a4;
          result = (unint64_t)a3 + 2 * a4;
          v316 = (char *)a3 + a4;
          do
          {
            v317 = (uint8x8_t *)((char *)v47 + v296 + v296);
            v318 = *v317;
            v319 = (uint8x8_t *)((char *)v317 + v296);
            v320 = *v319;
            v321 = *(uint8x8_t *)((char *)v319 + v296);
            v322 = (int16x8_t)vmovl_u8(*v47);
            v323 = a3;
            v324 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + v296));
            v325 = (int16x8_t)vmovl_u8(v318);
            v326 = (int16x8_t)vmovl_u8(v320);
            v327 = v316;
            v328 = result;
            v329 = v315;
            v330 = v314;
            v331 = (int16x8_t)vmovl_u8(v321);
            v332 = v313;
            v333 = v312;
            v334 = v311;
            v335 = a6;
            do
            {
              v336 = vmlaq_s16(vmulq_s16(v322, v298), v324, v299);
              v337 = vmulq_s16(v324, v298);
              v324 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v330[v295]);
              v338 = vmlaq_s16(v336, v325, v300);
              v339 = vmlaq_s16(v337, v325, v299);
              v340 = vmulq_s16(v325, v298);
              v325 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v332[v295]);
              v341 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v333[v295]);
              v342 = vmlaq_s16(vmlaq_s16(v338, v326, v301), v331, v302);
              v343 = vmlaq_s16(vmlaq_s16(v339, v326, v300), v331, v301);
              v344 = vmlaq_s16(vmlaq_s16(v340, v326, v299), v331, v300);
              v345 = vmlaq_s16(vmulq_s16(v326, v298), v331, v299);
              v322 = v331;
              v331 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v334[v295]);
              *(int8x8_t *)&v323[v295 / 4] = vqrshrun_n_s16(vmlaq_s16(v342, v307, v324), 6uLL);
              *(int8x8_t *)&v327[v295] = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(v343, v302, v324), v307, v325), 6uLL);
              *(int8x8_t *)(v328 + v295) = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v344, v301, v324), v302, v325), v307, v341), 6uLL);
              *(int8x8_t *)&v329[v295] = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v345, v300, v324), v301, v325), v302, v341), v307, v331), 6uLL);
              v334 += v303;
              v333 += v303;
              v332 += v303;
              v330 += v303;
              v329 += v310;
              v328 += v310;
              v327 += v310;
              v323 = (_DWORD *)((char *)v323 + v310);
              v326 = v341;
              v335 -= 4;
            }
            while (v335);
            ++v47;
            v295 += 8;
            a5 -= 8;
          }
          while (a5);
        }
        else
        {
          v202 = a2;
          v203 = (uint8x8_t *)((char *)v47 + 5 * a2);
          a10.i32[0] = *(__int32 *)((char *)v47->i32 + a2);
          v204 = 2 * a2;
          a11.i32[0] = *(__int32 *)((char *)v47->i32 + v204);
          a12.i32[0] = *(__int32 *)((char *)v47->i32 + 3 * a2);
          a13.i32[0] = v47->i32[v202];
          v205 = (int16x4_t)vmovl_u8((uint8x8_t)v47->u32[0]).u64[0];
          v206 = (int16x4_t)vmovl_u8(a10).u64[0];
          v207 = (int16x4_t)vmovl_u8(a11).u64[0];
          v208 = (int16x4_t)vmovl_u8(a12).u64[0];
          v209 = (int16x4_t)vmovl_u8(a13).u64[0];
          v210 = vdup_lane_s16(*(int16x4_t *)v201.i8, 1);
          v211 = vdup_lane_s16(*(int16x4_t *)v201.i8, 2);
          v212 = vdup_lane_s16(*(int16x4_t *)v201.i8, 3);
          v213 = vdup_laneq_s16(v201, 4);
          v214 = vdup_laneq_s16(v201, 5);
          v215 = vdup_laneq_s16(v201, 6);
          v216 = v203;
          do
          {
            v217 = v209;
            v218 = v216->i32[0];
            v216 = (uint8x8_t *)((char *)v216 + v202 * 4);
            v15.i32[0] = *(__int32 *)((char *)v203->i32 + a2);
            result = (unint64_t)v203 + v204;
            v16.i32[0] = *(__int32 *)((char *)v203->i32 + 2 * a2);
            v219 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v217, v214), v208, v213), v207, v212), v206, v211);
            v220 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v217, v213), v208, v212), v207, v211), v206, v210);
            v221 = vmla_s16(vmla_s16(vmul_s16(v217, v212), v208, v211), v207, v210);
            v222 = vmla_s16(vmul_s16(v217, v211), v208, v210);
            v208.i32[0] = *(__int32 *)((char *)v203->i32 + 3 * a2);
            v223 = (int16x4_t)vmovl_u8((uint8x8_t)v218).u64[0];
            v15 = (int16x4_t)vmovl_u8((uint8x8_t)v15).u64[0];
            v16 = (int16x4_t)vmovl_u8((uint8x8_t)v16).u64[0];
            v224 = vmla_s16(v219, v205, v210);
            v205 = v217;
            v209 = (int16x4_t)vmovl_u8((uint8x8_t)v208).u64[0];
            *(int16x4_t *)v225.i8 = vmla_s16(v224, v223, v215);
            *(int16x4_t *)v226.i8 = vmla_s16(vmla_s16(vmla_s16(v221, v223, v213), v15, v214), v16, v215);
            v225.u64[1] = (unint64_t)vmla_s16(vmla_s16(v220, v223, v214), v15, v215);
            v227 = vqrshrun_n_s16(v225, 6uLL);
            v226.u64[1] = (unint64_t)vmla_s16(vmla_s16(vmla_s16(vmla_s16(v222, v223, v212), v15, v213), v16, v214), v209, v215);
            *a3 = v227.i32[0];
            *(_DWORD *)((char *)a3 + a4) = v227.i32[1];
            v228 = vqrshrun_n_s16(v226, 6uLL);
            *(_DWORD *)((char *)a3 + 2 * a4) = v228.i32[0];
            v229 = (_DWORD *)((char *)a3 + 3 * a4);
            a3 += a4;
            v208 = v16;
            *v229 = v228.i32[1];
            v207 = v15;
            v206 = v223;
            v203 = v216;
            a6 -= 4;
          }
          while (a6);
        }
      }
      else if (a5 >= 5)
      {
        v346 = 0;
        v347 = a2;
        v348 = 7 * a2;
        v349 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 0);
        v350 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 1);
        v351 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 2);
        v352 = vdupq_lane_s16(*(int16x4_t *)v201.i8, 3);
        v353 = vdupq_laneq_s16(v201, 4);
        v354 = vdupq_laneq_s16(v201, 5);
        v355 = vdupq_laneq_s16(v201, 6);
        v356 = 4 * a2;
        v357 = v348 + 2 * a2;
        v358 = v357 + a2 - v46;
        v359 = v357 - v46;
        v360 = vdupq_laneq_s16(v201, 7);
        v361 = a2 + v348 - v46;
        v362 = v348 - v46;
        v363 = 4 * a4;
        v364 = (char *)(result + v358);
        v365 = (char *)(result + v359);
        v366 = (char *)(result + v361);
        v367 = (char *)(result + v362);
        v368 = (char *)a3 + 3 * a4;
        result = (unint64_t)a3 + 2 * a4;
        v369 = (char *)a3 + a4;
        do
        {
          v370 = (uint8x8_t *)((char *)v47 + v347 + v347);
          v371 = *v370;
          v372 = (uint8x8_t *)((char *)v370 + v347);
          v373 = *v372;
          v374 = (uint8x8_t *)((char *)v372 + v347);
          v375 = *v374;
          v376 = (uint8x8_t *)((char *)v374 + v347);
          v377 = *v376;
          v378 = *(uint8x8_t *)((char *)v376 + v347);
          v379 = (int16x8_t)vmovl_u8(*v47);
          v380 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + v347));
          v381 = (int16x8_t)vmovl_u8(v371);
          v382 = a3;
          v383 = (int16x8_t)vmovl_u8(v373);
          v384 = (int16x8_t)vmovl_u8(v375);
          v385 = (int16x8_t)vmovl_u8(v377);
          v386 = v369;
          v387 = result;
          v388 = v368;
          v389 = v367;
          v390 = (int16x8_t)vmovl_u8(v378);
          v391 = v366;
          v392 = v365;
          v393 = v364;
          v394 = a6;
          do
          {
            v395 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v379, v349), v380, v350), v381, v351), v383, v352);
            v396 = vmlaq_s16(vmlaq_s16(vmulq_s16(v380, v349), v381, v350), v383, v351);
            v397 = vmlaq_s16(vmulq_s16(v381, v349), v383, v350);
            v398 = vmulq_s16(v383, v349);
            v383 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v389[v346]);
            v399 = vmlaq_s16(v395, v384, v353);
            v400 = vmlaq_s16(v396, v384, v352);
            v401 = vmlaq_s16(v397, v384, v351);
            v402 = vmlaq_s16(v398, v384, v350);
            v379 = v384;
            v384 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v391[v346]);
            v403 = vmlaq_s16(v399, v385, v354);
            v404 = vmlaq_s16(v400, v385, v353);
            v405 = vmlaq_s16(v401, v385, v352);
            v406 = vmlaq_s16(v402, v385, v351);
            v380 = v385;
            v385 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v392[v346]);
            v407 = vmlaq_s16(v403, v390, v355);
            v408 = vmlaq_s16(v404, v390, v354);
            v409 = vmlaq_s16(v405, v390, v353);
            v410 = vmlaq_s16(v406, v390, v352);
            v381 = v390;
            v390 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v393[v346]);
            *(int8x8_t *)&v382[v346 / 4] = vqrshrun_n_s16(vmlaq_s16(v407, v360, v383), 6uLL);
            *(int8x8_t *)&v386[v346] = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(v408, v355, v383), v360, v384), 6uLL);
            *(int8x8_t *)(v387 + v346) = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v409, v354, v383), v355, v384), v360, v385), 6uLL);
            *(int8x8_t *)&v388[v346] = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v410, v353, v383), v354, v384), v355, v385), v360, v390), 6uLL);
            v393 += v356;
            v392 += v356;
            v391 += v356;
            v389 += v356;
            v388 += v363;
            v387 += v363;
            v386 += v363;
            v382 = (_DWORD *)((char *)v382 + v363);
            v394 -= 4;
          }
          while (v394);
          ++v47;
          v346 += 8;
          a5 -= 8;
        }
        while (a5);
      }
      else
      {
        v266 = (uint8x8_t *)((char *)v47 + 7 * a2);
        a10.i32[0] = *(__int32 *)((char *)v47->i32 + a2);
        v267 = 2 * a2;
        a11.i32[0] = *(__int32 *)((char *)v47->i32 + v267);
        a12.i32[0] = *(__int32 *)((char *)v47->i32 + 3 * a2);
        v268 = a2;
        a13.i32[0] = v47->i32[v268];
        a14.i32[0] = *(__int32 *)((char *)v47->i32 + 5 * a2);
        a15.i32[0] = *(__int32 *)((char *)v47->i32 + 6 * a2);
        v269 = (int16x4_t)vmovl_u8((uint8x8_t)v47->u32[0]).u64[0];
        v270 = (int16x4_t)vmovl_u8(a10).u64[0];
        v271 = (int16x4_t)vmovl_u8(a11).u64[0];
        v272 = (int16x4_t)vmovl_u8(a12).u64[0];
        v273 = (int16x4_t)vmovl_u8(a13).u64[0];
        v274 = (int16x4_t)vmovl_u8(a14).u64[0];
        v275 = (int16x4_t)vmovl_u8(a15).u64[0];
        v276 = vdup_lane_s16(*(int16x4_t *)v201.i8, 0);
        v277 = vdup_lane_s16(*(int16x4_t *)v201.i8, 1);
        v278 = vdup_lane_s16(*(int16x4_t *)v201.i8, 2);
        v279 = vdup_lane_s16(*(int16x4_t *)v201.i8, 3);
        v280 = vdup_laneq_s16(v201, 4);
        v281 = vdup_laneq_s16(v201, 5);
        v282 = vdup_laneq_s16(v201, 6);
        v283 = vdup_laneq_s16(v201, 7);
        v284 = v266;
        do
        {
          v285 = v284->i32[0];
          v284 = (uint8x8_t *)((char *)v284 + v268 * 4);
          v15.i32[0] = *(__int32 *)((char *)v266->i32 + a2);
          result = (unint64_t)v266 + v267;
          v16.i32[0] = *(__int32 *)((char *)v266->i32 + 2 * a2);
          v286 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v275, v282), v274, v281), v273, v280), v272, v279), v271, v278), v270, v277), v269, v276);
          v287 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v275, v281), v274, v280), v273, v279), v272, v278), v271, v277), v270, v276);
          v288 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v275, v280), v274, v279), v273, v278), v272, v277);
          v289 = vmla_s16(vmla_s16(vmla_s16(vmul_s16(v275, v279), v274, v278), v273, v277), v272, v276);
          v272.i32[0] = *(__int32 *)((char *)v266->i32 + 3 * a2);
          v290 = (int16x4_t)vmovl_u8((uint8x8_t)v285).u64[0];
          v269 = v273;
          v273 = (int16x4_t)vmovl_u8((uint8x8_t)v15).u64[0];
          v270 = v274;
          v274 = (int16x4_t)vmovl_u8((uint8x8_t)v16).u64[0];
          v291 = vmla_s16(v288, v271, v276);
          v271 = v275;
          v275 = (int16x4_t)vmovl_u8((uint8x8_t)v272).u64[0];
          *(int16x4_t *)v292.i8 = vmla_s16(v286, v290, v283);
          *(int16x4_t *)v293.i8 = vmla_s16(vmla_s16(vmla_s16(v291, v290, v281), v273, v282), v274, v283);
          v292.u64[1] = (unint64_t)vmla_s16(vmla_s16(v287, v290, v282), v273, v283);
          v294 = vqrshrun_n_s16(v292, 6uLL);
          v293.u64[1] = (unint64_t)vmla_s16(vmla_s16(vmla_s16(vmla_s16(v289, v290, v280), v273, v281), v274, v282), v275, v283);
          v15 = (int16x4_t)vqrshrun_n_s16(v293, 6uLL);
          *a3 = v294.i32[0];
          *(_DWORD *)((char *)a3 + a4) = v294.i32[1];
          *(_DWORD *)((char *)a3 + 2 * a4) = v15.i32[0];
          *(_DWORD *)((char *)a3 + 3 * a4) = v15.i32[1];
          a3 += a4;
          v272 = v290;
          v266 = v284;
          a6 -= 4;
        }
        while (a6);
      }
    }
    else
    {
      v101 = vshr_n_s16((int16x4_t)(v48 >> 32), 1uLL);
      if (a5 == 4)
      {
        v102 = (__int32 *)((char *)v47 + a2);
        v103.i32[0] = v47->i32[0];
        v103.i32[1] = *v102;
        v104.i32[0] = *v102;
        v104.i32[1] = *(__int32 *)((char *)v102 + a2);
        v105 = (int16x8_t)vmovl_u8(v103);
        v106 = (int16x8_t)vmovl_u8(v104);
        v107 = (__int32 *)((char *)v47 + 2 * a2);
        v108 = vdupq_lane_s16(v101, 0);
        v109 = vdupq_lane_s16(v101, 1);
        v110 = vdupq_lane_s16(v101, 2);
        v111 = vdupq_lane_s16(v101, 3);
        do
        {
          v112.i32[0] = *v107;
          v112.i32[1] = *(__int32 *)((char *)v107 + a2);
          result = *(unsigned int *)((char *)v107 + a2 + a2);
          v113.i32[0] = v112.i32[1];
          v113.i32[1] = *(__int32 *)((char *)v107 + a2 + a2);
          v114.i32[0] = v113.i32[1];
          v114.i32[1] = *(__int32 *)((char *)v107 + 2 * a2 + a2);
          v115.i32[0] = v114.i32[1];
          v115.i32[1] = *(__int32 *)((char *)v107 + 3 * a2 + a2);
          v116 = (int16x8_t)vmovl_u8(v112);
          v117 = (int16x8_t)vmovl_u8(v113);
          v118 = vmlaq_s16(vmulq_s16(v106, v109), v105, v108);
          v105 = (int16x8_t)vmovl_u8(v114);
          v119 = (int16x8_t)vmovl_u8(v115);
          *(int8x8_t *)v118.i8 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(v118, v110, v116), v111, v117), 6uLL);
          *(int8x8_t *)v116.i8 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v108, v116), v109, v117), v110, v105), v111, v119), 6uLL);
          *a3 = v118.i32[0];
          *(_DWORD *)((char *)a3 + a4) = v118.i32[1];
          *(_DWORD *)((char *)a3 + 2 * a4) = v116.i32[0];
          v107 += a2;
          *(_DWORD *)((char *)a3 + 2 * a4 + a4) = v116.i32[1];
          a3 += a4;
          v106 = v119;
          a6 -= 4;
        }
        while (a6);
      }
      else
      {
        v230 = 0;
        v231 = a2;
        v232 = 3 * a2;
        v233 = vdupq_lane_s16(v101, 0);
        v234 = vdupq_lane_s16(v101, 1);
        v235 = vdupq_lane_s16(v101, 2);
        v236 = 4 * a2;
        v237 = v232 + 2 * a2;
        v238 = v237 + a2 - v46;
        v239 = v237 - v46;
        v240 = vdupq_lane_s16(v101, 3);
        v241 = a2 + v232 - v46;
        v242 = v232 - v46;
        v243 = 4 * a4;
        v244 = (char *)(result + v238);
        v245 = (char *)(result + v239);
        v246 = (char *)(result + v241);
        v247 = (char *)(result + v242);
        v248 = (char *)a3 + 3 * a4;
        result = (unint64_t)a3 + 2 * a4;
        v249 = (char *)a3 + a4;
        do
        {
          v250 = a3;
          v251 = (int16x8_t)vmovl_u8(*v47);
          v252 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + v231));
          v253 = v249;
          v254 = result;
          v255 = v248;
          v256 = v247;
          v257 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + v231 + v231));
          v258 = v246;
          v259 = v245;
          v260 = v244;
          v261 = a6;
          do
          {
            v262 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v256[v230]);
            v263 = vmlaq_s16(vmlaq_s16(vmulq_s16(v252, v234), v257, v235), v251, v233);
            v251 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v258[v230]);
            v264 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v259[v230]);
            v265 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v260[v230]);
            *(int8x8_t *)&v250[v230 / 4] = vqrshrun_n_s16(vmlaq_s16(v263, v240, v262), 6uLL);
            *(int8x8_t *)&v253[v230] = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v252, v233), v257, v234), v235, v262), v240, v251), 6uLL);
            *(int8x8_t *)(v254 + v230) = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v257, v233), v234, v262), v235, v251), v240, v264), 6uLL);
            *(int8x8_t *)&v255[v230] = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v233, v262), v234, v251), v235, v264), v240, v265), 6uLL);
            v260 += v236;
            v259 += v236;
            v258 += v236;
            v256 += v236;
            v255 += v243;
            v254 += v243;
            v253 += v243;
            v250 = (_DWORD *)((char *)v250 + v243);
            v252 = v264;
            v257 = v265;
            v261 -= 4;
          }
          while (v261);
          ++v47;
          v230 += 8;
          a5 -= 8;
        }
        while (a5);
      }
    }
  }
  else
  {
    v49 = *(int16x4_t *)(v18 + 8);
    v50 = a2;
    if (a5 >= 5)
    {
      v120 = 0;
      v121 = 11 * a2;
      v122 = vdupq_lane_s16(*(int16x4_t *)&v48, 0);
      v123 = vdupq_lane_s16(*(int16x4_t *)&v48, 1);
      v124 = vdupq_lane_s16(*(int16x4_t *)&v48, 2);
      v125 = vdupq_lane_s16(*(int16x4_t *)&v48, 3);
      v126 = vdupq_laneq_s16((int16x8_t)v48, 4);
      v127 = vdupq_laneq_s16((int16x8_t)v48, 7);
      v128 = vdupq_lane_s16(v49, 0);
      v129 = vdupq_lane_s16(v49, 1);
      v130 = vdupq_lane_s16(v49, 2);
      v131 = vdupq_lane_s16(v49, 3);
      v132 = vdupq_laneq_s16((int16x8_t)v48, 5);
      v133 = 4 * a2;
      v134 = v121 + 2 * a2;
      v135 = v134 + a2 - v46;
      v136 = v134 - v46;
      v137 = vdupq_laneq_s16((int16x8_t)v48, 6);
      v138 = a2 + v121 - v46;
      v139 = v121 - v46;
      v140 = 4 * a4;
      v141 = (char *)(result + v135);
      v142 = (char *)(result + v136);
      v143 = (char *)(result + v138);
      v144 = (char *)(result + v139);
      v145 = (char *)a3 + 3 * a4;
      result = (unint64_t)a3 + 2 * a4;
      v146 = (char *)a3 + a4;
      do
      {
        v147 = (uint8x8_t *)((char *)v47 + v50 + v50);
        v148 = *v147;
        v149 = (uint8x8_t *)((char *)v147 + v50);
        v150 = *v149;
        v151 = (uint8x8_t *)((char *)v149 + v50);
        v152 = *v151;
        v153 = (uint8x8_t *)((char *)v151 + v50);
        v154 = *v153;
        v155 = (uint8x8_t *)((char *)v153 + v50);
        v156 = *v155;
        v157 = (uint8x8_t *)((char *)v155 + v50);
        v158 = *v157;
        v159 = (uint8x8_t *)((char *)v157 + v50);
        v160 = *v159;
        v161 = (uint8x8_t *)((char *)v159 + v50);
        v162 = *v161;
        v163 = *(uint8x8_t *)((char *)v161 + v50);
        v164 = (int16x8_t)vmovl_u8(*v47);
        v165 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + v50));
        v166 = (int16x8_t)vmovl_u8(v148);
        v167 = (int16x8_t)vmovl_u8(v150);
        v168 = (int16x8_t)vmovl_u8(v152);
        v169 = (int16x8_t)vmovl_u8(v154);
        v170 = (int16x8_t)vmovl_u8(v156);
        v171 = a3;
        v172 = (int16x8_t)vmovl_u8(v158);
        v173 = (int16x8_t)vmovl_u8(v160);
        v174 = (int16x8_t)vmovl_u8(v162);
        v175 = v146;
        v176 = result;
        v177 = v145;
        v178 = v144;
        v179 = (int16x8_t)vmovl_u8(v163);
        v180 = v143;
        v181 = v142;
        v182 = v141;
        v183 = a6;
        do
        {
          v184 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v164, v122), v165, v123), v166, v124), v167, v125), v168, v126), v172, v127);
          v185 = vmlaq_s16(vmlaq_s16(vmulq_s16(v165, v122), v166, v123), v167, v124);
          v186 = vmulq_s16(v172, v137);
          v187 = vmlaq_s16(vmulq_s16(v166, v122), v167, v123);
          v188 = vmulq_s16(v172, v132);
          v189 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v167, v122), v168, v123), v169, v124), v170, v125), v172, v126);
          v167 = v172;
          v172 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v178[v120]);
          v190 = vmlaq_s16(v184, v173, v128);
          v191 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v185, v168, v125), v169, v126), v173, v127);
          v192 = vmlaq_s16(v187, v168, v124);
          v193 = vmulq_s16(v173, v137);
          v194 = vmulq_s16(v173, v132);
          v164 = v168;
          v168 = v173;
          v173 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v180[v120]);
          v195 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v190, v174, v129), v179, v130), v131, v172), vmulq_s16(v169, v132)), vmulq_s16(v170, v137));
          v196 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v191, v174, v128), v179, v129), v130, v172), v131, v173), vmulq_s16(v170, v132)), v186);
          v197 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v192, v169, v125), v170, v126), v174, v127);
          v198 = vmulq_s16(v174, v137);
          v165 = v169;
          v169 = v174;
          v174 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v181[v120]);
          v199 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v197, v179, v128), v129, v172), v130, v173), v131, v174), v188), v193);
          v200 = vmlaq_s16(v189, v179, v127);
          v166 = v170;
          v170 = v179;
          v179 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v182[v120]);
          *(int8x8_t *)&v171[v120 / 4] = vqrshrun_n_s16(v195, 7uLL);
          *(int8x8_t *)&v175[v120] = vqrshrun_n_s16(v196, 7uLL);
          *(int8x8_t *)(v176 + v120) = vqrshrun_n_s16(v199, 7uLL);
          *(int8x8_t *)&v177[v120] = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v200, v128, v172), v129, v173), v130, v174), v131, v179), v194), v198), 7uLL);
          v182 += v133;
          v181 += v133;
          v180 += v133;
          v178 += v133;
          v177 += v140;
          v176 += v140;
          v175 += v140;
          v171 = (_DWORD *)((char *)v171 + v140);
          v183 -= 4;
        }
        while (v183);
        ++v47;
        v120 += 8;
        a5 -= 8;
      }
      while (a5);
    }
    else
    {
      v51 = (uint8x8_t *)((char *)v47 + a2 + a2);
      v52 = *v51;
      v53 = (uint8x8_t *)((char *)v51 + a2);
      v54 = *v53;
      v55 = (uint8x8_t *)((char *)v53 + a2);
      v56 = *v55;
      v57 = (uint8x8_t *)((char *)v55 + a2);
      v58 = *v57;
      v59 = (uint8x8_t *)((char *)v57 + a2);
      v60 = *v59;
      v61 = (uint8x8_t *)((char *)v59 + a2);
      v62 = *v61;
      v63 = (uint8x8_t *)((char *)v61 + a2);
      v64 = *v63;
      v65 = (uint8x8_t *)((char *)v63 + a2);
      v66 = (int16x4_t)vmovl_u8(*v47).u64[0];
      v67 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + a2)).u64[0];
      v68 = (int16x4_t)vmovl_u8(v52).u64[0];
      v69 = (int16x4_t)vmovl_u8(v54).u64[0];
      v70 = (int16x4_t)vmovl_u8(v56).u64[0];
      v71 = (int16x4_t)vmovl_u8(v58).u64[0];
      v72 = vmovl_u8(v60).u64[0];
      v73 = (int16x4_t)vmovl_u8(v62).u64[0];
      v74 = (int16x4_t)vmovl_u8(v64).u64[0];
      v75 = (int16x4_t)vmovl_u8(*v65).u64[0];
      v76 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v65 + a2)).u64[0];
      v77 = (uint8x8_t *)((char *)v47 + 11 * a2);
      v413 = vdup_lane_s16(*(int16x4_t *)&v48, 1);
      v415 = vdup_lane_s16(*(int16x4_t *)&v48, 0);
      v411 = vdup_lane_s16(*(int16x4_t *)&v48, 3);
      v412 = vdup_lane_s16(*(int16x4_t *)&v48, 2);
      v78 = vdup_laneq_s16((int16x8_t)v48, 4);
      v79 = vdup_laneq_s16((int16x8_t)v48, 7);
      v80 = vdup_lane_s16(v49, 0);
      v81 = vdup_lane_s16(v49, 1);
      v82 = vdup_lane_s16(v49, 2);
      v83 = vdup_lane_s16(v49, 3);
      v84 = vdup_laneq_s16((int16x8_t)v48, 5);
      v85 = vdup_laneq_s16((int16x8_t)v48, 6);
      do
      {
        v86 = v70;
        v87 = v71;
        v88 = (int16x4_t)v72;
        v70 = v74;
        v71 = v75;
        v72 = (unint64_t)v76;
        v89 = vmul_s16(v73, v85);
        v90 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v76, v82), v75, v81), v74, v80), v73, v79), v86, v78), v69, v411);
        v91 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v76, v81), v75, v80), v74, v79), v87, v78), v86, v411), v69, v412);
        v92 = vmul_s16(v73, v84);
        v93 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v76, v80), v75, v79), v88, v78), v87, v411), v86, v412), v69, v413);
        v94 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v76, v79), v73, v78), v88, v411), v87, v412), v86, v413), v69, v415);
        v69 = v73;
        v73 = (int16x4_t)vmovl_u8(*v77).u64[0];
        v74 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v77 + a2)).u64[0];
        v95 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(v90, v68, v412), v67, v413), v66, v415), v73, v83);
        v96 = vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v91, v68, v413), v67, v415), v73, v82), v74, v83), vmul_s16(v88, v84));
        v75 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v77 + 2 * a2)).u64[0];
        v76 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v77 + 3 * a2)).u64[0];
        v97 = vmla_s16(v93, v68, v415);
        *(int16x4_t *)v98.i8 = vqadd_s16(vqadd_s16(v95, vmul_s16(v87, v84)), vmul_s16(v88, v85));
        *(int16x4_t *)v99.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v97, v73, v81), v74, v82), v75, v83), v92), vmul_s16(v70, v85));
        v98.u64[1] = (unint64_t)vqadd_s16(v96, v89);
        *(int8x8_t *)v98.i8 = vqrshrun_n_s16(v98, 7uLL);
        v99.u64[1] = (unint64_t)vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v94, v73, v80), v74, v81), v75, v82), v76, v83), vmul_s16(v70, v84)), vmul_s16(v71, v85));
        *a3 = v98.i32[0];
        *(_DWORD *)((char *)a3 + a4) = v98.i32[1];
        *(int8x8_t *)v98.i8 = vqrshrun_n_s16(v99, 7uLL);
        *(_DWORD *)((char *)a3 + 2 * a4) = v98.i32[0];
        v100 = (_DWORD *)((char *)a3 + 3 * a4);
        v77 = (uint8x8_t *)((char *)v77 + 4 * a2);
        a3 += a4;
        *v100 = v98.i32[1];
        v68 = v88;
        v67 = v87;
        v66 = v86;
        a6 -= 4;
      }
      while (a6);
    }
  }
  return result;
}

uint64_t av1_convolve_2d_sr_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int16x8_t *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8x8_t *v28;
  uint64_t v29;
  int16x8_t v30;
  int16x4_t v31;
  uint64_t v32;
  uint64_t v33;
  int16x8_t v34;
  int16x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t *v40;
  uint64_t v41;
  int8x8_t v42;
  int8x8_t *v43;
  int8x8_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int8x8_t v56;
  int16x4_t v57;
  int8x8_t *v58;
  int8x8_t v59;
  int8x8_t *v60;
  int8x8_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int32x2_t *v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x4_t v77;
  int16x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  uint8x8_t v98;
  uint8x8_t v99;
  int16x4_t v100;
  int16x4_t v101;
  int32x2_t v102;
  int v103;
  BOOL v104;
  int32x4_t v105;
  int v106;
  int16x4_t *v107;
  uint8x8_t *v108;
  uint8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x4_t v112;
  int16x4_t v113;
  int16x4_t v114;
  int16x4_t v115;
  int16x4_t v116;
  int16x4_t v117;
  int16x4_t v118;
  int16x4_t v119;
  int16x4_t *v120;
  int16x4_t v121;
  int16x4_t v122;
  int16x8_t v123;
  int16x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x4_t v135;
  uint8x8_t *v136;
  int16x4_t v137;
  int16x4_t v138;
  int16x4_t v139;
  int16x4_t v140;
  int16x4_t *v141;
  int16x4_t v142;
  int8x16_t v143;
  char *v144;
  char *v145;
  char *v146;
  int16x8_t *v147;
  int16x8_t v148;
  unint64_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  uint64_t v160;
  int v161;
  int16x8_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  uint64_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int64x2_t *v203;
  int16x8_t v204;
  int v205;
  int8x16_t v206;
  int8x16_t v207;
  uint64_t *v208;
  int8x16_t v209;
  uint64_t *v210;
  int8x16_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int32x4_t v221;
  int8x16_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  uint8x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  uint64_t *v236;
  int v237;
  int8x16_t v238;
  int8x16_t v239;
  uint64_t *v240;
  int8x16_t v241;
  uint64_t *v242;
  int8x16_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int16x8_t v261;
  uint8x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  uint8x8_t v265;
  int16x8_t v266;
  uint8x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t v295;
  int64x2_t v296;
  int64x2_t v297;
  int64x2_t v298;
  int16x8_t v299;
  uint64_t v300;
  int8x16_t v301;
  int16x8_t *v302;
  int8x16_t v303;
  int16x8_t v304;
  int16x4_t v305;
  int16x4_t v306;
  int16x4_t v307;
  int16x4_t v308;
  int16x4_t *v309;
  int16x4_t v310;
  int16x8_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int16x8_t v322;
  _DWORD *v323;
  int16x4_t v324;
  int16x4_t v325;
  int16x4_t v326;
  int16x4_t v327;
  int16x4_t *v328;
  int16x4_t v329;
  int16x4_t v330;
  int16x8_t v331;
  int16x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  char *v350;
  char *v351;
  char *v352;
  int16x8_t *v353;
  int16x8_t v354;
  unint64_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  uint64_t v360;
  int v361;
  int16x8_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int16x8_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int16x8_t v376;
  int32x4_t v377;
  int32x4_t v378;
  char *v379;
  char *v380;
  char *v381;
  int16x8_t *v382;
  int16x8_t v383;
  unint64_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  uint64_t v391;
  int v392;
  int16x8_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int16x8_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int16x8_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  _QWORD v420[32];
  int16x4_t v421;
  int16x4_t v422;
  int16x4_t v423;
  int16x4_t v424;
  int16x4_t v425;
  int16x4_t v426;
  _QWORD v427[128];
  _QWORD v428[4098];

  result = MEMORY[0x24BDAC7A8](a1, a2);
  v428[4097] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)v16 == 2 || (_DWORD)v17 == 2)
    return av1_convolve_2d_sr_c(result, v13, (uint64_t)v14, v15, v16, v17, v18, v19, a9, a10, a11, a12);
  v20 = *(unsigned __int16 *)(v19 + 8);
  v21 = (int16x8_t *)(*(_QWORD *)v19 + 2 * (a11 & 0xFu) * v20);
  if (v20 == 12)
  {
    v22 = 12;
  }
  else if (v21->u16[7] | v21->u16[0])
  {
    v22 = 8;
  }
  else if (v21->u16[6] | v21->u16[1])
  {
    v22 = 6;
  }
  else if (v21->u16[5] | v21->u16[2])
  {
    v22 = 4;
  }
  else
  {
    v22 = 2;
  }
  if (v22 <= 6)
    v23 = 6;
  else
    v23 = v22;
  v24 = v23 + v17 - 1;
  v25 = *(unsigned __int16 *)(v18 + 8);
  v26 = v25 >> 1;
  v27 = (int)(((v23 >> 1) - 1) * v13);
  v28 = (uint8x8_t *)(result - v27 - (v25 >> 1) + 1);
  v29 = *(_QWORD *)v18 + 2 * (a9 & 0xF) * v25;
  if (v25 < 9)
  {
    if ((int)v16 > 4)
    {
      v193 = vshrq_n_s16(*(int16x8_t *)v29, 1uLL);
      v194 = vdupq_lane_s16(*(int16x4_t *)v193.i8, 0);
      v195 = vdupq_lane_s16(*(int16x4_t *)v193.i8, 1);
      v196 = vdupq_lane_s16(*(int16x4_t *)v193.i8, 2);
      v197 = vdupq_lane_s16(*(int16x4_t *)v193.i8, 3);
      v198 = vdupq_laneq_s16(v193, 4);
      v199 = vdupq_laneq_s16(v193, 5);
      v200 = (int)v13;
      v201 = vdupq_laneq_s16(v193, 6);
      v202 = vdupq_laneq_s16(v193, 7);
      if ((int)(v23 + v17) < 10)
      {
        v203 = (int64x2_t *)v420;
      }
      else
      {
        v203 = (int64x2_t *)v420;
        v204 = vdupq_n_s16(0x2002u);
        v205 = v23 + v17 - 1;
        do
        {
          *(uint8x8_t *)v206.i8 = *v28;
          *(uint8x8_t *)v207.i8 = *(uint8x8_t *)((char *)v28 + v200);
          v208 = (uint64_t *)((char *)v28 + v200 + v200);
          v209.i64[0] = *v208;
          v210 = (uint64_t *)((char *)v208 + v200);
          v211.i64[0] = *v210;
          v212 = (uint64_t *)((char *)v210 + v200);
          v213 = *v212;
          v214 = (uint64_t *)((char *)v212 + v200);
          v215 = *v214;
          v216 = (uint64_t *)((char *)v214 + v200);
          v206.i64[1] = v213;
          v207.i64[1] = v215;
          v217 = (int16x8_t)vtrn1q_s8(v206, v207);
          v218 = (int16x8_t)vtrn2q_s8(v206, v207);
          v209.i64[1] = *v216;
          v211.i64[1] = *(uint64_t *)((char *)v216 + v200);
          v219 = (int16x8_t)vtrn1q_s8(v209, v211);
          v220 = (int16x8_t)vtrn2q_s8(v209, v211);
          v221 = (int32x4_t)vtrn1q_s16(v217, v219);
          v222 = (int8x16_t)vtrn2q_s16(v217, v219);
          v223 = (int32x4_t)vtrn1q_s16(v218, v220);
          v224 = (int32x4_t)vtrn2q_s16(v218, v220);
          v225 = (int8x16_t)vuzp1q_s32(v221, v223);
          v226 = (int8x16_t)vuzp2q_s32(v221, v223);
          v227 = (int8x16_t)vuzp1q_s32((int32x4_t)v222, v224);
          v228 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v222.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL));
          v229 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v225.i8);
          v230 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL));
          v231 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v227.i8);
          v232 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL));
          v233 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v226.i8);
          v234 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL));
          v235 = (int16x8_t)vmovl_u8(v228);
          v236 = (uint64_t *)((char *)v28 + 7);
          v237 = v16;
          result = (uint64_t)v203;
          do
          {
            v238.i64[0] = *v236;
            v239.i64[0] = *(uint64_t *)((char *)v236 + v200);
            v240 = (uint64_t *)((char *)v236 + v200 + v200);
            v241.i64[0] = *v240;
            v242 = (uint64_t *)((char *)v240 + v200);
            v243.i64[0] = *v242;
            v244 = (uint64_t *)((char *)v242 + v200);
            v245 = *v244;
            v246 = (uint64_t *)((char *)v244 + v200);
            v247 = *v246;
            v248 = (uint64_t *)((char *)v246 + v200);
            v238.i64[1] = v245;
            v239.i64[1] = v247;
            v249 = (int16x8_t)vtrn1q_s8(v238, v239);
            v241.i64[1] = *v248;
            v243.i64[1] = *(uint64_t *)((char *)v248 + v200);
            v250 = (int16x8_t)vtrn2q_s8(v238, v239);
            v251 = (int16x8_t)vtrn1q_s8(v241, v243);
            v252 = (int16x8_t)vtrn2q_s8(v241, v243);
            v253 = (int32x4_t)vtrn1q_s16(v249, v251);
            v254 = (int32x4_t)vtrn2q_s16(v249, v251);
            v255 = (int32x4_t)vtrn1q_s16(v250, v252);
            v256 = (int32x4_t)vtrn2q_s16(v250, v252);
            v257 = (int8x16_t)vuzp1q_s32(v253, v255);
            v258 = (int8x16_t)vuzp2q_s32(v253, v255);
            v259 = (int8x16_t)vuzp1q_s32(v254, v256);
            v260 = (int8x16_t)vuzp2q_s32(v254, v256);
            v261 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v234, v199), v235, v201), v233, v198), v232, v197), v231, v196), v230, v195), v229, v194);
            v262 = (uint8x8_t)vextq_s8(v257, v257, 8uLL).u64[0];
            v263 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v234, v198), v235, v199), v233, v197), v232, v196), v231, v195), v230, v194);
            v264 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v234, v197), v235, v198), v233, v196), v232, v195);
            v265 = (uint8x8_t)vextq_s8(v258, v258, 8uLL).u64[0];
            v266 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v234, v196), v235, v197), v233, v195), v232, v194);
            v267 = (uint8x8_t)vextq_s8(v260, v260, 8uLL).u64[0];
            v268 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v257.i8);
            v229 = (int16x8_t)vmovl_u8(v262);
            v230 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v259.i8);
            v232 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v258.i8);
            v269 = vmlaq_s16(v264, v231, v194);
            v270 = vmulq_s16(v234, v195);
            v231 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v259, v259, 8uLL));
            v271 = vmulq_s16(v234, v194);
            v234 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v260.i8);
            v272 = vmlaq_s16(vmlaq_s16(v270, v235, v196), v233, v194);
            v273 = vmlaq_s16(v271, v235, v195);
            v233 = (int16x8_t)vmovl_u8(v265);
            v274 = vmlaq_s16(vmulq_s16(v195, v268), v235, v194);
            v235 = (int16x8_t)vmovl_u8(v267);
            v275 = vshrq_n_s16(vaddq_s16(vmlaq_s16(v261, v202, v268), v204), 2uLL);
            v276 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(v263, v201, v268), v202, v229), v204), 2uLL);
            v277 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v269, v199, v268), v201, v229), v202, v230), v204), 2uLL);
            v278 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v266, v198, v268), v199, v229), v201, v230), v202, v231), v204), 2uLL);
            v279 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v272, v197, v268), v198, v229), v199, v230), v201, v231), v202, v232), v204), 2uLL);
            v280 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v273, v196, v268), v197, v229), v198, v230), v199, v231), v201, v232), v202, v233), v204), 2uLL);
            v281 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v274, v196, v229), v197, v230), v198, v231), v199, v232), v201, v233), v202, v234), v204), 2uLL);
            v282 = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v195, v229), v194, v268), v196, v230), v197, v231), v198, v232), v199, v233), v201, v234), v202, v235), v204), 2uLL);
            v283 = (int32x4_t)vtrn1q_s16(v275, v276);
            v284 = (int32x4_t)vtrn2q_s16(v275, v276);
            v285 = (int32x4_t)vtrn1q_s16(v277, v278);
            v286 = (int32x4_t)vtrn2q_s16(v277, v278);
            v287 = (int32x4_t)vtrn1q_s16(v279, v280);
            v288 = (int32x4_t)vtrn2q_s16(v279, v280);
            v289 = (int32x4_t)vtrn1q_s16(v281, v282);
            v290 = (int32x4_t)vtrn2q_s16(v281, v282);
            v291 = (int64x2_t)vtrn1q_s32(v283, v285);
            v292 = (int64x2_t)vtrn2q_s32(v283, v285);
            v293 = (int64x2_t)vtrn1q_s32(v284, v286);
            v294 = (int64x2_t)vtrn2q_s32(v284, v286);
            v295 = (int64x2_t)vtrn1q_s32(v287, v289);
            v296 = (int64x2_t)vtrn2q_s32(v287, v289);
            v297 = (int64x2_t)vtrn1q_s32(v288, v290);
            v298 = (int64x2_t)vtrn2q_s32(v288, v290);
            *(int64x2_t *)result = vzip1q_s64(v291, v295);
            *(int64x2_t *)(result + 256) = vzip1q_s64(v293, v297);
            *(int64x2_t *)(result + 512) = vzip1q_s64(v292, v296);
            ++v236;
            *(int64x2_t *)(result + 768) = vzip1q_s64(v294, v298);
            *(int64x2_t *)(result + 1024) = vzip2q_s64(v291, v295);
            *(int64x2_t *)(result + 1280) = vzip2q_s64(v293, v297);
            *(int64x2_t *)(result + 1536) = vzip2q_s64(v292, v296);
            *(int64x2_t *)(result + 1792) = vzip2q_s64(v294, v298);
            result += 16;
            v237 -= 8;
          }
          while (v237);
          v28 += v200;
          v203 += 128;
          v24 = v205 - 8;
          v104 = v205 <= 16;
          v205 -= 8;
        }
        while (!v104);
      }
      v299 = vdupq_n_s16(0x2002u);
      do
      {
        v300 = 0;
        v301 = (int8x16_t)vmovl_u8(*v28);
        v302 = (int16x8_t *)v203;
        do
        {
          v303 = (int8x16_t)vmovl_u8(v28[v300 + 1]);
          *v302++ = vshrq_n_s16(vaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)vextq_s8(v301, v303, 2uLL), v195), (int16x8_t)v301, v194), (int16x8_t)vextq_s8(v301, v303, 4uLL), v196), (int16x8_t)vextq_s8(v301, v303, 6uLL), v197), (int16x8_t)vextq_s8(v301, v303, 8uLL), v198), (int16x8_t)vextq_s8(v301, v303, 0xAuLL), v199),
                            (int16x8_t)vextq_s8(v301, v303, 0xCuLL),
                            v201),
                          (int16x8_t)vextq_s8(v301, v303, 0xEuLL),
                          v202),
                        v299),
                      2uLL);
          ++v300;
          v301 = v303;
        }
        while ((_DWORD)v16 != (_DWORD)(v300 * 8));
        v28 = (uint8x8_t *)((char *)v28 + v200);
        v203 += 16;
        --v24;
      }
      while (v24);
    }
    else
    {
      v135 = vshr_n_s16(*(int16x4_t *)(v29 + 4), 1uLL);
      v136 = (uint8x8_t *)(result - v27 - (v25 >> 1) + 3);
      v137 = vdup_lane_s16(v135, 0);
      v138 = vdup_lane_s16(v135, 1);
      v139 = vdup_lane_s16(v135, 2);
      v140 = vdup_lane_s16(v135, 3);
      v141 = (int16x4_t *)v420;
      v142 = vdup_n_s16(0x2002u);
      do
      {
        v143 = (int8x16_t)vmovl_u8(*v136);
        *v141 = vshr_n_s16(vadd_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16((int16x4_t)*(_OWORD *)&vextq_s8(v143, v143, 2uLL), v138), *(int16x4_t *)v143.i8, v137), (int16x4_t)*(_OWORD *)&vextq_s8(v143, v143, 4uLL), v139), (int16x4_t)*(_OWORD *)&vextq_s8(v143, v143, 6uLL), v140), v142), 2uLL);
        v136 = (uint8x8_t *)((char *)v136 + (int)v13);
        v141 += 32;
        --v24;
      }
      while (v24);
    }
    v304 = *v21;
    if (v23 > 6)
    {
      if ((int)v16 >= 5)
      {
        v379 = (char *)v14 + 3 * (int)v15;
        v380 = (char *)v14 + 2 * (int)v15;
        v381 = (char *)v14 + (int)v15;
        v382 = (int16x8_t *)v420;
        v383.i64[0] = 0x7F007F007F007FLL;
        v383.i64[1] = 0x7F007F007F007FLL;
        do
        {
          v384 = 0;
          v385 = *v382;
          v386 = v382[16];
          v387 = v382[32];
          v388 = v382[48];
          v389 = v382[64];
          v390 = v382[80];
          v391 = 112;
          v392 = v17;
          v393 = v382[96];
          do
          {
            v394 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v386.i8, *(int16x4_t *)v304.i8, 1), *(int16x4_t *)v385.i8, *(int16x4_t *)v304.i8, 0), *(int16x4_t *)v387.i8, *(int16x4_t *)v304.i8, 2), *(int16x4_t *)v388.i8, *(int16x4_t *)v304.i8, 3);
            v395 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v386, *(int16x4_t *)v304.i8, 1), v385, *(int16x4_t *)v304.i8, 0), v387, *(int16x4_t *)v304.i8, 2), v388, *(int16x4_t *)v304.i8, 3);
            v396 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v387.i8, *(int16x4_t *)v304.i8, 1), *(int16x4_t *)v386.i8, *(int16x4_t *)v304.i8, 0), *(int16x4_t *)v388.i8, *(int16x4_t *)v304.i8, 2);
            v397 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v387, *(int16x4_t *)v304.i8, 1), v386, *(int16x4_t *)v304.i8, 0), v388, *(int16x4_t *)v304.i8, 2);
            v398 = vmull_lane_s16(*(int16x4_t *)v388.i8, *(int16x4_t *)v304.i8, 1);
            v399 = vmull_high_lane_s16(v388, *(int16x4_t *)v304.i8, 1);
            v400 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v389.i8, *(int16x4_t *)v304.i8, 1), *(int16x4_t *)v388.i8, *(int16x4_t *)v304.i8, 0);
            v401 = vmlal_high_lane_s16(vmull_high_lane_s16(v389, *(int16x4_t *)v304.i8, 1), v388, *(int16x4_t *)v304.i8, 0);
            v388 = v382[v391];
            v402 = vmlal_laneq_s16(v394, *(int16x4_t *)v389.i8, v304, 4);
            v403 = vmlal_high_laneq_s16(v395, v389, v304, 4);
            v404 = vmlal_lane_s16(v396, *(int16x4_t *)v389.i8, *(int16x4_t *)v304.i8, 3);
            v405 = vmlal_high_lane_s16(v397, v389, *(int16x4_t *)v304.i8, 3);
            v406 = vmlal_lane_s16(vmlal_lane_s16(v398, *(int16x4_t *)v387.i8, *(int16x4_t *)v304.i8, 0), *(int16x4_t *)v389.i8, *(int16x4_t *)v304.i8, 2);
            v407 = vmlal_high_lane_s16(vmlal_high_lane_s16(v399, v387, *(int16x4_t *)v304.i8, 0), v389, *(int16x4_t *)v304.i8, 2);
            v385 = v389;
            v389 = v382[v391 + 16];
            v408 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v402, *(int16x4_t *)v390.i8, v304, 5), *(int16x4_t *)v393.i8, v304, 6), *(int16x4_t *)v388.i8, v304, 7), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v403, v390, v304, 5), v393, v304, 6), v388, v304, 7), 0xBuLL);
            v409 = vmlal_laneq_s16(v404, *(int16x4_t *)v390.i8, v304, 4);
            v410 = vmlal_high_laneq_s16(v405, v390, v304, 4);
            v411 = vmlal_lane_s16(v406, *(int16x4_t *)v390.i8, *(int16x4_t *)v304.i8, 3);
            v412 = vmlal_high_lane_s16(v407, v390, *(int16x4_t *)v304.i8, 3);
            v413 = vmlal_lane_s16(v400, *(int16x4_t *)v390.i8, *(int16x4_t *)v304.i8, 2);
            v414 = vmlal_high_lane_s16(v401, v390, *(int16x4_t *)v304.i8, 2);
            v386 = v390;
            v390 = v382[v391 + 32];
            v415 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v409, *(int16x4_t *)v393.i8, v304, 5), *(int16x4_t *)v388.i8, v304, 6), *(int16x4_t *)v389.i8, v304, 7), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v410, v393, v304, 5), v388, v304, 6), v389, v304, 7), 0xBuLL);
            v416 = vmlal_laneq_s16(v411, *(int16x4_t *)v393.i8, v304, 4);
            v417 = vmlal_high_laneq_s16(v412, v393, v304, 4);
            v418 = vmlal_lane_s16(v413, *(int16x4_t *)v393.i8, *(int16x4_t *)v304.i8, 3);
            v419 = vmlal_high_lane_s16(v414, v393, *(int16x4_t *)v304.i8, 3);
            v387 = v393;
            v393 = v382[v391 + 48];
            *(int8x8_t *)&v14[v384 / 4] = vqmovun_s16(vaddq_s16(v408, v383));
            *(int8x8_t *)&v381[v384] = vqmovun_s16(vaddq_s16(v415, v383));
            *(int8x8_t *)&v380[v384] = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v416, *(int16x4_t *)v388.i8, v304, 5), *(int16x4_t *)v389.i8, v304, 6), *(int16x4_t *)v390.i8, v304, 7), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v417, v388, v304, 5), v389, v304, 6),
                                               v390,
                                               v304,
                                               7),
                                             0xBuLL),
                                           v383));
            *(int8x8_t *)&v379[v384] = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v418, *(int16x4_t *)v388.i8, v304, 4), *(int16x4_t *)v389.i8, v304, 5), *(int16x4_t *)v390.i8, v304, 6), *(int16x4_t *)v393.i8, v304, 7), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(
                                                 vmlal_high_laneq_s16(vmlal_high_laneq_s16(v419, v388, v304, 4), v389, v304, 5), v390, v304, 6), v393, v304, 7), 0xBuLL), v383));
            v391 += 64;
            v384 += 4 * (int)v15;
            v392 -= 4;
          }
          while (v392);
          ++v382;
          v14 += 2;
          v379 += 8;
          v380 += 8;
          v381 += 8;
          LODWORD(v16) = v16 - 8;
        }
        while ((_DWORD)v16);
      }
      else
      {
        v324 = (int16x4_t)v420[0];
        v325 = v421;
        v326 = v422;
        v327 = v423;
        v328 = (int16x4_t *)v427;
        v329 = v424;
        v330 = v425;
        v331.i64[0] = 0x7F007F007F007FLL;
        v331.i64[1] = 0x7F007F007F007FLL;
        v332 = v426;
        do
        {
          v333 = vmlal_lane_s16(vmull_lane_s16(v325, *(int16x4_t *)v304.i8, 1), v324, *(int16x4_t *)v304.i8, 0);
          v324 = v329;
          v334 = vmlal_lane_s16(vmull_lane_s16(v326, *(int16x4_t *)v304.i8, 1), v325, *(int16x4_t *)v304.i8, 0);
          v325 = v330;
          v335 = vmlal_lane_s16(vmull_lane_s16(v327, *(int16x4_t *)v304.i8, 1), v326, *(int16x4_t *)v304.i8, 0);
          v336 = vmlal_lane_s16(vmlal_lane_s16(v333, v326, *(int16x4_t *)v304.i8, 2), v327, *(int16x4_t *)v304.i8, 3);
          v337 = vmlal_lane_s16(v334, v327, *(int16x4_t *)v304.i8, 2);
          v338 = vmlal_lane_s16(vmull_lane_s16(v329, *(int16x4_t *)v304.i8, 1), v327, *(int16x4_t *)v304.i8, 0);
          v327 = *v328;
          v339 = vmlal_laneq_s16(v336, v329, v304, 4);
          v340 = vmlal_lane_s16(v337, v329, *(int16x4_t *)v304.i8, 3);
          v341 = vmlal_lane_s16(v335, v329, *(int16x4_t *)v304.i8, 2);
          v329 = v328[32];
          v342 = vmlal_laneq_s16(v339, v330, v304, 5);
          v343 = vmlal_laneq_s16(v340, v330, v304, 4);
          v344 = vmlal_lane_s16(v341, v330, *(int16x4_t *)v304.i8, 3);
          v345 = vmlal_lane_s16(v338, v330, *(int16x4_t *)v304.i8, 2);
          v330 = v328[64];
          v346 = vmlal_laneq_s16(v342, v332, v304, 6);
          v347 = vmlal_laneq_s16(v343, v332, v304, 5);
          v348 = vmlal_laneq_s16(v344, v332, v304, 4);
          v349 = vmlal_lane_s16(v345, v332, *(int16x4_t *)v304.i8, 3);
          v326 = v332;
          v332 = v328[96];
          *(int8x8_t *)v346.i8 = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(v346, *v328, v304, 7), 0xBuLL), vmlal_laneq_s16(vmlal_laneq_s16(v347, *v328, v304, 6), v329, v304, 7), 0xBuLL), v331));
          *(int8x8_t *)v347.i8 = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v348, *v328, v304, 5), v329, v304, 6), v330, v304, 7), 0xBuLL), vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v349, *v328, v304, 4), v329, v304, 5), v330, v304, 6), v332, v304, 7), 0xBuLL),
                                     v331));
          *v14 = v346.i32[0];
          *(_DWORD *)((char *)v14 + (int)v15) = v346.i32[1];
          *(_DWORD *)((char *)v14 + 2 * (int)v15) = v347.i32[0];
          *(_DWORD *)((char *)v14 + 3 * (int)v15) = v347.i32[1];
          v14 += (int)v15;
          v328 += 128;
          LODWORD(v17) = v17 - 4;
        }
        while ((_DWORD)v17);
      }
    }
    else if ((int)v16 >= 5)
    {
      v350 = (char *)v14 + 3 * (int)v15;
      v351 = (char *)v14 + 2 * (int)v15;
      v352 = (char *)v14 + (int)v15;
      v353 = (int16x8_t *)v420;
      v354.i64[0] = 0x7F007F007F007FLL;
      v354.i64[1] = 0x7F007F007F007FLL;
      do
      {
        v355 = 0;
        v356 = *v353;
        v357 = v353[16];
        v358 = v353[32];
        v359 = v353[48];
        v360 = 80;
        v361 = v17;
        v362 = v353[64];
        do
        {
          v363 = vmull_lane_s16(*(int16x4_t *)v357.i8, *(int16x4_t *)v304.i8, 2);
          v364 = vmull_high_lane_s16(v357, *(int16x4_t *)v304.i8, 2);
          v365 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v358.i8, *(int16x4_t *)v304.i8, 2), *(int16x4_t *)v357.i8, *(int16x4_t *)v304.i8, 1);
          v366 = vmlal_high_lane_s16(vmull_high_lane_s16(v358, *(int16x4_t *)v304.i8, 2), v357, *(int16x4_t *)v304.i8, 1);
          v357 = v353[v360];
          v367 = vmlal_lane_s16(vmlal_lane_s16(v363, *(int16x4_t *)v356.i8, *(int16x4_t *)v304.i8, 1), *(int16x4_t *)v358.i8, *(int16x4_t *)v304.i8, 3);
          v368 = vmlal_high_lane_s16(vmlal_high_lane_s16(v364, v356, *(int16x4_t *)v304.i8, 1), v358, *(int16x4_t *)v304.i8, 3);
          v369 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v359.i8, *(int16x4_t *)v304.i8, 2), *(int16x4_t *)v358.i8, *(int16x4_t *)v304.i8, 1);
          v370 = vmlal_high_lane_s16(vmull_high_lane_s16(v359, *(int16x4_t *)v304.i8, 2), v358, *(int16x4_t *)v304.i8, 1);
          v358 = v353[v360 + 16];
          v371 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v367, *(int16x4_t *)v359.i8, v304, 4), *(int16x4_t *)v362.i8, v304, 5), *(int16x4_t *)v357.i8, v304, 6), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v368, v359, v304, 4), v362, v304, 5), v357, v304, 6), 0xBuLL);
          v372 = vmlal_lane_s16(v365, *(int16x4_t *)v359.i8, *(int16x4_t *)v304.i8, 3);
          v373 = vmlal_high_lane_s16(v366, v359, *(int16x4_t *)v304.i8, 3);
          v374 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v362.i8, *(int16x4_t *)v304.i8, 2), *(int16x4_t *)v359.i8, *(int16x4_t *)v304.i8, 1);
          v375 = vmlal_high_lane_s16(vmull_high_lane_s16(v362, *(int16x4_t *)v304.i8, 2), v359, *(int16x4_t *)v304.i8, 1);
          v359 = v353[v360 + 32];
          v376 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v372, *(int16x4_t *)v362.i8, v304, 4), *(int16x4_t *)v357.i8, v304, 5), *(int16x4_t *)v358.i8, v304, 6), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v373, v362, v304, 4), v357, v304, 5), v358, v304, 6), 0xBuLL);
          v377 = vmlal_lane_s16(v369, *(int16x4_t *)v362.i8, *(int16x4_t *)v304.i8, 3);
          v378 = vmlal_high_lane_s16(v370, v362, *(int16x4_t *)v304.i8, 3);
          v356 = v362;
          v362 = v353[v360 + 48];
          *(int8x8_t *)&v14[v355 / 4] = vqmovun_s16(vaddq_s16(v371, v354));
          *(int8x8_t *)&v352[v355] = vqmovun_s16(vaddq_s16(v376, v354));
          *(int8x8_t *)&v351[v355] = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v377, *(int16x4_t *)v357.i8, v304, 4), *(int16x4_t *)v358.i8, v304, 5), *(int16x4_t *)v359.i8, v304, 6), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v378, v357, v304, 4), v358, v304, 5),
                                             v359,
                                             v304,
                                             6),
                                           0xBuLL),
                                         v354));
          *(int8x8_t *)&v350[v355] = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v374, *(int16x4_t *)v357.i8, *(int16x4_t *)v304.i8, 3), *(int16x4_t *)v358.i8, v304, 4), *(int16x4_t *)v359.i8, v304, 5), *(int16x4_t *)v362.i8, v304, 6), 0xBuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(
                                               vmlal_high_laneq_s16(vmlal_high_lane_s16(v375, v357, *(int16x4_t *)v304.i8, 3), v358, v304, 4), v359, v304, 5), v362, v304, 6), 0xBuLL), v354));
          v360 += 64;
          v355 += 4 * (int)v15;
          v361 -= 4;
        }
        while (v361);
        ++v353;
        v14 += 2;
        v350 += 8;
        v351 += 8;
        v352 += 8;
        LODWORD(v16) = v16 - 8;
      }
      while ((_DWORD)v16);
    }
    else
    {
      v305 = (int16x4_t)v420[0];
      v306 = v421;
      v307 = v422;
      v308 = v423;
      v309 = &v425;
      v310 = v424;
      v311.i64[0] = 0x7F007F007F007FLL;
      v311.i64[1] = 0x7F007F007F007FLL;
      do
      {
        v312 = vmlal_lane_s16(vmull_lane_s16(v306, *(int16x4_t *)v304.i8, 2), v305, *(int16x4_t *)v304.i8, 1);
        v305 = v310;
        v313 = vmlal_lane_s16(vmull_lane_s16(v307, *(int16x4_t *)v304.i8, 2), v306, *(int16x4_t *)v304.i8, 1);
        v306 = *v309;
        v314 = vmlal_lane_s16(v312, v307, *(int16x4_t *)v304.i8, 3);
        v315 = vmlal_lane_s16(vmull_lane_s16(v308, *(int16x4_t *)v304.i8, 2), v307, *(int16x4_t *)v304.i8, 1);
        v307 = v309[32];
        v316 = vmlal_laneq_s16(v314, v308, v304, 4);
        v317 = vmlal_lane_s16(v313, v308, *(int16x4_t *)v304.i8, 3);
        v318 = vmlal_lane_s16(vmull_lane_s16(v310, *(int16x4_t *)v304.i8, 2), v308, *(int16x4_t *)v304.i8, 1);
        v308 = v309[64];
        v319 = vmlal_laneq_s16(v316, v310, v304, 5);
        v320 = vmlal_laneq_s16(v317, v310, v304, 4);
        v321 = vmlal_lane_s16(v315, v310, *(int16x4_t *)v304.i8, 3);
        v310 = v309[96];
        *(int8x8_t *)v319.i8 = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(v319, *v309, v304, 6), 0xBuLL), vmlal_laneq_s16(vmlal_laneq_s16(v320, *v309, v304, 5), v307, v304, 6), 0xBuLL), v311));
        v322 = vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v321, *v309, v304, 4), v307, v304, 5), v308, v304, 6), 0xBuLL), vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v318, *v309, *(int16x4_t *)v304.i8, 3), v307, v304, 4), v308, v304, 5), v310, v304, 6), 0xBuLL), v311);
        *v14 = v319.i32[0];
        *(_DWORD *)((char *)v14 + (int)v15) = v319.i32[1];
        *(int8x8_t *)v319.i8 = vqmovun_s16(v322);
        *(_DWORD *)((char *)v14 + 2 * (int)v15) = v319.i32[0];
        v323 = (_DWORD *)((char *)v14 + 3 * (int)v15);
        v14 += (int)v15;
        v309 += 128;
        *v323 = v319.i32[1];
        LODWORD(v17) = v17 - 4;
      }
      while ((_DWORD)v17);
    }
  }
  else
  {
    v30 = *(int16x8_t *)v29;
    v31 = *(int16x4_t *)(v29 + 16);
    v32 = (int)v13;
    v33 = 4 * (int)v13;
    v34 = *v21;
    v35 = *(int16x4_t *)v21[1].i8;
    v36 = 3 * (int)v13 - v26 - v27 + result + 12;
    v37 = 2 * (int)v13 - v26 - v27 + result + 12;
    v38 = (int)v13 - v26 - v27 + result + 12;
    v39 = result - v26 - v27 + 12;
    v40 = (int32x2_t *)v420;
    result = 16388;
    do
    {
      v41 = 0;
      v42 = *(int8x8_t *)((char *)v28 + v32);
      v43 = (int8x8_t *)((char *)v28 + v32 + v32);
      v44 = *(int8x8_t *)((char *)v43 + v32);
      v45 = (int16x4_t)vtrn1_s8((int8x8_t)*v28, v42);
      v46 = (int16x4_t)vtrn2_s8((int8x8_t)*v28, v42);
      v47 = (int16x4_t)vtrn1_s8(*v43, v44);
      v48 = (int16x4_t)vtrn2_s8(*v43, v44);
      v49 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn1_s16(v45, v47));
      v50 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn1_s16(v46, v48));
      v51 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn2_s16(v45, v47));
      v52 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn2_s16(v46, v48));
      v53 = (int16x4_t)vextq_s8(v49, v49, 8uLL).u64[0];
      v54 = (int16x4_t)vextq_s8(v50, v50, 8uLL).u64[0];
      v55 = (int16x4_t)vextq_s8(v51, v51, 8uLL).u64[0];
      v56 = (int8x8_t)v28[1];
      v57 = (int16x4_t)vextq_s8(v52, v52, 8uLL).u64[0];
      v58 = (int8x8_t *)((char *)&v28[1] + v32);
      v59 = *v58;
      v60 = (int8x8_t *)((char *)v58 + v32);
      v61 = *(int8x8_t *)((char *)v60 + v32);
      v62 = (int16x4_t)vtrn1_s8(v56, v59);
      v63 = (int16x4_t)vtrn2_s8(v56, v59);
      v64 = (int16x4_t)vtrn1_s8(*v60, v61);
      v65 = (uint8x8_t)vzip1_s16(v62, v64);
      v66 = (uint8x8_t)vtrn2_s16(v62, v64);
      v67 = (int16x4_t)vmovl_u8(v65).u64[0];
      v68 = (int16x4_t)vmovl_u8((uint8x8_t)vzip1_s16(v63, (int16x4_t)vtrn2_s8(*v60, v61))).u64[0];
      v69 = (int16x4_t)vmovl_u8(v66).u64[0];
      v70 = v40;
      do
      {
        v71 = *(int8x8_t *)(v39 + v41);
        v72 = *(int8x8_t *)(v38 + v41);
        v73 = *(int8x8_t *)(v37 + v41);
        v74 = *(int8x8_t *)(v36 + v41);
        v75 = vdupq_n_s32(0x4004u);
        v76 = vmlal_lane_s16(v75, *(int16x4_t *)v49.i8, *(int16x4_t *)v30.i8, 0);
        *(int16x4_t *)v49.i8 = v53;
        v77 = (int16x4_t)vtrn1_s8(v71, v72);
        v78 = (int16x4_t)vtrn2_s8(v71, v72);
        v79 = vmlal_lane_s16(v76, *(int16x4_t *)v50.i8, *(int16x4_t *)v30.i8, 1);
        v80 = vmlal_lane_s16(v75, *(int16x4_t *)v50.i8, *(int16x4_t *)v30.i8, 0);
        *(int16x4_t *)v50.i8 = v54;
        v81 = vmlal_lane_s16(v79, *(int16x4_t *)v51.i8, *(int16x4_t *)v30.i8, 2);
        v82 = vmlal_lane_s16(v80, *(int16x4_t *)v51.i8, *(int16x4_t *)v30.i8, 1);
        v83 = vmlal_lane_s16(v75, *(int16x4_t *)v51.i8, *(int16x4_t *)v30.i8, 0);
        v84 = (int16x4_t)vtrn1_s8(v73, v74);
        *(int16x4_t *)v51.i8 = v55;
        v85 = (int16x4_t)vtrn2_s8(v73, v74);
        v86 = vmlal_lane_s16(v81, *(int16x4_t *)v52.i8, *(int16x4_t *)v30.i8, 3);
        v87 = vmlal_lane_s16(v82, *(int16x4_t *)v52.i8, *(int16x4_t *)v30.i8, 2);
        v88 = vmlal_lane_s16(v83, *(int16x4_t *)v52.i8, *(int16x4_t *)v30.i8, 1);
        v89 = vmlal_lane_s16(v75, *(int16x4_t *)v52.i8, *(int16x4_t *)v30.i8, 0);
        *(int16x4_t *)v52.i8 = v57;
        v90 = vmlal_laneq_s16(v86, v53, v30, 4);
        v91 = vmlal_lane_s16(v87, v53, *(int16x4_t *)v30.i8, 3);
        v92 = vmlal_lane_s16(v88, v53, *(int16x4_t *)v30.i8, 2);
        v93 = vmlal_lane_s16(v89, v53, *(int16x4_t *)v30.i8, 1);
        v53 = v67;
        v94 = vmlal_laneq_s16(v90, v54, v30, 5);
        v95 = vmlal_laneq_s16(v91, v54, v30, 4);
        v96 = vmlal_lane_s16(v92, v54, *(int16x4_t *)v30.i8, 3);
        v97 = vmlal_lane_s16(v93, v54, *(int16x4_t *)v30.i8, 2);
        v54 = v68;
        v98 = (uint8x8_t)vzip1_s16(v78, v85);
        v99 = (uint8x8_t)vtrn2_s16(v78, v85);
        v67 = (int16x4_t)vmovl_u8(v98).u64[0];
        v68 = (int16x4_t)vmovl_u8((uint8x8_t)vtrn2_s16(v77, v84)).u64[0];
        v55 = v69;
        v57 = (int16x4_t)vmovl_u8((uint8x8_t)vzip1_s16(v77, v84)).u64[0];
        v69 = (int16x4_t)vmovl_u8(v99).u64[0];
        *(int16x4_t *)v94.i8 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(v94, *(int16x4_t *)v51.i8, v30, 6), *(int16x4_t *)v52.i8, v30, 7), v53, v31, 0), v54, v31, 1), v55, v31, 2), v57,
                                   v31,
                                   3),
                                 3uLL);
        v100 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v95, *(int16x4_t *)v51.i8, v30, 5), *(int16x4_t *)v52.i8, v30, 6), v53, v30, 7), v54, v31, 0), v55, v31, 1),
                     v57,
                     v31,
                     2),
                   v67,
                   v31,
                   3),
                 3uLL);
        v101 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v96, *(int16x4_t *)v51.i8, v30, 4), *(int16x4_t *)v52.i8, v30, 5), v53, v30, 6), v54, v30, 7), v55, v31,
                         0),
                       v57,
                       v31,
                       1),
                     v67,
                     v31,
                     2),
                   v68,
                   v31,
                   3),
                 3uLL);
        *(int16x4_t *)v97.i8 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v97, *(int16x4_t *)v51.i8, *(int16x4_t *)v30.i8, 3), *(int16x4_t *)v52.i8, v30, 4), v53, v30, 5), v54, v30, 6), v55,
                                           v30,
                                           7),
                                         v57,
                                         v31,
                                         0),
                                       v67,
                                       v31,
                                       1),
                                     v68,
                                     v31,
                                     2),
                                   v69,
                                   v31,
                                   3),
                                 3uLL);
        *(int16x4_t *)v95.i8 = vtrn1_s16(*(int16x4_t *)v94.i8, v100);
        *(int16x4_t *)v94.i8 = vtrn2_s16(*(int16x4_t *)v94.i8, v100);
        v102 = (int32x2_t)vtrn1_s16(v101, *(int16x4_t *)v97.i8);
        *(int16x4_t *)v97.i8 = vtrn2_s16(v101, *(int16x4_t *)v97.i8);
        *v70 = vzip1_s32(*(int32x2_t *)v95.i8, v102);
        v70[32] = vzip1_s32(*(int32x2_t *)v94.i8, *(int32x2_t *)v97.i8);
        v70[64] = vzip2_s32(*(int32x2_t *)v95.i8, v102);
        v70[96] = vzip2_s32(*(int32x2_t *)v94.i8, *(int32x2_t *)v97.i8);
        v41 += 4;
        ++v70;
      }
      while ((_DWORD)v16 != (_DWORD)v41);
      v28 = (uint8x8_t *)((char *)v28 + v33);
      v40 += 128;
      v103 = v24 - 4;
      v36 += v33;
      v37 += v33;
      v38 += v33;
      v39 += v33;
      v104 = v24 <= 8;
      v24 -= 4;
    }
    while (!v104);
    v105 = vdupq_n_s32(0x4004u);
    do
    {
      v106 = v16;
      v107 = (int16x4_t *)v40;
      v108 = v28;
      do
      {
        v109 = *(uint8x16_t *)v108->i8;
        v108 = (uint8x8_t *)((char *)v108 + 4);
        v110 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.i8);
        v111 = (int8x16_t)vmovl_high_u8(v109);
        *v107++ = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v105, *(int16x4_t *)v110.i8, *(int16x4_t *)v30.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 2uLL), *(int16x4_t *)v30.i8, 1), (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 4uLL), *(int16x4_t *)v30.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 6uLL),
                                      *(int16x4_t *)v30.i8,
                                      3),
                                    (int16x8_t)v110,
                                    v30,
                                    4),
                                  (int16x4_t)*(_OWORD *)&vextq_s8(v110, v111, 0xAuLL),
                                  v30,
                                  5),
                                (int16x4_t)*(_OWORD *)&vextq_s8(v110, v111, 0xCuLL),
                                v30,
                                6),
                              (int16x4_t)*(_OWORD *)&vextq_s8(v110, v111, 0xEuLL),
                              v30,
                              7),
                            *(int16x4_t *)v111.i8,
                            v31,
                            0),
                          (int16x4_t)*(_OWORD *)&vextq_s8(v111, v111, 2uLL),
                          v31,
                          1),
                        (int16x4_t)*(_OWORD *)&vextq_s8(v111, v111, 4uLL),
                        v31,
                        2),
                      (int16x4_t)*(_OWORD *)&vextq_s8(v111, v111, 6uLL),
                      v31,
                      3),
                    3uLL);
        v106 -= 4;
      }
      while (v106);
      v28 = (uint8x8_t *)((char *)v28 + v32);
      v40 += 32;
      --v103;
    }
    while (v103);
    if ((int)v16 >= 5)
    {
      v144 = (char *)v14 + 3 * (int)v15;
      v145 = (char *)v14 + 2 * (int)v15;
      v146 = (char *)v14 + (int)v15;
      v147 = (int16x8_t *)v420;
      v148.i64[0] = 0x7F007F007F007FLL;
      v148.i64[1] = 0x7F007F007F007FLL;
      do
      {
        v149 = 0;
        v150 = *v147;
        v151 = v147[16];
        v152 = v147[32];
        v153 = v147[48];
        v154 = v147[64];
        v155 = v147[80];
        v156 = v147[96];
        v157 = v147[112];
        v158 = v147[128];
        v159 = v147[144];
        v160 = 176;
        v161 = v17;
        v162 = v147[160];
        do
        {
          v163 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v34.i8, 1), *(int16x4_t *)v151.i8, *(int16x4_t *)v34.i8, 0), *(int16x4_t *)v153.i8, *(int16x4_t *)v34.i8, 2), *(int16x4_t *)v154.i8, *(int16x4_t *)v34.i8, 3), *(int16x4_t *)v155.i8, v34, 4), *(int16x4_t *)v156.i8,
                     v34,
                     5),
                   *(int16x4_t *)v157.i8,
                   v34,
                   6);
          v164 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v34.i8, 1), *(int16x4_t *)v152.i8, *(int16x4_t *)v34.i8, 0), *(int16x4_t *)v154.i8, *(int16x4_t *)v34.i8, 2), *(int16x4_t *)v155.i8, *(int16x4_t *)v34.i8, 3), *(int16x4_t *)v156.i8, v34, 4), *(int16x4_t *)v157.i8, v34,
                   5);
          v165 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v152, *(int16x4_t *)v34.i8, 1), v151, *(int16x4_t *)v34.i8, 0), v153, *(int16x4_t *)v34.i8, 2), v154, *(int16x4_t *)v34.i8, 3), v155, v34, 4), v156,
                     v34,
                     5),
                   v157,
                   v34,
                   6);
          v166 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v153, *(int16x4_t *)v34.i8, 1), v152, *(int16x4_t *)v34.i8, 0), v154, *(int16x4_t *)v34.i8, 2), v155, *(int16x4_t *)v34.i8, 3), v156, v34, 4), v157, v34,
                   5);
          v167 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v34.i8, 1), *(int16x4_t *)v150.i8, *(int16x4_t *)v34.i8, 0), *(int16x4_t *)v152.i8, *(int16x4_t *)v34.i8, 2), *(int16x4_t *)v153.i8, *(int16x4_t *)v34.i8, 3), *(int16x4_t *)v154.i8, v34, 4),
                       *(int16x4_t *)v155.i8,
                       v34,
                       5),
                     *(int16x4_t *)v156.i8,
                     v34,
                     6),
                   *(int16x4_t *)v157.i8,
                   v34,
                   7);
          v168 = vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v154.i8, *(int16x4_t *)v34.i8, 1), *(int16x4_t *)v153.i8, *(int16x4_t *)v34.i8, 0), *(int16x4_t *)v155.i8, *(int16x4_t *)v34.i8, 2), *(int16x4_t *)v156.i8, *(int16x4_t *)v34.i8, 3), *(int16x4_t *)v157.i8, v34, 4);
          v169 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v151, *(int16x4_t *)v34.i8, 1), v150, *(int16x4_t *)v34.i8, 0), v152, *(int16x4_t *)v34.i8, 2), v153, *(int16x4_t *)v34.i8, 3), v154, v34, 4),
                       v155,
                       v34,
                       5),
                     v156,
                     v34,
                     6),
                   v157,
                   v34,
                   7);
          v170 = vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v154, *(int16x4_t *)v34.i8, 1), v153, *(int16x4_t *)v34.i8, 0), v155, *(int16x4_t *)v34.i8, 2), v156, *(int16x4_t *)v34.i8, 3), v157, v34, 4);
          v153 = v157;
          v157 = v147[v160];
          v171 = vmlal_lane_s16(v167, *(int16x4_t *)v158.i8, v35, 0);
          v172 = vmlal_laneq_s16(v163, *(int16x4_t *)v158.i8, v34, 7);
          v173 = vmlal_high_laneq_s16(v165, v158, v34, 7);
          v174 = vmlal_laneq_s16(v164, *(int16x4_t *)v158.i8, v34, 6);
          v175 = vmlal_high_laneq_s16(v166, v158, v34, 6);
          v176 = vmlal_high_lane_s16(v169, v158, v35, 0);
          v177 = vmlal_laneq_s16(v168, *(int16x4_t *)v158.i8, v34, 5);
          v178 = vmlal_high_laneq_s16(v170, v158, v34, 5);
          v150 = v154;
          v154 = v158;
          v158 = v147[v160 + 16];
          v179 = vmlal_lane_s16(v171, *(int16x4_t *)v159.i8, v35, 1);
          v180 = vmlal_lane_s16(v172, *(int16x4_t *)v159.i8, v35, 0);
          v181 = vmlal_high_lane_s16(v173, v159, v35, 0);
          v182 = vmlal_laneq_s16(v174, *(int16x4_t *)v159.i8, v34, 7);
          v183 = vmlal_high_laneq_s16(v175, v159, v34, 7);
          v184 = vmlal_laneq_s16(v177, *(int16x4_t *)v159.i8, v34, 6);
          v185 = vmlal_high_lane_s16(v176, v159, v35, 1);
          v186 = vmlal_high_laneq_s16(v178, v159, v34, 6);
          v151 = v155;
          v155 = v159;
          v159 = v147[v160 + 32];
          v187 = vmlal_lane_s16(v182, *(int16x4_t *)v162.i8, v35, 0);
          v188 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v179, *(int16x4_t *)v162.i8, v35, 2), *(int16x4_t *)v157.i8, v35, 3), 0xBuLL), vmlal_high_lane_s16(vmlal_high_lane_s16(v185, v162, v35, 2), v157, v35, 3), 0xBuLL);
          v189 = vmlal_high_lane_s16(v183, v162, v35, 0);
          v190 = vmlal_laneq_s16(v184, *(int16x4_t *)v162.i8, v34, 7);
          v191 = vmlal_high_laneq_s16(v186, v162, v34, 7);
          v152 = v156;
          v156 = v162;
          v192 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v180, *(int16x4_t *)v162.i8, v35, 1), *(int16x4_t *)v157.i8, v35, 2), *(int16x4_t *)v158.i8, v35, 3), 0xBuLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v181, v162, v35, 1), v157, v35, 2), v158, v35, 3), 0xBuLL);
          v162 = v147[v160 + 48];
          *(int8x8_t *)&v14[v149 / 4] = vqmovun_s16(vaddq_s16(v188, v148));
          *(int8x8_t *)&v146[v149] = vqmovun_s16(vaddq_s16(v192, v148));
          *(int8x8_t *)&v145[v149] = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v187, *(int16x4_t *)v157.i8, v35, 1), *(int16x4_t *)v158.i8, v35, 2), *(int16x4_t *)v159.i8, v35, 3), 0xBuLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v189, v157, v35, 1), v158, v35, 2), v159, v35, 3), 0xBuLL),
                                         v148));
          v160 += 64;
          *(int8x8_t *)&v144[v149] = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v190, *(int16x4_t *)v157.i8, v35, 0), *(int16x4_t *)v158.i8, v35, 1), *(int16x4_t *)v159.i8, v35, 2), *(int16x4_t *)v162.i8, v35, 3), 0xBuLL), vmlal_high_lane_s16(vmlal_high_lane_s16(
                                               vmlal_high_lane_s16(vmlal_high_lane_s16(v191, v157, v35, 0), v158, v35, 1), v159, v35, 2), v162, v35, 3), 0xBuLL), v148));
          v149 += 4 * (int)v15;
          v161 -= 4;
        }
        while (v161);
        ++v147;
        v14 += 2;
        v144 += 8;
        v145 += 8;
        v146 += 8;
        LODWORD(v16) = v16 - 8;
      }
      while ((_DWORD)v16);
    }
    else
    {
      v112 = (int16x4_t)v420[0];
      v113 = v421;
      v114 = v422;
      v115 = v423;
      v116 = v424;
      v117 = v425;
      v118 = v426;
      v119 = (int16x4_t)v427[0];
      v120 = (int16x4_t *)v428;
      v121 = (int16x4_t)v427[32];
      v122 = (int16x4_t)v427[64];
      v123.i64[0] = 0x7F007F007F007FLL;
      v123.i64[1] = 0x7F007F007F007FLL;
      v124 = (int16x4_t)v427[96];
      do
      {
        v125 = vmlal_lane_s16(vmull_lane_s16(v113, *(int16x4_t *)v34.i8, 1), v112, *(int16x4_t *)v34.i8, 0);
        v112 = v116;
        v126 = vmlal_lane_s16(vmull_lane_s16(v114, *(int16x4_t *)v34.i8, 1), v113, *(int16x4_t *)v34.i8, 0);
        v113 = v117;
        v127 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v126, v115, *(int16x4_t *)v34.i8, 2), v116, *(int16x4_t *)v34.i8, 3), v117, v34, 4), v118, v34, 5);
        v128 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v125, v114, *(int16x4_t *)v34.i8, 2), v115, *(int16x4_t *)v34.i8, 3), v116, v34, 4), v117, v34, 5), v118, v34, 6);
        v129 = vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v115, *(int16x4_t *)v34.i8, 1), v114, *(int16x4_t *)v34.i8, 0), v116, *(int16x4_t *)v34.i8, 2), v117, *(int16x4_t *)v34.i8, 3), v118, v34, 4);
        v130 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v116, *(int16x4_t *)v34.i8, 1), v115, *(int16x4_t *)v34.i8, 0), v117, *(int16x4_t *)v34.i8, 2), v118, *(int16x4_t *)v34.i8, 3);
        v114 = v118;
        v118 = v124;
        v117 = v122;
        v116 = v121;
        v121 = v120[32];
        v122 = v120[64];
        v124 = v120[96];
        v131 = vmlal_laneq_s16(v128, v119, v34, 7);
        v132 = vmlal_laneq_s16(v127, v119, v34, 6);
        v133 = vmlal_laneq_s16(v129, v119, v34, 5);
        v134 = vmlal_laneq_s16(v130, v119, v34, 4);
        v115 = v119;
        v119 = *v120;
        *(int8x8_t *)v131.i8 = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v131, v116, v35, 0), v117, v35, 1), v118, v35, 2), *v120, v35, 3), 0xBuLL), vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(v132, v116, v34, 7), v117, v35, 0), v118, v35,
                                           1),
                                         *v120,
                                         v35,
                                         2),
                                       v121,
                                       v35,
                                       3),
                                     0xBuLL),
                                   v123));
        *(int8x8_t *)v132.i8 = vqmovun_s16(vaddq_s16(vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(v133, v116, v34, 6), v117, v34, 7), v118, v35, 0), *v120, v35, 1), v121, v35, 2), v122, v35,
                                         3),
                                       0xBuLL),
                                     vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v134, v116, v34, 5), v117, v34, 6), v118, v34, 7), *v120, v35, 0), v121, v35, 1), v122, v35, 2), v124, v35,
                                       3),
                                     0xBuLL),
                                   v123));
        *v14 = v131.i32[0];
        *(_DWORD *)((char *)v14 + (int)v15) = v131.i32[1];
        *(_DWORD *)((char *)v14 + 2 * (int)v15) = v132.i32[0];
        *(_DWORD *)((char *)v14 + 3 * (int)v15) = v132.i32[1];
        v14 += (int)v15;
        v120 += 128;
        LODWORD(v17) = v17 - 4;
      }
      while ((_DWORD)v17);
    }
  }
  return result;
}

uint64_t av1_print_frame_contexts(unsigned __int16 *a1, char *__filename)
{
  FILE *v3;
  int v4;
  int v5;

  v3 = fopen(__filename, "w");
  v4 = 10622;
  do
  {
    v5 = *a1++;
    fprintf(v3, "%d ", v5);
    --v4;
  }
  while (v4);
  return fclose(v3);
}

uint64_t av1_check_trailing_bits(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  void (*v10)(_QWORD);
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  void (*v15)(_QWORD);
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  void (*v20)(_QWORD);
  unsigned int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  void (*v25)(_QWORD);
  unsigned int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  void (*v30)(_QWORD);
  unsigned int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  int v34;
  void (*v35)(_QWORD);
  unint64_t v36;
  unsigned __int8 *v37;
  int v38;
  void (*v39)(_QWORD);
  unint64_t v40;
  unsigned __int8 *v41;
  int v42;
  void (*v43)(_QWORD);

  v4 = *(unsigned int *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 16) & 7;
  v6 = v5 ^ 7;
  v7 = (unsigned __int8 *)(*(_QWORD *)a2 + (v4 >> 3));
  if ((unint64_t)v7 >= *(_QWORD *)(a2 + 8))
  {
    v10 = *(void (**)(_QWORD))(a2 + 32);
    if (v10)
      v10(*(_QWORD *)(a2 + 24));
    v9 = 0;
    if (v5 == 7)
      goto LABEL_49;
  }
  else
  {
    v8 = (*v7 >> (~(_BYTE)v4 & 7)) & 1;
    *(_DWORD *)(a2 + 16) = v4 + 1;
    v9 = v8 << v6;
    if (v5 == 7)
      goto LABEL_49;
  }
  v11 = 6 - v5;
  v12 = *(unsigned int *)(a2 + 16);
  v13 = (unsigned __int8 *)(*(_QWORD *)a2 + (v12 >> 3));
  if ((unint64_t)v13 >= *(_QWORD *)(a2 + 8))
  {
    v15 = *(void (**)(_QWORD))(a2 + 32);
    if (v15)
      v15(*(_QWORD *)(a2 + 24));
    if (v6 < 2)
      goto LABEL_49;
  }
  else
  {
    v14 = (*v13 >> (~(_BYTE)v12 & 7)) & 1;
    *(_DWORD *)(a2 + 16) = v12 + 1;
    v9 |= v14 << v11;
    if (v6 < 2)
      goto LABEL_49;
  }
  v16 = 5 - v5;
  v17 = *(unsigned int *)(a2 + 16);
  v18 = (unsigned __int8 *)(*(_QWORD *)a2 + (v17 >> 3));
  if ((unint64_t)v18 >= *(_QWORD *)(a2 + 8))
  {
    v20 = *(void (**)(_QWORD))(a2 + 32);
    if (v20)
      v20(*(_QWORD *)(a2 + 24));
    if (v11 < 2)
      goto LABEL_49;
  }
  else
  {
    v19 = (*v18 >> (~(_BYTE)v17 & 7)) & 1;
    *(_DWORD *)(a2 + 16) = v17 + 1;
    v9 |= v19 << v16;
    if (v11 < 2)
      goto LABEL_49;
  }
  v21 = 4 - v5;
  v22 = *(unsigned int *)(a2 + 16);
  v23 = (unsigned __int8 *)(*(_QWORD *)a2 + (v22 >> 3));
  if ((unint64_t)v23 < *(_QWORD *)(a2 + 8))
  {
    v24 = (*v23 >> (~(_BYTE)v22 & 7)) & 1;
    *(_DWORD *)(a2 + 16) = v22 + 1;
    v9 |= v24 << v21;
    if (v16 < 2)
      goto LABEL_49;
    goto LABEL_25;
  }
  v25 = *(void (**)(_QWORD))(a2 + 32);
  if (v25)
    v25(*(_QWORD *)(a2 + 24));
  if (v16 >= 2)
  {
LABEL_25:
    v26 = 3 - v5;
    v27 = *(unsigned int *)(a2 + 16);
    v28 = (unsigned __int8 *)(*(_QWORD *)a2 + (v27 >> 3));
    if ((unint64_t)v28 >= *(_QWORD *)(a2 + 8))
    {
      v30 = *(void (**)(_QWORD))(a2 + 32);
      if (v30)
        v30(*(_QWORD *)(a2 + 24));
      v29 = 0;
    }
    else
    {
      v29 = (*v28 >> (~(_BYTE)v27 & 7)) & 1;
      *(_DWORD *)(a2 + 16) = v27 + 1;
    }
    v9 |= v29 << v26;
    if (v21 >= 2)
    {
      v31 = 2 - v5;
      v32 = *(unsigned int *)(a2 + 16);
      v33 = (unsigned __int8 *)(*(_QWORD *)a2 + (v32 >> 3));
      if ((unint64_t)v33 >= *(_QWORD *)(a2 + 8))
      {
        v35 = *(void (**)(_QWORD))(a2 + 32);
        if (v35)
          v35(*(_QWORD *)(a2 + 24));
        v34 = 0;
      }
      else
      {
        v34 = (*v33 >> (~(_BYTE)v32 & 7)) & 1;
        *(_DWORD *)(a2 + 16) = v32 + 1;
      }
      v9 |= v34 << v31;
      if (v26 >= 2)
      {
        v36 = *(unsigned int *)(a2 + 16);
        v37 = (unsigned __int8 *)(*(_QWORD *)a2 + (v36 >> 3));
        if ((unint64_t)v37 >= *(_QWORD *)(a2 + 8))
        {
          v39 = *(void (**)(_QWORD))(a2 + 32);
          if (v39)
            v39(*(_QWORD *)(a2 + 24));
          v38 = 0;
        }
        else
        {
          v38 = (*v37 >> (~(_BYTE)v36 & 7)) & 1;
          *(_DWORD *)(a2 + 16) = v36 + 1;
        }
        v9 |= v38 << (1 - v5);
        if (v31 >= 2)
        {
          v40 = *(unsigned int *)(a2 + 16);
          v41 = (unsigned __int8 *)(*(_QWORD *)a2 + (v40 >> 3));
          if ((unint64_t)v41 >= *(_QWORD *)(a2 + 8))
          {
            v43 = *(void (**)(_QWORD))(a2 + 32);
            if (v43)
              v43(*(_QWORD *)(a2 + 24));
            v42 = 0;
          }
          else
          {
            v42 = (*v41 >> (~(_BYTE)v40 & 7)) & 1;
            *(_DWORD *)(a2 + 16) = v40 + 1;
          }
          v9 |= v42 << -(char)v5;
        }
      }
    }
  }
LABEL_49:
  if (v9 == 1 << (v5 ^ 7))
    return 0;
  *(_DWORD *)(a1 + 390860) = 7;
  return 0xFFFFFFFFLL;
}

double av1_dec_row_mt_dealloc(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  if (a1)
  {
    v2 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if (a1[4] < 1)
        goto LABEL_7;
      v3 = 0;
      v4 = 0;
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)(*(_QWORD *)a1 + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < a1[4]);
      v2 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
LABEL_7:
        free(*(void **)(v2 - 8));
    }
    v5 = *((_QWORD *)a1 + 1);
    if (v5)
    {
      if (a1[4] < 1)
        goto LABEL_13;
      v6 = 0;
      v7 = 0;
      do
      {
        pthread_cond_destroy((pthread_cond_t *)(*((_QWORD *)a1 + 1) + v6));
        ++v7;
        v6 += 48;
      }
      while (v7 < a1[4]);
      v5 = *((_QWORD *)a1 + 1);
      if (v5)
LABEL_13:
        free(*(void **)(v5 - 8));
    }
    v8 = *((_QWORD *)a1 + 3);
    if (v8)
      free(*(void **)(v8 - 8));
    result = 0.0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void av1_free_mc_tmp_buf(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1 + 256872;
  v2 = *(_DWORD *)(a1 + 256900);
  v3 = *(_QWORD *)(a1 + 256872);
  if (v2)
    v3 *= 2;
  if (v3)
  {
    free(*(void **)(v3 - 8));
    v2 = *(_DWORD *)(v1 + 28);
  }
  *(_QWORD *)v1 = 0;
  if (v2)
    v4 = 2 * *(_QWORD *)(v1 + 8);
  else
    v4 = *(_QWORD *)(v1 + 8);
  if (v4)
    free(*(void **)(v4 - 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  v5 = *(_QWORD *)(v1 + 32);
  if (v5)
    free(*(void **)(v5 - 8));
  *(_QWORD *)(v1 + 32) = 0;
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
    free(*(void **)(v6 - 8));
  *(_QWORD *)(v1 + 16) = 0;
  v7 = *(_QWORD *)(v1 + 40);
  if (v7)
    free(*(void **)(v7 - 8));
  *(_QWORD *)(v1 + 40) = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
    free(*(void **)(v8 - 8));
  *(_QWORD *)(v1 + 48) = 0;
}

uint64_t *av1_read_color_config(uint64_t *result, int a2, uint64_t a3, jmp_buf a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t (*v21)(uint64_t);
  void (*v22)(uint64_t);
  BOOL v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t (*v35)(_QWORD);
  unsigned __int8 *v36;
  uint64_t (*v37)(_QWORD);
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  uint64_t (*v42)(_QWORD);
  unint64_t v43;
  uint64_t (*v44)(_QWORD);
  uint64_t (*v45)(_QWORD);
  int v46;
  uint64_t (*v47)(_QWORD);
  int v48;
  uint64_t (*v49)(_QWORD);
  int v50;
  uint64_t (*v51)(_QWORD);
  int v52;
  uint64_t (*v53)(_QWORD);
  int v54;
  uint64_t (*v55)(_QWORD);
  int v56;
  uint64_t (*v57)(_QWORD);
  uint64_t (*v58)(_QWORD);
  int v59;
  uint64_t (*v60)(_QWORD);
  int v61;
  uint64_t (*v62)(_QWORD);
  int v63;
  uint64_t (*v64)(_QWORD);
  int v65;
  uint64_t (*v66)(_QWORD);
  int v67;
  uint64_t (*v68)(_QWORD);
  int v69;
  uint64_t (*v70)(_QWORD);
  int v71;
  uint64_t (*v72)(_QWORD);
  uint64_t (*v73)(_QWORD);
  int v74;
  uint64_t (*v75)(_QWORD);
  int v76;
  uint64_t (*v77)(_QWORD);
  int v78;
  uint64_t (*v79)(_QWORD);
  int v80;
  uint64_t (*v81)(_QWORD);
  int v82;
  uint64_t (*v83)(_QWORD);
  int v84;
  uint64_t (*v85)(_QWORD);
  int v86;
  uint64_t (*v87)(_QWORD);
  int v88;
  unint64_t v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  uint64_t (*v93)(_QWORD);
  uint64_t (*v94)(_QWORD);
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  int v99;
  unsigned int v100;
  uint64_t (*v101)(_QWORD);
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t (*v110)(_QWORD);
  uint64_t (*v111)(_QWORD);
  unsigned __int8 *v112;
  int v113;

  v7 = (uint64_t)result;
  v8 = *((unsigned int *)result + 4);
  v9 = *result;
  v10 = result[1];
  v11 = (unsigned __int8 *)(*result + (v8 >> 3));
  if ((unint64_t)v11 >= v10)
  {
    v21 = (uint64_t (*)(uint64_t))result[4];
    if (v21)
      result = (uint64_t *)v21(result[3]);
    v16 = 0;
    LOBYTE(v14) = *(_BYTE *)(a3 + 69);
  }
  else
  {
    v12 = *v11;
    v13 = v8 + 1;
    *((_DWORD *)result + 4) = v8 + 1;
    v14 = *(unsigned __int8 *)(a3 + 69);
    v15 = (1 << (~(_BYTE)v8 & 7)) & v12;
    v16 = v15 != 0;
    if (v14 == 2 && v15 != 0)
    {
      v18 = (unsigned __int8 *)(v9 + (v13 >> 3));
      if ((unint64_t)v18 >= v10)
      {
        v22 = (void (*)(uint64_t))result[4];
        if (v22)
          v22(result[3]);
      }
      else
      {
        v19 = *v18;
        *((_DWORD *)result + 4) = v8 + 2;
        if (((v19 >> (~(_BYTE)v13 & 7)) & 1) != 0)
        {
          v20 = 12;
LABEL_23:
          *(_DWORD *)(a3 + 72) = v20;
          goto LABEL_24;
        }
      }
      v20 = 10;
      goto LABEL_23;
    }
  }
  if ((char)v14 > 2)
  {
    result = (uint64_t *)aom_internal_error((uint64_t)a4, 5, "Unsupported profile/bit-depth combination");
    v20 = *(_DWORD *)(a3 + 72);
    if (v20 >= 9)
    {
LABEL_24:
      result = (uint64_t *)aom_internal_error((uint64_t)a4, 5, "Bit-depth %d not supported", v20);
      v20 = *(_DWORD *)(a3 + 72);
    }
  }
  else
  {
    if (v16)
      v20 = 10;
    else
      v20 = 8;
    *(_DWORD *)(a3 + 72) = v20;
    if (v20 >= 9)
      goto LABEL_24;
  }
  if (a2)
    v23 = v20 > 8;
  else
    v23 = 1;
  v24 = v23;
  *(_BYTE *)(a3 + 76) = v24;
  v25 = *(unsigned int *)(v7 + 16);
  v26 = *(_QWORD *)v7;
  v27 = *(_QWORD *)(v7 + 8);
  if (*(_BYTE *)(a3 + 69) == 1)
  {
LABEL_32:
    v28 = 0;
    *(_BYTE *)(a3 + 77) = 0;
    v29 = (unsigned __int8 *)(v26 + (v25 >> 3));
    if ((unint64_t)v29 < v27)
      goto LABEL_33;
LABEL_39:
    v37 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v37)
      result = (uint64_t *)v37(*(_QWORD *)(v7 + 24));
LABEL_41:
    *(_QWORD *)(a3 + 80) = 0x200000002;
    v38 = 2;
    *(_DWORD *)(a3 + 88) = 2;
    if (!v28)
      goto LABEL_144;
    goto LABEL_42;
  }
  v36 = (unsigned __int8 *)(v26 + (v25 >> 3));
  if ((unint64_t)v36 >= v27)
  {
    v44 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (!v44)
      goto LABEL_32;
    result = (uint64_t *)v44(*(_QWORD *)(v7 + 24));
    v28 = 0;
    LODWORD(v25) = *(_DWORD *)(v7 + 16);
    v26 = *(_QWORD *)v7;
    v27 = *(_QWORD *)(v7 + 8);
    *(_BYTE *)(a3 + 77) = 0;
    v29 = (unsigned __int8 *)(v26 + (v25 >> 3));
    if ((unint64_t)v29 >= v27)
      goto LABEL_39;
  }
  else
  {
    v28 = (*v36 >> (~(_BYTE)v25 & 7)) & 1;
    LODWORD(v25) = v25 + 1;
    *(_DWORD *)(v7 + 16) = v25;
    *(_BYTE *)(a3 + 77) = v28;
    v29 = (unsigned __int8 *)(v26 + (v25 >> 3));
    if ((unint64_t)v29 >= v27)
      goto LABEL_39;
  }
LABEL_33:
  v30 = *v29;
  v31 = v25 + 1;
  *(_DWORD *)(v7 + 16) = v25 + 1;
  if (((v30 >> (~(_BYTE)v25 & 7)) & 1) == 0)
    goto LABEL_41;
  v32 = (unsigned __int8 *)(v26 + (v31 >> 3));
  if ((unint64_t)v32 >= v27)
  {
    v45 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v45)
    {
      result = (uint64_t *)v45(*(_QWORD *)(v7 + 24));
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
      v34 = 0;
      v35 = (uint64_t (*)(_QWORD))(*(_QWORD *)v7 + (v31 >> 3));
      if ((unint64_t)v35 < v27)
        goto LABEL_36;
    }
    else
    {
      v34 = 0;
      v35 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
      if ((unint64_t)v35 < v27)
        goto LABEL_36;
    }
  }
  else
  {
    v33 = (*v32 >> (~(_BYTE)v31 & 7)) & 1;
    v31 = v25 + 2;
    *(_DWORD *)(v7 + 16) = v25 + 2;
    v34 = v33 << 7;
    v35 = (uint64_t (*)(_QWORD))(v26 + ((v25 + 2) >> 3));
    if ((unint64_t)v35 < v27)
    {
LABEL_36:
      LODWORD(v35) = (*(unsigned __int8 *)v35 >> (~(_BYTE)v31++ & 7)) & 1;
      *(_DWORD *)(v7 + 16) = v31;
      goto LABEL_55;
    }
  }
  v35 = *(uint64_t (**)(_QWORD))(v7 + 32);
  if (v35)
  {
    result = (uint64_t *)v35(*(_QWORD *)(v7 + 24));
    LODWORD(v35) = 0;
    v31 = *(_DWORD *)(v7 + 16);
    v26 = *(_QWORD *)v7;
    v27 = *(_QWORD *)(v7 + 8);
  }
LABEL_55:
  v46 = v34 | ((_DWORD)v35 << 6);
  v47 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v47 >= v27)
  {
    v47 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v47)
    {
      result = (uint64_t *)v47(*(_QWORD *)(v7 + 24));
      LODWORD(v47) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v47) = (*(unsigned __int8 *)v47 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v48 = v46 | (32 * (_DWORD)v47);
  v49 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v49 >= v27)
  {
    v49 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v49)
    {
      result = (uint64_t *)v49(*(_QWORD *)(v7 + 24));
      LODWORD(v49) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v49) = (*(unsigned __int8 *)v49 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v50 = v48 | (16 * (_DWORD)v49);
  v51 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v51 >= v27)
  {
    v51 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v51)
    {
      result = (uint64_t *)v51(*(_QWORD *)(v7 + 24));
      LODWORD(v51) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v51) = (*(unsigned __int8 *)v51 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v52 = v50 | (8 * (_DWORD)v51);
  v53 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v53 >= v27)
  {
    v53 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v53)
    {
      result = (uint64_t *)v53(*(_QWORD *)(v7 + 24));
      LODWORD(v53) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v53) = (*(unsigned __int8 *)v53 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v54 = v52 | (4 * (_DWORD)v53);
  v55 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v55 >= v27)
  {
    v55 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v55)
    {
      result = (uint64_t *)v55(*(_QWORD *)(v7 + 24));
      LODWORD(v55) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v55) = (*(unsigned __int8 *)v55 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v56 = v54 | (2 * (_DWORD)v55);
  v57 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v57 >= v27)
  {
    v57 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v57)
    {
      result = (uint64_t *)v57(*(_QWORD *)(v7 + 24));
      LODWORD(v57) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v57) = (*(unsigned __int8 *)v57 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  *(_DWORD *)(a3 + 80) = v57 | v56;
  v58 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v58 >= v27)
  {
    v58 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v58)
    {
      result = (uint64_t *)v58(*(_QWORD *)(v7 + 24));
      LODWORD(v58) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v58) = (*(unsigned __int8 *)v58 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v59 = (_DWORD)v58 << 7;
  v60 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v60 >= v27)
  {
    v60 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v60)
    {
      result = (uint64_t *)v60(*(_QWORD *)(v7 + 24));
      LODWORD(v60) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v60) = (*(unsigned __int8 *)v60 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v61 = v59 | ((_DWORD)v60 << 6);
  v62 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v62 >= v27)
  {
    v62 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v62)
    {
      result = (uint64_t *)v62(*(_QWORD *)(v7 + 24));
      LODWORD(v62) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v62) = (*(unsigned __int8 *)v62 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v63 = v61 | (32 * (_DWORD)v62);
  v64 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v64 >= v27)
  {
    v64 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v64)
    {
      result = (uint64_t *)v64(*(_QWORD *)(v7 + 24));
      LODWORD(v64) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v64) = (*(unsigned __int8 *)v64 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v65 = v63 | (16 * (_DWORD)v64);
  v66 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v66 >= v27)
  {
    v66 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v66)
    {
      result = (uint64_t *)v66(*(_QWORD *)(v7 + 24));
      LODWORD(v66) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v66) = (*(unsigned __int8 *)v66 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v67 = v65 | (8 * (_DWORD)v66);
  v68 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v68 >= v27)
  {
    v68 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v68)
    {
      result = (uint64_t *)v68(*(_QWORD *)(v7 + 24));
      LODWORD(v68) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v68) = (*(unsigned __int8 *)v68 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v69 = v67 | (4 * (_DWORD)v68);
  v70 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v70 >= v27)
  {
    v70 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v70)
    {
      result = (uint64_t *)v70(*(_QWORD *)(v7 + 24));
      LODWORD(v70) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v70) = (*(unsigned __int8 *)v70 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v71 = v69 | (2 * (_DWORD)v70);
  v72 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v72 >= v27)
  {
    v72 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v72)
    {
      result = (uint64_t *)v72(*(_QWORD *)(v7 + 24));
      LODWORD(v72) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v72) = (*(unsigned __int8 *)v72 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  *(_DWORD *)(a3 + 84) = v72 | v71;
  v73 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v73 >= v27)
  {
    v73 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v73)
    {
      result = (uint64_t *)v73(*(_QWORD *)(v7 + 24));
      LODWORD(v73) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v73) = (*(unsigned __int8 *)v73 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v74 = (_DWORD)v73 << 7;
  v75 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v75 >= v27)
  {
    v75 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v75)
    {
      result = (uint64_t *)v75(*(_QWORD *)(v7 + 24));
      LODWORD(v75) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v75) = (*(unsigned __int8 *)v75 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v76 = v74 | ((_DWORD)v75 << 6);
  v77 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v77 >= v27)
  {
    v77 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v77)
    {
      result = (uint64_t *)v77(*(_QWORD *)(v7 + 24));
      LODWORD(v77) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v77) = (*(unsigned __int8 *)v77 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v78 = v76 | (32 * (_DWORD)v77);
  v79 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v79 >= v27)
  {
    v79 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v79)
    {
      result = (uint64_t *)v79(*(_QWORD *)(v7 + 24));
      LODWORD(v79) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v79) = (*(unsigned __int8 *)v79 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v80 = v78 | (16 * (_DWORD)v79);
  v81 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v81 >= v27)
  {
    v81 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v81)
    {
      result = (uint64_t *)v81(*(_QWORD *)(v7 + 24));
      LODWORD(v81) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v81) = (*(unsigned __int8 *)v81 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v82 = v80 | (8 * (_DWORD)v81);
  v83 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v83 >= v27)
  {
    v83 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v83)
    {
      result = (uint64_t *)v83(*(_QWORD *)(v7 + 24));
      LODWORD(v83) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v83) = (*(unsigned __int8 *)v83 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v84 = v82 | (4 * (_DWORD)v83);
  v85 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v85 >= v27)
  {
    v85 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v85)
    {
      result = (uint64_t *)v85(*(_QWORD *)(v7 + 24));
      LODWORD(v85) = 0;
      v31 = *(_DWORD *)(v7 + 16);
      v26 = *(_QWORD *)v7;
      v27 = *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    LODWORD(v85) = (*(unsigned __int8 *)v85 >> (~(_BYTE)v31++ & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31;
  }
  v86 = v84 | (2 * (_DWORD)v85);
  v87 = (uint64_t (*)(_QWORD))(v26 + (v31 >> 3));
  if ((unint64_t)v87 >= v27)
  {
    v87 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v87)
    {
      result = (uint64_t *)v87(*(_QWORD *)(v7 + 24));
      LODWORD(v87) = 0;
    }
  }
  else
  {
    LODWORD(v87) = (*(unsigned __int8 *)v87 >> (~(_BYTE)v31 & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v31 + 1;
  }
  v38 = v87 | v86;
  *(_DWORD *)(a3 + 88) = v38;
  if (!v28)
  {
LABEL_144:
    if (*(_DWORD *)(a3 + 80) == 1 && *(_DWORD *)(a3 + 84) == 13 && !v38)
    {
      *(_DWORD *)(a3 + 100) = 0;
      *(_QWORD *)(a3 + 92) = 1;
      v88 = *(unsigned __int8 *)(a3 + 69);
      if (v88 != 1 && (v88 != 2 || *(_DWORD *)(a3 + 72) != 12))
        result = (uint64_t *)aom_internal_error((uint64_t)a4, 5, "sRGB colorspace not compatible with specified profile");
      goto LABEL_188;
    }
    v89 = *(unsigned int *)(v7 + 16);
    v90 = (unsigned __int8 *)(*(_QWORD *)v7 + (v89 >> 3));
    if ((unint64_t)v90 >= *(_QWORD *)(v7 + 8))
    {
      v94 = *(uint64_t (**)(_QWORD))(v7 + 32);
      if (v94)
        result = (uint64_t *)v94(*(_QWORD *)(v7 + 24));
      *(_DWORD *)(a3 + 92) = 0;
      v92 = *(unsigned __int8 *)(a3 + 69);
      if (v92 != 1)
      {
LABEL_153:
        if (!v92)
        {
          *(_QWORD *)(a3 + 96) = 0x100000001;
          LODWORD(v93) = 1;
          if (*(_DWORD *)(a3 + 88))
            goto LABEL_177;
          goto LABEL_175;
        }
        if (*(_DWORD *)(a3 + 72) != 12)
        {
          LODWORD(v93) = 0;
          *(_QWORD *)(a3 + 96) = 1;
          if (*(_DWORD *)(a3 + 88))
            goto LABEL_177;
          goto LABEL_175;
        }
        v95 = *(unsigned int *)(v7 + 16);
        v96 = *(_QWORD *)v7;
        v97 = *(_QWORD *)(v7 + 8);
        v98 = (unsigned __int8 *)(*(_QWORD *)v7 + (v95 >> 3));
        if ((unint64_t)v98 >= v97)
        {
          v101 = *(uint64_t (**)(_QWORD))(v7 + 32);
          if (v101)
            result = (uint64_t *)v101(*(_QWORD *)(v7 + 24));
          *(_DWORD *)(a3 + 96) = 0;
        }
        else
        {
          v99 = *v98 >> (~(_BYTE)v95 & 7);
          v100 = v95 + 1;
          *(_DWORD *)(v7 + 16) = v95 + 1;
          *(_DWORD *)(a3 + 96) = v99 & 1;
          if ((v99 & 1) != 0)
          {
            v93 = (uint64_t (*)(_QWORD))(v96 + (v100 >> 3));
            if ((unint64_t)v93 >= v97)
            {
              v93 = *(uint64_t (**)(_QWORD))(v7 + 32);
              if (v93)
              {
                result = (uint64_t *)v93(*(_QWORD *)(v7 + 24));
                LODWORD(v93) = 0;
              }
              *(_DWORD *)(a3 + 100) = (_DWORD)v93;
              if (*(_DWORD *)(a3 + 88))
              {
LABEL_177:
                if (!*(_DWORD *)(a3 + 96) || !*(_DWORD *)(a3 + 100))
                {
LABEL_188:
                  v43 = *(unsigned int *)(v7 + 16);
                  v112 = (unsigned __int8 *)(*(_QWORD *)v7 + (v43 >> 3));
                  if ((unint64_t)v112 >= *(_QWORD *)(v7 + 8))
                  {
                    v43 = *(_QWORD *)(v7 + 32);
                    if (v43)
                    {
                      result = (uint64_t *)((uint64_t (*)(_QWORD))v43)(*(_QWORD *)(v7 + 24));
                      LOBYTE(v43) = 0;
                    }
                  }
                  else
                  {
                    v113 = *v112 >> (~(_BYTE)v43 & 7);
                    *(_DWORD *)(v7 + 16) = v43 + 1;
                    LOBYTE(v43) = v113 & 1;
                  }
                  goto LABEL_192;
                }
                v102 = *(unsigned int *)(v7 + 16);
                v103 = *(_QWORD *)v7;
                v104 = *(_QWORD *)(v7 + 8);
                v105 = (unsigned __int8 *)(*(_QWORD *)v7 + (v102 >> 3));
                if ((unint64_t)v105 >= v104)
                {
                  v110 = *(uint64_t (**)(_QWORD))(v7 + 32);
                  if (v110)
                  {
                    result = (uint64_t *)v110(*(_QWORD *)(v7 + 24));
                    v107 = 0;
                    LODWORD(v102) = *(_DWORD *)(v7 + 16);
                    v108 = (unsigned __int8 *)(*(_QWORD *)v7 + (v102 >> 3));
                    if ((unint64_t)v108 < *(_QWORD *)(v7 + 8))
                      goto LABEL_181;
                  }
                  else
                  {
                    v107 = 0;
                    v108 = (unsigned __int8 *)(v103 + (v102 >> 3));
                    if ((unint64_t)v108 < v104)
                      goto LABEL_181;
                  }
                }
                else
                {
                  v106 = *v105 >> (~(_BYTE)v102 & 7);
                  LODWORD(v102) = v102 + 1;
                  *(_DWORD *)(v7 + 16) = v102;
                  v107 = 2 * (v106 & 1);
                  v108 = (unsigned __int8 *)(v103 + (v102 >> 3));
                  if ((unint64_t)v108 < v104)
                  {
LABEL_181:
                    v109 = (*v108 >> (~(_BYTE)v102 & 7)) & 1;
                    *(_DWORD *)(v7 + 16) = v102 + 1;
LABEL_187:
                    *(_DWORD *)(a3 + 104) = v109 | v107;
                    goto LABEL_188;
                  }
                }
                v111 = *(uint64_t (**)(_QWORD))(v7 + 32);
                if (v111)
                  result = (uint64_t *)v111(*(_QWORD *)(v7 + 24));
                v109 = 0;
                goto LABEL_187;
              }
            }
            else
            {
              LODWORD(v93) = (*(unsigned __int8 *)v93 >> (~(_BYTE)v100 & 7)) & 1;
              *(_DWORD *)(v7 + 16) = v95 + 2;
              *(_DWORD *)(a3 + 100) = (_DWORD)v93;
              if (*(_DWORD *)(a3 + 88))
                goto LABEL_177;
            }
LABEL_175:
            if (*(_DWORD *)(a3 + 96) | v93)
              result = (uint64_t *)aom_internal_error((uint64_t)a4, 5, "Identity CICP Matrix incompatible with non 4:4:4 color sampling");
            goto LABEL_177;
          }
        }
        LODWORD(v93) = 0;
        *(_DWORD *)(a3 + 100) = 0;
        if (*(_DWORD *)(a3 + 88))
          goto LABEL_177;
        goto LABEL_175;
      }
    }
    else
    {
      v91 = (*v90 >> (~(_BYTE)v89 & 7)) & 1;
      *(_DWORD *)(v7 + 16) = v89 + 1;
      *(_DWORD *)(a3 + 92) = v91;
      v92 = *(unsigned __int8 *)(a3 + 69);
      if (v92 != 1)
        goto LABEL_153;
    }
    LODWORD(v93) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    if (*(_DWORD *)(a3 + 88))
      goto LABEL_177;
    goto LABEL_175;
  }
LABEL_42:
  v39 = *(unsigned int *)(v7 + 16);
  v40 = (unsigned __int8 *)(*(_QWORD *)v7 + (v39 >> 3));
  if ((unint64_t)v40 >= *(_QWORD *)(v7 + 8))
  {
    v42 = *(uint64_t (**)(_QWORD))(v7 + 32);
    if (v42)
      result = (uint64_t *)v42(*(_QWORD *)(v7 + 24));
    v41 = 0;
  }
  else
  {
    v41 = (*v40 >> (~(_BYTE)v39 & 7)) & 1;
    *(_DWORD *)(v7 + 16) = v39 + 1;
  }
  LOBYTE(v43) = 0;
  *(_DWORD *)(a3 + 92) = v41;
  *(_QWORD *)(a3 + 96) = 0x100000001;
  *(_DWORD *)(a3 + 104) = 0;
LABEL_192:
  *(_BYTE *)(a3 + 108) = v43;
  return result;
}

_DWORD *av1_read_timing_info_header(_DWORD *result, jmp_buf a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int i;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t (*v11)(_QWORD);
  int v12;
  unsigned int j;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t (*v17)(_QWORD);
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t (*v25)(_QWORD);
  uint64_t (*v26)(_QWORD);
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t (*v33)(_QWORD);
  int v34;

  v5 = result;
  v6 = 0;
  for (i = 33; i > 1; --i)
  {
    while (1)
    {
      v9 = *(unsigned int *)(a3 + 16);
      v10 = (unsigned __int8 *)(*(_QWORD *)a3 + (v9 >> 3));
      if ((unint64_t)v10 >= *(_QWORD *)(a3 + 8))
        break;
      v8 = (*v10 >> (~(_BYTE)v9 & 7)) & 1;
      *(_DWORD *)(a3 + 16) = v9 + 1;
      v6 |= v8 << (i-- - 2);
      if (i <= 1)
        goto LABEL_7;
    }
    v11 = *(uint64_t (**)(_QWORD))(a3 + 32);
    if (v11)
      result = (_DWORD *)v11(*(_QWORD *)(a3 + 24));
  }
LABEL_7:
  v12 = 0;
  *v5 = v6;
  for (j = 33; j > 1; --j)
  {
    while (1)
    {
      v15 = *(unsigned int *)(a3 + 16);
      v16 = (unsigned __int8 *)(*(_QWORD *)a3 + (v15 >> 3));
      if ((unint64_t)v16 >= *(_QWORD *)(a3 + 8))
        break;
      v14 = (*v16 >> (~(_BYTE)v15 & 7)) & 1;
      *(_DWORD *)(a3 + 16) = v15 + 1;
      v12 |= v14 << (j-- - 2);
      if (j <= 1)
        goto LABEL_13;
    }
    v17 = *(uint64_t (**)(_QWORD))(a3 + 32);
    if (v17)
      result = (_DWORD *)v17(*(_QWORD *)(a3 + 24));
  }
LABEL_13:
  v5[1] = v12;
  if (!*v5 || !v12)
  {
    result = (_DWORD *)aom_internal_error((uint64_t)a2, 5, "num_units_in_display_tick and time_scale must be greater than 0.");
    v18 = *(unsigned int *)(a3 + 16);
    v19 = (unsigned __int8 *)(*(_QWORD *)a3 + (v18 >> 3));
    if ((unint64_t)v19 < *(_QWORD *)(a3 + 8))
      goto LABEL_16;
LABEL_24:
    v26 = *(uint64_t (**)(_QWORD))(a3 + 32);
    if (v26)
      result = (_DWORD *)v26(*(_QWORD *)(a3 + 24));
    v5[2] = 0;
    return result;
  }
  v18 = *(unsigned int *)(a3 + 16);
  v19 = (unsigned __int8 *)(*(_QWORD *)a3 + (v18 >> 3));
  if ((unint64_t)v19 >= *(_QWORD *)(a3 + 8))
    goto LABEL_24;
LABEL_16:
  v20 = *v19 >> (~(_BYTE)v18 & 7);
  *(_DWORD *)(a3 + 16) = v18 + 1;
  v5[2] = v20 & 1;
  if ((v20 & 1) == 0)
    return result;
  v21 = 0;
  while (1)
  {
    v23 = *(unsigned int *)(a3 + 16);
    v24 = (unsigned __int8 *)(*(_QWORD *)a3 + (v23 >> 3));
    if ((unint64_t)v24 >= *(_QWORD *)(a3 + 8))
    {
      v25 = *(uint64_t (**)(_QWORD))(a3 + 32);
      if (v25)
        result = (_DWORD *)v25(*(_QWORD *)(a3 + 24));
      goto LABEL_19;
    }
    v22 = *v24;
    *(_DWORD *)(a3 + 16) = v23 + 1;
    if (((v22 >> (~(_BYTE)v23 & 7)) & 1) != 0)
      break;
LABEL_19:
    if (++v21 == 32)
      goto LABEL_36;
  }
  v27 = ~(-1 << v21);
  v28 = 0;
  if (v21)
  {
    v29 = v21 + 1;
    do
    {
      while (1)
      {
        v31 = *(unsigned int *)(a3 + 16);
        v32 = (unsigned __int8 *)(*(_QWORD *)a3 + (v31 >> 3));
        if ((unint64_t)v32 >= *(_QWORD *)(a3 + 8))
          break;
        v30 = (*v32 >> (~(_BYTE)v31 & 7)) & 1;
        *(_DWORD *)(a3 + 16) = v31 + 1;
        v28 |= v30 << (v29-- - 2);
        if (v29 <= 1)
          goto LABEL_35;
      }
      v33 = *(uint64_t (**)(_QWORD))(a3 + 32);
      if (v33)
        result = (_DWORD *)v33(*(_QWORD *)(a3 + 24));
      --v29;
    }
    while (v29 > 1);
  }
LABEL_35:
  v34 = v28 + v27;
  if (v28 + v27 == -1)
  {
LABEL_36:
    result = (_DWORD *)aom_internal_error((uint64_t)a2, 5, "num_ticks_per_picture_minus_1 cannot be (1 << 32) - 1.");
    v34 = -1;
  }
  v5[3] = v34 + 1;
  return result;
}

uint64_t av1_read_decoder_model_info(uint64_t result, uint64_t *a2)
{
  _DWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t);
  int v8;
  uint64_t (*v9)(uint64_t);
  int v10;
  uint64_t (*v11)(uint64_t);
  int v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  int v18;
  unsigned int i;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t (*v23)(uint64_t);
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(uint64_t);
  int v28;
  uint64_t (*v29)(uint64_t);
  int v30;
  uint64_t (*v31)(uint64_t);
  int v32;
  unsigned int v33;
  uint64_t (*v34)(uint64_t);
  int v35;
  unsigned int v36;
  uint64_t (*v37)(uint64_t);
  unsigned __int8 *v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t (*v52)(uint64_t);
  uint64_t (*v53)(uint64_t);
  uint64_t (*v54)(uint64_t);
  uint64_t (*v55)(uint64_t);
  uint64_t (*v56)(uint64_t);

  v3 = (_DWORD *)result;
  v4 = *((unsigned int *)a2 + 4);
  v5 = *a2;
  v6 = a2[1];
  v7 = (uint64_t (*)(uint64_t))(*a2 + (v4 >> 3));
  if ((unint64_t)v7 >= v6)
  {
    v7 = (uint64_t (*)(uint64_t))a2[4];
    if (v7)
    {
      result = v7(a2[3]);
      LODWORD(v7) = 0;
      LODWORD(v4) = *((_DWORD *)a2 + 4);
      v5 = *a2;
      v6 = a2[1];
    }
  }
  else
  {
    LODWORD(v7) = (*(unsigned __int8 *)v7 >> (~(_BYTE)v4 & 7)) & 1;
    LODWORD(v4) = v4 + 1;
    *((_DWORD *)a2 + 4) = v4;
  }
  v8 = 16 * (_DWORD)v7;
  v9 = (uint64_t (*)(uint64_t))(v5 + (v4 >> 3));
  if ((unint64_t)v9 >= v6)
  {
    v9 = (uint64_t (*)(uint64_t))a2[4];
    if (v9)
    {
      result = v9(a2[3]);
      LODWORD(v9) = 0;
      LODWORD(v4) = *((_DWORD *)a2 + 4);
      v5 = *a2;
      v6 = a2[1];
    }
  }
  else
  {
    LODWORD(v9) = (*(unsigned __int8 *)v9 >> (~(_BYTE)v4 & 7)) & 1;
    LODWORD(v4) = v4 + 1;
    *((_DWORD *)a2 + 4) = v4;
  }
  v10 = v8 | (8 * (_DWORD)v9);
  v11 = (uint64_t (*)(uint64_t))(v5 + (v4 >> 3));
  if ((unint64_t)v11 >= v6)
  {
    v11 = (uint64_t (*)(uint64_t))a2[4];
    if (v11)
    {
      result = v11(a2[3]);
      LODWORD(v11) = 0;
      LODWORD(v4) = *((_DWORD *)a2 + 4);
      v5 = *a2;
      v6 = a2[1];
    }
  }
  else
  {
    LODWORD(v11) = (*(unsigned __int8 *)v11 >> (~(_BYTE)v4 & 7)) & 1;
    LODWORD(v4) = v4 + 1;
    *((_DWORD *)a2 + 4) = v4;
  }
  v12 = v10 | (4 * (_DWORD)v11);
  v13 = (uint64_t (*)(uint64_t))(v5 + (v4 >> 3));
  if ((unint64_t)v13 >= v6)
  {
    v13 = (uint64_t (*)(uint64_t))a2[4];
    if (v13)
    {
      result = v13(a2[3]);
      LODWORD(v13) = 0;
      LODWORD(v4) = *((_DWORD *)a2 + 4);
      v5 = *a2;
      v6 = a2[1];
    }
  }
  else
  {
    LODWORD(v13) = (*(unsigned __int8 *)v13 >> (~(_BYTE)v4 & 7)) & 1;
    LODWORD(v4) = v4 + 1;
    *((_DWORD *)a2 + 4) = v4;
  }
  v14 = v12 | (2 * (_DWORD)v13);
  v15 = (unsigned __int8 *)(v5 + (v4 >> 3));
  if ((unint64_t)v15 >= v6)
  {
    v17 = (uint64_t (*)(uint64_t))a2[4];
    if (v17)
      result = v17(a2[3]);
    v16 = 0;
  }
  else
  {
    v16 = (*v15 >> (~(_BYTE)v4 & 7)) & 1;
    *((_DWORD *)a2 + 4) = v4 + 1;
  }
  v18 = 0;
  v3[1] = (v16 | v14) + 1;
  for (i = 33; i > 1; --i)
  {
    while (1)
    {
      v21 = *((unsigned int *)a2 + 4);
      v22 = (unsigned __int8 *)(*a2 + (v21 >> 3));
      if ((unint64_t)v22 >= a2[1])
        break;
      v20 = (*v22 >> (~(_BYTE)v21 & 7)) & 1;
      *((_DWORD *)a2 + 4) = v21 + 1;
      v18 |= v20 << (i-- - 2);
      if (i <= 1)
        goto LABEL_28;
    }
    v23 = (uint64_t (*)(uint64_t))a2[4];
    if (v23)
      result = v23(a2[3]);
  }
LABEL_28:
  *v3 = v18;
  v24 = *((unsigned int *)a2 + 4);
  v25 = *a2;
  v26 = a2[1];
  v27 = (uint64_t (*)(uint64_t))(*a2 + (v24 >> 3));
  if ((unint64_t)v27 >= v26)
  {
    v27 = (uint64_t (*)(uint64_t))a2[4];
    if (v27)
    {
      result = v27(a2[3]);
      LODWORD(v27) = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v25 = *a2;
      v26 = a2[1];
    }
  }
  else
  {
    LODWORD(v27) = (*(unsigned __int8 *)v27 >> (~(_BYTE)v24 & 7)) & 1;
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
  }
  v28 = 16 * (_DWORD)v27;
  v29 = (uint64_t (*)(uint64_t))(v25 + (v24 >> 3));
  if ((unint64_t)v29 >= v26)
  {
    v29 = (uint64_t (*)(uint64_t))a2[4];
    if (v29)
    {
      result = v29(a2[3]);
      LODWORD(v29) = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v25 = *a2;
      v26 = a2[1];
    }
  }
  else
  {
    LODWORD(v29) = (*(unsigned __int8 *)v29 >> (~(_BYTE)v24 & 7)) & 1;
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
  }
  v30 = v28 | (8 * (_DWORD)v29);
  v31 = (uint64_t (*)(uint64_t))(v25 + (v24 >> 3));
  if ((unint64_t)v31 >= v26)
  {
    v31 = (uint64_t (*)(uint64_t))a2[4];
    if (v31)
    {
      result = v31(a2[3]);
      LODWORD(v31) = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v25 = *a2;
      v26 = a2[1];
    }
  }
  else
  {
    v32 = *(unsigned __int8 *)v31 >> (~(_BYTE)v24 & 7);
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
    LODWORD(v31) = 4 * (v32 & 1);
  }
  v33 = v31 | v30;
  v34 = (uint64_t (*)(uint64_t))(v25 + (v24 >> 3));
  if ((unint64_t)v34 >= v26)
  {
    v34 = (uint64_t (*)(uint64_t))a2[4];
    if (v34)
    {
      result = v34(a2[3]);
      LODWORD(v34) = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v25 = *a2;
      v26 = a2[1];
    }
  }
  else
  {
    v35 = *(unsigned __int8 *)v34 >> (~(_BYTE)v24 & 7);
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
    LODWORD(v34) = 2 * (v35 & 1);
  }
  v36 = v34 | v33;
  v37 = (uint64_t (*)(uint64_t))(v25 + (v24 >> 3));
  if ((unint64_t)v37 >= v26)
  {
    v37 = (uint64_t (*)(uint64_t))a2[4];
    if (v37)
    {
      result = v37(a2[3]);
      LODWORD(v37) = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v25 = *a2;
      v26 = a2[1];
    }
  }
  else
  {
    LODWORD(v37) = (*(unsigned __int8 *)v37 >> (~(_BYTE)v24 & 7)) & 1;
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
  }
  v3[2] = (v37 | v36) + 1;
  v38 = (unsigned __int8 *)(v25 + (v24 >> 3));
  if ((unint64_t)v38 < v26)
  {
    v39 = *v38 >> (~(_BYTE)v24 & 7);
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
    v40 = 16 * (v39 & 1);
    v41 = (unsigned __int8 *)(v25 + (v24 >> 3));
    if ((unint64_t)v41 < v26)
      goto LABEL_50;
LABEL_56:
    v53 = (uint64_t (*)(uint64_t))a2[4];
    if (v53)
    {
      result = v53(a2[3]);
      v43 = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v25 = *a2;
      v26 = a2[1];
      v44 = (unsigned __int8 *)(*a2 + (v24 >> 3));
      if ((unint64_t)v44 >= v26)
        goto LABEL_58;
    }
    else
    {
      v43 = 0;
      v44 = (unsigned __int8 *)(v25 + (v24 >> 3));
      if ((unint64_t)v44 >= v26)
        goto LABEL_58;
    }
LABEL_51:
    v45 = *v44 >> (~(_BYTE)v24 & 7);
    LODWORD(v24) = v24 + 1;
    *((_DWORD *)a2 + 4) = v24;
    v46 = 4 * (v45 & 1);
    v47 = (unsigned __int8 *)(v25 + (v24 >> 3));
    if ((unint64_t)v47 < v26)
      goto LABEL_52;
LABEL_60:
    v55 = (uint64_t (*)(uint64_t))a2[4];
    if (v55)
    {
      result = v55(a2[3]);
      v49 = 0;
      LODWORD(v24) = *((_DWORD *)a2 + 4);
      v50 = (unsigned __int8 *)(*a2 + (v24 >> 3));
      if ((unint64_t)v50 < a2[1])
        goto LABEL_53;
    }
    else
    {
      v49 = 0;
      v50 = (unsigned __int8 *)(v25 + (v24 >> 3));
      if ((unint64_t)v50 < v26)
        goto LABEL_53;
    }
    goto LABEL_62;
  }
  v52 = (uint64_t (*)(uint64_t))a2[4];
  if (v52)
  {
    result = v52(a2[3]);
    v40 = 0;
    LODWORD(v24) = *((_DWORD *)a2 + 4);
    v25 = *a2;
    v26 = a2[1];
    v41 = (unsigned __int8 *)(*a2 + (v24 >> 3));
    if ((unint64_t)v41 >= v26)
      goto LABEL_56;
  }
  else
  {
    v40 = 0;
    v41 = (unsigned __int8 *)(v25 + (v24 >> 3));
    if ((unint64_t)v41 >= v26)
      goto LABEL_56;
  }
LABEL_50:
  v42 = *v41 >> (~(_BYTE)v24 & 7);
  LODWORD(v24) = v24 + 1;
  *((_DWORD *)a2 + 4) = v24;
  v43 = 8 * (v42 & 1);
  v44 = (unsigned __int8 *)(v25 + (v24 >> 3));
  if ((unint64_t)v44 < v26)
    goto LABEL_51;
LABEL_58:
  v54 = (uint64_t (*)(uint64_t))a2[4];
  if (v54)
  {
    result = v54(a2[3]);
    v46 = 0;
    LODWORD(v24) = *((_DWORD *)a2 + 4);
    v25 = *a2;
    v26 = a2[1];
    v47 = (unsigned __int8 *)(*a2 + (v24 >> 3));
    if ((unint64_t)v47 >= v26)
      goto LABEL_60;
  }
  else
  {
    v46 = 0;
    v47 = (unsigned __int8 *)(v25 + (v24 >> 3));
    if ((unint64_t)v47 >= v26)
      goto LABEL_60;
  }
LABEL_52:
  v48 = *v47 >> (~(_BYTE)v24 & 7);
  LODWORD(v24) = v24 + 1;
  *((_DWORD *)a2 + 4) = v24;
  v49 = 2 * (v48 & 1);
  v50 = (unsigned __int8 *)(v25 + (v24 >> 3));
  if ((unint64_t)v50 < v26)
  {
LABEL_53:
    v51 = (*v50 >> (~(_BYTE)v24 & 7)) & 1;
    *((_DWORD *)a2 + 4) = v24 + 1;
    goto LABEL_65;
  }
LABEL_62:
  v56 = (uint64_t (*)(uint64_t))a2[4];
  if (v56)
    result = v56(a2[3]);
  v51 = 0;
LABEL_65:
  v3[3] = (v51 | v49 | v46 | v43 | v40) + 1;
  return result;
}

uint64_t av1_read_sequence_header(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);
  int v21;
  uint64_t (*v22)(uint64_t);
  int v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t);
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t (*v35)(uint64_t);
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t (*v44)(uint64_t);
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t (*v53)(uint64_t);
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t);
  uint64_t (*v63)(uint64_t);
  unsigned __int8 *v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  uint64_t (*v72)(uint64_t);
  unsigned __int8 *v73;
  int v74;
  uint64_t (*v75)(uint64_t);
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t (*v79)(uint64_t);
  unint64_t v80;
  unsigned __int8 *v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t (*v86)(uint64_t);
  uint64_t (*v87)(uint64_t);
  uint64_t (*v88)(uint64_t);
  uint64_t (*v89)(uint64_t);
  uint64_t (*v90)(uint64_t);
  unsigned __int8 *v91;
  int v92;
  unsigned int v93;
  unsigned __int8 *v94;
  int v95;
  uint64_t (*v96)(uint64_t);
  uint64_t (*v97)(uint64_t);
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  char v102;
  unsigned int v103;
  uint64_t (*v104)(uint64_t);
  unsigned __int8 *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  char v111;
  unsigned int v112;
  uint64_t (*v113)(uint64_t);
  uint64_t (*v114)(uint64_t);
  unsigned __int8 *v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  int v121;
  int v122;
  uint64_t (*v123)(uint64_t);
  int v124;
  uint64_t (*v125)(uint64_t);
  unsigned int v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t (*v129)(uint64_t);
  uint64_t (*v130)(uint64_t);
  int v131;
  int v132;
  uint64_t (*v133)(uint64_t);
  uint64_t (*v134)(uint64_t);
  int v135;
  uint64_t (*v136)(uint64_t);
  int v137;
  uint64_t (*v138)(uint64_t);
  uint64_t (*v139)(uint64_t);
  int v140;
  uint64_t (*v141)(uint64_t);
  int v142;
  unsigned __int8 *v143;
  int v144;
  uint64_t (*v145)(uint64_t);
  int v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;

  v5 = result;
  v6 = *((unsigned int *)a2 + 4);
  v7 = *a2;
  v8 = a2[1];
  v9 = (unsigned __int8 *)(*a2 + (v6 >> 3));
  if ((unint64_t)v9 >= v8)
  {
    v17 = (uint64_t (*)(uint64_t))a2[4];
    if (v17)
    {
      result = v17(a2[3]);
      v10 = 0;
      LODWORD(v6) = *((_DWORD *)a2 + 4);
      v7 = *a2;
      v8 = a2[1];
      v11 = (unsigned __int8 *)(*a2 + (v6 >> 3));
      if ((unint64_t)v11 >= v8)
        goto LABEL_8;
    }
    else
    {
      v10 = 0;
      v11 = (unsigned __int8 *)(v7 + (v6 >> 3));
      if ((unint64_t)v11 >= v8)
        goto LABEL_8;
    }
LABEL_3:
    v12 = (*v11 >> (~(_BYTE)v6 & 7)) & 1;
    LODWORD(v6) = v6 + 1;
    *((_DWORD *)a2 + 4) = v6;
    v13 = (unsigned __int8 *)(v7 + (v6 >> 3));
    if ((unint64_t)v13 < v8)
      goto LABEL_4;
LABEL_10:
    v19 = (uint64_t (*)(uint64_t))a2[4];
    if (v19)
    {
      result = v19(a2[3]);
      v14 = 0;
      LODWORD(v6) = *((_DWORD *)a2 + 4);
      v7 = *a2;
      v8 = a2[1];
      v15 = (unsigned __int8 *)(*a2 + (v6 >> 3));
      if ((unint64_t)v15 < v8)
        goto LABEL_5;
    }
    else
    {
      v14 = 0;
      v15 = (unsigned __int8 *)(v7 + (v6 >> 3));
      if ((unint64_t)v15 < v8)
        goto LABEL_5;
    }
LABEL_12:
    v20 = (uint64_t (*)(uint64_t))a2[4];
    if (v20)
    {
      result = v20(a2[3]);
      v16 = 0;
      LODWORD(v6) = *((_DWORD *)a2 + 4);
      v7 = *a2;
      v8 = a2[1];
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_21;
  }
  v10 = (*v9 >> (~(_BYTE)v6 & 7)) & 1;
  LODWORD(v6) = v6 + 1;
  *((_DWORD *)a2 + 4) = v6;
  v11 = (unsigned __int8 *)(v7 + (v6 >> 3));
  if ((unint64_t)v11 < v8)
    goto LABEL_3;
LABEL_8:
  v18 = (uint64_t (*)(uint64_t))a2[4];
  if (v18)
  {
    result = v18(a2[3]);
    v12 = 0;
    LODWORD(v6) = *((_DWORD *)a2 + 4);
    v7 = *a2;
    v8 = a2[1];
    v13 = (unsigned __int8 *)(*a2 + (v6 >> 3));
    if ((unint64_t)v13 >= v8)
      goto LABEL_10;
  }
  else
  {
    v12 = 0;
    v13 = (unsigned __int8 *)(v7 + (v6 >> 3));
    if ((unint64_t)v13 >= v8)
      goto LABEL_10;
  }
LABEL_4:
  v14 = (*v13 >> (~(_BYTE)v6 & 7)) & 1;
  LODWORD(v6) = v6 + 1;
  *((_DWORD *)a2 + 4) = v6;
  v15 = (unsigned __int8 *)(v7 + (v6 >> 3));
  if ((unint64_t)v15 >= v8)
    goto LABEL_12;
LABEL_5:
  v16 = (*v15 >> (~(_BYTE)v6 & 7)) & 1;
  LODWORD(v6) = v6 + 1;
  *((_DWORD *)a2 + 4) = v6;
LABEL_21:
  v21 = 4 * v12;
  v22 = (uint64_t (*)(uint64_t))(v7 + (v6 >> 3));
  v148 = v5;
  if ((unint64_t)v22 >= v8)
  {
    v22 = (uint64_t (*)(uint64_t))a2[4];
    if (v22)
    {
      result = v22(a2[3]);
      LODWORD(v22) = 0;
      LODWORD(v6) = *((_DWORD *)a2 + 4);
      v7 = *a2;
      v8 = a2[1];
    }
  }
  else
  {
    LODWORD(v22) = (*(unsigned __int8 *)v22 >> (~(_BYTE)v6 & 7)) & 1;
    LODWORD(v6) = v6 + 1;
    *((_DWORD *)a2 + 4) = v6;
  }
  v23 = 2 * v14;
  v24 = 8 * (_DWORD)v22;
  v25 = (uint64_t (*)(uint64_t))(v7 + (v6 >> 3));
  v150 = 8 * v10;
  if ((unint64_t)v25 >= v8)
  {
    v25 = (uint64_t (*)(uint64_t))a2[4];
    if (v25)
    {
      result = v25(a2[3]);
      LODWORD(v25) = 0;
      LODWORD(v6) = *((_DWORD *)a2 + 4);
      v7 = *a2;
      v8 = a2[1];
    }
  }
  else
  {
    LODWORD(v25) = (*(unsigned __int8 *)v25 >> (~(_BYTE)v6 & 7)) & 1;
    LODWORD(v6) = v6 + 1;
    *((_DWORD *)a2 + 4) = v6;
  }
  v26 = 4 * (_DWORD)v25;
  v27 = (4 * (_DWORD)v25) | v24;
  v28 = (uint64_t (*)(uint64_t))(v7 + (v6 >> 3));
  v151 = a3;
  v149 = v26;
  if ((unint64_t)v28 >= v8)
  {
    v28 = (uint64_t (*)(uint64_t))a2[4];
    if (v28)
    {
      result = v28(a2[3]);
      LODWORD(v28) = 0;
      LODWORD(v6) = *((_DWORD *)a2 + 4);
      v7 = *a2;
      v8 = a2[1];
    }
  }
  else
  {
    LODWORD(v28) = (*(unsigned __int8 *)v28 >> (~(_BYTE)v6 & 7)) & 1;
    LODWORD(v6) = v6 + 1;
    *((_DWORD *)a2 + 4) = v6;
  }
  v29 = v16;
  v30 = v16 | v23 | v21 | (8 * v10);
  v31 = 2 * (_DWORD)v28;
  v32 = (2 * (_DWORD)v28) | v27;
  v33 = (unsigned __int8 *)(v7 + (v6 >> 3));
  if ((unint64_t)v33 >= v8)
  {
    v35 = (uint64_t (*)(uint64_t))a2[4];
    if (v35)
      result = v35(a2[3]);
    v34 = 0;
  }
  else
  {
    v34 = (*v33 >> (~(_BYTE)v6 & 7)) & 1;
    *((_DWORD *)a2 + 4) = v6 + 1;
  }
  v36 = 0;
  v37 = v30 + 1;
  v38 = (v34 | v32) + 1;
  v39 = v29 + v150 + v21 + v23;
  do
  {
    while (1)
    {
      v42 = *((unsigned int *)a2 + 4);
      v43 = (unsigned __int8 *)(*a2 + (v42 >> 3));
      if ((unint64_t)v43 >= a2[1])
        break;
      v40 = (*v43 >> (~(_BYTE)v42 & 7)) & 1;
      *((_DWORD *)a2 + 4) = v42 + 1;
      v36 |= v40 << v39;
      v41 = v39-- + 1;
      if (v41 <= 1)
        goto LABEL_44;
    }
    v44 = (uint64_t (*)(uint64_t))a2[4];
    if (v44)
      result = v44(a2[3]);
    v45 = v39-- + 1;
  }
  while (v45 > 1);
LABEL_44:
  v46 = 0;
  v47 = v36 + 1;
  v48 = v34 + v24 + v149 + v31;
  do
  {
    while (1)
    {
      v51 = *((unsigned int *)a2 + 4);
      v52 = (unsigned __int8 *)(*a2 + (v51 >> 3));
      if ((unint64_t)v52 >= a2[1])
        break;
      v49 = (*v52 >> (~(_BYTE)v51 & 7)) & 1;
      *((_DWORD *)a2 + 4) = v51 + 1;
      v46 |= v49 << v48;
      v50 = v48-- + 1;
      if (v50 <= 1)
        goto LABEL_50;
    }
    v53 = (uint64_t (*)(uint64_t))a2[4];
    if (v53)
      result = v53(a2[3]);
    v54 = v48-- + 1;
  }
  while (v54 > 1);
LABEL_50:
  *(_DWORD *)v151 = v37;
  *(_DWORD *)(v151 + 4) = v38;
  *(_DWORD *)(v151 + 8) = v47;
  *(_DWORD *)(v151 + 12) = v46 + 1;
  if (*(_BYTE *)(v151 + 58))
    goto LABEL_51;
  v80 = *((unsigned int *)a2 + 4);
  v81 = (unsigned __int8 *)(*a2 + (v80 >> 3));
  if ((unint64_t)v81 >= a2[1])
  {
    v88 = (uint64_t (*)(uint64_t))a2[4];
    if (v88)
      result = v88(a2[3]);
LABEL_51:
    *(_BYTE *)(v151 + 16) = 0;
    goto LABEL_52;
  }
  v82 = *v81 >> (~(_BYTE)v80 & 7);
  *((_DWORD *)a2 + 4) = v80 + 1;
  *(_BYTE *)(v151 + 16) = v82 & 1;
  if ((v82 & 1) != 0)
  {
    v83 = *((unsigned int *)a2 + 4);
    v84 = *a2;
    v85 = a2[1];
    v86 = (uint64_t (*)(uint64_t))(*a2 + (v83 >> 3));
    if ((unint64_t)v86 >= v85)
    {
      v86 = (uint64_t (*)(uint64_t))a2[4];
      if (v86)
      {
        result = v86(a2[3]);
        LODWORD(v86) = 0;
        LODWORD(v83) = *((_DWORD *)a2 + 4);
        v84 = *a2;
        v85 = a2[1];
      }
    }
    else
    {
      LODWORD(v86) = (*(unsigned __int8 *)v86 >> (~(_BYTE)v83 & 7)) & 1;
      LODWORD(v83) = v83 + 1;
      *((_DWORD *)a2 + 4) = v83;
    }
    v132 = 8 * (_DWORD)v86;
    v133 = (uint64_t (*)(uint64_t))(v84 + (v83 >> 3));
    if ((unint64_t)v133 >= v85)
    {
      v133 = (uint64_t (*)(uint64_t))a2[4];
      if (v133)
      {
        result = v133(a2[3]);
        LODWORD(v133) = 0;
        LODWORD(v83) = *((_DWORD *)a2 + 4);
        v84 = *a2;
        v85 = a2[1];
      }
    }
    else
    {
      LODWORD(v133) = (*(unsigned __int8 *)v133 >> (~(_BYTE)v83 & 7)) & 1;
      LODWORD(v83) = v83 + 1;
      *((_DWORD *)a2 + 4) = v83;
    }
    v135 = v132 | (4 * (_DWORD)v133);
    v136 = (uint64_t (*)(uint64_t))(v84 + (v83 >> 3));
    if ((unint64_t)v136 >= v85)
    {
      v136 = (uint64_t (*)(uint64_t))a2[4];
      if (v136)
      {
        result = v136(a2[3]);
        LODWORD(v136) = 0;
        LODWORD(v83) = *((_DWORD *)a2 + 4);
        v84 = *a2;
        v85 = a2[1];
      }
    }
    else
    {
      LODWORD(v136) = (*(unsigned __int8 *)v136 >> (~(_BYTE)v83 & 7)) & 1;
      LODWORD(v83) = v83 + 1;
      *((_DWORD *)a2 + 4) = v83;
    }
    v137 = v135 | (2 * (_DWORD)v136);
    v138 = (uint64_t (*)(uint64_t))(v84 + (v83 >> 3));
    if ((unint64_t)v138 >= v85)
    {
      v138 = (uint64_t (*)(uint64_t))a2[4];
      if (v138)
      {
        result = v138(a2[3]);
        LODWORD(v138) = 0;
        LODWORD(v83) = *((_DWORD *)a2 + 4);
        v84 = *a2;
        v85 = a2[1];
      }
    }
    else
    {
      LODWORD(v138) = (*(unsigned __int8 *)v138 >> (~(_BYTE)v83 & 7)) & 1;
      LODWORD(v83) = v83 + 1;
      *((_DWORD *)a2 + 4) = v83;
    }
    *(_DWORD *)(v151 + 24) = (v138 | v137) + 2;
    v139 = (uint64_t (*)(uint64_t))(v84 + (v83 >> 3));
    if ((unint64_t)v139 >= v85)
    {
      v139 = (uint64_t (*)(uint64_t))a2[4];
      if (v139)
      {
        result = v139(a2[3]);
        LODWORD(v139) = 0;
        LODWORD(v83) = *((_DWORD *)a2 + 4);
        v84 = *a2;
        v85 = a2[1];
      }
    }
    else
    {
      LODWORD(v139) = (*(unsigned __int8 *)v139 >> (~(_BYTE)v83 & 7)) & 1;
      LODWORD(v83) = v83 + 1;
      *((_DWORD *)a2 + 4) = v83;
    }
    v140 = 4 * (_DWORD)v139;
    v141 = (uint64_t (*)(uint64_t))(v84 + (v83 >> 3));
    if ((unint64_t)v141 >= v85)
    {
      v141 = (uint64_t (*)(uint64_t))a2[4];
      if (v141)
      {
        result = v141(a2[3]);
        LODWORD(v141) = 0;
        LODWORD(v83) = *((_DWORD *)a2 + 4);
        v84 = *a2;
        v85 = a2[1];
      }
    }
    else
    {
      LODWORD(v141) = (*(unsigned __int8 *)v141 >> (~(_BYTE)v83 & 7)) & 1;
      LODWORD(v83) = v83 + 1;
      *((_DWORD *)a2 + 4) = v83;
    }
    v142 = v140 | (2 * (_DWORD)v141);
    v143 = (unsigned __int8 *)(v84 + (v83 >> 3));
    if ((unint64_t)v143 >= v85)
    {
      v145 = (uint64_t (*)(uint64_t))a2[4];
      if (v145)
        result = v145(a2[3]);
      v144 = 0;
    }
    else
    {
      v144 = (*v143 >> (~(_BYTE)v83 & 7)) & 1;
      *((_DWORD *)a2 + 4) = v83 + 1;
    }
    v146 = *(_DWORD *)(v151 + 24) + (v144 | v142);
    *(_DWORD *)(v151 + 20) = v146 + 1;
    if (v146 >= 16)
      result = aom_internal_error(*(_QWORD *)(v148 + 48), 7, "Invalid frame_id_length");
  }
LABEL_52:
  v55 = *((unsigned int *)a2 + 4);
  v56 = *a2;
  v57 = a2[1];
  v58 = (unsigned __int8 *)(*a2 + (v55 >> 3));
  if ((unint64_t)v58 >= v57)
  {
    v62 = (uint64_t (*)(uint64_t))a2[4];
    if (v62)
    {
      result = v62(a2[3]);
      LODWORD(v55) = *((_DWORD *)a2 + 4);
      v56 = *a2;
      v57 = a2[1];
    }
  }
  else
  {
    v59 = ~(_BYTE)v55 & 7;
    v60 = *v58;
    LODWORD(v55) = v55 + 1;
    *((_DWORD *)a2 + 4) = v55;
    if (((v60 >> v59) & 1) != 0)
    {
      v61 = 0xFu;
      goto LABEL_58;
    }
  }
  v61 = 0xCu;
LABEL_58:
  *(_BYTE *)(v151 + 28) = v61;
  *(_DWORD *)(v151 + 32) = mi_size_wide_7[v61];
  *(_DWORD *)(v151 + 36) = mi_size_wide_log2_1[v61];
  v63 = (uint64_t (*)(uint64_t))(v56 + (v55 >> 3));
  if ((unint64_t)v63 >= v57)
  {
    v63 = (uint64_t (*)(uint64_t))a2[4];
    if (v63)
    {
      result = v63(a2[3]);
      LOBYTE(v63) = 0;
      LODWORD(v55) = *((_DWORD *)a2 + 4);
      v56 = *a2;
      v57 = a2[1];
    }
  }
  else
  {
    LODWORD(v63) = (*(unsigned __int8 *)v63 >> (~(_BYTE)v55 & 7)) & 1;
    LODWORD(v55) = v55 + 1;
    *((_DWORD *)a2 + 4) = v55;
  }
  *(_BYTE *)(v151 + 60) = (_BYTE)v63;
  v64 = (unsigned __int8 *)(v56 + (v55 >> 3));
  if ((unint64_t)v64 < v57)
  {
    v65 = (*v64 >> (~(_BYTE)v55 & 7)) & 1;
    *((_DWORD *)a2 + 4) = v55 + 1;
    *(_BYTE *)(v151 + 61) = v65;
    if (*(_BYTE *)(v151 + 58))
      goto LABEL_64;
LABEL_73:
    v76 = *((unsigned int *)a2 + 4);
    v77 = *a2;
    v78 = a2[1];
    v79 = (uint64_t (*)(uint64_t))(*a2 + (v76 >> 3));
    if ((unint64_t)v79 >= v78)
    {
      v79 = (uint64_t (*)(uint64_t))a2[4];
      if (v79)
      {
        result = v79(a2[3]);
        LOBYTE(v79) = 0;
        LODWORD(v76) = *((_DWORD *)a2 + 4);
        v77 = *a2;
        v78 = a2[1];
      }
    }
    else
    {
      LODWORD(v79) = (*(unsigned __int8 *)v79 >> (~(_BYTE)v76 & 7)) & 1;
      LODWORD(v76) = v76 + 1;
      *((_DWORD *)a2 + 4) = v76;
    }
    *(_BYTE *)(v151 + 62) = (_BYTE)v79;
    v87 = (uint64_t (*)(uint64_t))(v77 + (v76 >> 3));
    if ((unint64_t)v87 >= v78)
    {
      v87 = (uint64_t (*)(uint64_t))a2[4];
      if (v87)
      {
        result = v87(a2[3]);
        LOBYTE(v87) = 0;
        LODWORD(v76) = *((_DWORD *)a2 + 4);
        v77 = *a2;
        v78 = a2[1];
      }
    }
    else
    {
      LODWORD(v87) = (*(unsigned __int8 *)v87 >> (~(_BYTE)v76 & 7)) & 1;
      LODWORD(v76) = v76 + 1;
      *((_DWORD *)a2 + 4) = v76;
    }
    *(_BYTE *)(v151 + 63) = (_BYTE)v87;
    v89 = (uint64_t (*)(uint64_t))(v77 + (v76 >> 3));
    if ((unint64_t)v89 >= v78)
    {
      v89 = (uint64_t (*)(uint64_t))a2[4];
      if (v89)
      {
        result = v89(a2[3]);
        LOBYTE(v89) = 0;
        LODWORD(v76) = *((_DWORD *)a2 + 4);
        v77 = *a2;
        v78 = a2[1];
      }
    }
    else
    {
      LODWORD(v89) = (*(unsigned __int8 *)v89 >> (~(_BYTE)v76 & 7)) & 1;
      LODWORD(v76) = v76 + 1;
      *((_DWORD *)a2 + 4) = v76;
    }
    *(_BYTE *)(v151 + 65) = (_BYTE)v89;
    v90 = (uint64_t (*)(uint64_t))(v77 + (v76 >> 3));
    if ((unint64_t)v90 >= v78)
    {
      v90 = (uint64_t (*)(uint64_t))a2[4];
      if (v90)
      {
        result = v90(a2[3]);
        LOBYTE(v90) = 0;
        LODWORD(v76) = *((_DWORD *)a2 + 4);
        v77 = *a2;
        v78 = a2[1];
      }
    }
    else
    {
      LODWORD(v90) = (*(unsigned __int8 *)v90 >> (~(_BYTE)v76 & 7)) & 1;
      LODWORD(v76) = v76 + 1;
      *((_DWORD *)a2 + 4) = v76;
    }
    *(_BYTE *)(v151 + 64) = (_BYTE)v90;
    v91 = (unsigned __int8 *)(v77 + (v76 >> 3));
    if ((unint64_t)v91 >= v78)
    {
      v96 = (uint64_t (*)(uint64_t))a2[4];
      if (v96)
        result = v96(a2[3]);
      *(_DWORD *)(v151 + 40) = 0;
    }
    else
    {
      v92 = *v91 >> (~(_BYTE)v76 & 7);
      v93 = v76 + 1;
      *((_DWORD *)a2 + 4) = v76 + 1;
      *(_DWORD *)(v151 + 40) = v92 & 1;
      if ((v92 & 1) != 0)
      {
        v94 = (unsigned __int8 *)(v77 + (v93 >> 3));
        if ((unint64_t)v94 >= v78)
        {
          v134 = (uint64_t (*)(uint64_t))a2[4];
          if (v134)
          {
            result = v134(a2[3]);
            LODWORD(v97) = *(_DWORD *)(v151 + 40);
            *(_DWORD *)(v151 + 48) = 0;
            if (!(_DWORD)v97)
              goto LABEL_103;
          }
          else
          {
            *(_DWORD *)(v151 + 48) = 0;
          }
        }
        else
        {
          v95 = (*v94 >> (~(_BYTE)v93 & 7)) & 1;
          *((_DWORD *)a2 + 4) = v76 + 2;
          *(_DWORD *)(v151 + 48) = v95;
        }
        v147 = *((unsigned int *)a2 + 4);
        v97 = (uint64_t (*)(uint64_t))(*a2 + (v147 >> 3));
        if ((unint64_t)v97 >= a2[1])
        {
          v97 = (uint64_t (*)(uint64_t))a2[4];
          if (v97)
          {
            result = v97(a2[3]);
            LODWORD(v97) = 0;
          }
        }
        else
        {
          LODWORD(v97) = (*(unsigned __int8 *)v97 >> (~(_BYTE)v147 & 7)) & 1;
          *((_DWORD *)a2 + 4) = v147 + 1;
        }
LABEL_103:
        *(_DWORD *)(v151 + 52) = (_DWORD)v97;
        v98 = *((unsigned int *)a2 + 4);
        v99 = *a2;
        v100 = a2[1];
        v101 = (unsigned __int8 *)(*a2 + (v98 >> 3));
        if ((unint64_t)v101 >= v100)
        {
          v104 = (uint64_t (*)(uint64_t))a2[4];
          if (v104)
          {
            result = v104(a2[3]);
            LODWORD(v98) = *((_DWORD *)a2 + 4);
            v99 = *a2;
            v100 = a2[1];
          }
        }
        else
        {
          v102 = ~(_BYTE)v98 & 7;
          v103 = *v101;
          LODWORD(v98) = v98 + 1;
          *((_DWORD *)a2 + 4) = v98;
          if (((v103 >> v102) & 1) != 0)
          {
            *(_BYTE *)(v151 + 56) = 2;
            goto LABEL_110;
          }
        }
        v105 = (unsigned __int8 *)(v99 + (v98 >> 3));
        if ((unint64_t)v105 >= v100)
        {
          v113 = (uint64_t (*)(uint64_t))a2[4];
          if (v113)
            result = v113(a2[3]);
          *(_BYTE *)(v151 + 56) = 0;
          LOBYTE(v107) = 2;
          goto LABEL_122;
        }
        v106 = *v105 >> (~(_BYTE)v98 & 7);
        *((_DWORD *)a2 + 4) = v98 + 1;
        *(_BYTE *)(v151 + 56) = v106 & 1;
        if ((v106 & 1) == 0)
        {
LABEL_112:
          LOBYTE(v107) = 2;
          goto LABEL_122;
        }
LABEL_110:
        v107 = *((unsigned int *)a2 + 4);
        v108 = *a2;
        v109 = a2[1];
        v110 = (unsigned __int8 *)(*a2 + (v107 >> 3));
        if ((unint64_t)v110 >= v109)
        {
          v114 = (uint64_t (*)(uint64_t))a2[4];
          if (v114)
          {
            result = v114(a2[3]);
            LODWORD(v107) = *((_DWORD *)a2 + 4);
            v108 = *a2;
            v109 = a2[1];
          }
        }
        else
        {
          v111 = ~(_BYTE)v107 & 7;
          v112 = *v110;
          LODWORD(v107) = v107 + 1;
          *((_DWORD *)a2 + 4) = v107;
          if (((v112 >> v111) & 1) != 0)
            goto LABEL_112;
        }
        v115 = (unsigned __int8 *)(v108 + (v107 >> 3));
        if ((unint64_t)v115 >= v109)
        {
          v107 = a2[4];
          if (v107)
          {
            result = ((uint64_t (*)(uint64_t))v107)(a2[3]);
            LOBYTE(v107) = 0;
          }
        }
        else
        {
          v116 = *v115 >> (~(_BYTE)v107 & 7);
          *((_DWORD *)a2 + 4) = v107 + 1;
          LOBYTE(v107) = v116 & 1;
        }
LABEL_122:
        *(_BYTE *)(v151 + 59) = v107;
        if (!*(_DWORD *)(v151 + 40))
        {
          *(_DWORD *)(v151 + 44) = -1;
          v66 = *((unsigned int *)a2 + 4);
          v67 = *a2;
          v68 = a2[1];
          v69 = (unsigned __int8 *)(*a2 + (v66 >> 3));
          if ((unint64_t)v69 >= v68)
            goto LABEL_138;
          goto LABEL_65;
        }
        v117 = *((unsigned int *)a2 + 4);
        v118 = *a2;
        v119 = a2[1];
        v120 = (unsigned __int8 *)(*a2 + (v117 >> 3));
        if ((unint64_t)v120 >= v119)
        {
          v125 = (uint64_t (*)(uint64_t))a2[4];
          if (v125)
          {
            result = v125(a2[3]);
            v122 = 0;
            LODWORD(v117) = *((_DWORD *)a2 + 4);
            v118 = *a2;
            v119 = a2[1];
            v123 = (uint64_t (*)(uint64_t))(*a2 + (v117 >> 3));
            if ((unint64_t)v123 < v119)
              goto LABEL_125;
          }
          else
          {
            v122 = 0;
            v123 = (uint64_t (*)(uint64_t))(v118 + (v117 >> 3));
            if ((unint64_t)v123 < v119)
              goto LABEL_125;
          }
        }
        else
        {
          v121 = *v120 >> (~(_BYTE)v117 & 7);
          LODWORD(v117) = v117 + 1;
          *((_DWORD *)a2 + 4) = v117;
          v122 = 4 * (v121 & 1);
          v123 = (uint64_t (*)(uint64_t))(v118 + (v117 >> 3));
          if ((unint64_t)v123 < v119)
          {
LABEL_125:
            v124 = *(unsigned __int8 *)v123 >> (~(_BYTE)v117 & 7);
            LODWORD(v117) = v117 + 1;
            *((_DWORD *)a2 + 4) = v117;
            LODWORD(v123) = 2 * (v124 & 1);
            goto LABEL_132;
          }
        }
        v123 = (uint64_t (*)(uint64_t))a2[4];
        if (v123)
        {
          result = v123(a2[3]);
          LODWORD(v123) = 0;
          LODWORD(v117) = *((_DWORD *)a2 + 4);
          v118 = *a2;
          v119 = a2[1];
        }
LABEL_132:
        v126 = v123 | v122;
        v127 = (unsigned __int8 *)(v118 + (v117 >> 3));
        if ((unint64_t)v127 >= v119)
        {
          v129 = (uint64_t (*)(uint64_t))a2[4];
          if (v129)
            result = v129(a2[3]);
          v128 = 0;
        }
        else
        {
          v128 = (*v127 >> (~(_BYTE)v117 & 7)) & 1;
          *((_DWORD *)a2 + 4) = v117 + 1;
        }
        *(_DWORD *)(v151 + 44) = v128 | v126;
        v66 = *((unsigned int *)a2 + 4);
        v67 = *a2;
        v68 = a2[1];
        v69 = (unsigned __int8 *)(*a2 + (v66 >> 3));
        if ((unint64_t)v69 >= v68)
          goto LABEL_138;
LABEL_65:
        v70 = *v69 >> (~(_BYTE)v66 & 7);
        LODWORD(v66) = v66 + 1;
        *((_DWORD *)a2 + 4) = v66;
        *(_BYTE *)(v151 + 66) = v70 & 1;
        v71 = (unsigned __int8 *)(v67 + (v66 >> 3));
        if ((unint64_t)v71 >= v68)
          goto LABEL_66;
        goto LABEL_141;
      }
    }
    LODWORD(v97) = 0;
    *(_DWORD *)(v151 + 48) = 0;
    goto LABEL_103;
  }
  v75 = (uint64_t (*)(uint64_t))a2[4];
  if (v75)
    result = v75(a2[3]);
  *(_BYTE *)(v151 + 61) = 0;
  if (!*(_BYTE *)(v151 + 58))
    goto LABEL_73;
LABEL_64:
  *(_QWORD *)(v151 + 48) = 0;
  *(_DWORD *)(v151 + 62) = 0;
  *(_BYTE *)(v151 + 56) = 2;
  *(_BYTE *)(v151 + 59) = 2;
  *(_DWORD *)(v151 + 40) = 0;
  *(_DWORD *)(v151 + 44) = -1;
  v66 = *((unsigned int *)a2 + 4);
  v67 = *a2;
  v68 = a2[1];
  v69 = (unsigned __int8 *)(*a2 + (v66 >> 3));
  if ((unint64_t)v69 < v68)
    goto LABEL_65;
LABEL_138:
  v130 = (uint64_t (*)(uint64_t))a2[4];
  if (v130)
  {
    result = v130(a2[3]);
    LOBYTE(v130) = 0;
    LODWORD(v66) = *((_DWORD *)a2 + 4);
    v67 = *a2;
    v68 = a2[1];
  }
  *(_BYTE *)(v151 + 66) = (_BYTE)v130;
  v71 = (unsigned __int8 *)(v67 + (v66 >> 3));
  if ((unint64_t)v71 >= v68)
  {
LABEL_66:
    v72 = (uint64_t (*)(uint64_t))a2[4];
    if (v72)
    {
      result = v72(a2[3]);
      LOBYTE(v72) = 0;
      LODWORD(v66) = *((_DWORD *)a2 + 4);
      v67 = *a2;
      v68 = a2[1];
    }
    *(_BYTE *)(v151 + 67) = (_BYTE)v72;
    v73 = (unsigned __int8 *)(v67 + (v66 >> 3));
    if ((unint64_t)v73 < v68)
      goto LABEL_69;
    goto LABEL_142;
  }
LABEL_141:
  v131 = *v71 >> (~(_BYTE)v66 & 7);
  LODWORD(v66) = v66 + 1;
  *((_DWORD *)a2 + 4) = v66;
  *(_BYTE *)(v151 + 67) = v131 & 1;
  v73 = (unsigned __int8 *)(v67 + (v66 >> 3));
  if ((unint64_t)v73 < v68)
  {
LABEL_69:
    v74 = *v73 >> (~(_BYTE)v66 & 7);
    *((_DWORD *)a2 + 4) = v66 + 1;
    LOBYTE(v66) = v74 & 1;
    goto LABEL_144;
  }
LABEL_142:
  v66 = a2[4];
  if (v66)
  {
    result = ((uint64_t (*)(uint64_t))v66)(a2[3]);
    LOBYTE(v66) = 0;
  }
LABEL_144:
  *(_BYTE *)(v151 + 68) = v66;
  return result;
}

uint64_t error_handler_0(uint64_t a1)
{
  return aom_internal_error(*(_QWORD *)(a1 + 48), 7, "Truncated packet");
}

uint64_t av1_decode_frame_headers_and_setup(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  void (*v23)(_QWORD);
  unsigned int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  int v27;
  void (*v28)(_QWORD);
  unsigned int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  void (*v33)(_QWORD);
  unsigned int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  int v37;
  void (*v38)(_QWORD);
  unsigned int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  int v42;
  void (*v43)(_QWORD);
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  int v47;
  void (*v48)(_QWORD);
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  void (*v52)(_QWORD);
  unint64_t v53;
  unsigned __int8 *v54;
  int v55;
  void (*v56)(_QWORD);
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;

  v6 = a1 + 363892;
  v7 = (_DWORD *)(a1 + 40488);
  v8 = a1 + 15200;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 39880) + 77);
  *(__n128 *)(a1 + 39640) = algn_208F569CC;
  *(_OWORD *)(a1 + 39624) = default_warp_params_0;
  *(_DWORD *)(a1 + 39656) = 0;
  v10 = *(_QWORD *)(a1 + 15432);
  *(__n128 *)(v10 + 328) = algn_208F569CC;
  *(_OWORD *)(v10 + 312) = default_warp_params_0;
  *(_DWORD *)(v10 + 344) = 0;
  *(_DWORD *)(a1 + 39692) = 0;
  *(_OWORD *)(a1 + 39660) = default_warp_params_0;
  *(__n128 *)(a1 + 39676) = algn_208F569CC;
  v11 = *(_QWORD *)(a1 + 15432);
  *(_DWORD *)(v11 + 380) = 0;
  *(_OWORD *)(v11 + 348) = default_warp_params_0;
  *(__n128 *)(v11 + 364) = algn_208F569CC;
  *(_DWORD *)(a1 + 39728) = 0;
  *(__n128 *)(a1 + 39712) = algn_208F569CC;
  *(_OWORD *)(a1 + 39696) = default_warp_params_0;
  v12 = *(_QWORD *)(a1 + 15432);
  *(_DWORD *)(v12 + 416) = 0;
  *(_OWORD *)(v12 + 384) = default_warp_params_0;
  *(__n128 *)(v12 + 400) = algn_208F569CC;
  *(_DWORD *)(a1 + 39764) = 0;
  *(_OWORD *)(a1 + 39732) = default_warp_params_0;
  *(__n128 *)(a1 + 39748) = algn_208F569CC;
  v13 = *(_QWORD *)(a1 + 15432);
  *(_DWORD *)(v13 + 452) = 0;
  *(_OWORD *)(v13 + 420) = default_warp_params_0;
  *(__n128 *)(v13 + 436) = algn_208F569CC;
  *(_DWORD *)(a1 + 39800) = 0;
  *(__n128 *)(a1 + 39784) = algn_208F569CC;
  *(_OWORD *)(a1 + 39768) = default_warp_params_0;
  v14 = *(_QWORD *)(a1 + 15432);
  *(_DWORD *)(v14 + 488) = 0;
  *(_OWORD *)(v14 + 456) = default_warp_params_0;
  *(__n128 *)(v14 + 472) = algn_208F569CC;
  *(_DWORD *)(a1 + 39836) = 0;
  *(__n128 *)(a1 + 39820) = algn_208F569CC;
  *(_OWORD *)(a1 + 39804) = default_warp_params_0;
  v15 = *(_QWORD *)(a1 + 15432);
  *(_DWORD *)(v15 + 524) = 0;
  *(_OWORD *)(v15 + 492) = default_warp_params_0;
  *(__n128 *)(v15 + 508) = algn_208F569CC;
  *(_DWORD *)(a1 + 39872) = 0;
  *(__n128 *)(a1 + 39856) = algn_208F569CC;
  *(_OWORD *)(a1 + 39840) = default_warp_params_0;
  v16 = *(_QWORD *)(a1 + 15432);
  *(_DWORD *)(v16 + 560) = 0;
  *(_OWORD *)(v16 + 528) = default_warp_params_0;
  *(__n128 *)(v16 + 544) = algn_208F569CC;
  *(_QWORD *)(a1 + 10744) = a1 + 39588;
  read_uncompressed_header(a1, a2, algn_208F569CC);
  if (!a3)
    goto LABEL_52;
  v17 = *(unsigned int *)(a2 + 16);
  v18 = *(_DWORD *)(a2 + 16) & 7;
  v19 = v18 ^ 7;
  v20 = (unsigned __int8 *)(*(_QWORD *)a2 + (v17 >> 3));
  if ((unint64_t)v20 >= *(_QWORD *)(a2 + 8))
  {
    v23 = *(void (**)(_QWORD))(a2 + 32);
    if (v23)
      v23(*(_QWORD *)(a2 + 24));
    v22 = 0;
    if (v18 == 7)
      goto LABEL_50;
  }
  else
  {
    v21 = (*v20 >> (~(_BYTE)v17 & 7)) & 1;
    *(_DWORD *)(a2 + 16) = v17 + 1;
    v22 = v21 << v19;
    if (v18 == 7)
      goto LABEL_50;
  }
  v24 = 6 - v18;
  v25 = *(unsigned int *)(a2 + 16);
  v26 = (unsigned __int8 *)(*(_QWORD *)a2 + (v25 >> 3));
  if ((unint64_t)v26 >= *(_QWORD *)(a2 + 8))
  {
    v28 = *(void (**)(_QWORD))(a2 + 32);
    if (v28)
      v28(*(_QWORD *)(a2 + 24));
    if (v19 < 2)
      goto LABEL_50;
  }
  else
  {
    v27 = (*v26 >> (~(_BYTE)v25 & 7)) & 1;
    *(_DWORD *)(a2 + 16) = v25 + 1;
    v22 |= v27 << v24;
    if (v19 < 2)
      goto LABEL_50;
  }
  v29 = 5 - v18;
  v30 = *(unsigned int *)(a2 + 16);
  v31 = (unsigned __int8 *)(*(_QWORD *)a2 + (v30 >> 3));
  if ((unint64_t)v31 >= *(_QWORD *)(a2 + 8))
  {
    v33 = *(void (**)(_QWORD))(a2 + 32);
    if (v33)
      v33(*(_QWORD *)(a2 + 24));
    if (v24 < 2)
      goto LABEL_50;
    goto LABEL_20;
  }
  v32 = (*v31 >> (~(_BYTE)v30 & 7)) & 1;
  *(_DWORD *)(a2 + 16) = v30 + 1;
  v22 |= v32 << v29;
  if (v24 >= 2)
  {
LABEL_20:
    v34 = 4 - v18;
    v35 = *(unsigned int *)(a2 + 16);
    v36 = (unsigned __int8 *)(*(_QWORD *)a2 + (v35 >> 3));
    if ((unint64_t)v36 >= *(_QWORD *)(a2 + 8))
    {
      v38 = *(void (**)(_QWORD))(a2 + 32);
      if (v38)
        v38(*(_QWORD *)(a2 + 24));
      v37 = 0;
    }
    else
    {
      v37 = (*v36 >> (~(_BYTE)v35 & 7)) & 1;
      *(_DWORD *)(a2 + 16) = v35 + 1;
    }
    v22 |= v37 << v34;
    if (v29 >= 2)
    {
      v39 = 3 - v18;
      v40 = *(unsigned int *)(a2 + 16);
      v41 = (unsigned __int8 *)(*(_QWORD *)a2 + (v40 >> 3));
      if ((unint64_t)v41 >= *(_QWORD *)(a2 + 8))
      {
        v43 = *(void (**)(_QWORD))(a2 + 32);
        if (v43)
          v43(*(_QWORD *)(a2 + 24));
        v42 = 0;
      }
      else
      {
        v42 = (*v41 >> (~(_BYTE)v40 & 7)) & 1;
        *(_DWORD *)(a2 + 16) = v40 + 1;
      }
      v22 |= v42 << v39;
      if (v34 >= 2)
      {
        v44 = 2 - v18;
        v45 = *(unsigned int *)(a2 + 16);
        v46 = (unsigned __int8 *)(*(_QWORD *)a2 + (v45 >> 3));
        if ((unint64_t)v46 >= *(_QWORD *)(a2 + 8))
        {
          v48 = *(void (**)(_QWORD))(a2 + 32);
          if (v48)
            v48(*(_QWORD *)(a2 + 24));
          v47 = 0;
        }
        else
        {
          v47 = (*v46 >> (~(_BYTE)v45 & 7)) & 1;
          *(_DWORD *)(a2 + 16) = v45 + 1;
        }
        v22 |= v47 << v44;
        if (v39 >= 2)
        {
          v49 = *(unsigned int *)(a2 + 16);
          v50 = (unsigned __int8 *)(*(_QWORD *)a2 + (v49 >> 3));
          if ((unint64_t)v50 >= *(_QWORD *)(a2 + 8))
          {
            v52 = *(void (**)(_QWORD))(a2 + 32);
            if (v52)
              v52(*(_QWORD *)(a2 + 24));
            v51 = 0;
          }
          else
          {
            v51 = (*v50 >> (~(_BYTE)v49 & 7)) & 1;
            *(_DWORD *)(a2 + 16) = v49 + 1;
          }
          v22 |= v51 << (1 - v18);
          if (v44 >= 2)
          {
            v53 = *(unsigned int *)(a2 + 16);
            v54 = (unsigned __int8 *)(*(_QWORD *)a2 + (v53 >> 3));
            if ((unint64_t)v54 >= *(_QWORD *)(a2 + 8))
            {
              v56 = *(void (**)(_QWORD))(a2 + 32);
              if (v56)
                v56(*(_QWORD *)(a2 + 24));
              v55 = 0;
            }
            else
            {
              v55 = (*v54 >> (~(_BYTE)v53 & 7)) & 1;
              *(_DWORD *)(a2 + 16) = v53 + 1;
            }
            v22 |= v55 << -(char)v18;
          }
        }
      }
    }
  }
LABEL_50:
  if (v22 != 1 << (v18 ^ 7))
    *(_DWORD *)(a1 + 390860) = 7;
LABEL_52:
  if (!*v7 && ((*(_DWORD *)(v6 + 12) & 0x80000000) == 0 || (*(_DWORD *)(v6 + 16) & 0x80000000) == 0))
    *(_QWORD *)(v6 + 12) = -1;
  v57 = *(_DWORD *)(a2 + 16);
  v58 = *(_QWORD *)(a1 + 15432);
  *(_QWORD *)(a1 + 7960) = v58 + 1248;
  if ((*(_BYTE *)v8 & 0xFD) == 0 && *(_BYTE *)(v8 + 495) && *(_BYTE *)(v8 + 496))
  {
    v59 = *(_DWORD *)(v58 + 1264);
    v60 = -1;
    if (v59 > 2 * v59 || (v61 = *(_DWORD *)(v58 + 1272), 2 * v61 < v61) || 16 * v59 < v59)
    {
      v62 = -1;
    }
    else
    {
      v62 = -1;
      if (16 * v61 >= v61)
      {
        if (v59 >= 0)
          v63 = v59;
        else
          v63 = v59 + 1;
        v60 = ((v63 >> 1) + (v59 << 14)) / v59;
        *(_DWORD *)(a1 + 15480) = (v60 + 8) >> 4;
        if (v61 >= 0)
          v64 = v61;
        else
          v64 = v61 + 1;
        v62 = ((v64 >> 1) + (v61 << 14)) / v61;
        *(_DWORD *)(a1 + 15484) = (v62 + 8) >> 4;
      }
    }
    *(_DWORD *)(a1 + 15472) = v60;
    *(_DWORD *)(a1 + 15476) = v62;
  }
  if (!*(_DWORD *)(a1 + 15688))
  {
    (*(void (**)(uint64_t))(a1 + 15800))(a1 + 15720);
    av1_calculate_ref_frame_side(v8);
    if (*(_BYTE *)(v8 + 498))
      av1_setup_motion_field(v8);
    v65 = (_QWORD *)(a1 + 2628);
    v66 = *(_QWORD *)(*(_QWORD *)(v8 + 24680) + 96);
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    if (v9)
    {
      *v65 = 0x100000001;
      *(_QWORD *)(a1 + 5236) = 0x100000001;
    }
    else
    {
      v67 = 1;
      do
      {
        v68 = v67;
        *((_BYTE *)v65 - 4) = 1;
        *v65 = v66;
        --v67;
        v65 += 326;
      }
      while (v68);
    }
    v69 = *(_DWORD *)(a1 + 15708);
    v70 = *(void **)(v8 + 24688);
    if (v69 == 7)
    {
      memcpy(v70, *(const void **)(v8 + 24696), 0x52FCuLL);
      if (*(_DWORD *)(*(_QWORD *)(v8 + 24688) + 21240))
      {
LABEL_89:
        *(_DWORD *)(a1 + 15056) = 0;
        return (v57 + 7) >> 3;
      }
    }
    else
    {
      if ((v69 & 0xF8) != 0 || (v72 = *(int *)(a1 + 4 * v69 + 15440), (_DWORD)v72 == -1))
        v71 = 0;
      else
        v71 = *(_QWORD *)(a1 + 8 * v72 + 15616);
      memcpy(v70, (const void *)(v71 + 1480), 0x52FCuLL);
      if (*(_DWORD *)(*(_QWORD *)(v8 + 24688) + 21240))
        goto LABEL_89;
    }
    aom_internal_error(a1 + 390860, 7, "Uninitialized entropy context.");
    goto LABEL_89;
  }
  if (*(_DWORD *)v6)
  {
    memcpy(*(void **)(v8 + 24688), *(const void **)(v8 + 24696), 0x52FCuLL);
    if (!*(_DWORD *)(*(_QWORD *)(v8 + 24688) + 21240))
      aom_internal_error(a1 + 390860, 7, "Uninitialized entropy context.");
  }
  return (v57 + 7) >> 3;
}

uint64_t read_uncompressed_header(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  void (*v26)(_QWORD);
  void (*v27)(_QWORD);
  void (*v28)(_QWORD);
  int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  _DWORD *v36;
  int v37;
  int v38;
  int v39;
  void (*v40)(_QWORD);
  void (*v41)(_QWORD);
  void (*v42)(_QWORD);
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  void (*v49)(_QWORD);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  int v61;
  void (*v62)(_QWORD);
  unint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  unsigned __int8 *v66;
  int v67;
  _BYTE *v68;
  int v69;
  void (*v70)(_QWORD);
  unint64_t v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  unsigned __int8 *v77;
  int v78;
  void (*v79)(_QWORD);
  void (*v80)(_QWORD);
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  unsigned __int8 *v87;
  void (*v88)(_QWORD);
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  unsigned __int8 *v105;
  void (*v106)(_QWORD);
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  unint64_t v118;
  unsigned __int8 *v119;
  void (*v120)(_QWORD);
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void (*v125)(_QWORD);
  unint64_t v126;
  unsigned __int8 *v127;
  void (*v128)(_QWORD);
  int v129;
  void (*v130)(_QWORD);
  uint64_t v131;
  unsigned __int8 *v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  unint64_t v139;
  unsigned __int8 *v140;
  void (*v141)(_QWORD);
  void (*v142)(_QWORD);
  int v143;
  void (*v144)(_QWORD);
  int v145;
  unsigned __int8 *v146;
  int v147;
  void (*v148)(_QWORD);
  unint64_t v149;
  unsigned __int8 *v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  unint64_t v160;
  unsigned __int8 *v161;
  void (*v162)(_QWORD);
  void (*v163)(_QWORD);
  _BYTE *v164;
  int v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void (*v171)(_QWORD);
  int v172;
  int v173;
  void (*v174)(_QWORD);
  int v175;
  void (*v176)(_QWORD);
  int v177;
  void (*v178)(_QWORD);
  int v179;
  void (*v180)(_QWORD);
  int v181;
  void (*v182)(_QWORD);
  int v183;
  void (*v184)(_QWORD);
  int v185;
  unsigned __int8 *v186;
  int v187;
  void (*v188)(_QWORD);
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void (*v192)(_QWORD);
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void (*v196)(_QWORD);
  int v197;
  void (*v198)(_QWORD);
  int v199;
  void (*v200)(_QWORD);
  int v201;
  void (*v202)(_QWORD);
  int v203;
  void (*v204)(_QWORD);
  int v205;
  void (*v206)(_QWORD);
  int v207;
  void (*v208)(_QWORD);
  int v209;
  unsigned __int8 *v210;
  int v211;
  void (*v212)(_QWORD);
  int v213;
  void (*v214)(_QWORD);
  int v215;
  void (*v216)(_QWORD);
  int v217;
  void (*v218)(_QWORD);
  int v219;
  void (*v220)(_QWORD);
  int v221;
  void (*v222)(_QWORD);
  int v223;
  void (*v224)(_QWORD);
  int v225;
  unsigned __int8 *v226;
  int v227;
  void (*v228)(_QWORD);
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unint64_t v234;
  unsigned __int8 *v235;
  void (*v236)(_QWORD);
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  _DWORD *v240;
  pthread_mutex_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _DWORD *v245;
  _DWORD *v246;
  _DWORD *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  unsigned int v251;
  uint64_t v252;
  int *v253;
  int *v254;
  _DWORD *v255;
  int v256;
  __n128 *v257;
  uint64_t v258;
  unint64_t v259;
  _WORD *v260;
  uint64_t v261;
  _DWORD *v262;
  _QWORD *v263;
  int *v264;
  int *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  __n128 *v270;
  unint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  __n128 *v276;
  uint64_t v277;
  unint64_t v278;
  _WORD *v279;
  __n128 *v280;
  unint64_t v281;
  uint64_t v282;
  int k;
  __n128 *v284;
  uint64_t v285;
  unint64_t v286;
  _WORD *v287;
  __n128 *v288;
  unint64_t v289;
  uint64_t v290;
  int v291;
  unint64_t v292;
  unsigned __int8 *v293;
  int v294;
  double v295;
  unint64_t v296;
  unsigned __int8 *v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  _DWORD *v303;
  unsigned int v304;
  unsigned int v305;
  unsigned __int8 *v306;
  int v307;
  unsigned int *v308;
  void (*v309)(_QWORD, double);
  void (*v310)(_QWORD, double);
  int v311;
  void (*v312)(_QWORD);
  int v313;
  void (*v314)(_QWORD);
  int v315;
  int v316;
  unsigned int v317;
  int v318;
  unint64_t v319;
  unsigned __int8 *v320;
  void (*v321)(_QWORD);
  uint64_t v322;
  _DWORD *v323;
  uint64_t result;
  int v325;
  unsigned int v326;
  _DWORD *v327;
  int v328;
  void (*v329)(_QWORD);
  int v330;
  void (*v331)(_QWORD);
  int v332;
  uint64_t v333;
  void (*v334)(_QWORD);
  int v335;
  void (*v336)(_QWORD);
  int v337;
  unsigned __int8 *v338;
  int v339;
  void (*v340)(_QWORD);
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned __int8 *v348;
  int v349;
  unsigned __int8 *v350;
  int v351;
  unsigned __int8 *v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  void (*v356)(_QWORD);
  void (*v357)(_QWORD);
  void (*v358)(_QWORD);
  int v359;
  int v360;
  int v361;
  unsigned int v362;
  int v363;
  unint64_t v364;
  unsigned __int8 *v365;
  void (*v366)(_QWORD);
  unint64_t v367;
  unsigned __int8 *v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  _DWORD *v372;
  void (*v373)(_QWORD);
  unint64_t v374;
  unsigned __int8 *v375;
  unsigned int v376;
  uint64_t v377;
  void (*v378)(_QWORD);
  unint64_t v379;
  unsigned __int8 *v380;
  unsigned int v381;
  uint64_t v382;
  void (*v383)(_QWORD);
  unint64_t v384;
  unsigned __int8 *v385;
  unsigned int v386;
  uint64_t v387;
  void (*v388)(_QWORD);
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unsigned __int8 *v397;
  unsigned int v398;
  unsigned int v399;
  unsigned __int8 *v400;
  int v401;
  unsigned int *v402;
  void (*v403)(_QWORD);
  int *v404;
  int v405;
  char literal;
  unsigned int v407;
  int v408;
  int v409;
  void (*v410)(_QWORD);
  int v411;
  void (*v412)(_QWORD);
  int v413;
  void (*v414)(_QWORD);
  unsigned int v415;
  int v416;
  int v417;
  BOOL v418;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  int v426;
  int v427;
  BOOL v428;
  int v429;
  BOOL v430;
  int v431;
  char v433;
  uint64_t v434;
  int v435;
  int v436;
  BOOL v437;
  int v438;
  BOOL v439;
  int v440;
  char v442;
  uint64_t v443;
  int v444;
  int v445;
  BOOL v446;
  int v447;
  BOOL v448;
  int v449;
  char v451;
  uint64_t v452;
  int v453;
  int v454;
  BOOL v455;
  int v456;
  BOOL v457;
  int v458;
  char v460;
  uint64_t v461;
  int v462;
  int v463;
  BOOL v464;
  int v465;
  BOOL v466;
  int v467;
  char v469;
  uint64_t v470;
  int v471;
  int v472;
  BOOL v473;
  int v474;
  BOOL v475;
  int v476;
  char v478;
  BOOL v481;
  _DWORD *v482;
  int v483;
  int v484;
  int v485;
  _DWORD *v486;
  _DWORD *v487;
  _DWORD *v488;
  _DWORD *v489;
  _DWORD *v490;
  _DWORD *v491;
  unint64_t v492;
  unsigned __int8 *v493;
  int v494;
  void (*v495)(_QWORD, __n128);
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unsigned __int8 *v499;
  char v500;
  unsigned int v501;
  unsigned __int8 *v502;
  void (*v503)(_QWORD, __n128);
  void (*v504)(_QWORD, __n128);
  void (*v505)(_QWORD, __n128);
  char v506;
  void (*v507)(_QWORD, __n128);
  int v508;
  int v509;
  int v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  uint64_t v523;
  uint64_t v524;
  int v525;
  int v526;
  int v527;
  int v528;
  BOOL v529;
  int v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  uint64_t v584;
  int v585;
  _DWORD *v586;
  BOOL v587;
  int v588;
  unint64_t v589;
  int v590;
  unsigned int v591;
  int v592;
  int v593;
  int v594;
  char v595;
  unsigned int v596;
  uint64_t v597;
  int v598;
  int v599;
  unsigned int v600;
  int v601;
  int v602;
  unsigned int v603;
  unsigned int v604;
  unsigned int v605;
  unint64_t v606;
  uint64_t v607;
  unint64_t v608;
  unsigned __int8 *v609;
  int v610;
  unsigned int v611;
  uint64_t v612;
  unsigned __int8 *v613;
  char v614;
  unsigned int v615;
  void (*v616)(_QWORD);
  unint64_t v617;
  int v618;
  _DWORD *v619;
  int v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v623;
  unsigned int m;
  int v625;
  unint64_t v626;
  unsigned __int8 *v627;
  void (*v628)(_QWORD);
  signed int v629;
  unint64_t v630;
  unsigned __int8 *v631;
  int v632;
  void (*v633)(_QWORD);
  unsigned int v634;
  BOOL v635;
  int v636;
  int v637;
  uint64_t v638;
  unint64_t v639;
  unsigned int v640;
  unsigned __int8 *v641;
  char v642;
  unsigned int v643;
  unint64_t v644;
  int v645;
  _DWORD *v646;
  int v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  unsigned int n;
  int v652;
  unint64_t v653;
  unsigned __int8 *v654;
  void (*v655)(_QWORD);
  signed int v656;
  unint64_t v657;
  unsigned __int8 *v658;
  int v659;
  void (*v660)(_QWORD);
  int v661;
  unsigned int v662;
  unint64_t v663;
  void (*v664)(_QWORD);
  signed int v665;
  int v666;
  int v667;
  unsigned int v668;
  int v669;
  unsigned int v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  int v674;
  _DWORD *v675;
  unsigned int v676;
  int32x4_t v677;
  int32x4_t v678;
  int32x4_t *v679;
  uint64_t v680;
  int32x4_t v681;
  _DWORD *v682;
  uint64_t v683;
  unsigned int v684;
  int v685;
  unsigned int v686;
  int v687;
  unint64_t v688;
  unsigned __int8 *v689;
  void (*v690)(_QWORD);
  int v691;
  unint64_t v692;
  uint64_t v693;
  unint64_t v694;
  void (*v695)(_QWORD);
  int v696;
  unsigned __int8 *v697;
  int v698;
  void (*v699)(_QWORD);
  uint64_t v700;
  int v701;
  int v702;
  void (**v703)(_QWORD);
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  void (*v707)(_QWORD);
  int v708;
  void (*v709)(_QWORD);
  int v710;
  void (*v711)(_QWORD);
  int v712;
  void (*v713)(_QWORD);
  int v714;
  void (*v715)(_QWORD);
  int v716;
  void (*v717)(_QWORD);
  int v718;
  void (*v719)(_QWORD);
  int v720;
  void (*v721)(_QWORD);
  unsigned __int8 *v722;
  _DWORD *v723;
  unsigned int v724;
  unsigned int v725;
  BOOL *v726;
  unsigned __int8 *v727;
  int v728;
  unsigned int *v729;
  int v730;
  unsigned __int8 *v731;
  void (*v732)(_QWORD);
  int v733;
  void (*v734)(_QWORD);
  void (*v735)(_QWORD);
  unint64_t v736;
  uint64_t v737;
  unint64_t v738;
  void (*v739)(_QWORD);
  unsigned int *v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unsigned __int8 *v744;
  int v745;
  unsigned int v746;
  int v747;
  unsigned int *v748;
  void (**v749)(_QWORD);
  unsigned __int8 *v750;
  int v751;
  int v752;
  void (*v753)(_QWORD);
  int v754;
  void (*v755)(_QWORD);
  int v756;
  void (*v757)(_QWORD);
  void (*v758)(_QWORD);
  int v759;
  void (*v760)(_QWORD);
  int v761;
  void (*v762)(_QWORD);
  int v763;
  unsigned __int8 *v764;
  int v765;
  int v766;
  unint64_t v767;
  uint64_t v768;
  unint64_t v769;
  void (*v770)(_QWORD);
  BOOL v771;
  unsigned __int8 *v772;
  void (*v773)(_QWORD);
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  unsigned __int8 *v777;
  void (*v778)(_QWORD);
  unsigned int *v779;
  unsigned int v780;
  unsigned int v781;
  unsigned __int8 *v782;
  int v783;
  int v784;
  unsigned __int8 *v785;
  void (*v786)(_QWORD);
  int v787;
  void (*v788)(_QWORD);
  void (*v789)(_QWORD);
  int v790;
  void (*v791)(_QWORD);
  int v792;
  void (*v793)(_QWORD);
  int v794;
  unsigned __int8 *v795;
  int v796;
  int v797;
  int v798;
  _BYTE *v799;
  unint64_t v800;
  uint64_t v801;
  unint64_t v802;
  unsigned __int8 *v803;
  unsigned __int8 *v804;
  int v805;
  unsigned int v806;
  uint64_t v807;
  _DWORD *v808;
  void (**v809)(_QWORD);
  uint64_t v810;
  uint64_t v811;
  _DWORD *v812;
  void (*v813)(_QWORD);
  unint64_t v814;
  unsigned __int8 *v815;
  unsigned int v816;
  signed int v817;
  unsigned int v818;
  unsigned int v819;
  int v820;
  int v821;
  unsigned int v822;
  int v823;
  unsigned int v824;
  unint64_t v825;
  unsigned __int8 *v826;
  unsigned int v827;
  __int16 v828;
  int v829;
  unsigned int v830;
  unint64_t v831;
  unsigned __int8 *v832;
  unsigned int v833;
  uint64_t v834;
  void *v835;
  int v836;
  unint64_t v837;
  uint64_t v838;
  unint64_t v839;
  unsigned __int8 *v840;
  int v841;
  unsigned int v842;
  void (**v843)(_QWORD);
  unsigned __int8 *v844;
  unsigned __int8 *v845;
  int v846;
  _DWORD *v847;
  char v848;
  void (*v849)(_QWORD);
  unsigned __int8 *v850;
  int v851;
  unsigned int v852;
  int v853;
  unsigned int *v854;
  unsigned int v855;
  unsigned int v856;
  unsigned __int8 *v857;
  int v858;
  int v859;
  unsigned __int8 *v860;
  void (*v861)(_QWORD);
  int v862;
  void (*v863)(_QWORD);
  unint64_t v864;
  uint64_t v865;
  unint64_t v866;
  unsigned __int8 *v867;
  unsigned int *v868;
  unsigned int v869;
  unsigned int v870;
  unsigned __int8 *v871;
  int v872;
  int v873;
  void (*v874)(_QWORD);
  void (*v875)(_QWORD);
  unint64_t v876;
  uint64_t v877;
  unint64_t v878;
  unsigned __int8 *v879;
  void (*v880)(_QWORD);
  unint64_t v881;
  unsigned __int8 *v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  int v887;
  void (*v888)(_QWORD);
  int v889;
  void (*v890)(_QWORD);
  int v891;
  void (*v892)(_QWORD);
  int v893;
  void (*v894)(_QWORD);
  int v895;
  void (*v896)(_QWORD);
  unsigned int *v897;
  unsigned int v898;
  unsigned int v899;
  unsigned __int8 *v900;
  int v901;
  unsigned int *v902;
  int v903;
  void (*v904)(_QWORD);
  unsigned __int8 *v905;
  unint64_t v906;
  void (*v907)(_QWORD);
  unint64_t v908;
  uint64_t v909;
  unint64_t v910;
  unsigned __int8 *v911;
  int v912;
  _DWORD *v913;
  char v914;
  void (*v915)(_QWORD);
  void (*v916)(_QWORD);
  unsigned __int8 *v917;
  int v918;
  int v919;
  size_t v920;
  int v921;
  int v922;
  int v923;
  int v924;
  _BOOL4 v925;
  int v926;
  int v927;
  _BOOL4 v928;
  int v929;
  int v930;
  _BOOL4 v931;
  int v932;
  int v933;
  _BOOL4 v934;
  int v935;
  int v936;
  _BOOL4 v937;
  int v938;
  int v939;
  _BOOL4 v940;
  int v941;
  int v942;
  _BOOL4 v943;
  int v944;
  _BOOL4 v945;
  int v946;
  BOOL v947;
  int v948;
  int v949;
  void (*v950)(_QWORD);
  int v951;
  void (*v952)(_QWORD);
  int v953;
  void (*v954)(_QWORD);
  int v955;
  void (*v956)(_QWORD);
  int v957;
  int v958;
  int v959;
  void (*v960)(_QWORD);
  int v961;
  void (*v962)(_QWORD);
  int v963;
  void (*v964)(_QWORD);
  int v965;
  unsigned __int8 *v966;
  int v967;
  int v968;
  void (*v969)(_QWORD);
  int v970;
  void (*v971)(_QWORD);
  int v972;
  void (*v973)(_QWORD);
  int v974;
  void (*v975)(_QWORD);
  int v976;
  unsigned __int8 *v977;
  int v978;
  int v979;
  int v980;
  void (*v981)(_QWORD);
  int v982;
  void (*v983)(_QWORD);
  int v984;
  void (*v985)(_QWORD);
  int v986;
  void (*v987)(_QWORD);
  int v988;
  unsigned __int8 *v989;
  int v990;
  char v991;
  unint64_t v992;
  int *v993;
  uint64_t v994;
  int v995;
  int v996;
  int v997;
  int v998;
  int v999;
  int v1000;
  int v1001;
  int *v1002;
  int v1003;
  int v1004;
  int v1005;
  __int16 *v1006;
  int v1007;
  _WORD *v1008;
  int v1009;
  __int16 *v1010;
  int v1011;
  _WORD *v1012;
  int v1013;
  __int16 *v1014;
  int v1015;
  int v1016;
  int v1017;
  uint64_t v1018;
  int v1019;
  uint64_t v1020;
  int v1021;
  uint64_t v1022;
  uint64_t v1023;
  _DWORD *v1024;
  void (**v1025)(_QWORD);
  _BYTE *v1026;
  _BYTE *v1027;
  int v1028;
  uint64_t v1029;
  unint64_t v1030;
  uint64_t v1031;
  unint64_t v1032;
  void (*v1033)(_QWORD);
  int v1034;
  void (*v1035)(_QWORD);
  int v1036;
  void (*v1037)(_QWORD);
  int v1038;
  void (*v1039)(_QWORD);
  int v1040;
  void (*v1041)(_QWORD);
  int v1042;
  unsigned __int8 *v1043;
  int v1044;
  unint64_t v1045;
  void (*v1046)(_QWORD);
  int v1047;
  void (*v1048)(_QWORD);
  int v1049;
  void (*v1050)(_QWORD);
  int v1051;
  void (*v1052)(_QWORD);
  int v1053;
  void (*v1054)(_QWORD);
  int v1055;
  void (*v1056)(_QWORD);
  unsigned int v1057;
  unint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  void (*v1061)(_QWORD);
  int v1062;
  void (*v1063)(_QWORD);
  int v1064;
  void (*v1065)(_QWORD);
  int v1066;
  void (*v1067)(_QWORD);
  int v1068;
  void (*v1069)(_QWORD);
  int v1070;
  void (*v1071)(_QWORD);
  void (*v1072)(_QWORD);
  int v1073;
  void (*v1074)(_QWORD);
  int v1075;
  void (*v1076)(_QWORD);
  int v1077;
  void (*v1078)(_QWORD);
  int v1079;
  void (*v1080)(_QWORD);
  int v1081;
  unsigned __int8 *v1082;
  int v1083;
  unint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  void (*v1087)(_QWORD);
  int v1088;
  void (*v1089)(_QWORD);
  int v1090;
  void (*v1091)(_QWORD);
  unsigned int v1092;
  uint64_t v1093;
  unsigned __int8 *v1094;
  int v1095;
  unsigned int v1096;
  unsigned __int8 *v1097;
  int v1098;
  unsigned int v1099;
  unsigned __int8 *v1100;
  char v1101;
  unsigned int v1102;
  unsigned int v1103;
  unsigned __int8 *v1104;
  int v1105;
  unsigned int *v1106;
  unint64_t v1107;
  unsigned __int8 *v1108;
  unsigned int v1109;
  uint64_t v1110;
  int v1111;
  unint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  unsigned __int8 *v1115;
  int v1116;
  unsigned __int8 *v1117;
  int v1118;
  unint64_t v1119;
  unsigned __int8 *v1120;
  unsigned int v1121;
  unint64_t v1122;
  unsigned __int8 *v1123;
  _DWORD *v1124;
  void (**v1125)(_QWORD);
  int v1126;
  unint64_t v1127;
  unsigned __int8 *v1128;
  char v1129;
  unint64_t v1130;
  unsigned __int8 *v1131;
  int v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  int *v1136;
  _OWORD *v1137;
  unint64_t v1138;
  uint64_t v1139;
  unint64_t v1140;
  unsigned __int8 *v1141;
  int v1142;
  unsigned int v1143;
  unsigned int v1144;
  unsigned __int8 *v1145;
  char v1146;
  unsigned int v1147;
  char v1148;
  char v1149;
  void (**v1150)(_QWORD);
  _DWORD *v1151;
  unsigned __int8 *v1152;
  unsigned int v1153;
  char v1154;
  int v1155;
  uint64_t v1156;
  int v1157;
  int v1158;
  unsigned int v1159;
  uint64_t v1160;
  int *v1161;
  unint64_t v1162;
  unsigned __int8 *v1163;
  unsigned int *v1164;
  int v1165;
  int v1166;
  unsigned int v1167;
  _DWORD *v1168;
  uint64_t *v1169;
  int v1170;
  unint64_t v1171;
  unsigned __int8 *v1172;
  unint64_t v1173;
  unsigned __int8 *v1174;
  int v1175;
  _DWORD *v1176;
  uint64_t (**v1177)(_QWORD);
  unsigned int v1178;
  int v1179;
  unint64_t v1180;
  uint64_t v1181;
  unint64_t v1182;
  char v1183;
  unint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  void (*v1187)(_QWORD);
  unint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  void (*v1191)(_QWORD);
  unint64_t v1192;
  int v1193;
  BOOL v1194;
  int v1195;
  BOOL v1196;
  int v1197;
  _BOOL4 v1198;
  unint64_t v1199;
  uint64_t v1200;
  unint64_t v1201;
  unsigned __int8 *v1202;
  int v1203;
  int v1204;
  void (*v1205)(_QWORD);
  void (*v1206)(_QWORD);
  int v1207;
  unsigned __int8 *v1208;
  int v1209;
  uint64_t v1210;
  int v1211;
  int v1212;
  uint64_t v1213;
  unint64_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  unsigned __int8 *v1217;
  int v1218;
  unsigned __int8 *v1219;
  int v1220;
  unsigned __int8 *v1221;
  int v1222;
  unsigned __int8 *v1223;
  int v1224;
  unsigned __int8 *v1225;
  int v1226;
  unsigned __int8 *v1227;
  int v1228;
  void (*v1229)(_QWORD);
  int v1230;
  void (*v1231)(_QWORD);
  int v1232;
  unsigned __int8 *v1233;
  int v1234;
  int v1235;
  unint64_t v1236;
  uint64_t v1237;
  unint64_t v1238;
  void (*v1239)(_QWORD);
  unint64_t v1240;
  uint64_t v1241;
  unint64_t v1242;
  void (*v1243)(_QWORD);
  uint64_t v1244;
  void (*v1245)(_QWORD);
  unint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  unsigned __int8 *v1249;
  int v1250;
  unsigned __int8 *v1251;
  int v1252;
  unsigned __int8 *v1253;
  int v1254;
  unsigned __int8 *v1255;
  int v1256;
  unsigned __int8 *v1257;
  int v1258;
  unsigned __int8 *v1259;
  int v1260;
  unint64_t v1261;
  unsigned __int8 *v1262;
  int v1263;
  unsigned __int8 *v1264;
  int v1265;
  unsigned __int8 *v1266;
  int v1267;
  unsigned __int8 *v1268;
  int v1269;
  unsigned __int8 *v1270;
  int v1271;
  unint64_t v1272;
  int v1273;
  void (*v1274)(_QWORD);
  int v1275;
  void (*v1276)(_QWORD);
  int v1277;
  void (*v1278)(_QWORD);
  int v1279;
  void (*v1280)(_QWORD);
  int v1281;
  void (*v1282)(_QWORD);
  int v1283;
  void (*v1284)(_QWORD);
  int v1285;
  unsigned __int8 *v1286;
  int v1287;
  int v1288;
  void (*v1289)(_QWORD);
  int v1290;
  unsigned __int8 *v1291;
  int v1292;
  unsigned int v1293;
  int v1294;
  int v1295;
  int v1296;
  int v1297;
  int v1298;
  int v1299;
  uint64_t v1300;
  __int16 v1301;
  unint64_t v1302;
  unint64_t v1303;
  void (*v1304)(_QWORD);
  int v1305;
  void (*v1306)(_QWORD);
  int v1307;
  void (*v1308)(_QWORD);
  int v1309;
  void (*v1310)(_QWORD);
  int v1311;
  void (*v1312)(_QWORD);
  int v1313;
  void (*v1314)(_QWORD);
  int v1315;
  void (*v1316)(_QWORD);
  int v1317;
  void (*v1318)(_QWORD);
  int *v1319;
  uint64_t ii;
  int v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  unsigned __int8 *v1325;
  unsigned __int8 *v1326;
  unsigned __int8 *v1327;
  int v1328;
  unsigned __int8 *v1329;
  int v1330;
  unsigned __int8 *v1331;
  int v1332;
  unsigned __int8 *v1333;
  int v1334;
  unsigned __int8 *v1335;
  int v1336;
  unsigned __int8 *v1337;
  int v1338;
  int v1339;
  unint64_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  unsigned __int8 *v1343;
  unsigned __int8 *v1344;
  unsigned __int8 *v1345;
  int v1346;
  unsigned __int8 *v1347;
  int v1348;
  unsigned __int8 *v1349;
  int v1350;
  unsigned __int8 *v1351;
  int v1352;
  unsigned __int8 *v1353;
  int v1354;
  unsigned __int8 *v1355;
  int *__attribute__((__org_typedef(jmp_buf))) v1356;
  unint64_t v1357;
  unsigned __int8 *v1358;
  void (*v1359)(_QWORD);
  int v1360;
  unint64_t v1361;
  unsigned __int8 *v1362;
  int v1363;
  int v1364;
  BOOL v1365;
  int v1366;
  int v1367;
  unint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  unsigned __int8 *v1371;
  int v1372;
  unsigned __int8 *v1373;
  int v1374;
  int v1375;
  BOOL v1376;
  int v1377;
  int v1378;
  int v1379;
  int v1380;
  int v1381;
  unsigned __int8 bit;
  unsigned __int8 v1383;
  uint64_t v1384;
  int v1385;
  int v1386;
  int v1387;
  char v1388;
  int v1389;
  unsigned __int8 v1390;
  unsigned int v1391;
  unint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  void (*v1395)(_QWORD);
  unint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  void (*v1399)(_QWORD);
  int v1400;
  void (*v1401)(_QWORD);
  void (*v1402)(_QWORD);
  int v1403;
  unsigned __int8 *v1404;
  int v1405;
  int v1406;
  int v1407;
  int v1408;
  uint64_t v1409;
  _DWORD *v1410;
  int v1411;
  unint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  unsigned __int8 *v1415;
  unsigned __int8 *v1416;
  unsigned __int8 *v1417;
  int v1418;
  unsigned __int8 *v1419;
  int v1420;
  unsigned __int8 *v1421;
  int v1422;
  unsigned __int8 *v1423;
  int v1424;
  unsigned __int8 *v1425;
  int v1426;
  unsigned __int8 *v1427;
  _DWORD *v1428;
  _DWORD *v1429;
  uint64_t v1430;
  int v1431;
  unint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  unsigned __int8 *v1435;
  unsigned __int8 *v1436;
  unsigned __int8 *v1437;
  int v1438;
  unsigned __int8 *v1439;
  int v1440;
  unsigned __int8 *v1441;
  int v1442;
  unsigned __int8 *v1443;
  int v1444;
  unsigned __int8 *v1445;
  int v1446;
  unsigned __int8 *v1447;
  _DWORD *v1448;
  int v1449;
  unint64_t v1450;
  uint64_t v1451;
  unint64_t v1452;
  unsigned __int8 *v1453;
  unsigned __int8 *v1454;
  int v1455;
  unsigned __int8 *v1456;
  int v1457;
  unsigned __int8 *v1458;
  int v1459;
  unsigned __int8 *v1460;
  int v1461;
  unsigned __int8 *v1462;
  int v1463;
  unsigned __int8 *v1464;
  int v1465;
  unsigned __int8 *v1466;
  unint64_t v1467;
  uint64_t v1468;
  unint64_t v1469;
  void (*v1470)(_QWORD);
  int v1471;
  void (*v1472)(_QWORD);
  void (*v1473)(_QWORD);
  int v1474;
  unsigned __int8 *v1475;
  int v1476;
  unint64_t v1477;
  void (*v1478)(_QWORD);
  int v1479;
  void (*v1480)(_QWORD);
  int v1481;
  void (*v1482)(_QWORD);
  int v1483;
  void (*v1484)(_QWORD);
  int v1485;
  void (*v1486)(_QWORD);
  int v1487;
  void (*v1488)(_QWORD);
  int v1489;
  void (*v1490)(_QWORD);
  int v1491;
  void (*v1492)(_QWORD);
  void (*v1493)(_QWORD);
  int v1494;
  void (*v1495)(_QWORD);
  int v1496;
  void (*v1497)(_QWORD);
  int v1498;
  void (*v1499)(_QWORD);
  int v1500;
  void (*v1501)(_QWORD);
  int v1502;
  void (*v1503)(_QWORD);
  int v1504;
  void (*v1505)(_QWORD);
  int v1506;
  void (*v1507)(_QWORD);
  void (*v1508)(_QWORD);
  int v1509;
  void (*v1510)(_QWORD);
  int v1511;
  void (*v1512)(_QWORD);
  int v1513;
  void (*v1514)(_QWORD);
  int v1515;
  void (*v1516)(_QWORD);
  int v1517;
  void (*v1518)(_QWORD);
  int v1519;
  void (*v1520)(_QWORD);
  int v1521;
  void (*v1522)(_QWORD);
  int v1523;
  unsigned __int8 *v1524;
  int v1525;
  unint64_t v1526;
  void (*v1527)(_QWORD);
  int v1528;
  void (*v1529)(_QWORD);
  int v1530;
  void (*v1531)(_QWORD);
  int v1532;
  void (*v1533)(_QWORD);
  int v1534;
  void (*v1535)(_QWORD);
  int v1536;
  void (*v1537)(_QWORD);
  int v1538;
  void (*v1539)(_QWORD);
  int v1540;
  void (*v1541)(_QWORD);
  void (*v1542)(_QWORD);
  int v1543;
  void (*v1544)(_QWORD);
  int v1545;
  void (*v1546)(_QWORD);
  int v1547;
  void (*v1548)(_QWORD);
  int v1549;
  void (*v1550)(_QWORD);
  int v1551;
  void (*v1552)(_QWORD);
  int v1553;
  void (*v1554)(_QWORD);
  int v1555;
  void (*v1556)(_QWORD);
  void (*v1557)(_QWORD);
  int v1558;
  void (*v1559)(_QWORD);
  int v1560;
  void (*v1561)(_QWORD);
  int v1562;
  void (*v1563)(_QWORD);
  int v1564;
  void (*v1565)(_QWORD);
  int v1566;
  void (*v1567)(_QWORD);
  int v1568;
  void (*v1569)(_QWORD);
  int v1570;
  void (*v1571)(_QWORD);
  int v1572;
  unsigned __int8 *v1573;
  int v1574;
  unint64_t v1575;
  void (*v1576)(_QWORD);
  void (*v1577)(_QWORD);
  int v1578;
  void (*v1579)(_QWORD);
  int v1580;
  void (*v1581)(_QWORD);
  int v1582;
  unsigned __int8 *v1583;
  int v1584;
  int v1585;
  unint64_t v1586;
  uint64_t v1587;
  unint64_t v1588;
  void (*v1589)(_QWORD);
  int v1590;
  void (*v1591)(_QWORD);
  int v1592;
  void (*v1593)(_QWORD);
  int v1594;
  void (*v1595)(_QWORD);
  int v1596;
  void (*v1597)(_QWORD);
  int v1598;
  void (*v1599)(_QWORD);
  int v1600;
  void (*v1601)(_QWORD);
  int v1602;
  unsigned __int8 *v1603;
  int v1604;
  unint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  void (*v1608)(_QWORD);
  int v1609;
  void (*v1610)(_QWORD);
  int v1611;
  void (*v1612)(_QWORD);
  int v1613;
  void (*v1614)(_QWORD);
  int v1615;
  void (*v1616)(_QWORD);
  int v1617;
  void (*v1618)(_QWORD);
  int v1619;
  void (*v1620)(_QWORD);
  int v1621;
  void (*v1622)(_QWORD);
  int *v1623;
  uint64_t jj;
  int v1625;
  unint64_t v1626;
  uint64_t v1627;
  unint64_t v1628;
  unsigned __int8 *v1629;
  unsigned __int8 *v1630;
  unsigned __int8 *v1631;
  int v1632;
  unsigned __int8 *v1633;
  int v1634;
  unsigned __int8 *v1635;
  int v1636;
  unsigned __int8 *v1637;
  int v1638;
  unsigned __int8 *v1639;
  int v1640;
  unsigned __int8 *v1641;
  int v1642;
  int v1643;
  unint64_t v1644;
  uint64_t v1645;
  unint64_t v1646;
  unsigned __int8 *v1647;
  unsigned __int8 *v1648;
  unsigned __int8 *v1649;
  int v1650;
  unsigned __int8 *v1651;
  int v1652;
  unsigned __int8 *v1653;
  int v1654;
  unsigned __int8 *v1655;
  int v1656;
  unsigned __int8 *v1657;
  int v1658;
  unsigned __int8 *v1659;
  unint64_t v1660;
  uint64_t v1661;
  unint64_t v1662;
  void (*v1663)(_QWORD);
  uint64_t v1664;
  int v1665;
  void (*v1666)(_QWORD);
  int v1667;
  void (*v1668)(_QWORD);
  int v1669;
  unsigned __int8 *v1670;
  int v1671;
  uint64_t v1672;
  unint64_t v1673;
  uint64_t v1674;
  unint64_t v1675;
  void (*v1676)(_QWORD);
  int v1677;
  void (*v1678)(_QWORD);
  int v1679;
  void (*v1680)(_QWORD);
  int v1681;
  void (*v1682)(_QWORD);
  int v1683;
  void (*v1684)(_QWORD);
  int v1685;
  void (*v1686)(_QWORD);
  int v1687;
  void (*v1688)(_QWORD);
  int v1689;
  unsigned __int8 *v1690;
  int v1691;
  unint64_t v1692;
  void (*v1693)(_QWORD);
  int v1694;
  void (*v1695)(_QWORD);
  int v1696;
  void (*v1697)(_QWORD);
  int v1698;
  void (*v1699)(_QWORD);
  int v1700;
  void (*v1701)(_QWORD);
  int v1702;
  void (*v1703)(_QWORD);
  int v1704;
  void (*v1705)(_QWORD);
  int v1706;
  int *v1707;
  uint64_t v1708;
  int v1709;
  unint64_t v1710;
  uint64_t v1711;
  unint64_t v1712;
  unsigned __int8 *v1713;
  unsigned __int8 *v1714;
  unsigned __int8 *v1715;
  int v1716;
  unsigned __int8 *v1717;
  int v1718;
  unsigned __int8 *v1719;
  int v1720;
  unsigned __int8 *v1721;
  int v1722;
  unsigned __int8 *v1723;
  int v1724;
  unsigned __int8 *v1725;
  int v1726;
  int v1727;
  unint64_t v1728;
  uint64_t v1729;
  unint64_t v1730;
  unsigned __int8 *v1731;
  unsigned __int8 *v1732;
  unsigned __int8 *v1733;
  int v1734;
  unsigned __int8 *v1735;
  int v1736;
  unsigned __int8 *v1737;
  int v1738;
  unsigned __int8 *v1739;
  int v1740;
  unsigned __int8 *v1741;
  int v1742;
  unsigned __int8 *v1743;
  int v1745;
  void (*v1746)(_QWORD);
  int v1747;
  void (*v1748)(_QWORD);
  int v1749;
  void (*v1750)(_QWORD);
  int v1751;
  void (*v1752)(_QWORD);
  int v1753;
  void (*v1754)(_QWORD);
  int v1755;
  void (*v1756)(_QWORD);
  unint64_t v1757;
  uint64_t v1758;
  unint64_t v1759;
  unsigned __int8 *v1760;
  unsigned int v1761;
  unsigned int v1762;
  unsigned __int8 *v1763;
  int v1764;
  unsigned int *v1765;
  int v1766;
  void (*v1767)(_QWORD);
  int v1768;
  void (*v1769)(_QWORD);
  int v1770;
  void (*v1771)(_QWORD);
  int v1772;
  void (*v1773)(_QWORD);
  int v1774;
  void (*v1775)(_QWORD);
  int v1776;
  unsigned __int8 *v1777;
  int v1778;
  unint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  unsigned __int8 *v1782;
  unsigned int v1783;
  unsigned int v1784;
  unsigned __int8 *v1785;
  int v1786;
  unsigned int *v1787;
  int v1788;
  void (*v1789)(_QWORD);
  int v1790;
  void (*v1791)(_QWORD);
  int v1792;
  void (*v1793)(_QWORD);
  int v1794;
  void (*v1795)(_QWORD);
  int v1796;
  void (*v1797)(_QWORD);
  int v1798;
  unsigned __int8 *v1799;
  int v1800;
  unint64_t v1801;
  uint64_t v1802;
  unint64_t v1803;
  unsigned __int8 *v1804;
  unsigned int v1805;
  unsigned int v1806;
  unsigned __int8 *v1807;
  int v1808;
  unsigned int *v1809;
  int v1810;
  void (*v1811)(_QWORD);
  int v1812;
  void (*v1813)(_QWORD);
  int v1814;
  void (*v1815)(_QWORD);
  int v1816;
  void (*v1817)(_QWORD);
  int v1818;
  void (*v1819)(_QWORD);
  int v1820;
  unsigned __int8 *v1821;
  int v1822;
  unint64_t v1823;
  uint64_t v1824;
  unint64_t v1825;
  unsigned __int8 *v1826;
  unsigned int v1827;
  unsigned int v1828;
  unsigned __int8 *v1829;
  int v1830;
  unsigned int *v1831;
  int v1832;
  void (*v1833)(_QWORD);
  int v1834;
  void (*v1835)(_QWORD);
  int v1836;
  void (*v1837)(_QWORD);
  int v1838;
  void (*v1839)(_QWORD);
  int v1840;
  void (*v1841)(_QWORD);
  int v1842;
  unsigned __int8 *v1843;
  int v1844;
  unint64_t v1845;
  uint64_t v1846;
  unint64_t v1847;
  unsigned __int8 *v1848;
  unsigned int v1849;
  unsigned int v1850;
  unsigned __int8 *v1851;
  int v1852;
  unsigned int *v1853;
  int v1854;
  void (*v1855)(_QWORD);
  int v1856;
  void (*v1857)(_QWORD);
  int v1858;
  void (*v1859)(_QWORD);
  int v1860;
  void (*v1861)(_QWORD);
  int v1862;
  void (*v1863)(_QWORD);
  int v1864;
  unsigned __int8 *v1865;
  int v1866;
  unint64_t v1867;
  uint64_t v1868;
  unint64_t v1869;
  unsigned __int8 *v1870;
  unsigned int v1871;
  unsigned int v1872;
  unsigned __int8 *v1873;
  int v1874;
  unsigned int *v1875;
  int v1876;
  void (*v1877)(_QWORD);
  int v1878;
  void (*v1879)(_QWORD);
  int v1880;
  void (*v1881)(_QWORD);
  int v1882;
  void (*v1883)(_QWORD);
  int v1884;
  void (*v1885)(_QWORD);
  int v1886;
  unsigned __int8 *v1887;
  int v1888;
  unint64_t v1889;
  uint64_t v1890;
  unint64_t v1891;
  unsigned __int8 *v1892;
  unsigned int v1893;
  unsigned int v1894;
  unsigned __int8 *v1895;
  int v1896;
  unsigned int *v1897;
  int v1898;
  void (*v1899)(_QWORD);
  int v1900;
  void (*v1901)(_QWORD);
  int v1902;
  void (*v1903)(_QWORD);
  int v1904;
  void (*v1905)(_QWORD);
  int v1906;
  void (*v1907)(_QWORD);
  int v1908;
  unsigned __int8 *v1909;
  int v1910;
  unint64_t v1911;
  uint64_t v1912;
  unint64_t v1913;
  unsigned __int8 *v1914;
  unsigned int v1915;
  unsigned int v1916;
  unsigned __int8 *v1917;
  int v1918;
  unsigned int *v1919;
  int v1920;
  void (*v1921)(_QWORD);
  int v1922;
  void (*v1923)(_QWORD);
  int v1924;
  void (*v1925)(_QWORD);
  int v1926;
  void (*v1927)(_QWORD);
  int v1928;
  void (*v1929)(_QWORD);
  int v1930;
  unsigned __int8 *v1931;
  int v1932;
  unint64_t v1933;
  uint64_t v1934;
  unint64_t v1935;
  unsigned __int8 *v1936;
  unsigned int v1937;
  unsigned int v1938;
  unsigned __int8 *v1939;
  int v1940;
  unsigned int *v1941;
  int v1942;
  void (*v1943)(_QWORD);
  int v1944;
  void (*v1945)(_QWORD);
  int v1946;
  void (*v1947)(_QWORD);
  int v1948;
  void (*v1949)(_QWORD);
  int v1950;
  void (*v1951)(_QWORD);
  int v1952;
  unsigned __int8 *v1953;
  int v1954;
  int v1955;
  unint64_t v1956;
  uint64_t v1957;
  unint64_t v1958;
  unsigned __int8 *v1959;
  int v1960;
  int v1961;
  uint64_t (*v1962)(_QWORD);
  unsigned __int8 *v1963;
  int v1964;
  int v1965;
  unsigned __int8 *v1966;
  int v1967;
  _BOOL4 v1968;
  _DWORD *v1969;
  _BOOL4 v1970;
  _BOOL4 v1971;
  int v1972;
  _BYTE *v1973;
  int v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  _BYTE *v1978;
  _BYTE *v1979;
  _DWORD *v1980;
  uint64_t v1981;
  unsigned __int8 *v1982;
  int *__attribute__((__org_typedef(jmp_buf))) v1983;
  int *__attribute__((__org_typedef(jmp_buf))) v1984;
  uint64_t v1985;
  int v1986;
  _DWORD *v1987;
  _BYTE *v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  unsigned int *v1992;
  _DWORD *v1993;
  unsigned __int8 *v1994;
  int v1995;
  int v1996;
  int v1997;
  int v1998;
  int v1999;
  int v2000;
  int v2001;
  int v2002;
  uint64_t v2003;
  int v2004;
  int v2005;
  int v2006;
  int v2007;
  int v2008;
  int v2009;
  int v2010;
  int v2011;
  int v2012;
  uint64_t *v2013;
  unint64_t v2014;
  unint64_t v2015;
  void (**v2016)(_QWORD);
  unsigned int *v2017;

  v4 = a1;
  v5 = (unsigned int *)(a1 + 39904);
  v1980 = (_DWORD *)(a1 + 363872);
  v1981 = a1 + 38224;
  v1988 = (_BYTE *)(a1 + 15692);
  v6 = (unsigned __int8 *)(a1 + 15200);
  v1985 = a1 + 39568;
  v7 = *(_QWORD *)(a1 + 39880);
  v8 = *(_QWORD *)(a1 + 40496);
  v9 = *(_QWORD *)(v8 + 88);
  *(_DWORD *)(a1 + 388908) = 0;
  *(_DWORD *)(a1 + 388912) = 0;
  v1975 = a1 + 388848;
  if (*(_DWORD *)(a1 + 363912))
  {
    v1982 = (unsigned __int8 *)(a1 + 15200);
    v1989 = v7;
    if (*(_BYTE *)(v7 + 58))
      goto LABEL_3;
LABEL_18:
    v21 = *(unsigned int *)(a2 + 16);
    v22 = *(_QWORD *)a2;
    v23 = *(_QWORD *)(a2 + 8);
    v24 = (unsigned __int8 *)(*(_QWORD *)a2 + (v21 >> 3));
    if ((unint64_t)v24 >= v23)
    {
      v27 = *(void (**)(_QWORD))(a2 + 32);
      if (v27)
      {
        v27(*(_QWORD *)(a2 + 24));
        LODWORD(v21) = *(_DWORD *)(a2 + 16);
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)(a2 + 8);
      }
      *(_DWORD *)(v4 + 15688) = 0;
      v1980[5] = 0;
    }
    else
    {
      v25 = *v24 >> (~(_BYTE)v21 & 7);
      LODWORD(v21) = v21 + 1;
      *(_DWORD *)(a2 + 16) = v21;
      *(_DWORD *)(v4 + 15688) = v25 & 1;
      v1980[5] = 0;
      if ((v25 & 1) != 0)
      {
        if (v1980[11])
        {
          aom_internal_error(v4 + 390860, 7, "New sequence header starts with a show_existing_frame.");
          LODWORD(v21) = *(_DWORD *)(a2 + 16);
          v22 = *(_QWORD *)a2;
          v23 = *(_QWORD *)(a2 + 8);
        }
        v26 = (void (*)(_QWORD))(v22 + (v21 >> 3));
        if ((unint64_t)v26 >= v23)
        {
          v26 = *(void (**)(_QWORD))(a2 + 32);
          if (v26)
          {
            v26(*(_QWORD *)(a2 + 24));
            LODWORD(v26) = 0;
            LODWORD(v21) = *(_DWORD *)(a2 + 16);
            v22 = *(_QWORD *)a2;
            v23 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v26) = (*(unsigned __int8 *)v26 >> (~(_BYTE)v21 & 7)) & 1;
          LODWORD(v21) = v21 + 1;
          *(_DWORD *)(a2 + 16) = v21;
        }
        v129 = 4 * (_DWORD)v26;
        v130 = (void (*)(_QWORD))(v22 + (v21 >> 3));
        if ((unint64_t)v130 >= v23)
        {
          v130 = *(void (**)(_QWORD))(a2 + 32);
          if (v130)
          {
            v130(*(_QWORD *)(a2 + 24));
            LODWORD(v130) = 0;
            LODWORD(v21) = *(_DWORD *)(a2 + 16);
            v22 = *(_QWORD *)a2;
            v23 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v130) = (*(unsigned __int8 *)v130 >> (~(_BYTE)v21 & 7)) & 1;
          LODWORD(v21) = v21 + 1;
          *(_DWORD *)(a2 + 16) = v21;
        }
        LODWORD(v131) = v129 | (2 * (_DWORD)v130);
        v132 = (unsigned __int8 *)(v22 + (v21 >> 3));
        if ((unint64_t)v132 >= v23)
        {
          v142 = *(void (**)(_QWORD))(a2 + 32);
          if (v142)
          {
            v142(*(_QWORD *)(a2 + 24));
            v131 = v131;
            v134 = *(_QWORD *)(v4 + 8 * v131 + 15616);
            if (v134)
              goto LABEL_224;
          }
          else
          {
            v131 = v131;
            v134 = *(_QWORD *)(v4 + 8 * v131 + 15616);
            if (v134)
              goto LABEL_224;
          }
        }
        else
        {
          v133 = (*v132 >> (~(_BYTE)v21 & 7)) & 1;
          *(_DWORD *)(a2 + 16) = v21 + 1;
          v131 = v133 | v131;
          v134 = *(_QWORD *)(v4 + 8 * v131 + 15616);
          if (v134)
          {
LABEL_224:
            if (*(_BYTE *)(v7 + 264) && !*(_DWORD *)(v7 + 256))
            {
              v135 = *(_DWORD *)(*(_QWORD *)(v1985 + 312) + 280);
              if (v135 < 1)
              {
                v136 = 0;
              }
              else
              {
                v136 = 0;
                v137 = v135 + 1;
                do
                {
                  while (1)
                  {
                    v139 = *(unsigned int *)(a2 + 16);
                    v140 = (unsigned __int8 *)(*(_QWORD *)a2 + (v139 >> 3));
                    if ((unint64_t)v140 >= *(_QWORD *)(a2 + 8))
                      break;
                    v138 = (*v140 >> (~(_BYTE)v139 & 7)) & 1;
                    *(_DWORD *)(a2 + 16) = v139 + 1;
                    v136 |= v138 << (v137-- - 2);
                    if (v137 <= 1)
                      goto LABEL_526;
                  }
                  v141 = *(void (**)(_QWORD))(a2 + 32);
                  if (v141)
                    v141(*(_QWORD *)(a2 + 24));
                  --v137;
                }
                while (v137 > 1);
              }
LABEL_526:
              *(_DWORD *)(v4 + 15416) = v136;
              v7 = v1989;
            }
            if (*(_BYTE *)(v7 + 16))
            {
              v315 = *(_DWORD *)(v7 + 20);
              if (v315 < 1)
              {
                v316 = 0;
              }
              else
              {
                v316 = 0;
                v317 = v315 + 1;
                do
                {
                  while (1)
                  {
                    v319 = *(unsigned int *)(a2 + 16);
                    v320 = (unsigned __int8 *)(*(_QWORD *)a2 + (v319 >> 3));
                    if ((unint64_t)v320 >= *(_QWORD *)(a2 + 8))
                      break;
                    v318 = (*v320 >> (~(_BYTE)v319 & 7)) & 1;
                    *(_DWORD *)(a2 + 16) = v319 + 1;
                    v316 |= v318 << (v317-- - 2);
                    if (v317 <= 1)
                      goto LABEL_537;
                  }
                  v321 = *(void (**)(_QWORD))(a2 + 32);
                  if (v321)
                    v321(*(_QWORD *)(a2 + 24));
                  --v317;
                }
                while (v317 > 1);
              }
LABEL_537:
              v322 = v4 + 4 * v131;
              if (v316 != *(_DWORD *)(v322 + 40564) || !*(_DWORD *)(v322 + 388864))
                aom_internal_error(v4 + 390860, 7, "Reference buffer frame ID mismatch");
            }
            pthread_mutex_lock((pthread_mutex_t *)v8);
            v323 = *(_DWORD **)(v4 + 15432);
            if (v323)
              --*v323;
            *(_QWORD *)(v4 + 15432) = v134;
            ++*(_DWORD *)v134;
            v1980[5] = *(_BYTE *)(v134 + 1448) == 0;
            pthread_mutex_unlock((pthread_mutex_t *)v8);
            *(_QWORD *)v1981 = 0;
            *(_DWORD *)(v4 + 15680) = 1;
            *(_DWORD *)(v4 + 15204) = *(_DWORD *)(v134 + 4);
            if (!*(_DWORD *)(v134 + 564))
              aom_internal_error(v4 + 390860, 5, "Buffer does not contain a showable frame");
            if (!v1980[5])
            {
              result = (uint64_t)memcpy((void *)(v4 + 38920), (const void *)(v134 + 572), 0x288uLL);
              *(_DWORD *)(v4 + 15236) = 0;
              return result;
            }
            *(_DWORD *)(v134 + 564) = 0;
            memcpy((void *)(v4 + 38920), (const void *)(v134 + 572), 0x288uLL);
            result = (uint64_t)v1982;
            *v1982 = 0;
            *(_DWORD *)(v4 + 15236) = 255;
            *(_QWORD *)(v4 + 15440) = -1;
            *(_QWORD *)(v4 + 15448) = -1;
            *(_QWORD *)(v4 + 15456) = -1;
            *(_DWORD *)(v4 + 15464) = -1;
            if (v1980[4])
            {
              result = reset_ref_frame_map((uint64_t)v1982);
              v1980[4] = 0;
              v325 = *(_DWORD *)(v4 + 15236);
              v326 = *(_DWORD *)(v4 + 4 * v131 + 40564);
              v5[164] = v326;
              v327 = (_DWORD *)v1975;
              if ((v325 & 1) == 0)
              {
                if ((v325 & 2) == 0)
                  goto LABEL_548;
                goto LABEL_559;
              }
            }
            else
            {
              v326 = *(_DWORD *)(v4 + 4 * v131 + 40564);
              v5[164] = v326;
              LOBYTE(v325) = -1;
              v327 = (_DWORD *)v1975;
            }
            v5[165] = v326;
            v327[4] = 1;
            if ((v325 & 2) == 0)
            {
LABEL_548:
              if ((v325 & 4) == 0)
                goto LABEL_549;
              goto LABEL_560;
            }
LABEL_559:
            v5[166] = v326;
            v327[5] = 1;
            if ((v325 & 4) == 0)
            {
LABEL_549:
              if ((v325 & 8) == 0)
                goto LABEL_550;
              goto LABEL_561;
            }
LABEL_560:
            v5[167] = v326;
            v327[6] = 1;
            if ((v325 & 8) == 0)
            {
LABEL_550:
              if ((v325 & 0x10) == 0)
                goto LABEL_551;
              goto LABEL_562;
            }
LABEL_561:
            v5[168] = v326;
            v327[7] = 1;
            if ((v325 & 0x10) == 0)
            {
LABEL_551:
              if ((v325 & 0x20) == 0)
                goto LABEL_552;
              goto LABEL_563;
            }
LABEL_562:
            v5[169] = v326;
            v327[8] = 1;
            if ((v325 & 0x20) == 0)
            {
LABEL_552:
              if ((v325 & 0x40) == 0)
                goto LABEL_553;
              goto LABEL_564;
            }
LABEL_563:
            v5[170] = v326;
            v327[9] = 1;
            if ((v325 & 0x40) == 0)
            {
LABEL_553:
              if ((v325 & 0x80) == 0)
              {
LABEL_555:
                v1988[24] = 0;
                return result;
              }
LABEL_554:
              v5[172] = v326;
              v327[11] = 1;
              goto LABEL_555;
            }
LABEL_564:
            v5[171] = v326;
            v327[10] = 1;
            if ((v325 & 0x80) == 0)
              goto LABEL_555;
            goto LABEL_554;
          }
        }
        aom_internal_error(v4 + 390860, 5, "Buffer does not contain a decoded frame");
        goto LABEL_224;
      }
    }
    v28 = (void (*)(_QWORD))(v22 + (v21 >> 3));
    if ((unint64_t)v28 >= v23)
    {
      v28 = *(void (**)(_QWORD))(a2 + 32);
      if (v28)
      {
        v28(*(_QWORD *)(a2 + 24));
        LODWORD(v28) = 0;
        LODWORD(v21) = *(_DWORD *)(a2 + 16);
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v28) = (*(unsigned __int8 *)v28 >> (~(_BYTE)v21 & 7)) & 1;
      LODWORD(v21) = v21 + 1;
      *(_DWORD *)(a2 + 16) = v21;
    }
    v29 = 2 * (_DWORD)v28;
    v30 = (unsigned __int8 *)(v22 + (v21 >> 3));
    if ((unint64_t)v30 >= v23)
    {
      v40 = *(void (**)(_QWORD))(a2 + 32);
      if (v40)
        v40(*(_QWORD *)(a2 + 24));
      v32 = v29;
      *v6 = v29;
      if (!v1980[11])
      {
LABEL_37:
        v33 = *(unsigned int *)(a2 + 16);
        v34 = (unsigned __int8 *)(*(_QWORD *)a2 + (v33 >> 3));
        if ((unint64_t)v34 < *(_QWORD *)(a2 + 8))
          goto LABEL_38;
LABEL_45:
        v41 = *(void (**)(_QWORD))(a2 + 32);
        if (v41)
          v41(*(_QWORD *)(a2 + 24));
        v36 = (_DWORD *)(v4 + 15680);
        *(_DWORD *)(v4 + 15680) = 0;
        v37 = *v6;
        goto LABEL_48;
      }
    }
    else
    {
      v31 = (*v30 >> (~(_BYTE)v21 & 7)) & 1;
      *(_DWORD *)(a2 + 16) = v21 + 1;
      v32 = v31 | v29;
      *v6 = v31 | v29;
      if (!v1980[11])
        goto LABEL_37;
    }
    if (v32)
    {
      aom_internal_error(v4 + 390860, 7, "Sequence header has changed without a keyframe.");
      v33 = *(unsigned int *)(a2 + 16);
      v34 = (unsigned __int8 *)(*(_QWORD *)a2 + (v33 >> 3));
      if ((unint64_t)v34 >= *(_QWORD *)(a2 + 8))
        goto LABEL_45;
    }
    else
    {
      v1980[11] = 0;
      *v1980 = 1;
      v51 = *((_QWORD *)v5 + 74);
      v52 = *(_QWORD *)(v51 + 88);
      pthread_mutex_lock((pthread_mutex_t *)v51);
      reset_ref_frame_map((uint64_t)v6);
      v53 = *((_QWORD *)v5 + 74);
      if (*(_BYTE *)(v53 + 96))
      {
        v54 = 0;
        do
        {
          if (*(int *)v52 < 1 || v52 == *(_QWORD *)(v4 + 15432))
          {
            *(_DWORD *)(v52 + 4) = 0;
            *(_QWORD *)(v52 + 16) = 0;
            *(_QWORD *)(v52 + 24) = 0;
            *(_QWORD *)(v52 + 8) = 0;
            *(_DWORD *)(v52 + 32) = 0;
            v53 = *((_QWORD *)v5 + 74);
          }
          ++v54;
          v52 += 22728;
        }
        while (v54 < *(unsigned __int8 *)(v53 + 96));
      }
      v55 = *(_DWORD *)(v53 + 104);
      if (v55 >= 1)
      {
        v56 = 0;
        for (i = 0; i < v55; ++i)
        {
          v58 = *(_QWORD *)(v53 + 112);
          v59 = *(void **)(v58 + v56);
          if (v59)
          {
            v60 = v58 + v56;
            if (!*(_DWORD *)(v60 + 16))
            {
              bzero(v59, *(_QWORD *)(v60 + 8));
              v55 = *(_DWORD *)(v53 + 104);
            }
          }
          v56 += 24;
        }
        v53 = *((_QWORD *)v5 + 74);
        v6 = v1982;
      }
      pthread_mutex_unlock((pthread_mutex_t *)v53);
      v33 = *(unsigned int *)(a2 + 16);
      v34 = (unsigned __int8 *)(*(_QWORD *)a2 + (v33 >> 3));
      if ((unint64_t)v34 >= *(_QWORD *)(a2 + 8))
        goto LABEL_45;
    }
LABEL_38:
    v35 = *v34 >> (~(_BYTE)v33 & 7);
    *(_DWORD *)(a2 + 16) = v33 + 1;
    v36 = (_DWORD *)(v4 + 15680);
    *(_DWORD *)(v4 + 15680) = v35 & 1;
    v37 = *v6;
    if ((v35 & 1) != 0)
    {
      v38 = 0;
      v39 = 1;
      goto LABEL_49;
    }
LABEL_48:
    v38 = 1;
    *(_DWORD *)(v1975 + 52) = 1;
    v39 = 0;
    if (!v37)
    {
      *(_DWORD *)(v1975 + 48) = 1;
      v38 = 1;
      if (!*(_BYTE *)(v7 + 57))
        goto LABEL_58;
      goto LABEL_56;
    }
LABEL_49:
    if (v37 == 3)
    {
      *(_DWORD *)(v1975 + 60) = 1;
      *(_DWORD *)(v1975 + 64) = v38;
      v37 = 3;
    }
    if (v37)
      v38 = 1;
    if (!*(_BYTE *)(v7 + 57))
    {
LABEL_58:
      LODWORD(v42) = v37 != 0;
      *(_DWORD *)(v4 + 15684) = (_DWORD)v42;
      if (v39)
      {
        if (*(_BYTE *)(v7 + 264) && !*(_DWORD *)(v7 + 256))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(v1985 + 312) + 280);
          if (v43 < 1)
          {
            v44 = 0;
          }
          else
          {
            v44 = 0;
            v45 = v43 + 1;
            do
            {
              while (1)
              {
                v47 = *(unsigned int *)(a2 + 16);
                v48 = (unsigned __int8 *)(*(_QWORD *)a2 + (v47 >> 3));
                if ((unint64_t)v48 >= *(_QWORD *)(a2 + 8))
                  break;
                v46 = (*v48 >> (~(_BYTE)v47 & 7)) & 1;
                *(_DWORD *)(a2 + 16) = v47 + 1;
                v44 |= v46 << (v45-- - 2);
                if (v45 <= 1)
                  goto LABEL_68;
              }
              v49 = *(void (**)(_QWORD))(a2 + 32);
              if (v49)
                v49(*(_QWORD *)(a2 + 24));
              --v45;
            }
            while (v45 > 1);
LABEL_68:
            LODWORD(v42) = *(_DWORD *)(v4 + 15684);
            v7 = v1989;
          }
          *(_DWORD *)(v4 + 15416) = v44;
          v6 = v1982;
          *(_DWORD *)(*(_QWORD *)(v4 + 15432) + 564) = (_DWORD)v42;
          v61 = *v1982;
          if (v61 == 3)
            goto LABEL_90;
LABEL_88:
          if (v61 || !*v36)
          {
            v63 = *(unsigned int *)(a2 + 16);
            v62 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v63 >> 3));
            if ((unint64_t)v62 >= *(_QWORD *)(a2 + 8))
            {
              v62 = *(void (**)(_QWORD))(a2 + 32);
              if (v62)
              {
                v62(*(_QWORD *)(a2 + 24));
                LOBYTE(v62) = 0;
              }
            }
            else
            {
              LODWORD(v62) = (*(unsigned __int8 *)v62 >> (~(_BYTE)v63 & 7)) & 1;
              *(_DWORD *)(a2 + 16) = v63 + 1;
            }
LABEL_95:
            v1988[10] = (_BYTE)v62;
            if (*v6)
              goto LABEL_98;
            goto LABEL_96;
          }
LABEL_90:
          LOBYTE(v62) = 1;
          goto LABEL_95;
        }
      }
      else
      {
        v50 = *(unsigned int *)(a2 + 16);
        v42 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v50 >> 3));
        if ((unint64_t)v42 >= *(_QWORD *)(a2 + 8))
        {
          v42 = *(void (**)(_QWORD))(a2 + 32);
          if (v42)
          {
            v42(*(_QWORD *)(a2 + 24));
            LODWORD(v42) = 0;
          }
        }
        else
        {
          LODWORD(v42) = (*(unsigned __int8 *)v42 >> (~(_BYTE)v50 & 7)) & 1;
          *(_DWORD *)(a2 + 16) = v50 + 1;
        }
        *(_DWORD *)(v4 + 15684) = (_DWORD)v42;
      }
      *(_DWORD *)(*(_QWORD *)(v4 + 15432) + 564) = (_DWORD)v42;
      v61 = *v6;
      if (v61 == 3)
        goto LABEL_90;
      goto LABEL_88;
    }
LABEL_56:
    if (v38)
    {
      aom_internal_error(v4 + 390860, 7, "Still pictures must be coded as shown keyframes");
      v37 = *v6;
      v39 = *(_DWORD *)(v4 + 15680);
    }
    goto LABEL_58;
  }
  aom_internal_error(a1 + 390860, 7, "No sequence header");
  v1982 = v6;
  v1989 = v7;
  if (!*(_BYTE *)(v7 + 58))
    goto LABEL_18;
LABEL_3:
  *(_DWORD *)(v4 + 15688) = 0;
  *(_DWORD *)(v4 + 15680) = 1;
  *v6 = 0;
  if (v1980[11])
  {
    v1980[11] = 0;
    *v1980 = 1;
    v10 = *((_QWORD *)v5 + 74);
    v11 = (uint64_t)v6;
    v12 = *(_QWORD *)(v10 + 88);
    pthread_mutex_lock((pthread_mutex_t *)v10);
    reset_ref_frame_map(v11);
    v13 = *((_QWORD *)v5 + 74);
    if (*(_BYTE *)(v13 + 96))
    {
      v14 = 0;
      do
      {
        if (*(int *)v12 < 1 || v12 == *(_QWORD *)(v4 + 15432))
        {
          *(_DWORD *)(v12 + 4) = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 24) = 0;
          *(_QWORD *)(v12 + 8) = 0;
          *(_DWORD *)(v12 + 32) = 0;
          v13 = *((_QWORD *)v5 + 74);
        }
        ++v14;
        v12 += 22728;
      }
      while (v14 < *(unsigned __int8 *)(v13 + 96));
    }
    v15 = *(_DWORD *)(v13 + 104);
    if (v15 >= 1)
    {
      v16 = 0;
      for (j = 0; j < v15; ++j)
      {
        v18 = *(_QWORD *)(v13 + 112);
        v19 = *(void **)(v18 + v16);
        if (v19)
        {
          v20 = v18 + v16;
          if (!*(_DWORD *)(v20 + 16))
          {
            bzero(v19, *(_QWORD *)(v20 + 8));
            v15 = *(_DWORD *)(v13 + 104);
          }
        }
        v16 += 24;
      }
      v13 = *((_QWORD *)v5 + 74);
    }
    pthread_mutex_unlock((pthread_mutex_t *)v13);
    v6 = v1982;
    v7 = v1989;
  }
  v1988[10] = 1;
  if (!*v6)
  {
LABEL_96:
    if (*(_DWORD *)(v4 + 15680))
    {
      a3.n128_u16[0] = 0;
      a3.n128_u8[2] = 0;
      a3.n128_u8[3] = 0;
      a3.n128_u8[4] = 0;
      a3.n128_u8[5] = 0;
      a3.n128_u8[6] = 0;
      a3.n128_u8[7] = 0;
      *(_OWORD *)(v4 + 388864) = 0u;
      *(_OWORD *)(v4 + 388880) = 0u;
    }
  }
LABEL_98:
  v65 = (_DWORD *)(a2 + 16);
  v64 = *(unsigned int *)(a2 + 16);
  v66 = (unsigned __int8 *)(*(_QWORD *)a2 + (v64 >> 3));
  v2017 = (unsigned int *)(a2 + 16);
  if ((unint64_t)v66 >= *(_QWORD *)(a2 + 8))
  {
    v70 = *(void (**)(_QWORD))(a2 + 32);
    if (v70)
    {
      v70(*(_QWORD *)(a2 + 24));
      v65 = (_DWORD *)(a2 + 16);
    }
    v68 = v1988;
    *v1988 = 0;
    v69 = *(unsigned __int8 *)(v7 + 56);
    if (v69 != 2)
    {
LABEL_100:
      v68[3] = v69 != 0;
      v1973 = v68 + 3;
      if (!v69)
        goto LABEL_113;
      goto LABEL_107;
    }
  }
  else
  {
    v67 = (*v66 >> (~(_BYTE)v64 & 7)) & 1;
    *v65 = v64 + 1;
    v68 = v1988;
    *v1988 = v67;
    v69 = *(unsigned __int8 *)(v7 + 56);
    if (v69 != 2)
      goto LABEL_100;
  }
  v71 = *(unsigned int *)(a2 + 16);
  v72 = (unsigned __int8 *)(*(_QWORD *)a2 + (v71 >> 3));
  if ((unint64_t)v72 >= *(_QWORD *)(a2 + 8))
  {
    v79 = *(void (**)(_QWORD))(a2 + 32);
    if (v79)
    {
      v79(*(_QWORD *)(a2 + 24));
      v65 = (_DWORD *)(a2 + 16);
    }
    v68 = v1988;
    v1988[3] = 0;
    v1973 = v1988 + 3;
    goto LABEL_113;
  }
  v73 = *v72;
  *v65 = v71 + 1;
  v74 = (1 << (~(_BYTE)v71 & 7)) & v73;
  v68 = v1988;
  v1988[3] = v74 != 0;
  v1973 = v1988 + 3;
  if (!v74)
  {
LABEL_113:
    v68[2] = 0;
    goto LABEL_119;
  }
LABEL_107:
  v75 = *(unsigned __int8 *)(v7 + 59);
  if (v75 == 2)
  {
    v76 = *(unsigned int *)(a2 + 16);
    v77 = (unsigned __int8 *)(*(_QWORD *)a2 + (v76 >> 3));
    if ((unint64_t)v77 >= *(_QWORD *)(a2 + 8))
    {
      v80 = *(void (**)(_QWORD))(a2 + 32);
      if (v80)
      {
        v80(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
      }
      LOBYTE(v78) = 0;
    }
    else
    {
      v78 = (*v77 >> (~(_BYTE)v76 & 7)) & 1;
      *v65 = v76 + 1;
    }
    v68 = v1988;
    v1988[2] = v78;
  }
  else
  {
    v68 = v1988;
    v1988[2] = v75 != 0;
  }
LABEL_119:
  v1974 = 0;
  v68[4] = 0;
  *(_DWORD *)(v4 + 15708) = 7;
  v1977 = v9;
  if (*(_BYTE *)(v7 + 58))
    goto LABEL_252;
  if (*(_BYTE *)(v7 + 16))
  {
    v81 = *(_DWORD *)(v7 + 20);
    v82 = *(_DWORD *)(v7 + 24);
    if (*v1980 || !*v1982 && *(_DWORD *)(v4 + 15680))
    {
      if (v81 < 1)
      {
        v83 = 0;
        v5[164] = 0;
        v89 = 1 << v82;
        v90 = -(1 << v82);
        v91 = v5[165];
        if (v90 >= 1)
          goto LABEL_167;
      }
      else
      {
        v83 = 0;
        v84 = v81 + 1;
        do
        {
          while (1)
          {
            v86 = *(unsigned int *)(a2 + 16);
            v87 = (unsigned __int8 *)(*(_QWORD *)a2 + (v86 >> 3));
            if ((unint64_t)v87 >= *(_QWORD *)(a2 + 8))
              break;
            v85 = (*v87 >> (~(_BYTE)v86 & 7)) & 1;
            *v65 = v86 + 1;
            v83 |= v85 << (v84-- - 2);
            if (v84 <= 1)
              goto LABEL_129;
          }
          v88 = *(void (**)(_QWORD))(a2 + 32);
          if (v88)
          {
            v88(*(_QWORD *)(a2 + 24));
            v65 = (_DWORD *)(a2 + 16);
          }
          --v84;
        }
        while (v84 > 1);
LABEL_129:
        v5[164] = v83;
        v89 = 1 << v82;
        v90 = v83 - (1 << v82);
        v91 = v5[165];
        if (v90 >= 1)
        {
LABEL_167:
          v7 = v1989;
          v92 = v1975;
          if (v91 > v83 || v91 < v90)
            *(_DWORD *)(v1975 + 16) = 0;
          v108 = v5[166];
          if (v108 > v83 || v108 < v90)
            *(_DWORD *)(v1975 + 20) = 0;
          v109 = v5[167];
          if (v109 > v83 || v109 < v90)
            *(_DWORD *)(v1975 + 24) = 0;
          v110 = v5[168];
          if (v110 > v83 || v110 < v90)
            *(_DWORD *)(v1975 + 28) = 0;
          v111 = v5[169];
          if (v111 > v83 || v111 < v90)
            *(_DWORD *)(v1975 + 32) = 0;
          v112 = v5[170];
          if (v112 > v83 || v112 < v90)
            *(_DWORD *)(v1975 + 36) = 0;
          v113 = v5[171];
          if (v113 > v83 || v113 < v90)
            *(_DWORD *)(v1975 + 40) = 0;
          v99 = v5[172];
          if (v99 > v83)
          {
LABEL_190:
            *(_DWORD *)(v92 + 44) = 0;
            goto LABEL_191;
          }
LABEL_189:
          if (v99 >= v90)
            goto LABEL_191;
          goto LABEL_190;
        }
      }
    }
    else
    {
      v100 = v8;
      v101 = v5[164];
      v83 = 0;
      if (v81 >= 1)
      {
        v102 = v81 + 1;
        do
        {
          while (1)
          {
            v104 = *(unsigned int *)(a2 + 16);
            v105 = (unsigned __int8 *)(*(_QWORD *)a2 + (v104 >> 3));
            if ((unint64_t)v105 >= *(_QWORD *)(a2 + 8))
              break;
            v103 = (*v105 >> (~(_BYTE)v104 & 7)) & 1;
            *v65 = v104 + 1;
            v83 |= v103 << (v102-- - 2);
            if (v102 <= 1)
              goto LABEL_161;
          }
          v106 = *(void (**)(_QWORD))(a2 + 32);
          if (v106)
          {
            v106(*(_QWORD *)(a2 + 24));
            v65 = (_DWORD *)(a2 + 16);
          }
          --v102;
        }
        while (v102 > 1);
      }
LABEL_161:
      v5[164] = v83;
      v8 = v100;
      if (v83 == v101)
        goto LABEL_165;
      v107 = 1 << v81;
      if (v83 > v101)
        v107 = 0;
      if (v83 - v101 + v107 >= 1 << (v81 - 1))
      {
LABEL_165:
        aom_internal_error(v4 + 390860, 7, "Invalid value of current_frame_id");
        v65 = (_DWORD *)(a2 + 16);
        v83 = v5[164];
      }
      v89 = 1 << v82;
      v90 = v83 - (1 << v82);
      v91 = v5[165];
      if (v90 >= 1)
        goto LABEL_167;
    }
    v90 = v83 + (1 << v81) - v89;
    v7 = v1989;
    v92 = v1975;
    if (v91 > v83 && v91 < v90)
      *(_DWORD *)(v1975 + 16) = 0;
    v93 = v5[166];
    if (v93 > v83 && v93 < v90)
      *(_DWORD *)(v1975 + 20) = 0;
    v94 = v5[167];
    if (v94 > v83 && v94 < v90)
      *(_DWORD *)(v1975 + 24) = 0;
    v95 = v5[168];
    if (v95 > v83 && v95 < v90)
      *(_DWORD *)(v1975 + 28) = 0;
    v96 = v5[169];
    if (v96 > v83 && v96 < v90)
      *(_DWORD *)(v1975 + 32) = 0;
    v97 = v5[170];
    if (v97 > v83 && v97 < v90)
      *(_DWORD *)(v1975 + 36) = 0;
    v98 = v5[171];
    if (v98 > v83 && v98 < v90)
      *(_DWORD *)(v1975 + 40) = 0;
    v99 = v5[172];
    if (v99 > v83)
      goto LABEL_189;
  }
LABEL_191:
  if (*v1982 != 3)
  {
    v126 = *(unsigned int *)(a2 + 16);
    v127 = (unsigned __int8 *)(*(_QWORD *)a2 + (v126 >> 3));
    if ((unint64_t)v127 >= *(_QWORD *)(a2 + 8))
    {
      v128 = *(void (**)(_QWORD))(a2 + 32);
      if (v128)
      {
        v128(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
      }
      v1974 = 0;
      v114 = *(_DWORD *)(v7 + 44);
      if ((v114 & 0x80000000) == 0)
        goto LABEL_193;
    }
    else
    {
      v1974 = (*v127 >> (~(_BYTE)v126 & 7)) & 1;
      *v65 = v126 + 1;
      v114 = *(_DWORD *)(v7 + 44);
      if ((v114 & 0x80000000) == 0)
        goto LABEL_193;
    }
LABEL_211:
    v115 = 0;
    *(_DWORD *)(v4 + 15204) = 0;
    v7 = v1989;
    if (!*(_DWORD *)(v1989 + 40))
      goto LABEL_201;
    goto LABEL_200;
  }
  v1974 = 1;
  v114 = *(_DWORD *)(v7 + 44);
  if (v114 < 0)
    goto LABEL_211;
LABEL_193:
  v115 = 0;
  do
  {
    while (1)
    {
      v118 = *(unsigned int *)(a2 + 16);
      v119 = (unsigned __int8 *)(*(_QWORD *)a2 + (v118 >> 3));
      if ((unint64_t)v119 >= *(_QWORD *)(a2 + 8))
        break;
      v116 = (*v119 >> (~(_BYTE)v118 & 7)) & 1;
      *v65 = v118 + 1;
      v115 |= v116 << v114;
      v117 = v114-- + 1;
      if (v117 <= 1)
        goto LABEL_199;
    }
    v120 = *(void (**)(_QWORD))(a2 + 32);
    if (v120)
    {
      v120(*(_QWORD *)(a2 + 24));
      v65 = (_DWORD *)(a2 + 16);
    }
    v121 = v114-- + 1;
  }
  while (v121 > 1);
LABEL_199:
  *(_DWORD *)(v4 + 15204) = v115;
  v7 = v1989;
  if (!*(_DWORD *)(v1989 + 40))
    goto LABEL_201;
LABEL_200:
  *(_DWORD *)(v4 + 15216) = v115;
LABEL_201:
  if (!v1988[10] && (*v1982 & 0xFD) != 0)
  {
    v122 = *(unsigned int *)(a2 + 16);
    v123 = *(_QWORD *)a2;
    v124 = *(_QWORD *)(a2 + 8);
    v125 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v122 >> 3));
    if ((unint64_t)v125 >= v124)
    {
      v125 = *(void (**)(_QWORD))(a2 + 32);
      if (v125)
      {
        v125(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v125) = 0;
        LODWORD(v122) = *(_DWORD *)(a2 + 16);
        v123 = *(_QWORD *)a2;
        v124 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v125) = (*(unsigned __int8 *)v125 >> (~(_BYTE)v122 & 7)) & 1;
      LODWORD(v122) = v122 + 1;
      *v65 = v122;
    }
    v143 = 4 * (_DWORD)v125;
    v144 = (void (*)(_QWORD))(v123 + (v122 >> 3));
    if ((unint64_t)v144 >= v124)
    {
      v144 = *(void (**)(_QWORD))(a2 + 32);
      if (v144)
      {
        v144(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v144) = 0;
        LODWORD(v122) = *(_DWORD *)(a2 + 16);
        v123 = *(_QWORD *)a2;
        v124 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v144) = (*(unsigned __int8 *)v144 >> (~(_BYTE)v122 & 7)) & 1;
      LODWORD(v122) = v122 + 1;
      *v65 = v122;
    }
    v145 = v143 | (2 * (_DWORD)v144);
    v146 = (unsigned __int8 *)(v123 + (v122 >> 3));
    if ((unint64_t)v146 >= v124)
    {
      v148 = *(void (**)(_QWORD))(a2 + 32);
      if (v148)
      {
        v148(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
      }
      v147 = 0;
    }
    else
    {
      v147 = (*v146 >> (~(_BYTE)v122 & 7)) & 1;
      *v65 = v122 + 1;
    }
    *(_DWORD *)(v4 + 15708) = v147 | v145;
  }
LABEL_252:
  if (*(_BYTE *)(v7 + 264))
  {
    v149 = *(unsigned int *)(a2 + 16);
    v150 = (unsigned __int8 *)(*(_QWORD *)a2 + (v149 >> 3));
    if ((unint64_t)v150 >= *(_QWORD *)(a2 + 8))
    {
      v163 = *(void (**)(_QWORD))(a2 + 32);
      if (v163)
      {
        v163(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
      }
      *(_BYTE *)(v1975 + 2008) = 0;
    }
    else
    {
      v151 = *v150;
      *v65 = v149 + 1;
      v152 = (1 << (~(_BYTE)v149 & 7)) & v151;
      *(_BYTE *)(v1975 + 2008) = v152 != 0;
      v153 = v1989;
      if (v152 && (*(_DWORD *)(v1989 + 112) & 0x80000000) == 0)
      {
        v154 = 0;
        do
        {
          if (*(_DWORD *)(v153 + 48 * v154 + 352)
            && ((v156 = *(_DWORD *)(v153 + 4 * v154 + 116)) == 0
             || ((v156 >> v5[187]) & 1) != 0 && ((v156 >> (*((_BYTE *)v5 + 752) + 8)) & 1) != 0)
            && (v157 = *(_DWORD *)(v1989 + 276), v157 >= 1))
          {
            v155 = 0;
            v158 = v157 + 1;
            do
            {
              while (1)
              {
                v160 = *(unsigned int *)(a2 + 16);
                v161 = (unsigned __int8 *)(*(_QWORD *)a2 + (v160 >> 3));
                if ((unint64_t)v161 >= *(_QWORD *)(a2 + 8))
                  break;
                v159 = (*v161 >> (~(_BYTE)v160 & 7)) & 1;
                *v65 = v160 + 1;
                v155 |= v159 << (v158-- - 2);
                if (v158 <= 1)
                  goto LABEL_258;
              }
              v162 = *(void (**)(_QWORD))(a2 + 32);
              if (v162)
              {
                v162(*(_QWORD *)(a2 + 24));
                v65 = (_DWORD *)(a2 + 16);
              }
              --v158;
            }
            while (v158 > 1);
          }
          else
          {
            v155 = 0;
          }
LABEL_258:
          *(_DWORD *)(v4 + 4 * v154 + 15284) = v155;
          v153 = v1989;
          v418 = v154++ < *(int *)(v1989 + 112);
        }
        while (v418);
      }
    }
  }
  v164 = v1982;
  v165 = *v1982;
  if (v165 == 2)
  {
    v168 = *(unsigned int *)(a2 + 16);
    v169 = *(_QWORD *)a2;
    v170 = *(_QWORD *)(a2 + 8);
    v171 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v168 >> 3));
    v166 = v1989;
    if ((unint64_t)v171 >= v170)
    {
      v171 = *(void (**)(_QWORD))(a2 + 32);
      if (v171)
      {
        v171(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v171) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v171) = (*(unsigned __int8 *)v171 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v173 = (_DWORD)v171 << 7;
    v174 = (void (*)(_QWORD))(v169 + (v168 >> 3));
    if ((unint64_t)v174 >= v170)
    {
      v174 = *(void (**)(_QWORD))(a2 + 32);
      if (v174)
      {
        v174(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v174) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v174) = (*(unsigned __int8 *)v174 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v175 = v173 | ((_DWORD)v174 << 6);
    v176 = (void (*)(_QWORD))(v169 + (v168 >> 3));
    if ((unint64_t)v176 >= v170)
    {
      v176 = *(void (**)(_QWORD))(a2 + 32);
      if (v176)
      {
        v176(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v176) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v176) = (*(unsigned __int8 *)v176 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v177 = v175 | (32 * (_DWORD)v176);
    v178 = (void (*)(_QWORD))(v169 + (v168 >> 3));
    if ((unint64_t)v178 >= v170)
    {
      v178 = *(void (**)(_QWORD))(a2 + 32);
      if (v178)
      {
        v178(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v178) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v178) = (*(unsigned __int8 *)v178 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v179 = v177 | (16 * (_DWORD)v178);
    v180 = (void (*)(_QWORD))(v169 + (v168 >> 3));
    if ((unint64_t)v180 >= v170)
    {
      v180 = *(void (**)(_QWORD))(a2 + 32);
      if (v180)
      {
        v180(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v180) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v180) = (*(unsigned __int8 *)v180 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v181 = v179 | (8 * (_DWORD)v180);
    v182 = (void (*)(_QWORD))(v169 + (v168 >> 3));
    if ((unint64_t)v182 >= v170)
    {
      v182 = *(void (**)(_QWORD))(a2 + 32);
      if (v182)
      {
        v182(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v182) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v182) = (*(unsigned __int8 *)v182 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v183 = v181 | (4 * (_DWORD)v182);
    v184 = (void (*)(_QWORD))(v169 + (v168 >> 3));
    if ((unint64_t)v184 >= v170)
    {
      v184 = *(void (**)(_QWORD))(a2 + 32);
      if (v184)
      {
        v184(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        LODWORD(v184) = 0;
        LODWORD(v168) = *(_DWORD *)(a2 + 16);
        v169 = *(_QWORD *)a2;
        v170 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v184) = (*(unsigned __int8 *)v184 >> (~(_BYTE)v168 & 7)) & 1;
      LODWORD(v168) = v168 + 1;
      *v65 = v168;
    }
    v185 = v183 | (2 * (_DWORD)v184);
    v186 = (unsigned __int8 *)(v169 + (v168 >> 3));
    if ((unint64_t)v186 >= v170)
    {
      v188 = *(void (**)(_QWORD))(a2 + 32);
      if (v188)
      {
        v188(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        *(_DWORD *)(v4 + 15236) = v185;
        if (v185 != 255)
        {
LABEL_356:
          if (v1980[4])
          {
            reset_ref_frame_map((uint64_t)v1982);
            v65 = (_DWORD *)(a2 + 16);
            v1980[4] = 0;
          }
          goto LABEL_358;
        }
      }
      else
      {
        *(_DWORD *)(v4 + 15236) = v185;
        if (v185 != 255)
          goto LABEL_356;
      }
    }
    else
    {
      v187 = (*v186 >> (~(_BYTE)v168 & 7)) & 1;
      *v65 = v168 + 1;
      *(_DWORD *)(v4 + 15236) = v187 | v185;
      if ((v187 | v185) != 0xFF)
        goto LABEL_356;
    }
    aom_internal_error(v4 + 390860, 5, "Intra only frames cannot have refresh flags 0xFF");
    v65 = (_DWORD *)(a2 + 16);
    goto LABEL_356;
  }
  v166 = v1989;
  if (!*v1982)
  {
    if (*(_DWORD *)(v4 + 15680))
    {
      v167 = 255;
    }
    else
    {
      v189 = *(unsigned int *)(a2 + 16);
      v190 = *(_QWORD *)a2;
      v191 = *(_QWORD *)(a2 + 8);
      v192 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v189 >> 3));
      if ((unint64_t)v192 >= v191)
      {
        v192 = *(void (**)(_QWORD))(a2 + 32);
        if (v192)
        {
          v192(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v192) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v192) = (*(unsigned __int8 *)v192 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v197 = (_DWORD)v192 << 7;
      v198 = (void (*)(_QWORD))(v190 + (v189 >> 3));
      if ((unint64_t)v198 >= v191)
      {
        v198 = *(void (**)(_QWORD))(a2 + 32);
        if (v198)
        {
          v198(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v198) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v198) = (*(unsigned __int8 *)v198 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v199 = v197 | ((_DWORD)v198 << 6);
      v200 = (void (*)(_QWORD))(v190 + (v189 >> 3));
      if ((unint64_t)v200 >= v191)
      {
        v200 = *(void (**)(_QWORD))(a2 + 32);
        if (v200)
        {
          v200(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v200) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v200) = (*(unsigned __int8 *)v200 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v201 = v199 | (32 * (_DWORD)v200);
      v202 = (void (*)(_QWORD))(v190 + (v189 >> 3));
      if ((unint64_t)v202 >= v191)
      {
        v202 = *(void (**)(_QWORD))(a2 + 32);
        if (v202)
        {
          v202(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v202) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v202) = (*(unsigned __int8 *)v202 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v203 = v201 | (16 * (_DWORD)v202);
      v204 = (void (*)(_QWORD))(v190 + (v189 >> 3));
      if ((unint64_t)v204 >= v191)
      {
        v204 = *(void (**)(_QWORD))(a2 + 32);
        if (v204)
        {
          v204(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v204) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v204) = (*(unsigned __int8 *)v204 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v205 = v203 | (8 * (_DWORD)v204);
      v206 = (void (*)(_QWORD))(v190 + (v189 >> 3));
      if ((unint64_t)v206 >= v191)
      {
        v206 = *(void (**)(_QWORD))(a2 + 32);
        if (v206)
        {
          v206(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v206) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v206) = (*(unsigned __int8 *)v206 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v207 = v205 | (4 * (_DWORD)v206);
      v208 = (void (*)(_QWORD))(v190 + (v189 >> 3));
      if ((unint64_t)v208 >= v191)
      {
        v208 = *(void (**)(_QWORD))(a2 + 32);
        if (v208)
        {
          v208(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v208) = 0;
          LODWORD(v189) = *(_DWORD *)(a2 + 16);
          v190 = *(_QWORD *)a2;
          v191 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v208) = (*(unsigned __int8 *)v208 >> (~(_BYTE)v189 & 7)) & 1;
        LODWORD(v189) = v189 + 1;
        *v65 = v189;
      }
      v209 = v207 | (2 * (_DWORD)v208);
      v210 = (unsigned __int8 *)(v190 + (v189 >> 3));
      if ((unint64_t)v210 >= v191)
      {
        v212 = *(void (**)(_QWORD))(a2 + 32);
        if (v212)
        {
          v212(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
        }
        v211 = 0;
      }
      else
      {
        v211 = (*v210 >> (~(_BYTE)v189 & 7)) & 1;
        *v65 = v189 + 1;
      }
      v167 = v211 | v209;
    }
    *(_DWORD *)(v4 + 15236) = v167;
    *(_QWORD *)(v4 + 15440) = -1;
    *(_QWORD *)(v4 + 15448) = -1;
    *(_QWORD *)(v4 + 15456) = -1;
    *(_DWORD *)(v4 + 15464) = -1;
    goto LABEL_356;
  }
  if (v1980[4] != 1)
  {
    if (v165 == 3)
    {
      *(_DWORD *)(v4 + 15236) = 255;
      v172 = *v1982;
      v1992 = v5;
      v2003 = v4;
      if ((v172 & 0xFFFFFFFD) != 0)
        goto LABEL_393;
    }
    else
    {
      v193 = *(unsigned int *)(a2 + 16);
      v194 = *(_QWORD *)a2;
      v195 = *(_QWORD *)(a2 + 8);
      v196 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v193 >> 3));
      if ((unint64_t)v196 >= v195)
      {
        v196 = *(void (**)(_QWORD))(a2 + 32);
        if (v196)
        {
          v196(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v196) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v196) = (*(unsigned __int8 *)v196 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v213 = (_DWORD)v196 << 7;
      v214 = (void (*)(_QWORD))(v194 + (v193 >> 3));
      if ((unint64_t)v214 >= v195)
      {
        v214 = *(void (**)(_QWORD))(a2 + 32);
        if (v214)
        {
          v214(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v214) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v214) = (*(unsigned __int8 *)v214 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v215 = v213 | ((_DWORD)v214 << 6);
      v216 = (void (*)(_QWORD))(v194 + (v193 >> 3));
      if ((unint64_t)v216 >= v195)
      {
        v216 = *(void (**)(_QWORD))(a2 + 32);
        if (v216)
        {
          v216(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v216) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v216) = (*(unsigned __int8 *)v216 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v217 = v215 | (32 * (_DWORD)v216);
      v218 = (void (*)(_QWORD))(v194 + (v193 >> 3));
      if ((unint64_t)v218 >= v195)
      {
        v218 = *(void (**)(_QWORD))(a2 + 32);
        if (v218)
        {
          v218(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v218) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v218) = (*(unsigned __int8 *)v218 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v219 = v217 | (16 * (_DWORD)v218);
      v220 = (void (*)(_QWORD))(v194 + (v193 >> 3));
      if ((unint64_t)v220 >= v195)
      {
        v220 = *(void (**)(_QWORD))(a2 + 32);
        if (v220)
        {
          v220(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v220) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v220) = (*(unsigned __int8 *)v220 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v221 = v219 | (8 * (_DWORD)v220);
      v222 = (void (*)(_QWORD))(v194 + (v193 >> 3));
      if ((unint64_t)v222 >= v195)
      {
        v222 = *(void (**)(_QWORD))(a2 + 32);
        if (v222)
        {
          v222(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v222) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v222) = (*(unsigned __int8 *)v222 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v223 = v221 | (4 * (_DWORD)v222);
      v224 = (void (*)(_QWORD))(v194 + (v193 >> 3));
      if ((unint64_t)v224 >= v195)
      {
        v224 = *(void (**)(_QWORD))(a2 + 32);
        if (v224)
        {
          v224(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
          LODWORD(v224) = 0;
          LODWORD(v193) = *(_DWORD *)(a2 + 16);
          v194 = *(_QWORD *)a2;
          v195 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v224) = (*(unsigned __int8 *)v224 >> (~(_BYTE)v193 & 7)) & 1;
        LODWORD(v193) = v193 + 1;
        *v65 = v193;
      }
      v225 = v223 | (2 * (_DWORD)v224);
      v226 = (unsigned __int8 *)(v194 + (v193 >> 3));
      if ((unint64_t)v226 >= v195)
      {
        v228 = *(void (**)(_QWORD))(a2 + 32);
        if (v228)
        {
          v228(*(_QWORD *)(a2 + 24));
          v65 = (_DWORD *)(a2 + 16);
        }
        v227 = 0;
      }
      else
      {
        v227 = (*v226 >> (~(_BYTE)v193 & 7)) & 1;
        *v65 = v193 + 1;
      }
      *(_DWORD *)(v4 + 15236) = v227 | v225;
      v172 = *v1982;
      v1992 = v5;
      v2003 = v4;
      if ((v172 & 0xFFFFFFFD) != 0)
        goto LABEL_393;
    }
    goto LABEL_359;
  }
LABEL_358:
  v172 = *v1982;
  v1992 = v5;
  v2003 = v4;
  if ((v172 & 0xFFFFFFFD) != 0)
    goto LABEL_393;
LABEL_359:
  if (*(_DWORD *)(v4 + 15236) != 255)
  {
LABEL_393:
    if (!v1988[10] || !*(_DWORD *)(v166 + 40))
      goto LABEL_485;
    v229 = 0;
    v1983 = (int *)(v4 + 390860);
    v1976 = v8;
    while (1)
    {
      v230 = *(_DWORD *)(v166 + 44);
      if (v230 < 0)
      {
        v231 = 0;
        v2013 = (uint64_t *)(v4 + 8 * v229 + 15616);
        v238 = *v2013;
        if (!*v2013)
          goto LABEL_415;
      }
      else
      {
        v231 = 0;
        do
        {
          while (1)
          {
            v234 = *(unsigned int *)(a2 + 16);
            v235 = (unsigned __int8 *)(*(_QWORD *)a2 + (v234 >> 3));
            if ((unint64_t)v235 >= *(_QWORD *)(a2 + 8))
              break;
            v232 = (*v235 >> (~(_BYTE)v234 & 7)) & 1;
            *v65 = v234 + 1;
            v231 |= v232 << v230;
            v233 = v230-- + 1;
            if (v233 <= 1)
              goto LABEL_405;
          }
          v236 = *(void (**)(_QWORD))(a2 + 32);
          if (v236)
          {
            v236(*(_QWORD *)(a2 + 24));
            v65 = (_DWORD *)(a2 + 16);
          }
          v237 = v230-- + 1;
        }
        while (v237 > 1);
LABEL_405:
        v2013 = (uint64_t *)(v4 + 8 * v229 + 15616);
        v238 = *v2013;
        if (!*v2013)
        {
LABEL_415:
          v244 = *((_QWORD *)v5 + 74);
          v240 = *(_DWORD **)(v244 + 88);
          pthread_mutex_lock((pthread_mutex_t *)v244);
          v241 = (pthread_mutex_t *)*((_QWORD *)v5 + 74);
          v242 = v241[1].__opaque[24];
          if (!v241[1].__opaque[24])
            goto LABEL_412;
          goto LABEL_416;
        }
      }
      if (v231 == *(_DWORD *)(v238 + 4))
        goto LABEL_397;
      pthread_mutex_lock((pthread_mutex_t *)v8);
      v529 = (*(_DWORD *)v238)-- == 1;
      if (v529 && *(_QWORD *)(v238 + 1224))
      {
        (*(void (**)(_QWORD, uint64_t))(v8 + 80))(*(_QWORD *)(v8 + 64), v238 + 1224);
        *(_QWORD *)(v238 + 1232) = 0;
        *(_QWORD *)(v238 + 1240) = 0;
        *(_QWORD *)(v238 + 1224) = 0;
        v5 = v1992;
      }
      pthread_mutex_unlock((pthread_mutex_t *)v8);
      *v2013 = 0;
      v239 = *((_QWORD *)v5 + 74);
      v240 = *(_DWORD **)(v239 + 88);
      pthread_mutex_lock((pthread_mutex_t *)v239);
      v241 = (pthread_mutex_t *)*((_QWORD *)v5 + 74);
      v242 = v241[1].__opaque[24];
      if (!v241[1].__opaque[24])
      {
LABEL_412:
        LODWORD(v243) = 0;
        if (!(_DWORD)v242)
          goto LABEL_421;
        goto LABEL_423;
      }
LABEL_416:
      v243 = 0;
      v245 = v240;
      while (*v245)
      {
        v245 += 5682;
        if (v242 == ++v243)
          goto LABEL_421;
      }
      if ((_DWORD)v243 == (_DWORD)v242)
      {
LABEL_421:
        pthread_mutex_unlock(v241);
LABEL_422:
        aom_internal_error((uint64_t)v1983, 2, "Unable to find free frame buffer");
        LODWORD(v243) = -1;
        goto LABEL_426;
      }
LABEL_423:
      v246 = &v240[5682 * v243];
      if (v246[328])
      {
        v247 = &v240[5682 * v243];
        *(_OWORD *)(v247 + 322) = *(_OWORD *)(v247 + 330);
        *((_QWORD *)v247 + 163) = *((_QWORD *)v247 + 167);
        v246[328] = 0;
        v241 = (pthread_mutex_t *)*((_QWORD *)v5 + 74);
      }
      *v246 = 1;
      pthread_mutex_unlock(v241);
      if ((_DWORD)v243 == -1)
        goto LABEL_422;
LABEL_426:
      v248 = v9 + 22728 * (int)v243;
      pthread_mutex_lock((pthread_mutex_t *)v8);
      v249 = v248 + 1248;
      v1993 = (_DWORD *)v248;
      v250 = (_QWORD *)(v248 + 1224);
      LOBYTE(v1972) = 0;
      if (aom_realloc_frame_buffer(v249, *(_DWORD *)(v1989 + 8), *(_DWORD *)(v1989 + 12), *(_DWORD *)(v1989 + 96), *(_DWORD *)(v1989 + 100), *(unsigned __int8 *)(v1989 + 76), 288, *(_DWORD *)(v4 + 15712), v250, *(uint64_t (**)(uint64_t))(v8 + 72), *(_QWORD *)(v8 + 64), v1972, 0))
      {
        if (v9)
        {
          v529 = (*v1993)-- == 1;
          if (v529)
          {
            if (*v250)
            {
              (*(void (**)(_QWORD, _QWORD *))(v8 + 80))(*(_QWORD *)(v8 + 64), v250);
              v250[1] = 0;
              v250[2] = 0;
              *v250 = 0;
            }
          }
        }
        pthread_mutex_unlock((pthread_mutex_t *)v8);
        aom_internal_error((uint64_t)v1983, 2, "Failed to allocate frame buffer");
      }
      pthread_mutex_unlock((pthread_mutex_t *)v8);
      v1986 = v243;
      if (!*(_BYTE *)(v1989 + 76))
      {
        v261 = v9 + 22728 * (int)v243;
        v262 = (_DWORD *)(v261 + 1272);
        v263 = (_QWORD *)(v261 + 1288);
        v264 = (int *)(v261 + 1280);
        v265 = (int *)(v261 + 1264);
        if (*(int *)(v261 + 1272) >= 1)
        {
          v266 = 0;
          do
            memset((void *)(*v263 + *v264 * (uint64_t)v266++), 128, *v265);
          while (v266 < *v262);
        }
        if ((int)v262[1] >= 1)
        {
          v267 = 0;
          do
          {
            memset((void *)(v263[1] + v264[1] * (uint64_t)v267++), 128, v265[1]);
            v268 = v262[1];
          }
          while (v267 < v268);
          if (v268 >= 1)
          {
            v269 = 0;
            do
              memset((void *)(v263[2] + v264[1] * (uint64_t)v269++), 128, v265[1]);
            while (v269 < v262[1]);
          }
        }
        goto LABEL_396;
      }
      v251 = 1 << (*(_DWORD *)(v1989 + 72) - 1);
      v252 = v9 + 22728 * (int)v243;
      v253 = (int *)(v252 + 1272);
      v254 = (int *)(v252 + 1264);
      v255 = (_DWORD *)(v252 + 1280);
      v256 = *(_DWORD *)(v252 + 1272);
      if (v256 >= 1)
      {
        v257 = (__n128 *)(2 * *(_QWORD *)(v252 + 1288));
        v258 = *v254;
        if ((_DWORD)v258)
        {
          if (v258 < 0x10)
          {
            v259 = 0;
            v260 = (_WORD *)(2 * *(_QWORD *)(v252 + 1288));
            goto LABEL_451;
          }
          v259 = v258 & 0xFFFFFFFFFFFFFFF0;
          v260 = (_WORD *)v257 + (v258 & 0xFFFFFFFFFFFFFFF0);
          a3 = (__n128)vdupq_n_s16(v251);
          v270 = v257 + 1;
          v271 = v258 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v270[-1] = a3;
            *v270 = a3;
            v270 += 2;
            v271 -= 16;
          }
          while (v271);
          if (v259 != v258)
          {
LABEL_451:
            v272 = v258 - v259;
            do
            {
              *v260++ = v251;
              --v272;
            }
            while (v272);
          }
          v256 = *v253;
        }
        if (v256 > 1)
        {
          v273 = 1;
          do
            memcpy((char *)v257 + 2 * *v255 * v273++, v257, 2 * *v254);
          while (v273 < *v253);
        }
      }
      v274 = *(_DWORD *)(v252 + 1276);
      if (v274 >= 1)
      {
        v275 = v252 + 1288;
        v276 = (__n128 *)(2 * *(_QWORD *)(v275 + 8));
        v277 = v254[1];
        if ((_DWORD)v277)
        {
          if (v277 < 0x10)
          {
            v278 = 0;
            v279 = (_WORD *)(2 * *(_QWORD *)(v275 + 8));
            goto LABEL_464;
          }
          v278 = v277 & 0xFFFFFFFFFFFFFFF0;
          v279 = (_WORD *)v276 + (v277 & 0xFFFFFFFFFFFFFFF0);
          a3 = (__n128)vdupq_n_s16(v251);
          v280 = v276 + 1;
          v281 = v277 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v280[-1] = a3;
            *v280 = a3;
            v280 += 2;
            v281 -= 16;
          }
          while (v281);
          if (v278 != v277)
          {
LABEL_464:
            v282 = v277 - v278;
            do
            {
              *v279++ = v251;
              --v282;
            }
            while (v282);
          }
          v274 = v253[1];
        }
        if (v274 > 1)
        {
          for (k = 1; k < v274; ++k)
          {
            memcpy((char *)v276 + 2 * v255[1] * k, v276, 2 * v254[1]);
            v274 = v253[1];
          }
        }
        if (v274 < 1)
          goto LABEL_396;
        v284 = (__n128 *)(2 * *(_QWORD *)(v275 + 16));
        v285 = v254[1];
        if ((_DWORD)v285)
        {
          if (v285 < 0x10)
          {
            v286 = 0;
            v287 = (_WORD *)(2 * *(_QWORD *)(v275 + 16));
            goto LABEL_477;
          }
          v286 = v285 & 0xFFFFFFFFFFFFFFF0;
          v287 = (_WORD *)v284 + (v285 & 0xFFFFFFFFFFFFFFF0);
          a3 = (__n128)vdupq_n_s16(v251);
          v288 = v284 + 1;
          v289 = v285 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v288[-1] = a3;
            *v288 = a3;
            v288 += 2;
            v289 -= 16;
          }
          while (v289);
          if (v286 != v285)
          {
LABEL_477:
            v290 = v285 - v286;
            do
            {
              *v287++ = v251;
              --v290;
            }
            while (v290);
          }
          v274 = v253[1];
        }
        if (v274 >= 2)
        {
          v291 = 1;
          do
            memcpy((char *)v284 + 2 * v255[1] * v291++, v284, 2 * v254[1]);
          while (v291 < v253[1]);
        }
      }
LABEL_396:
      v4 = v2003;
      *(_DWORD *)(v2003 + 4 * v229 + 388864) = 1;
      v65 = (_DWORD *)(a2 + 16);
      v5 = v1992;
      *v2013 = (uint64_t)v1993;
      v8 = v1976;
      v9 = v1977;
      *(_DWORD *)(v1977 + 22728 * v1986 + 4) = v231;
      v166 = v1989;
LABEL_397:
      if (++v229 == 8)
      {
        v164 = v1982;
        v172 = *v1982;
        break;
      }
    }
  }
LABEL_485:
  if (!v172)
  {
    v295 = setup_frame_size_0((uint64_t)v164, v1974, (uint64_t *)a2);
    if (*v1973 && *(_DWORD *)(v4 + 15256) == *(_DWORD *)(v4 + 15272))
    {
      v296 = *(unsigned int *)(a2 + 16);
      v297 = (unsigned __int8 *)(*(_QWORD *)a2 + (v296 >> 3));
      if ((unint64_t)v297 >= *(_QWORD *)(a2 + 8))
      {
        v309 = *(void (**)(_QWORD, double))(a2 + 32);
        if (v309)
          v309(*(_QWORD *)(a2 + 24), v295);
        LOBYTE(v298) = 0;
      }
      else
      {
        v298 = (*v297 >> (~(_BYTE)v296 & 7)) & 1;
        *v2017 = v296 + 1;
      }
      v1988[4] = v298;
    }
    v1988[6] = 0;
    *(_QWORD *)(v4 + 15424) = 0;
    goto LABEL_991;
  }
  v1988[6] = 0;
  if (v172 == 2)
  {
    *(_BYTE *)(*(_QWORD *)(v4 + 15432) + 568) = *(_BYTE *)(v166 + 109);
    a3.n128_f64[0] = setup_frame_size_0((uint64_t)v164, v1974, (uint64_t *)a2);
    if (*v1973 && *(_DWORD *)(v4 + 15256) == *(_DWORD *)(v4 + 15272))
    {
      v292 = *(unsigned int *)(a2 + 16);
      v293 = (unsigned __int8 *)(*(_QWORD *)a2 + (v292 >> 3));
      if ((unint64_t)v293 >= *(_QWORD *)(a2 + 8))
      {
        v310 = *(void (**)(_QWORD, double))(a2 + 32);
        if (v310)
          v310(*(_QWORD *)(a2 + 24), a3.n128_f64[0]);
        LOBYTE(v294) = 0;
      }
      else
      {
        v294 = (*v293 >> (~(_BYTE)v292 & 7)) & 1;
        *v2017 = v292 + 1;
      }
      v1988[4] = v294;
    }
LABEL_510:
    v311 = *(_DWORD *)(v4 + 15708);
    if (v311 != 7)
      goto LABEL_867;
    goto LABEL_511;
  }
  if (v1980[4] == 1)
    goto LABEL_510;
  if (!*(_DWORD *)(v166 + 40))
    goto LABEL_514;
  v299 = *(unsigned int *)(a2 + 16);
  v300 = *(_QWORD *)a2;
  v301 = *(_QWORD *)(a2 + 8);
  v302 = (unsigned __int8 *)(*(_QWORD *)a2 + (v299 >> 3));
  if ((unint64_t)v302 < v301)
  {
    v303 = v65;
    v304 = *v302;
    v305 = v299 + 1;
    *v303 = v299 + 1;
    if (((v304 >> (~(_BYTE)v299 & 7)) & 1) != 0)
    {
      v306 = (unsigned __int8 *)(v300 + (v305 >> 3));
      if ((unint64_t)v306 >= v301)
      {
        v314 = *(void (**)(_QWORD))(a2 + 32);
        if (v314)
        {
          v314(*(_QWORD *)(a2 + 24));
          v307 = 0;
          v305 = *(_DWORD *)(a2 + 16);
          v300 = *(_QWORD *)a2;
          v301 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v307 = 0;
        }
        v308 = (unsigned int *)(a2 + 16);
      }
      else
      {
        v307 = (*v306 >> (~(_BYTE)v305 & 7)) & 1;
        v305 = v299 + 2;
        v308 = (unsigned int *)(a2 + 16);
        *v2017 = v299 + 2;
      }
      v328 = 4 * v307;
      v329 = (void (*)(_QWORD))(v300 + (v305 >> 3));
      if ((unint64_t)v329 >= v301)
      {
        v329 = *(void (**)(_QWORD))(a2 + 32);
        if (v329)
        {
          v329(*(_QWORD *)(a2 + 24));
          v308 = (unsigned int *)(a2 + 16);
          LODWORD(v329) = 0;
          v305 = *(_DWORD *)(a2 + 16);
          v300 = *(_QWORD *)a2;
          v301 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v329) = (*(unsigned __int8 *)v329 >> (~(_BYTE)v305++ & 7)) & 1;
        *v308 = v305;
      }
      v330 = v328 | (2 * (_DWORD)v329);
      v331 = (void (*)(_QWORD))(v300 + (v305 >> 3));
      if ((unint64_t)v331 >= v301)
      {
        v331 = *(void (**)(_QWORD))(a2 + 32);
        if (v331)
        {
          v331(*(_QWORD *)(a2 + 24));
          v308 = (unsigned int *)(a2 + 16);
          LODWORD(v331) = 0;
          v305 = *(_DWORD *)(a2 + 16);
          v300 = *(_QWORD *)a2;
          v301 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v331) = (*(unsigned __int8 *)v331 >> (~(_BYTE)v305++ & 7)) & 1;
        *v308 = v305;
      }
      v332 = v331 | v330;
      v333 = *(_QWORD *)(v4 + 8 * (v331 | v330) + 15616);
      v334 = (void (*)(_QWORD))(v300 + (v305 >> 3));
      if ((unint64_t)v334 >= v301)
      {
        v334 = *(void (**)(_QWORD))(a2 + 32);
        if (v334)
        {
          v334(*(_QWORD *)(a2 + 24));
          v308 = (unsigned int *)(a2 + 16);
          LODWORD(v334) = 0;
          v305 = *(_DWORD *)(a2 + 16);
          v300 = *(_QWORD *)a2;
          v301 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v334) = (*(unsigned __int8 *)v334 >> (~(_BYTE)v305++ & 7)) & 1;
        *v308 = v305;
      }
      v335 = 4 * (_DWORD)v334;
      v336 = (void (*)(_QWORD))(v300 + (v305 >> 3));
      if ((unint64_t)v336 >= v301)
      {
        v336 = *(void (**)(_QWORD))(a2 + 32);
        if (v336)
        {
          v336(*(_QWORD *)(a2 + 24));
          v308 = (unsigned int *)(a2 + 16);
          LODWORD(v336) = 0;
          v305 = *(_DWORD *)(a2 + 16);
          v300 = *(_QWORD *)a2;
          v301 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v336) = (*(unsigned __int8 *)v336 >> (~(_BYTE)v305++ & 7)) & 1;
        *v308 = v305;
      }
      v337 = v335 | (2 * (_DWORD)v336);
      v338 = (unsigned __int8 *)(v300 + (v305 >> 3));
      if ((unint64_t)v338 >= v301)
      {
        v340 = *(void (**)(_QWORD))(a2 + 32);
        if (v340)
          v340(*(_QWORD *)(a2 + 24));
        v339 = 0;
      }
      else
      {
        v339 = (*v338 >> (~(_BYTE)v305 & 7)) & 1;
        *v308 = v305 + 1;
      }
      v341 = v339 | v337;
      v342 = *(_QWORD *)(v4 + 8 * (v339 | v337) + 15616);
      if (!v333)
        aom_internal_error(v4 + 390860, 7, "Inter frame requests nonexistent reference");
      if (!v342)
        aom_internal_error(v4 + 390860, 7, "Inter frame requests nonexistent reference");
      av1_set_frame_refs((uint64_t)v1982, (_DWORD *)(v4 + 15440), v332, v341);
      v313 = 0;
    }
    else
    {
      v313 = 1;
    }
    v65 = (_DWORD *)(a2 + 16);
    goto LABEL_595;
  }
  v312 = *(void (**)(_QWORD))(a2 + 32);
  if (v312)
  {
    v312(*(_QWORD *)(a2 + 24));
    v65 = (_DWORD *)(a2 + 16);
    v313 = 1;
  }
  else
  {
LABEL_514:
    v313 = 1;
  }
LABEL_595:
  v343 = 0;
  v344 = v4 + 390860;
  do
  {
    if (!v313)
    {
      v354 = v4;
      v355 = *(int *)(v4 + 4 * v343 + 15440);
      if (*(_DWORD *)(v354 + 4 * v355 + 388864))
        goto LABEL_615;
LABEL_614:
      aom_internal_error(v344, 7, "Reference frame not valid for referencing");
      v65 = (_DWORD *)(a2 + 16);
      goto LABEL_615;
    }
    v345 = *(unsigned int *)(a2 + 16);
    v346 = *(_QWORD *)a2;
    v347 = *(_QWORD *)(a2 + 8);
    v348 = (unsigned __int8 *)(*(_QWORD *)a2 + (v345 >> 3));
    if ((unint64_t)v348 >= v347)
    {
      v356 = *(void (**)(_QWORD))(a2 + 32);
      if (v356)
      {
        v356(*(_QWORD *)(a2 + 24));
        v65 = (_DWORD *)(a2 + 16);
        v349 = 0;
        LODWORD(v345) = *(_DWORD *)(a2 + 16);
        v346 = *(_QWORD *)a2;
        v347 = *(_QWORD *)(a2 + 8);
        v350 = (unsigned __int8 *)(*(_QWORD *)a2 + (v345 >> 3));
        if ((unint64_t)v350 < v347)
          goto LABEL_600;
      }
      else
      {
        v349 = 0;
        v350 = (unsigned __int8 *)(v346 + (v345 >> 3));
        if ((unint64_t)v350 < v347)
        {
LABEL_600:
          v351 = (*v350 >> (~(_BYTE)v345 & 7)) & 1;
          LODWORD(v345) = v345 + 1;
          *v65 = v345;
          v352 = (unsigned __int8 *)(v346 + (v345 >> 3));
          if ((unint64_t)v352 < v347)
            goto LABEL_601;
          goto LABEL_608;
        }
      }
    }
    else
    {
      v349 = (*v348 >> (~(_BYTE)v345 & 7)) & 1;
      LODWORD(v345) = v345 + 1;
      *v65 = v345;
      v350 = (unsigned __int8 *)(v346 + (v345 >> 3));
      if ((unint64_t)v350 < v347)
        goto LABEL_600;
    }
    v357 = *(void (**)(_QWORD))(a2 + 32);
    if (v357)
    {
      v357(*(_QWORD *)(a2 + 24));
      v65 = (_DWORD *)(a2 + 16);
      v351 = 0;
      LODWORD(v345) = *(_DWORD *)(a2 + 16);
      v352 = (unsigned __int8 *)(*(_QWORD *)a2 + (v345 >> 3));
      if ((unint64_t)v352 < *(_QWORD *)(a2 + 8))
        goto LABEL_601;
    }
    else
    {
      v351 = 0;
      v352 = (unsigned __int8 *)(v346 + (v345 >> 3));
      if ((unint64_t)v352 < v347)
      {
LABEL_601:
        v353 = (*v352 >> (~(_BYTE)v345 & 7)) & 1;
        *v65 = v345 + 1;
        goto LABEL_611;
      }
    }
LABEL_608:
    v358 = *(void (**)(_QWORD))(a2 + 32);
    if (v358)
    {
      v358(*(_QWORD *)(a2 + 24));
      v65 = (_DWORD *)(a2 + 16);
    }
    v353 = 0;
LABEL_611:
    v355 = v353 | (4 * v349) | (2 * v351);
    v354 = v2003;
    if (!*(_QWORD *)(v2003 + 8 * v355 + 15616))
    {
      aom_internal_error(v344, 7, "Inter frame requests nonexistent reference");
      v65 = (_DWORD *)(a2 + 16);
    }
    *(_DWORD *)(v2003 + 4 * v343 + 15440) = v355;
    if (!*(_DWORD *)(v2003 + 4 * v355 + 388864))
      goto LABEL_614;
LABEL_615:
    ++v343;
    *(_DWORD *)(v354 + 4 * v343 + 40612) = 0;
    if (*(_BYTE *)(v1989 + 16))
    {
      v360 = *(_DWORD *)(v1989 + 20);
      v359 = *(_DWORD *)(v1989 + 24);
      if (v359 < 1)
      {
        v361 = 0;
      }
      else
      {
        v361 = 0;
        v362 = v359 + 1;
        do
        {
          while (1)
          {
            v364 = *(unsigned int *)(a2 + 16);
            v365 = (unsigned __int8 *)(*(_QWORD *)a2 + (v364 >> 3));
            if ((unint64_t)v365 >= *(_QWORD *)(a2 + 8))
              break;
            v363 = (*v365 >> (~(_BYTE)v364 & 7)) & 1;
            *v65 = v364 + 1;
            v361 |= v363 << (v362-- - 2);
            if (v362 <= 1)
              goto LABEL_625;
          }
          v366 = *(void (**)(_QWORD))(a2 + 32);
          if (v366)
          {
            v366(*(_QWORD *)(a2 + 24));
            v65 = (_DWORD *)(a2 + 16);
          }
          --v362;
        }
        while (v362 > 1);
      }
LABEL_625:
      v5 = v1992;
      if ((int)((1 << v360) + ~v361 + v1992[164]) % (1 << v360) != *(_DWORD *)(v2003 + 4 * v355 + 40564))
      {
        aom_internal_error(v344, 7, "Reference buffer frame ID mismatch");
        v65 = (_DWORD *)(a2 + 16);
      }
    }
    v4 = v2003;
  }
  while (v343 != 7);
  if (v1988[10] || !v1974)
  {
    v164 = v1982;
    a3.n128_f64[0] = setup_frame_size_0((uint64_t)v1982, v1974, (uint64_t *)a2);
    v372 = (_DWORD *)(a2 + 16);
    if (!v1988[2])
      goto LABEL_843;
    goto LABEL_847;
  }
  v367 = *(unsigned int *)(a2 + 16);
  v368 = (unsigned __int8 *)(*(_QWORD *)a2 + (v367 >> 3));
  v164 = v1982;
  if ((unint64_t)v368 >= *(_QWORD *)(a2 + 8))
  {
    v373 = *(void (**)(_QWORD))(a2 + 32);
    if (v373)
    {
      v373(*(_QWORD *)(a2 + 24));
LABEL_642:
      v65 = (_DWORD *)(a2 + 16);
    }
LABEL_643:
    v374 = *(unsigned int *)(a2 + 16);
    v375 = (unsigned __int8 *)(*(_QWORD *)a2 + (v374 >> 3));
    if ((unint64_t)v375 >= *(_QWORD *)(a2 + 8))
    {
      v378 = *(void (**)(_QWORD))(a2 + 32);
      if (!v378)
        goto LABEL_651;
      v378(*(_QWORD *)(a2 + 24));
    }
    else
    {
      v376 = *v375;
      *v65 = v374 + 1;
      if (((v376 >> (~(_BYTE)v374 & 7)) & 1) == 0)
        goto LABEL_651;
      v377 = *(int *)(v2003 + 15444);
      if ((_DWORD)v377 != -1)
      {
        v371 = *(_QWORD *)(v2003 + 8 * v377 + 15616);
        if (v371)
          goto LABEL_677;
      }
      aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
    }
    v65 = (_DWORD *)(a2 + 16);
LABEL_651:
    v379 = *(unsigned int *)(a2 + 16);
    v380 = (unsigned __int8 *)(*(_QWORD *)a2 + (v379 >> 3));
    if ((unint64_t)v380 >= *(_QWORD *)(a2 + 8))
    {
      v383 = *(void (**)(_QWORD))(a2 + 32);
      if (v383)
      {
        v383(*(_QWORD *)(a2 + 24));
LABEL_658:
        v65 = (_DWORD *)(a2 + 16);
      }
    }
    else
    {
      v381 = *v380;
      *v65 = v379 + 1;
      if (((v381 >> (~(_BYTE)v379 & 7)) & 1) != 0)
      {
        v382 = *(int *)(v2003 + 15448);
        if ((_DWORD)v382 != -1)
        {
          v371 = *(_QWORD *)(v2003 + 8 * v382 + 15616);
          if (v371)
            goto LABEL_677;
        }
        aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
        goto LABEL_658;
      }
    }
    v384 = *(unsigned int *)(a2 + 16);
    v385 = (unsigned __int8 *)(*(_QWORD *)a2 + (v384 >> 3));
    if ((unint64_t)v385 >= *(_QWORD *)(a2 + 8))
    {
      v388 = *(void (**)(_QWORD))(a2 + 32);
      if (v388)
        v388(*(_QWORD *)(a2 + 24));
    }
    else
    {
      v386 = *v385;
      *v65 = v384 + 1;
      if (((v386 >> (~(_BYTE)v384 & 7)) & 1) != 0)
      {
        v387 = *(int *)(v2003 + 15452);
        if ((_DWORD)v387 != -1)
        {
          v371 = *(_QWORD *)(v2003 + 8 * v387 + 15616);
          if (v371)
            goto LABEL_677;
        }
        aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
      }
    }
    if (aom_rb_read_bit(a2))
    {
      v389 = *(int *)(v2003 + 15456);
      if ((_DWORD)v389 != -1)
      {
        v371 = *(_QWORD *)(v2003 + 8 * v389 + 15616);
        if (v371)
          goto LABEL_677;
      }
      aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
    }
    if (aom_rb_read_bit(a2))
    {
      v390 = *(int *)(v2003 + 15460);
      if ((_DWORD)v390 != -1)
      {
        v371 = *(_QWORD *)(v2003 + 8 * v390 + 15616);
        if (v371)
          goto LABEL_677;
      }
      aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
    }
    if (aom_rb_read_bit(a2))
    {
      v391 = *(int *)(v2003 + 15464);
      if ((_DWORD)v391 != -1)
      {
        v371 = *(_QWORD *)(v2003 + 8 * v391 + 15616);
        if (v371)
          goto LABEL_677;
      }
      aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
    }
    v404 = *(int **)(v1985 + 312);
    v405 = v404[1];
    v392 = aom_rb_read_literal(a2, *v404) + 1;
    v393 = aom_rb_read_literal(a2, v405) + 1;
    *(_DWORD *)(v2003 + 15272) = v392;
    *(_DWORD *)(v2003 + 15276) = v393;
    if (*(_BYTE *)(*(_QWORD *)(v1985 + 312) + 66))
    {
      v164 = v1982;
      if (aom_rb_read_bit(a2))
      {
        literal = aom_rb_read_literal(a2, 3);
        v407 = (literal + 9);
        v1982[80] = literal + 9;
        if (v407 != 8)
        {
          if ((int)v392 >= 16)
            v408 = 16;
          else
            v408 = v392;
          v409 = (int)(8 * v392 + (v407 >> 1)) / (int)v407;
          if (v409 <= v408)
            v392 = v408;
          else
            v392 = v409;
        }
      }
      else
      {
        v1982[80] = 8;
      }
    }
    else
    {
      v164 = v1982;
    }
    resize_context_buffers_0((uint64_t)v164, v392, v393);
    *(_QWORD *)(v2003 + 15264) = *(_QWORD *)(v2003 + 15272);
    if (aom_rb_read_bit(a2))
    {
      *(_DWORD *)(v2003 + 15264) = aom_rb_read_literal(a2, 16) + 1;
      *(_DWORD *)(v2003 + 15268) = aom_rb_read_literal(a2, 16) + 1;
    }
    goto LABEL_718;
  }
  v369 = *v368;
  *v65 = v367 + 1;
  if (((v369 >> (~(_BYTE)v367 & 7)) & 1) == 0)
    goto LABEL_643;
  v370 = *(int *)(v2003 + 15440);
  if ((_DWORD)v370 == -1 || (v371 = *(_QWORD *)(v2003 + 8 * v370 + 15616)) == 0)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid condition: invalid reference buffer");
    goto LABEL_642;
  }
LABEL_677:
  v392 = *(unsigned int *)(v371 + 1264);
  v393 = *(unsigned int *)(v371 + 1272);
  *(_QWORD *)(v2003 + 15264) = *(_QWORD *)(v371 + 1412);
  *(_DWORD *)(v2003 + 15272) = v392;
  *(_DWORD *)(v2003 + 15276) = v393;
  if (*(_BYTE *)(*(_QWORD *)(v1985 + 312) + 66))
  {
    v394 = *(unsigned int *)(a2 + 16);
    v395 = *(_QWORD *)a2;
    v396 = *(_QWORD *)(a2 + 8);
    v397 = (unsigned __int8 *)(*(_QWORD *)a2 + (v394 >> 3));
    if ((unint64_t)v397 >= v396)
    {
      v403 = *(void (**)(_QWORD))(a2 + 32);
      if (v403)
        v403(*(_QWORD *)(a2 + 24));
    }
    else
    {
      v398 = *v397;
      v399 = v394 + 1;
      *v2017 = v394 + 1;
      if (((v398 >> (~(_BYTE)v394 & 7)) & 1) != 0)
      {
        v400 = (unsigned __int8 *)(v395 + (v399 >> 3));
        if ((unint64_t)v400 >= v396)
        {
          v410 = *(void (**)(_QWORD))(a2 + 32);
          if (v410)
          {
            v410(*(_QWORD *)(a2 + 24));
            v401 = 0;
            v399 = *(_DWORD *)(a2 + 16);
            v395 = *(_QWORD *)a2;
            v396 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            v401 = 0;
          }
          v402 = (unsigned int *)(a2 + 16);
        }
        else
        {
          v401 = (*v400 >> (~(_BYTE)v399 & 7)) & 1;
          v399 = v394 + 2;
          v402 = (unsigned int *)(a2 + 16);
          *v2017 = v394 + 2;
        }
        v411 = 4 * v401;
        v412 = (void (*)(_QWORD))(v395 + (v399 >> 3));
        if ((unint64_t)v412 >= v396)
        {
          v412 = *(void (**)(_QWORD))(a2 + 32);
          if (v412)
          {
            v412(*(_QWORD *)(a2 + 24));
            v402 = (unsigned int *)(a2 + 16);
            LODWORD(v412) = 0;
            v399 = *(_DWORD *)(a2 + 16);
            v395 = *(_QWORD *)a2;
            v396 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v412) = (*(unsigned __int8 *)v412 >> (~(_BYTE)v399++ & 7)) & 1;
          *v402 = v399;
        }
        v413 = v411 | (2 * (_DWORD)v412);
        v414 = (void (*)(_QWORD))(v395 + (v399 >> 3));
        if ((unint64_t)v414 >= v396)
        {
          v414 = *(void (**)(_QWORD))(a2 + 32);
          if (v414)
          {
            v414(*(_QWORD *)(a2 + 24));
            LODWORD(v414) = 0;
          }
        }
        else
        {
          LODWORD(v414) = (*(unsigned __int8 *)v414 >> (~(_BYTE)v399 & 7)) & 1;
          *v402 = v399 + 1;
        }
        v415 = (v414 | v413) + 9;
        v1982[80] = v415;
        if ((int)v392 >= 16)
          v416 = 16;
        else
          v416 = v392;
        v417 = (int)(8 * v392 + (v415 >> 1)) / (int)v415;
        if (v417 <= v416)
          v392 = v416;
        else
          v392 = v417;
        goto LABEL_717;
      }
    }
    v1982[80] = 8;
  }
LABEL_717:
  resize_context_buffers_0((uint64_t)v1982, v392, v393);
  v404 = *(int **)(v1985 + 312);
LABEL_718:
  v418 = (int)v392 < 1 || (int)v393 <= 0;
  if (v418)
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Invalid frame size");
  v419 = 2 * v392;
  v420 = 2 * v393;
  v421 = v2003 + 15616;
  v422 = *(_QWORD *)(v2003 + 15616 + 8 * *(int *)(v2003 + 15440));
  v423 = *(_DWORD *)(v422 + 1264);
  v424 = *(_DWORD *)(v422 + 1272);
  v425 = *(_QWORD *)(v2003 + 15616 + 8 * *(int *)(v2003 + 15444));
  v426 = *(_DWORD *)(v425 + 1264);
  v427 = *(_DWORD *)(v425 + 1272);
  v428 = 2 * (int)v392 < v426 || v420 < v427;
  v429 = 16 * v426;
  v430 = !v428 && (int)v392 <= v429;
  v431 = 16 * v427;
  v433 = v430 && (int)v393 <= v431;
  v434 = *(_QWORD *)(v421 + 8 * *(int *)(v2003 + 15448));
  v435 = *(_DWORD *)(v434 + 1264);
  v436 = *(_DWORD *)(v434 + 1272);
  v437 = v419 < v435 || v420 < v436;
  v438 = 16 * v435;
  v439 = !v437 && (int)v392 <= v438;
  v440 = 16 * v436;
  v442 = v439 && (int)v393 <= v440;
  v443 = *(_QWORD *)(v421 + 8 * *(int *)(v2003 + 15452));
  v444 = *(_DWORD *)(v443 + 1264);
  v445 = *(_DWORD *)(v443 + 1272);
  v446 = v419 < v444 || v420 < v445;
  v447 = 16 * v444;
  v448 = !v446 && (int)v392 <= v447;
  v449 = 16 * v445;
  v451 = v448 && (int)v393 <= v449;
  v452 = *(_QWORD *)(v421 + 8 * *(int *)(v2003 + 15456));
  v453 = *(_DWORD *)(v452 + 1264);
  v454 = *(_DWORD *)(v452 + 1272);
  v455 = v419 < v453 || v420 < v454;
  v456 = 16 * v453;
  v457 = !v455 && (int)v392 <= v456;
  v458 = 16 * v454;
  v460 = v457 && (int)v393 <= v458;
  v461 = *(_QWORD *)(v421 + 8 * *(int *)(v2003 + 15460));
  v462 = *(_DWORD *)(v461 + 1264);
  v463 = *(_DWORD *)(v461 + 1272);
  v464 = v419 < v462 || v420 < v463;
  v465 = 16 * v462;
  v466 = !v464 && (int)v392 <= v465;
  v467 = 16 * v463;
  v469 = v466 && (int)v393 <= v467;
  v470 = *(_QWORD *)(v421 + 8 * *(int *)(v2003 + 15464));
  v471 = *(_DWORD *)(v470 + 1264);
  v472 = *(_DWORD *)(v470 + 1272);
  v473 = v419 < v471 || v420 < v472;
  v474 = 16 * v471;
  v475 = !v473 && (int)v392 <= v474;
  v476 = 16 * v472;
  v478 = v475 && (int)v393 <= v476;
  v481 = 16 * v424 < (int)v393 || 16 * v423 < (int)v392 || v420 < v424 || v419 < v423;
  if (v481
    && (v433 & 1) == 0
    && (v442 & 1) == 0
    && (v451 & 1) == 0
    && (v460 & 1) == 0
    && (v469 & 1) == 0
    && (v478 & 1) == 0)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has invalid size");
  }
  v482 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15440) + 15616);
  v483 = v482[346];
  if (v483 != v404[18] || (v484 = v482[344], v484 != v404[24]) || (v485 = v482[345], v485 != v404[25]))
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
    v483 = v404[18];
    v484 = v404[24];
    v485 = v404[25];
  }
  v486 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15444) + 15616);
  if (v486[346] != v483 || v486[344] != v484 || v486[345] != v485)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
    v483 = v404[18];
    v484 = v404[24];
    v485 = v404[25];
  }
  v487 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15448) + 15616);
  if (v487[346] != v483 || v487[344] != v484 || v487[345] != v485)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
    v483 = v404[18];
    v484 = v404[24];
    v485 = v404[25];
  }
  v488 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15452) + 15616);
  if (v488[346] != v483 || v488[344] != v484 || v488[345] != v485)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
    v483 = v404[18];
    v484 = v404[24];
    v485 = v404[25];
  }
  v489 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15456) + 15616);
  if (v489[346] != v483 || v489[344] != v484 || v489[345] != v485)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
    v483 = v404[18];
    v484 = v404[24];
    v485 = v404[25];
  }
  v490 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15460) + 15616);
  if (v490[346] != v483 || v490[344] != v484 || v490[345] != v485)
  {
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
    v483 = v404[18];
    v484 = v404[24];
    v485 = v404[25];
  }
  v491 = *(_DWORD **)(v2003 + 8 * *(int *)(v2003 + 15464) + 15616);
  if (v491[346] != v483 || v491[344] != v484 || v491[345] != v485)
    aom_internal_error(*(_QWORD *)(v2003 + 15248), 7, "Referenced frame has incompatible color format");
  a3.n128_f64[0] = setup_buffer_pool((uint64_t)v164);
  v372 = (_DWORD *)(a2 + 16);
  if (!v1988[2])
  {
LABEL_843:
    v492 = *(unsigned int *)(a2 + 16);
    v493 = (unsigned __int8 *)(*(_QWORD *)a2 + (v492 >> 3));
    if ((unint64_t)v493 < *(_QWORD *)(a2 + 8))
    {
      v494 = (*v493 >> (~(_BYTE)v492 & 7)) & 1;
      *v372 = v492 + 1;
      goto LABEL_848;
    }
    v495 = *(void (**)(_QWORD, __n128))(a2 + 32);
    if (v495)
    {
      v495(*(_QWORD *)(a2 + 24), a3);
      v372 = (_DWORD *)(a2 + 16);
    }
  }
LABEL_847:
  LOBYTE(v494) = 0;
LABEL_848:
  v1988[1] = v494;
  v496 = *(unsigned int *)(a2 + 16);
  v497 = *(_QWORD *)a2;
  v498 = *(_QWORD *)(a2 + 8);
  v499 = (unsigned __int8 *)(*(_QWORD *)a2 + (v496 >> 3));
  if ((unint64_t)v499 >= v498)
  {
    v504 = *(void (**)(_QWORD, __n128))(a2 + 32);
    if (v504)
    {
      v504(*(_QWORD *)(a2 + 24), a3);
      v372 = (_DWORD *)(a2 + 16);
      LODWORD(v496) = *(_DWORD *)(a2 + 16);
      v497 = *(_QWORD *)a2;
      v498 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    v500 = ~(_BYTE)v496 & 7;
    v501 = *v499;
    LODWORD(v496) = v496 + 1;
    *v372 = v496;
    if (((v501 >> v500) & 1) != 0)
    {
      v1988[13] = 4;
      v502 = (unsigned __int8 *)(v497 + (v496 >> 3));
      if ((unint64_t)v502 >= v498)
        goto LABEL_851;
LABEL_866:
      v508 = (*v502 >> (~(_BYTE)v496 & 7)) & 1;
      *v372 = v496 + 1;
      v1988[11] = v508;
      v311 = *(_DWORD *)(v2003 + 15708);
      if (v311 != 7)
        goto LABEL_867;
LABEL_511:
      *(_QWORD *)(v4 + 15424) = 0;
      goto LABEL_870;
    }
  }
  v505 = (void (*)(_QWORD, __n128))(v497 + (v496 >> 3));
  if ((unint64_t)v505 >= v498)
  {
    v505 = *(void (**)(_QWORD, __n128))(a2 + 32);
    if (v505)
    {
      v505(*(_QWORD *)(a2 + 24), a3);
      v372 = (_DWORD *)(a2 + 16);
      LOBYTE(v505) = 0;
      LODWORD(v496) = *(_DWORD *)(a2 + 16);
      v497 = *(_QWORD *)a2;
      v498 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v505) = (*(unsigned __int8 *)v505 >> (~(_BYTE)v496 & 7)) & 1;
    LODWORD(v496) = v496 + 1;
    *v372 = v496;
  }
  v506 = 2 * (_BYTE)v505;
  v507 = (void (*)(_QWORD, __n128))(v497 + (v496 >> 3));
  if ((unint64_t)v507 >= v498)
  {
    v507 = *(void (**)(_QWORD, __n128))(a2 + 32);
    if (v507)
    {
      v507(*(_QWORD *)(a2 + 24), a3);
      v372 = (_DWORD *)(a2 + 16);
      LOBYTE(v507) = 0;
      LODWORD(v496) = *(_DWORD *)(a2 + 16);
      v497 = *(_QWORD *)a2;
      v498 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v507) = (*(unsigned __int8 *)v507 >> (~(_BYTE)v496 & 7)) & 1;
    LODWORD(v496) = v496 + 1;
    *v372 = v496;
  }
  v1988[13] = v507 | v506;
  v502 = (unsigned __int8 *)(v497 + (v496 >> 3));
  if ((unint64_t)v502 < v498)
    goto LABEL_866;
LABEL_851:
  v503 = *(void (**)(_QWORD, __n128))(a2 + 32);
  if (v503)
    v503(*(_QWORD *)(a2 + 24), a3);
  v1988[11] = 0;
  v311 = *(_DWORD *)(v2003 + 15708);
  if (v311 == 7)
    goto LABEL_511;
LABEL_867:
  if ((v311 & 0xF8) != 0 || (v523 = *(int *)(v4 + 4 * v311 + 15440), (_DWORD)v523 == -1))
  {
    *(_QWORD *)(v4 + 15424) = 0;
  }
  else
  {
    v524 = v4 + 8 * v523;
    *(_QWORD *)(v4 + 15424) = *(_QWORD *)(v524 + 15616);
    if (*(_QWORD *)(v524 + 15616))
      goto LABEL_870;
  }
  aom_internal_error(v4 + 390860, 7, "Reference frame containing this frame's initial frame context is unavailable.", a3.n128_f64[0]);
LABEL_870:
  v509 = *v164;
  if (v509 == 2 || v1980[4] == 1)
    goto LABEL_991;
  if (v1988[10])
  {
    LOBYTE(v510) = 0;
  }
  else
  {
    v885 = *(_QWORD *)(v1985 + 312);
    v510 = *(_DWORD *)(v885 + 52);
    if (v510)
    {
      LOBYTE(v510) = 0;
      if ((v509 & 0xFFFFFFFD) != 0)
      {
        if (*(_DWORD *)(v885 + 40))
          LOBYTE(v510) = aom_rb_read_bit(a2) != 0;
      }
    }
  }
  v1988[6] = v510;
  v511 = *(_DWORD *)(v4 + 15440);
  v512 = *(_QWORD *)(v4 + 15200 + 8 * v511 + 416);
  v513 = v4 + 15200 + 16 * v511 + 288;
  v514 = *(_DWORD *)(v512 + 1264);
  v515 = *(_DWORD *)(v512 + 1272);
  v516 = *(_DWORD *)(v4 + 15256);
  v517 = *(_DWORD *)(v4 + 15260);
  v518 = 2 * v516;
  v519 = 2 * v517;
  if (2 * v516 < v514 || v519 < v515 || 16 * v514 < v516 || 16 * v515 < v517)
  {
    *(_QWORD *)v513 = -1;
LABEL_900:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions");
    v516 = *(_DWORD *)(v4 + 15256);
    v517 = *(_DWORD *)(v4 + 15260);
    v518 = 2 * v516;
    v519 = 2 * v517;
    goto LABEL_901;
  }
  if (v516 >= 0)
    v525 = *(_DWORD *)(v4 + 15256);
  else
    v525 = v516 + 1;
  v526 = ((v525 >> 1) + (v514 << 14)) / v516;
  if (v517 >= 0)
    v527 = *(_DWORD *)(v4 + 15260);
  else
    v527 = v517 + 1;
  v528 = ((v527 >> 1) + (v515 << 14)) / v517;
  *(_DWORD *)(v513 + 8) = (v526 + 8) >> 4;
  *(_DWORD *)(v513 + 12) = (v528 + 8) >> 4;
  *(_DWORD *)v513 = v526;
  *(_DWORD *)(v513 + 4) = v528;
  v529 = v526 == -1 || v528 == -1;
  if (v529)
    goto LABEL_900;
LABEL_901:
  v530 = *(_DWORD *)(v4 + 15444);
  v531 = *(_QWORD *)(v4 + 15200 + 8 * v530 + 416);
  v532 = v4 + 15200 + 16 * v530 + 288;
  v533 = *(_DWORD *)(v531 + 1264);
  if (v518 < v533 || (v534 = *(_DWORD *)(v531 + 1272), v519 < v534) || 16 * v533 < v516 || 16 * v534 < v517)
  {
    a3.n128_u64[0] = -1;
    *(_QWORD *)v532 = -1;
    goto LABEL_915;
  }
  if (v516 >= 0)
    v535 = v516;
  else
    v535 = v516 + 1;
  v536 = ((v535 >> 1) + (v533 << 14)) / v516;
  if (v517 >= 0)
    v537 = v517;
  else
    v537 = v517 + 1;
  v538 = ((v537 >> 1) + (v534 << 14)) / v517;
  *(_DWORD *)(v532 + 8) = (v536 + 8) >> 4;
  *(_DWORD *)(v532 + 12) = (v538 + 8) >> 4;
  *(_DWORD *)v532 = v536;
  *(_DWORD *)(v532 + 4) = v538;
  if (v536 == -1 || v538 == -1)
  {
LABEL_915:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions", a3.n128_f64[0]);
    v516 = *(_DWORD *)(v4 + 15256);
    v517 = *(_DWORD *)(v4 + 15260);
    v518 = 2 * v516;
    v519 = 2 * v517;
  }
  v539 = *(_DWORD *)(v4 + 15448);
  v540 = *(_QWORD *)(v4 + 15200 + 8 * v539 + 416);
  v541 = v4 + 15200 + 16 * v539 + 288;
  v542 = *(_DWORD *)(v540 + 1264);
  if (v518 < v542 || (v543 = *(_DWORD *)(v540 + 1272), v519 < v543) || 16 * v542 < v516 || 16 * v543 < v517)
  {
    *(_QWORD *)v541 = -1;
    goto LABEL_930;
  }
  if (v516 >= 0)
    v544 = v516;
  else
    v544 = v516 + 1;
  v545 = ((v544 >> 1) + (v542 << 14)) / v516;
  if (v517 >= 0)
    v546 = v517;
  else
    v546 = v517 + 1;
  v547 = ((v546 >> 1) + (v543 << 14)) / v517;
  *(_DWORD *)(v541 + 8) = (v545 + 8) >> 4;
  *(_DWORD *)(v541 + 12) = (v547 + 8) >> 4;
  *(_DWORD *)v541 = v545;
  *(_DWORD *)(v541 + 4) = v547;
  if (v545 == -1 || v547 == -1)
  {
LABEL_930:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions");
    v516 = *(_DWORD *)(v4 + 15256);
    v517 = *(_DWORD *)(v4 + 15260);
    v518 = 2 * v516;
    v519 = 2 * v517;
  }
  v548 = *(_DWORD *)(v4 + 15452);
  v549 = *(_QWORD *)(v4 + 15200 + 8 * v548 + 416);
  v550 = v4 + 15200 + 16 * v548 + 288;
  v551 = *(_DWORD *)(v549 + 1264);
  if (v518 < v551 || (v552 = *(_DWORD *)(v549 + 1272), v519 < v552) || 16 * v551 < v516 || 16 * v552 < v517)
  {
    *(_QWORD *)v550 = -1;
    goto LABEL_945;
  }
  if (v516 >= 0)
    v553 = v516;
  else
    v553 = v516 + 1;
  v554 = ((v553 >> 1) + (v551 << 14)) / v516;
  if (v517 >= 0)
    v555 = v517;
  else
    v555 = v517 + 1;
  v556 = ((v555 >> 1) + (v552 << 14)) / v517;
  *(_DWORD *)(v550 + 8) = (v554 + 8) >> 4;
  *(_DWORD *)(v550 + 12) = (v556 + 8) >> 4;
  *(_DWORD *)v550 = v554;
  *(_DWORD *)(v550 + 4) = v556;
  if (v554 == -1 || v556 == -1)
  {
LABEL_945:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions");
    v516 = *(_DWORD *)(v4 + 15256);
    v517 = *(_DWORD *)(v4 + 15260);
    v518 = 2 * v516;
    v519 = 2 * v517;
  }
  v557 = *(_DWORD *)(v4 + 15456);
  v558 = *(_QWORD *)(v4 + 15200 + 8 * v557 + 416);
  v559 = v4 + 15200 + 16 * v557 + 288;
  v560 = *(_DWORD *)(v558 + 1264);
  if (v518 < v560 || (v561 = *(_DWORD *)(v558 + 1272), v519 < v561) || 16 * v560 < v516 || 16 * v561 < v517)
  {
    *(_QWORD *)v559 = -1;
    goto LABEL_960;
  }
  if (v516 >= 0)
    v562 = v516;
  else
    v562 = v516 + 1;
  v563 = ((v562 >> 1) + (v560 << 14)) / v516;
  if (v517 >= 0)
    v564 = v517;
  else
    v564 = v517 + 1;
  v565 = ((v564 >> 1) + (v561 << 14)) / v517;
  *(_DWORD *)(v559 + 8) = (v563 + 8) >> 4;
  *(_DWORD *)(v559 + 12) = (v565 + 8) >> 4;
  *(_DWORD *)v559 = v563;
  *(_DWORD *)(v559 + 4) = v565;
  if (v563 == -1 || v565 == -1)
  {
LABEL_960:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions");
    v516 = *(_DWORD *)(v4 + 15256);
    v517 = *(_DWORD *)(v4 + 15260);
    v518 = 2 * v516;
    v519 = 2 * v517;
  }
  v566 = *(_DWORD *)(v4 + 15460);
  v567 = *(_QWORD *)(v4 + 15200 + 8 * v566 + 416);
  v568 = v4 + 15200 + 16 * v566 + 288;
  v569 = *(_DWORD *)(v567 + 1264);
  if (v518 < v569 || (v570 = *(_DWORD *)(v567 + 1272), v519 < v570) || 16 * v569 < v516 || 16 * v570 < v517)
  {
    *(_QWORD *)v568 = -1;
    goto LABEL_975;
  }
  if (v516 >= 0)
    v571 = v516;
  else
    v571 = v516 + 1;
  v572 = ((v571 >> 1) + (v569 << 14)) / v516;
  if (v517 >= 0)
    v573 = v517;
  else
    v573 = v517 + 1;
  v574 = ((v573 >> 1) + (v570 << 14)) / v517;
  *(_DWORD *)(v568 + 8) = (v572 + 8) >> 4;
  *(_DWORD *)(v568 + 12) = (v574 + 8) >> 4;
  *(_DWORD *)v568 = v572;
  *(_DWORD *)(v568 + 4) = v574;
  if (v572 == -1 || v574 == -1)
  {
LABEL_975:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions");
    v516 = *(_DWORD *)(v4 + 15256);
    v517 = *(_DWORD *)(v4 + 15260);
    v518 = 2 * v516;
    v519 = 2 * v517;
  }
  v575 = *(_DWORD *)(v4 + 15464);
  v576 = *(_QWORD *)(v4 + 15200 + 8 * v575 + 416);
  v577 = v4 + 15200 + 16 * v575 + 288;
  v578 = *(_DWORD *)(v576 + 1264);
  if (v518 < v578 || (v579 = *(_DWORD *)(v576 + 1272), v519 < v579) || 16 * v578 < v516 || 16 * v579 < v517)
  {
    *(_QWORD *)v577 = -1;
    goto LABEL_990;
  }
  if (v516 >= 0)
    v580 = v516;
  else
    v580 = v516 + 1;
  v581 = ((v580 >> 1) + (v578 << 14)) / v516;
  if (v517 >= 0)
    v582 = v517;
  else
    v582 = v517 + 1;
  v583 = ((v582 >> 1) + (v579 << 14)) / v517;
  *(_DWORD *)(v577 + 8) = (v581 + 8) >> 4;
  *(_DWORD *)(v577 + 12) = (v583 + 8) >> 4;
  *(_DWORD *)v577 = v581;
  *(_DWORD *)(v577 + 4) = v583;
  if (v581 == -1 || v583 == -1)
LABEL_990:
    aom_internal_error(v4 + 390860, 5, "Reference frame has invalid dimensions");
LABEL_991:
  av1_setup_frame_buf_refs((uint64_t)v164);
  av1_setup_frame_sign_bias((uint64_t)v164);
  v584 = *(_QWORD *)(v4 + 15432);
  *(_BYTE *)(v584 + 1448) = *v164;
  v585 = *(_DWORD *)(v4 + 15236);
  if ((v585 & 1) != 0)
  {
    v5[165] = v5[164];
    *(_DWORD *)(v1975 + 16) = 1;
    if ((v585 & 2) != 0)
      goto LABEL_1002;
LABEL_993:
    v586 = (_DWORD *)(a2 + 16);
    if ((v585 & 4) == 0)
      goto LABEL_994;
LABEL_1003:
    v5[167] = v5[164];
    *(_DWORD *)(v1975 + 24) = 1;
    if ((v585 & 8) != 0)
      goto LABEL_1004;
LABEL_995:
    if ((v585 & 0x10) == 0)
      goto LABEL_996;
LABEL_1005:
    v5[169] = v5[164];
    *(_DWORD *)(v1975 + 32) = 1;
    if ((v585 & 0x20) != 0)
      goto LABEL_1006;
LABEL_997:
    if ((v585 & 0x40) == 0)
      goto LABEL_998;
LABEL_1007:
    v5[171] = v5[164];
    *(_DWORD *)(v1975 + 40) = 1;
    if ((v585 & 0x80) != 0)
      goto LABEL_1008;
LABEL_999:
    if (*(_BYTE *)(v1989 + 58))
      goto LABEL_1010;
LABEL_1009:
    if (*v1988)
      goto LABEL_1010;
    v663 = *(unsigned int *)(a2 + 16);
    v664 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v663 >> 3));
    if ((unint64_t)v664 >= *(_QWORD *)(a2 + 8))
    {
      v664 = *(void (**)(_QWORD))(a2 + 32);
      if (v664)
      {
        v664(*(_QWORD *)(a2 + 24));
        LODWORD(v664) = 0;
        v584 = *(_QWORD *)(v4 + 15432);
      }
    }
    else
    {
      LODWORD(v664) = (*(unsigned __int8 *)v664 >> (~(_BYTE)v663 & 7)) & 1;
      *v586 = v663 + 1;
    }
    v587 = (_DWORD)v664 == 0;
  }
  else
  {
    if ((v585 & 2) == 0)
      goto LABEL_993;
LABEL_1002:
    v5[166] = v5[164];
    *(_DWORD *)(v1975 + 20) = 1;
    v586 = (_DWORD *)(a2 + 16);
    if ((v585 & 4) != 0)
      goto LABEL_1003;
LABEL_994:
    if ((v585 & 8) == 0)
      goto LABEL_995;
LABEL_1004:
    v5[168] = v5[164];
    *(_DWORD *)(v1975 + 28) = 1;
    if ((v585 & 0x10) != 0)
      goto LABEL_1005;
LABEL_996:
    if ((v585 & 0x20) == 0)
      goto LABEL_997;
LABEL_1006:
    v5[170] = v5[164];
    *(_DWORD *)(v1975 + 36) = 1;
    if ((v585 & 0x40) != 0)
      goto LABEL_1007;
LABEL_998:
    if ((v585 & 0x80) == 0)
      goto LABEL_999;
LABEL_1008:
    v5[172] = v5[164];
    *(_DWORD *)(v1975 + 44) = 1;
    if (!*(_BYTE *)(v1989 + 58))
      goto LABEL_1009;
LABEL_1010:
    v587 = 0;
  }
  v1988[24] = v587;
  *(_DWORD *)(v584 + 1384) = *(_DWORD *)(v1989 + 72);
  *(_QWORD *)(v584 + 1388) = *(_QWORD *)(v1989 + 80);
  v588 = *(_DWORD *)(v1989 + 92);
  *(_DWORD *)(v584 + 1396) = *(_DWORD *)(v1989 + 88);
  *(_BYTE *)(v584 + 1400) = *(_BYTE *)(v1989 + 77);
  *(_DWORD *)(v584 + 1404) = *(_DWORD *)(v1989 + 104);
  v1987 = (_DWORD *)(v4 + 38776);
  *(_DWORD *)(v584 + 1408) = v588;
  *(_QWORD *)(v584 + 1412) = *(_QWORD *)(v4 + 15264);
  if (v1980[4])
    aom_internal_error(v4 + 390860, 7, "Keyframe / intra-only frame required to reset decoder state");
  v1984 = (int *)(v4 + 39044);
  v1978 = (_BYTE *)(v4 + 10752);
  if (v1988[4])
  {
    *(_QWORD *)v1981 = 0;
    *(_DWORD *)(v4 + 38904) = 0;
    *(_QWORD *)(v1981 + 548) = 1;
    *(_DWORD *)(v4 + 38840) = 0;
    *(_DWORD *)(v1981 + 32) = 0;
    *(_DWORD *)(v1981 + 96) = 0;
    *(_DWORD *)(v1981 + 160) = 0;
  }
  v1994 = (unsigned __int8 *)(v4 + 34176);
  v589 = *(_QWORD *)(v1985 + 312);
  v590 = *(_DWORD *)(v589 + 36);
  v591 = -1;
  v592 = ~(-1 << v590);
  v593 = *(_DWORD *)(v4 + 15732) + v592;
  v594 = (*(_DWORD *)(v4 + 15736) + v592) >> v590;
  v595 = v590 + 2;
  v596 = 0x1000u >> (v590 + 2);
  v5[2] = v596;
  v597 = v1989;
  do
    ++v591;
  while ((int)(v596 << v591) < v594);
  v598 = v593 >> v590;
  v5[10] = v591;
  if (v594 >= 64)
    v599 = 64;
  else
    v599 = v594;
  v600 = -1;
  do
    ++v600;
  while (1 << v600 < v599);
  v5[12] = v600;
  if (v598 >= 64)
    v601 = 64;
  else
    v601 = v598;
  v602 = -1;
  do
    ++v602;
  while (1 << v602 < v601);
  v603 = 0x900000u >> (2 * v595);
  v5[13] = v602;
  v604 = -1;
  do
    ++v604;
  while ((int)(v603 << v604) < v594 * v598);
  if (v604 <= v591)
    v605 = v591;
  else
    v605 = v604;
  v5[14] = v605;
  v606 = *(unsigned int *)(a2 + 16);
  v607 = *(_QWORD *)a2;
  v608 = *(_QWORD *)(a2 + 8);
  v609 = (unsigned __int8 *)(*(_QWORD *)a2 + (v606 >> 3));
  if ((unint64_t)v609 >= v608)
  {
    v616 = *(void (**)(_QWORD))(a2 + 32);
    if (v616)
      v616(*(_QWORD *)(a2 + 24));
    v5[5] = 0;
  }
  else
  {
    v610 = *v609 >> (~(_BYTE)v606 & 7);
    v611 = v606 + 1;
    *v2017 = v611;
    v5[5] = v610 & 1;
    if ((v610 & 1) != 0)
    {
      v5[6] = v591;
      v612 = (uint64_t)v1982;
      if (v591 < v600)
      {
        while (1)
        {
          v613 = (unsigned __int8 *)(v607 + (v611 >> 3));
          if ((unint64_t)v613 >= v608)
            break;
          v614 = ~(_BYTE)v611 & 7;
          v615 = *v613;
          *v2017 = ++v611;
          if (((v615 >> v614) & 1) != 0)
          {
            v5[6] = ++v591;
            if (v591 < v600)
              continue;
          }
          goto LABEL_1071;
        }
        v896 = *(void (**)(_QWORD))(a2 + 32);
        if (v896)
          v896(*(_QWORD *)(a2 + 24));
      }
      goto LABEL_1071;
    }
  }
  if (v594 < 1)
  {
    v634 = 0;
    v618 = 0;
  }
  else
  {
    v2014 = v589;
    v617 = 0;
    v618 = 0;
    v619 = (_DWORD *)(a2 + 16);
    do
    {
      v620 = 0;
      if (v594 >= (int)v1992[2])
        v621 = v1992[2];
      else
        v621 = v594;
      v622 = __clz(v621) ^ 0x1F;
      if (v621)
        v623 = v622 + 1;
      else
        v623 = 0;
      if (v623 >= 2)
      {
        v620 = 0;
        for (m = v623; m > 1; --m)
        {
          while (1)
          {
            v626 = *(unsigned int *)(a2 + 16);
            v627 = (unsigned __int8 *)(*(_QWORD *)a2 + (v626 >> 3));
            if ((unint64_t)v627 >= *(_QWORD *)(a2 + 8))
              break;
            v625 = (*v627 >> (~(_BYTE)v626 & 7)) & 1;
            *v619 = v626 + 1;
            v620 |= v625 << (m-- - 2);
            if (m <= 1)
              goto LABEL_1057;
          }
          v628 = *(void (**)(_QWORD))(a2 + 32);
          if (v628)
          {
            v628(*(_QWORD *)(a2 + 24));
            v619 = (_DWORD *)(a2 + 16);
          }
        }
      }
LABEL_1057:
      v629 = (1 << v623) - v621;
      if (v620 >= v629)
      {
        v630 = *(unsigned int *)(a2 + 16);
        v631 = (unsigned __int8 *)(*(_QWORD *)a2 + (v630 >> 3));
        v4 = v2003;
        if ((unint64_t)v631 >= *(_QWORD *)(a2 + 8))
        {
          v633 = *(void (**)(_QWORD))(a2 + 32);
          if (v633)
          {
            v633(*(_QWORD *)(a2 + 24));
            v619 = (_DWORD *)(a2 + 16);
          }
          v632 = 0;
        }
        else
        {
          v632 = (*v631 >> (~(_BYTE)v630 & 7)) & 1;
          *v619 = v630 + 1;
        }
        v620 = 2 * v620 - v629 + v632;
      }
      else
      {
        v4 = v2003;
      }
      *(_DWORD *)(v4 + 4 * v617 + 39964) = v618;
      v618 += v620 + 1;
      v594 -= v620 + 1;
      v634 = v617 + 1;
      if (v594 < 1)
        break;
      v635 = v617++ >= 0x3F;
    }
    while (!v635);
    v5 = v1992;
    v589 = v2014;
  }
  *v5 = v634;
  *(_DWORD *)(v4 + 4 * v634 + 39964) = v618 + v594;
  v612 = (uint64_t)v1982;
  v597 = v1989;
LABEL_1071:
  av1_calculate_tile_cols(v589, *(_DWORD *)(v4 + 15732), *(_DWORD *)(v4 + 15736), v5);
  if (v5[5])
  {
    v636 = v5[11];
    v5[7] = v636;
    v637 = v5[13];
    if (v636 < v637)
    {
      v638 = *(_QWORD *)a2;
      v639 = *(_QWORD *)(a2 + 8);
      v640 = *(_DWORD *)(a2 + 16);
      while (1)
      {
        v641 = (unsigned __int8 *)(v638 + (v640 >> 3));
        if ((unint64_t)v641 >= v639)
          break;
        v642 = ~(_BYTE)v640 & 7;
        v643 = *v641;
        *v2017 = ++v640;
        if (((v643 >> v642) & 1) != 0)
        {
          v5[7] = ++v636;
          if (v636 < v637)
            continue;
        }
        goto LABEL_1109;
      }
      v789 = *(void (**)(_QWORD))(a2 + 32);
      if (v789)
        v789(*(_QWORD *)(a2 + 24));
    }
  }
  else
  {
    if (v598 < 1)
    {
      v662 = 0;
      v645 = 0;
    }
    else
    {
      v2015 = v589;
      v644 = 0;
      v645 = 0;
      v646 = (_DWORD *)(a2 + 16);
      do
      {
        v647 = 0;
        if (v598 >= (int)v5[3])
          v648 = v5[3];
        else
          v648 = v598;
        v649 = __clz(v648) ^ 0x1F;
        if (v648)
          v650 = v649 + 1;
        else
          v650 = 0;
        if (v650 >= 2)
        {
          v647 = 0;
          for (n = v650; n > 1; --n)
          {
            while (1)
            {
              v653 = *(unsigned int *)(a2 + 16);
              v654 = (unsigned __int8 *)(*(_QWORD *)a2 + (v653 >> 3));
              if ((unint64_t)v654 >= *(_QWORD *)(a2 + 8))
                break;
              v652 = (*v654 >> (~(_BYTE)v653 & 7)) & 1;
              *v646 = v653 + 1;
              v647 |= v652 << (n-- - 2);
              if (n <= 1)
                goto LABEL_1093;
            }
            v655 = *(void (**)(_QWORD))(a2 + 32);
            if (v655)
            {
              v655(*(_QWORD *)(a2 + 24));
              v646 = (_DWORD *)(a2 + 16);
            }
          }
        }
LABEL_1093:
        v656 = (1 << v650) - v648;
        if (v647 >= v656)
        {
          v657 = *(unsigned int *)(a2 + 16);
          v658 = (unsigned __int8 *)(*(_QWORD *)a2 + (v657 >> 3));
          if ((unint64_t)v658 >= *(_QWORD *)(a2 + 8))
          {
            v660 = *(void (**)(_QWORD))(a2 + 32);
            if (v660)
            {
              v660(*(_QWORD *)(a2 + 24));
              v646 = (_DWORD *)(a2 + 16);
            }
            v659 = 0;
          }
          else
          {
            v659 = (*v658 >> (~(_BYTE)v657 & 7)) & 1;
            *v646 = v657 + 1;
          }
          v5 = v1992;
          v647 = 2 * v647 - v656 + v659;
        }
        else
        {
          v5 = v1992;
        }
        v661 = v647 + 1;
        v4 = v2003;
        *(_DWORD *)(v2003 + 4 * v644 + 40224) = v645;
        v645 += v661;
        v598 -= v661;
        v662 = v644 + 1;
        if (v598 < 1)
          break;
        v635 = v644++ >= 0x3F;
      }
      while (!v635);
      v597 = v1989;
      v589 = v2015;
    }
    v5[1] = v662;
    *(_DWORD *)(v4 + 4 * v662 + 40224) = v645 + v598;
    v612 = (uint64_t)v1982;
  }
LABEL_1109:
  if (v5[5])
  {
    v665 = *(_DWORD *)(v4 + 15732);
    v666 = (v665 + (1 << *(_DWORD *)(v589 + 36)) - 1) >> *(_DWORD *)(v589 + 36);
    v667 = v5[7];
    v668 = (v666 + (1 << v667) - 1) >> v667;
    if (v666 < 1)
    {
      LODWORD(v671) = 0;
    }
    else
    {
      if ((int)v668 <= v666)
        v669 = (v665 + (1 << *(_DWORD *)(v589 + 36)) - 1) >> *(_DWORD *)(v589 + 36);
      else
        v669 = (v666 + (1 << v667) - 1) >> v667;
      v670 = (v669 - 1) / v668;
      v671 = v670 + 1;
      if (v670 < 7)
      {
        v672 = 0;
        v673 = 0;
        goto LABEL_1124;
      }
      v672 = v671 & 0xFFFFFFF8;
      v673 = v668 * (v671 & 0xFFFFFFF8);
      v677 = vmulq_s32(vdupq_n_s32(v668), (int32x4_t)xmmword_208F071C0);
      v678 = vdupq_n_s32(4 * v668);
      v679 = (int32x4_t *)(v4 + 40240);
      v680 = v672;
      do
      {
        v681 = vaddq_s32(v677, v678);
        v679[-1] = v677;
        *v679 = v681;
        v677 = vaddq_s32(v681, v678);
        v679 += 2;
        v680 -= 8;
      }
      while (v680);
      if (v672 != v671)
      {
LABEL_1124:
        v682 = (_DWORD *)(v4 + 4 * v672 + 40224);
        v683 = v671 - v672;
        do
        {
          *v682++ = v673;
          v673 += v668;
          --v683;
        }
        while (v683);
      }
    }
    *(_DWORD *)(v4 + 4 * v671 + 40224) = v666;
    v5[1] = v671;
    if ((int)(v668 << *(_DWORD *)(v589 + 36)) < v665)
      v665 = v668 << *(_DWORD *)(v589 + 36);
    v5[9] = v665;
    v675 = (_DWORD *)(a2 + 16);
    *(_DWORD *)v1975 = 0;
    v676 = *v5;
    if ((int)(*v5 * v671) >= 2)
    {
LABEL_1129:
      v684 = v5[6];
      if ((int)(v684 + v667) < 1)
      {
        *(_DWORD *)v1975 = 0;
      }
      else
      {
        v685 = 0;
        v686 = v667 + v684 + 1;
        do
        {
          while (1)
          {
            v688 = *(unsigned int *)(a2 + 16);
            v689 = (unsigned __int8 *)(*(_QWORD *)a2 + (v688 >> 3));
            if ((unint64_t)v689 >= *(_QWORD *)(a2 + 8))
              break;
            v687 = (*v689 >> (~(_BYTE)v688 & 7)) & 1;
            *v675 = v688 + 1;
            v685 |= v687 << (v686-- - 2);
            if (v686 <= 1)
              goto LABEL_1136;
          }
          v690 = *(void (**)(_QWORD))(a2 + 32);
          if (v690)
          {
            v690(*(_QWORD *)(a2 + 24));
            v675 = (_DWORD *)(a2 + 16);
          }
          --v686;
        }
        while (v686 > 1);
LABEL_1136:
        v691 = *v5 * v5[1];
        v612 = (uint64_t)v1982;
        v597 = v1989;
        *(_DWORD *)v1975 = v685;
        if (v685 >= v691)
        {
          aom_internal_error(v4 + 390860, 7, "Invalid context_update_tile_id");
          v675 = (_DWORD *)(a2 + 16);
        }
      }
      v692 = *(unsigned int *)(a2 + 16);
      v693 = *(_QWORD *)a2;
      v694 = *(_QWORD *)(a2 + 8);
      v695 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v692 >> 3));
      if ((unint64_t)v695 >= v694)
      {
        v695 = *(void (**)(_QWORD))(a2 + 32);
        if (v695)
        {
          v695(*(_QWORD *)(a2 + 24));
          v675 = (_DWORD *)(a2 + 16);
          LODWORD(v695) = 0;
          LODWORD(v692) = *(_DWORD *)(a2 + 16);
          v693 = *(_QWORD *)a2;
          v694 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v695) = (*(unsigned __int8 *)v695 >> (~(_BYTE)v692 & 7)) & 1;
        LODWORD(v692) = v692 + 1;
        *v675 = v692;
      }
      v696 = 2 * (_DWORD)v695;
      v697 = (unsigned __int8 *)(v693 + (v692 >> 3));
      if ((unint64_t)v697 >= v694)
      {
        v699 = *(void (**)(_QWORD))(a2 + 32);
        if (v699)
        {
          v699(*(_QWORD *)(a2 + 24));
          v675 = (_DWORD *)(a2 + 16);
        }
        v698 = 0;
      }
      else
      {
        v698 = (*v697 >> (~(_BYTE)v692 & 7)) & 1;
        *v675 = v692 + 1;
      }
      v1980[6] = (v698 | v696) + 1;
      v676 = *v5;
    }
  }
  else
  {
    v674 = v5[1];
    v667 = -1;
    v675 = (_DWORD *)(a2 + 16);
    do
      ++v667;
    while (1 << v667 < v674);
    v5[7] = v667;
    *(_DWORD *)v1975 = 0;
    v676 = *v5;
    if ((int)(*v5 * v674) >= 2)
      goto LABEL_1129;
  }
  if (v676 != 1 && 64 << (*(_DWORD *)(v4 + 15256) != *(_DWORD *)(v4 + 15272)) > (int)(4 * v5[4]))
  {
    aom_internal_error(v4 + 390860, 7, "Minimum tile width requirement not satisfied");
    v675 = (_DWORD *)(a2 + 16);
  }
  v700 = *(_QWORD *)(v1985 + 312);
  v701 = *(unsigned __int8 *)(v700 + 77);
  v702 = *(unsigned __int8 *)(v700 + 108);
  v703 = (void (**)(_QWORD))(a2 + 32);
  v704 = *(unsigned int *)(a2 + 16);
  v705 = *(_QWORD *)a2;
  v706 = *(_QWORD *)(a2 + 8);
  v707 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v704 >> 3));
  v2016 = (void (**)(_QWORD))(a2 + 32);
  if ((unint64_t)v707 >= v706)
  {
    v707 = *v703;
    if (*v703)
    {
      v707(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v707) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v707) = (*(unsigned __int8 *)v707 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v708 = (_DWORD)v707 << 7;
  v709 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v709 >= v706)
  {
    v709 = *v703;
    if (*v703)
    {
      v709(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v709) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v709) = (*(unsigned __int8 *)v709 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v710 = v708 | ((_DWORD)v709 << 6);
  v711 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v711 >= v706)
  {
    v711 = *v703;
    if (*v703)
    {
      v711(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v711) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v711) = (*(unsigned __int8 *)v711 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v712 = v710 | (32 * (_DWORD)v711);
  v713 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v713 >= v706)
  {
    v713 = *v703;
    if (*v703)
    {
      v713(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v713) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v713) = (*(unsigned __int8 *)v713 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v714 = v712 | (16 * (_DWORD)v713);
  v715 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v715 >= v706)
  {
    v715 = *v703;
    if (*v703)
    {
      v715(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v715) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v715) = (*(unsigned __int8 *)v715 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v716 = v714 | (8 * (_DWORD)v715);
  v717 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v717 >= v706)
  {
    v717 = *v703;
    if (*v703)
    {
      v717(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v717) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v717) = (*(unsigned __int8 *)v717 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v718 = v716 | (4 * (_DWORD)v717);
  v719 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v719 >= v706)
  {
    v719 = *v703;
    if (*v703)
    {
      v719(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v719) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v719) = (*(unsigned __int8 *)v719 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  v720 = v718 | (2 * (_DWORD)v719);
  v721 = (void (*)(_QWORD))(v705 + (v704 >> 3));
  if ((unint64_t)v721 >= v706)
  {
    v721 = *v703;
    if (*v703)
    {
      v721(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v675 = (_DWORD *)(a2 + 16);
      LODWORD(v721) = 0;
      LODWORD(v704) = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v721) = (*(unsigned __int8 *)v721 >> (~(_BYTE)v704 & 7)) & 1;
    LODWORD(v704) = v704 + 1;
    *v675 = v704;
  }
  *(_DWORD *)(v4 + 15816) = v721 | v720;
  v722 = (unsigned __int8 *)(v705 + (v704 >> 3));
  if ((unint64_t)v722 >= v706)
  {
    v735 = *v703;
    v726 = (BOOL *)v1994;
    if (*v703)
    {
      v735(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      *(_DWORD *)(v4 + 15820) = 0;
      if (!v701)
        goto LABEL_1193;
      goto LABEL_1199;
    }
LABEL_1198:
    *(_DWORD *)(v4 + 15820) = (_DWORD)v735;
    if (!v701)
      goto LABEL_1193;
LABEL_1199:
    *(_QWORD *)(v4 + 15832) = 0;
    *(_QWORD *)(v4 + 15824) = 0;
    v741 = *(unsigned int *)(a2 + 16);
    v742 = *(_QWORD *)a2;
    v743 = *(_QWORD *)(a2 + 8);
    v744 = (unsigned __int8 *)(*(_QWORD *)a2 + (v741 >> 3));
    if ((unint64_t)v744 < v743)
      goto LABEL_1200;
    goto LABEL_1246;
  }
  v723 = v675;
  v724 = *v722;
  v725 = v704 + 1;
  *v723 = v704 + 1;
  v726 = (BOOL *)v1994;
  if (((v724 >> (~(_BYTE)v704 & 7)) & 1) == 0)
  {
    LODWORD(v735) = 0;
    v703 = (void (**)(_QWORD))(a2 + 32);
    goto LABEL_1198;
  }
  v727 = (unsigned __int8 *)(v705 + (v725 >> 3));
  if ((unint64_t)v727 >= v706)
  {
    v703 = (void (**)(_QWORD))(a2 + 32);
    if (*v2016)
    {
      (*v2016)(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v729 = (unsigned int *)(a2 + 16);
      v725 = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
      v730 = 0;
      v731 = (unsigned __int8 *)(*(_QWORD *)a2 + (v725 >> 3));
      if ((unint64_t)v731 < v706)
        goto LABEL_1398;
    }
    else
    {
      v729 = (unsigned int *)(a2 + 16);
      v730 = 0;
      v731 = (unsigned __int8 *)(v705 + (v725 >> 3));
      if ((unint64_t)v731 < v706)
        goto LABEL_1398;
    }
LABEL_1187:
    v732 = *v703;
    if (*v703)
    {
      v732(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v729 = (unsigned int *)(a2 + 16);
      LODWORD(v732) = 0;
      v725 = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
    v733 = v730 | (32 * (_DWORD)v732);
    v734 = (void (*)(_QWORD))(v705 + (v725 >> 3));
    if ((unint64_t)v734 < v706)
      goto LABEL_1190;
LABEL_1399:
    v734 = *v703;
    if (*v703)
    {
      v734(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v729 = (unsigned int *)(a2 + 16);
      LODWORD(v734) = 0;
      v725 = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    v728 = (*v727 >> (~(_BYTE)v725 & 7)) & 1;
    v725 = v704 + 2;
    v703 = (void (**)(_QWORD))(a2 + 32);
    v729 = (unsigned int *)(a2 + 16);
    *v2017 = v704 + 2;
    v730 = v728 << 6;
    v731 = (unsigned __int8 *)(v705 + ((v704 + 2) >> 3));
    if ((unint64_t)v731 >= v706)
      goto LABEL_1187;
LABEL_1398:
    v886 = (*v731 >> (~(_BYTE)v725++ & 7)) & 1;
    *v729 = v725;
    v733 = v730 | (32 * v886);
    v734 = (void (*)(_QWORD))(v705 + (v725 >> 3));
    if ((unint64_t)v734 >= v706)
      goto LABEL_1399;
LABEL_1190:
    LODWORD(v734) = (*(unsigned __int8 *)v734 >> (~(_BYTE)v725++ & 7)) & 1;
    *v729 = v725;
  }
  v887 = v733 | (16 * (_DWORD)v734);
  v888 = (void (*)(_QWORD))(v705 + (v725 >> 3));
  if ((unint64_t)v888 >= v706)
  {
    v888 = *v703;
    if (*v703)
    {
      v888(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v729 = (unsigned int *)(a2 + 16);
      LODWORD(v888) = 0;
      v725 = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v888) = (*(unsigned __int8 *)v888 >> (~(_BYTE)v725++ & 7)) & 1;
    *v729 = v725;
  }
  v889 = v887 | (8 * (_DWORD)v888);
  v890 = (void (*)(_QWORD))(v705 + (v725 >> 3));
  if ((unint64_t)v890 >= v706)
  {
    v890 = *v703;
    if (*v703)
    {
      v890(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v729 = (unsigned int *)(a2 + 16);
      LODWORD(v890) = 0;
      v725 = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v890) = (*(unsigned __int8 *)v890 >> (~(_BYTE)v725++ & 7)) & 1;
    *v729 = v725;
  }
  v891 = v889 | (4 * (_DWORD)v890);
  v892 = (void (*)(_QWORD))(v705 + (v725 >> 3));
  if ((unint64_t)v892 >= v706)
  {
    v892 = *v703;
    if (*v703)
    {
      v892(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v729 = (unsigned int *)(a2 + 16);
      LODWORD(v892) = 0;
      v725 = *(_DWORD *)(a2 + 16);
      v705 = *(_QWORD *)a2;
      v706 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v892) = (*(unsigned __int8 *)v892 >> (~(_BYTE)v725++ & 7)) & 1;
    *v729 = v725;
  }
  v893 = v891 | (2 * (_DWORD)v892);
  v894 = (void (*)(_QWORD))(v705 + (v725 >> 3));
  if ((unint64_t)v894 >= v706)
  {
    v894 = *v703;
    if (*v703)
    {
      v894(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      LODWORD(v894) = 0;
    }
  }
  else
  {
    LODWORD(v894) = (*(unsigned __int8 *)v894 >> (~(_BYTE)v725 & 7)) & 1;
    *v729 = v725 + 1;
  }
  v895 = (int)((v894 | v893) << 25) >> 25;
  v726 = (BOOL *)v1994;
  *(_DWORD *)(v4 + 15820) = v895;
  if (v701)
    goto LABEL_1199;
LABEL_1193:
  v736 = *(unsigned int *)(a2 + 16);
  v737 = *(_QWORD *)a2;
  v738 = *(_QWORD *)(a2 + 8);
  if (!v702)
  {
    v771 = 1;
    v740 = (unsigned int *)(a2 + 16);
    v772 = (unsigned __int8 *)(v737 + (v736 >> 3));
    if ((unint64_t)v772 < v738)
      goto LABEL_1253;
LABEL_1240:
    v773 = *v703;
    if (*v703)
    {
      v773(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      *(_DWORD *)(v4 + 15824) = 0;
      v774 = *(unsigned int *)(a2 + 16);
      v775 = *(_QWORD *)a2;
      v776 = *(_QWORD *)(a2 + 8);
      v777 = (unsigned __int8 *)(*(_QWORD *)a2 + (v774 >> 3));
      if ((unint64_t)v777 >= v776)
        goto LABEL_1242;
      goto LABEL_1363;
    }
LABEL_1362:
    *(_DWORD *)(v4 + 15824) = (_DWORD)v773;
    v774 = *(unsigned int *)(a2 + 16);
    v775 = *(_QWORD *)a2;
    v776 = *(_QWORD *)(a2 + 8);
    v777 = (unsigned __int8 *)(*(_QWORD *)a2 + (v774 >> 3));
    if ((unint64_t)v777 >= v776)
      goto LABEL_1242;
LABEL_1363:
    v854 = v740;
    v855 = *v777;
    v856 = v774 + 1;
    *v854 = v774 + 1;
    if (((v855 >> (~(_BYTE)v774 & 7)) & 1) == 0)
    {
      LODWORD(v778) = 0;
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      *(_DWORD *)(v4 + 15832) = 0;
      if (v771)
        goto LABEL_1245;
      goto LABEL_1371;
    }
    v857 = (unsigned __int8 *)(v775 + (v856 >> 3));
    if ((unint64_t)v857 < v776)
    {
      v858 = (*v857 >> (~(_BYTE)v856 & 7)) & 1;
      v856 = v774 + 2;
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      *v2017 = v774 + 2;
      v859 = v858 << 6;
      v860 = (unsigned __int8 *)(v775 + ((v774 + 2) >> 3));
      if ((unint64_t)v860 >= v776)
        goto LABEL_1366;
LABEL_1577:
      v958 = (*v860 >> (~(_BYTE)v856++ & 7)) & 1;
      *v740 = v856;
      v862 = v859 | (32 * v958);
      v863 = (void (*)(_QWORD))(v775 + (v856 >> 3));
      if ((unint64_t)v863 < v776)
      {
LABEL_1369:
        LODWORD(v863) = (*(unsigned __int8 *)v863 >> (~(_BYTE)v856++ & 7)) & 1;
        *v740 = v856;
        goto LABEL_1580;
      }
LABEL_1578:
      v863 = *v703;
      if (*v703)
      {
        v863(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v740 = (unsigned int *)(a2 + 16);
        LODWORD(v863) = 0;
        v856 = *(_DWORD *)(a2 + 16);
        v775 = *(_QWORD *)a2;
        v776 = *(_QWORD *)(a2 + 8);
      }
LABEL_1580:
      v959 = v862 | (16 * (_DWORD)v863);
      v960 = (void (*)(_QWORD))(v775 + (v856 >> 3));
      if ((unint64_t)v960 >= v776)
      {
        v960 = *v703;
        if (*v703)
        {
          v960(*(_QWORD *)(a2 + 24));
          v703 = (void (**)(_QWORD))(a2 + 32);
          v740 = (unsigned int *)(a2 + 16);
          LODWORD(v960) = 0;
          v856 = *(_DWORD *)(a2 + 16);
          v775 = *(_QWORD *)a2;
          v776 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v960) = (*(unsigned __int8 *)v960 >> (~(_BYTE)v856++ & 7)) & 1;
        *v740 = v856;
      }
      v961 = v959 | (8 * (_DWORD)v960);
      v962 = (void (*)(_QWORD))(v775 + (v856 >> 3));
      if ((unint64_t)v962 >= v776)
      {
        v962 = *v703;
        if (*v703)
        {
          v962(*(_QWORD *)(a2 + 24));
          v703 = (void (**)(_QWORD))(a2 + 32);
          v740 = (unsigned int *)(a2 + 16);
          LODWORD(v962) = 0;
          v856 = *(_DWORD *)(a2 + 16);
          v775 = *(_QWORD *)a2;
          v776 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v962) = (*(unsigned __int8 *)v962 >> (~(_BYTE)v856++ & 7)) & 1;
        *v740 = v856;
      }
      v963 = v961 | (4 * (_DWORD)v962);
      v964 = (void (*)(_QWORD))(v775 + (v856 >> 3));
      if ((unint64_t)v964 >= v776)
      {
        v964 = *v703;
        if (*v703)
        {
          v964(*(_QWORD *)(a2 + 24));
          v703 = (void (**)(_QWORD))(a2 + 32);
          v740 = (unsigned int *)(a2 + 16);
          LODWORD(v964) = 0;
          v856 = *(_DWORD *)(a2 + 16);
          v775 = *(_QWORD *)a2;
          v776 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v964) = (*(unsigned __int8 *)v964 >> (~(_BYTE)v856++ & 7)) & 1;
        *v740 = v856;
      }
      v965 = v963 | (2 * (_DWORD)v964);
      v966 = (unsigned __int8 *)(v775 + (v856 >> 3));
      if ((unint64_t)v966 < v776)
      {
        v967 = (*v966 >> (~(_BYTE)v856 & 7)) & 1;
        *v740 = v856 + 1;
        LODWORD(v778) = (v967 | v965) << 25 >> 25;
        v726 = (BOOL *)v1994;
        *(_DWORD *)(v4 + 15832) = (_DWORD)v778;
        if (v771)
          goto LABEL_1245;
        goto LABEL_1371;
      }
      if (*v703)
      {
        (*v703)(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v740 = (unsigned int *)(a2 + 16);
      }
      LODWORD(v778) = v965 << 25 >> 25;
      v726 = (BOOL *)v1994;
      *(_DWORD *)(v4 + 15832) = (_DWORD)v778;
      if (!v771)
        goto LABEL_1371;
LABEL_1245:
      *(_DWORD *)(v4 + 15828) = *(_DWORD *)(v4 + 15824);
      *(_DWORD *)(v4 + 15836) = (_DWORD)v778;
      v741 = *(unsigned int *)(a2 + 16);
      v742 = *(_QWORD *)a2;
      v743 = *(_QWORD *)(a2 + 8);
      v744 = (unsigned __int8 *)(*(_QWORD *)a2 + (v741 >> 3));
      if ((unint64_t)v744 < v743)
        goto LABEL_1200;
      goto LABEL_1246;
    }
    v703 = (void (**)(_QWORD))(a2 + 32);
    if (*v2016)
    {
      (*v2016)(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      v856 = *(_DWORD *)(a2 + 16);
      v775 = *(_QWORD *)a2;
      v776 = *(_QWORD *)(a2 + 8);
      v859 = 0;
      v860 = (unsigned __int8 *)(*(_QWORD *)a2 + (v856 >> 3));
      if ((unint64_t)v860 < v776)
        goto LABEL_1577;
    }
    else
    {
      v740 = (unsigned int *)(a2 + 16);
      v859 = 0;
      v860 = (unsigned __int8 *)(v775 + (v856 >> 3));
      if ((unint64_t)v860 < v776)
        goto LABEL_1577;
    }
LABEL_1366:
    v861 = *v703;
    if (*v703)
    {
      v861(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v861) = 0;
      v856 = *(_DWORD *)(a2 + 16);
      v775 = *(_QWORD *)a2;
      v776 = *(_QWORD *)(a2 + 8);
    }
    v862 = v859 | (32 * (_DWORD)v861);
    v863 = (void (*)(_QWORD))(v775 + (v856 >> 3));
    if ((unint64_t)v863 < v776)
      goto LABEL_1369;
    goto LABEL_1578;
  }
  v739 = (void (*)(_QWORD))(v737 + (v736 >> 3));
  v740 = (unsigned int *)(a2 + 16);
  if ((unint64_t)v739 >= v738)
  {
    v739 = *v703;
    if (*v703)
    {
      v739(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v739) = 0;
      LODWORD(v736) = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v739) = (*(unsigned __int8 *)v739 >> (~(_BYTE)v736 & 7)) & 1;
    LODWORD(v736) = v736 + 1;
    *v2017 = v736;
  }
  v771 = (_DWORD)v739 == 0;
  v772 = (unsigned __int8 *)(v737 + (v736 >> 3));
  if ((unint64_t)v772 >= v738)
    goto LABEL_1240;
LABEL_1253:
  v779 = v740;
  v780 = *v772;
  v781 = v736 + 1;
  *v779 = v736 + 1;
  if (((v780 >> (~(_BYTE)v736 & 7)) & 1) == 0)
  {
    LODWORD(v773) = 0;
    v703 = (void (**)(_QWORD))(a2 + 32);
    v740 = (unsigned int *)(a2 + 16);
    goto LABEL_1362;
  }
  v782 = (unsigned __int8 *)(v737 + (v781 >> 3));
  if ((unint64_t)v782 >= v738)
  {
    v703 = (void (**)(_QWORD))(a2 + 32);
    if (*v2016)
    {
      (*v2016)(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      v781 = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
      v784 = 0;
      v785 = (unsigned __int8 *)(*(_QWORD *)a2 + (v781 >> 3));
      if ((unint64_t)v785 < v738)
        goto LABEL_1555;
    }
    else
    {
      v740 = (unsigned int *)(a2 + 16);
      v784 = 0;
      v785 = (unsigned __int8 *)(v737 + (v781 >> 3));
      if ((unint64_t)v785 < v738)
        goto LABEL_1555;
    }
LABEL_1256:
    v786 = *v703;
    if (*v703)
    {
      v786(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v786) = 0;
      v781 = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
    }
    v787 = v784 | (32 * (_DWORD)v786);
    v788 = (void (*)(_QWORD))(v737 + (v781 >> 3));
    if ((unint64_t)v788 < v738)
      goto LABEL_1259;
LABEL_1556:
    v788 = *v703;
    if (*v703)
    {
      v788(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v788) = 0;
      v781 = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    v783 = (*v782 >> (~(_BYTE)v781 & 7)) & 1;
    v781 = v736 + 2;
    v703 = (void (**)(_QWORD))(a2 + 32);
    v740 = (unsigned int *)(a2 + 16);
    *v2017 = v736 + 2;
    v784 = v783 << 6;
    v785 = (unsigned __int8 *)(v737 + ((v736 + 2) >> 3));
    if ((unint64_t)v785 >= v738)
      goto LABEL_1256;
LABEL_1555:
    v948 = (*v785 >> (~(_BYTE)v781++ & 7)) & 1;
    *v740 = v781;
    v787 = v784 | (32 * v948);
    v788 = (void (*)(_QWORD))(v737 + (v781 >> 3));
    if ((unint64_t)v788 >= v738)
      goto LABEL_1556;
LABEL_1259:
    LODWORD(v788) = (*(unsigned __int8 *)v788 >> (~(_BYTE)v781++ & 7)) & 1;
    *v740 = v781;
  }
  v949 = v787 | (16 * (_DWORD)v788);
  v950 = (void (*)(_QWORD))(v737 + (v781 >> 3));
  if ((unint64_t)v950 >= v738)
  {
    v950 = *v703;
    if (*v703)
    {
      v950(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v950) = 0;
      v781 = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v950) = (*(unsigned __int8 *)v950 >> (~(_BYTE)v781++ & 7)) & 1;
    *v740 = v781;
  }
  v951 = v949 | (8 * (_DWORD)v950);
  v952 = (void (*)(_QWORD))(v737 + (v781 >> 3));
  if ((unint64_t)v952 >= v738)
  {
    v952 = *v703;
    if (*v703)
    {
      v952(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v952) = 0;
      v781 = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v952) = (*(unsigned __int8 *)v952 >> (~(_BYTE)v781++ & 7)) & 1;
    *v740 = v781;
  }
  v953 = v951 | (4 * (_DWORD)v952);
  v954 = (void (*)(_QWORD))(v737 + (v781 >> 3));
  if ((unint64_t)v954 >= v738)
  {
    v954 = *v703;
    if (*v703)
    {
      v954(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v954) = 0;
      v781 = *(_DWORD *)(a2 + 16);
      v737 = *(_QWORD *)a2;
      v738 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v954) = (*(unsigned __int8 *)v954 >> (~(_BYTE)v781++ & 7)) & 1;
    *v740 = v781;
  }
  v955 = v953 | (2 * (_DWORD)v954);
  v956 = (void (*)(_QWORD))(v737 + (v781 >> 3));
  if ((unint64_t)v956 >= v738)
  {
    v956 = *v703;
    if (*v703)
    {
      v956(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v956) = 0;
    }
  }
  else
  {
    LODWORD(v956) = (*(unsigned __int8 *)v956 >> (~(_BYTE)v781 & 7)) & 1;
    *v740 = v781 + 1;
  }
  v957 = (int)((v956 | v955) << 25) >> 25;
  v726 = (BOOL *)v1994;
  *(_DWORD *)(v4 + 15824) = v957;
  v774 = *(unsigned int *)(a2 + 16);
  v775 = *(_QWORD *)a2;
  v776 = *(_QWORD *)(a2 + 8);
  v777 = (unsigned __int8 *)(*(_QWORD *)a2 + (v774 >> 3));
  if ((unint64_t)v777 < v776)
    goto LABEL_1363;
LABEL_1242:
  v778 = *v703;
  if (*v703)
  {
    v778(*(_QWORD *)(a2 + 24));
    v703 = (void (**)(_QWORD))(a2 + 32);
    v740 = (unsigned int *)(a2 + 16);
    LODWORD(v778) = 0;
  }
  *(_DWORD *)(v4 + 15832) = (_DWORD)v778;
  if (v771)
    goto LABEL_1245;
LABEL_1371:
  v864 = *(unsigned int *)(a2 + 16);
  v865 = *(_QWORD *)a2;
  v866 = *(_QWORD *)(a2 + 8);
  v867 = (unsigned __int8 *)(*(_QWORD *)a2 + (v864 >> 3));
  if ((unint64_t)v867 >= v866)
  {
    v875 = *v703;
    if (*v703)
    {
      v875(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      *(_DWORD *)(v4 + 15828) = 0;
      v876 = *(unsigned int *)(a2 + 16);
      v877 = *(_QWORD *)a2;
      v878 = *(_QWORD *)(a2 + 8);
      v879 = (unsigned __int8 *)(*(_QWORD *)a2 + (v876 >> 3));
      if ((unint64_t)v879 < v878)
        goto LABEL_1431;
      goto LABEL_1379;
    }
LABEL_1430:
    *(_DWORD *)(v4 + 15828) = (_DWORD)v875;
    v876 = *(unsigned int *)(a2 + 16);
    v877 = *(_QWORD *)a2;
    v878 = *(_QWORD *)(a2 + 8);
    v879 = (unsigned __int8 *)(*(_QWORD *)a2 + (v876 >> 3));
    if ((unint64_t)v879 < v878)
      goto LABEL_1431;
LABEL_1379:
    v880 = *v703;
    if (!*v703)
      goto LABEL_1651;
    v880(*(_QWORD *)(a2 + 24));
    v703 = (void (**)(_QWORD))(a2 + 32);
    *(_DWORD *)(v4 + 15836) = 0;
    v741 = *(unsigned int *)(a2 + 16);
    v742 = *(_QWORD *)a2;
    v743 = *(_QWORD *)(a2 + 8);
    v744 = (unsigned __int8 *)(*(_QWORD *)a2 + (v741 >> 3));
    if ((unint64_t)v744 >= v743)
      goto LABEL_1246;
LABEL_1200:
    v745 = *v744;
    v746 = v741 + 1;
    *v2017 = v741 + 1;
    v747 = (1 << (~(_BYTE)v741 & 7)) & v745;
    *v726 = v747 != 0;
    v749 = (void (**)(_QWORD))(a2 + 32);
    v748 = (unsigned int *)(a2 + 16);
    if (!v747)
      goto LABEL_1249;
    v750 = (unsigned __int8 *)(v742 + (v746 >> 3));
    if ((unint64_t)v750 >= v743)
    {
      if (*v2016)
      {
        (*v2016)(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        v746 = *(_DWORD *)(a2 + 16);
        v742 = *(_QWORD *)a2;
        v743 = *(_QWORD *)(a2 + 8);
        v752 = 0;
        v753 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v746 >> 3));
        if ((unint64_t)v753 < v743)
          goto LABEL_1203;
      }
      else
      {
        v752 = 0;
        v753 = (void (*)(_QWORD))(v742 + (v746 >> 3));
        if ((unint64_t)v753 < v743)
          goto LABEL_1203;
      }
    }
    else
    {
      v748 = (unsigned int *)(a2 + 16);
      v751 = (*v750 >> (~(_BYTE)v746 & 7)) & 1;
      v746 = v741 + 2;
      *v2017 = v741 + 2;
      v752 = 8 * v751;
      v753 = (void (*)(_QWORD))(v742 + ((v741 + 2) >> 3));
      if ((unint64_t)v753 < v743)
      {
LABEL_1203:
        LODWORD(v753) = (*(unsigned __int8 *)v753 >> (~(_BYTE)v746++ & 7)) & 1;
        *v748 = v746;
        goto LABEL_1211;
      }
    }
    v753 = *v749;
    if (*v749)
    {
      v753(*(_QWORD *)(a2 + 24));
      v749 = (void (**)(_QWORD))(a2 + 32);
      v748 = (unsigned int *)(a2 + 16);
      LODWORD(v753) = 0;
      v746 = *(_DWORD *)(a2 + 16);
      v742 = *(_QWORD *)a2;
      v743 = *(_QWORD *)(a2 + 8);
    }
LABEL_1211:
    v754 = v752 | (4 * (_DWORD)v753);
    v755 = (void (*)(_QWORD))(v742 + (v746 >> 3));
    if ((unint64_t)v755 >= v743)
    {
      v755 = *v749;
      if (*v749)
      {
        v755(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v755) = 0;
        v746 = *(_DWORD *)(a2 + 16);
        v742 = *(_QWORD *)a2;
        v743 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v755) = (*(unsigned __int8 *)v755 >> (~(_BYTE)v746++ & 7)) & 1;
      *v748 = v746;
    }
    v756 = v754 | (2 * (_DWORD)v755);
    v757 = (void (*)(_QWORD))(v742 + (v746 >> 3));
    if ((unint64_t)v757 >= v743)
    {
      v757 = *v749;
      if (*v749)
      {
        v757(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v757) = 0;
        v746 = *(_DWORD *)(a2 + 16);
        v742 = *(_QWORD *)a2;
        v743 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v757) = (*(unsigned __int8 *)v757 >> (~(_BYTE)v746++ & 7)) & 1;
      *v748 = v746;
    }
    *((_DWORD *)v1994 + 1) = v757 | v756;
    v758 = (void (*)(_QWORD))(v742 + (v746 >> 3));
    if ((unint64_t)v758 >= v743)
    {
      v758 = *v749;
      if (*v749)
      {
        v758(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v758) = 0;
        v746 = *(_DWORD *)(a2 + 16);
        v742 = *(_QWORD *)a2;
        v743 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v758) = (*(unsigned __int8 *)v758 >> (~(_BYTE)v746++ & 7)) & 1;
      *v748 = v746;
    }
    v759 = 8 * (_DWORD)v758;
    v760 = (void (*)(_QWORD))(v742 + (v746 >> 3));
    if ((unint64_t)v760 >= v743)
    {
      v760 = *v749;
      if (*v749)
      {
        v760(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v760) = 0;
        v746 = *(_DWORD *)(a2 + 16);
        v742 = *(_QWORD *)a2;
        v743 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v760) = (*(unsigned __int8 *)v760 >> (~(_BYTE)v746++ & 7)) & 1;
      *v748 = v746;
    }
    v761 = v759 | (4 * (_DWORD)v760);
    v762 = (void (*)(_QWORD))(v742 + (v746 >> 3));
    if ((unint64_t)v762 >= v743)
    {
      v762 = *v749;
      if (*v749)
      {
        v762(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v762) = 0;
        v746 = *(_DWORD *)(a2 + 16);
        v742 = *(_QWORD *)a2;
        v743 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v762) = (*(unsigned __int8 *)v762 >> (~(_BYTE)v746++ & 7)) & 1;
      *v748 = v746;
    }
    v763 = v761 | (2 * (_DWORD)v762);
    v764 = (unsigned __int8 *)(v742 + (v746 >> 3));
    if ((unint64_t)v764 >= v743)
    {
      if (*v749)
      {
        (*v749)(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
      }
      v766 = v763;
      v726 = (BOOL *)v1994;
      *((_DWORD *)v1994 + 2) = v766;
      if (!v702)
        goto LABEL_1278;
    }
    else
    {
      v765 = (*v764 >> (~(_BYTE)v746 & 7)) & 1;
      *v748 = v746 + 1;
      v766 = v765 | v763;
      v726 = (BOOL *)v1994;
      *((_DWORD *)v1994 + 2) = v766;
      if (!v702)
        goto LABEL_1278;
    }
    v767 = *(unsigned int *)(a2 + 16);
    v768 = *(_QWORD *)a2;
    v769 = *(_QWORD *)(a2 + 8);
    v770 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v767 >> 3));
    if ((unint64_t)v770 >= v769)
    {
      v770 = *v749;
      if (*v749)
      {
        v770(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v770) = 0;
        LODWORD(v767) = *(_DWORD *)(a2 + 16);
        v768 = *(_QWORD *)a2;
        v769 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v770) = (*(unsigned __int8 *)v770 >> (~(_BYTE)v767 & 7)) & 1;
      LODWORD(v767) = v767 + 1;
      *v748 = v767;
    }
    v790 = 8 * (_DWORD)v770;
    v791 = (void (*)(_QWORD))(v768 + (v767 >> 3));
    if ((unint64_t)v791 >= v769)
    {
      v791 = *v749;
      if (*v749)
      {
        v791(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v791) = 0;
        LODWORD(v767) = *(_DWORD *)(a2 + 16);
        v768 = *(_QWORD *)a2;
        v769 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v791) = (*(unsigned __int8 *)v791 >> (~(_BYTE)v767 & 7)) & 1;
      LODWORD(v767) = v767 + 1;
      *v748 = v767;
    }
    v792 = v790 | (4 * (_DWORD)v791);
    v793 = (void (*)(_QWORD))(v768 + (v767 >> 3));
    if ((unint64_t)v793 >= v769)
    {
      v793 = *v749;
      if (*v749)
      {
        v793(*(_QWORD *)(a2 + 24));
        v749 = (void (**)(_QWORD))(a2 + 32);
        v748 = (unsigned int *)(a2 + 16);
        LODWORD(v793) = 0;
        LODWORD(v767) = *(_DWORD *)(a2 + 16);
        v768 = *(_QWORD *)a2;
        v769 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v793) = (*(unsigned __int8 *)v793 >> (~(_BYTE)v767 & 7)) & 1;
      LODWORD(v767) = v767 + 1;
      *v748 = v767;
    }
    v794 = v792 | (2 * (_DWORD)v793);
    v795 = (unsigned __int8 *)(v768 + (v767 >> 3));
    if ((unint64_t)v795 >= v769)
    {
      if (*v749)
        (*v749)(*(_QWORD *)(a2 + 24));
      v796 = 0;
    }
    else
    {
      v796 = (*v795 >> (~(_BYTE)v767 & 7)) & 1;
      *v748 = v767 + 1;
    }
    v766 = v796 | v794;
    v726 = (BOOL *)v1994;
    goto LABEL_1278;
  }
  v868 = v740;
  v869 = *v867;
  v870 = v864 + 1;
  *v868 = v864 + 1;
  if (((v869 >> (~(_BYTE)v864 & 7)) & 1) == 0)
  {
    LODWORD(v875) = 0;
    v703 = (void (**)(_QWORD))(a2 + 32);
    v740 = (unsigned int *)(a2 + 16);
    goto LABEL_1430;
  }
  v871 = (unsigned __int8 *)(v865 + (v870 >> 3));
  if ((unint64_t)v871 >= v866)
  {
    v703 = (void (**)(_QWORD))(a2 + 32);
    if (*v2016)
    {
      (*v2016)(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v870 = *(_DWORD *)(a2 + 16);
      v865 = *(_QWORD *)a2;
      v866 = *(_QWORD *)(a2 + 8);
    }
    v740 = (unsigned int *)(a2 + 16);
    v873 = 0;
    v874 = (void (*)(_QWORD))(v865 + (v870 >> 3));
    if ((unint64_t)v874 < v866)
      goto LABEL_1603;
LABEL_1375:
    v874 = *v703;
    if (*v703)
    {
      v874(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v874) = 0;
      v870 = *(_DWORD *)(a2 + 16);
      v865 = *(_QWORD *)a2;
      v866 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    v872 = (*v871 >> (~(_BYTE)v870 & 7)) & 1;
    v870 = v864 + 2;
    v703 = (void (**)(_QWORD))(a2 + 32);
    v740 = (unsigned int *)(a2 + 16);
    *v2017 = v864 + 2;
    v873 = v872 << 6;
    v874 = (void (*)(_QWORD))(v865 + ((v864 + 2) >> 3));
    if ((unint64_t)v874 >= v866)
      goto LABEL_1375;
LABEL_1603:
    LODWORD(v874) = (*(unsigned __int8 *)v874 >> (~(_BYTE)v870++ & 7)) & 1;
    *v740 = v870;
  }
  v968 = v873 | (32 * (_DWORD)v874);
  v969 = (void (*)(_QWORD))(v865 + (v870 >> 3));
  if ((unint64_t)v969 >= v866)
  {
    v969 = *v703;
    if (*v703)
    {
      v969(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v969) = 0;
      v870 = *(_DWORD *)(a2 + 16);
      v865 = *(_QWORD *)a2;
      v866 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v969) = (*(unsigned __int8 *)v969 >> (~(_BYTE)v870++ & 7)) & 1;
    *v740 = v870;
  }
  v970 = v968 | (16 * (_DWORD)v969);
  v971 = (void (*)(_QWORD))(v865 + (v870 >> 3));
  if ((unint64_t)v971 >= v866)
  {
    v971 = *v703;
    if (*v703)
    {
      v971(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v971) = 0;
      v870 = *(_DWORD *)(a2 + 16);
      v865 = *(_QWORD *)a2;
      v866 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v971) = (*(unsigned __int8 *)v971 >> (~(_BYTE)v870++ & 7)) & 1;
    *v740 = v870;
  }
  v972 = v970 | (8 * (_DWORD)v971);
  v973 = (void (*)(_QWORD))(v865 + (v870 >> 3));
  if ((unint64_t)v973 >= v866)
  {
    v973 = *v703;
    if (*v703)
    {
      v973(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v973) = 0;
      v870 = *(_DWORD *)(a2 + 16);
      v865 = *(_QWORD *)a2;
      v866 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v973) = (*(unsigned __int8 *)v973 >> (~(_BYTE)v870++ & 7)) & 1;
    *v740 = v870;
  }
  v974 = v972 | (4 * (_DWORD)v973);
  v975 = (void (*)(_QWORD))(v865 + (v870 >> 3));
  if ((unint64_t)v975 >= v866)
  {
    v975 = *v703;
    if (*v703)
    {
      v975(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
      LODWORD(v975) = 0;
      v870 = *(_DWORD *)(a2 + 16);
      v865 = *(_QWORD *)a2;
      v866 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    LODWORD(v975) = (*(unsigned __int8 *)v975 >> (~(_BYTE)v870++ & 7)) & 1;
    *v740 = v870;
  }
  v976 = v974 | (2 * (_DWORD)v975);
  v977 = (unsigned __int8 *)(v865 + (v870 >> 3));
  if ((unint64_t)v977 >= v866)
  {
    if (*v703)
    {
      (*v703)(*(_QWORD *)(a2 + 24));
      v703 = (void (**)(_QWORD))(a2 + 32);
      v740 = (unsigned int *)(a2 + 16);
    }
    v978 = 0;
  }
  else
  {
    v978 = (*v977 >> (~(_BYTE)v870 & 7)) & 1;
    *v740 = v870 + 1;
  }
  v979 = (v978 | v976) << 25 >> 25;
  v726 = (BOOL *)v1994;
  *(_DWORD *)(v4 + 15828) = v979;
  v876 = *(unsigned int *)(a2 + 16);
  v877 = *(_QWORD *)a2;
  v878 = *(_QWORD *)(a2 + 8);
  v879 = (unsigned __int8 *)(*(_QWORD *)a2 + (v876 >> 3));
  if ((unint64_t)v879 >= v878)
    goto LABEL_1379;
LABEL_1431:
  v897 = v740;
  v898 = *v879;
  v899 = v876 + 1;
  *v897 = v876 + 1;
  if (((v898 >> (~(_BYTE)v876 & 7)) & 1) != 0)
  {
    v900 = (unsigned __int8 *)(v877 + (v899 >> 3));
    if ((unint64_t)v900 >= v878)
    {
      v703 = (void (**)(_QWORD))(a2 + 32);
      if (*v2016)
      {
        (*v2016)(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v899 = *(_DWORD *)(a2 + 16);
        v877 = *(_QWORD *)a2;
        v878 = *(_QWORD *)(a2 + 8);
      }
      v902 = (unsigned int *)(a2 + 16);
      v903 = 0;
      v904 = (void (*)(_QWORD))(v877 + (v899 >> 3));
      if ((unint64_t)v904 < v878)
        goto LABEL_1628;
LABEL_1434:
      v904 = *v703;
      if (*v703)
      {
        v904(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v902 = (unsigned int *)(a2 + 16);
        LODWORD(v904) = 0;
        v899 = *(_DWORD *)(a2 + 16);
        v877 = *(_QWORD *)a2;
        v878 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      v901 = (*v900 >> (~(_BYTE)v899 & 7)) & 1;
      v899 = v876 + 2;
      v703 = (void (**)(_QWORD))(a2 + 32);
      v902 = (unsigned int *)(a2 + 16);
      *v2017 = v876 + 2;
      v903 = v901 << 6;
      v904 = (void (*)(_QWORD))(v877 + ((v876 + 2) >> 3));
      if ((unint64_t)v904 >= v878)
        goto LABEL_1434;
LABEL_1628:
      LODWORD(v904) = (*(unsigned __int8 *)v904 >> (~(_BYTE)v899++ & 7)) & 1;
      *v902 = v899;
    }
    v980 = v903 | (32 * (_DWORD)v904);
    v981 = (void (*)(_QWORD))(v877 + (v899 >> 3));
    if ((unint64_t)v981 >= v878)
    {
      v981 = *v703;
      if (*v703)
      {
        v981(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v902 = (unsigned int *)(a2 + 16);
        LODWORD(v981) = 0;
        v899 = *(_DWORD *)(a2 + 16);
        v877 = *(_QWORD *)a2;
        v878 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v981) = (*(unsigned __int8 *)v981 >> (~(_BYTE)v899++ & 7)) & 1;
      *v902 = v899;
    }
    v982 = v980 | (16 * (_DWORD)v981);
    v983 = (void (*)(_QWORD))(v877 + (v899 >> 3));
    if ((unint64_t)v983 >= v878)
    {
      v983 = *v703;
      if (*v703)
      {
        v983(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v902 = (unsigned int *)(a2 + 16);
        LODWORD(v983) = 0;
        v899 = *(_DWORD *)(a2 + 16);
        v877 = *(_QWORD *)a2;
        v878 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v983) = (*(unsigned __int8 *)v983 >> (~(_BYTE)v899++ & 7)) & 1;
      *v902 = v899;
    }
    v984 = v982 | (8 * (_DWORD)v983);
    v985 = (void (*)(_QWORD))(v877 + (v899 >> 3));
    if ((unint64_t)v985 >= v878)
    {
      v985 = *v703;
      if (*v703)
      {
        v985(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v902 = (unsigned int *)(a2 + 16);
        LODWORD(v985) = 0;
        v899 = *(_DWORD *)(a2 + 16);
        v877 = *(_QWORD *)a2;
        v878 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v985) = (*(unsigned __int8 *)v985 >> (~(_BYTE)v899++ & 7)) & 1;
      *v902 = v899;
    }
    v986 = v984 | (4 * (_DWORD)v985);
    v987 = (void (*)(_QWORD))(v877 + (v899 >> 3));
    if ((unint64_t)v987 >= v878)
    {
      v987 = *v703;
      if (*v703)
      {
        v987(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
        v902 = (unsigned int *)(a2 + 16);
        LODWORD(v987) = 0;
        v899 = *(_DWORD *)(a2 + 16);
        v877 = *(_QWORD *)a2;
        v878 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v987) = (*(unsigned __int8 *)v987 >> (~(_BYTE)v899++ & 7)) & 1;
      *v902 = v899;
    }
    v988 = v986 | (2 * (_DWORD)v987);
    v989 = (unsigned __int8 *)(v877 + (v899 >> 3));
    if ((unint64_t)v989 >= v878)
    {
      if (*v703)
      {
        (*v703)(*(_QWORD *)(a2 + 24));
        v703 = (void (**)(_QWORD))(a2 + 32);
      }
      v990 = 0;
    }
    else
    {
      v990 = (*v989 >> (~(_BYTE)v899 & 7)) & 1;
      *v902 = v899 + 1;
    }
    LODWORD(v880) = (v990 | v988) << 25 >> 25;
    v726 = (BOOL *)v1994;
LABEL_1651:
    *(_DWORD *)(v4 + 15836) = (_DWORD)v880;
    v741 = *(unsigned int *)(a2 + 16);
    v742 = *(_QWORD *)a2;
    v743 = *(_QWORD *)(a2 + 8);
    v744 = (unsigned __int8 *)(*(_QWORD *)a2 + (v741 >> 3));
    if ((unint64_t)v744 < v743)
      goto LABEL_1200;
  }
  else
  {
    v703 = (void (**)(_QWORD))(a2 + 32);
    *(_DWORD *)(v4 + 15836) = 0;
    v741 = *(unsigned int *)(a2 + 16);
    v742 = *(_QWORD *)a2;
    v743 = *(_QWORD *)(a2 + 8);
    v744 = (unsigned __int8 *)(*(_QWORD *)a2 + (v741 >> 3));
    if ((unint64_t)v744 < v743)
      goto LABEL_1200;
  }
LABEL_1246:
  if (*v703)
    (*v703)(*(_QWORD *)(a2 + 24));
  *v726 = 0;
LABEL_1249:
  v766 = 0;
  *((_DWORD *)v726 + 1) = 0;
  *((_DWORD *)v726 + 2) = 0;
LABEL_1278:
  *((_DWORD *)v726 + 3) = v766;
  *(_DWORD *)(v4 + 10656) = *(_DWORD *)(v597 + 72);
  if (*(_BYTE *)(*(_QWORD *)(v1985 + 312) + 77))
    v797 = 1;
  else
    v797 = 3;
  if ((int)v5[160] < v797 || (signed int)v5[162] < *(_DWORD *)(v4 + 15736) || (int)v5[161] < (int)v5[1])
  {
    av1_free_above_context_buffers((uint64_t *)(v4 + 40504));
    v798 = *(_BYTE *)(*(_QWORD *)(v1985 + 312) + 77) ? 1 : 3;
    if (av1_alloc_above_context_buffers(v4 + 40504, v5[1], *(_DWORD *)(v4 + 15736), v798))
      aom_internal_error(v4 + 390860, 2, "Failed to allocate context buffers");
  }
  if (*(_DWORD *)(v4 + 15708) == 7)
    av1_setup_past_independence(v612);
  v799 = v1994 + 16;
  *(_WORD *)(v1994 + 17) = 0;
  v1994[19] = 0;
  v800 = *(unsigned int *)(a2 + 16);
  v801 = *(_QWORD *)a2;
  v802 = *(_QWORD *)(a2 + 8);
  v803 = (unsigned __int8 *)(*(_QWORD *)a2 + (v800 >> 3));
  v804 = v1988;
  if ((unint64_t)v803 >= v802)
  {
    if (*v2016)
      (*v2016)(*(_QWORD *)(a2 + 24));
    goto LABEL_1336;
  }
  v805 = *v803 >> (~(_BYTE)v800 & 7);
  v806 = v800 + 1;
  *v2017 = v800 + 1;
  *v799 = v805 & 1;
  if ((v805 & 1) == 0)
  {
LABEL_1336:
    v834 = *(_QWORD *)(v4 + 15432);
    v835 = *(void **)(v834 + 80);
    if (v835)
      bzero(v835, *(int *)(v834 + 264) * (uint64_t)*(int *)(v834 + 260));
    *(_OWORD *)(v1994 + 172) = 0u;
    *((_OWORD *)v1994 + 9) = 0u;
    *((_OWORD *)v1994 + 10) = 0u;
    *((_OWORD *)v1994 + 7) = 0u;
    *((_OWORD *)v1994 + 8) = 0u;
    *((_OWORD *)v1994 + 5) = 0u;
    *((_OWORD *)v1994 + 6) = 0u;
    *((_OWORD *)v1994 + 3) = 0u;
    *((_OWORD *)v1994 + 4) = 0u;
    *(_OWORD *)v799 = 0u;
    *((_OWORD *)v1994 + 2) = 0u;
    goto LABEL_1339;
  }
  v807 = *(_QWORD *)(v4 + 15424);
  if (!v807)
    goto LABEL_1297;
  if (*(_DWORD *)(v4 + 15732) == *(_DWORD *)(v807 + 260) && *(_DWORD *)(v4 + 15736) == *(_DWORD *)(v807 + 264))
  {
    v807 = *(_QWORD *)(v807 + 80);
LABEL_1297:
    v809 = (void (**)(_QWORD))(a2 + 32);
    v808 = (_DWORD *)(a2 + 16);
    *((_QWORD *)v1994 + 24) = v807;
    if (*(_DWORD *)(v4 + 15708) == 7)
    {
LABEL_1298:
      *(_WORD *)(v1994 + 17) = 257;
      v1994[19] = 0;
      goto LABEL_1299;
    }
  }
  else
  {
    v809 = (void (**)(_QWORD))(a2 + 32);
    v808 = (_DWORD *)(a2 + 16);
    *((_QWORD *)v1994 + 24) = 0;
    if (*(_DWORD *)(v4 + 15708) == 7)
      goto LABEL_1298;
  }
  v850 = (unsigned __int8 *)(v801 + (v806 >> 3));
  if ((unint64_t)v850 >= v802)
  {
    if (*v809)
    {
      (*v809)(*(_QWORD *)(a2 + 24));
      v809 = (void (**)(_QWORD))(a2 + 32);
      v808 = (_DWORD *)(a2 + 16);
    }
    LOBYTE(v853) = 0;
    v1994[17] = 0;
  }
  else
  {
    v851 = *v850 >> (~(_BYTE)v806 & 7);
    v852 = v800 + 2;
    *v808 = v800 + 2;
    v1994[17] = v851 & 1;
    if ((v851 & 1) != 0)
    {
      v905 = (unsigned __int8 *)(v801 + (v852 >> 3));
      if ((unint64_t)v905 >= v802)
      {
        v809 = (void (**)(_QWORD))(a2 + 32);
        if (*v2016)
        {
          (*v2016)(*(_QWORD *)(a2 + 24));
          v809 = (void (**)(_QWORD))(a2 + 32);
        }
        LOBYTE(v853) = 0;
        v808 = (_DWORD *)(a2 + 16);
      }
      else
      {
        v853 = (*v905 >> (~(_BYTE)v852 & 7)) & 1;
        v809 = (void (**)(_QWORD))(a2 + 32);
        v808 = (_DWORD *)(a2 + 16);
        *v2017 = v800 + 3;
      }
    }
    else
    {
      LOBYTE(v853) = 0;
      v809 = (void (**)(_QWORD))(a2 + 32);
      v808 = (_DWORD *)(a2 + 16);
    }
  }
  v1994[19] = v853;
  v881 = *(unsigned int *)(a2 + 16);
  v882 = (unsigned __int8 *)(*(_QWORD *)a2 + (v881 >> 3));
  if ((unint64_t)v882 < *(_QWORD *)(a2 + 8))
  {
    v883 = *v882 >> (~(_BYTE)v881 & 7);
    *v808 = v881 + 1;
    v1994[18] = v883 & 1;
    if ((v883 & 1) == 0)
      goto LABEL_1391;
LABEL_1299:
    v810 = 0;
    *(_OWORD *)(v4 + 34308) = 0u;
    *(_OWORD *)(v4 + 34292) = 0u;
    *(_OWORD *)(v4 + 34276) = 0u;
    *(_OWORD *)(v4 + 34260) = 0u;
    *(_OWORD *)(v4 + 34244) = 0u;
    *(_OWORD *)(v4 + 34228) = 0u;
    *(_OWORD *)(v4 + 34212) = 0u;
    *(_OWORD *)(v4 + 34196) = 0u;
    *(_OWORD *)(v4 + 34324) = 0u;
    *(_OWORD *)(v4 + 34340) = 0u;
    while (2)
    {
      v811 = 0;
      v812 = (_DWORD *)(v4 + 4 * v810 + 34324);
LABEL_1304:
      v814 = *(unsigned int *)(a2 + 16);
      v815 = (unsigned __int8 *)(*(_QWORD *)a2 + (v814 >> 3));
      if ((unint64_t)v815 >= *(_QWORD *)(a2 + 8))
      {
        v813 = *v809;
        if (!*v809)
          goto LABEL_1303;
        v813(*(_QWORD *)(a2 + 24));
        v809 = (void (**)(_QWORD))(a2 + 32);
        v808 = (_DWORD *)(a2 + 16);
      }
      else
      {
        v816 = *v815;
        *v808 = v814 + 1;
        if (((v816 >> (~(_BYTE)v814 & 7)) & 1) != 0)
        {
          *v812 |= 1 << v811;
          v817 = seg_feature_data_max[v811];
          v818 = __clz(v817) ^ 0x1F;
          if ((v811 & 0xFE) == 6)
            v819 = 0;
          else
            v819 = v818 + 1;
          if ((unint64_t)(v811 - 5) >= 3)
          {
            v821 = 0;
            v822 = v819;
            do
            {
              while (1)
              {
                v825 = *(unsigned int *)(a2 + 16);
                v826 = (unsigned __int8 *)(*(_QWORD *)a2 + (v825 >> 3));
                if ((unint64_t)v826 >= *(_QWORD *)(a2 + 8))
                  break;
                v823 = (*v826 >> (~(_BYTE)v825 & 7)) & 1;
                *v808 = v825 + 1;
                v821 |= v823 << v822;
                v824 = v822-- + 1;
                if (v824 <= 1)
                  goto LABEL_1320;
              }
              if (*v809)
              {
                (*v809)(*(_QWORD *)(a2 + 24));
                v809 = (void (**)(_QWORD))(a2 + 32);
                v808 = (_DWORD *)(a2 + 16);
              }
              v827 = v822-- + 1;
            }
            while (v827 > 1);
LABEL_1320:
            v820 = v821 << ~(_BYTE)v819 >> ~(_BYTE)v819;
          }
          else if ((v811 & 0xFE) == 6)
          {
            v820 = 0;
          }
          else
          {
            v820 = 0;
            do
            {
              while (1)
              {
                v831 = *(unsigned int *)(a2 + 16);
                v832 = (unsigned __int8 *)(*(_QWORD *)a2 + (v831 >> 3));
                if ((unint64_t)v832 >= *(_QWORD *)(a2 + 8))
                  break;
                v829 = (*v832 >> (~(_BYTE)v831 & 7)) & 1;
                *v808 = v831 + 1;
                v820 |= v829 << v818;
                v830 = v818-- + 1;
                if (v830 <= 1)
                  goto LABEL_1321;
              }
              if (*v809)
              {
                (*v809)(*(_QWORD *)(a2 + 24));
                v809 = (void (**)(_QWORD))(a2 + 32);
                v808 = (_DWORD *)(a2 + 16);
              }
              v833 = v818-- + 1;
            }
            while (v833 > 1);
          }
LABEL_1321:
          LODWORD(v813) = -v817;
          if (v820 >= v817)
            v828 = v817;
          else
            v828 = v820;
          if (v820 >= (int)v813)
            LOWORD(v813) = v828;
          v4 = v2003;
LABEL_1303:
          *(_WORD *)(v4 + 16 * v810 + 2 * v811++ + 34196) = (_WORD)v813;
          if (v811 == 8)
          {
            if (++v810 == 8)
            {
              v799 = v1994 + 16;
              av1_calculate_segdata((uint64_t)(v1994 + 16));
              v804 = v1988;
              goto LABEL_1339;
            }
            continue;
          }
          goto LABEL_1304;
        }
      }
      break;
    }
    LOWORD(v813) = 0;
    goto LABEL_1303;
  }
  if (*v809)
    (*v809)(*(_QWORD *)(a2 + 24));
  v1994[18] = 0;
LABEL_1391:
  v884 = *(_QWORD *)(v4 + 15424);
  if (v884)
    segfeatures_copy((uint64_t)(v1994 + 16), v884 + 88);
LABEL_1339:
  segfeatures_copy(*(_QWORD *)(v4 + 15432) + 88, (uint64_t)v799);
  *(_OWORD *)(v1985 + 4) = xmmword_208F08A60;
  v836 = *(_DWORD *)(v4 + 15816);
  if (v836 <= 0)
  {
    *(_DWORD *)v1985 = 0;
    v844 = v1994;
    goto LABEL_1471;
  }
  v837 = *(unsigned int *)(a2 + 16);
  v838 = *(_QWORD *)a2;
  v839 = *(_QWORD *)(a2 + 8);
  v840 = (unsigned __int8 *)(*(_QWORD *)a2 + (v837 >> 3));
  if ((unint64_t)v840 >= v839)
  {
    v844 = v1994;
    if (*v2016)
      (*v2016)(*(_QWORD *)(a2 + 24));
    *(_DWORD *)v1985 = 0;
    goto LABEL_1471;
  }
  v841 = *v840 >> (~(_BYTE)v837 & 7);
  v842 = v837 + 1;
  *v2017 = v837 + 1;
  *(_DWORD *)v1985 = v841 & 1;
  v843 = (void (**)(_QWORD))(a2 + 32);
  v844 = v1994;
  if ((v841 & 1) == 0)
    goto LABEL_1471;
  *(_DWORD *)(v4 + 10724) = v836;
  v845 = (unsigned __int8 *)(v838 + (v842 >> 3));
  if ((unint64_t)v845 >= v839)
  {
    if (*v2016)
    {
      (*v2016)(*(_QWORD *)(a2 + 24));
      v843 = (void (**)(_QWORD))(a2 + 32);
      v847 = (_DWORD *)(a2 + 16);
      v842 = *(_DWORD *)(a2 + 16);
      v848 = 0;
      v849 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v842 >> 3));
      if ((unint64_t)v849 >= *(_QWORD *)(a2 + 8))
        goto LABEL_1344;
    }
    else
    {
      v847 = (_DWORD *)(a2 + 16);
      v848 = 0;
      v849 = (void (*)(_QWORD))(v838 + (v842 >> 3));
      if ((unint64_t)v849 >= v839)
        goto LABEL_1344;
    }
    goto LABEL_1441;
  }
  v846 = (*v845 >> (~(_BYTE)v842 & 7)) & 1;
  v842 = v837 + 2;
  v847 = (_DWORD *)(a2 + 16);
  *v2017 = v837 + 2;
  v848 = 2 * v846;
  v849 = (void (*)(_QWORD))(v838 + ((v837 + 2) >> 3));
  if ((unint64_t)v849 < v839)
  {
LABEL_1441:
    LODWORD(v849) = (*(unsigned __int8 *)v849 >> (~(_BYTE)v842 & 7)) & 1;
    *v847 = v842 + 1;
    goto LABEL_1442;
  }
LABEL_1344:
  v849 = *v843;
  if (*v843)
  {
    v849(*(_QWORD *)(a2 + 24));
    v843 = (void (**)(_QWORD))(a2 + 32);
    v847 = (_DWORD *)(a2 + 16);
    LOBYTE(v849) = 0;
  }
LABEL_1442:
  *(_DWORD *)(v1985 + 4) = 1 << (v849 | v848);
  if (v804[4])
  {
    v844 = v1994;
    if (!*(_DWORD *)(v1985 + 8))
      goto LABEL_1471;
LABEL_1454:
    v908 = *(unsigned int *)(a2 + 16);
    v909 = *(_QWORD *)a2;
    v910 = *(_QWORD *)(a2 + 8);
    v911 = (unsigned __int8 *)(*(_QWORD *)a2 + (v908 >> 3));
    if ((unint64_t)v911 >= v910)
    {
      v916 = *v843;
      if (*v843)
      {
        v916(*(_QWORD *)(a2 + 24));
        v843 = (void (**)(_QWORD))(a2 + 32);
        LOBYTE(v916) = 0;
        LODWORD(v908) = *(_DWORD *)(a2 + 16);
        v909 = *(_QWORD *)a2;
        v910 = *(_QWORD *)(a2 + 8);
      }
      v913 = (_DWORD *)(a2 + 16);
      v914 = 2 * (_BYTE)v916;
      v915 = (void (*)(_QWORD))(v909 + (v908 >> 3));
      if ((unint64_t)v915 < v910)
        goto LABEL_1461;
LABEL_1456:
      v915 = *v843;
      if (*v843)
      {
        v915(*(_QWORD *)(a2 + 24));
        v843 = (void (**)(_QWORD))(a2 + 32);
        v913 = (_DWORD *)(a2 + 16);
        LOBYTE(v915) = 0;
        LODWORD(v908) = *(_DWORD *)(a2 + 16);
        v909 = *(_QWORD *)a2;
        v910 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      v912 = (*v911 >> (~(_BYTE)v908 & 7)) & 1;
      LODWORD(v908) = v908 + 1;
      v913 = (_DWORD *)(a2 + 16);
      *v2017 = v908;
      v914 = 2 * v912;
      v915 = (void (*)(_QWORD))(v909 + (v908 >> 3));
      if ((unint64_t)v915 >= v910)
        goto LABEL_1456;
LABEL_1461:
      LODWORD(v915) = (*(unsigned __int8 *)v915 >> (~(_BYTE)v908 & 7)) & 1;
      LODWORD(v908) = v908 + 1;
      *v913 = v908;
    }
    *(_DWORD *)(v1985 + 12) = 1 << (v915 | v914);
    v917 = (unsigned __int8 *)(v909 + (v908 >> 3));
    if ((unint64_t)v917 >= v910)
    {
      v844 = v1994;
      if (*v843)
        (*v843)(*(_QWORD *)(a2 + 24));
      v918 = 0;
    }
    else
    {
      v918 = (*v917 >> (~(_BYTE)v908 & 7)) & 1;
      *v913 = v908 + 1;
      v844 = v1994;
    }
    *(_DWORD *)(v1985 + 16) = v918;
    v919 = *(unsigned __int8 *)(*(_QWORD *)(v1985 + 312) + 77);
    *v1978 = 0;
    if (v919)
      v920 = 2;
    else
      v920 = 4;
    bzero((void *)(v4 + 10753), v920);
  }
  else
  {
    v906 = *(unsigned int *)(a2 + 16);
    v907 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v906 >> 3));
    v844 = v1994;
    if ((unint64_t)v907 >= *(_QWORD *)(a2 + 8))
    {
      v907 = *v843;
      if (*v843)
      {
        v907(*(_QWORD *)(a2 + 24));
        v843 = (void (**)(_QWORD))(a2 + 32);
        LODWORD(v907) = 0;
      }
    }
    else
    {
      LODWORD(v907) = (*(unsigned __int8 *)v907 >> (~(_BYTE)v906 & 7)) & 1;
      *v847 = v906 + 1;
    }
    *(_DWORD *)(v1985 + 8) = (_DWORD)v907;
    if ((_DWORD)v907)
      goto LABEL_1454;
  }
LABEL_1471:
  *(_DWORD *)(v4 + 10728) = v804[2];
  v921 = *(_DWORD *)(v4 + 15816);
  v922 = *v799;
  v923 = v921;
  if (*v799)
  {
    v923 = *(_DWORD *)(v4 + 15816);
    if ((v844[148] & 1) != 0)
    {
      v924 = v921 + *((__int16 *)v844 + 10);
      if (v924 >= 255)
        v924 = 255;
      v923 = v924 & ~(v924 >> 31);
    }
  }
  if (v923 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v925 = 0;
    *(_DWORD *)(v4 + 10692) = 0;
    *(_DWORD *)(v4 + 10660) = v923;
    v926 = v921;
    if (v922)
    {
LABEL_1482:
      v926 = v921;
      if ((v844[152] & 1) != 0)
      {
        v927 = v921 + *((__int16 *)v844 + 18);
        if (v927 >= 255)
          v927 = 255;
        v926 = v927 & ~(v927 >> 31);
      }
    }
  }
  else
  {
    v925 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10692) = v925;
    *(_DWORD *)(v4 + 10660) = 0;
    v926 = v921;
    if (v922)
      goto LABEL_1482;
  }
  if (v926 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v928 = 0;
    *(_DWORD *)(v4 + 10696) = 0;
    *(_DWORD *)(v4 + 10664) = v926;
    v929 = v921;
    if (v922)
    {
LABEL_1492:
      v929 = v921;
      if ((v844[156] & 1) != 0)
      {
        v930 = v921 + *((__int16 *)v844 + 26);
        if (v930 >= 255)
          v930 = 255;
        v929 = v930 & ~(v930 >> 31);
      }
    }
  }
  else
  {
    v928 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10696) = v928;
    *(_DWORD *)(v4 + 10664) = 0;
    v929 = v921;
    if (v922)
      goto LABEL_1492;
  }
  if (v929 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v931 = 0;
    *(_DWORD *)(v4 + 10700) = 0;
    *(_DWORD *)(v4 + 10668) = v929;
    v932 = v921;
    if (v922)
    {
LABEL_1502:
      v932 = v921;
      if ((v844[160] & 1) != 0)
      {
        v933 = v921 + *((__int16 *)v844 + 34);
        if (v933 >= 255)
          v933 = 255;
        v932 = v933 & ~(v933 >> 31);
      }
    }
  }
  else
  {
    v931 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10700) = v931;
    *(_DWORD *)(v4 + 10668) = 0;
    v932 = v921;
    if (v922)
      goto LABEL_1502;
  }
  if (v932 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v934 = 0;
    *(_DWORD *)(v4 + 10704) = 0;
    *(_DWORD *)(v4 + 10672) = v932;
    v935 = v921;
    if (v922)
    {
LABEL_1512:
      v935 = v921;
      if ((v844[164] & 1) != 0)
      {
        v936 = v921 + *((__int16 *)v844 + 42);
        if (v936 >= 255)
          v936 = 255;
        v935 = v936 & ~(v936 >> 31);
      }
    }
  }
  else
  {
    v934 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10704) = v934;
    *(_DWORD *)(v4 + 10672) = 0;
    v935 = v921;
    if (v922)
      goto LABEL_1512;
  }
  if (v935 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v937 = 0;
    *(_DWORD *)(v4 + 10708) = 0;
    *(_DWORD *)(v4 + 10676) = v935;
    v938 = v921;
    if (v922)
    {
LABEL_1522:
      v938 = v921;
      if ((v844[168] & 1) != 0)
      {
        v939 = v921 + *((__int16 *)v844 + 50);
        if (v939 >= 255)
          v939 = 255;
        v938 = v939 & ~(v939 >> 31);
      }
    }
  }
  else
  {
    v937 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10708) = v937;
    *(_DWORD *)(v4 + 10676) = 0;
    v938 = v921;
    if (v922)
      goto LABEL_1522;
  }
  if (v938 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v940 = 0;
    *(_DWORD *)(v4 + 10712) = 0;
    *(_DWORD *)(v4 + 10680) = v938;
    v941 = v921;
    if (v922)
    {
LABEL_1532:
      v941 = v921;
      if ((v844[172] & 1) != 0)
      {
        v942 = v921 + *((__int16 *)v844 + 58);
        if (v942 >= 255)
          v942 = 255;
        v941 = v942 & ~(v942 >> 31);
      }
    }
  }
  else
  {
    v940 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10712) = v940;
    *(_DWORD *)(v4 + 10680) = 0;
    v941 = v921;
    if (v922)
      goto LABEL_1532;
  }
  if (v941 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    v943 = 0;
    *(_DWORD *)(v4 + 10716) = 0;
    *(_DWORD *)(v4 + 10684) = v941;
    if (v922)
    {
LABEL_1542:
      if ((v844[176] & 1) != 0)
      {
        v944 = v921 + *((__int16 *)v844 + 66);
        if (v944 >= 255)
          v944 = 255;
        v921 = v944 & ~(v944 >> 31);
      }
    }
  }
  else
  {
    v943 = *(_DWORD *)(v4 + 15836) == 0;
    *(_DWORD *)(v4 + 10716) = v943;
    *(_DWORD *)(v4 + 10684) = 0;
    if (v922)
      goto LABEL_1542;
  }
  if (v921 || *(_DWORD *)(v4 + 15820) || *(_DWORD *)(v4 + 15824) || *(_DWORD *)(v4 + 15832) || *(_DWORD *)(v4 + 15828))
  {
    LOBYTE(v945) = 0;
    *(_DWORD *)(v4 + 10720) = 0;
    *(_DWORD *)(v4 + 10688) = v921;
    if (v922)
      goto LABEL_1552;
LABEL_1668:
    LOBYTE(v945) = v925;
    goto LABEL_1669;
  }
  v945 = *(_DWORD *)(v4 + 15836) == 0;
  *(_DWORD *)(v4 + 10720) = v945;
  *(_DWORD *)(v4 + 10688) = 0;
  if (!v922)
    goto LABEL_1668;
LABEL_1552:
  if (!v925 || !v928 || !v931 || !v934 || !v937 || !v940 || !v943)
  {
    v946 = 0;
    v947 = 0;
    v804[7] = 0;
    v1979 = v804 + 7;
    goto LABEL_1672;
  }
LABEL_1669:
  v804[7] = v945;
  v1979 = v804 + 7;
  if (v945)
  {
    v991 = 0;
    v947 = *(_DWORD *)(v4 + 15256) == *(_DWORD *)(v4 + 15272);
    v946 = 1;
  }
  else
  {
    v946 = 0;
    v947 = 0;
LABEL_1672:
    v991 = 1;
  }
  v992 = 0;
  v804[8] = v947;
  v993 = (int *)(v4 + 10660);
  v994 = v4 + 30528;
  v995 = *(_DWORD *)(*(_QWORD *)(v1985 + 312) + 72);
  v996 = *(_DWORD *)(v4 + 15820);
  v997 = *(_DWORD *)(v4 + 15824);
  v998 = *(_DWORD *)(v4 + 15832);
  v999 = *(_DWORD *)(v4 + 15828);
  v1000 = *(_DWORD *)(v4 + 15836);
  v1001 = *v844;
  v1002 = (int *)(v4 + 10660);
  while (2)
  {
    v1004 = *v1002++;
    v1003 = v1004;
    v1005 = v996 + v1004;
    if (v996 + v1004 >= 255)
      v1005 = 255;
    switch(v995)
    {
      case 8:
        v1006 = dc_qlookup_QTX;
LABEL_1682:
        *((_WORD *)v993 + 2590) = v1006[v1005 & ~(v1005 >> 31)];
        if (v1003 >= 255)
          v1007 = 255;
        else
          v1007 = v1003;
        if (v995 != 8)
          goto LABEL_1686;
        v1008 = ac_qlookup_QTX;
        goto LABEL_1694;
      case 12:
        v1006 = dc_qlookup_12_QTX;
        goto LABEL_1682;
      case 10:
        v1006 = dc_qlookup_10_QTX;
        goto LABEL_1682;
    }
    *((_WORD *)v993 + 2590) = -1;
    if (v1003 >= 255)
      v1007 = 255;
    else
      v1007 = v1003;
LABEL_1686:
    if (v995 == 12)
    {
      v1008 = ac_qlookup_12_QTX;
LABEL_1694:
      *((_WORD *)v993 + 2591) = v1008[v1007 & ~(v1007 >> 31)];
      v1009 = v997 + v1003;
      if (v997 + v1003 >= 255)
        v1009 = 255;
      if (v995 != 8)
        goto LABEL_1697;
      v1010 = dc_qlookup_QTX;
      goto LABEL_1705;
    }
    if (v995 == 10)
    {
      v1008 = ac_qlookup_10_QTX;
      goto LABEL_1694;
    }
    *((_WORD *)v993 + 2591) = -1;
    v1009 = v997 + v1003;
    if (v997 + v1003 >= 255)
      v1009 = 255;
LABEL_1697:
    if (v995 == 12)
    {
      v1010 = dc_qlookup_12_QTX;
LABEL_1705:
      *((_WORD *)v993 + 2606) = v1010[v1009 & ~(v1009 >> 31)];
      v1011 = v998 + v1003;
      if (v998 + v1003 >= 255)
        v1011 = 255;
      if (v995 != 8)
        goto LABEL_1708;
      v1012 = ac_qlookup_QTX;
      goto LABEL_1716;
    }
    if (v995 == 10)
    {
      v1010 = dc_qlookup_10_QTX;
      goto LABEL_1705;
    }
    *((_WORD *)v993 + 2606) = -1;
    v1011 = v998 + v1003;
    if (v998 + v1003 >= 255)
      v1011 = 255;
LABEL_1708:
    if (v995 == 12)
    {
      v1012 = ac_qlookup_12_QTX;
LABEL_1716:
      *((_WORD *)v993 + 2607) = v1012[v1011 & ~(v1011 >> 31)];
      v1013 = v999 + v1003;
      if (v999 + v1003 >= 255)
        v1013 = 255;
      if (v995 != 8)
        goto LABEL_1719;
      v1014 = dc_qlookup_QTX;
LABEL_1727:
      *((_WORD *)v993 + 2622) = v1014[v1013 & ~(v1013 >> 31)];
      v1015 = v1000 + v1003;
      if (v1000 + v1003 >= 255)
        v1015 = 255;
      if (v995 != 8)
        goto LABEL_1730;
      *((_WORD *)v993 + 2623) = ac_qlookup_QTX[v1015 & ~(v1015 >> 31)];
      if (v1001)
        goto LABEL_1742;
      goto LABEL_1743;
    }
    if (v995 == 10)
    {
      v1012 = ac_qlookup_10_QTX;
      goto LABEL_1716;
    }
    *((_WORD *)v993 + 2607) = -1;
    v1013 = v999 + v1003;
    if (v999 + v1003 >= 255)
      v1013 = 255;
LABEL_1719:
    if (v995 == 12)
    {
      v1014 = dc_qlookup_12_QTX;
      goto LABEL_1727;
    }
    if (v995 == 10)
    {
      v1014 = dc_qlookup_10_QTX;
      goto LABEL_1727;
    }
    *((_WORD *)v993 + 2622) = -1;
    v1015 = v1000 + v1003;
    if (v1000 + v1003 >= 255)
      v1015 = 255;
LABEL_1730:
    if (v995 == 12)
    {
      *((_WORD *)v993 + 2623) = ac_qlookup_12_QTX[v1015 & ~(v1015 >> 31)];
      if (v1001)
        goto LABEL_1742;
LABEL_1743:
      v1016 = 0;
      v1017 = 15;
      goto LABEL_1745;
    }
    if (v995 == 10)
    {
      *((_WORD *)v993 + 2623) = ac_qlookup_10_QTX[v1015 & ~(v1015 >> 31)];
      if (!v1001)
        goto LABEL_1743;
    }
    else
    {
      *((_WORD *)v993 + 2623) = -1;
      if (!v1001)
        goto LABEL_1743;
    }
LABEL_1742:
    if (v993[8])
      goto LABEL_1743;
    v1017 = *((_DWORD *)v1994 + 1);
    v1016 = 1;
LABEL_1745:
    v1018 = v4 + 456 * v1017;
    *(_OWORD *)v994 = *(_OWORD *)(v1018 + 15936);
    *(_OWORD *)(v994 + 16) = *(_OWORD *)(v1018 + 15952);
    *(_OWORD *)(v994 + 32) = *(_OWORD *)(v1018 + 15968);
    *(_OWORD *)(v994 + 48) = *(_OWORD *)(v1018 + 15984);
    *(_OWORD *)(v994 + 64) = *(_OWORD *)(v1018 + 16000);
    *(_OWORD *)(v994 + 80) = *(_OWORD *)(v1018 + 16016);
    *(_OWORD *)(v994 + 96) = *(_OWORD *)(v1018 + 16032);
    *(_OWORD *)(v994 + 112) = *(_OWORD *)(v1018 + 16048);
    *(_OWORD *)(v994 + 128) = *(_OWORD *)(v1018 + 16064);
    *(_QWORD *)(v994 + 144) = *(_QWORD *)(v1018 + 16080);
    if (v1016)
      v1019 = *((_DWORD *)v1994 + 2);
    else
      v1019 = 15;
    v1020 = v4 + 456 * v1019;
    *(_OWORD *)(v994 + 1216) = *(_OWORD *)(v1020 + 16088);
    *(_OWORD *)(v994 + 1232) = *(_OWORD *)(v1020 + 16104);
    *(_OWORD *)(v994 + 1248) = *(_OWORD *)(v1020 + 16120);
    *(_OWORD *)(v994 + 1264) = *(_OWORD *)(v1020 + 16136);
    *(_OWORD *)(v994 + 1280) = *(_OWORD *)(v1020 + 16152);
    *(_OWORD *)(v994 + 1296) = *(_OWORD *)(v1020 + 16168);
    *(_OWORD *)(v994 + 1312) = *(_OWORD *)(v1020 + 16184);
    *(_OWORD *)(v994 + 1328) = *(_OWORD *)(v1020 + 16200);
    *(_OWORD *)(v994 + 1344) = *(_OWORD *)(v1020 + 16216);
    *(_QWORD *)(v994 + 1360) = *(_QWORD *)(v1020 + 16232);
    if (v1016)
      v1021 = *((_DWORD *)v1994 + 3);
    else
      v1021 = 15;
    v1022 = v4 + 456 * v1021;
    *(_OWORD *)(v994 + 2432) = *(_OWORD *)(v1022 + 16240);
    *(_OWORD *)(v994 + 2448) = *(_OWORD *)(v1022 + 16256);
    *(_OWORD *)(v994 + 2464) = *(_OWORD *)(v1022 + 16272);
    *(_OWORD *)(v994 + 2480) = *(_OWORD *)(v1022 + 16288);
    *(_OWORD *)(v994 + 2496) = *(_OWORD *)(v1022 + 16304);
    *(_OWORD *)(v994 + 2512) = *(_OWORD *)(v1022 + 16320);
    *(_OWORD *)(v994 + 2528) = *(_OWORD *)(v1022 + 16336);
    *(_OWORD *)(v994 + 2544) = *(_OWORD *)(v1022 + 16352);
    *(_OWORD *)(v994 + 2560) = *(_OWORD *)(v1022 + 16368);
    *(_QWORD *)(v994 + 2576) = *(_QWORD *)(v1022 + 0x4000);
    if (v922)
    {
      v994 += 152;
      v993 = v1002;
      v635 = v992++ >= 7;
      if (!v635)
        continue;
    }
    break;
  }
  if ((v991 & 1) == 0)
  {
    v1026 = v1982;
    *(_QWORD *)v1981 = 0;
    v1025 = (void (**)(_QWORD))(a2 + 32);
    v1024 = (_DWORD *)(a2 + 16);
    v1027 = v1988;
    v1023 = v1989;
LABEL_1759:
    v1987[32] = 0;
    *v1987 = 0;
    v1987[16] = 0;
    if (v947)
      goto LABEL_1764;
LABEL_1760:
    if (!*(_BYTE *)(v1023 + 68))
      goto LABEL_1764;
    if (v1027[4] | v946)
      goto LABEL_1762;
LABEL_1765:
    v1028 = *(unsigned __int8 *)(*(_QWORD *)(v1985 + 312) + 77);
    v1029 = *(_QWORD *)(v4 + 15424);
    if (v1029)
    {
      *(_QWORD *)(v1981 + 22) = *(_QWORD *)(v1029 + 1468);
      *(_WORD *)(v1981 + 30) = *(_WORD *)(v1029 + 1476);
      v1030 = *(unsigned int *)(a2 + 16);
      v1031 = *(_QWORD *)a2;
      v1032 = *(_QWORD *)(a2 + 8);
      v1033 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1030 >> 3));
      if ((unint64_t)v1033 < v1032)
      {
LABEL_1767:
        LODWORD(v1033) = (*(unsigned __int8 *)v1033 >> (~(_BYTE)v1030 & 7)) & 1;
        LODWORD(v1030) = v1030 + 1;
        *v1024 = v1030;
        goto LABEL_1771;
      }
    }
    else
    {
      *(_QWORD *)(v1981 + 22) = 0xFFFF00FF00000001;
      *(_WORD *)(v1981 + 30) = 0;
      v1030 = *(unsigned int *)(a2 + 16);
      v1031 = *(_QWORD *)a2;
      v1032 = *(_QWORD *)(a2 + 8);
      v1033 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1030 >> 3));
      if ((unint64_t)v1033 < v1032)
        goto LABEL_1767;
    }
    v1033 = *v1025;
    if (*v1025)
    {
      v1033(*(_QWORD *)(a2 + 24));
      v1025 = (void (**)(_QWORD))(a2 + 32);
      v1024 = (_DWORD *)(a2 + 16);
      LODWORD(v1033) = 0;
      LODWORD(v1030) = *(_DWORD *)(a2 + 16);
      v1031 = *(_QWORD *)a2;
      v1032 = *(_QWORD *)(a2 + 8);
    }
LABEL_1771:
    v1034 = 32 * (_DWORD)v1033;
    v1035 = (void (*)(_QWORD))(v1031 + (v1030 >> 3));
    if ((unint64_t)v1035 >= v1032)
    {
      v1035 = *v1025;
      if (*v1025)
      {
        v1035(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1035) = 0;
        LODWORD(v1030) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1035) = (*(unsigned __int8 *)v1035 >> (~(_BYTE)v1030 & 7)) & 1;
      LODWORD(v1030) = v1030 + 1;
      *v1024 = v1030;
    }
    v1036 = v1034 | (16 * (_DWORD)v1035);
    v1037 = (void (*)(_QWORD))(v1031 + (v1030 >> 3));
    if ((unint64_t)v1037 >= v1032)
    {
      v1037 = *v1025;
      if (*v1025)
      {
        v1037(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1037) = 0;
        LODWORD(v1030) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1037) = (*(unsigned __int8 *)v1037 >> (~(_BYTE)v1030 & 7)) & 1;
      LODWORD(v1030) = v1030 + 1;
      *v1024 = v1030;
    }
    v1038 = v1036 | (8 * (_DWORD)v1037);
    v1039 = (void (*)(_QWORD))(v1031 + (v1030 >> 3));
    if ((unint64_t)v1039 >= v1032)
    {
      v1039 = *v1025;
      if (*v1025)
      {
        v1039(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1039) = 0;
        LODWORD(v1030) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1039) = (*(unsigned __int8 *)v1039 >> (~(_BYTE)v1030 & 7)) & 1;
      LODWORD(v1030) = v1030 + 1;
      *v1024 = v1030;
    }
    v1040 = v1038 | (4 * (_DWORD)v1039);
    v1041 = (void (*)(_QWORD))(v1031 + (v1030 >> 3));
    if ((unint64_t)v1041 >= v1032)
    {
      v1041 = *v1025;
      if (*v1025)
      {
        v1041(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1041) = 0;
        LODWORD(v1030) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1041) = (*(unsigned __int8 *)v1041 >> (~(_BYTE)v1030 & 7)) & 1;
      LODWORD(v1030) = v1030 + 1;
      *v1024 = v1030;
    }
    v1042 = v1040 | (2 * (_DWORD)v1041);
    v1043 = (unsigned __int8 *)(v1031 + (v1030 >> 3));
    if ((unint64_t)v1043 >= v1032)
    {
      if (*v1025)
      {
        (*v1025)(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        v1044 = 0;
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v1044 = 0;
      }
    }
    else
    {
      v1044 = (*v1043 >> (~(_BYTE)v1030 & 7)) & 1;
      *v1024 = v1030 + 1;
    }
    *(_DWORD *)v1981 = v1044 | v1042;
    v1045 = *v1024;
    v1046 = (void (*)(_QWORD))(v1031 + (v1045 >> 3));
    if ((unint64_t)v1046 >= v1032)
    {
      v1046 = *v1025;
      if (*v1025)
      {
        v1046(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1046) = 0;
        LODWORD(v1045) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1046) = (*(unsigned __int8 *)v1046 >> (~(_BYTE)v1045 & 7)) & 1;
      LODWORD(v1045) = v1045 + 1;
      *v1024 = v1045;
    }
    v1047 = 32 * (_DWORD)v1046;
    v1048 = (void (*)(_QWORD))(v1031 + (v1045 >> 3));
    if ((unint64_t)v1048 >= v1032)
    {
      v1048 = *v1025;
      if (*v1025)
      {
        v1048(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1048) = 0;
        LODWORD(v1045) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1048) = (*(unsigned __int8 *)v1048 >> (~(_BYTE)v1045 & 7)) & 1;
      LODWORD(v1045) = v1045 + 1;
      *v1024 = v1045;
    }
    v1049 = v1047 | (16 * (_DWORD)v1048);
    v1050 = (void (*)(_QWORD))(v1031 + (v1045 >> 3));
    if ((unint64_t)v1050 >= v1032)
    {
      v1050 = *v1025;
      if (*v1025)
      {
        v1050(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1050) = 0;
        LODWORD(v1045) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1050) = (*(unsigned __int8 *)v1050 >> (~(_BYTE)v1045 & 7)) & 1;
      LODWORD(v1045) = v1045 + 1;
      *v1024 = v1045;
    }
    v1051 = v1049 | (8 * (_DWORD)v1050);
    v1052 = (void (*)(_QWORD))(v1031 + (v1045 >> 3));
    if ((unint64_t)v1052 >= v1032)
    {
      v1052 = *v1025;
      if (*v1025)
      {
        v1052(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1052) = 0;
        LODWORD(v1045) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1052) = (*(unsigned __int8 *)v1052 >> (~(_BYTE)v1045 & 7)) & 1;
      LODWORD(v1045) = v1045 + 1;
      *v1024 = v1045;
    }
    v1053 = v1051 | (4 * (_DWORD)v1052);
    v1054 = (void (*)(_QWORD))(v1031 + (v1045 >> 3));
    if ((unint64_t)v1054 >= v1032)
    {
      v1054 = *v1025;
      if (*v1025)
      {
        v1054(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1054) = 0;
        LODWORD(v1045) = *(_DWORD *)(a2 + 16);
        v1031 = *(_QWORD *)a2;
        v1032 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1054) = (*(unsigned __int8 *)v1054 >> (~(_BYTE)v1045 & 7)) & 1;
      LODWORD(v1045) = v1045 + 1;
      *v1024 = v1045;
    }
    v1055 = v1053 | (2 * (_DWORD)v1054);
    v1056 = (void (*)(_QWORD))(v1031 + (v1045 >> 3));
    if ((unint64_t)v1056 >= v1032)
    {
      v1056 = *v1025;
      if (*v1025)
      {
        v1056(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1056) = 0;
      }
    }
    else
    {
      LODWORD(v1056) = (*(unsigned __int8 *)v1056 >> (~(_BYTE)v1045 & 7)) & 1;
      *v1024 = v1045 + 1;
    }
    v1057 = v1056 | v1055;
    v1026 = v1982;
    *(_DWORD *)(v1981 + 4) = v1057;
    if (!v1028 && *(_DWORD *)v1981 | v1057)
    {
      v1058 = *(unsigned int *)(a2 + 16);
      v1059 = *(_QWORD *)a2;
      v1060 = *(_QWORD *)(a2 + 8);
      v1061 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1058 >> 3));
      if ((unint64_t)v1061 >= v1060)
      {
        v1061 = *v1025;
        if (*v1025)
        {
          v1061(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1061) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1061) = (*(unsigned __int8 *)v1061 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1062 = 32 * (_DWORD)v1061;
      v1063 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1063 >= v1060)
      {
        v1063 = *v1025;
        if (*v1025)
        {
          v1063(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1063) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1063) = (*(unsigned __int8 *)v1063 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1064 = v1062 | (16 * (_DWORD)v1063);
      v1065 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1065 >= v1060)
      {
        v1065 = *v1025;
        if (*v1025)
        {
          v1065(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1065) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1065) = (*(unsigned __int8 *)v1065 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1066 = v1064 | (8 * (_DWORD)v1065);
      v1067 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1067 >= v1060)
      {
        v1067 = *v1025;
        if (*v1025)
        {
          v1067(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1067) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1067) = (*(unsigned __int8 *)v1067 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1068 = v1066 | (4 * (_DWORD)v1067);
      v1069 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1069 >= v1060)
      {
        v1069 = *v1025;
        if (*v1025)
        {
          v1069(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1069) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1069) = (*(unsigned __int8 *)v1069 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1070 = v1068 | (2 * (_DWORD)v1069);
      v1071 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1071 >= v1060)
      {
        v1071 = *v1025;
        if (*v1025)
        {
          v1071(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1071) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1071) = (*(unsigned __int8 *)v1071 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      *(_DWORD *)(v1981 + 8) = v1071 | v1070;
      v1072 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1072 >= v1060)
      {
        v1072 = *v1025;
        if (*v1025)
        {
          v1072(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1072) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1072) = (*(unsigned __int8 *)v1072 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1073 = 32 * (_DWORD)v1072;
      v1074 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1074 >= v1060)
      {
        v1074 = *v1025;
        if (*v1025)
        {
          v1074(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1074) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1074) = (*(unsigned __int8 *)v1074 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1075 = v1073 | (16 * (_DWORD)v1074);
      v1076 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1076 >= v1060)
      {
        v1076 = *v1025;
        if (*v1025)
        {
          v1076(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1076) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1076) = (*(unsigned __int8 *)v1076 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1077 = v1075 | (8 * (_DWORD)v1076);
      v1078 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1078 >= v1060)
      {
        v1078 = *v1025;
        if (*v1025)
        {
          v1078(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1078) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1078) = (*(unsigned __int8 *)v1078 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1079 = v1077 | (4 * (_DWORD)v1078);
      v1080 = (void (*)(_QWORD))(v1059 + (v1058 >> 3));
      if ((unint64_t)v1080 >= v1060)
      {
        v1080 = *v1025;
        if (*v1025)
        {
          v1080(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          LODWORD(v1080) = 0;
          LODWORD(v1058) = *(_DWORD *)(a2 + 16);
          v1059 = *(_QWORD *)a2;
          v1060 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1080) = (*(unsigned __int8 *)v1080 >> (~(_BYTE)v1058 & 7)) & 1;
        LODWORD(v1058) = v1058 + 1;
        *v1024 = v1058;
      }
      v1081 = v1079 | (2 * (_DWORD)v1080);
      v1082 = (unsigned __int8 *)(v1059 + (v1058 >> 3));
      if ((unint64_t)v1082 >= v1060)
      {
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
        }
        v1083 = 0;
      }
      else
      {
        v1083 = (*v1082 >> (~(_BYTE)v1058 & 7)) & 1;
        *v1024 = v1058 + 1;
      }
      *(_DWORD *)(v1981 + 12) = v1083 | v1081;
    }
    v1084 = *(unsigned int *)(a2 + 16);
    v1085 = *(_QWORD *)a2;
    v1086 = *(_QWORD *)(a2 + 8);
    v1087 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1084 >> 3));
    if ((unint64_t)v1087 >= v1086)
    {
      v1087 = *v1025;
      if (*v1025)
      {
        v1087(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1087) = 0;
        LODWORD(v1084) = *(_DWORD *)(a2 + 16);
        v1085 = *(_QWORD *)a2;
        v1086 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1087) = (*(unsigned __int8 *)v1087 >> (~(_BYTE)v1084 & 7)) & 1;
      LODWORD(v1084) = v1084 + 1;
      *v1024 = v1084;
    }
    v1088 = 4 * (_DWORD)v1087;
    v1089 = (void (*)(_QWORD))(v1085 + (v1084 >> 3));
    if ((unint64_t)v1089 >= v1086)
    {
      v1089 = *v1025;
      if (*v1025)
      {
        v1089(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1089) = 0;
        LODWORD(v1084) = *(_DWORD *)(a2 + 16);
        v1085 = *(_QWORD *)a2;
        v1086 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1089) = (*(unsigned __int8 *)v1089 >> (~(_BYTE)v1084 & 7)) & 1;
      LODWORD(v1084) = v1084 + 1;
      *v1024 = v1084;
    }
    v1090 = v1088 | (2 * (_DWORD)v1089);
    v1091 = (void (*)(_QWORD))(v1085 + (v1084 >> 3));
    if ((unint64_t)v1091 >= v1086)
    {
      v1091 = *v1025;
      if (*v1025)
      {
        v1091(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1091) = 0;
        LODWORD(v1084) = *(_DWORD *)(a2 + 16);
        v1085 = *(_QWORD *)a2;
        v1086 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1091) = (*(unsigned __int8 *)v1091 >> (~(_BYTE)v1084 & 7)) & 1;
      LODWORD(v1084) = v1084 + 1;
      *v1024 = v1084;
    }
    v1092 = v1091 | v1090;
    v1093 = v1981;
    *(_DWORD *)(v1981 + 16) = v1092;
    *(_BYTE *)(v1981 + 21) = 0;
    v1094 = (unsigned __int8 *)(v1085 + (v1084 >> 3));
    if ((unint64_t)v1094 >= v1086)
    {
      if (*v1025)
      {
        (*v1025)(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
      }
      v1093 = v1981;
      *(_BYTE *)(v1981 + 20) = 0;
    }
    else
    {
      v1095 = *v1094 >> (~(_BYTE)v1084 & 7);
      v1096 = v1084 + 1;
      *v1024 = v1084 + 1;
      *(_BYTE *)(v1981 + 20) = v1095 & 1;
      if ((v1095 & 1) != 0)
      {
        v1097 = (unsigned __int8 *)(v1085 + (v1096 >> 3));
        if ((unint64_t)v1097 >= v1086)
        {
          if (*v1025)
          {
            (*v1025)(*(_QWORD *)(a2 + 24));
            v1025 = (void (**)(_QWORD))(a2 + 32);
          }
          v1093 = v1981;
          *(_BYTE *)(v1981 + 21) = 0;
        }
        else
        {
          v1098 = *v1097 >> (~(_BYTE)v1096 & 7);
          v1099 = v1084 + 2;
          *v2017 = v1084 + 2;
          v1093 = v1981;
          *(_BYTE *)(v1981 + 21) = v1098 & 1;
          if ((v1098 & 1) != 0)
          {
            v1100 = (unsigned __int8 *)(v1085 + (v1099 >> 3));
            if ((unint64_t)v1100 >= v1086)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1101 = ~(_BYTE)v1099 & 7;
              v1102 = *v1100;
              v1103 = v1084 + 3;
              *v2017 = v1084 + 3;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1102 >> v1101) & 1) != 0)
              {
                v1104 = (unsigned __int8 *)(v1085 + (v1103 >> 3));
                if ((unint64_t)v1104 >= v1086)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1105 = 0;
                    v1103 = *(_DWORD *)(a2 + 16);
                    v1085 = *(_QWORD *)a2;
                    v1086 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1105 = 0;
                  }
                  v1106 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1105 = (*v1104 >> (~(_BYTE)v1103 & 7)) & 1;
                  v1103 = v1084 + 4;
                  v1106 = (unsigned int *)(a2 + 16);
                  *v2017 = v1084 + 4;
                }
                v1745 = v1105 << 6;
                v1746 = (void (*)(_QWORD))(v1085 + (v1103 >> 3));
                if ((unint64_t)v1746 >= v1086)
                {
                  v1746 = *v1025;
                  if (*v1025)
                  {
                    v1746(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1106 = (unsigned int *)(a2 + 16);
                    LODWORD(v1746) = 0;
                    v1103 = *(_DWORD *)(a2 + 16);
                    v1085 = *(_QWORD *)a2;
                    v1086 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1746) = (*(unsigned __int8 *)v1746 >> (~(_BYTE)v1103++ & 7)) & 1;
                  *v1106 = v1103;
                }
                v1747 = v1745 | (32 * (_DWORD)v1746);
                v1748 = (void (*)(_QWORD))(v1085 + (v1103 >> 3));
                if ((unint64_t)v1748 >= v1086)
                {
                  v1748 = *v1025;
                  if (*v1025)
                  {
                    v1748(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1106 = (unsigned int *)(a2 + 16);
                    LODWORD(v1748) = 0;
                    v1103 = *(_DWORD *)(a2 + 16);
                    v1085 = *(_QWORD *)a2;
                    v1086 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1748) = (*(unsigned __int8 *)v1748 >> (~(_BYTE)v1103++ & 7)) & 1;
                  *v1106 = v1103;
                }
                v1749 = v1747 | (16 * (_DWORD)v1748);
                v1750 = (void (*)(_QWORD))(v1085 + (v1103 >> 3));
                if ((unint64_t)v1750 >= v1086)
                {
                  v1750 = *v1025;
                  if (*v1025)
                  {
                    v1750(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1106 = (unsigned int *)(a2 + 16);
                    LODWORD(v1750) = 0;
                    v1103 = *(_DWORD *)(a2 + 16);
                    v1085 = *(_QWORD *)a2;
                    v1086 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1750) = (*(unsigned __int8 *)v1750 >> (~(_BYTE)v1103++ & 7)) & 1;
                  *v1106 = v1103;
                }
                v1751 = v1749 | (8 * (_DWORD)v1750);
                v1752 = (void (*)(_QWORD))(v1085 + (v1103 >> 3));
                if ((unint64_t)v1752 >= v1086)
                {
                  v1752 = *v1025;
                  if (*v1025)
                  {
                    v1752(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1106 = (unsigned int *)(a2 + 16);
                    LODWORD(v1752) = 0;
                    v1103 = *(_DWORD *)(a2 + 16);
                    v1085 = *(_QWORD *)a2;
                    v1086 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1752) = (*(unsigned __int8 *)v1752 >> (~(_BYTE)v1103++ & 7)) & 1;
                  *v1106 = v1103;
                }
                v1753 = v1751 | (4 * (_DWORD)v1752);
                v1754 = (void (*)(_QWORD))(v1085 + (v1103 >> 3));
                if ((unint64_t)v1754 >= v1086)
                {
                  v1754 = *v1025;
                  if (*v1025)
                  {
                    v1754(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1106 = (unsigned int *)(a2 + 16);
                    LODWORD(v1754) = 0;
                    v1103 = *(_DWORD *)(a2 + 16);
                    v1085 = *(_QWORD *)a2;
                    v1086 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1754) = (*(unsigned __int8 *)v1754 >> (~(_BYTE)v1103++ & 7)) & 1;
                  *v1106 = v1103;
                }
                v1755 = v1753 | (2 * (_DWORD)v1754);
                v1756 = (void (*)(_QWORD))(v1085 + (v1103 >> 3));
                if ((unint64_t)v1756 >= v1086)
                {
                  v1756 = *v1025;
                  if (*v1025)
                  {
                    v1756(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    LODWORD(v1756) = 0;
                  }
                }
                else
                {
                  LODWORD(v1756) = (*(unsigned __int8 *)v1756 >> (~(_BYTE)v1103 & 7)) & 1;
                  *v1106 = v1103 + 1;
                }
                *(_BYTE *)(v1981 + 22) = (int)((v1756 | v1755) << 25) >> 25;
              }
            }
            v1757 = *(unsigned int *)(a2 + 16);
            v1758 = *(_QWORD *)a2;
            v1759 = *(_QWORD *)(a2 + 8);
            v1760 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1757 >> 3));
            if ((unint64_t)v1760 >= v1759)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1761 = *v1760;
              v1762 = v1757 + 1;
              *v2017 = v1757 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1761 >> (~(_BYTE)v1757 & 7)) & 1) != 0)
              {
                v1763 = (unsigned __int8 *)(v1758 + (v1762 >> 3));
                if ((unint64_t)v1763 >= v1759)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1764 = 0;
                    v1762 = *(_DWORD *)(a2 + 16);
                    v1758 = *(_QWORD *)a2;
                    v1759 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1764 = 0;
                  }
                  v1765 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1764 = (*v1763 >> (~(_BYTE)v1762 & 7)) & 1;
                  v1762 = v1757 + 2;
                  v1765 = (unsigned int *)(a2 + 16);
                  *v2017 = v1757 + 2;
                }
                v1766 = v1764 << 6;
                v1767 = (void (*)(_QWORD))(v1758 + (v1762 >> 3));
                if ((unint64_t)v1767 >= v1759)
                {
                  v1767 = *v1025;
                  if (*v1025)
                  {
                    v1767(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1765 = (unsigned int *)(a2 + 16);
                    LODWORD(v1767) = 0;
                    v1762 = *(_DWORD *)(a2 + 16);
                    v1758 = *(_QWORD *)a2;
                    v1759 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1767) = (*(unsigned __int8 *)v1767 >> (~(_BYTE)v1762++ & 7)) & 1;
                  *v1765 = v1762;
                }
                v1768 = v1766 | (32 * (_DWORD)v1767);
                v1769 = (void (*)(_QWORD))(v1758 + (v1762 >> 3));
                if ((unint64_t)v1769 >= v1759)
                {
                  v1769 = *v1025;
                  if (*v1025)
                  {
                    v1769(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1765 = (unsigned int *)(a2 + 16);
                    LODWORD(v1769) = 0;
                    v1762 = *(_DWORD *)(a2 + 16);
                    v1758 = *(_QWORD *)a2;
                    v1759 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1769) = (*(unsigned __int8 *)v1769 >> (~(_BYTE)v1762++ & 7)) & 1;
                  *v1765 = v1762;
                }
                v1770 = v1768 | (16 * (_DWORD)v1769);
                v1771 = (void (*)(_QWORD))(v1758 + (v1762 >> 3));
                if ((unint64_t)v1771 >= v1759)
                {
                  v1771 = *v1025;
                  if (*v1025)
                  {
                    v1771(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1765 = (unsigned int *)(a2 + 16);
                    LODWORD(v1771) = 0;
                    v1762 = *(_DWORD *)(a2 + 16);
                    v1758 = *(_QWORD *)a2;
                    v1759 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1771) = (*(unsigned __int8 *)v1771 >> (~(_BYTE)v1762++ & 7)) & 1;
                  *v1765 = v1762;
                }
                v1772 = v1770 | (8 * (_DWORD)v1771);
                v1773 = (void (*)(_QWORD))(v1758 + (v1762 >> 3));
                if ((unint64_t)v1773 >= v1759)
                {
                  v1773 = *v1025;
                  if (*v1025)
                  {
                    v1773(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1765 = (unsigned int *)(a2 + 16);
                    LODWORD(v1773) = 0;
                    v1762 = *(_DWORD *)(a2 + 16);
                    v1758 = *(_QWORD *)a2;
                    v1759 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1773) = (*(unsigned __int8 *)v1773 >> (~(_BYTE)v1762++ & 7)) & 1;
                  *v1765 = v1762;
                }
                v1774 = v1772 | (4 * (_DWORD)v1773);
                v1775 = (void (*)(_QWORD))(v1758 + (v1762 >> 3));
                if ((unint64_t)v1775 >= v1759)
                {
                  v1775 = *v1025;
                  if (*v1025)
                  {
                    v1775(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1765 = (unsigned int *)(a2 + 16);
                    LODWORD(v1775) = 0;
                    v1762 = *(_DWORD *)(a2 + 16);
                    v1758 = *(_QWORD *)a2;
                    v1759 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1775) = (*(unsigned __int8 *)v1775 >> (~(_BYTE)v1762++ & 7)) & 1;
                  *v1765 = v1762;
                }
                v1776 = v1774 | (2 * (_DWORD)v1775);
                v1777 = (unsigned __int8 *)(v1758 + (v1762 >> 3));
                if ((unint64_t)v1777 >= v1759)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1778 = 0;
                }
                else
                {
                  v1778 = (*v1777 >> (~(_BYTE)v1762 & 7)) & 1;
                  *v1765 = v1762 + 1;
                }
                *(_BYTE *)(v1981 + 23) = (v1778 | v1776) << 25 >> 25;
              }
            }
            v1779 = *(unsigned int *)(a2 + 16);
            v1780 = *(_QWORD *)a2;
            v1781 = *(_QWORD *)(a2 + 8);
            v1782 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1779 >> 3));
            if ((unint64_t)v1782 >= v1781)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1783 = *v1782;
              v1784 = v1779 + 1;
              *v2017 = v1779 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1783 >> (~(_BYTE)v1779 & 7)) & 1) != 0)
              {
                v1785 = (unsigned __int8 *)(v1780 + (v1784 >> 3));
                if ((unint64_t)v1785 >= v1781)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1786 = 0;
                    v1784 = *(_DWORD *)(a2 + 16);
                    v1780 = *(_QWORD *)a2;
                    v1781 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1786 = 0;
                  }
                  v1787 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1786 = (*v1785 >> (~(_BYTE)v1784 & 7)) & 1;
                  v1784 = v1779 + 2;
                  v1787 = (unsigned int *)(a2 + 16);
                  *v2017 = v1779 + 2;
                }
                v1788 = v1786 << 6;
                v1789 = (void (*)(_QWORD))(v1780 + (v1784 >> 3));
                if ((unint64_t)v1789 >= v1781)
                {
                  v1789 = *v1025;
                  if (*v1025)
                  {
                    v1789(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1787 = (unsigned int *)(a2 + 16);
                    LODWORD(v1789) = 0;
                    v1784 = *(_DWORD *)(a2 + 16);
                    v1780 = *(_QWORD *)a2;
                    v1781 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1789) = (*(unsigned __int8 *)v1789 >> (~(_BYTE)v1784++ & 7)) & 1;
                  *v1787 = v1784;
                }
                v1790 = v1788 | (32 * (_DWORD)v1789);
                v1791 = (void (*)(_QWORD))(v1780 + (v1784 >> 3));
                if ((unint64_t)v1791 >= v1781)
                {
                  v1791 = *v1025;
                  if (*v1025)
                  {
                    v1791(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1787 = (unsigned int *)(a2 + 16);
                    LODWORD(v1791) = 0;
                    v1784 = *(_DWORD *)(a2 + 16);
                    v1780 = *(_QWORD *)a2;
                    v1781 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1791) = (*(unsigned __int8 *)v1791 >> (~(_BYTE)v1784++ & 7)) & 1;
                  *v1787 = v1784;
                }
                v1792 = v1790 | (16 * (_DWORD)v1791);
                v1793 = (void (*)(_QWORD))(v1780 + (v1784 >> 3));
                if ((unint64_t)v1793 >= v1781)
                {
                  v1793 = *v1025;
                  if (*v1025)
                  {
                    v1793(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1787 = (unsigned int *)(a2 + 16);
                    LODWORD(v1793) = 0;
                    v1784 = *(_DWORD *)(a2 + 16);
                    v1780 = *(_QWORD *)a2;
                    v1781 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1793) = (*(unsigned __int8 *)v1793 >> (~(_BYTE)v1784++ & 7)) & 1;
                  *v1787 = v1784;
                }
                v1794 = v1792 | (8 * (_DWORD)v1793);
                v1795 = (void (*)(_QWORD))(v1780 + (v1784 >> 3));
                if ((unint64_t)v1795 >= v1781)
                {
                  v1795 = *v1025;
                  if (*v1025)
                  {
                    v1795(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1787 = (unsigned int *)(a2 + 16);
                    LODWORD(v1795) = 0;
                    v1784 = *(_DWORD *)(a2 + 16);
                    v1780 = *(_QWORD *)a2;
                    v1781 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1795) = (*(unsigned __int8 *)v1795 >> (~(_BYTE)v1784++ & 7)) & 1;
                  *v1787 = v1784;
                }
                v1796 = v1794 | (4 * (_DWORD)v1795);
                v1797 = (void (*)(_QWORD))(v1780 + (v1784 >> 3));
                if ((unint64_t)v1797 >= v1781)
                {
                  v1797 = *v1025;
                  if (*v1025)
                  {
                    v1797(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1787 = (unsigned int *)(a2 + 16);
                    LODWORD(v1797) = 0;
                    v1784 = *(_DWORD *)(a2 + 16);
                    v1780 = *(_QWORD *)a2;
                    v1781 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1797) = (*(unsigned __int8 *)v1797 >> (~(_BYTE)v1784++ & 7)) & 1;
                  *v1787 = v1784;
                }
                v1798 = v1796 | (2 * (_DWORD)v1797);
                v1799 = (unsigned __int8 *)(v1780 + (v1784 >> 3));
                if ((unint64_t)v1799 >= v1781)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1800 = 0;
                }
                else
                {
                  v1800 = (*v1799 >> (~(_BYTE)v1784 & 7)) & 1;
                  *v1787 = v1784 + 1;
                }
                *(_BYTE *)(v1981 + 24) = (v1800 | v1798) << 25 >> 25;
              }
            }
            v1801 = *(unsigned int *)(a2 + 16);
            v1802 = *(_QWORD *)a2;
            v1803 = *(_QWORD *)(a2 + 8);
            v1804 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1801 >> 3));
            if ((unint64_t)v1804 >= v1803)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1805 = *v1804;
              v1806 = v1801 + 1;
              *v2017 = v1801 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1805 >> (~(_BYTE)v1801 & 7)) & 1) != 0)
              {
                v1807 = (unsigned __int8 *)(v1802 + (v1806 >> 3));
                if ((unint64_t)v1807 >= v1803)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1808 = 0;
                    v1806 = *(_DWORD *)(a2 + 16);
                    v1802 = *(_QWORD *)a2;
                    v1803 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1808 = 0;
                  }
                  v1809 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1808 = (*v1807 >> (~(_BYTE)v1806 & 7)) & 1;
                  v1806 = v1801 + 2;
                  v1809 = (unsigned int *)(a2 + 16);
                  *v2017 = v1801 + 2;
                }
                v1810 = v1808 << 6;
                v1811 = (void (*)(_QWORD))(v1802 + (v1806 >> 3));
                if ((unint64_t)v1811 >= v1803)
                {
                  v1811 = *v1025;
                  if (*v1025)
                  {
                    v1811(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1809 = (unsigned int *)(a2 + 16);
                    LODWORD(v1811) = 0;
                    v1806 = *(_DWORD *)(a2 + 16);
                    v1802 = *(_QWORD *)a2;
                    v1803 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1811) = (*(unsigned __int8 *)v1811 >> (~(_BYTE)v1806++ & 7)) & 1;
                  *v1809 = v1806;
                }
                v1812 = v1810 | (32 * (_DWORD)v1811);
                v1813 = (void (*)(_QWORD))(v1802 + (v1806 >> 3));
                if ((unint64_t)v1813 >= v1803)
                {
                  v1813 = *v1025;
                  if (*v1025)
                  {
                    v1813(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1809 = (unsigned int *)(a2 + 16);
                    LODWORD(v1813) = 0;
                    v1806 = *(_DWORD *)(a2 + 16);
                    v1802 = *(_QWORD *)a2;
                    v1803 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1813) = (*(unsigned __int8 *)v1813 >> (~(_BYTE)v1806++ & 7)) & 1;
                  *v1809 = v1806;
                }
                v1814 = v1812 | (16 * (_DWORD)v1813);
                v1815 = (void (*)(_QWORD))(v1802 + (v1806 >> 3));
                if ((unint64_t)v1815 >= v1803)
                {
                  v1815 = *v1025;
                  if (*v1025)
                  {
                    v1815(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1809 = (unsigned int *)(a2 + 16);
                    LODWORD(v1815) = 0;
                    v1806 = *(_DWORD *)(a2 + 16);
                    v1802 = *(_QWORD *)a2;
                    v1803 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1815) = (*(unsigned __int8 *)v1815 >> (~(_BYTE)v1806++ & 7)) & 1;
                  *v1809 = v1806;
                }
                v1816 = v1814 | (8 * (_DWORD)v1815);
                v1817 = (void (*)(_QWORD))(v1802 + (v1806 >> 3));
                if ((unint64_t)v1817 >= v1803)
                {
                  v1817 = *v1025;
                  if (*v1025)
                  {
                    v1817(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1809 = (unsigned int *)(a2 + 16);
                    LODWORD(v1817) = 0;
                    v1806 = *(_DWORD *)(a2 + 16);
                    v1802 = *(_QWORD *)a2;
                    v1803 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1817) = (*(unsigned __int8 *)v1817 >> (~(_BYTE)v1806++ & 7)) & 1;
                  *v1809 = v1806;
                }
                v1818 = v1816 | (4 * (_DWORD)v1817);
                v1819 = (void (*)(_QWORD))(v1802 + (v1806 >> 3));
                if ((unint64_t)v1819 >= v1803)
                {
                  v1819 = *v1025;
                  if (*v1025)
                  {
                    v1819(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1809 = (unsigned int *)(a2 + 16);
                    LODWORD(v1819) = 0;
                    v1806 = *(_DWORD *)(a2 + 16);
                    v1802 = *(_QWORD *)a2;
                    v1803 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1819) = (*(unsigned __int8 *)v1819 >> (~(_BYTE)v1806++ & 7)) & 1;
                  *v1809 = v1806;
                }
                v1820 = v1818 | (2 * (_DWORD)v1819);
                v1821 = (unsigned __int8 *)(v1802 + (v1806 >> 3));
                if ((unint64_t)v1821 >= v1803)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1822 = 0;
                }
                else
                {
                  v1822 = (*v1821 >> (~(_BYTE)v1806 & 7)) & 1;
                  *v1809 = v1806 + 1;
                }
                *(_BYTE *)(v1981 + 25) = (v1822 | v1820) << 25 >> 25;
              }
            }
            v1823 = *(unsigned int *)(a2 + 16);
            v1824 = *(_QWORD *)a2;
            v1825 = *(_QWORD *)(a2 + 8);
            v1826 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1823 >> 3));
            if ((unint64_t)v1826 >= v1825)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1827 = *v1826;
              v1828 = v1823 + 1;
              *v2017 = v1823 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1827 >> (~(_BYTE)v1823 & 7)) & 1) != 0)
              {
                v1829 = (unsigned __int8 *)(v1824 + (v1828 >> 3));
                if ((unint64_t)v1829 >= v1825)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1830 = 0;
                    v1828 = *(_DWORD *)(a2 + 16);
                    v1824 = *(_QWORD *)a2;
                    v1825 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1830 = 0;
                  }
                  v1831 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1830 = (*v1829 >> (~(_BYTE)v1828 & 7)) & 1;
                  v1828 = v1823 + 2;
                  v1831 = (unsigned int *)(a2 + 16);
                  *v2017 = v1823 + 2;
                }
                v1832 = v1830 << 6;
                v1833 = (void (*)(_QWORD))(v1824 + (v1828 >> 3));
                if ((unint64_t)v1833 >= v1825)
                {
                  v1833 = *v1025;
                  if (*v1025)
                  {
                    v1833(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1831 = (unsigned int *)(a2 + 16);
                    LODWORD(v1833) = 0;
                    v1828 = *(_DWORD *)(a2 + 16);
                    v1824 = *(_QWORD *)a2;
                    v1825 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1833) = (*(unsigned __int8 *)v1833 >> (~(_BYTE)v1828++ & 7)) & 1;
                  *v1831 = v1828;
                }
                v1834 = v1832 | (32 * (_DWORD)v1833);
                v1835 = (void (*)(_QWORD))(v1824 + (v1828 >> 3));
                if ((unint64_t)v1835 >= v1825)
                {
                  v1835 = *v1025;
                  if (*v1025)
                  {
                    v1835(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1831 = (unsigned int *)(a2 + 16);
                    LODWORD(v1835) = 0;
                    v1828 = *(_DWORD *)(a2 + 16);
                    v1824 = *(_QWORD *)a2;
                    v1825 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1835) = (*(unsigned __int8 *)v1835 >> (~(_BYTE)v1828++ & 7)) & 1;
                  *v1831 = v1828;
                }
                v1836 = v1834 | (16 * (_DWORD)v1835);
                v1837 = (void (*)(_QWORD))(v1824 + (v1828 >> 3));
                if ((unint64_t)v1837 >= v1825)
                {
                  v1837 = *v1025;
                  if (*v1025)
                  {
                    v1837(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1831 = (unsigned int *)(a2 + 16);
                    LODWORD(v1837) = 0;
                    v1828 = *(_DWORD *)(a2 + 16);
                    v1824 = *(_QWORD *)a2;
                    v1825 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1837) = (*(unsigned __int8 *)v1837 >> (~(_BYTE)v1828++ & 7)) & 1;
                  *v1831 = v1828;
                }
                v1838 = v1836 | (8 * (_DWORD)v1837);
                v1839 = (void (*)(_QWORD))(v1824 + (v1828 >> 3));
                if ((unint64_t)v1839 >= v1825)
                {
                  v1839 = *v1025;
                  if (*v1025)
                  {
                    v1839(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1831 = (unsigned int *)(a2 + 16);
                    LODWORD(v1839) = 0;
                    v1828 = *(_DWORD *)(a2 + 16);
                    v1824 = *(_QWORD *)a2;
                    v1825 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1839) = (*(unsigned __int8 *)v1839 >> (~(_BYTE)v1828++ & 7)) & 1;
                  *v1831 = v1828;
                }
                v1840 = v1838 | (4 * (_DWORD)v1839);
                v1841 = (void (*)(_QWORD))(v1824 + (v1828 >> 3));
                if ((unint64_t)v1841 >= v1825)
                {
                  v1841 = *v1025;
                  if (*v1025)
                  {
                    v1841(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1831 = (unsigned int *)(a2 + 16);
                    LODWORD(v1841) = 0;
                    v1828 = *(_DWORD *)(a2 + 16);
                    v1824 = *(_QWORD *)a2;
                    v1825 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1841) = (*(unsigned __int8 *)v1841 >> (~(_BYTE)v1828++ & 7)) & 1;
                  *v1831 = v1828;
                }
                v1842 = v1840 | (2 * (_DWORD)v1841);
                v1843 = (unsigned __int8 *)(v1824 + (v1828 >> 3));
                if ((unint64_t)v1843 >= v1825)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1844 = 0;
                }
                else
                {
                  v1844 = (*v1843 >> (~(_BYTE)v1828 & 7)) & 1;
                  *v1831 = v1828 + 1;
                }
                *(_BYTE *)(v1981 + 26) = (v1844 | v1842) << 25 >> 25;
              }
            }
            v1845 = *(unsigned int *)(a2 + 16);
            v1846 = *(_QWORD *)a2;
            v1847 = *(_QWORD *)(a2 + 8);
            v1848 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1845 >> 3));
            if ((unint64_t)v1848 >= v1847)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1849 = *v1848;
              v1850 = v1845 + 1;
              *v2017 = v1845 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1849 >> (~(_BYTE)v1845 & 7)) & 1) != 0)
              {
                v1851 = (unsigned __int8 *)(v1846 + (v1850 >> 3));
                if ((unint64_t)v1851 >= v1847)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1852 = 0;
                    v1850 = *(_DWORD *)(a2 + 16);
                    v1846 = *(_QWORD *)a2;
                    v1847 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1852 = 0;
                  }
                  v1853 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1852 = (*v1851 >> (~(_BYTE)v1850 & 7)) & 1;
                  v1850 = v1845 + 2;
                  v1853 = (unsigned int *)(a2 + 16);
                  *v2017 = v1845 + 2;
                }
                v1854 = v1852 << 6;
                v1855 = (void (*)(_QWORD))(v1846 + (v1850 >> 3));
                if ((unint64_t)v1855 >= v1847)
                {
                  v1855 = *v1025;
                  if (*v1025)
                  {
                    v1855(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1853 = (unsigned int *)(a2 + 16);
                    LODWORD(v1855) = 0;
                    v1850 = *(_DWORD *)(a2 + 16);
                    v1846 = *(_QWORD *)a2;
                    v1847 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1855) = (*(unsigned __int8 *)v1855 >> (~(_BYTE)v1850++ & 7)) & 1;
                  *v1853 = v1850;
                }
                v1856 = v1854 | (32 * (_DWORD)v1855);
                v1857 = (void (*)(_QWORD))(v1846 + (v1850 >> 3));
                if ((unint64_t)v1857 >= v1847)
                {
                  v1857 = *v1025;
                  if (*v1025)
                  {
                    v1857(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1853 = (unsigned int *)(a2 + 16);
                    LODWORD(v1857) = 0;
                    v1850 = *(_DWORD *)(a2 + 16);
                    v1846 = *(_QWORD *)a2;
                    v1847 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1857) = (*(unsigned __int8 *)v1857 >> (~(_BYTE)v1850++ & 7)) & 1;
                  *v1853 = v1850;
                }
                v1858 = v1856 | (16 * (_DWORD)v1857);
                v1859 = (void (*)(_QWORD))(v1846 + (v1850 >> 3));
                if ((unint64_t)v1859 >= v1847)
                {
                  v1859 = *v1025;
                  if (*v1025)
                  {
                    v1859(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1853 = (unsigned int *)(a2 + 16);
                    LODWORD(v1859) = 0;
                    v1850 = *(_DWORD *)(a2 + 16);
                    v1846 = *(_QWORD *)a2;
                    v1847 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1859) = (*(unsigned __int8 *)v1859 >> (~(_BYTE)v1850++ & 7)) & 1;
                  *v1853 = v1850;
                }
                v1860 = v1858 | (8 * (_DWORD)v1859);
                v1861 = (void (*)(_QWORD))(v1846 + (v1850 >> 3));
                if ((unint64_t)v1861 >= v1847)
                {
                  v1861 = *v1025;
                  if (*v1025)
                  {
                    v1861(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1853 = (unsigned int *)(a2 + 16);
                    LODWORD(v1861) = 0;
                    v1850 = *(_DWORD *)(a2 + 16);
                    v1846 = *(_QWORD *)a2;
                    v1847 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1861) = (*(unsigned __int8 *)v1861 >> (~(_BYTE)v1850++ & 7)) & 1;
                  *v1853 = v1850;
                }
                v1862 = v1860 | (4 * (_DWORD)v1861);
                v1863 = (void (*)(_QWORD))(v1846 + (v1850 >> 3));
                if ((unint64_t)v1863 >= v1847)
                {
                  v1863 = *v1025;
                  if (*v1025)
                  {
                    v1863(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1853 = (unsigned int *)(a2 + 16);
                    LODWORD(v1863) = 0;
                    v1850 = *(_DWORD *)(a2 + 16);
                    v1846 = *(_QWORD *)a2;
                    v1847 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1863) = (*(unsigned __int8 *)v1863 >> (~(_BYTE)v1850++ & 7)) & 1;
                  *v1853 = v1850;
                }
                v1864 = v1862 | (2 * (_DWORD)v1863);
                v1865 = (unsigned __int8 *)(v1846 + (v1850 >> 3));
                if ((unint64_t)v1865 >= v1847)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1866 = 0;
                }
                else
                {
                  v1866 = (*v1865 >> (~(_BYTE)v1850 & 7)) & 1;
                  *v1853 = v1850 + 1;
                }
                *(_BYTE *)(v1981 + 27) = (v1866 | v1864) << 25 >> 25;
              }
            }
            v1867 = *(unsigned int *)(a2 + 16);
            v1868 = *(_QWORD *)a2;
            v1869 = *(_QWORD *)(a2 + 8);
            v1870 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1867 >> 3));
            if ((unint64_t)v1870 >= v1869)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1871 = *v1870;
              v1872 = v1867 + 1;
              *v2017 = v1867 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1871 >> (~(_BYTE)v1867 & 7)) & 1) != 0)
              {
                v1873 = (unsigned __int8 *)(v1868 + (v1872 >> 3));
                if ((unint64_t)v1873 >= v1869)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1874 = 0;
                    v1872 = *(_DWORD *)(a2 + 16);
                    v1868 = *(_QWORD *)a2;
                    v1869 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1874 = 0;
                  }
                  v1875 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1874 = (*v1873 >> (~(_BYTE)v1872 & 7)) & 1;
                  v1872 = v1867 + 2;
                  v1875 = (unsigned int *)(a2 + 16);
                  *v2017 = v1867 + 2;
                }
                v1876 = v1874 << 6;
                v1877 = (void (*)(_QWORD))(v1868 + (v1872 >> 3));
                if ((unint64_t)v1877 >= v1869)
                {
                  v1877 = *v1025;
                  if (*v1025)
                  {
                    v1877(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1875 = (unsigned int *)(a2 + 16);
                    LODWORD(v1877) = 0;
                    v1872 = *(_DWORD *)(a2 + 16);
                    v1868 = *(_QWORD *)a2;
                    v1869 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1877) = (*(unsigned __int8 *)v1877 >> (~(_BYTE)v1872++ & 7)) & 1;
                  *v1875 = v1872;
                }
                v1878 = v1876 | (32 * (_DWORD)v1877);
                v1879 = (void (*)(_QWORD))(v1868 + (v1872 >> 3));
                if ((unint64_t)v1879 >= v1869)
                {
                  v1879 = *v1025;
                  if (*v1025)
                  {
                    v1879(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1875 = (unsigned int *)(a2 + 16);
                    LODWORD(v1879) = 0;
                    v1872 = *(_DWORD *)(a2 + 16);
                    v1868 = *(_QWORD *)a2;
                    v1869 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1879) = (*(unsigned __int8 *)v1879 >> (~(_BYTE)v1872++ & 7)) & 1;
                  *v1875 = v1872;
                }
                v1880 = v1878 | (16 * (_DWORD)v1879);
                v1881 = (void (*)(_QWORD))(v1868 + (v1872 >> 3));
                if ((unint64_t)v1881 >= v1869)
                {
                  v1881 = *v1025;
                  if (*v1025)
                  {
                    v1881(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1875 = (unsigned int *)(a2 + 16);
                    LODWORD(v1881) = 0;
                    v1872 = *(_DWORD *)(a2 + 16);
                    v1868 = *(_QWORD *)a2;
                    v1869 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1881) = (*(unsigned __int8 *)v1881 >> (~(_BYTE)v1872++ & 7)) & 1;
                  *v1875 = v1872;
                }
                v1882 = v1880 | (8 * (_DWORD)v1881);
                v1883 = (void (*)(_QWORD))(v1868 + (v1872 >> 3));
                if ((unint64_t)v1883 >= v1869)
                {
                  v1883 = *v1025;
                  if (*v1025)
                  {
                    v1883(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1875 = (unsigned int *)(a2 + 16);
                    LODWORD(v1883) = 0;
                    v1872 = *(_DWORD *)(a2 + 16);
                    v1868 = *(_QWORD *)a2;
                    v1869 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1883) = (*(unsigned __int8 *)v1883 >> (~(_BYTE)v1872++ & 7)) & 1;
                  *v1875 = v1872;
                }
                v1884 = v1882 | (4 * (_DWORD)v1883);
                v1885 = (void (*)(_QWORD))(v1868 + (v1872 >> 3));
                if ((unint64_t)v1885 >= v1869)
                {
                  v1885 = *v1025;
                  if (*v1025)
                  {
                    v1885(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1875 = (unsigned int *)(a2 + 16);
                    LODWORD(v1885) = 0;
                    v1872 = *(_DWORD *)(a2 + 16);
                    v1868 = *(_QWORD *)a2;
                    v1869 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1885) = (*(unsigned __int8 *)v1885 >> (~(_BYTE)v1872++ & 7)) & 1;
                  *v1875 = v1872;
                }
                v1886 = v1884 | (2 * (_DWORD)v1885);
                v1887 = (unsigned __int8 *)(v1868 + (v1872 >> 3));
                if ((unint64_t)v1887 >= v1869)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1888 = 0;
                }
                else
                {
                  v1888 = (*v1887 >> (~(_BYTE)v1872 & 7)) & 1;
                  *v1875 = v1872 + 1;
                }
                *(_BYTE *)(v1981 + 28) = (v1888 | v1886) << 25 >> 25;
              }
            }
            v1889 = *(unsigned int *)(a2 + 16);
            v1890 = *(_QWORD *)a2;
            v1891 = *(_QWORD *)(a2 + 8);
            v1892 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1889 >> 3));
            if ((unint64_t)v1892 >= v1891)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1893 = *v1892;
              v1894 = v1889 + 1;
              *v2017 = v1889 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1893 >> (~(_BYTE)v1889 & 7)) & 1) != 0)
              {
                v1895 = (unsigned __int8 *)(v1890 + (v1894 >> 3));
                if ((unint64_t)v1895 >= v1891)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1896 = 0;
                    v1894 = *(_DWORD *)(a2 + 16);
                    v1890 = *(_QWORD *)a2;
                    v1891 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1896 = 0;
                  }
                  v1897 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1896 = (*v1895 >> (~(_BYTE)v1894 & 7)) & 1;
                  v1894 = v1889 + 2;
                  v1897 = (unsigned int *)(a2 + 16);
                  *v2017 = v1889 + 2;
                }
                v1898 = v1896 << 6;
                v1899 = (void (*)(_QWORD))(v1890 + (v1894 >> 3));
                if ((unint64_t)v1899 >= v1891)
                {
                  v1899 = *v1025;
                  if (*v1025)
                  {
                    v1899(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1897 = (unsigned int *)(a2 + 16);
                    LODWORD(v1899) = 0;
                    v1894 = *(_DWORD *)(a2 + 16);
                    v1890 = *(_QWORD *)a2;
                    v1891 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1899) = (*(unsigned __int8 *)v1899 >> (~(_BYTE)v1894++ & 7)) & 1;
                  *v1897 = v1894;
                }
                v1900 = v1898 | (32 * (_DWORD)v1899);
                v1901 = (void (*)(_QWORD))(v1890 + (v1894 >> 3));
                if ((unint64_t)v1901 >= v1891)
                {
                  v1901 = *v1025;
                  if (*v1025)
                  {
                    v1901(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1897 = (unsigned int *)(a2 + 16);
                    LODWORD(v1901) = 0;
                    v1894 = *(_DWORD *)(a2 + 16);
                    v1890 = *(_QWORD *)a2;
                    v1891 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1901) = (*(unsigned __int8 *)v1901 >> (~(_BYTE)v1894++ & 7)) & 1;
                  *v1897 = v1894;
                }
                v1902 = v1900 | (16 * (_DWORD)v1901);
                v1903 = (void (*)(_QWORD))(v1890 + (v1894 >> 3));
                if ((unint64_t)v1903 >= v1891)
                {
                  v1903 = *v1025;
                  if (*v1025)
                  {
                    v1903(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1897 = (unsigned int *)(a2 + 16);
                    LODWORD(v1903) = 0;
                    v1894 = *(_DWORD *)(a2 + 16);
                    v1890 = *(_QWORD *)a2;
                    v1891 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1903) = (*(unsigned __int8 *)v1903 >> (~(_BYTE)v1894++ & 7)) & 1;
                  *v1897 = v1894;
                }
                v1904 = v1902 | (8 * (_DWORD)v1903);
                v1905 = (void (*)(_QWORD))(v1890 + (v1894 >> 3));
                if ((unint64_t)v1905 >= v1891)
                {
                  v1905 = *v1025;
                  if (*v1025)
                  {
                    v1905(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1897 = (unsigned int *)(a2 + 16);
                    LODWORD(v1905) = 0;
                    v1894 = *(_DWORD *)(a2 + 16);
                    v1890 = *(_QWORD *)a2;
                    v1891 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1905) = (*(unsigned __int8 *)v1905 >> (~(_BYTE)v1894++ & 7)) & 1;
                  *v1897 = v1894;
                }
                v1906 = v1904 | (4 * (_DWORD)v1905);
                v1907 = (void (*)(_QWORD))(v1890 + (v1894 >> 3));
                if ((unint64_t)v1907 >= v1891)
                {
                  v1907 = *v1025;
                  if (*v1025)
                  {
                    v1907(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1897 = (unsigned int *)(a2 + 16);
                    LODWORD(v1907) = 0;
                    v1894 = *(_DWORD *)(a2 + 16);
                    v1890 = *(_QWORD *)a2;
                    v1891 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1907) = (*(unsigned __int8 *)v1907 >> (~(_BYTE)v1894++ & 7)) & 1;
                  *v1897 = v1894;
                }
                v1908 = v1906 | (2 * (_DWORD)v1907);
                v1909 = (unsigned __int8 *)(v1890 + (v1894 >> 3));
                if ((unint64_t)v1909 >= v1891)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1910 = 0;
                }
                else
                {
                  v1910 = (*v1909 >> (~(_BYTE)v1894 & 7)) & 1;
                  *v1897 = v1894 + 1;
                }
                *(_BYTE *)(v1981 + 29) = (v1910 | v1908) << 25 >> 25;
              }
            }
            v1911 = *(unsigned int *)(a2 + 16);
            v1912 = *(_QWORD *)a2;
            v1913 = *(_QWORD *)(a2 + 8);
            v1914 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1911 >> 3));
            if ((unint64_t)v1914 >= v1913)
            {
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1915 = *v1914;
              v1916 = v1911 + 1;
              *v2017 = v1911 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              if (((v1915 >> (~(_BYTE)v1911 & 7)) & 1) != 0)
              {
                v1917 = (unsigned __int8 *)(v1912 + (v1916 >> 3));
                if ((unint64_t)v1917 >= v1913)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1918 = 0;
                    v1916 = *(_DWORD *)(a2 + 16);
                    v1912 = *(_QWORD *)a2;
                    v1913 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1918 = 0;
                  }
                  v1919 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1918 = (*v1917 >> (~(_BYTE)v1916 & 7)) & 1;
                  v1916 = v1911 + 2;
                  v1919 = (unsigned int *)(a2 + 16);
                  *v2017 = v1911 + 2;
                }
                v1920 = v1918 << 6;
                v1921 = (void (*)(_QWORD))(v1912 + (v1916 >> 3));
                if ((unint64_t)v1921 >= v1913)
                {
                  v1921 = *v1025;
                  if (*v1025)
                  {
                    v1921(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1919 = (unsigned int *)(a2 + 16);
                    LODWORD(v1921) = 0;
                    v1916 = *(_DWORD *)(a2 + 16);
                    v1912 = *(_QWORD *)a2;
                    v1913 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1921) = (*(unsigned __int8 *)v1921 >> (~(_BYTE)v1916++ & 7)) & 1;
                  *v1919 = v1916;
                }
                v1922 = v1920 | (32 * (_DWORD)v1921);
                v1923 = (void (*)(_QWORD))(v1912 + (v1916 >> 3));
                if ((unint64_t)v1923 >= v1913)
                {
                  v1923 = *v1025;
                  if (*v1025)
                  {
                    v1923(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1919 = (unsigned int *)(a2 + 16);
                    LODWORD(v1923) = 0;
                    v1916 = *(_DWORD *)(a2 + 16);
                    v1912 = *(_QWORD *)a2;
                    v1913 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1923) = (*(unsigned __int8 *)v1923 >> (~(_BYTE)v1916++ & 7)) & 1;
                  *v1919 = v1916;
                }
                v1924 = v1922 | (16 * (_DWORD)v1923);
                v1925 = (void (*)(_QWORD))(v1912 + (v1916 >> 3));
                if ((unint64_t)v1925 >= v1913)
                {
                  v1925 = *v1025;
                  if (*v1025)
                  {
                    v1925(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1919 = (unsigned int *)(a2 + 16);
                    LODWORD(v1925) = 0;
                    v1916 = *(_DWORD *)(a2 + 16);
                    v1912 = *(_QWORD *)a2;
                    v1913 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1925) = (*(unsigned __int8 *)v1925 >> (~(_BYTE)v1916++ & 7)) & 1;
                  *v1919 = v1916;
                }
                v1926 = v1924 | (8 * (_DWORD)v1925);
                v1927 = (void (*)(_QWORD))(v1912 + (v1916 >> 3));
                if ((unint64_t)v1927 >= v1913)
                {
                  v1927 = *v1025;
                  if (*v1025)
                  {
                    v1927(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1919 = (unsigned int *)(a2 + 16);
                    LODWORD(v1927) = 0;
                    v1916 = *(_DWORD *)(a2 + 16);
                    v1912 = *(_QWORD *)a2;
                    v1913 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1927) = (*(unsigned __int8 *)v1927 >> (~(_BYTE)v1916++ & 7)) & 1;
                  *v1919 = v1916;
                }
                v1928 = v1926 | (4 * (_DWORD)v1927);
                v1929 = (void (*)(_QWORD))(v1912 + (v1916 >> 3));
                if ((unint64_t)v1929 >= v1913)
                {
                  v1929 = *v1025;
                  if (*v1025)
                  {
                    v1929(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1919 = (unsigned int *)(a2 + 16);
                    LODWORD(v1929) = 0;
                    v1916 = *(_DWORD *)(a2 + 16);
                    v1912 = *(_QWORD *)a2;
                    v1913 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1929) = (*(unsigned __int8 *)v1929 >> (~(_BYTE)v1916++ & 7)) & 1;
                  *v1919 = v1916;
                }
                v1930 = v1928 | (2 * (_DWORD)v1929);
                v1931 = (unsigned __int8 *)(v1912 + (v1916 >> 3));
                if ((unint64_t)v1931 >= v1913)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1932 = 0;
                }
                else
                {
                  v1932 = (*v1931 >> (~(_BYTE)v1916 & 7)) & 1;
                  *v1919 = v1916 + 1;
                }
                *(_BYTE *)(v1981 + 30) = (v1932 | v1930) << 25 >> 25;
              }
            }
            v1933 = *(unsigned int *)(a2 + 16);
            v1934 = *(_QWORD *)a2;
            v1935 = *(_QWORD *)(a2 + 8);
            v1936 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1933 >> 3));
            if ((unint64_t)v1936 >= v1935)
            {
              v1093 = v1981;
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
              }
            }
            else
            {
              v1937 = *v1936;
              v1938 = v1933 + 1;
              *v2017 = v1933 + 1;
              v1025 = (void (**)(_QWORD))(a2 + 32);
              v1093 = v1981;
              if (((v1937 >> (~(_BYTE)v1933 & 7)) & 1) != 0)
              {
                v1939 = (unsigned __int8 *)(v1934 + (v1938 >> 3));
                if ((unint64_t)v1939 >= v1935)
                {
                  if (*v2016)
                  {
                    (*v2016)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1940 = 0;
                    v1938 = *(_DWORD *)(a2 + 16);
                    v1934 = *(_QWORD *)a2;
                    v1935 = *(_QWORD *)(a2 + 8);
                  }
                  else
                  {
                    v1940 = 0;
                  }
                  v1941 = (unsigned int *)(a2 + 16);
                }
                else
                {
                  v1940 = (*v1939 >> (~(_BYTE)v1938 & 7)) & 1;
                  v1938 = v1933 + 2;
                  v1941 = (unsigned int *)(a2 + 16);
                  *v2017 = v1933 + 2;
                }
                v1942 = v1940 << 6;
                v1943 = (void (*)(_QWORD))(v1934 + (v1938 >> 3));
                if ((unint64_t)v1943 >= v1935)
                {
                  v1943 = *v1025;
                  if (*v1025)
                  {
                    v1943(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1941 = (unsigned int *)(a2 + 16);
                    LODWORD(v1943) = 0;
                    v1938 = *(_DWORD *)(a2 + 16);
                    v1934 = *(_QWORD *)a2;
                    v1935 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1943) = (*(unsigned __int8 *)v1943 >> (~(_BYTE)v1938++ & 7)) & 1;
                  *v1941 = v1938;
                }
                v1944 = v1942 | (32 * (_DWORD)v1943);
                v1945 = (void (*)(_QWORD))(v1934 + (v1938 >> 3));
                if ((unint64_t)v1945 >= v1935)
                {
                  v1945 = *v1025;
                  if (*v1025)
                  {
                    v1945(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1941 = (unsigned int *)(a2 + 16);
                    LODWORD(v1945) = 0;
                    v1938 = *(_DWORD *)(a2 + 16);
                    v1934 = *(_QWORD *)a2;
                    v1935 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1945) = (*(unsigned __int8 *)v1945 >> (~(_BYTE)v1938++ & 7)) & 1;
                  *v1941 = v1938;
                }
                v1946 = v1944 | (16 * (_DWORD)v1945);
                v1947 = (void (*)(_QWORD))(v1934 + (v1938 >> 3));
                if ((unint64_t)v1947 >= v1935)
                {
                  v1947 = *v1025;
                  if (*v1025)
                  {
                    v1947(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1941 = (unsigned int *)(a2 + 16);
                    LODWORD(v1947) = 0;
                    v1938 = *(_DWORD *)(a2 + 16);
                    v1934 = *(_QWORD *)a2;
                    v1935 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1947) = (*(unsigned __int8 *)v1947 >> (~(_BYTE)v1938++ & 7)) & 1;
                  *v1941 = v1938;
                }
                v1948 = v1946 | (8 * (_DWORD)v1947);
                v1949 = (void (*)(_QWORD))(v1934 + (v1938 >> 3));
                if ((unint64_t)v1949 >= v1935)
                {
                  v1949 = *v1025;
                  if (*v1025)
                  {
                    v1949(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1941 = (unsigned int *)(a2 + 16);
                    LODWORD(v1949) = 0;
                    v1938 = *(_DWORD *)(a2 + 16);
                    v1934 = *(_QWORD *)a2;
                    v1935 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1949) = (*(unsigned __int8 *)v1949 >> (~(_BYTE)v1938++ & 7)) & 1;
                  *v1941 = v1938;
                }
                v1950 = v1948 | (4 * (_DWORD)v1949);
                v1951 = (void (*)(_QWORD))(v1934 + (v1938 >> 3));
                if ((unint64_t)v1951 >= v1935)
                {
                  v1951 = *v1025;
                  if (*v1025)
                  {
                    v1951(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                    v1941 = (unsigned int *)(a2 + 16);
                    LODWORD(v1951) = 0;
                    v1938 = *(_DWORD *)(a2 + 16);
                    v1934 = *(_QWORD *)a2;
                    v1935 = *(_QWORD *)(a2 + 8);
                  }
                }
                else
                {
                  LODWORD(v1951) = (*(unsigned __int8 *)v1951 >> (~(_BYTE)v1938++ & 7)) & 1;
                  *v1941 = v1938;
                }
                v1952 = v1950 | (2 * (_DWORD)v1951);
                v1953 = (unsigned __int8 *)(v1934 + (v1938 >> 3));
                if ((unint64_t)v1953 >= v1935)
                {
                  if (*v1025)
                  {
                    (*v1025)(*(_QWORD *)(a2 + 24));
                    v1025 = (void (**)(_QWORD))(a2 + 32);
                  }
                  v1954 = 0;
                }
                else
                {
                  v1954 = (*v1953 >> (~(_BYTE)v1938 & 7)) & 1;
                  *v1941 = v1938 + 1;
                }
                v1955 = (v1954 | v1952) << 25 >> 25;
                v1093 = v1981;
                *(_BYTE *)(v1981 + 31) = v1955;
              }
            }
          }
        }
      }
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 15432) + 1468) = *(_QWORD *)(v1093 + 22);
    *(_WORD *)(*(_QWORD *)(v4 + 15432) + 1476) = *(_WORD *)(v1093 + 30);
    v1024 = (_DWORD *)(a2 + 16);
    if (!*v1979)
      goto LABEL_1895;
    goto LABEL_1897;
  }
  v1023 = v1989;
  v1025 = (void (**)(_QWORD))(a2 + 32);
  v1024 = (_DWORD *)(a2 + 16);
  v1026 = v1982;
  v1027 = v1988;
  if (!*(_BYTE *)(v1989 + 67))
    goto LABEL_1759;
  if (!v947)
    goto LABEL_1760;
LABEL_1764:
  *(_DWORD *)(v1981 + 32) = 0;
  *(_DWORD *)(v1981 + 96) = 0;
  *(_DWORD *)(v1981 + 160) = 0;
  if (!(v1027[4] | v946))
    goto LABEL_1765;
LABEL_1762:
  *(_QWORD *)(*(_QWORD *)(v4 + 15432) + 1468) = 0xFFFF00FF00000001;
  *(_WORD *)(*(_QWORD *)(v4 + 15432) + 1476) = 0;
  if (!*v1979)
  {
LABEL_1895:
    if (!*(_BYTE *)(v1023 + 67) || v1988[4])
      goto LABEL_1897;
    v1183 = *(_BYTE *)(*(_QWORD *)(v1985 + 312) + 77);
    v1184 = *(unsigned int *)(a2 + 16);
    v1185 = *(_QWORD *)a2;
    v1186 = *(_QWORD *)(a2 + 8);
    v1187 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1184 >> 3));
    if ((unint64_t)v1187 >= v1186)
    {
      v1187 = *v1025;
      if (*v1025)
      {
        v1187(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1187) = 0;
        LODWORD(v1184) = *(_DWORD *)(a2 + 16);
        v1185 = *(_QWORD *)a2;
        v1186 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1187) = (*(unsigned __int8 *)v1187 >> (~(_BYTE)v1184 & 7)) & 1;
      LODWORD(v1184) = v1184 + 1;
      *v1024 = v1184;
    }
    v1204 = 2 * (_DWORD)v1187;
    v1205 = (void (*)(_QWORD))(v1185 + (v1184 >> 3));
    if ((unint64_t)v1205 >= v1186)
    {
      v1205 = *v1025;
      if (*v1025)
      {
        v1205(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1205) = 0;
        LODWORD(v1184) = *(_DWORD *)(a2 + 16);
        v1185 = *(_QWORD *)a2;
        v1186 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1205) = (*(unsigned __int8 *)v1205 >> (~(_BYTE)v1184 & 7)) & 1;
      LODWORD(v1184) = v1184 + 1;
      *v1024 = v1184;
    }
    *(_DWORD *)(v1981 + 544) = (v1205 | v1204) + 3;
    v1206 = (void (*)(_QWORD))(v1185 + (v1184 >> 3));
    if ((unint64_t)v1206 >= v1186)
    {
      v1206 = *v1025;
      if (*v1025)
      {
        v1206(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        LODWORD(v1206) = 0;
        LODWORD(v1184) = *(_DWORD *)(a2 + 16);
        v1185 = *(_QWORD *)a2;
        v1186 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1206) = (*(unsigned __int8 *)v1206 >> (~(_BYTE)v1184 & 7)) & 1;
      LODWORD(v1184) = v1184 + 1;
      *v1024 = v1184;
    }
    v1207 = 2 * (_DWORD)v1206;
    v1208 = (unsigned __int8 *)(v1185 + (v1184 >> 3));
    if ((unint64_t)v1208 >= v1186)
    {
      if (*v1025)
      {
        (*v1025)(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
      }
      v1209 = 0;
    }
    else
    {
      v1209 = (*v1208 >> (~(_BYTE)v1184 & 7)) & 1;
      *v1024 = v1184 + 1;
    }
    v1987[32] = v1209 | v1207;
    *(_DWORD *)(v1981 + 548) = 1 << (v1209 | v1207);
    if (v1183)
    {
      v1210 = 0;
      while (1)
      {
        v1214 = *(unsigned int *)(a2 + 16);
        v1215 = *(_QWORD *)a2;
        v1216 = *(_QWORD *)(a2 + 8);
        v1217 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1214 >> 3));
        if ((unint64_t)v1217 >= v1216)
        {
          if (*v1025)
          {
            (*v1025)(*(_QWORD *)(a2 + 24));
            v1025 = (void (**)(_QWORD))(a2 + 32);
            v1024 = (_DWORD *)(a2 + 16);
            v1218 = 0;
            LODWORD(v1214) = *(_DWORD *)(a2 + 16);
            v1215 = *(_QWORD *)a2;
            v1216 = *(_QWORD *)(a2 + 8);
            v1219 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1214 >> 3));
            if ((unint64_t)v1219 < v1216)
              goto LABEL_2061;
          }
          else
          {
            v1218 = 0;
            v1219 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
            if ((unint64_t)v1219 < v1216)
            {
LABEL_2061:
              v1220 = (*v1219 >> (~(_BYTE)v1214 & 7)) & 1;
              LODWORD(v1214) = v1214 + 1;
              *v1024 = v1214;
              v1221 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
              if ((unint64_t)v1221 < v1216)
                goto LABEL_2062;
              goto LABEL_2070;
            }
          }
        }
        else
        {
          v1218 = (*v1217 >> (~(_BYTE)v1214 & 7)) & 1;
          LODWORD(v1214) = v1214 + 1;
          *v1024 = v1214;
          v1219 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
          if ((unint64_t)v1219 < v1216)
            goto LABEL_2061;
        }
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1220 = 0;
          LODWORD(v1214) = *(_DWORD *)(a2 + 16);
          v1215 = *(_QWORD *)a2;
          v1216 = *(_QWORD *)(a2 + 8);
          v1221 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1214 >> 3));
          if ((unint64_t)v1221 < v1216)
            goto LABEL_2062;
        }
        else
        {
          v1220 = 0;
          v1221 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
          if ((unint64_t)v1221 < v1216)
          {
LABEL_2062:
            v1222 = (*v1221 >> (~(_BYTE)v1214 & 7)) & 1;
            LODWORD(v1214) = v1214 + 1;
            *v1024 = v1214;
            v1223 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
            if ((unint64_t)v1223 < v1216)
              goto LABEL_2063;
            goto LABEL_2072;
          }
        }
LABEL_2070:
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1222 = 0;
          LODWORD(v1214) = *(_DWORD *)(a2 + 16);
          v1215 = *(_QWORD *)a2;
          v1216 = *(_QWORD *)(a2 + 8);
          v1223 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1214 >> 3));
          if ((unint64_t)v1223 < v1216)
            goto LABEL_2063;
        }
        else
        {
          v1222 = 0;
          v1223 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
          if ((unint64_t)v1223 < v1216)
          {
LABEL_2063:
            v1224 = (*v1223 >> (~(_BYTE)v1214 & 7)) & 1;
            LODWORD(v1214) = v1214 + 1;
            *v1024 = v1214;
            v1225 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
            if ((unint64_t)v1225 < v1216)
              goto LABEL_2064;
            goto LABEL_2074;
          }
        }
LABEL_2072:
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1224 = 0;
          LODWORD(v1214) = *(_DWORD *)(a2 + 16);
          v1215 = *(_QWORD *)a2;
          v1216 = *(_QWORD *)(a2 + 8);
          v1225 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1214 >> 3));
          if ((unint64_t)v1225 < v1216)
            goto LABEL_2064;
        }
        else
        {
          v1224 = 0;
          v1225 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
          if ((unint64_t)v1225 < v1216)
          {
LABEL_2064:
            v1226 = (*v1225 >> (~(_BYTE)v1214 & 7)) & 1;
            LODWORD(v1214) = v1214 + 1;
            *v1024 = v1214;
            v1227 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
            if ((unint64_t)v1227 >= v1216)
              goto LABEL_2086;
            goto LABEL_2057;
          }
        }
LABEL_2074:
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1226 = 0;
          LODWORD(v1214) = *(_DWORD *)(a2 + 16);
          v1227 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1214 >> 3));
          if ((unint64_t)v1227 >= *(_QWORD *)(a2 + 8))
            goto LABEL_2086;
        }
        else
        {
          v1226 = 0;
          v1227 = (unsigned __int8 *)(v1215 + (v1214 >> 3));
          if ((unint64_t)v1227 >= v1216)
          {
LABEL_2086:
            if (*v1025)
            {
              (*v1025)(*(_QWORD *)(a2 + 24));
              v1025 = (void (**)(_QWORD))(a2 + 32);
              v1024 = (_DWORD *)(a2 + 16);
            }
            v1211 = 0;
            goto LABEL_2058;
          }
        }
LABEL_2057:
        v1211 = (*v1227 >> (~(_BYTE)v1214 & 7)) & 1;
        *v1024 = v1214 + 1;
LABEL_2058:
        v1212 = v1211 | (32 * v1218) | (16 * v1220) | (8 * v1222) | (4 * v1224) | (2 * v1226);
        v1213 = 4 * v1210;
        *(_DWORD *)(v4 + 38776 + v1213) = v1212;
        *(_DWORD *)(v4 + 38840 + v1213) = 0;
        ++v1210;
        v1026 = v1982;
        if (v1210 >= *(int *)(v1981 + 548))
          goto LABEL_1897;
      }
    }
    v1244 = 0;
    while (2)
    {
      v1246 = *(unsigned int *)(a2 + 16);
      v1247 = *(_QWORD *)a2;
      v1248 = *(_QWORD *)(a2 + 8);
      v1249 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1246 >> 3));
      if ((unint64_t)v1249 >= v1248)
      {
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1250 = 0;
          LODWORD(v1246) = *(_DWORD *)(a2 + 16);
          v1247 = *(_QWORD *)a2;
          v1248 = *(_QWORD *)(a2 + 8);
          v1251 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1246 >> 3));
          if ((unint64_t)v1251 >= v1248)
            goto LABEL_2126;
        }
        else
        {
          v1250 = 0;
          v1251 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
          if ((unint64_t)v1251 >= v1248)
            goto LABEL_2126;
        }
LABEL_2119:
        v1252 = (*v1251 >> (~(_BYTE)v1246 & 7)) & 1;
        LODWORD(v1246) = v1246 + 1;
        *v1024 = v1246;
        v1253 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
        if ((unint64_t)v1253 < v1248)
          goto LABEL_2120;
      }
      else
      {
        v1250 = (*v1249 >> (~(_BYTE)v1246 & 7)) & 1;
        LODWORD(v1246) = v1246 + 1;
        *v1024 = v1246;
        v1251 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
        if ((unint64_t)v1251 < v1248)
          goto LABEL_2119;
LABEL_2126:
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1252 = 0;
          LODWORD(v1246) = *(_DWORD *)(a2 + 16);
          v1247 = *(_QWORD *)a2;
          v1248 = *(_QWORD *)(a2 + 8);
          v1253 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1246 >> 3));
          if ((unint64_t)v1253 >= v1248)
            break;
LABEL_2120:
          v1254 = (*v1253 >> (~(_BYTE)v1246 & 7)) & 1;
          LODWORD(v1246) = v1246 + 1;
          *v1024 = v1246;
          v1255 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
          if ((unint64_t)v1255 < v1248)
          {
LABEL_2121:
            v1256 = (*v1255 >> (~(_BYTE)v1246 & 7)) & 1;
            LODWORD(v1246) = v1246 + 1;
            *v1024 = v1246;
            v1257 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
            if ((unint64_t)v1257 < v1248)
              goto LABEL_2122;
LABEL_2132:
            if (*v1025)
            {
              (*v1025)(*(_QWORD *)(a2 + 24));
              v1025 = (void (**)(_QWORD))(a2 + 32);
              v1024 = (_DWORD *)(a2 + 16);
              v1258 = 0;
              LODWORD(v1246) = *(_DWORD *)(a2 + 16);
              v1247 = *(_QWORD *)a2;
              v1248 = *(_QWORD *)(a2 + 8);
              v1259 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1246 >> 3));
              if ((unint64_t)v1259 >= v1248)
                goto LABEL_2134;
            }
            else
            {
              v1258 = 0;
              v1259 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
              if ((unint64_t)v1259 >= v1248)
                goto LABEL_2134;
            }
LABEL_2123:
            v1260 = (*v1259 >> (~(_BYTE)v1246 & 7)) & 1;
            *v1024 = v1246 + 1;
            goto LABEL_2147;
          }
LABEL_2130:
          if (*v1025)
          {
            (*v1025)(*(_QWORD *)(a2 + 24));
            v1025 = (void (**)(_QWORD))(a2 + 32);
            v1024 = (_DWORD *)(a2 + 16);
            v1256 = 0;
            LODWORD(v1246) = *(_DWORD *)(a2 + 16);
            v1247 = *(_QWORD *)a2;
            v1248 = *(_QWORD *)(a2 + 8);
            v1257 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1246 >> 3));
            if ((unint64_t)v1257 >= v1248)
              goto LABEL_2132;
          }
          else
          {
            v1256 = 0;
            v1257 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
            if ((unint64_t)v1257 >= v1248)
              goto LABEL_2132;
          }
LABEL_2122:
          v1258 = (*v1257 >> (~(_BYTE)v1246 & 7)) & 1;
          LODWORD(v1246) = v1246 + 1;
          *v1024 = v1246;
          v1259 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
          if ((unint64_t)v1259 < v1248)
            goto LABEL_2123;
LABEL_2134:
          if (*v1025)
          {
            (*v1025)(*(_QWORD *)(a2 + 24));
            v1025 = (void (**)(_QWORD))(a2 + 32);
            v1024 = (_DWORD *)(a2 + 16);
            v1260 = 0;
            v1247 = *(_QWORD *)a2;
            v1248 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            v1260 = 0;
          }
LABEL_2147:
          *(_DWORD *)(v4 + 38776 + 4 * v1244) = v1260 | (32 * v1250) | (16 * v1252) | (8 * v1254) | (4 * v1256) | (2 * v1258);
          v1261 = *v1024;
          v1262 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
          if ((unint64_t)v1262 >= v1248)
          {
            if (*v1025)
            {
              (*v1025)(*(_QWORD *)(a2 + 24));
              v1025 = (void (**)(_QWORD))(a2 + 32);
              v1024 = (_DWORD *)(a2 + 16);
              v1263 = 0;
              LODWORD(v1261) = *(_DWORD *)(a2 + 16);
              v1247 = *(_QWORD *)a2;
              v1248 = *(_QWORD *)(a2 + 8);
              v1264 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1261 >> 3));
              if ((unint64_t)v1264 >= v1248)
                goto LABEL_2156;
            }
            else
            {
              v1263 = 0;
              v1264 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
              if ((unint64_t)v1264 >= v1248)
                goto LABEL_2156;
            }
LABEL_2149:
            v1265 = (*v1264 >> (~(_BYTE)v1261 & 7)) & 1;
            LODWORD(v1261) = v1261 + 1;
            *v1024 = v1261;
            v1266 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
            if ((unint64_t)v1266 < v1248)
              goto LABEL_2150;
          }
          else
          {
            v1263 = (*v1262 >> (~(_BYTE)v1261 & 7)) & 1;
            LODWORD(v1261) = v1261 + 1;
            *v1024 = v1261;
            v1264 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
            if ((unint64_t)v1264 < v1248)
              goto LABEL_2149;
LABEL_2156:
            if (*v1025)
            {
              (*v1025)(*(_QWORD *)(a2 + 24));
              v1025 = (void (**)(_QWORD))(a2 + 32);
              v1024 = (_DWORD *)(a2 + 16);
              v1265 = 0;
              LODWORD(v1261) = *(_DWORD *)(a2 + 16);
              v1247 = *(_QWORD *)a2;
              v1248 = *(_QWORD *)(a2 + 8);
              v1266 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1261 >> 3));
              if ((unint64_t)v1266 >= v1248)
                goto LABEL_2158;
LABEL_2150:
              v1267 = (*v1266 >> (~(_BYTE)v1261 & 7)) & 1;
              LODWORD(v1261) = v1261 + 1;
              *v1024 = v1261;
              v1268 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
              if ((unint64_t)v1268 < v1248)
              {
LABEL_2151:
                v1269 = (*v1268 >> (~(_BYTE)v1261 & 7)) & 1;
                LODWORD(v1261) = v1261 + 1;
                *v1024 = v1261;
                v1270 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
                if ((unint64_t)v1270 < v1248)
                  goto LABEL_2152;
LABEL_2162:
                if (*v1025)
                {
                  (*v1025)(*(_QWORD *)(a2 + 24));
                  v1025 = (void (**)(_QWORD))(a2 + 32);
                  v1024 = (_DWORD *)(a2 + 16);
                  v1271 = 0;
                  LODWORD(v1261) = *(_DWORD *)(a2 + 16);
                  v1245 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1261 >> 3));
                  if ((unint64_t)v1245 >= *(_QWORD *)(a2 + 8))
                    goto LABEL_2174;
LABEL_2115:
                  LODWORD(v1245) = (*(unsigned __int8 *)v1245 >> (~(_BYTE)v1261 & 7)) & 1;
                  *v1024 = v1261 + 1;
LABEL_2116:
                  *(_DWORD *)(v4 + 38840 + 4 * v1244++) = v1245 | (32 * v1263) | (16 * v1265) | (8 * v1267) | (4 * v1269) | (2 * v1271);
                  v1026 = v1982;
                  if (v1244 >= *(int *)(v1981 + 548))
                    goto LABEL_1897;
                  continue;
                }
                v1271 = 0;
                v1245 = (void (*)(_QWORD))(v1247 + (v1261 >> 3));
                if ((unint64_t)v1245 < v1248)
                  goto LABEL_2115;
LABEL_2174:
                v1245 = *v1025;
                if (*v1025)
                {
                  v1245(*(_QWORD *)(a2 + 24));
                  v1025 = (void (**)(_QWORD))(a2 + 32);
                  v1024 = (_DWORD *)(a2 + 16);
                  LODWORD(v1245) = 0;
                }
                goto LABEL_2116;
              }
LABEL_2160:
              if (*v1025)
              {
                (*v1025)(*(_QWORD *)(a2 + 24));
                v1025 = (void (**)(_QWORD))(a2 + 32);
                v1024 = (_DWORD *)(a2 + 16);
                v1269 = 0;
                LODWORD(v1261) = *(_DWORD *)(a2 + 16);
                v1247 = *(_QWORD *)a2;
                v1248 = *(_QWORD *)(a2 + 8);
                v1270 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1261 >> 3));
                if ((unint64_t)v1270 >= v1248)
                  goto LABEL_2162;
              }
              else
              {
                v1269 = 0;
                v1270 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
                if ((unint64_t)v1270 >= v1248)
                  goto LABEL_2162;
              }
LABEL_2152:
              v1271 = (*v1270 >> (~(_BYTE)v1261 & 7)) & 1;
              LODWORD(v1261) = v1261 + 1;
              *v1024 = v1261;
              v1245 = (void (*)(_QWORD))(v1247 + (v1261 >> 3));
              if ((unint64_t)v1245 < v1248)
                goto LABEL_2115;
              goto LABEL_2174;
            }
            v1265 = 0;
            v1266 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
            if ((unint64_t)v1266 < v1248)
              goto LABEL_2150;
          }
LABEL_2158:
          if (*v1025)
          {
            (*v1025)(*(_QWORD *)(a2 + 24));
            v1025 = (void (**)(_QWORD))(a2 + 32);
            v1024 = (_DWORD *)(a2 + 16);
            v1267 = 0;
            LODWORD(v1261) = *(_DWORD *)(a2 + 16);
            v1247 = *(_QWORD *)a2;
            v1248 = *(_QWORD *)(a2 + 8);
            v1268 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1261 >> 3));
            if ((unint64_t)v1268 < v1248)
              goto LABEL_2151;
          }
          else
          {
            v1267 = 0;
            v1268 = (unsigned __int8 *)(v1247 + (v1261 >> 3));
            if ((unint64_t)v1268 < v1248)
              goto LABEL_2151;
          }
          goto LABEL_2160;
        }
        v1252 = 0;
        v1253 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
        if ((unint64_t)v1253 < v1248)
          goto LABEL_2120;
      }
      break;
    }
    if (*v1025)
    {
      (*v1025)(*(_QWORD *)(a2 + 24));
      v1025 = (void (**)(_QWORD))(a2 + 32);
      v1024 = (_DWORD *)(a2 + 16);
      v1254 = 0;
      LODWORD(v1246) = *(_DWORD *)(a2 + 16);
      v1247 = *(_QWORD *)a2;
      v1248 = *(_QWORD *)(a2 + 8);
      v1255 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1246 >> 3));
      if ((unint64_t)v1255 < v1248)
        goto LABEL_2121;
    }
    else
    {
      v1254 = 0;
      v1255 = (unsigned __int8 *)(v1247 + (v1246 >> 3));
      if ((unint64_t)v1255 < v1248)
        goto LABEL_2121;
    }
    goto LABEL_2130;
  }
LABEL_1897:
  if (!v1988[8] && *(_BYTE *)(v1989 + 68) && !v1988[4])
  {
    v1111 = *(unsigned __int8 *)(*(_QWORD *)(v1985 + 312) + 77);
    v1112 = *(unsigned int *)(a2 + 16);
    v1113 = *(_QWORD *)a2;
    v1114 = *(_QWORD *)(a2 + 8);
    v1115 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1112 >> 3));
    if ((unint64_t)v1115 >= v1114)
    {
      if (*v1025)
      {
        (*v1025)(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        v1116 = 0;
        LODWORD(v1112) = *(_DWORD *)(a2 + 16);
        v1117 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1112 >> 3));
        if ((unint64_t)v1117 >= *(_QWORD *)(a2 + 8))
          goto LABEL_2026;
      }
      else
      {
        v1116 = 0;
        v1117 = (unsigned __int8 *)(v1113 + (v1112 >> 3));
        if ((unint64_t)v1117 >= v1114)
          goto LABEL_2026;
      }
LABEL_1908:
      v1118 = (*v1117 >> (~(_BYTE)v1112 & 7)) & 1;
      *v1024 = v1112 + 1;
    }
    else
    {
      v1116 = (*v1115 >> (~(_BYTE)v1112 & 7)) & 1;
      LODWORD(v1112) = v1112 + 1;
      *v1024 = v1112;
      v1117 = (unsigned __int8 *)(v1113 + (v1112 >> 3));
      if ((unint64_t)v1117 < v1114)
        goto LABEL_1908;
LABEL_2026:
      if (*v1025)
      {
        (*v1025)(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
      }
      v1118 = 0;
    }
    v1193 = v1116 | v1118;
    v1194 = v1118 == 0;
    if (v1118)
      v1195 = 3;
    else
      v1195 = 0;
    v1196 = 1;
    if (v1194)
      v1197 = 1;
    else
      v1197 = 2;
    if (v1116)
      v1195 = v1197;
    *(_DWORD *)(v1981 + 32) = v1195;
    v1198 = v1193 == 0;
    if (!v1111)
    {
      v1199 = *(unsigned int *)(a2 + 16);
      v1200 = *(_QWORD *)a2;
      v1201 = *(_QWORD *)(a2 + 8);
      v1202 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1199 >> 3));
      if ((unint64_t)v1202 >= v1201)
      {
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1203 = 0;
          LODWORD(v1199) = *(_DWORD *)(a2 + 16);
          v1200 = *(_QWORD *)a2;
          v1201 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v1203 = 0;
        }
      }
      else
      {
        v1203 = (*v1202 >> (~(_BYTE)v1199 & 7)) & 1;
        LODWORD(v1199) = v1199 + 1;
        *v1024 = v1199;
      }
      v1362 = (unsigned __int8 *)(v1200 + (v1199 >> 3));
      if ((unint64_t)v1362 >= v1201)
      {
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
        }
        v1363 = 0;
      }
      else
      {
        v1363 = (*v1362 >> (~(_BYTE)v1199 & 7)) & 1;
        *v1024 = v1199 + 1;
      }
      v1364 = v1203 | v1363;
      v1365 = v1363 == 0;
      if (v1363)
        v1366 = 3;
      else
        v1366 = 0;
      if (v1365)
        v1367 = 1;
      else
        v1367 = 2;
      if (v1203)
        v1366 = v1367;
      *(_DWORD *)(v1981 + 96) = v1366;
      v1196 = v1364 == 0;
      if (v1364)
        v1198 = 0;
      v1368 = *(unsigned int *)(a2 + 16);
      v1369 = *(_QWORD *)a2;
      v1370 = *(_QWORD *)(a2 + 8);
      v1371 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1368 >> 3));
      if ((unint64_t)v1371 >= v1370)
      {
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1372 = 0;
          LODWORD(v1368) = *(_DWORD *)(a2 + 16);
          v1369 = *(_QWORD *)a2;
          v1370 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v1372 = 0;
        }
      }
      else
      {
        v1372 = (*v1371 >> (~(_BYTE)v1368 & 7)) & 1;
        LODWORD(v1368) = v1368 + 1;
        *v1024 = v1368;
      }
      v1373 = (unsigned __int8 *)(v1369 + (v1368 >> 3));
      if ((unint64_t)v1373 >= v1370)
      {
        if (*v1025)
        {
          (*v1025)(*(_QWORD *)(a2 + 24));
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
        }
        v1374 = 0;
      }
      else
      {
        v1374 = (*v1373 >> (~(_BYTE)v1368 & 7)) & 1;
        *v1024 = v1368 + 1;
      }
      v1375 = v1372 | v1374;
      v1376 = v1374 == 0;
      if (v1374)
        v1377 = 3;
      else
        v1377 = 0;
      if (v1376)
        v1378 = 1;
      else
        v1378 = 2;
      if (v1372)
        v1377 = v1378;
      *(_DWORD *)(v1981 + 160) = v1377;
      if (v1375)
      {
        v1198 = 0;
        v1196 = 0;
      }
    }
    if (v1198)
    {
      v1026 = v1982;
      *(_DWORD *)(v1981 + 36) = 256;
      if (!v1111)
      {
        *(_DWORD *)(v1981 + 100) = 256;
        *(_DWORD *)(v1981 + 164) = 256;
        goto LABEL_2425;
      }
    }
    else
    {
      v1379 = *(unsigned __int8 *)(*(_QWORD *)(v1985 + 312) + 28);
      if (v1379 == 15)
        v1380 = 128;
      else
        v1380 = 64;
      *(_DWORD *)(v1981 + 36) = v1380;
      if (!v1111)
      {
        *(_DWORD *)(v1981 + 100) = v1380;
        *(_DWORD *)(v1981 + 164) = v1380;
      }
      if (v1379 == 15)
      {
        v1381 = *(_DWORD *)(v1981 + 36);
      }
      else
      {
        bit = aom_rb_read_bit(a2);
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        v1381 = *(_DWORD *)(v1981 + 36) << bit;
        *(_DWORD *)(v1981 + 36) = v1381;
      }
      v1026 = v1982;
      if (v1381 >= 65)
      {
        v1383 = aom_rb_read_bit(a2);
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
        *(_DWORD *)(v1981 + 36) <<= v1383;
      }
LABEL_2425:
      if (!v1111)
      {
        v1384 = *(_QWORD *)(v1985 + 312);
        v1386 = *(_DWORD *)(v1384 + 96);
        v1385 = *(_DWORD *)(v1384 + 100);
        if (v1386 >= v1385)
          v1387 = v1385;
        else
          v1387 = v1386;
        if (v1387)
          v1388 = v1196;
        else
          v1388 = 1;
        v1389 = *(_DWORD *)(v1981 + 36);
        if ((v1388 & 1) == 0)
        {
          v1390 = aom_rb_read_bit(a2);
          v1025 = (void (**)(_QWORD))(a2 + 32);
          v1024 = (_DWORD *)(a2 + 16);
          v1389 >>= v1390 * v1387;
        }
        v1026 = v1982;
        *(_DWORD *)(v1981 + 100) = v1389;
        *(_DWORD *)(v1981 + 164) = v1389;
      }
    }
  }
  if (!*v1979)
  {
    v1119 = *(unsigned int *)(a2 + 16);
    v1120 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1119 >> 3));
    if ((unint64_t)v1120 >= *(_QWORD *)(a2 + 8))
    {
      if (*v1025)
      {
        (*v1025)(*(_QWORD *)(a2 + 24));
        v1025 = (void (**)(_QWORD))(a2 + 32);
        v1024 = (_DWORD *)(a2 + 16);
      }
    }
    else
    {
      v1121 = *v1120;
      *v1024 = v1119 + 1;
      if (((v1121 >> (~(_BYTE)v1119 & 7)) & 1) != 0)
      {
        v1988[12] = 2;
        if ((*v1026 & 0xFD) == 0)
          goto LABEL_1926;
LABEL_1900:
        v1107 = *(unsigned int *)(a2 + 16);
        v1108 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1107 >> 3));
        if ((unint64_t)v1108 >= *(_QWORD *)(a2 + 8))
        {
          v1110 = v1989;
          if (*v1025)
            (*v1025)(*(_QWORD *)(a2 + 24));
        }
        else
        {
          v1109 = *v1108;
          *v1024 = v1107 + 1;
          v1110 = v1989;
          if (((v1109 >> (~(_BYTE)v1107 & 7)) & 1) != 0)
          {
            v1026[1] = 2;
            av1_setup_skip_mode_allowed((uint64_t)v1026);
            if (!*(_DWORD *)(v4 + 15220))
              goto LABEL_1927;
LABEL_1916:
            v1122 = *(unsigned int *)(a2 + 16);
            v1123 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1122 >> 3));
            v1125 = (void (**)(_QWORD))(a2 + 32);
            v1124 = (_DWORD *)(a2 + 16);
            if ((unint64_t)v1123 < *(_QWORD *)(a2 + 8))
            {
              v1126 = (*v1123 >> (~(_BYTE)v1122 & 7)) & 1;
              *v2017 = v1122 + 1;
              *(_DWORD *)(v4 + 15224) = v1126;
              if (!v1988[10])
                goto LABEL_1928;
              goto LABEL_1936;
            }
            if (*v2016)
            {
              (*v2016)(*(_QWORD *)(a2 + 24));
              v1125 = (void (**)(_QWORD))(a2 + 32);
              v1124 = (_DWORD *)(a2 + 16);
            }
            *(_DWORD *)(v4 + 15224) = 0;
            if (v1988[10])
              goto LABEL_1936;
LABEL_1928:
            if ((*v1026 & 0xFD) == 0 || !*(_BYTE *)(*(_QWORD *)(v1985 + 312) + 65))
              goto LABEL_1936;
            v1127 = *(unsigned int *)(a2 + 16);
            v1128 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1127 >> 3));
            if ((unint64_t)v1128 >= *(_QWORD *)(a2 + 8))
            {
              if (*v1125)
              {
                (*v1125)(*(_QWORD *)(a2 + 24));
                v1125 = (void (**)(_QWORD))(a2 + 32);
                v1124 = (_DWORD *)(a2 + 16);
              }
              v1988[5] = 0;
              v1130 = *(unsigned int *)(a2 + 16);
              v1131 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1130 >> 3));
              if ((unint64_t)v1131 < *(_QWORD *)(a2 + 8))
                goto LABEL_1937;
            }
            else
            {
              v1129 = (*v1128 >> (~(_BYTE)v1127 & 7)) & 1;
              *v1124 = v1127 + 1;
              v1988[5] = v1129;
              v1130 = *(unsigned int *)(a2 + 16);
              v1131 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1130 >> 3));
              if ((unint64_t)v1131 < *(_QWORD *)(a2 + 8))
                goto LABEL_1937;
            }
            goto LABEL_1932;
          }
        }
        v1026[1] = 0;
        av1_setup_skip_mode_allowed((uint64_t)v1026);
        if (!*(_DWORD *)(v4 + 15220))
          goto LABEL_1927;
        goto LABEL_1916;
      }
    }
    v1988[12] = 1;
    if ((*v1026 & 0xFD) == 0)
      goto LABEL_1926;
    goto LABEL_1900;
  }
  v1988[12] = 0;
  if ((*v1026 & 0xFD) != 0)
    goto LABEL_1900;
LABEL_1926:
  v1110 = v1989;
  v1026[1] = 0;
  av1_setup_skip_mode_allowed((uint64_t)v1026);
  if (*(_DWORD *)(v4 + 15220))
    goto LABEL_1916;
LABEL_1927:
  v1125 = (void (**)(_QWORD))(a2 + 32);
  v1124 = (_DWORD *)(a2 + 16);
  *(_DWORD *)(v4 + 15224) = 0;
  if (!v1988[10])
    goto LABEL_1928;
LABEL_1936:
  v1988[5] = 0;
  v1130 = *(unsigned int *)(a2 + 16);
  v1131 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1130 >> 3));
  if ((unint64_t)v1131 < *(_QWORD *)(a2 + 8))
  {
LABEL_1937:
    v1132 = (*v1131 >> (~(_BYTE)v1130 & 7)) & 1;
    *v1124 = v1130 + 1;
    v1988[9] = v1132;
    if (v1988[6])
      goto LABEL_1938;
    goto LABEL_1940;
  }
LABEL_1932:
  if (*v1125)
  {
    (*v1125)(*(_QWORD *)(a2 + 24));
    v1125 = (void (**)(_QWORD))(a2 + 32);
  }
  v1988[9] = 0;
  if (v1988[6])
  {
LABEL_1938:
    if (v1988[10]
      || (v1181 = *(_QWORD *)(v1985 + 312), !*(_DWORD *)(v1181 + 52))
      || !*(_DWORD *)(v1181 + 40)
      || (*v1026 & 0xFD) == 0)
    {
      aom_internal_error(v4 + 390860, 7, "Frame wrongly requests reference frame MVs");
      v1125 = (void (**)(_QWORD))(a2 + 32);
    }
  }
LABEL_1940:
  if ((*v1026 & 0xFD) != 0)
  {
    v1133 = 0;
    v1134 = v4 + 39640;
    while (1)
    {
      v1135 = *(_QWORD *)(v4 + 15424);
      if (v1135)
        v1136 = (int *)(v1135 + v1133 + 312);
      else
        v1136 = (int *)&default_warp_params_0;
      v1137 = (_OWORD *)(v1134 + v1133 - 16);
      v1138 = *(unsigned int *)(a2 + 16);
      v1139 = *(_QWORD *)a2;
      v1140 = *(_QWORD *)(a2 + 8);
      v1141 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1138 >> 3));
      if ((unint64_t)v1141 >= v1140)
      {
        if (*v1125)
          (*v1125)(*(_QWORD *)(a2 + 24));
LABEL_1954:
        *(_DWORD *)(v1134 + v1133 + 16) = 0;
        *v1137 = default_warp_params_0;
        *(_OWORD *)(v1134 + v1133) = *(_OWORD *)algn_208F569CC;
        *(_BYTE *)(v1134 + v1133 + 16) = 0;
        *(_DWORD *)(v1134 + v1133) = 0;
        *(_DWORD *)(v1134 + v1133 + 20 - 16) = 0x10000;
        if (av1_get_shear_params(v1134 + v1133 - 16))
          goto LABEL_1943;
        goto LABEL_1942;
      }
      v1142 = v1988[1];
      v1143 = *v1141;
      v1144 = v1138 + 1;
      *v2017 = v1138 + 1;
      if (((v1143 >> (~(_BYTE)v1138 & 7)) & 1) == 0)
        goto LABEL_1954;
      v1145 = (unsigned __int8 *)(v1139 + (v1144 >> 3));
      if ((unint64_t)v1145 >= v1140)
      {
        v1150 = (void (**)(_QWORD))(a2 + 32);
        if (*v2016)
        {
          (*v2016)(*(_QWORD *)(a2 + 24));
          v1150 = (void (**)(_QWORD))(a2 + 32);
          v1144 = *(_DWORD *)(a2 + 16);
          v1139 = *(_QWORD *)a2;
          v1140 = *(_QWORD *)(a2 + 8);
        }
        v1151 = (_DWORD *)(a2 + 16);
        v1152 = (unsigned __int8 *)(v1139 + (v1144 >> 3));
        if ((unint64_t)v1152 >= v1140)
        {
LABEL_1967:
          if (*v1150)
            (*v1150)(*(_QWORD *)(a2 + 24));
LABEL_1969:
          v1149 = 3;
          v1148 = 1;
LABEL_1970:
          *(_DWORD *)(v1134 + v1133 + 16) = 0;
          *v1137 = default_warp_params_0;
          *(_OWORD *)(v1134 + v1133) = *(_OWORD *)algn_208F569CC;
          v1156 = v1134 + v1133;
          *(_BYTE *)(v1134 + v1133 + 16) = v1149;
          *(_DWORD *)(v1156 - 8) = 2
                                 * aom_rb_read_signed_primitive_refsubexpfin((uint64_t *)a2, 4097, 3, (__int16)((v1136[2] >> 1) ^ 0x8000))+ 0x10000;
          v1157 = 2 * aom_rb_read_signed_primitive_refsubexpfin((uint64_t *)a2, 4097, 3, (__int16)(v1136[3] >> 1));
          *(_DWORD *)(v1156 - 4) = v1157;
          if ((v1148 & 1) != 0)
          {
            *(_DWORD *)(v1134 + v1133) = 2
                                       * aom_rb_read_signed_primitive_refsubexpfin((uint64_t *)a2, 4097, 3, (__int16)(v1136[4] >> 1));
            v1158 = 2
                  * aom_rb_read_signed_primitive_refsubexpfin((uint64_t *)a2, 4097, 3, (__int16)((v1136[5] >> 1) ^ 0x8000))+ 0x10000;
          }
          else
          {
            *(_DWORD *)(v1134 + v1133) = -v1157;
            v1158 = *(_DWORD *)(v1156 - 8);
          }
          *(_DWORD *)(v1134 + v1133 + 4) = v1158;
          v1155 = 4097;
          v1154 = 10;
          goto LABEL_1974;
        }
      }
      else
      {
        v1146 = ~(_BYTE)v1144 & 7;
        v1147 = *v1145;
        v1144 = v1138 + 2;
        *v2017 = v1138 + 2;
        if (((v1147 >> v1146) & 1) != 0)
        {
          v1148 = 0;
          v1149 = 2;
          goto LABEL_1970;
        }
        v1150 = (void (**)(_QWORD))(a2 + 32);
        v1151 = (_DWORD *)(a2 + 16);
        v1152 = (unsigned __int8 *)(v1139 + (v1144 >> 3));
        if ((unint64_t)v1152 >= v1140)
          goto LABEL_1967;
      }
      v1153 = *v1152;
      *v1151 = v1144 + 1;
      if (((v1153 >> (~(_BYTE)v1144 & 7)) & 1) == 0)
        goto LABEL_1969;
      *(_DWORD *)(v1134 + v1133 + 16) = 0;
      *v1137 = default_warp_params_0;
      *(_OWORD *)(v1134 + v1133) = *(_OWORD *)algn_208F569CC;
      *(_BYTE *)(v1134 + v1133 + 16) = 1;
      *(_QWORD *)(v1134 + v1133) = 0x1000000000000;
      if (v1142)
        v1154 = 13;
      else
        v1154 = 14;
      if (v1142)
        v1155 = 513;
      else
        v1155 = 257;
LABEL_1974:
      *(_DWORD *)v1137 = aom_rb_read_signed_primitive_refsubexpfin((uint64_t *)a2, v1155, 3, (__int16)(*v1136 >> v1154)) << v1154;
      v1159 = aom_rb_read_signed_primitive_refsubexpfin((uint64_t *)a2, v1155, 3, (__int16)(v1136[1] >> v1154)) << v1154;
      v4 = v2003;
      *(_DWORD *)(v1134 + v1133 + 4 - 16) = v1159;
      if (av1_get_shear_params(v1134 + v1133 - 16))
        goto LABEL_1943;
LABEL_1942:
      *(_BYTE *)(v1134 + v1133 + 17) = 1;
LABEL_1943:
      v1133 += 36;
      v1125 = (void (**)(_QWORD))(a2 + 32);
      if (v1133 == 252)
      {
        memcpy((void *)(*(_QWORD *)(v4 + 15432) + 276), (const void *)(v4 + 39588), 0x120uLL);
        v1125 = (void (**)(_QWORD))(a2 + 32);
        v1110 = v1989;
        break;
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 15432) + 568) = *(_BYTE *)(v1110 + 109);
  v1160 = *(_QWORD *)(v1985 + 312);
  if (!*(_BYTE *)(v1160 + 109) || !*(_DWORD *)(v4 + 15680) && !*(_DWORD *)(v4 + 15684))
  {
    bzero((void *)(v4 + 38920), 0x288uLL);
    v1164 = v1992;
    goto LABEL_1996;
  }
  v1161 = v1987 + 36;
  v1162 = *(unsigned int *)(a2 + 16);
  v1163 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1162 >> 3));
  v1164 = v1992;
  if ((unint64_t)v1163 >= *(_QWORD *)(a2 + 8))
  {
    if (*v1125)
      (*v1125)(*(_QWORD *)(a2 + 24));
    goto LABEL_1995;
  }
  v1165 = *v1163 >> (~(_BYTE)v1162 & 7);
  *v2017 = v1162 + 1;
  *v1161 = v1165 & 1;
  if ((v1165 & 1) == 0)
  {
LABEL_1995:
    bzero(v1161, 0x288uLL);
    goto LABEL_1996;
  }
  v1166 = 0;
  v1167 = 17;
  v1169 = (uint64_t *)(a2 + 32);
  v1168 = (_DWORD *)(a2 + 16);
  do
  {
    while (1)
    {
      v1171 = *(unsigned int *)(a2 + 16);
      v1172 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1171 >> 3));
      if ((unint64_t)v1172 >= *(_QWORD *)(a2 + 8))
        break;
      v1170 = (*v1172 >> (~(_BYTE)v1171 & 7)) & 1;
      *v1168 = v1171 + 1;
      v1166 |= v1170 << (v1167-- - 2);
      if (v1167 <= 1)
        goto LABEL_1988;
    }
    if (*v1169)
    {
      ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
      v1169 = (uint64_t *)(a2 + 32);
      v1168 = (_DWORD *)(a2 + 16);
    }
    --v1167;
  }
  while (v1167 > 1);
LABEL_1988:
  *((_WORD *)v1984 + 260) = v1166;
  if (*v1982 != 1)
  {
    v1987[37] = 1;
    v1984[127] = *(_DWORD *)(v1160 + 72);
    goto LABEL_2017;
  }
  v1173 = *(unsigned int *)(a2 + 16);
  v1174 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1173 >> 3));
  if ((unint64_t)v1174 >= *(_QWORD *)(a2 + 8))
  {
    if (*v1169)
    {
      ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
      v1169 = (uint64_t *)(a2 + 32);
      v1168 = (_DWORD *)(a2 + 16);
    }
    v1987[37] = 0;
    v1984[127] = *(_DWORD *)(v1160 + 72);
LABEL_2112:
    v1240 = *(unsigned int *)(a2 + 16);
    v1241 = *(_QWORD *)a2;
    v1242 = *(_QWORD *)(a2 + 8);
    v1243 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1240 >> 3));
    if ((unint64_t)v1243 >= v1242)
    {
      v1243 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1243(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1243) = 0;
        LODWORD(v1240) = *(_DWORD *)(a2 + 16);
        v1241 = *(_QWORD *)a2;
        v1242 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1243) = (*(unsigned __int8 *)v1243 >> (~(_BYTE)v1240 & 7)) & 1;
      LODWORD(v1240) = v1240 + 1;
      *v1168 = v1240;
    }
    v1288 = 4 * (_DWORD)v1243;
    v1289 = (void (*)(_QWORD))(v1241 + (v1240 >> 3));
    if ((unint64_t)v1289 >= v1242)
    {
      v1289 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1289(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1289) = 0;
        LODWORD(v1240) = *(_DWORD *)(a2 + 16);
        v1241 = *(_QWORD *)a2;
        v1242 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1289) = (*(unsigned __int8 *)v1289 >> (~(_BYTE)v1240 & 7)) & 1;
      LODWORD(v1240) = v1240 + 1;
      *v1168 = v1240;
    }
    v1290 = v1288 | (2 * (_DWORD)v1289);
    v1291 = (unsigned __int8 *)(v1241 + (v1240 >> 3));
    if ((unint64_t)v1291 >= v1242)
    {
      if (*v1169)
        ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
      v1292 = 0;
    }
    else
    {
      v1292 = (*v1291 >> (~(_BYTE)v1240 & 7)) & 1;
      *v1168 = v1240 + 1;
    }
    v1293 = v1292 | v1290;
    v1294 = *(_DWORD *)(v4 + 15440);
    if (v1293 != v1294)
    {
      v1295 = *(_DWORD *)(v4 + 15444);
      if (v1293 != v1295)
      {
        v1296 = *(_DWORD *)(v4 + 15448);
        if (v1293 != v1296)
        {
          v1297 = *(_DWORD *)(v4 + 15452);
          if (v1293 != v1297)
          {
            v1298 = *(_DWORD *)(v4 + 15456);
            if (v1293 != v1298 && v1293 != *(_DWORD *)(v4 + 15460))
            {
              v1299 = *(_DWORD *)(v4 + 15464);
              if (v1293 != v1299)
                aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "Invalid film grain reference idx %d. ref_frame_idx = {%d, %d, %d, %d, %d, %d, %d}", v1293, v1294, v1295, v1296, v1297, v1298, *(_DWORD *)(v4 + 15460), v1299);
            }
          }
        }
      }
    }
    v1300 = *(_QWORD *)(v4 + 8 * v1293 + 15616);
    if (!v1300)
      aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "Invalid Film grain reference idx");
    if (!*(_BYTE *)(v1300 + 568))
      aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "Film grain reference parameters not available");
    v1301 = *((_WORD *)v1984 + 260);
    memcpy(v1161, (const void *)(v1300 + 572), 0x288uLL);
    *((_WORD *)v1984 + 260) = v1301;
  }
  else
  {
    v1175 = *v1174 >> (~(_BYTE)v1173 & 7);
    *v1168 = v1173 + 1;
    v1987[37] = v1175 & 1;
    v1984[127] = *(_DWORD *)(v1160 + 72);
    if ((v1175 & 1) == 0)
      goto LABEL_2112;
LABEL_2017:
    v1188 = *(unsigned int *)(a2 + 16);
    v1189 = *(_QWORD *)a2;
    v1190 = *(_QWORD *)(a2 + 8);
    v1191 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1188 >> 3));
    if ((unint64_t)v1191 >= v1190)
    {
      v1191 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1191(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1191) = 0;
        LODWORD(v1188) = *(_DWORD *)(a2 + 16);
        v1189 = *(_QWORD *)a2;
        v1190 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1191) = (*(unsigned __int8 *)v1191 >> (~(_BYTE)v1188 & 7)) & 1;
      LODWORD(v1188) = v1188 + 1;
      *v1168 = v1188;
    }
    v1228 = 8 * (_DWORD)v1191;
    v1229 = (void (*)(_QWORD))(v1189 + (v1188 >> 3));
    if ((unint64_t)v1229 >= v1190)
    {
      v1229 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1229(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1229) = 0;
        LODWORD(v1188) = *(_DWORD *)(a2 + 16);
        v1189 = *(_QWORD *)a2;
        v1190 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1229) = (*(unsigned __int8 *)v1229 >> (~(_BYTE)v1188 & 7)) & 1;
      LODWORD(v1188) = v1188 + 1;
      *v1168 = v1188;
    }
    v1230 = v1228 | (4 * (_DWORD)v1229);
    v1231 = (void (*)(_QWORD))(v1189 + (v1188 >> 3));
    if ((unint64_t)v1231 >= v1190)
    {
      v1231 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1231(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1231) = 0;
        LODWORD(v1188) = *(_DWORD *)(a2 + 16);
        v1189 = *(_QWORD *)a2;
        v1190 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1231) = (*(unsigned __int8 *)v1231 >> (~(_BYTE)v1188 & 7)) & 1;
      LODWORD(v1188) = v1188 + 1;
      *v1168 = v1188;
    }
    v1232 = v1230 | (2 * (_DWORD)v1231);
    v1233 = (unsigned __int8 *)(v1189 + (v1188 >> 3));
    v1990 = v1160;
    if ((unint64_t)v1233 >= v1190)
    {
      if (*v1169)
      {
        ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
      }
      v1234 = 0;
    }
    else
    {
      v1234 = (*v1233 >> (~(_BYTE)v1188 & 7)) & 1;
      *v1168 = v1188 + 1;
    }
    v1235 = v1234 | v1232;
    v1987[66] = v1234 | v1232;
    if ((v1234 | v1232) == 0xF)
    {
      aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "Number of points for film grain luma scaling function exceeds the maximum value.");
      v1169 = (uint64_t *)(a2 + 32);
      v1168 = (_DWORD *)(a2 + 16);
      v1235 = v1987[66];
    }
    if (v1235 >= 1)
    {
      v1236 = *(unsigned int *)(a2 + 16);
      v1237 = *(_QWORD *)a2;
      v1238 = *(_QWORD *)(a2 + 8);
      v1239 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1236 >> 3));
      if ((unint64_t)v1239 >= v1238)
      {
        v1239 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1239(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1239) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1239) = (*(unsigned __int8 *)v1239 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1273 = (_DWORD)v1239 << 7;
      v1274 = (void (*)(_QWORD))(v1237 + (v1236 >> 3));
      if ((unint64_t)v1274 >= v1238)
      {
        v1274 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1274(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1274) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1274) = (*(unsigned __int8 *)v1274 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1275 = v1273 | ((_DWORD)v1274 << 6);
      v1276 = (void (*)(_QWORD))(v1237 + (v1236 >> 3));
      if ((unint64_t)v1276 >= v1238)
      {
        v1276 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1276(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1276) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1276) = (*(unsigned __int8 *)v1276 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1277 = v1275 | (32 * (_DWORD)v1276);
      v1278 = (void (*)(_QWORD))(v1237 + (v1236 >> 3));
      if ((unint64_t)v1278 >= v1238)
      {
        v1278 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1278(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1278) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1278) = (*(unsigned __int8 *)v1278 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1279 = v1277 | (16 * (_DWORD)v1278);
      v1280 = (void (*)(_QWORD))(v1237 + (v1236 >> 3));
      if ((unint64_t)v1280 >= v1238)
      {
        v1280 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1280(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1280) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1280) = (*(unsigned __int8 *)v1280 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1281 = v1279 | (8 * (_DWORD)v1280);
      v1282 = (void (*)(_QWORD))(v1237 + (v1236 >> 3));
      if ((unint64_t)v1282 >= v1238)
      {
        v1282 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1282(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1282) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1282) = (*(unsigned __int8 *)v1282 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1283 = v1281 | (4 * (_DWORD)v1282);
      v1284 = (void (*)(_QWORD))(v1237 + (v1236 >> 3));
      if ((unint64_t)v1284 >= v1238)
      {
        v1284 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1284(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1284) = 0;
          LODWORD(v1236) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1284) = (*(unsigned __int8 *)v1284 >> (~(_BYTE)v1236 & 7)) & 1;
        LODWORD(v1236) = v1236 + 1;
        *v1168 = v1236;
      }
      v1285 = v1283 | (2 * (_DWORD)v1284);
      v1286 = (unsigned __int8 *)(v1237 + (v1236 >> 3));
      if ((unint64_t)v1286 >= v1238)
      {
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1287 = 0;
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v1287 = 0;
        }
      }
      else
      {
        v1287 = (*v1286 >> (~(_BYTE)v1236 & 7)) & 1;
        *v1168 = v1236 + 1;
      }
      v1987[38] = v1287 | v1285;
      v1303 = *v1168;
      v1304 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1304 >= v1238)
      {
        v1304 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1304(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1304) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1304) = (*(unsigned __int8 *)v1304 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1305 = (_DWORD)v1304 << 7;
      v1306 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1306 >= v1238)
      {
        v1306 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1306(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1306) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1306) = (*(unsigned __int8 *)v1306 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1307 = v1305 | ((_DWORD)v1306 << 6);
      v1308 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1308 >= v1238)
      {
        v1308 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1308(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1308) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1308) = (*(unsigned __int8 *)v1308 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1309 = v1307 | (32 * (_DWORD)v1308);
      v1310 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1310 >= v1238)
      {
        v1310 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1310(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1310) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1310) = (*(unsigned __int8 *)v1310 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1311 = v1309 | (16 * (_DWORD)v1310);
      v1312 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1312 >= v1238)
      {
        v1312 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1312(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1312) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1312) = (*(unsigned __int8 *)v1312 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1313 = v1311 | (8 * (_DWORD)v1312);
      v1314 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1314 >= v1238)
      {
        v1314 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1314(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1314) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1314) = (*(unsigned __int8 *)v1314 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1315 = v1313 | (4 * (_DWORD)v1314);
      v1316 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1316 >= v1238)
      {
        v1316 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1316(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1316) = 0;
          LODWORD(v1303) = *(_DWORD *)(a2 + 16);
          v1237 = *(_QWORD *)a2;
          v1238 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1316) = (*(unsigned __int8 *)v1316 >> (~(_BYTE)v1303 & 7)) & 1;
        LODWORD(v1303) = v1303 + 1;
        *v1168 = v1303;
      }
      v1317 = v1315 | (2 * (_DWORD)v1316);
      v1318 = (void (*)(_QWORD))(v1237 + (v1303 >> 3));
      if ((unint64_t)v1318 >= v1238)
      {
        v1318 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1318(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1318) = 0;
        }
      }
      else
      {
        LODWORD(v1318) = (*(unsigned __int8 *)v1318 >> (~(_BYTE)v1303 & 7)) & 1;
        *v1168 = v1303 + 1;
      }
      v1987[39] = v1318 | v1317;
      if ((int)v1987[66] >= 2)
      {
        v1319 = v1987 + 41;
        for (ii = 1; ii < (int)v1987[66]; ++ii)
        {
          v1322 = *(unsigned int *)(a2 + 16);
          v1323 = *(_QWORD *)a2;
          v1324 = *(_QWORD *)(a2 + 8);
          v1325 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
          if ((unint64_t)v1325 >= v1324)
          {
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v2004 = 0;
              LODWORD(v1322) = *(_DWORD *)(a2 + 16);
              v1323 = *(_QWORD *)a2;
              v1324 = *(_QWORD *)(a2 + 8);
              v1326 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
              if ((unint64_t)v1326 < v1324)
                goto LABEL_2285;
            }
            else
            {
              v2004 = 0;
              v1326 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
              if ((unint64_t)v1326 < v1324)
              {
LABEL_2285:
                v1995 = (*v1326 >> (~(_BYTE)v1322 & 7)) & 1;
                LODWORD(v1322) = v1322 + 1;
                *v1168 = v1322;
                v1327 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
                if ((unint64_t)v1327 < v1324)
                  goto LABEL_2286;
                goto LABEL_2296;
              }
            }
          }
          else
          {
            v2004 = (*v1325 >> (~(_BYTE)v1322 & 7)) & 1;
            LODWORD(v1322) = v1322 + 1;
            *v1168 = v1322;
            v1326 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1326 < v1324)
              goto LABEL_2285;
          }
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1995 = 0;
            LODWORD(v1322) = *(_DWORD *)(a2 + 16);
            v1323 = *(_QWORD *)a2;
            v1324 = *(_QWORD *)(a2 + 8);
            v1327 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
            if ((unint64_t)v1327 < v1324)
              goto LABEL_2286;
          }
          else
          {
            v1995 = 0;
            v1327 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1327 < v1324)
            {
LABEL_2286:
              v1328 = (*v1327 >> (~(_BYTE)v1322 & 7)) & 1;
              LODWORD(v1322) = v1322 + 1;
              *v1168 = v1322;
              v1329 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
              if ((unint64_t)v1329 < v1324)
                goto LABEL_2287;
              goto LABEL_2298;
            }
          }
LABEL_2296:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1328 = 0;
            LODWORD(v1322) = *(_DWORD *)(a2 + 16);
            v1323 = *(_QWORD *)a2;
            v1324 = *(_QWORD *)(a2 + 8);
            v1329 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
            if ((unint64_t)v1329 < v1324)
              goto LABEL_2287;
          }
          else
          {
            v1328 = 0;
            v1329 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1329 < v1324)
            {
LABEL_2287:
              v1330 = (*v1329 >> (~(_BYTE)v1322 & 7)) & 1;
              LODWORD(v1322) = v1322 + 1;
              *v1168 = v1322;
              v1331 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
              if ((unint64_t)v1331 < v1324)
                goto LABEL_2288;
              goto LABEL_2300;
            }
          }
LABEL_2298:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1330 = 0;
            LODWORD(v1322) = *(_DWORD *)(a2 + 16);
            v1323 = *(_QWORD *)a2;
            v1324 = *(_QWORD *)(a2 + 8);
            v1331 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
            if ((unint64_t)v1331 < v1324)
              goto LABEL_2288;
          }
          else
          {
            v1330 = 0;
            v1331 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1331 < v1324)
            {
LABEL_2288:
              v1332 = (*v1331 >> (~(_BYTE)v1322 & 7)) & 1;
              LODWORD(v1322) = v1322 + 1;
              *v1168 = v1322;
              v1333 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
              if ((unint64_t)v1333 < v1324)
                goto LABEL_2289;
              goto LABEL_2302;
            }
          }
LABEL_2300:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1332 = 0;
            LODWORD(v1322) = *(_DWORD *)(a2 + 16);
            v1323 = *(_QWORD *)a2;
            v1324 = *(_QWORD *)(a2 + 8);
            v1333 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
            if ((unint64_t)v1333 < v1324)
              goto LABEL_2289;
          }
          else
          {
            v1332 = 0;
            v1333 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1333 < v1324)
            {
LABEL_2289:
              v1334 = (*v1333 >> (~(_BYTE)v1322 & 7)) & 1;
              LODWORD(v1322) = v1322 + 1;
              *v1168 = v1322;
              v1335 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
              if ((unint64_t)v1335 < v1324)
                goto LABEL_2290;
              goto LABEL_2304;
            }
          }
LABEL_2302:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1334 = 0;
            LODWORD(v1322) = *(_DWORD *)(a2 + 16);
            v1323 = *(_QWORD *)a2;
            v1324 = *(_QWORD *)(a2 + 8);
            v1335 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
            if ((unint64_t)v1335 < v1324)
              goto LABEL_2290;
          }
          else
          {
            v1334 = 0;
            v1335 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1335 < v1324)
            {
LABEL_2290:
              v1336 = (*v1335 >> (~(_BYTE)v1322 & 7)) & 1;
              LODWORD(v1322) = v1322 + 1;
              *v1168 = v1322;
              v1337 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
              if ((unint64_t)v1337 < v1324)
                goto LABEL_2291;
              goto LABEL_2306;
            }
          }
LABEL_2304:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1336 = 0;
            LODWORD(v1322) = *(_DWORD *)(a2 + 16);
            v1337 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1322 >> 3));
            if ((unint64_t)v1337 < *(_QWORD *)(a2 + 8))
              goto LABEL_2291;
          }
          else
          {
            v1336 = 0;
            v1337 = (unsigned __int8 *)(v1323 + (v1322 >> 3));
            if ((unint64_t)v1337 < v1324)
            {
LABEL_2291:
              v1338 = (*v1337 >> (~(_BYTE)v1322 & 7)) & 1;
              *v1168 = v1322 + 1;
              goto LABEL_2309;
            }
          }
LABEL_2306:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
          }
          v1338 = 0;
LABEL_2309:
          v1339 = v1338 | (v2004 << 7) | (v1995 << 6) | (32 * v1328) | (16 * v1330) | (8 * v1332) | (4 * v1334) | (2 * v1336);
          *(v1319 - 1) = v1339;
          if (*(v1319 - 3) >= v1339)
          {
            aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "First coordinate of the scaling function points shall be increasing.");
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
          }
          v1340 = *(unsigned int *)(a2 + 16);
          v1341 = *(_QWORD *)a2;
          v1342 = *(_QWORD *)(a2 + 8);
          v1343 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
          if ((unint64_t)v1343 >= v1342)
          {
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v2005 = 0;
              LODWORD(v1340) = *(_DWORD *)(a2 + 16);
              v1341 = *(_QWORD *)a2;
              v1342 = *(_QWORD *)(a2 + 8);
              v1344 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
              if ((unint64_t)v1344 < v1342)
                goto LABEL_2313;
            }
            else
            {
              v2005 = 0;
              v1344 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
              if ((unint64_t)v1344 < v1342)
              {
LABEL_2313:
                v1996 = (*v1344 >> (~(_BYTE)v1340 & 7)) & 1;
                LODWORD(v1340) = v1340 + 1;
                *v1168 = v1340;
                v1345 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
                if ((unint64_t)v1345 < v1342)
                  goto LABEL_2314;
                goto LABEL_2324;
              }
            }
          }
          else
          {
            v2005 = (*v1343 >> (~(_BYTE)v1340 & 7)) & 1;
            LODWORD(v1340) = v1340 + 1;
            *v1168 = v1340;
            v1344 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1344 < v1342)
              goto LABEL_2313;
          }
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1996 = 0;
            LODWORD(v1340) = *(_DWORD *)(a2 + 16);
            v1341 = *(_QWORD *)a2;
            v1342 = *(_QWORD *)(a2 + 8);
            v1345 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
            if ((unint64_t)v1345 < v1342)
              goto LABEL_2314;
          }
          else
          {
            v1996 = 0;
            v1345 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1345 < v1342)
            {
LABEL_2314:
              v1346 = (*v1345 >> (~(_BYTE)v1340 & 7)) & 1;
              LODWORD(v1340) = v1340 + 1;
              *v1168 = v1340;
              v1347 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
              if ((unint64_t)v1347 < v1342)
                goto LABEL_2315;
              goto LABEL_2326;
            }
          }
LABEL_2324:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1346 = 0;
            LODWORD(v1340) = *(_DWORD *)(a2 + 16);
            v1341 = *(_QWORD *)a2;
            v1342 = *(_QWORD *)(a2 + 8);
            v1347 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
            if ((unint64_t)v1347 < v1342)
              goto LABEL_2315;
          }
          else
          {
            v1346 = 0;
            v1347 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1347 < v1342)
            {
LABEL_2315:
              v1348 = (*v1347 >> (~(_BYTE)v1340 & 7)) & 1;
              LODWORD(v1340) = v1340 + 1;
              *v1168 = v1340;
              v1349 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
              if ((unint64_t)v1349 < v1342)
                goto LABEL_2316;
              goto LABEL_2328;
            }
          }
LABEL_2326:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1348 = 0;
            LODWORD(v1340) = *(_DWORD *)(a2 + 16);
            v1341 = *(_QWORD *)a2;
            v1342 = *(_QWORD *)(a2 + 8);
            v1349 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
            if ((unint64_t)v1349 < v1342)
              goto LABEL_2316;
          }
          else
          {
            v1348 = 0;
            v1349 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1349 < v1342)
            {
LABEL_2316:
              v1350 = (*v1349 >> (~(_BYTE)v1340 & 7)) & 1;
              LODWORD(v1340) = v1340 + 1;
              *v1168 = v1340;
              v1351 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
              if ((unint64_t)v1351 < v1342)
                goto LABEL_2317;
              goto LABEL_2330;
            }
          }
LABEL_2328:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1350 = 0;
            LODWORD(v1340) = *(_DWORD *)(a2 + 16);
            v1341 = *(_QWORD *)a2;
            v1342 = *(_QWORD *)(a2 + 8);
            v1351 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
            if ((unint64_t)v1351 < v1342)
              goto LABEL_2317;
          }
          else
          {
            v1350 = 0;
            v1351 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1351 < v1342)
            {
LABEL_2317:
              v1352 = (*v1351 >> (~(_BYTE)v1340 & 7)) & 1;
              LODWORD(v1340) = v1340 + 1;
              *v1168 = v1340;
              v1353 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
              if ((unint64_t)v1353 < v1342)
                goto LABEL_2318;
              goto LABEL_2332;
            }
          }
LABEL_2330:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1352 = 0;
            LODWORD(v1340) = *(_DWORD *)(a2 + 16);
            v1341 = *(_QWORD *)a2;
            v1342 = *(_QWORD *)(a2 + 8);
            v1353 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
            if ((unint64_t)v1353 < v1342)
              goto LABEL_2318;
          }
          else
          {
            v1352 = 0;
            v1353 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1353 < v1342)
            {
LABEL_2318:
              v1354 = (*v1353 >> (~(_BYTE)v1340 & 7)) & 1;
              LODWORD(v1340) = v1340 + 1;
              *v1168 = v1340;
              v1355 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
              if ((unint64_t)v1355 >= v1342)
                goto LABEL_2362;
              goto LABEL_2281;
            }
          }
LABEL_2332:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1354 = 0;
            LODWORD(v1340) = *(_DWORD *)(a2 + 16);
            v1355 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1340 >> 3));
            if ((unint64_t)v1355 >= *(_QWORD *)(a2 + 8))
              goto LABEL_2362;
          }
          else
          {
            v1354 = 0;
            v1355 = (unsigned __int8 *)(v1341 + (v1340 >> 3));
            if ((unint64_t)v1355 >= v1342)
            {
LABEL_2362:
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
              }
              v1321 = 0;
              goto LABEL_2282;
            }
          }
LABEL_2281:
          v1321 = (*v1355 >> (~(_BYTE)v1340 & 7)) & 1;
          *v1168 = v1340 + 1;
LABEL_2282:
          *v1319 = v1321 | (v2005 << 7) | (v1996 << 6) | (32 * v1346) | (16 * v1348) | (8 * v1350) | (4 * v1352) | (2 * v1354);
          v1319 += 2;
        }
      }
    }
    if (*(_BYTE *)(v1990 + 77))
    {
      v1356 = v1984;
      v1984[128] = 0;
      v1164 = v1992;
      goto LABEL_2442;
    }
    v1357 = *(unsigned int *)(a2 + 16);
    v1358 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1357 >> 3));
    if ((unint64_t)v1358 >= *(_QWORD *)(a2 + 8))
    {
      v1359 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1359(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        v1360 = 0;
        LODWORD(v1359) = *(unsigned __int8 *)(v1990 + 77);
      }
      else
      {
        v1360 = 0;
      }
    }
    else
    {
      LODWORD(v1359) = 0;
      v1360 = (*v1358 >> (~(_BYTE)v1357 & 7)) & 1;
      *v1168 = v1357 + 1;
    }
    v1164 = v1992;
    v1984[128] = v1360;
    v1391 = v1359 | v1360;
    v1356 = v1984;
    if (v1391 || *(_DWORD *)(v1990 + 96) == 1 && *(_DWORD *)(v1990 + 100) == 1 && !v1987[66])
    {
LABEL_2442:
      v1356[20] = 0;
      v1356[41] = 0;
    }
    else
    {
      v1392 = *(unsigned int *)(a2 + 16);
      v1393 = *(_QWORD *)a2;
      v1394 = *(_QWORD *)(a2 + 8);
      v1395 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1392 >> 3));
      if ((unint64_t)v1395 >= v1394)
      {
        v1395 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1395(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1395) = 0;
          LODWORD(v1392) = *(_DWORD *)(a2 + 16);
          v1393 = *(_QWORD *)a2;
          v1394 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1395) = (*(unsigned __int8 *)v1395 >> (~(_BYTE)v1392 & 7)) & 1;
        LODWORD(v1392) = v1392 + 1;
        *v1168 = v1392;
      }
      v1578 = 8 * (_DWORD)v1395;
      v1579 = (void (*)(_QWORD))(v1393 + (v1392 >> 3));
      if ((unint64_t)v1579 >= v1394)
      {
        v1579 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1579(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1579) = 0;
          LODWORD(v1392) = *(_DWORD *)(a2 + 16);
          v1393 = *(_QWORD *)a2;
          v1394 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1579) = (*(unsigned __int8 *)v1579 >> (~(_BYTE)v1392 & 7)) & 1;
        LODWORD(v1392) = v1392 + 1;
        *v1168 = v1392;
      }
      v1580 = v1578 | (4 * (_DWORD)v1579);
      v1581 = (void (*)(_QWORD))(v1393 + (v1392 >> 3));
      if ((unint64_t)v1581 >= v1394)
      {
        v1581 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1581(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1581) = 0;
          LODWORD(v1392) = *(_DWORD *)(a2 + 16);
          v1393 = *(_QWORD *)a2;
          v1394 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1581) = (*(unsigned __int8 *)v1581 >> (~(_BYTE)v1392 & 7)) & 1;
        LODWORD(v1392) = v1392 + 1;
        *v1168 = v1392;
      }
      v1582 = v1580 | (2 * (_DWORD)v1581);
      v1583 = (unsigned __int8 *)(v1393 + (v1392 >> 3));
      if ((unint64_t)v1583 >= v1394)
      {
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
        }
        v1584 = 0;
      }
      else
      {
        v1584 = (*v1583 >> (~(_BYTE)v1392 & 7)) & 1;
        *v1168 = v1392 + 1;
      }
      v1585 = v1584 | v1582;
      v1984[20] = v1584 | v1582;
      if ((v1584 | v1582) >= 0xB)
      {
        aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "Number of points for film grain cb scaling function exceeds the maximum value.");
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        v1585 = v1984[20];
      }
      if (v1585 >= 1)
      {
        v1586 = *(unsigned int *)(a2 + 16);
        v1587 = *(_QWORD *)a2;
        v1588 = *(_QWORD *)(a2 + 8);
        v1589 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1586 >> 3));
        if ((unint64_t)v1589 >= v1588)
        {
          v1589 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1589(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1589) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1589) = (*(unsigned __int8 *)v1589 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1590 = (_DWORD)v1589 << 7;
        v1591 = (void (*)(_QWORD))(v1587 + (v1586 >> 3));
        if ((unint64_t)v1591 >= v1588)
        {
          v1591 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1591(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1591) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1591) = (*(unsigned __int8 *)v1591 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1592 = v1590 | ((_DWORD)v1591 << 6);
        v1593 = (void (*)(_QWORD))(v1587 + (v1586 >> 3));
        if ((unint64_t)v1593 >= v1588)
        {
          v1593 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1593(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1593) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1593) = (*(unsigned __int8 *)v1593 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1594 = v1592 | (32 * (_DWORD)v1593);
        v1595 = (void (*)(_QWORD))(v1587 + (v1586 >> 3));
        if ((unint64_t)v1595 >= v1588)
        {
          v1595 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1595(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1595) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1595) = (*(unsigned __int8 *)v1595 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1596 = v1594 | (16 * (_DWORD)v1595);
        v1597 = (void (*)(_QWORD))(v1587 + (v1586 >> 3));
        if ((unint64_t)v1597 >= v1588)
        {
          v1597 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1597(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1597) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1597) = (*(unsigned __int8 *)v1597 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1598 = v1596 | (8 * (_DWORD)v1597);
        v1599 = (void (*)(_QWORD))(v1587 + (v1586 >> 3));
        if ((unint64_t)v1599 >= v1588)
        {
          v1599 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1599(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1599) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1599) = (*(unsigned __int8 *)v1599 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1600 = v1598 | (4 * (_DWORD)v1599);
        v1601 = (void (*)(_QWORD))(v1587 + (v1586 >> 3));
        if ((unint64_t)v1601 >= v1588)
        {
          v1601 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1601(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1601) = 0;
            LODWORD(v1586) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1601) = (*(unsigned __int8 *)v1601 >> (~(_BYTE)v1586 & 7)) & 1;
          LODWORD(v1586) = v1586 + 1;
          *v1168 = v1586;
        }
        v1602 = v1600 | (2 * (_DWORD)v1601);
        v1603 = (unsigned __int8 *)(v1587 + (v1586 >> 3));
        if ((unint64_t)v1603 >= v1588)
        {
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1604 = 0;
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            v1604 = 0;
          }
        }
        else
        {
          v1604 = (*v1603 >> (~(_BYTE)v1586 & 7)) & 1;
          *v1168 = v1586 + 1;
        }
        *v1984 = v1604 | v1602;
        v1607 = *v1168;
        v1608 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1608 >= v1588)
        {
          v1608 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1608(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1608) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1608) = (*(unsigned __int8 *)v1608 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1609 = (_DWORD)v1608 << 7;
        v1610 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1610 >= v1588)
        {
          v1610 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1610(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1610) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1610) = (*(unsigned __int8 *)v1610 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1611 = v1609 | ((_DWORD)v1610 << 6);
        v1612 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1612 >= v1588)
        {
          v1612 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1612(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1612) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1612) = (*(unsigned __int8 *)v1612 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1613 = v1611 | (32 * (_DWORD)v1612);
        v1614 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1614 >= v1588)
        {
          v1614 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1614(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1614) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1614) = (*(unsigned __int8 *)v1614 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1615 = v1613 | (16 * (_DWORD)v1614);
        v1616 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1616 >= v1588)
        {
          v1616 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1616(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1616) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1616) = (*(unsigned __int8 *)v1616 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1617 = v1615 | (8 * (_DWORD)v1616);
        v1618 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1618 >= v1588)
        {
          v1618 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1618(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1618) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1618) = (*(unsigned __int8 *)v1618 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1619 = v1617 | (4 * (_DWORD)v1618);
        v1620 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1620 >= v1588)
        {
          v1620 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1620(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1620) = 0;
            LODWORD(v1607) = *(_DWORD *)(a2 + 16);
            v1587 = *(_QWORD *)a2;
            v1588 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1620) = (*(unsigned __int8 *)v1620 >> (~(_BYTE)v1607 & 7)) & 1;
          LODWORD(v1607) = v1607 + 1;
          *v1168 = v1607;
        }
        v1621 = v1619 | (2 * (_DWORD)v1620);
        v1622 = (void (*)(_QWORD))(v1587 + (v1607 >> 3));
        if ((unint64_t)v1622 >= v1588)
        {
          v1622 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1622(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1622) = 0;
          }
        }
        else
        {
          LODWORD(v1622) = (*(unsigned __int8 *)v1622 >> (~(_BYTE)v1607 & 7)) & 1;
          *v1168 = v1607 + 1;
        }
        v1984[1] = v1622 | v1621;
        if (v1984[20] >= 2)
        {
          v1623 = v1984 + 3;
          for (jj = 1; jj < v1984[20]; ++jj)
          {
            v1626 = *(unsigned int *)(a2 + 16);
            v1627 = *(_QWORD *)a2;
            v1628 = *(_QWORD *)(a2 + 8);
            v1629 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
            if ((unint64_t)v1629 >= v1628)
            {
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v2009 = 0;
                LODWORD(v1626) = *(_DWORD *)(a2 + 16);
                v1627 = *(_QWORD *)a2;
                v1628 = *(_QWORD *)(a2 + 8);
                v1630 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
                if ((unint64_t)v1630 < v1628)
                  goto LABEL_2933;
              }
              else
              {
                v2009 = 0;
                v1630 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                if ((unint64_t)v1630 < v1628)
                {
LABEL_2933:
                  v1999 = (*v1630 >> (~(_BYTE)v1626 & 7)) & 1;
                  LODWORD(v1626) = v1626 + 1;
                  *v1168 = v1626;
                  v1631 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                  if ((unint64_t)v1631 < v1628)
                    goto LABEL_2934;
                  goto LABEL_2944;
                }
              }
            }
            else
            {
              v2009 = (*v1629 >> (~(_BYTE)v1626 & 7)) & 1;
              LODWORD(v1626) = v1626 + 1;
              *v1168 = v1626;
              v1630 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1630 < v1628)
                goto LABEL_2933;
            }
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1999 = 0;
              LODWORD(v1626) = *(_DWORD *)(a2 + 16);
              v1627 = *(_QWORD *)a2;
              v1628 = *(_QWORD *)(a2 + 8);
              v1631 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
              if ((unint64_t)v1631 < v1628)
                goto LABEL_2934;
            }
            else
            {
              v1999 = 0;
              v1631 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1631 < v1628)
              {
LABEL_2934:
                v1632 = (*v1631 >> (~(_BYTE)v1626 & 7)) & 1;
                LODWORD(v1626) = v1626 + 1;
                *v1168 = v1626;
                v1633 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                if ((unint64_t)v1633 < v1628)
                  goto LABEL_2935;
                goto LABEL_2946;
              }
            }
LABEL_2944:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1632 = 0;
              LODWORD(v1626) = *(_DWORD *)(a2 + 16);
              v1627 = *(_QWORD *)a2;
              v1628 = *(_QWORD *)(a2 + 8);
              v1633 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
              if ((unint64_t)v1633 < v1628)
                goto LABEL_2935;
            }
            else
            {
              v1632 = 0;
              v1633 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1633 < v1628)
              {
LABEL_2935:
                v1634 = (*v1633 >> (~(_BYTE)v1626 & 7)) & 1;
                LODWORD(v1626) = v1626 + 1;
                *v1168 = v1626;
                v1635 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                if ((unint64_t)v1635 < v1628)
                  goto LABEL_2936;
                goto LABEL_2948;
              }
            }
LABEL_2946:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1634 = 0;
              LODWORD(v1626) = *(_DWORD *)(a2 + 16);
              v1627 = *(_QWORD *)a2;
              v1628 = *(_QWORD *)(a2 + 8);
              v1635 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
              if ((unint64_t)v1635 < v1628)
                goto LABEL_2936;
            }
            else
            {
              v1634 = 0;
              v1635 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1635 < v1628)
              {
LABEL_2936:
                v1636 = (*v1635 >> (~(_BYTE)v1626 & 7)) & 1;
                LODWORD(v1626) = v1626 + 1;
                *v1168 = v1626;
                v1637 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                if ((unint64_t)v1637 < v1628)
                  goto LABEL_2937;
                goto LABEL_2950;
              }
            }
LABEL_2948:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1636 = 0;
              LODWORD(v1626) = *(_DWORD *)(a2 + 16);
              v1627 = *(_QWORD *)a2;
              v1628 = *(_QWORD *)(a2 + 8);
              v1637 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
              if ((unint64_t)v1637 < v1628)
                goto LABEL_2937;
            }
            else
            {
              v1636 = 0;
              v1637 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1637 < v1628)
              {
LABEL_2937:
                v1638 = (*v1637 >> (~(_BYTE)v1626 & 7)) & 1;
                LODWORD(v1626) = v1626 + 1;
                *v1168 = v1626;
                v1639 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                if ((unint64_t)v1639 < v1628)
                  goto LABEL_2938;
                goto LABEL_2952;
              }
            }
LABEL_2950:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1638 = 0;
              LODWORD(v1626) = *(_DWORD *)(a2 + 16);
              v1627 = *(_QWORD *)a2;
              v1628 = *(_QWORD *)(a2 + 8);
              v1639 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
              if ((unint64_t)v1639 < v1628)
                goto LABEL_2938;
            }
            else
            {
              v1638 = 0;
              v1639 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1639 < v1628)
              {
LABEL_2938:
                v1640 = (*v1639 >> (~(_BYTE)v1626 & 7)) & 1;
                LODWORD(v1626) = v1626 + 1;
                *v1168 = v1626;
                v1641 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
                if ((unint64_t)v1641 < v1628)
                  goto LABEL_2939;
                goto LABEL_2954;
              }
            }
LABEL_2952:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1640 = 0;
              LODWORD(v1626) = *(_DWORD *)(a2 + 16);
              v1641 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1626 >> 3));
              if ((unint64_t)v1641 < *(_QWORD *)(a2 + 8))
                goto LABEL_2939;
            }
            else
            {
              v1640 = 0;
              v1641 = (unsigned __int8 *)(v1627 + (v1626 >> 3));
              if ((unint64_t)v1641 < v1628)
              {
LABEL_2939:
                v1642 = (*v1641 >> (~(_BYTE)v1626 & 7)) & 1;
                *v1168 = v1626 + 1;
                goto LABEL_2957;
              }
            }
LABEL_2954:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
            }
            v1642 = 0;
LABEL_2957:
            v1643 = v1642 | (v2009 << 7) | (v1999 << 6) | (32 * v1632) | (16 * v1634) | (8 * v1636) | (4 * v1638) | (2 * v1640);
            *(v1623 - 1) = v1643;
            if (*(v1623 - 3) >= v1643)
            {
              aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "First coordinate of the scaling function points shall be increasing.");
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
            }
            v1644 = *(unsigned int *)(a2 + 16);
            v1645 = *(_QWORD *)a2;
            v1646 = *(_QWORD *)(a2 + 8);
            v1647 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
            if ((unint64_t)v1647 >= v1646)
            {
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v2010 = 0;
                LODWORD(v1644) = *(_DWORD *)(a2 + 16);
                v1645 = *(_QWORD *)a2;
                v1646 = *(_QWORD *)(a2 + 8);
                v1648 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
                if ((unint64_t)v1648 < v1646)
                  goto LABEL_2961;
              }
              else
              {
                v2010 = 0;
                v1648 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                if ((unint64_t)v1648 < v1646)
                {
LABEL_2961:
                  v2000 = (*v1648 >> (~(_BYTE)v1644 & 7)) & 1;
                  LODWORD(v1644) = v1644 + 1;
                  *v1168 = v1644;
                  v1649 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                  if ((unint64_t)v1649 < v1646)
                    goto LABEL_2962;
                  goto LABEL_2972;
                }
              }
            }
            else
            {
              v2010 = (*v1647 >> (~(_BYTE)v1644 & 7)) & 1;
              LODWORD(v1644) = v1644 + 1;
              *v1168 = v1644;
              v1648 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1648 < v1646)
                goto LABEL_2961;
            }
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v2000 = 0;
              LODWORD(v1644) = *(_DWORD *)(a2 + 16);
              v1645 = *(_QWORD *)a2;
              v1646 = *(_QWORD *)(a2 + 8);
              v1649 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
              if ((unint64_t)v1649 < v1646)
                goto LABEL_2962;
            }
            else
            {
              v2000 = 0;
              v1649 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1649 < v1646)
              {
LABEL_2962:
                v1650 = (*v1649 >> (~(_BYTE)v1644 & 7)) & 1;
                LODWORD(v1644) = v1644 + 1;
                *v1168 = v1644;
                v1651 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                if ((unint64_t)v1651 < v1646)
                  goto LABEL_2963;
                goto LABEL_2974;
              }
            }
LABEL_2972:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1650 = 0;
              LODWORD(v1644) = *(_DWORD *)(a2 + 16);
              v1645 = *(_QWORD *)a2;
              v1646 = *(_QWORD *)(a2 + 8);
              v1651 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
              if ((unint64_t)v1651 < v1646)
                goto LABEL_2963;
            }
            else
            {
              v1650 = 0;
              v1651 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1651 < v1646)
              {
LABEL_2963:
                v1652 = (*v1651 >> (~(_BYTE)v1644 & 7)) & 1;
                LODWORD(v1644) = v1644 + 1;
                *v1168 = v1644;
                v1653 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                if ((unint64_t)v1653 < v1646)
                  goto LABEL_2964;
                goto LABEL_2976;
              }
            }
LABEL_2974:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1652 = 0;
              LODWORD(v1644) = *(_DWORD *)(a2 + 16);
              v1645 = *(_QWORD *)a2;
              v1646 = *(_QWORD *)(a2 + 8);
              v1653 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
              if ((unint64_t)v1653 < v1646)
                goto LABEL_2964;
            }
            else
            {
              v1652 = 0;
              v1653 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1653 < v1646)
              {
LABEL_2964:
                v1654 = (*v1653 >> (~(_BYTE)v1644 & 7)) & 1;
                LODWORD(v1644) = v1644 + 1;
                *v1168 = v1644;
                v1655 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                if ((unint64_t)v1655 < v1646)
                  goto LABEL_2965;
                goto LABEL_2978;
              }
            }
LABEL_2976:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1654 = 0;
              LODWORD(v1644) = *(_DWORD *)(a2 + 16);
              v1645 = *(_QWORD *)a2;
              v1646 = *(_QWORD *)(a2 + 8);
              v1655 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
              if ((unint64_t)v1655 < v1646)
                goto LABEL_2965;
            }
            else
            {
              v1654 = 0;
              v1655 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1655 < v1646)
              {
LABEL_2965:
                v1656 = (*v1655 >> (~(_BYTE)v1644 & 7)) & 1;
                LODWORD(v1644) = v1644 + 1;
                *v1168 = v1644;
                v1657 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                if ((unint64_t)v1657 < v1646)
                  goto LABEL_2966;
                goto LABEL_2980;
              }
            }
LABEL_2978:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1656 = 0;
              LODWORD(v1644) = *(_DWORD *)(a2 + 16);
              v1645 = *(_QWORD *)a2;
              v1646 = *(_QWORD *)(a2 + 8);
              v1657 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
              if ((unint64_t)v1657 < v1646)
                goto LABEL_2966;
            }
            else
            {
              v1656 = 0;
              v1657 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1657 < v1646)
              {
LABEL_2966:
                v1658 = (*v1657 >> (~(_BYTE)v1644 & 7)) & 1;
                LODWORD(v1644) = v1644 + 1;
                *v1168 = v1644;
                v1659 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
                if ((unint64_t)v1659 >= v1646)
                  goto LABEL_3010;
                goto LABEL_2929;
              }
            }
LABEL_2980:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1658 = 0;
              LODWORD(v1644) = *(_DWORD *)(a2 + 16);
              v1659 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1644 >> 3));
              if ((unint64_t)v1659 >= *(_QWORD *)(a2 + 8))
                goto LABEL_3010;
            }
            else
            {
              v1658 = 0;
              v1659 = (unsigned __int8 *)(v1645 + (v1644 >> 3));
              if ((unint64_t)v1659 >= v1646)
              {
LABEL_3010:
                if (*v1169)
                {
                  ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                  v1169 = (uint64_t *)(a2 + 32);
                  v1168 = (_DWORD *)(a2 + 16);
                }
                v1625 = 0;
                goto LABEL_2930;
              }
            }
LABEL_2929:
            v1625 = (*v1659 >> (~(_BYTE)v1644 & 7)) & 1;
            *v1168 = v1644 + 1;
LABEL_2930:
            *v1623 = v1625 | (v2010 << 7) | (v2000 << 6) | (32 * v1650) | (16 * v1652) | (8 * v1654) | (4 * v1656) | (2 * v1658);
            v1623 += 2;
          }
        }
      }
      v1660 = *(unsigned int *)(a2 + 16);
      v1661 = *(_QWORD *)a2;
      v1662 = *(_QWORD *)(a2 + 8);
      v1663 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1660 >> 3));
      if ((unint64_t)v1663 >= v1662)
      {
        v1663 = (void (*)(_QWORD))*v1169;
        v1664 = v1990;
        v1164 = v1992;
        if (*v1169)
        {
          v1663(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1663) = 0;
          LODWORD(v1660) = *(_DWORD *)(a2 + 16);
          v1661 = *(_QWORD *)a2;
          v1662 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1663) = (*(unsigned __int8 *)v1663 >> (~(_BYTE)v1660 & 7)) & 1;
        LODWORD(v1660) = v1660 + 1;
        *v1168 = v1660;
        v1664 = v1990;
        v1164 = v1992;
      }
      v1665 = 8 * (_DWORD)v1663;
      v1666 = (void (*)(_QWORD))(v1661 + (v1660 >> 3));
      if ((unint64_t)v1666 >= v1662)
      {
        v1666 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1666(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1666) = 0;
          LODWORD(v1660) = *(_DWORD *)(a2 + 16);
          v1661 = *(_QWORD *)a2;
          v1662 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1666) = (*(unsigned __int8 *)v1666 >> (~(_BYTE)v1660 & 7)) & 1;
        LODWORD(v1660) = v1660 + 1;
        *v1168 = v1660;
      }
      v1667 = v1665 | (4 * (_DWORD)v1666);
      v1668 = (void (*)(_QWORD))(v1661 + (v1660 >> 3));
      if ((unint64_t)v1668 >= v1662)
      {
        v1668 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1668(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1668) = 0;
          LODWORD(v1660) = *(_DWORD *)(a2 + 16);
          v1661 = *(_QWORD *)a2;
          v1662 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1668) = (*(unsigned __int8 *)v1668 >> (~(_BYTE)v1660 & 7)) & 1;
        LODWORD(v1660) = v1660 + 1;
        *v1168 = v1660;
      }
      v1669 = v1667 | (2 * (_DWORD)v1668);
      v1670 = (unsigned __int8 *)(v1661 + (v1660 >> 3));
      if ((unint64_t)v1670 >= v1662)
      {
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
        }
        v1671 = 0;
      }
      else
      {
        v1671 = (*v1670 >> (~(_BYTE)v1660 & 7)) & 1;
        *v1168 = v1660 + 1;
      }
      LODWORD(v1672) = v1671 | v1669;
      v1984[41] = v1671 | v1669;
      if ((v1671 | v1669) > 0xA)
      {
        aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "Number of points for film grain cr scaling function exceeds the maximum value.");
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1672) = v1984[41];
      }
      if ((int)v1672 >= 1)
      {
        v1673 = *(unsigned int *)(a2 + 16);
        v1674 = *(_QWORD *)a2;
        v1675 = *(_QWORD *)(a2 + 8);
        v1676 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1673 >> 3));
        if ((unint64_t)v1676 >= v1675)
        {
          v1676 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1676(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1676) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1676) = (*(unsigned __int8 *)v1676 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1677 = (_DWORD)v1676 << 7;
        v1678 = (void (*)(_QWORD))(v1674 + (v1673 >> 3));
        if ((unint64_t)v1678 >= v1675)
        {
          v1678 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1678(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1678) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1678) = (*(unsigned __int8 *)v1678 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1679 = v1677 | ((_DWORD)v1678 << 6);
        v1680 = (void (*)(_QWORD))(v1674 + (v1673 >> 3));
        if ((unint64_t)v1680 >= v1675)
        {
          v1680 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1680(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1680) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1680) = (*(unsigned __int8 *)v1680 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1681 = v1679 | (32 * (_DWORD)v1680);
        v1682 = (void (*)(_QWORD))(v1674 + (v1673 >> 3));
        if ((unint64_t)v1682 >= v1675)
        {
          v1682 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1682(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1682) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1682) = (*(unsigned __int8 *)v1682 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1683 = v1681 | (16 * (_DWORD)v1682);
        v1684 = (void (*)(_QWORD))(v1674 + (v1673 >> 3));
        if ((unint64_t)v1684 >= v1675)
        {
          v1684 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1684(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1684) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1684) = (*(unsigned __int8 *)v1684 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1685 = v1683 | (8 * (_DWORD)v1684);
        v1686 = (void (*)(_QWORD))(v1674 + (v1673 >> 3));
        if ((unint64_t)v1686 >= v1675)
        {
          v1686 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1686(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1686) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1686) = (*(unsigned __int8 *)v1686 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1687 = v1685 | (4 * (_DWORD)v1686);
        v1688 = (void (*)(_QWORD))(v1674 + (v1673 >> 3));
        if ((unint64_t)v1688 >= v1675)
        {
          v1688 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1688(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1688) = 0;
            LODWORD(v1673) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1688) = (*(unsigned __int8 *)v1688 >> (~(_BYTE)v1673 & 7)) & 1;
          LODWORD(v1673) = v1673 + 1;
          *v1168 = v1673;
        }
        v1689 = v1687 | (2 * (_DWORD)v1688);
        v1690 = (unsigned __int8 *)(v1674 + (v1673 >> 3));
        if ((unint64_t)v1690 >= v1675)
        {
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1691 = 0;
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            v1691 = 0;
          }
        }
        else
        {
          v1691 = (*v1690 >> (~(_BYTE)v1673 & 7)) & 1;
          *v1168 = v1673 + 1;
        }
        v1984[21] = v1691 | v1689;
        v1692 = *v1168;
        v1693 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1693 >= v1675)
        {
          v1693 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1693(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1693) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1693) = (*(unsigned __int8 *)v1693 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1694 = (_DWORD)v1693 << 7;
        v1695 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1695 >= v1675)
        {
          v1695 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1695(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1695) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1695) = (*(unsigned __int8 *)v1695 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1696 = v1694 | ((_DWORD)v1695 << 6);
        v1697 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1697 >= v1675)
        {
          v1697 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1697(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1697) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1697) = (*(unsigned __int8 *)v1697 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1698 = v1696 | (32 * (_DWORD)v1697);
        v1699 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1699 >= v1675)
        {
          v1699 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1699(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1699) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1699) = (*(unsigned __int8 *)v1699 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1700 = v1698 | (16 * (_DWORD)v1699);
        v1701 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1701 >= v1675)
        {
          v1701 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1701(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1701) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1701) = (*(unsigned __int8 *)v1701 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1702 = v1700 | (8 * (_DWORD)v1701);
        v1703 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1703 >= v1675)
        {
          v1703 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1703(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1703) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1703) = (*(unsigned __int8 *)v1703 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1704 = v1702 | (4 * (_DWORD)v1703);
        v1705 = (void (*)(_QWORD))(v1674 + (v1692 >> 3));
        if ((unint64_t)v1705 >= v1675)
        {
          v1705 = (void (*)(_QWORD))*v1169;
          if (*v1169)
          {
            v1705(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1705) = 0;
            LODWORD(v1692) = *(_DWORD *)(a2 + 16);
            v1674 = *(_QWORD *)a2;
            v1675 = *(_QWORD *)(a2 + 8);
          }
        }
        else
        {
          LODWORD(v1705) = (*(unsigned __int8 *)v1705 >> (~(_BYTE)v1692 & 7)) & 1;
          LODWORD(v1692) = v1692 + 1;
          *v1168 = v1692;
        }
        v1706 = v1704 | (2 * (_DWORD)v1705);
        v1672 = v1674 + (v1692 >> 3);
        if (v1672 >= v1675)
        {
          v1672 = *v1169;
          if (*v1169)
          {
            ((void (*)(_QWORD))v1672)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            LODWORD(v1672) = 0;
          }
        }
        else
        {
          LODWORD(v1672) = (*(unsigned __int8 *)v1672 >> (~(_BYTE)v1692 & 7)) & 1;
          *v1168 = v1692 + 1;
        }
        v1984[22] = v1672 | v1706;
        LODWORD(v1672) = v1984[41];
        if ((int)v1672 >= 2)
        {
          v1707 = v1984 + 24;
          v1708 = 1;
          while (1)
          {
            v1710 = *(unsigned int *)(a2 + 16);
            v1711 = *(_QWORD *)a2;
            v1712 = *(_QWORD *)(a2 + 8);
            v1713 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
            if ((unint64_t)v1713 >= v1712)
            {
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v2011 = 0;
                LODWORD(v1710) = *(_DWORD *)(a2 + 16);
                v1711 = *(_QWORD *)a2;
                v1712 = *(_QWORD *)(a2 + 8);
                v1714 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
                if ((unint64_t)v1714 < v1712)
                  goto LABEL_3104;
              }
              else
              {
                v2011 = 0;
                v1714 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                if ((unint64_t)v1714 < v1712)
                {
LABEL_3104:
                  v2001 = (*v1714 >> (~(_BYTE)v1710 & 7)) & 1;
                  LODWORD(v1710) = v1710 + 1;
                  *v1168 = v1710;
                  v1715 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                  if ((unint64_t)v1715 < v1712)
                    goto LABEL_3105;
                  goto LABEL_3115;
                }
              }
            }
            else
            {
              v2011 = (*v1713 >> (~(_BYTE)v1710 & 7)) & 1;
              LODWORD(v1710) = v1710 + 1;
              *v1168 = v1710;
              v1714 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1714 < v1712)
                goto LABEL_3104;
            }
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v2001 = 0;
              LODWORD(v1710) = *(_DWORD *)(a2 + 16);
              v1711 = *(_QWORD *)a2;
              v1712 = *(_QWORD *)(a2 + 8);
              v1715 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
              if ((unint64_t)v1715 < v1712)
                goto LABEL_3105;
            }
            else
            {
              v2001 = 0;
              v1715 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1715 < v1712)
              {
LABEL_3105:
                v1716 = (*v1715 >> (~(_BYTE)v1710 & 7)) & 1;
                LODWORD(v1710) = v1710 + 1;
                *v1168 = v1710;
                v1717 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                if ((unint64_t)v1717 < v1712)
                  goto LABEL_3106;
                goto LABEL_3117;
              }
            }
LABEL_3115:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1716 = 0;
              LODWORD(v1710) = *(_DWORD *)(a2 + 16);
              v1711 = *(_QWORD *)a2;
              v1712 = *(_QWORD *)(a2 + 8);
              v1717 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
              if ((unint64_t)v1717 < v1712)
                goto LABEL_3106;
            }
            else
            {
              v1716 = 0;
              v1717 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1717 < v1712)
              {
LABEL_3106:
                v1718 = (*v1717 >> (~(_BYTE)v1710 & 7)) & 1;
                LODWORD(v1710) = v1710 + 1;
                *v1168 = v1710;
                v1719 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                if ((unint64_t)v1719 < v1712)
                  goto LABEL_3107;
                goto LABEL_3119;
              }
            }
LABEL_3117:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1718 = 0;
              LODWORD(v1710) = *(_DWORD *)(a2 + 16);
              v1711 = *(_QWORD *)a2;
              v1712 = *(_QWORD *)(a2 + 8);
              v1719 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
              if ((unint64_t)v1719 < v1712)
                goto LABEL_3107;
            }
            else
            {
              v1718 = 0;
              v1719 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1719 < v1712)
              {
LABEL_3107:
                v1720 = (*v1719 >> (~(_BYTE)v1710 & 7)) & 1;
                LODWORD(v1710) = v1710 + 1;
                *v1168 = v1710;
                v1721 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                if ((unint64_t)v1721 < v1712)
                  goto LABEL_3108;
                goto LABEL_3121;
              }
            }
LABEL_3119:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1720 = 0;
              LODWORD(v1710) = *(_DWORD *)(a2 + 16);
              v1711 = *(_QWORD *)a2;
              v1712 = *(_QWORD *)(a2 + 8);
              v1721 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
              if ((unint64_t)v1721 < v1712)
                goto LABEL_3108;
            }
            else
            {
              v1720 = 0;
              v1721 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1721 < v1712)
              {
LABEL_3108:
                v1722 = (*v1721 >> (~(_BYTE)v1710 & 7)) & 1;
                LODWORD(v1710) = v1710 + 1;
                *v1168 = v1710;
                v1723 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                if ((unint64_t)v1723 < v1712)
                  goto LABEL_3109;
                goto LABEL_3123;
              }
            }
LABEL_3121:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1722 = 0;
              LODWORD(v1710) = *(_DWORD *)(a2 + 16);
              v1711 = *(_QWORD *)a2;
              v1712 = *(_QWORD *)(a2 + 8);
              v1723 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
              if ((unint64_t)v1723 < v1712)
                goto LABEL_3109;
            }
            else
            {
              v1722 = 0;
              v1723 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1723 < v1712)
              {
LABEL_3109:
                v1724 = (*v1723 >> (~(_BYTE)v1710 & 7)) & 1;
                LODWORD(v1710) = v1710 + 1;
                *v1168 = v1710;
                v1725 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
                if ((unint64_t)v1725 < v1712)
                  goto LABEL_3110;
                goto LABEL_3125;
              }
            }
LABEL_3123:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1724 = 0;
              LODWORD(v1710) = *(_DWORD *)(a2 + 16);
              v1725 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1710 >> 3));
              if ((unint64_t)v1725 < *(_QWORD *)(a2 + 8))
                goto LABEL_3110;
            }
            else
            {
              v1724 = 0;
              v1725 = (unsigned __int8 *)(v1711 + (v1710 >> 3));
              if ((unint64_t)v1725 < v1712)
              {
LABEL_3110:
                v1726 = (*v1725 >> (~(_BYTE)v1710 & 7)) & 1;
                *v1168 = v1710 + 1;
                goto LABEL_3128;
              }
            }
LABEL_3125:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
            }
            v1726 = 0;
LABEL_3128:
            v1727 = v1726 | (v2011 << 7) | (v2001 << 6) | (32 * v1716) | (16 * v1718) | (8 * v1720) | (4 * v1722) | (2 * v1724);
            *(v1707 - 1) = v1727;
            if (*(v1707 - 3) >= v1727)
            {
              aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "First coordinate of the scaling function points shall be increasing.");
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
            }
            v1728 = *(unsigned int *)(a2 + 16);
            v1729 = *(_QWORD *)a2;
            v1730 = *(_QWORD *)(a2 + 8);
            v1731 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
            if ((unint64_t)v1731 >= v1730)
            {
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v2012 = 0;
                LODWORD(v1728) = *(_DWORD *)(a2 + 16);
                v1729 = *(_QWORD *)a2;
                v1730 = *(_QWORD *)(a2 + 8);
                v1732 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
                if ((unint64_t)v1732 < v1730)
                  goto LABEL_3132;
              }
              else
              {
                v2012 = 0;
                v1732 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                if ((unint64_t)v1732 < v1730)
                {
LABEL_3132:
                  v2002 = (*v1732 >> (~(_BYTE)v1728 & 7)) & 1;
                  LODWORD(v1728) = v1728 + 1;
                  *v1168 = v1728;
                  v1733 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                  if ((unint64_t)v1733 < v1730)
                    goto LABEL_3133;
                  goto LABEL_3143;
                }
              }
            }
            else
            {
              v2012 = (*v1731 >> (~(_BYTE)v1728 & 7)) & 1;
              LODWORD(v1728) = v1728 + 1;
              *v1168 = v1728;
              v1732 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1732 < v1730)
                goto LABEL_3132;
            }
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v2002 = 0;
              LODWORD(v1728) = *(_DWORD *)(a2 + 16);
              v1729 = *(_QWORD *)a2;
              v1730 = *(_QWORD *)(a2 + 8);
              v1733 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
              if ((unint64_t)v1733 < v1730)
                goto LABEL_3133;
            }
            else
            {
              v2002 = 0;
              v1733 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1733 < v1730)
              {
LABEL_3133:
                v1734 = (*v1733 >> (~(_BYTE)v1728 & 7)) & 1;
                LODWORD(v1728) = v1728 + 1;
                *v1168 = v1728;
                v1735 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                if ((unint64_t)v1735 < v1730)
                  goto LABEL_3134;
                goto LABEL_3145;
              }
            }
LABEL_3143:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1734 = 0;
              LODWORD(v1728) = *(_DWORD *)(a2 + 16);
              v1729 = *(_QWORD *)a2;
              v1730 = *(_QWORD *)(a2 + 8);
              v1735 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
              if ((unint64_t)v1735 < v1730)
                goto LABEL_3134;
            }
            else
            {
              v1734 = 0;
              v1735 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1735 < v1730)
              {
LABEL_3134:
                v1736 = (*v1735 >> (~(_BYTE)v1728 & 7)) & 1;
                LODWORD(v1728) = v1728 + 1;
                *v1168 = v1728;
                v1737 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                if ((unint64_t)v1737 < v1730)
                  goto LABEL_3135;
                goto LABEL_3147;
              }
            }
LABEL_3145:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1736 = 0;
              LODWORD(v1728) = *(_DWORD *)(a2 + 16);
              v1729 = *(_QWORD *)a2;
              v1730 = *(_QWORD *)(a2 + 8);
              v1737 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
              if ((unint64_t)v1737 < v1730)
                goto LABEL_3135;
            }
            else
            {
              v1736 = 0;
              v1737 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1737 < v1730)
              {
LABEL_3135:
                v1738 = (*v1737 >> (~(_BYTE)v1728 & 7)) & 1;
                LODWORD(v1728) = v1728 + 1;
                *v1168 = v1728;
                v1739 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                if ((unint64_t)v1739 < v1730)
                  goto LABEL_3136;
                goto LABEL_3149;
              }
            }
LABEL_3147:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1738 = 0;
              LODWORD(v1728) = *(_DWORD *)(a2 + 16);
              v1729 = *(_QWORD *)a2;
              v1730 = *(_QWORD *)(a2 + 8);
              v1739 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
              if ((unint64_t)v1739 < v1730)
                goto LABEL_3136;
            }
            else
            {
              v1738 = 0;
              v1739 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1739 < v1730)
              {
LABEL_3136:
                v1740 = (*v1739 >> (~(_BYTE)v1728 & 7)) & 1;
                LODWORD(v1728) = v1728 + 1;
                *v1168 = v1728;
                v1741 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                if ((unint64_t)v1741 < v1730)
                  goto LABEL_3137;
                goto LABEL_3151;
              }
            }
LABEL_3149:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1740 = 0;
              LODWORD(v1728) = *(_DWORD *)(a2 + 16);
              v1729 = *(_QWORD *)a2;
              v1730 = *(_QWORD *)(a2 + 8);
              v1741 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
              if ((unint64_t)v1741 < v1730)
                goto LABEL_3137;
            }
            else
            {
              v1740 = 0;
              v1741 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1741 < v1730)
              {
LABEL_3137:
                v1742 = (*v1741 >> (~(_BYTE)v1728 & 7)) & 1;
                LODWORD(v1728) = v1728 + 1;
                *v1168 = v1728;
                v1743 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
                if ((unint64_t)v1743 >= v1730)
                  goto LABEL_3181;
                goto LABEL_3100;
              }
            }
LABEL_3151:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1742 = 0;
              LODWORD(v1728) = *(_DWORD *)(a2 + 16);
              v1743 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1728 >> 3));
              if ((unint64_t)v1743 >= *(_QWORD *)(a2 + 8))
                goto LABEL_3181;
            }
            else
            {
              v1742 = 0;
              v1743 = (unsigned __int8 *)(v1729 + (v1728 >> 3));
              if ((unint64_t)v1743 >= v1730)
              {
LABEL_3181:
                if (*v1169)
                {
                  ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                  v1169 = (uint64_t *)(a2 + 32);
                  v1168 = (_DWORD *)(a2 + 16);
                }
                v1709 = 0;
                goto LABEL_3101;
              }
            }
LABEL_3100:
            v1709 = (*v1743 >> (~(_BYTE)v1728 & 7)) & 1;
            *v1168 = v1728 + 1;
LABEL_3101:
            *v1707 = v1709 | (v2012 << 7) | (v2002 << 6) | (32 * v1734) | (16 * v1736) | (8 * v1738) | (4 * v1740) | (2 * v1742);
            v1707 += 2;
            ++v1708;
            v1672 = v1984[41];
            if (v1708 >= v1672)
            {
              v1664 = v1990;
              v1164 = v1992;
              break;
            }
          }
        }
      }
      if (*(_DWORD *)(v1664 + 96) == 1
        && *(_DWORD *)(v1664 + 100) == 1
        && ((_DWORD)v1672 ? v1984[20] == 0 : v1984[20] != 0))
      {
        aom_internal_error(*(_QWORD *)(v4 + 15248), 5, "In YCbCr 4:2:0, film grain shall be applied to both chroma components or neither.");
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
      }
    }
    v1396 = *(unsigned int *)(a2 + 16);
    v1397 = *(_QWORD *)a2;
    v1398 = *(_QWORD *)(a2 + 8);
    v1399 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1396 >> 3));
    if ((unint64_t)v1399 >= v1398)
    {
      v1399 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1399(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1399) = 0;
        LODWORD(v1396) = *(_DWORD *)(a2 + 16);
        v1397 = *(_QWORD *)a2;
        v1398 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1399) = (*(unsigned __int8 *)v1399 >> (~(_BYTE)v1396 & 7)) & 1;
      LODWORD(v1396) = v1396 + 1;
      *v1168 = v1396;
    }
    v1400 = 2 * (_DWORD)v1399;
    v1401 = (void (*)(_QWORD))(v1397 + (v1396 >> 3));
    if ((unint64_t)v1401 >= v1398)
    {
      v1401 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1401(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1401) = 0;
        LODWORD(v1396) = *(_DWORD *)(a2 + 16);
        v1397 = *(_QWORD *)a2;
        v1398 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1401) = (*(unsigned __int8 *)v1401 >> (~(_BYTE)v1396 & 7)) & 1;
      LODWORD(v1396) = v1396 + 1;
      *v1168 = v1396;
    }
    v1984[42] = v1401 | v1400 | 8;
    v1402 = (void (*)(_QWORD))(v1397 + (v1396 >> 3));
    if ((unint64_t)v1402 >= v1398)
    {
      v1402 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1402(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1402) = 0;
        LODWORD(v1396) = *(_DWORD *)(a2 + 16);
        v1397 = *(_QWORD *)a2;
        v1398 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1402) = (*(unsigned __int8 *)v1402 >> (~(_BYTE)v1396 & 7)) & 1;
      LODWORD(v1396) = v1396 + 1;
      *v1168 = v1396;
    }
    v1403 = 2 * (_DWORD)v1402;
    v1404 = (unsigned __int8 *)(v1397 + (v1396 >> 3));
    if ((unint64_t)v1404 >= v1398)
    {
      if (*v1169)
      {
        ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
      }
      v1405 = 0;
    }
    else
    {
      v1405 = (*v1404 >> (~(_BYTE)v1396 & 7)) & 1;
      *v1168 = v1396 + 1;
    }
    v1406 = v1405 | v1403;
    v1984[43] = v1406;
    v1407 = v1406 + v1406 * v1406;
    v1408 = v1987[66];
    v1991 = (v1408 > 0) | (2 * (v1407 & 0x1Fu));
    if (v1408 && v1406)
    {
      v1409 = (2 * v1407);
      v1410 = v1984 + 44;
      do
      {
        v1412 = *(unsigned int *)(a2 + 16);
        v1413 = *(_QWORD *)a2;
        v1414 = *(_QWORD *)(a2 + 8);
        v1415 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
        if ((unint64_t)v1415 >= v1414)
        {
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v2006 = 0;
            LODWORD(v1412) = *(_DWORD *)(a2 + 16);
            v1413 = *(_QWORD *)a2;
            v1414 = *(_QWORD *)(a2 + 8);
            v1416 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
            if ((unint64_t)v1416 < v1414)
              goto LABEL_2467;
          }
          else
          {
            v2006 = 0;
            v1416 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
            if ((unint64_t)v1416 < v1414)
            {
LABEL_2467:
              v1997 = (*v1416 >> (~(_BYTE)v1412 & 7)) & 1;
              LODWORD(v1412) = v1412 + 1;
              *v1168 = v1412;
              v1417 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
              if ((unint64_t)v1417 < v1414)
                goto LABEL_2468;
              goto LABEL_2478;
            }
          }
        }
        else
        {
          v2006 = (*v1415 >> (~(_BYTE)v1412 & 7)) & 1;
          LODWORD(v1412) = v1412 + 1;
          *v1168 = v1412;
          v1416 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1416 < v1414)
            goto LABEL_2467;
        }
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1997 = 0;
          LODWORD(v1412) = *(_DWORD *)(a2 + 16);
          v1413 = *(_QWORD *)a2;
          v1414 = *(_QWORD *)(a2 + 8);
          v1417 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
          if ((unint64_t)v1417 < v1414)
            goto LABEL_2468;
        }
        else
        {
          v1997 = 0;
          v1417 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1417 < v1414)
          {
LABEL_2468:
            v1418 = (*v1417 >> (~(_BYTE)v1412 & 7)) & 1;
            LODWORD(v1412) = v1412 + 1;
            *v1168 = v1412;
            v1419 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
            if ((unint64_t)v1419 < v1414)
              goto LABEL_2469;
            goto LABEL_2480;
          }
        }
LABEL_2478:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1418 = 0;
          LODWORD(v1412) = *(_DWORD *)(a2 + 16);
          v1413 = *(_QWORD *)a2;
          v1414 = *(_QWORD *)(a2 + 8);
          v1419 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
          if ((unint64_t)v1419 < v1414)
            goto LABEL_2469;
        }
        else
        {
          v1418 = 0;
          v1419 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1419 < v1414)
          {
LABEL_2469:
            v1420 = (*v1419 >> (~(_BYTE)v1412 & 7)) & 1;
            LODWORD(v1412) = v1412 + 1;
            *v1168 = v1412;
            v1421 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
            if ((unint64_t)v1421 < v1414)
              goto LABEL_2470;
            goto LABEL_2482;
          }
        }
LABEL_2480:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1420 = 0;
          LODWORD(v1412) = *(_DWORD *)(a2 + 16);
          v1413 = *(_QWORD *)a2;
          v1414 = *(_QWORD *)(a2 + 8);
          v1421 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
          if ((unint64_t)v1421 < v1414)
            goto LABEL_2470;
        }
        else
        {
          v1420 = 0;
          v1421 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1421 < v1414)
          {
LABEL_2470:
            v1422 = (*v1421 >> (~(_BYTE)v1412 & 7)) & 1;
            LODWORD(v1412) = v1412 + 1;
            *v1168 = v1412;
            v1423 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
            if ((unint64_t)v1423 < v1414)
              goto LABEL_2471;
            goto LABEL_2484;
          }
        }
LABEL_2482:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1422 = 0;
          LODWORD(v1412) = *(_DWORD *)(a2 + 16);
          v1413 = *(_QWORD *)a2;
          v1414 = *(_QWORD *)(a2 + 8);
          v1423 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
          if ((unint64_t)v1423 < v1414)
            goto LABEL_2471;
        }
        else
        {
          v1422 = 0;
          v1423 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1423 < v1414)
          {
LABEL_2471:
            v1424 = (*v1423 >> (~(_BYTE)v1412 & 7)) & 1;
            LODWORD(v1412) = v1412 + 1;
            *v1168 = v1412;
            v1425 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
            if ((unint64_t)v1425 < v1414)
              goto LABEL_2472;
            goto LABEL_2486;
          }
        }
LABEL_2484:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1424 = 0;
          LODWORD(v1412) = *(_DWORD *)(a2 + 16);
          v1413 = *(_QWORD *)a2;
          v1414 = *(_QWORD *)(a2 + 8);
          v1425 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
          if ((unint64_t)v1425 < v1414)
            goto LABEL_2472;
        }
        else
        {
          v1424 = 0;
          v1425 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1425 < v1414)
          {
LABEL_2472:
            v1426 = (*v1425 >> (~(_BYTE)v1412 & 7)) & 1;
            LODWORD(v1412) = v1412 + 1;
            *v1168 = v1412;
            v1427 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
            if ((unint64_t)v1427 >= v1414)
              goto LABEL_2502;
            goto LABEL_2463;
          }
        }
LABEL_2486:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1426 = 0;
          LODWORD(v1412) = *(_DWORD *)(a2 + 16);
          v1427 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1412 >> 3));
          if ((unint64_t)v1427 >= *(_QWORD *)(a2 + 8))
            goto LABEL_2502;
        }
        else
        {
          v1426 = 0;
          v1427 = (unsigned __int8 *)(v1413 + (v1412 >> 3));
          if ((unint64_t)v1427 >= v1414)
          {
LABEL_2502:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
            }
            v1411 = 0;
            goto LABEL_2464;
          }
        }
LABEL_2463:
        v1411 = (*v1427 >> (~(_BYTE)v1412 & 7)) & 1;
        *v1168 = v1412 + 1;
LABEL_2464:
        *v1410++ = (v1411 | (v2006 << 7) | (v1997 << 6) | (32 * v1418) | (16 * v1420) | (8 * v1422) | (4 * v1424) | (2 * v1426))
                 - 128;
        --v1409;
        v1164 = v1992;
      }
      while (v1409);
    }
    if (v1984[20])
    {
      if (!(_DWORD)v1991)
      {
        v1428 = v1984 + 41;
        goto LABEL_2600;
      }
LABEL_2510:
      v1429 = v1984 + 68;
      v1430 = v1991;
      while (2)
      {
        v1432 = *(unsigned int *)(a2 + 16);
        v1433 = *(_QWORD *)a2;
        v1434 = *(_QWORD *)(a2 + 8);
        v1435 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
        if ((unint64_t)v1435 >= v1434)
        {
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v2007 = 0;
            LODWORD(v1432) = *(_DWORD *)(a2 + 16);
            v1433 = *(_QWORD *)a2;
            v1434 = *(_QWORD *)(a2 + 8);
            v1436 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
            if ((unint64_t)v1436 >= v1434)
              goto LABEL_2524;
          }
          else
          {
            v2007 = 0;
            v1436 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
            if ((unint64_t)v1436 >= v1434)
              goto LABEL_2524;
          }
LABEL_2515:
          v1998 = (*v1436 >> (~(_BYTE)v1432 & 7)) & 1;
          LODWORD(v1432) = v1432 + 1;
          *v1168 = v1432;
          v1437 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
          if ((unint64_t)v1437 < v1434)
            goto LABEL_2516;
        }
        else
        {
          v2007 = (*v1435 >> (~(_BYTE)v1432 & 7)) & 1;
          LODWORD(v1432) = v1432 + 1;
          *v1168 = v1432;
          v1436 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
          if ((unint64_t)v1436 < v1434)
            goto LABEL_2515;
LABEL_2524:
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v1998 = 0;
            LODWORD(v1432) = *(_DWORD *)(a2 + 16);
            v1433 = *(_QWORD *)a2;
            v1434 = *(_QWORD *)(a2 + 8);
            v1437 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
            if ((unint64_t)v1437 >= v1434)
              break;
LABEL_2516:
            v1438 = (*v1437 >> (~(_BYTE)v1432 & 7)) & 1;
            LODWORD(v1432) = v1432 + 1;
            *v1168 = v1432;
            v1439 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
            if ((unint64_t)v1439 < v1434)
            {
LABEL_2517:
              v1440 = (*v1439 >> (~(_BYTE)v1432 & 7)) & 1;
              LODWORD(v1432) = v1432 + 1;
              *v1168 = v1432;
              v1441 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
              if ((unint64_t)v1441 < v1434)
                goto LABEL_2518;
LABEL_2530:
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v1442 = 0;
                LODWORD(v1432) = *(_DWORD *)(a2 + 16);
                v1433 = *(_QWORD *)a2;
                v1434 = *(_QWORD *)(a2 + 8);
                v1443 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
                if ((unint64_t)v1443 >= v1434)
                  goto LABEL_2532;
LABEL_2519:
                v1444 = (*v1443 >> (~(_BYTE)v1432 & 7)) & 1;
                LODWORD(v1432) = v1432 + 1;
                *v1168 = v1432;
                v1445 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
                if ((unint64_t)v1445 < v1434)
                {
LABEL_2520:
                  v1446 = (*v1445 >> (~(_BYTE)v1432 & 7)) & 1;
                  LODWORD(v1432) = v1432 + 1;
                  *v1168 = v1432;
                  v1447 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
                  if ((unint64_t)v1447 >= v1434)
                    goto LABEL_2550;
LABEL_2511:
                  v1431 = (*v1447 >> (~(_BYTE)v1432 & 7)) & 1;
                  *v1168 = v1432 + 1;
                  goto LABEL_2512;
                }
LABEL_2534:
                if (!*v1169)
                {
                  v1446 = 0;
                  v1447 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
                  if ((unint64_t)v1447 >= v1434)
                    goto LABEL_2550;
                  goto LABEL_2511;
                }
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v1446 = 0;
                LODWORD(v1432) = *(_DWORD *)(a2 + 16);
                v1447 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
                if ((unint64_t)v1447 < *(_QWORD *)(a2 + 8))
                  goto LABEL_2511;
LABEL_2550:
                if (*v1169)
                {
                  ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                  v1169 = (uint64_t *)(a2 + 32);
                  v1168 = (_DWORD *)(a2 + 16);
                }
                v1431 = 0;
LABEL_2512:
                *v1429++ = (v1431 | (v2007 << 7) | (v1998 << 6) | (32 * v1438) | (16 * v1440) | (8 * v1442) | (4 * v1444) | (2 * v1446))
                         - 128;
                --v1430;
                v1164 = v1992;
                if (!v1430)
                  goto LABEL_2553;
                continue;
              }
              v1442 = 0;
              v1443 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
              if ((unint64_t)v1443 < v1434)
                goto LABEL_2519;
LABEL_2532:
              if (*v1169)
              {
                ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
                v1169 = (uint64_t *)(a2 + 32);
                v1168 = (_DWORD *)(a2 + 16);
                v1444 = 0;
                LODWORD(v1432) = *(_DWORD *)(a2 + 16);
                v1433 = *(_QWORD *)a2;
                v1434 = *(_QWORD *)(a2 + 8);
                v1445 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
                if ((unint64_t)v1445 < v1434)
                  goto LABEL_2520;
              }
              else
              {
                v1444 = 0;
                v1445 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
                if ((unint64_t)v1445 < v1434)
                  goto LABEL_2520;
              }
              goto LABEL_2534;
            }
LABEL_2528:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
              v1440 = 0;
              LODWORD(v1432) = *(_DWORD *)(a2 + 16);
              v1433 = *(_QWORD *)a2;
              v1434 = *(_QWORD *)(a2 + 8);
              v1441 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
              if ((unint64_t)v1441 >= v1434)
                goto LABEL_2530;
            }
            else
            {
              v1440 = 0;
              v1441 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
              if ((unint64_t)v1441 >= v1434)
                goto LABEL_2530;
            }
LABEL_2518:
            v1442 = (*v1441 >> (~(_BYTE)v1432 & 7)) & 1;
            LODWORD(v1432) = v1432 + 1;
            *v1168 = v1432;
            v1443 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
            if ((unint64_t)v1443 < v1434)
              goto LABEL_2519;
            goto LABEL_2532;
          }
          v1998 = 0;
          v1437 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
          if ((unint64_t)v1437 < v1434)
            goto LABEL_2516;
        }
        break;
      }
      if (*v1169)
      {
        ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        v1438 = 0;
        LODWORD(v1432) = *(_DWORD *)(a2 + 16);
        v1433 = *(_QWORD *)a2;
        v1434 = *(_QWORD *)(a2 + 8);
        v1439 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1432 >> 3));
        if ((unint64_t)v1439 < v1434)
          goto LABEL_2517;
      }
      else
      {
        v1438 = 0;
        v1439 = (unsigned __int8 *)(v1433 + (v1432 >> 3));
        if ((unint64_t)v1439 < v1434)
          goto LABEL_2517;
      }
      goto LABEL_2528;
    }
    if (v1984[128] && (_DWORD)v1991)
      goto LABEL_2510;
LABEL_2553:
    v1428 = v1984 + 41;
    if ((v1984[41] || v1984[128]) && (_DWORD)v1991)
    {
      v1448 = v1984 + 93;
      while (1)
      {
        v1450 = *(unsigned int *)(a2 + 16);
        v1451 = *(_QWORD *)a2;
        v1452 = *(_QWORD *)(a2 + 8);
        v1453 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
        if ((unint64_t)v1453 >= v1452)
        {
          if (*v1169)
          {
            ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
            v1169 = (uint64_t *)(a2 + 32);
            v1168 = (_DWORD *)(a2 + 16);
            v2008 = 0;
            LODWORD(v1450) = *(_DWORD *)(a2 + 16);
            v1451 = *(_QWORD *)a2;
            v1452 = *(_QWORD *)(a2 + 8);
            v1454 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
            if ((unint64_t)v1454 < v1452)
              goto LABEL_2561;
          }
          else
          {
            v2008 = 0;
            v1454 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
            if ((unint64_t)v1454 < v1452)
            {
LABEL_2561:
              v1455 = (*v1454 >> (~(_BYTE)v1450 & 7)) & 1;
              LODWORD(v1450) = v1450 + 1;
              *v1168 = v1450;
              v1456 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
              if ((unint64_t)v1456 < v1452)
                goto LABEL_2562;
              goto LABEL_2572;
            }
          }
        }
        else
        {
          v2008 = (*v1453 >> (~(_BYTE)v1450 & 7)) & 1;
          LODWORD(v1450) = v1450 + 1;
          *v1168 = v1450;
          v1454 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1454 < v1452)
            goto LABEL_2561;
        }
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1455 = 0;
          LODWORD(v1450) = *(_DWORD *)(a2 + 16);
          v1451 = *(_QWORD *)a2;
          v1452 = *(_QWORD *)(a2 + 8);
          v1456 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
          if ((unint64_t)v1456 < v1452)
            goto LABEL_2562;
        }
        else
        {
          v1455 = 0;
          v1456 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1456 < v1452)
          {
LABEL_2562:
            v1457 = (*v1456 >> (~(_BYTE)v1450 & 7)) & 1;
            LODWORD(v1450) = v1450 + 1;
            *v1168 = v1450;
            v1458 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
            if ((unint64_t)v1458 < v1452)
              goto LABEL_2563;
            goto LABEL_2574;
          }
        }
LABEL_2572:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1457 = 0;
          LODWORD(v1450) = *(_DWORD *)(a2 + 16);
          v1451 = *(_QWORD *)a2;
          v1452 = *(_QWORD *)(a2 + 8);
          v1458 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
          if ((unint64_t)v1458 < v1452)
            goto LABEL_2563;
        }
        else
        {
          v1457 = 0;
          v1458 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1458 < v1452)
          {
LABEL_2563:
            v1459 = (*v1458 >> (~(_BYTE)v1450 & 7)) & 1;
            LODWORD(v1450) = v1450 + 1;
            *v1168 = v1450;
            v1460 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
            if ((unint64_t)v1460 < v1452)
              goto LABEL_2564;
            goto LABEL_2576;
          }
        }
LABEL_2574:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1459 = 0;
          LODWORD(v1450) = *(_DWORD *)(a2 + 16);
          v1451 = *(_QWORD *)a2;
          v1452 = *(_QWORD *)(a2 + 8);
          v1460 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
          if ((unint64_t)v1460 < v1452)
            goto LABEL_2564;
        }
        else
        {
          v1459 = 0;
          v1460 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1460 < v1452)
          {
LABEL_2564:
            v1461 = (*v1460 >> (~(_BYTE)v1450 & 7)) & 1;
            LODWORD(v1450) = v1450 + 1;
            *v1168 = v1450;
            v1462 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
            if ((unint64_t)v1462 < v1452)
              goto LABEL_2565;
            goto LABEL_2578;
          }
        }
LABEL_2576:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1461 = 0;
          LODWORD(v1450) = *(_DWORD *)(a2 + 16);
          v1451 = *(_QWORD *)a2;
          v1452 = *(_QWORD *)(a2 + 8);
          v1462 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
          if ((unint64_t)v1462 < v1452)
            goto LABEL_2565;
        }
        else
        {
          v1461 = 0;
          v1462 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1462 < v1452)
          {
LABEL_2565:
            v1463 = (*v1462 >> (~(_BYTE)v1450 & 7)) & 1;
            LODWORD(v1450) = v1450 + 1;
            *v1168 = v1450;
            v1464 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
            if ((unint64_t)v1464 < v1452)
              goto LABEL_2566;
            goto LABEL_2580;
          }
        }
LABEL_2578:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1463 = 0;
          LODWORD(v1450) = *(_DWORD *)(a2 + 16);
          v1451 = *(_QWORD *)a2;
          v1452 = *(_QWORD *)(a2 + 8);
          v1464 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
          if ((unint64_t)v1464 < v1452)
            goto LABEL_2566;
        }
        else
        {
          v1463 = 0;
          v1464 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1464 < v1452)
          {
LABEL_2566:
            v1465 = (*v1464 >> (~(_BYTE)v1450 & 7)) & 1;
            LODWORD(v1450) = v1450 + 1;
            *v1168 = v1450;
            v1466 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
            if ((unint64_t)v1466 >= v1452)
              goto LABEL_2596;
            goto LABEL_2557;
          }
        }
LABEL_2580:
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1465 = 0;
          LODWORD(v1450) = *(_DWORD *)(a2 + 16);
          v1466 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1450 >> 3));
          if ((unint64_t)v1466 >= *(_QWORD *)(a2 + 8))
            goto LABEL_2596;
        }
        else
        {
          v1465 = 0;
          v1466 = (unsigned __int8 *)(v1451 + (v1450 >> 3));
          if ((unint64_t)v1466 >= v1452)
          {
LABEL_2596:
            if (*v1169)
            {
              ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
              v1169 = (uint64_t *)(a2 + 32);
              v1168 = (_DWORD *)(a2 + 16);
            }
            v1449 = 0;
            goto LABEL_2558;
          }
        }
LABEL_2557:
        v1449 = (*v1466 >> (~(_BYTE)v1450 & 7)) & 1;
        *v1168 = v1450 + 1;
LABEL_2558:
        *v1448++ = (v1449 | (v2008 << 7) | (v1455 << 6) | (32 * v1457) | (16 * v1459) | (8 * v1461) | (4 * v1463) | (2 * v1465))
                 - 128;
        v1164 = v1992;
        if (!--v1991)
        {
          v1428 = v1984 + 41;
          break;
        }
      }
    }
LABEL_2600:
    v1467 = *(unsigned int *)(a2 + 16);
    v1468 = *(_QWORD *)a2;
    v1469 = *(_QWORD *)(a2 + 8);
    v1470 = (void (*)(_QWORD))(*(_QWORD *)a2 + (v1467 >> 3));
    if ((unint64_t)v1470 >= v1469)
    {
      v1470 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1470(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1470) = 0;
        LODWORD(v1467) = *(_DWORD *)(a2 + 16);
        v1468 = *(_QWORD *)a2;
        v1469 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1470) = (*(unsigned __int8 *)v1470 >> (~(_BYTE)v1467 & 7)) & 1;
      LODWORD(v1467) = v1467 + 1;
      *v1168 = v1467;
    }
    v1471 = 2 * (_DWORD)v1470;
    v1472 = (void (*)(_QWORD))(v1468 + (v1467 >> 3));
    if ((unint64_t)v1472 >= v1469)
    {
      v1472 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1472(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1472) = 0;
        LODWORD(v1467) = *(_DWORD *)(a2 + 16);
        v1468 = *(_QWORD *)a2;
        v1469 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1472) = (*(unsigned __int8 *)v1472 >> (~(_BYTE)v1467 & 7)) & 1;
      LODWORD(v1467) = v1467 + 1;
      *v1168 = v1467;
    }
    v1984[118] = (v1472 | v1471) + 6;
    v1473 = (void (*)(_QWORD))(v1468 + (v1467 >> 3));
    if ((unint64_t)v1473 >= v1469)
    {
      v1473 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1473(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1473) = 0;
        LODWORD(v1467) = *(_DWORD *)(a2 + 16);
        v1468 = *(_QWORD *)a2;
        v1469 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1473) = (*(unsigned __int8 *)v1473 >> (~(_BYTE)v1467 & 7)) & 1;
      LODWORD(v1467) = v1467 + 1;
      *v1168 = v1467;
    }
    v1474 = 2 * (_DWORD)v1473;
    v1475 = (unsigned __int8 *)(v1468 + (v1467 >> 3));
    if ((unint64_t)v1475 >= v1469)
    {
      if (*v1169)
      {
        ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        v1476 = 0;
        v1468 = *(_QWORD *)a2;
        v1469 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v1476 = 0;
      }
    }
    else
    {
      v1476 = (*v1475 >> (~(_BYTE)v1467 & 7)) & 1;
      *v1168 = v1467 + 1;
    }
    v1984[129] = v1476 | v1474;
    if (v1984[20])
    {
      v1477 = *v1168;
      v1478 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1478 >= v1469)
      {
        v1478 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1478(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1478) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1478) = (*(unsigned __int8 *)v1478 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1479 = (_DWORD)v1478 << 7;
      v1480 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1480 >= v1469)
      {
        v1480 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1480(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1480) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1480) = (*(unsigned __int8 *)v1480 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1481 = v1479 | ((_DWORD)v1480 << 6);
      v1482 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1482 >= v1469)
      {
        v1482 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1482(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1482) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1482) = (*(unsigned __int8 *)v1482 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1483 = v1481 | (32 * (_DWORD)v1482);
      v1484 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1484 >= v1469)
      {
        v1484 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1484(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1484) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1484) = (*(unsigned __int8 *)v1484 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1485 = v1483 | (16 * (_DWORD)v1484);
      v1486 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1486 >= v1469)
      {
        v1486 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1486(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1486) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1486) = (*(unsigned __int8 *)v1486 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1487 = v1485 | (8 * (_DWORD)v1486);
      v1488 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1488 >= v1469)
      {
        v1488 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1488(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1488) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1488) = (*(unsigned __int8 *)v1488 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1489 = v1487 | (4 * (_DWORD)v1488);
      v1490 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1490 >= v1469)
      {
        v1490 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1490(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1490) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1490) = (*(unsigned __int8 *)v1490 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1491 = v1489 | (2 * (_DWORD)v1490);
      v1492 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1492 >= v1469)
      {
        v1492 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1492(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1492) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1492) = (*(unsigned __int8 *)v1492 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1984[119] = v1492 | v1491;
      v1493 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1493 >= v1469)
      {
        v1493 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1493(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1493) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1493) = (*(unsigned __int8 *)v1493 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1494 = (_DWORD)v1493 << 7;
      v1495 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1495 >= v1469)
      {
        v1495 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1495(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1495) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1495) = (*(unsigned __int8 *)v1495 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1496 = v1494 | ((_DWORD)v1495 << 6);
      v1497 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1497 >= v1469)
      {
        v1497 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1497(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1497) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1497) = (*(unsigned __int8 *)v1497 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1498 = v1496 | (32 * (_DWORD)v1497);
      v1499 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1499 >= v1469)
      {
        v1499 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1499(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1499) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1499) = (*(unsigned __int8 *)v1499 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1500 = v1498 | (16 * (_DWORD)v1499);
      v1501 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1501 >= v1469)
      {
        v1501 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1501(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1501) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1501) = (*(unsigned __int8 *)v1501 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1502 = v1500 | (8 * (_DWORD)v1501);
      v1503 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1503 >= v1469)
      {
        v1503 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1503(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1503) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1503) = (*(unsigned __int8 *)v1503 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1504 = v1502 | (4 * (_DWORD)v1503);
      v1505 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1505 >= v1469)
      {
        v1505 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1505(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1505) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1505) = (*(unsigned __int8 *)v1505 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1506 = v1504 | (2 * (_DWORD)v1505);
      v1507 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1507 >= v1469)
      {
        v1507 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1507(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1507) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1507) = (*(unsigned __int8 *)v1507 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1984[120] = v1507 | v1506;
      v1508 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1508 >= v1469)
      {
        v1508 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1508(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1508) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1508) = (*(unsigned __int8 *)v1508 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1509 = (_DWORD)v1508 << 8;
      v1510 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1510 >= v1469)
      {
        v1510 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1510(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1510) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1510) = (*(unsigned __int8 *)v1510 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1511 = v1509 | ((_DWORD)v1510 << 7);
      v1512 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1512 >= v1469)
      {
        v1512 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1512(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1512) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1512) = (*(unsigned __int8 *)v1512 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1513 = v1511 | ((_DWORD)v1512 << 6);
      v1514 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1514 >= v1469)
      {
        v1514 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1514(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1514) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1514) = (*(unsigned __int8 *)v1514 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1515 = v1513 | (32 * (_DWORD)v1514);
      v1516 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1516 >= v1469)
      {
        v1516 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1516(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1516) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1516) = (*(unsigned __int8 *)v1516 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1517 = v1515 | (16 * (_DWORD)v1516);
      v1518 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1518 >= v1469)
      {
        v1518 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1518(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1518) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1518) = (*(unsigned __int8 *)v1518 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1519 = v1517 | (8 * (_DWORD)v1518);
      v1520 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1520 >= v1469)
      {
        v1520 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1520(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1520) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1520) = (*(unsigned __int8 *)v1520 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1521 = v1519 | (4 * (_DWORD)v1520);
      v1522 = (void (*)(_QWORD))(v1468 + (v1477 >> 3));
      if ((unint64_t)v1522 >= v1469)
      {
        v1522 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1522(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1522) = 0;
          LODWORD(v1477) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1522) = (*(unsigned __int8 *)v1522 >> (~(_BYTE)v1477 & 7)) & 1;
        LODWORD(v1477) = v1477 + 1;
        *v1168 = v1477;
      }
      v1523 = v1521 | (2 * (_DWORD)v1522);
      v1524 = (unsigned __int8 *)(v1468 + (v1477 >> 3));
      if ((unint64_t)v1524 >= v1469)
      {
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1525 = 0;
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v1525 = 0;
        }
      }
      else
      {
        v1525 = (*v1524 >> (~(_BYTE)v1477 & 7)) & 1;
        *v1168 = v1477 + 1;
      }
      v1984[121] = v1525 | v1523;
    }
    if (*v1428)
    {
      v1526 = *v1168;
      v1527 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1527 >= v1469)
      {
        v1527 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1527(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1527) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1527) = (*(unsigned __int8 *)v1527 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1528 = (_DWORD)v1527 << 7;
      v1529 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1529 >= v1469)
      {
        v1529 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1529(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1529) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1529) = (*(unsigned __int8 *)v1529 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1530 = v1528 | ((_DWORD)v1529 << 6);
      v1531 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1531 >= v1469)
      {
        v1531 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1531(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1531) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1531) = (*(unsigned __int8 *)v1531 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1532 = v1530 | (32 * (_DWORD)v1531);
      v1533 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1533 >= v1469)
      {
        v1533 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1533(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1533) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1533) = (*(unsigned __int8 *)v1533 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1534 = v1532 | (16 * (_DWORD)v1533);
      v1535 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1535 >= v1469)
      {
        v1535 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1535(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1535) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1535) = (*(unsigned __int8 *)v1535 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1536 = v1534 | (8 * (_DWORD)v1535);
      v1537 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1537 >= v1469)
      {
        v1537 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1537(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1537) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1537) = (*(unsigned __int8 *)v1537 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1538 = v1536 | (4 * (_DWORD)v1537);
      v1539 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1539 >= v1469)
      {
        v1539 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1539(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1539) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1539) = (*(unsigned __int8 *)v1539 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1540 = v1538 | (2 * (_DWORD)v1539);
      v1541 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1541 >= v1469)
      {
        v1541 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1541(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1541) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1541) = (*(unsigned __int8 *)v1541 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1984[122] = v1541 | v1540;
      v1542 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1542 >= v1469)
      {
        v1542 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1542(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1542) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1542) = (*(unsigned __int8 *)v1542 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1543 = (_DWORD)v1542 << 7;
      v1544 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1544 >= v1469)
      {
        v1544 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1544(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1544) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1544) = (*(unsigned __int8 *)v1544 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1545 = v1543 | ((_DWORD)v1544 << 6);
      v1546 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1546 >= v1469)
      {
        v1546 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1546(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1546) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1546) = (*(unsigned __int8 *)v1546 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1547 = v1545 | (32 * (_DWORD)v1546);
      v1548 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1548 >= v1469)
      {
        v1548 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1548(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1548) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1548) = (*(unsigned __int8 *)v1548 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1549 = v1547 | (16 * (_DWORD)v1548);
      v1550 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1550 >= v1469)
      {
        v1550 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1550(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1550) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1550) = (*(unsigned __int8 *)v1550 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1551 = v1549 | (8 * (_DWORD)v1550);
      v1552 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1552 >= v1469)
      {
        v1552 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1552(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1552) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1552) = (*(unsigned __int8 *)v1552 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1553 = v1551 | (4 * (_DWORD)v1552);
      v1554 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1554 >= v1469)
      {
        v1554 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1554(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1554) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1554) = (*(unsigned __int8 *)v1554 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1555 = v1553 | (2 * (_DWORD)v1554);
      v1556 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1556 >= v1469)
      {
        v1556 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1556(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1556) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1556) = (*(unsigned __int8 *)v1556 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1984[123] = v1556 | v1555;
      v1557 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1557 >= v1469)
      {
        v1557 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1557(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1557) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1557) = (*(unsigned __int8 *)v1557 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1558 = (_DWORD)v1557 << 8;
      v1559 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1559 >= v1469)
      {
        v1559 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1559(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1559) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1559) = (*(unsigned __int8 *)v1559 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1560 = v1558 | ((_DWORD)v1559 << 7);
      v1561 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1561 >= v1469)
      {
        v1561 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1561(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1561) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1561) = (*(unsigned __int8 *)v1561 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1562 = v1560 | ((_DWORD)v1561 << 6);
      v1563 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1563 >= v1469)
      {
        v1563 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1563(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1563) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1563) = (*(unsigned __int8 *)v1563 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1564 = v1562 | (32 * (_DWORD)v1563);
      v1565 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1565 >= v1469)
      {
        v1565 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1565(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1565) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1565) = (*(unsigned __int8 *)v1565 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1566 = v1564 | (16 * (_DWORD)v1565);
      v1567 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1567 >= v1469)
      {
        v1567 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1567(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1567) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1567) = (*(unsigned __int8 *)v1567 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1568 = v1566 | (8 * (_DWORD)v1567);
      v1569 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1569 >= v1469)
      {
        v1569 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1569(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1569) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1569) = (*(unsigned __int8 *)v1569 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1570 = v1568 | (4 * (_DWORD)v1569);
      v1571 = (void (*)(_QWORD))(v1468 + (v1526 >> 3));
      if ((unint64_t)v1571 >= v1469)
      {
        v1571 = (void (*)(_QWORD))*v1169;
        if (*v1169)
        {
          v1571(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          LODWORD(v1571) = 0;
          LODWORD(v1526) = *(_DWORD *)(a2 + 16);
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
      }
      else
      {
        LODWORD(v1571) = (*(unsigned __int8 *)v1571 >> (~(_BYTE)v1526 & 7)) & 1;
        LODWORD(v1526) = v1526 + 1;
        *v1168 = v1526;
      }
      v1572 = v1570 | (2 * (_DWORD)v1571);
      v1573 = (unsigned __int8 *)(v1468 + (v1526 >> 3));
      if ((unint64_t)v1573 >= v1469)
      {
        if (*v1169)
        {
          ((void (*)(_QWORD))*v1169)(*(_QWORD *)(a2 + 24));
          v1169 = (uint64_t *)(a2 + 32);
          v1168 = (_DWORD *)(a2 + 16);
          v1574 = 0;
          v1468 = *(_QWORD *)a2;
          v1469 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v1574 = 0;
        }
      }
      else
      {
        v1574 = (*v1573 >> (~(_BYTE)v1526 & 7)) & 1;
        *v1168 = v1526 + 1;
      }
      v1984[124] = v1574 | v1572;
    }
    v1575 = *v1168;
    v1576 = (void (*)(_QWORD))(v1468 + (v1575 >> 3));
    if ((unint64_t)v1576 >= v1469)
    {
      v1576 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1576(*(_QWORD *)(a2 + 24));
        v1169 = (uint64_t *)(a2 + 32);
        v1168 = (_DWORD *)(a2 + 16);
        LODWORD(v1576) = 0;
        LODWORD(v1575) = *(_DWORD *)(a2 + 16);
        v1468 = *(_QWORD *)a2;
        v1469 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      LODWORD(v1576) = (*(unsigned __int8 *)v1576 >> (~(_BYTE)v1575 & 7)) & 1;
      LODWORD(v1575) = v1575 + 1;
      *v1168 = v1575;
    }
    v1984[125] = (int)v1576;
    v1577 = (void (*)(_QWORD))(v1468 + (v1575 >> 3));
    if ((unint64_t)v1577 >= v1469)
    {
      v1577 = (void (*)(_QWORD))*v1169;
      if (*v1169)
      {
        v1577(*(_QWORD *)(a2 + 24));
        LODWORD(v1577) = 0;
      }
    }
    else
    {
      LODWORD(v1577) = (*(unsigned __int8 *)v1577 >> (~(_BYTE)v1575 & 7)) & 1;
      *v1168 = v1575 + 1;
    }
    v1984[126] = (int)v1577;
  }
LABEL_1996:
  v1984[127] = *(_DWORD *)(*(_QWORD *)(v1985 + 312) + 72);
  result = (uint64_t)memcpy((void *)(*(_QWORD *)(v4 + 15432) + 572), (const void *)(v4 + 38920), 0x288uLL);
  if (v1980[28] && v1164[145])
  {
    v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
    v1176 = (_DWORD *)(a2 + 16);
    v1178 = *v2017;
    v1179 = *v2017 & 7;
    if (v1179)
    {
      v1180 = *(unsigned int *)(a2 + 16);
      if (*(_QWORD *)a2 + (v1180 >> 3) >= *(_QWORD *)(a2 + 8))
      {
        if (*v2016)
        {
          result = ((uint64_t (*)(_QWORD))*v2016)(*(_QWORD *)(a2 + 24));
          v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
          v1176 = (_DWORD *)(a2 + 16);
        }
      }
      else
      {
        *v2017 = v1180 + 1;
      }
      if (v1179 != 7)
      {
        v1182 = *(unsigned int *)(a2 + 16);
        if (*(_QWORD *)a2 + (v1182 >> 3) >= *(_QWORD *)(a2 + 8))
        {
          if (*v1177)
          {
            result = (*v1177)(*(_QWORD *)(a2 + 24));
            v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
            v1176 = (_DWORD *)(a2 + 16);
          }
        }
        else
        {
          *v1176 = v1182 + 1;
        }
        if ((v1179 ^ 6u) >= 2)
        {
          v1192 = *(unsigned int *)(a2 + 16);
          if (*(_QWORD *)a2 + (v1192 >> 3) >= *(_QWORD *)(a2 + 8))
          {
            if (*v1177)
            {
              result = (*v1177)(*(_QWORD *)(a2 + 24));
              v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
              v1176 = (_DWORD *)(a2 + 16);
            }
          }
          else
          {
            *v1176 = v1192 + 1;
          }
          if ((v1179 - 7) <= 0xFFFFFFFD)
          {
            v1272 = *(unsigned int *)(a2 + 16);
            if (*(_QWORD *)a2 + (v1272 >> 3) >= *(_QWORD *)(a2 + 8))
            {
              if (*v1177)
              {
                result = (*v1177)(*(_QWORD *)(a2 + 24));
                v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
                v1176 = (_DWORD *)(a2 + 16);
              }
            }
            else
            {
              *v1176 = v1272 + 1;
            }
            if ((v1178 & 6) != 4)
            {
              v1302 = *(unsigned int *)(a2 + 16);
              if (*(_QWORD *)a2 + (v1302 >> 3) >= *(_QWORD *)(a2 + 8))
              {
                if (*v1177)
                {
                  result = (*v1177)(*(_QWORD *)(a2 + 24));
                  v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
                  v1176 = (_DWORD *)(a2 + 16);
                }
              }
              else
              {
                *v1176 = v1302 + 1;
              }
              if ((v1179 - 5) <= 0xFFFFFFFD)
              {
                v1361 = *(unsigned int *)(a2 + 16);
                if (*(_QWORD *)a2 + (v1361 >> 3) >= *(_QWORD *)(a2 + 8))
                {
                  if (*v1177)
                  {
                    result = (*v1177)(*(_QWORD *)(a2 + 24));
                    v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
                    v1176 = (_DWORD *)(a2 + 16);
                  }
                }
                else
                {
                  *v1176 = v1361 + 1;
                }
                if ((v1178 & 6) != 2)
                {
                  v1605 = *(unsigned int *)(a2 + 16);
                  if (*(_QWORD *)a2 + (v1605 >> 3) >= *(_QWORD *)(a2 + 8))
                  {
                    if (*v1177)
                    {
                      result = (*v1177)(*(_QWORD *)(a2 + 24));
                      v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
                      v1176 = (_DWORD *)(a2 + 16);
                    }
                  }
                  else
                  {
                    *v1176 = v1605 + 1;
                  }
                  if ((v1179 - 3) <= 0xFFFFFFFD)
                  {
                    v1606 = *(unsigned int *)(a2 + 16);
                    if (*(_QWORD *)a2 + (v1606 >> 3) >= *(_QWORD *)(a2 + 8))
                    {
                      if (*v1177)
                      {
                        result = (*v1177)(*(_QWORD *)(a2 + 24));
                        v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
                        v1176 = (_DWORD *)(a2 + 16);
                      }
                    }
                    else
                    {
                      *v1176 = v1606 + 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((int)(v1164[1] * *v1164) >= 2)
    {
      v1956 = *(unsigned int *)(a2 + 16);
      v1957 = *(_QWORD *)a2;
      v1958 = *(_QWORD *)(a2 + 8);
      v1959 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1956 >> 3));
      if ((unint64_t)v1959 >= v1958)
      {
        if (*v1177)
        {
          result = (*v1177)(*(_QWORD *)(a2 + 24));
          v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
          v1176 = (_DWORD *)(a2 + 16);
          v1961 = 0;
          LODWORD(v1956) = *(_DWORD *)(a2 + 16);
          v1957 = *(_QWORD *)a2;
          v1958 = *(_QWORD *)(a2 + 8);
          v1962 = (uint64_t (*)(_QWORD))(*(_QWORD *)a2 + (v1956 >> 3));
          if ((unint64_t)v1962 >= v1958)
            goto LABEL_3551;
        }
        else
        {
          v1961 = 0;
          v1962 = (uint64_t (*)(_QWORD))(v1957 + (v1956 >> 3));
          if ((unint64_t)v1962 >= v1958)
            goto LABEL_3551;
        }
LABEL_3548:
        LODWORD(v1962) = (*(unsigned __int8 *)v1962 >> (~(_BYTE)v1956 & 7)) & 1;
        LODWORD(v1956) = v1956 + 1;
        *v1176 = v1956;
      }
      else
      {
        v1960 = *v1959 >> (~(_BYTE)v1956 & 7);
        LODWORD(v1956) = v1956 + 1;
        *v1176 = v1956;
        v1961 = 2 * (v1960 & 1);
        v1962 = (uint64_t (*)(_QWORD))(v1957 + (v1956 >> 3));
        if ((unint64_t)v1962 < v1958)
          goto LABEL_3548;
LABEL_3551:
        v1962 = *v1177;
        if (*v1177)
        {
          result = v1962(*(_QWORD *)(a2 + 24));
          v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
          v1176 = (_DWORD *)(a2 + 16);
          LODWORD(v1962) = 0;
          LODWORD(v1956) = *(_DWORD *)(a2 + 16);
          v1957 = *(_QWORD *)a2;
          v1958 = *(_QWORD *)(a2 + 8);
        }
      }
      v1980[7] = (v1962 | v1961) + 1;
      v1963 = (unsigned __int8 *)(v1957 + (v1956 >> 3));
      if ((unint64_t)v1963 >= v1958)
      {
        if (*v1177)
        {
          result = (*v1177)(*(_QWORD *)(a2 + 24));
          v1177 = (uint64_t (**)(_QWORD))(a2 + 32);
          v1176 = (_DWORD *)(a2 + 16);
          v1965 = 0;
          LODWORD(v1956) = *(_DWORD *)(a2 + 16);
          v1966 = (unsigned __int8 *)(*(_QWORD *)a2 + (v1956 >> 3));
          if ((unint64_t)v1966 >= *(_QWORD *)(a2 + 8))
            goto LABEL_3558;
        }
        else
        {
          v1965 = 0;
          v1966 = (unsigned __int8 *)(v1957 + (v1956 >> 3));
          if ((unint64_t)v1966 >= v1958)
            goto LABEL_3558;
        }
LABEL_3555:
        v1967 = (*v1966 >> (~(_BYTE)v1956 & 7)) & 1;
        *v1176 = v1956 + 1;
      }
      else
      {
        v1964 = *v1963 >> (~(_BYTE)v1956 & 7);
        LODWORD(v1956) = v1956 + 1;
        *v1176 = v1956;
        v1965 = 2 * (v1964 & 1);
        v1966 = (unsigned __int8 *)(v1957 + (v1956 >> 3));
        if ((unint64_t)v1966 < v1958)
          goto LABEL_3555;
LABEL_3558:
        if (*v1177)
          result = (*v1177)(*(_QWORD *)(a2 + 24));
        v1967 = 0;
      }
      v1980[6] = (v1967 | v1965) + 1;
    }
    v1164[146] = 0;
    if (v1164[145])
    {
      if (!*(_DWORD *)v1981)
      {
        v1968 = *(_DWORD *)(v1981 + 4) == 0;
        v1969 = v1987;
        if (!v1987[32])
          goto LABEL_3567;
        goto LABEL_3568;
      }
      v1968 = 0;
      v1969 = v1987;
      if (v1987[32])
        goto LABEL_3568;
LABEL_3567:
      if (*v1969)
      {
LABEL_3568:
        v1970 = 0;
        if (!*(_DWORD *)(v1981 + 32))
          goto LABEL_3569;
LABEL_3576:
        v1971 = 0;
      }
      else
      {
        v1970 = v1969[16] == 0;
        if (*(_DWORD *)(v1981 + 32))
          goto LABEL_3576;
LABEL_3569:
        if (*(_DWORD *)(v1981 + 96))
          goto LABEL_3576;
        v1971 = *(_DWORD *)(v1981 + 160) == 0;
      }
      v1164[146] = v1968 && v1970 && v1971;
    }
  }
  return result;
}

void av1_decode_tg_tiles_and_wrapup(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 **a4, int a5, signed int a6, int a7)
{
  int v7;
  uint64_t v8;
  int *v9;
  int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  signed int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _BOOL4 v64;
  int v65;
  int v66;
  _BOOL4 v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int16x8_t *v74;
  uint64_t v75;
  unint64_t v76;
  __int16 *v77;
  int v78;
  int v79;
  int v80;
  int16x8_t v81;
  int16x8_t *v82;
  unint64_t v83;
  uint64_t v84;
  int i;
  int16x8_t *v86;
  uint64_t v87;
  unint64_t v88;
  __int16 *v89;
  int16x8_t v90;
  int16x8_t *v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  pthread_mutex_t **v97;
  int32x4_t v98;
  void *v99;
  void *v100;
  pthread_mutex_t *v101;
  _BYTE *v102;
  _DWORD *v103;
  int v104;
  int v105;
  _BOOL4 v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned __int8 *v114;
  unsigned __int8 **v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  int v127;
  void *v128;
  unint64_t v129;
  __int128 v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v141;
  _DWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  unsigned __int8 *v150;
  uint64_t v151;
  const void *v152;
  uint64_t v153;
  _OWORD *v154;
  _OWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  __int16 v163;
  uint64_t v164;
  __int128 v165;
  void *v166;
  const void *v167;
  _OWORD *v168;
  const void *v169;
  __int128 v170;
  _OWORD *v171;
  const void *v172;
  _OWORD *v173;
  _OWORD *v174;
  const void *v175;
  __int128 v176;
  __int128 v177;
  void *v178;
  const void *v179;
  __int128 v180;
  __int128 v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  unint64_t v198;
  uint64_t v199;
  _OWORD *v200;
  void *v201;
  unint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  _DWORD *v214;
  uint64_t v215;
  _DWORD *v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int *v228;
  void *v229;
  unint64_t v230;
  uint64_t v231;
  void *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  void *v236;
  unint64_t v237;
  signed int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  char v243;
  int v244;
  int *v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  void *v249;
  _QWORD *v250;
  int *v251;
  uint64_t v252;
  int v253;
  int v254;
  int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  void *v265;
  void *v266;
  pthread_mutex_t *v267;
  void *v268;
  void *v269;
  pthread_cond_t *v270;
  _QWORD *v271;
  void **v272;
  _DWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  void **v278;
  _DWORD *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t (**v285)();
  int v286;
  unint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  unint64_t v292;
  void *v293;
  unint64_t v294;
  uint64_t v295;
  _OWORD *v296;
  void *v297;
  unint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  _DWORD *v308;
  uint64_t v309;
  _DWORD *v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  _QWORD *v316;
  void **v317;
  _DWORD *v318;
  BOOL (*v319)(_DWORD *, uint64_t);
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  void **v324;
  BOOL (*v325)(_DWORD *, uint64_t);
  _DWORD *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t (**v332)();
  int v333;
  unint64_t v334;
  int v335;
  unsigned int v336;
  int v337;
  int v338;
  int *v339;
  int *v340;
  int *v341;
  int v342;
  _QWORD *v343;
  unsigned __int8 *ls_tile_buffers;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  int v349;
  int v350;
  int v351;
  int v352;
  _BOOL4 v353;
  int v354;
  int v355;
  _BYTE *v356;
  _QWORD *v357;
  void *v358;
  _OWORD *v359;
  void *v360;
  _OWORD *v361;
  const void *v362;
  _OWORD *v363;
  _BYTE *v364;
  _BYTE *v365;
  _OWORD *v366;
  char v367;
  void *v368;
  _OWORD *v369;
  _OWORD *v370;
  _BYTE *v371;
  void *v372;
  void *v373;
  void *v374;
  uint64_t v375;
  _QWORD *v377;
  _DWORD *v378;
  _DWORD *v379;
  uint64_t v380;
  int *v381;
  const void *v382;
  const void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  unsigned int *v391;
  unsigned int *v392;
  unsigned int *v393;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;

  v7 = a6;
  v8 = a1;
  v9 = (int *)(a1 + 388776);
  v10 = (int *)(a1 + 363880);
  v377 = (_QWORD *)(a1 + 40504);
  v11 = (unsigned int *)(a1 + 39904);
  v12 = a1 + 38776;
  v343 = (_QWORD *)(a1 + 38224);
  v356 = (_BYTE *)(a1 + 15692);
  *(_QWORD *)(a1 + 10736) = *(_QWORD *)(a1 + 15248);
  v13 = a1 + 15200;
  v385 = a1 + 298112;
  if (!a7)
    goto LABEL_29;
  v14 = (int *)(a1 + 388776);
  if (!*(_DWORD *)(a1 + 38256) && !*(_DWORD *)(a1 + 38320) && !*(_DWORD *)(a1 + 38384))
  {
    v15 = (int *)(a1 + 363880);
    v17 = (uint64_t *)(a1 + 39880);
    goto LABEL_9;
  }
  v15 = (int *)(a1 + 363880);
  av1_alloc_restoration_buffers(a1 + 15200, 1);
  av1_alloc_restoration_struct(v13, v8 + 38256, 0);
  v16 = *(_QWORD *)(v12 + 1104);
  if (!*(_BYTE *)(v16 + 77))
  {
    v17 = (uint64_t *)(v12 + 1104);
    av1_alloc_restoration_struct(v13, v8 + 38320, 1);
    v16 = *(_QWORD *)(v12 + 1104);
    if (!*(_BYTE *)(v16 + 77))
    {
      av1_alloc_restoration_struct(v13, v8 + 38384, 1);
LABEL_9:
      v16 = *v17;
    }
  }
  v18 = *(unsigned __int8 *)(v16 + 76);
  v10 = v15;
  v9 = v14;
  if (*(_DWORD *)(v385 + 32) != 69696 << v18)
  {
    v19 = v10;
    v20 = *(_DWORD *)(v385 + 36);
    v21 = *(_QWORD *)(v385 + 8);
    if (v20)
      v21 *= 2;
    if (v21)
    {
      free(*(void **)(v21 - 8));
      v20 = *(_DWORD *)(v385 + 36);
    }
    *(_QWORD *)(v385 + 8) = 0;
    if (v20)
      v22 = 2 * *(_QWORD *)(v385 + 16);
    else
      v22 = *(_QWORD *)(v385 + 16);
    if (v22)
      free(*(void **)(v22 - 8));
    *(_QWORD *)(v385 + 16) = 0;
    *(_QWORD *)(v385 + 32) = 0;
    v23 = *(_QWORD *)(v385 + 40);
    if (v23)
      free(*(void **)(v23 - 8));
    *(_QWORD *)(v385 + 40) = 0;
    v24 = *(_QWORD *)(v385 + 24);
    if (v24)
      free(*(void **)(v24 - 8));
    *(_QWORD *)(v385 + 24) = 0;
    v25 = *(_QWORD *)(v385 + 48);
    if (v25)
      free(*(void **)(v25 - 8));
    *(_QWORD *)(v385 + 48) = 0;
    v26 = *(_QWORD *)(v385 + 56);
    if (v26)
      free(*(void **)(v26 - 8));
    *(_QWORD *)(v385 + 56) = 0;
    allocate_mc_tmp_buf(v13, v8 + 41248, 69696 << v18, v18);
    v7 = a6;
    v10 = v19;
    v9 = v14;
  }
LABEL_29:
  v357 = (_QWORD *)v13;
  v400 = v12;
  v27 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 1104) + 77);
  if (*(_BYTE *)(*(_QWORD *)(v12 + 1104) + 77))
    v28 = 1;
  else
    v28 = 3;
  v29 = *v10;
  v30 = v11[145];
  v380 = v8;
  v342 = v28;
  if (*v10 < 2)
    goto LABEL_67;
  if (v30 && !v10[26])
  {
    v30 = 1;
LABEL_67:
    v31 = v377;
    v32 = a5;
    goto LABEL_68;
  }
  v31 = v377;
  v32 = a5;
  if (v10[27])
  {
    v339 = v9;
    v34 = *v11;
    v33 = v11[1];
    if (v30)
    {
      v36 = v10[6];
      v35 = v10[7];
      if (v35 >= (int)v34)
        v37 = *v11;
      else
        v37 = v10[7];
      if (v36 >= v33)
        v38 = v11[1];
      else
        v38 = v10[6];
      v39 = v38 & ~(v36 >> 31);
      if (v36 >= 0)
        v40 = v38 + 1;
      else
        v40 = v11[1];
      v41 = v37 & ~(v35 >> 31);
      if (v35 >= 0)
        v42 = v37 + 1;
      else
        v42 = *v11;
      v43 = a2;
      if (v40 <= v39)
        goto LABEL_101;
    }
    else
    {
      v39 = 0;
      v41 = 0;
      v40 = v11[1];
      v42 = *v11;
      v43 = a2;
      if (v33 <= 0)
        goto LABEL_101;
    }
    if (v42 > v41 && v41 + v39 * (int)v34 <= v7 && v42 + (v40 - 1) * (int)v34 > a5)
    {
      v398 = v11[1];
      v401 = v41;
      v381 = v10;
      v338 = v27;
      decode_mt_init(v8);
      v404 = v40;
      if (v11[145])
      {
        ls_tile_buffers = get_ls_tile_buffers((_DWORD *)v8, a2, a3, (_QWORD *)(v8 + 298256));
      }
      else
      {
        get_tile_buffers_0(v8, a2, (unint64_t)a3, v8 + 298256, a5, v7);
        ls_tile_buffers = 0;
      }
      v186 = v398;
      v187 = v398 * v34;
      v188 = v385;
      v189 = *(_QWORD *)(v385 + 128);
      v390 = (v398 * v34);
      if (v189)
      {
        v190 = *(_DWORD *)(v385 + 136);
        if (v187 == v190)
          goto LABEL_316;
        if (v190 < 1)
        {
          v188 = v385;
        }
        else
        {
          v191 = 0;
          v192 = 21344;
          v188 = v385;
          do
          {
            av1_dec_row_mt_dealloc((int *)(*(_QWORD *)(v385 + 128) + v192));
            ++v191;
            v192 += 21408;
          }
          while (v191 < *(int *)(v385 + 136));
          v189 = *(_QWORD *)(v385 + 128);
          v187 = v398 * v34;
          v186 = v398;
          if (!v189)
            goto LABEL_306;
        }
        free(*(void **)(v189 - 8));
      }
LABEL_306:
      *(_DWORD *)(v188 + 136) = 0;
      v196 = 21408 * v187;
      if (v196 <= 0x1FFFFFFD9 && (v197 = malloc_type_malloc(v196 + 39, 0x70F2D1FBuLL)) != 0)
      {
        v198 = ((unint64_t)v197 + 39) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)(v198 - 8) = v197;
        *(_QWORD *)(v385 + 128) = v198;
        if (v198)
        {
LABEL_312:
          *(_DWORD *)(v385 + 136) = v187;
          if (v187 >= 1)
          {
            v199 = 0;
            do
            {
              v200 = (_OWORD *)(*(_QWORD *)(v385 + 128) + v199);
              v200[1337] = 0uLL;
              v200[1336] = 0uLL;
              v200[1335] = 0uLL;
              v200[1334] = 0uLL;
              v199 += 21408;
            }
            while (21408 * v187 != v199);
          }
          v339[1] = 0;
LABEL_316:
          v392 = v11;
          if (!*(_QWORD *)(v8 + 10768))
          {
            v201 = malloc_type_malloc(0x8017uLL, 0x70F2D1FBuLL);
            if (!v201)
            {
              *(_QWORD *)(v8 + 10768) = 0;
LABEL_321:
              aom_internal_error(*(_QWORD *)(v8 + 15248), 2, "Failed to allocate pbi->dcb.xd.seg_mask");
              goto LABEL_322;
            }
            v202 = ((unint64_t)v201 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v202 - 8) = v201;
            *(_QWORD *)(v8 + 10768) = v202;
            if (!v202)
              goto LABEL_321;
          }
LABEL_322:
          LODWORD(v203) = 0;
          v204 = 0;
          if (v186 >= 1 && (int)v34 >= 1)
          {
            v205 = 0;
            v204 = 0;
            LODWORD(v203) = 0;
            v206 = *(_DWORD *)(*(_QWORD *)(v400 + 1104) + 36);
            v207 = *(_DWORD *)(v8 + 15732);
            v208 = *(_DWORD *)(v8 + 15736);
            v209 = v8 + 39964;
            v210 = *(_QWORD *)(v385 + 128) + 12;
            v397 = 21408 * (int)*v11;
            v211 = v8 + 40224;
            do
            {
              v212 = 0;
              v213 = v205;
              v214 = (_DWORD *)(v211 + 4 * v205++);
              v215 = 0x100000000;
              v216 = (_DWORD *)v210;
              do
              {
                v217 = *v214 << v206;
                v218 = *(_DWORD *)(v211 + 4 * v205) << v206;
                v216[1] = v213;
                if (v218 >= v207)
                  v218 = v207;
                *(v216 - 3) = v217;
                *(v216 - 2) = v218;
                v219 = *(_DWORD *)(v209 + 4 * v212) << v206;
                v220 = *(_DWORD *)(v380 + (v215 >> 30) + 39964) << v206;
                v216[2] = v212;
                *(v216 - 1) = v219;
                if (v220 >= v208)
                  v221 = v208;
                else
                  v221 = v220;
                *v216 = v221;
                v222 = ((1 << v206) + ~v217 + v218) >> v206;
                if ((int)v204 <= v222)
                  v204 = v222;
                if (v222 == 1)
                  v223 = 1;
                else
                  v223 = 2;
                LODWORD(v203) = v223 + v203;
                ++v212;
                v215 += 0x100000000;
                v216 += 5352;
              }
              while (v34 != v212);
              v210 += v397;
            }
            while (v205 != v398);
          }
          if ((int)v203 >= v29)
            v203 = v29;
          else
            v203 = v203;
          v384 = v203;
          v224 = v339;
          if (v339[1] != v204)
          {
            if ((int)v390 >= 1)
            {
              v225 = 0;
              v226 = 48 * v204;
              while (1)
              {
                v227 = *(_QWORD *)(v385 + 128);
                v228 = (int *)(v227 + 21408 * v225 + 21344);
                av1_dec_row_mt_dealloc(v228);
                *(_DWORD *)(v227 + 21408 * v225 + 21360) = v204;
                if (v204 >> 27)
                  break;
                v229 = malloc_type_malloc(((unint64_t)v204 << 6) | 0x17, 0x70F2D1FBuLL);
                if (!v229)
                  break;
                v230 = ((unint64_t)v229 + 23) & 0xFFFFFFFFFFFFFFF0;
                *(_QWORD *)(v230 - 8) = v229;
                *(_QWORD *)v228 = v230;
                if (!v230)
                  goto LABEL_352;
LABEL_353:
                if ((int)v204 >= 1 && v230)
                {
                  v231 = 0;
                  do
                  {
                    pthread_mutex_init((pthread_mutex_t *)(*(_QWORD *)v228 + v231), 0);
                    v231 += 64;
                  }
                  while ((unint64_t)v204 << 6 != v231);
                }
                if (v204 > 0xAAAAAAA || (v232 = malloc_type_malloc(v226 + 23, 0x70F2D1FBuLL)) == 0)
                {
                  v233 = (unint64_t *)(v227 + 21408 * v225 + 21352);
                  *v233 = 0;
LABEL_362:
                  aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate dec_row_mt_sync->cond_");
                  v234 = *v233;
                  goto LABEL_363;
                }
                v233 = (unint64_t *)(v227 + 21408 * v225 + 21352);
                v234 = ((unint64_t)v232 + 23) & 0xFFFFFFFFFFFFFFF0;
                *(_QWORD *)(v234 - 8) = v232;
                *v233 = v234;
                if (!v234)
                  goto LABEL_362;
LABEL_363:
                if ((int)v204 >= 1 && v234)
                {
                  v235 = 0;
                  do
                  {
                    pthread_cond_init((pthread_cond_t *)(*v233 + v235), 0);
                    v235 += 48;
                  }
                  while (v226 != v235);
                }
                if (v204 <= 0x7FFFFFFA && (v236 = malloc_type_malloc(4 * v204 + 23, 0x70F2D1FBuLL)) != 0)
                {
                  v237 = ((unint64_t)v236 + 23) & 0xFFFFFFFFFFFFFFF0;
                  *(_QWORD *)(v237 - 8) = v236;
                  *(_QWORD *)(v227 + 21408 * v225 + 21368) = v237;
                  if (v237)
                    goto LABEL_346;
                }
                else
                {
                  *(_QWORD *)(v227 + 21408 * v225 + 21368) = 0;
                }
                aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate dec_row_mt_sync->cur_sb_col");
LABEL_346:
                *(_DWORD *)(v227 + 21408 * v225++ + 21376) = 1;
                if (v225 == v390)
                  goto LABEL_371;
              }
              *(_QWORD *)v228 = 0;
LABEL_352:
              aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate dec_row_mt_sync->mutex_");
              v230 = *(_QWORD *)v228;
              goto LABEL_353;
            }
LABEL_371:
            v224 = v339;
            v339[1] = v204;
          }
          v238 = a6;
          v239 = v34;
          v240 = v404;
          v241 = v401;
          v242 = a5;
          tile_mt_queue(v380, v239, v398, v39, v404, v401, v42, a5, a6);
          v243 = *(_DWORD *)(*(_QWORD *)(v400 + 1104) + 36);
          v244 = (*(int *)(v380 + 15732) >> v243)
               + 1
               + ((*(int *)(v380 + 15732) >> v243) + 1) * (*(int *)(v380 + 15736) >> v243);
          if (*v224 >= v244)
          {
LABEL_382:
            *((_QWORD *)v224 + 6) = 0;
            v224[6] = v39;
            v224[7] = v240;
            v224[8] = v241;
            v224[9] = v42;
            v224[10] = v242;
            v224[11] = v238;
            *((_QWORD *)v224 + 7) = 0;
            do
            {
              v252 = 21408 * v241;
              v253 = v401;
              do
              {
                v254 = v253 + v39 * *v392;
                if (v254 >= a5 && v254 <= a6)
                {
                  v256 = 0;
                  v257 = *(_QWORD *)(v385 + 128) + 21408 * (int)(v39 * *v392) + v252;
                  *(_QWORD *)(v257 + 21392) = 0;
                  v258 = *(_QWORD *)(v400 + 1104);
                  v259 = -1 << *(_DWORD *)(v258 + 36);
                  v260 = *(_DWORD *)(v257 + 4) - *(_DWORD *)v257 + ~v259;
                  v261 = *(_DWORD *)(v257 + 8);
                  v262 = *(_DWORD *)(v257 + 12) + ~v259;
                  *(_DWORD *)(v257 + 21400) = 0;
                  v263 = v260 & v259;
                  *(_DWORD *)(v257 + 21384) = v263;
                  *(_DWORD *)(v257 + 21388) = (v262 - v261) & v259;
                  if ((*(_BYTE *)v357 & 0xFD) == 0)
                  {
                    v256 = v356[3];
                    if (v356[3])
                    {
                      v256 = v356[4];
                      if (v356[4])
                      {
                        if (*(_BYTE *)(v258 + 28) == 15)
                          v256 = 2;
                        else
                          v256 = 4;
                      }
                    }
                  }
                  *(_DWORD *)(v257 + 21380) = v256;
                  v224[12] += v263;
                  memset(*(void **)(v257 + 21368), 255, 4 * v204);
                }
                ++v253;
                v252 += 21408;
              }
              while (v42 != v253);
              ++v39;
            }
            while (v39 != v404);
            v9 = v339;
            v8 = v380;
            v11 = v392;
            v264 = v385;
            v31 = v377;
            v7 = a6;
            if (*((_QWORD *)v339 + 1))
            {
LABEL_405:
              if (!*((_QWORD *)v339 + 2))
              {
                v268 = malloc_type_malloc(0x47uLL, 0x70F2D1FBuLL);
                if (v268)
                {
                  v269 = v268;
                  v270 = (pthread_cond_t *)(((unint64_t)v268 + 23) & 0xFFFFFFFFFFFFFFF0);
                  *(_QWORD *)&v270[-1].__opaque[32] = v269;
                  *((_QWORD *)v339 + 2) = v270;
                  if (v270)
                  {
LABEL_411:
                    pthread_cond_init(v270, 0);
                    goto LABEL_412;
                  }
                }
                else
                {
                  *((_QWORD *)v339 + 2) = 0;
                }
                aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate pbi->row_mt_cond_");
                v270 = (pthread_cond_t *)*((_QWORD *)v339 + 2);
                if (v270)
                  goto LABEL_411;
              }
LABEL_412:
              if ((int)v384 <= 0)
              {
                *(_DWORD *)(v380 + 15056) = 0;
              }
              else
              {
                v271 = (_QWORD *)v377[89];
                v272 = (void **)v377[91];
                memcpy(*v272, (const void *)v380, 0x3B60uLL);
                v273 = *v272;
                v273[3764] = 0;
                *((_QWORD *)v273 + 1883) = *((_QWORD *)v273 + 32109);
                *((_QWORD *)*v272 + 1884) = *((_QWORD *)*v272 + 32110);
                *(_OWORD *)((char *)*v272 + 15032) = *(_OWORD *)((char *)*v272 + 256904);
                *((_QWORD *)*v272 + 1881) = *((_QWORD *)*v272 + 32115);
                off_253EA52D0[0]();
                v271[3] = row_mt_worker_hook;
                v271[4] = v272;
                v271[5] = v380;
                if ((_DWORD)v384 != 1)
                {
                  v274 = 0;
                  v275 = v384 - 1;
                  v276 = 424;
                  do
                  {
                    v277 = (_QWORD *)(v377[89] + v274);
                    v278 = (void **)(v377[91] + v276);
                    memcpy(*v278, (const void *)v380, 0x3B60uLL);
                    v279 = *v278;
                    v280 = *((_QWORD *)*v278 + 32109);
                    v279[3764] = 0;
                    *((_QWORD *)v279 + 1883) = v280;
                    *((_QWORD *)*v278 + 1884) = *((_QWORD *)*v278 + 32110);
                    v281 = (char *)*v278;
                    v282 = *((_QWORD *)*v278 + 32111);
                    *(_OWORD *)(v281 + 15032) = *(_OWORD *)((char *)*v278 + 256904);
                    *((_QWORD *)v281 + 1346) = v282;
                    *((_QWORD *)*v278 + 1881) = *((_QWORD *)*v278 + 32115);
                    off_253EA52D0[0]();
                    v277[10] = row_mt_worker_hook;
                    v277[11] = v278;
                    v274 += 56;
                    v276 += 424;
                    v277[12] = v380;
                    v8 = v380;
                    --v275;
                  }
                  while (v275);
                }
                v283 = v384 + 1;
                v31 = v377;
                do
                {
                  v284 = v377[89] + 56 * (v283 - 2);
                  *(_QWORD *)(*(_QWORD *)(v284 + 32) + 8) = a3;
                  *(_DWORD *)(v284 + 48) = 0;
                  v285 = off_253EA52E0;
                  if ((_DWORD)v283 != 2)
                    v285 = off_253EA52D8;
                  (*v285)();
                  --v283;
                }
                while (v283 > 1);
                v286 = 0;
                v287 = v384 + 1;
                v11 = v392;
                do
                {
                  off_253EA52D0[0]();
                  v286 |= v288 == 0;
                  --v287;
                }
                while (v287 > 1);
                *(_DWORD *)(v8 + 15056) = v286;
                v9 = v339;
                v7 = a6;
                v264 = v385;
                if (v286)
                  aom_internal_error(v8 + 390860, 7, "Failed to decode tile data");
              }
              if (v11[145])
              {
                v43 = ls_tile_buffers;
                v27 = v338;
                if ((_DWORD)v390 != 1)
                  goto LABEL_122;
                goto LABEL_427;
              }
              v185 = *(_QWORD *)(v264 + 128) + 21408 * v7 + 24;
              goto LABEL_429;
            }
            v265 = malloc_type_malloc(0x57uLL, 0x70F2D1FBuLL);
            if (v265)
            {
              v266 = v265;
              v267 = (pthread_mutex_t *)(((unint64_t)v265 + 23) & 0xFFFFFFFFFFFFFFF0);
              *(_QWORD *)&v267[-1].__opaque[48] = v266;
              *((_QWORD *)v339 + 1) = v267;
              if (v267)
              {
LABEL_404:
                pthread_mutex_init(v267, 0);
                goto LABEL_405;
              }
            }
            else
            {
              *((_QWORD *)v339 + 1) = 0;
            }
            aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate pbi->row_mt_mutex_");
            v267 = (pthread_mutex_t *)*((_QWORD *)v339 + 1);
            if (!v267)
              goto LABEL_405;
            goto LABEL_404;
          }
          v245 = v381;
          v246 = *((_QWORD *)v381 + 3111);
          if (v246)
          {
            free(*(void **)(v246 - 8));
            v245 = v381;
          }
          *((_QWORD *)v245 + 3111) = 0;
          *v339 = 0;
          v247 = 241664 * v244;
          if (v247 <= 0x1FFFFFFD9 && (v248 = malloc_type_malloc(v247 | 0x27, 0x70F2D1FBuLL), v245 = v381, v248))
          {
            v249 = v248;
            v250 = (_QWORD *)(((unint64_t)v248 + 39) & 0xFFFFFFFFFFFFFFE0);
            *(v250 - 1) = v249;
            *((_QWORD *)v381 + 3111) = v250;
            if (v250)
            {
LABEL_381:
              bzero(v250, 241664 * v244);
              v224 = v339;
              *v339 = v244;
              v238 = a6;
              v242 = a5;
              v240 = v404;
              v241 = v401;
              goto LABEL_382;
            }
          }
          else
          {
            *((_QWORD *)v245 + 3111) = 0;
          }
          v251 = v245;
          aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate pbi->cb_buffer_base");
          v250 = (_QWORD *)*((_QWORD *)v251 + 3111);
          goto LABEL_381;
        }
      }
      else
      {
        *(_QWORD *)(v385 + 128) = 0;
      }
      aom_internal_error(*(_QWORD *)(v8 + 15248), 2, "Failed to allocate pbi->tile_data");
      goto LABEL_312;
    }
LABEL_101:
    v9 = v339;
    v31 = v377;
    goto LABEL_122;
  }
  v44 = v7 - a5;
  if (v7 <= a5)
  {
LABEL_68:
    v57 = *v11;
    v56 = v11[1];
    v59 = v10[6];
    v58 = v10[7];
    if (!v30)
    {
      v62 = 0;
      v66 = v11[1];
      v63 = *v11;
      v396 = v10[1];
      v353 = v396;
      v354 = 0;
      if (v56 <= 0)
        goto LABEL_121;
      goto LABEL_115;
    }
LABEL_69:
    if ((int)v58 >= v57)
      v60 = v57;
    else
      v60 = v58;
    if ((int)v59 >= v56)
      v61 = v56;
    else
      v61 = v59;
    if ((int)v58 >= 0)
      v62 = v60;
    else
      v62 = 0;
    if ((int)v58 >= 0)
      v63 = v60 + 1;
    else
      v63 = v57;
    v64 = (int)v58 < 0 && v10[1] != 0;
    v396 = v64;
    if ((int)v59 >= 0)
      v65 = v61;
    else
      v65 = 0;
    if ((int)v59 >= 0)
      v66 = v61 + 1;
    else
      v66 = v56;
    v67 = (int)v59 < 0 && v10[1] != 0;
    v353 = v67;
    v354 = v65;
    if (v66 <= v65)
      goto LABEL_121;
LABEL_115:
    if (v63 > v62 && v62 + v354 * v57 <= v7 && v63 + (v66 - 1) * v57 > v32)
    {
      v350 = v66;
      v351 = v62;
      v352 = v56;
      v338 = v27;
      v69 = (_QWORD *)(v8 + 298256);
      v389 = v63;
      v388 = v8 + 298256;
      if (v30)
      {
        if (v10[26])
        {
          v348 = get_ls_tile_buffers((_DWORD *)v8, a2, a3, v69);
          v367 = 0;
        }
        else
        {
          v367 = 0;
          v113 = &v69[128 * v59];
          v114 = (unsigned __int8 *)v10[25];
          v115 = (unsigned __int8 **)&v113[2 * v58];
          *v115 = a2;
          v115[1] = v114;
          v348 = &v114[(_QWORD)a2];
        }
      }
      else
      {
        v367 = *v356 ^ 1;
        get_tile_buffers_0(v8, a2, (unint64_t)a3, (uint64_t)v69, a5, a6);
        v348 = 0;
      }
      v375 = v8 + 56121;
      v116 = v8 + 41248;
      v117 = v352;
      v118 = v352 * v57;
      v119 = *(_QWORD *)(v385 + 128);
      v336 = v352 * v57;
      if (v119)
      {
        if (v118 == *(_DWORD *)(v385 + 136))
          goto LABEL_196;
        free(*(void **)(v119 - 8));
        v118 = v352 * v57;
      }
      *(_DWORD *)(v385 + 136) = 0;
      v120 = 21408 * v118;
      if (v120 <= 0x1FFFFFFD9 && (v121 = malloc_type_malloc(v120 + 39, 0x70F2D1FBuLL), v122 = v352 * v57, v121))
      {
        v123 = ((unint64_t)v121 + 39) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)(v123 - 8) = v121;
        *(_QWORD *)(v385 + 128) = v123;
        if (v123)
        {
LABEL_192:
          *(_DWORD *)(v385 + 136) = v122;
          if (v122 >= 1)
          {
            v124 = 0;
            do
            {
              v125 = (_OWORD *)(*(_QWORD *)(v385 + 128) + v124);
              v125[1337] = 0uLL;
              v125[1336] = 0uLL;
              v125[1335] = 0uLL;
              v125[1334] = 0uLL;
              v124 += 21408;
            }
            while (21408 * v336 != v124);
          }
          v9[1] = 0;
LABEL_196:
          v126 = v8 + 49088;
          v365 = (_BYTE *)(v8 + 46480);
          v364 = (_BYTE *)(v8 + 43872);
          v7 = a6;
          v127 = a5;
          if (!*(_QWORD *)(v8 + 10768))
          {
            v128 = malloc_type_malloc(0x8017uLL, 0x70F2D1FBuLL);
            if (!v128)
            {
              *(_QWORD *)(v8 + 10768) = 0;
LABEL_201:
              aom_internal_error(*(_QWORD *)(v8 + 15248), 2, "Failed to allocate pbi->dcb.xd.seg_mask");
              goto LABEL_202;
            }
            v129 = ((unint64_t)v128 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v129 - 8) = v128;
            *(_QWORD *)(v8 + 10768) = v129;
            if (!v129)
              goto LABEL_201;
          }
LABEL_202:
          v340 = v9;
          *(_QWORD *)(v385 + 64) = read_coeffs_tx_intra_block;
          *(_QWORD *)(v385 + 72) = predict_and_reconstruct_intra_block;
          *(_QWORD *)(v385 + 80) = av1_read_coeffs_txb_facade;
          *(_QWORD *)(v385 + 88) = inverse_transform_inter_block;
          *(_QWORD *)(v385 + 96) = predict_inter_block;
          *(_QWORD *)(v385 + 104) = cfl_store_inter_block;
          memcpy((void *)(v8 + 41248), (const void *)v8, 0x3B60uLL);
          *(_OWORD *)(v8 + 56312) = *(_OWORD *)(v385 + 8);
          v130 = *(_OWORD *)(v8 + 298160);
          v374 = (void *)(v8 + 56448);
          v387 = v8 + 390860;
          v370 = (_OWORD *)(v8 + 15904);
          *(_DWORD *)(v8 + 56304) = 0;
          v383 = (const void *)(v8 + 32960);
          *(_QWORD *)(v8 + 56280) = *(_QWORD *)(v385 + 40);
          v362 = (const void *)(v8 + 31744);
          v363 = (_OWORD *)(v8 + 15872);
          *(_OWORD *)(v8 + 56288) = v130;
          v382 = (const void *)(v8 + 30528);
          v361 = (_OWORD *)(v8 + 44000);
          v360 = (void *)(v8 + 44048);
          v369 = (_OWORD *)(v8 + 41392);
          v368 = (void *)(v8 + 41440);
          v373 = (void *)(v8 + 52024);
          v359 = (_OWORD *)(v8 + 46608);
          v358 = (void *)(v8 + 46656);
          v372 = (void *)(v8 + 54072);
          v371 = (_BYTE *)(v8 + 56120);
          v349 = ~v351 + v57;
          v31 = v377;
          v131 = v354;
          v132 = v389;
          v133 = v8 + 298256;
          v386 = v8 + 41248;
          v391 = v11;
          v366 = (_OWORD *)(v8 + 15840);
          while (1)
          {
            v134 = v117 + ~v131;
            v355 = v131;
            if (!v353)
              v134 = v131;
            v399 = v134;
            v406 = v134;
            v135 = v8 + 4 * v134;
            v379 = (_DWORD *)(v135 + 40224);
            v378 = (_DWORD *)(v135 + 40228);
            v136 = v349;
            v137 = v351;
            do
            {
              if (v396)
                v138 = v136;
              else
                v138 = v137;
              v139 = (int)*v11 * (uint64_t)v406;
              if ((int)v139 + v138 < v127 || (int)v139 + v138 > v7)
                goto LABEL_207;
              v141 = v138;
              v142 = (_DWORD *)v8;
              v143 = v133 + (v399 << 10) + 16 * v138;
              v403 = *(_QWORD *)(v385 + 128) + 21408 * v139;
              v144 = (_QWORD *)(v403 + 21408 * v138 + 24);
              *(_QWORD *)v385 = v144;
              bzero(v374, 0x30000uLL);
              v145 = *(_DWORD *)(*(_QWORD *)(v400 + 1104) + 36);
              v146 = *v379 << v145;
              v147 = *v378 << v145;
              *(_DWORD *)(v126 + 16) = v406;
              if (v147 >= v142[3933])
                v147 = v142[3933];
              *(_DWORD *)v126 = v146;
              *(_DWORD *)(v126 + 4) = v147;
              v148 = v142[v138 + 9991] << v145;
              v149 = v142[v138 + 9992] << v145;
              *(_DWORD *)(v126 + 20) = v138;
              if (v149 >= v142[3934])
                v149 = v142[3934];
              *(_DWORD *)(v126 + 8) = v148;
              *(_DWORD *)(v126 + 12) = v149;
              *(_DWORD *)(v126 + 2884) = v142[3954];
              v150 = *(unsigned __int8 **)v143;
              v151 = *(_QWORD *)(v143 + 8);
              if (v151 - 1 >= (unint64_t)(a3 - v150))
              {
                *(_DWORD *)v116 = v146;
                aom_internal_error(v387, 7, "Truncated packet or corrupt tile length");
              }
              if (v150 || !v151)
              {
                v156 = v403 + 21408 * v138;
                *(_QWORD *)(v156 + 72) = 0xFFF180007FFFFFFFLL;
                v157 = v156 + 72;
                *v144 = v150;
                *(_QWORD *)(v157 - 40) = &v150[v151];
                *(_QWORD *)(v157 - 32) = v150;
                *(_DWORD *)(v157 - 24) = -14;
                *(_QWORD *)(v157 - 8) = v150;
                v158 = v151;
                *(_QWORD *)(v157 - 16) = &v150[v151];
                if (!(_DWORD)v151)
                {
                  v159 = 0x7FFFFFFF;
                  v163 = -15;
                  v8 = v380;
                  v152 = v382;
                  v153 = v400;
                  v155 = v366;
                  goto LABEL_232;
                }
                v159 = (*v150 << 23) ^ 0x7FFFFFFF;
                v160 = v151 > 1uLL;
                if (v151 < 2uLL)
                {
                  v163 = -7;
                  ++v150;
                  v8 = v380;
                  v152 = v382;
                  v153 = v400;
                  v155 = v366;
                  if (!v160)
                    goto LABEL_232;
                }
                else
                {
                  v159 ^= v150[1] << 15;
                  v161 = v151 != 2;
                  v8 = v380;
                  v153 = v400;
                  if (v158 == 2)
                  {
                    v150 += 2;
                    v163 = 1;
                    v155 = v366;
                    v152 = v382;
                    if (v161)
                      goto LABEL_233;
                  }
                  else
                  {
                    v159 ^= v150[2] << 7;
                    v150 += 3;
                    v162 = v158 > 3;
                    v163 = 9;
                    v155 = v366;
                    v152 = v382;
                    if (v162)
                      goto LABEL_233;
                  }
LABEL_232:
                  *(_DWORD *)(v157 - 24) = (__int16)(16370 - v163);
                  v163 = 0x4000;
                }
LABEL_233:
                *(_DWORD *)v157 = v159;
                *(_WORD *)(v157 + 6) = v163;
                *(_QWORD *)(v157 - 8) = v150;
                v116 = v386;
                v154 = v370;
                goto LABEL_234;
              }
              *(_DWORD *)v116 = *(_DWORD *)v126;
              aom_internal_error(v387, 2, "Failed to allocate BOOL decoder %d", 1);
              v8 = v380;
              v152 = v382;
              v153 = v400;
              v154 = v370;
              v155 = v366;
LABEL_234:
              *(_BYTE *)(v403 + 21408 * v138 + 80) = v367;
              v164 = *(_QWORD *)(v153 + 1104);
              if (*(_BYTE *)(v164 + 77))
              {
                if (*(_BYTE *)(v116 + 16))
                {
                  v165 = v154[1];
                  v166 = v368;
                  *v369 = *v154;
                  v369[1] = v165;
                  v167 = v383;
                }
                else
                {
                  v180 = v155[1];
                  v166 = v368;
                  *v369 = *v155;
                  v369[1] = v180;
                  v167 = v152;
                }
                memcpy(v166, v167, 0x4C0uLL);
              }
              else
              {
                if (*(_BYTE *)(v116 + 16))
                  v168 = v154;
                else
                  v168 = v155;
                if (*(_BYTE *)(v116 + 16))
                  v169 = v383;
                else
                  v169 = v152;
                v170 = v168[1];
                *v369 = *v168;
                v369[1] = v170;
                v171 = v154;
                v172 = v152;
                v173 = v155;
                memcpy(v368, v169, 0x4C0uLL);
                v174 = v363;
                if (*v364)
                {
                  v175 = v362;
                }
                else
                {
                  v174 = v173;
                  v175 = v172;
                }
                v176 = v174[1];
                *v361 = *v174;
                v361[1] = v176;
                memcpy(v360, v175, 0x4C0uLL);
                if (*v365)
                {
                  v177 = v171[1];
                  v178 = v358;
                  *v359 = *v171;
                  v359[1] = v177;
                  v179 = v383;
                }
                else
                {
                  v181 = v173[1];
                  v178 = v358;
                  *v359 = *v173;
                  v359[1] = v181;
                  v179 = v382;
                }
                memcpy(v178, v179, 0x4C0uLL);
                v141 = v138;
              }
              v116 = v386;
              *(_DWORD *)(v386 + 8) = *(_DWORD *)(v8 + 15780);
              *(_QWORD *)(v126 + 2896) = *(_QWORD *)(v8 + 15248);
              bzero(v373, 0x800uLL);
              bzero(v372, 0x800uLL);
              *(_QWORD *)(v375 + 143) = *(_QWORD *)(v164 + 96);
              *(_DWORD *)(v375 + 139) = 0;
              *(_DWORD *)(v375 + 151) = 0;
              *v371 = 0;
              *(_WORD *)v375 = 0;
              v182 = *(unsigned __int8 *)(v164 + 77);
              v31 = v377;
              *(_QWORD *)(v126 + 128) = *(_QWORD *)(v377[1] + 8 * v399);
              if (!v182)
              {
                v183 = v377[3];
                *(_QWORD *)(v126 + 136) = *(_QWORD *)(v377[2] + 8 * v399);
                *(_QWORD *)(v126 + 144) = *(_QWORD *)(v183 + 8 * v399);
              }
              *(_QWORD *)(v126 + 248) = *(_QWORD *)(*v377 + 8 * v399);
              *(_QWORD *)(v126 + 288) = *(_QWORD *)(v377[4] + 8 * v399);
              memcpy((void *)(v403 + 21408 * v141 + 96), *(const void **)(v400 + 1112), 0x52FCuLL);
              *(_QWORD *)(v126 + 2808) = v403 + 21408 * v141 + 96;
              decode_tile(v8, v386, v406, v138);
              v184 = *(_DWORD *)(v8 + 15056) | *(_DWORD *)(v375 + 183);
              *(_DWORD *)(v8 + 15056) = v184;
              v11 = v391;
              v7 = a6;
              v127 = a5;
              v132 = v389;
              v133 = v388;
              if (v184)
              {
                aom_internal_error(v387, 7, "Failed to decode tile data");
                v133 = v388;
                v132 = v389;
              }
LABEL_207:
              ++v137;
              --v136;
            }
            while (v132 != v137);
            v131 = v355 + 1;
            v117 = v352;
            if (v355 + 1 == v350)
            {
              if (v11[145])
              {
                v27 = v338;
                v9 = v340;
                v43 = v348;
                if (v336 != 1)
                  goto LABEL_122;
LABEL_427:
                v185 = *(_QWORD *)(v385 + 128) + 24;
LABEL_430:
                v43 = *(unsigned __int8 **)(v185 + 8);
                goto LABEL_122;
              }
              v185 = *(_QWORD *)(v385 + 128) + 21408 * v7 + 24;
              v9 = v340;
LABEL_429:
              v27 = v338;
              goto LABEL_430;
            }
          }
        }
      }
      else
      {
        *(_QWORD *)(v385 + 128) = 0;
      }
      aom_internal_error(*(_QWORD *)(v8 + 15248), 2, "Failed to allocate pbi->tile_data");
      v122 = v352 * v57;
      goto LABEL_192;
    }
LABEL_121:
    v43 = a2;
    goto LABEL_122;
  }
  if (!v30)
  {
    v337 = v27;
    v52 = 0;
    v54 = 0;
    v45 = *v11;
    v46 = v11[1];
    v47 = v46 * *v11;
    v53 = v46;
    v55 = *v11;
    goto LABEL_103;
  }
  if (!v10[26])
  {
    v30 = 1;
    v57 = *v11;
    v56 = v11[1];
    v59 = v10[6];
    v58 = v10[7];
    goto LABEL_69;
  }
  v337 = v27;
  v45 = *v11;
  v46 = v11[1];
  v47 = v46 * *v11;
  v49 = v10[6];
  v48 = v10[7];
  if (v48 >= (int)*v11)
    v50 = *v11;
  else
    v50 = v10[7];
  if (v49 >= v46)
    v51 = v11[1];
  else
    v51 = v10[6];
  v52 = v51 & ~(v49 >> 31);
  if (v49 >= 0)
    v53 = v51 + 1;
  else
    v53 = v11[1];
  v54 = v50 & ~(v48 >> 31);
  if (v48 >= 0)
    v55 = v50 + 1;
  else
    v55 = *v11;
LABEL_103:
  if (v29 > v44)
    v68 = (v44 + 1);
  else
    v68 = v29;
  if (v53 <= v52 || v55 <= v54 || v54 + v52 * v45 > a6 || v55 + (v53 - 1) * v45 <= a5)
  {
    v8 = v380;
    v31 = v377;
    v7 = a6;
    v43 = a2;
    v27 = v337;
    goto LABEL_122;
  }
  v402 = v68;
  v405 = v47;
  decode_mt_init(v380);
  if (v11[145])
  {
    v347 = get_ls_tile_buffers((_DWORD *)v380, a2, a3, (_QWORD *)(v380 + 298256));
  }
  else
  {
    get_tile_buffers_0(v380, a2, (unint64_t)a3, v380 + 298256, a5, a6);
    v347 = 0;
  }
  v289 = v385;
  v290 = *(_QWORD *)(v385 + 128);
  v291 = v405;
  if (v290)
  {
    if (v405 == *(_DWORD *)(v385 + 136))
      goto LABEL_445;
    free(*(void **)(v290 - 8));
    v291 = v405;
    v289 = v385;
  }
  *(_DWORD *)(v289 + 136) = 0;
  v292 = 21408 * v291;
  if (v292 > 0x1FFFFFFD9 || (v293 = malloc_type_malloc(v292 + 39, 0x70F2D1FBuLL)) == 0)
  {
    *(_QWORD *)(v289 + 128) = 0;
LABEL_440:
    aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate pbi->tile_data");
    goto LABEL_441;
  }
  v294 = ((unint64_t)v293 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v294 - 8) = v293;
  *(_QWORD *)(v289 + 128) = v294;
  if (!v294)
    goto LABEL_440;
LABEL_441:
  *(_DWORD *)(v385 + 136) = v405;
  if (v405 >= 1)
  {
    v295 = 0;
    do
    {
      v296 = (_OWORD *)(*(_QWORD *)(v385 + 128) + v295);
      v296[1337] = 0uLL;
      v296[1336] = 0uLL;
      v296[1335] = 0uLL;
      v296[1334] = 0uLL;
      v295 += 21408;
    }
    while (21408 * v405 != v295);
  }
  v9[1] = 0;
LABEL_445:
  v393 = v11;
  if (!*(_QWORD *)(v380 + 10768))
  {
    v297 = malloc_type_malloc(0x8017uLL, 0x70F2D1FBuLL);
    if (!v297)
    {
      *(_QWORD *)(v380 + 10768) = 0;
LABEL_451:
      aom_internal_error(*(_QWORD *)(v380 + 15248), 2, "Failed to allocate pbi->dcb.xd.seg_mask");
      goto LABEL_452;
    }
    v298 = ((unint64_t)v297 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v298 - 8) = v297;
    *(_QWORD *)(v380 + 10768) = v298;
    if (!v298)
      goto LABEL_451;
  }
LABEL_452:
  v341 = v9;
  if (v46 >= 1 && v45 >= 1)
  {
    v299 = 0;
    v300 = *(_DWORD *)(*(_QWORD *)(v400 + 1104) + 36);
    v301 = *(_DWORD *)(v380 + 15732);
    v302 = *(_DWORD *)(v380 + 15736);
    v303 = *(_QWORD *)(v385 + 128) + 12;
    v304 = 21408 * (int)*v11;
    v305 = v380 + 40224;
    do
    {
      v306 = 0;
      v307 = v299;
      v308 = (_DWORD *)(v305 + 4 * v299++);
      v309 = 0x100000000;
      v310 = (_DWORD *)v303;
      do
      {
        v311 = *v308 << v300;
        v312 = *(_DWORD *)(v305 + 4 * v299) << v300;
        v310[1] = v307;
        if (v312 >= v301)
          v312 = v301;
        *(v310 - 3) = v311;
        *(v310 - 2) = v312;
        v313 = *(_DWORD *)(v380 + 39964 + 4 * v306) << v300;
        v314 = *(_DWORD *)(v380 + (v309 >> 30) + 39964) << v300;
        v310[2] = v306;
        *(v310 - 1) = v313;
        if (v314 >= v302)
          v315 = v302;
        else
          v315 = v314;
        *v310 = v315;
        ++v306;
        v309 += 0x100000000;
        v310 += 5352;
      }
      while (v45 != v306);
      v303 += v304;
    }
    while (v299 != v46);
  }
  tile_mt_queue(v380, v45, v46, v52, v53, v54, v55, a5, a6);
  if ((int)v402 <= 0)
  {
    *(_DWORD *)(v380 + 15056) = 0;
    v8 = v380;
    v9 = v341;
    v31 = v377;
  }
  else
  {
    v316 = (_QWORD *)v377[89];
    v317 = (void **)v377[91];
    memcpy(*v317, (const void *)v380, 0x3B60uLL);
    v318 = *v317;
    v318[3764] = 0;
    *((_QWORD *)v318 + 1883) = *((_QWORD *)v318 + 32109);
    *((_QWORD *)*v317 + 1884) = *((_QWORD *)*v317 + 32110);
    *(_OWORD *)((char *)*v317 + 15032) = *(_OWORD *)((char *)*v317 + 256904);
    *((_QWORD *)*v317 + 1881) = *((_QWORD *)*v317 + 32115);
    off_253EA52D0[0]();
    v319 = tile_worker_hook_0;
    v316[3] = tile_worker_hook_0;
    v316[4] = v317;
    v316[5] = v380;
    if ((_DWORD)v402 != 1)
    {
      v320 = 0;
      v321 = v402 - 1;
      v322 = 424;
      do
      {
        v323 = (_QWORD *)(v377[89] + v320);
        v324 = (void **)(v377[91] + v322);
        v325 = v319;
        memcpy(*v324, (const void *)v380, 0x3B60uLL);
        v326 = *v324;
        v327 = *((_QWORD *)*v324 + 32109);
        v326[3764] = 0;
        *((_QWORD *)v326 + 1883) = v327;
        *((_QWORD *)*v324 + 1884) = *((_QWORD *)*v324 + 32110);
        v328 = (char *)*v324;
        v329 = *((_QWORD *)*v324 + 32111);
        *(_OWORD *)(v328 + 15032) = *(_OWORD *)((char *)*v324 + 256904);
        *((_QWORD *)v328 + 1346) = v329;
        *((_QWORD *)*v324 + 1881) = *((_QWORD *)*v324 + 32115);
        off_253EA52D0[0]();
        v319 = v325;
        v323[10] = v325;
        v323[11] = v324;
        v320 += 56;
        v322 += 424;
        v323[12] = v380;
        --v321;
      }
      while (v321);
    }
    v330 = v402 + 1;
    v31 = v377;
    do
    {
      v331 = v377[89] + 56 * (v330 - 2);
      *(_QWORD *)(*(_QWORD *)(v331 + 32) + 8) = a3;
      *(_DWORD *)(v331 + 48) = 0;
      v332 = off_253EA52E0;
      if ((_DWORD)v330 != 2)
        v332 = off_253EA52D8;
      (*v332)();
      --v330;
    }
    while (v330 > 1);
    v333 = 0;
    v334 = v402 + 1;
    v8 = v380;
    v11 = v393;
    v9 = v341;
    do
    {
      off_253EA52D0[0]();
      v333 |= v335 == 0;
      --v334;
    }
    while (v334 > 1);
    *(_DWORD *)(v380 + 15056) = v333;
    if (v333)
      aom_internal_error(v380 + 390860, 7, "Failed to decode tile data");
  }
  v7 = a6;
  v27 = v337;
  if (!v11[145])
  {
    v185 = *(_QWORD *)(v385 + 128) + 21408 * a6 + 24;
    goto LABEL_430;
  }
  v43 = v347;
  if (v405 == 1)
    goto LABEL_427;
LABEL_122:
  *a4 = v43;
  if (!v27)
    goto LABEL_158;
  v70 = *(_QWORD *)(v400 + 1104);
  v71 = *(_QWORD *)(v8 + 7960);
  if (!*(_BYTE *)(v70 + 76))
  {
    if (*(int *)(v71 + 28) > 0)
    {
      v78 = 0;
      do
      {
        memset((void *)(*(_QWORD *)(v71 + 48) + *(int *)(v71 + 36) * (uint64_t)v78++), 128, *(int *)(v71 + 20));
        v79 = *(_DWORD *)(v71 + 28);
      }
      while (v78 < v79);
      if (v79 >= 1)
      {
        v80 = 0;
        do
          memset((void *)(*(_QWORD *)(v71 + 56) + *(int *)(v71 + 36) * (uint64_t)v80++), 128, *(int *)(v71 + 20));
        while (v80 < *(_DWORD *)(v71 + 28));
      }
    }
    goto LABEL_158;
  }
  v72 = *(_DWORD *)(v71 + 28);
  if (v72 < 1)
    goto LABEL_158;
  v73 = 1 << (*(_DWORD *)(v70 + 72) - 1);
  v74 = (int16x8_t *)(2 * *(_QWORD *)(v71 + 48));
  v75 = *(int *)(v71 + 20);
  if ((_DWORD)v75)
  {
    if (v75 >= 0x10)
    {
      v76 = v75 & 0xFFFFFFFFFFFFFFF0;
      v77 = &v74->i16[v75 & 0xFFFFFFFFFFFFFFF0];
      v81 = vdupq_n_s16(v73);
      v82 = v74 + 1;
      v83 = v75 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v82[-1] = v81;
        *v82 = v81;
        v82 += 2;
        v83 -= 16;
      }
      while (v83);
      if (v76 == v75)
        goto LABEL_140;
    }
    else
    {
      v76 = 0;
      v77 = (__int16 *)(2 * *(_QWORD *)(v71 + 48));
    }
    v84 = v75 - v76;
    do
    {
      *v77++ = v73;
      --v84;
    }
    while (v84);
LABEL_140:
    v72 = *(_DWORD *)(v71 + 28);
  }
  if (v72 > 1)
  {
    for (i = 1; i < v72; ++i)
    {
      memcpy((char *)v74 + 2 * *(_DWORD *)(v71 + 36) * i, v74, 2 * *(int *)(v71 + 20));
      v72 = *(_DWORD *)(v71 + 28);
    }
    v7 = a6;
  }
  if (v72 >= 1)
  {
    v86 = (int16x8_t *)(2 * *(_QWORD *)(v71 + 56));
    v87 = *(int *)(v71 + 20);
    if (!(_DWORD)v87)
      goto LABEL_155;
    if (v87 >= 0x10)
    {
      v88 = v87 & 0xFFFFFFFFFFFFFFF0;
      v89 = &v86->i16[v87 & 0xFFFFFFFFFFFFFFF0];
      v90 = vdupq_n_s16(v73);
      v91 = v86 + 1;
      v92 = v87 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v91[-1] = v90;
        *v91 = v90;
        v91 += 2;
        v92 -= 16;
      }
      while (v92);
      if (v88 == v87)
        goto LABEL_154;
    }
    else
    {
      v88 = 0;
      v89 = (__int16 *)(2 * *(_QWORD *)(v71 + 56));
    }
    v93 = v87 - v88;
    do
    {
      *v89++ = v73;
      --v93;
    }
    while (v93);
LABEL_154:
    v72 = *(_DWORD *)(v71 + 28);
LABEL_155:
    if (v72 >= 2)
    {
      v94 = 1;
      do
        memcpy((char *)v86 + 2 * *(_DWORD *)(v71 + 36) * v94++, v86, 2 * *(int *)(v71 + 20));
      while (v94 < *(_DWORD *)(v71 + 28));
    }
  }
LABEL_158:
  v95 = *v11 * v11[1] - 1 == v7;
  v96 = v400;
  if (!v95)
    return;
  v97 = (pthread_mutex_t **)(v31 + 84);
  av1_alloc_cdef_buffers((uint64_t)v357, v31 + 88, (uint64_t)(v31 + 84), *((_DWORD *)v31 + 180), 1);
  if (*((int *)v31 + 180) >= 1 && !*v97)
  {
    v99 = malloc_type_malloc(0x57uLL, 0x70F2D1FBuLL);
    if (v99)
    {
      v100 = v99;
      v101 = (pthread_mutex_t *)(((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFFFF0);
      *(_QWORD *)&v101[-1].__opaque[48] = v100;
      *v97 = v101;
      if (v101)
      {
LABEL_167:
        pthread_mutex_init(v101, 0);
        goto LABEL_168;
      }
    }
    else
    {
      *v97 = 0;
    }
    aom_internal_error(*(_QWORD *)(v8 + 15248), 2, "Failed to allocate cdef_sync->mutex_");
    v101 = *v97;
    if (*v97)
      goto LABEL_167;
  }
LABEL_168:
  v102 = v356;
  if (!v356[4] && !v11[146])
  {
    v103 = v343;
    if (*v343)
    {
      av1_loop_filter_frame_mt(*(_QWORD *)(v8 + 15432) + 1248, (uint64_t)v357, v8, 0, v342, 0, v31[89], *((_DWORD *)v31 + 180), v8 + 40728, 0);
      v103 = v343;
      v102 = v356;
    }
    if (v9[19] || v102[7])
      v104 = 0;
    else
      v104 = *(_DWORD *)(v400 + 128) || *(_DWORD *)v400 || *(_DWORD *)(v400 + 64) != 0;
    v105 = (*(_DWORD *)(v8 + 15256) == *(_DWORD *)(v8 + 15272)) & ~v104;
    if (v103[8] || v103[24])
    {
      v106 = 1;
      v102 = v356;
      if (((*(_DWORD *)(v8 + 15256) == *(_DWORD *)(v8 + 15272)) & ~v104) != 0)
      {
LABEL_178:
        v96 = v400;
        if (!v106)
          goto LABEL_292;
        v107 = *((_DWORD *)v31 + 180);
        v108 = *(_QWORD *)(v8 + 7960);
        if (v107 >= 2)
        {
          v109 = v31[89];
          v110 = v8 + 40856;
          v111 = (_DWORD *)(v8 + 40984);
          v112 = (uint64_t)v357;
LABEL_288:
          av1_loop_restoration_filter_frame_mt(v108, v112, v105, v109, v107, v110, v111, 0);
LABEL_291:
          v102 = v356;
          goto LABEL_292;
        }
        v194 = v8 + 40984;
        v195 = (uint64_t)v357;
        goto LABEL_290;
      }
    }
    else
    {
      v106 = v103[40] != 0;
      v102 = v356;
      if (((*(_DWORD *)(v8 + 15256) == *(_DWORD *)(v8 + 15272)) & ~v104) != 0)
        goto LABEL_178;
    }
    if (v106)
    {
      av1_loop_restoration_save_boundary_lines(*(_QWORD *)(v8 + 15432) + 1248, (uint64_t)v357, 0, v98);
      if (!v104)
        goto LABEL_276;
    }
    else if (!v104)
    {
LABEL_276:
      if (*(_DWORD *)(v8 + 15256) == *(_DWORD *)(v8 + 15272))
        goto LABEL_277;
LABEL_285:
      *(double *)v98.i64 = av1_superres_upscale((uint64_t)v357, *((_QWORD *)v11 + 74), 0, *(double *)v98.i64);
      v102 = v356;
      v96 = v400;
      if (!v106)
        goto LABEL_292;
      goto LABEL_286;
    }
    v193 = *((_DWORD *)v31 + 180);
    if (v193 < 2)
    {
      av1_cdef_frame(*(_QWORD *)(v8 + 15432) + 1248, (uint64_t)v357, v8, (uint64_t (*)(void))av1_cdef_init_fb_row);
      if (*(_DWORD *)(v8 + 15256) != *(_DWORD *)(v8 + 15272))
        goto LABEL_285;
    }
    else
    {
      av1_cdef_frame_mt(v357, v8, (_QWORD *)v31[88], v31[89], (uint64_t)(v31 + 84), v193, (uint64_t)av1_cdef_init_fb_row_mt, 0);
      if (*(_DWORD *)(v8 + 15256) != *(_DWORD *)(v8 + 15272))
        goto LABEL_285;
    }
LABEL_277:
    v102 = v356;
    v96 = v400;
    if (!v106)
      goto LABEL_292;
LABEL_286:
    av1_loop_restoration_save_boundary_lines(*(_QWORD *)(v8 + 15432) + 1248, (uint64_t)v357, 1, v98);
    v107 = *((_DWORD *)v31 + 180);
    v108 = *(_QWORD *)(v8 + 7960);
    if (v107 >= 2)
    {
      v109 = v31[89];
      v110 = v8 + 40856;
      v111 = (_DWORD *)(v8 + 40984);
      v112 = (uint64_t)v357;
      goto LABEL_288;
    }
    v194 = v8 + 40984;
    v195 = (uint64_t)v357;
LABEL_290:
    av1_loop_restoration_filter_frame(v108, v195, v105, v194);
    goto LABEL_291;
  }
LABEL_292:
  if (*(_DWORD *)(v8 + 15056))
  {
    aom_internal_error(v8 + 390860, 7, "Decode failed. Frame data is corrupted.");
    if (!v11[145])
      goto LABEL_294;
LABEL_300:
    if (!*(_DWORD *)(v8 + 15680))
      return;
    goto LABEL_301;
  }
  if (v102[24] == 1)
  {
    memcpy(*(void **)(v96 + 1112), (const void *)(*(_QWORD *)(v385 + 128) + 21408 * v9[18] + 96), 0x52FCuLL);
    av1_reset_cdf_symbol_counters(*(_WORD **)(v96 + 1112));
    if (v11[145])
      goto LABEL_300;
  }
  else if (v11[145])
  {
    goto LABEL_300;
  }
LABEL_294:
  memcpy((void *)(*(_QWORD *)(v8 + 15432) + 1480), *(const void **)(v96 + 1112), 0x52FCuLL);
  if (!*(_DWORD *)(v8 + 15680))
    return;
LABEL_301:
  if (!*(_DWORD *)(*(_QWORD *)(v96 + 1104) + 40))
    ++*(_DWORD *)(v8 + 15216);
}

uint64_t reset_ref_frame_map(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 25296);
  v3 = *(_QWORD *)(result + 416);
  if (v3)
  {
    v4 = (*(_DWORD *)v3)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v3 + 1224))
      {
        v5 = (_QWORD *)(v3 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v3 + 1224);
        v5[1] = 0;
        v5[2] = 0;
        *v5 = 0;
      }
    }
  }
  v1[52] = 0;
  v6 = v1[53];
  if (v6)
  {
    v4 = (*(_DWORD *)v6)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v6 + 1224))
      {
        v7 = (_QWORD *)(v6 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v6 + 1224);
        v7[1] = 0;
        v7[2] = 0;
        *v7 = 0;
      }
    }
  }
  v1[53] = 0;
  v8 = v1[54];
  if (v8)
  {
    v4 = (*(_DWORD *)v8)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v8 + 1224))
      {
        v9 = (_QWORD *)(v8 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v8 + 1224);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
      }
    }
  }
  v1[54] = 0;
  v10 = v1[55];
  if (v10)
  {
    v4 = (*(_DWORD *)v10)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v10 + 1224))
      {
        v11 = (_QWORD *)(v10 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v10 + 1224);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
      }
    }
  }
  v1[55] = 0;
  v12 = v1[56];
  if (v12)
  {
    v4 = (*(_DWORD *)v12)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v12 + 1224))
      {
        v13 = (_QWORD *)(v12 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v12 + 1224);
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
      }
    }
  }
  v1[56] = 0;
  v14 = v1[57];
  if (v14)
  {
    v4 = (*(_DWORD *)v14)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v14 + 1224))
      {
        v15 = (_QWORD *)(v14 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v14 + 1224);
        v15[1] = 0;
        v15[2] = 0;
        *v15 = 0;
      }
    }
  }
  v1[57] = 0;
  v16 = v1[58];
  if (v16)
  {
    v4 = (*(_DWORD *)v16)-- == 1;
    if (v4)
    {
      if (*(_QWORD *)(v16 + 1224))
      {
        v17 = (_QWORD *)(v16 + 1224);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v16 + 1224);
        v17[1] = 0;
        v17[2] = 0;
        *v17 = 0;
      }
    }
  }
  v1[58] = 0;
  v18 = v1[59];
  if (v18 && (v4 = *(_DWORD *)v18 == 1, --*(_DWORD *)v18, v4) && *(_QWORD *)(v18 + 1224))
  {
    v19 = (_QWORD *)(v18 + 1224);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 80))(*(_QWORD *)(v2 + 64), v18 + 1224);
    v19[1] = 0;
    v19[2] = 0;
    *v19 = 0;
    v1[59] = 0;
  }
  else
  {
    v1[59] = 0;
  }
  return result;
}

double setup_frame_size_0(uint64_t a1, int a2, uint64_t *a3)
{
  int *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  void (*v30)(uint64_t);
  int v31;
  void (*v32)(uint64_t);
  void (*v33)(uint64_t);
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  void (*v37)(uint64_t);
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  unsigned int i;
  int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  void (*v49)(uint64_t);
  int v50;
  unsigned int j;
  int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  void (*v55)(uint64_t);
  void (*v56)(uint64_t);

  v5 = *(int **)(a1 + 24680);
  if (!a2)
  {
    v13 = v5[2];
    v20 = v5[3];
    goto LABEL_23;
  }
  v6 = v5[1];
  if (*v5 < 1)
  {
    v7 = 0;
    v13 = 1;
    if (v6 >= 1)
      goto LABEL_10;
  }
  else
  {
    v7 = 0;
    v8 = *v5 + 1;
    do
    {
      while (1)
      {
        v10 = *((unsigned int *)a3 + 4);
        v11 = (unsigned __int8 *)(*a3 + (v10 >> 3));
        if ((unint64_t)v11 >= a3[1])
          break;
        v9 = (*v11 >> (~(_BYTE)v10 & 7)) & 1;
        *((_DWORD *)a3 + 4) = v10 + 1;
        v7 |= v9 << (v8-- - 2);
        if (v8 <= 1)
          goto LABEL_9;
      }
      v12 = (void (*)(uint64_t))a3[4];
      if (v12)
        v12(a3[3]);
      --v8;
    }
    while (v8 > 1);
LABEL_9:
    v13 = (v7 + 1);
    if (v6 >= 1)
    {
LABEL_10:
      v14 = 0;
      v15 = v6 + 1;
      do
      {
        while (1)
        {
          v17 = *((unsigned int *)a3 + 4);
          v18 = (unsigned __int8 *)(*a3 + (v17 >> 3));
          if ((unint64_t)v18 >= a3[1])
            break;
          v16 = (*v18 >> (~(_BYTE)v17 & 7)) & 1;
          *((_DWORD *)a3 + 4) = v17 + 1;
          v14 |= v16 << (v15-- - 2);
          if (v15 <= 1)
            goto LABEL_16;
        }
        v19 = (void (*)(uint64_t))a3[4];
        if (v19)
          v19(a3[3]);
        --v15;
      }
      while (v15 > 1);
LABEL_16:
      v20 = (v14 + 1);
      if (v7 >= v5[2])
        goto LABEL_22;
LABEL_21:
      if (v14 < v5[3])
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  v14 = 0;
  v20 = 1;
  if (v7 < v5[2])
    goto LABEL_21;
LABEL_22:
  aom_internal_error(*(_QWORD *)(a1 + 48), 7, "Frame dimensions are larger than the maximum values");
LABEL_23:
  *(_DWORD *)(a1 + 72) = v13;
  *(_DWORD *)(a1 + 76) = v20;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 66))
    goto LABEL_47;
  v21 = *((unsigned int *)a3 + 4);
  v22 = *a3;
  v23 = a3[1];
  v24 = (unsigned __int8 *)(*a3 + (v21 >> 3));
  if ((unint64_t)v24 >= v23)
  {
    v32 = (void (*)(uint64_t))a3[4];
    if (v32)
      v32(a3[3]);
    goto LABEL_31;
  }
  v25 = *v24;
  v26 = v21 + 1;
  *((_DWORD *)a3 + 4) = v21 + 1;
  if (((v25 >> (~(_BYTE)v21 & 7)) & 1) == 0)
  {
LABEL_31:
    *(_BYTE *)(a1 + 80) = 8;
    goto LABEL_47;
  }
  v27 = (unsigned __int8 *)(v22 + (v26 >> 3));
  if ((unint64_t)v27 >= v23)
  {
    v33 = (void (*)(uint64_t))a3[4];
    if (v33)
    {
      v33(a3[3]);
      v29 = 0;
      v26 = *((_DWORD *)a3 + 4);
      v22 = *a3;
      v23 = a3[1];
      v30 = (void (*)(uint64_t))(*a3 + (v26 >> 3));
      if ((unint64_t)v30 < v23)
        goto LABEL_28;
    }
    else
    {
      v29 = 0;
      v30 = (void (*)(uint64_t))(v22 + (v26 >> 3));
      if ((unint64_t)v30 < v23)
        goto LABEL_28;
    }
LABEL_34:
    v30 = (void (*)(uint64_t))a3[4];
    if (v30)
    {
      v30(a3[3]);
      LODWORD(v30) = 0;
      v26 = *((_DWORD *)a3 + 4);
      v22 = *a3;
      v23 = a3[1];
    }
    goto LABEL_36;
  }
  v28 = *v27 >> (~(_BYTE)v26 & 7);
  v26 = v21 + 2;
  *((_DWORD *)a3 + 4) = v21 + 2;
  v29 = 4 * (v28 & 1);
  v30 = (void (*)(uint64_t))(v22 + ((v21 + 2) >> 3));
  if ((unint64_t)v30 >= v23)
    goto LABEL_34;
LABEL_28:
  v31 = *(unsigned __int8 *)v30 >> (~(_BYTE)v26++ & 7);
  *((_DWORD *)a3 + 4) = v26;
  LODWORD(v30) = 2 * (v31 & 1);
LABEL_36:
  v34 = v30 | v29;
  v35 = (unsigned __int8 *)(v22 + (v26 >> 3));
  if ((unint64_t)v35 >= v23)
  {
    v37 = (void (*)(uint64_t))a3[4];
    if (v37)
      v37(a3[3]);
    v36 = 0;
  }
  else
  {
    v36 = (*v35 >> (~(_BYTE)v26 & 7)) & 1;
    *((_DWORD *)a3 + 4) = v26 + 1;
  }
  v38 = (v36 | v34) + 9;
  *(_BYTE *)(a1 + 80) = (v36 | v34) + 9;
  if ((int)v13 >= 16)
    v39 = 16;
  else
    v39 = v13;
  v40 = (int)(8 * v13 + (v38 >> 1)) / v38;
  if (v40 <= v39)
    v13 = v39;
  else
    v13 = v40;
LABEL_47:
  resize_context_buffers_0(a1, v13, v20);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 72);
  v41 = *((unsigned int *)a3 + 4);
  v42 = (unsigned __int8 *)(*a3 + (v41 >> 3));
  if ((unint64_t)v42 >= a3[1])
  {
    v56 = (void (*)(uint64_t))a3[4];
    if (v56)
      v56(a3[3]);
  }
  else
  {
    v43 = *v42;
    *((_DWORD *)a3 + 4) = v41 + 1;
    if (((v43 >> (~(_BYTE)v41 & 7)) & 1) != 0)
    {
      v44 = 0;
      for (i = 17; i > 1; --i)
      {
        while (1)
        {
          v47 = *((unsigned int *)a3 + 4);
          v48 = (unsigned __int8 *)(*a3 + (v47 >> 3));
          if ((unint64_t)v48 >= a3[1])
            break;
          v46 = (*v48 >> (~(_BYTE)v47 & 7)) & 1;
          *((_DWORD *)a3 + 4) = v47 + 1;
          v44 |= v46 << (i-- - 2);
          if (i <= 1)
            goto LABEL_55;
        }
        v49 = (void (*)(uint64_t))a3[4];
        if (v49)
          v49(a3[3]);
      }
LABEL_55:
      v50 = 0;
      *(_DWORD *)(a1 + 64) = v44 + 1;
      for (j = 17; j > 1; --j)
      {
        while (1)
        {
          v53 = *((unsigned int *)a3 + 4);
          v54 = (unsigned __int8 *)(*a3 + (v53 >> 3));
          if ((unint64_t)v54 >= a3[1])
            break;
          v52 = (*v54 >> (~(_BYTE)v53 & 7)) & 1;
          *((_DWORD *)a3 + 4) = v53 + 1;
          v50 |= v52 << (j-- - 2);
          if (j <= 1)
            goto LABEL_61;
        }
        v55 = (void (*)(uint64_t))a3[4];
        if (v55)
          v55(a3[3]);
      }
LABEL_61:
      *(_DWORD *)(a1 + 68) = v50 + 1;
    }
  }
  return setup_buffer_pool(a1);
}

double resize_context_buffers_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  double result;

  if ((int)a2 > 0x4000 || (int)a3 > 0x4000)
  {
    aom_internal_error(*(_QWORD *)(a1 + 48), 7, "Dimensions of %dx%d beyond allowed size of %dx%d.", a2, a3, 0x4000, 0x4000);
    if (*(_DWORD *)(a1 + 56) != (_DWORD)a2)
      goto LABEL_7;
LABEL_6:
    if (*(_DWORD *)(a1 + 60) == (_DWORD)a3)
      goto LABEL_13;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 56) == (_DWORD)a2)
    goto LABEL_6;
LABEL_7:
  if (*(_DWORD *)(a1 + 536) >= ((int)a2 + 3) >> 2 && *(_DWORD *)(a1 + 532) >= ((int)a3 + 3) >> 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 608))(a1 + 520, a2, a3, 0);
  }
  else if (av1_alloc_context_buffers(a1))
  {
    *(_QWORD *)(a1 + 56) = 0;
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate context buffers");
  }
  (*(void (**)(uint64_t))(a1 + 600))(a1 + 520);
  *(_DWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 60) = a3;
LABEL_13:
  v6 = *(_QWORD *)(a1 + 232);
  v7 = *(_QWORD *)(v6 + 72);
  if (v7)
  {
    if (*(_DWORD *)(v6 + 260) == *(_DWORD *)(a1 + 532) && *(_DWORD *)(v6 + 264) == *(_DWORD *)(a1 + 536))
      goto LABEL_29;
    free(*(void **)(v7 - 8));
  }
  v8 = *(_DWORD *)(a1 + 532);
  *(_DWORD *)(v6 + 260) = v8;
  v9 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)(v6 + 264) = v9;
  v10 = ((v9 + 1) >> 1) * ((v8 + 1) >> 1);
  if (v10 <= 0x3FFFFFFD)
  {
    v11 = 8 * v10;
    v12 = malloc_type_malloc(v11 + 23, 0x70F2D1FBuLL);
    if (v12)
    {
      v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v13 - 8) = v12;
      if (v13)
      {
        bzero((void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0), v11);
        *(_QWORD *)(v6 + 72) = v13;
        v14 = *(_QWORD *)(v6 + 80);
        if (!v14)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
  }
  *(_QWORD *)(v6 + 72) = 0;
  aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate buf->mvs");
  v14 = *(_QWORD *)(v6 + 80);
  if (v14)
LABEL_23:
    free(*(void **)(v14 - 8));
LABEL_24:
  v15 = *(int *)(a1 + 536) * (uint64_t)*(int *)(a1 + 532);
  if ((v15 & 0x80000000) == 0
    && (v16 = malloc_type_malloc(v15 + 23, 0x70F2D1FBuLL)) != 0
    && (v17 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v17 - 8) = v16, v17))
  {
    bzero((void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF0), v15);
    *(_QWORD *)(v6 + 80) = v17;
  }
  else
  {
    *(_QWORD *)(v6 + 80) = 0;
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate buf->seg_map");
  }
LABEL_29:
  v18 = ((*(_DWORD *)(a1 + 532) + 32) >> 1) * (*(int *)(a1 + 580) >> 1);
  v19 = *(_QWORD *)(a1 + 25400);
  if (v19)
  {
    if (*(_DWORD *)(a1 + 25408) >= (signed int)v18)
      goto LABEL_38;
    free(*(void **)(v19 - 8));
  }
  if (v18 <= 0x3FFFFFFD
    && (v20 = malloc_type_malloc(8 * v18 + 23, 0x70F2D1FBuLL)) != 0
    && (v21 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v21 - 8) = v20, v21))
  {
    bzero((void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0), 8 * v18);
    *(_QWORD *)(a1 + 25400) = v21;
  }
  else
  {
    *(_QWORD *)(a1 + 25400) = 0;
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate cm->tpl_mvs");
  }
  *(_DWORD *)(a1 + 25408) = v18;
LABEL_38:
  result = *(double *)(a1 + 56);
  *(double *)(*(_QWORD *)(a1 + 232) + 268) = result;
  return result;
}

double setup_buffer_pool(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;
  int v7;

  v2 = *(_QWORD *)(a1 + 25296);
  v3 = *(_QWORD *)(a1 + 24680);
  pthread_mutex_lock((pthread_mutex_t *)v2);
  LOBYTE(v7) = 0;
  if (aom_realloc_frame_buffer(*(_QWORD *)(a1 + 232) + 1248, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(v3 + 96), *(_DWORD *)(v3 + 100), *(unsigned __int8 *)(v3 + 76), 64, *(_DWORD *)(a1 + 512), (_QWORD *)(*(_QWORD *)(a1 + 232) + 1224), *(uint64_t (**)(uint64_t))(v2 + 72), *(_QWORD *)(v2 + 64), v7, 0))
  {
    pthread_mutex_unlock((pthread_mutex_t *)v2);
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate frame buffer");
  }
  pthread_mutex_unlock((pthread_mutex_t *)v2);
  v4 = *(_QWORD *)(a1 + 232);
  *(_DWORD *)(v4 + 1384) = *(_DWORD *)(v3 + 72);
  *(_QWORD *)(v4 + 1388) = *(_QWORD *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 92);
  *(_DWORD *)(v4 + 1396) = *(_DWORD *)(v3 + 88);
  *(_BYTE *)(v4 + 1400) = *(_BYTE *)(v3 + 77);
  *(_DWORD *)(v4 + 1404) = *(_DWORD *)(v3 + 104);
  *(_DWORD *)(v4 + 1408) = v5;
  result = *(double *)(a1 + 64);
  *(double *)(v4 + 1412) = result;
  return result;
}

uint64_t segfeatures_copy(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(result + 4) = *(_WORD *)(a2 + 4);
  *(_WORD *)(result + 6) = *(_WORD *)(a2 + 6);
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(result + 10) = *(_WORD *)(a2 + 10);
  *(_WORD *)(result + 12) = *(_WORD *)(a2 + 12);
  *(_WORD *)(result + 14) = *(_WORD *)(a2 + 14);
  *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(result + 18) = *(_WORD *)(a2 + 18);
  *(_DWORD *)(result + 136) = *(_DWORD *)(a2 + 136);
  *(_WORD *)(result + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(result + 22) = *(_WORD *)(a2 + 22);
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(result + 26) = *(_WORD *)(a2 + 26);
  *(_WORD *)(result + 28) = *(_WORD *)(a2 + 28);
  *(_WORD *)(result + 30) = *(_WORD *)(a2 + 30);
  *(_WORD *)(result + 32) = *(_WORD *)(a2 + 32);
  *(_WORD *)(result + 34) = *(_WORD *)(a2 + 34);
  *(_DWORD *)(result + 140) = *(_DWORD *)(a2 + 140);
  *(_WORD *)(result + 36) = *(_WORD *)(a2 + 36);
  *(_WORD *)(result + 38) = *(_WORD *)(a2 + 38);
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(result + 42) = *(_WORD *)(a2 + 42);
  *(_WORD *)(result + 44) = *(_WORD *)(a2 + 44);
  *(_WORD *)(result + 46) = *(_WORD *)(a2 + 46);
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  *(_WORD *)(result + 50) = *(_WORD *)(a2 + 50);
  *(_DWORD *)(result + 144) = *(_DWORD *)(a2 + 144);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_WORD *)(result + 54) = *(_WORD *)(a2 + 54);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_WORD *)(result + 58) = *(_WORD *)(a2 + 58);
  *(_WORD *)(result + 60) = *(_WORD *)(a2 + 60);
  *(_WORD *)(result + 62) = *(_WORD *)(a2 + 62);
  *(_WORD *)(result + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(result + 66) = *(_WORD *)(a2 + 66);
  *(_DWORD *)(result + 148) = *(_DWORD *)(a2 + 148);
  *(_WORD *)(result + 68) = *(_WORD *)(a2 + 68);
  *(_WORD *)(result + 70) = *(_WORD *)(a2 + 70);
  *(_WORD *)(result + 72) = *(_WORD *)(a2 + 72);
  *(_WORD *)(result + 74) = *(_WORD *)(a2 + 74);
  *(_WORD *)(result + 76) = *(_WORD *)(a2 + 76);
  *(_WORD *)(result + 78) = *(_WORD *)(a2 + 78);
  *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
  *(_WORD *)(result + 82) = *(_WORD *)(a2 + 82);
  *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 152);
  *(_WORD *)(result + 84) = *(_WORD *)(a2 + 84);
  *(_WORD *)(result + 86) = *(_WORD *)(a2 + 86);
  *(_WORD *)(result + 88) = *(_WORD *)(a2 + 88);
  *(_WORD *)(result + 90) = *(_WORD *)(a2 + 90);
  *(_WORD *)(result + 92) = *(_WORD *)(a2 + 92);
  *(_WORD *)(result + 94) = *(_WORD *)(a2 + 94);
  *(_WORD *)(result + 96) = *(_WORD *)(a2 + 96);
  *(_WORD *)(result + 98) = *(_WORD *)(a2 + 98);
  *(_DWORD *)(result + 156) = *(_DWORD *)(a2 + 156);
  *(_WORD *)(result + 100) = *(_WORD *)(a2 + 100);
  *(_WORD *)(result + 102) = *(_WORD *)(a2 + 102);
  *(_WORD *)(result + 104) = *(_WORD *)(a2 + 104);
  *(_WORD *)(result + 106) = *(_WORD *)(a2 + 106);
  *(_WORD *)(result + 108) = *(_WORD *)(a2 + 108);
  *(_WORD *)(result + 110) = *(_WORD *)(a2 + 110);
  *(_WORD *)(result + 112) = *(_WORD *)(a2 + 112);
  *(_WORD *)(result + 114) = *(_WORD *)(a2 + 114);
  *(_DWORD *)(result + 160) = *(_DWORD *)(a2 + 160);
  *(_WORD *)(result + 116) = *(_WORD *)(a2 + 116);
  *(_WORD *)(result + 118) = *(_WORD *)(a2 + 118);
  *(_WORD *)(result + 120) = *(_WORD *)(a2 + 120);
  *(_WORD *)(result + 122) = *(_WORD *)(a2 + 122);
  *(_WORD *)(result + 124) = *(_WORD *)(a2 + 124);
  *(_WORD *)(result + 126) = *(_WORD *)(a2 + 126);
  *(_WORD *)(result + 128) = *(_WORD *)(a2 + 128);
  *(_WORD *)(result + 130) = *(_WORD *)(a2 + 130);
  *(_BYTE *)(result + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(result + 164) = *(_DWORD *)(a2 + 164);
  return result;
}

void *allocate_mc_tmp_buf(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  void *result;
  unint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  void **v24;

  v7 = a2 + 256872;
  v8 = a3;
  if (a3 < 0 || (v9 = malloc_type_malloc(a3 + 23, 0x70F2D1FBuLL)) == 0)
  {
    v10 = 0;
    if (!a4)
    {
LABEL_4:
      *(_QWORD *)v7 = v10;
      if (v10)
      {
        bzero((void *)v10, v8);
        if (a3 < 0)
          goto LABEL_28;
      }
      else
      {
        aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->mc_buf[ref]");
        bzero(*(void **)v7, v8);
        if (a3 < 0)
          goto LABEL_28;
      }
      v21 = malloc_type_malloc(v8 + 23, 0x70F2D1FBuLL);
      if (v21)
      {
        v22 = v21;
        v23 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF0);
        *(v23 - 1) = v22;
        *(_QWORD *)(v7 + 8) = v23;
        v24 = (void **)(v7 + 8);
        if (v23)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_28:
      *(_QWORD *)(v7 + 8) = 0;
      v24 = (void **)(v7 + 8);
LABEL_29:
      aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->mc_buf[ref]");
      v23 = *v24;
LABEL_30:
      bzero(v23, v8);
      *(_DWORD *)(v7 + 24) = a3;
      *(_DWORD *)(v7 + 28) = a4;
      v13 = malloc_type_malloc(0x8027uLL, 0x70F2D1FBuLL);
      if (!v13)
        goto LABEL_31;
      goto LABEL_16;
    }
  }
  else
  {
    v10 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v10 - 8) = v9;
    if (!a4)
      goto LABEL_4;
  }
  if (v10)
  {
    bzero((void *)v10, v8);
    *(_QWORD *)v7 = v10 >> 1;
    if (a3 < 0)
      goto LABEL_14;
  }
  else
  {
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate hbd_mc_buf");
    bzero(0, v8);
    *(_QWORD *)v7 = 0;
    if (a3 < 0)
    {
LABEL_14:
      aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate hbd_mc_buf");
      v12 = 0;
      goto LABEL_15;
    }
  }
  v11 = malloc_type_malloc(v8 + 23, 0x70F2D1FBuLL);
  if (!v11)
    goto LABEL_14;
  v12 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v12 - 8) = v11;
  if (!v12)
    goto LABEL_14;
LABEL_15:
  bzero((void *)v12, v8);
  *(_QWORD *)(v7 + 8) = v12 >> 1;
  *(_DWORD *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 28) = a4;
  v13 = malloc_type_malloc(0x8027uLL, 0x70F2D1FBuLL);
  if (!v13)
  {
LABEL_31:
    *(_QWORD *)(v7 + 32) = 0;
LABEL_32:
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->tmp_conv_dst");
    v15 = malloc_type_malloc(0x8017uLL, 0x70F2D1FBuLL);
    if (!v15)
      goto LABEL_33;
    goto LABEL_18;
  }
LABEL_16:
  v14 = ((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v14 - 8) = v13;
  *(_QWORD *)(v7 + 32) = v14;
  if (!v14)
    goto LABEL_32;
  v15 = malloc_type_malloc(0x8017uLL, 0x70F2D1FBuLL);
  if (!v15)
  {
LABEL_33:
    *(_QWORD *)(v7 + 16) = 0;
LABEL_34:
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->seg_mask");
    v17 = malloc_type_malloc(0x18017uLL, 0x70F2D1FBuLL);
    if (!v17)
      goto LABEL_35;
    goto LABEL_20;
  }
LABEL_18:
  v16 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v16 - 8) = v15;
  *(_QWORD *)(v7 + 16) = v16;
  if (!v16)
    goto LABEL_34;
  v17 = malloc_type_malloc(0x18017uLL, 0x70F2D1FBuLL);
  if (!v17)
  {
LABEL_35:
    *(_QWORD *)(v7 + 40) = 0;
LABEL_36:
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->tmp_obmc_bufs[i]");
    result = malloc_type_malloc(0x18017uLL, 0x70F2D1FBuLL);
    if (!result)
      goto LABEL_37;
    goto LABEL_22;
  }
LABEL_20:
  v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v18 - 8) = v17;
  *(_QWORD *)(v7 + 40) = v18;
  if (!v18)
    goto LABEL_36;
  result = malloc_type_malloc(0x18017uLL, 0x70F2D1FBuLL);
  if (!result)
  {
LABEL_37:
    *(_QWORD *)(v7 + 48) = 0;
    return (void *)aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->tmp_obmc_bufs[i]");
  }
LABEL_22:
  v20 = ((unint64_t)result + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v20 - 8) = result;
  *(_QWORD *)(v7 + 48) = v20;
  if (!v20)
    return (void *)aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate thread_data->tmp_obmc_bufs[i]");
  return result;
}

void decode_mt_init(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t *v37;
  _QWORD *v38;

  v2 = (int *)(a1 + 363880);
  v3 = a1 + 39880;
  if (!*(_DWORD *)(a1 + 41224))
  {
    v18 = *v2;
    v19 = *v2;
    if ((unint64_t)(56 * v18) <= 0x1FFFFFFE9
      && (v20 = malloc_type_malloc(56 * v18 + 23, 0x70F2D1FBuLL)) != 0)
    {
      v38 = (_QWORD *)(v3 + 1336);
      v21 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v21 - 8) = v20;
      *(_QWORD *)(v3 + 1336) = v21;
      if (v21)
      {
        if (v18 > 0x13521CF)
          goto LABEL_36;
LABEL_32:
        v22 = 424 * (int)v18;
        if (v22 <= 0x1FFFFFFE9)
        {
          v23 = malloc_type_malloc(v22 + 23, 0x70F2D1FBuLL);
          if (v23)
          {
            v24 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v24 - 8) = v23;
            if (v24)
            {
              bzero((void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF0), v22);
              v37 = (uint64_t *)(v3 + 1352);
              *(_QWORD *)(v3 + 1352) = v24;
              goto LABEL_37;
            }
          }
        }
LABEL_36:
        v37 = (uint64_t *)(v3 + 1352);
        *(_QWORD *)(v3 + 1352) = 0;
        aom_internal_error(*(_QWORD *)(a1 + 15248), 2, "Failed to allocate pbi->thread_data");
LABEL_37:
        if ((int)v19 < 1)
          goto LABEL_2;
        v25 = *(_QWORD *)(v3 + 1336);
        v26 = *(_QWORD *)(v3 + 1352);
        g_worker_interface_0(v25);
        *(_QWORD *)(v25 + 16) = "aom tile worker";
        ++*(_DWORD *)(v3 + 1344);
        *(_QWORD *)v26 = a1 + 41248;
        *(_DWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 224) = 0;
        if ((_DWORD)v19 == 1)
          goto LABEL_2;
        v27 = v19 - 1;
        v28 = 648;
        v29 = 72;
        while (1)
        {
          v32 = (_QWORD *)(*v38 + v29);
          v33 = *v37;
          g_worker_interface_0((uint64_t)(v32 - 2));
          *v32 = "aom tile worker";
          if (!((BOOL (*)(uint64_t))off_253EA52C8[0])((uint64_t)(v32 - 2)))
            aom_internal_error(a1 + 390860, 1, "Tile decoder thread creation failed");
          v34 = v33 + v28;
          ++*(_DWORD *)(v3 + 1344);
          v35 = malloc_type_malloc(0x3EC07uLL, 0x70F2D1FBuLL);
          if (v35)
          {
            v36 = v35;
            v30 = (_QWORD *)(((unint64_t)v35 + 39) & 0xFFFFFFFFFFFFFFE0);
            *(v30 - 1) = v36;
            *(_QWORD *)(v34 - 224) = v30;
            if (v30)
              goto LABEL_42;
          }
          else
          {
            *(_QWORD *)(v34 - 224) = 0;
          }
          aom_internal_error(*(_QWORD *)(a1 + 15248), 2, "Failed to allocate thread_data->td");
          v30 = *(_QWORD **)(v34 - 224);
LABEL_42:
          bzero(v30, 0x3EBE0uLL);
          v31 = (_DWORD *)(v33 + v28);
          *(v31 - 52) = 0;
          *v31 = 0;
          v28 += 424;
          v29 += 56;
          if (!--v27)
            goto LABEL_2;
        }
      }
    }
    else
    {
      v38 = (_QWORD *)(v3 + 1336);
      *(_QWORD *)(v3 + 1336) = 0;
    }
    aom_internal_error(*(_QWORD *)(a1 + 15248), 2, "Failed to allocate pbi->tile_workers");
    if (v18 > 0x13521CF)
      goto LABEL_36;
    goto LABEL_32;
  }
LABEL_2:
  v4 = *v2;
  if (*v2 > 1)
  {
    v5 = a1 + 15200;
    v6 = *(unsigned __int8 *)(*(_QWORD *)v3 + 76);
    v7 = 1;
    v8 = 424;
    do
    {
      v9 = *(_QWORD *)(v3 + 1352);
      v10 = *(_QWORD *)(v9 + v8) + 256872;
      if (*(_DWORD *)(*(_QWORD *)(v9 + v8) + 256896) != 69696 << v6)
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v9 + v8) + 256900);
        v12 = *(_QWORD *)v10;
        if (v11)
          v12 = 2 * *(_QWORD *)v10;
        if (v12)
        {
          free(*(void **)(v12 - 8));
          v11 = *(_DWORD *)(v10 + 28);
        }
        *(_QWORD *)v10 = 0;
        if (v11)
          v13 = 2 * *(_QWORD *)(v10 + 8);
        else
          v13 = *(_QWORD *)(v10 + 8);
        if (v13)
          free(*(void **)(v13 - 8));
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        v14 = *(_QWORD *)(v10 + 32);
        if (v14)
          free(*(void **)(v14 - 8));
        *(_QWORD *)(v10 + 32) = 0;
        v15 = *(_QWORD *)(v10 + 16);
        if (v15)
          free(*(void **)(v15 - 8));
        *(_QWORD *)(v10 + 16) = 0;
        v16 = *(_QWORD *)(v10 + 40);
        if (v16)
          free(*(void **)(v16 - 8));
        *(_QWORD *)(v10 + 40) = 0;
        v17 = *(_QWORD *)(v10 + 48);
        if (v17)
          free(*(void **)(v17 - 8));
        *(_QWORD *)(v10 + 48) = 0;
        allocate_mc_tmp_buf(v5, *(_QWORD *)(v9 + v8), 69696 << v6, v6);
        v4 = *v2;
      }
      ++v7;
      v8 += 424;
    }
    while (v7 < v4);
  }
}

unsigned __int8 *get_ls_tile_buffers(_DWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v71;
  int v72;
  uint64_t v73;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  int v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  _OWORD v92[32];
  uint64_t v93;

  v5 = a2;
  v93 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 9970;
  v7 = a1[9976];
  v8 = a1[9977];
  if ((int)v8 * (int)v7 <= 1)
  {
    *a4 = a2;
    a4[1] = a3 - a2;
    return 0;
  }
  v9 = (int)v7;
  memset(v92, 0, sizeof(v92));
  v10 = a1[90977];
  v85 = a1[90976];
  if (v85 >= (int)v8)
    v11 = v8;
  else
    v11 = a1[90976];
  if (v10 >= (int)v7)
    v12 = v7;
  else
    v12 = a1[90977];
  if (v10 >= 0)
    v13 = v12 + 1;
  else
    v13 = v7;
  v87 = v13;
  v14 = (int)a1[90974];
  v88 = (int)a1[90975];
  v15 = a1[9981];
  v80 = v7;
  v90 = a4;
  v86 = v8;
  v83 = v11;
  if (v15)
  {
    v17 = a1[9984];
    v16 = a1[9985];
    goto LABEL_13;
  }
  if ((int)v7 < 1)
  {
    v17 = 0;
  }
  else
  {
    v43 = a1[9992];
    v44 = *(_DWORD *)(*(_QWORD *)v6 + 32);
    v17 = v44 * (v43 - a1[9991]);
    if ((_DWORD)v7 != 1)
    {
      v45 = v7 - 1;
      v46 = a1 + 9993;
      while (1)
      {
        v48 = *v46++;
        v47 = v48;
        if ((v48 - v43) * v44 != v17)
          break;
        v43 = v47;
        if (!--v45)
          goto LABEL_135;
      }
      v16 = 0;
      goto LABEL_143;
    }
  }
LABEL_135:
  if ((int)v8 < 1)
  {
    v16 = 0;
    goto LABEL_13;
  }
  v71 = a1[10057];
  v72 = *(_DWORD *)(*(_QWORD *)v6 + 32);
  v16 = v72 * (v71 - a1[10056]);
  if ((_DWORD)v8 != 1)
  {
    v73 = v8 - 1;
    v74 = a1 + 10058;
    while (1)
    {
      v76 = *v74++;
      v75 = v76;
      if ((v76 - v71) * v72 != v16)
        break;
      v71 = v75;
      if (!--v73)
        goto LABEL_13;
    }
LABEL_143:
    aom_internal_error((uint64_t)(a1 + 97715), 7, "Not all the tiles in the tile list have the same size.");
  }
LABEL_13:
  v91 = v12 & ~(v10 >> 31);
  if (v17 <= v16)
    v18 = v16;
  else
    v18 = v17;
  v89 = v18;
  v77 = v9;
  if ((int)v9 >= 1)
  {
    v19 = 0;
    v20 = (v80 - 1);
    v21 = (uint64_t)(a1 + 97715);
    v22 = v80;
    v23 = v5;
    do
    {
      while (v20 == v19)
      {
        *((_QWORD *)v92 + v20) = a3;
        v23 = a3;
        if (v22 == ++v19)
          goto LABEL_36;
      }
      if (a3 - v23 < v88)
        aom_internal_error(v21, 7, "Not enough data to read tile_col_size");
      switch((int)v88)
      {
        case 1:
          v24 = *v23;
          v25 = &v23[v88];
          if (v24 > a3 - v25)
            goto LABEL_30;
          break;
        case 2:
          v24 = *(unsigned __int16 *)v23;
          v25 = &v23[v88];
          if (v24 > a3 - v25)
            goto LABEL_30;
          break;
        case 3:
          v24 = ((unint64_t)v23[2] << 16) | ((unint64_t)v23[1] << 8) | *v23;
          v25 = &v23[v88];
          if (v24 > a3 - v25)
            goto LABEL_30;
          break;
        case 4:
          v24 = *(unsigned int *)v23;
          v25 = &v23[v88];
          if (v24 > a3 - v25)
            goto LABEL_30;
          break;
        default:
          v24 = -1;
          v25 = &v23[v88];
          if (a3 - v25 != -1)
LABEL_30:
            aom_internal_error(v21, 7, "tile_col_data_end[%d] is out of bound", v19);
          break;
      }
      *((_QWORD *)v92 + v19) = &v25[v24];
      v22 = v80;
      v23 = &v25[v24];
      ++v19;
    }
    while (v80 != v19);
  }
LABEL_36:
  v79 = 4 * v89;
  if ((int)v91 < v87)
  {
    v84 = v83 + 1;
    v82 = v77 - 1;
    v26 = (uint64_t)(a1 + 97715);
    v27 = v14 - 1;
    v28 = (int)v91;
    if (4 * v89 >= 257)
    {
      v49 = (uint64_t)&v90[2 * (int)v91 + 1];
      do
      {
        if (v28 >= 1)
          v5 = (unsigned __int8 *)*((_QWORD *)v92 + (v28 - 1));
        v50 = v88;
        if (v28 == v82)
          v50 = 0;
        v51 = v85 < 0 || v28 == v82;
        v5 += v50;
        if (v51)
          v52 = v86;
        else
          v52 = v84;
        v91 = v28;
        if ((int)v52 >= 1)
        {
          v53 = *((_QWORD *)v92 + v28);
          v54 = (_QWORD *)v49;
          while (2)
          {
            if (v27 >= v53 - (uint64_t)v5)
              aom_internal_error(v26, 7, "Truncated packet or corrupt tile length");
            switch((int)v14)
            {
              case 1:
                v55 = *v5 + 1;
                v56 = &v5[v14];
                if (v55 > v53 - (uint64_t)v56)
                  goto LABEL_91;
                goto LABEL_104;
              case 2:
                v55 = *(unsigned __int16 *)v5 + 1;
                v56 = &v5[v14];
                if (v55 <= v53 - (uint64_t)v56)
                  goto LABEL_104;
                goto LABEL_91;
              case 3:
                v55 = (((unint64_t)v5[2] << 16) | ((unint64_t)v5[1] << 8) | *v5) + 1;
                v56 = &v5[v14];
                if (v55 <= v53 - (uint64_t)v56)
                  goto LABEL_104;
                goto LABEL_91;
              case 4:
                v55 = *(unsigned int *)v5 + 1;
                v56 = &v5[v14];
                if (v55 <= v53 - (uint64_t)v56)
                  goto LABEL_104;
LABEL_91:
                aom_internal_error(v26, 7, "Truncated packet or corrupt tile size");
                *(v54 - 1) = v56;
                *v54 = v55;
                v5 = &v56[v55];
                v54 += 128;
                if (--v52)
                  continue;
                goto LABEL_78;
              default:
                v55 = 0;
                v56 = &v5[v14];
LABEL_104:
                if (v55)
                  v57 = v56;
                else
                  v57 = 0;
                *(v54 - 1) = v57;
                *v54 = v55;
                v5 = &v56[v55];
                v54 += 128;
                if (!--v52)
                  goto LABEL_78;
                continue;
            }
          }
        }
LABEL_78:
        v28 = v91 + 1;
        v49 += 16;
      }
      while (v87 != (_DWORD)v91 + 1);
    }
    else
    {
      v29 = 8 * v14 - 1;
      v30 = &v90[2 * (int)v91 + 1];
      do
      {
        if (v28 >= 1)
          v5 = (unsigned __int8 *)*((_QWORD *)v92 + (v28 - 1));
        v31 = v88;
        if (v28 == v82)
          v31 = 0;
        v32 = v85 < 0 || v28 == v82;
        v5 += v31;
        if (v32)
          v33 = v86;
        else
          v33 = v84;
        v91 = v28;
        v81 = v30;
        if ((int)v33 >= 1)
        {
          v34 = 0;
          v35 = *((_QWORD *)v92 + v28);
          while (2)
          {
            if (v27 >= v35 - (uint64_t)v5)
              aom_internal_error(v26, 7, "Truncated packet or corrupt tile length");
            switch((int)v14)
            {
              case 1:
                v38 = *v5;
                if (v38 >> v29 == 1)
                  goto LABEL_65;
                goto LABEL_68;
              case 2:
                v38 = *(unsigned __int16 *)v5;
                if (v38 >> v29 != 1)
                  goto LABEL_68;
                goto LABEL_65;
              case 3:
                v38 = ((unint64_t)v5[2] << 16) | ((unint64_t)v5[1] << 8) | *v5;
                if (v38 >> v29 != 1)
                  goto LABEL_68;
                goto LABEL_65;
              case 4:
                v38 = *(unsigned int *)v5;
                if (v38 >> v29 == 1)
                  goto LABEL_65;
                goto LABEL_68;
              default:
                v38 = -1;
                if (0xFFFFFFFFFFFFFFFFLL >> v29 == 1)
                {
LABEL_65:
                  v39 = (unsigned __int8 **)((char *)&v90[2 * v91]
                                           + ((uint64_t)(v34 - (((v38 >> (8 * v14 - 8)) & 0x7F) << 32)) >> 22));
                  v40 = *v39;
                  v41 = (unint64_t)v39[1];
                  v42 = &v5[v14];
                }
                else
                {
LABEL_68:
                  v41 = v38 + 1;
                  v42 = &v5[v14];
                  if (v38 + 1 > v35 - (uint64_t)v42)
                  {
                    aom_internal_error(v26, 7, "Truncated packet or corrupt tile size");
LABEL_53:
                    v36 = v42;
                    v37 = v41;
                    goto LABEL_54;
                  }
                  if (v38 != -1)
                    goto LABEL_53;
                  v40 = 0;
                }
                v37 = 0;
                v36 = v42;
                v42 = v40;
LABEL_54:
                *(v30 - 1) = (unint64_t)v42;
                *v30 = v41;
                v5 = &v36[v37];
                v30 += 128;
                v34 += 0x100000000;
                if (--v33)
                  continue;
                goto LABEL_39;
            }
          }
        }
LABEL_39:
        v28 = v91 + 1;
        v30 = v81 + 2;
      }
      while (v87 != (_DWORD)v91 + 1);
    }
  }
  if (v87 != (_DWORD)v80)
  {
    v5 = (unsigned __int8 *)(&v90)[v77];
    v58 = v86;
    if ((int)v86 >= 1)
    {
      v59 = 0;
      v60 = *((_QWORD *)v92 + v77 - 1);
      v61 = (uint64_t)(a1 + 97715);
      v91 = v77 - 1;
      v62 = &v90[2 * v77 - 1];
      while (2)
      {
        if (v14 - 1 >= (unint64_t)(v60 - (_QWORD)v5))
          aom_internal_error(v61, 7, "Truncated packet or corrupt tile length");
        switch((int)v14)
        {
          case 1:
            v65 = *v5;
            if (v79 <= 256)
              goto LABEL_127;
            goto LABEL_130;
          case 2:
            v65 = *(unsigned __int16 *)v5;
            if (v79 > 256)
              goto LABEL_130;
            goto LABEL_127;
          case 3:
            v65 = ((unint64_t)v5[2] << 16) | ((unint64_t)v5[1] << 8) | *v5;
            if (v79 > 256)
              goto LABEL_130;
            goto LABEL_127;
          case 4:
            v65 = *(unsigned int *)v5;
            if (v79 > 256)
              goto LABEL_130;
            goto LABEL_127;
          default:
            v65 = -1;
            if (v79 > 256)
              goto LABEL_130;
LABEL_127:
            if (v65 >> (8 * v14 - 1) == 1)
            {
              v66 = (unsigned __int8 **)((char *)&v90[2 * v91]
                                       + ((uint64_t)(v59 - (((v65 >> (8 * v14 - 8)) & 0x7F) << 32)) >> 22));
              v67 = *v66;
              v68 = (unint64_t)v66[1];
              v69 = &v5[v14];
            }
            else
            {
LABEL_130:
              v68 = v65 + 1;
              v69 = &v5[v14];
              if (v65 + 1 > v60 - (uint64_t)v69)
              {
                aom_internal_error(v61, 7, "Truncated packet or corrupt tile size");
LABEL_113:
                v63 = v69;
                v64 = v68;
                goto LABEL_114;
              }
              if (v65 != -1)
                goto LABEL_113;
              v67 = 0;
            }
            v64 = 0;
            v63 = v69;
            v69 = v67;
LABEL_114:
            *(v62 - 1) = (unint64_t)v69;
            *v62 = v68;
            v5 = &v63[v64];
            v62 += 128;
            v59 += 0x100000000;
            if (--v58)
              continue;
            return v5;
        }
      }
    }
  }
  return v5;
}

uint64_t get_tile_buffers_0(uint64_t result, unsigned __int8 *a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  int *v23;

  v6 = *(unsigned int *)(result + 39904);
  v19 = *(unsigned int *)(result + 39908);
  if ((int)v19 >= 1 && (int)v6 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v23 = (int *)(result + 363896);
    v14 = result + 390860;
    v15 = (unint64_t *)(a4 + 8);
    v18 = *(unsigned int *)(result + 39904);
    do
    {
      v22 = v12;
      v20 = v15;
      v21 = v13;
      do
      {
        if (v13 >= a5 && v13 <= a6)
        {
          if ((unint64_t)a2 >= a3)
            result = aom_internal_error(v14, 7, "Data ended before all tiles were read.");
          if (a6 == v13)
          {
            v16 = a3 - (_QWORD)a2;
          }
          else
          {
            v17 = *v23;
            if (v17 - 1 >= a3 - (unint64_t)a2)
              result = aom_internal_error(v14, 7, "Not enough data to read tile size");
            switch((int)v17)
            {
              case 1:
                v16 = *a2 + 1;
                a2 += v17;
                if (v16 > a3 - (unint64_t)a2)
                  goto LABEL_28;
                break;
              case 2:
                v16 = *(unsigned __int16 *)a2 + 1;
                a2 += v17;
                if (v16 > a3 - (unint64_t)a2)
                  goto LABEL_28;
                break;
              case 3:
                v16 = (((unint64_t)a2[2] << 16) | ((unint64_t)a2[1] << 8) | *a2) + 1;
                a2 += v17;
                if (v16 > a3 - (unint64_t)a2)
                  goto LABEL_28;
                break;
              case 4:
                v16 = *(unsigned int *)a2 + 1;
                a2 += v17;
                if (v16 > a3 - (unint64_t)a2)
LABEL_28:
                  result = aom_internal_error(v14, 7, "Truncated packet or corrupt tile size", v18);
                break;
              default:
                v16 = 0;
                a2 += v17;
                break;
            }
          }
          *(v15 - 1) = (unint64_t)a2;
          *v15 = v16;
          a2 += v16;
        }
        ++v13;
        v15 += 2;
        --v6;
      }
      while (v6);
      v6 = v18;
      v13 = v21 + v18;
      v12 = v22 + 1;
      v15 = v20 + 128;
    }
    while (v22 + 1 != v19);
  }
  return result;
}

void tile_mt_queue(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a9;
  v16 = a1 + 363792;
  if (*(_DWORD *)(a1 + 363820) == a2 && *(_DWORD *)(a1 + 363816) == a3)
    goto LABEL_23;
  if (*(_QWORD *)v16)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)v16);
    if (*(_QWORD *)v16)
      free(*(void **)(*(_QWORD *)v16 - 8));
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
    free(*(void **)(v17 - 8));
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_DWORD *)(v16 + 24) = a3;
  *(_DWORD *)(v16 + 28) = a2;
  v18 = a3 * a2;
  if ((unint64_t)(v18 << 6) > 0x1FFFFFFE9
    || (v19 = malloc_type_malloc((v18 << 6) | 0x17, 0x70F2D1FBuLL)) == 0)
  {
    *(_QWORD *)v16 = 0;
LABEL_14:
    aom_internal_error(*(_QWORD *)(a1 + 15248), 2, "Failed to allocate tile_mt_info->job_mutex", a9);
    if ((int)v18 < 1)
      goto LABEL_17;
LABEL_15:
    v21 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)(*(_QWORD *)v16 + v21), 0);
      v21 += 64;
    }
    while ((unint64_t)v18 << 6 != v21);
    goto LABEL_17;
  }
  v20 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v20 - 8) = v19;
  *(_QWORD *)v16 = v20;
  if (!v20)
    goto LABEL_14;
  if ((int)v18 >= 1)
    goto LABEL_15;
LABEL_17:
  if ((unint64_t)(16 * v18) <= 0x1FFFFFFE9 && (v22 = malloc_type_malloc(16 * v18 + 23, 0x70F2D1FBuLL)) != 0)
  {
    v23 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v23 - 8) = v22;
    *(_QWORD *)(v16 + 8) = v23;
    if (v23)
      goto LABEL_23;
  }
  else
  {
    *(_QWORD *)(v16 + 8) = 0;
  }
  aom_internal_error(*(_QWORD *)(a1 + 15248), 2, "Failed to allocate tile_mt_info->job_queue", v38);
LABEL_23:
  v24 = 0;
  v25 = *(uint64_t **)(v16 + 8);
  *(_QWORD *)(v16 + 16) = 0;
  if (a4 < a5)
  {
    if (a6 >= a7)
    {
      v24 = 0;
    }
    else
    {
      v24 = 0;
      v26 = *(int *)(a1 + 39904);
      v27 = a4;
      v28 = a7 - (uint64_t)a6;
      v29 = 21408 * (int)v26 * (uint64_t)a4 + 21408 * a6;
      v30 = ((uint64_t)a4 << 10) + 16 * a6 + a1 + 298256;
      v31 = a6 + (int)v26 * (uint64_t)a4;
      v32 = v25;
      do
      {
        v33 = v31;
        v34 = v30;
        v35 = v29;
        v36 = v28;
        do
        {
          if (v33 >= a8 && v33 <= (int)v38)
          {
            v37 = *(_QWORD *)(a1 + 298240) + v35;
            *v32 = v34;
            v32[1] = v37;
            v32 += 2;
            *(_DWORD *)(v16 + 16) = ++v24;
          }
          v35 += 21408;
          v34 += 16;
          ++v33;
          --v36;
        }
        while (v36);
        ++v27;
        v29 += 21408 * (int)v26;
        v30 += 1024;
        v31 += v26;
      }
      while (v27 != a5);
    }
  }
  qsort(v25, v24, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare_tile_buffers_0);
}

BOOL row_mt_worker_hook(int *a1, uint64_t a2)
{
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  pthread_mutex_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  size_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  unsigned int *v44;
  int v45;
  int v46;
  signed int v47;
  signed int v48;
  int v49;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int32x2_t v82;
  int v83;
  _DWORD *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  pthread_mutex_t *v111;
  int v112;
  unsigned int v113;
  int v114;
  _QWORD *v115;
  _DWORD *v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  int *v120;
  int v121;
  _QWORD *v122;
  int v123;
  int v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t *v133;
  _DWORD *v134;
  int *v135;
  uint64_t v136;
  uint64_t *v137;

  v3 = (uint64_t *)a1;
  v4 = (_DWORD *)(a2 + 388800);
  v5 = a2 + 363792;
  v6 = (_QWORD *)(a2 + 298240);
  v7 = (int *)(a2 + 39880);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(*(_QWORD *)a1 + 15056) = 0;
  if (setjmp(a1 + 57))
  {
    *((_DWORD *)v3 + 56) = 0;
    *(_DWORD *)(*v3 + 15056) = 1;
    pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 24992));
    v4[9] = 1;
    pthread_cond_broadcast(*(pthread_cond_t **)(v5 + 25000));
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 24992));
    v9 = *(_DWORD *)(*(_QWORD *)v7 + 36);
    v10 = (*(_DWORD *)*v3 - *(_DWORD *)(*v3 + 7840)) >> v9;
    v11 = *v6 + 21408 * v7[6] * (uint64_t)*(int *)(*v3 + 7856) + 21408 * *(int *)(*v3 + 7860);
    v12 = *(_DWORD *)(v11 + 21376)
        + ((*(_DWORD *)(*v3 + 7852) + ~*(_DWORD *)(*v3 + 7848) + (1 << v9)) >> v9)
        + *(_DWORD *)(v11 + 21380);
    v13 = (uint64_t)v10 << 6;
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(v11 + 21344) + v13));
    *(_DWORD *)(*(_QWORD *)(v11 + 21368) + 4 * v10) = v12;
    pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)(v11 + 21352) + 48 * v10));
    v14 = (pthread_mutex_t *)(*(_QWORD *)(v11 + 21344) + v13);
LABEL_8:
    pthread_mutex_unlock(v14);
    return 0;
  }
  v15 = v8;
  v133 = (uint64_t *)(v8 + 256864);
  *((_DWORD *)v3 + 56) = 1;
  v135 = v7;
  v130 = v8;
  if (v7[151])
    v16 = 0;
  else
    v16 = *(_BYTE *)(a2 + 15692) == 0;
  v129 = v16;
  *(_QWORD *)(v8 + 256960) = predict_inter_block_void;
  *(_QWORD *)(v8 + 256968) = cfl_store_inter_block_void;
  *(_QWORD *)(v8 + 256928) = read_coeffs_tx_intra_block;
  *(_QWORD *)(v8 + 256936) = decode_block_void;
  *(_QWORD *)(v8 + 256944) = av1_read_coeffs_txb_facade;
  *(_QWORD *)(v8 + 256952) = decode_block_void;
  if (*(_DWORD *)(v8 + 15056))
  {
LABEL_7:
    *((_DWORD *)v3 + 56) = 0;
    pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 24992));
    v4[9] = 1;
    pthread_cond_broadcast(*(pthread_cond_t **)(v5 + 25000));
    v14 = *(pthread_mutex_t **)(v5 + 24992);
    goto LABEL_8;
  }
  v18 = v8 + 8200;
  v131 = (_QWORD *)(a2 + 15200);
  v132 = v3 + 2;
  v136 = v5;
  v137 = v3;
  v134 = v4;
  while (1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)v5);
    v20 = *(int *)(v5 + 20);
    if ((int)v20 >= *(_DWORD *)(v5 + 16))
      break;
    *(_DWORD *)(v5 + 20) = v20 + 1;
    v21 = *(_QWORD *)(v5 + 8);
    pthread_mutex_unlock(*(pthread_mutex_t **)v5);
    if (!v21)
      goto LABEL_39;
    v22 = v21 + 16 * v20;
    v23 = *(unsigned int **)(v22 + 8);
    tile_worker_hook_init((_DWORD *)a2, v3, *(unsigned __int8 ***)v22, (uint64_t)v23, v129);
    pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 24992));
    ++v23[5350];
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 24992));
    v121 = mi_size_wide_7[*(unsigned __int8 *)(*(_QWORD *)v135 + 28)];
    v24 = *(unsigned __int8 *)(*(_QWORD *)v135 + 77);
    av1_zero_above_context(v131, v15, v23[2], v23[3], v23[4]);
    *(_BYTE *)(v18 + 2552) = 0;
    if (v24)
      v25 = 2;
    else
      v25 = 4;
    bzero((void *)(v130 + 10753), v25);
    *(_QWORD *)(v15 + 0x2000) = 0xFFEA000FFFF90003;
    *(_QWORD *)(v15 + 8176) = 0xFFEA000FFFF90003;
    *(_WORD *)v18 = 15;
    *(_WORD *)(v15 + 8184) = 15;
    *(_DWORD *)(v18 + 2) = 262137;
    *(_DWORD *)(v15 + 8186) = 262137;
    *(_QWORD *)(v18 + 76) = 0x1FFFFFFFE0;
    if (v24)
    {
      v126 = v23 + 5348;
      v26 = *v23;
      v27 = v135;
      if ((int)v26 < (int)v23[1])
        goto LABEL_21;
    }
    else
    {
      *(_QWORD *)(v15 + 8224) = 0xFFEA000FFFF90003;
      *(_QWORD *)(v15 + 8208) = 0xFFEA000FFFF90003;
      *(_WORD *)(v18 + 32) = 15;
      *(_WORD *)(v18 + 16) = 15;
      *(_DWORD *)(v18 + 34) = 262137;
      *(_DWORD *)(v18 + 18) = 262137;
      *(_QWORD *)(v15 + 8288) = 0x1FFFFFFFE0;
      *(_QWORD *)(v15 + 8256) = 0xFFEA000FFFF90003;
      *(_QWORD *)(v15 + 8240) = 0xFFEA000FFFF90003;
      *(_WORD *)(v18 + 64) = 15;
      *(_WORD *)(v18 + 48) = 15;
      *(_DWORD *)(v18 + 66) = 262137;
      *(_DWORD *)(v18 + 50) = 262137;
      *(_QWORD *)(v18 + 100) = 0x1FFFFFFFE0;
      v126 = v23 + 5348;
      v26 = *v23;
      v27 = v135;
      if ((int)v26 < (int)v23[1])
      {
LABEL_21:
        v28 = v24;
        while (1)
        {
          *(_OWORD *)(v130 + 8056) = 0u;
          *(_OWORD *)(v130 + 8072) = 0u;
          *(_OWORD *)(v130 + 8024) = 0u;
          *(_OWORD *)(v130 + 8040) = 0u;
          *(_OWORD *)(v130 + 7992) = 0u;
          *(_OWORD *)(v130 + 8008) = 0u;
          *(_OWORD *)(v130 + 8096) = 0u;
          *(_OWORD *)(v130 + 8112) = 0u;
          *(_QWORD *)&v29 = 0x4040404040404040;
          *((_QWORD *)&v29 + 1) = 0x4040404040404040;
          *(_OWORD *)(v130 + 8144) = v29;
          *(_OWORD *)(v130 + 8160) = v29;
          v30 = v23[2];
          if ((int)v30 < (int)v23[3])
            break;
LABEL_22:
          pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 24992));
          *v126 += v121;
          v4 = v134;
          v134[7] += v121;
          pthread_cond_signal(*(pthread_cond_t **)(v5 + 25000));
          pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 24992));
          v27 = v135;
          v26 = (*(_DWORD *)(*(_QWORD *)v135 + 32) + v26);
          if ((int)v26 >= (int)v23[1])
            goto LABEL_30;
        }
        v31 = *(_QWORD *)v27;
        while (1)
        {
          v32 = v31;
          v33 = *(_QWORD *)(v5 + 24976);
          v34 = ((int)v26 >> *(_DWORD *)(v32 + 36))
              + ((int)v26 >> *(_DWORD *)(v32 + 36)) * (*(int *)(a2 + 15736) >> *(_DWORD *)(v32 + 36))
              + ((int)v30 >> *(_DWORD *)(v32 + 36));
          v35 = v33 + 241664 * v34;
          *(_QWORD *)(v15 + 15112) = v35 + 196608;
          *(_QWORD *)(v15 + 15080) = v35;
          *(_WORD *)(v18 + 6904) = 0;
          *(_WORD *)(v18 + 6936) = 0;
          if (!v28)
          {
            *(_QWORD *)(v15 + 15088) = v35 + 0x10000;
            *(_QWORD *)(v15 + 15120) = v33 + 241664 * v34 + 200704;
            *(_DWORD *)(v18 + 6906) = 0;
            *(_DWORD *)(v18 + 6938) = 0;
            *(_QWORD *)(v15 + 15096) = v35 + 0x20000;
            *(_QWORD *)(v15 + 15128) = v33 + 241664 * v34 + 204800;
          }
          v36 = v33 + 241664 * v34 + 208896;
          *(_QWORD *)(v15 + 176) = v36;
          *(_QWORD *)(v15 + 2784) = v36 + 0x4000;
          *(_DWORD *)(v18 + 6828) = 0;
          v37 = v27;
          decode_partition_0(a2, v15, v26, v30, *v133, *(unsigned __int8 *)(*(_QWORD *)v27 + 28), 1);
          if (*(_QWORD *)(*v133 + 8) - *(_QWORD *)*v133 < (uint64_t)((*(_DWORD *)(*v133 + 24)
                                                                                  - *(__int16 *)(*v133 + 54)
                                                                                  + 8
                                                                                  * (*(_DWORD *)(*v133 + 40)
                                                                                   - *(_DWORD *)(*v133 + 16))
                                                                                  + 7) >> 3))
            break;
          v31 = *(_QWORD *)v37;
          v30 = (*(_DWORD *)(*(_QWORD *)v37 + 32) + v30);
          v5 = v136;
          v27 = v37;
          if ((int)v30 >= (int)v23[3])
            goto LABEL_22;
        }
        v19 = 1;
        v5 = v136;
        v3 = v137;
        v4 = v134;
        goto LABEL_11;
      }
    }
LABEL_30:
    v38 = *(_DWORD *)(*v133 + 24)
        - *(__int16 *)(*v133 + 54)
        + 8 * (*(_DWORD *)(*v133 + 40) - *(_DWORD *)(*v133 + 16))
        + 7;
    v39 = v38 >> 3;
    v41 = *(_QWORD *)*v133;
    v40 = *(_QWORD *)(*v133 + 8);
    if ((uint64_t)(v40 - v41) >= v39)
    {
      v42 = (_BYTE *)(v41 + v39);
      v3 = v137;
      if (((2 * (0x80u >> (v38 & 7)) - 1) & *(v42 - 1)) != 0x80u >> (v38 & 7))
        goto LABEL_37;
      v43 = v42;
      if ((unint64_t)v42 < v40)
      {
        while (!*v43)
        {
          if ((unint64_t)++v43 >= v40)
            goto LABEL_36;
        }
LABEL_37:
        v19 = 1;
        goto LABEL_11;
      }
LABEL_36:
      v19 = 0;
    }
    else
    {
      v19 = 1;
      v3 = v137;
    }
LABEL_11:
    *(_DWORD *)(v15 + 15056) |= v19;
    pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 24992));
    --v126[2];
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 24992));
    if (*(_DWORD *)(v15 + 15056))
      goto LABEL_7;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)v5);
LABEL_39:
  if (*(_DWORD *)(v15 + 15056))
    goto LABEL_7;
  v133[8] = (uint64_t)decode_block_void;
  v133[9] = (uint64_t)predict_and_reconstruct_intra_block;
  v133[10] = (uint64_t)decode_block_void;
  v133[11] = (uint64_t)inverse_transform_inter_block;
  v133[12] = (uint64_t)predict_inter_block;
  v133[13] = (uint64_t)cfl_store_inter_block;
  pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 24992));
  if (v4[8] != v4[6])
  {
    v44 = v4;
    v45 = v4[6];
    v46 = v4[8];
    do
    {
      if (v44[9] == 1)
        break;
      v47 = *v44;
      v48 = v44[1];
      v49 = v44[3];
      if (v44[7] == v46 || v47 >= v48 || (int)v44[2] >= v49)
        goto LABEL_43;
      v52 = v45;
      v117 = v46;
      v53 = v44[2];
      v54 = v135[6];
      v55 = v54 * v47;
      v56 = 21408 * (int)v44[2];
      v57 = 0x7FFFFFFFLL;
      v58 = 0;
      v59 = v55;
      v60 = 0xFFFFFFFFLL;
      v61 = 0xFFFFFFFFLL;
      v62 = *v44;
      do
      {
        v63 = v60;
        v64 = v61;
        v65 = v56 + 21408 * v59;
        v66 = v53;
        v67 = v58;
        v68 = v57;
        do
        {
          v57 = v68;
          if (v59 + (int)v66 < v134[4] || v59 + (int)v66 > v134[5])
            goto LABEL_77;
          v70 = (_DWORD *)(*v6 + v65 + 21392);
          v71 = v70[1];
          v72 = *(v70 - 1);
          if ((*v70 - v71) * v72 < 1)
            goto LABEL_77;
          v73 = v70[2];
          v74 = ((*(v70 - 2) - v71) * v72);
          v75 = v73 < (int)v57;
          v57 = v73 >= (int)v57 ? v57 : v73;
          v67 = v75 ? 0 : v67;
          v76 = !v75 || (int)v74 <= (int)v67;
          if (v76
            || ((*(_DWORD *)(*v6 + v65 + 4) + (1 << *(_DWORD *)(*(_QWORD *)v135 + 36)) + ~*(_DWORD *)(*v6 + v65)) >> *(_DWORD *)(*(_QWORD *)v135 + 36) == 1
              ? (v77 = 1)
              : (v77 = 2),
                v73 >= v77))
          {
LABEL_77:
            v78 = v63;
            v79 = v64;
          }
          else
          {
            v67 = v74;
            v78 = v62;
            v79 = v66;
          }
          v66 = (v66 + 1);
          v65 += 21408;
          v64 = v79;
          v63 = v78;
          v68 = v57;
        }
        while (v49 != (_DWORD)v66);
        v58 = v67;
        v62 = (v62 + 1);
        v59 += v54;
        v61 = v79;
        v60 = v78;
      }
      while ((_DWORD)v62 != v48);
      v5 = v136;
      if ((_DWORD)v78 == -1 || (_DWORD)v79 == -1)
      {
LABEL_43:
        pthread_cond_wait(*(pthread_cond_t **)(v5 + 25000), *(pthread_mutex_t **)(v5 + 24992));
      }
      else
      {
        v80 = mi_size_wide_7[*(unsigned __int8 *)(*(_QWORD *)v135 + 28)];
        v81 = *v6 + 21408 * (int)v78 * v54 + 21408 * (int)v79;
        v112 = *(_DWORD *)v81;
        v82 = *(int32x2_t *)(v81 + 21396);
        *(int32x2_t *)(v81 + 21396) = vadd_s32(v82, (int32x2_t)(v80 | 0x100000000));
        v83 = v117 + v80;
        v134[8] = v83;
        if (v83 == v52)
          pthread_cond_broadcast(*(pthread_cond_t **)(v136 + 25000));
        pthread_mutex_unlock(*(pthread_mutex_t **)(v136 + 24992));
        v127 = *v6 + 21408 * v135[6] * (uint64_t)(int)v78;
        v128 = v79;
        v84 = (_DWORD *)(v127 + 21408 * (int)v79);
        av1_tile_init((_DWORD *)(v130 + 7840), (uint64_t)v131, v78, v79);
        av1_init_macroblockd((uint64_t)v131, v15);
        *(_QWORD *)(v15 + 10736) = v132;
        v86 = v84[2];
        v85 = v84[3];
        if (v86 < v85)
        {
          v87 = *(_DWORD *)(*(_QWORD *)v135 + 36);
          v88 = (v85 + (1 << v87) + ~v86) >> v87;
          v123 = *(unsigned __int8 *)(*(_QWORD *)v135 + 77);
          v125 = v127 + 21408 * (int)v79;
          v89 = *v6 + 21408 * (int)v84[4] * (uint64_t)v135[6] + 21408 * (int)v84[5];
          v122 = (_QWORD *)(v89 + 21344);
          v120 = (int *)(v89 + 21376);
          v119 = (v112 + v82.i32[0] - *v84) >> v87;
          v90 = v119 - 1;
          v118 = (_QWORD *)(v89 + 21368);
          v91 = v119 - 1;
          v115 = (_QWORD *)(v89 + 21352);
          v116 = (_DWORD *)(v89 + 21380);
          v124 = v88;
          v114 = v88 - 1;
          v92 = *(_QWORD *)v135;
          v93 = 0;
          do
          {
            v98 = v86;
            v99 = v92;
            v100 = v136;
            v101 = *(_QWORD *)(v136 + 24976);
            v113 = v98;
            v102 = ((v112 + v82.i32[0]) >> *(_DWORD *)(v99 + 36))
                 + ((v112 + v82.i32[0]) >> *(_DWORD *)(v99 + 36)) * (*(int *)(a2 + 15736) >> *(_DWORD *)(v99 + 36))
                 + (v98 >> *(_DWORD *)(v99 + 36));
            v103 = v101 + 241664 * v102;
            *(_QWORD *)(v15 + 15112) = v103 + 196608;
            v104 = v93;
            *(_QWORD *)(v15 + 15080) = v103;
            *(_WORD *)(v18 + 6904) = 0;
            *(_WORD *)(v18 + 6936) = 0;
            if (!v123)
            {
              *(_QWORD *)(v15 + 15088) = v103 + 0x10000;
              *(_QWORD *)(v15 + 15120) = v101 + 241664 * v102 + 200704;
              *(_DWORD *)(v18 + 6906) = 0;
              *(_DWORD *)(v18 + 6938) = 0;
              *(_QWORD *)(v15 + 15096) = v103 + 0x20000;
              *(_QWORD *)(v15 + 15128) = v101 + 241664 * v102 + 204800;
            }
            v105 = v101 + 241664 * v102 + 208896;
            *(_QWORD *)(v15 + 176) = v105;
            *(_QWORD *)(v15 + 2784) = v105 + 0x4000;
            *(_DWORD *)(v18 + 6828) = 0;
            if ((_DWORD)v119)
            {
              v106 = *v120;
              if (((*v120 + 0x7FFFFFFF) & v93) == 0)
              {
                v111 = (pthread_mutex_t *)(*v122 + (v90 << 6));
                pthread_mutex_lock(v111);
                v90 = v119 - 1;
                while (*(_DWORD *)(*v118 + 4 * v91) - (v106 + *v116) < v93)
                  pthread_cond_wait((pthread_cond_t *)(*v115 + 48 * (v119 - 1)), v111);
                pthread_mutex_unlock(v111);
                v100 = v136;
                v104 = v93;
              }
            }
            v107 = v104;
            pthread_mutex_lock(*(pthread_mutex_t **)(v100 + 24992));
            v108 = v134[9];
            pthread_mutex_unlock(*(pthread_mutex_t **)(v100 + 24992));
            if (!v108)
              decode_partition_0(a2, v15, (v112 + v82.i32[0]), v113, *v133, *(unsigned __int8 *)(*(_QWORD *)v135 + 28), 2);
            v109 = *v120;
            v97 = v135;
            if (v114 <= v107)
            {
              v94 = v109 + v124 + *v116;
            }
            else
            {
              v96 = v107;
              v110 = v107 % v109;
              v94 = v107;
              if (v110)
                goto LABEL_88;
            }
            v95 = v94;
            pthread_mutex_lock((pthread_mutex_t *)(*v122 + (v119 << 6)));
            *(_DWORD *)(*v118 + 4 * v119) = v95;
            pthread_cond_signal((pthread_cond_t *)(*v115 + 48 * (int)v119));
            v91 = v119 - 1;
            pthread_mutex_unlock((pthread_mutex_t *)(*v122 + (v119 << 6)));
            v96 = v107;
            v97 = v135;
LABEL_88:
            v92 = *(_QWORD *)v97;
            v86 = *(_DWORD *)(*(_QWORD *)v97 + 32) + v113;
            v93 = v96 + 1;
          }
          while (v86 < *(_DWORD *)(v125 + 12));
        }
        v5 = v136;
        pthread_mutex_lock(*(pthread_mutex_t **)(v136 + 24992));
        --*(_DWORD *)(v127 + 21408 * v128 + 21400);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v136 + 24992));
        pthread_mutex_lock(*(pthread_mutex_t **)(v136 + 24992));
      }
      v44 = v134;
      v46 = v134[8];
      v45 = v134[6];
    }
    while (v46 != v45);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 24992));
  *((_DWORD *)v137 + 56) = 0;
  return *(_DWORD *)(v15 + 15056) == 0;
}

uint64_t compare_tile_buffers_0(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)a2 + 8) - *(_DWORD *)(*(_QWORD *)a1 + 8));
}

void *tile_worker_hook_init(_DWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t a4, char a5)
{
  _QWORD *v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  int v27;
  void *v28;
  void *result;
  _DWORD *v30;

  v10 = a1 + 10126;
  v11 = (const void **)(a1 + 9970);
  v30 = a1 + 3800;
  v12 = *a2;
  v14 = *(int *)(a4 + 16);
  v13 = *(int *)(a4 + 20);
  *(_QWORD *)(v12 + 256864) = a4 + 24;
  bzero((void *)(v12 + 15200), 0x30000uLL);
  v15 = *((_DWORD *)*v11 + 9);
  v16 = a1[v14 + 10056] << v15;
  v17 = a1[(int)v14 + 10057] << v15;
  *(_DWORD *)(v12 + 7856) = v14;
  *(_DWORD *)(v12 + 7840) = v16;
  if (v17 >= a1[3933])
    v17 = a1[3933];
  *(_DWORD *)(v12 + 7844) = v17;
  v18 = a1[v13 + 9991] << v15;
  v19 = a1[(int)v13 + 9992] << v15;
  *(_DWORD *)(v12 + 7860) = v13;
  *(_DWORD *)(v12 + 7848) = v18;
  if (v19 >= a1[3934])
    v19 = a1[3934];
  *(_DWORD *)(v12 + 7852) = v19;
  *(_DWORD *)(v12 + 10724) = a1[3954];
  v20 = a2[1];
  v22 = *a3;
  v21 = a3[1];
  v23 = (uint64_t)(a2 + 2);
  if ((unint64_t)(v21 - 1) >= v20 - (uint64_t)v22)
  {
    *(_DWORD *)v12 = v16;
    aom_internal_error(v23, 7, "Truncated packet or corrupt tile length");
  }
  if (!v22 && v21)
  {
    *(_DWORD *)v12 = *(_DWORD *)(v12 + 7840);
    aom_internal_error(v23, 2, "Failed to allocate BOOL decoder %d", 1);
    v24 = (uint64_t)v30;
    goto LABEL_19;
  }
  *(_QWORD *)(a4 + 24) = v22;
  *(_QWORD *)(a4 + 32) = &v21[(_QWORD)v22];
  *(_QWORD *)(a4 + 40) = v22;
  *(_DWORD *)(a4 + 48) = -14;
  *(_QWORD *)(a4 + 64) = v22;
  *(_QWORD *)(a4 + 72) = 0xFFF180007FFFFFFFLL;
  *(_QWORD *)(a4 + 56) = &v22[v21];
  if (!(_DWORD)v21)
  {
    v25 = 0x7FFFFFFF;
    v26 = -15;
    v24 = (uint64_t)v30;
    goto LABEL_17;
  }
  v25 = (*v22 << 23) ^ 0x7FFFFFFF;
  if (v21 >= 2uLL)
  {
    v25 ^= v22[1] << 15;
    v24 = (uint64_t)v30;
    if (v21 == 2)
    {
      v22 += 2;
      v26 = 1;
    }
    else
    {
      v25 ^= v22[2] << 7;
      v22 += 3;
      v26 = 9;
      if (v21 > 3uLL)
        goto LABEL_18;
    }
    goto LABEL_17;
  }
  v26 = -7;
  ++v22;
  v24 = (uint64_t)v30;
  if (v21 <= 1uLL)
  {
LABEL_17:
    *(_DWORD *)(a4 + 48) = (__int16)(16370 - v26);
    v26 = 0x4000;
  }
LABEL_18:
  *(_DWORD *)(a4 + 72) = v25;
  *(_WORD *)(a4 + 78) = v26;
  *(_QWORD *)(a4 + 64) = v22;
LABEL_19:
  *(_BYTE *)(a4 + 80) = a5;
  av1_init_macroblockd(v24, v12);
  *(_QWORD *)(v12 + 10736) = v23;
  v27 = *((unsigned __int8 *)*v11 + 77);
  *(_QWORD *)(v12 + 7968) = *(_QWORD *)(v10[1] + 8 * v14);
  if (!v27)
  {
    *(_QWORD *)(v12 + 7976) = *(_QWORD *)(v10[2] + 8 * v14);
    *(_QWORD *)(v12 + 7984) = *(_QWORD *)(v10[3] + 8 * v14);
  }
  *(_QWORD *)(v12 + 8088) = *(_QWORD *)(*v10 + 8 * v14);
  *(_QWORD *)(v12 + 8128) = *(_QWORD *)(v10[4] + 8 * v14);
  v28 = (void *)(a4 + 96);
  result = memcpy(v28, v11[1], 0x52FCuLL);
  *(_QWORD *)(v12 + 10648) = v28;
  return result;
}

double av1_init_macroblockd(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _OWORD *v6;
  const void *v7;
  _OWORD *v8;
  const void *v9;
  _OWORD *v10;
  void *v11;
  __int128 v12;
  const void *v13;
  _OWORD *v14;
  __int128 v15;
  const void *v16;
  _OWORD *v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  double result;
  _BYTE *v23;

  v4 = a2 + 14872;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24680) + 77);
  v6 = (_OWORD *)(a1 + 704);
  v7 = (const void *)(a1 + 17760);
  v8 = (_OWORD *)(a1 + 640);
  v9 = (const void *)(a1 + 15328);
  v10 = (_OWORD *)(a2 + 144);
  v11 = (void *)(a2 + 192);
  if (!v5)
  {
    v23 = (_BYTE *)(a2 + 5232);
    if (*(_BYTE *)(a2 + 16))
      v14 = v6;
    else
      v14 = v8;
    v15 = v14[1];
    if (*(_BYTE *)(a2 + 16))
      v16 = v7;
    else
      v16 = v9;
    *v10 = *v14;
    v10[1] = v15;
    memcpy(v11, v16, 0x4C0uLL);
    if (*(_BYTE *)(a2 + 2624))
      v17 = (_OWORD *)(a1 + 672);
    else
      v17 = v8;
    if (*(_BYTE *)(a2 + 2624))
      v18 = (const void *)(a1 + 16544);
    else
      v18 = v9;
    v19 = v17[1];
    *(_OWORD *)(a2 + 2752) = *v17;
    *(_OWORD *)(a2 + 2768) = v19;
    memcpy((void *)(a2 + 2800), v18, 0x4C0uLL);
    v10 = (_OWORD *)(a2 + 5360);
    v11 = (void *)(a2 + 5408);
    if (*v23)
      goto LABEL_3;
LABEL_17:
    v20 = v8[1];
    *v10 = *v8;
    v10[1] = v20;
    v13 = v9;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_17;
LABEL_3:
  v12 = v6[1];
  *v10 = *v6;
  v10[1] = v12;
  v13 = v7;
LABEL_18:
  memcpy(v11, v13, 0x4C0uLL);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 580);
  *(_QWORD *)(a2 + 10736) = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 24680);
  bzero((void *)(a2 + 10776), 0x800uLL);
  bzero((void *)(a2 + 12824), 0x800uLL);
  result = *(double *)(v21 + 96);
  *(double *)(a2 + 15016) = result;
  *(_DWORD *)(a2 + 15012) = 0;
  *(_DWORD *)(a2 + 15024) = 0;
  *(_BYTE *)(v4 + 2) = 0;
  *(_WORD *)v4 = 0;
  return result;
}

void read_coeffs_tx_intra_block(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  if (!*(_BYTE *)(**(_QWORD **)(a2 + 7864) + 144))
    av1_read_coeffs_txb_facade(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

#error "208D38758: call analysis failed (funcsize=197)"

#error "208D38A5C: call analysis failed (funcsize=151)"

int8x8_t *predict_inter_block(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  int8x8_t *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  __int32 v17;
  int8x8_t v18;
  int *v19;
  _BYTE *v20;
  int v21;
  __int32 v22;
  int v23;
  int8x8_t *result;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int32x2_t v30;
  int32x4_t v31;
  unsigned __int8 *v32;
  uint8x8_t *v33;
  unsigned int v34;
  int v35;
  char **v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  signed int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  __int128 **v52;
  __int128 *v53;
  int v54;
  int v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int32 v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  signed int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  char v79;
  unsigned int v80;
  signed int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  signed int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int32 v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  char v121;
  unsigned int v122;
  signed int v123;
  int v124;
  char v125;
  unsigned int v126;
  signed int v127;
  int v128;
  char v129;
  unsigned int v130;
  signed int v131;
  int v132;
  int v133;
  double v134;
  int8x16_t v135;
  unsigned __int8 *v136;
  _QWORD *v137;
  unsigned int v138;
  unsigned __int8 *v139;
  _QWORD *v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  signed int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  int8x8_t *v155;
  _QWORD *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  _QWORD v174[3];
  _QWORD v175[3];
  __int128 __b;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v6 = (unsigned int *)v3;
  v7 = (int8x8_t *)v2;
  v187 = *MEMORY[0x24BDAC8D0];
  v8 = **(unsigned __int8 ***)(v3 + 7864);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 24680) + 77))
    v9 = 1;
  else
    v9 = 3;
  v11 = *(_DWORD *)v3;
  v10 = *(_DWORD *)(v3 + 4);
  if ((char)v8[16] >= 1)
  {
    v12 = v8[16];
    if (v12 > 8 || (v13 = *(_DWORD *)(v2 + 4 * (v12 - 1) + 240), v13 == -1))
    {
      v14 = 0;
      v15 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(v2 + 8 * v13 + 416);
      v15 = (int *)(v2 + 16 * v13 + 288);
    }
    *(_QWORD *)(v3 + 7944) = v15;
    av1_setup_pre_planes(v3, 0, v14 + 1248, v11, v10, v15, v9);
  }
  if ((char)v8[17] > 0)
  {
    v16 = v8[17];
    if (v16 > 8 || (v17 = v7[29].i32[v16 + 1], v17 == -1))
    {
      v18 = 0;
      v19 = 0;
    }
    else
    {
      v18 = v7[v17 + 52];
      v19 = (int *)&v7[2 * v17 + 36];
    }
    *((_QWORD *)v6 + 994) = v19;
    av1_setup_pre_planes((uint64_t)v6, 1, *(_QWORD *)&v18 + 1248, v11, v10, v19, v9);
  }
  v20 = v6 + 1350;
  v21 = *(unsigned __int8 *)(*(_QWORD *)&v7[3085] + 77);
  v22 = 4 * v10;
  v23 = 4 * v11;
  result = (int8x8_t *)dec_build_inter_predictors_0((uint64_t)v7, (uint64_t)v6, 0, **((unsigned __int8 ***)v6 + 983), 0, *((unsigned __int8 *)v6 + 184), *((unsigned __int8 *)v6 + 185), v22, 4 * v11);
  v32 = (unsigned __int8 *)**((_QWORD **)v6 + 983);
  if ((char)v32[16] >= 1
    && !v32[17]
    && *v32 - 10 >= 0xFFFFFFF9
    && v32[2] - 17 >= 0xFFFFFFFC)
  {
    v33 = (uint8x8_t *)*((_QWORD *)v6 + 4);
    v34 = v6[14];
    av1_predict_intra_block((uint64_t)v6, *(unsigned __int8 *)(*(_QWORD *)&v7[3085] + 28), *(unsigned __int8 *)(*(_QWORD *)&v7[3085] + 61), *((unsigned __int8 *)v6 + 184), *((unsigned __int8 *)v6 + 185), max_txsize_rect_lookup_10[av1_ss_size_lookup[4 * v5 + 2 * v6[5] + v6[6]]], interintra_to_intra_mode[v32[64]], 0, v25, v26, v27, v28, v29, v30, v31, 0, 5u, (uint64_t)v33, v34,
      (int8x8_t *)&__b,
      128,
      0,
      0,
      0);
    result = av1_combine_interintra((uint64_t)v6, v5, 0, v33, v34, (uint8x8_t *)&__b, 0x80u);
  }
  if (!v21 && *((_BYTE *)v6 + 12))
  {
    result = (int8x8_t *)dec_build_inter_predictors_0((uint64_t)v7, (uint64_t)v6, 1, **((unsigned __int8 ***)v6 + 983), 0, *((unsigned __int8 *)v6 + 2792), *((unsigned __int8 *)v6 + 2793), v22, v23);
    v136 = (unsigned __int8 *)**((_QWORD **)v6 + 983);
    if ((char)v136[16] >= 1
      && !v136[17]
      && *v136 - 10 >= 0xFFFFFFF9
      && v136[2] - 17 >= 0xFFFFFFFC)
    {
      v159 = 0;
      v137 = (_QWORD *)*((_QWORD *)v6 + 330);
      v155 = (int8x8_t *)*((_QWORD *)v6 + 4);
      v156 = v137;
      v157 = (uint64_t *)*((_QWORD *)v6 + 656);
      v138 = v6[666];
      LODWORD(v158) = v6[14];
      HIDWORD(v158) = v138;
      LODWORD(v159) = v6[1318];
      result = av1_build_interintra_predictor((uint64_t)v7, (uint64_t)v6);
    }
    if (*((_BYTE *)v6 + 12))
    {
      result = (int8x8_t *)dec_build_inter_predictors_0((uint64_t)v7, (uint64_t)v6, 2, **((unsigned __int8 ***)v6 + 983), 0, *((unsigned __int8 *)v6 + 5400), *((unsigned __int8 *)v6 + 5401), v22, v23);
      v139 = (unsigned __int8 *)**((_QWORD **)v6 + 983);
      if ((char)v139[16] >= 1
        && !v139[17]
        && *v139 - 10 >= 0xFFFFFFF9
        && v139[2] - 17 >= 0xFFFFFFFC)
      {
        v159 = 0;
        v140 = (_QWORD *)*((_QWORD *)v6 + 330);
        v155 = (int8x8_t *)*((_QWORD *)v6 + 4);
        v156 = v140;
        v157 = (uint64_t *)*((_QWORD *)v6 + 656);
        LODWORD(v140) = v6[666];
        LODWORD(v158) = v6[14];
        HIDWORD(v158) = (_DWORD)v140;
        LODWORD(v159) = v6[1318];
        result = av1_build_interintra_predictor((uint64_t)v7, (uint64_t)v6);
      }
    }
  }
  if (v8[24] == 1)
  {
    v35 = *(unsigned __int8 *)(*(_QWORD *)&v7[3085] + 77);
    v173 = 128;
    v172 = 0x8000000080;
    v171 = 128;
    v170 = 0x8000000080;
    v169 = 128;
    v168 = 0x8000000080;
    v167 = 128;
    v166 = 0x8000000080;
    v165 = 128;
    v164 = 0x8000000080;
    v163 = 128;
    v162 = 0x8000000080;
    v175[0] = *((_QWORD *)v6 + 1880);
    v175[1] = v175[0] + 0x4000;
    v175[2] = v175[0] + 0x8000;
    v174[0] = *((_QWORD *)v6 + 1881);
    v174[1] = v174[0] + 0x4000;
    v174[2] = v174[0] + 0x8000;
    v36 = (char **)*((_QWORD *)v6 + 983);
    v148 = v35;
    if (*((_BYTE *)v6 + 7872))
    {
      v37 = *((unsigned __int8 *)v6 + 8309);
      v38 = 16 * v37;
      if (v37 >= 0x10)
        v38 = 256;
      v39 = 32 * v37 - v38;
      v40 = v39 + v6[1984];
      v6[1984] = v40;
      v155 = v7;
      v156 = v175;
      v157 = &v168;
      v158 = &v164;
      v159 = &v172;
      v160 = 0;
      v41 = v6[1982];
      LODWORD(v160) = v41;
      v161 = v6;
      v42 = **v36;
      if (v35)
        v43 = 1;
      else
        v43 = 3;
      v146 = v43;
      v44 = (int)v6[1];
      v45 = v7[67].i32[0];
      if ((int)(v44 + *((unsigned __int8 *)v6 + 8308)) < v45)
        v45 = v44 + *((unsigned __int8 *)v6 + 8308);
      if (((0x3EFFFCuLL >> v42) & 1) != 0 && (int)v44 < v45)
      {
        v141 = v39;
        v46 = 0;
        v149 = max_neighbor_obmc[mi_size_wide_log2_1[v42]];
        v152 = (uint64_t)&(&v36[-v44])[-v6[2]];
        v47 = v6[1];
        v144 = v47;
        v142 = v45;
        do
        {
          v48 = **(unsigned __int8 **)(v152 + 8 * v47);
          if (((0x1F07FFuLL >> v48) & 1) != 0)
            v49 = mi_size_wide_7[v48];
          else
            v49 = 16;
          if (v49 == 1)
            v50 = 2;
          else
            v50 = v49;
          if (v49 == 1)
            v51 = v47 & 0xFFFFFFFE;
          else
            v51 = v47;
          if (v49 == 1)
            v52 = (__int128 **)(v152 + 8 + 8 * (v47 & 0xFFFFFFFFFFFFFFFELL));
          else
            v52 = (__int128 **)(v152 + 8 * v47);
          v53 = *v52;
          if ((*(_WORD *)((_BYTE *)v53 + 167) & 0x80) != 0 || *((char *)v53 + 16) >= 1)
          {
            v54 = v51 - v44;
            if (v20[2908] >= v50)
              v55 = v50;
            else
              v55 = v20[2908];
            v56 = v6[1] + v54;
            v57 = *v53;
            v58 = v53[2];
            v177 = v53[1];
            v178 = v58;
            __b = v57;
            v59 = v53[3];
            v60 = v53[4];
            v61 = v53[6];
            v181 = v53[5];
            v182 = v61;
            v179 = v59;
            v180 = v60;
            v62 = v53[7];
            v63 = v53[8];
            v64 = v53[10];
            v185 = v53[9];
            v186 = v64;
            v183 = v62;
            v184 = v63;
            av1_setup_build_prediction_by_above_pred((uint64_t)v6, v54, v55, (unsigned __int8 *)&__b, (uint64_t *)&v155, v146);
            v65 = 4 * v56;
            v66 = 4 * *v6;
            v67 = ***((unsigned __int8 ***)v6 + 983);
            v68 = block_size_high_7[v67];
            v69 = 4 * v55;
            v70 = (int)v6[5];
            v71 = (int)v6[6];
            if (av1_ss_size_lookup[4 * v67 + 2 * v70 + v71] >= 3u)
            {
              v72 = v71 + 1;
              v73 = v68 >> v72;
              v74 = 0x40u >> v72;
              if ((int)v73 < v74)
                v74 = v73;
              if (v73 >= 4)
                v75 = v74;
              else
                v75 = 4;
              dec_build_inter_predictors_0((uint64_t)v155, (uint64_t)v161, 0, (unsigned __int8 *)&__b, 1, v69 >> v70, v75, v65, v66);
            }
            if (!v148)
            {
              v76 = (int)v6[657];
              v77 = (int)v6[658];
              v78 = &av1_ss_size_lookup[4 * v67];
              if (v78[2 * v76 + v77] >= 3u)
              {
                v79 = v77 + 1;
                v80 = v68 >> v79;
                v81 = 0x40u >> v79;
                if ((int)v80 < v81)
                  v81 = v80;
                if (v80 >= 4)
                  v82 = v81;
                else
                  v82 = 4;
                dec_build_inter_predictors_0((uint64_t)v155, (uint64_t)v161, 1, (unsigned __int8 *)&__b, 1, v69 >> v76, v82, v65, v66);
              }
              v83 = (int)v6[1309];
              v84 = (int)v6[1310];
              if (v78[2 * v83 + v84] >= 3u)
              {
                v85 = v84 + 1;
                v86 = v68 >> v85;
                v87 = 0x40u >> v85;
                if ((int)v86 < v87)
                  v87 = v86;
                if (v86 >= 4)
                  v88 = v87;
                else
                  v88 = 4;
                dec_build_inter_predictors_0((uint64_t)v155, (uint64_t)v161, 2, (unsigned __int8 *)&__b, 1, v69 >> v83, v88, v65, v66);
              }
            }
            ++v46;
            v20 = v6 + 1350;
            LODWORD(v44) = v144;
            v45 = v142;
          }
          v47 = v51 + v50;
        }
        while ((int)(v51 + v50) < v45 && v46 < v149);
        LODWORD(v44) = v6[1];
        v41 = v160;
        v40 = v6[1984];
        v36 = (char **)*((_QWORD *)v6 + 983);
        v39 = v141;
      }
      v6[1981] = -32 * v44;
      v6[1982] = v41;
      v6[1984] = v40 - v39;
    }
    v89 = *v6;
    if (v20[2473])
    {
      v90 = v20[2908];
      v91 = 16 * v90;
      if (v90 >= 0x10)
        v91 = 256;
      v92 = 32 * v90 - v91;
      v93 = v92 + v6[1982];
      v6[1982] = v93;
      v155 = v7;
      v156 = v174;
      v157 = &v166;
      v158 = &v162;
      v159 = &v170;
      v160 = 0;
      v94 = v6[1984];
      LODWORD(v160) = v94;
      v161 = v6;
      v95 = **v36;
      v150 = *(unsigned __int8 *)(*(_QWORD *)&v7[3085] + 77);
      if (*(_BYTE *)(*(_QWORD *)&v7[3085] + 77))
        v96 = 1;
      else
        v96 = 3;
      v147 = v96;
      if ((signed int)(v89 + v20[2909]) >= v7[66].i32[1])
        v97 = v7[66].i32[1];
      else
        v97 = v89 + v20[2909];
      if (((0x3DFFFAuLL >> v95) & 1) != 0 && (int)v89 < v97)
      {
        v143 = v92;
        v145 = v97;
        v98 = 0;
        v151 = max_neighbor_obmc[mi_size_high_log2[v95]];
        v153 = (uint64_t)&v36[-((int)v6[2] * (uint64_t)(int)v89) - 1];
        v154 = v20;
        v99 = v89;
        while (1)
        {
          v100 = v6[2];
          v101 = *(unsigned __int8 **)(v153 + 8 * (int)(v100 * v99));
          v102 = *v101;
          if (((0x2F0BFFuLL >> v102) & 1) != 0)
          {
            if (((0x20005uLL >> v102) & 1) != 0)
            {
              v104 = v99 | 1;
              v99 &= ~1u;
              v101 = *(unsigned __int8 **)(v153 + 8 * (int)(v100 * v104));
              v103 = 2;
              if ((*(_WORD *)(v101 + 167) & 0x80) != 0)
                goto LABEL_98;
            }
            else
            {
              v103 = mi_size_high_6[v102];
              if ((*(_WORD *)(v101 + 167) & 0x80) != 0)
                goto LABEL_98;
            }
          }
          else
          {
            v103 = 16;
            if ((*(_WORD *)(v101 + 167) & 0x80) != 0)
              goto LABEL_98;
          }
          if ((char)v101[16] >= 1)
          {
LABEL_98:
            v105 = v89;
            v106 = v99 - v89;
            if (v154[2909] >= v103)
              v107 = v103;
            else
              v107 = v154[2909];
            v108 = *v6 + v106;
            v109 = *(_OWORD *)v101;
            v110 = *((_OWORD *)v101 + 2);
            v177 = *((_OWORD *)v101 + 1);
            v178 = v110;
            __b = v109;
            v111 = *((_OWORD *)v101 + 3);
            v112 = *((_OWORD *)v101 + 4);
            v113 = *((_OWORD *)v101 + 6);
            v181 = *((_OWORD *)v101 + 5);
            v182 = v113;
            v179 = v111;
            v180 = v112;
            v114 = *((_OWORD *)v101 + 7);
            v115 = *((_OWORD *)v101 + 8);
            v116 = *((_OWORD *)v101 + 10);
            v185 = *((_OWORD *)v101 + 9);
            v186 = v116;
            v183 = v114;
            v184 = v115;
            av1_setup_build_prediction_by_left_pred((uint64_t)v6, v106, v107, (unsigned __int8 *)&__b, (uint64_t *)&v155, v147);
            v117 = 4 * v6[1];
            v118 = 4 * v108;
            v119 = block_size_wide_8[***((unsigned __int8 ***)v6 + 983)];
            v120 = 4 * v107;
            v121 = v6[5] + 1;
            v122 = v119 >> v121;
            v123 = 0x40u >> v121;
            if ((int)v122 < v123)
              v123 = v122;
            if (v122 >= 4)
              v124 = v123;
            else
              v124 = 4;
            dec_build_inter_predictors_0((uint64_t)v155, (uint64_t)v161, 0, (unsigned __int8 *)&__b, 1, v124, v120 >> v6[6], v117, v118);
            if (!v150)
            {
              v125 = v6[657] + 1;
              v126 = v119 >> v125;
              v127 = 0x40u >> v125;
              if ((int)v126 < v127)
                v127 = v126;
              if (v126 >= 4)
                v128 = v127;
              else
                v128 = 4;
              dec_build_inter_predictors_0((uint64_t)v155, (uint64_t)v161, 1, (unsigned __int8 *)&__b, 1, v128, v120 >> v6[658], v117, v118);
              v129 = v6[1309] + 1;
              v130 = v119 >> v129;
              v131 = 0x40u >> v129;
              if ((int)v130 < v131)
                v131 = v130;
              if (v130 >= 4)
                v132 = v131;
              else
                v132 = 4;
              dec_build_inter_predictors_0((uint64_t)v155, (uint64_t)v161, 2, (unsigned __int8 *)&__b, 1, v132, v120 >> v6[1310], v117, v118);
            }
            ++v98;
            v89 = v105;
            v97 = v145;
          }
          v99 += v103;
          if (v99 >= v97 || v98 >= v151)
          {
            LODWORD(v89) = *v6;
            v93 = v6[1982];
            v94 = v160;
            v36 = (char **)*((_QWORD *)v6 + 983);
            v92 = v143;
            break;
          }
        }
      }
      v6[1983] = -32 * v89;
      v6[1982] = v93 - v92;
      v6[1984] = v94;
    }
    if (v148)
      v133 = 1;
    else
      v133 = 3;
    av1_setup_dst_planes((uint64_t)(v6 + 4), **v36, *(_QWORD *)&v7[29] + 1248, v89, v6[1], 0, v133);
    return av1_build_obmc_inter_prediction(v7, (int *)v6, v175, (unsigned int *)&v172, v174, (unsigned int *)&v170, v134, v135);
  }
  return result;
}

uint64_t cfl_store_inter_block(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  if (!*(_BYTE *)(*(_QWORD *)(result + 24680) + 77))
  {
    v2 = **(unsigned __int8 ***)(a2 + 7864);
    if (!*(_BYTE *)(a2 + 12) || (*(_WORD *)(v2 + 167) & 0x80) == 0 && (char)v2[16] <= 0 && v2[3] == 13)
      return cfl_store_block(a2, *v2, v2[145]);
  }
  return result;
}

_DWORD *dec_build_inter_predictors_0(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, __int32 a8, int a9)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  __int128 v45;
  uint32x2_t v46;
  _UNKNOWN **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  _UNKNOWN **v62;
  BOOL v63;
  _UNKNOWN **v64;
  _UNKNOWN **v65;
  _UNKNOWN **v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  _UNKNOWN **v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  _DWORD *result;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 *v88;
  uint64_t v89;
  _BOOL4 v90;
  _BOOL4 v91;
  uint64_t v92;
  _BOOL4 *v93;
  unsigned __int8 *v94;
  int v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int32x2_t v100;
  int32x2_t v101;
  int32x2_t v102;
  _OWORD *v103;
  uint32x2_t v104;
  uint64_t v105;
  _OWORD *v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int32x2_t v113;
  BOOL v114;
  _UNKNOWN **v115;
  BOOL v116;
  _UNKNOWN **v117;
  _UNKNOWN **v118;
  _UNKNOWN **v119;
  __int128 v120;
  int v121;
  int v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned __int8 *v128;
  __int128 v129;
  __int128 v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  BOOL v136;
  int v137;
  int32x2_t *v138;
  unsigned int *v139;
  int v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  _OWORD *v145;
  char v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  int32x2_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE v158[208];
  int32x2_t v159;
  _QWORD v160[3];

  v152.i32[1] = a8;
  v10 = a3;
  v11 = a1;
  v152.i32[0] = a9;
  v160[1] = *MEMORY[0x24BDAC8D0];
  v154 = a2 + 15064;
  v12 = *a4;
  v13 = *(unsigned __int16 *)(a4 + 167);
  if ((v13 >> 7) & 1 | a5)
    goto LABEL_41;
  v14 = a2 + 2608 * v10;
  v16 = *(_DWORD *)(v14 + 20);
  v15 = *(_DWORD *)(v14 + 24);
  v17 = (_QWORD *)(v14 + 20);
  v18 = 0x10003uLL >> v12;
  v19 = (0x10003uLL >> v12) & (v16 != 0);
  v20 = 0x20005uLL >> v12;
  v21 = (0x20005uLL >> v12) & (v15 != 0);
  if (((0x10003uLL >> v12) & (v16 != 0)) == 0 && !v21)
    goto LABEL_41;
  if ((v22 = *(_QWORD *)(a2 + 7864),
        v23 = (v21 << 31 >> 31) * (uint64_t)*(int *)(a2 + 8),
        v24 = *(_QWORD *)(v22 + 8 * (v23 - v19)),
        (*(_WORD *)(v24 + 167) & 0x80) != 0)
    || *(char *)(v24 + 16) < 1
    || (_DWORD)v19
    && ((v25 = *(_QWORD *)(v22 + 8 * (v23 + !((0x10003uLL >> v12) & (v16 != 0)))),
         (*(_WORD *)(v25 + 167) & 0x80) != 0)
     || *(char *)(v25 + 16) < 1)
    || v21
    && ((v26 = *(_QWORD *)(v22 + 8 * ((uint64_t)(v19 << 63) >> 63)), (*(_WORD *)(v26 + 167) & 0x80) != 0)
     || *(char *)(v26 + 16) < 1
     || (_DWORD)v19
     && ((v27 = *(_QWORD *)(v22 + 8 * !((0x10003uLL >> v12) & (v16 != 0))),
          (*(_WORD *)(v27 + 167) & 0x80) != 0)
      || *(char *)(v27 + 16) < 1)))
  {
LABEL_41:
    v78 = (char *)(a4 + 17);
    v79 = (char)a4[17];
    v80 = a2 + 2608 * v10;
    v143 = *(_QWORD *)(v80 + 32);
    v145 = (_OWORD *)(v80 + 32);
    v160[0] = 0;
    v81 = *(_QWORD *)(a2 + 10744);
    v82 = block_size_wide_8[v12];
    v83 = a4[2];
    if (v82 >= block_size_high_7[v12])
      v82 = block_size_high_7[v12];
    v85 = v83 == 15 || v83 == 23;
    if (v79 <= 0)
      v86 = 1;
    else
      v86 = 2;
    v151 = v79;
    if (v79 < 1)
    {
      v87 = 0;
    }
    else
    {
      v87 = v86 & 2;
      v88 = (_BOOL4 *)v160 + 1;
      v89 = v87;
      do
      {
        v90 = *(unsigned __int8 *)(v81 + 36 * *(v78 - 1) + 32) > 1u && v85;
        v91 = *(unsigned __int8 *)(v81 + 36 * *v78 + 32) > 1u && v85;
        if (v82 <= 7)
        {
          v90 = 0;
          v91 = 0;
        }
        *(v88 - 1) = v90;
        *v88 = v91;
        v78 += 2;
        v88 += 2;
        v89 -= 2;
      }
      while (v89);
      if ((v86 & 2) != 0)
        goto LABEL_73;
    }
    v92 = v86 - v87;
    v93 = (_BOOL4 *)v160 + v87;
    v94 = &a4[v87 + 16];
    do
    {
      v95 = (char)*v94++;
      v96 = *(unsigned __int8 *)(v81 + 36 * v95 + 32) > 1u && v85;
      if (v82 <= 7)
        v96 = 0;
      *v93++ = v96;
      --v92;
    }
    while (v92);
LABEL_73:
    v97 = 0;
    v98 = 0;
    v99 = a2 + 2608 * v10;
    v100 = *(int32x2_t *)(v99 + 20);
    v99 += 20;
    v136 = a5 != 0;
    v101 = vrev64_s32(v100);
    v102 = vshl_s32(vadd_s32(vshl_n_s32(vcltz_s32(vshl_n_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a5 == 0), vbic_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)xmmword_208F568F0, (uint64x2_t)vnegq_s64(vdupq_n_s64(v12)))), (int8x8_t)vceqz_s32(v101))), 0x1FuLL)), 2uLL), v152), vneg_s32(v101));
    v132 = v11 + 272;
    v131 = (unsigned int *)(v99 + 36);
    v138 = (int32x2_t *)v99;
    v103 = (_OWORD *)(v99 + 44);
    v104 = (uint32x2_t)vdup_n_s32(0x120u);
    v147 = a6;
    v149 = a7;
    v146 = v13;
    v141 = v86;
    while (1)
    {
      v105 = v132;
      if ((v13 & 0x80) == 0)
        v105 = *(_QWORD *)(a2 + 7944 + 8 * v98);
      v106 = v145;
      if ((v13 & 0x80) == 0)
        v106 = v103;
      v107 = *(_DWORD *)&a4[4 * v98 + 8];
      v108 = *((_DWORD *)v160 + v98);
      v109 = a4[24];
      memset(&v158[8], 0, 200);
      v110 = *(_DWORD *)(a2 + 10656);
      v111 = (*(unsigned __int16 *)(a4 + 167) >> 7) & 1;
      v112 = *((_DWORD *)a4 + 5);
      *(_DWORD *)&v158[112] = a6;
      *(_DWORD *)&v158[116] = a7;
      *(_DWORD *)&v158[176] = v110;
      *(_DWORD *)&v158[204] = v111;
      *(_QWORD *)v158 = 0;
      v113 = *v138;
      *(int32x2_t *)&v158[120] = v102;
      *(int32x2_t *)&v158[160] = v113;
      v159 = vrev64_s32(vsub_s32((int32x2_t)0x100000001000, vshl_n_s32((int32x2_t)vshl_u32(v104, (uint32x2_t)vneg_s32(v113)), 0xAuLL)));
      if (v111)
      {
        v119 = &av1_intrabc_filter_params;
        v117 = &av1_intrabc_filter_params;
      }
      else
      {
        v114 = (*(_QWORD *)&v112 & 0xFF0000) != 0x40000 && a6 < 5;
        if (v114)
          v115 = &av1_interp_4tap;
        else
          v115 = &av1_interp_filter_params_list;
        v116 = v112 != 4 && a7 < 5;
        v117 = &v115[2 * BYTE2(v112)];
        if (v116)
          v118 = &av1_interp_4tap;
        else
          v118 = &av1_interp_filter_params_list;
        v119 = &v118[2 * v112];
      }
      *(_QWORD *)&v158[96] = v117;
      *(_QWORD *)&v158[104] = v119;
      *(_QWORD *)&v158[168] = v105;
      v120 = v106[1];
      *(_OWORD *)&v158[128] = *v106;
      *(_OWORD *)&v158[144] = v120;
      if (v151 < 1)
      {
        v121 = 0;
        v122 = 11;
      }
      else
      {
        v121 = 1;
        *(_DWORD *)&v158[4] = 1;
        v122 = 7;
      }
      v123 = *(_QWORD *)(a2 + 15032);
      *(_QWORD *)&v158[48] = v98;
      *(_QWORD *)&v158[56] = v123;
      *(_QWORD *)&v158[64] = 0x300000080;
      *(_DWORD *)&v158[72] = v122;
      *(_DWORD *)&v158[76] = v10;
      *(_DWORD *)&v158[80] = v121;
      *(_QWORD *)&v158[84] = 0;
      *(_DWORD *)&v158[92] = 0;
      av1_dist_wtd_comp_weight_assign(v11, (uint64_t)a4, &v158[88], &v158[92], &v158[84], v151 > 0);
      v124 = v136;
      if (*(int *)&v158[116] < 8)
        v124 = 1;
      if ((v124 & 1) != 0)
        goto LABEL_102;
      if (*(int *)&v158[112] < 8)
        goto LABEL_102;
      if (*(_DWORD *)(a2 + 10728))
        goto LABEL_102;
      v125 = *(_QWORD *)(a2 + 10744);
      v126 = (char)a4[(v97 >> 32) + 16];
      if (**(_DWORD **)&v158[168] != -1)
      {
        v127 = *(_DWORD *)(*(_QWORD *)&v158[168] + 4);
        if (v127 != -1 && (**(_DWORD **)&v158[168] != 0x4000 || v127 != 0x4000))
          goto LABEL_102;
      }
      *(_OWORD *)&v158[8] = default_warp_params_2;
      *(_OWORD *)&v158[24] = xmmword_208F70A00;
      *(_DWORD *)&v158[40] = 0;
      if (v109 != 2 || (v128 = a4 + 28, a4[61]))
      {
        if (!v108 || *(_BYTE *)(v125 + 36 * v126 + 33))
          goto LABEL_102;
        v128 = (unsigned __int8 *)(v125 + 36 * v126);
      }
      v129 = *(_OWORD *)v128;
      v130 = *((_OWORD *)v128 + 1);
      *(_DWORD *)&v158[40] = *((_DWORD *)v128 + 8);
      *(_OWORD *)&v158[8] = v129;
      *(_OWORD *)&v158[24] = v130;
      *(_DWORD *)v158 = 1;
LABEL_102:
      if ((a4[83] & 0xFE) == 2)
      {
        v158[200] = *a4;
        *(_OWORD *)&v158[184] = *(_OWORD *)(a4 + 72);
        if (v98 == 1)
        {
          *(_DWORD *)&v158[48] = 0;
          *(_DWORD *)&v158[4] = 2;
        }
        *(_QWORD *)&v158[184] = *(_QWORD *)(a2 + 10768);
      }
      result = build_one_inter_predictor(v143, *v131, v107, HIWORD(v107), (int32x2_t *)v158, (_DWORD *)a2, v152.i32[1], a9, v98++, v154);
      v97 += 0x100000000;
      v103 += 2;
      v11 = a1;
      v10 = a3;
      a6 = v147;
      a7 = v149;
      LOBYTE(v13) = v146;
      if (v141 == v98)
        return result;
    }
  }
  v150 = 0;
  v28 = v16 != 0;
  v29 = v15 != 0;
  v30 = block_size_wide_8[v12] >> v28;
  v31 = block_size_high_7[v12] >> v29;
  v32 = &av1_ss_size_lookup[4 * v12 + 2 * v28];
  if (v15)
    ++v32;
  v33 = *v32;
  v34 = block_size_wide_8[v33];
  v135 = block_size_high_7[v33];
  v144 = a4;
  LODWORD(v33) = (char)a4[17];
  v114 = (int)v33 <= 0;
  v35 = (int)v33 > 0;
  v36 = (int)((v20 & v29) << 31) >> 31;
  v37 = v18 & v28;
  v38 = (v152.i32[1] + 4 * ((int)((_DWORD)v37 << 31) >> 31)) >> v28;
  v134 = (a9 + 4 * v36) >> v29;
  v39 = a2 + 2608 * v10;
  v40 = (_QWORD *)(v39 + 32);
  v41 = &v158[48];
  if (v114)
    v42 = 11;
  else
    v42 = 7;
  v43 = &v158[84];
  v44 = v152.u32[1];
  v133 = v37 << 63 >> 63;
  v45 = 0uLL;
  v46 = (uint32x2_t)vdup_n_s32(0x120u);
  v47 = &av1_interp_filter_params_list;
  v140 = v38;
  v142 = (_QWORD *)(v39 + 32);
  v139 = (unsigned int *)(v39 + 56);
  v137 = v42;
  do
  {
    v48 = 0;
    v148 = v36;
    v49 = v133;
    do
    {
      v153 = v49;
      v50 = *(_QWORD *)(*(_QWORD *)(a2 + 7864) + 8 * (v49 + *(int *)(a2 + 8) * (uint64_t)v36));
      v51 = *v139;
      v52 = *v40 + (int)(v150 * v51);
      v53 = *(_DWORD *)(v11 + 4 * (*(unsigned __int8 *)(v50 + 16) - 1) + 240);
      v54 = *(_DWORD **)(v11 + 8 * v53 + 416);
      v55 = 326;
      if (v10 == 1)
        v55 = 324;
      v56 = *(_QWORD *)&v54[v55];
      v57 = *(_DWORD *)(v50 + 8);
      v159 = 0;
      *(_OWORD *)&v158[176] = v45;
      *(_OWORD *)&v158[192] = v45;
      *(_OWORD *)&v158[144] = v45;
      *(_OWORD *)&v158[160] = v45;
      *(_OWORD *)&v158[112] = v45;
      *(_OWORD *)&v158[128] = v45;
      *(_OWORD *)&v158[80] = v45;
      *(_OWORD *)&v158[96] = v45;
      *(_OWORD *)&v158[48] = v45;
      *(_OWORD *)&v158[64] = v45;
      *(_OWORD *)&v158[16] = v45;
      *(_OWORD *)&v158[32] = v45;
      v58 = *(_DWORD *)(a2 + 10656);
      v59 = *(unsigned __int16 *)(v144 + 167);
      v60 = *(_DWORD *)(v50 + 20);
      *(_DWORD *)&v158[124] = v140 + v48;
      *(_DWORD *)&v158[176] = v58;
      *(_DWORD *)&v158[204] = (v59 >> 7) & 1;
      if ((*(_QWORD *)&v60 & 0xFF0000) == 0x40000 || v30 >= 5)
        v62 = v47;
      else
        v62 = &av1_interp_4tap;
      v63 = v60 == 4 || v31 >= 5;
      v64 = &v62[2 * BYTE2(v60)];
      if (v63)
        v65 = v47;
      else
        v65 = &av1_interp_4tap;
      v66 = &v65[2 * v60];
      if (((v59 >> 7) & 1) != 0)
      {
        v64 = &av1_intrabc_filter_params;
        v66 = &av1_intrabc_filter_params;
      }
      *(_QWORD *)&v158[96] = v64;
      *(_QWORD *)&v158[104] = v66;
      *(_QWORD *)&v158[168] = v11 + 16 * v53 + 288;
      v67 = v54[317];
      *(_QWORD *)&v158[128] = 0;
      *(_QWORD *)&v158[136] = v56;
      v68 = v54[319];
      *(_DWORD *)&v158[144] = v67;
      *(_DWORD *)&v158[120] = v150 + v134;
      v69 = v52 + v48;
      v70 = v54[321];
      *(_OWORD *)v158 = v45;
      *(_DWORD *)&v158[112] = v30;
      *(_DWORD *)&v158[116] = v31;
      *(_DWORD *)&v158[180] = 0;
      *(_QWORD *)&v158[160] = *v17;
      v159 = vrev64_s32(vsub_s32((int32x2_t)0x100000001000, vshl_n_s32((int32x2_t)vshl_u32(v46, (uint32x2_t)vneg_s32(*(int32x2_t *)&v158[160])), 0xAuLL)));
      *(_DWORD *)&v158[148] = v68;
      *(_QWORD *)&v158[152] = v70;
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = 0;
      *((_DWORD *)v41 + 4) = 0;
      *(_DWORD *)&v158[68] = 3;
      *(_DWORD *)&v158[72] = v42;
      *(_DWORD *)&v158[76] = v10;
      *(_DWORD *)&v158[80] = v35;
      *(_QWORD *)v43 = 0;
      *((_DWORD *)v43 + 2) = 0;
      v71 = v44 + v48;
      v72 = v47;
      v73 = v41;
      v74 = v44;
      v75 = v43;
      v76 = v34;
      result = build_one_inter_predictor(v69, v51, v57, HIWORD(v57), (int32x2_t *)v158, (_DWORD *)a2, v71, v150 + a9, 0, v154);
      v45 = 0uLL;
      v42 = v137;
      v41 = v73;
      v47 = v72;
      v40 = v142;
      v36 = v148;
      v34 = v76;
      v43 = v75;
      v44 = v74;
      v11 = a1;
      v10 = a3;
      v48 += v30;
      v49 = v153 + 1;
    }
    while (v48 < v34);
    v36 = v148 + 1;
    v150 += v31;
  }
  while (v150 < v135);
  return result;
}

_DWORD *build_one_inter_predictor(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int32x2_t *a5, _DWORD *a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  int *v13;
  int32x2_t v14;
  int v15;
  int v16;
  __int32 v17;
  __int32 v18;
  int32x2_t v19;
  uint32x2_t v20;
  uint32x2_t v21;
  int32x2_t v22;
  uint32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  int32x2_t v37;
  __int32 v38;
  uint64_t v39;
  _BOOL4 v40;
  __int32 v41;
  int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v50;
  int v52;
  uint32x2_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int32x2_t v63;
  int8x8_t v64;
  int v65;
  int v66;
  uint64_t v67;
  __int32 v68;
  int v69;
  int v70;
  int v71;
  __int32 v72;
  __int32 v73;
  int v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v107;
  char *v108;
  int v109;
  uint64_t v111;
  char *v112;
  int v113;
  uint64_t v115;
  char *v116;
  size_t v117;
  int v118;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  char *v123;
  int v124;
  uint64_t v126;
  char *v127;
  size_t v128;
  int v129;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  size_t v134;
  int v135;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  int8x8_t v149;
  uint64_t v150;

  v148 = 0;
  v149 = 0;
  v150 = 0;
  v13 = (int *)a5[21];
  v14 = a5[14];
  v15 = *v13;
  if (*v13 == -1 || (v16 = v13[1], v16 == -1) || v15 == 0x4000 && v16 == 0x4000)
  {
    v18 = a5[15].i32[0];
    v17 = a5[15].i32[1];
    v19 = vshl_n_s32(v14, 4uLL);
    v20 = (uint32x2_t)vsub_s32((int32x2_t)0x100000001, a5[20]);
    v21.i32[0] = a6[1982];
    v21.i32[1] = a6[1984];
    v22 = (int32x2_t)vshl_u32(v21, v20);
    v23.i32[0] = a6[1981];
    v23.i32[1] = a6[1983];
    v24 = (int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(a3, a4), v20);
    v25 = vadd_s32(vsub_s32((int32x2_t)vshl_u32(v23, v20), v19), (int32x2_t)0x3F0000003FLL);
    v26 = vshr_n_s32(vshl_n_s32(v24, 0x10uLL), 0x10uLL);
    v27 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v25, v26), (int8x8_t)v25, (int8x8_t)vmin_s32(v26, vadd_s32(vadd_s32(v19, (int32x2_t)0x3000000030), v22)));
    v28 = (int32x2_t)vand_s8((int8x8_t)v27, (int8x8_t)0xF0000000FLL);
    v29 = v27.i16[0];
    v30 = v27.i16[2];
    v22.i32[0] = vshl_n_s32(v28, 6uLL).u32[0];
    v22.i32[1] = vand_s8((int8x8_t)vshl_n_s32(v27, 6uLL), (int8x8_t)vdup_n_s32(0x3C0u)).i32[1];
    v148 = 0x40000000400;
    v149 = (int8x8_t)v22;
    v31 = (v27.i16[0] + 16 * v17) >> 4;
    v32 = ((v27.i16[2] + 16 * v18) >> 4);
    v33 = v31 + v14.i32[0];
    v34 = v32 | ((unint64_t)(v32 + v14.i32[1]) << 32);
    v35 = v27.i8[4] & 0xF;
    v36 = v28.i32[0];
    goto LABEL_6;
  }
  v52 = 1 - HIDWORD(*(_QWORD *)&a5[20]);
  v53 = (uint32x2_t)vneg_s32(a5[20]);
  v54 = 1 - *(_QWORD *)&a5[20];
  v55 = 8 * v16 - 0x20000;
  v56 = v55 + v16 * (uint64_t)(((__int16)a3 << (1 - HIDWORD(*(_QWORD *)&a5[20]))) + 16 * a5[15].i32[0]);
  if (v56 < 0)
    v57 = -(uint64_t)((unint64_t)(128 - v56) >> 8);
  else
    v57 = (unint64_t)(v56 + 128) >> 8;
  v58 = 8 * v15 - 0x20000;
  v59 = v58 + v15 * (uint64_t)(((__int16)a4 << (1 - *(_QWORD *)&a5[20])) + 16 * a5[15].i32[1]);
  if (v59 < 0)
    v60 = -(uint64_t)((unint64_t)(128 - v59) >> 8);
  else
    v60 = (unint64_t)(v59 + 128) >> 8;
  v61 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(0x120u), v53);
  v62 = vadd_s32((int32x2_t)__PAIR64__(v57, v60), (int32x2_t)0x2000000020);
  v63 = vsub_s32((int32x2_t)0x100000001000, vshl_n_s32(v61, 0xAuLL));
  v64 = vbsl_s8((int8x8_t)vcgt_s32(v63, v62), (int8x8_t)v63, (int8x8_t)vmin_s32(v62, vadd_s32(vshl_n_s32(a5[18], 0xAuLL), (int32x2_t)0x100000001000)));
  v149 = vand_s8(v64, (int8x8_t)0x300000003);
  v65 = v13[3];
  LODWORD(v148) = v13[2];
  HIDWORD(v148) = v65;
  v66 = v64.i32[0] + v148 * (v14.i32[0] - 1);
  v67 = (((v64.i32[1] + v65 * (v14.i32[1] - 1)) >> 10) + 1);
  v68 = 16 * v14.i32[0] + (a6[1982] << v54);
  v69 = 16 * v14.i32[1] + (a6[1984] << v52);
  v70 = a3 << v52;
  v71 = a4 << v54;
  v72 = (a6[1981] << v54) - 16 * v14.i32[0] - 64;
  v73 = v68 + 48;
  v74 = (a6[1983] << v52) - 16 * v14.i32[1] - 64;
  v75 = v69 + 48;
  if ((__int16)v71 < v73)
    LOWORD(v73) = v71;
  if (v72 > (__int16)v71)
    LOWORD(v73) = v72;
  if ((__int16)v70 < v75)
    LOWORD(v75) = v70;
  if (v74 <= (__int16)v70)
    v76 = v75;
  else
    v76 = v74;
  v77 = v58 + v15 * (uint64_t)(16 * a7);
  if (v77 < 0)
  {
    v78 = -(uint64_t)((unint64_t)(128 - v77) >> 8);
    v79 = v66 >> 10;
    v80 = 16 * a8;
    v81 = v55 + v16 * (uint64_t)(16 * a8);
    if ((v81 & 0x8000000000000000) == 0)
      goto LABEL_49;
LABEL_66:
    v82 = -(uint64_t)((unint64_t)(128 - v81) >> 8);
    goto LABEL_67;
  }
  v78 = (unint64_t)(v77 + 128) >> 8;
  v79 = v66 >> 10;
  v80 = 16 * a8;
  v81 = v55 + v16 * (uint64_t)(16 * a8);
  if (v81 < 0)
    goto LABEL_66;
LABEL_49:
  v82 = (unint64_t)(v81 + 128) >> 8;
LABEL_67:
  v31 = v64.i32[0] >> 10;
  v33 = v79 + 1;
  v34 = (v64.i32[1] >> 10) | (unint64_t)(v67 << 32);
  v88 = v55 + v16 * (uint64_t)(v80 + v76);
  if (v88 < 0)
    v89 = -(uint64_t)((unint64_t)(128 - v88) >> 8);
  else
    v89 = (unint64_t)(v88 + 128) >> 8;
  v90 = v58 + v15 * (uint64_t)(16 * a7 + (__int16)v73);
  if (v90 < 0)
    v91 = -(uint64_t)((unint64_t)(128 - v90) >> 8);
  else
    v91 = (unint64_t)(v90 + 128) >> 8;
  v30 = v89 - v82 + 32;
  v29 = v91 - v78 + 32;
  v36 = v29 & 0x3FF;
  v35 = v30 & 0x3FF;
LABEL_6:
  v37 = a5[17];
  v38 = a5[19].i32[0];
  v39 = *(_QWORD *)&v37 + v38 * (int)v34 + v31;
  v40 = a5->i32[0] == 1;
  v41 = a5[25].i32[1];
  if (v15 == -1)
  {
    v44 = 0;
    if (v41 | v40)
    {
LABEL_28:
      v50 = a5[19].u32[0];
      goto LABEL_29;
    }
  }
  else
  {
    v42 = v13[1];
    v43 = v15 != 0x4000 || v42 != 0x4000;
    v44 = v42 != -1 && v43;
    if (v41 | v40)
      goto LABEL_28;
  }
  v45 = a5[18].i32[1];
  v46 = a5[18].i32[0];
  if (!v44)
  {
    v47 = !v29 && v30 == 0;
    v48 = v47 && (a5[18].i32[0] & 7) == 0;
    if (v48 && (a5[18].i32[1] & 7) == 0)
      goto LABEL_28;
  }
  v83 = HIDWORD(v34);
  if (v36 || v13[2] != 16)
  {
    v31 -= 3;
    v33 += 4;
    v84 = 3;
    if (!v35)
      goto LABEL_55;
LABEL_57:
    LODWORD(v34) = v34 - 3;
    LODWORD(v83) = v83 + 4;
    v85 = 3;
    goto LABEL_58;
  }
  v84 = 0;
  if (v35)
    goto LABEL_57;
LABEL_55:
  if (v13[3] != 16)
    goto LABEL_57;
  v85 = 0;
LABEL_58:
  if (v31 < 0 || v33 >= (int)v46 || (v34 & 0x80000000) != 0 || (v50 = a5[19].u32[0], (int)v83 >= v45))
  {
    v86 = v31;
    v50 = v33 - (uint64_t)v31;
    v141 = a2;
    v140 = a1;
    if ((int)v34 >= v45)
    {
      v87 = (v45 - 1) * v38;
    }
    else
    {
      v87 = v34 * v38;
      if ((int)v34 <= 0)
        v87 = 0;
    }
    v92 = v38;
    v93 = (unsigned __int8 *)(*(_QWORD *)&v37 + v87);
    if ((-v31 & (v31 >> 31)) >= (int)v50)
      v94 = v33 - v31;
    else
      v94 = -v31 & (v31 >> 31);
    v95 = v33 - v46;
    if (v33 <= (int)v46)
      v95 = 0;
    if (v95 >= (int)v50)
      v96 = v50;
    else
      v96 = v95;
    v97 = v96 + v94;
    v98 = v94;
    v99 = (int)v50 - (v96 + v94);
    v100 = v46 - 1;
    v101 = v96;
    v147 = v83;
    v146 = a5[18].i32[1];
    v102 = v92;
    v142 = *(_QWORD *)(a10 + 8 * a9);
    v139 = v84;
    v138 = v85;
    if (v94)
    {
      if (v96)
      {
        if ((_DWORD)v50 == v97)
        {
          v103 = v94 + v99;
          v104 = *(char **)(a10 + 8 * a9);
          do
          {
            memset(v104, *v93, v98);
            memset(&v104[v103], v93[v100], v101);
            v104 += v50;
            v105 = v34 + 1;
            if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
              v107 = 0;
            else
              v107 = v102;
            v93 += v107;
            LODWORD(v34) = v34 + 1;
          }
          while (v147 != v105);
        }
        else
        {
          v143 = v94 + v99;
          v144 = v86;
          v116 = *(char **)(a10 + 8 * a9);
          v117 = (int)v50 - (v96 + v94);
          do
          {
            memset(v116, *v93, v98);
            memcpy(&v116[v98], &v93[v144 + v98], v117);
            memset(&v116[v143], v93[v100], v101);
            v116 += v50;
            v118 = v34 + 1;
            if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
              v120 = 0;
            else
              v120 = v102;
            v93 += v120;
            LODWORD(v34) = v34 + 1;
          }
          while (v147 != v118);
        }
      }
      else if ((_DWORD)v50 == v97)
      {
        v112 = *(char **)(a10 + 8 * a9);
        do
        {
          memset(v112, *v93, v98);
          v112 += v50;
          v113 = v34 + 1;
          if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
            v115 = 0;
          else
            v115 = v102;
          v93 += v115;
          LODWORD(v34) = v34 + 1;
        }
        while (v147 != v113);
      }
      else
      {
        v132 = *(char **)(a10 + 8 * a9);
        v133 = v86;
        v134 = (int)v50 - v97;
        do
        {
          memset(v132, *v93, v98);
          memcpy(&v132[v98], &v93[v133 + v98], v134);
          v132 += v50;
          v135 = v34 + 1;
          if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
            v137 = 0;
          else
            v137 = v102;
          v93 += v137;
          LODWORD(v34) = v34 + 1;
        }
        while (v147 != v135);
      }
    }
    else if (v96)
    {
      if ((_DWORD)v50 == v97)
      {
        v108 = (char *)(*(_QWORD *)(a10 + 8 * a9) + v99);
        do
        {
          memset(v108, v93[v100], v101);
          v109 = v34 + 1;
          if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
            v111 = 0;
          else
            v111 = v102;
          v93 += v111;
          v108 += v50;
          LODWORD(v34) = v34 + 1;
        }
        while (v147 != v109);
      }
      else
      {
        v127 = *(char **)(a10 + 8 * a9);
        v145 = v86;
        v128 = (int)v50 - v97;
        do
        {
          memcpy(v127, &v93[v145 + v98], v128);
          memset(&v127[v128], v93[v100], v101);
          v129 = v34 + 1;
          if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
            v131 = 0;
          else
            v131 = v102;
          v93 += v131;
          v127 += v50;
          LODWORD(v34) = v34 + 1;
        }
        while (v147 != v129);
      }
    }
    else if ((_DWORD)v50 != v97)
    {
      v121 = v86;
      v122 = (int)v50 - v97;
      v123 = *(char **)(a10 + 8 * a9);
      do
      {
        memcpy(v123, &v93[v121 + v98], v122);
        v124 = v34 + 1;
        if ((int)v34 + 1 >= v146 || (int)v34 <= -1)
          v126 = 0;
        else
          v126 = v102;
        v93 += v126;
        v123 += v50;
        LODWORD(v34) = v34 + 1;
      }
      while (v147 != v124);
    }
    a1 = v140;
    v39 = v142 + v138 * (int)v50 + v139;
    a2 = v141;
  }
LABEL_29:
  if (a5->i32[1] > 1u)
    return av1_make_masked_inter_predictor(v39, v50);
  else
    return (_DWORD *)av1_make_inter_predictor(v39, v50, a1, a2, (uint64_t)a5, (int *)&v148);
}

void *av1_zero_above_context(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v8;
  int v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1[3085];
  v9 = *(unsigned __int8 *)(v8 + 77);
  v10 = (a4 - a3 + ~(-1 << *(_DWORD *)(v8 + 36))) & (unint64_t)(-1 << *(_DWORD *)(v8 + 36));
  v11 = *(_DWORD *)(v8 + 96);
  v12 = a5;
  v13 = a3;
  bzero((void *)(*(_QWORD *)(a1[3164] + 8 * a5) + a3), v10);
  if (!v9)
  {
    v14 = *(_QWORD *)(a1[3165] + 8 * v12);
    if (v14 && *(_QWORD *)(a1[3166] + 8 * v12))
    {
      v15 = a3 >> v11;
      bzero((void *)(v14 + v15), (int)v10 >> v11);
      bzero((void *)(*(_QWORD *)(a1[3166] + 8 * v12) + v15), (int)v10 >> v11);
    }
    else
    {
      aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Invalid value of planes");
    }
  }
  bzero((void *)(*(_QWORD *)(a1[3163] + 8 * v12) + v13), v10);
  return memset((void *)(*(_QWORD *)(a1[3167] + 8 * v12) + v13), 64, v10);
}

uint64_t decode_partition_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int16 v90;
  unsigned __int16 v91;
  uint64_t v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  unsigned int v105;
  unsigned int v106;
  char v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t *v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unint64_t v127;
  int8x16_t *v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  unsigned __int8 *v132;
  unint64_t v133;
  int8x16_t *v134;
  unsigned int v135;
  int v136;
  unint64_t v137;
  unsigned __int8 *v138;
  unint64_t v139;
  int8x16_t *v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  unsigned __int8 *v144;
  unsigned __int16 v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  _DWORD *v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int primitive_subexpfin;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int8x16_t v173;
  int32x4_t v174;
  uint32x4_t v175;
  uint32x4_t v176;
  uint32x4_t v177;
  uint32x4_t v178;
  uint64_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  BOOL v184;
  int8x16_t v185;
  int v186;
  BOOL v187;
  unint64_t v188;
  uint64_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int8x16_t v192;
  int32x4_t v193;
  uint32x4_t v194;
  uint32x4_t v195;
  uint32x4_t v196;
  uint32x4_t v197;
  uint64_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  BOOL v203;
  int8x16_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int8x16_t v210;
  int32x4_t v211;
  uint32x4_t v212;
  uint32x4_t v213;
  uint32x4_t v214;
  uint32x4_t v215;
  uint64_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  BOOL v221;
  int8x16_t v222;
  int v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned __int8 v234;
  int v235;
  unsigned __int8 **v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unsigned int v243;
  int16x8_t *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  __int16 v255;
  unsigned int v256;
  unint64_t v257;
  int8x16_t *v258;
  int v259;
  unint64_t v260;
  unsigned __int8 *v261;
  __int16 v262;
  BOOL v263;
  char v264;
  __int16 v265;
  unsigned __int8 *v266;
  unint64_t v268;
  uint64_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int8x16_t v272;
  int32x4_t v273;
  uint32x4_t v274;
  uint32x4_t v275;
  uint32x4_t v276;
  uint32x4_t v277;
  int16x8_t v278;
  int32x4_t v279;
  uint64_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  BOOL v285;
  int8x16_t v286;
  int v287;
  int64_t v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  int64_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t v295;
  int64x2_t v296;
  int64x2_t v297;
  uint32x4_t v298;
  uint32x4_t v299;
  int64x2_t v300;
  int64_t v301;
  int16x8_t *v302;
  unsigned int v303;
  unsigned int v304;
  __int16 v305;
  uint64_t v306;
  __int16 v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t (*v310)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void (*v317)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v318)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v319)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v320;
  _DWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  size_t v329;
  unsigned __int8 *v330;
  size_t v331;
  size_t v332;
  unsigned __int8 *v333;
  void *v334;
  void *v335;
  unsigned __int8 *v336;
  unsigned __int8 *v337;
  void *v338;
  size_t v339;
  size_t v340;
  unsigned __int8 *v341;
  void *v342;
  unsigned __int8 *v343;
  unsigned __int8 *v344;
  unsigned int v345;
  int v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  size_t __len;
  uint64_t v352;
  uint64_t v353;
  uint64_t v355;
  unsigned __int8 *v356;
  int v357;
  uint64_t v358;
  _DWORD *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int *v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  _DWORD *v371;
  uint64_t v372;
  uint64_t v373;
  unsigned __int16 v374[2];
  unsigned __int16 v375[6];

  v7 = a7;
  v9 = a3;
  v11 = a6;
  v12 = mi_size_wide_7[a6];
  v13 = 255;
  v14 = a6;
  switch(a6)
  {
    case 0u:
      goto LABEL_7;
    case 3u:
      v14 = 1u;
      goto LABEL_7;
    case 6u:
      v14 = 2u;
      goto LABEL_7;
    case 9u:
      v14 = 3u;
      goto LABEL_7;
    case 0xCu:
      v14 = 4u;
      goto LABEL_7;
    case 0xFu:
      v14 = 5u;
LABEL_7:
      v13 = *((unsigned __int8 *)&subsize_lookup_1 + v14 + 18);
      break;
    default:
      break;
  }
  v15 = *(_DWORD *)(result + 15732);
  if (v15 <= (int)a3)
    return result;
  v16 = *(_DWORD *)(result + 15736);
  if (v16 <= (int)a4)
    return result;
  v17 = (v12 >> 1) + a3;
  v349 = (v12 >> 1) + v9;
  v350 = (v12 >> 1) + a4;
  v355 = v9;
  __len = mi_size_wide_7[a6];
  v358 = a6;
  v359 = (_DWORD *)result;
  v348 = v13;
  if ((a7 & 1) == 0)
  {
    v235 = *(_DWORD *)(result + 15780);
    v236 = (unsigned __int8 **)(*(_QWORD *)(result + 15768) + 8 * ((int)a4 + v235 * (int)v9));
    v237 = **v236;
    if ((_DWORD)v237 == a6)
    {
      v234 = 0;
      if (a6 > 0xF)
        goto LABEL_317;
      goto LABEL_231;
    }
    v238 = mi_size_high_6[a6];
    v239 = mi_size_high_6[v237];
    v240 = mi_size_wide_7[v237];
    if (a6 < 4 || v17 >= v15 || (int)((v238 >> 1) + a4) >= v16)
    {
      v234 = get_partition_base_partitions_0[(v239 < v238) | (2 * (v240 < v12))];
      if (v234 != 0xFF)
        goto LABEL_231;
      goto LABEL_316;
    }
    v241 = v236[(v238 >> 1) * v235];
    if (v240 != (_DWORD)v12)
    {
      v266 = v236[v12 >> 1];
      if (v239 == v238)
      {
        if ((_DWORD)v12 == 4 * v240)
        {
          v234 = 9;
          if (a6 <= 0xF)
            goto LABEL_231;
        }
        else
        {
          if (*v266 == (_DWORD)v237)
            v234 = 2;
          else
            v234 = 7;
          if (a6 <= 0xF)
            goto LABEL_231;
        }
      }
      else if ((_DWORD)v12 == 2 * v240 && 2 * v239 == v238)
      {
        if (mi_size_wide_7[*v241] == (_DWORD)v12)
        {
          v234 = 4;
          if (a6 <= 0xF)
            goto LABEL_231;
        }
        else
        {
          if (mi_size_high_6[*v266] == v238)
            v234 = 6;
          else
            v234 = 3;
          if (a6 <= 0xF)
            goto LABEL_231;
        }
      }
      else
      {
        v234 = 3;
        if (a6 <= 0xF)
          goto LABEL_231;
      }
      goto LABEL_317;
    }
    if (v238 == 4 * v239)
    {
      v234 = 8;
      if (a6 <= 0xF)
        goto LABEL_231;
      goto LABEL_317;
    }
    v263 = *v241 == (_DWORD)v237;
    v264 = 5;
    goto LABEL_275;
  }
  v346 = *(_DWORD *)(result + 15736);
  v347 = *(_DWORD *)(result + 15732);
  v345 = a7;
  v18 = 0;
  v356 = (unsigned __int8 *)(result + 15280);
  v357 = *(unsigned __int8 *)(*(_QWORD *)(result + 39880) + 77);
  v353 = a2 + 8176;
  v352 = a2 + 8272;
  v368 = a5 + 16;
  v19 = (int8x16_t)xmmword_208F04F30;
  v20 = (int8x16_t)xmmword_208F04F40;
  v21 = (int8x16_t)xmmword_208F04F50;
  v22 = (int8x16_t)xmmword_208F04F20;
  v23.i64[0] = 0x8000800080008;
  v23.i64[1] = 0x8000800080008;
  v24.i64[0] = 0x7F0000007FLL;
  v24.i64[1] = 0x7F0000007FLL;
  v366 = a2;
  do
  {
    v360 = v18;
    v25 = (_DWORD *)(result + (v18 << 6) + 38256);
    if (!*v25)
      goto LABEL_212;
    v26 = *((_QWORD *)v356 + 3075);
    if (*(unsigned __int8 *)(v26 + 28) != (_DWORD)v358)
      goto LABEL_212;
    if (v18)
    {
      v27 = *(_DWORD *)(v26 + 100);
      v28 = *(_DWORD *)(v26 + 96) != 0;
      v29 = v27 != 0;
    }
    else
    {
      v28 = 0;
      v29 = 0;
    }
    v30 = 4u >> v28;
    v31 = v359[3814];
    v32 = v359[3818];
    if (v31 != v32)
      v30 *= *v356;
    v33 = v359[16 * v360 + 9565];
    v34 = 4u >> v29;
    if (v31 == v32)
      v35 = v359[16 * v360 + 9565];
    else
      v35 = 8 * v33;
    v36 = v33 - 1;
    v37 = v35 - 1 + v30 * a4;
    v38 = (int)(v35 - 1 + v30 * (mi_size_wide_27[v358] + (_DWORD)a4)) / v35;
    v363 = (int)v359[16 * v360 + 9568];
    if (v38 >= v359[16 * v360 + 9568])
      v38 = v359[16 * v360 + 9568];
    v39 = (int)(v36 + v34 * (mi_size_high_24[v358] + (_DWORD)v355)) / v33;
    if (v39 >= v359[16 * v360 + 9567])
      v39 = v359[16 * v360 + 9567];
    v40 = v37 / v35;
    if (v40 >= v38)
      goto LABEL_212;
    LODWORD(v41) = (int)(v36 + v34 * v355) / v33;
    if ((int)v41 >= v39)
      goto LABEL_212;
    v42 = (uint64_t *)&v359[16 * v360 + 9570];
    if (v360)
      v43 = 5;
    else
      v43 = 7;
    v370 = v43;
    v44 = v352 + 12 * v360;
    v41 = (int)v41;
    v365 = (int *)(v44 + 4);
    v362 = v40;
    v369 = v44;
    v367 = (int *)(v44 + 8);
    v45 = v38;
    v361 = v39;
    v371 = v25;
    v372 = v38;
    while (2)
    {
      v364 = v41;
      v373 = v41 * v363;
      v46 = v362;
      do
      {
        v47 = v46 + v373;
        v48 = *v42;
        v49 = (int *)(*v42 + ((v46 + v373) << 6));
        v50 = *v25;
        if (*v25 == 1)
        {
          v71 = 0;
          v72 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12714);
          v73 = *(_DWORD *)(a5 + 48);
          v74 = *(unsigned __int16 *)(a5 + 52);
          v75 = v74 >> 8;
          v76 = 8;
          v77 = 0xFF00000000000000;
          do
          {
            v78 = v74;
            v79 = v75 * (v72[v71] >> 6);
            v76 -= 4;
            v74 = v76 + (v79 >> 1);
            ++v71;
            v77 += 0x100000000000000;
          }
          while (HIWORD(v73) < v74);
          v80 = v78 - (v79 >> 1) - v76;
          v81 = __clz(v80);
          v82 = (v81 ^ 0xFFE0) + 16;
          v83 = *(_WORD *)(a5 + 54) - v82;
          *(_WORD *)(a5 + 54) = v83;
          v84 = ((v73 - (v74 << 16) + 1) << ((v81 ^ 0xE0) + 16)) - 1;
          *(_DWORD *)(a5 + 48) = v84;
          *(_WORD *)(a5 + 52) = v80 << v82;
          if ((v83 & 0x8000) == 0)
          {
            if (*(_BYTE *)(a5 + 56))
            {
LABEL_50:
              v85 = v72[2];
              v86 = (v85 >> 4) + 4;
              v87 = *v72;
              v88 = v87 - (v87 >> v86);
              v89 = v87 + ((int)(0x8000 - v87) >> v86);
              if (v77 >= 1)
                v90 = v89;
              else
                v90 = v88;
              *v72 = v90;
              if (v85 >= 0x20)
                v91 = v85;
              else
                v91 = v85 + 1;
              v72[2] = v91;
            }
LABEL_57:
            if ((_DWORD)v71 == 1)
            {
              *v49 = 0;
              goto LABEL_35;
            }
            *v49 = 1;
            goto LABEL_151;
          }
          v133 = *(_QWORD *)(a5 + 32);
          v134 = *(int8x16_t **)(a5 + 40);
          if ((unint64_t)v134 >= v133)
          {
            v138 = *(unsigned __int8 **)(a5 + 40);
LABEL_159:
            *(_DWORD *)(a5 + 24) = *(_DWORD *)(a5 + 24) - v83 + 0x4000;
            v83 = 0x4000;
LABEL_160:
            *(_DWORD *)(a5 + 48) = v84;
            *(_WORD *)(a5 + 54) = v83;
            *(_QWORD *)(a5 + 40) = v138;
            if (*(_BYTE *)(a5 + 56))
              goto LABEL_50;
            goto LABEL_57;
          }
          v135 = 8 - v83;
          if (v135 >= 7)
            v136 = 7;
          else
            v136 = 8 - v83;
          v137 = ((v136 ^ 0xFu) - v83) >> 3;
          if (v137 >= ~(unint64_t)v134 + v133)
            v137 = ~(unint64_t)v134 + v133;
          if (v137 >= 0xF)
          {
            v188 = v137 + 1;
            v189 = (v137 + 1) & 0x3FFFFFF0;
            v190 = 0uLL;
            v191 = (int16x8_t)(unsigned __int16)v83;
            v192 = (int8x16_t)v84;
            v193 = vdupq_n_s32(v135);
            v138 = &v134->u8[v189];
            v194 = (uint32x4_t)vaddq_s32(v193, (int32x4_t)xmmword_208F3A6C0);
            v135 -= 8 * v189;
            v195 = (uint32x4_t)vaddq_s32(v193, (int32x4_t)xmmword_208F3A6D0);
            v196 = (uint32x4_t)vaddq_s32(v193, (int32x4_t)xmmword_208F3A6A0);
            v197 = (uint32x4_t)vaddq_s32(v193, (int32x4_t)xmmword_208F3A6B0);
            v198 = v189;
            v199 = 0uLL;
            v200 = 0uLL;
            v201 = 0uLL;
            do
            {
              v202 = *v134++;
              v200 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v202, v19), v195), v200);
              v199 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v202, v20), v196), v199);
              v192 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v202, v21), v197), v192);
              v201 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v202, v22), v194), v201);
              v191 = vaddq_s16(v191, v23);
              v190 = vaddq_s16(v190, v23);
              v197 = (uint32x4_t)vaddq_s32((int32x4_t)v197, v24);
              v196 = (uint32x4_t)vaddq_s32((int32x4_t)v196, v24);
              v195 = (uint32x4_t)vaddq_s32((int32x4_t)v195, v24);
              v194 = (uint32x4_t)vaddq_s32((int32x4_t)v194, v24);
              v198 -= 16;
            }
            while (v198);
            v203 = (unint64_t)v134 < v133;
            v204 = veorq_s8(veorq_s8(v192, v200), veorq_s8(v199, v201));
            *(int8x8_t *)v204.i8 = veor_s8(*(int8x8_t *)v204.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL));
            v84 = v204.i32[0] ^ v204.i32[1];
            v83 = vaddvq_s16(vaddq_s16(v191, v190));
            if (v188 == v189)
              goto LABEL_158;
          }
          else
          {
            v138 = *(unsigned __int8 **)(a5 + 40);
          }
          do
          {
            v205 = *v138++;
            v84 ^= v205 << v135;
            v83 += 8;
            v203 = (unint64_t)v138 < v133;
            v187 = v135 >= 8;
            v135 -= 8;
          }
          while (v187 && (unint64_t)v138 < v133);
LABEL_158:
          if (v203)
            goto LABEL_160;
          goto LABEL_159;
        }
        if (v50 != 2)
        {
          if (v50 != 3)
            goto LABEL_35;
          v51 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12706);
          v52 = *(_DWORD *)(a5 + 48);
          v53 = *(unsigned __int16 *)(a5 + 52);
          v54 = v53 >> 8;
          v55 = 12;
          v56 = 0xFF00000000000000;
          v57 = -1;
          v58 = v51;
          do
          {
            v59 = v53;
            v60 = *v58++;
            v61 = v54 * (v60 >> 6);
            v55 -= 4;
            v53 = v55 + (v61 >> 1);
            v56 += 0x100000000000000;
            ++v57;
          }
          while (HIWORD(v52) < v53);
          v62 = v59 - (v61 >> 1) - v55;
          v63 = (__clz(v62) ^ 0xFFFFFFE0) + 16;
          v64 = *(_WORD *)(a5 + 54) - v63;
          *(_WORD *)(a5 + 54) = v64;
          v65 = ((v52 - (v53 << 16) + 1) << v63) - 1;
          *(_DWORD *)(a5 + 48) = v65;
          *(_WORD *)(a5 + 52) = v62 << v63;
          if ((v64 & 0x8000) == 0)
          {
            if (*(_BYTE *)(a5 + 56))
              goto LABEL_43;
            goto LABEL_149;
          }
          v126 = v64;
          v127 = *(_QWORD *)(a5 + 32);
          v128 = *(int8x16_t **)(a5 + 40);
          if ((unint64_t)v128 >= v127)
          {
            v132 = *(unsigned __int8 **)(a5 + 40);
LABEL_147:
            *(_DWORD *)(a5 + 24) = *(_DWORD *)(a5 + 24) - (__int16)v126 + 0x4000;
            LOWORD(v126) = 0x4000;
LABEL_148:
            *(_DWORD *)(a5 + 48) = v65;
            *(_WORD *)(a5 + 54) = v126;
            *(_QWORD *)(a5 + 40) = v132;
            if (*(_BYTE *)(a5 + 56))
            {
LABEL_43:
              v66 = v51[3];
              v67 = (v66 >> 4) + 4;
              v68 = *v51;
              if (v56 <= 0)
              {
                *v51 = v68 - (v68 >> v67);
                v69 = v51[1];
              }
              else
              {
                *v51 = v68 + ((int)(0x8000 - v68) >> v67);
                v69 = v51[1];
                if ((unint64_t)v56 > 0x100000000000000)
                {
                  v70 = v69 + ((int)(0x8000 - v69) >> v67);
LABEL_103:
                  v51[1] = v70;
                  if (v66 >= 0x20)
                    v145 = v66;
                  else
                    v145 = v66 + 1;
                  v51[3] = v145;
                  *v49 = v57;
                  if (v57 == 2)
                    goto LABEL_107;
LABEL_150:
                  if (v57 != 1)
                    goto LABEL_35;
LABEL_151:
                  read_wiener_filter(v370, v48 + (v47 << 6) + 16, (unsigned __int16 *)(v353 + 32 * v360), a5);
                  v24.i64[0] = 0x7F0000007FLL;
                  v24.i64[1] = 0x7F0000007FLL;
                  v23.i64[0] = 0x8000800080008;
                  v23.i64[1] = 0x8000800080008;
                  v22 = (int8x16_t)xmmword_208F04F20;
                  v21 = (int8x16_t)xmmword_208F04F50;
                  v20 = (int8x16_t)xmmword_208F04F40;
                  v19 = (int8x16_t)xmmword_208F04F30;
                  goto LABEL_35;
                }
              }
              v70 = v69 - (v69 >> v67);
              goto LABEL_103;
            }
LABEL_149:
            *v49 = v57;
            if (v57 != 2)
              goto LABEL_150;
LABEL_107:
            v146 = v48 + (v47 << 6);
            v147 = od_ec_decode_BOOL_q15(v368, 0x4000u);
            v148 = (4 * od_ec_decode_BOOL_q15(v368, 0x4000u)) | (8 * v147);
            v149 = v148 | (2 * od_ec_decode_BOOL_q15(v368, 0x4000u));
            v150 = od_ec_decode_BOOL_q15(v368, 0x4000u);
            *(_DWORD *)(v146 + 48) = v149 | v150;
            v118 = (uint64_t *)(v146 + 48);
            v151 = (_DWORD *)((char *)&av1_sgr_params + 16 * (v149 | v150));
            if (*v151)
            {
              v152 = v151[1];
              v153 = *v365;
              v154 = *v365 + 96;
              v155 = (unsigned __int16)(*v365 + 96);
              primitive_subexpfin = aom_read_primitive_subexpfin_(a5, 128, 4);
              if (v155 <= 0x40)
              {
                if (primitive_subexpfin <= 2 * (unsigned __int16)v154)
                {
                  if ((primitive_subexpfin & 1) != 0)
                  {
                    v233 = v154 - ((primitive_subexpfin + 1) >> 1);
                    a2 = v366;
                    v167 = (unsigned __int16)v233;
                    *(_DWORD *)(v48 + (v47 << 6) + 52) = (unsigned __int16)v233 - 96;
                    if (!v152)
                      goto LABEL_132;
                  }
                  else
                  {
                    v224 = v154 + (primitive_subexpfin >> 1);
                    a2 = v366;
                    v167 = (unsigned __int16)v224;
                    *(_DWORD *)(v48 + (v47 << 6) + 52) = (unsigned __int16)v224 - 96;
                    if (!v152)
                      goto LABEL_132;
                  }
                }
                else
                {
                  a2 = v366;
                  v167 = (unsigned __int16)primitive_subexpfin;
                  *(_DWORD *)(v48 + (v47 << 6) + 52) = (unsigned __int16)primitive_subexpfin - 96;
                  if (!v152)
                    goto LABEL_132;
                }
              }
              else
              {
                v157 = 31 - v153;
                if (primitive_subexpfin <= 2 * (unsigned __int16)(31 - v153))
                {
                  a2 = v366;
                  if ((primitive_subexpfin & 1) != 0)
                    primitive_subexpfin = v157 - ((primitive_subexpfin + 1) >> 1);
                  else
                    primitive_subexpfin = v157 + (primitive_subexpfin >> 1);
                }
                else
                {
                  a2 = v366;
                }
                v167 = (unsigned __int16)(127 - primitive_subexpfin);
                *(_DWORD *)(v48 + (v47 << 6) + 52) = v167 - 96;
                if (!v152)
                {
LABEL_132:
                  v164 = 224 - v167;
                  if (v164 >= 95)
                    v164 = 95;
                  if (v164 <= -32)
                    v164 = -32;
                  v20 = (int8x16_t)xmmword_208F04F40;
                  v19 = (int8x16_t)xmmword_208F04F30;
                  v22 = (int8x16_t)xmmword_208F04F20;
                  v21 = (int8x16_t)xmmword_208F04F50;
                  v23.i64[0] = 0x8000800080008;
                  v23.i64[1] = 0x8000800080008;
                  v24.i64[0] = 0x7F0000007FLL;
                  v24.i64[1] = 0x7F0000007FLL;
                  v45 = v372;
                  goto LABEL_209;
                }
              }
              v230 = *v367;
              v226 = *v367 + 32;
              v231 = (unsigned __int16)(*v367 + 32);
              v161 = aom_read_primitive_subexpfin_(a5, 128, 4);
              if (v231 <= 0x40)
              {
                if (v161 <= 2 * (unsigned __int16)v226)
                {
                  if ((v161 & 1) != 0)
                  {
LABEL_206:
                    v161 = v226 - ((v161 + 1) >> 1);
                    goto LABEL_207;
                  }
LABEL_189:
                  v161 = v226 + (v161 >> 1);
                }
                goto LABEL_207;
              }
              v228 = 95 - v230;
              if (v161 <= 2 * (unsigned __int16)(95 - v230))
              {
                if ((v161 & 1) != 0)
                  goto LABEL_201;
LABEL_186:
                v161 = v228 + (v161 >> 1);
              }
              goto LABEL_202;
            }
            *(_DWORD *)(v146 + 52) = 0;
            v165 = *v367;
            v159 = *v367 + 32;
            v166 = (unsigned __int16)(*v367 + 32);
            v161 = aom_read_primitive_subexpfin_(a5, 128, 4);
            if (v166 > 0x40)
            {
              v162 = 95 - v165;
              if (v161 > 2 * (unsigned __int16)(95 - v165))
              {
                a2 = v366;
                goto LABEL_202;
              }
              a2 = v366;
              v20 = (int8x16_t)xmmword_208F04F40;
              v19 = (int8x16_t)xmmword_208F04F30;
              v22 = (int8x16_t)xmmword_208F04F20;
              v21 = (int8x16_t)xmmword_208F04F50;
              v23.i64[0] = 0x8000800080008;
              v23.i64[1] = 0x8000800080008;
              v24.i64[0] = 0x7F0000007FLL;
              v24.i64[1] = 0x7F0000007FLL;
              v45 = v372;
              if ((v161 & 1) != 0)
              {
LABEL_193:
                v161 = v162 - ((v161 + 1) >> 1);
                goto LABEL_203;
              }
LABEL_114:
              v161 = v162 + (v161 >> 1);
              goto LABEL_203;
            }
            if (v161 > 2 * (unsigned __int16)v159)
            {
              a2 = v366;
              goto LABEL_207;
            }
            a2 = v366;
            v20 = (int8x16_t)xmmword_208F04F40;
            v19 = (int8x16_t)xmmword_208F04F30;
            v22 = (int8x16_t)xmmword_208F04F20;
            v21 = (int8x16_t)xmmword_208F04F50;
            v23.i64[0] = 0x8000800080008;
            v23.i64[1] = 0x8000800080008;
            v24.i64[0] = 0x7F0000007FLL;
            v24.i64[1] = 0x7F0000007FLL;
            v45 = v372;
            if ((v161 & 1) != 0)
              goto LABEL_195;
            goto LABEL_175;
          }
          v129 = 8 - v126;
          if ((8 - v126) >= 7)
            v130 = 7;
          else
            v130 = 8 - v126;
          v131 = ((v130 ^ 0xFu) - v126) >> 3;
          if (v131 >= ~(unint64_t)v128 + v127)
            v131 = ~(unint64_t)v128 + v127;
          if (v131 >= 0xF)
          {
            v169 = v131 + 1;
            v170 = (v131 + 1) & 0x3FFFFFF0;
            v171 = 0uLL;
            v172 = (int16x8_t)(unsigned __int16)v126;
            v173 = (int8x16_t)v65;
            v174 = vdupq_n_s32(v129);
            v132 = &v128->u8[v170];
            v175 = (uint32x4_t)vaddq_s32(v174, (int32x4_t)xmmword_208F3A6C0);
            v129 -= 8 * v170;
            v176 = (uint32x4_t)vaddq_s32(v174, (int32x4_t)xmmword_208F3A6D0);
            v177 = (uint32x4_t)vaddq_s32(v174, (int32x4_t)xmmword_208F3A6A0);
            v178 = (uint32x4_t)vaddq_s32(v174, (int32x4_t)xmmword_208F3A6B0);
            v179 = v170;
            v180 = 0uLL;
            v181 = 0uLL;
            v182 = 0uLL;
            do
            {
              v183 = *v128++;
              v181 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v183, v19), v176), v181);
              v180 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v183, v20), v177), v180);
              v173 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v183, v21), v178), v173);
              v182 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v183, v22), v175), v182);
              v172 = vaddq_s16(v172, v23);
              v171 = vaddq_s16(v171, v23);
              v178 = (uint32x4_t)vaddq_s32((int32x4_t)v178, v24);
              v177 = (uint32x4_t)vaddq_s32((int32x4_t)v177, v24);
              v176 = (uint32x4_t)vaddq_s32((int32x4_t)v176, v24);
              v175 = (uint32x4_t)vaddq_s32((int32x4_t)v175, v24);
              v179 -= 16;
            }
            while (v179);
            v184 = (unint64_t)v128 < v127;
            v185 = veorq_s8(veorq_s8(v173, v181), veorq_s8(v180, v182));
            *(int8x8_t *)v185.i8 = veor_s8(*(int8x8_t *)v185.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v185, v185, 8uLL));
            v65 = v185.i32[0] ^ v185.i32[1];
            LOWORD(v126) = vaddvq_s16(vaddq_s16(v172, v171));
            if (v169 == v170)
              goto LABEL_146;
          }
          else
          {
            v132 = *(unsigned __int8 **)(a5 + 40);
          }
          do
          {
            v186 = *v132++;
            v65 ^= v186 << v129;
            LOWORD(v126) = v126 + 8;
            v184 = (unint64_t)v132 < v127;
            v187 = v129 >= 8;
            v129 -= 8;
          }
          while (v187 && (unint64_t)v132 < v127);
LABEL_146:
          if (v184)
            goto LABEL_148;
          goto LABEL_147;
        }
        v92 = 0;
        v93 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12720);
        v94 = *(_DWORD *)(a5 + 48);
        v95 = *(unsigned __int16 *)(a5 + 52);
        v96 = v95 >> 8;
        v97 = 8;
        v98 = 0xFF00000000000000;
        do
        {
          v99 = v95;
          v100 = v96 * (v93[v92] >> 6);
          v97 -= 4;
          v95 = v97 + (v100 >> 1);
          ++v92;
          v98 += 0x100000000000000;
        }
        while (HIWORD(v94) < v95);
        v101 = v99 - (v100 >> 1) - v97;
        v102 = __clz(v101);
        v103 = (v102 ^ 0xFFE0) + 16;
        v104 = *(_WORD *)(a5 + 54) - v103;
        *(_WORD *)(a5 + 54) = v104;
        v105 = ((v94 - (v95 << 16) + 1) << ((v102 ^ 0xE0) + 16)) - 1;
        *(_DWORD *)(a5 + 48) = v105;
        *(_WORD *)(a5 + 52) = v101 << v103;
        if (v104 < 0)
        {
          v139 = *(_QWORD *)(a5 + 32);
          v140 = *(int8x16_t **)(a5 + 40);
          if ((unint64_t)v140 < v139)
          {
            v141 = 8 - v104;
            if (v141 >= 7)
              v142 = 7;
            else
              v142 = 8 - v104;
            v143 = ((v142 ^ 0xFu) - v104) >> 3;
            if (v143 >= ~(unint64_t)v140 + v139)
              v143 = ~(unint64_t)v140 + v139;
            if (v143 >= 0xF)
            {
              v206 = v143 + 1;
              v207 = (v143 + 1) & 0x3FFFFFF0;
              v208 = 0uLL;
              v209 = (int16x8_t)(unsigned __int16)v104;
              v210 = (int8x16_t)v105;
              v211 = vdupq_n_s32(v141);
              v144 = &v140->u8[v207];
              v212 = (uint32x4_t)vaddq_s32(v211, (int32x4_t)xmmword_208F3A6C0);
              v141 -= 8 * v207;
              v213 = (uint32x4_t)vaddq_s32(v211, (int32x4_t)xmmword_208F3A6D0);
              v214 = (uint32x4_t)vaddq_s32(v211, (int32x4_t)xmmword_208F3A6A0);
              v215 = (uint32x4_t)vaddq_s32(v211, (int32x4_t)xmmword_208F3A6B0);
              v216 = v207;
              v217 = 0uLL;
              v218 = 0uLL;
              v219 = 0uLL;
              do
              {
                v220 = *v140++;
                v218 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v220, v19), v213), v218);
                v217 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v220, v20), v214), v217);
                v210 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v220, v21), v215), v210);
                v219 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v220, v22), v212), v219);
                v209 = vaddq_s16(v209, v23);
                v208 = vaddq_s16(v208, v23);
                v215 = (uint32x4_t)vaddq_s32((int32x4_t)v215, v24);
                v214 = (uint32x4_t)vaddq_s32((int32x4_t)v214, v24);
                v213 = (uint32x4_t)vaddq_s32((int32x4_t)v213, v24);
                v212 = (uint32x4_t)vaddq_s32((int32x4_t)v212, v24);
                v216 -= 16;
              }
              while (v216);
              v221 = (unint64_t)v140 < v139;
              v222 = veorq_s8(veorq_s8(v210, v218), veorq_s8(v217, v219));
              *(int8x8_t *)v222.i8 = veor_s8(*(int8x8_t *)v222.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL));
              v105 = v222.i32[0] ^ v222.i32[1];
              v104 = vaddvq_s16(vaddq_s16(v209, v208));
              if (v206 != v207)
                goto LABEL_165;
            }
            else
            {
              v144 = *(unsigned __int8 **)(a5 + 40);
              do
              {
LABEL_165:
                v223 = *v144++;
                v105 ^= v223 << v141;
                v104 += 8;
                v221 = (unint64_t)v144 < v139;
                v187 = v141 >= 8;
                v141 -= 8;
              }
              while (v187 && (unint64_t)v144 < v139);
            }
            if (!v221)
            {
LABEL_169:
              *(_DWORD *)(a5 + 24) = *(_DWORD *)(a5 + 24) - v104 + 0x4000;
              v104 = 0x4000;
            }
            *(_DWORD *)(a5 + 48) = v105;
            *(_WORD *)(a5 + 54) = v104;
            *(_QWORD *)(a5 + 40) = v144;
            if (!*(_BYTE *)(a5 + 56))
              goto LABEL_70;
            goto LABEL_63;
          }
          v144 = *(unsigned __int8 **)(a5 + 40);
          goto LABEL_169;
        }
        if (!*(_BYTE *)(a5 + 56))
          goto LABEL_70;
LABEL_63:
        v106 = v93[2];
        v107 = (v106 >> 4) + 4;
        v108 = *v93;
        v109 = v108 - (v108 >> v107);
        v110 = v108 + ((int)(0x8000 - v108) >> v107);
        if (v98 >= 1)
          v111 = v110;
        else
          v111 = v109;
        *v93 = v111;
        if (v106 >= 0x20)
          v112 = v106;
        else
          v112 = v106 + 1;
        v93[2] = v112;
LABEL_70:
        if ((_DWORD)v92 == 1)
        {
          *v49 = 0;
          v42 = (uint64_t *)&v359[16 * v360 + 9570];
          v25 = v371;
          v45 = v372;
          goto LABEL_35;
        }
        *v49 = 2;
        v113 = v48 + (v47 << 6);
        v114 = od_ec_decode_BOOL_q15(v368, 0x4000u);
        v115 = (4 * od_ec_decode_BOOL_q15(v368, 0x4000u)) | (8 * v114);
        v116 = v115 | (2 * od_ec_decode_BOOL_q15(v368, 0x4000u));
        v117 = od_ec_decode_BOOL_q15(v368, 0x4000u);
        *(_DWORD *)(v113 + 48) = v116 | v117;
        v118 = (uint64_t *)(v113 + 48);
        v119 = (_DWORD *)((char *)&av1_sgr_params + 16 * (v116 | v117));
        if (*v119)
        {
          v120 = v119[1];
          v121 = *v365;
          v122 = *v365 + 96;
          v123 = (unsigned __int16)(*v365 + 96);
          v124 = aom_read_primitive_subexpfin_(a5, 128, 4);
          if (v123 <= 0x40)
          {
            v20 = (int8x16_t)xmmword_208F04F40;
            v19 = (int8x16_t)xmmword_208F04F30;
            v22 = (int8x16_t)xmmword_208F04F20;
            v21 = (int8x16_t)xmmword_208F04F50;
            v23.i64[0] = 0x8000800080008;
            v23.i64[1] = 0x8000800080008;
            v24.i64[0] = 0x7F0000007FLL;
            v24.i64[1] = 0x7F0000007FLL;
            v45 = v372;
            if (v124 <= 2 * (unsigned __int16)v122)
            {
              if ((v124 & 1) != 0)
              {
                v229 = v122 - ((v124 + 1) >> 1);
                a2 = v366;
                v163 = (unsigned __int16)v229;
                *(_DWORD *)(v48 + (v47 << 6) + 52) = (unsigned __int16)v229 - 96;
                if (!v120)
                  goto LABEL_117;
              }
              else
              {
                v168 = v122 + (v124 >> 1);
                a2 = v366;
                v163 = (unsigned __int16)v168;
                *(_DWORD *)(v48 + (v47 << 6) + 52) = (unsigned __int16)v168 - 96;
                if (!v120)
                  goto LABEL_117;
              }
            }
            else
            {
              a2 = v366;
              v163 = (unsigned __int16)v124;
              *(_DWORD *)(v48 + (v47 << 6) + 52) = (unsigned __int16)v124 - 96;
              if (!v120)
                goto LABEL_117;
            }
          }
          else
          {
            v125 = 31 - v121;
            v20 = (int8x16_t)xmmword_208F04F40;
            v19 = (int8x16_t)xmmword_208F04F30;
            v22 = (int8x16_t)xmmword_208F04F20;
            v21 = (int8x16_t)xmmword_208F04F50;
            v23.i64[0] = 0x8000800080008;
            v23.i64[1] = 0x8000800080008;
            v24.i64[0] = 0x7F0000007FLL;
            v24.i64[1] = 0x7F0000007FLL;
            v45 = v372;
            if (v124 <= 2 * (unsigned __int16)(31 - v121))
            {
              if ((v124 & 1) != 0)
                v124 = v125 - ((v124 + 1) >> 1);
              else
                v124 = v125 + (v124 >> 1);
            }
            a2 = v366;
            v163 = (unsigned __int16)(127 - v124);
            *(_DWORD *)(v48 + (v47 << 6) + 52) = v163 - 96;
            if (!v120)
            {
LABEL_117:
              v164 = 224 - v163;
              if (v164 >= 95)
                v164 = 95;
              if (v164 <= -32)
                v164 = -32;
              goto LABEL_209;
            }
          }
          v225 = *v367;
          v226 = *v367 + 32;
          v227 = (unsigned __int16)(*v367 + 32);
          v161 = aom_read_primitive_subexpfin_(a5, 128, 4);
          if (v227 <= 0x40)
          {
            if (v161 <= 2 * (unsigned __int16)v226)
            {
              if ((v161 & 1) != 0)
                goto LABEL_206;
              goto LABEL_189;
            }
LABEL_207:
            v20 = (int8x16_t)xmmword_208F04F40;
            v19 = (int8x16_t)xmmword_208F04F30;
            v22 = (int8x16_t)xmmword_208F04F20;
            v21 = (int8x16_t)xmmword_208F04F50;
            v23.i64[0] = 0x8000800080008;
            v23.i64[1] = 0x8000800080008;
            v24.i64[0] = 0x7F0000007FLL;
            v24.i64[1] = 0x7F0000007FLL;
            v45 = v372;
            goto LABEL_208;
          }
          v228 = 95 - v225;
          if (v161 <= 2 * (unsigned __int16)(95 - v225))
          {
            if ((v161 & 1) == 0)
              goto LABEL_186;
LABEL_201:
            v161 = v228 - ((v161 + 1) >> 1);
          }
LABEL_202:
          v20 = (int8x16_t)xmmword_208F04F40;
          v19 = (int8x16_t)xmmword_208F04F30;
          v22 = (int8x16_t)xmmword_208F04F20;
          v21 = (int8x16_t)xmmword_208F04F50;
          v23.i64[0] = 0x8000800080008;
          v23.i64[1] = 0x8000800080008;
          v24.i64[0] = 0x7F0000007FLL;
          v24.i64[1] = 0x7F0000007FLL;
          v45 = v372;
          goto LABEL_203;
        }
        *(_DWORD *)(v113 + 52) = 0;
        v158 = *v367;
        v159 = *v367 + 32;
        v160 = (unsigned __int16)(*v367 + 32);
        v161 = aom_read_primitive_subexpfin_(a5, 128, 4);
        if (v160 > 0x40)
        {
          v162 = 95 - v158;
          v20 = (int8x16_t)xmmword_208F04F40;
          v19 = (int8x16_t)xmmword_208F04F30;
          v22 = (int8x16_t)xmmword_208F04F20;
          v21 = (int8x16_t)xmmword_208F04F50;
          v23.i64[0] = 0x8000800080008;
          v23.i64[1] = 0x8000800080008;
          v24.i64[0] = 0x7F0000007FLL;
          v24.i64[1] = 0x7F0000007FLL;
          v45 = v372;
          if (v161 <= 2 * (unsigned __int16)(95 - v158))
          {
            if ((v161 & 1) != 0)
              goto LABEL_193;
            goto LABEL_114;
          }
LABEL_203:
          LOWORD(v161) = 127 - v161;
          goto LABEL_208;
        }
        v20 = (int8x16_t)xmmword_208F04F40;
        v19 = (int8x16_t)xmmword_208F04F30;
        v22 = (int8x16_t)xmmword_208F04F20;
        v21 = (int8x16_t)xmmword_208F04F50;
        v23.i64[0] = 0x8000800080008;
        v23.i64[1] = 0x8000800080008;
        v24.i64[0] = 0x7F0000007FLL;
        v24.i64[1] = 0x7F0000007FLL;
        v45 = v372;
        if (v161 > 2 * (unsigned __int16)v159)
          goto LABEL_208;
        if ((v161 & 1) != 0)
        {
LABEL_195:
          v161 = v159 - ((v161 + 1) >> 1);
          goto LABEL_208;
        }
LABEL_175:
        v161 = v159 + (v161 >> 1);
LABEL_208:
        v164 = (unsigned __int16)v161 - 32;
LABEL_209:
        *(_DWORD *)(v48 + (v47 << 6) + 56) = v164;
        v232 = *v118;
        *(_DWORD *)(v369 + 8) = *((_DWORD *)v118 + 2);
        *(_QWORD *)v369 = v232;
        v42 = (uint64_t *)&v359[16 * v360 + 9570];
        v25 = v371;
LABEL_35:
        ++v46;
      }
      while (v46 != v45);
      v41 = v364 + 1;
      if (v364 + 1 != v361)
        continue;
      break;
    }
LABEL_212:
    result = (uint64_t)v359;
    if (v357)
      break;
    v18 = v360 + 1;
  }
  while (v360 < 2);
  v11 = v358;
  if (v358 < 3)
  {
    v234 = 0;
    LODWORD(v9) = v355;
    v7 = v345;
    v16 = v346;
    v15 = v347;
    goto LABEL_231;
  }
  if ((int)v349 < v347 || (int)v350 < v346)
  {
    LODWORD(v9) = v355;
    v244 = (int16x8_t *)(*(_QWORD *)(a2 + 10648)
                       + 22
                       * (int)((*(char *)(*(_QWORD *)(a2 + 8088) + (int)a4) >> (mi_size_wide_log2_1[v358]
                                                                                            - 1)) & 1 | (2 * ((*(char *)(a2 + (v355 & 0x1F) + 8096) >> (mi_size_wide_log2_1[v358] - 1)) & 1)) | (4 * (mi_size_wide_log2_1[v358] - 1)))
                       + 13618);
    v7 = v345;
    v16 = v346;
    if ((int)v349 < v347 && (int)v350 < v346)
    {
      v245 = 0;
      if ((_DWORD)v358 == 15)
        LODWORD(v246) = 8;
      else
        LODWORD(v246) = 10;
      if (v358 >= 4)
        v246 = v246;
      else
        v246 = 4;
      v247 = *(_DWORD *)(a5 + 48);
      v248 = *(unsigned __int16 *)(a5 + 52);
      v249 = v248 >> 8;
      v250 = 4 * v246;
      v251 = 0xFF00000000000000;
      do
      {
        result = v248;
        v252 = v249 * (v244->u16[v245] >> 6);
        v250 -= 4;
        v248 = v250 + (v252 >> 1);
        ++v245;
        v251 += 0x100000000000000;
      }
      while (HIWORD(v247) < v248);
      v253 = result - (v252 >> 1) - v250;
      v254 = (__clz(v253) ^ 0xFFFFFFE0) + 16;
      v255 = *(_WORD *)(a5 + 54) - v254;
      *(_WORD *)(a5 + 54) = v255;
      v256 = ((v247 - ((_DWORD)v248 << 16) + 1) << v254) - 1;
      *(_DWORD *)(a5 + 48) = v256;
      *(_WORD *)(a5 + 52) = v253 << v254;
      v234 = v245 - 1;
      v15 = v347;
      if ((v255 & 0x8000) == 0)
      {
LABEL_304:
        if (*(_BYTE *)(a5 + 56))
        {
          v288 = 0;
          v289 = v244->u16[v246];
          v290 = (v289 >> 4) + 5;
          v291 = (v246 - 1);
          v292 = v251 >> 56;
          if (v358 >= 4 && (_DWORD)v358 != 15)
          {
            v293 = vdupq_n_s64(v292);
            v288 = v291 & 0xFFFFFFF8;
            v294 = (int64x2_t)xmmword_208F30F00;
            v295 = (int64x2_t)xmmword_208F30F10;
            v296 = (int64x2_t)xmmword_208F08AD0;
            v297 = (int64x2_t)xmmword_208F05120;
            v298 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v290));
            v299.i64[0] = 0x800000008000;
            v299.i64[1] = 0x800000008000;
            v300 = vdupq_n_s64(8uLL);
            v301 = v288;
            v302 = v244;
            do
            {
              *v302 = vaddq_s16(*v302, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v293, v297), (int32x4_t)vcgtq_s64(v293, v296)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v293, v295), (int32x4_t)vcgtq_s64(v293, v294))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v299, *(uint16x4_t *)v302->i8), (int32x4_t)v298), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v299, *(uint16x8_t *)v302), (int32x4_t)v298)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v302->i8), v298),
                                                    (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v302), v298)))));
              ++v302;
              v295 = vaddq_s64(v295, v300);
              v296 = vaddq_s64(v296, v300);
              v297 = vaddq_s64(v297, v300);
              v294 = vaddq_s64(v294, v300);
              v301 -= 8;
            }
            while (v301);
          }
          do
          {
            v303 = v244->u16[v288];
            v304 = v303 - (v303 >> v290);
            result = ((int)(0x8000 - v303) >> v290);
            v305 = v303 + result;
            if (v288 >= v292)
              v305 = v304;
            v244->i16[v288++] = v305;
          }
          while (v291 != v288);
          v306 = v246;
          v307 = v244->i16[v306];
          if (v289 < 0x20)
            ++v307;
          v244->i16[v306] = v307;
        }
        if (v234 != 0xFF)
          goto LABEL_231;
LABEL_316:
        v234 = -1;
        goto LABEL_317;
      }
      v257 = *(_QWORD *)(a5 + 32);
      v258 = *(int8x16_t **)(a5 + 40);
      if ((unint64_t)v258 >= v257)
      {
        v261 = *(unsigned __int8 **)(a5 + 40);
        goto LABEL_302;
      }
      LODWORD(result) = 8 - v255;
      if (result >= 7)
        v259 = 7;
      else
        v259 = 8 - v255;
      v260 = ((v259 ^ 0xFu) - v255) >> 3;
      if (v260 >= ~(unint64_t)v258 + v257)
        v260 = ~(unint64_t)v258 + v257;
      if (v260 >= 0xF)
      {
        v268 = v260 + 1;
        v269 = (v260 + 1) & 0x3FFFFFF0;
        v270 = (int16x8_t)(unsigned __int16)v255;
        v271 = 0uLL;
        v272 = (int8x16_t)v256;
        v273 = vdupq_n_s32(result);
        v261 = &v258->u8[v269];
        v274 = (uint32x4_t)vaddq_s32(v273, (int32x4_t)xmmword_208F3A6C0);
        result = (result - 8 * v269);
        v275 = (uint32x4_t)vaddq_s32(v273, (int32x4_t)xmmword_208F3A6D0);
        v276 = (uint32x4_t)vaddq_s32(v273, (int32x4_t)xmmword_208F3A6A0);
        v277 = (uint32x4_t)vaddq_s32(v273, (int32x4_t)xmmword_208F3A6B0);
        v278.i64[0] = 0x8000800080008;
        v278.i64[1] = 0x8000800080008;
        v279.i64[0] = 0x7F0000007FLL;
        v279.i64[1] = 0x7F0000007FLL;
        v280 = v269;
        v281 = 0uLL;
        v282 = 0uLL;
        v283 = 0uLL;
        do
        {
          v284 = *v258++;
          v282 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, v19), v275), v282);
          v281 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, v20), v276), v281);
          v272 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, v21), v277), v272);
          v283 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, v22), v274), v283);
          v270 = vaddq_s16(v270, v278);
          v271 = vaddq_s16(v271, v278);
          v277 = (uint32x4_t)vaddq_s32((int32x4_t)v277, v279);
          v276 = (uint32x4_t)vaddq_s32((int32x4_t)v276, v279);
          v275 = (uint32x4_t)vaddq_s32((int32x4_t)v275, v279);
          v274 = (uint32x4_t)vaddq_s32((int32x4_t)v274, v279);
          v280 -= 16;
        }
        while (v280);
        v285 = (unint64_t)v258 < v257;
        v286 = veorq_s8(veorq_s8(v272, v282), veorq_s8(v281, v283));
        *(int8x8_t *)v286.i8 = veor_s8(*(int8x8_t *)v286.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v286, v286, 8uLL));
        v256 = v286.i32[0] ^ v286.i32[1];
        v255 = vaddvq_s16(vaddq_s16(v270, v271));
        if (v268 == v269)
          goto LABEL_301;
      }
      else
      {
        v261 = *(unsigned __int8 **)(a5 + 40);
      }
      do
      {
        v287 = *v261++;
        v256 ^= v287 << result;
        v255 += 8;
        v285 = (unint64_t)v261 < v257;
        v187 = result >= 8;
        result = (result - 8);
      }
      while (v187 && (unint64_t)v261 < v257);
LABEL_301:
      if (v285)
      {
LABEL_303:
        *(_DWORD *)(a5 + 48) = v256;
        *(_WORD *)(a5 + 54) = v255;
        *(_QWORD *)(a5 + 40) = v261;
        goto LABEL_304;
      }
LABEL_302:
      *(_DWORD *)(a5 + 24) = *(_DWORD *)(a5 + 24) - v255 + 0x4000;
      v255 = 0x4000;
      goto LABEL_303;
    }
    v15 = v347;
    if ((int)v350 >= v346 || (int)v349 < v347)
    {
      v265 = ((v244->i16[1] - v244->i16[0]) ^ 0x8000) - v244->i16[2] + v244->i16[6];
      if ((_DWORD)v358 != 15)
        v265 = v265
             - *(_WORD *)(*(_QWORD *)(a2 + 10648)
                        + 22
                        * (int)((*(char *)(*(_QWORD *)(a2 + 8088) + (int)a4) >> (mi_size_wide_log2_1[v358]
                                                                                             - 1)) & 1 | (2 * ((*(char *)(a2 + (v355 & 0x1F) + 8096) >> (mi_size_wide_log2_1[v358] - 1)) & 1)) | (4 * (mi_size_wide_log2_1[v358] - 1)))
                        + 13632)
             + *(_WORD *)(*(_QWORD *)(a2 + 10648)
                        + 22
                        * (int)((*(char *)(*(_QWORD *)(a2 + 8088) + (int)a4) >> (mi_size_wide_log2_1[v358]
                                                                                             - 1)) & 1 | (2 * ((*(char *)(a2 + (v355 & 0x1F) + 8096) >> (mi_size_wide_log2_1[v358] - 1)) & 1)) | (4 * (mi_size_wide_log2_1[v358] - 1)))
                        + 13634);
      v374[0] = 0x8000 - v265;
      v374[1] = 0;
      result = od_ec_decode_cdf_q15(v368, v374, 2);
      if ((_DWORD)result)
        v234 = 3;
      else
        v234 = 2;
      if (v358 <= 0xF)
        goto LABEL_231;
      goto LABEL_317;
    }
    v262 = v244->i16[4] - v244->i16[1] - v244->i16[5] + v244->i16[7] + 0x8000;
    if ((_DWORD)v358 != 15)
      v262 = v262
           - *(_WORD *)(*(_QWORD *)(a2 + 10648)
                      + 22
                      * (int)((*(char *)(*(_QWORD *)(a2 + 8088) + (int)a4) >> (mi_size_wide_log2_1[v358]
                                                                                           - 1)) & 1 | (2 * ((*(char *)(a2 + (v355 & 0x1F) + 8096) >> (mi_size_wide_log2_1[v358] - 1)) & 1)) | (4 * (mi_size_wide_log2_1[v358] - 1)))
                      + 13634)
           + *(_WORD *)(*(_QWORD *)(a2 + 10648)
                      + 22
                      * (int)((*(char *)(*(_QWORD *)(a2 + 8088) + (int)a4) >> (mi_size_wide_log2_1[v358]
                                                                                           - 1)) & 1 | (2 * ((*(char *)(a2 + (v355 & 0x1F) + 8096) >> (mi_size_wide_log2_1[v358] - 1)) & 1)) | (4 * (mi_size_wide_log2_1[v358] - 1)))
                      + 13636);
    v375[0] = 0x8000 - v262;
    v375[1] = 0;
    result = od_ec_decode_cdf_q15(v368, v375, 2);
    v263 = (_DWORD)result == 0;
    v264 = 3;
LABEL_275:
    if (v263)
      v234 = 1;
    else
      v234 = v264;
    if (v11 <= 0xF)
      goto LABEL_231;
    goto LABEL_317;
  }
  v234 = 3;
  LODWORD(v9) = v355;
  v16 = v346;
  v15 = v347;
  v7 = v345;
  if (v358 > 0xF)
    goto LABEL_317;
LABEL_231:
  v242 = v11;
  switch((int)v11)
  {
    case 0:
      break;
    case 3:
      v242 = 1;
      break;
    case 6:
      v242 = 2;
      break;
    case 9:
      v242 = 3;
      break;
    case 12:
      v242 = 4;
      break;
    case 15:
      v242 = 5;
      break;
    default:
      goto LABEL_317;
  }
  v243 = *((unsigned __int8 *)&subsize_lookup_1 + 6 * v234 + v242);
  if (v243 == 255)
  {
LABEL_317:
    *(_DWORD *)a2 = v9;
    result = aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Partition is invalid for block size %dx%d", block_size_wide_8[v11], block_size_high_7[v11]);
    v243 = 0xFFu;
  }
  v308 = v243;
  if (av1_ss_size_lookup[4 * v243 + 2 * *(int *)(a2 + 2628) + *(int *)(a2 + 2632)] == 255)
  {
    *(_DWORD *)a2 = v9;
    result = aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Block size %dx%d invalid with this subsampling mode", block_size_wide_8[v243], block_size_high_7[v243]);
  }
  v309 = __len >> 2;
  switch(v234)
  {
    case 0u:
      result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))decode_partition_block_visit[v7])(v359, a2, v355, a4, a5, 0, v308);
      goto LABEL_341;
    case 1u:
      v310 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      result = v310(v359, a2, v355, a4, a5, 1, v308);
      if ((int)v349 < v15)
      {
        v311 = v359;
        v312 = a2;
        v313 = v349;
        v314 = a4;
        v315 = a5;
        v316 = 1;
        goto LABEL_330;
      }
      goto LABEL_341;
    case 2u:
      v310 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      result = v310(v359, a2, v355, a4, a5, 2, v308);
      if ((int)v350 < v16)
      {
        v311 = v359;
        v312 = a2;
        v313 = v355;
        v314 = v350;
        v315 = a5;
        v316 = 2;
        goto LABEL_330;
      }
      goto LABEL_341;
    case 3u:
      decode_partition_0(v359, a2, v355, a4, a5, v308, v7);
      decode_partition_0(v359, a2, v355, v350, a5, v308, v7);
      decode_partition_0(v359, a2, v349, a4, a5, v308, v7);
      result = decode_partition_0(v359, a2, v349, v350, a5, v308, v7);
      goto LABEL_341;
    case 4u:
      v310 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      v310(v359, a2, v355, a4, a5, 4, v348);
      v310(v359, a2, v355, v350, a5, 4, v348);
      v311 = v359;
      v312 = a2;
      v313 = v349;
      v314 = a4;
      v315 = a5;
      v316 = 4;
      goto LABEL_330;
    case 5u:
      v317 = (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      v317(v359, a2, v355, a4, a5, 5, v308);
      v317(v359, a2, v349, a4, a5, 5, v348);
      result = ((uint64_t (*)(_DWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))v317)(v359, a2, v349, v350, a5, 5, v348);
      goto LABEL_341;
    case 6u:
      v310 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      v310(v359, a2, v355, a4, a5, 6, v348);
      v310(v359, a2, v349, a4, a5, 6, v348);
      v311 = v359;
      v312 = a2;
      v313 = v355;
      v314 = v350;
      v315 = a5;
      v316 = 6;
LABEL_330:
      result = v310(v311, v312, v313, v314, v315, v316, v308);
      goto LABEL_341;
    case 7u:
      v318 = (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      v318(v359, a2, v355, a4, a5, 7, v308);
      v318(v359, a2, v355, v350, a5, 7, v348);
      result = ((uint64_t (*)(_DWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))v318)(v359, a2, v349, v350, a5, 7, v348);
      goto LABEL_341;
    case 8u:
      v319 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      result = v319(v359, a2, v355, a4, a5, 8, v308);
      if ((signed int)(v309 + v355) >= v359[3933])
        goto LABEL_341;
      result = ((uint64_t (*)(_DWORD *, uint64_t))v319)(v359, a2);
      if ((signed int)(v355 + 2 * v309) >= v359[3933])
        goto LABEL_341;
      result = ((uint64_t (*)(_DWORD *, uint64_t))v319)(v359, a2);
      v320 = 3 * v309 + v355;
      if ((int)v320 >= v359[3933])
        goto LABEL_341;
      v321 = v359;
      v322 = a2;
      v323 = a4;
      v324 = a5;
      v325 = 8;
      break;
    case 9u:
      v319 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))decode_partition_block_visit[v7];
      result = v319(v359, a2, v355, a4, a5, 9, v308);
      if ((signed int)(v309 + a4) >= v359[3934])
        goto LABEL_341;
      result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t))v319)(v359, a2, v355);
      if ((signed int)(a4 + 2 * v309) >= v359[3934])
        goto LABEL_341;
      result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t))v319)(v359, a2, v355);
      v323 = 3 * v309 + a4;
      if ((int)v323 >= v359[3934])
        goto LABEL_341;
      v321 = v359;
      v322 = a2;
      v320 = v355;
      v324 = a5;
      v325 = 9;
      break;
    default:
      goto LABEL_341;
  }
  result = v319(v321, v322, v320, v323, v324, v325, v308);
LABEL_341:
  if (v358 >= 3 && (v7 & 1) != 0)
  {
    v326 = 255;
    v327 = 1u;
    switch((int)v358)
    {
      case 3:
        goto LABEL_348;
      case 6:
        v327 = 2u;
        goto LABEL_348;
      case 9:
        v327 = 3u;
        goto LABEL_348;
      case 12:
        v327 = 4u;
        goto LABEL_348;
      case 15:
        v327 = 5u;
LABEL_348:
        v326 = *((unsigned __int8 *)&subsize_lookup_1 + v327 + 18);
        break;
      default:
        break;
    }
    v328 = __len >> 1;
    switch(v234)
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 9u:
        goto LABEL_350;
      case 3u:
        if ((_DWORD)v358 == 3)
        {
LABEL_350:
          v329 = mi_size_high_6[v358];
          v330 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v308;
          memset((void *)(*(_QWORD *)(a2 + 8088) + (int)a4), *v330, __len);
          return (uint64_t)memset((void *)(a2 + 8096 + (v355 & 0x1F)), v330[1], v329);
        }
        return result;
      case 4u:
        v331 = mi_size_wide_7[v308];
        v332 = mi_size_high_6[v308];
        v333 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v326;
        memset((void *)(*(_QWORD *)(a2 + 8088) + (int)a4), *v333, v331);
        memset((void *)(a2 + 8096 + (v355 & 0x1F)), v333[1], v332);
        v334 = (void *)(*(_QWORD *)(a2 + 8088) + (int)a4);
        v335 = (void *)(a2 + 8096 + (((_BYTE)v328 + (_BYTE)v355) & 0x1F));
        v336 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v308;
        goto LABEL_355;
      case 5u:
        v331 = mi_size_wide_7[v308];
        v332 = mi_size_high_6[v308];
        v337 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v308;
        memset((void *)(*(_QWORD *)(a2 + 8088) + (int)a4), *v337, v331);
        memset((void *)(a2 + 8096 + (v355 & 0x1F)), v337[1], v332);
        v334 = (void *)(*(_QWORD *)(a2 + 8088) + (int)a4);
        v335 = (void *)(a2 + 8096 + (((_BYTE)v328 + (_BYTE)v355) & 0x1F));
        v336 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v326;
LABEL_355:
        memset(v334, *v336, v331);
        return (uint64_t)memset(v335, v336[1], v332);
      case 6u:
        v338 = (void *)(a2 + 8096 + (v355 & 0x1F));
        v339 = mi_size_wide_7[v308];
        v340 = mi_size_high_6[v308];
        v341 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v326;
        memset((void *)(*(_QWORD *)(a2 + 8088) + (int)a4), *v341, v339);
        memset(v338, v341[1], v340);
        v342 = (void *)(*(_QWORD *)(a2 + 8088) + (int)a4 + (unint64_t)v328);
        v343 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v308;
        goto LABEL_358;
      case 7u:
        v338 = (void *)(a2 + 8096 + (v355 & 0x1F));
        v339 = mi_size_wide_7[v308];
        v340 = mi_size_high_6[v308];
        v344 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v308;
        memset((void *)(*(_QWORD *)(a2 + 8088) + (int)a4), *v344, v339);
        memset(v338, v344[1], v340);
        v342 = (void *)(*(_QWORD *)(a2 + 8088) + (int)a4 + (unint64_t)v328);
        v343 = (unsigned __int8 *)&partition_context_lookup_1 + 2 * v326;
LABEL_358:
        memset(v342, *v343, v339);
        result = (uint64_t)memset(v338, v343[1], v340);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t parse_decode_block(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, char a6, unsigned int a7)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  char **v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  int v38;
  char v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  char v48;
  int v49;
  int v50;
  char v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  char v58;
  int v59;
  uint64_t v60;
  int v62;
  int v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  int v69;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v75;
  char v77;
  uint64_t v78;
  uint64_t v80;
  int v82;
  double v83;
  double v84;
  double v85;
  double v86;
  int8x16_t v87;
  uint64_t v88;
  int v89;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  __int16 v92;
  _BOOL4 v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  BOOL v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  BOOL v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned __int16 *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  __int16 v123;
  __int16 v124;
  __int16 v125;
  unsigned int v126;
  unint64_t v127;
  int8x16_t *v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int8x16_t v143;
  int32x4_t v144;
  uint32x4_t v145;
  uint32x4_t v146;
  uint32x4_t v147;
  uint32x4_t v148;
  int16x8_t v149;
  int32x4_t v150;
  uint64_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  BOOL v156;
  int8x16_t v157;
  int v158;
  BOOL v159;
  unsigned int v160;
  unsigned int v161;
  int64_t v162;
  int64_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  uint32x4_t v169;
  uint32x4_t v170;
  int64x2_t v171;
  int64_t v172;
  int16x8_t *v173;
  _WORD *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  size_t v181;
  size_t v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  __int16 *v194;
  int v195;
  int v196;
  int v197;
  __int16 *v198;
  __int16 v199;
  int v200;
  _WORD *v201;
  __int16 v202;
  int v203;
  int v204;
  __int16 *v205;
  __int16 v206;
  int v207;
  _WORD *v208;
  int v209;
  int v210;
  int v211;
  __int16 *v212;
  int v213;
  int v214;
  int v215;
  __int16 *v216;
  __int16 v217;
  int v218;
  _WORD *v219;
  __int16 v220;
  int v221;
  int v222;
  __int16 *v223;
  __int16 v224;
  int v225;
  _WORD *v226;
  __int16 v227;
  int v228;
  int v229;
  int v230;
  __int16 *v231;
  int v232;
  int v233;
  int v234;
  __int16 *v235;
  __int16 v236;
  int v237;
  _WORD *v238;
  __int16 v239;
  int v240;
  int v241;
  __int16 *v242;
  __int16 v243;
  int v244;
  _WORD *v245;
  __int16 v246;
  int v247;
  int v248;
  int v249;
  __int16 *v250;
  int v251;
  int v252;
  int v253;
  __int16 *v254;
  __int16 v255;
  int v256;
  _WORD *v257;
  __int16 v258;
  int v259;
  int v260;
  __int16 *v261;
  __int16 v262;
  int v263;
  _WORD *v264;
  __int16 v265;
  int v266;
  int v267;
  int v268;
  __int16 *v269;
  int v270;
  int v271;
  int v272;
  __int16 *v273;
  __int16 v274;
  int v275;
  _WORD *v276;
  __int16 v277;
  int v278;
  int v279;
  __int16 *v280;
  __int16 v281;
  int v282;
  _WORD *v283;
  __int16 v284;
  int v285;
  int v286;
  int v287;
  __int16 *v288;
  int v289;
  int v290;
  int v291;
  __int16 *v292;
  __int16 v293;
  int v294;
  _WORD *v295;
  __int16 v296;
  int v297;
  int v298;
  __int16 *v299;
  __int16 v300;
  int v301;
  _WORD *v302;
  __int16 v303;
  int v304;
  int v305;
  int v306;
  __int16 *v307;
  int v308;
  int v309;
  int v310;
  __int16 *v311;
  __int16 v312;
  int v313;
  _WORD *v314;
  __int16 v315;
  int v316;
  int v317;
  __int16 *v318;
  __int16 v319;
  int v320;
  _WORD *v321;
  __int16 v322;
  int v323;
  int v324;
  __int16 *v325;
  int v326;
  int v327;
  int v328;
  __int16 *v329;
  __int16 v330;
  int v331;
  _WORD *v332;
  __int16 v333;
  int v334;
  int v335;
  __int16 *v336;
  __int16 v337;
  int v338;
  _WORD *v339;
  __int16 v340;
  unsigned __int8 *v341;
  uint64_t v342;
  unint64_t v343;
  size_t v344;
  uint64_t v345;
  size_t v346;
  uint64_t v347;
  size_t v348;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unsigned __int8 *v354;
  int v355;
  uint64_t v356;
  int v357;
  int v358;
  uint64_t v360;
  int v361;

  v360 = a1 + 39568;
  v12 = *(_QWORD *)(a1 + 39880);
  v13 = mi_size_wide_7[a7];
  v351 = a7;
  if (*(_DWORD *)(a1 + 15736) - a4 >= v13)
    v14 = mi_size_wide_7[a7];
  else
    v14 = *(_DWORD *)(a1 + 15736) - a4;
  v361 = mi_size_high_6[a7];
  if (*(_DWORD *)(a1 + 15732) - a3 >= v361)
    v15 = mi_size_high_6[a7];
  else
    v15 = *(_DWORD *)(a1 + 15732) - a3;
  v350 = *(_QWORD *)(a1 + 39880);
  v355 = *(unsigned __int8 *)(v12 + 77);
  if (*(_BYTE *)(v12 + 77))
    v16 = 1;
  else
    v16 = 3;
  v352 = v16;
  v17 = *(_DWORD *)(a1 + 15780);
  v18 = a4 + v17 * a3;
  v354 = (unsigned __int8 *)(a1 + 15704);
  v19 = mi_size_wide_7[*(unsigned __int8 *)(a1 + 15760)];
  v20 = 8 * v18;
  *(_QWORD *)(*(_QWORD *)(a1 + 15768) + v20) = *(_QWORD *)(a1 + 15744)
                                             + 176 * (a4 / v19 + a3 / v19 * *(_DWORD *)(a1 + 15756));
  v21 = v18;
  v22 = *(_QWORD *)(a1 + 15768);
  *(_QWORD *)(a2 + 7864) = v22 + v20;
  *(_QWORD *)(a2 + 7912) = *(_QWORD *)(a1 + 15784) + v21;
  *(_DWORD *)(a2 + 7920) = v17;
  **(_BYTE **)(v22 + v20) = a7;
  v358 = v14;
  if (v14 >= 2)
  {
    v23 = 8;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 7864) + v23) = **(_QWORD **)(a2 + 7864);
      v23 += 8;
    }
    while (8 * v14 != v23);
  }
  v24 = (_BYTE *)(a2 + 5400);
  v357 = v15;
  if (v15 >= 2)
  {
    v25 = 8 * v14;
    v26 = v15 - 1;
    do
    {
      memcpy((void *)(*(_QWORD *)(a2 + 7864) + 8 * v17), *(const void **)(a2 + 7864), v25);
      v17 += *(_DWORD *)(a1 + 15780);
      --v26;
    }
    while (v26);
  }
  v27 = 4 * v13;
  v28 = 4 * v361;
  v29 = ((4 * v13) >> *(_DWORD *)(a2 + 20));
  v30 = ((4 * v361) >> *(_DWORD *)(a2 + 24));
  if (v29 <= 4)
    LOBYTE(v29) = 4;
  *(_BYTE *)(a2 + 184) = v29;
  if (v30 <= 4)
    LOBYTE(v30) = 4;
  *(_BYTE *)(a2 + 185) = v30;
  v31 = v24;
  if (v355)
  {
    v32 = *(char ***)(a2 + 7864);
    v33 = a4 - 1;
    if ((a3 & 1) == 0)
      goto LABEL_22;
  }
  else
  {
    v42 = (v27 >> *(_DWORD *)(a2 + 2628));
    v43 = (v28 >> *(_DWORD *)(a2 + 2632));
    if (v42 <= 4)
      LOBYTE(v42) = 4;
    *(_BYTE *)(a2 + 2792) = v42;
    if (v43 <= 4)
      v44 = 4;
    else
      v44 = v43;
    *(_BYTE *)(a2 + 2793) = v44;
    v45 = (v27 >> *(_DWORD *)(a2 + 5236));
    v46 = (v28 >> *(_DWORD *)(a2 + 5240));
    if (v45 <= 4)
      LOBYTE(v45) = 4;
    *v24 = v45;
    if (v46 <= 4)
      LOBYTE(v46) = 4;
    v24[1] = v46;
    v32 = *(char ***)(a2 + 7864);
    v33 = a4 - 1;
    if ((a3 & 1) == 0)
    {
LABEL_22:
      v34 = a3 & 0x1F;
      if ((a4 & 1) != 0)
      {
        v60 = *(unsigned int *)(a2 + 20);
        v59 = *(_DWORD *)(a2 + 24);
        if (((0x10003uLL >> **v32) & 1) == 0 || v60 == 0)
          v62 = a4;
        else
          v62 = v33;
        *(_QWORD *)(a2 + 128) = *(_QWORD *)(a2 + 7968) + (v62 >> v60);
        *(_QWORD *)(a2 + 136) = a2 + 7992 + (v34 >> v59);
        v36 = a7;
        v38 = v352;
        v37 = a6;
        if (!v355)
        {
          v63 = *(_DWORD *)(a2 + 2632);
          v64 = *(unsigned int *)(a2 + 2628);
          if (((0x10003uLL >> **v32) & 1) != 0 && v64 != 0)
            v62 = v33;
          *(_QWORD *)(a2 + 2736) = *(_QWORD *)(a2 + 7976) + (v62 >> v64);
          *(_QWORD *)(a2 + 2744) = a2 + 8024 + (v34 >> v63);
          v66 = *(_DWORD *)(a2 + 5240);
          v67 = *(unsigned int *)(a2 + 5236);
          if (((0x10003uLL >> **v32) & 1) == 0 || v67 == 0)
            v69 = v62;
          else
            v69 = v33;
          *(_QWORD *)(a2 + 5344) = *(_QWORD *)(a2 + 7984) + (v69 >> v67);
          v41 = v34 >> v66;
          goto LABEL_104;
        }
      }
      else
      {
        v35 = a2 + 7992 + (v34 >> *(_DWORD *)(a2 + 24));
        *(_QWORD *)(a2 + 128) = *(_QWORD *)(a2 + 7968) + (a4 >> *(_DWORD *)(a2 + 20));
        *(_QWORD *)(a2 + 136) = v35;
        v36 = a7;
        v38 = v352;
        v37 = a6;
        if (!v355)
        {
          v39 = *(_DWORD *)(a2 + 2632);
          *(_QWORD *)(a2 + 2736) = *(_QWORD *)(a2 + 7976) + (a4 >> *(_DWORD *)(a2 + 2628));
          *(_QWORD *)(a2 + 2744) = a2 + 8024 + (v34 >> v39);
          v40 = *(_DWORD *)(a2 + 5240);
          *(_QWORD *)(a2 + 5344) = *(_QWORD *)(a2 + 7984) + (a4 >> *(_DWORD *)(a2 + 5236));
          v41 = v34 >> v40;
LABEL_104:
          *(_QWORD *)(a2 + 5352) = a2 + v41 + 8056;
          goto LABEL_105;
        }
      }
      goto LABEL_105;
    }
  }
  v47 = a3 - 1;
  v48 = **v32;
  v50 = *(_DWORD *)(a2 + 20);
  v49 = *(_DWORD *)(a2 + 24);
  if (((0x20005uLL >> v48) & 1) == 0 || v49 == 0)
    v52 = a3;
  else
    v52 = a3 - 1;
  if ((a4 & 1) != 0)
  {
    if (((0x10003uLL >> v48) & 1) == 0 || v50 == 0)
      v71 = a4;
    else
      v71 = v33;
    *(_QWORD *)(a2 + 128) = *(_QWORD *)(a2 + 7968) + (v71 >> v50);
    *(_QWORD *)(a2 + 136) = a2 + 7992 + ((v52 & 0x1F) >> v49);
    v36 = a7;
    v38 = v352;
    v37 = a6;
    if (!v355)
    {
      v72 = **v32;
      v73 = *(unsigned int *)(a2 + 2632);
      if (((0x20005uLL >> v72) & 1) != 0 && v73 != 0)
        v52 = a3 - 1;
      v75 = *(unsigned int *)(a2 + 2628);
      if (((0x10003uLL >> v72) & 1) != 0 && v75 != 0)
        v71 = v33;
      *(_QWORD *)(a2 + 2736) = *(_QWORD *)(a2 + 7976) + (v71 >> v75);
      *(_QWORD *)(a2 + 2744) = a2 + 8024 + ((v52 & 0x1Fu) >> v73);
      v77 = **v32;
      v78 = *(unsigned int *)(a2 + 5240);
      if (((0x20005uLL >> v77) & 1) == 0 || v78 == 0)
        v47 = v52;
      v80 = *(unsigned int *)(a2 + 5236);
      if (((0x10003uLL >> v77) & 1) == 0 || v80 == 0)
        v82 = v71;
      else
        v82 = v33;
      *(_QWORD *)(a2 + 5344) = *(_QWORD *)(a2 + 7984) + (v82 >> v80);
      v41 = (v47 & 0x1Fu) >> v78;
      goto LABEL_104;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 128) = *(_QWORD *)(a2 + 7968) + (a4 >> v50);
    *(_QWORD *)(a2 + 136) = a2 + 7992 + ((v52 & 0x1F) >> v49);
    v36 = a7;
    v38 = v352;
    v37 = a6;
    if (!v355)
    {
      v53 = *(unsigned int *)(a2 + 2632);
      if (((0x20005uLL >> **v32) & 1) == 0 || v53 == 0)
        v55 = v52;
      else
        v55 = a3 - 1;
      *(_QWORD *)(a2 + 2736) = *(_QWORD *)(a2 + 7976) + (a4 >> *(_DWORD *)(a2 + 2628));
      *(_QWORD *)(a2 + 2744) = a2 + 8024 + ((v55 & 0x1Fu) >> v53);
      v56 = *(unsigned int *)(a2 + 5240);
      if (((0x20005uLL >> **v32) & 1) == 0 || v56 == 0)
        v58 = v55;
      else
        v58 = a3 - 1;
      *(_QWORD *)(a2 + 5344) = *(_QWORD *)(a2 + 7984) + (a4 >> *(_DWORD *)(a2 + 5236));
      v41 = (v58 & 0x1Fu) >> v56;
      goto LABEL_104;
    }
  }
LABEL_105:
  set_mi_row_col(a2, *(_DWORD *)(a2 + 7840), *(_DWORD *)(a2 + 7848), a3, v361, a4, v13, *(_DWORD *)(a1 + 15732), *(_DWORD *)(a1 + 15736));
  av1_setup_dst_planes(a2 + 16, v36, *(_QWORD *)(a1 + 15432) + 1248, a3, a4, 0, v38);
  *(_BYTE *)(**(_QWORD **)(a2 + 7864) + 1) = v37;
  av1_read_mode_info(a1, a2, a5, v358, v357, v83, v84, v85, v86, v87);
  if (v36 >= 3
    && *(_QWORD *)(v350 + 96)
    && av1_ss_size_lookup[4 * v351 + 2 * *(int *)(v350 + 96) + *(int *)(v350 + 100)] == 255)
  {
    aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Invalid block size.");
  }
  v88 = **(_QWORD **)(a2 + 7864);
  if ((*(_WORD *)(v88 + 167) & 0x80) == 0 && *(char *)(v88 + 16) <= 0)
  {
    if (*(_BYTE *)(v88 + 142))
      av1_decode_palette_tokens(a2, 0, a5);
    if (!*(_BYTE *)(*(_QWORD *)(v360 + 312) + 77)
      && *(_BYTE *)(a2 + 12)
      && *(_BYTE *)(**(_QWORD **)(a2 + 7864) + 143))
    {
      av1_decode_palette_tokens(a2, 1, a5);
    }
  }
  v89 = *(unsigned __int8 *)(*(_QWORD *)(v360 + 312) + 77);
  v90 = *(unsigned __int8 ***)(a2 + 7864);
  v91 = *v90;
  v92 = *(_WORD *)(*v90 + 167);
  if ((v92 & 0x80) != 0)
  {
    v93 = 1;
    v94 = *v354;
    v356 = a1;
    if (!v36)
      goto LABEL_123;
  }
  else
  {
    v93 = (char)v91[16] > 0;
    v94 = *v354;
    v356 = a1;
    if (!v36)
      goto LABEL_123;
  }
  if ((_DWORD)v94 == 2)
  {
    v95 = !v93;
    if (v91[144])
      v95 = 1;
    if ((v95 & 1) == 0 && !*(_DWORD *)(a2 + 4 * (v92 & 7) + 10692))
    {
      v133 = *(unsigned __int8 *)(*(_QWORD *)(v360 + 312) + 77);
      v134 = 0;
      v135 = max_txsize_rect_lookup_2[v351];
      v136 = tx_size_high_unit_2[v135];
      v137 = tx_size_wide_unit_2[v135];
      do
      {
        v138 = 0;
        do
        {
          read_tx_size_vartx((_DWORD *)a2, v91, v135, 0, v134, v138, a5);
          v138 += v137;
        }
        while (v138 < v13);
        v134 += v136;
      }
      while (v134 < v361);
      goto LABEL_221;
    }
  }
LABEL_123:
  v96 = *v91;
  if (*(_DWORD *)(a2 + 4 * (v92 & 7) + 10692))
    v97 = 1;
  else
    v97 = (_DWORD)v96 == 0;
  if (v97)
  {
    LODWORD(v94) = 0;
    v91[145] = 0;
    if (!v93)
      goto LABEL_208;
    goto LABEL_207;
  }
  v98 = !v93;
  if (!v91[144])
    v98 = 1;
  if ((_DWORD)v94 != 2 || !v98)
  {
    LODWORD(v94) = tx_mode_to_biggest_tx_size_0[v94];
    if (txsize_sqr_map_0[max_txsize_rect_lookup_2[v96]] <= v94)
      LODWORD(v94) = max_txsize_rect_lookup_2[v96];
    v91[145] = v94;
    if (v93)
      goto LABEL_207;
    goto LABEL_208;
  }
  v99 = bsize_to_tx_size_cat_bsize_to_tx_size_depth_table_0[v96];
  v100 = bsize_to_max_depth_bsize_to_max_depth_table_0[v96];
  v94 = max_txsize_rect_lookup_2[v96];
  v101 = **(unsigned __int8 **)(a2 + 8128);
  v102 = **(unsigned __int8 **)(a2 + 8136);
  if (v31[2472])
  {
    v103 = *(unsigned __int8 **)(a2 + 7888);
    if ((*(_WORD *)(v103 + 167) & 0x80) != 0 || (char)v103[16] >= 1)
      v101 = block_size_wide_8[*v103];
  }
  if (v31[2473])
  {
    v104 = *(unsigned __int8 **)(a2 + 7880);
    if ((*(_WORD *)(v104 + 167) & 0x80) != 0 || (char)v104[16] >= 1)
      v102 = block_size_high_7[*v104];
  }
  if (v31[2473])
    v105 = tx_size_high_4[v94] <= v102;
  else
    v105 = 0;
  v106 = v105;
  if (v31[2472])
    v107 = tx_size_wide_5[v94] <= v101;
  else
    v107 = 0;
  if (v107)
    v108 = v106 + 1;
  else
    v108 = v106;
  v109 = *(_QWORD *)(a2 + 10648);
  v110 = v109 + 24 * (int)(v99 - 1) + 8 * v108 + 15014;
  v111 = v100 + 1;
  v112 = *(_DWORD *)(a5 + 48);
  v113 = *(unsigned __int16 *)(a5 + 52);
  v114 = v113 >> 8;
  v115 = 4 * v100 + 4;
  v116 = -1;
  v117 = 0xFF00000000000000;
  v118 = (unsigned __int16 *)v110;
  do
  {
    v119 = v113;
    v120 = *v118++;
    v121 = v114 * (v120 >> 6);
    v115 -= 4;
    v113 = v115 + (v121 >> 1);
    ++v116;
    v117 += 0x100000000000000;
  }
  while (HIWORD(v112) < v113);
  v122 = v119 - (v121 >> 1) - v115;
  v123 = __clz(v122);
  v124 = (v123 ^ 0xFFE0) + 16;
  v125 = *(_WORD *)(a5 + 54) - v124;
  *(_WORD *)(a5 + 54) = v125;
  v126 = ((v112 - (v113 << 16) + 1) << ((v123 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a5 + 48) = v126;
  *(_WORD *)(a5 + 52) = v122 << v124;
  if (v125 < 0)
  {
    v127 = *(_QWORD *)(a5 + 32);
    v128 = *(int8x16_t **)(a5 + 40);
    if ((unint64_t)v128 >= v127)
    {
      v132 = *(unsigned __int8 **)(a5 + 40);
      goto LABEL_186;
    }
    v129 = 8 - v125;
    if (v129 >= 7)
      v130 = 7;
    else
      v130 = 8 - v125;
    v131 = ((v130 ^ 0xFu) - v125) >> 3;
    if (v131 >= ~(unint64_t)v128 + v127)
      v131 = ~(unint64_t)v128 + v127;
    if (v131 >= 0xF)
    {
      v139 = v131 + 1;
      v140 = (v131 + 1) & 0x3FFFFFF0;
      v132 = &v128->u8[v140];
      v141 = 0uLL;
      v142 = (int16x8_t)(unsigned __int16)v125;
      v143 = (int8x16_t)v126;
      v144 = vdupq_n_s32(v129);
      v145 = (uint32x4_t)vaddq_s32(v144, (int32x4_t)xmmword_208F3A6C0);
      v146 = (uint32x4_t)vaddq_s32(v144, (int32x4_t)xmmword_208F3A6D0);
      v147 = (uint32x4_t)vaddq_s32(v144, (int32x4_t)xmmword_208F3A6A0);
      v148 = (uint32x4_t)vaddq_s32(v144, (int32x4_t)xmmword_208F3A6B0);
      v149.i64[0] = 0x8000800080008;
      v149.i64[1] = 0x8000800080008;
      v150.i64[0] = 0x7F0000007FLL;
      v150.i64[1] = 0x7F0000007FLL;
      v151 = v140;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = 0uLL;
      do
      {
        v155 = *v128++;
        v153 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v155, (int8x16_t)xmmword_208F04F30), v146), v153);
        v152 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v155, (int8x16_t)xmmword_208F04F40), v147), v152);
        v143 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v155, (int8x16_t)xmmword_208F04F50), v148), v143);
        v154 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v155, (int8x16_t)xmmword_208F04F20), v145), v154);
        v142 = vaddq_s16(v142, v149);
        v141 = vaddq_s16(v141, v149);
        v148 = (uint32x4_t)vaddq_s32((int32x4_t)v148, v150);
        v147 = (uint32x4_t)vaddq_s32((int32x4_t)v147, v150);
        v146 = (uint32x4_t)vaddq_s32((int32x4_t)v146, v150);
        v145 = (uint32x4_t)vaddq_s32((int32x4_t)v145, v150);
        v151 -= 16;
      }
      while (v151);
      v156 = (unint64_t)v128 < v127;
      v157 = veorq_s8(veorq_s8(v143, v153), veorq_s8(v152, v154));
      *(int8x8_t *)v157.i8 = veor_s8(*(int8x8_t *)v157.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
      v126 = v157.i32[0] ^ v157.i32[1];
      v125 = vaddvq_s16(vaddq_s16(v142, v141));
      if (v139 == v140)
        goto LABEL_185;
      v129 -= 8 * v140;
    }
    else
    {
      v132 = *(unsigned __int8 **)(a5 + 40);
    }
    do
    {
      v158 = *v132++;
      v126 ^= v158 << v129;
      v125 += 8;
      v156 = (unint64_t)v132 < v127;
      v159 = v129 >= 8;
      v129 -= 8;
    }
    while (v159 && (unint64_t)v132 < v127);
LABEL_185:
    if (v156)
    {
LABEL_187:
      *(_DWORD *)(a5 + 48) = v126;
      *(_WORD *)(a5 + 54) = v125;
      *(_QWORD *)(a5 + 40) = v132;
      goto LABEL_188;
    }
LABEL_186:
    *(_DWORD *)(a5 + 24) = *(_DWORD *)(a5 + 24) - v125 + 0x4000;
    v125 = 0x4000;
    goto LABEL_187;
  }
LABEL_188:
  if (!*(_BYTE *)(a5 + 56))
    goto LABEL_204;
  v160 = *(unsigned __int16 *)(v110 + 2 * v111);
  v161 = (v160 >> 4) + 4;
  v162 = v117 >> 56;
  if ((int)v100 <= 1)
    v100 = 1;
  else
    v100 = v100;
  if (v100 < 8)
  {
    v163 = 0;
    goto LABEL_197;
  }
  v164 = vdupq_n_s64(v162);
  v163 = v100 & 0xF8;
  v165 = (int64x2_t)xmmword_208F30F00;
  v166 = (int64x2_t)xmmword_208F30F10;
  v167 = (int64x2_t)xmmword_208F08AD0;
  v168 = (int64x2_t)xmmword_208F05120;
  v169 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v161));
  v170.i64[0] = 0x800000008000;
  v170.i64[1] = 0x800000008000;
  v171 = vdupq_n_s64(8uLL);
  v172 = v163;
  v173 = (int16x8_t *)(v109 + 24 * (int)(v99 - 1) + 8 * v108 + 15014);
  do
  {
    *v173 = vaddq_s16(*v173, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v164, v168), (int32x4_t)vcgtq_s64(v164, v167)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v164, v166), (int32x4_t)vcgtq_s64(v164, v165))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v170, *(uint16x4_t *)v173->i8), (int32x4_t)v169), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v170, *(uint16x8_t *)v173), (int32x4_t)v169)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v173->i8), v169),
                                          (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v173), v169)))));
    ++v173;
    v166 = vaddq_s64(v166, v171);
    v167 = vaddq_s64(v167, v171);
    v168 = vaddq_s64(v168, v171);
    v165 = vaddq_s64(v165, v171);
    v172 -= 8;
  }
  while (v172);
  if (v163 != v100)
  {
LABEL_197:
    v174 = (_WORD *)(8 * v108 + 24 * v99 + 2 * v163 + v109 + 14990);
    do
    {
      v175 = (unsigned __int16)*v174;
      v176 = v175 - (v175 >> v161);
      v177 = v175 + ((int)(0x8000 - v175) >> v161);
      if (v163 >= v162)
        LOWORD(v177) = v176;
      *v174++ = v177;
      ++v163;
    }
    while (v100 != v163);
  }
  v178 = 2 * v111;
  v179 = *(_WORD *)(v110 + 2 * v111);
  if (v160 < 0x20)
    ++v179;
  *(_WORD *)(v110 + v178) = v179;
LABEL_204:
  if (v116 < 1)
  {
    v91[145] = v94;
    if (!v93)
      goto LABEL_208;
LABEL_207:
    v180 = 0x101010101010101 * v94;
    *(_QWORD *)(v91 + 154) = v180;
    *(_QWORD *)(v91 + 146) = v180;
    goto LABEL_208;
  }
  do
  {
    LODWORD(v94) = sub_tx_size_map_0[v94];
    --v116;
  }
  while (v116);
  v91[145] = v94;
  if (v93)
    goto LABEL_207;
LABEL_208:
  v181 = v31[2908];
  v182 = v31[2909];
  if (v91[144])
  {
    if ((*(_WORD *)(v91 + 167) & 0x80) != 0)
    {
      v184 = 0;
      v185 = 4 * v182;
      v183 = v94;
      v133 = v89;
      if (!v31[2908])
        goto LABEL_219;
      goto LABEL_215;
    }
    v183 = v94;
    if ((char)v91[16] > 0)
    {
      v184 = 0;
      v185 = 4 * v182;
      v133 = v89;
      if (!v31[2908])
        goto LABEL_219;
      goto LABEL_215;
    }
  }
  else
  {
    v183 = v94;
  }
  v185 = tx_size_high_4[v183];
  v184 = 1;
  v133 = v89;
  if (!v31[2908])
    goto LABEL_219;
LABEL_215:
  v186 = tx_size_wide_5[v183];
  if (v184)
    v187 = v186;
  else
    v187 = 4 * v181;
  memset(*(void **)(a2 + 8128), v187, v181);
LABEL_219:
  if ((_DWORD)v182)
    memset(*(void **)(a2 + 8136), v185, v182);
LABEL_221:
  if (!*(_DWORD *)v360)
    goto LABEL_786;
  v188 = *(_DWORD *)(a2 + 10724);
  v189 = *(unsigned __int8 *)(v356 + 34192);
  v190 = v188;
  if (*(_BYTE *)(v356 + 34192))
  {
    v190 = *(_DWORD *)(a2 + 10724);
    if ((*(_BYTE *)(v356 + 34324) & 1) != 0)
    {
      v191 = v188 + *(__int16 *)(v356 + 34196);
      if (v191 >= 255)
        v191 = 255;
      v190 = v191 & ~(v191 >> 31);
    }
  }
  v192 = *(_DWORD *)(*(_QWORD *)(v360 + 312) + 72);
  v193 = *(_DWORD *)(v356 + 15820) + v190;
  if (v193 >= 255)
    v193 = 255;
  switch(v192)
  {
    case 8:
      v194 = dc_qlookup_QTX;
      break;
    case 10:
      v194 = dc_qlookup_10_QTX;
      break;
    case 12:
      v194 = dc_qlookup_12_QTX;
      break;
    default:
      *(_WORD *)(a2 + 144) = -1;
      if (v190 >= 255)
        v195 = 255;
      else
        v195 = v190;
      goto LABEL_241;
  }
  *(_WORD *)(a2 + 144) = v194[v193 & ~(v193 >> 31)];
  if (v190 >= 255)
    v195 = 255;
  else
    v195 = v190;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 146) = ac_qlookup_QTX[v195 & ~(v195 >> 31)];
    if (v133)
      goto LABEL_294;
    goto LABEL_253;
  }
LABEL_241:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 146) = ac_qlookup_12_QTX[v195 & ~(v195 >> 31)];
    if (v133)
      goto LABEL_294;
  }
  else if (v192 == 10)
  {
    *(_WORD *)(a2 + 146) = ac_qlookup_10_QTX[v195 & ~(v195 >> 31)];
    if (v133)
      goto LABEL_294;
  }
  else
  {
    *(_WORD *)(a2 + 146) = -1;
    if (v133)
      goto LABEL_294;
  }
LABEL_253:
  v196 = *(_DWORD *)(v356 + 15832);
  v197 = *(_DWORD *)(v356 + 15824) + v190;
  if (v197 >= 255)
    v197 = 255;
  switch(v192)
  {
    case 8:
      v198 = dc_qlookup_QTX;
      goto LABEL_263;
    case 10:
      v198 = dc_qlookup_10_QTX;
      goto LABEL_263;
    case 12:
      v198 = dc_qlookup_12_QTX;
LABEL_263:
      v199 = v198[v197 & ~(v197 >> 31)];
      goto LABEL_265;
  }
  v199 = -1;
LABEL_265:
  *(_WORD *)(a2 + 2752) = v199;
  v200 = v196 + v190;
  if (v200 >= 255)
    v200 = 255;
  switch(v192)
  {
    case 8:
      v201 = ac_qlookup_QTX;
      goto LABEL_273;
    case 10:
      v201 = ac_qlookup_10_QTX;
      goto LABEL_273;
    case 12:
      v201 = ac_qlookup_12_QTX;
LABEL_273:
      v202 = v201[v200 & ~(v200 >> 31)];
      goto LABEL_275;
  }
  v202 = -1;
LABEL_275:
  *(_WORD *)(a2 + 2754) = v202;
  v203 = *(_DWORD *)(v356 + 15836);
  v204 = *(_DWORD *)(v356 + 15828) + v190;
  if (v204 >= 255)
    v204 = 255;
  switch(v192)
  {
    case 8:
      v205 = dc_qlookup_QTX;
      break;
    case 10:
      v205 = dc_qlookup_10_QTX;
      break;
    case 12:
      v205 = dc_qlookup_12_QTX;
      break;
    default:
      v206 = -1;
      goto LABEL_285;
  }
  v206 = v205[v204 & ~(v204 >> 31)];
LABEL_285:
  *(_WORD *)(a2 + 5360) = v206;
  v207 = v203 + v190;
  if (v207 >= 255)
    v207 = 255;
  switch(v192)
  {
    case 8:
      v208 = ac_qlookup_QTX;
      break;
    case 10:
      v208 = ac_qlookup_10_QTX;
      break;
    case 12:
      v208 = ac_qlookup_12_QTX;
      break;
    default:
      *(_WORD *)(a2 + 5362) = -1;
      v209 = v188;
      if (!v189)
        goto LABEL_299;
      goto LABEL_295;
  }
  *(_WORD *)(a2 + 5362) = v208[v207 & ~(v207 >> 31)];
LABEL_294:
  v209 = v188;
  if (!v189)
    goto LABEL_299;
LABEL_295:
  v209 = v188;
  if ((*(_BYTE *)(v356 + 34328) & 1) != 0)
  {
    v210 = v188 + *(__int16 *)(v356 + 34212);
    if (v210 >= 255)
      v210 = 255;
    v209 = v210 & ~(v210 >> 31);
  }
LABEL_299:
  v211 = *(_DWORD *)(v356 + 15820) + v209;
  if (v211 >= 255)
    v211 = 255;
  switch(v192)
  {
    case 8:
      v212 = dc_qlookup_QTX;
      break;
    case 12:
      v212 = dc_qlookup_12_QTX;
      break;
    case 10:
      v212 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 148) = -1;
      if (v209 >= 255)
        v213 = 255;
      else
        v213 = v209;
      goto LABEL_311;
  }
  *(_WORD *)(a2 + 148) = v212[v211 & ~(v211 >> 31)];
  if (v209 >= 255)
    v213 = 255;
  else
    v213 = v209;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 150) = ac_qlookup_QTX[v213 & ~(v213 >> 31)];
    if (v133)
      goto LABEL_366;
LABEL_323:
    v214 = *(_DWORD *)(v356 + 15832);
    v215 = *(_DWORD *)(v356 + 15824) + v209;
    if (v215 >= 255)
      v215 = 255;
    switch(v192)
    {
      case 8:
        v216 = dc_qlookup_QTX;
        break;
      case 10:
        v216 = dc_qlookup_10_QTX;
        break;
      case 12:
        v216 = dc_qlookup_12_QTX;
        break;
      default:
        v217 = -1;
LABEL_335:
        *(_WORD *)(a2 + 2756) = v217;
        v218 = v214 + v209;
        if (v218 >= 255)
          v218 = 255;
        switch(v192)
        {
          case 8:
            v219 = ac_qlookup_QTX;
            break;
          case 10:
            v219 = ac_qlookup_10_QTX;
            break;
          case 12:
            v219 = ac_qlookup_12_QTX;
            break;
          default:
            v220 = -1;
LABEL_345:
            *(_WORD *)(a2 + 2758) = v220;
            v221 = *(_DWORD *)(v356 + 15836);
            v222 = *(_DWORD *)(v356 + 15828) + v209;
            if (v222 >= 255)
              v222 = 255;
            switch(v192)
            {
              case 8:
                v223 = dc_qlookup_QTX;
                break;
              case 10:
                v223 = dc_qlookup_10_QTX;
                break;
              case 12:
                v223 = dc_qlookup_12_QTX;
                break;
              default:
                v224 = -1;
LABEL_355:
                *(_WORD *)(a2 + 5364) = v224;
                v225 = v221 + v209;
                if (v225 >= 255)
                  v225 = 255;
                switch(v192)
                {
                  case 8:
                    v226 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v226 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v226 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v227 = -1;
                    goto LABEL_365;
                }
                v227 = v226[v225 & ~(v225 >> 31)];
LABEL_365:
                *(_WORD *)(a2 + 5366) = v227;
                goto LABEL_366;
            }
            v224 = v223[v222 & ~(v222 >> 31)];
            goto LABEL_355;
        }
        v220 = v219[v218 & ~(v218 >> 31)];
        goto LABEL_345;
    }
    v217 = v216[v215 & ~(v215 >> 31)];
    goto LABEL_335;
  }
LABEL_311:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 150) = ac_qlookup_12_QTX[v213 & ~(v213 >> 31)];
    if (v133)
      goto LABEL_366;
    goto LABEL_323;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 150) = ac_qlookup_10_QTX[v213 & ~(v213 >> 31)];
    if (!v133)
      goto LABEL_323;
  }
  else
  {
    *(_WORD *)(a2 + 150) = -1;
    if (!v133)
      goto LABEL_323;
  }
LABEL_366:
  v228 = v188;
  if (v189)
  {
    v228 = v188;
    if ((*(_BYTE *)(v356 + 34332) & 1) != 0)
    {
      v229 = v188 + *(__int16 *)(v356 + 34228);
      if (v229 >= 255)
        v229 = 255;
      v228 = v229 & ~(v229 >> 31);
    }
  }
  v230 = *(_DWORD *)(v356 + 15820) + v228;
  if (v230 >= 255)
    v230 = 255;
  switch(v192)
  {
    case 8:
      v231 = dc_qlookup_QTX;
      break;
    case 12:
      v231 = dc_qlookup_12_QTX;
      break;
    case 10:
      v231 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 152) = -1;
      if (v228 >= 255)
        v232 = 255;
      else
        v232 = v228;
      goto LABEL_383;
  }
  *(_WORD *)(a2 + 152) = v231[v230 & ~(v230 >> 31)];
  if (v228 >= 255)
    v232 = 255;
  else
    v232 = v228;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 154) = ac_qlookup_QTX[v232 & ~(v232 >> 31)];
    if (v133)
      goto LABEL_436;
LABEL_395:
    v233 = *(_DWORD *)(v356 + 15832);
    v234 = *(_DWORD *)(v356 + 15824) + v228;
    if (v234 >= 255)
      v234 = 255;
    switch(v192)
    {
      case 8:
        v235 = dc_qlookup_QTX;
        break;
      case 10:
        v235 = dc_qlookup_10_QTX;
        break;
      case 12:
        v235 = dc_qlookup_12_QTX;
        break;
      default:
        v236 = -1;
LABEL_405:
        *(_WORD *)(a2 + 2760) = v236;
        v237 = v233 + v228;
        if (v237 >= 255)
          v237 = 255;
        switch(v192)
        {
          case 8:
            v238 = ac_qlookup_QTX;
            break;
          case 10:
            v238 = ac_qlookup_10_QTX;
            break;
          case 12:
            v238 = ac_qlookup_12_QTX;
            break;
          default:
            v239 = -1;
LABEL_415:
            *(_WORD *)(a2 + 2762) = v239;
            v240 = *(_DWORD *)(v356 + 15836);
            v241 = *(_DWORD *)(v356 + 15828) + v228;
            if (v241 >= 255)
              v241 = 255;
            switch(v192)
            {
              case 8:
                v242 = dc_qlookup_QTX;
                break;
              case 10:
                v242 = dc_qlookup_10_QTX;
                break;
              case 12:
                v242 = dc_qlookup_12_QTX;
                break;
              default:
                v243 = -1;
LABEL_425:
                *(_WORD *)(a2 + 5368) = v243;
                v244 = v240 + v228;
                if (v244 >= 255)
                  v244 = 255;
                switch(v192)
                {
                  case 8:
                    v245 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v245 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v245 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v246 = -1;
                    goto LABEL_435;
                }
                v246 = v245[v244 & ~(v244 >> 31)];
LABEL_435:
                *(_WORD *)(a2 + 5370) = v246;
                goto LABEL_436;
            }
            v243 = v242[v241 & ~(v241 >> 31)];
            goto LABEL_425;
        }
        v239 = v238[v237 & ~(v237 >> 31)];
        goto LABEL_415;
    }
    v236 = v235[v234 & ~(v234 >> 31)];
    goto LABEL_405;
  }
LABEL_383:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 154) = ac_qlookup_12_QTX[v232 & ~(v232 >> 31)];
    if (v133)
      goto LABEL_436;
    goto LABEL_395;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 154) = ac_qlookup_10_QTX[v232 & ~(v232 >> 31)];
    if (!v133)
      goto LABEL_395;
  }
  else
  {
    *(_WORD *)(a2 + 154) = -1;
    if (!v133)
      goto LABEL_395;
  }
LABEL_436:
  v247 = v188;
  if (v189)
  {
    v247 = v188;
    if ((*(_BYTE *)(v356 + 34336) & 1) != 0)
    {
      v248 = v188 + *(__int16 *)(v356 + 34244);
      if (v248 >= 255)
        v248 = 255;
      v247 = v248 & ~(v248 >> 31);
    }
  }
  v249 = *(_DWORD *)(v356 + 15820) + v247;
  if (v249 >= 255)
    v249 = 255;
  switch(v192)
  {
    case 8:
      v250 = dc_qlookup_QTX;
      break;
    case 12:
      v250 = dc_qlookup_12_QTX;
      break;
    case 10:
      v250 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 156) = -1;
      if (v247 >= 255)
        v251 = 255;
      else
        v251 = v247;
      goto LABEL_453;
  }
  *(_WORD *)(a2 + 156) = v250[v249 & ~(v249 >> 31)];
  if (v247 >= 255)
    v251 = 255;
  else
    v251 = v247;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 158) = ac_qlookup_QTX[v251 & ~(v251 >> 31)];
    if (v133)
      goto LABEL_506;
LABEL_465:
    v252 = *(_DWORD *)(v356 + 15832);
    v253 = *(_DWORD *)(v356 + 15824) + v247;
    if (v253 >= 255)
      v253 = 255;
    switch(v192)
    {
      case 8:
        v254 = dc_qlookup_QTX;
        break;
      case 10:
        v254 = dc_qlookup_10_QTX;
        break;
      case 12:
        v254 = dc_qlookup_12_QTX;
        break;
      default:
        v255 = -1;
LABEL_475:
        *(_WORD *)(a2 + 2764) = v255;
        v256 = v252 + v247;
        if (v256 >= 255)
          v256 = 255;
        switch(v192)
        {
          case 8:
            v257 = ac_qlookup_QTX;
            break;
          case 10:
            v257 = ac_qlookup_10_QTX;
            break;
          case 12:
            v257 = ac_qlookup_12_QTX;
            break;
          default:
            v258 = -1;
LABEL_485:
            *(_WORD *)(a2 + 2766) = v258;
            v259 = *(_DWORD *)(v356 + 15836);
            v260 = *(_DWORD *)(v356 + 15828) + v247;
            if (v260 >= 255)
              v260 = 255;
            switch(v192)
            {
              case 8:
                v261 = dc_qlookup_QTX;
                break;
              case 10:
                v261 = dc_qlookup_10_QTX;
                break;
              case 12:
                v261 = dc_qlookup_12_QTX;
                break;
              default:
                v262 = -1;
LABEL_495:
                *(_WORD *)(a2 + 5372) = v262;
                v263 = v259 + v247;
                if (v263 >= 255)
                  v263 = 255;
                switch(v192)
                {
                  case 8:
                    v264 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v264 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v264 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v265 = -1;
                    goto LABEL_505;
                }
                v265 = v264[v263 & ~(v263 >> 31)];
LABEL_505:
                *(_WORD *)(a2 + 5374) = v265;
                goto LABEL_506;
            }
            v262 = v261[v260 & ~(v260 >> 31)];
            goto LABEL_495;
        }
        v258 = v257[v256 & ~(v256 >> 31)];
        goto LABEL_485;
    }
    v255 = v254[v253 & ~(v253 >> 31)];
    goto LABEL_475;
  }
LABEL_453:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 158) = ac_qlookup_12_QTX[v251 & ~(v251 >> 31)];
    if (v133)
      goto LABEL_506;
    goto LABEL_465;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 158) = ac_qlookup_10_QTX[v251 & ~(v251 >> 31)];
    if (!v133)
      goto LABEL_465;
  }
  else
  {
    *(_WORD *)(a2 + 158) = -1;
    if (!v133)
      goto LABEL_465;
  }
LABEL_506:
  v266 = v188;
  if (v189)
  {
    v266 = v188;
    if ((*(_BYTE *)(v356 + 34340) & 1) != 0)
    {
      v267 = v188 + *(__int16 *)(v356 + 34260);
      if (v267 >= 255)
        v267 = 255;
      v266 = v267 & ~(v267 >> 31);
    }
  }
  v268 = *(_DWORD *)(v356 + 15820) + v266;
  if (v268 >= 255)
    v268 = 255;
  switch(v192)
  {
    case 8:
      v269 = dc_qlookup_QTX;
      break;
    case 12:
      v269 = dc_qlookup_12_QTX;
      break;
    case 10:
      v269 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 160) = -1;
      if (v266 >= 255)
        v270 = 255;
      else
        v270 = v266;
      goto LABEL_523;
  }
  *(_WORD *)(a2 + 160) = v269[v268 & ~(v268 >> 31)];
  if (v266 >= 255)
    v270 = 255;
  else
    v270 = v266;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 162) = ac_qlookup_QTX[v270 & ~(v270 >> 31)];
    if (v133)
      goto LABEL_576;
LABEL_535:
    v271 = *(_DWORD *)(v356 + 15832);
    v272 = *(_DWORD *)(v356 + 15824) + v266;
    if (v272 >= 255)
      v272 = 255;
    switch(v192)
    {
      case 8:
        v273 = dc_qlookup_QTX;
        break;
      case 10:
        v273 = dc_qlookup_10_QTX;
        break;
      case 12:
        v273 = dc_qlookup_12_QTX;
        break;
      default:
        v274 = -1;
LABEL_545:
        *(_WORD *)(a2 + 2768) = v274;
        v275 = v271 + v266;
        if (v275 >= 255)
          v275 = 255;
        switch(v192)
        {
          case 8:
            v276 = ac_qlookup_QTX;
            break;
          case 10:
            v276 = ac_qlookup_10_QTX;
            break;
          case 12:
            v276 = ac_qlookup_12_QTX;
            break;
          default:
            v277 = -1;
LABEL_555:
            *(_WORD *)(a2 + 2770) = v277;
            v278 = *(_DWORD *)(v356 + 15836);
            v279 = *(_DWORD *)(v356 + 15828) + v266;
            if (v279 >= 255)
              v279 = 255;
            switch(v192)
            {
              case 8:
                v280 = dc_qlookup_QTX;
                break;
              case 10:
                v280 = dc_qlookup_10_QTX;
                break;
              case 12:
                v280 = dc_qlookup_12_QTX;
                break;
              default:
                v281 = -1;
LABEL_565:
                *(_WORD *)(a2 + 5376) = v281;
                v282 = v278 + v266;
                if (v282 >= 255)
                  v282 = 255;
                switch(v192)
                {
                  case 8:
                    v283 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v283 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v283 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v284 = -1;
                    goto LABEL_575;
                }
                v284 = v283[v282 & ~(v282 >> 31)];
LABEL_575:
                *(_WORD *)(a2 + 5378) = v284;
                goto LABEL_576;
            }
            v281 = v280[v279 & ~(v279 >> 31)];
            goto LABEL_565;
        }
        v277 = v276[v275 & ~(v275 >> 31)];
        goto LABEL_555;
    }
    v274 = v273[v272 & ~(v272 >> 31)];
    goto LABEL_545;
  }
LABEL_523:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 162) = ac_qlookup_12_QTX[v270 & ~(v270 >> 31)];
    if (v133)
      goto LABEL_576;
    goto LABEL_535;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 162) = ac_qlookup_10_QTX[v270 & ~(v270 >> 31)];
    if (!v133)
      goto LABEL_535;
  }
  else
  {
    *(_WORD *)(a2 + 162) = -1;
    if (!v133)
      goto LABEL_535;
  }
LABEL_576:
  v285 = v188;
  if (v189)
  {
    v285 = v188;
    if ((*(_BYTE *)(v356 + 34344) & 1) != 0)
    {
      v286 = v188 + *(__int16 *)(v356 + 34276);
      if (v286 >= 255)
        v286 = 255;
      v285 = v286 & ~(v286 >> 31);
    }
  }
  v287 = *(_DWORD *)(v356 + 15820) + v285;
  if (v287 >= 255)
    v287 = 255;
  switch(v192)
  {
    case 8:
      v288 = dc_qlookup_QTX;
      break;
    case 12:
      v288 = dc_qlookup_12_QTX;
      break;
    case 10:
      v288 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 164) = -1;
      if (v285 >= 255)
        v289 = 255;
      else
        v289 = v285;
      goto LABEL_593;
  }
  *(_WORD *)(a2 + 164) = v288[v287 & ~(v287 >> 31)];
  if (v285 >= 255)
    v289 = 255;
  else
    v289 = v285;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 166) = ac_qlookup_QTX[v289 & ~(v289 >> 31)];
    if (v133)
      goto LABEL_646;
LABEL_605:
    v290 = *(_DWORD *)(v356 + 15832);
    v291 = *(_DWORD *)(v356 + 15824) + v285;
    if (v291 >= 255)
      v291 = 255;
    switch(v192)
    {
      case 8:
        v292 = dc_qlookup_QTX;
        break;
      case 10:
        v292 = dc_qlookup_10_QTX;
        break;
      case 12:
        v292 = dc_qlookup_12_QTX;
        break;
      default:
        v293 = -1;
LABEL_615:
        *(_WORD *)(a2 + 2772) = v293;
        v294 = v290 + v285;
        if (v294 >= 255)
          v294 = 255;
        switch(v192)
        {
          case 8:
            v295 = ac_qlookup_QTX;
            break;
          case 10:
            v295 = ac_qlookup_10_QTX;
            break;
          case 12:
            v295 = ac_qlookup_12_QTX;
            break;
          default:
            v296 = -1;
LABEL_625:
            *(_WORD *)(a2 + 2774) = v296;
            v297 = *(_DWORD *)(v356 + 15836);
            v298 = *(_DWORD *)(v356 + 15828) + v285;
            if (v298 >= 255)
              v298 = 255;
            switch(v192)
            {
              case 8:
                v299 = dc_qlookup_QTX;
                break;
              case 10:
                v299 = dc_qlookup_10_QTX;
                break;
              case 12:
                v299 = dc_qlookup_12_QTX;
                break;
              default:
                v300 = -1;
LABEL_635:
                *(_WORD *)(a2 + 5380) = v300;
                v301 = v297 + v285;
                if (v301 >= 255)
                  v301 = 255;
                switch(v192)
                {
                  case 8:
                    v302 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v302 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v302 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v303 = -1;
                    goto LABEL_645;
                }
                v303 = v302[v301 & ~(v301 >> 31)];
LABEL_645:
                *(_WORD *)(a2 + 5382) = v303;
                goto LABEL_646;
            }
            v300 = v299[v298 & ~(v298 >> 31)];
            goto LABEL_635;
        }
        v296 = v295[v294 & ~(v294 >> 31)];
        goto LABEL_625;
    }
    v293 = v292[v291 & ~(v291 >> 31)];
    goto LABEL_615;
  }
LABEL_593:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 166) = ac_qlookup_12_QTX[v289 & ~(v289 >> 31)];
    if (v133)
      goto LABEL_646;
    goto LABEL_605;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 166) = ac_qlookup_10_QTX[v289 & ~(v289 >> 31)];
    if (!v133)
      goto LABEL_605;
  }
  else
  {
    *(_WORD *)(a2 + 166) = -1;
    if (!v133)
      goto LABEL_605;
  }
LABEL_646:
  v304 = v188;
  if (v189)
  {
    v304 = v188;
    if ((*(_BYTE *)(v356 + 34348) & 1) != 0)
    {
      v305 = v188 + *(__int16 *)(v356 + 34292);
      if (v305 >= 255)
        v305 = 255;
      v304 = v305 & ~(v305 >> 31);
    }
  }
  v306 = *(_DWORD *)(v356 + 15820) + v304;
  if (v306 >= 255)
    v306 = 255;
  switch(v192)
  {
    case 8:
      v307 = dc_qlookup_QTX;
      break;
    case 12:
      v307 = dc_qlookup_12_QTX;
      break;
    case 10:
      v307 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 168) = -1;
      if (v304 >= 255)
        v308 = 255;
      else
        v308 = v304;
      goto LABEL_663;
  }
  *(_WORD *)(a2 + 168) = v307[v306 & ~(v306 >> 31)];
  if (v304 >= 255)
    v308 = 255;
  else
    v308 = v304;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 170) = ac_qlookup_QTX[v308 & ~(v308 >> 31)];
    if (v133)
      goto LABEL_716;
LABEL_675:
    v309 = *(_DWORD *)(v356 + 15832);
    v310 = *(_DWORD *)(v356 + 15824) + v304;
    if (v310 >= 255)
      v310 = 255;
    switch(v192)
    {
      case 8:
        v311 = dc_qlookup_QTX;
        break;
      case 10:
        v311 = dc_qlookup_10_QTX;
        break;
      case 12:
        v311 = dc_qlookup_12_QTX;
        break;
      default:
        v312 = -1;
LABEL_685:
        *(_WORD *)(a2 + 2776) = v312;
        v313 = v309 + v304;
        if (v313 >= 255)
          v313 = 255;
        switch(v192)
        {
          case 8:
            v314 = ac_qlookup_QTX;
            break;
          case 10:
            v314 = ac_qlookup_10_QTX;
            break;
          case 12:
            v314 = ac_qlookup_12_QTX;
            break;
          default:
            v315 = -1;
LABEL_695:
            *(_WORD *)(a2 + 2778) = v315;
            v316 = *(_DWORD *)(v356 + 15836);
            v317 = *(_DWORD *)(v356 + 15828) + v304;
            if (v317 >= 255)
              v317 = 255;
            switch(v192)
            {
              case 8:
                v318 = dc_qlookup_QTX;
                break;
              case 10:
                v318 = dc_qlookup_10_QTX;
                break;
              case 12:
                v318 = dc_qlookup_12_QTX;
                break;
              default:
                v319 = -1;
LABEL_705:
                *(_WORD *)(a2 + 5384) = v319;
                v320 = v316 + v304;
                if (v320 >= 255)
                  v320 = 255;
                switch(v192)
                {
                  case 8:
                    v321 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v321 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v321 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v322 = -1;
                    goto LABEL_715;
                }
                v322 = v321[v320 & ~(v320 >> 31)];
LABEL_715:
                *(_WORD *)(a2 + 5386) = v322;
                goto LABEL_716;
            }
            v319 = v318[v317 & ~(v317 >> 31)];
            goto LABEL_705;
        }
        v315 = v314[v313 & ~(v313 >> 31)];
        goto LABEL_695;
    }
    v312 = v311[v310 & ~(v310 >> 31)];
    goto LABEL_685;
  }
LABEL_663:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 170) = ac_qlookup_12_QTX[v308 & ~(v308 >> 31)];
    if (v133)
      goto LABEL_716;
    goto LABEL_675;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 170) = ac_qlookup_10_QTX[v308 & ~(v308 >> 31)];
    if (!v133)
      goto LABEL_675;
  }
  else
  {
    *(_WORD *)(a2 + 170) = -1;
    if (!v133)
      goto LABEL_675;
  }
LABEL_716:
  if (v189 && (*(_BYTE *)(v356 + 34352) & 1) != 0)
  {
    v323 = v188 + *(__int16 *)(v356 + 34308);
    if (v323 >= 255)
      v323 = 255;
    v188 = v323 & ~(v323 >> 31);
  }
  v324 = *(_DWORD *)(v356 + 15820) + v188;
  if (v324 >= 255)
    v324 = 255;
  switch(v192)
  {
    case 8:
      v325 = dc_qlookup_QTX;
      break;
    case 12:
      v325 = dc_qlookup_12_QTX;
      break;
    case 10:
      v325 = dc_qlookup_10_QTX;
      break;
    default:
      *(_WORD *)(a2 + 172) = -1;
      if (v188 >= 255)
        v326 = 255;
      else
        v326 = v188;
      goto LABEL_733;
  }
  *(_WORD *)(a2 + 172) = v325[v324 & ~(v324 >> 31)];
  if (v188 >= 255)
    v326 = 255;
  else
    v326 = v188;
  if (v192 == 8)
  {
    *(_WORD *)(a2 + 174) = ac_qlookup_QTX[v326 & ~(v326 >> 31)];
    if (v133)
      goto LABEL_786;
LABEL_745:
    v327 = *(_DWORD *)(v356 + 15832);
    v328 = *(_DWORD *)(v356 + 15824) + v188;
    if (v328 >= 255)
      v328 = 255;
    switch(v192)
    {
      case 8:
        v329 = dc_qlookup_QTX;
        break;
      case 10:
        v329 = dc_qlookup_10_QTX;
        break;
      case 12:
        v329 = dc_qlookup_12_QTX;
        break;
      default:
        v330 = -1;
LABEL_755:
        *(_WORD *)(a2 + 2780) = v330;
        v331 = v327 + v188;
        if (v331 >= 255)
          v331 = 255;
        switch(v192)
        {
          case 8:
            v332 = ac_qlookup_QTX;
            break;
          case 10:
            v332 = ac_qlookup_10_QTX;
            break;
          case 12:
            v332 = ac_qlookup_12_QTX;
            break;
          default:
            v333 = -1;
LABEL_765:
            *(_WORD *)(a2 + 2782) = v333;
            v334 = *(_DWORD *)(v356 + 15836);
            v335 = *(_DWORD *)(v356 + 15828) + v188;
            if (v335 >= 255)
              v335 = 255;
            switch(v192)
            {
              case 8:
                v336 = dc_qlookup_QTX;
                break;
              case 10:
                v336 = dc_qlookup_10_QTX;
                break;
              case 12:
                v336 = dc_qlookup_12_QTX;
                break;
              default:
                v337 = -1;
LABEL_775:
                *(_WORD *)(a2 + 5388) = v337;
                v338 = v334 + v188;
                if (v338 >= 255)
                  v338 = 255;
                switch(v192)
                {
                  case 8:
                    v339 = ac_qlookup_QTX;
                    break;
                  case 10:
                    v339 = ac_qlookup_10_QTX;
                    break;
                  case 12:
                    v339 = ac_qlookup_12_QTX;
                    break;
                  default:
                    v340 = -1;
                    goto LABEL_785;
                }
                v340 = v339[v338 & ~(v338 >> 31)];
LABEL_785:
                *(_WORD *)(a2 + 5390) = v340;
                goto LABEL_786;
            }
            v337 = v336[v335 & ~(v335 >> 31)];
            goto LABEL_775;
        }
        v333 = v332[v331 & ~(v331 >> 31)];
        goto LABEL_765;
    }
    v330 = v329[v328 & ~(v328 >> 31)];
    goto LABEL_755;
  }
LABEL_733:
  if (v192 == 12)
  {
    *(_WORD *)(a2 + 174) = ac_qlookup_12_QTX[v326 & ~(v326 >> 31)];
    if (v133)
      goto LABEL_786;
    goto LABEL_745;
  }
  if (v192 == 10)
  {
    *(_WORD *)(a2 + 174) = ac_qlookup_10_QTX[v326 & ~(v326 >> 31)];
    if (!v133)
      goto LABEL_745;
  }
  else
  {
    *(_WORD *)(a2 + 174) = -1;
    if (!v133)
      goto LABEL_745;
  }
LABEL_786:
  if (v91[144])
  {
    v341 = &av1_ss_size_lookup[4 * v351];
    v342 = v341[2 * *(int *)(a2 + 20) + *(int *)(a2 + 24)];
    v343 = 2 * *(unsigned __int8 *)(a2 + 12) * (unint64_t)(v133 == 0);
    v344 = mi_size_high_5[v342];
    bzero(*(void **)(a2 + 128), mi_size_wide_6[v342]);
    bzero(*(void **)(a2 + 136), v344);
    if (v343)
    {
      v345 = v341[2 * *(int *)(a2 + 2628) + *(int *)(a2 + 2632)];
      v346 = mi_size_high_5[v345];
      bzero(*(void **)(a2 + 2736), mi_size_wide_6[v345]);
      bzero(*(void **)(a2 + 2744), v346);
      v347 = v341[2 * *(int *)(a2 + 5236) + *(int *)(a2 + 5240)];
      v348 = mi_size_high_5[v347];
      bzero(*(void **)(a2 + 5344), mi_size_wide_6[v347]);
      bzero(*(void **)(a2 + 5352), v348);
    }
  }
  return decode_token_recon_block(v356, a2, a5, a7);
}

uint64_t decode_block_0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;

  v13 = a7;
  v14 = mi_size_wide_7[a7];
  v15 = mi_size_high_6[v13];
  v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 39880) + 77);
  LODWORD(v13) = *(_DWORD *)(a1 + 15780);
  v17 = a4 + v13 * a3;
  *(_QWORD *)(a2 + 7864) = *(_QWORD *)(a1 + 15768) + 8 * v17;
  *(_QWORD *)(a2 + 7912) = *(_QWORD *)(a1 + 15784) + v17;
  *(_DWORD *)(a2 + 7920) = v13;
  v18 = 4 * v14;
  v19 = 4 * v15;
  v20 = ((4 * v14) >> *(_DWORD *)(a2 + 20));
  v21 = ((4 * v15) >> *(_DWORD *)(a2 + 24));
  if (v20 <= 4)
    LOBYTE(v20) = 4;
  *(_BYTE *)(a2 + 184) = v20;
  if (v21 <= 4)
    LOBYTE(v21) = 4;
  *(_BYTE *)(a2 + 185) = v21;
  if (v16)
  {
    v22 = 1;
  }
  else
  {
    v23 = (v18 >> *(_DWORD *)(a2 + 2628));
    v24 = (v19 >> *(_DWORD *)(a2 + 2632));
    if (v23 <= 4)
      LOBYTE(v23) = 4;
    *(_BYTE *)(a2 + 2792) = v23;
    if (v24 <= 4)
      v25 = 4;
    else
      v25 = v24;
    *(_BYTE *)(a2 + 2793) = v25;
    v26 = (v18 >> *(_DWORD *)(a2 + 5236));
    v27 = (v19 >> *(_DWORD *)(a2 + 5240));
    if (v26 <= 4)
      LOBYTE(v26) = 4;
    *(_BYTE *)(a2 + 5400) = v26;
    if (v27 <= 4)
      LOBYTE(v27) = 4;
    *(_BYTE *)(a2 + 5401) = v27;
    v22 = 3;
  }
  set_mi_row_col(a2, *(_DWORD *)(a2 + 7840), *(_DWORD *)(a2 + 7848), a3, v15, a4, v14, *(_DWORD *)(a1 + 15732), *(_DWORD *)(a1 + 15736));
  av1_setup_dst_planes(a2 + 16, a7, *(_QWORD *)(a1 + 15432) + 1248, a3, a4, 0, v22);
  return decode_token_recon_block(a1, a2, a5, a7);
}

_DWORD *read_tx_size_vartx(_DWORD *result, unsigned __int8 *a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v20;
  int v21;
  int v22;
  char v23;
  int v24;
  signed int v25;
  signed int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  size_t v55;
  size_t v56;
  void *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  int v74;
  __int16 v75;
  unint64_t v76;
  int8x16_t *v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int8x16_t v85;
  int32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  uint32x4_t v90;
  int16x8_t v91;
  int32x4_t v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  BOOL v98;
  int8x16_t v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned __int16 v106;
  uint64_t v107;
  int v108;
  signed int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  signed int v113;
  int v114;
  signed int v115;
  signed int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned __int8 *v130;
  void *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  size_t v135;
  int v136;
  signed int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned __int8 *v150;
  void *v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  size_t v156;
  int v157;
  unint64_t v158;
  int v159;
  int v160;
  _QWORD *v161;

  v9 = a5;
  v11 = *a2;
  v12 = block_size_high_7[v11];
  v13 = result[1984];
  v14 = v12;
  if (v13 < 0)
    v14 = (v13 >> (result[6] + 3)) + v12;
  v15 = v14 >> 2;
  v16 = block_size_wide_8[v11];
  v17 = result[1982];
  if (v17 < 0)
  {
    if (v15 <= a5 || (int)((v17 >> (result[5] + 3)) + v16) >> 2 <= a6)
      return result;
  }
  else if (v15 <= a5 || (int)block_size_wide_8[v11] >> 2 <= a6)
  {
    return result;
  }
  v20 = sub_tx_size_map_0[max_txsize_rect_lookup_2[v11]];
  v21 = *(_DWORD *)((char *)&tx_size_wide_log2_2 + v20 * 4) - 2;
  v22 = *(_DWORD *)((char *)&tx_size_high_log2_2 + v20 * 4) - 2;
  v23 = mi_size_wide_log2_1[v11] - v21;
  v161 = result;
  if (a4 == 2)
  {
    v24 = 0;
    v25 = tx_size_wide_unit_2[a3];
    v26 = tx_size_wide_unit_2[v20];
    if (v26 <= v25)
      v27 = tx_size_wide_unit_2[a3];
    else
      v27 = tx_size_wide_unit_2[v20];
    if (v26 >= v25)
      v28 = tx_size_wide_unit_2[v20];
    else
      v28 = v26 + 1;
    v29 = v27 - v28;
    if (v26 <= 1)
      v30 = 1;
    else
      v30 = tx_size_wide_unit_2[v20];
    v31 = tx_size_high_unit_2[a3];
    v32 = tx_size_high_unit_2[v20];
    v33 = v29 / v30;
    if (v26 < v25)
      ++v33;
    v34 = v33 + 1;
    v35 = v34 & 0xFFFFFFFE;
    while (1)
    {
      v36 = (v24 + a5) >> v22 << v23;
      if (v34 >= 2)
      {
        v38 = a6;
        v39 = v34 & 0xFFFFFFFE;
        do
        {
          v40 = a2 + 146;
          v40[v36 + (uint64_t)(v38 >> v21)] = a3;
          v40[v36 + (uint64_t)((v26 + v38) >> v21)] = a3;
          v38 += 2 * v26;
          v39 -= 2;
        }
        while (v39);
        v37 = v35 * v26;
        if (v34 == v35)
          goto LABEL_27;
      }
      else
      {
        v37 = 0;
      }
      do
      {
        a2[((a6 + v37) >> v21) + 146 + (uint64_t)v36] = a3;
        v37 += v26;
      }
      while (v37 < v25);
LABEL_27:
      v24 += v32;
      if (v24 >= v31)
      {
        a2[145] = a3;
        v50 = (void *)(v161[1016] + a6);
        v51 = txsize_to_bsize_2[a3];
        v52 = mi_size_wide_7[v51];
        v53 = tx_size_wide_5[a3];
        v54 = tx_size_high_4[a3];
        if (mi_size_high_6[v51] <= 1u)
          v55 = 1;
        else
          v55 = mi_size_high_6[v51];
        memset((void *)(v161[1017] + a5), v54, v55);
        if (v52 <= 1)
          v56 = 1;
        else
          v56 = v52;
        v57 = v50;
        v58 = v53;
        return memset(v57, v58, v56);
      }
    }
  }
  v41 = a5;
  v42 = a3;
  v43 = a3;
  v44 = LOBYTE(tx_size_wide_5[v43]);
  v45 = LOBYTE(tx_size_high_4[v43]);
  if (a3)
  {
    if (v16 <= v12)
      v46 = v12;
    else
      v46 = v16;
    v47 = 63;
    if (v46 <= 31)
    {
      if (v46 == 8)
      {
        v49 = 0;
        v48 = 1;
        goto LABEL_56;
      }
      if (v46 == 16)
      {
        v48 = 2;
        v49 = 1;
        goto LABEL_56;
      }
    }
    else
    {
      v48 = 4;
      v49 = 1;
      if (v46 == 128 || v46 == 64)
      {
LABEL_56:
        if (txsize_sqr_up_map_0[a3] == v48)
          v60 = 0;
        else
          v60 = v49;
        v47 = 3 * (v60 | (2 * (4 - v48)));
        goto LABEL_60;
      }
      if (v46 == 32)
      {
        v48 = 3;
        goto LABEL_56;
      }
    }
LABEL_60:
    v59 = (v45 > *(unsigned __int8 *)(*((_QWORD *)result + 1017) + a5))
        + (unint64_t)(v44 > *(unsigned __int8 *)(*((_QWORD *)result + 1016) + a6))
        + v47;
    goto LABEL_61;
  }
  v59 = 0;
LABEL_61:
  v61 = 0;
  v62 = (unsigned __int16 *)(*((_QWORD *)result + 1331) + 6 * v59 + 11654);
  v63 = *(_DWORD *)(a7 + 48);
  v64 = *(unsigned __int16 *)(a7 + 52);
  v65 = v64 >> 8;
  v66 = 8;
  v67 = 0xFF00000000000000;
  do
  {
    v68 = v64;
    v69 = v65 * (v62[v61] >> 6);
    v66 -= 4;
    v64 = v66 + (v69 >> 1);
    ++v61;
    v67 += 0x100000000000000;
  }
  while (HIWORD(v63) < v64);
  v70 = v68 - (v69 >> 1) - v66;
  v71 = (__clz(v70) ^ 0xFFFFFFE0) + 16;
  v72 = *(_WORD *)(a7 + 54) - v71;
  *(_WORD *)(a7 + 54) = v72;
  v73 = ((v63 - (v64 << 16) + 1) << v71) - 1;
  *(_DWORD *)(a7 + 48) = v73;
  *(_WORD *)(a7 + 52) = v70 << v71;
  v74 = v61 - 1;
  if ((v72 & 0x8000) == 0)
    goto LABEL_83;
  v75 = v72;
  v76 = *(_QWORD *)(a7 + 32);
  v77 = *(int8x16_t **)(a7 + 40);
  if ((unint64_t)v77 >= v76)
  {
    v81 = *(unsigned __int8 **)(a7 + 40);
LABEL_81:
    *(_DWORD *)(a7 + 24) = *(_DWORD *)(a7 + 24) - v75 + 0x4000;
    v75 = 0x4000;
    goto LABEL_82;
  }
  v159 = v9;
  v78 = 8 - v72;
  if (v78 >= 7)
    v79 = 7;
  else
    v79 = 8 - v72;
  v80 = ((v79 ^ 0xFu) - v72) >> 3;
  if (v80 >= ~(unint64_t)v77 + v76)
    v80 = ~(unint64_t)v77 + v76;
  if (v80 >= 0xF)
  {
    v158 = v80 + 1;
    v82 = (v80 + 1) & 0x3FFFFFF0;
    v81 = &v77->u8[v82];
    v83 = 0uLL;
    v84 = (int16x8_t)(unsigned __int16)v72;
    v85 = (int8x16_t)v73;
    v86 = vdupq_n_s32(v78);
    v87 = (uint32x4_t)vaddq_s32(v86, (int32x4_t)xmmword_208F3A6C0);
    v88 = (uint32x4_t)vaddq_s32(v86, (int32x4_t)xmmword_208F3A6D0);
    v89 = (uint32x4_t)vaddq_s32(v86, (int32x4_t)xmmword_208F3A6A0);
    v90 = (uint32x4_t)vaddq_s32(v86, (int32x4_t)xmmword_208F3A6B0);
    v91.i64[0] = 0x8000800080008;
    v91.i64[1] = 0x8000800080008;
    v92.i64[0] = 0x7F0000007FLL;
    v92.i64[1] = 0x7F0000007FLL;
    v93 = v82;
    v94 = 0uLL;
    v95 = 0uLL;
    v96 = 0uLL;
    do
    {
      v97 = *v77++;
      v95 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v97, (int8x16_t)xmmword_208F04F30), v88), v95);
      v94 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v97, (int8x16_t)xmmword_208F04F40), v89), v94);
      v85 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v97, (int8x16_t)xmmword_208F04F50), v90), v85);
      v96 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v97, (int8x16_t)xmmword_208F04F20), v87), v96);
      v84 = vaddq_s16(v84, v91);
      v83 = vaddq_s16(v83, v91);
      v90 = (uint32x4_t)vaddq_s32((int32x4_t)v90, v92);
      v89 = (uint32x4_t)vaddq_s32((int32x4_t)v89, v92);
      v88 = (uint32x4_t)vaddq_s32((int32x4_t)v88, v92);
      v87 = (uint32x4_t)vaddq_s32((int32x4_t)v87, v92);
      v93 -= 16;
    }
    while (v93);
    v98 = (unint64_t)v77 < v76;
    v99 = veorq_s8(veorq_s8(v85, v95), veorq_s8(v94, v96));
    *(int8x8_t *)v99.i8 = veor_s8(*(int8x8_t *)v99.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL));
    v73 = v99.i32[0] ^ v99.i32[1];
    v75 = vaddvq_s16(vaddq_s16(v84, v83));
    if (v158 == v82)
      goto LABEL_80;
    v78 -= 8 * v82;
  }
  else
  {
    v81 = *(unsigned __int8 **)(a7 + 40);
  }
  do
  {
    v100 = *v81++;
    v73 ^= v100 << v78;
    v75 += 8;
    v98 = (unint64_t)v81 < v76;
    v101 = v78 >= 8;
    v78 -= 8;
  }
  while (v101 && (unint64_t)v81 < v76);
LABEL_80:
  v9 = v159;
  if (!v98)
    goto LABEL_81;
LABEL_82:
  *(_DWORD *)(a7 + 48) = v73;
  *(_WORD *)(a7 + 54) = v75;
  *(_QWORD *)(a7 + 40) = v81;
LABEL_83:
  if (*(_BYTE *)(a7 + 56))
  {
    v102 = v62[2];
    v103 = (v102 >> 4) + 4;
    v104 = *v62;
    if (v67 < 1)
      v105 = v104 - (v104 >> v103);
    else
      v105 = v104 + ((int)(0x8000 - v104) >> v103);
    *v62 = v105;
    if (v102 >= 0x20)
      v106 = v102;
    else
      v106 = v102 + 1;
    v62[2] = v106;
  }
  if (v74)
  {
    v107 = sub_tx_size_map_0[a3];
    v108 = tx_size_high_unit_2[a3];
    v109 = tx_size_wide_unit_2[a3];
    if (((0x63uLL >> a3) & 1) == 0)
    {
      v110 = 0;
      v111 = tx_size_wide_unit_2[v107];
      v157 = tx_size_high_unit_2[v107];
      v112 = (a4 + 1);
      result = v161;
      v160 = v9;
      do
      {
        v113 = 0;
        do
        {
          read_tx_size_vartx(result, a2, v107, v112, (v110 + v9), (a6 + v113), a7);
          result = v161;
          v113 += v111;
        }
        while (v113 < v109);
        v110 += v157;
        v9 = v160;
      }
      while (v110 < v108);
      return result;
    }
    v136 = 0;
    v137 = tx_size_wide_unit_2[v20];
    if (v137 <= v109)
      v138 = tx_size_wide_unit_2[a3];
    else
      v138 = tx_size_wide_unit_2[v20];
    if (v137 >= v109)
      v139 = tx_size_wide_unit_2[v20];
    else
      v139 = v137 + 1;
    v140 = v138 - v139;
    if (v137 <= 1)
      v141 = 1;
    else
      v141 = tx_size_wide_unit_2[v20];
    v142 = tx_size_high_unit_2[v20];
    v143 = v140 / v141;
    if (v137 < v109)
      ++v143;
    v144 = v143 + 1;
    v145 = v144 & 0xFFFFFFFE;
    while (1)
    {
      v146 = (v136 + v9) >> v22 << v23;
      if (v144 >= 2)
      {
        v148 = a6;
        v149 = v144 & 0xFFFFFFFE;
        do
        {
          v150 = a2 + 146;
          v150[v146 + (uint64_t)(v148 >> v21)] = 0;
          v150[v146 + (uint64_t)((v137 + v148) >> v21)] = 0;
          v148 += 2 * v137;
          v149 -= 2;
        }
        while (v149);
        v147 = v145 * v137;
        if (v144 == v145)
          goto LABEL_137;
      }
      else
      {
        v147 = 0;
      }
      do
      {
        a2[((a6 + v147) >> v21) + 146 + (uint64_t)v146] = 0;
        v147 += v137;
      }
      while (v147 < v109);
LABEL_137:
      v136 += v142;
      if (v136 >= v108)
      {
        a2[145] = v107;
        v151 = (void *)(v161[1016] + a6);
        v152 = txsize_to_bsize_2[v42];
        v153 = mi_size_wide_7[v152];
        v154 = tx_size_wide_5[v107];
        v155 = mi_size_high_6[v152];
        if (v155 <= 1)
          v156 = 1;
        else
          v156 = v155;
        memset((void *)(v161[1017] + v41), tx_size_high_4[v107], v156);
        if (v153 <= 1)
          v56 = 1;
        else
          v56 = v153;
        v57 = v151;
        v58 = v154;
        return memset(v57, v58, v56);
      }
    }
  }
  v114 = 0;
  v115 = tx_size_wide_unit_2[a3];
  v116 = tx_size_wide_unit_2[v20];
  if (v116 <= v115)
    v117 = tx_size_wide_unit_2[a3];
  else
    v117 = tx_size_wide_unit_2[v20];
  if (v116 >= v115)
    v118 = tx_size_wide_unit_2[v20];
  else
    v118 = v116 + 1;
  v119 = v117 - v118;
  if (v116 <= 1)
    v120 = 1;
  else
    v120 = tx_size_wide_unit_2[v20];
  v121 = tx_size_high_unit_2[a3];
  v122 = tx_size_high_unit_2[v20];
  v123 = v119 / v120;
  if (v116 < v115)
    ++v123;
  v124 = v123 + 1;
  v125 = v124 & 0xFFFFFFFE;
  do
  {
    v126 = (v114 + v9) >> v22 << v23;
    if (v124 < 2)
    {
      v127 = 0;
      do
      {
LABEL_116:
        a2[((a6 + v127) >> v21) + 146 + (uint64_t)v126] = a3;
        v127 += v116;
      }
      while (v127 < v115);
      goto LABEL_110;
    }
    v128 = a6;
    v129 = v124 & 0xFFFFFFFE;
    do
    {
      v130 = a2 + 146;
      v130[v126 + (uint64_t)(v128 >> v21)] = a3;
      v130[v126 + (uint64_t)((v116 + v128) >> v21)] = a3;
      v128 += 2 * v116;
      v129 -= 2;
    }
    while (v129);
    v127 = v125 * v116;
    if (v124 != v125)
      goto LABEL_116;
LABEL_110:
    v114 += v122;
  }
  while (v114 < v121);
  a2[145] = a3;
  v131 = (void *)(v161[1016] + a6);
  v132 = txsize_to_bsize_2[a3];
  v133 = mi_size_wide_7[v132];
  v134 = mi_size_high_6[v132];
  if (v134 <= 1)
    v135 = 1;
  else
    v135 = v134;
  memset((void *)(v161[1017] + v41), v45, v135);
  if (v133 <= 1)
    v56 = 1;
  else
    v56 = v133;
  v57 = v131;
  v58 = v44;
  return memset(v57, v58, v56);
}

uint64_t decode_token_recon_block(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t i;
  int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t j;
  int v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t k;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  uint64_t v112;
  _WORD *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  unsigned __int8 *v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  _DWORD v148[3];

  v4 = a4;
  v6 = a2;
  v7 = a2 + 256928;
  v8 = (_WORD *)(a2 + 15028);
  v9 = result + 15200;
  v120 = *(unsigned __int8 *)(*(_QWORD *)(result + 39880) + 77);
  v10 = **(_QWORD **)(a2 + 7864);
  if ((*(_WORD *)(v10 + 167) & 0x80) != 0 || *(char *)(v10 + 16) > 0)
  {
    v142 = **(unsigned __int8 ***)(a2 + 7864);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 256960))(result + 15200, a2, a4);
    if (!v142[144])
    {
      v148[0] = 0;
      v11 = block_size_wide_8[v4];
      v12 = *(_DWORD *)(v6 + 7928);
      if (v12 < 0)
        v11 += v12 >> (*(_BYTE *)(v6 + 20) + 3);
      v13 = v11 >> 2;
      v108 = v4;
      v14 = block_size_high_7[v4];
      v15 = *(_DWORD *)(v6 + 7936);
      if (v15 < 0)
        v14 += v15 >> (*(_BYTE *)(v6 + 24) + 3);
      if (v13 >= 16)
        v16 = 16;
      else
        v16 = v11 >> 2;
      v114 = v16;
      if (v14 >> 2 >= 16)
        v17 = 16;
      else
        v17 = v14 >> 2;
      v106 = v17;
      if (v14 >= 4 && v11 >= 4)
      {
        v18 = v14 >> 2;
        v19 = 0;
        v109 = &av1_ss_size_lookup[4 * v4];
        v146 = v6;
        v110 = v11 >> 2;
        v112 = v7;
        v113 = v8;
        v141 = v9;
        v105 = v14 >> 2;
        do
        {
          v20 = 0;
          v21 = v19 + v106;
          v107 = v19 + v106;
          if (v19 + v106 >= v18)
            v21 = v18;
          v116 = v19;
          v118 = v21;
          do
          {
            if (v20 + v114 >= v13)
              v22 = v13;
            else
              v22 = v20 + v114;
            v121 = v22;
            v123 = v20;
            v23 = *(int *)(v6 + 20);
            v24 = *(int *)(v6 + 24);
            v25 = v109[2 * v23 + v24];
            v125 = v20 + v114;
            if (*(_DWORD *)(v6 + 4 * (*(_WORD *)(**(_QWORD **)(v6 + 7864) + 167) & 7) + 10692))
              v26 = 0;
            else
              v26 = max_txsize_rect_lookup_2[v25];
            v32 = (v19 >> v24);
            v135 = (v118 + (1 << v24 >> 1)) >> v24;
            if ((int)v32 < v135)
            {
              v33 = (v121 + (1 << v23 >> 1)) >> v23;
              v131 = v20 >> v23;
              if (v20 >> v23 < v33)
              {
                v34 = 0;
                v35 = v26;
                v36 = tx_size_wide_unit_2[v35];
                v127 = tx_size_high_unit_2[v35];
                do
                {
                  v37 = v131;
                  do
                  {
                    v38 = v26;
                    decode_reconstruct_tx(v141, v146, a3, v142, 0, v25, v32, v37, v34, v26, v148);
                    v26 = v38;
                    v34 += v36 * v127;
                    v37 = v37 + v36;
                  }
                  while ((int)v37 < v33);
                  v32 = (v32 + v127);
                }
                while ((int)v32 < v135);
              }
            }
            if (!v120 && *(_BYTE *)(v146 + 12))
            {
              v27 = *(int *)(v146 + 2628);
              v28 = *(int *)(v146 + 2632);
              v29 = av1_ss_size_lookup[4 * v108 + 2 * v27 + v28];
              if (*(_DWORD *)(v146 + 4 * (*(_WORD *)(**(_QWORD **)(v146 + 7864) + 167) & 7) + 10692))
              {
                v30 = 0;
                v31 = v116;
              }
              else
              {
                v31 = v116;
                v30 = 3;
                switch(av1_ss_size_lookup[4 * v108 + 2 * v27 + v28])
                {
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                    break;
                  case 0x14u:
                    v30 = 9;
                    break;
                  case 0x15u:
                    v30 = 10;
                    break;
                  default:
                    v30 = max_txsize_rect_lookup_2[v29];
                    break;
                }
              }
              v39 = (v31 >> v28);
              v136 = (v118 + (1 << v28 >> 1)) >> v28;
              if ((int)v39 < v136)
              {
                v40 = (v121 + (1 << v27 >> 1)) >> v27;
                v132 = v123 >> v27;
                if (v123 >> v27 < v40)
                {
                  v41 = 0;
                  v42 = v30;
                  v43 = tx_size_wide_unit_2[v42];
                  v128 = tx_size_high_unit_2[v42];
                  do
                  {
                    v44 = v132;
                    do
                    {
                      decode_reconstruct_tx(v141, v146, a3, v142, 1, v29, v39, v44, v41, v30, v148);
                      v41 += v43 * v128;
                      v44 = v44 + v43;
                    }
                    while ((int)v44 < v40);
                    v39 = (v39 + v128);
                  }
                  while ((int)v39 < v136);
                }
              }
              if (*(_BYTE *)(v146 + 12))
              {
                v45 = *(int *)(v146 + 5236);
                v46 = *(int *)(v146 + 5240);
                v47 = av1_ss_size_lookup[4 * v108 + 2 * v45 + v46];
                if (*(_DWORD *)(v146 + 4 * (*(_WORD *)(**(_QWORD **)(v146 + 7864) + 167) & 7) + 10692))
                {
                  v48 = 0;
                  v49 = v116;
                }
                else
                {
                  v49 = v116;
                  v48 = 3;
                  switch(av1_ss_size_lookup[4 * v108 + 2 * v45 + v46])
                  {
                    case 0xAu:
                    case 0xBu:
                    case 0xCu:
                    case 0xDu:
                    case 0xEu:
                    case 0xFu:
                      break;
                    case 0x14u:
                      v48 = 9;
                      break;
                    case 0x15u:
                      v48 = 10;
                      break;
                    default:
                      v48 = max_txsize_rect_lookup_2[v47];
                      break;
                  }
                }
                v50 = (v49 >> v46);
                v137 = (v118 + (1 << v46 >> 1)) >> v46;
                if ((int)v50 < v137)
                {
                  v51 = (v121 + (1 << v45 >> 1)) >> v45;
                  v133 = v123 >> v45;
                  if (v123 >> v45 < v51)
                  {
                    v52 = 0;
                    v53 = v48;
                    v54 = tx_size_wide_unit_2[v53];
                    v129 = tx_size_high_unit_2[v53];
                    do
                    {
                      v55 = v133;
                      do
                      {
                        decode_reconstruct_tx(v141, v146, a3, v142, 2, v47, v50, v55, v52, v48, v148);
                        v52 += v54 * v129;
                        v55 = v55 + v54;
                      }
                      while ((int)v55 < v51);
                      v50 = (v50 + v129);
                    }
                    while ((int)v50 < v137);
                  }
                }
              }
            }
            v20 = v125;
            v13 = v110;
            v7 = v112;
            v8 = v113;
            v6 = v146;
            v9 = v141;
            v19 = v116;
          }
          while (v125 < v110);
          v19 = v107;
          v18 = v105;
        }
        while (v107 < v105);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v9, v6);
    goto LABEL_64;
  }
  v59 = block_size_wide_8[a4];
  v60 = *(_DWORD *)(a2 + 7928);
  if (v60 < 0)
    v59 += v60 >> (*(_BYTE *)(a2 + 20) + 3);
  v61 = v59 >> 2;
  v62 = block_size_high_7[a4];
  v63 = *(_DWORD *)(a2 + 7936);
  if (v63 < 0)
    v62 += v63 >> (*(_BYTE *)(a2 + 24) + 3);
  if (v61 >= 16)
    v64 = 16;
  else
    v64 = v59 >> 2;
  v122 = v64;
  if (v62 >> 2 >= 16)
    v65 = 16;
  else
    v65 = v62 >> 2;
  v115 = v65;
  if (v62 >= 4 && v59 >= 4)
  {
    v66 = v62 >> 2;
    v67 = 0;
    v119 = v59 >> 2;
    v111 = v66;
    do
    {
      v68 = 0;
      v69 = v67 + v115;
      v117 = v67 + v115;
      if (v67 + v115 >= v66)
        v69 = v66;
      v124 = v67;
      v126 = v69;
      do
      {
        if (v68 + v122 >= v61)
          v70 = v61;
        else
          v70 = v68 + v122;
        v130 = v70;
        v71 = **(_QWORD **)(v6 + 7864);
        v147 = v68;
        v134 = v68 + v122;
        if (*(_DWORD *)(v6 + 4 * (*(_WORD *)(v71 + 167) & 7) + 10692))
          v72 = 0;
        else
          v72 = *(unsigned __int8 *)(v71 + 145);
        v76 = *(_DWORD *)(v6 + 24);
        v77 = (v67 >> v76);
        v143 = (v126 + (1 << v76 >> 1)) >> v76;
        if ((int)v77 < v143)
        {
          v78 = v72;
          v79 = v72;
          v138 = tx_size_high_unit_2[v79];
          v80 = tx_size_wide_unit_2[v79];
          v81 = (v130 + (1 << *(_DWORD *)(v6 + 20) >> 1)) >> *(_DWORD *)(v6 + 20);
          for (i = (v68 >> *(_DWORD *)(v6 + 20)); (int)i < v81; i = i + v80)
          {
LABEL_105:
            (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))v7)(v9, v6, a3, 0, v77, i, v78);
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v7 + 8))(v9, v6, a3, 0, v77, i, v78);
            v83 = (unsigned __int16)v8[38] + tx_size_high_4[v78] * tx_size_wide_5[v78];
            v8[38] = v83;
            v8[54] = (unsigned __int16)v83 >> 4;
          }
          while (1)
          {
            v77 = (v77 + v138);
            v68 = v147;
            if ((int)v77 >= v143)
              break;
            i = (v147 >> *(_DWORD *)(v6 + 20));
            if ((int)i < v81)
              goto LABEL_105;
          }
        }
        if (!v120 && *(_BYTE *)(v6 + 12))
        {
          v73 = **(unsigned __int8 ***)(v6 + 7864);
          if (*(_DWORD *)(v6 + 4 * (*(_WORD *)(v73 + 167) & 7) + 10692))
          {
            v74 = 0;
            v75 = v124;
          }
          else
          {
            v84 = max_txsize_rect_lookup_2[av1_ss_size_lookup[4 * *v73 + 2 * *(int *)(v6 + 2628) + *(int *)(v6 + 2632)]];
            v75 = v124;
            v74 = 3;
            switch(v84)
            {
              case 4u:
              case 0xBu:
              case 0xCu:
                break;
              case 0x11u:
                v74 = 9;
                break;
              case 0x12u:
                v74 = 10;
                break;
              default:
                v74 = v84;
                break;
            }
          }
          v85 = *(_DWORD *)(v6 + 2632);
          v86 = (v75 >> v85);
          v144 = (v126 + (1 << v85 >> 1)) >> v85;
          if ((int)v86 < v144)
          {
            v87 = v74;
            v88 = v74;
            v139 = tx_size_high_unit_2[v88];
            v89 = tx_size_wide_unit_2[v88];
            v90 = (v130 + (1 << *(_DWORD *)(v6 + 2628) >> 1)) >> *(_DWORD *)(v6 + 2628);
            for (j = (v68 >> *(_DWORD *)(v6 + 2628)); (int)j < v90; j = j + v89)
            {
LABEL_115:
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7)(v9, v6, a3, 1, v86, j, v87);
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(v9, v6, a3, 1, v86, j, v87);
              v92 = (unsigned __int16)v8[39] + tx_size_high_4[v87] * tx_size_wide_5[v87];
              v8[39] = v92;
              v8[55] = (unsigned __int16)v92 >> 4;
            }
            while (1)
            {
              v86 = (v86 + v139);
              v68 = v147;
              if ((int)v86 >= v144)
                break;
              j = (v147 >> *(_DWORD *)(v6 + 2628));
              if ((int)j < v90)
                goto LABEL_115;
            }
          }
          if (*(_BYTE *)(v6 + 12))
          {
            v93 = **(unsigned __int8 ***)(v6 + 7864);
            if (*(_DWORD *)(v6 + 4 * (*(_WORD *)(v93 + 167) & 7) + 10692))
            {
              v94 = 0;
              v95 = v124;
            }
            else
            {
              v96 = max_txsize_rect_lookup_2[av1_ss_size_lookup[4 * *v93 + 2 * *(int *)(v6 + 5236) + *(int *)(v6 + 5240)]];
              v95 = v124;
              v94 = 3;
              switch(v96)
              {
                case 4u:
                case 0xBu:
                case 0xCu:
                  break;
                case 0x11u:
                  v94 = 9;
                  break;
                case 0x12u:
                  v94 = 10;
                  break;
                default:
                  v94 = v96;
                  break;
              }
            }
            v97 = *(_DWORD *)(v6 + 5240);
            v98 = (v95 >> v97);
            v145 = (v126 + (1 << v97 >> 1)) >> v97;
            if ((int)v98 < v145)
            {
              v99 = v94;
              v100 = v94;
              v140 = tx_size_high_unit_2[v100];
              v101 = tx_size_wide_unit_2[v100];
              v102 = (v130 + (1 << *(_DWORD *)(v6 + 5236) >> 1)) >> *(_DWORD *)(v6 + 5236);
              for (k = (v68 >> *(_DWORD *)(v6 + 5236)); (int)k < v102; k = k + v101)
              {
LABEL_128:
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7)(v9, v6, a3, 2, v98, k, v99);
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(v9, v6, a3, 2, v98, k, v99);
                v104 = (unsigned __int16)v8[40] + tx_size_high_4[v99] * tx_size_wide_5[v99];
                v8[40] = v104;
                v8[56] = (unsigned __int16)v104 >> 4;
              }
              while (1)
              {
                v98 = (v98 + v140);
                if ((int)v98 >= v145)
                  break;
                k = (v147 >> *(_DWORD *)(v6 + 5236));
                if ((int)k < v102)
                  goto LABEL_128;
              }
            }
          }
        }
        v68 = v134;
        v61 = v119;
        v67 = v124;
      }
      while (v134 < v119);
      v67 = v117;
      v66 = v111;
    }
    while (v117 < v111);
  }
LABEL_64:
  v56 = **(unsigned __int8 ***)(v6 + 7864);
  if ((*(_WORD *)(v56 + 167) & 0x80) == 0 && (char)v56[16] <= 0)
  {
    if (v56[142])
      *v8 += (block_size_wide_8[*v56] >> *(_DWORD *)(v6 + 20)) * (block_size_high_7[*v56] >> *(_DWORD *)(v6 + 24));
    if (!*(_BYTE *)(*(_QWORD *)(v9 + 24680) + 77) && *(_BYTE *)(v6 + 12))
    {
      if (v56[143])
      {
        v57 = *v56;
        v58 = block_size_high_7[v57] >> *(_DWORD *)(v6 + 2632);
        LODWORD(v57) = block_size_wide_8[v57] >> *(_DWORD *)(v6 + 2628);
        v8[1] += (v57 + 2 * (v57 < 4)) * (v58 + 2 * (v58 < 4));
      }
    }
  }
  return result;
}

uint64_t set_mi_row_col(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _BOOL4 v9;
  int v10;
  int v11;
  _BOOL4 v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  *(_DWORD *)(result + 7932) = -32 * a4;
  *(_DWORD *)(result + 7936) = 32 * (a8 - (a5 + a4));
  *(_DWORD *)(result + 7924) = -32 * a6;
  *(_DWORD *)(result + 7928) = 32 * (a9 - (a7 + a6));
  *(_DWORD *)result = a4;
  *(_DWORD *)(result + 4) = a6;
  v9 = a2 < a4;
  *(_BYTE *)(result + 7872) = v9;
  v10 = *(_DWORD *)(result + 2628);
  v11 = *(_DWORD *)(result + 2632);
  v12 = a3 < a6;
  *(_BYTE *)(result + 7873) = v12;
  *(_BYTE *)(result + 7874) = v9;
  if (v10)
    v13 = a7 <= 1;
  else
    v13 = 0;
  if (v13)
    v12 = a6 - 1 > a3;
  *(_BYTE *)(result + 7875) = v12;
  if (a5 <= 1 && v11)
  {
    v9 = a4 - 1 > a2;
    *(_BYTE *)(result + 7874) = v9;
  }
  if (a2 >= a4)
  {
    *(_QWORD *)(result + 7888) = 0;
    if (a3 >= a6)
    {
LABEL_12:
      *(_QWORD *)(result + 7880) = 0;
      if ((a4 & 1) != 0)
        goto LABEL_19;
      goto LABEL_16;
    }
  }
  else
  {
    *(_QWORD *)(result + 7888) = *(_QWORD *)(*(_QWORD *)(result + 7864) - 8 * *(int *)(result + 8));
    if (a3 >= a6)
      goto LABEL_12;
  }
  *(_QWORD *)(result + 7880) = *(_QWORD *)(*(_QWORD *)(result + 7864) - 8);
  if ((a4 & 1) != 0)
    goto LABEL_19;
LABEL_16:
  if ((a5 & 1) != 0 && v11)
  {
    *(_BYTE *)(result + 12) = 0;
    goto LABEL_29;
  }
LABEL_19:
  if ((a6 & 1) != 0 || (a7 & 1) == 0)
  {
    *(_BYTE *)(result + 12) = 1;
    goto LABEL_24;
  }
  *(_BYTE *)(result + 12) = v10 == 0;
  if (!v10)
  {
LABEL_24:
    v14 = *(_DWORD *)(result + 8);
    v15 = *(_QWORD *)(result + 7864) + 8 * -((v10 & a6) + v14 * (v11 & a4));
    if (v9)
    {
      *(_QWORD *)(result + 7904) = *(_QWORD *)(v15 + 8 * (v10 - v14));
      if (v12)
      {
LABEL_26:
        *(_QWORD *)(result + 7896) = *(_QWORD *)(v15 + 8 * (v14 * v11 - 1));
        goto LABEL_29;
      }
    }
    else
    {
      *(_QWORD *)(result + 7904) = 0;
      if (v12)
        goto LABEL_26;
    }
    *(_QWORD *)(result + 7896) = 0;
  }
LABEL_29:
  *(_BYTE *)(result + 8309) = a5;
  *(_BYTE *)(result + 8308) = a7;
  *(_BYTE *)(result + 10632) = 0;
  if (a7 >= a5
    || ((a7 + a6) & (a5 - 1)) != 0)
  {
    *(_BYTE *)(result + 10633) = 0;
    if (a7 <= a5)
      return result;
  }
  else
  {
    *(_BYTE *)(result + 10632) = 1;
    *(_BYTE *)(result + 10633) = 0;
    if (a7 <= a5)
      return result;
  }
  if (((a7 - 1) & a4) == 0)
    *(_BYTE *)(result + 10633) = 1;
  return result;
}

uint64_t decode_reconstruct_tx(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, unsigned __int8 a10, _DWORD *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;

  v14 = result;
  v15 = (int)a5;
  if (!(_DWORD)a5)
  {
    v19 = a4[((int)a8 >> av1_get_txb_size_index_tw_w_log2_table_1[a6])
           + 146
           + ((int)a7 >> av1_get_txb_size_index_tw_h_log2_table_1[a6] << av1_get_txb_size_index_stride_log2_table_1[a6])];
    v20 = block_size_high_7[a6];
    v21 = *(_DWORD *)(a2 + 7936);
    if (v21 < 0)
    {
      v20 += v21 >> (*(_BYTE *)(a2 + 24) + 3);
      v22 = block_size_wide_8[a6];
      v23 = *(_DWORD *)(a2 + 7928);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_6:
        v24 = v20 >> 2;
        v25 = __OFSUB__(v24, (_DWORD)a7);
        v26 = v24 - a7;
        if ((v26 < 0) ^ v25 | (v26 == 0))
          return result;
        goto LABEL_16;
      }
    }
    else
    {
      v22 = block_size_wide_8[a6];
      v23 = *(_DWORD *)(a2 + 7928);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_6;
    }
    v22 += v23 >> (*(_BYTE *)(a2 + 20) + 3);
    v27 = v20 >> 2;
    v25 = __OFSUB__(v27, (_DWORD)a7);
    v26 = v27 - a7;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      return result;
    goto LABEL_16;
  }
  v16 = a2 + 2608 * (int)a5;
  v17 = *(int *)(v16 + 20);
  v18 = *(int *)(v16 + 24);
  v19 = 3;
  switch(av1_ss_size_lookup[4 * *a4 + 2 * v17 + v18])
  {
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      break;
    case 0x14u:
      v19 = 9;
      break;
    case 0x15u:
      v19 = 10;
      break;
    default:
      v19 = max_txsize_rect_lookup_2[av1_ss_size_lookup[4 * *a4 + 2 * v17 + v18]];
      break;
  }
  v22 = ((*(int *)(a2 + 7928) >> (v17 + 3)) & (*(int *)(a2 + 7928) >> 31)) + block_size_wide_8[a6];
  v28 = (((*(int *)(a2 + 7936) >> (v18 + 3)) & (*(int *)(a2 + 7936) >> 31)) + block_size_high_7[a6]) >> 2;
  v25 = __OFSUB__(v28, (_DWORD)a7);
  v26 = v28 - a7;
  if (!((v26 < 0) ^ v25 | (v26 == 0)))
  {
LABEL_16:
    v29 = v22 >> 2;
    LODWORD(v30) = v29 - a8;
    if (v29 > (int)a8)
    {
      if ((_DWORD)a5 || v19 == a10)
      {
        v44 = a2 + 256944;
        v45 = a2;
        v46 = a3;
        (*(void (**)(uint64_t))(a2 + 256944))(result);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v44 + 8))(v14, v45, v46, a5, a7, a8, a10);
        v47 = v45 + 2 * v15;
        *a11 += *(unsigned __int16 *)(*(_QWORD *)(v45 + 8 * v15 + 15112) + 4 * *(unsigned __int16 *)(v47 + 15136));
        v48 = *(unsigned __int16 *)(v47 + 15104) + tx_size_high_4[a10] * tx_size_wide_5[a10];
        *(_WORD *)(v47 + 15104) = v48;
        *(_WORD *)(v47 + 15136) = (unsigned __int16)v48 >> 4;
      }
      else
      {
        v31 = tx_size_high_unit_2[a10];
        if (v31 >= v26)
          v31 = v26;
        v32 = tx_size_wide_unit_2[a10];
        if (v32 >= (int)v30)
          v30 = v30;
        else
          v30 = v32;
        v50 = v31;
        if (v31 >= 1 && (int)v30 >= 1)
        {
          v33 = 0;
          v35 = sub_tx_size_map_0[a10];
          v36 = tx_size_wide_unit_2[v35];
          v49 = tx_size_high_unit_2[v35];
          v37 = v49 * v36;
          v52 = result;
          do
          {
            v38 = 0;
            v51 = v33;
            do
            {
              v39 = v14;
              v40 = a2;
              v41 = a3;
              v42 = v30;
              v43 = v36;
              result = decode_reconstruct_tx(v39);
              v36 = v43;
              v30 = v42;
              a3 = v41;
              v14 = v52;
              a2 = v40;
              a9 += v37;
              v38 += v43;
            }
            while (v38 < (int)v42);
            v33 = v51 + v49;
          }
          while (v51 + v49 < v50);
        }
      }
    }
  }
  return result;
}

__n128 read_wiener_filter(int a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int primitive_subexpfin;
  int v11;
  __int16 v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  __n128 result;
  __int128 v39;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (a1 == 7)
  {
    v8 = *a3;
    v9 = v8 + 5;
    primitive_subexpfin = aom_read_primitive_subexpfin_(a4, 16, 1);
    if ((unsigned __int16)(v8 + 5) <= 8u)
    {
      if (primitive_subexpfin <= 2 * (unsigned __int16)v9)
      {
        if ((primitive_subexpfin & 1) != 0)
          primitive_subexpfin = v9 - ((primitive_subexpfin + 1) >> 1);
        else
          primitive_subexpfin = v9 + (primitive_subexpfin >> 1);
      }
    }
    else
    {
      v11 = 10 - v8;
      if (primitive_subexpfin <= 2 * (unsigned __int16)(10 - v8))
      {
        if ((primitive_subexpfin & 1) != 0)
          primitive_subexpfin = v11 - ((primitive_subexpfin + 1) >> 1);
        else
          primitive_subexpfin = v11 + (primitive_subexpfin >> 1);
      }
      LOWORD(primitive_subexpfin) = 15 - primitive_subexpfin;
    }
    v12 = primitive_subexpfin - 5;
  }
  else
  {
    v12 = 0;
  }
  *(_WORD *)(a2 + 12) = v12;
  *(_WORD *)a2 = v12;
  v13 = a3[1];
  v14 = v13 + 23;
  v15 = aom_read_primitive_subexpfin_(a4, 32, 2);
  if ((unsigned __int16)(v13 + 23) <= 0x10u)
  {
    if (v15 <= 2 * (unsigned __int16)v14)
    {
      if ((v15 & 1) != 0)
        v15 = v14 - ((v15 + 1) >> 1);
      else
        v15 = v14 + (v15 >> 1);
    }
  }
  else
  {
    v16 = 8 - v13;
    if (v15 <= 2 * (unsigned __int16)(8 - v13))
    {
      if ((v15 & 1) != 0)
        v15 = v16 - ((v15 + 1) >> 1);
      else
        v15 = v16 + (v15 >> 1);
    }
    LOWORD(v15) = 31 - v15;
  }
  *(_WORD *)(a2 + 10) = v15 - 23;
  *(_WORD *)(a2 + 2) = v15 - 23;
  v17 = a3[2];
  v18 = v17 + 17;
  v19 = aom_read_primitive_subexpfin_(a4, 64, 3);
  if ((unsigned __int16)(v17 + 17) <= 0x20u)
  {
    if (v19 <= 2 * (unsigned __int16)v18)
    {
      if ((v19 & 1) != 0)
        v19 = v18 - ((v19 + 1) >> 1);
      else
        v19 = v18 + (v19 >> 1);
    }
  }
  else
  {
    v20 = 46 - v17;
    if (v19 <= 2 * (unsigned __int16)(46 - v17))
    {
      v21 = v20 - ((v19 + 1) >> 1);
      v22 = v20 + (v19 >> 1);
      if ((v19 & 1) != 0)
        LOWORD(v19) = v21;
      else
        LOWORD(v19) = v22;
    }
    LOWORD(v19) = 63 - v19;
  }
  v23 = 0;
  *(_WORD *)(a2 + 8) = v19 - 17;
  *(_WORD *)(a2 + 4) = v19 - 17;
  *(_WORD *)(a2 + 6) = -2 * (*(_WORD *)a2 + v19 - 17 + *(_WORD *)(a2 + 2));
  if (a1 == 7)
  {
    v24 = a3[8];
    v25 = v24 + 5;
    v26 = aom_read_primitive_subexpfin_(a4, 16, 1);
    if ((unsigned __int16)(v24 + 5) <= 8u)
    {
      if (v26 <= 2 * (unsigned __int16)v25)
      {
        if ((v26 & 1) != 0)
          v26 = v25 - ((v26 + 1) >> 1);
        else
          v26 = v25 + (v26 >> 1);
      }
    }
    else
    {
      v27 = 10 - v24;
      if (v26 <= 2 * (unsigned __int16)(10 - v24))
      {
        if ((v26 & 1) != 0)
          v26 = v27 - ((v26 + 1) >> 1);
        else
          v26 = v27 + (v26 >> 1);
      }
      LOWORD(v26) = 15 - v26;
    }
    v23 = v26 - 5;
  }
  *(_WORD *)(a2 + 28) = v23;
  *(_WORD *)(a2 + 16) = v23;
  v28 = a3[9];
  v29 = v28 + 23;
  v30 = aom_read_primitive_subexpfin_(a4, 32, 2);
  if ((unsigned __int16)(v28 + 23) <= 0x10u)
  {
    if (v30 <= 2 * (unsigned __int16)v29)
    {
      if ((v30 & 1) != 0)
        v30 = v29 - ((v30 + 1) >> 1);
      else
        v30 = v29 + (v30 >> 1);
    }
  }
  else
  {
    v31 = 8 - v28;
    if (v30 <= 2 * (unsigned __int16)(8 - v28))
    {
      if ((v30 & 1) != 0)
        v30 = v31 - ((v30 + 1) >> 1);
      else
        v30 = v31 + (v30 >> 1);
    }
    LOWORD(v30) = 31 - v30;
  }
  *(_WORD *)(a2 + 26) = v30 - 23;
  *(_WORD *)(a2 + 18) = v30 - 23;
  v32 = a3[10];
  v33 = v32 + 17;
  v34 = aom_read_primitive_subexpfin_(a4, 64, 3);
  if ((unsigned __int16)(v32 + 17) <= 0x20u)
  {
    if (v34 <= 2 * (unsigned __int16)v33)
    {
      if ((v34 & 1) != 0)
        v34 = v33 - ((v34 + 1) >> 1);
      else
        v34 = v33 + (v34 >> 1);
    }
  }
  else
  {
    v35 = 46 - v32;
    if (v34 <= 2 * (unsigned __int16)(46 - v32))
    {
      v36 = v35 - ((v34 + 1) >> 1);
      v37 = v35 + (v34 >> 1);
      if ((v34 & 1) != 0)
        LOWORD(v34) = v36;
      else
        LOWORD(v34) = v37;
    }
    LOWORD(v34) = 63 - v34;
  }
  *(_WORD *)(a2 + 24) = v34 - 17;
  *(_WORD *)(a2 + 20) = v34 - 17;
  *(_WORD *)(a2 + 22) = -2 * (*(_WORD *)(a2 + 16) + v34 - 17 + *(_WORD *)(a2 + 18));
  result = *(__n128 *)a2;
  v39 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *((_OWORD *)a3 + 1) = v39;
  return result;
}

BOOL tile_worker_hook_0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  void (**v7)(uint64_t, uint64_t, uint64_t, int, int, int, unsigned int, double, double, double, double, int8x16_t);
  char v8;
  pthread_mutex_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a1;
  if (setjmp(a1 + 57))
  {
    a1[56] = 0;
    *(_DWORD *)(*(_QWORD *)a1 + 15056) = 1;
    return 0;
  }
  else
  {
    v6 = v4;
    v7 = (void (**)(uint64_t, uint64_t, uint64_t, int, int, int, unsigned int, double, double, double, double, int8x16_t))(v4 + 256928);
    a1[56] = 1;
    if (*(_DWORD *)(a2 + 40484))
      v8 = 0;
    else
      v8 = *(_BYTE *)(a2 + 15692) == 0;
    *v7 = read_coeffs_tx_intra_block;
    v7[1] = (void (*)(uint64_t, uint64_t, uint64_t, int, int, int, unsigned int, double, double, double, double, int8x16_t))predict_and_reconstruct_intra_block;
    v7[2] = av1_read_coeffs_txb_facade;
    v7[3] = (void (*)(uint64_t, uint64_t, uint64_t, int, int, int, unsigned int, double, double, double, double, int8x16_t))inverse_transform_inter_block;
    v7[4] = (void (*)(uint64_t, uint64_t, uint64_t, int, int, int, unsigned int, double, double, double, double, int8x16_t))predict_inter_block;
    v7[5] = (void (*)(uint64_t, uint64_t, uint64_t, int, int, int, unsigned int, double, double, double, double, int8x16_t))cfl_store_inter_block;
    if (!*(_DWORD *)(v6 + 15056))
    {
      v9 = (pthread_mutex_t **)(a2 + 363792);
      while (1)
      {
        pthread_mutex_lock(*v9);
        v10 = *(int *)(a2 + 363812);
        if ((int)v10 >= *(_DWORD *)(a2 + 363808))
          break;
        *(_DWORD *)(a2 + 363812) = v10 + 1;
        v11 = *(_QWORD *)(a2 + 363800);
        pthread_mutex_unlock(*v9);
        if (v11)
        {
          v12 = v11 + 16 * v10;
          v13 = *(_QWORD *)(v12 + 8);
          tile_worker_hook_init((_DWORD *)a2, (uint64_t *)a1, *(unsigned __int8 ***)v12, v13, v8);
          decode_tile(a2, v6, *(_DWORD *)(v13 + 16), *(_DWORD *)(v13 + 20));
          if (!*(_DWORD *)(v6 + 15056))
            continue;
        }
        goto LABEL_7;
      }
      pthread_mutex_unlock(*v9);
    }
LABEL_7:
    a1[56] = 0;
    return *(_DWORD *)(v6 + 15056) == 0;
  }
}

void decode_tile(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  size_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  unsigned int v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v42;

  v6 = (uint64_t *)(a2 + 256864);
  v7 = a2 + 8200;
  v8 = a1 + 15200;
  v9 = *(_QWORD *)(a1 + 39880);
  v10 = *(unsigned __int8 *)(v9 + 77);
  v11 = a1 + 39904 + 4 * a3;
  v12 = *(_DWORD *)(v11 + 320);
  v13 = *(_DWORD *)(v9 + 36);
  v14 = *(_DWORD *)(v11 + 324);
  v15 = *(_DWORD *)(a1 + 15732);
  v16 = a1 + 39904 + 4 * a4;
  v17 = *(_DWORD *)(v16 + 60) << v13;
  v18 = *(_DWORD *)(v16 + 64) << v13;
  if (v18 >= *(_DWORD *)(a1 + 15736))
    v19 = *(_DWORD *)(a1 + 15736);
  else
    v19 = v18;
  v39 = v17;
  v42 = v19;
  av1_zero_above_context((_QWORD *)(a1 + 15200), a2, v17, v19, a3);
  *(_BYTE *)(v7 + 2552) = 0;
  if (v10)
    v20 = 2;
  else
    v20 = 4;
  bzero((void *)(a2 + 10753), v20);
  *(_QWORD *)(a2 + 0x2000) = 0xFFEA000FFFF90003;
  *(_QWORD *)(a2 + 8176) = 0xFFEA000FFFF90003;
  *(_WORD *)v7 = 15;
  *(_WORD *)(a2 + 8184) = 15;
  *(_DWORD *)(v7 + 2) = 262137;
  *(_DWORD *)(a2 + 8186) = 262137;
  *(_QWORD *)(v7 + 76) = 0x1FFFFFFFE0;
  v40 = v10;
  if (v10)
  {
    v21 = (v12 << v13);
    if (v14 << v13 >= v15)
      v22 = v15;
    else
      v22 = v14 << v13;
    if ((int)v21 >= v22)
      goto LABEL_28;
  }
  else
  {
    *(_QWORD *)(a2 + 8224) = 0xFFEA000FFFF90003;
    *(_QWORD *)(a2 + 8208) = 0xFFEA000FFFF90003;
    *(_WORD *)(v7 + 32) = 15;
    *(_WORD *)(v7 + 16) = 15;
    *(_DWORD *)(v7 + 34) = 262137;
    *(_DWORD *)(v7 + 18) = 262137;
    *(_QWORD *)(a2 + 8288) = 0x1FFFFFFFE0;
    *(_QWORD *)(a2 + 8256) = 0xFFEA000FFFF90003;
    *(_QWORD *)(a2 + 8240) = 0xFFEA000FFFF90003;
    *(_WORD *)(v7 + 64) = 15;
    *(_WORD *)(v7 + 48) = 15;
    *(_DWORD *)(v7 + 66) = 262137;
    *(_DWORD *)(v7 + 50) = 262137;
    *(_QWORD *)(v7 + 100) = 0x1FFFFFFFE0;
    v21 = (v12 << v13);
    if (v14 << v13 >= v15)
      v22 = v15;
    else
      v22 = v14 << v13;
    if ((int)v21 >= v22)
      goto LABEL_28;
  }
  v23 = v8 + 24680;
  v24 = (_OWORD *)(a2 + 7992);
  v25 = (_OWORD *)(a2 + 8096);
  v26 = (_OWORD *)(a2 + 8144);
  if (v39 < v42)
  {
    v27 = 0uLL;
    *(_QWORD *)&v28 = 0x4040404040404040;
    *((_QWORD *)&v28 + 1) = 0x4040404040404040;
    v38 = v22;
LABEL_19:
    *(_OWORD *)(a2 + 8056) = v27;
    *(_OWORD *)(a2 + 8072) = v27;
    *(_OWORD *)(a2 + 8024) = v27;
    *(_OWORD *)(a2 + 8040) = v27;
    *v24 = v27;
    *(_OWORD *)(a2 + 8008) = v27;
    *v25 = v27;
    *(_OWORD *)(a2 + 8112) = v27;
    v29 = v39;
    *v26 = v28;
    *(_OWORD *)(a2 + 8160) = v28;
    while (1)
    {
      *(_QWORD *)(a2 + 15080) = a2 + 15200;
      *(_QWORD *)(a2 + 15112) = a2 + 211808;
      *(_WORD *)(v7 + 6904) = 0;
      *(_WORD *)(v7 + 6936) = 0;
      if (!v40)
      {
        *(_QWORD *)(a2 + 15088) = a2 + 80736;
        *(_QWORD *)(a2 + 15120) = a2 + 215904;
        *(_DWORD *)(v7 + 6906) = 0;
        *(_DWORD *)(v7 + 6938) = 0;
        *(_QWORD *)(a2 + 15096) = a2 + 146272;
        *(_QWORD *)(a2 + 15128) = a2 + 220000;
      }
      *(_QWORD *)(a2 + 176) = a2 + 224096;
      *(_QWORD *)(a2 + 2784) = a2 + 240480;
      *(_DWORD *)(v7 + 6828) = 0;
      decode_partition_0(a1, a2, v21, v29, *v6, *(unsigned __int8 *)(*(_QWORD *)v23 + 28), 3);
      if (*(_QWORD *)(*v6 + 8) - *(_QWORD *)*v6 < (uint64_t)((*(_DWORD *)(*v6 + 24)
                                                                          - *(__int16 *)(*v6 + 54)
                                                                          + 8
                                                                          * (*(_DWORD *)(*v6 + 40)
                                                                           - *(_DWORD *)(*v6 + 16))
                                                                          + 7) >> 3))
        goto LABEL_34;
      v30 = *(_DWORD *)(*(_QWORD *)v23 + 32);
      v29 = (v30 + v29);
      if ((int)v29 >= v42)
      {
        v21 = (v30 + v21);
        v27 = 0uLL;
        *(_QWORD *)&v28 = 0x4040404040404040;
        *((_QWORD *)&v28 + 1) = 0x4040404040404040;
        if ((int)v21 < v38)
          goto LABEL_19;
        goto LABEL_28;
      }
    }
  }
  *(_QWORD *)&v31 = 0x4040404040404040;
  *((_QWORD *)&v31 + 1) = 0x4040404040404040;
  do
  {
    *(_OWORD *)(a2 + 8056) = 0uLL;
    *(_OWORD *)(a2 + 8072) = 0uLL;
    *(_OWORD *)(a2 + 8024) = 0uLL;
    *(_OWORD *)(a2 + 8040) = 0uLL;
    *v24 = 0uLL;
    *(_OWORD *)(a2 + 8008) = 0uLL;
    *v25 = 0uLL;
    *(_OWORD *)(a2 + 8112) = 0uLL;
    *v26 = v31;
    *(_OWORD *)(a2 + 8160) = v31;
    LODWORD(v21) = *(_DWORD *)(*(_QWORD *)v23 + 32) + v21;
  }
  while ((int)v21 < v22);
LABEL_28:
  v32 = *(_DWORD *)(*v6 + 24) - *(__int16 *)(*v6 + 54) + 8 * (*(_DWORD *)(*v6 + 40) - *(_DWORD *)(*v6 + 16)) + 7;
  v33 = v32 >> 3;
  v35 = *(_QWORD *)*v6;
  v34 = *(_QWORD *)(*v6 + 8);
  if ((uint64_t)(v34 - v35) < v33
    || (v36 = (_BYTE *)(v35 + v33), ((2 * (0x80u >> (v32 & 7)) - 1) & *(v36 - 1)) != 0x80u >> (v32 & 7)))
  {
LABEL_34:
    v37 = 1;
    goto LABEL_35;
  }
  if ((unint64_t)v36 < v34)
  {
    while (!*v36)
    {
      if ((unint64_t)++v36 >= v34)
        goto LABEL_33;
    }
    goto LABEL_34;
  }
LABEL_33:
  v37 = 0;
LABEL_35:
  *(_DWORD *)(a2 + 15056) |= v37;
}

uint64_t av1_read_tx_type(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int16x8_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int8x16_t *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  int16x8_t *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  unsigned int v57;
  unint64_t v58;
  int8x16_t *v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int32x4_t v75;
  uint64_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  BOOL v81;
  int8x16_t v82;
  int v83;
  BOOL v84;
  unsigned __int16 *v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int64_t v89;
  uint64_t v90;
  int64_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t v97;
  uint32x4_t v98;
  int64x2_t v99;
  int64_t v100;
  _WORD *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int32x4_t v116;
  uint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  BOOL v122;
  int8x16_t v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int32x4_t v135;
  uint32x4_t v136;
  int64x2_t v137;
  uint64_t v138;
  _WORD *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned __int16 v143;

  v6 = **(_QWORD **)(a2 + 7864);
  v7 = *(_QWORD *)(a2 + 7912);
  v8 = a4 + *(_DWORD *)(a2 + 7920) * a3;
  *(_BYTE *)(v7 + v8) = 0;
  if (!*(_BYTE *)(v6 + 144))
  {
    v9 = *(_WORD *)(v6 + 167);
    v10 = v9 & 7;
    if (!*(_BYTE *)(result + 18992) || (*(_DWORD *)(result + 4 * v10 + 19124) & 0x40) == 0)
    {
      if (*(_DWORD *)(a2 + 4 * v10 + 10660))
      {
        if ((v9 & 0x80) != 0)
        {
          v11 = 1;
          if (((0x61810uLL >> a5) & 1) != 0)
            return result;
        }
        else
        {
          v11 = *(char *)(v6 + 16) > 0;
          if (((0x61810uLL >> a5) & 1) != 0)
            return result;
        }
        if (((0x18608uLL >> a5) & 1) != 0)
        {
          if (v11)
          {
            v13 = ext_tx_set_index_0[6 * v11 + 1];
            v14 = txsize_sqr_map_1[a5];
            v15 = *(_QWORD *)(a2 + 10648);
            v12 = 1;
LABEL_19:
            v17 = 0;
            v16 = v12;
            v18 = v13;
            v19 = v14;
            v20 = (int16x8_t *)(v15 + 136 * v13 + 34 * v14 + 20474);
            v21 = av1_num_ext_tx_set_0[v12];
            v22 = *(_DWORD *)(a6 + 48);
            v23 = *(unsigned __int16 *)(a6 + 52);
            v24 = v23 >> 8;
            v25 = 4 * v21;
            v26 = 0xFF00000000000000;
            do
            {
              v27 = v23;
              v28 = v24 * (v20->u16[v17] >> 6);
              v25 -= 4;
              v23 = v25 + (v28 >> 1);
              ++v17;
              v26 += 0x100000000000000;
            }
            while (HIWORD(v22) < v23);
            v29 = v27 - (v28 >> 1) - v25;
            v30 = __clz(v29);
            v31 = (v30 ^ 0xFFE0) + 16;
            v32 = *(_WORD *)(a6 + 54) - v31;
            *(_WORD *)(a6 + 54) = v32;
            v33 = ((v22 - (v23 << 16) + 1) << ((v30 ^ 0xE0) + 16)) - 1;
            *(_DWORD *)(a6 + 48) = v33;
            *(_WORD *)(a6 + 52) = v29 << v31;
            v34 = v17 - 1;
            if ((v32 & 0x8000) == 0)
            {
LABEL_55:
              result = *(unsigned __int8 *)(a6 + 56);
              if (*(_BYTE *)(a6 + 56))
              {
                v85 = (unsigned __int16 *)v20 + v21;
                v86 = *v85;
                v87 = v86 >> 4;
                if (v16 > 1)
                  ++v87;
                result = v87 + 4;
                v88 = v21 - 1;
                v89 = v26 >> 56;
                if (v88 <= 1)
                  v90 = 1;
                else
                  v90 = v88;
                if (v90 < 8)
                {
                  v91 = 0;
                  goto LABEL_66;
                }
                v91 = v90 & 0x7FFFFFF8;
                v92 = vdupq_n_s64(v89);
                v93 = (int64x2_t)xmmword_208F30F00;
                v94 = (int64x2_t)xmmword_208F30F10;
                v95 = (int64x2_t)xmmword_208F08AD0;
                v96 = (int64x2_t)xmmword_208F05120;
                v97 = vnegq_s32(vdupq_n_s32(result));
                v98.i64[0] = 0x800000008000;
                v98.i64[1] = 0x800000008000;
                v99 = vdupq_n_s64(8uLL);
                v100 = v91;
                do
                {
                  *v20 = vaddq_s16(*v20, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v92, v96), (int32x4_t)vcgtq_s64(v92, v95)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v92, v94), (int32x4_t)vcgtq_s64(v92, v93))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v98, *(uint16x4_t *)v20->i8), v97), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v98, *(uint16x8_t *)v20), v97)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(
                                                                    vmovl_u16(*(uint16x4_t *)v20->i8),
                                                                    (uint32x4_t)v97),
                                                       (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v20), (uint32x4_t)v97)))));
                  ++v20;
                  v94 = vaddq_s64(v94, v99);
                  v95 = vaddq_s64(v95, v99);
                  v96 = vaddq_s64(v96, v99);
                  v93 = vaddq_s64(v93, v99);
                  v100 -= 8;
                }
                while (v100);
                if (v91 != v90)
                {
LABEL_66:
                  v101 = (_WORD *)(136 * v18 + 34 * v19 + 2 * v91 + v15 + 20474);
                  do
                  {
                    v102 = (unsigned __int16)*v101;
                    v103 = v102 - (v102 >> result);
                    v104 = v102 + ((int)(0x8000 - v102) >> result);
                    if (v91 >= v89)
                      LOWORD(v104) = v103;
                    *v101++ = v104;
                    ++v91;
                  }
                  while (v90 != v91);
                }
LABEL_98:
                v143 = *v85;
                if (v86 < 0x20)
                  ++v143;
                *v85 = v143;
                goto LABEL_101;
              }
              goto LABEL_101;
            }
            v35 = *(_QWORD *)(a6 + 32);
            v36 = *(int8x16_t **)(a6 + 40);
            if ((unint64_t)v36 >= v35)
            {
              v40 = *(unsigned __int8 **)(a6 + 40);
              goto LABEL_53;
            }
            v37 = 8 - v32;
            if (v37 >= 7)
              v38 = 7;
            else
              v38 = 8 - v32;
            v39 = ((v38 ^ 0xFu) - v32) >> 3;
            if (v39 >= ~(unint64_t)v36 + v35)
              v39 = ~(unint64_t)v36 + v35;
            if (v39 >= 0xF)
            {
              v64 = v39 + 1;
              v65 = (v39 + 1) & 0x3FFFFFF0;
              v40 = &v36->u8[v65];
              v66 = 0uLL;
              v67 = (int16x8_t)(unsigned __int16)v32;
              v68 = (int8x16_t)v33;
              v69 = vdupq_n_s32(v37);
              v70 = vaddq_s32(v69, (int32x4_t)xmmword_208F3A6C0);
              v71 = vaddq_s32(v69, (int32x4_t)xmmword_208F3A6D0);
              v72 = vaddq_s32(v69, (int32x4_t)xmmword_208F3A6A0);
              v73 = vaddq_s32(v69, (int32x4_t)xmmword_208F3A6B0);
              v74.i64[0] = 0x8000800080008;
              v74.i64[1] = 0x8000800080008;
              v75.i64[0] = 0x7F0000007FLL;
              v75.i64[1] = 0x7F0000007FLL;
              v76 = v65;
              v77 = 0uLL;
              v78 = 0uLL;
              v79 = 0uLL;
              do
              {
                v80 = *v36++;
                v78 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v71), v78);
                v77 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v72), v77);
                v68 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v73), v68);
                v79 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v70), v79);
                v67 = vaddq_s16(v67, v74);
                v66 = vaddq_s16(v66, v74);
                v73 = vaddq_s32(v73, v75);
                v72 = vaddq_s32(v72, v75);
                v71 = vaddq_s32(v71, v75);
                v70 = vaddq_s32(v70, v75);
                v76 -= 16;
              }
              while (v76);
              v81 = (unint64_t)v36 < v35;
              v82 = veorq_s8(veorq_s8(v68, v78), veorq_s8(v77, v79));
              *(int8x8_t *)v82.i8 = veor_s8(*(int8x8_t *)v82.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
              v33 = v82.i32[0] ^ v82.i32[1];
              v32 = vaddvq_s16(vaddq_s16(v67, v66));
              if (v64 == v65)
                goto LABEL_52;
              v37 -= 8 * v65;
            }
            else
            {
              v40 = *(unsigned __int8 **)(a6 + 40);
            }
            do
            {
              v83 = *v40++;
              v33 ^= v83 << v37;
              v32 += 8;
              v81 = (unint64_t)v40 < v35;
              v84 = v37 >= 8;
              v37 -= 8;
            }
            while (v84 && (unint64_t)v40 < v35);
LABEL_52:
            if (v81)
            {
LABEL_54:
              *(_DWORD *)(a6 + 48) = v33;
              *(_WORD *)(a6 + 54) = v32;
              *(_QWORD *)(a6 + 40) = v40;
              goto LABEL_55;
            }
LABEL_53:
            *(_DWORD *)(a6 + 24) = *(_DWORD *)(a6 + 24) - v32 + 0x4000;
            v32 = 0x4000;
            goto LABEL_54;
          }
        }
        else
        {
          if (*(_BYTE *)(result + 501))
          {
            if (v11)
              v12 = 1;
            else
              v12 = 2;
LABEL_18:
            v16 = v12;
            v13 = ext_tx_set_index_0[6 * v11 + v12];
            v14 = txsize_sqr_map_1[a5];
            v15 = *(_QWORD *)(a2 + 10648);
            if (v11)
              goto LABEL_19;
            v41 = ext_tx_set_index_0[6 * v11 + v12];
            if (*(_BYTE *)(v6 + 91))
              v42 = (unsigned __int8 *)&fimode_to_intradir_0 + *(unsigned __int8 *)(v6 + 90);
            else
              v42 = (unsigned __int8 *)(v6 + 2);
            v43 = 0;
            v44 = *v42;
            v45 = (int16x8_t *)(v15 + 1768 * v13 + 442 * txsize_sqr_map_1[a5] + 34 * v44 + 15170);
            result = av1_num_ext_tx_set_0[v12];
            v46 = *(_DWORD *)(a6 + 48);
            v47 = *(unsigned __int16 *)(a6 + 52);
            v48 = v47 >> 8;
            v49 = 4 * result;
            v50 = 0xFF00000000000000;
            do
            {
              v51 = v47;
              v52 = v48 * (v45->u16[v43] >> 6);
              v49 -= 4;
              v47 = v49 + (v52 >> 1);
              ++v43;
              v50 += 0x100000000000000;
            }
            while (HIWORD(v46) < v47);
            v53 = v51 - (v52 >> 1) - v49;
            v54 = __clz(v53);
            v55 = (v54 ^ 0xFFE0) + 16;
            v56 = *(_WORD *)(a6 + 54) - v55;
            *(_WORD *)(a6 + 54) = v56;
            v57 = ((v46 - (v47 << 16) + 1) << ((v54 ^ 0xE0) + 16)) - 1;
            *(_DWORD *)(a6 + 48) = v57;
            *(_WORD *)(a6 + 52) = v53 << v55;
            v34 = v43 - 1;
            if ((v56 & 0x8000) == 0)
            {
LABEL_82:
              if (*(_BYTE *)(a6 + 56))
              {
                v85 = (unsigned __int16 *)v45 + result;
                v86 = *v85;
                if (v12 <= 1u)
                  v125 = v86 >> 4;
                else
                  v125 = (v86 >> 4) + 1;
                v126 = v125 + 4;
                v127 = result - 1;
                result = v50 >> 56;
                if (v127 <= 1)
                  v128 = 1;
                else
                  v128 = v127;
                if (v128 >= 8)
                {
                  v129 = v128 & 0x7FFFFFF8;
                  v130 = vdupq_n_s64(result);
                  v131 = (int64x2_t)xmmword_208F30F00;
                  v132 = (int64x2_t)xmmword_208F30F10;
                  v133 = (int64x2_t)xmmword_208F08AD0;
                  v134 = (int64x2_t)xmmword_208F05120;
                  v135 = vnegq_s32(vdupq_n_s32(v126));
                  v136.i64[0] = 0x800000008000;
                  v136.i64[1] = 0x800000008000;
                  v137 = vdupq_n_s64(8uLL);
                  v138 = v129;
                  do
                  {
                    *v45 = vaddq_s16(*v45, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v130, v134), (int32x4_t)vcgtq_s64(v130, v133)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v130, v132), (int32x4_t)vcgtq_s64(v130, v131))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v136, *(uint16x4_t *)v45->i8), v135), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v136, *(uint16x8_t *)v45), v135)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(
                                                                      vmovl_u16(*(uint16x4_t *)v45->i8),
                                                                      (uint32x4_t)v135),
                                                         (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v45), (uint32x4_t)v135)))));
                    ++v45;
                    v132 = vaddq_s64(v132, v137);
                    v133 = vaddq_s64(v133, v137);
                    v134 = vaddq_s64(v134, v137);
                    v131 = vaddq_s64(v131, v137);
                    v138 -= 8;
                  }
                  while (v138);
                  if (v129 == v128)
                    goto LABEL_98;
                }
                else
                {
                  v129 = 0;
                }
                v139 = (_WORD *)(1768 * v41 + 442 * v14 + 34 * v44 + 2 * v129 + v15 + 15170);
                do
                {
                  v140 = (unsigned __int16)*v139;
                  v141 = v140 - (v140 >> v126);
                  v142 = v140 + ((int)(0x8000 - v140) >> v126);
                  if (v129 >= result)
                    LOWORD(v142) = v141;
                  *v139++ = v142;
                  ++v129;
                }
                while (v128 != v129);
                goto LABEL_98;
              }
LABEL_101:
              *(_BYTE *)(v7 + v8) = av1_ext_tx_inv[16 * v16 + v34];
              return result;
            }
            v58 = *(_QWORD *)(a6 + 32);
            v59 = *(int8x16_t **)(a6 + 40);
            if ((unint64_t)v59 >= v58)
            {
              v63 = *(unsigned __int8 **)(a6 + 40);
              goto LABEL_80;
            }
            v60 = 8 - v56;
            if (v60 >= 7)
              v61 = 7;
            else
              v61 = 8 - v56;
            v62 = ((v61 ^ 0xFu) - v56) >> 3;
            if (v62 >= ~(unint64_t)v59 + v58)
              v62 = ~(unint64_t)v59 + v58;
            if (v62 >= 0xF)
            {
              v105 = v62 + 1;
              v106 = (v62 + 1) & 0x3FFFFFF0;
              v63 = &v59->u8[v106];
              v107 = 0uLL;
              v108 = (int16x8_t)(unsigned __int16)v56;
              v109 = (int8x16_t)v57;
              v110 = vdupq_n_s32(v60);
              v111 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6C0);
              v112 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6D0);
              v113 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6A0);
              v114 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6B0);
              v115.i64[0] = 0x8000800080008;
              v115.i64[1] = 0x8000800080008;
              v116.i64[0] = 0x7F0000007FLL;
              v116.i64[1] = 0x7F0000007FLL;
              v117 = v106;
              v118 = 0uLL;
              v119 = 0uLL;
              v120 = 0uLL;
              do
              {
                v121 = *v59++;
                v119 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v121, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v112), v119);
                v118 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v121, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v113), v118);
                v109 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v121, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v114), v109);
                v120 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v121, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v111), v120);
                v108 = vaddq_s16(v108, v115);
                v107 = vaddq_s16(v107, v115);
                v114 = vaddq_s32(v114, v116);
                v113 = vaddq_s32(v113, v116);
                v112 = vaddq_s32(v112, v116);
                v111 = vaddq_s32(v111, v116);
                v117 -= 16;
              }
              while (v117);
              v122 = (unint64_t)v59 < v58;
              v123 = veorq_s8(veorq_s8(v109, v119), veorq_s8(v118, v120));
              *(int8x8_t *)v123.i8 = veor_s8(*(int8x8_t *)v123.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
              v57 = v123.i32[0] ^ v123.i32[1];
              v56 = vaddvq_s16(vaddq_s16(v108, v107));
              if (v105 == v106)
                goto LABEL_79;
              v60 -= 8 * v106;
            }
            else
            {
              v63 = *(unsigned __int8 **)(a6 + 40);
            }
            do
            {
              v124 = *v63++;
              v57 ^= v124 << v60;
              v56 += 8;
              v122 = (unint64_t)v63 < v58;
              v84 = v60 >= 8;
              v60 -= 8;
            }
            while (v84 && (unint64_t)v63 < v58);
LABEL_79:
            if (v122)
            {
LABEL_81:
              *(_DWORD *)(a6 + 48) = v57;
              *(_WORD *)(a6 + 54) = v56;
              *(_QWORD *)(a6 + 40) = v63;
              goto LABEL_82;
            }
LABEL_80:
            *(_DWORD *)(a6 + 24) = *(_DWORD *)(a6 + 24) - v56 + 0x4000;
            v56 = 0x4000;
            goto LABEL_81;
          }
          v12 = av1_ext_tx_set_lookup_1[2 * v11 + ((0x60604uLL >> a5) & 1)];
          if (v12)
            goto LABEL_18;
        }
      }
    }
  }
  return result;
}

uint64_t av1_read_mode_info(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  int v10;
  int v11;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int segment_id;
  char *v30;
  int v31;
  size_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  int8x16_t *v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  uint64_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  int16x8_t v68;
  int32x4_t v69;
  uint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  BOOL v75;
  int8x16_t v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int16 v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  size_t v94;
  int16x8_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int intra_mode;
  unsigned __int8 angle_delta;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned __int16 *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  __int16 v114;
  unsigned int v115;
  char v116;
  int v117;
  unint64_t v118;
  int8x16_t *v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  unsigned int v141;
  unsigned __int8 v142;
  unint64_t v143;
  int8x16_t *v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  uint64_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int8x16_t v153;
  int32x4_t v154;
  uint32x4_t v155;
  uint32x4_t v156;
  uint32x4_t v157;
  uint32x4_t v158;
  int16x8_t v159;
  int32x4_t v160;
  uint64_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  BOOL v166;
  int8x16_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  __int16 v177;
  unsigned __int8 v178;
  uint64_t v179;
  uint64_t v180;
  _BOOL4 v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  _BYTE *v194;
  int v195;
  unint64_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int8x16_t v199;
  int32x4_t v200;
  uint32x4_t v201;
  uint32x4_t v202;
  uint32x4_t v203;
  uint32x4_t v204;
  int16x8_t v205;
  int32x4_t v206;
  uint64_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  BOOL v212;
  int8x16_t v213;
  int v214;
  unsigned int v215;
  char v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned __int16 v220;
  unsigned __int16 v221;
  int v222;
  uint64_t v223;
  unsigned int v224;
  int v225;
  int v226;
  int v227;
  signed int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  unint64_t v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  int v251;
  int v252;
  int v254;
  int v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int16 *v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned __int16 v266[5];
  char v267[58];
  uint64_t v268;

  v10 = a5;
  v11 = a4;
  v14 = a1;
  v268 = *MEMORY[0x24BDAC8D0];
  v15 = (unsigned __int8 *)(a1 + 34192);
  v16 = a1 + 15200;
  v17 = **(_QWORD **)(a2 + 7864);
  *(_WORD *)(v17 + 167) &= ~0x80u;
  if ((*(_BYTE *)(a1 + 15200) & 0xFD) != 0)
  {
    result = read_inter_frame_mode_info(a1, a2, a3, a6, a7, a8, a9, a10);
    if (*(_DWORD *)(*((_QWORD *)v15 + 711) + 52))
      return av1_copy_frame_mvs(v16, v17, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), v11, v10);
    return result;
  }
  v19 = **(unsigned __int8 ***)(a2 + 7864);
  v259 = *(_QWORD *)(a2 + 7880);
  v260 = *(_QWORD *)(a2 + 7888);
  v20 = *v19;
  v21 = *(unsigned __int16 **)(a2 + 10648);
  v261 = v21;
  v262 = v20;
  if (*(_BYTE *)(a1 + 34360))
  {
    if (*v15)
    {
      v256 = **(unsigned __int8 ***)(a2 + 7864);
      v248 = (unsigned __int8 *)(a1 + 34192);
      v22 = *(_DWORD *)a2;
      v23 = *(_DWORD *)(a2 + 4);
      v24 = *(int *)(a1 + 15736);
      v25 = mi_size_wide_8[v20];
      v26 = *(_DWORD *)(a1 + 15732) - *(_DWORD *)a2;
      if (v26 >= mi_size_high_7[v20])
        v27 = mi_size_high_7[v20];
      else
        v27 = v26;
      v28 = a1 + 15200;
      segment_id = read_segment_id(a1 + 15200, (int *)a2, a3, 0);
      if ((int)v27 < 1)
      {
        v11 = a4;
        v10 = a5;
      }
      else
      {
        v30 = (char *)(*(_QWORD *)(*(_QWORD *)(v14 + 15432) + 80) + v23 + (int)v24 * v22);
        v31 = v24 - v23;
        if ((int)v24 - v23 >= v25)
          v31 = v25;
        v32 = v31;
        do
        {
          memset(v30, segment_id, v32);
          v30 += v24;
          --v27;
        }
        while (v27);
        v11 = a4;
        v10 = a5;
      }
      v15 = v248;
      v19 = v256;
    }
    else
    {
      v28 = a1 + 15200;
      LOBYTE(segment_id) = 0;
    }
    *(_WORD *)(v19 + 167) = *(_WORD *)(v19 + 167) & 0xFFF8 | segment_id & 7;
    v16 = v28;
    v21 = v261;
    v20 = v262;
  }
  v33 = *v15;
  if (*v15 && (*(_DWORD *)(v14 + 4 * (*(_WORD *)(v19 + 167) & 7) + 34324) & 0x40) != 0)
  {
    v40 = 1;
    v19[144] = 1;
    if (!v15[168])
      goto LABEL_59;
    goto LABEL_72;
  }
  v34 = *(_QWORD *)(a2 + 7880);
  v35 = *(_QWORD *)(a2 + 7888);
  if (v35)
    LODWORD(v35) = *(unsigned __int8 *)(v35 + 144);
  if (v34)
    LODWORD(v34) = *(unsigned __int8 *)(v34 + 144);
  v36 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * (v34 + v35) + 11870);
  v37 = *(_DWORD *)(a3 + 48);
  v38 = *(unsigned __int16 *)(a3 + 52);
  v39 = v38 >> 8;
  v40 = -1;
  v41 = 8;
  v42 = 0xFF00000000000000;
  v43 = v36;
  do
  {
    v44 = v38;
    ++v40;
    v45 = *v43++;
    v46 = v39 * (v45 >> 6);
    v41 -= 4;
    v38 = v41 + (v46 >> 1);
    v42 += 0x100000000000000;
  }
  while (HIWORD(v37) < v38);
  v47 = v44 - (v46 >> 1) - v41;
  v48 = (__clz(v47) ^ 0xFFFFFFE0) + 16;
  v49 = *(_WORD *)(a3 + 54) - v48;
  *(_WORD *)(a3 + 54) = v49;
  v50 = ((v37 - (v38 << 16) + 1) << v48) - 1;
  *(_DWORD *)(a3 + 48) = v50;
  *(_WORD *)(a3 + 52) = v47 << v48;
  if (v49 < 0)
  {
    v51 = v49;
    v52 = *(_QWORD *)(a3 + 32);
    v53 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v53 >= v52)
    {
      v57 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_47;
    }
    v54 = 8 - v51;
    if ((8 - v51) >= 7)
      v55 = 7;
    else
      v55 = 8 - v51;
    v56 = ((v55 ^ 0xFu) - v51) >> 3;
    if (v56 >= ~(unint64_t)v53 + v52)
      v56 = ~(unint64_t)v53 + v52;
    if (v56 >= 0xF)
    {
      v58 = v56 + 1;
      v59 = (v56 + 1) & 0x3FFFFFF0;
      v57 = &v53->u8[v59];
      v60 = 0uLL;
      v61 = (int16x8_t)(unsigned __int16)v51;
      v62 = (int8x16_t)v50;
      v63 = vdupq_n_s32(v54);
      v64 = (uint32x4_t)vaddq_s32(v63, (int32x4_t)xmmword_208F3A6C0);
      v65 = (uint32x4_t)vaddq_s32(v63, (int32x4_t)xmmword_208F3A6D0);
      v66 = (uint32x4_t)vaddq_s32(v63, (int32x4_t)xmmword_208F3A6A0);
      v67 = (uint32x4_t)vaddq_s32(v63, (int32x4_t)xmmword_208F3A6B0);
      v68.i64[0] = 0x8000800080008;
      v68.i64[1] = 0x8000800080008;
      v69.i64[0] = 0x7F0000007FLL;
      v69.i64[1] = 0x7F0000007FLL;
      v70 = v59;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      do
      {
        v74 = *v53++;
        v72 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_208F04F30), v65), v72);
        v71 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_208F04F40), v66), v71);
        v62 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_208F04F50), v67), v62);
        v73 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_208F04F20), v64), v73);
        v61 = vaddq_s16(v61, v68);
        v60 = vaddq_s16(v60, v68);
        v67 = (uint32x4_t)vaddq_s32((int32x4_t)v67, v69);
        v66 = (uint32x4_t)vaddq_s32((int32x4_t)v66, v69);
        v65 = (uint32x4_t)vaddq_s32((int32x4_t)v65, v69);
        v64 = (uint32x4_t)vaddq_s32((int32x4_t)v64, v69);
        v70 -= 16;
      }
      while (v70);
      v75 = (unint64_t)v53 < v52;
      v76 = veorq_s8(veorq_s8(v62, v72), veorq_s8(v71, v73));
      *(int8x8_t *)v76.i8 = veor_s8(*(int8x8_t *)v76.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL));
      v50 = v76.i32[0] ^ v76.i32[1];
      LOWORD(v51) = vaddvq_s16(vaddq_s16(v61, v60));
      if (v58 == v59)
        goto LABEL_46;
      v54 -= 8 * v59;
    }
    else
    {
      v57 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v77 = *v57++;
      v50 ^= v77 << v54;
      LOWORD(v51) = v51 + 8;
      v75 = (unint64_t)v57 < v52;
      v78 = v54 >= 8;
      v54 -= 8;
    }
    while (v78 && (unint64_t)v57 < v52);
LABEL_46:
    if (v75)
    {
LABEL_48:
      *(_DWORD *)(a3 + 48) = v50;
      *(_WORD *)(a3 + 54) = v51;
      *(_QWORD *)(a3 + 40) = v57;
      goto LABEL_49;
    }
LABEL_47:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v51 + 0x4000;
    LOWORD(v51) = 0x4000;
    goto LABEL_48;
  }
LABEL_49:
  if (*(_BYTE *)(a3 + 56))
  {
    v79 = v36[2];
    v80 = (v79 >> 4) + 4;
    v81 = *v36;
    if (v42 < 1)
      v82 = v81 - (v81 >> v80);
    else
      v82 = v81 + ((int)(0x8000 - v81) >> v80);
    *v36 = v82;
    if (v79 >= 0x20)
      v83 = v79;
    else
      v83 = v79 + 1;
    v36[2] = v83;
  }
  v19[144] = v40;
  if (!v15[168])
  {
    if (!v33)
    {
      v91 = v14;
      v247 = v16;
      LOBYTE(v16) = 0;
LABEL_71:
      *(_WORD *)(v19 + 167) = *(_WORD *)(v19 + 167) & 0xFFF8 | v16 & 7;
      v16 = v247;
      v14 = v91;
      v21 = v261;
      LODWORD(v20) = v262;
      goto LABEL_72;
    }
LABEL_59:
    v257 = v19;
    v251 = v11;
    v254 = v10;
    v247 = v16;
    v249 = v15;
    v84 = v40;
    v86 = *(_DWORD *)a2;
    v85 = *(_DWORD *)(a2 + 4);
    v87 = *(int *)(v14 + 15736);
    v88 = mi_size_wide_8[v20];
    v89 = *(_DWORD *)(v14 + 15732) - *(_DWORD *)a2;
    if (v89 >= mi_size_high_7[v20])
      v90 = mi_size_high_7[v20];
    else
      v90 = v89;
    LODWORD(v16) = read_segment_id(v16, (int *)a2, a3, v84);
    if ((int)v90 < 1)
    {
      v91 = v14;
    }
    else
    {
      v91 = v14;
      v92 = (char *)(*(_QWORD *)(*(_QWORD *)(v14 + 15432) + 80) + v85 + (int)v87 * v86);
      v93 = v87 - v85;
      if ((int)v87 - v85 >= v88)
        v93 = v88;
      v94 = v93;
      do
      {
        memset(v92, v16, v94);
        v92 += v87;
        --v90;
      }
      while (v90);
    }
    v11 = v251;
    v10 = v254;
    v15 = v249;
    v19 = v257;
    goto LABEL_71;
  }
LABEL_72:
  read_cdef(v16, a3, (int *)a2);
  read_delta_q_params(v16, a2, a3);
  *((_DWORD *)v19 + 1) = *(_DWORD *)(a2 + 10724);
  *((_WORD *)v19 + 8) = -256;
  *((_WORD *)v19 + 71) = 0;
  v19[91] = 0;
  v96 = *(_DWORD *)a2;
  *(_QWORD *)(a2 + 8128) = *(_QWORD *)(*((_QWORD *)v15 + 793) + 8 * *(int *)(a2 + 7856)) + *(int *)(a2 + 4);
  *(_QWORD *)(a2 + 8136) = a2 + 8144 + (v96 & 0x1F);
  if ((*(_BYTE *)v16 & 0xFD) != 0 || !*(_BYTE *)(v16 + 495) || !*(_BYTE *)(v16 + 496))
    goto LABEL_73;
  v258 = v19;
  v102 = v16;
  v103 = 0;
  v104 = **(unsigned __int8 ***)(a2 + 7864);
  v105 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12484);
  v106 = *(_DWORD *)(a3 + 48);
  v107 = *(unsigned __int16 *)(a3 + 52);
  v108 = v107 >> 8;
  v109 = 8;
  v110 = 0xFF00000000000000;
  do
  {
    v111 = v107;
    result = v108 * (v105[v103] >> 6);
    v109 -= 4;
    v107 = v109 + (result >> 1);
    ++v103;
    v110 += 0x100000000000000;
  }
  while (HIWORD(v106) < v107);
  v112 = v111 - (result >> 1) - v109;
  v113 = (__clz(v112) ^ 0xFFFFFFE0) + 16;
  v114 = *(_WORD *)(a3 + 54) - v113;
  *(_WORD *)(a3 + 54) = v114;
  v115 = ((v106 - (v107 << 16) + 1) << v113) - 1;
  *(_DWORD *)(a3 + 48) = v115;
  *(_WORD *)(a3 + 52) = v112 << v113;
  v116 = v103 - 1;
  if (v114 < 0)
  {
    v117 = v114;
    v118 = *(_QWORD *)(a3 + 32);
    v119 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v119 >= v118)
    {
      v123 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_179;
    }
    v120 = 8 - v117;
    if ((8 - v117) >= 7)
      v121 = 7;
    else
      v121 = 8 - v117;
    v122 = ((v121 ^ 0xFu) - v117) >> 3;
    if (v122 >= ~(unint64_t)v119 + v118)
      v122 = ~(unint64_t)v119 + v118;
    if (v122 >= 0xF)
    {
      v196 = v122 + 1;
      result = (v122 + 1) & 0x3FFFFFF0;
      v123 = &v119->u8[result];
      v197 = 0uLL;
      v198 = (int16x8_t)(unsigned __int16)v117;
      v199 = (int8x16_t)v115;
      v200 = vdupq_n_s32(v120);
      v201 = (uint32x4_t)vaddq_s32(v200, (int32x4_t)xmmword_208F3A6C0);
      v202 = (uint32x4_t)vaddq_s32(v200, (int32x4_t)xmmword_208F3A6D0);
      v203 = (uint32x4_t)vaddq_s32(v200, (int32x4_t)xmmword_208F3A6A0);
      v204 = (uint32x4_t)vaddq_s32(v200, (int32x4_t)xmmword_208F3A6B0);
      v205.i64[0] = 0x8000800080008;
      v205.i64[1] = 0x8000800080008;
      v206.i64[0] = 0x7F0000007FLL;
      v206.i64[1] = 0x7F0000007FLL;
      v207 = result;
      v208 = 0uLL;
      v209 = 0uLL;
      v210 = 0uLL;
      do
      {
        v211 = *v119++;
        v209 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v211, (int8x16_t)xmmword_208F04F30), v202), v209);
        v208 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v211, (int8x16_t)xmmword_208F04F40), v203), v208);
        v199 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v211, (int8x16_t)xmmword_208F04F50), v204), v199);
        v210 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v211, (int8x16_t)xmmword_208F04F20), v201), v210);
        v198 = vaddq_s16(v198, v205);
        v197 = vaddq_s16(v197, v205);
        v204 = (uint32x4_t)vaddq_s32((int32x4_t)v204, v206);
        v203 = (uint32x4_t)vaddq_s32((int32x4_t)v203, v206);
        v202 = (uint32x4_t)vaddq_s32((int32x4_t)v202, v206);
        v201 = (uint32x4_t)vaddq_s32((int32x4_t)v201, v206);
        v207 -= 16;
      }
      while (v207);
      v212 = (unint64_t)v119 < v118;
      v213 = veorq_s8(veorq_s8(v199, v209), veorq_s8(v208, v210));
      *(int8x8_t *)v213.i8 = veor_s8(*(int8x8_t *)v213.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v213, v213, 8uLL));
      v115 = v213.i32[0] ^ v213.i32[1];
      v95 = vaddq_s16(v198, v197);
      v95.i16[0] = vaddvq_s16(v95);
      LOWORD(v117) = v95.i16[0];
      if (v196 == result)
        goto LABEL_178;
      v120 -= 8 * result;
    }
    else
    {
      v123 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v214 = *v123++;
      v115 ^= v214 << v120;
      LOWORD(v117) = v117 + 8;
      v212 = (unint64_t)v123 < v118;
      v78 = v120 >= 8;
      v120 -= 8;
    }
    while (v78 && (unint64_t)v123 < v118);
LABEL_178:
    if (v212)
    {
LABEL_180:
      *(_DWORD *)(a3 + 48) = v115;
      *(_WORD *)(a3 + 54) = v117;
      *(_QWORD *)(a3 + 40) = v123;
      goto LABEL_181;
    }
LABEL_179:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v117 + 0x4000;
    LOWORD(v117) = 0x4000;
    goto LABEL_180;
  }
LABEL_181:
  if (*(_BYTE *)(a3 + 56))
  {
    v215 = v105[2];
    v216 = (v215 >> 4) + 4;
    v217 = *v105;
    v218 = v217 - (v217 >> v216);
    v219 = v217 + ((int)(0x8000 - v217) >> v216);
    if (v110 >= 1)
      v220 = v219;
    else
      v220 = v218;
    *v105 = v220;
    if (v215 >= 0x20)
      v221 = v215;
    else
      v221 = v215 + 1;
    v105[2] = v221;
  }
  *(_WORD *)(v104 + 167) = *(_WORD *)(v104 + 167) & 0xFF7F | ((v116 & 1) << 7);
  if ((v116 & 1) == 0)
  {
    v16 = v102;
    v19 = v258;
    if ((*(_WORD *)(v258 + 167) & 0x80) != 0)
      goto LABEL_148;
LABEL_73:
    v97 = v260;
    if (v260)
      v97 = *(unsigned __int8 *)(v260 + 2);
    v98 = v259;
    if (v259)
      v98 = *(unsigned __int8 *)(v259 + 2);
    intra_mode = read_intra_mode(a3, &v21[70 * intra_mode_context_0[v97] + 7093 + 14 * intra_mode_context_0[v98]]);
    angle_delta = 0;
    v19[2] = intra_mode;
    if (v20 >= 3 && (intra_mode - 9) >= 0xFFFFFFF8)
      angle_delta = read_angle_delta(a3, &v21[8 * intra_mode + 7435]);
    v19[88] = angle_delta;
    v101 = *((_QWORD *)v15 + 711);
    if (*(_BYTE *)(v101 + 77) || !*(_BYTE *)(a2 + 12))
    {
      v19[3] = 0;
      if (*(_BYTE *)(v101 + 77))
      {
LABEL_143:
        v181 = 0;
        goto LABEL_144;
      }
LABEL_140:
      if (*(_BYTE *)(a2 + 12))
      {
        v180 = **(_QWORD **)(a2 + 7864);
        if ((*(_WORD *)(v180 + 167) & 0x80) != 0 || *(char *)(v180 + 16) > 0)
          goto LABEL_143;
        v181 = *(unsigned __int8 *)(v180 + 3) == 13;
      }
      else
      {
        v181 = 1;
      }
LABEL_144:
      *(_DWORD *)(a2 + 15024) = v181;
      if (*(_BYTE *)(v16 + 495) && (v20 > 0xF || ((1 << v20) & 0xE007) == 0))
        read_palette_mode_info(v16, a2, a3);
      result = read_filter_intra_mode_info(v16, a2, a3);
      goto LABEL_148;
    }
    v124 = **(unsigned __int8 ***)(a2 + 7864);
    v125 = *v124;
    if (*(_DWORD *)(a2 + 4 * (*(_WORD *)(v124 + 167) & 7) + 10692))
      LOBYTE(v126) = av1_ss_size_lookup[4 * v125 + 2 * *(int *)(a2 + 2628) + *(int *)(a2 + 2632)] == 0;
    else
      v126 = 0xF03FFuLL >> v125;
    v127 = 0;
    v128 = (uint64_t)&v21[195 * (v126 & 1) + 6419 + 15 * v19[2]];
    if ((v126 & 1) != 0)
      v129 = 14;
    else
      v129 = 13;
    v130 = *(_DWORD *)(a3 + 48);
    v131 = *(unsigned __int16 *)(a3 + 52);
    v132 = v131 >> 8;
    v133 = 4 * v129;
    v134 = 0xFF00000000000000;
    do
    {
      v135 = v131;
      v136 = v132 * (*(unsigned __int16 *)(v128 + 2 * v127) >> 6);
      v133 -= 4;
      v131 = v133 + (v136 >> 1);
      ++v127;
      v134 += 0x100000000000000;
    }
    while (HIWORD(v130) < v131);
    v137 = v135 - (v136 >> 1) - v133;
    v138 = __clz(v137);
    v139 = (v138 ^ 0xFFE0) + 16;
    v140 = *(_WORD *)(a3 + 54) - v139;
    *(_WORD *)(a3 + 54) = v140;
    v141 = ((v130 - (v131 << 16) + 1) << ((v138 ^ 0xE0) + 16)) - 1;
    *(_DWORD *)(a3 + 48) = v141;
    *(_WORD *)(a3 + 52) = v137 << v139;
    v142 = v127 - 1;
    if ((v140 & 0x8000) == 0)
    {
LABEL_126:
      if (*(_BYTE *)(a3 + 56))
      {
        v169 = 0;
        v170 = *(unsigned __int16 *)(v128 + 2 * v129);
        v171 = (v170 >> 4) + 5;
        v172 = v134 >> 56;
        do
        {
          v173 = *(unsigned __int16 *)(v128 + 2 * v169);
          v174 = v173 - (v173 >> v171);
          v175 = v173 + ((int)(0x8000 - v173) >> v171);
          if (v169 >= v172)
            LOWORD(v175) = v174;
          *(_WORD *)(v128 + 2 * v169++) = v175;
        }
        while ((_DWORD)v129 - 1 != v169);
        v176 = 2 * v129;
        v177 = *(_WORD *)(v128 + v176);
        if (v170 < 0x20)
          ++v177;
        *(_WORD *)(v128 + v176) = v177;
      }
      v19[3] = v142;
      if (v142 == 13)
      {
        v19[93] = read_cfl_alphas(v21, a3, v19 + 92);
        v142 = v19[3];
      }
      v178 = 0;
      if (v20 >= 3)
      {
        v179 = get_uv_mode_uv2y_1[v142];
        if ((v179 - 9) >= 0xFFFFFFF8)
          v178 = read_angle_delta(a3, &v21[8 * v179 + 7435]);
      }
      v19[89] = v178;
      if (*(_BYTE *)(*((_QWORD *)v15 + 711) + 77))
        goto LABEL_143;
      goto LABEL_140;
    }
    v143 = *(_QWORD *)(a3 + 32);
    v144 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v144 >= v143)
    {
      v148 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_124;
    }
    v145 = 8 - v140;
    if (v145 >= 7)
      v146 = 7;
    else
      v146 = 8 - v140;
    v147 = ((v146 ^ 0xFu) - v140) >> 3;
    if (v147 >= ~(unint64_t)v144 + v143)
      v147 = ~(unint64_t)v144 + v143;
    if (v147 >= 0xF)
    {
      v149 = v147 + 1;
      v150 = (v147 + 1) & 0x3FFFFFF0;
      v148 = &v144->u8[v150];
      v151 = 0uLL;
      v152 = (int16x8_t)(unsigned __int16)v140;
      v153 = (int8x16_t)v141;
      v154 = vdupq_n_s32(v145);
      v155 = (uint32x4_t)vaddq_s32(v154, (int32x4_t)xmmword_208F3A6C0);
      v156 = (uint32x4_t)vaddq_s32(v154, (int32x4_t)xmmword_208F3A6D0);
      v157 = (uint32x4_t)vaddq_s32(v154, (int32x4_t)xmmword_208F3A6A0);
      v158 = (uint32x4_t)vaddq_s32(v154, (int32x4_t)xmmword_208F3A6B0);
      v159.i64[0] = 0x8000800080008;
      v159.i64[1] = 0x8000800080008;
      v160.i64[0] = 0x7F0000007FLL;
      v160.i64[1] = 0x7F0000007FLL;
      v161 = v150;
      v162 = 0uLL;
      v163 = 0uLL;
      v164 = 0uLL;
      do
      {
        v165 = *v144++;
        v163 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_208F04F30), v156), v163);
        v162 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_208F04F40), v157), v162);
        v153 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_208F04F50), v158), v153);
        v164 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_208F04F20), v155), v164);
        v152 = vaddq_s16(v152, v159);
        v151 = vaddq_s16(v151, v159);
        v158 = (uint32x4_t)vaddq_s32((int32x4_t)v158, v160);
        v157 = (uint32x4_t)vaddq_s32((int32x4_t)v157, v160);
        v156 = (uint32x4_t)vaddq_s32((int32x4_t)v156, v160);
        v155 = (uint32x4_t)vaddq_s32((int32x4_t)v155, v160);
        v161 -= 16;
      }
      while (v161);
      v166 = (unint64_t)v144 < v143;
      v167 = veorq_s8(veorq_s8(v153, v163), veorq_s8(v162, v164));
      *(int8x8_t *)v167.i8 = veor_s8(*(int8x8_t *)v167.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL));
      v141 = v167.i32[0] ^ v167.i32[1];
      v140 = vaddvq_s16(vaddq_s16(v152, v151));
      if (v149 == v150)
        goto LABEL_123;
      v145 -= 8 * v150;
    }
    else
    {
      v148 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v168 = *v148++;
      v141 ^= v168 << v145;
      v140 += 8;
      v166 = (unint64_t)v148 < v143;
      v78 = v145 >= 8;
      v145 -= 8;
    }
    while (v78 && (unint64_t)v148 < v143);
LABEL_123:
    if (v166)
    {
LABEL_125:
      *(_DWORD *)(a3 + 48) = v141;
      *(_WORD *)(a3 + 54) = v140;
      *(_QWORD *)(a3 + 40) = v148;
      goto LABEL_126;
    }
LABEL_124:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v140 + 0x4000;
    v140 = 0x4000;
    goto LABEL_125;
  }
  v222 = v11;
  v223 = *v104;
  *((_WORD *)v104 + 1) = 0;
  *((_DWORD *)v104 + 5) = 196611;
  v104[24] = 0;
  av1_find_mv_refs(v102, (_DWORD *)a2, v104, 0, a2 + 15142, a2 + 8312, a2 + 10168, (uint64_t)v266, v95, 0, (uint64_t)v267);
  v264 = 0;
  v265 = 0;
  av1_find_best_ref_mvs(0, v266, &v265, &v264, 0);
  v224 = v265;
  if (!v265)
    v224 = v264;
  if (!v224)
  {
    v225 = *(_DWORD *)(*((_QWORD *)v15 + 711) + 32);
    v226 = *(_DWORD *)a2 - v225;
    v227 = (-32 * v225) & 0xFFE0;
    v224 = -134217728 - (v225 << 21);
    if (v226 >= *(_DWORD *)(a2 + 7840))
      v224 = v227;
  }
  v263 = v224 & 0xFFF8FFF8;
  if (((HIWORD(v224) | v224) & 7) != 0)
    goto LABEL_198;
  v252 = *(_DWORD *)(a2 + 4);
  v255 = *(_DWORD *)a2;
  read_mv(a3, (_WORD *)v104 + 4, &v263, (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12198), -1);
  v228 = *((__int16 *)v104 + 5) & 0xFFFFFFF8;
  *((_WORD *)v104 + 5) &= 0xFFF8u;
  v229 = *((_WORD *)v104 + 4) & 0xFFF8;
  *((_WORD *)v104 + 4) = v229;
  if ((v229 - 0x4000) <= 0x8000)
    goto LABEL_198;
  if (v228 < -16383)
    goto LABEL_198;
  if (v228 >= 0x4000)
    goto LABEL_198;
  v230 = *((_DWORD *)v104 + 2);
  if ((v230 & 7) != 0)
    goto LABEL_198;
  if ((v230 & 0x70000) != 0)
    goto LABEL_198;
  v231 = (__int16)v230 + 32 * v255;
  v232 = 32 * *(_DWORD *)(a2 + 7840);
  if (v231 < v232)
    goto LABEL_198;
  v233 = (v230 >> 16) + 32 * v252;
  v234 = *(_DWORD *)(a2 + 7848);
  if (v233 < 32 * v234)
    goto LABEL_198;
  v235 = v231 + 8 * block_size_high_8[v223];
  if (v235 > 32 * *(_DWORD *)(a2 + 7844))
    goto LABEL_198;
  v236 = v233 + 8 * block_size_wide_9[v223];
  v237 = *(_DWORD *)(a2 + 7852);
  if (v236 > 32 * v237)
    goto LABEL_198;
  v238 = *((_QWORD *)v15 + 711);
  v239 = *(_DWORD *)(v238 + 36);
  result = *(unsigned __int8 *)(a2 + 12);
  if (*(_BYTE *)(a2 + 12))
  {
    if (!*(_BYTE *)(v238 + 77)
      && (((0x10003uLL >> v223) & 1) != 0 && *(_DWORD *)(a2 + 2628) && v233 < 32 * v234 + 32
       || ((0x20005uLL >> v223) & 1) != 0 && *(_DWORD *)(a2 + 2632) && v231 < v232 + 32))
    {
      goto LABEL_198;
    }
  }
  if ((v240 = v255 >> v239, v241 = 4 << v239, v242 = ((v235 >> 3) - 1) / (4 << v239), v240 < v242)
    || (v243 = ((v236 >> 3) - 1) >> 6,
        v244 = ((v237 + ~v234) >> 4) + 1,
        v245 = (v252 >> 4) - 4,
        v243 + v242 * v244 >= v245 + v244 * v240)
    || (v241 <= 64 ? (v246 = 5) : (v246 = 6), v243 >= v245 + (v240 - v242) * v246))
  {
LABEL_198:
    result = aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Invalid intrabc dv");
  }
  v11 = v222;
  v21 = v261;
  LODWORD(v20) = v262;
  v16 = v102;
  v19 = v258;
  if ((*(_WORD *)(v258 + 167) & 0x80) == 0)
    goto LABEL_73;
LABEL_148:
  if (*(_DWORD *)(*((_QWORD *)v15 + 711) + 52) && v10 >= 1 && v11 >= 1)
  {
    v182 = 0;
    v183 = *(_QWORD *)(*(_QWORD *)(v14 + 15432) + 72);
    v184 = (v11 + 1) >> 1;
    v185 = (uint64_t)(*(_DWORD *)(v14 + 15736) + 1) >> 1;
    v186 = 8 * (int)v185 * (*(int *)a2 >> 1);
    v187 = 8 * (*(int *)(a2 + 4) >> 1);
    v188 = v183 + v187 + v186;
    if (v184 <= 1)
      v189 = 1;
    else
      v189 = v184;
    if ((v10 + 1) >> 1 <= 1)
      v190 = 1;
    else
      v190 = (v10 + 1) >> 1;
    v191 = v187 + v183 + v186 + 12;
    do
    {
      if (v189 >= 2)
      {
        result = v188 + 8 * (v189 & 0x3FFFFFFE);
        v193 = v189 & 0x3FFFFFFE;
        v194 = (_BYTE *)v191;
        do
        {
          *(v194 - 8) = -1;
          *v194 = -1;
          v194 += 16;
          v193 -= 2;
        }
        while (v193);
        v192 = v189 & 0x3FFFFFFE;
        if ((v189 & 0x3FFFFFFE) == v189)
          goto LABEL_158;
      }
      else
      {
        v192 = 0;
        result = v188;
      }
      v195 = v189 - v192;
      result += 4;
      do
      {
        *(_BYTE *)result = -1;
        result += 8;
        --v195;
      }
      while (v195);
LABEL_158:
      v188 += 8 * v185;
      ++v182;
      v191 += 8 * v185;
    }
    while (v182 != v190);
  }
  return result;
}

unint64_t read_inter_frame_mode_info(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  char inter_segment_id;
  int16x8_t v15;
  int16x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  int8x16_t *v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  int8x16_t *v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  int16x8_t v73;
  int8x16_t v74;
  int32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  int16x8_t v79;
  int32x4_t v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  BOOL v86;
  int8x16_t v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned __int16 v94;
  _BYTE *v95;
  unsigned __int8 *v96;
  __int16 v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  _BOOL4 v103;
  BOOL v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned __int16 *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  unsigned __int16 *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  __int16 v120;
  unsigned int v121;
  int v122;
  unint64_t v123;
  int8x16_t *v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  unsigned __int8 *v128;
  unint64_t v129;
  uint64_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int8x16_t v133;
  int32x4_t v134;
  uint32x4_t v135;
  uint32x4_t v136;
  uint32x4_t v137;
  uint32x4_t v138;
  int16x8_t v139;
  int32x4_t v140;
  uint64_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  BOOL v146;
  int8x16_t v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned __int16 v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int intra_mode;
  unsigned __int8 angle_delta;
  uint64_t v159;
  uint64_t v160;
  int16x8_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t v167;
  int v168;
  char v169;
  char v170;
  int v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  __int16 v192;
  __int16 v193;
  __int16 v194;
  unsigned int v195;
  unsigned __int8 v196;
  unint64_t v197;
  int8x16_t *v198;
  unsigned int v199;
  int v200;
  unint64_t v201;
  unsigned __int8 *v202;
  unint64_t v203;
  uint64_t v204;
  int16x8_t v205;
  int8x16_t v206;
  int32x4_t v207;
  uint32x4_t v208;
  uint32x4_t v209;
  uint32x4_t v210;
  int16x8_t v211;
  int32x4_t v212;
  uint64_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  BOOL v218;
  int8x16_t v219;
  int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned __int16 v225;
  unint64_t v226;
  uint64_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int8x16_t v230;
  int32x4_t v231;
  uint32x4_t v232;
  uint32x4_t v233;
  uint32x4_t v234;
  uint32x4_t v235;
  int16x8_t v236;
  int32x4_t v237;
  uint64_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  BOOL v243;
  int8x16_t v244;
  int v245;
  uint64_t v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  __int16 v254;
  unsigned __int8 v255;
  uint64_t v256;
  uint64_t v257;
  _BOOL4 v258;
  unint64_t result;
  int v260;
  unsigned int v261;
  int v262;
  int v263;
  uint64_t v264;
  unsigned __int16 *v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  __int16 v275;
  unsigned int v276;
  unsigned __int8 v277;
  int v278;
  unint64_t v279;
  int8x16_t *v280;
  unsigned int v281;
  int v282;
  unint64_t v283;
  unsigned __int8 *v284;
  unint64_t v285;
  uint64_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int8x16_t v289;
  int32x4_t v290;
  uint32x4_t v291;
  uint32x4_t v292;
  uint32x4_t v293;
  uint32x4_t v294;
  int16x8_t v295;
  int32x4_t v296;
  uint64_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  BOOL v302;
  int8x16_t v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned __int16 v309;
  int comp_reference_type_context;
  int16x8_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned __int16 *v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  __int16 v323;
  __int16 v324;
  __int16 v325;
  unsigned int v326;
  unint64_t v327;
  int8x16_t *v328;
  unsigned int v329;
  int v330;
  unint64_t v331;
  unsigned __int8 *v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  unsigned int v336;
  unsigned __int16 *v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  __int16 v347;
  unsigned int v348;
  int v349;
  int v350;
  unint64_t v351;
  int8x16_t *v352;
  unsigned int v353;
  int v354;
  unint64_t v355;
  unsigned __int8 *v356;
  unint64_t v357;
  uint64_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int8x16_t v361;
  int32x4_t v362;
  uint32x4_t v363;
  uint32x4_t v364;
  uint32x4_t v365;
  uint32x4_t v366;
  int16x8_t v367;
  int32x4_t v368;
  uint64_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int8x16_t v373;
  BOOL v374;
  int8x16_t v375;
  int v376;
  uint64_t v377;
  int v378;
  unsigned int v379;
  int v380;
  unsigned int v381;
  unsigned int v382;
  unsigned __int16 v383;
  unsigned int v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned __int16 *v389;
  unsigned int v390;
  unsigned int v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  __int16 v398;
  unsigned int v399;
  int v400;
  int v401;
  unint64_t v402;
  int8x16_t *v403;
  unsigned int v404;
  int v405;
  unint64_t v406;
  unsigned __int8 *v407;
  uint64_t v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned __int16 *v412;
  unsigned int v413;
  unsigned int v414;
  int v415;
  uint64_t v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  __int16 v421;
  unsigned int v422;
  int v423;
  int v424;
  unint64_t v425;
  int8x16_t *v426;
  unsigned int v427;
  int v428;
  unint64_t v429;
  unsigned __int8 *v430;
  unint64_t v431;
  uint64_t v432;
  int16x8_t v433;
  int16x8_t v434;
  int8x16_t v435;
  int32x4_t v436;
  uint32x4_t v437;
  uint32x4_t v438;
  uint32x4_t v439;
  uint32x4_t v440;
  int16x8_t v441;
  int32x4_t v442;
  uint64_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int8x16_t v447;
  BOOL v448;
  int8x16_t v449;
  int v450;
  unsigned int v451;
  int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned __int8 *v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned __int16 *v459;
  uint64_t v460;
  unsigned int v461;
  int v462;
  unsigned int v463;
  unsigned int v464;
  BOOL v465;
  char v466;
  unint64_t v467;
  uint64_t v468;
  int16x8_t v469;
  int16x8_t v470;
  int8x16_t v471;
  int32x4_t v472;
  uint32x4_t v473;
  uint32x4_t v474;
  uint32x4_t v475;
  uint32x4_t v476;
  int16x8_t v477;
  int32x4_t v478;
  uint64_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  BOOL v484;
  int8x16_t v485;
  int v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned __int16 *v494;
  uint64_t v495;
  unsigned int v496;
  int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned __int16 *v503;
  uint64_t v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  int16x8_t v509;
  __int16 v510;
  char v511;
  int v512;
  int v513;
  _WORD *v514;
  int v515;
  int v516;
  int v517;
  char v518;
  unsigned __int8 *v519;
  int v520;
  int v521;
  uint64_t v522;
  unsigned int v523;
  char v524;
  __int16 v525;
  int v526;
  unsigned int v527;
  int v528;
  unsigned int v529;
  unsigned int v530;
  unsigned int v531;
  unsigned int v532;
  uint64_t v533;
  unsigned __int16 *v534;
  int v535;
  unint64_t v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  __int16 v541;
  unsigned int v542;
  unsigned __int8 v543;
  int v544;
  unint64_t v545;
  int8x16_t *v546;
  unsigned int v547;
  int v548;
  unint64_t v549;
  unsigned __int8 *v550;
  uint64_t v551;
  int v552;
  int v553;
  int *v554;
  int v555;
  int v556;
  int v557;
  int v558;
  __int16 v559;
  int v560;
  int v561;
  __int16 v562;
  int v563;
  int v564;
  __int16 v565;
  int v566;
  int v567;
  __int16 v568;
  int v569;
  int v570;
  __int16 v571;
  int v572;
  int v573;
  __int16 v574;
  int v575;
  int v576;
  __int16 v577;
  unsigned int v578;
  int v579;
  __int16 v580;
  int v581;
  __int16 v582;
  __int16 v583;
  unint64_t v584;
  uint64_t v585;
  int v586;
  uint64_t v587;
  uint64_t v588;
  char v589;
  uint64_t v590;
  unsigned __int16 *v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  __int16 v598;
  __int16 v599;
  __int16 v600;
  unsigned int v601;
  int v602;
  int v603;
  unint64_t v604;
  int8x16_t *v605;
  unsigned int v606;
  int v607;
  unint64_t v608;
  unsigned __int8 *v609;
  char v610;
  __int16 v611;
  __int16 v612;
  __int16 v613;
  __int16 v614;
  __int16 v615;
  __int16 v616;
  __int16 v617;
  int v618;
  unsigned __int8 *v619;
  unsigned __int16 *v620;
  int v621;
  uint64_t *v622;
  uint64_t v623;
  _WORD *v624;
  _BOOL4 v625;
  int v626;
  unsigned __int16 *v627;
  int v628;
  int v629;
  int v630;
  __int16 v631;
  int v632;
  int v633;
  _BYTE *v634;
  _BOOL4 v635;
  int v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  unsigned int v640;
  unsigned int v641;
  int16x8_t v642;
  int16x8_t v643;
  int8x8_t v644;
  int8x8_t v645;
  uint32x4_t v646;
  uint32x4_t v647;
  uint32x4_t v648;
  int32x4_t v649;
  int v650;
  uint64_t v651;
  unsigned int v652;
  int *v653;
  int v654;
  int v655;
  unsigned __int16 *v656;
  unsigned int v657;
  int v658;
  unsigned int v659;
  unsigned int v660;
  unsigned int v661;
  signed __int8 v662;
  int v663;
  _BOOL4 v665;
  __int16 v666;
  __int16 v667;
  unsigned int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  unsigned __int16 *v674;
  unsigned int v675;
  unsigned int v676;
  unsigned int v677;
  int v678;
  uint64_t v679;
  unsigned int v680;
  unsigned int v681;
  __int16 v682;
  __int16 v683;
  __int16 v684;
  unsigned int v685;
  char v686;
  unint64_t v687;
  int8x16_t *v688;
  unsigned int v689;
  int v690;
  unint64_t v691;
  unsigned __int8 *v692;
  unsigned int v693;
  unsigned __int16 *v694;
  uint64_t v695;
  unsigned int v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned __int16 *v700;
  unsigned int v701;
  int v702;
  unsigned int v703;
  unsigned int v704;
  unint64_t v705;
  int16x8_t v706;
  int8x16_t v707;
  int32x4_t v708;
  uint32x4_t v709;
  int16x8_t v710;
  int32x4_t v711;
  unint64_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int8x16_t v715;
  int8x16_t v716;
  BOOL v717;
  int8x16_t v718;
  int v719;
  unsigned int v720;
  int v721;
  unsigned int v722;
  unsigned int v723;
  unsigned __int16 v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  int v733;
  int v734;
  int v735;
  unint64_t v736;
  uint64_t v737;
  int v738;
  unsigned __int8 **v739;
  unsigned __int8 *v740;
  uint64_t v741;
  _WORD *v742;
  unsigned int v743;
  unsigned int v744;
  unsigned int v745;
  int v746;
  uint64_t v747;
  unsigned int v748;
  unsigned int v749;
  unsigned int v750;
  __int16 v751;
  __int16 v752;
  __int16 v753;
  unsigned int v754;
  char v755;
  unint64_t v756;
  int8x16_t *v757;
  unsigned int v758;
  int v759;
  unint64_t v760;
  unsigned __int8 *v761;
  unint64_t v762;
  uint64_t v763;
  int v764;
  unsigned __int16 *v765;
  unsigned int v766;
  unsigned int v767;
  unsigned int v768;
  int v769;
  uint64_t v770;
  unsigned int v771;
  unsigned int v772;
  __int16 v773;
  __int16 v774;
  __int16 v775;
  unsigned int v776;
  char v777;
  unint64_t v778;
  int8x16_t *v779;
  unsigned int v780;
  int v781;
  unint64_t v782;
  unsigned __int8 *v783;
  unint64_t v784;
  int16x8_t v785;
  int8x16_t v786;
  int32x4_t v787;
  uint32x4_t v788;
  int16x8_t v789;
  int32x4_t v790;
  unint64_t v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  BOOL v796;
  int8x16_t v797;
  int v798;
  unsigned int v799;
  int v800;
  unsigned int v801;
  unsigned int v802;
  unsigned __int16 v803;
  unint64_t v804;
  uint64_t v805;
  int16x8_t v806;
  int16x8_t v807;
  int8x16_t v808;
  int32x4_t v809;
  uint32x4_t v810;
  uint32x4_t v811;
  uint32x4_t v812;
  uint32x4_t v813;
  int16x8_t v814;
  int32x4_t v815;
  uint64_t v816;
  int8x16_t v817;
  int8x16_t v818;
  int8x16_t v819;
  int8x16_t v820;
  BOOL v821;
  int8x16_t v822;
  int v823;
  unsigned int v824;
  int v825;
  unsigned int v826;
  unsigned int v827;
  unsigned int v828;
  unsigned int v829;
  unsigned int v830;
  unsigned int v831;
  unsigned int v832;
  unsigned int v833;
  unsigned __int16 v834;
  unsigned __int8 v835;
  unsigned __int8 *v836;
  unint64_t v837;
  uint64_t v838;
  int16x8_t v839;
  int16x8_t v840;
  int8x16_t v841;
  int32x4_t v842;
  uint32x4_t v843;
  uint32x4_t v844;
  uint32x4_t v845;
  uint32x4_t v846;
  int16x8_t v847;
  int32x4_t v848;
  uint64_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int8x16_t v853;
  BOOL v854;
  int8x16_t v855;
  int v856;
  int v857;
  unsigned int v858;
  int v859;
  unsigned int v860;
  unsigned int v861;
  unsigned __int16 v862;
  uint64_t v863;
  unsigned __int16 *v864;
  unsigned int v865;
  unsigned int v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  unsigned int v870;
  unsigned int v871;
  unsigned int v872;
  __int16 v873;
  __int16 v874;
  __int16 v875;
  unsigned int v876;
  int v877;
  unint64_t v878;
  int8x16_t *v879;
  unsigned int v880;
  int v881;
  unint64_t v882;
  unsigned __int8 *v883;
  unint64_t v884;
  uint64_t v885;
  int16x8_t v886;
  int16x8_t v887;
  int8x16_t v888;
  int32x4_t v889;
  uint32x4_t v890;
  uint32x4_t v891;
  uint32x4_t v892;
  uint32x4_t v893;
  int16x8_t v894;
  int32x4_t v895;
  uint64_t v896;
  int8x16_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  BOOL v901;
  int8x16_t v902;
  int v903;
  unsigned int v904;
  int v905;
  unsigned int v906;
  unsigned int v907;
  unsigned __int16 v908;
  uint64_t v909;
  unsigned __int16 *v910;
  unsigned int v911;
  unsigned int v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  unsigned int v916;
  unsigned int v917;
  unsigned int v918;
  unsigned int v919;
  __int16 v920;
  unsigned int v921;
  int v922;
  int v923;
  unint64_t v924;
  int8x16_t *v925;
  unsigned int v926;
  int v927;
  unint64_t v928;
  unsigned __int8 *v929;
  unint64_t v930;
  uint64_t v931;
  int16x8_t v932;
  int16x8_t v933;
  int8x16_t v934;
  int32x4_t v935;
  uint32x4_t v936;
  uint32x4_t v937;
  uint32x4_t v938;
  uint32x4_t v939;
  int16x8_t v940;
  int32x4_t v941;
  uint64_t v942;
  int8x16_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  BOOL v947;
  int8x16_t v948;
  int v949;
  unsigned int v950;
  int v951;
  unsigned int v952;
  unsigned int v953;
  __int16 v954;
  int v955;
  int v956;
  int *v957;
  unint64_t v958;
  uint64_t v959;
  unsigned __int8 v960;
  int v961;
  int v962;
  unsigned int v963;
  unsigned int v964;
  unsigned int v965;
  int32x2_t *v966;
  int32x2_t *v967;
  int v968;
  int v969;
  uint64_t v970;
  int v971;
  uint64_t v972;
  int v973;
  uint64_t v974;
  unsigned int v975;
  unsigned int v976;
  int v977;
  uint64_t v978;
  int v979;
  int v980;
  _BOOL4 v981;
  uint64_t v982;
  _BOOL4 v983;
  int v984;
  int v985;
  unsigned __int8 *v986;
  int v987;
  int v988;
  int v989;
  unsigned __int8 *v990;
  int v991;
  uint64_t v992;
  int v993;
  int v994;
  int v995;
  unsigned int v996;
  unsigned __int16 *v997;
  unsigned int v998;
  unsigned int v999;
  unsigned int v1000;
  int v1001;
  uint64_t v1002;
  unsigned int v1003;
  unsigned int v1004;
  unsigned int v1005;
  unsigned int v1006;
  unsigned int v1007;
  unsigned __int8 v1008;
  int v1009;
  int8x16_t *v1010;
  unsigned int v1011;
  int v1012;
  unint64_t v1013;
  unsigned __int8 *v1014;
  unsigned __int16 *v1015;
  uint64_t v1016;
  unsigned int v1017;
  int v1018;
  unint64_t v1019;
  unsigned int v1020;
  unsigned int v1021;
  unsigned int v1022;
  unsigned int v1023;
  unsigned int v1024;
  unsigned int v1025;
  unsigned int v1026;
  unsigned int v1027;
  unsigned int v1028;
  unsigned int v1029;
  unsigned int v1030;
  unsigned int v1031;
  unsigned int v1032;
  unsigned int v1033;
  unsigned int v1034;
  unsigned int v1035;
  unint64_t v1036;
  uint64_t v1037;
  int16x8_t v1038;
  int8x16_t v1039;
  int32x4_t v1040;
  uint32x4_t v1041;
  int16x8_t v1042;
  int32x4_t v1043;
  uint64_t v1044;
  int8x16_t v1045;
  int8x16_t v1046;
  int8x16_t v1047;
  int8x16_t v1048;
  BOOL v1049;
  int8x16_t v1050;
  int v1051;
  int v1052;
  unsigned int v1053;
  int v1054;
  unsigned int v1055;
  unsigned int v1056;
  unsigned int v1057;
  unsigned int v1058;
  int v1059;
  unsigned int v1060;
  unsigned int v1061;
  unsigned int v1062;
  int v1063;
  int v1064;
  unsigned __int8 *v1065;
  int v1066;
  unsigned __int8 *v1067;
  int v1068;
  uint64_t v1069;
  int v1070;
  int v1071;
  int v1072;
  unsigned int v1073;
  unsigned __int16 *v1074;
  unsigned int v1075;
  unsigned int v1076;
  int v1077;
  uint64_t v1078;
  unsigned int v1079;
  unsigned int v1080;
  unsigned int v1081;
  __int16 v1082;
  unsigned int v1083;
  unsigned __int8 v1084;
  int v1085;
  unint64_t v1086;
  int8x16_t *v1087;
  unsigned int v1088;
  int v1089;
  unint64_t v1090;
  unsigned __int8 *v1091;
  unsigned __int16 *v1092;
  uint64_t v1093;
  unsigned int v1094;
  int v1095;
  unint64_t v1096;
  unsigned int v1097;
  unsigned int v1098;
  unsigned int v1099;
  unsigned int v1100;
  unint64_t v1101;
  uint64_t v1102;
  int16x8_t v1103;
  int8x16_t v1104;
  int32x4_t v1105;
  uint32x4_t v1106;
  int16x8_t v1107;
  int32x4_t v1108;
  uint64_t v1109;
  int8x16_t v1110;
  int8x16_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  BOOL v1114;
  int8x16_t v1115;
  int v1116;
  unsigned int v1117;
  int v1118;
  unsigned int v1119;
  unsigned int v1120;
  unsigned int v1121;
  unsigned __int16 v1122;
  unint64_t v1123;
  uint64_t v1124;
  int16x8_t v1125;
  int16x8_t v1126;
  int8x16_t v1127;
  int32x4_t v1128;
  uint32x4_t v1129;
  uint32x4_t v1130;
  uint32x4_t v1131;
  uint32x4_t v1132;
  int16x8_t v1133;
  int32x4_t v1134;
  uint64_t v1135;
  int8x16_t v1136;
  int8x16_t v1137;
  int8x16_t v1138;
  int8x16_t v1139;
  BOOL v1140;
  int8x16_t v1141;
  int v1142;
  unsigned int v1143;
  int v1144;
  unsigned int v1145;
  unsigned int v1146;
  uint64_t v1147;
  unsigned __int8 v1148;
  unsigned int v1149;
  unsigned __int8 *v1150;
  unsigned int v1151;
  uint64_t v1152;
  unsigned __int16 *v1153;
  unsigned int v1154;
  unsigned int v1155;
  unsigned int v1156;
  int v1157;
  uint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  unsigned int v1161;
  unsigned int v1162;
  unsigned int v1163;
  __int16 v1164;
  unsigned int v1165;
  int v1166;
  int v1167;
  int8x16_t *v1168;
  unint64_t v1169;
  unsigned int v1170;
  int v1171;
  unint64_t v1172;
  unsigned __int8 *v1173;
  char v1174;
  unint64_t v1175;
  uint64_t v1176;
  int16x8_t v1177;
  int16x8_t v1178;
  int8x16_t v1179;
  int32x4_t v1180;
  uint32x4_t v1181;
  uint32x4_t v1182;
  uint32x4_t v1183;
  uint32x4_t v1184;
  int16x8_t v1185;
  int32x4_t v1186;
  uint64_t v1187;
  int8x16_t v1188;
  int8x16_t v1189;
  int8x16_t v1190;
  int8x16_t v1191;
  BOOL v1192;
  int8x16_t v1193;
  int v1194;
  unsigned int v1195;
  int v1196;
  unsigned int v1197;
  unsigned int v1198;
  unsigned __int16 v1199;
  unsigned int v1200;
  unsigned __int16 *v1201;
  uint64_t v1202;
  unsigned int v1203;
  int v1204;
  unsigned int v1205;
  unsigned int v1206;
  unsigned __int8 *v1207;
  uint64_t v1208;
  unsigned int v1209;
  uint64_t v1210;
  unsigned __int16 *v1211;
  unsigned int v1212;
  unsigned int v1213;
  unsigned int v1214;
  int v1215;
  uint64_t v1216;
  uint64_t v1217;
  unsigned int v1218;
  unsigned int v1219;
  unsigned int v1220;
  unsigned int v1221;
  __int16 v1222;
  unsigned int v1223;
  int v1224;
  int v1225;
  unint64_t v1226;
  int8x16_t *v1227;
  unsigned int v1228;
  int v1229;
  unint64_t v1230;
  unsigned __int8 *v1231;
  unint64_t v1232;
  uint64_t v1233;
  int16x8_t v1234;
  int16x8_t v1235;
  int8x16_t v1236;
  int32x4_t v1237;
  uint32x4_t v1238;
  uint32x4_t v1239;
  uint32x4_t v1240;
  uint32x4_t v1241;
  int16x8_t v1242;
  int32x4_t v1243;
  uint64_t v1244;
  int8x16_t v1245;
  int8x16_t v1246;
  int8x16_t v1247;
  int8x16_t v1248;
  BOOL v1249;
  int8x16_t v1250;
  int v1251;
  unsigned int v1252;
  int v1253;
  unsigned int v1254;
  unsigned int v1255;
  unsigned __int16 v1256;
  unsigned __int8 *v1257;
  unsigned int v1258;
  _BOOL4 v1259;
  unsigned int v1260;
  unsigned __int16 *v1261;
  uint64_t v1262;
  unsigned int v1263;
  int v1264;
  unsigned int v1265;
  unsigned int v1266;
  unsigned __int16 *v1267;
  uint64_t v1268;
  unsigned int v1269;
  int v1270;
  unsigned int v1271;
  unsigned int v1272;
  unint64_t v1273;
  uint64_t v1274;
  int16x8_t v1275;
  int16x8_t v1276;
  int8x16_t v1277;
  int32x4_t v1278;
  uint32x4_t v1279;
  uint32x4_t v1280;
  uint32x4_t v1281;
  uint32x4_t v1282;
  int16x8_t v1283;
  int32x4_t v1284;
  uint64_t v1285;
  int8x16_t v1286;
  int8x16_t v1287;
  int8x16_t v1288;
  int8x16_t v1289;
  BOOL v1290;
  int8x16_t v1291;
  int v1292;
  char v1293;
  unsigned int v1294;
  int v1295;
  unsigned int v1296;
  unsigned int v1297;
  unsigned __int16 v1298;
  unsigned int v1299;
  unsigned int v1300;
  unsigned int v1301;
  unsigned __int16 *v1302;
  uint64_t v1303;
  unsigned int v1304;
  int v1305;
  unsigned int v1306;
  unsigned int v1307;
  unsigned __int16 *v1308;
  uint64_t v1309;
  unsigned int v1310;
  int v1311;
  unsigned int v1312;
  unsigned int v1313;
  uint64_t v1314;
  unsigned int v1315;
  unsigned int v1316;
  unsigned int v1317;
  unsigned __int16 *v1318;
  uint64_t v1319;
  unsigned int v1320;
  int v1321;
  unsigned int v1322;
  unsigned int v1323;
  unsigned int v1324;
  unsigned int v1325;
  unsigned int v1326;
  unsigned __int16 *v1327;
  uint64_t v1328;
  unsigned int v1329;
  int v1330;
  unsigned int v1331;
  unsigned int v1332;
  BOOL v1333;
  char v1334;
  unsigned int v1335;
  unsigned int v1336;
  unsigned int v1337;
  unsigned __int16 *v1338;
  uint64_t v1339;
  unsigned int v1340;
  int v1341;
  unsigned int v1342;
  unsigned int v1343;
  unsigned __int16 *v1344;
  uint64_t v1345;
  unsigned int v1346;
  int v1347;
  unint64_t v1348;
  unsigned int v1349;
  unsigned int v1350;
  unsigned int v1351;
  unsigned int v1352;
  unsigned int v1353;
  unsigned int v1354;
  unsigned int v1355;
  unsigned int v1356;
  unsigned int v1357;
  unsigned int v1358;
  unsigned int v1359;
  unsigned int v1360;
  unsigned int v1361;
  unsigned int v1362;
  unsigned int v1363;
  unsigned int v1364;
  unsigned int v1365;
  unsigned int v1366;
  unsigned int v1367;
  unsigned __int16 *v1368;
  uint64_t v1369;
  unsigned int v1370;
  int v1371;
  unsigned int v1372;
  unsigned int v1373;
  unsigned int v1374;
  unsigned int v1375;
  unsigned int v1376;
  unsigned __int16 *v1377;
  uint64_t v1378;
  unsigned int v1379;
  int v1380;
  unsigned int v1381;
  unsigned int v1382;
  char v1383;
  unsigned int v1384;
  unsigned int v1385;
  unsigned int v1386;
  unsigned __int16 *v1387;
  uint64_t v1388;
  unsigned int v1389;
  int v1390;
  unsigned int v1391;
  unsigned int v1392;
  _BYTE *v1393;
  unsigned int v1394;
  uint64_t v1395;
  uint64_t v1396;
  char *v1397;
  uint64_t v1398;
  _DWORD *v1399;
  _WORD *v1400;
  uint64_t v1401;
  int32x2_t v1402[8];
  int32x2_t v1403[8];
  _WORD v1404[29];
  _QWORD v1405[29];
  unint64_t v1406;
  _QWORD v1407[4];

  v1407[1] = *MEMORY[0x24BDAC8D0];
  v11 = a1 + 34192;
  v12 = a1 + 15200;
  v13 = **(unsigned __int8 ***)(a2 + 7864);
  *((_DWORD *)v13 + 2) = 0;
  v1400 = v13 + 8;
  *((_DWORD *)v13 + 3) = 0;
  v1399 = v13 + 12;
  inter_segment_id = read_inter_segment_id(a1 + 15200, a2, 1, a3, a4, a5, a6, a7, a8);
  *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFFF8 | inter_segment_id & 7;
  LODWORD(v20) = *(_DWORD *)(a1 + 15224);
  if (!(_DWORD)v20)
    goto LABEL_10;
  if (*(_BYTE *)v11 && (*(_DWORD *)(a1 + 4 * (inter_segment_id & 7) + 34324) & 0x40) != 0)
    goto LABEL_9;
  v21 = ***(unsigned __int8 ***)(a2 + 7864);
  v22 = block_size_wide_9[v21];
  v23 = block_size_high_8[v21];
  if (v22 < v23)
    v23 = v22;
  if (v23 < 8 || *(_BYTE *)v11 && (*(_DWORD *)(a1 + 4 * (inter_segment_id & 7) + 34324) & 0xA0) != 0)
  {
LABEL_9:
    LOBYTE(v20) = 0;
    goto LABEL_10;
  }
  v49 = *(_QWORD *)(a2 + 7880);
  v20 = *(_QWORD *)(a2 + 7888);
  if (v20)
    v20 = ((unint64_t)*(unsigned __int16 *)(v20 + 167) >> 6) & 1;
  if (v49)
    v49 = ((unint64_t)*(unsigned __int16 *)(v49 + 167) >> 6) & 1;
  v50 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * (v49 + v20) + 11852);
  v51 = *(_DWORD *)(a3 + 48);
  v52 = *(unsigned __int16 *)(a3 + 52);
  v53 = v52 >> 8;
  v54 = 8;
  v55 = 0xFF00000000000000;
  LOBYTE(v20) = -1;
  v56 = v50;
  do
  {
    v57 = v52;
    v58 = *v56++;
    v59 = v53 * (v58 >> 6);
    v54 -= 4;
    v52 = v54 + (v59 >> 1);
    v55 += 0x100000000000000;
    LOBYTE(v20) = v20 + 1;
  }
  while (HIWORD(v51) < v52);
  v60 = v57 - (v59 >> 1) - v54;
  v61 = (__clz(v60) ^ 0xFFFFFFE0) + 16;
  v62 = *(_WORD *)(a3 + 54) - v61;
  *(_WORD *)(a3 + 54) = v62;
  v63 = ((v51 - (v52 << 16) + 1) << v61) - 1;
  *(_DWORD *)(a3 + 48) = v63;
  *(_WORD *)(a3 + 52) = v60 << v61;
  if (v62 < 0)
  {
    v64 = v62;
    v65 = *(_QWORD *)(a3 + 32);
    v66 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v66 >= v65)
    {
      v70 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_189;
    }
    v67 = 8 - v64;
    if ((8 - v64) >= 7)
      v68 = 7;
    else
      v68 = 8 - v64;
    v69 = ((v68 ^ 0xFu) - v64) >> 3;
    if (v69 >= ~(unint64_t)v66 + v65)
      v69 = ~(unint64_t)v66 + v65;
    if (v69 >= 0xF)
    {
      v203 = v69 + 1;
      v204 = (v69 + 1) & 0x3FFFFFF0;
      v70 = &v66->u8[v204];
      v205 = 0uLL;
      v16 = (int16x8_t)(unsigned __int16)v64;
      v206 = (int8x16_t)v63;
      v207 = vdupq_n_s32(v67);
      v208 = (uint32x4_t)vaddq_s32(v207, (int32x4_t)xmmword_208F3A6C0);
      v19 = (int8x16_t)vaddq_s32(v207, (int32x4_t)xmmword_208F3A6D0);
      v209 = (uint32x4_t)vaddq_s32(v207, (int32x4_t)xmmword_208F3A6A0);
      v210 = (uint32x4_t)vaddq_s32(v207, (int32x4_t)xmmword_208F3A6B0);
      v211.i64[0] = 0x8000800080008;
      v211.i64[1] = 0x8000800080008;
      v212.i64[0] = 0x7F0000007FLL;
      v212.i64[1] = 0x7F0000007FLL;
      v213 = v204;
      v214 = 0uLL;
      v215 = 0uLL;
      v216 = 0uLL;
      do
      {
        v217 = *v66++;
        v215 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v217, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v19), v215);
        v214 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v217, (int8x16_t)xmmword_208F04F40), v209), v214);
        v206 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v217, (int8x16_t)xmmword_208F04F50), v210), v206);
        v216 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v217, (int8x16_t)xmmword_208F04F20), v208), v216);
        v16 = vaddq_s16(v16, v211);
        v205 = vaddq_s16(v205, v211);
        v210 = (uint32x4_t)vaddq_s32((int32x4_t)v210, v212);
        v209 = (uint32x4_t)vaddq_s32((int32x4_t)v209, v212);
        v19 = (int8x16_t)vaddq_s32((int32x4_t)v19, v212);
        v208 = (uint32x4_t)vaddq_s32((int32x4_t)v208, v212);
        v213 -= 16;
      }
      while (v213);
      v218 = (unint64_t)v66 < v65;
      v219 = veorq_s8(veorq_s8(v206, v215), veorq_s8(v214, v216));
      v18 = (int8x8_t)vextq_s8(v219, v219, 8uLL).u64[0];
      v17 = veor_s8(*(int8x8_t *)v219.i8, v18);
      v63 = v17.i32[0] ^ v17.i32[1];
      v15 = vaddq_s16(v16, v205);
      v15.i16[0] = vaddvq_s16(v15);
      LOWORD(v64) = v15.i16[0];
      if (v203 == v204)
        goto LABEL_188;
      v67 -= 8 * v204;
    }
    else
    {
      v70 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v220 = *v70++;
      v63 ^= v220 << v67;
      LOWORD(v64) = v64 + 8;
      v218 = (unint64_t)v70 < v65;
      v89 = v67 >= 8;
      v67 -= 8;
    }
    while (v89 && (unint64_t)v70 < v65);
LABEL_188:
    if (v218)
    {
LABEL_190:
      *(_DWORD *)(a3 + 48) = v63;
      *(_WORD *)(a3 + 54) = v64;
      *(_QWORD *)(a3 + 40) = v70;
      goto LABEL_191;
    }
LABEL_189:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v64 + 0x4000;
    LOWORD(v64) = 0x4000;
    goto LABEL_190;
  }
LABEL_191:
  if (*(_BYTE *)(a3 + 56))
  {
    v221 = v50[2];
    v222 = (v221 >> 4) + 4;
    v223 = *v50;
    if (v55 < 1)
      v224 = v223 - (v223 >> v222);
    else
      v224 = v223 + ((int)(0x8000 - v223) >> v222);
    *v50 = v224;
    if (v221 >= 0x20)
      v225 = v221;
    else
      v225 = v221 + 1;
    v50[2] = v225;
  }
LABEL_10:
  v24 = *(_WORD *)(v13 + 167);
  *(_WORD *)(v13 + 167) = ((v20 & 1) << 6) | v24 & 0xFFBF;
  if ((v20 & 1) != 0 || *(_BYTE *)v11 && (*(_DWORD *)(a1 + 4 * (v24 & 7) + 34324) & 0x40) != 0)
  {
    v33 = 1;
    goto LABEL_63;
  }
  v25 = *(_QWORD *)(a2 + 7880);
  v26 = *(_QWORD *)(a2 + 7888);
  if (v26)
    LODWORD(v26) = *(unsigned __int8 *)(v26 + 144);
  if (v25)
    LODWORD(v25) = *(unsigned __int8 *)(v25 + 144);
  v27 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * (v25 + v26) + 11870);
  v28 = *(_DWORD *)(a3 + 48);
  v29 = *(unsigned __int16 *)(a3 + 52);
  v30 = v29 >> 8;
  v31 = 8;
  v32 = 0xFF00000000000000;
  v33 = -1;
  v34 = v27;
  do
  {
    v35 = v29;
    v36 = *v34++;
    v37 = v30 * (v36 >> 6);
    v31 -= 4;
    v29 = v31 + (v37 >> 1);
    v32 += 0x100000000000000;
    ++v33;
  }
  while (HIWORD(v28) < v29);
  v38 = v35 - (v37 >> 1) - v31;
  v39 = (__clz(v38) ^ 0xFFFFFFE0) + 16;
  v40 = *(_WORD *)(a3 + 54) - v39;
  *(_WORD *)(a3 + 54) = v40;
  v41 = ((v28 - (v29 << 16) + 1) << v39) - 1;
  *(_DWORD *)(a3 + 48) = v41;
  *(_WORD *)(a3 + 52) = v38 << v39;
  if (v40 < 0)
  {
    v42 = v40;
    v43 = *(_QWORD *)(a3 + 32);
    v44 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v44 >= v43)
    {
      v48 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_53;
    }
    v45 = 8 - v42;
    if ((8 - v42) >= 7)
      v46 = 7;
    else
      v46 = 8 - v42;
    v47 = ((v46 ^ 0xFu) - v42) >> 3;
    if (v47 >= ~(unint64_t)v44 + v43)
      v47 = ~(unint64_t)v44 + v43;
    if (v47 >= 0xF)
    {
      v71 = v47 + 1;
      v72 = (v47 + 1) & 0x3FFFFFF0;
      v48 = &v44->u8[v72];
      v73 = 0uLL;
      v16 = (int16x8_t)(unsigned __int16)v42;
      v74 = (int8x16_t)v41;
      v75 = vdupq_n_s32(v45);
      v76 = (uint32x4_t)vaddq_s32(v75, (int32x4_t)xmmword_208F3A6C0);
      v19 = (int8x16_t)vaddq_s32(v75, (int32x4_t)xmmword_208F3A6D0);
      v77 = (uint32x4_t)vaddq_s32(v75, (int32x4_t)xmmword_208F3A6A0);
      v78 = (uint32x4_t)vaddq_s32(v75, (int32x4_t)xmmword_208F3A6B0);
      v79.i64[0] = 0x8000800080008;
      v79.i64[1] = 0x8000800080008;
      v80.i64[0] = 0x7F0000007FLL;
      v80.i64[1] = 0x7F0000007FLL;
      v81 = v72;
      v82 = 0uLL;
      v83 = 0uLL;
      v84 = 0uLL;
      do
      {
        v85 = *v44++;
        v83 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v85, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v19), v83);
        v82 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v85, (int8x16_t)xmmword_208F04F40), v77), v82);
        v74 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v85, (int8x16_t)xmmword_208F04F50), v78), v74);
        v84 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v85, (int8x16_t)xmmword_208F04F20), v76), v84);
        v16 = vaddq_s16(v16, v79);
        v73 = vaddq_s16(v73, v79);
        v78 = (uint32x4_t)vaddq_s32((int32x4_t)v78, v80);
        v77 = (uint32x4_t)vaddq_s32((int32x4_t)v77, v80);
        v19 = (int8x16_t)vaddq_s32((int32x4_t)v19, v80);
        v76 = (uint32x4_t)vaddq_s32((int32x4_t)v76, v80);
        v81 -= 16;
      }
      while (v81);
      v86 = (unint64_t)v44 < v43;
      v87 = veorq_s8(veorq_s8(v74, v83), veorq_s8(v82, v84));
      v18 = (int8x8_t)vextq_s8(v87, v87, 8uLL).u64[0];
      v17 = veor_s8(*(int8x8_t *)v87.i8, v18);
      v41 = v17.i32[0] ^ v17.i32[1];
      v15 = vaddq_s16(v16, v73);
      v15.i16[0] = vaddvq_s16(v15);
      LOWORD(v42) = v15.i16[0];
      if (v71 == v72)
        goto LABEL_52;
      v45 -= 8 * v72;
    }
    else
    {
      v48 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v88 = *v48++;
      v41 ^= v88 << v45;
      LOWORD(v42) = v42 + 8;
      v86 = (unint64_t)v48 < v43;
      v89 = v45 >= 8;
      v45 -= 8;
    }
    while (v89 && (unint64_t)v48 < v43);
LABEL_52:
    if (v86)
    {
LABEL_54:
      *(_DWORD *)(a3 + 48) = v41;
      *(_WORD *)(a3 + 54) = v42;
      *(_QWORD *)(a3 + 40) = v48;
      goto LABEL_55;
    }
LABEL_53:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v42 + 0x4000;
    LOWORD(v42) = 0x4000;
    goto LABEL_54;
  }
LABEL_55:
  if (*(_BYTE *)(a3 + 56))
  {
    v90 = v27[2];
    v91 = (v90 >> 4) + 4;
    v92 = *v27;
    if (v32 < 1)
      v93 = v92 - (v92 >> v91);
    else
      v93 = v92 + ((int)(0x8000 - v92) >> v91);
    *v27 = v93;
    if (v90 >= 0x20)
      v94 = v90;
    else
      v94 = v90 + 1;
    v27[2] = v94;
  }
LABEL_63:
  v95 = (_BYTE *)(a2 + 7872);
  v13[144] = v33;
  if (!*(_BYTE *)(v11 + 168))
    *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFFF8 | read_inter_segment_id(v12, a2, 0, a3, *(double *)v15.i64, *(double *)v16.i64, *(double *)&v17, *(double *)&v18, v19) & 7;
  v96 = (unsigned __int8 *)(a1 + 15201);
  read_cdef(v12, a3, (int *)a2);
  read_delta_q_params(v12, a2, a3);
  v97 = *(_WORD *)(v13 + 167);
  if ((v97 & 0x40) != 0)
  {
    v104 = 0;
    goto LABEL_119;
  }
  if (!*(_BYTE *)v11)
  {
LABEL_69:
    v100 = *(_QWORD *)(a2 + 7888);
    v101 = *(_QWORD *)(a2 + 7880);
    if (!*v95 || !*(_BYTE *)(a2 + 7873))
    {
      if (!(*(unsigned __int8 *)(a2 + 7873) | *v95))
        goto LABEL_81;
      if (*v95)
        v101 = *(_QWORD *)(a2 + 7888);
      if ((*(_WORD *)(v101 + 167) & 0x80) != 0)
LABEL_81:
        v106 = 0;
      else
        v106 = 2 * (*(char *)(v101 + 16) < 1);
LABEL_88:
      v108 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * v106 + 11888);
      v109 = *(_DWORD *)(a3 + 48);
      v110 = *(unsigned __int16 *)(a3 + 52);
      v111 = v110 >> 8;
      v112 = 8;
      v113 = 0xFF00000000000000;
      v105 = -1;
      v114 = v108;
      do
      {
        v115 = v110;
        v116 = *v114++;
        v117 = v111 * (v116 >> 6);
        v112 -= 4;
        v110 = v112 + (v117 >> 1);
        v113 += 0x100000000000000;
        ++v105;
      }
      while (HIWORD(v109) < v110);
      v118 = v115 - (v117 >> 1) - v112;
      v119 = (__clz(v118) ^ 0xFFFFFFE0) + 16;
      v120 = *(_WORD *)(a3 + 54) - v119;
      *(_WORD *)(a3 + 54) = v120;
      v121 = ((v109 - (v110 << 16) + 1) << v119) - 1;
      *(_DWORD *)(a3 + 48) = v121;
      *(_WORD *)(a3 + 52) = v118 << v119;
      if ((v120 & 0x8000) == 0)
      {
LABEL_110:
        if (*(_BYTE *)(a3 + 56))
        {
          v149 = v108[2];
          v150 = (v149 >> 4) + 4;
          v151 = *v108;
          if (v113 < 1)
            v152 = v151 - (v151 >> v150);
          else
            v152 = v151 + ((int)(0x8000 - v151) >> v150);
          *v108 = v152;
          if (v149 >= 0x20)
            v153 = v149;
          else
            v153 = v149 + 1;
          v108[2] = v153;
        }
        goto LABEL_118;
      }
      v122 = v120;
      v123 = *(_QWORD *)(a3 + 32);
      v124 = *(int8x16_t **)(a3 + 40);
      if ((unint64_t)v124 >= v123)
      {
        v128 = *(unsigned __int8 **)(a3 + 40);
        goto LABEL_108;
      }
      v125 = 8 - v122;
      if ((8 - v122) >= 7)
        v126 = 7;
      else
        v126 = 8 - v122;
      v127 = ((v126 ^ 0xFu) - v122) >> 3;
      if (v127 >= ~(unint64_t)v124 + v123)
        v127 = ~(unint64_t)v124 + v123;
      if (v127 >= 0xF)
      {
        v129 = v127 + 1;
        v130 = (v127 + 1) & 0x3FFFFFF0;
        v128 = &v124->u8[v130];
        v131 = 0uLL;
        v132 = (int16x8_t)(unsigned __int16)v122;
        v133 = (int8x16_t)v121;
        v134 = vdupq_n_s32(v125);
        v135 = (uint32x4_t)vaddq_s32(v134, (int32x4_t)xmmword_208F3A6C0);
        v136 = (uint32x4_t)vaddq_s32(v134, (int32x4_t)xmmword_208F3A6D0);
        v137 = (uint32x4_t)vaddq_s32(v134, (int32x4_t)xmmword_208F3A6A0);
        v138 = (uint32x4_t)vaddq_s32(v134, (int32x4_t)xmmword_208F3A6B0);
        v139.i64[0] = 0x8000800080008;
        v139.i64[1] = 0x8000800080008;
        v140.i64[0] = 0x7F0000007FLL;
        v140.i64[1] = 0x7F0000007FLL;
        v141 = v130;
        v142 = 0uLL;
        v143 = 0uLL;
        v144 = 0uLL;
        do
        {
          v145 = *v124++;
          v143 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v145, (int8x16_t)xmmword_208F04F30), v136), v143);
          v142 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v145, (int8x16_t)xmmword_208F04F40), v137), v142);
          v133 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v145, (int8x16_t)xmmword_208F04F50), v138), v133);
          v144 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v145, (int8x16_t)xmmword_208F04F20), v135), v144);
          v132 = vaddq_s16(v132, v139);
          v131 = vaddq_s16(v131, v139);
          v138 = (uint32x4_t)vaddq_s32((int32x4_t)v138, v140);
          v137 = (uint32x4_t)vaddq_s32((int32x4_t)v137, v140);
          v136 = (uint32x4_t)vaddq_s32((int32x4_t)v136, v140);
          v135 = (uint32x4_t)vaddq_s32((int32x4_t)v135, v140);
          v141 -= 16;
        }
        while (v141);
        v146 = (unint64_t)v124 < v123;
        v147 = veorq_s8(veorq_s8(v133, v143), veorq_s8(v142, v144));
        *(int8x8_t *)v147.i8 = veor_s8(*(int8x8_t *)v147.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
        v121 = v147.i32[0] ^ v147.i32[1];
        LOWORD(v122) = vaddvq_s16(vaddq_s16(v132, v131));
        if (v129 == v130)
          goto LABEL_107;
        v125 -= 8 * v130;
      }
      else
      {
        v128 = *(unsigned __int8 **)(a3 + 40);
      }
      do
      {
        v148 = *v128++;
        v121 ^= v148 << v125;
        LOWORD(v122) = v122 + 8;
        v146 = (unint64_t)v128 < v123;
        v89 = v125 >= 8;
        v125 -= 8;
      }
      while (v89 && (unint64_t)v128 < v123);
LABEL_107:
      if (v146)
      {
LABEL_109:
        *(_DWORD *)(a3 + 48) = v121;
        *(_WORD *)(a3 + 54) = v122;
        *(_QWORD *)(a3 + 40) = v128;
        goto LABEL_110;
      }
LABEL_108:
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v122 + 0x4000;
      LOWORD(v122) = 0x4000;
      goto LABEL_109;
    }
    if ((*(_WORD *)(v100 + 167) & 0x80) != 0)
    {
      v102 = 0;
      if ((*(_WORD *)(v101 + 167) & 0x80) != 0)
        goto LABEL_73;
    }
    else
    {
      v102 = *(char *)(v100 + 16) < 1;
      if ((*(_WORD *)(v101 + 167) & 0x80) != 0)
      {
LABEL_73:
        v103 = 0;
        goto LABEL_85;
      }
    }
    v103 = *(char *)(v101 + 16) < 1;
LABEL_85:
    v107 = v103 || v102;
    v465 = !v103 || !v102;
    v106 = 3;
    if (v465)
      v106 = v107;
    goto LABEL_88;
  }
  v98 = v97 & 7;
  v99 = *(_DWORD *)(a1 + 4 * v98 + 34324);
  if ((v99 & 0x20) != 0)
  {
    v105 = *(__int16 *)(a1 + 16 * v98 + 34206) > 0;
  }
  else
  {
    if ((v99 & 0x80) == 0)
      goto LABEL_69;
    v105 = 1;
  }
LABEL_118:
  v104 = v105 == 0;
LABEL_119:
  *((_DWORD *)v13 + 1) = *(_DWORD *)(a2 + 10724);
  v154 = *(_DWORD *)a2;
  *(_QWORD *)(a2 + 8128) = *(_QWORD *)(*(_QWORD *)(v11 + 6344) + 8 * *(int *)(a2 + 7856)) + *(int *)(a2 + 4);
  *(_QWORD *)(a2 + 8136) = a2 + 8144 + (v154 & 0x1F);
  v155 = *v13;
  if (!v104)
  {
    v1394 = *(unsigned __int8 *)(a1 + 15693);
    v160 = a2 + 10634;
    v161 = 0uLL;
    memset(v1405, 0, sizeof(v1405));
    v1396 = *(_QWORD *)(a2 + 10648);
    v13[3] = 0;
    *((_WORD *)v13 + 71) = 0;
    *(_QWORD *)(a2 + 10634) = 0;
    v162 = *(_QWORD *)(a2 + 7888);
    v163 = *(_QWORD *)(a2 + 7880);
    v164 = *v95;
    v165 = *(unsigned __int8 *)(a2 + 7873);
    if (*v95 && ((*(_WORD *)(v162 + 167) & 0x80) != 0 || *(char *)(v162 + 16) >= 1))
    {
      ++*(_BYTE *)(v160 + *(char *)(v162 + 16));
      if (*(char *)(v162 + 17) >= 1)
        ++*(_BYTE *)(v160 + *(unsigned __int8 *)(v162 + 17));
    }
    if (v165 && ((*(_WORD *)(v163 + 167) & 0x80) != 0 || *(char *)(v163 + 16) >= 1))
    {
      ++*(_BYTE *)(v160 + *(char *)(v163 + 16));
      if (*(char *)(v163 + 17) >= 1)
        ++*(_BYTE *)(v160 + *(unsigned __int8 *)(v163 + 17));
    }
    v166 = **(unsigned __int8 ***)(a2 + 7864);
    v1398 = v155;
    v1393 = (_BYTE *)(a2 + 7872);
    if ((*(_WORD *)(v166 + 167) & 0x40) != 0)
    {
      v169 = *(_BYTE *)(a1 + 15228) + 1;
      v13[16] = v169;
      v170 = *(_BYTE *)(a1 + 15232) + 1;
      v13[17] = v170;
      v1397 = (char *)(v13 + 17);
      if (v170 < 1)
        goto LABEL_303;
      goto LABEL_142;
    }
    if (*(_BYTE *)v11)
    {
      v167 = *(_WORD *)(v13 + 167) & 7;
      v168 = *(_DWORD *)(a1 + 4 * v167 + 34324);
      if ((v168 & 0x20) != 0)
      {
        v169 = *(_BYTE *)(a1 + 16 * v167 + 34206);
        goto LABEL_429;
      }
      if ((v168 & 0xC0) != 0)
      {
        v169 = 1;
LABEL_429:
        v171 = 0;
        v13[17] = -1;
        v1397 = (char *)(v13 + 17);
        v13[16] = v169;
LABEL_430:
        av1_find_mv_refs(v12, (_DWORD *)a2, v13, v169, a2 + 15142, a2 + 8312, a2 + 10168, (uint64_t)v1405, v161, 0, (uint64_t)v1404);
        v510 = *(_WORD *)(v13 + 167);
        *(_WORD *)(v13 + 167) = v510 & 0xFFCF;
        v1395 = v11;
        if ((v510 & 0x40) != 0)
        {
          v511 = 17;
          goto LABEL_435;
        }
        if (*(_BYTE *)v11 && (*(_DWORD *)(a1 + 4 * (v510 & 7) + 34324) & 0xC0) != 0)
        {
LABEL_433:
          v511 = 15;
LABEL_435:
          v13[2] = v511;
          goto LABEL_436;
        }
        v522 = (char)v13[16];
        if ((char)v13[17] < 1)
        {
          v528 = (__int16)v1404[v522];
          v529 = *(_DWORD *)(a3 + 48);
          v530 = *(unsigned __int16 *)(a3 + 52);
          v531 = HIWORD(v529);
          v532 = v530 >> 8;
          if (v171)
            goto LABEL_452;
        }
        else
        {
          v523 = v13[17];
          if ((int)v522 > 4 || v523 <= 4)
          {
            switch(v13[16])
            {
              case 1u:
                v610 = v523 - 2;
                if (v523 - 2 >= 3)
                  goto LABEL_447;
                goto LABEL_745;
              case 2u:
                if (v523 == 4)
                  v610 = 5;
                else
                  v610 = -1;
                if (v523 != 3)
                  goto LABEL_744;
                v524 = 24;
                break;
              case 3u:
                if (v523 != 4)
                  goto LABEL_447;
                v524 = 26;
                break;
              case 5u:
                if (v523 == 6)
                  v610 = 7;
                else
                  v610 = -1;
                if (v523 == 7)
                {
                  v524 = 23;
                  break;
                }
LABEL_744:
                if (v610 < 0)
                  goto LABEL_447;
LABEL_745:
                v524 = v610 + 20;
                break;
              case 6u:
                if (v523 != 7)
                  goto LABEL_447;
                v524 = 28;
                break;
              default:
                goto LABEL_447;
            }
          }
          else
          {
LABEL_447:
            v524 = v522 + 4 * v523 - 13;
          }
          v525 = v1404[v524];
          v526 = v525 >> 5;
          if ((v525 & 4) != 0)
            v527 = 4;
          else
            v527 = v525 & 7;
          v528 = compound_mode_ctx_map_0[5 * v526 + v527];
          v529 = *(_DWORD *)(a3 + 48);
          v530 = *(unsigned __int16 *)(a3 + 52);
          v531 = HIWORD(v529);
          v532 = v530 >> 8;
          if (v171)
          {
LABEL_452:
            v533 = 0;
            v534 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 18 * v528 + 0x2000);
            v535 = 32;
            v536 = 0xFF00000000000000;
            do
            {
              v537 = v530;
              v538 = v532 * (v534[v533] >> 6);
              v535 -= 4;
              v530 = v535 + (v538 >> 1);
              ++v533;
              v536 += 0x100000000000000;
            }
            while (v531 < v530);
            v539 = v537 - (v538 >> 1) - v535;
            v540 = (__clz(v539) ^ 0xFFFFFFE0) + 16;
            v541 = *(_WORD *)(a3 + 54) - v540;
            *(_WORD *)(a3 + 54) = v541;
            v542 = ((v529 - (v530 << 16) + 1) << v540) - 1;
            *(_DWORD *)(a3 + 48) = v542;
            *(_WORD *)(a3 + 52) = v539 << v540;
            v543 = v533 - 1;
            if ((v541 & 0x8000) == 0)
            {
LABEL_859:
              if (!*(_BYTE *)(a3 + 56))
                goto LABEL_879;
              v824 = v534[8];
              v825 = (v824 >> 4) + 5;
              v826 = *v534;
              if ((uint64_t)v536 <= 0)
              {
                *v534 = v826 - (v826 >> v825);
                v827 = v534[1];
              }
              else
              {
                *v534 = v826 + ((int)(0x8000 - v826) >> v825);
                v827 = v534[1];
                if (v536 > 0x100000000000000)
                {
                  v534[1] = v827 + ((int)(0x8000 - v827) >> v825);
                  v828 = v534[2];
                  if (v536 > 0x200000000000000)
                  {
                    v534[2] = v828 + ((int)(0x8000 - v828) >> v825);
                    v829 = v534[3];
                    if (v536 > 0x300000000000000)
                    {
                      v534[3] = v829 + ((int)(0x8000 - v829) >> v825);
                      v830 = v534[4];
                      if (v536 > 0x400000000000000)
                      {
                        v534[4] = v830 + ((int)(0x8000 - v830) >> v825);
                        v831 = v534[5];
                        if (v536 > 0x500000000000000)
                        {
                          v534[5] = v831 + ((int)(0x8000 - v831) >> v825);
                          v832 = v534[6];
                          if (v536 > 0x600000000000000)
                          {
                            v833 = v832 + ((int)(0x8000 - v832) >> v825);
LABEL_875:
                            v534[6] = v833;
                            if (v824 >= 0x20)
                              v834 = v824;
                            else
                              v834 = v824 + 1;
                            v534[8] = v834;
LABEL_879:
                            v835 = v543 + 17;
                            v13[2] = v543 + 17;
                            v836 = v13 + 2;
                            if ((v543 > 7u || ((1 << v543) & 0xB2) == 0) && v543 != 255 && v543 != 253)
                              goto LABEL_436;
LABEL_1198:
                            v1147 = a3 + 16;
                            v1148 = v13[16];
                            if ((char)v13[17] >= 1)
                            {
                              v1149 = v13[17];
                              if (v1149 < 5 || (char)v13[16] >= 5)
                              {
                                switch(v13[16])
                                {
                                  case 1u:
                                    v1174 = v1149 - 2;
                                    if (v1149 - 2 >= 3)
                                      goto LABEL_1201;
                                    goto LABEL_1238;
                                  case 2u:
                                    if (v1149 == 4)
                                      v1174 = 5;
                                    else
                                      v1174 = -1;
                                    if (v1149 != 3)
                                      goto LABEL_1237;
                                    v1148 = 24;
                                    break;
                                  case 3u:
                                    if (v1149 != 4)
                                      goto LABEL_1201;
                                    v1148 = 26;
                                    break;
                                  case 5u:
                                    if (v1149 == 6)
                                      v1174 = 7;
                                    else
                                      v1174 = -1;
                                    if (v1149 == 7)
                                    {
                                      v1148 = 23;
                                      break;
                                    }
LABEL_1237:
                                    if (v1174 < 0)
                                      goto LABEL_1201;
LABEL_1238:
                                    v1148 = v1174 + 20;
                                    break;
                                  case 6u:
                                    if (v1149 != 7)
                                      goto LABEL_1201;
                                    v1148 = 28;
                                    break;
                                  default:
                                    goto LABEL_1201;
                                }
                              }
                              else
                              {
LABEL_1201:
                                v1148 = v1148 + 4 * v1149 - 13;
                              }
                            }
                            *(_WORD *)(v13 + 167) &= 0xFFCFu;
                            if ((v835 | 8) != 0x18)
                              goto LABEL_1271;
                            v1150 = (unsigned __int8 *)(a2 + v1148 + 15142);
                            if (*v1150 < 2u)
                              goto LABEL_1271;
                            if (*(unsigned __int16 *)(a2 + 16 * v1148 + 10168) <= 0x27Fu)
                              v1151 = 2 * (*(unsigned __int16 *)(a2 + 16 * v1148 + 10170) < 0x280u);
                            else
                              v1151 = *(unsigned __int16 *)(a2 + 16 * v1148 + 10170) < 0x280u;
                            v1152 = v1396 + 6 * v1151;
                            v1153 = (unsigned __int16 *)(v1152 + 8174);
                            v1154 = *(_DWORD *)(a3 + 48);
                            v1155 = *(unsigned __int16 *)(a3 + 52);
                            v1156 = v1155 >> 8;
                            v1157 = 8;
                            v1158 = 0xFF00000000000000;
                            v1159 = 4087;
                            do
                            {
                              v1160 = v1155;
                              v1161 = v1156 * (*(unsigned __int16 *)(v1152 + 2 * v1159) >> 6);
                              v1157 -= 4;
                              v1155 = v1157 + (v1161 >> 1);
                              ++v1159;
                              v1158 += 0x100000000000000;
                            }
                            while (HIWORD(v1154) < v1155);
                            v1162 = v1160 - (v1161 >> 1) - v1157;
                            v1163 = (__clz(v1162) ^ 0xFFFFFFE0) + 16;
                            v1164 = *(_WORD *)(a3 + 54) - v1163;
                            *(_WORD *)(a3 + 54) = v1164;
                            v1165 = ((v1154 - (v1155 << 16) + 1) << v1163) - 1;
                            *(_DWORD *)(a3 + 48) = v1165;
                            *(_WORD *)(a3 + 52) = v1162 << v1163;
                            v1166 = v1159 - 4088;
                            if ((v1164 & 0x8000) == 0)
                            {
LABEL_1249:
                              if (*(_BYTE *)(a3 + 56))
                              {
                                v1195 = v1153[2];
                                v1196 = (v1195 >> 4) + 4;
                                v1197 = *v1153;
                                if (v1158 < 1)
                                  v1198 = v1197 - (v1197 >> v1196);
                                else
                                  v1198 = v1197 + ((int)(0x8000 - v1197) >> v1196);
                                *v1153 = v1198;
                                if (v1195 >= 0x20)
                                  v1199 = v1195;
                                else
                                  v1199 = v1195 + 1;
                                v1153[2] = v1199;
                              }
                              *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFFCF | (16 * (v1166 & 3));
                              if (!v1166)
                                goto LABEL_436;
                              if (*v1150 >= 3u)
                              {
                                if (*(unsigned __int16 *)(a2 + 16 * v1148 + 10170) <= 0x27Fu)
                                  v1200 = 2 * (*(unsigned __int16 *)(a2 + 16 * v1148 + 10172) < 0x280u);
                                else
                                  v1200 = *(unsigned __int16 *)(a2 + 16 * v1148 + 10172) < 0x280u;
                                v1201 = (unsigned __int16 *)(v1396 + 6 * v1200 + 8174);
                                v1202 = od_ec_decode_cdf_q15(a3 + 16, v1201, 2);
                                if (*(_BYTE *)(a3 + 56))
                                {
                                  v1203 = v1201[2];
                                  v1204 = (v1203 >> 4) + 4;
                                  v1205 = *v1201;
                                  if (v1202 << 56 <= 0)
                                    v1206 = v1205 - (v1205 >> v1204);
                                  else
                                    v1206 = v1205 + ((int)(0x8000 - v1205) >> v1204);
                                  *v1201 = v1206;
                                  if (v1203 < 0x20)
                                    LOWORD(v1203) = v1203 + 1;
                                  v1201[2] = v1203;
                                }
                                *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFFCF | (16 * (_BYTE)v1202 + 16) & 0x30;
                                v96 = (unsigned __int8 *)(a1 + 15201);
                                v1147 = a3 + 16;
                                if ((_DWORD)v1202)
                                {
                                  v835 = *v836;
                                  goto LABEL_1271;
                                }
LABEL_436:
                                v512 = v13[2];
                                v513 = v512;
                                if (((v171 ^ ((v512 - 25) < 0xFFFFFFF8)) & 1) == 0)
                                {
                                  aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Prediction mode %d invalid with ref frame %d %d", v512, (char)v13[16], (char)v13[17]);
                                  v513 = v13[2];
                                }
                                v514 = v13 + 8;
                                if ((v171 & 1) != 0)
                                {
                                  v515 = (*(unsigned __int16 *)(v13 + 167) >> 4) & 3;
                                  if (v513 == 23)
                                  {
                                    v516 = v1407[0];
                                    v517 = HIDWORD(v1407[0]);
                                    v1401 = v1407[0];
                                    v518 = 23;
LABEL_609:
                                    if (((0x1280000uLL >> v518) & 1) != 0)
                                      HIDWORD(v1401) = *(_DWORD *)(a2
                                                                 + ((uint64_t)v169 << 6)
                                                                 + 8 * (unsigned __int16)v515
                                                                 + 8316);
LABEL_611:
                                    v521 = v96[493];
                                    v589 = v1394;
                                    if (v96[493])
                                      v589 = -1;
                                    v618 = v513 - 13;
                                    v588 = *(_QWORD *)(a2 + 10648);
                                    v619 = **(unsigned __int8 ***)(a2 + 7864);
                                    v520 = *v619;
                                    switch(v618)
                                    {
                                      case 0:
                                        *(_DWORD *)v1400 = v516;
                                        goto LABEL_629;
                                      case 1:
                                        *(_DWORD *)v1400 = v1406;
                                        goto LABEL_629;
                                      case 2:
                                        goto LABEL_443;
                                      case 3:
                                        goto LABEL_615;
                                      case 4:
                                        *(_DWORD *)v1400 = v516;
                                        *v1399 = v517;
                                        goto LABEL_629;
                                      case 5:
                                        v509.i64[0] = v1406;
                                        *(_QWORD *)v1400 = v1406;
                                        goto LABEL_629;
                                      case 6:
                                        v620 = (unsigned __int16 *)(v588 + 11912);
                                        *(_DWORD *)v1400 = v516;
                                        goto LABEL_623;
                                      case 7:
                                        read_mv(a3, v1400, &v1401, (unsigned __int16 *)(v588 + 11912), v589);
                                        v626 = HIDWORD(v1407[0]);
                                        goto LABEL_625;
                                      case 8:
                                        v620 = (unsigned __int16 *)(v588 + 11912);
                                        *(_DWORD *)v1400 = v1406;
LABEL_623:
                                        v621 = v589;
                                        v623 = a3;
                                        v624 = v13 + 12;
                                        v622 = (uint64_t *)((char *)&v1401 + 4);
                                        goto LABEL_628;
                                      case 9:
                                        read_mv(a3, v1400, &v1401, (unsigned __int16 *)(v588 + 11912), v589);
                                        v626 = HIDWORD(v1406);
LABEL_625:
                                        *v1399 = v626;
                                        goto LABEL_629;
                                      case 10:
                                        *((_DWORD *)v13 + 2) = gm_get_motion_vector(a1 + 39588 + 36 * (char)v13[16], *(unsigned __int8 *)(a1 + 15693), *v619, *(_DWORD *)(a2 + 4), *(_DWORD *)a2, v521);
                                        v514 = v13 + 8;
                                        *((_DWORD *)v13 + 3) = gm_get_motion_vector(a1 + 39588 + 36 * (char)v13[17], *(unsigned __int8 *)(a1 + 15693), v520, *(_DWORD *)(a2 + 4), *(_DWORD *)a2, *(unsigned __int8 *)(a1 + 15694));
                                        goto LABEL_629;
                                      case 11:
                                        v627 = (unsigned __int16 *)(v588 + 11912);
                                        v628 = v589;
                                        read_mv(a3, v1400, &v1401, (unsigned __int16 *)(v588 + 11912), v589);
                                        v623 = a3;
                                        v624 = v13 + 12;
                                        v622 = (uint64_t *)((char *)&v1401 + 4);
                                        v620 = v627;
                                        v621 = v628;
                                        goto LABEL_628;
                                      default:
                                        v625 = 0;
                                        v587 = v1395;
                                        v585 = v1398;
                                        goto LABEL_639;
                                    }
                                  }
                                  v551 = a2 + ((uint64_t)v169 << 6);
                                  v552 = *(_DWORD *)(v551 + 8312);
                                  v553 = *(_DWORD *)(v551 + 8316);
                                  v1407[0] = __PAIR64__(v553, v552);
                                  v554 = (int *)(v551 + 8312 + 8 * (v515 + 1));
                                  v556 = *v554;
                                  v555 = v554[1];
                                  v1406 = __PAIR64__(v555, v556);
                                  if (v96[493])
                                  {
                                    if ((_WORD)v552 != (((_WORD)v552 + (((__int16)v552 >> 28) & 7)) & 0xFFF8))
                                    {
                                      v557 = (__int16)(v552
                                                     - ((v552 + (((__int16)v552 >> 28) & 7)) & 0xFFF8));
                                      LOWORD(v1407[0]) = (v552 + (((__int16)v552 >> 28) & 7)) & 0xFFF8;
                                      if (v557 >= 0)
                                        LOWORD(v558) = v552
                                                     - ((v552 + (((__int16)v552 >> 28) & 7)) & 0xFFF8);
                                      else
                                        v558 = -v557;
                                      if ((unsigned __int16)v558 >= 5u)
                                      {
                                        if (v557 > 0)
                                          v559 = 8;
                                        else
                                          v559 = -8;
                                        LOWORD(v1407[0]) = v559
                                                         + ((v552 + (((__int16)v552 >> 28) & 7)) & 0xFFF8);
                                      }
                                    }
                                    if (SHIWORD(v552) % 8)
                                    {
                                      v560 = SHIWORD(v552) % 8;
                                      WORD1(v1407[0]) = HIWORD(v552) - v560;
                                      if (v560 >= 0)
                                        LOWORD(v561) = SHIWORD(v552) % 8;
                                      else
                                        v561 = -v560;
                                      if ((unsigned __int16)v561 >= 5u)
                                      {
                                        if (v560 > 0)
                                          v562 = 8;
                                        else
                                          v562 = -8;
                                        WORD1(v1407[0]) = v562 + HIWORD(v552) - v560;
                                      }
                                    }
                                    if ((_WORD)v553 != (((_WORD)v553 + (((__int16)v553 >> 28) & 7)) & 0xFFF8))
                                    {
                                      v563 = (__int16)(v553
                                                     - ((v553 + (((__int16)v553 >> 28) & 7)) & 0xFFF8));
                                      WORD2(v1407[0]) = (v553 + (((__int16)v553 >> 28) & 7)) & 0xFFF8;
                                      if (v563 >= 0)
                                        LOWORD(v564) = v553
                                                     - ((v553 + (((__int16)v553 >> 28) & 7)) & 0xFFF8);
                                      else
                                        v564 = -v563;
                                      if ((unsigned __int16)v564 >= 5u)
                                      {
                                        if (v563 > 0)
                                          v565 = 8;
                                        else
                                          v565 = -8;
                                        WORD2(v1407[0]) = v565
                                                        + ((v553 + (((__int16)v553 >> 28) & 7)) & 0xFFF8);
                                      }
                                    }
                                    if (SHIWORD(v553) % 8)
                                    {
                                      v566 = SHIWORD(v553) % 8;
                                      HIWORD(v1407[0]) = HIWORD(v553) - v566;
                                      if (v566 >= 0)
                                        LOWORD(v567) = SHIWORD(v553) % 8;
                                      else
                                        v567 = -v566;
                                      if ((unsigned __int16)v567 >= 5u)
                                      {
                                        if (v566 > 0)
                                          v568 = 8;
                                        else
                                          v568 = -8;
                                        HIWORD(v1407[0]) = v568 + HIWORD(v553) - v566;
                                      }
                                    }
                                    if ((_WORD)v556 != (((_WORD)v556 + (((__int16)v556 >> 28) & 7)) & 0xFFF8))
                                    {
                                      v569 = (__int16)(v556
                                                     - ((v556 + (((__int16)v556 >> 28) & 7)) & 0xFFF8));
                                      LOWORD(v1406) = (v556 + (((__int16)v556 >> 28) & 7)) & 0xFFF8;
                                      if (v569 >= 0)
                                        LOWORD(v570) = v556
                                                     - ((v556 + (((__int16)v556 >> 28) & 7)) & 0xFFF8);
                                      else
                                        v570 = -v569;
                                      if ((unsigned __int16)v570 >= 5u)
                                      {
                                        if (v569 > 0)
                                          v571 = 8;
                                        else
                                          v571 = -8;
                                        LOWORD(v1406) = v571
                                                      + ((v556 + (((__int16)v556 >> 28) & 7)) & 0xFFF8);
                                      }
                                    }
                                    if (SHIWORD(v556) % 8)
                                    {
                                      v572 = SHIWORD(v556) % 8;
                                      WORD1(v1406) = HIWORD(v556) - v572;
                                      if (v572 >= 0)
                                        LOWORD(v573) = SHIWORD(v556) % 8;
                                      else
                                        v573 = -v572;
                                      if ((unsigned __int16)v573 >= 5u)
                                      {
                                        if (v572 > 0)
                                          v574 = 8;
                                        else
                                          v574 = -8;
                                        WORD1(v1406) = v574 + HIWORD(v556) - v572;
                                      }
                                    }
                                    if ((_WORD)v555 != (((_WORD)v555 + (((__int16)v555 >> 28) & 7)) & 0xFFF8))
                                    {
                                      v575 = (__int16)(v555
                                                     - ((v555 + (((__int16)v555 >> 28) & 7)) & 0xFFF8));
                                      WORD2(v1406) = (v555 + (((__int16)v555 >> 28) & 7)) & 0xFFF8;
                                      if (v575 >= 0)
                                        LOWORD(v576) = v555
                                                     - ((v555 + (((__int16)v555 >> 28) & 7)) & 0xFFF8);
                                      else
                                        v576 = -v575;
                                      if ((unsigned __int16)v576 >= 5u)
                                      {
                                        if (v575 > 0)
                                          v577 = 8;
                                        else
                                          v577 = -8;
                                        WORD2(v1406) = v577
                                                     + ((v555 + (((__int16)v555 >> 28) & 7)) & 0xFFF8);
                                      }
                                    }
                                    v578 = HIWORD(v555);
                                    LOWORD(v555) = SHIWORD(v555) % 8;
                                    if (!(SHIWORD(v555) % 8))
                                      goto LABEL_605;
                                    v579 = (__int16)v555;
                                    v580 = v578 - v555;
                                    HIWORD(v1406) = v578 - v579;
                                    if (v579 >= 0)
                                      LOWORD(v581) = v579;
                                    else
                                      v581 = -v579;
                                    if ((unsigned __int16)v581 < 5u)
                                      goto LABEL_605;
                                    if (v579 > 0)
                                      v582 = 8;
                                    else
                                      v582 = -8;
                                    v583 = v582 + v580;
                                    goto LABEL_604;
                                  }
                                  if (v1394)
                                  {
LABEL_605:
                                    v516 = v1407[0];
                                    v517 = HIDWORD(v1407[0]);
                                    v1401 = v1407[0];
                                    if ((v513 - 21) < 2)
                                      LOWORD(v515) = v515 + 1;
                                    v518 = v513;
                                    if (((0x1510000uLL >> v513) & 1) != 0)
                                      LODWORD(v1401) = *(_DWORD *)(a2
                                                                 + ((uint64_t)v169 << 6)
                                                                 + 8 * (unsigned __int16)v515
                                                                 + 8312);
                                    goto LABEL_609;
                                  }
                                  if ((v552 & 1) != 0)
                                  {
                                    if ((__int16)v552 < 1)
                                      v611 = v552 + 1;
                                    else
                                      v611 = v552 - 1;
                                    LOWORD(v1407[0]) = v611;
                                    if ((v552 & 0x10000) == 0)
                                    {
LABEL_563:
                                      if ((v553 & 1) == 0)
                                        goto LABEL_564;
                                      goto LABEL_581;
                                    }
                                  }
                                  else if ((v552 & 0x10000) == 0)
                                  {
                                    goto LABEL_563;
                                  }
                                  if (v552 >> 16 < 1)
                                    v612 = HIWORD(v552) + 1;
                                  else
                                    v612 = HIWORD(v552) - 1;
                                  WORD1(v1407[0]) = v612;
                                  if ((v553 & 1) == 0)
                                  {
LABEL_564:
                                    if ((v553 & 0x10000) == 0)
                                      goto LABEL_565;
                                    goto LABEL_585;
                                  }
LABEL_581:
                                  if ((__int16)v553 < 1)
                                    v613 = v553 + 1;
                                  else
                                    v613 = v553 - 1;
                                  WORD2(v1407[0]) = v613;
                                  if ((v553 & 0x10000) == 0)
                                  {
LABEL_565:
                                    if ((v556 & 1) == 0)
                                      goto LABEL_566;
                                    goto LABEL_589;
                                  }
LABEL_585:
                                  if (v553 >> 16 < 1)
                                    v614 = HIWORD(v553) + 1;
                                  else
                                    v614 = HIWORD(v553) - 1;
                                  HIWORD(v1407[0]) = v614;
                                  if ((v556 & 1) == 0)
                                  {
LABEL_566:
                                    if ((v556 & 0x10000) == 0)
                                      goto LABEL_567;
                                    goto LABEL_593;
                                  }
LABEL_589:
                                  if ((__int16)v556 < 1)
                                    v615 = v556 + 1;
                                  else
                                    v615 = v556 - 1;
                                  LOWORD(v1406) = v615;
                                  if ((v556 & 0x10000) == 0)
                                  {
LABEL_567:
                                    if ((v555 & 1) == 0)
                                      goto LABEL_568;
                                    goto LABEL_597;
                                  }
LABEL_593:
                                  if (v556 >> 16 < 1)
                                    v616 = HIWORD(v556) + 1;
                                  else
                                    v616 = HIWORD(v556) - 1;
                                  WORD1(v1406) = v616;
                                  if ((v555 & 1) == 0)
                                  {
LABEL_568:
                                    if ((v555 & 0x10000) == 0)
                                      goto LABEL_605;
                                    goto LABEL_601;
                                  }
LABEL_597:
                                  if ((__int16)v555 < 1)
                                    v617 = v555 + 1;
                                  else
                                    v617 = v555 - 1;
                                  WORD2(v1406) = v617;
                                  if ((v555 & 0x10000) == 0)
                                    goto LABEL_605;
LABEL_601:
                                  if (v555 >> 16 < 1)
                                    v583 = HIWORD(v555) + 1;
                                  else
                                    v583 = HIWORD(v555) - 1;
LABEL_604:
                                  HIWORD(v1406) = v583;
                                  goto LABEL_605;
                                }
                                if (v513 == 15)
                                {
                                  v1401 = v1407[0];
                                  v519 = v96;
                                  v520 = ***(unsigned __int8 ***)(a2 + 7864);
                                  v521 = v519[493];
LABEL_443:
                                  *((_DWORD *)v13 + 2) = gm_get_motion_vector(a1 + 36 * (char)v13[16] + 39588, *(unsigned __int8 *)(a1 + 15693), v520, *(_DWORD *)(a2 + 4), *(_DWORD *)a2, v521);
                                }
                                else
                                {
                                  av1_find_best_ref_mvs(v1394, (unsigned __int16 *)&v1405[(char)v13[16]], v1407, &v1406, v96[493]);
                                  v513 = v13[2];
                                  v584 = ((unint64_t)*(unsigned __int16 *)(v13 + 167) >> 4) & 3;
                                  v585 = v1398;
                                  if ((_DWORD)v584 && v513 == 14)
                                  {
                                    v586 = *(_DWORD *)(a2 + ((uint64_t)(char)v13[16] << 6) + 8 * v584 + 8320);
                                    LODWORD(v1406) = v586;
                                    v509.i64[0] = v1407[0];
                                    v1401 = v1407[0];
                                    *(_DWORD *)v1400 = v586;
                                    v587 = v1395;
                                    if ((unsigned __int16)(v586 + 0x3FFF) > 0x7FFEu)
                                      goto LABEL_633;
                                    goto LABEL_630;
                                  }
                                  v516 = v1407[0];
                                  v517 = HIDWORD(v1407[0]);
                                  v1401 = v1407[0];
                                  if (v513 != 16)
                                    goto LABEL_611;
                                  if (*(unsigned __int8 *)(a2 + v169 + 15142) >= 2u)
                                    LODWORD(v1401) = *(_DWORD *)(a2
                                                               + ((uint64_t)v169 << 6)
                                                               + 8 * v584
                                                               + 8312);
                                  v588 = *(_QWORD *)(a2 + 10648);
                                  v589 = v1394;
                                  if (v96[493])
                                    v589 = -1;
LABEL_615:
                                  v620 = (unsigned __int16 *)(v588 + 11912);
                                  v621 = v589;
                                  v622 = &v1401;
                                  v623 = a3;
                                  v624 = v13 + 8;
LABEL_628:
                                  read_mv(v623, v624, v622, v620, v621);
                                }
LABEL_629:
                                v587 = v1395;
                                v585 = v1398;
                                if ((unsigned __int16)(*v514 + 0x3FFF) > 0x7FFEu)
                                  goto LABEL_633;
LABEL_630:
                                v629 = *((__int16 *)v13 + 5);
                                if (v629 >= -16383)
                                {
                                  v625 = v629 < 0x4000;
                                  if (!v171)
                                    goto LABEL_639;
LABEL_634:
                                  if (v625)
                                    v625 = (unsigned __int16)(*(_WORD *)v1399 + 0x3FFF) <= 0x7FFEu
                                        && (v630 = *((__int16 *)v13 + 7), v630 >= -16383)
                                        && v630 < 0x4000;
LABEL_639:
                                  *(_DWORD *)(a2 + 15056) |= !v625;
                                  v631 = *(_WORD *)(v13 + 167);
                                  *(_WORD *)(v13 + 167) = v631 & 0xFBFF;
                                  if (!*(_BYTE *)(*(_QWORD *)(v587 + 5688) + 62)
                                    || (v631 & 0x40) != 0
                                    || *v13 - 10 < 0xFFFFFFF9
                                    || v13[2] - 17 < 0xFFFFFFFC
                                    || (char)v13[16] < 1
                                    || *v1397 > 0)
                                  {
                                    goto LABEL_645;
                                  }
                                  v693 = size_group_lookup_2[v585];
                                  v694 = (unsigned __int16 *)(v1396 + 6 * size_group_lookup_2[v585] + 9216);
                                  v695 = od_ec_decode_cdf_q15(a3 + 16, v694, 2);
                                  if (*(_BYTE *)(a3 + 56))
                                  {
                                    v696 = v694[2];
                                    v697 = (v696 >> 4) + 4;
                                    v698 = *v694;
                                    if (v695 << 56 < 1)
                                      v699 = v698 - (v698 >> v697);
                                    else
                                      v699 = v698 + ((int)(0x8000 - v698) >> v697);
                                    *v694 = v699;
                                    if (v696 < 0x20)
                                      LOWORD(v696) = v696 + 1;
                                    v694[2] = v696;
                                  }
                                  if (!(_DWORD)v695)
                                    goto LABEL_645;
                                  v1092 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 10 * v693 + 9372);
                                  v1093 = od_ec_decode_cdf_q15(a3 + 16, v1092, 4);
                                  if (!*(_BYTE *)(a3 + 56))
                                  {
LABEL_1326:
                                    v13[17] = 0;
                                    v13[64] = v1093;
                                    *((_WORD *)v13 + 44) = 0;
                                    v13[91] = 0;
                                    if ((int)av1_wedge_params_lookup[8 * v585] >= 1)
                                    {
                                      v1267 = (unsigned __int16 *)(v1396 + 6 * v585 + 9240);
                                      v1268 = od_ec_decode_cdf_q15(a3 + 16, v1267, 2);
                                      if (*(_BYTE *)(a3 + 56))
                                      {
                                        v1269 = *(unsigned __int16 *)(v1396 + 6 * v585 + 9244);
                                        v1270 = (v1269 >> 4) + 4;
                                        v1271 = *v1267;
                                        if (v1268 << 56 < 1)
                                          v1272 = v1271 - (v1271 >> v1270);
                                        else
                                          v1272 = v1271 + ((int)(0x8000 - v1271) >> v1270);
                                        *v1267 = v1272;
                                        if (v1269 < 0x20)
                                          LOWORD(v1269) = v1269 + 1;
                                        *(_WORD *)(v1396 + 6 * v585 + 9244) = v1269;
                                      }
                                      *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFBFF | ((v1268 & 1) << 10);
                                      if ((v1268 & 1) != 0)
                                      {
                                        v1344 = (unsigned __int16 *)(v1396 + 34 * v585 + 8468);
                                        v1345 = od_ec_decode_cdf_q15(a3 + 16, v1344, 16);
                                        if (!*(_BYTE *)(a3 + 56))
                                        {
LABEL_1507:
                                          v13[65] = v1345;
                                          goto LABEL_645;
                                        }
                                        v1346 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8500);
                                        v1347 = (v1346 >> 4) + 5;
                                        v1348 = v1345 << 56;
                                        v1349 = *v1344;
                                        if (v1345 << 56 <= 0)
                                        {
                                          *v1344 = v1349 - (v1349 >> v1347);
                                          v1350 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8470);
                                        }
                                        else
                                        {
                                          *v1344 = v1349 + ((int)(0x8000 - v1349) >> v1347);
                                          v1350 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8470);
                                          if (v1348 > 0x100000000000000)
                                          {
                                            *(_WORD *)(v1396 + 34 * v585 + 8470) = v1350
                                                                                                 + ((int)(0x8000 - v1350) >> v1347);
                                            v1351 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8472);
                                            if (v1348 > 0x200000000000000)
                                            {
                                              *(_WORD *)(v1396 + 34 * v585 + 8472) = v1351 + ((int)(0x8000 - v1351) >> v1347);
                                              v1352 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8474);
                                              if (v1348 > 0x300000000000000)
                                              {
                                                *(_WORD *)(v1396 + 34 * v585 + 8474) = v1352 + ((int)(0x8000 - v1352) >> v1347);
                                                v1353 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8476);
                                                if (v1348 > 0x400000000000000)
                                                {
                                                  *(_WORD *)(v1396 + 34 * v585 + 8476) = v1353 + ((int)(0x8000 - v1353) >> v1347);
                                                  v1354 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8478);
                                                  if (v1348 > 0x500000000000000)
                                                  {
                                                    *(_WORD *)(v1396 + 34 * v585 + 8478) = v1354 + ((int)(0x8000 - v1354) >> v1347);
                                                    v1355 = *(unsigned __int16 *)(v1396
                                                                                + 34 * v585
                                                                                + 8480);
                                                    if (v1348 > 0x600000000000000)
                                                    {
                                                      *(_WORD *)(v1396 + 34 * v585 + 8480) = v1355 + ((int)(0x8000 - v1355) >> v1347);
                                                      v1356 = *(unsigned __int16 *)(v1396
                                                                                  + 34 * v585
                                                                                  + 8482);
                                                      if (v1348 > 0x700000000000000)
                                                      {
                                                        *(_WORD *)(v1396 + 34 * v585 + 8482) = v1356 + ((int)(0x8000 - v1356) >> v1347);
                                                        v1357 = *(unsigned __int16 *)(v1396
                                                                                    + 34 * v585
                                                                                    + 8484);
                                                        if (v1348 > 0x800000000000000)
                                                        {
                                                          *(_WORD *)(v1396 + 34 * v585 + 8484) = v1357 + ((int)(0x8000 - v1357) >> v1347);
                                                          v1358 = *(unsigned __int16 *)(v1396
                                                                                      + 34 * v585
                                                                                      + 8486);
                                                          if (v1348 > 0x900000000000000)
                                                          {
                                                            *(_WORD *)(v1396 + 34 * v585 + 8486) = v1358 + ((int)(0x8000 - v1358) >> v1347);
                                                            v1359 = *(unsigned __int16 *)(v1396
                                                                                        + 34 * v585
                                                                                        + 8488);
                                                            if (v1348 > 0xA00000000000000)
                                                            {
                                                              *(_WORD *)(v1396 + 34 * v585 + 8488) = v1359 + ((int)(0x8000 - v1359) >> v1347);
                                                              v1360 = *(unsigned __int16 *)(v1396
                                                                                          + 34 * v585
                                                                                          + 8490);
                                                              if (v1348 > 0xB00000000000000)
                                                              {
                                                                *(_WORD *)(v1396 + 34 * v585 + 8490) = v1360 + ((int)(0x8000 - v1360) >> v1347);
                                                                v1361 = *(unsigned __int16 *)(v1396
                                                                                            + 34 * v585
                                                                                            + 8492);
                                                                if (v1348 > 0xC00000000000000)
                                                                {
                                                                  *(_WORD *)(v1396 + 34 * v585 + 8492) = v1361 + ((int)(0x8000 - v1361) >> v1347);
                                                                  v1362 = *(unsigned __int16 *)(v1396
                                                                                              + 34
                                                                                              * v585
                                                                                              + 8494);
                                                                  if (v1348 > 0xD00000000000000)
                                                                  {
                                                                    *(_WORD *)(v1396 + 34 * v585 + 8494) = v1362 + ((int)(0x8000 - v1362) >> v1347);
                                                                    v1363 = *(unsigned __int16 *)(v1396
                                                                                                + 34
                                                                                                * v585
                                                                                                + 8496);
                                                                    if (v1348 > 0xE00000000000000)
                                                                    {
                                                                      v1364 = v1363 + ((int)(0x8000 - v1363) >> v1347);
                                                                      v585 = v1398;
LABEL_1504:
                                                                      v1344[14] = v1364;
                                                                      if (v1346 < 0x20)
                                                                        LOWORD(v1346) = v1346 + 1;
                                                                      v1344[16] = v1346;
                                                                      goto LABEL_1507;
                                                                    }
                                                                    v585 = v1398;
LABEL_1503:
                                                                    v1364 = v1363 - (v1363 >> v1347);
                                                                    goto LABEL_1504;
                                                                  }
                                                                  v585 = v1398;
LABEL_1502:
                                                                  v1344[13] = v1362 - (v1362 >> v1347);
                                                                  v1363 = v1344[14];
                                                                  goto LABEL_1503;
                                                                }
                                                                v585 = v1398;
LABEL_1501:
                                                                v1344[12] = v1361 - (v1361 >> v1347);
                                                                v1362 = v1344[13];
                                                                goto LABEL_1502;
                                                              }
                                                              v585 = v1398;
LABEL_1500:
                                                              v1344[11] = v1360 - (v1360 >> v1347);
                                                              v1361 = v1344[12];
                                                              goto LABEL_1501;
                                                            }
                                                            v585 = v1398;
LABEL_1499:
                                                            v1344[10] = v1359 - (v1359 >> v1347);
                                                            v1360 = v1344[11];
                                                            goto LABEL_1500;
                                                          }
                                                          v585 = v1398;
LABEL_1498:
                                                          v1344[9] = v1358 - (v1358 >> v1347);
                                                          v1359 = v1344[10];
                                                          goto LABEL_1499;
                                                        }
                                                        v585 = v1398;
LABEL_1497:
                                                        v1344[8] = v1357 - (v1357 >> v1347);
                                                        v1358 = v1344[9];
                                                        goto LABEL_1498;
                                                      }
                                                      v585 = v1398;
LABEL_1496:
                                                      v1344[7] = v1356 - (v1356 >> v1347);
                                                      v1357 = v1344[8];
                                                      goto LABEL_1497;
                                                    }
                                                    v585 = v1398;
LABEL_1495:
                                                    v1344[6] = v1355 - (v1355 >> v1347);
                                                    v1356 = v1344[7];
                                                    goto LABEL_1496;
                                                  }
                                                  v585 = v1398;
LABEL_1494:
                                                  v1344[5] = v1354 - (v1354 >> v1347);
                                                  v1355 = v1344[6];
                                                  goto LABEL_1495;
                                                }
LABEL_1493:
                                                *(_WORD *)(v1396 + 34 * v585 + 8476) = v1353 - (v1353 >> v1347);
                                                v1354 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8478);
                                                goto LABEL_1494;
                                              }
LABEL_1492:
                                              *(_WORD *)(v1396 + 34 * v585 + 8474) = v1352 - (v1352 >> v1347);
                                              v1353 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8476);
                                              goto LABEL_1493;
                                            }
LABEL_1491:
                                            *(_WORD *)(v1396 + 34 * v585 + 8472) = v1351
                                                                                                 - (v1351 >> v1347);
                                            v1352 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8474);
                                            goto LABEL_1492;
                                          }
                                        }
                                        *(_WORD *)(v1396 + 34 * v585 + 8470) = v1350 - (v1350 >> v1347);
                                        v1351 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8472);
                                        goto LABEL_1491;
                                      }
                                    }
LABEL_645:
                                    v632 = v13[16];
                                    if ((v632 - 1) > 7
                                      || (v633 = *(_DWORD *)(a1 + 15200 + 4 * (v632 - 1) + 240),
                                          v633 == -1))
                                    {
                                      v634 = v1397;
                                      *(_QWORD *)(a2 + 7944) = 0;
                                      if (*v1397 <= 0)
                                        goto LABEL_648;
                                    }
                                    else
                                    {
                                      v634 = v1397;
                                      *(_QWORD *)(a2 + 7944) = a1 + 15200 + 16 * v633 + 288;
                                      if (*v1397 <= 0)
                                      {
LABEL_648:
                                        v635 = 0;
                                        goto LABEL_655;
                                      }
                                    }
                                    v636 = v13[17];
                                    if ((v636 - 1) > 7
                                      || (v637 = *(_DWORD *)(a1 + 15200 + 4 * (v636 - 1) + 240),
                                          v637 == -1))
                                    {
                                      v638 = 0;
                                    }
                                    else
                                    {
                                      v638 = a1 + 15200 + 16 * v637 + 288;
                                    }
                                    *(_QWORD *)(a2 + 7952) = v638;
                                    v635 = (char)*v634 > 0;
LABEL_655:
                                    v13[24] = 0;
                                    v639 = *v13;
                                    v640 = block_size_wide_9[v639];
                                    v641 = block_size_high_8[v639];
                                    if (v640 < v641)
                                      v641 = v640;
                                    if (v641 >= 8
                                      && ((v635 | ((*(_WORD *)(v13 + 167) & 0x40) >> 6)) & 1) == 0)
                                    {
                                      v13[25] = av1_findSamples(v12, (int *)a2, (int *)v1403, v1402, *(int8x8_t *)v509.i8);
                                    }
                                    result = av1_count_overlappable_neighbors(v12, a2);
                                    if (!*v634)
                                    {
                                      v662 = 0;
LABEL_695:
                                      v666 = *(_WORD *)(v13 + 167);
                                      v667 = v666 & 0xFCFF | 0x200;
                                      *(_WORD *)(v13 + 167) = v667;
                                      v13[83] = 0;
                                      if (v662 < 1 || (v666 & 0x40) != 0)
                                      {
LABEL_967:
                                        v738 = *(unsigned __int8 *)(a1 + 15705);
                                        v739 = *(unsigned __int8 ***)(a2 + 7864);
                                        v740 = *v739;
                                        if ((*(_WORD *)(*v739 + 167) & 0x40) != 0)
                                          goto LABEL_969;
                                        goto LABEL_968;
                                      }
                                      v668 = block_size_high_8[v585];
                                      if (block_size_wide_9[v585] < v668)
                                        v668 = block_size_wide_9[v585];
                                      v669 = *(_QWORD *)(v587 + 5688);
                                      if (v668 < 8)
                                        goto LABEL_770;
                                      if (!*(_BYTE *)(v669 + 63))
                                      {
LABEL_768:
                                        if ((v667 & 0x100) == 0)
                                        {
                                          v669 = *(_QWORD *)(v587 + 5688);
LABEL_770:
                                          if (*(_DWORD *)(v669 + 48))
                                          {
                                            v725 = **(_QWORD **)(a2 + 7864);
                                            v726 = *(unsigned __int8 *)(v725 + 16);
                                            if ((v726 - 1) > 7
                                              || (v727 = *(int *)(a1 + 4 * (v726 - 1) + 15440),
                                                  (_DWORD)v727 == -1))
                                            {
                                              v728 = 0;
                                              v729 = *(unsigned __int8 *)(v725 + 17);
                                              if ((v729 - 1) > 7)
                                                goto LABEL_779;
                                            }
                                            else
                                            {
                                              v728 = *(_QWORD *)(a1 + 8 * v727 + 15616);
                                              v729 = *(unsigned __int8 *)(v725 + 17);
                                              if ((v729 - 1) > 7)
                                                goto LABEL_779;
                                            }
                                            v730 = *(int *)(a1 + 4 * (v729 - 1) + 15440);
                                            if ((_DWORD)v730 != -1)
                                            {
                                              v731 = *(_QWORD *)(a1 + 8 * v730 + 15616);
                                              if (!v728)
                                              {
LABEL_781:
                                                if (v731)
                                                  LODWORD(v731) = *(_DWORD *)(v731 + 4);
                                                if (*(_DWORD *)(v669 + 40))
                                                {
                                                  v732 = *(_DWORD *)(*(_QWORD *)(a1 + 15432) + 4);
                                                  v733 = 1 << *(_DWORD *)(v669 + 44);
                                                  v734 = ((v733 - 1) & (v731 - v732)) - (v733 & (v731 - v732));
                                                  v735 = ((v733 - 1) & (v732 - v728)) - (v733 & (v732 - v728));
                                                  v736 = *(_QWORD *)(a2 + 7888);
                                                  v737 = *(_QWORD *)(a2 + 7880);
                                                  if (!v736)
                                                    goto LABEL_803;
                                                }
                                                else
                                                {
                                                  v734 = 0;
                                                  v735 = 0;
                                                  v736 = *(_QWORD *)(a2 + 7888);
                                                  v737 = *(_QWORD *)(a2 + 7880);
                                                  if (!v736)
                                                    goto LABEL_803;
                                                }
                                                if (*(char *)(v736 + 17) < 1)
                                                {
                                                  LODWORD(v736) = *(unsigned __int8 *)(v736 + 16) == 7;
                                                  if (v737)
                                                  {
LABEL_804:
                                                    if (*(char *)(v737 + 17) < 1)
                                                      LODWORD(v762) = *(unsigned __int8 *)(v737 + 16) == 7;
                                                    else
                                                      v762 = ((unint64_t)*(unsigned __int16 *)(v737 + 167) >> 9) & 1;
LABEL_809:
                                                    v763 = 0;
                                                    if (v734 < 0)
                                                      v734 = -v734;
                                                    if (v735 < 0)
                                                      v735 = -v735;
                                                    v465 = v734 == v735;
                                                    v764 = 3;
                                                    if (!v465)
                                                      v764 = 0;
                                                    v765 = (unsigned __int16 *)(v1396
                                                                              + 6 * (v736 + v762 + v764)
                                                                              + 11780);
                                                    v766 = *(_DWORD *)(a3 + 48);
                                                    v767 = *(unsigned __int16 *)(a3 + 52);
                                                    v768 = v767 >> 8;
                                                    v769 = 8;
                                                    v770 = 0xFF00000000000000;
                                                    do
                                                    {
                                                      v771 = v767;
                                                      result = v768 * (v765[v763] >> 6);
                                                      v769 -= 4;
                                                      v767 = v769 + (result >> 1);
                                                      ++v763;
                                                      v770 += 0x100000000000000;
                                                    }
                                                    while (HIWORD(v766) < v767);
                                                    v772 = v771 - (result >> 1) - v769;
                                                    v773 = __clz(v772);
                                                    v774 = (v773 ^ 0xFFE0) + 16;
                                                    v775 = *(_WORD *)(a3 + 54) - v774;
                                                    *(_WORD *)(a3 + 54) = v775;
                                                    v776 = ((v766 - (v767 << 16) + 1) << ((v773 ^ 0xE0) + 16)) - 1;
                                                    *(_DWORD *)(a3 + 48) = v776;
                                                    *(_WORD *)(a3 + 52) = v772 << v774;
                                                    v777 = v763 - 1;
                                                    if ((v775 & 0x8000) == 0)
                                                    {
LABEL_838:
                                                      if (*(_BYTE *)(a3 + 56))
                                                      {
                                                        v799 = v765[2];
                                                        v800 = (v799 >> 4) + 4;
                                                        v801 = *v765;
                                                        if (v770 < 1)
                                                          v802 = v801 - (v801 >> v800);
                                                        else
                                                          v802 = v801 + ((int)(0x8000 - v801) >> v800);
                                                        *v765 = v802;
                                                        if (v799 >= 0x20)
                                                          v803 = v799;
                                                        else
                                                          v803 = v799 + 1;
                                                        v765[2] = v803;
                                                      }
                                                      *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFDFF | ((v777 & 1) << 9);
                                                      v13[83] = (v777 & 1) == 0;
                                                      v738 = *(unsigned __int8 *)(a1 + 15705);
                                                      v739 = *(unsigned __int8 ***)(a2 + 7864);
                                                      v740 = *v739;
                                                      if ((*(_WORD *)(*v739 + 167) & 0x40) != 0)
                                                        goto LABEL_969;
                                                      goto LABEL_968;
                                                    }
                                                    v778 = *(_QWORD *)(a3 + 32);
                                                    v779 = *(int8x16_t **)(a3 + 40);
                                                    if ((unint64_t)v779 >= v778)
                                                    {
                                                      v783 = *(unsigned __int8 **)(a3 + 40);
                                                      goto LABEL_836;
                                                    }
                                                    v780 = 8 - v775;
                                                    if (v780 >= 7)
                                                      v781 = 7;
                                                    else
                                                      v781 = 8 - v775;
                                                    v782 = ((v781 ^ 0xFu) - v775) >> 3;
                                                    if (v782 >= ~(unint64_t)v779 + v778)
                                                      v782 = ~(unint64_t)v779 + v778;
                                                    if (v782 >= 0xF)
                                                    {
                                                      v784 = v782 + 1;
                                                      result = (v782 + 1) & 0x3FFFFFF0;
                                                      v783 = &v779->u8[result];
                                                      v785 = 0uLL;
                                                      v643 = (int16x8_t)(unsigned __int16)v775;
                                                      v786 = (int8x16_t)v776;
                                                      v787 = vdupq_n_s32(v780);
                                                      v788 = (uint32x4_t)vaddq_s32(v787, (int32x4_t)xmmword_208F3A6C0);
                                                      v646 = (uint32x4_t)vaddq_s32(v787, (int32x4_t)xmmword_208F3A6D0);
                                                      v647 = (uint32x4_t)vaddq_s32(v787, (int32x4_t)xmmword_208F3A6A0);
                                                      v648 = (uint32x4_t)vaddq_s32(v787, (int32x4_t)xmmword_208F3A6B0);
                                                      v649 = (int32x4_t)xmmword_208F04F30;
                                                      v789.i64[0] = 0x8000800080008;
                                                      v789.i64[1] = 0x8000800080008;
                                                      v790.i64[0] = 0x7F0000007FLL;
                                                      v790.i64[1] = 0x7F0000007FLL;
                                                      v791 = result;
                                                      v792 = 0uLL;
                                                      v793 = 0uLL;
                                                      v794 = 0uLL;
                                                      do
                                                      {
                                                        v795 = *v779++;
                                                        v793 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v795, (int8x16_t)xmmword_208F04F30), v646), v793);
                                                        v792 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v795, (int8x16_t)xmmword_208F04F40), v647), v792);
                                                        v786 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v795, (int8x16_t)xmmword_208F04F50), v648), v786);
                                                        v794 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v795, (int8x16_t)xmmword_208F04F20), v788), v794);
                                                        v643 = vaddq_s16(v643, v789);
                                                        v785 = vaddq_s16(v785, v789);
                                                        v648 = (uint32x4_t)vaddq_s32((int32x4_t)v648, v790);
                                                        v647 = (uint32x4_t)vaddq_s32((int32x4_t)v647, v790);
                                                        v646 = (uint32x4_t)vaddq_s32((int32x4_t)v646, v790);
                                                        v788 = (uint32x4_t)vaddq_s32((int32x4_t)v788, v790);
                                                        v791 -= 16;
                                                      }
                                                      while (v791);
                                                      v796 = (unint64_t)v779 < v778;
                                                      v797 = veorq_s8(veorq_s8(v786, v793), veorq_s8(v792, v794));
                                                      v645 = (int8x8_t)vextq_s8(v797, v797, 8uLL).u64[0];
                                                      v644 = veor_s8(*(int8x8_t *)v797.i8, v645);
                                                      v776 = v644.i32[0] ^ v644.i32[1];
                                                      v642 = vaddq_s16(v643, v785);
                                                      v642.i16[0] = vaddvq_s16(v642);
                                                      v775 = v642.i16[0];
                                                      if (v784 == result)
                                                        goto LABEL_835;
                                                      v780 -= 8 * result;
                                                    }
                                                    else
                                                    {
                                                      v783 = *(unsigned __int8 **)(a3 + 40);
                                                    }
                                                    do
                                                    {
                                                      v798 = *v783++;
                                                      v776 ^= v798 << v780;
                                                      v775 += 8;
                                                      v796 = (unint64_t)v783 < v778;
                                                      v89 = v780 >= 8;
                                                      v780 -= 8;
                                                    }
                                                    while (v89 && (unint64_t)v783 < v778);
LABEL_835:
                                                    if (v796)
                                                    {
LABEL_837:
                                                      *(_DWORD *)(a3 + 48) = v776;
                                                      *(_WORD *)(a3 + 54) = v775;
                                                      *(_QWORD *)(a3 + 40) = v783;
                                                      goto LABEL_838;
                                                    }
LABEL_836:
                                                    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v775 + 0x4000;
                                                    v775 = 0x4000;
                                                    goto LABEL_837;
                                                  }
LABEL_807:
                                                  LODWORD(v762) = 0;
                                                  goto LABEL_809;
                                                }
                                                v736 = ((unint64_t)*(unsigned __int16 *)(v736 + 167) >> 9) & 1;
LABEL_803:
                                                if (v737)
                                                  goto LABEL_804;
                                                goto LABEL_807;
                                              }
LABEL_780:
                                              LODWORD(v728) = *(_DWORD *)(v728 + 4);
                                              goto LABEL_781;
                                            }
LABEL_779:
                                            v731 = 0;
                                            if (!v728)
                                              goto LABEL_781;
                                            goto LABEL_780;
                                          }
                                          *(_WORD *)(v13 + 167) = v667 | 0x200;
                                          v13[83] = 0;
                                          v738 = *(unsigned __int8 *)(a1 + 15705);
                                          v739 = *(unsigned __int8 ***)(a2 + 7864);
                                          v740 = *v739;
                                          if ((*(_WORD *)(*v739 + 167) & 0x40) != 0)
                                            goto LABEL_969;
LABEL_968:
                                          if (v740[24] == 2)
                                            goto LABEL_969;
                                          v971 = *(unsigned __int8 *)(*(_QWORD *)(v587 + 5688) + 64);
                                          v972 = *(_QWORD *)(a2 + 10648);
                                          v973 = v740[2];
                                          if (v973 == 23 || v973 == 15)
                                          {
                                            v974 = *v740;
                                            v975 = mi_size_wide_8[v974];
                                            v976 = mi_size_high_7[v974];
                                            if (v975 < v976)
                                              v976 = v975;
                                            if (v976 >= 2)
                                            {
                                              v977 = (char)v740[17];
                                              v978 = *(_QWORD *)(a2 + 10744);
                                              v979 = *(unsigned __int8 *)(v978 + 36 * (char)v740[16] + 32);
                                              if (v977 >= 1 && v979 != 1)
                                              {
                                                if (*(_BYTE *)(v978 + 36 * v740[17] + 32) == 1)
                                                  goto LABEL_1017;
LABEL_969:
                                                if (v738 == 4)
                                                  v738 = 0;
LABEL_971:
                                                *((_DWORD *)v13 + 5) = v738 | (v738 << 16);
                                                if (v13[24] != 2)
                                                  goto LABEL_1007;
                                                goto LABEL_972;
                                              }
                                              if (v977 <= 0 && v979 != 1)
                                                goto LABEL_969;
                                            }
                                          }
LABEL_1017:
                                          if (v738 != 4)
                                            goto LABEL_971;
                                          v983 = (char)v740[17] > 0;
                                          v984 = v740[16];
                                          v985 = *(unsigned __int8 *)(a2 + 7873);
                                          if (*(_BYTE *)(a2 + 7873)
                                            && ((v986 = *(v739 - 1), v986[16] == v984) || v986[17] == v984))
                                          {
                                            v987 = v986[20];
                                          }
                                          else
                                          {
                                            v987 = 3;
                                          }
                                          v988 = 4 * v983;
                                          v989 = *v1393;
                                          if (*v1393
                                            && ((v990 = v739[-*(int *)(a2 + 8)], v990[16] == v984) || v990[17] == v984))
                                          {
                                            v991 = v990[20];
                                          }
                                          else
                                          {
                                            v991 = 3;
                                          }
                                          v992 = 0;
                                          v993 = v988 | 3;
                                          v994 = v987 + v988;
                                          if (v991 == 3)
                                            v993 = v987 + v988;
                                          v995 = v991 + v988;
                                          if (v987 != 3)
                                            v995 = v993;
                                          if (v987 == v991)
                                            v996 = v994;
                                          else
                                            v996 = v995;
                                          v997 = (unsigned __int16 *)(v972 + 8 * v996 + 14058);
                                          v998 = *(_DWORD *)(a3 + 48);
                                          v999 = *(unsigned __int16 *)(a3 + 52);
                                          v1000 = v999 >> 8;
                                          v1001 = 12;
                                          v1002 = 0xFF00000000000000;
                                          do
                                          {
                                            v1003 = v999;
                                            v1004 = v1000 * (v997[v992] >> 6);
                                            v1001 -= 4;
                                            v999 = v1001 + (v1004 >> 1);
                                            ++v992;
                                            v1002 += 0x100000000000000;
                                          }
                                          while (HIWORD(v998) < v999);
                                          v1005 = v1003 - (v1004 >> 1) - v1001;
                                          v1006 = (__clz(v1005) ^ 0xFFFFFFE0) + 16;
                                          result = *(unsigned __int16 *)(a3 + 54) - v1006;
                                          *(_WORD *)(a3 + 54) -= v1006;
                                          v1007 = ((v998 - (v999 << 16) + 1) << v1006) - 1;
                                          *(_DWORD *)(a3 + 48) = v1007;
                                          *(_WORD *)(a3 + 52) = v1005 << v1006;
                                          v1008 = v992 - 1;
                                          if ((result & 0x8000) == 0)
                                          {
LABEL_1074:
                                            v1052 = *(unsigned __int8 *)(a3 + 56);
                                            if (v971)
                                            {
                                              if (!*(_BYTE *)(a3 + 56))
                                                goto LABEL_1088;
                                              v1053 = v997[3];
                                              v1054 = (v1053 >> 4) + 4;
                                              v1055 = *v997;
                                              if (v1002 <= 0)
                                              {
                                                *v997 = v1055 - (v1055 >> v1054);
                                                v1056 = v997[1];
                                              }
                                              else
                                              {
                                                *v997 = v1055 + ((int)(0x8000 - v1055) >> v1054);
                                                v1056 = v997[1];
                                                if ((unint64_t)v1002 > 0x100000000000000)
                                                {
                                                  v1057 = v1056 + ((int)(0x8000 - v1056) >> v1054);
LABEL_1085:
                                                  v997[1] = v1057;
                                                  if (v1053 < 0x20)
                                                    LOWORD(v1053) = v1053 + 1;
                                                  v997[3] = v1053;
LABEL_1088:
                                                  v1063 = (*v739)[16];
                                                  if ((char)(*v739)[17] <= 0)
                                                    v1064 = 8;
                                                  else
                                                    v1064 = 12;
                                                  if (v985
                                                    && ((v1065 = *(v739 - 1), v1065[16] == v1063) || v1065[17] == v1063))
                                                  {
                                                    v1066 = v1065[22];
                                                  }
                                                  else
                                                  {
                                                    v1066 = 3;
                                                  }
                                                  if (v989
                                                    && ((v1067 = v739[-*(int *)(a2 + 8)], v1067[16] == v1063)
                                                     || v1067[17] == v1063))
                                                  {
                                                    v1068 = v1067[22];
                                                  }
                                                  else
                                                  {
                                                    v1068 = 3;
                                                  }
                                                  v1069 = 0;
                                                  v1070 = v1064 | 3;
                                                  v1071 = v1066 + v1064;
                                                  if (v1068 == 3)
                                                    v1070 = v1066 + v1064;
                                                  v1072 = v1068 + v1064;
                                                  if (v1066 == 3)
                                                    v1070 = v1072;
                                                  if (v1066 == v1068)
                                                    v1073 = v1071;
                                                  else
                                                    v1073 = v1070;
                                                  v1074 = (unsigned __int16 *)(v972 + 8 * v1073 + 14058);
                                                  v1075 = *(unsigned __int16 *)(a3 + 52);
                                                  v1076 = v1075 >> 8;
                                                  v1077 = 12;
                                                  v1078 = 0xFF00000000000000;
                                                  do
                                                  {
                                                    v1079 = v1075;
                                                    v1080 = v1076 * (v1074[v1069] >> 6);
                                                    v1077 -= 4;
                                                    v1075 = v1077 + (v1080 >> 1);
                                                    ++v1069;
                                                    v1078 += 0x100000000000000;
                                                  }
                                                  while (HIWORD(v1007) < v1075);
                                                  v1081 = v1079 - (v1080 >> 1) - v1077;
                                                  result = (__clz(v1081) ^ 0xFFFFFFE0) + 16;
                                                  v1082 = *(_WORD *)(a3 + 54) - result;
                                                  *(_WORD *)(a3 + 54) = v1082;
                                                  v1083 = ((v1007 - (v1075 << 16) + 1) << result) - 1;
                                                  *(_DWORD *)(a3 + 48) = v1083;
                                                  *(_WORD *)(a3 + 52) = v1081 << result;
                                                  v1084 = v1069 - 1;
                                                  if ((v1082 & 0x8000) == 0)
                                                  {
LABEL_1166:
                                                    if (!v1052)
                                                      goto LABEL_1176;
                                                    v1117 = v1074[3];
                                                    v1118 = (v1117 >> 4) + 4;
                                                    v1119 = *v1074;
                                                    if (v1078 <= 0)
                                                    {
                                                      *v1074 = v1119 - (v1119 >> v1118);
                                                      v1120 = v1074[1];
                                                    }
                                                    else
                                                    {
                                                      *v1074 = v1119 + ((int)(0x8000 - v1119) >> v1118);
                                                      v1120 = v1074[1];
                                                      if ((unint64_t)v1078 > 0x100000000000000)
                                                      {
                                                        v1121 = v1120 + ((int)(0x8000 - v1120) >> v1118);
LABEL_1172:
                                                        v1074[1] = v1121;
                                                        if (v1117 >= 0x20)
                                                          v1122 = v1117;
                                                        else
                                                          v1122 = v1117 + 1;
                                                        v1074[3] = v1122;
LABEL_1176:
                                                        *((_WORD *)v13 + 11) = v1084;
                                                        *((_WORD *)v13 + 10) = v1008;
                                                        if (v13[24] != 2)
                                                          goto LABEL_1007;
LABEL_972:
                                                        v955 = *(_DWORD *)a2;
                                                        v956 = *(_DWORD *)(a2 + 4);
                                                        v957 = (int *)(v13 + 28);
                                                        *((_WORD *)v13 + 30) = 3;
                                                        v958 = v13[25];
                                                        if (v958 <= 1)
                                                        {
                                                          result = av1_find_projection(v958, v1403, v1402, v585, *((__int16 *)v13 + 4), *((__int16 *)v13 + 5), v957, v955, *(int8x8_t *)v642.i8, *(double *)v643.i64, *(double *)&v644, *(double *)&v645, *(double *)v646.i64, *(double *)v647.i64, (int32x4_t)v648, v649, v956);
                                                          if (!(_DWORD)result)
                                                            goto LABEL_1007;
                                                        }
                                                        else
                                                        {
                                                          v959 = 0;
                                                          v960 = 0;
                                                          v961 = block_size_wide_20[v585];
                                                          if (v961 <= block_size_high_18[v585])
                                                            v961 = block_size_high_18[v585];
                                                          if (v961 >= 112)
                                                            v962 = 112;
                                                          else
                                                            v962 = v961;
                                                          if (v961 >= 0x10)
                                                            v963 = v962;
                                                          else
                                                            v963 = 16;
                                                          v964 = *((__int16 *)v13 + 5);
                                                          v965 = *((__int16 *)v13 + 4);
                                                          v966 = v1402;
                                                          v967 = v1403;
                                                          do
                                                          {
                                                            v968 = v966->i32[0] - (v967->i32[0] + v964);
                                                            if (v968 < 0)
                                                              v968 = v967->i32[0] + v964 - v966->i32[0];
                                                            v969 = v966->i32[1] - (v967->i32[1] + v965);
                                                            if (v969 < 0)
                                                              v969 = v967->i32[1] + v965 - v966->i32[1];
                                                            if (v969 + v968 <= v963)
                                                            {
                                                              if (v959 != v960)
                                                              {
                                                                v970 = v960;
                                                                v1403[v970] = *v967;
                                                                v1402[v970] = *v966;
                                                              }
                                                              ++v960;
                                                            }
                                                            ++v967;
                                                            ++v966;
                                                            ++v959;
                                                          }
                                                          while (v958 != v959);
                                                          if ((v960 & 0xFE) != 0)
                                                            v980 = v960;
                                                          else
                                                            v980 = 1;
                                                          v13[25] = v980;
                                                          result = av1_find_projection(v980, v1403, v1402, v585, v965, v964, v957, v955, *(int8x8_t *)v642.i8, *(double *)v643.i64, *(double *)&v644, *(double *)&v645, *(double *)v646.i64, *(double *)v647.i64, (int32x4_t)v648, v649, v956);
                                                          if (!(_DWORD)result)
                                                            goto LABEL_1007;
                                                        }
                                                        v13[61] = 1;
LABEL_1007:
                                                        if (*(_BYTE *)(*(_QWORD *)(v587 + 5688) + 77))
                                                          goto LABEL_1008;
                                                        if (!*(_BYTE *)(a2 + 12))
                                                        {
                                                          v981 = 1;
                                                          goto LABEL_1009;
                                                        }
                                                        v982 = **(_QWORD **)(a2 + 7864);
                                                        if ((*(_WORD *)(v982 + 167) & 0x80) != 0
                                                          || *(char *)(v982 + 16) > 0)
                                                        {
LABEL_1008:
                                                          v981 = 0;
                                                        }
                                                        else
                                                        {
                                                          v981 = *(unsigned __int8 *)(v982 + 3) == 13;
                                                        }
LABEL_1009:
                                                        *(_DWORD *)(a2 + 15024) = v981;
                                                        return result;
                                                      }
                                                    }
                                                    v1121 = v1120 - (v1120 >> v1118);
                                                    goto LABEL_1172;
                                                  }
                                                  v1085 = v1082;
                                                  v1086 = *(_QWORD *)(a3 + 32);
                                                  v1087 = *(int8x16_t **)(a3 + 40);
                                                  if ((unint64_t)v1087 >= v1086)
                                                  {
                                                    v1091 = *(unsigned __int8 **)(a3 + 40);
                                                    goto LABEL_1164;
                                                  }
                                                  v1088 = 8 - v1085;
                                                  if ((8 - v1085) >= 7)
                                                    v1089 = 7;
                                                  else
                                                    v1089 = 8 - v1085;
                                                  v1090 = ((v1089 ^ 0xFu) - v1085) >> 3;
                                                  result = ~(unint64_t)v1087 + v1086;
                                                  if (v1090 >= result)
                                                    v1090 = ~(unint64_t)v1087 + v1086;
                                                  if (v1090 >= 0xF)
                                                  {
                                                    v1101 = v1090 + 1;
                                                    v1102 = (v1090 + 1) & 0x3FFFFFF0;
                                                    v1091 = &v1087->u8[v1102];
                                                    result = v1088 - 8 * (_DWORD)v1102;
                                                    v1103 = 0uLL;
                                                    v643 = (int16x8_t)(unsigned __int16)v1085;
                                                    v1104 = (int8x16_t)v1083;
                                                    v1105 = vdupq_n_s32(v1088);
                                                    v1106 = (uint32x4_t)vaddq_s32(v1105, (int32x4_t)xmmword_208F3A6C0);
                                                    v646 = (uint32x4_t)vaddq_s32(v1105, (int32x4_t)xmmword_208F3A6D0);
                                                    v647 = (uint32x4_t)vaddq_s32(v1105, (int32x4_t)xmmword_208F3A6A0);
                                                    v648 = (uint32x4_t)vaddq_s32(v1105, (int32x4_t)xmmword_208F3A6B0);
                                                    v649 = (int32x4_t)xmmword_208F04F30;
                                                    v1107.i64[0] = 0x8000800080008;
                                                    v1107.i64[1] = 0x8000800080008;
                                                    v1108.i64[0] = 0x7F0000007FLL;
                                                    v1108.i64[1] = 0x7F0000007FLL;
                                                    v1109 = v1102;
                                                    v1110 = 0uLL;
                                                    v1111 = 0uLL;
                                                    v1112 = 0uLL;
                                                    do
                                                    {
                                                      v1113 = *v1087++;
                                                      v1111 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1113, (int8x16_t)xmmword_208F04F30), v646), v1111);
                                                      v1110 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1113, (int8x16_t)xmmword_208F04F40), v647), v1110);
                                                      v1104 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1113, (int8x16_t)xmmword_208F04F50), v648), v1104);
                                                      v1112 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1113, (int8x16_t)xmmword_208F04F20), v1106), v1112);
                                                      v643 = vaddq_s16(v643, v1107);
                                                      v1103 = vaddq_s16(v1103, v1107);
                                                      v648 = (uint32x4_t)vaddq_s32((int32x4_t)v648, v1108);
                                                      v647 = (uint32x4_t)vaddq_s32((int32x4_t)v647, v1108);
                                                      v646 = (uint32x4_t)vaddq_s32((int32x4_t)v646, v1108);
                                                      v1106 = (uint32x4_t)vaddq_s32((int32x4_t)v1106, v1108);
                                                      v1109 -= 16;
                                                    }
                                                    while (v1109);
                                                    v1114 = (unint64_t)v1087 < v1086;
                                                    v1115 = veorq_s8(veorq_s8(v1104, v1111), veorq_s8(v1110, v1112));
                                                    v645 = (int8x8_t)vextq_s8(v1115, v1115, 8uLL).u64[0];
                                                    v644 = veor_s8(*(int8x8_t *)v1115.i8, v645);
                                                    v1083 = v644.i32[0] ^ v644.i32[1];
                                                    v642 = vaddq_s16(v643, v1103);
                                                    v642.i16[0] = vaddvq_s16(v642);
                                                    LOWORD(v1085) = v642.i16[0];
                                                    if (v1101 == v1102)
                                                      goto LABEL_1163;
                                                    v1088 -= 8 * v1102;
                                                  }
                                                  else
                                                  {
                                                    v1091 = *(unsigned __int8 **)(a3 + 40);
                                                  }
                                                  do
                                                  {
                                                    v1116 = *v1091++;
                                                    v1083 ^= v1116 << v1088;
                                                    LOWORD(v1085) = v1085 + 8;
                                                    v1114 = (unint64_t)v1091 < v1086;
                                                    v89 = v1088 >= 8;
                                                    v1088 -= 8;
                                                  }
                                                  while (v89 && (unint64_t)v1091 < v1086);
LABEL_1163:
                                                  if (v1114)
                                                  {
LABEL_1165:
                                                    *(_DWORD *)(a3 + 48) = v1083;
                                                    *(_WORD *)(a3 + 54) = v1085;
                                                    *(_QWORD *)(a3 + 40) = v1091;
                                                    goto LABEL_1166;
                                                  }
LABEL_1164:
                                                  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v1085 + 0x4000;
                                                  LOWORD(v1085) = 0x4000;
                                                  goto LABEL_1165;
                                                }
                                              }
                                              v1057 = v1056 - (v1056 >> v1054);
                                              goto LABEL_1085;
                                            }
                                            if (!*(_BYTE *)(a3 + 56))
                                            {
LABEL_1125:
                                              v1084 = v1008;
                                              goto LABEL_1176;
                                            }
                                            v1058 = v997[3];
                                            v1059 = (v1058 >> 4) + 4;
                                            v1060 = *v997;
                                            if (v1002 <= 0)
                                            {
                                              *v997 = v1060 - (v1060 >> v1059);
                                              v1061 = v997[1];
                                            }
                                            else
                                            {
                                              *v997 = v1060 + ((int)(0x8000 - v1060) >> v1059);
                                              v1061 = v997[1];
                                              if ((unint64_t)v1002 > 0x100000000000000)
                                              {
                                                v1062 = v1061 + ((int)(0x8000 - v1061) >> v1059);
LABEL_1122:
                                                v997[1] = v1062;
                                                if (v1058 < 0x20)
                                                  LOWORD(v1058) = v1058 + 1;
                                                v997[3] = v1058;
                                                goto LABEL_1125;
                                              }
                                            }
                                            v1062 = v1061 - (v1061 >> v1059);
                                            goto LABEL_1122;
                                          }
                                          v1009 = (__int16)result;
                                          result = *(_QWORD *)(a3 + 32);
                                          v1010 = *(int8x16_t **)(a3 + 40);
                                          if ((unint64_t)v1010 >= result)
                                          {
                                            v1014 = *(unsigned __int8 **)(a3 + 40);
                                            goto LABEL_1072;
                                          }
                                          v1011 = 8 - v1009;
                                          if ((8 - v1009) >= 7)
                                            v1012 = 7;
                                          else
                                            v1012 = 8 - v1009;
                                          v1013 = ((v1012 ^ 0xFu) - v1009) >> 3;
                                          if (v1013 >= ~(unint64_t)v1010 + result)
                                            v1013 = ~(unint64_t)v1010 + result;
                                          if (v1013 >= 0xF)
                                          {
                                            v1036 = v1013 + 1;
                                            v1037 = (v1013 + 1) & 0x3FFFFFF0;
                                            v1014 = &v1010->u8[v1037];
                                            v1038 = 0uLL;
                                            v643 = (int16x8_t)(unsigned __int16)v1009;
                                            v1039 = (int8x16_t)v1007;
                                            v1040 = vdupq_n_s32(v1011);
                                            v1041 = (uint32x4_t)vaddq_s32(v1040, (int32x4_t)xmmword_208F3A6C0);
                                            v646 = (uint32x4_t)vaddq_s32(v1040, (int32x4_t)xmmword_208F3A6D0);
                                            v647 = (uint32x4_t)vaddq_s32(v1040, (int32x4_t)xmmword_208F3A6A0);
                                            v648 = (uint32x4_t)vaddq_s32(v1040, (int32x4_t)xmmword_208F3A6B0);
                                            v649 = (int32x4_t)xmmword_208F04F30;
                                            v1042.i64[0] = 0x8000800080008;
                                            v1042.i64[1] = 0x8000800080008;
                                            v1043.i64[0] = 0x7F0000007FLL;
                                            v1043.i64[1] = 0x7F0000007FLL;
                                            v1044 = v1037;
                                            v1045 = 0uLL;
                                            v1046 = 0uLL;
                                            v1047 = 0uLL;
                                            do
                                            {
                                              v1048 = *v1010++;
                                              v1046 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1048, (int8x16_t)xmmword_208F04F30), v646), v1046);
                                              v1045 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1048, (int8x16_t)xmmword_208F04F40), v647), v1045);
                                              v1039 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1048, (int8x16_t)xmmword_208F04F50), v648), v1039);
                                              v1047 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1048, (int8x16_t)xmmword_208F04F20), v1041), v1047);
                                              v643 = vaddq_s16(v643, v1042);
                                              v1038 = vaddq_s16(v1038, v1042);
                                              v648 = (uint32x4_t)vaddq_s32((int32x4_t)v648, v1043);
                                              v647 = (uint32x4_t)vaddq_s32((int32x4_t)v647, v1043);
                                              v646 = (uint32x4_t)vaddq_s32((int32x4_t)v646, v1043);
                                              v1041 = (uint32x4_t)vaddq_s32((int32x4_t)v1041, v1043);
                                              v1044 -= 16;
                                            }
                                            while (v1044);
                                            v1049 = (unint64_t)v1010 < result;
                                            v1050 = veorq_s8(veorq_s8(v1039, v1046), veorq_s8(v1045, v1047));
                                            v645 = (int8x8_t)vextq_s8(v1050, v1050, 8uLL).u64[0];
                                            v644 = veor_s8(*(int8x8_t *)v1050.i8, v645);
                                            v1007 = v644.i32[0] ^ v644.i32[1];
                                            v642 = vaddq_s16(v643, v1038);
                                            v642.i16[0] = vaddvq_s16(v642);
                                            LOWORD(v1009) = v642.i16[0];
                                            if (v1036 == v1037)
                                              goto LABEL_1071;
                                            v1011 -= 8 * v1037;
                                          }
                                          else
                                          {
                                            v1014 = *(unsigned __int8 **)(a3 + 40);
                                          }
                                          do
                                          {
                                            v1051 = *v1014++;
                                            v1007 ^= v1051 << v1011;
                                            LOWORD(v1009) = v1009 + 8;
                                            v1049 = (unint64_t)v1014 < result;
                                            v89 = v1011 >= 8;
                                            v1011 -= 8;
                                          }
                                          while (v89 && (unint64_t)v1014 < result);
LABEL_1071:
                                          if (v1049)
                                          {
LABEL_1073:
                                            *(_DWORD *)(a3 + 48) = v1007;
                                            *(_WORD *)(a3 + 54) = v1009;
                                            *(_QWORD *)(a3 + 40) = v1014;
                                            goto LABEL_1074;
                                          }
LABEL_1072:
                                          result = (*(_DWORD *)(a3 + 24) - (__int16)v1009 + 0x4000);
                                          *(_DWORD *)(a3 + 24) = result;
                                          LOWORD(v1009) = 0x4000;
                                          goto LABEL_1073;
                                        }
                                        if ((int)av1_wedge_params_lookup[8 * v585] < 1)
                                        {
                                          v13[83] = 3;
LABEL_966:
                                          result = od_ec_decode_BOOL_q15(a3 + 16, 0x4000u);
                                          v13[82] = result;
                                          goto LABEL_967;
                                        }
                                        v741 = 0;
                                        v742 = (_WORD *)(v1396 + 6 * v585 + 8336);
                                        v743 = *(_DWORD *)(a3 + 48);
                                        v744 = *(unsigned __int16 *)(a3 + 52);
                                        v745 = v744 >> 8;
                                        v746 = 8;
                                        v747 = 0xFF00000000000000;
                                        do
                                        {
                                          v748 = v744;
                                          v749 = v745 * ((unsigned __int16)v742[v741] >> 6);
                                          v746 -= 4;
                                          v744 = v746 + (v749 >> 1);
                                          ++v741;
                                          v747 += 0x100000000000000;
                                        }
                                        while (HIWORD(v743) < v744);
                                        v750 = v748 - (v749 >> 1) - v746;
                                        v751 = __clz(v750);
                                        v752 = (v751 ^ 0xFFE0) + 16;
                                        v753 = *(_WORD *)(a3 + 54) - v752;
                                        *(_WORD *)(a3 + 54) = v753;
                                        v754 = ((v743 - (v744 << 16) + 1) << ((v751 ^ 0xE0) + 16)) - 1;
                                        *(_DWORD *)(a3 + 48) = v754;
                                        *(_WORD *)(a3 + 52) = v750 << v752;
                                        v755 = v741 - 1;
                                        if ((v753 & 0x8000) == 0)
                                        {
LABEL_957:
                                          if (*(_BYTE *)(a3 + 56))
                                          {
                                            v950 = *(unsigned __int16 *)(v1396 + 6 * v585 + 8340);
                                            v951 = (v950 >> 4) + 4;
                                            v952 = (unsigned __int16)*v742;
                                            if (v747 < 1)
                                              v953 = v952 - (v952 >> v951);
                                            else
                                              v953 = v952 + ((int)(0x8000 - v952) >> v951);
                                            *v742 = v953;
                                            if (v950 >= 0x20)
                                              v954 = v950;
                                            else
                                              v954 = v950 + 1;
                                            *(_WORD *)(v1396 + 6 * v585 + 8340) = v954;
                                          }
                                          v13[83] = v755 + 2;
                                          if (v755)
                                            goto LABEL_966;
                                          v1015 = (unsigned __int16 *)(v1396 + 34 * v585 + 8468);
                                          v1016 = od_ec_decode_cdf_q15(a3 + 16, v1015, 16);
                                          if (!*(_BYTE *)(a3 + 56))
                                          {
LABEL_1154:
                                            v13[80] = v1016;
                                            result = od_ec_decode_BOOL_q15(a3 + 16, 0x4000u);
                                            v13[81] = result;
                                            v738 = *(unsigned __int8 *)(a1 + 15705);
                                            v739 = *(unsigned __int8 ***)(a2 + 7864);
                                            v740 = *v739;
                                            if ((*(_WORD *)(*v739 + 167) & 0x40) != 0)
                                              goto LABEL_969;
                                            goto LABEL_968;
                                          }
                                          v1017 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8500);
                                          v1018 = (v1017 >> 4) + 5;
                                          v1019 = v1016 << 56;
                                          v1020 = *v1015;
                                          if (v1016 << 56 <= 0)
                                          {
                                            *v1015 = v1020 - (v1020 >> v1018);
                                            v1021 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8470);
                                          }
                                          else
                                          {
                                            *v1015 = v1020 + ((int)(0x8000 - v1020) >> v1018);
                                            v1021 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8470);
                                            if (v1019 > 0x100000000000000)
                                            {
                                              *(_WORD *)(v1396 + 34 * v585 + 8470) = v1021 + ((int)(0x8000 - v1021) >> v1018);
                                              v1022 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8472);
                                              if (v1019 > 0x200000000000000)
                                              {
                                                *(_WORD *)(v1396 + 34 * v585 + 8472) = v1022 + ((int)(0x8000 - v1022) >> v1018);
                                                v1023 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8474);
                                                if (v1019 > 0x300000000000000)
                                                {
                                                  *(_WORD *)(v1396 + 34 * v585 + 8474) = v1023 + ((int)(0x8000 - v1023) >> v1018);
                                                  v1024 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8476);
                                                  if (v1019 > 0x400000000000000)
                                                  {
                                                    *(_WORD *)(v1396 + 34 * v585 + 8476) = v1024 + ((int)(0x8000 - v1024) >> v1018);
                                                    v1025 = *(unsigned __int16 *)(v1396
                                                                                + 34 * v585
                                                                                + 8478);
                                                    if (v1019 > 0x500000000000000)
                                                    {
                                                      *(_WORD *)(v1396 + 34 * v585 + 8478) = v1025 + ((int)(0x8000 - v1025) >> v1018);
                                                      v1026 = *(unsigned __int16 *)(v1396
                                                                                  + 34 * v585
                                                                                  + 8480);
                                                      if (v1019 > 0x600000000000000)
                                                      {
                                                        *(_WORD *)(v1396 + 34 * v585 + 8480) = v1026 + ((int)(0x8000 - v1026) >> v1018);
                                                        v1027 = *(unsigned __int16 *)(v1396
                                                                                    + 34 * v585
                                                                                    + 8482);
                                                        if (v1019 > 0x700000000000000)
                                                        {
                                                          *(_WORD *)(v1396 + 34 * v585 + 8482) = v1027 + ((int)(0x8000 - v1027) >> v1018);
                                                          v1028 = *(unsigned __int16 *)(v1396
                                                                                      + 34 * v585
                                                                                      + 8484);
                                                          if (v1019 > 0x800000000000000)
                                                          {
                                                            *(_WORD *)(v1396 + 34 * v585 + 8484) = v1028 + ((int)(0x8000 - v1028) >> v1018);
                                                            v1029 = *(unsigned __int16 *)(v1396
                                                                                        + 34 * v585
                                                                                        + 8486);
                                                            if (v1019 > 0x900000000000000)
                                                            {
                                                              *(_WORD *)(v1396 + 34 * v585 + 8486) = v1029 + ((int)(0x8000 - v1029) >> v1018);
                                                              v1030 = *(unsigned __int16 *)(v1396
                                                                                          + 34 * v585
                                                                                          + 8488);
                                                              if (v1019 > 0xA00000000000000)
                                                              {
                                                                *(_WORD *)(v1396 + 34 * v585 + 8488) = v1030 + ((int)(0x8000 - v1030) >> v1018);
                                                                v1031 = *(unsigned __int16 *)(v1396
                                                                                            + 34 * v585
                                                                                            + 8490);
                                                                if (v1019 > 0xB00000000000000)
                                                                {
                                                                  *(_WORD *)(v1396 + 34 * v585 + 8490) = v1031 + ((int)(0x8000 - v1031) >> v1018);
                                                                  v1032 = *(unsigned __int16 *)(v1396
                                                                                              + 34
                                                                                              * v585
                                                                                              + 8492);
                                                                  if (v1019 > 0xC00000000000000)
                                                                  {
                                                                    *(_WORD *)(v1396 + 34 * v585 + 8492) = v1032 + ((int)(0x8000 - v1032) >> v1018);
                                                                    v1033 = *(unsigned __int16 *)(v1396
                                                                                                + 34
                                                                                                * v585
                                                                                                + 8494);
                                                                    if (v1019 > 0xD00000000000000)
                                                                    {
                                                                      *(_WORD *)(v1396 + 34 * v585 + 8494) = v1033 + ((int)(0x8000 - v1033) >> v1018);
                                                                      v1034 = *(unsigned __int16 *)(v1396
                                                                                                  + 34 * v585
                                                                                                  + 8496);
                                                                      if (v1019 > 0xE00000000000000)
                                                                      {
                                                                        v1035 = v1034 + ((int)(0x8000 - v1034) >> v1018);
                                                                        v585 = v1398;
LABEL_1151:
                                                                        v1015[14] = v1035;
                                                                        if (v1017 < 0x20)
                                                                          LOWORD(v1017) = v1017 + 1;
                                                                        v1015[16] = v1017;
                                                                        goto LABEL_1154;
                                                                      }
                                                                      v585 = v1398;
LABEL_1150:
                                                                      v1035 = v1034 - (v1034 >> v1018);
                                                                      goto LABEL_1151;
                                                                    }
                                                                    v585 = v1398;
LABEL_1149:
                                                                    v1015[13] = v1033 - (v1033 >> v1018);
                                                                    v1034 = v1015[14];
                                                                    goto LABEL_1150;
                                                                  }
                                                                  v585 = v1398;
LABEL_1148:
                                                                  v1015[12] = v1032 - (v1032 >> v1018);
                                                                  v1033 = v1015[13];
                                                                  goto LABEL_1149;
                                                                }
                                                                v585 = v1398;
LABEL_1147:
                                                                v1015[11] = v1031 - (v1031 >> v1018);
                                                                v1032 = v1015[12];
                                                                goto LABEL_1148;
                                                              }
                                                              v585 = v1398;
LABEL_1146:
                                                              v1015[10] = v1030 - (v1030 >> v1018);
                                                              v1031 = v1015[11];
                                                              goto LABEL_1147;
                                                            }
                                                            v585 = v1398;
LABEL_1145:
                                                            v1015[9] = v1029 - (v1029 >> v1018);
                                                            v1030 = v1015[10];
                                                            goto LABEL_1146;
                                                          }
                                                          v585 = v1398;
LABEL_1144:
                                                          v1015[8] = v1028 - (v1028 >> v1018);
                                                          v1029 = v1015[9];
                                                          goto LABEL_1145;
                                                        }
LABEL_1143:
                                                        *(_WORD *)(v1396 + 34 * v585 + 8482) = v1027 - (v1027 >> v1018);
                                                        v1028 = *(unsigned __int16 *)(v1396
                                                                                    + 34 * v585
                                                                                    + 8484);
                                                        goto LABEL_1144;
                                                      }
LABEL_1142:
                                                      *(_WORD *)(v1396 + 34 * v585 + 8480) = v1026 - (v1026 >> v1018);
                                                      v1027 = *(unsigned __int16 *)(v1396
                                                                                  + 34 * v585
                                                                                  + 8482);
                                                      goto LABEL_1143;
                                                    }
LABEL_1141:
                                                    *(_WORD *)(v1396 + 34 * v585 + 8478) = v1025 - (v1025 >> v1018);
                                                    v1026 = *(unsigned __int16 *)(v1396
                                                                                + 34 * v585
                                                                                + 8480);
                                                    goto LABEL_1142;
                                                  }
LABEL_1140:
                                                  *(_WORD *)(v1396 + 34 * v585 + 8476) = v1024 - (v1024 >> v1018);
                                                  v1025 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8478);
                                                  goto LABEL_1141;
                                                }
LABEL_1139:
                                                *(_WORD *)(v1396 + 34 * v585 + 8474) = v1023 - (v1023 >> v1018);
                                                v1024 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8476);
                                                goto LABEL_1140;
                                              }
LABEL_1138:
                                              *(_WORD *)(v1396 + 34 * v585 + 8472) = v1022 - (v1022 >> v1018);
                                              v1023 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8474);
                                              goto LABEL_1139;
                                            }
                                          }
                                          *(_WORD *)(v1396 + 34 * v585 + 8470) = v1021
                                                                                               - (v1021 >> v1018);
                                          v1022 = *(unsigned __int16 *)(v1396 + 34 * v585 + 8472);
                                          goto LABEL_1138;
                                        }
                                        v756 = *(_QWORD *)(a3 + 32);
                                        v757 = *(int8x16_t **)(a3 + 40);
                                        if ((unint64_t)v757 >= v756)
                                        {
                                          v761 = *(unsigned __int8 **)(a3 + 40);
                                          goto LABEL_955;
                                        }
                                        v758 = 8 - v753;
                                        if (v758 >= 7)
                                          v759 = 7;
                                        else
                                          v759 = 8 - v753;
                                        v760 = ((v759 ^ 0xFu) - v753) >> 3;
                                        if (v760 >= ~(unint64_t)v757 + v756)
                                          v760 = ~(unint64_t)v757 + v756;
                                        if (v760 >= 0xF)
                                        {
                                          v930 = v760 + 1;
                                          v931 = (v760 + 1) & 0x3FFFFFF0;
                                          v761 = &v757->u8[v931];
                                          v932 = 0uLL;
                                          v933 = (int16x8_t)(unsigned __int16)v753;
                                          v934 = (int8x16_t)v754;
                                          v935 = vdupq_n_s32(v758);
                                          v936 = (uint32x4_t)vaddq_s32(v935, (int32x4_t)xmmword_208F3A6C0);
                                          v937 = (uint32x4_t)vaddq_s32(v935, (int32x4_t)xmmword_208F3A6D0);
                                          v938 = (uint32x4_t)vaddq_s32(v935, (int32x4_t)xmmword_208F3A6A0);
                                          v939 = (uint32x4_t)vaddq_s32(v935, (int32x4_t)xmmword_208F3A6B0);
                                          v940.i64[0] = 0x8000800080008;
                                          v940.i64[1] = 0x8000800080008;
                                          v941.i64[0] = 0x7F0000007FLL;
                                          v941.i64[1] = 0x7F0000007FLL;
                                          v942 = v931;
                                          v943 = 0uLL;
                                          v944 = 0uLL;
                                          v945 = 0uLL;
                                          do
                                          {
                                            v946 = *v757++;
                                            v944 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v946, (int8x16_t)xmmword_208F04F30), v937), v944);
                                            v943 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v946, (int8x16_t)xmmword_208F04F40), v938), v943);
                                            v934 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v946, (int8x16_t)xmmword_208F04F50), v939), v934);
                                            v945 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v946, (int8x16_t)xmmword_208F04F20), v936), v945);
                                            v933 = vaddq_s16(v933, v940);
                                            v932 = vaddq_s16(v932, v940);
                                            v939 = (uint32x4_t)vaddq_s32((int32x4_t)v939, v941);
                                            v938 = (uint32x4_t)vaddq_s32((int32x4_t)v938, v941);
                                            v937 = (uint32x4_t)vaddq_s32((int32x4_t)v937, v941);
                                            v936 = (uint32x4_t)vaddq_s32((int32x4_t)v936, v941);
                                            v942 -= 16;
                                          }
                                          while (v942);
                                          v947 = (unint64_t)v757 < v756;
                                          v948 = veorq_s8(veorq_s8(v934, v944), veorq_s8(v943, v945));
                                          *(int8x8_t *)v948.i8 = veor_s8(*(int8x8_t *)v948.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v948, v948, 8uLL));
                                          v754 = v948.i32[0] ^ v948.i32[1];
                                          v753 = vaddvq_s16(vaddq_s16(v933, v932));
                                          if (v930 == v931)
                                            goto LABEL_954;
                                          v758 -= 8 * v931;
                                        }
                                        else
                                        {
                                          v761 = *(unsigned __int8 **)(a3 + 40);
                                        }
                                        do
                                        {
                                          v949 = *v761++;
                                          v754 ^= v949 << v758;
                                          v753 += 8;
                                          v947 = (unint64_t)v761 < v756;
                                          v89 = v758 >= 8;
                                          v758 -= 8;
                                        }
                                        while (v89 && (unint64_t)v761 < v756);
LABEL_954:
                                        if (v947)
                                        {
LABEL_956:
                                          *(_DWORD *)(a3 + 48) = v754;
                                          *(_WORD *)(a3 + 54) = v753;
                                          *(_QWORD *)(a3 + 40) = v761;
                                          goto LABEL_957;
                                        }
LABEL_955:
                                        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v753 + 0x4000;
                                        v753 = 0x4000;
                                        goto LABEL_956;
                                      }
                                      v670 = *(_QWORD *)(a2 + 7880);
                                      v671 = *(_QWORD *)(a2 + 7888);
                                      if (v671)
                                      {
                                        if (*(char *)(v671 + 17) < 1)
                                        {
                                          if (*(_BYTE *)(v671 + 16) == 7)
                                            LODWORD(v671) = 3;
                                          else
                                            LODWORD(v671) = 0;
                                        }
                                        else
                                        {
                                          LODWORD(v671) = HIBYTE(*(unsigned __int16 *)(v671 + 167)) & 1;
                                        }
                                      }
                                      if (v670)
                                      {
                                        if (*(char *)(v670 + 17) < 1)
                                        {
                                          if (*(_BYTE *)(v670 + 16) == 7)
                                            LODWORD(v670) = 3;
                                          else
                                            LODWORD(v670) = 0;
                                        }
                                        else
                                        {
                                          LODWORD(v670) = HIBYTE(*(unsigned __int16 *)(v670 + 167)) & 1;
                                        }
                                      }
                                      v672 = 0;
                                      v673 = v670 + v671;
                                      if (v673 >= 5)
                                        v673 = 5;
                                      v674 = (unsigned __int16 *)(v1396 + 6 * v673 + 11816);
                                      v675 = *(_DWORD *)(a3 + 48);
                                      v676 = *(unsigned __int16 *)(a3 + 52);
                                      v677 = v676 >> 8;
                                      v678 = 8;
                                      v679 = 0xFF00000000000000;
                                      do
                                      {
                                        v680 = v676;
                                        result = v677 * (v674[v672] >> 6);
                                        v678 -= 4;
                                        v676 = v678 + (result >> 1);
                                        ++v672;
                                        v679 += 0x100000000000000;
                                      }
                                      while (HIWORD(v675) < v676);
                                      v681 = v680 - (result >> 1) - v678;
                                      v682 = __clz(v681);
                                      v683 = (v682 ^ 0xFFE0) + 16;
                                      v684 = *(_WORD *)(a3 + 54) - v683;
                                      *(_WORD *)(a3 + 54) = v684;
                                      v685 = ((v675 - (v676 << 16) + 1) << ((v682 ^ 0xE0) + 16)) - 1;
                                      *(_DWORD *)(a3 + 48) = v685;
                                      *(_WORD *)(a3 + 52) = v681 << v683;
                                      v686 = v672 - 1;
                                      if ((v684 & 0x8000) == 0)
                                      {
LABEL_759:
                                        if (*(_BYTE *)(a3 + 56))
                                        {
                                          v720 = v674[2];
                                          v721 = (v720 >> 4) + 4;
                                          v722 = *v674;
                                          if (v679 < 1)
                                            v723 = v722 - (v722 >> v721);
                                          else
                                            v723 = v722 + ((int)(0x8000 - v722) >> v721);
                                          *v674 = v723;
                                          if (v720 >= 0x20)
                                            v724 = v720;
                                          else
                                            v724 = v720 + 1;
                                          v674[2] = v724;
                                        }
                                        v667 = *(_WORD *)(v13 + 167) & 0xFEFF | ((v686 & 1) << 8);
                                        *(_WORD *)(v13 + 167) = v667;
                                        goto LABEL_768;
                                      }
                                      v687 = *(_QWORD *)(a3 + 32);
                                      v688 = *(int8x16_t **)(a3 + 40);
                                      if ((unint64_t)v688 >= v687)
                                      {
                                        v692 = *(unsigned __int8 **)(a3 + 40);
                                        goto LABEL_757;
                                      }
                                      v689 = 8 - v684;
                                      if (v689 >= 7)
                                        v690 = 7;
                                      else
                                        v690 = 8 - v684;
                                      v691 = ((v690 ^ 0xFu) - v684) >> 3;
                                      if (v691 >= ~(unint64_t)v688 + v687)
                                        v691 = ~(unint64_t)v688 + v687;
                                      if (v691 >= 0xF)
                                      {
                                        v705 = v691 + 1;
                                        result = (v691 + 1) & 0x3FFFFFF0;
                                        v692 = &v688->u8[result];
                                        v706 = 0uLL;
                                        v643 = (int16x8_t)(unsigned __int16)v684;
                                        v707 = (int8x16_t)v685;
                                        v708 = vdupq_n_s32(v689);
                                        v709 = (uint32x4_t)vaddq_s32(v708, (int32x4_t)xmmword_208F3A6C0);
                                        v646 = (uint32x4_t)vaddq_s32(v708, (int32x4_t)xmmword_208F3A6D0);
                                        v647 = (uint32x4_t)vaddq_s32(v708, (int32x4_t)xmmword_208F3A6A0);
                                        v648 = (uint32x4_t)vaddq_s32(v708, (int32x4_t)xmmword_208F3A6B0);
                                        v649 = (int32x4_t)xmmword_208F04F30;
                                        v710.i64[0] = 0x8000800080008;
                                        v710.i64[1] = 0x8000800080008;
                                        v711.i64[0] = 0x7F0000007FLL;
                                        v711.i64[1] = 0x7F0000007FLL;
                                        v712 = result;
                                        v713 = 0uLL;
                                        v714 = 0uLL;
                                        v715 = 0uLL;
                                        do
                                        {
                                          v716 = *v688++;
                                          v714 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v716, (int8x16_t)xmmword_208F04F30), v646), v714);
                                          v713 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v716, (int8x16_t)xmmword_208F04F40), v647), v713);
                                          v707 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v716, (int8x16_t)xmmword_208F04F50), v648), v707);
                                          v715 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v716, (int8x16_t)xmmword_208F04F20), v709), v715);
                                          v643 = vaddq_s16(v643, v710);
                                          v706 = vaddq_s16(v706, v710);
                                          v648 = (uint32x4_t)vaddq_s32((int32x4_t)v648, v711);
                                          v647 = (uint32x4_t)vaddq_s32((int32x4_t)v647, v711);
                                          v646 = (uint32x4_t)vaddq_s32((int32x4_t)v646, v711);
                                          v709 = (uint32x4_t)vaddq_s32((int32x4_t)v709, v711);
                                          v712 -= 16;
                                        }
                                        while (v712);
                                        v717 = (unint64_t)v688 < v687;
                                        v718 = veorq_s8(veorq_s8(v707, v714), veorq_s8(v713, v715));
                                        v645 = (int8x8_t)vextq_s8(v718, v718, 8uLL).u64[0];
                                        v644 = veor_s8(*(int8x8_t *)v718.i8, v645);
                                        v685 = v644.i32[0] ^ v644.i32[1];
                                        v642 = vaddq_s16(v643, v706);
                                        v642.i16[0] = vaddvq_s16(v642);
                                        v684 = v642.i16[0];
                                        if (v705 == result)
                                          goto LABEL_756;
                                        v689 -= 8 * result;
                                      }
                                      else
                                      {
                                        v692 = *(unsigned __int8 **)(a3 + 40);
                                      }
                                      do
                                      {
                                        v719 = *v692++;
                                        v685 ^= v719 << v689;
                                        v684 += 8;
                                        v717 = (unint64_t)v692 < v687;
                                        v89 = v689 >= 8;
                                        v689 -= 8;
                                      }
                                      while (v89 && (unint64_t)v692 < v687);
LABEL_756:
                                      if (v717)
                                      {
LABEL_758:
                                        *(_DWORD *)(a3 + 48) = v685;
                                        *(_WORD *)(a3 + 54) = v684;
                                        *(_QWORD *)(a3 + 40) = v692;
                                        goto LABEL_759;
                                      }
LABEL_757:
                                      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v684 + 0x4000;
                                      v684 = 0x4000;
                                      goto LABEL_758;
                                    }
                                    if (!*(_BYTE *)(a1 + 15703) || (*(_WORD *)(v13 + 167) & 0x40) != 0 || !v13[26])
                                      goto LABEL_693;
                                    v650 = *(_DWORD *)(a2 + 10728);
                                    v651 = *v13;
                                    if (v650)
                                    {
                                      v652 = block_size_wide_9[v651];
                                      if (v652 >= block_size_high_8[v651])
                                        v652 = block_size_high_8[v651];
                                    }
                                    else
                                    {
                                      v663 = v13[2];
                                      v652 = block_size_wide_9[v651];
                                      if (v652 >= block_size_high_8[v651])
                                        v652 = block_size_high_8[v651];
                                      v665 = v663 == 15 || v663 == 23;
                                      if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 10744) + 36 * (char)v13[16] + 32) >= 2u
                                        && v665
                                        && v652 > 7)
                                      {
                                        goto LABEL_693;
                                      }
                                    }
                                    if (v652 >= 8)
                                    {
                                      result = 0;
                                      if ((char)*v634 < 0 && v13[2] - 25 >= 0xFFFFFFF4)
                                      {
                                        if (v650
                                          || !*(_BYTE *)(a1 + 15697)
                                          || !v13[25]
                                          || (v653 = *(int **)(a2 + 7944), v654 = *v653, *v653 != -1)
                                          && (v655 = v653[1], v655 != -1)
                                          && (v654 != 0x4000 || v655 != 0x4000))
                                        {
                                          v700 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * *v13 + 9588);
                                          result = od_ec_decode_cdf_q15(a3 + 16, v700, 2);
                                          if (*(_BYTE *)(a3 + 56))
                                          {
                                            v701 = v700[2];
                                            v702 = (v701 >> 4) + 4;
                                            v703 = *v700;
                                            if ((uint64_t)(result << 56) < 1)
                                              v704 = v703 - (v703 >> v702);
                                            else
                                              v704 = v703 + ((int)(0x8000 - v703) >> v702);
                                            *v700 = v704;
                                            if (v701 < 0x20)
                                              LOWORD(v701) = v701 + 1;
                                            v700[2] = v701;
                                          }
                                          goto LABEL_694;
                                        }
                                        v656 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 8 * v651 + 9412);
                                        result = od_ec_decode_cdf_q15(a3 + 16, v656, 3);
                                        if (*(_BYTE *)(a3 + 56))
                                        {
                                          v657 = v656[3];
                                          v658 = (v657 >> 4) + 4;
                                          v659 = *v656;
                                          if ((uint64_t)(result << 56) <= 0)
                                          {
                                            *v656 = v659 - (v659 >> v658);
                                            v660 = v656[1];
                                          }
                                          else
                                          {
                                            *v656 = v659 + ((int)(0x8000 - v659) >> v658);
                                            v660 = v656[1];
                                            if (result << 56 > 0x100000000000000)
                                            {
                                              v661 = v660 + ((int)(0x8000 - v660) >> v658);
LABEL_1420:
                                              v656[1] = v661;
                                              if (v657 < 0x20)
                                                LOWORD(v657) = v657 + 1;
                                              v656[3] = v657;
                                              goto LABEL_694;
                                            }
                                          }
                                          v661 = v660 - (v660 >> v658);
                                          goto LABEL_1420;
                                        }
                                      }
LABEL_694:
                                      v13[24] = result;
                                      v662 = v13[17];
                                      goto LABEL_695;
                                    }
LABEL_693:
                                    result = 0;
                                    goto LABEL_694;
                                  }
                                  v1094 = v1092[4];
                                  v1095 = (v1094 >> 4) + 5;
                                  v1096 = v1093 << 56;
                                  v1097 = *v1092;
                                  if (v1093 << 56 <= 0)
                                  {
                                    *v1092 = v1097 - (v1097 >> v1095);
                                    v1098 = v1092[1];
                                  }
                                  else
                                  {
                                    *v1092 = v1097 + ((int)(0x8000 - v1097) >> v1095);
                                    v1098 = v1092[1];
                                    if (v1096 > 0x100000000000000)
                                    {
                                      v1092[1] = v1098 + ((int)(0x8000 - v1098) >> v1095);
                                      v1099 = v1092[2];
                                      if (v1096 > 0x200000000000000)
                                      {
                                        v1100 = v1099 + ((int)(0x8000 - v1099) >> v1095);
LABEL_1323:
                                        v1092[2] = v1100;
                                        if (v1094 < 0x20)
                                          LOWORD(v1094) = v1094 + 1;
                                        v1092[4] = v1094;
                                        goto LABEL_1326;
                                      }
LABEL_1322:
                                      v1100 = v1099 - (v1099 >> v1095);
                                      goto LABEL_1323;
                                    }
                                  }
                                  v1092[1] = v1098 - (v1098 >> v1095);
                                  v1099 = v1092[2];
                                  goto LABEL_1322;
                                }
LABEL_633:
                                v625 = 0;
                                if (!v171)
                                  goto LABEL_639;
                                goto LABEL_634;
                              }
LABEL_1271:
                              if (v835 > 0x16u)
                                goto LABEL_436;
                              if (((1 << v835) & 0x644000) == 0)
                                goto LABEL_436;
                              v1207 = (unsigned __int8 *)(a2 + v1148 + 15142);
                              if (*v1207 < 3u)
                                goto LABEL_436;
                              v1208 = a2 + 16 * v1148 + 10168;
                              if (*(unsigned __int16 *)(a2 + 16 * v1148 + 10170) <= 0x27Fu)
                                v1209 = 2 * (*(unsigned __int16 *)(a2 + 16 * v1148 + 10172) < 0x280u);
                              else
                                v1209 = *(unsigned __int16 *)(a2 + 16 * v1148 + 10172) < 0x280u;
                              v1210 = v1396 + 6 * v1209;
                              v1211 = (unsigned __int16 *)(v1210 + 8174);
                              v1212 = *(_DWORD *)(a3 + 48);
                              v1213 = *(unsigned __int16 *)(a3 + 52);
                              v1214 = v1213 >> 8;
                              v1215 = 8;
                              v1216 = 0xFF00000000000000;
                              v1217 = 4087;
                              do
                              {
                                v1218 = v1213;
                                v1219 = v1214 * (*(unsigned __int16 *)(v1210 + 2 * v1217) >> 6);
                                v1215 -= 4;
                                v1213 = v1215 + (v1219 >> 1);
                                ++v1217;
                                v1216 += 0x100000000000000;
                              }
                              while (HIWORD(v1212) < v1213);
                              v1220 = v1218 - (v1219 >> 1) - v1215;
                              v1221 = (__clz(v1220) ^ 0xFFFFFFE0) + 16;
                              v1222 = *(_WORD *)(a3 + 54) - v1221;
                              *(_WORD *)(a3 + 54) = v1222;
                              v1223 = ((v1212 - (v1213 << 16) + 1) << v1221) - 1;
                              *(_DWORD *)(a3 + 48) = v1223;
                              *(_WORD *)(a3 + 52) = v1220 << v1221;
                              v1224 = v1217 - 4088;
                              if ((v1222 & 0x8000) == 0)
                                goto LABEL_1299;
                              v1225 = v1222;
                              v1226 = *(_QWORD *)(a3 + 32);
                              v1227 = *(int8x16_t **)(a3 + 40);
                              if ((unint64_t)v1227 >= v1226)
                              {
                                v1231 = *(unsigned __int8 **)(a3 + 40);
                                goto LABEL_1297;
                              }
                              v1228 = 8 - v1225;
                              if ((8 - v1225) >= 7)
                                v1229 = 7;
                              else
                                v1229 = 8 - v1225;
                              v1230 = ((v1229 ^ 0xFu) - v1225) >> 3;
                              if (v1230 >= ~(unint64_t)v1227 + v1226)
                                v1230 = ~(unint64_t)v1227 + v1226;
                              if (v1230 >= 0xF)
                              {
                                v1232 = v1230 + 1;
                                v1233 = (v1230 + 1) & 0x3FFFFFF0;
                                v1231 = &v1227->u8[v1233];
                                v1234 = 0uLL;
                                v1235 = (int16x8_t)(unsigned __int16)v1225;
                                v1236 = (int8x16_t)v1223;
                                v1237 = vdupq_n_s32(v1228);
                                v1238 = (uint32x4_t)vaddq_s32(v1237, (int32x4_t)xmmword_208F3A6C0);
                                v1239 = (uint32x4_t)vaddq_s32(v1237, (int32x4_t)xmmword_208F3A6D0);
                                v1240 = (uint32x4_t)vaddq_s32(v1237, (int32x4_t)xmmword_208F3A6A0);
                                v1241 = (uint32x4_t)vaddq_s32(v1237, (int32x4_t)xmmword_208F3A6B0);
                                v1242.i64[0] = 0x8000800080008;
                                v1242.i64[1] = 0x8000800080008;
                                v1243.i64[0] = 0x7F0000007FLL;
                                v1243.i64[1] = 0x7F0000007FLL;
                                v1244 = v1233;
                                v1245 = 0uLL;
                                v1246 = 0uLL;
                                v1247 = 0uLL;
                                do
                                {
                                  v1248 = *v1227++;
                                  v1246 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1248, (int8x16_t)xmmword_208F04F30), v1239), v1246);
                                  v1245 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1248, (int8x16_t)xmmword_208F04F40), v1240), v1245);
                                  v1236 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1248, (int8x16_t)xmmword_208F04F50), v1241), v1236);
                                  v1247 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1248, (int8x16_t)xmmword_208F04F20), v1238), v1247);
                                  v1235 = vaddq_s16(v1235, v1242);
                                  v1234 = vaddq_s16(v1234, v1242);
                                  v1241 = (uint32x4_t)vaddq_s32((int32x4_t)v1241, v1243);
                                  v1240 = (uint32x4_t)vaddq_s32((int32x4_t)v1240, v1243);
                                  v1239 = (uint32x4_t)vaddq_s32((int32x4_t)v1239, v1243);
                                  v1238 = (uint32x4_t)vaddq_s32((int32x4_t)v1238, v1243);
                                  v1244 -= 16;
                                }
                                while (v1244);
                                v1249 = (unint64_t)v1227 < v1226;
                                v1250 = veorq_s8(veorq_s8(v1236, v1246), veorq_s8(v1245, v1247));
                                *(int8x8_t *)v1250.i8 = veor_s8(*(int8x8_t *)v1250.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1250, v1250, 8uLL));
                                v1223 = v1250.i32[0] ^ v1250.i32[1];
                                v509 = vaddq_s16(v1235, v1234);
                                v509.i16[0] = vaddvq_s16(v509);
                                LOWORD(v1225) = v509.i16[0];
                                if (v1232 == v1233)
                                  goto LABEL_1296;
                                v1228 -= 8 * v1233;
                              }
                              else
                              {
                                v1231 = *(unsigned __int8 **)(a3 + 40);
                              }
                              do
                              {
                                v1251 = *v1231++;
                                v1223 ^= v1251 << v1228;
                                LOWORD(v1225) = v1225 + 8;
                                v1249 = (unint64_t)v1231 < v1226;
                                v89 = v1228 >= 8;
                                v1228 -= 8;
                              }
                              while (v89 && (unint64_t)v1231 < v1226);
LABEL_1296:
                              if (v1249)
                              {
LABEL_1298:
                                *(_DWORD *)(a3 + 48) = v1223;
                                *(_WORD *)(a3 + 54) = v1225;
                                *(_QWORD *)(a3 + 40) = v1231;
LABEL_1299:
                                if (*(_BYTE *)(a3 + 56))
                                {
                                  v1252 = v1211[2];
                                  v1253 = (v1252 >> 4) + 4;
                                  v1254 = *v1211;
                                  if (v1216 <= 0)
                                    v1255 = v1254 - (v1254 >> v1253);
                                  else
                                    v1255 = v1254 + ((int)(0x8000 - v1254) >> v1253);
                                  *v1211 = v1255;
                                  if (v1252 >= 0x20)
                                    v1256 = v1252;
                                  else
                                    v1256 = v1252 + 1;
                                  v1211[2] = v1256;
                                }
                                *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFFCF | (16 * (v1224 & 3));
                                if (v1224 && *v1207 >= 4u)
                                {
                                  v1257 = v96;
                                  v1258 = *(unsigned __int16 *)(v1208 + 4);
                                  v1259 = *(unsigned __int16 *)(v1208 + 6) < 0x280u;
                                  if (v1258 <= 0x27F)
                                    v1260 = 2 * v1259;
                                  else
                                    v1260 = v1259;
                                  v1261 = (unsigned __int16 *)(v1396 + 6 * v1260 + 8174);
                                  v1262 = od_ec_decode_cdf_q15(v1147, v1261, 2);
                                  if (*(_BYTE *)(a3 + 56))
                                  {
                                    v1263 = v1261[2];
                                    v1264 = (v1263 >> 4) + 4;
                                    v1265 = *v1261;
                                    if (v1262 << 56 < 1)
                                      v1266 = v1265 - (v1265 >> v1264);
                                    else
                                      v1266 = v1265 + ((int)(0x8000 - v1265) >> v1264);
                                    *v1261 = v1266;
                                    if (v1263 < 0x20)
                                      LOWORD(v1263) = v1263 + 1;
                                    v1261[2] = v1263;
                                  }
                                  *(_WORD *)(v13 + 167) = *(_WORD *)(v13 + 167) & 0xFFCF | (16 * (_BYTE)v1262 + 16) & 0x30;
                                  v96 = v1257;
                                }
                                goto LABEL_436;
                              }
LABEL_1297:
                              *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v1225 + 0x4000;
                              LOWORD(v1225) = 0x4000;
                              goto LABEL_1298;
                            }
                            v1167 = v1164;
                            v1169 = *(_QWORD *)(a3 + 32);
                            v1168 = *(int8x16_t **)(a3 + 40);
                            if ((unint64_t)v1168 >= v1169)
                            {
                              v1173 = *(unsigned __int8 **)(a3 + 40);
                              goto LABEL_1247;
                            }
                            v1170 = 8 - v1167;
                            if ((8 - v1167) >= 7)
                              v1171 = 7;
                            else
                              v1171 = 8 - v1167;
                            v1172 = ((v1171 ^ 0xFu) - v1167) >> 3;
                            if (v1172 >= ~(unint64_t)v1168 + v1169)
                              v1172 = ~(unint64_t)v1168 + v1169;
                            if (v1172 >= 0xF)
                            {
                              v1175 = v1172 + 1;
                              v1176 = (v1172 + 1) & 0x3FFFFFF0;
                              v1173 = &v1168->u8[v1176];
                              v1177 = 0uLL;
                              v1178 = (int16x8_t)(unsigned __int16)v1167;
                              v1179 = (int8x16_t)v1165;
                              v1180 = vdupq_n_s32(v1170);
                              v1181 = (uint32x4_t)vaddq_s32(v1180, (int32x4_t)xmmword_208F3A6C0);
                              v1182 = (uint32x4_t)vaddq_s32(v1180, (int32x4_t)xmmword_208F3A6D0);
                              v1183 = (uint32x4_t)vaddq_s32(v1180, (int32x4_t)xmmword_208F3A6A0);
                              v1184 = (uint32x4_t)vaddq_s32(v1180, (int32x4_t)xmmword_208F3A6B0);
                              v1185.i64[0] = 0x8000800080008;
                              v1185.i64[1] = 0x8000800080008;
                              v1186.i64[0] = 0x7F0000007FLL;
                              v1186.i64[1] = 0x7F0000007FLL;
                              v1187 = v1176;
                              v1188 = 0uLL;
                              v1189 = 0uLL;
                              v1190 = 0uLL;
                              do
                              {
                                v1191 = *v1168++;
                                v1189 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1191, (int8x16_t)xmmword_208F04F30), v1182), v1189);
                                v1188 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1191, (int8x16_t)xmmword_208F04F40), v1183), v1188);
                                v1179 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1191, (int8x16_t)xmmword_208F04F50), v1184), v1179);
                                v1190 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1191, (int8x16_t)xmmword_208F04F20), v1181), v1190);
                                v1178 = vaddq_s16(v1178, v1185);
                                v1177 = vaddq_s16(v1177, v1185);
                                v1184 = (uint32x4_t)vaddq_s32((int32x4_t)v1184, v1186);
                                v1183 = (uint32x4_t)vaddq_s32((int32x4_t)v1183, v1186);
                                v1182 = (uint32x4_t)vaddq_s32((int32x4_t)v1182, v1186);
                                v1181 = (uint32x4_t)vaddq_s32((int32x4_t)v1181, v1186);
                                v1187 -= 16;
                              }
                              while (v1187);
                              v1192 = (unint64_t)v1168 < v1169;
                              v1193 = veorq_s8(veorq_s8(v1179, v1189), veorq_s8(v1188, v1190));
                              *(int8x8_t *)v1193.i8 = veor_s8(*(int8x8_t *)v1193.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1193, v1193, 8uLL));
                              v1165 = v1193.i32[0] ^ v1193.i32[1];
                              v509 = vaddq_s16(v1178, v1177);
                              v509.i16[0] = vaddvq_s16(v509);
                              LOWORD(v1167) = v509.i16[0];
                              if (v1175 == v1176)
                                goto LABEL_1246;
                              v1170 -= 8 * v1176;
                            }
                            else
                            {
                              v1173 = *(unsigned __int8 **)(a3 + 40);
                            }
                            do
                            {
                              v1194 = *v1173++;
                              v1165 ^= v1194 << v1170;
                              LOWORD(v1167) = v1167 + 8;
                              v1192 = (unint64_t)v1173 < v1169;
                              v89 = v1170 >= 8;
                              v1170 -= 8;
                            }
                            while (v89 && (unint64_t)v1173 < v1169);
LABEL_1246:
                            if (v1192)
                            {
LABEL_1248:
                              *(_DWORD *)(a3 + 48) = v1165;
                              *(_WORD *)(a3 + 54) = v1167;
                              *(_QWORD *)(a3 + 40) = v1173;
                              goto LABEL_1249;
                            }
LABEL_1247:
                            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v1167 + 0x4000;
                            LOWORD(v1167) = 0x4000;
                            goto LABEL_1248;
                          }
LABEL_874:
                          v833 = v832 - (v832 >> v825);
                          goto LABEL_875;
                        }
LABEL_873:
                        v534[5] = v831 - (v831 >> v825);
                        v832 = v534[6];
                        goto LABEL_874;
                      }
LABEL_872:
                      v534[4] = v830 - (v830 >> v825);
                      v831 = v534[5];
                      goto LABEL_873;
                    }
LABEL_871:
                    v534[3] = v829 - (v829 >> v825);
                    v830 = v534[4];
                    goto LABEL_872;
                  }
LABEL_870:
                  v534[2] = v828 - (v828 >> v825);
                  v829 = v534[3];
                  goto LABEL_871;
                }
              }
              v534[1] = v827 - (v827 >> v825);
              v828 = v534[2];
              goto LABEL_870;
            }
            v544 = v541;
            v545 = *(_QWORD *)(a3 + 32);
            v546 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v546 >= v545)
            {
              v550 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_857;
            }
            v547 = 8 - v544;
            if ((8 - v544) >= 7)
              v548 = 7;
            else
              v548 = 8 - v544;
            v549 = ((v548 ^ 0xFu) - v544) >> 3;
            if (v549 >= ~(unint64_t)v546 + v545)
              v549 = ~(unint64_t)v546 + v545;
            if (v549 >= 0xF)
            {
              v804 = v549 + 1;
              v805 = (v549 + 1) & 0x3FFFFFF0;
              v550 = &v546->u8[v805];
              v806 = 0uLL;
              v807 = (int16x8_t)(unsigned __int16)v544;
              v808 = (int8x16_t)v542;
              v809 = vdupq_n_s32(v547);
              v810 = (uint32x4_t)vaddq_s32(v809, (int32x4_t)xmmword_208F3A6C0);
              v811 = (uint32x4_t)vaddq_s32(v809, (int32x4_t)xmmword_208F3A6D0);
              v812 = (uint32x4_t)vaddq_s32(v809, (int32x4_t)xmmword_208F3A6A0);
              v813 = (uint32x4_t)vaddq_s32(v809, (int32x4_t)xmmword_208F3A6B0);
              v814.i64[0] = 0x8000800080008;
              v814.i64[1] = 0x8000800080008;
              v815.i64[0] = 0x7F0000007FLL;
              v815.i64[1] = 0x7F0000007FLL;
              v816 = v805;
              v817 = 0uLL;
              v818 = 0uLL;
              v819 = 0uLL;
              do
              {
                v820 = *v546++;
                v818 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v820, (int8x16_t)xmmword_208F04F30), v811), v818);
                v817 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v820, (int8x16_t)xmmword_208F04F40), v812), v817);
                v808 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v820, (int8x16_t)xmmword_208F04F50), v813), v808);
                v819 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v820, (int8x16_t)xmmword_208F04F20), v810), v819);
                v807 = vaddq_s16(v807, v814);
                v806 = vaddq_s16(v806, v814);
                v813 = (uint32x4_t)vaddq_s32((int32x4_t)v813, v815);
                v812 = (uint32x4_t)vaddq_s32((int32x4_t)v812, v815);
                v811 = (uint32x4_t)vaddq_s32((int32x4_t)v811, v815);
                v810 = (uint32x4_t)vaddq_s32((int32x4_t)v810, v815);
                v816 -= 16;
              }
              while (v816);
              v821 = (unint64_t)v546 < v545;
              v822 = veorq_s8(veorq_s8(v808, v818), veorq_s8(v817, v819));
              *(int8x8_t *)v822.i8 = veor_s8(*(int8x8_t *)v822.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v822, v822, 8uLL));
              v542 = v822.i32[0] ^ v822.i32[1];
              v509 = vaddq_s16(v807, v806);
              v509.i16[0] = vaddvq_s16(v509);
              LOWORD(v544) = v509.i16[0];
              if (v804 == v805)
                goto LABEL_856;
              v547 -= 8 * v805;
            }
            else
            {
              v550 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v823 = *v550++;
              v542 ^= v823 << v547;
              LOWORD(v544) = v544 + 8;
              v821 = (unint64_t)v550 < v545;
              v89 = v547 >= 8;
              v547 -= 8;
            }
            while (v89 && (unint64_t)v550 < v545);
LABEL_856:
            if (v821)
            {
LABEL_858:
              *(_DWORD *)(a3 + 48) = v542;
              *(_WORD *)(a3 + 54) = v544;
              *(_QWORD *)(a3 + 40) = v550;
              goto LABEL_859;
            }
LABEL_857:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v544 + 0x4000;
            LOWORD(v544) = 0x4000;
            goto LABEL_858;
          }
        }
        v590 = v1396 + 6 * (v528 & 7);
        v591 = (unsigned __int16 *)(v590 + 8090);
        v592 = 8;
        v593 = 0xFF00000000000000;
        v594 = 4045;
        do
        {
          v595 = v530;
          v596 = v532 * (*(unsigned __int16 *)(v590 + 2 * v594) >> 6);
          v592 -= 4;
          v530 = v592 + (v596 >> 1);
          ++v594;
          v593 += 0x100000000000000;
        }
        while (v531 < v530);
        v597 = v595 - (v596 >> 1) - v592;
        v598 = __clz(v597);
        v599 = (v598 ^ 0xFFE0) + 16;
        v600 = *(_WORD *)(a3 + 54) - v599;
        *(_WORD *)(a3 + 54) = v600;
        v601 = ((v529 - (v530 << 16) + 1) << ((v598 ^ 0xE0) + 16)) - 1;
        *(_DWORD *)(a3 + 48) = v601;
        *(_WORD *)(a3 + 52) = v597 << v599;
        v602 = v594 - 4046;
        if ((v600 & 0x8000) == 0)
        {
LABEL_894:
          v857 = *(unsigned __int8 *)(a3 + 56);
          if (*(_BYTE *)(a3 + 56))
          {
            v858 = v591[2];
            v859 = (v858 >> 4) + 4;
            v860 = *v591;
            if (v593 < 1)
              v861 = v860 - (v860 >> v859);
            else
              v861 = v860 + ((int)(0x8000 - v860) >> v859);
            *v591 = v861;
            if (v858 >= 0x20)
              v862 = v858;
            else
              v862 = v858 + 1;
            v591[2] = v862;
          }
          if (!v602)
          {
            v835 = 16;
LABEL_1197:
            v13[2] = v835;
            v836 = v13 + 2;
            goto LABEL_1198;
          }
          v863 = v1396 + 6 * (((unsigned __int16)v528 >> 3) & 1);
          v864 = (unsigned __int16 *)(v863 + 8126);
          v865 = *(unsigned __int16 *)(a3 + 52);
          v866 = v865 >> 8;
          v867 = 8;
          v868 = 0xFF00000000000000;
          v869 = 4063;
          do
          {
            v870 = v865;
            v871 = v866 * (*(unsigned __int16 *)(v863 + 2 * v869) >> 6);
            v867 -= 4;
            v865 = v867 + (v871 >> 1);
            ++v869;
            v868 += 0x100000000000000;
          }
          while (HIWORD(v601) < v865);
          v872 = v870 - (v871 >> 1) - v867;
          v873 = __clz(v872);
          v874 = (v873 ^ 0xFFE0) + 16;
          v875 = *(_WORD *)(a3 + 54) - v874;
          *(_WORD *)(a3 + 54) = v875;
          v876 = ((v601 - (v865 << 16) + 1) << ((v873 ^ 0xE0) + 16)) - 1;
          *(_DWORD *)(a3 + 48) = v876;
          *(_WORD *)(a3 + 52) = v872 << v874;
          v877 = v869 - 4064;
          if ((v875 & 0x8000) == 0)
          {
LABEL_926:
            if (v857)
            {
              v904 = v864[2];
              v905 = (v904 >> 4) + 4;
              v906 = *v864;
              if (v868 < 1)
                v907 = v906 - (v906 >> v905);
              else
                v907 = v906 + ((int)(0x8000 - v906) >> v905);
              *v864 = v907;
              if (v904 >= 0x20)
                v908 = v904;
              else
                v908 = v904 + 1;
              v864[2] = v908;
            }
            if (!v877)
              goto LABEL_433;
            v909 = v1396 + 6 * (v528 >> 4);
            v910 = (unsigned __int16 *)(v909 + 8138);
            v911 = *(unsigned __int16 *)(a3 + 52);
            v912 = v911 >> 8;
            v913 = 8;
            v914 = 0xFF00000000000000;
            v915 = 4069;
            do
            {
              v916 = v911;
              v917 = v912 * (*(unsigned __int16 *)(v909 + 2 * v915) >> 6);
              v913 -= 4;
              v911 = v913 + (v917 >> 1);
              ++v915;
              v914 += 0x100000000000000;
            }
            while (HIWORD(v876) < v911);
            v918 = v916 - (v917 >> 1) - v913;
            v919 = (__clz(v918) ^ 0xFFFFFFE0) + 16;
            v920 = *(_WORD *)(a3 + 54) - v919;
            *(_WORD *)(a3 + 54) = v920;
            v921 = ((v876 - (v911 << 16) + 1) << v919) - 1;
            *(_DWORD *)(a3 + 48) = v921;
            *(_WORD *)(a3 + 52) = v918 << v919;
            v922 = v915 - 4070;
            if ((v920 & 0x8000) == 0)
              goto LABEL_1188;
            v923 = v920;
            v924 = *(_QWORD *)(a3 + 32);
            v925 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v925 >= v924)
            {
              v929 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_1186;
            }
            v926 = 8 - v920;
            if (v926 >= 7)
              v927 = 7;
            else
              v927 = 8 - v920;
            v928 = ((v927 ^ 0xFu) - v923) >> 3;
            if (v928 >= ~(unint64_t)v925 + v924)
              v928 = ~(unint64_t)v925 + v924;
            if (v928 >= 0xF)
            {
              v1123 = v928 + 1;
              v1124 = (v928 + 1) & 0x3FFFFFF0;
              v929 = &v925->u8[v1124];
              v1125 = 0uLL;
              v1126 = (int16x8_t)(unsigned __int16)v923;
              v1127 = (int8x16_t)v921;
              v1128 = vdupq_n_s32(v926);
              v1129 = (uint32x4_t)vaddq_s32(v1128, (int32x4_t)xmmword_208F3A6C0);
              v1130 = (uint32x4_t)vaddq_s32(v1128, (int32x4_t)xmmword_208F3A6D0);
              v1131 = (uint32x4_t)vaddq_s32(v1128, (int32x4_t)xmmword_208F3A6A0);
              v1132 = (uint32x4_t)vaddq_s32(v1128, (int32x4_t)xmmword_208F3A6B0);
              v1133.i64[0] = 0x8000800080008;
              v1133.i64[1] = 0x8000800080008;
              v1134.i64[0] = 0x7F0000007FLL;
              v1134.i64[1] = 0x7F0000007FLL;
              v1135 = v1124;
              v1136 = 0uLL;
              v1137 = 0uLL;
              v1138 = 0uLL;
              do
              {
                v1139 = *v925++;
                v1137 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1139, (int8x16_t)xmmword_208F04F30), v1130), v1137);
                v1136 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1139, (int8x16_t)xmmword_208F04F40), v1131), v1136);
                v1127 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1139, (int8x16_t)xmmword_208F04F50), v1132), v1127);
                v1138 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1139, (int8x16_t)xmmword_208F04F20), v1129), v1138);
                v1126 = vaddq_s16(v1126, v1133);
                v1125 = vaddq_s16(v1125, v1133);
                v1132 = (uint32x4_t)vaddq_s32((int32x4_t)v1132, v1134);
                v1131 = (uint32x4_t)vaddq_s32((int32x4_t)v1131, v1134);
                v1130 = (uint32x4_t)vaddq_s32((int32x4_t)v1130, v1134);
                v1129 = (uint32x4_t)vaddq_s32((int32x4_t)v1129, v1134);
                v1135 -= 16;
              }
              while (v1135);
              v1140 = (unint64_t)v925 < v924;
              v1141 = veorq_s8(veorq_s8(v1127, v1137), veorq_s8(v1136, v1138));
              *(int8x8_t *)v1141.i8 = veor_s8(*(int8x8_t *)v1141.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1141, v1141, 8uLL));
              v921 = v1141.i32[0] ^ v1141.i32[1];
              v509 = vaddq_s16(v1126, v1125);
              v509.i16[0] = vaddvq_s16(v509);
              LOWORD(v923) = v509.i16[0];
              if (v1123 == v1124)
                goto LABEL_1185;
              v926 -= 8 * v1124;
            }
            else
            {
              v929 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v1142 = *v929++;
              v921 ^= v1142 << v926;
              LOWORD(v923) = v923 + 8;
              v1140 = (unint64_t)v929 < v924;
              v89 = v926 >= 8;
              v926 -= 8;
            }
            while (v89 && (unint64_t)v929 < v924);
LABEL_1185:
            if (v1140)
            {
LABEL_1187:
              *(_DWORD *)(a3 + 48) = v921;
              *(_WORD *)(a3 + 54) = v923;
              *(_QWORD *)(a3 + 40) = v929;
LABEL_1188:
              if (v857)
              {
                v1143 = v910[2];
                v1144 = (v1143 >> 4) + 4;
                v1145 = *v910;
                if (v914 < 1)
                  v1146 = v1145 - (v1145 >> v1144);
                else
                  v1146 = v1145 + ((int)(0x8000 - v1145) >> v1144);
                *v910 = v1146;
                if (v1143 < 0x20)
                  LOWORD(v1143) = v1143 + 1;
                v910[2] = v1143;
              }
              if (!v922)
              {
                v511 = 13;
                goto LABEL_435;
              }
              v835 = 14;
              goto LABEL_1197;
            }
LABEL_1186:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v923 + 0x4000;
            LOWORD(v923) = 0x4000;
            goto LABEL_1187;
          }
          v878 = *(_QWORD *)(a3 + 32);
          v879 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v879 >= v878)
          {
            v883 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_924;
          }
          v880 = 8 - v875;
          if (v880 >= 7)
            v881 = 7;
          else
            v881 = 8 - v875;
          v882 = ((v881 ^ 0xFu) - v875) >> 3;
          if (v882 >= ~(unint64_t)v879 + v878)
            v882 = ~(unint64_t)v879 + v878;
          if (v882 >= 0xF)
          {
            v884 = v882 + 1;
            v885 = (v882 + 1) & 0x3FFFFFF0;
            v883 = &v879->u8[v885];
            v886 = 0uLL;
            v887 = (int16x8_t)(unsigned __int16)v875;
            v888 = (int8x16_t)v876;
            v889 = vdupq_n_s32(v880);
            v890 = (uint32x4_t)vaddq_s32(v889, (int32x4_t)xmmword_208F3A6C0);
            v891 = (uint32x4_t)vaddq_s32(v889, (int32x4_t)xmmword_208F3A6D0);
            v892 = (uint32x4_t)vaddq_s32(v889, (int32x4_t)xmmword_208F3A6A0);
            v893 = (uint32x4_t)vaddq_s32(v889, (int32x4_t)xmmword_208F3A6B0);
            v894.i64[0] = 0x8000800080008;
            v894.i64[1] = 0x8000800080008;
            v895.i64[0] = 0x7F0000007FLL;
            v895.i64[1] = 0x7F0000007FLL;
            v896 = v885;
            v897 = 0uLL;
            v898 = 0uLL;
            v899 = 0uLL;
            do
            {
              v900 = *v879++;
              v898 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v900, (int8x16_t)xmmword_208F04F30), v891), v898);
              v897 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v900, (int8x16_t)xmmword_208F04F40), v892), v897);
              v888 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v900, (int8x16_t)xmmword_208F04F50), v893), v888);
              v899 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v900, (int8x16_t)xmmword_208F04F20), v890), v899);
              v887 = vaddq_s16(v887, v894);
              v886 = vaddq_s16(v886, v894);
              v893 = (uint32x4_t)vaddq_s32((int32x4_t)v893, v895);
              v892 = (uint32x4_t)vaddq_s32((int32x4_t)v892, v895);
              v891 = (uint32x4_t)vaddq_s32((int32x4_t)v891, v895);
              v890 = (uint32x4_t)vaddq_s32((int32x4_t)v890, v895);
              v896 -= 16;
            }
            while (v896);
            v901 = (unint64_t)v879 < v878;
            v902 = veorq_s8(veorq_s8(v888, v898), veorq_s8(v897, v899));
            *(int8x8_t *)v902.i8 = veor_s8(*(int8x8_t *)v902.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v902, v902, 8uLL));
            v876 = v902.i32[0] ^ v902.i32[1];
            v509 = vaddq_s16(v887, v886);
            v509.i16[0] = vaddvq_s16(v509);
            v875 = v509.i16[0];
            if (v884 == v885)
              goto LABEL_923;
            v880 -= 8 * v885;
          }
          else
          {
            v883 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v903 = *v883++;
            v876 ^= v903 << v880;
            v875 += 8;
            v901 = (unint64_t)v883 < v878;
            v89 = v880 >= 8;
            v880 -= 8;
          }
          while (v89 && (unint64_t)v883 < v878);
LABEL_923:
          if (v901)
          {
LABEL_925:
            *(_DWORD *)(a3 + 48) = v876;
            *(_WORD *)(a3 + 54) = v875;
            *(_QWORD *)(a3 + 40) = v883;
            goto LABEL_926;
          }
LABEL_924:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v875 + 0x4000;
          v875 = 0x4000;
          goto LABEL_925;
        }
        v603 = v600;
        v604 = *(_QWORD *)(a3 + 32);
        v605 = *(int8x16_t **)(a3 + 40);
        if ((unint64_t)v605 >= v604)
        {
          v609 = *(unsigned __int8 **)(a3 + 40);
          goto LABEL_892;
        }
        v606 = 8 - v603;
        if ((8 - v603) >= 7)
          v607 = 7;
        else
          v607 = 8 - v603;
        v608 = ((v607 ^ 0xFu) - v603) >> 3;
        if (v608 >= ~(unint64_t)v605 + v604)
          v608 = ~(unint64_t)v605 + v604;
        if (v608 >= 0xF)
        {
          v837 = v608 + 1;
          v838 = (v608 + 1) & 0x3FFFFFF0;
          v609 = &v605->u8[v838];
          v839 = 0uLL;
          v840 = (int16x8_t)(unsigned __int16)v603;
          v841 = (int8x16_t)v601;
          v842 = vdupq_n_s32(v606);
          v843 = (uint32x4_t)vaddq_s32(v842, (int32x4_t)xmmword_208F3A6C0);
          v844 = (uint32x4_t)vaddq_s32(v842, (int32x4_t)xmmword_208F3A6D0);
          v845 = (uint32x4_t)vaddq_s32(v842, (int32x4_t)xmmword_208F3A6A0);
          v846 = (uint32x4_t)vaddq_s32(v842, (int32x4_t)xmmword_208F3A6B0);
          v847.i64[0] = 0x8000800080008;
          v847.i64[1] = 0x8000800080008;
          v848.i64[0] = 0x7F0000007FLL;
          v848.i64[1] = 0x7F0000007FLL;
          v849 = v838;
          v850 = 0uLL;
          v851 = 0uLL;
          v852 = 0uLL;
          do
          {
            v853 = *v605++;
            v851 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v853, (int8x16_t)xmmword_208F04F30), v844), v851);
            v850 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v853, (int8x16_t)xmmword_208F04F40), v845), v850);
            v841 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v853, (int8x16_t)xmmword_208F04F50), v846), v841);
            v852 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v853, (int8x16_t)xmmword_208F04F20), v843), v852);
            v840 = vaddq_s16(v840, v847);
            v839 = vaddq_s16(v839, v847);
            v846 = (uint32x4_t)vaddq_s32((int32x4_t)v846, v848);
            v845 = (uint32x4_t)vaddq_s32((int32x4_t)v845, v848);
            v844 = (uint32x4_t)vaddq_s32((int32x4_t)v844, v848);
            v843 = (uint32x4_t)vaddq_s32((int32x4_t)v843, v848);
            v849 -= 16;
          }
          while (v849);
          v854 = (unint64_t)v605 < v604;
          v855 = veorq_s8(veorq_s8(v841, v851), veorq_s8(v850, v852));
          *(int8x8_t *)v855.i8 = veor_s8(*(int8x8_t *)v855.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v855, v855, 8uLL));
          v601 = v855.i32[0] ^ v855.i32[1];
          v509 = vaddq_s16(v840, v839);
          v509.i16[0] = vaddvq_s16(v509);
          LOWORD(v603) = v509.i16[0];
          if (v837 == v838)
            goto LABEL_891;
          v606 -= 8 * v838;
        }
        else
        {
          v609 = *(unsigned __int8 **)(a3 + 40);
        }
        do
        {
          v856 = *v609++;
          v601 ^= v856 << v606;
          LOWORD(v603) = v603 + 8;
          v854 = (unint64_t)v609 < v604;
          v89 = v606 >= 8;
          v606 -= 8;
        }
        while (v89 && (unint64_t)v609 < v604);
LABEL_891:
        if (v854)
        {
LABEL_893:
          *(_DWORD *)(a3 + 48) = v601;
          *(_WORD *)(a3 + 54) = v603;
          *(_QWORD *)(a3 + 40) = v609;
          goto LABEL_894;
        }
LABEL_892:
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v603 + 0x4000;
        LOWORD(v603) = 0x4000;
        goto LABEL_893;
      }
    }
    v175 = *v166;
    v176 = block_size_wide_9[v175];
    v177 = block_size_high_8[v175];
    if (v176 < v177)
      v177 = v176;
    if (v177 < 8)
    {
LABEL_289:
      v333 = 0;
      v334 = *(_QWORD *)(a2 + 10648);
      v161.i32[0] = *(_DWORD *)(a2 + 10635);
      v161 = (int16x8_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v161.i8));
      v161.i32[0] = vaddvq_s32((int32x4_t)v161);
      v335 = *(unsigned __int8 *)(a2 + 10640) + *(unsigned __int8 *)(a2 + 10639) + *(unsigned __int8 *)(a2 + 10641);
      v336 = 2 * (v161.i32[0] >= v335);
      if (v161.i32[0] == v335)
        v336 = 1;
      v337 = (unsigned __int16 *)(v334 + 36 * v336 + 11372);
      v338 = *(_DWORD *)(a3 + 48);
      v339 = *(unsigned __int16 *)(a3 + 52);
      v340 = v339 >> 8;
      v341 = 8;
      v342 = 0xFF00000000000000;
      do
      {
        v343 = v339;
        v344 = v340 * (v337[v333] >> 6);
        v341 -= 4;
        v339 = v341 + (v344 >> 1);
        ++v333;
        v342 += 0x100000000000000;
      }
      while (HIWORD(v338) < v339);
      v345 = v343 - (v344 >> 1) - v341;
      v346 = (__clz(v345) ^ 0xFFFFFFE0) + 16;
      v347 = *(_WORD *)(a3 + 54) - v346;
      *(_WORD *)(a3 + 54) = v347;
      v348 = ((v338 - (v339 << 16) + 1) << v346) - 1;
      *(_DWORD *)(a3 + 48) = v348;
      *(_WORD *)(a3 + 52) = v345 << v346;
      v349 = v333 - 1;
      if ((v347 & 0x8000) == 0)
      {
LABEL_315:
        v377 = a3 + 16;
        v378 = *(unsigned __int8 *)(a3 + 56);
        if (*(_BYTE *)(a3 + 56))
        {
          v379 = v337[2];
          v380 = (v379 >> 4) + 4;
          v381 = *v337;
          if (v342 < 1)
            v382 = v381 - (v381 >> v380);
          else
            v382 = v381 + ((int)(0x8000 - v381) >> v380);
          *v337 = v382;
          if (v379 >= 0x20)
            v383 = v379;
          else
            v383 = v379 + 1;
          v337[2] = v383;
        }
        v384 = HIWORD(v348);
        if (v349)
        {
          v385 = 0;
          v386 = *(unsigned __int8 *)(a2 + 10640) + *(unsigned __int8 *)(a2 + 10639);
          v387 = *(unsigned __int8 *)(a2 + 10641);
          v465 = v386 == v387;
          v388 = 2 * (v386 >= v387);
          if (v465)
            v388 = 1;
          v389 = (unsigned __int16 *)(v334 + 36 * v388 + 11378);
          v390 = *(unsigned __int16 *)(a3 + 52);
          v391 = v390 >> 8;
          v392 = 8;
          v393 = 0xFF00000000000000;
          do
          {
            v394 = v390;
            v395 = v391 * (v389[v385] >> 6);
            v392 -= 4;
            v390 = v392 + (v395 >> 1);
            ++v385;
            v393 += 0x100000000000000;
          }
          while (v384 < v390);
          v396 = v394 - (v395 >> 1) - v392;
          v397 = (__clz(v396) ^ 0xFFFFFFE0) + 16;
          v398 = *(_WORD *)(a3 + 54) - v397;
          *(_WORD *)(a3 + 54) = v398;
          v399 = ((v348 - (v390 << 16) + 1) << v397) - 1;
          *(_DWORD *)(a3 + 48) = v399;
          *(_WORD *)(a3 + 52) = v396 << v397;
          v400 = v385 - 1;
          if ((v398 & 0x8000) == 0)
            goto LABEL_364;
          v401 = v398;
          v402 = *(_QWORD *)(a3 + 32);
          v403 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v403 >= v402)
          {
            v407 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_362;
          }
          v404 = 8 - v401;
          if ((8 - v401) >= 7)
            v405 = 7;
          else
            v405 = 8 - v401;
          v406 = ((v405 ^ 0xFu) - v401) >> 3;
          if (v406 >= ~(unint64_t)v403 + v402)
            v406 = ~(unint64_t)v403 + v402;
          if (v406 >= 0xF)
          {
            v431 = v406 + 1;
            v432 = (v406 + 1) & 0x3FFFFFF0;
            v407 = &v403->u8[v432];
            v433 = 0uLL;
            v434 = (int16x8_t)(unsigned __int16)v401;
            v435 = (int8x16_t)v399;
            v436 = vdupq_n_s32(v404);
            v437 = (uint32x4_t)vaddq_s32(v436, (int32x4_t)xmmword_208F3A6C0);
            v438 = (uint32x4_t)vaddq_s32(v436, (int32x4_t)xmmword_208F3A6D0);
            v439 = (uint32x4_t)vaddq_s32(v436, (int32x4_t)xmmword_208F3A6A0);
            v440 = (uint32x4_t)vaddq_s32(v436, (int32x4_t)xmmword_208F3A6B0);
            v441.i64[0] = 0x8000800080008;
            v441.i64[1] = 0x8000800080008;
            v442.i64[0] = 0x7F0000007FLL;
            v442.i64[1] = 0x7F0000007FLL;
            v443 = v432;
            v444 = 0uLL;
            v445 = 0uLL;
            v446 = 0uLL;
            do
            {
              v447 = *v403++;
              v445 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v447, (int8x16_t)xmmword_208F04F30), v438), v445);
              v444 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v447, (int8x16_t)xmmword_208F04F40), v439), v444);
              v435 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v447, (int8x16_t)xmmword_208F04F50), v440), v435);
              v446 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v447, (int8x16_t)xmmword_208F04F20), v437), v446);
              v434 = vaddq_s16(v434, v441);
              v433 = vaddq_s16(v433, v441);
              v440 = (uint32x4_t)vaddq_s32((int32x4_t)v440, v442);
              v439 = (uint32x4_t)vaddq_s32((int32x4_t)v439, v442);
              v438 = (uint32x4_t)vaddq_s32((int32x4_t)v438, v442);
              v437 = (uint32x4_t)vaddq_s32((int32x4_t)v437, v442);
              v443 -= 16;
            }
            while (v443);
            v448 = (unint64_t)v403 < v402;
            v449 = veorq_s8(veorq_s8(v435, v445), veorq_s8(v444, v446));
            *(int8x8_t *)v449.i8 = veor_s8(*(int8x8_t *)v449.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v449, v449, 8uLL));
            v399 = v449.i32[0] ^ v449.i32[1];
            v161 = vaddq_s16(v434, v433);
            v161.i16[0] = vaddvq_s16(v161);
            LOWORD(v401) = v161.i16[0];
            if (v431 == v432)
              goto LABEL_361;
            v404 -= 8 * v432;
          }
          else
          {
            v407 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v450 = *v407++;
            v399 ^= v450 << v404;
            LOWORD(v401) = v401 + 8;
            v448 = (unint64_t)v407 < v402;
            v89 = v404 >= 8;
            v404 -= 8;
          }
          while (v89 && (unint64_t)v407 < v402);
LABEL_361:
          if (v448)
          {
LABEL_363:
            *(_DWORD *)(a3 + 48) = v399;
            *(_WORD *)(a3 + 54) = v401;
            *(_QWORD *)(a3 + 40) = v407;
LABEL_364:
            if (v378)
            {
              v451 = v389[2];
              v452 = (v451 >> 4) + 4;
              v453 = *v389;
              if (v393 < 1)
                v454 = v453 - (v453 >> v452);
              else
                v454 = v453 + ((int)(0x8000 - v453) >> v452);
              *v389 = v454;
              if (v451 < 0x20)
                LOWORD(v451) = v451 + 1;
              v389[2] = v451;
            }
            if (v400)
            {
              v169 = 7;
              goto LABEL_429;
            }
            v455 = (unsigned __int8 *)(a1 + 15201);
            v456 = *(unsigned __int8 *)(a2 + 10639);
            v457 = *(unsigned __int8 *)(a2 + 10640);
            v465 = v456 == v457;
            v458 = 2 * (v456 >= v457);
            if (v465)
              v458 = 1;
            v459 = (unsigned __int16 *)(v334 + 36 * v458 + 11402);
            v460 = od_ec_decode_cdf_q15(v377, v459, 2);
            if (*(_BYTE *)(a3 + 56))
            {
              v461 = v459[2];
              v462 = (v461 >> 4) + 4;
              v463 = *v459;
              if (v460 << 56 < 1)
                v464 = v463 - (v463 >> v462);
              else
                v464 = v463 + ((int)(0x8000 - v463) >> v462);
              *v459 = v464;
              if (v461 < 0x20)
                LOWORD(v461) = v461 + 1;
              v459[2] = v461;
            }
            v465 = (_DWORD)v460 == 0;
            v466 = 5;
LABEL_425:
            if (v465)
              v169 = v466;
            else
              v169 = v466 + 1;
            v96 = v455;
            goto LABEL_429;
          }
LABEL_362:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v401 + 0x4000;
          LOWORD(v401) = 0x4000;
          goto LABEL_363;
        }
        v408 = 0;
        v409 = *(unsigned __int8 *)(a2 + 10636) + *(unsigned __int8 *)(a2 + 10635);
        v410 = *(unsigned __int8 *)(a2 + 10638) + *(unsigned __int8 *)(a2 + 10637);
        v465 = v409 == v410;
        v411 = 2 * (v409 >= v410);
        if (v465)
          v411 = 1;
        v412 = (unsigned __int16 *)(v334 + 36 * v411 + 11384);
        v413 = *(unsigned __int16 *)(a3 + 52);
        v414 = v413 >> 8;
        v415 = 8;
        v416 = 0xFF00000000000000;
        do
        {
          v417 = v413;
          v418 = v414 * (v412[v408] >> 6);
          v415 -= 4;
          v413 = v415 + (v418 >> 1);
          ++v408;
          v416 += 0x100000000000000;
        }
        while (v384 < v413);
        v419 = v417 - (v418 >> 1) - v415;
        v420 = (__clz(v419) ^ 0xFFFFFFE0) + 16;
        v421 = *(_WORD *)(a3 + 54) - v420;
        *(_WORD *)(a3 + 54) = v421;
        v422 = ((v348 - (v413 << 16) + 1) << v420) - 1;
        *(_DWORD *)(a3 + 48) = v422;
        *(_WORD *)(a3 + 52) = v419 << v420;
        v423 = v408 - 1;
        if ((v421 & 0x8000) == 0)
        {
LABEL_395:
          if (v378)
          {
            v487 = v412[2];
            v488 = (v487 >> 4) + 4;
            v489 = *v412;
            if (v416 < 1)
              v490 = v489 - (v489 >> v488);
            else
              v490 = v489 + ((int)(0x8000 - v489) >> v488);
            *v412 = v490;
            if (v487 < 0x20)
              LOWORD(v487) = v487 + 1;
            v412[2] = v487;
          }
          v455 = (unsigned __int8 *)(a1 + 15201);
          if (v423)
          {
            v491 = *(unsigned __int8 *)(a2 + 10637);
            v492 = *(unsigned __int8 *)(a2 + 10638);
            v465 = v491 == v492;
            v493 = 2 * (v491 >= v492);
            if (v465)
              v493 = 1;
            v494 = (unsigned __int16 *)(v334 + 36 * v493 + 11396);
            v495 = od_ec_decode_cdf_q15(v377, v494, 2);
            if (*(_BYTE *)(a3 + 56))
            {
              v496 = v494[2];
              v497 = (v496 >> 4) + 4;
              v498 = *v494;
              if (v495 << 56 < 1)
                v499 = v498 - (v498 >> v497);
              else
                v499 = v498 + ((int)(0x8000 - v498) >> v497);
              *v494 = v499;
              if (v496 < 0x20)
                LOWORD(v496) = v496 + 1;
              v494[2] = v496;
            }
            v465 = (_DWORD)v495 == 0;
            v466 = 3;
          }
          else
          {
            v500 = *(unsigned __int8 *)(a2 + 10635);
            v501 = *(unsigned __int8 *)(a2 + 10636);
            v465 = v500 == v501;
            v502 = 2 * (v500 >= v501);
            if (v465)
              v502 = 1;
            v503 = (unsigned __int16 *)(v334 + 36 * v502 + 11390);
            v504 = od_ec_decode_cdf_q15(v377, v503, 2);
            if (*(_BYTE *)(a3 + 56))
            {
              v505 = v503[2];
              v506 = (v505 >> 4) + 4;
              v507 = *v503;
              if (v504 << 56 < 1)
                v508 = v507 - (v507 >> v506);
              else
                v508 = v507 + ((int)(0x8000 - v507) >> v506);
              *v503 = v508;
              if (v505 < 0x20)
                LOWORD(v505) = v505 + 1;
              v503[2] = v505;
            }
            v465 = (_DWORD)v504 == 0;
            v466 = 1;
          }
          goto LABEL_425;
        }
        v424 = v421;
        v425 = *(_QWORD *)(a3 + 32);
        v426 = *(int8x16_t **)(a3 + 40);
        if ((unint64_t)v426 >= v425)
        {
          v430 = *(unsigned __int8 **)(a3 + 40);
          goto LABEL_393;
        }
        v427 = 8 - v424;
        if ((8 - v424) >= 7)
          v428 = 7;
        else
          v428 = 8 - v424;
        v429 = ((v428 ^ 0xFu) - v424) >> 3;
        if (v429 >= ~(unint64_t)v426 + v425)
          v429 = ~(unint64_t)v426 + v425;
        if (v429 >= 0xF)
        {
          v467 = v429 + 1;
          v468 = (v429 + 1) & 0x3FFFFFF0;
          v430 = &v426->u8[v468];
          v469 = 0uLL;
          v470 = (int16x8_t)(unsigned __int16)v424;
          v471 = (int8x16_t)v422;
          v472 = vdupq_n_s32(v427);
          v473 = (uint32x4_t)vaddq_s32(v472, (int32x4_t)xmmword_208F3A6C0);
          v474 = (uint32x4_t)vaddq_s32(v472, (int32x4_t)xmmword_208F3A6D0);
          v475 = (uint32x4_t)vaddq_s32(v472, (int32x4_t)xmmword_208F3A6A0);
          v476 = (uint32x4_t)vaddq_s32(v472, (int32x4_t)xmmword_208F3A6B0);
          v477.i64[0] = 0x8000800080008;
          v477.i64[1] = 0x8000800080008;
          v478.i64[0] = 0x7F0000007FLL;
          v478.i64[1] = 0x7F0000007FLL;
          v479 = v468;
          v480 = 0uLL;
          v481 = 0uLL;
          v482 = 0uLL;
          do
          {
            v483 = *v426++;
            v481 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v483, (int8x16_t)xmmword_208F04F30), v474), v481);
            v480 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v483, (int8x16_t)xmmword_208F04F40), v475), v480);
            v471 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v483, (int8x16_t)xmmword_208F04F50), v476), v471);
            v482 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v483, (int8x16_t)xmmword_208F04F20), v473), v482);
            v470 = vaddq_s16(v470, v477);
            v469 = vaddq_s16(v469, v477);
            v476 = (uint32x4_t)vaddq_s32((int32x4_t)v476, v478);
            v475 = (uint32x4_t)vaddq_s32((int32x4_t)v475, v478);
            v474 = (uint32x4_t)vaddq_s32((int32x4_t)v474, v478);
            v473 = (uint32x4_t)vaddq_s32((int32x4_t)v473, v478);
            v479 -= 16;
          }
          while (v479);
          v484 = (unint64_t)v426 < v425;
          v485 = veorq_s8(veorq_s8(v471, v481), veorq_s8(v480, v482));
          *(int8x8_t *)v485.i8 = veor_s8(*(int8x8_t *)v485.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v485, v485, 8uLL));
          v422 = v485.i32[0] ^ v485.i32[1];
          LOWORD(v424) = vaddvq_s16(vaddq_s16(v470, v469));
          if (v467 == v468)
            goto LABEL_392;
          v427 -= 8 * v468;
        }
        else
        {
          v430 = *(unsigned __int8 **)(a3 + 40);
        }
        do
        {
          v486 = *v430++;
          v422 ^= v486 << v427;
          LOWORD(v424) = v424 + 8;
          v484 = (unint64_t)v430 < v425;
          v89 = v427 >= 8;
          v427 -= 8;
        }
        while (v89 && (unint64_t)v430 < v425);
LABEL_392:
        if (v484)
        {
LABEL_394:
          *(_DWORD *)(a3 + 48) = v422;
          *(_WORD *)(a3 + 54) = v424;
          *(_QWORD *)(a3 + 40) = v430;
          goto LABEL_395;
        }
LABEL_393:
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v424 + 0x4000;
        LOWORD(v424) = 0x4000;
        goto LABEL_394;
      }
      v350 = v347;
      v351 = *(_QWORD *)(a3 + 32);
      v352 = *(int8x16_t **)(a3 + 40);
      if ((unint64_t)v352 >= v351)
      {
        v356 = *(unsigned __int8 **)(a3 + 40);
        goto LABEL_313;
      }
      v353 = 8 - v350;
      if ((8 - v350) >= 7)
        v354 = 7;
      else
        v354 = 8 - v350;
      v355 = ((v354 ^ 0xFu) - v350) >> 3;
      if (v355 >= ~(unint64_t)v352 + v351)
        v355 = ~(unint64_t)v352 + v351;
      if (v355 >= 0xF)
      {
        v357 = v355 + 1;
        v358 = (v355 + 1) & 0x3FFFFFF0;
        v356 = &v352->u8[v358];
        v359 = 0uLL;
        v360 = (int16x8_t)(unsigned __int16)v350;
        v361 = (int8x16_t)v348;
        v362 = vdupq_n_s32(v353);
        v363 = (uint32x4_t)vaddq_s32(v362, (int32x4_t)xmmword_208F3A6C0);
        v364 = (uint32x4_t)vaddq_s32(v362, (int32x4_t)xmmword_208F3A6D0);
        v365 = (uint32x4_t)vaddq_s32(v362, (int32x4_t)xmmword_208F3A6A0);
        v366 = (uint32x4_t)vaddq_s32(v362, (int32x4_t)xmmword_208F3A6B0);
        v367.i64[0] = 0x8000800080008;
        v367.i64[1] = 0x8000800080008;
        v368.i64[0] = 0x7F0000007FLL;
        v368.i64[1] = 0x7F0000007FLL;
        v369 = v358;
        v370 = 0uLL;
        v371 = 0uLL;
        v372 = 0uLL;
        do
        {
          v373 = *v352++;
          v371 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v373, (int8x16_t)xmmword_208F04F30), v364), v371);
          v370 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v373, (int8x16_t)xmmword_208F04F40), v365), v370);
          v361 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v373, (int8x16_t)xmmword_208F04F50), v366), v361);
          v372 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v373, (int8x16_t)xmmword_208F04F20), v363), v372);
          v360 = vaddq_s16(v360, v367);
          v359 = vaddq_s16(v359, v367);
          v366 = (uint32x4_t)vaddq_s32((int32x4_t)v366, v368);
          v365 = (uint32x4_t)vaddq_s32((int32x4_t)v365, v368);
          v364 = (uint32x4_t)vaddq_s32((int32x4_t)v364, v368);
          v363 = (uint32x4_t)vaddq_s32((int32x4_t)v363, v368);
          v369 -= 16;
        }
        while (v369);
        v374 = (unint64_t)v352 < v351;
        v375 = veorq_s8(veorq_s8(v361, v371), veorq_s8(v370, v372));
        *(int8x8_t *)v375.i8 = veor_s8(*(int8x8_t *)v375.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v375, v375, 8uLL));
        v348 = v375.i32[0] ^ v375.i32[1];
        v161 = vaddq_s16(v360, v359);
        v161.i16[0] = vaddvq_s16(v161);
        LOWORD(v350) = v161.i16[0];
        if (v357 == v358)
          goto LABEL_312;
        v353 -= 8 * v358;
      }
      else
      {
        v356 = *(unsigned __int8 **)(a3 + 40);
      }
      do
      {
        v376 = *v356++;
        v348 ^= v376 << v353;
        LOWORD(v350) = v350 + 8;
        v374 = (unint64_t)v356 < v351;
        v89 = v353 >= 8;
        v353 -= 8;
      }
      while (v89 && (unint64_t)v356 < v351);
LABEL_312:
      if (v374)
      {
LABEL_314:
        *(_DWORD *)(a3 + 48) = v348;
        *(_WORD *)(a3 + 54) = v350;
        *(_QWORD *)(a3 + 40) = v356;
        goto LABEL_315;
      }
LABEL_313:
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v350 + 0x4000;
      LOWORD(v350) = 0x4000;
      goto LABEL_314;
    }
    v178 = *v96;
    if (v178 != 2)
    {
LABEL_276:
      if (v178)
      {
        if (v178 == 1)
        {
          comp_reference_type_context = av1_get_comp_reference_type_context(a2);
          v312 = 0;
          v313 = *(_QWORD *)(a2 + 10648);
          v314 = (unsigned __int16 *)(v313 + 6 * comp_reference_type_context + 11480);
          v315 = *(_DWORD *)(a3 + 48);
          v316 = *(unsigned __int16 *)(a3 + 52);
          v317 = v316 >> 8;
          v318 = 8;
          v319 = 0xFF00000000000000;
          do
          {
            v320 = v316;
            v321 = v317 * (v314[v312] >> 6);
            v318 -= 4;
            v316 = v318 + (v321 >> 1);
            ++v312;
            v319 += 0x100000000000000;
          }
          while (HIWORD(v315) < v316);
          v322 = v320 - (v321 >> 1) - v318;
          v323 = __clz(v322);
          v324 = (v323 ^ 0xFFE0) + 16;
          v325 = *(_WORD *)(a3 + 54) - v324;
          *(_WORD *)(a3 + 54) = v325;
          v326 = ((v315 - (v316 << 16) + 1) << ((v323 ^ 0xE0) + 16)) - 1;
          *(_DWORD *)(a3 + 48) = v326;
          *(_WORD *)(a3 + 52) = v322 << v324;
          if ((v325 & 0x8000) == 0)
            goto LABEL_1340;
          v327 = *(_QWORD *)(a3 + 32);
          v328 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v328 >= v327)
          {
            v332 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_1338;
          }
          v329 = 8 - v325;
          if (v329 >= 7)
            v330 = 7;
          else
            v330 = 8 - v325;
          v331 = ((v330 ^ 0xFu) - v325) >> 3;
          if (v331 >= ~(unint64_t)v328 + v327)
            v331 = ~(unint64_t)v328 + v327;
          if (v331 >= 0xF)
          {
            v1273 = v331 + 1;
            v1274 = (v331 + 1) & 0x3FFFFFF0;
            v332 = &v328->u8[v1274];
            v1275 = 0uLL;
            v1276 = (int16x8_t)(unsigned __int16)v325;
            v1277 = (int8x16_t)v326;
            v1278 = vdupq_n_s32(v329);
            v1279 = (uint32x4_t)vaddq_s32(v1278, (int32x4_t)xmmword_208F3A6C0);
            v1280 = (uint32x4_t)vaddq_s32(v1278, (int32x4_t)xmmword_208F3A6D0);
            v1281 = (uint32x4_t)vaddq_s32(v1278, (int32x4_t)xmmword_208F3A6A0);
            v1282 = (uint32x4_t)vaddq_s32(v1278, (int32x4_t)xmmword_208F3A6B0);
            v1283.i64[0] = 0x8000800080008;
            v1283.i64[1] = 0x8000800080008;
            v1284.i64[0] = 0x7F0000007FLL;
            v1284.i64[1] = 0x7F0000007FLL;
            v1285 = v1274;
            v1286 = 0uLL;
            v1287 = 0uLL;
            v1288 = 0uLL;
            do
            {
              v1289 = *v328++;
              v1287 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1289, (int8x16_t)xmmword_208F04F30), v1280), v1287);
              v1286 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1289, (int8x16_t)xmmword_208F04F40), v1281), v1286);
              v1277 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1289, (int8x16_t)xmmword_208F04F50), v1282), v1277);
              v1288 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1289, (int8x16_t)xmmword_208F04F20), v1279), v1288);
              v1276 = vaddq_s16(v1276, v1283);
              v1275 = vaddq_s16(v1275, v1283);
              v1282 = (uint32x4_t)vaddq_s32((int32x4_t)v1282, v1284);
              v1281 = (uint32x4_t)vaddq_s32((int32x4_t)v1281, v1284);
              v1280 = (uint32x4_t)vaddq_s32((int32x4_t)v1280, v1284);
              v1279 = (uint32x4_t)vaddq_s32((int32x4_t)v1279, v1284);
              v1285 -= 16;
            }
            while (v1285);
            v1290 = (unint64_t)v328 < v327;
            v1291 = veorq_s8(veorq_s8(v1277, v1287), veorq_s8(v1286, v1288));
            *(int8x8_t *)v1291.i8 = veor_s8(*(int8x8_t *)v1291.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1291, v1291, 8uLL));
            v326 = v1291.i32[0] ^ v1291.i32[1];
            v311 = vaddq_s16(v1276, v1275);
            v311.i16[0] = vaddvq_s16(v311);
            v325 = v311.i16[0];
            if (v1273 == v1274)
              goto LABEL_1337;
            v329 -= 8 * v1274;
          }
          else
          {
            v332 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v1292 = *v332++;
            v326 ^= v1292 << v329;
            v325 += 8;
            v1290 = (unint64_t)v332 < v327;
            v89 = v329 >= 8;
            v329 -= 8;
          }
          while (v89 && (unint64_t)v332 < v327);
LABEL_1337:
          if (v1290)
          {
LABEL_1339:
            *(_DWORD *)(a3 + 48) = v326;
            *(_WORD *)(a3 + 54) = v325;
            *(_QWORD *)(a3 + 40) = v332;
LABEL_1340:
            v1293 = v312 - 1;
            if (*(_BYTE *)(a3 + 56))
            {
              v1294 = v314[2];
              v1295 = (v1294 >> 4) + 4;
              v1296 = *v314;
              if (v319 < 1)
                v1297 = v1296 - (v1296 >> v1295);
              else
                v1297 = v1296 + ((int)(0x8000 - v1296) >> v1295);
              *v314 = v1297;
              if (v1294 >= 0x20)
                v1298 = v1294;
              else
                v1298 = v1294 + 1;
              v314[2] = v1298;
            }
            if (v1293)
            {
              v1299 = *(unsigned __int8 *)(a2 + 10636) + *(unsigned __int8 *)(a2 + 10635);
              v1300 = *(unsigned __int8 *)(a2 + 10638) + *(unsigned __int8 *)(a2 + 10637);
              v465 = v1299 == v1300;
              v1301 = 2 * (v1299 >= v1300);
              if (v465)
                v1301 = 1;
              v1302 = (unsigned __int16 *)(v313 + 18 * v1301 + 11564);
              v1303 = od_ec_decode_cdf_q15(a3 + 16, v1302, 2);
              if (*(_BYTE *)(a3 + 56))
              {
                v1304 = v1302[2];
                v1305 = (v1304 >> 4) + 4;
                v1306 = *v1302;
                if (v1303 << 56 < 1)
                  v1307 = v1306 - (v1306 >> v1305);
                else
                  v1307 = v1306 + ((int)(0x8000 - v1306) >> v1305);
                *v1302 = v1307;
                if (v1304 < 0x20)
                  LOWORD(v1304) = v1304 + 1;
                v1302[2] = v1304;
              }
              v1314 = *(_QWORD *)(a2 + 10648);
              if ((_DWORD)v1303)
              {
                v1315 = *(unsigned __int8 *)(a2 + 10637);
                v1316 = *(unsigned __int8 *)(a2 + 10638);
                v465 = v1315 == v1316;
                v1317 = 2 * (v1315 >= v1316);
                if (v465)
                  v1317 = 1;
                v1318 = (unsigned __int16 *)(v1314 + 18 * v1317 + 11576);
                v1319 = od_ec_decode_cdf_q15(a3 + 16, v1318, 2);
                if (*(_BYTE *)(a3 + 56))
                {
                  v1320 = v1318[2];
                  v1321 = (v1320 >> 4) + 4;
                  v1322 = *v1318;
                  if (v1319 << 56 < 1)
                    v1323 = v1322 - (v1322 >> v1321);
                  else
                    v1323 = v1322 + ((int)(0x8000 - v1322) >> v1321);
                  *v1318 = v1323;
                  if (v1320 < 0x20)
                    LOWORD(v1320) = v1320 + 1;
                  v1318[2] = v1320;
                }
                v1333 = (_DWORD)v1319 == 0;
                v1334 = 3;
              }
              else
              {
                v1324 = *(unsigned __int8 *)(a2 + 10635);
                v1325 = *(unsigned __int8 *)(a2 + 10636);
                v465 = v1324 == v1325;
                v1326 = 2 * (v1324 >= v1325);
                if (v465)
                  v1326 = 1;
                v1327 = (unsigned __int16 *)(v1314 + 18 * v1326 + 11570);
                v1328 = od_ec_decode_cdf_q15(a3 + 16, v1327, 2);
                if (*(_BYTE *)(a3 + 56))
                {
                  v1329 = v1327[2];
                  v1330 = (v1329 >> 4) + 4;
                  v1331 = *v1327;
                  if (v1328 << 56 < 1)
                    v1332 = v1331 - (v1331 >> v1330);
                  else
                    v1332 = v1331 + ((int)(0x8000 - v1331) >> v1330);
                  *v1327 = v1332;
                  if (v1329 < 0x20)
                    LOWORD(v1329) = v1329 + 1;
                  v1327[2] = v1329;
                }
                v1333 = (_DWORD)v1328 == 0;
                v1334 = 1;
              }
              if (!v1333)
                ++v1334;
              v13[16] = v1334;
              v1365 = *(unsigned __int8 *)(a2 + 10640) + *(unsigned __int8 *)(a2 + 10639);
              v1366 = *(unsigned __int8 *)(a2 + 10641);
              v465 = v1365 == v1366;
              v1367 = 2 * (v1365 >= v1366);
              if (v465)
                v1367 = 1;
              v1368 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12 * v1367 + 11618);
              v1369 = od_ec_decode_cdf_q15(a3 + 16, v1368, 2);
              if (*(_BYTE *)(a3 + 56))
              {
                v1370 = v1368[2];
                v1371 = (v1370 >> 4) + 4;
                v1372 = *v1368;
                if (v1369 << 56 < 1)
                  v1373 = v1372 - (v1372 >> v1371);
                else
                  v1373 = v1372 + ((int)(0x8000 - v1372) >> v1371);
                *v1368 = v1373;
                if (v1370 < 0x20)
                  LOWORD(v1370) = v1370 + 1;
                v1368[2] = v1370;
              }
              if ((_DWORD)v1369)
              {
                v170 = 7;
              }
              else
              {
                v1374 = *(unsigned __int8 *)(a2 + 10639);
                v1375 = *(unsigned __int8 *)(a2 + 10640);
                v465 = v1374 == v1375;
                v1376 = 2 * (v1374 >= v1375);
                if (v465)
                  v1376 = 1;
                v1377 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 12 * v1376 + 11624);
                v1378 = od_ec_decode_cdf_q15(a3 + 16, v1377, 2);
                if (*(_BYTE *)(a3 + 56))
                {
                  v1379 = v1377[2];
                  v1380 = (v1379 >> 4) + 4;
                  v1381 = *v1377;
                  if (v1378 << 56 < 1)
                    v1382 = v1381 - (v1381 >> v1380);
                  else
                    v1382 = v1381 + ((int)(0x8000 - v1381) >> v1380);
                  *v1377 = v1382;
                  if (v1379 < 0x20)
                    LOWORD(v1379) = v1379 + 1;
                  v1377[2] = v1379;
                }
                if ((_DWORD)v1378)
                  v170 = 6;
                else
                  v170 = 5;
              }
              v13[17] = v170;
LABEL_1457:
              v96 = (unsigned __int8 *)(a1 + 15201);
              v1397 = (char *)(v13 + 17);
              v169 = v13[16];
              if (v169 > 4)
                goto LABEL_1458;
              goto LABEL_143;
            }
            v1308 = (unsigned __int16 *)(v313
                                       + 18 * (int)av1_get_pred_context_uni_comp_ref_p(a2, *(uint8x8_t *)v311.i8)
                                       + 11510);
            v1309 = od_ec_decode_cdf_q15(a3 + 16, v1308, 2);
            if (*(_BYTE *)(a3 + 56))
            {
              v1310 = v1308[2];
              v1311 = (v1310 >> 4) + 4;
              v1312 = *v1308;
              if (v1309 << 56 < 1)
                v1313 = v1312 - (v1312 >> v1311);
              else
                v1313 = v1312 + ((int)(0x8000 - v1312) >> v1311);
              *v1308 = v1313;
              if (v1310 < 0x20)
                LOWORD(v1310) = v1310 + 1;
              v1308[2] = v1310;
            }
            if ((_DWORD)v1309)
            {
              *((_WORD *)v13 + 8) = 1797;
              v170 = 7;
              goto LABEL_1457;
            }
            v1335 = *(unsigned __int8 *)(a2 + 10636);
            v1336 = *(unsigned __int8 *)(a2 + 10638) + *(unsigned __int8 *)(a2 + 10637);
            v465 = v1336 == v1335;
            v1337 = 2 * (v1336 <= v1335);
            if (v465)
              v1337 = 1;
            v1338 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 18 * v1337 + 11516);
            v1339 = od_ec_decode_cdf_q15(a3 + 16, v1338, 2);
            if (*(_BYTE *)(a3 + 56))
            {
              v1340 = v1338[2];
              v1341 = (v1340 >> 4) + 4;
              v1342 = *v1338;
              if (v1339 << 56 < 1)
                v1343 = v1342 - (v1342 >> v1341);
              else
                v1343 = v1342 + ((int)(0x8000 - v1342) >> v1341);
              *v1338 = v1343;
              if (v1340 < 0x20)
                LOWORD(v1340) = v1340 + 1;
              v1338[2] = v1340;
            }
            if (!(_DWORD)v1339)
            {
              *((_WORD *)v13 + 8) = 513;
              v170 = 2;
              goto LABEL_1457;
            }
            v1384 = *(unsigned __int8 *)(a2 + 10637);
            v1385 = *(unsigned __int8 *)(a2 + 10638);
            v465 = v1384 == v1385;
            v1386 = 2 * (v1384 >= v1385);
            if (v465)
              v1386 = 1;
            v1387 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 18 * v1386 + 11522);
            v1388 = od_ec_decode_cdf_q15(a3 + 16, v1387, 2);
            if (*(_BYTE *)(a3 + 56))
            {
              v1389 = v1387[2];
              v1390 = (v1389 >> 4) + 4;
              v1391 = *v1387;
              if (v1388 << 56 < 1)
                v1392 = v1391 - (v1391 >> v1390);
              else
                v1392 = v1391 + ((int)(0x8000 - v1391) >> v1390);
              *v1387 = v1392;
              if (v1389 < 0x20)
                LOWORD(v1389) = v1389 + 1;
              v1387[2] = v1389;
            }
            v13[16] = 1;
            v96 = (unsigned __int8 *)(a1 + 15201);
            if ((_DWORD)v1388)
              v170 = 4;
            else
              v170 = 3;
            v13[17] = v170;
            v1397 = (char *)(v13 + 17);
            v169 = v13[16];
            if (v169 > 4)
              goto LABEL_1458;
LABEL_143:
            if (v170 > 4u)
            {
LABEL_144:
              v169 = v169 + 4 * v170 - 13;
LABEL_145:
              v171 = 1;
              goto LABEL_430;
            }
LABEL_1458:
            switch(v169)
            {
              case 1:
                v1383 = v170 - 2;
                if ((v170 - 2) >= 3u)
                  goto LABEL_144;
                goto LABEL_1476;
              case 2:
                if (v170 == 4)
                  v1383 = 5;
                else
                  v1383 = -1;
                if (v170 != 3)
                  goto LABEL_1475;
                v169 = 24;
                goto LABEL_145;
              case 3:
                if (v170 != 4)
                  goto LABEL_144;
                v169 = 26;
                goto LABEL_145;
              case 5:
                if (v170 == 6)
                  v1383 = 7;
                else
                  v1383 = -1;
                if (v170 == 7)
                {
                  v169 = 23;
                  goto LABEL_145;
                }
LABEL_1475:
                if (v1383 < 0)
                  goto LABEL_144;
LABEL_1476:
                v169 = v1383 + 20;
                break;
              case 6:
                if (v170 != 7)
                  goto LABEL_144;
                v169 = 28;
                goto LABEL_145;
              default:
                goto LABEL_144;
            }
            goto LABEL_145;
          }
LABEL_1338:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v325 + 0x4000;
          v325 = 0x4000;
          goto LABEL_1339;
        }
        v170 = v13[17];
        v169 = v13[16];
        v1397 = (char *)(v13 + 17);
        if (v170 < 1)
        {
LABEL_303:
          v171 = 0;
          goto LABEL_430;
        }
LABEL_142:
        if (v169 > 4)
          goto LABEL_1458;
        goto LABEL_143;
      }
      goto LABEL_289;
    }
    if (v164 && v165)
    {
      v179 = *(char *)(v163 + 17);
      if (*(char *)(v162 + 17) <= 0)
      {
        v260 = *(unsigned __int8 *)(v162 + 16);
        v261 = v260 - 5;
        if (v179 <= 0)
        {
          v180 = (v261 < 3) ^ (*(unsigned __int8 *)(v163 + 16) - 5 < 3);
          goto LABEL_245;
        }
        if (v261 < 3)
          goto LABEL_239;
        v262 = (*(unsigned __int16 *)(v162 + 167) >> 7) & 1;
        v263 = (char)v260;
      }
      else
      {
        if (v179 > 0)
        {
          v180 = 4;
          goto LABEL_245;
        }
        v263 = *(unsigned __int8 *)(v163 + 16);
        if ((v263 - 5) < 3)
        {
LABEL_239:
          v180 = 3;
          goto LABEL_245;
        }
        v262 = (*(unsigned __int16 *)(v163 + 167) >> 7) & 1;
        v263 = (char)v263;
      }
      if (v263 > 0)
        v262 = 1;
      v180 = v262 ^ 3;
LABEL_245:
      v264 = 0;
      v265 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * v180 + 11342);
      v266 = *(_DWORD *)(a3 + 48);
      v267 = *(unsigned __int16 *)(a3 + 52);
      v268 = v267 >> 8;
      v269 = 8;
      v270 = 0xFF00000000000000;
      do
      {
        v271 = v267;
        v272 = v268 * (v265[v264] >> 6);
        v269 -= 4;
        v267 = v269 + (v272 >> 1);
        ++v264;
        v270 += 0x100000000000000;
      }
      while (HIWORD(v266) < v267);
      v273 = v271 - (v272 >> 1) - v269;
      v274 = (__clz(v273) ^ 0xFFFFFFE0) + 16;
      v275 = *(_WORD *)(a3 + 54) - v274;
      *(_WORD *)(a3 + 54) = v275;
      v276 = ((v266 - (v267 << 16) + 1) << v274) - 1;
      *(_DWORD *)(a3 + 48) = v276;
      *(_WORD *)(a3 + 52) = v273 << v274;
      v277 = v264 - 1;
      if ((v275 & 0x8000) == 0)
        goto LABEL_267;
      v278 = v275;
      v279 = *(_QWORD *)(a3 + 32);
      v280 = *(int8x16_t **)(a3 + 40);
      if ((unint64_t)v280 >= v279)
      {
        v284 = *(unsigned __int8 **)(a3 + 40);
        goto LABEL_265;
      }
      v281 = 8 - v278;
      if ((8 - v278) >= 7)
        v282 = 7;
      else
        v282 = 8 - v278;
      v283 = ((v282 ^ 0xFu) - v278) >> 3;
      if (v283 >= ~(unint64_t)v280 + v279)
        v283 = ~(unint64_t)v280 + v279;
      if (v283 >= 0xF)
      {
        v285 = v283 + 1;
        v286 = (v283 + 1) & 0x3FFFFFF0;
        v284 = &v280->u8[v286];
        v287 = 0uLL;
        v288 = (int16x8_t)(unsigned __int16)v278;
        v289 = (int8x16_t)v276;
        v290 = vdupq_n_s32(v281);
        v291 = (uint32x4_t)vaddq_s32(v290, (int32x4_t)xmmword_208F3A6C0);
        v292 = (uint32x4_t)vaddq_s32(v290, (int32x4_t)xmmword_208F3A6D0);
        v293 = (uint32x4_t)vaddq_s32(v290, (int32x4_t)xmmword_208F3A6A0);
        v294 = (uint32x4_t)vaddq_s32(v290, (int32x4_t)xmmword_208F3A6B0);
        v295.i64[0] = 0x8000800080008;
        v295.i64[1] = 0x8000800080008;
        v296.i64[0] = 0x7F0000007FLL;
        v296.i64[1] = 0x7F0000007FLL;
        v297 = v286;
        v298 = 0uLL;
        v299 = 0uLL;
        v300 = 0uLL;
        do
        {
          v301 = *v280++;
          v299 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_208F04F30), v292), v299);
          v298 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_208F04F40), v293), v298);
          v289 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_208F04F50), v294), v289);
          v300 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_208F04F20), v291), v300);
          v288 = vaddq_s16(v288, v295);
          v287 = vaddq_s16(v287, v295);
          v294 = (uint32x4_t)vaddq_s32((int32x4_t)v294, v296);
          v293 = (uint32x4_t)vaddq_s32((int32x4_t)v293, v296);
          v292 = (uint32x4_t)vaddq_s32((int32x4_t)v292, v296);
          v291 = (uint32x4_t)vaddq_s32((int32x4_t)v291, v296);
          v297 -= 16;
        }
        while (v297);
        v302 = (unint64_t)v280 < v279;
        v303 = veorq_s8(veorq_s8(v289, v299), veorq_s8(v298, v300));
        *(int8x8_t *)v303.i8 = veor_s8(*(int8x8_t *)v303.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v303, v303, 8uLL));
        v276 = v303.i32[0] ^ v303.i32[1];
        v161 = vaddq_s16(v288, v287);
        v161.i16[0] = vaddvq_s16(v161);
        LOWORD(v278) = v161.i16[0];
        if (v285 == v286)
          goto LABEL_264;
        v281 -= 8 * v286;
      }
      else
      {
        v284 = *(unsigned __int8 **)(a3 + 40);
      }
      do
      {
        v304 = *v284++;
        v276 ^= v304 << v281;
        LOWORD(v278) = v278 + 8;
        v302 = (unint64_t)v284 < v279;
        v89 = v281 >= 8;
        v281 -= 8;
      }
      while (v89 && (unint64_t)v284 < v279);
LABEL_264:
      if (v302)
      {
LABEL_266:
        *(_DWORD *)(a3 + 48) = v276;
        *(_WORD *)(a3 + 54) = v278;
        *(_QWORD *)(a3 + 40) = v284;
LABEL_267:
        if (*(_BYTE *)(a3 + 56))
        {
          v305 = v265[2];
          v306 = (v305 >> 4) + 4;
          v307 = *v265;
          if (v270 < 1)
            v308 = v307 - (v307 >> v306);
          else
            v308 = v307 + ((int)(0x8000 - v307) >> v306);
          *v265 = v308;
          if (v305 >= 0x20)
            v309 = v305;
          else
            v309 = v305 + 1;
          v265[2] = v309;
        }
        v178 = v277;
        goto LABEL_276;
      }
LABEL_265:
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v278 + 0x4000;
      LOWORD(v278) = 0x4000;
      goto LABEL_266;
    }
    if (!(v165 | v164))
    {
      v180 = 1;
      goto LABEL_245;
    }
    if (v164)
      v163 = v162;
    if (*(char *)(v163 + 17) <= 0)
    {
      v180 = *(unsigned __int8 *)(v163 + 16) - 5 < 3;
      goto LABEL_245;
    }
    goto LABEL_239;
  }
  *((_WORD *)v13 + 8) = -256;
  v156 = *(_QWORD *)(a2 + 10648);
  intra_mode = read_intra_mode(a3, (unsigned __int16 *)(v156 + 28 * size_group_lookup_2[v155] + 12726));
  angle_delta = 0;
  v13[2] = intra_mode;
  if (v155 >= 3 && intra_mode - 9 >= 0xFFFFFFF8)
    angle_delta = read_angle_delta(a3, (unsigned __int16 *)(v156 + 16 * intra_mode + 14870));
  v13[88] = angle_delta;
  v159 = *(_QWORD *)(v11 + 5688);
  if (!*(_BYTE *)(v159 + 77) && *(_BYTE *)(a2 + 12))
  {
    v172 = **(unsigned __int8 ***)(a2 + 7864);
    v173 = *v172;
    if (*(_DWORD *)(a2 + 4 * (*(_WORD *)(v172 + 167) & 7) + 10692))
      LOBYTE(v174) = av1_ss_size_lookup[4 * v173 + 2 * *(int *)(a2 + 2628) + *(int *)(a2 + 2632)] == 0;
    else
      v174 = 0xF03FFuLL >> v173;
    v181 = 0;
    v182 = v156 + 390 * (v174 & 1) + 30 * v13[2] + 12838;
    if ((v174 & 1) != 0)
      v183 = 14;
    else
      v183 = 13;
    v184 = *(_DWORD *)(a3 + 48);
    v185 = *(unsigned __int16 *)(a3 + 52);
    v186 = v185 >> 8;
    v187 = 4 * v183;
    v188 = 0xFF00000000000000;
    do
    {
      v189 = v185;
      v190 = v186 * (*(unsigned __int16 *)(v182 + 2 * v181) >> 6);
      v187 -= 4;
      v185 = v187 + (v190 >> 1);
      ++v181;
      v188 += 0x100000000000000;
    }
    while (HIWORD(v184) < v185);
    v191 = v189 - (v190 >> 1) - v187;
    v192 = __clz(v191);
    v193 = (v192 ^ 0xFFE0) + 16;
    v194 = *(_WORD *)(a3 + 54) - v193;
    *(_WORD *)(a3 + 54) = v194;
    v195 = ((v184 - (v185 << 16) + 1) << ((v192 ^ 0xE0) + 16)) - 1;
    *(_DWORD *)(a3 + 48) = v195;
    *(_WORD *)(a3 + 52) = v191 << v193;
    v196 = v181 - 1;
    if ((v194 & 0x8000) == 0)
    {
LABEL_209:
      if (*(_BYTE *)(a3 + 56))
      {
        v246 = 0;
        v247 = *(unsigned __int16 *)(v182 + 2 * v183);
        v248 = (v247 >> 4) + 5;
        v249 = v188 >> 56;
        do
        {
          v250 = *(unsigned __int16 *)(v182 + 2 * v246);
          v251 = v250 - (v250 >> v248);
          v252 = v250 + ((int)(0x8000 - v250) >> v248);
          if (v246 >= v249)
            LOWORD(v252) = v251;
          *(_WORD *)(v182 + 2 * v246++) = v252;
        }
        while ((_DWORD)v183 - 1 != v246);
        v253 = 2 * v183;
        v254 = *(_WORD *)(v182 + v253);
        if (v247 < 0x20)
          ++v254;
        *(_WORD *)(v182 + v253) = v254;
      }
      v13[3] = v196;
      if (v196 == 13)
      {
        v13[93] = read_cfl_alphas(*(unsigned __int16 **)(a2 + 10648), a3, v13 + 92);
        v196 = v13[3];
      }
      v255 = 0;
      if (v155 >= 3)
      {
        v256 = get_uv_mode_uv2y_1[v196];
        if ((v256 - 9) >= 0xFFFFFFF8)
          v255 = read_angle_delta(a3, (unsigned __int16 *)(v156 + 16 * v256 + 14870));
      }
      v13[89] = v255;
      if (*(_BYTE *)(*(_QWORD *)(v11 + 5688) + 77))
        goto LABEL_226;
      goto LABEL_223;
    }
    v197 = *(_QWORD *)(a3 + 32);
    v198 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v198 >= v197)
    {
      v202 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_207;
    }
    v199 = 8 - v194;
    if (v199 >= 7)
      v200 = 7;
    else
      v200 = 8 - v194;
    v201 = ((v200 ^ 0xFu) - v194) >> 3;
    if (v201 >= ~(unint64_t)v198 + v197)
      v201 = ~(unint64_t)v198 + v197;
    if (v201 >= 0xF)
    {
      v226 = v201 + 1;
      v227 = (v201 + 1) & 0x3FFFFFF0;
      v202 = &v198->u8[v227];
      v228 = 0uLL;
      v229 = (int16x8_t)(unsigned __int16)v194;
      v230 = (int8x16_t)v195;
      v231 = vdupq_n_s32(v199);
      v232 = (uint32x4_t)vaddq_s32(v231, (int32x4_t)xmmword_208F3A6C0);
      v233 = (uint32x4_t)vaddq_s32(v231, (int32x4_t)xmmword_208F3A6D0);
      v234 = (uint32x4_t)vaddq_s32(v231, (int32x4_t)xmmword_208F3A6A0);
      v235 = (uint32x4_t)vaddq_s32(v231, (int32x4_t)xmmword_208F3A6B0);
      v236.i64[0] = 0x8000800080008;
      v236.i64[1] = 0x8000800080008;
      v237.i64[0] = 0x7F0000007FLL;
      v237.i64[1] = 0x7F0000007FLL;
      v238 = v227;
      v239 = 0uLL;
      v240 = 0uLL;
      v241 = 0uLL;
      do
      {
        v242 = *v198++;
        v240 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_208F04F30), v233), v240);
        v239 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_208F04F40), v234), v239);
        v230 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_208F04F50), v235), v230);
        v241 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_208F04F20), v232), v241);
        v229 = vaddq_s16(v229, v236);
        v228 = vaddq_s16(v228, v236);
        v235 = (uint32x4_t)vaddq_s32((int32x4_t)v235, v237);
        v234 = (uint32x4_t)vaddq_s32((int32x4_t)v234, v237);
        v233 = (uint32x4_t)vaddq_s32((int32x4_t)v233, v237);
        v232 = (uint32x4_t)vaddq_s32((int32x4_t)v232, v237);
        v238 -= 16;
      }
      while (v238);
      v243 = (unint64_t)v198 < v197;
      v244 = veorq_s8(veorq_s8(v230, v240), veorq_s8(v239, v241));
      *(int8x8_t *)v244.i8 = veor_s8(*(int8x8_t *)v244.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL));
      v195 = v244.i32[0] ^ v244.i32[1];
      v194 = vaddvq_s16(vaddq_s16(v229, v228));
      if (v226 == v227)
        goto LABEL_206;
      v199 -= 8 * v227;
    }
    else
    {
      v202 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v245 = *v202++;
      v195 ^= v245 << v199;
      v194 += 8;
      v243 = (unint64_t)v202 < v197;
      v89 = v199 >= 8;
      v199 -= 8;
    }
    while (v89 && (unint64_t)v202 < v197);
LABEL_206:
    if (v243)
    {
LABEL_208:
      *(_DWORD *)(a3 + 48) = v195;
      *(_WORD *)(a3 + 54) = v194;
      *(_QWORD *)(a3 + 40) = v202;
      goto LABEL_209;
    }
LABEL_207:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v194 + 0x4000;
    v194 = 0x4000;
    goto LABEL_208;
  }
  v13[3] = 0;
  if (*(_BYTE *)(v159 + 77))
  {
LABEL_226:
    v258 = 0;
    goto LABEL_227;
  }
LABEL_223:
  if (*(_BYTE *)(a2 + 12))
  {
    v257 = **(_QWORD **)(a2 + 7864);
    if ((*(_WORD *)(v257 + 167) & 0x80) != 0 || *(char *)(v257 + 16) > 0)
      goto LABEL_226;
    v258 = *(unsigned __int8 *)(v257 + 3) == 13;
  }
  else
  {
    v258 = 1;
  }
LABEL_227:
  *(_DWORD *)(a2 + 15024) = v258;
  *((_WORD *)v13 + 71) = 0;
  if (*(_BYTE *)(a1 + 15695) && (v155 > 0xF || ((1 << v155) & 0xE007) == 0))
    read_palette_mode_info(v12, a2, a3);
  return read_filter_intra_mode_info(v12, a2, a3);
}

uint64_t read_cdef(uint64_t result, uint64_t a2, int *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;

  if (!*(_BYTE *)(result + 499) && !*(_BYTE *)(result + 496))
  {
    v3 = *(unsigned __int8 *)(**((_QWORD **)a3 + 983) + 144);
    v4 = *(_QWORD *)(result + 24680);
    v5 = *a3;
    v6 = a3[1];
    if (((*a3 | v6) & (*(_DWORD *)(v4 + 32) - 1)) == 0)
      *(int *)((char *)a3 + 10757) = 0;
    if (*(_BYTE *)(v4 + 28) == 15)
      v7 = (v5 >> 3) & 2 | (v6 >> 4) & 1;
    else
      v7 = 0;
    v8 = (char *)a3 + v7 + 10757;
    if (!(*v8 | v3))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(result + 568)
                     + 8 * (int)((v6 & 0xFFFFFFF0) + *(_DWORD *)(result + 580) * (v5 & 0xFFFFFFF0)));
      v10 = *(_DWORD *)(result + 23704);
      if (v10 < 1)
      {
        v14 = 0;
      }
      else
      {
        v11 = 0;
        v12 = a2 + 16;
        v13 = v10 + 1;
        do
        {
          result = od_ec_decode_BOOL_q15(v12, 0x4000u);
          v11 |= (_DWORD)result << (v13-- - 2);
        }
        while (v13 > 1);
        v14 = (v11 & 0xF) << 11;
      }
      *(_WORD *)(v9 + 167) = *(_WORD *)(v9 + 167) & 0x87FF | v14;
      *v8 = 1;
    }
  }
  return result;
}

uint64_t read_delta_q_params(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  _DWORD *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int8x16_t *v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int8x16_t v36;
  int32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  int16x8_t v42;
  int32x4_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  BOOL v49;
  int8x16_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned __int16 v60;
  uint64_t v61;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;

  v3 = (_DWORD *)(result + 24368);
  if (!*(_DWORD *)(result + 24368))
    return result;
  v4 = a3;
  v6 = result;
  v7 = **(unsigned __int8 ***)(a2 + 7864);
  v8 = *(_QWORD *)(result + 24680);
  v9 = ((*(_DWORD *)(a2 + 4) | *(_DWORD *)a2) & (*(_DWORD *)(v8 + 32) - 1)) == 0;
  if (*v7 == *(unsigned __int8 *)(v8 + 28))
  {
    if (v7[144])
      v9 = 0;
    if (!v9)
      goto LABEL_6;
LABEL_8:
    v11 = (_DWORD *)(result + 24368);
    v12 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 15110);
    v13 = *(_DWORD *)(a3 + 48);
    v14 = *(unsigned __int16 *)(a3 + 52);
    v15 = v14 >> 8;
    v16 = 16;
    v17 = 0xFF00000000000000;
    v18 = -1;
    v19 = v12;
    do
    {
      v20 = v14;
      v21 = *v19++;
      result = v15 * (v21 >> 6);
      v16 -= 4;
      v14 = v16 + (result >> 1);
      v17 += 0x100000000000000;
      ++v18;
    }
    while (HIWORD(v13) < v14);
    v22 = v20 - (result >> 1) - v16;
    v23 = (__clz(v22) ^ 0xFFFFFFE0) + 16;
    v24 = *(_WORD *)(a3 + 54) - v23;
    *(_WORD *)(a3 + 54) = v24;
    v25 = ((v13 - (v14 << 16) + 1) << v23) - 1;
    *(_DWORD *)(a3 + 48) = v25;
    *(_WORD *)(a3 + 52) = v22 << v23;
    if ((v24 & 0x8000) == 0)
    {
LABEL_30:
      v53 = a3 + 16;
      if (!*(_BYTE *)(a3 + 56))
      {
LABEL_42:
        if (v18 >= 3)
        {
          v61 = v6;
          v63 = od_ec_decode_BOOL_q15(a3 + 16, 0x4000u);
          v64 = (2 * od_ec_decode_BOOL_q15(v4 + 16, 0x4000u)) | (4 * v63);
          result = od_ec_decode_BOOL_q15(v53, 0x4000u);
          v65 = v64 | result;
          v66 = (1 << ((v64 | result) + 1)) + 1;
          v67 = 0;
          if ((v65 & 0x80000000) == 0)
          {
            do
            {
              result = od_ec_decode_BOOL_q15(v53, 0x4000u);
              v67 |= (_DWORD)result << v65;
              v68 = v65-- + 1;
            }
            while (v68 > 1);
          }
          v18 = v66 + v67;
          v4 = a3;
          v6 = v61;
        }
        if (v18)
        {
          result = od_ec_decode_BOOL_q15(v53, 0x4000u);
          if ((_DWORD)result)
            v10 = -v18;
          else
            v10 = v18;
        }
        else
        {
          v10 = 0;
        }
        v3 = v11;
        goto LABEL_52;
      }
      v54 = v12[4];
      v55 = (v54 >> 4) + 5;
      v56 = *v12;
      if (v17 <= 0)
      {
        *v12 = v56 - (v56 >> v55);
        v57 = v12[1];
      }
      else
      {
        *v12 = v56 + ((int)(0x8000 - v56) >> v55);
        v57 = v12[1];
        if ((unint64_t)v17 > 0x100000000000000)
        {
          v12[1] = v57 + ((int)(0x8000 - v57) >> v55);
          v58 = v12[2];
          if ((unint64_t)v17 > 0x200000000000000)
          {
            v59 = v58 + ((int)(0x8000 - v58) >> v55);
LABEL_38:
            v12[2] = v59;
            if (v54 >= 0x20)
              v60 = v54;
            else
              v60 = v54 + 1;
            v12[4] = v60;
            goto LABEL_42;
          }
LABEL_37:
          v59 = v58 - (v58 >> v55);
          goto LABEL_38;
        }
      }
      v12[1] = v57 - (v57 >> v55);
      v58 = v12[2];
      goto LABEL_37;
    }
    v26 = v24;
    v27 = *(_QWORD *)(a3 + 32);
    v28 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v28 >= v27)
    {
      v31 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_28;
    }
    result = (8 - v26);
    if (result >= 7)
      v29 = 7;
    else
      v29 = 8 - v26;
    v30 = ((v29 ^ 0xFu) - v26) >> 3;
    if (v30 >= ~(unint64_t)v28 + v27)
      v30 = ~(unint64_t)v28 + v27;
    if (v30 >= 0xF)
    {
      v32 = v30 + 1;
      v33 = (v30 + 1) & 0x3FFFFFF0;
      v31 = &v28->u8[v33];
      v34 = 0uLL;
      v35 = (int16x8_t)(unsigned __int16)v26;
      v36 = (int8x16_t)v25;
      v37 = vdupq_n_s32(result);
      v38 = (uint32x4_t)vaddq_s32(v37, (int32x4_t)xmmword_208F3A6C0);
      v39 = (uint32x4_t)vaddq_s32(v37, (int32x4_t)xmmword_208F3A6D0);
      v40 = (uint32x4_t)vaddq_s32(v37, (int32x4_t)xmmword_208F3A6A0);
      v41 = (uint32x4_t)vaddq_s32(v37, (int32x4_t)xmmword_208F3A6B0);
      v42.i64[0] = 0x8000800080008;
      v42.i64[1] = 0x8000800080008;
      v43.i64[0] = 0x7F0000007FLL;
      v43.i64[1] = 0x7F0000007FLL;
      v44 = v33;
      v45 = 0uLL;
      v46 = 0uLL;
      v47 = 0uLL;
      do
      {
        v48 = *v28++;
        v46 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_208F04F30), v39), v46);
        v45 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_208F04F40), v40), v45);
        v36 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_208F04F50), v41), v36);
        v47 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_208F04F20), v38), v47);
        v35 = vaddq_s16(v35, v42);
        v34 = vaddq_s16(v34, v42);
        v41 = (uint32x4_t)vaddq_s32((int32x4_t)v41, v43);
        v40 = (uint32x4_t)vaddq_s32((int32x4_t)v40, v43);
        v39 = (uint32x4_t)vaddq_s32((int32x4_t)v39, v43);
        v38 = (uint32x4_t)vaddq_s32((int32x4_t)v38, v43);
        v44 -= 16;
      }
      while (v44);
      v49 = (unint64_t)v28 < v27;
      v50 = veorq_s8(veorq_s8(v36, v46), veorq_s8(v45, v47));
      *(int8x8_t *)v50.i8 = veor_s8(*(int8x8_t *)v50.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
      v25 = v50.i32[0] ^ v50.i32[1];
      LOWORD(v26) = vaddvq_s16(vaddq_s16(v35, v34));
      if (v32 == v33)
        goto LABEL_27;
      LODWORD(result) = result - 8 * v33;
    }
    else
    {
      v31 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v51 = *v31++;
      v25 ^= v51 << result;
      LOWORD(v26) = v26 + 8;
      v49 = (unint64_t)v31 < v27;
      v52 = result >= 8;
      result = (result - 8);
    }
    while (v52 && (unint64_t)v31 < v27);
LABEL_27:
    if (v49)
    {
LABEL_29:
      *(_DWORD *)(a3 + 48) = v25;
      *(_WORD *)(a3 + 54) = v26;
      *(_QWORD *)(a3 + 40) = v31;
      goto LABEL_30;
    }
LABEL_28:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v26 + 0x4000;
    LOWORD(v26) = 0x4000;
    goto LABEL_29;
  }
  if (((*(_DWORD *)(a2 + 4) | *(_DWORD *)a2) & (*(_DWORD *)(v8 + 32) - 1)) == 0)
    goto LABEL_8;
LABEL_6:
  v10 = 0;
LABEL_52:
  v69 = v3[2];
  v70 = *(_DWORD *)(a2 + 10724) + v3[1] * v10;
  if (v70 >= 255)
    v70 = 255;
  if (v70 <= 1)
    v70 = 1;
  *(_DWORD *)(a2 + 10724) = v70;
  if (v69)
  {
    v71 = *(_QWORD *)(a2 + 10648);
    v72 = *(_DWORD *)a2;
    v73 = *(_DWORD *)(a2 + 4);
    if (v3[4])
    {
      v74 = 0;
      v75 = 2;
      if (!*(_BYTE *)(*(_QWORD *)(v6 + 24680) + 77))
        v75 = 4;
      v93 = v75;
      v76 = (unsigned __int16 *)(v71 + 15120);
      v77 = a2 + 10753;
      do
      {
        v78 = *(char *)(v77 + v74);
        v79 = *(_QWORD *)(v6 + 24680);
        v80 = v4;
        v81 = v7;
        v82 = v6;
        v83 = v4;
        v84 = v7;
        v85 = v3;
        result = read_delta_lflevel(*(_BYTE *)(v79 + 28), *(_DWORD *)(v79 + 32), v80, v76, v81, v73, v72);
        v3 = v85;
        v7 = v84;
        v4 = v83;
        v6 = v82;
        v86 = v78 + v3[3] * result;
        if (v86 >= 63)
          v86 = 63;
        if (v86 <= -63)
          LOBYTE(v86) = -63;
        *(_BYTE *)(v77 + v74) = v86;
        v7[v74++ + 163] = v86;
        v76 += 5;
      }
      while (v93 != v74);
    }
    else
    {
      v87 = v4;
      v88 = *(char *)(a2 + 10752);
      v89 = v7;
      v90 = v7;
      v91 = v3;
      result = read_delta_lflevel(*(_BYTE *)(*(_QWORD *)(v6 + 24680) + 28), *(_DWORD *)(*(_QWORD *)(v6 + 24680) + 32), v87, (unsigned __int16 *)(v71 + 15160), v89, *(_DWORD *)(a2 + 4), *(_DWORD *)a2);
      v92 = v88 + v91[3] * result;
      if (v92 >= 63)
        v92 = 63;
      if (v92 <= -63)
        LOBYTE(v92) = -63;
      *(_BYTE *)(a2 + 10752) = v92;
      v90[162] = v92;
    }
  }
  return result;
}

uint64_t read_intra_mode(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  unsigned __int8 v14;
  int v15;
  unint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int32x4_t v33;
  uint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  BOOL v39;
  int8x16_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int16 v58;

  v2 = 0;
  v3 = *(_DWORD *)(a1 + 48);
  v4 = *(unsigned __int16 *)(a1 + 52);
  v5 = v4 >> 8;
  v6 = 52;
  v7 = 0xFF00000000000000;
  do
  {
    v8 = v4;
    v9 = v5 * (a2[v2] >> 6);
    v6 -= 4;
    v4 = v6 + (v9 >> 1);
    ++v2;
    v7 += 0x100000000000000;
  }
  while (HIWORD(v3) < v4);
  v10 = v8 - (v9 >> 1) - v6;
  v11 = (__clz(v10) ^ 0xFFFFFFE0) + 16;
  v12 = *(_WORD *)(a1 + 54) - v11;
  *(_WORD *)(a1 + 54) = v12;
  v13 = ((v3 - (v4 << 16) + 1) << v11) - 1;
  *(_DWORD *)(a1 + 48) = v13;
  *(_WORD *)(a1 + 52) = v10 << v11;
  v14 = v2 - 1;
  if (v12 < 0)
  {
    v15 = v12;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v17 >= v16)
    {
      v21 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_21;
    }
    v18 = 8 - v15;
    if ((8 - v15) >= 7)
      v19 = 7;
    else
      v19 = 8 - v15;
    v20 = ((v19 ^ 0xFu) - v15) >> 3;
    if (v20 >= ~(unint64_t)v17 + v16)
      v20 = ~(unint64_t)v17 + v16;
    if (v20 >= 0xF)
    {
      v22 = v20 + 1;
      v23 = (v20 + 1) & 0x3FFFFFF0;
      v21 = &v17->u8[v23];
      v24 = 0uLL;
      v25 = (int16x8_t)(unsigned __int16)v15;
      v26 = (int8x16_t)v13;
      v27 = vdupq_n_s32(v18);
      v28 = vaddq_s32(v27, (int32x4_t)xmmword_208F3A6C0);
      v29 = vaddq_s32(v27, (int32x4_t)xmmword_208F3A6D0);
      v30 = vaddq_s32(v27, (int32x4_t)xmmword_208F3A6A0);
      v31 = vaddq_s32(v27, (int32x4_t)xmmword_208F3A6B0);
      v32.i64[0] = 0x8000800080008;
      v32.i64[1] = 0x8000800080008;
      v33.i64[0] = 0x7F0000007FLL;
      v33.i64[1] = 0x7F0000007FLL;
      v34 = v23;
      v35 = 0uLL;
      v36 = 0uLL;
      v37 = 0uLL;
      do
      {
        v38 = *v17++;
        v36 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v29), v36);
        v35 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v30), v35);
        v26 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v31), v26);
        v37 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v28), v37);
        v25 = vaddq_s16(v25, v32);
        v24 = vaddq_s16(v24, v32);
        v31 = vaddq_s32(v31, v33);
        v30 = vaddq_s32(v30, v33);
        v29 = vaddq_s32(v29, v33);
        v28 = vaddq_s32(v28, v33);
        v34 -= 16;
      }
      while (v34);
      v39 = (unint64_t)v17 < v16;
      v40 = veorq_s8(veorq_s8(v26, v36), veorq_s8(v35, v37));
      *(int8x8_t *)v40.i8 = veor_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      v13 = v40.i32[0] ^ v40.i32[1];
      LOWORD(v15) = vaddvq_s16(vaddq_s16(v25, v24));
      if (v22 == v23)
        goto LABEL_20;
      v18 -= 8 * v23;
    }
    else
    {
      v21 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v41 = *v21++;
      v13 ^= v41 << v18;
      LOWORD(v15) = v15 + 8;
      v39 = (unint64_t)v21 < v16;
      v42 = v18 >= 8;
      v18 -= 8;
    }
    while (v42 && (unint64_t)v21 < v16);
LABEL_20:
    if (v39)
    {
LABEL_22:
      *(_DWORD *)(a1 + 48) = v13;
      *(_WORD *)(a1 + 54) = v15;
      *(_QWORD *)(a1 + 40) = v21;
      goto LABEL_23;
    }
LABEL_21:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v15 + 0x4000;
    LOWORD(v15) = 0x4000;
    goto LABEL_22;
  }
LABEL_23:
  if (!*(_BYTE *)(a1 + 56))
    return v14;
  v43 = a2[13];
  v44 = (v43 >> 4) + 5;
  v45 = *a2;
  if ((uint64_t)v7 <= 0)
  {
    *a2 = v45 - (v45 >> v44);
    v46 = a2[1];
    goto LABEL_38;
  }
  *a2 = v45 + ((int)(0x8000 - v45) >> v44);
  v46 = a2[1];
  if (v7 <= 0x100000000000000)
  {
LABEL_38:
    a2[1] = v46 - (v46 >> v44);
    v47 = a2[2];
    goto LABEL_39;
  }
  a2[1] = v46 + ((int)(0x8000 - v46) >> v44);
  v47 = a2[2];
  if (v7 <= 0x200000000000000)
  {
LABEL_39:
    a2[2] = v47 - (v47 >> v44);
    v48 = a2[3];
    goto LABEL_40;
  }
  a2[2] = v47 + ((int)(0x8000 - v47) >> v44);
  v48 = a2[3];
  if (v7 <= 0x300000000000000)
  {
LABEL_40:
    a2[3] = v48 - (v48 >> v44);
    v49 = a2[4];
    goto LABEL_41;
  }
  a2[3] = v48 + ((int)(0x8000 - v48) >> v44);
  v49 = a2[4];
  if (v7 <= 0x400000000000000)
  {
LABEL_41:
    a2[4] = v49 - (v49 >> v44);
    v50 = a2[5];
    goto LABEL_42;
  }
  a2[4] = v49 + ((int)(0x8000 - v49) >> v44);
  v50 = a2[5];
  if (v7 <= 0x500000000000000)
  {
LABEL_42:
    a2[5] = v50 - (v50 >> v44);
    v51 = a2[6];
    goto LABEL_43;
  }
  a2[5] = v50 + ((int)(0x8000 - v50) >> v44);
  v51 = a2[6];
  if (v7 <= 0x600000000000000)
  {
LABEL_43:
    a2[6] = v51 - (v51 >> v44);
    v52 = a2[7];
    goto LABEL_44;
  }
  a2[6] = v51 + ((int)(0x8000 - v51) >> v44);
  v52 = a2[7];
  if (v7 <= 0x700000000000000)
  {
LABEL_44:
    a2[7] = v52 - (v52 >> v44);
    v53 = a2[8];
    goto LABEL_45;
  }
  a2[7] = v52 + ((int)(0x8000 - v52) >> v44);
  v53 = a2[8];
  if (v7 <= 0x800000000000000)
  {
LABEL_45:
    a2[8] = v53 - (v53 >> v44);
    v54 = a2[9];
    goto LABEL_46;
  }
  a2[8] = v53 + ((int)(0x8000 - v53) >> v44);
  v54 = a2[9];
  if (v7 <= 0x900000000000000)
  {
LABEL_46:
    a2[9] = v54 - (v54 >> v44);
    v55 = a2[10];
    goto LABEL_47;
  }
  a2[9] = v54 + ((int)(0x8000 - v54) >> v44);
  v55 = a2[10];
  if (v7 <= 0xA00000000000000)
  {
LABEL_47:
    a2[10] = v55 - (v55 >> v44);
    v56 = a2[11];
    goto LABEL_48;
  }
  a2[10] = v55 + ((int)(0x8000 - v55) >> v44);
  v56 = a2[11];
  if (v7 <= 0xB00000000000000)
  {
LABEL_48:
    v57 = v56 - (v56 >> v44);
    goto LABEL_49;
  }
  v57 = v56 + ((int)(0x8000 - v56) >> v44);
LABEL_49:
  a2[11] = v57;
  if (v43 >= 0x20)
    v58 = v43;
  else
    v58 = v43 + 1;
  a2[13] = v58;
  return v14;
}

uint64_t read_angle_delta(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  int8x16_t *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int32x4_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  BOOL v38;
  int8x16_t v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int16 v51;

  v2 = 0;
  v3 = *(_DWORD *)(a1 + 48);
  v4 = *(unsigned __int16 *)(a1 + 52);
  v5 = v4 >> 8;
  v6 = 28;
  v7 = 0xFF00000000000000;
  do
  {
    v8 = v4;
    v9 = v5 * (a2[v2] >> 6);
    v6 -= 4;
    v4 = v6 + (v9 >> 1);
    v7 += 0x100000000000000;
    ++v2;
  }
  while (HIWORD(v3) < v4);
  v10 = v8 - (v9 >> 1) - v6;
  v11 = (__clz(v10) ^ 0xFFFFFFE0) + 16;
  v12 = *(_WORD *)(a1 + 54) - v11;
  *(_WORD *)(a1 + 54) = v12;
  v13 = ((v3 - (v4 << 16) + 1) << v11) - 1;
  *(_DWORD *)(a1 + 48) = v13;
  *(_WORD *)(a1 + 52) = v10 << v11;
  if (v12 < 0)
  {
    v14 = v12;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v16 >= v15)
    {
      v20 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_21;
    }
    v17 = 8 - v14;
    if ((8 - v14) >= 7)
      v18 = 7;
    else
      v18 = 8 - v14;
    v19 = ((v18 ^ 0xFu) - v14) >> 3;
    if (v19 >= ~(unint64_t)v16 + v15)
      v19 = ~(unint64_t)v16 + v15;
    if (v19 >= 0xF)
    {
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x3FFFFFF0;
      v20 = &v16->u8[v22];
      v23 = 0uLL;
      v24 = (int16x8_t)(unsigned __int16)v14;
      v25 = (int8x16_t)v13;
      v26 = vdupq_n_s32(v17);
      v27 = vaddq_s32(v26, (int32x4_t)xmmword_208F3A6C0);
      v28 = vaddq_s32(v26, (int32x4_t)xmmword_208F3A6D0);
      v29 = vaddq_s32(v26, (int32x4_t)xmmword_208F3A6A0);
      v30 = vaddq_s32(v26, (int32x4_t)xmmword_208F3A6B0);
      v31.i64[0] = 0x8000800080008;
      v31.i64[1] = 0x8000800080008;
      v32.i64[0] = 0x7F0000007FLL;
      v32.i64[1] = 0x7F0000007FLL;
      v33 = v22;
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      do
      {
        v37 = *v16++;
        v35 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v28), v35);
        v34 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v29), v34);
        v25 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v30), v25);
        v36 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v27), v36);
        v24 = vaddq_s16(v24, v31);
        v23 = vaddq_s16(v23, v31);
        v30 = vaddq_s32(v30, v32);
        v29 = vaddq_s32(v29, v32);
        v28 = vaddq_s32(v28, v32);
        v27 = vaddq_s32(v27, v32);
        v33 -= 16;
      }
      while (v33);
      v38 = (unint64_t)v16 < v15;
      v39 = veorq_s8(veorq_s8(v25, v35), veorq_s8(v34, v36));
      *(int8x8_t *)v39.i8 = veor_s8(*(int8x8_t *)v39.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL));
      v13 = v39.i32[0] ^ v39.i32[1];
      LOWORD(v14) = vaddvq_s16(vaddq_s16(v24, v23));
      if (v21 == v22)
        goto LABEL_20;
      v17 -= 8 * v22;
    }
    else
    {
      v20 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v40 = *v20++;
      v13 ^= v40 << v17;
      LOWORD(v14) = v14 + 8;
      v38 = (unint64_t)v20 < v15;
      v41 = v17 >= 8;
      v17 -= 8;
    }
    while (v41 && (unint64_t)v20 < v15);
LABEL_20:
    if (v38)
    {
LABEL_22:
      *(_DWORD *)(a1 + 48) = v13;
      *(_WORD *)(a1 + 54) = v14;
      *(_QWORD *)(a1 + 40) = v20;
      goto LABEL_23;
    }
LABEL_21:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v14 + 0x4000;
    LOWORD(v14) = 0x4000;
    goto LABEL_22;
  }
LABEL_23:
  if (!*(_BYTE *)(a1 + 56))
    return (v2 - 4);
  v42 = a2[7];
  v43 = (v42 >> 4) + 5;
  v44 = *a2;
  if ((uint64_t)v7 <= 0)
  {
    *a2 = v44 - (v44 >> v43);
    v45 = a2[1];
    goto LABEL_32;
  }
  *a2 = v44 + ((int)(0x8000 - v44) >> v43);
  v45 = a2[1];
  if (v7 <= 0x100000000000000)
  {
LABEL_32:
    a2[1] = v45 - (v45 >> v43);
    v46 = a2[2];
    goto LABEL_33;
  }
  a2[1] = v45 + ((int)(0x8000 - v45) >> v43);
  v46 = a2[2];
  if (v7 <= 0x200000000000000)
  {
LABEL_33:
    a2[2] = v46 - (v46 >> v43);
    v47 = a2[3];
    goto LABEL_34;
  }
  a2[2] = v46 + ((int)(0x8000 - v46) >> v43);
  v47 = a2[3];
  if (v7 <= 0x300000000000000)
  {
LABEL_34:
    a2[3] = v47 - (v47 >> v43);
    v48 = a2[4];
    goto LABEL_35;
  }
  a2[3] = v47 + ((int)(0x8000 - v47) >> v43);
  v48 = a2[4];
  if (v7 <= 0x400000000000000)
  {
LABEL_35:
    a2[4] = v48 - (v48 >> v43);
    v49 = a2[5];
    goto LABEL_36;
  }
  a2[4] = v48 + ((int)(0x8000 - v48) >> v43);
  v49 = a2[5];
  if (v7 <= 0x500000000000000)
  {
LABEL_36:
    v50 = v49 - (v49 >> v43);
    goto LABEL_37;
  }
  v50 = v49 + ((int)(0x8000 - v49) >> v43);
LABEL_37:
  a2[5] = v50;
  if (v42 >= 0x20)
    v51 = v42;
  else
    v51 = v42 + 1;
  a2[7] = v51;
  return (v2 - 4);
}

uint64_t read_cfl_alphas(unsigned __int16 *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  _WORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  int8x16_t *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int16x8_t v34;
  int32x4_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  BOOL v41;
  int8x16_t v42;
  int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int16 v56;
  char v57;
  int v58;
  int v59;
  int v60;
  unsigned __int8 v61;
  int v62;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  __int16 v74;
  char v75;
  int v76;
  int8x16_t *v77;
  unint64_t v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unint64_t v83;
  uint64_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int16x8_t v93;
  int32x4_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  BOOL v100;
  int8x16_t v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned __int16 v121;
  uint64_t v122;
  unsigned __int16 *v123;
  unsigned __int16 *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned __int16 *v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  unsigned int v136;
  char v137;
  int8x16_t *v138;
  unint64_t v139;
  unsigned int v140;
  int v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int8x16_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int16x8_t v154;
  int32x4_t v155;
  uint64_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  BOOL v161;
  int8x16_t v162;
  int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;

  v3 = 0;
  v4 = a1 + 10509;
  v5 = *(_DWORD *)(a2 + 48);
  v6 = *(unsigned __int16 *)(a2 + 52);
  v7 = v6 >> 8;
  v8 = 32;
  v9 = 0xFF00000000000000;
  v10 = -16777216;
  do
  {
    v11 = v6;
    v12 = v7 * ((unsigned __int16)v4[v3] >> 6);
    v8 -= 4;
    v6 = v8 + (v12 >> 1);
    ++v3;
    v9 += 0x100000000000000;
    v10 += 0x1000000;
  }
  while (HIWORD(v5) < v6);
  v13 = v11 - (v12 >> 1) - v8;
  v14 = (__clz(v13) ^ 0xFFFFFFE0) + 16;
  v15 = *(_WORD *)(a2 + 54) - v14;
  *(_WORD *)(a2 + 54) = v15;
  v16 = ((v5 - (v6 << 16) + 1) << v14) - 1;
  *(_DWORD *)(a2 + 48) = v16;
  *(_WORD *)(a2 + 52) = v13 << v14;
  if (v15 < 0)
  {
    v17 = v15;
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(int8x16_t **)(a2 + 40);
    if ((unint64_t)v19 >= v18)
    {
      v23 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_21;
    }
    v20 = 8 - v17;
    if ((8 - v17) >= 7)
      v21 = 7;
    else
      v21 = 8 - v17;
    v22 = ((v21 ^ 0xFu) - v17) >> 3;
    if (v22 >= ~(unint64_t)v19 + v18)
      v22 = ~(unint64_t)v19 + v18;
    if (v22 >= 0xF)
    {
      v24 = v22 + 1;
      v25 = (v22 + 1) & 0x3FFFFFF0;
      v23 = &v19->u8[v25];
      v26 = 0uLL;
      v27 = (int16x8_t)(unsigned __int16)v17;
      v28 = (int8x16_t)v16;
      v29 = vdupq_n_s32(v20);
      v30 = vaddq_s32(v29, (int32x4_t)xmmword_208F3A6C0);
      v31 = vaddq_s32(v29, (int32x4_t)xmmword_208F3A6D0);
      v32 = vaddq_s32(v29, (int32x4_t)xmmword_208F3A6A0);
      v33 = vaddq_s32(v29, (int32x4_t)xmmword_208F3A6B0);
      v34.i64[0] = 0x8000800080008;
      v34.i64[1] = 0x8000800080008;
      v35.i64[0] = 0x7F0000007FLL;
      v35.i64[1] = 0x7F0000007FLL;
      v36 = v25;
      v37 = 0uLL;
      v38 = 0uLL;
      v39 = 0uLL;
      do
      {
        v40 = *v19++;
        v38 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v31), v38);
        v37 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v32), v37);
        v28 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v33), v28);
        v39 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v30), v39);
        v27 = vaddq_s16(v27, v34);
        v26 = vaddq_s16(v26, v34);
        v33 = vaddq_s32(v33, v35);
        v32 = vaddq_s32(v32, v35);
        v31 = vaddq_s32(v31, v35);
        v30 = vaddq_s32(v30, v35);
        v36 -= 16;
      }
      while (v36);
      v41 = (unint64_t)v19 < v18;
      v42 = veorq_s8(veorq_s8(v28, v38), veorq_s8(v37, v39));
      *(int8x8_t *)v42.i8 = veor_s8(*(int8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
      v16 = v42.i32[0] ^ v42.i32[1];
      LOWORD(v17) = vaddvq_s16(vaddq_s16(v27, v26));
      if (v24 == v25)
        goto LABEL_20;
      v20 -= 8 * v25;
    }
    else
    {
      v23 = *(unsigned __int8 **)(a2 + 40);
    }
    do
    {
      v43 = *v23++;
      v16 ^= v43 << v20;
      LOWORD(v17) = v17 + 8;
      v41 = (unint64_t)v23 < v18;
      v44 = v20 >= 8;
      v20 -= 8;
    }
    while (v44 && (unint64_t)v23 < v18);
LABEL_20:
    if (v41)
    {
LABEL_22:
      *(_DWORD *)(a2 + 48) = v16;
      *(_WORD *)(a2 + 54) = v17;
      *(_QWORD *)(a2 + 40) = v23;
      goto LABEL_23;
    }
LABEL_21:
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) - (__int16)v17 + 0x4000;
    LOWORD(v17) = 0x4000;
    goto LABEL_22;
  }
LABEL_23:
  v45 = *(unsigned __int8 *)(a2 + 56);
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_43;
  v46 = a1[10517];
  v47 = (v46 >> 4) + 5;
  v48 = (unsigned __int16)*v4;
  if ((uint64_t)v9 <= 0)
  {
    *v4 = v48 - (v48 >> v47);
    v49 = a1[10510];
    goto LABEL_33;
  }
  *v4 = v48 + ((int)(0x8000 - v48) >> v47);
  v49 = a1[10510];
  if (v9 <= 0x100000000000000)
  {
LABEL_33:
    a1[10510] = v49 - (v49 >> v47);
    v50 = a1[10511];
    goto LABEL_34;
  }
  a1[10510] = v49 + ((int)(0x8000 - v49) >> v47);
  v50 = a1[10511];
  if (v9 <= 0x200000000000000)
  {
LABEL_34:
    a1[10511] = v50 - (v50 >> v47);
    v51 = a1[10512];
    goto LABEL_35;
  }
  a1[10511] = v50 + ((int)(0x8000 - v50) >> v47);
  v51 = a1[10512];
  if (v9 <= 0x300000000000000)
  {
LABEL_35:
    a1[10512] = v51 - (v51 >> v47);
    v52 = a1[10513];
    goto LABEL_36;
  }
  a1[10512] = v51 + ((int)(0x8000 - v51) >> v47);
  v52 = a1[10513];
  if (v9 <= 0x400000000000000)
  {
LABEL_36:
    a1[10513] = v52 - (v52 >> v47);
    v53 = a1[10514];
    goto LABEL_37;
  }
  a1[10513] = v52 + ((int)(0x8000 - v52) >> v47);
  v53 = a1[10514];
  if (v9 <= 0x500000000000000)
  {
LABEL_37:
    a1[10514] = v53 - (v53 >> v47);
    v54 = a1[10515];
    goto LABEL_38;
  }
  a1[10514] = v53 + ((int)(0x8000 - v53) >> v47);
  v54 = a1[10515];
  if (v9 <= 0x600000000000000)
  {
LABEL_38:
    v55 = v54 - (v54 >> v47);
    goto LABEL_39;
  }
  v55 = v54 + ((int)(0x8000 - v54) >> v47);
LABEL_39:
  a1[10515] = v55;
  if (v46 >= 0x20)
    v56 = v46;
  else
    v56 = v46 + 1;
  a1[10517] = v56;
LABEL_43:
  v57 = v3 - 1;
  v58 = v10 >> 24;
  v59 = (v10 >> 24) + 1;
  v60 = (11 * v59) >> 5;
  if ((11 * v59) >= 0x20)
  {
    v64 = 0;
    v65 = &a1[17 * v58 + 10484];
    v66 = *(unsigned __int16 *)(a2 + 52);
    v67 = v66 >> 8;
    v68 = 64;
    v69 = 0xFF00000000000000;
    do
    {
      v70 = v66;
      v71 = v67 * (a1[17 * v57 + 10484 + v64] >> 6);
      v68 -= 4;
      v66 = v68 + (v71 >> 1);
      ++v64;
      v69 += 0x100000000000000;
    }
    while (HIWORD(v16) < v66);
    v72 = v70 - (v71 >> 1) - v68;
    v73 = (__clz(v72) ^ 0xFFFFFFE0) + 16;
    v74 = *(_WORD *)(a2 + 54) - v73;
    *(_WORD *)(a2 + 54) = v74;
    v16 = ((v16 - (v66 << 16) + 1) << v73) - 1;
    *(_DWORD *)(a2 + 48) = v16;
    *(_WORD *)(a2 + 52) = v72 << v73;
    v75 = v64 - 1;
    if ((v74 & 0x8000) == 0)
    {
LABEL_68:
      if (!v45)
        goto LABEL_104;
      v103 = v65[16];
      v104 = (v103 >> 4) + 5;
      v105 = *v65;
      if ((uint64_t)v69 <= 0)
      {
        *v65 = v105 - (v105 >> v104);
        v106 = v65[1];
      }
      else
      {
        *v65 = v105 + ((int)(0x8000 - v105) >> v104);
        v106 = v65[1];
        if (v69 > 0x100000000000000)
        {
          v65[1] = v106 + ((int)(0x8000 - v106) >> v104);
          v107 = v65[2];
          if (v69 > 0x200000000000000)
          {
            v65[2] = v107 + ((int)(0x8000 - v107) >> v104);
            v108 = v65[3];
            if (v69 > 0x300000000000000)
            {
              v65[3] = v108 + ((int)(0x8000 - v108) >> v104);
              v109 = v65[4];
              if (v69 > 0x400000000000000)
              {
                v65[4] = v109 + ((int)(0x8000 - v109) >> v104);
                v110 = v65[5];
                if (v69 > 0x500000000000000)
                {
                  v65[5] = v110 + ((int)(0x8000 - v110) >> v104);
                  v111 = v65[6];
                  if (v69 > 0x600000000000000)
                  {
                    v65[6] = v111 + ((int)(0x8000 - v111) >> v104);
                    v112 = v65[7];
                    if (v69 > 0x700000000000000)
                    {
                      v65[7] = v112 + ((int)(0x8000 - v112) >> v104);
                      v113 = v65[8];
                      if (v69 > 0x800000000000000)
                      {
                        v65[8] = v113 + ((int)(0x8000 - v113) >> v104);
                        v114 = v65[9];
                        if (v69 > 0x900000000000000)
                        {
                          v65[9] = v114 + ((int)(0x8000 - v114) >> v104);
                          v115 = v65[10];
                          if (v69 > 0xA00000000000000)
                          {
                            v65[10] = v115 + ((int)(0x8000 - v115) >> v104);
                            v116 = v65[11];
                            if (v69 > 0xB00000000000000)
                            {
                              v65[11] = v116 + ((int)(0x8000 - v116) >> v104);
                              v117 = v65[12];
                              if (v69 > 0xC00000000000000)
                              {
                                v65[12] = v117 + ((int)(0x8000 - v117) >> v104);
                                v118 = v65[13];
                                if (v69 > 0xD00000000000000)
                                {
                                  v65[13] = v118 + ((int)(0x8000 - v118) >> v104);
                                  v119 = v65[14];
                                  if (v69 > 0xE00000000000000)
                                  {
                                    v120 = v119 + ((int)(0x8000 - v119) >> v104);
LABEL_100:
                                    v65[14] = v120;
                                    if (v103 >= 0x20)
                                      v121 = v103;
                                    else
                                      v121 = v103 + 1;
                                    v65[16] = v121;
LABEL_104:
                                    v61 = 16 * v75;
                                    v62 = -3 * v60 + v59;
                                    if (!v62)
                                      goto LABEL_45;
                                    goto LABEL_105;
                                  }
LABEL_99:
                                  v120 = v119 - (v119 >> v104);
                                  goto LABEL_100;
                                }
LABEL_98:
                                v65[13] = v118 - (v118 >> v104);
                                v119 = v65[14];
                                goto LABEL_99;
                              }
LABEL_97:
                              v65[12] = v117 - (v117 >> v104);
                              v118 = v65[13];
                              goto LABEL_98;
                            }
LABEL_96:
                            v65[11] = v116 - (v116 >> v104);
                            v117 = v65[12];
                            goto LABEL_97;
                          }
LABEL_95:
                          v65[10] = v115 - (v115 >> v104);
                          v116 = v65[11];
                          goto LABEL_96;
                        }
LABEL_94:
                        v65[9] = v114 - (v114 >> v104);
                        v115 = v65[10];
                        goto LABEL_95;
                      }
LABEL_93:
                      v65[8] = v113 - (v113 >> v104);
                      v114 = v65[9];
                      goto LABEL_94;
                    }
LABEL_92:
                    v65[7] = v112 - (v112 >> v104);
                    v113 = v65[8];
                    goto LABEL_93;
                  }
LABEL_91:
                  v65[6] = v111 - (v111 >> v104);
                  v112 = v65[7];
                  goto LABEL_92;
                }
LABEL_90:
                v65[5] = v110 - (v110 >> v104);
                v111 = v65[6];
                goto LABEL_91;
              }
LABEL_89:
              v65[4] = v109 - (v109 >> v104);
              v110 = v65[5];
              goto LABEL_90;
            }
LABEL_88:
            v65[3] = v108 - (v108 >> v104);
            v109 = v65[4];
            goto LABEL_89;
          }
LABEL_87:
          v65[2] = v107 - (v107 >> v104);
          v108 = v65[3];
          goto LABEL_88;
        }
      }
      v65[1] = v106 - (v106 >> v104);
      v107 = v65[2];
      goto LABEL_87;
    }
    v76 = v74;
    v78 = *(_QWORD *)(a2 + 32);
    v77 = *(int8x16_t **)(a2 + 40);
    if ((unint64_t)v77 >= v78)
    {
      v82 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_66;
    }
    v79 = 8 - v76;
    if ((8 - v76) >= 7)
      v80 = 7;
    else
      v80 = 8 - v76;
    v81 = ((v80 ^ 0xFu) - v76) >> 3;
    if (v81 >= ~(unint64_t)v77 + v78)
      v81 = ~(unint64_t)v77 + v78;
    if (v81 >= 0xF)
    {
      v83 = v81 + 1;
      v84 = (v81 + 1) & 0x3FFFFFF0;
      v82 = &v77->u8[v84];
      v85 = 0uLL;
      v86 = (int16x8_t)(unsigned __int16)v76;
      v87 = (int8x16_t)v16;
      v88 = vdupq_n_s32(v79);
      v89 = vaddq_s32(v88, (int32x4_t)xmmword_208F3A6C0);
      v90 = vaddq_s32(v88, (int32x4_t)xmmword_208F3A6D0);
      v91 = vaddq_s32(v88, (int32x4_t)xmmword_208F3A6A0);
      v92 = vaddq_s32(v88, (int32x4_t)xmmword_208F3A6B0);
      v93.i64[0] = 0x8000800080008;
      v93.i64[1] = 0x8000800080008;
      v94.i64[0] = 0x7F0000007FLL;
      v94.i64[1] = 0x7F0000007FLL;
      v95 = v84;
      v96 = 0uLL;
      v97 = 0uLL;
      v98 = 0uLL;
      do
      {
        v99 = *v77++;
        v97 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v90), v97);
        v96 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v91), v96);
        v87 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v92), v87);
        v98 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v89), v98);
        v86 = vaddq_s16(v86, v93);
        v85 = vaddq_s16(v85, v93);
        v92 = vaddq_s32(v92, v94);
        v91 = vaddq_s32(v91, v94);
        v90 = vaddq_s32(v90, v94);
        v89 = vaddq_s32(v89, v94);
        v95 -= 16;
      }
      while (v95);
      v100 = (unint64_t)v77 < v78;
      v101 = veorq_s8(veorq_s8(v87, v97), veorq_s8(v96, v98));
      *(int8x8_t *)v101.i8 = veor_s8(*(int8x8_t *)v101.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
      v16 = v101.i32[0] ^ v101.i32[1];
      LOWORD(v76) = vaddvq_s16(vaddq_s16(v86, v85));
      if (v83 == v84)
        goto LABEL_65;
      v79 -= 8 * v84;
    }
    else
    {
      v82 = *(unsigned __int8 **)(a2 + 40);
    }
    do
    {
      v102 = *v82++;
      v16 ^= v102 << v79;
      LOWORD(v76) = v76 + 8;
      v100 = (unint64_t)v82 < v78;
      v44 = v79 >= 8;
      v79 -= 8;
    }
    while (v44 && (unint64_t)v82 < v78);
LABEL_65:
    if (v100)
    {
LABEL_67:
      *(_DWORD *)(a2 + 48) = v16;
      *(_WORD *)(a2 + 54) = v76;
      *(_QWORD *)(a2 + 40) = v82;
      goto LABEL_68;
    }
LABEL_66:
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) - (__int16)v76 + 0x4000;
    LOWORD(v76) = 0x4000;
    goto LABEL_67;
  }
  v61 = 0;
  v62 = -3 * v60 + v59;
  if (!v62)
  {
LABEL_45:
    *a3 = v57;
    return v61;
  }
LABEL_105:
  v122 = 0;
  v123 = a1 + 10518;
  v124 = &v123[51 * v62 - 51 + 17 * v60];
  v125 = *(unsigned __int16 *)(a2 + 52);
  v126 = v125 >> 8;
  v127 = &v123[17 * (3 * v57 - 8 * v60)];
  v128 = 64;
  v129 = 0xFF00000000000000;
  do
  {
    v130 = v125;
    v131 = v126 * (v127[v122] >> 6);
    v128 -= 4;
    v125 = v128 + (v131 >> 1);
    ++v122;
    v129 += 0x100000000000000;
  }
  while (HIWORD(v16) < v125);
  v132 = v130 - (v131 >> 1) - v128;
  v133 = __clz(v132);
  v134 = (v133 ^ 0xFFE0) + 16;
  v135 = *(_WORD *)(a2 + 54) - v134;
  *(_WORD *)(a2 + 54) = v135;
  v136 = ((v16 - (v125 << 16) + 1) << ((v133 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a2 + 48) = v136;
  *(_WORD *)(a2 + 52) = v132 << v134;
  v137 = v122 - 1;
  if (v135 < 0)
  {
    v139 = *(_QWORD *)(a2 + 32);
    v138 = *(int8x16_t **)(a2 + 40);
    if ((unint64_t)v138 >= v139)
    {
      v143 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_125;
    }
    v140 = 8 - v135;
    if (v140 >= 7)
      v141 = 7;
    else
      v141 = 8 - v135;
    v142 = ((v141 ^ 0xFu) - v135) >> 3;
    if (v142 >= ~(unint64_t)v138 + v139)
      v142 = ~(unint64_t)v138 + v139;
    if (v142 >= 0xF)
    {
      v144 = v142 + 1;
      v145 = (v142 + 1) & 0x3FFFFFF0;
      v143 = &v138->u8[v145];
      v146 = 0uLL;
      v147 = (int16x8_t)(unsigned __int16)v135;
      v148 = (int8x16_t)v136;
      v149 = vdupq_n_s32(v140);
      v150 = vaddq_s32(v149, (int32x4_t)xmmword_208F3A6C0);
      v151 = vaddq_s32(v149, (int32x4_t)xmmword_208F3A6D0);
      v152 = vaddq_s32(v149, (int32x4_t)xmmword_208F3A6A0);
      v153 = vaddq_s32(v149, (int32x4_t)xmmword_208F3A6B0);
      v154.i64[0] = 0x8000800080008;
      v154.i64[1] = 0x8000800080008;
      v155.i64[0] = 0x7F0000007FLL;
      v155.i64[1] = 0x7F0000007FLL;
      v156 = v145;
      v157 = 0uLL;
      v158 = 0uLL;
      v159 = 0uLL;
      do
      {
        v160 = *v138++;
        v158 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v160, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v151), v158);
        v157 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v160, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v152), v157);
        v148 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v160, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v153), v148);
        v159 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v160, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v150), v159);
        v147 = vaddq_s16(v147, v154);
        v146 = vaddq_s16(v146, v154);
        v153 = vaddq_s32(v153, v155);
        v152 = vaddq_s32(v152, v155);
        v151 = vaddq_s32(v151, v155);
        v150 = vaddq_s32(v150, v155);
        v156 -= 16;
      }
      while (v156);
      v161 = (unint64_t)v138 < v139;
      v162 = veorq_s8(veorq_s8(v148, v158), veorq_s8(v157, v159));
      *(int8x8_t *)v162.i8 = veor_s8(*(int8x8_t *)v162.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL));
      v136 = v162.i32[0] ^ v162.i32[1];
      v135 = vaddvq_s16(vaddq_s16(v147, v146));
      if (v144 == v145)
        goto LABEL_124;
      v140 -= 8 * v145;
    }
    else
    {
      v143 = *(unsigned __int8 **)(a2 + 40);
    }
    do
    {
      v163 = *v143++;
      v136 ^= v163 << v140;
      v135 += 8;
      v161 = (unint64_t)v143 < v139;
      v44 = v140 >= 8;
      v140 -= 8;
    }
    while (v44 && (unint64_t)v143 < v139);
LABEL_124:
    if (v161)
    {
LABEL_126:
      *(_DWORD *)(a2 + 48) = v136;
      *(_WORD *)(a2 + 54) = v135;
      *(_QWORD *)(a2 + 40) = v143;
      goto LABEL_127;
    }
LABEL_125:
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) - v135 + 0x4000;
    v135 = 0x4000;
    goto LABEL_126;
  }
LABEL_127:
  if (v45)
  {
    v164 = v124[16];
    v165 = (v164 >> 4) + 5;
    v166 = *v124;
    if ((uint64_t)v129 <= 0)
    {
      *v124 = v166 - (v166 >> v165);
      v167 = v124[1];
    }
    else
    {
      *v124 = v166 + ((int)(0x8000 - v166) >> v165);
      v167 = v124[1];
      if (v129 > 0x100000000000000)
      {
        v124[1] = v167 + ((int)(0x8000 - v167) >> v165);
        v168 = v124[2];
        if (v129 > 0x200000000000000)
        {
          v124[2] = v168 + ((int)(0x8000 - v168) >> v165);
          v169 = v124[3];
          if (v129 > 0x300000000000000)
          {
            v124[3] = v169 + ((int)(0x8000 - v169) >> v165);
            v170 = v124[4];
            if (v129 > 0x400000000000000)
            {
              v124[4] = v170 + ((int)(0x8000 - v170) >> v165);
              v171 = v124[5];
              if (v129 > 0x500000000000000)
              {
                v124[5] = v171 + ((int)(0x8000 - v171) >> v165);
                v172 = v124[6];
                if (v129 > 0x600000000000000)
                {
                  v124[6] = v172 + ((int)(0x8000 - v172) >> v165);
                  v173 = v124[7];
                  if (v129 > 0x700000000000000)
                  {
                    v124[7] = v173 + ((int)(0x8000 - v173) >> v165);
                    v174 = v124[8];
                    if (v129 > 0x800000000000000)
                    {
                      v124[8] = v174 + ((int)(0x8000 - v174) >> v165);
                      v175 = v124[9];
                      if (v129 > 0x900000000000000)
                      {
                        v124[9] = v175 + ((int)(0x8000 - v175) >> v165);
                        v176 = v124[10];
                        if (v129 > 0xA00000000000000)
                        {
                          v124[10] = v176 + ((int)(0x8000 - v176) >> v165);
                          v177 = v124[11];
                          if (v129 > 0xB00000000000000)
                          {
                            v124[11] = v177 + ((int)(0x8000 - v177) >> v165);
                            v178 = v124[12];
                            if (v129 > 0xC00000000000000)
                            {
                              v124[12] = v178 + ((int)(0x8000 - v178) >> v165);
                              v179 = v124[13];
                              if (v129 > 0xD00000000000000)
                              {
                                v124[13] = v179 + ((int)(0x8000 - v179) >> v165);
                                v180 = v124[14];
                                if (v129 > 0xE00000000000000)
                                {
                                  v181 = v180 + ((int)(0x8000 - v180) >> v165);
LABEL_159:
                                  v124[14] = v181;
                                  if (v164 < 0x20)
                                    LOWORD(v164) = v164 + 1;
                                  v124[16] = v164;
                                  goto LABEL_162;
                                }
LABEL_158:
                                v181 = v180 - (v180 >> v165);
                                goto LABEL_159;
                              }
LABEL_157:
                              v124[13] = v179 - (v179 >> v165);
                              v180 = v124[14];
                              goto LABEL_158;
                            }
LABEL_156:
                            v124[12] = v178 - (v178 >> v165);
                            v179 = v124[13];
                            goto LABEL_157;
                          }
LABEL_155:
                          v124[11] = v177 - (v177 >> v165);
                          v178 = v124[12];
                          goto LABEL_156;
                        }
LABEL_154:
                        v124[10] = v176 - (v176 >> v165);
                        v177 = v124[11];
                        goto LABEL_155;
                      }
LABEL_153:
                      v124[9] = v175 - (v175 >> v165);
                      v176 = v124[10];
                      goto LABEL_154;
                    }
LABEL_152:
                    v124[8] = v174 - (v174 >> v165);
                    v175 = v124[9];
                    goto LABEL_153;
                  }
LABEL_151:
                  v124[7] = v173 - (v173 >> v165);
                  v174 = v124[8];
                  goto LABEL_152;
                }
LABEL_150:
                v124[6] = v172 - (v172 >> v165);
                v173 = v124[7];
                goto LABEL_151;
              }
LABEL_149:
              v124[5] = v171 - (v171 >> v165);
              v172 = v124[6];
              goto LABEL_150;
            }
LABEL_148:
            v124[4] = v170 - (v170 >> v165);
            v171 = v124[5];
            goto LABEL_149;
          }
LABEL_147:
          v124[3] = v169 - (v169 >> v165);
          v170 = v124[4];
          goto LABEL_148;
        }
LABEL_146:
        v124[2] = v168 - (v168 >> v165);
        v169 = v124[3];
        goto LABEL_147;
      }
    }
    v124[1] = v167 - (v167 >> v165);
    v168 = v124[2];
    goto LABEL_146;
  }
LABEL_162:
  *a3 = v57;
  return (v61 + v137);
}

void read_palette_mode_info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  int8x16_t *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  int8x16_t *v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  int16x8_t v67;
  int32x4_t v68;
  uint64_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  BOOL v74;
  int8x16_t v75;
  int v76;
  BOOL v77;
  int v78;
  unsigned int v79;
  char v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned __int16 v84;
  unsigned __int16 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  __int16 v96;
  __int16 v97;
  __int16 v98;
  unsigned int v99;
  char v100;
  unint64_t v101;
  int8x16_t *v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  uint64_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int8x16_t v111;
  int32x4_t v112;
  uint32x4_t v113;
  uint32x4_t v114;
  uint32x4_t v115;
  uint32x4_t v116;
  int16x8_t v117;
  int32x4_t v118;
  uint64_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  BOOL v124;
  int8x16_t v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned __int16 v136;
  int v137;
  int palette_cache;
  int v139;
  uint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned __int16 *v154;
  int v155;
  int v156;
  unsigned __int16 v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  _WORD *v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  __int16 v167;
  unint64_t v168;
  uint64_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int8x16_t v172;
  int32x4_t v173;
  uint32x4_t v174;
  uint32x4_t v175;
  uint32x4_t v176;
  uint32x4_t v177;
  int16x8_t v178;
  int32x4_t v179;
  uint64_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  BOOL v185;
  int8x16_t v186;
  int v187;
  int v188;
  unsigned int v189;
  char v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned __int16 v194;
  unsigned __int16 v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int16 *v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  unint64_t v203;
  unsigned int v204;
  unsigned __int8 v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  __int16 v209;
  unsigned int v210;
  unsigned __int8 v211;
  unint64_t v212;
  int8x16_t *v213;
  unsigned int v214;
  int v215;
  unint64_t v216;
  unsigned __int8 *v217;
  unint64_t v218;
  uint64_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int8x16_t v222;
  int32x4_t v223;
  uint32x4_t v224;
  uint32x4_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  int16x8_t v228;
  int32x4_t v229;
  uint64_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  BOOL v235;
  int8x16_t v236;
  int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned __int16 v247;
  int v248;
  int v249;
  int v250;
  BOOL v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  int v262;
  unsigned __int8 *v263;
  int v264;
  unsigned __int16 v265;
  unsigned __int16 v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  unsigned __int8 *v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned __int8 *v277;
  uint64_t v278;
  _WORD *v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  __int16 v283;
  uint64_t v284;
  int v285;
  unsigned int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  uint64_t v291;
  int v292;
  unsigned __int8 *v293;
  int v294;
  __int16 v295;
  int v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  unsigned __int8 *v300;
  int v301;
  unsigned __int8 v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  _WORD *__dst;
  _WORD __src[8];
  _WORD v310[16];
  uint64_t v311;

  v3 = a2;
  v4 = a1;
  v311 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24680) + 77);
  v6 = **(unsigned __int8 ***)(a2 + 7864);
  v7 = v6 + 94;
  v8 = num_pels_log2_lookup_6[*v6] - 6;
  if (v6[2])
    goto LABEL_2;
  v9 = *(_QWORD *)(a2 + 7880);
  v10 = *(_QWORD *)(a2 + 7888);
  if (v10)
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 142) != 0;
  if (v9 && *(_BYTE *)(v9 + 142))
    LODWORD(v10) = v10 + 1;
  v11 = 0;
  v12 = *(_QWORD *)(a2 + 10648);
  v13 = (unsigned __int16 *)(v12 + 18 * (int)v8 + 6 * v10 + 11204);
  v14 = *(_DWORD *)(a3 + 48);
  v15 = *(unsigned __int16 *)(a3 + 52);
  v16 = v15 >> 8;
  v17 = 8;
  v18 = 0xFF00000000000000;
  do
  {
    v19 = v15;
    v20 = v16 * (v13[v11] >> 6);
    v17 -= 4;
    v15 = v17 + (v20 >> 1);
    ++v11;
    v18 += 0x100000000000000;
  }
  while (HIWORD(v14) < v15);
  v21 = v19 - (v20 >> 1) - v17;
  v22 = __clz(v21);
  v23 = (v22 ^ 0xFFE0) + 16;
  v24 = *(_WORD *)(a3 + 54) - v23;
  *(_WORD *)(a3 + 54) = v24;
  v25 = ((v14 - (v15 << 16) + 1) << ((v22 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a3 + 48) = v25;
  *(_WORD *)(a3 + 52) = v21 << v23;
  v26 = v11 - 1;
  if (v24 < 0)
  {
    v27 = v24;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v29 >= v28)
    {
      v33 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_42;
    }
    v30 = 8 - v27;
    if ((8 - v27) >= 7)
      v31 = 7;
    else
      v31 = 8 - v27;
    v32 = ((v31 ^ 0xFu) - v27) >> 3;
    if (v32 >= ~(unint64_t)v29 + v28)
      v32 = ~(unint64_t)v29 + v28;
    if (v32 >= 0xF)
    {
      v57 = v32 + 1;
      v58 = (v32 + 1) & 0x3FFFFFF0;
      v33 = &v29->u8[v58];
      v59 = 0uLL;
      v60 = (int16x8_t)(unsigned __int16)v27;
      v61 = (int8x16_t)v25;
      v62 = vdupq_n_s32(v30);
      v63 = (uint32x4_t)vaddq_s32(v62, (int32x4_t)xmmword_208F3A6C0);
      v64 = (uint32x4_t)vaddq_s32(v62, (int32x4_t)xmmword_208F3A6D0);
      v65 = (uint32x4_t)vaddq_s32(v62, (int32x4_t)xmmword_208F3A6A0);
      v66 = (uint32x4_t)vaddq_s32(v62, (int32x4_t)xmmword_208F3A6B0);
      v67.i64[0] = 0x8000800080008;
      v67.i64[1] = 0x8000800080008;
      v68.i64[0] = 0x7F0000007FLL;
      v68.i64[1] = 0x7F0000007FLL;
      v69 = v58;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      do
      {
        v73 = *v29++;
        v71 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_208F04F30), v64), v71);
        v70 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_208F04F40), v65), v70);
        v61 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_208F04F50), v66), v61);
        v72 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_208F04F20), v63), v72);
        v60 = vaddq_s16(v60, v67);
        v59 = vaddq_s16(v59, v67);
        v66 = (uint32x4_t)vaddq_s32((int32x4_t)v66, v68);
        v65 = (uint32x4_t)vaddq_s32((int32x4_t)v65, v68);
        v64 = (uint32x4_t)vaddq_s32((int32x4_t)v64, v68);
        v63 = (uint32x4_t)vaddq_s32((int32x4_t)v63, v68);
        v69 -= 16;
      }
      while (v69);
      v74 = (unint64_t)v29 < v28;
      v75 = veorq_s8(veorq_s8(v61, v71), veorq_s8(v70, v72));
      *(int8x8_t *)v75.i8 = veor_s8(*(int8x8_t *)v75.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL));
      v25 = v75.i32[0] ^ v75.i32[1];
      LOWORD(v27) = vaddvq_s16(vaddq_s16(v60, v59));
      if (v57 == v58)
        goto LABEL_41;
      v30 -= 8 * v58;
    }
    else
    {
      v33 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v76 = *v33++;
      v25 ^= v76 << v30;
      LOWORD(v27) = v27 + 8;
      v74 = (unint64_t)v33 < v28;
      v77 = v30 >= 8;
      v30 -= 8;
    }
    while (v77 && (unint64_t)v33 < v28);
LABEL_41:
    if (v74)
    {
LABEL_43:
      *(_DWORD *)(a3 + 48) = v25;
      *(_WORD *)(a3 + 54) = v27;
      *(_QWORD *)(a3 + 40) = v33;
      goto LABEL_44;
    }
LABEL_42:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v27 + 0x4000;
    LOWORD(v27) = 0x4000;
    goto LABEL_43;
  }
LABEL_44:
  v78 = *(unsigned __int8 *)(a3 + 56);
  if (*(_BYTE *)(a3 + 56))
  {
    v79 = v13[2];
    v80 = (v79 >> 4) + 4;
    v81 = *v13;
    v82 = v81 - (v81 >> v80);
    v83 = v81 + ((int)(0x8000 - v81) >> v80);
    if (v18 >= 1)
      v84 = v83;
    else
      v84 = v82;
    *v13 = v84;
    if (v79 >= 0x20)
      v85 = v79;
    else
      v85 = v79 + 1;
    v13[2] = v85;
  }
  if (!v26)
    goto LABEL_2;
  v86 = 0;
  v87 = a3 + 16;
  v88 = (unsigned __int16 *)(v12 + 16 * v8 + 9720);
  v89 = *(unsigned __int16 *)(a3 + 52);
  v90 = v89 >> 8;
  v91 = 28;
  v92 = 0xFF00000000000000;
  do
  {
    v93 = v89;
    v94 = v90 * (v88[v86] >> 6);
    v91 -= 4;
    v89 = v91 + (v94 >> 1);
    ++v86;
    v92 += 0x100000000000000;
  }
  while (HIWORD(v25) < v89);
  v95 = v93 - (v94 >> 1) - v91;
  v96 = __clz(v95);
  v97 = (v96 ^ 0xFFE0) + 16;
  v98 = *(_WORD *)(a3 + 54) - v97;
  *(_WORD *)(a3 + 54) = v98;
  v99 = ((v25 - (v89 << 16) + 1) << ((v96 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a3 + 48) = v99;
  *(_WORD *)(a3 + 52) = v95 << v97;
  v100 = v86 - 1;
  if (v98 < 0)
  {
    v101 = *(_QWORD *)(a3 + 32);
    v102 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v102 >= v101)
    {
      v106 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_73;
    }
    v103 = 8 - v98;
    if (v103 >= 7)
      v104 = 7;
    else
      v104 = 8 - v98;
    v105 = ((v104 ^ 0xFu) - v98) >> 3;
    if (v105 >= ~(unint64_t)v102 + v101)
      v105 = ~(unint64_t)v102 + v101;
    if (v105 >= 0xF)
    {
      v107 = v105 + 1;
      v108 = (v105 + 1) & 0x3FFFFFF0;
      v106 = &v102->u8[v108];
      v109 = 0uLL;
      v110 = (int16x8_t)(unsigned __int16)v98;
      v111 = (int8x16_t)v99;
      v112 = vdupq_n_s32(v103);
      v113 = (uint32x4_t)vaddq_s32(v112, (int32x4_t)xmmword_208F3A6C0);
      v114 = (uint32x4_t)vaddq_s32(v112, (int32x4_t)xmmword_208F3A6D0);
      v115 = (uint32x4_t)vaddq_s32(v112, (int32x4_t)xmmword_208F3A6A0);
      v116 = (uint32x4_t)vaddq_s32(v112, (int32x4_t)xmmword_208F3A6B0);
      v117.i64[0] = 0x8000800080008;
      v117.i64[1] = 0x8000800080008;
      v118.i64[0] = 0x7F0000007FLL;
      v118.i64[1] = 0x7F0000007FLL;
      v119 = v108;
      v120 = 0uLL;
      v121 = 0uLL;
      v122 = 0uLL;
      do
      {
        v123 = *v102++;
        v121 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_208F04F30), v114), v121);
        v120 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_208F04F40), v115), v120);
        v111 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_208F04F50), v116), v111);
        v122 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_208F04F20), v113), v122);
        v110 = vaddq_s16(v110, v117);
        v109 = vaddq_s16(v109, v117);
        v116 = (uint32x4_t)vaddq_s32((int32x4_t)v116, v118);
        v115 = (uint32x4_t)vaddq_s32((int32x4_t)v115, v118);
        v114 = (uint32x4_t)vaddq_s32((int32x4_t)v114, v118);
        v113 = (uint32x4_t)vaddq_s32((int32x4_t)v113, v118);
        v119 -= 16;
      }
      while (v119);
      v124 = (unint64_t)v102 < v101;
      v125 = veorq_s8(veorq_s8(v111, v121), veorq_s8(v120, v122));
      *(int8x8_t *)v125.i8 = veor_s8(*(int8x8_t *)v125.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
      v99 = v125.i32[0] ^ v125.i32[1];
      v98 = vaddvq_s16(vaddq_s16(v110, v109));
      if (v107 == v108)
        goto LABEL_72;
      v103 -= 8 * v108;
    }
    else
    {
      v106 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v126 = *v106++;
      v99 ^= v126 << v103;
      v98 += 8;
      v124 = (unint64_t)v106 < v101;
      v77 = v103 >= 8;
      v103 -= 8;
    }
    while (v77 && (unint64_t)v106 < v101);
LABEL_72:
    if (v124)
    {
LABEL_74:
      *(_DWORD *)(a3 + 48) = v99;
      *(_WORD *)(a3 + 54) = v98;
      *(_QWORD *)(a3 + 40) = v106;
      goto LABEL_75;
    }
LABEL_73:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v98 + 0x4000;
    v98 = 0x4000;
    goto LABEL_74;
  }
LABEL_75:
  if (!v78)
    goto LABEL_93;
  v127 = v88[7];
  v128 = (v127 >> 4) + 5;
  v129 = *v88;
  if ((uint64_t)v92 <= 0)
  {
    *v88 = v129 - (v129 >> v128);
    v130 = v88[1];
    goto LABEL_84;
  }
  *v88 = v129 + ((int)(0x8000 - v129) >> v128);
  v130 = v88[1];
  if (v92 <= 0x100000000000000)
  {
LABEL_84:
    v88[1] = v130 - (v130 >> v128);
    v131 = v88[2];
    goto LABEL_85;
  }
  v88[1] = v130 + ((int)(0x8000 - v130) >> v128);
  v131 = v88[2];
  if (v92 <= 0x200000000000000)
  {
LABEL_85:
    v88[2] = v131 - (v131 >> v128);
    v132 = v88[3];
    goto LABEL_86;
  }
  v88[2] = v131 + ((int)(0x8000 - v131) >> v128);
  v132 = v88[3];
  if (v92 <= 0x300000000000000)
  {
LABEL_86:
    v88[3] = v132 - (v132 >> v128);
    v133 = v88[4];
    goto LABEL_87;
  }
  v88[3] = v132 + ((int)(0x8000 - v132) >> v128);
  v133 = v88[4];
  if (v92 <= 0x400000000000000)
  {
LABEL_87:
    v88[4] = v133 - (v133 >> v128);
    v134 = v88[5];
    goto LABEL_88;
  }
  v88[4] = v133 + ((int)(0x8000 - v133) >> v128);
  v134 = v88[5];
  if (v92 <= 0x500000000000000)
  {
LABEL_88:
    v135 = v134 - (v134 >> v128);
    goto LABEL_89;
  }
  v135 = v134 + ((int)(0x8000 - v134) >> v128);
LABEL_89:
  v88[5] = v135;
  if (v127 >= 0x20)
    v136 = v127;
  else
    v136 = v127 + 1;
  v88[7] = v136;
LABEL_93:
  v301 = v5;
  v303 = v8;
  v305 = a3;
  v307 = v4;
  __dst = v6 + 94;
  v6[142] = v100 + 2;
  v137 = *(_DWORD *)(*(_QWORD *)(v4 + 24680) + 72);
  palette_cache = av1_get_palette_cache(v3, 0, (uint64_t)v310);
  v139 = 0;
  v140 = v6[142];
  v141 = v6[142] != 0;
  if (palette_cache >= 1 && v6[142])
  {
    v142 = 0;
    v139 = 0;
    v143 = palette_cache;
    do
    {
      if (od_ec_decode_BOOL_q15(v87, 0x4000u))
        __src[v139++] = v310[v142];
      ++v142;
      v141 = v139 < (int)v140;
    }
    while (v142 < v143 && v139 < (int)v140);
  }
  if (v141)
  {
    v299 = v3;
    v144 = 0;
    if (v137 >= 1)
    {
      v145 = v137 + 1;
      do
        v144 |= od_ec_decode_BOOL_q15(v87, 0x4000u) << (v145-- - 2);
      while (v145 > 1);
    }
    __dst[v139] = v144;
    if (v139 + 1 < (int)v140)
    {
      v146 = od_ec_decode_BOOL_q15(v87, 0x4000u);
      v147 = v137 + (od_ec_decode_BOOL_q15(v87, 0x4000u) | (2 * v146));
      v148 = 1 << v137;
      v149 = (1 << v137) + ~(unsigned __int16)__dst[v139];
      v150 = v147 - 3;
      v151 = v148 - 1;
      v152 = v139 + 1;
      do
      {
        if (v150 < 1)
        {
          v153 = 0;
        }
        else
        {
          v153 = 0;
          v160 = v150 + 1;
          do
            v153 |= od_ec_decode_BOOL_q15(v87, 0x4000u) << (v160-- - 2);
          while (v160 > 1);
        }
        v154 = &__dst[v152];
        v155 = *(v154 - 1);
        v156 = v153 + v155 + 1;
        if (v156 < v151)
          v157 = v153 + v155 + 1;
        else
          v157 = v151;
        if (v156 < 0)
          v157 = 0;
        *v154 = v157;
        v149 += v155 - v157;
        v158 = __clz(v149 - 1) ^ 0x1F;
        if (v149 >= 2)
          v159 = v158 + 1;
        else
          v159 = 0;
        if (v150 >= v159)
          v150 = v159;
        ++v152;
      }
      while ((_DWORD)v152 != (_DWORD)v140);
    }
    v4 = v307;
    v7 = v6 + 94;
    v3 = v299;
    LODWORD(v8) = v303;
    a3 = v305;
    v5 = v301;
    if ((_DWORD)v140 && v139)
    {
      v161 = 0;
      v162 = v6 + 94;
      v163 = v140;
      v164 = v139;
      do
      {
        while (v161 < v139)
        {
          v165 = (unsigned __int16)__src[v161];
          if (v164 < (int)v140 && (v166 = (unsigned __int16)__dst[v164], v165 > v166))
          {
            ++v164;
            *v162++ = v166;
            if (!--v163)
              goto LABEL_2;
          }
          else
          {
            ++v161;
            *v162++ = v165;
            if (!--v163)
              goto LABEL_2;
          }
        }
        v167 = __dst[v164++];
        *v162++ = v167;
        --v163;
      }
      while (v163);
    }
  }
  else
  {
    v7 = v6 + 94;
    memcpy(__dst, __src, 2 * v140);
    a3 = v305;
    v4 = v307;
    LODWORD(v8) = v303;
    v5 = v301;
  }
LABEL_2:
  if (v5 || v6[3] || !*(_BYTE *)(v3 + 12))
    return;
  v34 = 0;
  v35 = *(_QWORD *)(v3 + 10648);
  v36 = (unsigned __int16 *)(v35 + 6 * (v6[142] != 0) + 11330);
  v37 = *(_DWORD *)(a3 + 48);
  v38 = *(unsigned __int16 *)(a3 + 52);
  v39 = v38 >> 8;
  v40 = 8;
  v41 = 0xFF00000000000000;
  do
  {
    v42 = v38;
    v43 = v39 * (v36[v34] >> 6);
    v40 -= 4;
    v38 = v40 + (v43 >> 1);
    ++v34;
    v41 += 0x100000000000000;
  }
  while (HIWORD(v37) < v38);
  v44 = v42 - (v43 >> 1) - v40;
  v45 = __clz(v44);
  v46 = (v45 ^ 0xFFE0) + 16;
  v47 = *(_WORD *)(a3 + 54) - v46;
  *(_WORD *)(a3 + 54) = v47;
  v48 = ((v37 - (v38 << 16) + 1) << ((v45 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a3 + 48) = v48;
  *(_WORD *)(a3 + 52) = v44 << v46;
  v49 = v34 - 1;
  if (v47 < 0)
  {
    v50 = v47;
    v51 = *(_QWORD *)(a3 + 32);
    v52 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v52 >= v51)
    {
      v56 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_143;
    }
    v53 = 8 - v50;
    if ((8 - v50) >= 7)
      v54 = 7;
    else
      v54 = 8 - v50;
    v55 = ((v54 ^ 0xFu) - v50) >> 3;
    if (v55 >= ~(unint64_t)v52 + v51)
      v55 = ~(unint64_t)v52 + v51;
    if (v55 >= 0xF)
    {
      v168 = v55 + 1;
      v169 = (v55 + 1) & 0x3FFFFFF0;
      v56 = &v52->u8[v169];
      v170 = 0uLL;
      v171 = (int16x8_t)(unsigned __int16)v50;
      v172 = (int8x16_t)v48;
      v173 = vdupq_n_s32(v53);
      v174 = (uint32x4_t)vaddq_s32(v173, (int32x4_t)xmmword_208F3A6C0);
      v175 = (uint32x4_t)vaddq_s32(v173, (int32x4_t)xmmword_208F3A6D0);
      v176 = (uint32x4_t)vaddq_s32(v173, (int32x4_t)xmmword_208F3A6A0);
      v177 = (uint32x4_t)vaddq_s32(v173, (int32x4_t)xmmword_208F3A6B0);
      v178.i64[0] = 0x8000800080008;
      v178.i64[1] = 0x8000800080008;
      v179.i64[0] = 0x7F0000007FLL;
      v179.i64[1] = 0x7F0000007FLL;
      v180 = v169;
      v181 = 0uLL;
      v182 = 0uLL;
      v183 = 0uLL;
      do
      {
        v184 = *v52++;
        v182 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_208F04F30), v175), v182);
        v181 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_208F04F40), v176), v181);
        v172 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_208F04F50), v177), v172);
        v183 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_208F04F20), v174), v183);
        v171 = vaddq_s16(v171, v178);
        v170 = vaddq_s16(v170, v178);
        v177 = (uint32x4_t)vaddq_s32((int32x4_t)v177, v179);
        v176 = (uint32x4_t)vaddq_s32((int32x4_t)v176, v179);
        v175 = (uint32x4_t)vaddq_s32((int32x4_t)v175, v179);
        v174 = (uint32x4_t)vaddq_s32((int32x4_t)v174, v179);
        v180 -= 16;
      }
      while (v180);
      v185 = (unint64_t)v52 < v51;
      v186 = veorq_s8(veorq_s8(v172, v182), veorq_s8(v181, v183));
      *(int8x8_t *)v186.i8 = veor_s8(*(int8x8_t *)v186.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL));
      v48 = v186.i32[0] ^ v186.i32[1];
      LOWORD(v50) = vaddvq_s16(vaddq_s16(v171, v170));
      if (v168 == v169)
        goto LABEL_142;
      v53 -= 8 * v169;
    }
    else
    {
      v56 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v187 = *v56++;
      v48 ^= v187 << v53;
      LOWORD(v50) = v50 + 8;
      v185 = (unint64_t)v56 < v51;
      v77 = v53 >= 8;
      v53 -= 8;
    }
    while (v77 && (unint64_t)v56 < v51);
LABEL_142:
    if (v185)
    {
LABEL_144:
      *(_DWORD *)(a3 + 48) = v48;
      *(_WORD *)(a3 + 54) = v50;
      *(_QWORD *)(a3 + 40) = v56;
      goto LABEL_145;
    }
LABEL_143:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v50 + 0x4000;
    LOWORD(v50) = 0x4000;
    goto LABEL_144;
  }
LABEL_145:
  v188 = *(unsigned __int8 *)(a3 + 56);
  if (*(_BYTE *)(a3 + 56))
  {
    v189 = v36[2];
    v190 = (v189 >> 4) + 4;
    v191 = *v36;
    v192 = v191 - (v191 >> v190);
    v193 = v191 + ((int)(0x8000 - v191) >> v190);
    if (v41 >= 1)
      v194 = v193;
    else
      v194 = v192;
    *v36 = v194;
    if (v189 >= 0x20)
      v195 = v189;
    else
      v195 = v189 + 1;
    v36[2] = v195;
  }
  if (!v49)
    return;
  v196 = 0;
  v197 = a3 + 16;
  v198 = (unsigned __int16 *)(v35 + 16 * (int)v8 + 9832);
  v199 = *(unsigned __int16 *)(a3 + 52);
  v200 = v199 >> 8;
  v201 = 2;
  v202 = 28;
  v203 = 0xFF00000000000000;
  do
  {
    v204 = v199;
    v205 = v201;
    v206 = v200 * (v198[v196] >> 6);
    v202 -= 4;
    v199 = v202 + (v206 >> 1);
    ++v201;
    ++v196;
    v203 += 0x100000000000000;
  }
  while (HIWORD(v48) < v199);
  v207 = v204 - (v206 >> 1) - v202;
  v208 = (__clz(v207) ^ 0xFFFFFFE0) + 16;
  v209 = *(_WORD *)(a3 + 54) - v208;
  *(_WORD *)(a3 + 54) = v209;
  v210 = ((v48 - (v199 << 16) + 1) << v208) - 1;
  *(_DWORD *)(a3 + 48) = v210;
  *(_WORD *)(a3 + 52) = v207 << v208;
  v211 = v196 - 1;
  if (v209 < 0)
  {
    v212 = *(_QWORD *)(a3 + 32);
    v213 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v213 >= v212)
    {
      v217 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_174;
    }
    v214 = 8 - v209;
    if (v214 >= 7)
      v215 = 7;
    else
      v215 = 8 - v209;
    v216 = ((v215 ^ 0xFu) - v209) >> 3;
    if (v216 >= ~(unint64_t)v213 + v212)
      v216 = ~(unint64_t)v213 + v212;
    if (v216 >= 0xF)
    {
      v218 = v216 + 1;
      v219 = (v216 + 1) & 0x3FFFFFF0;
      v217 = &v213->u8[v219];
      v220 = 0uLL;
      v221 = (int16x8_t)(unsigned __int16)v209;
      v222 = (int8x16_t)v210;
      v223 = vdupq_n_s32(v214);
      v224 = (uint32x4_t)vaddq_s32(v223, (int32x4_t)xmmword_208F3A6C0);
      v225 = (uint32x4_t)vaddq_s32(v223, (int32x4_t)xmmword_208F3A6D0);
      v226 = (uint32x4_t)vaddq_s32(v223, (int32x4_t)xmmword_208F3A6A0);
      v227 = (uint32x4_t)vaddq_s32(v223, (int32x4_t)xmmword_208F3A6B0);
      v228.i64[0] = 0x8000800080008;
      v228.i64[1] = 0x8000800080008;
      v229.i64[0] = 0x7F0000007FLL;
      v229.i64[1] = 0x7F0000007FLL;
      v230 = v219;
      v231 = 0uLL;
      v232 = 0uLL;
      v233 = 0uLL;
      do
      {
        v234 = *v213++;
        v232 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v234, (int8x16_t)xmmword_208F04F30), v225), v232);
        v231 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v234, (int8x16_t)xmmword_208F04F40), v226), v231);
        v222 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v234, (int8x16_t)xmmword_208F04F50), v227), v222);
        v233 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v234, (int8x16_t)xmmword_208F04F20), v224), v233);
        v221 = vaddq_s16(v221, v228);
        v220 = vaddq_s16(v220, v228);
        v227 = (uint32x4_t)vaddq_s32((int32x4_t)v227, v229);
        v226 = (uint32x4_t)vaddq_s32((int32x4_t)v226, v229);
        v225 = (uint32x4_t)vaddq_s32((int32x4_t)v225, v229);
        v224 = (uint32x4_t)vaddq_s32((int32x4_t)v224, v229);
        v230 -= 16;
      }
      while (v230);
      v235 = (unint64_t)v213 < v212;
      v236 = veorq_s8(veorq_s8(v222, v232), veorq_s8(v231, v233));
      *(int8x8_t *)v236.i8 = veor_s8(*(int8x8_t *)v236.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL));
      v210 = v236.i32[0] ^ v236.i32[1];
      v209 = vaddvq_s16(vaddq_s16(v221, v220));
      if (v218 == v219)
        goto LABEL_173;
      v214 -= 8 * v219;
    }
    else
    {
      v217 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v237 = *v217++;
      v210 ^= v237 << v214;
      v209 += 8;
      v235 = (unint64_t)v217 < v212;
      v77 = v214 >= 8;
      v214 -= 8;
    }
    while (v77 && (unint64_t)v217 < v212);
LABEL_173:
    if (v235)
    {
LABEL_175:
      *(_DWORD *)(a3 + 48) = v210;
      *(_WORD *)(a3 + 54) = v209;
      *(_QWORD *)(a3 + 40) = v217;
      goto LABEL_176;
    }
LABEL_174:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v209 + 0x4000;
    v209 = 0x4000;
    goto LABEL_175;
  }
LABEL_176:
  if (v188)
  {
    v238 = v198[7];
    v239 = (v238 >> 4) + 5;
    v240 = *v198;
    if ((uint64_t)v203 <= 0)
    {
      *v198 = v240 - (v240 >> v239);
      v241 = v198[1];
    }
    else
    {
      *v198 = v240 + ((int)(0x8000 - v240) >> v239);
      v241 = v198[1];
      if (v203 > 0x100000000000000)
      {
        v198[1] = v241 + ((int)(0x8000 - v241) >> v239);
        v242 = v198[2];
        if (v203 > 0x200000000000000)
        {
          v198[2] = v242 + ((int)(0x8000 - v242) >> v239);
          v243 = v198[3];
          if (v203 > 0x300000000000000)
          {
            v198[3] = v243 + ((int)(0x8000 - v243) >> v239);
            v244 = v198[4];
            if (v203 > 0x400000000000000)
            {
              v198[4] = v244 + ((int)(0x8000 - v244) >> v239);
              v245 = v198[5];
              if (v203 > 0x500000000000000)
              {
                v246 = v245 + ((int)(0x8000 - v245) >> v239);
LABEL_190:
                v198[5] = v246;
                if (v238 >= 0x20)
                  v247 = v238;
                else
                  v247 = v238 + 1;
                v198[7] = v247;
                goto LABEL_194;
              }
LABEL_189:
              v246 = v245 - (v245 >> v239);
              goto LABEL_190;
            }
LABEL_188:
            v198[4] = v244 - (v244 >> v239);
            v245 = v198[5];
            goto LABEL_189;
          }
LABEL_187:
          v198[3] = v243 - (v243 >> v239);
          v244 = v198[4];
          goto LABEL_188;
        }
LABEL_186:
        v198[2] = v242 - (v242 >> v239);
        v243 = v198[3];
        goto LABEL_187;
      }
    }
    v198[1] = v241 - (v241 >> v239);
    v242 = v198[2];
    goto LABEL_186;
  }
LABEL_194:
  v300 = v6;
  v6[143] = v211 + 2;
  v304 = *(_DWORD *)(*(_QWORD *)(v4 + 24680) + 72);
  v248 = av1_get_palette_cache(v3, 1, (uint64_t)v310);
  v249 = 0;
  v250 = (v211 + 2);
  v251 = v250 != 0;
  if (v211 != 0xFE && v248 >= 1)
  {
    v252 = 0;
    v249 = 0;
    v253 = v248;
    do
    {
      if (od_ec_decode_BOOL_q15(v197, 0x4000u))
        __src[v249++] = v310[v252];
      ++v252;
      v251 = v249 < v250;
    }
    while (v252 < v253 && v249 < v250);
  }
  v306 = (v211 + 2);
  if (v251)
  {
    v254 = v249 + 8;
    v302 = v211;
    v255 = 0;
    if (v304 >= 1)
    {
      v256 = v304 + 1;
      do
        v255 |= od_ec_decode_BOOL_q15(v197, 0x4000u) << (v256-- - 2);
      while (v256 > 1);
    }
    *(_WORD *)&v7[2 * v254] = v255;
    if (v249 + 9 < v306 + 8)
    {
      v257 = od_ec_decode_BOOL_q15(v197, 0x4000u);
      v258 = v304 + (od_ec_decode_BOOL_q15(v197, 0x4000u) | (2 * v257));
      v259 = (1 << v304) - *(unsigned __int16 *)&v7[2 * v254];
      v260 = v258 - 3;
      v261 = v249 + 9;
      do
      {
        if (v260 < 1)
        {
          v262 = 0;
        }
        else
        {
          v262 = 0;
          v269 = v260 + 1;
          do
            v262 |= od_ec_decode_BOOL_q15(v197, 0x4000u) << (v269-- - 2);
          while (v269 > 1);
        }
        v263 = &v7[2 * v261];
        v264 = *((unsigned __int16 *)v263 - 1);
        v265 = (1 << v304) - 1;
        if (v262 + v264 < (1 << v304) - 1)
          v265 = v262 + v264;
        if (v262 + v264 >= 0)
          v266 = v265;
        else
          v266 = 0;
        *(_WORD *)v263 = v266;
        v259 += v264 - v266;
        v267 = __clz(v259 - 1) ^ 0x1F;
        if (v259 >= 2)
          v268 = v267 + 1;
        else
          v268 = 0;
        if (v260 >= v268)
          v260 = v268;
        ++v261;
      }
      while (v306 + 8 != (_DWORD)v261);
    }
    v270 = v300;
    v211 = v302;
    v271 = v304;
    if ((_BYTE)v306 && v249)
    {
      v276 = 0;
      v277 = v300 + 110;
      v278 = v205;
      v279 = v300 + 110;
      v280 = v249;
      do
      {
        while (v276 < v249)
        {
          v281 = (unsigned __int16)__src[v276];
          if (v280 < v306 && (v282 = *(unsigned __int16 *)&v277[2 * v280], v281 > v282))
          {
            ++v280;
            *v279++ = v282;
            if (!--v278)
              goto LABEL_224;
          }
          else
          {
            ++v276;
            *v279++ = v281;
            if (!--v278)
              goto LABEL_224;
          }
        }
        v283 = *(_WORD *)&v277[2 * v280++];
        *v279++ = v283;
        --v278;
      }
      while (v278);
    }
  }
  else
  {
    v270 = v6;
    memcpy(v6 + 110, __src, 2 * (v211 + 2));
    v271 = v304;
  }
LABEL_224:
  if (od_ec_decode_BOOL_q15(v197, 0x4000u))
  {
    v272 = od_ec_decode_BOOL_q15(v197, 0x4000u);
    v273 = od_ec_decode_BOOL_q15(v197, 0x4000u);
    if (v271 < 1)
    {
      LOWORD(v274) = 0;
    }
    else
    {
      v274 = 0;
      v275 = v271 + 1;
      do
        v274 |= od_ec_decode_BOOL_q15(v197, 0x4000u) << (v275-- - 2);
      while (v275 > 1);
    }
    *((_WORD *)v300 + 63) = v274;
    if (v211 <= 0xFDu)
    {
      v287 = v273 | (2 * v272);
      v288 = 1 << v271;
      v289 = v271 + v287 - 4;
      v290 = v271 + v287 - 5;
      v291 = 1;
      do
      {
        if (v289 < 1)
          goto LABEL_250;
        v296 = 0;
        v297 = v290;
        do
        {
          v296 |= od_ec_decode_BOOL_q15(v197, 0x4000u) << v297;
          v298 = v297-- + 1;
        }
        while (v298 > 1);
        if (v296)
        {
          if (od_ec_decode_BOOL_q15(v197, 0x4000u))
            v292 = -v296;
          else
            v292 = v296;
        }
        else
        {
LABEL_250:
          v292 = 0;
        }
        v293 = &v7[2 * v291];
        v294 = (v288 & ((v292 + *((unsigned __int16 *)v293 + 15)) >> 31)) + v292 + *((unsigned __int16 *)v293 + 15);
        if (v294 >= v288)
          v295 = v288;
        else
          v295 = 0;
        *((_WORD *)v293 + 16) = v294 - v295;
        ++v291;
      }
      while (v291 != v306);
    }
  }
  else if ((_BYTE)v306)
  {
    if (v271 <= 0)
    {
      bzero(v270 + 126, 2 * v306);
    }
    else
    {
      v284 = 0;
      do
      {
        v285 = 0;
        v286 = v271 + 1;
        do
          v285 |= od_ec_decode_BOOL_q15(v197, 0x4000u) << (v286-- - 2);
        while (v286 > 1);
        *(_WORD *)&v7[2 * v284++ + 32] = v285;
      }
      while (v284 != v306);
    }
  }
}

unint64_t read_filter_intra_mode_info(unint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  unsigned __int8 v21;
  int v22;
  unint64_t v23;
  int8x16_t *v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int32x4_t v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  BOOL v46;
  int8x16_t v47;
  int v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  unsigned __int8 v67;
  int v68;
  unint64_t v69;
  int8x16_t *v70;
  unsigned int v71;
  int v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unint64_t v75;
  uint64_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int16x8_t v85;
  int32x4_t v86;
  uint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  BOOL v92;
  int8x16_t v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned __int16 v102;

  v3 = **(unsigned __int8 ***)(a2 + 7864);
  if (v3[2]
    || v3[142]
    || ((v4 = *v3, v4 != 255) ? (v5 = *(_BYTE *)(*(_QWORD *)(result + 24680) + 60) == 0) : (v5 = 1),
        v5 || ((0x1F07FFuLL >> v4) & 1) == 0 || ((0x2F0BFFuLL >> v4) & 1) == 0))
  {
    v3[91] = 0;
    return result;
  }
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 10648);
  v8 = (unsigned __int16 *)(v7 + 12694);
  v9 = (unsigned __int16 *)(v7 + 6 * *v3 + 12562);
  v10 = *(_DWORD *)(a3 + 48);
  v11 = *(unsigned __int16 *)(a3 + 52);
  v12 = v11 >> 8;
  v13 = 8;
  v14 = 0xFF00000000000000;
  result = 0x100000000000000;
  do
  {
    v15 = v11;
    v16 = v12 * (v9[v6] >> 6);
    v13 -= 4;
    v11 = v13 + (v16 >> 1);
    ++v6;
    v14 += 0x100000000000000;
  }
  while (HIWORD(v10) < v11);
  v17 = v15 - (v16 >> 1) - v13;
  v18 = (__clz(v17) ^ 0xFFFFFFE0) + 16;
  v19 = *(_WORD *)(a3 + 54) - v18;
  *(_WORD *)(a3 + 54) = v19;
  v20 = ((v10 - (v11 << 16) + 1) << v18) - 1;
  *(_DWORD *)(a3 + 48) = v20;
  *(_WORD *)(a3 + 52) = v17 << v18;
  v21 = v6 - 1;
  if (v19 < 0)
  {
    v22 = v19;
    v23 = *(_QWORD *)(a3 + 32);
    v24 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v24 >= v23)
    {
      v28 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_32;
    }
    v25 = 8 - v22;
    if ((8 - v22) >= 7)
      v26 = 7;
    else
      v26 = 8 - v22;
    v27 = ((v26 ^ 0xFu) - v22) >> 3;
    result = ~(unint64_t)v24 + v23;
    if (v27 >= result)
      v27 = ~(unint64_t)v24 + v23;
    if (v27 >= 0xF)
    {
      v29 = v27 + 1;
      v30 = (v27 + 1) & 0x3FFFFFF0;
      v28 = &v24->u8[v30];
      result = v25 - 8 * (_DWORD)v30;
      v31 = 0uLL;
      v32 = (int16x8_t)(unsigned __int16)v22;
      v33 = (int8x16_t)v20;
      v34 = vdupq_n_s32(v25);
      v35 = vaddq_s32(v34, (int32x4_t)xmmword_208F3A6C0);
      v36 = vaddq_s32(v34, (int32x4_t)xmmword_208F3A6D0);
      v37 = vaddq_s32(v34, (int32x4_t)xmmword_208F3A6A0);
      v38 = vaddq_s32(v34, (int32x4_t)xmmword_208F3A6B0);
      v39.i64[0] = 0x8000800080008;
      v39.i64[1] = 0x8000800080008;
      v40.i64[0] = 0x7F0000007FLL;
      v40.i64[1] = 0x7F0000007FLL;
      v41 = v30;
      v42 = 0uLL;
      v43 = 0uLL;
      v44 = 0uLL;
      do
      {
        v45 = *v24++;
        v43 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v36), v43);
        v42 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v37), v42);
        v33 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v38), v33);
        v44 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v35), v44);
        v32 = vaddq_s16(v32, v39);
        v31 = vaddq_s16(v31, v39);
        v38 = vaddq_s32(v38, v40);
        v37 = vaddq_s32(v37, v40);
        v36 = vaddq_s32(v36, v40);
        v35 = vaddq_s32(v35, v40);
        v41 -= 16;
      }
      while (v41);
      v46 = (unint64_t)v24 < v23;
      v47 = veorq_s8(veorq_s8(v33, v43), veorq_s8(v42, v44));
      *(int8x8_t *)v47.i8 = veor_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
      v20 = v47.i32[0] ^ v47.i32[1];
      LOWORD(v22) = vaddvq_s16(vaddq_s16(v32, v31));
      if (v29 == v30)
        goto LABEL_31;
      v25 -= 8 * v30;
    }
    else
    {
      v28 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v48 = *v28++;
      v20 ^= v48 << v25;
      LOWORD(v22) = v22 + 8;
      v46 = (unint64_t)v28 < v23;
      v49 = v25 >= 8;
      v25 -= 8;
    }
    while (v49 && (unint64_t)v28 < v23);
LABEL_31:
    if (v46)
    {
LABEL_33:
      *(_DWORD *)(a3 + 48) = v20;
      *(_WORD *)(a3 + 54) = v22;
      *(_QWORD *)(a3 + 40) = v28;
      goto LABEL_34;
    }
LABEL_32:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v22 + 0x4000;
    LOWORD(v22) = 0x4000;
    goto LABEL_33;
  }
LABEL_34:
  v50 = *(unsigned __int8 *)(a3 + 56);
  if (*(_BYTE *)(a3 + 56))
  {
    v51 = v9[2];
    v52 = (v51 >> 4) + 4;
    v53 = *v9;
    result = v53 - (v53 >> v52);
    v54 = v53 + ((int)(0x8000 - v53) >> v52);
    if (v14 >= 1)
      v55 = v54;
    else
      v55 = result;
    *v9 = v55;
    if (v51 >= 0x20)
      v56 = v51;
    else
      v56 = v51 + 1;
    v9[2] = v56;
  }
  v3[91] = v21;
  if (v21)
  {
    v57 = 0;
    v58 = *(unsigned __int16 *)(a3 + 52);
    v59 = v58 >> 8;
    v60 = 20;
    v61 = 0xFF00000000000000;
    do
    {
      v62 = v58;
      v63 = v59 * (v8[v57] >> 6);
      v60 -= 4;
      v58 = v60 + (v63 >> 1);
      ++v57;
      v61 += 0x100000000000000;
    }
    while (HIWORD(v20) < v58);
    v64 = v62 - (v63 >> 1) - v60;
    result = (__clz(v64) ^ 0xFFFFFFE0) + 16;
    v65 = *(_WORD *)(a3 + 54) - result;
    *(_WORD *)(a3 + 54) = v65;
    v66 = ((v20 - (v58 << 16) + 1) << result) - 1;
    *(_DWORD *)(a3 + 48) = v66;
    *(_WORD *)(a3 + 52) = v64 << result;
    v67 = v57 - 1;
    if ((v65 & 0x8000) == 0)
    {
LABEL_65:
      if (!v50)
      {
LABEL_79:
        v3[90] = v67;
        return result;
      }
      v95 = v8[5];
      v96 = (v95 >> 4) + 5;
      v97 = *v8;
      if ((uint64_t)v61 <= 0)
      {
        *v8 = v97 - (v97 >> v96);
        v98 = v8[1];
      }
      else
      {
        *v8 = v97 + ((int)(0x8000 - v97) >> v96);
        v98 = v8[1];
        if (v61 > 0x100000000000000)
        {
          v8[1] = v98 + ((int)(0x8000 - v98) >> v96);
          v99 = v8[2];
          if (v61 > 0x200000000000000)
          {
            v8[2] = v99 + ((int)(0x8000 - v99) >> v96);
            v100 = v8[3];
            if (v61 > 0x300000000000000)
            {
              v101 = v100 + ((int)(0x8000 - v100) >> v96);
LABEL_75:
              v8[3] = v101;
              if (v95 >= 0x20)
                v102 = v95;
              else
                v102 = v95 + 1;
              v8[5] = v102;
              goto LABEL_79;
            }
LABEL_74:
            v101 = v100 - (v100 >> v96);
            goto LABEL_75;
          }
LABEL_73:
          v8[2] = v99 - (v99 >> v96);
          v100 = v8[3];
          goto LABEL_74;
        }
      }
      v8[1] = v98 - (v98 >> v96);
      v99 = v8[2];
      goto LABEL_73;
    }
    v68 = v65;
    v69 = *(_QWORD *)(a3 + 32);
    v70 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v70 >= v69)
    {
      v74 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_63;
    }
    v71 = 8 - v65;
    if (v71 >= 7)
      v72 = 7;
    else
      v72 = 8 - v65;
    v73 = ((v72 ^ 0xFu) - v68) >> 3;
    result = ~(unint64_t)v70 + v69;
    if (v73 >= result)
      v73 = ~(unint64_t)v70 + v69;
    if (v73 >= 0xF)
    {
      v75 = v73 + 1;
      v76 = (v73 + 1) & 0x3FFFFFF0;
      v74 = &v70->u8[v76];
      result = v71 - 8 * (_DWORD)v76;
      v77 = 0uLL;
      v78 = (int16x8_t)(unsigned __int16)v68;
      v79 = (int8x16_t)v66;
      v80 = vdupq_n_s32(v71);
      v81 = vaddq_s32(v80, (int32x4_t)xmmword_208F3A6C0);
      v82 = vaddq_s32(v80, (int32x4_t)xmmword_208F3A6D0);
      v83 = vaddq_s32(v80, (int32x4_t)xmmword_208F3A6A0);
      v84 = vaddq_s32(v80, (int32x4_t)xmmword_208F3A6B0);
      v85.i64[0] = 0x8000800080008;
      v85.i64[1] = 0x8000800080008;
      v86.i64[0] = 0x7F0000007FLL;
      v86.i64[1] = 0x7F0000007FLL;
      v87 = v76;
      v88 = 0uLL;
      v89 = 0uLL;
      v90 = 0uLL;
      do
      {
        v91 = *v70++;
        v89 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v91, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v82), v89);
        v88 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v91, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v83), v88);
        v79 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v91, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v84), v79);
        v90 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v91, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v81), v90);
        v78 = vaddq_s16(v78, v85);
        v77 = vaddq_s16(v77, v85);
        v84 = vaddq_s32(v84, v86);
        v83 = vaddq_s32(v83, v86);
        v82 = vaddq_s32(v82, v86);
        v81 = vaddq_s32(v81, v86);
        v87 -= 16;
      }
      while (v87);
      v92 = (unint64_t)v70 < v69;
      v93 = veorq_s8(veorq_s8(v79, v89), veorq_s8(v88, v90));
      *(int8x8_t *)v93.i8 = veor_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL));
      v66 = v93.i32[0] ^ v93.i32[1];
      LOWORD(v68) = vaddvq_s16(vaddq_s16(v78, v77));
      if (v75 == v76)
        goto LABEL_62;
      v71 -= 8 * v76;
    }
    else
    {
      v74 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v94 = *v74++;
      v66 ^= v94 << v71;
      LOWORD(v68) = v68 + 8;
      v92 = (unint64_t)v74 < v69;
      v49 = v71 >= 8;
      v71 -= 8;
    }
    while (v49 && (unint64_t)v74 < v69);
LABEL_62:
    if (v92)
    {
LABEL_64:
      *(_DWORD *)(a3 + 48) = v66;
      *(_WORD *)(a3 + 54) = v68;
      *(_QWORD *)(a3 + 40) = v74;
      goto LABEL_65;
    }
LABEL_63:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v68 + 0x4000;
    LOWORD(v68) = 0x4000;
    goto LABEL_64;
  }
  return result;
}

uint64_t read_segment_id(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int16 v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int8x16_t *v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned int v47;
  unint64_t v49;
  uint64_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  int16x8_t v59;
  int32x4_t v60;
  uint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  BOOL v66;
  int8x16_t v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned __int16 v80;
  int v81;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 80);
  if (!*((_BYTE *)a2 + 7872))
  {
    v9 = 255;
    v11 = 255;
    if (!*((_BYTE *)a2 + 7873))
      goto LABEL_24;
LABEL_14:
    v13 = *(_DWORD *)(a1 + 536);
    v14 = 8;
    if (*(_DWORD *)(a1 + 532) > v4 && v13 >= v5)
    {
      v16 = *(unsigned __int8 *)(v6 + v5 + v13 * v4 - 1);
      if (v16 >= 8)
        v14 = 8;
      else
        v14 = v16;
    }
    if (v9 != 255)
      goto LABEL_25;
LABEL_22:
    v17 = 0;
    goto LABEL_37;
  }
  v7 = *(_DWORD *)(a1 + 532);
  v8 = *(_DWORD *)(a1 + 536);
  if (!*((_BYTE *)a2 + 7873))
  {
    v9 = 255;
    v11 = 8;
    if (v7 >= v4 && v8 > v5)
      goto LABEL_64;
LABEL_13:
    if (!*((_BYTE *)a2 + 7873))
      goto LABEL_24;
    goto LABEL_14;
  }
  v9 = 8;
  if (v7 >= v4 && v8 >= v5)
  {
    if (*(unsigned __int8 *)(v6 + v5 + v8 * (v4 - 1) - 1) >= 8u)
      v9 = 8;
    else
      v9 = *(unsigned __int8 *)(v6 + v5 + v8 * (v4 - 1) - 1);
    v11 = 8;
    if (v7 >= v4 && v8 > v5)
      goto LABEL_64;
    goto LABEL_13;
  }
  v11 = 8;
  if (v7 < v4 || v8 <= v5)
    goto LABEL_13;
LABEL_64:
  v47 = *(unsigned __int8 *)(v6 + v5 + v8 * (v4 - 1));
  if (v47 >= 8)
    v11 = 8;
  else
    v11 = v47;
  if (*((_BYTE *)a2 + 7873))
    goto LABEL_14;
LABEL_24:
  v14 = 255;
  if (v9 == 255)
    goto LABEL_22;
LABEL_25:
  if (v9 == v11 && v9 == v14)
  {
    v17 = 2;
    v18 = v9;
    goto LABEL_38;
  }
  v17 = v9 == v11 || v9 == v14 || v14 == v11;
LABEL_37:
  v18 = v11;
LABEL_38:
  if (v9 == v18)
    LODWORD(v21) = v18;
  else
    LODWORD(v21) = v14;
  if (v14 == 255)
  {
    LODWORD(v21) = v11;
    v22 = 0;
  }
  else
  {
    v22 = v14;
  }
  if (v11 == 255)
    v21 = v22;
  else
    v21 = v21;
  if (a4)
    return v21;
  v24 = (unsigned __int16 *)(*((_QWORD *)a2 + 1331) + 18 * v17 + 12508);
  v25 = *(_DWORD *)(a3 + 48);
  v26 = *(unsigned __int16 *)(a3 + 52);
  v27 = v26 >> 8;
  v28 = 32;
  v29 = 0xFF00000000000000;
  LODWORD(v30) = -1;
  v31 = v24;
  do
  {
    v32 = v26;
    v33 = *v31++;
    v34 = v27 * (v33 >> 6);
    v28 -= 4;
    v26 = v28 + (v34 >> 1);
    v29 += 0x100000000000000;
    v30 = (v30 + 1);
  }
  while (HIWORD(v25) < v26);
  v35 = v32 - (v34 >> 1) - v28;
  v36 = (__clz(v35) ^ 0xFFFFFFE0) + 16;
  v37 = *(_WORD *)(a3 + 54) - v36;
  *(_WORD *)(a3 + 54) = v37;
  v38 = ((v25 - (v26 << 16) + 1) << v36) - 1;
  *(_DWORD *)(a3 + 48) = v38;
  *(_WORD *)(a3 + 52) = v35 << v36;
  if (v37 < 0)
  {
    v39 = v37;
    v40 = *(_QWORD *)(a3 + 32);
    v41 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v41 >= v40)
    {
      v45 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_86;
    }
    v42 = 8 - v39;
    if ((8 - v39) >= 7)
      v43 = 7;
    else
      v43 = 8 - v39;
    v44 = ((v43 ^ 0xFu) - v39) >> 3;
    if (v44 >= ~(unint64_t)v41 + v40)
      v44 = ~(unint64_t)v41 + v40;
    if (v44 >= 0xF)
    {
      v49 = v44 + 1;
      v50 = (v44 + 1) & 0x3FFFFFF0;
      v45 = &v41->u8[v50];
      v51 = 0uLL;
      v52 = (int16x8_t)(unsigned __int16)v39;
      v53 = (int8x16_t)v38;
      v54 = vdupq_n_s32(v42);
      v55 = (uint32x4_t)vaddq_s32(v54, (int32x4_t)xmmword_208F3A6C0);
      v56 = (uint32x4_t)vaddq_s32(v54, (int32x4_t)xmmword_208F3A6D0);
      v57 = (uint32x4_t)vaddq_s32(v54, (int32x4_t)xmmword_208F3A6A0);
      v58 = (uint32x4_t)vaddq_s32(v54, (int32x4_t)xmmword_208F3A6B0);
      v59.i64[0] = 0x8000800080008;
      v59.i64[1] = 0x8000800080008;
      v60.i64[0] = 0x7F0000007FLL;
      v60.i64[1] = 0x7F0000007FLL;
      v61 = v50;
      v62 = 0uLL;
      v63 = 0uLL;
      v64 = 0uLL;
      do
      {
        v65 = *v41++;
        v63 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_208F04F30), v56), v63);
        v62 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_208F04F40), v57), v62);
        v53 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_208F04F50), v58), v53);
        v64 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_208F04F20), v55), v64);
        v52 = vaddq_s16(v52, v59);
        v51 = vaddq_s16(v51, v59);
        v58 = (uint32x4_t)vaddq_s32((int32x4_t)v58, v60);
        v57 = (uint32x4_t)vaddq_s32((int32x4_t)v57, v60);
        v56 = (uint32x4_t)vaddq_s32((int32x4_t)v56, v60);
        v55 = (uint32x4_t)vaddq_s32((int32x4_t)v55, v60);
        v61 -= 16;
      }
      while (v61);
      v66 = (unint64_t)v41 < v40;
      v67 = veorq_s8(veorq_s8(v53, v63), veorq_s8(v62, v64));
      *(int8x8_t *)v67.i8 = veor_s8(*(int8x8_t *)v67.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
      v38 = v67.i32[0] ^ v67.i32[1];
      LOWORD(v39) = vaddvq_s16(vaddq_s16(v52, v51));
      if (v49 == v50)
        goto LABEL_85;
      v42 -= 8 * v50;
    }
    else
    {
      v45 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v68 = *v45++;
      v38 ^= v68 << v42;
      LOWORD(v39) = v39 + 8;
      v66 = (unint64_t)v45 < v40;
      v69 = v42 >= 8;
      v42 -= 8;
    }
    while (v69 && (unint64_t)v45 < v40);
LABEL_85:
    if (v66)
    {
LABEL_87:
      *(_DWORD *)(a3 + 48) = v38;
      *(_WORD *)(a3 + 54) = v39;
      *(_QWORD *)(a3 + 40) = v45;
      goto LABEL_88;
    }
LABEL_86:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v39 + 0x4000;
    LOWORD(v39) = 0x4000;
    goto LABEL_87;
  }
LABEL_88:
  if (!*(_BYTE *)(a3 + 56))
    goto LABEL_108;
  v70 = v24[8];
  v71 = (v70 >> 4) + 5;
  v72 = *v24;
  if ((uint64_t)v29 <= 0)
  {
    *v24 = v72 - (v72 >> v71);
    v73 = v24[1];
    goto LABEL_98;
  }
  *v24 = v72 + ((int)(0x8000 - v72) >> v71);
  v73 = v24[1];
  if (v29 <= 0x100000000000000)
  {
LABEL_98:
    v24[1] = v73 - (v73 >> v71);
    v74 = v24[2];
    goto LABEL_99;
  }
  v24[1] = v73 + ((int)(0x8000 - v73) >> v71);
  v74 = v24[2];
  if (v29 <= 0x200000000000000)
  {
LABEL_99:
    v24[2] = v74 - (v74 >> v71);
    v75 = v24[3];
    goto LABEL_100;
  }
  v24[2] = v74 + ((int)(0x8000 - v74) >> v71);
  v75 = v24[3];
  if (v29 <= 0x300000000000000)
  {
LABEL_100:
    v24[3] = v75 - (v75 >> v71);
    v76 = v24[4];
    goto LABEL_101;
  }
  v24[3] = v75 + ((int)(0x8000 - v75) >> v71);
  v76 = v24[4];
  if (v29 <= 0x400000000000000)
  {
LABEL_101:
    v24[4] = v76 - (v76 >> v71);
    v77 = v24[5];
    goto LABEL_102;
  }
  v24[4] = v76 + ((int)(0x8000 - v76) >> v71);
  v77 = v24[5];
  if (v29 <= 0x500000000000000)
  {
LABEL_102:
    v24[5] = v77 - (v77 >> v71);
    v78 = v24[6];
    goto LABEL_103;
  }
  v24[5] = v77 + ((int)(0x8000 - v77) >> v71);
  v78 = v24[6];
  if (v29 <= 0x600000000000000)
  {
LABEL_103:
    v79 = v78 - (v78 >> v71);
    goto LABEL_104;
  }
  v79 = v78 + ((int)(0x8000 - v78) >> v71);
LABEL_104:
  v24[6] = v79;
  if (v70 >= 0x20)
    v80 = v70;
  else
    v80 = v70 + 1;
  v24[8] = v80;
LABEL_108:
  v81 = *(_DWORD *)(a1 + 19156);
  if ((_DWORD)v21)
  {
    if (v81 <= (int)v21)
    {
LABEL_112:
      v30 = (v81 - v30);
      goto LABEL_113;
    }
    if (2 * (int)v21 <= v81)
    {
      if (2 * (int)v21 < (int)v30)
        goto LABEL_113;
    }
    else if ((int)v30 > 2 * (v81 - (int)v21))
    {
      goto LABEL_112;
    }
    if ((v30 & 1) != 0)
      v30 = (v21 + (((int)v30 + 1) >> 1));
    else
      v30 = (v21 - ((int)v30 >> 1));
  }
LABEL_113:
  if ((v30 & 0x80000000) == 0 && (int)v30 <= v81)
    return v30;
  aom_internal_error(*((_QWORD *)a2 + 1342), 7, "Corrupted segment_ids");
  return v30;
}

uint64_t read_delta_lflevel(unsigned __int8 a1, int a2, uint64_t a3, unsigned __int16 *a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  int8x16_t *v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  int16x8_t v38;
  int32x4_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  BOOL v45;
  int8x16_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int16 v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;

  v7 = (a7 | a6) & (a2 - 1);
  if (*a5 == a1)
  {
    if (a5[144])
      v8 = 0;
    else
      v8 = v7 == 0;
    if (!v8)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v9 = 0;
  v10 = *(_DWORD *)(a3 + 48);
  v11 = *(unsigned __int16 *)(a3 + 52);
  v12 = v11 >> 8;
  v13 = 16;
  v14 = 0xFF00000000000000;
  do
  {
    v15 = v11;
    v16 = v12 * (a4[v9] >> 6);
    v13 -= 4;
    v11 = v13 + (v16 >> 1);
    v14 += 0x100000000000000;
    ++v9;
  }
  while (HIWORD(v10) < v11);
  v17 = v15 - (v16 >> 1) - v13;
  v18 = (__clz(v17) ^ 0xFFFFFFE0) + 16;
  v19 = *(_WORD *)(a3 + 54) - v18;
  *(_WORD *)(a3 + 54) = v19;
  v20 = ((v10 - (v11 << 16) + 1) << v18) - 1;
  *(_DWORD *)(a3 + 48) = v20;
  *(_WORD *)(a3 + 52) = v17 << v18;
  if (v19 < 0)
  {
    v21 = v19;
    v22 = *(_QWORD *)(a3 + 32);
    v23 = *(int8x16_t **)(a3 + 40);
    if ((unint64_t)v23 >= v22)
    {
      v27 = *(unsigned __int8 **)(a3 + 40);
      goto LABEL_28;
    }
    v24 = 8 - v21;
    if ((8 - v21) >= 7)
      v25 = 7;
    else
      v25 = 8 - v21;
    v26 = ((v25 ^ 0xFu) - v21) >> 3;
    if (v26 >= ~(unint64_t)v23 + v22)
      v26 = ~(unint64_t)v23 + v22;
    if (v26 >= 0xF)
    {
      v28 = v26 + 1;
      v29 = (v26 + 1) & 0x3FFFFFF0;
      v27 = &v23->u8[v29];
      v30 = 0uLL;
      v31 = (int16x8_t)(unsigned __int16)v21;
      v32 = (int8x16_t)v20;
      v33 = vdupq_n_s32(v24);
      v34 = (uint32x4_t)vaddq_s32(v33, (int32x4_t)xmmword_208F3A6C0);
      v35 = (uint32x4_t)vaddq_s32(v33, (int32x4_t)xmmword_208F3A6D0);
      v36 = (uint32x4_t)vaddq_s32(v33, (int32x4_t)xmmword_208F3A6A0);
      v37 = (uint32x4_t)vaddq_s32(v33, (int32x4_t)xmmword_208F3A6B0);
      v38.i64[0] = 0x8000800080008;
      v38.i64[1] = 0x8000800080008;
      v39.i64[0] = 0x7F0000007FLL;
      v39.i64[1] = 0x7F0000007FLL;
      v40 = v29;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      do
      {
        v44 = *v23++;
        v42 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_208F04F30), v35), v42);
        v41 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_208F04F40), v36), v41);
        v32 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_208F04F50), v37), v32);
        v43 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v44, (int8x16_t)xmmword_208F04F20), v34), v43);
        v31 = vaddq_s16(v31, v38);
        v30 = vaddq_s16(v30, v38);
        v37 = (uint32x4_t)vaddq_s32((int32x4_t)v37, v39);
        v36 = (uint32x4_t)vaddq_s32((int32x4_t)v36, v39);
        v35 = (uint32x4_t)vaddq_s32((int32x4_t)v35, v39);
        v34 = (uint32x4_t)vaddq_s32((int32x4_t)v34, v39);
        v40 -= 16;
      }
      while (v40);
      v45 = (unint64_t)v23 < v22;
      v46 = veorq_s8(veorq_s8(v32, v42), veorq_s8(v41, v43));
      *(int8x8_t *)v46.i8 = veor_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
      v20 = v46.i32[0] ^ v46.i32[1];
      LOWORD(v21) = vaddvq_s16(vaddq_s16(v31, v30));
      if (v28 == v29)
        goto LABEL_27;
      v24 -= 8 * v29;
    }
    else
    {
      v27 = *(unsigned __int8 **)(a3 + 40);
    }
    do
    {
      v47 = *v27++;
      v20 ^= v47 << v24;
      LOWORD(v21) = v21 + 8;
      v45 = (unint64_t)v27 < v22;
      v48 = v24 >= 8;
      v24 -= 8;
    }
    while (v48 && (unint64_t)v27 < v22);
LABEL_27:
    if (v45)
    {
LABEL_29:
      *(_DWORD *)(a3 + 48) = v20;
      *(_WORD *)(a3 + 54) = v21;
      *(_QWORD *)(a3 + 40) = v27;
      goto LABEL_30;
    }
LABEL_28:
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v21 + 0x4000;
    LOWORD(v21) = 0x4000;
    goto LABEL_29;
  }
LABEL_30:
  v49 = a3 + 16;
  v50 = v9 - 1;
  if (!*(_BYTE *)(a3 + 56))
    goto LABEL_42;
  v51 = a4[4];
  v52 = (v51 >> 4) + 5;
  v53 = *a4;
  if (v14 <= 0)
  {
    *a4 = v53 - (v53 >> v52);
    v54 = a4[1];
    goto LABEL_36;
  }
  *a4 = v53 + ((int)(0x8000 - v53) >> v52);
  v54 = a4[1];
  if ((unint64_t)v14 <= 0x100000000000000)
  {
LABEL_36:
    a4[1] = v54 - (v54 >> v52);
    v55 = a4[2];
    goto LABEL_37;
  }
  a4[1] = v54 + ((int)(0x8000 - v54) >> v52);
  v55 = a4[2];
  if ((unint64_t)v14 <= 0x200000000000000)
  {
LABEL_37:
    v56 = v55 - (v55 >> v52);
    goto LABEL_38;
  }
  v56 = v55 + ((int)(0x8000 - v55) >> v52);
LABEL_38:
  a4[2] = v56;
  if (v51 >= 0x20)
    v57 = v51;
  else
    v57 = v51 + 1;
  a4[4] = v57;
LABEL_42:
  if (v50 > 2)
  {
    v58 = od_ec_decode_BOOL_q15(a3 + 16, 0x4000u);
    v59 = (2 * od_ec_decode_BOOL_q15(v49, 0x4000u)) | (4 * v58);
    v60 = od_ec_decode_BOOL_q15(v49, 0x4000u);
    v61 = v59 | v60;
    v62 = (1 << ((v59 | v60) + 1)) + 1;
    v63 = 0;
    if ((v61 & 0x80000000) == 0)
    {
      do
      {
        v63 |= od_ec_decode_BOOL_q15(v49, 0x4000u) << v61;
        v64 = v61-- + 1;
      }
      while (v64 > 1);
    }
    v50 = v62 + v63;
  }
  if (!v50)
    return 0;
  if (od_ec_decode_BOOL_q15(v49, 0x4000u))
    return -v50;
  else
    return v50;
}

uint64_t read_mv(uint64_t a1, _WORD *a2, _WORD *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  unsigned int v22;
  unsigned __int8 v23;
  unint64_t v24;
  int8x16_t *v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  BOOL v47;
  int8x16_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int16 v57;
  int v58;
  __int16 mv_component_0;
  uint64_t result;

  v10 = 0;
  v11 = *(_DWORD *)(a1 + 48);
  v12 = *(unsigned __int16 *)(a1 + 52);
  v13 = v12 >> 8;
  v14 = 16;
  v15 = 0xFF00000000000000;
  do
  {
    v16 = v12;
    v17 = v13 * (a4[v10] >> 6);
    v14 -= 4;
    v12 = v14 + (v17 >> 1);
    ++v10;
    v15 += 0x100000000000000;
  }
  while (HIWORD(v11) < v12);
  v18 = v16 - (v17 >> 1) - v14;
  v19 = __clz(v18);
  v20 = (v19 ^ 0xFFE0) + 16;
  v21 = *(_WORD *)(a1 + 54) - v20;
  *(_WORD *)(a1 + 54) = v21;
  v22 = ((v11 - (v12 << 16) + 1) << ((v19 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a1 + 48) = v22;
  *(_WORD *)(a1 + 52) = v18 << v20;
  v23 = v10 - 1;
  if (v21 < 0)
  {
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v25 >= v24)
    {
      v29 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_21;
    }
    v26 = 8 - v21;
    if (v26 >= 7)
      v27 = 7;
    else
      v27 = 8 - v21;
    v28 = ((v27 ^ 0xFu) - v21) >> 3;
    if (v28 >= ~(unint64_t)v25 + v24)
      v28 = ~(unint64_t)v25 + v24;
    if (v28 >= 0xF)
    {
      v30 = v28 + 1;
      v31 = (v28 + 1) & 0x3FFFFFF0;
      v29 = &v25->u8[v31];
      v32 = 0uLL;
      v33 = (int16x8_t)(unsigned __int16)v21;
      v34 = (int8x16_t)v22;
      v35 = vdupq_n_s32(v26);
      v36 = (uint32x4_t)vaddq_s32(v35, (int32x4_t)xmmword_208F3A6C0);
      v37 = (uint32x4_t)vaddq_s32(v35, (int32x4_t)xmmword_208F3A6D0);
      v38 = (uint32x4_t)vaddq_s32(v35, (int32x4_t)xmmword_208F3A6A0);
      v39 = (uint32x4_t)vaddq_s32(v35, (int32x4_t)xmmword_208F3A6B0);
      v40.i64[0] = 0x8000800080008;
      v40.i64[1] = 0x8000800080008;
      v41.i64[0] = 0x7F0000007FLL;
      v41.i64[1] = 0x7F0000007FLL;
      v42 = v31;
      v43 = 0uLL;
      v44 = 0uLL;
      v45 = 0uLL;
      do
      {
        v46 = *v25++;
        v44 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_208F04F30), v37), v44);
        v43 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_208F04F40), v38), v43);
        v34 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_208F04F50), v39), v34);
        v45 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_208F04F20), v36), v45);
        v33 = vaddq_s16(v33, v40);
        v32 = vaddq_s16(v32, v40);
        v39 = (uint32x4_t)vaddq_s32((int32x4_t)v39, v41);
        v38 = (uint32x4_t)vaddq_s32((int32x4_t)v38, v41);
        v37 = (uint32x4_t)vaddq_s32((int32x4_t)v37, v41);
        v36 = (uint32x4_t)vaddq_s32((int32x4_t)v36, v41);
        v42 -= 16;
      }
      while (v42);
      v47 = (unint64_t)v25 < v24;
      v48 = veorq_s8(veorq_s8(v34, v44), veorq_s8(v43, v45));
      *(int8x8_t *)v48.i8 = veor_s8(*(int8x8_t *)v48.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
      v22 = v48.i32[0] ^ v48.i32[1];
      v21 = vaddvq_s16(vaddq_s16(v33, v32));
      if (v30 == v31)
        goto LABEL_20;
      v26 -= 8 * v31;
    }
    else
    {
      v29 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v49 = *v29++;
      v22 ^= v49 << v26;
      v21 += 8;
      v47 = (unint64_t)v29 < v24;
      v50 = v26 >= 8;
      v26 -= 8;
    }
    while (v50 && (unint64_t)v29 < v24);
LABEL_20:
    if (v47)
    {
LABEL_22:
      *(_DWORD *)(a1 + 48) = v22;
      *(_WORD *)(a1 + 54) = v21;
      *(_QWORD *)(a1 + 40) = v29;
      goto LABEL_23;
    }
LABEL_21:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - v21 + 0x4000;
    v21 = 0x4000;
    goto LABEL_22;
  }
LABEL_23:
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_35;
  v51 = a4[4];
  v52 = (v51 >> 4) + 5;
  v53 = *a4;
  if (v15 <= 0)
  {
    *a4 = v53 - (v53 >> v52);
    v54 = a4[1];
    goto LABEL_29;
  }
  *a4 = v53 + ((int)(0x8000 - v53) >> v52);
  v54 = a4[1];
  if ((unint64_t)v15 <= 0x100000000000000)
  {
LABEL_29:
    a4[1] = v54 - (v54 >> v52);
    v55 = a4[2];
    goto LABEL_30;
  }
  a4[1] = v54 + ((int)(0x8000 - v54) >> v52);
  v55 = a4[2];
  if ((unint64_t)v15 <= 0x200000000000000)
  {
LABEL_30:
    v56 = v55 - (v55 >> v52);
    goto LABEL_31;
  }
  v56 = v55 + ((int)(0x8000 - v55) >> v52);
LABEL_31:
  a4[2] = v56;
  if (v51 >= 0x20)
    v57 = v51;
  else
    v57 = v51 + 1;
  a4[4] = v57;
LABEL_35:
  v58 = v23;
  if ((v23 & 0xFE) != 2)
  {
    mv_component_0 = 0;
    if ((v23 & 0xFD) != 1)
      goto LABEL_37;
LABEL_39:
    result = read_mv_component_0(a1, a4 + 74, (a5 & 0x80) == 0, a5 > 0);
    goto LABEL_40;
  }
  mv_component_0 = read_mv_component_0(a1, a4 + 5, (a5 & 0x80) == 0, a5 > 0);
  if ((v58 & 0xFFFFFFFD) == 1)
    goto LABEL_39;
LABEL_37:
  result = 0;
LABEL_40:
  *a2 = *a3 + mv_component_0;
  a2[1] = a3[1] + result;
  return result;
}

uint64_t read_mv_component_0(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int8x16_t *v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int16x8_t v35;
  int32x4_t v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  BOOL v42;
  int8x16_t v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int16 v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  int8x16_t *v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int32x4_t v82;
  uint64_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  BOOL v88;
  int8x16_t v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned __int16 v104;
  unsigned __int16 *v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  __int16 v116;
  int v117;
  unint64_t v118;
  int8x16_t *v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned __int16 *v125;
  int16x8_t v126;
  int32x4_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  int v133;
  unsigned __int16 *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  __int16 v140;
  int v141;
  unint64_t v142;
  int8x16_t *v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  unsigned __int8 *v147;
  unint64_t v148;
  uint64_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int8x16_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  uint64_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  BOOL v163;
  int8x16_t v164;
  int v165;
  unsigned int v166;
  char v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned __int16 v171;
  unsigned __int16 v172;
  int v173;
  uint64_t v174;
  unsigned __int16 *v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  __int16 v184;
  unsigned int v185;
  int v186;
  unint64_t v187;
  int8x16_t *v188;
  unsigned int v189;
  int v190;
  unint64_t v191;
  unsigned __int8 *v192;
  unint64_t v193;
  uint64_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int8x16_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int16x8_t v203;
  int32x4_t v204;
  uint64_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  BOOL v210;
  int8x16_t v211;
  int v212;
  unsigned int v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int16 *v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  __int16 v229;
  __int16 v230;
  __int16 v231;
  unsigned int v232;
  unint64_t v233;
  int8x16_t *v234;
  unsigned int v235;
  int v236;
  unint64_t v237;
  unsigned __int8 *v238;
  int v239;
  unint64_t v240;
  uint64_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int8x16_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int16x8_t v250;
  int32x4_t v251;
  uint64_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  BOOL v257;
  int8x16_t v258;
  int v259;
  unsigned int v260;
  char v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned __int16 v265;
  unsigned __int16 v266;
  int v267;
  unint64_t v268;
  uint64_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int8x16_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int16x8_t v278;
  int32x4_t v279;
  uint64_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  BOOL v285;
  int8x16_t v286;
  int v287;
  unsigned int v288;
  char v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int16 v293;
  unsigned int v294;

  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(unsigned __int16 *)(a1 + 52);
  v6 = v5 >> 8;
  v7 = 8;
  v8 = 0xFF00000000000000;
  v9 = 27;
  do
  {
    v10 = v5;
    v11 = v6 * (a2[v9] >> 6);
    v7 -= 4;
    v5 = v7 + (v11 >> 1);
    ++v9;
    v8 += 0x100000000000000;
  }
  while (HIWORD(v4) < v5);
  v12 = v10 - (v11 >> 1) - v7;
  v13 = __clz(v12);
  v14 = (v13 ^ 0xFFE0) + 16;
  v15 = *(_WORD *)(a1 + 54) - v14;
  *(_WORD *)(a1 + 54) = v15;
  v16 = ((v4 - (v5 << 16) + 1) << ((v13 ^ 0xE0) + 16)) - 1;
  *(_DWORD *)(a1 + 48) = v16;
  v17 = v12 << v14;
  *(_WORD *)(a1 + 52) = v12 << v14;
  if (v15 < 0)
  {
    v18 = v15;
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v20 >= v19)
    {
      v24 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_21;
    }
    v21 = 8 - v18;
    if ((8 - v18) >= 7)
      v22 = 7;
    else
      v22 = 8 - v18;
    v23 = ((v22 ^ 0xFu) - v18) >> 3;
    if (v23 >= ~(unint64_t)v20 + v19)
      v23 = ~(unint64_t)v20 + v19;
    if (v23 >= 0xF)
    {
      v25 = v23 + 1;
      v26 = (v23 + 1) & 0x3FFFFFF0;
      v24 = &v20->u8[v26];
      v27 = 0uLL;
      v28 = (int16x8_t)(unsigned __int16)v18;
      v29 = (int8x16_t)v16;
      v30 = vdupq_n_s32(v21);
      v31 = vaddq_s32(v30, (int32x4_t)xmmword_208F3A6C0);
      v32 = vaddq_s32(v30, (int32x4_t)xmmword_208F3A6D0);
      v33 = vaddq_s32(v30, (int32x4_t)xmmword_208F3A6A0);
      v34 = vaddq_s32(v30, (int32x4_t)xmmword_208F3A6B0);
      v35.i64[0] = 0x8000800080008;
      v35.i64[1] = 0x8000800080008;
      v36.i64[0] = 0x7F0000007FLL;
      v36.i64[1] = 0x7F0000007FLL;
      v37 = v26;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      do
      {
        v41 = *v20++;
        v39 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v32), v39);
        v38 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v33), v38);
        v29 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v34), v29);
        v40 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v31), v40);
        v28 = vaddq_s16(v28, v35);
        v27 = vaddq_s16(v27, v35);
        v34 = vaddq_s32(v34, v36);
        v33 = vaddq_s32(v33, v36);
        v32 = vaddq_s32(v32, v36);
        v31 = vaddq_s32(v31, v36);
        v37 -= 16;
      }
      while (v37);
      v42 = (unint64_t)v20 < v19;
      v43 = veorq_s8(veorq_s8(v29, v39), veorq_s8(v38, v40));
      *(int8x8_t *)v43.i8 = veor_s8(*(int8x8_t *)v43.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
      v16 = v43.i32[0] ^ v43.i32[1];
      LOWORD(v18) = vaddvq_s16(vaddq_s16(v28, v27));
      if (v25 == v26)
        goto LABEL_20;
      v21 -= 8 * v26;
    }
    else
    {
      v24 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v44 = *v24++;
      v16 ^= v44 << v21;
      LOWORD(v18) = v18 + 8;
      v42 = (unint64_t)v24 < v19;
      v45 = v21 >= 8;
      v21 -= 8;
    }
    while (v45 && (unint64_t)v24 < v19);
LABEL_20:
    if (v42)
    {
LABEL_22:
      *(_WORD *)(a1 + 54) = v18;
      *(_QWORD *)(a1 + 40) = v24;
      goto LABEL_23;
    }
LABEL_21:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v18 + 0x4000;
    LOWORD(v18) = 0x4000;
    goto LABEL_22;
  }
LABEL_23:
  v46 = v9 - 28;
  v47 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    v48 = a2[29];
    v49 = (v48 >> 4) + 4;
    v50 = a2[27];
    if (v8 < 1)
      v51 = v50 - (v50 >> v49);
    else
      v51 = v50 + ((int)(0x8000 - v50) >> v49);
    a2[27] = v51;
    if (v48 >= 0x20)
      v52 = v48;
    else
      v52 = v48 + 1;
    a2[29] = v52;
    LOWORD(v17) = *(_WORD *)(a1 + 52);
  }
  v53 = 0;
  v54 = (unsigned __int16)v17;
  v55 = BYTE1(v17);
  v56 = 44;
  v57 = 0xFF00000000000000;
  do
  {
    v58 = v54;
    v59 = v55 * (a2[v53] >> 6);
    v56 -= 4;
    v54 = v56 + (v59 >> 1);
    ++v53;
    v57 += 0x100000000000000;
  }
  while (HIWORD(v16) < v54);
  v60 = v58 - (v59 >> 1) - v56;
  v61 = (__clz(v60) ^ 0xFFFFFFE0) + 16;
  v62 = *(_WORD *)(a1 + 54) - v61;
  *(_WORD *)(a1 + 54) = v62;
  v63 = ((v16 - (v54 << 16) + 1) << v61) - 1;
  *(_DWORD *)(a1 + 48) = v63;
  *(_WORD *)(a1 + 52) = v60 << v61;
  if (v62 < 0)
  {
    v64 = v62;
    v65 = *(_QWORD *)(a1 + 32);
    v66 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v66 >= v65)
    {
      v70 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_51;
    }
    v67 = 8 - v64;
    if ((8 - v64) >= 7)
      v68 = 7;
    else
      v68 = 8 - v64;
    v69 = ((v68 ^ 0xFu) - v64) >> 3;
    if (v69 >= ~(unint64_t)v66 + v65)
      v69 = ~(unint64_t)v66 + v65;
    if (v69 >= 0xF)
    {
      v71 = v69 + 1;
      v72 = (v69 + 1) & 0x3FFFFFF0;
      v70 = &v66->u8[v72];
      v73 = 0uLL;
      v74 = (int16x8_t)(unsigned __int16)v64;
      v75 = (int8x16_t)v63;
      v76 = vdupq_n_s32(v67);
      v77 = vaddq_s32(v76, (int32x4_t)xmmword_208F3A6C0);
      v78 = vaddq_s32(v76, (int32x4_t)xmmword_208F3A6D0);
      v79 = vaddq_s32(v76, (int32x4_t)xmmword_208F3A6A0);
      v80 = vaddq_s32(v76, (int32x4_t)xmmword_208F3A6B0);
      v81.i64[0] = 0x8000800080008;
      v81.i64[1] = 0x8000800080008;
      v82.i64[0] = 0x7F0000007FLL;
      v82.i64[1] = 0x7F0000007FLL;
      v83 = v72;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      do
      {
        v87 = *v66++;
        v85 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v78), v85);
        v84 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v79), v84);
        v75 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v80), v75);
        v86 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v77), v86);
        v74 = vaddq_s16(v74, v81);
        v73 = vaddq_s16(v73, v81);
        v80 = vaddq_s32(v80, v82);
        v79 = vaddq_s32(v79, v82);
        v78 = vaddq_s32(v78, v82);
        v77 = vaddq_s32(v77, v82);
        v83 -= 16;
      }
      while (v83);
      v88 = (unint64_t)v66 < v65;
      v89 = veorq_s8(veorq_s8(v75, v85), veorq_s8(v84, v86));
      *(int8x8_t *)v89.i8 = veor_s8(*(int8x8_t *)v89.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
      v63 = v89.i32[0] ^ v89.i32[1];
      LOWORD(v64) = vaddvq_s16(vaddq_s16(v74, v73));
      if (v71 == v72)
        goto LABEL_50;
      v67 -= 8 * v72;
    }
    else
    {
      v70 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v90 = *v70++;
      v63 ^= v90 << v67;
      LOWORD(v64) = v64 + 8;
      v88 = (unint64_t)v70 < v65;
      v45 = v67 >= 8;
      v67 -= 8;
    }
    while (v45 && (unint64_t)v70 < v65);
LABEL_50:
    if (v88)
    {
LABEL_52:
      *(_DWORD *)(a1 + 48) = v63;
      *(_WORD *)(a1 + 54) = v64;
      *(_QWORD *)(a1 + 40) = v70;
      goto LABEL_53;
    }
LABEL_51:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v64 + 0x4000;
    LOWORD(v64) = 0x4000;
    goto LABEL_52;
  }
LABEL_53:
  if (!v47)
    goto LABEL_79;
  v91 = a2[11];
  v92 = (v91 >> 4) + 5;
  v93 = *a2;
  if ((uint64_t)v57 <= 0)
  {
    *a2 = v93 - (v93 >> v92);
    v94 = a2[1];
    goto LABEL_66;
  }
  *a2 = v93 + ((int)(0x8000 - v93) >> v92);
  v94 = a2[1];
  if (v57 <= 0x100000000000000)
  {
LABEL_66:
    a2[1] = v94 - (v94 >> v92);
    v95 = a2[2];
    goto LABEL_67;
  }
  a2[1] = v94 + ((int)(0x8000 - v94) >> v92);
  v95 = a2[2];
  if (v57 <= 0x200000000000000)
  {
LABEL_67:
    a2[2] = v95 - (v95 >> v92);
    v96 = a2[3];
    goto LABEL_68;
  }
  a2[2] = v95 + ((int)(0x8000 - v95) >> v92);
  v96 = a2[3];
  if (v57 <= 0x300000000000000)
  {
LABEL_68:
    a2[3] = v96 - (v96 >> v92);
    v97 = a2[4];
    goto LABEL_69;
  }
  a2[3] = v96 + ((int)(0x8000 - v96) >> v92);
  v97 = a2[4];
  if (v57 <= 0x400000000000000)
  {
LABEL_69:
    a2[4] = v97 - (v97 >> v92);
    v98 = a2[5];
    goto LABEL_70;
  }
  a2[4] = v97 + ((int)(0x8000 - v97) >> v92);
  v98 = a2[5];
  if (v57 <= 0x500000000000000)
  {
LABEL_70:
    a2[5] = v98 - (v98 >> v92);
    v99 = a2[6];
    goto LABEL_71;
  }
  a2[5] = v98 + ((int)(0x8000 - v98) >> v92);
  v99 = a2[6];
  if (v57 <= 0x600000000000000)
  {
LABEL_71:
    a2[6] = v99 - (v99 >> v92);
    v100 = a2[7];
    goto LABEL_72;
  }
  a2[6] = v99 + ((int)(0x8000 - v99) >> v92);
  v100 = a2[7];
  if (v57 <= 0x700000000000000)
  {
LABEL_72:
    a2[7] = v100 - (v100 >> v92);
    v101 = a2[8];
    goto LABEL_73;
  }
  a2[7] = v100 + ((int)(0x8000 - v100) >> v92);
  v101 = a2[8];
  if (v57 <= 0x800000000000000)
  {
LABEL_73:
    a2[8] = v101 - (v101 >> v92);
    v102 = a2[9];
    goto LABEL_74;
  }
  a2[8] = v101 + ((int)(0x8000 - v101) >> v92);
  v102 = a2[9];
  if (v57 <= 0x900000000000000)
  {
LABEL_74:
    v103 = v102 - (v102 >> v92);
    goto LABEL_75;
  }
  v103 = v102 + ((int)(0x8000 - v102) >> v92);
LABEL_75:
  a2[9] = v103;
  if (v91 >= 0x20)
    v104 = v91;
  else
    v104 = v91 + 1;
  a2[11] = v104;
LABEL_79:
  if ((_DWORD)v53 != 1)
  {
    if ((int)v53 - 1 < 1)
    {
      v110 = 0;
LABEL_125:
      v173 = (2 << (v53 + 1)) | 1;
      if (!a3)
        goto LABEL_198;
      goto LABEL_126;
    }
    v124 = 0;
    v110 = 0;
    v125 = a2 + 39;
    v126.i64[0] = 0x8000800080008;
    v126.i64[1] = 0x8000800080008;
    v127.i64[0] = 0x7F0000007FLL;
    v127.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v128 = &a2[3 * v124 + 39];
      v129 = *(unsigned __int16 *)(a1 + 52);
      v130 = v129 >> 8;
      v131 = 8;
      v132 = 0xFF00000000000000;
      v133 = -1;
      v134 = v125;
      do
      {
        v135 = v129;
        v136 = *v134++;
        v137 = v130 * (v136 >> 6);
        v131 -= 4;
        v129 = v131 + (v137 >> 1);
        v132 += 0x100000000000000;
        ++v133;
      }
      while (HIWORD(v63) < v129);
      v138 = v135 - (v137 >> 1) - v131;
      v139 = (__clz(v138) ^ 0xFFFFFFE0) + 16;
      v140 = *(_WORD *)(a1 + 54) - v139;
      *(_WORD *)(a1 + 54) = v140;
      v63 = ((v63 - (v129 << 16) + 1) << v139) - 1;
      *(_DWORD *)(a1 + 48) = v63;
      *(_WORD *)(a1 + 52) = v138 << v139;
      if ((v140 & 0x8000) == 0)
      {
        if (v47)
          goto LABEL_117;
        goto LABEL_93;
      }
      v141 = v140;
      v142 = *(_QWORD *)(a1 + 32);
      v143 = *(int8x16_t **)(a1 + 40);
      if ((unint64_t)v143 < v142)
        break;
      v147 = *(unsigned __int8 **)(a1 + 40);
LABEL_115:
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v141 + 0x4000;
      LOWORD(v141) = 0x4000;
LABEL_116:
      *(_DWORD *)(a1 + 48) = v63;
      *(_WORD *)(a1 + 54) = v141;
      *(_QWORD *)(a1 + 40) = v147;
      if (v47)
      {
LABEL_117:
        v166 = a2[3 * v124 + 41];
        v167 = (v166 >> 4) + 4;
        v168 = *v128;
        v169 = v168 - (v168 >> v167);
        v170 = v168 + ((int)(0x8000 - v168) >> v167);
        if (v132 >= 1)
          v171 = v170;
        else
          v171 = v169;
        *v128 = v171;
        if (v166 >= 0x20)
          v172 = v166;
        else
          v172 = v166 + 1;
        a2[3 * v124 + 41] = v172;
      }
LABEL_93:
      v110 |= v133 << v124++;
      v125 += 3;
      if (v124 == (_DWORD)v53 - 1)
        goto LABEL_125;
    }
    v144 = 8 - v140;
    if (v144 >= 7)
      v145 = 7;
    else
      v145 = 8 - v140;
    v146 = ((v145 ^ 0xFu) - v141) >> 3;
    if (v146 >= ~(unint64_t)v143 + v142)
      v146 = ~(unint64_t)v143 + v142;
    if (v146 >= 0xF)
    {
      v148 = v146 + 1;
      v149 = (v146 + 1) & 0x3FFFFFF0;
      v150 = 0uLL;
      v151 = (int16x8_t)(unsigned __int16)v141;
      v152 = (int8x16_t)v63;
      v153 = vdupq_n_s32(v144);
      v147 = &v143->u8[v149];
      v154 = vaddq_s32(v153, (int32x4_t)xmmword_208F3A6C0);
      v144 -= 8 * v149;
      v155 = vaddq_s32(v153, (int32x4_t)xmmword_208F3A6D0);
      v156 = vaddq_s32(v153, (int32x4_t)xmmword_208F3A6A0);
      v157 = vaddq_s32(v153, (int32x4_t)xmmword_208F3A6B0);
      v158 = v149;
      v159 = 0uLL;
      v160 = 0uLL;
      v161 = 0uLL;
      do
      {
        v162 = *v143++;
        v160 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v155), v160);
        v159 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v156), v159);
        v152 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v157), v152);
        v161 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v154), v161);
        v151 = vaddq_s16(v151, v126);
        v150 = vaddq_s16(v150, v126);
        v157 = vaddq_s32(v157, v127);
        v156 = vaddq_s32(v156, v127);
        v155 = vaddq_s32(v155, v127);
        v154 = vaddq_s32(v154, v127);
        v158 -= 16;
      }
      while (v158);
      v163 = (unint64_t)v143 < v142;
      v164 = veorq_s8(veorq_s8(v152, v160), veorq_s8(v159, v161));
      *(int8x8_t *)v164.i8 = veor_s8(*(int8x8_t *)v164.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL));
      v63 = v164.i32[0] ^ v164.i32[1];
      LOWORD(v141) = vaddvq_s16(vaddq_s16(v151, v150));
      if (v148 == v149)
        goto LABEL_114;
    }
    else
    {
      v147 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v165 = *v147++;
      v63 ^= v165 << v144;
      LOWORD(v141) = v141 + 8;
      v163 = (unint64_t)v147 < v142;
      v45 = v144 >= 8;
      v144 -= 8;
    }
    while (v45 && (unint64_t)v147 < v142);
LABEL_114:
    if (v163)
      goto LABEL_116;
    goto LABEL_115;
  }
  v105 = a2 + 36;
  v106 = *(unsigned __int16 *)(a1 + 52);
  v107 = v106 >> 8;
  v108 = 8;
  v109 = 0xFF00000000000000;
  v110 = -1;
  do
  {
    v111 = v106;
    v112 = *v105++;
    v113 = v107 * (v112 >> 6);
    v108 -= 4;
    v106 = v108 + (v113 >> 1);
    v109 += 0x100000000000000;
    ++v110;
  }
  while (HIWORD(v63) < v106);
  v114 = v111 - (v113 >> 1) - v108;
  v115 = (__clz(v114) ^ 0xFFFFFFE0) + 16;
  v116 = *(_WORD *)(a1 + 54) - v115;
  *(_WORD *)(a1 + 54) = v116;
  v63 = ((v63 - (v106 << 16) + 1) << v115) - 1;
  *(_DWORD *)(a1 + 48) = v63;
  *(_WORD *)(a1 + 52) = v114 << v115;
  if (v116 < 0)
  {
    v117 = v116;
    v118 = *(_QWORD *)(a1 + 32);
    v119 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v119 >= v118)
    {
      v123 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_187;
    }
    v120 = 8 - v116;
    if (v120 >= 7)
      v121 = 7;
    else
      v121 = 8 - v116;
    v122 = ((v121 ^ 0xFu) - v117) >> 3;
    if (v122 >= ~(unint64_t)v119 + v118)
      v122 = ~(unint64_t)v119 + v118;
    if (v122 >= 0xF)
    {
      v240 = v122 + 1;
      v241 = (v122 + 1) & 0x3FFFFFF0;
      v123 = &v119->u8[v241];
      v242 = 0uLL;
      v243 = (int16x8_t)(unsigned __int16)v117;
      v244 = (int8x16_t)v63;
      v245 = vdupq_n_s32(v120);
      v246 = vaddq_s32(v245, (int32x4_t)xmmword_208F3A6C0);
      v247 = vaddq_s32(v245, (int32x4_t)xmmword_208F3A6D0);
      v248 = vaddq_s32(v245, (int32x4_t)xmmword_208F3A6A0);
      v249 = vaddq_s32(v245, (int32x4_t)xmmword_208F3A6B0);
      v250.i64[0] = 0x8000800080008;
      v250.i64[1] = 0x8000800080008;
      v251.i64[0] = 0x7F0000007FLL;
      v251.i64[1] = 0x7F0000007FLL;
      v252 = v241;
      v253 = 0uLL;
      v254 = 0uLL;
      v255 = 0uLL;
      do
      {
        v256 = *v119++;
        v254 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v256, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v247), v254);
        v253 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v256, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v248), v253);
        v244 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v256, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v249), v244);
        v255 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v256, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v246), v255);
        v243 = vaddq_s16(v243, v250);
        v242 = vaddq_s16(v242, v250);
        v249 = vaddq_s32(v249, v251);
        v248 = vaddq_s32(v248, v251);
        v247 = vaddq_s32(v247, v251);
        v246 = vaddq_s32(v246, v251);
        v252 -= 16;
      }
      while (v252);
      v257 = (unint64_t)v119 < v118;
      v258 = veorq_s8(veorq_s8(v244, v254), veorq_s8(v253, v255));
      *(int8x8_t *)v258.i8 = veor_s8(*(int8x8_t *)v258.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v258, v258, 8uLL));
      v63 = v258.i32[0] ^ v258.i32[1];
      LOWORD(v117) = vaddvq_s16(vaddq_s16(v243, v242));
      if (v240 == v241)
        goto LABEL_186;
      v120 -= 8 * v241;
    }
    else
    {
      v123 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v259 = *v123++;
      v63 ^= v259 << v120;
      LOWORD(v117) = v117 + 8;
      v257 = (unint64_t)v123 < v118;
      v45 = v120 >= 8;
      v120 -= 8;
    }
    while (v45 && (unint64_t)v123 < v118);
LABEL_186:
    if (v257)
    {
LABEL_188:
      *(_DWORD *)(a1 + 48) = v63;
      *(_WORD *)(a1 + 54) = v117;
      *(_QWORD *)(a1 + 40) = v123;
      goto LABEL_189;
    }
LABEL_187:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v117 + 0x4000;
    LOWORD(v117) = 0x4000;
    goto LABEL_188;
  }
LABEL_189:
  if (v47)
  {
    v260 = a2[38];
    v261 = (v260 >> 4) + 4;
    v262 = a2[36];
    v263 = v262 - (v262 >> v261);
    v264 = v262 + ((int)(0x8000 - v262) >> v261);
    if (v109 >= 1)
      v265 = v264;
    else
      v265 = v263;
    a2[36] = v265;
    if (v260 >= 0x20)
      v266 = v260;
    else
      v266 = v260 + 1;
    a2[38] = v266;
  }
  v173 = 1;
  if (!a3)
  {
LABEL_198:
    v239 = 1;
    v267 = 6;
    goto LABEL_217;
  }
LABEL_126:
  v174 = 0;
  v175 = &a2[5 * v110 + 12];
  if ((_DWORD)v53 != 1)
    v175 = a2 + 22;
  v176 = *(unsigned __int16 *)(a1 + 52);
  v177 = v176 >> 8;
  v178 = 16;
  v179 = 0xFF00000000000000;
  do
  {
    v180 = v176;
    v181 = v177 * (v175[v174] >> 6);
    v178 -= 4;
    v176 = v178 + (v181 >> 1);
    v179 += 0x100000000000000;
    ++v174;
  }
  while (HIWORD(v63) < v176);
  v182 = v180 - (v181 >> 1) - v178;
  v183 = (__clz(v182) ^ 0xFFFFFFE0) + 16;
  v184 = *(_WORD *)(a1 + 54) - v183;
  *(_WORD *)(a1 + 54) = v184;
  v185 = ((v63 - (v176 << 16) + 1) << v183) - 1;
  *(_DWORD *)(a1 + 48) = v185;
  *(_WORD *)(a1 + 52) = v182 << v183;
  if (v184 < 0)
  {
    v186 = v184;
    v187 = *(_QWORD *)(a1 + 32);
    v188 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v188 >= v187)
    {
      v192 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_149;
    }
    v189 = 8 - v186;
    if ((8 - v186) >= 7)
      v190 = 7;
    else
      v190 = 8 - v186;
    v191 = ((v190 ^ 0xFu) - v186) >> 3;
    if (v191 >= ~(unint64_t)v188 + v187)
      v191 = ~(unint64_t)v188 + v187;
    if (v191 >= 0xF)
    {
      v193 = v191 + 1;
      v194 = (v191 + 1) & 0x3FFFFFF0;
      v192 = &v188->u8[v194];
      v195 = 0uLL;
      v196 = (int16x8_t)(unsigned __int16)v186;
      v197 = (int8x16_t)v185;
      v198 = vdupq_n_s32(v189);
      v199 = vaddq_s32(v198, (int32x4_t)xmmword_208F3A6C0);
      v200 = vaddq_s32(v198, (int32x4_t)xmmword_208F3A6D0);
      v201 = vaddq_s32(v198, (int32x4_t)xmmword_208F3A6A0);
      v202 = vaddq_s32(v198, (int32x4_t)xmmword_208F3A6B0);
      v203.i64[0] = 0x8000800080008;
      v203.i64[1] = 0x8000800080008;
      v204.i64[0] = 0x7F0000007FLL;
      v204.i64[1] = 0x7F0000007FLL;
      v205 = v194;
      v206 = 0uLL;
      v207 = 0uLL;
      v208 = 0uLL;
      do
      {
        v209 = *v188++;
        v207 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v200), v207);
        v206 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v201), v206);
        v197 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v202), v197);
        v208 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v199), v208);
        v196 = vaddq_s16(v196, v203);
        v195 = vaddq_s16(v195, v203);
        v202 = vaddq_s32(v202, v204);
        v201 = vaddq_s32(v201, v204);
        v200 = vaddq_s32(v200, v204);
        v199 = vaddq_s32(v199, v204);
        v205 -= 16;
      }
      while (v205);
      v210 = (unint64_t)v188 < v187;
      v211 = veorq_s8(veorq_s8(v197, v207), veorq_s8(v206, v208));
      *(int8x8_t *)v211.i8 = veor_s8(*(int8x8_t *)v211.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL));
      v185 = v211.i32[0] ^ v211.i32[1];
      LOWORD(v186) = vaddvq_s16(vaddq_s16(v196, v195));
      if (v193 == v194)
        goto LABEL_148;
      v189 -= 8 * v194;
    }
    else
    {
      v192 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v212 = *v192++;
      v185 ^= v212 << v189;
      LOWORD(v186) = v186 + 8;
      v210 = (unint64_t)v192 < v187;
      v45 = v189 >= 8;
      v189 -= 8;
    }
    while (v45 && (unint64_t)v192 < v187);
LABEL_148:
    if (v210)
    {
LABEL_150:
      *(_DWORD *)(a1 + 48) = v185;
      *(_WORD *)(a1 + 54) = v186;
      *(_QWORD *)(a1 + 40) = v192;
      goto LABEL_151;
    }
LABEL_149:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - (__int16)v186 + 0x4000;
    LOWORD(v186) = 0x4000;
    goto LABEL_150;
  }
LABEL_151:
  if (!v47)
    goto LABEL_162;
  v213 = v175[4];
  v214 = (v213 >> 4) + 5;
  v215 = *v175;
  if (v179 <= 0)
  {
    *v175 = v215 - (v215 >> v214);
    v216 = v175[1];
    goto LABEL_157;
  }
  *v175 = v215 + ((int)(0x8000 - v215) >> v214);
  v216 = v175[1];
  if ((unint64_t)v179 <= 0x100000000000000)
  {
LABEL_157:
    v175[1] = v216 - (v216 >> v214);
    v217 = v175[2];
    goto LABEL_158;
  }
  v175[1] = v216 + ((int)(0x8000 - v216) >> v214);
  v217 = v175[2];
  if ((unint64_t)v179 <= 0x200000000000000)
  {
LABEL_158:
    v218 = v217 - (v217 >> v214);
    goto LABEL_159;
  }
  v218 = v217 + ((int)(0x8000 - v217) >> v214);
LABEL_159:
  v175[2] = v218;
  if (v213 < 0x20)
    LOWORD(v213) = v213 + 1;
  v175[4] = v213;
LABEL_162:
  if (a4)
  {
    v219 = 0;
    v220 = 30;
    if ((_DWORD)v53 == 1)
    {
      v221 = a2 + 30;
    }
    else
    {
      v220 = 33;
      v221 = a2 + 33;
    }
    v222 = *(unsigned __int16 *)(a1 + 52);
    v223 = v222 >> 8;
    v224 = 8;
    v225 = 0xFF00000000000000;
    do
    {
      v226 = v222;
      v227 = v223 * (v221[v219] >> 6);
      v224 -= 4;
      v222 = v224 + (v227 >> 1);
      v225 += 0x100000000000000;
      ++v219;
    }
    while (HIWORD(v185) < v222);
    v228 = v226 - (v227 >> 1) - v224;
    v229 = __clz(v228);
    v230 = (v229 ^ 0xFFE0) + 16;
    v231 = *(_WORD *)(a1 + 54) - v230;
    *(_WORD *)(a1 + 54) = v231;
    v232 = ((v185 - (v222 << 16) + 1) << ((v229 ^ 0xE0) + 16)) - 1;
    *(_DWORD *)(a1 + 48) = v232;
    *(_WORD *)(a1 + 52) = v228 << v230;
    if ((v231 & 0x8000) == 0)
    {
LABEL_209:
      v239 = v219 - 1;
      if (v47)
      {
        v288 = v221[2];
        v289 = (v288 >> 4) + 4;
        v290 = a2[v220];
        v291 = v290 - (v290 >> v289);
        v292 = v290 + ((int)(0x8000 - v290) >> v289);
        if (v225 >= 1)
          v293 = v292;
        else
          v293 = v291;
        a2[v220] = v293;
        if (v288 < 0x20)
          LOWORD(v288) = v288 + 1;
        v221[2] = v288;
      }
      goto LABEL_216;
    }
    v233 = *(_QWORD *)(a1 + 32);
    v234 = *(int8x16_t **)(a1 + 40);
    if ((unint64_t)v234 >= v233)
    {
      v238 = *(unsigned __int8 **)(a1 + 40);
      goto LABEL_207;
    }
    v235 = 8 - v231;
    if (v235 >= 7)
      v236 = 7;
    else
      v236 = 8 - v231;
    v237 = ((v236 ^ 0xFu) - v231) >> 3;
    if (v237 >= ~(unint64_t)v234 + v233)
      v237 = ~(unint64_t)v234 + v233;
    if (v237 >= 0xF)
    {
      v268 = v237 + 1;
      v269 = (v237 + 1) & 0x3FFFFFF0;
      v238 = &v234->u8[v269];
      v270 = 0uLL;
      v271 = (int16x8_t)(unsigned __int16)v231;
      v272 = (int8x16_t)v232;
      v273 = vdupq_n_s32(v235);
      v274 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6C0);
      v275 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6D0);
      v276 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6A0);
      v277 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6B0);
      v278.i64[0] = 0x8000800080008;
      v278.i64[1] = 0x8000800080008;
      v279.i64[0] = 0x7F0000007FLL;
      v279.i64[1] = 0x7F0000007FLL;
      v280 = v269;
      v281 = 0uLL;
      v282 = 0uLL;
      v283 = 0uLL;
      do
      {
        v284 = *v234++;
        v282 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v275), v282);
        v281 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v276), v281);
        v272 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v277), v272);
        v283 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v284, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v274), v283);
        v271 = vaddq_s16(v271, v278);
        v270 = vaddq_s16(v270, v278);
        v277 = vaddq_s32(v277, v279);
        v276 = vaddq_s32(v276, v279);
        v275 = vaddq_s32(v275, v279);
        v274 = vaddq_s32(v274, v279);
        v280 -= 16;
      }
      while (v280);
      v285 = (unint64_t)v234 < v233;
      v286 = veorq_s8(veorq_s8(v272, v282), veorq_s8(v281, v283));
      *(int8x8_t *)v286.i8 = veor_s8(*(int8x8_t *)v286.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v286, v286, 8uLL));
      v232 = v286.i32[0] ^ v286.i32[1];
      v231 = vaddvq_s16(vaddq_s16(v271, v270));
      if (v268 == v269)
        goto LABEL_206;
      v235 -= 8 * v269;
    }
    else
    {
      v238 = *(unsigned __int8 **)(a1 + 40);
    }
    do
    {
      v287 = *v238++;
      v232 ^= v287 << v235;
      v231 += 8;
      v285 = (unint64_t)v238 < v233;
      v45 = v235 >= 8;
      v235 -= 8;
    }
    while (v45 && (unint64_t)v238 < v233);
LABEL_206:
    if (v285)
    {
LABEL_208:
      *(_DWORD *)(a1 + 48) = v232;
      *(_WORD *)(a1 + 54) = v231;
      *(_QWORD *)(a1 + 40) = v238;
      goto LABEL_209;
    }
LABEL_207:
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) - v231 + 0x4000;
    v231 = 0x4000;
    goto LABEL_208;
  }
  v239 = 1;
LABEL_216:
  v267 = v174 * 2 - 2;
LABEL_217:
  v294 = (v267 | (8 * v110) | v239) + v173;
  if (v46)
    return -v294;
  else
    return v294;
}

uint64_t read_inter_segment_id(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v20;
  int segment_id;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  int8x16_t *v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t result;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int32x4_t v64;
  uint64_t v65;
  uint8x16_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  uint64_t v83;
  uint8x16_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint64_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint64_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint64_t v101;
  uint8x16_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint64_t v107;
  uint8x16_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint64_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int32x4_t v119;
  uint64_t v120;
  int v121;
  int32x4_t v122;
  int32x4_t v123;
  unint64_t v124;
  uint64_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int8x16_t v128;
  int32x4_t v129;
  uint32x4_t v130;
  uint32x4_t v131;
  uint32x4_t v132;
  int16x8_t v133;
  int32x4_t v134;
  uint64_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  BOOL v140;
  int8x16_t v141;
  int v142;
  BOOL v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned __int16 v148;
  char *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  int32x4_t v161;
  uint64_t v162;
  uint8x16_t v163;
  uint16x8_t v164;
  uint16x8_t v165;
  uint16x8_t v166;
  int32x4_t v167;
  int32x4_t v168;
  uint16x8_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  uint64_t v180;
  uint8x16_t v181;
  uint16x8_t v182;
  uint16x8_t v183;
  uint16x8_t v184;
  uint16x8_t v185;
  uint64_t v186;
  uint8x16_t v187;
  uint16x8_t v188;
  uint16x8_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  uint64_t v192;
  uint8x16_t v193;
  uint16x8_t v194;
  uint16x8_t v195;
  uint16x8_t v196;
  uint16x8_t v197;
  uint64_t v198;
  uint8x16_t v199;
  uint16x8_t v200;
  uint16x8_t v201;
  uint16x8_t v202;
  uint16x8_t v203;
  uint64_t v204;
  uint8x16_t v205;
  uint16x8_t v206;
  uint16x8_t v207;
  uint16x8_t v208;
  uint16x8_t v209;
  uint64_t v210;
  uint8x16_t v211;
  uint16x8_t v212;
  uint16x8_t v213;
  uint16x8_t v214;
  uint16x8_t v215;
  int32x4_t v216;
  uint64_t v217;
  int v218;
  int32x4_t v219;
  int32x4_t v220;

  v9 = **(unsigned __int8 ***)(a2 + 7864);
  v10 = *(_DWORD *)a2;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *(int *)(a1 + 536);
  v13 = *v9;
  v14 = mi_size_wide_8[v13];
  v15 = mi_size_high_7[v13];
  if ((int)v12 - v11 >= (int)v14)
    v16 = v14;
  else
    v16 = (v12 - v11);
  v17 = *(_DWORD *)(a1 + 532) - v10;
  if (v17 >= v15)
    v18 = v15;
  else
    v18 = v17;
  if (!*(_BYTE *)(a1 + 18992))
    return 0;
  v20 = v11 + v12 * v10;
  if (*(_BYTE *)(a1 + 18993))
  {
    if (a3)
    {
      if (!*(_BYTE *)(a1 + 19160))
      {
        LOBYTE(segment_id) = 0;
        return segment_id;
      }
    }
    else if (v9[144])
    {
      if (*(_BYTE *)(a1 + 18995))
        *(_WORD *)(v9 + 167) &= ~8u;
      segment_id = read_segment_id(a1, (int *)a2, a4, 1);
      if ((int)v18 >= 1)
      {
        v26 = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 80) + v20);
        do
        {
          memset(v26, segment_id, (int)v16);
          v26 += v12;
          --v18;
        }
        while (v18);
      }
      return segment_id;
    }
    if (!*(_BYTE *)(a1 + 18995))
      goto LABEL_96;
    v27 = *(_QWORD *)(a2 + 7880);
    v28 = *(_QWORD *)(a2 + 7888);
    if (v28)
      v28 = ((unint64_t)*(unsigned __int16 *)(v28 + 167) >> 3) & 1;
    if (v27)
      v27 = ((unint64_t)*(unsigned __int16 *)(v27 + 167) >> 3) & 1;
    v29 = 0;
    v30 = (unsigned __int16 *)(*(_QWORD *)(a2 + 10648) + 6 * (v27 + v28) + 12490);
    v31 = *(_DWORD *)(a4 + 48);
    v32 = *(unsigned __int16 *)(a4 + 52);
    v33 = v32 >> 8;
    v34 = 8;
    v35 = 0xFF00000000000000;
    do
    {
      v36 = v32;
      v37 = v33 * (v30[v29] >> 6);
      v34 -= 4;
      v32 = v34 + (v37 >> 1);
      ++v29;
      v35 += 0x100000000000000;
    }
    while (HIWORD(v31) < v32);
    v38 = v36 - (v37 >> 1) - v34;
    v39 = __clz(v38);
    v40 = (v39 ^ 0xFFE0) + 16;
    v41 = *(_WORD *)(a4 + 54) - v40;
    *(_WORD *)(a4 + 54) = v41;
    v42 = ((v31 - (v32 << 16) + 1) << ((v39 ^ 0xE0) + 16)) - 1;
    *(_DWORD *)(a4 + 48) = v42;
    *(_WORD *)(a4 + 52) = v38 << v40;
    v43 = v29 - 1;
    if ((v41 & 0x8000) == 0)
      goto LABEL_87;
    v44 = *(_QWORD *)(a4 + 32);
    v45 = *(int8x16_t **)(a4 + 40);
    if ((unint64_t)v45 >= v44)
    {
      v49 = *(unsigned __int8 **)(a4 + 40);
      goto LABEL_85;
    }
    v46 = 8 - v41;
    if (v46 >= 7)
      v47 = 7;
    else
      v47 = 8 - v41;
    v48 = ((v47 ^ 0xFu) - v41) >> 3;
    if (v48 >= ~(unint64_t)v45 + v44)
      v48 = ~(unint64_t)v45 + v44;
    if (v48 >= 0xF)
    {
      v124 = v48 + 1;
      v125 = (v48 + 1) & 0x3FFFFFF0;
      v49 = &v45->u8[v125];
      v126 = 0uLL;
      v127 = (int16x8_t)(unsigned __int16)v41;
      v128 = (int8x16_t)v42;
      v129 = vdupq_n_s32(v46);
      v130 = (uint32x4_t)vaddq_s32(v129, (int32x4_t)xmmword_208F3A6C0);
      a9 = (int8x16_t)vaddq_s32(v129, (int32x4_t)xmmword_208F3A6D0);
      v131 = (uint32x4_t)vaddq_s32(v129, (int32x4_t)xmmword_208F3A6A0);
      v132 = (uint32x4_t)vaddq_s32(v129, (int32x4_t)xmmword_208F3A6B0);
      v133.i64[0] = 0x8000800080008;
      v133.i64[1] = 0x8000800080008;
      v134.i64[0] = 0x7F0000007FLL;
      v134.i64[1] = 0x7F0000007FLL;
      v135 = v125;
      v136 = 0uLL;
      v137 = 0uLL;
      v138 = 0uLL;
      do
      {
        v139 = *v45++;
        v137 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v139, (int8x16_t)xmmword_208F04F30), (uint32x4_t)a9), v137);
        v136 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v139, (int8x16_t)xmmword_208F04F40), v131), v136);
        v128 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v139, (int8x16_t)xmmword_208F04F50), v132), v128);
        v138 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v139, (int8x16_t)xmmword_208F04F20), v130), v138);
        v127 = vaddq_s16(v127, v133);
        v126 = vaddq_s16(v126, v133);
        v132 = (uint32x4_t)vaddq_s32((int32x4_t)v132, v134);
        v131 = (uint32x4_t)vaddq_s32((int32x4_t)v131, v134);
        a9 = (int8x16_t)vaddq_s32((int32x4_t)a9, v134);
        v130 = (uint32x4_t)vaddq_s32((int32x4_t)v130, v134);
        v135 -= 16;
      }
      while (v135);
      v140 = (unint64_t)v45 < v44;
      v141 = veorq_s8(veorq_s8(v128, v137), veorq_s8(v136, v138));
      *(int8x8_t *)v141.i8 = veor_s8(*(int8x8_t *)v141.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL));
      v42 = v141.i32[0] ^ v141.i32[1];
      v41 = vaddvq_s16(vaddq_s16(v127, v126));
      if (v124 == v125)
        goto LABEL_84;
      v46 -= 8 * v125;
    }
    else
    {
      v49 = *(unsigned __int8 **)(a4 + 40);
    }
    do
    {
      v142 = *v49++;
      v42 ^= v142 << v46;
      v41 += 8;
      v140 = (unint64_t)v49 < v44;
      v143 = v46 >= 8;
      v46 -= 8;
    }
    while (v143 && (unint64_t)v49 < v44);
LABEL_84:
    if (v140)
    {
LABEL_86:
      *(_DWORD *)(a4 + 48) = v42;
      *(_WORD *)(a4 + 54) = v41;
      *(_QWORD *)(a4 + 40) = v49;
LABEL_87:
      if (*(_BYTE *)(a4 + 56))
      {
        v144 = v30[2];
        v145 = (v144 >> 4) + 4;
        v146 = *v30;
        if (v35 < 1)
          v147 = v146 - (v146 >> v145);
        else
          v147 = v146 + ((int)(0x8000 - v146) >> v145);
        *v30 = v147;
        if (v144 >= 0x20)
          v148 = v144;
        else
          v148 = v144 + 1;
        v30[2] = v148;
      }
      *(_WORD *)(v9 + 167) = *(_WORD *)(v9 + 167) & 0xFFF7 | (8 * (v43 & 1));
      if ((v43 & 1) == 0)
      {
LABEL_96:
        segment_id = read_segment_id(a1, (int *)a2, a4, 0);
        goto LABEL_97;
      }
      v150 = *(_QWORD *)(a1 + 19168);
      if (v150)
      {
        segment_id = 0x7FFFFFFF;
        if ((int)v16 >= 1 && (int)v18 >= 1)
        {
          v151 = 0;
          v152 = *(_DWORD *)(a1 + 536);
          v153 = v16 & 0xFFFFFFE0;
          v154 = v20;
          while (v16 >= 8)
          {
            if (v20 + v152 * v151 + (int)v16 - 1 < v20 + v152 * v151 || (unint64_t)(v16 - 1) >> 32 != 0)
              break;
            if (v16 >= 0x20)
            {
              v160 = v20 + v151 * v152;
              v161 = vdupq_n_s32(segment_id);
              v162 = v150 + v160;
              v163 = *(uint8x16_t *)(v162 + 16);
              v164 = vmovl_u8(*(uint8x8_t *)v162);
              v165 = vmovl_high_u8(*(uint8x16_t *)v162);
              v166 = vmovl_u8(*(uint8x8_t *)v163.i8);
              v167 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v166.i8);
              v168 = (int32x4_t)vmovl_high_u16(v166);
              v169 = vmovl_high_u8(v163);
              v170 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v169.i8);
              v171 = (int32x4_t)vmovl_high_u16(v169);
              v172 = vminq_s32(v161, (int32x4_t)vmovl_high_u16(v165));
              v173 = vminq_s32(v161, (int32x4_t)vmovl_u16(*(uint16x4_t *)v165.i8));
              v174 = vminq_s32(v161, (int32x4_t)vmovl_high_u16(v164));
              v175 = vminq_s32(v161, (int32x4_t)vmovl_u16(*(uint16x4_t *)v164.i8));
              v176 = vminq_s32(v161, v171);
              v177 = vminq_s32(v161, v170);
              v178 = vminq_s32(v161, v168);
              v179 = vminq_s32(v161, v167);
              if (v153 != 32)
              {
                v180 = v150 + v160 + 32;
                v181 = *(uint8x16_t *)(v180 + 16);
                v182 = vmovl_u8(*(uint8x8_t *)v180);
                v183 = vmovl_high_u8(*(uint8x16_t *)v180);
                v184 = vmovl_u8(*(uint8x8_t *)v181.i8);
                v185 = vmovl_high_u8(v181);
                v172 = vminq_s32(v172, (int32x4_t)vmovl_high_u16(v183));
                v173 = vminq_s32(v173, (int32x4_t)vmovl_u16(*(uint16x4_t *)v183.i8));
                v174 = vminq_s32(v174, (int32x4_t)vmovl_high_u16(v182));
                v175 = vminq_s32(v175, (int32x4_t)vmovl_u16(*(uint16x4_t *)v182.i8));
                v176 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v185));
                v177 = vminq_s32(v177, (int32x4_t)vmovl_u16(*(uint16x4_t *)v185.i8));
                v178 = vminq_s32(v178, (int32x4_t)vmovl_high_u16(v184));
                v179 = vminq_s32(v179, (int32x4_t)vmovl_u16(*(uint16x4_t *)v184.i8));
                if (v153 != 64)
                {
                  v186 = v150 + v160 + 64;
                  v187 = *(uint8x16_t *)(v186 + 16);
                  v188 = vmovl_u8(*(uint8x8_t *)v186);
                  v189 = vmovl_high_u8(*(uint8x16_t *)v186);
                  v190 = vmovl_u8(*(uint8x8_t *)v187.i8);
                  v191 = vmovl_high_u8(v187);
                  v172 = vminq_s32(v172, (int32x4_t)vmovl_high_u16(v189));
                  v173 = vminq_s32(v173, (int32x4_t)vmovl_u16(*(uint16x4_t *)v189.i8));
                  v174 = vminq_s32(v174, (int32x4_t)vmovl_high_u16(v188));
                  v175 = vminq_s32(v175, (int32x4_t)vmovl_u16(*(uint16x4_t *)v188.i8));
                  v176 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v191));
                  v177 = vminq_s32(v177, (int32x4_t)vmovl_u16(*(uint16x4_t *)v191.i8));
                  v178 = vminq_s32(v178, (int32x4_t)vmovl_high_u16(v190));
                  v179 = vminq_s32(v179, (int32x4_t)vmovl_u16(*(uint16x4_t *)v190.i8));
                  if (v153 != 96)
                  {
                    v192 = v150 + v160 + 96;
                    v193 = *(uint8x16_t *)(v192 + 16);
                    v194 = vmovl_u8(*(uint8x8_t *)v192);
                    v195 = vmovl_high_u8(*(uint8x16_t *)v192);
                    v196 = vmovl_u8(*(uint8x8_t *)v193.i8);
                    v197 = vmovl_high_u8(v193);
                    v172 = vminq_s32(v172, (int32x4_t)vmovl_high_u16(v195));
                    v173 = vminq_s32(v173, (int32x4_t)vmovl_u16(*(uint16x4_t *)v195.i8));
                    v174 = vminq_s32(v174, (int32x4_t)vmovl_high_u16(v194));
                    v175 = vminq_s32(v175, (int32x4_t)vmovl_u16(*(uint16x4_t *)v194.i8));
                    v176 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v197));
                    v177 = vminq_s32(v177, (int32x4_t)vmovl_u16(*(uint16x4_t *)v197.i8));
                    v178 = vminq_s32(v178, (int32x4_t)vmovl_high_u16(v196));
                    v179 = vminq_s32(v179, (int32x4_t)vmovl_u16(*(uint16x4_t *)v196.i8));
                    if (v153 != 128)
                    {
                      v198 = v150 + v160 + 128;
                      v199 = *(uint8x16_t *)(v198 + 16);
                      v200 = vmovl_u8(*(uint8x8_t *)v198);
                      v201 = vmovl_high_u8(*(uint8x16_t *)v198);
                      v202 = vmovl_u8(*(uint8x8_t *)v199.i8);
                      v203 = vmovl_high_u8(v199);
                      v172 = vminq_s32(v172, (int32x4_t)vmovl_high_u16(v201));
                      v173 = vminq_s32(v173, (int32x4_t)vmovl_u16(*(uint16x4_t *)v201.i8));
                      v174 = vminq_s32(v174, (int32x4_t)vmovl_high_u16(v200));
                      v175 = vminq_s32(v175, (int32x4_t)vmovl_u16(*(uint16x4_t *)v200.i8));
                      v176 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v203));
                      v177 = vminq_s32(v177, (int32x4_t)vmovl_u16(*(uint16x4_t *)v203.i8));
                      v178 = vminq_s32(v178, (int32x4_t)vmovl_high_u16(v202));
                      v179 = vminq_s32(v179, (int32x4_t)vmovl_u16(*(uint16x4_t *)v202.i8));
                      if (v153 != 160)
                      {
                        v204 = v150 + v160 + 160;
                        v205 = *(uint8x16_t *)(v204 + 16);
                        v206 = vmovl_u8(*(uint8x8_t *)v204);
                        v207 = vmovl_high_u8(*(uint8x16_t *)v204);
                        v208 = vmovl_u8(*(uint8x8_t *)v205.i8);
                        v209 = vmovl_high_u8(v205);
                        v172 = vminq_s32(v172, (int32x4_t)vmovl_high_u16(v207));
                        v173 = vminq_s32(v173, (int32x4_t)vmovl_u16(*(uint16x4_t *)v207.i8));
                        v174 = vminq_s32(v174, (int32x4_t)vmovl_high_u16(v206));
                        v175 = vminq_s32(v175, (int32x4_t)vmovl_u16(*(uint16x4_t *)v206.i8));
                        v176 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v209));
                        v177 = vminq_s32(v177, (int32x4_t)vmovl_u16(*(uint16x4_t *)v209.i8));
                        v178 = vminq_s32(v178, (int32x4_t)vmovl_high_u16(v208));
                        v179 = vminq_s32(v179, (int32x4_t)vmovl_u16(*(uint16x4_t *)v208.i8));
                        if (v153 != 192)
                        {
                          v210 = v150 + v160 + 192;
                          v211 = *(uint8x16_t *)(v210 + 16);
                          v212 = vmovl_u8(*(uint8x8_t *)v210);
                          v213 = vmovl_high_u8(*(uint8x16_t *)v210);
                          v214 = vmovl_u8(*(uint8x8_t *)v211.i8);
                          v215 = vmovl_high_u8(v211);
                          v172 = vminq_s32(v172, (int32x4_t)vmovl_high_u16(v213));
                          v173 = vminq_s32(v173, (int32x4_t)vmovl_u16(*(uint16x4_t *)v213.i8));
                          v174 = vminq_s32(v174, (int32x4_t)vmovl_high_u16(v212));
                          v175 = vminq_s32(v175, (int32x4_t)vmovl_u16(*(uint16x4_t *)v212.i8));
                          v176 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v215));
                          v177 = vminq_s32(v177, (int32x4_t)vmovl_u16(*(uint16x4_t *)v215.i8));
                          v178 = vminq_s32(v178, (int32x4_t)vmovl_high_u16(v214));
                          v179 = vminq_s32(v179, (int32x4_t)vmovl_u16(*(uint16x4_t *)v214.i8));
                        }
                      }
                    }
                  }
                }
              }
              a9 = (int8x16_t)vminq_s32(v175, v179);
              segment_id = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)a9, vminq_s32(v173, v177)), vminq_s32(vminq_s32(v174, v178), vminq_s32(v172, v176))));
              if (v153 == v16)
                goto LABEL_106;
              v159 = v16 & 0x7FFFFFE0;
              v156 = v16 & 0xFFFFFFE0;
              if ((v16 & 0x18) == 0)
                goto LABEL_113;
            }
            else
            {
              v159 = 0;
            }
            v216 = vdupq_n_s32(segment_id);
            v217 = v159 - (v16 & 0xFFFFFFF8);
            v218 = v154 + v159;
            v219 = v216;
            do
            {
              a9.i64[0] = *(_QWORD *)(v150 + v218);
              v220 = (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_208F04F50);
              a9 = vqtbl1q_s8(a9, (int8x16_t)xmmword_208F04F40);
              v219 = vminq_s32(v219, (int32x4_t)a9);
              v216 = vminq_s32(v216, v220);
              v218 += 8;
              v217 += 8;
            }
            while (v217);
            segment_id = vminvq_s32(vminq_s32(v216, v219));
            v156 = v16 & 0xFFFFFFF8;
            if (v156 != v16)
              goto LABEL_113;
LABEL_106:
            ++v151;
            v154 += v152;
            if (v151 == (_DWORD)v18)
              goto LABEL_97;
          }
          v156 = 0;
LABEL_113:
          v157 = v16 - v156;
          v158 = v154 + v156;
          do
          {
            if (segment_id >= *(unsigned __int8 *)(v150 + v158))
              segment_id = *(unsigned __int8 *)(v150 + v158);
            ++v158;
            --v157;
          }
          while (v157);
          goto LABEL_106;
        }
      }
      else
      {
        segment_id = 0;
      }
LABEL_97:
      if ((int)v18 >= 1)
      {
        v149 = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 80) + v20);
        do
        {
          memset(v149, segment_id, (int)v16);
          v149 += v12;
          --v18;
        }
        while (v18);
      }
      return segment_id;
    }
LABEL_85:
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a4 + 24) - v41 + 0x4000;
    v41 = 0x4000;
    goto LABEL_86;
  }
  v22 = *(_QWORD *)(a1 + 19168);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 80);
  if (v22)
  {
    if ((int)v18 >= 1)
    {
      v24 = v20;
      v25 = v18;
      do
      {
        memcpy((void *)(v23 + v24), (const void *)(v22 + v24), (int)v16);
        v24 += v12;
        --v25;
      }
      while (v25);
    }
  }
  else if ((int)v18 >= 1)
  {
    v50 = v18;
    v51 = (char *)(v23 + v20);
    do
    {
      bzero(v51, (int)v16);
      v51 += v12;
      --v50;
    }
    while (v50);
  }
  v52 = *(_QWORD *)(a1 + 19168);
  if (!v52)
    return 0;
  result = 0x7FFFFFFFLL;
  if ((int)v16 >= 1 && (int)v18 >= 1)
  {
    v54 = 0;
    v55 = *(_DWORD *)(a1 + 536);
    v56 = v16 & 0xFFFFFFE0;
    v57 = v20;
    while (v16 >= 8)
    {
      if (v20 + v55 * v54 + (int)v16 - 1 < v20 + v55 * v54 || (unint64_t)(v16 - 1) >> 32 != 0)
        break;
      if (v16 >= 0x20)
      {
        v63 = v20 + v54 * v55;
        v64 = vdupq_n_s32(result);
        v65 = v52 + v63;
        v66 = *(uint8x16_t *)(v65 + 16);
        v67 = vmovl_u8(*(uint8x8_t *)v65);
        v68 = vmovl_high_u8(*(uint8x16_t *)v65);
        v69 = vmovl_u8(*(uint8x8_t *)v66.i8);
        v70 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v69.i8);
        v71 = (int32x4_t)vmovl_high_u16(v69);
        v72 = vmovl_high_u8(v66);
        v73 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8);
        v74 = (int32x4_t)vmovl_high_u16(v72);
        v75 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v68));
        v76 = vminq_s32(v64, (int32x4_t)vmovl_u16(*(uint16x4_t *)v68.i8));
        v77 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v67));
        v78 = vminq_s32(v64, (int32x4_t)vmovl_u16(*(uint16x4_t *)v67.i8));
        v79 = vminq_s32(v64, v74);
        v80 = vminq_s32(v64, v73);
        v81 = vminq_s32(v64, v71);
        v82 = vminq_s32(v64, v70);
        if (v56 != 32)
        {
          v83 = v52 + v63 + 32;
          v84 = *(uint8x16_t *)(v83 + 16);
          v85 = vmovl_u8(*(uint8x8_t *)v83);
          v86 = vmovl_high_u8(*(uint8x16_t *)v83);
          v87 = vmovl_u8(*(uint8x8_t *)v84.i8);
          v88 = vmovl_high_u8(v84);
          v75 = vminq_s32(v75, (int32x4_t)vmovl_high_u16(v86));
          v76 = vminq_s32(v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v86.i8));
          v77 = vminq_s32(v77, (int32x4_t)vmovl_high_u16(v85));
          v78 = vminq_s32(v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v85.i8));
          v79 = vminq_s32(v79, (int32x4_t)vmovl_high_u16(v88));
          v80 = vminq_s32(v80, (int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8));
          v81 = vminq_s32(v81, (int32x4_t)vmovl_high_u16(v87));
          v82 = vminq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8));
          if (v56 != 64)
          {
            v89 = v52 + v63 + 64;
            v90 = *(uint8x16_t *)(v89 + 16);
            v91 = vmovl_u8(*(uint8x8_t *)v89);
            v92 = vmovl_high_u8(*(uint8x16_t *)v89);
            v93 = vmovl_u8(*(uint8x8_t *)v90.i8);
            v94 = vmovl_high_u8(v90);
            v75 = vminq_s32(v75, (int32x4_t)vmovl_high_u16(v92));
            v76 = vminq_s32(v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8));
            v77 = vminq_s32(v77, (int32x4_t)vmovl_high_u16(v91));
            v78 = vminq_s32(v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8));
            v79 = vminq_s32(v79, (int32x4_t)vmovl_high_u16(v94));
            v80 = vminq_s32(v80, (int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8));
            v81 = vminq_s32(v81, (int32x4_t)vmovl_high_u16(v93));
            v82 = vminq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v93.i8));
            if (v56 != 96)
            {
              v95 = v52 + v63 + 96;
              v96 = *(uint8x16_t *)(v95 + 16);
              v97 = vmovl_u8(*(uint8x8_t *)v95);
              v98 = vmovl_high_u8(*(uint8x16_t *)v95);
              v99 = vmovl_u8(*(uint8x8_t *)v96.i8);
              v100 = vmovl_high_u8(v96);
              v75 = vminq_s32(v75, (int32x4_t)vmovl_high_u16(v98));
              v76 = vminq_s32(v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v98.i8));
              v77 = vminq_s32(v77, (int32x4_t)vmovl_high_u16(v97));
              v78 = vminq_s32(v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8));
              v79 = vminq_s32(v79, (int32x4_t)vmovl_high_u16(v100));
              v80 = vminq_s32(v80, (int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8));
              v81 = vminq_s32(v81, (int32x4_t)vmovl_high_u16(v99));
              v82 = vminq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8));
              if (v56 != 128)
              {
                v101 = v52 + v63 + 128;
                v102 = *(uint8x16_t *)(v101 + 16);
                v103 = vmovl_u8(*(uint8x8_t *)v101);
                v104 = vmovl_high_u8(*(uint8x16_t *)v101);
                v105 = vmovl_u8(*(uint8x8_t *)v102.i8);
                v106 = vmovl_high_u8(v102);
                v75 = vminq_s32(v75, (int32x4_t)vmovl_high_u16(v104));
                v76 = vminq_s32(v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v104.i8));
                v77 = vminq_s32(v77, (int32x4_t)vmovl_high_u16(v103));
                v78 = vminq_s32(v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8));
                v79 = vminq_s32(v79, (int32x4_t)vmovl_high_u16(v106));
                v80 = vminq_s32(v80, (int32x4_t)vmovl_u16(*(uint16x4_t *)v106.i8));
                v81 = vminq_s32(v81, (int32x4_t)vmovl_high_u16(v105));
                v82 = vminq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v105.i8));
                if (v56 != 160)
                {
                  v107 = v52 + v63 + 160;
                  v108 = *(uint8x16_t *)(v107 + 16);
                  v109 = vmovl_u8(*(uint8x8_t *)v107);
                  v110 = vmovl_high_u8(*(uint8x16_t *)v107);
                  v111 = vmovl_u8(*(uint8x8_t *)v108.i8);
                  v112 = vmovl_high_u8(v108);
                  v75 = vminq_s32(v75, (int32x4_t)vmovl_high_u16(v110));
                  v76 = vminq_s32(v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v110.i8));
                  v77 = vminq_s32(v77, (int32x4_t)vmovl_high_u16(v109));
                  v78 = vminq_s32(v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v109.i8));
                  v79 = vminq_s32(v79, (int32x4_t)vmovl_high_u16(v112));
                  v80 = vminq_s32(v80, (int32x4_t)vmovl_u16(*(uint16x4_t *)v112.i8));
                  v81 = vminq_s32(v81, (int32x4_t)vmovl_high_u16(v111));
                  v82 = vminq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v111.i8));
                  if (v56 != 192)
                  {
                    v113 = v52 + v63 + 192;
                    v114 = *(uint8x16_t *)(v113 + 16);
                    v115 = vmovl_u8(*(uint8x8_t *)v113);
                    v116 = vmovl_high_u8(*(uint8x16_t *)v113);
                    v117 = vmovl_u8(*(uint8x8_t *)v114.i8);
                    v118 = vmovl_high_u8(v114);
                    v75 = vminq_s32(v75, (int32x4_t)vmovl_high_u16(v116));
                    v76 = vminq_s32(v76, (int32x4_t)vmovl_u16(*(uint16x4_t *)v116.i8));
                    v77 = vminq_s32(v77, (int32x4_t)vmovl_high_u16(v115));
                    v78 = vminq_s32(v78, (int32x4_t)vmovl_u16(*(uint16x4_t *)v115.i8));
                    v79 = vminq_s32(v79, (int32x4_t)vmovl_high_u16(v118));
                    v80 = vminq_s32(v80, (int32x4_t)vmovl_u16(*(uint16x4_t *)v118.i8));
                    v81 = vminq_s32(v81, (int32x4_t)vmovl_high_u16(v117));
                    v82 = vminq_s32(v82, (int32x4_t)vmovl_u16(*(uint16x4_t *)v117.i8));
                  }
                }
              }
            }
          }
        }
        a9 = (int8x16_t)vminq_s32(v78, v82);
        result = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)a9, vminq_s32(v76, v80)), vminq_s32(vminq_s32(v77, v81), vminq_s32(v75, v79))));
        if (v56 == v16)
          goto LABEL_47;
        v62 = v16 & 0x7FFFFFE0;
        v59 = v16 & 0xFFFFFFE0;
        if ((v16 & 0x18) == 0)
          goto LABEL_54;
      }
      else
      {
        v62 = 0;
      }
      v119 = vdupq_n_s32(result);
      v120 = v62 - (v16 & 0xFFFFFFF8);
      v121 = v57 + v62;
      v122 = v119;
      do
      {
        a9.i64[0] = *(_QWORD *)(v52 + v121);
        v123 = (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_208F04F50);
        a9 = vqtbl1q_s8(a9, (int8x16_t)xmmword_208F04F40);
        v122 = vminq_s32(v122, (int32x4_t)a9);
        v119 = vminq_s32(v119, v123);
        v121 += 8;
        v120 += 8;
      }
      while (v120);
      result = vminvq_s32(vminq_s32(v119, v122));
      v59 = v16 & 0xFFFFFFF8;
      if (v59 != v16)
        goto LABEL_54;
LABEL_47:
      ++v54;
      v57 += v55;
      if (v54 == (_DWORD)v18)
        return result;
    }
    v59 = 0;
LABEL_54:
    v60 = v16 - v59;
    v61 = v57 + v59;
    do
    {
      if ((int)result >= *(unsigned __int8 *)(v52 + v61))
        result = *(unsigned __int8 *)(v52 + v61);
      else
        result = result;
      ++v61;
      --v60;
    }
    while (v60);
    goto LABEL_47;
  }
  return result;
}

uint64_t gm_get_motion_vector(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  BOOL v12;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  __int16 v25;
  __int16 v26;
  int v27;
  __int16 v28;

  if (!*(_BYTE *)(a1 + 32))
    return *(unsigned __int8 *)(a1 + 32) << 16;
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    v7 = *(_DWORD *)a1;
    v6 = *(_DWORD *)(a1 + 4);
    v8 = *(_DWORD *)a1 >> 13;
    v9 = v6 >> 13;
    if (!a6)
      return (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
    v10 = v8 - ((v8 + (((__int16)(v7 >> 13) >> 28) & 7)) & 0xFFFF8);
    if ((_WORD)v10)
    {
      v11 = v8 - v10;
      v12 = (__int16)v10 <= 0;
      if ((v10 & 0x8000u) != 0)
        v10 = -(__int16)v10;
      if (v12)
        v13 = -8;
      else
        v13 = 8;
      v14 = v13 + v11;
      if ((unsigned __int16)v10 >= 5u)
        LOWORD(v8) = v14;
      else
        LOWORD(v8) = v11;
    }
    v15 = v9 - ((v9 + (((__int16)(v6 >> 13) >> 28) & 7)) & 0xFFFF8);
    if (!(_WORD)v15)
      return (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
  }
  else
  {
    v17 = 4 * a4 + (block_size_wide_9[a3] >> 1) - 1;
    v18 = 4 * a5 + (block_size_high_8[a3] >> 1) - 1;
    v19 = *(_DWORD *)a1 + (*(_DWORD *)(a1 + 8) - 0x10000) * v17 + v18 * *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 4) + *(_DWORD *)(a1 + 16) * v17 + (*(_DWORD *)(a1 + 20) - 0x10000) * v18;
    if (a2)
    {
      if (v19 < 0)
        v9 = -((4096 - v19) >> 13);
      else
        v9 = (v19 + 4096) >> 13;
      if (v20 < 0)
        v8 = -((4096 - v20) >> 13);
      else
        v8 = (v20 + 4096) >> 13;
      if (!a6)
        return (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
    }
    else
    {
      if (v19 < 0)
        v21 = -((0x2000 - v19) >> 14);
      else
        v21 = (v19 + 0x2000) >> 14;
      v9 = 2 * v21;
      if (v20 < 0)
        v22 = -((0x2000 - v20) >> 14);
      else
        v22 = (v20 + 0x2000) >> 14;
      v8 = 2 * v22;
      if (!a6)
        return (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
    }
    v23 = v8 - ((v8 + (((__int16)v8 >> 28) & 7)) & 0xFFFFFFF8);
    if ((_WORD)v8 != (((_WORD)v8 + (((__int16)v8 >> 28) & 7)) & 0xFFF8))
    {
      v24 = (__int16)v23 <= 0;
      if ((v23 & 0x8000u) != 0)
        v23 = -(__int16)v23;
      if (v24)
        v25 = -8;
      else
        v25 = 8;
      v26 = v25 + ((v8 + (((__int16)v8 >> 28) & 7)) & 0xFFF8);
      if ((unsigned __int16)v23 >= 5u)
        LOWORD(v8) = v26;
      else
        LOWORD(v8) = (v8 + (((__int16)v8 >> 28) & 7)) & 0xFFF8;
    }
    v15 = v9 - ((v9 + (((__int16)v9 >> 28) & 7)) & 0xFFFFFFF8);
    if ((_WORD)v9 == (((_WORD)v9 + (((__int16)v9 >> 28) & 7)) & 0xFFF8))
      return (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
  }
  LOWORD(v9) = v9 - v15;
  if ((v15 & 0x8000u) == 0)
    LOWORD(v27) = v15;
  else
    v27 = -(__int16)v15;
  if ((unsigned __int16)v27 < 5u)
    return (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
  if ((__int16)v15 > 0)
    v28 = 8;
  else
    v28 = -8;
  return (unsigned __int16)v8 | ((unsigned __int16)(v28 + v9) << 16);
}

char *av1_decoder_create(uint64_t a1)
{
  void *v2;
  int v3;
  _DWORD *v4;
  void *v6;
  void *v7;
  char *v8;
  char *v9;

  v2 = malloc_type_malloc(0x5F8A7uLL, 0x70F2D1FBuLL);
  if (!v2)
    return 0;
  *(_QWORD *)((((unint64_t)v2 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v2;
  v9 = (char *)(((unint64_t)v2 + 39) & 0xFFFFFFFFFFFFFFE0);
  if (!v9)
    return 0;
  bzero(v9, 0x5F880uLL);
  v8 = v9 + 15200;
  *((_QWORD *)v9 + 4985) = v9 + 388920;
  *((_QWORD *)v9 + 1906) = v9 + 390860;
  v3 = setjmp((int *)v9 + 97768);
  v4 = v9 + 391068;
  if (v3)
  {
    *v4 = 0;
    av1_decoder_remove((uint64_t)v9);
    return 0;
  }
  *v4 = 1;
  v6 = malloc_type_malloc(0x5323uLL, 0x70F2D1FBuLL);
  if (v6)
  {
    *(_QWORD *)((((unint64_t)v6 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v6;
    *((_QWORD *)v9 + 4986) = ((unint64_t)v6 + 39) & 0xFFFFFFFFFFFFFFE0;
    if (*((_QWORD *)v9 + 4986))
      goto LABEL_8;
  }
  else
  {
    *((_QWORD *)v9 + 4986) = 0;
    if (*((_QWORD *)v9 + 4986))
    {
LABEL_8:
      v7 = malloc_type_malloc(0x5323uLL, 0x70F2D1FBuLL);
      if (v7)
        goto LABEL_9;
LABEL_14:
      *((_QWORD *)v8 + 3087) = 0;
      if (*((_QWORD *)v8 + 3087))
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  aom_internal_error(*((_QWORD *)v9 + 1906), 2, "Failed to allocate cm->fc", v9 + 15200);
  v7 = malloc_type_malloc(0x5323uLL, 0x70F2D1FBuLL);
  if (!v7)
    goto LABEL_14;
LABEL_9:
  *(_QWORD *)((((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v7;
  *((_QWORD *)v8 + 3087) = ((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFE0;
  if (!*((_QWORD *)v8 + 3087))
LABEL_10:
    aom_internal_error(*((_QWORD *)v8 + 6), 2, "Failed to allocate cm->default_frame_context", v8);
LABEL_11:
  bzero(*((void **)v8 + 3086), 0x52FCuLL);
  bzero(*((void **)v8 + 3087), 0x52FCuLL);
  *((_DWORD *)v9 + 90972) = 1;
  pthread_once(&aom_once_lock_1, (void (*)(void))setup_rtcd_internal_5);
  pthread_once(&aom_once_lock, (void (*)(void))setup_rtcd_internal_3);
  pthread_once(&aom_once_lock_0, (void (*)(void))setup_rtcd_internal_4);
  pthread_once(&aom_once_lock_5, init_intra_predictors_internal);
  pthread_once(&aom_once_lock_4, init_all_wedge_masks);
  *((_QWORD *)v8 + 52) = 0;
  *((_QWORD *)v8 + 53) = 0;
  *((_QWORD *)v8 + 54) = 0;
  *((_QWORD *)v8 + 55) = 0;
  *((_QWORD *)v8 + 56) = 0;
  *((_QWORD *)v8 + 57) = 0;
  *((_QWORD *)v8 + 58) = 0;
  *((_QWORD *)v8 + 59) = 0;
  *((_DWORD *)v8 + 4) = 0;
  *((_DWORD *)v9 + 90968) = 1;
  *((_QWORD *)v9 + 5062) = a1;
  *(_DWORD *)(*((_QWORD *)v8 + 3085) + 72) = 8;
  *((_QWORD *)v8 + 74) = dec_free_mi;
  *((_QWORD *)v8 + 75) = dec_setup_mi;
  *((_QWORD *)v8 + 76) = dec_set_mb_mi;
  update_sharpness((uint64_t)(v8 + 19184), *((_DWORD *)v8 + 5760));
  *((_QWORD *)v8 + 2403) = 0;
  *((_QWORD *)v8 + 2402) = 0;
  *((_QWORD *)v8 + 2409) = 0;
  *((_QWORD *)v8 + 2408) = 0;
  *((_QWORD *)v8 + 2415) = 0;
  *((_QWORD *)v8 + 2414) = 0;
  *((_QWORD *)v8 + 2421) = 0;
  *((_QWORD *)v8 + 2420) = 0;
  *((_QWORD *)v8 + 2427) = 0;
  *((_QWORD *)v8 + 2426) = 0;
  *((_QWORD *)v8 + 2433) = 0;
  *((_QWORD *)v8 + 2432) = 0;
  *((_QWORD *)v8 + 2439) = 0;
  *((_QWORD *)v8 + 2438) = 0;
  *((_QWORD *)v8 + 2445) = 0;
  *((_QWORD *)v8 + 2444) = 0;
  *((_QWORD *)v8 + 2450) = 0;
  *((_QWORD *)v8 + 2451) = 0;
  *((_QWORD *)v8 + 2457) = 0;
  *((_QWORD *)v8 + 2456) = 0;
  *((_QWORD *)v8 + 2462) = 0;
  *((_QWORD *)v8 + 2463) = 0;
  *((_QWORD *)v8 + 2468) = 0;
  *((_QWORD *)v8 + 2469) = 0;
  *((_QWORD *)v8 + 2474) = 0;
  *((_QWORD *)v8 + 2475) = 0;
  *((_QWORD *)v8 + 2480) = 0;
  *((_QWORD *)v8 + 2481) = 0;
  *((_QWORD *)v8 + 2486) = 0;
  *((_QWORD *)v8 + 2487) = 0;
  *((_QWORD *)v8 + 2492) = 0;
  *((_QWORD *)v8 + 2493) = 0;
  *((_QWORD *)v8 + 2498) = 0x101010101010101;
  *((_QWORD *)v8 + 2499) = 0x101010101010101;
  *((_QWORD *)v8 + 2505) = 0x101010101010101;
  *((_QWORD *)v8 + 2504) = 0x101010101010101;
  *((_QWORD *)v8 + 2511) = 0x101010101010101;
  *((_QWORD *)v8 + 2510) = 0x101010101010101;
  *((_QWORD *)v8 + 2517) = 0x101010101010101;
  *((_QWORD *)v8 + 2516) = 0x101010101010101;
  *((_QWORD *)v8 + 2523) = 0x101010101010101;
  *((_QWORD *)v8 + 2522) = 0x101010101010101;
  *((_QWORD *)v8 + 2529) = 0x101010101010101;
  *((_QWORD *)v8 + 2528) = 0x101010101010101;
  *((_QWORD *)v8 + 2535) = 0x101010101010101;
  *((_QWORD *)v8 + 2534) = 0x101010101010101;
  *((_QWORD *)v8 + 2541) = 0x101010101010101;
  *((_QWORD *)v8 + 2540) = 0x101010101010101;
  *((_QWORD *)v8 + 2547) = 0x101010101010101;
  *((_QWORD *)v8 + 2546) = 0x101010101010101;
  *((_QWORD *)v8 + 2553) = 0x101010101010101;
  *((_QWORD *)v8 + 2552) = 0x101010101010101;
  *((_QWORD *)v8 + 2559) = 0x101010101010101;
  *((_QWORD *)v8 + 2558) = 0x101010101010101;
  *((_QWORD *)v8 + 2565) = 0x101010101010101;
  *((_QWORD *)v8 + 2564) = 0x101010101010101;
  *((_QWORD *)v8 + 2571) = 0x101010101010101;
  *((_QWORD *)v8 + 2570) = 0x101010101010101;
  *((_QWORD *)v8 + 2577) = 0x101010101010101;
  *((_QWORD *)v8 + 2576) = 0x101010101010101;
  *((_QWORD *)v8 + 2583) = 0x101010101010101;
  *((_QWORD *)v8 + 2582) = 0x101010101010101;
  *((_QWORD *)v8 + 2589) = 0x101010101010101;
  *((_QWORD *)v8 + 2588) = 0x101010101010101;
  *((_QWORD *)v8 + 2595) = 0x202020202020202;
  *((_QWORD *)v8 + 2594) = 0x202020202020202;
  *((_QWORD *)v8 + 2601) = 0x202020202020202;
  *((_QWORD *)v8 + 2600) = 0x202020202020202;
  *((_QWORD *)v8 + 2607) = 0x202020202020202;
  *((_QWORD *)v8 + 2606) = 0x202020202020202;
  *((_QWORD *)v8 + 2613) = 0x202020202020202;
  *((_QWORD *)v8 + 2612) = 0x202020202020202;
  *((_QWORD *)v8 + 2619) = 0x202020202020202;
  *((_QWORD *)v8 + 2618) = 0x202020202020202;
  *((_QWORD *)v8 + 2625) = 0x202020202020202;
  *((_QWORD *)v8 + 2624) = 0x202020202020202;
  *((_QWORD *)v8 + 2631) = 0x202020202020202;
  *((_QWORD *)v8 + 2630) = 0x202020202020202;
  *((_QWORD *)v8 + 2637) = 0x202020202020202;
  *((_QWORD *)v8 + 2636) = 0x202020202020202;
  *((_QWORD *)v8 + 2643) = 0x202020202020202;
  *((_QWORD *)v8 + 2642) = 0x202020202020202;
  *((_QWORD *)v8 + 2649) = 0x202020202020202;
  *((_QWORD *)v8 + 2648) = 0x202020202020202;
  *((_QWORD *)v8 + 2655) = 0x202020202020202;
  *((_QWORD *)v8 + 2654) = 0x202020202020202;
  *((_QWORD *)v8 + 2661) = 0x202020202020202;
  *((_QWORD *)v8 + 2660) = 0x202020202020202;
  *((_QWORD *)v8 + 2667) = 0x202020202020202;
  *((_QWORD *)v8 + 2666) = 0x202020202020202;
  *((_QWORD *)v8 + 2673) = 0x202020202020202;
  *((_QWORD *)v8 + 2672) = 0x202020202020202;
  *((_QWORD *)v8 + 2679) = 0x202020202020202;
  *((_QWORD *)v8 + 2678) = 0x202020202020202;
  *((_QWORD *)v8 + 2685) = 0x202020202020202;
  *((_QWORD *)v8 + 2684) = 0x202020202020202;
  *((_QWORD *)v8 + 2691) = 0x303030303030303;
  *((_QWORD *)v8 + 2690) = 0x303030303030303;
  *((_QWORD *)v8 + 2697) = 0x303030303030303;
  *((_QWORD *)v8 + 2696) = 0x303030303030303;
  *((_QWORD *)v8 + 2703) = 0x303030303030303;
  *((_QWORD *)v8 + 2702) = 0x303030303030303;
  *((_QWORD *)v8 + 2709) = 0x303030303030303;
  *((_QWORD *)v8 + 2708) = 0x303030303030303;
  *((_QWORD *)v8 + 2715) = 0x303030303030303;
  *((_QWORD *)v8 + 2714) = 0x303030303030303;
  *((_QWORD *)v8 + 2721) = 0x303030303030303;
  *((_QWORD *)v8 + 2720) = 0x303030303030303;
  *((_QWORD *)v8 + 2727) = 0x303030303030303;
  *((_QWORD *)v8 + 2726) = 0x303030303030303;
  *((_QWORD *)v8 + 2733) = 0x303030303030303;
  *((_QWORD *)v8 + 2732) = 0x303030303030303;
  *((_QWORD *)v8 + 2739) = 0x303030303030303;
  *((_QWORD *)v8 + 2738) = 0x303030303030303;
  *((_QWORD *)v8 + 2745) = 0x303030303030303;
  *((_QWORD *)v8 + 2744) = 0x303030303030303;
  *((_QWORD *)v8 + 2751) = 0x303030303030303;
  *((_QWORD *)v8 + 2750) = 0x303030303030303;
  *((_QWORD *)v8 + 2757) = 0x303030303030303;
  *((_QWORD *)v8 + 2756) = 0x303030303030303;
  *((_QWORD *)v8 + 2763) = 0x303030303030303;
  *((_QWORD *)v8 + 2762) = 0x303030303030303;
  *((_QWORD *)v8 + 2769) = 0x303030303030303;
  *((_QWORD *)v8 + 2768) = 0x303030303030303;
  *((_QWORD *)v8 + 2775) = 0x303030303030303;
  *((_QWORD *)v8 + 2774) = 0x303030303030303;
  *((_QWORD *)v8 + 2781) = 0x303030303030303;
  *((_QWORD *)v8 + 2780) = 0x303030303030303;
  *((_DWORD *)v9 + 97767) = 0;
  g_worker_interface_0((uint64_t)(v9 + 40672));
  *((_QWORD *)v9 + 5086) = "aom lf worker";
  return v9;
}

void av1_decoder_remove(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  pthread_mutex_t *v15;
  uint64_t v16;
  pthread_cond_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  pthread_mutex_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  if (a1)
  {
    v2 = a1 + 39888;
    aom_free_frame_buffer(a1 + 388576);
    off_253EA52E8((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52E8, (std::__fs::filesystem::recursive_directory_iterator *)(a1 + 40672));
    v3 = *(_QWORD *)(v2 + 816);
    if (v3)
      free(*(void **)(v3 - 8));
    v4 = *(_QWORD *)(v2 + 1344);
    if (v4)
    {
      v5 = *(_DWORD *)(v2 + 1336);
      if (v5 < 2)
        goto LABEL_14;
      v6 = 1;
      v7 = 424;
      do
      {
        v8 = *(_QWORD *)(v2 + 1344);
        v9 = *(_QWORD *)(v8 + v7);
        if (v9)
        {
          av1_free_mc_tmp_buf(v9);
          v10 = *(_QWORD *)(v8 + v7);
          if (v10)
            free(*(void **)(v10 - 8));
          v5 = *(_DWORD *)(v2 + 1336);
        }
        ++v6;
        v7 += 424;
      }
      while (v6 < v5);
      v4 = *(_QWORD *)(v2 + 1344);
      if (v4)
LABEL_14:
        free(*(void **)(v4 - 8));
    }
    v11 = *(_QWORD *)(a1 + 10768);
    if (v11)
      free(*(void **)(v11 - 8));
    if (*(int *)(v2 + 1336) >= 1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        off_253EA52E8((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52E8, (std::__fs::filesystem::recursive_directory_iterator *)(*(_QWORD *)(v2 + 1328) + v12));
        ++v13;
        v12 += 56;
      }
      while (v13 < *(int *)(v2 + 1336));
    }
    v14 = (_QWORD *)(a1 + 298240);
    v15 = *(pthread_mutex_t **)(a1 + 388784);
    if (v15)
    {
      pthread_mutex_destroy(v15);
      v16 = *(_QWORD *)(a1 + 388784);
      if (v16)
        free(*(void **)(v16 - 8));
    }
    v17 = *(pthread_cond_t **)(a1 + 388792);
    if (v17)
    {
      pthread_cond_destroy(v17);
      v18 = *(_QWORD *)(a1 + 388792);
      if (v18)
        free(*(void **)(v18 - 8));
    }
    if (*(int *)(a1 + 298248) >= 1)
    {
      v19 = 0;
      v20 = 21344;
      do
      {
        av1_dec_row_mt_dealloc((int *)(*v14 + v20));
        ++v19;
        v20 += 21408;
      }
      while (v19 < *(int *)(a1 + 298248));
    }
    if (*v14)
      free(*(void **)(*v14 - 8));
    v21 = (pthread_mutex_t **)(a1 + 363792);
    v22 = *(_QWORD *)(v2 + 1328);
    if (v22)
      free(*(void **)(v22 - 8));
    if (*(int *)(v2 + 1336) >= 1)
    {
      av1_loop_filter_dealloc((int *)(a1 + 40728));
      av1_loop_restoration_dealloc((int *)(a1 + 40856));
      if (*v21)
      {
        pthread_mutex_destroy(*v21);
        if (*v21)
          free(*(void **)&(*v21)[-1].__opaque[48]);
      }
      v23 = *(_QWORD *)(a1 + 363800);
      if (v23)
        free(*(void **)(v23 - 8));
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(a1 + 363808) = 0u;
    }
    v24 = *(_QWORD *)(a1 + 388768);
    if (v24)
      free(*(void **)(v24 - 8));
    *(_QWORD *)(a1 + 388768) = 0;
    *(_DWORD *)(a1 + 388776) = 0;
    av1_free_mc_tmp_buf(a1 + 41248);
    v25 = *(unint64_t **)(a1 + 388840);
    if (v25)
    {
      v26 = (void *)v25[1];
      if (v26)
      {
        v27 = *v25;
        if (*v25)
        {
          v28 = 0;
          do
          {
            v29 = *(_QWORD **)(v25[1] + 8 * v28);
            if (v29)
            {
              v30 = (void *)v29[1];
              if (v30)
                free(v30);
              free(v29);
              v27 = *v25;
            }
            ++v28;
          }
          while (v28 < v27);
          v26 = (void *)v25[1];
        }
        free(v26);
      }
      free(v25);
    }
    v31 = *(void (**)(uint64_t))(a1 + 15792);
    if (v31)
      v31(a1 + 15720);
    av1_free_above_context_buffers((uint64_t *)(a1 + 40504));
    if (*(_QWORD *)v2)
      free(*(void **)(*(_QWORD *)v2 - 8));
    *(_QWORD *)v2 = 0;
    v32 = *(_QWORD *)(v2 + 8);
    if (v32)
      free(*(void **)(v32 - 8));
    *(_QWORD *)(v2 + 8) = 0;
    free(*(void **)(a1 - 8));
  }
}

void dec_free_mi(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    free(*(void **)(v2 - 8));
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    free(*(void **)(v3 - 8));
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    free(*(void **)(v4 - 8));
  *(_QWORD *)(a1 + 64) = 0;
}

void dec_setup_mi(uint64_t a1)
{
  bzero(*(void **)(a1 + 48), 8 * (int)(((*(_DWORD *)(a1 + 12) + 31) & 0xFFFFFFE0) * *(_DWORD *)(a1 + 60)));
}

uint64_t dec_set_mb_mi(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;

  v3 = (a2 + 7) >> 2;
  *(_DWORD *)(result + 16) = v3 & 0xFFFFFFFE;
  v4 = (a3 + 7) >> 2;
  v5 = v4 & 0xFFFFFFFE;
  v6 = ((v3 & 0xFFFFFFFE) + 31) & 0xFFFFFFE0;
  *(_DWORD *)(result + 60) = v6;
  v7 = (v3 + 2) >> 2;
  v8 = (v4 + 2) >> 2;
  *(_DWORD *)result = v8;
  *(_DWORD *)(result + 4) = v7;
  *(_DWORD *)(result + 8) = v8 * v7;
  *(_DWORD *)(result + 12) = v5;
  *(_BYTE *)(result + 40) = 0;
  *(_DWORD *)(result + 36) = v6;
  return result;
}

uint64_t av1_set_reference_dec(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 77))
    v6 = 1;
  else
    v6 = 3;
  if (a2 > 7 || (v7 = *(_QWORD *)(a1 + 8 * a2 + 416)) == 0)
  {
    aom_internal_error(*(_QWORD *)(a1 + 48), 1, "No reference frame");
    return 1;
  }
  v8 = (_DWORD *)(v7 + 1248);
  v9 = *(_DWORD *)(v7 + 1256);
  v10 = *(_DWORD *)(a4 + 8);
  if (a3)
  {
    if (v9 == v10
      && *v8 == *(_DWORD *)a4
      && *(_DWORD *)(v7 + 1260) == *(_DWORD *)(a4 + 12)
      && *(_DWORD *)(v7 + 1252) == *(_DWORD *)(a4 + 4)
      && *(_DWORD *)(v7 + 1280) == *(_DWORD *)(a4 + 32)
      && *(_DWORD *)(v7 + 1284) == *(_DWORD *)(a4 + 36)
      && *(_DWORD *)(v7 + 1360) == *(_DWORD *)(a4 + 112)
      && ((*(_DWORD *)(a4 + 176) ^ *(_DWORD *)(v7 + 1424)) & 8) == 0)
    {
      *(_OWORD *)(v7 + 1320) = *(_OWORD *)(v7 + 1288);
      *(_QWORD *)(v7 + 1336) = *(_QWORD *)(v7 + 1304);
      *(_QWORD *)(v7 + 1288) = *(_QWORD *)(a4 + 40);
      *(_QWORD *)(v7 + 1296) = *(_QWORD *)(a4 + 48);
      *(_QWORD *)(v7 + 1304) = *(_QWORD *)(a4 + 56);
      *(_DWORD *)(v7 + 1312) = 1;
      return **(unsigned int **)(a1 + 48);
    }
  }
  else if (v9 == v10
         && *v8 == *(_DWORD *)a4
         && *(_DWORD *)(v7 + 1260) == *(_DWORD *)(a4 + 12)
         && *(_DWORD *)(v7 + 1252) == *(_DWORD *)(a4 + 4))
  {
    aom_yv12_copy_frame_c((char *)a4, (uint64_t)v8, v6);
    return **(unsigned int **)(a1 + 48);
  }
  aom_internal_error(*(_QWORD *)(a1 + 48), 1, "Incorrect buffer dimensions");
  return **(unsigned int **)(a1 + 48);
}

uint64_t av1_copy_new_frame_dec(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 24680) + 77))
    v4 = 1;
  else
    v4 = 3;
  if (*(_DWORD *)(a2 + 8) == a3[2]
    && *(_DWORD *)a2 == *a3
    && *(_DWORD *)(a2 + 12) == a3[3]
    && *(_DWORD *)(a2 + 4) == a3[1]
    && *(_DWORD *)(a2 + 32) == a3[8]
    && *(_DWORD *)(a2 + 36) == a3[9]
    && *(_DWORD *)(a2 + 112) == a3[28]
    && ((a3[44] ^ *(_DWORD *)(a2 + 176)) & 8) == 0)
  {
    aom_yv12_copy_frame_c((char *)a2, (uint64_t)a3, v4);
    return **(unsigned int **)(a1 + 48);
  }
  else
  {
    aom_internal_error(*(_QWORD *)(a1 + 48), 1, "Incorrect buffer dimensions");
    return **(unsigned int **)(a1 + 48);
  }
}

uint64_t av1_receive_compressed_data(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  _DWORD *v6;
  unsigned __int8 *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  pthread_mutex_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  pthread_mutex_t *v27;
  pthread_mutex_t *v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  pthread_mutex_t *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  uint64_t *v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = (_DWORD *)(a1 + 390860);
  v52 = a1 + 15200;
  v7 = *a3;
  *(_QWORD *)(a1 + 390860) = 0;
  if (!a2)
  {
    v15 = *(int *)(a1 + 15440);
    if ((_DWORD)v15 != -1)
    {
      v16 = *(_QWORD *)(v52 + 8 * v15 + 416);
      if (v16)
        *(_DWORD *)(v16 + 1420) = 1;
    }
  }
  v8 = *(_DWORD **)(a1 + 15432);
  if (v8)
  {
    --*v8;
    *(_QWORD *)(a1 + 15432) = 0;
  }
  v9 = *(_QWORD *)(a1 + 40496);
  v10 = *(_DWORD **)(v9 + 88);
  pthread_mutex_lock((pthread_mutex_t *)v9);
  v11 = *(pthread_mutex_t **)(v52 + 25296);
  v12 = v11[1].__opaque[24];
  if (!v11[1].__opaque[24])
    goto LABEL_12;
  v13 = v10;
  v14 = 0;
  while (*v13)
  {
    v13 += 5682;
    if (v12 == ++v14)
      goto LABEL_12;
  }
  v18 = v14;
  if ((_DWORD)v14 == (_DWORD)v12)
  {
LABEL_12:
    pthread_mutex_unlock(v11);
LABEL_13:
    *v6 = 2;
    return 1;
  }
  v19 = &v10[5682 * v14];
  if (v19[328])
  {
    v20 = &v10[5682 * v14];
    *(_OWORD *)(v20 + 322) = *(_OWORD *)(v20 + 330);
    *((_QWORD *)v20 + 163) = *((_QWORD *)v20 + 167);
    v19[328] = 0;
    v11 = *(pthread_mutex_t **)(v52 + 25296);
  }
  *v19 = 1;
  pthread_mutex_unlock(v11);
  if (v18 == -1)
    goto LABEL_13;
  v21 = *(_QWORD *)(*(_QWORD *)(v52 + 25296) + 88) + 22728 * v18;
  *(_QWORD *)(v52 + 232) = v21;
  *(_OWORD *)(v21 + 1452) = 0u;
  if (!*(_QWORD *)(v52 + 232))
    goto LABEL_13;
  v22 = (pthread_mutex_t **)(a1 + 40496);
  if (setjmp((int *)(a1 + 391072)))
  {
    v6[52] = 0;
    off_253EA52D0[0]();
    if (*(int *)(a1 + 41224) >= 1)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = v23;
        v26 = v24;
        off_253EA52D0[0]();
        v23 = v25 + 1;
        v24 = v26 + 56;
      }
      while (v25 + 1 < *(int *)(a1 + 41224));
    }
    v27 = *v22;
    v28 = *v22;
    *(_DWORD *)(*(_QWORD *)(a1 + 15432) + 1420) = 1;
    pthread_mutex_lock(v27);
    v29 = *(_QWORD *)(a1 + 15432);
    if (v29)
    {
      v30 = (*(_DWORD *)v29)-- == 1;
      if (v30)
      {
        if (*(_QWORD *)(v29 + 1224))
        {
          v31 = (_QWORD *)(v29 + 1224);
          (*(void (**)(uint64_t, uint64_t))&v28[1].__opaque[8])(v28[1].__sig, v29 + 1224);
          v31[1] = 0;
          v31[2] = 0;
          *v31 = 0;
        }
      }
    }
    pthread_mutex_unlock(v28);
    *(_QWORD *)(a1 + 15432) = 0;
    return 0xFFFFFFFFLL;
  }
  v6[52] = 1;
  v32 = aom_decode_frame_from_obus((signed int *)a1, v7, &v7[a2], a3);
  v33 = *v22;
  if (v32 < 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 15432) + 1420) = 1;
    pthread_mutex_lock(v33);
    v38 = *(_QWORD *)(a1 + 15432);
    if (v38)
    {
      v30 = (*(_DWORD *)v38)-- == 1;
      if (v30)
      {
        if (*(_QWORD *)(v38 + 1224))
        {
          v39 = (_QWORD *)(v38 + 1224);
          (*(void (**)(uint64_t, uint64_t))&v33[1].__opaque[8])(v33[1].__sig, v38 + 1224);
          v39[1] = 0;
          v39[2] = 0;
          *v39 = 0;
        }
      }
    }
    pthread_mutex_unlock(v33);
    *(_QWORD *)(a1 + 15432) = 0;
    goto LABEL_77;
  }
  v34 = v32;
  pthread_mutex_lock(v33);
  if (v34)
  {
    if (!*(_DWORD *)(a1 + 363936))
    {
      v42 = *(_DWORD *)(a1 + 15236);
      if (v42)
      {
        v43 = (uint64_t *)(a1 + 15616);
        do
        {
          v45 = v42;
          if ((v42 & 1) != 0)
          {
            v46 = *v43;
            if (*v43)
            {
              v30 = (*(_DWORD *)v46)-- == 1;
              if (v30)
              {
                if (*(_QWORD *)(v46 + 1224))
                {
                  v47 = (_QWORD *)(v46 + 1224);
                  (*(void (**)(uint64_t, uint64_t))&v33[1].__opaque[8])(v33[1].__sig, v46 + 1224);
                  v47[1] = 0;
                  v47[2] = 0;
                  *v47 = 0;
                }
              }
            }
            v44 = *(_DWORD **)(a1 + 15432);
            *v43 = (uint64_t)v44;
            ++*v44;
          }
          v42 = v45 >> 1;
          ++v43;
        }
        while (v45 > 1);
      }
    }
    if (*(_DWORD *)(a1 + 15688) || *(_DWORD *)(a1 + 15680))
    {
      v35 = *(_QWORD *)(a1 + 363864);
      if (*(_DWORD *)(a1 + 363824))
      {
        v36 = *(_QWORD *)(a1 + 15432);
        if (v35 >= 4)
        {
          *(_DWORD *)(v36 + 1420) = 1;
          v30 = (*(_DWORD *)v36)-- == 1;
          if (v30 && *(_QWORD *)(v36 + 1224))
          {
            v37 = (_QWORD *)(v36 + 1224);
            (*(void (**)(uint64_t, uint64_t))&v33[1].__opaque[8])(v33[1].__sig, v36 + 1224);
            v37[1] = 0;
            v37[2] = 0;
            *v37 = 0;
          }
          *v6 = 5;
          goto LABEL_72;
        }
        *(_QWORD *)(a1 + 8 * v35 + 363832) = v36;
        v50 = v35 + 1;
      }
      else
      {
        if (v35)
        {
          v48 = *(_QWORD *)(a1 + 363832);
          if (v48)
          {
            v30 = (*(_DWORD *)v48)-- == 1;
            if (v30)
            {
              if (*(_QWORD *)(v48 + 1224))
              {
                v49 = (_QWORD *)(v48 + 1224);
                (*(void (**)(uint64_t, uint64_t))&v33[1].__opaque[8])(v33[1].__sig, v48 + 1224);
                v49[1] = 0;
                v49[2] = 0;
                *v49 = 0;
              }
            }
          }
        }
        *(_QWORD *)(a1 + 363832) = *(_QWORD *)(a1 + 15432);
        v50 = 1;
      }
      *(_QWORD *)(a1 + 363864) = v50;
      goto LABEL_72;
    }
  }
  v40 = *(_QWORD *)(a1 + 15432);
  if (v40)
  {
    v30 = (*(_DWORD *)v40)-- == 1;
    if (v30)
    {
      if (*(_QWORD *)(v40 + 1224))
      {
        v41 = (_QWORD *)(v40 + 1224);
        (*(void (**)(uint64_t, uint64_t))&v33[1].__opaque[8])(v33[1].__sig, v40 + 1224);
        v41[1] = 0;
        v41[2] = 0;
        *v41 = 0;
      }
    }
  }
LABEL_72:
  pthread_mutex_unlock(v33);
  *(_QWORD *)(a1 + 15432) = 0;
  if (!*(_DWORD *)(a1 + 363936))
  {
    *(_QWORD *)(a1 + 15456) = -1;
    *(_QWORD *)(a1 + 15448) = -1;
    *(_QWORD *)(a1 + 15440) = -1;
    *(_DWORD *)(a1 + 15464) = -1;
  }
  if (v34)
    *(_DWORD *)(a1 + 363872) = 0;
  if (*v6)
  {
LABEL_77:
    v6[52] = 0;
    return 1;
  }
  if (!*(_DWORD *)(v52 + 488) && *(_BYTE *)(v52 + 18992))
  {
    v51 = *(_QWORD *)(v52 + 224);
    if (v51)
    {
      if (*(_DWORD *)(v52 + 532) == *(_DWORD *)(*(_QWORD *)(v52 + 224) + 260)
        && *(_DWORD *)(v52 + 536) == *(_DWORD *)(*(_QWORD *)(v52 + 224) + 264))
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v52 + 224) + 80);
      }
      else
      {
        v51 = 0;
      }
    }
    *(_QWORD *)(v52 + 19168) = v51;
  }
  v6[52] = 0;
  return 0;
}

uint64_t read_coeffs_reverse(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int16x8_t v10;
  int32x4_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  signed int v21;
  int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int8x16_t *v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unint64_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  BOOL v65;
  int8x16_t v66;
  int v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int16 *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned __int16 *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  __int16 v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  int8x16_t *v95;
  unsigned int v96;
  int v97;
  unint64_t v98;
  unsigned __int8 *v99;
  unint64_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int8x16_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  unint64_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  BOOL v114;
  int8x16_t v115;
  int v116;
  uint64_t v117;

  if ((a4 & 0x80000000) == 0)
  {
    v9 = (1 << a6) + 4;
    v117 = a2;
    a4 = a4;
    v10.i64[0] = 0x8000800080008;
    v10.i64[1] = 0x8000800080008;
    v11.i64[0] = 0x7F0000007FLL;
    v11.i64[1] = 0x7F0000007FLL;
    do
    {
      if (a3)
      {
        if (a3 == 2)
        {
          v13 = 2;
          v14 = 3;
          v15 = 4;
        }
        else
        {
          v13 = (2 << a6) + 8;
          v15 = (4 << a6) + 16;
          v14 = (3 << a6) + 12;
        }
      }
      else
      {
        v13 = (1 << a6) + 5;
        v14 = (2 << a6) + 8;
        v15 = 2;
      }
      v16 = *(__int16 *)(a5 + 2 * a4);
      v17 = *(__int16 *)(a5 + 2 * a4);
      v18 = v16 >> a6;
      v19 = (_BYTE *)(a7 + v17 + 4 * v18);
      if (!(v16 | a3))
        goto LABEL_16;
      v20 = (clip_max3[v19[v9]]
           + clip_max3[v19[1]]
           + clip_max3[v19[v13]]
           + clip_max3[v19[v14]]
           + clip_max3[v19[v15]]
           + 1) >> 1;
      if (v20 >= 4)
        v20 = 4;
      if (a3 == 2)
      {
        v22 = nz_map_ctx_offset_1d[v16 & ~(-1 << a6)];
LABEL_19:
        v21 = v22 + v20;
        goto LABEL_20;
      }
      if (a3 == 1)
      {
        v22 = nz_map_ctx_offset_1d[v18];
        goto LABEL_19;
      }
      if (a3)
LABEL_16:
        v21 = 0;
      else
        v21 = v20 + *((char *)*(&av1_nz_map_ctx_offset + v117) + v17);
LABEL_20:
      v23 = (unsigned __int16 *)(a8 + 10 * v21);
      v24 = *(_DWORD *)(result + 48);
      v25 = *(unsigned __int16 *)(result + 52);
      v26 = v25 >> 8;
      v27 = 16;
      v28 = 0xFF00000000000000;
      v29 = -1;
      v30 = v23;
      do
      {
        v31 = v25;
        v32 = *v30++;
        v33 = v26 * (v32 >> 6);
        v27 -= 4;
        v25 = v27 + (v33 >> 1);
        v28 += 0x100000000000000;
        ++v29;
      }
      while (HIWORD(v24) < v25);
      v34 = v31 - (v33 >> 1) - v27;
      v35 = (__clz(v34) ^ 0xFFFFFFE0) + 16;
      v36 = *(_WORD *)(result + 54) - v35;
      *(_WORD *)(result + 54) = v36;
      v37 = ((v24 - (v25 << 16) + 1) << v35) - 1;
      *(_DWORD *)(result + 48) = v37;
      *(_WORD *)(result + 52) = v34 << v35;
      if ((v36 & 0x8000) == 0)
      {
        v38 = *(unsigned __int8 *)(result + 56);
        if (!*(_BYTE *)(result + 56))
          goto LABEL_55;
        goto LABEL_24;
      }
      v44 = v36;
      v45 = *(_QWORD *)(result + 32);
      v46 = *(int8x16_t **)(result + 40);
      if ((unint64_t)v46 < v45)
      {
        v47 = 8 - v44;
        if ((8 - v44) >= 7)
          v48 = 7;
        else
          v48 = 8 - v44;
        v49 = ((v48 ^ 0xFu) - v44) >> 3;
        if (v49 >= ~(unint64_t)v46 + v45)
          v49 = ~(unint64_t)v46 + v45;
        if (v49 >= 0xF)
        {
          v51 = v49 + 1;
          v52 = 0uLL;
          v53 = (int16x8_t)(unsigned __int16)v44;
          v54 = (int8x16_t)v37;
          v55 = vdupq_n_s32(v47);
          v50 = &v46->u8[v51 & 0x3FFFFFF0];
          v56 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6C0);
          v47 -= 8 * (v51 & 0x3FFFFFF0);
          v57 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6D0);
          v58 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6A0);
          v59 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6B0);
          v60 = v51 & 0x3FFFFFF0;
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          do
          {
            v64 = *v46++;
            v62 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v57), v62);
            v61 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v58), v61);
            v54 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v59), v54);
            v63 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v56), v63);
            v53 = vaddq_s16(v53, v10);
            v52 = vaddq_s16(v52, v10);
            v59 = vaddq_s32(v59, v11);
            v58 = vaddq_s32(v58, v11);
            v57 = vaddq_s32(v57, v11);
            v56 = vaddq_s32(v56, v11);
            v60 -= 16;
          }
          while (v60);
          v65 = (unint64_t)v46 < v45;
          v66 = veorq_s8(veorq_s8(v54, v62), veorq_s8(v61, v63));
          *(int8x8_t *)v66.i8 = veor_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
          v37 = v66.i32[0] ^ v66.i32[1];
          LOWORD(v44) = vaddvq_s16(vaddq_s16(v53, v52));
          if (v51 != (v51 & 0x3FFFFFF0))
            goto LABEL_49;
        }
        else
        {
          v50 = *(unsigned __int8 **)(result + 40);
          do
          {
LABEL_49:
            v67 = *v50++;
            v37 ^= v67 << v47;
            LOWORD(v44) = v44 + 8;
            v65 = (unint64_t)v50 < v45;
            v68 = v47 >= 8;
            v47 -= 8;
          }
          while (v68 && (unint64_t)v50 < v45);
        }
        if (v65)
          goto LABEL_54;
        goto LABEL_53;
      }
      v50 = *(unsigned __int8 **)(result + 40);
LABEL_53:
      *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) - (__int16)v44 + 0x4000;
      LOWORD(v44) = 0x4000;
LABEL_54:
      *(_DWORD *)(result + 48) = v37;
      *(_WORD *)(result + 54) = v44;
      *(_QWORD *)(result + 40) = v50;
      v38 = *(unsigned __int8 *)(result + 56);
      if (!*(_BYTE *)(result + 56))
      {
LABEL_55:
        if (v29 >= 3)
          goto LABEL_56;
        goto LABEL_3;
      }
LABEL_24:
      v39 = v23[4];
      v40 = (v39 >> 4) + 5;
      v41 = *v23;
      if (v28 <= 0)
      {
        *v23 = v41 - (v41 >> v40);
        v42 = v23[1];
LABEL_40:
        v23[1] = v42 - (v42 >> v40);
        v43 = v23[2];
        goto LABEL_41;
      }
      *v23 = v41 + ((int)(0x8000 - v41) >> v40);
      v42 = v23[1];
      if ((unint64_t)v28 <= 0x100000000000000)
        goto LABEL_40;
      v23[1] = v42 + ((int)(0x8000 - v42) >> v40);
      v43 = v23[2];
      if ((unint64_t)v28 > 0x200000000000000)
      {
        v23[2] = v43 + ((int)(0x8000 - v43) >> v40);
        if (v39 < 0x20)
          LOWORD(v39) = v39 + 1;
        v23[4] = v39;
        if (v29 >= 3)
          goto LABEL_56;
        goto LABEL_3;
      }
LABEL_41:
      v23[2] = v43 - (v43 >> v40);
      if (v39 < 0x20)
        LOWORD(v39) = v39 + 1;
      v23[4] = v39;
      if (v29 >= 3)
      {
LABEL_56:
        v69 = v16 - ((_DWORD)v18 << a6);
        v70 = v69 + (uint64_t)((int)v18 * (int)v9);
        v71 = (int)v70 + (uint64_t)(int)v9;
        v72 = *(unsigned __int8 *)(a7 + v71) + *(unsigned __int8 *)((int)v70 + a7 + 1);
        if (a3 == 2)
        {
          v72 = (v72 + *(unsigned __int8 *)(v70 + a7 + 2) + 1) >> 1;
          if (v72 >= 6)
            v72 = 6;
          if (v16)
          {
            if (v16 != (_DWORD)v18 << a6)
              goto LABEL_74;
            goto LABEL_69;
          }
        }
        else if (a3 == 1)
        {
          v72 = (v72 + *(unsigned __int8 *)(a7 + (int)v70 + (uint64_t)(2 * (int)v9)) + 1) >> 1;
          if (v72 >= 6)
            v72 = 6;
          if ((_DWORD)v17)
          {
            if ((_DWORD)v18)
              goto LABEL_74;
            goto LABEL_69;
          }
        }
        else
        {
          if (a3)
            goto LABEL_74;
          v72 = (v72 + *(unsigned __int8 *)(v71 + a7 + 1) + 1) >> 1;
          if (v72 >= 6)
            v72 = 6;
          if ((_DWORD)v17)
          {
            if ((int)v18 > 1 || v69 > 1)
            {
LABEL_74:
              v72 += 14;
              goto LABEL_75;
            }
LABEL_69:
            v72 += 7;
          }
        }
LABEL_75:
        v73 = 0;
        v74 = (unsigned __int16 *)(a9 + 10 * v72);
        while (2)
        {
          v75 = *(unsigned __int16 *)(result + 52);
          v76 = v75 >> 8;
          v77 = 16;
          v78 = 0xFF00000000000000;
          v79 = 1;
          v80 = v74;
          do
          {
            v81 = v75;
            v82 = *v80++;
            v83 = v76 * (v82 >> 6);
            v77 -= 4;
            v75 = v77 + (v83 >> 1);
            v78 += 0x100000000000000;
            --v79;
          }
          while (HIWORD(v37) < v75);
          v84 = v81 - (v83 >> 1) - v77;
          v85 = (__clz(v84) ^ 0xFFFFFFE0) + 16;
          v86 = *(_WORD *)(result + 54) - v85;
          *(_WORD *)(result + 54) = v86;
          v37 = ((v37 - (v75 << 16) + 1) << v85) - 1;
          *(_DWORD *)(result + 48) = v37;
          *(_WORD *)(result + 52) = v84 << v85;
          if ((v86 & 0x8000) == 0)
          {
            if (v38)
              goto LABEL_80;
LABEL_109:
            v29 -= v79;
            if (-v79 < 3)
              goto LABEL_3;
LABEL_110:
            v68 = v73 >= 9;
            v73 += 3;
            if (v68)
              goto LABEL_3;
            continue;
          }
          break;
        }
        v93 = v86;
        v94 = *(_QWORD *)(result + 32);
        v95 = *(int8x16_t **)(result + 40);
        if ((unint64_t)v95 >= v94)
        {
          v99 = *(unsigned __int8 **)(result + 40);
          goto LABEL_107;
        }
        v96 = 8 - v86;
        if (v96 >= 7)
          v97 = 7;
        else
          v97 = 8 - v86;
        v98 = ((v97 ^ 0xFu) - v93) >> 3;
        if (v98 >= ~(unint64_t)v95 + v94)
          v98 = ~(unint64_t)v95 + v94;
        if (v98 >= 0xF)
        {
          v100 = v98 + 1;
          v101 = 0uLL;
          v102 = (int16x8_t)(unsigned __int16)v93;
          v103 = (int8x16_t)v37;
          v104 = vdupq_n_s32(v96);
          v99 = &v95->u8[v100 & 0x3FFFFFF0];
          v105 = vaddq_s32(v104, (int32x4_t)xmmword_208F3A6C0);
          v96 -= 8 * (v100 & 0x3FFFFFF0);
          v106 = vaddq_s32(v104, (int32x4_t)xmmword_208F3A6D0);
          v107 = vaddq_s32(v104, (int32x4_t)xmmword_208F3A6A0);
          v108 = vaddq_s32(v104, (int32x4_t)xmmword_208F3A6B0);
          v109 = v100 & 0x3FFFFFF0;
          v110 = 0uLL;
          v111 = 0uLL;
          v112 = 0uLL;
          do
          {
            v113 = *v95++;
            v111 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_208F04F30), (uint32x4_t)v106), v111);
            v110 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_208F04F40), (uint32x4_t)v107), v110);
            v103 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_208F04F50), (uint32x4_t)v108), v103);
            v112 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_208F04F20), (uint32x4_t)v105), v112);
            v102 = vaddq_s16(v102, v10);
            v101 = vaddq_s16(v101, v10);
            v108 = vaddq_s32(v108, v11);
            v107 = vaddq_s32(v107, v11);
            v106 = vaddq_s32(v106, v11);
            v105 = vaddq_s32(v105, v11);
            v109 -= 16;
          }
          while (v109);
          v114 = (unint64_t)v95 < v94;
          v115 = veorq_s8(veorq_s8(v103, v111), veorq_s8(v110, v112));
          *(int8x8_t *)v115.i8 = veor_s8(*(int8x8_t *)v115.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
          v37 = v115.i32[0] ^ v115.i32[1];
          LOWORD(v93) = vaddvq_s16(vaddq_s16(v102, v101));
          if (v100 != (v100 & 0x3FFFFFF0))
            goto LABEL_103;
        }
        else
        {
          v99 = *(unsigned __int8 **)(result + 40);
          do
          {
LABEL_103:
            v116 = *v99++;
            v37 ^= v116 << v96;
            LOWORD(v93) = v93 + 8;
            v114 = (unint64_t)v99 < v94;
            v68 = v96 >= 8;
            v96 -= 8;
          }
          while (v68 && (unint64_t)v99 < v94);
        }
        if (!v114)
        {
LABEL_107:
          *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) - (__int16)v93 + 0x4000;
          LOWORD(v93) = 0x4000;
        }
        *(_DWORD *)(result + 48) = v37;
        *(_WORD *)(result + 54) = v93;
        *(_QWORD *)(result + 40) = v99;
        if (!v38)
          goto LABEL_109;
LABEL_80:
        v87 = v74[4];
        v88 = (v87 >> 4) + 5;
        v89 = *v74;
        if (v78 <= 0)
        {
          *v74 = v89 - (v89 >> v88);
          v90 = v74[1];
        }
        else
        {
          *v74 = v89 + ((int)(0x8000 - v89) >> v88);
          v90 = v74[1];
          if ((unint64_t)v78 > 0x100000000000000)
          {
            v74[1] = v90 + ((int)(0x8000 - v90) >> v88);
            v91 = v74[2];
            if ((unint64_t)v78 > 0x200000000000000)
            {
              v92 = v91 + ((int)(0x8000 - v91) >> v88);
              goto LABEL_95;
            }
LABEL_94:
            v92 = v91 - (v91 >> v88);
LABEL_95:
            v74[2] = v92;
            if (v87 < 0x20)
              LOWORD(v87) = v87 + 1;
            v74[4] = v87;
            v29 -= v79;
            if (-v79 < 3)
              goto LABEL_3;
            goto LABEL_110;
          }
        }
        v74[1] = v90 - (v90 >> v88);
        v91 = v74[2];
        goto LABEL_94;
      }
LABEL_3:
      *v19 = v29;
    }
    while (a4-- > 0);
  }
  return result;
}

void av1_read_coeffs_txb_facade(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  int v12;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int32 v100;
  int8x16_t *v101;
  int8x16_t v102;
  int8x16_t v103;
  uint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  uint64_t v120;
  char *v121;
  char v122;
  uint64_t v123;
  unsigned __int32 v124;
  int8x16_t *v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  uint64_t v136;
  int8x16_t v137;
  int8x16_t v138;
  unint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  int8x16_t v142;
  int8x16_t v143;
  uint64_t v144;
  char *v145;
  char v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  BOOL v150;
  BOOL v151;
  uint64_t v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  BOOL v156;
  _BOOL4 v157;
  int v158;
  BOOL v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v168;
  char v169;
  int v170;
  int v171;
  uint64_t v172;
  unsigned __int16 *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  __int16 v183;
  unsigned int v184;
  int v185;
  int v186;
  unint64_t v187;
  int8x16_t *v188;
  unsigned int v189;
  int v190;
  unint64_t v191;
  unsigned __int8 *v192;
  unint64_t v193;
  uint64_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int8x16_t v197;
  int32x4_t v198;
  uint32x4_t v199;
  uint32x4_t v200;
  uint32x4_t v201;
  uint32x4_t v202;
  int16x8_t v203;
  int32x4_t v204;
  uint64_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  BOOL v210;
  int8x16_t v211;
  int v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned __int16 v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  __int16 v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  unsigned __int16 *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  unint64_t v245;
  int v246;
  unsigned __int16 *v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  __int16 v253;
  unsigned int v254;
  int v255;
  unint64_t v256;
  int8x16_t *v257;
  unsigned int v258;
  int v259;
  unint64_t v260;
  unsigned __int8 *v261;
  unsigned __int16 *v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  unsigned __int16 *v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  __int16 v273;
  int v274;
  unint64_t v275;
  int8x16_t *v276;
  unsigned int v277;
  int v278;
  unint64_t v279;
  unsigned __int8 *v280;
  unsigned __int16 *v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  unint64_t v286;
  unsigned __int16 *v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  __int16 v293;
  int v294;
  unint64_t v295;
  int8x16_t *v296;
  unsigned int v297;
  int v298;
  unint64_t v299;
  unsigned __int8 *v300;
  unsigned __int16 *v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  unsigned __int16 *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  __int16 v312;
  int v313;
  unint64_t v314;
  int8x16_t *v315;
  unsigned int v316;
  int v317;
  unint64_t v318;
  unsigned __int8 *v319;
  unsigned __int16 *v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned __int16 *v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  __int16 v331;
  int v332;
  unint64_t v333;
  int8x16_t *v334;
  unsigned int v335;
  int v336;
  unint64_t v337;
  unsigned __int8 *v338;
  unsigned __int16 *v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  unsigned __int16 *v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  __int16 v350;
  int v351;
  unint64_t v352;
  int8x16_t *v353;
  unsigned int v354;
  int v355;
  unint64_t v356;
  unsigned __int8 *v357;
  unsigned __int16 *v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  int v362;
  unsigned __int16 *v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  __int16 v369;
  int v370;
  unint64_t v371;
  int8x16_t *v372;
  unsigned int v373;
  int v374;
  unint64_t v375;
  unsigned __int8 *v376;
  unint64_t v377;
  uint64_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int8x16_t v381;
  int32x4_t v382;
  uint32x4_t v383;
  uint32x4_t v384;
  uint32x4_t v385;
  uint32x4_t v386;
  int16x8_t v387;
  int32x4_t v388;
  uint64_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  BOOL v394;
  int8x16_t v395;
  int v396;
  _WORD *v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  __int16 v403;
  _WORD *v404;
  unsigned int v405;
  unint64_t v406;
  int v407;
  unsigned int v408;
  unint64_t v409;
  uint64_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int8x16_t v413;
  int32x4_t v414;
  uint32x4_t v415;
  uint32x4_t v416;
  uint32x4_t v417;
  uint32x4_t v418;
  int16x8_t v419;
  int32x4_t v420;
  uint64_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  BOOL v426;
  int8x16_t v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  __int16 v438;
  unint64_t v439;
  uint64_t v440;
  int16x8_t v441;
  int16x8_t v442;
  int8x16_t v443;
  int32x4_t v444;
  uint32x4_t v445;
  uint32x4_t v446;
  uint32x4_t v447;
  uint32x4_t v448;
  int16x8_t v449;
  int32x4_t v450;
  uint64_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  BOOL v456;
  int8x16_t v457;
  int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  __int16 v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  int16x8_t v467;
  int16x8_t v468;
  int8x16_t v469;
  int32x4_t v470;
  uint32x4_t v471;
  uint32x4_t v472;
  uint32x4_t v473;
  uint32x4_t v474;
  int16x8_t v475;
  int32x4_t v476;
  uint64_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  BOOL v482;
  int8x16_t v483;
  int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  __int16 v490;
  unint64_t v491;
  uint64_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int8x16_t v495;
  int32x4_t v496;
  uint32x4_t v497;
  uint32x4_t v498;
  uint32x4_t v499;
  uint32x4_t v500;
  int16x8_t v501;
  int32x4_t v502;
  uint64_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  BOOL v508;
  int8x16_t v509;
  int v510;
  unsigned int v511;
  unsigned int v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v516;
  __int16 v517;
  unint64_t v518;
  uint64_t v519;
  int16x8_t v520;
  int16x8_t v521;
  int8x16_t v522;
  int32x4_t v523;
  uint32x4_t v524;
  uint32x4_t v525;
  uint32x4_t v526;
  uint32x4_t v527;
  int16x8_t v528;
  int32x4_t v529;
  uint64_t v530;
  int8x16_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  BOOL v535;
  int8x16_t v536;
  int v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  __int16 v545;
  unint64_t v546;
  uint64_t v547;
  int16x8_t v548;
  int16x8_t v549;
  int8x16_t v550;
  int32x4_t v551;
  uint32x4_t v552;
  uint32x4_t v553;
  uint32x4_t v554;
  uint32x4_t v555;
  int16x8_t v556;
  int32x4_t v557;
  uint64_t v558;
  int8x16_t v559;
  int8x16_t v560;
  int8x16_t v561;
  int8x16_t v562;
  BOOL v563;
  int8x16_t v564;
  int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  __int16 v574;
  unsigned int v575;
  char v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  unsigned __int16 *v581;
  unsigned int v582;
  unsigned int v583;
  int v584;
  uint64_t v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  __int16 v589;
  __int16 v590;
  __int16 v591;
  unsigned int v592;
  int v593;
  unint64_t v594;
  int8x16_t *v595;
  unsigned int v596;
  int v597;
  unint64_t v598;
  unsigned __int8 *v599;
  unint64_t v600;
  unsigned int v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  int16x8_t v605;
  int16x8_t v606;
  int8x16_t v607;
  int32x4_t v608;
  uint32x4_t v609;
  uint32x4_t v610;
  uint32x4_t v611;
  uint32x4_t v612;
  int16x8_t v613;
  int32x4_t v614;
  uint64_t v615;
  int8x16_t v616;
  int8x16_t v617;
  int8x16_t v618;
  int8x16_t v619;
  BOOL v620;
  int8x16_t v621;
  int v622;
  unsigned int v623;
  int v624;
  unsigned int v625;
  unsigned int v626;
  unsigned __int16 v627;
  int v628;
  int v629;
  int v630;
  unsigned __int16 v631;
  unsigned __int16 *v632;
  uint64_t v633;
  int v634;
  int v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  _BOOL8 v640;
  unsigned __int16 *v641;
  unsigned int v642;
  unsigned int v643;
  unsigned int v644;
  uint64_t v645;
  int v646;
  unsigned int v647;
  int v648;
  char v649;
  unsigned int v650;
  __int16 v651;
  __int16 v652;
  __int16 v653;
  unsigned int v654;
  unint64_t v655;
  int8x16_t *v656;
  unsigned int v657;
  int v658;
  unint64_t v659;
  unsigned __int8 *v660;
  unint64_t v661;
  uint64_t v662;
  int16x8_t v663;
  int16x8_t v664;
  int8x16_t v665;
  int32x4_t v666;
  uint32x4_t v667;
  uint32x4_t v668;
  uint32x4_t v669;
  uint32x4_t v670;
  int16x8_t v671;
  int32x4_t v672;
  uint64_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int8x16_t v676;
  int8x16_t v677;
  BOOL v678;
  int8x16_t v679;
  int v680;
  int v681;
  unsigned int v682;
  int v683;
  unsigned int v684;
  unsigned int v685;
  unsigned int v686;
  char v687;
  int v688;
  int v689;
  unsigned int v690;
  unsigned int v691;
  unsigned __int16 *v692;
  unsigned int v693;
  unsigned int v694;
  uint64_t v695;
  unsigned int v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  __int16 v700;
  int v701;
  int8x16_t *v702;
  unint64_t v703;
  unsigned int v704;
  int v705;
  unint64_t v706;
  unsigned __int8 *v707;
  unint64_t v708;
  uint64_t v709;
  int16x8_t v710;
  int16x8_t v711;
  int8x16_t v712;
  int32x4_t v713;
  uint32x4_t v714;
  uint32x4_t v715;
  uint32x4_t v716;
  uint32x4_t v717;
  int16x8_t v718;
  int32x4_t v719;
  uint64_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  BOOL v725;
  int8x16_t v726;
  int v727;
  unsigned int v728;
  int v729;
  unint64_t v730;
  unsigned int v731;
  unsigned int v732;
  unsigned int v733;
  unsigned int v734;
  int v735;
  int v736;
  char v737;
  unsigned int v738;
  unsigned int v739;
  uint64_t v740;
  unsigned __int16 *v741;
  unsigned int v742;
  unsigned int v743;
  unsigned int v744;
  unsigned int v745;
  unsigned int v746;
  __int16 v747;
  int v748;
  unint64_t v749;
  int8x16_t *v750;
  unsigned int v751;
  int v752;
  unint64_t v753;
  unsigned __int8 *v754;
  unint64_t v755;
  uint64_t v756;
  int16x8_t v757;
  int16x8_t v758;
  int8x16_t v759;
  int32x4_t v760;
  uint32x4_t v761;
  uint32x4_t v762;
  uint32x4_t v763;
  uint32x4_t v764;
  int16x8_t v765;
  int32x4_t v766;
  uint64_t v767;
  int8x16_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int8x16_t v771;
  BOOL v772;
  int8x16_t v773;
  int v774;
  unsigned int v775;
  int v776;
  unsigned int v777;
  unsigned int v778;
  unsigned int v779;
  unsigned int v780;
  unsigned __int16 v781;
  int v782;
  unsigned int v783;
  unsigned int v784;
  int v785;
  uint64_t v786;
  unsigned __int16 *v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  unsigned int v791;
  unsigned int v792;
  __int16 v793;
  int v794;
  unint64_t v795;
  int8x16_t *v796;
  unsigned int v797;
  int v798;
  unint64_t v799;
  unsigned __int8 *v800;
  unint64_t v801;
  uint64_t v802;
  int16x8_t v803;
  int16x8_t v804;
  int8x16_t v805;
  int32x4_t v806;
  uint32x4_t v807;
  uint32x4_t v808;
  uint32x4_t v809;
  uint32x4_t v810;
  int16x8_t v811;
  int32x4_t v812;
  uint64_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  int8x16_t v817;
  BOOL v818;
  int8x16_t v819;
  int v820;
  unsigned int v821;
  int v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int v825;
  unsigned int v826;
  unsigned __int16 v827;
  char v828;
  unsigned int v829;
  unsigned int v830;
  int v831;
  uint64_t v832;
  unsigned __int16 *v833;
  unsigned int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v837;
  unsigned int v838;
  __int16 v839;
  int v840;
  int8x16_t *v841;
  unint64_t v842;
  unsigned int v843;
  int v844;
  unint64_t v845;
  unsigned __int8 *v846;
  unint64_t v847;
  uint64_t v848;
  int16x8_t v849;
  int16x8_t v850;
  int8x16_t v851;
  int32x4_t v852;
  uint32x4_t v853;
  uint32x4_t v854;
  uint32x4_t v855;
  uint32x4_t v856;
  int16x8_t v857;
  int32x4_t v858;
  uint64_t v859;
  int8x16_t v860;
  int8x16_t v861;
  int8x16_t v862;
  int8x16_t v863;
  BOOL v864;
  int8x16_t v865;
  int v866;
  unsigned int v867;
  int v868;
  unsigned int v869;
  unsigned int v870;
  unsigned int v871;
  unsigned int v872;
  unsigned __int16 v873;
  unsigned int v874;
  uint64_t v875;
  unsigned int v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int16x8_t v882;
  int32x4_t v883;
  BOOL v884;
  uint64_t v885;
  int v886;
  _BYTE *v887;
  unsigned int v888;
  unsigned int v889;
  unsigned int v890;
  unsigned int v891;
  unsigned int v892;
  unsigned int v893;
  unsigned __int16 *v894;
  unsigned int v895;
  unsigned int v896;
  int v897;
  uint64_t v898;
  int v899;
  unsigned __int16 *v900;
  unsigned int v901;
  unsigned int v902;
  unsigned int v903;
  unsigned int v904;
  unsigned int v905;
  __int16 v906;
  unsigned int v907;
  int v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  int v912;
  int8x16_t *v913;
  unint64_t v914;
  unsigned int v915;
  int v916;
  unint64_t v917;
  unsigned __int8 *v918;
  unint64_t v919;
  int16x8_t v920;
  int16x8_t v921;
  int8x16_t v922;
  int32x4_t v923;
  uint32x4_t v924;
  uint32x4_t v925;
  uint32x4_t v926;
  uint32x4_t v927;
  unint64_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int8x16_t v931;
  int8x16_t v932;
  BOOL v933;
  int8x16_t v934;
  int v935;
  unsigned int v936;
  int v937;
  uint64_t v938;
  int v939;
  unsigned int v940;
  unsigned int v941;
  unsigned int v942;
  unsigned int v943;
  unsigned int v944;
  int v945;
  unsigned __int16 *v946;
  unsigned int v947;
  unsigned int v948;
  int v949;
  uint64_t v950;
  int v951;
  unsigned __int16 *v952;
  unsigned int v953;
  unsigned int v954;
  unsigned int v955;
  unsigned int v956;
  unsigned int v957;
  __int16 v958;
  unsigned int v959;
  int v960;
  unsigned int v961;
  unsigned int v962;
  unsigned int v963;
  unsigned int v964;
  int v965;
  int8x16_t *v966;
  unint64_t v967;
  unsigned int v968;
  int v969;
  unint64_t v970;
  unsigned __int8 *v971;
  unint64_t v972;
  int16x8_t v973;
  int16x8_t v974;
  int8x16_t v975;
  int32x4_t v976;
  uint32x4_t v977;
  uint32x4_t v978;
  uint32x4_t v979;
  uint32x4_t v980;
  unint64_t v981;
  int8x16_t v982;
  int8x16_t v983;
  int8x16_t v984;
  int8x16_t v985;
  BOOL v986;
  int8x16_t v987;
  int v988;
  unint64_t v989;
  int v990;
  uint64_t v991;
  int v992;
  int8x16_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int16x8_t v997;
  int32x4_t v998;
  _WORD *v999;
  uint64_t v1000;
  unsigned int v1001;
  int v1002;
  int v1003;
  int v1004;
  int v1005;
  int v1006;
  unsigned int v1007;
  int v1008;
  char v1009;
  char v1010;
  unsigned int v1011;
  unsigned int v1012;
  unsigned int v1013;
  int v1014;
  uint64_t v1015;
  unsigned __int16 *v1016;
  unsigned int v1017;
  unsigned int v1018;
  unsigned int v1019;
  unsigned int v1020;
  unsigned int v1021;
  __int16 v1022;
  unsigned int v1023;
  unsigned int v1024;
  int v1025;
  unsigned int v1026;
  unsigned int v1027;
  int v1028;
  unint64_t v1029;
  int8x16_t *v1030;
  unsigned int v1031;
  int v1032;
  unint64_t v1033;
  unsigned __int8 *v1034;
  unsigned __int16 v1035;
  unint64_t v1036;
  uint64_t v1037;
  int16x8_t v1038;
  int16x8_t v1039;
  int8x16_t v1040;
  int32x4_t v1041;
  uint32x4_t v1042;
  uint32x4_t v1043;
  uint32x4_t v1044;
  uint32x4_t v1045;
  uint64_t v1046;
  int8x16_t v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int8x16_t v1050;
  BOOL v1051;
  int8x16_t v1052;
  int v1053;
  int v1054;
  int v1055;
  int v1056;
  int v1057;
  int v1058;
  int v1059;
  unsigned __int8 v1060;
  unsigned __int8 v1061;
  char v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1072;
  int v1074;
  int v1075;
  int v1076[2];
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unsigned int v1081;
  uint64_t v1083;
  int v1084;
  unsigned __int16 *v1085;
  uint64_t v1086;
  uint64_t v1087;
  _WORD *v1088;
  uint64_t v1089;
  uint64_t v1090;
  char v1091;
  unsigned int v1092;
  unsigned __int16 *v1093;
  char v1094;
  uint64_t v1095;
  int v1096;
  int v1097;
  uint64_t v1098;
  uint64_t v1100;
  int v1101;
  int v1102;
  _BYTE v1103[1312];
  uint64_t v1104;

  v12 = a5;
  v1104 = *MEMORY[0x24BDAC8D0];
  v15 = *(unsigned __int8 ***)(a2 + 7864);
  v16 = (uint64_t)*v15;
  v17 = a4;
  v18 = a2 + 2608 * a4;
  v19 = av1_ss_size_lookup[4 * **v15 + 2 * *(int *)(v18 + 20) + *(int *)(v18 + 24)];
  v1078 = (uint64_t)*v15;
  v20 = a6;
  v22 = *(_QWORD *)(v18 + 128);
  v21 = *(_QWORD *)(v18 + 136);
  v23 = (unsigned __int8 *)(v22 + a6);
  v24 = a5;
  v25 = (unsigned __int8 *)(v21 + a5);
  v26 = a7;
  v1083 = a7;
  v1079 = v19;
  v1081 = a7;
  switch(a7)
  {
    case 0u:
      v27 = *v23;
      v28 = *v25;
      v1091 = get_txb_ctx_general_dc_sign_contexts[get_txb_ctx_general_signs[v27 >> 3]
                                                 + 32
                                                 + (uint64_t)get_txb_ctx_general_signs[v28 >> 3]];
      if (!a4)
      {
        if (!(_DWORD)v19)
          goto LABEL_81;
        if ((v27 & 4) != 0)
          v90 = 4;
        else
          v90 = v27 & 7;
        if ((v28 & 4) != 0)
          v91 = 4;
        else
          v91 = v28 & 7;
        v92 = v90 + 4 * v90;
        goto LABEL_77;
      }
      v29 = 10;
      if (!(_DWORD)v19)
        v29 = 7;
      if (*v23)
        v30 = v29 + 1;
      else
        v30 = v29;
      if ((_DWORD)v28)
        ++v30;
      goto LABEL_169;
    case 1u:
      v31 = *v23;
      v32 = v23[1];
      v33 = *v25;
      v34 = v25[1];
      v1091 = get_txb_ctx_general_dc_sign_contexts[get_txb_ctx_general_signs[v31 >> 3]
                                                 + 32
                                                 + (uint64_t)get_txb_ctx_general_signs[v32 >> 3]
                                                 + get_txb_ctx_general_signs[v33 >> 3]
                                                 + get_txb_ctx_general_signs[v34 >> 3]];
      if (a4)
      {
        v35 = 10;
        if (((0x3CFFF0uLL >> v19) & 1) == 0)
          v35 = 7;
        v36 = *(unsigned __int16 *)v23 == 0;
        v37 = *(unsigned __int16 *)v25;
        goto LABEL_19;
      }
      if ((_DWORD)v19 == 3)
        goto LABEL_81;
      v93 = v32 | v31;
      LODWORD(v94) = v93 & 7;
      v95 = v34 | v33;
      goto LABEL_70;
    case 2u:
      v38 = *v23;
      v39 = v23[1];
      v40 = v23[2];
      v41 = v23[3];
      v42 = *v25;
      v43 = v25[1];
      v44 = v25[2];
      v45 = v25[3];
      v1091 = get_txb_ctx_general_dc_sign_contexts[get_txb_ctx_general_signs[v39 >> 3]
                                                 + 32
                                                 + get_txb_ctx_general_signs[v38 >> 3]
                                                 + get_txb_ctx_general_signs[v40 >> 3]
                                                 + get_txb_ctx_general_signs[v41 >> 3]
                                                 + get_txb_ctx_general_signs[v42 >> 3]
                                                 + get_txb_ctx_general_signs[v43 >> 3]
                                                 + get_txb_ctx_general_signs[v44 >> 3]
                                                 + get_txb_ctx_general_signs[v45 >> 3]];
      if (a4)
      {
        v35 = 10;
        if (((0x30FF80uLL >> v19) & 1) == 0)
          v35 = 7;
        v36 = *(_DWORD *)v23 == 0;
        v37 = *(_DWORD *)v25;
LABEL_19:
        if (v36)
          v46 = v35;
        else
          v46 = v35 + 1;
        if (v37)
          v30 = v46 + 1;
        else
          v30 = v46;
      }
      else
      {
        if ((_DWORD)v19 == 6)
          goto LABEL_81;
        v93 = v39 | v38 | v40 | v41;
        LODWORD(v94) = v93 & 7;
        v95 = v43 | v42 | v44 | v45;
LABEL_70:
        if ((v93 & 4) != 0)
          v94 = 4;
        else
          v94 = v94;
        if ((v95 & 4) != 0)
          v91 = 4;
        else
          v91 = v95 & 7;
        v92 = v94 + 4 * v94;
LABEL_77:
        v30 = get_txb_ctx_general_skip_contexts[v92 + v91];
      }
      goto LABEL_169;
    case 3u:
      v47 = a6;
      v48 = *v23;
      v49 = v23[1];
      v50 = v23[2];
      v51 = v23[3];
      v52 = v23[4];
      v53 = v23[5];
      v54 = v23[6];
      v55 = v23[7];
      v56 = *v25;
      v57 = v25[1];
      v58 = v25[2];
      v59 = v25[3];
      v60 = v25[4];
      v61 = v25[5];
      v62 = v25[6];
      v63 = v25[7];
      v1091 = get_txb_ctx_general_dc_sign_contexts[get_txb_ctx_general_signs[v49 >> 3]
                                                 + 32
                                                 + get_txb_ctx_general_signs[v48 >> 3]
                                                 + get_txb_ctx_general_signs[v50 >> 3]
                                                 + get_txb_ctx_general_signs[v51 >> 3]
                                                 + get_txb_ctx_general_signs[v52 >> 3]
                                                 + get_txb_ctx_general_signs[v53 >> 3]
                                                 + get_txb_ctx_general_signs[v54 >> 3]
                                                 + get_txb_ctx_general_signs[v55 >> 3]
                                                 + get_txb_ctx_general_signs[v56 >> 3]
                                                 + get_txb_ctx_general_signs[v57 >> 3]
                                                 + get_txb_ctx_general_signs[v58 >> 3]
                                                 + get_txb_ctx_general_signs[v59 >> 3]
                                                 + get_txb_ctx_general_signs[v60 >> 3]
                                                 + get_txb_ctx_general_signs[v61 >> 3]
                                                 + get_txb_ctx_general_signs[v62 >> 3]
                                                 + get_txb_ctx_general_signs[v63 >> 3]];
      if (a4)
      {
        v16 = (uint64_t)*v15;
        LODWORD(v19) = av1_ss_size_lookup[4 * **v15 + 2 * *(int *)(v18 + 20) + *(int *)(v18 + 24)];
        v64 = 7;
        if ((unint64_t)(v1079 - 10) < 6)
          v64 = 10;
        v65 = *(_QWORD *)v25;
        if (*(_QWORD *)v23)
          v66 = v64 + 1;
        else
          v66 = v64;
        if (v65)
          v30 = v66 + 1;
        else
          v30 = v66;
        v20 = v47;
        LODWORD(v24) = a5;
        v12 = a5;
        v26 = v1083;
        a7 = v1081;
        v17 = a4;
      }
      else
      {
        v17 = 0;
        if ((_DWORD)v19 == 9)
        {
          v30 = 0;
        }
        else
        {
          v96 = v49 | v48 | v50 | v51 | v52 | v53 | v54 | v55;
          if ((v96 & 4) != 0)
            v97 = 4;
          else
            v97 = v96 & 7;
          if ((((v57 | v56 | v58 | v59 | v60 | v61 | v62) | v63) & 4) != 0)
            v98 = 4;
          else
            v98 = ((v57 | v56 | v58 | v59 | v60 | v61 | v62) | v63) & 7;
          v30 = get_txb_ctx_general_skip_contexts[4 * v97 + v97 + v98];
        }
        v20 = v47;
        LODWORD(v24) = a5;
        v12 = a5;
        v26 = v1083;
        a7 = v1081;
        v16 = (uint64_t)*v15;
      }
      goto LABEL_169;
    default:
      v68 = 4 * a7;
      LODWORD(v67) = *(int *)((char *)tx_size_wide_unit_3 + v68);
      LODWORD(v68) = *(int *)((char *)tx_size_high_unit_3 + v68);
      if ((int)v67 <= 1)
        v67 = 1;
      else
        v67 = v67;
      if (v67 < 2)
      {
        v69 = 0;
        v70 = 0;
LABEL_43:
        v77 = v67 - v69;
        v78 = (unsigned __int8 *)(v22 + v69 + a6);
        do
        {
          v79 = *v78++;
          v70 += get_txb_ctx_general_signs[(unint64_t)v79 >> 3];
          --v77;
        }
        while (v77);
        goto LABEL_45;
      }
      v71 = 0;
      v72 = 0;
      v69 = v67 & 0x7FFFFFFE;
      v73 = (unsigned __int8 *)(a6 + v22 + 1);
      v74 = v69;
      do
      {
        v75 = *(v73 - 1);
        v76 = *v73;
        v73 += 2;
        v71 += get_txb_ctx_general_signs[v75 >> 3];
        v72 += get_txb_ctx_general_signs[(unint64_t)v76 >> 3];
        v74 -= 2;
      }
      while (v74);
      v70 = v72 + v71;
      v19 = av1_ss_size_lookup[4 * **v15 + 2 * *(int *)(v18 + 20) + *(int *)(v18 + 24)];
      if (v69 != v67)
        goto LABEL_43;
LABEL_45:
      if ((int)v68 <= 1)
        v68 = 1;
      else
        v68 = v68;
      if (v68 < 2)
      {
        v80 = 0;
LABEL_53:
        v86 = v68 - v80;
        v87 = (unsigned __int8 *)(v21 + v80 + v24);
        do
        {
          v88 = *v87++;
          v70 += get_txb_ctx_general_signs[(unint64_t)v88 >> 3];
          --v86;
        }
        while (v86);
        goto LABEL_55;
      }
      v81 = 0;
      v80 = v68 & 0x7FFFFFFE;
      v82 = (unsigned __int8 *)(v24 + v21 + 1);
      v83 = v80;
      do
      {
        v84 = *(v82 - 1);
        v85 = *v82;
        v82 += 2;
        v70 += get_txb_ctx_general_signs[v84 >> 3];
        v81 += get_txb_ctx_general_signs[(unint64_t)v85 >> 3];
        v83 -= 2;
      }
      while (v83);
      v70 += v81;
      v19 = av1_ss_size_lookup[4 * **v15 + 2 * *(int *)(v18 + 20) + *(int *)(v18 + 24)];
      if (v80 != v68)
        goto LABEL_53;
LABEL_55:
      v1091 = get_txb_ctx_general_dc_sign_contexts[v70 + 32];
      if (!a4)
      {
        if (txsize_to_bsize_3[a7] == (_DWORD)v19)
        {
LABEL_81:
          v30 = 0;
          goto LABEL_169;
        }
        if (v67 < 8)
        {
          v99 = 0;
          LOBYTE(v100) = 0;
          goto LABEL_101;
        }
        if (v67 >= 0x20)
        {
          v99 = v67 & 0x7FFFFFE0;
          v101 = (int8x16_t *)(a6 + v22 + 16);
          v102 = 0uLL;
          v103 = 0uLL;
          v104 = v99;
          a12 = 0uLL;
          v105 = 0uLL;
          v106 = 0uLL;
          v107 = 0uLL;
          v108 = 0uLL;
          v109 = 0uLL;
          do
          {
            v110 = v101[-1];
            a12 = vorrq_s8(a12, vqtbl1q_s8(v110, (int8x16_t)xmmword_208F04F30));
            v103 = vorrq_s8(v103, vqtbl1q_s8(v110, (int8x16_t)xmmword_208F04F40));
            v102 = vorrq_s8(v102, vqtbl1q_s8(v110, (int8x16_t)xmmword_208F04F50));
            v105 = vorrq_s8(v105, vqtbl1q_s8(v110, (int8x16_t)xmmword_208F04F20));
            v108 = vorrq_s8(v108, vqtbl1q_s8(*v101, (int8x16_t)xmmword_208F04F30));
            v107 = vorrq_s8(v107, vqtbl1q_s8(*v101, (int8x16_t)xmmword_208F04F40));
            v106 = vorrq_s8(v106, vqtbl1q_s8(*v101, (int8x16_t)xmmword_208F04F50));
            v109 = vorrq_s8(v109, vqtbl1q_s8(*v101, (int8x16_t)xmmword_208F04F20));
            v101 += 2;
            v104 -= 32;
          }
          while (v104);
          v111 = vorrq_s8(vorrq_s8(vorrq_s8(v106, v102), vorrq_s8(v108, a12)), vorrq_s8(vorrq_s8(v107, v103), vorrq_s8(v109, v105)));
          *(int8x8_t *)v111.i8 = vorr_s8(*(int8x8_t *)v111.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
          v100 = v111.i32[0] | v111.i32[1];
          if (v99 == v67)
            goto LABEL_103;
          if ((v67 & 0x18) == 0)
          {
LABEL_101:
            v120 = v67 - v99;
            v121 = (char *)(v22 + v99 + a6);
            do
            {
              v122 = *v121++;
              LOBYTE(v100) = v100 | v122;
              --v120;
            }
            while (v120);
            goto LABEL_103;
          }
        }
        else
        {
          v100 = 0;
          v99 = 0;
        }
        v112 = v99;
        v99 = v67 & 0x7FFFFFF8;
        v113 = 0uLL;
        v114 = (int8x16_t)v100;
        v115 = (unint64_t *)(v22 + v112 + a6);
        v116 = v112 - v99;
        do
        {
          v117 = *v115++;
          a12.i64[0] = v117;
          v118 = vqtbl1q_s8(a12, (int8x16_t)xmmword_208F04F50);
          a12 = vqtbl1q_s8(a12, (int8x16_t)xmmword_208F04F40);
          v113 = vorrq_s8(v113, a12);
          v114 = vorrq_s8(v114, v118);
          v116 += 8;
        }
        while (v116);
        v119 = vorrq_s8(v114, v113);
        *(int8x8_t *)v119.i8 = vorr_s8(*(int8x8_t *)v119.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL));
        LOBYTE(v100) = v119.i8[0] | v119.i8[4];
        if (v99 != v67)
          goto LABEL_101;
LABEL_103:
        if (v68 < 8)
        {
          v123 = 0;
          LOBYTE(v124) = 0;
          goto LABEL_114;
        }
        if (v68 >= 0x20)
        {
          v123 = v68 & 0x7FFFFFE0;
          v125 = (int8x16_t *)(v24 + v21 + 16);
          v126 = 0uLL;
          v127 = 0uLL;
          v128 = v123;
          a12 = 0uLL;
          v129 = 0uLL;
          v130 = 0uLL;
          v131 = 0uLL;
          v132 = 0uLL;
          v133 = 0uLL;
          do
          {
            v134 = v125[-1];
            a12 = vorrq_s8(a12, vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F30));
            v127 = vorrq_s8(v127, vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F40));
            v126 = vorrq_s8(v126, vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F50));
            v129 = vorrq_s8(v129, vqtbl1q_s8(v134, (int8x16_t)xmmword_208F04F20));
            v132 = vorrq_s8(v132, vqtbl1q_s8(*v125, (int8x16_t)xmmword_208F04F30));
            v131 = vorrq_s8(v131, vqtbl1q_s8(*v125, (int8x16_t)xmmword_208F04F40));
            v130 = vorrq_s8(v130, vqtbl1q_s8(*v125, (int8x16_t)xmmword_208F04F50));
            v133 = vorrq_s8(v133, vqtbl1q_s8(*v125, (int8x16_t)xmmword_208F04F20));
            v125 += 2;
            v128 -= 32;
          }
          while (v128);
          v135 = vorrq_s8(vorrq_s8(vorrq_s8(v130, v126), vorrq_s8(v132, a12)), vorrq_s8(vorrq_s8(v131, v127), vorrq_s8(v133, v129)));
          *(int8x8_t *)v135.i8 = vorr_s8(*(int8x8_t *)v135.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL));
          v124 = v135.i32[0] | v135.i32[1];
          if (v123 == v68)
            goto LABEL_116;
          if ((v68 & 0x18) == 0)
          {
LABEL_114:
            v144 = v68 - v123;
            v145 = (char *)(v21 + v123 + v24);
            do
            {
              v146 = *v145++;
              LOBYTE(v124) = v124 | v146;
              --v144;
            }
            while (v144);
            goto LABEL_116;
          }
        }
        else
        {
          v124 = 0;
          v123 = 0;
        }
        v136 = v123;
        v123 = v68 & 0x7FFFFFF8;
        v137 = 0uLL;
        v138 = (int8x16_t)v124;
        v139 = (unint64_t *)(v21 + v136 + v24);
        v140 = v136 - v123;
        do
        {
          v141 = *v139++;
          a12.i64[0] = v141;
          v142 = vqtbl1q_s8(a12, (int8x16_t)xmmword_208F04F50);
          a12 = vqtbl1q_s8(a12, (int8x16_t)xmmword_208F04F40);
          v137 = vorrq_s8(v137, a12);
          v138 = vorrq_s8(v138, v142);
          v140 += 8;
        }
        while (v140);
        v143 = vorrq_s8(v138, v137);
        *(int8x8_t *)v143.i8 = vorr_s8(*(int8x8_t *)v143.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
        LOBYTE(v124) = v143.i8[0] | v143.i8[4];
        if (v123 != v68)
          goto LABEL_114;
LABEL_116:
        if ((v100 & 4) != 0)
          v147 = 4;
        else
          v147 = v100 & 7;
        if ((v124 & 4) != 0)
          v148 = 4;
        else
          v148 = v124 & 7;
        v30 = get_txb_ctx_general_skip_contexts[4 * v147 + v147 + v148];
        goto LABEL_169;
      }
      switch(a7)
      {
        case 0u:
          v89 = *v23;
          goto LABEL_139;
        case 1u:
          v149 = *(unsigned __int16 *)v23;
          goto LABEL_131;
        case 2u:
          v150 = *(_DWORD *)v23 == 0;
          goto LABEL_158;
        case 3u:
          v151 = *(_QWORD *)v23 == 0;
          goto LABEL_142;
        case 4u:
          v152 = *((_QWORD *)v23 + 1) | *(_QWORD *)v23;
          goto LABEL_135;
        case 5u:
          v149 = *v23;
          goto LABEL_131;
        case 6u:
          v89 = *(unsigned __int16 *)v23;
          goto LABEL_139;
        case 7u:
          v150 = *(unsigned __int16 *)v23 == 0;
          goto LABEL_158;
        case 8u:
          v149 = *(_DWORD *)v23;
LABEL_131:
          v153 = v149 == 0;
          goto LABEL_147;
        case 9u:
          v154 = *(_DWORD *)v23;
          goto LABEL_141;
        case 0xAu:
          v155 = *(_QWORD *)v23;
          goto LABEL_157;
        case 0xBu:
          v152 = *(_QWORD *)v23;
LABEL_135:
          v156 = v152 == 0;
          goto LABEL_152;
        case 0xCu:
          v151 = *(_OWORD *)v23 == 0;
          goto LABEL_142;
        case 0xDu:
          v150 = *v23 == 0;
          goto LABEL_158;
        case 0xEu:
          v89 = *(_DWORD *)v23;
LABEL_139:
          v157 = v89 != 0;
          v158 = *v25;
          goto LABEL_162;
        case 0xFu:
          v154 = *(unsigned __int16 *)v23;
LABEL_141:
          v151 = v154 == 0;
LABEL_142:
          v157 = !v151;
          v159 = *(_QWORD *)v25 == 0;
          goto LABEL_163;
        case 0x10u:
          v153 = *(_QWORD *)v23 == 0;
LABEL_147:
          v157 = !v153;
          v158 = *(unsigned __int16 *)v25;
          goto LABEL_162;
        case 0x11u:
          v156 = *(_DWORD *)v23 == 0;
LABEL_152:
          v157 = !v156;
          v159 = *(_OWORD *)v25 == 0;
          goto LABEL_163;
        case 0x12u:
          v155 = *((_QWORD *)v23 + 1) | *(_QWORD *)v23;
LABEL_157:
          v150 = v155 == 0;
LABEL_158:
          v157 = !v150;
          v158 = *(_DWORD *)v25;
LABEL_162:
          v159 = v158 == 0;
LABEL_163:
          v160 = !v159;
          break;
        default:
          v157 = 0;
          v160 = 0;
          break;
      }
      v161 = v160 + v157;
      v162 = 7;
      if (num_pels_log2_lookup_7[v19] > num_pels_log2_lookup_7[txsize_to_bsize_3[a7]])
        v162 = 10;
      v30 = v161 + v162;
LABEL_169:
      *(_QWORD *)v1076 = v18 + 16;
      v163 = *(_QWORD *)(a2 + 10648);
      v164 = 1 << (*(_DWORD *)(a2 + 10656) + 7);
      v165 = txsize_sqr_map_2[v26] + (unint64_t)txsize_sqr_up_map_1[v26] + 1;
      v166 = v165 >> 1;
      v167 = a2 + 2608 * (int)v17 + 4 * (*(_WORD *)(v16 + 167) & 7);
      v1080 = *(_QWORD *)(a2 + 8 * v17 + 15080) + 4 * *(unsigned __int16 *)(a2 + 2 * v17 + 15104);
      v168 = a7 - 4;
      v169 = 5;
      v170 = 16;
      LOBYTE(v1102) = 4;
      v171 = 32;
      switch(a7)
      {
        case 4u:
        case 0xBu:
        case 0xCu:
          LOBYTE(v1102) = 5;
          goto LABEL_171;
        case 0x11u:
LABEL_174:
          v171 = v170;
          LOBYTE(v1102) = v169;
          break;
        case 0x12u:
          break;
        default:
          v1102 = tx_size_high_log2_3[v26];
          if (v168 <= 0xE)
          {
LABEL_171:
            v170 = 16;
            v171 = 32;
            v169 = v1102;
            switch(a7)
            {
              case 4u:
              case 0xBu:
              case 0xCu:
                v171 = 32;
                goto LABEL_173;
              case 0x11u:
                goto LABEL_174;
              case 0x12u:
                goto LABEL_175;
              default:
                goto LABEL_188;
            }
          }
          else
          {
LABEL_188:
            v171 = tx_size_wide_6[v26];
            if (v168 <= 0xE)
            {
LABEL_173:
              v170 = v171;
              v169 = v1102;
              switch(a7)
              {
                case 0x11u:
                  goto LABEL_174;
                default:
                  goto LABEL_175;
              }
            }
          }
          break;
      }
LABEL_175:
      v172 = 0;
      v1097 = v164 - 1;
      v1096 = -v164;
      v1095 = v167 + 144;
      v1094 = ((0x61E18uLL >> a7) & 1) + ((0x1810uLL >> a7) & 1);
      v173 = (unsigned __int16 *)(v163 + 78 * v166 + 6 * v30);
      v174 = *(_DWORD *)(a3 + 48);
      v175 = *(unsigned __int16 *)(a3 + 52);
      v176 = v175 >> 8;
      v177 = 8;
      v178 = 0xFF00000000000000;
      do
      {
        v179 = v175;
        v180 = v176 * (v173[v172] >> 6);
        v177 -= 4;
        v175 = v177 + (v180 >> 1);
        ++v172;
        v178 += 0x100000000000000;
      }
      while (HIWORD(v174) < v175);
      v181 = v179 - (v180 >> 1) - v177;
      v182 = (__clz(v181) ^ 0xFFFFFFE0) + 16;
      v183 = *(_WORD *)(a3 + 54) - v182;
      *(_WORD *)(a3 + 54) = v183;
      v184 = ((v174 - (v175 << 16) + 1) << v182) - 1;
      *(_DWORD *)(a3 + 48) = v184;
      *(_WORD *)(a3 + 52) = v181 << v182;
      v185 = v172 - 1;
      if ((v183 & 0x8000) == 0)
        goto LABEL_200;
      v186 = v183;
      v187 = *(_QWORD *)(a3 + 32);
      v188 = *(int8x16_t **)(a3 + 40);
      if ((unint64_t)v188 >= v187)
      {
        v192 = *(unsigned __int8 **)(a3 + 40);
LABEL_198:
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v186 + 0x4000;
        LOWORD(v186) = 0x4000;
        goto LABEL_199;
      }
      v189 = 8 - v186;
      if ((8 - v186) >= 7)
        v190 = 7;
      else
        v190 = 8 - v186;
      v191 = ((v190 ^ 0xFu) - v186) >> 3;
      if (v191 >= ~(unint64_t)v188 + v187)
        v191 = ~(unint64_t)v188 + v187;
      if (v191 >= 0xF)
      {
        v193 = v191 + 1;
        v194 = (v191 + 1) & 0x3FFFFFF0;
        v192 = &v188->u8[v194];
        v195 = 0uLL;
        v196 = (int16x8_t)(unsigned __int16)v186;
        v197 = (int8x16_t)v184;
        v198 = vdupq_n_s32(v189);
        v199 = (uint32x4_t)vaddq_s32(v198, (int32x4_t)xmmword_208F3A6C0);
        v200 = (uint32x4_t)vaddq_s32(v198, (int32x4_t)xmmword_208F3A6D0);
        v201 = (uint32x4_t)vaddq_s32(v198, (int32x4_t)xmmword_208F3A6A0);
        v202 = (uint32x4_t)vaddq_s32(v198, (int32x4_t)xmmword_208F3A6B0);
        v203.i64[0] = 0x8000800080008;
        v203.i64[1] = 0x8000800080008;
        v204.i64[0] = 0x7F0000007FLL;
        v204.i64[1] = 0x7F0000007FLL;
        v205 = v194;
        v206 = 0uLL;
        v207 = 0uLL;
        v208 = 0uLL;
        do
        {
          v209 = *v188++;
          v207 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F30), v200), v207);
          v206 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F40), v201), v206);
          v197 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F50), v202), v197);
          v208 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v209, (int8x16_t)xmmword_208F04F20), v199), v208);
          v196 = vaddq_s16(v196, v203);
          v195 = vaddq_s16(v195, v203);
          v202 = (uint32x4_t)vaddq_s32((int32x4_t)v202, v204);
          v201 = (uint32x4_t)vaddq_s32((int32x4_t)v201, v204);
          v200 = (uint32x4_t)vaddq_s32((int32x4_t)v200, v204);
          v199 = (uint32x4_t)vaddq_s32((int32x4_t)v199, v204);
          v205 -= 16;
        }
        while (v205);
        v210 = (unint64_t)v188 < v187;
        v211 = veorq_s8(veorq_s8(v197, v207), veorq_s8(v206, v208));
        *(int8x8_t *)v211.i8 = veor_s8(*(int8x8_t *)v211.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL));
        v184 = v211.i32[0] ^ v211.i32[1];
        LOWORD(v186) = vaddvq_s16(vaddq_s16(v196, v195));
        if (v193 == v194)
          goto LABEL_197;
        v189 -= 8 * v194;
      }
      else
      {
        v192 = *(unsigned __int8 **)(a3 + 40);
      }
      do
      {
        v212 = *v192++;
        v184 ^= v212 << v189;
        LOWORD(v186) = v186 + 8;
        v210 = (unint64_t)v192 < v187;
        v213 = v189 >= 8;
        v189 -= 8;
      }
      while (v213 && (unint64_t)v192 < v187);
LABEL_197:
      if (!v210)
        goto LABEL_198;
LABEL_199:
      *(_DWORD *)(a3 + 48) = v184;
      *(_WORD *)(a3 + 54) = v186;
      *(_QWORD *)(a3 + 40) = v192;
LABEL_200:
      if (*(_BYTE *)(a3 + 56))
      {
        v214 = v173[2];
        v215 = (v214 >> 4) + 4;
        v216 = *v173;
        if (v178 < 1)
          v217 = v216 - (v216 >> v215);
        else
          v217 = v216 + ((int)(0x8000 - v216) >> v215);
        *v173 = v217;
        if (v214 >= 0x20)
          v218 = v214;
        else
          v218 = v214 + 1;
        v173[2] = v218;
      }
      v219 = *(_QWORD *)(a2 + 8 * v17 + 15112) + 4 * *(unsigned __int16 *)(a2 + 2 * v17 + 15136);
      *(_DWORD *)v219 = 0;
      if (v185)
      {
        v220 = 0;
        *(_WORD *)(v219 + 2) = 0;
        v221 = a4;
        v222 = *(_QWORD *)v1076;
        if (!a4)
        {
          v220 = 0;
          *(_BYTE *)(*(_QWORD *)(a2 + 7912) + v20 + *(int *)(a2 + 7920) * (uint64_t)v12) = 0;
          LODWORD(v19) = v1079;
        }
        goto LABEL_957;
      }
      v1093 = (unsigned __int16 *)v219;
      v1088 = (_WORD *)(v219 + 2);
      v1090 = v163;
      v1074 = v12;
      if (!a4)
      {
        v223 = v12;
        v224 = v171;
        v225 = v20;
        v226 = v24;
        v24 = v165 >> 1;
        v227 = v17;
        v228 = v165;
        av1_read_tx_type(a1, a2, v223, a6, v1081, a3);
        LODWORD(v165) = v228;
        LODWORD(v17) = v227;
        v166 = v24;
        LODWORD(v24) = v226;
        v20 = v225;
        v171 = v224;
        v12 = v1074;
        v163 = v1090;
        v15 = *(unsigned __int8 ***)(a2 + 7864);
      }
      v229 = (uint64_t)*v15;
      v230 = *(_WORD *)(*v15 + 167);
      v231 = v230 & 7;
      if (*(_DWORD *)(a2 + 4 * (v230 & 7) + 10692))
      {
        v232 = 0;
        v233 = v1083;
      }
      else
      {
        v233 = v1083;
        if (((0x61810uLL >> v1083) & 1) != 0)
        {
          v232 = 0;
        }
        else if (a4)
        {
          if ((v230 & 0x80) != 0 || *(char *)(v229 + 16) > 0)
          {
            v232 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 7912)
                                      + (a6 << *(_DWORD *)(a2 + 2628))
                                      + *(_DWORD *)(a2 + 7920) * (v12 << *(_DWORD *)(a2 + 2632)));
            v234 = (v230 & 0x80) != 0 || *(char *)(v229 + 16) > 0;
          }
          else
          {
            v234 = 0;
            v232 = intra_mode_to_tx_type__intra_mode_to_tx_type_0[get_uv_mode_uv2y_2[*(unsigned __int8 *)(v229 + 3)]];
          }
          if (((0x18608uLL >> v1083) & 1) == 0)
          {
            if (*(_BYTE *)(a1 + 501))
            {
              if (v234)
                LOBYTE(v234) = 1;
              else
                LOBYTE(v234) = 2;
            }
            else
            {
              LOBYTE(v234) = av1_ext_tx_set_lookup_2[2 * v234 + ((0x60604uLL >> v1083) & 1)];
            }
          }
          if (!av1_ext_tx_used_0[16 * (unint64_t)v234 + v232])
            v232 = 0;
        }
        else
        {
          v232 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 7912) + v20 + *(int *)(a2 + 7920) * (uint64_t)v12);
        }
      }
      v235 = v232;
      v1084 = tx_type_to_class[v232];
      v236 = 3;
      switch(v168)
      {
        case 0u:
        case 7u:
        case 8u:
          break;
        case 0xDu:
          v236 = 9;
          break;
        case 0xEu:
          v236 = 10;
          break;
        default:
          v236 = v233;
          break;
      }
      v1098 = a3 + 16;
      v237 = 8 * v236;
      v238 = (uint64_t *)(a2 + 2608 * (int)v17 + 152 * v231 + v237 + 192);
      v239 = (uint64_t *)(a1 + 7576 + v237);
      if (v235 >= 9)
        v238 = v239;
      v1086 = (uint64_t)*(&av1_scan_orders + 32 * v233 + 2 * v235);
      v1087 = *v238;
      switch(txsize_log2_minus4[v233])
      {
        case 0:
          v240 = (unsigned __int16 *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 966);
          v241 = *(_DWORD *)(a3 + 48);
          v242 = *(unsigned __int16 *)(a3 + 52);
          v243 = v242 >> 8;
          v244 = 20;
          v245 = 0xFF00000000000000;
          v246 = -1;
          v247 = v240;
          do
          {
            v248 = v242;
            v249 = *v247++;
            v250 = v243 * (v249 >> 6);
            v244 -= 4;
            v242 = v244 + (v250 >> 1);
            v245 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v241) < v242);
          v251 = v248 - (v250 >> 1) - v244;
          v252 = (__clz(v251) ^ 0xFFFFFFE0) + 16;
          v253 = *(_WORD *)(a3 + 54) - v252;
          *(_WORD *)(a3 + 54) = v253;
          v254 = ((v241 - (v242 << 16) + 1) << v252) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v251 << v252;
          if ((v253 & 0x8000) == 0)
            goto LABEL_335;
          v255 = v253;
          v256 = *(_QWORD *)(a3 + 32);
          v257 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v257 >= v256)
          {
            v261 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_333;
          }
          v258 = 8 - v253;
          if (v258 >= 7)
            v259 = 7;
          else
            v259 = 8 - v253;
          v260 = ((v259 ^ 0xFu) - v255) >> 3;
          if (v260 >= ~(unint64_t)v257 + v256)
            v260 = ~(unint64_t)v257 + v256;
          if (v260 >= 0xF)
          {
            v377 = v260 + 1;
            v378 = (v260 + 1) & 0x3FFFFFF0;
            v261 = &v257->u8[v378];
            v379 = 0uLL;
            v380 = (int16x8_t)(unsigned __int16)v255;
            v381 = (int8x16_t)v254;
            v382 = vdupq_n_s32(v258);
            v383 = (uint32x4_t)vaddq_s32(v382, (int32x4_t)xmmword_208F3A6C0);
            v384 = (uint32x4_t)vaddq_s32(v382, (int32x4_t)xmmword_208F3A6D0);
            v385 = (uint32x4_t)vaddq_s32(v382, (int32x4_t)xmmword_208F3A6A0);
            v386 = (uint32x4_t)vaddq_s32(v382, (int32x4_t)xmmword_208F3A6B0);
            v387.i64[0] = 0x8000800080008;
            v387.i64[1] = 0x8000800080008;
            v388.i64[0] = 0x7F0000007FLL;
            v388.i64[1] = 0x7F0000007FLL;
            v389 = v378;
            v390 = 0uLL;
            v391 = 0uLL;
            v392 = 0uLL;
            do
            {
              v393 = *v257++;
              v391 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v393, (int8x16_t)xmmword_208F04F30), v384), v391);
              v390 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v393, (int8x16_t)xmmword_208F04F40), v385), v390);
              v381 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v393, (int8x16_t)xmmword_208F04F50), v386), v381);
              v392 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v393, (int8x16_t)xmmword_208F04F20), v383), v392);
              v380 = vaddq_s16(v380, v387);
              v379 = vaddq_s16(v379, v387);
              v386 = (uint32x4_t)vaddq_s32((int32x4_t)v386, v388);
              v385 = (uint32x4_t)vaddq_s32((int32x4_t)v385, v388);
              v384 = (uint32x4_t)vaddq_s32((int32x4_t)v384, v388);
              v383 = (uint32x4_t)vaddq_s32((int32x4_t)v383, v388);
              v389 -= 16;
            }
            while (v389);
            v394 = (unint64_t)v257 < v256;
            v395 = veorq_s8(veorq_s8(v381, v391), veorq_s8(v390, v392));
            *(int8x8_t *)v395.i8 = veor_s8(*(int8x8_t *)v395.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v395, v395, 8uLL));
            v254 = v395.i32[0] ^ v395.i32[1];
            LOWORD(v255) = vaddvq_s16(vaddq_s16(v380, v379));
            if (v377 == v378)
              goto LABEL_332;
            v258 -= 8 * v378;
          }
          else
          {
            v261 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v396 = *v261++;
            v254 ^= v396 << v258;
            LOWORD(v255) = v255 + 8;
            v394 = (unint64_t)v261 < v256;
            v213 = v258 >= 8;
            v258 -= 8;
          }
          while (v213 && (unint64_t)v261 < v256);
LABEL_332:
          if (v394)
          {
LABEL_334:
            *(_DWORD *)(a3 + 48) = v254;
            *(_WORD *)(a3 + 54) = v255;
            *(_QWORD *)(a3 + 40) = v261;
LABEL_335:
            if (!*(_BYTE *)(a3 + 56))
              goto LABEL_490;
            v397 = (_WORD *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 976);
            v398 = (unsigned __int16)*v397;
            v399 = (v398 >> 4) + 5;
            v400 = *v240;
            if ((uint64_t)v245 <= 0)
            {
              *v240 = v400 - (v400 >> v399);
              v401 = *(unsigned __int16 *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 968);
            }
            else
            {
              *v240 = v400 + ((int)(0x8000 - v400) >> v399);
              v401 = *(unsigned __int16 *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 968);
              if (v245 > 0x100000000000000)
              {
                *(_WORD *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 968) = v401
                                                                                            + ((int)(0x8000 - v401) >> v399);
                v402 = *(unsigned __int16 *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 970);
                if (v245 > 0x200000000000000)
                {
                  v403 = v402 + ((int)(0x8000 - v402) >> v399);
                  v404 = (_WORD *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 972);
                  v405 = (unsigned __int16)*v404;
                  *(_WORD *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 970) = v403;
                  v406 = 0x300000000000000;
                  goto LABEL_340;
                }
                goto LABEL_344;
              }
            }
            *(_WORD *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 968) = v401 - (v401 >> v399);
            v402 = *(unsigned __int16 *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 970);
LABEL_344:
            v408 = v402 - (v402 >> v399);
            v404 = (_WORD *)(v163 + 24 * (a4 != 0) + 12 * (v235 > 9) + 972);
            v405 = (unsigned __int16)*v404;
            goto LABEL_499;
          }
LABEL_333:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v255 + 0x4000;
          LOWORD(v255) = 0x4000;
          goto LABEL_334;
        case 1:
          v281 = (unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1014);
          v282 = *(_DWORD *)(a3 + 48);
          v283 = *(unsigned __int16 *)(a3 + 52);
          v284 = v283 >> 8;
          v285 = 24;
          v286 = 0xFF00000000000000;
          v246 = -1;
          v287 = v281;
          do
          {
            v288 = v283;
            v289 = *v287++;
            v290 = v284 * (v289 >> 6);
            v285 -= 4;
            v283 = v285 + (v290 >> 1);
            v286 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v282) < v283);
          v291 = v288 - (v290 >> 1) - v285;
          v292 = (__clz(v291) ^ 0xFFFFFFE0) + 16;
          v293 = *(_WORD *)(a3 + 54) - v292;
          *(_WORD *)(a3 + 54) = v293;
          v254 = ((v282 - (v283 << 16) + 1) << v292) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v291 << v292;
          if ((v293 & 0x8000) == 0)
            goto LABEL_385;
          v294 = v293;
          v295 = *(_QWORD *)(a3 + 32);
          v296 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v296 >= v295)
          {
            v300 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_383;
          }
          v297 = 8 - v293;
          if (v297 >= 7)
            v298 = 7;
          else
            v298 = 8 - v293;
          v299 = ((v298 ^ 0xFu) - v294) >> 3;
          if (v299 >= ~(unint64_t)v296 + v295)
            v299 = ~(unint64_t)v296 + v295;
          if (v299 >= 0xF)
          {
            v439 = v299 + 1;
            v440 = (v299 + 1) & 0x3FFFFFF0;
            v300 = &v296->u8[v440];
            v441 = 0uLL;
            v442 = (int16x8_t)(unsigned __int16)v294;
            v443 = (int8x16_t)v254;
            v444 = vdupq_n_s32(v297);
            v445 = (uint32x4_t)vaddq_s32(v444, (int32x4_t)xmmword_208F3A6C0);
            v446 = (uint32x4_t)vaddq_s32(v444, (int32x4_t)xmmword_208F3A6D0);
            v447 = (uint32x4_t)vaddq_s32(v444, (int32x4_t)xmmword_208F3A6A0);
            v448 = (uint32x4_t)vaddq_s32(v444, (int32x4_t)xmmword_208F3A6B0);
            v449.i64[0] = 0x8000800080008;
            v449.i64[1] = 0x8000800080008;
            v450.i64[0] = 0x7F0000007FLL;
            v450.i64[1] = 0x7F0000007FLL;
            v451 = v440;
            v452 = 0uLL;
            v453 = 0uLL;
            v454 = 0uLL;
            do
            {
              v455 = *v296++;
              v453 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_208F04F30), v446), v453);
              v452 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_208F04F40), v447), v452);
              v443 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_208F04F50), v448), v443);
              v454 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_208F04F20), v445), v454);
              v442 = vaddq_s16(v442, v449);
              v441 = vaddq_s16(v441, v449);
              v448 = (uint32x4_t)vaddq_s32((int32x4_t)v448, v450);
              v447 = (uint32x4_t)vaddq_s32((int32x4_t)v447, v450);
              v446 = (uint32x4_t)vaddq_s32((int32x4_t)v446, v450);
              v445 = (uint32x4_t)vaddq_s32((int32x4_t)v445, v450);
              v451 -= 16;
            }
            while (v451);
            v456 = (unint64_t)v296 < v295;
            v457 = veorq_s8(veorq_s8(v443, v453), veorq_s8(v452, v454));
            *(int8x8_t *)v457.i8 = veor_s8(*(int8x8_t *)v457.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v457, v457, 8uLL));
            v254 = v457.i32[0] ^ v457.i32[1];
            LOWORD(v294) = vaddvq_s16(vaddq_s16(v442, v441));
            if (v439 == v440)
              goto LABEL_382;
            v297 -= 8 * v440;
          }
          else
          {
            v300 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v458 = *v300++;
            v254 ^= v458 << v297;
            LOWORD(v294) = v294 + 8;
            v456 = (unint64_t)v300 < v295;
            v213 = v297 >= 8;
            v297 -= 8;
          }
          while (v213 && (unint64_t)v300 < v295);
LABEL_382:
          if (v456)
            goto LABEL_384;
LABEL_383:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v294 + 0x4000;
          LOWORD(v294) = 0x4000;
LABEL_384:
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 54) = v294;
          *(_QWORD *)(a3 + 40) = v300;
LABEL_385:
          if (!*(_BYTE *)(a3 + 56))
            goto LABEL_490;
          v397 = (_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1026);
          v398 = (unsigned __int16)*v397;
          v399 = (v398 >> 4) + 5;
          v459 = *v281;
          if ((uint64_t)v286 <= 0)
          {
            *v281 = v459 - (v459 >> v399);
            v460 = *(unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1016);
          }
          else
          {
            *v281 = v459 + ((int)(0x8000 - v459) >> v399);
            v460 = *(unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1016);
            if (v286 > 0x100000000000000)
            {
              *(_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1016) = v460
                                                                                           + ((int)(0x8000 - v460) >> v399);
              v461 = *(unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1018);
              if (v286 > 0x200000000000000)
              {
                *(_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1018) = v461
                                                                                             + ((int)(0x8000 - v461) >> v399);
                v462 = *(unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1020);
                if (v286 > 0x300000000000000)
                {
                  v463 = v462 + ((int)(0x8000 - v462) >> v399);
                  v404 = (_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1022);
                  v405 = (unsigned __int16)*v404;
                  *(_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1020) = v463;
                  v464 = 0x400000000000000;
                  goto LABEL_487;
                }
LABEL_394:
                v408 = v462 - (v462 >> v399);
                v404 = (_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1022);
                v405 = (unsigned __int16)*v404;
LABEL_499:
                *(v404 - 1) = v408;
                goto LABEL_500;
              }
LABEL_393:
              *(_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1018) = v461 - (v461 >> v399);
              v462 = *(unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1020);
              goto LABEL_394;
            }
          }
          *(_WORD *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1016) = v460 - (v460 >> v399);
          v461 = *(unsigned __int16 *)(v163 + 28 * (a4 != 0) + 14 * (v235 > 9) + 1018);
          goto LABEL_393;
        case 2:
          v301 = (unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1070);
          v302 = *(_DWORD *)(a3 + 48);
          v303 = *(unsigned __int16 *)(a3 + 52);
          v304 = v303 >> 8;
          v305 = 28;
          v245 = 0xFF00000000000000;
          v246 = -1;
          v306 = v301;
          do
          {
            v307 = v303;
            v308 = *v306++;
            v309 = v304 * (v308 >> 6);
            v305 -= 4;
            v303 = v305 + (v309 >> 1);
            v245 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v302) < v303);
          v310 = v307 - (v309 >> 1) - v305;
          v311 = (__clz(v310) ^ 0xFFFFFFE0) + 16;
          v312 = *(_WORD *)(a3 + 54) - v311;
          *(_WORD *)(a3 + 54) = v312;
          v254 = ((v302 - (v303 << 16) + 1) << v311) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v310 << v311;
          if ((v312 & 0x8000) == 0)
            goto LABEL_405;
          v313 = v312;
          v314 = *(_QWORD *)(a3 + 32);
          v315 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v315 >= v314)
          {
            v319 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_403;
          }
          v316 = 8 - v312;
          if (v316 >= 7)
            v317 = 7;
          else
            v317 = 8 - v312;
          v318 = ((v317 ^ 0xFu) - v313) >> 3;
          if (v318 >= ~(unint64_t)v315 + v314)
            v318 = ~(unint64_t)v315 + v314;
          if (v318 >= 0xF)
          {
            v465 = v318 + 1;
            v466 = (v318 + 1) & 0x3FFFFFF0;
            v319 = &v315->u8[v466];
            v467 = 0uLL;
            v468 = (int16x8_t)(unsigned __int16)v313;
            v469 = (int8x16_t)v254;
            v470 = vdupq_n_s32(v316);
            v471 = (uint32x4_t)vaddq_s32(v470, (int32x4_t)xmmword_208F3A6C0);
            v472 = (uint32x4_t)vaddq_s32(v470, (int32x4_t)xmmword_208F3A6D0);
            v473 = (uint32x4_t)vaddq_s32(v470, (int32x4_t)xmmword_208F3A6A0);
            v474 = (uint32x4_t)vaddq_s32(v470, (int32x4_t)xmmword_208F3A6B0);
            v475.i64[0] = 0x8000800080008;
            v475.i64[1] = 0x8000800080008;
            v476.i64[0] = 0x7F0000007FLL;
            v476.i64[1] = 0x7F0000007FLL;
            v477 = v466;
            v478 = 0uLL;
            v479 = 0uLL;
            v480 = 0uLL;
            do
            {
              v481 = *v315++;
              v479 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v481, (int8x16_t)xmmword_208F04F30), v472), v479);
              v478 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v481, (int8x16_t)xmmword_208F04F40), v473), v478);
              v469 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v481, (int8x16_t)xmmword_208F04F50), v474), v469);
              v480 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v481, (int8x16_t)xmmword_208F04F20), v471), v480);
              v468 = vaddq_s16(v468, v475);
              v467 = vaddq_s16(v467, v475);
              v474 = (uint32x4_t)vaddq_s32((int32x4_t)v474, v476);
              v473 = (uint32x4_t)vaddq_s32((int32x4_t)v473, v476);
              v472 = (uint32x4_t)vaddq_s32((int32x4_t)v472, v476);
              v471 = (uint32x4_t)vaddq_s32((int32x4_t)v471, v476);
              v477 -= 16;
            }
            while (v477);
            v482 = (unint64_t)v315 < v314;
            v483 = veorq_s8(veorq_s8(v469, v479), veorq_s8(v478, v480));
            *(int8x8_t *)v483.i8 = veor_s8(*(int8x8_t *)v483.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v483, v483, 8uLL));
            v254 = v483.i32[0] ^ v483.i32[1];
            LOWORD(v313) = vaddvq_s16(vaddq_s16(v468, v467));
            if (v465 == v466)
              goto LABEL_402;
            v316 -= 8 * v466;
          }
          else
          {
            v319 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v484 = *v319++;
            v254 ^= v484 << v316;
            LOWORD(v313) = v313 + 8;
            v482 = (unint64_t)v319 < v314;
            v213 = v316 >= 8;
            v316 -= 8;
          }
          while (v213 && (unint64_t)v319 < v314);
LABEL_402:
          if (v482)
            goto LABEL_404;
LABEL_403:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v313 + 0x4000;
          LOWORD(v313) = 0x4000;
LABEL_404:
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 54) = v313;
          *(_QWORD *)(a3 + 40) = v319;
LABEL_405:
          if (!*(_BYTE *)(a3 + 56))
            goto LABEL_490;
          v397 = (_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1084);
          v398 = (unsigned __int16)*v397;
          v399 = (v398 >> 4) + 5;
          v485 = *v301;
          if ((uint64_t)v245 <= 0)
          {
            *v301 = v485 - (v485 >> v399);
            v486 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1072);
          }
          else
          {
            *v301 = v485 + ((int)(0x8000 - v485) >> v399);
            v486 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1072);
            if (v245 > 0x100000000000000)
            {
              *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1072) = v486
                                                                                           + ((int)(0x8000 - v486) >> v399);
              v487 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1074);
              if (v245 > 0x200000000000000)
              {
                *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1074) = v487
                                                                                             + ((int)(0x8000 - v487) >> v399);
                v488 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1076);
                if (v245 > 0x300000000000000)
                {
                  *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1076) = v488
                                                                                               + ((int)(0x8000 - v488) >> v399);
                  v489 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1078);
                  if (v245 > 0x400000000000000)
                  {
                    v490 = v489 + ((int)(0x8000 - v489) >> v399);
                    v404 = (_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1080);
                    v405 = (unsigned __int16)*v404;
                    *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1078) = v490;
                    v406 = 0x500000000000000;
                    goto LABEL_340;
                  }
LABEL_416:
                  v408 = v489 - (v489 >> v399);
                  v404 = (_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1080);
                  v405 = (unsigned __int16)*v404;
                  goto LABEL_499;
                }
LABEL_415:
                *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1076) = v488 - (v488 >> v399);
                v489 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1078);
                goto LABEL_416;
              }
LABEL_414:
              *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1074) = v487 - (v487 >> v399);
              v488 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1076);
              goto LABEL_415;
            }
          }
          *(_WORD *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1072) = v486 - (v486 >> v399);
          v487 = *(unsigned __int16 *)(v163 + 32 * (a4 != 0) + 16 * (v235 > 9) + 1074);
          goto LABEL_414;
        case 3:
          v320 = (unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1134);
          v321 = *(_DWORD *)(a3 + 48);
          v322 = *(unsigned __int16 *)(a3 + 52);
          v323 = v322 >> 8;
          v324 = 32;
          v286 = 0xFF00000000000000;
          v246 = -1;
          v325 = v320;
          do
          {
            v326 = v322;
            v327 = *v325++;
            v328 = v323 * (v327 >> 6);
            v324 -= 4;
            v322 = v324 + (v328 >> 1);
            v286 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v321) < v322);
          v329 = v326 - (v328 >> 1) - v324;
          v330 = (__clz(v329) ^ 0xFFFFFFE0) + 16;
          v331 = *(_WORD *)(a3 + 54) - v330;
          *(_WORD *)(a3 + 54) = v331;
          v254 = ((v321 - (v322 << 16) + 1) << v330) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v329 << v330;
          if ((v331 & 0x8000) == 0)
            goto LABEL_427;
          v332 = v331;
          v333 = *(_QWORD *)(a3 + 32);
          v334 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v334 >= v333)
          {
            v338 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_425;
          }
          v335 = 8 - v331;
          if (v335 >= 7)
            v336 = 7;
          else
            v336 = 8 - v331;
          v337 = ((v336 ^ 0xFu) - v332) >> 3;
          if (v337 >= ~(unint64_t)v334 + v333)
            v337 = ~(unint64_t)v334 + v333;
          if (v337 >= 0xF)
          {
            v491 = v337 + 1;
            v492 = (v337 + 1) & 0x3FFFFFF0;
            v338 = &v334->u8[v492];
            v493 = 0uLL;
            v494 = (int16x8_t)(unsigned __int16)v332;
            v495 = (int8x16_t)v254;
            v496 = vdupq_n_s32(v335);
            v497 = (uint32x4_t)vaddq_s32(v496, (int32x4_t)xmmword_208F3A6C0);
            v498 = (uint32x4_t)vaddq_s32(v496, (int32x4_t)xmmword_208F3A6D0);
            v499 = (uint32x4_t)vaddq_s32(v496, (int32x4_t)xmmword_208F3A6A0);
            v500 = (uint32x4_t)vaddq_s32(v496, (int32x4_t)xmmword_208F3A6B0);
            v501.i64[0] = 0x8000800080008;
            v501.i64[1] = 0x8000800080008;
            v502.i64[0] = 0x7F0000007FLL;
            v502.i64[1] = 0x7F0000007FLL;
            v503 = v492;
            v504 = 0uLL;
            v505 = 0uLL;
            v506 = 0uLL;
            do
            {
              v507 = *v334++;
              v505 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v507, (int8x16_t)xmmword_208F04F30), v498), v505);
              v504 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v507, (int8x16_t)xmmword_208F04F40), v499), v504);
              v495 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v507, (int8x16_t)xmmword_208F04F50), v500), v495);
              v506 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v507, (int8x16_t)xmmword_208F04F20), v497), v506);
              v494 = vaddq_s16(v494, v501);
              v493 = vaddq_s16(v493, v501);
              v500 = (uint32x4_t)vaddq_s32((int32x4_t)v500, v502);
              v499 = (uint32x4_t)vaddq_s32((int32x4_t)v499, v502);
              v498 = (uint32x4_t)vaddq_s32((int32x4_t)v498, v502);
              v497 = (uint32x4_t)vaddq_s32((int32x4_t)v497, v502);
              v503 -= 16;
            }
            while (v503);
            v508 = (unint64_t)v334 < v333;
            v509 = veorq_s8(veorq_s8(v495, v505), veorq_s8(v504, v506));
            *(int8x8_t *)v509.i8 = veor_s8(*(int8x8_t *)v509.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v509, v509, 8uLL));
            v254 = v509.i32[0] ^ v509.i32[1];
            LOWORD(v332) = vaddvq_s16(vaddq_s16(v494, v493));
            if (v491 == v492)
              goto LABEL_424;
            v335 -= 8 * v492;
          }
          else
          {
            v338 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v510 = *v338++;
            v254 ^= v510 << v335;
            LOWORD(v332) = v332 + 8;
            v508 = (unint64_t)v338 < v333;
            v213 = v335 >= 8;
            v335 -= 8;
          }
          while (v213 && (unint64_t)v338 < v333);
LABEL_424:
          if (v508)
            goto LABEL_426;
LABEL_425:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v332 + 0x4000;
          LOWORD(v332) = 0x4000;
LABEL_426:
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 54) = v332;
          *(_QWORD *)(a3 + 40) = v338;
LABEL_427:
          if (!*(_BYTE *)(a3 + 56))
            goto LABEL_490;
          v397 = (_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1150);
          v398 = (unsigned __int16)*v397;
          v399 = (v398 >> 4) + 5;
          v511 = *v320;
          if ((uint64_t)v286 <= 0)
          {
            *v320 = v511 - (v511 >> v399);
            v512 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1136);
          }
          else
          {
            *v320 = v511 + ((int)(0x8000 - v511) >> v399);
            v512 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1136);
            if (v286 > 0x100000000000000)
            {
              *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1136) = v512
                                                                                           + ((int)(0x8000 - v512) >> v399);
              v513 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1138);
              if (v286 > 0x200000000000000)
              {
                *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1138) = v513
                                                                                             + ((int)(0x8000 - v513) >> v399);
                v514 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1140);
                if (v286 > 0x300000000000000)
                {
                  *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1140) = v514
                                                                                               + ((int)(0x8000 - v514) >> v399);
                  v515 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1142);
                  if (v286 > 0x400000000000000)
                  {
                    *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1142) = v515
                                                                                                 + ((int)(0x8000 - v515) >> v399);
                    v516 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1144);
                    if (v286 > 0x500000000000000)
                    {
                      v517 = v516 + ((int)(0x8000 - v516) >> v399);
                      v404 = (_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1146);
                      v405 = (unsigned __int16)*v404;
                      *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1144) = v517;
                      v464 = 0x600000000000000;
                      goto LABEL_487;
                    }
LABEL_440:
                    v408 = v516 - (v516 >> v399);
                    v404 = (_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1146);
                    v405 = (unsigned __int16)*v404;
                    goto LABEL_499;
                  }
LABEL_439:
                  *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1142) = v515 - (v515 >> v399);
                  v516 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1144);
                  goto LABEL_440;
                }
LABEL_438:
                *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1140) = v514 - (v514 >> v399);
                v515 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1142);
                goto LABEL_439;
              }
LABEL_437:
              *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1138) = v513 - (v513 >> v399);
              v514 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1140);
              goto LABEL_438;
            }
          }
          *(_WORD *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1136) = v512 - (v512 >> v399);
          v513 = *(unsigned __int16 *)(v163 + 36 * (a4 != 0) + 18 * (v235 > 9) + 1138);
          goto LABEL_437;
        case 4:
          v339 = (unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1206);
          v340 = *(_DWORD *)(a3 + 48);
          v341 = *(unsigned __int16 *)(a3 + 52);
          v342 = v341 >> 8;
          v343 = 36;
          v245 = 0xFF00000000000000;
          v246 = -1;
          v344 = v339;
          do
          {
            v345 = v341;
            v346 = *v344++;
            v347 = v342 * (v346 >> 6);
            v343 -= 4;
            v341 = v343 + (v347 >> 1);
            v245 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v340) < v341);
          v348 = v345 - (v347 >> 1) - v343;
          v349 = (__clz(v348) ^ 0xFFFFFFE0) + 16;
          v350 = *(_WORD *)(a3 + 54) - v349;
          *(_WORD *)(a3 + 54) = v350;
          v254 = ((v340 - (v341 << 16) + 1) << v349) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v348 << v349;
          if ((v350 & 0x8000) == 0)
            goto LABEL_451;
          v351 = v350;
          v352 = *(_QWORD *)(a3 + 32);
          v353 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v353 >= v352)
          {
            v357 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_449;
          }
          v354 = 8 - v350;
          if (v354 >= 7)
            v355 = 7;
          else
            v355 = 8 - v350;
          v356 = ((v355 ^ 0xFu) - v351) >> 3;
          if (v356 >= ~(unint64_t)v353 + v352)
            v356 = ~(unint64_t)v353 + v352;
          if (v356 >= 0xF)
          {
            v518 = v356 + 1;
            v519 = (v356 + 1) & 0x3FFFFFF0;
            v357 = &v353->u8[v519];
            v520 = 0uLL;
            v521 = (int16x8_t)(unsigned __int16)v351;
            v522 = (int8x16_t)v254;
            v523 = vdupq_n_s32(v354);
            v524 = (uint32x4_t)vaddq_s32(v523, (int32x4_t)xmmword_208F3A6C0);
            v525 = (uint32x4_t)vaddq_s32(v523, (int32x4_t)xmmword_208F3A6D0);
            v526 = (uint32x4_t)vaddq_s32(v523, (int32x4_t)xmmword_208F3A6A0);
            v527 = (uint32x4_t)vaddq_s32(v523, (int32x4_t)xmmword_208F3A6B0);
            v528.i64[0] = 0x8000800080008;
            v528.i64[1] = 0x8000800080008;
            v529.i64[0] = 0x7F0000007FLL;
            v529.i64[1] = 0x7F0000007FLL;
            v530 = v519;
            v531 = 0uLL;
            v532 = 0uLL;
            v533 = 0uLL;
            do
            {
              v534 = *v353++;
              v532 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v534, (int8x16_t)xmmword_208F04F30), v525), v532);
              v531 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v534, (int8x16_t)xmmword_208F04F40), v526), v531);
              v522 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v534, (int8x16_t)xmmword_208F04F50), v527), v522);
              v533 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v534, (int8x16_t)xmmword_208F04F20), v524), v533);
              v521 = vaddq_s16(v521, v528);
              v520 = vaddq_s16(v520, v528);
              v527 = (uint32x4_t)vaddq_s32((int32x4_t)v527, v529);
              v526 = (uint32x4_t)vaddq_s32((int32x4_t)v526, v529);
              v525 = (uint32x4_t)vaddq_s32((int32x4_t)v525, v529);
              v524 = (uint32x4_t)vaddq_s32((int32x4_t)v524, v529);
              v530 -= 16;
            }
            while (v530);
            v535 = (unint64_t)v353 < v352;
            v536 = veorq_s8(veorq_s8(v522, v532), veorq_s8(v531, v533));
            *(int8x8_t *)v536.i8 = veor_s8(*(int8x8_t *)v536.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v536, v536, 8uLL));
            v254 = v536.i32[0] ^ v536.i32[1];
            LOWORD(v351) = vaddvq_s16(vaddq_s16(v521, v520));
            if (v518 == v519)
              goto LABEL_448;
            v354 -= 8 * v519;
          }
          else
          {
            v357 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v537 = *v357++;
            v254 ^= v537 << v354;
            LOWORD(v351) = v351 + 8;
            v535 = (unint64_t)v357 < v352;
            v213 = v354 >= 8;
            v354 -= 8;
          }
          while (v213 && (unint64_t)v357 < v352);
LABEL_448:
          if (v535)
            goto LABEL_450;
LABEL_449:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v351 + 0x4000;
          LOWORD(v351) = 0x4000;
LABEL_450:
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 54) = v351;
          *(_QWORD *)(a3 + 40) = v357;
LABEL_451:
          if (!*(_BYTE *)(a3 + 56))
            goto LABEL_490;
          v397 = (_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1224);
          v398 = (unsigned __int16)*v397;
          v399 = (v398 >> 4) + 5;
          v538 = *v339;
          if ((uint64_t)v245 <= 0)
          {
            *v339 = v538 - (v538 >> v399);
            v539 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1208);
          }
          else
          {
            *v339 = v538 + ((int)(0x8000 - v538) >> v399);
            v539 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1208);
            if (v245 > 0x100000000000000)
            {
              *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1208) = v539
                                                                                           + ((int)(0x8000 - v539) >> v399);
              v540 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1210);
              if (v245 > 0x200000000000000)
              {
                *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1210) = v540
                                                                                             + ((int)(0x8000 - v540) >> v399);
                v541 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1212);
                if (v245 > 0x300000000000000)
                {
                  *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1212) = v541
                                                                                               + ((int)(0x8000 - v541) >> v399);
                  v542 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1214);
                  if (v245 > 0x400000000000000)
                  {
                    *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1214) = v542
                                                                                                 + ((int)(0x8000 - v542) >> v399);
                    v543 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1216);
                    if (v245 > 0x500000000000000)
                    {
                      *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1216) = v543 + ((int)(0x8000 - v543) >> v399);
                      v544 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1218);
                      if (v245 > 0x600000000000000)
                      {
                        v545 = v544 + ((int)(0x8000 - v544) >> v399);
                        v404 = (_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1220);
                        v405 = (unsigned __int16)*v404;
                        *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1218) = v545;
                        v406 = 0x700000000000000;
                        goto LABEL_340;
                      }
LABEL_466:
                      v408 = v544 - (v544 >> v399);
                      v404 = (_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1220);
                      v405 = (unsigned __int16)*v404;
                      goto LABEL_499;
                    }
LABEL_465:
                    *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1216) = v543 - (v543 >> v399);
                    v544 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1218);
                    goto LABEL_466;
                  }
LABEL_464:
                  *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1214) = v542 - (v542 >> v399);
                  v543 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1216);
                  goto LABEL_465;
                }
LABEL_463:
                *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1212) = v541 - (v541 >> v399);
                v542 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1214);
                goto LABEL_464;
              }
LABEL_462:
              *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1210) = v540 - (v540 >> v399);
              v541 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1212);
              goto LABEL_463;
            }
          }
          *(_WORD *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1208) = v539 - (v539 >> v399);
          v540 = *(unsigned __int16 *)(v163 + 40 * (a4 != 0) + 20 * (v235 > 9) + 1210);
          goto LABEL_462;
        case 5:
          v358 = (unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1286);
          v359 = *(_DWORD *)(a3 + 48);
          v360 = *(unsigned __int16 *)(a3 + 52);
          v361 = v360 >> 8;
          v362 = 40;
          v286 = 0xFF00000000000000;
          v246 = -1;
          v363 = v358;
          do
          {
            v364 = v360;
            v365 = *v363++;
            v366 = v361 * (v365 >> 6);
            v362 -= 4;
            v360 = v362 + (v366 >> 1);
            v286 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v359) < v360);
          v367 = v364 - (v366 >> 1) - v362;
          v368 = (__clz(v367) ^ 0xFFFFFFE0) + 16;
          v369 = *(_WORD *)(a3 + 54) - v368;
          *(_WORD *)(a3 + 54) = v369;
          v254 = ((v359 - (v360 << 16) + 1) << v368) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v367 << v368;
          if ((v369 & 0x8000) == 0)
            goto LABEL_477;
          v370 = v369;
          v371 = *(_QWORD *)(a3 + 32);
          v372 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v372 >= v371)
          {
            v376 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_475;
          }
          v373 = 8 - v369;
          if (v373 >= 7)
            v374 = 7;
          else
            v374 = 8 - v369;
          v375 = ((v374 ^ 0xFu) - v370) >> 3;
          if (v375 >= ~(unint64_t)v372 + v371)
            v375 = ~(unint64_t)v372 + v371;
          if (v375 >= 0xF)
          {
            v546 = v375 + 1;
            v547 = (v375 + 1) & 0x3FFFFFF0;
            v376 = &v372->u8[v547];
            v548 = 0uLL;
            v549 = (int16x8_t)(unsigned __int16)v370;
            v550 = (int8x16_t)v254;
            v551 = vdupq_n_s32(v373);
            v552 = (uint32x4_t)vaddq_s32(v551, (int32x4_t)xmmword_208F3A6C0);
            v553 = (uint32x4_t)vaddq_s32(v551, (int32x4_t)xmmword_208F3A6D0);
            v554 = (uint32x4_t)vaddq_s32(v551, (int32x4_t)xmmword_208F3A6A0);
            v555 = (uint32x4_t)vaddq_s32(v551, (int32x4_t)xmmword_208F3A6B0);
            v556.i64[0] = 0x8000800080008;
            v556.i64[1] = 0x8000800080008;
            v557.i64[0] = 0x7F0000007FLL;
            v557.i64[1] = 0x7F0000007FLL;
            v558 = v547;
            v559 = 0uLL;
            v560 = 0uLL;
            v561 = 0uLL;
            do
            {
              v562 = *v372++;
              v560 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v562, (int8x16_t)xmmword_208F04F30), v553), v560);
              v559 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v562, (int8x16_t)xmmword_208F04F40), v554), v559);
              v550 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v562, (int8x16_t)xmmword_208F04F50), v555), v550);
              v561 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v562, (int8x16_t)xmmword_208F04F20), v552), v561);
              v549 = vaddq_s16(v549, v556);
              v548 = vaddq_s16(v548, v556);
              v555 = (uint32x4_t)vaddq_s32((int32x4_t)v555, v557);
              v554 = (uint32x4_t)vaddq_s32((int32x4_t)v554, v557);
              v553 = (uint32x4_t)vaddq_s32((int32x4_t)v553, v557);
              v552 = (uint32x4_t)vaddq_s32((int32x4_t)v552, v557);
              v558 -= 16;
            }
            while (v558);
            v563 = (unint64_t)v372 < v371;
            v564 = veorq_s8(veorq_s8(v550, v560), veorq_s8(v559, v561));
            *(int8x8_t *)v564.i8 = veor_s8(*(int8x8_t *)v564.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v564, v564, 8uLL));
            v254 = v564.i32[0] ^ v564.i32[1];
            LOWORD(v370) = vaddvq_s16(vaddq_s16(v549, v548));
            if (v546 == v547)
              goto LABEL_474;
            v373 -= 8 * v547;
          }
          else
          {
            v376 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v565 = *v376++;
            v254 ^= v565 << v373;
            LOWORD(v370) = v370 + 8;
            v563 = (unint64_t)v376 < v371;
            v213 = v373 >= 8;
            v373 -= 8;
          }
          while (v213 && (unint64_t)v376 < v371);
LABEL_474:
          if (v563)
            goto LABEL_476;
LABEL_475:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v370 + 0x4000;
          LOWORD(v370) = 0x4000;
LABEL_476:
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 54) = v370;
          *(_QWORD *)(a3 + 40) = v376;
LABEL_477:
          if (!*(_BYTE *)(a3 + 56))
            goto LABEL_490;
          v397 = (_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1306);
          v398 = (unsigned __int16)*v397;
          v399 = (v398 >> 4) + 5;
          v566 = *v358;
          if ((uint64_t)v286 <= 0)
          {
            *v358 = v566 - (v566 >> v399);
            v567 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1288);
          }
          else
          {
            *v358 = v566 + ((int)(0x8000 - v566) >> v399);
            v567 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1288);
            if (v286 > 0x100000000000000)
            {
              *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1288) = v567
                                                                                           + ((int)(0x8000 - v567) >> v399);
              v568 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1290);
              if (v286 > 0x200000000000000)
              {
                *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1290) = v568
                                                                                             + ((int)(0x8000 - v568) >> v399);
                v569 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1292);
                if (v286 > 0x300000000000000)
                {
                  *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1292) = v569
                                                                                               + ((int)(0x8000 - v569) >> v399);
                  v570 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1294);
                  if (v286 > 0x400000000000000)
                  {
                    *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1294) = v570
                                                                                                 + ((int)(0x8000 - v570) >> v399);
                    v571 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1296);
                    if (v286 > 0x500000000000000)
                    {
                      *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1296) = v571 + ((int)(0x8000 - v571) >> v399);
                      v572 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1298);
                      if (v286 > 0x600000000000000)
                      {
                        *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1298) = v572 + ((int)(0x8000 - v572) >> v399);
                        v573 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1300);
                        if (v286 > 0x700000000000000)
                        {
                          v574 = v573 + ((int)(0x8000 - v573) >> v399);
                          v404 = (_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1302);
                          v405 = (unsigned __int16)*v404;
                          *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1300) = v574;
                          v464 = 0x800000000000000;
LABEL_487:
                          if (v286 > v464)
                          {
                            v407 = 0x8000 - v405;
                            goto LABEL_489;
                          }
                          goto LABEL_500;
                        }
LABEL_498:
                        v408 = v573 - (v573 >> v399);
                        v404 = (_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1302);
                        v405 = (unsigned __int16)*v404;
                        goto LABEL_499;
                      }
LABEL_497:
                      *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1298) = v572 - (v572 >> v399);
                      v573 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1300);
                      goto LABEL_498;
                    }
LABEL_496:
                    *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1296) = v571 - (v571 >> v399);
                    v572 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1298);
                    goto LABEL_497;
                  }
LABEL_495:
                  *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1294) = v570 - (v570 >> v399);
                  v571 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1296);
                  goto LABEL_496;
                }
LABEL_494:
                *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1292) = v569 - (v569 >> v399);
                v570 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1294);
                goto LABEL_495;
              }
LABEL_493:
              *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1290) = v568 - (v568 >> v399);
              v569 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1292);
              goto LABEL_494;
            }
          }
          *(_WORD *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1288) = v567 - (v567 >> v399);
          v568 = *(unsigned __int16 *)(v163 + 44 * (a4 != 0) + 22 * (v235 > 9) + 1290);
          goto LABEL_493;
        default:
          v262 = (unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1374);
          v263 = *(_DWORD *)(a3 + 48);
          v264 = *(unsigned __int16 *)(a3 + 52);
          v265 = v264 >> 8;
          v266 = 44;
          v245 = 0xFF00000000000000;
          v246 = -1;
          v267 = v262;
          do
          {
            v268 = v264;
            v269 = *v267++;
            v270 = v265 * (v269 >> 6);
            v266 -= 4;
            v264 = v266 + (v270 >> 1);
            v245 += 0x100000000000000;
            ++v246;
          }
          while (HIWORD(v263) < v264);
          v271 = v268 - (v270 >> 1) - v266;
          v272 = (__clz(v271) ^ 0xFFFFFFE0) + 16;
          v273 = *(_WORD *)(a3 + 54) - v272;
          *(_WORD *)(a3 + 54) = v273;
          v254 = ((v263 - (v264 << 16) + 1) << v272) - 1;
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 52) = v271 << v272;
          if ((v273 & 0x8000) == 0)
            goto LABEL_355;
          v274 = v273;
          v275 = *(_QWORD *)(a3 + 32);
          v276 = *(int8x16_t **)(a3 + 40);
          if ((unint64_t)v276 >= v275)
          {
            v280 = *(unsigned __int8 **)(a3 + 40);
            goto LABEL_353;
          }
          v277 = 8 - v273;
          if (v277 >= 7)
            v278 = 7;
          else
            v278 = 8 - v273;
          v279 = ((v278 ^ 0xFu) - v274) >> 3;
          if (v279 >= ~(unint64_t)v276 + v275)
            v279 = ~(unint64_t)v276 + v275;
          if (v279 >= 0xF)
          {
            v409 = v279 + 1;
            v410 = (v279 + 1) & 0x3FFFFFF0;
            v280 = &v276->u8[v410];
            v411 = 0uLL;
            v412 = (int16x8_t)(unsigned __int16)v274;
            v413 = (int8x16_t)v254;
            v414 = vdupq_n_s32(v277);
            v415 = (uint32x4_t)vaddq_s32(v414, (int32x4_t)xmmword_208F3A6C0);
            v416 = (uint32x4_t)vaddq_s32(v414, (int32x4_t)xmmword_208F3A6D0);
            v417 = (uint32x4_t)vaddq_s32(v414, (int32x4_t)xmmword_208F3A6A0);
            v418 = (uint32x4_t)vaddq_s32(v414, (int32x4_t)xmmword_208F3A6B0);
            v419.i64[0] = 0x8000800080008;
            v419.i64[1] = 0x8000800080008;
            v420.i64[0] = 0x7F0000007FLL;
            v420.i64[1] = 0x7F0000007FLL;
            v421 = v410;
            v422 = 0uLL;
            v423 = 0uLL;
            v424 = 0uLL;
            do
            {
              v425 = *v276++;
              v423 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_208F04F30), v416), v423);
              v422 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_208F04F40), v417), v422);
              v413 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_208F04F50), v418), v413);
              v424 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_208F04F20), v415), v424);
              v412 = vaddq_s16(v412, v419);
              v411 = vaddq_s16(v411, v419);
              v418 = (uint32x4_t)vaddq_s32((int32x4_t)v418, v420);
              v417 = (uint32x4_t)vaddq_s32((int32x4_t)v417, v420);
              v416 = (uint32x4_t)vaddq_s32((int32x4_t)v416, v420);
              v415 = (uint32x4_t)vaddq_s32((int32x4_t)v415, v420);
              v421 -= 16;
            }
            while (v421);
            v426 = (unint64_t)v276 < v275;
            v427 = veorq_s8(veorq_s8(v413, v423), veorq_s8(v422, v424));
            *(int8x8_t *)v427.i8 = veor_s8(*(int8x8_t *)v427.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v427, v427, 8uLL));
            v254 = v427.i32[0] ^ v427.i32[1];
            LOWORD(v274) = vaddvq_s16(vaddq_s16(v412, v411));
            if (v409 == v410)
              goto LABEL_352;
            v277 -= 8 * v410;
          }
          else
          {
            v280 = *(unsigned __int8 **)(a3 + 40);
          }
          do
          {
            v428 = *v280++;
            v254 ^= v428 << v277;
            LOWORD(v274) = v274 + 8;
            v426 = (unint64_t)v280 < v275;
            v213 = v277 >= 8;
            v277 -= 8;
          }
          while (v213 && (unint64_t)v280 < v275);
LABEL_352:
          if (v426)
            goto LABEL_354;
LABEL_353:
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v274 + 0x4000;
          LOWORD(v274) = 0x4000;
LABEL_354:
          *(_DWORD *)(a3 + 48) = v254;
          *(_WORD *)(a3 + 54) = v274;
          *(_QWORD *)(a3 + 40) = v280;
LABEL_355:
          if (!*(_BYTE *)(a3 + 56))
          {
LABEL_490:
            v576 = 1;
            goto LABEL_504;
          }
          v397 = (_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1396);
          v398 = (unsigned __int16)*v397;
          v399 = (v398 >> 4) + 5;
          v429 = *v262;
          if ((uint64_t)v245 <= 0)
          {
            *v262 = v429 - (v429 >> v399);
            v430 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1376);
            goto LABEL_367;
          }
          *v262 = v429 + ((int)(0x8000 - v429) >> v399);
          v430 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1376);
          if (v245 <= 0x100000000000000)
          {
LABEL_367:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1376) = v430 - (v430 >> v399);
            v431 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1378);
            goto LABEL_368;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1376) = v430
                                                                                       + ((int)(0x8000 - v430) >> v399);
          v431 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1378);
          if (v245 <= 0x200000000000000)
          {
LABEL_368:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1378) = v431 - (v431 >> v399);
            v432 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1380);
            goto LABEL_369;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1378) = v431
                                                                                       + ((int)(0x8000 - v431) >> v399);
          v432 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1380);
          if (v245 <= 0x300000000000000)
          {
LABEL_369:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1380) = v432 - (v432 >> v399);
            v433 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1382);
            goto LABEL_370;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1380) = v432
                                                                                       + ((int)(0x8000 - v432) >> v399);
          v433 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1382);
          if (v245 <= 0x400000000000000)
          {
LABEL_370:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1382) = v433 - (v433 >> v399);
            v434 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1384);
            goto LABEL_371;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1382) = v433
                                                                                       + ((int)(0x8000 - v433) >> v399);
          v434 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1384);
          if (v245 <= 0x500000000000000)
          {
LABEL_371:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1384) = v434 - (v434 >> v399);
            v435 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1386);
            goto LABEL_372;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1384) = v434
                                                                                       + ((int)(0x8000 - v434) >> v399);
          v435 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1386);
          if (v245 <= 0x600000000000000)
          {
LABEL_372:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1386) = v435 - (v435 >> v399);
            v436 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1388);
            goto LABEL_373;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1386) = v435
                                                                                       + ((int)(0x8000 - v435) >> v399);
          v436 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1388);
          if (v245 <= 0x700000000000000)
          {
LABEL_373:
            *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1388) = v436 - (v436 >> v399);
            v437 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1390);
            goto LABEL_374;
          }
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1388) = v436
                                                                                       + ((int)(0x8000 - v436) >> v399);
          v437 = *(unsigned __int16 *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1390);
          if (v245 <= 0x800000000000000)
          {
LABEL_374:
            v408 = v437 - (v437 >> v399);
            v404 = (_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1392);
            v405 = (unsigned __int16)*v404;
            goto LABEL_499;
          }
          v438 = v437 + ((int)(0x8000 - v437) >> v399);
          v404 = (_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1392);
          v405 = (unsigned __int16)*v404;
          *(_WORD *)(v163 + 48 * (a4 != 0) + 24 * (v235 > 9) + 1390) = v438;
          v406 = 0x900000000000000;
LABEL_340:
          if (v245 > v406)
          {
            v407 = 0x8000 - v405;
LABEL_489:
            v575 = v405 + (v407 >> v399);
            goto LABEL_501;
          }
LABEL_500:
          v575 = v405 - (v405 >> v399);
LABEL_501:
          *v404 = v575;
          v576 = 0;
          if (v398 < 0x20)
            LOWORD(v398) = v398 + 1;
          *v397 = v398;
LABEL_504:
          v577 = v246;
          v578 = v246 + 1;
          v1070 = v20;
          v1072 = v24;
          v1092 = v165;
          if ((unint64_t)(v246 - 2) > 8)
          {
            v600 = v166;
            v601 = v235;
            LOWORD(v602) = 0;
            goto LABEL_544;
          }
          v579 = 0;
          v580 = av1_eob_offset_bits[v578];
          v581 = (unsigned __int16 *)(v163 + 108 * v166 + 54 * (a4 != 0) + 6 * v577 + 378);
          v582 = *(unsigned __int16 *)(a3 + 52);
          v583 = v582 >> 8;
          v584 = 8;
          v585 = 0xFF00000000000000;
          do
          {
            v586 = v582;
            v587 = v583 * (v581[v579] >> 6);
            v584 -= 4;
            v582 = v584 + (v587 >> 1);
            ++v579;
            v585 += 0x100000000000000;
          }
          while (HIWORD(v254) < v582);
          v588 = v586 - (v587 >> 1) - v584;
          v589 = __clz(v588);
          v590 = (v589 ^ 0xFFE0) + 16;
          v591 = *(_WORD *)(a3 + 54) - v590;
          *(_WORD *)(a3 + 54) = v591;
          v592 = ((v254 - (v582 << 16) + 1) << ((v589 ^ 0xE0) + 16)) - 1;
          *(_DWORD *)(a3 + 48) = v592;
          *(_WORD *)(a3 + 52) = v588 << v590;
          v593 = v579 - 1;
          if (v591 < 0)
          {
            v594 = *(_QWORD *)(a3 + 32);
            v595 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v595 >= v594)
            {
              v599 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_526;
            }
            v596 = 8 - v591;
            if (v596 >= 7)
              v597 = 7;
            else
              v597 = 8 - v591;
            v598 = ((v597 ^ 0xFu) - v591) >> 3;
            if (v598 >= ~(unint64_t)v595 + v594)
              v598 = ~(unint64_t)v595 + v594;
            if (v598 >= 0xF)
            {
              v603 = v598 + 1;
              v604 = (v598 + 1) & 0x3FFFFFF0;
              v599 = &v595->u8[v604];
              v605 = 0uLL;
              v606 = (int16x8_t)(unsigned __int16)v591;
              v607 = (int8x16_t)v592;
              v608 = vdupq_n_s32(v596);
              v609 = (uint32x4_t)vaddq_s32(v608, (int32x4_t)xmmword_208F3A6C0);
              v610 = (uint32x4_t)vaddq_s32(v608, (int32x4_t)xmmword_208F3A6D0);
              v611 = (uint32x4_t)vaddq_s32(v608, (int32x4_t)xmmword_208F3A6A0);
              v612 = (uint32x4_t)vaddq_s32(v608, (int32x4_t)xmmword_208F3A6B0);
              v613.i64[0] = 0x8000800080008;
              v613.i64[1] = 0x8000800080008;
              v614.i64[0] = 0x7F0000007FLL;
              v614.i64[1] = 0x7F0000007FLL;
              v615 = v604;
              v616 = 0uLL;
              v617 = 0uLL;
              v618 = 0uLL;
              do
              {
                v619 = *v595++;
                v617 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v619, (int8x16_t)xmmword_208F04F30), v610), v617);
                v616 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v619, (int8x16_t)xmmword_208F04F40), v611), v616);
                v607 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v619, (int8x16_t)xmmword_208F04F50), v612), v607);
                v618 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v619, (int8x16_t)xmmword_208F04F20), v609), v618);
                v606 = vaddq_s16(v606, v613);
                v605 = vaddq_s16(v605, v613);
                v612 = (uint32x4_t)vaddq_s32((int32x4_t)v612, v614);
                v611 = (uint32x4_t)vaddq_s32((int32x4_t)v611, v614);
                v610 = (uint32x4_t)vaddq_s32((int32x4_t)v610, v614);
                v609 = (uint32x4_t)vaddq_s32((int32x4_t)v609, v614);
                v615 -= 16;
              }
              while (v615);
              v620 = (unint64_t)v595 < v594;
              v621 = veorq_s8(veorq_s8(v607, v617), veorq_s8(v616, v618));
              *(int8x8_t *)v621.i8 = veor_s8(*(int8x8_t *)v621.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v621, v621, 8uLL));
              v592 = v621.i32[0] ^ v621.i32[1];
              v591 = vaddvq_s16(vaddq_s16(v606, v605));
              if (v603 == v604)
                goto LABEL_525;
              v596 -= 8 * v604;
            }
            else
            {
              v599 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v622 = *v599++;
              v592 ^= v622 << v596;
              v591 += 8;
              v620 = (unint64_t)v599 < v594;
              v213 = v596 >= 8;
              v596 -= 8;
            }
            while (v213 && (unint64_t)v599 < v594);
LABEL_525:
            if (v620)
            {
LABEL_527:
              *(_DWORD *)(a3 + 48) = v592;
              *(_WORD *)(a3 + 54) = v591;
              *(_QWORD *)(a3 + 40) = v599;
              goto LABEL_528;
            }
LABEL_526:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v591 + 0x4000;
            v591 = 0x4000;
            goto LABEL_527;
          }
LABEL_528:
          if ((v576 & 1) == 0)
          {
            v623 = v581[2];
            v624 = (v623 >> 4) + 4;
            v625 = *v581;
            if (v585 < 1)
              v626 = v625 - (v625 >> v624);
            else
              v626 = v625 + ((int)(0x8000 - v625) >> v624);
            *v581 = v626;
            if (v623 >= 0x20)
              v627 = v623;
            else
              v627 = v623 + 1;
            v581[2] = v627;
          }
          v600 = v166;
          v601 = v235;
          if (v593)
            v602 = 1 << (v580 - 1);
          else
            v602 = 0;
          if ((unint64_t)(v578 - 4) <= 7)
          {
            v628 = v580 - 2;
            do
            {
              v629 = od_ec_decode_BOOL_q15(v1098, 0x4000u);
              v630 = 1 << v628;
              if (!v629)
                v630 = 0;
              v602 += v630;
              --v628;
            }
            while (v628 != -1);
          }
LABEL_544:
          v631 = v602 + av1_eob_group_start[v578];
          v632 = v1093;
          *v1093 = v631;
          if ((v631 & 0xFFFE) != 0)
          {
            __memset_chk();
            v631 = *v1093;
          }
          v633 = v1080;
          v634 = v631 - 1;
          v635 = *(__int16 *)(v1086 + 2 * v634);
          v636 = v1090;
          if (v634)
          {
            v637 = (v171 << v1102) + 7;
            if (v171 << v1102 >= 0)
              v637 = v171 << v1102;
            v638 = 2;
            if (v634 > (v171 << v1102) / 4)
              v638 = 3;
            if (v634 > v637 >> 3)
              v639 = v638;
            else
              v639 = 1;
          }
          else
          {
            v639 = 0;
          }
          v640 = a4 != 0;
          v641 = (unsigned __int16 *)(v1090 + (v600 << 6) + 32 * v640 + 8 * v639 + 1470);
          v642 = *(_DWORD *)(a3 + 48);
          v643 = *(unsigned __int16 *)(a3 + 52);
          v644 = v643 >> 8;
          v645 = -1;
          v646 = 1;
          do
          {
            v647 = v643;
            v648 = v645;
            v649 = v646;
            v643 = ((v644 * (v641[++v645] >> 6)) >> 1) - 4 * v648 + 4;
            ++v646;
          }
          while (HIWORD(v642) < v643);
          v650 = v647 - v643;
          v651 = __clz(v650);
          v652 = (v651 ^ 0xFFE0) + 16;
          v653 = *(_WORD *)(a3 + 54) - v652;
          *(_WORD *)(a3 + 54) = v653;
          v654 = ((v642 - (v643 << 16) + 1) << ((v651 ^ 0xE0) + 16)) - 1;
          *(_DWORD *)(a3 + 48) = v654;
          *(_WORD *)(a3 + 52) = v650 << v652;
          if (v653 < 0)
          {
            v655 = *(_QWORD *)(a3 + 32);
            v656 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v656 >= v655)
            {
              v660 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_575;
            }
            v657 = 8 - v653;
            if (v657 >= 7)
              v658 = 7;
            else
              v658 = 8 - v653;
            v659 = ((v658 ^ 0xFu) - v653) >> 3;
            if (v659 >= ~(unint64_t)v656 + v655)
              v659 = ~(unint64_t)v656 + v655;
            if (v659 >= 0xF)
            {
              v661 = v659 + 1;
              v662 = (v659 + 1) & 0x3FFFFFF0;
              v660 = &v656->u8[v662];
              v663 = 0uLL;
              v664 = (int16x8_t)(unsigned __int16)v653;
              v665 = (int8x16_t)v654;
              v666 = vdupq_n_s32(v657);
              v667 = (uint32x4_t)vaddq_s32(v666, (int32x4_t)xmmword_208F3A6C0);
              v668 = (uint32x4_t)vaddq_s32(v666, (int32x4_t)xmmword_208F3A6D0);
              v669 = (uint32x4_t)vaddq_s32(v666, (int32x4_t)xmmword_208F3A6A0);
              v670 = (uint32x4_t)vaddq_s32(v666, (int32x4_t)xmmword_208F3A6B0);
              v671.i64[0] = 0x8000800080008;
              v671.i64[1] = 0x8000800080008;
              v672.i64[0] = 0x7F0000007FLL;
              v672.i64[1] = 0x7F0000007FLL;
              v673 = v662;
              v674 = 0uLL;
              v675 = 0uLL;
              v676 = 0uLL;
              do
              {
                v677 = *v656++;
                v675 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v677, (int8x16_t)xmmword_208F04F30), v668), v675);
                v674 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v677, (int8x16_t)xmmword_208F04F40), v669), v674);
                v665 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v677, (int8x16_t)xmmword_208F04F50), v670), v665);
                v676 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v677, (int8x16_t)xmmword_208F04F20), v667), v676);
                v664 = vaddq_s16(v664, v671);
                v663 = vaddq_s16(v663, v671);
                v670 = (uint32x4_t)vaddq_s32((int32x4_t)v670, v672);
                v669 = (uint32x4_t)vaddq_s32((int32x4_t)v669, v672);
                v668 = (uint32x4_t)vaddq_s32((int32x4_t)v668, v672);
                v667 = (uint32x4_t)vaddq_s32((int32x4_t)v667, v672);
                v673 -= 16;
              }
              while (v673);
              v678 = (unint64_t)v656 < v655;
              v679 = veorq_s8(veorq_s8(v665, v675), veorq_s8(v674, v676));
              *(int8x8_t *)v679.i8 = veor_s8(*(int8x8_t *)v679.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v679, v679, 8uLL));
              v654 = v679.i32[0] ^ v679.i32[1];
              v653 = vaddvq_s16(vaddq_s16(v664, v663));
              if (v661 == v662)
                goto LABEL_574;
              v657 -= 8 * v662;
            }
            else
            {
              v660 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v680 = *v660++;
              v654 ^= v680 << v657;
              v653 += 8;
              v678 = (unint64_t)v660 < v655;
              v213 = v657 >= 8;
              v657 -= 8;
            }
            while (v213 && (unint64_t)v660 < v655);
LABEL_574:
            if (v678)
            {
LABEL_576:
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 54) = v653;
              *(_QWORD *)(a3 + 40) = v660;
              goto LABEL_577;
            }
LABEL_575:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - v653 + 0x4000;
            v653 = 0x4000;
            goto LABEL_576;
          }
LABEL_577:
          v681 = *(unsigned __int8 *)(a3 + 56);
          if (!*(_BYTE *)(a3 + 56))
            goto LABEL_586;
          v682 = v641[3];
          v683 = (v682 >> 4) + 4;
          v684 = *v641;
          if (v645 << 56 <= 0)
          {
            *v641 = v684 - (v684 >> v683);
            v685 = v641[1];
            goto LABEL_582;
          }
          *v641 = v684 + ((int)(0x8000 - v684) >> v683);
          v685 = v641[1];
          if ((unint64_t)(v645 << 56) <= 0x100000000000000)
          {
LABEL_582:
            v686 = v685 - (v685 >> v683);
            goto LABEL_583;
          }
          v686 = v685 + ((int)(0x8000 - v685) >> v683);
LABEL_583:
          v641[1] = v686;
          if (v682 < 0x20)
            LOWORD(v682) = v682 + 1;
          v641[3] = v682;
LABEL_586:
          v687 = v645 + 1;
          v688 = v635 >> v1102;
          if ((int)v645 < 2)
            goto LABEL_740;
          if (v635)
          {
            v689 = v688 << v1102;
            if ((v601 > 9 || v635 - v689 > 1 || v688 >= 2) && (((0xA800uLL >> v601) & 1) == 0 || v688))
            {
              v36 = ((0x5400uLL >> v601) & (v635 == v689)) == 0;
              v690 = 14;
              if (!v36)
                v690 = 7;
            }
            else
            {
              v690 = 7;
            }
          }
          else
          {
            v690 = 0;
          }
          v691 = (v1092 >> 1);
          if (v691 >= 3)
            v691 = 3;
          v692 = (unsigned __int16 *)(v1090 + 420 * v691 + 210 * (a4 != 0) + 10 * v690 + 5990);
          v693 = *(unsigned __int16 *)(a3 + 52);
          v694 = v693 >> 8;
          v695 = -1;
          do
          {
            v696 = v693;
            v697 = v695++;
            v693 = ((v694 * (v692[v695] >> 6)) >> 1) - 4 * v697 + 8;
            ++v649;
          }
          while (HIWORD(v654) < v693);
          v698 = v696 - v693;
          v699 = (__clz(v696 - v693) ^ 0xFFFFFFE0) + 16;
          v700 = *(_WORD *)(a3 + 54) - v699;
          *(_WORD *)(a3 + 54) = v700;
          v654 = ((v654 - (v693 << 16) + 1) << v699) - 1;
          *(_DWORD *)(a3 + 48) = v654;
          *(_WORD *)(a3 + 52) = v698 << v699;
          if (v700 < 0)
          {
            v701 = v700;
            v703 = *(_QWORD *)(a3 + 32);
            v702 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v702 >= v703)
            {
              v707 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_619;
            }
            v704 = 8 - v700;
            if (v704 >= 7)
              v705 = 7;
            else
              v705 = 8 - v700;
            v706 = ((v705 ^ 0xFu) - v701) >> 3;
            if (v706 >= ~(unint64_t)v702 + v703)
              v706 = ~(unint64_t)v702 + v703;
            if (v706 >= 0xF)
            {
              v708 = v706 + 1;
              v709 = (v706 + 1) & 0x3FFFFFF0;
              v707 = &v702->u8[v709];
              v710 = 0uLL;
              v711 = (int16x8_t)(unsigned __int16)v701;
              v712 = (int8x16_t)v654;
              v713 = vdupq_n_s32(v704);
              v714 = (uint32x4_t)vaddq_s32(v713, (int32x4_t)xmmword_208F3A6C0);
              v715 = (uint32x4_t)vaddq_s32(v713, (int32x4_t)xmmword_208F3A6D0);
              v716 = (uint32x4_t)vaddq_s32(v713, (int32x4_t)xmmword_208F3A6A0);
              v717 = (uint32x4_t)vaddq_s32(v713, (int32x4_t)xmmword_208F3A6B0);
              v718.i64[0] = 0x8000800080008;
              v718.i64[1] = 0x8000800080008;
              v719.i64[0] = 0x7F0000007FLL;
              v719.i64[1] = 0x7F0000007FLL;
              v720 = v709;
              v721 = 0uLL;
              v722 = 0uLL;
              v723 = 0uLL;
              do
              {
                v724 = *v702++;
                v722 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v724, (int8x16_t)xmmword_208F04F30), v715), v722);
                v721 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v724, (int8x16_t)xmmword_208F04F40), v716), v721);
                v712 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v724, (int8x16_t)xmmword_208F04F50), v717), v712);
                v723 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v724, (int8x16_t)xmmword_208F04F20), v714), v723);
                v711 = vaddq_s16(v711, v718);
                v710 = vaddq_s16(v710, v718);
                v717 = (uint32x4_t)vaddq_s32((int32x4_t)v717, v719);
                v716 = (uint32x4_t)vaddq_s32((int32x4_t)v716, v719);
                v715 = (uint32x4_t)vaddq_s32((int32x4_t)v715, v719);
                v714 = (uint32x4_t)vaddq_s32((int32x4_t)v714, v719);
                v720 -= 16;
              }
              while (v720);
              v725 = (unint64_t)v702 < v703;
              v726 = veorq_s8(veorq_s8(v712, v722), veorq_s8(v721, v723));
              *(int8x8_t *)v726.i8 = veor_s8(*(int8x8_t *)v726.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v726, v726, 8uLL));
              v654 = v726.i32[0] ^ v726.i32[1];
              LOWORD(v701) = vaddvq_s16(vaddq_s16(v711, v710));
              if (v708 == v709)
                goto LABEL_618;
              v704 -= 8 * v709;
            }
            else
            {
              v707 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v727 = *v707++;
              v654 ^= v727 << v704;
              LOWORD(v701) = v701 + 8;
              v725 = (unint64_t)v707 < v703;
              v213 = v704 >= 8;
              v704 -= 8;
            }
            while (v213 && (unint64_t)v707 < v703);
LABEL_618:
            if (v725)
            {
LABEL_620:
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 54) = v701;
              *(_QWORD *)(a3 + 40) = v707;
              goto LABEL_621;
            }
LABEL_619:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v701 + 0x4000;
            LOWORD(v701) = 0x4000;
            goto LABEL_620;
          }
LABEL_621:
          if (!v681)
            goto LABEL_632;
          v728 = v692[4];
          v729 = (v728 >> 4) + 5;
          v730 = v695 << 56;
          v731 = *v692;
          if (v695 << 56 <= 0)
          {
            *v692 = v731 - (v731 >> v729);
            v732 = v692[1];
            goto LABEL_627;
          }
          *v692 = v731 + ((int)(0x8000 - v731) >> v729);
          v732 = v692[1];
          if (v730 <= 0x100000000000000)
          {
LABEL_627:
            v692[1] = v732 - (v732 >> v729);
            v733 = v692[2];
            goto LABEL_628;
          }
          v692[1] = v732 + ((int)(0x8000 - v732) >> v729);
          v733 = v692[2];
          if (v730 <= 0x200000000000000)
          {
LABEL_628:
            v734 = v733 - (v733 >> v729);
            goto LABEL_629;
          }
          v734 = v733 + ((int)(0x8000 - v733) >> v729);
LABEL_629:
          v692[2] = v734;
          if (v728 < 0x20)
            LOWORD(v728) = v728 + 1;
          v692[4] = v728;
LABEL_632:
          if ((int)v695 <= 2)
          {
            v687 += v695;
            goto LABEL_740;
          }
          v735 = 0;
          v736 = 0;
          v737 = 0;
          v738 = *(unsigned __int16 *)(a3 + 52);
          v739 = v738 >> 8;
          v740 = 0xFF00000000000000;
          v741 = v692;
          do
          {
            v742 = v738;
            v743 = *v741++;
            v744 = v739 * (v743 >> 6);
            v738 = v736 + (v744 >> 1) + 12;
            ++v737;
            v736 -= 4;
            v740 += 0x100000000000000;
            --v735;
          }
          while (HIWORD(v654) < (v744 >> 1) + v736 + 16);
          v745 = v742 - (v744 >> 1) - v736 - 16;
          v746 = (__clz(v745) ^ 0xFFFFFFE0) + 16;
          v747 = *(_WORD *)(a3 + 54) - v746;
          *(_WORD *)(a3 + 54) = v747;
          v654 = ((v654 - ((v736 + (v744 >> 1)) << 16) - 0xFFFFF) << v746) - 1;
          *(_DWORD *)(a3 + 48) = v654;
          *(_WORD *)(a3 + 52) = v745 << v746;
          if (v747 < 0)
          {
            v748 = v747;
            v749 = *(_QWORD *)(a3 + 32);
            v750 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v750 >= v749)
            {
              v754 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_654;
            }
            v751 = 8 - v748;
            if ((8 - v748) >= 7)
              v752 = 7;
            else
              v752 = 8 - v748;
            v753 = ((v752 ^ 0xFu) - v748) >> 3;
            if (v753 >= ~(unint64_t)v750 + v749)
              v753 = ~(unint64_t)v750 + v749;
            if (v753 >= 0xF)
            {
              v755 = v753 + 1;
              v756 = (v753 + 1) & 0x3FFFFFF0;
              v754 = &v750->u8[v756];
              v757 = 0uLL;
              v758 = (int16x8_t)(unsigned __int16)v748;
              v759 = (int8x16_t)v654;
              v760 = vdupq_n_s32(v751);
              v761 = (uint32x4_t)vaddq_s32(v760, (int32x4_t)xmmword_208F3A6C0);
              v762 = (uint32x4_t)vaddq_s32(v760, (int32x4_t)xmmword_208F3A6D0);
              v763 = (uint32x4_t)vaddq_s32(v760, (int32x4_t)xmmword_208F3A6A0);
              v764 = (uint32x4_t)vaddq_s32(v760, (int32x4_t)xmmword_208F3A6B0);
              v765.i64[0] = 0x8000800080008;
              v765.i64[1] = 0x8000800080008;
              v766.i64[0] = 0x7F0000007FLL;
              v766.i64[1] = 0x7F0000007FLL;
              v767 = v756;
              v768 = 0uLL;
              v769 = 0uLL;
              v770 = 0uLL;
              do
              {
                v771 = *v750++;
                v769 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v771, (int8x16_t)xmmword_208F04F30), v762), v769);
                v768 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v771, (int8x16_t)xmmword_208F04F40), v763), v768);
                v759 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v771, (int8x16_t)xmmword_208F04F50), v764), v759);
                v770 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v771, (int8x16_t)xmmword_208F04F20), v761), v770);
                v758 = vaddq_s16(v758, v765);
                v757 = vaddq_s16(v757, v765);
                v764 = (uint32x4_t)vaddq_s32((int32x4_t)v764, v766);
                v763 = (uint32x4_t)vaddq_s32((int32x4_t)v763, v766);
                v762 = (uint32x4_t)vaddq_s32((int32x4_t)v762, v766);
                v761 = (uint32x4_t)vaddq_s32((int32x4_t)v761, v766);
                v767 -= 16;
              }
              while (v767);
              v772 = (unint64_t)v750 < v749;
              v773 = veorq_s8(veorq_s8(v759, v769), veorq_s8(v768, v770));
              *(int8x8_t *)v773.i8 = veor_s8(*(int8x8_t *)v773.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v773, v773, 8uLL));
              v654 = v773.i32[0] ^ v773.i32[1];
              LOWORD(v748) = vaddvq_s16(vaddq_s16(v758, v757));
              if (v755 == v756)
                goto LABEL_653;
              v751 -= 8 * v756;
            }
            else
            {
              v754 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v774 = *v754++;
              v654 ^= v774 << v751;
              LOWORD(v748) = v748 + 8;
              v772 = (unint64_t)v754 < v749;
              v213 = v751 >= 8;
              v751 -= 8;
            }
            while (v213 && (unint64_t)v754 < v749);
LABEL_653:
            if (v772)
            {
LABEL_655:
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 54) = v748;
              *(_QWORD *)(a3 + 40) = v754;
              goto LABEL_656;
            }
LABEL_654:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v748 + 0x4000;
            LOWORD(v748) = 0x4000;
            goto LABEL_655;
          }
LABEL_656:
          if (!v681)
            goto LABEL_668;
          v775 = v692[4];
          v776 = (v775 >> 4) + 5;
          v777 = *v692;
          if (v740 <= 0)
          {
            *v692 = v777 - (v777 >> v776);
            v778 = v692[1];
            goto LABEL_662;
          }
          *v692 = v777 + ((int)(0x8000 - v777) >> v776);
          v778 = v692[1];
          if ((unint64_t)v740 <= 0x100000000000000)
          {
LABEL_662:
            v692[1] = v778 - (v778 >> v776);
            v779 = v692[2];
            goto LABEL_663;
          }
          v692[1] = v778 + ((int)(0x8000 - v778) >> v776);
          v779 = v692[2];
          if ((unint64_t)v740 <= 0x200000000000000)
          {
LABEL_663:
            v780 = v779 - (v779 >> v776);
            goto LABEL_664;
          }
          v780 = v779 + ((int)(0x8000 - v779) >> v776);
LABEL_664:
          v692[2] = v780;
          if (v775 >= 0x20)
            v781 = v775;
          else
            v781 = v775 + 1;
          v692[4] = v781;
LABEL_668:
          if (~v735 < 3)
          {
            v687 = v649 - v735 - 2;
            goto LABEL_740;
          }
          v782 = 0;
          v783 = *(unsigned __int16 *)(a3 + 52);
          v784 = v783 >> 8;
          v785 = 16;
          v786 = 0xFF00000000000000;
          v787 = v692;
          do
          {
            v788 = v783;
            v789 = *v787++;
            v790 = v784 * (v789 >> 6);
            v785 -= 4;
            v783 = v785 + (v790 >> 1);
            ++v782;
            v786 += 0x100000000000000;
          }
          while (HIWORD(v654) < v783);
          v791 = v788 - (v790 >> 1) - v785;
          v792 = (__clz(v791) ^ 0xFFFFFFE0) + 16;
          v793 = *(_WORD *)(a3 + 54) - v792;
          *(_WORD *)(a3 + 54) = v793;
          v654 = ((v654 - (v783 << 16) + 1) << v792) - 1;
          *(_DWORD *)(a3 + 48) = v654;
          *(_WORD *)(a3 + 52) = v791 << v792;
          if (v793 < 0)
          {
            v794 = v793;
            v795 = *(_QWORD *)(a3 + 32);
            v796 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v796 >= v795)
            {
              v800 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_690;
            }
            v797 = 8 - v793;
            if (v797 >= 7)
              v798 = 7;
            else
              v798 = 8 - v793;
            v799 = ((v798 ^ 0xFu) - v794) >> 3;
            if (v799 >= ~(unint64_t)v796 + v795)
              v799 = ~(unint64_t)v796 + v795;
            if (v799 >= 0xF)
            {
              v801 = v799 + 1;
              v802 = (v799 + 1) & 0x3FFFFFF0;
              v800 = &v796->u8[v802];
              v803 = 0uLL;
              v804 = (int16x8_t)(unsigned __int16)v794;
              v805 = (int8x16_t)v654;
              v806 = vdupq_n_s32(v797);
              v807 = (uint32x4_t)vaddq_s32(v806, (int32x4_t)xmmword_208F3A6C0);
              v808 = (uint32x4_t)vaddq_s32(v806, (int32x4_t)xmmword_208F3A6D0);
              v809 = (uint32x4_t)vaddq_s32(v806, (int32x4_t)xmmword_208F3A6A0);
              v810 = (uint32x4_t)vaddq_s32(v806, (int32x4_t)xmmword_208F3A6B0);
              v811.i64[0] = 0x8000800080008;
              v811.i64[1] = 0x8000800080008;
              v812.i64[0] = 0x7F0000007FLL;
              v812.i64[1] = 0x7F0000007FLL;
              v813 = v802;
              v814 = 0uLL;
              v815 = 0uLL;
              v816 = 0uLL;
              do
              {
                v817 = *v796++;
                v815 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v817, (int8x16_t)xmmword_208F04F30), v808), v815);
                v814 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v817, (int8x16_t)xmmword_208F04F40), v809), v814);
                v805 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v817, (int8x16_t)xmmword_208F04F50), v810), v805);
                v816 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v817, (int8x16_t)xmmword_208F04F20), v807), v816);
                v804 = vaddq_s16(v804, v811);
                v803 = vaddq_s16(v803, v811);
                v810 = (uint32x4_t)vaddq_s32((int32x4_t)v810, v812);
                v809 = (uint32x4_t)vaddq_s32((int32x4_t)v809, v812);
                v808 = (uint32x4_t)vaddq_s32((int32x4_t)v808, v812);
                v807 = (uint32x4_t)vaddq_s32((int32x4_t)v807, v812);
                v813 -= 16;
              }
              while (v813);
              v818 = (unint64_t)v796 < v795;
              v819 = veorq_s8(veorq_s8(v805, v815), veorq_s8(v814, v816));
              *(int8x8_t *)v819.i8 = veor_s8(*(int8x8_t *)v819.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v819, v819, 8uLL));
              v654 = v819.i32[0] ^ v819.i32[1];
              LOWORD(v794) = vaddvq_s16(vaddq_s16(v804, v803));
              if (v801 == v802)
                goto LABEL_689;
              v797 -= 8 * v802;
            }
            else
            {
              v800 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v820 = *v800++;
              v654 ^= v820 << v797;
              LOWORD(v794) = v794 + 8;
              v818 = (unint64_t)v800 < v795;
              v213 = v797 >= 8;
              v797 -= 8;
            }
            while (v213 && (unint64_t)v800 < v795);
LABEL_689:
            if (v818)
            {
LABEL_691:
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 54) = v794;
              *(_QWORD *)(a3 + 40) = v800;
              goto LABEL_692;
            }
LABEL_690:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v794 + 0x4000;
            LOWORD(v794) = 0x4000;
            goto LABEL_691;
          }
LABEL_692:
          if (!v681)
            goto LABEL_704;
          v821 = v692[4];
          v822 = (v821 >> 4) + 5;
          v823 = *v692;
          if (v786 <= 0)
          {
            *v692 = v823 - (v823 >> v822);
            v824 = v692[1];
            goto LABEL_698;
          }
          *v692 = v823 + ((int)(0x8000 - v823) >> v822);
          v824 = v692[1];
          if ((unint64_t)v786 <= 0x100000000000000)
          {
LABEL_698:
            v692[1] = v824 - (v824 >> v822);
            v825 = v692[2];
            goto LABEL_699;
          }
          v692[1] = v824 + ((int)(0x8000 - v824) >> v822);
          v825 = v692[2];
          if ((unint64_t)v786 <= 0x200000000000000)
          {
LABEL_699:
            v826 = v825 - (v825 >> v822);
            goto LABEL_700;
          }
          v826 = v825 + ((int)(0x8000 - v825) >> v822);
LABEL_700:
          v692[2] = v826;
          if (v821 >= 0x20)
            v827 = v821;
          else
            v827 = v821 + 1;
          v692[4] = v827;
LABEL_704:
          v828 = v649 + v737 + v782;
          if (v782 - 1 < 3)
          {
            v687 = v828 - 3;
            goto LABEL_740;
          }
          v687 = v828 - 4;
          v829 = *(unsigned __int16 *)(a3 + 52);
          v830 = v829 >> 8;
          v831 = 16;
          v832 = 0xFF00000000000000;
          v833 = v692;
          do
          {
            v834 = v829;
            v835 = *v833++;
            v836 = v830 * (v835 >> 6);
            v831 -= 4;
            v829 = v831 + (v836 >> 1);
            v832 += 0x100000000000000;
            ++v687;
          }
          while (HIWORD(v654) < v829);
          v837 = v834 - (v836 >> 1) - v831;
          v838 = (__clz(v837) ^ 0xFFFFFFE0) + 16;
          v839 = *(_WORD *)(a3 + 54) - v838;
          *(_WORD *)(a3 + 54) = v839;
          v654 = ((v654 - (v829 << 16) + 1) << v838) - 1;
          *(_DWORD *)(a3 + 48) = v654;
          *(_WORD *)(a3 + 52) = v837 << v838;
          if (v839 < 0)
          {
            v840 = v839;
            v842 = *(_QWORD *)(a3 + 32);
            v841 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v841 >= v842)
            {
              v846 = *(unsigned __int8 **)(a3 + 40);
              goto LABEL_726;
            }
            v843 = 8 - v839;
            if (v843 >= 7)
              v844 = 7;
            else
              v844 = 8 - v839;
            v845 = ((v844 ^ 0xFu) - v840) >> 3;
            if (v845 >= ~(unint64_t)v841 + v842)
              v845 = ~(unint64_t)v841 + v842;
            if (v845 >= 0xF)
            {
              v847 = v845 + 1;
              v848 = (v845 + 1) & 0x3FFFFFF0;
              v846 = &v841->u8[v848];
              v849 = 0uLL;
              v850 = (int16x8_t)(unsigned __int16)v840;
              v851 = (int8x16_t)v654;
              v852 = vdupq_n_s32(v843);
              v853 = (uint32x4_t)vaddq_s32(v852, (int32x4_t)xmmword_208F3A6C0);
              v854 = (uint32x4_t)vaddq_s32(v852, (int32x4_t)xmmword_208F3A6D0);
              v855 = (uint32x4_t)vaddq_s32(v852, (int32x4_t)xmmword_208F3A6A0);
              v856 = (uint32x4_t)vaddq_s32(v852, (int32x4_t)xmmword_208F3A6B0);
              v857.i64[0] = 0x8000800080008;
              v857.i64[1] = 0x8000800080008;
              v858.i64[0] = 0x7F0000007FLL;
              v858.i64[1] = 0x7F0000007FLL;
              v859 = v848;
              v860 = 0uLL;
              v861 = 0uLL;
              v862 = 0uLL;
              do
              {
                v863 = *v841++;
                v861 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v863, (int8x16_t)xmmword_208F04F30), v854), v861);
                v860 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v863, (int8x16_t)xmmword_208F04F40), v855), v860);
                v851 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v863, (int8x16_t)xmmword_208F04F50), v856), v851);
                v862 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v863, (int8x16_t)xmmword_208F04F20), v853), v862);
                v850 = vaddq_s16(v850, v857);
                v849 = vaddq_s16(v849, v857);
                v856 = (uint32x4_t)vaddq_s32((int32x4_t)v856, v858);
                v855 = (uint32x4_t)vaddq_s32((int32x4_t)v855, v858);
                v854 = (uint32x4_t)vaddq_s32((int32x4_t)v854, v858);
                v853 = (uint32x4_t)vaddq_s32((int32x4_t)v853, v858);
                v859 -= 16;
              }
              while (v859);
              v864 = (unint64_t)v841 < v842;
              v865 = veorq_s8(veorq_s8(v851, v861), veorq_s8(v860, v862));
              *(int8x8_t *)v865.i8 = veor_s8(*(int8x8_t *)v865.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v865, v865, 8uLL));
              v654 = v865.i32[0] ^ v865.i32[1];
              LOWORD(v840) = vaddvq_s16(vaddq_s16(v850, v849));
              if (v847 == v848)
                goto LABEL_725;
              v843 -= 8 * v848;
            }
            else
            {
              v846 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v866 = *v846++;
              v654 ^= v866 << v843;
              LOWORD(v840) = v840 + 8;
              v864 = (unint64_t)v846 < v842;
              v213 = v843 >= 8;
              v843 -= 8;
            }
            while (v213 && (unint64_t)v846 < v842);
LABEL_725:
            if (v864)
            {
LABEL_727:
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 54) = v840;
              *(_QWORD *)(a3 + 40) = v846;
              goto LABEL_728;
            }
LABEL_726:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v840 + 0x4000;
            LOWORD(v840) = 0x4000;
            goto LABEL_727;
          }
LABEL_728:
          if (!v681)
            goto LABEL_740;
          v867 = v692[4];
          v868 = (v867 >> 4) + 5;
          v869 = *v692;
          if (v832 <= 0)
          {
            *v692 = v869 - (v869 >> v868);
            v870 = v692[1];
            goto LABEL_734;
          }
          *v692 = v869 + ((int)(0x8000 - v869) >> v868);
          v870 = v692[1];
          if ((unint64_t)v832 <= 0x100000000000000)
          {
LABEL_734:
            v692[1] = v870 - (v870 >> v868);
            v871 = v692[2];
            goto LABEL_735;
          }
          v692[1] = v870 + ((int)(0x8000 - v870) >> v868);
          v871 = v692[2];
          if ((unint64_t)v832 <= 0x200000000000000)
          {
LABEL_735:
            v872 = v871 - (v871 >> v868);
            goto LABEL_736;
          }
          v872 = v871 + ((int)(0x8000 - v871) >> v868);
LABEL_736:
          v692[2] = v872;
          if (v867 >= 0x20)
            v873 = v867;
          else
            v873 = v867 + 1;
          v692[4] = v873;
LABEL_740:
          v1103[4 * v688 + v635] = v687;
          v874 = *v1093;
          v875 = v874 - 2;
          if (v874 >= 2)
          {
            v876 = (v1092 >> 1);
            v877 = v1090 + 840 * v600 + 420 * (a4 != 0) + 1790;
            if (v876 >= 3)
              v876 = 3;
            v878 = v1090 + 420 * v876 + 210 * (a4 != 0) + 5990;
            if (v601 > 9)
            {
              read_coeffs_reverse(a3, v1081, v1084, v875, v1086, v1102, (uint64_t)v1103, v877, v878);
LABEL_845:
              v874 = *v632;
              v636 = v1090;
              goto LABEL_846;
            }
            v1089 = v878;
            v879 = v1086;
            if (v874 < 3)
            {
LABEL_844:
              read_coeffs_reverse(a3, v1081, v1084, 0, v879, v1102, (uint64_t)v1103, v877, v1089);
              v633 = v1080;
              v632 = v1093;
              LODWORD(v640) = a4 != 0;
              goto LABEL_845;
            }
            v880 = 1 << v1102;
            v881 = v880 + 4;
            v1100 = v880 + 5;
            v882.i64[0] = 0x8000800080008;
            v882.i64[1] = 0x8000800080008;
            v883.i64[0] = 0x7F0000007FLL;
            v883.i64[1] = 0x7F0000007FLL;
            while (1)
            {
              v885 = *(__int16 *)(v879 + 2 * v875);
              v886 = (int)v885 >> v1102;
              v887 = &v1103[4 * ((int)v885 >> v1102) + (int)v885];
              v888 = v887[1];
              v889 = v887[v881];
              if (v889 >= 3)
                v889 = 3;
              if (v888 >= 3)
                v888 = 3;
              v890 = v887[v1100];
              if (v890 >= 3)
                v890 = 3;
              v891 = v887[(2 << v1102) + 8];
              if (v891 >= 3)
                v891 = 3;
              v892 = v887[2];
              if (v892 >= 3)
                v892 = 3;
              v893 = ((v889 + v888 + v890 + v891 + v892 + 1) >> 1) & 0x3F;
              if (v893 >= 4)
                v893 = 4;
              v894 = (unsigned __int16 *)(v877 + 10
                                               * (int)(v893 + *((char *)*(&av1_nz_map_ctx_offset + v1083) + v885)));
              v895 = *(unsigned __int16 *)(a3 + 52);
              v896 = v895 >> 8;
              v897 = 16;
              v898 = 0xFF00000000000000;
              v899 = -1;
              v900 = v894;
              do
              {
                v901 = v895;
                v902 = *v900++;
                v903 = v896 * (v902 >> 6);
                v897 -= 4;
                v895 = v897 + (v903 >> 1);
                v898 += 0x100000000000000;
                ++v899;
              }
              while (HIWORD(v654) < v895);
              v904 = v901 - (v903 >> 1) - v897;
              v905 = (__clz(v904) ^ 0xFFFFFFE0) + 16;
              v906 = *(_WORD *)(a3 + 54) - v905;
              *(_WORD *)(a3 + 54) = v906;
              v654 = ((v654 - (v895 << 16) + 1) << v905) - 1;
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 52) = v904 << v905;
              if ((v906 & 0x8000) == 0)
              {
                if (!v681)
                  goto LABEL_795;
                goto LABEL_764;
              }
              v912 = v906;
              v914 = *(_QWORD *)(a3 + 32);
              v913 = *(int8x16_t **)(a3 + 40);
              if ((unint64_t)v913 < v914)
                break;
              v918 = *(unsigned __int8 **)(a3 + 40);
LABEL_793:
              *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v912 + 0x4000;
              LOWORD(v912) = 0x4000;
LABEL_794:
              *(_DWORD *)(a3 + 48) = v654;
              *(_WORD *)(a3 + 54) = v912;
              *(_QWORD *)(a3 + 40) = v918;
              if (!v681)
              {
LABEL_795:
                if (v899 >= 3)
                  goto LABEL_796;
                goto LABEL_747;
              }
LABEL_764:
              v907 = v894[4];
              v908 = (v907 >> 4) + 5;
              v909 = *v894;
              if (v898 <= 0)
              {
                *v894 = v909 - (v909 >> v908);
                v910 = v894[1];
LABEL_780:
                v894[1] = v910 - (v910 >> v908);
                v911 = v894[2];
LABEL_781:
                v894[2] = v911 - (v911 >> v908);
                if (v907 < 0x20)
                  LOWORD(v907) = v907 + 1;
                v894[4] = v907;
                if (v899 < 3)
                  goto LABEL_747;
LABEL_796:
                v936 = 0;
                v937 = v885 - (v886 << v1102);
                v938 = v937 + v886 * (int)v881;
                v939 = v938 + 1;
                v940 = v1103[v938 + 1];
                if (v940 >= 0xF)
                  v940 = 15;
                v941 = v1103[v938 + (int)v881];
                if (v941 >= 0xF)
                  v941 = 15;
                v942 = v940 + v941;
                v943 = v1103[(int)v881 + (uint64_t)v939];
                if (v943 >= 0xF)
                  v943 = 15;
                v944 = (v942 + v943 + 1) >> 1;
                if (v944 >= 6)
                  v944 = 6;
                v884 = (v937 | v886) < 2;
                v945 = 14;
                if (v884)
                  v945 = 7;
                v946 = (unsigned __int16 *)(v1089 + 10 * (v945 + v944));
                while (2)
                {
                  v947 = *(unsigned __int16 *)(a3 + 52);
                  v948 = v947 >> 8;
                  v949 = 16;
                  v950 = 0xFF00000000000000;
                  v951 = 1;
                  v952 = v946;
                  do
                  {
                    v953 = v947;
                    v954 = *v952++;
                    v955 = v948 * (v954 >> 6);
                    v949 -= 4;
                    v947 = v949 + (v955 >> 1);
                    v950 += 0x100000000000000;
                    --v951;
                  }
                  while (HIWORD(v654) < v947);
                  v956 = v953 - (v955 >> 1) - v949;
                  v957 = (__clz(v956) ^ 0xFFFFFFE0) + 16;
                  v958 = *(_WORD *)(a3 + 54) - v957;
                  *(_WORD *)(a3 + 54) = v958;
                  v654 = ((v654 - (v947 << 16) + 1) << v957) - 1;
                  *(_DWORD *)(a3 + 48) = v654;
                  *(_WORD *)(a3 + 52) = v956 << v957;
                  if ((v958 & 0x8000) == 0)
                  {
                    if (v681)
                      goto LABEL_811;
LABEL_840:
                    v899 -= v951;
                    if (-v951 < 3)
                      goto LABEL_747;
LABEL_841:
                    v213 = v936 >= 9;
                    v936 += 3;
                    if (v213)
                      goto LABEL_747;
                    continue;
                  }
                  break;
                }
                v965 = v958;
                v967 = *(_QWORD *)(a3 + 32);
                v966 = *(int8x16_t **)(a3 + 40);
                if ((unint64_t)v966 >= v967)
                {
                  v971 = *(unsigned __int8 **)(a3 + 40);
                  goto LABEL_838;
                }
                v968 = 8 - v965;
                if ((8 - v965) >= 7)
                  v969 = 7;
                else
                  v969 = 8 - v965;
                v970 = ((v969 ^ 0xFu) - v965) >> 3;
                if (v970 >= ~(unint64_t)v966 + v967)
                  v970 = ~(unint64_t)v966 + v967;
                if (v970 >= 0xF)
                {
                  v972 = v970 + 1;
                  v973 = 0uLL;
                  v974 = (int16x8_t)(unsigned __int16)v965;
                  v975 = (int8x16_t)v654;
                  v976 = vdupq_n_s32(v968);
                  v971 = &v966->u8[v972 & 0x3FFFFFF0];
                  v977 = (uint32x4_t)vaddq_s32(v976, (int32x4_t)xmmword_208F3A6C0);
                  v968 -= 8 * (v972 & 0x3FFFFFF0);
                  v978 = (uint32x4_t)vaddq_s32(v976, (int32x4_t)xmmword_208F3A6D0);
                  v979 = (uint32x4_t)vaddq_s32(v976, (int32x4_t)xmmword_208F3A6A0);
                  v980 = (uint32x4_t)vaddq_s32(v976, (int32x4_t)xmmword_208F3A6B0);
                  v981 = v972 & 0x3FFFFFF0;
                  v982 = 0uLL;
                  v983 = 0uLL;
                  v984 = 0uLL;
                  do
                  {
                    v985 = *v966++;
                    v983 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v985, (int8x16_t)xmmword_208F04F30), v978), v983);
                    v982 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v985, (int8x16_t)xmmword_208F04F40), v979), v982);
                    v975 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v985, (int8x16_t)xmmword_208F04F50), v980), v975);
                    v984 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v985, (int8x16_t)xmmword_208F04F20), v977), v984);
                    v974 = vaddq_s16(v974, v882);
                    v973 = vaddq_s16(v973, v882);
                    v980 = (uint32x4_t)vaddq_s32((int32x4_t)v980, v883);
                    v979 = (uint32x4_t)vaddq_s32((int32x4_t)v979, v883);
                    v978 = (uint32x4_t)vaddq_s32((int32x4_t)v978, v883);
                    v977 = (uint32x4_t)vaddq_s32((int32x4_t)v977, v883);
                    v981 -= 16;
                  }
                  while (v981);
                  v986 = (unint64_t)v966 < v967;
                  v987 = veorq_s8(veorq_s8(v975, v983), veorq_s8(v982, v984));
                  *(int8x8_t *)v987.i8 = veor_s8(*(int8x8_t *)v987.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v987, v987, 8uLL));
                  v654 = v987.i32[0] ^ v987.i32[1];
                  LOWORD(v965) = vaddvq_s16(vaddq_s16(v974, v973));
                  if (v972 != (v972 & 0x3FFFFFF0))
                    goto LABEL_834;
                }
                else
                {
                  v971 = *(unsigned __int8 **)(a3 + 40);
                  do
                  {
LABEL_834:
                    v988 = *v971++;
                    v654 ^= v988 << v968;
                    LOWORD(v965) = v965 + 8;
                    v986 = (unint64_t)v971 < v967;
                    v213 = v968 >= 8;
                    v968 -= 8;
                  }
                  while (v213 && (unint64_t)v971 < v967);
                }
                if (!v986)
                {
LABEL_838:
                  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v965 + 0x4000;
                  LOWORD(v965) = 0x4000;
                }
                *(_DWORD *)(a3 + 48) = v654;
                *(_WORD *)(a3 + 54) = v965;
                *(_QWORD *)(a3 + 40) = v971;
                if (!v681)
                  goto LABEL_840;
LABEL_811:
                v959 = v946[4];
                v960 = (v959 >> 4) + 5;
                v961 = *v946;
                if (v950 <= 0)
                {
                  *v946 = v961 - (v961 >> v960);
                  v962 = v946[1];
                }
                else
                {
                  *v946 = v961 + ((int)(0x8000 - v961) >> v960);
                  v962 = v946[1];
                  if ((unint64_t)v950 > 0x100000000000000)
                  {
                    v946[1] = v962 + ((int)(0x8000 - v962) >> v960);
                    v963 = v946[2];
                    if ((unint64_t)v950 > 0x200000000000000)
                    {
                      v964 = v963 + ((int)(0x8000 - v963) >> v960);
                      goto LABEL_826;
                    }
LABEL_825:
                    v964 = v963 - (v963 >> v960);
LABEL_826:
                    v946[2] = v964;
                    if (v959 < 0x20)
                      LOWORD(v959) = v959 + 1;
                    v946[4] = v959;
                    v899 -= v951;
                    if (-v951 < 3)
                      goto LABEL_747;
                    goto LABEL_841;
                  }
                }
                v946[1] = v962 - (v962 >> v960);
                v963 = v946[2];
                goto LABEL_825;
              }
              *v894 = v909 + ((int)(0x8000 - v909) >> v908);
              v910 = v894[1];
              if ((unint64_t)v898 <= 0x100000000000000)
                goto LABEL_780;
              v894[1] = v910 + ((int)(0x8000 - v910) >> v908);
              v911 = v894[2];
              if ((unint64_t)v898 <= 0x200000000000000)
                goto LABEL_781;
              v894[2] = v911 + ((int)(0x8000 - v911) >> v908);
              if (v907 < 0x20)
                LOWORD(v907) = v907 + 1;
              v894[4] = v907;
              if (v899 >= 3)
                goto LABEL_796;
LABEL_747:
              *v887 = v899;
              v884 = v875-- <= 1;
              v879 = v1086;
              if (v884)
                goto LABEL_844;
            }
            v915 = 8 - v912;
            if ((8 - v912) >= 7)
              v916 = 7;
            else
              v916 = 8 - v912;
            v917 = ((v916 ^ 0xFu) - v912) >> 3;
            if (v917 >= ~(unint64_t)v913 + v914)
              v917 = ~(unint64_t)v913 + v914;
            if (v917 >= 0xF)
            {
              v919 = v917 + 1;
              v920 = 0uLL;
              v921 = (int16x8_t)(unsigned __int16)v912;
              v922 = (int8x16_t)v654;
              v923 = vdupq_n_s32(v915);
              v918 = &v913->u8[v919 & 0x3FFFFFF0];
              v924 = (uint32x4_t)vaddq_s32(v923, (int32x4_t)xmmword_208F3A6C0);
              v915 -= 8 * (v919 & 0x3FFFFFF0);
              v925 = (uint32x4_t)vaddq_s32(v923, (int32x4_t)xmmword_208F3A6D0);
              v926 = (uint32x4_t)vaddq_s32(v923, (int32x4_t)xmmword_208F3A6A0);
              v927 = (uint32x4_t)vaddq_s32(v923, (int32x4_t)xmmword_208F3A6B0);
              v928 = v919 & 0x3FFFFFF0;
              v929 = 0uLL;
              v930 = 0uLL;
              v931 = 0uLL;
              do
              {
                v932 = *v913++;
                v930 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v932, (int8x16_t)xmmword_208F04F30), v925), v930);
                v929 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v932, (int8x16_t)xmmword_208F04F40), v926), v929);
                v922 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v932, (int8x16_t)xmmword_208F04F50), v927), v922);
                v931 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v932, (int8x16_t)xmmword_208F04F20), v924), v931);
                v921 = vaddq_s16(v921, v882);
                v920 = vaddq_s16(v920, v882);
                v927 = (uint32x4_t)vaddq_s32((int32x4_t)v927, v883);
                v926 = (uint32x4_t)vaddq_s32((int32x4_t)v926, v883);
                v925 = (uint32x4_t)vaddq_s32((int32x4_t)v925, v883);
                v924 = (uint32x4_t)vaddq_s32((int32x4_t)v924, v883);
                v928 -= 16;
              }
              while (v928);
              v933 = (unint64_t)v913 < v914;
              v934 = veorq_s8(veorq_s8(v922, v930), veorq_s8(v929, v931));
              *(int8x8_t *)v934.i8 = veor_s8(*(int8x8_t *)v934.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v934, v934, 8uLL));
              v654 = v934.i32[0] ^ v934.i32[1];
              LOWORD(v912) = vaddvq_s16(vaddq_s16(v921, v920));
              if (v919 == (v919 & 0x3FFFFFF0))
                goto LABEL_792;
            }
            else
            {
              v918 = *(unsigned __int8 **)(a3 + 40);
            }
            do
            {
              v935 = *v918++;
              v654 ^= v935 << v915;
              LOWORD(v912) = v912 + 8;
              v933 = (unint64_t)v918 < v914;
              v213 = v915 >= 8;
              v915 -= 8;
            }
            while (v213 && (unint64_t)v918 < v914);
LABEL_792:
            if (v933)
              goto LABEL_794;
            goto LABEL_793;
          }
LABEL_846:
          if (!v874)
          {
            v220 = 0;
            goto LABEL_956;
          }
          v989 = 0;
          v990 = 0;
          v991 = v636 + 18 * v640;
          v992 = 0;
          v1085 = (unsigned __int16 *)(v991 + 6 * v1091 + 930);
          v993 = (int8x16_t)xmmword_208F04F30;
          v994 = (int8x16_t)xmmword_208F04F40;
          v995 = (int8x16_t)xmmword_208F04F50;
          v996 = (int8x16_t)xmmword_208F04F20;
          v997.i64[0] = 0x8000800080008;
          v997.i64[1] = 0x8000800080008;
          v998.i64[0] = 0x7F0000007FLL;
          v998.i64[1] = 0x7F0000007FLL;
          v999 = v1088;
          v1000 = v1086;
          do
          {
            v1005 = *(__int16 *)(v1000 + 2 * v989);
            v1006 = v1005 + 4 * (v1005 >> v1102);
            v1007 = v1103[v1006];
            if (!v1103[v1006])
              goto LABEL_857;
            v1101 = v990;
            v1008 = (unsigned __int16)*v999;
            if (v1008 <= v1005)
              LOWORD(v1008) = *(_WORD *)(v1000 + 2 * v989);
            *v999 = v1008;
            if (v989)
            {
              v1009 = od_ec_decode_BOOL_q15(v1098, 0x4000u);
              v998.i64[0] = 0x7F0000007FLL;
              v998.i64[1] = 0x7F0000007FLL;
              v997.i64[0] = 0x8000800080008;
              v997.i64[1] = 0x8000800080008;
              v996 = (int8x16_t)xmmword_208F04F20;
              v995 = (int8x16_t)xmmword_208F04F50;
              v994 = (int8x16_t)xmmword_208F04F40;
              v993 = (int8x16_t)xmmword_208F04F30;
              v1010 = v1009;
              if (v1007 >= 0xF)
                goto LABEL_895;
              goto LABEL_940;
            }
            v1011 = *(_DWORD *)(a3 + 48);
            v1012 = *(unsigned __int16 *)(a3 + 52);
            v1013 = v1012 >> 8;
            v1014 = 8;
            v1015 = 0xFF00000000000000;
            v1010 = -1;
            v1016 = v1085;
            do
            {
              v1017 = v1012;
              v1018 = *v1016++;
              v1019 = v1013 * (v1018 >> 6);
              v1014 -= 4;
              v1012 = v1014 + (v1019 >> 1);
              v1015 += 0x100000000000000;
              ++v1010;
            }
            while (HIWORD(v1011) < v1012);
            v1020 = v1017 - (v1019 >> 1) - v1014;
            v1021 = (__clz(v1020) ^ 0xFFFFFFE0) + 16;
            v1022 = *(_WORD *)(a3 + 54) - v1021;
            *(_WORD *)(a3 + 54) = v1022;
            v1023 = ((v1011 - (v1012 << 16) + 1) << v1021) - 1;
            *(_DWORD *)(a3 + 48) = v1023;
            *(_WORD *)(a3 + 52) = v1020 << v1021;
            if ((v1022 & 0x8000) == 0)
            {
              if (!*(_BYTE *)(a3 + 56))
                goto LABEL_894;
              goto LABEL_868;
            }
            v1028 = v1022;
            v1029 = *(_QWORD *)(a3 + 32);
            v1030 = *(int8x16_t **)(a3 + 40);
            if ((unint64_t)v1030 < v1029)
            {
              v1031 = 8 - v1028;
              if ((8 - v1028) >= 7)
                v1032 = 7;
              else
                v1032 = 8 - v1028;
              v1033 = ((v1032 ^ 0xFu) - v1028) >> 3;
              if (v1033 >= ~(unint64_t)v1030 + v1029)
                v1033 = ~(unint64_t)v1030 + v1029;
              if (v1033 >= 0xF)
              {
                v1036 = v1033 + 1;
                v1037 = (v1033 + 1) & 0x3FFFFFF0;
                v1038 = 0uLL;
                v1039 = (int16x8_t)(unsigned __int16)v1028;
                v1040 = (int8x16_t)v1023;
                v1041 = vdupq_n_s32(v1031);
                v1034 = &v1030->u8[v1037];
                v1042 = (uint32x4_t)vaddq_s32(v1041, (int32x4_t)xmmword_208F3A6C0);
                v1031 -= 8 * v1037;
                v1043 = (uint32x4_t)vaddq_s32(v1041, (int32x4_t)xmmword_208F3A6D0);
                v1044 = (uint32x4_t)vaddq_s32(v1041, (int32x4_t)xmmword_208F3A6A0);
                v1045 = (uint32x4_t)vaddq_s32(v1041, (int32x4_t)xmmword_208F3A6B0);
                v1046 = v1037;
                v1047 = 0uLL;
                v1048 = 0uLL;
                v1049 = 0uLL;
                do
                {
                  v1050 = *v1030++;
                  v1048 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1050, v993), v1043), v1048);
                  v1047 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1050, v994), v1044), v1047);
                  v1040 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1050, v995), v1045), v1040);
                  v1049 = veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(v1050, v996), v1042), v1049);
                  v1039 = vaddq_s16(v1039, v997);
                  v1038 = vaddq_s16(v1038, v997);
                  v1045 = (uint32x4_t)vaddq_s32((int32x4_t)v1045, v998);
                  v1044 = (uint32x4_t)vaddq_s32((int32x4_t)v1044, v998);
                  v1043 = (uint32x4_t)vaddq_s32((int32x4_t)v1043, v998);
                  v1042 = (uint32x4_t)vaddq_s32((int32x4_t)v1042, v998);
                  v1046 -= 16;
                }
                while (v1046);
                v1051 = (unint64_t)v1030 < v1029;
                v1052 = veorq_s8(veorq_s8(v1040, v1048), veorq_s8(v1047, v1049));
                *(int8x8_t *)v1052.i8 = veor_s8(*(int8x8_t *)v1052.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1052, v1052, 8uLL));
                v1023 = v1052.i32[0] ^ v1052.i32[1];
                LOWORD(v1028) = vaddvq_s16(vaddq_s16(v1039, v1038));
                if (v1036 == v1037)
                  goto LABEL_891;
              }
              else
              {
                v1034 = *(unsigned __int8 **)(a3 + 40);
              }
              do
              {
                v1053 = *v1034++;
                v1023 ^= v1053 << v1031;
                LOWORD(v1028) = v1028 + 8;
                v1051 = (unint64_t)v1034 < v1029;
                v213 = v1031 >= 8;
                v1031 -= 8;
              }
              while (v213 && (unint64_t)v1034 < v1029);
LABEL_891:
              if (v1051)
                goto LABEL_893;
              goto LABEL_892;
            }
            v1034 = *(unsigned __int8 **)(a3 + 40);
LABEL_892:
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) - (__int16)v1028 + 0x4000;
            LOWORD(v1028) = 0x4000;
LABEL_893:
            *(_DWORD *)(a3 + 48) = v1023;
            *(_WORD *)(a3 + 54) = v1028;
            *(_QWORD *)(a3 + 40) = v1034;
            if (!*(_BYTE *)(a3 + 56))
            {
LABEL_894:
              if (v1007 >= 0xF)
                goto LABEL_895;
              goto LABEL_940;
            }
LABEL_868:
            v1024 = v1085[2];
            v1025 = (v1024 >> 4) + 4;
            v1026 = *v1085;
            if (v1015 < 1)
              v1027 = v1026 - (v1026 >> v1025);
            else
              v1027 = v1026 + ((int)(0x8000 - v1026) >> v1025);
            *v1085 = v1027;
            if (v1024 >= 0x20)
              v1035 = v1024;
            else
              v1035 = v1024 + 1;
            v1085[2] = v1035;
            if (v1007 >= 0xF)
            {
LABEL_895:
              if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
              {
                v1054 = 0;
              }
              else
              {
                v1075 = v992;
                if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 0;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 1;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 2;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 3;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 4;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 5;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 6;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 7;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 8;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 9;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 10;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 11;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 12;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 13;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 14;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 15;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 16;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 17;
                }
                else if (od_ec_decode_BOOL_q15(v1098, 0x4000u))
                {
                  v1055 = 18;
                }
                else
                {
                  od_ec_decode_BOOL_q15(v1098, 0x4000u);
                  aom_internal_error(*(_QWORD *)(a2 + 10736), 7, "Invalid length in read_golomb");
                  v1055 = 19;
                }
                v1056 = v1055 + 1;
                v1057 = 1;
                do
                {
                  v1057 = od_ec_decode_BOOL_q15(v1098, 0x4000u) + 2 * v1057;
                  --v1056;
                }
                while (v1056);
                v1054 = v1057 - 1;
                v633 = v1080;
                v992 = v1075;
              }
              v1007 += v1054;
              v1000 = v1086;
              v994 = (int8x16_t)xmmword_208F04F40;
              v993 = (int8x16_t)xmmword_208F04F30;
              v996 = (int8x16_t)xmmword_208F04F20;
              v995 = (int8x16_t)xmmword_208F04F50;
              v997.i64[0] = 0x8000800080008;
              v997.i64[1] = 0x8000800080008;
              v998.i64[0] = 0x7F0000007FLL;
              v998.i64[1] = 0x7F0000007FLL;
            }
LABEL_940:
            if (v1010)
              v1058 = -v1007;
            else
              v1058 = v1007;
            if (!v989)
              v992 = v1058;
            v1059 = *(__int16 *)(v1095 + 2 * (*(_WORD *)(v1000 + 2 * v989) != 0));
            if (v1087)
              v1059 = (*(unsigned __int8 *)(v1087 + *(__int16 *)(v1000 + 2 * v989)) * v1059 + 16) >> 5;
            v990 = (v1007 & 0xFFFFF) + v1101;
            v1001 = ((v1059 * (v1007 & 0xFFFFF)) & 0xFFFFFF) >> v1094;
            if (v1010)
              v1002 = -v1001;
            else
              v1002 = v1001;
            v1003 = v1097;
            if (v1002 < v1097)
              v1003 = v1002;
            if (v1002 >= v1096)
              v1004 = v1003;
            else
              v1004 = v1096;
            *(_DWORD *)(v633 + 4 * v1005) = v1004;
            v874 = *v1093;
            v999 = v1088;
LABEL_857:
            ++v989;
          }
          while (v989 < v874);
          if (v990 >= 7)
            v1060 = 7;
          else
            v1060 = v990;
          v1061 = v1060 | 8;
          if (v992)
            v1060 += 16;
          if (v992 < 0)
            v1060 = v1061;
          v220 = v1060;
LABEL_956:
          v20 = v1070;
          LODWORD(v24) = v1072;
          v12 = v1074;
          v221 = a4;
          LODWORD(v19) = v1079;
          v222 = *(_QWORD *)v1076;
LABEL_957:
          av1_set_entropy_contexts(a2, v222, v221, v19, v1081, v220, a6, v12);
          if ((*(_WORD *)(v1078 + 167) & 0x80) != 0 || *(char *)(v1078 + 16) >= 1)
          {
            if (*(_DWORD *)(a2 + 4 * (*(_WORD *)(**(_QWORD **)(a2 + 7864) + 167) & 7) + 10692)
              || ((0x61810uLL >> v1083) & 1) != 0)
            {
              if (!v221)
              {
                v1062 = 0;
LABEL_965:
                v1063 = tx_size_wide_unit_3[v1083];
                v1064 = tx_size_high_unit_3[v1083];
                if (((0x41010uLL >> v1083) & 1) != 0 || ((0x20810uLL >> v1083) & 1) != 0)
                {
                  v1065 = 0;
                  v1066 = *(int *)(a2 + 7920);
                  v1067 = v20 + (int)v1066 * (uint64_t)(int)v24;
                  v1068 = 4 * v1066;
                  do
                  {
                    v1069 = 0;
                    do
                    {
                      *(_BYTE *)(*(_QWORD *)(a2 + 7912) + v1067 + v1069) = v1062;
                      v1069 += 4;
                    }
                    while (v1069 < v1063);
                    v1065 += 4;
                    v1067 += v1068;
                  }
                  while (v1065 < v1064);
                }
              }
            }
            else if (!v221)
            {
              v1062 = *(_BYTE *)(*(_QWORD *)(a2 + 7912) + v20 + *(int *)(a2 + 7920) * (uint64_t)v12);
              goto LABEL_965;
            }
          }
          return;
      }
  }
}

