void WebCore::IndentOutdentCommand::~IndentOutdentCommand(WebCore::IndentOutdentCommand *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E33A9B18;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E33A9B18;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::IndentOutdentCommand::editingAction(WebCore::IndentOutdentCommand *this)
{
  if (*((_DWORD *)this + 78))
    return 23;
  else
    return 13;
}

uint64_t WebCore::IndentOutdentCommand::preservesTypingStyle(WebCore::IndentOutdentCommand *this)
{
  return 1;
}

void WebCore::InsertIntoTextNodeCommand::~InsertIntoTextNodeCommand(WebCore::InsertIntoTextNodeCommand *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33ACDD0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertIntoTextNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertIntoTextNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33ACDD0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertIntoTextNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertIntoTextNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v8);
}

void WebCore::InsertLineBreakCommand::~InsertLineBreakCommand(WebCore::InsertLineBreakCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::InsertListCommand::~InsertListCommand(WebCore::InsertListCommand *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::InsertListCommand::preservesTypingStyle(WebCore::InsertListCommand *this)
{
  return 1;
}

void WebCore::InsertNestedListCommand::~InsertNestedListCommand(WebCore::InsertNestedListCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InsertNestedListCommand::editingAction(WebCore::InsertNestedListCommand *this)
{
  if (*((_BYTE *)this + 280))
    return 18;
  else
    return 16;
}

uint64_t WebCore::InsertNestedListCommand::preservesTypingStyle(WebCore::InsertNestedListCommand *this)
{
  return 1;
}

void WebCore::InsertNodeBeforeCommand::~InsertNodeBeforeCommand(WebCore::InsertNodeBeforeCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33ACFC8;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertNodeBeforeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertNodeBeforeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33ACFC8;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertNodeBeforeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::InsertNodeBeforeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v8);
}

void WebCore::InsertParagraphSeparatorCommand::~InsertParagraphSeparatorCommand(WebCore::InsertParagraphSeparatorCommand *this, WTF::StringImpl *a2)
{
  WebCore::EditingStyle *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E33AD020;
  v3 = (WebCore::EditingStyle *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  WebCore::EditingStyle *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E33AD020;
  v3 = (WebCore::EditingStyle *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::InsertTextCommand::~InsertTextCommand(WebCore::InsertTextCommand *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E33AD0F0;
  v3 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E33AD0F0;
  v3 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::InsertTextCommand::isInsertTextCommand(WebCore::InsertTextCommand *this)
{
  return 1;
}

uint64_t WebCore::isPhrasingContent(WebCore *this, const WebCore::Node *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v7;
  BOOL v8;
  int v9;

  if ((*((_WORD *)this + 14) & 8) == 0)
    return 0;
  v2 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2 + 2;
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 12) + 10);
  v4 = 1;
  switch(*(_WORD *)(*((_QWORD *)this + 12) + 10))
  {
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x43:
    case 0x46:
    case 0x49:
    case 0x4A:
    case 0x4D:
    case 0x4E:
    case 0x54:
    case 0x55:
    case 0x59:
    case 0x5C:
    case 0x5F:
    case 0x60:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x70:
    case 0x71:
    case 0x73:
    case 0x77:
    case 0x78:
    case 0x7C:
    case 0x80:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x8A:
      break;
    case 0x42:
    case 0x44:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4B:
    case 0x4C:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x5A:
    case 0x5B:
    case 0x5D:
    case 0x5E:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x68:
    case 0x69:
    case 0x6D:
    case 0x6F:
    case 0x72:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x81:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
      goto LABEL_15;
    default:
      if (v3 > 0x29 || ((1 << v3) & 0x30563386622) == 0)
      {
        v7 = v3 - 235;
        v8 = v7 > 0x14;
        v9 = (1 << v7) & 0x100401;
        if (v8 || v9 == 0)
LABEL_15:
          v4 = 0;
      }
      break;
  }
  if (v2)
  {
    *((_DWORD *)this + 6) = v2;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this, a2);
  }
  return v4;
}

uint64_t WebCore::appendCharactersReplacingEntitiesInternal<char16_t>(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, unsigned __int8 a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v27;

  v8 = *a2;
  if (*a2)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  if (v10 >= a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a5;
    v14 = v10 - a3;
    v15 = v9 + 2 * a3;
    while (v14 != v12)
    {
      v16 = *(unsigned __int16 *)(v15 + 2 * v12);
      if (v16 > 0xA0 || !WebCore::entityMap[v16])
        goto LABEL_8;
      v17 = (char *)&WebCore::entitySubstitutionList + 24 * WebCore::entityMap[v16];
      if (!v17[17])
        break;
      if ((v17[16] & v13) == 0)
        goto LABEL_8;
      if (*a2)
        v18 = *(unsigned int *)(*a2 + 4) | ((unint64_t)((*(_DWORD *)(*a2 + 16) >> 2) & 1) << 32);
      else
        v18 = 0x100000000;
      v19 = v11 + a3;
      v27 = v13;
      if (v18 <= v11 + a3)
        goto LABEL_24;
      LODWORD(v20) = v12 - v11;
      if (v18 - v19 <= v20)
      {
        if (!v19)
        {
          v20 = v18;
          goto LABEL_23;
        }
        LODWORD(v20) = v18 - v19;
      }
      v20 = v20;
      v21 = v18 - (unint64_t)v19;
      if ((v18 & 0x100000000) != 0)
      {
        if (v21 < v20)
          break;
        v20 = v20 | 0x100000000;
      }
      else if (v21 < v20)
      {
        break;
      }
LABEL_23:
      if ((v20 & 0x100000000) == 0)
      {
        WTF::StringBuilder::append();
        goto LABEL_25;
      }
LABEL_24:
      WTF::StringBuilder::append();
LABEL_25:
      WTF::StringBuilder::append();
      v11 = v12 + 1;
      v13 = v27;
LABEL_8:
      if (a4 == ++v12)
      {
        v22 = v11 + a3;
        if (*a2)
          v23 = *(unsigned int *)(*a2 + 4) | ((unint64_t)((*(_DWORD *)(*a2 + 16) >> 2) & 1) << 32);
        else
          v23 = 0x100000000;
        if (v23 <= v22)
          return WTF::StringBuilder::append();
        LODWORD(v24) = a4 - v11;
        if (v23 - v22 <= v24)
        {
          if (v22)
          {
            LODWORD(v24) = v23 - v22;
            goto LABEL_34;
          }
          v24 = v23;
        }
        else
        {
LABEL_34:
          v24 = v24;
          v25 = v23 - (unint64_t)v22;
          if ((v23 & 0x100000000) != 0)
          {
            if (v25 < v24)
              break;
            v24 = v24 | 0x100000000;
          }
          else if (v25 < v24)
          {
            break;
          }
        }
        if ((v24 & 0x100000000) != 0)
          return WTF::StringBuilder::append();
        return WTF::StringBuilder::append();
      }
    }
  }
  __break(1u);
  return WTF::StringBuilder::append();
}

uint64_t WebCore::MarkupAccumulator::serializeNodes@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _DWORD *v7;
  WTF::StringBuilder *v8;
  _DWORD *v9;

  result = WebCore::MarkupAccumulator::serializeNodesWithNamespaces((WebCore::MarkupAccumulator *)a1, a2, a3, 0);
  v9 = (_DWORD *)a1[2];
  v8 = (WTF::StringBuilder *)(a1 + 2);
  v7 = v9;
  if (v9
    || (WTF::StringBuilder::shrinkToFit(v8), result = WTF::StringBuilder::reifyString(v8), (v7 = *(_DWORD **)v8) != 0))
  {
    *v7 += 2;
  }
  *a4 = v7;
  return result;
}

BOOL WebCore::MarkupAccumulator::includeShadowRoot(WebCore::MarkupAccumulator *this, const WebCore::ShadowRoot *a2)
{
  int v2;
  uint64_t v3;
  const WebCore::ShadowRoot **v4;
  uint64_t v5;
  const WebCore::ShadowRoot *v6;
  _BOOL8 result;

  if (!*((_BYTE *)a2 + 193))
    return 0;
  v2 = *((unsigned __int8 *)this + 64);
  if (v2 == 2 || v2 == 1 && (*((_BYTE *)a2 + 192) & 8) != 0)
    return 1;
  v3 = *((unsigned int *)this + 21);
  if (!(_DWORD)v3)
    return 0;
  v4 = (const WebCore::ShadowRoot **)*((_QWORD *)this + 9);
  v5 = v3 - 1;
  do
  {
    v6 = *v4++;
    result = v6 == a2;
  }
  while (v6 != a2 && v5-- != 0);
  return result;
}

uint64_t WebCore::MarkupAccumulator::serializeNodesWithNamespaces(WebCore::Node &,WebCore::SerializedNodes,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const*)::$_0::operator()<WebCore::Node const>(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t result;
  uint64_t v5;

  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a1 + 16, a2) & 1) != 0)
    return 0;
  v3 = *(_WORD *)(a2 + 28);
  if ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    if ((v3 & 4) != 0)
      return *(_QWORD *)(a2 + 80);
    return 0;
  }
  *(_DWORD *)(a2 + 24) += 2;
  result = *(_QWORD *)(WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)a2) + 80);
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    v5 = result;
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a2);
    return v5;
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  return result;
}

const WebCore::Node *WebCore::MarkupAccumulator::suitableShadowRoot(WebCore::MarkupAccumulator *this, const WebCore::Node *a2)
{
  const WebCore::Node *v3;
  int v5;
  void *v6;

  if (!*((_BYTE *)this + 64) && !*((_DWORD *)this + 21) || (*((_WORD *)a2 + 14) & 0x80) == 0)
    return 0;
  v5 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5 + 2;
  if (WebCore::MarkupAccumulator::includeShadowRoot(this, a2))
    v3 = a2;
  else
    v3 = 0;
  if (v5)
  {
    *((_DWORD *)a2 + 6) = v5;
  }
  else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(a2, v6);
  }
  return v3;
}

_DWORD *WebCore::MarkupAccumulator::appendNamespace(_DWORD *result, WTF::StringBuilder *this, _DWORD **a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int i;
  uint64_t v12;
  _DWORD *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int j;
  uint64_t v28;
  _DWORD **v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _DWORD *v35;
  _BYTE *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  _DWORD *v50;
  const char *v51;
  _BOOL4 v52;
  int v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  _WORD *v57;
  char *v58;
  uint64_t v59;
  _WORD *v60;
  int8x16_t *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  size_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  size_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  __int128 v77;
  char *v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  char *v82;
  char *v83;
  char *v84;
  __int16 v85;
  char *v86;
  __int128 v87;
  char *v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  char *v92;
  char *v93;
  char *v94;
  __int16 v95;
  char *v96;
  char *v97;
  int8x16_t *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  char *v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int16 v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  _DWORD *v119;
  unsigned __int128 v120;
  char v121;
  unsigned __int128 *v122;
  unsigned __int128 *v123;
  unsigned __int128 v124;
  unsigned __int128 *v125;
  unsigned __int128 *v126;
  unsigned __int128 v127;
  char v128;
  char v129;
  char v130[24];
  _DWORD *v131;
  WTF::StringImpl *v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;
  int8x16x2_t v141;

  v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    if (!a6)
      return result;
    result = (_DWORD *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *result += 2;
    v9 = *a5;
    if (*a5)
    {
      v10 = 0;
      for (i = result[4] >> 8; ; i = v10 + v12)
      {
        v12 = i & *(_DWORD *)(v9 - 8);
        v13 = *(_DWORD **)(v9 + 16 * v12);
        if (v13 != (_DWORD *)-1)
        {
          if (!v13)
            goto LABEL_11;
          if (v13 == result)
            break;
        }
        ++v10;
      }
      v14 = *(_QWORD *)(v9 + 16 * v12 + 8) != 0;
      if (!result)
        goto LABEL_35;
    }
    else
    {
LABEL_11:
      v14 = 0;
      if (!result)
      {
LABEL_35:
        if (!v14)
          return result;
        goto LABEL_14;
      }
    }
    if (*result == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
      if (!v14)
        return result;
    }
    else
    {
      *result -= 2;
      if (!v14)
        return result;
    }
LABEL_14:
    v15 = WebCore::xmlnsAtomData;
    v16 = *((_QWORD *)this + 1);
    if ((v16 || (v16 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v16 + 16) & 4) == 0)
    {
      result = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
      if (!result)
        return result;
      *(_WORD *)result = 32;
      v17 = (char *)result + 2;
      if (!v15)
      {
        v18 = 0;
LABEL_139:
        v86 = &v17[2 * v18];
        *(_DWORD *)v86 = 2228285;
        *((_WORD *)v86 + 2) = 34;
        return result;
      }
LABEL_41:
      v30 = *(int8x16_t **)(v15 + 8);
      v31 = *(unsigned int *)(v15 + 4);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        v40 = &v17[2 * v31];
        if (v31 >= 0x40)
        {
          v41 = &v17[2 * (v31 & 0xFFFFFFC0)];
          v77 = 0uLL;
          v78 = v17;
          do
          {
            v133.val[0] = *v30;
            v79 = v30[1];
            v136.val[0] = v30[2];
            v80 = v30[3];
            v30 += 4;
            v81 = v80;
            v136.val[1] = 0uLL;
            v139.val[0] = v79;
            v133.val[1] = 0uLL;
            v82 = v78;
            vst2q_s8(v82, v133);
            v82 += 32;
            v139.val[1] = 0uLL;
            vst2q_s8(v82, v139);
            v83 = v78 + 64;
            vst2q_s8(v83, v136);
            v84 = v78 + 96;
            vst2q_s8(v84, *(int8x16x2_t *)(&v77 - 1));
            v78 += 128;
          }
          while (v78 != v41);
        }
        else
        {
          v41 = v17;
        }
        while (v41 != v40)
        {
          v85 = v30->u8[0];
          v30 = (int8x16_t *)((char *)v30 + 1);
          *(_WORD *)v41 = v85;
          v41 += 2;
        }
      }
      else if ((_DWORD)v31 == 1)
      {
        *(_WORD *)v17 = v30->i16[0];
      }
      else if ((_DWORD)v31)
      {
        result = memcpy(v17, v30, 2 * v31);
      }
      v18 = *(unsigned int *)(v15 + 4);
      goto LABEL_139;
    }
    if (WebCore::xmlnsAtomData)
    {
      if ((*(_BYTE *)(WebCore::xmlnsAtomData + 16) & 4) == 0)
      {
        result = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (!result)
          return result;
        *(_WORD *)result = 32;
        v17 = (char *)result + 2;
        goto LABEL_41;
      }
      result = (_DWORD *)MEMORY[0x19AEA4824](this);
      if (!result)
        return result;
      v35 = result;
      *(_BYTE *)result = 32;
      result = (_DWORD *)((char *)result + 1);
      v36 = *(_BYTE **)(v15 + 8);
      v37 = *(unsigned int *)(v15 + 4);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        if ((_DWORD)v37)
        {
          if ((_DWORD)v37 == 1)
            *(_BYTE *)result = *v36;
          else
            result = memcpy(result, v36, v37);
        }
      }
      else
      {
        v118 = (_DWORD *)((char *)result + v37);
        if (v37 >= 0x10)
        {
          v119 = (_DWORD *)((char *)result + (v37 & 0xFFFFFFF0));
          do
          {
            v120 = (unsigned __int128)vld2q_s8(v36);
            v36 += 32;
            *(_OWORD *)result = v120;
            result += 4;
          }
          while (result != v119);
          result = v119;
        }
        while (result != v118)
        {
          v121 = *v36;
          v36 += 2;
          *(_BYTE *)result = v121;
          result = (_DWORD *)((char *)result + 1);
        }
      }
      v38 = *(unsigned int *)(v15 + 4);
    }
    else
    {
      result = (_DWORD *)MEMORY[0x19AEA4824](this);
      if (!result)
        return result;
      v35 = result;
      v38 = 0;
      *(_BYTE *)result = 32;
    }
    v39 = (char *)v35 + v38;
    v39[3] = 34;
    *(_WORD *)(v39 + 1) = 8765;
    return result;
  }
  v21 = result;
  v22 = *a3;
  if (*a3 || (v22 = (_DWORD *)*MEMORY[0x1E0CBF3B8]) != 0)
    *v22 += 2;
  v23 = *a5;
  if (*a5
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a5, 8u, 0), (v23 = *a5) != 0))
  {
    v24 = *(_DWORD *)(v23 - 8);
  }
  else
  {
    v24 = 0;
  }
  v25 = 0;
  v26 = v22[4] >> 8;
  for (j = 1; ; ++j)
  {
    v28 = v26 & v24;
    v29 = (_DWORD **)(v23 + 16 * v28);
    result = *v29;
    if (*v29 != (_DWORD *)-1)
      break;
    v25 = v23 + 16 * v28;
LABEL_33:
    v26 = j + v28;
  }
  if (!result)
  {
    if (v25)
    {
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
      --*(_DWORD *)(*a5 - 16);
      *(_QWORD *)v25 = v22;
    }
    else
    {
      *v29 = v22;
      v25 = v23 + 16 * v28;
    }
    *(_QWORD *)(v25 + 8) = v8;
    v42 = *a5;
    if (*a5)
      v43 = *(_DWORD *)(v42 - 12) + 1;
    else
      v43 = 1;
    *(_DWORD *)(v42 - 12) = v43;
    v44 = *a5;
    if (*a5)
      v45 = *(_DWORD *)(v44 - 12);
    else
      v45 = 0;
    v46 = (*(_DWORD *)(v44 - 16) + v45);
    v47 = *(unsigned int *)(v44 - 4);
    if (v47 > 0x400)
    {
      if (v47 > 2 * v46)
        goto LABEL_74;
    }
    else
    {
      if (3 * v47 > 4 * v46)
        goto LABEL_74;
      if (!(_DWORD)v47)
      {
        v48 = 8;
        goto LABEL_73;
      }
    }
    v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
LABEL_73:
    result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a5, v48, (WTF::StringImpl **)v25);
    goto LABEL_74;
  }
  if (result != v22)
    goto LABEL_33;
  if (v22)
  {
    if (*v22 == 2)
      result = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v22, this);
    else
      *v22 -= 2;
  }
  v32 = v23 + 16 * v28;
  v34 = *(_QWORD *)(v32 + 8);
  v33 = (uint64_t *)(v32 + 8);
  if (v34 != *a4)
  {
    *v33 = *a4;
LABEL_74:
    if (*((_BYTE *)v21 + 41) == 1)
    {
      v49 = *a3;
      if (*a3)
      {
        if (v49[1])
        {
          v75 = (WTF::StringImpl *)*a4;
          if (*a4)
            *(_DWORD *)v75 += 2;
          v131 = v49;
          v132 = v75;
          WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>((WTF::StringImpl *)v130, a5, &v132, &v131);
          result = v132;
          if (v132)
          {
            if (*(_DWORD *)v132 == 2)
              result = (_DWORD *)WTF::StringImpl::destroy(v132, v76);
            else
              *(_DWORD *)v132 -= 2;
          }
        }
      }
    }
    if (*a4 != WebCore::XMLNames::xmlNamespaceURI)
    {
      v50 = *a3;
      v51 = "";
      if (*a3)
      {
        v53 = v50[1];
        v115 = v53 == 0;
        v52 = v53 != 0;
        if (!v115)
          v51 = ":";
      }
      else
      {
        v52 = 0;
      }
      v54 = WebCore::xmlnsAtomData;
      v55 = v52;
      v56 = *((_QWORD *)this + 1);
      if ((v56 || (v56 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v56 + 16) & 4) == 0)
      {
LABEL_84:
        v57 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (v57)
        {
          *v57 = 32;
          v58 = (char *)(v57 + 1);
          if (!v54)
          {
            v59 = 0;
            goto LABEL_146;
          }
LABEL_91:
          v61 = *(int8x16_t **)(v54 + 8);
          v62 = *(unsigned int *)(v54 + 4);
          if ((*(_BYTE *)(v54 + 16) & 4) != 0)
          {
            v63 = &v58[2 * v62];
            if (v62 >= 0x40)
            {
              v64 = &v58[2 * (v62 & 0xFFFFFFC0)];
              v87 = 0uLL;
              v88 = v58;
              do
              {
                v134.val[0] = *v61;
                v89 = v61[1];
                v137.val[0] = v61[2];
                v90 = v61[3];
                v61 += 4;
                v91 = v90;
                v137.val[1] = 0uLL;
                v140.val[0] = v89;
                v134.val[1] = 0uLL;
                v92 = v88;
                vst2q_s8(v92, v134);
                v92 += 32;
                v140.val[1] = 0uLL;
                vst2q_s8(v92, v140);
                v93 = v88 + 64;
                vst2q_s8(v93, v137);
                v94 = v88 + 96;
                vst2q_s8(v94, *(int8x16x2_t *)(&v87 - 1));
                v88 += 128;
              }
              while (v88 != v64);
            }
            else
            {
              v64 = v58;
            }
            while (v64 != v63)
            {
              v95 = v61->u8[0];
              v61 = (int8x16_t *)((char *)v61 + 1);
              *(_WORD *)v64 = v95;
              v64 += 2;
            }
          }
          else if ((_DWORD)v62 == 1)
          {
            *(_WORD *)v58 = v61->i16[0];
          }
          else if ((_DWORD)v62)
          {
            memcpy(v58, v61, 2 * v62);
          }
          v59 = *(unsigned int *)(v54 + 4);
LABEL_146:
          v96 = &v58[2 * v59];
          v97 = &v96[2 * v55];
          if (v55)
            *(_WORD *)v96 = *(unsigned __int8 *)v51;
          if (v50)
          {
            v98 = (int8x16_t *)*((_QWORD *)v50 + 1);
            v99 = v50[1];
            if ((v50[4] & 4) != 0)
            {
              v100 = &v97[2 * v99];
              if (v99 >= 0x40)
              {
                v101 = &v97[2 * (v99 & 0xFFFFFFC0)];
                v103 = 0uLL;
                v104 = v97;
                do
                {
                  v135.val[0] = *v98;
                  v105 = v98[1];
                  v138.val[0] = v98[2];
                  v106 = v98[3];
                  v98 += 4;
                  v107 = v106;
                  v138.val[1] = 0uLL;
                  v141.val[0] = v105;
                  v135.val[1] = 0uLL;
                  v108 = v104;
                  vst2q_s8(v108, v135);
                  v108 += 32;
                  v141.val[1] = 0uLL;
                  vst2q_s8(v108, v141);
                  v109 = v104 + 64;
                  vst2q_s8(v109, v138);
                  v110 = v104 + 96;
                  vst2q_s8(v110, *(int8x16x2_t *)(&v103 - 1));
                  v104 += 128;
                }
                while (v104 != v101);
              }
              else
              {
                v101 = v97;
              }
              while (v101 != v100)
              {
                v111 = v98->u8[0];
                v98 = (int8x16_t *)((char *)v98 + 1);
                *(_WORD *)v101 = v111;
                v101 += 2;
              }
            }
            else if ((_DWORD)v99 == 1)
            {
              *(_WORD *)v97 = v98->i16[0];
            }
            else if ((_DWORD)v99)
            {
              memcpy(v97, v98, 2 * v99);
            }
            v102 = v50[1];
          }
          else
          {
            v102 = 0;
          }
          *(_DWORD *)&v97[2 * v102] = 2228285;
        }
      }
      else if (!WebCore::xmlnsAtomData || (*(_BYTE *)(WebCore::xmlnsAtomData + 16) & 4) != 0)
      {
        if (v50 && (v50[4] & 4) == 0)
          goto LABEL_84;
        v65 = (_BYTE *)MEMORY[0x19AEA4824](this);
        if (v65)
        {
          *v65 = 32;
          v66 = v65 + 1;
          if (v54)
          {
            v67 = *(_BYTE **)(v54 + 8);
            v68 = *(unsigned int *)(v54 + 4);
            if ((*(_BYTE *)(v54 + 16) & 4) != 0)
            {
              if ((_DWORD)v68)
              {
                if ((_DWORD)v68 == 1)
                  *v66 = *v67;
                else
                  memcpy(v65 + 1, v67, v68);
              }
            }
            else
            {
              if (v68 < 0x10)
              {
                v122 = (unsigned __int128 *)(v65 + 1);
              }
              else
              {
                v122 = (unsigned __int128 *)&v66[v68 & 0xFFFFFFF0];
                v123 = (unsigned __int128 *)(v65 + 1);
                do
                {
                  v124 = (unsigned __int128)vld2q_s8(v67);
                  v67 += 32;
                  *v123++ = v124;
                }
                while (v123 != v122);
              }
              while (v122 != (unsigned __int128 *)&v66[v68])
              {
                v128 = *v67;
                v67 += 2;
                *(_BYTE *)v122 = v128;
                v122 = (unsigned __int128 *)((char *)v122 + 1);
              }
            }
            v69 = *(unsigned int *)(v54 + 4);
          }
          else
          {
            v69 = 0;
          }
          v70 = &v66[v69];
          if (v55)
            *v70 = *v51;
          v71 = &v70[v55];
          if (v50)
          {
            v72 = (char *)*((_QWORD *)v50 + 1);
            v73 = v50[1];
            if ((v50[4] & 4) != 0)
            {
              if ((_DWORD)v73)
              {
                if ((_DWORD)v73 == 1)
                  *v71 = *v72;
                else
                  memcpy(v71, v72, v73);
              }
            }
            else
            {
              if (v73 < 0x10)
              {
                v125 = (unsigned __int128 *)&v70[v55];
              }
              else
              {
                v125 = (unsigned __int128 *)&v71[v73 & 0xFFFFFFF0];
                v126 = (unsigned __int128 *)&v70[v55];
                do
                {
                  v127 = (unsigned __int128)vld2q_s8(v72);
                  v72 += 32;
                  *v126++ = v127;
                }
                while (v126 != v125);
              }
              while (v125 != (unsigned __int128 *)&v71[v73])
              {
                v129 = *v72;
                v72 += 2;
                *(_BYTE *)v125 = v129;
                v125 = (unsigned __int128 *)((char *)v125 + 1);
              }
            }
            v74 = v50[1];
          }
          else
          {
            v74 = 0;
          }
          *(_WORD *)&v71[v74] = 8765;
        }
      }
      else
      {
        v60 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (v60)
        {
          *v60 = 32;
          v58 = (char *)(v60 + 1);
          goto LABEL_91;
        }
      }
      if (*a4)
        v112 = *(_DWORD *)(*a4 + 4);
      else
        v112 = 0;
      result = WebCore::MarkupAccumulator::appendCharactersReplacingEntities(this, a4, 0, v112, 0xEFu);
      v130[0] = 34;
      v113 = *((_QWORD *)this + 1);
      if (v113
        && ((v114 = *((unsigned int *)this + 4), v114 < *(_DWORD *)(v113 + 4))
          ? (v115 = *(_QWORD *)this == 0)
          : (v115 = 0),
            v115))
      {
        v116 = *(_DWORD *)(v113 + 16);
        v117 = *(_QWORD *)(v113 + 8);
        *((_DWORD *)this + 4) = v114 + 1;
        if ((v116 & 4) != 0)
          *(_BYTE *)(v117 + v114) = 34;
        else
          *(_WORD *)(v117 + 2 * v114) = 34;
      }
      else
      {
        return (_DWORD *)WTF::StringBuilder::append();
      }
    }
  }
  return result;
}

uint64_t WebCore::isScriptEnabled(WebCore *this, WebCore::Node *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;

  if (!this)
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD **)(*(_QWORD *)(v2 + 304) + 16);
  v6 = v5[37];
  if (v6 && (*(_BYTE *)(v6 + 268) & 0x10) != 0 || (v7 = v5[3]) == 0 || !*(_QWORD *)(v7 + 8))
  {
    v11 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5[35] + 16);
    v9 = v5[17];
    if (*(_BYTE *)(v9 + 245))
      v10 = *(unsigned __int8 *)(v9 + 244) != 0;
    else
      v10 = (*(_QWORD *)(v9 + 688) >> 52) & 1;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 968))(v8, v10);
  }
  do
  {
    v12 = __ldaxr(v3);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v3));
  if (!v13)
  {
    atomic_store(1u, v3);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v3;
    v16 = v15;
    WTF::ensureOnMainThread();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return v11;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int8x16_t *v7;
  int v8;
  uint64_t v9;
  int8x16_t *v10;
  int v11;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    --v4;
    v10 = *(int8x16_t **)a2;
    if (v4 >> 31)
      goto LABEL_9;
  }
  else
  {
    v10 = *(int8x16_t **)a2;
  }
  v11 = v4;
  v9 = *a3;
  v5 = *(_QWORD *)(a4 + 8);
  if (v5)
  {
    --v5;
    v7 = *(int8x16_t **)a4;
    if (!(v5 >> 31))
      goto LABEL_5;
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195B05248);
  }
  v7 = *(int8x16_t **)a4;
LABEL_5:
  v8 = v5;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v10, &v9, &v7);
}

uint64_t *WebCore::appendXMLDeclaration(uint64_t *this, WTF::StringBuilder *a2, const WebCore::Document *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;

  if (*((_BYTE *)a2 + 3370))
  {
    v3 = *((_QWORD *)a2 + 212);
    if (v3)
      *(_DWORD *)v3 += 2;
    v4 = *((unsigned __int8 *)a2 + 3369);
    v5 = *((_QWORD *)a2 + 213);
    if (v5)
      *(_DWORD *)v5 += 2;
    v6 = (int8x16_t *)"";
    if (v3)
    {
      v10 = *(_DWORD *)(v3 + 4);
      v11 = v10 == 0;
      if (v10)
        v6 = (int8x16_t *)"\" encoding=\"";
      v7 = 13;
      if (v11)
        v7 = 1;
      if (v4)
        goto LABEL_8;
    }
    else
    {
      v7 = 1;
      if (v4)
      {
LABEL_8:
        if (v4 == 1)
        {
          v8 = (int8x16_t *)"\" standalone=\"yes";
          v9 = 17;
        }
        else
        {
          v8 = (int8x16_t *)"\" standalone=\"no";
          v9 = 16;
        }
LABEL_18:
        v12 = v7 - 1;
        v13 = this[1];
        if ((v13 || (v13 = *this) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0
          || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0
          || v3 && (*(_BYTE *)(v3 + 16) & 4) == 0)
        {
          this = (uint64_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)this);
          if (this)
          {
            *(_OWORD *)this = xmmword_1969F0C50;
            this[2] = 0x6F006900730072;
            *((_DWORD *)this + 6) = 3997806;
            *((_WORD *)this + 14) = 34;
            v15 = (_WORD *)this + 15;
            if (v5)
            {
              v16 = *(int8x16_t **)(v5 + 8);
              v17 = *(unsigned int *)(v5 + 4);
              if ((*(_BYTE *)(v5 + 16) & 4) != 0)
              {
                v18 = (char *)&v15[v17];
                if (v17 >= 0x40)
                {
                  v19 = (char *)&v15[v17 & 0xFFFFFFC0];
                  v22 = 0uLL;
                  v23 = (char *)this + 30;
                  do
                  {
                    v31.val[0] = *v16;
                    v24 = v16[1];
                    v32.val[0] = v16[2];
                    v25 = v16[3];
                    v16 += 4;
                    v26 = v25;
                    v32.val[1] = 0uLL;
                    v33.val[0] = v24;
                    v31.val[1] = 0uLL;
                    v27 = v23;
                    vst2q_s8(v27, v31);
                    v27 += 32;
                    v33.val[1] = 0uLL;
                    vst2q_s8(v27, v33);
                    v28 = v23 + 64;
                    vst2q_s8(v28, v32);
                    v29 = v23 + 96;
                    vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
                    v23 += 128;
                  }
                  while (v23 != v19);
                }
                else
                {
                  v19 = (char *)this + 30;
                }
                while (v19 != v18)
                {
                  v30 = v16->u8[0];
                  v16 = (int8x16_t *)((char *)v16 + 1);
                  *(_WORD *)v19 = v30;
                  v19 += 2;
                }
              }
              else if ((_DWORD)v17 == 1)
              {
                *v15 = v16->i16[0];
              }
              else if ((_DWORD)v17)
              {
                memcpy((char *)this + 30, v16, 2 * v17);
              }
              v21 = *(unsigned int *)(v5 + 4);
            }
            else
            {
              v21 = 0;
            }
            this = (uint64_t *)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v15[v21], v6, v12, v3, v8, v9, (int8x16_t *)"\"?>", 3);
          }
        }
        else
        {
          this = (uint64_t *)MEMORY[0x19AEA4824]();
          if (this)
          {
            qmemcpy(this, "<?xml version=\"", 15);
            this = (uint64_t *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((_BYTE *)this + 15, v5, v6, v12, v3, v8, v9, v20, "\"?>", 3);
          }
        }
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
          {
            this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v14);
            if (!v3)
              return this;
            goto LABEL_48;
          }
          *(_DWORD *)v5 -= 2;
        }
        if (!v3)
          return this;
LABEL_48:
        if (*(_DWORD *)v3 == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)v3, v14);
        *(_DWORD *)v3 -= 2;
        return this;
      }
    }
    v9 = 0;
    v8 = (int8x16_t *)"";
    goto LABEL_18;
  }
  return this;
}

char *WebCore::appendDocumentType(char *this, WTF::StringBuilder *a2, const WebCore::DocumentType *a3)
{
  uint64_t v3;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  const char *v8;
  char v9;
  const char *v10;
  uint64_t v11;
  int v12;
  int v13;
  const char *v14;
  uint64_t v15;
  int8x16_t *v16;
  int v17;
  int8x16_t *v18;
  _WORD *v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  const char *v25;
  unsigned int v26;
  const char *v27;
  _BYTE *v28;
  _BYTE *v29;
  size_t v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  const char *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  unsigned int i;
  uint64_t v40;
  char *v41;
  int v42;
  const char *v43;
  int v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  _WORD *v56;
  __int16 v57;
  char *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  uint64_t v61;
  int8x16_t *j;
  char *v63;
  char *v64;
  __int16 v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  char *v72;
  char *v73;
  char *v74;
  unsigned __int128 *v75;
  unsigned __int128 *v76;
  unsigned __int128 v77;
  unsigned __int128 *v78;
  unsigned __int128 *v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  char v82;
  char v83;
  int v84;
  uint64_t v85;
  int v86;
  char *v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;

  v3 = *((_QWORD *)a2 + 10);
  if (!v3)
    return this;
  if (!*(_DWORD *)(v3 + 4))
    return this;
  v5 = *((_QWORD *)a2 + 11);
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    v9 = 0;
    v10 = "\"";
    v7 = 1;
    v6 = 9;
    v8 = " PUBLIC \"";
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = "";
    v9 = 1;
    v10 = "";
  }
  v11 = *((_QWORD *)a2 + 12);
  if (v11)
  {
    if (*(_DWORD *)(v11 + 4))
    {
      if (!v5)
      {
        v14 = "\">";
        v13 = 2;
        v86 = 9;
        v87 = " SYSTEM \"";
        goto LABEL_8;
      }
      v42 = *(_DWORD *)(v5 + 4);
      v43 = " \"";
      if (!v42)
        v43 = " SYSTEM \"";
      v87 = (char *)v43;
      v13 = 2;
      if (v42)
        v44 = 2;
      else
        v44 = 9;
      v14 = "\">";
      v12 = v44;
LABEL_49:
      v86 = v12;
      goto LABEL_8;
    }
  }
  v12 = 0;
  v13 = 1;
  v14 = ">";
  v86 = 0;
  v87 = "";
  if (v11)
    goto LABEL_49;
LABEL_8:
  v15 = *((_QWORD *)this + 1);
  if ((!v15 && (v15 = *(_QWORD *)this) == 0 || (*(_BYTE *)(v15 + 16) & 4) != 0)
    && (*(_BYTE *)(v3 + 16) & 4) != 0
    && (!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0)
    && (!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0))
  {
    this = (char *)MEMORY[0x19AEA4824]();
    if (this)
    {
      v85 = v7;
      v25 = v14;
      v26 = v13;
      v27 = v10;
      *((_WORD *)this + 4) = 8261;
      *(_QWORD *)this = *(_QWORD *)"<!DOCTYPE ";
      v28 = this + 10;
      v29 = *(_BYTE **)(v3 + 8);
      v30 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((_DWORD)v30)
        {
          if ((_DWORD)v30 == 1)
            *v28 = *v29;
          else
            memcpy(this + 10, v29, v30);
        }
      }
      else
      {
        if (v30 < 0x10)
        {
          v75 = (unsigned __int128 *)(this + 10);
        }
        else
        {
          v75 = (unsigned __int128 *)&v28[v30 & 0xFFFFFFF0];
          v76 = (unsigned __int128 *)(this + 10);
          do
          {
            v77 = (unsigned __int128)vld2q_s8(v29);
            v29 += 32;
            *v76++ = v77;
          }
          while (v76 != v75);
        }
        while (v75 != (unsigned __int128 *)&v28[v30])
        {
          v82 = *v29;
          v29 += 2;
          *(_BYTE *)v75 = v82;
          v75 = (unsigned __int128 *)((char *)v75 + 1);
        }
      }
      v31 = &v28[*(unsigned int *)(v3 + 4)];
      if ((_DWORD)v6)
        memcpy(v31, v8, v6);
      v32 = &v31[v6];
      if (v5)
      {
        v33 = *(char **)(v5 + 8);
        v34 = *(unsigned int *)(v5 + 4);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          v35 = v27;
          v36 = v26;
          v37 = (char *)v25;
          v38 = v85;
          i = v86;
          if ((_DWORD)v34)
          {
            if ((_DWORD)v34 == 1)
              *v32 = *v33;
            else
              memcpy(v32, v33, v34);
          }
        }
        else
        {
          v78 = (unsigned __int128 *)&v32[v34];
          if (v34 < 0x10)
          {
            v79 = (unsigned __int128 *)v32;
          }
          else
          {
            v79 = (unsigned __int128 *)&v32[v34 & 0xFFFFFFF0];
            v80 = (unsigned __int128 *)v32;
            do
            {
              v81 = (unsigned __int128)vld2q_s8(v33);
              v33 += 32;
              *v80++ = v81;
            }
            while (v80 != v79);
          }
          v35 = v27;
          v36 = v26;
          v37 = (char *)v25;
          v38 = v85;
          for (i = v86; v79 != v78; v79 = (unsigned __int128 *)((char *)v79 + 1))
          {
            v83 = *v33;
            v33 += 2;
            *(_BYTE *)v79 = v83;
          }
        }
        v40 = *(unsigned int *)(v5 + 4);
      }
      else
      {
        v40 = 0;
        v35 = v27;
        v36 = v26;
        v37 = (char *)v25;
        v38 = v85;
        i = v86;
      }
      v41 = &v32[v40];
      if ((_DWORD)v38)
        *v41 = *v35;
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v41[v38], v87, i, v11, v37, v36);
    }
  }
  else
  {
    this = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)this);
    if (this)
    {
      v84 = v7;
      v16 = (int8x16_t *)v14;
      v17 = v13;
      v18 = (int8x16_t *)v10;
      *(_OWORD *)this = xmmword_1969F0C60;
      *((_DWORD *)this + 4) = 2097221;
      v19 = this + 20;
      v20 = *(int8x16_t **)(v3 + 8);
      v21 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        v22 = (char *)&v19[v21];
        if (v21 >= 0x40)
        {
          v23 = (char *)&v19[v21 & 0xFFFFFFC0];
          v45 = 0uLL;
          v46 = this + 20;
          do
          {
            v88.val[0] = *v20;
            v47 = v20[1];
            v90.val[0] = v20[2];
            v48 = v20[3];
            v20 += 4;
            v49 = v48;
            v90.val[1] = 0uLL;
            v92.val[0] = v47;
            v88.val[1] = 0uLL;
            v50 = v46;
            vst2q_s8(v50, v88);
            v50 += 32;
            v92.val[1] = 0uLL;
            vst2q_s8(v50, v92);
            v51 = v46 + 64;
            vst2q_s8(v51, v90);
            v52 = v46 + 96;
            vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
            v46 += 128;
          }
          while (v46 != v23);
        }
        else
        {
          v23 = this + 20;
        }
        while (v23 != v22)
        {
          v53 = v20->u8[0];
          v20 = (int8x16_t *)((char *)v20 + 1);
          *(_WORD *)v23 = v53;
          v23 += 2;
        }
      }
      else if ((_DWORD)v21 == 1)
      {
        *v19 = v20->i16[0];
      }
      else if ((_DWORD)v21)
      {
        memcpy(this + 20, v20, 2 * v21);
      }
      v54 = &v19[*(unsigned int *)(v3 + 4)];
      if ((v9 & 1) == 0)
      {
        v55 = 2 * v6;
        v56 = &v19[*(unsigned int *)(v3 + 4)];
        do
        {
          v57 = *(unsigned __int8 *)v8++;
          *v56++ = v57;
          v55 -= 2;
        }
        while (v55);
      }
      v58 = (char *)&v54[v6];
      v59 = v18;
      if (v5)
      {
        v60 = *(int8x16_t **)(v5 + 8);
        v61 = *(unsigned int *)(v5 + 4);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          v63 = &v58[2 * v61];
          if (v61 >= 0x40)
          {
            v64 = &v58[2 * (v61 & 0xFFFFFFC0)];
            v67 = 0uLL;
            v68 = v58;
            do
            {
              v89.val[0] = *v60;
              v69 = v60[1];
              v91.val[0] = v60[2];
              v70 = v60[3];
              v60 += 4;
              v71 = v70;
              v91.val[1] = 0uLL;
              v93.val[0] = v69;
              v89.val[1] = 0uLL;
              v72 = v68;
              vst2q_s8(v72, v89);
              v72 += 32;
              v93.val[1] = 0uLL;
              vst2q_s8(v72, v93);
              v73 = v68 + 64;
              vst2q_s8(v73, v91);
              v74 = v68 + 96;
              vst2q_s8(v74, *(int8x16x2_t *)(&v67 - 1));
              v68 += 128;
            }
            while (v68 != v64);
            v59 = v18;
          }
          else
          {
            v64 = v58;
          }
          for (j = (int8x16_t *)v87; v64 != v63; v64 += 2)
          {
            v65 = v60->u8[0];
            v60 = (int8x16_t *)((char *)v60 + 1);
            *(_WORD *)v64 = v65;
          }
        }
        else if ((_DWORD)v61 == 1)
        {
          *(_WORD *)v58 = v60->i16[0];
          j = (int8x16_t *)v87;
        }
        else
        {
          j = (int8x16_t *)v87;
          if ((_DWORD)v61)
            memcpy(v58, v60, 2 * v61);
        }
        v66 = *(unsigned int *)(v5 + 4);
      }
      else
      {
        v66 = 0;
        j = (int8x16_t *)v87;
      }
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v58[2 * v66], v59, v84, j, v86, v11, v16, v17);
    }
  }
  return this;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char,WTF::String,WTF::ASCIILiteral>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, char *a4, uint64_t *a5, uint64_t a6)
{
  int8x16_t *v6;
  int8x16_t *v7;
  size_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  size_t v14;
  uint64_t v15;
  char *result;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  unsigned __int128 *v36;
  unsigned __int128 *v37;
  unsigned __int128 v38;
  unsigned __int128 *v39;
  unsigned __int128 *v40;
  unsigned __int128 v41;
  char v42;
  char v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (size_t)&v6[-1].u64[1] + 7;
    if (((unint64_t)&v6[-1].u64[1] + 7) >> 31)
      goto LABEL_65;
  }
  else
  {
    v8 = 0;
  }
  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v13 = *(int8x16_t **)a6;
  v12 = *(_QWORD *)(a6 + 8);
  if (v12)
  {
    v14 = v12 - 1;
    if (!((unint64_t)(v12 - 1) >> 31))
      goto LABEL_5;
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x195B05F3CLL);
  }
  v14 = 0;
LABEL_5:
  v15 = *((_QWORD *)a1 + 1);
  if ((v15 || (v15 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0
    || v9 && (*(_BYTE *)(v9 + 16) & 4) == 0
    || v11 && (*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v17 = &result[2 * v8];
      if ((v8 & 0x7FFFFFC0) != 0)
      {
        v18 = &result[2 * (v8 & 0x7FFFFFC0)];
        v19 = 0uLL;
        do
        {
          v44.val[0] = *v7;
          v20 = v7[1];
          v45.val[0] = v7[2];
          v21 = v7[3];
          v7 += 4;
          v22 = v21;
          v45.val[1] = 0uLL;
          v46.val[0] = v20;
          v44.val[1] = 0uLL;
          v23 = result;
          vst2q_s8(v23, v44);
          v23 += 32;
          v46.val[1] = 0uLL;
          vst2q_s8(v23, v46);
          v24 = result + 64;
          vst2q_s8(v24, v45);
          v25 = result + 96;
          vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
          result += 128;
        }
        while (result != v18);
        result = v18;
      }
      while (result != v17)
      {
        v26 = v7->u8[0];
        v7 = (int8x16_t *)((char *)v7 + 1);
        *(_WORD *)result = v26;
        result += 2;
      }
      return (char *)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v17, v9, v10, v11, v13, v14);
    }
    return result;
  }
  result = (char *)MEMORY[0x19AEA4824]();
  if (!result)
    return result;
  v27 = result;
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 1)
      *result = v7->i8[0];
    else
      result = (char *)memcpy(result, v7, v8);
  }
  v28 = &v27[v8];
  if (v9)
  {
    v29 = *(char **)(v9 + 8);
    v30 = *(unsigned int *)(v9 + 4);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if ((_DWORD)v30)
      {
        if ((_DWORD)v30 == 1)
          *v28 = *v29;
        else
          result = (char *)memcpy(&v27[v8], v29, v30);
      }
    }
    else
    {
      if (v30 < 0x10)
      {
        v36 = (unsigned __int128 *)&v27[v8];
      }
      else
      {
        v36 = (unsigned __int128 *)&v28[v30 & 0xFFFFFFF0];
        v37 = (unsigned __int128 *)&v27[v8];
        do
        {
          v38 = (unsigned __int128)vld2q_s8(v29);
          v29 += 32;
          *v37++ = v38;
        }
        while (v37 != v36);
      }
      while (v36 != (unsigned __int128 *)&v28[v30])
      {
        v42 = *v29;
        v29 += 2;
        *(_BYTE *)v36 = v42;
        v36 = (unsigned __int128 *)((char *)v36 + 1);
      }
    }
    v31 = *(unsigned int *)(v9 + 4);
  }
  else
  {
    v31 = 0;
  }
  v28[v31] = v10;
  v32 = &v28[v31 + 1];
  if (!v11)
  {
    v35 = 0;
    if (!(_DWORD)v14)
      return result;
    goto LABEL_36;
  }
  v33 = *(char **)(v11 + 8);
  v34 = *(unsigned int *)(v11 + 4);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
    if ((_DWORD)v34)
    {
      if ((_DWORD)v34 == 1)
        *v32 = *v33;
      else
        result = (char *)memcpy(v32, v33, v34);
    }
  }
  else
  {
    if (v34 < 0x10)
    {
      v39 = (unsigned __int128 *)&v28[v31 + 1];
    }
    else
    {
      v39 = (unsigned __int128 *)&v32[v34 & 0xFFFFFFF0];
      v40 = (unsigned __int128 *)&v28[v31 + 1];
      do
      {
        v41 = (unsigned __int128)vld2q_s8(v33);
        v33 += 32;
        *v40++ = v41;
      }
      while (v40 != v39);
    }
    while (v39 != (unsigned __int128 *)&v32[v34])
    {
      v43 = *v33;
      v33 += 2;
      *(_BYTE *)v39 = v43;
      v39 = (unsigned __int128 *)((char *)v39 + 1);
    }
  }
  v35 = *(unsigned int *)(v11 + 4);
  if ((_DWORD)v14)
  {
LABEL_36:
    result = &v32[v35];
    if ((_DWORD)v14 == 1)
      *result = v13->i8[0];
    else
      return (char *)memcpy(result, v13, v14);
  }
  return result;
}

unsigned int *WebCore::MergeIdenticalElementsCommand::doApply(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int **v15;
  uint64_t v16;
  uint64_t *v17;
  WebCore::Node *v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  unsigned int **v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::Node *v28;
  char v29[8];
  WTF::StringImpl *v30;
  char v31;

  v2 = *((_QWORD *)this + 31);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_QWORD *)this + 32);
  *(_DWORD *)(v3 + 24) += 2;
  if (*(_QWORD *)(v2 + 56) == v3)
  {
    v4 = this;
    this = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
    if ((_DWORD)this)
    {
      this = (unsigned int *)WebCore::Node::computeEditability(v3, 0, 1);
      if ((_DWORD)this)
      {
        v5 = *(_QWORD *)(v3 + 80);
        if (v5)
          *(_DWORD *)(v5 + 24) += 2;
        this = (unsigned int *)*((_QWORD *)v4 + 33);
        *((_QWORD *)v4 + 33) = v5;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        v6 = *(_QWORD *)(v2 + 80);
        if (v6)
        {
          v7 = 0;
          LODWORD(v8) = 0;
          v9 = 0;
          do
          {
            v10 = v7;
            if (v7 == (_DWORD)v8)
            {
              v11 = v7 + 1;
              v12 = v10 + (v10 >> 2);
              if (v12 >= 0x10)
                v13 = v12 + 1;
              else
                v13 = 16;
              if (v13 <= v11)
                v8 = v10 + 1;
              else
                v8 = v13;
              if (v8 >> 29)
              {
                __break(0xC471u);
                return this;
              }
              v14 = (char *)WTF::fastMalloc((WTF *)(8 * v8));
              this = (unsigned int *)memcpy(v14, v9, 8 * v10);
              if (v9)
              {
                if (v14 == v9)
                {
                  v14 = 0;
                  LODWORD(v8) = 0;
                }
                this = (unsigned int *)WTF::fastFree((WTF *)v9, a2);
              }
              v9 = v14;
            }
            *(_DWORD *)(v6 + 24) += 2;
            *(_QWORD *)&v9[8 * v10] = v6;
            v7 = v10 + 1;
            v6 = *(_QWORD *)(v6 + 56);
          }
          while (v6);
          v15 = (unsigned int **)&v9[8 * v7];
          if ((_DWORD)v10 == -1)
            goto LABEL_48;
          v16 = 0;
          do
          {
            v17 = *(uint64_t **)&v9[v16];
            v18 = (WebCore::Node *)*((_QWORD *)v4 + 33);
            if (v18)
              *((_DWORD *)v18 + 6) += 2;
            v28 = v18;
            WebCore::ContainerNode::insertBefore(v3, v17, &v28, (uint64_t)v29);
            if (v31)
            {
              v19 = v30;
              v30 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v19 -= 2;
              }
            }
            this = (unsigned int *)v28;
            v28 = 0;
            if (this)
            {
              if (this[6] == 2)
              {
                if ((*((_WORD *)this + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
              }
              else
              {
                this[6] -= 2;
              }
            }
            v16 += 8;
          }
          while (8 * (v10 + 1) != v16);
          v20 = 0;
        }
        else
        {
          v15 = 0;
          v9 = 0;
LABEL_48:
          v20 = 1;
        }
        v21 = *(_QWORD *)(v2 + 32);
        if (v21)
        {
          *(_DWORD *)(v21 + 24) += 2;
          this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v21, (WebCore::Node *)v2, &v25);
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            v23 = *(_WORD *)(v21 + 30);
            if ((v23 & 0x400) == 0)
            {
              v24 = *(_WORD *)(v21 + 28);
              if ((v24 & 0xF000) == 0x9000)
              {
                this = WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
              }
              else
              {
                if ((v24 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
                  v23 = *(_WORD *)(v21 + 30);
                }
                *(_WORD *)(v21 + 30) = v23 | 0x400;
                this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
              }
            }
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
        }
        if ((_BYTE)v27)
        {
          this = (unsigned int *)v26;
          v26 = 0;
          if (this)
          {
            if (*this == 2)
            {
              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
              if ((v20 & 1) != 0)
                goto LABEL_57;
              goto LABEL_66;
            }
            *this -= 2;
          }
        }
        if ((v20 & 1) != 0)
          goto LABEL_57;
LABEL_66:
        v22 = (unsigned int **)v9;
        do
        {
          this = *v22;
          *v22 = 0;
          if (this)
          {
            if (this[6] == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
            }
            else
            {
              this[6] -= 2;
            }
          }
          ++v22;
        }
        while (v22 != v15);
LABEL_57:
        if (v9)
          this = (unsigned int *)WTF::fastFree((WTF *)v9, a2);
        if (!v3)
          goto LABEL_4;
      }
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
LABEL_4:
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::MergeIdenticalElementsCommand::doUnapply(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char v22[8];
  WTF::StringImpl *v23;
  char v24;
  WebCore::Node *v25;
  char v26[8];
  WTF::StringImpl *v27;
  unsigned __int8 v28;

  v3 = *((_QWORD *)this + 32);
  v2 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  v5 = *(_QWORD *)(v3 + 32);
  if (!v5)
  {
LABEL_56:
    if (v4)
    {
      *(_DWORD *)(v3 + 24) = v4;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    goto LABEL_58;
  }
  v6 = this;
  *(_DWORD *)(v5 + 24) += 2;
  this = (unsigned int *)WebCore::Node::computeEditability(v5, 0, 1);
  if ((_DWORD)this)
  {
    v7 = *((_QWORD *)v6 + 31);
    *(_DWORD *)(v7 + 24) += 2;
    *(_DWORD *)(v3 + 24) += 2;
    v25 = (WebCore::Node *)v3;
    WebCore::ContainerNode::insertBefore(v5, (uint64_t *)v7, &v25, (uint64_t)v26);
    v8 = v28;
    if (v28)
    {
      v9 = v27;
      v27 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    this = (unsigned int *)v25;
    v25 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
    if (!v8)
    {
      v10 = *(_QWORD *)(v3 + 80);
      if (v10)
      {
        if (v2 != v10)
        {
          v11 = 0;
          LODWORD(v12) = 0;
          v13 = 0;
          do
          {
            v14 = v11;
            if (v11 == (_DWORD)v12)
            {
              v15 = v11 + ((unint64_t)v11 >> 2);
              if (v15 >= 0x10)
                v16 = v15 + 1;
              else
                v16 = 16;
              if (v16 <= (unint64_t)v11 + 1)
                v12 = v11 + 1;
              else
                v12 = v16;
              if (v12 >> 29)
              {
                __break(0xC471u);
                return this;
              }
              v17 = (char *)WTF::fastMalloc((WTF *)(8 * v12));
              this = (unsigned int *)memcpy(v17, v13, 8 * v14);
              if (v13)
              {
                if (v17 == v13)
                {
                  v17 = 0;
                  LODWORD(v12) = 0;
                }
                this = (unsigned int *)WTF::fastFree((WTF *)v13, a2);
              }
              v13 = v17;
            }
            *(_DWORD *)(v10 + 24) += 2;
            *(_QWORD *)&v13[8 * v14] = v10;
            v11 = v14 + 1;
            v10 = *(_QWORD *)(v10 + 56);
            if (v10)
              v18 = v2 == v10;
            else
              v18 = 1;
          }
          while (!v18);
          if ((_DWORD)v14 == -1)
            goto LABEL_49;
          v19 = 0;
          do
          {
            WebCore::ContainerNode::appendChild(v7, *(WebCore::Node **)&v13[v19], (uint64_t)v22);
            if (v24)
            {
              v20 = v23;
              v23 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v20 -= 2;
              }
            }
            v19 += 8;
          }
          while (8 * (v14 + 1) != v19);
          v21 = 0;
          do
          {
            this = *(unsigned int **)&v13[v21];
            *(_QWORD *)&v13[v21] = 0;
            if (this)
            {
              if (this[6] == 2)
              {
                if ((*((_WORD *)this + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
              }
              else
              {
                this[6] -= 2;
              }
            }
            v21 += 8;
          }
          while (8 * (v14 + 1) != v21);
          if (v13)
LABEL_49:
            this = (unsigned int *)WTF::fastFree((WTF *)v13, a2);
        }
      }
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 24) - 2;
    goto LABEL_56;
  }
LABEL_58:
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::ModifySelectionListLevelCommand::preservesTypingStyle(WebCore::ModifySelectionListLevelCommand *this)
{
  return 1;
}

unsigned int *WebCore::ModifySelectionListLevelCommand::insertSiblingNodeRangeBefore(unsigned int *this, WebCore::Node *a2, WebCore::Node *a3, WebCore::Node *a4)
{
  WebCore::Node *v6;
  WebCore::CompositeEditCommand *v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;

  if (a2)
  {
    v6 = a2;
    v7 = (WebCore::CompositeEditCommand *)this;
    *((_DWORD *)a2 + 6) += 2;
    while (1)
    {
      v8 = *((_QWORD *)v6 + 7);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)v7 + 184))(v7, v6, 1);
      *((_DWORD *)v6 + 6) += 2;
      v10 = v6;
      WebCore::CompositeEditCommand::insertNodeBefore(v7, (uint64_t *)&v10, (uint64_t)a4, 1);
      this = (unsigned int *)v10;
      v10 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v9);
        }
        else
        {
          this[6] -= 2;
        }
      }
      if (v6 == a3)
        break;
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v6, v9);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
      if (!v8)
        return this;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        v6 = (WebCore::Node *)v8;
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
          v6 = (WebCore::Node *)v8;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
        v6 = (WebCore::Node *)v8;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a3, v9);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::ModifySelectionListLevelCommand::appendSiblingNodeRange(unsigned int *this, WebCore::Node *a2, WebCore::Node *a3, WebCore::Element *a4)
{
  WebCore::Node *v6;
  WebCore::CompositeEditCommand *v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;

  if (a2)
  {
    v6 = a2;
    v7 = (WebCore::CompositeEditCommand *)this;
    *((_DWORD *)a2 + 6) += 2;
    while (1)
    {
      v8 = *((_QWORD *)v6 + 7);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)v7 + 184))(v7, v6, 1);
      *((_DWORD *)v6 + 6) += 2;
      v10 = a4;
      v11 = v6;
      *((_DWORD *)a4 + 6) += 2;
      WebCore::CompositeEditCommand::appendNode(v7, (uint64_t *)&v11, (uint64_t *)&v10);
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v9);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      this = (unsigned int *)v11;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef(v11, v9);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      if (v6 == a3)
        break;
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v6, v9);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
      if (!v8)
        return this;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        v6 = (WebCore::Node *)v8;
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
          v6 = (WebCore::Node *)v8;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
        v6 = (WebCore::Node *)v8;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a3, v9);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::IncreaseSelectionListLevelCommand::doApply(WebCore::IncreaseSelectionListLevelCommand *this)
{
  void *v2;
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  WebCore::Node *v21;
  uint64_t v22;
  unsigned int *result;
  void *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;

  v27 = 0;
  v28 = 0;
  if (!WebCore::getStartEndListChildren((uint64_t)this + 128, (WebCore::Node *)&v28, &v27))
    goto LABEL_37;
  v3 = v28;
  v4 = *(unsigned __int8 *)((*((_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFLL) + 0x2C);
  if (!(*(unsigned int *)((*((_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFLL) + 0x28) | (unint64_t)(v4 << 32)))
    goto LABEL_37;
  v5 = *(_QWORD *)((*(unsigned int *)((*((_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFLL) + 0x28) | (unint64_t)(v4 << 32))
                 + 8);
  if (!v5)
    goto LABEL_37;
  if ((*(_BYTE *)(v5 + 45) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v7 = *(_WORD *)(v6 + 28);
      if ((v7 & 0x10) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
        if (v8 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
          || v8 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
          || v8 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
        {
          if ((v7 & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195B06D54);
          }
          WebCore::ModifySelectionListLevelCommand::appendSiblingNodeRange((unsigned int *)this, v3, v27, (WebCore::Element *)v6);
          v12 = *((_QWORD *)this + 36);
          *((_QWORD *)this + 36) = v6;
          if (v12)
          {
            if (*(_DWORD *)(v12 + 24) != 2)
            {
              *(_DWORD *)(v12 + 24) -= 2;
              goto LABEL_37;
            }
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              goto LABEL_53;
          }
          goto LABEL_37;
        }
      }
    }
  }
  v9 = *((unsigned __int8 *)this + 280);
  if (v9 == 2)
  {
    v13 = *((_QWORD *)this + 2);
    v14 = bmalloc::api::isoAllocate();
    v11 = (WebCore::Node *)v14;
    *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v14 + 24) = 0x101C00000002;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v13 + 96;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    ++*(_DWORD *)(v13 + 3324);
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    v15 = WebCore::HTMLNames::ulTag;
    if (WebCore::HTMLNames::ulTag)
      ++*(_DWORD *)WebCore::HTMLNames::ulTag;
    *(_QWORD *)(v14 + 96) = v15;
    *(_QWORD *)(v14 + 104) = 0;
    *(_QWORD *)v14 = off_1E33D09E0;
  }
  else if (v9 == 1)
  {
    v16 = *((_QWORD *)this + 2);
    v17 = bmalloc::api::isoAllocate();
    v11 = (WebCore::Node *)v17;
    *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v17 + 24) = 0x101C00000002;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = v16 + 96;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    ++*(_DWORD *)(v16 + 3324);
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 88) = 0;
    v18 = WebCore::HTMLNames::olTag;
    if (WebCore::HTMLNames::olTag)
      ++*(_DWORD *)WebCore::HTMLNames::olTag;
    *(_QWORD *)(v17 + 96) = v18;
    *(_QWORD *)(v17 + 104) = 0;
    *(_QWORD *)v17 = off_1E33C7068;
    *(_BYTE *)(v17 + 112) = 0;
    *(_BYTE *)(v17 + 116) = 0;
    *(_BYTE *)(v17 + 120) = 0;
    *(_BYTE *)(v17 + 124) = 0;
    *(_BYTE *)(v17 + 128) = 0;
  }
  else if (!*((_BYTE *)this + 280) && (v10 = *((_QWORD *)v3 + 4)) != 0 && (*(_WORD *)(v10 + 28) & 8) != 0)
  {
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)v10, &v26);
    v11 = v26;
    v26 = 0;
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v19);
        v25 = v26;
        v26 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25, v24);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  else
  {
    v11 = 0;
  }
  *((_DWORD *)v11 + 6) += 2;
  v26 = v11;
  WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v26, (uint64_t)v3, 1);
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v20);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  WebCore::ModifySelectionListLevelCommand::appendSiblingNodeRange((unsigned int *)this, v3, v27, v11);
  v22 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = v11;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v2);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) != 2)
    {
      *(_DWORD *)(v6 + 24) -= 2;
      goto LABEL_37;
    }
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      v12 = v6;
LABEL_53:
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v2);
    }
  }
LABEL_37:
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v27, v2);
    }
    else
    {
      *((_DWORD *)v27 + 6) -= 2;
    }
  }
  result = (unsigned int *)v28;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v28, v2);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  return result;
}

BOOL WebCore::IncreaseSelectionListLevelCommand::canIncreaseSelectionListLevel(WebCore::IncreaseSelectionListLevelCommand *this, WebCore::Document *a2)
{
  void *v2;
  uint64_t v3;
  _BOOL8 v4;
  WebCore::Node *v6;
  WebCore::Node *v7;

  v6 = 0;
  v7 = 0;
  v4 = WebCore::getStartEndListChildren(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 66) + 8) + 296) + 3064) + 56, (WebCore::Node *)&v7, &v6)&& (v3 = *(unsigned __int8 *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2C), *(unsigned int *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x28) | (unint64_t)(v3 << 32))&& *(_QWORD *)((*(unsigned int *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x28) | (unint64_t)(v3 << 32))+ 8) != 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v2);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v2);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v4;
}

uint64_t WebCore::IncreaseSelectionListLevelCommand::increaseSelectionListLevel@<X0>(WebCore::Node *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  uint64_t result;
  uint64_t v11;
  WebCore::Node *v12;

  v6 = WTF::fastMalloc((WTF *)0x128);
  *((_DWORD *)a1 + 6) += 2;
  v12 = a1;
  v7 = WebCore::EditCommand::EditCommand(v6, (uint64_t *)&v12, 59);
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_QWORD *)v7 = off_1E33AD330;
  *(_BYTE *)(v7 + 280) = a2;
  *(_QWORD *)(v7 + 288) = 0;
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  result = WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v6);
  v11 = *(_QWORD *)(v6 + 288);
  *(_QWORD *)(v6 + 288) = 0;
  *a3 = v11;
  if (*(_DWORD *)(v6 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  --*(_DWORD *)(v6 + 8);
  return result;
}

unsigned int *WebCore::DecreaseSelectionListLevelCommand::doApply(WebCore::DecreaseSelectionListLevelCommand *this)
{
  void *v2;
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  char v20;
  unsigned int *result;
  char v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;

  v23 = 0;
  v24 = 0;
  if (!WebCore::getStartEndListChildren((uint64_t)this + 128, (WebCore::Node *)&v24, &v23))
    goto LABEL_75;
  v3 = v24;
  v4 = *((_QWORD *)v24 + 4);
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    goto LABEL_75;
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0)
    goto LABEL_75;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
  if (v6 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
    && v6 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
    && v6 != *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
  {
    goto LABEL_75;
  }
  v7 = *(unsigned __int8 *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x2C);
  if (!(*(unsigned int *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x28) | (unint64_t)(v7 << 32))
    || (v8 = *(_QWORD *)((*(unsigned int *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x28) | (unint64_t)(v7 << 32))
                       + 8)) == 0
    || (*(_BYTE *)(v8 + 45) & 1) != 0)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
  if (!v9)
  {
LABEL_13:
    v10 = 1;
    goto LABEL_14;
  }
  v10 = 0;
  *(_DWORD *)(v9 + 24) += 2;
LABEL_14:
  v11 = v23;
  v12 = *(unsigned __int8 *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x33);
  if (*(unsigned int *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x2F) | (unint64_t)(v12 << 32)
    && (v13 = *(_QWORD *)((*(unsigned int *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x2F) | (unint64_t)(v12 << 32))
                        + 8)) != 0
    && (*(_BYTE *)(v13 + 45) & 1) == 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
    if (v14)
    {
      v15 = 0;
      *(_DWORD *)(v14 + 24) += 2;
      goto LABEL_21;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 1;
LABEL_21:
  v16 = *(_WORD *)(v4 + 28);
  if ((v16 & 8) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    if (!v10)
    {
LABEL_23:
      if (v15)
      {
        v22 = v10;
        *((_DWORD *)v3 + 6) += 2;
        if (v4)
          *(_DWORD *)(v4 + 24) += 2;
        v17 = v4;
        while (1)
        {
          v18 = (uint64_t)v3;
          v3 = (WebCore::Node *)*((_QWORD *)v3 + 7);
          if (v3)
            *((_DWORD *)v3 + 6) += 2;
          (*(void (**)(WebCore::DecreaseSelectionListLevelCommand *, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 184))(this, v18, 1);
          *(_DWORD *)(v18 + 24) += 2;
          v25 = (WebCore::Node *)v18;
          WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)this, (uint64_t *)&v25, v17);
          v19 = v25;
          v25 = 0;
          if (v19)
          {
            if (*((_DWORD *)v19 + 6) == 2)
            {
              if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v19, v2);
            }
            else
            {
              *((_DWORD *)v19 + 6) -= 2;
            }
          }
          if ((WebCore::Node *)v18 == v11)
            break;
          *(_DWORD *)(v18 + 24) += 2;
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v17, v2);
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
          if (v3)
            *((_DWORD *)v3 + 6) += 2;
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18, v2);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
          if (!v3)
          {
            v11 = 0;
            goto LABEL_61;
          }
          if (*((_DWORD *)v3 + 6) == 2)
          {
            v17 = v18;
            if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v3, v2);
              v17 = v18;
            }
          }
          else
          {
            *((_DWORD *)v3 + 6) -= 2;
            v17 = v18;
          }
        }
        if (v3)
        {
          if (*((_DWORD *)v3 + 6) == 2)
          {
            if ((*((_WORD *)v3 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v3, v2);
          }
          else
          {
            *((_DWORD *)v3 + 6) -= 2;
          }
        }
        v18 = v17;
LABEL_61:
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18, v2);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
        LOBYTE(v10) = v22;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v2);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
      }
      else if (v4)
      {
        WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v4, v3);
        WebCore::ModifySelectionListLevelCommand::insertSiblingNodeRangeBefore((unsigned int *)this, v3, v11, (WebCore::Node *)v4);
      }
      goto LABEL_66;
    }
  }
  else
  {
    v4 = 0;
    if (!v10)
      goto LABEL_23;
  }
  WebCore::ModifySelectionListLevelCommand::insertSiblingNodeRangeBefore((unsigned int *)this, v3, v11, (WebCore::Node *)v4);
  v20 = v15 ^ 1;
  if (!v4)
    v20 = 1;
  if ((v20 & 1) == 0)
    (*(void (**)(WebCore::DecreaseSelectionListLevelCommand *, uint64_t, uint64_t))(*(_QWORD *)this + 184))(this, v4, 1);
LABEL_66:
  if ((v16 & 8) != 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
LABEL_75:
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v2);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  result = (unsigned int *)v24;
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v24, v2);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  return result;
}

BOOL WebCore::DecreaseSelectionListLevelCommand::canDecreaseSelectionListLevel(WebCore::DecreaseSelectionListLevelCommand *this, WebCore::Document *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  WebCore::Node *v7;
  WebCore::Node *v8;

  v7 = 0;
  v8 = 0;
  if (WebCore::getStartEndListChildren(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 66) + 8) + 296) + 3064) + 56, (WebCore::Node *)&v8, &v7)&& (v3 = *(_QWORD *)(*((_QWORD *)v8 + 4) + 32)) != 0&& (*(_WORD *)(v3 + 28) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
    v5 = v4 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
      || v4 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
      || v4 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24);
  }
  else
  {
    v5 = 0;
  }
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v2);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return v5;
}

unsigned int *WebCore::DecreaseSelectionListLevelCommand::decreaseSelectionListLevel(WebCore::DecreaseSelectionListLevelCommand *this, WebCore::Document *a2)
{
  _DWORD *v2;
  uint64_t v3;
  void *v4;
  unsigned int *result;
  WebCore::Node *v6;

  *((_DWORD *)this + 6) += 2;
  v6 = this;
  v2 = (_DWORD *)WTF::fastMalloc((WTF *)0x118);
  v3 = WebCore::EditCommand::EditCommand((uint64_t)v2, (uint64_t *)&v6, 59);
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)v3 = off_1E33AD400;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v3);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  result = (unsigned int *)v6;
  v6 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::MoveSelectionCommand::doApply(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  signed int v6;
  signed int v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  signed int v13;
  char v14;
  int v15;
  WebCore::Node *v16;
  char v17;
  uint64_t *v18;
  void *v19;
  WebCore::Node *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t **v28;
  uint64_t v29;
  void *v30;
  Node *var0;
  void *v32;
  char v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  WebCore::Node *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t **v46;
  WebCore::Node *v47[13];
  VisiblePosition v48;
  WebCore::Node *v49;
  signed int v50;
  char v51;

  v2 = *((_QWORD *)this + 36);
  if (!v2)
    return this;
  v3 = (uint64_t)this;
  *(_DWORD *)(v2 + 24) += 2;
  v49 = (WebCore::Node *)v2;
  v50 = this[74];
  v51 = *((_BYTE *)this + 300);
  v4 = *((_QWORD *)this + 26);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  if (v4 == v2)
  {
    v5 = v51;
    if ((v51 & 7) == 0 && (this[55] & 7) == 0)
    {
      v6 = this[54];
      v7 = v50;
      v8 = v50 - v6;
      if (v50 > v6)
      {
        v50 -= v6;
        if ((v51 & 8) != 0)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2) & 1) != 0)
          {
            v9 = 0;
          }
          else if (v7 == v6)
          {
            v9 = 1;
          }
          else
          {
            v9 = 2;
          }
          v5 = v9 | v51 & 0xF8;
          v51 = v5;
        }
        v10 = *(_QWORD *)(v3 + 192);
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 24) + 2;
          *(_DWORD *)(v10 + 24) = v11;
          if ((*(_BYTE *)(v3 + 204) & 7) != 0)
            goto LABEL_24;
        }
        else if ((*(_BYTE *)(v3 + 204) & 7) != 0)
        {
          goto LABEL_26;
        }
        if ((v5 & 7u) > 4)
        {
          v12 = 0;
        }
        else
        {
          v12 = v2;
          if (((1 << (v5 & 7)) & 0x19) == 0)
            v12 = *(_QWORD *)(v2 + 32);
        }
        if (v10 == v12)
        {
          v13 = *(_DWORD *)(v3 + 200) + v8;
          v50 = v13;
          if ((v5 & 8) != 0)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2) & 1) != 0)
            {
              v14 = 0;
            }
            else if (v13)
            {
              v14 = 2;
            }
            else
            {
              v14 = 1;
            }
            v51 = v14 | v5 & 0xF8;
          }
        }
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 24);
LABEL_24:
          v15 = v11 - 2;
          if (v15)
          {
            *(_DWORD *)(v10 + 24) = v15;
          }
          else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
          }
        }
      }
    }
  }
LABEL_26:
  v16 = *(WebCore::Node **)(v3 + 16);
  *((_DWORD *)v16 + 6) += 2;
  v47[0] = v16;
  v17 = *(_BYTE *)(v3 + 305);
  v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x248);
  WebCore::DeleteSelectionCommand::DeleteSelectionCommand((uint64_t)v18, (uint64_t *)v47, v17, 1, 0, 1, 1, 10);
  v20 = v47[0];
  v47[0] = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v19);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  ++*(_DWORD *)(v3 + 8);
  v47[0] = (WebCore::Node *)v3;
  WebCore::EditCommand::setParent(v18, (uint64_t *)v47);
  if (*(_DWORD *)(v3 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  else
    --*(_DWORD *)(v3 + 8);
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v18);
  v22 = *(unsigned int *)(v3 + 268);
  if ((_DWORD)v22 == *(_DWORD *)(v3 + 264))
  {
    v23 = v22 + (v22 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v22 + 1)
      v25 = v22 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
      goto LABEL_108;
    v26 = *(void **)(v3 + 256);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v3 + 264) = v25;
    *(_QWORD *)(v3 + 256) = v27;
    memcpy(v27, v26, 8 * v22);
    if (v26)
    {
      if (*(void **)(v3 + 256) == v26)
      {
        *(_QWORD *)(v3 + 256) = 0;
        *(_DWORD *)(v3 + 264) = 0;
      }
      WTF::fastFree((WTF *)v26, v21);
    }
    v22 = *(unsigned int *)(v3 + 268);
    v28 = (uint64_t **)(*(_QWORD *)(v3 + 256) + 8 * v22);
  }
  else
  {
    v28 = (uint64_t **)(*(_QWORD *)(v3 + 256) + 8 * v22);
  }
  *v28 = v18;
  *(_DWORD *)(v3 + 268) = v22 + 1;
  if ((*(_BYTE *)(v2 + 22) & 8) != 0)
  {
    v29 = v2;
  }
  else
  {
    v29 = *(_QWORD *)(v3 + 192);
    if (v29)
      *(_DWORD *)(v29 + 24) += 2;
    v49 = (WebCore::Node *)v29;
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v21);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    v50 = *(_DWORD *)(v3 + 200);
    v51 = *(_BYTE *)(v3 + 204);
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v49, (uint64_t)&v48);
  v48.var1 = 1;
  WebCore::CompositeEditCommand::cleanupAfterDeletion((WebCore::CompositeEditCommand *)v3, &v48);
  var0 = v48.var0.var0.var0;
  v48.var0.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v30);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  WebCore::VisibleSelection::VisibleSelection((uint64_t)v47, (uint64_t *)&v49, (uint64_t *)&v49, *(_BYTE *)(v3 + 224), (*(unsigned __int8 *)(v3 + 226) >> 1) & 1);
  WebCore::EditCommand::setEndingSelection((uint64_t *)v3, (const WebCore::VisibleSelection *)v47);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v47);
  WebCore::EditCommand::setStartingSelection((WebCore::EditCommand *)v3, (const WebCore::VisibleSelection *)(v3 + 128));
  if ((*(_BYTE *)(v29 + 22) & 8) == 0)
    goto LABEL_76;
  v33 = *(_BYTE *)(v3 + 304);
  v34 = *(WebCore::Node **)(v3 + 16);
  *((_DWORD *)v34 + 6) += 2;
  v47[0] = v34;
  v35 = *(_QWORD *)(v3 + 280);
  *(_DWORD *)(v35 + 24) += 2;
  v36 = (uint64_t *)WTF::fastMalloc((WTF *)0x1D8);
  v37 = WebCore::EditCommand::EditCommand((uint64_t)v36, (uint64_t *)v47, 15);
  *(_OWORD *)(v37 + 248) = 0u;
  *(_OWORD *)(v37 + 264) = 0u;
  *(_QWORD *)v37 = off_1E33ADA18;
  *(_QWORD *)(v37 + 280) = 0;
  *(_DWORD *)(v37 + 288) = 0;
  *(_BYTE *)(v37 + 292) &= 0xF0u;
  *(_QWORD *)(v37 + 296) = 0;
  *(_DWORD *)(v37 + 304) = 0;
  *(_BYTE *)(v37 + 308) &= 0xF0u;
  *(_QWORD *)(v37 + 312) = 0;
  *(_DWORD *)(v37 + 320) = 0;
  *(_BYTE *)(v37 + 324) &= 0xF0u;
  *(_QWORD *)(v37 + 328) = 0;
  *(_DWORD *)(v37 + 336) = 0;
  *(_BYTE *)(v37 + 340) &= 0xF0u;
  *(_QWORD *)(v37 + 344) = 0;
  *(_DWORD *)(v37 + 352) = 0;
  *(_BYTE *)(v37 + 356) &= 0xF0u;
  *(_QWORD *)(v37 + 360) = 0;
  *(_DWORD *)(v37 + 368) = 0;
  *(_BYTE *)(v37 + 372) &= 0xF0u;
  *(_WORD *)(v37 + 376) = 1;
  *(_BYTE *)(v37 + 378) = *(_BYTE *)(v37 + 378) & 0xFC | 1;
  *(_QWORD *)(v37 + 384) = 0;
  *(_DWORD *)(v37 + 392) = 0;
  *(_BYTE *)(v37 + 396) &= 0xF0u;
  *(_QWORD *)(v37 + 400) = 0;
  *(_DWORD *)(v37 + 408) = 0;
  *(_BYTE *)(v37 + 412) &= 0xF0u;
  *(_QWORD *)(v37 + 416) = 0;
  *(_BYTE *)(v37 + 424) = 1;
  *(_BYTE *)(v37 + 425) = v33;
  *(_BYTE *)(v37 + 426) = 0;
  *(_QWORD *)(v37 + 432) = v35;
  *(_QWORD *)(v37 + 440) = 0;
  *(_QWORD *)(v37 + 448) = 0;
  *(_QWORD *)(v37 + 456) = 0;
  *(_BYTE *)(v37 + 464) = 1;
  *(_DWORD *)(v37 + 465) = 0;
  v39 = v47[0];
  v47[0] = 0;
  if (v39)
  {
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, v38);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
  ++*(_DWORD *)(v3 + 8);
  v47[0] = (WebCore::Node *)v3;
  WebCore::EditCommand::setParent(v36, (uint64_t *)v47);
  if (*(_DWORD *)(v3 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  else
    --*(_DWORD *)(v3 + 8);
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v36);
  v40 = *(unsigned int *)(v3 + 268);
  if ((_DWORD)v40 == *(_DWORD *)(v3 + 264))
  {
    v41 = v40 + (v40 >> 2);
    if (v41 >= 0x10)
      v42 = v41 + 1;
    else
      v42 = 16;
    if (v42 <= v40 + 1)
      v43 = v40 + 1;
    else
      v43 = v42;
    if (!(v43 >> 29))
    {
      v44 = *(void **)(v3 + 256);
      v45 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
      *(_DWORD *)(v3 + 264) = v43;
      *(_QWORD *)(v3 + 256) = v45;
      memcpy(v45, v44, 8 * v40);
      if (v44)
      {
        if (*(void **)(v3 + 256) == v44)
        {
          *(_QWORD *)(v3 + 256) = 0;
          *(_DWORD *)(v3 + 264) = 0;
        }
        WTF::fastFree((WTF *)v44, v32);
      }
      v40 = *(unsigned int *)(v3 + 268);
      v46 = (uint64_t **)(*(_QWORD *)(v3 + 256) + 8 * v40);
      goto LABEL_75;
    }
LABEL_108:
    __break(0xC471u);
    JUMPOUT(0x195B07C20);
  }
  v46 = (uint64_t **)(*(_QWORD *)(v3 + 256) + 8 * v40);
LABEL_75:
  *v46 = v36;
  *(_DWORD *)(v3 + 268) = v40 + 1;
LABEL_76:
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v32);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  this = (unsigned int *)v49;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v49, v32);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::MoveSelectionCommand::editingAction(WebCore::MoveSelectionCommand *this)
{
  return 10;
}

WebCore::CompositeEditCommand *WebCore::RemoveFormatCommand::doApply(WebCore::CompositeEditCommand *this)
{
  WebCore::CompositeEditCommand *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  WTF *v12;
  void *v13;
  WebCore::Node *v14;
  uint64_t *v15;

  if (*((_BYTE *)this + 225))
  {
    v1 = this;
    v3 = *((_QWORD *)this + 24);
    this = (WebCore::CompositeEditCommand *)((char *)this + 192);
    v2 = v3;
    if (!v3 || (*(_BYTE *)(v2 + 22) & 8) != 0)
    {
      v4 = *((_QWORD *)v1 + 26);
      if (!v4 || (*(_BYTE *)(v4 + 22) & 8) != 0)
      {
        v5 = (WebCore *)WebCore::editableRootForPosition((uint64_t)this, 0);
        v6 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v6 = 1;
        *(_QWORD *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 16) &= 0xE0u;
        *(_DWORD *)(v6 + 20) = WebCore::EditingStyle::NoFontDelta;
        WebCore::EditingStyle::init(v6, v5, 1);
        WebCore::MutableStyleProperties::setProperty(*(WebCore::MutableStyleProperties **)(v6 + 8), 61, 0x7Du, 0);
        v7 = (WebCore::Node *)*((_QWORD *)v1 + 2);
        *((_DWORD *)v7 + 6) += 2;
        v14 = v7;
        LOBYTE(v5) = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v1 + 16))(v1);
        v8 = WTF::fastMalloc((WTF *)0x168);
        v9 = WebCore::EditCommand::EditCommand(v8, (uint64_t *)&v14, (char)v5);
        *(_OWORD *)(v9 + 248) = 0u;
        *(_OWORD *)(v9 + 264) = 0u;
        *(_QWORD *)v9 = off_1E33A9688;
        WebCore::EditingStyle::copy((WebCore::EditingStyle *)v6, (uint64_t *)&v15);
        *(_QWORD *)(v8 + 280) = v15;
        *(_BYTE *)(v8 + 288) = 0;
        WebCore::Position::downstream(v8 + 192, (WebCore::Node *)1, v8 + 296);
        WebCore::Position::upstream(v8 + 208, (WebCore::Node *)1, v8 + 312);
        *(_BYTE *)(v8 + 328) = 1;
        *(_QWORD *)(v8 + 336) = 0;
        *(_BYTE *)(v8 + 344) = 1;
        *(_QWORD *)(v8 + 352) = WebCore::isElementForRemoveFormatCommand;
        v15 = (uint64_t *)v8;
        WebCore::CompositeEditCommand::applyCommandToComposite(v1, &v15);
        v11 = v15;
        v15 = 0;
        if (v11)
        {
          if (*((_DWORD *)v11 + 2) == 1)
            (*(void (**)(uint64_t *))(*v11 + 8))(v11);
          else
            --*((_DWORD *)v11 + 2);
        }
        this = v14;
        v14 = 0;
        if (this)
        {
          if (*((_DWORD *)this + 6) == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = (WebCore::CompositeEditCommand *)WebCore::Node::removedLastRef(this, v10);
          }
          else
          {
            *((_DWORD *)this + 6) -= 2;
          }
        }
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v6, (WTF::StringImpl *)v10);
          return (WebCore::CompositeEditCommand *)WTF::fastFree(v12, v13);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::isElementForRemoveFormatCommand(WebCore *this, const WebCore::Element *a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int16 *)(*((_QWORD *)this + 12) + 10);
  result = 1;
  if (((v2 - 81) > 0x31 || ((1 << (v2 - 81)) & 0x2C005C8608001) == 0)
    && ((v2 - 2) > 0x3F || ((1 << (v2 - 2)) & 0xC400004100C05101) == 0)
    && v2 != 247)
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::RemoveNodeCommand::doApply(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(this + 248);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(v2 + 32);
  if (v3)
  {
    v4 = this;
    *(_DWORD *)(v3 + 24) += 2;
    if (*(_DWORD *)(this + 272) == 1
      && (this = WebCore::Node::computeEditability(v3, 0, 0), !(_DWORD)this)
      && (*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        this = 105;
        __break(0xC471u);
        return this;
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 256);
      *(_QWORD *)(v4 + 256) = v3;
      if (v5)
      {
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
      v6 = *(_QWORD *)(v2 + 56);
      if (v6)
        *(_DWORD *)(v6 + 24) += 2;
      this = *(_QWORD *)(v4 + 264);
      *(_QWORD *)(v4 + 264) = v6;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      v7 = *(_QWORD *)(v2 + 32);
      if (v7)
      {
        *(_DWORD *)(v7 + 24) += 2;
        this = (uint64_t)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v7, (WebCore::Node *)v2, &v10);
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          v8 = *(_WORD *)(v7 + 30);
          if ((v8 & 0x400) == 0)
          {
            v9 = *(_WORD *)(v7 + 28);
            if ((v9 & 0xF000) == 0x9000)
            {
              this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
            }
            else
            {
              if ((v9 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                v8 = *(_WORD *)(v7 + 30);
              }
              *(_WORD *)(v7 + 30) = v8 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
            }
          }
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
      }
      if ((_BYTE)v12)
      {
        this = (uint64_t)v11;
        v11 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::RemoveNodeCommand::doUnapply(WebCore::RemoveNodeCommand *this, WTF::StringImpl *a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  WebCore::Node *v10;

  v4 = *((_QWORD *)this + 32);
  result = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  v10 = (WebCore::Node *)result;
  if (v4)
  {
    if (WebCore::Node::computeEditability(v4, 0, 1))
    {
      v5 = *((_QWORD *)this + 31);
      *(_DWORD *)(v5 + 24) += 2;
      WebCore::ContainerNode::insertBefore(v4, (uint64_t *)v5, &v10, (uint64_t)&v7);
      if (v9)
      {
        v6 = v8;
        v8 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    result = (unsigned int *)v10;
  }
  v10 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RemoveNodePreservingChildrenCommand::doApply(uint64_t this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  WebCore::Node *v16;
  void *v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t *v20;
  WebCore::Node *v21;

  v2 = *(_QWORD *)(this + 280);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 32);
  if (!v4)
  {
    v9 = 0;
    v7 = 0;
    if (v3)
      goto LABEL_36;
    goto LABEL_45;
  }
  v5 = (int *)this;
  *(_DWORD *)(v4 + 24) += 2;
  if (*(_DWORD *)(this + 288) == 1 && (this = WebCore::Node::computeEditability(v4, 0, 0), !(_DWORD)this))
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if ((*(_WORD *)(v2 + 28) & 4) != 0 && (v6 = *(_QWORD *)(v2 + 80)) != 0)
    {
      v7 = 0;
      LODWORD(v8) = 0;
      v9 = 0;
      do
      {
        v10 = v7;
        if (v7 == (_DWORD)v8)
        {
          v11 = v7 + ((unint64_t)v7 >> 2);
          if (v11 >= 0x10)
            v12 = v11 + 1;
          else
            v12 = 16;
          if (v12 <= (unint64_t)v7 + 1)
            v8 = v7 + 1;
          else
            v8 = v12;
          if (v8 >> 29)
          {
            __break(0xC471u);
            return this;
          }
          v13 = (char *)WTF::fastMalloc((WTF *)(8 * v8));
          this = (uint64_t)memcpy(v13, v9, 8 * v10);
          if (v9)
          {
            if (v13 == v9)
            {
              v13 = 0;
              LODWORD(v8) = 0;
            }
            this = WTF::fastFree((WTF *)v9, v14);
          }
          v9 = v13;
        }
        *(_DWORD *)(v6 + 24) += 2;
        *(_QWORD *)&v9[8 * v10] = v6;
        v7 = v10 + 1;
        v6 = *(_QWORD *)(v6 + 56);
      }
      while (v6);
      if ((_DWORD)v10 != -1)
      {
        v15 = 0;
        do
        {
          v16 = *(WebCore::Node **)&v9[v15];
          *(_QWORD *)&v9[v15] = 0;
          v21 = v16;
          (*(void (**)(int *))(*(_QWORD *)v5 + 184))(v5);
          WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)v5, (uint64_t *)&v21, v2, v5[72]);
          v18 = v21;
          v21 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v17);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
          v15 += 8;
        }
        while (8 * (v10 + 1) != v15);
      }
    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    this = (*(uint64_t (**)(int *, uint64_t, _QWORD))(*(_QWORD *)v5 + 184))(v5, v2, v5[72]);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24) - 2;
    if (*(_DWORD *)(v2 + 24) != 2)
    {
LABEL_36:
      *(_DWORD *)(v2 + 24) = v3;
      goto LABEL_37;
    }
LABEL_45:
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
LABEL_37:
  if (v7)
  {
    v19 = 8 * v7;
    v20 = (uint64_t *)v9;
    do
    {
      this = *v20;
      *v20 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      ++v20;
      v19 -= 8;
    }
    while (v19);
  }
  if (v9)
    return WTF::fastFree((WTF *)v9, a2);
  return this;
}

uint64_t WebCore::RenderedPosition::RenderedPosition(uint64_t a1, WebCore::Position *a2, const WebCore::Node *a3)
{
  WebCore::InlineIterator::BoxIterator *v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const WebCore::Position *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WebCore *v19;
  const WebCore::Position *v20;
  _BYTE v21[16];
  int v22;
  int v23;
  char v24;
  WebCore::InlineIterator::BoxIterator *v25;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (WebCore::InlineIterator::BoxIterator *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (!*(_QWORD *)a2)
    return a1;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
    {
LABEL_4:
      v7 = (*(unsigned __int8 *)(v6 + 123) >> 2) & 1;
      goto LABEL_5;
    }
    v16 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v16)
    {
      v6 = *(_QWORD *)(v16 + 8);
      if (v6)
      {
        while ((*(_BYTE *)(v6 + 52) & 7) != 1)
        {
          v17 = *(_QWORD *)(v6 + 32);
          if (!v17)
            goto LABEL_33;
          v7 = 0;
          v6 = *(_QWORD *)(v17 + 8);
          if (!v6)
            goto LABEL_5;
        }
        goto LABEL_4;
      }
    }
  }
LABEL_33:
  v7 = 0;
LABEL_5:
  WebCore::Position::inlineBoxAndOffset(a2, a3, v7, (uint64_t)v21);
  v8 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v8 == -1)
  {
    if (v22 == -1)
      goto LABEL_10;
  }
  else if (v22 == -1)
  {
    ((void (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v8])(&v25, v4);
    *(_DWORD *)(a1 + 24) = -1;
    goto LABEL_10;
  }
  v25 = v4;
  ((void (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *, _BYTE *))off_1E33AD7B8[v22])(&v25, v4, v21);
LABEL_10:
  *(_DWORD *)(a1 + 32) = v23;
  if ((WebCore::InlineIterator::BoxIterator::atEnd(v4) & 1) != 0)
  {
    v10 = WebCore::rendererFromPosition(a2, v9);
    if (!v10)
      goto LABEL_17;
    goto LABEL_15;
  }
  v12 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v12 != -1)
  {
    v25 = (WebCore::InlineIterator::BoxIterator *)&v24;
    v10 = ((uint64_t (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *))off_1E33AD7C8[v12])(&v25, v4);
LABEL_15:
    v13 = v10;
    v10 = *(_QWORD *)(v10 + 8);
    if (!v10)
    {
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v13;
      v18 = *(WTF **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v10;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
        {
          WTF::fastFree(v18, v11);
          v10 = *(_QWORD *)(v13 + 8);
          if (!v10)
            goto LABEL_17;
        }
        else
        {
          --*(_DWORD *)v18;
        }
      }
    }
    ++*(_DWORD *)v10;
LABEL_17:
    v14 = *(WTF **)a1;
    *(_QWORD *)a1 = v10;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v11);
      else
        --*(_DWORD *)v14;
    }
    if (v22 != -1)
      ((void (*)(WebCore::InlineIterator::BoxIterator **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v22])(&v25, v21);
    return a1;
  }
  v19 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::rendererFromPosition(v19, v20);
}

uint64_t WebCore::rendererFromPosition(WebCore *this, const WebCore::Position *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_BYTE *)this + 12) & 7;
  if (v3 == 4)
  {
    if (*(_QWORD *)this)
      v12 = (*(_WORD *)(*(_QWORD *)this + 28) & 4) == 0;
    else
      v12 = 1;
    if (v12)
      goto LABEL_40;
    v10 = *(_QWORD *)(*(_QWORD *)this + 88);
    if (!v10)
      goto LABEL_40;
    goto LABEL_28;
  }
  if (v3 == 3)
  {
    if (*(_QWORD *)this)
      v11 = (*(_WORD *)(*(_QWORD *)this + 28) & 4) == 0;
    else
      v11 = 1;
    if (v11)
      goto LABEL_40;
    v10 = *(_QWORD *)(*(_QWORD *)this + 80);
    if (!v10)
      goto LABEL_40;
LABEL_28:
    *(_DWORD *)(v10 + 24) += 2;
    goto LABEL_29;
  }
  if ((*((_BYTE *)this + 12) & 7) != 0)
    goto LABEL_40;
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v13 = 0;
    goto LABEL_42;
  }
  if ((*(_WORD *)(v4 + 28) & 4) == 0)
    goto LABEL_40;
  v5 = *((_DWORD *)this + 2);
  v6 = *(_QWORD *)(v4 + 80);
  if (v5 && v6)
  {
    v7 = v5 - 1;
    do
    {
      v6 = *(_QWORD *)(v6 + 56);
      v9 = v7-- != 0;
    }
    while (v6 && v9);
  }
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v10 = v6;
      goto LABEL_29;
    }
  }
  v10 = *(_QWORD *)(v4 + 88);
  if (!v10)
  {
    if (!v6)
      goto LABEL_40;
    v10 = 0;
    goto LABEL_37;
  }
  *(_DWORD *)(v10 + 24) += 2;
  if (!v6)
  {
LABEL_29:
    if ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v13 = v10;
    }
    else
    {
      v13 = *(_QWORD *)this;
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    goto LABEL_42;
  }
LABEL_37:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v10)
    goto LABEL_29;
LABEL_40:
  v13 = *(_QWORD *)this;
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
LABEL_42:
  v14 = *(_QWORD *)(v13 + 64);
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  return v14 & 0xFFFFFFFFFFFFLL;
}

uint64_t WebCore::RenderedPosition::previousLeafOnLine(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v3 = this;
  v4 = a2 + 40;
  if (*(_BYTE *)(a2 + 64))
    goto LABEL_14;
  this = WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)(a2 + 8), (uint64_t)v8);
  if (!*(_BYTE *)(a2 + 64))
  {
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 56) = -1;
    v6 = v9;
    if (v9 != -1)
    {
      this = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33AD798[v9])(&v10, v4, v8);
      *(_DWORD *)(a2 + 56) = v6;
    }
    *(_BYTE *)(a2 + 64) = 1;
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v5 == -1)
  {
    if (v9 == -1)
      goto LABEL_13;
  }
  else if (v9 == -1)
  {
    this = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v10, v4);
    *(_DWORD *)(a2 + 56) = -1;
    goto LABEL_11;
  }
  v10 = v4;
  this = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33AD7D8[v9])(&v10, v4, v8);
LABEL_11:
  if (v9 != -1)
    this = ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v10, v8);
LABEL_13:
  if (!*(_BYTE *)(a2 + 64))
  {
    __break(1u);
    return this;
  }
LABEL_14:
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 16) = -1;
  v7 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 != -1)
  {
    this = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v7])(v8, v3, v4);
    *(_DWORD *)(v3 + 16) = v7;
  }
  return this;
}

uint64_t WebCore::RenderedPosition::nextLeafOnLine@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v2 = this;
  v4 = this + 72;
  if (*(_BYTE *)(this + 96))
    goto LABEL_14;
  this = WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)(this + 8), (uint64_t)v8);
  if (!*(_BYTE *)(v2 + 96))
  {
    *(_BYTE *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 88) = -1;
    v6 = v9;
    if (v9 != -1)
    {
      this = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33AD798[v9])(&v10, v4, v8);
      *(_DWORD *)(v2 + 88) = v6;
    }
    *(_BYTE *)(v2 + 96) = 1;
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v5 == -1)
  {
    if (v9 == -1)
      goto LABEL_13;
  }
  else if (v9 == -1)
  {
    this = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v10, v4);
    *(_DWORD *)(v2 + 88) = -1;
    goto LABEL_11;
  }
  v10 = v4;
  this = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33AD7D8[v9])(&v10, v4, v8);
LABEL_11:
  if (v9 != -1)
    this = ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v10, v8);
LABEL_13:
  if (!*(_BYTE *)(v2 + 96))
  {
    __break(1u);
    return this;
  }
LABEL_14:
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  v7 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v7 != -1)
  {
    this = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v7])(v8, a2, v4);
    *(_DWORD *)(a2 + 16) = v7;
  }
  return this;
}

uint64_t WebCore::RenderedPosition::isEquivalent(WebCore::RenderedPosition *this, const WebCore::RenderedPosition *a2)
{
  WebCore::InlineIterator::BoxIterator *v2;
  WebCore::InlineIterator::BoxIterator *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  BOOL v32;
  char v33;
  _QWORD v34[2];
  int v35;
  _QWORD v36[2];
  int v37;
  char v38;
  char *v39;

  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v7 = *(_QWORD *)(v7 + 8);
  if (v6 == v7)
  {
    v10 = *((unsigned int *)this + 6);
    if ((_DWORD)v10 == -1)
      goto LABEL_81;
    v3 = (const WebCore::RenderedPosition *)((char *)a2 + 8);
    v36[0] = v34;
    if (!((unsigned int (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v10])(v36, (char *)this + 8)|| (WebCore::InlineIterator::BoxIterator::atEnd((const WebCore::RenderedPosition *)((char *)a2 + 8)) & 1) == 0)
    {
      v11 = *((unsigned int *)this + 6);
      v12 = *((_DWORD *)a2 + 6);
      v14 = v12 == (_DWORD)v11 && v12 != -1;
      if ((_DWORD)v11 == -1 || !v14)
      {
        v25 = v12 == -1;
        if ((_DWORD)v11 == -1)
          v26 = v25;
        else
          v26 = v14;
        if (!v26)
          goto LABEL_6;
      }
      else
      {
        v36[0] = v34;
        if ((((uint64_t (*)(_QWORD *, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v11])(v36, (char *)this + 8, (char *)a2 + 8) & 1) == 0)goto LABEL_6;
      }
    }
    if (*((_DWORD *)this + 8) == *((_DWORD *)a2 + 8))
      return 1;
  }
LABEL_6:
  v2 = (WebCore::RenderedPosition *)((char *)this + 8);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8)) & 1) != 0)
    goto LABEL_39;
  v8 = *((unsigned int *)this + 6);
  if ((_DWORD)v8 == -1)
    goto LABEL_81;
  v3 = (WebCore::InlineIterator::BoxIterator *)*((unsigned int *)this + 8);
  v36[0] = v34;
  if ((((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v8])(v36, (char *)this + 8) & 1) != 0)
  {
    v15 = *((unsigned int *)this + 6);
    if ((_DWORD)v15 == -1)
      goto LABEL_81;
    v36[0] = v34;
    v9 = ((uint64_t (*)(_QWORD *, char *))off_1E33AD7F8[v15])(v36, (char *)this + 8);
  }
  else
  {
    v9 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)this + 2);
  }
  if ((_DWORD)v3 != v9
    || (v3 = (const WebCore::RenderedPosition *)((char *)a2 + 8),
        (WebCore::InlineIterator::BoxIterator::atEnd((const WebCore::RenderedPosition *)((char *)a2 + 8)) & 1) != 0)
    || (v16 = *((_DWORD *)a2 + 8),
        v16 != WebCore::InlineIterator::Box::rightmostCaretOffset((const WebCore::RenderedPosition *)((char *)a2 + 8))))
  {
LABEL_39:
    v21 = 0;
    goto LABEL_40;
  }
  WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v36, (uint64_t)this);
  if (v37 == -1)
    goto LABEL_81;
  v34[0] = &v39;
  if (((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v37])(v34, v36))
  {
    goto LABEL_82;
  }
  while (1)
  {
    v17 = *((_DWORD *)a2 + 6);
    v19 = v17 == v37 && v17 != -1;
    if (v37 == -1 || !v19)
    {
      v32 = v17 == -1;
      if (v37 == -1)
        v33 = v32;
      else
        v33 = v19;
      v21 = 1;
      v22 = 1;
      if ((v33 & 1) != 0)
        goto LABEL_71;
    }
    else
    {
      v34[0] = &v39;
      v20 = ((uint64_t (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v37])(v34, v36, v3);
      v21 = 1;
      v22 = 1;
      if ((v20 & 1) != 0)
        goto LABEL_71;
    }
LABEL_40:
    if ((WebCore::InlineIterator::BoxIterator::atEnd(v2) & 1) != 0
      || (v3 = (WebCore::InlineIterator::BoxIterator *)*((unsigned int *)this + 8),
          (_DWORD)v3 != WebCore::InlineIterator::Box::rightmostCaretOffset(v2))
      || (v2 = (const WebCore::RenderedPosition *)((char *)a2 + 8),
          (WebCore::InlineIterator::BoxIterator::atEnd((const WebCore::RenderedPosition *)((char *)a2 + 8)) & 1) != 0))
    {
LABEL_70:
      v22 = 0;
      if ((v21 & 1) == 0)
        return v22;
      goto LABEL_71;
    }
    v23 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v23 == -1)
      goto LABEL_81;
    v3 = (WebCore::InlineIterator::BoxIterator *)*((unsigned int *)a2 + 8);
    v34[0] = &v39;
    if ((((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(v34, (char *)a2 + 8) & 1) == 0)
    {
      v24 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)a2 + 2);
      goto LABEL_54;
    }
    v27 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v27 != -1)
      break;
LABEL_81:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
    if ((WebCore::InlineIterator::BoxIterator::atEnd(v3) & 1) != 0)
    {
      v22 = 1;
LABEL_71:
      if (v37 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v37])(v34, v36);
      return v22;
    }
  }
  v34[0] = &v39;
  v24 = ((uint64_t (*)(_QWORD *, char *))off_1E33AD7F8[v27])(v34, (char *)a2 + 8);
LABEL_54:
  if ((_DWORD)v3 != v24)
    goto LABEL_70;
  WebCore::RenderedPosition::nextLeafOnLine((uint64_t)this, (uint64_t)v34);
  if (v35 == -1)
    goto LABEL_81;
  v39 = &v38;
  if (((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v39, v34)&& (WebCore::InlineIterator::BoxIterator::atEnd((const WebCore::RenderedPosition *)((char *)a2 + 8)) & 1) != 0)
  {
    v22 = 1;
  }
  else
  {
    v28 = *((_DWORD *)a2 + 6);
    v29 = v28 == -1;
    v30 = v28 != -1 && v28 == v35;
    if (v35 == -1)
      v22 = v29;
    else
      v22 = v30;
    if (v35 != -1 && v30)
    {
      v39 = &v38;
      v22 = ((uint64_t (*)(char **, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v35])(&v39, v34, (char *)a2 + 8);
    }
  }
  if (v35 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v35])(&v39, v34);
  if (v21)
    goto LABEL_71;
  return v22;
}

uint64_t WebCore::RenderedPosition::bidiLevelOnLeft(WebCore::RenderedPosition *this)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderedPosition *v10;
  _QWORD v11[2];
  int v12;
  char v13;
  char *v14;

  v2 = (unsigned int *)((char *)this + 8);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8)) & 1) != 0)
    goto LABEL_9;
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
    goto LABEL_18;
  v4 = *((_DWORD *)this + 8);
  v11[0] = &v14;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v3])(v11, v2) & 1) != 0)
  {
    v6 = *((unsigned int *)this + 6);
    if ((_DWORD)v6 == -1)
      goto LABEL_18;
    v11[0] = &v14;
    v5 = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E33AD7F8[v6])(v11, v2);
  }
  else
  {
    v5 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v2);
  }
  if (v4 != v5)
  {
LABEL_9:
    LOBYTE(v11[0]) = 0;
    v12 = -1;
    v7 = *((unsigned int *)this + 6);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char **, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v7])(&v14, v11, v2);
      v12 = v7;
    }
  }
  else
  {
    WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v11, (uint64_t)this);
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v11) & 1) == 0)
  {
    if (v12 != -1)
    {
      v14 = &v13;
      v8 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v12])(&v14, v11);
      goto LABEL_15;
    }
LABEL_18:
    v10 = (WebCore::RenderedPosition *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderedPosition::bidiLevelOnRight(v10);
  }
  v8 = 0;
LABEL_15:
  if (v12 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v14, v11);
  return v8;
}

uint64_t WebCore::RenderedPosition::bidiLevelOnRight(WebCore::RenderedPosition *this)
{
  WebCore::InlineIterator::Box *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderedPosition *v7;
  unsigned __int8 v8;
  _BYTE v9[16];
  int v10;
  char v11;
  char *v12;

  v2 = (WebCore::RenderedPosition *)((char *)this + 8);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8)) & 1) != 0
    || (v3 = *((_DWORD *)this + 8), v3 != WebCore::InlineIterator::Box::rightmostCaretOffset(v2)))
  {
    v9[0] = 0;
    v10 = -1;
    v4 = *((unsigned int *)this + 6);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char **, _BYTE *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v4])(&v12, v9, v2);
      v10 = v4;
    }
  }
  else
  {
    WebCore::RenderedPosition::nextLeafOnLine((uint64_t)this, (uint64_t)v9);
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v9) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    if (v10 == -1)
    {
      v7 = (WebCore::RenderedPosition *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderedPosition::leftBoundaryOfBidiRun(v7, v8);
    }
    v12 = &v11;
    v5 = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v10])(&v12, v9);
  }
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v12, v9);
  return v5;
}

uint64_t WebCore::RenderedPosition::leftBoundaryOfBidiRun@<X0>(WebCore::RenderedPosition *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  WebCore::RenderedPosition *v19;
  unsigned __int8 v20;
  _BYTE v21[16];
  unsigned int v22;
  _BYTE v23[16];
  int v24;
  unsigned int v25[4];
  int v26;
  char v27;
  unsigned int *v28;

  v6 = (char *)this + 8;
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8));
  if ((result & 1) != 0)
    goto LABEL_4;
  v8 = *((unsigned int *)this + 6);
  if ((_DWORD)v8 == -1)
    goto LABEL_42;
  *(_QWORD *)v25 = v23;
  result = ((uint64_t (*)(unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v8])(v25, v6);
  if (result < a2)
  {
LABEL_4:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 96) = 0;
    return result;
  }
  LOBYTE(v25[0]) = 0;
  v26 = -1;
  v9 = *((unsigned int *)this + 6);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v9])(v23, v25, v6);
    v26 = v9;
  }
  while (1)
  {
    WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v25, (uint64_t)v23);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v23) & 1) != 0)
      break;
    if (v24 == -1)
      goto LABEL_42;
    v28 = (unsigned int *)&v27;
    if (((unsigned int (*)(unsigned int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v24])(&v28, v23) < a2)break;
    if (v26 != -1)
    {
      if (v24 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v26])(&v28, v25);
        v26 = -1;
      }
      else
      {
LABEL_15:
        v28 = v25;
        ((void (*)(unsigned int **, unsigned int *, _BYTE *))off_1E33AD7B8[v24])(&v28, v25, v23);
      }
      if (v24 != -1)
        ((void (*)(unsigned int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(&v28, v23);
      goto LABEL_18;
    }
    if (v24 != -1)
      goto LABEL_15;
LABEL_18:
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v25);
    if ((_DWORD)result)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 64) = 0;
      *(_BYTE *)(a3 + 72) = 0;
      *(_BYTE *)(a3 + 96) = 0;
LABEL_35:
      if (v26 != -1)
        return ((uint64_t (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v26])(v23, v25);
      return result;
    }
  }
  if (v26 != -1)
  {
    v28 = (unsigned int *)&v27;
    v10 = ((uint64_t (*)(unsigned int **, unsigned int *))off_1E33AD7C8[v26])(&v28, v25);
    v21[0] = 0;
    v22 = -1;
    v11 = v26;
    if (v26 != -1)
    {
      v12 = v10;
      ((void (*)(unsigned int **, _BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v26])(&v28, v21, v25);
      v22 = v11;
      if (v26 != -1)
      {
        v28 = (unsigned int *)&v27;
        if ((((uint64_t (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v26])(&v28, v25) & 1) != 0)
        {
          if (v26 == -1)
            goto LABEL_42;
          v28 = (unsigned int *)&v27;
          v13 = ((uint64_t (*)(unsigned int **, unsigned int *))off_1E33AD7F8[v26])(&v28, v25);
        }
        else
        {
          v13 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v25);
        }
        v14 = v13;
        result = *(_QWORD *)(v12 + 8);
        if (result)
          goto LABEL_28;
        result = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 1;
        *(_QWORD *)(result + 8) = v12;
        v18 = *(WTF **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = result;
        if (!v18)
          goto LABEL_28;
        if (*(_DWORD *)v18 != 1)
        {
          --*(_DWORD *)v18;
          goto LABEL_28;
        }
        WTF::fastFree(v18, v17);
        result = *(_QWORD *)(v12 + 8);
        if (result)
LABEL_28:
          ++*(_DWORD *)result;
        *(_QWORD *)a3 = result;
        *(_BYTE *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 24) = -1;
        v15 = v22;
        if (v22 == -1)
        {
          *(_DWORD *)(a3 + 32) = v14;
          *(_BYTE *)(a3 + 40) = 0;
          *(_BYTE *)(a3 + 64) = 0;
          *(_BYTE *)(a3 + 72) = 0;
          *(_BYTE *)(a3 + 96) = 0;
        }
        else
        {
          result = ((uint64_t (*)(unsigned int **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v22])(&v28, a3 + 8, v21);
          *(_DWORD *)(a3 + 24) = v15;
          v16 = v22;
          *(_DWORD *)(a3 + 32) = v14;
          *(_BYTE *)(a3 + 40) = 0;
          *(_BYTE *)(a3 + 64) = 0;
          *(_BYTE *)(a3 + 72) = 0;
          *(_BYTE *)(a3 + 96) = 0;
          if ((_DWORD)v16 != -1)
            result = ((uint64_t (*)(unsigned int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16])(&v28, v21);
        }
        v22 = -1;
        if (v24 != -1)
          result = ((uint64_t (*)(unsigned int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(&v28, v23);
        goto LABEL_35;
      }
    }
  }
LABEL_42:
  v19 = (WebCore::RenderedPosition *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderedPosition::rightBoundaryOfBidiRun(v19, v20);
}

uint64_t WebCore::RenderedPosition::rightBoundaryOfBidiRun@<X0>(WebCore::RenderedPosition *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[16];
  unsigned int v19;
  _BYTE v20[16];
  int v21;
  _QWORD v22[2];
  int v23;
  char v24;
  char *v25;

  v6 = (char *)this + 8;
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8));
  if ((result & 1) != 0)
    goto LABEL_4;
  v8 = *((unsigned int *)this + 6);
  if ((_DWORD)v8 == -1)
  {
LABEL_38:
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderedPosition::atLeftBoundaryOfBidiRun(v17);
  }
  v22[0] = v20;
  result = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v8])(v22, v6);
  if (result < a2)
  {
LABEL_4:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 96) = 0;
    return result;
  }
  LOBYTE(v22[0]) = 0;
  v23 = -1;
  v9 = *((unsigned int *)this + 6);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v9])(v20, v22, v6);
    v23 = v9;
  }
  while (1)
  {
    WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v22, (uint64_t)v20);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v20) & 1) != 0)
      break;
    if (v21 == -1)
      goto LABEL_38;
    v25 = &v24;
    if (((unsigned int (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v21])(&v25, v20) < a2)break;
    if (v23 != -1)
    {
      if (v21 == -1)
      {
        ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23])(&v25, v22);
        v23 = -1;
      }
      else
      {
LABEL_15:
        v25 = (char *)v22;
        ((void (*)(char **, _QWORD *, _BYTE *))off_1E33AD7B8[v21])(&v25, v22, v20);
      }
      if (v21 != -1)
        ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v21])(&v25, v20);
      goto LABEL_18;
    }
    if (v21 != -1)
      goto LABEL_15;
LABEL_18:
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v22);
    if ((_DWORD)result)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 64) = 0;
      *(_BYTE *)(a3 + 72) = 0;
      *(_BYTE *)(a3 + 96) = 0;
      goto LABEL_31;
    }
  }
  if (v23 == -1)
    goto LABEL_38;
  v25 = &v24;
  v10 = ((uint64_t (*)(char **, _QWORD *))off_1E33AD7C8[v23])(&v25, v22);
  v18[0] = 0;
  v19 = -1;
  v11 = v23;
  if (v23 != -1)
  {
    ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v23])(&v25, v18, v22);
    v19 = v11;
  }
  v12 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v22);
  result = *(_QWORD *)(v10 + 8);
  if (result)
    goto LABEL_24;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v10;
  v16 = *(WTF **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = result;
  if (!v16)
    goto LABEL_24;
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_24;
  }
  WTF::fastFree(v16, v15);
  result = *(_QWORD *)(v10 + 8);
  if (result)
LABEL_24:
    ++*(_DWORD *)result;
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v13 = v19;
  if (v19 == -1)
  {
    *(_DWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 96) = 0;
  }
  else
  {
    result = ((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v19])(&v25, a3 + 8, v18);
    *(_DWORD *)(a3 + 24) = v13;
    v14 = v19;
    *(_DWORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 96) = 0;
    if ((_DWORD)v14 != -1)
      result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(&v25, v18);
  }
  v19 = -1;
  if (v21 != -1)
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v21])(&v25, v20);
LABEL_31:
  if (v23 != -1)
    return ((uint64_t (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23])(v20, v22);
  return result;
}

uint64_t WebCore::RenderedPosition::atLeftBoundaryOfBidiRun(unsigned int *a1, int a2, unsigned int a3)
{
  WebCore::InlineIterator::BoxIterator *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  _QWORD v24[2];
  int v25;
  char v26;
  char *v27;

  v6 = (WebCore::InlineIterator::BoxIterator *)(a1 + 2);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)(a1 + 2)) & 1) != 0)
    return 0;
  if ((WebCore::InlineIterator::BoxIterator::atEnd(v6) & 1) != 0)
    goto LABEL_45;
  v7 = a1[6];
  if ((_DWORD)v7 == -1)
    goto LABEL_42;
  v8 = a1[8];
  v24[0] = v22;
  if ((((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v7])(v24, v6) & 1) != 0)
  {
    v10 = a1[6];
    if ((_DWORD)v10 == -1)
      goto LABEL_42;
    v24[0] = v22;
    v9 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))off_1E33AD7F8[v10])(v24, v6);
  }
  else
  {
    v9 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)v6);
  }
  if (v8 != v9)
  {
LABEL_45:
    if ((WebCore::InlineIterator::BoxIterator::atEnd(v6) & 1) != 0)
      return 0;
    v14 = a1[8];
    if (v14 != WebCore::InlineIterator::Box::rightmostCaretOffset(v6))
      return 0;
    if (a2 == 1)
    {
      WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v24);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) == 0)
      {
        v15 = a1[6];
        if ((_DWORD)v15 == -1)
          goto LABEL_42;
        v22[0] = &v27;
        v16 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v15])(v22, v6);
        WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v22);
        if (v23 == -1)
          goto LABEL_42;
        v27 = &v26;
        v13 = v16 >= ((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22);
        goto LABEL_35;
      }
    }
    else
    {
      WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v24);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) == 0)
      {
        v20 = a1[6];
        if ((_DWORD)v20 == -1)
          goto LABEL_42;
        v22[0] = &v27;
        if (((unsigned int (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v20])(v22, v6) < a3)
        {
          WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v22);
          if (v23 != -1)
          {
            v27 = &v26;
            v18 = ((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22) >= a3;
            goto LABEL_38;
          }
          goto LABEL_42;
        }
      }
    }
    v18 = 0;
    goto LABEL_40;
  }
  if (a2 != 1)
  {
    v17 = a1[6];
    if ((_DWORD)v17 == -1)
      goto LABEL_42;
    v24[0] = v22;
    if (((unsigned int (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v17])(v24, v6) < a3)return 0;
    WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v24, (uint64_t)a1);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) != 0)
      goto LABEL_32;
    WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v22, (uint64_t)a1);
    if (v23 == -1)
      goto LABEL_42;
    v27 = &v26;
    v13 = ((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22) >= a3;
LABEL_35:
    v18 = !v13;
LABEL_38:
    if (v23 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23])(&v27, v22);
    goto LABEL_40;
  }
  WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v24, (uint64_t)a1);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) != 0)
  {
LABEL_32:
    v18 = 1;
LABEL_40:
    if (v25 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v25])(v22, v24);
    return v18;
  }
  WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v22, (uint64_t)a1);
  if (v23 != -1)
  {
    v27 = &v26;
    v11 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22);
    v12 = a1[6];
    if ((_DWORD)v12 != -1)
    {
      v27 = &v26;
      v13 = v11 >= ((unsigned int (*)(char **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v12])(&v27, v6);
      goto LABEL_35;
    }
  }
LABEL_42:
  v21 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderedPosition::atRightBoundaryOfBidiRun(v21);
}

uint64_t WebCore::RenderedPosition::atRightBoundaryOfBidiRun(unsigned int *a1, int a2, unsigned int a3)
{
  WebCore::InlineIterator::BoxIterator *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v20;
  WebCore::RenderedPosition *v21;
  _QWORD v22[2];
  int v23;
  _QWORD v24[2];
  int v25;
  char v26;
  char *v27;

  v6 = (WebCore::InlineIterator::BoxIterator *)(a1 + 2);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)(a1 + 2)) & 1) != 0)
    return 0;
  if ((WebCore::InlineIterator::BoxIterator::atEnd(v6) & 1) != 0
    || (v7 = a1[8], v7 != WebCore::InlineIterator::Box::rightmostCaretOffset(v6)))
  {
    if ((WebCore::InlineIterator::BoxIterator::atEnd(v6) & 1) != 0)
      return 0;
    v11 = a1[6];
    if ((_DWORD)v11 == -1)
      goto LABEL_42;
    v12 = a1[8];
    v24[0] = v22;
    if ((((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v11])(v24, v6) & 1) != 0)
    {
      v14 = a1[6];
      if ((_DWORD)v14 == -1)
        goto LABEL_42;
      v24[0] = v22;
      v13 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))off_1E33AD7F8[v14])(v24, v6);
    }
    else
    {
      v13 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)v6);
    }
    if (v12 != v13)
      return 0;
    if (a2 == 1)
    {
      WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v24, (uint64_t)a1);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) == 0)
      {
        v15 = a1[6];
        if ((_DWORD)v15 == -1)
          goto LABEL_42;
        v22[0] = &v27;
        v16 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v15])(v22, v6);
        WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v22, (uint64_t)a1);
        if (v23 == -1)
          goto LABEL_42;
        v27 = &v26;
        v10 = v16 >= ((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22);
        goto LABEL_35;
      }
    }
    else
    {
      WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v24, (uint64_t)a1);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) == 0)
      {
        v20 = a1[6];
        if ((_DWORD)v20 == -1)
          goto LABEL_42;
        v22[0] = &v27;
        if (((unsigned int (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v20])(v22, v6) < a3)
        {
          WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v22, (uint64_t)a1);
          if (v23 != -1)
          {
            v27 = &v26;
            v18 = ((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22) >= a3;
            goto LABEL_38;
          }
          goto LABEL_42;
        }
      }
    }
    v18 = 0;
    goto LABEL_40;
  }
  if (a2 != 1)
  {
    v17 = a1[6];
    if ((_DWORD)v17 == -1)
      goto LABEL_42;
    v24[0] = v22;
    if (((unsigned int (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v17])(v24, v6) < a3)return 0;
    WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v24);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) != 0)
      goto LABEL_32;
    WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v22);
    if (v23 == -1)
      goto LABEL_42;
    v27 = &v26;
    v10 = ((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22) >= a3;
LABEL_35:
    v18 = !v10;
LABEL_38:
    if (v23 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23])(&v27, v22);
    goto LABEL_40;
  }
  WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v24);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) != 0)
  {
LABEL_32:
    v18 = 1;
LABEL_40:
    if (v25 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v25])(v22, v24);
    return v18;
  }
  WebCore::RenderedPosition::nextLeafOnLine((uint64_t)a1, (uint64_t)v22);
  if (v23 != -1)
  {
    v27 = &v26;
    v8 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v23])(&v27, v22);
    v9 = a1[6];
    if ((_DWORD)v9 != -1)
    {
      v27 = &v26;
      v10 = v8 >= ((unsigned int (*)(char **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v9])(&v27, v6);
      goto LABEL_35;
    }
  }
LABEL_42:
  v21 = (WebCore::RenderedPosition *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderedPosition::positionAtLeftBoundaryOfBiDiRun(v21);
}

uint64_t WebCore::RenderedPosition::positionAtLeftBoundaryOfBiDiRun@<X0>(WebCore::RenderedPosition *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  int v11;
  void *v12;
  char v13;
  char v14;
  uint64_t v15;
  WebCore::Node *v16;
  char v17;
  void *v18;
  int v19;
  char v20;
  int v21;
  WebCore::RenderedPosition *v22;
  unsigned int v23[4];
  int v24;
  _QWORD v25[2];
  int v26;
  char v27;
  char *v28;

  v4 = (unsigned int *)((char *)this + 8);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8)) & 1) == 0)
  {
    v5 = *((unsigned int *)this + 6);
    if ((_DWORD)v5 == -1)
      goto LABEL_50;
    v6 = *((_DWORD *)this + 8);
    v25[0] = v23;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v5])(v25, v4) & 1) != 0)
    {
      v8 = *((unsigned int *)this + 6);
      if ((_DWORD)v8 == -1)
        goto LABEL_50;
      v25[0] = v23;
      result = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E33AD7F8[v8])(v25, v4);
    }
    else
    {
      result = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v4);
    }
    if (v6 == (_DWORD)result)
    {
      v9 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v9 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 45) & 1) != 0 || (v10 = *(WebCore::Node **)(*(_QWORD *)(v9 + 24) + 8)) == 0)
      {
        v21 = *((_DWORD *)this + 8);
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = v21;
        *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | 8;
      }
      else
      {
        *((_DWORD *)v10 + 6) += 4;
        v11 = *((_DWORD *)this + 8);
        *(_QWORD *)a2 = v10;
        *(_DWORD *)(a2 + 8) = v11;
        result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v10 + 208))(v10);
        if (v11)
          v13 = 10;
        else
          v13 = 9;
        if ((result & 1) != 0)
          v14 = 8;
        else
          v14 = v13;
        *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | v14;
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef(v10, v12);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      return result;
    }
  }
  WebCore::RenderedPosition::nextLeafOnLine((uint64_t)this, (uint64_t)v25);
  if (v26 == -1)
    goto LABEL_50;
  *(_QWORD *)v23 = &v28;
  v15 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E33AD7C8[v26])(v23, v25);
  if ((*(_BYTE *)(v15 + 45) & 1) != 0)
  {
    v16 = 0;
    goto LABEL_43;
  }
  v16 = *(WebCore::Node **)(*(_QWORD *)(v15 + 24) + 8);
  if (!v16)
  {
LABEL_43:
    v17 = 1;
    goto LABEL_24;
  }
  v17 = 0;
  *((_DWORD *)v16 + 6) += 4;
LABEL_24:
  WebCore::RenderedPosition::nextLeafOnLine((uint64_t)this, (uint64_t)v23);
  if (v24 == -1)
    goto LABEL_50;
  v28 = &v27;
  if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v24])(&v28, v23) & 1) == 0)
  {
    result = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v23);
    goto LABEL_29;
  }
  if (v24 == -1)
  {
LABEL_50:
    v22 = (WebCore::RenderedPosition *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderedPosition::positionAtRightBoundaryOfBiDiRun(v22);
  }
  v28 = &v27;
  result = ((uint64_t (*)(char **, unsigned int *))off_1E33AD7F8[v24])(&v28, v23);
LABEL_29:
  v19 = result;
  *(_QWORD *)a2 = v16;
  *(_DWORD *)(a2 + 8) = result;
  if (v16 && (result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v16 + 208))(v16), (result & 1) == 0))
  {
    if (v19)
      v20 = 10;
    else
      v20 = 9;
  }
  else
  {
    v20 = 8;
  }
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | v20;
  if (v24 != -1)
    result = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(&v28, v23);
  if ((v17 & 1) == 0)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v16, v18);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  if (v26 != -1)
    return ((uint64_t (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v26])(v23, v25);
  return result;
}

uint64_t WebCore::RenderedPosition::positionAtRightBoundaryOfBiDiRun@<X0>(WebCore::RenderedPosition *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::InlineIterator::Box *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  WebCore::Node *v8;
  int v9;
  void *v10;
  char v11;
  char v12;
  uint64_t v13;
  WebCore::Node *v14;
  char v15;
  void *v16;
  int v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  _BYTE v24[16];
  int v25;
  char v26;

  v4 = (WebCore::RenderedPosition *)((char *)this + 8);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::RenderedPosition *)((char *)this + 8)) & 1) == 0)
  {
    v5 = *((_DWORD *)this + 8);
    result = WebCore::InlineIterator::Box::rightmostCaretOffset(v4);
    if (v5 == (_DWORD)result)
    {
      v7 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v7 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 45) & 1) != 0 || (v8 = *(WebCore::Node **)(*(_QWORD *)(v7 + 24) + 8)) == 0)
      {
        v20 = *((_DWORD *)this + 8);
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = v20;
        *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | 8;
      }
      else
      {
        *((_DWORD *)v8 + 6) += 4;
        v9 = *((_DWORD *)this + 8);
        *(_QWORD *)a2 = v8;
        *(_DWORD *)(a2 + 8) = v9;
        result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v8 + 208))(v8);
        if (v9)
          v11 = 10;
        else
          v11 = 9;
        if ((result & 1) != 0)
          v12 = 8;
        else
          v12 = v11;
        *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | v12;
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef(v8, v10);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      return result;
    }
  }
  WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v24, (uint64_t)this);
  if (v25 == -1)
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderedPosition::absoluteRect(v21);
  }
  v22[0] = &v26;
  v13 = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E33AD7C8[v25])(v22, v24);
  if ((*(_BYTE *)(v13 + 45) & 1) != 0)
  {
    v14 = 0;
    goto LABEL_37;
  }
  v14 = *(WebCore::Node **)(*(_QWORD *)(v13 + 24) + 8);
  if (!v14)
  {
LABEL_37:
    v15 = 1;
    goto LABEL_19;
  }
  v15 = 0;
  *((_DWORD *)v14 + 6) += 4;
LABEL_19:
  WebCore::RenderedPosition::previousLeafOnLine((uint64_t)v22, (uint64_t)this);
  result = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v22);
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = result;
  if (v14)
  {
    v17 = result;
    result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 208))(v14);
    if (v17)
      v18 = 10;
    else
      v18 = 9;
    if ((result & 1) != 0)
      v19 = 8;
    else
      v19 = v18;
  }
  else
  {
    v19 = 8;
  }
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | v19;
  if (v23 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23])(&v26, v22);
  if ((v15 & 1) == 0)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v14, v16);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  if (v25 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v25])(v22, v24);
  return result;
}

unint64_t WebCore::RenderedPosition::absoluteRect(uint64_t a1, int a2)
{
  WebCore::RenderBlock *v2;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  signed int v21;
  signed int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43[2];
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __int128 v50;
  float v51;
  float v52;
  float v53;
  float v54;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(WebCore::RenderBlock **)(*(_QWORD *)a1 + 8);
  if (!v2)
    return 0;
  LOBYTE(v50) = 0;
  v51 = NAN;
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(float *, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v5])(v43, &v50, a1 + 8);
    v51 = *(float *)&v5;
  }
  v53 = *(float *)(a1 + 32);
  v6 = WebCore::computeLocalCaretRect(v2, (WebCore::InlineIterator::BoxIterator *)&v50, a2);
  v8 = (int)v6 / 64;
  v10 = v6 - (v9 & 0xFFFFFFC0);
  v12 = HIDWORD(v6) - (v11 & 0xFFFFFFC0);
  v14 = v10 + v13;
  if (__OFADD__(v10, v13))
    v14 = (v10 >> 31) + 0x7FFFFFFF;
  v15 = v12 + v7;
  if (__OFADD__(v12, v7))
    v15 = (v12 >> 31) + 0x7FFFFFFF;
  v16 = v12 + 32;
  v17 = SHIDWORD(v6) / 64 + (v16 >> 6);
  v18 = v10 + 32;
  v19 = v8 + (v18 >> 6);
  v20 = v14 / 64 - (v18 >> 6);
  v21 = v14 - (v8 & 0xFFFFFFC0) + 32;
  v22 = v15 - (v18 & 0xFFFFFFC0) + 32;
  v23 = v15 / 64 - (v16 >> 6);
  if (v51 != NAN)
    ((void (*)(float *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[LODWORD(v51)])(v43, &v50);
  v24 = v20 + (v21 >> 6);
  v25 = v23 + (v22 >> 6);
  if (!(v19 | v17) && !(v24 | v25))
    return 0;
  if (*(_QWORD *)a1)
    v27 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  else
    v27 = 0;
  v43[0] = (float)v19;
  v43[1] = (float)v17;
  v44 = (float)v19 + (float)v24;
  v45 = (float)v17;
  v46 = v44;
  v47 = (float)v17 + (float)v25;
  v48 = (float)v19;
  v49 = v47;
  WebCore::RenderObject::localToContainerQuad(v27, v43, 0, 2u, &v50);
  if (v53 >= v51)
    v28 = v51;
  else
    v28 = v53;
  if (*((float *)&v50 + 2) >= *(float *)&v50)
    v29 = *(float *)&v50;
  else
    v29 = *((float *)&v50 + 2);
  if (v28 >= v29)
    v28 = v29;
  v30 = fabsf(v28);
  v31 = v30 != INFINITY && v30 <= 2147500000.0;
  if (!v31)
    v28 = (float)((SLODWORD(v28) >> 31) ^ 0x7FFFFFFF);
  if (v54 >= v52)
    v32 = v52;
  else
    v32 = v54;
  if (*((float *)&v50 + 3) >= *((float *)&v50 + 1))
    v33 = *((float *)&v50 + 1);
  else
    v33 = *((float *)&v50 + 3);
  if (v32 >= v33)
    v32 = v33;
  v34 = fabsf(v32);
  if (v34 == INFINITY || v34 > 2147500000.0)
    v32 = (float)((SLODWORD(v32) >> 31) ^ 0x7FFFFFFF);
  v36 = floorf(v28);
  v37 = 2147500000.0;
  if (v36 < 2147500000.0)
  {
    v37 = -2147500000.0;
    v31 = v36 <= -2147500000.0;
    v38 = (float)(int)v36;
    if (!v31)
      v37 = v38;
  }
  v39 = floorf(v32);
  v40 = 2147500000.0;
  if (v39 < 2147500000.0)
  {
    v40 = -2147500000.0;
    if (v39 > -2147500000.0)
      v40 = (float)(int)v39;
  }
  if (v37 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFFLL;
  }
  else if (v37 <= -2147500000.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v37;
  }
  if (v40 >= 2147500000.0)
  {
    v42 = 0x7FFFFFFF00000000;
  }
  else if (v40 <= -2147500000.0)
  {
    v42 = 0x8000000000000000;
  }
  else
  {
    v42 = (unint64_t)(int)v40 << 32;
  }
  return v42 | v41;
}

void WebCore::MergeIdenticalElementsCommand::~MergeIdenticalElementsCommand(WebCore::MergeIdenticalElementsCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33AD2D8;
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v6 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::MergeIdenticalElementsCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::MergeIdenticalElementsCommand *)((char *)this + 24));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33AD2D8;
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v6 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::MergeIdenticalElementsCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::MergeIdenticalElementsCommand *)((char *)this + 24));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v9);
}

void WebCore::IncreaseSelectionListLevelCommand::~IncreaseSelectionListLevelCommand(WebCore::IncreaseSelectionListLevelCommand *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33AD330;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E33AD330;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::DecreaseSelectionListLevelCommand::~DecreaseSelectionListLevelCommand(WebCore::DecreaseSelectionListLevelCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::MoveSelectionCommand::~MoveSelectionCommand(WebCore::MoveSelectionCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33AD4D0;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E33AD4D0;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::MoveSelectionCommand::shouldDispatchInputEvents(WebCore::MoveSelectionCommand *this)
{
  return 0;
}

void WebCore::RemoveFormatCommand::~RemoveFormatCommand(WebCore::RemoveFormatCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::RemoveFormatCommand::editingAction(WebCore::RemoveFormatCommand *this)
{
  return 59;
}

void WebCore::RemoveNodeCommand::~RemoveNodeCommand(WebCore::RemoveNodeCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33AD670;
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v6 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::RemoveNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::RemoveNodeCommand *)((char *)this + 24));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33AD670;
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v6 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::RemoveNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::RemoveNodeCommand *)((char *)this + 24));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v9);
}

void WebCore::RemoveNodePreservingChildrenCommand::~RemoveNodePreservingChildrenCommand(WebCore::RemoveNodePreservingChildrenCommand *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33AD6C8;
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E33AD6C8;
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::MarkupAccumulator::URLReplacementData::~URLReplacementData(WebCore::MarkupAccumulator::URLReplacementData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v9 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v9)
    {
      v10 = *((_QWORD *)this + 1);
      do
      {
        v11 = *(_DWORD **)v10;
        if (*(_QWORD *)v10 != -1)
        {
          v12 = *(WTF::StringImpl **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::destroy(v12, a2);
              v11 = *(_DWORD **)v10;
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
          *(_QWORD *)v10 = 0;
          if (v11)
          {
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              --v11[2];
          }
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)this;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          v8 = v6[1];
          v6[1] = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
            {
              WTF::StringImpl::destroy(v8, a2);
              v7 = *v6;
            }
            else
            {
              *(_DWORD *)v8 -= 2;
            }
          }
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *__dst, uint64_t a2, _BYTE *__src, unsigned int a4, uint64_t a5, _BYTE *a6, unsigned int a7, int a8, _BYTE *a9, uint64_t a10)
{
  _BYTE *v15;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned __int128 *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  char v32;
  char v33;

  v15 = __dst;
  if (a2)
  {
    v17 = *(_BYTE **)(a2 + 8);
    v18 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v18)
      {
        if ((_DWORD)v18 == 1)
          *__dst = *v17;
        else
          __dst = memcpy(__dst, v17, v18);
      }
    }
    else
    {
      if (v18 < 0x10)
      {
        v26 = (unsigned __int128 *)__dst;
      }
      else
      {
        v26 = (unsigned __int128 *)&__dst[v18 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)__dst;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v17);
          v17 += 32;
          *v27++ = v28;
        }
        while (v27 != v26);
      }
      while (v26 != (unsigned __int128 *)&__dst[v18])
      {
        v32 = *v17;
        v17 += 2;
        *(_BYTE *)v26 = v32;
        v26 = (unsigned __int128 *)((char *)v26 + 1);
      }
    }
    v19 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v19 = 0;
  }
  v20 = &v15[v19];
  if (a4)
  {
    if (a4 == 1)
      *v20 = *__src;
    else
      __dst = memcpy(v20, __src, a4);
  }
  v21 = &v20[a4];
  if (a5)
  {
    v22 = *(_BYTE **)(a5 + 8);
    v23 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v23)
      {
        if ((_DWORD)v23 == 1)
          *v21 = *v22;
        else
          __dst = memcpy(v21, v22, v23);
      }
    }
    else
    {
      if (v23 < 0x10)
      {
        v29 = (unsigned __int128 *)v21;
      }
      else
      {
        v29 = (unsigned __int128 *)&v21[v23 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)v21;
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v22);
          v22 += 32;
          *v30++ = v31;
        }
        while (v30 != v29);
      }
      while (v29 != (unsigned __int128 *)&v21[v23])
      {
        v33 = *v22;
        v22 += 2;
        *(_BYTE *)v29 = v33;
        v29 = (unsigned __int128 *)((char *)v29 + 1);
      }
    }
    v24 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v24 = 0;
  }
  v25 = &v21[v24];
  if (!a7)
  {
LABEL_19:
    if (!(_DWORD)a10)
      return __dst;
    goto LABEL_20;
  }
  if (a7 != 1)
  {
    __dst = memcpy(&v21[v24], a6, a7);
    goto LABEL_19;
  }
  *v25 = *a6;
  if (!(_DWORD)a10)
    return __dst;
LABEL_20:
  __dst = &v25[a7];
  if ((_DWORD)a10 != 1)
    return memcpy(__dst, a9, a10);
  *__dst = *a9;
  return __dst;
}

uint64_t WebCore::getStartEndListChildren(uint64_t a1, WebCore::Node *a2, WebCore::Node **a3)
{
  WebCore::Node *v6;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v19;
  WebCore::Node *v20;

  if (!*(_BYTE *)(a1 + 97))
    return 0;
  WebCore::enclosingListChild(*(unsigned int **)(a1 + 64), a2, (unsigned int **)&v20);
  v7 = v20;
  if (!v20)
    return 0;
  if ((*((_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 97) == 2)
    {
      WebCore::enclosingListChild(*(unsigned int **)(a1 + 80), v6, (unsigned int **)&v19);
      v7 = v19;
      if (!v19)
      {
LABEL_22:
        v8 = 0;
        goto LABEL_42;
      }
      if ((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_13;
      v8 = 0;
      v19 = 0;
LABEL_8:
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, v6);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
LABEL_42:
      v7 = v20;
      v20 = 0;
      if (!v7)
        return v8;
      goto LABEL_43;
    }
    *((_DWORD *)v20 + 6) += 2;
    v19 = v7;
LABEL_13:
    while (1)
    {
      v9 = v20;
      v10 = (WebCore::Node *)*((_QWORD *)v20 + 4);
      v11 = (WebCore::Node *)*((_QWORD *)v7 + 4);
      if (v10 == v11)
        break;
      if (v11)
        *((_DWORD *)v11 + 6) += 2;
      v19 = v11;
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v7, v6);
          v11 = v19;
        }
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
      v7 = v11;
      if (!v11)
        goto LABEL_22;
    }
    if (*(_BYTE *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
    {
      if (*(unsigned int *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2F) | ((unint64_t)*(unsigned __int8 *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x33) << 32))
      {
        v12 = *(_QWORD *)((*(unsigned int *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2F) | ((unint64_t)*(unsigned __int8 *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x33) << 32))
                        + 8);
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 45) & 1) == 0)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8);
            if (v13)
            {
              if ((*(_WORD *)(v13 + 28) & 0x10) != 0)
              {
                v14 = *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24);
                if ((v14 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
                   || v14 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
                   || v14 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
                  && *(WebCore::Node **)(v13 + 32) == v10)
                {
                  *(_DWORD *)(v13 + 24) += 2;
                  v19 = (WebCore::Node *)v13;
                  if (*((_DWORD *)v7 + 6) == 2)
                  {
                    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v7, v6);
                      v9 = v20;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v7 + 6) -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
    v20 = 0;
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v6);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    v16 = v19;
    v19 = 0;
    v17 = *a3;
    *a3 = v16;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v17, v6);
          v7 = v19;
          v19 = 0;
          v8 = 1;
          if (!v7)
            goto LABEL_42;
          goto LABEL_8;
        }
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    v8 = 1;
    goto LABEL_42;
  }
  v8 = 0;
  v20 = 0;
LABEL_43:
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, v6);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return v8;
}

uint64_t *WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const&>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t *result;

  v3 = WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), (WTF::StringImpl **)v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *result;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  return result;
}

char *WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF::StringImpl ***v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF::StringImpl ***v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  _QWORD *v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **v36;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl ***)((char *)v5 + 8 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v26 = *(WTF **)a1;
        return (char *)v26 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        v13 = (WTF::StringImpl ***)v5;
        do
        {
          *v12 = 0;
          v14 = *v13;
          *v13 = 0;
          *v12 = v14;
          v15 = *v13;
          if (*v13)
          {
            v16 = *((unsigned int *)v15 - 1);
            if ((_DWORD)v16)
            {
              v17 = *v13;
              do
              {
                v18 = *v17;
                if (*v17 != (WTF::StringImpl *)-1)
                {
                  *v17 = 0;
                  if (v18)
                  {
                    if (*(_DWORD *)v18 == 2)
                      WTF::StringImpl::destroy(v18, v11);
                    else
                      *(_DWORD *)v18 -= 2;
                  }
                }
                v17 += 2;
                --v16;
              }
              while (v16);
            }
            WTF::fastFree((WTF *)(v15 - 2), v11);
          }
          ++v12;
          ++v13;
        }
        while (v13 != v6);
        v26 = *(WTF **)a1;
        if (v5)
        {
          if (v26 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v26 = *(WTF **)a1;
        }
        return (char *)v26 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_59:
      __break(0xC471u);
      JUMPOUT(0x195B0B9D8);
    }
  }
  v19 = *(unsigned int *)(a1 + 8);
  v20 = v19 + (v19 >> 2);
  if (v20 >= 0x10)
    v21 = v20 + 1;
  else
    v21 = 16;
  if (v21 <= a2)
    v22 = a2;
  else
    v22 = v21;
  if (v22 > v19)
  {
    if (v22 >> 29)
      goto LABEL_59;
    v23 = *(unsigned int *)(a1 + 12);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v22));
    *(_DWORD *)(a1 + 8) = v22;
    *(_QWORD *)a1 = v24;
    if ((_DWORD)v23)
    {
      v28 = (WTF::StringImpl ***)((char *)v5 + 8 * v23);
      v29 = (WTF::StringImpl ***)v5;
      do
      {
        *v24 = 0;
        v30 = *v29;
        *v29 = 0;
        *v24 = v30;
        v31 = *v29;
        if (*v29)
        {
          v32 = v24;
          v33 = *v29;
          v34 = *((unsigned int *)v31 - 1);
          if ((_DWORD)v34)
          {
            do
            {
              v35 = *v31;
              if (*v31 != (WTF::StringImpl *)-1)
              {
                *v31 = 0;
                if (v35)
                {
                  v36 = v31;
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, v25);
                  else
                    *(_DWORD *)v35 -= 2;
                  v31 = v36;
                }
              }
              v31 += 2;
              --v34;
            }
            while (v34);
          }
          WTF::fastFree((WTF *)(v33 - 2), v25);
          v24 = v32;
        }
        ++v24;
        ++v29;
      }
      while (v29 != v28);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v25);
    }
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>(WTF::StringImpl *result, uint64_t *a2, WTF::StringImpl **a3, _QWORD *a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_DWORD *)*a3 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl *)(v8 + 16 * v15);
    v17 = *(WTF::StringImpl **)v16;
    if (*(_QWORD *)v16 != -1)
      break;
    v11 = (WTF::StringImpl *)(v8 + 16 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v16 = v11;
    }
    *a3 = 0;
    result = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_QWORD *)v16 + 1) = *a4;
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
        goto LABEL_23;
    }
    else if (3 * v23 <= 4 * v22)
    {
      if (!(_DWORD)v23)
      {
        v24 = 8;
LABEL_30:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, v24, (WTF::StringImpl **)v16);
        v16 = result;
        v20 = *a2;
        if (*a2)
          v23 = *(unsigned int *)(v20 - 4);
        else
          v23 = 0;
        goto LABEL_34;
      }
LABEL_23:
      v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
      goto LABEL_30;
    }
LABEL_34:
    *(_QWORD *)v7 = v16;
    *((_QWORD *)v7 + 1) = v20 + 16 * v23;
    *((_BYTE *)v7 + 16) = 1;
    return result;
  }
  if (v17 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v8 + 16 * v25;
  *((_BYTE *)v7 + 16) = 0;
  *(_QWORD *)(v8 + 16 * v15 + 8) = *a4;
  return result;
}

_QWORD *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v19 = v18 & v16;
            v18 = ++v17 + v19;
          }
          while (*(_QWORD *)(v15 + 16 * v19));
          v20 = (_QWORD *)(v15 + 16 * v19);
          *v20 = 0;
          v21 = *(_OWORD *)v13;
          *v13 = 0;
          *(_OWORD *)v20 = v21;
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v12 = v20;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

char *WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = 0;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(unint64_t *result@<X0>, char *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD v24[5];

  v5 = 0;
  v24[4] = *MEMORY[0x1E0C80C00];
  v6 = *result;
  v7 = *result;
  do
  {
    ++v5;
    v8 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v8);
  v9 = 0;
  v10 = *a3;
  v11 = *a3;
  do
  {
    ++v9;
    v8 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v8);
  if (v9 < 0)
    goto LABEL_25;
  v12 = 0;
  v13 = __OFADD__(v9, 1);
  v14 = v9 + 1;
  v15 = v13;
  if (v5 < 0 || (v15 & 1) != 0)
    goto LABEL_24;
  v16 = (v5 + v14);
  if (__OFADD__(v5, v14) || (v16 & 0x80000000) != 0)
  {
LABEL_25:
    v12 = 0;
    goto LABEL_24;
  }
  v17 = *a2;
  result = (unint64_t *)WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
  v12 = v24[0];
  if (v24[0])
  {
    v18 = 0;
    v19 = v24[0] + 20;
    *(_DWORD *)v24[0] = 2;
    *(_DWORD *)(v12 + 4) = v16;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 4;
    v20 = v6;
    do
    {
      *((_BYTE *)&v24[3] + v18--) = (v20 % 0xA) | 0x30;
      v8 = v20 > 9;
      v20 /= 0xAuLL;
    }
    while (v8);
    if (v18 + 26 <= 25)
      result = (unint64_t *)memcpy((void *)(v12 + 20), (char *)&v24[3] + v18 + 1, -v18);
    v21 = 0;
    do
    {
      ++v21;
      v8 = v6 > 9;
      v6 /= 0xAuLL;
    }
    while (v8);
    v22 = 0;
    v23 = (_BYTE *)(v19 + v21);
    *v23 = v17;
    do
    {
      *((_BYTE *)&v24[3] + v22--) = (v10 % 0xA) | 0x30;
      v8 = v10 > 9;
      v10 /= 0xAuLL;
    }
    while (v8);
    if (v22 + 26 <= 25)
      result = (unint64_t *)memcpy(v23 + 1, (char *)&v24[3] + v22 + 1, -v22);
  }
LABEL_24:
  *a4 = v12;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Node&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    *(_DWORD *)(a2 + 24) += 2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 16 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 16 * v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::ReplaceNodeWithSpanCommand::doApply(unsigned int *this, __n128 a2, uint64_t a3, uint64_t a4, WebCore::TreeScope *a5)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  WebCore::Element *v16;

  v5 = *((_QWORD *)this + 31);
  if ((*(_BYTE *)(v5 + 22) & 8) != 0)
  {
    v6 = this;
    v7 = *((_QWORD *)this + 32);
    if (v7)
      goto LABEL_9;
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    v9 = bmalloc::api::isoAllocate();
    v7 = v9;
    *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v9 + 24) = 0x101C00000002;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = v8 + 96;
    a2 = 0uLL;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    ++*(_DWORD *)(v8 + 3324);
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 0;
    v11 = WebCore::HTMLNames::spanTag;
    if (WebCore::HTMLNames::spanTag)
      ++*(_DWORD *)WebCore::HTMLNames::spanTag;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = 0;
    *(_QWORD *)v9 = off_1E33CBA30;
    v12 = *((_QWORD *)v6 + 32);
    *((_QWORD *)v6 + 32) = v7;
    if (!v12)
      goto LABEL_9;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    v7 = *((_QWORD *)v6 + 32);
    if (v7)
    {
LABEL_9:
      v13 = 0;
      *(_DWORD *)(v7 + 24) += 2;
    }
    else
    {
      v13 = 1;
    }
    v16 = (WebCore::Element *)v7;
    v14 = *((_QWORD *)v6 + 31);
    *(_DWORD *)(v14 + 24) += 2;
    this = WebCore::swapInNodePreservingAttributesAndChildren(&v16, (WebCore::Element *)v14, a4, a5, a2);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    if ((v13 & 1) == 0)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v7, v15);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::swapInNodePreservingAttributesAndChildren(WebCore::Element **a1, WebCore::Element *a2, uint64_t a3, WebCore::TreeScope *a4, __n128 a5)
{
  uint64_t v7;
  WebCore::Element *v8;
  unsigned int *result;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::Element *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WebCore::Node *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char v36;
  WebCore::Node *v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;
  char v40;
  _BYTE v41[8];
  WTF::StringImpl *v42;
  char v43;
  WTF *v44;
  uint64_t v45;
  _BYTE v46[96];

  v7 = *((_QWORD *)a2 + 4);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v8 = *a1;
  WebCore::Element::cloneAttributesFromElement(*a1, a2, a3, a4, a5);
  result = (unsigned int *)(*(uint64_t (**)(WebCore::Element *, WebCore::Element *))(*(_QWORD *)v8 + 496))(v8, a2);
  v44 = (WTF *)v46;
  v45 = 11;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
    v10 = *((_QWORD *)a2 + 10);
    if (v10)
    {
      LODWORD(v11) = 0;
      v12 = (WTF *)v46;
      do
      {
        v13 = v11;
        if ((_DWORD)v11 == (_DWORD)v45)
        {
          v15 = v11 + 1;
          v16 = v13 + (v13 >> 2);
          if (v16 >= 0x10)
            v17 = v16 + 1;
          else
            v17 = 16;
          if (v17 <= v15)
            v18 = v13 + 1;
          else
            v18 = v17;
          if (v18 < 0xC)
          {
            v44 = (WTF *)v46;
            LODWORD(v45) = 11;
            v19 = (WTF *)v46;
          }
          else
          {
            if (v18 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18));
            LODWORD(v45) = v18;
            v44 = v19;
          }
          result = (unsigned int *)memcpy(v19, v12, 8 * v13);
          if (v46 != (_BYTE *)v12 && v12)
          {
            if (v44 == v12)
            {
              v44 = 0;
              LODWORD(v45) = 0;
            }
            result = (unsigned int *)WTF::fastFree(v12, v20);
          }
          LODWORD(v11) = HIDWORD(v45);
          v12 = v44;
          v14 = (_QWORD *)((char *)v44 + 8 * HIDWORD(v45));
        }
        else
        {
          v14 = (_QWORD *)((char *)v12 + 8 * v11);
        }
        *(_DWORD *)(v10 + 24) += 2;
        *v14 = v10;
        v11 = (v11 + 1);
        HIDWORD(v45) = v11;
        v10 = *(_QWORD *)(v10 + 56);
      }
      while (v10);
      if ((_DWORD)v11)
      {
        v21 = 8 * v11;
        do
        {
          WebCore::ContainerNode::appendChild((uint64_t)*a1, *(WebCore::Node **)v12, (uint64_t)v41);
          if (v43)
          {
            v23 = v42;
            v42 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
          }
          v12 = (WTF *)((char *)v12 + 8);
          v21 -= 8;
        }
        while (v21);
      }
    }
  }
  v24 = *a1;
  *((_DWORD *)a2 + 6) += 2;
  v37 = a2;
  WebCore::ContainerNode::insertBefore(v7, (uint64_t *)v24, &v37, (uint64_t)v38);
  if (v40)
  {
    v26 = v39;
    v39 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  v27 = v37;
  v37 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v27, v25);
    }
    else
    {
      *((_DWORD *)v27 + 6) -= 2;
    }
  }
  WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v7, a2, &v34);
  if (v36)
  {
    v29 = v35;
    v35 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (HIDWORD(v45))
  {
    v31 = v44;
    v32 = 8 * HIDWORD(v45);
    do
    {
      v33 = *(_QWORD *)v31;
      *(_QWORD *)v31 = 0;
      if (v33)
      {
        if (*(_DWORD *)(v33 + 24) == 2)
        {
          if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v33, v28);
        }
        else
        {
          *(_DWORD *)(v33 + 24) -= 2;
        }
      }
      v31 = (WTF *)((char *)v31 + 8);
      v32 -= 8;
    }
    while (v32);
  }
  result = (unsigned int *)v44;
  if (v46 == (_BYTE *)v44 || v44 == 0)
  {
    if (!v7)
      return result;
    goto LABEL_53;
  }
  v44 = 0;
  LODWORD(v45) = 0;
  result = (unsigned int *)WTF::fastFree((WTF *)result, v28);
  if (v7)
  {
LABEL_53:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v28);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ReplaceNodeWithSpanCommand::doUnapply(unsigned int *this, void *a2, uint64_t a3, WebCore::TreeScope *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Element *v7;

  v5 = *((_QWORD *)this + 32);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    if ((*(_BYTE *)(v5 + 22) & 8) != 0)
    {
      v6 = *((_QWORD *)this + 31);
      *(_DWORD *)(v6 + 24) += 2;
      v7 = (WebCore::Element *)v6;
      this = WebCore::swapInNodePreservingAttributesAndChildren(&v7, (WebCore::Element *)v5, a3, a4, a5);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::ReplaceRangeWithTextCommand::willApplyCommand(WebCore::Node **this)
{
  void *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  int v5;
  WebCore::Node *v7;

  WebCore::createFragmentFromText(this + 35, (const WebCore::SimpleRange *)(this + 40), (uint64_t *)&v7);
  v3 = v7;
  v7 = 0;
  v4 = this[39];
  this[39] = v3;
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 6) - 2;
    if (*((_DWORD *)v4 + 6) != 2)
    {
LABEL_3:
      *((_DWORD *)v4 + 6) = v5;
      return WebCore::CompositeEditCommand::willApplyCommand((WebCore::CompositeEditCommand *)this, v2);
    }
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v4, v2);
      v4 = v7;
      v7 = 0;
      if (v4)
      {
        v5 = *((_DWORD *)v4 + 6) - 2;
        if (*((_DWORD *)v4 + 6) != 2)
          goto LABEL_3;
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4, v2);
      }
    }
  }
  return WebCore::CompositeEditCommand::willApplyCommand((WebCore::CompositeEditCommand *)this, v2);
}

void WebCore::ReplaceRangeWithTextCommand::doApply(WebCore::Node **this)
{
  int *v2;
  uint64_t v3;
  uint64_t *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t *v13;
  uint64_t v14[13];

  v2 = (int *)(this + 35);
  WebCore::VisibleSelection::VisibleSelection((uint64_t)v14, (uint64_t)(this + 35), 1, 0);
  if (WebCore::FrameSelection::shouldChangeSelection(*((WebCore::FrameSelection **)this[2] + 383), (const WebCore::VisibleSelection *)v14)&& WebCore::characterCount(v2, 0))
  {
    v3 = WTF::fastMalloc((WTF *)0x160);
    v13 = (uint64_t *)WebCore::SetSelectionCommand::SetSelectionCommand(v3, v14, 6);
    WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)this, &v13);
    v4 = v13;
    v13 = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 2) == 1)
        (*(void (**)(uint64_t *))(*v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 2);
    }
    v5 = this[2];
    *((_DWORD *)v5 + 6) += 2;
    v12 = v5;
    v6 = this[39];
    if (v6)
      *((_DWORD *)v6 + 6) += 2;
    v7 = WTF::fastMalloc((WTF *)0x1D8);
    v8 = WebCore::EditCommand::EditCommand(v7, (uint64_t *)&v12, 25);
    *(_OWORD *)(v8 + 248) = 0u;
    *(_OWORD *)(v8 + 264) = 0u;
    *(_QWORD *)v8 = off_1E33ADA18;
    *(_QWORD *)(v8 + 280) = 0;
    *(_DWORD *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 292) &= 0xF0u;
    *(_QWORD *)(v8 + 296) = 0;
    *(_DWORD *)(v8 + 304) = 0;
    *(_BYTE *)(v8 + 308) &= 0xF0u;
    *(_QWORD *)(v8 + 312) = 0;
    *(_DWORD *)(v8 + 320) = 0;
    *(_BYTE *)(v8 + 324) &= 0xF0u;
    *(_QWORD *)(v8 + 328) = 0;
    *(_DWORD *)(v8 + 336) = 0;
    *(_BYTE *)(v8 + 340) &= 0xF0u;
    *(_QWORD *)(v8 + 344) = 0;
    *(_DWORD *)(v8 + 352) = 0;
    *(_BYTE *)(v8 + 356) &= 0xF0u;
    *(_QWORD *)(v8 + 360) = 0;
    *(_DWORD *)(v8 + 368) = 0;
    *(_BYTE *)(v8 + 372) &= 0xF0u;
    *(_WORD *)(v8 + 376) = 1;
    *(_BYTE *)(v8 + 378) = *(_BYTE *)(v8 + 378) & 0xFC | 1;
    *(_QWORD *)(v8 + 384) = 0;
    *(_DWORD *)(v8 + 392) = 0;
    *(_BYTE *)(v8 + 396) &= 0xF0u;
    *(_QWORD *)(v8 + 400) = 0;
    *(_DWORD *)(v8 + 408) = 0;
    *(_BYTE *)(v8 + 412) &= 0xF0u;
    *(_QWORD *)(v8 + 416) = 0;
    *(_WORD *)(v8 + 424) = 0;
    *(_BYTE *)(v8 + 426) = 1;
    *(_QWORD *)(v8 + 432) = v6;
    *(_QWORD *)(v8 + 440) = 0;
    *(_QWORD *)(v8 + 461) = 0;
    *(_QWORD *)(v8 + 448) = 0;
    *(_QWORD *)(v8 + 456) = 0;
    v13 = (uint64_t *)v8;
    WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)this, &v13);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(uint64_t *))(*v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 2);
    }
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v9);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v14);
}

WebCore::Node *WebCore::ReplaceRangeWithTextCommand::inputEventData@<X0>(WebCore::ReplaceRangeWithTextCommand *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Node *result;
  _DWORD *v6;

  result = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
  if (result)
  {
    v6 = (_DWORD *)*((_QWORD *)this + 40);
    if (v6)
      *v6 += 2;
  }
  else
  {
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

unsigned int *WebCore::ReplaceRangeWithTextCommand::inputEventDataTransfer@<X0>(WebCore::ReplaceRangeWithTextCommand *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  WebCore::DataTransfer *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  result = (unsigned int *)WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
  if (result)
  {
    *a3 = 0;
  }
  else
  {
    v6 = (WebCore::ReplaceRangeWithTextCommand *)((char *)this + 320);
    v7 = *((_QWORD *)this + 39);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    v16 = 0;
    v17 = 0;
    v14 = 0;
    v15 = 0;
    WebCore::serializeFragment(v7, 0, 0, 0, 0, 0, (uint64_t *)&v16, (uint64_t *)&v14, &v18);
    WebCore::DataTransfer::createForInputEvent(v6, (const WTF::String *)&v18, &v19);
    v9 = v18;
    *a3 = v19;
    v18 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (HIDWORD(v15))
      WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v14, (WTF *)((char *)v14 + 24 * HIDWORD(v15)));
    v10 = v14;
    if (v14)
    {
      v14 = 0;
      LODWORD(v15) = 0;
      WTF::fastFree(v10, v8);
    }
    if (HIDWORD(v17))
    {
      v11 = v16;
      v12 = 8 * HIDWORD(v17);
      do
      {
        v13 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v8);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v11 = (WTF *)((char *)v11 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    result = (unsigned int *)v16;
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::ReplaceRangeWithTextCommand::targetRanges@<X0>(WebCore::ReplaceRangeWithTextCommand *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *result;
  int v9;

  v3 = *((_QWORD *)this + 35);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *((_DWORD *)this + 72);
  v5 = *((_QWORD *)this + 37);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_DWORD *)this + 76);
  v7 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = v3;
  *(_DWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v5;
  *(_DWORD *)(v7 + 40) = v6;
  *(_QWORD *)v7 = off_1E33A7EF0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  a2[1] = 0x100000001;
  *a2 = result;
  v9 = *(_DWORD *)(v7 + 8);
  *result = v7;
  *(_DWORD *)(v7 + 8) = v9 + 1;
  if (!v9)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_DWORD *)(v7 + 8) = v9;
  return result;
}

uint64_t WebCore::ReplacementFragment::removeInterchangeNodes(uint64_t this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;

  v3 = this;
  v4 = 0;
  *(_WORD *)(this + 8) = 0;
  if (a2 && (*((_WORD *)a2 + 14) & 4) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      while (1)
      {
        v4 = v5;
        this = WebCore::isInterchangeNewlineNode((WebCore *)v5, a2);
        if ((_DWORD)this)
          break;
        if ((*(_WORD *)(v5 + 28) & 4) != 0)
        {
          v5 = *(_QWORD *)(v5 + 80);
          if (v5)
            *(_DWORD *)(v5 + 24) += 2;
        }
        else
        {
          v5 = 0;
        }
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        if (!v5)
          goto LABEL_24;
      }
      *(_BYTE *)(v3 + 8) = 1;
      v6 = *(_QWORD *)(v5 + 32);
      if (v6 && (*(_WORD *)(v6 + 28) & 0x80) == 0)
      {
        *(_DWORD *)(v6 + 24) += 2;
        this = (uint64_t)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v6, (WebCore::Node *)v4, &v25);
        if (v27)
        {
          this = (uint64_t)v26;
          v26 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
    }
    else
    {
LABEL_24:
      v4 = 0;
    }
  }
  if (!a2 || (*((_WORD *)a2 + 14) & 4) == 0 || !*((_QWORD *)a2 + 10))
  {
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    return this;
  }
  v7 = *((_QWORD *)a2 + 11);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (v7)
  {
    while (1)
    {
      v8 = v7;
      this = WebCore::isInterchangeNewlineNode((WebCore *)v7, a2);
      if ((_DWORD)this)
        break;
      if ((*(_WORD *)(v7 + 28) & 4) != 0)
      {
        v7 = *(_QWORD *)(v7 + 88);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
      }
      else
      {
        v7 = 0;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      if (!v7)
        goto LABEL_48;
    }
    *(_BYTE *)(v3 + 9) = 1;
    v24 = *(_QWORD *)(v7 + 32);
    if (v24 && (*(_WORD *)(v24 + 28) & 0x80) == 0)
    {
      *(_DWORD *)(v24 + 24) += 2;
      this = (uint64_t)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v24, (WebCore::Node *)v7, &v25);
      if (v27)
      {
        this = (uint64_t)v26;
        v26 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *(_DWORD *)this -= 2;
        }
      }
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_48:
    v8 = 0;
  }
  if ((*((_WORD *)a2 + 14) & 4) == 0)
  {
    v9 = 0;
    if (!v8)
      goto LABEL_57;
    goto LABEL_55;
  }
  v9 = *((_QWORD *)a2 + 10);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  if (v8)
  {
LABEL_55:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
LABEL_57:
  if (v9)
  {
    v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      if ((v11 = v9, v12 = *(_WORD *)(v9 + 28), (v12 & 4) != 0) && (v13 = *(_QWORD *)(v9 + 80)) != 0
        || (v13 = *(_QWORD *)(v9 + 56)) != 0)
      {
LABEL_65:
        v15 = 0;
        *(_DWORD *)(v13 + 24) += 2;
        if ((v12 & 0x10) == 0)
          goto LABEL_95;
      }
      else
      {
        v14 = v9;
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 32);
          if (!v14)
            break;
          v13 = *(_QWORD *)(v14 + 56);
          if (v13)
            goto LABEL_65;
        }
        v13 = 0;
        v15 = 1;
        if ((v12 & 0x10) == 0)
        {
LABEL_95:
          v9 = v13;
          goto LABEL_96;
        }
      }
      *(_DWORD *)(v9 + 24) += 2;
      v16 = *(_QWORD *)(v9 + 104);
      if (!v16)
        break;
      v17 = *(unsigned int *)(v16 + 4);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(v16 + 40);
        v19 = *(unsigned int *)(v16 + 52);
        if (!v19)
          break;
      }
      else
      {
        v18 = v16 + 32;
        v19 = v17 >> 5;
        if (!(v17 >> 5))
          break;
      }
      v20 = (_QWORD *)(v18 + 8);
      while (1)
      {
        v21 = *(v20 - 1);
        if (v21 == WebCore::HTMLNames::classAttr
          || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
          && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
        {
          break;
        }
        v20 += 2;
        if (!--v19)
          goto LABEL_78;
      }
LABEL_79:
      this = MEMORY[0x19AEA53F4](*v20, "Apple-converted-space", 21);
      v22 = this;
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) != 0)
        {
          if (!(_DWORD)this)
            goto LABEL_95;
        }
        else
        {
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
          if ((v22 & 1) == 0)
            goto LABEL_95;
        }
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
        if ((this & 1) == 0)
          goto LABEL_95;
      }
      v9 = *(_QWORD *)(v11 + 56);
      if (!v9)
      {
        v23 = v11;
        while (1)
        {
          v23 = *(_QWORD *)(v23 + 32);
          if (!v23)
            break;
          v9 = *(_QWORD *)(v23 + 56);
          if (v9)
            goto LABEL_85;
        }
        v9 = 0;
        if ((v15 & 1) != 0)
          goto LABEL_92;
LABEL_90:
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        goto LABEL_92;
      }
LABEL_85:
      *(_DWORD *)(v9 + 24) += 2;
      if ((v15 & 1) == 0)
        goto LABEL_90;
LABEL_92:
      this = (uint64_t)WebCore::ReplacementFragment::removeNodePreservingChildren((unsigned int *)v11, a2);
LABEL_96:
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      if (!v9)
        return this;
    }
LABEL_78:
    v20 = v10;
    goto LABEL_79;
  }
  return this;
}

unsigned int *WebCore::ReplacementFragment::insertFragmentForTestRendering(WebCore::Node **this, WebCore::Node *a2, uint64_t a3)
{
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *result;
  void *v13;
  char v14[8];
  WTF::StringImpl *v15;
  char v16;
  _BYTE v17[8];
  WTF::StringImpl *v18;
  char v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::createDefaultParagraphElement((WebCore *)v6, this);
  v7 = *this;
  v8 = *(_QWORD *)a2;
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  WebCore::ContainerNode::appendChild((uint64_t)v7, (WebCore::Node *)v8, (uint64_t)v17);
  if (v19)
  {
    v10 = v18;
    v18 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if ((*(_WORD *)(a3 + 28) & 4) != 0)
  {
    WebCore::ContainerNode::appendChild(a3, v7, (uint64_t)v14);
    if (!v16)
      goto LABEL_14;
  }
  else
  {
    v14[0] = 1;
    v15 = 0;
    v16 = 1;
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  result = (unsigned int *)WebCore::Document::updateLayout(v6, 2u, 0);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ReplacementFragment::removeUnrenderedNodes(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  char v23;

  if (!this)
    return this;
  v2 = this;
  if ((*(_WORD *)(this + 28) & 4) == 0)
    return this;
  v3 = *(_QWORD *)(this + 80);
  if (!v3)
    return this;
  v4 = 0;
  LODWORD(v5) = 0;
  v6 = 0;
  *(_DWORD *)(v3 + 24) += 2;
  do
  {
    v7 = v3;
    if ((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v8 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v8 + 0x2D) & 2) != 0)
      v8 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_BYTE *)(v8 + 120) & 0x30) != 0
      && *(unsigned __int8 *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) - 37 >= 4)
    {
LABEL_10:
      v9 = v4;
      if (v4 == (_DWORD)v5)
      {
        v10 = v4 + ((unint64_t)v4 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= (unint64_t)v4 + 1)
          v5 = v4 + 1;
        else
          v5 = v11;
        if (v5 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v12 = (char *)WTF::fastMalloc((WTF *)(8 * v5));
        this = (uint64_t)memcpy(v12, v6, 8 * v4);
        if (v6)
        {
          if (v12 == v6)
          {
            v12 = 0;
            LODWORD(v5) = 0;
          }
          this = WTF::fastFree((WTF *)v6, a2);
        }
        v6 = v12;
      }
      ++v4;
      *(_DWORD *)(v7 + 24) += 2;
      *(_QWORD *)&v6[8 * v9] = v7;
    }
    if ((*(_WORD *)(v7 + 28) & 4) == 0 || (v3 = *(_QWORD *)(v7 + 80)) == 0)
    {
      if (v7 == v2)
        goto LABEL_27;
      v3 = *(_QWORD *)(v7 + 56);
      if (!v3)
      {
        v13 = v7;
        while (1)
        {
          v13 = *(_QWORD *)(v13 + 32);
          if (!v13 || v13 == v2)
            break;
          v3 = *(_QWORD *)(v13 + 56);
          if (v3)
            goto LABEL_35;
        }
LABEL_27:
        v3 = 0;
        goto LABEL_36;
      }
    }
LABEL_35:
    *(_DWORD *)(v3 + 24) += 2;
LABEL_36:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  while (v3);
  if (v4)
  {
    v15 = 8 * v4;
    v16 = v15;
    v17 = v6;
    do
    {
      a2 = *(WebCore::Node **)v17;
      v18 = *(_QWORD *)(*(_QWORD *)v17 + 32);
      if (v18 && (*(_WORD *)(v18 + 28) & 0x80) == 0)
      {
        *(_DWORD *)(v18 + 24) += 2;
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v18, a2, &v21);
        if (v23)
        {
          v19 = v22;
          v22 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, a2);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      v17 += 8;
      v16 -= 8;
    }
    while (v16);
    v20 = (uint64_t *)v6;
    do
    {
      this = *v20;
      *v20 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      ++v20;
      v15 -= 8;
    }
    while (v15);
  }
  if (v6)
    return WTF::fastFree((WTF *)v6, a2);
  return this;
}

WTF::StringImpl *WebCore::ReplacementFragment::restoreAndRemoveTestRenderingNodesToFragment(WTF::StringImpl *this, WebCore::StyledElement *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[8];
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 10);
    if (v3)
    {
      v4 = (uint64_t *)this;
      while (1)
      {
        *(_DWORD *)(v3 + 24) += 2;
        WebCore::ContainerNode::removeChild(a2, (WebCore::Node *)v3, &v14);
        if (v16)
        {
          v6 = v15;
          v15 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, v5);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v7 = *v4;
        if (*v4)
          *(_DWORD *)(v7 + 24) += 2;
        this = (WTF::StringImpl *)WebCore::ContainerNode::appendChild(v7, (WebCore::Node *)v3, (uint64_t)v11);
        if (!v13)
          goto LABEL_14;
        this = v12;
        v12 = 0;
        if (!this)
          goto LABEL_14;
        if (*(_DWORD *)this != 2)
          break;
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
        if (v7)
        {
LABEL_15:
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
LABEL_17:
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v8);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
        v3 = *((_QWORD *)a2 + 10);
        if (!v3)
          goto LABEL_28;
      }
      *(_DWORD *)this -= 2;
LABEL_14:
      if (v7)
        goto LABEL_15;
      goto LABEL_17;
    }
LABEL_28:
    v9 = *((_QWORD *)a2 + 4);
    if (v9 && (*(_WORD *)(v9 + 28) & 0x80) == 0)
    {
      *(_DWORD *)(v9 + 24) += 2;
      this = WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, a2, &v17);
      if (v19)
      {
        this = v18;
        v18 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
          else
            *(_DWORD *)this -= 2;
        }
      }
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::ReplacementFragment::removeNodePreservingChildren(unsigned int *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;

  v2 = (uint64_t)this;
  this[6] += 2;
  if ((this[7] & 4) != 0)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (!v3)
        break;
      *(_DWORD *)(v3 + 24) += 2;
      v4 = *(_QWORD *)(v3 + 32);
      if (v4 && (*(_WORD *)(v4 + 28) & 0x80) == 0)
      {
        *(_DWORD *)(v4 + 24) += 2;
        this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v4, (WebCore::Node *)v3, &v9);
        if (v11)
        {
          this = (unsigned int *)v10;
          v10 = 0;
          if (this)
          {
            if (*this == 2)
              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            else
              *this -= 2;
          }
        }
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
      v5 = *(_QWORD *)(v2 + 32);
      if (v5 && (*(_WORD *)(v5 + 28) & 0x80) == 0)
      {
        *(_DWORD *)(v5 + 24) += 2;
        *(_DWORD *)(v2 + 24) += 2;
        v8 = (WebCore::Node *)v2;
        WebCore::ContainerNode::insertBefore(v5, (uint64_t *)v3, &v8, (uint64_t)&v9);
        if (v11)
        {
          v6 = v10;
          v10 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        this = (unsigned int *)v8;
        v8 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    while ((*(_WORD *)(v2 + 28) & 4) != 0);
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7 && (*(_WORD *)(v7 + 28) & 0x80) == 0)
  {
    *(_DWORD *)(v7 + 24) += 2;
    this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v7, (WebCore::Node *)v2, &v9);
    if (v11)
    {
      this = (unsigned int *)v10;
      v10 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *this -= 2;
      }
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::isInterchangeNewlineNode(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    return 0;
  }
  *((_DWORD *)this + 6) += 2;
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if ((_DWORD)v6)
      {
LABEL_6:
        v6 = v6;
        v7 = (_QWORD *)(v5 + 8);
        while (1)
        {
          v8 = *(v7 - 1);
          if (v8 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            goto LABEL_16;
          }
          v7 += 2;
          if (!--v6)
          {
            v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_16;
          }
        }
      }
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if ((_DWORD)v6)
        goto LABEL_6;
    }
  }
  v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_16:
  v9 = MEMORY[0x19AEA53F4](*v7, "Apple-interchange-newline", 25);
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, v10);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return v9;
}

unsigned int *WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent(WebCore::ReplaceSelectionCommand *this, uint64_t a2, const WebCore::QualifiedName *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  __int16 v8;
  char v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *result;
  void *v13;
  _DWORD *v14;
  int v15;
  char v16;

  v5 = (_QWORD *)(a2 + 400);
  v6 = (_DWORD *)WebCore::enclosingElementWithTag((WebCore *)(a2 + 400), (const WebCore::Position *)&WebCore::HTMLNames::selectTag, a3);
  v7 = v6;
  if (v6)
  {
    v6[6] += 2;
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 208))(v6) & 1) == 0)
    {
      v7[6] += 2;
      v14 = v7;
      v15 = 0;
      v9 = 2;
      goto LABEL_5;
    }
    v8 = *((_WORD *)v7 + 14);
    v7[6] += 2;
    if ((v8 & 1) == 0)
    {
      v14 = v7;
      v15 = 0;
      v9 = 4;
LABEL_5:
      v16 = v9;
      v10 = v7;
      goto LABEL_9;
    }
    v11 = *((_QWORD *)v7 + 10);
    if (v11)
      LODWORD(v11) = *(_DWORD *)(v11 + 4);
    v14 = v7;
    v15 = v11;
    v10 = v7;
    v16 = 0;
  }
  else
  {
    v10 = (_DWORD *)*v5;
    if (v10)
      v10[6] += 2;
    v14 = v10;
    v15 = *(_DWORD *)(a2 + 408);
    v16 = *(_BYTE *)(a2 + 412);
  }
LABEL_9:
  result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v14, (uint64_t)this);
  *((_BYTE *)this + 16) = 1;
  if (v10)
  {
    if (v10[6] == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v10, v13);
    }
    else
    {
      v10[6] -= 2;
    }
  }
  if (v7)
  {
    if (v7[6] == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v13);
    }
    else
    {
      v7[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ReplaceSelectionCommand::shouldMerge(WebCore::ReplaceSelectionCommand *this, VisiblePosition *a2, const VisiblePosition *a3)
{
  uint64_t v3;
  Node *var0;
  BOOL v5;
  uint64_t v6;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  void *v14;
  void *v15;
  int *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  __int16 v33;
  uint64_t v34;
  WebCore::Node *v35;
  int v36;
  uint64_t v37;
  const WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  WebCore::Node *v47;
  unsigned int var1;
  char v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  int v52;
  char v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  int v58;
  char v59;
  WebCore::Node *v60;
  Node *v61;
  WebCore::Node *v62;
  uint64_t v63;
  WebCore::Node *v64;
  const WTF::StringImpl *v65;
  WTF *v66;

  v3 = *(_QWORD *)this;
  var0 = a2->var0.var0.var0;
  if (*(_QWORD *)this)
    v5 = var0 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v9 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v9 + 4;
  v10 = v9 + 2;
  if (v10)
  {
    *(_DWORD *)(v3 + 24) = v10;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    var0 = a2->var0.var0.var0;
    if (!a2->var0.var0.var0)
    {
      v13 = 1;
      goto LABEL_11;
    }
  }
  v11 = *((_DWORD *)var0 + 6);
  *((_DWORD *)var0 + 6) = v11 + 4;
  v12 = v11 + 2;
  if (v12)
  {
    v13 = 0;
    *((_DWORD *)var0 + 6) = v12;
  }
  else
  {
    if ((*((_WORD *)var0 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
    v13 = 0;
  }
LABEL_11:
  *(_DWORD *)(v3 + 24) += 2;
  v63 = v3;
  WebCore::enclosingBlock(&v63, (WebCore::Node *)1, &v64);
  v63 = 0;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v14);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if ((v13 & 1) == 0)
    *((_DWORD *)var0 + 6) += 2;
  v61 = var0;
  WebCore::enclosingBlock((uint64_t *)&v61, (WebCore::Node *)1, &v62);
  v61 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v15);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  v16 = (int *)((char *)this + 8);
  v17 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v17 + 6) += 2;
  v57 = v17;
  v58 = *v16;
  v59 = *((_BYTE *)this + 12);
  WebCore::enclosingNodeOfType((uint64_t)&v57, (uint64_t (*)(uint64_t))WebCore::isMailPasteAsQuotationNode, 1, (uint64_t *)&v60);
  v19 = v60;
  if (v60)
  {
    v6 = 0;
    v60 = 0;
    goto LABEL_108;
  }
  v20 = (unsigned int *)v64;
  if (!v64)
  {
    v6 = 0;
    v60 = 0;
    goto LABEL_110;
  }
  if ((*((_WORD *)v64 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)v64 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
  {
    goto LABEL_49;
  }
  v21 = *((_QWORD *)v64 + 13);
  if (!v21)
    goto LABEL_47;
  v22 = *(_DWORD *)(v21 + 4);
  if ((v22 & 1) == 0)
  {
    v23 = v21 + 32;
    LODWORD(v24) = v22 >> 5;
    if ((_DWORD)v24)
      goto LABEL_28;
LABEL_47:
    v25 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_48;
  }
  v23 = *(_QWORD *)(v21 + 40);
  LODWORD(v24) = *(_DWORD *)(v21 + 52);
  if (!(_DWORD)v24)
    goto LABEL_47;
LABEL_28:
  v24 = v24;
  v25 = (_QWORD *)(v23 + 8);
  while (1)
  {
    v26 = *(v25 - 1);
    if (v26 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v25 += 2;
    if (!--v24)
    {
      v25 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_48:
  if (!MEMORY[0x19AEA53F4](*v25, "cite", 4))
  {
    v6 = 0;
    goto LABEL_107;
  }
LABEL_49:
  WebCore::enclosingListChild(v20, v18, (unsigned int **)&v56);
  WebCore::enclosingListChild((unsigned int *)var0, v27, (unsigned int **)&v55);
  v28 = v55;
  if (v56 == v55)
  {
    v29 = *(WebCore::Node **)this;
    if (*(_QWORD *)this)
      *((_DWORD *)v29 + 6) += 2;
    v51 = v29;
    v52 = *v16;
    v53 = *((_BYTE *)this + 12);
    WebCore::enclosingTableCell((WebCore *)&v51, (uint64_t *)&v54);
    v30 = a2->var0.var0.var0;
    if (a2->var0.var0.var0)
      *((_DWORD *)v30 + 6) += 2;
    v47 = (WebCore::Node *)v30;
    var1 = a2->var0.var1;
    v49 = *((_BYTE *)&a2->var0 + 12);
    WebCore::enclosingTableCell((WebCore *)&v47, (uint64_t *)&v50);
    v31 = v50;
    if (v54 != v50)
    {
      v6 = 0;
LABEL_88:
      v50 = 0;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 2)
        {
          if ((*((_WORD *)v31 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v31, v18);
        }
        else
        {
          *((_DWORD *)v31 + 6) -= 2;
        }
      }
      v41 = v47;
      v47 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41, v18);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
      v42 = v54;
      v54 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 6) == 2)
        {
          if ((*((_WORD *)v42 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v42, v18);
        }
        else
        {
          *((_DWORD *)v42 + 6) -= 2;
        }
      }
      v43 = v51;
      v51 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 6) == 2)
        {
          if ((*((_WORD *)v43 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v43, v18);
        }
        else
        {
          *((_DWORD *)v43 + 6) -= 2;
        }
      }
      v28 = v55;
      goto LABEL_101;
    }
    v32 = v64;
    v33 = *((_WORD *)v64 + 14);
    if ((v33 & 0x10) != 0)
    {
      v34 = *(_QWORD *)(*((_QWORD *)v64 + 12) + 24);
      if (v34 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24))
      {
        if ((v33 & 8) == 0)
          goto LABEL_86;
        v35 = v62;
        *((_DWORD *)v64 + 6) += 2;
        if (v35 && (*((_WORD *)v35 + 14) & 8) != 0)
        {
          *((_DWORD *)v35 + 6) += 2;
          (*(void (**)(WTF **__return_ptr, WebCore::Node *))(*(_QWORD *)v32 + 104))(&v66, v32);
          (*(void (**)(const WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)v35 + 104))(&v65, v35);
          v36 = WTF::equal(v66, v65, v38);
          v39 = v65;
          v65 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v18);
            else
              *(_DWORD *)v39 -= 2;
          }
          v40 = v66;
          v66 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (*((_DWORD *)v35 + 6) == 2)
          {
            if ((*((_WORD *)v35 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v35, v18);
          }
          else
          {
            *((_DWORD *)v35 + 6) -= 2;
          }
        }
        else
        {
          v36 = 0;
        }
        if (*((_DWORD *)v32 + 6) == 2)
        {
          if ((*((_WORD *)v32 + 15) & 0x400) != 0)
          {
            if (!v36)
              goto LABEL_86;
          }
          else
          {
            WebCore::Node::removedLastRef(v32, v18);
            if ((v36 & 1) == 0)
              goto LABEL_86;
          }
        }
        else
        {
          *((_DWORD *)v32 + 6) -= 2;
          if ((v36 & 1) == 0)
            goto LABEL_86;
        }
      }
    }
    if ((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0)
    {
      v37 = *((_QWORD *)var0 + 8) & 0xFFFFFFFFFFFFLL;
      if (v37)
        LODWORD(v37) = *(_BYTE *)((*((_QWORD *)var0 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1;
      v6 = v37 ^ 1;
      goto LABEL_87;
    }
LABEL_86:
    v6 = 0;
LABEL_87:
    v31 = v50;
    goto LABEL_88;
  }
  v6 = 0;
LABEL_101:
  v55 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v18);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  v44 = v56;
  v56 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44, v18);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
LABEL_107:
  v19 = v60;
  v60 = 0;
  if (v19)
  {
LABEL_108:
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v18);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
LABEL_110:
  v45 = v57;
  v57 = 0;
  if (v45)
  {
    if (*((_DWORD *)v45 + 6) == 2)
    {
      if ((*((_WORD *)v45 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v45, v18);
    }
    else
    {
      *((_DWORD *)v45 + 6) -= 2;
    }
  }
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 2)
    {
      if ((*((_WORD *)v62 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v62, v18);
    }
    else
    {
      *((_DWORD *)v62 + 6) -= 2;
    }
  }
  if (v64)
  {
    if (*((_DWORD *)v64 + 6) == 2)
    {
      if ((*((_WORD *)v64 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v64, v18);
    }
    else
    {
      *((_DWORD *)v64 + 6) -= 2;
    }
  }
  if ((v13 & 1) == 0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v18);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v18);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v6;
}

uint64_t WebCore::isMailPasteAsQuotationNode(WebCore *this, const WebCore::Node *a2)
{
  __int16 v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
  {
    if ((v2 & 8) == 0)
    {
      __break(0xC471u);
      goto LABEL_18;
    }
    v4 = *((_QWORD *)this + 13);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if (!(_DWORD)v7)
          goto LABEL_18;
      }
      else
      {
        v6 = v4 + 32;
        LODWORD(v7) = v5 >> 5;
        if (!(_DWORD)v7)
          goto LABEL_18;
      }
      v7 = v7;
      v8 = v6 + 8;
      do
      {
        v9 = *(_QWORD *)(v8 - 8);
        if (v9 == WebCore::HTMLNames::classAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
        {
          break;
        }
        v8 += 16;
        --v7;
      }
      while (v7);
    }
LABEL_18:
    JUMPOUT(0x19AEA53F4);
  }
  return 0;
}

BOOL WebCore::isHeaderElement(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v2;

  if ((*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  return v2 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24);
}

unsigned int *WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNodePreservingChildren(unsigned int *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  unsigned int *v3;
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;

  v2 = a2;
  v3 = this;
  if (*(WebCore::Node **)this == a2)
  {
    if ((*((_WORD *)a2 + 14) & 4) != 0 && (v4 = *((_QWORD *)a2 + 10)) != 0 || (v4 = *((_QWORD *)a2 + 7)) != 0)
    {
LABEL_8:
      *(_DWORD *)(v4 + 24) += 2;
    }
    else
    {
      v5 = a2;
      while (1)
      {
        v5 = (WebCore::Node *)*((_QWORD *)v5 + 4);
        if (!v5)
          break;
        v4 = *((_QWORD *)v5 + 7);
        if (v4)
          goto LABEL_8;
      }
      v4 = 0;
    }
    *(_QWORD *)this = v4;
    if (a2)
    {
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(a2, a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
  }
  if (*((WebCore::Node **)v3 + 1) == v2)
  {
    if (v2 && (*((_WORD *)v2 + 14) & 4) != 0 && (v6 = *((_QWORD *)v2 + 11)) != 0 || (v6 = *((_QWORD *)v2 + 7)) != 0)
    {
LABEL_20:
      *(_DWORD *)(v6 + 24) += 2;
    }
    else
    {
      v7 = v2;
      while (1)
      {
        v7 = (WebCore::Node *)*((_QWORD *)v7 + 4);
        if (!v7)
          break;
        v6 = *((_QWORD *)v7 + 7);
        if (v6)
          goto LABEL_20;
      }
      v6 = 0;
    }
    *((_QWORD *)v3 + 1) = v6;
    if (v2)
    {
      if (*((_DWORD *)v2 + 6) == 2)
      {
        if ((*((_WORD *)v2 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v2, a2);
      }
      else
      {
        *((_DWORD *)v2 + 6) -= 2;
      }
      v6 = *((_QWORD *)v3 + 1);
    }
    if (!v6)
    {
      this = *(unsigned int **)v3;
      if (*(_QWORD *)v3)
      {
        while (1)
        {
          v8 = *((_QWORD *)v2 + 6);
          v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
          if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
            break;
          v2 = (WebCore::Node *)*((_QWORD *)v2 + 4);
        }
        if ((WebCore::Node::compareDocumentPosition((WebCore::Node *)this, (WebCore::Node *)(v8 & 0xFFFFFFFFFFFFLL)) & 4) != 0
          || (v9 = *(unsigned int **)v3) != 0)
        {
          v9[6] += 2;
        }
        this = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = v9;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)this, v10);
          }
          else
          {
            this[6] -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ReplaceSelectionCommand::moveNodeOutOfAncestor(WebCore::ReplaceSelectionCommand *this, WebCore::Node *a2, WebCore::Node *a3, WebCore::ReplaceSelectionCommand::InsertedNodes *a4)
{
  void *v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  WebCore::RenderText *v25;
  char hasRenderedText;
  int v27;
  WebCore::Node *v28;
  int v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t result;
  WebCore::Node *v33;
  int v34;
  char v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  char v39;
  WebCore::Node *v40[2];
  char v41;
  WebCore::Node *v42;

  *((_DWORD *)a2 + 6) += 2;
  v42 = a2;
  *((_DWORD *)a3 + 6) += 2;
  if (!WebCore::Node::computeEditability(*((_QWORD *)a3 + 4), 0, 1))
    goto LABEL_74;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 208))(a2) & 1) != 0)
  {
    v9 = *((_WORD *)a2 + 14);
    *((_DWORD *)a2 + 6) += 2;
    if ((v9 & 1) != 0)
    {
      v10 = *((_QWORD *)a2 + 10);
      if (v10)
        LODWORD(v10) = *(_DWORD *)(v10 + 4);
      v11 = 0;
      v36 = a2;
    }
    else
    {
      LODWORD(v10) = 0;
      v36 = a2;
      v11 = 4;
    }
  }
  else
  {
    LODWORD(v10) = 0;
    *((_DWORD *)a2 + 6) += 2;
    v36 = a2;
    v11 = 2;
  }
  v37 = v10;
  v38 = v11;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v36, (uint64_t)v40);
  v41 = 1;
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, v12);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  v13 = *((_WORD *)a3 + 14);
  *((_DWORD *)a3 + 6) += 2;
  if ((v13 & 1) != 0)
  {
    v14 = *((_QWORD *)a3 + 10);
    v15 = 0;
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 4);
  }
  else
  {
    LODWORD(v14) = 0;
    v15 = 4;
  }
  v33 = a3;
  v34 = v14;
  v35 = v15;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v33, (uint64_t)&v36);
  v39 = 1;
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, v16);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  if (!WebCore::operator==((uint64_t *)v40, (uint64_t *)&v36))
  {
    WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)this, a2, a3, 1, &v33);
    (*(void (**)(WebCore::ReplaceSelectionCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, a2, 1);
    if (!v33)
      goto LABEL_24;
    WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v42, (uint64_t)v33, 1);
    v19 = v33;
    v33 = 0;
    if (!v19)
      goto LABEL_24;
    goto LABEL_22;
  }
  (*(void (**)(WebCore::ReplaceSelectionCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, a2, 1);
  if ((*((_BYTE *)a3 + 22) & 8) == 0)
    goto LABEL_68;
  v17 = *((_QWORD *)a3 + 7);
  if (!v17)
  {
    v28 = (WebCore::Node *)*((_QWORD *)a3 + 4);
    *((_DWORD *)v28 + 6) += 2;
    v33 = v28;
    WebCore::CompositeEditCommand::appendNode(this, (uint64_t *)&v42, (uint64_t *)&v33);
    v19 = v33;
    if (!v33)
      goto LABEL_24;
LABEL_22:
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v18);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
    goto LABEL_24;
  }
  WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v42, v17, 1);
LABEL_24:
  v20 = *((_QWORD *)this + 2);
  *(_DWORD *)(v20 + 24) += 2;
  WebCore::Document::updateLayout(v20, 2u, 0);
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v20, v8);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  if ((*((_WORD *)a3 + 14) & 4) == 0 || (v21 = *((_QWORD *)a3 + 10)) == 0)
  {
LABEL_48:
    WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNode((unsigned int *)a4, a3);
    (*(void (**)(WebCore::ReplaceSelectionCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, a3, 1);
    goto LABEL_68;
  }
  *(_DWORD *)(v21 + 24) += 2;
  while (1)
  {
    v22 = v21;
    v23 = *(_DWORD *)(v21 + 24);
    v24 = v23 + 2;
    *(_DWORD *)(v21 + 24) = v23 + 2;
    if ((*(_WORD *)(v21 + 28) & 2) == 0)
    {
      if (v23)
      {
        *(_DWORD *)(v21 + 24) = v23;
        goto LABEL_32;
      }
      goto LABEL_46;
    }
    v25 = (WebCore::RenderText *)(*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL);
    if (v25)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      hasRenderedText = WebCore::RenderText::hasRenderedText(v25, (WebCore::RenderObject *)v8);
      v24 = *(_DWORD *)(v21 + 24);
      if ((hasRenderedText & 1) != 0)
        break;
    }
    v27 = v24 - 2;
    if (v27)
    {
      *(_DWORD *)(v21 + 24) = v27;
      goto LABEL_32;
    }
LABEL_46:
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21, v8);
LABEL_32:
    if ((*(_WORD *)(v21 + 28) & 8) != 0)
      goto LABEL_66;
    v21 = *(_QWORD *)(v21 + 56);
    if (v21)
      *(_DWORD *)(v21 + 24) += 2;
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v8);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
    if (!v21)
      goto LABEL_48;
  }
  if (v24 != 2)
  {
    *(_DWORD *)(v21 + 24) = v24 - 2;
    v29 = v24 - 4;
    if (!v29)
      goto LABEL_88;
LABEL_67:
    *(_DWORD *)(v21 + 24) = v29;
    goto LABEL_68;
  }
  if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v21, v8);
LABEL_66:
    v29 = *(_DWORD *)(v21 + 24) - 2;
    if (*(_DWORD *)(v21 + 24) != 2)
      goto LABEL_67;
  }
LABEL_88:
  if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v21, v8);
LABEL_68:
  v30 = v36;
  v36 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v8);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  v31 = v40[0];
  v40[0] = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31, v8);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
LABEL_74:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, v8);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNode(unsigned int *this, WebCore::Node *a2)
{
  unsigned int *v2;
  WebCore::Node *v3;
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  int v9;
  int v10;

  v2 = this;
  v3 = (WebCore::Node *)*((_QWORD *)this + 1);
  if (*(WebCore::Node **)this != a2)
  {
    if (v3 == a2)
    {
      if (!a2)
        goto LABEL_12;
      v4 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
LABEL_8:
        *(_DWORD *)(v4 + 24) += 2;
      }
      else
      {
        v5 = a2;
        while (1)
        {
          v5 = (WebCore::Node *)*((_QWORD *)v5 + 4);
          if (!v5)
            break;
          v4 = *((_QWORD *)v5 + 6) & 0xFFFFFFFFFFFFLL;
          if (v4)
            goto LABEL_8;
        }
        v4 = 0;
      }
      *((_QWORD *)this + 1) = v4;
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef(a2, a2);
          v4 = *((_QWORD *)v2 + 1);
        }
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      if (!v4)
      {
LABEL_12:
        v6 = *(_QWORD *)v2;
        if (*(_QWORD *)v2)
          *(_DWORD *)(v6 + 24) += 2;
        *((_QWORD *)v2 + 1) = v6;
      }
    }
    return this;
  }
  if (v3 == a2)
  {
    *(_QWORD *)this = 0;
    if (!a2)
    {
      *((_QWORD *)this + 1) = 0;
      return this;
    }
    v9 = *((_DWORD *)a2 + 6) - 2;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef(a2, a2);
        a2 = (WebCore::Node *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (!a2)
          return this;
        goto LABEL_27;
      }
      v9 = 2;
    }
    else
    {
      *((_DWORD *)a2 + 6) = v9;
    }
    *((_QWORD *)this + 1) = 0;
    goto LABEL_28;
  }
  v7 = *((_QWORD *)a2 + 7);
  if (v7)
  {
LABEL_20:
    *(_DWORD *)(v7 + 24) += 2;
  }
  else
  {
    v8 = a2;
    while (1)
    {
      v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
      if (!v8)
        break;
      v7 = *((_QWORD *)v8 + 7);
      if (v7)
        goto LABEL_20;
    }
    v7 = 0;
  }
  *(_QWORD *)this = v7;
  if (a2)
  {
LABEL_27:
    v9 = *((_DWORD *)a2 + 6);
LABEL_28:
    v10 = v9 - 2;
    if (v10)
    {
      *((_DWORD *)a2 + 6) = v10;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef(a2, a2);
    }
  }
  return this;
}

uint64_t WebCore::ReplaceSelectionCommand::willApplyCommand(WebCore::ReplaceSelectionCommand *this, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v7 = *((_QWORD *)this + 54);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  WebCore::Node::textContent((WebCore::Node *)v7, 0, a6, &v25, a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = v25;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  WebCore::serializeFragment(v7, 0, 0, 0, 0, 0, (uint64_t *)&v25, (uint64_t *)&v23, &v27);
  v11 = v27;
  v27 = 0;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      v19 = v27;
      v27 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v10);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v12 -= 2;
      v27 = 0;
    }
  }
  if (HIDWORD(v24))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v23, (WTF *)((char *)v23 + 24 * HIDWORD(v24)));
  v13 = v23;
  if (v23)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v13, v10);
  }
  if (HIDWORD(v26))
  {
    v20 = v25;
    v21 = 8 * HIDWORD(v26);
    do
    {
      v22 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v10);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v14 = v25;
  if (v25)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    WTF::fastFree(v14, v10);
  }
  WebCore::ReplaceSelectionCommand::ensureReplacementFragment(this);
  v17 = WebCore::CompositeEditCommand::willApplyCommand(this, v15);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v16);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v17;
}

WebCore::Node *WebCore::ReplaceSelectionCommand::ensureReplacementFragment(WebCore::ReplaceSelectionCommand *this)
{
  WebCore::Node *v1;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  const WebCore::QualifiedName *v13;
  WebCore::Element *v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t StatusReg;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  unsigned __int8 *v44;
  WTF::String *v45;
  __n128 v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t j;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WebCore::Node *v60;
  WebCore *v61;
  WebCore *v62;
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  const WTF::StringImpl *v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  int v72;
  uint64_t v73;
  uint64_t k;
  WebCore::Node *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD **v79;
  _DWORD *v80;
  WTF *v81;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *Attribute;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  WTF::StringImpl **v117;
  WTF::StringImpl **v118;
  WTF::StringImpl *v119;
  WTF::StringImpl **v120;
  WTF::StringImpl *v121;
  int v122;
  WTF *v123;
  void *v124;
  uint64_t v125;
  BOOL v126;
  BOOL v127;
  unsigned __int8 **v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  void *v132;
  WebCore::Node *v133;
  WebCore::Node *v134;
  WebCore::Node *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WebCore::Node *v138;
  WTF *v139;
  WTF::StringImpl *v140;
  WTF *v141;
  unsigned int v142;
  unsigned int v143;
  _DWORD *v144;
  WTF *v145;
  uint64_t v146;
  WTF *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  WebCore::Node *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WebCore::Node *v162;
  char v163;
  WTF *v164;
  uint64_t v165;
  WebCore::Node *v166;
  char v167;
  WTF *v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  char v171;
  char v172;
  uint64_t v173[2];

  v1 = (WebCore::Node *)*((_QWORD *)this + 55);
  if (v1)
    return v1;
  v3 = *((_QWORD *)this + 54);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v1 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v1 = v3;
  *((_WORD *)v1 + 4) = 0;
  if (!v3)
    goto LABEL_323;
  *(_DWORD *)(v3 + 24) += 2;
  v8 = *(_QWORD *)(v3 + 80);
  if (!v8)
    goto LABEL_321;
  v168 = 0;
  v169 = 0;
  v164 = 0;
  v165 = 0;
  while ((*(_WORD *)(v8 + 28) & 8) == 0)
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      goto LABEL_9;
  }
  v84 = &WebCore::HTMLNames::styleTag;
  v85 = &WebCore::HTMLNames::baseTag;
  do
  {
    *(_DWORD *)(v8 + 24) += 2;
    v173[0] = v8;
    v86 = *(_WORD *)(v8 + 28);
    if ((v86 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
      || (v86 & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::scriptTag + 24))
    {
      goto LABEL_180;
    }
    v87 = v8;
    if ((v86 & 0x10) == 0)
      goto LABEL_171;
    v88 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
    v87 = v8;
    if (v88 == *(_QWORD *)(*v84 + 24))
    {
      Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, v5, v6, v7);
      if (!MEMORY[0x19AEA53F4](*Attribute, "WebKit-mso-list-quirks-style", 28))
        goto LABEL_180;
      v87 = v173[0];
      if ((*(_WORD *)(v173[0] + 28) & 0x10) == 0)
        goto LABEL_171;
      v88 = *(_QWORD *)(*(_QWORD *)(v173[0] + 96) + 24);
    }
    if (v88 != *(_QWORD *)(*v85 + 24)
      && v88 != *(_QWORD *)(WebCore::HTMLNames::linkTag + 24)
      && v88 != *(_QWORD *)(WebCore::HTMLNames::metaTag + 24)
      && v88 != *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
    {
LABEL_171:
      v90 = v85;
      v91 = v84;
      v92 = *(_QWORD *)(v87 + 104);
      if (v92)
      {
        if ((*(_BYTE *)(v92 + 4) & 8) != 0)
          WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v87, v4, v7, v5, v6);
        if ((*(_WORD *)(v87 + 28) & 0x20) != 0)
          WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v87);
        v93 = *(_QWORD *)(v87 + 104);
        if (v93)
        {
          v94 = *(_DWORD *)(v93 + 4);
          if ((v94 & 1) != 0)
          {
            if (!*(_DWORD *)(v93 + 52))
              goto LABEL_234;
          }
          else if (!(v94 >> 5))
          {
            goto LABEL_234;
          }
          v104 = *(_QWORD *)(v173[0] + 104);
          v105 = *(_DWORD *)(v104 + 4);
          if ((v105 & 1) != 0)
          {
            v106 = *(_QWORD *)(v104 + 40);
            v107 = *(_DWORD *)(v104 + 52);
          }
          else
          {
            v106 = v104 + 32;
            v107 = v105 >> 5;
          }
          if (v107)
          {
            v108 = 0;
            do
            {
              v109 = (WTF::StringImpl **)(v106 + 16 * v108);
              if (!*((_QWORD *)*v109 + 4) && *((_QWORD *)*v109 + 3) && (WTF::StringImpl::startsWith() & 1) != 0
                || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v173[0] + 472))(v173[0], v106 + 16 * v108))
              {
                v110 = (WTF::StringImpl *)v173[0];
                *(_DWORD *)(v173[0] + 24) += 2;
                v160 = v110;
                v111 = *v109;
                if (*v109)
                  ++*(_DWORD *)v111;
                v161 = v111;
                v112 = HIDWORD(v165);
                if (HIDWORD(v165) == (_DWORD)v165)
                {
                  v113 = (_QWORD *)WTF::Vector<std::pair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::QualifiedName>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v164, HIDWORD(v165) + 1, (unint64_t)&v160);
                  v112 = HIDWORD(v165);
                  v114 = (_QWORD *)((char *)v164 + 16 * HIDWORD(v165));
                  v115 = *v113;
                  *v113 = 0;
                  v116 = (WTF::StringImpl **)(v113 + 1);
                  *v114 = v115;
                  v117 = (WTF::StringImpl **)(v114 + 1);
                }
                else
                {
                  v118 = (WTF::StringImpl **)((char *)v164 + 16 * HIDWORD(v165));
                  v160 = 0;
                  *v118 = v110;
                  v117 = v118 + 1;
                  v116 = &v161;
                }
                v119 = *v116;
                *v116 = 0;
                *v117 = v119;
                HIDWORD(v165) = v112 + 1;
                v120 = (WTF::StringImpl **)v161;
                v161 = 0;
                if (v120)
                {
                  if (*(_DWORD *)v120 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v120);
                    WTF::fastFree(v123, v124);
                  }
                  else
                  {
                    --*(_DWORD *)v120;
                  }
                }
                v121 = v160;
                v160 = 0;
                if (v121)
                {
                  if (*((_DWORD *)v121 + 6) == 2)
                  {
                    if ((*((_WORD *)v121 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v121, v4);
                  }
                  else
                  {
                    *((_DWORD *)v121 + 6) -= 2;
                  }
                }
              }
              v122 = v108 + 1;
              v108 = (v108 + 1);
            }
            while (v107 != v122);
          }
        }
      }
LABEL_234:
      v125 = *(_QWORD *)(v8 + 80);
      if (!v125)
      {
        if (v8 == v3)
        {
LABEL_256:
          v8 = 0;
LABEL_248:
          v84 = v91;
          v85 = v90;
          goto LABEL_202;
        }
        while (1)
        {
          v125 = *(_QWORD *)(v8 + 56);
          if (v125)
            break;
          v8 = *(_QWORD *)(v8 + 32);
          if (v8)
            v127 = v8 == v3;
          else
            v127 = 1;
          if (v127)
            goto LABEL_256;
        }
      }
      if ((*(_WORD *)(v125 + 28) & 8) == 0)
      {
        v84 = v91;
        v85 = v90;
        while (v125 != v3)
        {
          while (1)
          {
            v8 = *(_QWORD *)(v125 + 56);
            if (v8)
              break;
            v125 = *(_QWORD *)(v125 + 32);
            if (v125)
              v126 = v125 == v3;
            else
              v126 = 1;
            if (v126)
              goto LABEL_189;
          }
          v125 = *(_QWORD *)(v125 + 56);
          if ((*(_WORD *)(v8 + 28) & 8) != 0)
            goto LABEL_202;
        }
LABEL_189:
        v8 = 0;
        goto LABEL_202;
      }
      v8 = v125;
      goto LABEL_248;
    }
LABEL_180:
    LODWORD(v95) = HIDWORD(v169);
    if (HIDWORD(v169) == (_DWORD)v169)
    {
      v101 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v168, HIDWORD(v169) + 1, (unint64_t)v173);
      v95 = HIDWORD(v169);
      v102 = v168;
      v103 = *v101;
      *v101 = 0;
      *((_QWORD *)v102 + v95) = v103;
    }
    else
    {
      v96 = v173[0];
      v173[0] = 0;
      *((_QWORD *)v168 + HIDWORD(v169)) = v96;
    }
    HIDWORD(v169) = v95 + 1;
    if (v8 == v3)
      goto LABEL_189;
    while (1)
    {
      v97 = *(_QWORD *)(v8 + 56);
      if (v97)
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (v8)
        v98 = v8 == v3;
      else
        v98 = 1;
      if (v98)
        goto LABEL_189;
    }
    if ((*(_WORD *)(v97 + 28) & 8) == 0)
    {
      while (v97 != v3)
      {
        while (1)
        {
          v8 = *(_QWORD *)(v97 + 56);
          if (v8)
            break;
          v97 = *(_QWORD *)(v97 + 32);
          if (v97)
            v99 = v97 == v3;
          else
            v99 = 1;
          if (v99)
            goto LABEL_189;
        }
        v97 = *(_QWORD *)(v97 + 56);
        if ((*(_WORD *)(v8 + 28) & 8) != 0)
          goto LABEL_202;
      }
      goto LABEL_189;
    }
    v8 = *(_QWORD *)(v8 + 56);
LABEL_202:
    v100 = v173[0];
    v173[0] = 0;
    if (v100)
    {
      if (*(_DWORD *)(v100 + 24) == 2)
      {
        if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v100, v4);
      }
      else
      {
        *(_DWORD *)(v100 + 24) -= 2;
      }
    }
  }
  while (v8);
  if (HIDWORD(v169))
  {
    v128 = (unsigned __int8 **)v168;
    v129 = 8 * HIDWORD(v169);
    do
    {
      v4 = *v128;
      v130 = *((_QWORD *)*v128 + 4);
      if (v130 && (*(_WORD *)(v130 + 28) & 0x80) == 0)
      {
        *(_DWORD *)(v130 + 24) += 2;
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v130, (WebCore::Node *)v4, &v160);
        if ((_BYTE)v162)
        {
          v131 = v161;
          v161 = 0;
          if (v131)
          {
            if (*(_DWORD *)v131 == 2)
              WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v131 -= 2;
          }
        }
        if (*(_DWORD *)(v130 + 24) == 2)
        {
          if ((*(_WORD *)(v130 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v130, v4);
        }
        else
        {
          *(_DWORD *)(v130 + 24) -= 2;
        }
      }
      ++v128;
      v129 -= 8;
    }
    while (v129);
  }
LABEL_9:
  v9 = v164;
  v10 = HIDWORD(v165);
  if (HIDWORD(v165))
  {
    v11 = (WTF *)((char *)v164 + 16 * HIDWORD(v165));
    v12 = v164;
    do
    {
      v13 = (WTF *)((char *)v12 + 8);
      v14 = *(WebCore::Element **)v12;
      v12 = (WTF *)((char *)v12 + 16);
      WebCore::Element::removeAttribute(v14, v13);
    }
    while (v12 != v11);
    v15 = 16 * v10;
    v16 = (WTF::StringImpl ***)((char *)v9 + 8);
    do
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
          WTF::fastFree(v19, v20);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
      v18 = (uint64_t)*(v16 - 1);
      *(v16 - 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18, v4);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      v16 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  if (v9)
    WTF::fastFree(v9, v4);
  v21 = v168;
  if (HIDWORD(v169))
  {
    v150 = 8 * HIDWORD(v169);
    do
    {
      v151 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      if (v151)
      {
        if (*(_DWORD *)(v151 + 24) == 2)
        {
          if ((*(_WORD *)(v151 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v151, v4);
        }
        else
        {
          *(_DWORD *)(v151 + 24) -= 2;
        }
      }
      v21 = (WTF *)((char *)v21 + 8);
      v150 -= 8;
    }
    while (v150);
    v21 = v168;
    if (v168)
      goto LABEL_376;
  }
  else
  {
    if (!v168)
      goto LABEL_28;
LABEL_376:
    v168 = 0;
    LODWORD(v169) = 0;
    WTF::fastFree(v21, v4);
  }
LABEL_28:
  v22 = WebCore::editableRootForPosition((uint64_t)this + 192, 0);
  if (v22)
  {
    v23 = (WebCore::Node *)v22;
    *(_DWORD *)(v22 + 24) += 2;
    v24 = **(_QWORD **)(v22 + 40);
    if (v24)
      v25 = (*(_WORD *)(v24 + 28) & 0x80) == 0;
    else
      v25 = 1;
    if (v25 || (v26 = *(_QWORD *)(v24 + 200)) == 0)
    {
      v27 = 0;
      goto LABEL_35;
    }
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
    {
      v28 = 0;
      *(_DWORD *)(v27 + 24) += 2;
    }
    else
    {
LABEL_35:
      v28 = 1;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v30 = *(_QWORD *)(StatusReg + 736);
    if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
      v31 = WebCore::threadGlobalDataSlow((WebCore *)v22);
    v32 = *(_QWORD *)(v31 + 40);
    if (!v32)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
      v32 = *(_QWORD *)(v31 + 40);
    }
    v33 = (_QWORD *)(v32 + 2336);
    {
      v34 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v154 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v154 = WebCore::commonVMSlow(0);
      v34 = *(_QWORD *)(*(_QWORD *)(v154 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v34;
    }
    WebCore::EventTarget::attributeEventListener((uint64_t)v23, v33, v34, (uint64_t *)&v160);
    v35 = v160;
    if (v160)
    {
      v160 = 0;
      if (*((_DWORD *)v35 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
      else
        --*((_DWORD *)v35 + 4);
      goto LABEL_60;
    }
    if ((v28 & 1) != 0 || (*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_56;
    if ((*(_BYTE *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B10054);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1
      || (*(_BYTE *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 4) == 0)
    {
LABEL_56:
      v36 = WebCore::Node::computeEditability((uint64_t)v23, 0, 1);
      v37 = v160;
      v160 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
        else
          --*((_DWORD *)v37 + 4);
      }
      if (v36 == 2)
      {
        WebCore::ReplacementFragment::removeInterchangeNodes((uint64_t)v1, (WebCore::Node *)v3);
        if ((v28 & 1) != 0)
          goto LABEL_319;
LABEL_317:
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v27, v4);
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
        }
        goto LABEL_319;
      }
    }
LABEL_60:
    WebCore::createPageForSanitizingWebContent(v173);
    v38 = *(_QWORD *)(v173[0] + 160);
    if (v38 && !*(_BYTE *)(v38 + 144))
    {
      v39 = (unsigned int *)(v38 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      v41 = *(_QWORD *)(v38 + 296);
      if (v41)
        *(_DWORD *)(v41 + 24) += 2;
      *((_DWORD *)v23 + 6) += 2;
      v168 = v23;
      LOBYTE(v169) = 0;
      v171 = 0;
      v172 = 0;
      v42 = *(_QWORD *)(v41 + 1272);
      v157 = v28;
      if (v42
        && (*(_WORD *)(v42 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(v42 + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
      WebCore::ComputedStyleExtractor::copyProperties((WebCore::ComputedStyleExtractor *)&v168, (uint64_t *)&v164);
      WebCore::StyleProperties::asTextAtom(v164, v44, v45, (WTF::AtomString *)&v160, v46);
      v47 = *(_QWORD *)(i + 104);
      if (v47)
      {
        v48 = *(_DWORD *)(v47 + 4);
        if ((v48 & 1) != 0)
        {
          v49 = *(uint64_t **)(v47 + 40);
          v50 = *(_DWORD *)(v47 + 52);
          if (!v50)
            goto LABEL_87;
        }
        else
        {
          v49 = (uint64_t *)(v47 + 32);
          v50 = v48 >> 5;
          if (!v50)
            goto LABEL_87;
        }
        v51 = 0;
        while (1)
        {
          v52 = *v49;
          if (*v49 == WebCore::HTMLNames::styleAttr
            || *(_QWORD *)(v52 + 24) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24)
            && *(_QWORD *)(v52 + 32) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 32))
          {
            break;
          }
          ++v51;
          v49 += 2;
          if (v50 == v51)
            goto LABEL_87;
        }
      }
      else
      {
LABEL_87:
        v51 = 0xFFFFFFFFLL;
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)i, v51, (WebCore::TreeScope *)&WebCore::HTMLNames::styleAttr, &v160, 0);
      v54 = v160;
      v160 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = v164;
      v164 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
        {
          v156 = v27;
          v77 = *((unsigned int *)v55 + 7);
          if ((_DWORD)v77)
          {
            v78 = 16 * v77;
            v79 = (_DWORD **)(*((_QWORD *)v55 + 2) + 8);
            do
            {
              v80 = *v79;
              *v79 = 0;
              if (v80)
              {
                if (*v80 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v80, v53);
                else
                  *v80 -= 2;
              }
              v79 += 2;
              v78 -= 16;
            }
            while (v78);
          }
          v81 = (WTF *)*((_QWORD *)v55 + 2);
          if ((WTF *)((char *)v55 + 32) != v81 && v81 != 0)
          {
            *((_QWORD *)v55 + 2) = 0;
            *((_DWORD *)v55 + 6) = 0;
            WTF::fastFree(v81, v53);
          }
          v83 = *((_QWORD *)v55 + 1);
          *((_QWORD *)v55 + 1) = 0;
          v27 = v156;
          if (v83)
            (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
          WTF::fastFree(v55, v53);
        }
        else
        {
          --*(_DWORD *)v55;
        }
      }
      v56 = *(_QWORD *)(v41 + 1272);
      if (v56
        && (*(_WORD *)(v56 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (j = *(_QWORD *)(v56 + 80); j; j = *(_QWORD *)(j + 56))
        {
          if ((*(_WORD *)(j + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        j = 0;
      }
      WebCore::ReplacementFragment::insertFragmentForTestRendering(&v160, v1, j);
      v58 = v160;
      if (v160)
      {
        WebCore::VisibleSelection::selectionFromContentsOfNode(v160, (WebCore::VisibleSelection *)&v160);
        WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v160, &v164);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v160);
        v155 = v27;
        if (v167)
        {
          WebCore::plainText(&v164, 40, 0, (const WTF::String *)&v159);
        }
        else
        {
          v59 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v59 += 2;
          v159 = v59;
        }
        WebCore::ReplacementFragment::removeInterchangeNodes((uint64_t)v1, v58);
        WebCore::ReplacementFragment::removeUnrenderedNodes((uint64_t)v58, v60);
        WebCore::ReplacementFragment::restoreAndRemoveTestRenderingNodesToFragment(v1, v58);
        v61 = (WebCore *)bmalloc::api::isoAllocate();
        v62 = v61;
        v63 = *(_QWORD *)(StatusReg + 736);
        if (!v63 || (v64 = *(WebCore **)(v63 + 96)) == 0)
        {
          v61 = (WebCore *)WebCore::threadGlobalDataSlow(v61);
          v64 = v61;
        }
        v65 = *((_QWORD *)v64 + 5);
        if (!v65)
        {
          v61 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v64);
          v65 = *((_QWORD *)v64 + 5);
        }
        WTF::MonotonicTime::now(v61);
        *((_QWORD *)v62 + 1) = 0;
        *((_DWORD *)v62 + 4) = 1;
        *((_DWORD *)v62 + 5) = *((_DWORD *)v62 + 5) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v65 + 2336) != 0);
        v67 = *(_DWORD **)(v65 + 2336);
        if (v67)
          *v67 += 2;
        *((_QWORD *)v62 + 3) = v67;
        *((_QWORD *)v62 + 4) = 0;
        *((_QWORD *)v62 + 5) = 0;
        *((_QWORD *)v62 + 6) = 0;
        *((_QWORD *)v62 + 7) = v66;
        *((_QWORD *)v62 + 8) = 0;
        *(_QWORD *)v62 = off_1E33A0788;
        v68 = v159;
        if (v159)
          *(_DWORD *)v159 += 2;
        *((_QWORD *)v62 + 9) = v68;
        (*(void (**)(WebCore::Node *, WebCore *))(*(_QWORD *)v23 + 48))(v23, v62);
        if (!WTF::equal(v159, *((const WTF::StringImpl **)v62 + 9), v69)
          || WebCore::Node::computeEditability((uint64_t)v23, 0, 1) != 2)
        {
          WebCore::ReplacementFragment::restoreAndRemoveTestRenderingNodesToFragment(v1, v58);
          WebCore::VisibleSelection::toNormalizedRange((WebCore::ReplaceSelectionCommand *)((char *)this + 128), &v160);
          if (v163)
          {
            WebCore::createFragmentFromText(&v160, (WebCore *)((char *)v62 + 72), (uint64_t *)&v158);
            v70 = v158;
            v158 = 0;
            v71 = *(WebCore::Node **)v1;
            *(_QWORD *)v1 = v70;
            if (v71)
            {
              v72 = *((_DWORD *)v71 + 6) - 2;
              if (*((_DWORD *)v71 + 6) != 2)
                goto LABEL_124;
              if ((*((_WORD *)v71 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v71, v4);
                v71 = v158;
                v158 = 0;
                if (v71)
                {
                  v72 = *((_DWORD *)v71 + 6) - 2;
                  if (*((_DWORD *)v71 + 6) == 2)
                  {
                    if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v71, v4);
                  }
                  else
                  {
LABEL_124:
                    *((_DWORD *)v71 + 6) = v72;
                  }
                }
              }
            }
            if (*(_QWORD *)(*(_QWORD *)v1 + 80))
            {
              v73 = *(_QWORD *)(v41 + 1272);
              if (v73
                && (*(_WORD *)(v73 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v73 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (k = *(_QWORD *)(v73 + 80); k; k = *(_QWORD *)(k + 56))
                {
                  if ((*(_WORD *)(k + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                k = 0;
              }
              WebCore::ReplacementFragment::insertFragmentForTestRendering(&v158, v1, k);
              v133 = v158;
              if (*((_DWORD *)v58 + 6) == 2)
              {
                if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v58, v132);
              }
              else
              {
                *((_DWORD *)v58 + 6) -= 2;
              }
              WebCore::ReplacementFragment::removeInterchangeNodes((uint64_t)v1, v133);
              WebCore::ReplacementFragment::removeUnrenderedNodes((uint64_t)v133, v134);
              WebCore::ReplacementFragment::restoreAndRemoveTestRenderingNodesToFragment(v1, v133);
              if (v163)
              {
                v135 = v162;
                v162 = 0;
                if (v135)
                {
                  if (*((_DWORD *)v135 + 6) == 2)
                  {
                    if ((*((_WORD *)v135 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v135, v4);
                  }
                  else
                  {
                    *((_DWORD *)v135 + 6) -= 2;
                  }
                }
                v136 = v160;
                v160 = 0;
                if (v136)
                {
                  if (*((_DWORD *)v136 + 6) == 2)
                  {
                    if ((*((_WORD *)v136 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v136, v4);
                  }
                  else
                  {
                    *((_DWORD *)v136 + 6) -= 2;
                  }
                }
              }
              v58 = v133;
            }
            else if (v163)
            {
              v75 = v162;
              v162 = 0;
              if (v75)
              {
                if (*((_DWORD *)v75 + 6) == 2)
                {
                  if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v75, v4);
                }
                else
                {
                  *((_DWORD *)v75 + 6) -= 2;
                }
              }
              v76 = v160;
              v160 = 0;
              if (v76)
              {
                if (*((_DWORD *)v76 + 6) == 2)
                {
                  if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v76, v4);
                }
                else
                {
                  *((_DWORD *)v76 + 6) -= 2;
                }
              }
            }
          }
        }
        if (*((_DWORD *)v62 + 4) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v62 + 8))(v62);
        else
          --*((_DWORD *)v62 + 4);
        v137 = v159;
        v159 = 0;
        v27 = v155;
        if (v137)
        {
          if (*(_DWORD *)v137 == 2)
            WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v137 -= 2;
        }
        if (v167)
        {
          v138 = v166;
          v166 = 0;
          if (v138)
          {
            if (*((_DWORD *)v138 + 6) == 2)
            {
              if ((*((_WORD *)v138 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v138, v4);
            }
            else
            {
              *((_DWORD *)v138 + 6) -= 2;
            }
          }
          v139 = v164;
          v164 = 0;
          if (v139)
          {
            if (*((_DWORD *)v139 + 6) == 2)
            {
              if ((*((_WORD *)v139 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v139, v4);
            }
            else
            {
              *((_DWORD *)v139 + 6) -= 2;
            }
          }
        }
        if (v58)
        {
          if (*((_DWORD *)v58 + 6) == 2)
          {
            if ((*((_WORD *)v58 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v58, v4);
          }
          else
          {
            *((_DWORD *)v58 + 6) -= 2;
          }
        }
      }
      else
      {
        WebCore::ReplacementFragment::removeInterchangeNodes((uint64_t)v1, (WebCore::Node *)v3);
      }
      v28 = v157;
      if (v171)
      {
        v140 = v170;
        v170 = 0;
        if (v140)
        {
          if (*(_DWORD *)v140 == 2)
            WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v140 -= 2;
        }
      }
      v141 = v168;
      v168 = 0;
      if (v141)
      {
        if (*((_DWORD *)v141 + 6) == 2)
        {
          if ((*((_WORD *)v141 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v141, v4);
        }
        else
        {
          *((_DWORD *)v141 + 6) -= 2;
        }
      }
      if (v41)
      {
        if (*(_DWORD *)(v41 + 24) == 2)
        {
          if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v41, v4);
        }
        else
        {
          *(_DWORD *)(v41 + 24) -= 2;
        }
      }
      do
      {
        v142 = __ldaxr(v39);
        v143 = v142 - 1;
      }
      while (__stlxr(v143, v39));
      if (!v143)
      {
        atomic_store(1u, v39);
        v152 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v152 = off_1E31FE290;
        *((_QWORD *)v152 + 1) = v39;
        v160 = v152;
        WTF::ensureOnMainThread();
        v153 = v160;
        v160 = 0;
        if (v153)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v153 + 8))(v153);
      }
    }
    v144 = (_DWORD *)v173[0];
    v173[0] = 0;
    if (v144)
    {
      if (*v144 == 1)
      {
        WebCore::Page::~Page((uint64_t)v144);
        WTF::fastFree(v148, v149);
        if ((v28 & 1) != 0)
          goto LABEL_319;
        goto LABEL_317;
      }
      --*v144;
    }
    if ((v28 & 1) == 0)
      goto LABEL_317;
LABEL_319:
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v4);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
LABEL_321:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
LABEL_323:
  v145 = (WTF *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = v1;
  if (v145)
  {
    v146 = *(_QWORD *)v145;
    *(_QWORD *)v145 = 0;
    if (v146)
    {
      if (*(_DWORD *)(v146 + 24) == 2)
      {
        if ((*(_WORD *)(v146 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v146, v4);
      }
      else
      {
        *(_DWORD *)(v146 + 24) -= 2;
      }
    }
    WTF::fastFree(v145, v4);
    return (WebCore::Node *)*((_QWORD *)this + 55);
  }
  return v1;
}

void WebCore::ReplaceSelectionCommand::doApply(WebCore::ReplaceSelectionCommand *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::VisiblePosition *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  int v14;
  unsigned int v15;
  void *v16;
  int v17;
  WebCore::Node *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  const WebCore::Position *v23;
  Node *var0;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::MutableStyleProperties *v30;
  WebCore *v31;
  void *v32;
  WebCore::EditingStyle *v33;
  int v34;
  int v35;
  const WebCore::VisiblePosition *v36;
  int v37;
  int v38;
  const WebCore::VisiblePosition *v39;
  Node *v40;
  char *v41;
  uint64_t (*v42)();
  void *v43;
  Node *v44;
  WebCore::Node *v45;
  uint64_t (*v46)();
  void *v47;
  Node *v48;
  void *v49;
  int v50;
  int v51;
  WebCore *v52;
  void *v53;
  Node *v54;
  _BOOL4 v55;
  WebCore *v56;
  unsigned int v57;
  void *v58;
  WebCore::Node *v59;
  void *v60;
  WebCore::Node *v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v67;
  BOOL v68;
  Node *v69;
  char v70;
  uint64_t (*v71)();
  void *v72;
  _BOOL4 v73;
  Node *v74;
  void *v76;
  BOOL v77;
  Node *v78;
  int v80;
  const WebCore::VisiblePosition *v81;
  Node *v82;
  WebCore::Node *v83;
  Node *v84;
  char v85;
  WebCore::Node *v86;
  WebCore::Node *v87;
  uint64_t (*v88)();
  BOOL v89;
  Node *v90;
  uint64_t (*v91)();
  BOOL v92;
  Node *v93;
  int v94;
  const WebCore::VisiblePosition *v95;
  void *v96;
  Node *v97;
  uint64_t (*v98)();
  void *v99;
  Node *v100;
  int v101;
  const WebCore::VisiblePosition *v102;
  Node *v103;
  WebCore::Node *v104;
  uint64_t (*v105)();
  void *v106;
  _BOOL4 v107;
  Node *v108;
  WebCore::Node *v109;
  uint64_t (*v110)();
  void *v111;
  BOOL v112;
  Node *v113;
  Node *v114;
  Node *v115;
  WTF *v116;
  void *v117;
  uint64_t (*v118)();
  WebCore::Node *v119;
  WebCore::Node *v120;
  void *v121;
  Node *v122;
  void *v123;
  Node *v124;
  void *v125;
  Node *v126;
  Node *v127;
  int v128;
  void *v129;
  Node *v130;
  Node *v131;
  Node *v132;
  Node *v133;
  WebCore::Node *v134;
  void *v135;
  Node *v136;
  BOOL v137;
  int v138;
  void *v139;
  Node *v140;
  uint64_t (*v141)();
  _BOOL4 v142;
  Node *v143;
  uint64_t (*v144)();
  _BOOL4 v145;
  Node *v146;
  uint64_t (*v147)();
  _BOOL4 v148;
  Node *v149;
  WebCore::Node *v150;
  int v151;
  Node *v152;
  Node *v153;
  void *v154;
  Node *v155;
  WebCore::Node *v156;
  uint64_t v157;
  uint64_t v158;
  WebCore::EditingStyle *v159;
  WebCore::Node *v160;
  int v161;
  void *v162;
  char v163;
  WebCore::Node *v164;
  unsigned int v165;
  WebCore::Node *v166;
  unsigned int v167;
  int v168;
  Node *v169;
  Node *v170;
  WebCore::Node *v171;
  unsigned int v172;
  WebCore::Node *v173;
  uint64_t v174;
  char v175;
  Node *v176;
  unsigned __int8 v177;
  int v178;
  __int16 v179;
  uint64_t v180;
  int v181;
  int v182;
  BOOL v183;
  WebCore::Node *v184;
  int v185;
  __int16 v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  WebCore::Node *v190;
  char v191;
  Node *v192;
  _BOOL4 v193;
  Node *v194;
  Node *v195;
  WebCore::Node *v196;
  Node *v197;
  uint64_t v198;
  uint64_t v199;
  WebCore::Node *v200;
  WebCore::Node *v201;
  WebCore::Node *v202;
  void *v203;
  Node *v204;
  WebCore::Node *v205;
  void *v206;
  uint64_t (*v207)();
  _BOOL4 v208;
  Node *v209;
  uint64_t (*v210)();
  _BOOL4 v211;
  Node *v212;
  Node *v213;
  Node *v214;
  Node *v215;
  uint64_t v216;
  WebCore::Node *v217;
  const WTF::StringImpl *v218;
  Node *v219;
  Node *v220;
  uint64_t v221;
  WebCore::StyleProperties **v222;
  Node *v223;
  void *v224;
  WTF::String *v225;
  __n128 v226;
  Node *v227;
  uint64_t v228;
  WTF::String *v229;
  __n128 v230;
  const WTF::StringImpl **Attribute;
  const WTF::StringImpl *v232;
  WebCore::Node *v233;
  Node *v234;
  int v235;
  WTF *v236;
  void *v237;
  Node *v238;
  void *v239;
  Node *v240;
  WebCore::Node *v241;
  WTF::StringBuilder *v242;
  WTF::String *v243;
  __n128 v244;
  WebCore::Node *v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  int v264;
  unsigned int *v265;
  float v266;
  char v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  unsigned int *v278;
  float v279;
  char v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  WebCore::Node *v287;
  WebCore::Node *v288;
  unsigned int *v289;
  unsigned int v290;
  void *v291;
  Node *v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WebCore::Node *v299;
  void *v300;
  const WTF::StringImpl *v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  WebCore::Node *v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  WTF::String *v314;
  __n128 v315;
  Node *v316;
  int v317;
  uint64_t v318;
  BOOL isPlainTextMarkup;
  uint64_t v320;
  uint64_t v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  uint64_t v324;
  WTF::String *v325;
  __n128 v326;
  Node *v327;
  int v328;
  WebCore::Node *v329;
  uint64_t v330;
  uint64_t v331;
  WebCore::Node *v332;
  WebCore::Node *v333;
  WebCore::Node *v334;
  uint64_t v335;
  __int16 v336;
  int v337;
  const WTF::StringImpl *v338;
  WebCore *v339;
  int v340;
  int v341;
  WebCore *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  const WebCore::StyleProperties *v346;
  uint64_t v347;
  const WebCore::Node *v348;
  uint64_t v349;
  void *v350;
  Node *v351;
  Node *v352;
  char v353;
  char v354;
  Node *v355;
  uint64_t v356;
  __int16 v357;
  char v358;
  void *v359;
  WTF::String *v360;
  __n128 v361;
  Node *v362;
  WebCore::StyleProperties *v363;
  Node *v364;
  Node *v365;
  WebCore::Node *v366;
  WebCore::Node *v367;
  WebCore::Node *v368;
  Node *v369;
  WebCore::Node *v370;
  WebCore::Node *v371;
  int v372;
  int v373;
  __int16 v374;
  uint64_t v375;
  unsigned int v376;
  Node *v377;
  void *v378;
  Node *v379;
  uint64_t (*v380)();
  _BOOL4 v381;
  Node *v382;
  Node *v383;
  uint64_t (*v384)();
  _BOOL4 v385;
  Node *v386;
  WebCore::Node *v387;
  signed int v388;
  int v389;
  int v390;
  Node *v391;
  uint64_t v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  Node *v395;
  int v396;
  WebCore::Node *v397;
  WTF::StringImpl *v398;
  int v399;
  uint64_t v400;
  int v401;
  char v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  Node *v406;
  Node *v407;
  Node *v408;
  int v409;
  int v410;
  WebCore::Node *v411;
  WTF::StringImpl *v412;
  WTF *v413;
  void *v414;
  WTF *v415;
  void *v416;
  Node *v417;
  uint64_t v418;
  unsigned int i;
  uint64_t v420;
  BOOL v422;
  Node *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  Node *v427;
  Node *v428;
  Node *v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  Node *v433;
  WebCore *v434;
  __int16 v435;
  uint64_t v436;
  WebCore *v437;
  int v439;
  Node *v440;
  void *v441;
  Node *v442;
  void *v443;
  Node *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  void *v448;
  Node *v449;
  Node *v450;
  WebCore *v451;
  void *v452;
  WebCore::Node *v453;
  Node *v454;
  Node *v455;
  WebCore::Node *v456;
  unsigned int v457;
  WebCore::Node *v458;
  WebCore::Node *v459;
  unsigned int v460;
  int v461;
  WebCore::Node *v462;
  char v463;
  char v464;
  void *v465;
  Node *v466;
  WebCore::Node *v467;
  unsigned int v468;
  WebCore::Node *v469;
  WebCore::Node *v470;
  unsigned int v471;
  BOOL v472;
  char v473;
  Node *v474;
  Node *v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  WebCore::Node *v480;
  WebCore::Node *v481;
  uint64_t v482;
  __int16 v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  BOOL v491;
  Node *v492;
  Node *v493;
  WebCore::Node *v494;
  Node *v495;
  void *v496;
  Node *v497;
  WebCore::RenderText *v498;
  const WebCore::QualifiedName *v499;
  _BOOL4 v500;
  void *v501;
  Node *v502;
  int v503;
  uint64_t v504;
  Node *v505;
  void *v506;
  _BOOL4 v507;
  Node *v508;
  int v509;
  Node *v510;
  unsigned int *p_var1;
  unsigned __int8 v512;
  Node *v513;
  Node *v514;
  Node *v515;
  const WebCore::QualifiedName *v516;
  Node *v517;
  Node *v518;
  WebCore::Node **v519;
  void *v520;
  Node *v521;
  Node *v522;
  WebCore::Node *v523;
  uint64_t v524;
  uint64_t v525;
  WebCore::Node *v526;
  __int16 v527;
  WebCore::Node *v528;
  int v529;
  WebCore *v531;
  uint64_t v532;
  __int16 v533;
  WebCore *v534;
  Node *v536;
  WebCore *v537;
  WebCore::Node *v538;
  WebCore::Node *v539;
  uint64_t v540;
  WebCore *v541;
  WebCore *v542;
  __int16 v543;
  WebCore *v544;
  char v545;
  int v546;
  const WebCore::QualifiedName *v548;
  uint64_t v549;
  uint64_t v550;
  Node *v551;
  uint64_t v552;
  int v553;
  uint64_t v554;
  Node *v555;
  uint64_t v556;
  Node *v557;
  Node *v558;
  WebCore *v559;
  WebCore::Node *v560;
  WebCore::Node *v561;
  uint64_t v562;
  char v563;
  WebCore *v564;
  uint64_t v565;
  const WebCore::StyleProperties *v566;
  WebCore::EditingStyle *v567;
  WebCore::EditingStyle *v568;
  WTF::StringBuilder *v569;
  WTF::String *v570;
  __n128 v571;
  WTF::String *v572;
  __n128 v573;
  Node *v574;
  Node *v575;
  WebCore *v576;
  WTF *v577;
  void *v578;
  WTF *v579;
  void *v580;
  WebCore::Node *v581;
  WebCore::Node *v582;
  uint64_t v583;
  WebCore *v584;
  WebCore *v585;
  uint64_t v586;
  __int16 v587;
  uint64_t v588;
  char v589;
  int v590;
  WebCore::Element *v591;
  uint64_t v592;
  const WebCore::StyleProperties *v593;
  char v594;
  uint64_t v595;
  WebCore *v596;
  void *v597;
  const WTF::StringImpl *v598;
  WTF::String *v599;
  __n128 v600;
  uint64_t v601;
  const WTF::AtomString *v602;
  uint64_t *v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  WebCore::VisiblePosition *v607;
  WebCore::StyledElement *v608;
  WTF *v609;
  uint64_t v610;
  uint64_t v611;
  Node *v612;
  uint64_t v613;
  char v614;
  WTF::StringImpl **v615;
  WTF *v616;
  void *v617;
  uint64_t v618;
  __int16 v619;
  char v620;
  void *v621;
  Node *v622;
  uint64_t (*v623)();
  Node *v624;
  uint64_t v625;
  WebCore::StyleProperties *v626;
  unsigned int v627;
  unsigned int v628;
  WTF::StringImpl *v629;
  Node *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  char v636;
  WebCore::StyledElement *v637;
  const WebCore::StyleProperties *v638;
  char v639;
  WebCore::StyledElement *v640;
  _QWORD *v641;
  WTF::StringImpl *v642;
  Node *v643;
  _QWORD *v644;
  WTF::StringImpl *v645;
  WTF *v646;
  void *v647;
  uint64_t v648;
  const WebCore::StyleProperties *v649;
  char v650;
  unint64_t v651;
  const WebCore::StyleProperties *v652;
  uint64_t v653;
  uint64_t v654;
  _DWORD **v655;
  _DWORD *v656;
  WTF *v657;
  uint64_t v659;
  unsigned int *v660;
  unint64_t v661;
  unsigned int *v662;
  _DWORD *v663;
  _BOOL4 hasEquivalentAttributes;
  uint64_t v665;
  __int16 v666;
  char v667;
  __int16 v668;
  uint64_t v669;
  char v670;
  void *v671;
  BOOL v672;
  uint64_t v673;
  __int16 v674;
  char v675;
  uint64_t v676;
  __int16 v677;
  char v678;
  uint64_t v679;
  Node *v680;
  Node *v681;
  Node *v682;
  Node *v683;
  BOOL v684;
  WebCore *v685;
  uint64_t v686;
  WebCore::Node *v687;
  WebCore::Node *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  Node *v692;
  Node *v693;
  void *v694;
  const WebCore::QualifiedName *v695;
  Node *v696;
  uint64_t v697;
  char *v698;
  WebCore::Node *v699;
  WebCore::Node *v700;
  WebCore::Node *v701;
  __int16 v702;
  int v703;
  char v704;
  uint64_t v705;
  uint64_t v706;
  WebCore::Node *v707;
  void *v708;
  const VisiblePosition *v709;
  Node *v710;
  int v711;
  uint64_t (*v712)();
  Node *v713;
  Node *v714;
  int v715;
  Node *v716;
  Node *v717;
  WebCore::VisiblePosition *v718;
  int v719;
  void *v720;
  Node *v721;
  uint64_t (*v722)();
  _BOOL4 v723;
  Node *v724;
  Node *v725;
  WebCore::Node *v726;
  uint64_t (*v727)();
  const WebCore::Position *v728;
  Node *v729;
  Node *v730;
  int shouldMerge;
  char v732;
  uint64_t (*v733)();
  Node *v734;
  Node *v735;
  int v736;
  Node *v737;
  void *v738;
  const WebCore::QualifiedName *v739;
  Node *v740;
  Node *v741;
  int v742;
  int v743;
  void *v744;
  Node *v745;
  _BOOL4 v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  void *v750;
  Node *v751;
  void *v752;
  _BOOL4 v753;
  Node *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  Node *v758;
  Node *v759;
  Node *v760;
  Node *v761;
  int v762;
  uint64_t v763;
  int v764;
  Node *v765;
  Node *v766;
  Node *v767;
  void *v768;
  Node *v769;
  int v770;
  const WebCore::VisiblePosition *v771;
  Node *v772;
  void *v773;
  Node *v774;
  uint64_t v775;
  WebCore::Node *v776;
  Node *v777;
  uint64_t v778;
  int v779;
  const WebCore::VisiblePosition *v780;
  Node *v781;
  Node *v782;
  uint64_t v783;
  WebCore::Node *v784;
  Node *v785;
  Node *v786;
  Node *v787;
  Node *v788;
  void *v790;
  _BOOL4 v791;
  Node *v792;
  Node *v793;
  BOOL v794;
  void *v795;
  Node *v796;
  char v797;
  Node *v798;
  _BOOL4 v799;
  uint64_t (*v800)();
  BOOL v801;
  Node *v802;
  Node *v803;
  void *v804;
  int v805;
  int v806;
  WebCore::Node *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  void *v814;
  Node *v815;
  __int16 v816;
  char v817;
  void *v818;
  const WebCore::QualifiedName *v819;
  void *v820;
  uint64_t (*v821)();
  void *v822;
  BOOL v823;
  Node *v824;
  int v825;
  WebCore::VisiblePosition *v826;
  Node *v827;
  void *v828;
  Node *v829;
  Node *v830;
  int v831;
  void *v832;
  const WebCore::VisiblePosition *v833;
  int v834;
  Node *v835;
  Node *v836;
  Node *v837;
  void *v838;
  _BOOL4 v839;
  Node *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  Node *v845;
  void *v846;
  Node *v847;
  void *v848;
  Node *v849;
  int v850;
  int v851;
  Node *v852;
  int v853;
  void *v854;
  const WebCore::VisiblePosition *v855;
  WebCore::Node *v856;
  uint64_t v857;
  int v858;
  const WebCore::VisiblePosition *v859;
  WebCore::Node *v860;
  uint64_t v861;
  uint64_t v862;
  Node *v863;
  Node *v864;
  Node *v865;
  Node *v866;
  Node *v867;
  void *v868;
  Node *v869;
  void *v870;
  Node *v871;
  const WebCore::Position *v872;
  Node *v873;
  WebCore::Node *v874;
  void *v875;
  WebCore::Node *v876;
  Node *v877;
  int v878;
  _BOOL4 v879;
  const WebCore::QualifiedName *v880;
  Node *v881;
  void *v882;
  Node *v883;
  uint64_t v884;
  int v885;
  int v886;
  int v887;
  char v888;
  int v889;
  WebCore::Node *v890;
  Node *v891;
  uint64_t (*v892)();
  void *v893;
  BOOL v894;
  Node *v895;
  uint64_t (*v896)();
  void *v897;
  BOOL v898;
  Node *v899;
  UTF32Char v900;
  BOOL isCharacterSmartReplaceExempt;
  uint64_t v902;
  unsigned int v903;
  int v904;
  BOOL v905;
  _DWORD *v906;
  Node *v907;
  WTF::StringImpl *v908;
  Node *v909;
  _QWORD *v910;
  unsigned int v911;
  int v912;
  WebCore::Node *v913;
  int v914;
  char v915;
  uint64_t v916;
  void *v917;
  Node *v918;
  void *v919;
  Node *v920;
  WebCore::Node *v921;
  int v922;
  WebCore::Node *v923;
  int v924;
  char v925;
  WebCore::Node **v926;
  int v927;
  Node *v928;
  uint64_t (*v929)();
  void *v930;
  BOOL v931;
  Node *v932;
  uint64_t (*v933)();
  BOOL v934;
  Node *v935;
  void *v936;
  Node *v937;
  UTF32Char v938;
  BOOL v939;
  Node *v940;
  WebCore::Node *v941;
  WebCore::Node *v942;
  Node *v943;
  Node *v944;
  const WebCore::QualifiedName *v945;
  void *v946;
  uint64_t (*v947)();
  _BOOL4 v948;
  Node *v949;
  uint64_t (*v950)();
  _BOOL4 v951;
  Node *v952;
  const WebCore::VisiblePosition *v953;
  const WebCore::VisiblePosition *v954;
  uint64_t (*v955)();
  void *v956;
  _BOOL4 v957;
  Node *v958;
  uint64_t (*v959)();
  void *v960;
  uint64_t (*v961)();
  void *v962;
  int v963;
  const WebCore::VisiblePosition *v964;
  void *v965;
  WebCore::Node *v966;
  Node *v967;
  uint64_t v968;
  void *v969;
  Node *v970;
  Node *v971;
  Node *v972;
  uint64_t (*v973)();
  _BOOL4 v974;
  Node *v975;
  Node *v976;
  uint64_t (*v977)();
  BOOL v978;
  Node *v979;
  uint64_t (*v980)();
  uint64_t v981;
  uint64_t v982;
  Node *v983;
  Node *v984;
  Node *v985;
  Node *v986;
  void *v987;
  const WebCore::QualifiedName *v988;
  Node *v989;
  int v990;
  Node *v991;
  int v992;
  Node *v993;
  uint64_t (*v994)();
  uint64_t (*v995)();
  uint64_t (*v996)();
  unsigned __int8 v997;
  Node *v998;
  Node *v999;
  char v1000;
  Node *v1001;
  char v1002;
  Node *v1003;
  char v1004;
  Node *v1005;
  int v1006;
  Node *v1007;
  Node *v1008;
  WebCore::Node *v1009;
  void *v1010;
  Node *v1011;
  WebCore::Node *v1012;
  uint64_t v1013;
  Node *v1014;
  Node *v1015;
  uint64_t v1016;
  Node *v1017;
  uint64_t v1018;
  uint64_t (*v1019)();
  Node *v1020;
  uint64_t v1021;
  unsigned int v1022;
  int v1023;
  BOOL v1024;
  _DWORD *v1025;
  Node *v1026;
  int v1027;
  char v1028;
  Node *v1029;
  _QWORD *v1030;
  unsigned int v1031;
  int v1032;
  WebCore::Node *v1033;
  unsigned int v1034;
  unsigned int v1035;
  char v1036;
  Node *v1037;
  WebCore::Node *v1038;
  Node *v1039;
  WebCore::Node *v1040;
  __int16 v1041;
  void *v1042;
  Node *v1043;
  uint64_t v1044;
  Node *v1045;
  Node *v1046;
  void *v1047;
  Node *v1048;
  Node *v1049;
  Node *v1050;
  void *v1051;
  Node *v1052;
  uint64_t v1053;
  WTF::StringImpl *v1054;
  uint64_t v1055;
  WTF::StringImpl *v1056;
  uint64_t v1057;
  WTF::StringImpl *v1058;
  uint64_t v1059;
  _DWORD *v1060;
  int v1061;
  void *v1062;
  Node *v1063;
  uint64_t v1064;
  WTF::StringImpl *v1065;
  uint64_t v1066;
  _DWORD *v1067;
  int v1068;
  Node *v1069;
  char v1070;
  char v1071;
  uint64_t v1072;
  Node *v1073;
  Node *v1074;
  Node *v1075;
  WebCore::Node *v1076;
  Node *v1077;
  Node *v1078;
  Node *v1079;
  void *v1080;
  Node *v1081;
  int v1082;
  int v1083;
  char v1084;
  uint64_t v1085;
  const WebCore::StyleProperties *v1086;
  char v1087;
  unint64_t v1088;
  unint64_t v1089;
  BOOL v1090;
  BOOL v1091;
  _BOOL4 v1092;
  WebCore::VisiblePosition *v1093;
  int v1094;
  char v1095;
  _BOOL4 v1096;
  char v1097;
  WebCore *v1098;
  WebCore *v1099;
  unsigned int *v1100;
  int v1101;
  WebCore::VisiblePosition *v1102;
  WebCore::VisiblePosition *v1103;
  WebCore::VisiblePosition *v1104;
  _BOOL4 v1105;
  _BOOL4 v1106;
  _BOOL4 v1107;
  WebCore::Node *v1108;
  WebCore::Node *v1109;
  WebCore::Node *v1110;
  WebCore::Node *v1111;
  unsigned int *v1112;
  WebCore::VisiblePosition *v1113;
  WebCore::Node *v1114;
  unsigned int v1115;
  WebCore::Node *v1116;
  int v1117;
  unsigned __int8 *v1118;
  Node *v1119;
  WebCore::Node *v1120;
  unsigned int v1121;
  char v1122;
  char v1123;
  WebCore::Node *v1124;
  WebCore::Node *v1125;
  WebCore *v1126;
  WebCore::Node *v1127;
  WebCore::Node *v1128;
  unsigned int v1129;
  char v1130;
  WebCore::Node *v1131;
  VisiblePosition v1132;
  WebCore::Node *v1133;
  unsigned int v1134;
  char v1135;
  WebCore::Node *v1136;
  WebCore::Node *v1137;
  WebCore::Node *v1138;
  unsigned int v1139;
  char v1140;
  char v1141;
  WebCore::Node *v1142;
  unsigned int v1143;
  char v1144;
  BOOL v1145;
  uint64_t v1146;
  int v1147;
  char v1148;
  uint64_t v1149;
  int v1150;
  char v1151;
  uint64_t v1152;
  int v1153;
  char v1154;
  uint64_t v1155;
  int v1156;
  char v1157;
  WebCore *v1158;
  unsigned int v1159;
  char v1160;
  uint64_t v1161;
  int v1162;
  char v1163;
  __int16 v1164;
  char v1165;
  VisiblePosition v1166;
  unsigned int v1167;
  char v1168;
  uint64_t v1169;
  int v1170;
  char v1171;
  uint64_t v1172;
  int v1173;
  char v1174;
  uint64_t v1175;
  int v1176;
  char v1177;
  uint64_t v1178;
  int v1179;
  char v1180;
  __int16 v1181;
  char v1182;
  uint64_t v1183;
  int v1184;
  char v1185;
  WebCore::Node *v1186;
  int v1187;
  char v1188;
  uint64_t v1189;
  int v1190;
  char v1191;
  WebCore::Node *v1192;
  int v1193;
  char v1194;
  WebCore::Node *v1195;
  WTF::StringImpl *v1196;
  char v1197;
  VisiblePosition v1198;
  VisiblePosition v1199;
  VisiblePosition v1200;
  VisiblePosition v1201;
  unsigned int var1;
  char v1203;
  uint64_t v1204;
  int v1205;
  char v1206;
  uint64_t v1207;
  int v1208;
  char v1209;
  uint64_t v1210;
  int v1211;
  char v1212;
  uint64_t v1213;
  int v1214;
  char v1215;
  __int16 v1216;
  char v1217;

  v2 = *((_QWORD *)this + 16);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v1146 = v2;
  v1147 = *((_DWORD *)this + 34);
  v1148 = *((_BYTE *)this + 140);
  v3 = *((_QWORD *)this + 18);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v1149 = v3;
  v1150 = *((_DWORD *)this + 38);
  v1151 = *((_BYTE *)this + 156);
  v4 = *((_QWORD *)this + 20);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v1152 = v4;
  v1153 = *((_DWORD *)this + 42);
  v1154 = *((_BYTE *)this + 172);
  v5 = *((_QWORD *)this + 22);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v1155 = v5;
  v6 = (WebCore::ReplaceSelectionCommand *)((char *)this + 192);
  v7 = *((_QWORD *)this + 24);
  v1156 = *((_DWORD *)this + 46);
  v1157 = *((_BYTE *)this + 188);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v1158 = (WebCore *)v7;
  v9 = (uint64_t *)((char *)this + 208);
  v8 = *((_QWORD *)this + 26);
  v1159 = *((_DWORD *)this + 50);
  v1160 = *((_BYTE *)this + 204);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v1161 = v8;
  v10 = *((_WORD *)this + 112);
  v1162 = *((_DWORD *)this + 54);
  v1163 = *((_BYTE *)this + 220);
  v1164 = v10;
  v1118 = (unsigned __int8 *)this + 224;
  v1165 = *((_BYTE *)this + 226);
  if (!v7 || !HIBYTE(v1164) || (*(_BYTE *)(v7 + 22) & 8) == 0 || v8 && (*(_BYTE *)(v8 + 22) & 8) == 0)
    goto LABEL_966;
  v11 = v1160 & 7;
  if (v11 > 4)
    goto LABEL_966;
  v12 = v7;
  if (((1 << v11) & 0x19) == 0)
  {
    v12 = *(_QWORD *)(v7 + 32);
    if (!v12)
      goto LABEL_966;
  }
  *(_DWORD *)(v12 + 24) += 2;
  v14 = WebCore::Node::computeEditability(v12, 0, 0);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (!v14)
    goto LABEL_966;
  v15 = v1160 & 7;
  if (v15 > 4)
    goto LABEL_28;
  if (((1 << v15) & 0x19) == 0)
  {
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
      goto LABEL_28;
  }
  *(_DWORD *)(v7 + 24) += 2;
  v17 = WebCore::Node::computeEditability(v7, 0, 1);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v16);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (v17 != 2)
LABEL_28:
    *((_BYTE *)this + 426) = 0;
  v18 = WebCore::ReplaceSelectionCommand::ensureReplacementFragment(this);
  v20 = *(_QWORD *)v18;
  v1112 = (unsigned int *)((char *)this + 200);
  v1114 = v18;
  if (!*(_QWORD *)v18)
    goto LABEL_43;
  v21 = *(_QWORD *)(v20 + 80);
  if (!v21 || (*(_WORD *)(v21 + 28) & 2) == 0)
    goto LABEL_43;
  *(_DWORD *)(v21 + 24) += 2;
  if (v21 != *(_QWORD *)(v20 + 88))
  {
LABEL_39:
    v22 = 0;
    goto LABEL_40;
  }
  v22 = 0;
  if (*((_BYTE *)this + 425) || *((_BYTE *)v18 + 8) || *((_BYTE *)v18 + 9))
    goto LABEL_40;
  WebCore::nodeToSplitToAvoidPastingIntoInlineNodesWithStyle((WebCore *)&v1201, (WebCore::ReplaceSelectionCommand *)((char *)this + 192));
  var0 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v19);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
    goto LABEL_39;
  }
  v477 = (uint64_t *)((char *)this + 192);
  v478 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    *(_DWORD *)(v478 + 24) += 2;
  v1201.var0.var0.var0 = (Node *)v478;
  v1201.var0.var1 = *v1112;
  *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)this + 204);
  v479 = *v9;
  if (*v9)
    *(_DWORD *)(v479 + 24) += 2;
  v1166.var0.var0.var0 = (Node *)v479;
  v1166.var0.var1 = *((_DWORD *)this + 54);
  *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)this + 220);
  v480 = WebCore::commonInclusiveAncestor((WebCore *)&v1201, (const WebCore::Position *)&v1166, v23);
  if (!v480)
  {
    v491 = 0;
    goto LABEL_1431;
  }
  v481 = v480;
  *((_DWORD *)v480 + 6) += 2;
  v482 = (uint64_t)v480;
  while (1)
  {
    v483 = *(_WORD *)(v482 + 28);
    if ((v483 & 8) != 0
      && (*(_WORD *)(v482 + 30) & 1) != 0
      && ((v483 & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v482 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)))
    {
      break;
    }
    v485 = (uint64_t *)(v482 + 32);
    v484 = *(_QWORD *)(v482 + 32);
    if (v484)
    {
      if ((*(_WORD *)(v484 + 28) & 8) != 0)
      {
        v486 = *(_QWORD *)(v484 + 72) & 0xFFFFFFFFFFFFLL;
        if (v486)
        {
          v488 = *(_QWORD *)(v486 + 88);
          if (v488)
          {
            v489 = *(_QWORD *)(v488 + 224);
            if (v489)
            {
              v487 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v489 + 16))(v489, v482);
              if (v487)
                goto LABEL_1417;
              v483 = *(_WORD *)(v482 + 28);
            }
          }
        }
      }
    }
    if ((v483 & 0x80) != 0)
    {
      v490 = *(_QWORD *)(v482 + 200);
      if (!v490)
      {
LABEL_1428:
        v491 = 0;
        goto LABEL_1429;
      }
      v485 = (uint64_t *)(v490 + 8);
    }
    v487 = *v485;
LABEL_1417:
    v482 = v487;
    if (!v487)
      goto LABEL_1428;
  }
  *(_DWORD *)(v482 + 24) += 4;
  v1199.var0.var0.var0 = (Node *)v482;
  v1199.var0.var1 = 0;
  *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1199.var0 + 12) & 0xF0 | 1;
  WebCore::Position::downstream((uint64_t)&v1199, (WebCore::Node *)1, (uint64_t)&v1200);
  v491 = 0;
  if (WebCore::Position::equals((WebCore::Position *)&v1200, (const WebCore::Position *)&v1201))
  {
    *(_DWORD *)(v482 + 24) += 2;
    v1195 = (WebCore::Node *)v482;
    LODWORD(v1196) = 0;
    BYTE4(v1196) = BYTE4(v1196) & 0xF0 | 2;
    WebCore::Position::upstream((uint64_t)&v1195, (WebCore::Node *)1, (uint64_t)&v1198);
    v491 = WebCore::Position::equals((WebCore::Position *)&v1198, (const WebCore::Position *)&v1166);
    v1075 = v1198.var0.var0.var0;
    v1198.var0.var0.var0 = 0;
    if (v1075)
    {
      if (*((_DWORD *)v1075 + 6) == 2)
      {
        if ((*((_WORD *)v1075 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v1075, v19);
      }
      else
      {
        *((_DWORD *)v1075 + 6) -= 2;
      }
    }
    v1076 = v1195;
    v1195 = 0;
    if (v1076)
    {
      if (*((_DWORD *)v1076 + 6) == 2)
      {
        if ((*((_WORD *)v1076 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v1076, v19);
      }
      else
      {
        *((_DWORD *)v1076 + 6) -= 2;
      }
    }
  }
  v1077 = v1200.var0.var0.var0;
  v1200.var0.var0.var0 = 0;
  if (v1077)
  {
    if (*((_DWORD *)v1077 + 6) == 2)
    {
      if ((*((_WORD *)v1077 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1077, v19);
    }
    else
    {
      *((_DWORD *)v1077 + 6) -= 2;
    }
  }
  v1078 = v1199.var0.var0.var0;
  v1199.var0.var0.var0 = 0;
  if (v1078)
  {
    if (*((_DWORD *)v1078 + 6) == 2)
    {
      if ((*((_WORD *)v1078 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1078, v19);
    }
    else
    {
      *((_DWORD *)v1078 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v482 + 24) == 2)
  {
    if ((*(_WORD *)(v482 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v482, v19);
  }
  else
  {
    *(_DWORD *)(v482 + 24) -= 2;
  }
LABEL_1429:
  if (*((_DWORD *)v481 + 6) == 2)
  {
    if ((*((_WORD *)v481 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v481, v19);
  }
  else
  {
    *((_DWORD *)v481 + 6) -= 2;
  }
LABEL_1431:
  v492 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v492)
  {
    if (*((_DWORD *)v492 + 6) == 2)
    {
      if ((*((_WORD *)v492 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v492, v19);
    }
    else
    {
      *((_DWORD *)v492 + 6) -= 2;
    }
  }
  v493 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v493)
  {
    if (*((_DWORD *)v493 + 6) == 2)
    {
      if ((*((_WORD *)v493 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v493, v19);
    }
    else
    {
      *((_DWORD *)v493 + 6) -= 2;
    }
  }
  if (v491)
  {
    v22 = 0;
  }
  else
  {
    WebCore::Position::downstream((uint64_t)this + 208, (WebCore::Node *)1, (uint64_t)&v1201);
    v502 = v1201.var0.var0.var0;
    if (v1201.var0.var0.var0)
    {
      v503 = *((_DWORD *)v1201.var0.var0.var0 + 6);
      *((_DWORD *)v1201.var0.var0.var0 + 6) = v503 + 2;
      v1201.var0.var0.var0 = 0;
      if (v503)
      {
        *((_DWORD *)v502 + 6) = v503;
      }
      else if ((*((_WORD *)v502 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v502, v501);
      }
    }
    v504 = *v477;
    if (*v477)
      *(_DWORD *)(v504 + 24) += 2;
    v1200.var0.var0.var0 = (Node *)v504;
    v1200.var0.var1 = *v1112;
    *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)this + 204);
    WebCore::CompositeEditCommand::replaceSelectedTextInNode((unsigned int *)this, (const WTF::String *)(v21 + 80), (uint64_t)&v1199);
    v505 = v1199.var0.var0.var0;
    v22 = v1199.var0.var0.var0 != 0;
    if (v1199.var0.var0.var0)
    {
      if (v502)
      {
        if (*((_QWORD *)v502 + 4)
          && (*((_WORD *)v502 + 14) & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v502 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
        {
          *((_DWORD *)v502 + 6) += 2;
          v1166.var0.var0.var0 = v502;
          v1166.var0.var1 = 0;
          *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1166.var0 + 12) & 0xF0 | 1;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1166, (uint64_t)&v1201);
          v1201.var1 = 1;
          v507 = WebCore::ReplaceSelectionCommand::shouldRemoveEndBR(this, (WebCore::Node *)v502, &v1201);
          v508 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v508)
          {
            if (*((_DWORD *)v508 + 6) == 2)
            {
              if ((*((_WORD *)v508 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v508, v506);
            }
            else
            {
              *((_DWORD *)v508 + 6) -= 2;
            }
          }
          if (*((_DWORD *)v502 + 6) == 2)
          {
            if ((*((_WORD *)v502 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v502, v506);
          }
          else
          {
            *((_DWORD *)v502 + 6) -= 2;
          }
          if (v507)
            WebCore::CompositeEditCommand::removeNodeAndPruneAncestors(this, (WebCore::Node *)v502);
        }
        v505 = v1199.var0.var0.var0;
      }
      v509 = *((unsigned __int8 *)this + 424);
      if (*((_BYTE *)this + 424))
        v510 = (Node *)v504;
      else
        v510 = v505;
      if (v510)
        *((_DWORD *)v510 + 6) += 2;
      v1201.var0.var0.var0 = v510;
      if (v509)
        p_var1 = &v1200.var0.var1;
      else
        p_var1 = &v1199.var0.var1;
      v1201.var0.var1 = *p_var1;
      *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)p_var1 + 4);
      if (v505)
        *((_DWORD *)v505 + 6) += 2;
      *(_QWORD *)&v1201.var1 = v505;
      var1 = v1199.var0.var1;
      v1203 = *((_BYTE *)&v1199.var0 + 12);
      v1204 = 0;
      v1205 = 0;
      v1206 &= 0xF0u;
      v1207 = 0;
      v1208 = 0;
      v1209 &= 0xF0u;
      v1210 = 0;
      v1211 = 0;
      v1212 &= 0xF0u;
      v1213 = 0;
      v1214 = 0;
      v1215 &= 0xF0u;
      v1216 = 1;
      v1217 &= ~2u;
      WebCore::VisibleSelection::validate((uint64_t)&v1201, 0);
      v512 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
      if ((v512 & 1) != 0
        && (*(unsigned int (**)(WebCore::ReplaceSelectionCommand *))(*(_QWORD *)this + 16))(this) == 25)
      {
        v513 = v1200.var0.var0.var0;
        if (v1200.var0.var0.var0)
          *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
        v1166.var0.var0.var0 = v513;
        v1166.var0.var1 = v1200.var0.var1;
        *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
        v514 = v1199.var0.var0.var0;
        if (v1199.var0.var0.var0)
          *((_DWORD *)v1199.var0.var0.var0 + 6) += 2;
        *(_QWORD *)&v1166.var1 = v514;
        v1167 = v1199.var0.var1;
        v1168 = *((_BYTE *)&v1199.var0 + 12);
        v1169 = 0;
        v1170 = 0;
        v1171 &= 0xF0u;
        v1172 = 0;
        v1173 = 0;
        v1174 &= 0xF0u;
        v1175 = 0;
        v1176 = 0;
        v1177 &= 0xF0u;
        v1178 = 0;
        v1179 = 0;
        v1180 &= 0xF0u;
        v1181 = 1;
        v1182 &= ~2u;
        WebCore::VisibleSelection::validate((uint64_t)&v1166, 0);
        WebCore::VisibleSelection::operator=((uint64_t *)this + 35, (uint64_t *)&v1166);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1166);
      }
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
      v515 = v1199.var0.var0.var0;
      v1199.var0.var0.var0 = 0;
      if (v515)
      {
        if (*((_DWORD *)v515 + 6) == 2)
        {
          if ((*((_WORD *)v515 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v515, v19);
        }
        else
        {
          *((_DWORD *)v515 + 6) -= 2;
        }
      }
    }
    if (v1200.var0.var0.var0)
    {
      if (*((_DWORD *)v1200.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v1200.var0.var0.var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v1200.var0.var0.var0, v19);
      }
      else
      {
        *((_DWORD *)v1200.var0.var0.var0 + 6) -= 2;
      }
    }
    if (v502)
    {
      if (*((_DWORD *)v502 + 6) == 2)
      {
        if ((*((_WORD *)v502 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v502, v19);
      }
      else
      {
        *((_DWORD *)v502 + 6) -= 2;
      }
    }
  }
  v6 = (WebCore::ReplaceSelectionCommand *)((char *)this + 192);
LABEL_40:
  if (*(_DWORD *)(v21 + 24) == 2)
  {
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21, v19);
  }
  else
  {
    *(_DWORD *)(v21 + 24) -= 2;
  }
  if (v22)
    goto LABEL_966;
LABEL_43:
  v25 = *((_QWORD *)v1158 + 8) & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    if ((*(_BYTE *)((*((_QWORD *)v1158 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v25 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v1158 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v26 = *(_QWORD *)(v25 + 104);
    if ((*(_BYTE *)(v26 + 239) & 1) == 0 && (*(_DWORD *)(v26 + 228) & 0x30) == 0x20)
    {
      v27 = *(_QWORD *)(v1161 + 64) & 0xFFFFFFFFFFFFLL;
      if (v27)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v1161 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          v27 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v1161 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
        v28 = *(_QWORD *)(v27 + 104);
        if ((*(_BYTE *)(v28 + 239) & 1) == 0 && (*(_DWORD *)(v28 + 228) & 0x30) == 0x20)
          *((_BYTE *)this + 426) = 0;
      }
    }
  }
  if (*((_BYTE *)this + 426))
  {
    v29 = WTF::fastMalloc((WTF *)0x18);
    v30 = (WebCore::MutableStyleProperties *)v29;
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) &= 0xE0u;
    *(_DWORD *)(v29 + 20) = WebCore::EditingStyle::NoFontDelta;
    v31 = v1158;
    if (v1158)
    {
      *((_DWORD *)v1158 + 6) += 2;
      WebCore::EditingStyle::init(v29, v31, 1);
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v32);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    else
    {
      WebCore::EditingStyle::init(v29, 0, 1);
    }
    v33 = (WebCore::EditingStyle *)*((_QWORD *)this + 52);
    *((_QWORD *)this + 52) = v30;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
      {
        WebCore::EditingStyle::~EditingStyle(v33, (WTF::StringImpl *)v32);
        WTF::fastFree(v116, v117);
        v30 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 52);
      }
      else
      {
        --*(_DWORD *)v33;
      }
    }
    WebCore::EditingStyle::mergeTypingStyle(v30, *((WebCore::Document **)this + 2));
  }
  v1113 = v6;
  v1093 = (WebCore::ReplaceSelectionCommand *)((char *)this + 208);
  v34 = HIBYTE(v1164);
  v35 = v1164;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1158, (uint64_t)&v1142);
  v1145 = 1;
  if (v34 != 2 && !v35)
  {
    v440 = (Node *)v1142;
    if (v1142)
    {
      *((_DWORD *)v1142 + 6) += 2;
      v1201.var0.var0.var0 = v440;
      v1201.var0.var1 = v1143;
      *((_BYTE *)&v1201.var0 + 12) = v1144;
      v1201.var1 = 0;
      if (!WebCore::inSameLine((WebCore *)&v1142, (const WebCore::VisiblePosition *)&v1201, v36))
        v1145 = 0;
      v442 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v442)
      {
        if (*((_DWORD *)v442 + 6) == 2)
        {
          if ((*((_WORD *)v442 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v442, v441);
        }
        else
        {
          *((_DWORD *)v442 + 6) -= 2;
        }
      }
    }
  }
  v37 = HIBYTE(v1164);
  v38 = v1164;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1161, (uint64_t)&v1138);
  v1141 = 1;
  v40 = (Node *)v1138;
  if ((v37 == 2 || !v38) && v1138)
  {
    *((_DWORD *)v1138 + 6) += 2;
    v1201.var0.var0.var0 = v40;
    v1201.var0.var1 = v1139;
    *((_BYTE *)&v1201.var0 + 12) = v1140;
    v1201.var1 = 0;
    if (!WebCore::inSameLine((WebCore *)&v1138, (const WebCore::VisiblePosition *)&v1201, v39))
      v1141 = 0;
    v444 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v444)
    {
      if (*((_DWORD *)v444 + 6) == 2)
      {
        if ((*((_WORD *)v444 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v444, v443);
      }
      else
      {
        *((_DWORD *)v444 + 6) -= 2;
      }
    }
    v40 = (Node *)v1138;
  }
  v41 = (char *)this + 200;
  if (v40)
    v42 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v42 = 0;
  if (v42)
  {
    WebCore::endOfParagraph((WebCore::Node *)&v1138, 1, &v1201);
    v1107 = WebCore::operator==((uint64_t *)&v1138, (uint64_t *)&v1201);
    v44 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v44, v43);
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
    }
  }
  else
  {
    v1107 = 0;
  }
  v45 = v1142;
  if (v1142)
    v46 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v46 = 0;
  if (!v46)
  {
    v1105 = 0;
    if (v1142)
      goto LABEL_82;
    goto LABEL_92;
  }
  WebCore::startOfParagraph((uint64_t)&v1142, 1, &v1201);
  v1105 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
  v48 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v48, v47);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  v45 = v1142;
  if (!v1142)
  {
LABEL_92:
    v1136 = 0;
    WebCore::enclosingBlock((uint64_t *)&v1136, (WebCore::Node *)1, &v1137);
    v1136 = 0;
    goto LABEL_86;
  }
LABEL_82:
  *((_DWORD *)v45 + 6) += 4;
  v1136 = v45;
  WebCore::enclosingBlock((uint64_t *)&v1136, (WebCore::Node *)1, &v1137);
  v1136 = 0;
  v50 = *((_DWORD *)v45 + 6) - 2;
  if (*((_DWORD *)v45 + 6) != 2)
  {
    *((_DWORD *)v45 + 6) = v50;
    goto LABEL_84;
  }
  if ((*((_WORD *)v45 + 15) & 0x400) != 0)
    goto LABEL_232;
  WebCore::Node::removedLastRef(v45, v49);
  v50 = *((_DWORD *)v45 + 6);
LABEL_84:
  v51 = v50 - 2;
  if (!v51)
  {
LABEL_232:
    if ((*((_WORD *)v45 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v45, v49);
  }
  else
  {
    *((_DWORD *)v45 + 6) = v51;
  }
LABEL_86:
  v52 = v1158;
  if (v1158)
    *((_DWORD *)v1158 + 6) += 2;
  v1133 = v52;
  v1134 = v1159;
  v1135 = v1160;
  WebCore::enclosingNodeOfType((uint64_t)&v1133, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 0, (uint64_t *)&v1201);
  v54 = v1201.var0.var0.var0;
  if (v1201.var0.var0.var0)
  {
    v55 = *((_BYTE *)this + 468) == 0;
    v1201.var0.var0.var0 = 0;
    v1106 = v55;
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v54, v53);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  else
  {
    v1106 = 0;
  }
  v56 = v1158;
  if (v1158
    && (v57 = v1160 & 7, v57 <= 4)
    && (((1 << v57) & 0x19) != 0 || (v56 = (WebCore *)*((_QWORD *)v1158 + 4)) != 0))
  {
    *((_DWORD *)v56 + 6) += 2;
    v1096 = WebCore::Node::computeEditability((uint64_t)v56, 0, 1) == 2;
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56, v58);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  else
  {
    v1096 = 0;
  }
  v59 = (WebCore::Node *)WebCore::editableRootForPosition((uint64_t)&v1158, 0);
  v61 = v59;
  v62 = v1106;
  if (v59)
    *((_DWORD *)v59 + 6) += 2;
  if (!v1106 && v1105 && v1107 || v1137 == v59)
  {
LABEL_115:
    *((_BYTE *)this + 464) = 0;
  }
  else if (v1137)
  {
    v63 = *((_QWORD *)v1137 + 4);
    if (v63)
    {
      if ((*(_WORD *)(v63 + 28) & 0x10) != 0)
      {
        v64 = *(_QWORD *)(*(_QWORD *)(v63 + 96) + 24);
        if (v64 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
          || v64 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
          || v64 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
        {
          goto LABEL_115;
        }
      }
    }
    v65 = *((_QWORD *)v1137 + 8) & 0xFFFFFFFFFFFFLL;
    if (v65)
      LOBYTE(v65) = *(_BYTE *)((*((_QWORD *)v1137 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19;
    if ((v65 & 1) != 0 || !v1096)
      goto LABEL_115;
  }
  else if (!v1096)
  {
    goto LABEL_115;
  }
  v1109 = v59;
  if (HIBYTE(v1164) != 2)
  {
    if (!*((_BYTE *)v1114 + 8))
    {
LABEL_158:
      if (*((_BYTE *)this + 464))
        v85 = v62;
      else
        v85 = 1;
      v86 = v1114;
      if ((v85 & 1) != 0)
        goto LABEL_247;
      v87 = v1142;
      if (v1142)
        v88 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v88 = 0;
      if (v88)
      {
        WebCore::endOfParagraph((WebCore::Node *)&v1142, 1, &v1201);
        v89 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
        v90 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v90)
        {
          if (*((_DWORD *)v90 + 6) == 2)
          {
            if ((*((_WORD *)v90 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v90, v60);
          }
          else
          {
            *((_DWORD *)v90 + 6) -= 2;
          }
        }
        if (v89)
          goto LABEL_247;
        v87 = v1142;
      }
      if (v87)
        v91 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v91 = 0;
      if (v91)
      {
        WebCore::startOfParagraph((uint64_t)&v1142, 1, &v1201);
        v92 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
        v93 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v93)
        {
          if (*((_DWORD *)v93 + 6) == 2)
          {
            if ((*((_WORD *)v93 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v93, v60);
          }
          else
          {
            *((_DWORD *)v93 + 6) -= 2;
          }
        }
        if (v92)
          goto LABEL_247;
      }
      WebCore::CompositeEditCommand::insertParagraphSeparator(this, 0, 0);
      if (*((_BYTE *)this + 225) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1200);
        v1200.var1 = 1;
      }
      else
      {
        v94 = *v1118;
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1200);
        v1200.var1 = 1;
        if (!v94)
        {
          v495 = v1200.var0.var0.var0;
          if (v1200.var0.var0.var0)
          {
            *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
            v1201.var0.var0.var0 = v495;
            v1201.var0.var1 = v1200.var0.var1;
            *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
            v1201.var1 = 0;
            if (!WebCore::inSameLine((WebCore *)&v1200, (const WebCore::VisiblePosition *)&v1201, v95))
              v1200.var1 = 0;
            v497 = v1201.var0.var0.var0;
            v1201.var0.var0.var0 = 0;
            if (v497)
            {
              if (*((_DWORD *)v497 + 6) == 2)
              {
                if ((*((_WORD *)v497 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v497, v496);
              }
              else
              {
                *((_DWORD *)v497 + 6) -= 2;
              }
            }
            v41 = (char *)this + 200;
            v61 = v1109;
            v86 = v1114;
            v62 = v1106;
          }
        }
      }
      WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v1200, (uint64_t)&v1199);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)&v1199))
      {
        v97 = 0;
        memset(&v1166, 0, sizeof(v1166));
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1199, (uint64_t)&v1201);
        v97 = v1201.var0.var0.var0;
        v1166.var0.var0.var0 = v1201.var0.var0.var0;
        v1166.var0.var1 = v1201.var0.var1;
        *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
      }
      v1166.var1 = 1;
      v114 = v1199.var0.var0.var0;
      v1199.var0.var0.var0 = 0;
      if (v114)
      {
        if (*((_DWORD *)v114 + 6) == 2)
        {
          if ((*((_WORD *)v114 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v114, v96);
        }
        else
        {
          *((_DWORD *)v114 + 6) -= 2;
        }
      }
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1166, 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
      if (v97)
      {
        if (*((_DWORD *)v97 + 6) == 2)
        {
          if ((*((_WORD *)v97 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v97, v60);
        }
        else
        {
          *((_DWORD *)v97 + 6) -= 2;
        }
      }
      v115 = v1200.var0.var0.var0;
      v1200.var0.var0.var0 = 0;
      if (!v115)
        goto LABEL_247;
LABEL_245:
      if (*((_DWORD *)v115 + 6) == 2)
      {
        if ((*((_WORD *)v115 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v115, v60);
      }
      else
      {
        *((_DWORD *)v115 + 6) -= 2;
      }
      goto LABEL_247;
    }
    WebCore::VisiblePosition::next((unsigned __int8 *)&v1142, 1, 0, (uint64_t)&v1166);
    if (v1142)
      v71 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v71 = 0;
    if (!v71)
      goto LABEL_149;
    WebCore::endOfParagraph((WebCore::Node *)&v1142, 1, &v1201);
    v73 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
    v74 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v74)
    {
      if (*((_DWORD *)v74 + 6) == 2)
      {
        if ((*((_WORD *)v74 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v74, v72);
      }
      else
      {
        *((_DWORD *)v74 + 6) -= 2;
      }
    }
    if (!v73)
      goto LABEL_149;
    if (v1142
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0)
    {
      WebCore::startOfParagraph((uint64_t)&v1142, 1, &v1201);
      v77 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
      v78 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v78)
      {
        if (*((_DWORD *)v78 + 6) == 2)
        {
          if ((*((_WORD *)v78 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v78, v76);
        }
        else
        {
          *((_DWORD *)v78 + 6) -= 2;
        }
      }
      if (v77)
        goto LABEL_149;
    }
    if (v1166.var0.var0.var0
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0)
    {
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1166, 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
    }
    else
    {
LABEL_149:
      WebCore::CompositeEditCommand::insertParagraphSeparator(this, 0, 0);
      if (*((_BYTE *)this + 225) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1200);
        v1200.var1 = 1;
      }
      else
      {
        v80 = *v1118;
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1200);
        v1200.var1 = 1;
        if (!v80)
        {
          v474 = v1200.var0.var0.var0;
          if (v1200.var0.var0.var0)
          {
            *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
            v1201.var0.var0.var0 = v474;
            v1201.var0.var1 = v1200.var0.var1;
            *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
            v1201.var1 = 0;
            if (!WebCore::inSameLine((WebCore *)&v1200, (const WebCore::VisiblePosition *)&v1201, v81))
              v1200.var1 = 0;
            v475 = v1201.var0.var0.var0;
            v1201.var0.var0.var0 = 0;
            if (v475)
            {
              if (*((_DWORD *)v475 + 6) == 2)
              {
                if ((*((_WORD *)v475 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v475, v60);
              }
              else
              {
                *((_DWORD *)v475 + 6) -= 2;
              }
            }
            v41 = (char *)this + 200;
            v61 = v1109;
            v62 = v1106;
          }
        }
      }
      v82 = v1200.var0.var0.var0;
      v1200.var0.var0.var0 = 0;
      v83 = v1142;
      v1142 = (WebCore::Node *)v82;
      if (v83)
      {
        if (*((_DWORD *)v83 + 6) == 2)
        {
          if ((*((_WORD *)v83 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v83, v60);
            v377 = v1200.var0.var0.var0;
            v1143 = v1200.var0.var1;
            v1144 = *((_BYTE *)&v1200.var0 + 12);
            v1145 = v1200.var1;
            v1200.var0.var0.var0 = 0;
            if (v377)
            {
              if (*((_DWORD *)v377 + 6) == 2)
              {
                if ((*((_WORD *)v377 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v377, v60);
              }
              else
              {
                *((_DWORD *)v377 + 6) -= 2;
              }
            }
            goto LABEL_155;
          }
        }
        else
        {
          *((_DWORD *)v83 + 6) -= 2;
        }
      }
      v1143 = v1200.var0.var1;
      v1144 = *((_BYTE *)&v1200.var0 + 12);
      v1145 = v1200.var1;
    }
LABEL_155:
    v84 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    if (v84)
    {
      if (*((_DWORD *)v84 + 6) == 2)
      {
        if ((*((_WORD *)v84 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v84, v60);
      }
      else
      {
        *((_DWORD *)v84 + 6) -= 2;
      }
    }
    goto LABEL_158;
  }
  if (v1106)
    goto LABEL_126;
  if (!(v1138
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0))
    goto LABEL_183;
  WebCore::endOfParagraph((WebCore::Node *)&v1138, 1, &v1201);
  v68 = WebCore::operator==((uint64_t *)&v1138, (uint64_t *)&v1201);
  v69 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v69)
  {
    if (*((_DWORD *)v69 + 6) == 2)
    {
      if ((*((_WORD *)v69 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v69, v67);
    }
    else
    {
      *((_DWORD *)v69 + 6) -= 2;
    }
  }
  if (v68)
  {
LABEL_126:
    v70 = 1;
  }
  else
  {
LABEL_183:
    if (v1142)
      v98 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v98 = 0;
    if (v98)
    {
      WebCore::startOfBlock((unsigned int *)&v1142, 0, &v1201);
      v70 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
      v100 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v100)
      {
        if (*((_DWORD *)v100 + 6) == 2)
        {
          if ((*((_WORD *)v100 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v100, v99);
        }
        else
        {
          *((_DWORD *)v100 + 6) -= 2;
        }
      }
    }
    else
    {
      v70 = 0;
    }
  }
  WebCore::CompositeEditCommand::deleteSelection(this, 0, v70, 1, 0, 1);
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1166);
    v1166.var1 = 1;
  }
  else
  {
    v101 = *v1118;
    WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1166);
    v1166.var1 = 1;
    if (!v101)
    {
      v454 = v1166.var0.var0.var0;
      if (v1166.var0.var0.var0)
      {
        *((_DWORD *)v1166.var0.var0.var0 + 6) += 2;
        v1201.var0.var0.var0 = v454;
        v1201.var0.var1 = v1166.var0.var1;
        *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1166.var0 + 12);
        v1201.var1 = 0;
        if (!WebCore::inSameLine((WebCore *)&v1166, (const WebCore::VisiblePosition *)&v1201, v102))
          v1166.var1 = 0;
        v455 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v455)
        {
          if (*((_DWORD *)v455 + 6) == 2)
          {
            if ((*((_WORD *)v455 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v455, v60);
          }
          else
          {
            *((_DWORD *)v455 + 6) -= 2;
          }
        }
        v61 = v1109;
        v62 = v1106;
      }
    }
  }
  v103 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  v104 = v1142;
  v1142 = (WebCore::Node *)v103;
  if (!v104)
  {
    v1143 = v1166.var0.var1;
    v1144 = *((_BYTE *)&v1166.var0 + 12);
    v1145 = v1166.var1;
    v41 = (char *)this + 200;
    goto LABEL_199;
  }
  v41 = (char *)this + 200;
  if (*((_DWORD *)v104 + 6) != 2)
  {
    *((_DWORD *)v104 + 6) -= 2;
    goto LABEL_198;
  }
  if ((*((_WORD *)v104 + 15) & 0x400) != 0)
  {
LABEL_198:
    v1143 = v1166.var0.var1;
    v1144 = *((_BYTE *)&v1166.var0 + 12);
    v1145 = v1166.var1;
LABEL_199:
    v86 = v1114;
    goto LABEL_200;
  }
  WebCore::Node::removedLastRef(v104, v60);
  v352 = v1166.var0.var0.var0;
  v1143 = v1166.var0.var1;
  v1144 = *((_BYTE *)&v1166.var0 + 12);
  v1145 = v1166.var1;
  v1166.var0.var0.var0 = 0;
  v86 = v1114;
  if (v352)
  {
    if (*((_DWORD *)v352 + 6) == 2)
    {
      if ((*((_WORD *)v352 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v352, v60);
    }
    else
    {
      *((_DWORD *)v352 + 6) -= 2;
    }
  }
LABEL_200:
  if (!*((_BYTE *)v86 + 8))
    goto LABEL_247;
  if (v1142)
    v105 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v105 = 0;
  if (!v105)
    goto LABEL_217;
  WebCore::endOfParagraph((WebCore::Node *)&v1142, 1, &v1201);
  v107 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
  v108 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v108)
  {
    if (*((_DWORD *)v108 + 6) == 2)
    {
      if ((*((_WORD *)v108 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v108, v106);
    }
    else
    {
      *((_DWORD *)v108 + 6) -= 2;
    }
  }
  if (!v107)
  {
LABEL_217:
    WebCore::CompositeEditCommand::insertParagraphSeparator(this, 0, 0);
    goto LABEL_247;
  }
  v109 = v1142;
  if (v1142)
    v110 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v110 = 0;
  if (v110)
  {
    WebCore::startOfParagraph((uint64_t)&v1142, 1, &v1201);
    v112 = WebCore::operator==((uint64_t *)&v1142, (uint64_t *)&v1201);
    v113 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v113)
    {
      if (*((_DWORD *)v113 + 6) == 2)
      {
        if ((*((_WORD *)v113 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v113, v111);
      }
      else
      {
        *((_DWORD *)v113 + 6) -= 2;
      }
    }
    if (v112)
      goto LABEL_217;
    v109 = v1142;
  }
  if (v109)
    v118 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v118 = 0;
  if (!v118)
  {
LABEL_244:
    WebCore::VisiblePosition::next((unsigned __int8 *)&v1142, 0, 0, (uint64_t)&v1166);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1166, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
    v115 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    if (!v115)
      goto LABEL_247;
    goto LABEL_245;
  }
  WebCore::VisiblePosition::next((unsigned __int8 *)&v1142, 0, 0, (uint64_t)&v1201);
  if (v1201.var0.var0.var0)
  {
    if (*((_DWORD *)v1201.var0.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v1201.var0.var0.var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1201.var0.var0.var0, v60);
    }
    else
    {
      *((_DWORD *)v1201.var0.var0.var0 + 6) -= 2;
    }
    goto LABEL_244;
  }
LABEL_247:
  v119 = *(WebCore::Node **)v1113;
  if (*(_QWORD *)v1113)
    *((_DWORD *)v119 + 6) += 2;
  v120 = v1133;
  v1133 = v119;
  if (v120)
  {
    if (*((_DWORD *)v120 + 6) == 2)
    {
      if ((*((_WORD *)v120 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v120, v60);
    }
    else
    {
      *((_DWORD *)v120 + 6) -= 2;
    }
  }
  v1134 = *(_DWORD *)v41;
  v1135 = v41[4];
  if (v62 && *((_BYTE *)this + 464))
  {
    WebCore::enclosingNodeOfType((uint64_t)&v1133, (uint64_t (*)(uint64_t))WebCore::isTableStructureNode, 1, (uint64_t *)&v1201);
    v122 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v122)
    {
      if (*((_DWORD *)v122 + 6) != 2)
      {
        *((_DWORD *)v122 + 6) -= 2;
        goto LABEL_257;
      }
      if ((*((_WORD *)v122 + 15) & 0x400) == 0)
LABEL_1014:
        WebCore::Node::removedLastRef((WebCore::Node *)v122, v121);
    }
    else
    {
      v445 = *((_QWORD *)this + 2);
      *(_DWORD *)(v445 + 24) += 2;
      v1166.var0.var0.var0 = (Node *)v445;
      v446 = WTF::fastMalloc((WTF *)0x118);
      v447 = WebCore::EditCommand::EditCommand(v446, (uint64_t *)&v1166, 59);
      *(_OWORD *)(v447 + 248) = 0u;
      *(_OWORD *)(v447 + 264) = 0u;
      *(_QWORD *)v447 = off_1E33A9758;
      v1201.var0.var0.var0 = (Node *)v447;
      WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v1201);
      v449 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v449)
      {
        if (*((_DWORD *)v449 + 2) == 1)
          (*(void (**)(Node *))(*(_QWORD *)v449 + 8))(v449);
        else
          --*((_DWORD *)v449 + 2);
      }
      v450 = v1166.var0.var0.var0;
      v1166.var0.var0.var0 = 0;
      if (v450)
      {
        if (*((_DWORD *)v450 + 6) == 2)
        {
          if ((*((_WORD *)v450 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v450, v448);
        }
        else
        {
          *((_DWORD *)v450 + 6) -= 2;
        }
      }
      v86 = v1114;
      v451 = *(WebCore **)v1113;
      v61 = v1109;
      v62 = v1106;
      if (*(_QWORD *)v1113)
      {
        *((_DWORD *)v451 + 6) += 2;
        WebCore::positionInParentBeforeNode(v451, (WebCore::Node *)v448, (uint64_t)&v1201);
        v453 = v1133;
        v1133 = (WebCore::Node *)v1201.var0.var0.var0;
        if (v453)
        {
          if (*((_DWORD *)v453 + 6) == 2)
          {
            if ((*((_WORD *)v453 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v453, v452);
          }
          else
          {
            *((_DWORD *)v453 + 6) -= 2;
          }
        }
        v1134 = v1201.var0.var1;
        v1135 = *((_BYTE *)&v1201.var0 + 12);
        (*(void (**)(WebCore::ReplaceSelectionCommand *, WebCore *, uint64_t))(*(_QWORD *)this + 184))(this, v451, 1);
        if (*((_DWORD *)v451 + 6) == 2)
        {
          v61 = v1109;
          v86 = v1114;
          v62 = v1106;
          if ((*((_WORD *)v451 + 15) & 0x400) == 0)
          {
            v122 = (Node *)v451;
            goto LABEL_1014;
          }
        }
        else
        {
          *((_DWORD *)v451 + 6) -= 2;
          v61 = v1109;
          v86 = v1114;
          v62 = v1106;
        }
      }
    }
  }
LABEL_257:
  WebCore::CompositeEditCommand::prepareWhitespaceAtPositionForSplit(this, (WebCore::Position *)&v1133);
  WebCore::Position::downstream((uint64_t)&v1133, (WebCore::Node *)1, (uint64_t)&v1201);
  v124 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (!v124)
    goto LABEL_951;
  if (*((_DWORD *)v124 + 6) == 2)
  {
    if ((*((_WORD *)v124 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v124, v123);
  }
  else
  {
    *((_DWORD *)v124 + 6) -= 2;
  }
  WebCore::Position::downstream((uint64_t)&v1133, (WebCore::Node *)1, (uint64_t)&v1201);
  v126 = v1201.var0.var0.var0;
  if (!v1201.var0.var0.var0
    || (*((_WORD *)v1201.var0.var0.var0 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)v1201.var0.var0.var0 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    v127 = 0;
    v1201.var0.var0.var0 = 0;
    goto LABEL_268;
  }
  WebCore::Position::downstream((uint64_t)&v1133, (WebCore::Node *)1, (uint64_t)&v1166);
  v127 = v1166.var0.var0.var0;
  if (v1166.var0.var0.var0)
  {
    v128 = *((_DWORD *)v1166.var0.var0.var0 + 6);
    *((_DWORD *)v1166.var0.var0.var0 + 6) = v128 + 2;
    v1166.var0.var0.var0 = 0;
    if (v128)
    {
      *((_DWORD *)v127 + 6) = v128;
    }
    else if ((*((_WORD *)v127 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v127, v125);
    }
  }
  v126 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v126)
  {
LABEL_268:
    if (*((_DWORD *)v126 + 6) == 2)
    {
      if ((*((_WORD *)v126 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v126, v125);
    }
    else
    {
      *((_DWORD *)v126 + 6) -= 2;
    }
  }
  v1132.var0.var0.var0 = 0;
  v1132.var0.var1 = 0;
  *((_BYTE *)&v1132.var0 + 12) &= 0xF0u;
  v1132.var1 = 1;
  v1110 = (WebCore::Node *)v127;
  if (v127)
  {
    *((_DWORD *)v127 + 6) += 2;
    v1199.var0.var0.var0 = v127;
    v1199.var0.var1 = 0;
    *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1199.var0 + 12) & 0xF0 | 1;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1199, (uint64_t)&v1166);
    v1166.var1 = 1;
    WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v1166, (uint64_t)&v1200);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v1200))
    {
      v130 = 0;
      BYTE4(v1198.var0.var0.var0) = 0;
      LODWORD(v1198.var0.var0.var0) = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1200, (uint64_t)&v1201);
      v130 = v1201.var0.var0.var0;
      LODWORD(v1198.var0.var0.var0) = v1201.var0.var1;
      BYTE4(v1198.var0.var0.var0) = *((_BYTE *)&v1201.var0 + 12);
    }
    v131 = v1200.var0.var0.var0;
    v1200.var0.var0.var0 = 0;
    if (v131)
    {
      if (*((_DWORD *)v131 + 6) == 2)
      {
        if ((*((_WORD *)v131 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v131, v129);
      }
      else
      {
        *((_DWORD *)v131 + 6) -= 2;
      }
    }
    v132 = v1132.var0.var0.var0;
    v1132.var0.var0.var0 = v130;
    if (v132)
    {
      if (*((_DWORD *)v132 + 6) == 2)
      {
        if ((*((_WORD *)v132 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v132, v129);
      }
      else
      {
        *((_DWORD *)v132 + 6) -= 2;
      }
    }
    v1132.var0.var1 = v1198.var0.var0.var0;
    *((_BYTE *)&v1132.var0 + 12) = BYTE4(v1198.var0.var0.var0);
    v1132.var1 = 1;
    v133 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    if (v133)
    {
      if (*((_DWORD *)v133 + 6) == 2)
      {
        if ((*((_WORD *)v133 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v133, v129);
      }
      else
      {
        *((_DWORD *)v133 + 6) -= 2;
      }
    }
    v1199.var0.var0.var0 = 0;
    if (*((_DWORD *)v127 + 6) == 2)
    {
      if ((*((_WORD *)v127 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v127, v129);
    }
    else
    {
      *((_DWORD *)v127 + 6) -= 2;
    }
  }
  v134 = v1133;
  if (v1133)
    *((_DWORD *)v1133 + 6) += 2;
  v1131 = v134;
  WebCore::enclosingBlock((uint64_t *)&v1131, (WebCore::Node *)1, (WebCore::Node **)&v1201);
  v136 = v1201.var0.var0.var0;
  v1131 = 0;
  if (v134)
  {
    if (*((_DWORD *)v134 + 6) == 2)
    {
      if ((*((_WORD *)v134 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v134, v135);
    }
    else
    {
      *((_DWORD *)v134 + 6) -= 2;
    }
  }
  v1111 = (WebCore::Node *)v136;
  if (!*((_BYTE *)this + 464) || !v136 || v136 == (Node *)v61)
    goto LABEL_336;
  if ((*((_QWORD *)v136 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    if ((*((_WORD *)v136 + 14) & 0x10) == 0)
    {
      v138 = 0;
      v86 = v1114;
      v62 = v1106;
      goto LABEL_298;
    }
    v525 = *(_QWORD *)(*((_QWORD *)v136 + 12) + 24);
    v86 = v1114;
    v62 = v1106;
    if (v525 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
    {
      v137 = v525 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24);
      goto LABEL_295;
    }
    goto LABEL_336;
  }
  v137 = *(_BYTE *)((*((_QWORD *)v136 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37;
LABEL_295:
  v138 = v137;
LABEL_298:
  if (((v62 | v138) & 1) != 0)
    goto LABEL_336;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1133, (uint64_t)&v1166);
  v1166.var1 = 1;
  v140 = v1166.var0.var0.var0;
  if (v1166.var0.var0.var0)
    v141 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v141 = 0;
  if (!v141)
    goto LABEL_317;
  WebCore::endOfBlock((unsigned int *)&v1166, 0, &v1201);
  v142 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
  v143 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v143)
  {
    if (*((_DWORD *)v143 + 6) == 2)
    {
      if ((*((_WORD *)v143 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v143, v139);
    }
    else
    {
      *((_DWORD *)v143 + 6) -= 2;
    }
  }
  v140 = v1166.var0.var0.var0;
  if (!v142)
  {
LABEL_317:
    if (v140)
      v147 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v147 = 0;
    if (!v147)
      goto LABEL_333;
    WebCore::startOfBlock((unsigned int *)&v1166, 0, &v1201);
    v148 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
    v149 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v149)
    {
      if (*((_DWORD *)v149 + 6) == 2)
      {
        if ((*((_WORD *)v149 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v149, v139);
      }
      else
      {
        *((_DWORD *)v149 + 6) -= 2;
      }
    }
    if (!v148)
      goto LABEL_333;
    WebCore::positionInParentBeforeNode((WebCore *)v136, (WebCore::Node *)v139, (uint64_t)&v1201);
    v150 = v1133;
    v1133 = (WebCore::Node *)v1201.var0.var0.var0;
    if (v150)
    {
      v151 = *((_DWORD *)v150 + 6) - 2;
      if (*((_DWORD *)v150 + 6) != 2)
        goto LABEL_331;
      if ((*((_WORD *)v150 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v150, v139);
    }
LABEL_332:
    v1134 = v1201.var0.var1;
    v1135 = *((_BYTE *)&v1201.var0 + 12);
    goto LABEL_333;
  }
  if (v1166.var0.var0.var0)
    v144 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v144 = 0;
  if (v144)
  {
    WebCore::startOfBlock((unsigned int *)&v1166, 0, &v1201);
    v145 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
    v146 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v146)
    {
      if (*((_DWORD *)v146 + 6) == 2)
      {
        if ((*((_WORD *)v146 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v146, v139);
      }
      else
      {
        *((_DWORD *)v146 + 6) -= 2;
      }
    }
    if (v145 && *((_BYTE *)v86 + 9))
    {
      v140 = v1166.var0.var0.var0;
      goto LABEL_317;
    }
  }
  WebCore::positionInParentAfterNode((uint64_t)v136, (WebCore::Node *)v139, (uint64_t)&v1201);
  v152 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  v150 = v1133;
  v1133 = (WebCore::Node *)v152;
  if (!v150)
    goto LABEL_332;
  v151 = *((_DWORD *)v150 + 6) - 2;
  if (*((_DWORD *)v150 + 6) != 2)
  {
LABEL_331:
    *((_DWORD *)v150 + 6) = v151;
    goto LABEL_332;
  }
  if ((*((_WORD *)v150 + 15) & 0x400) != 0)
    goto LABEL_332;
  WebCore::Node::removedLastRef(v150, v139);
  v417 = v1201.var0.var0.var0;
  v1134 = v1201.var0.var1;
  v1135 = *((_BYTE *)&v1201.var0 + 12);
  v1201.var0.var0.var0 = 0;
  if (v417)
  {
    if (*((_DWORD *)v417 + 6) == 2)
    {
      if ((*((_WORD *)v417 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v417, v139);
    }
    else
    {
      *((_DWORD *)v417 + 6) -= 2;
    }
  }
LABEL_333:
  v153 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v153)
  {
    if (*((_DWORD *)v153 + 6) == 2)
    {
      if ((*((_WORD *)v153 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v153, v139);
    }
    else
    {
      *((_DWORD *)v153 + 6) -= 2;
    }
  }
LABEL_336:
  WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary((unsigned int *)this, (const WebCore::Position *)&v1133, (uint64_t)&v1201);
  v155 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  v156 = v1133;
  v1133 = (WebCore::Node *)v155;
  if (!v156)
    goto LABEL_339;
  if (*((_DWORD *)v156 + 6) != 2)
  {
    *((_DWORD *)v156 + 6) -= 2;
    goto LABEL_339;
  }
  if ((*((_WORD *)v156 + 15) & 0x400) != 0)
  {
LABEL_339:
    v1134 = v1201.var0.var1;
    v1135 = *((_BYTE *)&v1201.var0 + 12);
  }
  else
  {
    WebCore::Node::removedLastRef(v156, v154);
    v238 = v1201.var0.var0.var0;
    v1134 = v1201.var0.var1;
    v1135 = *((_BYTE *)&v1201.var0 + 12);
    v1201.var0.var0.var0 = 0;
    if (v238)
    {
      if (*((_DWORD *)v238 + 6) == 2)
      {
        if ((*((_WORD *)v238 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v238, v154);
      }
      else
      {
        *((_DWORD *)v238 + 6) -= 2;
      }
    }
  }
  v157 = *((_QWORD *)this + 2);
  *(_DWORD *)(v157 + 24) += 2;
  v158 = *(_QWORD *)(v157 + 3064);
  v159 = *(WebCore::EditingStyle **)(v158 + 200);
  *(_QWORD *)(v158 + 200) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v159, (WTF::StringImpl *)v154);
      WTF::fastFree(v236, v237);
    }
    else
    {
      --*(_DWORD *)v159;
    }
  }
  if (*(_DWORD *)(v157 + 24) == 2)
  {
    if ((*(_WORD *)(v157 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v157, v154);
  }
  else
  {
    *(_DWORD *)(v157 + 24) -= 2;
  }
  v160 = v1133;
  if (v1133)
  {
    v161 = *((_DWORD *)v1133 + 6);
    v1129 = v1134;
    v1130 = v1135;
    *((_DWORD *)v1133 + 6) = v161 + 4;
  }
  else
  {
    v1129 = v1134;
    v1130 = v1135;
  }
  v1128 = v160;
  v163 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v160 + 208))(v160);
  if (*((_DWORD *)v160 + 6) == 2)
  {
    if ((*((_WORD *)v160 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v160, v162);
  }
  else
  {
    *((_DWORD *)v160 + 6) -= 2;
  }
  if ((v163 & 1) == 0)
  {
    v200 = v1128;
    v1128 = 0;
    LODWORD(v1201.var0.var0.var0) = v1129;
    BYTE4(v1201.var0.var0.var0) = v1130;
    v61 = v1109;
    goto LABEL_482;
  }
  v164 = v1128;
  if (v1128
    && (v165 = v1130 & 7, v165 <= 4)
    && (((1 << v165) & 0x19) != 0 || (v164 = (WebCore::Node *)*((_QWORD *)v1128 + 4)) != 0))
  {
    *((_DWORD *)v164 + 6) += 2;
    v1198.var0.var0.var0 = (Node *)v164;
    WebCore::enclosingBlock((uint64_t *)&v1198, (WebCore::Node *)1, (WebCore::Node **)&v1199);
    v1198.var0.var0.var0 = 0;
    if (*((_DWORD *)v164 + 6) == 2)
    {
      if ((*((_WORD *)v164 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v164, v162);
    }
    else
    {
      *((_DWORD *)v164 + 6) -= 2;
    }
  }
  else
  {
    v1198.var0.var0.var0 = 0;
    WebCore::enclosingBlock((uint64_t *)&v1198, (WebCore::Node *)1, (WebCore::Node **)&v1199);
    v1198.var0.var0.var0 = 0;
  }
  v166 = v1128;
  if (v1128)
    *((_DWORD *)v1128 + 6) += 2;
  v1200.var0.var0.var0 = (Node *)v166;
  v1200.var0.var1 = v1129;
  *((_BYTE *)&v1200.var0 + 12) = v1130;
  if (!v166)
    goto LABEL_430;
  while (2)
  {
    v167 = *((_BYTE *)&v1200.var0 + 12) & 7;
    if (v167 <= 4)
    {
      v168 = 1 << v167;
      v169 = (Node *)v166;
      if ((v168 & 0x19) == 0)
        v169 = (Node *)*((_QWORD *)v166 + 4);
      goto LABEL_361;
    }
LABEL_430:
    v169 = 0;
LABEL_361:
    v170 = v1199.var0.var0.var0;
    if (v1199.var0.var0.var0 != v169
      && !WebCore::lineBreakExistsAtPosition((WebCore *)&v1128, (const WebCore::Position *)v162))
    {
      v171 = v1128;
      v172 = v1130 & 7;
      v173 = v1128;
      if (v172 - 1 <= 1)
        v173 = (WebCore::Node *)*((_QWORD *)v1128 + 4);
      v174 = *((_QWORD *)v173 + 4);
      if (v174 && (*(_WORD *)(v174 + 28) & 0x80) == 0)
      {
        if (v172 > 4)
        {
          v171 = 0;
          goto LABEL_474;
        }
        if (((1 << v172) & 0x19) != 0 || (v171 = (WebCore::Node *)*((_QWORD *)v1128 + 4)) != 0)
        {
          v175 = 0;
          *((_DWORD *)v171 + 6) += 2;
        }
        else
        {
LABEL_474:
          v175 = 1;
        }
        WebCore::positionInParentAfterNode((uint64_t)v171, (WebCore::Node *)v162, (uint64_t)&v1201);
        v176 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        v1200.var0.var0.var0 = v176;
        if (!v166)
          goto LABEL_373;
        if (*((_DWORD *)v166 + 6) != 2)
        {
          *((_DWORD *)v166 + 6) -= 2;
          goto LABEL_373;
        }
        if ((*((_WORD *)v166 + 15) & 0x400) != 0)
        {
LABEL_373:
          v1200.var0.var1 = v1201.var0.var1;
          *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
          v1201.var0.var0.var0 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v166, v162);
          v197 = v1201.var0.var0.var0;
          v1200.var0.var1 = v1201.var0.var1;
          *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
          v1201.var0.var0.var0 = 0;
          if (v197)
          {
            if (*((_DWORD *)v197 + 6) == 2)
            {
              if ((*((_WORD *)v197 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v197, v162);
            }
            else
            {
              *((_DWORD *)v197 + 6) -= 2;
            }
          }
        }
        if ((v175 & 1) == 0)
        {
          if (*((_DWORD *)v171 + 6) == 2)
          {
            if ((*((_WORD *)v171 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v171, v162);
              v176 = v1200.var0.var0.var0;
            }
          }
          else
          {
            *((_DWORD *)v171 + 6) -= 2;
          }
        }
        v171 = v1128;
        v166 = (WebCore::Node *)v176;
      }
      if (v166 == v171)
      {
        v177 = *((_BYTE *)&v1200.var0 + 12);
        if ((*((_BYTE *)&v1200.var0 + 12) & 8) == 0
          && ((*((_BYTE *)&v1200.var0 + 12) & 7) == 4 || (*((_BYTE *)&v1200.var0 + 12) & 7) == 2))
        {
          if (v171)
          {
            v178 = *((_DWORD *)v171 + 6);
            *((_DWORD *)v171 + 6) = v178 + 2;
            v179 = *((_WORD *)v171 + 14);
            if ((v179 & 1) != 0)
            {
              v199 = *((_QWORD *)v171 + 10);
              v181 = v199 ? *(_DWORD *)(v199 + 4) : 0;
            }
            else if ((v179 & 4) != 0 && (v180 = *((_QWORD *)v171 + 10)) != 0)
            {
              v181 = 0;
              do
              {
                ++v181;
                v180 = *(_QWORD *)(v180 + 56);
              }
              while (v180);
            }
            else
            {
              v181 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v171 + 208))(v171) ^ 1;
              v178 = *((_DWORD *)v171 + 6) - 2;
            }
            if (v178)
            {
              *((_DWORD *)v171 + 6) = v178;
            }
            else if ((*((_WORD *)v171 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v171, v162);
            }
          }
          else
          {
            v181 = 0;
          }
        }
        else
        {
          v181 = v1200.var0.var1;
        }
        if ((v1130 & 8) == 0 && ((v182 = v1130 & 7, v182 != 4) ? (v183 = v182 == 2) : (v183 = 1), v183))
        {
          v184 = v1128;
          if (v1128)
          {
            v185 = *((_DWORD *)v1128 + 6);
            *((_DWORD *)v1128 + 6) = v185 + 2;
            v186 = *((_WORD *)v184 + 14);
            if ((v186 & 1) != 0)
            {
              v198 = *((_QWORD *)v184 + 10);
              v188 = v198 ? *(_DWORD *)(v198 + 4) : 0;
            }
            else if ((v186 & 4) != 0 && (v187 = *((_QWORD *)v184 + 10)) != 0)
            {
              v188 = 0;
              do
              {
                ++v188;
                v187 = *(_QWORD *)(v187 + 56);
              }
              while (v187);
            }
            else
            {
              v188 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v184 + 208))(v184) ^ 1;
              v185 = *((_DWORD *)v184 + 6) - 2;
            }
            if (v185)
            {
              *((_DWORD *)v184 + 6) = v185;
            }
            else if ((*((_WORD *)v184 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v184, v162);
            }
          }
          else
          {
            v188 = 0;
          }
        }
        else
        {
          v188 = v1129;
        }
        if (v181 == v188 && ((v1130 ^ v177) & 7) == 0)
          break;
      }
      if (v166)
      {
        v189 = *((_BYTE *)&v1200.var0 + 12) & 7;
        if (v189 <= 4)
        {
          v190 = v166;
          if (((1 << v189) & 0x19) != 0 || (v190 = (WebCore::Node *)*((_QWORD *)v166 + 4)) != 0)
          {
            v191 = 0;
            *((_DWORD *)v190 + 6) += 2;
          }
          else
          {
LABEL_442:
            v191 = 1;
          }
          v1195 = v190;
          WebCore::enclosingBlock((uint64_t *)&v1195, (WebCore::Node *)1, (WebCore::Node **)&v1201);
          v192 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v192)
          {
            if (*((_DWORD *)v192 + 6) == 2)
            {
              if ((*((_WORD *)v192 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v192, v162);
            }
            else
            {
              *((_DWORD *)v192 + 6) -= 2;
            }
          }
          v1195 = 0;
          if ((v191 & 1) == 0)
          {
            if (*((_DWORD *)v190 + 6) == 2)
            {
              if ((*((_WORD *)v190 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v190, v162);
            }
            else
            {
              *((_DWORD *)v190 + 6) -= 2;
            }
          }
          if (v192 != v170)
            break;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1128, (uint64_t)&v1201);
          v1201.var1 = 1;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1200, (uint64_t)&v1166);
          v1166.var1 = 1;
          v193 = WebCore::operator==((uint64_t *)&v1201, (uint64_t *)&v1166);
          v194 = v1166.var0.var0.var0;
          v1166.var0.var0.var0 = 0;
          if (v194)
          {
            if (*((_DWORD *)v194 + 6) == 2)
            {
              if ((*((_WORD *)v194 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v194, v162);
            }
            else
            {
              *((_DWORD *)v194 + 6) -= 2;
            }
          }
          v195 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v195)
          {
            if (*((_DWORD *)v195 + 6) == 2)
            {
              if ((*((_WORD *)v195 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v195, v162);
            }
            else
            {
              *((_DWORD *)v195 + 6) -= 2;
            }
          }
          if (!v193)
            break;
          if (v166)
            *((_DWORD *)v166 + 6) += 2;
          v196 = v1128;
          v1128 = v166;
          if (v196)
          {
            if (*((_DWORD *)v196 + 6) == 2)
            {
              if ((*((_WORD *)v196 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v196, v162);
            }
            else
            {
              *((_DWORD *)v196 + 6) -= 2;
            }
          }
          v1129 = v1200.var0.var1;
          v1130 = *((_BYTE *)&v1200.var0 + 12);
          v166 = (WebCore::Node *)v1200.var0.var0.var0;
          if (v1200.var0.var0.var0)
            continue;
          goto LABEL_430;
        }
      }
      v190 = 0;
      goto LABEL_442;
    }
    break;
  }
  v86 = v1114;
  if (v1200.var0.var0.var0)
  {
    if (*((_DWORD *)v1200.var0.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v1200.var0.var0.var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1200.var0.var0.var0, v162);
    }
    else
    {
      *((_DWORD *)v1200.var0.var0.var0 + 6) -= 2;
    }
  }
  v200 = v1128;
  v1128 = 0;
  LODWORD(v1201.var0.var0.var0) = v1129;
  BYTE4(v1201.var0.var0.var0) = v1130;
  v61 = v1109;
  if (v1199.var0.var0.var0)
  {
    if (*((_DWORD *)v1199.var0.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v1199.var0.var0.var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1199.var0.var0.var0, v162);
    }
    else
    {
      *((_DWORD *)v1199.var0.var0.var0 + 6) -= 2;
    }
  }
LABEL_482:
  v201 = v1133;
  v1133 = v200;
  if (v201)
  {
    if (*((_DWORD *)v201 + 6) == 2)
    {
      if ((*((_WORD *)v201 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v201, v162);
    }
    else
    {
      *((_DWORD *)v201 + 6) -= 2;
    }
  }
  v1134 = v1201.var0.var0.var0;
  v1135 = BYTE4(v1201.var0.var0.var0);
  v202 = v1128;
  v1128 = 0;
  if (v202)
  {
    if (*((_DWORD *)v202 + 6) == 2)
    {
      if ((*((_WORD *)v202 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v202, v162);
    }
    else
    {
      *((_DWORD *)v202 + 6) -= 2;
    }
  }
  WebCore::CompositeEditCommand::positionOutsideTabSpan(this, (const WebCore::Position *)&v1133, (uint64_t)&v1201);
  v204 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  v205 = v1133;
  v1133 = (WebCore::Node *)v204;
  if (!v205)
    goto LABEL_491;
  if (*((_DWORD *)v205 + 6) != 2)
  {
    *((_DWORD *)v205 + 6) -= 2;
    goto LABEL_491;
  }
  if ((*((_WORD *)v205 + 15) & 0x400) != 0)
  {
LABEL_491:
    v1134 = v1201.var0.var1;
    v1135 = *((_BYTE *)&v1201.var0 + 12);
  }
  else
  {
    WebCore::Node::removedLastRef(v205, v203);
    v240 = v1201.var0.var0.var0;
    v1134 = v1201.var0.var1;
    v1135 = *((_BYTE *)&v1201.var0 + 12);
    v1201.var0.var0.var0 = 0;
    if (v240)
    {
      if (*((_DWORD *)v240 + 6) == 2)
      {
        if ((*((_WORD *)v240 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v240, v239);
      }
      else
      {
        *((_DWORD *)v240 + 6) -= 2;
      }
    }
  }
  LOBYTE(v1198.var0.var0.var0) = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1133, (uint64_t)&v1166);
  v1166.var1 = 1;
  WebCore::VisiblePosition::previous((WebCore::Node **)&v1166, 1, (BOOL *)&v1198, (uint64_t)&v1200);
  WebCore::VisiblePosition::next((unsigned __int8 *)&v1166, 1, (BOOL *)&v1198, (uint64_t)&v1199);
  if (v1200.var0.var0.var0)
    v207 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v207 = 0;
  if (v207)
  {
    WebCore::endOfLine((uint64_t *)&v1201, (uint64_t)&v1200, 1, 0);
    v208 = WebCore::operator==((uint64_t *)&v1200, (uint64_t *)&v1201);
    v209 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v209)
    {
      if (*((_DWORD *)v209 + 6) == 2)
      {
        if ((*((_WORD *)v209 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v209, v206);
      }
      else
      {
        *((_DWORD *)v209 + 6) -= 2;
      }
    }
  }
  else
  {
    v208 = 0;
  }
  if (!LOBYTE(v1198.var0.var0.var0)
    && WebCore::isBlankParagraph((WebCore *)&v1166, (const WebCore::VisiblePosition *)v206)
    && v208
    && (v1199.var0.var0.var0
      ? (v210 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance)
      : (v210 = 0),
        v210))
  {
    WebCore::startOfLine((uint64_t)&v1201, (WebCore::VisiblePosition *)&v1199, (WebCore::Node *)1, 0);
    v211 = WebCore::operator==((uint64_t *)&v1199, (uint64_t *)&v1201);
    v212 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v212)
    {
      if (*((_DWORD *)v212 + 6) == 2)
      {
        if ((*((_WORD *)v212 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v212, v206);
      }
      else
      {
        *((_DWORD *)v212 + 6) -= 2;
      }
    }
  }
  else
  {
    v211 = 0;
  }
  v213 = v1199.var0.var0.var0;
  v1199.var0.var0.var0 = 0;
  if (v213)
  {
    if (*((_DWORD *)v213 + 6) == 2)
    {
      if ((*((_WORD *)v213 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v213, v206);
    }
    else
    {
      *((_DWORD *)v213 + 6) -= 2;
    }
  }
  v214 = v1200.var0.var0.var0;
  v1200.var0.var0.var0 = 0;
  if (v214)
  {
    if (*((_DWORD *)v214 + 6) == 2)
    {
      if ((*((_WORD *)v214 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v214, v206);
    }
    else
    {
      *((_DWORD *)v214 + 6) -= 2;
    }
  }
  v215 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v215)
  {
    if (*((_DWORD *)v215 + 6) == 2)
    {
      if ((*((_WORD *)v215 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v215, v206);
    }
    else
    {
      *((_DWORD *)v215 + 6) -= 2;
    }
  }
  if (!*(_QWORD *)v86)
    goto LABEL_601;
  v216 = *(_QWORD *)(*(_QWORD *)v86 + 80);
  if (!v216)
    goto LABEL_601;
  *(_DWORD *)(v216 + 24) += 2;
  if ((WebCore::isMailPasteAsQuotationNode((WebCore *)v216, (const WebCore::Node *)v206) & 1) != 0)
    goto LABEL_547;
  WebCore::firstPositionInOrBeforeNode(v216, v217, (uint64_t)&v1201);
  WebCore::enclosingNodeOfType((uint64_t)&v1201, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 0, (uint64_t *)&v1166);
  v219 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v219)
  {
    if (*((_DWORD *)v219 + 6) == 2)
    {
      if ((*((_WORD *)v219 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v219, v217);
    }
    else
    {
      *((_DWORD *)v219 + 6) -= 2;
    }
  }
  v220 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v220)
  {
    if (*((_DWORD *)v220 + 6) == 2)
    {
      if ((*((_WORD *)v220 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v220, v217);
    }
    else
    {
      *((_DWORD *)v220 + 6) -= 2;
    }
  }
  if (v219 || !WebCore::isLegacyAppleStyleSpan(v216, v217, v218))
  {
LABEL_547:
    v235 = *(_DWORD *)(v216 + 24) - 2;
    if (*(_DWORD *)(v216 + 24) != 2)
    {
      LOBYTE(v1094) = 0;
LABEL_549:
      *(_DWORD *)(v216 + 24) = v235;
      goto LABEL_602;
    }
    if ((*(_WORD *)(v216 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v216, v217);
LABEL_601:
    LOBYTE(v1094) = 0;
    goto LABEL_602;
  }
  if ((*(_WORD *)(v216 + 28) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B145B4);
  }
  WebCore::Position::parentAnchoredEquivalent((uint64_t)&v1133, (uint64_t)&v1201);
  v221 = WTF::fastMalloc((WTF *)0x18);
  v222 = (WebCore::StyleProperties **)v221;
  *(_DWORD *)v221 = 1;
  *(_QWORD *)(v221 + 8) = 0;
  *(_BYTE *)(v221 + 16) &= 0xE0u;
  *(_DWORD *)(v221 + 20) = WebCore::EditingStyle::NoFontDelta;
  v223 = v1201.var0.var0.var0;
  if (v1201.var0.var0.var0)
  {
    *((_DWORD *)v1201.var0.var0.var0 + 6) += 2;
    WebCore::EditingStyle::init(v221, (WebCore *)v223, 1);
    if (*((_DWORD *)v223 + 6) == 2)
    {
      if ((*((_WORD *)v223 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v223, v224);
    }
    else
    {
      *((_DWORD *)v223 + 6) -= 2;
    }
  }
  else
  {
    WebCore::EditingStyle::init(v221, 0, 1);
  }
  v227 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v227)
  {
    if (*((_DWORD *)v227 + 6) == 2)
    {
      if ((*((_WORD *)v227 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v227, v224);
    }
    else
    {
      *((_DWORD *)v227 + 6) -= 2;
    }
  }
  WebCore::StyleProperties::asText(v222[1], (unsigned __int8 *)v224, v225, &v1201, v226);
  Attribute = (const WTF::StringImpl **)WebCore::Element::getAttribute((WebCore::Element *)v216, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v228, v229, v230);
  v1094 = WTF::equal((WTF *)v1201.var0.var0.var0, *Attribute, v232);
  if (v1094)
    WebCore::ReplacementFragment::removeNodePreservingChildren((unsigned int *)v216, v233);
  v234 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v234, v233);
    else
      *(_DWORD *)v234 -= 2;
  }
  if (*(_DWORD *)v222 == 1)
  {
    WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v222, v233);
    WTF::fastFree(v413, v414);
  }
  else
  {
    --*(_DWORD *)v222;
  }
  v235 = *(_DWORD *)(v216 + 24) - 2;
  if (*(_DWORD *)(v216 + 24) != 2)
    goto LABEL_549;
  if ((*(_WORD *)(v216 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v216, v233);
LABEL_602:
  v241 = WebCore::Position::rootEditableElement((WebCore::Position *)&v1133);
  if (!v241)
  {
    v1101 = 0;
    goto LABEL_705;
  }
  v245 = v241;
  *((_DWORD *)v241 + 6) += 2;
  v246 = WebCore::ScriptDisallowedScope::s_count++;
  v247 = *((_QWORD *)v241 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v247)
    goto LABEL_699;
  if ((*(_BYTE *)((*((_QWORD *)v241 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B13DE0);
  }
  v248 = *(_DWORD *)((*((_QWORD *)v241 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*((_QWORD *)v241 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v248 + 1;
  v249 = *(_QWORD *)(*(_QWORD *)(v247 + 104) + 320);
  v250 = *(unsigned int *)(v249 + 20);
  if (!(_DWORD)v250)
  {
    if (v248 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195B1408CLL);
    }
    *(_DWORD *)(v247 + 16) = v248;
LABEL_699:
    v1101 = 0;
LABEL_702:
    WebCore::ScriptDisallowedScope::s_count = v246;
    goto LABEL_703;
  }
  v251 = *(_QWORD *)(v249 + 8);
  v252 = 8 * v250;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)v251 + 12) != 6)
    {
      if (v248 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195B140ACLL);
      }
      v1101 = 0;
      *(_DWORD *)(v247 + 16) = v248;
      goto LABEL_702;
    }
    v251 += 8;
    v252 -= 8;
  }
  while (v252);
  if (v248 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195B140CCLL);
  }
  *(_DWORD *)(v247 + 16) = v248;
  WebCore::ScriptDisallowedScope::s_count = v246;
  if (!*(_QWORD *)v1114)
  {
    v1101 = 1;
    goto LABEL_703;
  }
  v253 = *(_QWORD *)(*(_QWORD *)v1114 + 80);
  v1101 = 1;
  if (!v253)
  {
LABEL_773:
    v61 = v1109;
    goto LABEL_703;
  }
  *(_DWORD *)(v253 + 24) += 2;
  while (2)
  {
    v254 = v253;
    if ((*(_WORD *)(v253 + 28) & 0x70) == 0)
      goto LABEL_677;
    *(_DWORD *)(v253 + 24) += 2;
    v255 = *(_QWORD *)(v253 + 104);
    if (!v255 || (v256 = *(_QWORD *)(v255 + 8)) == 0)
    {
      v264 = 6;
      goto LABEL_673;
    }
    WebCore::StyleProperties::propertyAsColor(v256, (void *)5, v242, v243, (uint64_t)&v1200, v244);
    if (!LOBYTE(v1200.var0.var1))
      goto LABEL_644;
    if (((uint64_t)v1200.var0.var0.var0 & 0x8000000000000) != 0)
    {
      v265 = (unsigned int *)((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL);
      v266 = *(float *)(((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v266 <= 0.0 || ((uint64_t)v1200.var0.var0.var0 & 0x1000000000000) != 0)
      {
        v268 = 1;
        v1088 = 0;
        goto LABEL_640;
      }
      v285 = *(_DWORD *)(((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL) + 0xC);
      v1166.var0.var0.var0 = *(Node **)(((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL) + 4);
      v1166.var0.var1 = v285;
      *((float *)&v1166.var0 + 3) = v266;
      v1201.var0.var0.var0 = (Node *)&v1199;
      *(_QWORD *)&v1201.var0.var1 = &v1166;
      v244.n128_f32[0] = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_((unint64_t)v1200.var0.var0.var0 >> 56, (uint64_t)&v1201);
LABEL_621:
      v260 = v244.n128_f32[0];
      v261 = v258;
      v262 = v259;
      if (v261 < v244.n128_f32[0])
        v244.n128_f32[0] = v261;
      if (v261 >= v260)
        v263 = v261;
      else
        v263 = v260;
      if (v262 >= v244.n128_f32[0])
      {
        if (v262 >= v263)
          goto LABEL_631;
      }
      else
      {
        v244.n128_f32[0] = v262;
      }
      v262 = v263;
LABEL_631:
      v244.n128_f64[0] = (float)(v244.n128_f32[0] + v262) * 0.5;
      if (!LOBYTE(v1200.var0.var1) || ((uint64_t)v1200.var0.var0.var0 & 0x8000000000000) == 0)
      {
LABEL_633:
        if (v244.n128_f64[0] >= 0.4)
          goto LABEL_644;
        v264 = 1;
        goto LABEL_673;
      }
      v1088 = v244.n128_u64[0];
      v268 = 0;
      v265 = (unsigned int *)((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL);
      do
      {
LABEL_640:
        v269 = __ldaxr(v265);
        v270 = v269 - 1;
      }
      while (__stlxr(v270, v265));
      if (!v270)
      {
        atomic_store(1u, v265);
        WTF::fastFree((WTF *)v265, v123);
      }
      v244.n128_u64[0] = v1088;
      if ((v268 & 1) != 0)
        goto LABEL_644;
      goto LABEL_633;
    }
    if (LOBYTE(v1200.var0.var0.var0) && ((uint64_t)v1200.var0.var0.var0 & 0x1000000000000) == 0)
    {
      v257 = bswap32(v1200.var0.var0.var0);
      v244.n128_f32[0] = (float)v257 / 255.0;
      v258 = (float)BYTE1(v257) / 255.0;
      v259 = (float)BYTE2(v257) / 255.0;
      goto LABEL_621;
    }
LABEL_644:
    WebCore::StyleProperties::propertyAsColor(v256, (void *)0x3D, v242, v243, (uint64_t)&v1200, v244);
    if (!LOBYTE(v1200.var0.var1))
      goto LABEL_672;
    if (((uint64_t)v1200.var0.var0.var0 & 0x8000000000000) != 0)
    {
      v278 = (unsigned int *)((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL);
      v279 = *(float *)(((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v279 <= 0.0 || ((uint64_t)v1200.var0.var0.var0 & 0x1000000000000) != 0)
      {
        v281 = 1;
        v1089 = 0;
        goto LABEL_668;
      }
      v286 = *(_DWORD *)(((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL) + 0xC);
      v1166.var0.var0.var0 = *(Node **)(((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL) + 4);
      v1166.var0.var1 = v286;
      *((float *)&v1166.var0 + 3) = v279;
      v1201.var0.var0.var0 = (Node *)&v1199;
      *(_QWORD *)&v1201.var0.var1 = &v1166;
      v244.n128_f32[0] = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_((unint64_t)v1200.var0.var0.var0 >> 56, (uint64_t)&v1201);
LABEL_649:
      v274 = v244.n128_f32[0];
      v275 = v272;
      v276 = v273;
      if (v275 < v244.n128_f32[0])
        v244.n128_f32[0] = v275;
      if (v275 >= v274)
        v277 = v275;
      else
        v277 = v274;
      if (v276 >= v244.n128_f32[0])
      {
        if (v276 >= v277)
          goto LABEL_659;
      }
      else
      {
        v244.n128_f32[0] = v276;
      }
      v276 = v277;
LABEL_659:
      v244.n128_f64[0] = (float)(v244.n128_f32[0] + v276) * 0.5;
      if (!LOBYTE(v1200.var0.var1) || ((uint64_t)v1200.var0.var0.var0 & 0x8000000000000) == 0)
      {
LABEL_661:
        if (v244.n128_f64[0] <= 0.6)
          goto LABEL_672;
        v264 = 1;
        goto LABEL_673;
      }
      v1089 = v244.n128_u64[0];
      v281 = 0;
      v278 = (unsigned int *)((uint64_t)v1200.var0.var0.var0 & 0xFFFFFFFFFFFFLL);
      do
      {
LABEL_668:
        v282 = __ldaxr(v278);
        v283 = v282 - 1;
      }
      while (__stlxr(v283, v278));
      if (!v283)
      {
        atomic_store(1u, v278);
        WTF::fastFree((WTF *)v278, v123);
      }
      v244.n128_u64[0] = v1089;
      if ((v281 & 1) != 0)
        goto LABEL_672;
      goto LABEL_661;
    }
    if (LOBYTE(v1200.var0.var0.var0) && ((uint64_t)v1200.var0.var0.var0 & 0x1000000000000) == 0)
    {
      v271 = bswap32(v1200.var0.var0.var0);
      v244.n128_f32[0] = (float)v271 / 255.0;
      v272 = (float)BYTE1(v271) / 255.0;
      v273 = (float)BYTE2(v271) / 255.0;
      goto LABEL_649;
    }
LABEL_672:
    v264 = 0;
LABEL_673:
    if (*(_DWORD *)(v254 + 24) == 2)
    {
      if ((*(_WORD *)(v254 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v254, v123);
    }
    else
    {
      *(_DWORD *)(v254 + 24) -= 2;
    }
    if (v264 == 6 || !v264)
    {
LABEL_677:
      if ((*(_WORD *)(v254 + 28) & 4) != 0 && (v253 = *(_QWORD *)(v254 + 80)) != 0
        || (v253 = *(_QWORD *)(v254 + 56)) != 0)
      {
LABEL_683:
        *(_DWORD *)(v253 + 24) += 2;
      }
      else
      {
        v284 = v254;
        while (1)
        {
          v284 = *(_QWORD *)(v284 + 32);
          if (!v284)
            break;
          v253 = *(_QWORD *)(v284 + 56);
          if (v253)
            goto LABEL_683;
        }
        v253 = 0;
      }
      if (*(_DWORD *)(v254 + 24) == 2)
      {
        if ((*(_WORD *)(v254 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v254, v123);
      }
      else
      {
        *(_DWORD *)(v254 + 24) -= 2;
      }
      if (!v253)
      {
        v1101 = 1;
        goto LABEL_773;
      }
      continue;
    }
    break;
  }
  v61 = v1109;
  if (*(_DWORD *)(v254 + 24) == 2)
  {
    if ((*(_WORD *)(v254 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v254, v123);
    v1101 = 0;
  }
  else
  {
    v1101 = 0;
    *(_DWORD *)(v254 + 24) -= 2;
  }
LABEL_703:
  if (*((_DWORD *)v245 + 6) == 2)
  {
    if ((*((_WORD *)v245 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v245, v123);
  }
  else
  {
    *((_DWORD *)v245 + 6) -= 2;
  }
LABEL_705:
  v287 = v1114;
  v288 = v1111;
  if (!*(_QWORD *)v1114 || !*(_QWORD *)(*(_QWORD *)v1114 + 80))
    goto LABEL_942;
  if (!*((_BYTE *)this + 426))
  {
    v289 = (unsigned int *)v1133;
    if (v1133)
    {
      v290 = v1135 & 7;
      if (v290 > 4)
      {
        v289 = 0;
      }
      else if (((1 << v290) & 0x19) == 0)
      {
        v289 = (unsigned int *)*((_QWORD *)v1133 + 4);
      }
    }
    WebCore::enclosingList(v289, (WebCore::Node *)v123, &v1201);
    v292 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v292)
    {
      if (*((_DWORD *)v292 + 6) == 2)
      {
        if ((*((_WORD *)v292 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v292, v291);
      }
      else
      {
        *((_DWORD *)v292 + 6) -= 2;
      }
      goto LABEL_715;
    }
    v456 = v1133;
    if (v1133)
    {
      v457 = v1135 & 7;
      if (v457 <= 4 && (((1 << v457) & 0x19) != 0 || (v456 = (WebCore::Node *)*((_QWORD *)v1133 + 4)) != 0))
      {
        *((_DWORD *)v456 + 6) += 2;
        if ((*((_WORD *)v456 + 14) & 2) != 0
          && v1134
          && !WebCore::Position::atLastEditingPositionForNode((WebCore::Position *)&v1133, (const WebCore::Node *)v291))
        {
          if ((*((_WORD *)v1133 + 14) & 2) != 0)
            v458 = v1133;
          else
            v458 = 0;
          WebCore::CompositeEditCommand::splitTextNode(this, v458, v1134);
          v459 = v1133;
          if (v1133 && (v460 = v1135 & 7, v460 <= 4))
          {
            v461 = 1 << v460;
            v462 = v1133;
            if ((v461 & 0x19) == 0)
              v462 = (WebCore::Node *)*((_QWORD *)v1133 + 4);
          }
          else
          {
            v462 = 0;
          }
          v463 = *((_WORD *)v462 + 14);
          *((_DWORD *)v462 + 6) += 2;
          if ((v463 & 1) != 0)
            v464 = 0;
          else
            v464 = 3;
          v1133 = v462;
          if (v459)
          {
            if (*((_DWORD *)v459 + 6) == 2)
            {
              if ((*((_WORD *)v459 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v459, v291);
            }
            else
            {
              *((_DWORD *)v459 + 6) -= 2;
            }
          }
          v1134 = 0;
          v1135 = v464;
        }
        if (*((_DWORD *)v456 + 6) == 2)
        {
          if ((*((_WORD *)v456 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v456, v291);
        }
        else
        {
          *((_DWORD *)v456 + 6) -= 2;
        }
      }
    }
    WebCore::nodeToSplitToAvoidPastingIntoInlineNodesWithStyle((WebCore *)&v1166, (const WebCore::Position *)&v1133);
    v466 = v1166.var0.var0.var0;
    if (!v1166.var0.var0.var0)
      goto LABEL_1566;
    v467 = (WebCore::Node *)*((_QWORD *)v1166.var0.var0.var0 + 4);
    if (!v467)
      goto LABEL_1563;
    if (v1133)
    {
      v468 = v1135 & 7;
      if (v468 > 4)
      {
        v469 = 0;
      }
      else
      {
        v469 = v1133;
        if (((1 << v468) & 0x19) == 0)
          v469 = (WebCore::Node *)*((_QWORD *)v1133 + 4);
      }
      if (v469 == v467)
      {
        v1166.var0.var0.var0 = 0;
        goto LABEL_1564;
      }
      v470 = v1133;
      switch(v1135 & 7)
      {
        case 0:
          if ((*((_WORD *)v1133 + 14) & 4) == 0)
            goto LABEL_1548;
          v470 = (WebCore::Node *)*((_QWORD *)v1133 + 10);
          if (v1134 && v470)
          {
            v471 = v1134 - 1;
            do
            {
              v470 = (WebCore::Node *)*((_QWORD *)v470 + 7);
              v472 = v471-- != 0;
              v473 = v472;
            }
            while (v470 && (v473 & 1) != 0);
          }
          break;
        case 1:
        case 4:
          goto LABEL_1549;
        case 2:
          v519 = (WebCore::Node **)((char *)v1133 + 56);
          goto LABEL_1544;
        case 3:
          if ((*((_WORD *)v1133 + 14) & 4) == 0)
            goto LABEL_1548;
          v519 = (WebCore::Node **)((char *)v1133 + 80);
LABEL_1544:
          v470 = *v519;
          break;
        default:
          goto LABEL_3549;
      }
      if (v470)
        goto LABEL_1549;
      if (v468 - 3 < 2 || (v1135 & 7) == 0)
      {
LABEL_1548:
        v470 = v1133;
        goto LABEL_1549;
      }
      if (v468 - 1 <= 1)
      {
        v470 = (WebCore::Node *)*((_QWORD *)v1133 + 4);
        if (!v470)
        {
LABEL_1550:
          WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)this, v470, v467, 0, (WebCore::Node **)&v1201);
          v521 = v1201.var0.var0.var0;
          if (v1201.var0.var0.var0)
            *((_DWORD *)v1201.var0.var0.var0 + 6) += 2;
          v522 = v1166.var0.var0.var0;
          v1166.var0.var0.var0 = v521;
          if (v522)
          {
            if (*((_DWORD *)v522 + 6) == 2)
            {
              if ((*((_WORD *)v522 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v522, v520);
                v521 = v1201.var0.var0.var0;
              }
            }
            else
            {
              *((_DWORD *)v522 + 6) -= 2;
            }
          }
          v1201.var0.var0.var0 = 0;
          if (v521)
          {
            if (*((_DWORD *)v521 + 6) == 2)
            {
              if ((*((_WORD *)v521 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v521, v520);
            }
            else
            {
              *((_DWORD *)v521 + 6) -= 2;
            }
          }
          WebCore::positionInParentBeforeNode((WebCore *)v1166.var0.var0.var0, (WebCore::Node *)v520, (uint64_t)&v1201);
          v523 = v1133;
          v1133 = (WebCore::Node *)v1201.var0.var0.var0;
          if (v523)
          {
            if (*((_DWORD *)v523 + 6) == 2)
            {
              if ((*((_WORD *)v523 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v523, v465);
            }
            else
            {
              *((_DWORD *)v523 + 6) -= 2;
            }
          }
          v1134 = v1201.var0.var1;
          v1135 = *((_BYTE *)&v1201.var0 + 12);
          if (*((_DWORD *)v470 + 6) == 2)
          {
            if ((*((_WORD *)v470 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v470, v465);
          }
          else
          {
            *((_DWORD *)v470 + 6) -= 2;
          }
LABEL_1563:
          v466 = v1166.var0.var0.var0;
          v1166.var0.var0.var0 = 0;
          if (v466)
          {
LABEL_1564:
            if (*((_DWORD *)v466 + 6) == 2)
            {
              if ((*((_WORD *)v466 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v466, v465);
            }
            else
            {
              *((_DWORD *)v466 + 6) -= 2;
            }
          }
LABEL_1566:
          v61 = v1109;
          v287 = v1114;
          goto LABEL_715;
        }
LABEL_1549:
        *((_DWORD *)v470 + 6) += 2;
        goto LABEL_1550;
      }
    }
LABEL_3549:
    v470 = 0;
    goto LABEL_1550;
  }
LABEL_715:
  v1126 = 0;
  v1127 = 0;
  if (*(_QWORD *)v287)
  {
    v293 = *(_QWORD *)(*(_QWORD *)v287 + 80);
    if (v293)
    {
      v294 = 0;
      *(_DWORD *)(v293 + 24) += 2;
      goto LABEL_720;
    }
  }
  else
  {
    v293 = 0;
  }
  v294 = 1;
LABEL_720:
  v295 = *(_QWORD *)(v293 + 56);
  if (v295)
    *(_DWORD *)(v295 + 24) += 2;
  v296 = *(_QWORD *)(v293 + 32);
  if (v296 && (*(_WORD *)(v296 + 28) & 0x80) == 0)
  {
    *(_DWORD *)(v296 + 24) += 2;
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v296, (WebCore::Node *)v293, &v1201);
    if (v1201.var1)
    {
      v298 = *(WTF::StringImpl **)&v1201.var0.var1;
      *(_QWORD *)&v1201.var0.var1 = 0;
      if (v298)
      {
        if (*(_DWORD *)v298 == 2)
          WTF::StringImpl::destroy(v298, v297);
        else
          *(_DWORD *)v298 -= 2;
      }
    }
    if (*(_DWORD *)(v296 + 24) == 2)
    {
      if ((*(_WORD *)(v296 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v296, v297);
    }
    else
    {
      *(_DWORD *)(v296 + 24) -= 2;
    }
  }
  v299 = v1133;
  v1092 = v211;
  if (v1133)
  {
    *((_DWORD *)v1133 + 6) += 2;
    v1124 = v299;
    WebCore::enclosingBlock((uint64_t *)&v1124, (WebCore::Node *)1, &v1125);
    v1124 = 0;
    if (*((_DWORD *)v299 + 6) == 2)
    {
      if ((*((_WORD *)v299 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v299, v300);
    }
    else
    {
      *((_DWORD *)v299 + 6) -= 2;
    }
  }
  else
  {
    v1124 = 0;
    WebCore::enclosingBlock((uint64_t *)&v1124, (WebCore::Node *)1, &v1125);
    v1124 = 0;
  }
  if ((*(_WORD *)(v293 + 28) & 0x10) == 0
    || (v302 = *(_QWORD *)(*(_QWORD *)(v293 + 96) + 24), v302 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
    && v302 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
    && v302 != *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
  {
    if (!WebCore::isLegacyAppleStyleSpan(v293, (const WebCore::Node *)v300, v301))
      goto LABEL_771;
    v303 = (*(_WORD *)(v293 + 28) & 4) != 0 ? v294 : 1;
    if ((v303 & 1) != 0)
      goto LABEL_771;
    v304 = *(_QWORD *)(v293 + 80);
    if (!v304)
      goto LABEL_771;
    if ((*(_WORD *)(v304 + 28) & 0x10) == 0)
      goto LABEL_771;
    v305 = *(_QWORD *)(*(_QWORD *)(v304 + 96) + 24);
    if (v305 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
      && v305 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
      && v305 != *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
    {
      goto LABEL_771;
    }
  }
  v306 = v1125;
  if (!v1125)
    goto LABEL_771;
  if ((*((_QWORD *)v1125 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)v1125 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B14314);
  }
  if (*(_BYTE *)((*((_QWORD *)v1125 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 19
    || !WebCore::Node::computeEditability(*((_QWORD *)v1125 + 4), 0, 1))
  {
    if (!WebCore::isEditablePosition((uint64_t)&v1133, 0))
      goto LABEL_772;
LABEL_771:
    *(_DWORD *)(v293 + 24) += 2;
    v1201.var0.var0.var0 = (Node *)v293;
    WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v1201, (WebCore::Position *)&v1133);
    v316 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v316)
    {
      if (*((_DWORD *)v316 + 6) == 2)
      {
        if ((*((_WORD *)v316 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v316, v123);
      }
      else
      {
        *((_DWORD *)v316 + 6) -= 2;
      }
    }
    if ((v294 & 1) == 0)
    {
      v317 = 0;
      *(_DWORD *)(v293 + 24) += 4;
      v1126 = (WebCore *)v293;
      v1127 = (WebCore::Node *)v293;
    }
    else
    {
LABEL_772:
      v317 = 0;
    }
    v318 = v293;
    goto LABEL_777;
  }
  if ((*(_WORD *)(v293 + 28) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B145E8);
  }
  *(_DWORD *)(v293 + 24) += 2;
  v308 = *(_QWORD *)(v293 + 80);
  v309 = v293;
  v1116 = (WebCore::Node *)v293;
  if (v308)
  {
    v309 = v293;
    if (v308 == *(_QWORD *)(v293 + 88))
    {
      v310 = v293;
      while (1)
      {
        v309 = v308;
        v311 = *(_DWORD *)(v308 + 24);
        *(_DWORD *)(v309 + 24) = v311 + 2;
        if ((*(_WORD *)(v309 + 28) & 0x10) == 0)
          break;
        v312 = *(_QWORD *)(*(_QWORD *)(v309 + 96) + 24);
        if (v312 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
          && v312 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
          && v312 != *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
        {
          break;
        }
        if (*(_DWORD *)(v310 + 24) == 2)
        {
          if ((*(_WORD *)(v310 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v310, v307);
        }
        else
        {
          *(_DWORD *)(v310 + 24) -= 2;
        }
        v308 = *(_QWORD *)(v309 + 80);
        if (v308)
        {
          v310 = v309;
          if (v308 == *(_QWORD *)(v309 + 88))
            continue;
        }
        goto LABEL_1033;
      }
      if (v311)
      {
        *(_DWORD *)(v309 + 24) = v311;
        v309 = v310;
      }
      else
      {
        if ((*(_WORD *)(v309 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v309, v307);
        v309 = v310;
      }
    }
  }
LABEL_1033:
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1133, (uint64_t)&v1166);
  v1166.var1 = 1;
  v379 = v1166.var0.var0.var0;
  if (v1166.var0.var0.var0)
    v380 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v380 = 0;
  if (v380)
  {
    WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
    v381 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
    v382 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v382)
    {
      if (*((_DWORD *)v382 + 6) == 2)
      {
        if ((*((_WORD *)v382 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v382, v378);
      }
      else
      {
        *((_DWORD *)v382 + 6) -= 2;
      }
    }
    v379 = v1166.var0.var0.var0;
  }
  else
  {
    v381 = 0;
  }
  v1166.var0.var0.var0 = 0;
  if (v379)
  {
    if (*((_DWORD *)v379 + 6) == 2)
    {
      if ((*((_WORD *)v379 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v379, v378);
    }
    else
    {
      *((_DWORD *)v379 + 6) -= 2;
    }
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1133, (uint64_t)&v1166);
  v1166.var1 = 1;
  v383 = v1166.var0.var0.var0;
  if (v1166.var0.var0.var0)
    v384 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v384 = 0;
  if (v384)
  {
    WebCore::endOfParagraph((WebCore::Node *)&v1166, 1, &v1201);
    v385 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
    v386 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v386)
    {
      if (*((_DWORD *)v386 + 6) == 2)
      {
        if ((*((_WORD *)v386 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v386, v123);
      }
      else
      {
        *((_DWORD *)v386 + 6) -= 2;
      }
    }
    v383 = v1166.var0.var0.var0;
  }
  else
  {
    v385 = 0;
  }
  v1166.var0.var0.var0 = 0;
  if (v383)
  {
    if (*((_DWORD *)v383 + 6) == 2)
    {
      if ((*((_WORD *)v383 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v383, v123);
    }
    else
    {
      *((_DWORD *)v383 + 6) -= 2;
    }
  }
  *((_DWORD *)v306 + 6) += 2;
  if (!v381 && !v385)
  {
    v387 = v1133;
    if (v1133 && (*((_WORD *)v1133 + 14) & 2) != 0)
    {
      v388 = v1134;
      v389 = *((_DWORD *)v1133 + 6) + 2;
      *((_DWORD *)v1133 + 6) = v389;
      if (v388 >= 1)
      {
        WebCore::CompositeEditCommand::splitTextNode(this, v387, v388);
        v389 = *((_DWORD *)v387 + 6);
      }
      v390 = v389 - 2;
      if (v390)
      {
        *((_DWORD *)v387 + 6) = v390;
      }
      else if ((*((_WORD *)v387 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v387, v123);
      }
    }
    WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)this, v1133, v306, 1, (WebCore::Node **)&v1200);
    v391 = v1200.var0.var0.var0;
    v1200.var0.var0.var0 = 0;
    if (v391)
    {
      if (*((_DWORD *)v391 + 6) == 2)
      {
        if ((*((_WORD *)v391 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v391, v123);
      }
      else
      {
        *((_DWORD *)v391 + 6) -= 2;
      }
    }
  }
  v392 = *(_QWORD *)(v309 + 80);
  if (!v392)
  {
    if (v381 || !v385)
      goto LABEL_1443;
    goto LABEL_1446;
  }
  if (!v381 && v385)
  {
    if (v385)
    {
      while (1)
      {
        v318 = v392;
        *(_DWORD *)(v392 + 24) += 2;
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v309, (WebCore::Node *)v392, &v1201);
        if (v1201.var1)
        {
          v398 = *(WTF::StringImpl **)&v1201.var0.var1;
          *(_QWORD *)&v1201.var0.var1 = 0;
          if (v398)
          {
            if (*(_DWORD *)v398 == 2)
              WTF::StringImpl::destroy(v398, (WTF::StringImpl *)v123);
            else
              *(_DWORD *)v398 -= 2;
          }
        }
        v399 = *(_DWORD *)(v392 + 24) + 2;
        *(_DWORD *)(v392 + 24) = v399;
        v1199.var0.var0.var0 = (Node *)v392;
        v400 = *((_QWORD *)v306 + 4);
        if (v400)
        {
          v401 = *(_DWORD *)(v400 + 24);
          *(_DWORD *)(v400 + 24) = v401 + 2;
          if (*(WebCore::Node **)(v400 + 88) == v306)
          {
            *(_DWORD *)(v400 + 24) = v401 + 4;
            v402 = (*(uint64_t (**)(WebCore::ReplaceSelectionCommand *))(*(_QWORD *)this + 16))(this);
            v403 = WTF::fastMalloc((WTF *)0x108);
            v404 = *(_QWORD *)(*(_QWORD *)(v400 + 40) + 8);
            *(_DWORD *)(v404 + 24) += 2;
            v1166.var0.var0.var0 = (Node *)v404;
            *(_QWORD *)WebCore::EditCommand::EditCommand(v403, (uint64_t *)&v1166, v402) = off_1E33A9E80;
            v406 = v1166.var0.var0.var0;
            v1166.var0.var0.var0 = 0;
            if (v406)
            {
              if (*((_DWORD *)v406 + 6) == 2)
              {
                if ((*((_WORD *)v406 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v406, v405);
              }
              else
              {
                *((_DWORD *)v406 + 6) -= 2;
              }
            }
            *(_QWORD *)v403 = off_1E33A9630;
            v407 = v1199.var0.var0.var0;
            v1199.var0.var0.var0 = 0;
            *(_QWORD *)(v403 + 248) = v400;
            *(_QWORD *)(v403 + 256) = v407;
            v1166.var0.var0.var0 = (Node *)v403;
            WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v1166);
            if (v1166.var0.var0.var0)
            {
              if (*((_DWORD *)v1166.var0.var0.var0 + 2) == 1)
                (*(void (**)(void))(*(_QWORD *)v1166.var0.var0.var0 + 8))();
              else
                --*((_DWORD *)v1166.var0.var0.var0 + 2);
            }
          }
          else
          {
            WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v1199, *((_QWORD *)v306 + 7), 1);
          }
          if (*(_DWORD *)(v400 + 24) == 2)
          {
            if ((*(_WORD *)(v400 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v400, v123);
          }
          else
          {
            *(_DWORD *)(v400 + 24) -= 2;
          }
          v408 = v1199.var0.var0.var0;
          v1199.var0.var0.var0 = 0;
          if (!v408)
            goto LABEL_1112;
          v399 = *((_DWORD *)v408 + 6);
        }
        else
        {
          v1199.var0.var0.var0 = 0;
          v408 = (Node *)v392;
        }
        v409 = v399 - 2;
        if (v409)
        {
          *((_DWORD *)v408 + 6) = v409;
        }
        else if ((*((_WORD *)v408 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v408, v123);
        }
LABEL_1112:
        v410 = *(_DWORD *)(v318 + 24);
        if (!v1126)
        {
          v410 += 2;
          v1126 = (WebCore *)v318;
        }
        *(_DWORD *)(v318 + 24) = v410 + 2;
        v411 = v1127;
        v1127 = (WebCore::Node *)v318;
        if (v411)
        {
          if (*((_DWORD *)v411 + 6) == 2)
          {
            if ((*((_WORD *)v411 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v411, v123);
          }
          else
          {
            *((_DWORD *)v411 + 6) -= 2;
          }
        }
        *(_DWORD *)(v318 + 24) += 2;
        if (*((_DWORD *)v306 + 6) == 2)
        {
          if ((*((_WORD *)v306 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v306, v123);
        }
        else
        {
          *((_DWORD *)v306 + 6) -= 2;
        }
        if (*(_DWORD *)(v318 + 24) == 2)
        {
          if ((*(_WORD *)(v318 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v318, v123);
        }
        else
        {
          *(_DWORD *)(v318 + 24) -= 2;
        }
        v392 = *(_QWORD *)(v309 + 80);
        v306 = (WebCore::Node *)v318;
        if (!v392)
          goto LABEL_1447;
      }
    }
    do
    {
      *(_DWORD *)(v392 + 24) += 2;
      WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v309, (WebCore::Node *)v392, &v1201);
      if (v1201.var1)
      {
        v412 = *(WTF::StringImpl **)&v1201.var0.var1;
        *(_QWORD *)&v1201.var0.var1 = 0;
        if (v412)
        {
          if (*(_DWORD *)v412 == 2)
            WTF::StringImpl::destroy(v412, (WTF::StringImpl *)v123);
          else
            *(_DWORD *)v412 -= 2;
        }
      }
      if (*(_DWORD *)(v392 + 24) == 2)
      {
        if ((*(_WORD *)(v392 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v392, v123);
      }
      else
      {
        *(_DWORD *)(v392 + 24) -= 2;
      }
      v392 = *(_QWORD *)(v309 + 80);
    }
    while (v392);
LABEL_1446:
    v318 = (uint64_t)v306;
    goto LABEL_1447;
  }
  do
  {
    *(_DWORD *)(v392 + 24) += 2;
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v309, (WebCore::Node *)v392, &v1201);
    if (v1201.var1)
    {
      v394 = *(WTF::StringImpl **)&v1201.var0.var1;
      *(_QWORD *)&v1201.var0.var1 = 0;
      if (v394)
      {
        if (*(_DWORD *)v394 == 2)
          WTF::StringImpl::destroy(v394, v393);
        else
          *(_DWORD *)v394 -= 2;
      }
    }
    *(_DWORD *)(v392 + 24) += 2;
    v1166.var0.var0.var0 = (Node *)v392;
    WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v1166, (uint64_t)v306, 1);
    v395 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    if (v395)
    {
      if (*((_DWORD *)v395 + 6) == 2)
      {
        if ((*((_WORD *)v395 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v395, v123);
      }
      else
      {
        *((_DWORD *)v395 + 6) -= 2;
      }
    }
    v396 = *(_DWORD *)(v392 + 24);
    if (!v1126)
    {
      v396 += 2;
      v1126 = (WebCore *)v392;
    }
    *(_DWORD *)(v392 + 24) = v396 + 2;
    v397 = v1127;
    v1127 = (WebCore::Node *)v392;
    if (v397)
    {
      if (*((_DWORD *)v397 + 6) == 2)
      {
        if ((*((_WORD *)v397 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v397, v123);
      }
      else
      {
        *((_DWORD *)v397 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v392 + 24) == 2)
    {
      if ((*(_WORD *)(v392 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v392, v123);
    }
    else
    {
      *(_DWORD *)(v392 + 24) -= 2;
    }
    v392 = *(_QWORD *)(v309 + 80);
  }
  while (v392);
LABEL_1443:
  v318 = *((_QWORD *)v306 + 6) & 0xFFFFFFFFFFFFLL;
  if (!v318)
    goto LABEL_1446;
  *(_DWORD *)((*((_QWORD *)v306 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  if (*((_DWORD *)v306 + 6) == 2)
  {
    if ((*((_WORD *)v306 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v306, v123);
  }
  else
  {
    *((_DWORD *)v306 + 6) -= 2;
  }
LABEL_1447:
  if (*(_DWORD *)(v309 + 24) == 2)
  {
    v494 = v1116;
    if ((*(_WORD *)(v309 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v309, v123);
  }
  else
  {
    *(_DWORD *)(v309 + 24) -= 2;
    v494 = v1116;
  }
  if (*((_DWORD *)v494 + 6) == 2)
  {
    v61 = v1109;
    if ((*((_WORD *)v494 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v494, v123);
    v317 = 1;
  }
  else
  {
    *((_DWORD *)v494 + 6) -= 2;
    v317 = 1;
    v61 = v1109;
  }
LABEL_777:
  if ((*(_BYTE *)(v318 + 22) & 8) == 0)
    goto LABEL_927;
  v1117 = v317;
  isPlainTextMarkup = WebCore::isPlainTextMarkup((WebCore *)v318, (WebCore::Node *)v123, v313, v314, v315);
  while (v295)
  {
    v320 = *(_QWORD *)(v295 + 56);
    if (v320)
      *(_DWORD *)(v320 + 24) += 2;
    v321 = *(_QWORD *)(v295 + 32);
    if (v321 && (*(_WORD *)(v321 + 28) & 0x80) == 0)
    {
      *(_DWORD *)(v321 + 24) += 2;
      WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v321, (WebCore::Node *)v295, &v1201);
      if (v1201.var1)
      {
        v323 = *(WTF::StringImpl **)&v1201.var0.var1;
        *(_QWORD *)&v1201.var0.var1 = 0;
        if (v323)
        {
          if (*(_DWORD *)v323 == 2)
            WTF::StringImpl::destroy(v323, v322);
          else
            *(_DWORD *)v323 -= 2;
        }
      }
      if (*(_DWORD *)(v321 + 24) == 2)
      {
        if ((*(_WORD *)(v321 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v321, v322);
      }
      else
      {
        *(_DWORD *)(v321 + 24) -= 2;
      }
    }
    *(_DWORD *)(v295 + 24) += 2;
    v1201.var0.var0.var0 = (Node *)v295;
    WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)this, (uint64_t *)&v1201, v318);
    v327 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v327)
    {
      if (*((_DWORD *)v327 + 6) == 2)
      {
        if ((*((_WORD *)v327 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v327, v123);
      }
      else
      {
        *((_DWORD *)v327 + 6) -= 2;
      }
    }
    v328 = *(_DWORD *)(v295 + 24);
    if (!v1126)
    {
      v328 += 2;
      v1126 = (WebCore *)v295;
    }
    *(_DWORD *)(v295 + 24) = v328 + 2;
    v329 = v1127;
    v1127 = (WebCore::Node *)v295;
    if (v329)
    {
      if (*((_DWORD *)v329 + 6) == 2)
      {
        if ((*((_WORD *)v329 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v329, v123);
      }
      else
      {
        *((_DWORD *)v329 + 6) -= 2;
      }
    }
    v330 = *(_QWORD *)(v295 + 16);
    if ((v330 & 0x8000000000000) != 0)
    {
      *(_DWORD *)(v295 + 24) += 2;
      if (*(_DWORD *)(v318 + 24) == 2)
      {
        if ((*(_WORD *)(v318 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v318, v123);
      }
      else
      {
        *(_DWORD *)(v318 + 24) -= 2;
      }
      isPlainTextMarkup = isPlainTextMarkup
                       && WebCore::isPlainTextMarkup((WebCore *)v295, (WebCore::Node *)v123, v324, v325, v326);
      if (v320)
        *(_DWORD *)(v320 + 24) += 2;
      if (*(_DWORD *)(v295 + 24) == 2)
      {
        if ((*(_WORD *)(v295 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v295, v123);
      }
      else
      {
        *(_DWORD *)(v295 + 24) -= 2;
      }
      v318 = v295;
      v295 = v320;
    }
    if (v320)
    {
      if (*(_DWORD *)(v320 + 24) == 2)
      {
        if ((*(_WORD *)(v320 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v320, v123);
      }
      else
      {
        *(_DWORD *)(v320 + 24) -= 2;
      }
    }
    if ((v330 & 0x8000000000000) == 0)
      goto LABEL_927;
  }
  if (!v1126)
    goto LABEL_926;
  v331 = *((_QWORD *)this + 2);
  *(_DWORD *)(v331 + 24) += 2;
  WebCore::Document::updateLayout(v331, 2u, 0);
  v333 = v1127;
  if (v1127)
  {
    v334 = v1127;
    do
    {
      v335 = (uint64_t)v334;
      v336 = *((_WORD *)v334 + 14);
      if ((v336 & 4) == 0)
        break;
      v334 = (WebCore::Node *)*((_QWORD *)v334 + 11);
    }
    while (v334);
    v337 = *(_DWORD *)(v335 + 24);
    *(_DWORD *)(v335 + 24) = v337 + 4;
    if ((v336 & 2) != 0)
    {
      v498 = (WebCore::RenderText *)(*(_QWORD *)(v335 + 64) & 0xFFFFFFFFFFFFLL);
      if (!v498)
        goto LABEL_1466;
      if ((*(_BYTE *)((*(_QWORD *)(v335 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B1A9D8);
      }
      if ((WebCore::RenderText::hasRenderedText(v498, v332) & 1) == 0)
      {
LABEL_1466:
        WebCore::firstPositionInOrBeforeNode(v335, v332, (uint64_t)&v1201);
        if (WebCore::enclosingElementWithTag((WebCore *)&v1201, (const WebCore::Position *)&WebCore::HTMLNames::selectTag, v499))
        {
          v500 = 0;
        }
        else
        {
          WebCore::firstPositionInOrBeforeNode(v335, v332, (uint64_t)&v1166);
          v500 = WebCore::enclosingElementWithTag((WebCore *)&v1166, (const WebCore::Position *)&WebCore::HTMLNames::scriptTag, v516) == 0;
          v517 = v1166.var0.var0.var0;
          v1166.var0.var0.var0 = 0;
          if (v517)
          {
            if (*((_DWORD *)v517 + 6) == 2)
            {
              if ((*((_WORD *)v517 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v517, v332);
            }
            else
            {
              *((_DWORD *)v517 + 6) -= 2;
            }
          }
        }
        v518 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v518)
        {
          if (*((_DWORD *)v518 + 6) == 2)
          {
            if ((*((_WORD *)v518 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v518, v332);
          }
          else
          {
            *((_DWORD *)v518 + 6) -= 2;
          }
        }
        if (v500)
        {
          WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNode((unsigned int *)&v1126, (WebCore::Node *)v335);
          (*(void (**)(WebCore::ReplaceSelectionCommand *, uint64_t, uint64_t))(*(_QWORD *)this + 184))(this, v335, 1);
        }
      }
      if (*(_DWORD *)(v335 + 24) == 2)
      {
        if ((*(_WORD *)(v335 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v335, v332);
      }
      else
      {
        *(_DWORD *)(v335 + 24) -= 2;
      }
      v61 = v1109;
      v127 = (Node *)v1110;
    }
    else if (v337 == -2)
    {
      if ((*(_WORD *)(v335 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v335, v332);
    }
    else
    {
      *(_DWORD *)(v335 + 24) = v337 + 2;
    }
  }
  else
  {
    v335 = 0;
  }
  WebCore::Document::updateLayout(v331, 2u, 0);
  v339 = v1126;
  if (!v1126)
    goto LABEL_846;
  v340 = *((_DWORD *)v1126 + 6);
  *((_DWORD *)v1126 + 6) = v340 + 4;
  if ((*((_WORD *)v339 + 14) & 2) != 0)
  {
    v476 = *((_QWORD *)v339 + 8);
    if ((v476 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_1401;
    if ((*(_BYTE *)((v476 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B1501CLL);
    }
    if ((WebCore::RenderText::hasRenderedText((WebCore::RenderText *)(v476 & 0xFFFFFFFFFFFFLL), (WebCore::RenderObject *)v123) & 1) == 0)
    {
LABEL_1401:
      WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNode((unsigned int *)&v1126, v339);
      (*(void (**)(WebCore::ReplaceSelectionCommand *, WebCore *, uint64_t))(*(_QWORD *)this + 184))(this, v339, 1);
    }
    if (*((_DWORD *)v339 + 6) != 2)
    {
      *((_DWORD *)v339 + 6) -= 2;
      v61 = v1109;
      v127 = (Node *)v1110;
      goto LABEL_844;
    }
    v61 = v1109;
    v127 = (Node *)v1110;
    if ((*((_WORD *)v339 + 15) & 0x400) != 0)
      goto LABEL_844;
    goto LABEL_1190;
  }
  v341 = v340 + 2;
  if (!v341)
  {
    if ((*((_WORD *)v339 + 15) & 0x400) != 0)
      goto LABEL_844;
LABEL_1190:
    WebCore::Node::removedLastRef(v339, v123);
    goto LABEL_844;
  }
  *((_DWORD *)v339 + 6) = v341;
LABEL_844:
  if (*((_DWORD *)v339 + 6) == 2)
  {
    if ((*((_WORD *)v339 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v339, v123);
  }
  else
  {
    *((_DWORD *)v339 + 6) -= 2;
  }
LABEL_846:
  if (v333)
  {
    if (*(_DWORD *)(v335 + 24) == 2)
    {
      if ((*(_WORD *)(v335 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v335, v123);
    }
    else
    {
      *(_DWORD *)(v335 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v331 + 24) == 2)
  {
    if ((*(_WORD *)(v331 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v331, v123);
  }
  else
  {
    *(_DWORD *)(v331 + 24) -= 2;
  }
  if ((v1094 & 1) != 0)
    goto LABEL_924;
  v342 = v1126;
  if (!v1126)
  {
LABEL_926:
    v295 = 0;
    goto LABEL_927;
  }
  *((_DWORD *)v1126 + 6) += 2;
  while (1)
  {
    v343 = (uint64_t)v342;
    if ((WebCore::isLegacyAppleStyleSpan((uint64_t)v342, (const WebCore::Node *)v123, v338) & 1) != 0)
      break;
    if ((*((_WORD *)v342 + 14) & 4) != 0 && (v342 = (WebCore *)*((_QWORD *)v342 + 10)) != 0
      || (v342 = *(WebCore **)(v343 + 56)) != 0)
    {
LABEL_861:
      *((_DWORD *)v342 + 6) += 2;
    }
    else
    {
      v344 = v343;
      while (1)
      {
        v344 = *(_QWORD *)(v344 + 32);
        if (!v344)
          break;
        v342 = *(WebCore **)(v344 + 56);
        if (v342)
          goto LABEL_861;
      }
      v342 = 0;
    }
    if (*(_DWORD *)(v343 + 24) == 2)
    {
      if ((*(_WORD *)(v343 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v343, v123);
    }
    else
    {
      *(_DWORD *)(v343 + 24) -= 2;
    }
    if (!v342)
      goto LABEL_924;
  }
  v345 = *((_QWORD *)v342 + 13);
  if (v345)
    v346 = *(const WebCore::StyleProperties **)(v345 + 8);
  else
    v346 = 0;
  v1090 = isPlainTextMarkup;
  v347 = WTF::fastMalloc((WTF *)0x18);
  WebCore::EditingStyle::EditingStyle((WebCore::EditingStyle *)v347, v346);
  v349 = *((_QWORD *)v342 + 4);
  if (v349)
  {
    *(_DWORD *)(v349 + 24) += 2;
    if (WebCore::isMailPasteAsQuotationNode((WebCore *)v349, v348))
    {
      *(_DWORD *)(v349 + 24) += 2;
      v351 = (Node *)v349;
      goto LABEL_891;
    }
  }
  v353 = *(_WORD *)(v349 + 28);
  *(_DWORD *)(v349 + 24) += 2;
  v1201.var0.var0.var0 = (Node *)v349;
  v1201.var0.var1 = 0;
  if ((v353 & 1) != 0)
    v354 = 0;
  else
    v354 = 3;
  *((_BYTE *)&v1201.var0 + 12) = v354;
  WebCore::enclosingNodeOfType((uint64_t)&v1201, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 0, (uint64_t *)&v1166);
  v351 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  v355 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v355)
  {
    if (*((_DWORD *)v355 + 6) == 2)
    {
      if ((*((_WORD *)v355 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v355, v350);
    }
    else
    {
      *((_DWORD *)v355 + 6) -= 2;
    }
  }
  if (v351)
  {
LABEL_891:
    v356 = *(_QWORD *)(*((_QWORD *)this + 2) + 1272);
    if (v356)
      *(_DWORD *)(v356 + 24) += 2;
    if (*(_DWORD *)(v349 + 24) == 2)
    {
      if ((*(_WORD *)(v349 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v349, v350);
    }
    else
    {
      *(_DWORD *)(v349 + 24) -= 2;
    }
    v349 = v356;
  }
  v357 = *(_WORD *)(v349 + 28);
  *(_DWORD *)(v349 + 24) += 2;
  v1201.var0.var0.var0 = (Node *)v349;
  v1201.var0.var1 = 0;
  if ((v357 & 1) != 0)
    v358 = *((_BYTE *)&v1201.var0 + 12) & 0xF0;
  else
    v358 = *((_BYTE *)&v1201.var0 + 12) & 0xF0 | 3;
  *((_BYTE *)&v1201.var0 + 12) = v358;
  WebCore::EditingStyle::prepareToApplyAt(v347, (uint64_t *)&v1201, 1);
  v362 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v362)
  {
    if (*((_DWORD *)v362 + 6) == 2)
    {
      if ((*((_WORD *)v362 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v362, v359);
    }
    else
    {
      *((_DWORD *)v362 + 6) -= 2;
    }
  }
  v363 = *(WebCore::StyleProperties **)(v347 + 8);
  if ((!v363
     || (WebCore::MutableStyleProperties::removeProperties((uint64_t)v363, WebCore::blockProperties, 20),
         (v363 = *(WebCore::StyleProperties **)(v347 + 8)) == 0)
     || !*((_DWORD *)v363 + 7))
    && (v361.n128_u32[0] = *(_DWORD *)(v347 + 20), v361.n128_f32[0] == *(float *)&WebCore::EditingStyle::NoFontDelta)
    && (*(_BYTE *)(v347 + 16) & 0x1E) == 0
    || !*(_QWORD *)(v343 + 80))
  {
    WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNodePreservingChildren((unsigned int *)&v1126, (WebCore::Node *)v343);
    WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v343, 1);
LABEL_915:
    if (!v351)
      goto LABEL_918;
    goto LABEL_916;
  }
  WebCore::StyleProperties::asTextAtom(v363, (unsigned __int8 *)v359, v360, (WTF::AtomString *)&v1201, v361);
  WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v343, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v1201);
  v364 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (!v364)
    goto LABEL_915;
  if (*(_DWORD *)v364 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v364, (WTF::StringImpl *)v123);
    if (v351)
      goto LABEL_916;
  }
  else
  {
    *(_DWORD *)v364 -= 2;
    if (!v351)
      goto LABEL_918;
LABEL_916:
    if (*((_DWORD *)v351 + 6) == 2)
    {
      if ((*((_WORD *)v351 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v351, v123);
    }
    else
    {
      *((_DWORD *)v351 + 6) -= 2;
    }
  }
LABEL_918:
  if (*(_DWORD *)(v349 + 24) == 2)
  {
    isPlainTextMarkup = v1090;
    if ((*(_WORD *)(v349 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v349, v123);
  }
  else
  {
    *(_DWORD *)(v349 + 24) -= 2;
    isPlainTextMarkup = v1090;
  }
  if (*(_DWORD *)v347 == 1)
  {
    WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v347, (WTF::StringImpl *)v123);
    WTF::fastFree(v415, v416);
  }
  else
  {
    --*(_DWORD *)v347;
  }
  v61 = v1109;
  if (*(_DWORD *)(v343 + 24) == 2)
  {
    if ((*(_WORD *)(v343 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v343, v123);
  }
  else
  {
    *(_DWORD *)(v343 + 24) -= 2;
  }
LABEL_924:
  if (!v1126 || (*((_BYTE *)v1126 + 22) & 8) == 0)
    goto LABEL_926;
  WebCore::firstPositionInOrBeforeNode((uint64_t)v1126, (WebCore::Node *)v123, (uint64_t)&v1201);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1201, (uint64_t)&v1120);
  v1123 = 1;
  v369 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  v370 = v1111;
  if (v369)
  {
    if (*((_DWORD *)v369 + 6) == 2)
    {
      if ((*((_WORD *)v369 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v369, v123);
    }
    else
    {
      *((_DWORD *)v369 + 6) -= 2;
    }
  }
  if (v1120)
  {
    if (v1111)
    {
      v371 = v1133;
      if (v1133 == *((WebCore::Node **)v1111 + 4))
      {
        if ((v1135 & 8) != 0 || (v372 = v1135 & 7, v372 != 4) && v372 != 2)
        {
          v376 = v1134;
          goto LABEL_1218;
        }
        if (!v1133)
        {
          v376 = 0;
          goto LABEL_1218;
        }
        v373 = *((_DWORD *)v1133 + 6);
        *((_DWORD *)v1133 + 6) = v373 + 2;
        v374 = *((_WORD *)v371 + 14);
        if ((v374 & 1) != 0)
        {
          v524 = *((_QWORD *)v371 + 10);
          if (v524)
            v376 = *(_DWORD *)(v524 + 4);
          else
            v376 = 0;
        }
        else
        {
          if ((v374 & 4) == 0 || (v375 = *((_QWORD *)v371 + 10)) == 0)
          {
            v376 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v371 + 208))(v371) ^ 1;
            v373 = *((_DWORD *)v371 + 6) - 2;
            if (*((_DWORD *)v371 + 6) != 2)
              goto LABEL_996;
LABEL_1593:
            if ((*((_WORD *)v371 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v371, v123);
            v61 = v1109;
            v127 = (Node *)v1110;
            v370 = v1111;
            goto LABEL_1218;
          }
          v376 = 0;
          do
          {
            ++v376;
            v375 = *(_QWORD *)(v375 + 56);
          }
          while (v375);
        }
        v61 = v1109;
        v127 = (Node *)v1110;
        v370 = v1111;
        if (!v373)
          goto LABEL_1593;
LABEL_996:
        *((_DWORD *)v371 + 6) = v373;
LABEL_1218:
        v418 = *((_QWORD *)v370 + 6);
        for (i = 0; ; ++i)
        {
          v420 = v418 & 0xFFFFFFFFFFFFLL;
          if (!v420)
            break;
          v418 = *(_QWORD *)(v420 + 48);
        }
        if (v376 < i)
        {
          if (!(v1120
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0))
            goto LABEL_1230;
          WebCore::startOfParagraph((uint64_t)&v1120, 1, &v1201);
          v422 = WebCore::operator==((uint64_t *)&v1120, (uint64_t *)&v1201);
          v423 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v423)
          {
            if (*((_DWORD *)v423 + 6) == 2)
            {
              if ((*((_WORD *)v423 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v423, v123);
            }
            else
            {
              *((_DWORD *)v423 + 6) -= 2;
            }
          }
          if (!v422)
          {
LABEL_1230:
            v424 = *((_QWORD *)this + 2);
            v425 = bmalloc::api::isoAllocate();
            *(_OWORD *)(v425 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v425 + 24) = 0x101C00000002;
            *(_QWORD *)(v425 + 32) = 0;
            *(_QWORD *)(v425 + 40) = v424 + 96;
            *(_OWORD *)(v425 + 48) = 0u;
            *(_OWORD *)(v425 + 64) = 0u;
            ++*(_DWORD *)(v424 + 3324);
            *(_QWORD *)(v425 + 80) = 0;
            *(_QWORD *)(v425 + 88) = 0;
            v426 = WebCore::HTMLNames::brTag;
            if (WebCore::HTMLNames::brTag)
              ++*(_DWORD *)WebCore::HTMLNames::brTag;
            *(_QWORD *)(v425 + 96) = v426;
            *(_QWORD *)(v425 + 104) = 0;
            *(_QWORD *)v425 = off_1E33B4C28;
            v1166.var0.var0.var0 = (Node *)v425;
            v427 = (Node *)v1120;
            if (v1120)
              *((_DWORD *)v1120 + 6) += 2;
            v1201.var0.var0.var0 = v427;
            v1201.var0.var1 = v1121;
            *((_BYTE *)&v1201.var0 + 12) = v1122;
            WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v1166, (WebCore::Position *)&v1201);
            v428 = v1201.var0.var0.var0;
            v1201.var0.var0.var0 = 0;
            if (v428)
            {
              if (*((_DWORD *)v428 + 6) == 2)
              {
                if ((*((_WORD *)v428 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v428, v123);
              }
              else
              {
                *((_DWORD *)v428 + 6) -= 2;
              }
            }
            v429 = v1166.var0.var0.var0;
            v1166.var0.var0.var0 = 0;
            if (v429)
            {
              if (*((_DWORD *)v429 + 6) == 2)
              {
                if ((*((_WORD *)v429 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v429, v123);
              }
              else
              {
                *((_DWORD *)v429 + 6) -= 2;
              }
            }
          }
        }
      }
    }
  }
  if (v127)
  {
    if (isPlainTextMarkup)
      goto LABEL_1242;
    if (WebCore::ReplaceSelectionCommand::shouldRemoveEndBR(this, (WebCore::Node *)v127, &v1132))
    {
      v439 = v1096;
      if (!*((_BYTE *)v1114 + 9))
        v439 = 1;
      if (v439 == 1)
      {
LABEL_1242:
        v430 = *((_QWORD *)v127 + 4);
        if (v430)
          *(_DWORD *)(v430 + 24) += 2;
        WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNode((unsigned int *)&v1126, (WebCore::Node *)v127);
        (*(void (**)(WebCore::ReplaceSelectionCommand *, Node *, uint64_t))(*(_QWORD *)this + 184))(this, v127, 1);
        v431 = *((_QWORD *)this + 2);
        *(_DWORD *)(v431 + 24) += 2;
        WebCore::Document::updateLayout(v431, 2u, 0);
        if (*(_DWORD *)(v431 + 24) == 2)
        {
          if ((*(_WORD *)(v431 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v431, v432);
        }
        else
        {
          *(_DWORD *)(v431 + 24) -= 2;
        }
        WebCore::highestNodeToRemoveInPruning((unsigned int *)v430, (WebCore::Node *)v432, (unsigned int **)&v1201);
        v433 = v1201.var0.var0.var0;
        if (!v1201.var0.var0.var0)
          goto LABEL_1700;
        v434 = v1126;
        if (v1126)
        {
          if (v1126 == (WebCore *)v1201.var0.var0.var0)
          {
            LODWORD(v436) = 1;
            goto LABEL_1643;
          }
          v435 = *((_WORD *)v1201.var0.var0.var0 + 14);
          if ((v435 & 0xF000) == 0x9000)
          {
            if ((Node *)**((_QWORD **)v1126 + 5) == v1201.var0.var0.var0 && (*((_WORD *)v1126 + 14) & 0xF000) != 0x9000)
            {
              LODWORD(v436) = (*((unsigned __int8 *)v1126 + 22) >> 3) & 1;
              goto LABEL_1643;
            }
          }
          else if ((v435 & 4) != 0)
          {
            v436 = *((_QWORD *)v1201.var0.var0.var0 + 10);
            if (!v436)
              goto LABEL_1643;
            if (((*((unsigned __int8 *)v1126 + 22) ^ *((unsigned __int8 *)v1201.var0.var0.var0 + 22)) & 8) == 0)
            {
              v437 = v1126;
              do
              {
                v437 = (WebCore *)*((_QWORD *)v437 + 4);
                LODWORD(v436) = v437 != 0;
              }
              while (v437 != (WebCore *)v1201.var0.var0.var0 && v437 != 0);
LABEL_1643:
              v526 = v1127;
              if (v1127)
              {
                if (v1127 == (WebCore::Node *)v1201.var0.var0.var0)
                {
                  if (!(_DWORD)v436)
                  {
LABEL_1667:
                    while (1)
                    {
                      v532 = *((_QWORD *)v433 + 6) & 0xFFFFFFFFFFFFLL;
                      if (v532)
                        break;
                      v433 = (Node *)*((_QWORD *)v433 + 4);
                      if (!v433)
                      {
                        v532 = 0;
                        goto LABEL_1671;
                      }
                    }
                    *(_DWORD *)((*((_QWORD *)v433 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
LABEL_1671:
                    v1127 = (WebCore::Node *)v532;
                    if (*((_DWORD *)v526 + 6) == 2)
                    {
                      if ((*((_WORD *)v526 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v526, v123);
                    }
                    else
                    {
                      *((_DWORD *)v526 + 6) -= 2;
                    }
LABEL_1679:
                    if (!v532)
                    {
                      if (v434)
                        *((_DWORD *)v434 + 6) += 2;
                      goto LABEL_1695;
                    }
                    if (v434)
                    {
                      v533 = *(_WORD *)(v532 + 28);
                      if ((v533 & 0xF000) == 0x9000)
                      {
                        if (**((_QWORD **)v434 + 5) == v532
                          && (*((_WORD *)v434 + 14) & 0xF000) != 0x9000
                          && (*((_BYTE *)v434 + 22) & 8) != 0)
                        {
LABEL_1692:
                          v1126 = (WebCore *)v532;
LABEL_1695:
                          v1127 = v434;
                        }
                      }
                      else if ((v533 & 4) != 0
                             && *(_QWORD *)(v532 + 80)
                             && ((*((unsigned __int8 *)v434 + 22) ^ *(unsigned __int8 *)(v532 + 22)) & 8) == 0)
                      {
                        v534 = v434;
                        do
                          v534 = (WebCore *)*((_QWORD *)v534 + 4);
                        while (v534 != (WebCore *)v532 && v534 != 0);
                        if (v534)
                          goto LABEL_1692;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v532 + 24) += 2;
                      v1126 = (WebCore *)v532;
                    }
LABEL_1697:
                    (*(void (**)(WebCore::ReplaceSelectionCommand *, Node *, uint64_t))(*(_QWORD *)this + 184))(this, v1201.var0.var0.var0, 1);
                    v536 = v1201.var0.var0.var0;
                    v1201.var0.var0.var0 = 0;
                    v61 = v1109;
                    if (v536)
                    {
                      if (*((_DWORD *)v536 + 6) == 2)
                      {
                        if ((*((_WORD *)v536 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v536, v123);
                      }
                      else
                      {
                        *((_DWORD *)v536 + 6) -= 2;
                      }
                    }
LABEL_1700:
                    if (v430)
                    {
                      if (*(_DWORD *)(v430 + 24) == 2)
                      {
                        if ((*(_WORD *)(v430 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v430, v123);
                      }
                      else
                      {
                        *(_DWORD *)(v430 + 24) -= 2;
                      }
                    }
                    goto LABEL_1703;
                  }
                  goto LABEL_1662;
                }
                v527 = *((_WORD *)v1201.var0.var0.var0 + 14);
                if ((v527 & 0xF000) == 0x9000)
                {
                  if ((Node *)**((_QWORD **)v1127 + 5) == v1201.var0.var0.var0
                    && (*((_WORD *)v1127 + 14) & 0xF000) != 0x9000)
                  {
                    v529 = (*((unsigned __int8 *)v1127 + 22) >> 3) & 1;
                    goto LABEL_1655;
                  }
                }
                else if ((v527 & 4) != 0
                       && *((_QWORD *)v1201.var0.var0.var0 + 10)
                       && ((*((unsigned __int8 *)v1127 + 22) ^ *((unsigned __int8 *)v1201.var0.var0.var0 + 22)) & 8) == 0)
                {
                  v528 = v1127;
                  do
                  {
                    v528 = (WebCore::Node *)*((_QWORD *)v528 + 4);
                    v529 = v528 != 0;
                  }
                  while (v528 != (WebCore::Node *)v1201.var0.var0.var0 && v528 != 0);
LABEL_1655:
                  if ((v436 & v529 & 1) == 0)
                  {
                    if (v529)
                      goto LABEL_1667;
                    goto LABEL_1657;
                  }
LABEL_1662:
                  v1126 = 0;
                  if (v434)
                  {
                    if (*((_DWORD *)v434 + 6) == 2)
                    {
                      if ((*((_WORD *)v434 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v434, v123);
                    }
                    else
                    {
                      *((_DWORD *)v434 + 6) -= 2;
                    }
                  }
                  v1127 = 0;
                  if (*((_DWORD *)v526 + 6) == 2)
                  {
                    if ((*((_WORD *)v526 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v526, v123);
                  }
                  else
                  {
                    *((_DWORD *)v526 + 6) -= 2;
                  }
                  goto LABEL_1697;
                }
              }
LABEL_1657:
              if ((_DWORD)v436)
              {
                while (1)
                {
                  v531 = (WebCore *)*((_QWORD *)v433 + 7);
                  if (v531)
                    break;
                  v433 = (Node *)*((_QWORD *)v433 + 4);
                  if (!v433)
                  {
                    v531 = 0;
                    goto LABEL_1675;
                  }
                }
                *((_DWORD *)v531 + 6) += 2;
LABEL_1675:
                v1126 = v531;
                if (v434)
                {
                  if (*((_DWORD *)v434 + 6) == 2)
                  {
                    if ((*((_WORD *)v434 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v434, v123);
                  }
                  else
                  {
                    *((_DWORD *)v434 + 6) -= 2;
                  }
                }
                v532 = (uint64_t)v526;
                v434 = v531;
              }
              else
              {
                v532 = (uint64_t)v1127;
              }
              goto LABEL_1679;
            }
          }
        }
        LODWORD(v436) = 0;
        goto LABEL_1643;
      }
    }
  }
LABEL_1703:
  v537 = v1126;
  if (!v1126)
    goto LABEL_2981;
  v538 = v1127;
  if (v1127)
  {
    do
    {
      v539 = v538;
      if ((*((_WORD *)v538 + 14) & 4) == 0)
        break;
      v538 = (WebCore::Node *)*((_QWORD *)v538 + 11);
    }
    while (v538);
  }
  else
  {
    v539 = 0;
  }
  v1091 = isPlainTextMarkup;
  if ((*((_WORD *)v539 + 14) & 4) == 0 || (v540 = *((_QWORD *)v539 + 10)) == 0)
  {
    while (1)
    {
      v540 = *((_QWORD *)v539 + 7);
      if (v540)
        break;
      v539 = (WebCore::Node *)*((_QWORD *)v539 + 4);
      if (!v539)
      {
        v540 = 0;
        v1097 = 1;
        goto LABEL_1715;
      }
    }
  }
  v1097 = 0;
  *(_DWORD *)(v540 + 24) += 2;
LABEL_1715:
  v541 = 0;
  *((_DWORD *)v537 + 6) += 2;
  while (2)
  {
    if (v537 != (WebCore *)v540)
    {
      v542 = v537;
      v543 = *((_WORD *)v537 + 14);
      if ((v543 & 4) != 0 && (v537 = (WebCore *)*((_QWORD *)v537 + 10)) != 0
        || (v537 = (WebCore *)*((_QWORD *)v542 + 7)) != 0)
      {
LABEL_1723:
        v545 = 0;
        *((_DWORD *)v537 + 6) += 2;
        if (!v541)
          goto LABEL_1726;
      }
      else
      {
        v544 = v542;
        while (1)
        {
          v544 = (WebCore *)*((_QWORD *)v544 + 4);
          if (!v544)
            break;
          v537 = (WebCore *)*((_QWORD *)v544 + 7);
          if (v537)
            goto LABEL_1723;
        }
        v537 = 0;
        v545 = 1;
        if (!v541)
        {
LABEL_1726:
          if ((v543 & 0x10) != 0)
          {
            *((_DWORD *)v542 + 6) += 2;
            if ((*((_BYTE *)v542 + 22) & 8) != 0)
            {
              v546 = *(unsigned __int16 *)(*((_QWORD *)v542 + 12) + 10);
              switch(*(_WORD *)(*((_QWORD *)v542 + 12) + 10))
              {
                case 3:
                case 6:
                case 7:
                case 0x11:
                case 0x16:
                case 0x17:
                case 0x1A:
                case 0x1B:
                case 0x1F:
                case 0x21:
                case 0x24:
                case 0x25:
                case 0x26:
                case 0x27:
                case 0x2A:
                case 0x2B:
                case 0x2C:
                case 0x2D:
                case 0x2E:
                case 0x31:
                case 0x32:
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                case 0x38:
                case 0x39:
                case 0x3A:
                case 0x45:
                case 0x47:
                case 0x48:
                case 0x4C:
                case 0x50:
                case 0x56:
                case 0x5A:
                case 0x5D:
                case 0x5E:
                  goto LABEL_1733;
                case 4:
                case 5:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x18:
                case 0x19:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x20:
                case 0x22:
                case 0x23:
                case 0x28:
                case 0x29:
                case 0x2F:
                case 0x30:
                case 0x37:
                case 0x3B:
                case 0x3C:
                case 0x3D:
                case 0x3E:
                case 0x3F:
                case 0x40:
                case 0x41:
                case 0x42:
                case 0x43:
                case 0x44:
                case 0x46:
                case 0x49:
                case 0x4A:
                case 0x4B:
                case 0x4D:
                case 0x4E:
                case 0x4F:
                case 0x51:
                case 0x52:
                case 0x53:
                case 0x54:
                case 0x55:
                case 0x57:
                case 0x58:
                case 0x59:
                case 0x5B:
                case 0x5C:
                  goto LABEL_1750;
                default:
                  if ((v546 - 105) > 0x1C || ((1 << (v546 - 105)) & 0x11173A01) == 0)
                    goto LABEL_1750;
LABEL_1733:
                  WebCore::positionInParentBeforeNode(v542, (WebCore::Node *)v123, (uint64_t)&v1201);
                  v549 = WebCore::enclosingElementWithTag((WebCore *)&v1201, (const WebCore::Position *)&WebCore::HTMLNames::pTag, v548);
                  v550 = v549;
                  if (v549)
                    *(_DWORD *)(v549 + 24) += 2;
                  v551 = v1201.var0.var0.var0;
                  v1201.var0.var0.var0 = 0;
                  if (v551)
                  {
                    if (*((_DWORD *)v551 + 6) == 2)
                    {
                      if ((*((_WORD *)v551 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v551, v123);
                    }
                    else
                    {
                      *((_DWORD *)v551 + 6) -= 2;
                    }
                  }
                  if (!v550)
                    goto LABEL_1750;
                  v552 = *(_QWORD *)(v550 + 32);
                  if (!v552)
                    goto LABEL_1746;
                  *(_DWORD *)(v552 + 24) += 2;
                  if (!WebCore::Node::computeEditability(v552, 0, 1)
                    || (WebCore::ReplaceSelectionCommand::moveNodeOutOfAncestor(this, v542, (WebCore::Node *)v550, (WebCore::ReplaceSelectionCommand::InsertedNodes *)&v1126), (*((_BYTE *)v542 + 22) & 8) != 0))
                  {
                    if (*(_DWORD *)(v552 + 24) == 2)
                    {
                      if ((*(_WORD *)(v552 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v552, v123);
                    }
                    else
                    {
                      *(_DWORD *)(v552 + 24) -= 2;
                    }
LABEL_1746:
                    v553 = 1;
                  }
                  else if (*(_DWORD *)(v552 + 24) == 2)
                  {
                    if ((*(_WORD *)(v552 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v552, v123);
                    v553 = 0;
                  }
                  else
                  {
                    v553 = 0;
                    *(_DWORD *)(v552 + 24) -= 2;
                  }
                  if (*(_DWORD *)(v550 + 24) == 2)
                  {
                    if ((*(_WORD *)(v550 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v550, v123);
                  }
                  else
                  {
                    *(_DWORD *)(v550 + 24) -= 2;
                  }
                  if (v553)
                  {
LABEL_1750:
                    if ((*((_WORD *)v542 + 14) & 0x10) != 0)
                    {
                      v554 = *(_QWORD *)(*((_QWORD *)v542 + 12) + 24);
                      if (v554 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24)
                        || v554 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
                        || v554 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
                        || v554 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
                        || v554 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24)
                        || v554 == *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24))
                      {
                        WebCore::positionInParentBeforeNode(v542, (WebCore::Node *)v123, (uint64_t)&v1201);
                        WebCore::highestEnclosingNodeOfType((unsigned int *)&v1201, WebCore::isHeaderElement, 1, 0, (uint64_t *)&v1166);
                        v555 = v1201.var0.var0.var0;
                        v1201.var0.var0.var0 = 0;
                        if (v555)
                        {
                          if (*((_DWORD *)v555 + 6) == 2)
                          {
                            if ((*((_WORD *)v555 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v555, v123);
                          }
                          else
                          {
                            *((_DWORD *)v555 + 6) -= 2;
                          }
                        }
                        if (v1166.var0.var0.var0)
                        {
                          v556 = *((_QWORD *)v1166.var0.var0.var0 + 4);
                          if (v556 && WebCore::Node::computeEditability(v556, 0, 0) == 2)
                          {
                            WebCore::ReplaceSelectionCommand::moveNodeOutOfAncestor(this, v542, (WebCore::Node *)v1166.var0.var0.var0, (WebCore::ReplaceSelectionCommand::InsertedNodes *)&v1126);
                          }
                          else
                          {
                            WebCore::CompositeEditCommand::replaceElementWithSpanPreservingChildrenAndAttributes(this, v542, &v1201);
                            v557 = v1201.var0.var0.var0;
                            if (v1126 == v542)
                            {
                              if (v1201.var0.var0.var0)
                                *((_DWORD *)v1201.var0.var0.var0 + 6) += 2;
                              v1126 = (WebCore *)v557;
                              if (*((_DWORD *)v542 + 6) == 2)
                              {
                                if ((*((_WORD *)v542 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v542, v123);
                              }
                              else
                              {
                                *((_DWORD *)v542 + 6) -= 2;
                              }
                            }
                            if (v1127 == v542)
                            {
                              if (v557)
                                *((_DWORD *)v557 + 6) += 2;
                              v1127 = (WebCore::Node *)v557;
                              if (*((_DWORD *)v542 + 6) == 2)
                              {
                                if ((*((_WORD *)v542 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v542, v123);
                              }
                              else
                              {
                                *((_DWORD *)v542 + 6) -= 2;
                              }
                            }
                            if (v1201.var0.var0.var0)
                            {
                              if (*((_DWORD *)v1201.var0.var0.var0 + 6) == 2)
                              {
                                if ((*((_WORD *)v1201.var0.var0.var0 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v1201.var0.var0.var0, v123);
                              }
                              else
                              {
                                *((_DWORD *)v1201.var0.var0.var0 + 6) -= 2;
                              }
                            }
                          }
                          v558 = v1166.var0.var0.var0;
                          v1166.var0.var0.var0 = 0;
                          if (v558)
                          {
                            if (*((_DWORD *)v558 + 6) == 2)
                            {
                              if ((*((_WORD *)v558 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v558, v123);
                            }
                            else
                            {
                              *((_DWORD *)v558 + 6) -= 2;
                            }
                          }
                        }
                      }
                    }
                  }
                  break;
              }
            }
            if (*((_DWORD *)v542 + 6) == 2)
            {
              if ((*((_WORD *)v542 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v542, v123);
            }
            else
            {
              *((_DWORD *)v542 + 6) -= 2;
            }
          }
          if ((v545 & 1) == 0)
            *((_DWORD *)v537 + 6) += 2;
          if (*((_DWORD *)v542 + 6) == 2)
          {
            if ((*((_WORD *)v542 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v542, v123);
          }
          else
          {
            *((_DWORD *)v542 + 6) -= 2;
          }
          v541 = v537;
          if (!v537)
            goto LABEL_1820;
          continue;
        }
      }
      if (*((_DWORD *)v541 + 6) == 2)
      {
        if ((*((_WORD *)v541 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v541, v123);
          v543 = *((_WORD *)v542 + 14);
        }
      }
      else
      {
        *((_DWORD *)v541 + 6) -= 2;
      }
      goto LABEL_1726;
    }
    break;
  }
  if (*(_DWORD *)(v540 + 24) == 2)
  {
    if ((*(_WORD *)(v540 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v540, v123);
  }
  else
  {
    *(_DWORD *)(v540 + 24) -= 2;
  }
  if (v541)
  {
    if (*((_DWORD *)v541 + 6) == 2)
    {
      if ((*((_WORD *)v541 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v541, v123);
    }
    else
    {
      *((_DWORD *)v541 + 6) -= 2;
    }
  }
LABEL_1820:
  v61 = v1109;
  if ((v1097 & 1) == 0)
  {
    if (*(_DWORD *)(v540 + 24) == 2)
    {
      if ((*(_WORD *)(v540 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v540, v123);
    }
    else
    {
      *(_DWORD *)(v540 + 24) -= 2;
    }
  }
  v559 = v1126;
  if (!v1126 || (*((_BYTE *)v1126 + 22) & 8) == 0)
    goto LABEL_2981;
  if (!v1101)
    goto LABEL_1879;
  v560 = v1127;
  if (v1127)
  {
    do
    {
      v561 = v560;
      if ((*((_WORD *)v560 + 14) & 4) == 0)
        break;
      v560 = (WebCore::Node *)*((_QWORD *)v560 + 11);
    }
    while (v560);
  }
  else
  {
    v561 = 0;
  }
  if ((*((_WORD *)v561 + 14) & 4) == 0 || (v562 = *((_QWORD *)v561 + 10)) == 0)
  {
    while (1)
    {
      v562 = *((_QWORD *)v561 + 7);
      if (v562)
        break;
      v561 = (WebCore::Node *)*((_QWORD *)v561 + 4);
      if (!v561)
      {
        v562 = 0;
        v563 = 1;
        goto LABEL_1837;
      }
    }
  }
  v563 = 0;
  *(_DWORD *)(v562 + 24) += 2;
LABEL_1837:
  *((_DWORD *)v559 + 6) += 2;
  while (2)
  {
    if (v559 != (WebCore *)v562)
    {
      v564 = v559;
      if ((*((_WORD *)v559 + 14) & 0x70) == 0)
        goto LABEL_1855;
      *((_DWORD *)v559 + 6) += 2;
      v565 = *((_QWORD *)v559 + 13);
      if (!v565)
        goto LABEL_1853;
      v566 = *(const WebCore::StyleProperties **)(v565 + 8);
      if (!v566)
        goto LABEL_1853;
      v567 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
      v568 = WebCore::EditingStyle::EditingStyle(v567, v566);
      WebCore::EditingStyle::inverseTransformColorIfNeeded(v568, v559, v569, v570, (uint64_t *)&v1201, v571);
      if (v567 == (WebCore::EditingStyle *)v1201.var0.var0.var0)
      {
        v1201.var0.var0.var0 = 0;
        v575 = (Node *)v567;
      }
      else
      {
        WebCore::StyleProperties::asTextAtom(*((WebCore::StyleProperties **)v1201.var0.var0.var0 + 1), (unsigned __int8 *)v123, v572, (WTF::AtomString *)&v1166, v573);
        WebCore::CompositeEditCommand::setNodeAttribute(this, v559, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v1166);
        v574 = v1166.var0.var0.var0;
        v1166.var0.var0.var0 = 0;
        if (v574)
        {
          if (*(_DWORD *)v574 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v574, (WTF::StringImpl *)v123);
          else
            *(_DWORD *)v574 -= 2;
        }
        v575 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (!v575)
        {
LABEL_1851:
          if (*(_DWORD *)v567 == 1)
          {
            WebCore::EditingStyle::~EditingStyle(v567, (WTF::StringImpl *)v123);
            WTF::fastFree(v577, v578);
          }
          else
          {
            --*(_DWORD *)v567;
          }
LABEL_1853:
          if (*((_DWORD *)v559 + 6) == 2)
          {
            if ((*((_WORD *)v559 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v559, v123);
          }
          else
          {
            *((_DWORD *)v559 + 6) -= 2;
          }
LABEL_1855:
          if ((*((_WORD *)v559 + 14) & 4) != 0 && (v559 = (WebCore *)*((_QWORD *)v559 + 10)) != 0
            || (v559 = (WebCore *)*((_QWORD *)v564 + 7)) != 0)
          {
LABEL_1861:
            *((_DWORD *)v559 + 6) += 2;
          }
          else
          {
            v576 = v564;
            while (1)
            {
              v576 = (WebCore *)*((_QWORD *)v576 + 4);
              if (!v576)
                break;
              v559 = (WebCore *)*((_QWORD *)v576 + 7);
              if (v559)
                goto LABEL_1861;
            }
            v559 = 0;
          }
          if (*((_DWORD *)v564 + 6) == 2)
          {
            if ((*((_WORD *)v564 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v564, v123);
          }
          else
          {
            *((_DWORD *)v564 + 6) -= 2;
          }
          if (!v559)
            goto LABEL_1876;
          continue;
        }
      }
      if (*(_DWORD *)v575 == 1)
      {
        WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v575, (WTF::StringImpl *)v123);
        WTF::fastFree(v579, v580);
      }
      else
      {
        --*(_DWORD *)v575;
      }
      goto LABEL_1851;
    }
    break;
  }
  if (*(_DWORD *)(v562 + 24) == 2)
  {
    if ((*(_WORD *)(v562 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v562, v123);
  }
  else
  {
    *(_DWORD *)(v562 + 24) -= 2;
  }
LABEL_1876:
  v61 = v1109;
  if ((v563 & 1) == 0)
  {
    if (*(_DWORD *)(v562 + 24) == 2)
    {
      if ((*(_WORD *)(v562 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v562, v123);
    }
    else
    {
      *(_DWORD *)(v562 + 24) -= 2;
    }
  }
LABEL_1879:
  v581 = v1127;
  if (v1127)
  {
    do
    {
      v582 = v581;
      if ((*((_WORD *)v581 + 14) & 4) == 0)
        break;
      v581 = (WebCore::Node *)*((_QWORD *)v581 + 11);
    }
    while (v581);
  }
  else
  {
    v582 = 0;
  }
  if ((*((_WORD *)v582 + 14) & 4) == 0 || (v583 = *((_QWORD *)v582 + 10)) == 0)
  {
    while (1)
    {
      v583 = *((_QWORD *)v582 + 7);
      if (v583)
        break;
      v582 = (WebCore::Node *)*((_QWORD *)v582 + 4);
      if (!v582)
      {
        v583 = 0;
        v1084 = 1;
        goto LABEL_1890;
      }
    }
  }
  v1084 = 0;
  *(_DWORD *)(v583 + 24) += 2;
LABEL_1890:
  v584 = v1126;
  if (!v1126)
    goto LABEL_2179;
  v585 = 0;
  *((_DWORD *)v1126 + 6) += 2;
  v1085 = v583;
  while (2)
  {
    if (v584 != (WebCore *)v583)
    {
      v586 = (uint64_t)v584;
      v587 = *((_WORD *)v584 + 14);
      if ((v587 & 4) != 0 && (v584 = (WebCore *)*((_QWORD *)v584 + 10)) != 0
        || (v584 = *(WebCore **)(v586 + 56)) != 0)
      {
LABEL_1899:
        v589 = 0;
        *((_DWORD *)v584 + 6) += 2;
        if (!v585)
          goto LABEL_1902;
      }
      else
      {
        v588 = v586;
        while (1)
        {
          v588 = *(_QWORD *)(v588 + 32);
          if (!v588)
            break;
          v584 = *(WebCore **)(v588 + 56);
          if (v584)
            goto LABEL_1899;
        }
        v584 = 0;
        v589 = 1;
        if (!v585)
        {
LABEL_1902:
          v590 = v587 & 0x70;
          if (v590)
            v591 = (WebCore::Element *)v586;
          else
            v591 = 0;
          if (!v590)
          {
            v611 = v586;
            goto LABEL_2069;
          }
          *(_DWORD *)(v586 + 24) += 2;
          v592 = *(_QWORD *)(v586 + 104);
          if (v592)
          {
            v593 = *(const WebCore::StyleProperties **)(v592 + 8);
            if (v593)
            {
              v594 = 0;
              ++*(_DWORD *)v593;
              goto LABEL_1909;
            }
          }
          else
          {
            v593 = 0;
          }
          v594 = 1;
LABEL_1909:
          v595 = WTF::fastMalloc((WTF *)0x18);
          v596 = WebCore::EditingStyle::EditingStyle((WebCore::EditingStyle *)v595, v593);
          if (v593)
          {
            v1086 = v593;
            v1087 = v589;
            if ((*(_WORD *)(v586 + 28) & 0x10) == 0)
            {
              v614 = v594;
              v608 = (WebCore::StyledElement *)v586;
              v1102 = (WebCore::VisiblePosition *)v586;
              goto LABEL_1962;
            }
            *(_DWORD *)(v586 + 24) += 2;
            v1201.var0.var0.var0 = 0;
            *(_QWORD *)&v1201.var0.var1 = 0;
            v601 = *(_QWORD *)(v595 + 8);
            v602 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
            v1098 = v584;
            v1095 = v594;
            if ((v601 && *(_DWORD *)(v601 + 28)
               || *(float *)(v595 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
               || (*(_BYTE *)(v595 + 16) & 0x1E) != 0)
              && (v603 = WebCore::htmlElementEquivalents(v596), v604))
            {
              v605 = v603;
              v606 = 8 * v604;
              while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v605 + 16))(*v605, v586)
                   || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v605 + 32))(*v605, v595)
                   || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v605 + 40))(*v605, v586, v595))
              {
                ++v605;
                v606 -= 8;
                if (!v606)
                  goto LABEL_1921;
              }
              WebCore::CompositeEditCommand::replaceElementWithSpanPreservingChildrenAndAttributes(this, (WebCore::HTMLElement *)v586, &v1166);
              v612 = v1166.var0.var0.var0;
              v1166.var0.var0.var0 = 0;
              if (*(_DWORD *)(v586 + 24) == 2)
              {
                if ((*(_WORD *)(v586 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v586, v597);
                  if (v1166.var0.var0.var0)
                  {
                    if (*((_DWORD *)v1166.var0.var0.var0 + 6) == 2)
                    {
                      if ((*((_WORD *)v1166.var0.var0.var0 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v1166.var0.var0.var0, v597);
                    }
                    else
                    {
                      *((_DWORD *)v1166.var0.var0.var0 + 6) -= 2;
                    }
                  }
                }
              }
              else
              {
                *(_DWORD *)(v586 + 24) -= 2;
              }
              if (v612)
              {
                if ((*((_WORD *)v612 + 14) & 0x70) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B1A248);
                }
                *((_DWORD *)v612 + 6) += 2;
              }
              if (*(_DWORD *)(v586 + 24) == 2)
              {
                if ((*(_WORD *)(v586 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v586, v597);
              }
              else
              {
                *(_DWORD *)(v586 + 24) -= 2;
              }
              if (v1126 == (WebCore *)v586)
              {
                if (v612)
                  *((_DWORD *)v612 + 6) += 2;
                v1126 = (WebCore *)v612;
                if (*(_DWORD *)(v586 + 24) == 2)
                {
                  if ((*(_WORD *)(v586 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v586, v597);
                }
                else
                {
                  *(_DWORD *)(v586 + 24) -= 2;
                }
              }
              if (v1127 == (WebCore::Node *)v586)
              {
                if (v612)
                  *((_DWORD *)v612 + 6) += 2;
                v1127 = (WebCore::Node *)v612;
                if (*(_DWORD *)(v586 + 24) != 2)
                {
                  *(_DWORD *)(v586 + 24) -= 2;
                  goto LABEL_1948;
                }
                v607 = (WebCore::VisiblePosition *)v612;
                if ((*(_WORD *)(v586 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v586, v597);
                v608 = (WebCore::StyledElement *)v612;
              }
              else
              {
LABEL_1948:
                v607 = (WebCore::VisiblePosition *)v612;
                v608 = (WebCore::StyledElement *)v612;
              }
LABEL_1949:
              v609 = (WTF *)v1201.var0.var0.var0;
              v1102 = v607;
              if (*((_DWORD *)&v1201.var0 + 3))
              {
                v613 = 8 * *((unsigned int *)&v1201.var0 + 3);
                v584 = v1098;
                v614 = v1095;
                do
                {
                  v615 = *(WTF::StringImpl ***)v609;
                  *(_QWORD *)v609 = 0;
                  if (v615)
                  {
                    if (*(_DWORD *)v615 == 1)
                    {
                      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v615);
                      WTF::fastFree(v616, v617);
                    }
                    else
                    {
                      --*(_DWORD *)v615;
                    }
                  }
                  v609 = (WTF *)((char *)v609 + 8);
                  v613 -= 8;
                }
                while (v613);
                v609 = (WTF *)v1201.var0.var0.var0;
LABEL_1958:
                if (v609)
                {
                  v1201.var0.var0.var0 = 0;
                  v1201.var0.var1 = 0;
                  WTF::fastFree(v609, v597);
                }
                if (*(_DWORD *)(v586 + 24) == 2)
                {
                  if ((*(_WORD *)(v586 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v586, v597);
                }
                else
                {
                  *(_DWORD *)(v586 + 24) -= 2;
                }
LABEL_1962:
                v586 = (uint64_t)v608;
                v618 = *((_QWORD *)v608 + 4);
                if (v618)
                {
                  *(_DWORD *)(v618 + 24) += 2;
                  v594 = v614;
                  v611 = (uint64_t)v1102;
                  if ((WebCore::isMailPasteAsQuotationNode((WebCore *)v618, (const WebCore::Node *)v597) & 1) != 0)
                    goto LABEL_1977;
                  v619 = *(_WORD *)(v618 + 28);
                  *(_DWORD *)(v618 + 24) += 2;
                  v1201.var0.var0.var0 = (Node *)v618;
                  v1201.var0.var1 = 0;
                  if ((v619 & 1) != 0)
                    v620 = *((_BYTE *)&v1201.var0 + 12) & 0xF0;
                  else
                    v620 = *((_BYTE *)&v1201.var0 + 12) & 0xF0 | 3;
                  *((_BYTE *)&v1201.var0 + 12) = v620;
                  WebCore::enclosingNodeOfType((uint64_t)&v1201, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 0, (uint64_t *)&v1166);
                  v622 = v1166.var0.var0.var0;
                  if (v1166.var0.var0.var0)
                    v623 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                  else
                    v623 = 0;
                  v1166.var0.var0.var0 = 0;
                  if (v622)
                  {
                    if (*((_DWORD *)v622 + 6) == 2)
                    {
                      if ((*((_WORD *)v622 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v622, v621);
                    }
                    else
                    {
                      *((_DWORD *)v622 + 6) -= 2;
                    }
                  }
                  v624 = v1201.var0.var0.var0;
                  v1201.var0.var0.var0 = 0;
                  if (v624)
                  {
                    if (*((_DWORD *)v624 + 6) == 2)
                    {
                      if ((*((_WORD *)v624 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v624, v621);
                    }
                    else
                    {
                      *((_DWORD *)v624 + 6) -= 2;
                    }
                  }
                  if (v623)
LABEL_1977:
                    WebCore::EditingStyle::removeStyleFromRulesAndContext((WebCore::EditingStyle *)v595, (WebCore::StyledElement *)v586, *(WebCore::Node **)(*((_QWORD *)this + 2) + 1272));
                  WebCore::EditingStyle::removeStyleFromRulesAndContext((WebCore::EditingStyle *)v595, (WebCore::StyledElement *)v586, (WebCore::Node *)v618);
                  if (*(_DWORD *)(v618 + 24) == 2)
                  {
                    v583 = v1085;
                    v589 = v1087;
                    if ((*(_WORD *)(v618 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v618, v597);
                  }
                  else
                  {
                    *(_DWORD *)(v618 + 24) -= 2;
                    v583 = v1085;
                    v589 = v1087;
                  }
                  v593 = v1086;
                  if ((v594 & 1) != 0)
                  {
LABEL_1981:
                    if ((*(_WORD *)(v586 + 28) & 0x10) == 0)
                      goto LABEL_1988;
                    v625 = *(_QWORD *)(*(_QWORD *)(v586 + 96) + 24);
                    if (v625 == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
                    {
                      if (!WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)v586, 0, v598, v599, v600))
                      {
                        if ((*(_WORD *)(v586 + 28) & 0x10) != 0)
                        {
                          v625 = *(_QWORD *)(*(_QWORD *)(v586 + 96) + 24);
                          goto LABEL_1986;
                        }
LABEL_1988:
                        WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v586, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, MEMORY[0x1E0CBF2F8]);
LABEL_2025:
                        v631 = *(_QWORD *)(v586 + 32);
                        if (v631)
                        {
                          if ((*(_WORD *)(v586 + 28) & 0x10) == 0)
                            goto LABEL_2041;
                          v632 = *(_QWORD *)(v586 + 96);
                          v633 = *(_QWORD *)(v632 + 24);
                          if (v633 != *(_QWORD *)(WebCore::HTMLNames::listingTag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::preTag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::xmpTag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
                            && v633 != *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24))
                          {
                            goto LABEL_2041;
                          }
                          if ((*(_WORD *)(v631 + 28) & 8) == 0)
                            goto LABEL_2041;
                          v634 = *(_QWORD *)(v631 + 96);
                          if (v632 != v634
                            && (v633 != *(_QWORD *)(v634 + 24) || *(_QWORD *)(v632 + 32) != *(_QWORD *)(v634 + 32)))
                          {
                            goto LABEL_2041;
                          }
                          hasEquivalentAttributes = WebCore::Element::hasEquivalentAttributes((WebCore::Element *)v586, (const WebCore::Element *)v631, (uint64_t)v598, v599, v600);
                          v631 = *(_QWORD *)(v586 + 32);
                          if (hasEquivalentAttributes)
                          {
                            v1099 = v584;
                            v665 = v611;
                            v666 = *(_WORD *)(v631 + 28);
                            *(_DWORD *)(v631 + 24) += 2;
                            v1192 = (WebCore::Node *)v631;
                            v1193 = 0;
                            if ((v666 & 1) != 0)
                              v667 = v1194 & 0xF0;
                            else
                              v667 = v1194 & 0xF0 | 3;
                            v1194 = v667;
                            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1192, (uint64_t)&v1201);
                            v1201.var1 = 1;
                            v668 = *(_WORD *)(v586 + 28);
                            *(_DWORD *)(v586 + 24) += 2;
                            v669 = v586;
                            v1189 = v586;
                            v1190 = 0;
                            if ((v668 & 1) != 0)
                              v670 = v1191 & 0xF0;
                            else
                              v670 = v1191 & 0xF0 | 3;
                            v1191 = v670;
                            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1189, (uint64_t)&v1166);
                            v1166.var1 = 1;
                            v672 = 0;
                            if (WebCore::operator==((uint64_t *)&v1201, (uint64_t *)&v1166))
                            {
                              v673 = *(_QWORD *)(v669 + 32);
                              v674 = *(_WORD *)(v673 + 28);
                              *(_DWORD *)(v673 + 24) += 2;
                              if ((v674 & 1) != 0)
                              {
                                v676 = *(_QWORD *)(v673 + 80);
                                if (v676)
                                  LODWORD(v676) = *(_DWORD *)(v676 + 4);
                                v1186 = (WebCore::Node *)v673;
                                v1187 = v676;
                                v675 = v1188 & 0xF0;
                              }
                              else
                              {
                                v1186 = (WebCore::Node *)v673;
                                v1187 = 0;
                                v675 = v1188 & 0xF0 | 4;
                              }
                              v1188 = v675;
                              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1186, (uint64_t)&v1200);
                              v1200.var1 = 1;
                              v677 = *(_WORD *)(v669 + 28);
                              *(_DWORD *)(v669 + 24) += 2;
                              if ((v677 & 1) != 0)
                              {
                                v679 = *(_QWORD *)(v669 + 80);
                                if (v679)
                                  LODWORD(v679) = *(_DWORD *)(v679 + 4);
                                v1183 = v669;
                                v1184 = v679;
                                v678 = v1185 & 0xF0;
                              }
                              else
                              {
                                v1183 = v669;
                                v1184 = 0;
                                v678 = v1185 & 0xF0 | 4;
                              }
                              v1185 = v678;
                              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1183, (uint64_t)&v1199);
                              v1199.var1 = 1;
                              v672 = WebCore::operator==((uint64_t *)&v1200, (uint64_t *)&v1199);
                              v680 = v1199.var0.var0.var0;
                              v1199.var0.var0.var0 = 0;
                              if (v680)
                              {
                                if (*((_DWORD *)v680 + 6) == 2)
                                {
                                  if ((*((_WORD *)v680 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v680, v671);
                                }
                                else
                                {
                                  *((_DWORD *)v680 + 6) -= 2;
                                }
                              }
                              v1183 = 0;
                              if (*(_DWORD *)(v669 + 24) == 2)
                              {
                                if ((*(_WORD *)(v669 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v669, v671);
                              }
                              else
                              {
                                *(_DWORD *)(v669 + 24) -= 2;
                              }
                              v681 = v1200.var0.var0.var0;
                              v1200.var0.var0.var0 = 0;
                              if (v681)
                              {
                                if (*((_DWORD *)v681 + 6) == 2)
                                {
                                  if ((*((_WORD *)v681 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v681, v671);
                                }
                                else
                                {
                                  *((_DWORD *)v681 + 6) -= 2;
                                }
                              }
                              if (v1186)
                              {
                                if (*((_DWORD *)v1186 + 6) == 2)
                                {
                                  if ((*((_WORD *)v1186 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v1186, v671);
                                }
                                else
                                {
                                  *((_DWORD *)v1186 + 6) -= 2;
                                }
                              }
                            }
                            v682 = v1166.var0.var0.var0;
                            v1166.var0.var0.var0 = 0;
                            if (v682)
                            {
                              if (*((_DWORD *)v682 + 6) == 2)
                              {
                                if ((*((_WORD *)v682 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v682, v671);
                              }
                              else
                              {
                                *((_DWORD *)v682 + 6) -= 2;
                              }
                            }
                            v1189 = 0;
                            if (*(_DWORD *)(v669 + 24) == 2)
                            {
                              if ((*(_WORD *)(v669 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v669, v671);
                            }
                            else
                            {
                              *(_DWORD *)(v669 + 24) -= 2;
                            }
                            v683 = v1201.var0.var0.var0;
                            v1201.var0.var0.var0 = 0;
                            if (v683)
                            {
                              if (*((_DWORD *)v683 + 6) == 2)
                              {
                                if ((*((_WORD *)v683 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v683, v671);
                              }
                              else
                              {
                                *((_DWORD *)v683 + 6) -= 2;
                              }
                            }
                            if (v1192)
                            {
                              if (*((_DWORD *)v1192 + 6) == 2)
                              {
                                if ((*((_WORD *)v1192 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v1192, v671);
                              }
                              else
                              {
                                *((_DWORD *)v1192 + 6) -= 2;
                              }
                            }
                            if (v672)
                            {
                              v586 = v669;
                              WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNodePreservingChildren((unsigned int *)&v1126, (WebCore::Node *)v669);
                              WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v669, 1);
                              v583 = v1085;
                              v611 = v665;
                              v584 = v1099;
                              goto LABEL_2062;
                            }
                            v586 = v669;
                            v631 = *(_QWORD *)(v669 + 32);
                            v583 = v1085;
                            v611 = v665;
                            v584 = v1099;
                          }
                          if (v631)
                          {
LABEL_2041:
                            if (WebCore::Node::computeEditability(v631, 0, 1) == 2)
                              WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v586, (const WebCore::QualifiedName *)&WebCore::HTMLNames::contenteditableAttr, MEMORY[0x1E0CBF2F8]);
                          }
                        }
                        if (!WebCore::isLegacyAppleStyleSpan(v586, (const WebCore::Node *)v631, v598))
                          goto LABEL_2062;
                        if (*(_QWORD *)(v586 + 80))
                        {
                          v635 = *(_QWORD *)(v586 + 64) & 0xFFFFFFFFFFFFLL;
                          if (v635)
                          {
                            if ((*(_BYTE *)((*(_QWORD *)(v586 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0)
                              goto LABEL_2055;
                            v1103 = (WebCore::VisiblePosition *)v611;
                            v636 = v594;
                            v637 = (WebCore::StyledElement *)v586;
                            v638 = v593;
                            v639 = v589;
                            v640 = v637;
                            v641 = WebCore::StyledElement::cssomStyle(v637, (WTF::StringImpl *)v123);
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v1166.var0.var0.var0 = v1201.var0.var0.var0;
                            (*(void (**)(VisiblePosition *__return_ptr, _QWORD *, uint64_t, VisiblePosition *, _QWORD))(*v641 + 152))(&v1198, v641, 7, &v1166, 0);
                            if (v1198.var1)
                            {
                              v642 = *(WTF::StringImpl **)&v1198.var0.var1;
                              *(_QWORD *)&v1198.var0.var1 = 0;
                              if (v642)
                              {
                                if (*(_DWORD *)v642 == 2)
                                  WTF::StringImpl::destroy(v642, (WTF::StringImpl *)v123);
                                else
                                  *(_DWORD *)v642 -= 2;
                              }
                            }
                            v643 = v1166.var0.var0.var0;
                            v1166.var0.var0.var0 = 0;
                            v589 = v639;
                            v593 = v638;
                            v586 = (uint64_t)v640;
                            v594 = v636;
                            v611 = (uint64_t)v1103;
                            if (v643)
                            {
                              if (*(_DWORD *)v643 == 2)
                                WTF::StringImpl::destroy((WTF::StringImpl *)v643, (WTF::StringImpl *)v123);
                              else
                                *(_DWORD *)v643 -= 2;
                            }
                            v635 = *(_QWORD *)(v586 + 64) & 0xFFFFFFFFFFFFLL;
                            if (v635)
                            {
LABEL_2055:
                              if ((*(_BYTE *)(v635 + 45) & 2) != 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195B19F80);
                              }
                              if ((*(_BYTE *)(v635 + 99) & 0xE) != 0)
                              {
                                v644 = WebCore::StyledElement::cssomStyle((WebCore::StyledElement *)v586, (WTF::StringImpl *)v123);
                                (*(void (**)(WebCore::Node **__return_ptr, _QWORD *, uint64_t, uint64_t *, _QWORD))(*v644 + 152))(&v1195, v644, 123, &WebCore::noneAtomData, 0);
                                if (v1197)
                                {
                                  v645 = v1196;
                                  v1196 = 0;
                                  if (v645)
                                  {
                                    if (*(_DWORD *)v645 == 2)
                                      WTF::StringImpl::destroy(v645, (WTF::StringImpl *)v123);
                                    else
                                      *(_DWORD *)v645 -= 2;
                                  }
                                }
                              }
                            }
                          }
LABEL_2062:
                          if (*(_DWORD *)v595 == 1)
                          {
                            WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v595, (WTF::StringImpl *)v123);
                            WTF::fastFree(v646, v647);
                          }
                          else
                          {
                            --*(_DWORD *)v595;
                          }
                          v61 = v1109;
                          if ((v594 & 1) == 0)
                          {
                            if (*(_DWORD *)v593 == 1)
                            {
                              v648 = v586;
                              v649 = v593;
                              v650 = v589;
                              v651 = *((unsigned int *)v649 + 1);
                              if ((v651 & 8) != 0)
                              {
                                v652 = v649;
                                v653 = *((unsigned int *)v649 + 7);
                                if ((_DWORD)v653)
                                {
                                  v654 = 16 * v653;
                                  v655 = (_DWORD **)(*((_QWORD *)v649 + 2) + 8);
                                  do
                                  {
                                    v656 = *v655;
                                    *v655 = 0;
                                    if (v656)
                                    {
                                      if (*v656 == 2)
                                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v656, (WTF::StringImpl *)v123);
                                      else
                                        *v656 -= 2;
                                    }
                                    v655 += 2;
                                    v654 -= 16;
                                  }
                                  while (v654);
                                }
                                v657 = (WTF *)*((_QWORD *)v652 + 2);
                                if ((const WebCore::StyleProperties *)((char *)v652 + 32) != v657 && v657 != 0)
                                {
                                  *((_QWORD *)v652 + 2) = 0;
                                  *((_DWORD *)v652 + 6) = 0;
                                  WTF::fastFree(v657, v123);
                                }
                                v659 = *((_QWORD *)v652 + 1);
                                *((_QWORD *)v652 + 1) = 0;
                                v583 = v1085;
                                v589 = v650;
                                if (v659)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v659 + 8))(v659);
                                WTF::fastFree(v652, v123);
                              }
                              else
                              {
                                v660 = (unsigned int *)v649;
                                if (v651 >= 0x10)
                                {
                                  v661 = 0;
                                  v662 = (unsigned int *)((char *)v649 + ((v651 >> 3) & 0x1FFFFFFE) + 8);
                                  do
                                  {
                                    v663 = (_DWORD *)(*v662 | ((unint64_t)*((unsigned __int8 *)v662 + 4) << 32));
                                    if (*v663 == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v663, (WTF::StringImpl *)v123);
                                    else
                                      *v663 -= 2;
                                    ++v661;
                                    v662 = (unsigned int *)((char *)v662 + 5);
                                  }
                                  while (v661 < (unint64_t)v660[1] >> 4);
                                }
                                WTF::fastFree((WTF *)v660, v123);
                                v61 = v1109;
                                v583 = v1085;
                                v589 = v650;
                              }
                              v586 = v648;
                            }
                            else
                            {
                              --*(_DWORD *)v593;
                            }
                          }
                          if (*(_DWORD *)(v586 + 24) == 2)
                          {
                            if ((*(_WORD *)(v586 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v586, v123);
                          }
                          else
                          {
                            *(_DWORD *)(v586 + 24) -= 2;
                          }
LABEL_2069:
                          if ((v589 & 1) == 0)
                            *((_DWORD *)v584 + 6) += 2;
                          if (v611)
                          {
                            if (*(_DWORD *)(v611 + 24) == 2)
                            {
                              if ((*(_WORD *)(v611 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v611, v123);
                            }
                            else
                            {
                              *(_DWORD *)(v611 + 24) -= 2;
                            }
                          }
                          v585 = v584;
                          if (!v584)
                            goto LABEL_2179;
                          continue;
                        }
                      }
                    }
                    else
                    {
LABEL_1986:
                      if (v625 != *(_QWORD *)(WebCore::HTMLNames::fontTag + 24)
                        || !WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)v586, 0, v598, v599, v600))
                      {
                        goto LABEL_1988;
                      }
                    }
                    WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNodePreservingChildren((unsigned int *)&v1126, (WebCore::Node *)v586);
                    WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v586, 1);
                    goto LABEL_2062;
                  }
                }
                else
                {
                  WebCore::EditingStyle::removeStyleFromRulesAndContext((WebCore::EditingStyle *)v595, v608, 0);
                  v583 = v1085;
                  v593 = v1086;
                  v589 = v1087;
                  v594 = v614;
                  v611 = (uint64_t)v1102;
                  if ((v594 & 1) != 0)
                    goto LABEL_1981;
                }
LABEL_2015:
                v626 = *(WebCore::StyleProperties **)(v595 + 8);
                if (!v626 || !*((_DWORD *)v626 + 7))
                {
                  v600.n128_u32[0] = *(_DWORD *)(v595 + 20);
                  if (v600.n128_f32[0] == *(float *)&WebCore::EditingStyle::NoFontDelta
                    && (*(_BYTE *)(v595 + 16) & 0x1E) == 0)
                  {
                    goto LABEL_1981;
                  }
                }
                v627 = *((_DWORD *)v593 + 1);
                if ((v627 & 8) != 0)
                  v628 = *((_DWORD *)v593 + 7);
                else
                  v628 = v627 >> 4;
                if (*((_DWORD *)v626 + 7) != v628)
                {
                  WebCore::StyleProperties::asTextAtom(v626, (unsigned __int8 *)v597, v599, (WTF::AtomString *)&v1201, v600);
                  WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v586, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v1201);
                  v630 = v1201.var0.var0.var0;
                  v1201.var0.var0.var0 = 0;
                  if (v630)
                  {
                    if (*(_DWORD *)v630 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v630, v629);
                    else
                      *(_DWORD *)v630 -= 2;
                  }
                }
                goto LABEL_2025;
              }
            }
            else
            {
LABEL_1921:
              v607 = (WebCore::VisiblePosition *)v586;
              v608 = (WebCore::StyledElement *)v586;
              if (!WebCore::EditingStyle::extractConflictingImplicitStyleOfAttributes((WebCore *)v595, v586, 0, 0, (uint64_t)&v1201, 1))goto LABEL_1949;
              v609 = (WTF *)v1201.var0.var0.var0;
              if (*((_DWORD *)&v1201.var0 + 3))
              {
                v610 = 8 * *((unsigned int *)&v1201.var0 + 3);
                do
                {
                  WebCore::CompositeEditCommand::setNodeAttribute(this, v591, v609, v602);
                  v609 = (WTF *)((char *)v609 + 8);
                  v610 -= 8;
                }
                while (v610);
                v607 = (WebCore::VisiblePosition *)v586;
                v608 = v591;
                goto LABEL_1949;
              }
              v608 = (WebCore::StyledElement *)v586;
              v1102 = (WebCore::VisiblePosition *)v586;
            }
            v584 = v1098;
            v614 = v1095;
            goto LABEL_1958;
          }
          v611 = v586;
          if ((v594 & 1) != 0)
            goto LABEL_1981;
          goto LABEL_2015;
        }
      }
      if (*((_DWORD *)v585 + 6) == 2)
      {
        if ((*((_WORD *)v585 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v585, v123);
          v587 = *(_WORD *)(v586 + 28);
        }
      }
      else
      {
        *((_DWORD *)v585 + 6) -= 2;
      }
      goto LABEL_1902;
    }
    break;
  }
  if (*(_DWORD *)(v583 + 24) == 2)
  {
    if ((*(_WORD *)(v583 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v583, v123);
  }
  else
  {
    *(_DWORD *)(v583 + 24) -= 2;
  }
  if (v585)
  {
    if (*((_DWORD *)v585 + 6) == 2)
    {
      if ((*((_WORD *)v585 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v585, v123);
    }
    else
    {
      *((_DWORD *)v585 + 6) -= 2;
    }
  }
LABEL_2179:
  v684 = v1091;
  if ((v1084 & 1) == 0)
  {
    if (*(_DWORD *)(v583 + 24) == 2)
    {
      if ((*(_WORD *)(v583 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v583, v123);
    }
    else
    {
      *(_DWORD *)(v583 + 24) -= 2;
    }
  }
  v685 = v1126;
  if (!v1126)
    goto LABEL_2981;
  if (*((_BYTE *)this + 466))
  {
    v686 = *((_QWORD *)this + 2);
    *(_DWORD *)(v686 + 24) += 2;
    v1166.var0.var0.var0 = (Node *)v686;
    v687 = v1127;
    if (v1127)
    {
      do
      {
        v688 = v687;
        if ((*((_WORD *)v687 + 14) & 4) == 0)
          break;
        v687 = (WebCore::Node *)*((_QWORD *)v687 + 11);
      }
      while (v687);
    }
    else
    {
      v688 = 0;
    }
    if ((*((_WORD *)v688 + 14) & 4) == 0 || (v689 = *((_QWORD *)v688 + 10)) == 0)
    {
      while (1)
      {
        v689 = *((_QWORD *)v688 + 7);
        if (v689)
          break;
        v688 = (WebCore::Node *)*((_QWORD *)v688 + 4);
        if (!v688)
        {
          v689 = 0;
          break;
        }
      }
    }
    v690 = WTF::fastMalloc((WTF *)0x128);
    v691 = WebCore::EditCommand::EditCommand(v690, (uint64_t *)&v1166, 59);
    *(_OWORD *)(v691 + 248) = 0u;
    *(_OWORD *)(v691 + 264) = 0u;
    *(_QWORD *)v691 = off_1E33ADB98;
    *((_DWORD *)v685 + 6) += 2;
    *(_QWORD *)(v691 + 280) = v685;
    if (v689)
      *(_DWORD *)(v689 + 24) += 2;
    *(_QWORD *)(v691 + 288) = v689;
    v1201.var0.var0.var0 = (Node *)v691;
    WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v1201);
    v692 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v692)
    {
      if (*((_DWORD *)v692 + 2) == 1)
        (*(void (**)(Node *))(*(_QWORD *)v692 + 8))(v692);
      else
        --*((_DWORD *)v692 + 2);
    }
    v693 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    if (v693)
    {
      if (*((_DWORD *)v693 + 6) == 2)
      {
        if ((*((_WORD *)v693 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v693, v123);
      }
      else
      {
        *((_DWORD *)v693 + 6) -= 2;
      }
    }
  }
  *((_DWORD *)v685 + 6) += 2;
  WebCore::firstPositionInOrBeforeNode((uint64_t)v685, (WebCore::Node *)v123, (uint64_t)&v1201);
  v696 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  v697 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = v696;
  if (!v697)
    goto LABEL_2205;
  if (*(_DWORD *)(v697 + 24) != 2)
  {
    *(_DWORD *)(v697 + 24) -= 2;
    goto LABEL_2205;
  }
  if ((*(_WORD *)(v697 + 30) & 0x400) != 0)
  {
LABEL_2205:
    v698 = (char *)this + 392;
    *((_DWORD *)this + 98) = v1201.var0.var1;
    *((_BYTE *)this + 396) = *((_BYTE *)&v1201.var0 + 12);
    v1201.var0.var0.var0 = 0;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v697, v694);
    v716 = v1201.var0.var0.var0;
    v698 = (char *)this + 392;
    *((_DWORD *)this + 98) = v1201.var0.var1;
    *((_BYTE *)this + 396) = *((_BYTE *)&v1201.var0 + 12);
    v1201.var0.var0.var0 = 0;
    if (v716)
    {
      if (*((_DWORD *)v716 + 6) == 2)
      {
        if ((*((_WORD *)v716 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v716, v694);
      }
      else
      {
        *((_DWORD *)v716 + 6) -= 2;
      }
    }
  }
  if (*((_DWORD *)v685 + 6) == 2)
  {
    if ((*((_WORD *)v685 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v685, v694);
  }
  else
  {
    *((_DWORD *)v685 + 6) -= 2;
  }
  v699 = v1127;
  if (!v1127)
  {
    v701 = 0;
    goto LABEL_2216;
  }
  v700 = v1127;
  do
  {
    v701 = v700;
    if ((*((_WORD *)v700 + 14) & 4) == 0)
      break;
    v700 = (WebCore::Node *)*((_QWORD *)v700 + 11);
  }
  while (v700);
  *((_DWORD *)v701 + 6) += 2;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v701 + 208))(v701) & 1) != 0)
  {
    v702 = *((_WORD *)v701 + 14);
    *((_DWORD *)v701 + 6) += 2;
    if ((v702 & 1) == 0)
    {
      v703 = 0;
      v704 = 4;
      goto LABEL_2219;
    }
    v705 = *((_QWORD *)v701 + 10);
    if (v705)
    {
      v704 = 0;
      v703 = *(_DWORD *)(v705 + 4);
      goto LABEL_2219;
    }
LABEL_2216:
    v704 = 0;
    v703 = 0;
    goto LABEL_2219;
  }
  v703 = 0;
  *((_DWORD *)v701 + 6) += 2;
  v704 = 2;
LABEL_2219:
  v706 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = v701;
  if (v706)
  {
    if (*(_DWORD *)(v706 + 24) == 2)
    {
      if ((*(_WORD *)(v706 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v706, v694);
    }
    else
    {
      *(_DWORD *)(v706 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 102) = v703;
  *((_BYTE *)this + 412) = v704;
  v707 = v1114;
  if (v699)
  {
    if (*((_DWORD *)v701 + 6) == 2)
    {
      if ((*((_WORD *)v701 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v701, v694);
    }
    else
    {
      *((_DWORD *)v701 + 6) -= 2;
    }
  }
  WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1166, (uint64_t)this, v695);
  WebCore::VisiblePosition::next((unsigned __int8 *)&v1166, 1, 0, (uint64_t)&v1200);
  v710 = v1200.var0.var0.var0;
  if (v1200.var0.var0.var0)
  {
    if (v1107)
    {
      LOBYTE(v711) = 0;
      v1200.var0.var0.var0 = 0;
      goto LABEL_2269;
    }
    v712 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v1166.var0.var0.var0)
      v712 = 0;
    if (v712)
    {
      WebCore::endOfParagraph((WebCore::Node *)&v1166, 1, &v1201);
      v711 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
      v713 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v713)
      {
        if (*((_DWORD *)v713 + 6) == 2)
        {
          if ((*((_WORD *)v713 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v713, v708);
        }
        else
        {
          *((_DWORD *)v713 + 6) -= 2;
        }
      }
      if (v711)
      {
        v714 = v1166.var0.var0.var0;
        if (v1166.var0.var0.var0)
        {
          v715 = *((_DWORD *)v1166.var0.var0.var0 + 6);
          *((_DWORD *)v1166.var0.var0.var0 + 6) = v715 + 2;
          if ((*((_WORD *)v714 + 14) & 0x10) != 0
            && *(_QWORD *)(*((_QWORD *)v714 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
          {
            LOBYTE(v711) = 0;
          }
          else
          {
            LOBYTE(v711) = WebCore::ReplaceSelectionCommand::shouldMerge((WebCore::ReplaceSelectionCommand *)&v1166, &v1200, v709);
            v715 = *((_DWORD *)v714 + 6) - 2;
          }
          if (v715)
          {
            *((_DWORD *)v714 + 6) = v715;
          }
          else if ((*((_WORD *)v714 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v714, v708);
          }
        }
        else
        {
          LOBYTE(v711) = WebCore::ReplaceSelectionCommand::shouldMerge((WebCore::ReplaceSelectionCommand *)&v1166, &v1200, v709);
        }
      }
      v707 = v1114;
    }
    else
    {
      LOBYTE(v711) = 0;
    }
    v710 = v1200.var0.var0.var0;
    v1200.var0.var0.var0 = 0;
    if (v710)
    {
LABEL_2269:
      if (*((_DWORD *)v710 + 6) == 2)
      {
        if ((*((_WORD *)v710 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v710, v708);
        v707 = v1114;
      }
      else
      {
        *((_DWORD *)v710 + 6) -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v711) = 0;
  }
  v717 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v717)
  {
    if (*((_DWORD *)v717 + 6) == 2)
    {
      if ((*((_WORD *)v717 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v717, v708);
    }
    else
    {
      *((_DWORD *)v717 + 6) -= 2;
    }
  }
  v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
  v1100 = (unsigned int *)((char *)this + 408);
  v1104 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
  *((_BYTE *)this + 467) = v711;
  if (!*((_BYTE *)this + 465))
  {
    v719 = *((unsigned __int8 *)v707 + 8);
    WebCore::VisiblePosition::canonicalPosition((WebCore::ReplaceSelectionCommand *)((char *)this + 384), (uint64_t)&v1166);
    v1166.var1 = 1;
    WebCore::VisiblePosition::previous((WebCore::Node **)&v1166, 1, 0, (uint64_t)&v1200);
    v721 = v1200.var0.var0.var0;
    if (v1200.var0.var0.var0)
    {
      v722 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (!v1166.var0.var0.var0)
        v722 = 0;
      if (!v722)
        goto LABEL_3564;
      WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
      v723 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
      v724 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v724)
      {
        if (*((_DWORD *)v724 + 6) == 2)
        {
          if ((*((_WORD *)v724 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v724, v720);
        }
        else
        {
          *((_DWORD *)v724 + 6) -= 2;
        }
      }
      if (v1106 && v723)
      {
        *((_DWORD *)v721 + 6) += 2;
        WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1199, (uint64_t)this, (const WebCore::QualifiedName *)v709);
        *((_DWORD *)v721 + 6) += 2;
        v1201.var0.var0.var0 = v721;
        v1201.var0.var1 = v1200.var0.var1;
        *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
        v725 = v1199.var0.var0.var0;
        if (v1199.var0.var0.var0)
          *((_DWORD *)v1199.var0.var0.var0 + 6) += 2;
        v1198.var0.var0.var0 = v725;
        v1198.var0.var1 = v1199.var0.var1;
        *((_BYTE *)&v1198.var0 + 12) = *((_BYTE *)&v1199.var0 + 12);
        WebCore::enclosingNodeOfType((uint64_t)&v1198, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 0, (uint64_t *)&v1195);
        v726 = v1195;
        if (v1195)
          v727 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v727 = 0;
        v1195 = 0;
        if (v726)
        {
          if (*((_DWORD *)v726 + 6) == 2)
          {
            if ((*((_WORD *)v726 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v726, v720);
          }
          else
          {
            *((_DWORD *)v726 + 6) -= 2;
          }
        }
        if (v727)
        {
          LODWORD(v727) = WebCore::numEnclosingMailBlockquotes((WebCore *)&v1201, (const WebCore::Position *)v720);
          LOBYTE(v727) = (_DWORD)v727 == WebCore::numEnclosingMailBlockquotes((WebCore *)&v1198, v728);
        }
        v729 = v1198.var0.var0.var0;
        v1198.var0.var0.var0 = 0;
        if (v729)
        {
          if (*((_DWORD *)v729 + 6) == 2)
          {
            if ((*((_WORD *)v729 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v729, v720);
          }
          else
          {
            *((_DWORD *)v729 + 6) -= 2;
          }
        }
        v730 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v730)
        {
          if (*((_DWORD *)v730 + 6) == 2)
          {
            if ((*((_WORD *)v730 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v730, v720);
          }
          else
          {
            *((_DWORD *)v730 + 6) -= 2;
          }
        }
        if (v725)
        {
          if (*((_DWORD *)v725 + 6) == 2)
          {
            if ((*((_WORD *)v725 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v725, v720);
          }
          else
          {
            *((_DWORD *)v725 + 6) -= 2;
          }
        }
        if (*((_DWORD *)v721 + 6) != 2)
        {
          *((_DWORD *)v721 + 6) -= 2;
          goto LABEL_2304;
        }
        if ((*((_WORD *)v721 + 15) & 0x400) != 0)
        {
LABEL_2304:
          if ((v727 & 1) == 0)
            goto LABEL_2338;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v721, v720);
          if ((v727 & 1) == 0)
            goto LABEL_2338;
        }
        shouldMerge = 1;
      }
      else
      {
LABEL_3564:
      {
LABEL_2338:
        v732 = v1105;
        if (v719)
          v732 = 1;
      }
        if ((v732 & 1) != 0)
          goto LABEL_2352;
        v733 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (!v1166.var0.var0.var0)
          v733 = 0;
        if (!v733)
        {
LABEL_2352:
          shouldMerge = 0;
        }
        else
        {
          WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
          shouldMerge = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
          v734 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v734)
          {
            if (*((_DWORD *)v734 + 6) == 2)
            {
              if ((*((_WORD *)v734 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v734, v720);
            }
            else
            {
              *((_DWORD *)v734 + 6) -= 2;
            }
          }
          if (shouldMerge)
          {
            v735 = v1166.var0.var0.var0;
            if (v1166.var0.var0.var0)
            {
              v736 = *((_DWORD *)v1166.var0.var0.var0 + 6);
              *((_DWORD *)v1166.var0.var0.var0 + 6) = v736 + 2;
              if ((*((_WORD *)v735 + 14) & 0x10) != 0
                && *(_QWORD *)(*((_QWORD *)v735 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
              {
                shouldMerge = 0;
              }
              else
              {
                shouldMerge = WebCore::ReplaceSelectionCommand::shouldMerge((WebCore::ReplaceSelectionCommand *)&v1166, &v1200, v709);
                v736 = *((_DWORD *)v735 + 6) - 2;
              }
              if (v736)
              {
                *((_DWORD *)v735 + 6) = v736;
              }
              else if ((*((_WORD *)v735 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v735, v720);
              }
            }
            else
            {
              shouldMerge = WebCore::ReplaceSelectionCommand::shouldMerge((WebCore::ReplaceSelectionCommand *)&v1166, &v1200, v709);
            }
          }
        }
      }
      if (*((_DWORD *)v721 + 6) == 2)
      {
        if ((*((_WORD *)v721 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v721, v720);
      }
      else
      {
        *((_DWORD *)v721 + 6) -= 2;
      }
      v684 = v1091;
    }
    else
    {
      shouldMerge = 0;
    }
    v737 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    v707 = v1114;
    v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
    if (v737)
    {
      if (*((_DWORD *)v737 + 6) == 2)
      {
        if ((*((_WORD *)v737 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v737, v720);
      }
      else
      {
        *((_DWORD *)v737 + 6) -= 2;
      }
    }
    if (shouldMerge)
    {
      WebCore::VisiblePosition::canonicalPosition(v1104, (uint64_t)&v1166);
      v1166.var1 = 1;
      WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v1166, (uint64_t)&v1199);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)&v1199))
      {
        v740 = 0;
        memset(&v1200, 0, sizeof(v1200));
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1199, (uint64_t)&v1201);
        v740 = v1201.var0.var0.var0;
        v1200.var0.var0.var0 = v1201.var0.var0.var0;
        v1200.var0.var1 = v1201.var0.var1;
        *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
      }
      v1200.var1 = 1;
      v741 = v1199.var0.var0.var0;
      v1199.var0.var0.var0 = 0;
      if (v741)
      {
        if (*((_DWORD *)v741 + 6) == 2)
        {
          if ((*((_WORD *)v741 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v741, v738);
            v740 = v1200.var0.var0.var0;
          }
        }
        else
        {
          *((_DWORD *)v741 + 6) -= 2;
        }
      }
      if (v740)
      {
        v742 = *((_DWORD *)v740 + 6);
        *((_DWORD *)v740 + 6) = v742 + 4;
        v743 = v742 + 2;
        if (v743)
        {
          *((_DWORD *)v740 + 6) = v743;
        }
        else if ((*((_WORD *)v740 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v740, v738);
        }
      }
      if (*((_BYTE *)this + 467))
      {
        WebCore::enclosingInline((unsigned int *)&v1201, (WebCore::Node *)v740);
        v745 = v1201.var0.var0.var0;
        if (v740 == v1201.var0.var0.var0)
        {
          v746 = 0;
          v745 = v740;
        }
        else
        {
          WebCore::enclosingInline((unsigned int *)&v1199, (WebCore::Node *)v740);
          v746 = *((_QWORD *)v1199.var0.var0.var0 + 7) != 0;
          if (*((_DWORD *)v1199.var0.var0.var0 + 6) == 2)
          {
            if ((*((_WORD *)v1199.var0.var0.var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1199.var0.var0.var0, v744);
          }
          else
          {
            *((_DWORD *)v1199.var0.var0.var0 + 6) -= 2;
          }
        }
        if (v745)
        {
          if (*((_DWORD *)v745 + 6) == 2)
          {
            if ((*((_WORD *)v745 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v745, v744);
          }
          else
          {
            *((_DWORD *)v745 + 6) -= 2;
          }
        }
        if (v746)
        {
          v747 = *((_QWORD *)this + 2);
          *(_DWORD *)(v747 + 24) += 2;
          v748 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v748 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v748 + 24) = 0x101C00000002;
          *(_QWORD *)(v748 + 32) = 0;
          *(_QWORD *)(v748 + 40) = v747 + 96;
          *(_OWORD *)(v748 + 48) = 0u;
          *(_OWORD *)(v748 + 64) = 0u;
          ++*(_DWORD *)(v747 + 3324);
          *(_QWORD *)(v748 + 80) = 0;
          *(_QWORD *)(v748 + 88) = 0;
          v749 = WebCore::HTMLNames::brTag;
          if (WebCore::HTMLNames::brTag)
            ++*(_DWORD *)WebCore::HTMLNames::brTag;
          *(_QWORD *)(v748 + 96) = v749;
          *(_QWORD *)(v748 + 104) = 0;
          *(_QWORD *)v748 = off_1E33B4C28;
          v1201.var0.var0.var0 = (Node *)v748;
          WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v1201, v318, 1);
          v751 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v751)
          {
            if (*((_DWORD *)v751 + 6) == 2)
            {
              if ((*((_WORD *)v751 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v751, v750);
            }
            else
            {
              *((_DWORD *)v751 + 6) -= 2;
            }
          }
          if (*(_DWORD *)(v747 + 24) == 2)
          {
            if ((*(_WORD *)(v747 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v747, v750);
          }
          else
          {
            *(_DWORD *)(v747 + 24) -= 2;
          }
        }
      }
      WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1199, (uint64_t)this, v739);
      WebCore::startOfParagraph((uint64_t)&v1199, 1, &v1201);
      v753 = WebCore::operator==((uint64_t *)&v1201, (uint64_t *)&v1166);
      v754 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v754)
      {
        if (*((_DWORD *)v754 + 6) == 2)
        {
          if ((*((_WORD *)v754 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v754, v752);
        }
        else
        {
          *((_DWORD *)v754 + 6) -= 2;
        }
      }
      if (v753)
      {
        v755 = *((_QWORD *)this + 2);
        *(_DWORD *)(v755 + 24) += 2;
        v756 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v756 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v756 + 24) = 0x101C00000002;
        *(_QWORD *)(v756 + 32) = 0;
        *(_QWORD *)(v756 + 40) = v755 + 96;
        *(_OWORD *)(v756 + 48) = 0u;
        *(_OWORD *)(v756 + 64) = 0u;
        ++*(_DWORD *)(v755 + 3324);
        *(_QWORD *)(v756 + 80) = 0;
        *(_QWORD *)(v756 + 88) = 0;
        v757 = WebCore::HTMLNames::brTag;
        if (WebCore::HTMLNames::brTag)
          ++*(_DWORD *)WebCore::HTMLNames::brTag;
        *(_QWORD *)(v756 + 96) = v757;
        *(_QWORD *)(v756 + 104) = 0;
        *(_QWORD *)v756 = off_1E33B4C28;
        v1198.var0.var0.var0 = (Node *)v756;
        v758 = v1199.var0.var0.var0;
        if (v1199.var0.var0.var0)
          *((_DWORD *)v1199.var0.var0.var0 + 6) += 2;
        v1201.var0.var0.var0 = v758;
        v1201.var0.var1 = v1199.var0.var1;
        *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1199.var0 + 12);
        WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v1198, (WebCore::Position *)&v1201);
        v759 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v759)
        {
          if (*((_DWORD *)v759 + 6) == 2)
          {
            if ((*((_WORD *)v759 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v759, v123);
          }
          else
          {
            *((_DWORD *)v759 + 6) -= 2;
          }
        }
        v760 = v1198.var0.var0.var0;
        v1198.var0.var0.var0 = 0;
        if (v760)
        {
          if (*((_DWORD *)v760 + 6) == 2)
          {
            if ((*((_WORD *)v760 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v760, v123);
          }
          else
          {
            *((_DWORD *)v760 + 6) -= 2;
          }
        }
        if (*(_DWORD *)(v755 + 24) == 2)
        {
          if ((*(_WORD *)(v755 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v755, v123);
        }
        else
        {
          *(_DWORD *)(v755 + 24) -= 2;
        }
        v761 = v1166.var0.var0.var0;
        if (v1166.var0.var0.var0)
        {
          v762 = *((_DWORD *)v1166.var0.var0.var0 + 6) + 2;
          *((_DWORD *)v1166.var0.var0.var0 + 6) = v762;
        }
        else
        {
          v762 = MEMORY[0x18];
        }
        v763 = *((_QWORD *)v761 + 2);
        v764 = v762 - 2;
        if (v764)
        {
          *((_DWORD *)v761 + 6) = v764;
        }
        else if ((*((_WORD *)v761 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v761, v123);
        }
        if ((v763 & 0x8000000000000) == 0)
        {
          v765 = v1199.var0.var0.var0;
          v1199.var0.var0.var0 = 0;
          if (v765)
          {
            if (*((_DWORD *)v765 + 6) == 2)
            {
              if ((*((_WORD *)v765 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v765, v123);
            }
            else
            {
              *((_DWORD *)v765 + 6) -= 2;
            }
          }
          if (v740)
          {
            if (*((_DWORD *)v740 + 6) == 2)
            {
              if ((*((_WORD *)v740 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v740, v123);
            }
            else
            {
              *((_DWORD *)v740 + 6) -= 2;
            }
          }
          v766 = v1200.var0.var0.var0;
          v1200.var0.var0.var0 = 0;
          if (v766)
          {
            if (*((_DWORD *)v766 + 6) == 2)
            {
              if ((*((_WORD *)v766 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v766, v123);
            }
            else
            {
              *((_DWORD *)v766 + 6) -= 2;
            }
          }
          v767 = v1166.var0.var0.var0;
          v1166.var0.var0.var0 = 0;
          if (v767)
          {
            if (*((_DWORD *)v767 + 6) == 2)
            {
              if ((*((_WORD *)v767 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v767, v123);
            }
            else
            {
              *((_DWORD *)v767 + 6) -= 2;
            }
          }
          v61 = v1109;
          goto LABEL_2981;
        }
      }
      WebCore::endOfParagraph((WebCore::Node *)&v1166, 1, &v1201);
      WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)this, &v1166, &v1201, &v1200, 0, 1);
      v769 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v769)
      {
        if (*((_DWORD *)v769 + 6) == 2)
        {
          if ((*((_WORD *)v769 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v769, v768);
        }
        else
        {
          *((_DWORD *)v769 + 6) -= 2;
        }
      }
      if (*((_BYTE *)this + 225) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1198);
        v1198.var1 = 1;
        goto LABEL_2424;
      }
      v770 = *v1118;
      WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1198);
      v1198.var1 = 1;
      if (v770)
      {
LABEL_2424:
        v772 = v1198.var0.var0.var0;
        if (v1198.var0.var0.var0)
          *((_DWORD *)v1198.var0.var0.var0 + 6) += 2;
      }
      else
      {
        v772 = v1198.var0.var0.var0;
        if (v1198.var0.var0.var0)
        {
          *((_DWORD *)v1198.var0.var0.var0 + 6) += 2;
          v1201.var0.var0.var0 = v772;
          v1201.var0.var1 = v1198.var0.var1;
          *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1198.var0 + 12);
          v1201.var1 = 0;
          if (!WebCore::inSameLine((WebCore *)&v1198, (const WebCore::VisiblePosition *)&v1201, v771))
            v1198.var1 = 0;
          v1052 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v1052)
          {
            if (*((_DWORD *)v1052 + 6) == 2)
            {
              if ((*((_WORD *)v1052 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v1052, v1051);
            }
            else
            {
              *((_DWORD *)v1052 + 6) -= 2;
            }
          }
          goto LABEL_2424;
        }
      }
      v1195 = (WebCore::Node *)v772;
      LODWORD(v1196) = v1198.var0.var1;
      BYTE4(v1196) = *((_BYTE *)&v1198.var0 + 12);
      WebCore::Position::downstream((uint64_t)&v1195, (WebCore::Node *)1, (uint64_t)&v1201);
      v774 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      v775 = *(_QWORD *)v1104;
      *(_QWORD *)v1104 = v774;
      if (!v775)
        goto LABEL_2429;
      if (*(_DWORD *)(v775 + 24) != 2)
      {
        *(_DWORD *)(v775 + 24) -= 2;
        goto LABEL_2429;
      }
      if ((*(_WORD *)(v775 + 30) & 0x400) != 0)
      {
LABEL_2429:
        *(_DWORD *)v698 = v1201.var0.var1;
        v698[4] = *((_BYTE *)&v1201.var0 + 12);
        v1201.var0.var0.var0 = 0;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v775, v773);
        v1037 = v1201.var0.var0.var0;
        *(_DWORD *)v698 = v1201.var0.var1;
        v698[4] = *((_BYTE *)&v1201.var0 + 12);
        v1201.var0.var0.var0 = 0;
        if (v1037)
        {
          if (*((_DWORD *)v1037 + 6) == 2)
          {
            if ((*((_WORD *)v1037 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1037, v773);
          }
          else
          {
            *((_DWORD *)v1037 + 6) -= 2;
          }
        }
      }
      v776 = v1195;
      v1195 = 0;
      if (v776)
      {
        if (*((_DWORD *)v776 + 6) == 2)
        {
          if ((*((_WORD *)v776 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v776, v773);
        }
        else
        {
          *((_DWORD *)v776 + 6) -= 2;
        }
      }
      v777 = v1198.var0.var0.var0;
      v1198.var0.var0.var0 = 0;
      if (v777)
      {
        if (*((_DWORD *)v777 + 6) == 2)
        {
          if ((*((_WORD *)v777 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v777, v773);
        }
        else
        {
          *((_DWORD *)v777 + 6) -= 2;
        }
      }
      v778 = *((_QWORD *)this + 50);
      if (v778 && (*(_BYTE *)(v778 + 22) & 8) == 0)
      {
        if (*((_BYTE *)this + 225) == 2)
        {
          WebCore::VisiblePosition::canonicalPosition(v1093, (uint64_t)&v1198);
          v1198.var1 = 1;
        }
        else
        {
          v779 = *v1118;
          WebCore::VisiblePosition::canonicalPosition(v1093, (uint64_t)&v1198);
          v1198.var1 = 1;
          if (v779)
            goto LABEL_2440;
        }
        v781 = v1198.var0.var0.var0;
        if (v1198.var0.var0.var0)
        {
          *((_DWORD *)v1198.var0.var0.var0 + 6) += 2;
          v1201.var0.var0.var0 = v781;
          v1201.var0.var1 = v1198.var0.var1;
          *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1198.var0 + 12);
          v1201.var1 = 0;
          if (!WebCore::inSameLine((WebCore *)&v1198, (const WebCore::VisiblePosition *)&v1201, v780))
            v1198.var1 = 0;
          v1048 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v1048)
          {
            if (*((_DWORD *)v1048 + 6) == 2)
            {
              if ((*((_WORD *)v1048 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v1048, v1047);
            }
            else
            {
              *((_DWORD *)v1048 + 6) -= 2;
            }
          }
LABEL_2440:
          v781 = v1198.var0.var0.var0;
          if (v1198.var0.var0.var0)
            *((_DWORD *)v1198.var0.var0.var0 + 6) += 2;
        }
        v1195 = (WebCore::Node *)v781;
        LODWORD(v1196) = v1198.var0.var1;
        BYTE4(v1196) = *((_BYTE *)&v1198.var0 + 12);
        WebCore::Position::upstream((uint64_t)&v1195, (WebCore::Node *)1, (uint64_t)&v1201);
        v782 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        v783 = *((_QWORD *)this + 50);
        *((_QWORD *)this + 50) = v782;
        if (!v783)
          goto LABEL_2445;
        if (*(_DWORD *)(v783 + 24) != 2)
        {
          *(_DWORD *)(v783 + 24) -= 2;
          goto LABEL_2445;
        }
        if ((*(_WORD *)(v783 + 30) & 0x400) != 0)
        {
LABEL_2445:
          *v1100 = v1201.var0.var1;
          *((_BYTE *)this + 412) = *((_BYTE *)&v1201.var0 + 12);
          v1201.var0.var0.var0 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v783, v773);
          v1039 = v1201.var0.var0.var0;
          *v1100 = v1201.var0.var1;
          *((_BYTE *)this + 412) = *((_BYTE *)&v1201.var0 + 12);
          v1201.var0.var0.var0 = 0;
          if (v1039)
          {
            if (*((_DWORD *)v1039 + 6) == 2)
            {
              if ((*((_WORD *)v1039 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v1039, v773);
            }
            else
            {
              *((_DWORD *)v1039 + 6) -= 2;
            }
          }
        }
        v784 = v1195;
        v1195 = 0;
        if (v784)
        {
          if (*((_DWORD *)v784 + 6) == 2)
          {
            if ((*((_WORD *)v784 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v784, v773);
          }
          else
          {
            *((_DWORD *)v784 + 6) -= 2;
          }
        }
        v785 = v1198.var0.var0.var0;
        v1198.var0.var0.var0 = 0;
        if (v785)
        {
          if (*((_DWORD *)v785 + 6) == 2)
          {
            if ((*((_WORD *)v785 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v785, v773);
          }
          else
          {
            *((_DWORD *)v785 + 6) -= 2;
          }
        }
      }
      v786 = v1199.var0.var0.var0;
      v1199.var0.var0.var0 = 0;
      if (v786)
      {
        if (*((_DWORD *)v786 + 6) == 2)
        {
          if ((*((_WORD *)v786 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v786, v773);
        }
        else
        {
          *((_DWORD *)v786 + 6) -= 2;
        }
      }
      if (v740)
      {
        if (*((_DWORD *)v740 + 6) == 2)
        {
          if ((*((_WORD *)v740 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v740, v773);
        }
        else
        {
          *((_DWORD *)v740 + 6) -= 2;
        }
      }
      v787 = v1200.var0.var0.var0;
      v1200.var0.var0.var0 = 0;
      if (v787)
      {
        if (*((_DWORD *)v787 + 6) == 2)
        {
          if ((*((_WORD *)v787 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v787, v773);
        }
        else
        {
          *((_DWORD *)v787 + 6) -= 2;
        }
      }
      v788 = v1166.var0.var0.var0;
      v1166.var0.var0.var0 = 0;
      if (v788)
      {
        if (*((_DWORD *)v788 + 6) == 2)
        {
          if ((*((_WORD *)v788 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v788, v773);
        }
        else
        {
          *((_DWORD *)v788 + 6) -= 2;
        }
      }
      v707 = v1114;
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
    }
  }
  if (!*((_BYTE *)v707 + 9))
  {
    v794 = v684;
    if (!*((_BYTE *)this + 467))
    {
      v797 = 0;
      v1115 = 0;
      v796 = 0;
      v799 = v1092;
      goto LABEL_2622;
    }
    WebCore::VisiblePosition::canonicalPosition(v718, (uint64_t)&v1166);
    v1166.var1 = 1;
    WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1200, (uint64_t)this, v819);
    if (*((_BYTE *)this + 465) || !v1166.var0.var0.var0)
      goto LABEL_2615;
    if (!v1200.var0.var0.var0)
    {
LABEL_2618:
      v866 = v1166.var0.var0.var0;
      v1166.var0.var0.var0 = 0;
      if (v866)
      {
        if (*((_DWORD *)v866 + 6) == 2)
        {
          if ((*((_WORD *)v866 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v866, v820);
        }
        else
        {
          *((_DWORD *)v866 + 6) -= 2;
        }
      }
      v797 = 0;
      v1115 = 0;
      v796 = 0;
      v799 = v1092;
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
      goto LABEL_2622;
    }
    if (!WebCore::inSameParagraph(&v1166, (uint64_t)&v1200, 1))
      goto LABEL_2529;
    v821 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v1166.var0.var0.var0)
      v821 = 0;
    if (!v821)
      goto LABEL_2556;
    WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
    v823 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
    v824 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v824)
    {
      if (*((_DWORD *)v824 + 6) == 2)
      {
        if ((*((_WORD *)v824 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v824, v822);
      }
      else
      {
        *((_DWORD *)v824 + 6) -= 2;
      }
    }
    if (v823)
    {
LABEL_2529:
      WebCore::VisiblePosition::next((unsigned __int8 *)&v1200, 0, 0, (uint64_t)&v1199);
      v825 = 1;
      WebCore::startOfParagraph((uint64_t)&v1200, 1, &v1198);
    }
    else
    {
LABEL_2556:
      v837 = v1200.var0.var0.var0;
      if (v1200.var0.var0.var0)
        *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
      v1199.var0.var0.var0 = v837;
      v1199.var0.var1 = v1200.var0.var1;
      *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
      v1199.var1 = v1200.var1;
      WebCore::VisiblePosition::next((unsigned __int8 *)&v1200, 0, 0, (uint64_t)&v1198);
      v825 = 0;
    }
    WebCore::endOfParagraph((WebCore::Node *)&v1198, 1, &v1201);
    v839 = WebCore::operator==((uint64_t *)&v1201, (uint64_t *)&v1199);
    v840 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v840)
    {
      if (*((_DWORD *)v840 + 6) == 2)
      {
        if ((*((_WORD *)v840 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v840, v838);
      }
      else
      {
        *((_DWORD *)v840 + 6) -= 2;
      }
    }
    if (!v839)
    {
LABEL_2579:
      WebCore::endOfParagraph((WebCore::Node *)&v1198, 1, &v1201);
      WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)this, &v1198, &v1201, &v1199, 0, 1);
      v852 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v852)
      {
        if (*((_DWORD *)v852 + 6) == 2)
        {
          if ((*((_WORD *)v852 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v852, v820);
        }
        else
        {
          *((_DWORD *)v852 + 6) -= 2;
        }
      }
      if (!v825)
        goto LABEL_2609;
      if (!*(_QWORD *)v1104 || (*(_BYTE *)(*(_QWORD *)v1104 + 22) & 8) != 0)
      {
LABEL_2595:
        if (*((_BYTE *)this + 225) == 2)
        {
          WebCore::VisiblePosition::canonicalPosition(v1093, (uint64_t)&v1195);
          v1197 = 1;
        }
        else
        {
          v858 = *v1118;
          WebCore::VisiblePosition::canonicalPosition(v1093, (uint64_t)&v1195);
          v1197 = 1;
          if (v858)
            goto LABEL_2597;
        }
        v1049 = (Node *)v1195;
        if (!v1195)
        {
          v860 = 0;
LABEL_2599:
          LODWORD(v1201.var0.var0.var0) = (_DWORD)v1196;
          BYTE4(v1201.var0.var0.var0) = BYTE4(v1196);
          v861 = *((_QWORD *)this + 50);
          *((_QWORD *)this + 50) = v860;
          if (v861)
          {
            if (*(_DWORD *)(v861 + 24) == 2)
            {
              if ((*(_WORD *)(v861 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v861, v820);
                v860 = v1195;
              }
            }
            else
            {
              *(_DWORD *)(v861 + 24) -= 2;
            }
          }
          *v1100 = v1201.var0.var0.var0;
          *((_BYTE *)this + 412) = BYTE4(v1201.var0.var0.var0);
          v1195 = 0;
          if (v860)
          {
            if (*((_DWORD *)v860 + 6) == 2)
            {
              if ((*((_WORD *)v860 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v860, v820);
            }
            else
            {
              *((_DWORD *)v860 + 6) -= 2;
            }
          }
          if (!*((_QWORD *)this + 50))
          {
            v862 = *(_QWORD *)v1104;
            if (*(_QWORD *)v1104)
              *(_DWORD *)(v862 + 24) += 2;
            *((_QWORD *)this + 50) = v862;
            *v1100 = *((_DWORD *)this + 98);
            *((_BYTE *)this + 412) = *((_BYTE *)this + 396);
          }
LABEL_2609:
          v863 = v1198.var0.var0.var0;
          v1198.var0.var0.var0 = 0;
          if (v863)
          {
            if (*((_DWORD *)v863 + 6) == 2)
            {
              if ((*((_WORD *)v863 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v863, v820);
            }
            else
            {
              *((_DWORD *)v863 + 6) -= 2;
            }
          }
          v864 = v1199.var0.var0.var0;
          v1199.var0.var0.var0 = 0;
          if (v864)
          {
            if (*((_DWORD *)v864 + 6) == 2)
            {
              if ((*((_WORD *)v864 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v864, v820);
            }
            else
            {
              *((_DWORD *)v864 + 6) -= 2;
            }
          }
LABEL_2615:
          v865 = v1200.var0.var0.var0;
          v1200.var0.var0.var0 = 0;
          if (v865)
          {
            if (*((_DWORD *)v865 + 6) == 2)
            {
              if ((*((_WORD *)v865 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v865, v820);
            }
            else
            {
              *((_DWORD *)v865 + 6) -= 2;
            }
          }
          goto LABEL_2618;
        }
        *((_DWORD *)v1195 + 6) += 2;
        v1201.var0.var0.var0 = v1049;
        v1201.var0.var1 = v1196;
        *((_BYTE *)&v1201.var0 + 12) = BYTE4(v1196);
        v1201.var1 = 0;
        if (!WebCore::inSameLine((WebCore *)&v1195, (const WebCore::VisiblePosition *)&v1201, v859))
          v1197 = 0;
        v1050 = v1201.var0.var0.var0;
        v1201.var0.var0.var0 = 0;
        if (v1050)
        {
          if (*((_DWORD *)v1050 + 6) == 2)
          {
            if ((*((_WORD *)v1050 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1050, v820);
          }
          else
          {
            *((_DWORD *)v1050 + 6) -= 2;
          }
        }
LABEL_2597:
        v860 = v1195;
        if (v1195)
          *((_DWORD *)v1195 + 6) += 2;
        goto LABEL_2599;
      }
      if (*((_BYTE *)this + 225) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1195);
        v1197 = 1;
      }
      else
      {
        v853 = *v1118;
        WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1195);
        v1197 = 1;
        if (!v853)
        {
          v1073 = (Node *)v1195;
          if (!v1195)
          {
            v856 = 0;
LABEL_2589:
            LODWORD(v1201.var0.var0.var0) = (_DWORD)v1196;
            BYTE4(v1201.var0.var0.var0) = BYTE4(v1196);
            v857 = *(_QWORD *)v1104;
            *(_QWORD *)v1104 = v856;
            if (v857)
            {
              if (*(_DWORD *)(v857 + 24) == 2)
              {
                if ((*(_WORD *)(v857 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v857, v854);
                  v856 = v1195;
                }
              }
              else
              {
                *(_DWORD *)(v857 + 24) -= 2;
              }
            }
            *((_DWORD *)this + 98) = v1201.var0.var0.var0;
            *((_BYTE *)this + 396) = BYTE4(v1201.var0.var0.var0);
            v1195 = 0;
            if (v856)
            {
              if (*((_DWORD *)v856 + 6) == 2)
              {
                if ((*((_WORD *)v856 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v856, v854);
              }
              else
              {
                *((_DWORD *)v856 + 6) -= 2;
              }
            }
            goto LABEL_2595;
          }
          *((_DWORD *)v1195 + 6) += 2;
          v1201.var0.var0.var0 = v1073;
          v1201.var0.var1 = v1196;
          *((_BYTE *)&v1201.var0 + 12) = BYTE4(v1196);
          v1201.var1 = 0;
          if (!WebCore::inSameLine((WebCore *)&v1195, (const WebCore::VisiblePosition *)&v1201, v855))
            v1197 = 0;
          v1074 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v1074)
          {
            if (*((_DWORD *)v1074 + 6) == 2)
            {
              if ((*((_WORD *)v1074 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v1074, v854);
            }
            else
            {
              *((_DWORD *)v1074 + 6) -= 2;
            }
          }
        }
      }
      v856 = v1195;
      if (v1195)
        *((_DWORD *)v1195 + 6) += 2;
      goto LABEL_2589;
    }
    v841 = *((_QWORD *)this + 2);
    v842 = bmalloc::api::isoAllocate();
    v843 = v842;
    *(_OWORD *)(v842 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v842 + 28) = 4124;
    *(_QWORD *)(v842 + 32) = 0;
    *(_QWORD *)(v842 + 40) = v841 + 96;
    *(_OWORD *)(v842 + 48) = 0u;
    *(_OWORD *)(v842 + 64) = 0u;
    ++*(_DWORD *)(v841 + 3324);
    *(_QWORD *)(v842 + 80) = 0;
    *(_QWORD *)(v842 + 88) = 0;
    v844 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v842 + 96) = v844;
    *(_QWORD *)(v842 + 104) = 0;
    *(_QWORD *)v842 = off_1E33B4C28;
    *(_DWORD *)(v842 + 24) = 4;
    v1201.var0.var0.var0 = (Node *)v842;
    v845 = v1198.var0.var0.var0;
    if (v1198.var0.var0.var0)
      *((_DWORD *)v1198.var0.var0.var0 + 6) += 2;
    WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v1201, (uint64_t)v845, 1);
    if (*((_DWORD *)v845 + 6) == 2)
    {
      if ((*((_WORD *)v845 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v845, v846);
    }
    else
    {
      *((_DWORD *)v845 + 6) -= 2;
    }
    v847 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v847)
    {
      if (*((_DWORD *)v847 + 6) == 2)
      {
        if ((*((_WORD *)v847 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v847, v846);
      }
      else
      {
        *((_DWORD *)v847 + 6) -= 2;
      }
    }
    *(_DWORD *)(v843 + 24) += 2;
    v1195 = (WebCore::Node *)v843;
    LODWORD(v1196) = 0;
    BYTE4(v1196) = 1;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1195, (uint64_t)&v1201);
    v849 = v1199.var0.var0.var0;
    v1199.var0.var0.var0 = v1201.var0.var0.var0;
    if (v849)
    {
      if (*((_DWORD *)v849 + 6) == 2)
      {
        if ((*((_WORD *)v849 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v849, v848);
      }
      else
      {
        *((_DWORD *)v849 + 6) -= 2;
      }
    }
    v1199.var0.var1 = v1201.var0.var1;
    *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
    v1199.var1 = 1;
    v850 = *(_DWORD *)(v843 + 24) - 2;
    if (*(_DWORD *)(v843 + 24) == 2)
    {
      v1041 = *(_WORD *)(v843 + 30);
      if ((v1041 & 0x400) != 0)
      {
LABEL_3299:
        if ((v1041 & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v843, v848);
        goto LABEL_2579;
      }
      WebCore::Node::removedLastRef((WebCore::Node *)v843, v848);
      v850 = *(_DWORD *)(v843 + 24);
    }
    else
    {
      *(_DWORD *)(v843 + 24) = v850;
    }
    v851 = v850 - 2;
    if (v851)
    {
      *(_DWORD *)(v843 + 24) = v851;
      goto LABEL_2579;
    }
    v1041 = *(_WORD *)(v843 + 30);
    goto LABEL_3299;
  }
  WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1166, (uint64_t)this, (const WebCore::QualifiedName *)v709);
  WebCore::VisiblePosition::next((unsigned __int8 *)&v1166, 1, 0, (uint64_t)&v1200);
  if (!v1107)
  {
    if (v1166.var0.var0.var0
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0)
    {
      WebCore::endOfParagraph((WebCore::Node *)&v1166, 1, &v1201);
      v791 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
      v792 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v792)
      {
        if (*((_DWORD *)v792 + 6) == 2)
        {
          if ((*((_WORD *)v792 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v792, v790);
        }
        else
        {
          *((_DWORD *)v792 + 6) -= 2;
        }
      }
      if (v791)
      {
        v793 = v1200.var0.var0.var0;
        if (v1200.var0.var0.var0)
        {
          v794 = v684;
          *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
          v1199.var0.var0.var0 = v793;
          v1199.var0.var1 = v1200.var0.var1;
          *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
          WebCore::Position::downstream((uint64_t)&v1199, (WebCore::Node *)1, (uint64_t)&v1201);
          v796 = v1201.var0.var0.var0;
          v1115 = v1201.var0.var1;
          v797 = *((_BYTE *)&v1201.var0 + 12);
          v1201.var0.var0.var0 = 0;
          v798 = v1199.var0.var0.var0;
          v1199.var0.var0.var0 = 0;
          if (v798)
          {
            if (*((_DWORD *)v798 + 6) == 2)
            {
              if ((*((_WORD *)v798 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v798, v795);
            }
            else
            {
              *((_DWORD *)v798 + 6) -= 2;
            }
          }
          v799 = v1092;
          v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
          goto LABEL_2550;
        }
      }
    }
  }
  if (v1166.var0.var0.var0)
    v800 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v800 = 0;
  if (v800)
  {
    WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
    v801 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
    v802 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v802)
    {
      if (*((_DWORD *)v802 + 6) == 2)
      {
        if ((*((_WORD *)v802 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v802, v795);
      }
      else
      {
        *((_DWORD *)v802 + 6) -= 2;
      }
    }
    if (v801)
    {
      v794 = v684;
      v797 = 0;
      v1115 = 0;
      v796 = 0;
      v799 = v1092;
      goto LABEL_2550;
    }
  }
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1166, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
  v803 = v1166.var0.var0.var0;
  if (v1166.var0.var0.var0)
  {
    *((_DWORD *)v1166.var0.var0.var0 + 6) += 4;
    v1119 = v803;
    WebCore::enclosingBlock((uint64_t *)&v1119, (WebCore::Node *)1, &v1195);
    v1119 = 0;
    v805 = *((_DWORD *)v803 + 6) - 2;
    if (*((_DWORD *)v803 + 6) != 2)
    {
      *((_DWORD *)v803 + 6) = v805;
      goto LABEL_2492;
    }
    if ((*((_WORD *)v803 + 15) & 0x400) != 0)
      goto LABEL_3105;
    WebCore::Node::removedLastRef((WebCore::Node *)v803, v804);
    v805 = *((_DWORD *)v803 + 6);
LABEL_2492:
    v806 = v805 - 2;
    if (!v806)
    {
LABEL_3105:
      if ((*((_WORD *)v803 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v803, v804);
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
    }
    else
    {
      *((_DWORD *)v803 + 6) = v806;
    }
  }
  else
  {
    v1119 = 0;
    WebCore::enclosingBlock((uint64_t *)&v1119, (WebCore::Node *)1, &v1195);
    v1119 = 0;
  }
  v807 = v1195;
  if (v1195
    && ((v808 = *((_QWORD *)v1195 + 4)) != 0
     && (*(_WORD *)(v808 + 28) & 0x10) != 0
     && ((v809 = *(_QWORD *)(*(_QWORD *)(v808 + 96) + 24), v809 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
      || v809 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
      || v809 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
     || (*((_QWORD *)v1195 + 8) & 0xFFFFFFFFFFFFLL) != 0
     && *(_BYTE *)((*((_QWORD *)v1195 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19))
  {
    v794 = v684;
    v810 = *((_QWORD *)this + 2);
    v811 = bmalloc::api::isoAllocate();
    v812 = v811;
    *(_OWORD *)(v811 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v811 + 28) = 5148;
    *(_QWORD *)(v811 + 32) = 0;
    *(_QWORD *)(v811 + 40) = v810 + 96;
    *(_OWORD *)(v811 + 48) = 0u;
    *(_OWORD *)(v811 + 64) = 0u;
    ++*(_DWORD *)(v810 + 3324);
    *(_QWORD *)(v811 + 80) = 0;
    *(_QWORD *)(v811 + 88) = 0;
    v813 = WebCore::HTMLNames::liTag;
    if (WebCore::HTMLNames::liTag)
      ++*(_DWORD *)WebCore::HTMLNames::liTag;
    *(_QWORD *)(v811 + 96) = v813;
    *(_QWORD *)(v811 + 104) = 0;
    *(_QWORD *)v811 = off_1E33C04C8;
    *(_DWORD *)(v811 + 24) = 4;
    v1201.var0.var0.var0 = (Node *)v811;
    WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)this, (uint64_t *)&v1201, (uint64_t)v807);
    v815 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v815)
    {
      if (*((_DWORD *)v815 + 6) == 2)
      {
        if ((*((_WORD *)v815 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v815, v814);
      }
      else
      {
        *((_DWORD *)v815 + 6) -= 2;
      }
    }
    v816 = *(_WORD *)(v812 + 28);
    *(_DWORD *)(v812 + 24) += 2;
    v1198.var0.var0.var0 = (Node *)v812;
    v1198.var0.var1 = 0;
    if ((v816 & 1) != 0)
      v817 = *((_BYTE *)&v1198.var0 + 12) & 0xF0;
    else
      v817 = *((_BYTE *)&v1198.var0 + 12) & 0xF0 | 3;
    *((_BYTE *)&v1198.var0 + 12) = v817;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1198, (uint64_t)&v1199);
    v1199.var1 = 1;
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1199, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
    if (v1199.var0.var0.var0)
    {
      if (*((_DWORD *)v1199.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v1199.var0.var0.var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v1199.var0.var0.var0, v818);
      }
      else
      {
        *((_DWORD *)v1199.var0.var0.var0 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v812 + 24) == 2)
    {
      if ((*(_WORD *)(v812 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v812, v818);
    }
    else
    {
      *(_DWORD *)(v812 + 24) -= 2;
    }
    if (*(_DWORD *)(v812 + 24) != 2)
    {
      *(_DWORD *)(v812 + 24) -= 2;
      goto LABEL_2541;
    }
    v826 = v1113;
    v799 = v1092;
    v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
    if ((*(_WORD *)(v812 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v812, v818);
  }
  else
  {
    v794 = v684;
    if (v1106)
    {
      WebCore::CompositeEditCommand::insertParagraphSeparator(this, 1, 0);
      v826 = v1113;
      v799 = v1092;
    }
    else
    {
      v827 = v1166.var0.var0.var0;
      if (v1166.var0.var0.var0)
        *((_DWORD *)v1166.var0.var0.var0 + 6) += 2;
      v1201.var0.var0.var0 = v827;
      v1201.var0.var1 = v1166.var0.var1;
      *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1166.var0 + 12);
      WebCore::highestEnclosingNodeOfType((unsigned int *)&v1201, WebCore::isMailBlockquote, 1, *((_QWORD *)v1126 + 4), (uint64_t *)&v1199);
      WebCore::CompositeEditCommand::insertParagraphSeparator(this, 1, v1199.var0.var0.var0 != 0);
      v829 = v1199.var0.var0.var0;
      v1199.var0.var0.var0 = 0;
      if (v829)
      {
        if (*((_DWORD *)v829 + 6) == 2)
        {
          if ((*((_WORD *)v829 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v829, v828);
        }
        else
        {
          *((_DWORD *)v829 + 6) -= 2;
        }
      }
      v830 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v830)
      {
        if (*((_DWORD *)v830 + 6) == 2)
        {
          if ((*((_WORD *)v830 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v830, v828);
        }
        else
        {
          *((_DWORD *)v830 + 6) -= 2;
        }
      }
LABEL_2541:
      v826 = v1113;
      v799 = v1092;
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
    }
  }
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition(v826, (uint64_t)&v1199);
    v1199.var1 = 1;
    goto LABEL_2544;
  }
  v831 = *v1118;
  WebCore::VisiblePosition::canonicalPosition(v826, (uint64_t)&v1199);
  v1199.var1 = 1;
  if (v831)
    goto LABEL_2544;
  v1045 = v1199.var0.var0.var0;
  if (!v1199.var0.var0.var0)
    goto LABEL_3360;
  *((_DWORD *)v1199.var0.var0.var0 + 6) += 2;
  v1201.var0.var0.var0 = v1045;
  v1201.var0.var1 = v1199.var0.var1;
  *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1199.var0 + 12);
  v1201.var1 = 0;
  if (!WebCore::inSameLine((WebCore *)&v1199, (const WebCore::VisiblePosition *)&v1201, v833))
    v1199.var1 = 0;
  v1046 = v1201.var0.var0.var0;
  v1201.var0.var0.var0 = 0;
  if (v1046)
  {
    if (*((_DWORD *)v1046 + 6) == 2)
    {
      if ((*((_WORD *)v1046 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1046, v832);
    }
    else
    {
      *((_DWORD *)v1046 + 6) -= 2;
    }
  }
  v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
LABEL_2544:
  v796 = v1199.var0.var0.var0;
  if (v1199.var0.var0.var0)
  {
    v834 = *((_DWORD *)v1199.var0.var0.var0 + 6);
    *((_DWORD *)v1199.var0.var0.var0 + 6) = v834 + 2;
    v1115 = v1199.var0.var1;
    v797 = *((_BYTE *)&v1199.var0 + 12);
    v1199.var0.var0.var0 = 0;
    if (v834)
    {
      *((_DWORD *)v796 + 6) = v834;
    }
    else
    {
      if ((*((_WORD *)v796 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v796, v832);
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
    }
  }
  else
  {
LABEL_3360:
    v796 = 0;
    v1115 = v1199.var0.var1;
    v797 = *((_BYTE *)&v1199.var0 + 12);
  }
  WebCore::ReplaceSelectionCommand::updateNodesInserted((unsigned int *)this, (WebCore::Node *)v796);
  if (v807)
  {
    if (*((_DWORD *)v807 + 6) == 2)
    {
      if ((*((_WORD *)v807 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v807, v795);
    }
    else
    {
      *((_DWORD *)v807 + 6) -= 2;
    }
  }
LABEL_2550:
  v835 = v1200.var0.var0.var0;
  v1200.var0.var0.var0 = 0;
  if (v835)
  {
    if (*((_DWORD *)v835 + 6) == 2)
    {
      if ((*((_WORD *)v835 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v835, v795);
    }
    else
    {
      *((_DWORD *)v835 + 6) -= 2;
    }
  }
  v836 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v836)
  {
    if (*((_DWORD *)v836 + 6) == 2)
    {
      if ((*((_WORD *)v836 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v836, v795);
    }
    else
    {
      *((_DWORD *)v836 + 6) -= 2;
    }
  }
LABEL_2622:
  WebCore::VisiblePosition::canonicalPosition(v718, (uint64_t)&v1201);
  v1201.var1 = 1;
  v867 = v1201.var0.var0.var0;
  if (v1201.var0.var0.var0)
    *((_DWORD *)v1201.var0.var0.var0 + 6) += 2;
  v1166.var0.var0.var0 = v867;
  v1166.var0.var1 = v1201.var0.var1;
  *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
  WebCore::enclosingNodeOfType((uint64_t)&v1166, (uint64_t (*)(uint64_t))WebCore::isMailPasteAsQuotationNode, 1, (uint64_t *)&v1200);
  v869 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v869)
  {
    if (*((_DWORD *)v869 + 6) == 2)
    {
      if ((*((_WORD *)v869 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v869, v868);
    }
    else
    {
      *((_DWORD *)v869 + 6) -= 2;
    }
  }
  if (v867)
  {
    if (*((_DWORD *)v867 + 6) == 2)
    {
      if ((*((_WORD *)v867 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v867, v868);
    }
    else
    {
      *((_DWORD *)v867 + 6) -= 2;
    }
  }
  if (v1200.var0.var0.var0)
  {
    if ((*((_WORD *)v1200.var0.var0.var0 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B1A2A8);
    }
    WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v1200.var0.var0.var0, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, MEMORY[0x1E0CBF2F8]);
    v871 = v1200.var0.var0.var0;
    v1200.var0.var0.var0 = 0;
    if (v871)
    {
      if (*((_DWORD *)v871 + 6) == 2)
      {
        if ((*((_WORD *)v871 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v871, v870);
      }
      else
      {
        *((_DWORD *)v871 + 6) -= 2;
      }
    }
  }
  if (!*((_BYTE *)this + 425))
    goto LABEL_2819;
  WebCore::VisiblePosition::canonicalPosition(v718, (uint64_t)&v1201);
  v873 = v1201.var0.var0.var0;
  if (v1201.var0.var0.var0)
    *((_DWORD *)v1201.var0.var0.var0 + 6) += 2;
  v1166.var0.var0.var0 = v873;
  v1166.var0.var1 = v1201.var0.var1;
  *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
  v874 = WebCore::enclosingTextFormControl((WebCore *)&v1166, v872);
  v876 = v874;
  if (v874)
    *((_DWORD *)v874 + 6) += 2;
  v877 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v877)
  {
    if (*((_DWORD *)v877 + 6) == 2)
    {
      if ((*((_WORD *)v877 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v877, v875);
    }
    else
    {
      *((_DWORD *)v877 + 6) -= 2;
    }
  }
  if (v873)
  {
    if (*((_DWORD *)v873 + 6) == 2)
    {
      if ((*((_WORD *)v873 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v873, v875);
    }
    else
    {
      *((_DWORD *)v873 + 6) -= 2;
    }
  }
  if (!v876)
  {
LABEL_2654:
    WebCore::VisiblePosition::canonicalPosition(v718, (uint64_t)&v1166);
    v1166.var1 = 1;
    WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1200, (uint64_t)this, v880);
    v881 = v1200.var0.var0.var0;
    if (v1200.var0.var0.var0)
      *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
    v1201.var0.var0.var0 = v881;
    v1201.var0.var1 = v1200.var0.var1;
    *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
    WebCore::Position::upstream((uint64_t)&v1201, (WebCore::Node *)1, (uint64_t)&v1195);
    v883 = v1201.var0.var0.var0;
    v1201.var0.var0.var0 = 0;
    if (v883)
    {
      if (*((_DWORD *)v883 + 6) == 2)
      {
        if ((*((_WORD *)v883 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v883, v882);
      }
      else
      {
        *((_DWORD *)v883 + 6) -= 2;
      }
    }
    v884 = (uint64_t)v1195;
    if (!v1195)
      goto LABEL_2671;
    v885 = BYTE4(v1196) & 7;
    if (v885 == 4)
    {
      if ((*((_WORD *)v1195 + 14) & 4) != 0)
      {
        v884 = *((_QWORD *)v1195 + 11);
        goto LABEL_2663;
      }
LABEL_2670:
      v884 = 0;
      goto LABEL_2671;
    }
    if ((BYTE4(v1196) & 7) != 0)
    {
      if (v885 != 1)
      {
        if (v885 == 2)
        {
LABEL_2664:
          v886 = *(_DWORD *)(v884 + 24);
          *(_DWORD *)(v884 + 24) = v886 + 4;
          if ((*(_WORD *)(v884 + 28) & 2) != 0)
          {
            v1044 = *(_QWORD *)(v884 + 80);
            v888 = 0;
            if (v1044)
              v889 = *(_DWORD *)(v1044 + 4);
            else
              v889 = 0;
            v1108 = (WebCore::Node *)v884;
          }
          else
          {
            v887 = v886 + 2;
            if (v886 == -2)
            {
              if ((*(_WORD *)(v884 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v884, v882);
              v888 = 0;
              v1108 = 0;
              v889 = 0;
            }
            else
            {
              v888 = 0;
              v1108 = 0;
              v889 = 0;
              *(_DWORD *)(v884 + 24) = v887;
            }
          }
LABEL_2672:
          if ((BYTE4(v1196) & 7) != 0)
          {
            v890 = (WebCore::Node *)v884;
          }
          else
          {
            v890 = v1195;
            if (v1195)
              *((_DWORD *)v1195 + 6) += 2;
            if ((v888 & 1) == 0)
            {
              if (*(_DWORD *)(v884 + 24) == 2)
              {
                if ((*(_WORD *)(v884 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v884, v882);
              }
              else
              {
                *(_DWORD *)(v884 + 24) -= 2;
              }
            }
            v889 = (int)v1196;
          }
          v891 = v1200.var0.var0.var0;
          v892 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          if (!v1200.var0.var0.var0)
            v892 = 0;
          if (v892)
          {
            WebCore::endOfParagraph((WebCore::Node *)&v1200, 1, &v1201);
            v894 = WebCore::operator==((uint64_t *)&v1200, (uint64_t *)&v1201);
            v895 = v1201.var0.var0.var0;
            v1201.var0.var0.var0 = 0;
            if (v895)
            {
              if (*((_DWORD *)v895 + 6) == 2)
              {
                if ((*((_WORD *)v895 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v895, v893);
              }
              else
              {
                *((_DWORD *)v895 + 6) -= 2;
              }
            }
            if (v894)
              goto LABEL_2737;
            v891 = v1200.var0.var0.var0;
          }
          v137 = v891 == 0;
          v896 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          if (v137)
            v896 = 0;
          if (v896)
          {
            WebCore::startOfParagraph((uint64_t)&v1200, 1, &v1201);
            v898 = WebCore::operator==((uint64_t *)&v1200, (uint64_t *)&v1201);
            v899 = v1201.var0.var0.var0;
            v1201.var0.var0.var0 = 0;
            if (v899)
            {
              if (*((_DWORD *)v899 + 6) == 2)
              {
                if ((*((_WORD *)v899 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v899, v897);
              }
              else
              {
                *((_DWORD *)v899 + 6) -= 2;
              }
            }
            if (v898)
              goto LABEL_2737;
          }
          v900 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v1200);
          if (v900 == 160)
            v900 = 32;
          isCharacterSmartReplaceExempt = WebCore::isCharacterSmartReplaceExempt(v900, 0);
          if (!v890 || isCharacterSmartReplaceExempt)
            goto LABEL_2737;
          v902 = *((_QWORD *)v890 + 8) & 0xFFFFFFFFFFFFLL;
          if (v902)
          {
            if ((*(_BYTE *)((*((_QWORD *)v890 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              v902 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v890 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
            v903 = *(_DWORD *)(v902 + 120);
            v904 = (v903 >> 27) & 7;
            if ((v903 & 0x40000000) == 0 && v904 == 3)
            {
              LOBYTE(v904) = 5;
            }
            else
            {
              if (v904)
                v905 = 0;
              else
                v905 = (v903 & 0x40000000) == 0;
              if (v905)
              {
                LOBYTE(v904) = 0;
              }
              else if ((v903 & 0x40000000) == 0 || v904)
              {
                if ((v903 & 0x40000000) == 0 || v904 != 1)
                {
                  if ((v903 & 0x40000000) == 0 && v904 == 2)
                  {
                    LOBYTE(v904) = 3;
                  }
                  else if (v904 == 1 && (v903 & 0x40000000) == 0)
                  {
                    LOBYTE(v904) = 2;
                  }
                  else
                  {
                    LOBYTE(v904) = 0;
                  }
                }
              }
              else
              {
                LOBYTE(v904) = 4;
              }
            }
            if ((*((_WORD *)v890 + 14) & 2) != 0)
            {
              v906 = (_DWORD *)((char *)v890 + 24);
              *((_DWORD *)v890 + 6) += 2;
              if (((1 << v904) & 0x26) != 0)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v907 = v1201.var0.var0.var0;
                goto LABEL_2722;
              }
LABEL_2718:
              {
                WTF::String::String();
              }
              v907 = (Node *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString;
              if (WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString)
                *(_DWORD *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString += 2;
LABEL_2722:
              v1199.var0.var0.var0 = v907;
              WebCore::CompositeEditCommand::insertTextIntoNode(this, v890, v889, (const WTF::String *)&v1199);
              v909 = v1199.var0.var0.var0;
              v1199.var0.var0.var0 = 0;
              if (v909)
              {
                if (*(_DWORD *)v909 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v909, v908);
                else
                  *(_DWORD *)v909 -= 2;
              }
              v910 = (_QWORD *)*((_QWORD *)this + 50);
              if (v910 && (v911 = *((_BYTE *)this + 412) & 7, v911 <= 4))
              {
                v912 = 1 << v911;
                v913 = (WebCore::Node *)*((_QWORD *)this + 50);
                if ((v912 & 0x19) == 0)
                  v913 = (WebCore::Node *)v910[4];
              }
              else
              {
                v913 = 0;
              }
              if (v890 == v913)
              {
                v914 = *((_DWORD *)this + 102) + 1;
                *((_DWORD *)this + 102) = v914;
                if ((*((_BYTE *)this + 412) & 8) != 0)
                {
                  if (v910 && ((*(uint64_t (**)(_QWORD *))(*v910 + 208))(v910) & 1) == 0)
                  {
                    if (v914)
                      v915 = 2;
                    else
                      v915 = 1;
                  }
                  else
                  {
                    v915 = 0;
                  }
                  *((_BYTE *)this + 412) = *((_BYTE *)this + 412) & 0xF8 | v915;
                }
              }
              if (*v906 != 2)
              {
                *v906 -= 2;
                goto LABEL_2737;
              }
              if ((*((_WORD *)v890 + 15) & 0x400) == 0)
              {
                v1038 = v890;
LABEL_3235:
                WebCore::Node::removedLastRef(v1038, v908);
                goto LABEL_2737;
              }
              goto LABEL_2737;
            }
            v1053 = *((_QWORD *)this + 2);
            if (((1 << v904) & 0x26) != 0)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v1054 = (WTF::StringImpl *)v1201.var0.var0.var0;
              goto LABEL_3412;
            }
          }
          else
          {
            if ((*((_WORD *)v890 + 14) & 2) != 0)
            {
              v906 = (_DWORD *)((char *)v890 + 24);
              *((_DWORD *)v890 + 6) += 2;
              goto LABEL_2718;
            }
            v1053 = *((_QWORD *)this + 2);
          }
          {
            WTF::String::String();
          }
          v1054 = (WTF::StringImpl *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString;
          if (WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString)
            *(_DWORD *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString += 2;
LABEL_3412:
          v1057 = bmalloc::api::isoAllocate();
          v1059 = v1057;
          *(_OWORD *)(v1057 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v1057 + 24) = 0x320300000002;
          *(_QWORD *)(v1057 + 32) = 0;
          *(_QWORD *)(v1057 + 40) = v1053 + 96;
          *(_OWORD *)(v1057 + 48) = 0u;
          *(_OWORD *)(v1057 + 64) = 0u;
          ++*(_DWORD *)(v1053 + 3324);
          if (v1054)
          {
            v1082 = *(_DWORD *)v1054;
            *(_DWORD *)v1054 += 2;
            *(_QWORD *)(v1057 + 80) = v1054;
            *(_QWORD *)v1057 = off_1E33A8078;
            if (!v1082)
            {
              WTF::StringImpl::destroy(v1054, v1058);
              v1061 = *(_DWORD *)(v1059 + 24);
LABEL_3417:
              *(_DWORD *)(v1059 + 24) = v1061 + 2;
              v1201.var0.var0.var0 = (Node *)v1059;
              WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)this, (uint64_t *)&v1201, (uint64_t)v890);
              v1063 = v1201.var0.var0.var0;
              v1201.var0.var0.var0 = 0;
              if (v1063)
              {
                if (*((_DWORD *)v1063 + 6) == 2)
                {
                  if ((*((_WORD *)v1063 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v1063, v1062);
                }
                else
                {
                  *((_DWORD *)v1063 + 6) -= 2;
                }
              }
              WebCore::ReplaceSelectionCommand::updateNodesInserted((unsigned int *)this, (WebCore::Node *)v1059);
              if (*(_DWORD *)(v1059 + 24) == 2)
              {
                if ((*(_WORD *)(v1059 + 30) & 0x400) == 0)
                {
                  v1038 = (WebCore::Node *)v1059;
                  goto LABEL_3235;
                }
              }
              else
              {
                *(_DWORD *)(v1059 + 24) -= 2;
              }
LABEL_2737:
              v916 = *((_QWORD *)this + 2);
              *(_DWORD *)(v916 + 24) += 2;
              WebCore::Document::updateLayout(v916, 0, 0);
              if (*(_DWORD *)(v916 + 24) == 2)
              {
                if ((*(_WORD *)(v916 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v916, v917);
              }
              else
              {
                *(_DWORD *)(v916 + 24) -= 2;
              }
              v918 = v1166.var0.var0.var0;
              if (v1166.var0.var0.var0)
                *((_DWORD *)v1166.var0.var0.var0 + 6) += 2;
              v1201.var0.var0.var0 = v918;
              v1201.var0.var1 = v1166.var0.var1;
              *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1166.var0 + 12);
              WebCore::Position::downstream((uint64_t)&v1201, (WebCore::Node *)1, (uint64_t)&v1192);
              v920 = v1201.var0.var0.var0;
              v1201.var0.var0.var0 = 0;
              if (v920)
              {
                if (*((_DWORD *)v920 + 6) == 2)
                {
                  if ((*((_WORD *)v920 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v920, v919);
                }
                else
                {
                  *((_DWORD *)v920 + 6) -= 2;
                }
              }
              v921 = v1192;
              v922 = v1194 & 7;
              if (v1192)
              {
                v923 = v1192;
                switch(v1194 & 7)
                {
                  case 0:
                    if ((*((_WORD *)v1192 + 14) & 4) == 0)
                      goto LABEL_2765;
                    v923 = (WebCore::Node *)*((_QWORD *)v1192 + 10);
                    if (v1193 && v923)
                    {
                      v924 = v1193 - 1;
                      do
                      {
                        v923 = (WebCore::Node *)*((_QWORD *)v923 + 7);
                        v472 = v924-- != 0;
                        v925 = v472;
                      }
                      while (v923 && (v925 & 1) != 0);
                    }
                    goto LABEL_2762;
                  case 1:
                    goto LABEL_2763;
                  case 2:
                    v926 = (WebCore::Node **)((char *)v1192 + 56);
                    goto LABEL_2761;
                  case 3:
                    if ((*((_WORD *)v1192 + 14) & 4) == 0)
                      goto LABEL_2765;
                    v926 = (WebCore::Node **)((char *)v1192 + 80);
LABEL_2761:
                    v923 = *v926;
LABEL_2762:
                    if (v923)
                    {
LABEL_2763:
                      *((_DWORD *)v923 + 6) += 2;
                      if (v922)
                      {
                        v927 = 0;
                        v921 = v923;
                        goto LABEL_2771;
                      }
                      *((_DWORD *)v921 + 6) += 2;
                      if (*((_DWORD *)v923 + 6) == 2)
                      {
                        if ((*((_WORD *)v923 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v923, v919);
                      }
                      else
                      {
                        *((_DWORD *)v923 + 6) -= 2;
                      }
                    }
                    else
                    {
LABEL_2765:
                      if ((v1194 & 7) != 0)
                        goto LABEL_2766;
                      *((_DWORD *)v1192 + 6) += 2;
                    }
                    break;
                  default:
                    goto LABEL_2765;
                }
              }
              else if ((v1194 & 7) != 0)
              {
LABEL_2766:
                v921 = 0;
                v927 = 0;
                goto LABEL_2771;
              }
              v927 = v1193;
LABEL_2771:
              v928 = v1166.var0.var0.var0;
              v929 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
              if (!v1166.var0.var0.var0)
                v929 = 0;
              if (v929)
              {
                WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
                v931 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
                v932 = v1201.var0.var0.var0;
                v1201.var0.var0.var0 = 0;
                if (v932)
                {
                  if (*((_DWORD *)v932 + 6) == 2)
                  {
                    if ((*((_WORD *)v932 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v932, v930);
                  }
                  else
                  {
                    *((_DWORD *)v932 + 6) -= 2;
                  }
                }
                if (v931)
                {
LABEL_2798:
                  if (v921)
                    goto LABEL_2799;
LABEL_2801:
                  v941 = v1192;
                  v1192 = 0;
                  v799 = v1092;
                  if (v941)
                  {
                    if (*((_DWORD *)v941 + 6) == 2)
                    {
                      if ((*((_WORD *)v941 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v941, v930);
                    }
                    else
                    {
                      *((_DWORD *)v941 + 6) -= 2;
                    }
                  }
                  if (v1108)
                  {
                    if (*((_DWORD *)v1108 + 6) == 2)
                    {
                      if ((*((_WORD *)v1108 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v1108, v930);
                    }
                    else
                    {
                      *((_DWORD *)v1108 + 6) -= 2;
                    }
                  }
                  if (v890)
                  {
                    if (*((_DWORD *)v890 + 6) == 2)
                    {
                      if ((*((_WORD *)v890 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v890, v930);
                    }
                    else
                    {
                      *((_DWORD *)v890 + 6) -= 2;
                    }
                  }
                  v942 = v1195;
                  v1195 = 0;
                  v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
                  if (v942)
                  {
                    if (*((_DWORD *)v942 + 6) == 2)
                    {
                      if ((*((_WORD *)v942 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v942, v930);
                    }
                    else
                    {
                      *((_DWORD *)v942 + 6) -= 2;
                    }
                  }
                  v943 = v1200.var0.var0.var0;
                  v1200.var0.var0.var0 = 0;
                  if (v943)
                  {
                    if (*((_DWORD *)v943 + 6) == 2)
                    {
                      if ((*((_WORD *)v943 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v943, v930);
                    }
                    else
                    {
                      *((_DWORD *)v943 + 6) -= 2;
                    }
                  }
                  v944 = v1166.var0.var0.var0;
                  v1166.var0.var0.var0 = 0;
                  if (v944)
                  {
                    if (*((_DWORD *)v944 + 6) == 2)
                    {
                      if ((*((_WORD *)v944 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v944, v930);
                    }
                    else
                    {
                      *((_DWORD *)v944 + 6) -= 2;
                    }
                  }
                  goto LABEL_2819;
                }
                v928 = v1166.var0.var0.var0;
              }
              v137 = v928 == 0;
              v933 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
              if (v137)
                v933 = 0;
              if (v933)
              {
                WebCore::endOfParagraph((WebCore::Node *)&v1166, 1, &v1201);
                v934 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
                v935 = v1201.var0.var0.var0;
                v1201.var0.var0.var0 = 0;
                if (v935)
                {
                  if (*((_DWORD *)v935 + 6) == 2)
                  {
                    if ((*((_WORD *)v935 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v935, v930);
                  }
                  else
                  {
                    *((_DWORD *)v935 + 6) -= 2;
                  }
                }
                if (v934)
                  goto LABEL_2798;
              }
              WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v1166, (uint64_t)&v1198);
              if (WebCore::Position::atStartOfTree((WebCore::Position *)&v1198))
              {
                memset(&v1199, 0, sizeof(v1199));
              }
              else
              {
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v1198, (uint64_t)&v1201);
                v1199.var0.var0.var0 = v1201.var0.var0.var0;
                v1199.var0.var1 = v1201.var0.var1;
                *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
              }
              v1199.var1 = 1;
              v937 = v1198.var0.var0.var0;
              v1198.var0.var0.var0 = 0;
              if (v937)
              {
                if (*((_DWORD *)v937 + 6) == 2)
                {
                  if ((*((_WORD *)v937 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v937, v936);
                }
                else
                {
                  *((_DWORD *)v937 + 6) -= 2;
                }
              }
              v938 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v1199);
              if (v938 == 160)
                v938 = 32;
              v939 = WebCore::isCharacterSmartReplaceExempt(v938, 1);
              v940 = v1199.var0.var0.var0;
              v1199.var0.var0.var0 = 0;
              if (v940)
              {
                if (*((_DWORD *)v940 + 6) == 2)
                {
                  if ((*((_WORD *)v940 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v940, v930);
                }
                else
                {
                  *((_DWORD *)v940 + 6) -= 2;
                }
              }
              if (v939)
                goto LABEL_2798;
              if (!v921)
                goto LABEL_2801;
              v1021 = *((_QWORD *)v921 + 8) & 0xFFFFFFFFFFFFLL;
              if (v1021)
              {
                if ((*(_BYTE *)((*((_QWORD *)v921 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  v1021 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v921 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
                v1022 = *(_DWORD *)(v1021 + 120);
                v1023 = (v1022 >> 27) & 7;
                if ((v1022 & 0x40000000) == 0 && v1023 == 3)
                {
                  LOBYTE(v1023) = 5;
                }
                else
                {
                  if (v1023)
                    v1024 = 0;
                  else
                    v1024 = (v1022 & 0x40000000) == 0;
                  if (v1024)
                  {
                    LOBYTE(v1023) = 0;
                  }
                  else if ((v1022 & 0x40000000) == 0 || v1023)
                  {
                    if ((v1022 & 0x40000000) == 0 || v1023 != 1)
                    {
                      if ((v1022 & 0x40000000) == 0 && v1023 == 2)
                      {
                        LOBYTE(v1023) = 3;
                      }
                      else if (v1023 == 1 && (v1022 & 0x40000000) == 0)
                      {
                        LOBYTE(v1023) = 2;
                      }
                      else
                      {
                        LOBYTE(v1023) = 0;
                      }
                    }
                  }
                  else
                  {
                    LOBYTE(v1023) = 4;
                  }
                }
                if ((*((_WORD *)v921 + 14) & 2) != 0)
                {
                  v1025 = (_DWORD *)((char *)v921 + 24);
                  *((_DWORD *)v921 + 6) += 2;
                  if (((1 << v1023) & 0x26) != 0)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v1026 = v1201.var0.var0.var0;
                    goto LABEL_3079;
                  }
LABEL_3075:
                  {
                    WTF::String::String();
                  }
                  v1026 = (Node *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString;
                  if (WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString)
                    *(_DWORD *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString += 2;
LABEL_3079:
                  v1199.var0.var0.var0 = v1026;
                  WebCore::CompositeEditCommand::insertTextIntoNode(this, v921, v927, (const WTF::String *)&v1199);
                  v1029 = v1199.var0.var0.var0;
                  v1199.var0.var0.var0 = 0;
                  if (v1029)
                  {
                    if (*(_DWORD *)v1029 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v1029, (WTF::StringImpl *)v930);
                    else
                      *(_DWORD *)v1029 -= 2;
                  }
                  v1030 = (_QWORD *)*((_QWORD *)this + 50);
                  if (v1030 && (v1031 = *((_BYTE *)this + 412) & 7, v1031 <= 4))
                  {
                    v1032 = 1 << v1031;
                    v1033 = (WebCore::Node *)*((_QWORD *)this + 50);
                    if ((v1032 & 0x19) == 0)
                      v1033 = (WebCore::Node *)v1030[4];
                  }
                  else
                  {
                    v1033 = 0;
                  }
                  if (v921 == v1033)
                  {
                    v1034 = *v1100;
                    if (*v1100)
                    {
                      v1035 = v1034 + 1;
                      *((_DWORD *)this + 102) = v1034 + 1;
                      if ((*((_BYTE *)this + 412) & 8) != 0)
                      {
                        if (v1030 && ((*(uint64_t (**)(_QWORD *))(*v1030 + 208))(v1030) & 1) == 0)
                        {
                          if (v1035)
                            v1036 = 2;
                          else
                            v1036 = 1;
                        }
                        else
                        {
                          v1036 = 0;
                        }
                        *((_BYTE *)this + 412) = *((_BYTE *)this + 412) & 0xF8 | v1036;
                      }
                    }
                  }
                  if (*v1025 != 2)
                  {
                    *v1025 -= 2;
                    goto LABEL_2799;
                  }
                  if ((*((_WORD *)v921 + 15) & 0x400) == 0)
                  {
                    v1040 = v921;
LABEL_3281:
                    WebCore::Node::removedLastRef(v1040, v930);
                    goto LABEL_2799;
                  }
                  goto LABEL_2799;
                }
                v1055 = *((_QWORD *)this + 2);
                if (((1 << v1023) & 0x26) != 0)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v1056 = (WTF::StringImpl *)v1201.var0.var0.var0;
                  goto LABEL_3433;
                }
              }
              else
              {
                if ((*((_WORD *)v921 + 14) & 2) != 0)
                {
                  v1025 = (_DWORD *)((char *)v921 + 24);
                  *((_DWORD *)v921 + 6) += 2;
                  goto LABEL_3075;
                }
                v1055 = *((_QWORD *)this + 2);
              }
              {
                WTF::String::String();
              }
              v1056 = (WTF::StringImpl *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString;
              if (WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString)
                *(_DWORD *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString += 2;
LABEL_3433:
              v1064 = bmalloc::api::isoAllocate();
              v1066 = v1064;
              *(_OWORD *)(v1064 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v1064 + 24) = 0x320300000002;
              *(_QWORD *)(v1064 + 32) = 0;
              *(_QWORD *)(v1064 + 40) = v1055 + 96;
              *(_OWORD *)(v1064 + 48) = 0u;
              *(_OWORD *)(v1064 + 64) = 0u;
              ++*(_DWORD *)(v1055 + 3324);
              if (v1056)
              {
                v1083 = *(_DWORD *)v1056;
                *(_DWORD *)v1056 += 2;
                *(_QWORD *)(v1064 + 80) = v1056;
                *(_QWORD *)v1064 = off_1E33A8078;
                if (!v1083)
                {
                  WTF::StringImpl::destroy(v1056, v1065);
                  v1068 = *(_DWORD *)(v1066 + 24);
LABEL_3438:
                  *(_DWORD *)(v1066 + 24) = v1068 + 2;
                  v1201.var0.var0.var0 = (Node *)v1066;
                  WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v1201, (uint64_t)v921, 1);
                  v1069 = v1201.var0.var0.var0;
                  v1201.var0.var0.var0 = 0;
                  if (v1069)
                  {
                    if (*((_DWORD *)v1069 + 6) == 2)
                    {
                      if ((*((_WORD *)v1069 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v1069, v930);
                    }
                    else
                    {
                      *((_DWORD *)v1069 + 6) -= 2;
                    }
                  }
                  v1070 = *(_WORD *)(v1066 + 28);
                  *(_DWORD *)(v1066 + 24) += 2;
                  if ((v1070 & 1) != 0)
                    v1071 = 0;
                  else
                    v1071 = 3;
                  v1072 = *(_QWORD *)v1104;
                  *(_QWORD *)v1104 = v1066;
                  if (v1072)
                  {
                    if (*(_DWORD *)(v1072 + 24) == 2)
                    {
                      if ((*(_WORD *)(v1072 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v1072, v930);
                    }
                    else
                    {
                      *(_DWORD *)(v1072 + 24) -= 2;
                    }
                  }
                  *((_DWORD *)this + 98) = 0;
                  *((_BYTE *)this + 396) = v1071;
                  if (*(_DWORD *)(v1066 + 24) == 2)
                  {
                    if ((*(_WORD *)(v1066 + 30) & 0x400) == 0)
                    {
                      v1040 = (WebCore::Node *)v1066;
                      goto LABEL_3281;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v1066 + 24) -= 2;
                  }
LABEL_2799:
                  if (*((_DWORD *)v921 + 6) == 2)
                  {
                    if ((*((_WORD *)v921 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v921, v930);
                  }
                  else
                  {
                    *((_DWORD *)v921 + 6) -= 2;
                  }
                  goto LABEL_2801;
                }
                *(_DWORD *)v1056 = v1083;
              }
              else
              {
                v1067 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                {
                  *v1067 += 2;
                  *(_QWORD *)(v1064 + 80) = v1067;
                }
                else
                {
                  *(_QWORD *)(v1064 + 80) = 0;
                }
                *(_QWORD *)v1064 = off_1E33A8078;
              }
              v1068 = 2;
              goto LABEL_3438;
            }
            *(_DWORD *)v1054 = v1082;
          }
          else
          {
            v1060 = (_DWORD *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
            {
              *v1060 += 2;
              *(_QWORD *)(v1057 + 80) = v1060;
            }
            else
            {
              *(_QWORD *)(v1057 + 80) = 0;
            }
            *(_QWORD *)v1057 = off_1E33A8078;
          }
          v1061 = 2;
          goto LABEL_3417;
        }
        goto LABEL_2670;
      }
      v884 = *((_QWORD *)v1195 + 6) & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      if (!(_DWORD)v1196 || (*((_WORD *)v1195 + 14) & 4) == 0)
        goto LABEL_2670;
      v884 = *((_QWORD *)v1195 + 10);
      if ((_DWORD)v1196 != 1 && v884)
      {
        v1027 = (_DWORD)v1196 - 2;
        do
        {
          v884 = *(_QWORD *)(v884 + 56);
          v472 = v1027-- != 0;
          v1028 = v472;
        }
        while (v884 && (v1028 & 1) != 0);
      }
    }
LABEL_2663:
    if (v884)
      goto LABEL_2664;
LABEL_2671:
    v1108 = 0;
    v889 = 0;
    v888 = 1;
    goto LABEL_2672;
  }
  v878 = *((_DWORD *)v876 + 6);
  *((_DWORD *)v876 + 6) = v878 + 2;
  if (*(_QWORD *)(*((_QWORD *)v876 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v879 = *(_DWORD *)(*((_QWORD *)v876 + 30) + 12) != 2048;
    if (!v878)
    {
      if ((*((_WORD *)v876 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v876, v875);
      goto LABEL_3144;
    }
    *((_DWORD *)v876 + 6) = v878;
  }
  else
  {
    if (v878)
    {
      *((_DWORD *)v876 + 6) = v878;
      v879 = 1;
      goto LABEL_2652;
    }
    if ((*((_WORD *)v876 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v876, v875);
    v879 = 1;
LABEL_3144:
    v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
  }
LABEL_2652:
  if (*((_DWORD *)v876 + 6) == 2)
  {
    if ((*((_WORD *)v876 + 15) & 0x400) != 0)
    {
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
      if (!v879)
        goto LABEL_2819;
    }
    else
    {
      WebCore::Node::removedLastRef(v876, v875);
      v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
      if (!v879)
        goto LABEL_2819;
    }
    goto LABEL_2654;
  }
  *((_DWORD *)v876 + 6) -= 2;
  if (v879)
    goto LABEL_2654;
LABEL_2819:
  if (((v1117 | !v799) & 1) == 0
    && *((_BYTE *)this + 425)
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 680) + 370) == 3)
  {
    WebCore::VisiblePosition::canonicalPosition(v718, (uint64_t)&v1166);
    v1166.var1 = 1;
    WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1200, (uint64_t)this, v945);
    v947 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v1166.var0.var0.var0)
      v947 = 0;
    if (v947)
    {
      WebCore::startOfParagraph((uint64_t)&v1166, 1, &v1201);
      v948 = WebCore::operator==((uint64_t *)&v1166, (uint64_t *)&v1201);
      v949 = v1201.var0.var0.var0;
      v1201.var0.var0.var0 = 0;
      if (v949)
      {
        if (*((_DWORD *)v949 + 6) == 2)
        {
          if ((*((_WORD *)v949 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v949, v946);
        }
        else
        {
          *((_DWORD *)v949 + 6) -= 2;
        }
      }
      if (v948)
      {
        v950 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (!v1200.var0.var0.var0)
          v950 = 0;
        if (v950)
        {
          WebCore::endOfParagraph((WebCore::Node *)&v1200, 1, &v1201);
          v951 = WebCore::operator==((uint64_t *)&v1200, (uint64_t *)&v1201);
          v952 = v1201.var0.var0.var0;
          v1201.var0.var0.var0 = 0;
          if (v952)
          {
            if (*((_DWORD *)v952 + 6) == 2)
            {
              if ((*((_WORD *)v952 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v952, v946);
            }
            else
            {
              *((_DWORD *)v952 + 6) -= 2;
            }
          }
          if (v951)
          {
            LOBYTE(v1192) = 0;
            LOBYTE(v1189) = 0;
            WebCore::VisiblePosition::previous((WebCore::Node **)&v1166, 1, (BOOL *)&v1192, (uint64_t)&v1199);
            WebCore::VisiblePosition::next((unsigned __int8 *)&v1200, 1, (BOOL *)&v1189, (uint64_t)&v1198);
            if (!(v1192 | v1189)
              && !WebCore::isBlankParagraph((WebCore *)&v1199, v953)
              && !WebCore::isBlankParagraph((WebCore *)&v1166, v954))
            {
              v955 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
              if (!v1199.var0.var0.var0)
                v955 = 0;
              if (v955)
              {
                WebCore::endOfLine((uint64_t *)&v1201, (uint64_t)&v1199, 1, 0);
                v957 = WebCore::operator==((uint64_t *)&v1199, (uint64_t *)&v1201);
                v958 = v1201.var0.var0.var0;
                v1201.var0.var0.var0 = 0;
                if (v958)
                {
                  if (*((_DWORD *)v958 + 6) == 2)
                  {
                    if ((*((_WORD *)v958 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v958, v956);
                  }
                  else
                  {
                    *((_DWORD *)v958 + 6) -= 2;
                  }
                }
                if (v957)
                {
                  v959 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                  if (!v1198.var0.var0.var0)
                    v959 = 0;
                  if (v959)
                  {
                    WebCore::VisiblePosition::next((unsigned __int8 *)&v1198, 0, 0, (uint64_t)&v1201);
                    if (v1201.var0.var0.var0)
                    {
                      if (*((_DWORD *)v1201.var0.var0.var0 + 6) == 2)
                      {
                        if ((*((_WORD *)v1201.var0.var0.var0 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v1201.var0.var0.var0, v960);
                      }
                      else
                      {
                        *((_DWORD *)v1201.var0.var0.var0 + 6) -= 2;
                      }
                      goto LABEL_2852;
                    }
                  }
                  else
                  {
LABEL_2852:
                    v961 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                    if (!v1200.var0.var0.var0)
                      v961 = 0;
                    if (v961)
                    {
                      WebCore::VisiblePosition::next((unsigned __int8 *)&v1200, 0, 0, (uint64_t)&v1201);
                      if (!v1201.var0.var0.var0)
                        goto LABEL_2873;
                      if (*((_DWORD *)v1201.var0.var0.var0 + 6) == 2)
                      {
                        if ((*((_WORD *)v1201.var0.var0.var0 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v1201.var0.var0.var0, v962);
                      }
                      else
                      {
                        *((_DWORD *)v1201.var0.var0.var0 + 6) -= 2;
                      }
                    }
                    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1166, 0);
                    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
                    WebCore::CompositeEditCommand::insertParagraphSeparator(this, 0, 0);
                    if (*((_BYTE *)this + 225) == 2)
                    {
                      WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1195);
                      v1197 = 1;
                    }
                    else
                    {
                      v963 = *v1118;
                      WebCore::VisiblePosition::canonicalPosition(v1113, (uint64_t)&v1195);
                      v1197 = 1;
                      if (!v963)
                      {
                        v1079 = (Node *)v1195;
                        if (v1195)
                        {
                          *((_DWORD *)v1195 + 6) += 2;
                          v1201.var0.var0.var0 = v1079;
                          v1201.var0.var1 = v1196;
                          *((_BYTE *)&v1201.var0 + 12) = BYTE4(v1196);
                          v1201.var1 = 0;
                          if (!WebCore::inSameLine((WebCore *)&v1195, (const WebCore::VisiblePosition *)&v1201, v964))
                            v1197 = 0;
                          v1081 = v1201.var0.var0.var0;
                          v1201.var0.var0.var0 = 0;
                          if (v1081)
                          {
                            if (*((_DWORD *)v1081 + 6) == 2)
                            {
                              if ((*((_WORD *)v1081 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v1081, v1080);
                            }
                            else
                            {
                              *((_DWORD *)v1081 + 6) -= 2;
                            }
                          }
                        }
                      }
                    }
                    WebCore::VisiblePosition::previous(&v1195, 1, (BOOL *)&v1192, (uint64_t)&v1201);
                    v966 = v1195;
                    v1195 = 0;
                    if (v966)
                    {
                      if (*((_DWORD *)v966 + 6) == 2)
                      {
                        if ((*((_WORD *)v966 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v966, v965);
                      }
                      else
                      {
                        *((_DWORD *)v966 + 6) -= 2;
                      }
                    }
                    v967 = v1201.var0.var0.var0;
                    if (!(_BYTE)v1192)
                    {
                      if (v1201.var0.var0.var0)
                        *((_DWORD *)v1201.var0.var0.var0 + 6) += 2;
                      v968 = *(_QWORD *)v1104;
                      *(_QWORD *)v1104 = v967;
                      if (v968)
                      {
                        if (*(_DWORD *)(v968 + 24) == 2)
                        {
                          if ((*(_WORD *)(v968 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v968, v965);
                        }
                        else
                        {
                          *(_DWORD *)(v968 + 24) -= 2;
                        }
                      }
                      *((_DWORD *)this + 98) = v1201.var0.var1;
                      *((_BYTE *)this + 396) = *((_BYTE *)&v1201.var0 + 12);
                    }
                    if (v967)
                    {
                      if (*((_DWORD *)v967 + 6) == 2)
                      {
                        if ((*((_WORD *)v967 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v967, v965);
                      }
                      else
                      {
                        *((_DWORD *)v967 + 6) -= 2;
                      }
                    }
                  }
                }
              }
            }
LABEL_2873:
            LOBYTE(v1192) = 0;
            LOBYTE(v1189) = 0;
            WebCore::VisiblePosition::next((unsigned __int8 *)&v1200, 1, (BOOL *)&v1189, (uint64_t)&v1201);
            v970 = v1201.var0.var0.var0;
            v1201.var0.var0.var0 = 0;
            v971 = v1198.var0.var0.var0;
            v1198.var0.var0.var0 = v970;
            if (!v971)
              goto LABEL_2876;
            if (*((_DWORD *)v971 + 6) != 2)
            {
              *((_DWORD *)v971 + 6) -= 2;
              goto LABEL_2876;
            }
            if ((*((_WORD *)v971 + 15) & 0x400) != 0)
            {
LABEL_2876:
              v1198.var0.var1 = v1201.var0.var1;
              *((_BYTE *)&v1198.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
              v1198.var1 = v1201.var1;
            }
            else
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v971, v969);
              v1043 = v1201.var0.var0.var0;
              v1198.var0.var1 = v1201.var0.var1;
              *((_BYTE *)&v1198.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
              v1198.var1 = v1201.var1;
              v1201.var0.var0.var0 = 0;
              if (v1043)
              {
                if (*((_DWORD *)v1043 + 6) == 2)
                {
                  if ((*((_WORD *)v1043 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v1043, v1042);
                }
                else
                {
                  *((_DWORD *)v1043 + 6) -= 2;
                }
              }
            }
            WebCore::VisiblePosition::previous((WebCore::Node **)&v1166, 1, (BOOL *)&v1192, (uint64_t)&v1201);
            v972 = v1199.var0.var0.var0;
            v1199.var0.var0.var0 = v1201.var0.var0.var0;
            if (v972)
            {
              if (*((_DWORD *)v972 + 6) == 2)
              {
                if ((*((_WORD *)v972 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v972, v946);
              }
              else
              {
                *((_DWORD *)v972 + 6) -= 2;
              }
            }
            v1199.var0.var1 = v1201.var0.var1;
            *((_BYTE *)&v1199.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
            v1199.var1 = v1201.var1;
            if (!(v1189 | v1192)
              && !WebCore::isBlankParagraph((WebCore *)&v1198, (const WebCore::VisiblePosition *)v946)
              && !WebCore::isBlankParagraph((WebCore *)&v1200, (const WebCore::VisiblePosition *)v946))
            {
              v973 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
              if (!v1198.var0.var0.var0)
                v973 = 0;
              if (v973)
              {
                WebCore::startOfLine((uint64_t)&v1201, (WebCore::VisiblePosition *)&v1198, (WebCore::Node *)1, 0);
                v974 = WebCore::operator==((uint64_t *)&v1198, (uint64_t *)&v1201);
                v975 = v1201.var0.var0.var0;
                v1201.var0.var0.var0 = 0;
                if (v975)
                {
                  if (*((_DWORD *)v975 + 6) == 2)
                  {
                    if ((*((_WORD *)v975 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v975, v946);
                  }
                  else
                  {
                    *((_DWORD *)v975 + 6) -= 2;
                  }
                }
                if (v974)
                {
                  v976 = v1198.var0.var0.var0;
                  v977 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                  if (!v1198.var0.var0.var0)
                    v977 = 0;
                  if (v977)
                  {
                    WebCore::endOfLine((uint64_t *)&v1201, (uint64_t)&v1198, 1, 0);
                    v978 = WebCore::operator==((uint64_t *)&v1198, (uint64_t *)&v1201);
                    v979 = v1201.var0.var0.var0;
                    v1201.var0.var0.var0 = 0;
                    if (v979)
                    {
                      if (*((_DWORD *)v979 + 6) == 2)
                      {
                        if ((*((_WORD *)v979 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v979, v946);
                      }
                      else
                      {
                        *((_DWORD *)v979 + 6) -= 2;
                      }
                    }
                    if (!v978)
                    {
                      v976 = v1198.var0.var0.var0;
                      goto LABEL_2898;
                    }
                  }
                  else
                  {
LABEL_2898:
                    v137 = v976 == 0;
                    v980 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                    if (v137)
                      v980 = 0;
                    if (v980)
                    {
                      WebCore::VisiblePosition::next((unsigned __int8 *)&v1198, 0, 0, (uint64_t)&v1201);
                      if (!v1201.var0.var0.var0)
                        goto LABEL_2910;
                      if (*((_DWORD *)v1201.var0.var0.var0 + 6) == 2)
                      {
                        if ((*((_WORD *)v1201.var0.var0.var0 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v1201.var0.var0.var0, v946);
                      }
                      else
                      {
                        *((_DWORD *)v1201.var0.var0.var0 + 6) -= 2;
                      }
                    }
                    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v1201, (const WebCore::VisiblePosition *)&v1200, 0);
                    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
                    WebCore::CompositeEditCommand::insertParagraphSeparator(this, 0, 0);
                    v981 = *((_QWORD *)this + 24);
                    if (v981)
                      *(_DWORD *)(v981 + 24) += 2;
                    v982 = *((_QWORD *)this + 50);
                    *((_QWORD *)this + 50) = v981;
                    if (v982)
                    {
                      if (*(_DWORD *)(v982 + 24) == 2)
                      {
                        if ((*(_WORD *)(v982 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v982, v946);
                      }
                      else
                      {
                        *(_DWORD *)(v982 + 24) -= 2;
                      }
                    }
                    *v1100 = *v1112;
                    *((_BYTE *)this + 412) = *((_BYTE *)this + 204);
                  }
                }
              }
            }
LABEL_2910:
            v983 = v1198.var0.var0.var0;
            v1198.var0.var0.var0 = 0;
            if (v983)
            {
              if (*((_DWORD *)v983 + 6) == 2)
              {
                if ((*((_WORD *)v983 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v983, v946);
              }
              else
              {
                *((_DWORD *)v983 + 6) -= 2;
              }
            }
            v984 = v1199.var0.var0.var0;
            v1199.var0.var0.var0 = 0;
            if (v984)
            {
              if (*((_DWORD *)v984 + 6) == 2)
              {
                if ((*((_WORD *)v984 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v984, v946);
              }
              else
              {
                *((_DWORD *)v984 + 6) -= 2;
              }
            }
          }
        }
      }
    }
    v985 = v1200.var0.var0.var0;
    v1200.var0.var0.var0 = 0;
    if (v985)
    {
      if (*((_DWORD *)v985 + 6) == 2)
      {
        if ((*((_WORD *)v985 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v985, v946);
      }
      else
      {
        *((_DWORD *)v985 + 6) -= 2;
      }
    }
    v986 = v1166.var0.var0.var0;
    v1166.var0.var0.var0 = 0;
    if (v986)
    {
      if (*((_DWORD *)v986 + 6) == 2)
      {
        if ((*((_WORD *)v986 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v986, v946);
      }
      else
      {
        *((_DWORD *)v986 + 6) -= 2;
      }
    }
    v718 = (WebCore::ReplaceSelectionCommand *)((char *)this + 384);
  }
  if (v794)
    *((_BYTE *)this + 426) = 0;
  WebCore::VisiblePosition::canonicalPosition(v718, (uint64_t)&v1201);
  v1201.var1 = 1;
  v989 = v1201.var0.var0.var0;
  if (v1201.var0.var0.var0)
  {
    v990 = *((_DWORD *)v1201.var0.var0.var0 + 6);
    *((_DWORD *)v1201.var0.var0.var0 + 6) = v990 + 2;
    v1166.var0.var0.var0 = v989;
    v1166.var0.var1 = v1201.var0.var1;
    *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
    if (v990)
    {
      *((_DWORD *)v989 + 6) = v990;
    }
    else if ((*((_WORD *)v989 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v989, v987);
    }
  }
  else
  {
    v1166.var0.var0.var0 = 0;
    v1166.var0.var1 = v1201.var0.var1;
    *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
  }
  WebCore::ReplaceSelectionCommand::positionAtEndOfInsertedContent((WebCore::ReplaceSelectionCommand *)&v1201, (uint64_t)this, v988);
  v991 = v1201.var0.var0.var0;
  if (v1201.var0.var0.var0)
  {
    v992 = *((_DWORD *)v1201.var0.var0.var0 + 6);
    *((_DWORD *)v1201.var0.var0.var0 + 6) = v992 + 2;
    v1200.var0.var0.var0 = v991;
    v1200.var0.var1 = v1201.var0.var1;
    *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
    if (v992)
    {
      *((_DWORD *)v991 + 6) = v992;
    }
    else if ((*((_WORD *)v991 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v991, v123);
    }
  }
  else
  {
    v1200.var0.var0.var0 = 0;
    v1200.var0.var1 = v1201.var0.var1;
    *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)&v1201.var0 + 12);
  }
  v993 = v1166.var0.var0.var0;
  v994 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v1166.var0.var0.var0)
    v994 = 0;
  if (!v994 || v1166.var0.var0.var0 && (*((_BYTE *)v1166.var0.var0.var0 + 22) & 8) == 0)
    goto LABEL_2941;
  v995 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v991)
    v995 = 0;
  if (v995 && (!v991 || (*((_BYTE *)v991 + 22) & 8) != 0))
  {
    WebCore::CompositeEditCommand::rebalanceWhitespaceAt(this, (const WebCore::Position *)&v1166);
    WebCore::CompositeEditCommand::rebalanceWhitespaceAt(this, (const WebCore::Position *)&v1200);
    if (*((_BYTE *)this + 426))
    {
      if ((WebCore::CompositeEditCommand::applyStyle(this, *((WebCore::EditingStyle **)this + 52), (uint64_t *)&v1166, (uint64_t *)&v1200, 4), (v1011 = v1166.var0.var0.var0) != 0)&& (*((_BYTE *)v1166.var0.var0.var0 + 22) & 8) == 0|| v1200.var0.var0.var0 && (*((_BYTE *)v1200.var0.var0.var0 + 22) & 8) == 0)
      {
        v1012 = *(WebCore::Node **)v1113;
        if (*(_QWORD *)v1113)
          *((_DWORD *)v1012 + 6) += 2;
        v1166.var0.var0.var0 = (Node *)v1012;
        if (v1011)
        {
          if (*((_DWORD *)v1011 + 6) == 2)
          {
            if ((*((_WORD *)v1011 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1011, v1010);
          }
          else
          {
            *((_DWORD *)v1011 + 6) -= 2;
          }
        }
        v1166.var0.var1 = *v1112;
        *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)this + 204);
        v1013 = *(_QWORD *)v1093;
        if (*(_QWORD *)v1093)
          *(_DWORD *)(v1013 + 24) += 2;
        v1014 = v1200.var0.var0.var0;
        v1200.var0.var0.var0 = (Node *)v1013;
        if (v1014)
        {
          if (*((_DWORD *)v1014 + 6) == 2)
          {
            if ((*((_WORD *)v1014 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1014, v1010);
          }
          else
          {
            *((_DWORD *)v1014 + 6) -= 2;
          }
        }
        v1200.var0.var1 = *((_DWORD *)this + 54);
        *((_BYTE *)&v1200.var0 + 12) = *((_BYTE *)this + 220);
        v1015 = v1166.var0.var0.var0;
        if (v1166.var0.var0.var0)
          *((_DWORD *)v1166.var0.var0.var0 + 6) += 2;
        v1016 = *(_QWORD *)v1104;
        *(_QWORD *)v1104 = v1015;
        if (v1016)
        {
          if (*(_DWORD *)(v1016 + 24) == 2)
          {
            if ((*(_WORD *)(v1016 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1016, v1010);
          }
          else
          {
            *(_DWORD *)(v1016 + 24) -= 2;
          }
        }
        *((_DWORD *)this + 98) = v1166.var0.var1;
        *((_BYTE *)this + 396) = *((_BYTE *)&v1166.var0 + 12);
        v1017 = v1200.var0.var0.var0;
        if (v1200.var0.var0.var0)
          *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
        v1018 = *((_QWORD *)this + 50);
        *((_QWORD *)this + 50) = v1017;
        if (v1018)
        {
          if (*(_DWORD *)(v1018 + 24) == 2)
          {
            if ((*(_WORD *)(v1018 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1018, v1010);
          }
          else
          {
            *(_DWORD *)(v1018 + 24) -= 2;
          }
        }
        *v1100 = v1200.var0.var1;
        *((_BYTE *)this + 412) = *((_BYTE *)&v1200.var0 + 12);
      }
    }
    v1019 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v796)
      v1019 = 0;
    if (v1019)
    {
      if (v796)
        *((_DWORD *)v796 + 6) += 2;
      v1020 = v1200.var0.var0.var0;
      v1200.var0.var0.var0 = v796;
      if (v1020)
      {
        if (*((_DWORD *)v1020 + 6) == 2)
        {
          if ((*((_WORD *)v1020 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v1020, v1010);
        }
        else
        {
          *((_DWORD *)v1020 + 6) -= 2;
        }
      }
      v1200.var0.var1 = v1115;
      *((_BYTE *)&v1200.var0 + 12) = v797;
    }
    WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition((unsigned int *)this, (WebCore::Position *)&v1166, (WebCore::Position *)&v1200);
    WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition((unsigned int *)this, (WebCore::Position *)&v1200, (WebCore::Position *)&v1166);
LABEL_2955:
    v997 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v997 & 1) != 0
      && (*(unsigned int (**)(WebCore::ReplaceSelectionCommand *))(*(_QWORD *)this + 16))(this) == 25)
    {
      v998 = v1166.var0.var0.var0;
      if (v1166.var0.var0.var0)
        *((_DWORD *)v1166.var0.var0.var0 + 6) += 2;
      v1201.var0.var0.var0 = v998;
      v1201.var0.var1 = v1166.var0.var1;
      *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1166.var0 + 12);
      v999 = v1200.var0.var0.var0;
      if (v1200.var0.var0.var0)
        *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
      *(_QWORD *)&v1201.var1 = v999;
      var1 = v1200.var0.var1;
      v1203 = *((_BYTE *)&v1200.var0 + 12);
      v1204 = 0;
      v1205 = 0;
      v1206 &= 0xF0u;
      v1207 = 0;
      v1208 = 0;
      v1209 &= 0xF0u;
      v1210 = 0;
      v1211 = 0;
      v1212 &= 0xF0u;
      v1213 = 0;
      v1214 = 0;
      v1215 &= 0xF0u;
      v1216 = 1;
      v1217 &= ~2u;
      WebCore::VisibleSelection::validate((uint64_t)&v1201, 0);
      WebCore::VisibleSelection::operator=((uint64_t *)this + 35, (uint64_t *)&v1201);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
    }
    if (*((_BYTE *)this + 424))
    {
      v1000 = *((_BYTE *)this + 226);
      v1001 = v1166.var0.var0.var0;
      if (v1166.var0.var0.var0)
        *((_DWORD *)v1166.var0.var0.var0 + 6) += 2;
      v1002 = v1000 & 2;
      v1201.var0.var0.var0 = v1001;
      v1201.var0.var1 = v1166.var0.var1;
      *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1166.var0 + 12);
      v1003 = v1200.var0.var0.var0;
      if (v1200.var0.var0.var0)
        *((_DWORD *)v1200.var0.var0.var0 + 6) += 2;
      *(_QWORD *)&v1201.var1 = v1003;
      var1 = v1200.var0.var1;
      v1004 = *((_BYTE *)&v1200.var0 + 12);
    }
    else
    {
      v1002 = *((_BYTE *)this + 226) & 2;
      v1005 = v1200.var0.var0.var0;
      if (v1200.var0.var0.var0)
      {
        v1006 = *((_DWORD *)v1200.var0.var0.var0 + 6);
        v1201.var0.var1 = v1200.var0.var1;
        *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
        *((_DWORD *)v1200.var0.var0.var0 + 6) = v1006 + 4;
      }
      else
      {
        v1201.var0.var1 = v1200.var0.var1;
        *((_BYTE *)&v1201.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
      }
      v1201.var0.var0.var0 = v1005;
      *(_QWORD *)&v1201.var1 = v1005;
      var1 = v1200.var0.var1;
      v1004 = *((_BYTE *)&v1200.var0 + 12);
    }
    v1203 = v1004;
    v1204 = 0;
    v1205 = 0;
    v1206 &= 0xF0u;
    v1207 = 0;
    v1208 = 0;
    v1209 &= 0xF0u;
    v1210 = 0;
    v1211 = 0;
    v1212 &= 0xF0u;
    v1213 = 0;
    v1214 = 0;
    v1215 &= 0xF0u;
    v1216 = 1;
    v1217 = v1217 & 0xFD | v1002;
    WebCore::VisibleSelection::validate((uint64_t)&v1201, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v1201);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1201);
  }
  else
  {
LABEL_2941:
    v996 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v796)
      v996 = 0;
    if (v996)
    {
      if (v796)
        *((_DWORD *)v796 + 6) += 2;
      v1200.var0.var0.var0 = v796;
      if (v991)
      {
        if (*((_DWORD *)v991 + 6) == 2)
        {
          if ((*((_WORD *)v991 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v991, v123);
        }
        else
        {
          *((_DWORD *)v991 + 6) -= 2;
        }
      }
      v1200.var0.var1 = v1115;
      *((_BYTE *)&v1200.var0 + 12) = v797;
      if (v796)
        *((_DWORD *)v796 + 6) += 2;
      v1166.var0.var0.var0 = v796;
      if (v993)
      {
        if (*((_DWORD *)v993 + 6) == 2)
        {
          if ((*((_WORD *)v993 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v993, v123);
        }
        else
        {
          *((_DWORD *)v993 + 6) -= 2;
        }
      }
      v1166.var0.var1 = v1200.var0.var1;
      *((_BYTE *)&v1166.var0 + 12) = *((_BYTE *)&v1200.var0 + 12);
      goto LABEL_2955;
    }
  }
  v1007 = v1200.var0.var0.var0;
  v1200.var0.var0.var0 = 0;
  v61 = v1109;
  if (v1007)
  {
    if (*((_DWORD *)v1007 + 6) == 2)
    {
      if ((*((_WORD *)v1007 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1007, v123);
    }
    else
    {
      *((_DWORD *)v1007 + 6) -= 2;
    }
  }
  v1008 = v1166.var0.var0.var0;
  v1166.var0.var0.var0 = 0;
  if (v1008)
  {
    if (*((_DWORD *)v1008 + 6) == 2)
    {
      if ((*((_WORD *)v1008 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1008, v123);
    }
    else
    {
      *((_DWORD *)v1008 + 6) -= 2;
    }
  }
  if (v796)
  {
    if (*((_DWORD *)v796 + 6) == 2)
    {
      if ((*((_WORD *)v796 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v796, v123);
    }
    else
    {
      *((_DWORD *)v796 + 6) -= 2;
    }
  }
LABEL_2981:
  v1009 = v1120;
  v1120 = 0;
  if (v1009)
  {
    if (*((_DWORD *)v1009 + 6) == 2)
    {
      if ((*((_WORD *)v1009 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v1009, v123);
    }
    else
    {
      *((_DWORD *)v1009 + 6) -= 2;
    }
  }
  v295 = 0;
  v127 = (Node *)v1110;
LABEL_927:
  if (v1125)
  {
    if (*((_DWORD *)v1125 + 6) == 2)
    {
      if ((*((_WORD *)v1125 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v1125, v123);
    }
    else
    {
      *((_DWORD *)v1125 + 6) -= 2;
    }
  }
  if (v295)
  {
    if (*(_DWORD *)(v295 + 24) == 2)
    {
      if ((*(_WORD *)(v295 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v295, v123);
    }
    else
    {
      *(_DWORD *)(v295 + 24) -= 2;
    }
  }
  v288 = v1111;
  if (v318)
  {
    if (*(_DWORD *)(v318 + 24) == 2)
    {
      if ((*(_WORD *)(v318 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v318, v123);
    }
    else
    {
      *(_DWORD *)(v318 + 24) -= 2;
    }
  }
  if (v1127)
  {
    if (*((_DWORD *)v1127 + 6) == 2)
    {
      if ((*((_WORD *)v1127 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v1127, v123);
    }
    else
    {
      *((_DWORD *)v1127 + 6) -= 2;
    }
  }
  if (v1126)
  {
    if (*((_DWORD *)v1126 + 6) == 2)
    {
      if ((*((_WORD *)v1126 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v1126, v123);
    }
    else
    {
      *((_DWORD *)v1126 + 6) -= 2;
    }
  }
LABEL_942:
  if (v288)
  {
    if (*((_DWORD *)v288 + 6) == 2)
    {
      if ((*((_WORD *)v288 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v288, v123);
    }
    else
    {
      *((_DWORD *)v288 + 6) -= 2;
    }
  }
  v365 = v1132.var0.var0.var0;
  v1132.var0.var0.var0 = 0;
  if (v365)
  {
    if (*((_DWORD *)v365 + 6) == 2)
    {
      if ((*((_WORD *)v365 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v365, v123);
    }
    else
    {
      *((_DWORD *)v365 + 6) -= 2;
    }
  }
  if (v127)
  {
    if (*((_DWORD *)v127 + 6) == 2)
    {
      if ((*((_WORD *)v127 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v127, v123);
    }
    else
    {
      *((_DWORD *)v127 + 6) -= 2;
    }
  }
LABEL_951:
  if (v61)
  {
    if (*((_DWORD *)v61 + 6) == 2)
    {
      if ((*((_WORD *)v61 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v61, v123);
    }
    else
    {
      *((_DWORD *)v61 + 6) -= 2;
    }
  }
  v366 = v1133;
  v1133 = 0;
  if (v366)
  {
    if (*((_DWORD *)v366 + 6) == 2)
    {
      if ((*((_WORD *)v366 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v366, v123);
    }
    else
    {
      *((_DWORD *)v366 + 6) -= 2;
    }
  }
  if (v1137)
  {
    if (*((_DWORD *)v1137 + 6) == 2)
    {
      if ((*((_WORD *)v1137 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v1137, v123);
    }
    else
    {
      *((_DWORD *)v1137 + 6) -= 2;
    }
  }
  v367 = v1138;
  v1138 = 0;
  if (v367)
  {
    if (*((_DWORD *)v367 + 6) == 2)
    {
      if ((*((_WORD *)v367 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v367, v123);
    }
    else
    {
      *((_DWORD *)v367 + 6) -= 2;
    }
  }
  v368 = v1142;
  v1142 = 0;
  if (v368)
  {
    if (*((_DWORD *)v368 + 6) == 2)
    {
      if ((*((_WORD *)v368 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v368, v123);
    }
    else
    {
      *((_DWORD *)v368 + 6) -= 2;
    }
  }
LABEL_966:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1146);
}

unsigned int *WebCore::nodeToSplitToAvoidPastingIntoInlineNodesWithStyle(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v4;
  unsigned int v5;
  void *v6;
  WebCore::Node *v7;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  WebCore::Node *v11;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    && (v5 = *((_BYTE *)a2 + 12) & 7, v5 <= 4)
    && (((1 << v5) & 0x19) != 0 || (v4 = *(_QWORD *)(v4 + 32)) != 0))
  {
    *(_DWORD *)(v4 + 24) += 2;
    v10 = v4;
    WebCore::enclosingBlock(&v10, (WebCore::Node *)1, &v11);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    v10 = 0;
    WebCore::enclosingBlock(&v10, (WebCore::Node *)1, &v11);
  }
  v7 = v11;
  result = WebCore::highestEnclosingNodeOfType((unsigned int *)a2, WebCore::isInlineNodeWithStyle, 1, (uint64_t)v11, (uint64_t *)this);
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v7, v9);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return result;
}

BOOL WebCore::ReplaceSelectionCommand::shouldRemoveEndBR(WebCore::ReplaceSelectionCommand *this, WebCore::Node *a2, VisiblePosition *a3)
{
  _BOOL8 v3;
  void *v7;
  void *v8;
  WebCore::Node *v9;
  void *v10;
  BOOL v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  _BOOL4 v15;
  WebCore::Node *v16;
  _BOOL4 v18;
  WebCore::Node *v19;
  uint64_t (*v20)();
  WebCore::Node *v21;
  WebCore::Node *v23;
  WebCore::Node *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28[2];
  char v29;
  WebCore::Node *v30[2];
  WebCore::Node *v31;
  int v32;
  char v33;

  if ((*((_BYTE *)a2 + 22) & 8) == 0)
    return 0;
  *((_DWORD *)a2 + 6) += 2;
  v31 = a2;
  v32 = 0;
  v33 = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v31, (uint64_t)v28);
  v29 = 1;
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, v7);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  WebCore::previousVisuallyDistinctCandidate(v28, (uint64_t)v30);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)v30))
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v30, (uint64_t)&v31);
    v25 = v31;
    LODWORD(v26) = v32;
    BYTE4(v26) = v33;
  }
  LOBYTE(v27) = 1;
  v9 = v30[0];
  v30[0] = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v11 = WebCore::operator==((uint64_t *)&v25, (uint64_t *)a3);
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v10);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v13 = v28[0];
  if (v11)
  {
LABEL_48:
    v3 = 0;
    goto LABEL_49;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 3384) == 1)
    goto LABEL_32;
  if (!(v28[0]
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0))
    goto LABEL_32;
  WebCore::endOfBlock((unsigned int *)v28, 0, &v31);
  v15 = WebCore::operator==((uint64_t *)v28, (uint64_t *)&v31);
  v16 = v31;
  v31 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v10);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  v13 = v28[0];
  if (!v15)
    goto LABEL_32;
  if (v28[0]
     ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
     : 0)
  {
    WebCore::startOfParagraph((uint64_t)v28, 1, &v31);
    v18 = WebCore::operator==((uint64_t *)v28, (uint64_t *)&v31);
    v19 = v31;
    v31 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v10);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v13 = v28[0];
    if (v18)
    {
LABEL_32:
      if (v13)
        v20 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v20 = 0;
      if (v20)
      {
        WebCore::startOfParagraph((uint64_t)v28, 1, &v31);
        v3 = WebCore::operator==((uint64_t *)v28, (uint64_t *)&v31);
        v21 = v31;
        v31 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21, v10);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
        v13 = v28[0];
        if (!v3)
          goto LABEL_49;
        if (v28[0]
           ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
           : 0)
        {
          WebCore::endOfParagraph((WebCore::Node *)v28, 1, &v31);
          v3 = WebCore::operator==((uint64_t *)v28, (uint64_t *)&v31);
          v23 = v31;
          v31 = 0;
          if (v23)
          {
            if (*((_DWORD *)v23 + 6) == 2)
            {
              if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v23, v10);
            }
            else
            {
              *((_DWORD *)v23 + 6) -= 2;
            }
          }
          v13 = v28[0];
          goto LABEL_49;
        }
      }
      goto LABEL_48;
    }
  }
  v3 = 1;
LABEL_49:
  v28[0] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v10);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  return v3;
}

unsigned int *WebCore::enclosingInline(unsigned int *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  unsigned int *v3;
  uint64_t v4;
  char v5;
  int v6;
  __int16 v7;
  unsigned int *v8;
  char v9;

  v2 = a2;
  v3 = this;
  if (a2)
    *((_DWORD *)a2 + 6) += 2;
  *(_QWORD *)this = a2;
  v4 = *((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v6 + 2;
      v7 = *(_WORD *)(v4 + 28);
      if ((v7 & 8) != 0 && (*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
LABEL_53:
          __break(0xC471u);
          JUMPOUT(0x195B1B604);
        }
        if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
          goto LABEL_35;
      }
      if ((v7 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        goto LABEL_35;
      this = (unsigned int *)(*((_QWORD *)v2 + 6) & 0xFFFFFFFFFFFFLL);
      if (this)
        break;
      *(_DWORD *)(v4 + 24) = v6 + 4;
      *(_QWORD *)v3 = v4;
LABEL_26:
      if (*((_DWORD *)v2 + 6) == 2)
      {
        if ((*((_WORD *)v2 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v2, a2);
      }
      else
      {
        *((_DWORD *)v2 + 6) -= 2;
      }
LABEL_28:
      v9 = 1;
      v2 = (WebCore::Node *)v4;
LABEL_37:
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      if ((v9 & 1) == 0)
      {
        if ((v5 & 1) == 0)
        {
          *(_QWORD *)v3 = 0;
          if (v2)
          {
            if (*((_DWORD *)v2 + 6) == 2)
            {
              if ((*((_WORD *)v2 + 15) & 0x400) == 0)
                return WebCore::Node::removedLastRef(v2, a2);
            }
            else
            {
              *((_DWORD *)v2 + 6) -= 2;
            }
          }
        }
        return this;
      }
      v4 = *((_QWORD *)v2 + 4);
      if (!v4)
        return this;
    }
    *(_DWORD *)((*((_QWORD *)v2 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    while (1)
    {
      if ((this[7] & 8) != 0 && (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_53;
        if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
          break;
      }
      v8 = (unsigned int *)(*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL);
      if (v8)
        *(_DWORD *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
      this = v8;
      if (!v8)
      {
        *(_DWORD *)(v4 + 24) += 2;
        *(_QWORD *)v3 = v4;
        if (!v2)
          goto LABEL_28;
        goto LABEL_26;
      }
    }
    if (this[6] != 2)
    {
      v9 = 0;
      this[6] -= 2;
      goto LABEL_36;
    }
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
LABEL_35:
    v9 = 0;
LABEL_36:
    v5 = 1;
    goto LABEL_37;
  }
  return this;
}

unsigned int *WebCore::ReplaceSelectionCommand::updateNodesInserted(unsigned int *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  unsigned int *v3;
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  __int16 v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  void *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  unsigned int v16;
  char v17;

  if (!a2)
    return this;
  v2 = a2;
  v3 = this;
  if (!*((_QWORD *)this + 48))
  {
    WebCore::firstPositionInOrBeforeNode((uint64_t)a2, a2, (uint64_t)&v15);
    v5 = v15;
    v15 = 0;
    v6 = *((_QWORD *)v3 + 48);
    *((_QWORD *)v3 + 48) = v5;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
          v14 = v15;
          v3[98] = v16;
          *((_BYTE *)v3 + 396) = v17;
          v15 = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14, v13);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
          goto LABEL_7;
        }
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    v3[98] = v16;
    *((_BYTE *)v3 + 396) = v17;
  }
  do
  {
LABEL_7:
    v7 = v2;
    if ((*((_WORD *)v2 + 14) & 4) == 0)
      break;
    v2 = (WebCore::Node *)*((_QWORD *)v2 + 11);
  }
  while (v2);
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v7 + 208))(v7) & 1) != 0)
  {
    v9 = *((_WORD *)v7 + 14);
    *((_DWORD *)v7 + 6) += 2;
    if ((v9 & 1) != 0)
    {
      v12 = *((_QWORD *)v7 + 10);
      v11 = 0;
      if (v12)
        v10 = *(_DWORD *)(v12 + 4);
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 4;
    }
  }
  else
  {
    v10 = 0;
    *((_DWORD *)v7 + 6) += 2;
    v11 = 2;
  }
  this = (unsigned int *)*((_QWORD *)v3 + 50);
  *((_QWORD *)v3 + 50) = v7;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v8);
    }
    else
    {
      this[6] -= 2;
    }
  }
  v3[102] = v10;
  *((_BYTE *)v3 + 412) = v11;
  return this;
}

WebCore::Node *WebCore::ReplaceSelectionCommand::inputEventData@<X0>(WebCore::ReplaceSelectionCommand *this@<X0>, const WebCore::Position *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::Node *result;
  WTF::StringBuilder *v6;
  __n128 v7;
  uint64_t v8;
  void *v9;

  result = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
  if (result)
  {
    v8 = *((_QWORD *)this + 54);
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      result = WebCore::Node::textContent((WebCore::Node *)v8, 0, v6, a3, v7);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    else
    {
      return WebCore::Node::textContent(0, 0, v6, a3, v7);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::ReplaceSelectionCommand::inputEventDataTransfer@<X0>(WebCore::ReplaceSelectionCommand *this@<X0>, const WebCore::Position *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
  if (result)
  {
    v6 = 0;
  }
  else
  {
    result = WebCore::DataTransfer::createForInputEvent((WebCore::ReplaceSelectionCommand *)((char *)this + 456), (WebCore::ReplaceSelectionCommand *)((char *)this + 448), &v7);
    v6 = v7;
  }
  *a3 = v6;
  return result;
}

unsigned int *WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition(unsigned int *this, WebCore::Position *a2, WebCore::Position *a3)
{
  uint64_t v3;
  WebCore::Node *v6;
  unsigned int v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  WebCore::Node *v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  WebCore::Node *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  char v48;
  uint64_t v49;
  char v50;
  int v51;
  char v52;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return this;
  v6 = (WebCore::Node *)this;
  v7 = *((_BYTE *)a2 + 12) & 7;
  v8 = *((_BYTE *)a3 + 12);
  v9 = 1;
  if (v7 > 4)
    goto LABEL_5;
  v10 = *(_QWORD *)a2;
  if (((1 << v7) & 0x19) == 0)
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (!v10)
      goto LABEL_6;
  }
  if ((*(_WORD *)(v10 + 28) & 2) == 0)
  {
LABEL_5:
    v10 = 0;
LABEL_6:
    v11 = *((_BYTE *)a2 + 12) & 7;
    goto LABEL_9;
  }
  v12 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v12 + 2;
  if (!v7)
  {
    *(_DWORD *)(v10 + 24) = v12 + 4;
    v3 = v10;
    goto LABEL_44;
  }
  v9 = 0;
  v11 = *((_BYTE *)a2 + 12) & 7;
LABEL_9:
  if (v11 != 4)
  {
    v13 = v3;
    switch(v11)
    {
      case 0:
        v17 = *((_DWORD *)a2 + 2);
        if (v17 && (*(_WORD *)(v3 + 28) & 4) != 0)
        {
          v13 = *(_QWORD *)(v3 + 80);
          if (v17 != 1 && v13)
          {
            v47 = v17 - 2;
            do
            {
              v13 = *(_QWORD *)(v13 + 56);
              v20 = v47-- != 0;
              v48 = v20;
            }
            while (v13 && (v48 & 1) != 0);
          }
          goto LABEL_12;
        }
LABEL_24:
        if ((*(_WORD *)(v3 + 28) & 4) == 0)
          goto LABEL_42;
        v18 = *((_DWORD *)a2 + 2);
        v3 = *(_QWORD *)(v3 + 80);
        if (v18 && v3)
        {
          v19 = v18 - 1;
          do
          {
            v3 = *(_QWORD *)(v3 + 56);
            v20 = v19-- != 0;
            v21 = v20;
          }
          while (v3 && (v21 & 1) != 0);
        }
LABEL_37:
        if (!v3)
          goto LABEL_43;
LABEL_38:
        if ((*(_WORD *)(v3 + 28) & 2) == 0)
          goto LABEL_42;
        v22 = *(_DWORD *)(v3 + 24);
        *(_DWORD *)(v3 + 24) = v22 + 4;
        v23 = v22 + 2;
        if (v23)
        {
          *(_DWORD *)(v3 + 24) = v23;
          if ((v9 & 1) == 0)
            goto LABEL_44;
          goto LABEL_47;
        }
        if ((*(_WORD *)(v3 + 30) & 0x400) != 0)
          goto LABEL_43;
        this = WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
        if ((v9 & 1) != 0)
          goto LABEL_47;
        goto LABEL_44;
      case 1:
        v13 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        goto LABEL_12;
      case 2:
        goto LABEL_13;
      case 3:
LABEL_34:
        if ((*(_WORD *)(v3 + 28) & 4) == 0)
          goto LABEL_42;
        v14 = (uint64_t *)(v3 + 80);
LABEL_36:
        v3 = *v14;
        goto LABEL_37;
      default:
        goto LABEL_42;
    }
  }
  if ((*(_WORD *)(v3 + 28) & 4) != 0)
  {
    v13 = *(_QWORD *)(v3 + 88);
LABEL_12:
    if (!v13)
    {
LABEL_14:
      switch(v11)
      {
        case 0:
          goto LABEL_24;
        case 1:
          goto LABEL_38;
        case 2:
          v14 = (uint64_t *)(v3 + 56);
          goto LABEL_36;
        case 3:
          goto LABEL_34;
        default:
          goto LABEL_42;
      }
    }
LABEL_13:
    if ((*(_WORD *)(v13 + 28) & 2) == 0)
      goto LABEL_14;
    v15 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v15 + 4;
    v16 = v15 + 2;
    if (v16)
    {
      *(_DWORD *)(v13 + 24) = v16;
    }
    else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
    }
    v3 = v13;
    if ((v9 & 1) != 0)
      goto LABEL_47;
    goto LABEL_44;
  }
LABEL_42:
  v3 = 0;
LABEL_43:
  if ((v9 & 1) == 0)
  {
LABEL_44:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if (!v3)
    return this;
LABEL_47:
  v24 = v8 & 7;
  v25 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
  if (v25 && (*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 2) != 0)
  {
    *(_DWORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    v26 = (uint64_t *)(v25 + 80);
    WebCore::CompositeEditCommand::insertTextIntoNode(v6, (WebCore::Text *)v3, 0, (const WTF::String *)(v25 + 80));
    if (v7)
    {
      WebCore::updatePositionForNodeRemoval((uint64_t *)a2, (WebCore::Position *)v25, v28);
    }
    else
    {
      v29 = *v26;
      if (*v26)
        LODWORD(v29) = *(_DWORD *)(v29 + 4);
      v30 = *((_DWORD *)a2 + 2) + v29;
      *((_DWORD *)a2 + 2) = v30;
      if ((*((_BYTE *)a2 + 12) & 8) != 0)
      {
        if (*(_QWORD *)a2 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 208))(*(_QWORD *)a2) & 1) == 0)
        {
          if (v30)
            v31 = 2;
          else
            v31 = 1;
        }
        else
        {
          v31 = 0;
        }
        *((_BYTE *)a2 + 12) = *((_BYTE *)a2 + 12) & 0xF8 | v31;
      }
    }
    if (v24)
    {
      WebCore::updatePositionForNodeRemoval((uint64_t *)a3, (WebCore::Position *)v25, v28);
      goto LABEL_60;
    }
    v41 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
    {
LABEL_60:
      this = (unsigned int *)(*(uint64_t (**)(WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, v25, 1);
      if (*(_DWORD *)(v25 + 24) == 2)
      {
        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
      }
      else
      {
        *(_DWORD *)(v25 + 24) -= 2;
      }
      goto LABEL_62;
    }
    v42 = *((_BYTE *)a3 + 12);
    v43 = v42 & 7;
    if (v43 > 4)
    {
      v44 = 0;
    }
    else
    {
      v44 = *(_QWORD *)a3;
      if (((1 << v43) & 0x19) == 0)
        v44 = *(_QWORD *)(v41 + 32);
    }
    if (v3 == v44)
    {
      v49 = *v26;
      if (*v26)
        LODWORD(v49) = *(_DWORD *)(v49 + 4);
      v46 = *((_DWORD *)a3 + 2) + v49;
      *((_DWORD *)a3 + 2) = v46;
      if ((v42 & 8) == 0)
        goto LABEL_60;
    }
    else
    {
      if (v43 > 4)
      {
        v45 = 0;
      }
      else
      {
        v45 = *(_QWORD *)a3;
        if (((1 << v43) & 0x19) == 0)
          v45 = *(_QWORD *)(v41 + 32);
      }
      if (v45 != v25)
        goto LABEL_60;
      v46 = *((_DWORD *)a3 + 2);
      *(_DWORD *)(v3 + 24) += 2;
      *(_QWORD *)a3 = v3;
      if (*(_DWORD *)(v41 + 24) == 2)
      {
        if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v41, v27);
      }
      else
      {
        *(_DWORD *)(v41 + 24) -= 2;
      }
      *((_DWORD *)a3 + 2) = v46;
      if ((*((_BYTE *)a3 + 12) & 8) == 0)
        goto LABEL_60;
      v41 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_109;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 208))(v41) & 1) == 0)
    {
      if (v46)
        v50 = 2;
      else
        v50 = 1;
      goto LABEL_110;
    }
LABEL_109:
    v50 = 0;
LABEL_110:
    *((_BYTE *)a3 + 12) = *((_BYTE *)a3 + 12) & 0xF8 | v50;
    goto LABEL_60;
  }
LABEL_62:
  v32 = *(_QWORD *)(v3 + 56);
  if (v32 && (*(_WORD *)(v32 + 28) & 2) != 0)
  {
    *(_DWORD *)(v32 + 24) += 2;
    v33 = *(_QWORD *)(v3 + 80);
    if (v33)
      v34 = *(_DWORD *)(v33 + 4);
    else
      v34 = 0;
    WebCore::CompositeEditCommand::insertTextIntoNode(v6, (WebCore::Text *)v3, v34, (const WTF::String *)(v32 + 80));
    if (v7)
      WebCore::updatePositionForNodeRemoval((uint64_t *)a2, (WebCore::Position *)v32, v36);
    if (v24)
      goto LABEL_74;
    v37 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_74;
    v38 = *((_BYTE *)a3 + 12) & 7;
    if (v38 > 4)
      goto LABEL_74;
    v39 = 1 << v38;
    v40 = *(_QWORD *)a3;
    if ((v39 & 0x19) == 0)
      v40 = *(_QWORD *)(v37 + 32);
    if (v32 == v40)
    {
      v51 = *((_DWORD *)a3 + 2) + v34;
      *(_DWORD *)(v3 + 24) += 2;
      *(_QWORD *)a3 = v3;
      if (*(_DWORD *)(v37 + 24) == 2)
      {
        if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v37, v35);
      }
      else
      {
        *(_DWORD *)(v37 + 24) -= 2;
      }
      *((_DWORD *)a3 + 2) = v51;
      if ((*((_BYTE *)a3 + 12) & 8) != 0)
      {
        if (*(_QWORD *)a3 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 208))(*(_QWORD *)a3) & 1) == 0)
        {
          if (v51)
            v52 = 2;
          else
            v52 = 1;
        }
        else
        {
          v52 = 0;
        }
        *((_BYTE *)a3 + 12) = *((_BYTE *)a3 + 12) & 0xF8 | v52;
      }
    }
    else
    {
LABEL_74:
      WebCore::updatePositionForNodeRemoval((uint64_t *)a3, (WebCore::Position *)v32, v36);
    }
    this = (unsigned int *)(*(uint64_t (**)(WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, v32, 1);
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v32, a2);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::SetNodeAttributeCommand::doApply(WebCore::SetNodeAttributeCommand *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  const WebCore::QualifiedName *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  unsigned int *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;

  v6 = *((_QWORD *)this + 31);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = (WebCore::SetNodeAttributeCommand *)((char *)this + 256);
  v9 = *(_DWORD **)WebCore::Element::getAttribute((WebCore::Element *)v6, (WebCore::SetNodeAttributeCommand *)((char *)this + 256), a4, a5, a2);
  if (v9)
    *v9 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = v9;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = (unsigned int *)WebCore::Element::setAttribute((WebCore::Element *)v6, v7, (WTF::StringImpl **)this + 33, 0, &v14, v10);
  if (v16)
  {
    result = (unsigned int *)v15;
    v15 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SetNodeAttributeCommand::doUnapply(WebCore::SetNodeAttributeCommand *this, __n128 a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  v2 = *((_QWORD *)this + 31);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = (WTF::StringImpl **)((char *)this + 272);
  WebCore::Element::setAttribute((WebCore::Element *)v2, (WebCore::SetNodeAttributeCommand *)((char *)this + 256), (WTF::StringImpl **)this + 34, 0, &v7, a2);
  if (v9)
  {
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  result = *v3;
  *v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SetSelectionCommand::SetSelectionCommand(uint64_t a1, uint64_t *a2, __int16 a3)
{
  WebCore::Node *v6;
  void *v7;
  WebCore::Node *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  WebCore::Node *v22;

  v6 = *(WebCore::Node **)(*(_QWORD *)(a2[4] + 40) + 8);
  *((_DWORD *)v6 + 6) += 2;
  v22 = v6;
  *(_QWORD *)WebCore::EditCommand::EditCommand(a1, (uint64_t *)&v22, 59) = off_1E33A9E80;
  v8 = v22;
  v22 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v7);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  *(_QWORD *)a1 = off_1E33ADB40;
  *(_WORD *)(a1 + 242) = a3;
  v9 = *a2;
  if (*a2)
    *(_DWORD *)(v9 + 24) += 2;
  *(_QWORD *)(a1 + 248) = v9;
  v10 = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 256) = v10;
  v11 = a2[2];
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  *(_QWORD *)(a1 + 264) = v11;
  v12 = *((_DWORD *)a2 + 6);
  *(_BYTE *)(a1 + 276) = *((_BYTE *)a2 + 28);
  *(_DWORD *)(a1 + 272) = v12;
  v13 = a2[4];
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  *(_QWORD *)(a1 + 280) = v13;
  v14 = *((_DWORD *)a2 + 10);
  *(_BYTE *)(a1 + 292) = *((_BYTE *)a2 + 44);
  *(_DWORD *)(a1 + 288) = v14;
  v15 = a2[6];
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)(a1 + 296) = v15;
  v16 = *((_DWORD *)a2 + 14);
  *(_BYTE *)(a1 + 308) = *((_BYTE *)a2 + 60);
  *(_DWORD *)(a1 + 304) = v16;
  v17 = a2[8];
  if (v17)
    *(_DWORD *)(v17 + 24) += 2;
  *(_QWORD *)(a1 + 312) = v17;
  v18 = *((_DWORD *)a2 + 18);
  *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(a1 + 320) = v18;
  v19 = a2[10];
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  *(_QWORD *)(a1 + 328) = v19;
  v20 = *((_DWORD *)a2 + 22);
  *(_BYTE *)(a1 + 340) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 336) = v20;
  LOWORD(v20) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 346) = *((_BYTE *)a2 + 98);
  *(_WORD *)(a1 + 344) = v20;
  return a1;
}

uint64_t *WebCore::SetSelectionCommand::doApply(WebCore::SetSelectionCommand *this)
{
  WebCore::FrameSelection *v2;
  const WebCore::VisibleSelection *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(WebCore::FrameSelection **)(*((_QWORD *)this + 2) + 3064);
  v3 = (WebCore::SetSelectionCommand *)((char *)this + 248);
  result = (uint64_t *)WebCore::FrameSelection::shouldChangeSelection(v2, (WebCore::SetSelectionCommand *)((char *)this + 248));
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 345))
    {
      v5 = *((_QWORD *)this + 39);
      if (!v5 || (*(_BYTE *)(v5 + 22) & 8) != 0)
      {
        v6 = *((_QWORD *)this + 41);
        if (!v6 || (*(_BYTE *)(v6 + 22) & 8) != 0)
        {
          WebCore::FrameSelection::setSelection((uint64_t)v2, (uint64_t)v3, *((_WORD *)this + 121), 0, 0, 0, 0);
          return WebCore::EditCommand::setEndingSelection((uint64_t *)this, v3);
        }
      }
    }
  }
  return result;
}

void WebCore::SetSelectionCommand::doUnapply(WebCore::SetSelectionCommand *this)
{
  WebCore::FrameSelection *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(WebCore::FrameSelection **)(*((_QWORD *)this + 2) + 3064);
  v3 = (char *)this + 24;
  if (WebCore::FrameSelection::shouldChangeSelection(v2, (WebCore::SetSelectionCommand *)((char *)this + 24)))
  {
    if (*((_BYTE *)this + 121))
    {
      v4 = *((_QWORD *)this + 11);
      if (!v4 || (*(_BYTE *)(v4 + 22) & 8) != 0)
      {
        v5 = *((_QWORD *)this + 13);
        if (!v5 || (*(_BYTE *)(v5 + 22) & 8) != 0)
          WebCore::FrameSelection::setSelection((uint64_t)v2, (uint64_t)v3, *((_WORD *)this + 121), 0, 0, 0, 0);
      }
    }
  }
}

uint64_t WebCore::SimplifyMarkupCommand::doApply(WebCore::SimplifyMarkupCommand *this)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  WebCore::RenderInline *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  int v29;
  unint64_t v30;
  WebCore::Node *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WebCore::Node *v52;
  void *v53;
  WebCore::Node *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::Node *v59;
  char v60;
  WebCore::Node *v61;

  v2 = *(_QWORD *)(*((_QWORD *)this + 35) + 32);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  result = WebCore::Document::updateLayout(*((_QWORD *)this + 2), 2u, 0);
  v8 = *((_QWORD *)this + 35);
  if (!v8)
    goto LABEL_190;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  *(_DWORD *)(v8 + 24) += 2;
  v58 = v2;
  do
  {
    v12 = v8;
    if (v8 == *((_QWORD *)this + 36))
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      break;
    }
    v13 = *(_WORD *)(v8 + 28);
    if ((v13 & 4) != 0 && *(_QWORD *)(v8 + 80))
      goto LABEL_119;
    if ((v13 & 2) != 0 && *(_QWORD *)(v8 + 56))
      goto LABEL_119;
    v14 = *(_QWORD *)(v8 + 32);
    if (!v14)
      goto LABEL_119;
    v15 = *(_DWORD *)(v14 + 24);
    *(_DWORD *)(v14 + 24) = v15 + 2;
    v16 = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v16)
    {
      v30 = v10;
      goto LABEL_116;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v16 = *(_QWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v16)
        v16 = *(_QWORD *)(v16 + 8);
    }
    v59 = 0;
    v57 = v16 + 80;
    *(_DWORD *)(v14 + 24) = v15 + 4;
    v17 = v14;
    while (v17 != v2)
    {
      v18 = v17;
      if ((*(_WORD *)(v17 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
      {
        goto LABEL_80;
      }
      if (v2 == *(_QWORD *)(v17 + 32))
      {
        v17 = v2;
      }
      else
      {
        result = WebCore::CompositeEditCommand::isRemovableBlock(this, (const WebCore::Node *)v17, v5, v6, v7);
        if ((_DWORD)result)
        {
          v19 = v11;
          if (v11 == (_DWORD)v10)
          {
            v20 = v11 + ((unint64_t)v11 >> 2);
            if (v20 >= 0x10)
              v21 = v20 + 1;
            else
              v21 = 16;
            if (v21 <= (unint64_t)v11 + 1)
              v10 = v11 + 1;
            else
              v10 = v21;
            if (v10 >> 29)
            {
LABEL_206:
              __break(0xC471u);
              JUMPOUT(0x195B1CB7CLL);
            }
            v22 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
            result = (uint64_t)memcpy(v22, v9, 8 * v11);
            if (v9)
            {
              if (v22 == v9)
                v23 = 0;
              else
                v23 = v22;
              if (v22 == v9)
                v10 = 0;
              else
                v10 = v10;
              result = WTF::fastFree((WTF *)v9, v4);
              v9 = v23;
              v2 = v58;
            }
            else
            {
              v9 = v22;
            }
          }
          ++v11;
          *(_DWORD *)(v18 + 24) += 2;
          *(_QWORD *)&v9[8 * v19] = v18;
        }
        v17 = *(_QWORD *)(v18 + 32);
      }
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v18, v4);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
      if (!v17)
        goto LABEL_80;
      v24 = (WebCore::RenderInline *)(*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL);
      if (v24)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_206;
        if ((*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x20) != 0)
        {
          ++*(_DWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          result = WebCore::RenderInline::mayAffectLayout(v24, v4);
          if ((result & 1) != 0)
          {
            v25 = 5;
LABEL_69:
            v29 = *((_DWORD *)v24 + 4);
            if (!v29)
            {
              __break(0xC471u);
              JUMPOUT(0x195B1CB9CLL);
            }
            *((_DWORD *)v24 + 4) = v29 - 1;
            goto LABEL_48;
          }
          if (*(_QWORD *)(v17 + 80) != *(_QWORD *)(v17 + 88))
          {
            result = (uint64_t)v59;
            if (v59)
            {
              if (*((_DWORD *)v59 + 6) != 2)
              {
                *((_DWORD *)v59 + 6) -= 2;
                v25 = 6;
                v59 = 0;
                goto LABEL_69;
              }
              if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef(v59, v4);
            }
            v59 = 0;
            v25 = 6;
            goto LABEL_69;
          }
          v60 = 0;
          v26 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
          if (v26)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              v26 = *(_QWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
              if (v26)
                v26 = *(_QWORD *)(v26 + 8);
            }
            v27 = v26 + 80;
          }
          else
          {
            v27 = 0;
          }
          result = WebCore::RenderStyle::diff(v27, v57, (const WTF::StringImpl *)&v60);
          if ((_DWORD)result)
          {
            v28 = v59;
          }
          else
          {
            *(_DWORD *)(v17 + 24) += 2;
            v28 = (WebCore::Node *)v17;
            result = (uint64_t)v59;
            if (v59)
            {
              if (*((_DWORD *)v59 + 6) == 2)
              {
                v28 = (WebCore::Node *)v17;
                if ((*((_WORD *)v59 + 15) & 0x400) != 0)
                  goto LABEL_68;
                result = (uint64_t)WebCore::Node::removedLastRef(v59, v4);
              }
              else
              {
                *((_DWORD *)v59 + 6) -= 2;
              }
              v28 = (WebCore::Node *)v17;
            }
          }
LABEL_68:
          v25 = 0;
          v59 = v28;
          goto LABEL_69;
        }
      }
      v25 = 5;
LABEL_48:
      if (v25 == 6)
        goto LABEL_80;
    }
    v17 = v2;
LABEL_80:
    v31 = v59;
    if (v59)
    {
      *(_DWORD *)(v14 + 24) += 2;
      v30 = v10;
      v32 = v14;
      while ((WebCore::Node *)v32 != v31)
      {
        v33 = v32;
        if (v11 == (_DWORD)v30)
        {
          v34 = v11 + ((unint64_t)v11 >> 2);
          if (v34 >= 0x10)
            v35 = v34 + 1;
          else
            v35 = 16;
          if (v35 <= (unint64_t)v11 + 1)
            v30 = v11 + 1;
          else
            v30 = v35;
          if (v30 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195B1CBB4);
          }
          v36 = (char *)WTF::fastMalloc((WTF *)(8 * v30));
          result = (uint64_t)memcpy(v36, v9, 8 * v11);
          if (v9)
          {
            if (v36 == v9)
              v30 = 0;
            else
              v30 = v30;
            if (v36 == v9)
              v36 = 0;
            result = WTF::fastFree((WTF *)v9, v4);
          }
          v9 = v36;
          v37 = *(_DWORD *)(v32 + 24) + 2;
          *(_DWORD *)(v32 + 24) = v37;
          v31 = v59;
        }
        else
        {
          v37 = *(_DWORD *)(v32 + 24) + 2;
          *(_DWORD *)(v32 + 24) = v37;
        }
        *(_QWORD *)&v9[8 * v11] = v32;
        v32 = *(_QWORD *)(v32 + 32);
        if (v32)
        {
          *(_DWORD *)(v32 + 24) += 2;
          v37 = *(_DWORD *)(v33 + 24);
        }
        v38 = v37 - 2;
        if (v38)
        {
          *(_DWORD *)(v33 + 24) = v38;
        }
        else if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        {
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v33, v4);
        }
        ++v11;
        if (!v32)
          goto LABEL_111;
      }
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v31, v4);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
LABEL_111:
      if (*((_DWORD *)v31 + 6) == 2)
      {
        v2 = v58;
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v31, v4);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
        v2 = v58;
      }
    }
    else
    {
      v30 = v10;
    }
    if (v17)
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, v4);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
LABEL_116:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v14, v4);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    v10 = v30;
LABEL_119:
    if ((*(_WORD *)(v12 + 28) & 4) != 0 && (v8 = *(_QWORD *)(v12 + 80)) != 0 || (v8 = *(_QWORD *)(v12 + 56)) != 0)
    {
LABEL_125:
      *(_DWORD *)(v8 + 24) += 2;
    }
    else
    {
      v39 = v12;
      while (1)
      {
        v39 = *(_QWORD *)(v39 + 32);
        if (!v39)
          break;
        v8 = *(_QWORD *)(v39 + 56);
        if (v8)
          goto LABEL_125;
      }
      v8 = 0;
    }
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v4);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  while (v8);
  if (!v11)
    goto LABEL_189;
  v40 = 0;
  while (2)
  {
    v41 = v40 + 1;
    v42 = v40 + 1;
    if (v40 + 1 < v11)
    {
      v43 = v40;
      v42 = v40 + 1;
      while (1)
      {
        if (v43 >= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195B1CBA4);
        }
        v44 = &v9[8 * v43];
        v45 = *((_QWORD *)v44 + 1);
        v46 = *(_QWORD *)(*(_QWORD *)v44 + 32);
        if (v46 != v45)
          break;
        if (v46)
          v47 = (*(_WORD *)(v46 + 28) & 4) == 0;
        else
          v47 = 1;
        if (!v47 && *(_QWORD *)(v46 + 80) != *(_QWORD *)(v46 + 88))
          goto LABEL_159;
        ++v42;
        if (v11 - 1 == ++v43)
        {
          v42 = v11;
          goto LABEL_159;
        }
      }
      v42 = v43 + 1;
    }
LABEL_159:
    if (v42 - 1 >= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195B1CBACLL);
    }
    v48 = *(_QWORD *)&v9[8 * v42 - 8];
    *(_DWORD *)(v48 + 24) += 2;
    v49 = *(_QWORD *)(v48 + 32);
    if (v49)
    {
      v50 = *(_DWORD *)(v49 + 24);
      *(_DWORD *)(v49 + 24) = v50 + 2;
      if (v42 == v41)
      {
        v51 = 0;
        if (v50)
          goto LABEL_163;
LABEL_175:
        if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v49, v4);
      }
      else
      {
        if (v40 >= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195B1CBBCLL);
        }
        (*(void (**)(WebCore::SimplifyMarkupCommand *, _QWORD, _QWORD))(*(_QWORD *)this + 184))(this, *(_QWORD *)&v9[8 * v40], 0);
        v52 = *(WebCore::Node **)&v9[8 * v40];
        *((_DWORD *)v52 + 6) += 2;
        v61 = v52;
        WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v61, v48, 0);
        v54 = v61;
        v61 = 0;
        if (v54)
        {
          if (*((_DWORD *)v54 + 6) == 2)
          {
            if ((*((_WORD *)v54 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v54, v53);
          }
          else
          {
            *((_DWORD *)v54 + 6) -= 2;
          }
        }
        (*(void (**)(WebCore::SimplifyMarkupCommand *, uint64_t, _QWORD))(*(_QWORD *)this + 184))(this, v48, 0);
        v51 = (v42 + ~(_DWORD)v40);
        v50 = *(_DWORD *)(v49 + 24) - 2;
        if (*(_DWORD *)(v49 + 24) == 2)
          goto LABEL_175;
LABEL_163:
        *(_DWORD *)(v49 + 24) = v50;
      }
    }
    else
    {
      v51 = 0xFFFFFFFFLL;
    }
    if (*(_DWORD *)(v48 + 24) == 2)
    {
      if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v48, v4);
    }
    else
    {
      *(_DWORD *)(v48 + 24) -= 2;
    }
    if ((v51 & 0x80000000) == 0)
    {
      WebCore::CompositeEditCommand::removeNodePreservingChildren(this, *(_QWORD *)&v9[8 * v40], 0);
      v41 = v40 + v51 + 1;
    }
    v40 = v41;
    if (v41 < v11)
      continue;
    break;
  }
  v55 = 8 * v11;
  v56 = (uint64_t *)v9;
  v2 = v58;
  do
  {
    result = *v56;
    *v56 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    ++v56;
    v55 -= 8;
  }
  while (v55);
LABEL_189:
  if (v9)
  {
    result = WTF::fastFree((WTF *)v9, v4);
    if (v2)
      goto LABEL_191;
  }
  else
  {
LABEL_190:
    if (v2)
    {
LABEL_191:
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::SpellCheckRequest::SpellCheckRequest(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _DWORD **a5, char a6, char a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  _DWORD *v20;

  v11 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33ADC68;
  *(_QWORD *)(a1 + 16) = 0;
  v12 = *(_QWORD *)a2;
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v13 + 24) += 2;
  *(_QWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  v14 = *a3;
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(*a3 + 24) + 2;
  *(_QWORD *)(a1 + 56) = v14;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 2);
  v15 = a3[2];
  *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a3 + 6);
  v16 = *a4;
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(*a4 + 24) + 2;
  *(_QWORD *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  v17 = a4[2];
  *(_DWORD *)(v17 + 24) += 2;
  *(_QWORD *)(a1 + 104) = v17;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a4 + 6);
  v18 = v12;
  do
  {
    if (!WebCore::Node::hasEditableStyle(v18, 0))
      break;
    if ((*(_WORD *)(v18 + 28) & 8) != 0)
      v11 = v18;
    i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if (i == v18)
      break;
    v18 = *(_QWORD *)(v18 + 32);
  }
  while (v18);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  *(_QWORD *)(a1 + 120) = v11;
  v20 = *a5;
  if (*a5)
    *v20 += 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v20;
  *(_BYTE *)(a1 + 152) = a7;
  *(_BYTE *)(a1 + 153) = a6;
  return a1;
}

void WebCore::SpellCheckRequest::~SpellCheckRequest(WebCore::SpellCheckRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, a2);
    else
      --*(_DWORD *)v11;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::SpellCheckRequest::~SpellCheckRequest(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::SpellCheckRequest::data(WebCore::SpellCheckRequest *this)
{
  return (uint64_t)this + 128;
}

uint64_t WebCore::SpellCheckRequest::didSucceed(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  BOOL v9;
  int v10;
  WTF::StringImpl *v11;
  WebCore::SpellCheckRequest *v12;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v4 = result;
  ++*(_DWORD *)(result + 8);
  if (!*(_BYTE *)(result + 144))
  {
    v12 = (WebCore::SpellCheckRequest *)std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::SpellCheckRequest::didCancel(v12);
  }
  v6 = *(_QWORD *)(result + 136);
  v7 = *(_QWORD *)(v3 + 88);
  v8 = *(WTF::StringImpl **)(v7 + 128);
  if (v8)
    *(_DWORD *)v8 += 2;
  if (*(_BYTE *)(v7 + 144))
    v9 = *(_QWORD *)(v7 + 136) == v6;
  else
    v9 = 0;
  if (v9)
  {
    if ((*(_BYTE *)(v7 + 153) & 2) != 0)
    {
      v10 = *(_BYTE *)(v7 + 153) & 1 | 2;
    }
    else
    {
      if ((*(_BYTE *)(v7 + 153) & 1) == 0)
        goto LABEL_16;
      v10 = 1;
    }
    WebCore::removeMarkers((const WebCore::SimpleRange *)(v7 + 24), v10, 0);
  }
LABEL_16:
  WebCore::SpellChecker::didCheck(v3, v6, a2);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v11);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::fastFree((WTF *)result, v11);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)(v4 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  --*(_DWORD *)(v4 + 8);
  return result;
}

WTF *WebCore::SpellCheckRequest::didCancel(WTF *this)
{
  uint64_t v1;
  WTF *v2;
  unint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WebCore::SpellCheckRequest *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = this;
    this = *(WTF **)(v1 + 8);
    if (this)
    {
      ++*((_DWORD *)v2 + 2);
      if (*((_BYTE *)v2 + 144))
      {
        v3 = *((_QWORD *)v2 + 17);
        v11 = 0;
        v12 = 0;
        WebCore::SpellChecker::didCheck((uint64_t)this, v3, (uint64_t)&v11);
        if (HIDWORD(v12))
        {
          v5 = 48 * HIDWORD(v12);
          v6 = (char *)v11 + 24;
          do
          {
            v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 2);
            *((_QWORD *)v6 + 2) = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, v4);
              else
                *(_DWORD *)v7 -= 2;
            }
            WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
            v6 += 48;
            v5 -= 48;
          }
          while (v5);
        }
        v8 = v11;
        if (v11)
        {
          v11 = 0;
          LODWORD(v12) = 0;
          WTF::fastFree(v8, v4);
        }
        this = (WTF *)*((_QWORD *)v2 + 2);
        *((_QWORD *)v2 + 2) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
            this = (WTF *)WTF::fastFree(this, v4);
          else
            --*(_DWORD *)this;
        }
        if (*((_DWORD *)v2 + 2) == 1)
          return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v2 + 8))(v2);
        else
          --*((_DWORD *)v2 + 2);
      }
      else
      {
        v9 = (WebCore::SpellCheckRequest *)std::__throw_bad_optional_access[abi:sn180100]();
        return WebCore::SpellCheckRequest::requesterDestroyed(v9, v10);
      }
    }
  }
  return this;
}

WTF *WebCore::SpellCheckRequest::requesterDestroyed(WebCore::SpellCheckRequest *this, void *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WebCore::SpellChecker::timerFiredToProcessQueuedRequest(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v1 = this[12];
  if (v1 != this[13])
  {
    v2 = (uint64_t)this;
    v3 = this[14];
    v4 = *(_DWORD **)(v3 + 8 * v1);
    *(_QWORD *)(v3 + 8 * v1) = 0;
    v7 = v4;
    WTF::VectorTypeOperations<WTF::Ref<WebCore::SpellCheckRequest,WTF::RawPtrTraits<WebCore::SpellCheckRequest>,WTF::DefaultRefDerefTraits<WebCore::SpellCheckRequest>>>::destruct((_DWORD **)(this[14] + 8 * v1), (_DWORD **)(this[14] + 8 * v1 + 8));
    v5 = *(_QWORD *)(v2 + 96);
    if (v5 == *(unsigned int *)(v2 + 120) - 1)
      v6 = 0;
    else
      v6 = v5 + 1;
    *(_QWORD *)(v2 + 96) = v6;
    WebCore::SpellChecker::invokeRequest(v2, (uint64_t *)&v7);
    this = v7;
    if (v7)
    {
      if (v7[2] == 1)
        return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 8))();
      else
        --v7[2];
    }
  }
  return this;
}

uint64_t WebCore::SpellChecker::invokeRequest(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WebCore::Page *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(WebCore::Page **)(v4 + 8);
        if (v5)
        {
          v7 = result;
          ++*(_DWORD *)v5;
          result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v5 + 19) + 584))(*((_QWORD **)v5 + 19));
          v8 = result;
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Page::~Page(v5);
            result = WTF::fastFree(v15, v16);
            if (!v8)
              return result;
          }
          else
          {
            --*(_DWORD *)v5;
            if (!result)
              return result;
          }
          v9 = *a2;
          *a2 = 0;
          v10 = *(_DWORD **)(v7 + 88);
          *(_QWORD *)(v7 + 88) = v9;
          if (v10)
          {
            if (v10[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            else
              --v10[2];
          }
          v11 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 528)
                                                          + 8)
                                              + 24)
                                  + 8);
          ++*(_DWORD *)v11;
          v12 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v11 + 19) + 584))(*((_QWORD **)v11 + 19));
          if (*(_DWORD *)v11 == 1)
          {
            WebCore::Page::~Page(v11);
            WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)v11;
          }
          v13 = *(_QWORD *)(v7 + 88);
          v14 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
          *(_DWORD *)(v14 + 24) += 2;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v12, v13, *(_QWORD *)(v14 + 3064) + 56);
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SpellChecker::requestCheckingFor(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  WebCore::Node *v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t IdentifierInternal;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(WebCore::Page **)(v4 + 8);
        if (v5)
        {
          v7 = result;
          v8 = *a2;
          ++*(_DWORD *)v5;
          result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v5 + 19) + 584))(*((_QWORD **)v5 + 19));
          v9 = result;
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Page::~Page(v5);
            result = WTF::fastFree(v31, v32);
            if (!v9)
              return result;
          }
          else
          {
            --*(_DWORD *)v5;
            if (!result)
              return result;
          }
          v10 = *(_QWORD *)(v8 + 88);
          *(_DWORD *)(v10 + 24) += 2;
          v49 = v10;
          v50 = *(_DWORD *)(v8 + 96);
          v11 = *(_QWORD *)(v8 + 104);
          *(_DWORD *)(v11 + 24) += 2;
          v51 = v11;
          v52 = *(_DWORD *)(v8 + 112);
          WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v47, (const WebCore::SimpleRange *)&v49);
          v12 = v47;
          if (v47)
          {
            do
            {
              v13 = *((_DWORD *)v12 + 6);
              *((_DWORD *)v12 + 6) = v13 + 2;
              v14 = *((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL;
              v15 = v14 == 0;
              if (v13)
              {
                *((_DWORD *)v12 + 6) = v13;
              }
              else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v12);
              }
              if (v14)
                break;
              WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v47);
              v12 = v47;
            }
            while (v47);
          }
          else
          {
            v15 = 1;
          }
          v16 = v48;
          v48 = 0;
          if (v16)
          {
            if (*((_DWORD *)v16 + 6) == 2)
            {
              if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v16);
            }
            else
            {
              *((_DWORD *)v16 + 6) -= 2;
            }
          }
          result = (uint64_t)v47;
          v47 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)result);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          if (v11)
          {
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)v11);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
          }
          if (v10)
          {
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
          }
          if (!v15)
          {
            v17 = *(_QWORD *)(v8 + 88);
            if (v17 && (*(_WORD *)(v17 + 28) & 8) != 0)
            {
              *(_DWORD *)(v17 + 24) += 2;
              result = WebCore::Element::isSpellCheckingEnabled((WebCore::Element *)v17);
              v18 = result;
              if (*(_DWORD *)(v17 + 24) == 2)
              {
                if ((*(_WORD *)(v17 + 30) & 0x400) != 0)
                {
                  if (!(_DWORD)result)
                    return result;
                }
                else
                {
                  result = WebCore::Node::removedLastRef((WebCore::Node *)v17);
                  if ((v18 & 1) == 0)
                    return result;
                }
              }
              else
              {
                *(_DWORD *)(v17 + 24) -= 2;
                if ((result & 1) == 0)
                  return result;
              }
            }
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 680) + 664) & 0x100000000) == 0)
              return result;
            IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            *(_QWORD *)(v7 + 16) = IdentifierInternal;
            v21 = *a2;
            result = *(_QWORD *)v7;
            if (!*(_QWORD *)v7)
            {
              result = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)result = 1;
              *(_QWORD *)(result + 8) = v7;
              v22 = *(WTF **)v7;
              *(_QWORD *)v7 = result;
              if (v22)
              {
                if (*(_DWORD *)v22 == 1)
                {
                  WTF::fastFree(v22, v19);
                  result = *(_QWORD *)v7;
                  if (!*(_QWORD *)v7)
                  {
LABEL_39:
                    v23 = *(WTF **)(v21 + 16);
                    *(_QWORD *)(v21 + 16) = result;
                    if (v23)
                    {
                      if (*(_DWORD *)v23 == 1)
                        result = WTF::fastFree(v23, v19);
                      else
                        --*(_DWORD *)v23;
                    }
                    if (!*(_BYTE *)(v21 + 144))
                      *(_BYTE *)(v21 + 144) = 1;
                    *(_QWORD *)(v21 + 136) = IdentifierInternal;
                    if (((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) == 0
                       || *(double *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                      && !*(_QWORD *)(v7 + 88))
                    {
                      return WebCore::SpellChecker::invokeRequest(v7, a2);
                    }
                    v25 = *(_QWORD *)(v7 + 96);
                    v24 = *(_QWORD *)(v7 + 104);
                    if (v25 != v24)
                    {
                      v26 = *(_QWORD *)(v7 + 112);
                      v27 = *a2;
                      v28 = *(_QWORD *)(v7 + 96);
                      while (*(_QWORD *)(*a2 + 120) != *(_QWORD *)(*(_QWORD *)(v26 + 8 * v28) + 120))
                      {
                        v29 = *(unsigned int *)(v7 + 120);
                        v28 += v29 + 1;
                        do
                          v28 -= v29;
                        while (v28 >= v29);
                        if (v24 == v28)
                          goto LABEL_52;
                      }
                      *a2 = 0;
                      result = *(_QWORD *)(v26 + 8 * v28);
                      *(_QWORD *)(v26 + 8 * v28) = v27;
                      if (result)
                      {
                        if (*(_DWORD *)(result + 8) == 1)
                          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                        else
                          --*(_DWORD *)(result + 8);
                      }
                      return result;
                    }
LABEL_52:
                    if (v25)
                    {
                      if (v24 + 1 == v25)
                      {
                        LODWORD(v30) = *(_DWORD *)(v7 + 120);
LABEL_76:
                        v33 = v30;
                        v34 = ((unint64_t)v30 >> 2) + v30;
                        if (v34 <= 0xF)
                          v34 = 15;
                        if (v34 >= 0x1FFFFFFF)
                        {
                          __break(0xC471u);
                          return result;
                        }
                        v35 = *(char **)(v7 + 112);
                        v36 = v34 + 1;
                        v37 = (char *)WTF::fastMalloc((WTF *)(8 * (v34 + 1)));
                        *(_DWORD *)(v7 + 120) = v36;
                        *(_QWORD *)(v7 + 112) = v37;
                        v39 = *(_QWORD *)(v7 + 96);
                        v38 = *(_QWORD *)(v7 + 104);
                        if (v39 <= v38)
                        {
                          result = (uint64_t)memcpy(&v37[8 * v39], &v35[8 * v39], 8 * v38 - 8 * v39);
                        }
                        else
                        {
                          memcpy(v37, v35, 8 * v38);
                          v40 = *(_QWORD *)(v7 + 96);
                          v41 = v40 - v33 + *(unsigned int *)(v7 + 120);
                          result = (uint64_t)memcpy((void *)(*(_QWORD *)(v7 + 112) + 8 * v41), &v35[8 * v40], 8 * v33 - 8 * v40);
                          *(_QWORD *)(v7 + 96) = v41;
                        }
                        if (v35)
                        {
                          if (*(char **)(v7 + 112) == v35)
                          {
                            *(_QWORD *)(v7 + 112) = 0;
                            *(_DWORD *)(v7 + 120) = 0;
                          }
                          result = WTF::fastFree((WTF *)v35, v42);
                        }
                      }
                    }
                    else
                    {
                      v30 = *(unsigned int *)(v7 + 120);
                      if (v24)
                      {
                        if (v24 == v30 - 1)
                          goto LABEL_76;
                      }
                      else if (!(_DWORD)v30)
                      {
                        goto LABEL_76;
                      }
                    }
                    v44 = *(_QWORD *)(v7 + 104);
                    v43 = *(_QWORD *)(v7 + 112);
                    v45 = *a2;
                    *a2 = 0;
                    *(_QWORD *)(v43 + 8 * v44) = v45;
                    if (v44 == *(unsigned int *)(v7 + 120) - 1)
                      v46 = 0;
                    else
                      v46 = v44 + 1;
                    *(_QWORD *)(v7 + 104) = v46;
                    return result;
                  }
                }
                else
                {
                  --*(_DWORD *)v22;
                }
              }
            }
            ++*(_DWORD *)result;
            goto LABEL_39;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SpellChecker::didCheck(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WebCore::Editor *v18;
  void *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(v5 + 144))
    v6 = *(_QWORD *)(v5 + 136) == a2;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(_QWORD *)(a1 + 104);
    v9 = (_QWORD *)(a1 + 96);
    result = *(_QWORD *)(a1 + 112);
    if (v7 > v8)
    {
      WTF::VectorTypeOperations<WTF::Ref<WebCore::SpellCheckRequest,WTF::RawPtrTraits<WebCore::SpellCheckRequest>,WTF::DefaultRefDerefTraits<WebCore::SpellCheckRequest>>>::destruct((_DWORD **)result, (_DWORD **)(result + 8 * v8));
      WTF::VectorTypeOperations<WTF::Ref<WebCore::SpellCheckRequest,WTF::RawPtrTraits<WebCore::SpellCheckRequest>,WTF::DefaultRefDerefTraits<WebCore::SpellCheckRequest>>>::destruct((_DWORD **)(*(_QWORD *)(a1 + 112) + 8 * *(_QWORD *)(a1 + 96)), (_DWORD **)(*(_QWORD *)(a1 + 112) + 8 * *(unsigned int *)(a1 + 120)));
    }
    else
    {
      if (v7 == v8)
        goto LABEL_8;
      v15 = (_DWORD **)(result + 8 * v7);
      v16 = 8 * v8 - 8 * v7;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    result = *(_QWORD *)(a1 + 112);
LABEL_8:
    *v9 = 0;
    *(_QWORD *)(a1 + 104) = 0;
    if (result)
    {
      *(_QWORD *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 0;
      return WTF::fastFree((WTF *)result, (void *)v5);
    }
    return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(v11 + 3056);
  if (!v12)
  {
    v23 = a3;
    v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v18, (WebCore::Document *)v11);
    v20 = *(WebCore::Editor **)(v11 + 3056);
    *(_QWORD *)(v11 + 3056) = v18;
    if (v20)
    {
      WebCore::Editor::~Editor(v20, v19);
      if (*(_DWORD *)v21)
      {
        *(_QWORD *)(v21 + 496) = 0;
        *(_OWORD *)(v21 + 464) = 0u;
        *(_OWORD *)(v21 + 480) = 0u;
        *(_OWORD *)(v21 + 432) = 0u;
        *(_OWORD *)(v21 + 448) = 0u;
        *(_OWORD *)(v21 + 400) = 0u;
        *(_OWORD *)(v21 + 416) = 0u;
        *(_OWORD *)(v21 + 368) = 0u;
        *(_OWORD *)(v21 + 384) = 0u;
        *(_OWORD *)(v21 + 336) = 0u;
        *(_OWORD *)(v21 + 352) = 0u;
        *(_OWORD *)(v21 + 304) = 0u;
        *(_OWORD *)(v21 + 320) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 288) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 256) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)v21 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, v22);
      }
    }
    v12 = *(_QWORD *)(v11 + 3056);
    v5 = *(_QWORD *)(a1 + 88);
    a3 = v23;
  }
  WebCore::Editor::markAndReplaceFor(v12, v5, a3);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (*(_QWORD *)(a1 + 24) < a2)
    *(_QWORD *)(a1 + 24) = a2;
  result = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 104))
  {
    *(_QWORD *)(a1 + 56) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    return WebCore::TimerBase::setNextFireTime(a1 + 32, v14 + 0.0);
  }
  return result;
}

void WebCore::ReplaceNodeWithSpanCommand::~ReplaceNodeWithSpanCommand(WebCore::ReplaceNodeWithSpanCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33AD8F0;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::ReplaceNodeWithSpanCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::ReplaceNodeWithSpanCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33AD8F0;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::ReplaceNodeWithSpanCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::ReplaceNodeWithSpanCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v8);
}

void WebCore::ReplaceRangeWithTextCommand::~ReplaceRangeWithTextCommand(WebCore::ReplaceRangeWithTextCommand *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ReplaceRangeWithTextCommand::~ReplaceRangeWithTextCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E33AD948;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

void WebCore::ReplaceSelectionCommand::~ReplaceSelectionCommand(WebCore::ReplaceSelectionCommand *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ReplaceSelectionCommand::~ReplaceSelectionCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::EditingStyle *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;

  *(_QWORD *)this = off_1E33ADA18;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    WTF::fastFree(v5, a2);
  }
  v7 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (WebCore::EditingStyle *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v8, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::ReplaceSelectionCommand *)((char *)this + 280));
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, v11);
}

void WebCore::SetNodeAttributeCommand::~SetNodeAttributeCommand(WebCore::SetNodeAttributeCommand *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::SetNodeAttributeCommand::~SetNodeAttributeCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;

  *(_QWORD *)this = off_1E33ADAE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v7 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetNodeAttributeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetNodeAttributeCommand *)((char *)this + 24));
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
}

void WebCore::SetSelectionCommand::~SetSelectionCommand(WebCore::SetSelectionCommand *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E33ADB40;
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetSelectionCommand *)((char *)this + 248));
  *(_QWORD *)this = off_1E33A9E38;
  v3 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetSelectionCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetSelectionCommand *)((char *)this + 24));
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E33ADB40;
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetSelectionCommand *)((char *)this + 248));
  *(_QWORD *)this = off_1E33A9E38;
  v3 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetSelectionCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SetSelectionCommand *)((char *)this + 24));
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v6);
}

void WebCore::SimplifyMarkupCommand::~SimplifyMarkupCommand(WebCore::SimplifyMarkupCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33ADB98;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E33ADB98;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::isInlineNodeWithStyle(WebCore *this, const WebCore::Node *a2)
{
  __int16 v3;
  WebCore::EditingStyle *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t IsStyledSpanOrHTMLEquivalent;
  const WebCore::HTMLElement *v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
  {
    return 0;
  }
  v3 = *((_WORD *)this + 14);
  v4 = (v3 & 0x10) != 0 ? this : 0;
  if ((v3 & 0x10) == 0)
    return 0;
  *((_DWORD *)this + 6) += 2;
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_10:
        v8 = v8;
        v9 = (_QWORD *)(v7 + 8);
        while (1)
        {
          v10 = *(v9 - 1);
          if (v10 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            goto LABEL_20;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_20;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_10;
    }
  }
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_20:
  if ((MEMORY[0x19AEA53F4](*v9, "Apple-tab-span", 14) & 1) != 0
    || (MEMORY[0x19AEA53F4](*v9, "Apple-converted-space", 21) & 1) != 0
    || (MEMORY[0x19AEA53F4](*v9, "Apple-paste-as-quotation", 24) & 1) != 0)
  {
    IsStyledSpanOrHTMLEquivalent = 1;
  }
  else
  {
    IsStyledSpanOrHTMLEquivalent = WebCore::EditingStyle::elementIsStyledSpanOrHTMLEquivalent(v4, v12, v13, v14, v15);
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, v12);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return IsStyledSpanOrHTMLEquivalent;
}

unint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::QualifiedName>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::QualifiedName>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::QualifiedName>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::QualifiedName>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF *v13;
  void *v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        v8 = (uint64_t *)((char *)v4 + 16 * v5);
        v9 = (uint64_t *)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          v7[1] = v11;
          v12 = (WTF::StringImpl **)v9[1];
          v9[1] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
              WTF::fastFree(v13, v14);
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v9 += 2;
          v7 += 2;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::SpellChecker::*&)(void),WebCore::SpellChecker*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_DWORD **WTF::VectorTypeOperations<WTF::Ref<WebCore::SpellCheckRequest,WTF::RawPtrTraits<WebCore::SpellCheckRequest>,WTF::DefaultRefDerefTraits<WebCore::SpellCheckRequest>>>::destruct(_DWORD **result, _DWORD **a2)
{
  _DWORD *v2;
  _DWORD **v3;
  _DWORD **v4;

  for (; result != a2; ++result)
  {
    v2 = *result;
    *result = 0;
    if (v2)
    {
      if (v2[2] == 1)
      {
        v3 = a2;
        v4 = result;
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
        a2 = v3;
        result = v4;
      }
      else
      {
        --v2[2];
      }
    }
  }
  return result;
}

WebCore::SpellingCorrectionCommand *WebCore::SpellingCorrectionCommand::SpellingCorrectionCommand(WebCore::SpellingCorrectionCommand *this, const WebCore::SimpleRange *a2, const WTF::String *a3)
{
  WebCore::Node *v6;
  _QWORD *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WebCore::Node *v13;

  v6 = *(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  *((_DWORD *)v6 + 6) += 2;
  v13 = v6;
  v7 = (_QWORD *)WebCore::EditCommand::EditCommand((uint64_t)this, (uint64_t *)&v13, 17);
  v7[31] = 0;
  v7[32] = 0;
  *v7 = off_1E33A9870;
  v7[33] = 0;
  v7[34] = 0;
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33ADCC8;
  v9 = *(_QWORD *)a2;
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  *((_QWORD *)this + 35) = v9;
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v10 + 24) += 2;
  *((_QWORD *)this + 37) = v10;
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 6);
  WebCore::VisibleSelection::VisibleSelection((uint64_t)this + 312, (uint64_t)this + 280, 1, 0);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  v11 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v11 += 2;
  *((_QWORD *)this + 54) = v11;
  return this;
}

uint64_t WebCore::SpellingCorrectionCommand::willApplyCommand(WebCore::Node **this)
{
  void *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  int v5;
  WebCore::Node *v7;

  WebCore::createFragmentFromText(this + 35, (const WebCore::SimpleRange *)(this + 54), (uint64_t *)&v7);
  v3 = v7;
  v7 = 0;
  v4 = this[52];
  this[52] = v3;
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 6) - 2;
    if (*((_DWORD *)v4 + 6) != 2)
    {
LABEL_3:
      *((_DWORD *)v4 + 6) = v5;
      return WebCore::CompositeEditCommand::willApplyCommand((WebCore::CompositeEditCommand *)this, v2);
    }
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v4, v2);
      v4 = v7;
      v7 = 0;
      if (v4)
      {
        v5 = *((_DWORD *)v4 + 6) - 2;
        if (*((_DWORD *)v4 + 6) != 2)
          goto LABEL_3;
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4, v2);
      }
    }
  }
  return WebCore::CompositeEditCommand::willApplyCommand((WebCore::CompositeEditCommand *)this, v2);
}

uint64_t WebCore::SpellingCorrectionCommand::doApply(WebCore::SpellingCorrectionCommand *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  int v5;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  WTF::StringImpl *v15;

  WebCore::plainText((_DWORD *)this + 70, 0, 0, (const WTF::String *)&v15);
  v3 = v15;
  v15 = 0;
  result = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = v3;
  if (result)
  {
    v5 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v2);
      result = (uint64_t)v15;
      v15 = 0;
      if (!result)
        goto LABEL_4;
      v5 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        goto LABEL_4;
      }
    }
    *(_DWORD *)result = v5;
LABEL_4:
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  }
  if (!v3 || !*((_DWORD *)v3 + 1))
    return result;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_DWORD *)v6 + 6) += 2;
  v15 = v6;
  result = WebCore::FrameSelection::shouldChangeSelection(*((WebCore::FrameSelection **)v6 + 383), (WebCore::SpellingCorrectionCommand *)((char *)this + 312));
  if ((result & 1) == 0)
  {
    v15 = 0;
LABEL_19:
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef(v6, v7);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
    return result;
  }
  v8 = WTF::fastMalloc((WTF *)0x160);
  v14 = (uint64_t *)WebCore::SetSelectionCommand::SetSelectionCommand(v8, (uint64_t *)this + 39, 14);
  WebCore::CompositeEditCommand::applyCommandToComposite(this, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1)
      (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 2);
  }
  v10 = *((_QWORD *)this + 52);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v11 = WTF::fastMalloc((WTF *)0x1D8);
  v12 = WebCore::EditCommand::EditCommand(v11, (uint64_t *)&v15, 25);
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_QWORD *)v12 = off_1E33ADA18;
  *(_QWORD *)(v12 + 280) = 0;
  *(_DWORD *)(v12 + 288) = 0;
  *(_BYTE *)(v12 + 292) &= 0xF0u;
  *(_QWORD *)(v12 + 296) = 0;
  *(_DWORD *)(v12 + 304) = 0;
  *(_BYTE *)(v12 + 308) &= 0xF0u;
  *(_QWORD *)(v12 + 312) = 0;
  *(_DWORD *)(v12 + 320) = 0;
  *(_BYTE *)(v12 + 324) &= 0xF0u;
  *(_QWORD *)(v12 + 328) = 0;
  *(_DWORD *)(v12 + 336) = 0;
  *(_BYTE *)(v12 + 340) &= 0xF0u;
  *(_QWORD *)(v12 + 344) = 0;
  *(_DWORD *)(v12 + 352) = 0;
  *(_BYTE *)(v12 + 356) &= 0xF0u;
  *(_QWORD *)(v12 + 360) = 0;
  *(_DWORD *)(v12 + 368) = 0;
  *(_BYTE *)(v12 + 372) &= 0xF0u;
  *(_WORD *)(v12 + 376) = 1;
  *(_BYTE *)(v12 + 378) = *(_BYTE *)(v12 + 378) & 0xFC | 1;
  *(_QWORD *)(v12 + 384) = 0;
  *(_DWORD *)(v12 + 392) = 0;
  *(_BYTE *)(v12 + 396) &= 0xF0u;
  *(_QWORD *)(v12 + 400) = 0;
  *(_DWORD *)(v12 + 408) = 0;
  *(_BYTE *)(v12 + 412) &= 0xF0u;
  *(_QWORD *)(v12 + 416) = 0;
  *(_WORD *)(v12 + 424) = 0;
  *(_BYTE *)(v12 + 426) = 1;
  *(_QWORD *)(v12 + 432) = v10;
  *(_QWORD *)(v12 + 440) = 0;
  *(_QWORD *)(v12 + 461) = 0;
  *(_QWORD *)(v12 + 448) = 0;
  *(_QWORD *)(v12 + 456) = 0;
  v14 = (uint64_t *)v12;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, &v14);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  v6 = v15;
  v15 = 0;
  if (v6)
    goto LABEL_19;
  return result;
}

WTF::StringImpl *WebCore::plainText@<X0>(_DWORD *a1@<X0>, __int16 a2@<W1>, int a3@<W2>, const WTF::String *a4@<X8>)
{
  uint64_t v8;
  __int16 v9;
  void *v10;
  int v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BYTE v21[96];
  uint64_t v22;
  unsigned __int16 v23[16];
  int v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  int v27;
  char v28;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v25);
  v9 = a2 | 4;
  if (a3)
    v9 = a2;
  WebCore::TextIterator::TextIterator((uint64_t)v21, a1, v9);
  if (v22)
  {
    v11 = 0;
    do
    {
      WebCore::TextIteratorCopyableText::appendToStringBuilder(v23, (WTF::StringBuilder *)&v25);
      v11 += v24;
      WebCore::TextIterator::advance((WebCore::TextIterator *)v21, v12);
    }
    while (v22);
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v21, v13);
    if (v11)
    {
      v15 = v25;
      if (v25
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25),
            (v15 = v25) != 0))
      {
        *v15 += 2;
      }
      *(_QWORD *)a4 = v15;
      if (a3)
      {
        WebCore::Document::displayStringModifiedByEncoding((_DWORD *)v8, a4, &v20);
        v19 = v20;
        v20 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      goto LABEL_11;
    }
  }
  else
  {
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v21, v10);
  }
  v18 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v18 += 2;
  *(_QWORD *)a4 = v18;
LABEL_11:
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = (WTF::StringImpl *)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::SpellingCorrectionCommand::inputEventData@<X0>(WebCore::SpellingCorrectionCommand *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Node *result;
  _DWORD *v6;

  result = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
  if (result)
  {
    v6 = (_DWORD *)*((_QWORD *)this + 54);
    if (v6)
      *v6 += 2;
  }
  else
  {
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *WebCore::SpellingCorrectionCommand::targetRanges@<X0>(WebCore::SpellingCorrectionCommand *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *result;
  int v9;

  v3 = *((_QWORD *)this + 35);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *((_DWORD *)this + 72);
  v5 = *((_QWORD *)this + 37);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_DWORD *)this + 76);
  v7 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = v3;
  *(_DWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v5;
  *(_DWORD *)(v7 + 40) = v6;
  *(_QWORD *)v7 = off_1E33A7EF0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  a2[1] = 0x100000001;
  *a2 = result;
  v9 = *(_DWORD *)(v7 + 8);
  *result = v7;
  *(_DWORD *)(v7 + 8) = v9 + 1;
  if (!v9)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_DWORD *)(v7 + 8) = v9;
  return result;
}

unsigned int *WebCore::SpellingCorrectionCommand::inputEventDataTransfer@<X0>(WebCore::SpellingCorrectionCommand *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  WebCore::DataTransfer *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  result = (unsigned int *)WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
  if (result)
  {
    *a3 = 0;
  }
  else
  {
    v6 = (WebCore::SpellingCorrectionCommand *)((char *)this + 432);
    v7 = *((_QWORD *)this + 52);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    v16 = 0;
    v17 = 0;
    v14 = 0;
    v15 = 0;
    WebCore::serializeFragment(v7, 0, 0, 0, 0, 0, (uint64_t *)&v16, (uint64_t *)&v14, &v18);
    WebCore::DataTransfer::createForInputEvent(v6, (const WTF::String *)&v18, &v19);
    v9 = v18;
    *a3 = v19;
    v18 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (HIDWORD(v15))
      WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v14, (WTF *)((char *)v14 + 24 * HIDWORD(v15)));
    v10 = v14;
    if (v14)
    {
      v14 = 0;
      LODWORD(v15) = 0;
      WTF::fastFree(v10, v8);
    }
    if (HIDWORD(v17))
    {
      v11 = v16;
      v12 = 8 * HIDWORD(v17);
      do
      {
        v13 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v8);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v11 = (WTF *)((char *)v11 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    result = (unsigned int *)v16;
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SpellingCorrectionCommand::shouldRetainAutocorrectionIndicator(WebCore::SpellingCorrectionCommand *this)
{
  return 1;
}

unsigned int *WebCore::SplitElementCommand::executeApply(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebCore::Node **v20;
  uint64_t v21;
  unsigned int **v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;
  WebCore::Node *v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;
  unsigned __int8 v29;

  v2 = *((_QWORD *)this + 33);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3 == *((_QWORD *)this + 32))
  {
    v4 = this;
    *(_DWORD *)(v3 + 24) += 2;
    v5 = *(_QWORD *)(v3 + 80);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
    if (v5 == v2)
    {
      v6 = 0;
      v8 = 0;
      v5 = v2;
LABEL_30:
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    else
    {
      v6 = 0;
      LODWORD(v7) = 0;
      v8 = 0;
      do
      {
        v9 = v5;
        if (v6 == (_DWORD)v7)
        {
          v10 = v6 + ((unint64_t)v6 >> 2);
          if (v10 >= 0x10)
            v11 = v10 + 1;
          else
            v11 = 16;
          if (v11 <= (unint64_t)v6 + 1)
            v7 = v6 + 1;
          else
            v7 = v11;
          if (v7 >> 29)
          {
            __break(0xC471u);
            return this;
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
          this = (unsigned int *)memcpy(v12, v8, 8 * v6);
          if (v8)
          {
            if (v12 == v8)
            {
              v12 = 0;
              LODWORD(v7) = 0;
            }
            this = (unsigned int *)WTF::fastFree((WTF *)v8, a2);
          }
          v8 = v12;
        }
        v13 = *(_DWORD *)(v9 + 24) + 2;
        *(_DWORD *)(v9 + 24) = v13;
        *((_QWORD *)v8 + v6) = v9;
        v5 = *(_QWORD *)(v9 + 56);
        if (v5)
        {
          *(_DWORD *)(v5 + 24) += 2;
          v13 = *(_DWORD *)(v9 + 24);
        }
        v14 = v13 - 2;
        if (v14)
        {
          *(_DWORD *)(v9 + 24) = v14;
        }
        else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
        }
        ++v6;
      }
      while (v5 != *((_QWORD *)v4 + 33));
      if (v5)
        goto LABEL_30;
    }
    v15 = *(_QWORD *)(v3 + 32);
    if (v15)
    {
      *(_DWORD *)(v15 + 24) += 2;
      this = (unsigned int *)WebCore::Node::computeEditability(v15, 0, 1);
      if ((_DWORD)this)
      {
        v16 = *((_QWORD *)v4 + 31);
        if (v16)
          *(_DWORD *)(v16 + 24) += 2;
        *(_DWORD *)(v3 + 24) += 2;
        v26 = (WebCore::Node *)v3;
        WebCore::ContainerNode::insertBefore(v15, (uint64_t *)v16, &v26, (uint64_t)v27);
        v17 = v29;
        if (v29)
        {
          v18 = v28;
          v28 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        this = (unsigned int *)v26;
        v26 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        if (!v17)
        {
          this = (unsigned int *)WebCore::Element::removeAttribute((WebCore::Element *)v3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::idAttr);
          if (v6)
          {
            v19 = 8 * v6;
            v20 = (WebCore::Node **)v8;
            do
            {
              this = (unsigned int *)WebCore::ContainerNode::appendChild(v16, *v20, (uint64_t)v23);
              if (v25)
              {
                this = (unsigned int *)v24;
                v24 = 0;
                if (this)
                {
                  if (*this == 2)
                    this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
                  else
                    *this -= 2;
                }
              }
              ++v20;
              v19 -= 8;
            }
            while (v19);
          }
        }
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    if (v6)
    {
      v21 = 8 * v6;
      v22 = (unsigned int **)v8;
      do
      {
        this = *v22;
        *v22 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        ++v22;
        v21 -= 8;
      }
      while (v21);
    }
    if (v8)
      this = (unsigned int *)WTF::fastFree((WTF *)v8, a2);
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::SplitElementCommand::doApply(WebCore::SplitElementCommand *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::Node *v8;
  WebCore::Node *v9;

  v2 = *((_QWORD *)this + 32);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_QWORD *)this + 2);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)v2, &v9);
  v5 = v9;
  v9 = 0;
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) != 2)
    {
      *(_DWORD *)(v6 + 24) -= 2;
LABEL_4:
      v9 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v6 + 30) & 0x400) != 0)
      goto LABEL_4;
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v4);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
  }
LABEL_5:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return WebCore::SplitElementCommand::executeApply((unsigned int *)this, v4);
}

unsigned int *WebCore::SplitElementCommand::doUnapply(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::Node *v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;
  char v40;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    v3 = *((_QWORD *)this + 32);
    v4 = (_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) += 2;
    this = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
    if ((_DWORD)this)
    {
      this = (unsigned int *)WebCore::Node::computeEditability(v3, 0, 1);
      if ((_DWORD)this)
      {
        v5 = *(_QWORD *)(v2 + 80);
        if (v5)
        {
          v6 = 0;
          LODWORD(v7) = 0;
          v8 = 0;
          while (1)
          {
            if (v6 == (_DWORD)v7)
            {
              v9 = v6 + ((unint64_t)v6 >> 2);
              if (v9 >= 0x10)
                v10 = v9 + 1;
              else
                v10 = 16;
              if (v10 <= (unint64_t)v6 + 1)
                v7 = v6 + 1;
              else
                v7 = v10;
              if (v7 >> 29)
              {
                __break(0xC471u);
                return this;
              }
              v11 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
              this = (unsigned int *)memcpy(v11, v8, 8 * v6);
              if (v8)
              {
                if (v11 == v8)
                {
                  v11 = 0;
                  LODWORD(v7) = 0;
                }
                this = (unsigned int *)WTF::fastFree((WTF *)v8, a2);
              }
              v8 = v11;
            }
            *(_DWORD *)(v5 + 24) += 2;
            *((_QWORD *)v8 + v6++) = v5;
            v5 = *(_QWORD *)(v5 + 56);
            if (!v5)
              goto LABEL_22;
          }
        }
        v8 = 0;
        v6 = 0;
LABEL_22:
        v12 = *(_QWORD *)(v3 + 80);
        if (v12)
          *(_DWORD *)(v12 + 24) += 2;
        if (v6)
        {
          v13 = 8 * v6;
          v14 = (uint64_t **)v8;
          do
          {
            v15 = *v14;
            if (v12)
              *(_DWORD *)(v12 + 24) += 2;
            v37 = (WebCore::Node *)v12;
            WebCore::ContainerNode::insertBefore(v3, v15, &v37, (uint64_t)v38);
            if (v40)
            {
              v16 = v39;
              v39 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                  WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v16 -= 2;
              }
            }
            this = (unsigned int *)v37;
            v37 = 0;
            if (this)
            {
              if (this[6] == 2)
              {
                if ((*((_WORD *)this + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
              }
              else
              {
                this[6] -= 2;
              }
            }
            ++v14;
            v13 -= 8;
          }
          while (v13);
        }
        v17 = *(_QWORD *)(v2 + 104);
        if (v17 && *(_QWORD *)(v17 + 24))
        {
          v28 = *(_DWORD *)(v17 + 4);
          if ((v28 & 1) != 0)
          {
            v29 = *(_QWORD **)(v17 + 40);
            LODWORD(v30) = *(_DWORD *)(v17 + 52);
          }
          else
          {
            v29 = (_QWORD *)(v17 + 32);
            LODWORD(v30) = v28 >> 5;
          }
          if ((_DWORD)v30)
          {
            v30 = v30;
            while (1)
            {
              v31 = *v29;
              if (*v29 == WebCore::HTMLNames::idAttr
                || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
              {
                break;
              }
              v29 += 2;
              if (!--v30)
                goto LABEL_94;
            }
          }
          else
          {
LABEL_94:
            v29 = 0;
          }
          v18 = (WTF::StringImpl **)(v29 + 1);
        }
        else
        {
          v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        }
        if (!*v18)
        {
LABEL_58:
          v25 = *(_QWORD *)(v2 + 32);
          if (v25)
          {
            *(_DWORD *)(v25 + 24) += 2;
            this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v25, (WebCore::Node *)v2, &v34);
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              v26 = *(_WORD *)(v25 + 30);
              if ((v26 & 0x400) == 0)
              {
                v27 = *(_WORD *)(v25 + 28);
                if ((v27 & 0xF000) == 0x9000)
                {
                  this = WebCore::Document::removedLastRef((WebCore::Document *)v25, a2);
                }
                else
                {
                  if ((v27 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 160) + 16))(*(_QWORD *)(v25 + 160));
                    v26 = *(_WORD *)(v25 + 30);
                  }
                  *(_WORD *)(v25 + 30) = v26 | 0x400;
                  this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
                }
              }
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          else
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
          }
          if ((_BYTE)v36)
          {
            this = (unsigned int *)v35;
            v35 = 0;
            if (this)
            {
              if (*this == 2)
              {
                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
                if (!v12)
                  goto LABEL_68;
                goto LABEL_66;
              }
              *this -= 2;
            }
          }
          if (!v12)
            goto LABEL_68;
LABEL_66:
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
LABEL_68:
          if (v6)
          {
            v32 = 8 * v6;
            v33 = (unsigned int **)v8;
            do
            {
              this = *v33;
              *v33 = 0;
              if (this)
              {
                if (this[6] == 2)
                {
                  if ((*((_WORD *)this + 15) & 0x400) == 0)
                    this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
                }
                else
                {
                  this[6] -= 2;
                }
              }
              ++v33;
              v32 -= 8;
            }
            while (v32);
          }
          if (v8)
            this = (unsigned int *)WTF::fastFree((WTF *)v8, a2);
          if (!v3)
            goto LABEL_99;
          goto LABEL_97;
        }
        v19 = *(_QWORD *)(v3 + 104);
        if (!v19)
          goto LABEL_56;
        v20 = *(_DWORD *)(v19 + 4);
        if ((v20 & 1) != 0)
        {
          v21 = *(uint64_t **)(v19 + 40);
          v22 = *(_DWORD *)(v19 + 52);
          if (!v22)
          {
LABEL_56:
            v23 = 0xFFFFFFFFLL;
LABEL_57:
            this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v3, v23, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, v18, 0);
            goto LABEL_58;
          }
        }
        else
        {
          v21 = (uint64_t *)(v19 + 32);
          v22 = v20 >> 5;
          if (!v22)
            goto LABEL_56;
        }
        v23 = 0;
        while (1)
        {
          v24 = *v21;
          if (*v21 == WebCore::HTMLNames::idAttr
            || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
            && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
          {
            goto LABEL_57;
          }
          ++v23;
          v21 += 2;
          if (v22 == v23)
            goto LABEL_56;
        }
      }
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 32);
    v4 = (_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) += 2;
  }
LABEL_97:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *v4 = *(_DWORD *)(v3 + 24) - 2;
  }
LABEL_99:
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::SplitElementCommand::doReapply(unsigned int *this, void *a2)
{
  if (*((_QWORD *)this + 31))
    return WebCore::SplitElementCommand::executeApply(this, a2);
  return this;
}

uint64_t WebCore::SplitTextNodeCommand::doApply(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 256) + 32);
  if (v1)
  {
    v2 = this;
    *(_DWORD *)(v1 + 24) += 2;
    this = WebCore::Node::computeEditability(v1, 0, 1);
    if ((_DWORD)this)
    {
      v4 = *(_QWORD *)(v2 + 256);
      *(_DWORD *)(v4 + 24) += 2;
      v5 = *(WTF::StringImpl **)(v4 + 80);
      if (v5)
      {
        if (*((_DWORD *)v5 + 1) > *(_DWORD *)(v2 + 264))
        {
          this = WTF::StringImpl::substring(*(WTF::StringImpl **)(v4 + 80));
          v5 = v15;
        }
        else
        {
          *(_DWORD *)v5 += 2;
        }
      }
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      if (v5)
      {
        if (*((_DWORD *)v5 + 1))
        {
          v6 = *(_QWORD *)(v2 + 16);
          v8 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v8 + 24) = 0x300300000002;
          *(_QWORD *)(v8 + 32) = 0;
          *(_QWORD *)(v8 + 40) = v6 + 96;
          *(_OWORD *)(v8 + 48) = 0u;
          *(_OWORD *)(v8 + 64) = 0u;
          ++*(_DWORD *)(v6 + 3324);
          *(_DWORD *)v5 += 2;
          *(_QWORD *)(v8 + 80) = v5;
          *(_QWORD *)v8 = off_1E33A8078;
          v9 = *(_QWORD *)(v2 + 248);
          *(_QWORD *)(v2 + 248) = v8;
          if (v9)
          {
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
          }
          v10 = *(_DWORD **)(*(_QWORD *)(v2 + 16) + 1496);
          if (v10)
          {
            ++*v10;
            v12 = *(_QWORD *)(v2 + 248);
            v11 = *(_QWORD *)(v2 + 256);
            *(_DWORD *)(v11 + 24) += 2;
            v13 = *(unsigned int *)(v2 + 264);
            if (v12)
              *(_DWORD *)(v12 + 24) += 2;
            WebCore::DocumentMarkerController::copyMarkers((uint64_t)v10, v11, v13 << 32, (WebCore::Node *)v12);
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11, v14);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
            if (!*v10)
            {
              this = 286;
              __break(0xC471u);
              return this;
            }
            --*v10;
          }
          this = (uint64_t)WebCore::SplitTextNodeCommand::insertText1AndTrimText2((WebCore::SplitTextNodeCommand *)v2);
        }
        if (*(_DWORD *)v5 == 2)
          this = WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::SplitTextNodeCommand::insertText1AndTrimText2(WebCore::SplitTextNodeCommand *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned int *result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;

  v2 = (uint64_t *)*((_QWORD *)this + 31);
  v3 = *((_QWORD *)this + 32);
  v4 = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 24) += 4;
  v12 = (WebCore::Node *)v3;
  WebCore::ContainerNode::insertBefore(v4, v2, &v12, (uint64_t)&v13);
  v6 = v15;
  if (v15)
  {
    v7 = v14;
    v14 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  result = (unsigned int *)v12;
  v12 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (!v6)
  {
    v9 = *((_DWORD *)this + 66);
    v10 = *(_QWORD *)(v3 + 80);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 4);
    if (v10 >= v9)
      v11 = v9;
    else
      v11 = v10;
    WTF::makeStringByRemoving((WTF *)(v3 + 80), 0);
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 376))(v3, &v13, 0, v11, 0, 1);
    result = (unsigned int *)v13;
    v13 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::SplitTextNodeCommand::doUnapply(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  WTF::StringImpl *v3;
  unsigned int *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;
  unsigned int *v19;

  v1 = *((_QWORD *)this + 31);
  if (v1)
  {
    v2 = this;
    *(_DWORD *)(v1 + 24) += 2;
    this = (unsigned int *)WebCore::Node::computeEditability(v1, 0, 1);
    if ((_DWORD)this)
    {
      v4 = *(unsigned int **)(v1 + 80);
      if (v4)
        *v4 += 2;
      v19 = v4;
      v5 = *((_QWORD *)v2 + 32);
      *(_DWORD *)(v5 + 24) += 2;
      WebCore::CharacterData::insertData(v5, (const WTF::String *)&v19, 0, (uint64_t)v16);
      if (v18)
      {
        v6 = v17;
        v17 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v3);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      v7 = *(_DWORD **)(*((_QWORD *)v2 + 2) + 1496);
      if (v7)
      {
        ++*v7;
        if (v19)
          v8 = (unint64_t)v19[1] << 32;
        else
          v8 = 0;
        WebCore::DocumentMarkerController::copyMarkers((uint64_t)v7, v1, v8, (WebCore::Node *)v5);
        if (!*v7)
        {
          __break(0xC471u);
          JUMPOUT(0x195B1FF6CLL);
        }
        --*v7;
      }
      v9 = *(_QWORD *)(v1 + 32);
      if (v9)
      {
        *(_DWORD *)(v9 + 24) += 2;
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, (WebCore::Node *)v1, &v13);
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          v11 = *(_WORD *)(v9 + 30);
          if ((v11 & 0x400) == 0)
          {
            v12 = *(_WORD *)(v9 + 28);
            if ((v12 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v9, v3);
            }
            else
            {
              if ((v12 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                v11 = *(_WORD *)(v9 + 30);
              }
              *(_WORD *)(v9 + 30) = v11 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
            }
          }
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
      }
      if ((_BYTE)v15)
      {
        v10 = v14;
        v14 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v3);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, v3);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      this = v19;
      v19 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v3);
        else
          *this -= 2;
      }
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::SplitTextNodeCommand::doReapply(unsigned int *this)
{
  WebCore::SplitTextNodeCommand *v1;
  uint64_t v2;
  void *v3;

  if (*((_QWORD *)this + 31))
  {
    v1 = (WebCore::SplitTextNodeCommand *)this;
    v2 = *(_QWORD *)(*((_QWORD *)this + 32) + 32);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      this = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
      if ((_DWORD)this)
        this = WebCore::SplitTextNodeCommand::insertText1AndTrimText2(v1);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::SplitTextNodeContainingElementCommand::doApply(WebCore::SplitTextNodeContainingElementCommand *this)
{
  unsigned int *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  result = (unsigned int *)WebCore::CompositeEditCommand::splitTextNode(this, *((WebCore::Text **)this + 35), *((_DWORD *)this + 72));
  v4 = *(_QWORD *)(*((_QWORD *)this + 35) + 32);
  if (v4 && (*(_WORD *)(v4 + 28) & 8) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    result = *(unsigned int **)(v4 + 32);
    if (!result)
      goto LABEL_18;
    if ((result[7] & 8) == 0)
      goto LABEL_18;
    result = (unsigned int *)WebCore::Node::computeEditability((uint64_t)result, 0, 1);
    if (!(_DWORD)result)
      goto LABEL_18;
    v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v5)
      goto LABEL_11;
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || (v6 = *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10),
          *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v6 + 1,
          v6 == -1))
    {
      __break(0xC471u);
      JUMPOUT(0x195B2016CLL);
    }
    v7 = *(_DWORD *)(v5 + 20);
    *(_DWORD *)(v5 + 16) = v6;
    if ((v7 & 1) != 0)
    {
LABEL_11:
      result = (unsigned int *)WebCore::CompositeEditCommand::wrapContentsInDummySpan(this, (WebCore::Element *)v4);
      v8 = *(_QWORD *)(v4 + 80);
      if (!v8)
        goto LABEL_18;
      v9 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v9 + 2;
      if ((*(_WORD *)(v8 + 28) & 8) == 0)
      {
        if (v9)
        {
          *(_DWORD *)(v8 + 24) = v9;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)v8, v3);
        }
        goto LABEL_18;
      }
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      v8 = v4;
    }
    result = (unsigned int *)WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v8, *((WebCore::Node **)this + 35));
    v4 = v8;
LABEL_18:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::TextCheckingParagraph::expandRangeToNextEnd(WTF::StringImpl **this)
{
  WebCore::Node *v1;
  int v3;
  char v4;
  char v5;
  char v6;
  WebCore::Node *v7;
  WTF::StringImpl *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WebCore::Node *v15;
  int v16;
  char v17;
  WebCore::Node *v18[2];
  char v19;
  WebCore::Node *v20[3];
  WebCore::Node *v21;
  int v22;
  char v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  WebCore::Node *v27;
  int v28;
  char v29;

  WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)this);
  if (!*((_BYTE *)this + 96))
    goto LABEL_63;
  v1 = this[8];
  *((_DWORD *)v1 + 6) += 2;
  v3 = *((_DWORD *)this + 18);
  v15 = v1;
  v16 = v3;
  v4 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v1 + 208))(v1);
  if (v3)
    v5 = 10;
  else
    v5 = 9;
  if ((v4 & 1) != 0)
    v6 = 8;
  else
    v6 = v5;
  v17 = v6;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v15, (uint64_t)v18);
  v19 = 1;
  WebCore::startOfNextParagraph((WebCore *)v18, (uint64_t)v20);
  WebCore::endOfParagraph((WebCore::Node *)v20, 1, &v21);
  v7 = v21;
  if (!v21)
    goto LABEL_64;
  *((_DWORD *)v21 + 6) += 2;
  v27 = v7;
  v28 = v22;
  v29 = v23;
  WebCore::makeBoundaryPoint((uint64_t *)&v27, (uint64_t)&v24);
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  while (1)
  {
    v9 = v21;
    v21 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    v10 = v20[0];
    v20[0] = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    if (v18[0])
    {
      if (*((_DWORD *)v18[0] + 6) == 2)
      {
        if ((*((_WORD *)v18[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18[0]);
      }
      else
      {
        *((_DWORD *)v18[0] + 6) -= 2;
      }
    }
    if (*((_DWORD *)v1 + 6) == 2)
    {
      if ((*((_WORD *)v1 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v1);
    }
    else
    {
      *((_DWORD *)v1 + 6) -= 2;
    }
    if (!v26)
      break;
    if (*((_BYTE *)this + 96))
    {
      v11 = this[10];
      this[10] = v24;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      *((_DWORD *)this + 22) = v25;
      break;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    v27 = 0;
    v28 = v22;
    v29 = v23;
    WebCore::makeBoundaryPoint((uint64_t *)&v27, (uint64_t)&v24);
  }
  if (*((_BYTE *)this + 160))
    *((_BYTE *)this + 160) = 0;
  if (*((_BYTE *)this + 192))
    *((_BYTE *)this + 192) = 0;
  if (*((_BYTE *)this + 208))
    *((_BYTE *)this + 208) = 0;
  if (*((_BYTE *)this + 136))
  {
    v12 = this[15];
    this[15] = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    v13 = this[13];
    this[13] = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    *((_BYTE *)this + 136) = 0;
  }
  result = this[18];
  this[18] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Node **WebCore::TextCheckingParagraph::paragraphRange(WebCore::TextCheckingParagraph *this)
{
  WebCore::Node **v1;
  WebCore::Node *v3;
  int v4;
  char v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  int v10;
  char v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  int v15;
  int v16;
  WebCore::Node *v17;
  int v18;
  WebCore::Node *v19;
  int v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v23;
  WebCore::Node *v25;
  int v26;
  char v27;
  WebCore::Node *v28;
  int v29;
  char v30;
  char v31;
  WebCore::Node *v32;
  int v33;
  char v34;
  char v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  unsigned __int8 v39;
  WebCore::Node *v40;
  int v41;
  unsigned __int8 v42;
  WebCore::Node *v43;
  int v44;
  char v45;

  v1 = (WebCore::Node **)((char *)this + 64);
  if (*((_BYTE *)this + 96))
    return v1;
  v3 = *(WebCore::Node **)this;
  *((_DWORD *)v3 + 6) = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
  v4 = *((_DWORD *)this + 2);
  v43 = v3;
  v44 = v4;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v3 + 208))(v3) & 1) != 0)
  {
    v5 = 8;
  }
  else if (v4)
  {
    v5 = 10;
  }
  else
  {
    v5 = 9;
  }
  v45 = v5;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v43, (uint64_t)&v32);
  v35 = 1;
  WebCore::startOfParagraph((uint64_t)&v32, 1, &v36);
  v6 = v36;
  if (v36)
  {
    *((_DWORD *)v36 + 6) += 2;
    v28 = v6;
    v29 = v37;
    v30 = v38;
    WebCore::makeBoundaryPoint((uint64_t *)&v28, (uint64_t)&v40);
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  else
  {
    v28 = 0;
    v29 = v37;
    v30 = v38;
    WebCore::makeBoundaryPoint((uint64_t *)&v28, (uint64_t)&v40);
  }
  v7 = v36;
  v36 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v8 = v32;
  v32 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v3);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  v9 = (WebCore::Node *)*((_QWORD *)this + 2);
  *((_DWORD *)v9 + 6) += 2;
  v10 = *((_DWORD *)this + 6);
  v25 = v9;
  v26 = v10;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
  {
    v11 = 8;
  }
  else if (v10)
  {
    v11 = 10;
  }
  else
  {
    v11 = 9;
  }
  v27 = v11;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v25, (uint64_t)&v28);
  v31 = 1;
  WebCore::endOfParagraph((WebCore::Node *)&v28, 1, &v32);
  v12 = v32;
  if (v32)
  {
    *((_DWORD *)v32 + 6) += 2;
    v43 = v12;
    v44 = v33;
    v45 = v34;
    WebCore::makeBoundaryPoint((uint64_t *)&v43, (uint64_t)&v36);
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  else
  {
    v43 = 0;
    v44 = v33;
    v45 = v34;
    WebCore::makeBoundaryPoint((uint64_t *)&v43, (uint64_t)&v36);
  }
  v13 = v32;
  v32 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v28;
  v28 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v9);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  v15 = v42;
  v16 = v39;
  if (v42 && v39)
  {
    v17 = v40;
    *((_DWORD *)v40 + 6) += 2;
    v18 = v41;
    v19 = v36;
    *((_DWORD *)v36 + 6) += 2;
    v20 = v37;
    v21 = v19;
    goto LABEL_33;
  }
  v17 = *(WebCore::Node **)this;
  *(_DWORD *)(*(_QWORD *)this + 24) += 2;
  v18 = *((_DWORD *)this + 2);
  v19 = (WebCore::Node *)*((_QWORD *)this + 2);
  *((_DWORD *)v19 + 6) += 2;
  v20 = *((_DWORD *)this + 6);
  if (v16)
  {
    v21 = v36;
    if (v36)
    {
LABEL_33:
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
  }
  if (v15 && v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  if (!*((_BYTE *)this + 96))
    goto LABEL_48;
  v22 = *v1;
  *v1 = v17;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  *((_DWORD *)this + 18) = v18;
  v23 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v19;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 22) = v20;
  if (!*((_BYTE *)this + 96))
  {
    __break(1u);
LABEL_48:
    *((_QWORD *)this + 8) = v17;
    *((_DWORD *)this + 18) = v18;
    *((_QWORD *)this + 10) = v19;
    *((_DWORD *)this + 22) = v20;
    *((_BYTE *)this + 96) = 1;
  }
  return v1;
}

uint64_t WebCore::characterCount(int *a1, __int16 a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _BYTE v12[96];
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*(_QWORD *)a1 + 24) + 2;
  v15 = v3;
  v4 = a1[2];
  v16 = v4;
  v5 = *((_QWORD *)a1 + 2);
  *(_DWORD *)(v5 + 24) += 2;
  v17 = v5;
  v6 = a1[6];
  v18 = v6;
  v7 = (char)WebCore::treeOrder<(WebCore::TreeType)2>(a1, (uint64_t)(a1 + 4));
  if (v7 < 1)
  {
    if (!v7)
      goto LABEL_12;
    v8 = v3;
    if (v7 == 129)
      goto LABEL_12;
  }
  else
  {
    v15 = v5;
    v16 = v6;
    v17 = v3;
    v8 = v5;
    v5 = v3;
    v18 = v4;
  }
  WebCore::TextIterator::TextIterator((uint64_t)v12, &v15, a2);
  if (v13)
  {
    v10 = 0;
    do
    {
      v10 += v14;
      WebCore::TextIterator::advance((WebCore::TextIterator *)v12, v9);
    }
    while (v13);
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v12, v9);
    v17 = 0;
    if (!v5)
      goto LABEL_15;
    goto LABEL_13;
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v12, v9);
  v3 = v8;
LABEL_12:
  v10 = 0;
  v17 = 0;
  v8 = v3;
LABEL_13:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
      v8 = v15;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
LABEL_15:
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return v10;
}

void WebCore::resolveCharacterRange(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, WebCore::Node **a5@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int i;
  uint64_t v22;
  __int32 v23;
  __int32 v24;
  _BOOL4 v26;
  _BOOL4 v28;
  BOOL v29;
  WebCore::Node *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int isRendererReplacedElement;
  char v35;
  WebCore::Node *v36;
  uint64_t v37;
  unsigned int j;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  __int32 v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  __int32 v49;
  WebCore::Node *v50;
  unint64_t v51;
  __int32 v52;
  __int32 v53;
  unint64_t v54;
  WebCore::Node *v55;
  __int32 v56;
  char v57;
  WebCore::Node *v58[2];
  char v59;
  WebCore::Node *v60;
  int v61;
  char v62;
  WebCore::Node *v63;
  int v64;
  char v65;
  WebCore::Node *v66;
  __int32 v67;
  char v68;
  int32x2_t v69[12];
  WebCore::Node *v70;
  WebCore::Node *v71;
  int32x2_t v72;
  unsigned __int16 *v73;
  uint64_t v74;

  v5 = a2;
  v7 = a2 | a3;
  v8 = a1 + 4;
  if (a2)
    v9 = a1 + 4;
  else
    v9 = a1;
  v29 = v7 == 0;
  v10 = 4 * (v7 != 0);
  v11 = *(WebCore::Node **)&a1[4 * (a2 != 0)];
  if (v29)
    v8 = a1;
  *((_DWORD *)v11 + 6) += 2;
  *a5 = v11;
  *((_DWORD *)a5 + 2) = v9[2];
  v12 = *(WebCore::Node **)&a1[v10];
  *((_DWORD *)v12 + 6) += 2;
  a5[2] = v12;
  *((_DWORD *)a5 + 6) = v8[2];
  v13 = a2 + a3;
  if (__CFADD__(a2, a3))
    v13 = -1;
  v54 = v13;
  WebCore::TextIterator::TextIterator((uint64_t)v69, a1, a4);
  v15 = v70;
  if (!v70)
  {
LABEL_155:
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v69, v14);
    return;
  }
  LODWORD(v16) = 0;
  v17 = 0;
  v51 = v5;
  while (1)
  {
    v18 = v74;
    v19 = v71;
    if (v71)
    {
      v20 = *((_QWORD *)v71 + 6);
      for (i = 0; ; ++i)
      {
        v22 = v20 & 0xFFFFFFFFFFFFLL;
        if (!v22)
          break;
        v20 = *(_QWORD *)(v22 + 48);
      }
      v72 = vadd_s32(v72, vdup_n_s32(i));
      v71 = 0;
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v19);
          v15 = v70;
        }
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v23 = v72.i32[0];
    *((_DWORD *)v15 + 6) += 4;
    v24 = v72.i32[1];
    v26 = v5 >= v17 && v5 - v17 <= v18;
    v28 = v54 >= v17 && v54 - v17 <= v18;
    v29 = v28 && v18 == 1;
    if (!v29)
    {
      v30 = v15;
      if (v26)
        goto LABEL_80;
      goto LABEL_92;
    }
    if ((v74 & 0xFF00000000) != 0)
      break;
    if (!(_DWORD)v74)
      goto LABEL_156;
    v31 = *v73;
LABEL_41:
    v52 = v23;
    if (v31 != 10)
    {
      v32 = WebCore::TextIterator::node(v69);
      if (!v32)
        goto LABEL_126;
      v33 = v32;
      *(_DWORD *)(v32 + 24) += 2;
      isRendererReplacedElement = WebCore::isRendererReplacedElement(*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL);
      v35 = isRendererReplacedElement;
      if (*(_DWORD *)(v33 + 24) == 2)
      {
        if ((*(_WORD *)(v33 + 30) & 0x400) != 0)
        {
          if (!isRendererReplacedElement)
          {
LABEL_126:
            v30 = v15;
LABEL_127:
            v5 = v51;
            goto LABEL_128;
          }
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v33);
          if ((v35 & 1) == 0)
            goto LABEL_126;
        }
      }
      else
      {
        *(_DWORD *)(v33 + 24) -= 2;
        if ((isRendererReplacedElement & 1) == 0)
          goto LABEL_126;
      }
    }
    WebCore::TextIterator::advance((WebCore::TextIterator *)v69, (WTF::StringImpl *)v14);
    v30 = v70;
    if (v70)
    {
      v36 = v71;
      v23 = v52;
      if (v71)
      {
        v37 = *((_QWORD *)v71 + 6);
        for (j = 0; ; ++j)
        {
          v39 = v37 & 0xFFFFFFFFFFFFLL;
          if (!v39)
            break;
          v37 = *(_QWORD *)(v39 + 48);
        }
        v72 = vadd_s32(v72, vdup_n_s32(j));
        v71 = 0;
        if (*((_DWORD *)v36 + 6) == 2)
        {
          if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v36);
            v23 = v52;
            v30 = v70;
          }
        }
        else
        {
          *((_DWORD *)v36 + 6) -= 2;
        }
        v40 = (_DWORD *)((char *)v30 + 24);
        v24 = v72.i32[0];
        *((_DWORD *)v30 + 6) += 4;
        if (!v15)
          goto LABEL_77;
      }
      else
      {
        v40 = (_DWORD *)((char *)v70 + 24);
        v24 = v72.i32[0];
        *((_DWORD *)v70 + 6) += 4;
      }
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
        v23 = v52;
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
LABEL_77:
      if (*v40 != 2)
      {
        *v40 -= 2;
        v5 = v51;
LABEL_79:
        if (v26)
          goto LABEL_80;
        goto LABEL_92;
      }
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30);
      goto LABEL_127;
    }
    *((_DWORD *)v15 + 6) += 2;
    v55 = v15;
    v56 = v52;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v15 + 208))(v15) & 1) != 0)
    {
      v41 = 8;
    }
    else if (v52)
    {
      v41 = 10;
    }
    else
    {
      v41 = 9;
    }
    v57 = v57 & 0xF0 | v41;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v55, (uint64_t)v58);
    v59 = 1;
    WebCore::VisiblePosition::next((unsigned __int8 *)v58, 0, 0, (uint64_t)&v60);
    v42 = v60;
    v5 = v51;
    if (v60)
    {
      *((_DWORD *)v60 + 6) += 2;
      v63 = v42;
      v64 = v61;
      v65 = v62;
      WebCore::makeBoundaryPoint((uint64_t *)&v63, (uint64_t)&v66);
      v63 = 0;
      if (*((_DWORD *)v42 + 6) == 2)
      {
        v23 = v52;
        if ((*((_WORD *)v42 + 15) & 0x400) != 0)
          goto LABEL_60;
        WebCore::Node::removedLastRef(v42);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    else
    {
      v63 = 0;
      v64 = v61;
      v65 = v62;
      WebCore::makeBoundaryPoint((uint64_t *)&v63, (uint64_t)&v66);
      v63 = 0;
    }
    v23 = v52;
LABEL_60:
    v43 = v60;
    v60 = 0;
    if (v43)
    {
      if (*((_DWORD *)v43 + 6) == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v43);
          v23 = v52;
        }
      }
      else
      {
        *((_DWORD *)v43 + 6) -= 2;
      }
    }
    v44 = v58[0];
    v58[0] = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v44);
          v23 = v52;
        }
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
    }
    v55 = 0;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v15);
        v23 = v52;
      }
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
    v30 = v15;
    if (!v68)
      goto LABEL_79;
    v30 = v66;
    *((_DWORD *)v66 + 6) += 2;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v15);
        v23 = v52;
      }
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
    v24 = v67;
    if (*((_DWORD *)v30 + 6) != 2)
    {
      *((_DWORD *)v30 + 6) -= 2;
      if (v26)
        goto LABEL_80;
      goto LABEL_92;
    }
    if ((*((_WORD *)v30 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v30);
LABEL_128:
    v23 = v52;
    if (v26)
    {
LABEL_80:
      if ((*((_WORD *)v15 + 14) & 2) != 0)
      {
        v46 = v23 + v16 + v5;
        *((_DWORD *)v15 + 6) += 2;
        v45 = v15;
      }
      else
      {
        if (v5 == v17)
          v45 = v15;
        else
          v45 = v30;
        *((_DWORD *)v45 + 6) += 2;
        if (v5 == v17)
          v46 = v23;
        else
          v46 = v24;
      }
      v47 = *a5;
      *a5 = v45;
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 2)
        {
          if ((*((_WORD *)v47 + 15) & 0x400) == 0)
          {
            v53 = v23;
            WebCore::Node::removedLastRef(v47);
            v23 = v53;
          }
        }
        else
        {
          *((_DWORD *)v47 + 6) -= 2;
        }
      }
      *((_DWORD *)a5 + 2) = v46;
    }
LABEL_92:
    if (v28)
    {
      if ((*((_WORD *)v15 + 14) & 2) != 0)
      {
        v49 = v23 + v16 + v54;
        *((_DWORD *)v15 + 6) += 2;
        v48 = v15;
      }
      else
      {
        if (v54 == v17)
          v48 = v15;
        else
          v48 = v30;
        *((_DWORD *)v48 + 6) += 2;
        if (v54 == v17)
          v49 = v23;
        else
          v49 = v24;
      }
      v50 = a5[2];
      a5[2] = v48;
      if (v50)
      {
        if (*((_DWORD *)v50 + 6) == 2)
        {
          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v50);
        }
        else
        {
          *((_DWORD *)v50 + 6) -= 2;
        }
      }
      *((_DWORD *)a5 + 6) = v49;
    }
    else
    {
      v17 += v18;
    }
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    if (!v28)
    {
      WebCore::TextIterator::advance((WebCore::TextIterator *)v69, (WTF::StringImpl *)v14);
      v16 = -(uint64_t)v17;
      v15 = v70;
      if (v70)
        continue;
    }
    goto LABEL_155;
  }
  if ((_DWORD)v74)
  {
    v31 = *(unsigned __int8 *)v73;
    goto LABEL_41;
  }
LABEL_156:
  __break(1u);
}

uint64_t WebCore::TextCheckingParagraph::offsetTo@<X0>(WebCore::TextCheckingParagraph *this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node **v5;
  WebCore::Node *v6;
  int v7;
  uint64_t result;
  int v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  int v14;
  unsigned __int8 v15;
  WebCore::Node *v16;
  int v17;
  char v18;

  v5 = WebCore::TextCheckingParagraph::paragraphRange(this);
  v6 = *v5;
  *((_DWORD *)*v5 + 6) += 2;
  v7 = *((_DWORD *)v5 + 2);
  result = (uint64_t)WebCore::makeBoundaryPoint((uint64_t *)a2, (uint64_t)&v16);
  if (v18)
  {
    v11 = v6;
    v12 = v7;
    v13 = v16;
    v14 = v17;
    v15 = 1;
    result = WebCore::characterCount((int *)&v11, 0);
    *(_QWORD *)a3 = result;
    v9 = v15;
    *(_DWORD *)(a3 + 16) = 0;
    if (v9)
    {
      v10 = v13;
      v13 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      result = (uint64_t)v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
    }
  }
  else
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::TextCheckingParagraph::text(WebCore::TextCheckingParagraph *this)
{
  WTF::StringImpl *v1;
  WebCore::Node **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  if (v1)
    return *((_QWORD *)v1 + 1);
  v3 = WebCore::TextCheckingParagraph::paragraphRange(this);
  WebCore::plainText(v3, 0, 0, (const WTF::String *)&v9);
  v1 = v9;
  v9 = 0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v1;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v4);
      v5 = v9;
      v9 = 0;
      if (!v5)
        goto LABEL_5;
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v8);
        goto LABEL_5;
      }
    }
    *(_DWORD *)v5 = v6;
LABEL_5:
    v1 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  }
  if (!v1)
    return 0;
  return *((_QWORD *)v1 + 1);
}

WebCore::Node *WebCore::TextCheckingParagraph::offsetAsRange(WebCore::TextCheckingParagraph *this)
{
  char *v1;
  WebCore::Node **v3;
  WebCore::Node *v4;
  int v5;
  WebCore::Node *v6;
  int v7;
  WebCore::Node *result;
  WebCore::Node *v9;
  WebCore::Node *v10;
  int v11;
  WebCore::Node *v12;
  int v13;
  char v14;

  v1 = (char *)this + 104;
  if (*((_BYTE *)this + 136))
    return (WebCore::Node *)v1;
  v3 = WebCore::TextCheckingParagraph::paragraphRange(this);
  v4 = *v3;
  *((_DWORD *)v4 + 6) = *((_DWORD *)*v3 + 6) + 2;
  v5 = *((_DWORD *)v3 + 2);
  v6 = *(WebCore::Node **)this;
  *((_DWORD *)v6 + 6) = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
  v7 = *((_DWORD *)this + 2);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = 1;
  result = (WebCore::Node *)std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)v1, (uint64_t *)&v10);
  if (v14)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 136))
    return (WebCore::Node *)v1;
  __break(1u);
  return result;
}

WebCore::Node *WebCore::TextCheckingParagraph::automaticReplacementStart(WebCore::TextCheckingParagraph *this)
{
  WebCore::Node **v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  WebCore::Node *result;
  WebCore::Node *v7;
  int v8;
  WebCore::Node *v9;
  int v10;

  if (*((_BYTE *)this + 192))
    return (WebCore::Node *)*((_QWORD *)this + 23);
  v2 = WebCore::TextCheckingParagraph::paragraphRange(this);
  v3 = *v2;
  *((_DWORD *)v3 + 6) = *((_DWORD *)*v2 + 6) + 2;
  v7 = v3;
  v8 = *((_DWORD *)v2 + 2);
  v4 = (WebCore::Node *)*((_QWORD *)this + 4);
  *((_DWORD *)v4 + 6) += 2;
  v9 = v4;
  v10 = *((_DWORD *)this + 10);
  *((_QWORD *)this + 23) = WebCore::characterCount((int *)&v7, 0);
  *((_BYTE *)this + 192) = 1;
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  if (*((_BYTE *)this + 192))
    return (WebCore::Node *)*((_QWORD *)this + 23);
  __break(1u);
  return result;
}

uint64_t WebCore::WordAwareIterator::advance(WebCore::WordAwareIterator *this, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  *((_WORD *)this + 128) = 0;
  result = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_QWORD *)this + 34) = 0;
  v4 = (uint64_t *)((char *)this + 280);
  if (*((_DWORD *)this + 72))
  {
LABEL_54:
    if (*((_DWORD *)this + 73))
      *((_DWORD *)this + 73) = 0;
    result = *v4;
    if (*v4)
    {
      *((_QWORD *)this + 35) = 0;
      *((_DWORD *)this + 72) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  if (!*((_BYTE *)this + 296))
    result = WebCore::TextIterator::advance(this, a2);
  *((_BYTE *)this + 296) = 0;
  if (*((_QWORD *)this + 12))
  {
    while (1)
    {
      v5 = *((_QWORD *)this + 19);
      if ((_DWORD)v5)
        break;
      result = WebCore::TextIterator::advance(this, a2);
      if (!*((_QWORD *)this + 12))
        return result;
    }
    while (1)
    {
      v6 = *((_QWORD *)this + 18);
      v7 = v5 - 1;
      if ((v5 & 0xFF00000000) != 0)
      {
        if (!(_DWORD)v5)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        result = *(unsigned __int8 *)(v6 + v7);
      }
      else
      {
        if (!(_DWORD)v5)
          goto LABEL_53;
        result = *(unsigned __int16 *)(v6 + 2 * v7);
        if (result > 0xFF)
        {
          result = MEMORY[0x19AEA858C]();
          if ((_DWORD)result == 9)
            return result;
          goto LABEL_25;
        }
      }
      if (result <= 0x20u && ((1 << result) & 0x100003600) != 0 || (_DWORD)result == 11)
        return result;
LABEL_25:
      if (!*((_DWORD *)this + 73))
      {
        *((_WORD *)this + 128) = *((_WORD *)this + 60);
        v10 = (_DWORD *)*((_QWORD *)this + 16);
        if (v10)
          *v10 += 2;
        v11 = (WTF::StringImpl *)*((_QWORD *)this + 33);
        *((_QWORD *)this + 33) = v10;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        *((_QWORD *)this + 34) = *((_QWORD *)this + 17);
      }
      result = WebCore::TextIterator::advance(this, a2);
      if (!*((_QWORD *)this + 12) || (v12 = *((_QWORD *)this + 19), !(_DWORD)v12))
      {
LABEL_50:
        *((_BYTE *)this + 296) = 1;
        return result;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)this + 18);
      if ((v12 & 0xFF00000000) != 0)
      {
        result = *v13;
      }
      else
      {
        result = *(unsigned __int16 *)v13;
        if (result > 0xFF)
        {
          result = MEMORY[0x19AEA858C]();
          if ((_DWORD)result == 9)
            goto LABEL_50;
          goto LABEL_42;
        }
      }
      if (result <= 0x20u && ((1 << result) & 0x100003600) != 0 || (_DWORD)result == 11)
        goto LABEL_50;
LABEL_42:
      if (!*((_DWORD *)this + 73))
      {
        v14 = WebCore::TextIteratorCopyableText::text((unsigned int *)this + 64);
        WTF::append<char16_t,0ul>((char *)this + 280, v14, v15);
        *((_WORD *)this + 128) = 0;
        v17 = (WTF::StringImpl *)*((_QWORD *)this + 33);
        *((_QWORD *)this + 33) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        *((_QWORD *)this + 34) = 0;
      }
      WTF::append<char16_t,0ul>((char *)this + 280, *((_OWORD **)this + 18), *((_QWORD *)this + 19));
      v5 = *((_QWORD *)this + 19);
    }
  }
  return result;
}

void WebCore::TextInsertionBaseCommand::applyTextInsertionCommand(uint64_t a1, WebCore::CompositeEditCommand *a2, const WebCore::VisibleSelection *a3, const WebCore::VisibleSelection *a4)
{
  if ((WebCore::operator==((uint64_t)a3, (uint64_t)a4) & 1) != 0)
  {
    WebCore::CompositeEditCommand::apply(a2);
  }
  else
  {
    WebCore::EditCommand::setStartingSelection(a2, a3);
    WebCore::EditCommand::setEndingSelection((uint64_t *)a2, a3);
    WebCore::CompositeEditCommand::apply(a2);
    WebCore::EditCommand::setEndingSelection((uint64_t *)a2, a4);
    WebCore::FrameSelection::setSelection(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), (uint64_t)a4, 6u, 0, 0, 0, 0);
  }
}

uint64_t WebCore::dispatchBeforeTextInsertedEvent@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, const WebCore::VisibleSelection *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *v5;
  WebCore::EventNames **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t i;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t j;
  WTF::StringImpl *v17;

  v5 = *(WTF::StringImpl **)this;
  if ((_DWORD)a3)
  {
    if (v5)
      *(_DWORD *)v5 += 2;
    *a4 = v5;
  }
  else
  {
    v6 = (WebCore::EventNames **)this;
    if (v5)
      *(_DWORD *)v5 += 2;
    *a4 = v5;
    v7 = *((_QWORD *)a2 + 8);
    if (v7)
    {
      v8 = *((_BYTE *)a2 + 76) & 7;
      if (v8 <= 4 && (((1 << v8) & 0x19) != 0 || (v7 = *(_QWORD *)(v7 + 32)) != 0))
      {
        v9 = 0;
        *(_DWORD *)(v7 + 24) += 2;
        v10 = v7;
        do
        {
          this = WebCore::Node::hasEditableStyle(v10, 0);
          if (!(_DWORD)this)
            break;
          if ((*(_WORD *)(v10 + 28) & 8) != 0)
            v9 = v10;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1272);
          if (i)
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              i = 0;
            }
          }
          if (i == v10)
            break;
          v10 = *(_QWORD *)(v10 + 32);
        }
        while (v10);
        if (v9)
        {
          v13 = bmalloc::api::isoAllocate();
          WebCore::BeforeTextInsertedEvent::BeforeTextInsertedEvent((WebCore::EventNames **)v13, v6);
          v14 = 0;
          v15 = v7;
          do
          {
            if (!WebCore::Node::hasEditableStyle(v15, 0))
              break;
            if ((*(_WORD *)(v15 + 28) & 8) != 0)
              v14 = (WebCore::Node *)v15;
            j = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1272);
            if (j)
            {
              if ((*(_WORD *)(j + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
                {
                  if ((*(_WORD *)(j + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                j = 0;
              }
            }
            if (j == v15)
              break;
            v15 = *(_QWORD *)(v15 + 32);
          }
          while (v15);
          if (v14)
            *((_DWORD *)v14 + 6) += 2;
          this = (*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v14 + 48))(v14, v13);
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef(v14, v11);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
          v17 = *(WTF::StringImpl **)(v13 + 72);
          if (v17)
            *(_DWORD *)v17 += 2;
          *a4 = v17;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              this = WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v5 -= 2;
          }
          if (*(_DWORD *)(v13 + 16) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          else
            --*(_DWORD *)(v13 + 16);
        }
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
    }
  }
  return this;
}

BOOL WebCore::canAppendNewLineFeedToSelection(WebCore *this, const WebCore::VisibleSelection *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v4;
  WebCore *v5;
  uint64_t v6;
  WebCore *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _BOOL8 v16;
  WTF::StringImpl *v18;

  v2 = WebCore::editableRootForPosition((uint64_t)this + 64, 0);
  if (!v2)
    return 0;
  v3 = v2;
  *(_DWORD *)(v2 + 24) += 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (WebCore *)bmalloc::api::isoAllocate();
  v5 = v4;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(WebCore **)(v6 + 96)) == 0)
  {
    v4 = (WebCore *)WebCore::threadGlobalDataSlow(v4);
    v7 = v4;
  }
  v8 = *((_QWORD *)v7 + 5);
  if (!v8)
  {
    v4 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *((_QWORD *)v7 + 5);
  }
  WTF::MonotonicTime::now(v4);
  *((_QWORD *)v5 + 1) = 0;
  v11 = *((_DWORD *)v5 + 5) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v8 + 2336) != 0);
  *((_DWORD *)v5 + 4) = 1;
  *((_DWORD *)v5 + 5) = v11;
  v12 = *(_DWORD **)(v8 + 2336);
  if (v12)
    *v12 += 2;
  *((_QWORD *)v5 + 3) = v12;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 7) = v10;
  *((_QWORD *)v5 + 8) = 0;
  *(_QWORD *)v5 = off_1E33A0788;
  if (v18)
  {
    v13 = *(_DWORD *)v18;
    *(_DWORD *)v18 += 2;
    *((_QWORD *)v5 + 9) = v18;
    if (v13)
      *(_DWORD *)v18 = v13;
    else
      WTF::StringImpl::destroy(v18, v9);
  }
  else
  {
    *((_QWORD *)v5 + 9) = 0;
  }
  (*(void (**)(uint64_t, WebCore *))(*(_QWORD *)v3 + 48))(v3, v5);
  v15 = *((_QWORD *)v5 + 9);
  if (v15)
    v16 = *(_DWORD *)(v15 + 4) != 0;
  else
    v16 = 0;
  if (*((_DWORD *)v5 + 4) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 4);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v14);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v16;
}

uint64_t WebCore::isRendererReplacedElement(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (!result)
    return result;
  v1 = result;
  v2 = *(unsigned __int8 *)(result + 46);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result) & 1) != 0)
    return 1;
  if ((*(_BYTE *)(v1 + 52) & 7) != 3)
  {
    LOBYTE(v4) = 0;
    goto LABEL_6;
  }
  v3 = *(unsigned __int8 *)(v1 + 53);
  if ((v3 & 4) != 0)
    return 1;
  v4 = (v3 >> 1) & 1;
LABEL_6:
  result = 1;
  if ((v4 & 1) == 0 && v2)
  {
    if ((*(_BYTE *)(v1 + 45) & 1) != 0)
      return 0;
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
    if (!v5 || (*(_WORD *)(v5 + 28) & 8) == 0)
      return 0;
    *(_DWORD *)(v5 + 24) += 2;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 848))(v5) & 1) != 0
      || (*(_WORD *)(v5 + 28) & 0x10) != 0
      && ((v6 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24), v6 == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
       || v6 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
       || v6 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)))
    {
LABEL_39:
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      return 1;
    }
    v7 = *(_QWORD *)(v5 + 104);
    if (v7
      && ((v8 = *(_DWORD *)(v7 + 4), (v8 & 1) != 0)
        ? (v9 = *(_QWORD *)(v7 + 40), LODWORD(v10) = *(_DWORD *)(v7 + 52))
        : (v9 = v7 + 32, LODWORD(v10) = v8 >> 5),
          (_DWORD)v10))
    {
      v10 = v10;
      v11 = (uint64_t *)(v9 + 8);
      while (1)
      {
        v12 = *(v11 - 1);
        if (v12 == WebCore::HTMLNames::roleAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v10)
        {
          v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v13 = *v11;
    if (*v11 && *(_DWORD *)(v13 + 4) == 3)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if ((*(_BYTE *)(v13 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v14 & 0xDF) == 0x49 && (*(_BYTE *)(v14 + 1) & 0xDF) == 0x4D)
        {
          v15 = *(unsigned __int8 *)(v14 + 2);
          goto LABEL_38;
        }
      }
      else if ((*(_WORD *)v14 & 0xFFDF) == 0x49 && (*(_WORD *)(v14 + 2) & 0xFFDF) == 0x4D)
      {
        v15 = *(unsigned __int16 *)(v14 + 4);
LABEL_38:
        if ((v15 & 0xFFFFFFDF) == 0x47)
          goto LABEL_39;
      }
    }
    if (*(_DWORD *)(v5 + 24) != 2)
    {
      result = 0;
      *(_DWORD *)(v5 + 24) -= 2;
      return result;
    }
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
    return 0;
  }
  return result;
}

unsigned __int16 *WebCore::TextIteratorCopyableText::appendToStringBuilder(unsigned __int16 *this, WTF::StringBuilder *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *this;
  if (!*this)
  {
    v3 = *((unsigned int *)this + 4);
    v4 = *((_QWORD *)this + 1);
    if (v4)
      v5 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
    else
      v5 = 0x100000000;
    if (v5 <= v3)
      return (unsigned __int16 *)WTF::StringBuilder::append();
    LODWORD(v6) = *((_DWORD *)this + 5);
    if ((int)v5 - (int)v3 <= v6)
    {
      if (!(_DWORD)v3)
      {
        v6 = v5;
        goto LABEL_9;
      }
      LODWORD(v6) = v5 - v3;
    }
    v6 = v6;
    v7 = v5 - v3;
    if ((v5 & 0x100000000) != 0)
    {
      if (v7 >= v6)
      {
        v6 = v6 | 0x100000000;
        goto LABEL_9;
      }
      goto LABEL_29;
    }
    if (v7 < v6)
    {
LABEL_29:
      __break(1u);
      return this;
    }
LABEL_9:
    if ((v6 & 0x100000000) != 0)
      return (unsigned __int16 *)WTF::StringBuilder::append();
    return (unsigned __int16 *)WTF::StringBuilder::append();
  }
  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
    return (unsigned __int16 *)WTF::StringBuilder::append();
  v9 = *((unsigned int *)a2 + 4);
  if (v9 >= *(_DWORD *)(v8 + 4) || *(_QWORD *)a2 != 0)
    return (unsigned __int16 *)WTF::StringBuilder::append();
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8);
    *((_DWORD *)a2 + 4) = v9 + 1;
    *(_WORD *)(v11 + 2 * v9) = v2;
    return this;
  }
  if (v2 > 0xFF)
    return (unsigned __int16 *)WTF::StringBuilder::append();
  v12 = *(_QWORD *)(v8 + 8);
  *((_DWORD *)a2 + 4) = v9 + 1;
  *(_BYTE *)(v12 + v9) = v2;
  return this;
}

WTF *WebCore::TextIterator::TextIterator(uint64_t a1, _DWORD *a2, __int16 a3)
{
  uint64_t *v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *result;
  int v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  void *v39;
  WTF *v40;
  WebCore::Node *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Node *v49;

  *(_WORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  v6 = (WTF *)(a1 + 24);
  *(_QWORD *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  v7 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 250) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  WebCore::Document::updateLayout(v8, 2, 0);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v9 + 24) += 2;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  *(_DWORD *)(a1 + 64) = a2[2];
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  *(_DWORD *)(a1 + 80) = a2[6];
  v13 = *(_QWORD **)a2;
  v14 = *(_WORD *)(*(_QWORD *)a2 + 28);
  if ((v14 & 1) != 0)
  {
    v16 = *(_QWORD *)a2;
    goto LABEL_29;
  }
  v15 = a2[2];
  if ((v14 & 4) != 0)
  {
    v16 = v13[10];
    if (v15 && v16)
    {
      v17 = v15 - 1;
      do
      {
        v16 = *(_QWORD *)(v16 + 56);
        v18 = v17-- != 0;
        v19 = v18;
      }
      while (v16 && (v19 & 1) != 0);
    }
    if (v16)
    {
      v20 = *(_DWORD *)(v16 + 24);
      *(_DWORD *)(v16 + 24) = v20 + 2;
      if (v20)
      {
        *(_DWORD *)(v16 + 24) = v20;
      }
      else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      goto LABEL_29;
    }
  }
  if (v15)
  {
    while (1)
    {
      v16 = v13[7];
      if (v16)
        goto LABEL_29;
      v13 = (_QWORD *)v13[4];
      if (!v13)
      {
        v16 = 0;
        goto LABEL_30;
      }
    }
  }
  v16 = (uint64_t)v13;
  if (v13)
LABEL_29:
    *(_DWORD *)(v16 + 24) += 2;
LABEL_30:
  v21 = *v5;
  *v5 = v16;
  if (v21)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
    v16 = *v5;
  }
  if (!v16)
    return (WTF *)a1;
  *(_DWORD *)(v16 + 24) += 2;
  v22 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
  *(_DWORD *)(v22 + 24) += 2;
  if ((*(_BYTE *)(a1 + 1) & 1) != 0)
  {
    v36 = v22;
    v37 = (WebCore::Node *)WebCore::Document::ownerElement((WebCore::Document *)v22);
    if (v37)
    {
      v38 = v37;
      *((_DWORD *)v37 + 6) += 2;
      v49 = v37;
      while (1)
      {
        v45 = 0;
        v46 = (WTF *)&v48;
        v47 = 1;
        result = WebCore::setUpFullyClippedStack((WTF *)&v45, (uint64_t)v38);
        if (v45)
        {
          if (HIDWORD(v47) <= (v45 - 1) >> 5)
          {
            __break(0xC471u);
            return result;
          }
          v40 = v46;
          v23 = (*((_DWORD *)v46 + ((v45 - 1) >> 5)) >> (v45 - 1)) & 1;
        }
        else
        {
          LOBYTE(v23) = 0;
          v40 = v46;
        }
        if (&v48 != (uint64_t *)v40 && v40 != 0)
        {
          v46 = 0;
          LODWORD(v47) = 0;
          WTF::fastFree(v40, v39);
        }
        v42 = v49;
        if ((v23 & 1) != 0)
          break;
        v43 = WebCore::Document::ownerElement(*(WebCore::Document **)(*((_QWORD *)v49 + 5) + 8));
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v49, v43);
        v38 = v49;
        if (!v49)
          goto LABEL_119;
      }
      v49 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 6) == 2)
        {
          if ((*((_WORD *)v42 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v42);
        }
        else
        {
          *((_DWORD *)v42 + 6) -= 2;
        }
      }
LABEL_119:
      v22 = v36;
      if (!v36)
        goto LABEL_39;
    }
    else
    {
      LOBYTE(v23) = 0;
      v22 = v36;
    }
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  if (*(_DWORD *)(v22 + 24) == 2)
  {
    if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v22);
  }
  else
  {
    *(_DWORD *)(v22 + 24) -= 2;
  }
LABEL_39:
  if ((v23 & 1) != 0)
    goto LABEL_55;
  WebCore::setUpFullyClippedStack(v6, v16);
  if (v16 == *(_QWORD *)(a1 + 56))
    v25 = *(_DWORD *)(a1 + 64);
  else
    v25 = 0;
  *(_DWORD *)(a1 + 16) = v25;
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_DWORD *)(a1 + 80);
  if ((v27 & 0x80000000) == 0 && (*(_WORD *)(v26 + 28) & 5) == 4)
  {
    v29 = *(_QWORD *)(v26 + 80);
    if (v27 && v29)
    {
      v33 = v27 - 1;
      do
      {
        v29 = *(_QWORD *)(v29 + 56);
        v18 = v33-- != 0;
        v34 = v18;
      }
      while (v29 && (v34 & 1) != 0);
    }
    if (v29)
    {
      *(_DWORD *)(v29 + 24) += 2;
      goto LABEL_48;
    }
  }
  *(_DWORD *)(v26 + 24) += 2;
  while (1)
  {
    v28 = v26;
    v29 = *(_QWORD *)(v26 + 56);
    if (v29)
      break;
    if ((*(_WORD *)(v26 + 28) & 0x80) == 0)
    {
      v35 = (uint64_t *)(v26 + 32);
      goto LABEL_94;
    }
    v44 = *(_QWORD *)(v26 + 200);
    if (v44)
    {
      v35 = (uint64_t *)(v44 + 8);
LABEL_94:
      v26 = *v35;
      if (*v35)
        *(_DWORD *)(v26 + 24) += 2;
      goto LABEL_96;
    }
    v26 = 0;
LABEL_96:
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
    v29 = 0;
    if (!v26)
      goto LABEL_48;
  }
  *(_DWORD *)(v29 + 24) += 2;
  if (*(_DWORD *)(v26 + 24) == 2)
  {
    if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v26);
  }
  else
  {
    *(_DWORD *)(v26 + 24) -= 2;
  }
LABEL_48:
  v30 = *v7;
  *v7 = v29;
  if (v30)
  {
    if (*(_DWORD *)(v30 + 24) == 2)
    {
      if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30);
    }
    else
    {
      *(_DWORD *)(v30 + 24) -= 2;
    }
  }
  *(_DWORD *)(v16 + 24) += 2;
  v31 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  if (v31)
  {
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
  }
  WebCore::TextIterator::advance((WebCore::TextIterator *)a1, v24);
LABEL_55:
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  return (WTF *)a1;
}

{
  return WebCore::TextIterator::TextIterator(a1, a2, a3);
}

WTF *WebCore::setUpFullyClippedStack(WTF *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t *v9;
  unint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _BYTE v20[800];

  v3 = (uint64_t)result;
  v18 = (WTF *)v20;
  v19 = 100;
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
  {
    v17 = *(_QWORD *)(a2 + 200);
    if (!v17)
      goto LABEL_21;
    v4 = (uint64_t *)(v17 + 8);
  }
  else
  {
    v4 = (uint64_t *)(a2 + 32);
  }
  v5 = *v4;
  if (!*v4)
  {
LABEL_21:
    WebCore::pushFullyClippedState(v3, (WebCore::Node *)a2);
    if (HIDWORD(v19))
    {
      v12 = v18;
      v13 = 8 * HIDWORD(v19);
      do
      {
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
    }
    result = v18;
    if (v20 != (_BYTE *)v18 && v18 != 0)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      return (WTF *)WTF::fastFree(result, v11);
    }
    return result;
  }
  *(_DWORD *)(v5 + 24) += 2;
  do
  {
    v6 = v5;
    v7 = HIDWORD(v19);
    if (HIDWORD(v19) == (_DWORD)v19)
    {
      result = (WTF *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,100ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode &>((uint64_t)&v18, v5);
      v6 = v5;
    }
    else
    {
      v8 = v18;
      *(_DWORD *)(v5 + 24) += 2;
      *((_QWORD *)v8 + v7) = v5;
      HIDWORD(v19) = v7 + 1;
    }
    if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
    {
      v16 = *(_QWORD *)(v6 + 200);
      if (!v16)
      {
        v5 = 0;
        goto LABEL_11;
      }
      v9 = (uint64_t *)(v16 + 8);
    }
    else
    {
      v9 = (uint64_t *)(v6 + 32);
    }
    v5 = *v9;
    if (*v9)
      *(_DWORD *)(v5 + 24) += 2;
LABEL_11:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  while (v5);
  if (!HIDWORD(v19))
    goto LABEL_21;
  v10 = HIDWORD(v19) - 1;
  while (v10 < HIDWORD(v19))
  {
    result = (WTF *)WebCore::pushFullyClippedState(v3, *((WebCore::Node **)v18 + v10--));
    if (v10 == -1)
      goto LABEL_21;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::TextIterator::advance(WebCore::TextIterator *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WebCore::Node *v7;
  uint64_t result;
  int v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  const WebCore::HTMLElement *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  int v38;
  char v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  int v64;
  _BOOL4 v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unsigned int v78;
  int v79;
  _BOOL4 v81;
  void *v83;
  WTF *v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  WebCore::Node *v99;
  unsigned int v100;
  unint64_t v101;
  char *v102;
  char *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  _BOOL4 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  WebCore::Node *v119;
  WebCore::TextIterator *v120;
  uint64_t v121;
  WebCore::HTMLSlotElement *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  __int16 v130;
  uint64_t SkippingChildrenInComposedTreeIgnoringUserAgentShadow;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  int isRendererVisible;
  int v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  WebCore::Node *v148;
  uint64_t *v149;
  int v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl **v156;
  WTF::StringImpl *v157;
  int v158;
  void *v159;
  WTF *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  WebCore::Node *v165;
  uint64_t v166;
  WebCore::Node *v167[2];
  WebCore::Node *v168[2];
  uint64_t v169;
  WTF *v170;
  WTF::StringImpl *v171;

  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_WORD *)this + 60) = 0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_BYTE *)this + 156) = 1;
  v5 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    v168[0] = (WebCore::Node *)v5;
    if (v6)
    {
      *(_DWORD *)(v5 + 24) = v6;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    v7 = *(WebCore::Node **)(v5 + 32);
    if (v7)
      *((_DWORD *)v7 + 6) += 2;
    v167[0] = v7;
    WebCore::TextIterator::emitCharacter((uint64_t)this, (WTF::StringImpl *)0xA, (uint64_t *)v167, (uint64_t *)v168, 1, 1);
    if (v167[0])
    {
      if (*((_DWORD *)v167[0] + 6) == 2)
      {
        if ((*((_WORD *)v167[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v167[0]);
      }
      else
      {
        *((_DWORD *)v167[0] + 6) -= 2;
      }
    }
    result = (uint64_t)v168[0];
    if (!v168[0])
      return result;
    v9 = *((_DWORD *)v168[0] + 6) - 2;
    if (*((_DWORD *)v168[0] + 6) != 2)
    {
LABEL_17:
      *(_DWORD *)(result + 24) = v9;
      return result;
    }
    if ((*((_WORD *)v168[0] + 15) & 0x400) != 0)
      return result;
    return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  v10 = (WebCore::TextIterator *)((char *)this + 168);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::TextIterator *)((char *)this + 168)) & 1) != 0
    && (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::TextIterator *)((char *)this + 200)) & 1) == 0)
  {
    WebCore::TextIterator::revertToRemainingTextRun(this);
  }
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::TextIterator *)((char *)this + 168));
  if ((result & 1) == 0)
  {
    result = WebCore::TextIterator::handleTextRun((uint64_t)this);
    if (*((_QWORD *)this + 12))
      return result;
  }
  v12 = (WebCore::TextIterator *)((char *)this + 192);
  do
  {
    v13 = *((_QWORD *)this + 1);
    if (!v13 || v13 == *((_QWORD *)this + 11))
      return result;
    if (v13 == *((_QWORD *)this + 9) && !*((_DWORD *)this + 20))
    {
      WebCore::TextIterator::representNodeOffsetZero(this);
      result = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!result)
        return result;
      v9 = *(_DWORD *)(result + 24) - 2;
      if (*(_DWORD *)(result + 24) != 2)
        goto LABEL_17;
      if ((*(_WORD *)(result + 30) & 0x400) != 0)
        return result;
      return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    v14 = *(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL;
    v15 = v14 == 0;
    if (v14)
    {
      ++*(_DWORD *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      if (!*((_BYTE *)this + 20))
      {
        v16 = (_QWORD *)v14;
        if ((*(_BYTE *)(v14 + 45) & 2) != 0)
        {
          v16 = *(_QWORD **)(v14 + 32);
          if (v16)
            v16 = (_QWORD *)v16[1];
        }
        v17 = v16[13];
        if ((*(_BYTE *)(v17 + 239) & 1) != 0)
        {
          v19 = 0;
        }
        else
        {
          v18 = *(_DWORD *)(v17 + 228);
          v19 = (v18 >> 15) & 3;
          if ((v18 & 0x30) != 0)
          {
            v94 = *(_DWORD *)(*(_QWORD *)(v16[11] + 32) + 148) & 0xC00000;
            v95 = v19 <= 1 ? 1 : (v18 >> 15) & 3;
            if (v94 != 0x800000)
              v19 = v95;
          }
        }
        if (v19 || (*(_WORD *)this & 0x800) == 0)
        {
          if ((*(_BYTE *)(v14 + 45) & 2) == 0 && (*(_WORD *)(v13 + 28) & 8) != 0)
          {
            if ((*(_BYTE *)(v14 + 45) & 1) != 0)
            {
              result = 0;
            }
            else
            {
              result = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8);
              if (result && (*(_WORD *)(result + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195B234C0);
              }
            }
            v20 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 636) >> 18) & 3;
            if (v20)
            {
              if ((*(_BYTE *)(v14 + 96) & 0x1F) == 0xD || (*(_BYTE *)(v14 + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
              {
                if (v20 == 2
                  || result
                  && (result = WebCore::Element::isRelevantToUser((WebCore::Element *)result), (result & 1) == 0))
                {
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 1944)
                                             + 248)
                                 + 479))
                  {
                    *((_BYTE *)this + 21) = 1;
LABEL_142:
                    *((_DWORD *)this + 4) = 0;
                    goto LABEL_100;
                  }
                }
              }
            }
          }
          if ((*(_BYTE *)(v14 + 45) & 2) != 0)
          {
            v70 = *((_QWORD *)this + 1);
            if ((*(_WORD *)(v70 + 28) & 2) != 0)
            {
              v71 = *(_DWORD *)(v70 + 24);
              v72 = v71 + 2;
              *(_DWORD *)(v70 + 24) = v71 + 2;
              v73 = *((_DWORD *)this + 6);
              if (v73)
              {
                v74 = v73 - 1;
                if (*((_DWORD *)this + 11) <= v74 >> 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B23DB8);
                }
                if (((*(_DWORD *)(*((_QWORD *)this + 4) + 4 * (v74 >> 5)) >> v74) & 1) != 0
                  && (*(_WORD *)this & 8) == 0)
                {
                  v39 = 0;
LABEL_202:
                  v93 = v72 - 2;
                  if (v93)
                  {
                    *(_DWORD *)(v70 + 24) = v93;
                  }
                  else if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                  {
                    result = WebCore::Node::removedLastRef((WebCore::Node *)v70);
                  }
                  goto LABEL_88;
                }
              }
              v75 = *(_QWORD *)(v70 + 64) & 0xFFFFFFFFFFFFLL;
              if (v75 && (*(_BYTE *)((*(_QWORD *)(v70 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195B23918);
              }
              ++*(_DWORD *)((*(_QWORD *)(v70 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
              *(_DWORD *)(v70 + 24) = v71 + 4;
              v76 = *((_QWORD *)this + 30);
              *((_QWORD *)this + 30) = v70;
              if (v76)
              {
                if (*(_DWORD *)(v76 + 24) == 2)
                {
                  if ((*(_WORD *)(v76 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v76);
                }
                else
                {
                  *(_DWORD *)(v76 + 24) -= 2;
                }
              }
              if ((*(_WORD *)this & 0x20) != 0)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v75 + 664))(&v171, v75);
              }
              else
              {
                v77 = *(WTF::StringImpl **)(v75 + 104);
                if (v77)
                  *(_DWORD *)v77 += 2;
                v171 = v77;
              }
              v78 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 32) + 8) + 120);
              v79 = (v78 >> 27) & 7;
              v81 = (v78 & 0x40000000) == 0 && v79 == 3;
              if (v79 == 1 || v81)
              {
                v105 = *((_DWORD *)this + 4);
                if (!*((_BYTE *)this + 248))
                {
                  if (*(_BYTE *)(v75 + 46) == 46)
                  {
                    v111 = *(_DWORD *)(v75 + 16) + 1;
LABEL_287:
                    *(_DWORD *)(v75 + 16) = v111;
                    if (!*((_BYTE *)this + 253))
                    {
                      if (!v105)
                      {
                        WebCore::TextIterator::handleTextNodeFirstLetter((uint64_t)this, *(WebCore::RenderTextFragment **)(v75 + 144));
                        v153 = *((_QWORD *)this + 29);
                        if (v153)
                        {
                          v156 = *(WTF::StringImpl ***)(v153 + 8);
                          if (v156)
                          {
                            v157 = v156[13];
                            if (v157)
                            {
                              v158 = *((_DWORD *)v157 + 1);
                              *(_DWORD *)v157 += 2;
                            }
                            else
                            {
                              v158 = 0;
                            }
                            WebCore::TextIterator::emitText(this, (WebCore::Text *)v70, v156, *((_DWORD *)this + 4), (*((_DWORD *)this + 4) + v158));
                            v160 = (WTF *)*((_QWORD *)this + 29);
                            *((_QWORD *)this + 29) = 0;
                            if (v160)
                            {
                              if (*(_DWORD *)v160 == 1)
                                WTF::fastFree(v160, v159);
                              else
                                --*(_DWORD *)v160;
                            }
                            v168[1] = 0;
                            v168[0] = 0;
                            v169 = 1;
                            WebCore::InlineIterator::LeafBoxIterator::operator=((uint64_t)v10, (uint64_t)v168);
                            if ((_DWORD)v169 != -1)
                              ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33ADF08[v169])(v167, v168);
                            if (v157)
                            {
                              if (*(_DWORD *)v157 == 2)
                                WTF::StringImpl::destroy(v157, v11);
                              else
                                *(_DWORD *)v157 -= 2;
                            }
                            v161 = *(_DWORD *)(v75 + 16);
                            if (!v161)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195B23EB8);
                            }
                            v39 = 0;
                            *(_DWORD *)(v75 + 16) = v161 - 1;
LABEL_196:
                            result = (uint64_t)v171;
                            v171 = 0;
                            if (result)
                            {
                              if (*(_DWORD *)result == 2)
                                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
                              else
                                *(_DWORD *)result -= 2;
                            }
                            v92 = *(_DWORD *)(v75 + 16);
                            if (!v92)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195B238B0);
                            }
                            *(_DWORD *)(v75 + 16) = v92 - 1;
                            if (v70)
                            {
                              v72 = *(_DWORD *)(v70 + 24);
                              goto LABEL_202;
                            }
LABEL_88:
                            *((_BYTE *)this + 20) = v39;
                            if (*((_QWORD *)this + 12))
                              goto LABEL_209;
                            goto LABEL_89;
                          }
                        }
                      }
                      v111 = *(_DWORD *)(v75 + 16);
                    }
                    if (!v111)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195B23DD8);
                    }
                    *(_DWORD *)(v75 + 16) = v111 - 1;
                    v78 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 32) + 8) + 120);
                  }
LABEL_264:
                  if ((v78 & 0x30) == 0 || (*(_WORD *)this & 8) != 0)
                  {
                    v106 = (int)v171;
                    if (v171)
                      v106 = *((_DWORD *)v171 + 1);
                    if (*((_QWORD *)this + 9) == v70)
                      v107 = *((_DWORD *)this + 20);
                    else
                      v107 = 0x7FFFFFFF;
                    if (v107 >= v106)
                      v108 = v106;
                    else
                      v108 = v107;
                    if (v105 < (int)v108)
                      WebCore::TextIterator::emitText(this, (WebCore::Text *)v70, (WTF::StringImpl **)v75, v105, v108);
                    goto LABEL_195;
                  }
                  goto LABEL_530;
                }
                if ((v78 & 0x30) != 0)
                {
                  if (*(_BYTE *)(v75 + 46) != 46)
                    goto LABEL_264;
                  v150 = *(_DWORD *)(v75 + 16);
                  v111 = v150 + 1;
                  *(_DWORD *)(v75 + 16) = v150 + 1;
                  v151 = *(_QWORD *)(v75 + 144);
                  if (!v151 || (v155 = *(_QWORD *)(v151 + 8)) == 0 || (*(_BYTE *)(v155 + 120) & 0x30) != 0)
                  {
                    if (v150 == -1)
                      goto LABEL_503;
                    goto LABEL_287;
                  }
                  if (v150 == -1)
                  {
LABEL_503:
                    __break(0xC471u);
                    JUMPOUT(0x195B23C60);
                  }
                  *(_DWORD *)(v75 + 16) = v150;
                }
                v168[0] = (WebCore::Node *)v70;
                v167[0] = 0;
                WebCore::TextIterator::emitCharacter((uint64_t)this, (WTF::StringImpl *)0x20, (uint64_t *)v168, (uint64_t *)v167, v105, v105);
                if (v167[0])
                {
                  if (*((_DWORD *)v167[0] + 6) == 2)
                  {
                    if ((*((_WORD *)v167[0] + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v167[0]);
                  }
                  else
                  {
                    *((_DWORD *)v167[0] + 6) -= 2;
                  }
                }
                if (v168[0])
                {
                  if (*((_DWORD *)v168[0] + 6) == 2)
                  {
                    if ((*((_WORD *)v168[0] + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v168[0]);
                  }
                  else
                  {
                    *((_DWORD *)v168[0] + 6) -= 2;
                  }
                }
                v70 = 0;
LABEL_530:
                v39 = 0;
                goto LABEL_196;
              }
              WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)v75, (uint64_t)v168);
              v167[0] = v10;
              v167[1] = v12;
              std::tuple<WebCore::InlineIterator::TextBoxIterator &,std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData> &>::operator=[abi:sn180100]<WebCore::InlineIterator::TextBoxIterator,std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData>,0>(v167, (uint64_t)v168);
              v84 = v170;
              v170 = 0;
              if (v84)
              {
                v85 = *((unsigned int *)v84 + 3);
                v86 = *(unsigned int **)v84;
                if ((_DWORD)v85)
                {
                  v87 = 24 * v85;
                  do
                  {
                    v88 = v86[4];
                    if ((_DWORD)v88 != -1)
                      ((void (*)(WebCore::Node **, unsigned int *))off_1E33ADF08[v88])(v167, v86);
                    v86[4] = -1;
                    v86 += 6;
                    v87 -= 24;
                  }
                  while (v87);
                  v86 = *(unsigned int **)v84;
                }
                if (v86)
                {
                  *(_QWORD *)v84 = 0;
                  *((_DWORD *)v84 + 2) = 0;
                  WTF::fastFree((WTF *)v86, v83);
                }
                WTF::fastFree(v84, v83);
              }
              if ((_DWORD)v169 != -1)
                ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33ADF08[v169])(v167, v168);
              v89 = *(unsigned __int8 *)(v75 + 46);
              if (v89 == 46)
              {
                ++*(_DWORD *)(v75 + 16);
                v90 = v75;
                if (!*((_BYTE *)this + 253))
                {
                  v90 = v75;
                  if (!*((_DWORD *)this + 4))
                  {
                    WebCore::TextIterator::handleTextNodeFirstLetter((uint64_t)this, *(WebCore::RenderTextFragment **)(v75 + 144));
                    v90 = v75;
                    goto LABEL_192;
                  }
                }
              }
              else
              {
                v90 = 0;
              }
              if (WebCore::InlineIterator::BoxIterator::atEnd(v10) && v171 && *((_DWORD *)v171 + 1))
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v75 + 32) + 8) + 120) & 0x30) == 0
                  || (*(_WORD *)this & 8) != 0)
                {
                  v39 = 1;
                  *((_BYTE *)this + 248) = 1;
                  if (v89 != 46)
                    goto LABEL_196;
                  v104 = *(_DWORD *)(v90 + 16);
                  if (!v104)
                    goto LABEL_456;
                }
                else
                {
                  if (v89 != 46)
                    goto LABEL_530;
                  v104 = *(_DWORD *)(v90 + 16);
                  if (!v104)
                  {
LABEL_456:
                    __break(0xC471u);
                    JUMPOUT(0x195B23A58);
                  }
                  v39 = 0;
                }
                *(_DWORD *)(v90 + 16) = v104 - 1;
                goto LABEL_196;
              }
              if (v89 != 46)
              {
LABEL_194:
                WebCore::TextIterator::handleTextRun((uint64_t)this);
LABEL_195:
                v39 = 1;
                goto LABEL_196;
              }
LABEL_192:
              v91 = *(_DWORD *)(v90 + 16);
              if (!v91)
                goto LABEL_456;
              *(_DWORD *)(v90 + 16) = v91 - 1;
              goto LABEL_194;
            }
          }
          v21 = *(unsigned __int8 *)(v14 + 46);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14) & 1) == 0)
          {
            if ((*(_BYTE *)(v14 + 52) & 7) == 3)
            {
              v23 = *(unsigned __int8 *)(v14 + 53);
              if ((v23 & 4) != 0)
                goto LABEL_244;
              v24 = (v23 >> 1) & 1;
            }
            else
            {
              LOBYTE(v24) = 0;
            }
            if ((v24 & 1) == 0 && v21)
            {
              if ((*(_BYTE *)(v14 + 45) & 1) != 0)
                goto LABEL_76;
              v25 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8);
              if (!v25 || (*(_WORD *)(v25 + 28) & 8) == 0)
                goto LABEL_76;
              *(_DWORD *)(v25 + 24) += 2;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 848))(v25) & 1) != 0
                || (*(_WORD *)(v25 + 28) & 0x10) != 0
                && ((v26 = *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24),
                     v26 == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
                 || v26 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
                 || v26 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)))
              {
LABEL_242:
                if (*(_DWORD *)(v25 + 24) == 2)
                {
                  if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v25);
                }
                else
                {
                  *(_DWORD *)(v25 + 24) -= 2;
                }
                goto LABEL_244;
              }
              v27 = *(_QWORD *)(v25 + 104);
              if (v27
                && ((v28 = *(unsigned int *)(v27 + 4), (v28 & 1) != 0)
                  ? (v29 = *(_QWORD *)(v27 + 40), v30 = *(unsigned int *)(v27 + 52))
                  : (v29 = v27 + 32, v30 = v28 >> 5),
                    v30))
              {
                v31 = (uint64_t *)(v29 + 8);
                while (1)
                {
                  v32 = *(v31 - 1);
                  if (v32 == WebCore::HTMLNames::roleAttr
                    || *(_QWORD *)(v32 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
                    && *(_QWORD *)(v32 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
                  {
                    break;
                  }
                  v31 += 2;
                  if (!--v30)
                    goto LABEL_72;
                }
              }
              else
              {
LABEL_72:
                v31 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              }
              v33 = *v31;
              if (!v33 || *(_DWORD *)(v33 + 4) != 3)
                goto LABEL_74;
              v109 = *(_QWORD *)(v33 + 8);
              if ((*(_BYTE *)(v33 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v109 & 0xDF) == 0x49 && (*(_BYTE *)(v109 + 1) & 0xDF) == 0x4D)
                {
                  v110 = *(unsigned __int8 *)(v109 + 2);
                  goto LABEL_283;
                }
              }
              else if ((*(_WORD *)v109 & 0xFFDF) == 0x49 && (*(_WORD *)(v109 + 2) & 0xFFDF) == 0x4D)
              {
                v110 = *(unsigned __int16 *)(v109 + 4);
LABEL_283:
                if ((v110 & 0xFFFFFFDF) != 0x47)
                  goto LABEL_74;
                goto LABEL_242;
              }
LABEL_74:
              if (*(_DWORD *)(v25 + 24) == 2)
              {
                if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v25);
              }
              else
              {
                *(_DWORD *)(v25 + 24) -= 2;
              }
LABEL_76:
              v34 = *((_QWORD *)this + 1);
              if (v34)
                *(_DWORD *)(v34 + 24) += 2;
              v168[0] = (WebCore::Node *)v34;
              v35 = *(_WORD *)this;
              v36 = *(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL;
              if (v36)
              {
                v37 = *(_DWORD *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
                v38 = v37 + 1;
                *(_DWORD *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v37 + 1;
                if (*(_BYTE *)(v36 + 46) != 17)
                {
                  if (v37 == -1)
                    goto LABEL_347;
                  *(_DWORD *)(v36 + 16) = v37;
                  goto LABEL_82;
                }
                if ((*(_BYTE *)(v36 + 52) & 7) == 2)
                  v147 = *(_BYTE *)(v36 + 53) & 1;
                else
                  v147 = 0;
                LOBYTE(v118) = v147 ^ 1;
                if ((v35 & 0x20) != 0 || (v147 & 1) != 0)
                  goto LABEL_339;
              }
              else
              {
                if ((*(_WORD *)(v34 + 28) & 0x10) == 0)
                  goto LABEL_83;
                v118 = *(_QWORD *)(*(_QWORD *)(v34 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
                if ((v35 & 0x20) != 0
                  || *(_QWORD *)(*(_QWORD *)(v34 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
                {
                  goto LABEL_408;
                }
              }
              v118 = (*(_BYTE *)(v34 + 22) & 0x10) == 0
                  || (v142 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v34 + 40) + 200) + 8),
                      (*(_WORD *)(v142 + 28) & 0x10) == 0)
                  || *(_QWORD *)(*(_QWORD *)(v142 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
              if (v36)
              {
                v38 = *(_DWORD *)(v36 + 16);
LABEL_339:
                if (!v38)
                {
LABEL_347:
                  __break(0xC471u);
                  JUMPOUT(0x195B235E0);
                }
                *(_DWORD *)(v36 + 16) = v38 - 1;
                if ((v118 & 1) == 0)
                {
LABEL_82:
                  if ((v35 & 1) != 0 && WebCore::RenderObject::isHR((WebCore::RenderObject *)v36))
                  {
                    v148 = *(WebCore::Node **)(v34 + 32);
                    if (v148)
                      *((_DWORD *)v148 + 6) += 2;
                    v167[0] = v148;
                    v120 = this;
                    v121 = 32;
LABEL_344:
                    WebCore::TextIterator::emitCharacter((uint64_t)v120, (WTF::StringImpl *)v121, (uint64_t *)v167, (uint64_t *)v168, 0, 1);
                    if (v167[0])
                    {
                      if (*((_DWORD *)v167[0] + 6) == 2)
                      {
                        if ((*((_WORD *)v167[0] + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v167[0]);
                      }
                      else
                      {
                        *((_DWORD *)v167[0] + 6) -= 2;
                      }
                    }
                    goto LABEL_84;
                  }
LABEL_83:
                  WebCore::TextIterator::representNodeOffsetZero(this);
LABEL_84:
                  result = (uint64_t)v168[0];
                  if (v168[0])
                  {
                    if (*((_DWORD *)v168[0] + 6) == 2)
                    {
                      if ((*((_WORD *)v168[0] + 15) & 0x400) == 0)
                        result = WebCore::Node::removedLastRef(v168[0]);
                    }
                    else
                    {
                      *((_DWORD *)v168[0] + 6) -= 2;
                    }
                  }
                  v39 = 1;
                  goto LABEL_88;
                }
LABEL_341:
                v119 = *(WebCore::Node **)(v34 + 32);
                if (v119)
                  *((_DWORD *)v119 + 6) += 2;
                v167[0] = v119;
                v120 = this;
                v121 = 10;
                goto LABEL_344;
              }
LABEL_408:
              if (!v118)
                goto LABEL_83;
              goto LABEL_341;
            }
          }
LABEL_244:
          result = WebCore::TextIterator::handleReplacedElement(this, v22);
          v39 = result;
          goto LABEL_88;
        }
LABEL_145:
        *((_BYTE *)this + 20) = 1;
        v67 = *(_DWORD *)(v13 + 24);
        v68 = v67 + 2;
        *(_DWORD *)(v13 + 24) = v67 + 2;
        if ((*(_BYTE *)(v13 + 28) & 8) == 0)
        {
LABEL_151:
          *((_BYTE *)this + 21) = v15;
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
          goto LABEL_89;
        }
        *(_DWORD *)(v13 + 24) = v67 + 4;
        v69 = (*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0
           && (v98 = *(_QWORD *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
           && (*(_QWORD *)(v98 + 16) & 0x1FLL) == 18;
        if (v68)
        {
          *(_DWORD *)(v13 + 24) = v68;
        }
        else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v13);
          if (!v69)
            goto LABEL_151;
          goto LABEL_261;
        }
        if (!v69)
          goto LABEL_151;
LABEL_261:
        v15 = 0;
        goto LABEL_151;
      }
    }
    else if (!*((_BYTE *)this + 20))
    {
      goto LABEL_145;
    }
LABEL_89:
    if (*((_BYTE *)this + 21))
      goto LABEL_142;
    v40 = *(_WORD *)this;
    v41 = *((_QWORD *)this + 1);
    if (v41)
      *(_DWORD *)(v41 + 24) += 2;
    v42 = *(_WORD *)(v41 + 28);
    if ((v40 & 0x200) == 0)
      goto LABEL_93;
    if ((v42 & 8) != 0 && (*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v143 = *(_QWORD *)((*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v143)
      {
        if (*(_BYTE *)(v143 + 193))
        {
          v43 = (uint64_t *)(v143 + 80);
          goto LABEL_95;
        }
      }
    }
    if ((v42 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v41 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      goto LABEL_93;
    v116 = WebCore::HTMLSlotElement::assignedNodes((WebCore::HTMLSlotElement *)v41);
    if (!v116)
    {
      v42 = *(_WORD *)(v41 + 28);
LABEL_93:
      if ((v42 & 4) == 0)
        goto LABEL_143;
      v43 = (uint64_t *)(v41 + 80);
      goto LABEL_95;
    }
    if (!*(_DWORD *)(v116 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x195B23DE0);
    }
    v117 = **(_QWORD **)v116;
    if (!v117)
    {
LABEL_143:
      v44 = 0;
      goto LABEL_97;
    }
    v43 = (uint64_t *)(v117 + 8);
LABEL_95:
    v44 = *v43;
    if (*v43)
      *(_DWORD *)(v44 + 24) += 2;
LABEL_97:
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
    *((_DWORD *)this + 4) = 0;
    if (v44)
      goto LABEL_111;
LABEL_100:
    v45 = *((_QWORD *)this + 1);
    if (v45)
      *(_DWORD *)(v45 + 24) += 2;
    if ((*(_WORD *)this & 0x200) == 0)
      goto LABEL_103;
    v122 = (WebCore::HTMLSlotElement *)WebCore::Node::assignedSlot((WebCore::Node *)v45);
    if (!v122)
      goto LABEL_103;
    v123 = **((_QWORD **)v122 + 5);
    if ((*(_WORD *)(v123 + 28) & 0x80) == 0)
      v123 = 0;
    if (*(_BYTE *)(v123 + 193))
    {
      v124 = WebCore::HTMLSlotElement::assignedNodes(v122);
      v125 = *(unsigned int *)(v124 + 12);
      if ((_DWORD)v125)
      {
        v126 = 0;
        while (1)
        {
          v127 = *(_QWORD *)(*(_QWORD *)v124 + 8 * v126);
          if (v127)
          {
            if (*(_QWORD *)(v127 + 8) == v45)
              break;
          }
          if (v125 == ++v126)
            goto LABEL_357;
        }
      }
      else
      {
LABEL_357:
        v126 = -1;
      }
      v128 = v126 + 1;
      if (v128 >= v125)
        goto LABEL_361;
      v129 = *(_QWORD *)(*(_QWORD *)v124 + 8 * v128);
      if (!v129)
        goto LABEL_361;
      v46 = (uint64_t *)(v129 + 8);
    }
    else
    {
LABEL_103:
      v46 = (uint64_t *)(v45 + 56);
    }
    v44 = *v46;
    if (*v46)
    {
      *(_DWORD *)(v44 + 24) += 2;
LABEL_106:
      v47 = *((_DWORD *)this + 6);
      if (v47)
        *((_DWORD *)this + 6) = v47 - 1;
      if (v45)
      {
        if (*(_DWORD *)(v45 + 24) == 2)
        {
          if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v45);
        }
        else
        {
          *(_DWORD *)(v45 + 24) -= 2;
        }
      }
LABEL_111:
      v48 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v44;
      if (v48)
      {
        if (*(_DWORD *)(v48 + 24) == 2)
        {
          if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v48);
        }
        else
        {
          *(_DWORD *)(v48 + 24) -= 2;
        }
        v44 = *((_QWORD *)this + 1);
      }
      if (!v44)
      {
LABEL_133:
        *((_WORD *)this + 10) = 0;
        *((_BYTE *)this + 253) = 0;
        result = *((_QWORD *)this + 29);
        *((_QWORD *)this + 29) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, v11);
          else
            --*(_DWORD *)result;
        }
        v65 = *((_QWORD *)this + 12) != 0;
        goto LABEL_137;
      }
      v49 = *(_DWORD *)(v44 + 24);
      v50 = v49 + 2;
      *(_DWORD *)(v44 + 24) = v49 + 2;
      v51 = *(_QWORD *)(v44 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v51)
      {
        if ((*(_WORD *)(v44 + 28) & 8) == 0)
          goto LABEL_123;
        *(_DWORD *)(v44 + 24) = v49 + 4;
        v115 = (*(_QWORD *)(v44 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && (v140 = *(_QWORD *)((*(_QWORD *)(v44 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
            && (*(_QWORD *)(v140 + 16) & 0x1FLL) == 18;
        if (v50)
        {
          *(_DWORD *)(v44 + 24) = v50;
          if (v115)
            goto LABEL_123;
        }
        else if ((*(_WORD *)(v44 + 30) & 0x400) != 0)
        {
          if (v115)
            goto LABEL_123;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v44);
          if (v115)
            goto LABEL_123;
        }
        goto LABEL_218;
      }
      v52 = *(_DWORD *)((*(_QWORD *)(v44 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_DWORD *)((*(_QWORD *)(v44 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v52 + 1;
      if ((*(_BYTE *)(v51 + 45) & 4) == 0)
      {
        if (v52 != -1)
        {
          *(_DWORD *)(v51 + 16) = v52;
          goto LABEL_123;
        }
        goto LABEL_319;
      }
      v53 = v52 + 2;
      *(_DWORD *)(v51 + 16) = v52 + 2;
      if ((*(_BYTE *)(v51 + 22) & 1) == 0)
      {
        v54 = 0;
        goto LABEL_120;
      }
      if ((*(_WORD *)(v44 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v44 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
      {
        v146 = *(_QWORD *)(v51 + 160);
        if ((int)v146 >= 1)
        {
          v97 = HIDWORD(v146);
          goto LABEL_214;
        }
      }
      else
      {
        v96 = WebCore::RenderBox::contentSize((WebCore::RenderBox *)v51);
        if ((int)v96 >= 1)
        {
          v97 = HIDWORD(v96);
LABEL_214:
          v54 = (int)v97 < 1;
LABEL_215:
          v53 = *(_DWORD *)(v51 + 16);
LABEL_120:
          if (!v53)
          {
            __break(0xC471u);
            JUMPOUT(0x195B2348CLL);
          }
          *(_DWORD *)(v51 + 16) = v53 - 1;
          if (v53 != 1)
          {
            *(_DWORD *)(v51 + 16) = v53 - 2;
            if (!v54)
            {
LABEL_123:
              v55 = *((_DWORD *)this + 6);
              if (!v55)
                goto LABEL_126;
              v56 = v55 - 1;
              if (*((_DWORD *)this + 11) <= v56 >> 5)
              {
                __break(0xC471u);
                JUMPOUT(0x195B23DA0);
              }
              if (((*(_DWORD *)(*((_QWORD *)this + 4) + 4 * (v56 >> 5)) >> v56) & 1) != 0)
                v57 = !WebCore::ignoresContainerClip(*(_QWORD *)(v44 + 64), v11);
              else
LABEL_126:
                v57 = 0;
              goto LABEL_127;
            }
LABEL_218:
            v57 = 1;
LABEL_127:
            v58 = *((unsigned int *)this + 6);
            v59 = v58 >> 5;
            v60 = *((unsigned int *)this + 11);
            v61 = v58 & 0x1F;
            if ((v58 & 0x1F) == 0 && (_DWORD)v60 == (_DWORD)v59)
            {
              v165 = v12;
              v99 = v10;
              v100 = v59 + 1;
              v101 = *((unsigned int *)this + 10);
              v102 = (char *)*((_QWORD *)this + 4);
              if (v101 <= v59)
              {
                v112 = v101 + (v101 >> 2);
                if (v112 >= 0x10)
                  v113 = v112 + 1;
                else
                  v113 = 16;
                if (v113 <= v100)
                  v113 = (v59 + 1);
                v164 = v113;
                if (v113 < 2)
                {
                  v164 = 1;
                  v114 = (char *)this + 48;
                }
                else
                {
                  v114 = (char *)WTF::fastMalloc((WTF *)(4 * v113));
                }
                *((_DWORD *)this + 10) = v164;
                *((_QWORD *)this + 4) = v114;
                memcpy(v114, v102, 4 * v60);
                v103 = (char *)*((_QWORD *)this + 4);
                if ((char *)this + 48 != v102 && v102)
                {
                  if (v103 == v102)
                  {
                    *((_QWORD *)this + 4) = 0;
                    *((_DWORD *)this + 10) = 0;
                  }
                  WTF::fastFree((WTF *)v102, v11);
                  v103 = (char *)*((_QWORD *)this + 4);
                }
              }
              else
              {
                v103 = (char *)*((_QWORD *)this + 4);
              }
              *((_DWORD *)this + 11) = v100;
              *(_DWORD *)&v103[4 * v59] = 0;
              LODWORD(v60) = *((_DWORD *)this + 11);
              v10 = v99;
              v12 = v165;
            }
            if (v60 <= v59)
            {
              __break(0xC471u);
              JUMPOUT(0x195B23D98);
            }
            v62 = *((_QWORD *)this + 4);
            v63 = 1 << v61;
            if (v57)
              v64 = *(_DWORD *)(v62 + 4 * v59) | v63;
            else
              v64 = *(_DWORD *)(v62 + 4 * v59) & ~v63;
            *(_DWORD *)(v62 + 4 * v59) = v64;
            ++*((_DWORD *)this + 6);
            if (*(_DWORD *)(v44 + 24) == 2)
            {
              if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v44);
            }
            else
            {
              *(_DWORD *)(v44 + 24) -= 2;
            }
            goto LABEL_133;
          }
LABEL_319:
          __break(0xC471u);
          JUMPOUT(0x195B2346CLL);
        }
      }
      v54 = 1;
      goto LABEL_215;
    }
LABEL_361:
    v130 = *(_WORD *)(v45 + 28);
    if ((*(_WORD *)this & 0x200) != 0)
    {
      if ((v130 & 8) != 0 && (*(_QWORD *)(v45 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v154 = *(_QWORD *)((*(_QWORD *)(v45 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v154)
        {
          if (*(_BYTE *)(v154 + 193))
          {
            v149 = (uint64_t *)(v154 + 80);
            goto LABEL_477;
          }
        }
      }
      if ((v130 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v45 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v162 = WebCore::HTMLSlotElement::assignedNodes((WebCore::HTMLSlotElement *)v45);
        if (v162)
        {
          if (!*(_DWORD *)(v162 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x195B23EE8);
          }
          v163 = **(_QWORD **)v162;
          if (v163)
          {
            v149 = (uint64_t *)(v163 + 8);
LABEL_477:
            SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *v149;
            if (*v149)
              goto LABEL_365;
          }
LABEL_478:
          SkippingChildrenInComposedTreeIgnoringUserAgentShadow = WebCore::nextSkippingChildrenInComposedTreeIgnoringUserAgentShadow((WebCore *)v45, v11);
          goto LABEL_365;
        }
        v130 = *(_WORD *)(v45 + 28);
      }
      if ((v130 & 4) != 0)
      {
        v149 = (uint64_t *)(v45 + 80);
        goto LABEL_477;
      }
      goto LABEL_478;
    }
    if ((v130 & 4) == 0 || (SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(v45 + 80)) == 0)
    {
      SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(v45 + 56);
      if (!SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
      {
        v141 = v45;
        while (1)
        {
          v141 = *(_QWORD *)(v141 + 32);
          if (!v141)
            break;
          SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(v141 + 56);
          if (SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
            goto LABEL_365;
        }
        SkippingChildrenInComposedTreeIgnoringUserAgentShadow = 0;
      }
    }
LABEL_365:
    v166 = *((_QWORD *)this + 11);
    if ((*(_WORD *)this & 0x200) != 0)
    {
      v133 = WebCore::Node::parentInComposedTree((WebCore::Node *)v45);
LABEL_369:
      if (v133)
        *(_DWORD *)(v133 + 24) += 2;
      goto LABEL_371;
    }
    if ((*(_WORD *)(v45 + 28) & 0x80) == 0)
    {
      v132 = (uint64_t *)(v45 + 32);
LABEL_368:
      v133 = *v132;
      goto LABEL_369;
    }
    v144 = *(_QWORD *)(v45 + 200);
    if (v144)
    {
      v132 = (uint64_t *)(v144 + 8);
      goto LABEL_368;
    }
    v133 = 0;
LABEL_371:
    v44 = 0;
    while (1)
    {
      v134 = v45;
      if (v44)
      {
        if (v133)
        {
          if (*(_DWORD *)(v133 + 24) == 2)
          {
            if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v133);
          }
          else
          {
            *(_DWORD *)(v133 + 24) -= 2;
          }
        }
        goto LABEL_106;
      }
      if (!v133)
      {
        v44 = 0;
        goto LABEL_106;
      }
      result = *((_QWORD *)this + 9);
      if (v166 == SkippingChildrenInComposedTreeIgnoringUserAgentShadow && v133 == result)
        break;
      v135 = *(_WORD *)this;
      if ((*(_WORD *)this & 0x200) != 0)
      {
        result = WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)result, (const WebCore::Node *)v133);
        if ((result & 1) != 0)
          break;
        v135 = *(_WORD *)this;
      }
      else
      {
        result = (uint64_t)WebCore::Node::isDescendantOf((const WebCore::Node ***)result, (const WebCore::Node ***)v133);
        if ((result & 1) != 0)
          break;
      }
      isRendererVisible = WebCore::isRendererVisible(*(_QWORD *)(v45 + 64) & 0xFFFFFFFFFFFFLL, v135);
      result = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v133;
      if (!result)
        goto LABEL_382;
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
      v133 = *((_QWORD *)this + 1);
      if (!v133)
      {
        v45 = 0;
      }
      else
      {
LABEL_382:
        *(_DWORD *)(v133 + 24) += 2;
        v45 = v133;
      }
      v137 = *((_DWORD *)this + 6);
      if (v137)
        *((_DWORD *)this + 6) = v137 - 1;
      if ((*(_WORD *)this & 0x200) != 0)
      {
        result = WebCore::Node::parentInComposedTree((WebCore::Node *)v45);
        v133 = result;
LABEL_389:
        if (v133)
          *(_DWORD *)(v133 + 24) += 2;
        goto LABEL_391;
      }
      if ((*(_WORD *)(v45 + 28) & 0x80) == 0)
      {
        v138 = (uint64_t *)(v45 + 32);
LABEL_388:
        v133 = *v138;
        goto LABEL_389;
      }
      v145 = *(_QWORD *)(v45 + 200);
      if (v145)
      {
        v138 = (uint64_t *)(v145 + 8);
        goto LABEL_388;
      }
      v133 = 0;
LABEL_391:
      if (isRendererVisible)
        result = WebCore::TextIterator::exitNode((uint64_t)this, (WebCore::Node *)v134);
      v139 = *((_QWORD *)this + 12);
      if (v139)
      {
        v44 = 0;
        *((_WORD *)this + 10) = 257;
      }
      else
      {
        result = WebCore::nextSibling(*(_WORD *)this, (WebCore::Node *)v45);
        v44 = result;
        if (result)
        {
          *(_DWORD *)(result + 24) += 2;
          result = WebCore::isRendererVisible(*(_QWORD *)(v45 + 64) & 0xFFFFFFFFFFFFLL, *(_WORD *)this);
          if ((_DWORD)result)
            result = WebCore::TextIterator::exitNode((uint64_t)this, (WebCore::Node *)v45);
        }
      }
      if (*(_DWORD *)(v134 + 24) == 2)
      {
        if ((*(_WORD *)(v134 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v134);
      }
      else
      {
        *(_DWORD *)(v134 + 24) -= 2;
      }
      if (v139)
      {
        if (!v133)
          goto LABEL_485;
        goto LABEL_483;
      }
    }
    v44 = 0;
LABEL_483:
    if (*(_DWORD *)(v133 + 24) == 2)
    {
      if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v133);
    }
    else
    {
      *(_DWORD *)(v133 + 24) -= 2;
    }
LABEL_485:
    if (v45)
    {
      if (*(_DWORD *)(v45 + 24) == 2)
      {
        if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v45);
      }
      else
      {
        *(_DWORD *)(v45 + 24) -= 2;
      }
    }
    if (v44)
    {
      if (*(_DWORD *)(v44 + 24) == 2)
      {
        if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v44);
      }
      else
      {
        *(_DWORD *)(v44 + 24) -= 2;
      }
    }
LABEL_209:
    v65 = 1;
LABEL_137:
    if (v14)
    {
      v66 = *(_DWORD *)(v14 + 16);
      if (!v66)
      {
        __break(0xC471u);
        JUMPOUT(0x195B23410);
      }
      *(_DWORD *)(v14 + 16) = v66 - 1;
    }
  }
  while (!v65);
  return result;
}

void WebCore::TextIterator::~TextIterator(WebCore::TextIterator *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    v6 = *((unsigned int *)v5 + 3);
    v7 = *(unsigned int **)v5;
    if ((_DWORD)v6)
    {
      v8 = 24 * v6;
      do
      {
        v9 = v7[4];
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, unsigned int *))off_1E33ADF08[v9])(&v26, v7);
        v7[4] = -1;
        v7 += 6;
        v8 -= 24;
      }
      while (v8);
      v7 = *(unsigned int **)v5;
    }
    if (v7)
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      WTF::fastFree((WTF *)v7, a2);
    }
    WTF::fastFree(v5, a2);
  }
  v10 = *((unsigned int *)this + 54);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, char *))off_1E33ADF08[v10])(&v27, (char *)this + 200);
  *((_DWORD *)this + 54) = -1;
  v11 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    v12 = *((unsigned int *)v11 + 3);
    v13 = *(unsigned int **)v11;
    if ((_DWORD)v12)
    {
      v14 = 24 * v12;
      do
      {
        v15 = v13[4];
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, unsigned int *))off_1E33ADF08[v15])(&v28, v13);
        v13[4] = -1;
        v13 += 6;
        v14 -= 24;
      }
      while (v14);
      v13 = *(unsigned int **)v11;
    }
    if (v13)
    {
      *(_QWORD *)v11 = 0;
      *((_DWORD *)v11 + 2) = 0;
      WTF::fastFree((WTF *)v13, a2);
    }
    WTF::fastFree(v11, a2);
  }
  v16 = *((unsigned int *)this + 46);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, char *))off_1E33ADF08[v16])(&v29, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v17 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  v20 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v21 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v21)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  v24 = (WTF *)*((_QWORD *)this + 4);
  if ((WebCore::TextIterator *)((char *)this + 48) != v24 && v24)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v24, a2);
  }
  v25 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
}

WTF::StringImpl *WebCore::TextIterator::emitCharacter(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, uint64_t *a4, int a5, int a6)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  WTF::StringImpl *result;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v9 = (int)a2;
  *(_BYTE *)(a1 + 252) = 1;
  v11 = *a3;
  *a3 = 0;
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = *a4;
  *a4 = 0;
  v14 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v13;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  *(_WORD *)(a1 + 120) = v9;
  v15 = (unsigned __int16 *)(a1 + 120);
  *(_DWORD *)(a1 + 112) = a5;
  *(_DWORD *)(a1 + 116) = a6;
  result = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  v17 = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      v17 = *v15;
    }
    else
    {
      *(_DWORD *)result -= 2;
      v17 = v9;
    }
  }
  *(_QWORD *)(a1 + 136) = 0;
  if (v17)
  {
    v19 = 1;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 128);
    if (v18 && *(_DWORD *)(v18 + 4))
    {
      v15 = *(unsigned __int16 **)(v18 + 8);
      v19 = (*(_DWORD *)(v18 + 16) & 4) << 30;
    }
    else
    {
      v19 = 0x100000000;
      v15 = (unsigned __int16 *)&str_7_40;
    }
  }
  *(_QWORD *)(a1 + 144) = v15;
  *(_DWORD *)(a1 + 152) = v19;
  *(_BYTE *)(a1 + 156) = BYTE4(v19);
  *(_WORD *)(a1 + 250) = v9;
  *(_BYTE *)(a1 + 248) = 0;
  return result;
}

WTF *WebCore::TextIterator::revertToRemainingTextRun(WebCore::TextIterator *this)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *result;
  char *v14;
  char v15;
  char v16;
  char v17;

  v2 = (_QWORD *)((char *)this + 200);
  v3 = (char *)this + 168;
  v4 = *((unsigned int *)this + 46);
  v5 = *((unsigned int *)this + 54);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(char *, char *))off_1E33ADF08[v4])(&v15, v3);
    *((_DWORD *)this + 46) = -1;
    goto LABEL_6;
  }
  v14 = (char *)this + 168;
  ((void (*)(char **))off_1E33ADF58[v5])(&v14);
LABEL_6:
  v6 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  v7 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v6;
  if (v7)
  {
    v8 = *((unsigned int *)v7 + 3);
    v9 = *(unsigned int **)v7;
    if ((_DWORD)v8)
    {
      v10 = 24 * v8;
      do
      {
        v11 = v9[4];
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, unsigned int *))off_1E33ADF08[v11])(&v16, v9);
        v9[4] = -1;
        v9 += 6;
        v10 -= 24;
      }
      while (v10);
      v9 = *(unsigned int **)v7;
    }
    if (v9)
    {
      *(_QWORD *)v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
      WTF::fastFree((WTF *)v9, v3);
    }
    WTF::fastFree(v7, v3);
  }
  v12 = *((unsigned int *)this + 54);
  if ((_DWORD)v12 != -1)
  {
    if ((_DWORD)v12 == 1)
    {
      *v2 = 0;
      goto LABEL_21;
    }
    ((void (*)(char *, _QWORD *))off_1E33ADF08[v12])(&v17, v2);
  }
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
LABEL_21:
  result = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v3);
    else
      --*(_DWORD *)result;
  }
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t WebCore::TextIterator::handleTextRun(uint64_t this)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  WebCore::InlineIterator::TextBox *v57;
  unsigned int v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  WebCore::RenderStyle *v77;
  uint64_t v78;
  int v79;
  WTF *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  WTF **v97;
  uint64_t v98;
  unsigned int v99;
  WebCore::RenderText *v100;
  unsigned int v101;
  WebCore::Node *v102;
  WebCore::Node *v103[2];
  uint64_t v104;
  WTF::StringImpl *v105;
  _BYTE v106[16];
  int v107;
  WTF *v108;
  WTF::StringImpl *v109[2];
  int v110;

  v4 = this;
  v5 = *(_QWORD *)(this + 8);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  if ((*(_WORD *)(v5 + 28) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B24F58);
  }
  v6 = *(_QWORD *)(this + 232);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v7 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B24C74);
      }
    }
  }
  ++*(_DWORD *)(v7 + 16);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 120) & 0x30) == 0 || (*(_WORD *)this & 8) != 0)
  {
    WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)v7, (uint64_t)v106);
    if ((*(_WORD *)v4 & 0x20) != 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v7 + 664))(&v105, v7);
    }
    else
    {
      v8 = *(WTF::StringImpl **)(v7 + 104);
      if (v8)
        *(_DWORD *)v8 += 2;
      v105 = v8;
    }
    v98 = *(_QWORD *)(v4 + 72);
    v100 = (WebCore::RenderText *)v7;
    if (v98 == v5)
      v99 = *(_DWORD *)(v4 + 80);
    else
      v99 = 0;
    v101 = *(_DWORD *)(v4 + 16);
    v97 = (WTF **)(v4 + 192);
    while (1)
    {
      v9 = *(unsigned int *)(v4 + 184);
      if ((_DWORD)v9 != -1)
      {
        v109[0] = (WTF::StringImpl *)v103;
        if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v9])(v109, v4 + 168) & 1) != 0)
        {
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)(v4 + 168))
            && (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)(v4 + 200)) & 1) == 0)
          {
            WebCore::TextIterator::revertToRemainingTextRun((WebCore::TextIterator *)v4);
            WebCore::TextIterator::handleTextRun((WebCore::TextIterator *)v4);
          }
LABEL_232:
          v7 = (uint64_t)v100;
          goto LABEL_233;
        }
        v10 = *(unsigned int *)(v4 + 184);
        if ((_DWORD)v10 != -1)
        {
          v109[0] = (WTF::StringImpl *)v103;
          if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33ADF28[v10])(v109, v4 + 168) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195B24D50);
          }
          v11 = *(unsigned int *)(v4 + 184);
          if ((_DWORD)v11 != -1)
          {
            v109[0] = (WTF::StringImpl *)v103;
            v12 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33ADF38[v11])(v109, v4 + 168);
            v13 = *(unsigned int *)(v4 + 184);
            if ((_DWORD)v13 != -1)
            {
              v14 = v12;
              v109[0] = (WTF::StringImpl *)v103;
              if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33ADF28[v13])(v109, v4 + 168) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195B24D70);
              }
              v15 = *(unsigned int *)(v4 + 184);
              if ((_DWORD)v15 != -1)
              {
                v109[0] = (WTF::StringImpl *)v103;
                v2 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33ADF48[v15])(v109, v4 + 168) + v14;
                if (v14 <= v101)
                  v3 = v101;
                else
                  v3 = v14;
                v16 = v99;
                if (v98 != v5)
                  v16 = v2;
                if (v16 >= v2)
                  v1 = v2;
                else
                  v1 = v16;
                LODWORD(v7) = v98 == v5 && v3 > v99;
                if (*(_BYTE *)(v4 + 248))
                {
                  v21 = 1;
                }
                else
                {
                  v17 = *(unsigned int *)(v4 + 184);
                  if ((_DWORD)v17 == -1)
                    goto LABEL_275;
                  v109[0] = (WTF::StringImpl *)v103;
                  if (((unsigned int (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v17])(v109, v4 + 168)&& (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v106) & 1) != 0)
                  {
                    v20 = 1;
                  }
                  else
                  {
                    v18 = *(unsigned int *)(v4 + 184);
                    v19 = v107 != -1 && v107 == v18;
                    if ((_DWORD)v18 == -1)
                      v20 = v107 == -1;
                    else
                      v20 = v19;
                    if ((_DWORD)v18 != -1 && v19)
                    {
                      v109[0] = (WTF::StringImpl *)v103;
                      v20 = ((uint64_t (*)(WTF::StringImpl **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v18])(v109, v4 + 168, v106);
                    }
                  }
                  if (v14 >= v101)
                    v21 = v20;
                  else
                    v21 = 0;
                  if (!(_DWORD)v3)
                    v21 = 0;
                }
                v22 = v7 | v21 ^ 1;
                LODWORD(v7) = -1;
                if ((v22 & 1) == 0)
                {
                  LODWORD(v27) = *(unsigned __int16 *)(v4 + 250);
                  if (*(_WORD *)(v4 + 250))
                  {
                    v23 = *((_QWORD *)v100 + 4);
                    if (v23)
                    {
                      v53 = *(_QWORD *)(v23 + 8);
                      goto LABEL_137;
                    }
                    goto LABEL_171;
                  }
                }
                while (1)
                {
                  v23 = v4 + 192;
                  WebCore::InlineIterator::updateTextLogicalOrderCacheIfNeeded((unsigned int *)(v4 + 168), v97);
                  v25 = *v97;
                  if (*v97)
                  {
                    v88 = *((_QWORD *)v25 + 2) + 1;
                    *((_QWORD *)v25 + 2) = v88;
                    if (v88 >= *((unsigned int *)v25 + 3))
                    {
                      v103[1] = 0;
                      v103[0] = 0;
                      v104 = 1;
                    }
                    else
                    {
                      v89 = *(_QWORD *)v25 + 24 * v88;
                      LOBYTE(v103[0]) = 0;
                      LODWORD(v104) = -1;
                      v90 = *(unsigned int *)(v89 + 16);
                      if ((_DWORD)v90 != -1)
                      {
                        ((void (*)(WTF::StringImpl **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v90])(v109, v103);
                        LODWORD(v104) = v90;
                      }
                    }
                    goto LABEL_57;
                  }
                  v26 = *(unsigned int *)(v4 + 184);
                  if ((_DWORD)v26 == -1)
                    goto LABEL_275;
                  v109[0] = (WTF::StringImpl *)v103;
                  if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v26])(v109, v4 + 168) & 1) != 0)break;
                  __break(0xC471u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  v53 = 0;
LABEL_137:
                  if ((_DWORD)v27 != 32)
                  {
                    if ((_DWORD)v27 == 10)
                    {
                      if ((WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(v53 + 80)) & 0xFFFFFFFB) != 0)
                        goto LABEL_177;
                      continue;
                    }
                    if ((_DWORD)v27 != 9)
                      goto LABEL_177;
                  }
                  v58 = *(_DWORD *)(v53 + 120);
                  v59 = (v58 >> 27) & 7;
                  v60 = v58 & 0x40000000;
                  v61 = v59 == 3 && v60 == 0;
                  if (v61 || v59 == 1)
                  {
LABEL_177:
                    v7 = (uint64_t)v100;
                    if (*(_QWORD *)(v4 + 240) != v5 || !(_DWORD)v3)
                      goto LABEL_188;
                    v62 = v23 ? *(_QWORD *)(v23 + 8) : 0;
                    if (!v105)
                      goto LABEL_188;
                    v63 = (v3 - 1);
                    if (*((_DWORD *)v105 + 1) <= v63)
                      goto LABEL_188;
                    v64 = *((_DWORD *)v105 + 4);
                    v65 = *((_QWORD *)v105 + 1);
                    if ((v64 & 4) != 0)
                      v66 = *(unsigned __int8 *)(v65 + v63);
                    else
                      v66 = *(unsigned __int16 *)(v65 + 2 * v63);
                    if (v66 == 9 || v66 == 32)
                    {
                      v70 = *(_DWORD *)(v62 + 120);
                      v71 = (v70 >> 27) & 7;
                      v72 = v70 & 0x40000000;
                      v73 = v71 == 3 && v72 == 0;
                      if (v73 || v71 == 1)
                        goto LABEL_188;
                    }
                    else if (v66 != 10
                           || (WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(v62 + 80)) & 0xFFFFFFFB) != 0)
                    {
LABEL_188:
                      v109[0] = (WTF::StringImpl *)v5;
                      v103[0] = 0;
                      v67 = v4;
                      v68 = v3;
                      v69 = v3;
                      goto LABEL_189;
                    }
                    if ((_DWORD)v3 == 1)
                    {
                      v68 = 0;
                      goto LABEL_213;
                    }
                    if ((v64 & 4) != 0)
                    {
                      if (v23)
                      {
                        while (1)
                        {
                          v74 = (v63 - 1);
                          v75 = *(unsigned __int8 *)(v65 + v74);
                          if (v75 == 9 || v75 == 32)
                          {
                            v91 = WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(*(_QWORD *)(v23 + 8) + 80));
                            if (v91 <= 5 && ((1 << v91) & 0x26) != 0)
                              goto LABEL_305;
                          }
                          else
                          {
                            if (v75 != 10)
                              goto LABEL_212;
                            if ((WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(*(_QWORD *)(v23 + 8) + 80)) & 0xFFFFFFFB) != 0)
                              goto LABEL_305;
                          }
                          v68 = 0;
                          LODWORD(v63) = v63 - 1;
                          v7 = (uint64_t)v100;
                          if (!v74)
                            goto LABEL_213;
                        }
                      }
                      v7 = (uint64_t)v100;
                      while (1)
                      {
                        v93 = (v63 - 1);
                        v94 = *(unsigned __int8 *)(v65 + v93);
                        if (v94 == 9 || v94 == 32)
                        {
                          v96 = WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)0x50);
                          if (v96 <= 5 && ((1 << v96) & 0x26) != 0)
                            goto LABEL_305;
                        }
                        else
                        {
                          if (v94 != 10)
                          {
                            v7 = (uint64_t)v100;
LABEL_212:
                            v68 = v63;
LABEL_213:
                            v109[0] = (WTF::StringImpl *)v5;
                            v103[0] = 0;
                            v69 = v68 + 1;
                            v67 = v4;
LABEL_189:
                            WebCore::TextIterator::emitCharacter(v67, (WTF::StringImpl *)0x20, (uint64_t *)v109, (uint64_t *)v103, v68, v69);
                            if (v103[0])
                            {
                              if (*((_DWORD *)v103[0] + 6) == 2)
                              {
                                if ((*((_WORD *)v103[0] + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v103[0]);
                              }
                              else
                              {
                                *((_DWORD *)v103[0] + 6) -= 2;
                              }
                            }
                            if (v109[0])
                            {
                              if (*((_DWORD *)v109[0] + 6) == 2)
                              {
                                if ((*((_WORD *)v109[0] + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v109[0]);
                              }
                              else
                              {
                                *((_DWORD *)v109[0] + 6) -= 2;
                              }
                            }
                            v5 = 0;
LABEL_233:
                            this = (uint64_t)v105;
                            v105 = 0;
                            if (this)
                            {
                              if (*(_DWORD *)this == 2)
                                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v24);
                              else
                                *(_DWORD *)this -= 2;
                            }
                            v80 = v108;
                            v108 = 0;
                            if (v80)
                            {
                              v81 = *((unsigned int *)v80 + 3);
                              v82 = *(unsigned int **)v80;
                              if ((_DWORD)v81)
                              {
                                v83 = 24 * v81;
                                do
                                {
                                  v84 = v82[4];
                                  if ((_DWORD)v84 != -1)
                                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33ADF08[v84])(v109, v82);
                                  v82[4] = -1;
                                  v82 += 6;
                                  v83 -= 24;
                                }
                                while (v83);
                                v82 = *(unsigned int **)v80;
                              }
                              if (v82)
                              {
                                *(_QWORD *)v80 = 0;
                                *((_DWORD *)v80 + 2) = 0;
                                WTF::fastFree((WTF *)v82, v24);
                              }
                              this = WTF::fastFree(v80, v24);
                            }
                            if (v107 != -1)
                              this = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33ADF08[v107])(v109, v106);
                            goto LABEL_248;
                          }
                          if ((WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)0x50) & 0xFFFFFFFB) != 0)
                            goto LABEL_305;
                        }
                        v68 = 0;
                        LODWORD(v63) = v63 - 1;
                        if (!v93)
                          goto LABEL_213;
                      }
                    }
                    while (1)
                    {
                      if (v23)
                        v76 = *(_QWORD *)(v23 + 8);
                      else
                        v76 = 0;
                      v77 = (WebCore::RenderStyle *)(v76 + 80);
                      v78 = (v63 - 1);
                      v79 = *(unsigned __int16 *)(v65 + 2 * v78);
                      if (v79 == 9 || v79 == 32)
                      {
                        v95 = WebCore::RenderStyle::whiteSpace(v77);
                        if (v95 <= 5 && ((1 << v95) & 0x26) != 0)
                          goto LABEL_305;
                      }
                      else
                      {
                        if (v79 != 10)
                          goto LABEL_212;
                        if ((WebCore::RenderStyle::whiteSpace(v77) & 0xFFFFFFFB) != 0)
                        {
LABEL_305:
                          v68 = v63;
                          v7 = (uint64_t)v100;
                          goto LABEL_213;
                        }
                      }
                      v68 = 0;
                      LODWORD(v63) = v63 - 1;
                      v7 = (uint64_t)v100;
                      if (!v78)
                        goto LABEL_213;
                    }
                  }
                }
                LOBYTE(v109[0]) = 0;
                v110 = -1;
                v28 = *(unsigned int *)(v4 + 184);
                if ((_DWORD)v28 == -1)
                  goto LABEL_275;
                ((void (*)(WebCore::Node **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v28])(v103, v109, v4 + 168);
                v110 = v28;
                v103[0] = (WebCore::Node *)&v102;
                ((void (*)(WebCore::Node **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15TextBoxIterator19traverseNextTextBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v28])(v103, v109);
                LOBYTE(v103[0]) = 0;
                LODWORD(v104) = -1;
                v29 = v110;
                if (v110 != -1)
                {
                  ((void (*)(WebCore::Node **, WebCore::Node **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v110])(&v102, v103, v109);
                  LODWORD(v104) = v29;
                  if (v110 != -1)
                    ((void (*)(WebCore::Node **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v110])(&v102, v109);
                }
LABEL_57:
                if (v3 >= v1)
                {
                  WebCore::InlineIterator::TextBoxIterator::operator=(v4 + 168, (uint64_t)v103);
                  goto LABEL_120;
                }
                if (v105)
                {
                  v30 = *((unsigned int *)v105 + 1);
                  if (v30 <= v3)
                  {
                    v32 = v3;
                  }
                  else
                  {
                    v31 = *((_QWORD *)v105 + 1);
                    v32 = v3;
                    if ((*((_BYTE *)v105 + 16) & 4) != 0)
                      v33 = *(unsigned __int8 *)(v31 + v3);
                    else
                      v33 = *(unsigned __int16 *)(v31 + 2 * v3);
                    if ((v33 - 9) < 2)
                    {
                      *(_DWORD *)(v5 + 24) += 2;
                      v109[0] = (WTF::StringImpl *)v5;
                      v102 = 0;
                      WebCore::TextIterator::emitCharacter(v4, (WTF::StringImpl *)0x20, (uint64_t *)v109, (uint64_t *)&v102, v3, v3 + 1);
                      if (v102)
                      {
                        if (*((_DWORD *)v102 + 6) == 2)
                        {
                          if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v102);
                        }
                        else
                        {
                          *((_DWORD *)v102 + 6) -= 2;
                        }
                      }
                      if (v109[0])
                      {
                        if (*((_DWORD *)v109[0] + 6) == 2)
                        {
                          if ((*((_WORD *)v109[0] + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v109[0]);
                        }
                        else
                        {
                          *((_DWORD *)v109[0] + 6) -= 2;
                        }
                      }
                      *(_DWORD *)(v4 + 16) = v3 + 1;
                      goto LABEL_110;
                    }
                  }
                  if (v1 <= (int)v3 + 1)
                    v34 = v3 + 1;
                  else
                    v34 = v1;
                  v35 = v34 - 1;
                  v36 = v32 + 1;
                  while (v36 < v1)
                  {
                    if (v36 >= v30)
                    {
                      v37 = 0;
                    }
                    else
                    {
                      v38 = *((_QWORD *)v105 + 1);
                      if ((*((_BYTE *)v105 + 16) & 4) != 0)
                        v37 = *(unsigned __int8 *)(v38 + v36);
                      else
                        v37 = *(unsigned __int16 *)(v38 + 2 * v36);
                    }
                    LODWORD(v32) = v32 + 1;
                    ++v36;
                    if ((v37 - 9) <= 1)
                      goto LABEL_314;
                  }
                  LODWORD(v32) = v34;
                }
                else
                {
                  if (v1 <= (int)v3 + 1)
                    LODWORD(v32) = v3 + 1;
                  else
                    LODWORD(v32) = v1;
LABEL_314:
                  v35 = v32 - 1;
                }
                if ((_DWORD)v32 == (_DWORD)v1)
                {
                  if ((*(_WORD *)v4 & 0x80) != 0
                    && WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v103)
                    && v105)
                  {
                    LODWORD(v32) = v1;
                    if (*((_DWORD *)v105 + 1) > v1)
                    {
                      v86 = *((_QWORD *)v105 + 1);
                      if ((*((_BYTE *)v105 + 16) & 4) != 0)
                        v87 = *(unsigned __int8 *)(v86 + v1);
                      else
                        v87 = *(unsigned __int16 *)(v86 + 2 * v1);
                      if (v87 == 32)
                        LODWORD(v32) = v35 + 2;
                      else
                        LODWORD(v32) = v1;
                    }
                  }
                  else
                  {
                    LODWORD(v32) = v1;
                  }
                }
                *(_DWORD *)(v4 + 16) = v32;
                if ((*(_WORD *)v4 & 0x20) != 0)
                {
                  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v100 + 664))(v109);
                  LODWORD(v7) = -1;
                }
                else
                {
                  LODWORD(v7) = -1;
                  if ((*(_WORD *)v4 & 4) == 0)
                  {
                    v39 = (WTF::StringImpl *)*((_QWORD *)v100 + 13);
                    if (v39)
                      *(_DWORD *)v39 += 2;
                    v109[0] = v39;
LABEL_82:
                    if (v39)
                      LODWORD(v39) = *((_DWORD *)v39 + 1);
                    if (v39 < v32)
                      LODWORD(v32) = (_DWORD)v39;
                    *(_DWORD *)(v5 + 24) += 2;
                    v40 = *(_QWORD *)(v4 + 96);
                    *(_QWORD *)(v4 + 96) = v5;
                    if (v40)
                    {
                      if (*(_DWORD *)(v40 + 24) == 2)
                      {
                        if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v40);
                      }
                      else
                      {
                        *(_DWORD *)(v40 + 24) -= 2;
                      }
                    }
                    v41 = *(_QWORD *)(v4 + 104);
                    *(_QWORD *)(v4 + 104) = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)(v41 + 24) == 2)
                      {
                        if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v41);
                      }
                      else
                      {
                        *(_DWORD *)(v41 + 24) -= 2;
                      }
                    }
                    *(_DWORD *)(v4 + 112) = v3;
                    *(_DWORD *)(v4 + 116) = v32;
                    v42 = v109[0];
                    if (v109[0] && (v43 = (v32 - 1), *((_DWORD *)v109[0] + 1) > v43))
                    {
                      v44 = *((_QWORD *)v109[0] + 1);
                      if ((*((_BYTE *)v109[0] + 16) & 4) != 0)
                        v45 = *(unsigned __int8 *)(v44 + v43);
                      else
                        v45 = *(_WORD *)(v44 + 2 * v43);
                    }
                    else
                    {
                      v45 = 0;
                    }
                    *(_WORD *)(v4 + 250) = v45;
                    v23 = (v32 - v3);
                    *(_WORD *)(v4 + 120) = 0;
                    v109[0] = 0;
                    v46 = *(WTF::StringImpl **)(v4 + 128);
                    *(_QWORD *)(v4 + 128) = v42;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 != 2)
                      {
                        *(_DWORD *)v46 -= 2;
                        goto LABEL_99;
                      }
                      WTF::StringImpl::destroy(v46, v24);
                      v54 = *(unsigned __int16 *)(v4 + 120);
                      *(_DWORD *)(v4 + 136) = v3;
                      *(_DWORD *)(v4 + 140) = v23;
                      if (v54)
                        goto LABEL_276;
                      v42 = *(WTF::StringImpl **)(v4 + 128);
                    }
                    else
                    {
LABEL_99:
                      *(_DWORD *)(v4 + 136) = v3;
                      *(_DWORD *)(v4 + 140) = v23;
                    }
                    if (v42)
                    {
                      v27 = (char *)*((_QWORD *)v42 + 1);
                      v47 = *((unsigned int *)v42 + 1) | ((unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32);
                    }
                    else
                    {
                      v27 = 0;
                      v47 = 0x100000000;
                    }
                    if (v47 <= v3)
                    {
                      v48 = 0x100000000;
                      v27 = (char *)&str_7_40;
                      goto LABEL_107;
                    }
                    if ((int)v47 - (int)v3 <= v23)
                    {
                      if (!(_DWORD)v3)
                      {
                        v48 = v47;
                        goto LABEL_107;
                      }
                      v23 = (v47 - v3);
                    }
                    v48 = v23;
                    v49 = v47 - (unint64_t)v3;
                    if ((v47 & 0x100000000) != 0)
                    {
                      if (v49 >= v23)
                      {
                        v27 += v3;
                        v48 = v23 | 0x100000000;
                        goto LABEL_107;
                      }
                    }
                    else if (v49 >= v23)
                    {
                      v27 += 2 * v3;
                      goto LABEL_107;
                    }
                    goto LABEL_170;
                  }
                  WebCore::RenderText::textWithoutConvertingBackslashToYenSymbol(v100, v109);
                }
                v39 = v109[0];
                goto LABEL_82;
              }
            }
          }
        }
      }
      do
      {
LABEL_275:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_276:
        v27 = (char *)(v4 + 120);
        v48 = 1;
LABEL_107:
        *(_QWORD *)(v4 + 144) = v27;
        *(_DWORD *)(v4 + 152) = v48;
        *(_BYTE *)(v4 + 156) = BYTE4(v48);
        *(_BYTE *)(v4 + 248) = 0;
        *(_BYTE *)(v4 + 252) = 1;
        v50 = v109[0];
        v109[0] = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v24);
          else
            *(_DWORD *)v50 -= 2;
        }
LABEL_110:
        if (*(_DWORD *)(v4 + 116) < v2)
          goto LABEL_120;
      }
      while ((_DWORD)v104 == -1);
      v109[0] = (WTF::StringImpl *)&v102;
      if ((((uint64_t (*)(WTF::StringImpl **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v104])(v109, v103) & 1) != 0)
      {
        if (!v105)
          goto LABEL_117;
        v51 = *((_DWORD *)v105 + 1);
      }
      else
      {
        v57 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v103);
        v51 = WebCore::InlineIterator::TextBox::start(v57);
      }
      if (v51 > v1)
        *(_BYTE *)(v4 + 248) = 1;
LABEL_117:
      v52 = *(unsigned int *)(v4 + 184);
      if ((_DWORD)v52 != -1)
      {
        if ((_DWORD)v104 == -1)
        {
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E33ADF08[v52])(v109, v4 + 168);
          *(_DWORD *)(v4 + 184) = v7;
        }
        else
        {
LABEL_119:
          v109[0] = (WTF::StringImpl *)(v4 + 168);
          ((void (*)(WTF::StringImpl **, uint64_t, WebCore::Node **))off_1E33ADF58[v104])(v109, v4 + 168, v103);
        }
LABEL_120:
        if ((_DWORD)v104 != -1)
          ((void (*)(WTF::StringImpl **, WebCore::Node **))off_1E33ADF08[v104])(v109, v103);
        goto LABEL_122;
      }
      if ((_DWORD)v104 != -1)
        goto LABEL_119;
LABEL_122:
      if (v3 < v1)
        goto LABEL_232;
    }
  }
  v55 = *(unsigned int *)(this + 184);
  if ((_DWORD)v55 != -1)
  {
    v56 = (_QWORD *)(this + 168);
    if ((_DWORD)v55 == 1)
    {
      *v56 = 0;
      goto LABEL_248;
    }
    this = ((uint64_t (*)(_BYTE *, _QWORD *))off_1E33ADF08[v55])(v106, v56);
  }
  *(_QWORD *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 184) = 1;
LABEL_248:
  v85 = *(_DWORD *)(v7 + 16);
  if (!v85)
  {
    __break(0xC471u);
    JUMPOUT(0x195B2510CLL);
  }
  *(_DWORD *)(v7 + 16) = v85 - 1;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

WebCore::Node *WebCore::TextIterator::representNodeOffsetZero(WebCore::TextIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  int v12;
  WebCore::Node *v13;
  WebCore::TextIterator *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  WebCore::Node *result;
  WebCore::Node *v32;
  __int16 v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  WebCore::Node *v40;
  WebCore::Node *v41;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v41 = (WebCore::Node *)v2;
  v3 = *(_QWORD *)(v2 + 64);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0 && *(_BYTE *)((v3 & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
  {
    v16 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)(v4 + 16) = v16;
    v17 = *(_QWORD *)(v4 + 32);
    if (v17)
    {
      v17 = *(_QWORD *)(v17 + 8);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x195B25A90);
        }
        v17 = *(_QWORD *)(v17 + 32);
        if (v17)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if (v17)
          {
            if (*(_BYTE *)(v17 + 46) != 40)
            {
              __break(0xC471u);
              JUMPOUT(0x195B25AB0);
            }
            v17 = *(_QWORD *)(v17 + 32);
            if (v17)
            {
              v18 = *(_QWORD *)(v17 + 8);
              if (v18)
              {
                v19 = *(unsigned __int8 *)(v18 + 46);
                if (v19 != 35 && v19 != 63)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B25B8CLL);
                }
                ++*(_DWORD *)(v18 + 16);
                if (WebCore::RenderTable::cellBefore((WebCore::RenderTable *)v18, (const WebCore::RenderTableCell *)v4))
                  LOBYTE(v17) = 1;
                else
                  LOBYTE(v17) = WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v18, (const WebCore::RenderTableCell *)v4) != 0;
                v20 = *(_DWORD *)(v18 + 16);
                if (!v20)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B25AD0);
                }
                *(_DWORD *)(v18 + 16) = v20 - 1;
                v16 = *(_DWORD *)(v4 + 16);
              }
              else
              {
                LOBYTE(v17) = 0;
              }
            }
          }
        }
      }
    }
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x195B25A70);
    }
    *(_DWORD *)(v4 + 16) = v16 - 1;
    if ((v17 & 1) != 0)
    {
      if (!WebCore::TextIterator::shouldRepresentNodeOffsetZero(this))
        goto LABEL_72;
      v21 = *(WebCore::Node **)(v2 + 32);
      if (v21)
        *((_DWORD *)v21 + 6) += 2;
      v40 = v21;
      v14 = this;
      v15 = 9;
      goto LABEL_81;
    }
    v3 = *(_QWORD *)(v2 + 64);
  }
  v5 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    v33 = *(_WORD *)(v2 + 28);
    if ((v33 & 8) != 0)
    {
      v34 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v34 + 2;
      v35 = (*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0
         && (v39 = *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
         && (*(_QWORD *)(v39 + 16) & 0x1FLL) == 18;
      if (v34)
      {
        *(_DWORD *)(v2 + 24) = v34;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
        if (v35)
          goto LABEL_20;
        v33 = *(_WORD *)(v2 + 28);
        goto LABEL_93;
      }
      if (v35)
        goto LABEL_20;
    }
LABEL_93:
    if ((v33 & 0x10) != 0)
    {
      v36 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v36 + 2;
      v37 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
      v38 = *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24) == v37
         || *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24) == v37
         || *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24) == v37
         || *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24) == v37
         || *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24) == v37
         || *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24) == v37
         || v37 == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::ddTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::divTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::dtTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::liTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::listingTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::pTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::preTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::trTag + 24)
         || v37 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24);
      if (v36)
      {
        *(_DWORD *)(v2 + 24) = v36;
        if (v38)
          goto LABEL_71;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) != 0)
      {
        if (v38)
          goto LABEL_71;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
        if (v38)
          goto LABEL_71;
      }
    }
    goto LABEL_20;
  }
  v6 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)(v5 + 16) = v6 + 1;
  v7 = *(unsigned __int8 *)(v5 + 46);
  if (v7 != 37)
  {
    if (v7 == 39)
    {
      v23 = v6 + 2;
      *(_DWORD *)(v5 + 16) = v23;
      v24 = *(_QWORD *)(v5 + 32);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          if (*(_BYTE *)(v25 + 46) != 40)
          {
            __break(0xC471u);
            JUMPOUT(0x195B25AF0);
          }
          v26 = *(_QWORD *)(v25 + 32);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            if (v27)
            {
              v28 = *(unsigned __int8 *)(v27 + 46);
              if (v28 != 35 && v28 != 63)
              {
                __break(0xC471u);
                JUMPOUT(0x195B25BACLL);
              }
              v29 = *(_DWORD *)(v27 + 16);
              *(_DWORD *)(v27 + 16) = v29 + 1;
              if ((*(_BYTE *)(v27 + 20) & 1) != 0)
              {
                if (v29 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B25B10);
                }
                *(_DWORD *)(v27 + 16) = v29;
                v30 = *(_DWORD *)(v5 + 16);
                if (!v30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B25B30);
                }
                *(_DWORD *)(v5 + 16) = v30 - 1;
                if (v30 != 1)
                {
                  *(_DWORD *)(v5 + 16) = v30 - 2;
                  goto LABEL_71;
                }
LABEL_113:
                __break(0xC471u);
                JUMPOUT(0x195B259ECLL);
              }
              if (v29 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x195B25BCCLL);
              }
              *(_DWORD *)(v27 + 16) = v29;
              v23 = *(_DWORD *)(v5 + 16);
            }
          }
        }
      }
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x195B25B6CLL);
      }
      *(_DWORD *)(v5 + 16) = v23 - 1;
    }
    if ((*(_WORD *)(v2 + 28) & 8) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 888))(v2) & 1) != 0
      || (v8 = *(_DWORD *)(v5 + 20), (v8 & 1) == 0)
      || (*(_BYTE *)(v5 + 45) & 0x40) == 0)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      if ((v8 & 0x800) == 0 && (v8 & 0x1800000) != 0x1000000)
        v9 = (*(_BYTE *)(v5 + 45) & 1) != 0
          || (v10 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8)) == 0
          || (*(_WORD *)(v10 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    }
    v11 = *(_DWORD *)(v5 + 16);
    if (v11)
    {
      *(_DWORD *)(v5 + 16) = v11 - 1;
      if (!v9)
        goto LABEL_20;
LABEL_71:
      if (!WebCore::TextIterator::shouldRepresentNodeOffsetZero(this))
        goto LABEL_72;
      v32 = *(WebCore::Node **)(v2 + 32);
      if (v32)
        *((_DWORD *)v32 + 6) += 2;
      v40 = v32;
      v14 = this;
      v15 = 10;
      goto LABEL_81;
    }
    goto LABEL_113;
  }
  if (v6 == -1)
    goto LABEL_113;
  *(_DWORD *)(v5 + 16) = v6;
LABEL_20:
  if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && ((v12 = *(unsigned __int8 *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E), v12 == 63) || v12 == 35)
    && ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0 || (*(_WORD *)this & 1) != 0))
  {
    if (!WebCore::TextIterator::shouldRepresentNodeOffsetZero(this))
      goto LABEL_72;
    v22 = *(WebCore::Node **)(v2 + 32);
    if (v22)
      *((_DWORD *)v22 + 6) += 2;
    v40 = v22;
    v14 = this;
    v15 = 32;
  }
  else
  {
    if ((*(_WORD *)(v2 + 28) & 8) == 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 888))(v2)
      || !WebCore::TextIterator::shouldRepresentNodeOffsetZero(this))
    {
      goto LABEL_72;
    }
    v13 = *(WebCore::Node **)(v2 + 32);
    if (v13)
      *((_DWORD *)v13 + 6) += 2;
    v40 = v13;
    v14 = this;
    v15 = 65532;
  }
LABEL_81:
  WebCore::TextIterator::emitCharacter((uint64_t)v14, (WTF::StringImpl *)v15, (uint64_t *)&v40, (uint64_t *)&v41, 0, 0);
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
LABEL_72:
  result = v41;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::isRendererVisible(uint64_t result, __int16 a2)
{
  uint64_t v3;

  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 32);
      if (v3)
        result = *(_QWORD *)(v3 + 8);
      else
        result = 0;
    }
    return WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(result + 80))
        || (a2 & 0x800) == 0;
  }
  return result;
}

BOOL WebCore::hasDisplayContents(WebCore *this, WebCore::Node *a2)
{
  int v2;
  _BOOL8 v3;
  uint64_t v5;

  if ((*((_WORD *)this + 14) & 8) == 0)
    return 0;
  v2 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2 + 2;
  v3 = (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
    && (v5 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
    && (*(_QWORD *)(v5 + 16) & 0x1FLL) == 18;
  if (v2)
  {
    *((_DWORD *)this + 6) = v2;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this);
  }
  return v3;
}

uint64_t WebCore::TextIterator::handleReplacedElement(WebCore::TextIterator *this, const WebCore::HTMLElement *a2)
{
  int v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  __int16 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WebCore::Node *v47;
  WTF::StringImpl *v48;
  WebCore::Node *v49;
  WTF::StringImpl *v50;

  v4 = (char *)this + 24;
  v3 = *((_DWORD *)this + 6);
  if (v3)
  {
    v5 = v3 - 1;
    if (*((_DWORD *)this + 11) <= v5 >> 5)
    {
      __break(0xC471u);
LABEL_169:
      JUMPOUT(0x195B26124);
    }
    if (((*(_DWORD *)(*((_QWORD *)this + 4) + 4 * (v5 >> 5)) >> v5) & 1) != 0)
      return 0;
  }
  v7 = (char *)this + 8;
  v6 = *((_QWORD *)this + 1);
  v8 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  v9 = *(_DWORD *)(v8 + 0x10);
  *(_DWORD *)(v8 + 16) = v9 + 1;
  v10 = v8;
  if ((*(_BYTE *)(v8 + 45) & 2) != 0)
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
  if ((*(_BYTE *)(v10 + 120) & 0x30) != 0 && (*(_WORD *)this & 8) == 0)
    goto LABEL_65;
  if (*((_BYTE *)this + 248))
  {
    v28 = *((_QWORD *)this + 30);
    v29 = *(WTF::StringImpl **)(v28 + 32);
    if (v29)
      *((_DWORD *)v29 + 6) += 2;
    v49 = (WebCore::Node *)v28;
    v50 = v29;
    *(_DWORD *)(v28 + 24) += 2;
    WebCore::TextIterator::emitCharacter((uint64_t)this, (WTF::StringImpl *)0x20, (uint64_t *)&v50, (uint64_t *)&v49, 1, 1);
    if (v49)
    {
      if (*((_DWORD *)v49 + 6) == 2)
      {
        if ((*((_WORD *)v49 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v49);
      }
      else
      {
        *((_DWORD *)v49 + 6) -= 2;
      }
    }
    if (v50)
    {
      if (*((_DWORD *)v50 + 6) == 2)
      {
        if ((*((_WORD *)v50 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v50);
      }
      else
      {
        *((_DWORD *)v50 + 6) -= 2;
      }
    }
LABEL_65:
    v22 = 0;
LABEL_60:
    v25 = *(_DWORD *)(v8 + 16);
    goto LABEL_61;
  }
  if (v8)
    v11 = (*(_BYTE *)(v8 + 52) & 7) == 1;
  else
    v11 = 0;
  if (!v11 || (*(_BYTE *)(v8 + 53) & 4) == 0)
  {
LABEL_18:
    if ((*(_WORD *)(v6 + 28) & 0x10) != 0)
    {
      *(_DWORD *)(v6 + 24) += 2;
      if ((*(_WORD *)this & 0x400) != 0)
      {
        if (WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)v6, a2))
        {
          v43 = *(_QWORD *)v7;
          if (*(_QWORD *)v7)
          {
            if ((*(_WORD *)(v43 + 28) & 8) != 0)
            {
              v44 = *(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL;
              if (v44)
              {
                v45 = *(WTF::StringImpl **)(v44 + 88);
                if (v45)
                {
                  *((_DWORD *)v45 + 6) += 2;
                  v50 = v45;
                  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 1, (uint64_t *)&v50);
                  v46 = *(_QWORD *)v7;
                  if (v46)
                    *(_DWORD *)(v46 + 24) += 2;
                  WebCore::pushFullyClippedState((uint64_t)v4, (WebCore::Node *)v46);
                  if (*(_DWORD *)(v46 + 24) == 2)
                  {
                    if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v46);
                  }
                  else
                  {
                    *(_DWORD *)(v46 + 24) -= 2;
                  }
                  *((_DWORD *)this + 4) = 0;
                  if (v50)
                  {
                    if (*((_DWORD *)v50 + 6) == 2)
                    {
                      if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v50);
                    }
                    else
                    {
                      *((_DWORD *)v50 + 6) -= 2;
                    }
                  }
                  v22 = 0;
                  goto LABEL_58;
                }
              }
            }
          }
        }
      }
      v14 = 0;
LABEL_23:
      *((_BYTE *)this + 252) = 1;
      if ((*(_WORD *)this & 0x10) != 0)
      {
        v23 = *(_QWORD *)v7;
        goto LABEL_49;
      }
      if ((*(_WORD *)this & 0x1000) != 0
        && (v23 = *(_QWORD *)v7) != 0
        && (*(_WORD *)(v23 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
        || (*(_WORD *)this & 0x2000) != 0
        && (v23 = *(_QWORD *)v7) != 0
        && (v27 = *(_WORD *)(v23 + 28), (v27 & 0x10) != 0)
        && (v27 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
LABEL_49:
        v24 = *(WTF::StringImpl **)(v23 + 32);
        if (v24)
          *((_DWORD *)v24 + 6) += 2;
        v49 = (WebCore::Node *)v23;
        v50 = v24;
        *(_DWORD *)(v23 + 24) += 2;
        WebCore::TextIterator::emitCharacter((uint64_t)this, (WTF::StringImpl *)0xFFFC, (uint64_t *)&v50, (uint64_t *)&v49, 0, 1);
        if (v49)
        {
          if (*((_DWORD *)v49 + 6) == 2)
          {
            if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v49);
          }
          else
          {
            *((_DWORD *)v49 + 6) -= 2;
          }
        }
        if (v50)
        {
          if (*((_DWORD *)v50 + 6) == 2)
          {
            if ((*((_WORD *)v50 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v50);
          }
          else
          {
            *((_DWORD *)v50 + 6) -= 2;
          }
        }
        v22 = 1;
        *((_BYTE *)this + 21) = 1;
        if ((v14 & 1) != 0)
          goto LABEL_60;
        goto LABEL_58;
      }
      if ((*(_WORD *)this & 1) != 0)
      {
        v47 = *(WebCore::Node **)v7;
        v48 = *(WTF::StringImpl **)(*(_QWORD *)v7 + 32);
        if (v48)
          *((_DWORD *)v48 + 6) += 2;
        v49 = v47;
        v50 = v48;
        *((_DWORD *)v47 + 6) += 2;
        WebCore::TextIterator::emitCharacter((uint64_t)this, (WTF::StringImpl *)0x2C, (uint64_t *)&v50, (uint64_t *)&v49, 0, 1);
        if (v49)
        {
          if (*((_DWORD *)v49 + 6) == 2)
          {
            if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v49);
          }
          else
          {
            *((_DWORD *)v49 + 6) -= 2;
          }
        }
        if (v50)
        {
          if (*((_DWORD *)v50 + 6) == 2)
          {
            if ((*((_WORD *)v50 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v50);
          }
          else
          {
            *((_DWORD *)v50 + 6) -= 2;
          }
        }
        v22 = 1;
        if ((v14 & 1) != 0)
          goto LABEL_60;
        goto LABEL_58;
      }
      v15 = *((_QWORD *)this + 1);
      v16 = *(_QWORD *)(v15 + 32);
      if (v16)
        *(_DWORD *)(v16 + 24) += 2;
      v17 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v16;
      if (v17)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v17);
            v15 = *((_QWORD *)this + 1);
            v18 = (uint64_t *)((char *)this + 104);
            if (!v15)
            {
LABEL_34:
              v19 = *v18;
              *v18 = v15;
              if (v19)
              {
                if (*(_DWORD *)(v19 + 24) == 2)
                {
                  if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v19);
                }
                else
                {
                  *(_DWORD *)(v19 + 24) -= 2;
                }
              }
              *((_QWORD *)this + 14) = 0x100000000;
              if (v8 && (*(_BYTE *)(v8 + 52) & 7) == 3 && (*(_BYTE *)(v8 + 53) & 1) != 0)
              {
                v20 = *(_DWORD *)(v8 + 16) + 1;
                *(_DWORD *)(v8 + 16) = v20;
                if ((*(_WORD *)this & 0x40) != 0)
                {
                  v35 = *(WTF::StringImpl **)(v8 + 216);
                  if (v35)
                  {
                    v36 = *(_DWORD *)v35;
                    *(_DWORD *)v35 += 2;
                    v50 = v35;
                    v37 = *((_DWORD *)v35 + 1);
                    if (v37)
                    {
                      v38 = (v37 - 1);
                      v39 = *((_QWORD *)v35 + 1);
                      if ((*((_BYTE *)v35 + 16) & 4) != 0)
                        v40 = *(unsigned __int8 *)(v39 + v38);
                      else
                        v40 = *(_WORD *)(v39 + 2 * v38);
                      *((_WORD *)this + 125) = v40;
                      WebCore::TextIteratorCopyableText::set((uint64_t)this + 120, (WTF::StringImpl *)&v50);
                      *((_QWORD *)this + 18) = WebCore::TextIteratorCopyableText::text((unsigned int *)this + 30);
                      *((_DWORD *)this + 38) = (_DWORD)v41;
                      *((_BYTE *)this + 156) = BYTE4(v41);
                      if (v50)
                      {
                        if (*(_DWORD *)v50 == 2)
                          WTF::StringImpl::destroy(v50, v41);
                        else
                          *(_DWORD *)v50 -= 2;
                      }
                      v42 = *(_DWORD *)(v8 + 16);
                      if (v42)
                      {
                        v25 = v42 - 1;
                        *(_DWORD *)(v8 + 16) = v25;
                        v22 = 1;
                        if ((v14 & 1) != 0)
                          goto LABEL_61;
LABEL_58:
                        if (*(_DWORD *)(v6 + 24) == 2)
                        {
                          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v6);
                        }
                        else
                        {
                          *(_DWORD *)(v6 + 24) -= 2;
                        }
                        goto LABEL_60;
                      }
LABEL_125:
                      __break(0xC471u);
                      JUMPOUT(0x195B262A4);
                    }
                    if (v36)
                    {
                      *(_DWORD *)v35 = v36;
                    }
                    else
                    {
                      WTF::StringImpl::destroy(v35, a2);
                      v20 = *(_DWORD *)(v8 + 16);
                    }
                  }
                }
                if (!v20)
                  goto LABEL_125;
                *(_DWORD *)(v8 + 16) = v20 - 1;
              }
              *((_WORD *)this + 60) = 0;
              v21 = (WTF::StringImpl *)*((_QWORD *)this + 16);
              *((_QWORD *)this + 16) = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, a2);
                else
                  *(_DWORD *)v21 -= 2;
              }
              *((_QWORD *)this + 17) = 0;
              *((_QWORD *)this + 18) = 0;
              *((_DWORD *)this + 38) = 0;
              v22 = 1;
              *((_BYTE *)this + 156) = 1;
              *((_WORD *)this + 125) = 0;
              if ((v14 & 1) != 0)
                goto LABEL_60;
              goto LABEL_58;
            }
LABEL_33:
            *(_DWORD *)(v15 + 24) += 2;
            goto LABEL_34;
          }
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
      v18 = (uint64_t *)((char *)this + 104);
      goto LABEL_33;
    }
    v6 = 0;
LABEL_20:
    v14 = 1;
    goto LABEL_23;
  }
  v13 = v9 + 2;
  *(_DWORD *)(v8 + 16) = v13;
  if ((*(_WORD *)this & 2) == 0)
  {
LABEL_16:
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195B261E8);
    }
    *(_DWORD *)(v8 + 16) = v13 - 1;
    v6 = *(_QWORD *)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_20;
    goto LABEL_18;
  }
  v30 = WebCore::RenderTextControl::textFormControlElement((WebCore::RenderTextControl *)v8);
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v30 + 1408))(&v50);
  if (!v50)
  {
    v13 = *(_DWORD *)(v8 + 16);
    goto LABEL_16;
  }
  if ((*(_WORD *)(**((_QWORD **)v50 + 5) + 28) & 0x80) != 0)
    v31 = **((_QWORD **)v50 + 5);
  else
    v31 = 0;
  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 1, v31);
  v32 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
    *(_DWORD *)(v32 + 24) += 2;
  WebCore::pushFullyClippedState((uint64_t)v4, (WebCore::Node *)v32);
  if (*(_DWORD *)(v32 + 24) == 2)
  {
    if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v32);
  }
  else
  {
    *(_DWORD *)(v32 + 24) -= 2;
  }
  *((_DWORD *)this + 4) = 0;
  v33 = v50;
  v50 = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  v34 = *(_DWORD *)(v8 + 16);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x195B26458);
  }
  v22 = 0;
  v25 = v34 - 1;
  *(_DWORD *)(v8 + 16) = v25;
LABEL_61:
  if (!v25)
  {
    __break(0xC471u);
    goto LABEL_169;
  }
  *(_DWORD *)(v8 + 16) = v25 - 1;
  return v22;
}

uint64_t WebCore::nextSibling(__int16 a1, WebCore::Node *this)
{
  char *v3;
  WebCore::HTMLSlotElement *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((a1 & 0x200) == 0)
    goto LABEL_2;
  v5 = (WebCore::HTMLSlotElement *)WebCore::Node::assignedSlot(this);
  if (!v5)
    goto LABEL_2;
  v6 = **((_QWORD **)v5 + 5);
  if ((*(_WORD *)(v6 + 28) & 0x80) == 0)
    v6 = 0;
  if (!*(_BYTE *)(v6 + 193))
  {
LABEL_2:
    v3 = (char *)this + 56;
    return *(_QWORD *)v3;
  }
  v7 = WebCore::HTMLSlotElement::assignedNodes(v5);
  v8 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v7 + 8 * v9);
      if (v10)
      {
        if (*(WebCore::Node **)(v10 + 8) == this)
          break;
      }
      if (v8 == ++v9)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    v9 = -1;
  }
  v11 = v9 + 1;
  if (v11 < v8)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 8 * v11);
    if (v12)
    {
      v3 = (char *)(v12 + 8);
      return *(_QWORD *)v3;
    }
  }
  return 0;
}

uint64_t WebCore::TextIterator::exitNode(uint64_t this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  int v34;
  WebCore::Node *v35;
  signed int v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  uint64_t v39;
  int v40;
  WebCore *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;

  if (!*(_BYTE *)(this + 252))
    return this;
  v2 = a2;
  v3 = this;
  if (a2)
    *((_DWORD *)a2 + 6) += 2;
  v44 = a2;
  if (!*(_QWORD *)(this + 240))
    goto LABEL_92;
  v4 = *(_QWORD *)(this + 8);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_WORD *)this;
  v6 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    v24 = *(_WORD *)(v4 + 28);
    if ((v24 & 8) != 0)
    {
      v25 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v25 + 2;
      v26 = (*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0
         && (v39 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
         && (*(_QWORD *)(v39 + 16) & 0x1FLL) == 18;
      if (v25)
      {
        *(_DWORD *)(v4 + 24) = v25;
        goto LABEL_65;
      }
      if ((*(_WORD *)(v4 + 30) & 0x400) != 0)
      {
LABEL_65:
        if (v26)
          goto LABEL_66;
        goto LABEL_171;
      }
      this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
      if (v26)
        goto LABEL_66;
      v24 = *(_WORD *)(v4 + 28);
    }
LABEL_171:
    if ((v24 & 0x10) != 0)
    {
      v40 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v40 + 2;
      v41 = *(WebCore **)(*(_QWORD *)(v4 + 96) + 24);
      this = WebCore::hasHeaderTag(v41, a2);
      v10 = (this & 1) != 0
         || v41 == *(WebCore **)(WebCore::HTMLNames::blockquoteTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::ddTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::divTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::dlTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::dtTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::hrTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::liTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::listingTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::olTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::pTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::preTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::trTag + 24)
         || v41 == *(WebCore **)(WebCore::HTMLNames::ulTag + 24);
      if (v40)
      {
        *(_DWORD *)(v4 + 24) = v40;
      }
      else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      goto LABEL_23;
    }
LABEL_66:
    v10 = 0;
    goto LABEL_67;
  }
  v7 = *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v7 + 1;
  v8 = *(unsigned __int8 *)(v6 + 46);
  if (v8 == 37)
    goto LABEL_43;
  if (v8 != 39)
  {
LABEL_10:
    if ((*(_WORD *)(v4 + 28) & 8) == 0
      || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 888))(v4), (this & 1) == 0))
    {
      v9 = *(_DWORD *)(v6 + 20);
      if ((v9 & 1) != 0 && (*(_BYTE *)(v6 + 45) & 0x40) != 0)
      {
        v10 = 0;
        if ((v9 & 0x800) == 0 && (v9 & 0x1800000) != 0x1000000)
          v10 = (*(_BYTE *)(v6 + 45) & 1) != 0
             || (v11 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8)) == 0
             || (*(_WORD *)(v11 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        goto LABEL_20;
      }
    }
LABEL_43:
    v10 = 0;
LABEL_20:
    v12 = *(_DWORD *)(v6 + 16);
    goto LABEL_21;
  }
  v16 = v7 + 2;
  *(_DWORD *)(v6 + 16) = v16;
  v17 = *(_QWORD *)(v6 + 32);
  if (!v17)
    goto LABEL_196;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_196;
  if (*(_BYTE *)(v18 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x195B26E6CLL);
  }
  v19 = *(_QWORD *)(v18 + 32);
  if (!v19 || (v20 = *(_QWORD *)(v19 + 8)) == 0)
  {
LABEL_196:
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x195B26EF0);
    }
    *(_DWORD *)(v6 + 16) = v16 - 1;
    goto LABEL_10;
  }
  v21 = *(unsigned __int8 *)(v20 + 46);
  if (v21 != 35 && v21 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x195B26F10);
  }
  v22 = *(_DWORD *)(v20 + 16);
  *(_DWORD *)(v20 + 16) = v22 + 1;
  if ((*(_BYTE *)(v20 + 20) & 1) == 0)
  {
    if (v22 == -1)
    {
LABEL_202:
      __break(0xC471u);
      JUMPOUT(0x195B26C2CLL);
    }
    *(_DWORD *)(v20 + 16) = v22;
    v16 = *(_DWORD *)(v6 + 16);
    goto LABEL_196;
  }
  if (v22 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195B26E8CLL);
  }
  *(_DWORD *)(v20 + 16) = v22;
  v23 = *(_DWORD *)(v6 + 16);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x195B26EACLL);
  }
  v12 = v23 - 1;
  *(_DWORD *)(v6 + 16) = v12;
  v10 = 1;
LABEL_21:
  if (!v12)
    goto LABEL_202;
  *(_DWORD *)(v6 + 16) = v12 - 1;
LABEL_23:
  if ((v5 & 1) == 0 && v10)
  {
    *(_DWORD *)(v4 + 24) += 2;
    this = v4;
    do
    {
      v13 = *(_QWORD *)(this + 56);
      if (v13)
      {
LABEL_30:
        v15 = 0;
        *(_DWORD *)(v13 + 24) += 2;
      }
      else
      {
        v14 = this;
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 32);
          if (!v14)
            break;
          v13 = *(_QWORD *)(v14 + 56);
          if (v13)
            goto LABEL_30;
        }
        v13 = 0;
        v15 = 1;
      }
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
      v10 = v13 != 0;
      if (!v13)
        break;
      this = v13;
    }
    while ((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) == 0);
    if ((v15 & 1) == 0)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    if (!v4)
    {
LABEL_41:
      if (!v10)
        goto LABEL_92;
      goto LABEL_69;
    }
  }
LABEL_67:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
      if (!v10)
        goto LABEL_92;
      goto LABEL_69;
    }
    goto LABEL_41;
  }
  *(_DWORD *)(v4 + 24) -= 2;
  if (!v10)
    goto LABEL_92;
LABEL_69:
  v27 = *(_QWORD *)(v3 + 8);
  if (v27)
    *(_DWORD *)(v27 + 24) += 2;
  v28 = *(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL;
  if (v28 && (*(_BYTE *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    v29 = *(_DWORD *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v29;
    if (*(_DWORD *)(v28 + 164))
    {
      if ((*(_WORD *)(v27 + 28) & 0x10) != 0)
      {
        v30 = *(_DWORD *)(v27 + 24);
        *(_DWORD *)(v27 + 24) = v30 + 2;
        v31 = *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24);
        if (*(_QWORD *)(WebCore::HTMLNames::h1Tag + 24) == v31
          || *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24) == v31
          || *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24) == v31
          || *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24) == v31
          || *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24) == v31
          || *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24) == v31
          || v31 == *(_QWORD *)(WebCore::HTMLNames::pTag + 24))
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 1256))(v28);
          v36 = 2 * this;
          if ((int)(this ^ (2 * this)) < 0)
            v36 = (this >> 31) + 0x7FFFFFFF;
          v32 = (float)((float)v36 * 0.015625) >= *(float *)(*(_QWORD *)(v28 + 112) + 204);
          v30 = *(_DWORD *)(v27 + 24) - 2;
        }
        else
        {
          v32 = 0;
        }
        if (v30)
        {
          *(_DWORD *)(v27 + 24) = v30;
        }
        else if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v27);
        }
      }
      else
      {
        v32 = 0;
      }
      v29 = *(_DWORD *)(v28 + 16);
    }
    else
    {
      v32 = 0;
    }
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x195B26C4CLL);
    }
    *(_DWORD *)(v28 + 16) = v29 - 1;
  }
  else
  {
    v32 = 0;
  }
  if (*(_DWORD *)(v27 + 24) == 2)
  {
    if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v27);
  }
  else
  {
    *(_DWORD *)(v27 + 24) -= 2;
  }
  if (*(_WORD *)(v3 + 250) == 10)
  {
    if (!v32)
      goto LABEL_92;
    v38 = (WebCore::Node *)*((_QWORD *)v2 + 4);
    if (v38)
      *((_DWORD *)v38 + 6) += 2;
    v42 = v2;
    v43 = v38;
    *((_DWORD *)v2 + 6) += 2;
    WebCore::TextIterator::emitCharacter(v3, (WTF::StringImpl *)0xA, (uint64_t *)&v43, (uint64_t *)&v42, 1, 1);
    if (v42)
    {
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    this = (uint64_t)v43;
    if (!v43)
      goto LABEL_92;
LABEL_117:
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
    goto LABEL_92;
  }
  v35 = (WebCore::Node *)*((_QWORD *)v2 + 4);
  if (v35)
    *((_DWORD *)v35 + 6) += 2;
  v42 = v2;
  v43 = v35;
  *((_DWORD *)v2 + 6) += 2;
  WebCore::TextIterator::emitCharacter(v3, (WTF::StringImpl *)0xA, (uint64_t *)&v43, (uint64_t *)&v42, 1, 1);
  if (v42)
  {
    if (*((_DWORD *)v42 + 6) == 2)
    {
      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v42);
    }
    else
    {
      *((_DWORD *)v42 + 6) -= 2;
    }
  }
  this = (uint64_t)v43;
  if (v43)
  {
    if (*((_DWORD *)v43 + 6) == 2)
    {
      if ((*((_WORD *)v43 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef(v43);
    }
    else
    {
      *((_DWORD *)v43 + 6) -= 2;
    }
  }
  if (v32)
  {
    *((_DWORD *)v2 + 6) += 2;
    this = *(_QWORD *)(v3 + 160);
    *(_QWORD *)(v3 + 160) = v2;
    if (this)
      goto LABEL_117;
  }
LABEL_92:
  if (*(_QWORD *)(v3 + 96))
    goto LABEL_102;
  this = *(_QWORD *)(v3 + 8);
  if (this)
    *(_DWORD *)(this + 24) += 2;
  if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) != 0
    && ((v33 = *(unsigned __int8 *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2E), v33 == 63) || v33 == 35))
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
      goto LABEL_137;
    }
    v34 = *(_WORD *)v3 & 1;
  }
  else
  {
    v34 = 0;
  }
  if (*(_DWORD *)(this + 24) != 2)
  {
    *(_DWORD *)(this + 24) -= 2;
    if ((v34 & 1) == 0)
      goto LABEL_102;
LABEL_137:
    v37 = (WebCore::Node *)*((_QWORD *)v2 + 4);
    if (v37)
      *((_DWORD *)v37 + 6) += 2;
    v43 = v37;
    WebCore::TextIterator::emitCharacter(v3, (WTF::StringImpl *)0x20, (uint64_t *)&v43, (uint64_t *)&v44, 1, 1);
    this = (uint64_t)v43;
    if (v43)
    {
      if (*((_DWORD *)v43 + 6) == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v43);
      }
      else
      {
        *((_DWORD *)v43 + 6) -= 2;
      }
    }
    v2 = v44;
    goto LABEL_102;
  }
  if ((*(_WORD *)(this + 30) & 0x400) != 0)
  {
    if (v34)
      goto LABEL_137;
  }
  else
  {
    this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    if ((v34 & 1) != 0)
      goto LABEL_137;
  }
LABEL_102:
  if (v2)
  {
    if (*((_DWORD *)v2 + 6) == 2)
    {
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v2);
    }
    else
    {
      *((_DWORD *)v2 + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::pushFullyClippedState(uint64_t result, WebCore::Node *this)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (unsigned int *)result;
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4)
  {
    if ((*((_WORD *)this + 14) & 8) == 0)
      goto LABEL_8;
    v26 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v26 + 2;
    v27 = (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
       && (v28 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
       && (*(_QWORD *)(v28 + 16) & 0x1FLL) == 18;
    if (v26)
    {
      *((_DWORD *)this + 6) = v26;
      if (v27)
        goto LABEL_8;
    }
    else if ((*((_WORD *)this + 15) & 0x400) != 0)
    {
      if (v27)
        goto LABEL_8;
    }
    else
    {
      result = WebCore::Node::removedLastRef(this);
      if (v27)
        goto LABEL_8;
    }
LABEL_46:
    v9 = 1;
    goto LABEL_12;
  }
  v5 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v5 + 1;
  if ((*(_BYTE *)(v4 + 45) & 4) == 0)
  {
    if (v5 != -1)
    {
      *(_DWORD *)(v4 + 16) = v5;
      goto LABEL_8;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x195B27190);
  }
  v6 = v5 + 2;
  *(_DWORD *)(v4 + 16) = v5 + 2;
  if ((*(_BYTE *)(v4 + 22) & 1) != 0)
  {
    if ((*((_WORD *)this + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
    {
      v29 = *(_QWORD *)(v4 + 160);
      v7 = (int)v29 < 1 || SHIDWORD(v29) < 1;
    }
    else
    {
      result = WebCore::RenderBox::contentSize((WebCore::RenderBox *)v4);
      v7 = (int)result < 1 || SHIDWORD(result) < 1;
    }
    v6 = *(_DWORD *)(v4 + 16);
  }
  else
  {
    v7 = 0;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195B271B0);
  }
  *(_DWORD *)(v4 + 16) = v6 - 1;
  if (v6 == 1)
    goto LABEL_49;
  *(_DWORD *)(v4 + 16) = v6 - 2;
  if (v7)
    goto LABEL_46;
  if (!*v3)
    goto LABEL_11;
LABEL_8:
  v8 = *v3 - 1;
  if (v3[5] <= v8 >> 5)
  {
    __break(0xC471u);
    JUMPOUT(0x195B27230);
  }
  if (((*(_DWORD *)(*((_QWORD *)v3 + 1) + 4 * (v8 >> 5)) >> v8) & 1) != 0)
  {
    result = WebCore::ignoresContainerClip(*((_QWORD *)this + 8), this);
    v9 = result ^ 1;
  }
  else
  {
LABEL_11:
    v9 = 0;
  }
LABEL_12:
  v10 = *v3;
  v11 = v10 >> 5;
  v12 = v10 & 0x1F;
  if ((v10 & 0x1F) == 0)
  {
    v16 = v3[5];
    if ((_DWORD)v16 == (_DWORD)v11)
    {
      v17 = v11 + 1;
      v18 = v3[4];
      v19 = (unsigned int *)*((_QWORD *)v3 + 1);
      if (v18 <= v11)
      {
        v21 = v18 + (v18 >> 2);
        if (v21 >= 0x10)
          v22 = v21 + 1;
        else
          v22 = 16;
        if (v22 <= v17)
          v23 = (v11 + 1);
        else
          v23 = v22;
        if (v23 < 2)
        {
          v24 = v3 + 6;
          LODWORD(v23) = 1;
        }
        else
        {
          v24 = (void *)WTF::fastMalloc((WTF *)(4 * v23));
        }
        v3[4] = v23;
        *((_QWORD *)v3 + 1) = v24;
        result = (uint64_t)memcpy(v24, v19, 4 * v16);
        v20 = (unsigned int *)*((_QWORD *)v3 + 1);
        if (v3 + 6 != v19 && v19)
        {
          if (v20 == v19)
          {
            *((_QWORD *)v3 + 1) = 0;
            v3[4] = 0;
          }
          result = WTF::fastFree((WTF *)v19, v25);
          v20 = (unsigned int *)*((_QWORD *)v3 + 1);
        }
      }
      else
      {
        v20 = (unsigned int *)*((_QWORD *)v3 + 1);
      }
      v3[5] = v17;
      v20[v11] = 0;
    }
  }
  if (v3[5] <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x195B27228);
  }
  v13 = *((_QWORD *)v3 + 1);
  v14 = 1 << v12;
  if (v9)
    v15 = *(_DWORD *)(v13 + 4 * v11) | v14;
  else
    v15 = *(_DWORD *)(v13 + 4 * v11) & ~v14;
  *(_DWORD *)(v13 + 4 * v11) = v15;
  ++*v3;
  return result;
}

uint64_t WebCore::TextIterator::handleTextNodeFirstLetter(uint64_t this, WebCore::RenderTextFragment *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  WTF *v27;
  _QWORD v28[2];
  _QWORD v29[2];
  int v30;
  WTF *v31;

  v2 = this;
  if (!a2)
    goto LABEL_48;
  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    goto LABEL_48;
  v4 = *(_DWORD *)(v3 + 16);
  v5 = v4 + 1;
  *(_DWORD *)(v3 + 16) = v4 + 1;
  if ((*(_BYTE *)(v3 + 120) & 0x30) != 0 && (*(_WORD *)this & 8) == 0)
  {
    if (v4 != -1)
    {
      *(_DWORD *)(v3 + 16) = v4;
      return this;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x195B27560);
  }
  v6 = *(unsigned __int8 *)(v3 + 68);
  for (i = *(unsigned int *)(v3 + 64); ; i = *(unsigned int *)(v9 + 47))
  {
    v8 = i | (v6 << 32);
    if (!v8)
      goto LABEL_46;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      goto LABEL_46;
    if ((*(_BYTE *)(v9 + 45) & 2) != 0)
      break;
    v6 = *(unsigned __int8 *)(v9 + 51);
  }
  ++*(_DWORD *)(v9 + 16);
  *(_BYTE *)(this + 253) = 1;
  v10 = (void *)(this + 200);
  v11 = *(unsigned int *)(this + 216);
  v12 = *(unsigned int *)(this + 184);
  if ((_DWORD)v11 == -1)
  {
    if ((_DWORD)v12 == -1)
      goto LABEL_17;
  }
  else if ((_DWORD)v12 == -1)
  {
    ((void (*)(_QWORD *, void *))off_1E33ADF08[v11])(v29, v10);
    *(_DWORD *)(v2 + 216) = -1;
    goto LABEL_17;
  }
  v29[0] = this + 200;
  ((void (*)(_QWORD *))off_1E33ADF58[v12])(v29);
LABEL_17:
  v13 = *(_QWORD *)(v2 + 192);
  *(_QWORD *)(v2 + 192) = 0;
  v14 = *(WTF **)(v2 + 224);
  *(_QWORD *)(v2 + 224) = v13;
  if (v14)
  {
    v15 = *((unsigned int *)v14 + 3);
    v16 = *(unsigned int **)v14;
    if ((_DWORD)v15)
    {
      v17 = 24 * v15;
      do
      {
        v18 = v16[4];
        if ((_DWORD)v18 != -1)
          ((void (*)(_QWORD *, unsigned int *))off_1E33ADF08[v18])(v29, v16);
        v16[4] = -1;
        v16 += 6;
        v17 -= 24;
      }
      while (v17);
      v16 = *(unsigned int **)v14;
    }
    if (v16)
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      WTF::fastFree((WTF *)v16, v10);
    }
    WTF::fastFree(v14, v10);
  }
  WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)v9, (uint64_t)v29);
  v28[0] = v2 + 168;
  v28[1] = v2 + 192;
  std::tuple<WebCore::InlineIterator::TextBoxIterator &,std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData> &>::operator=[abi:sn180100]<WebCore::InlineIterator::TextBoxIterator,std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData>,0>(v28, (uint64_t)v29);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    v21 = *((unsigned int *)v20 + 3);
    v22 = *(unsigned int **)v20;
    if ((_DWORD)v21)
    {
      v23 = 24 * v21;
      do
      {
        v24 = v22[4];
        if ((_DWORD)v24 != -1)
          ((void (*)(_QWORD *, unsigned int *))off_1E33ADF08[v24])(v28, v22);
        v22[4] = -1;
        v22 += 6;
        v23 -= 24;
      }
      while (v23);
      v22 = *(unsigned int **)v20;
    }
    if (v22)
    {
      *(_QWORD *)v20 = 0;
      *((_DWORD *)v20 + 2) = 0;
      WTF::fastFree((WTF *)v22, v19);
    }
    WTF::fastFree(v20, v19);
  }
  if (v30 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E33ADF08[v30])(v28, v29);
  this = *(_QWORD *)(v9 + 8);
  if (this)
    goto LABEL_40;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = v9;
  v27 = *(WTF **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = this;
  if (!v27)
    goto LABEL_40;
  if (*(_DWORD *)v27 != 1)
  {
    --*(_DWORD *)v27;
LABEL_40:
    ++*(_DWORD *)this;
    goto LABEL_41;
  }
  WTF::fastFree(v27, v19);
  this = *(_QWORD *)(v9 + 8);
  if (this)
    goto LABEL_40;
LABEL_41:
  v25 = *(WTF **)(v2 + 232);
  *(_QWORD *)(v2 + 232) = this;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      this = WTF::fastFree(v25, v19);
    else
      --*(_DWORD *)v25;
  }
  v26 = *(_DWORD *)(v9 + 16);
  if (!v26)
    goto LABEL_55;
  *(_DWORD *)(v9 + 16) = v26 - 1;
  v5 = *(_DWORD *)(v3 + 16);
LABEL_46:
  if (!v5)
    goto LABEL_55;
  *(_DWORD *)(v3 + 16) = v5 - 1;
LABEL_48:
  *(_BYTE *)(v2 + 253) = 1;
  return this;
}

WTF::StringImpl *WebCore::TextIterator::emitText(WebCore::TextIterator *this, WebCore::Text *a2, WTF::StringImpl **a3, unsigned int a4, uint64_t a5)
{
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *result;
  int v22;
  uint64_t v23;
  WebCore::Text *v24;
  WTF::StringImpl *v25;

  if ((*(_WORD *)this & 0x20) != 0)
    goto LABEL_52;
  if ((*(_WORD *)this & 4) != 0)
  {
    v23 = a5;
    v24 = a2;
    WebCore::RenderText::textWithoutConvertingBackslashToYenSymbol((WTF::StringImpl *)a3, &v25);
    goto LABEL_54;
  }
  v7 = a3[13];
  if (v7)
    *(_DWORD *)v7 += 2;
  v25 = v7;
  while (1)
  {
    if (v7)
      LODWORD(v7) = *((_DWORD *)v7 + 1);
    if (v7 >= a5)
      v8 = a5;
    else
      v8 = (int)v7;
    *((_DWORD *)a2 + 6) += 2;
    v9 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = a2;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    v10 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    *((_DWORD *)this + 28) = a4;
    *((_DWORD *)this + 29) = v8;
    v11 = v25;
    if (v25 && (v12 = (v8 - 1), *((_DWORD *)v25 + 1) > v12))
    {
      v13 = *((_QWORD *)v25 + 1);
      if ((*((_BYTE *)v25 + 16) & 4) != 0)
        v14 = *(unsigned __int8 *)(v13 + v12);
      else
        v14 = *(_WORD *)(v13 + 2 * v12);
    }
    else
    {
      v14 = 0;
    }
    *((_WORD *)this + 60) = 0;
    v15 = (char *)this + 120;
    *((_WORD *)this + 125) = v14;
    v16 = v8 - a4;
    v25 = 0;
    v17 = (WTF::StringImpl *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v11;
    if (!v17)
      goto LABEL_24;
    if (*(_DWORD *)v17 != 2)
    {
      *(_DWORD *)v17 -= 2;
LABEL_24:
      *((_DWORD *)this + 34) = a4;
      *((_DWORD *)this + 35) = v16;
      goto LABEL_25;
    }
    WTF::StringImpl::destroy(v17, a2);
    v22 = *((unsigned __int16 *)this + 60);
    *((_DWORD *)this + 34) = a4;
    *((_DWORD *)this + 35) = v16;
    if (v22)
      break;
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 16);
LABEL_25:
    if (v11)
    {
      v15 = (char *)*((_QWORD *)v11 + 1);
      v18 = *((unsigned int *)v11 + 1) | ((unint64_t)((*((_DWORD *)v11 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v15 = 0;
      v18 = 0x100000000;
    }
    if (v18 <= a4)
    {
      v19 = 0x100000000;
      v15 = (char *)&str_7_40;
      goto LABEL_32;
    }
    if (v18 - a4 <= v16)
    {
      if (!a4)
      {
        v19 = v18;
        goto LABEL_32;
      }
      v16 = v18 - a4;
    }
    v19 = v16;
    v20 = v18 - (unint64_t)a4;
    if ((v18 & 0x100000000) != 0)
    {
      if (v20 >= v16)
      {
        v15 += a4;
        v19 = v16 | 0x100000000;
        goto LABEL_32;
      }
    }
    else if (v20 >= v16)
    {
      v15 += 2 * a4;
      goto LABEL_32;
    }
    __break(1u);
LABEL_52:
    v23 = a5;
    v24 = a2;
    (*((void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **))*a3 + 83))(&v25, a3);
LABEL_54:
    v7 = v25;
    a2 = v24;
    a5 = v23;
  }
  v19 = 1;
LABEL_32:
  *((_QWORD *)this + 18) = v15;
  *((_DWORD *)this + 38) = v19;
  *((_BYTE *)this + 156) = BYTE4(v19);
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 252) = 1;
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *std::tuple<WebCore::InlineIterator::TextBoxIterator &,std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData> &>::operator=[abi:sn180100]<WebCore::InlineIterator::TextBoxIterator,std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData>,0>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 == -1)
  {
    if ((_DWORD)v6 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v6 == -1)
  {
    ((void (*)(char *, uint64_t))off_1E33ADF08[v5])(&v16, v4);
    *(_DWORD *)(v4 + 16) = -1;
    goto LABEL_6;
  }
  v15 = *a1;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33ADF18[v6])(&v15, v4, a2);
LABEL_6:
  v7 = (WTF **)a1[1];
  v8 = *(WTF **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v9 = *v7;
  *v7 = v8;
  if (v9)
  {
    v10 = *((unsigned int *)v9 + 3);
    v11 = *(unsigned int **)v9;
    if ((_DWORD)v10)
    {
      v12 = 24 * v10;
      do
      {
        v13 = v11[4];
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, unsigned int *))off_1E33ADF08[v13])(&v17, v11);
        v11[4] = -1;
        v11 += 6;
        v12 -= 24;
      }
      while (v12);
      v11 = *(unsigned int **)v9;
    }
    if (v11)
    {
      *(_QWORD *)v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      WTF::fastFree((WTF *)v11, (void *)a2);
    }
    WTF::fastFree(v9, (void *)a2);
  }
  return a1;
}

WTF::StringImpl *WebCore::TextIteratorCopyableText::set(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  *(_WORD *)a1 = 0;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      v3 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(_DWORD *)(a1 + 16) = 0;
  if (v3)
    LODWORD(v3) = *(_DWORD *)(v3 + 4);
  *(_DWORD *)(a1 + 20) = v3;
  return result;
}

{
  WTF::StringImpl *result;

  *(_WORD *)a1 = (_WORD)a2;
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

unsigned int *WebCore::TextIteratorCopyableText::text(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;

  if (!*(_WORD *)this)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      v3 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v2 = 0;
      v3 = 0x100000000;
    }
    v4 = this[4];
    if (v3 <= v4)
    {
      return (unsigned int *)&str_7_40;
    }
    else
    {
      v5 = this[5];
      if ((int)v3 - (int)v4 <= v5)
      {
        if (!(_DWORD)v4)
          return (unsigned int *)v2;
        v5 = v3 - v4;
      }
      v6 = v3 - v4;
      if ((v3 & 0x100000000) != 0)
      {
        if (v6 >= v5)
          return (unsigned int *)(v2 + v4);
      }
      else if (v6 >= v5)
      {
        return (unsigned int *)(v2 + 2 * v4);
      }
      __break(1u);
    }
  }
  return this;
}

BOOL WebCore::hasHeaderTag(WebCore *this, WebCore::HTMLElement *a2)
{
  return *(WebCore **)(WebCore::HTMLNames::h1Tag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::h2Tag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::h3Tag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::h4Tag + 24) == this
      || *(WebCore **)(WebCore::HTMLNames::h5Tag + 24) == this
      || *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24) == (_QWORD)this;
}

BOOL WebCore::TextIterator::shouldRepresentNodeOffsetZero(WebCore::TextIterator *this)
{
  _BOOL8 v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  const WebCore::VisiblePosition *v19;
  uint64_t (*v20)();
  uint64_t (*v21)();
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31[2];
  char v32;

  if ((*(_WORD *)this & 1) != 0)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 64) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      v12 = *(_DWORD *)((*(_QWORD *)(*((_QWORD *)this + 1) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_DWORD *)((*(_QWORD *)(*((_QWORD *)this + 1) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v12 + 1;
      v13 = *(unsigned __int8 *)(v11 + 46);
      if (v13 == 35 || v13 == 63)
      {
        if (v12 != -1)
        {
          *(_DWORD *)(v11 + 16) = v12;
          return 1;
        }
LABEL_64:
        __break(0xC471u);
        JUMPOUT(0x195B27DC8);
      }
      if (v12 == -1)
        goto LABEL_64;
      *(_DWORD *)(v11 + 16) = v12;
    }
  }
  if (*((_WORD *)this + 125) == 10)
    return 0;
  if (*((_BYTE *)this + 252))
    return 1;
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 7);
  if (v4 == v5)
    return 0;
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if (!v5)
  {
LABEL_63:
    v2 = 1;
    goto LABEL_22;
  }
  v7 = *(_WORD *)(v5 + 28);
  if ((v7 & 0xF000) != 0x9000)
  {
    if ((v7 & 4) != 0
      && *(_QWORD *)(v5 + 80)
      && ((*(unsigned __int8 *)(v4 + 22) ^ *(unsigned __int8 *)(v5 + 22)) & 8) == 0)
    {
      v8 = v4;
      do
        v8 = *(_QWORD *)(v8 + 32);
      while (v8 != v5 && v8 != 0);
      if (v8)
      {
LABEL_20:
        v10 = *((_DWORD *)this + 16);
        if (!v10)
        {
          v2 = 0;
          goto LABEL_22;
        }
        v23 = v4;
        v14 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
        if (!v14)
          goto LABEL_35;
        v15 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
        if ((*(_BYTE *)(v15 + 0x2D) & 2) != 0)
          v15 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
        if ((*(_BYTE *)(v15 + 120) & 0x30) != 0)
        {
LABEL_35:
          v2 = 0;
          goto LABEL_22;
        }
        v16 = *(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7;
        if (v16 == 1)
          v17 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
        else
          v17 = 0;
        if (v17)
        {
          ++*(_DWORD *)(v17 + 16);
          if (v16 != 1)
          {
LABEL_44:
            v18 = *(_DWORD *)(v17 + 16);
            if (!v18)
              goto LABEL_67;
            *(_DWORD *)(v17 + 16) = v18 - 1;
LABEL_46:
            *(_DWORD *)(v5 + 24) += 2;
            v27 = v5;
            v28 = v10;
            v29 = 0;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v27, (uint64_t)v31);
            v32 = 1;
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v27);
            *(_DWORD *)(v23 + 24) += 2;
            v24 = v23;
            v25 = 0;
            v26 = 1;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v24, (uint64_t)&v27);
            v30 = 1;
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v24);
            v20 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            if (v31[0])
              v21 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            else
              v21 = 0;
            if (!v21)
              goto LABEL_54;
            if (!v27)
              v20 = 0;
            if (v20)
              v2 = !WebCore::inSameLine((WebCore *)v31, (const WebCore::VisiblePosition *)&v27, v19);
            else
LABEL_54:
              v2 = 0;
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v27);
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
            v4 = v23;
            v6 = *(_DWORD *)(v23 + 24) - 2;
            goto LABEL_22;
          }
        }
        else if (v16 != 1)
        {
          goto LABEL_46;
        }
        if (!*(_DWORD *)(v14 + 164)
          && ((*(_WORD *)(v4 + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)))
        {
          v22 = *(_DWORD *)(v14 + 16);
          if (v22)
          {
            v2 = 0;
            *(_DWORD *)(v14 + 16) = v22 - 1;
            goto LABEL_22;
          }
LABEL_67:
          __break(0xC471u);
          JUMPOUT(0x195B27DF4);
        }
        goto LABEL_44;
      }
    }
    goto LABEL_63;
  }
  if (**(_QWORD **)(v4 + 40) == v5 && (*(_WORD *)(v4 + 28) & 0xF000) != 0x9000)
  {
    if ((*(_BYTE *)(v4 + 22) & 8) != 0)
      goto LABEL_20;
    goto LABEL_63;
  }
  v2 = 1;
LABEL_22:
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = v6;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  return v2;
}

BOOL WebCore::shouldEmitTabBeforeNode(unint64_t this, WebCore::Node *a2)
{
  const WebCore::RenderTableCell *v2;
  _BOOL8 result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v2 = (const WebCore::RenderTableCell *)(this & 0xFFFFFFFFFFFFLL);
  if ((this & 0xFFFFFFFFFFFFLL) == 0 || *(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2E) != 37)
    return 0;
  v4 = *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
  *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v4;
  v5 = *(_QWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x20);
  if (!v5)
    goto LABEL_21;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_21;
  if (*(_BYTE *)(v6 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x195B27F3CLL);
  }
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    goto LABEL_21;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_21;
  if (*(_BYTE *)(v8 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x195B27F5CLL);
  }
  v9 = *(_QWORD *)(v8 + 32);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    v11 = *(unsigned __int8 *)(v10 + 46);
    if (v11 != 35 && v11 != 63)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x195B27F1CLL);
    }
    ++*(_DWORD *)(v10 + 16);
    if (WebCore::RenderTable::cellBefore((WebCore::RenderTable *)v10, v2))
      result = 1;
    else
      result = WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v10, v2) != 0;
    v12 = *(_DWORD *)(v10 + 16);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x195B27F7CLL);
    }
    *(_DWORD *)(v10 + 16) = v12 - 1;
    v4 = *((_DWORD *)v2 + 4);
  }
  else
  {
LABEL_21:
    result = 0;
  }
  if (!v4)
    goto LABEL_26;
  *((_DWORD *)v2 + 4) = v4 - 1;
  return result;
}

BOOL WebCore::shouldEmitNewlineBeforeNode(WebCore *this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  WebCore::HTMLElement *v18;
  int v19;
  WebCore *v20;
  _BOOL8 v21;

  v3 = *((_QWORD *)this + 8);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v5 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) = v5 + 1;
    if (WebCore::isTableCell(this, a2))
      goto LABEL_17;
    if (*(_BYTE *)(v4 + 46) == 39)
    {
      v10 = v5 + 2;
      *(_DWORD *)(v4 + 16) = v5 + 2;
      v11 = *(_QWORD *)(v4 + 32);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 46) != 40)
          {
            __break(0xC471u);
            JUMPOUT(0x195B282ECLL);
          }
          v13 = *(_QWORD *)(v12 + 32);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
            {
              v15 = *(unsigned __int8 *)(v14 + 46);
              if (v15 != 35 && v15 != 63)
              {
                __break(0xC471u);
                JUMPOUT(0x195B28388);
              }
              v16 = *(_DWORD *)(v14 + 16);
              *(_DWORD *)(v14 + 16) = v16 + 1;
              if ((*(_BYTE *)(v14 + 20) & 1) != 0)
              {
                if (v16 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B2830CLL);
                }
                *(_DWORD *)(v14 + 16) = v16;
                v17 = *(_DWORD *)(v4 + 16);
                if (!v17)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B2832CLL);
                }
                v9 = v17 - 1;
                *(_DWORD *)(v4 + 16) = v9;
                result = 1;
LABEL_15:
                if (v9)
                {
                  *(_DWORD *)(v4 + 16) = v9 - 1;
                  return result;
                }
LABEL_63:
                __break(0xC471u);
                JUMPOUT(0x195B2813CLL);
              }
              if (v16 == -1)
                goto LABEL_63;
              *(_DWORD *)(v14 + 16) = v16;
              v10 = *(_DWORD *)(v4 + 16);
            }
          }
        }
      }
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x195B28368);
      }
      *(_DWORD *)(v4 + 16) = v10 - 1;
    }
    if ((*((_WORD *)this + 14) & 8) != 0
      && ((*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 888))(this) & 1) != 0
      || (v6 = *(_DWORD *)(v4 + 20), (v6 & 1) == 0)
      || (*(_BYTE *)(v4 + 45) & 0x40) == 0)
    {
LABEL_17:
      result = 0;
    }
    else
    {
      result = 0;
      if ((v6 & 0x800) == 0 && (v6 & 0x1800000) != 0x1000000)
        result = (*(_BYTE *)(v4 + 45) & 1) != 0
              || (v8 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)) == 0
              || (*(_WORD *)(v8 + 28) & 0x10) == 0
              || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    }
    v9 = *(_DWORD *)(v4 + 16);
    goto LABEL_15;
  }
  if (WebCore::hasDisplayContents(this, a2) || (*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v19 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v19 + 2;
  v20 = *(WebCore **)(*((_QWORD *)this + 12) + 24);
  result = WebCore::hasHeaderTag(v20, v18)
        || v20 == *(WebCore **)(WebCore::HTMLNames::blockquoteTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::ddTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::divTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::dlTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::dtTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::hrTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::liTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::listingTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::olTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::pTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::preTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::trTag + 24)
        || v20 == *(WebCore **)(WebCore::HTMLNames::ulTag + 24);
  if (v19)
  {
    *((_DWORD *)this + 6) = v19;
  }
  else
  {
    v21 = result;
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
    return v21;
  }
  return result;
}

uint64_t WebCore::shouldEmitNewlineForNode(WebCore *this, WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v3 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v3;
    if (*(_BYTE *)(v2 + 46) != 17)
    {
      v4 = 0;
      goto LABEL_4;
    }
    if ((*(_BYTE *)(v2 + 52) & 7) == 2)
      v7 = *(_BYTE *)(v2 + 53) & 1;
    else
      v7 = 0;
    v4 = v7 ^ 1u;
    if ((v7 & 1) != 0 || (a2 & 1) != 0)
    {
LABEL_4:
      if (!v3)
      {
        __break(0xC471u);
        JUMPOUT(0x195B2844CLL);
      }
      *(_DWORD *)(v2 + 16) = v3 - 1;
      return v4;
    }
  }
  else
  {
    if ((*((_WORD *)this + 14) & 0x10) == 0)
      return 0;
    v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
      || (a2 & 1) != 0)
    {
      return v4;
    }
  }
  v4 = (*((_BYTE *)this + 22) & 0x10) == 0
    || (v6 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 5) + 200) + 8), (*(_WORD *)(v6 + 28) & 0x10) == 0)
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    goto LABEL_4;
  }
  return v4;
}

BOOL WebCore::RenderObject::isHR(WebCore::RenderObject *this)
{
  uint64_t v1;

  return (*((_BYTE *)this + 45) & 1) == 0
      && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
      && (*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24);
}

BOOL WebCore::shouldEmitNewlineAfterNode(WebCore *this, WebCore::Node *a2)
{
  WebCore *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore *v11;
  char v12;
  _BOOL8 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  WebCore::HTMLElement *v23;
  int v24;
  WebCore *v25;
  _BOOL4 v26;

  v2 = this;
  v3 = *((_QWORD *)this + 8);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    if (WebCore::hasDisplayContents(this, a2) || (*((_WORD *)v2 + 14) & 0x10) == 0)
      return 0;
    v24 = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v24 + 2;
    v25 = *(WebCore **)(*((_QWORD *)v2 + 12) + 24);
    v26 = WebCore::hasHeaderTag(v25, v23)
       || v25 == *(WebCore **)(WebCore::HTMLNames::blockquoteTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::ddTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::divTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::dlTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::dtTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::hrTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::liTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::listingTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::olTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::pTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::preTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::trTag + 24)
       || v25 == *(WebCore **)(WebCore::HTMLNames::ulTag + 24);
    if (v24)
    {
      *((_DWORD *)v2 + 6) = v24;
      if (!v26)
        return 0;
    }
    else if ((*((_WORD *)v2 + 15) & 0x400) != 0)
    {
      if (!v26)
        return 0;
    }
    else
    {
      WebCore::Node::removedLastRef(v2);
      if (!v26)
        return 0;
    }
    goto LABEL_16;
  }
  v5 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) = v5 + 1;
  if (WebCore::isTableCell(this, a2))
  {
    if (v5 != -1)
    {
      v13 = 0;
      *(_DWORD *)(v4 + 16) = v5;
      return v13;
    }
    goto LABEL_54;
  }
  if (*(_BYTE *)(v4 + 46) != 39)
  {
LABEL_4:
    if ((*((_WORD *)v2 + 14) & 8) != 0 && ((*(uint64_t (**)(WebCore *))(*(_QWORD *)v2 + 888))(v2) & 1) != 0
      || (v6 = *(_DWORD *)(v4 + 20), (v6 & 1) == 0)
      || (*(_BYTE *)(v4 + 45) & 0x40) == 0)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      if ((v6 & 0x800) == 0 && (v6 & 0x1800000) != 0x1000000)
        v7 = (*(_BYTE *)(v4 + 45) & 1) != 0
          || (v8 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)) == 0
          || (*(_WORD *)(v8 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    }
    v9 = *(_DWORD *)(v4 + 16);
    if (v9)
    {
      *(_DWORD *)(v4 + 16) = v9 - 1;
      if (v7)
        goto LABEL_16;
      return 0;
    }
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x195B28778);
  }
  v15 = v5 + 2;
  *(_DWORD *)(v4 + 16) = v5 + 2;
  v16 = *(_QWORD *)(v4 + 32);
  if (!v16)
    goto LABEL_82;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_82;
  if (*(_BYTE *)(v17 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x195B28928);
  }
  v18 = *(_QWORD *)(v17 + 32);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 8)) == 0)
  {
LABEL_82:
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x195B289A4);
    }
    *(_DWORD *)(v4 + 16) = v15 - 1;
    goto LABEL_4;
  }
  v20 = *(unsigned __int8 *)(v19 + 46);
  if (v20 != 35 && v20 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x195B289C4);
  }
  v21 = *(_DWORD *)(v19 + 16);
  *(_DWORD *)(v19 + 16) = v21 + 1;
  if ((*(_BYTE *)(v19 + 20) & 1) == 0)
  {
    if (v21 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195B289E4);
    }
    *(_DWORD *)(v19 + 16) = v21;
    v15 = *(_DWORD *)(v4 + 16);
    goto LABEL_82;
  }
  if (v21 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195B28948);
  }
  *(_DWORD *)(v19 + 16) = v21;
  v22 = *(_DWORD *)(v4 + 16);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x195B28968);
  }
  *(_DWORD *)(v4 + 16) = v22 - 1;
  if (v22 == 1)
    goto LABEL_54;
  *(_DWORD *)(v4 + 16) = v22 - 2;
LABEL_16:
  *((_DWORD *)v2 + 6) += 2;
  do
  {
    v10 = *((_QWORD *)v2 + 7);
    if (v10)
    {
LABEL_21:
      v12 = 0;
      *(_DWORD *)(v10 + 24) += 2;
    }
    else
    {
      v11 = v2;
      while (1)
      {
        v11 = (WebCore *)*((_QWORD *)v11 + 4);
        if (!v11)
          break;
        v10 = *((_QWORD *)v11 + 7);
        if (v10)
          goto LABEL_21;
      }
      v10 = 0;
      v12 = 1;
    }
    if (*((_DWORD *)v2 + 6) == 2)
    {
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v2);
    }
    else
    {
      *((_DWORD *)v2 + 6) -= 2;
    }
    v13 = v10 != 0;
    if (!v10)
      break;
    v2 = (WebCore *)v10;
  }
  while ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) == 0);
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  return v13;
}

WTF::StringImpl *WebCore::TextIteratorCopyableText::set(uint64_t a1, WTF::StringImpl *a2, int a3, int a4)
{
  uint64_t v7;
  WTF::StringImpl *result;

  *(_WORD *)a1 = 0;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  return result;
}

unsigned int *WebCore::TextIterator::range@<X0>(int32x2_t *this@<X0>, void *a2@<X1>, int32x2_t *a3@<X8>)
{
  unsigned int *result;
  uint64_t v6;
  unsigned int i;
  uint64_t v8;
  int32x2_t v9;
  __int32 v10;
  __int32 v11;

  result = (unsigned int *)this[13];
  if (result)
  {
    v6 = *((_QWORD *)result + 6);
    for (i = 0; ; ++i)
    {
      v8 = v6 & 0xFFFFFFFFFFFFLL;
      if (!v8)
        break;
      v6 = *(_QWORD *)(v8 + 48);
    }
    this[14] = vadd_s32(this[14], vdup_n_s32(i));
    this[13] = 0;
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v9 = this[12];
  *(_DWORD *)(*(_QWORD *)&v9 + 24) += 4;
  v10 = this[14].i32[0];
  v11 = this[14].i32[1];
  *a3 = v9;
  a3[1].i32[0] = v10;
  a3[2] = v9;
  a3[3].i32[0] = v11;
  return result;
}

uint64_t WebCore::TextIterator::node(int32x2_t *this)
{
  int32x2_t v2;
  uint64_t v3;
  unsigned int i;
  uint64_t v5;
  int32x2_t v6;
  int v7;
  __int32 v8;
  int v9;
  __int16 v10;
  int32x2_t v11;
  __int32 v13;
  BOOL v15;

  v2 = this[13];
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)&v2 + 48);
    for (i = 0; ; ++i)
    {
      v5 = v3 & 0xFFFFFFFFFFFFLL;
      if (!v5)
        break;
      v3 = *(_QWORD *)(v5 + 48);
    }
    this[14] = vadd_s32(this[14], vdup_n_s32(i));
    this[13] = 0;
    if (*(_DWORD *)(*(_QWORD *)&v2 + 24) == 2)
    {
      if ((*(_WORD *)(*(_QWORD *)&v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef(*(WebCore::Node **)&v2);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)&v2 + 24) -= 2;
    }
  }
  v6 = this[12];
  v7 = *(_DWORD *)(*(_QWORD *)&v6 + 24);
  v8 = this[14].i32[0];
  *(_DWORD *)(*(_QWORD *)&v6 + 24) = v7 + 4;
  v9 = v7 + 2;
  if (v9)
  {
    *(_DWORD *)(*(_QWORD *)&v6 + 24) = v9;
  }
  else if ((*(_WORD *)(*(_QWORD *)&v6 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(*(WebCore::Node **)&v6);
  }
  v10 = *(_WORD *)(*(_QWORD *)&v6 + 28);
  v11 = v6;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 4) != 0)
    {
      v11 = *(int32x2_t *)(*(_QWORD *)&v6 + 80);
      if (v8 && *(_QWORD *)&v11)
      {
        v13 = v8 - 1;
        do
        {
          v11 = *(int32x2_t *)(*(_QWORD *)&v11 + 56);
          v15 = v13-- != 0;
        }
        while (*(_QWORD *)&v11 && v15);
      }
    }
    else
    {
      v11 = 0;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)&v6 + 24) == 2)
  {
    if ((*(_WORD *)(*(_QWORD *)&v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef(*(WebCore::Node **)&v6);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)&v6 + 24) -= 2;
  }
  return (uint64_t)v11;
}

WebCore::SimplifiedBackwardsTextIterator *WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator(WebCore::SimplifiedBackwardsTextIterator *this, const WebCore::SimpleRange *a2)
{
  uint64_t *v4;
  WTF *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  unsigned int v33;
  char v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 6) = 0;
  v5 = (WebCore::SimplifiedBackwardsTextIterator *)((char *)this + 24);
  *(_WORD *)this = 0;
  *(_QWORD *)((char *)this + 14) = 0;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_QWORD *)this + 5) = 1;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_WORD *)this + 52) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 140) = 1;
  *((_QWORD *)this + 18) = 0;
  v6 = (uint64_t *)((char *)this + 144);
  *((_DWORD *)this + 38) = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::Document::updateLayout(v7, 2, 0);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v8 = *(_QWORD *)a2;
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v9 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v9 + 24) += 2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = *((_DWORD *)a2 + 6);
  v12 = *(_WORD *)(v8 + 28);
  if ((v12 & 5) != 4)
    goto LABEL_5;
  v13 = *(_QWORD *)(v8 + 80);
  if (!v13)
    goto LABEL_5;
  v25 = 0;
  v26 = *(_QWORD *)(v8 + 80);
  do
  {
    ++v25;
    v26 = *(_QWORD *)(v26 + 56);
  }
  while (v26);
  if (v10 < v25)
  {
    if ((v12 & 4) != 0)
    {
      if (v10)
      {
        v30 = v10 - 1;
        do
        {
          v13 = *(_QWORD *)(v13 + 56);
          v31 = v30-- != 0;
          v32 = v31;
        }
        while (v13 && (v32 & 1) != 0);
      }
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
    }
    else
    {
      v13 = 0;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      v10 = 0;
    }
    else
    {
      v10 = 0;
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
LABEL_5:
    v13 = v8;
  }
  v14 = *(_WORD *)(v9 + 28);
  if ((v14 & 5) != 4 || v11 == 0)
    goto LABEL_11;
  v16 = *(_QWORD *)(v9 + 80);
  if (!v16)
    goto LABEL_11;
  v27 = 0;
  v28 = *(_QWORD *)(v9 + 80);
  do
  {
    ++v27;
    v28 = *(_QWORD *)(v28 + 56);
  }
  while (v28);
  if (v11 > v27)
  {
LABEL_11:
    v16 = v9;
    goto LABEL_12;
  }
  if ((v14 & 4) == 0)
  {
    v16 = 0;
LABEL_38:
    v29 = 1;
    goto LABEL_71;
  }
  if (v11 != 1)
  {
    v33 = v11 - 2;
    do
    {
      v16 = *(_QWORD *)(v16 + 56);
      v31 = v33-- != 0;
      v34 = v31;
    }
    while (v16 && (v34 & 1) != 0);
  }
  if (!v16)
    goto LABEL_38;
  v29 = 0;
  *(_DWORD *)(v16 + 24) += 2;
LABEL_71:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  v35 = *(_WORD *)(v16 + 28);
  if ((v35 & 1) != 0)
    v36 = v29;
  else
    v36 = 1;
  if ((v36 & 1) != 0)
  {
    if ((v35 & 4) == 0)
      goto LABEL_79;
    v37 = *(_QWORD *)(v16 + 80);
    if (!v37)
      goto LABEL_79;
    v11 = 0;
    do
    {
      ++v11;
      v37 = *(_QWORD *)(v37 + 56);
    }
    while (v37);
  }
  else
  {
    v38 = *(_QWORD *)(v16 + 80);
    if (!v38)
    {
LABEL_79:
      v11 = 0;
      goto LABEL_12;
    }
    v11 = *(_DWORD *)(v38 + 4);
  }
LABEL_12:
  *(_DWORD *)(v16 + 24) += 2;
  v17 = *v4;
  *v4 = v16;
  v18 = v16;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      v18 = v16;
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
        v18 = *v4;
      }
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
      v18 = v16;
    }
  }
  WebCore::setUpFullyClippedStack(v5, v18);
  *((_DWORD *)this + 4) = v11;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 21) = v11 == 0;
  v20 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v13;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 16) = v10;
  *(_DWORD *)(v16 + 24) += 2;
  v21 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v16;
  if (v21)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 20) = v11;
  v22 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v16;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  v23 = *v6;
  *v6 = 0;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  *((_WORD *)this + 76) = 10;
  *((_BYTE *)this + 154) = 0;
  WebCore::SimplifiedBackwardsTextIterator::advance(this, v19);
  return this;
}

uint64_t WebCore::SimplifiedBackwardsTextIterator::advance(WebCore::SimplifiedBackwardsTextIterator *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int j;
  uint64_t v17;
  WebCore::RenderObject *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  int v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_WORD *)this + 52) = 0;
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 140) = 1;
  v5 = (_DWORD *)((char *)this + 24);
  while (1)
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6 || *((_BYTE *)this + 154))
      return result;
    if (*((_BYTE *)this + 20) || v6 == *((_QWORD *)this + 9) && !*((_DWORD *)this + 20))
      goto LABEL_102;
    v7 = *(_QWORD *)(v6 + 64);
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) == 0
      || (++*(_DWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10), (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      || (*(_WORD *)(v6 + 28) & 2) == 0)
    {
      result = WebCore::isRendererReplacedElement(v8);
      if ((_DWORD)result)
      {
        v9 = v8;
        if ((*(_BYTE *)(v8 + 45) & 2) != 0)
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
        if ((*(_BYTE *)(v9 + 120) & 0x30) != 0 || *((int *)this + 4) < 1)
          goto LABEL_99;
        v10 = *((_QWORD *)this + 1);
        v11 = *(_QWORD *)(v10 + 48);
        for (i = 0; ; ++i)
        {
          v13 = v11 & 0xFFFFFFFFFFFFLL;
          if (!v13)
            break;
          v11 = *(_QWORD *)(v13 + 48);
        }
        v29 = *(_QWORD *)(v10 + 32);
        if (v29)
          *(_DWORD *)(v29 + 24) += 2;
        v30 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v29;
        if (v30)
        {
          if (*(_DWORD *)(v30 + 24) == 2)
          {
            if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v30);
          }
          else
          {
            *(_DWORD *)(v30 + 24) -= 2;
          }
        }
        *((_DWORD *)this + 24) = i;
        *((_DWORD *)this + 25) = i + 1;
        WebCore::TextIteratorCopyableText::set((uint64_t)this + 104, (WTF::StringImpl *)0x2C);
        result = (uint64_t)WebCore::TextIteratorCopyableText::text((unsigned int *)this + 26);
        *((_QWORD *)this + 16) = result;
        *((_DWORD *)this + 34) = v6;
        *((_BYTE *)this + 140) = BYTE4(v6);
        *((_WORD *)this + 76) = 44;
        v31 = 1;
        goto LABEL_98;
      }
      v14 = *((_QWORD *)this + 1);
      if (v14)
        *(_DWORD *)(v14 + 24) += 2;
      if (WebCore::shouldEmitTabBeforeNode(*(_QWORD *)(v14 + 64), (WebCore::Node *)v6))
      {
        v15 = *(_QWORD *)(v14 + 48);
        for (j = 1; ; ++j)
        {
          v17 = v15 & 0xFFFFFFFFFFFFLL;
          if (!v17)
            break;
          v15 = *(_QWORD *)(v17 + 48);
        }
        v26 = *(_QWORD *)(v14 + 32);
        if (v26)
          *(_DWORD *)(v26 + 24) += 2;
        v27 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v26;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        v28 = 9;
      }
      else
      {
        result = WebCore::shouldEmitNewlineForNode((WebCore *)v14, (WebCore::Node *)((*(unsigned __int16 *)this >> 5) & 1));
        if ((result & 1) == 0
          && (result = WebCore::shouldEmitNewlineAfterNode(*((WebCore **)this + 1), (WebCore::Node *)v6), !(_DWORD)result)
          || *((_WORD *)this + 76) == 10)
        {
LABEL_60:
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
          *((_BYTE *)this + 20) = 1;
          v34 = *((_QWORD *)this + 11);
          v35 = v34 != 0;
          if (!v8)
          {
            if (v34)
              return result;
            goto LABEL_102;
          }
          goto LABEL_100;
        }
        v24 = *(_QWORD *)(v14 + 48);
        for (j = 1; ; ++j)
        {
          v25 = v24 & 0xFFFFFFFFFFFFLL;
          if (!v25)
            break;
          v24 = *(_QWORD *)(v25 + 48);
        }
        v32 = *(_QWORD *)(v14 + 32);
        if (v32)
          *(_DWORD *)(v32 + 24) += 2;
        v33 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v32;
        if (v33)
        {
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v33);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
        v28 = 10;
      }
      *((_DWORD *)this + 24) = j;
      *((_DWORD *)this + 25) = j;
      WebCore::TextIteratorCopyableText::set((uint64_t)this + 104, (WTF::StringImpl *)v28);
      result = (uint64_t)WebCore::TextIteratorCopyableText::text((unsigned int *)this + 26);
      *((_QWORD *)this + 16) = result;
      *((_DWORD *)this + 34) = v6;
      *((_BYTE *)this + 140) = BYTE4(v6);
      *((_WORD *)this + 76) = v28;
      goto LABEL_60;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 120) & 0x30) != 0
      || *((int *)this + 4) < 1)
    {
      goto LABEL_99;
    }
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 18, v6);
    v19 = *((_QWORD *)this + 1);
    v20 = *(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v20 + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B29B98);
    }
    v21 = *(_DWORD *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v22 = v21 + 1;
    *(_DWORD *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v21 + 1;
    if (v19 == *((_QWORD *)this + 7))
      v23 = *((_DWORD *)this + 16);
    else
      v23 = 0;
    if (*(_BYTE *)(v20 + 46) != 46)
    {
      v36 = 0;
      v37 = v20;
      if (v21 == -1)
        goto LABEL_244;
      goto LABEL_68;
    }
    v54 = v21 + 2;
    *(_DWORD *)(v20 + 16) = v21 + 2;
    v36 = *(_DWORD *)(v20 + 120);
    if (v23 < v36)
    {
      if (*((_BYTE *)this + 155) || v36 + v23 >= *((_DWORD *)this + 4))
      {
        *((_BYTE *)this + 155) = 0;
        v55 = *(_QWORD *)(v20 + 144);
        if (v55
          && (v56 = *(_QWORD *)(v55 + 8)) != 0
          && (v57 = *(unsigned int *)(v56 + 64) | ((unint64_t)*(unsigned __int8 *)(v56 + 68) << 32)) != 0
          && (v58 = *(_QWORD *)(v57 + 8)) != 0)
        {
          while ((*(_BYTE *)(v58 + 45) & 2) == 0)
          {
            v59 = *(unsigned int *)(v58 + 47) | ((unint64_t)*(unsigned __int8 *)(v58 + 51) << 32);
            if (!v59)
              goto LABEL_151;
            v37 = 0;
            v58 = *(_QWORD *)(v59 + 8);
            if (!v58)
              goto LABEL_152;
          }
          ++*(_DWORD *)(v58 + 16);
          v37 = v58;
        }
        else
        {
LABEL_151:
          v37 = 0;
        }
LABEL_152:
        v60 = WebCore::RenderText::caretMaxOffset((WebCore::RenderText *)v37, v18);
        *((_DWORD *)this + 4) = v60;
        *((_DWORD *)this + 4) += WebCore::collapsedSpaceLength(*(WebCore **)(v37 + 32), *(WebCore::RenderText **)(v37 + 104), v60);
        v61 = *(_DWORD *)(v37 + 16);
        if (!v61)
        {
          __break(0xC471u);
          JUMPOUT(0x195B29BF8);
        }
        v36 = 0;
        *(_DWORD *)(v37 + 16) = v61 - 1;
        v54 = *(_DWORD *)(v20 + 16);
        goto LABEL_154;
      }
      *((_BYTE *)this + 155) = 1;
    }
    v37 = v20;
LABEL_154:
    if (!v54)
    {
LABEL_247:
      __break(0xC471u);
      JUMPOUT(0x195B29B38);
    }
    v22 = v54 - 1;
    *(_DWORD *)(v20 + 16) = v22;
    if (!v22)
    {
LABEL_244:
      __break(0xC471u);
      JUMPOUT(0x195B29BB8);
    }
LABEL_68:
    *(_DWORD *)(v20 + 16) = v22 - 1;
    ++*(_DWORD *)(v37 + 16);
    v38 = *(_QWORD *)(v37 + 104);
    if (!v38)
    {
      v80 = 0;
      result = WebCore::RenderText::hasRenderedText((WebCore::RenderText *)v37, v18);
LABEL_81:
      v39 = v36 + v23;
      v40 = *((_DWORD *)this + 4);
      if (v36 + v23 == v40)
      {
        v31 = 1;
      }
      else
      {
        *((_DWORD *)this + 25) = v40;
        *((_DWORD *)this + 4) = v39;
        v41 = *((_QWORD *)this + 1);
        if (v41)
          *(_DWORD *)(v41 + 24) += 2;
        v42 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v41;
        if (v42)
        {
          if (*(_DWORD *)(v42 + 24) == 2)
          {
            if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v42);
              v39 = *((_DWORD *)this + 4);
              v40 = *((_DWORD *)this + 25);
            }
          }
          else
          {
            *(_DWORD *)(v42 + 24) -= 2;
          }
        }
        *((_DWORD *)this + 24) = v39;
        if (v38 && (v43 = (v40 + ~v36), *(_DWORD *)(v38 + 4) > v43))
        {
          v44 = *(_QWORD *)(v38 + 8);
          if ((*(_BYTE *)(v38 + 16) & 4) != 0)
            v45 = *(unsigned __int8 *)(v44 + v43);
          else
            v45 = *(_WORD *)(v44 + 2 * v43);
        }
        else
        {
          v45 = 0;
        }
        *((_WORD *)this + 76) = v45;
        WebCore::TextIteratorCopyableText::set((uint64_t)this + 104, (WTF::StringImpl *)&v80, v39 - v36, v40 - v39);
        result = (uint64_t)WebCore::TextIteratorCopyableText::text((unsigned int *)this + 26);
        *((_QWORD *)this + 16) = result;
        *((_DWORD *)this + 34) = v6;
        *((_BYTE *)this + 140) = BYTE4(v6);
        v31 = *((_BYTE *)this + 155) == 0;
        v38 = v80;
      }
      if (!v38)
        goto LABEL_96;
      goto LABEL_94;
    }
    *(_DWORD *)v38 += 2;
    v80 = v38;
    result = WebCore::RenderText::hasRenderedText((WebCore::RenderText *)v37, v18);
    if ((result & 1) != 0 || !*(_DWORD *)(v38 + 4))
      goto LABEL_81;
    v31 = 1;
LABEL_94:
    if (*(_DWORD *)v38 == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)v38, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v38 -= 2;
LABEL_96:
    v46 = *(_DWORD *)(v37 + 16);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x195B29BD8);
    }
    *(_DWORD *)(v37 + 16) = v46 - 1;
LABEL_98:
    *((_BYTE *)this + 20) = v31;
LABEL_99:
    v35 = *((_QWORD *)this + 11) != 0;
LABEL_100:
    v47 = *(_DWORD *)(v8 + 16);
    if (!v47)
      goto LABEL_247;
    *(_DWORD *)(v8 + 16) = v47 - 1;
    if (v35)
      return result;
LABEL_102:
    if (!*((_BYTE *)this + 21))
    {
      v52 = *((_QWORD *)this + 1);
      if (v52)
      {
        if ((*(_WORD *)(v52 + 28) & 4) != 0 && *(_QWORD *)(v52 + 80))
        {
          v53 = *(_QWORD *)(v52 + 88);
          if (v53)
            *(_DWORD *)(v53 + 24) += 2;
          *((_QWORD *)this + 1) = v53;
          if (*(_DWORD *)(v52 + 24) != 2)
          {
            *(_DWORD *)(v52 + 24) -= 2;
            goto LABEL_160;
          }
          if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
            goto LABEL_159;
          goto LABEL_160;
        }
      }
    }
    if (*((_BYTE *)this + 20))
      goto LABEL_167;
    v48 = (_WORD *)*((_QWORD *)this + 1);
    if (v48)
      *((_DWORD *)v48 + 6) += 2;
    v49 = v48[14];
    if ((v49 & 2) != 0
      || (v49 & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v48 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
      || !(*(unsigned int (**)(_WORD *))(*(_QWORD *)v48 + 208))(v48)
      || (v50 = *((_QWORD *)this + 1), !*(_QWORD *)(v50 + 32)))
    {
LABEL_114:
      v51 = 0;
      goto LABEL_115;
    }
    if ((*(_WORD *)(v50 + 28) & 4) != 0 && *(_QWORD *)(v50 + 88))
    {
      if (v50 != *((_QWORD *)this + 9))
        goto LABEL_114;
      v51 = *((_DWORD *)this + 20) == 0;
    }
    else
    {
      v51 = 1;
    }
LABEL_115:
    if (*((_DWORD *)v48 + 6) != 2)
    {
      *((_DWORD *)v48 + 6) -= 2;
      if (v51)
        break;
      goto LABEL_167;
    }
    if ((v48[15] & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v48);
      if (v51)
        break;
      goto LABEL_167;
    }
    if (v51)
      break;
LABEL_167:
    v63 = *((_QWORD *)this + 1);
    if ((*(_QWORD *)(v63 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_184;
    if ((*(_WORD *)(v63 + 28) & 0x80) != 0)
    {
      v78 = *(_QWORD *)(v63 + 200);
      if (!v78)
        goto LABEL_184;
      v64 = (uint64_t *)(v78 + 8);
    }
    else
    {
      v64 = (uint64_t *)(v63 + 32);
    }
    v65 = *v64;
    if (*v64)
    {
      v66 = *(_DWORD *)(v65 + 24);
      *(_DWORD *)(v65 + 24) = v66 + 2;
      v67 = *((_BYTE *)this + 154) | (v63 == *((_QWORD *)this + 7));
      *((_BYTE *)this + 154) = v67;
      if (!v67)
      {
        *(_DWORD *)(v65 + 24) = v66 + 4;
        *((_QWORD *)this + 1) = v65;
        if (*(_DWORD *)(v63 + 24) == 2)
        {
          if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v63);
        }
        else
        {
          *(_DWORD *)(v63 + 24) -= 2;
        }
        if (*(_DWORD *)(v65 + 24) == 2)
        {
          if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v65);
        }
        else
        {
          *(_DWORD *)(v65 + 24) -= 2;
        }
        if (*v5)
          --*v5;
        break;
      }
      if (v66)
      {
        *(_DWORD *)(v65 + 24) = v66;
      }
      else if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v65);
      }
    }
LABEL_184:
    if (*v5)
      --*v5;
    v68 = *((_QWORD *)this + 1);
    v69 = *(_QWORD *)(v68 + 48) & 0xFFFFFFFFFFFFLL;
    if (!v69)
      goto LABEL_190;
    v70 = *(_DWORD *)((*(_QWORD *)(v68 + 48) & 0xFFFFFFFFFFFFLL) + 0x18);
    *(_DWORD *)((*(_QWORD *)(v68 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) = v70 + 2;
    v71 = *((_BYTE *)this + 154) | (v68 == *((_QWORD *)this + 7));
    *((_BYTE *)this + 154) = v71;
    if (v71)
    {
      if (v70)
      {
        *(_DWORD *)(v69 + 24) = v70;
      }
      else if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v69);
      }
LABEL_190:
      result = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!result)
        goto LABEL_206;
      if (*(_DWORD *)(result + 24) != 2)
      {
        *(_DWORD *)(result + 24) -= 2;
        goto LABEL_193;
      }
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        goto LABEL_220;
      goto LABEL_193;
    }
    *(_DWORD *)(v69 + 24) = v70 + 4;
    *((_QWORD *)this + 1) = v69;
    if (*(_DWORD *)(v68 + 24) == 2)
    {
      if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v68);
    }
    else
    {
      *(_DWORD *)(v68 + 24) -= 2;
    }
    if (*(_DWORD *)(v69 + 24) == 2)
    {
      if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
      {
        v52 = v69;
LABEL_159:
        WebCore::Node::removedLastRef((WebCore::Node *)v52);
      }
    }
    else
    {
      *(_DWORD *)(v69 + 24) -= 2;
    }
LABEL_160:
    v62 = *((_QWORD *)this + 1);
    if (v62)
      *(_DWORD *)(v62 + 24) += 2;
    result = WebCore::pushFullyClippedState((uint64_t)this + 24, (WebCore::Node *)v62);
    if (*(_DWORD *)(v62 + 24) != 2)
    {
      *(_DWORD *)(v62 + 24) -= 2;
      goto LABEL_193;
    }
    if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
    {
      result = v62;
LABEL_220:
      result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
LABEL_193:
    v72 = *((_QWORD *)this + 1);
    if (v72)
    {
      *(_DWORD *)(v72 + 24) += 2;
      v73 = *(_WORD *)(v72 + 28);
      if ((v73 & 2) != 0 && (result = *(_QWORD *)(v72 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v72 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B29B78);
        }
        result = (uint64_t)WebCore::RenderText::caretMaxOffset((WebCore::RenderText *)result, (WebCore::RenderObject *)v6);
        v75 = result;
      }
      else if ((v73 & 1) != 0)
      {
        v79 = *(_QWORD *)(v72 + 80);
        if (v79)
          v75 = *(_DWORD *)(v79 + 4);
        else
          v75 = 0;
      }
      else if ((v73 & 4) != 0 && (v74 = *(_QWORD *)(v72 + 80)) != 0)
      {
        v75 = 0;
        do
        {
          ++v75;
          v74 = *(_QWORD *)(v74 + 56);
        }
        while (v74);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 208))(v72);
        v75 = result ^ 1;
      }
      v76 = *(_QWORD *)(v72 + 64) & 0xFFFFFFFFFFFFLL;
      if (v76 && (*(_BYTE *)((*(_QWORD *)(v72 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        ++*(_DWORD *)((*(_QWORD *)(v72 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        result = WebCore::collapsedSpaceLength(*(WebCore **)(v76 + 32), *(WebCore::RenderText **)(v76 + 104), v75);
        v77 = *(_DWORD *)(v76 + 16);
        if (!v77)
        {
          __break(0xC471u);
          JUMPOUT(0x195B29B58);
        }
        v75 += result;
        *(_DWORD *)(v76 + 16) = v77 - 1;
      }
      *((_DWORD *)this + 4) = v75;
      if (*(_DWORD *)(v72 + 24) == 2)
      {
        if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v72);
      }
      else
      {
        *(_DWORD *)(v72 + 24) -= 2;
      }
      goto LABEL_207;
    }
LABEL_206:
    *((_DWORD *)this + 4) = 0;
LABEL_207:
    *((_WORD *)this + 10) = 0;
    if (*((_QWORD *)this + 11))
      return result;
  }
  result = (uint64_t)WebCore::SimplifiedBackwardsTextIterator::exitNode(this, (WebCore::Node *)v6);
  if (!*((_QWORD *)this + 11))
    goto LABEL_167;
  *((_WORD *)this + 10) = 257;
  return result;
}

unsigned int *WebCore::SimplifiedBackwardsTextIterator::exitNode(WebCore::SimplifiedBackwardsTextIterator *this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  __int16 v6;
  char *v7;
  uint64_t v8;
  WebCore::Node *v9;
  unsigned int *result;
  uint64_t v11;
  int v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  if (WebCore::shouldEmitTabBeforeNode(*(_QWORD *)(v3 + 64), a2))
  {
    v4 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    *((_QWORD *)this + 12) = 0;
    v5 = (unsigned int *)((char *)this + 104);
    v6 = 9;
    v7 = (char *)this + 104;
    v8 = 9;
LABEL_14:
    WebCore::TextIteratorCopyableText::set((uint64_t)v7, (WTF::StringImpl *)v8);
    result = WebCore::TextIteratorCopyableText::text(v5);
    *((_QWORD *)this + 16) = result;
    *((_DWORD *)this + 34) = v12;
    *((_BYTE *)this + 140) = v13;
    *((_WORD *)this + 76) = v6;
    return result;
  }
  if ((WebCore::shouldEmitNewlineForNode((WebCore *)v3, (WebCore::Node *)((*(unsigned __int16 *)this >> 5) & 1)) & 1) != 0
    || (result = (unsigned int *)WebCore::shouldEmitNewlineBeforeNode(*((WebCore **)this + 1), v9), (_DWORD)result))
  {
    v11 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    *((_QWORD *)this + 12) = 0;
    v5 = (unsigned int *)((char *)this + 104);
    v6 = 10;
    v7 = (char *)this + 104;
    v8 = 10;
    goto LABEL_14;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::collapsedSpaceLength(WebCore *this, WebCore::RenderText *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL i;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v43;

  if (!a2)
    return -a3;
  v4 = *(_DWORD *)a2;
  v5 = *((unsigned int *)a2 + 1);
  *(_DWORD *)a2 += 2;
  if (v5 <= a3)
  {
LABEL_94:
    i = 0;
    goto LABEL_96;
  }
  v6 = a3;
  if (this)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)a2 + 1);
    if ((*((_BYTE *)a2 + 16) & 4) != 0)
    {
      for (i = 1; ; i = v6 < v5)
      {
        v10 = *(unsigned __int8 *)(v8 + v6);
        if (v10 == 9 || v10 == 32)
        {
          v15 = *(_DWORD *)(v7 + 120);
          v16 = (v15 >> 27) & 7;
          v17 = v15 & 0x40000000;
          if (v16 == 3 && v17 == 0 || v16 == 1)
            goto LABEL_95;
        }
        else
        {
          if (v10 != 10)
            goto LABEL_95;
          v11 = *(_DWORD *)(v7 + 120);
          v12 = (v11 >> 27) & 7;
          if ((v11 & 0x40000000) == 0 && v12 == 3)
            goto LABEL_95;
          if (v12)
          {
            v13 = v11 & 0x40000000;
            v14 = v13 ? 1 : 2;
            if (v12 == v14 || !((v12 != 1) | (v13 >> 30) & 1))
              goto LABEL_95;
          }
        }
        if (v5 - 1 == v6)
          goto LABEL_94;
        ++v6;
      }
    }
    for (i = 1; ; i = v6 < v5)
    {
      v20 = *(unsigned __int16 *)(v8 + 2 * v6);
      if (v20 == 9 || v20 == 32)
      {
        v25 = *(_DWORD *)(v7 + 120);
        v26 = (v25 >> 27) & 7;
        v27 = v25 & 0x40000000;
        if (v26 == 3 && v27 == 0 || v26 == 1)
          goto LABEL_95;
      }
      else
      {
        if (v20 != 10)
          goto LABEL_95;
        v21 = *(_DWORD *)(v7 + 120);
        v22 = (v21 >> 27) & 7;
        if ((v21 & 0x40000000) == 0 && v22 == 3)
          goto LABEL_95;
        if (v22)
        {
          v23 = v21 & 0x40000000;
          v24 = v23 ? 1 : 2;
          if (v22 == v24 || !((v22 != 1) | (v23 >> 30) & 1))
            goto LABEL_95;
        }
      }
      if (v5 - 1 == v6)
        goto LABEL_94;
      ++v6;
    }
  }
  v30 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
  {
    for (i = 1; ; i = v6 < v5)
    {
      v31 = *(unsigned __int8 *)(v30 + v6);
      if (v31 == 9 || v31 == 32)
      {
        v34 = (MEMORY[0x78] >> 27) & 7;
        if (v34 == 3 && (MEMORY[0x78] & 0x40000000) == 0 || v34 == 1)
          goto LABEL_95;
      }
      else
      {
        if (v31 != 10)
          goto LABEL_95;
        v32 = (MEMORY[0x78] >> 27) & 7;
        if ((MEMORY[0x78] & 0x40000000) == 0 && v32 == 3)
          goto LABEL_95;
        if (v32)
        {
          v33 = (MEMORY[0x78] & 0x40000000) != 0 ? 1 : 2;
          if (v32 == v33 || !((v32 != 1) | ((MEMORY[0x78] & 0x40000000u) >> 30) & 1))
            goto LABEL_95;
        }
      }
      if (v5 - 1 == v6)
        goto LABEL_94;
      ++v6;
    }
  }
  for (i = 1; ; i = v6 < v5)
  {
    v37 = *(unsigned __int16 *)(v30 + 2 * v6);
    if (v37 == 9 || v37 == 32)
      break;
    if (v37 != 10)
      goto LABEL_95;
    v38 = (MEMORY[0x78] >> 27) & 7;
    if ((MEMORY[0x78] & 0x40000000) == 0 && v38 == 3)
      goto LABEL_95;
    if (v38)
    {
      v39 = (MEMORY[0x78] & 0x40000000) != 0 ? 1 : 2;
      if (v38 == v39 || !((v38 != 1) | ((MEMORY[0x78] & 0x40000000u) >> 30) & 1))
        goto LABEL_95;
    }
LABEL_92:
    if (v5 - 1 == v6)
      goto LABEL_94;
    ++v6;
  }
  v40 = (MEMORY[0x78] >> 27) & 7;
  if ((v40 != 3 || (MEMORY[0x78] & 0x40000000) != 0) && v40 != 1)
    goto LABEL_92;
LABEL_95:
  v3 = v6 - a3;
LABEL_96:
  v43 = v5 - a3;
  if (v4)
  {
    *(_DWORD *)a2 = v4;
    if (i)
      return v3;
  }
  else
  {
    WTF::StringImpl::destroy(a2, a2);
    if (i)
      return v3;
  }
  return v43;
}

unsigned int *WebCore::SimplifiedBackwardsTextIterator::range@<X0>(unsigned int **this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::SimplifiedBackwardsTextIterator *v3;
  unsigned int *result;
  unsigned int v5;
  int v6;

  v3 = (WebCore::SimplifiedBackwardsTextIterator *)this;
  result = this[11];
  v5 = result[6];
  result[6] = v5 + 6;
  v6 = *((_DWORD *)v3 + 24);
  LODWORD(v3) = *((_DWORD *)v3 + 25);
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = result;
  *(_DWORD *)(a3 + 24) = (_DWORD)v3;
  if (v5 == -4)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] = v5 + 4;
  }
  return result;
}

uint64_t WebCore::CharacterIterator::CharacterIterator(uint64_t a1, _DWORD *a2, __int16 a3)
{
  WTF *v4;
  WTF::StringImpl *v5;

  v4 = WebCore::TextIterator::TextIterator(a1, a2, a3);
  *((_QWORD *)v4 + 32) = 0;
  *((_BYTE *)v4 + 264) = 1;
  if (*((_QWORD *)v4 + 12))
  {
    do
    {
      if (*(_DWORD *)(a1 + 152))
        break;
      WebCore::TextIterator::advance((WebCore::TextIterator *)a1, v5);
    }
    while (*(_QWORD *)(a1 + 96));
  }
  return a1;
}

{
  WTF *v4;
  WTF::StringImpl *v5;

  v4 = WebCore::TextIterator::TextIterator(a1, a2, a3);
  *((_QWORD *)v4 + 32) = 0;
  *((_BYTE *)v4 + 264) = 1;
  if (*((_QWORD *)v4 + 12))
  {
    do
    {
      if (*(_DWORD *)(a1 + 152))
        break;
      WebCore::TextIterator::advance((WebCore::TextIterator *)a1, v5);
    }
    while (*(_QWORD *)(a1 + 96));
  }
  return a1;
}

uint64_t WebCore::CharacterIterator::range@<X0>(int32x2_t *this@<X0>, int32x2_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unsigned int i;
  uint64_t v7;
  int32x2_t v8;
  int v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  int v13;
  int v14;

  result = (uint64_t)this[13];
  if (result)
  {
    v5 = *(_QWORD *)(result + 48);
    for (i = 0; ; ++i)
    {
      v7 = v5 & 0xFFFFFFFFFFFFLL;
      if (!v7)
        break;
      v5 = *(_QWORD *)(v7 + 48);
    }
    this[14] = vadd_s32(this[14], vdup_n_s32(i));
    this[13] = 0;
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v8 = this[12];
  v9 = *(_DWORD *)(*(_QWORD *)&v8 + 24);
  *(_DWORD *)(*(_QWORD *)&v8 + 24) = v9 + 4;
  v10 = this[14].i32[0];
  v11 = this[14].i32[1];
  *a2 = v8;
  a2[1].i32[0] = v10;
  a2[2] = v8;
  a2[3].i32[0] = v11;
  if ((this[19].i32[0] & 0xFFFFFFFE) != 0)
  {
    v12 = this[32].i32[1] + v10;
    *(_DWORD *)(*(_QWORD *)&v8 + 24) = v9 + 8;
    v13 = v9 + 6;
    if (v13)
    {
      *(_DWORD *)(*(_QWORD *)&v8 + 24) = v13;
    }
    else
    {
      if ((*(_WORD *)(*(_QWORD *)&v8 + 30) & 0x400) != 0)
      {
        a2[1].i32[0] = v12;
        goto LABEL_19;
      }
      result = WebCore::Node::removedLastRef(*(WebCore::Node **)&v8);
      v13 = *(_DWORD *)(*(_QWORD *)&v8 + 24);
    }
    a2[1].i32[0] = v12;
    a2[2] = v8;
    v14 = v13 - 2;
    if (v14)
    {
      *(_DWORD *)(*(_QWORD *)&v8 + 24) = v14;
LABEL_12:
      a2[3].i32[0] = v12 + 1;
      return result;
    }
LABEL_19:
    if ((*(_WORD *)(*(_QWORD *)&v8 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(*(WebCore::Node **)&v8);
    goto LABEL_12;
  }
  return result;
}

uint64_t WebCore::CharacterIterator::advance(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;

  if ((int)a2 < 1)
    return this;
  v2 = this;
  *(_BYTE *)(this + 264) = 0;
  v3 = *(_DWORD *)(this + 260);
  v4 = *(_DWORD *)(this + 152) - v3;
  v5 = (_DWORD)a2 - v4;
  if ((int)a2 < v4)
  {
    *(_DWORD *)(this + 260) = v3 + (_DWORD)a2;
    v6 = *(_DWORD *)(this + 256) + (_DWORD)a2;
    goto LABEL_12;
  }
  *(_DWORD *)(this + 256) += v4;
  this = WebCore::TextIterator::advance((WebCore::TextIterator *)this, a2);
  if (!*(_QWORD *)(v2 + 96))
  {
LABEL_10:
    *(_BYTE *)(v2 + 264) = 1;
    *(_DWORD *)(v2 + 260) = 0;
    return this;
  }
  while (1)
  {
    v8 = *(_DWORD *)(v2 + 152);
    if (!v8)
    {
      *(_BYTE *)(v2 + 264) = 1;
      goto LABEL_9;
    }
    if (v5 < v8)
      break;
    *(_DWORD *)(v2 + 256) += v8;
    v5 -= v8;
LABEL_9:
    this = WebCore::TextIterator::advance((WebCore::TextIterator *)v2, v7);
    if (!*(_QWORD *)(v2 + 96))
      goto LABEL_10;
  }
  *(_DWORD *)(v2 + 260) = v5;
  v6 = *(_DWORD *)(v2 + 256) + v5;
LABEL_12:
  *(_DWORD *)(v2 + 256) = v6;
  return this;
}

uint64_t WebCore::BackwardsCharacterIterator::range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = this;
  v4 = *(_QWORD *)(this + 88);
  v5 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 6;
  v6 = *(_DWORD *)(this + 96);
  v7 = *(_DWORD *)(this + 100);
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 24) = v7;
  v8 = v5 + 4;
  if (v8)
  {
    *(_DWORD *)(v4 + 24) = v8;
    goto LABEL_3;
  }
  if ((*(_WORD *)(v4 + 30) & 0x400) != 0
    || (this = WebCore::Node::removedLastRef((WebCore::Node *)v4), *(_QWORD *)(v2 + 88)))
  {
LABEL_3:
    if ((*(_DWORD *)(v2 + 136) & 0xFFFFFFFE) == 0)
      return this;
    v9 = v7 - *(_DWORD *)(v2 + 164);
    v10 = *(_DWORD *)(v4 + 24);
    v11 = v9 - 1;
    *(_DWORD *)(v4 + 24) = v10 + 4;
    *(_QWORD *)a2 = v4;
    if (v10 == -2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) != 0)
      {
        *(_DWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = v4;
        goto LABEL_16;
      }
      this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
      v10 = *(_DWORD *)(v4 + 24) - 2;
    }
    else
    {
      *(_DWORD *)(v4 + 24) = v10 + 2;
    }
    *(_DWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v4;
    if (v10)
    {
      *(_DWORD *)(v4 + 24) = v10;
LABEL_8:
      *(_DWORD *)(a2 + 24) = v9;
      return this;
    }
LABEL_16:
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
    goto LABEL_8;
  }
  return this;
}

uint64_t WebCore::foldQuoteMarks@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  result = *(_QWORD *)this;
  if (result && (result = WTF::StringImpl::replace(), v34))
  {
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v5);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v6);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v7);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v8);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v9);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v10);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v11);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v12);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v13);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v14);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v15);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v16);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v17);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v18);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v19);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v20);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v21);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v22);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v23);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v24);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v25);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v26);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v27);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v29);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v30);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
    WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
    result = WTF::StringImpl::replace();
    if (*(_DWORD *)v34 == 2)
      return WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

BOOL WebCore::hasAnyPlainText(_DWORD *a1, __int16 a2)
{
  WTF::StringImpl *v2;
  _BOOL8 v3;
  _BYTE v5[96];
  uint64_t v6;
  int v7;

  WebCore::TextIterator::TextIterator((uint64_t)v5, a1, a2);
  if (v6)
  {
    do
    {
      v3 = v7 != 0;
      if (v7)
        break;
      WebCore::TextIterator::advance((WebCore::TextIterator *)v5, v2);
    }
    while (v6);
  }
  else
  {
    v3 = 0;
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v5, v2);
  return v3;
}

WTF::StringImpl *WebCore::plainTextReplacingNoBreakSpace@<X0>(_DWORD *a1@<X0>, __int16 a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  WebCore::plainText(a1, a2, a3, (const WTF::String *)&v7);
  result = v7;
  if (v7)
  {
    WTF::StringImpl::replace();
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void WebCore::findClosestPlainText(_DWORD *a1@<X0>, WebCore *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  v15 = a3;
  v13 = 0;
  v14 = a4;
  v11 = -1;
  v12 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v9 = off_1E33ADF90;
  v9[1] = &v14;
  v9[2] = &v11;
  v9[3] = &v15;
  v9[4] = &v12;
  v10 = v9;
  WebCore::forEachMatch(a1, a2, a3, &v10);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  WebCore::rangeForMatch(a5, a1, v15, v12, v13);
}

void WebCore::forEachMatch(_DWORD *a1, WebCore *a2, __int16 a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  UChar32 v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned int IntPropertyValue;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 v33;
  WTF::StringImpl *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  _QWORD *v46;
  _BYTE v47[88];
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  WTF *v60[14];
  char v61[8];
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;

  WebCore::SearchBuffer::SearchBuffer((uint64_t *)v60, a2, a3);
  if (v65)
  {
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8);
    *(_DWORD *)(v8 + 24) += 4;
    v56 = v8;
    v57 = 0;
    *(_DWORD *)(v7 + 24) += 2;
    v58 = v7;
    v59 = a1[2];
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)v47, (const WebCore::SimpleRange *)&v56);
    if (v48)
    {
      v43 = v7;
      v44 = v8;
      v45 = a1;
      v46 = a4;
      while (1)
      {
        v10 = v51;
        if ((_DWORD)v51)
        {
          v11 = v50;
          v64 = 0;
          v12 = v51;
          v13 = v51 - 1;
          v14 = v51 & 0xFF00000000;
          if ((v51 & 0xFF00000000) != 0)
          {
            if (v51 <= v13)
              goto LABEL_116;
          }
          else
          {
            if (v51 <= v13)
              goto LABEL_116;
            if (v51 != 1 && (*((_WORD *)v50 + (v51 - 1)) & 0xFC00) == 56320)
            {
              if (v51 <= 1)
                goto LABEL_116;
              if ((*((_WORD *)v50 + (v51 - 2)) & 0xFC00) == 0xD800)
                v13 = v51 - 2;
            }
          }
          v16 = v13;
          if (v14)
            v16 = v13 | 0x100000000;
          v17 = v13 >= v51 ? v51 : v16;
          if ((_DWORD)v17)
          {
            v18 = v17;
            if ((v17 & 0xFF00000000) == 0)
            {
              while (1)
              {
                v19 = v18 - 1;
                if (v18 - 1 >= v17)
                  break;
                v20 = *((unsigned __int16 *)v11 + v19);
                if ((v20 & 0xFC00) == 0xDC00 && v18 != 1)
                {
                  if (v18 - 2 >= v17)
                    break;
                  v21 = *((unsigned __int16 *)v11 + v18 - 2);
                  v22 = (v21 & 0xFC00) == 55296;
                  v23 = v20 + (v21 << 10) - 56613888;
                  if (v22)
                    v19 = v18 - 2;
                  if (v22)
                    v20 = v23;
                }
                IntPropertyValue = u_getIntPropertyValue(v20, UCHAR_LINE_BREAK);
                if (IntPropertyValue <= 0x25 && ((1 << IntPropertyValue) & 0x2001004000) != 0)
                {
                  v18 = v19;
                  if (v19)
                    continue;
                }
                goto LABEL_49;
              }
LABEL_116:
              __break(1u);
              return;
            }
            v18 = v17;
            while (1)
            {
              v26 = v18 - 1;
              v27 = u_getIntPropertyValue(*((unsigned __int8 *)v11 + v26), UCHAR_LINE_BREAK);
              if (v27 > 0x25 || ((1 << v27) & 0x2001004000) == 0)
                break;
              --v18;
              if (!v26)
                goto LABEL_48;
            }
          }
          else
          {
LABEL_48:
            v18 = 0;
          }
LABEL_49:
          v29 = v12 - (unint64_t)v18 >= (unint64_t)v62 - v63 ? v62 - v63 : v12 - v18;
          v30 = (v10 - v29);
          if (v30 >= v10)
          {
            v10 = 0x100000000;
            v11 = &str_7_40;
          }
          else if ((_DWORD)v10 != (_DWORD)v29)
          {
            v10 = v29;
            v32 = v12 - v30;
            if (v14)
            {
              if (v32 < v29)
                goto LABEL_116;
              v11 = (_OWORD *)((char *)v11 + v30);
              v10 = v29 | 0x100000000;
            }
            else
            {
              if (v32 < v29)
                goto LABEL_116;
              v11 = (_OWORD *)((char *)v11 + 2 * v30);
            }
          }
          WTF::append<char16_t,0ul>(v61, v11, v10);
          v31 = v63 + v29;
          v63 += v29;
          if (v18 || v31 == v62)
            break;
        }
        if (v65)
        {
          WebCore::SimplifiedBackwardsTextIterator::advance((WebCore::SimplifiedBackwardsTextIterator *)v47, v9);
          if (v48)
            continue;
        }
        goto LABEL_67;
      }
      v65 = 0;
LABEL_67:
      WebCore::SimplifiedBackwardsTextIterator::~SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)v47, v9);
      a1 = v45;
      a4 = v46;
      v8 = v44;
      v7 = v43;
      if (!v43)
        goto LABEL_70;
    }
    else
    {
      WebCore::SimplifiedBackwardsTextIterator::~SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)v47, v9);
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
LABEL_70:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if ((a3 & 0x100) != 0)
    v33 = 1282;
  else
    v33 = 1794;
  WebCore::TextIterator::TextIterator((uint64_t)v47, a1, v33);
  v54 = 0;
  v55 = 1;
  while (v49)
  {
    if ((_DWORD)v53)
    {
      do
      {
        if (v53 <= HIDWORD(v54))
        {
          v36 = 0x100000000;
          v35 = (unsigned __int16 *)&str_7_40;
        }
        else
        {
          v35 = v52;
          if (HIDWORD(v54))
          {
            v36 = (v53 - HIDWORD(v54));
            v42 = v53 - (unint64_t)HIDWORD(v54);
            if ((v53 & 0xFF00000000) != 0)
            {
              if (v42 < v36)
                goto LABEL_116;
              v35 = (unsigned __int16 *)((char *)v52 + HIDWORD(v54));
              v36 |= 0x100000000uLL;
            }
            else
            {
              if (v42 < v36)
                goto LABEL_116;
              v35 = &v52[HIDWORD(v54)];
            }
          }
          else
          {
            v36 = v53;
          }
        }
        v37 = WebCore::SearchBuffer::append((uint64_t)v60, v35, v36);
        if (v37 < 1)
          goto LABEL_94;
        v55 = 0;
        v39 = v37 - (v53 - HIDWORD(v54));
        if (v37 < (int)v53 - HIDWORD(v54))
        {
          HIDWORD(v54) += v37;
          LODWORD(v54) = v54 + v37;
          goto LABEL_94;
        }
        LODWORD(v54) = v54 + v53 - HIDWORD(v54);
        while (1)
        {
          while (1)
          {
            WebCore::TextIterator::advance((WebCore::TextIterator *)v47, v38);
            if (!v49)
            {
              v55 = 1;
              HIDWORD(v54) = 0;
              goto LABEL_94;
            }
            if ((_DWORD)v53)
              break;
            v55 = 1;
          }
          if (v39 < (int)v53)
            break;
          LODWORD(v54) = v54 + v53;
          v39 -= v53;
        }
        HIDWORD(v54) = v39;
        LODWORD(v54) = v54 + v39;
        while (1)
        {
LABEL_94:
          while (1)
          {
            v56 = 0;
            v40 = WebCore::SearchBuffer::search((WebCore::SearchBuffer *)v60, &v56);
            if (!v40)
              break;
            if ((*(unsigned int (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v54 - v56, v40))
            {
              goto LABEL_109;
            }
          }
          if (!v55 || v64 != 0)
            break;
          v64 = 1;
        }
      }
      while (v49);
      break;
    }
    WebCore::TextIterator::advance((WebCore::TextIterator *)v47, v34);
  }
LABEL_109:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v47, v34);
  WebCore::SearchBuffer::~SearchBuffer(v60);
}

void WebCore::rangeForMatch(uint64_t a1, _DWORD *a2, __int16 a3, int a4, uint64_t a5)
{
  char v7;
  int v8;
  __int16 v10;
  WTF::StringImpl *v11;
  int v12;
  WebCore::Node *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  WebCore::Node *v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  WebCore::Node *v31;
  int v32;
  WebCore::Node *v33;
  int v34;
  int32x2_t v35[12];
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;

  v7 = a3;
  if (!a5)
  {
    v18 = a2 + 4;
    if ((a3 & 8) != 0)
      v18 = a2;
    v19 = *(_QWORD *)&a2[4 * ((a3 & 8) == 0)];
    v20 = *(_DWORD *)(v19 + 24);
    *(_QWORD *)a1 = v19;
    v21 = v18[2];
    *(_DWORD *)(a1 + 8) = v21;
    *(_DWORD *)(v19 + 24) = v20 + 4;
    *(_QWORD *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 24) = v21;
    return;
  }
  v8 = a5;
  if ((a3 & 0x100) != 0)
    v10 = 1282;
  else
    v10 = 1794;
  WebCore::TextIterator::TextIterator((uint64_t)v35, a2, v10);
  v38 = 0;
  v39 = 1;
  while (v36 && !v37)
    WebCore::TextIterator::advance((WebCore::TextIterator *)v35, v11);
  if (a4 < 1)
  {
LABEL_12:
    if (v36)
      goto LABEL_13;
LABEL_30:
    v22 = a2 + 4;
    if ((v7 & 8) != 0)
      v22 = a2;
    v23 = *(_QWORD *)&a2[4 * ((v7 & 8) == 0)];
    v24 = *(_DWORD *)(v23 + 24);
    *(_QWORD *)a1 = v23;
    v25 = v22[2];
    *(_DWORD *)(a1 + 8) = v25;
    *(_DWORD *)(v23 + 24) = v24 + 4;
    *(_QWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v25;
    goto LABEL_49;
  }
  v39 = 0;
  v12 = a4 - (v37 - HIDWORD(v38));
  if (a4 < v37 - HIDWORD(v38))
  {
    HIDWORD(v38) += a4;
    LODWORD(v38) = v38 + a4;
    goto LABEL_12;
  }
  LODWORD(v38) = v38 + v37 - HIDWORD(v38);
  WebCore::TextIterator::advance((WebCore::TextIterator *)v35, v11);
  if (!v36)
  {
LABEL_29:
    v39 = 1;
    HIDWORD(v38) = 0;
    goto LABEL_30;
  }
  while (1)
  {
    if (!v37)
    {
      v39 = 1;
      goto LABEL_28;
    }
    if (v12 < v37)
      break;
    LODWORD(v38) = v38 + v37;
    v12 -= v37;
LABEL_28:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v35, v11);
    if (!v36)
      goto LABEL_29;
  }
  HIDWORD(v38) = v12;
  LODWORD(v38) = v38 + v12;
LABEL_13:
  WebCore::CharacterIterator::range(v35, (int32x2_t *)&v31);
  v13 = v31;
  v14 = v32;
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  v15 = v8 - 1;
  if (v8 - 1 < 1)
    goto LABEL_40;
  v39 = 0;
  v16 = v15 - (v37 - HIDWORD(v38));
  if (v15 < v37 - HIDWORD(v38))
  {
    HIDWORD(v38) += v15;
    v17 = v38 + v15;
    goto LABEL_19;
  }
  LODWORD(v38) = v38 + v37 - HIDWORD(v38);
  WebCore::TextIterator::advance((WebCore::TextIterator *)v35, v11);
  if (!v36)
  {
LABEL_39:
    v39 = 1;
    HIDWORD(v38) = 0;
    goto LABEL_40;
  }
  while (2)
  {
    if (!v37)
    {
      v39 = 1;
LABEL_38:
      WebCore::TextIterator::advance((WebCore::TextIterator *)v35, v11);
      if (!v36)
        goto LABEL_39;
      continue;
    }
    break;
  }
  if (v16 >= v37)
  {
    LODWORD(v38) = v38 + v37;
    v16 -= v37;
    goto LABEL_38;
  }
  HIDWORD(v38) = v16;
  v17 = v38 + v16;
LABEL_19:
  LODWORD(v38) = v17;
LABEL_40:
  if (v36)
  {
    WebCore::CharacterIterator::range(v35, (int32x2_t *)&v31);
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a1 + 8) = v14;
    v26 = v31;
    *(_QWORD *)(a1 + 16) = v33;
    *(_DWORD *)(a1 + 24) = v34;
    if (!v26)
      goto LABEL_49;
    if (*((_DWORD *)v26 + 6) != 2)
    {
      *((_DWORD *)v26 + 6) -= 2;
      goto LABEL_49;
    }
    if ((*((_WORD *)v26 + 15) & 0x400) != 0)
      goto LABEL_49;
LABEL_59:
    WebCore::Node::removedLastRef(v26);
    goto LABEL_49;
  }
  v27 = a2 + 4;
  if ((v7 & 8) != 0)
    v27 = a2;
  v28 = *(_QWORD *)&a2[4 * ((v7 & 8) == 0)];
  v29 = *(_DWORD *)(v28 + 24);
  *(_QWORD *)a1 = v28;
  v30 = v27[2];
  *(_DWORD *)(a1 + 8) = v30;
  *(_DWORD *)(v28 + 24) = v29 + 4;
  *(_QWORD *)(a1 + 16) = v28;
  *(_DWORD *)(a1 + 24) = v30;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) != 2)
    {
      *((_DWORD *)v13 + 6) -= 2;
      goto LABEL_49;
    }
    if ((*((_WORD *)v13 + 15) & 0x400) == 0)
    {
      v26 = v13;
      goto LABEL_59;
    }
  }
LABEL_49:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v35, v11);
}

void WebCore::findPlainText(_DWORD *a1@<X0>, WebCore *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v12 = (a3 & 8) == 0;
  v10 = 0;
  v11 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E33ADFB8;
  v8[1] = &v10;
  v8[2] = &v12;
  v9 = v8;
  WebCore::forEachMatch(a1, a2, a3, &v9);
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  WebCore::rangeForMatch(a4, a1, a3, v10, v11);
}

unint64_t WebCore::containsPlainText(uint64_t *a1, WebCore *a2, __int16 a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14[18];
  char v15;

  WebCore::SearchBuffer::SearchBuffer((uint64_t *)v14, a2, a3);
  if (*a1)
    v4 = *(unsigned int *)(*a1 + 4) | ((unint64_t)((*(_DWORD *)(*a1 + 16) >> 2) & 1) << 32);
  else
    v4 = 0x100000000;
  while (1)
  {
    v5 = v4;
    if (!(_DWORD)v4)
    {
LABEL_20:
      WebCore::SearchBuffer::~SearchBuffer(v14);
      return v5 != 0;
    }
    v6 = *a1;
    if (*a1)
    {
      v7 = *(unsigned int *)(v6 + 16);
      v8 = *(unsigned __int16 **)(v6 + 8);
      v6 = *(unsigned int *)(v6 + 4);
      v9 = (v7 >> 2) & 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    result = WebCore::SearchBuffer::append((uint64_t)v14, v8, v6 | (v9 << 32));
    if (v4 <= result)
    {
      v11 = 0x100000000;
LABEL_10:
      v15 = 1;
      goto LABEL_11;
    }
    if (!(_DWORD)result)
    {
      v11 = v4;
      goto LABEL_9;
    }
    v11 = (v4 - result);
    v12 = v4 - (unint64_t)result;
    if ((v4 & 0xFF00000000) == 0)
      break;
    if (v12 < v11)
      goto LABEL_22;
    v11 |= 0x100000000uLL;
LABEL_9:
    if (!(_DWORD)v11)
      goto LABEL_10;
LABEL_11:
    v13 = 0;
    v4 = v11;
    if (WebCore::SearchBuffer::search((WebCore::SearchBuffer *)v14, &v13))
      goto LABEL_20;
  }
  if (v12 >= v11)
    goto LABEL_9;
LABEL_22:
  __break(1u);
  return result;
}

unint64_t WebCore::SearchBuffer::append(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  __int16 v31;
  __int16 v32;

  if (*(_BYTE *)(a1 + 144))
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 120))
    {
      memcpy(*(void **)(a1 + 112), (const void *)(*(_QWORD *)(a1 + 112) + 2 * v6 - 2 * *(_QWORD *)(a1 + 128)), 2 * *(_QWORD *)(a1 + 128));
      v7 = *(_QWORD *)(a1 + 128);
      v8 = *(_QWORD *)(a1 + 136);
      v9 = *(unsigned int *)(a1 + 124) - v7;
      v10 = v8 >= v9;
      v6 = v8 - v9;
      if (!v10)
        v6 = 0;
      *(_QWORD *)(a1 + 136) = v6;
      *(_DWORD *)(a1 + 124) = v7;
      LODWORD(v6) = v7;
    }
  }
  v11 = v6;
  v12 = *(unsigned int *)(a1 + 120);
  v13 = a3;
  if (a3 >= v12 - v6)
    v14 = v12 - v6;
  else
    v14 = a3;
  v15 = v14 + v6;
  if (v15 > v12)
  {
    v16 = v12 + (v12 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v15)
      v18 = v15;
    else
      v18 = v17;
    if (v18 >> 31)
      goto LABEL_71;
    v19 = *(void **)(a1 + 112);
    v20 = (void *)WTF::fastMalloc((WTF *)(2 * v18));
    *(_DWORD *)(a1 + 120) = v18;
    *(_QWORD *)(a1 + 112) = v20;
    memcpy(v20, v19, 2 * v11);
    if (v19)
    {
      if (*(void **)(a1 + 112) == v19)
      {
        *(_QWORD *)(a1 + 112) = 0;
        *(_DWORD *)(a1 + 120) = 0;
      }
      WTF::fastFree((WTF *)v19, v21);
    }
  }
  *(_DWORD *)(a1 + 124) = v15;
  if (v14)
  {
    v22 = v15 - v11;
    if (v15 < v11)
      v22 = 0;
    if ((a3 & 0xFF00000000) == 0)
    {
      v23 = 2 * v11;
      v24 = v14;
      while (1)
      {
        if (!v13)
          goto LABEL_70;
        v25 = *a2;
        v26 = 34;
        if (v25 <= 0x2E41)
        {
          if (*a2 <= 0x5F2u)
          {
            if (v25 != 160)
            {
              if (v25 == 171 || v25 == 187)
                goto LABEL_52;
LABEL_56:
              v26 = *a2;
              goto LABEL_52;
            }
            v26 = 32;
          }
          else
          {
            v27 = v25 - 24;
            if (v25 - 8216 > 0x22)
              goto LABEL_38;
            if (((1 << v27) & 0x60000000FLL) != 0)
              goto LABEL_51;
            if (((1 << v27) & 0xF0) == 0)
            {
LABEL_38:
              if (v25 == 1523)
                goto LABEL_51;
              if (v25 != 1524)
                goto LABEL_56;
            }
          }
        }
        else
        {
          if (*a2 <= 0xFE40u)
          {
            if (v25 - 12300 >= 4)
            {
              if (v25 - 12317 < 3 || v25 == 11842)
                goto LABEL_52;
              goto LABEL_56;
            }
            goto LABEL_51;
          }
          if (*a2 <= 0xFF01u)
          {
            if (v25 - 65089 >= 4)
              goto LABEL_56;
LABEL_51:
            v26 = 39;
            goto LABEL_52;
          }
          if (v25 - 65378 < 2)
            goto LABEL_51;
          if (v25 != 65282)
          {
            if (v25 != 65287)
              goto LABEL_56;
            goto LABEL_51;
          }
        }
LABEL_52:
        if (!v22)
          goto LABEL_71;
        *(_WORD *)(*(_QWORD *)(a1 + 112) + v23) = v26;
        v23 += 2;
        ++a2;
        --v22;
        --v13;
        if (!--v24)
          return v14;
      }
    }
    v28 = 2 * v11;
    v29 = v14;
    while (v13)
    {
      v30 = *(unsigned __int8 *)a2;
      if (v30 == 187)
        v31 = 34;
      else
        v31 = *(unsigned __int8 *)a2;
      if (v30 == 171)
        v31 = 34;
      if (v30 == 160)
        v32 = 32;
      else
        v32 = v31;
      if (!v22)
        goto LABEL_71;
      *(_WORD *)(*(_QWORD *)(a1 + 112) + v28) = v32;
      v28 += 2;
      a2 = (unsigned __int16 *)((char *)a2 + 1);
      --v22;
      --v13;
      if (!--v29)
        return v14;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x195B2BA24);
  }
  return v14;
}

uint64_t WebCore::SearchBuffer::search(WebCore::SearchBuffer *this, unint64_t *a2)
{
  WebCore::SearchBuffer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  signed int MatchedLength;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  char v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isSmallKanaLetter;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t NextWordFromIndex;
  char *v53;
  WebCore::SearchBuffer *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _WORD *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  BOOL v63;
  int v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  WebCore::SearchBuffer *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;

  v3 = this;
  v4 = *((unsigned int *)this + 31);
  if (*((_BYTE *)this + 144))
  {
    if (!(_DWORD)v4)
      return 0;
  }
  else if ((_DWORD)v4 != *((_DWORD *)this + 30))
  {
    return 0;
  }
  v5 = WebCore::searcher(this);
  usearch_setText();
  usearch_setOffset();
  result = usearch_next();
  if ((result & 0x80000000) != 0)
    return 0;
  v69 = a2;
  v70 = v3;
  v71 = (uint64_t)v3 + 168;
  while (1)
  {
    if (v4 <= result)
      return 0;
    v7 = result;
    if (!*((_BYTE *)v3 + 144))
    {
      v8 = *((_QWORD *)v3 + 16);
      v9 = v4 - v8;
      if (v4 - v8 <= result)
      {
        v58 = (_WORD *)*((_QWORD *)v3 + 14);
        if ((*((_WORD *)v3 + 52) & 2) != 0)
        {
          v59 = result - 1;
          if ((_DWORD)result != 1
            && (v58[v59] & 0xFC00) == 0xDC00
            && (v58[(result - 2)] & 0xFC00) == 0xD800)
          {
            v59 = result - 2;
          }
          if (*((_DWORD *)v3 + 31) < v59)
          {
LABEL_161:
            __break(1u);
            return result;
          }
          if (v59)
          {
            v60 = v59;
            while (1)
            {
              v61 = v60 - 1;
              if (v60 - 1 >= v59)
                goto LABEL_161;
              result = (unsigned __int16)v58[v61];
              if ((result & 0xFC00) == 0xDC00 && v60 != 1)
              {
                if (v60 - 2 >= v59)
                  goto LABEL_161;
                v62 = (unsigned __int16)v58[v60 - 2];
                v63 = (v62 & 0xFC00) == 55296;
                v64 = result - 56613888 + (v62 << 10);
                if (v63)
                  v61 = v60 - 2;
                if (v63)
                  LODWORD(result) = v64;
              }
              result = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
              if (result <= 0x25 && ((1 << result) & 0x2001004000) != 0)
              {
                v60 = v61;
                if (v61)
                  continue;
              }
              v58 = (_WORD *)*((_QWORD *)v3 + 14);
              goto LABEL_152;
            }
          }
          v60 = 0;
LABEL_152:
          v66 = v4 - v60;
          if (v8 > v66)
            v66 = v8;
          if (v66 >= v4 - 1)
            v8 = v4 - 1;
          else
            v8 = v66;
          v9 = v4 - v8;
        }
        memcpy(v58, &v58[v4 - v8], 2 * v8);
        v11 = 0;
        v67 = *((_QWORD *)v3 + 17);
        v29 = v67 >= v9;
        v68 = v67 - v9;
        if (!v29)
          v68 = 0;
        *((_QWORD *)v3 + 17) = v68;
        *((_DWORD *)v3 + 31) = v8;
        return v11;
      }
    }
    MatchedLength = usearch_getMatchedLength();
    v11 = MatchedLength;
    v72 = MatchedLength;
    if (*((_BYTE *)v3 + 146))
    {
      WebCore::normalizeCharacters(*((_QWORD *)v3 + 14) + 2 * v7, MatchedLength, v71);
      v12 = (unsigned __int16 *)*((_QWORD *)v3 + 19);
      v13 = &v12[*((unsigned int *)v3 + 41)];
      v14 = (unsigned __int16 *)*((_QWORD *)v3 + 21);
      v15 = &v14[*((unsigned int *)v3 + 45)];
      while (1)
      {
        if (v12 == v13)
        {
          v17 = 1;
          v12 = v13;
          v11 = v72;
        }
        else
        {
          v11 = v72;
          while (1)
          {
            v16 = *v12;
            if (v16 >> 4 == 799
              || (unsigned __int16)(v16 - 12353) < 0x56u
              || (unsigned __int16)(v16 - 12449) < 0x5Au
              || v16 != 65392 && (unsigned __int16)(v16 + 154) < 0x38u)
            {
              break;
            }
            if (++v12 == v13)
            {
              v17 = 1;
              v12 = v13;
              goto LABEL_23;
            }
          }
          v17 = 0;
        }
LABEL_23:
        if (v14 == v15)
          break;
        v18 = v14;
        while (1)
        {
          v19 = *v18;
          if (v19 >> 4 == 799
            || (unsigned __int16)(v19 - 12353) < 0x56u
            || (unsigned __int16)(v19 - 12449) < 0x5Au
            || v19 != 65392 && (unsigned __int16)(v19 + 154) < 0x38u)
          {
            break;
          }
          if (++v18 == v15)
            goto LABEL_51;
        }
        if ((v17 & 1) != 0)
          break;
        v20 = *v12;
        v21 = v7;
        v22 = v5;
        v23 = v4;
        isSmallKanaLetter = WebCore::isSmallKanaLetter(v20);
        v37 = isSmallKanaLetter == WebCore::isSmallKanaLetter(v19);
        v4 = v23;
        v5 = v22;
        v7 = v21;
        v3 = v70;
        if (v37)
        {
          v25 = WebCore::composedVoicedSoundMark(v20);
          if (v25 == WebCore::composedVoicedSoundMark(v19))
          {
            v26 = 1;
            while (1)
            {
              v14 = &v18[v26];
              if (&v12[v26] == v13)
              {
                v12 = v13;
                goto LABEL_48;
              }
              v27 = v12[v26];
              if ((v27 - 12441) >= 2)
                break;
              if (v14 != v15)
              {
                v28 = *v14;
                ++v26;
                v29 = v27 != v28 || (v28 - 12441) >= 2;
                if (!v29)
                  continue;
              }
              goto LABEL_119;
            }
            v12 = (unsigned __int16 *)((char *)v12 + v26 * 2);
LABEL_48:
            if (v14 == v15 || *v14 - 12441 >= 2)
              continue;
          }
        }
        goto LABEL_119;
      }
    }
LABEL_51:
    v30 = *((_WORD *)v3 + 52);
    if ((v30 & 2) != 0)
    {
      if (!(_DWORD)v7)
        goto LABEL_116;
      v31 = *((_DWORD *)v3 + 31);
      v32 = *((_QWORD *)v3 + 14);
      v33 = *(unsigned __int16 *)(v32 + 2 * v7);
      if ((v33 & 0xF800) == 0xD800)
      {
        if ((v33 & 0x400) != 0)
        {
          v39 = *(unsigned __int16 *)(v32 + 2 * (v7 - 1));
          v37 = (v39 & 0xFC00) == 55296;
          v38 = v33 + (v39 << 10);
LABEL_61:
          v40 = v38 - 56613888;
          if (v37)
            v35 = v40;
          else
            v35 = *(unsigned __int16 *)(v32 + 2 * v7);
          if ((v30 & 4) == 0)
            goto LABEL_111;
          goto LABEL_65;
        }
        v34 = (int)v7 + 1;
        v35 = *(unsigned __int16 *)(v32 + 2 * v7);
        if ((_DWORD)v34 != v31)
        {
          v36 = *(unsigned __int16 *)(v32 + 2 * v34);
          v37 = (v36 & 0xFC00) == 56320;
          v38 = v36 + (v33 << 10);
          goto LABEL_61;
        }
      }
      else
      {
        v35 = *(unsigned __int16 *)(v32 + 2 * v7);
      }
      if ((v30 & 4) == 0)
        goto LABEL_111;
LABEL_65:
      v41 = *(unsigned __int16 *)(v32 + 2 * (v7 - 1));
      if ((int)v7 >= 2 && (v41 & 0xFC00) == 0xDC00)
      {
        v42 = *(unsigned __int16 *)(v32 + 2 * (v7 - 2));
        v37 = (v42 & 0xFC00) == 55296;
        v43 = v41 + (v42 << 10) - 56613888;
        if (v37)
          v41 = v43;
      }
      if (v35 > 0xFF)
      {
        if (((1 << u_charType(v35)) & 0x3FF97000) == 0)
          goto LABEL_94;
      }
      else if (!WebCore::isSeparator(char32_t)::latin1SeparatorTable[v35])
      {
        if (v35 - 65 <= 0x19)
        {
          if (v41 - 65 > 0x19)
            goto LABEL_116;
          v44 = (int)v7 + 1;
          if ((v33 & 0xFC00) == 0xD800 && (_DWORD)v44 != v31 && (*(_WORD *)(v32 + 2 * v44) & 0xFC00) == 0xDC00)
            LODWORD(v44) = v7 + 2;
          if ((int)v44 >= v31)
          {
            v45 = 0u;
            goto LABEL_110;
          }
          v45 = *(unsigned __int16 *)(v32 + 2 * (int)v44);
          if ((v45 & 0xF800) != 0xD800)
            goto LABEL_107;
          if ((v45 & 0x400) != 0)
          {
            if ((int)v44 >= 1)
            {
              v50 = *(unsigned __int16 *)(v32 + 2 * (v44 - 1));
              if ((v50 & 0xFC00) == 0xD800)
              {
                v48 = v45 + (v50 << 10);
                goto LABEL_106;
              }
            }
          }
          else
          {
            v46 = (int)v44 + 1;
            if ((_DWORD)v46 != v31)
            {
              v47 = *(unsigned __int16 *)(v32 + 2 * v46);
              if ((v47 & 0xFC00) == 0xDC00)
              {
                v48 = v47 + (v45 << 10);
LABEL_106:
                v45 = v48 - 56613888;
              }
            }
          }
LABEL_107:
          if (v45 - 65 < 0x1A || v45 - 48 < 0xA)
            goto LABEL_111;
          if (v45 <= 0xFF)
          {
LABEL_110:
            if (WebCore::isSeparator(char32_t)::latin1SeparatorTable[v45])
              goto LABEL_111;
LABEL_116:
            v30 = *((_WORD *)v3 + 52);
            v11 = v72;
            goto LABEL_117;
          }
          goto LABEL_89;
        }
        if (v35 - 48 <= 9)
        {
          if (v41 - 48 >= 0xA)
            goto LABEL_116;
          goto LABEL_111;
        }
LABEL_94:
        if (v41 > 0xFF)
        {
          if (((1 << u_charType(v41)) & 0x3FF97000) == 0)
            goto LABEL_111;
        }
        else
        {
          if (WebCore::isSeparator(char32_t)::latin1SeparatorTable[v41])
            v49 = 0;
          else
            v49 = v41 - 48 >= 0xA;
          if (v49)
            goto LABEL_111;
        }
        goto LABEL_116;
      }
      if (v41 <= 0xFF)
      {
        if (!WebCore::isSeparator(char32_t)::latin1SeparatorTable[v41])
          goto LABEL_116;
LABEL_111:
        if (!WebCore::FontCascade::isCJKIdeographOrSymbol(v35))
        {
          v51 = v72 + v7;
          if (v72 + v7 > v7)
          {
            NextWordFromIndex = v72 + v7;
            do
            {
              NextWordFromIndex = WebCore::findNextWordFromIndex(*((unsigned __int8 **)v3 + 14), *((unsigned int *)v3 + 31), NextWordFromIndex, 0);
              v51 = (int)NextWordFromIndex;
            }
            while ((int)NextWordFromIndex > v7);
          }
          if (v51 != v7)
            goto LABEL_119;
        }
        goto LABEL_116;
      }
      v45 = v41;
LABEL_89:
      if (((1 << u_charType(v45)) & 0x3FF97000) == 0)
        goto LABEL_116;
      goto LABEL_111;
    }
LABEL_117:
    v53 = (char *)*((_QWORD *)v3 + 14);
    if ((v30 & 0x80) == 0)
    {
      v54 = v3;
      goto LABEL_124;
    }
    v73 = 0;
    WebCore::findWordBoundary((uint64_t)v53, *((unsigned int *)v3 + 31), v11 + v7 - 1, &v74, &v73);
    if (v11 + v7 == v73)
      break;
LABEL_119:
    result = usearch_next();
    if ((result & 0x80000000) != 0)
      return 0;
  }
  v53 = (char *)*((_QWORD *)v3 + 14);
  v54 = v3;
  v11 = v72;
LABEL_124:
  v55 = (v7 + 1);
  memmove(v53, &v53[2 * v7 + 2], 2 * (v4 - v55));
  v56 = *((_QWORD *)v54 + 17);
  v29 = v56 >= v55;
  v57 = v56 - v55;
  if (!v29)
    v57 = 0;
  *((_QWORD *)v54 + 17) = v57;
  *((_DWORD *)v54 + 31) = v4 - v55;
  *v69 = v4 - v7;
  return v11;
}

unsigned int *WebCore::TextManipulationController::startObservingParagraphs(unsigned int *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  void *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  void *v23;
  WebCore::Node *v24;
  int v25;
  char v26;
  WebCore::Node *v27;
  int v28;
  char v29;

  v3 = *((_QWORD *)result + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = result;
      *(_DWORD *)(v4 + 24) += 2;
      v7 = *a2;
      *a2 = 0;
      v8 = *((_QWORD *)result + 11);
      *((_QWORD *)v6 + 11) = v7;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = v6[31];
      v10 = (WTF *)*((_QWORD *)v6 + 14);
      if ((_DWORD)v9)
      {
        v11 = 32 * v9;
        v12 = (_DWORD *)((char *)v10 + 24);
        do
        {
          v13 = *v12;
          if ((_DWORD)v13 != -1)
            ((void (*)(WebCore::Node **, _DWORD *))off_1E33ADFD0[v13])(&v27, v12 - 4);
          *v12 = -1;
          v12 += 8;
          v11 -= 32;
        }
        while (v11);
        v10 = (WTF *)*((_QWORD *)v6 + 14);
      }
      if (v10)
      {
        *((_QWORD *)v6 + 14) = 0;
        v6[30] = 0;
        WTF::fastFree(v10, a2);
      }
      v14 = *a3;
      *a3 = 0;
      *((_QWORD *)v6 + 14) = v14;
      LODWORD(v14) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = 0;
      v6[30] = v14;
      LODWORD(v14) = *((_DWORD *)a3 + 3);
      *((_DWORD *)a3 + 3) = 0;
      v6[31] = v14;
      v15 = *(_WORD *)(v4 + 28);
      v16 = *(_DWORD *)(v4 + 24);
      v27 = (WebCore::Node *)v4;
      v28 = 0;
      v17 = v29 & 0xF0;
      if ((v15 & 1) == 0)
        v17 = v29 & 0xF0 | 3;
      v29 = v17;
      *(_DWORD *)(v4 + 24) = v16 + 4;
      if ((v15 & 1) != 0)
      {
        v19 = *(_QWORD *)(v4 + 80);
        if (v19)
          LODWORD(v19) = *(_DWORD *)(v19 + 4);
        v24 = (WebCore::Node *)v4;
        v25 = v19;
        v18 = v26 & 0xF0;
      }
      else
      {
        v24 = (WebCore::Node *)v4;
        v25 = 0;
        v18 = v26 & 0xF0 | 4;
      }
      v26 = v18;
      WebCore::TextManipulationController::observeParagraphs(v6, (const WebCore::Position *)&v27, (const WebCore::Position *)&v24);
      v21 = v24;
      v24 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v20);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      v22 = v27;
      v27 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v20);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      result = WebCore::TextManipulationController::flushPendingItemsForCallback(v6);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v4, v23);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::TextManipulationController::observeParagraphs(unsigned int *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const WTF::StringImpl *v7;
  WTF::String *v8;
  __n128 v9;
  BOOL v10;
  WebCore::Node *v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  WebCore::Node *v33;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::Node *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int i;
  uint64_t v50;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  WTF::StringBuilder *v56;
  __n128 v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  _DWORD *v73;
  unsigned int *v74;
  unsigned int v75;
  _DWORD *v76;
  WTF::StringImpl *v77;
  void *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  WTF **v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  _DWORD *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  WebCore::AccessibilityObject *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  BOOL v120;
  unsigned int v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  WebCore::AccessibilityObject *v129;
  uint64_t v130;
  int v131;
  void *v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  WTF *v137;
  unsigned int *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  WTF::StringImpl **v144;
  unsigned int v145;
  void *v146;
  void *v147;
  char *v148;
  WebCore::Node *v149;
  WTF *v150;
  WTF *v151;
  WebCore::Node *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  int v157;
  unsigned int *v158;
  WebCore::Node *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  unsigned int v166;
  void *v167;
  void *v168;
  WTF *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  WTF::StringImpl **v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  WTF *v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  _BOOL4 v186;
  WTF *v187;
  uint64_t v188;
  WTF *__src;
  WTF::StringImpl *v190;
  uint64_t v191;
  WebCore::Node *v192;
  WTF *v193;
  uint64_t v194;
  int v195;
  char v196;
  unsigned int *v197;
  _DWORD *v198;
  uint64_t v199[2];
  int32x2_t v200[32];
  WebCore::Node *v201;
  WebCore::Node *v202;
  uint64_t v203;
  unsigned int v204;
  unsigned __int8 v205;
  WebCore::Node *v206;
  WTF::StringImpl *v207;
  uint64_t IdentifierInternal;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  char v213;
  char v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return this;
  v4 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3 || (*(_BYTE *)(v3 + 22) & 8) == 0 || (*(_BYTE *)(v4 + 22) & 8) == 0)
    return this;
  v5 = (uint64_t)this;
  this = *(unsigned int **)(*(_QWORD *)(v3 + 40) + 8);
  if (this)
    this[6] += 2;
  if (this == *(unsigned int **)(*(_QWORD *)(v4 + 40) + 8))
  {
    v184 = this;
    v206 = 0;
    v207 = 0;
    WebCore::ParagraphContentIterator::ParagraphContentIterator((WebCore::ParagraphContentIterator *)v200, a2, a3);
    v10 = v205 == 0;
    v11 = v201;
    if (!v205 && v201 == v202)
    {
      v12 = 0;
      v13 = 0;
LABEL_11:
      IdentifierInternal = (uint64_t)v206;
      v209 = v207;
      v192 = 0;
      v206 = 0;
      v193 = 0;
      v207 = 0;
      WebCore::TextManipulationController::addItemIfPossible((unsigned int *)v5, (unsigned int *)&IdentifierInternal);
      WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&IdentifierInternal, v14);
      WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v15);
      WebCore::ParagraphContentIterator::~ParagraphContentIterator((WebCore::ParagraphContentIterator *)v200, v16);
      if (v12)
      {
        v181 = 8 * v12;
        v182 = v13;
        do
        {
          v183 = *(_QWORD *)v182;
          *(_QWORD *)v182 = 0;
          if (v183)
          {
            if (*(_DWORD *)(v183 + 24) == 2)
            {
              if ((*(_WORD *)(v183 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v183, v17);
            }
            else
            {
              *(_DWORD *)(v183 + 24) -= 2;
            }
          }
          v182 = (WTF *)((char *)v182 + 8);
          v181 -= 8;
        }
        while (v181);
      }
      if (v13)
        WTF::fastFree(v13, v17);
      WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v206, v17);
      this = v184;
      goto LABEL_15;
    }
    v13 = 0;
    v185 = 0;
    v12 = 0;
    while (1)
    {
      if (v11)
        *((_DWORD *)v11 + 6) += 2;
      if (!v10 && v204)
      {
        if ((unint64_t)v204 >> 29)
        {
LABEL_444:
          __break(0xC471u);
          JUMPOUT(0x195B2DBA4);
        }
        v18 = v204;
        v176 = WTF::fastMalloc((WTF *)(8 * v204));
        v187 = (WTF *)v176;
        if (v204)
        {
          v177 = 0;
          v178 = v203;
          v179 = 8 * v204;
          do
          {
            v180 = *(_DWORD **)(v178 + v177);
            if (v180)
              *v180 += 2;
            *(_QWORD *)(v176 + v177) = v180;
            v177 += 8;
          }
          while (v179 != v177);
        }
      }
      else
      {
        v18 = 0;
        v187 = 0;
      }
      v188 = v18;
      __src = v13;
      v19 = v205;
      if (!v11)
        break;
      v20 = *((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL;
      if (v20)
      {
        v21 = *(_DWORD *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        *(_DWORD *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v21 + 1;
        if (v21 == -1)
          goto LABEL_444;
        v186 = (*(_BYTE *)(v20 + 52) & 7) == 3;
        if ((*(_BYTE *)(v20 + 52) & 7) == 3)
          v19 = 0;
        *(_DWORD *)(v20 + 16) = v21;
      }
      else
      {
        v186 = 0;
      }
      v23 = (uint64_t)v11 + 28;
      v22 = *((_WORD *)v11 + 14);
      *((_DWORD *)v11 + 6) += 2;
      if ((v22 & 8) == 0 || (*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_40;
      v24 = *(_QWORD *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 24);
        v26 = v25 + 2;
        *(_DWORD *)(v24 + 24) = v25 + 2;
        if (*(_BYTE *)(v24 + 193))
        {
          v27 = *(_WORD *)(v24 + 28);
          IdentifierInternal = v24;
          LODWORD(v209) = 0;
          v28 = BYTE4(v209) & 0xF0;
          if ((v27 & 1) == 0)
            v28 = BYTE4(v209) & 0xF0 | 3;
          BYTE4(v209) = v28;
          *(_DWORD *)(v24 + 24) = v25 + 6;
          if ((v27 & 1) != 0)
          {
            v38 = *(_QWORD *)(v24 + 80);
            if (v38)
              LODWORD(v38) = *(_DWORD *)(v38 + 4);
            v192 = (WebCore::Node *)v24;
            LODWORD(v193) = v38;
            v29 = BYTE4(v193) & 0xF0;
          }
          else
          {
            v192 = (WebCore::Node *)v24;
            LODWORD(v193) = 0;
            v29 = BYTE4(v193) & 0xF0 | 4;
          }
          BYTE4(v193) = v29;
          WebCore::TextManipulationController::observeParagraphs((WebCore::TextManipulationController *)v5, (const WebCore::Position *)&IdentifierInternal, (const WebCore::Position *)&v192);
          v39 = v192;
          v192 = 0;
          if (v39)
          {
            if (*((_DWORD *)v39 + 6) == 2)
            {
              if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v39, v6);
            }
            else
            {
              *((_DWORD *)v39 + 6) -= 2;
            }
          }
          v40 = IdentifierInternal;
          IdentifierInternal = 0;
          if (v40)
          {
            if (*(_DWORD *)(v40 + 24) == 2)
            {
              if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v40, v6);
            }
            else
            {
              *(_DWORD *)(v40 + 24) -= 2;
            }
          }
          v26 = *(_DWORD *)(v24 + 24);
        }
        if (v26 == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24, v6);
        }
        else
        {
          *(_DWORD *)(v24 + 24) = v26 - 2;
        }
      }
      v13 = __src;
      if (v12)
      {
        do
        {
LABEL_41:
          v30 = v12 - 1;
          if (v11)
          {
            v31 = *((_QWORD *)v13 + v30);
            if ((WebCore::Node *)v31 == v11)
              break;
            v32 = *(_WORD *)(v31 + 28);
            if ((v32 & 0xF000) == 0x9000)
            {
              if (**((_QWORD **)v11 + 5) == v31
                && (*((_WORD *)v11 + 14) & 0xF000) != 0x9000
                && (*((_BYTE *)v11 + 22) & 8) != 0)
              {
                break;
              }
            }
            else if ((v32 & 4) != 0
                   && *(_QWORD *)(v31 + 80)
                   && ((*((unsigned __int8 *)v11 + 22) ^ *(unsigned __int8 *)(v31 + 22)) & 8) == 0)
            {
              v33 = v11;
              do
                v33 = (WebCore::Node *)*((_QWORD *)v33 + 4);
              while (v33 != (WebCore::Node *)v31 && v33 != 0);
              if (v33)
                break;
            }
          }
          IdentifierInternal = (uint64_t)v206;
          v209 = v207;
          v192 = 0;
          v206 = 0;
          v193 = 0;
          v207 = 0;
          WebCore::TextManipulationController::addItemIfPossible((unsigned int *)v5, (unsigned int *)&IdentifierInternal);
          WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&IdentifierInternal, v35);
          WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v36);
          v37 = *((_QWORD *)v13 + v30);
          *((_QWORD *)v13 + v30) = 0;
          if (v37)
          {
            if (*(_DWORD *)(v37 + 24) == 2)
            {
              if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v37, v6);
            }
            else
            {
              *(_DWORD *)(v37 + 24) -= 2;
            }
          }
          --v12;
        }
        while ((_DWORD)v30);
      }
LABEL_78:
      ++*(_DWORD *)(v5 + 32);
      v41 = *((_QWORD *)v11 + 2);
      v42 = v41 & 0xFFFFFFFFFFFFLL;
      if ((v41 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFLL) + 8))
        {
          v43 = *(_QWORD *)(v5 + 24);
          if (v43)
          {
            v44 = *(_DWORD *)(v43 - 8);
            v45 = (v42 + ~(v41 << 32)) ^ ((unint64_t)(v42 + ~(v41 << 32)) >> 22);
            v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
            v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
            v48 = v44 & ((v47 >> 31) ^ v47);
            for (i = 1; ; ++i)
            {
              v50 = *(_QWORD *)(v43 + 8 * v48);
              if (!v50)
                goto LABEL_88;
              if (v50 != -1 && v50 == v42)
                break;
              v48 = (v48 + i) & v44;
            }
            IdentifierInternal = (uint64_t)v206;
            v209 = v207;
            v192 = 0;
            v206 = 0;
            v193 = 0;
            v207 = 0;
            WebCore::TextManipulationController::addItemIfPossible((unsigned int *)v5, (unsigned int *)&IdentifierInternal);
            WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&IdentifierInternal, v68);
            WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v69);
            goto LABEL_328;
          }
        }
      }
LABEL_88:
      if (v11 && (*(_WORD *)v23 & 8) != 0)
      {
        *((_DWORD *)v11 + 6) += 2;
        if (!v19 && (*((_WORD *)v11 + 14) & 0x10) != 0)
        {
          v52 = *(_QWORD *)(*((_QWORD *)v11 + 12) + 24);
          if (v52 == *(_QWORD *)(WebCore::HTMLNames::titleTag + 24)
            || v52 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            v192 = 0;
            LODWORD(v193) = 0;
            BYTE4(v193) &= 0xF0u;
            v194 = 0;
            v195 = 0;
            v196 &= 0xF0u;
            v53 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v11);
            if (v53)
            {
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 + 1, v53));
            }
            v197 = v53;
            v55 = WebCore::nullName;
            if (WebCore::nullName)
              ++*(_DWORD *)WebCore::nullName;
            v198 = (_DWORD *)v55;
            IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            WebCore::Node::textContent(v11, 0, v56, &v209, v57);
            WebCore::tokenInfo((uint64_t)&v210, v11);
            v214 = 0;
            WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v199, (uint64_t)&IdentifierInternal, 1uLL);
            WebCore::TextManipulationController::addItem(v5, (uint64_t *)&v192);
            WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)&v192, v58);
            if (v213)
            {
              v59 = v212;
              v212 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v59 -= 2;
              }
              v60 = v211;
              v211 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v210;
              v210 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v61 -= 2;
              }
            }
            v62 = v209;
            v209 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2)
                WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v6);
              else
                *(_DWORD *)v62 -= 2;
            }
          }
        }
        v63 = *((_QWORD *)v11 + 13);
        if (v63)
        {
          if ((*(_BYTE *)(v63 + 4) & 8) != 0)
            WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(v11, (unsigned __int8 *)v6, v9, (uint64_t)v7, v8);
          if ((*((_WORD *)v11 + 14) & 0x20) != 0)
            WebCore::SVGElement::synchronizeAllAttributes(v11);
          v64 = *((_QWORD *)v11 + 13);
          if (v64)
          {
            v65 = *(_DWORD *)(v64 + 4);
            if ((v65 & 1) != 0)
            {
              v67 = *(_DWORD *)(v64 + 52);
              if (!v67)
                goto LABEL_160;
              v66 = *(_QWORD *)(v64 + 40);
            }
            else
            {
              if (v65 < 0x20)
                goto LABEL_160;
              v66 = v64 + 32;
              v67 = v65 >> 5;
              if (!(v65 >> 5))
                goto LABEL_160;
            }
            v70 = 0;
            do
            {
              if (byte_1ECE832B9 == 1)
              {
                v71 = (uint64_t *)qword_1ECE832C8;
              }
              else
              {
                v71 = &WebCore::HTMLNames::titleAttr;
                qword_1ECE832C8 = (uint64_t)&WebCore::HTMLNames::titleAttr;
                qword_1ECE832D0 = (uint64_t)&WebCore::HTMLNames::altAttr;
                qword_1ECE832D8 = (uint64_t)&WebCore::HTMLNames::placeholderAttr;
                qword_1ECE832E0 = (uint64_t)&WebCore::HTMLNames::aria_labelAttr;
                qword_1ECE832E8 = (uint64_t)&WebCore::HTMLNames::aria_placeholderAttr;
                qword_1ECE832F0 = (uint64_t)&WebCore::HTMLNames::aria_roledescriptionAttr;
                qword_1ECE832F8 = (uint64_t)&WebCore::HTMLNames::aria_valuetextAttr;
                byte_1ECE832B9 = 1;
              }
              v72 = (_QWORD *)(v66 + 16 * v70);
              v73 = (_DWORD *)*v72;
              if (*v71 == *v72
                || *(_DWORD **)qword_1ECE832D0 == v73
                || *(_DWORD **)qword_1ECE832D8 == v73
                || *(_DWORD **)qword_1ECE832E0 == v73
                || *(_DWORD **)qword_1ECE832E8 == v73
                || *(_DWORD **)qword_1ECE832F0 == v73
                || *(_DWORD **)qword_1ECE832F8 == v73)
              {
                v192 = 0;
                LODWORD(v193) = 0;
                BYTE4(v193) &= 0xF0u;
                v194 = 0;
                v195 = 0;
                v196 &= 0xF0u;
                v74 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v11);
                if (v74)
                {
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 + 1, v74));
                }
                v197 = v74;
                v76 = (_DWORD *)*v72;
                if (*v72)
                  ++*v76;
                v198 = v76;
                IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
                v77 = *(WTF::StringImpl **)(v66 + 16 * v70 + 8);
                if (v77)
                  *(_DWORD *)v77 += 2;
                v209 = v77;
                WebCore::tokenInfo((uint64_t)&v210, v11);
                v214 = 0;
                WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v199, (uint64_t)&IdentifierInternal, 1uLL);
                WebCore::TextManipulationController::addItem(v5, (uint64_t *)&v192);
                WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)&v192, v78);
                if (v213)
                {
                  v79 = v212;
                  v212 = 0;
                  if (v79)
                  {
                    if (*(_DWORD *)v79 == 2)
                      WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v79 -= 2;
                  }
                  v80 = v211;
                  v211 = 0;
                  if (v80)
                  {
                    if (*(_DWORD *)v80 == 2)
                      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v80 -= 2;
                  }
                  v81 = v210;
                  v210 = 0;
                  if (v81)
                  {
                    if (*(_DWORD *)v81 == 2)
                      WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v81 -= 2;
                  }
                }
                v82 = v209;
                v209 = 0;
                if (v82)
                {
                  if (*(_DWORD *)v82 == 2)
                    WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v6);
                  else
                    *(_DWORD *)v82 -= 2;
                }
              }
              v83 = v70 + 1;
              v70 = (v70 + 1);
            }
            while (v67 != v83);
          }
        }
LABEL_160:
        v13 = __src;
        if ((*((_WORD *)v11 + 14) & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v11 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          *((_DWORD *)v11 + 6) += 2;
          if (*(_DWORD *)(*((_QWORD *)v11 + 30) + 12) == 0x8000)
            goto LABEL_178;
          v84 = *((_QWORD *)v11 + 13);
          if (!v84)
            goto LABEL_175;
          v85 = *(unsigned int *)(v84 + 4);
          if ((v85 & 1) != 0)
          {
            v86 = *(_QWORD *)(v84 + 40);
            v87 = *(unsigned int *)(v84 + 52);
            if (!v87)
              goto LABEL_175;
          }
          else
          {
            v86 = v84 + 32;
            v87 = v85 >> 5;
            if (!(v85 >> 5))
            {
LABEL_175:
              v88 = (WTF **)MEMORY[0x1E0CBF2F8];
              goto LABEL_176;
            }
          }
          v88 = (WTF **)(v86 + 8);
          while (1)
          {
            v89 = (uint64_t)*(v88 - 1);
            if (v89 == WebCore::HTMLNames::typeAttr
              || *(_QWORD *)(v89 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
              && *(_QWORD *)(v89 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
            {
              break;
            }
            v88 += 2;
            if (!--v87)
              goto LABEL_175;
          }
LABEL_176:
          if (WTF::equalIgnoringASCIICase(*v88, (const WTF::StringImpl *)WebCore::textAtomData, v7))
          {
LABEL_178:
            if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v11 + 880))(v11)
              && (*((_BYTE *)v11 + 169) & 4) != 0)
            {
              goto LABEL_218;
            }
LABEL_181:
            v192 = 0;
            LODWORD(v193) = 0;
            BYTE4(v193) &= 0xF0u;
            v194 = 0;
            v195 = 0;
            v196 &= 0xF0u;
            v90 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v11);
            if (v90)
            {
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 + 1, v90));
            }
            v197 = v90;
            v92 = WebCore::HTMLNames::valueAttr;
            if (WebCore::HTMLNames::valueAttr)
              ++*(_DWORD *)WebCore::HTMLNames::valueAttr;
            v198 = (_DWORD *)v92;
            IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            v93 = (_DWORD *)*((_QWORD *)v11 + 30);
            if (v93[3] == 64)
            {
              WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v93, &v209);
            }
            else
            {
              v94 = (WTF::StringImpl *)*((_QWORD *)v11 + 27);
              if (v94)
              {
                *(_DWORD *)v94 += 2;
                v209 = v94;
              }
              else
              {
                v95 = *((_QWORD *)v11 + 13);
                if (!v95)
                  goto LABEL_199;
                v96 = *(unsigned int *)(v95 + 4);
                if ((v96 & 1) != 0)
                {
                  v97 = *(_QWORD *)(v95 + 40);
                  v98 = *(unsigned int *)(v95 + 52);
                  if (!v98)
                    goto LABEL_199;
                }
                else
                {
                  v97 = v95 + 32;
                  v98 = v96 >> 5;
                  if (!(v96 >> 5))
                  {
LABEL_199:
                    v99 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                    goto LABEL_200;
                  }
                }
                v99 = (_QWORD *)(v97 + 8);
                while (1)
                {
                  v100 = *(v99 - 1);
                  if (v100 == WebCore::HTMLNames::valueAttr
                    || *(_QWORD *)(v100 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                    && *(_QWORD *)(v100 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                  {
                    break;
                  }
                  v99 += 2;
                  if (!--v98)
                    goto LABEL_199;
                }
LABEL_200:
                if (*v99)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v93 + 296))(v93);
                  if (!v209)
                  {
                    v209 = 0;
                    v93 = (_DWORD *)*((_QWORD *)v11 + 30);
                    goto LABEL_201;
                  }
                }
                else
                {
LABEL_201:
                  (*(void (**)(_DWORD *))(*(_QWORD *)v93 + 64))(v93);
                }
              }
            }
            WebCore::tokenInfo((uint64_t)&v210, v11);
            v214 = 0;
            WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v199, (uint64_t)&IdentifierInternal, 1uLL);
            WebCore::TextManipulationController::addItem(v5, (uint64_t *)&v192);
            WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)&v192, v101);
            if (v213)
            {
              v102 = v212;
              v212 = 0;
              if (v102)
              {
                if (*(_DWORD *)v102 == 2)
                  WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v102 -= 2;
              }
              v103 = v211;
              v211 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                  WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v103 -= 2;
              }
              v104 = v210;
              v210 = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v104 -= 2;
              }
            }
            v105 = v209;
            v209 = 0;
            if (v105)
            {
              if (*(_DWORD *)v105 == 2)
                WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v6);
              else
                *(_DWORD *)v105 -= 2;
            }
          }
          else if ((*(_DWORD *)(*((_QWORD *)v11 + 30) + 12) & 0x14001) != 0)
          {
            goto LABEL_181;
          }
LABEL_218:
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v6);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
        v106 = *((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL;
        if (!v106)
          goto LABEL_309;
        if ((*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B2DBC4);
        }
        ++*(_DWORD *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((*((_WORD *)v11 + 14) & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v11 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
        {
LABEL_303:
          v118 = 1;
          goto LABEL_304;
        }
        v107 = *((_QWORD *)v11 + 13);
        if (!v107)
          goto LABEL_236;
        v108 = *(unsigned int *)(v107 + 4);
        if ((v108 & 1) != 0)
        {
          v109 = *(_QWORD *)(v107 + 40);
          v110 = *(unsigned int *)(v107 + 52);
          if (!v110)
            goto LABEL_236;
        }
        else
        {
          v109 = v107 + 32;
          v110 = v108 >> 5;
          if (!(v108 >> 5))
          {
LABEL_236:
            v111 = (WebCore::AccessibilityObject *)MEMORY[0x1E0CBF2F8];
            goto LABEL_237;
          }
        }
        v111 = (WebCore::AccessibilityObject *)(v109 + 8);
        while (1)
        {
          v112 = *((_QWORD *)v111 - 1);
          if (v112 == WebCore::HTMLNames::roleAttr
            || *(_QWORD *)(v112 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
            && *(_QWORD *)(v112 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
          {
            break;
          }
          v111 = (WebCore::AccessibilityObject *)((char *)v111 + 16);
          if (!--v110)
            goto LABEL_236;
        }
LABEL_237:
        if (WebCore::AccessibilityObject::ariaRoleToWebCoreRole(v111, (const WTF::String *)v6) == 10)
          goto LABEL_303;
        v113 = *(_QWORD *)(v106 + 96);
        v114 = v113 & 0x1F;
        v115 = *((_WORD *)v11 + 14);
        if ((v115 & 0x10) == 0
          || (v116 = *(_QWORD *)(*((_QWORD *)v11 + 12) + 24),
              v117 = *(_QWORD *)(WebCore::HTMLNames::liTag + 24),
              v116 != v117)
          && v116 != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
        {
          if (v114 == 12)
            goto LABEL_303;
          v118 = v115 & 0x10;
          if ((v115 & 0x10) != 0)
            goto LABEL_243;
          goto LABEL_304;
        }
        if ((v113 & 0x1D) == 1)
          goto LABEL_303;
        v121 = ((v113 >> 25) & 7) - 1;
        if (v116 == v117 && v121 < 2)
          goto LABEL_303;
        v123 = *((_QWORD *)v11 + 4);
        if (!v123 || (*(_WORD *)(v123 + 28) & 8) == 0)
        {
LABEL_263:
          if ((*(_BYTE *)(v106 + 123) & 0x40) != 0 || v114 == 12)
            goto LABEL_303;
          v118 = *((_WORD *)v11 + 14) & 0x10;
          if ((*((_WORD *)v11 + 14) & 0x10) != 0)
          {
LABEL_243:
            v119 = *(_QWORD *)(*((_QWORD *)v11 + 12) + 24);
            v120 = v119 == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24) && v114 == 3;
            if (v120
              || v114 == 1
              && (v119 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24)
               || v119 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
               || v119 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
               || v119 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
               || v119 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24)
               || v119 == *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24)))
            {
              goto LABEL_303;
            }
            v118 = 0;
          }
LABEL_304:
          v131 = *(_DWORD *)(v106 + 16);
          v13 = __src;
          if (!v131)
          {
            __break(0xC471u);
            JUMPOUT(0x195B2DBE4);
          }
          *(_DWORD *)(v106 + 16) = v131 - 1;
          if (v118)
          {
            IdentifierInternal = (uint64_t)v206;
            v209 = v207;
            v192 = 0;
            v206 = 0;
            v193 = 0;
            v207 = 0;
            WebCore::TextManipulationController::addItemIfPossible((unsigned int *)v5, (unsigned int *)&IdentifierInternal);
            WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&IdentifierInternal, v132);
            WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v133);
            v134 = v12;
            if (v12 == v185)
            {
              v171 = ((unint64_t)v185 >> 2) + v185;
              if (v171 >= 0x10)
                v172 = v171 + 1;
              else
                v172 = 16;
              if (v172 <= (unint64_t)v12 + 1)
                v135 = v12 + 1;
              else
                v135 = v172;
              if (v135 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195B2DC34);
              }
              v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v135));
              memcpy(v13, __src, 8 * v12);
              if (__src)
              {
                if (v13 == __src)
                {
                  LODWORD(v135) = 0;
                  v13 = 0;
                }
                WTF::fastFree(__src, v6);
              }
              v12 = v185;
            }
            else
            {
              LODWORD(v135) = v185;
            }
            ++v12;
            *((_DWORD *)v11 + 6) += 2;
            *((_QWORD *)v13 + v134) = v11;
            v185 = v135;
          }
LABEL_309:
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v6);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
          goto LABEL_311;
        }
        *(_DWORD *)(v123 + 24) += 2;
        while (2)
        {
          v124 = v123;
          if ((*(_WORD *)(v123 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v123 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::navTag + 24))
          {
LABEL_301:
            if (*(_DWORD *)(v123 + 24) == 2)
            {
              if ((*(_WORD *)(v123 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v123, v6);
            }
            else
            {
              *(_DWORD *)(v123 + 24) -= 2;
            }
            goto LABEL_303;
          }
          v125 = *(_QWORD *)(v123 + 104);
          if (v125)
          {
            v126 = *(unsigned int *)(v125 + 4);
            if ((v126 & 1) != 0)
            {
              v127 = *(_QWORD *)(v125 + 40);
              v128 = *(unsigned int *)(v125 + 52);
              if (!v128)
                goto LABEL_288;
            }
            else
            {
              v127 = v125 + 32;
              v128 = v126 >> 5;
              if (!(v126 >> 5))
                goto LABEL_288;
            }
            v129 = (WebCore::AccessibilityObject *)(v127 + 8);
            while (1)
            {
              v130 = *((_QWORD *)v129 - 1);
              if (v130 == WebCore::HTMLNames::roleAttr
                || *(_QWORD *)(v130 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
                && *(_QWORD *)(v130 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
              {
                break;
              }
              v129 = (WebCore::AccessibilityObject *)((char *)v129 + 16);
              if (!--v128)
                goto LABEL_288;
            }
          }
          else
          {
LABEL_288:
            v129 = (WebCore::AccessibilityObject *)MEMORY[0x1E0CBF2F8];
          }
          if (WebCore::AccessibilityObject::ariaRoleToWebCoreRole(v129, (const WTF::String *)v6) == 60)
            goto LABEL_301;
          v123 = *(_QWORD *)(v123 + 32);
          if (v123)
          {
            if ((*(_WORD *)(v123 + 28) & 8) != 0)
              *(_DWORD *)(v123 + 24) += 2;
            else
              v123 = 0;
          }
          if (*(_DWORD *)(v124 + 24) == 2)
          {
            if ((*(_WORD *)(v124 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v124, v6);
          }
          else
          {
            *(_DWORD *)(v124 + 24) -= 2;
          }
          if (!v123)
            goto LABEL_263;
          continue;
        }
      }
LABEL_311:
      if (!v186)
      {
        if (!v19)
        {
LABEL_328:
          v137 = v187;
          goto LABEL_364;
        }
        *((_DWORD *)v11 + 6) += 2;
        IdentifierInternal = (uint64_t)v11;
        v209 = 0;
        v210 = 0;
        LOWORD(v211) = 1;
        BYTE2(v211) = 0;
        if (v188)
        {
          v142 = v13;
          v143 = 8 * v188;
          v137 = v187;
          v144 = (WTF::StringImpl **)v187;
          do
          {
            if (*v144)
            {
              WebCore::TextManipulationController::parse(v5, &IdentifierInternal, v144, (WebCore::Node **)v11);
            }
            else
            {
              if (!HIDWORD(v210))
                BYTE1(v211) = 1;
              BYTE2(v211) = 1;
            }
            ++v144;
            v143 -= 8;
          }
          while (v143);
          v145 = HIDWORD(v207);
          if (BYTE1(v211))
          {
            v192 = v206;
            v193 = v207;
            v190 = 0;
            v206 = 0;
            v191 = 0;
            v207 = 0;
            WebCore::TextManipulationController::addItemIfPossible((unsigned int *)v5, (unsigned int *)&v192);
            WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v146);
            WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v190, v147);
            v145 = 0;
          }
          v13 = v142;
          if (v145)
            goto LABEL_352;
        }
        else
        {
          v145 = HIDWORD(v207);
          v137 = v187;
          if (HIDWORD(v207))
            goto LABEL_352;
        }
        if ((_BYTE)v211)
        {
LABEL_357:
          v169 = v209;
          if (HIDWORD(v210))
          {
            WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(v209, (WTF::StringImpl *)((char *)v209 + 96 * HIDWORD(v210)));
            v169 = v209;
          }
          if (v169)
          {
            v209 = 0;
            LODWORD(v210) = 0;
            WTF::fastFree(v169, v6);
          }
          v170 = IdentifierInternal;
          IdentifierInternal = 0;
          if (v170)
          {
            if (*(_DWORD *)(v170 + 24) == 2)
            {
              if ((*(_WORD *)(v170 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v170, v6);
            }
            else
            {
              *(_DWORD *)(v170 + 24) -= 2;
            }
          }
LABEL_364:
          if (!v11)
            goto LABEL_367;
          goto LABEL_365;
        }
LABEL_352:
        v157 = BYTE2(v211);
        if (v145 == (_DWORD)v207)
        {
          v158 = WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v206, v145 + 1, (unint64_t)&IdentifierInternal);
          v145 = HIDWORD(v207);
          v159 = v206;
          v160 = (char *)v206 + 32 * HIDWORD(v207);
          v161 = *(_QWORD *)v158;
          *(_QWORD *)v158 = 0;
          *((_QWORD *)v160 + 1) = 0;
          *((_QWORD *)v160 + 2) = 0;
          *(_QWORD *)v160 = v161;
          v162 = *((_QWORD *)v158 + 1);
          *((_QWORD *)v158 + 1) = 0;
          *((_QWORD *)v160 + 1) = v162;
          LODWORD(v162) = v158[4];
          v158[4] = 0;
          *((_DWORD *)v160 + 4) = v162;
          LODWORD(v162) = v158[5];
          v158[5] = 0;
          *((_DWORD *)v160 + 5) = v162;
          LOBYTE(v162) = *((_BYTE *)v158 + 26);
          *((_WORD *)v160 + 12) = *((_WORD *)v158 + 12);
          v160[26] = v162;
        }
        else
        {
          v159 = v206;
          v163 = (char *)v206 + 32 * v145;
          v164 = IdentifierInternal;
          IdentifierInternal = 0;
          *((_QWORD *)v163 + 1) = 0;
          *((_QWORD *)v163 + 2) = 0;
          *(_QWORD *)v163 = v164;
          v165 = v209;
          v209 = 0;
          *((_QWORD *)v163 + 1) = v165;
          LODWORD(v165) = (_DWORD)v210;
          LODWORD(v210) = 0;
          *((_DWORD *)v163 + 4) = (_DWORD)v165;
          LODWORD(v165) = HIDWORD(v210);
          HIDWORD(v210) = 0;
          *((_DWORD *)v163 + 5) = (_DWORD)v165;
          LOWORD(v165) = (_WORD)v211;
          v163[26] = BYTE2(v211);
          *((_WORD *)v163 + 12) = (_WORD)v165;
        }
        v166 = v145 + 1;
        HIDWORD(v207) = v166;
        if (v157)
        {
          v192 = v159;
          v193 = (WTF *)__PAIR64__(v166, v207);
          v190 = 0;
          v206 = 0;
          v191 = 0;
          v207 = 0;
          WebCore::TextManipulationController::addItemIfPossible((unsigned int *)v5, (unsigned int *)&v192);
          WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v167);
          WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v190, v168);
        }
        goto LABEL_357;
      }
      v136 = HIDWORD(v207);
      if (!HIDWORD(v207))
        goto LABEL_328;
      *((_DWORD *)v11 + 6) += 2;
      v192 = v11;
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v209 = v190;
      WebCore::tokenInfo((uint64_t)&v210, v11);
      v214 = 1;
      WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v193, (uint64_t)&IdentifierInternal, 1uLL);
      LOWORD(v195) = 1;
      BYTE2(v195) = 0;
      v137 = v187;
      if ((_DWORD)v136 == (_DWORD)v207)
      {
        v138 = WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v206, v136 + 1, (unint64_t)&v192);
        LODWORD(v136) = HIDWORD(v207);
        v139 = (char *)v206 + 32 * HIDWORD(v207);
        v140 = *(_QWORD *)v138;
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v139 + 1) = 0;
        *((_QWORD *)v139 + 2) = 0;
        *(_QWORD *)v139 = v140;
        v141 = *((_QWORD *)v138 + 1);
        *((_QWORD *)v138 + 1) = 0;
        *((_QWORD *)v139 + 1) = v141;
        LODWORD(v141) = v138[4];
        v138[4] = 0;
        *((_DWORD *)v139 + 4) = v141;
        LODWORD(v141) = v138[5];
        v138[5] = 0;
        *((_DWORD *)v139 + 5) = v141;
        LOBYTE(v141) = *((_BYTE *)v138 + 26);
        *((_WORD *)v139 + 12) = *((_WORD *)v138 + 12);
        v139[26] = v141;
      }
      else
      {
        v148 = (char *)v206 + 32 * v136;
        v149 = v192;
        v192 = 0;
        *((_QWORD *)v148 + 1) = 0;
        *((_QWORD *)v148 + 2) = 0;
        *(_QWORD *)v148 = v149;
        v150 = v193;
        v193 = 0;
        *((_QWORD *)v148 + 1) = v150;
        LODWORD(v150) = v194;
        LODWORD(v194) = 0;
        *((_DWORD *)v148 + 4) = (_DWORD)v150;
        LODWORD(v150) = HIDWORD(v194);
        HIDWORD(v194) = 0;
        *((_DWORD *)v148 + 5) = (_DWORD)v150;
        LOWORD(v150) = v195;
        v148[26] = BYTE2(v195);
        *((_WORD *)v148 + 12) = (_WORD)v150;
      }
      HIDWORD(v207) = v136 + 1;
      if (HIDWORD(v194))
        WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(v193, (WTF *)((char *)v193 + 96 * HIDWORD(v194)));
      v151 = v193;
      if (v193)
      {
        v193 = 0;
        LODWORD(v194) = 0;
        WTF::fastFree(v151, v6);
      }
      v152 = v192;
      v192 = 0;
      if (v152)
      {
        if (*((_DWORD *)v152 + 6) == 2)
        {
          if ((*((_WORD *)v152 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v152, v6);
        }
        else
        {
          *((_DWORD *)v152 + 6) -= 2;
        }
      }
      if (v213)
      {
        v153 = v212;
        v212 = 0;
        if (v153)
        {
          if (*(_DWORD *)v153 == 2)
            WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v153 -= 2;
        }
        v154 = v211;
        v211 = 0;
        if (v154)
        {
          if (*(_DWORD *)v154 == 2)
            WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v154 -= 2;
        }
        v155 = v210;
        v210 = 0;
        if (v155)
        {
          if (*(_DWORD *)v155 == 2)
            WTF::StringImpl::destroy(v155, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v155 -= 2;
        }
      }
      v156 = v209;
      v209 = 0;
      if (v156)
      {
        if (*(_DWORD *)v156 == 2)
          WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v156 -= 2;
      }
LABEL_365:
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v6);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
LABEL_367:
      if (v188)
      {
        v173 = 8 * v188;
        v174 = (WTF::StringImpl **)v137;
        do
        {
          v175 = *v174;
          *v174 = 0;
          if (v175)
          {
            if (*(_DWORD *)v175 == 2)
              WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v175 -= 2;
          }
          ++v174;
          v173 -= 8;
        }
        while (v173);
      }
      if (v137)
      {
        WTF::fastFree(v137, v6);
        if (v11)
        {
LABEL_370:
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v6);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
      }
      else if (v11)
      {
        goto LABEL_370;
      }
      WebCore::ParagraphContentIterator::advance(v200, (WTF::StringImpl *)v6);
      v10 = v205 == 0;
      v11 = v201;
      if (!v205 && v201 == v202)
        goto LABEL_11;
    }
    v186 = 0;
    v23 = 28;
LABEL_40:
    if (v12)
      goto LABEL_41;
    goto LABEL_78;
  }
LABEL_15:
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::TextManipulationController::flushPendingItemsForCallback(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WTF *v9;

  if (this[27])
  {
    v1 = this;
    v2 = *((_QWORD *)this + 2);
    v3 = v2 ? *(_QWORD *)(v2 + 8) : 0;
    *(_DWORD *)(v3 + 24) += 2;
    this = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11), v3, this + 24);
    if (!v1[26])
      goto LABEL_16;
    v5 = v1[27];
    this = (unsigned int *)*((_QWORD *)v1 + 12);
    if ((_DWORD)v5)
    {
      v6 = 48 * v5;
      v7 = this + 8;
      do
      {
        v8 = v7[3];
        if (v8)
          WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*(WTF::StringImpl **)v7, (WTF::StringImpl *)(*(_QWORD *)v7 + 96 * v8));
        v9 = *(WTF **)v7;
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)v7 = 0;
          v7[2] = 0;
          WTF::fastFree(v9, v4);
        }
        v7 += 12;
        v6 -= 48;
      }
      while (v6);
      v1[27] = 0;
      this = (unsigned int *)*((_QWORD *)v1 + 12);
    }
    if (this)
    {
      *((_QWORD *)v1 + 12) = 0;
      v1[26] = 0;
      this = (unsigned int *)WTF::fastFree((WTF *)this, v4);
    }
    if (v3)
    {
LABEL_16:
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::TextManipulationController::parse(uint64_t result, _QWORD *a2, WTF::StringImpl **a3, WebCore::Node **this)
{
  _QWORD *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  WebCore::Node *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  WebCore::Node *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int j;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  WebCore::Node *v41;
  uint64_t v42;
  WebCore::Font *v43;
  CFStringRef v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  char v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  __int16 v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const WTF::StringImpl *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  WTF::StringImpl **v144;
  int v145;
  uint64_t v146;
  WTF::StringImpl **v147;
  WTF *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  WebCore::Node *v158;
  WTF::StringImpl **v160;
  BOOL isProbablyOnlyUsedToRenderIcons;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  WTF::StringImpl *IdentifierInternal;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  unsigned int v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  char v174;
  char v175;
  char v176;
  unsigned __int8 **v177;
  _QWORD *v178;
  WTF::StringImpl **v179;

  v5 = a2;
  v162 = result;
  v177 = (unsigned __int8 **)(result + 112);
  v178 = 0;
  v6 = (WebCore::Node *)this;
  if ((*((_BYTE *)this + 28) & 8) == 0)
  {
    v41 = (WebCore::Node *)this;
    v6 = this[4];
    if (!v6 || (*((_WORD *)v6 + 14) & 8) == 0)
      goto LABEL_65;
  }
  *((_DWORD *)v6 + 6) += 2;
  v7 = v6;
  while (1)
  {
    v8 = *((_DWORD *)v7 + 6) + 2;
    *((_DWORD *)v7 + 6) = v8;
    if (v178)
    {
      v9 = *((_DWORD *)v178 - 2);
      v10 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      for (i = 1; ; ++i)
      {
        v15 = v13;
        v16 = (WebCore::Node *)v178[2 * v13];
        if (v16 != (WebCore::Node *)-1)
        {
          if (!v16)
            goto LABEL_10;
          if (v16 == v7)
            break;
        }
        v13 = (v15 + i) & v9;
      }
      if ((_DWORD)v15 != *((_DWORD *)v178 - 1))
      {
        v18 = (unsigned __int8 *)&v178[2 * v15 + 1];
        goto LABEL_25;
      }
    }
LABEL_10:
    v17 = *((unsigned int *)v177 + 3);
    if ((_DWORD)v17)
      break;
LABEL_16:
    v21 = v8 - 2;
    if (v21)
    {
      *((_DWORD *)v7 + 6) = v21;
    }
    else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
    {
      result = (uint64_t)WebCore::Node::removedLastRef(v7, a2);
    }
    v7 = (WebCore::Node *)*((_QWORD *)v7 + 4);
    if (!v7)
      goto LABEL_23;
    if ((*((_WORD *)v7 + 14) & 8) == 0)
    {
      v7 = 0;
LABEL_23:
      v22 = 1;
      goto LABEL_26;
    }
  }
  v18 = *v177;
  v19 = 32 * v17;
  while (1)
  {
    IdentifierInternal = v7;
    v166 = v7;
    v167 = v7;
    v20 = *((unsigned int *)v18 + 6);
    if ((_DWORD)v20 == -1)
    {
      v157 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::tokenInfo(v157, v158);
    }
    v179 = &IdentifierInternal;
    result = ((uint64_t (*)(WTF::StringImpl ***, unsigned __int8 *))off_1E33ADF68[v20])(&v179, v18 + 8);
    if ((result & 1) != 0)
      break;
    v18 += 32;
    v19 -= 32;
    if (!v19)
    {
      v8 = *((_DWORD *)v7 + 6);
      goto LABEL_16;
    }
  }
LABEL_25:
  v22 = *v18;
LABEL_26:
  v23 = v6;
  do
  {
    *((_DWORD *)v23 + 6) += 2;
    v24 = (uint64_t)v178;
    if (v178
      || (result = WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WebCore::TextManipulationControllerExclusionRule::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash((uint64_t *)&v178, 8u), (v24 = (uint64_t)v178) != 0))
    {
      v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = 0;
    v27 = ((unint64_t)v23 + ~((_QWORD)v23 << 32)) ^ (((unint64_t)v23 + ~((_QWORD)v23 << 32)) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = (v29 >> 31) ^ v29;
    for (j = 1; ; ++j)
    {
      v32 = v30 & v25;
      v33 = v24 + 16 * v32;
      v34 = *(WebCore::Node **)v33;
      if (*(_QWORD *)v33 == -1)
      {
        v26 = v24 + 16 * v32;
        goto LABEL_36;
      }
      if (!v34)
        break;
      if (v34 == v23)
      {
        *(_BYTE *)(v24 + 16 * v32 + 8) = v22;
        goto LABEL_49;
      }
LABEL_36:
      v30 = j + v32;
    }
    if (v26)
    {
      *(_QWORD *)v26 = 0;
      *(_BYTE *)(v26 + 8) = 0;
      --*((_DWORD *)v178 - 4);
      v33 = v26;
    }
    v35 = *((_DWORD *)v23 + 6);
    *(_QWORD *)v33 = v23;
    *((_DWORD *)v23 + 6) = v35 + 2;
    *(_BYTE *)(v33 + 8) = v22;
    v36 = (uint64_t)v178;
    if (v178)
      v37 = *((_DWORD *)v178 - 3) + 1;
    else
      v37 = 1;
    *((_DWORD *)v178 - 3) = v37;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 <= 2 * v38)
      {
LABEL_45:
        v40 = (_DWORD)v39 << (6 * v37 >= (2 * v39));
        goto LABEL_48;
      }
    }
    else if (3 * v39 <= 4 * v38)
    {
      if ((_DWORD)v39)
        goto LABEL_45;
      v40 = 8;
LABEL_48:
      result = WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WebCore::TextManipulationControllerExclusionRule::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash((uint64_t *)&v178, v40);
    }
LABEL_49:
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v23, a2);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
    if (v7 == v23)
      break;
    v23 = (WebCore::Node *)*((_QWORD *)v23 + 4);
    if (!v23)
      break;
  }
  while ((*((_WORD *)v23 + 14) & 8) != 0);
  v41 = (WebCore::Node *)this;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v7, a2);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v6 + 6) != 2)
  {
    *((_DWORD *)v6 + 6) -= 2;
    goto LABEL_64;
  }
  if ((*((_WORD *)v6 + 15) & 0x400) != 0)
  {
LABEL_64:
    if (!v22)
    {
LABEL_79:
      isProbablyOnlyUsedToRenderIcons = 1;
      goto LABEL_80;
    }
  }
  else
  {
    result = (uint64_t)WebCore::Node::removedLastRef(v6, a2);
    if (!v22)
      goto LABEL_79;
  }
LABEL_65:
  v42 = *((_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v42)
    goto LABEL_72;
  if ((*(_BYTE *)((*((_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    v42 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
  v43 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v42 + 112) + 32), a2);
  result = *((_QWORD *)v43 + 11);
  if (!result)
    goto LABEL_72;
  v44 = CTFontCopyFamilyName((CTFontRef)result);
  MEMORY[0x19AEA5508](&IdentifierInternal, v44);
  if (v44)
    CFRelease(v44);
  result = (uint64_t)IdentifierInternal;
  if (!IdentifierInternal)
  {
LABEL_72:
    isProbablyOnlyUsedToRenderIcons = 0;
    goto LABEL_80;
  }
  if (!*((_DWORD *)IdentifierInternal + 1))
  {
    isProbablyOnlyUsedToRenderIcons = 0;
    IdentifierInternal = 0;
    goto LABEL_283;
  }
  v46 = *(_QWORD *)(v162 + 72);
  v163 = (uint64_t *)(v162 + 72);
  if (!v46)
    goto LABEL_252;
  v47 = *(_DWORD *)(v46 - 8);
  v48 = *((_DWORD *)IdentifierInternal + 4);
  if (v48 < 0x100)
    v49 = WTF::StringImpl::hashSlowCase(IdentifierInternal);
  else
    v49 = v48 >> 8;
  v133 = 0;
  while (2)
  {
    v134 = v49 & v47;
    v135 = *(WTF **)(v46 + 16 * v134);
    if (v135 == (WTF *)-1)
    {
LABEL_245:
      v49 = ++v133 + v134;
      continue;
    }
    break;
  }
  if (v135)
  {
    if ((WTF::equal(v135, IdentifierInternal, v45) & 1) != 0)
    {
      v138 = v46 + 16 * v134;
      v136 = *v163;
      if (!*v163)
        goto LABEL_251;
      v137 = *(unsigned int *)(v136 - 4);
LABEL_250:
      if (v138 != v136 + 16 * v137)
      {
LABEL_251:
        isProbablyOnlyUsedToRenderIcons = *(_BYTE *)(v138 + 8) != 0;
        goto LABEL_282;
      }
      goto LABEL_252;
    }
    goto LABEL_245;
  }
  v136 = *v163;
  if (*v163)
  {
    v137 = *(unsigned int *)(v136 - 4);
    v138 = v136 + 16 * v137;
    goto LABEL_250;
  }
LABEL_252:
  isProbablyOnlyUsedToRenderIcons = WebCore::Font::isProbablyOnlyUsedToRenderIcons(v43);
  v140 = *v163;
  if (*v163
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v163, 8u), (v140 = *v163) != 0))
  {
    v141 = *(_DWORD *)(v140 - 8);
  }
  else
  {
    v141 = 0;
  }
  v142 = *((_DWORD *)IdentifierInternal + 4);
  if (v142 < 0x100)
    v143 = WTF::StringImpl::hashSlowCase(IdentifierInternal);
  else
    v143 = v142 >> 8;
  v144 = 0;
  v145 = 1;
  while (2)
  {
    v146 = v143 & v141;
    v147 = (WTF::StringImpl **)(v140 + 16 * v146);
    v148 = *v147;
    if (*v147 == (WTF::StringImpl *)-1)
    {
      v144 = (WTF::StringImpl **)(v140 + 16 * v146);
LABEL_264:
      v143 = v145 + v146;
      ++v145;
      continue;
    }
    break;
  }
  if (v148)
  {
    if (WTF::equal(v148, IdentifierInternal, v139))
    {
      *(_BYTE *)(v140 + 16 * v146 + 8) = isProbablyOnlyUsedToRenderIcons;
      goto LABEL_282;
    }
    goto LABEL_264;
  }
  if (v144)
  {
    *v144 = 0;
    v144[1] = 0;
    --*(_DWORD *)(*v163 - 16);
    v147 = v144;
  }
  v149 = IdentifierInternal;
  if (IdentifierInternal)
    *(_DWORD *)IdentifierInternal += 2;
  *v147 = v149;
  *((_BYTE *)v147 + 8) = isProbablyOnlyUsedToRenderIcons;
  v150 = *v163;
  if (*v163)
    v151 = *(_DWORD *)(v150 - 12) + 1;
  else
    v151 = 1;
  *(_DWORD *)(v150 - 12) = v151;
  v152 = *v163;
  if (*v163)
    v153 = *(_DWORD *)(v152 - 12);
  else
    v153 = 0;
  v154 = (*(_DWORD *)(v152 - 16) + v153);
  v155 = *(unsigned int *)(v152 - 4);
  if (v155 > 0x400)
  {
    if (v155 <= 2 * v154)
    {
LABEL_278:
      v156 = (_DWORD)v155 << (6 * *(_DWORD *)(v152 - 12) >= (2 * v155));
      goto LABEL_281;
    }
  }
  else if (3 * v155 <= 4 * v154)
  {
    if ((_DWORD)v155)
      goto LABEL_278;
    v156 = 8;
LABEL_281:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v163, v156);
  }
LABEL_282:
  result = (uint64_t)IdentifierInternal;
  IdentifierInternal = 0;
  if (result)
  {
LABEL_283:
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_80:
  v50 = *a3;
  if (!*a3)
    goto LABEL_217;
  v51 = 0;
  a2 = 0;
  v164 = v5 + 1;
  v160 = a3;
  v52 = -1;
  while (2)
  {
    v53 = *((unsigned int *)v50 + 1);
    if (v51 < v53)
    {
      if (v53 > v51)
      {
        v54 = *((_QWORD *)v50 + 1);
        if ((*((_BYTE *)v50 + 16) & 4) != 0)
          v55 = *(unsigned __int8 *)(v54 + v51);
        else
          v55 = *(unsigned __int16 *)(v54 + 2 * v51);
        if (v55 <= 0xD)
        {
          switch(v55)
          {
            case 9u:
            case 0xCu:
              goto LABEL_175;
            case 0xAu:
            case 0xDu:
              goto LABEL_89;
            default:
              goto LABEL_103;
          }
          goto LABEL_175;
        }
        if (((unsigned __int16)(v55 + 0x2000) >> 8) <= 0x18u)
        {
LABEL_89:
          if (v52 != -1 && (unint64_t)a2 <= v52)
          {
            v56 = v52 + 1;
            if (!(_DWORD)a2 && v53 <= (int)v52 + 1)
            {
              *(_DWORD *)v50 += 2;
              IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
              goto LABEL_94;
            }
            WTF::StringImpl::substring(v50);
            v50 = IdentifierInternal;
            IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            if (v50)
            {
LABEL_94:
              v57 = 0;
              *(_DWORD *)v50 += 2;
            }
            else
            {
              v57 = 1;
            }
            v166 = v50;
            WebCore::tokenInfo((uint64_t)&v167, v41);
            v176 = isProbablyOnlyUsedToRenderIcons;
            v59 = *((unsigned int *)v5 + 5);
            if ((_DWORD)v59 == *((_DWORD *)v5 + 4))
            {
              v60 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v164, v59 + 1, (unint64_t)&IdentifierInternal);
              v61 = (_QWORD *)(v5[1] + 96 * *((unsigned int *)v5 + 5));
              *v61 = *(_QWORD *)v60;
              v62 = *((_QWORD *)v60 + 1);
              *((_QWORD *)v60 + 1) = 0;
              v61[1] = v62;
              std::__optional_copy_assign_base<WebCore::TextManipulationTokenInfo,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(v61 + 2), (uint64_t *)v60 + 2);
              v63 = (char *)(v61 + 11);
              a3 = v160;
              v64 = v60 + 88;
              v41 = (WebCore::Node *)this;
            }
            else
            {
              v66 = *v164;
              v67 = *v164 + 96 * v59;
              *(_QWORD *)v67 = IdentifierInternal;
              v68 = v166;
              v166 = 0;
              *(_BYTE *)(v67 + 16) = 0;
              v69 = v67 + 16;
              *(_QWORD *)(v69 - 8) = v68;
              *(_BYTE *)(v69 + 64) = 0;
              if (v175)
              {
                v70 = v167;
                v167 = 0;
                *(_QWORD *)v69 = v70;
                v71 = v168;
                v168 = 0;
                *(_QWORD *)(v69 + 8) = v71;
                v72 = v169;
                v169 = 0;
                *(_QWORD *)(v69 + 16) = v72;
                v73 = *(_DWORD *)(v69 + 24) & 0xFFFFFFFE | v170 & 1;
                *(_DWORD *)(v69 + 24) = v73;
                v74 = v73 & 0xFFFFFFFD | (2 * ((v170 >> 1) & 1));
                *(_DWORD *)(v69 + 24) = v74;
                v75 = v74 & 0xFFFFFFFB | (4 * ((v170 >> 2) & 1));
                *(_DWORD *)(v69 + 24) = v75;
                v76 = v75 & 0xFFFFFFC7 | (8 * ((v170 >> 3) & 7));
                *(_DWORD *)(v69 + 24) = v76;
                *(_DWORD *)(v69 + 24) = v170 & 0xFFFFFFC0 | v76 & 0x3F;
                *(_OWORD *)(v69 + 28) = v171;
                *(_QWORD *)(v69 + 44) = v172;
                *(_DWORD *)(v69 + 52) = v173;
                v170 &= ~1u;
                *(_BYTE *)(v69 + 56) = v174;
                *(_BYTE *)(v69 + 64) = 1;
              }
              v63 = (char *)(v66 + 96 * v59 + 88);
              v64 = &v176;
            }
            *v63 = *v64;
            ++*((_DWORD *)v5 + 5);
            if (v175)
            {
              v77 = v169;
              v169 = 0;
              if (v77)
              {
                if (*(_DWORD *)v77 == 2)
                  WTF::StringImpl::destroy(v77, v58);
                else
                  *(_DWORD *)v77 -= 2;
              }
              v78 = v168;
              v168 = 0;
              if (v78)
              {
                if (*(_DWORD *)v78 == 2)
                  WTF::StringImpl::destroy(v78, v58);
                else
                  *(_DWORD *)v78 -= 2;
              }
              v79 = v167;
              v167 = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                  WTF::StringImpl::destroy(v79, v58);
                else
                  *(_DWORD *)v79 -= 2;
              }
            }
            v80 = v166;
            v166 = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 != 2)
              {
                *(_DWORD *)v80 -= 2;
                goto LABEL_124;
              }
              WTF::StringImpl::destroy(v80, v58);
              if ((v57 & 1) != 0)
              {
LABEL_127:
                v81 = *a3;
                if (*a3)
                {
                  v82 = *((unsigned int *)v81 + 1);
                  if (v51 < v82)
                  {
                    v83 = v51;
                    while (v82 > v83)
                    {
                      v84 = *((_DWORD *)v81 + 4);
                      v85 = *((_QWORD *)v81 + 1);
                      v86 = (v84 & 4) != 0 ? *(unsigned __int8 *)(v85 + v83) : *(unsigned __int16 *)(v85 + 2 * v83);
                      v87 = v86 > 0x20;
                      v88 = (1 << v86) & 0x100003600;
                      if (v87 || v88 == 0)
                      {
                        v90 = (v84 & 4) != 0 ? *(unsigned __int8 *)(v85 + v83) : *(_WORD *)(v85 + 2 * v83);
                        if (((unsigned __int16)(v90 + 0x2000) >> 8) > 0x18u)
                          break;
                      }
                      ++v51;
                      ++v83;
                      if (v82 == v51)
                      {
                        v51 = *((unsigned int *)v81 + 1);
                        break;
                      }
                    }
                  }
                  if (v56 || v82 > v51)
                  {
                    WTF::StringImpl::substring(*a3);
                    v81 = IdentifierInternal;
                  }
                  else
                  {
                    *(_DWORD *)v81 += 2;
                  }
                }
                if (!*((_DWORD *)v5 + 5) && !*((_BYTE *)v5 + 25))
                  *((_BYTE *)v5 + 25) = 1;
                IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
                if (v81)
                  *(_DWORD *)v81 += 2;
                v166 = v81;
                WebCore::tokenInfo((uint64_t)&v167, v41);
                v176 = 1;
                v92 = *((unsigned int *)v5 + 5);
                if ((_DWORD)v92 == *((_DWORD *)v5 + 4))
                {
                  v93 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v164, v92 + 1, (unint64_t)&IdentifierInternal);
                  v94 = (_QWORD *)(v5[1] + 96 * *((unsigned int *)v5 + 5));
                  *v94 = *(_QWORD *)v93;
                  v95 = *((_QWORD *)v93 + 1);
                  *((_QWORD *)v93 + 1) = 0;
                  v94[1] = v95;
                  std::__optional_copy_assign_base<WebCore::TextManipulationTokenInfo,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(v94 + 2), (uint64_t *)v93 + 2);
                  v96 = (char *)(v94 + 11);
                  a3 = v160;
                  v97 = v93 + 88;
                }
                else
                {
                  v98 = *v164;
                  v99 = *v164 + 96 * v92;
                  *(_QWORD *)v99 = IdentifierInternal;
                  v100 = v166;
                  v166 = 0;
                  *(_BYTE *)(v99 + 16) = 0;
                  v101 = v99 + 16;
                  *(_QWORD *)(v101 - 8) = v100;
                  *(_BYTE *)(v101 + 64) = 0;
                  if (v175)
                  {
                    v102 = v167;
                    v167 = 0;
                    *(_QWORD *)v101 = v102;
                    v103 = v168;
                    v168 = 0;
                    *(_QWORD *)(v101 + 8) = v103;
                    v104 = v169;
                    v169 = 0;
                    *(_QWORD *)(v101 + 16) = v104;
                    v105 = *(_DWORD *)(v101 + 24) & 0xFFFFFFFE | v170 & 1;
                    *(_DWORD *)(v101 + 24) = v105;
                    v106 = v105 & 0xFFFFFFFD | (2 * ((v170 >> 1) & 1));
                    *(_DWORD *)(v101 + 24) = v106;
                    v107 = v106 & 0xFFFFFFFB | (4 * ((v170 >> 2) & 1));
                    *(_DWORD *)(v101 + 24) = v107;
                    v108 = v107 & 0xFFFFFFC7 | (8 * ((v170 >> 3) & 7));
                    *(_DWORD *)(v101 + 24) = v108;
                    *(_DWORD *)(v101 + 24) = v170 & 0xFFFFFFC0 | v108 & 0x3F;
                    *(_OWORD *)(v101 + 28) = v171;
                    *(_QWORD *)(v101 + 44) = v172;
                    *(_DWORD *)(v101 + 52) = v173;
                    v170 &= ~1u;
                    *(_BYTE *)(v101 + 56) = v174;
                    *(_BYTE *)(v101 + 64) = 1;
                  }
                  v96 = (char *)(v98 + 96 * v92 + 88);
                  v97 = &v176;
                }
                *v96 = *v97;
                ++*((_DWORD *)v5 + 5);
                if (v175)
                {
                  v109 = v169;
                  v169 = 0;
                  if (v109)
                  {
                    if (*(_DWORD *)v109 == 2)
                      WTF::StringImpl::destroy(v109, v91);
                    else
                      *(_DWORD *)v109 -= 2;
                  }
                  v110 = v168;
                  v168 = 0;
                  if (v110)
                  {
                    if (*(_DWORD *)v110 == 2)
                      WTF::StringImpl::destroy(v110, v91);
                    else
                      *(_DWORD *)v110 -= 2;
                  }
                  v111 = v167;
                  v167 = 0;
                  if (v111)
                  {
                    if (*(_DWORD *)v111 == 2)
                      WTF::StringImpl::destroy(v111, v91);
                    else
                      *(_DWORD *)v111 -= 2;
                  }
                }
                result = (uint64_t)v166;
                v166 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v91);
                  else
                    *(_DWORD *)result -= 2;
                }
                *((_BYTE *)v5 + 26) = 1;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    result = WTF::StringImpl::destroy(v81, v91);
                  else
                    *(_DWORD *)v81 -= 2;
                }
                a2 = (_QWORD *)v51--;
LABEL_175:
                ++v51;
                v50 = *a3;
                if (!*a3)
                  goto LABEL_217;
                continue;
              }
            }
            else
            {
LABEL_124:
              if ((v57 & 1) != 0)
                goto LABEL_127;
            }
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v58);
            else
              *(_DWORD *)v50 -= 2;
            goto LABEL_127;
          }
          v56 = (int)a2;
          goto LABEL_127;
        }
        v65 = v55 > 0x20 || ((1 << v55) & 0x100003600) == 0;
        if (!v65 || v55 == 160)
          goto LABEL_175;
      }
LABEL_103:
      if (!isProbablyOnlyUsedToRenderIcons)
        *((_BYTE *)v5 + 24) = 0;
      v52 = v51;
      goto LABEL_175;
    }
    break;
  }
  if ((unint64_t)a2 < v53)
  {
    if (!(_DWORD)a2 && v53 <= (int)v51 + 1)
    {
      *(_DWORD *)v50 += 2;
      IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      goto LABEL_195;
    }
    WTF::StringImpl::substring(v50);
    v50 = IdentifierInternal;
    IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (v50)
    {
LABEL_195:
      v112 = 0;
      *(_DWORD *)v50 += 2;
    }
    else
    {
      v112 = 1;
    }
    v166 = v50;
    WebCore::tokenInfo((uint64_t)&v167, v41);
    v176 = isProbablyOnlyUsedToRenderIcons;
    v113 = *((unsigned int *)v5 + 5);
    if ((_DWORD)v113 == *((_DWORD *)v5 + 4))
    {
      v114 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v164, v113 + 1, (unint64_t)&IdentifierInternal);
      v115 = (_QWORD *)(v5[1] + 96 * *((unsigned int *)v5 + 5));
      *v115 = *(_QWORD *)v114;
      v116 = *((_QWORD *)v114 + 1);
      *((_QWORD *)v114 + 1) = 0;
      v115[1] = v116;
      std::__optional_copy_assign_base<WebCore::TextManipulationTokenInfo,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(v115 + 2), (uint64_t *)v114 + 2);
      v117 = (char *)(v115 + 11);
      v118 = v114 + 88;
    }
    else
    {
      v118 = &v176;
      v119 = *v164;
      v120 = *v164 + 96 * v113;
      *(_QWORD *)v120 = IdentifierInternal;
      v121 = v166;
      v166 = 0;
      *(_BYTE *)(v120 + 16) = 0;
      v122 = v120 + 16;
      *(_QWORD *)(v122 - 8) = v121;
      *(_BYTE *)(v122 + 64) = 0;
      if (v175)
      {
        v123 = v167;
        v167 = 0;
        *(_QWORD *)v122 = v123;
        v124 = v168;
        v168 = 0;
        *(_QWORD *)(v122 + 8) = v124;
        v125 = v169;
        v169 = 0;
        *(_QWORD *)(v122 + 16) = v125;
        *(_DWORD *)(v122 + 24) = v170;
        *(_OWORD *)(v122 + 28) = v171;
        *(_QWORD *)(v122 + 44) = v172;
        *(_DWORD *)(v122 + 52) = v173;
        v170 &= ~1u;
        *(_BYTE *)(v122 + 56) = v174;
        *(_BYTE *)(v122 + 64) = 1;
      }
      v117 = (char *)(v119 + 96 * v113 + 88);
    }
    *v117 = *v118;
    ++*((_DWORD *)v5 + 5);
    if (v175)
    {
      v126 = v169;
      v169 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v126 -= 2;
      }
      v127 = v168;
      v168 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2)
          WTF::StringImpl::destroy(v127, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v127 -= 2;
      }
      v128 = v167;
      v167 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
          WTF::StringImpl::destroy(v128, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v128 -= 2;
      }
    }
    result = (uint64_t)v166;
    v166 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v5 + 26) = 0;
    if ((v112 & 1) == 0)
    {
      if (*(_DWORD *)v50 == 2)
        result = WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
LABEL_217:
  v129 = (uint64_t)v178;
  if (v178)
  {
    v130 = *((unsigned int *)v178 - 1);
    if ((_DWORD)v130)
    {
      v131 = v178;
      do
      {
        v132 = *v131;
        if (*v131 != -1)
        {
          *v131 = 0;
          if (v132)
          {
            if (*(_DWORD *)(v132 + 24) == 2)
            {
              if ((*(_WORD *)(v132 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v132, a2);
            }
            else
            {
              *(_DWORD *)(v132 + 24) -= 2;
            }
          }
        }
        v131 += 2;
        --v130;
      }
      while (v130);
    }
    return WTF::fastFree((WTF *)(v129 - 16), a2);
  }
  return result;
}

uint64_t WebCore::tokenInfo(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::Node *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  WebCore::RenderElement *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  signed int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48[2];
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  BOOL v52;
  WTF::StringImpl *v53;

  v2 = this;
  if (!a2)
  {
    *(_BYTE *)this = 0;
    *(_BYTE *)(this + 64) = 0;
    return this;
  }
  *(_OWORD *)v48 = 0uLL;
  v49 = 0;
  WTF::URL::invalidate((WTF::URL *)&v49);
  v52 = 0;
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v6 = *(WTF::StringImpl **)(v5 + 736);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = v49;
  v49 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v50 = *(_OWORD *)(v5 + 744);
  v51 = *(_OWORD *)(v5 + 760);
  v8 = a2;
  if ((*((_BYTE *)a2 + 28) & 8) == 0)
  {
    v8 = (WebCore::Node *)*((_QWORD *)a2 + 4);
    if (!v8)
      goto LABEL_76;
    if ((*((_WORD *)v8 + 14) & 8) == 0)
    {
      v8 = 0;
      goto LABEL_76;
    }
  }
  *((_DWORD *)v8 + 6) += 2;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)v8 + 104))(&v53, v8);
  v9 = v53;
  v53 = 0;
  v48[0] = v9;
  v10 = *((_QWORD *)v8 + 13);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(uint64_t **)(v10 + 40);
      LODWORD(v13) = *(_DWORD *)(v10 + 52);
      if (!(_DWORD)v13)
        goto LABEL_35;
    }
    else
    {
      v12 = (uint64_t *)(v10 + 32);
      LODWORD(v13) = v11 >> 5;
      if (!(v11 >> 5))
        goto LABEL_35;
    }
    v13 = v13;
    while (1)
    {
      v14 = *v12;
      if (*v12 == WebCore::HTMLNames::roleAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
      {
        break;
      }
      v12 += 2;
      if (!--v13)
        goto LABEL_35;
    }
    if ((v11 & 1) != 0)
    {
      v15 = *(_QWORD *)(v10 + 40);
      v16 = *(_DWORD *)(v10 + 52);
      if (v16)
      {
LABEL_22:
        v17 = v16;
        v18 = (WTF::StringImpl **)(v15 + 8);
        while (1)
        {
          v19 = (uint64_t)*(v18 - 1);
          if (v19 == WebCore::HTMLNames::roleAttr
            || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
            && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
          {
            goto LABEL_32;
          }
          v18 += 2;
          if (!--v17)
          {
            v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_32;
          }
        }
      }
    }
    else
    {
      v15 = v10 + 32;
      v16 = v11 >> 5;
      if (v11 >> 5)
        goto LABEL_22;
    }
    v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_32:
    v20 = *v18;
    if (*v18)
      *(_DWORD *)v20 += 2;
    v48[1] = v20;
  }
LABEL_35:
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
  if (!v21)
    goto LABEL_76;
  v22 = *(_QWORD *)(v21 + 8);
  if (!v22)
    goto LABEL_76;
  v23 = (unsigned int *)(v22 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  if (!*(_QWORD *)(v22 + 288) || (v25 = (WebCore::RenderElement *)(*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL)) == 0)
  {
    do
    {
LABEL_74:
      v40 = __ldaxr(v23);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v23));
    if (!v41)
    {
      atomic_store(1u, v23);
      v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = off_1E31FE290;
      *((_QWORD *)v46 + 1) = v23;
      v53 = v46;
      WTF::ensureOnMainThread();
      v47 = v53;
      v53 = 0;
      if (v47)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47 + 8))(v47);
    }
LABEL_76:
    *(_OWORD *)v2 = *(_OWORD *)v48;
    v42 = v49;
    v49 = 0;
    *(_QWORD *)(v2 + 16) = v42;
    v43 = v50;
    *(_OWORD *)(v2 + 24) = v50;
    *(_OWORD *)(v2 + 40) = v51;
    LODWORD(v50) = v43 & 0xFFFFFFFE;
    *(_BYTE *)(v2 + 56) = v52;
    *(_BYTE *)(v2 + 64) = 1;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v8, v4);
          v45 = v49;
          v49 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v44);
            else
              *(_DWORD *)v45 -= 2;
          }
          return 0;
        }
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    v49 = 0;
    return 0;
  }
  if ((*(_BYTE *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    v26 = WebCore::RenderElement::absoluteAnchorRect(v25, 0);
    v28 = v27;
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v22 + 288) + 64) + 832))(*(_QWORD *)(v22 + 288) + 64, 0, 0);
    v30 = (int)v26 >> 6;
    v31 = v26 >> 38;
    v32 = v26 + v28;
    if (__OFADD__((_DWORD)v26, (_DWORD)v28))
      v32 = (v26 >> 31) + 0x7FFFFFFF;
    v33 = -(-v32 >> 6);
    if (v32 >= 0)
      v33 = (v32 + 63) >> 6;
    if (v32 <= 2147483583)
      v34 = v33;
    else
      v34 = 0x1FFFFFF;
    if (!(_DWORD)v28)
      v34 = (int)v26 >> 6;
    v35 = (HIDWORD(v26) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(HIDWORD(v26), HIDWORD(v28)))
      v35 = HIDWORD(v26) + HIDWORD(v28);
    v36 = -(-v35 >> 6);
    if (v35 >= 0)
      v36 = (v35 + 63) >> 6;
    if (v35 <= 2147483583)
      v37 = v36;
    else
      v37 = 0x1FFFFFF;
    if (!HIDWORD(v28))
      v37 = v26 >> 38;
    if ((int)v4 < 1 || SHIDWORD(v4) < 1)
      goto LABEL_72;
    v38 = 0;
    if (v34 <= v30 || v37 <= (int)v31)
      goto LABEL_73;
    v39 = v34 > (int)v29 && v30 < (int)v29 + (int)v4;
    if (v39 && v37 > SHIDWORD(v29))
      v38 = (int)v31 < HIDWORD(v29) + HIDWORD(v4);
    else
LABEL_72:
      v38 = 0;
LABEL_73:
    v52 = v38;
    goto LABEL_74;
  }
  this = 105;
  __break(0xC471u);
  return this;
}

unsigned int *WebCore::TextManipulationController::addItemIfPossible(unsigned int *result, unsigned int *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  WebCore::Node *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  WebCore::Node *v51;
  int v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unsigned int v61;
  WebCore::Node *v62;
  int v63;
  char v64;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v3 = a2;
    v4 = result;
    v5 = *(_QWORD *)a2;
    if (*(_BYTE *)(*(_QWORD *)a2 + 24))
    {
      v6 = (unsigned __int8 *)(v5 + 56);
      v7 = 1;
      while (1)
      {
        v8 = v7;
        if (v2 == v7)
          break;
        v9 = *v6;
        v6 += 32;
        ++v7;
        if (!v9)
        {
          v10 = v8;
          goto LABEL_9;
        }
      }
      v10 = a2[3];
LABEL_9:
      v11 = v8 < v2;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = 32 * v2;
    v13 = v2 - 1;
    do
    {
      v14 = v12;
      v15 = v13;
      if (v13 == -1)
        break;
      v12 -= 32;
      --v13;
    }
    while (*(_BYTE *)(v5 - 8 + v14));
    if (v15 - v10 != -1)
    {
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x195B2F674);
      }
      WebCore::firstPositionInOrBeforeNode(*(_QWORD *)(v5 + 32 * v10), (WebCore::Node *)a2, (uint64_t)&v62);
      if (v15 >= v3[3])
        goto LABEL_61;
      v16 = v15 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)v3 + v14 - 32);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      v48 = v17;
      v49 = (uint64_t)v4;
      if (v10 < v16)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v50 = v3;
        while (v10 < v3[3])
        {
          v21 = *(_QWORD *)v3 + 32 * v10;
          v22 = (_DWORD *)(v21 + 8);
          v23 = *(unsigned int *)(v21 + 20);
          v24 = v23 + v18;
          if (v24 > v19)
          {
            v25 = v19 + (v19 >> 2);
            if (v25 >= 0x10)
              v26 = v25 + 1;
            else
              v26 = 16;
            if (v26 <= v24)
              v26 = v24;
            if (v26 >= 0x2AAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x195B2F66CLL);
            }
            v27 = v16;
            v28 = 96 * v26;
            v29 = WTF::fastMalloc((WTF *)(96 * v26));
            v19 = ((v28 & 0xFFFFFFE0) * (unsigned __int128)0x2AAAAAAAAAAAAABuLL) >> 64;
            WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v20, (WTF::StringImpl *)((char *)v20 + 96 * v18), v29);
            if (v20)
            {
              if ((WTF::StringImpl *)v29 == v20)
              {
                v29 = 0;
                v19 = 0;
              }
              WTF::fastFree(v20, v30);
            }
            v20 = (WTF::StringImpl *)v29;
            v16 = v27;
            LODWORD(v23) = v22[3];
            v3 = v50;
          }
          if ((_DWORD)v23)
          {
            v31 = *(_QWORD *)v22 + 96 * v23;
            v32 = (_BYTE *)(*(_QWORD *)v22 + 72);
            do
            {
              v33 = v32 - 72;
              v34 = (char *)v20 + 96 * v18;
              *(_QWORD *)v34 = *((_QWORD *)v32 - 9);
              v35 = *((_QWORD *)v32 - 8);
              *((_QWORD *)v32 - 8) = 0;
              v34[16] = 0;
              v36 = v34 + 16;
              *((_QWORD *)v36 - 1) = v35;
              v36[64] = 0;
              if (v32[8])
              {
                v37 = *((_QWORD *)v32 - 7);
                *((_QWORD *)v32 - 7) = 0;
                *(_QWORD *)v36 = v37;
                v38 = *((_QWORD *)v32 - 6);
                *((_QWORD *)v32 - 6) = 0;
                *((_QWORD *)v36 + 1) = v38;
                v39 = *((_QWORD *)v32 - 5);
                *((_QWORD *)v32 - 5) = 0;
                *((_QWORD *)v36 + 2) = v39;
                v40 = *((_DWORD *)v36 + 6) & 0xFFFFFFFE | *((_DWORD *)v32 - 8) & 1;
                *((_DWORD *)v36 + 6) = v40;
                v41 = v40 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v32 - 8) >> 1) & 1));
                *((_DWORD *)v36 + 6) = v41;
                v42 = v41 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v32 - 8) >> 2) & 1));
                *((_DWORD *)v36 + 6) = v42;
                v43 = v42 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v32 - 8) >> 3) & 7));
                *((_DWORD *)v36 + 6) = v43;
                *((_DWORD *)v36 + 6) = *((_DWORD *)v32 - 8) & 0xFFFFFFC0 | v43 & 0x3F;
                *(_OWORD *)(v36 + 28) = *(_OWORD *)(v32 - 28);
                *(_QWORD *)(v36 + 44) = *(_QWORD *)(v32 - 12);
                *((_DWORD *)v36 + 13) = *((_DWORD *)v32 - 1);
                *((_DWORD *)v32 - 8) &= ~1u;
                v36[56] = *v32;
                v36[64] = 1;
              }
              *((_BYTE *)v20 + 96 * v18++ + 88) = v32[16];
              v32 += 96;
            }
            while (v33 + 96 != (_BYTE *)v31);
          }
          if (++v10 >= v16)
            goto LABEL_41;
        }
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x195B2F664);
      }
      v20 = 0;
      LODWORD(v19) = 0;
      v18 = 0;
LABEL_41:
      v44 = v62;
      if (v62)
        *((_DWORD *)v62 + 6) += 2;
      v51 = v44;
      v52 = v63;
      v53 = v64;
      if (v48)
        *(_DWORD *)(v48 + 24) += 2;
      v54 = v48;
      v55 = 0;
      v56 = 2;
      v57 = 0;
      v45 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      v58 = v45;
      v59 = v20;
      v60 = v19;
      v61 = v18;
      WebCore::TextManipulationController::addItem(v49, (uint64_t *)&v51);
      WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)&v51, v46);
      if (v48)
      {
        if (*(_DWORD *)(v48 + 24) == 2)
        {
          if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v48, v47);
        }
        else
        {
          *(_DWORD *)(v48 + 24) -= 2;
        }
      }
      result = (unsigned int *)v62;
      v62 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v47);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::TextManipulationController::addItem(uint64_t a1, uint64_t *a2)
{
  uint64_t IdentifierInternal;
  WebCore::Document *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::SecurityOrigin *v9;
  WebCore::SecurityOrigin *v10;
  uint64_t v11;
  const WebCore::SecurityOrigin *v12;
  void *v13;
  uint64_t v14;
  int v15;
  unsigned int *result;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  WTF *v76;
  __int128 v77;
  __int128 v78;
  WTF *v79;
  uint64_t v80;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v5 = *(WebCore::Document **)(*(_QWORD *)(a1 + 16) + 8);
  v6 = *(_QWORD *)(*((_QWORD *)v5 + 66) + 8);
  v77 = *(_OWORD *)(v6 + 32);
  LOBYTE(v78) = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) != v6;
  WebCore::Document::topOrigin(v5, v7);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
    v11 = *(_QWORD *)(v11 + 8);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), v8);
  BYTE1(v78) = !WebCore::SecurityOrigin::isSameSiteAs(v10, v12);
  v79 = 0;
  v80 = 0;
  *((_QWORD *)&v78 + 1) = IdentifierInternal;
  v14 = *((unsigned int *)a2 + 15);
  if ((_DWORD)v14)
  {
    if (v14 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x195B2FC24);
    }
    v15 = 96 * v14;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(96 * v14));
    LODWORD(v14) = (v15 & 0xFFFFFFE0) / 0x60;
    LODWORD(v80) = v14;
    v79 = (WTF *)result;
    LODWORD(v23) = *((_DWORD *)a2 + 15);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v23 = 0;
      do
      {
        v25 = a2[6];
        v27 = *(_QWORD *)(v25 + v24);
        v26 = *(_DWORD **)(v25 + v24 + 8);
        if (v26)
          *v26 += 2;
        v28 = *(unsigned __int8 *)(v25 + v24 + 80);
        if (*(_BYTE *)(v25 + v24 + 80))
        {
          v17 = *(_QWORD *)(v25 + v24 + 16);
          if (v17)
            *(_DWORD *)v17 += 2;
          v18 = *(_DWORD **)(v25 + v24 + 24);
          if (v18)
            *v18 += 2;
          v29 = v25 + v24;
          v19 = *(_DWORD **)(v25 + v24 + 32);
          if (v19)
            *v19 += 2;
          v21 = *(_OWORD *)(v29 + 40);
          v22 = *(_OWORD *)(v29 + 56);
          v20 = *(_BYTE *)(v29 + 72);
        }
        else
        {
          v17 &= 0xFFFFFFFFFFFFFF00;
        }
        v13 = (void *)*(unsigned __int8 *)(v25 + v24 + 88);
        v30 = &result[v24 / 4];
        *(_QWORD *)v30 = v27;
        *((_QWORD *)v30 + 1) = v26;
        *((_BYTE *)v30 + 16) = 0;
        v31 = v21;
        *((_BYTE *)v30 + 80) = 0;
        if (v28)
        {
          *((_QWORD *)v30 + 2) = v17;
          *((_QWORD *)v30 + 3) = v18;
          *((_QWORD *)v30 + 4) = v19;
          *(_OWORD *)(v30 + 10) = v21;
          *(_OWORD *)(v30 + 14) = v22;
          v31 = v21 & 0xFFFFFFFE;
          *((_BYTE *)v30 + 72) = v20;
          *((_BYTE *)v30 + 80) = 1;
          v19 = 0;
          v18 = 0;
          v17 = 0;
        }
        *((_BYTE *)v30 + 88) = (_BYTE)v13;
        ++v23;
        LODWORD(v21) = v31;
        v24 += 96;
      }
      while (v23 < *((unsigned int *)a2 + 15));
      HIDWORD(v80) = v23;
    }
  }
  else
  {
    LODWORD(v23) = 0;
    result = 0;
  }
  v32 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v32 == *(_DWORD *)(a1 + 104))
  {
    v33 = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 96), v32 + 1, (unint64_t)&v77);
    v34 = *(_QWORD *)(a1 + 96) + 48 * *(unsigned int *)(a1 + 108);
    v35 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *(_OWORD *)(v34 + 16) = v35;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 40) = 0;
    v36 = *(_QWORD *)(v33 + 32);
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v34 + 32) = v36;
    LODWORD(v36) = *(_DWORD *)(v33 + 40);
    *(_DWORD *)(v33 + 40) = 0;
    *(_DWORD *)(v34 + 40) = v36;
    LODWORD(v36) = *(_DWORD *)(v33 + 44);
    *(_DWORD *)(v33 + 44) = 0;
    *(_DWORD *)(v34 + 44) = v36;
    v37 = HIDWORD(v80);
    result = (unsigned int *)v79;
    ++*(_DWORD *)(a1 + 108);
    if (v37)
    {
      WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct((WTF::StringImpl *)result, (WTF::StringImpl *)&result[24 * v37]);
      result = (unsigned int *)v79;
    }
    if (result)
    {
      v79 = 0;
      LODWORD(v80) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
  }
  else
  {
    v38 = *(_QWORD *)(a1 + 96) + 48 * v32;
    v39 = v78;
    *(_OWORD *)v38 = v77;
    *(_OWORD *)(v38 + 16) = v39;
    *(_QWORD *)(v38 + 32) = result;
    *(_QWORD *)(v38 + 40) = 0;
    *(_DWORD *)(v38 + 40) = v14;
    *(_DWORD *)(v38 + 44) = v23;
    ++*(_DWORD *)(a1 + 108);
  }
  v41 = (uint64_t *)(a1 + 128);
  v40 = *(_QWORD *)(a1 + 128);
  if (v40
    || (result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TextManipulationController::ManipulationItemData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 128), 8u), (v40 = *v41) != 0))
  {
    v42 = *(_DWORD *)(v40 - 8);
  }
  else
  {
    v42 = 0;
  }
  v43 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
  v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
  v46 = v42 & ((v45 >> 31) ^ v45);
  v47 = (uint64_t *)(v40 + 72 * v46);
  v48 = *v47;
  if (!*v47)
  {
LABEL_42:
    *v47 = IdentifierInternal;
    v52 = *a2;
    *a2 = 0;
    v53 = v47[1];
    v47[1] = v52;
    if (v53)
    {
      if (*(_DWORD *)(v53 + 24) == 2)
      {
        if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v53, v13);
      }
      else
      {
        *(_DWORD *)(v53 + 24) -= 2;
      }
    }
    v54 = *((_DWORD *)a2 + 2);
    *((_BYTE *)v47 + 20) = *((_BYTE *)a2 + 12);
    *((_DWORD *)v47 + 4) = v54;
    v55 = a2[2];
    a2[2] = 0;
    v56 = v47[3];
    v47[3] = v55;
    if (v56)
    {
      if (*(_DWORD *)(v56 + 24) == 2)
      {
        if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v56, v13);
      }
      else
      {
        *(_DWORD *)(v56 + 24) -= 2;
      }
    }
    v57 = *((_DWORD *)a2 + 6);
    *((_BYTE *)v47 + 36) = *((_BYTE *)a2 + 28);
    *((_DWORD *)v47 + 8) = v57;
    v58 = a2[4];
    a2[4] = 0;
    v59 = v47[5];
    v47[5] = v58;
    if (v59)
    {
      do
      {
        v60 = __ldaxr((unsigned int *)v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, (unsigned int *)v59));
      if (!v61)
      {
        atomic_store(1u, (unsigned int *)v59);
        v75 = *(unsigned int *)(v59 + 28);
        if ((_DWORD)v75)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v59 + 16), (WTF::StringImpl *)(*(_QWORD *)(v59 + 16) + 32 * v75));
        v76 = *(WTF **)(v59 + 16);
        if (v76)
        {
          *(_QWORD *)(v59 + 16) = 0;
          *(_DWORD *)(v59 + 24) = 0;
          WTF::fastFree(v76, v13);
        }
        WTF::fastFree((WTF *)v59, v13);
      }
    }
    v62 = a2[5];
    a2[5] = 0;
    v63 = (WTF::StringImpl **)v47[6];
    v47[6] = v62;
    if (v63)
    {
      if (*(_DWORD *)v63 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v63);
        WTF::fastFree(v73, v74);
      }
      else
      {
        --*(_DWORD *)v63;
      }
    }
    v64 = *((_DWORD *)v47 + 17);
    if (v64)
      WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct((WTF::StringImpl *)v47[7], (WTF::StringImpl *)(v47[7] + 96 * v64));
    result = (unsigned int *)v47[7];
    if (result)
    {
      v47[7] = 0;
      *((_DWORD *)v47 + 16) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
    v65 = a2[6];
    a2[6] = 0;
    v47[7] = v65;
    LODWORD(v65) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 0;
    *((_DWORD *)v47 + 16) = v65;
    LODWORD(v65) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = 0;
    *((_DWORD *)v47 + 17) = v65;
    v66 = *v41;
    if (*v41)
      v67 = *(_DWORD *)(v66 - 12) + 1;
    else
      v67 = 1;
    *(_DWORD *)(v66 - 12) = v67;
    v68 = *v41;
    if (*v41)
      v69 = *(_DWORD *)(v68 - 12);
    else
      v69 = 0;
    v70 = (*(_DWORD *)(v68 - 16) + v69);
    v71 = *(unsigned int *)(v68 - 4);
    if (v71 > 0x400)
    {
      if (v71 > 2 * v70)
        goto LABEL_71;
    }
    else
    {
      if (3 * v71 > 4 * v70)
        goto LABEL_71;
      if (!(_DWORD)v71)
      {
        v72 = 8;
        goto LABEL_70;
      }
    }
    v72 = (_DWORD)v71 << (6 * *(_DWORD *)(v68 - 12) >= (2 * v71));
LABEL_70:
    result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TextManipulationController::ManipulationItemData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 128), v72);
    goto LABEL_71;
  }
  v49 = 0;
  v50 = 1;
  while (v48 != IdentifierInternal)
  {
    if (v48 == -1)
      v49 = v47;
    v46 = (v46 + v50) & v42;
    v47 = (uint64_t *)(v40 + 72 * v46);
    v48 = *v47;
    ++v50;
    if (!*v47)
    {
      if (v49)
      {
        *((_OWORD *)v49 + 1) = 0u;
        *((_OWORD *)v49 + 2) = 0u;
        *(_OWORD *)v49 = 0u;
        v51 = WebCore::nullName;
        if (WebCore::nullName)
          ++*(_DWORD *)WebCore::nullName;
        v49[7] = 0;
        v49[8] = 0;
        v49[6] = v51;
        --*(_DWORD *)(*v41 - 16);
        v47 = v49;
      }
      goto LABEL_42;
    }
  }
LABEL_71:
  if (*(_DWORD *)(a1 + 108) >= 0x80u)
    return WebCore::TextManipulationController::flushPendingItemsForCallback((unsigned int *)a1);
  return result;
}

unsigned int *WebCore::ParagraphContentIterator::advance(int32x2_t *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *result;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  if (this[36].i8[0])
  {
    v3 = this[35].u32[1];
    if ((_DWORD)v3)
    {
      v13 = (WTF::StringImpl **)this[34];
      v14 = 8 * v3;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v4 = (WTF *)this[34];
    if (v4)
    {
      this[34] = 0;
      this[35].i32[0] = 0;
      WTF::fastFree(v4, a2);
    }
    this[36].i8[0] = 0;
  }
  result = (unsigned int *)this[32];
  if (result != (unsigned int *)this[33])
  {
    if ((result[7] & 4) != 0 && (v6 = *(int32x2_t *)(result + 20), *(_QWORD *)&v6)
      || (v6 = *(int32x2_t *)(result + 14), *(_QWORD *)&v6))
    {
LABEL_13:
      *(_DWORD *)(*(_QWORD *)&v6 + 24) += 2;
    }
    else
    {
      v7 = this[32];
      while (1)
      {
        v7 = *(int32x2_t *)(*(_QWORD *)&v7 + 32);
        if (!*(_QWORD *)&v7)
          break;
        v6 = *(int32x2_t *)(*(_QWORD *)&v7 + 56);
        if (v6)
          goto LABEL_13;
      }
      v6 = 0;
    }
    this[32] = v6;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
          v6 = this[32];
        }
      }
      else
      {
        result[6] -= 2;
      }
    }
    if (!*(_QWORD *)&v6)
    {
      v8 = this[33];
      if (v8)
        *(_DWORD *)(*(_QWORD *)&v8 + 24) += 2;
      this[32] = v8;
    }
  }
  if (this[12])
  {
    result = (unsigned int *)WebCore::TextIterator::node(this);
    if (!result)
      return WebCore::ParagraphContentIterator::advanceIteratorNodeAndUpdateText(this);
    v10 = result;
    v11 = result[6];
    result[6] = v11 + 2;
    v12 = (unsigned int *)this[32];
    if (v11)
    {
      result[6] = v11;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
    }
    if (v10 == v12)
      return WebCore::ParagraphContentIterator::advanceIteratorNodeAndUpdateText(this);
  }
  return result;
}

uint64_t WebCore::TextManipulationController::didUpdateContentForNode(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  _BYTE v15[24];

  ++*(_DWORD *)(this + 32);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v4 = this;
      v5 = *(_QWORD *)(this + 24);
      if (v5)
      {
        v7 = *(_DWORD *)(v5 - 8);
        v8 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = *(_QWORD *)(v5 + 8 * v11);
          if (!v13)
            break;
          if (v13 != -1 && v13 == v3)
          {
            WebCore::TextManipulationController::scheduleObservationUpdate((WebCore::Document *)this, a2);
            return WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v4 + 40, (uint64_t)a2, (uint64_t)v15);
          }
          v11 = (v11 + i) & v7;
        }
      }
    }
  }
  return this;
}

WebCore::Document *WebCore::TextManipulationController::scheduleObservationUpdate(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WebCore::Document *v11;
  WebCore::Document *v12;

  if (!*((_BYTE *)this + 80))
  {
    v2 = (uint64_t)this;
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      this = *(WebCore::Document **)(v3 + 8);
      if (this)
      {
        *(_BYTE *)(v2 + 80) = 1;
        v4 = WebCore::Document::eventLoop(this, a2);
        v5 = *(_QWORD *)v2;
        if (*(_QWORD *)v2)
          goto LABEL_16;
        v5 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v5 = 1;
        *(_QWORD *)(v5 + 8) = v2;
        v7 = *(unsigned int **)v2;
        *(_QWORD *)v2 = v5;
        if (!v7)
          goto LABEL_16;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v6);
        }
        v5 = *(_QWORD *)v2;
        if (*(_QWORD *)v2)
        {
LABEL_16:
          do
            v10 = __ldaxr((unsigned int *)v5);
          while (__stlxr(v10 + 1, (unsigned int *)v5));
        }
        v11 = (WebCore::Document *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v11 = &off_1E33ADFF8;
        *((_QWORD *)v11 + 1) = v5;
        v12 = v11;
        WebCore::EventLoopTaskGroup::queueTask(v4, 25, (uint64_t *)&v12);
        this = v12;
        v12 = 0;
        if (this)
          return (WebCore::Document *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebCore::TextManipulationController::didAddOrCreateRendererForNode(uint64_t this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = this;
  ++*(_DWORD *)(this + 32);
  v4 = *((_QWORD *)a2 + 2);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v6 = *(_QWORD *)(this + 24);
      if (v6)
      {
        v7 = *(_DWORD *)(v6 - 8);
        v8 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = *(_QWORD *)(v6 + 8 * v11);
          if (!v13)
            break;
          if (v13 != -1 && v13 == v5)
            return this;
          v11 = (v11 + i) & v7;
        }
      }
    }
  }
  WebCore::TextManipulationController::scheduleObservationUpdate((WebCore::Document *)this, a2);
  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0)
    return WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v3 + 56, (uint64_t)a2, (uint64_t)v17);
  this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 368))(a2);
  if (!(_DWORD)this)
    return WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v3 + 56, (uint64_t)a2, (uint64_t)v17);
  v15 = *((_QWORD *)a2 + 14);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      this = WTF::WeakHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)v17, v3 + 56, v16);
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  void *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  char v34;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a2, &v34);
    v8 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v8;
  }
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = a3;
    *(_BYTE *)(v9 + 32) = 0;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v11 & 0xFFFF000000000000 | v9;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v27 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v27)
        {
          v32 = v12;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v27));
          v12 = v32;
        }
        v28 = *(WTF **)(v12 + 16);
        if (v28)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v31 = v12;
          WTF::fastFree(v28, v10);
          v12 = v31;
        }
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  v15 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  do
    v17 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v17 + 1, (unsigned int *)v15));
  v33 = (WTF *)v15;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a2, (uint64_t *)&v33, a1);
  v20 = v33;
  v33 = 0;
  if (!v20)
    goto LABEL_14;
  do
  {
    v21 = __ldaxr((unsigned int *)v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v20));
  if (v22)
  {
LABEL_14:
    if (!v15)
      return result;
    goto LABEL_15;
  }
  atomic_store(1u, (unsigned int *)v20);
  v29 = *((unsigned int *)v20 + 7);
  if ((_DWORD)v29)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v29));
  v30 = (WTF *)*((_QWORD *)v20 + 2);
  if (v30)
  {
    *((_QWORD *)v20 + 2) = 0;
    *((_DWORD *)v20 + 6) = 0;
    WTF::fastFree(v30, v19);
  }
  result = WTF::fastFree(v20, v19);
  if (v15)
  {
    do
    {
LABEL_15:
      v23 = __ldaxr((unsigned int *)v15);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v15));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v15);
      v25 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v25));
      v26 = *(WTF **)(v15 + 16);
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v26, v19);
      }
      return WTF::fastFree((WTF *)v15, v19);
    }
  }
  return result;
}

void WebCore::TextManipulationController::completeManipulation(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  unsigned int v46;
  WTF *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  char *v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  char *v67;
  __int128 v68;
  char *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  char *v89;
  __int128 v90;
  void *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned __int16 v101;
  void *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  WTF *v108;
  void *v109;
  uint64_t v110;
  WTF *v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  BOOL v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  WebCore::MutableStyleProperties *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  WTF::String *v143;
  __n128 v144;
  _DWORD *v145;
  WTF::StringImpl *v146;
  WebCore::MutableStyleProperties *v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  WTF::String *v150;
  __n128 v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  char *v158;
  uint64_t *v159;
  _DWORD *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  WebCore::TextManipulationController::ManipulationItemData *v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  _QWORD *v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char v175;
  uint64_t v176;
  int v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  unsigned int *v185;
  WTF::StringImpl **v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v189 = 0;
  if (!a2[3])
    return;
  v4 = a2;
  v5 = a1;
  v6 = 0;
  v7 = (uint64_t *)(a1 + 128);
  v8 = (char *)&v183 + 8;
  v9 = (char *)&v184 + 8;
  do
  {
    v10 = *(_QWORD *)v4;
    v11 = (uint64_t *)(*(_QWORD *)v4 + 48 * v6);
    v13 = *v11;
    v12 = v11[1];
    v14 = v11[3];
    if (!*v11
      || (v15 = *(_QWORD *)(v5 + 16)) == 0
      || (v16 = *(_QWORD *)(v15 + 8)) == 0
      || (v17 = *(_QWORD *)(v16 + 528)) == 0
      || (v18 = *(_QWORD *)(v17 + 8)) == 0
      || ((v20 = *(_QWORD *)(v18 + 32), v19 = *(_QWORD *)(v18 + 40), v13 == v20) ? (v21 = v12 == v19) : (v21 = 0), !v21))
    {
      *(_QWORD *)&v183 = v13;
      *((_QWORD *)&v183 + 1) = v12;
      *(_QWORD *)&v184 = v14;
      *((_QWORD *)&v184 + 1) = v6;
      LOBYTE(v185) = 0;
LABEL_13:
      v22 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v22 == *(_DWORD *)(a3 + 8))
      {
        v23 = WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v22 + 1, (unint64_t)&v183);
        LODWORD(v22) = *(_DWORD *)(a3 + 12);
        v24 = *(_QWORD *)a3 + 40 * v22;
        v25 = (unsigned int *)*((_QWORD *)v23 + 4);
        v26 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v24 = *(_OWORD *)v23;
      }
      else
      {
        v24 = *(_QWORD *)a3 + 40 * v22;
        v25 = v185;
        v26 = v184;
        *(_OWORD *)v24 = v183;
      }
      *(_OWORD *)(v24 + 16) = v26;
      *(_QWORD *)(v24 + 32) = v25;
      *(_DWORD *)(a3 + 12) = v22 + 1;
      goto LABEL_17;
    }
    if (!v14)
    {
      *(_QWORD *)&v183 = v13;
      *((_QWORD *)&v183 + 1) = v12;
      *(_QWORD *)&v184 = 0;
LABEL_49:
      *((_QWORD *)&v184 + 1) = v6;
      LOBYTE(v185) = 2;
      goto LABEL_13;
    }
    v27 = *v7;
    if (!*v7)
      goto LABEL_48;
    v28 = *(_DWORD *)(v27 - 8);
    v29 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = v28 & ((v31 >> 31) ^ v31);
    v33 = v27 + 72 * v32;
    v34 = *(_QWORD *)v33;
    if (*(_QWORD *)v33 != v14)
    {
      v35 = 1;
      while (v34)
      {
        v32 = (v32 + v35) & v28;
        v33 = v27 + 72 * v32;
        v34 = *(_QWORD *)v33;
        ++v35;
        if (*(_QWORD *)v33 == v14)
          goto LABEL_28;
      }
      v33 = v27 + 72 * *(unsigned int *)(v27 - 4);
    }
LABEL_28:
    if (v33 == v27 + 72 * *(unsigned int *)(v27 - 4))
    {
LABEL_48:
      *(_QWORD *)&v183 = v13;
      *((_QWORD *)&v183 + 1) = v12;
      *(_QWORD *)&v184 = v14;
      goto LABEL_49;
    }
    DWORD2(v183) = 0;
    BYTE12(v183) &= 0xF0u;
    DWORD2(v184) = 0;
    BYTE12(v184) &= 0xF0u;
    v36 = WebCore::nullName;
    if (WebCore::nullName)
      ++*(_DWORD *)WebCore::nullName;
    v174 = *(_DWORD *)v8;
    v175 = v8[4];
    v177 = *(_DWORD *)v9;
    v178 = v9[4];
    *(_QWORD *)&v184 = 0;
    v185 = 0;
    v186 = 0;
    v187 = 0;
    v37 = *(_QWORD *)(v33 + 8);
    v165 = (WebCore::TextManipulationController::ManipulationItemData *)(v33 + 8);
    v173 = 0;
    v176 = 0;
    v179 = 0;
    v180 = v36;
    v181 = 0;
    v188 = 0;
    v182 = 0;
    if (v37)
      *(_DWORD *)(v37 + 24) += 2;
    *(_QWORD *)&v183 = v37;
    *(_DWORD *)v8 = *(_DWORD *)(v33 + 16);
    v8[4] = *(_BYTE *)(v33 + 20);
    v38 = *(_QWORD *)(v33 + 24);
    if (v38)
      *(_DWORD *)(v38 + 24) += 2;
    v166 = v10;
    v164 = v12;
    *(_QWORD *)&v184 = v38;
    *(_DWORD *)v9 = *(_DWORD *)(v33 + 32);
    v9[4] = *(_BYTE *)(v33 + 36);
    v39 = *(unsigned int **)(v33 + 40);
    v169 = (_QWORD *)v33;
    if (v39)
    {
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      v41 = v185;
      v185 = v39;
      if (v41)
      {
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          v110 = v41[7];
          if ((_DWORD)v110)
          {
            v163 = v9;
            v113 = v41;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v41 + 2), (WTF::StringImpl *)(*((_QWORD *)v41 + 2) + 32 * v110));
            v41 = v113;
            v9 = v163;
          }
          v111 = (WTF *)*((_QWORD *)v41 + 2);
          if (v111)
          {
            *((_QWORD *)v41 + 2) = 0;
            v41[6] = 0;
            v162 = v9;
            v112 = v41;
            WTF::fastFree(v111, a2);
            v41 = v112;
            v9 = v162;
          }
          WTF::fastFree((WTF *)v41, a2);
          v33 = (uint64_t)v169;
        }
      }
    }
    else
    {
      v185 = 0;
    }
    v44 = *(WTF::StringImpl ***)(v33 + 48);
    if (v44)
      ++*(_DWORD *)v44;
    v45 = v186;
    v186 = v44;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
        WTF::fastFree(v108, v109);
        v33 = (uint64_t)v169;
      }
      else
      {
        --*(_DWORD *)v45;
      }
    }
    if (v165 != (WebCore::TextManipulationController::ManipulationItemData *)&v183)
    {
      v46 = *(_DWORD *)(v33 + 68);
      v159 = v7;
      v160 = v4;
      v158 = v8;
      v161 = v9;
      if (HIDWORD(v188) <= v46)
      {
        if (v46 > v188)
        {
          if ((_DWORD)v188)
          {
            v47 = v187;
            if (HIDWORD(v188))
            {
              WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(v187, (WTF::StringImpl *)((char *)v187 + 96 * HIDWORD(v188)));
              v33 = (uint64_t)v169;
              HIDWORD(v188) = 0;
              v47 = v187;
            }
            if (v47)
            {
              v187 = 0;
              LODWORD(v188) = 0;
              WTF::fastFree(v47, a2);
              v33 = (uint64_t)v169;
            }
          }
          v48 = *(unsigned int *)(v33 + 68);
          if (v188 < v48)
          {
            if (v48 >= 0x2AAAAAB)
            {
LABEL_234:
              __break(0xC471u);
              JUMPOUT(0x195B31098);
            }
            v49 = v187;
            v167 = (WTF::StringImpl *)((char *)v187 + 96 * HIDWORD(v188));
            v156 = 96 * v48;
            v50 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(96 * v48));
            LODWORD(v188) = (v156 & 0xFFFFFFE0) / 0x60;
            v187 = v50;
            WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v49, v167, (uint64_t)v50);
            v33 = (uint64_t)v169;
            if (v49)
            {
              if (v187 == v49)
              {
                v187 = 0;
                LODWORD(v188) = 0;
              }
              WTF::fastFree(v49, a2);
              v33 = (uint64_t)v169;
            }
          }
        }
        v46 = HIDWORD(v188);
      }
      else
      {
        WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct((WTF::StringImpl *)((char *)v187 + 96 * v46), (WTF::StringImpl *)((char *)v187 + 96 * HIDWORD(v188)));
        v33 = (uint64_t)v169;
        HIDWORD(v188) = v46;
      }
      v51 = *(_QWORD *)(v33 + 56);
      v52 = v187;
      if (v46)
      {
        v157 = v5;
        v53 = 0;
        v54 = v51 + 96 * v46;
        v168 = v54;
        do
        {
          v55 = v51 + v53;
          v56 = (char *)v52 + v53;
          *(_QWORD *)((char *)v52 + v53) = *(_QWORD *)(v51 + v53);
          v57 = *(_DWORD **)(v51 + v53 + 8);
          if (v57)
            *v57 += 2;
          v58 = (WTF::StringImpl *)*((_QWORD *)v56 + 1);
          *((_QWORD *)v56 + 1) = v57;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
            {
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
              v54 = v168;
              v33 = (uint64_t)v169;
            }
            else
            {
              *(_DWORD *)v58 -= 2;
            }
          }
          v59 = (char *)v52 + v53;
          v60 = v51 + v53;
          if (*((unsigned __int8 *)v52 + v53 + 80) == *(unsigned __int8 *)(v55 + 80))
          {
            if (*((_BYTE *)v52 + v53 + 80))
            {
              v61 = *(_DWORD **)(v60 + 16);
              if (v61)
                *v61 += 2;
              v62 = (WTF::StringImpl *)*((_QWORD *)v59 + 2);
              *((_QWORD *)v59 + 2) = v61;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                {
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)a2);
                  v54 = v168;
                  v33 = (uint64_t)v169;
                }
                else
                {
                  *(_DWORD *)v62 -= 2;
                }
              }
              v63 = *(_DWORD **)(v51 + v53 + 24);
              if (v63)
                *v63 += 2;
              v64 = *(WTF::StringImpl **)((char *)v52 + v53 + 24);
              *(_QWORD *)((char *)v52 + v53 + 24) = v63;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                {
                  WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
                  v54 = v168;
                  v33 = (uint64_t)v169;
                }
                else
                {
                  *(_DWORD *)v64 -= 2;
                }
              }
              v65 = *(_DWORD **)(v51 + v53 + 32);
              if (v65)
                *v65 += 2;
              v66 = *(WTF::StringImpl **)((char *)v52 + v53 + 32);
              *(_QWORD *)((char *)v52 + v53 + 32) = v65;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                {
                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)a2);
                  v54 = v168;
                  v33 = (uint64_t)v169;
                }
                else
                {
                  *(_DWORD *)v66 -= 2;
                }
              }
              v67 = (char *)v52 + v53;
              v68 = *(_OWORD *)(v51 + v53 + 40);
              *(_OWORD *)(v67 + 56) = *(_OWORD *)(v51 + v53 + 56);
              *(_OWORD *)(v67 + 40) = v68;
              v67[72] = *(_BYTE *)(v51 + v53 + 72);
            }
          }
          else if (*((_BYTE *)v52 + v53 + 80))
          {
            v69 = (char *)v52 + v53;
            v70 = *(WTF::StringImpl **)((char *)v52 + v53 + 32);
            *(_QWORD *)((char *)v52 + v53 + 32) = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
              {
                WTF::StringImpl::destroy(v70, (WTF::StringImpl *)a2);
                v54 = v168;
                v33 = (uint64_t)v169;
              }
              else
              {
                *(_DWORD *)v70 -= 2;
              }
            }
            v71 = (WTF::StringImpl *)*((_QWORD *)v69 + 3);
            *((_QWORD *)v69 + 3) = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
              {
                WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
                v54 = v168;
                v33 = (uint64_t)v169;
              }
              else
              {
                *(_DWORD *)v71 -= 2;
              }
            }
            v72 = (WTF::StringImpl *)*((_QWORD *)v59 + 2);
            *((_QWORD *)v59 + 2) = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
              {
                WTF::StringImpl::destroy(v72, (WTF::StringImpl *)a2);
                v54 = v168;
                v33 = (uint64_t)v169;
              }
              else
              {
                *(_DWORD *)v72 -= 2;
              }
            }
            v59[80] = 0;
          }
          else
          {
            v73 = *(_DWORD **)(v60 + 16);
            if (v73)
              *v73 += 2;
            *((_QWORD *)v59 + 2) = v73;
            v74 = *(_DWORD **)(v51 + v53 + 24);
            if (v74)
              *v74 += 2;
            *(_QWORD *)((char *)v52 + v53 + 24) = v74;
            v75 = *(_DWORD **)(v51 + v53 + 32);
            if (v75)
              *v75 += 2;
            v76 = (char *)v52 + v53;
            *((_QWORD *)v76 + 4) = v75;
            v77 = *(_OWORD *)(v51 + v53 + 40);
            *(_OWORD *)(v76 + 56) = *(_OWORD *)(v51 + v53 + 56);
            *(_OWORD *)(v76 + 40) = v77;
            v76[72] = *(_BYTE *)(v51 + v53 + 72);
            v59[80] = 1;
          }
          *((_BYTE *)v52 + v53 + 88) = *(_BYTE *)(v55 + 88);
          v53 += 96;
        }
        while (v55 + 96 != v54);
        v51 = *(_QWORD *)(v33 + 56);
        v78 = HIDWORD(v188);
        v52 = v187;
        v5 = v157;
      }
      else
      {
        v78 = 0;
      }
      v79 = *(unsigned int *)(v33 + 68);
      if (v78 != v79)
      {
        v80 = v51 + 96 * v79;
        v81 = 96 * v78;
        do
        {
          v82 = v51 + v81;
          v83 = (char *)v52 + v81;
          *(_QWORD *)((char *)v52 + v81) = *(_QWORD *)(v51 + v81);
          v84 = *(_DWORD **)(v51 + v81 + 8);
          if (v84)
            *v84 += 2;
          *((_QWORD *)v83 + 1) = v84;
          v83[16] = 0;
          v83[80] = 0;
          if (*(_BYTE *)(v82 + 80))
          {
            v85 = *(_DWORD **)(v51 + v81 + 16);
            if (v85)
              *v85 += 2;
            *((_QWORD *)v83 + 2) = v85;
            v86 = *(_DWORD **)(v51 + v81 + 24);
            if (v86)
              *v86 += 2;
            *(_QWORD *)((char *)v52 + v81 + 24) = v86;
            v87 = v51 + v81;
            v88 = *(_DWORD **)(v51 + v81 + 32);
            if (v88)
              *v88 += 2;
            v89 = (char *)v52 + v81;
            *((_QWORD *)v89 + 4) = v88;
            v90 = *(_OWORD *)(v87 + 40);
            *(_OWORD *)(v89 + 56) = *(_OWORD *)(v87 + 56);
            *(_OWORD *)(v89 + 40) = v90;
            v89[72] = *(_BYTE *)(v87 + 72);
            v83[80] = 1;
          }
          *((_BYTE *)v52 + v81 + 88) = *(_BYTE *)(v82 + 88);
          v51 += 96;
          v52 = (WTF::StringImpl *)((char *)v52 + 96);
        }
        while (v82 + 96 != v80);
        LODWORD(v78) = *(_DWORD *)(v33 + 68);
      }
      HIDWORD(v188) = v78;
      v7 = v159;
      v4 = v160;
      v8 = v158;
      v9 = v161;
    }
    WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)&v173, a2);
    v92 = (_QWORD *)*v7;
    if (!*v7)
    {
      v94 = v166;
      v93 = v169;
LABEL_135:
      if (v92 != v93)
      {
        *v93 = -1;
        WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData(v165, v91);
        ++*(_DWORD *)(*v7 - 16);
        v95 = *v7;
        v96 = *v7 ? *(_DWORD *)(v95 - 12) - 1 : -1;
        *(_DWORD *)(v95 - 12) = v96;
        v97 = *v7;
        v94 = v166;
        if (*v7)
        {
          v98 = 6 * *(_DWORD *)(v97 - 12);
          v99 = *(_DWORD *)(v97 - 4);
          if (v98 < v99 && v99 >= 9)
          {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TextManipulationController::ManipulationItemData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, v99 >> 1);
            v94 = v166;
          }
        }
      }
      goto LABEL_146;
    }
    v92 += 9 * *((unsigned int *)v92 - 1);
    v93 = v169;
    v94 = v166;
    if (v92 != v169)
      goto LABEL_135;
LABEL_146:
    v101 = WebCore::TextManipulationController::replace(v5, (unint64_t)&v183, (unsigned __int16 *)(v94 + 48 * v6 + 32), &v189);
    if (v101 >= 0x100u)
    {
      *(_QWORD *)&v170 = v13;
      *((_QWORD *)&v170 + 1) = v164;
      *(_QWORD *)&v171 = v14;
      *((_QWORD *)&v171 + 1) = v6;
      LOBYTE(v172) = v101;
      v103 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v103 == *(_DWORD *)(a3 + 8))
      {
        v104 = WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v103 + 1, (unint64_t)&v170);
        LODWORD(v103) = *(_DWORD *)(a3 + 12);
        v105 = *(_QWORD *)a3 + 40 * v103;
        v106 = *((_QWORD *)v104 + 4);
        v107 = *((_OWORD *)v104 + 1);
        *(_OWORD *)v105 = *(_OWORD *)v104;
      }
      else
      {
        v105 = *(_QWORD *)a3 + 40 * v103;
        v106 = v172;
        v107 = v171;
        *(_OWORD *)v105 = v170;
      }
      *(_OWORD *)(v105 + 16) = v107;
      *(_QWORD *)(v105 + 32) = v106;
      *(_DWORD *)(a3 + 12) = v103 + 1;
    }
    WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)&v183, v102);
LABEL_17:
    ++v6;
  }
  while (v6 < v4[3]);
  v114 = v189;
  if (!v189)
    return;
  if (!*(_DWORD *)(v189 - 12))
    goto LABEL_220;
  v115 = *(_QWORD *)(v5 + 16);
  if (v115)
  {
    v116 = *(_QWORD *)(v115 + 8);
    if (v116)
    {
      *(_DWORD *)(v116 + 24) += 2;
      WebCore::Document::updateLayout(v116, 2u, 0);
      if (*(_DWORD *)(v116 + 24) == 2)
      {
        if ((*(_WORD *)(v116 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v116, a2);
      }
      else
      {
        *(_DWORD *)(v116 + 24) -= 2;
      }
    }
  }
  v114 = v189;
  if (!v189)
  {
    v119 = 0;
    v117 = 0;
LABEL_174:
    v118 = v189 + 8 * v117;
    goto LABEL_175;
  }
  v117 = *(unsigned int *)(v189 - 4);
  v118 = v189 + 8 * v117;
  if (!*(_DWORD *)(v189 - 12))
  {
    v119 = v189 + 8 * v117;
    goto LABEL_174;
  }
  v119 = v189;
  if ((_DWORD)v117)
  {
    v120 = 8 * v117;
    v119 = v189;
    while ((unint64_t)(*(_QWORD *)v119 + 1) <= 1)
    {
      v119 += 8;
      v120 -= 8;
      if (!v120)
      {
        v119 = v118;
        break;
      }
    }
  }
LABEL_175:
  if (v189)
    v121 = v189 + 8 * *(unsigned int *)(v189 - 4);
  else
    v121 = 0;
  if (v121 != v119)
  {
    while (2)
    {
      v122 = *(_QWORD *)v119;
      v123 = *(_DWORD *)(*(_QWORD *)v119 + 24);
      v124 = v123 + 2;
      *(_DWORD *)(v122 + 24) = v123 + 2;
      if ((*(_BYTE *)(v122 + 28) & 0x70) != 0)
      {
        v125 = *(_QWORD *)(v122 + 64) & 0xFFFFFFFFFFFFLL;
        if (v125 && (*(_BYTE *)((*(_QWORD *)(v122 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        {
          v126 = *(_DWORD *)((*(_QWORD *)(v122 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
          *(_DWORD *)((*(_QWORD *)(v122 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v126;
          v127 = *(_QWORD *)(v125 + 192);
          if (v127)
          {
            v130 = *(_QWORD *)(v127 + 20);
            if ((v130 & 0x80000000) != 0)
              goto LABEL_204;
            v131 = *(_QWORD *)(v127 + 28);
            v132 = v130 + v131;
            if (__OFADD__((_DWORD)v130, (_DWORD)v131))
              v132 = 0x7FFFFFFF;
            v133 = *(_QWORD *)(v125 + 160);
            if (v132 > (int)v133 || (v130 & 0x8000000000000000) != 0)
              goto LABEL_204;
            v134 = HIDWORD(v130);
            v135 = HIDWORD(v131);
            v136 = __OFADD__((_DWORD)v134, (_DWORD)v135);
            v137 = v134 + v135;
            if (v136)
              v137 = 0x7FFFFFFF;
            if (v137 > SHIDWORD(v133))
            {
LABEL_204:
              v138 = *(_QWORD *)(v125 + 88);
              v139 = *(_QWORD *)(v138 + 8);
              if (*(_BYTE *)(v139 + 8) == 4
                && *(_BYTE *)(v139 + 16) == 4
                && (*(_QWORD *)(v125 + 96) & 0x180000) != 0x100000
                && ((*(unsigned int *)(*(_QWORD *)(v138 + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(v138 + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(v138 + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
              {
                v140 = WebCore::StyledElement::ensureMutableInlineStyle((WebCore::StyledElement *)v122, (WTF::StringImpl *)a2);
                LODWORD(qword_1ECE8BC58) = qword_1ECE8BC58 + 2;
                *(_QWORD *)&v183 = &WebCore::staticCSSValuePool[3116];
                WebCore::MutableStyleProperties::setProperty(v140, 192, (_DWORD **)&v183, 0);
                v145 = (_DWORD *)v183;
                *(_QWORD *)&v183 = 0;
                if (v145)
                {
                  if (*v145 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v145, v141);
                  else
                    *v145 -= 2;
                }
                WebCore::StyledElement::inlineStyleChanged((WebCore::StyledElement *)v122, (uint64_t)v141, v142, v143, v144);
                v147 = WebCore::StyledElement::ensureMutableInlineStyle((WebCore::StyledElement *)v122, v146);
                WebCore::staticCSSValuePool[4664] += 2;
                *(_QWORD *)&v183 = &WebCore::staticCSSValuePool[4664];
                WebCore::MutableStyleProperties::setProperty(v147, 193, (_DWORD **)&v183, 0);
                v152 = (_DWORD *)v183;
                *(_QWORD *)&v183 = 0;
                if (v152)
                {
                  if (*v152 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v152, v148);
                  else
                    *v152 -= 2;
                }
                WebCore::StyledElement::inlineStyleChanged((WebCore::StyledElement *)v122, (uint64_t)v148, v149, v150, v151);
                v126 = *(_DWORD *)(v125 + 16);
              }
            }
          }
          if (!v126)
            goto LABEL_234;
          *(_DWORD *)(v125 + 16) = v126 - 1;
          v124 = *(_DWORD *)(v122 + 24);
        }
        v128 = v124 - 2;
        if (v128)
        {
          *(_DWORD *)(v122 + 24) = v128;
          goto LABEL_189;
        }
LABEL_211:
        if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v122, a2);
      }
      else
      {
        if (!v123)
          goto LABEL_211;
        *(_DWORD *)(v122 + 24) = v123;
      }
LABEL_189:
      v129 = v119 + 8;
      v119 = v118;
      if (v129 != v118)
      {
        v119 = v129;
        while ((unint64_t)(*(_QWORD *)v119 + 1) <= 1)
        {
          v119 += 8;
          if (v119 == v118)
          {
            v119 = v118;
            break;
          }
        }
      }
      if (v119 == v121)
      {
        v114 = v189;
        break;
      }
      continue;
    }
  }
  if (v114)
  {
LABEL_220:
    v153 = *(unsigned int *)(v114 - 4);
    if ((_DWORD)v153)
    {
      v154 = (uint64_t *)v114;
      do
      {
        v155 = *v154;
        if (*v154 != -1)
        {
          *v154 = 0;
          if (v155)
          {
            if (*(_DWORD *)(v155 + 24) == 2)
            {
              if ((*(_WORD *)(v155 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v155, a2);
            }
            else
            {
              *(_DWORD *)(v155 + 24) -= 2;
            }
          }
        }
        ++v154;
        --v153;
      }
      while (v153);
    }
    WTF::fastFree((WTF *)(v114 - 16), a2);
  }
}

uint64_t WebCore::TextManipulationController::replace(uint64_t a1, unint64_t a2, unsigned __int16 *a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  BOOL v17;
  WebCore::Node *v18;
  uint64_t v19;
  WebCore::Node **v20;
  unsigned __int8 v21;
  int v22;
  unint64_t v23;
  WebCore::Node *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _BOOL4 v29;
  WTF *v30;
  char *v31;
  unsigned int v32;
  WTF *v33;
  _QWORD *v34;
  _QWORD *v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  char *v43;
  __int128 v44;
  unsigned int v45;
  WTF *v46;
  int v47;
  WTF *v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD **v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int16 *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  _BOOL4 v84;
  _DWORD *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  _OWORD *v95;
  int v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  WebCore::Node **v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t i;
  WTF *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v133;
  unint64_t v134;
  WebCore::Node *v135;
  unint64_t v136;
  unsigned __int16 *v137;
  unsigned __int16 *v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl **v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const WTF::StringImpl *v154;
  unint64_t v155;
  WTF *v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  char v161;
  WTF *v162;
  int v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  WTF *v169;
  unint64_t v170;
  unint64_t v171;
  WebCore::Node *v172;
  int v173;
  int v174;
  _DWORD *v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  _BYTE *v200;
  int v201;
  char v202;
  WebCore::Node *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  WTF *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v215;
  WebCore::Node *v216;
  unsigned __int16 v217;
  WebCore::Node *v218;
  WTF *v220;
  unsigned __int16 v221;
  WebCore::Node *v222;
  uint64_t v224;
  unsigned int v225;
  WTF *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  WebCore::Node *v233;
  int v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WebCore::Node *v243;
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t *v247;
  _QWORD *v248;
  WebCore::Node **v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WebCore::Node *v253;
  WebCore::Node *v254;
  WebCore::Node *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  const WebCore::QualifiedName *v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  __int16 v270;
  __int16 v271;
  char *v272;
  char *v273;
  uint64_t v274;
  char *v275;
  WTF::StringImpl *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  WebCore::Node *v280;
  unint64_t v281;
  unint64_t v282;
  int v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  BOOL v287;
  int v288;
  WTF::StringImpl *v289;
  uint64_t v290;
  WebCore::Node *v291;
  WTF *v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  WTF *v297;
  WTF::StringImpl *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  WTF::StringImpl *v307;
  unsigned int v308;
  WTF::StringImpl *v309;
  __n128 v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  int v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  uint64_t v321;
  WTF *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  unint64_t v327;
  WebCore::Position *v328;
  uint64_t *v329;
  unsigned __int16 *v330;
  uint64_t v331;
  WebCore::Node **v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF *v339;
  _BOOL4 v340;
  WebCore::Node *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  unint64_t v347;
  WebCore::Node *v348;
  char v349[8];
  WTF::StringImpl *v350;
  char v351;
  char v352[8];
  WTF::StringImpl *v353;
  char v354;
  uint64_t v355;
  WTF::StringImpl *v356;
  uint64_t v357;
  WTF *v358;
  uint64_t v359;
  uint64_t *v360;
  WTF::StringImpl *v361;
  WTF *v362;
  uint64_t v363;
  __int16 v364;
  char v365;
  WTF *v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  WTF::StringImpl *v371;
  char v372;
  char v373[8];
  WTF::StringImpl *v374;
  char v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  WebCore::Node *v379;
  __int128 buf;
  unsigned int v381;
  char v382;
  WebCore::Node *v383;
  WebCore::Node *v384;
  uint64_t v385;
  unsigned int v386;
  unsigned __int8 v387;
  uint64_t v388;

  v5 = a2;
  v388 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v149 = *(_QWORD *)(a2 + 16);
    if (v149 && (*(_BYTE *)(v149 + 22) & 8) == 0)
      goto LABEL_387;
LABEL_385:
    if (*(_DWORD *)(a2 + 60) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195B338B0);
    }
    v63 = *(_QWORD *)(a2 + 32);
    if (v63)
      goto LABEL_423;
    goto LABEL_387;
  }
  if ((*(_BYTE *)(v7 + 22) & 8) == 0)
    goto LABEL_387;
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    goto LABEL_385;
  if ((*(_BYTE *)(v8 + 22) & 8) == 0)
    goto LABEL_387;
  v10 = *(_BYTE *)(a2 + 12) & 7;
  if (v10 > 4)
    goto LABEL_24;
  if (((1 << v10) & 0x19) == 0)
  {
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
      goto LABEL_24;
  }
  *(_DWORD *)(v7 + 24) += 2;
  v11 = **(_QWORD **)(v7 + 40);
  if (v11)
    v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0;
  else
    v12 = 1;
  if (v12)
    goto LABEL_20;
  v13 = *(_QWORD *)(v11 + 200);
  if (!v13)
    goto LABEL_20;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14
    || (*(_WORD *)(v14 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    goto LABEL_20;
  }
  *(_DWORD *)(v14 + 24) += 2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 880))(v14) && (*(_BYTE *)(v14 + 169) & 4) != 0)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, (void *)a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  else
  {
    v15 = *(_WORD *)(v14 + 230);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, (void *)a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    if ((v15 & 0x100) == 0)
    {
LABEL_20:
      v16 = 1;
      goto LABEL_21;
    }
  }
  v16 = 0;
LABEL_21:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, (void *)a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (!v16)
    goto LABEL_387;
LABEL_24:
  v330 = a3;
  v368 = 0;
  v369 = 0;
  WebCore::ParagraphContentIterator::ParagraphContentIterator((WebCore::ParagraphContentIterator *)&buf, (const WebCore::Position *)v5, (const WebCore::Position *)(v5 + 16));
  v17 = v387 == 0;
  if (!v387 && v383 == v384)
  {
    WebCore::ParagraphContentIterator::~ParagraphContentIterator((WebCore::ParagraphContentIterator *)&buf, (WTF::StringImpl *)a2);
    v19 = 0;
    v20 = 0;
    a3 = 0;
LABEL_27:
    v21 = 1;
    v22 = 1;
    goto LABEL_345;
  }
  v328 = (WebCore::Position *)(v5 + 16);
  v329 = a4;
  v23 = 0;
  v19 = 0;
  v331 = a1;
  v332 = 0;
  a3 = 0;
  v24 = v383;
  v336 = v5;
  while (1)
  {
    if (v24)
      *((_DWORD *)v24 + 6) += 2;
    if (!v17 && v386)
    {
      if ((unint64_t)v386 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195B339A4);
      }
      v338 = v386;
      v337 = WTF::fastMalloc((WTF *)(8 * v386));
      if (v386)
      {
        v121 = 0;
        v122 = v385;
        v123 = 8 * v386;
        do
        {
          v124 = *(_DWORD **)(v122 + v121);
          if (v124)
            *v124 += 2;
          *(_QWORD *)(v337 + v121) = v124;
          v121 += 8;
        }
        while (v123 != v121);
      }
    }
    else
    {
      v337 = 0;
      v338 = 0;
    }
    v25 = v387;
    if (v24)
      break;
    if (v387)
    {
      v29 = 0;
      if (!a3)
        goto LABEL_47;
      goto LABEL_45;
    }
LABEL_63:
    if ((*((_WORD *)v24 + 14) & 4) == 0 || v338 || *((_QWORD *)v24 + 10))
    {
      *((_DWORD *)v24 + 6) += 2;
      if (a3)
      {
        if (*((_DWORD *)a3 + 6) == 2)
        {
          if ((a3[15] & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)a3, (void *)a2);
        }
        else
        {
          *((_DWORD *)a3 + 6) -= 2;
        }
      }
      *((_DWORD *)v24 + 6) += 2;
      v366 = v24;
      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v368, (uint64_t *)&v366, (uint64_t)&v361);
      v46 = v366;
      v366 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46, (void *)a2);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
      v47 = 11;
      goto LABEL_292;
    }
    v47 = 11;
    v48 = (WTF *)v337;
LABEL_294:
    if (v48)
    {
      WTF::fastFree(v48, (void *)a2);
      if (v24)
      {
LABEL_296:
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, (void *)a2);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
    }
    else if (v24)
    {
      goto LABEL_296;
    }
    if (v47 != 11 && v47)
    {
      WebCore::ParagraphContentIterator::~ParagraphContentIterator((WebCore::ParagraphContentIterator *)&buf, (WTF::StringImpl *)a2);
      goto LABEL_344;
    }
    WebCore::ParagraphContentIterator::advance((int32x2_t *)&buf, (WTF::StringImpl *)a2);
    v17 = v387 == 0;
    v24 = v383;
    if (!v387 && v383 == v384)
    {
      WebCore::ParagraphContentIterator::~ParagraphContentIterator((WebCore::ParagraphContentIterator *)&buf, (WTF::StringImpl *)a2);
      if (!v332)
      {
        v20 = 0;
        goto LABEL_27;
      }
      v137 = v330;
      if (!a3)
      {
LABEL_341:
        v139 = qword_1ECE7CBA8;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CBA8, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = a1;
          _os_log_error_impl(&dword_1940B8000, v139, OS_LOG_TYPE_ERROR, "%p - TextManipulationController::replace lastChildOfCommonAncestorInRange is null", (uint8_t *)&buf, 0xCu);
        }
        a3 = 0;
LABEL_344:
        v21 = 1;
        v22 = 1;
        v20 = v332;
LABEL_345:
        v140 = (uint64_t)v368;
        if (v368)
        {
          v141 = *((unsigned int *)v368 - 1);
          if ((_DWORD)v141)
          {
            v142 = v368;
            do
            {
              v143 = *v142;
              if (*v142 != -1)
              {
                *v142 = 0;
                if (v143)
                {
                  if (*(_DWORD *)(v143 + 24) == 2)
                  {
                    if ((*(_WORD *)(v143 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v143, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v143 + 24) -= 2;
                  }
                }
              }
              ++v142;
              --v141;
            }
            while (v141);
          }
          WTF::fastFree((WTF *)(v140 - 16), v18);
        }
        if (a3)
        {
          if (*((_DWORD *)a3 + 6) == 2)
          {
            if ((a3[15] & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)a3, v18);
          }
          else
          {
            *((_DWORD *)a3 + 6) -= 2;
          }
        }
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v18);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v18);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v144 = v369;
        if (v369)
        {
          v145 = *(unsigned int *)(v369 - 4);
          if ((_DWORD)v145)
          {
            v146 = (WTF::StringImpl **)(v369 + 16);
            do
            {
              if (*(v146 - 2) != (WTF::StringImpl *)-1)
              {
                v147 = *v146;
                *v146 = 0;
                if (v147)
                {
                  if (*(_DWORD *)v147 == 2)
                    WTF::StringImpl::destroy(v147, v18);
                  else
                    *(_DWORD *)v147 -= 2;
                }
                v148 = (uint64_t)*(v146 - 1);
                *(v146 - 1) = 0;
                if (v148)
                {
                  if (*(_DWORD *)(v148 + 24) == 2)
                  {
                    if ((*(_WORD *)(v148 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v148, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v148 + 24) -= 2;
                  }
                }
              }
              v146 += 4;
              --v145;
            }
            while (v145);
          }
          WTF::fastFree((WTF *)(v144 - 16), v18);
        }
        return v21 | (v22 << 8);
      }
      v138 = a3;
      while (1)
      {
        a3 = v138;
        v138 = (unsigned __int16 *)*((_QWORD *)v138 + 4);
        if ((unsigned __int16 *)v19 == v138)
          break;
        if (v138)
          *((_DWORD *)v138 + 6) += 2;
        if (*((_DWORD *)a3 + 6) == 2)
        {
          if ((a3[15] & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)a3, v18);
        }
        else
        {
          *((_DWORD *)a3 + 6) -= 2;
        }
        if (!v138)
          goto LABEL_341;
      }
      if (v19)
      {
        *(_DWORD *)(v19 + 24) += 2;
        v151 = v19;
        do
        {
          v152 = v151;
          WTF::HashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>((uint64_t)&v368, v151);
          v151 = *(_QWORD *)(v151 + 32);
          if (v151)
            *(_DWORD *)(v151 + 24) += 2;
          if (*(_DWORD *)(v152 + 24) == 2)
          {
            if ((*(_WORD *)(v152 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v152, v153);
          }
          else
          {
            *(_DWORD *)(v152 + 24) -= 2;
          }
        }
        while (v151);
      }
      v360 = 0;
      v361 = 0;
      v362 = 0;
      WebCore::TextManipulationController::getPath((unsigned int *)&v366, (WebCore::Node *)v19, v332);
      v155 = HIDWORD(v367);
      v156 = v366;
      do
      {
        if (!v155)
        {
          HIDWORD(v367) = 0;
          v358 = 0;
          v359 = 0;
          goto LABEL_487;
        }
        v157 = v155 - 1;
        v158 = *((_QWORD *)v156 + v155 - 1);
        v159 = *(_DWORD *)(v158 + 24) + 2;
        *(_DWORD *)(v158 + 24) = v159;
        if ((*(_BYTE *)(v158 + 28) & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B337D4);
        }
        v160 = *(_QWORD *)(v158 + 80);
        if (v160 && v160 == *(_QWORD *)(v158 + 88))
        {
          v358 = (WTF *)*((_QWORD *)v156 + v157);
          *((_QWORD *)v156 + v157) = 0;
          WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v368, (uint64_t *)&v358, (uint64_t)&buf);
          v162 = v358;
          v358 = 0;
          if (v162)
          {
            if (*((_DWORD *)v162 + 6) == 2)
            {
              if ((*((_WORD *)v162 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v162, v18);
            }
            else
            {
              *((_DWORD *)v162 + 6) -= 2;
            }
          }
          v155 = (v155 - 1);
          v159 = *(_DWORD *)(v158 + 24);
          v161 = 1;
        }
        else
        {
          v161 = 0;
        }
        v163 = v159 - 2;
        if (v163)
        {
          *(_DWORD *)(v158 + 24) = v163;
        }
        else if ((*(_WORD *)(v158 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v158, v18);
        }
      }
      while ((v161 & 1) != 0);
      HIDWORD(v367) = v155;
      v358 = 0;
      v359 = 0;
      if (v155)
      {
        if (!(v155 >> 28))
        {
          v169 = (WTF *)WTF::fastMalloc((WTF *)(16 * v155));
          LODWORD(v359) = v155;
          v358 = v169;
          v170 = v155;
          do
          {
            v171 = *(_QWORD *)v156;
            *(_DWORD *)(v171 + 24) = *(_DWORD *)(*(_QWORD *)v156 + 24) + 4;
            v379 = (WebCore::Node *)v171;
            WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v360, (uint64_t *)&v379, (uint64_t)&buf);
            v172 = v379;
            v379 = 0;
            if (v172)
            {
              if (*((_DWORD *)v172 + 6) == 2)
              {
                if ((*((_WORD *)v172 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v172, v18);
              }
              else
              {
                *((_DWORD *)v172 + 6) -= 2;
              }
            }
            v173 = *(_DWORD *)(v171 + 24);
            *(_DWORD *)(v171 + 24) = v173 + 4;
            *(int64x2_t *)v169 = vdupq_n_s64(v171);
            v174 = v173 + 2;
            if (v174)
            {
              *(_DWORD *)(v171 + 24) = v174;
            }
            else if ((*(_WORD *)(v171 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v171, v18);
            }
            v169 = (WTF *)((char *)v169 + 16);
            v156 = (WTF *)((char *)v156 + 8);
            --v170;
          }
          while (v170);
          HIDWORD(v359) = v155;
          goto LABEL_487;
        }
        __break(0xC471u);
LABEL_924:
        JUMPOUT(0x195B336DCLL);
      }
LABEL_487:
      if (*((_DWORD *)v330 + 3))
      {
        v186 = 0;
        v21 = 1;
        do
        {
          v187 = v369;
          if (!v369)
            goto LABEL_676;
          v188 = *(_QWORD *)v137;
          v189 = *(_QWORD *)(*(_QWORD *)v137 + 96 * v186);
          v190 = *(_DWORD *)(v369 - 8);
          v191 = (v189 + ~(v189 << 32)) ^ ((unint64_t)(v189 + ~(v189 << 32)) >> 22);
          v192 = 9 * ((v191 + ~(v191 << 13)) ^ ((v191 + ~(v191 << 13)) >> 8));
          v193 = (v192 ^ (v192 >> 15)) + ~((v192 ^ (v192 >> 15)) << 27);
          v194 = v190 & ((v193 >> 31) ^ v193);
          v195 = *(_QWORD *)(v369 + 32 * v194);
          if (v195 != v189)
          {
            v196 = 1;
            while (v195)
            {
              v194 = ((_DWORD)v194 + v196) & v190;
              v195 = *(_QWORD *)(v369 + 32 * v194);
              ++v196;
              if (v195 == v189)
                goto LABEL_496;
            }
            v194 = *(unsigned int *)(v369 - 4);
          }
LABEL_496:
          if (v194 == *(_DWORD *)(v369 - 4))
          {
LABEL_676:
            v22 = 1;
            v21 = 3;
LABEL_684:
            v20 = v332;
LABEL_776:
            v292 = v358;
            if (HIDWORD(v359))
            {
              v293 = 16 * HIDWORD(v359);
              v294 = (uint64_t *)((char *)v358 + 8);
              do
              {
                v295 = *v294;
                *v294 = 0;
                if (v295)
                {
                  if (*(_DWORD *)(v295 + 24) == 2)
                  {
                    if ((*(_WORD *)(v295 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v295, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v295 + 24) -= 2;
                  }
                }
                v296 = *(v294 - 1);
                *(v294 - 1) = 0;
                if (v296)
                {
                  if (*(_DWORD *)(v296 + 24) == 2)
                  {
                    if ((*(_WORD *)(v296 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v296, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v296 + 24) -= 2;
                  }
                }
                v294 += 2;
                v293 -= 16;
              }
              while (v293);
            }
            if (v292)
              WTF::fastFree(v292, v18);
            v297 = v366;
            if (HIDWORD(v367))
            {
              v321 = 8 * HIDWORD(v367);
              v322 = v366;
              v20 = v332;
              do
              {
                v323 = *(_QWORD *)v322;
                *(_QWORD *)v322 = 0;
                if (v323)
                {
                  if (*(_DWORD *)(v323 + 24) == 2)
                  {
                    if ((*(_WORD *)(v323 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v323, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v323 + 24) -= 2;
                  }
                }
                v322 = (WTF *)((char *)v322 + 8);
                v321 -= 8;
              }
              while (v321);
            }
            if (v297)
              WTF::fastFree(v297, v18);
            v298 = v361;
            if (HIDWORD(v362))
            {
              v299 = 24 * HIDWORD(v362);
              v300 = (uint64_t *)((char *)v361 + 8);
              do
              {
                v301 = *v300;
                *v300 = 0;
                if (v301)
                {
                  if (*(_DWORD *)(v301 + 24) == 2)
                  {
                    if ((*(_WORD *)(v301 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v301, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v301 + 24) -= 2;
                  }
                }
                v302 = *(v300 - 1);
                *(v300 - 1) = 0;
                if (v302)
                {
                  if (*(_DWORD *)(v302 + 24) == 2)
                  {
                    if ((*(_WORD *)(v302 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v302, v18);
                  }
                  else
                  {
                    *(_DWORD *)(v302 + 24) -= 2;
                  }
                }
                v300 += 3;
                v299 -= 24;
              }
              while (v299);
            }
            if (v298)
              WTF::fastFree(v298, v18);
            v303 = (uint64_t)v360;
            if (v360)
            {
              v304 = *((unsigned int *)v360 - 1);
              if ((_DWORD)v304)
              {
                v305 = v360;
                do
                {
                  v306 = *v305;
                  if (*v305 != -1)
                  {
                    *v305 = 0;
                    if (v306)
                    {
                      if (*(_DWORD *)(v306 + 24) == 2)
                      {
                        if ((*(_WORD *)(v306 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v306, v18);
                      }
                      else
                      {
                        *(_DWORD *)(v306 + 24) -= 2;
                      }
                    }
                  }
                  ++v305;
                  --v304;
                }
                while (v304);
              }
              WTF::fastFree((WTF *)(v303 - 16), v18);
            }
            goto LABEL_345;
          }
          v197 = *(_QWORD *)(v369 + 32 * v194 + 8);
          if (v197)
            *(_DWORD *)(v197 + 24) += 2;
          v198 = *(WTF::StringImpl **)(v188 + 96 * v186 + 8);
          if (v198)
            *(_DWORD *)v198 += 2;
          v199 = v187 + 32 * v194;
          if (*(_BYTE *)(v199 + 24))
          {
            v201 = *(unsigned __int8 *)(v199 + 25);
            v200 = (_BYTE *)(v199 + 25);
            if (v201)
            {
              v202 = 0;
              v21 = 4;
              if (!v198)
                goto LABEL_519;
              goto LABEL_517;
            }
            *v200 = 1;
            if (v198 && !WTF::equal(v198, *(const WTF::StringImpl **)(v187 + 32 * v194 + 16), v154))
            {
              v202 = 0;
              v21 = 4;
LABEL_517:
              if (*(_DWORD *)v198 == 2)
                WTF::StringImpl::destroy(v198, v18);
              else
                *(_DWORD *)v198 -= 2;
              goto LABEL_519;
            }
            v203 = (WebCore::Node *)v19;
            if (v197)
              *(_DWORD *)(v197 + 24) += 2;
            v207 = v197;
            if ((*(_WORD *)(v197 + 28) & 4) != 0)
            {
              v210 = *(_QWORD *)(v197 + 80);
              v207 = v197;
              if (v210)
              {
                *(_DWORD *)(v210 + 24) += 2;
                while (1)
                {
                  v211 = v210;
                  WTF::HashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>((uint64_t)&v368, v210);
                  if ((*(_WORD *)(v210 + 28) & 4) != 0)
                  {
                    v210 = *(_QWORD *)(v210 + 80);
                    if (v210)
                      break;
                  }
                  if (v211 != v197)
                  {
                    v210 = *(_QWORD *)(v211 + 56);
                    if (v210)
                      break;
                    v213 = v211;
                    while (1)
                    {
                      v213 = *(_QWORD *)(v213 + 32);
                      if (!v213 || v213 == v197)
                        break;
                      v210 = *(_QWORD *)(v213 + 56);
                      if (v210)
                        goto LABEL_543;
                    }
                  }
                  v210 = 0;
LABEL_544:
                  if (*(_DWORD *)(v211 + 24) == 2)
                  {
                    if ((*(_WORD *)(v211 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v211, v212);
                  }
                  else
                  {
                    *(_DWORD *)(v211 + 24) -= 2;
                  }
                  if (!v210)
                  {
                    v207 = v197;
                    goto LABEL_510;
                  }
                }
LABEL_543:
                *(_DWORD *)(v210 + 24) += 2;
                goto LABEL_544;
              }
            }
          }
          else
          {
            v203 = (WebCore::Node *)v19;
            v204 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
            *(_DWORD *)(v204 + 24) += 2;
            v205 = bmalloc::api::isoAllocate();
            v207 = v205;
            *(_OWORD *)(v205 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v205 + 24) = 0x300300000002;
            *(_QWORD *)(v205 + 32) = 0;
            *(_QWORD *)(v205 + 40) = v204 + 96;
            *(_OWORD *)(v205 + 48) = 0u;
            *(_OWORD *)(v205 + 64) = 0u;
            ++*(_DWORD *)(v204 + 3324);
            v208 = v198;
            if (v198 || (v208 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
              *(_DWORD *)v208 += 2;
            *(_QWORD *)(v205 + 80) = v208;
            *(_QWORD *)v205 = off_1E33A8078;
            if (*(_DWORD *)(v204 + 24) == 2)
            {
              if ((*(_WORD *)(v204 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v204, v206);
            }
            else
            {
              *(_DWORD *)(v204 + 24) -= 2;
            }
          }
LABEL_510:
          WebCore::TextManipulationController::getPath((unsigned int *)&buf, v203, (WebCore::Node **)v197);
          WebCore::TextManipulationController::updateInsertions((unsigned int *)&v358, (unsigned int *)&buf, (WebCore::Node *)v207, (uint64_t *)&v360, (uint64_t)&v361);
          v209 = (WTF *)buf;
          if (HIDWORD(buf))
          {
            v343 = 8 * HIDWORD(buf);
            v345 = (uint64_t *)buf;
            do
            {
              v215 = *v345;
              *v345 = 0;
              if (v215)
              {
                if (*(_DWORD *)(v215 + 24) == 2)
                {
                  if ((*(_WORD *)(v215 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v215, v18);
                }
                else
                {
                  *(_DWORD *)(v215 + 24) -= 2;
                }
              }
              v12 = v343 == 8;
              v343 -= 8;
              ++v345;
            }
            while (!v12);
          }
          if (v209)
            WTF::fastFree(v209, v18);
          if (!v207)
          {
            v202 = 1;
            v19 = (uint64_t)v203;
            if (!v198)
              goto LABEL_519;
            goto LABEL_517;
          }
          v19 = (uint64_t)v203;
          if (*(_DWORD *)(v207 + 24) == 2)
          {
            if ((*(_WORD *)(v207 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v207, v18);
          }
          else
          {
            *(_DWORD *)(v207 + 24) -= 2;
          }
          v202 = 1;
          if (v198)
            goto LABEL_517;
LABEL_519:
          if (v197)
          {
            if (*(_DWORD *)(v197 + 24) == 2)
            {
              if ((*(_WORD *)(v197 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v197, v18);
            }
            else
            {
              *(_DWORD *)(v197 + 24) -= 2;
            }
          }
          if ((v202 & 1) == 0)
          {
            v22 = 1;
            goto LABEL_684;
          }
          ++v186;
          v137 = v330;
        }
        while (v186 < *((unsigned int *)v330 + 3));
      }
      WebCore::Position::firstNode((uint64_t)v328, (uint64_t *)&v379);
      v216 = v379;
      if (!v379)
      {
LABEL_667:
        v256 = *((_QWORD *)a3 + 7);
        if (v256)
          *(_DWORD *)(v256 + 24) += 2;
        if (v368)
        {
          v257 = *((unsigned int *)v368 - 1);
          v258 = (uint64_t)&v368[v257];
          if (*((_DWORD *)v368 - 3))
          {
            v259 = (uint64_t)v368;
            if ((_DWORD)v257)
            {
              v260 = 8 * v257;
              v259 = (uint64_t)v368;
              while ((unint64_t)(*(_QWORD *)v259 + 1) <= 1)
              {
                v259 += 8;
                v260 -= 8;
                if (!v260)
                {
                  v259 = v258;
                  goto LABEL_687;
                }
              }
            }
            goto LABEL_687;
          }
          v259 = (uint64_t)&v368[v257];
        }
        else
        {
          v259 = 0;
          v257 = 0;
        }
        v258 = (uint64_t)&v368[v257];
LABEL_687:
        if (v368)
          v266 = &v368[*((unsigned int *)v368 - 1)];
        else
          v266 = 0;
        while ((uint64_t *)v259 != v266)
        {
          v18 = *(WebCore::Node **)v259;
          v267 = *(_QWORD *)(*(_QWORD *)v259 + 32);
          if (v267)
          {
            *(_DWORD *)(v267 + 24) += 2;
            WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v267, v18, &v355);
            if (*(_DWORD *)(v267 + 24) == 2)
            {
              v270 = *(_WORD *)(v267 + 30);
              if ((v270 & 0x400) == 0)
              {
                v271 = *(_WORD *)(v267 + 28);
                if ((v271 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v267, v18);
                }
                else
                {
                  if ((v271 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v267 + 160) + 16))(*(_QWORD *)(v267 + 160));
                    v270 = *(_WORD *)(v267 + 30);
                  }
                  *(_WORD *)(v267 + 30) = v270 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v267 + 72))(v267);
                }
              }
            }
            else
            {
              *(_DWORD *)(v267 + 24) -= 2;
            }
          }
          else
          {
            v355 = 0;
            v356 = 0;
            v357 = 0;
          }
          if ((_BYTE)v357)
          {
            v268 = v356;
            v356 = 0;
            if (v268)
            {
              if (*(_DWORD *)v268 == 2)
                WTF::StringImpl::destroy(v268, v18);
              else
                *(_DWORD *)v268 -= 2;
            }
          }
          v269 = v259 + 8;
          v259 = v258;
          if (v269 != v258)
          {
            v259 = v269;
            while ((unint64_t)(*(_QWORD *)v259 + 1) <= 1)
            {
              v259 += 8;
              if (v259 == v258)
              {
                v259 = v258;
                break;
              }
            }
          }
        }
        if (HIDWORD(v362))
        {
          v272 = (char *)v361 + 24 * HIDWORD(v362);
          v273 = (char *)v361 + 8;
          do
          {
            v275 = v273 - 8;
            v274 = *((_QWORD *)v273 - 1);
            if (v274)
            {
              *(_DWORD *)(v274 + 24) += 2;
              if ((*(_WORD *)(v274 + 28) & 4) != 0)
              {
                WebCore::ContainerNode::appendChild(v274, *(WebCore::Node **)v273, (uint64_t)v349);
                if (v351)
                {
                  v276 = v350;
                  v350 = 0;
                  if (v276)
                  {
                    if (*(_DWORD *)v276 == 2)
                      WTF::StringImpl::destroy(v276, v18);
                    else
                      *(_DWORD *)v276 -= 2;
                  }
                }
              }
              else
              {
                v349[0] = 1;
                v351 = 1;
                v350 = 0;
              }
            }
            else
            {
              v274 = v19;
              if (v19)
                *(_DWORD *)(v19 + 24) += 2;
              v18 = *(WebCore::Node **)v273;
              if (v256)
                *(_DWORD *)(v256 + 24) += 2;
              *(_QWORD *)&buf = v256;
              if (v19 && (*(_WORD *)(v19 + 28) & 4) != 0)
              {
                WebCore::ContainerNode::insertBefore(v19, (uint64_t *)v18, (WebCore::Node **)&buf, (uint64_t)v352);
                if (v354)
                {
                  v289 = v353;
                  v353 = 0;
                  if (v289)
                  {
                    if (*(_DWORD *)v289 == 2)
                      WTF::StringImpl::destroy(v289, v18);
                    else
                      *(_DWORD *)v289 -= 2;
                  }
                }
              }
              else
              {
                v352[0] = 1;
                v354 = 1;
                v353 = 0;
              }
              v290 = buf;
              *(_QWORD *)&buf = 0;
              if (v290)
              {
                if (*(_DWORD *)(v290 + 24) == 2)
                {
                  if ((*(_WORD *)(v290 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v290, v18);
                }
                else
                {
                  *(_DWORD *)(v290 + 24) -= 2;
                }
              }
            }
            v277 = *(_QWORD *)(v274 + 64) & 0xFFFFFFFFFFFFLL;
            if (v277 && (*(_BYTE *)((*(_QWORD *)(v274 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            {
              v278 = *(_DWORD *)((*(_QWORD *)(v274 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
              *(_DWORD *)((*(_QWORD *)(v274 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v278;
              v279 = *(_QWORD *)(v277 + 192);
              if (!v279)
                goto LABEL_724;
              v281 = *(_QWORD *)(v279 + 20);
              if ((v281 & 0x80000000) == 0)
              {
                v282 = *(_QWORD *)(v279 + 28);
                v283 = v281 + v282;
                if (__OFADD__((_DWORD)v281, (_DWORD)v282))
                  v283 = 0x7FFFFFFF;
                v284 = *(_QWORD *)(v277 + 160);
                if (v283 <= (int)v284 && (v281 & 0x8000000000000000) == 0)
                {
                  v285 = HIDWORD(v281);
                  v286 = HIDWORD(v282);
                  v287 = __OFADD__((_DWORD)v285, (_DWORD)v286);
                  v288 = v285 + v286;
                  if (v287)
                    v288 = 0x7FFFFFFF;
                  if (v288 <= SHIDWORD(v284))
                  {
LABEL_724:
                    *(_DWORD *)(v274 + 24) += 2;
                    v348 = (WebCore::Node *)v274;
                    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(v329, (uint64_t *)&v348, (uint64_t)&buf);
                    v280 = v348;
                    v348 = 0;
                    if (v280)
                    {
                      if (*((_DWORD *)v280 + 6) == 2)
                      {
                        if ((*((_WORD *)v280 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v280, v18);
                      }
                      else
                      {
                        *((_DWORD *)v280 + 6) -= 2;
                      }
                    }
                    v278 = *(_DWORD *)(v277 + 16);
                  }
                }
              }
              if (!v278)
              {
                __break(0xC471u);
                JUMPOUT(0x195B33810);
              }
              *(_DWORD *)(v277 + 16) = v278 - 1;
            }
            if (v273[8])
              WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v331 + 24, *(_QWORD *)v273, (uint64_t)&buf);
            if (*(_DWORD *)(v274 + 24) == 2)
            {
              if ((*(_WORD *)(v274 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v274, v18);
            }
            else
            {
              *(_DWORD *)(v274 + 24) -= 2;
            }
            v273 += 24;
          }
          while (v275 + 24 != v272);
        }
        v20 = v332;
        if (v256)
        {
          if (*(_DWORD *)(v256 + 24) == 2)
          {
            if ((*(_WORD *)(v256 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v256, v18);
          }
          else
          {
            *(_DWORD *)(v256 + 24) -= 2;
          }
        }
        v291 = v379;
        v379 = 0;
        if (v291)
        {
          if (*((_DWORD *)v291 + 6) == 2)
          {
            if ((*((_WORD *)v291 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v291, v18);
          }
          else
          {
            *((_DWORD *)v291 + 6) -= 2;
          }
        }
        v21 = 0;
        v22 = 0;
        goto LABEL_776;
      }
      if (a3 == (unsigned __int16 *)v379)
        goto LABEL_582;
      v217 = a3[14];
      if ((v217 & 0xF000) != 0x9000)
      {
        if ((v217 & 4) == 0
          || !*((_QWORD *)a3 + 10)
          || ((*((unsigned __int8 *)v379 + 22) ^ *((unsigned __int8 *)a3 + 22)) & 8) != 0)
        {
          goto LABEL_587;
        }
        v218 = v379;
        do
          v218 = (WebCore::Node *)*((_QWORD *)v218 + 4);
        while (v218 != (WebCore::Node *)a3 && v218 != 0);
        if (!v218)
          goto LABEL_586;
        goto LABEL_582;
      }
      if (**((unsigned __int16 ***)v379 + 5) == a3
        && (*((_WORD *)v379 + 14) & 0xF000) != 0x9000
        && (*((_BYTE *)v379 + 22) & 8) != 0)
      {
LABEL_582:
        WebCore::TextManipulationController::getPath((unsigned int *)&buf, (WebCore::Node *)v19, *((WebCore::Node ***)v379 + 4));
        WebCore::TextManipulationController::updateInsertions((unsigned int *)&v358, (unsigned int *)&buf, 0, (uint64_t *)&v360, (uint64_t)&v361);
        v220 = (WTF *)buf;
        if (HIDWORD(buf))
        {
          v324 = 8 * HIDWORD(buf);
          v325 = (uint64_t *)buf;
          do
          {
            v326 = *v325;
            *v325 = 0;
            if (v326)
            {
              if (*(_DWORD *)(v326 + 24) == 2)
              {
                if ((*(_WORD *)(v326 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v326, v18);
              }
              else
              {
                *(_DWORD *)(v326 + 24) -= 2;
              }
            }
            ++v325;
            v324 -= 8;
          }
          while (v324);
        }
        if (v220)
          WTF::fastFree(v220, v18);
        v216 = v379;
LABEL_586:
        if (v216)
          goto LABEL_587;
        goto LABEL_667;
      }
      while (1)
      {
LABEL_587:
        if (a3 != (unsigned __int16 *)v216)
        {
          v221 = a3[14];
          if ((v221 & 0xF000) == 0x9000)
          {
            if (**((unsigned __int16 ***)v216 + 5) != a3
              || (*((_WORD *)v216 + 14) & 0xF000) == 0x9000
              || (*((_BYTE *)v216 + 22) & 8) == 0)
            {
              goto LABEL_667;
            }
          }
          else
          {
            if ((v221 & 4) == 0
              || !*((_QWORD *)a3 + 10)
              || ((*((unsigned __int8 *)v216 + 22) ^ *((unsigned __int8 *)a3 + 22)) & 8) != 0)
            {
              goto LABEL_667;
            }
            v222 = v216;
            do
              v222 = (WebCore::Node *)*((_QWORD *)v222 + 4);
            while (v222 != (WebCore::Node *)a3 && v222 != 0);
            if (!v222)
              goto LABEL_667;
          }
        }
        v224 = *((_QWORD *)v216 + 4);
        *(_DWORD *)(v224 + 24) += 2;
        v225 = HIDWORD(v359);
        if (HIDWORD(v359))
        {
          v226 = v358;
          v227 = HIDWORD(v359) - 1;
          v228 = (uint64_t *)((char *)v358 + 16 * v227);
          v229 = *v228;
          if (*v228 == v224)
          {
LABEL_614:
            HIDWORD(v359) = v225;
            v232 = *((_QWORD *)v226 + 2 * v227 + 1);
            if (v232)
              *(_DWORD *)(v232 + 24) += 2;
            goto LABEL_618;
          }
          while (1)
          {
            v225 = v227;
            v230 = (char *)v226 + 16 * v227;
            v231 = *((_QWORD *)v230 + 1);
            *((_QWORD *)v230 + 1) = 0;
            if (v231)
            {
              if (*(_DWORD *)(v231 + 24) == 2)
              {
                if ((*(_WORD *)(v231 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v231, v18);
                  v229 = *v228;
                }
              }
              else
              {
                *(_DWORD *)(v231 + 24) -= 2;
              }
            }
            *v228 = 0;
            if (v229)
            {
              if (*(_DWORD *)(v229 + 24) == 2)
              {
                if ((*(_WORD *)(v229 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v229, v18);
              }
              else
              {
                *(_DWORD *)(v229 + 24) -= 2;
              }
            }
            if (!v225)
              break;
            v227 = v225 - 1;
            v228 = (uint64_t *)((char *)v226 + 16 * v227);
            v229 = *v228;
            if (*v228 == v224)
              goto LABEL_614;
          }
          HIDWORD(v359) = 0;
        }
        v225 = 0;
        v232 = 0;
LABEL_618:
        v233 = v379;
        *((_DWORD *)v379 + 6) += 2;
        *(_QWORD *)&buf = v232;
        *((_QWORD *)&buf + 1) = v233;
        LOBYTE(v381) = 0;
        v234 = HIDWORD(v362);
        if (HIDWORD(v362) == (_DWORD)v362)
        {
          v235 = WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v361, HIDWORD(v362) + 1, (unint64_t)&buf);
          v234 = HIDWORD(v362);
          v236 = (char *)v361 + 24 * HIDWORD(v362);
          v237 = *(_QWORD *)v235;
          *(_QWORD *)v235 = 0;
          *(_QWORD *)v236 = v237;
          v238 = *(_QWORD *)(v235 + 8);
          *(_QWORD *)(v235 + 8) = 0;
          *((_QWORD *)v236 + 1) = v238;
          v236[16] = *(_BYTE *)(v235 + 16);
        }
        else
        {
          v239 = (char *)v361 + 24 * HIDWORD(v362);
          *(_QWORD *)&buf = 0;
          *(_QWORD *)v239 = v232;
          v240 = *((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          *((_QWORD *)v239 + 1) = v240;
          v239[16] = 0;
        }
        HIDWORD(v362) = v234 + 1;
        v241 = *((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v241)
        {
          if (*(_DWORD *)(v241 + 24) == 2)
          {
            if ((*(_WORD *)(v241 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v241, v18);
          }
          else
          {
            *(_DWORD *)(v241 + 24) -= 2;
          }
        }
        v242 = buf;
        *(_QWORD *)&buf = 0;
        if (v242)
        {
          if (*(_DWORD *)(v242 + 24) == 2)
          {
            if ((*(_WORD *)(v242 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v242, v18);
          }
          else
          {
            *(_DWORD *)(v242 + 24) -= 2;
          }
        }
        v243 = v379;
        *((_DWORD *)v379 + 6) += 4;
        *(_QWORD *)&buf = v243;
        *((_QWORD *)&buf + 1) = v243;
        if (v225 == (_DWORD)v359)
        {
          v244 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v358, v225 + 1, (unint64_t)&buf);
          v225 = HIDWORD(v359);
          v245 = (_QWORD *)((char *)v358 + 16 * HIDWORD(v359));
          v246 = *(_QWORD *)v244;
          *(_QWORD *)v244 = 0;
          v247 = (uint64_t *)(v244 + 8);
          *v245 = v246;
          v248 = v245 + 1;
        }
        else
        {
          v249 = (WebCore::Node **)((char *)v358 + 16 * v225);
          *(_QWORD *)&buf = 0;
          *v249 = v243;
          v248 = v249 + 1;
          v247 = (uint64_t *)&buf + 1;
        }
        v250 = *v247;
        *v247 = 0;
        *v248 = v250;
        HIDWORD(v359) = v225 + 1;
        v251 = *((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v251)
        {
          if (*(_DWORD *)(v251 + 24) == 2)
          {
            if ((*(_WORD *)(v251 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v251, v18);
          }
          else
          {
            *(_DWORD *)(v251 + 24) -= 2;
          }
        }
        v252 = buf;
        *(_QWORD *)&buf = 0;
        if (v252)
        {
          if (*(_DWORD *)(v252 + 24) == 2)
          {
            if ((*(_WORD *)(v252 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v252, v18);
          }
          else
          {
            *(_DWORD *)(v252 + 24) -= 2;
          }
        }
        v253 = v379;
        if ((*((_WORD *)v379 + 14) & 4) != 0 && (v254 = (WebCore::Node *)*((_QWORD *)v379 + 10)) != 0
          || (v254 = (WebCore::Node *)*((_QWORD *)v379 + 7)) != 0)
        {
LABEL_642:
          *((_DWORD *)v254 + 6) += 2;
        }
        else
        {
          v255 = v379;
          while (1)
          {
            v255 = (WebCore::Node *)*((_QWORD *)v255 + 4);
            if (!v255)
              break;
            v254 = (WebCore::Node *)*((_QWORD *)v255 + 7);
            if (v254)
              goto LABEL_642;
          }
          v254 = 0;
        }
        v379 = v254;
        if (v253)
        {
          if (*((_DWORD *)v253 + 6) == 2)
          {
            if ((*((_WORD *)v253 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v253, v18);
          }
          else
          {
            *((_DWORD *)v253 + 6) -= 2;
          }
        }
        if (v224)
        {
          if (*(_DWORD *)(v224 + 24) == 2)
          {
            if ((*(_WORD *)(v224 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v224, v18);
          }
          else
          {
            *(_DWORD *)(v224 + 24) -= 2;
          }
        }
        v216 = v379;
        if (!v379)
          goto LABEL_667;
      }
    }
  }
  v26 = *((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL;
  if (v26)
  {
    v27 = *(_DWORD *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v27 + 1;
    if (v27 == -1)
    {
      __break(0xC471u);
      goto LABEL_924;
    }
    v28 = *(_BYTE *)(v26 + 52) & 7;
    v29 = v28 == 3;
    if (v28 == 3)
      v25 = 0;
    *(_DWORD *)(v26 + 16) = v27;
  }
  else
  {
    v29 = 0;
  }
  if (!(v29 | v25))
    goto LABEL_63;
  *((_DWORD *)v24 + 6) += 2;
  if (!a3)
    goto LABEL_47;
LABEL_45:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((a3[15] & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a3, (void *)a2);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
LABEL_47:
  *((_DWORD *)v24 + 6) += 2;
  v366 = v24;
  WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v368, (uint64_t *)&v366, (uint64_t)&v361);
  v30 = v366;
  v366 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, (void *)a2);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  v366 = 0;
  v367 = 0;
  if (v29)
  {
    if (v23 >= *(unsigned int *)(v5 + 60))
    {
      v47 = 1;
      goto LABEL_288;
    }
    v333 = v19;
    v31 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v366, 1uLL, *(_QWORD *)(v5 + 48) + 96 * v23);
    v32 = HIDWORD(v367);
    v33 = v366;
    v34 = (_QWORD *)((char *)v366 + 96 * HIDWORD(v367));
    *v34 = *(_QWORD *)v31;
    v35 = v34 + 1;
    v36 = (_DWORD *)*((_QWORD *)v31 + 1);
    if (v36)
      *v36 += 2;
    *v35 = v36;
    v37 = (char *)v33 + 96 * v32;
    v37[16] = 0;
    v38 = v37 + 16;
    v38[64] = 0;
    v39 = v38 + 64;
    if (v31[80])
    {
      v40 = (_DWORD *)*((_QWORD *)v31 + 2);
      if (v40)
        *v40 += 2;
      *(_QWORD *)v38 = v40;
      v41 = (_DWORD *)*((_QWORD *)v31 + 3);
      if (v41)
        *v41 += 2;
      *((_QWORD *)v33 + 12 * v32 + 3) = v41;
      v42 = (_DWORD *)*((_QWORD *)v31 + 4);
      if (v42)
        *v42 += 2;
      v43 = (char *)v33 + 96 * v32;
      *((_QWORD *)v43 + 4) = v42;
      v44 = *(_OWORD *)(v31 + 40);
      *(_OWORD *)(v43 + 56) = *(_OWORD *)(v31 + 56);
      *(_OWORD *)(v43 + 40) = v44;
      v43[72] = v31[72];
      *v39 = 1;
    }
    v340 = v29;
    *((_BYTE *)v33 + 96 * v32 + 88) = v31[88];
    v45 = v32 + 1;
    HIDWORD(v367) = v32 + 1;
  }
  else
  {
    v340 = 0;
    *((_DWORD *)v24 + 6) += 2;
    v361 = v24;
    v362 = 0;
    v363 = 0;
    v364 = 1;
    v365 = 0;
    if (v338)
    {
      v49 = (WTF::StringImpl **)v337;
      v50 = 8 * v338;
      do
      {
        if (*v49)
        {
          WebCore::TextManipulationController::parse(a1, &v361, v49, (WebCore::Node **)v24);
        }
        else
        {
          if (!HIDWORD(v363))
            HIBYTE(v364) = 1;
          v365 = 1;
        }
        ++v49;
        v50 -= 8;
      }
      while (v50);
    }
    v333 = v19;
    v33 = v362;
    v366 = v362;
    v45 = HIDWORD(v363);
    v367 = v363;
    if (v361)
    {
      if (*((_DWORD *)v361 + 6) == 2)
      {
        if ((*((_WORD *)v361 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v361, (void *)a2);
      }
      else
      {
        *((_DWORD *)v361 + 6) -= 2;
      }
    }
  }
  v341 = v24;
  if (!v45)
    goto LABEL_239;
  v339 = (WTF *)((char *)v33 + 96 * v45);
  v51 = 96 * v45 - 96;
  v52 = (unsigned __int8 *)v33 + 88;
  do
  {
    v53 = *v52;
    v52 += 96;
    a1 = v53;
    if (v53)
      v54 = v51 == 0;
    else
      v54 = 1;
    v51 -= 96;
  }
  while (!v54);
LABEL_120:
  if (v23 >= *(unsigned int *)(v5 + 60))
  {
    v47 = 1;
    a1 = v331;
    v19 = v333;
    goto LABEL_288;
  }
  v66 = *(_QWORD *)(v5 + 48) + 96 * v23;
  v69 = *(_QWORD *)(v66 + 8);
  v68 = (_DWORD **)(v66 + 8);
  v67 = v69;
  v70 = v346 & 0xFFFFFF0000000000;
  v342 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 96 * v23);
  if (!v69)
  {
    a3 = 0;
    v55 = v70 | 0x100000000;
LABEL_138:
    a2 = v55;
    goto LABEL_139;
  }
  v71 = *(unsigned __int16 **)(v67 + 8);
  v72 = *(unsigned int *)(v67 + 4);
  v73 = ((unint64_t)*(unsigned int *)(v67 + 16) >> 2) & 1;
  v74 = v70 | (v73 << 32);
  v55 = v74 | v72;
  if ((_DWORD)v73)
  {
    if (!(_DWORD)v72)
      goto LABEL_137;
    v63 = 0;
    while (1)
    {
      v75 = *((unsigned __int8 *)v71 + v63);
      if ((v75 - 9) >= 5 && v75 != 32)
        break;
      if (v72 == ++v63)
      {
        a2 = 0x100000000;
        a3 = (unsigned __int16 *)&str_7_40;
        goto LABEL_139;
      }
    }
    if ((_DWORD)v72 == 1)
    {
      if (!(_DWORD)v63)
        goto LABEL_137;
      LODWORD(v58) = 0;
    }
    else
    {
      v58 = (v72 - 1);
      do
      {
        if (v58 >= v72)
          goto LABEL_422;
        v76 = *((unsigned __int8 *)v71 + v58);
        if ((v76 - 9) >= 5 && v76 != 32)
          break;
        --v58;
      }
      while ((_DWORD)v58);
      if (!(_DWORD)v63 && (_DWORD)v58 == (_DWORD)v72 - 1)
      {
LABEL_137:
        a3 = v71;
        goto LABEL_138;
      }
    }
    v59 = (v58 - v63 + 1);
    if (v72 - v63 >= v59)
    {
      a3 = (unsigned __int16 *)((char *)v71 + v63);
      a2 = v59 | 0x100000000;
      goto LABEL_139;
    }
    goto LABEL_422;
  }
  if (!(_DWORD)v72)
    goto LABEL_137;
  v347 = v74 | v72;
  v106 = 0;
  a3 = v71;
  while (2)
  {
    v107 = *a3;
    if (v107 > 0xFF)
    {
      if (MEMORY[0x19AEA858C]() != 9)
        break;
      goto LABEL_199;
    }
    v63 = v107 - 9;
    if (v63 < 5 || v107 == 32)
    {
LABEL_199:
      ++v106;
      ++a3;
      if (v72 == v106)
      {
        a2 = 0x100000000;
        a3 = (unsigned __int16 *)&str_7_40;
        v55 = v347;
        goto LABEL_139;
      }
      continue;
    }
    break;
  }
  if ((_DWORD)v72 == 1)
  {
    if (!(_DWORD)v106)
    {
      a3 = v71;
      v55 = v347;
      a2 = v347;
      goto LABEL_139;
    }
    LODWORD(v65) = 0;
LABEL_118:
    a2 = (v65 - v106 + 1);
    v63 = v72 - v106;
    v5 = v336;
    v55 = v347;
    if (v72 - v106 >= a2)
      goto LABEL_139;
    goto LABEL_422;
  }
  v65 = (v72 - 1);
  while (2)
  {
    if (v65 >= v72)
      goto LABEL_422;
    v108 = v71[v65];
    if (v108 > 0xFF)
    {
      if (MEMORY[0x19AEA858C]() != 9)
        break;
      goto LABEL_208;
    }
    v63 = v108 - 9;
    if (v63 < 5 || v108 == 32)
    {
LABEL_208:
      if (!(_DWORD)--v65)
        break;
      continue;
    }
    break;
  }
  if ((_DWORD)v106 || (_DWORD)v65 != (_DWORD)v72 - 1)
    goto LABEL_118;
  a3 = v71;
  v55 = v347;
  a2 = v347;
  v5 = v336;
LABEL_139:
  v64 = v5;
  v77 = v344 & 0xFFFFFF0000000000;
  v78 = *((_QWORD *)v33 + 1);
  v346 = v55;
  if (!v78)
  {
    v56 = 0;
    v57 = v77 | 0x100000000;
    v344 = v77 | 0x100000000;
    goto LABEL_157;
  }
  v5 = v23;
  v79 = *(unsigned __int8 **)(v78 + 8);
  v80 = *(unsigned int *)(v78 + 4);
  v81 = ((unint64_t)*(unsigned int *)(v78 + 16) >> 2) & 1;
  v57 = v77 | (v81 << 32) | v80;
  v344 = v57;
  if (!(_DWORD)v81)
  {
    if (!(_DWORD)v80)
      goto LABEL_155;
    v109 = 0;
    v110 = (v80 - 1);
    v56 = v79;
    while (1)
    {
      v111 = *(unsigned __int16 *)v56;
      if (v111 > 0xFF)
      {
        v334 = a2;
        v112 = v110;
        v113 = MEMORY[0x19AEA858C]();
        v110 = v112;
        a2 = v334;
        if (v113 != 9)
          goto LABEL_222;
      }
      else
      {
        v63 = v111 - 9;
        if (v63 >= 5 && v111 != 32)
        {
LABEL_222:
          if (!(_DWORD)v110)
          {
            if (!(_DWORD)v109)
              goto LABEL_233;
            LODWORD(v62) = 0;
LABEL_115:
            v57 = (v62 - v109 + 1);
            v63 = v80 - v109;
            v133 = v80 - v109 >= v57;
            v64 = v336;
            v23 = v5;
            if (v133)
              goto LABEL_157;
            goto LABEL_422;
          }
          v62 = v110;
          while (2)
          {
            if (v62 >= v80)
              goto LABEL_422;
            v114 = *(unsigned __int16 *)&v79[2 * v62];
            if (v114 > 0xFF)
            {
              v335 = a2;
              v327 = v110;
              v115 = MEMORY[0x19AEA858C]();
              v110 = v327;
              a2 = v335;
              if (v115 != 9)
                break;
              goto LABEL_228;
            }
            v63 = v114 - 9;
            if (v63 < 5 || v114 == 32)
            {
LABEL_228:
              if (!(_DWORD)--v62)
                break;
              continue;
            }
            break;
          }
          if ((_DWORD)v109 || (_DWORD)v62 != (_DWORD)v110)
            goto LABEL_115;
LABEL_233:
          v56 = v79;
          v57 = v344;
LABEL_234:
          v64 = v336;
LABEL_156:
          v23 = v5;
LABEL_157:
          ++v23;
          v84 = WTF::operator==((unsigned __int8 *)a3, a2, v56, v57);
          if (!v340 && !v84)
          {
            v47 = 1;
            a1 = v331;
            v19 = v333;
            v24 = v341;
            v5 = v64;
            goto LABEL_288;
          }
          v24 = v341;
          v5 = v64;
          if (v341)
            *((_DWORD *)v341 + 6) += 2;
          v85 = *v68;
          if (*v68)
            *v85 += 2;
          v86 = v369;
          if (v369
            || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TokenExchangeData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&v369, 8u, 0), (v86 = v369) != 0))
          {
            v87 = *(_DWORD *)(v86 - 8);
          }
          else
          {
            v87 = 0;
          }
          v88 = *v342;
          v89 = *v342 + ~(*v342 << 32);
          v90 = (v89 ^ (v89 >> 22)) + ~((v89 ^ (v89 >> 22)) << 13);
          v91 = (9 * (v90 ^ (v90 >> 8))) ^ ((9 * (v90 ^ (v90 >> 8))) >> 15);
          v92 = v87 & (((v91 + ~(v91 << 27)) >> 31) ^ ((_DWORD)v91 + ~((_DWORD)v91 << 27)));
          v93 = (_OWORD *)(v86 + 32 * v92);
          v94 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            v95 = 0;
            v96 = 1;
            while (v94 != v88)
            {
              if (v94 == -1)
                v95 = v93;
              v92 = ((_DWORD)v92 + v96) & v87;
              v93 = (_OWORD *)(v86 + 32 * v92);
              v94 = *(_QWORD *)v93;
              ++v96;
              if (!*(_QWORD *)v93)
              {
                if (v95)
                {
                  *v95 = 0u;
                  v95[1] = 0u;
                  --*(_DWORD *)(v86 - 16);
                  v88 = *v342;
                  v93 = v95;
                }
                goto LABEL_174;
              }
            }
            v101 = *((_QWORD *)v93 + 1);
            *((_QWORD *)v93 + 1) = v341;
            if (v101)
            {
              if (*(_DWORD *)(v101 + 24) == 2)
              {
                if ((*(_WORD *)(v101 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v101, (void *)a2);
              }
              else
              {
                *(_DWORD *)(v101 + 24) -= 2;
              }
            }
            v102 = (WTF::StringImpl *)*((_QWORD *)v93 + 2);
            *((_QWORD *)v93 + 2) = v85;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v102 -= 2;
            }
            *((_WORD *)v93 + 12) = a1;
LABEL_238:
            v33 = (WTF *)((char *)v33 + 96);
            if (v33 == v339)
            {
LABEL_239:
              v116 = v332;
              v19 = v333;
              if (!v332 && v24)
              {
                *((_DWORD *)v24 + 6) += 2;
                v116 = (WebCore::Node **)v24;
              }
              v332 = v116;
              v117 = *((_QWORD *)v24 + 4);
              a1 = v331;
              if (v333)
              {
                v118 = *(_WORD *)(v333 + 28);
                if ((v118 & 0xF000) == 0x9000)
                {
                  if (**(_QWORD **)(v117 + 40) == v333
                    && (*(_WORD *)(v117 + 28) & 0xF000) != 0x9000
                    && (*(_BYTE *)(v117 + 22) & 8) != 0)
                  {
                    goto LABEL_254;
                  }
                }
                else if ((v118 & 4) != 0
                       && *(_QWORD *)(v333 + 80)
                       && ((*(unsigned __int8 *)(v117 + 22) ^ *(unsigned __int8 *)(v333 + 22)) & 8) == 0)
                {
                  v119 = *((_QWORD *)v24 + 4);
                  do
                    v119 = *(_QWORD *)(v119 + 32);
                  while (v119 != v333 && v119 != 0);
                  if (v119)
                  {
LABEL_254:
                    v47 = 0;
                    goto LABEL_288;
                  }
                }
                i = v333;
                if (v333 != v117)
                {
                  v130 = WebCore::depth<(WebCore::TreeType)2>(v333);
                  v131 = WebCore::depth<(WebCore::TreeType)2>(v117);
                  v132 = v131 - v130;
                  v133 = v130 >= v131;
                  v134 = v130 - v131;
                  if (v130 >= v131)
                    v135 = (WebCore::Node *)v333;
                  else
                    v135 = (WebCore::Node *)v117;
                  if (v133)
                  {
                    v136 = v134;
                  }
                  else
                  {
                    v117 = v333;
                    v136 = v132;
                  }
                  for (; v136; --v136)
                    v135 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v135);
                  for (i = v117; v135 != (WebCore::Node *)v117; i = (uint64_t)v135)
                  {
                    v135 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v135);
                    v117 = WebCore::Node::parentInComposedTree((WebCore::Node *)v117);
                  }
                }
                if (i)
                  *(_DWORD *)(i + 24) += 2;
                v24 = v341;
                if (*(_DWORD *)(v333 + 24) == 2)
                {
                  if ((*(_WORD *)(v333 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v333, (void *)a2);
                  v47 = 0;
                }
                else
                {
                  v47 = 0;
                  *(_DWORD *)(v333 + 24) -= 2;
                }
                v19 = i;
              }
              else
              {
                if (!v117)
                {
                  v19 = 0;
                  goto LABEL_254;
                }
                v47 = 0;
                *(_DWORD *)(v117 + 24) += 2;
                v19 = v117;
              }
LABEL_288:
              v126 = v366;
              if (HIDWORD(v367))
                WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(v366, (WTF *)((char *)v366 + 96 * HIDWORD(v367)));
              if (v126)
                WTF::fastFree(v126, (void *)a2);
LABEL_292:
              v48 = (WTF *)v337;
              if (v338)
              {
                v127 = 8 * v338;
                v128 = (WTF::StringImpl **)v337;
                do
                {
                  v129 = *v128;
                  *v128 = 0;
                  if (v129)
                  {
                    if (*(_DWORD *)v129 == 2)
                      WTF::StringImpl::destroy(v129, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v129 -= 2;
                  }
                  ++v128;
                  v127 -= 8;
                  v48 = (WTF *)v337;
                }
                while (v127);
              }
              a3 = (unsigned __int16 *)v24;
              goto LABEL_294;
            }
            goto LABEL_120;
          }
LABEL_174:
          v97 = *((_QWORD *)v93 + 1);
          *(_QWORD *)v93 = v88;
          *((_QWORD *)v93 + 1) = v341;
          if (v97)
          {
            if (*(_DWORD *)(v97 + 24) == 2)
            {
              if ((*(_WORD *)(v97 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v97, (void *)a2);
            }
            else
            {
              *(_DWORD *)(v97 + 24) -= 2;
            }
          }
          v98 = (WTF::StringImpl *)*((_QWORD *)v93 + 2);
          *((_QWORD *)v93 + 2) = v85;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v98 -= 2;
          }
          *((_WORD *)v93 + 12) = a1;
          v99 = v369;
          if (v369)
            v100 = *(_DWORD *)(v369 - 12) + 1;
          else
            v100 = 1;
          *(_DWORD *)(v369 - 12) = v100;
          v103 = (*(_DWORD *)(v99 - 16) + v100);
          v104 = *(unsigned int *)(v99 - 4);
          if (v104 > 0x400)
          {
            if (v104 > 2 * v103)
              goto LABEL_238;
LABEL_193:
            v105 = (_DWORD)v104 << (6 * v100 >= (2 * v104));
          }
          else
          {
            if (3 * v104 > 4 * v103)
              goto LABEL_238;
            if ((_DWORD)v104)
              goto LABEL_193;
            v105 = 8;
          }
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TokenExchangeData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&v369, v105, (uint64_t *)v93);
          goto LABEL_238;
        }
      }
      ++v109;
      v56 += 2;
      if (v80 == v109)
      {
        v57 = 0x100000000;
        v56 = (unsigned __int8 *)&str_7_40;
        goto LABEL_234;
      }
    }
  }
  if (!(_DWORD)v80)
  {
LABEL_155:
    v56 = v79;
    goto LABEL_156;
  }
  v63 = 0;
  while (1)
  {
    v82 = v79[v63];
    if ((v82 - 9) >= 5 && v82 != 32)
      break;
    if (v80 == ++v63)
    {
      v57 = 0x100000000;
      v56 = (unsigned __int8 *)&str_7_40;
      goto LABEL_156;
    }
  }
  if ((_DWORD)v80 == 1)
  {
    if ((_DWORD)v63)
    {
      LODWORD(v60) = 0;
      goto LABEL_109;
    }
    goto LABEL_155;
  }
  v60 = (v80 - 1);
  do
  {
    if (v60 >= v80)
      goto LABEL_422;
    v83 = v79[v60];
    if ((v83 - 9) >= 5 && v83 != 32)
      break;
    --v60;
  }
  while ((_DWORD)v60);
  if (!(_DWORD)v63 && (_DWORD)v60 == (_DWORD)v80 - 1)
    goto LABEL_155;
LABEL_109:
  v61 = (v60 - v63 + 1);
  if (v80 - v63 >= v61)
  {
    v56 = &v79[v63];
    v57 = v61 | 0x100000000;
    goto LABEL_156;
  }
LABEL_422:
  __break(1u);
LABEL_423:
  v164 = *(_QWORD *)(v63 + 8);
  if (!v164)
  {
LABEL_387:
    v21 = 1;
    v22 = 1;
    return v21 | (v22 << 8);
  }
  v165 = *(_DWORD *)(v164 + 24);
  *(_DWORD *)(v164 + 24) = v165 + 2;
  v166 = *((_DWORD *)a3 + 3);
  if (v166 < 2)
  {
    v168 = **(_QWORD **)(v5 + 48);
    buf = 0uLL;
    v381 = 0;
    v382 = 1;
    if (v166)
      goto LABEL_452;
    goto LABEL_677;
  }
  if ((*(_WORD *)(v164 + 28) & 0x10) == 0
    || (v167 = *(_QWORD *)(*(_QWORD *)(v164 + 96) + 24), v167 != *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
    && v167 != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    if (*(_QWORD *)(v5 + 40) == WebCore::nullName)
    {
      v21 = 3;
      v22 = 1;
      if (v165)
        goto LABEL_856;
      goto LABEL_858;
    }
  }
  v168 = **(_QWORD **)(v5 + 48);
  buf = 0uLL;
  v381 = 0;
  v382 = 1;
LABEL_452:
  v22 = 1;
  if (**(_QWORD **)a3 != v168)
    goto LABEL_848;
  v175 = *(_DWORD **)(*(_QWORD *)a3 + 8);
  if (v175)
  {
    v176 = v175[1];
    *v175 += 2;
  }
  else
  {
    v176 = 0;
  }
  *(_QWORD *)&buf = v175;
  v381 = v176;
  if (v166 < 2)
  {
LABEL_677:
    v263 = *(_QWORD *)(v5 + 40);
    v262 = (const WebCore::QualifiedName *)(v5 + 40);
    v261 = v263;
    if (v263 != WebCore::nullName)
    {
      if ((*(_WORD *)(v164 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v164 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        *(_DWORD *)(v164 + 24) += 2;
        if (v261 == WebCore::HTMLNames::valueAttr)
        {
          v317 = (WTF::StringImpl *)buf;
          if ((_QWORD)buf
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&buf),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&buf),
                (v317 = (WTF::StringImpl *)buf) != 0))
          {
            *(_DWORD *)v317 += 2;
          }
          v361 = v317;
          WebCore::HTMLInputElement::setValue(v164, (uint64_t)&v361, 0, 0, (uint64_t)v373);
          if (v375)
          {
            v318 = v374;
            v374 = 0;
            if (v318)
            {
              if (*(_DWORD *)v318 == 2)
                WTF::StringImpl::destroy(v318, v311);
              else
                *(_DWORD *)v318 -= 2;
            }
          }
          v319 = v361;
          v361 = 0;
          if (v319)
          {
            if (*(_DWORD *)v319 == 2)
              WTF::StringImpl::destroy(v319, v311);
            else
              *(_DWORD *)v319 -= 2;
          }
          v265 = v164;
          goto LABEL_840;
        }
        v264 = 0;
        v265 = v164;
      }
      else
      {
        v265 = 0;
        v264 = 1;
      }
      WTF::StringBuilder::toAtomString((WTF::AtomString *)&buf, (WTF::AtomString *)&v361);
      WebCore::Element::setAttribute((WebCore::Element *)v164, v262, &v361, 0, &v370, v310);
      if (v372)
      {
        v312 = v371;
        v371 = 0;
        if (v312)
        {
          if (*(_DWORD *)v312 == 2)
            WTF::StringImpl::destroy(v312, v311);
          else
            *(_DWORD *)v312 -= 2;
        }
      }
      v313 = v361;
      v361 = 0;
      if (v313)
      {
        if (*(_DWORD *)v313 == 2)
        {
          WTF::StringImpl::destroy(v313, v311);
          if ((v264 & 1) == 0)
          {
LABEL_840:
            if (*(_DWORD *)(v265 + 24) == 2)
            {
              if ((*(_WORD *)(v265 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v265, v311);
            }
            else
            {
              *(_DWORD *)(v265 + 24) -= 2;
            }
          }
LABEL_842:
          WTF::WeakHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)&v361, a1 + 24, v164);
          v21 = 0;
          v22 = 0;
          goto LABEL_849;
        }
        *(_DWORD *)v313 -= 2;
      }
      if ((v264 & 1) == 0)
        goto LABEL_840;
      goto LABEL_842;
    }
    v307 = (WTF::StringImpl *)buf;
    if ((_QWORD)buf
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&buf),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&buf),
          (v307 = (WTF::StringImpl *)buf) != 0))
    {
      *(_DWORD *)v307 += 2;
    }
    v361 = v307;
    v308 = *(unsigned __int16 *)(v164 + 28) >> 12;
    if (v308 == 1)
      goto LABEL_827;
    if (v308 <= 0xB)
    {
      if (v308 == 11)
      {
LABEL_827:
        WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v164, (uint64_t)&v361);
        v376 = 0;
        v377 = 0;
        v378 = 0;
        goto LABEL_828;
      }
      if (((1 << v308) & 0x19C) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v164 + 120))(&v376, v164, &v361);
        if ((_BYTE)v378)
        {
          v320 = v377;
          v377 = 0;
          if (v320)
          {
            if (*(_DWORD *)v320 == 2)
              WTF::StringImpl::destroy(v320, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v320 -= 2;
          }
        }
        goto LABEL_828;
      }
    }
    v376 = 0;
    v377 = 0;
    v378 = 0;
LABEL_828:
    v309 = v361;
    v361 = 0;
    if (v309)
    {
      if (*(_DWORD *)v309 == 2)
        WTF::StringImpl::destroy(v309, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v309 -= 2;
    }
    goto LABEL_842;
  }
  v177 = 0;
  v178 = 1;
  while (*(_QWORD *)(*(_QWORD *)a3 + v177 + 96) == v168)
  {
    LOBYTE(v361) = 32;
    if (*((_QWORD *)&buf + 1)
      && ((v179 = v381, v381 < *(_DWORD *)(*((_QWORD *)&buf + 1) + 4)) ? (v180 = (_QWORD)buf == 0) : (v180 = 0), v180))
    {
      v184 = *(_DWORD *)(*((_QWORD *)&buf + 1) + 16);
      v185 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 8);
      ++v381;
      if ((v184 & 4) != 0)
        *(_BYTE *)(v185 + v179) = 32;
      else
        *(_WORD *)(v185 + 2 * v179) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if (v178 >= *((unsigned int *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x195B339ACLL);
    }
    v181 = *(_QWORD *)a3 + v177;
    v182 = *(_QWORD *)(v181 + 104);
    if (v381 || *((_QWORD *)&buf + 1))
    {
      if (v182 && (*(_BYTE *)(v182 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      goto LABEL_475;
    }
    if (v182)
      *(_DWORD *)v182 += 2;
    v183 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = v182;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2)
      {
        WTF::StringImpl::destroy(v183, (WTF::StringImpl *)a2);
        v182 = *(_QWORD *)(v181 + 104);
        if (!v182)
          goto LABEL_474;
LABEL_473:
        LODWORD(v182) = *(_DWORD *)(v182 + 4);
        goto LABEL_474;
      }
      *(_DWORD *)v183 -= 2;
    }
    if (v182)
      goto LABEL_473;
LABEL_474:
    v381 = v182;
LABEL_475:
    ++v178;
    v177 += 96;
    if (v178 >= *((unsigned int *)a3 + 3))
      goto LABEL_677;
  }
  v22 = 1;
LABEL_848:
  v21 = 3;
LABEL_849:
  v314 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
      WTF::StringImpl::destroy(v314, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v314 -= 2;
  }
  v315 = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
      WTF::StringImpl::destroy(v315, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v315 -= 2;
  }
  v316 = *(_DWORD *)(v164 + 24);
  v165 = v316 - 2;
  if (v316 != 2)
  {
LABEL_856:
    *(_DWORD *)(v164 + 24) = v165;
    return v21 | (v22 << 8);
  }
LABEL_858:
  if ((*(_WORD *)(v164 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v164, (void *)a2);
  return v21 | (v22 << 8);
}

unsigned int *WebCore::TextManipulationController::getPath(unsigned int *this, WebCore::Node *a2, WebCore::Node **a3)
{
  WebCore::Node *v3;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  WebCore::Node *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (WebCore::Node *)a3;
  v5 = this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!a3 || (*((_WORD *)a3 + 14) & 4) == 0)
  {
    v3 = a3[4];
    if (!v3)
      return this;
  }
  *((_DWORD *)v3 + 6) += 2;
  if (v3 == a2)
  {
    v13 = a2;
LABEL_30:
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v13, a2);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
    return this;
  }
  do
  {
    v6 = v5[3];
    if ((_DWORD)v6 == v5[2])
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v6 + 1)
        v9 = v6 + 1;
      else
        v9 = v8;
      if (v9 >> 29)
        goto LABEL_54;
      v10 = *(_QWORD **)v5;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
      v5[2] = v9;
      *(_QWORD *)v5 = v11;
      this = (unsigned int *)memcpy(v11, v10, 8 * v6);
      if (v10)
      {
        if (v11 == v10)
        {
          v11 = 0;
          *(_QWORD *)v5 = 0;
          v5[2] = 0;
        }
        this = (unsigned int *)WTF::fastFree((WTF *)v10, a2);
      }
    }
    else
    {
      v11 = *(_QWORD **)v5;
    }
    v12 = *((_DWORD *)v3 + 6) + 2;
    *((_DWORD *)v3 + 6) = v12;
    v11[v6] = v3;
    v5[3] = v6 + 1;
    v13 = (WebCore::Node *)*((_QWORD *)v3 + 4);
    if (v13)
    {
      *((_DWORD *)v13 + 6) += 2;
      v12 = *((_DWORD *)v3 + 6);
    }
    v14 = v12 - 2;
    if (v14)
    {
      *((_DWORD *)v3 + 6) = v14;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef(v3, a2);
    }
    if (!v13)
      break;
    v3 = v13;
  }
  while (v13 != a2);
  v15 = v5[3];
  if (v15 >= 2)
  {
    v16 = 0;
    v17 = (v15 - 1);
    v18 = *(_QWORD **)v5;
    while (1)
    {
      if (8 * v15 == v16)
      {
        __break(0xC471u);
        JUMPOUT(0x195B33C04);
      }
      if (v17 >= v15)
        break;
      v19 = v18[v16 / 8];
      v18[v16 / 8] = 0;
      v20 = v18[v17];
      v18[v17] = 0;
      v21 = v18[v16 / 8];
      v18[v16 / 8] = v20;
      if (v21)
      {
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21, a2);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      this = (unsigned int *)v18[v17];
      v18[v17] = v19;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          this[6] -= 2;
        }
      }
      --v17;
      v16 += 8;
      if (((4 * v15) & 0x3FFFFFFF8) == v16)
        goto LABEL_27;
    }
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x195B33BFCLL);
  }
LABEL_27:
  if (v13)
    goto LABEL_30;
  return this;
}

unsigned int *WebCore::TextManipulationController::updateInsertions(unsigned int *result, unsigned int *a2, WebCore::Node *a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v8;
  unint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WebCore::EventTarget *v20;
  int v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::EventTarget *v25;
  uint64_t v26;
  WebCore::EventTarget *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::EventTarget *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  WebCore::Node **v41;
  WebCore::Node **v42;
  WebCore::EventTarget **v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  WebCore::EventTarget *v46;
  uint64_t v47;
  WebCore::EventTarget *v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::Node *v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::Node *v59;
  WebCore::EventTarget *v60;
  WebCore::Node *v61;
  unsigned __int8 v62;

  v8 = result;
  v9 = result[3];
  v10 = result[3] != 0;
  v11 = a2[3];
  if ((_DWORD)v9)
    v12 = (_DWORD)v11 == 0;
  else
    v12 = 1;
  v13 = 0;
  if (!v12)
  {
    v15 = *(_QWORD **)result;
    v16 = *(_QWORD **)result;
    while (*v16 == *(_QWORD *)(*(_QWORD *)a2 + 8 * v13))
    {
      v10 = ++v13 < v9;
      if (v13 < v9)
      {
        v16 += 2;
        if (v13 < v11)
          continue;
      }
      goto LABEL_6;
    }
    if (v9 == v13 && v11 == v13)
      goto LABEL_86;
    goto LABEL_18;
  }
LABEL_6:
  if (v13 == v9 && v13 == v11)
  {
LABEL_86:
    if (a3)
    {
      v47 = v8[3];
      if ((_DWORD)v47)
      {
        v48 = *(WebCore::EventTarget **)(*(_QWORD *)v8 + 16 * v47 - 8);
        if (v48)
          *((_DWORD *)v48 + 6) += 2;
      }
      else
      {
        v48 = 0;
      }
      *((_DWORD *)a3 + 6) += 2;
      v60 = v48;
      v61 = a3;
      v62 = 1;
      v49 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v49 == *(_DWORD *)(a5 + 8))
      {
        v50 = WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v49 + 1, (unint64_t)&v60);
        v51 = *(_DWORD *)(a5 + 12);
        v52 = *(_QWORD *)a5 + 24 * v51;
        v53 = *(_QWORD *)v50;
        *(_QWORD *)v50 = 0;
        *(_QWORD *)v52 = v53;
        v54 = *(_QWORD *)(v50 + 8);
        *(_QWORD *)(v50 + 8) = 0;
        *(_QWORD *)(v52 + 8) = v54;
        *(_BYTE *)(v52 + 16) = *(_BYTE *)(v50 + 16);
        v55 = v61;
        *(_DWORD *)(a5 + 12) = v51 + 1;
        v61 = 0;
        if (v55)
        {
          if (*((_DWORD *)v55 + 6) == 2)
          {
            if ((*((_WORD *)v55 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v55, a2);
          }
          else
          {
            *((_DWORD *)v55 + 6) -= 2;
          }
        }
      }
      else
      {
        v56 = *(_QWORD *)a5;
        v60 = 0;
        v57 = v56 + 24 * v49;
        *(_QWORD *)v57 = v48;
        *(_QWORD *)(v57 + 8) = a3;
        *(_BYTE *)(v57 + 16) = 1;
        *(_DWORD *)(a5 + 12) = v49 + 1;
        v61 = 0;
      }
      result = (unsigned int *)v60;
      v60 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
    return result;
  }
  if (v10)
  {
    v15 = *(_QWORD **)result;
LABEL_18:
    v17 = 16 * v9 - 16 * v13;
    v18 = &v15[2 * v13 + 1];
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
      }
      result = (unsigned int *)*(v18 - 1);
      *(v18 - 1) = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v18 += 2;
      v17 -= 16;
    }
    while (v17);
    v8[3] = v13;
    v11 = a2[3];
  }
  if (v13 >= v11)
    goto LABEL_86;
  while (1)
  {
    v20 = *(WebCore::EventTarget **)(*(_QWORD *)a2 + 8 * v13);
    *((_DWORD *)v20 + 6) += 4;
    v59 = v20;
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(a4, (uint64_t *)&v59, (uint64_t)&v60);
    v21 = v62;
    v22 = v59;
    v59 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, a2);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    if (!v21)
    {
      v23 = *(_QWORD *)(*((_QWORD *)v20 + 5) + 8);
      *(_DWORD *)(v23 + 24) += 2;
      (*(void (**)(WebCore::EventTarget **__return_ptr, WebCore::EventTarget *, uint64_t, _QWORD))(*(_QWORD *)v20 + 136))(&v60, v20, v23, 0);
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
      v24 = *((_QWORD *)v20 + 2);
      if ((v24 & 0x1000000000000) != 0)
        WebCore::EventListenerMap::copyEventListenersNotCreatedFromMarkupToTarget((unsigned int *)((v24 & 0xFFFFFFFFFFFFLL) + 16), v60);
      v25 = v60;
      v60 = 0;
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v20, a2);
          v46 = v60;
          v60 = 0;
          if (v46)
          {
            if (*((_DWORD *)v46 + 6) == 2)
            {
              if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v46, a2);
            }
            else
            {
              *((_DWORD *)v46 + 6) -= 2;
            }
          }
        }
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
      v20 = v25;
    }
    v26 = v8[3];
    if ((_DWORD)v26)
    {
      v27 = *(WebCore::EventTarget **)(*(_QWORD *)v8 + 16 * v26 - 8);
      if (v27)
        *((_DWORD *)v27 + 6) += 2;
    }
    else
    {
      v27 = 0;
    }
    *((_DWORD *)v20 + 6) += 2;
    v60 = v27;
    v61 = v20;
    v62 = 1;
    v28 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v28 == *(_DWORD *)(a5 + 8))
    {
      v29 = WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v28 + 1, (unint64_t)&v60);
      LODWORD(v28) = *(_DWORD *)(a5 + 12);
      v30 = *(_QWORD *)a5 + 24 * v28;
      v31 = *(_QWORD *)v29;
      *(_QWORD *)v29 = 0;
      *(_QWORD *)v30 = v31;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v30 + 8) = v32;
      *(_BYTE *)(v30 + 16) = *(_BYTE *)(v29 + 16);
    }
    else
    {
      v33 = *(_QWORD *)a5 + 24 * v28;
      v60 = 0;
      *(_QWORD *)v33 = v27;
      v34 = v61;
      v61 = 0;
      *(_QWORD *)(v33 + 8) = v34;
      *(_BYTE *)(v33 + 16) = 1;
    }
    *(_DWORD *)(a5 + 12) = v28 + 1;
    v35 = v61;
    v61 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, a2);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    result = (unsigned int *)v60;
    v60 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    if (v13 >= a2[3])
      break;
    v36 = *(WebCore::EventTarget **)(*(_QWORD *)a2 + 8 * v13);
    *((_DWORD *)v36 + 6) += 2;
    v60 = v36;
    v61 = v20;
    v37 = v8[3];
    if ((_DWORD)v37 == v8[2])
    {
      v38 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v8, v37 + 1, (unint64_t)&v60);
      v37 = v8[3];
      v39 = (_QWORD *)(*(_QWORD *)v8 + 16 * v37);
      v40 = *(_QWORD *)v38;
      *(_QWORD *)v38 = 0;
      v41 = (WebCore::Node **)(v38 + 8);
      *v39 = v40;
      v42 = (WebCore::Node **)(v39 + 1);
    }
    else
    {
      v43 = (WebCore::EventTarget **)(*(_QWORD *)v8 + 16 * v37);
      v60 = 0;
      *v43 = v36;
      v42 = v43 + 1;
      v41 = &v61;
    }
    v44 = *v41;
    *v41 = 0;
    *v42 = v44;
    v8[3] = v37 + 1;
    v45 = v61;
    v61 = 0;
    if (v45)
    {
      if (*((_DWORD *)v45 + 6) == 2)
      {
        if ((*((_WORD *)v45 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v45, a2);
      }
      else
      {
        *((_DWORD *)v45 + 6) -= 2;
      }
    }
    result = (unsigned int *)v60;
    v60 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    if (++v13 >= a2[3])
      goto LABEL_86;
  }
  __break(0xC471u);
  return result;
}

void WebCore::SpellingCorrectionCommand::~SpellingCorrectionCommand(WebCore::SpellingCorrectionCommand *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::SpellingCorrectionCommand::~SpellingCorrectionCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E33ADCC8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SpellingCorrectionCommand *)((char *)this + 312));
  v7 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, v6);
}

void WebCore::SplitElementCommand::~SplitElementCommand(WebCore::SplitElementCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33ADD98;
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v6 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitElementCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitElementCommand *)((char *)this + 24));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33ADD98;
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v6 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitElementCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitElementCommand *)((char *)this + 24));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v9);
}

void WebCore::SplitTextNodeCommand::~SplitTextNodeCommand(WebCore::SplitTextNodeCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33ADDF0;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitTextNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitTextNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33ADDF0;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitTextNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::SplitTextNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v8);
}

void WebCore::SplitTextNodeContainingElementCommand::~SplitTextNodeContainingElementCommand(WebCore::SplitTextNodeContainingElementCommand *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33ADE48;
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E33ADE48;
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,100ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode &>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    *(_DWORD *)(a2 + 24) += 2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x65)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 100;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::nextSkippingChildrenInComposedTreeIgnoringUserAgentShadow(WebCore *this, WebCore::Node *a2)
{
  WebCore *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;

  v2 = this;
  v4 = (uint64_t *)((char *)this + 32);
  v3 = *((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_4;
  if ((*(_WORD *)(v3 + 28) & 8) == 0)
    goto LABEL_4;
  v5 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_4;
  v8 = *(_QWORD *)(v5 + 88);
  if (!v8)
    goto LABEL_4;
  v9 = *(_QWORD *)(v8 + 224);
  if (!v9)
    goto LABEL_4;
  v59 = v2;
  v10 = v4;
  v11 = (*(uint64_t (**)(uint64_t, WebCore *))(*(_QWORD *)v9 + 16))(v9, v2);
  v4 = v10;
  v2 = v59;
  if (!v11)
    goto LABEL_4;
  v12 = v11;
  v13 = **(_QWORD **)(v11 + 40);
  v14 = (*(_WORD *)(v13 + 28) & 0x80) != 0 ? **(_QWORD **)(v11 + 40) : 0;
  if (*(_BYTE *)(v14 + 193))
  {
    v15 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v15 + 2;
    v16 = *(_QWORD *)(v13 + 224);
    if (v16)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v12, v13);
      v15 = *(_DWORD *)(v13 + 24) - 2;
    }
    else
    {
      v17 = 0;
    }
    if (v15)
    {
      *(_DWORD *)(v13 + 24) = v15;
    }
    else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    v18 = *(unsigned int *)(v17 + 12);
    if ((_DWORD)v18)
    {
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(*(_QWORD *)v17 + 8 * v19);
        if (v20)
        {
          if (*(WebCore **)(v20 + 8) == v59)
            break;
        }
        if (v18 == ++v19)
          goto LABEL_24;
      }
    }
    else
    {
LABEL_24:
      v19 = -1;
    }
    v21 = v19 + 1;
    v22 = v19 + 1 >= v18;
    v2 = v59;
    v4 = v10;
    if (v22 || (v23 = *(_QWORD *)(*(_QWORD *)v17 + 8 * v21)) == 0)
    {
LABEL_28:
      v24 = *v4;
      if (*v4)
      {
        if ((*(_WORD *)(v24 + 28) & 8) != 0)
        {
          v25 = *(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL;
          if (v25)
          {
            v53 = *(_QWORD *)(v25 + 88);
            if (v53)
            {
              v54 = *(_QWORD *)(v53 + 224);
              if (v54)
              {
                v55 = v2;
                v56 = v4;
                v57 = (*(uint64_t (**)(uint64_t, WebCore *))(*(_QWORD *)v54 + 16))(v54, v2);
                v4 = v56;
                v2 = v55;
                v26 = v57;
                if (v57)
                  goto LABEL_33;
              }
            }
          }
        }
      }
      if ((*((_WORD *)v2 + 14) & 0x80) != 0)
      {
        v58 = *((_QWORD *)v2 + 25);
        if (!v58)
          return 0;
        v4 = (uint64_t *)(v58 + 8);
      }
      v26 = *v4;
      if (*v4)
      {
        while (1)
        {
LABEL_33:
          v27 = (uint64_t *)(v26 + 32);
          v28 = *(_QWORD *)(v26 + 32);
          if (!v28)
            goto LABEL_36;
          if ((*(_WORD *)(v28 + 28) & 8) == 0)
            goto LABEL_36;
          v29 = *(_QWORD *)(v28 + 72) & 0xFFFFFFFFFFFFLL;
          if (!v29)
            goto LABEL_36;
          v33 = *(_QWORD *)(v29 + 88);
          if (!v33)
            goto LABEL_36;
          v34 = *(_QWORD *)(v33 + 224);
          if (!v34)
            goto LABEL_36;
          v60 = v26;
          v35 = (uint64_t *)(v26 + 32);
          v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v26);
          v27 = v35;
          v26 = v60;
          if (!v36)
            goto LABEL_36;
          v37 = v36;
          v38 = **(_QWORD **)(v36 + 40);
          v39 = (*(_WORD *)(v38 + 28) & 0x80) != 0 ? **(_QWORD **)(v36 + 40) : 0;
          if (*(_BYTE *)(v39 + 193))
          {
            v40 = *(_DWORD *)(v38 + 24);
            *(_DWORD *)(v38 + 24) = v40 + 2;
            v41 = *(_QWORD *)(v38 + 224);
            if (v41)
            {
              v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v37, v38);
              v40 = *(_DWORD *)(v38 + 24) - 2;
            }
            else
            {
              v42 = 0;
            }
            if (v40)
            {
              *(_DWORD *)(v38 + 24) = v40;
            }
            else if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v38);
            }
            v48 = *(unsigned int *)(v42 + 12);
            if ((_DWORD)v48)
            {
              v49 = 0;
              while (1)
              {
                v50 = *(_QWORD *)(*(_QWORD *)v42 + 8 * v49);
                if (v50)
                {
                  if (*(_QWORD *)(v50 + 8) == v60)
                    break;
                }
                if (v48 == ++v49)
                  goto LABEL_68;
              }
            }
            else
            {
LABEL_68:
              v49 = -1;
            }
            v51 = v49 + 1;
            v22 = v49 + 1 >= v48;
            v26 = v60;
            v27 = v35;
            if (v22)
              goto LABEL_38;
            v52 = *(_QWORD *)(*(_QWORD *)v42 + 8 * v51);
            if (!v52)
              goto LABEL_38;
            v30 = (uint64_t *)(v52 + 8);
          }
          else
          {
LABEL_36:
            v30 = (uint64_t *)(v26 + 56);
          }
          result = *v30;
          if (*v30)
            return result;
LABEL_38:
          v31 = *v27;
          if (!*v27)
            goto LABEL_41;
          if ((*(_WORD *)(v31 + 28) & 8) == 0)
            goto LABEL_41;
          v32 = *(_QWORD *)(v31 + 72) & 0xFFFFFFFFFFFFLL;
          if (!v32
            || (v43 = *(_QWORD *)(v32 + 88)) == 0
            || (v44 = *(_QWORD *)(v43 + 224)) == 0
            || (v45 = v26,
                v46 = v27,
                result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v26),
                v27 = v46,
                v26 = v45,
                !result))
          {
LABEL_41:
            if ((*(_WORD *)(v26 + 28) & 0x80) != 0)
            {
              v47 = *(_QWORD *)(v26 + 200);
              if (!v47)
                return 0;
              v27 = (uint64_t *)(v47 + 8);
            }
            result = *v27;
          }
          v26 = result;
          if (!result)
            return result;
        }
      }
      return 0;
    }
    v6 = (uint64_t *)(v23 + 8);
  }
  else
  {
LABEL_4:
    v6 = (uint64_t *)((char *)v2 + 56);
  }
  result = *v6;
  if (!*v6)
    goto LABEL_28;
  return result;
}

BOOL WebCore::ignoresContainerClip(unint64_t this, WebCore::Node *a2)
{
  unint64_t v2;
  int v3;
  _BOOL8 result;

  v2 = this & 0xFFFFFFFFFFFFLL;
  if ((this & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v3 = *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v3 + 1;
  if ((*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0 || *(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2E) == 17)
  {
    result = 0;
    if (v3 == -1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x195B34BCCLL);
    }
  }
  else
  {
    result = (*(_QWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x60) & 0x180000) == 0x100000;
    if (v3 == -1)
      goto LABEL_7;
  }
  *(_DWORD *)(v2 + 16) = v3;
  return result;
}

uint64_t *WebCore::SearchBuffer::SearchBuffer(uint64_t *a1, WebCore *this, __int16 a3)
{
  uint64_t *result;
  uint64_t v6;
  char **v7;
  int v8;
  int8x16_t *v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned __int8 *v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  result = (uint64_t *)WebCore::foldQuoteMarks(this, a1);
  v7 = (char **)(a1 + 1);
  v6 = *a1;
  if (!*a1)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    result = 0;
    a1[11] = 0;
    v11 = a1 + 11;
    v12 = (char *)(a1 + 3);
    a1[1] = (uint64_t)(a1 + 3);
    *((_DWORD *)a1 + 4) = 32;
    v13 = (_DWORD *)a1 + 5;
    a1[12] = 0;
    goto LABEL_5;
  }
  v8 = *(_DWORD *)(v6 + 16);
  v9 = *(int8x16_t **)(v6 + 8);
  v10 = *(unsigned int *)(v6 + 4);
  a1[11] = 0;
  v11 = a1 + 11;
  v12 = (char *)(a1 + 3);
  a1[1] = (uint64_t)(a1 + 3);
  a1[2] = 32;
  a1[12] = 0;
  if ((v8 & 4) == 0)
    goto LABEL_11;
  v13 = (_DWORD *)a1 + 5;
  if (v10 <= 0x20)
  {
    result = (uint64_t *)v10;
LABEL_5:
    *v13 = v10;
    v10 = (unint64_t)result;
    goto LABEL_6;
  }
  if (v10 <= 0x29)
    v35 = 41;
  else
    v35 = v10;
  result = (uint64_t *)WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 1), v35);
  *v13 = v10;
  v12 = *v7;
  if (v10 >= 0x40)
  {
    v14 = &v12[2 * (v10 & 0xFFFFFFC0)];
    v36 = 0uLL;
    v37 = *v7;
    do
    {
      v44.val[0] = *v9;
      v38 = v9[1];
      v45.val[0] = v9[2];
      v39 = v9[3];
      v9 += 4;
      v40 = v39;
      v45.val[1] = 0uLL;
      v46.val[0] = v38;
      v44.val[1] = 0uLL;
      v41 = v37;
      vst2q_s8(v41, v44);
      v41 += 32;
      v46.val[1] = 0uLL;
      vst2q_s8(v41, v46);
      v42 = v37 + 64;
      vst2q_s8(v42, v45);
      v43 = v37 + 96;
      vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
      v37 += 128;
    }
    while (v37 != v14);
    goto LABEL_7;
  }
LABEL_6:
  v14 = v12;
LABEL_7:
  v15 = &v12[2 * v10];
  while (v14 != v15)
  {
    v16 = v9->u8[0];
    v9 = (int8x16_t *)((char *)v9 + 1);
    *(_WORD *)v14 = v16;
    v14 += 2;
  }
  v10 = *((unsigned int *)a1 + 5);
  v6 = *a1;
  v9 = (int8x16_t *)a1[1];
LABEL_11:
  a1[11] = (uint64_t)v9;
  a1[12] = v10;
  *((_WORD *)a1 + 52) = a3;
  a1[14] = 0;
  a1[15] = 0;
  a1[17] = 0;
  *((_BYTE *)a1 + 144) = 1;
  *((_BYTE *)a1 + 145) = (a3 & 2) != 0;
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 16) & 4) != 0 || (v17 = *(unsigned int *)(v6 + 4), !(_DWORD)v17))
    {
LABEL_21:
      v21 = 0;
    }
    else
    {
      v18 = *(unsigned __int16 **)(v6 + 8);
      v19 = 2 * v17;
      while (1)
      {
        v20 = *v18;
        v21 = 1;
        if (v20 >> 4 == 799 || (unsigned __int16)(v20 - 12353) < 0x56u || (unsigned __int16)(v20 - 12449) < 0x5Au)
          break;
        if (v20 != 65392 && (unsigned __int16)(v20 + 154) <= 0x37u)
        {
          v21 = 1;
          break;
        }
        ++v18;
        v19 -= 2;
        if (!v19)
          goto LABEL_21;
      }
    }
    *(_OWORD *)(a1 + 19) = 0u;
    v22 = (uint64_t)(a1 + 19);
    *((_BYTE *)a1 + 146) = v21;
    *(_OWORD *)(a1 + 21) = 0u;
    v23 = *(unsigned int *)(v6 + 4);
    if ((unint64_t)(8 * v23) <= 0x2000)
      v24 = 0x2000;
    else
      v24 = 8 * v23;
    if (v24 >> 31)
    {
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    LODWORD(v23) = 0;
    *(_OWORD *)(a1 + 19) = 0u;
    v22 = (uint64_t)(a1 + 19);
    *((_BYTE *)a1 + 146) = 0;
    *(_OWORD *)(a1 + 21) = 0u;
    v24 = 0x2000;
  }
  v25 = WTF::fastMalloc((WTF *)(2 * v24));
  *((_DWORD *)a1 + 30) = v24;
  a1[14] = v25;
  a1[16] = v24 >> 2;
  v26 = *((_WORD *)a1 + 52);
  if ((v26 & 2) == 0 || !(_DWORD)v23)
    goto LABEL_49;
  v27 = *a1;
  if (!*a1 || (v28 = *(_DWORD *)(v27 + 4)) == 0)
  {
    v25 = 0u;
    goto LABEL_44;
  }
  v29 = *(_DWORD *)(v27 + 16);
  v30 = *(unsigned __int8 **)(v27 + 8);
  if ((v29 & 4) != 0)
    v25 = *v30;
  else
    v25 = *(unsigned __int16 *)v30;
  if ((v25 & 0xF800) != 0xD800)
  {
    if (v25 > 0xFF)
      goto LABEL_46;
LABEL_44:
    if (!WebCore::isSeparator(char32_t)::latin1SeparatorTable[v25])
      goto LABEL_49;
    goto LABEL_48;
  }
  if (v28 >= 2)
  {
    v31 = (v25 & 0x400) != 0 || (_DWORD)v23 == 1;
    if (!v31)
    {
      v32 = (v29 & 4) != 0 ? v30[1] : *((unsigned __int16 *)v30 + 1);
      v31 = (v32 & 0xFC00) == 56320;
      v33 = v32 + ((_DWORD)v25 << 10) - 56613888;
      if (v31)
        LODWORD(v25) = v33;
    }
  }
LABEL_46:
  v25 = u_charType(v25);
  if (((1 << v25) & 0x3FF97000) != 0)
  {
    v26 = *((_WORD *)a1 + 52);
LABEL_48:
    *((_WORD *)a1 + 52) = v26 & 0xFFFD;
    *((_BYTE *)a1 + 145) = 0;
  }
LABEL_49:
  WebCore::searcher((WebCore *)v25);
  usearch_getCollator();
  if ((a1[13] & 1) != 0)
    v34 = 1;
  else
    v34 = 2;
  if (ucol_getStrength() != v34)
  {
    ucol_setStrength();
    usearch_reset();
  }
  usearch_setAttribute();
  usearch_setPattern();
  if (*((_BYTE *)a1 + 146))
    WebCore::normalizeCharacters(*v11, v23, v22);
  return a1;
}

uint64_t WebCore::searcher(WebCore *this)
{
  uint64_t v1;
  const char *v3;
  const char *v4;
  size_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  WTF *v10;
  WTF::StringImpl *v11;

  if (_MergedGlobals_177 == 1)
    return qword_1ECE832C0;
  v3 = (const char *)WTF::currentSearchLocaleID(this);
  v4 = v3;
  if (v3)
  {
    v5 = strlen(v3);
    if (v5 >> 31)
      goto LABEL_21;
  }
  else
  {
    v5 = 0;
  }
  v6 = (v5 + 17);
  if (__OFADD__((_DWORD)v5, 17) || (WTF::tryFastCompactMalloc((WTF *)(v6 + 20)), !v11))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x195B35184);
  }
  v7 = (char *)v11 + 20;
  *(_DWORD *)v11 = 2;
  *((_DWORD *)v11 + 1) = v6;
  *((_QWORD *)v11 + 1) = (char *)v11 + 20;
  *((_DWORD *)v11 + 4) = 4;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      *v7 = *v4;
    else
      memcpy((char *)v11 + 20, v4, v5);
  }
  v8 = &v7[v5];
  *(_OWORD *)v8 = *(_OWORD *)"@collation=search";
  v8[16] = 104;
  WTF::String::utf8();
  v1 = usearch_open();
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v9);
    else
      --*(_DWORD *)v10;
  }
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
  else
    *(_DWORD *)v11 -= 2;
  qword_1ECE832C0 = v1;
  _MergedGlobals_177 = 1;
  return v1;
}

uint64_t WebCore::normalizeCharacters(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t result;

  unorm2_getNFCInstance();
  if (*(_DWORD *)(a3 + 8) < a2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B3531CLL);
    }
    v5 = *(void **)a3;
    v6 = *(unsigned int *)(a3 + 12);
    v7 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(a3 + 8) = a2;
    *(_QWORD *)a3 = v7;
    memcpy(v7, v5, 2 * v6);
    if (v5)
    {
      if (*(void **)a3 == v5)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v8);
    }
  }
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a3 + 8);
  result = unorm2_normalize();
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

uint64_t WebCore::isSmallKanaLetter(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 <= 12783)
  {
    if (((a1 - 12419) > 0x26 || ((1 << (a1 + 125)) & 0x55400C0815) == 0)
      && ((a1 - 12483) > 0x33 || ((1 << (a1 + 61)) & 0xC081500000001) == 0))
    {
      v3 = a1 - 12353;
      if (v3 > 0x22 || ((1 << v3) & 0x400000155) == 0)
        return 0;
    }
  }
  else if ((a1 - 12784) >= 0x10 && (a1 - 65383) >= 9)
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::composedVoicedSoundMark(int a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  unsigned int v5;

  result = 1;
  v3 = a1 - 76;
  if ((a1 - 12364) <= 0x31)
  {
    if (((1 << v3) & 0x124902A555555) != 0)
      return result;
    if (((1 << v3) & 0x2492000000000) != 0)
      return 2;
  }
  v4 = (a1 - 12436);
  if (v4 <= 0x3F)
  {
    if (((1 << (a1 + 108)) & 0x902A555555000001) != 0)
      return result;
    if (v4 == 61)
      return 2;
  }
  v5 = a1 - 12500;
  if (v5 > 0x26)
    return 0;
  if (((1 << v5) & 0x7900000124) == 0)
  {
    if (((1 << v5) & 0x249) != 0)
      return 2;
    return 0;
  }
  return result;
}

void WebCore::SearchBuffer::~SearchBuffer(WTF **this)
{
  WebCore *v2;
  void *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  WebCore::searcher((WebCore *)this);
  v2 = (WebCore *)usearch_setPattern();
  WebCore::searcher(v2);
  usearch_setText();
  v4 = this[21];
  if (v4)
  {
    this[21] = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v4, v3);
  }
  v5 = this[19];
  if (v5)
  {
    this[19] = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v5, v3);
  }
  v6 = this[14];
  if (v6)
  {
    this[14] = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v6, v3);
  }
  v7 = this[1];
  if (this + 3 != (WTF **)v7 && v7)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, v3);
  }
  v8 = *this;
  *this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v8 -= 2;
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::ElementRule)#1},WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::AttributeRule)#1},WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::ClassRule)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;

  v2 = *a1;
  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    v5 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v2 + 96) + 24);
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      WTF::StringImpl::destroy(v3, a2);
  }
  else
  {
    v5 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v2 + 96) + 24);
  }
  return v3 == v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::ElementRule)#1},WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::AttributeRule)#1},WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::ClassRule)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>(uint64_t *a1, WTF::StringImpl **a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t AttributeInternal;
  const WTF::StringImpl *v9;
  WTF **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v5 = *a1;
  v7 = *a2;
  v6 = a2[1];
  if (*a2)
    *(_DWORD *)v7 += 2;
  v16 = v7;
  if (v6)
    *(_DWORD *)v6 += 2;
  v17 = v6;
  AttributeInternal = WebCore::Element::getAttributeInternal(*(WebCore::Element **)(v5 + 8), (const WTF::AtomString *)&v16, a3, a4, a5);
  v10 = (WTF **)(AttributeInternal + 8);
  if (!AttributeInternal)
    v10 = (WTF **)MEMORY[0x1E0CBF2F8];
  v12 = WTF::equalIgnoringASCIICase(*v10, v17, v9);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v12;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::ElementRule)#1},WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::AttributeRule)#1},WebCore::TextManipulationControllerExclusionRule::match(WebCore::Element const&)::{lambda(WebCore::TextManipulationControllerExclusionRule::ClassRule)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  _BOOL8 v8;

  v2 = *a1;
  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v3 += 2;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 104);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    v8 = 0;
    if (!v3)
      return v8;
    goto LABEL_9;
  }
  v6 = 0;
  do
  {
    v7 = *(WTF::StringImpl **)(v5 + 16 + 8 * v6);
    v8 = v7 == v3;
    if (v7 == v3)
      break;
    ++v6;
  }
  while (v6 < *(unsigned int *)(v5 + 12));
  if (v3)
  {
LABEL_9:
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v8;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WebCore::TextManipulationControllerExclusionRule::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = 0;
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (uint64_t *)(v4 + 16 * i);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          *(_QWORD *)v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *(_QWORD *)v23 = v24;
          *(_BYTE *)(v23 + 8) = *(_BYTE *)(v4 + 16 * i + 8);
          v25 = *v12;
          *v12 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v8);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WebCore::ParagraphContentIterator *WebCore::ParagraphContentIterator::ParagraphContentIterator(WebCore::ParagraphContentIterator *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  WebCore::ParagraphContentIterator *result;
  void *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::Node *v15[2];
  WebCore::Node *v16;
  char v17;

  result = (WebCore::ParagraphContentIterator *)WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)a2, (uint64_t *)a3, (uint64_t)v15);
  if (v17)
  {
    WebCore::TextIterator::TextIterator((uint64_t)this, v15, 8);
    if (v17)
    {
      v8 = v16;
      v16 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v7);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      v9 = v15[0];
      v15[0] = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v7);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
    }
    WebCore::Position::firstNode((uint64_t)a2, (uint64_t *)this + 32);
    WebCore::Position::firstNode((uint64_t)a3, (uint64_t *)this + 33);
    *((_BYTE *)this + 272) = 0;
    *((_BYTE *)this + 288) = 0;
    if (*((_QWORD *)this + 12))
    {
      v10 = WebCore::TextIterator::node((int32x2_t *)this);
      if (!v10)
        goto LABEL_14;
      v12 = v10;
      v13 = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v10 + 24) = v13 + 2;
      v14 = *((_QWORD *)this + 32);
      if (v13)
      {
        *(_DWORD *)(v10 + 24) = v13;
      }
      else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
      }
      if (v12 == v14)
LABEL_14:
        WebCore::ParagraphContentIterator::advanceIteratorNodeAndUpdateText((int32x2_t *)this);
    }
    return this;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned int *WebCore::ParagraphContentIterator::advanceIteratorNodeAndUpdateText(int32x2_t *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  int32x2_t v6;
  char *v7;
  int32x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  unsigned int i;
  uint64_t v12;
  int32x2_t v13;
  int v14;
  __int32 v15;
  __int32 v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int *result;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  WTF *v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  char v43;

  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 1;
  v38 = 0;
  v39 = 0;
  while (this[12])
  {
    v2 = WebCore::TextIterator::node(this);
    if (v2)
    {
      v4 = v2;
      v5 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v5 + 2;
      v6 = this[32];
      if (v5)
      {
        *(_DWORD *)(v2 + 24) = v5;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      if (v4 != *(_QWORD *)&v6)
        break;
    }
    v7 = (char *)this[18];
    v8 = this[19];
    v9 = this[13];
    if (v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)&v9 + 48);
      for (i = 0; ; ++i)
      {
        v12 = v10 & 0xFFFFFFFFFFFFLL;
        if (!v12)
          break;
        v10 = *(_QWORD *)(v12 + 48);
      }
      this[14] = vadd_s32(this[14], vdup_n_s32(i));
      this[13] = 0;
      if (*(_DWORD *)(*(_QWORD *)&v9 + 24) == 2)
      {
        if ((*(_WORD *)(*(_QWORD *)&v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef(*(WebCore::Node **)&v9, v3);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)&v9 + 24) -= 2;
      }
    }
    v13 = this[12];
    v14 = *(_DWORD *)(*(_QWORD *)&v13 + 24);
    v15 = this[14].i32[0];
    *(_DWORD *)(*(_QWORD *)&v13 + 24) = v14 + 4;
    v16 = this[14].i32[1];
    v17 = v14 + 2;
    if (v17)
    {
      *(_DWORD *)(*(_QWORD *)&v13 + 24) = v17;
    }
    else
    {
      if ((*(_WORD *)(*(_QWORD *)&v13 + 30) & 0x400) != 0)
        goto LABEL_38;
      WebCore::Node::removedLastRef(*(WebCore::Node **)&v13, v3);
      v17 = *(_DWORD *)(*(_QWORD *)&v13 + 24);
    }
    v18 = v17 - 2;
    if (v18)
    {
      *(_DWORD *)(*(_QWORD *)&v13 + 24) = v18;
      goto LABEL_16;
    }
LABEL_38:
    if ((*(_WORD *)(*(_QWORD *)&v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef(*(WebCore::Node **)&v13, v3);
LABEL_16:
    if (v15 == v16)
    {
      if (v7 == "\n" || v8.u32[0] != 1)
      {
        if (v7 == "\n" && v8.u32[0] == 1)
          goto LABEL_27;
      }
      else
      {
        if ((*(_QWORD *)&v8 & 0xFF00000000) != 0)
          v19 = *v7;
        else
          v19 = *(unsigned __int16 *)v7;
        if (v19 == 10)
        {
LABEL_27:
          WebCore::ParagraphContentIterator::appendToText((WTF::StringImpl *)&v38, &v40);
          v37 = 0;
          LODWORD(v20) = HIDWORD(v39);
          if (HIDWORD(v39) == (_DWORD)v39)
          {
            v22 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)&v37);
            v20 = HIDWORD(v39);
            v23 = v38;
            v24 = *v22;
            *v22 = 0;
            *((_QWORD *)v23 + v20) = v24;
          }
          else
          {
            *((_QWORD *)v38 + HIDWORD(v39)) = 0;
          }
          HIDWORD(v39) = v20 + 1;
          v21 = v37;
          v37 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
    else if ((*(_QWORD *)&v8 & 0xFF00000000) != 0)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      WTF::StringBuilder::append();
    }
    WebCore::TextIterator::advance((WebCore::TextIterator *)this, (WTF::StringImpl *)v3);
  }
  WebCore::ParagraphContentIterator::appendToText((WTF::StringImpl *)&v38, &v40);
  result = (unsigned int *)&this[34];
  if (this[36].i8[0])
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result, (unsigned int *)&v38);
    v27 = HIDWORD(v39);
  }
  else
  {
    v28 = HIDWORD(v39);
    *(_QWORD *)result = 0;
    this[35] = 0;
    this[35].i32[1] = v28;
    if ((_DWORD)v28)
    {
      if (v28 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v28));
      this[35].i32[0] = v28;
      this[34] = (int32x2_t)v33;
      v27 = HIDWORD(v39);
      if (HIDWORD(v39))
      {
        v34 = v38;
        v35 = 8 * HIDWORD(v39);
        do
        {
          v36 = *(_DWORD **)v34;
          if (*(_QWORD *)v34)
            *v36 += 2;
          *v33++ = v36;
          v34 = (WTF *)((char *)v34 + 8);
          v35 -= 8;
        }
        while (v35);
      }
    }
    else
    {
      v27 = 0;
    }
    this[36].i8[0] = 1;
  }
  v29 = v38;
  if (v27)
  {
    v31 = 8 * v27;
    do
    {
      v32 = *(WTF::StringImpl **)v29;
      *(_QWORD *)v29 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v25);
        else
          *(_DWORD *)v32 -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v31 -= 8;
    }
    while (v31);
    v29 = v38;
    if (!v38)
      goto LABEL_53;
    goto LABEL_70;
  }
  if (v38)
  {
LABEL_70:
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v29, v25);
  }
LABEL_53:
  v30 = v41;
  v41 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v25);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = (unsigned int *)v40;
  v40 = 0;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ParagraphContentIterator::appendToText(WTF::StringImpl *result, WTF::StringImpl **this)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*((_DWORD *)this + 4))
  {
    v3 = (uint64_t)result;
    v4 = *this;
    if (*this
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)this),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)this),
          (v4 = *this) != 0))
    {
      *(_DWORD *)v4 += 2;
    }
    v12 = v4;
    v5 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(v3 + 8))
    {
      v7 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v5 + 1, (unint64_t)&v12);
      v8 = *(unsigned int *)(v3 + 12);
      v9 = *(_QWORD *)v3;
      v10 = *v7;
      *v7 = 0;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      v11 = v12;
      *(_DWORD *)(v3 + 12) = v8 + 1;
      v12 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)this);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = v4;
      *(_DWORD *)(v3 + 12) = v5 + 1;
    }
    v6 = *this;
    *this = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)this);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = this[1];
    this[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)this);
      else
        *(_DWORD *)result -= 2;
    }
    *((_DWORD *)this + 4) = 0;
  }
  return result;
}

void WebCore::ParagraphContentIterator::~ParagraphContentIterator(WebCore::ParagraphContentIterator *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  if (*((_BYTE *)this + 288))
  {
    v3 = *((unsigned int *)this + 71);
    if ((_DWORD)v3)
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 34);
      v8 = 8 * v3;
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    v4 = (WTF *)*((_QWORD *)this + 34);
    if (v4)
    {
      *((_QWORD *)this + 34) = 0;
      *((_DWORD *)this + 70) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextIterator::~TextIterator(this, a2);
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::TextManipulationToken>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (result != a2)
  {
    v4 = a3 + 16;
    v5 = (char *)result + 16;
    do
    {
      v6 = v5 - 16;
      *(_QWORD *)(v4 - 16) = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      *((_QWORD *)v5 - 1) = 0;
      *(_QWORD *)(v4 - 8) = v7;
      std::__optional_copy_assign_base<WebCore::TextManipulationTokenInfo,false>::__optional_copy_assign_base[abi:sn180100](v4, (uint64_t *)v5);
      *(_BYTE *)(v4 + 72) = v5[72];
      if (v5[64])
      {
        v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v8);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 - 1);
      *((_QWORD *)v5 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v4 += 96;
      v5 += 96;
    }
    while (v6 + 96 != (char *)a2);
  }
  return result;
}

double std::__optional_copy_assign_base<WebCore::TextManipulationTokenInfo,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  double result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(a1 + 16) = v4;
    v5 = *(_DWORD *)(a1 + 24) & 0xFFFFFFFE | a2[3] & 1;
    *(_DWORD *)(a1 + 24) = v5;
    v6 = v5 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 6) >> 1) & 1));
    *(_DWORD *)(a1 + 24) = v6;
    v7 = v6 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 6) >> 2) & 1));
    *(_DWORD *)(a1 + 24) = v7;
    v8 = v7 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 6) >> 3) & 7));
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 24) = a2[3] & 0xFFFFFFC0 | v8 & 0x3F;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    result = *(double *)((char *)a2 + 44);
    *(double *)(a1 + 44) = result;
    *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 6) &= ~1u;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::findClosestPlainText(WebCore::SimpleRange const&,WTF::String const&,WTF::OptionSet<WebCore::FindOption>,unsigned long long)::$_0,BOOL,WebCore::CharacterRange>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *(uint64_t **)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = a2 + a3 - v4;
  v6 = a2 - v4;
  if (v6 < 0)
    v6 = -v6;
  if (v5 < 0)
    v5 = -v5;
  if (v5 < (unint64_t)v6)
    v6 = v5;
  if (v6 > (unint64_t)*v3 || v6 == *v3 && (**(_WORD **)(a1 + 24) & 8) == 0)
    return 0;
  v8 = *(_QWORD **)(a1 + 32);
  *v8 = a2;
  v8[1] = a3;
  if (!v6 && (**(_WORD **)(a1 + 24) & 8) == 0)
    return 1;
  result = 0;
  *v3 = v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::findPlainText(WebCore::SimpleRange const&,WTF::String const&,WTF::OptionSet<WebCore::FindOption>)::$_0,BOOL,WebCore::CharacterRange>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  result = **(unsigned __int8 **)(a1 + 16);
  *v3 = a2;
  v3[1] = a3;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = *((_DWORD *)v11 + 4);
          if (v14 < 0x100)
            v15 = WTF::StringImpl::hashSlowCase(v11);
          else
            v15 = v14 >> 8;
          v16 = 0;
          do
          {
            v17 = v15 & v13;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = v12 + 16 * v17;
          *(_QWORD *)v18 = 0;
          v19 = *v10;
          *v10 = 0;
          *(_QWORD *)v18 = v19;
          *(_BYTE *)(v18 + 8) = *(_BYTE *)(v4 + 16 * i + 8);
          v20 = *v10;
          *v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v8);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

char *WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl *)((char *)v5 + 96 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *(WTF::StringImpl **)a1;
        return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
      if (v9 < 0x2AAAAAB)
      {
        v10 = 96 * v9;
        v11 = WTF::fastMalloc((WTF *)(96 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFE0) / 0x60;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v5, v6, v11);
        v13 = *(WTF::StringImpl **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v13 = *(WTF::StringImpl **)a1;
        }
        return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x195B366BCLL);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0x2AAAAAB)
      goto LABEL_28;
    v17 = (WTF::StringImpl *)((char *)v5 + 96 * *(unsigned int *)(a1 + 12));
    v18 = 96 * v16;
    v19 = WTF::fastMalloc((WTF *)(96 * v16));
    *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v5, v17, v19);
    if (v5)
    {
      if (*(WTF::StringImpl **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return (char *)v3;
}

unsigned int *WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *((_DWORD *)v5 + 1);
      if (v6)
        WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*(v5 - 1), (WTF::StringImpl *)((char *)*(v5 - 1) + 96 * v6));
      v7 = *(v5 - 1);
      if (v7)
      {
        *(v5 - 1) = 0;
        *(_DWORD *)v5 = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = (uint64_t)*(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t *WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  __int128 v22;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x2AAAAAB)
  {
    v5 = 3 * a3;
    v6 = 96 * a3;
    v7 = WTF::fastMalloc((WTF *)(96 * a3));
    *((_DWORD *)v3 + 2) = (v6 & 0xFFFFFFE0) / 0x60;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    v9 = (__int128 *)(a2 + 40);
    do
    {
      v10 = (uint64_t)v9 - 40;
      v11 = *v3;
      v12 = (_QWORD *)(*v3 + 96 * v8);
      *v12 = *((_QWORD *)v9 - 5);
      v13 = v12 + 1;
      v14 = (_DWORD *)*((_QWORD *)v9 - 4);
      if (v14)
        *v14 += 2;
      *v13 = v14;
      v15 = v11 + 96 * v8;
      *(_BYTE *)(v15 + 16) = 0;
      v16 = v15 + 16;
      *(_BYTE *)(v16 + 64) = 0;
      v17 = (_BYTE *)(v16 + 64);
      if (*((_BYTE *)v9 + 40))
      {
        v18 = (_DWORD *)*((_QWORD *)v9 - 3);
        if (v18)
          *v18 += 2;
        *(_QWORD *)v16 = v18;
        v19 = (_DWORD *)*((_QWORD *)v9 - 2);
        if (v19)
          *v19 += 2;
        *(_QWORD *)(v11 + 96 * v8 + 24) = v19;
        v20 = (_DWORD *)*((_QWORD *)v9 - 1);
        if (v20)
          *v20 += 2;
        v21 = v11 + 96 * v8;
        *(_QWORD *)(v21 + 32) = v20;
        v22 = *v9;
        *(_OWORD *)(v21 + 56) = v9[1];
        *(_OWORD *)(v21 + 40) = v22;
        *(_BYTE *)(v21 + 72) = *((_BYTE *)v9 + 32);
        *v17 = 1;
      }
      *(_BYTE *)(v11 + 96 * v8 + 88) = *((_BYTE *)v9 + 48);
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v9 += 6;
    }
    while (v10 + 96 != a2 + 32 * v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebCore::TextManipulationController::ManipulationUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[8 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195B36A34);
      }
      v18 = &v5[8 * *(unsigned int *)(a1 + 12)];
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::TextManipulationController::ManipulationUnit>::move(v5, v18, v19);
      if (v5)
      {
        if (*(unsigned int **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(unsigned int **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195B36A3CLL);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::TextManipulationController::ManipulationUnit>::move(v5, v6, v11);
      v13 = *(unsigned int **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(unsigned int **)a1;
      }
    }
    return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 5)];
  }
  return (unsigned int *)v3;
}

unsigned int *WTF::VectorMover<false,WebCore::TextManipulationController::ManipulationUnit>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  WTF *v9;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = v5[4];
      v5[4] = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = v5[5];
      v5[5] = 0;
      *(_DWORD *)(a3 + 20) = v7;
      LOWORD(v7) = *((_WORD *)v5 + 12);
      *(_BYTE *)(a3 + 26) = *((_BYTE *)v5 + 26);
      *(_WORD *)(a3 + 24) = v7;
      v8 = v5[5];
      if (v8)
        WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*((WTF::StringImpl **)v5 + 1), (WTF::StringImpl *)(*((_QWORD *)v5 + 1) + 96 * v8));
      v9 = (WTF *)*((_QWORD *)v5 + 1);
      if (v9)
      {
        *((_QWORD *)v5 + 1) = 0;
        v5[4] = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v5 += 8;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TextManipulationController::scheduleObservationUpdate(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33ADFF8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextManipulationController::scheduleObservationUpdate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33ADFF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::Node *WTF::Detail::CallableWrapper<WebCore::TextManipulationController::scheduleObservationUpdate(void)::$_0,void>::call(WebCore::Node *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  WebCore::Node *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t j;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  WebCore::Node *v78;
  unint64_t v79;
  char v80;
  void *v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  __int16 v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  int v91;
  uint64_t v92;
  WebCore::Node *v93;
  int v94;
  void *v95;
  WebCore::Node *v96;
  WebCore::Node *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  WebCore::Node *v102;
  int v103;
  char v104;
  WebCore::Node *v105;
  int v106;
  char v107;
  WebCore::Node *v108;
  int v109;
  char v110;
  uint64_t *v111;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  *(_BYTE *)(v3 + 80) = 0;
  v111 = 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_5:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_6;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_5;
  if (!(_DWORD)v6)
  {
    v7 = *(_QWORD *)(v3 + 40);
    goto LABEL_9;
  }
  v58 = 8 * v6;
  v7 = *(_QWORD *)(v3 + 40);
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v58 -= 8;
    if (!v58)
    {
      v7 = v5;
      break;
    }
  }
LABEL_6:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_10;
  }
  LODWORD(v6) = *(_DWORD *)(v4 - 4);
LABEL_9:
  v8 = v4 + 8 * v6;
LABEL_10:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v9 = v7 + 8;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v10 = 0;
  if (v7 != v10)
  {
    v11 = (uint64_t *)(v3 + 24);
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      ++*(_DWORD *)(v3 + 32);
      v13 = *(_QWORD *)(v12 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFLL;
      if ((v13 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_56;
      if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 8))
        goto LABEL_56;
      v15 = *v11;
      if (!*v11)
        goto LABEL_56;
      v16 = *(_DWORD *)(v15 - 8);
      v17 = (v14 + ~(v13 << 32)) ^ ((unint64_t)(v14 + ~(v13 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      for (i = 1; ; ++i)
      {
        v22 = *(_QWORD *)(v15 + 8 * v20);
        if (!v22)
          goto LABEL_56;
        if (v22 != -1 && v22 == v14)
          break;
        v20 = (v20 + i) & v16;
      }
      v24 = **(_QWORD **)(v12 + 40);
      if (v24)
        v25 = (*(_WORD *)(v24 + 28) & 0x80) == 0;
      else
        v25 = 1;
      if (v25)
        goto LABEL_47;
      v26 = *(_QWORD *)(v24 + 200);
      if (!v26)
        goto LABEL_47;
      v27 = *(_QWORD *)(v26 + 8);
      if (!v27
        || (*(_WORD *)(v27 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        goto LABEL_47;
      }
      *(_DWORD *)(v27 + 24) += 2;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 880))(v27) || (*(_BYTE *)(v27 + 169) & 4) == 0)
        break;
      if (*(_DWORD *)(v27 + 24) != 2)
      {
        *(_DWORD *)(v27 + 24) -= 2;
        goto LABEL_56;
      }
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
      {
        v34 = (WebCore::Node *)v27;
LABEL_79:
        WebCore::Node::removedLastRef(v34, a2);
      }
LABEL_56:
      v35 = v5;
      if (v7 + 8 != v5)
      {
        v35 = v7 + 8;
        while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
        {
          v35 += 8;
          if (v35 == v5)
          {
            v35 = v5;
            break;
          }
        }
      }
      v7 = v8;
      if (v35 != v8)
      {
        v7 = v35;
        if (!*(_QWORD *)(*(_QWORD *)v35 + 8))
        {
          while (1)
          {
            v36 = v7 + 8;
            v7 = v5;
            if (v36 != v5)
            {
              v7 = v36;
              while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
              {
                v7 += 8;
                if (v7 == v5)
                {
                  v7 = v5;
                  break;
                }
              }
            }
            if (v7 == v8)
              break;
            if (*(_QWORD *)(*(_QWORD *)v7 + 8))
              goto LABEL_72;
          }
          v7 = v8;
        }
      }
LABEL_72:
      ++*(_DWORD *)(v3 + 48);
      if (v7 == v10)
        goto LABEL_84;
    }
    v28 = *(_WORD *)(v27 + 230);
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, a2);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
    if ((v28 & 0x100) != 0)
      goto LABEL_56;
LABEL_47:
    v29 = *(_DWORD *)(v3 + 36);
    v30 = *(_DWORD *)(v3 + 32) + 1;
    *(_DWORD *)(v3 + 32) = v30;
    if (v30 > v29)
    {
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v3 + 24), &v108);
      v31 = 0;
      *(_DWORD *)(v3 + 32) = 0;
      v32 = *(_QWORD *)(v3 + 24);
      if (v32)
      {
        v31 = *(_DWORD *)(v32 - 12);
        if (v31 > 0x7FFFFFFE)
          v31 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v3 + 36) = 2 * v31;
    }
    v33 = (WTF *)(*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFLL);
    if (v33 && *(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFLL) + 8))
      WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v3 + 24), v33);
    *(_DWORD *)(v12 + 24) += 2;
    v105 = (WebCore::Node *)v12;
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v111, (uint64_t *)&v105, (uint64_t)&v108);
    v34 = v105;
    v105 = 0;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) != 2)
      {
        *((_DWORD *)v34 + 6) -= 2;
        goto LABEL_56;
      }
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        goto LABEL_79;
    }
    goto LABEL_56;
  }
LABEL_84:
  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v3 + 40), a2);
  v38 = *(_QWORD *)(v3 + 56);
  if (!v38)
  {
    v39 = 0;
    v40 = 0;
LABEL_86:
    v41 = v39;
    v39 = v38 + 8 * v40;
    goto LABEL_87;
  }
  v40 = *(unsigned int *)(v38 - 4);
  v39 = v38 + 8 * v40;
  if (!*(_DWORD *)(v38 - 12))
    goto LABEL_86;
  if (!(_DWORD)v40)
  {
    v41 = *(_QWORD *)(v3 + 56);
    goto LABEL_90;
  }
  v59 = 8 * v40;
  v41 = *(_QWORD *)(v3 + 56);
  while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
  {
    v41 += 8;
    v59 -= 8;
    if (!v59)
    {
      v41 = v39;
      break;
    }
  }
LABEL_87:
  if (!v38)
  {
    v42 = 0;
    goto LABEL_91;
  }
  LODWORD(v40) = *(_DWORD *)(v38 - 4);
LABEL_90:
  v42 = v38 + 8 * v40;
LABEL_91:
  if (v42 != v41)
  {
    while (!*(_QWORD *)(*(_QWORD *)v41 + 8))
    {
      v43 = v41 + 8;
      v41 = v39;
      if (v43 != v39)
      {
        v41 = v43;
        while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
        {
          v41 += 8;
          if (v41 == v39)
          {
            v41 = v39;
            break;
          }
        }
      }
      if (v41 == v42)
      {
        v41 = v42;
        break;
      }
    }
  }
  if (v38)
    v44 = v38 + 8 * *(unsigned int *)(v38 - 4);
  else
    v44 = 0;
  if (v41 != v44)
  {
    while (1)
    {
      v45 = *(_QWORD *)(*(_QWORD *)v41 + 8);
      v46 = **(_QWORD **)(v45 + 40);
      if (v46)
        v47 = (*(_WORD *)(v46 + 28) & 0x80) == 0;
      else
        v47 = 1;
      if (v47)
        goto LABEL_117;
      v48 = *(_QWORD *)(v46 + 200);
      if (!v48)
        goto LABEL_117;
      v49 = *(_QWORD *)(v48 + 8);
      if (!v49
        || (*(_WORD *)(v49 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v49 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        goto LABEL_117;
      }
      *(_DWORD *)(v49 + 24) += 2;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 880))(v49) || (*(_BYTE *)(v49 + 169) & 4) == 0)
        break;
      if (*(_DWORD *)(v49 + 24) == 2)
      {
        if ((*(_WORD *)(v49 + 30) & 0x400) != 0)
          goto LABEL_120;
        v51 = (WebCore::Node *)v49;
LABEL_141:
        WebCore::Node::removedLastRef(v51, v37);
        goto LABEL_120;
      }
      *(_DWORD *)(v49 + 24) -= 2;
LABEL_120:
      v52 = v39;
      if (v41 + 8 != v39)
      {
        v52 = v41 + 8;
        while ((unint64_t)(*(_QWORD *)v52 + 1) <= 1)
        {
          v52 += 8;
          if (v52 == v39)
          {
            v52 = v39;
            break;
          }
        }
      }
      v41 = v42;
      if (v52 != v42)
      {
        v41 = v52;
        if (!*(_QWORD *)(*(_QWORD *)v52 + 8))
        {
          while (1)
          {
            v53 = v41 + 8;
            v41 = v39;
            if (v53 != v39)
            {
              v41 = v53;
              while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
              {
                v41 += 8;
                if (v41 == v39)
                {
                  v41 = v39;
                  break;
                }
              }
            }
            if (v41 == v42)
              break;
            if (*(_QWORD *)(*(_QWORD *)v41 + 8))
              goto LABEL_136;
          }
          v41 = v42;
        }
      }
LABEL_136:
      ++*(_DWORD *)(v3 + 64);
      if (v41 == v44)
        goto LABEL_146;
    }
    v50 = *(_WORD *)(v49 + 230);
    if (*(_DWORD *)(v49 + 24) == 2)
    {
      if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v49, v37);
    }
    else
    {
      *(_DWORD *)(v49 + 24) -= 2;
    }
    if ((v50 & 0x100) != 0)
      goto LABEL_120;
LABEL_117:
    *(_DWORD *)(v45 + 24) += 2;
    v105 = (WebCore::Node *)v45;
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v111, (uint64_t *)&v105, (uint64_t)&v108);
    v51 = v105;
    v105 = 0;
    if (v51)
    {
      if (*((_DWORD *)v51 + 6) == 2)
      {
        if ((*((_WORD *)v51 + 15) & 0x400) == 0)
          goto LABEL_141;
      }
      else
      {
        *((_DWORD *)v51 + 6) -= 2;
      }
    }
    goto LABEL_120;
  }
LABEL_146:
  result = (WebCore::Node *)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v3 + 56), v37);
  if (v111)
  {
    if (!*((_DWORD *)v111 - 3))
    {
LABEL_280:
      v98 = (uint64_t)v111;
      if (v111)
      {
        v99 = *((unsigned int *)v111 - 1);
        if ((_DWORD)v99)
        {
          v100 = v111;
          do
          {
            v101 = *v100;
            if (*v100 != -1)
            {
              *v100 = 0;
              if (v101)
              {
                if (*(_DWORD *)(v101 + 24) == 2)
                {
                  if ((*(_WORD *)(v101 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v101, v54);
                }
                else
                {
                  *(_DWORD *)(v101 + 24) -= 2;
                }
              }
            }
            ++v100;
            --v99;
          }
          while (v99);
        }
        return (WebCore::Node *)WTF::fastFree((WTF *)(v98 - 16), v54);
      }
      return result;
    }
    v55 = *((unsigned int *)v111 - 1);
    if ((_DWORD)v55)
    {
      v56 = 8 * v55;
      v57 = v111;
      while ((unint64_t)(*v57 + 1) <= 1)
      {
        ++v57;
        v56 -= 8;
        if (!v56)
          goto LABEL_231;
      }
    }
    else
    {
      v57 = v111;
    }
    v60 = &v111[v55];
    if (v57 == v60)
    {
LABEL_231:
      v61 = 0;
      v105 = 0;
      v106 = 0;
      v107 &= 0xF0u;
      goto LABEL_232;
    }
    v61 = 0;
    v62 = *v57;
LABEL_168:
    if ((*(_BYTE *)(v62 + 22) & 8) == 0)
      goto LABEL_204;
    v63 = **(_QWORD **)(v62 + 40);
    if (v63)
      v64 = (*(_WORD *)(v63 + 28) & 0x80) == 0;
    else
      v64 = 1;
    if (v64
      || (v65 = *(_QWORD *)(v63 + 200)) == 0
      || (v71 = *(_QWORD *)(v65 + 8)) == 0
      || (*(_WORD *)(v71 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v71 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
LABEL_174:
      v66 = *v57;
      if (!v61)
      {
        if ((*(_WORD *)(v66 + 28) & 4) != 0 || (v66 = *(_QWORD *)(v66 + 32)) != 0)
        {
          *(_DWORD *)(v66 + 24) += 2;
          v61 = v66;
        }
        else
        {
          v61 = 0;
        }
        goto LABEL_204;
      }
      v67 = *(_WORD *)(v61 + 28);
      if ((v67 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v66 + 40) == v61
          && (*(_WORD *)(v66 + 28) & 0xF000) != 0x9000
          && (*(_BYTE *)(v66 + 22) & 8) != 0)
        {
          goto LABEL_204;
        }
      }
      else if ((v67 & 4) != 0
             && *(_QWORD *)(v61 + 80)
             && ((*(unsigned __int8 *)(v66 + 22) ^ *(unsigned __int8 *)(v61 + 22)) & 8) == 0)
      {
        v68 = *v57;
        do
          v68 = *(_QWORD *)(v68 + 32);
        while (v68 != v61 && v68 != 0);
        if (v68)
          goto LABEL_204;
      }
      j = v61;
      if (v61 != v66)
      {
        v73 = WebCore::depth<(WebCore::TreeType)2>(v61);
        v74 = WebCore::depth<(WebCore::TreeType)2>(v66);
        v75 = v74 - v73;
        v76 = v73 >= v74;
        v77 = v73 - v74;
        if (v73 >= v74)
          v78 = (WebCore::Node *)v61;
        else
          v78 = (WebCore::Node *)v66;
        if (v76)
        {
          v79 = v77;
        }
        else
        {
          v66 = v61;
          v79 = v75;
        }
        for (; v79; --v79)
          v78 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v78);
        for (j = v66; v78 != (WebCore::Node *)v66; j = (uint64_t)v78)
        {
          v78 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v78);
          v66 = WebCore::Node::parentInComposedTree((WebCore::Node *)v66);
        }
      }
      if (j)
        *(_DWORD *)(j + 24) += 2;
      if (*(_DWORD *)(v61 + 24) == 2)
      {
        if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v61, v54);
      }
      else
      {
        *(_DWORD *)(v61 + 24) -= 2;
      }
      v61 = j;
LABEL_204:
      while (++v57 != v60)
      {
        v62 = *v57;
        if ((unint64_t)(*v57 + 1) > 1)
        {
          if (v57 != v60)
            goto LABEL_168;
          break;
        }
      }
      v105 = 0;
      v106 = 0;
      v107 &= 0xF0u;
      if (v61)
      {
        v89 = *(_WORD *)(v61 + 28);
        if ((v89 & 8) != 0)
        {
          v90 = *(_DWORD *)(v61 + 24);
          v91 = v90 + 2;
          *(_DWORD *)(v61 + 24) = v90 + 2;
          if ((v89 & 0x10) != 0
            && ((v92 = *(_QWORD *)(*(_QWORD *)(v61 + 96) + 24), v92 == *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
             || v92 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
          {
            v91 = v90 + 4;
            *(_DWORD *)(v61 + 24) = v90 + 4;
            v105 = (WebCore::Node *)v61;
            v106 = 0;
            v107 = 1;
            v93 = (WebCore::Node *)v61;
          }
          else
          {
            v93 = 0;
          }
          v94 = v91 - 2;
          if (v94)
          {
            *(_DWORD *)(v61 + 24) = v94;
          }
          else if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v61, v54);
            v93 = v105;
          }
          if (v93)
            goto LABEL_238;
        }
        v80 = 0;
LABEL_233:
        WebCore::firstPositionInOrBeforeNode(v61, (WebCore::Node *)v54, (uint64_t)&v108);
        v82 = v108;
        v108 = 0;
        v83 = v105;
        v105 = v82;
        if (v83)
        {
          if (*((_DWORD *)v83 + 6) == 2)
          {
            if ((*((_WORD *)v83 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v83, v81);
              v96 = v108;
              v106 = v109;
              v107 = v110;
              v108 = 0;
              if (v96)
              {
                if (*((_DWORD *)v96 + 6) == 2)
                {
                  if ((*((_WORD *)v96 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v96, v95);
                }
                else
                {
                  *((_DWORD *)v96 + 6) -= 2;
                }
              }
LABEL_237:
              if ((v80 & 1) != 0)
              {
                v102 = 0;
                v103 = 0;
                v104 &= 0xF0u;
                WebCore::TextManipulationController::observeParagraphs((unsigned int *)v3, (const WebCore::Position *)&v105, (const WebCore::Position *)&v102);
                v88 = *(_QWORD *)(v3 + 128);
                v87 = 1;
                if (!v88)
                  goto LABEL_270;
                goto LABEL_245;
              }
LABEL_238:
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 208))(v61) & 1) != 0)
              {
                v84 = *(_WORD *)(v61 + 28);
                *(_DWORD *)(v61 + 24) += 2;
                if ((v84 & 1) != 0)
                {
                  v86 = *(_QWORD *)(v61 + 80);
                  if (v86)
                    LODWORD(v86) = *(_DWORD *)(v86 + 4);
                  v102 = (WebCore::Node *)v61;
                  v103 = v86;
                  v85 = v104 & 0xF0;
                }
                else
                {
                  v102 = (WebCore::Node *)v61;
                  v103 = 0;
                  v85 = v104 & 0xF0 | 4;
                }
              }
              else
              {
                *(_DWORD *)(v61 + 24) += 2;
                v102 = (WebCore::Node *)v61;
                v103 = 0;
                v85 = v104 & 0xF0 | 2;
              }
              v104 = v85;
              WebCore::TextManipulationController::observeParagraphs((unsigned int *)v3, (const WebCore::Position *)&v105, (const WebCore::Position *)&v102);
              v87 = 0;
              v88 = *(_QWORD *)(v3 + 128);
              if (!v88)
                goto LABEL_247;
LABEL_245:
              if (v61 && !*(_DWORD *)(v88 - 12))
              {
LABEL_247:
                WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v3 + 24, v61, (uint64_t)&v108);
LABEL_271:
                v97 = v102;
                v102 = 0;
                if (v97)
                {
                  if (*((_DWORD *)v97 + 6) == 2)
                  {
                    if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v97, v54);
                  }
                  else
                  {
                    *((_DWORD *)v97 + 6) -= 2;
                  }
                }
                result = v105;
                v105 = 0;
                if (result)
                {
                  if (*((_DWORD *)result + 6) == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                      result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v54);
                  }
                  else
                  {
                    *((_DWORD *)result + 6) -= 2;
                  }
                }
                if ((v87 & 1) == 0)
                {
                  if (*(_DWORD *)(v61 + 24) == 2)
                  {
                    if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
                      result = (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v61, v54);
                  }
                  else
                  {
                    *(_DWORD *)(v61 + 24) -= 2;
                  }
                }
                goto LABEL_280;
              }
LABEL_270:
              WebCore::TextManipulationController::flushPendingItemsForCallback((unsigned int *)v3);
              goto LABEL_271;
            }
          }
          else
          {
            *((_DWORD *)v83 + 6) -= 2;
          }
        }
        v106 = v109;
        v107 = v110;
        goto LABEL_237;
      }
LABEL_232:
      v80 = 1;
      goto LABEL_233;
    }
    *(_DWORD *)(v71 + 24) += 2;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 880))(v71) & 1) != 0)
    {
      v72 = *(_DWORD *)(v71 + 24) - 2;
      if ((*(_BYTE *)(v71 + 169) & 4) != 0)
      {
        if (*(_DWORD *)(v71 + 24) == 2)
        {
          if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v71, v54);
        }
        else
        {
          *(_DWORD *)(v71 + 24) = v72;
        }
        goto LABEL_204;
      }
      if (*(_DWORD *)(v71 + 24) != 2)
        goto LABEL_201;
    }
    else
    {
      v72 = *(_DWORD *)(v71 + 24) - 2;
      if (*(_DWORD *)(v71 + 24) != 2)
      {
LABEL_201:
        *(_DWORD *)(v71 + 24) = v72;
        goto LABEL_174;
      }
    }
    if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v71, v54);
    goto LABEL_174;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  unsigned int v12;

  if (result[2] < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 48 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(48 * a2));
      v2[2] = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 48 * v4;
        v9 = (char *)v3 + 32;
        do
        {
          v10 = *((_OWORD *)v9 - 1);
          *(_OWORD *)v7 = *((_OWORD *)v9 - 2);
          *((_OWORD *)v7 + 1) = v10;
          *((_QWORD *)v7 + 4) = 0;
          *((_QWORD *)v7 + 5) = 0;
          v11 = *(WTF::StringImpl **)v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v7 + 4) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[10] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[11] = v11;
          v12 = *((_DWORD *)v9 + 3);
          if (v12)
            WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*(WTF::StringImpl **)v9, (WTF::StringImpl *)(*(_QWORD *)v9 + 96 * v12));
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 48;
          v7 += 12;
          v8 -= 48;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TextManipulationController::ManipulationItemData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TextManipulationController::ManipulationItemData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_DWORD *)WebCore::nullName;
    if (WebCore::nullName)
    {
      v11 = (_QWORD *)(result + 72);
      do
      {
        *(_OWORD *)(v11 - 3) = 0uLL;
        *(_OWORD *)(v11 - 5) = 0uLL;
        *(_OWORD *)(v11 - 7) = 0uLL;
        ++*v10;
        *(v11 - 1) = v10;
        *v11 = 0;
        v11[1] = 0;
        v11 += 9;
        --v9;
      }
      while (v9);
    }
    else
    {
      v33 = result + 16;
      do
      {
        *(_QWORD *)(v33 + 64) = 0;
        *(_OWORD *)(v33 + 32) = 0uLL;
        *(_OWORD *)(v33 + 48) = 0uLL;
        *(_OWORD *)v33 = 0uLL;
        *(_OWORD *)(v33 + 16) = 0uLL;
        v33 += 72;
        --v9;
      }
      while (v9);
    }
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v13 = (uint64_t *)(v4 + 72 * i);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (uint64_t *)(v15 + 72 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v15 + 72 * v22;
          WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)(v24 + 8), v8);
          *v23 = *v13;
          v25 = v4 + 72 * i;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v24 + 8) = v26;
          v27 = *(_DWORD *)(v25 + 8);
          *(_BYTE *)(v24 + 20) = *(_BYTE *)(v25 + 12);
          *(_DWORD *)(v24 + 16) = v27;
          v28 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)(v24 + 24) = v28;
          LODWORD(v28) = *(_DWORD *)(v25 + 24);
          *(_BYTE *)(v24 + 36) = *(_BYTE *)(v25 + 28);
          *(_DWORD *)(v24 + 32) = v28;
          v29 = *(_QWORD *)(v25 + 32);
          *(_QWORD *)(v25 + 32) = 0;
          *(_QWORD *)(v24 + 40) = v29;
          v30 = *(_QWORD *)(v25 + 40);
          *(_QWORD *)(v25 + 40) = 0;
          *(_QWORD *)(v24 + 56) = 0;
          *(_QWORD *)(v24 + 64) = 0;
          *(_QWORD *)(v24 + 48) = v30;
          v31 = *(_QWORD *)(v25 + 48);
          *(_QWORD *)(v25 + 48) = 0;
          *(_QWORD *)(v24 + 56) = v31;
          LODWORD(v31) = *(_DWORD *)(v25 + 56);
          *(_DWORD *)(v25 + 56) = 0;
          *(_DWORD *)(v24 + 64) = v31;
          LODWORD(v31) = *(_DWORD *)(v25 + 60);
          *(_DWORD *)(v25 + 60) = 0;
          *(_DWORD *)(v24 + 68) = v31;
          WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)v25, v32);
        }
        else
        {
          WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData((WebCore::TextManipulationController::ManipulationItemData *)(v4 + 72 * i + 8), v8);
        }
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unint64_t WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextManipulationController::NodeInsertion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *(_QWORD *)(v7 + 8) = v11;
          *(_BYTE *)(v7 + 16) = *((_BYTE *)v9 + 16);
          v12 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12, v6);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
          result = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::TokenExchangeData,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::TokenExchangeData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextManipulationTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  v11 = a1;
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    do
    {
      v16 = (uint64_t *)(v4 + 32 * v12);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v21 = *v11;
          if (*v11)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 32 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = v28;
          v31 = (uint64_t *)(v21 + 32 * v28);
          v32 = (WTF::StringImpl *)v31[2];
          v31[2] = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              v41 = v13;
              WTF::StringImpl::destroy(v32, v8);
              v13 = v41;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          v33 = v31[1];
          v31[1] = 0;
          if (v33)
          {
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              {
                v44 = v13;
                WebCore::Node::removedLastRef((WebCore::Node *)v33, v8);
                v13 = v44;
                v15 = a3;
                v11 = a1;
              }
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
          *v31 = *v16;
          v34 = v4 + 32 * v12;
          v36 = *(_QWORD *)(v34 + 8);
          v35 = (uint64_t *)(v34 + 8);
          *v35 = 0;
          v31[1] = v36;
          v37 = v35[1];
          v35[1] = 0;
          v31[2] = v37;
          *(_WORD *)(v21 + 32 * v30 + 24) = *((_WORD *)v35 + 8);
          v38 = (WTF::StringImpl *)v35[1];
          v35[1] = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              v42 = v13;
              WTF::StringImpl::destroy(v38, v8);
              v13 = v42;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          v39 = *v35;
          *v35 = 0;
          if (v39)
          {
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
              {
                v45 = v13;
                WebCore::Node::removedLastRef((WebCore::Node *)v39, v8);
                v13 = v45;
                v15 = a3;
                v11 = a1;
              }
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
          }
          if (v16 == v15)
            v13 = v31;
        }
        else
        {
          v18 = v4 + 32 * v12;
          v19 = *(WTF::StringImpl **)(v18 + 16);
          *(_QWORD *)(v18 + 16) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              v40 = v13;
              WTF::StringImpl::destroy(v19, v8);
              v13 = v40;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
          v20 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24) == 2)
            {
              v43 = v13;
              if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v20, v8);
              v15 = a3;
              v11 = a1;
              v13 = v43;
            }
            else
            {
              *(_DWORD *)(v20 + 24) -= 2;
            }
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  int v5;
  void *v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = (uint64_t *)result;
    v5 = *(_DWORD *)(v2 - 8);
    result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    for (i = 0; ; result = (i + v8))
    {
      v8 = result & v5;
      v9 = *(_QWORD *)(v2 + 8 * v8);
      if (v9 != -1)
      {
        if (!v9)
        {
          v10 = *v4;
          if (!*v4)
            return result;
          v11 = *(unsigned int *)(v10 - 4);
          v12 = (uint64_t *)(v10 + 8 * v11);
          goto LABEL_11;
        }
        if (v9 == a2)
          break;
      }
      ++i;
    }
    v12 = (uint64_t *)(v2 + 8 * v8);
    v10 = *v4;
    if (!*v4)
      goto LABEL_12;
    v11 = *(unsigned int *)(v10 - 4);
LABEL_11:
    v10 += 8 * v11;
    if ((uint64_t *)v10 == v12)
      return result;
LABEL_12:
    if ((uint64_t *)v10 != v12)
    {
      result = *v12;
      *v12 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      *v12 = -1;
      ++*(_DWORD *)(*v4 - 16);
      v13 = *v4;
      if (*v4)
        v14 = *(_DWORD *)(v13 - 12) - 1;
      else
        v14 = -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *v4;
      if (*v4)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return (uint64_t)WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(v4, v17 >> 1, 0);
      }
    }
  }
  return result;
}

void WebCore::TypingCommand::deleteSelection(uint64_t *a1, char a2, int a3)
{
  WebCore::TypingCommand *v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15[4];
  char v16;

  v4 = (WebCore::TypingCommand *)*a1;
  if (*(_BYTE *)(*((_QWORD *)v4 + 383) + 153) == 2)
  {
    WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping(v4, &v14);
    v7 = v14;
    if (v14)
    {
      *(_BYTE *)(v14 + 312) = (a2 & 0x20) != 0;
      *(_BYTE *)(v7 + 309) = a3;
      *(_BYTE *)(v7 + 315) = (a2 & 8) != 0;
      LOBYTE(v15[0]) = 0;
      v16 = 0;
      if (WebCore::TypingCommand::willAddTypingToOpenCommand(v7, 0, 0, MEMORY[0x1E0CBF738], v15))
      {
        WebCore::CompositeEditCommand::deleteSelection((WebCore::Node *)v7, (a2 & 0x10) != 0, 1, 0, 1, 1);
        WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)v7, 0);
      }
      v8 = *(_DWORD *)(v7 + 8) - 1;
      if (*(_DWORD *)(v7 + 8) == 1)
      {
LABEL_18:
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        return;
      }
    }
    else
    {
      v9 = WTF::fastMalloc((WTF *)0x140);
      v7 = v9;
      if (a3 == 2)
        v10 = 43;
      else
        v10 = 48;
      if (a3 == 1)
        v11 = 47;
      else
        v11 = v10;
      v12 = WebCore::EditCommand::EditCommand(v9, a1, v11);
      *(_OWORD *)(v12 + 248) = 0u;
      *(_OWORD *)(v12 + 264) = 0u;
      *(_QWORD *)v12 = off_1E33AE020;
      *(_BYTE *)(v12 + 280) = 0;
      v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v13 += 4;
      *(_QWORD *)(v7 + 288) = v13;
      *(_QWORD *)(v7 + 296) = v13;
      *(_BYTE *)(v7 + 304) = 1;
      *(_BYTE *)(v7 + 305) = a2 & 1;
      *(_BYTE *)(v7 + 306) = (a2 & 0x10) != 0;
      *(_WORD *)(v7 + 307) = 1;
      *(_BYTE *)(v7 + 309) = a3;
      *(_BYTE *)(v7 + 310) = (a2 & 2) != 0;
      *(_BYTE *)(v7 + 312) = (a2 & 0x20) != 0;
      *(_BYTE *)(v7 + 313) = 0;
      *(_BYTE *)(v7 + 314) = (a2 & 4) != 0;
      *(_BYTE *)(v7 + 315) = (a2 & 8) != 0;
      *(_BYTE *)(v7 + 281) = *(_BYTE *)(v7 + 240);
      *(_BYTE *)(v7 + 311) = 1;
      WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v7);
      v8 = *(_DWORD *)(v7 + 8) - 1;
      if (*(_DWORD *)(v7 + 8) == 1)
        goto LABEL_18;
    }
    *(_DWORD *)(v7 + 8) = v8;
  }
}

uint64_t WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping@<X0>(WebCore::TypingCommand *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;

  result = WebCore::Document::editor(this);
  v5 = *(_DWORD **)(result + 24);
  if (v5)
  {
    ++v5[2];
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 56))(v5);
    if ((_DWORD)result && *((_BYTE *)v5 + 304))
    {
      *a2 = v5;
    }
    else
    {
      *a2 = 0;
      if (v5[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

unsigned int *WebCore::TypingCommand::deleteKeyPressed(uint64_t *a1, unsigned __int8 a2, int a3)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *result;
  int v13;
  WebCore::Document *v14;
  uint64_t v15;
  WebCore::TypingCommand *v16;

  v4 = a2;
  if (a3)
  {
    v5 = a3;
    v6 = WTF::fastMalloc((WTF *)0x140);
    v7 = v6;
    if (v5 == 7)
      v8 = 45;
    else
      v8 = 42;
    if (v5 == 1)
      v9 = 49;
    else
      v9 = v8;
    v10 = WebCore::EditCommand::EditCommand(v6, a1, v9);
    *(_OWORD *)(v10 + 248) = 0u;
    *(_OWORD *)(v10 + 264) = 0u;
    *(_QWORD *)v10 = off_1E33AE020;
    *(_BYTE *)(v10 + 280) = 1;
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 4;
    goto LABEL_10;
  }
  WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping((WebCore::TypingCommand *)*a1, &v16);
  v7 = (uint64_t)v16;
  if (!v16)
  {
    v7 = WTF::fastMalloc((WTF *)0x140);
    v15 = WebCore::EditCommand::EditCommand(v7, a1, 42);
    *(_OWORD *)(v15 + 248) = 0u;
    *(_OWORD *)(v15 + 264) = 0u;
    *(_QWORD *)v15 = off_1E33AE020;
    *(_BYTE *)(v15 + 280) = 1;
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 4;
    LOBYTE(v5) = 0;
LABEL_10:
    *(_QWORD *)(v7 + 288) = v11;
    *(_QWORD *)(v7 + 296) = v11;
    *(_BYTE *)(v7 + 304) = 1;
    *(_BYTE *)(v7 + 305) = v4 & 1;
    *(_BYTE *)(v7 + 306) = (v4 & 0x10) != 0;
    *(_BYTE *)(v7 + 307) = 1;
    *(_BYTE *)(v7 + 308) = v5;
    *(_BYTE *)(v7 + 309) = 0;
    *(_BYTE *)(v7 + 310) = (v4 & 2) != 0;
    *(_BYTE *)(v7 + 312) = (v4 & 0x20) != 0;
    *(_BYTE *)(v7 + 313) = 0;
    *(_BYTE *)(v7 + 314) = (v4 & 4) != 0;
    *(_BYTE *)(v7 + 315) = (v4 & 8) != 0;
    *(_BYTE *)(v7 + 281) = *(_BYTE *)(v7 + 240);
    *(_BYTE *)(v7 + 311) = 1;
    result = (unsigned int *)WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v7);
    v13 = *(_DWORD *)(v7 + 8) - 1;
    if (*(_DWORD *)(v7 + 8) == 1)
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_14:
    *(_DWORD *)(v7 + 8) = v13;
    return result;
  }
  WebCore::TypingCommand::updateSelectionIfDifferentFromCurrentSelection(v16, *(WebCore::TypingCommand **)(*a1 + 3064), v14);
  *(_BYTE *)(v7 + 312) = (v4 & 0x20) != 0;
  *(_BYTE *)(v7 + 309) = 0;
  *(_BYTE *)(v7 + 315) = (v4 & 8) != 0;
  result = WebCore::TypingCommand::deleteKeyPressed(v7, 0, (v4 >> 1) & 1);
  v13 = *(_DWORD *)(v7 + 8) - 1;
  if (*(_DWORD *)(v7 + 8) != 1)
    goto LABEL_14;
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebCore::TypingCommand::updateSelectionIfDifferentFromCurrentSelection(WebCore::TypingCommand *this, WebCore::TypingCommand *a2, WebCore::Document *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  __int16 v28;
  char v29;

  v4 = *((_QWORD *)a2 + 7);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v10 = v4;
  v11 = *((_DWORD *)a2 + 16);
  v12 = *((_BYTE *)a2 + 68);
  v5 = *((_QWORD *)a2 + 9);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v13 = v5;
  v14 = *((_DWORD *)a2 + 20);
  v15 = *((_BYTE *)a2 + 84);
  v6 = *((_QWORD *)a2 + 11);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v16 = v6;
  v17 = *((_DWORD *)a2 + 24);
  v18 = *((_BYTE *)a2 + 100);
  v7 = *((_QWORD *)a2 + 13);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v19 = v7;
  v20 = *((_DWORD *)a2 + 28);
  v21 = *((_BYTE *)a2 + 116);
  v8 = *((_QWORD *)a2 + 15);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v22 = v8;
  v23 = *((_DWORD *)a2 + 32);
  v24 = *((_BYTE *)a2 + 132);
  v9 = *((_QWORD *)a2 + 17);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v25 = v9;
  v26 = *((_DWORD *)a2 + 36);
  v27 = *((_BYTE *)a2 + 148);
  v28 = *((_WORD *)a2 + 76);
  v29 = *((_BYTE *)a2 + 154);
  if ((WebCore::operator==((uint64_t)&v10, (uint64_t)this + 128) & 1) == 0)
  {
    WebCore::EditCommand::setStartingSelection(this, (const WebCore::VisibleSelection *)&v10);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v10);
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v10);
}

unsigned int *WebCore::TypingCommand::deleteKeyPressed(uint64_t a1, unsigned int a2, int a3)
{
  char v3;
  char v4;
  unint64_t v5;
  char v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t *v28;
  WebCore::Node *v29;
  void *v30;
  int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  void *v34;
  void *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  BOOL v51;
  uint64_t *v52;
  uint64_t (*v53)();
  void *v54;
  _BOOL4 v55;
  uint64_t *v56;
  void *v57;
  WebCore::Node *v58;
  uint64_t *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  int v62;
  char v63;
  uint64_t v64;
  void *v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  WebCore::Node *v68;
  void *v69;
  unsigned int *result;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  void *v87;
  uint64_t *v88;
  int v89;
  void *v90;
  WebCore::Node *v91;
  char v92;
  int v93;
  char v94;
  char v95;
  void *v96;
  int v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  int v103;
  __int16 v104;
  uint64_t v105;
  void *v106;
  uint64_t *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  void *v112;
  WebCore::Node *v113;
  WebCore::Node *v114;
  WebCore::Node *v115;
  WebCore::Editor *v116;
  WebCore::Editor *v117;
  void *v118;
  WebCore::Editor *v119;
  void *v120;
  WebCore::Editor *v121;
  void *v122;
  WebCore::Editor *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  WebCore::Editor *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  char v136;
  char v137;
  char v138;
  uint64_t v139;
  char v140;
  WebCore::Document *v142;
  WebCore::Node *v143;
  int v144;
  char v145;
  WebCore::Node *v146;
  char v147;
  WebCore::Node *v148;
  WebCore::Node *v149;
  uint64_t v150;
  int v151;
  char v152;
  WebCore::Node *v153;
  int v154;
  char v155;
  WebCore::Node *v156[2];
  WebCore::Node *v157;
  unsigned __int8 v158;
  uint64_t v159[12];
  char v160;
  uint64_t v161;
  int v162;
  char v163;
  uint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  int v171;
  char v172;
  uint64_t v173;
  int v174;
  char v175;
  uint64_t v176;
  int v177;
  char v178;
  __int16 v179;
  char v180;
  uint64_t v181;
  int v182;
  char v183;
  uint64_t v184;
  int v185;
  char v186;
  uint64_t v187;
  int v188;
  unsigned __int8 v189;
  uint64_t v190;
  int v191;
  char v192;
  uint64_t v193;
  int v194;
  char v195;
  uint64_t v196;
  int v197;
  char v198;
  __int16 v199;
  unsigned __int8 v200;
  WTF::StringImpl *v201;
  int v202;
  char v203;
  uint64_t v204;
  int v205;
  char v206;
  uint64_t v207;
  int v208;
  char v209;
  uint64_t v210;
  int v211;
  char v212;
  uint64_t v213;
  int v214;
  char v215;
  uint64_t v216;
  int v217;
  char v218;
  __int16 v219;
  char v220;
  _DWORD *v221[2];

  v13 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v13 + 24) += 2;
  v14 = *(_QWORD *)(v13 + 528);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    v139 = v15;
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v140 = 0;
    v11 = v183;
    v8 = v186;
    v7 = v189;
    v3 = v192;
    v9 = v195;
    v6 = v198;
    v5 = v200;
    v10 = v163;
    v4 = v166;
    v136 = v169;
    v137 = v172;
    v138 = v175;
  }
  else
  {
    v139 = 0;
    v140 = 1;
  }
  v142 = (WebCore::Document *)v13;
  v18 = *(_QWORD *)(v13 + 3056);
  if (!v18)
  {
    v116 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    v117 = WebCore::Editor::Editor(v116, v142);
    v119 = (WebCore::Editor *)*((_QWORD *)v142 + 382);
    *((_QWORD *)v142 + 382) = v117;
    if (v119)
    {
      v134 = v119;
      WebCore::Editor::~Editor(v119, v118);
      if (*(_DWORD *)v134)
      {
        *((_QWORD *)v134 + 62) = 0;
        *((_OWORD *)v134 + 29) = 0u;
        *((_OWORD *)v134 + 30) = 0u;
        *((_OWORD *)v134 + 27) = 0u;
        *((_OWORD *)v134 + 28) = 0u;
        *((_OWORD *)v134 + 25) = 0u;
        *((_OWORD *)v134 + 26) = 0u;
        *((_OWORD *)v134 + 23) = 0u;
        *((_OWORD *)v134 + 24) = 0u;
        *((_OWORD *)v134 + 21) = 0u;
        *((_OWORD *)v134 + 22) = 0u;
        *((_OWORD *)v134 + 19) = 0u;
        *((_OWORD *)v134 + 20) = 0u;
        *((_OWORD *)v134 + 17) = 0u;
        *((_OWORD *)v134 + 18) = 0u;
        *((_OWORD *)v134 + 15) = 0u;
        *((_OWORD *)v134 + 16) = 0u;
        *((_OWORD *)v134 + 13) = 0u;
        *((_OWORD *)v134 + 14) = 0u;
        *((_OWORD *)v134 + 11) = 0u;
        *((_OWORD *)v134 + 12) = 0u;
        *((_OWORD *)v134 + 9) = 0u;
        *((_OWORD *)v134 + 10) = 0u;
        *((_OWORD *)v134 + 7) = 0u;
        *((_OWORD *)v134 + 8) = 0u;
        *((_OWORD *)v134 + 5) = 0u;
        *((_OWORD *)v134 + 6) = 0u;
        *((_OWORD *)v134 + 3) = 0u;
        *((_OWORD *)v134 + 4) = 0u;
        *((_OWORD *)v134 + 1) = 0u;
        *((_OWORD *)v134 + 2) = 0u;
        *(_OWORD *)v134 = 0u;
      }
      else
      {
        WTF::fastFree(v134, v120);
      }
    }
    v18 = *((_QWORD *)v142 + 382);
  }
  WebCore::Editor::updateMarkersForWordsAffectedByEditing(v18, 0);
  v181 = 0;
  v182 = 0;
  v183 = v11 & 0xF0;
  v184 = 0;
  v185 = 0;
  v186 = v8 & 0xF0;
  v187 = 0;
  v188 = 0;
  v189 = v7 & 0xF0;
  v190 = 0;
  v191 = 0;
  v192 = v3 & 0xF0;
  v193 = 0;
  v194 = 0;
  v195 = v9 & 0xF0;
  v196 = 0;
  v197 = 0;
  v198 = v6 & 0xF0;
  v199 = 1;
  v200 = v5 & 0xFC | 1;
  v161 = 0;
  v162 = 0;
  v163 = v10 & 0xF0;
  v164 = 0;
  v165 = 0;
  v166 = v4 & 0xF0;
  v167 = 0;
  v168 = 0;
  v169 = v136 & 0xF0;
  v170 = 0;
  v171 = 0;
  v172 = v137 & 0xF0;
  v173 = 0;
  v174 = 0;
  v175 = v138 & 0xF0;
  v176 = 0;
  v177 = 0;
  v178 &= 0xF0u;
  v179 = 1;
  v180 = v180 & 0xFC | 1;
  v19 = *(unsigned __int8 *)(a1 + 225);
  if (v19 == 2)
  {
    WebCore::VisibleSelection::operator=(&v181, (uint64_t *)(a1 + 128));
    WebCore::VisibleSelection::operator=(&v161, &v181);
    LODWORD(v20) = a2;
    while (1)
    {
      if (HIBYTE(v199) == 1)
        goto LABEL_129;
      if (!HIBYTE(v199))
      {
        WebCore::EditCommand::setEndingSelection((uint64_t *)a1, (const WebCore::VisibleSelection *)(*((_QWORD *)v142 + 383) + 56));
        v21 = *((_QWORD *)v142 + 382);
        if (!v21)
        {
          v121 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v121, v142);
          v123 = (WebCore::Editor *)*((_QWORD *)v142 + 382);
          *((_QWORD *)v142 + 382) = v121;
          if (v123)
          {
            WebCore::Editor::~Editor(v123, v122);
            if (*(_DWORD *)v124)
            {
              *(_QWORD *)(v124 + 496) = 0;
              *(_OWORD *)(v124 + 464) = 0u;
              *(_OWORD *)(v124 + 480) = 0u;
              *(_OWORD *)(v124 + 432) = 0u;
              *(_OWORD *)(v124 + 448) = 0u;
              *(_OWORD *)(v124 + 400) = 0u;
              *(_OWORD *)(v124 + 416) = 0u;
              *(_OWORD *)(v124 + 368) = 0u;
              *(_OWORD *)(v124 + 384) = 0u;
              *(_OWORD *)(v124 + 336) = 0u;
              *(_OWORD *)(v124 + 352) = 0u;
              *(_OWORD *)(v124 + 304) = 0u;
              *(_OWORD *)(v124 + 320) = 0u;
              *(_OWORD *)(v124 + 272) = 0u;
              *(_OWORD *)(v124 + 288) = 0u;
              *(_OWORD *)(v124 + 240) = 0u;
              *(_OWORD *)(v124 + 256) = 0u;
              *(_OWORD *)(v124 + 208) = 0u;
              *(_OWORD *)(v124 + 224) = 0u;
              *(_OWORD *)(v124 + 176) = 0u;
              *(_OWORD *)(v124 + 192) = 0u;
              *(_OWORD *)(v124 + 144) = 0u;
              *(_OWORD *)(v124 + 160) = 0u;
              *(_OWORD *)(v124 + 112) = 0u;
              *(_OWORD *)(v124 + 128) = 0u;
              *(_OWORD *)(v124 + 80) = 0u;
              *(_OWORD *)(v124 + 96) = 0u;
              *(_OWORD *)(v124 + 48) = 0u;
              *(_OWORD *)(v124 + 64) = 0u;
              *(_OWORD *)(v124 + 16) = 0u;
              *(_OWORD *)(v124 + 32) = 0u;
              *(_OWORD *)v124 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v124, v125);
            }
          }
          v21 = *((_QWORD *)v142 + 382);
        }
        v22 = *(_DWORD **)(v21 + 24);
        if (v22)
        {
          ++v22[2];
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v22 + 56))(v22) && *((_BYTE *)v22 + 304))
            *((_BYTE *)v22 + 304) = 0;
          if (v22[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
          else
            --v22[2];
        }
        goto LABEL_129;
      }
      if (!WebCore::FrameSelection::shouldDeleteSelection(*((WebCore::FrameSelection **)v142 + 383), (const WebCore::VisibleSelection *)&v181))goto LABEL_129;
      v201 = 0;
      WebCore::VisibleSelection::firstRange((WebCore::Node *)&v181, v156);
      v26 = WebCore::TypingCommand::willAddTypingToOpenCommand(a1, (WTF::StringImpl *)1, v20, (_DWORD **)&v201, (uint64_t *)v156);
      if (v158)
      {
        v36 = v157;
        v157 = 0;
        if (v36)
        {
          if (*((_DWORD *)v36 + 6) == 2)
          {
            if ((*((_WORD *)v36 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v36, v35);
          }
          else
          {
            *((_DWORD *)v36 + 6) -= 2;
          }
        }
        v37 = v156[0];
        v156[0] = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v35);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
      }
      if (!(_DWORD)v26)
        goto LABEL_129;
      if (!a3)
        goto LABEL_69;
      v20 = *((_QWORD *)v142 + 382);
      if (!v20)
      {
        v26 = WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor((WebCore::Editor *)v26, v142);
        v127 = (WebCore::Editor *)*((_QWORD *)v142 + 382);
        *((_QWORD *)v142 + 382) = v26;
        if (v127)
        {
          WebCore::Editor::~Editor(v127, v126);
          if (*(_DWORD *)v128)
          {
            *(_QWORD *)(v128 + 496) = 0;
            *(_OWORD *)(v128 + 464) = 0u;
            *(_OWORD *)(v128 + 480) = 0u;
            *(_OWORD *)(v128 + 432) = 0u;
            *(_OWORD *)(v128 + 448) = 0u;
            *(_OWORD *)(v128 + 400) = 0u;
            *(_OWORD *)(v128 + 416) = 0u;
            *(_OWORD *)(v128 + 368) = 0u;
            *(_OWORD *)(v128 + 384) = 0u;
            *(_OWORD *)(v128 + 336) = 0u;
            *(_OWORD *)(v128 + 352) = 0u;
            *(_OWORD *)(v128 + 304) = 0u;
            *(_OWORD *)(v128 + 320) = 0u;
            *(_OWORD *)(v128 + 272) = 0u;
            *(_OWORD *)(v128 + 288) = 0u;
            *(_OWORD *)(v128 + 240) = 0u;
            *(_OWORD *)(v128 + 256) = 0u;
            *(_OWORD *)(v128 + 208) = 0u;
            *(_OWORD *)(v128 + 224) = 0u;
            *(_OWORD *)(v128 + 176) = 0u;
            *(_OWORD *)(v128 + 192) = 0u;
            *(_OWORD *)(v128 + 144) = 0u;
            *(_OWORD *)(v128 + 160) = 0u;
            *(_OWORD *)(v128 + 112) = 0u;
            *(_OWORD *)(v128 + 128) = 0u;
            *(_OWORD *)(v128 + 80) = 0u;
            *(_OWORD *)(v128 + 96) = 0u;
            *(_OWORD *)(v128 + 48) = 0u;
            *(_OWORD *)(v128 + 64) = 0u;
            *(_OWORD *)(v128 + 16) = 0u;
            *(_OWORD *)(v128 + 32) = 0u;
            *(_OWORD *)v128 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v128, v129);
          }
        }
        v20 = *((_QWORD *)v142 + 382);
      }
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v181, v156);
      v40 = v158;
      if (v158)
      {
        WebCore::plainText(v156, 0, 0, (const WTF::String *)&v201);
        *(_BYTE *)(v20 + 89) = 0;
        v42 = v201;
        v201 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
        if (v158)
        {
          v43 = v157;
          v157 = 0;
          if (v43)
          {
            if (*((_DWORD *)v43 + 6) == 2)
            {
              if ((*((_WORD *)v43 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v43, v41);
            }
            else
            {
              *((_DWORD *)v43 + 6) -= 2;
            }
          }
          v44 = v156[0];
          v156[0] = 0;
          if (v44)
          {
            if (*((_DWORD *)v44 + 6) == 2)
            {
              if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v44, v41);
            }
            else
            {
              *((_DWORD *)v44 + 6) -= 2;
            }
          }
        }
LABEL_69:
        WebCore::TypingCommand::postTextStateChangeNotificationForDeletion((unsigned int *)a1, (const WebCore::VisibleSelection *)&v181);
        if (*(_BYTE *)(a1 + 313))
          WebCore::EditCommand::setStartingSelection((WebCore::EditCommand *)a1, (const WebCore::VisibleSelection *)&v161);
        if (HIBYTE(v199) == 2)
        {
          v45 = *(_BYTE *)(a1 + 306);
          v46 = WTF::fastMalloc((WTF *)0x248);
          v156[0] = (WebCore::Node *)WebCore::DeleteSelectionCommand::DeleteSelectionCommand(v46, &v181, v45, 1, 0, v19 == 2, 1, 9);
          WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)a1, (uint64_t **)v156);
          if (v156[0])
          {
            if (*((_DWORD *)v156[0] + 2) == 1)
              (*(void (**)(void))(*(_QWORD *)v156[0] + 8))();
            else
              --*((_DWORD *)v156[0] + 2);
          }
        }
        *(_BYTE *)(a1 + 306) = 0;
        WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 1u);
        goto LABEL_129;
      }
LABEL_326:
      __break(1u);
LABEL_327:
      if (v39 == 1)
      {
        v132 = *(_QWORD *)(v40 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v132)
        {
LABEL_221:
          LODWORD(v40) = 0;
          goto LABEL_253;
        }
        LODWORD(v40) = 0;
        do
        {
          LODWORD(v40) = v40 + 1;
          v132 = *(_QWORD *)(v132 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v132);
      }
      else
      {
        if (v39 != 2)
          goto LABEL_221;
        v130 = *(_QWORD *)(v40 + 48) & 0xFFFFFFFFFFFFLL;
        if (v130)
        {
          LODWORD(v40) = 1;
          do
          {
            LODWORD(v40) = v40 + 1;
            v130 = *(_QWORD *)(v130 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v130);
        }
        else
        {
          LODWORD(v40) = 1;
        }
      }
LABEL_253:
      if (v38)
      {
        v103 = v195 & 7;
        if ((v195 & 7) != 0)
        {
          switch(v103)
          {
            case 4:
              v104 = *(_WORD *)(v38 + 28);
              if ((v104 & 1) != 0)
              {
                v38 = *(_QWORD *)(v38 + 80);
                if (v38)
                  LODWORD(v38) = *(_DWORD *)(v38 + 4);
                break;
              }
              if ((v104 & 4) == 0 || (v105 = *(_QWORD *)(v38 + 80)) == 0)
              {
LABEL_260:
                LODWORD(v38) = 0;
                break;
              }
              LODWORD(v38) = 0;
              do
              {
                LODWORD(v38) = v38 + 1;
                v105 = *(_QWORD *)(v105 + 56);
              }
              while (v105);
              break;
            case 1:
              v133 = *(_QWORD *)(v38 + 48) & 0xFFFFFFFFFFFFLL;
              if (!v133)
                goto LABEL_260;
              LODWORD(v38) = 0;
              do
              {
                LODWORD(v38) = v38 + 1;
                v133 = *(_QWORD *)(v133 + 48) & 0xFFFFFFFFFFFFLL;
              }
              while (v133);
              break;
            case 2:
              v131 = *(_QWORD *)(v38 + 48) & 0xFFFFFFFFFFFFLL;
              if (v131)
              {
                LODWORD(v38) = 1;
                do
                {
                  LODWORD(v38) = v38 + 1;
                  v131 = *(_QWORD *)(v131 + 48) & 0xFFFFFFFFFFFFLL;
                }
                while (v131);
              }
              else
              {
                LODWORD(v38) = 1;
              }
              break;
            default:
              goto LABEL_260;
          }
        }
        else
        {
          LODWORD(v38) = v194;
        }
      }
      if ((int)v40 - (int)v38 >= 2)
      {
        WebCore::Position::previous(v5 + 80, 2, (uint64_t)&v201);
        WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v181, (const WebCore::Position *)(v5 + 80), (const WebCore::Position *)&v201);
        v107 = (uint64_t *)v201;
        v201 = 0;
        if (v107)
        {
          if (*((_DWORD *)v107 + 6) == 2)
          {
            if ((*((_WORD *)v107 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v107, v106);
          }
          else
          {
            *((_DWORD *)v107 + 6) -= 2;
          }
        }
      }
LABEL_270:
      if (*(_BYTE *)(a1 + 121) == 2
        && v187 == *(_QWORD *)(a1 + 88)
        && ((v189 & 8) == 0 && ((v108 = v189 & 7, v108 == 4) || v108 == 2)
          ? (v109 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(v5 + 32)))
          : (v109 = v188),
            (*(_BYTE *)(a1 + 100) & 8) == 0 && ((v110 = *(_BYTE *)(a1 + 100) & 7, v110 == 4) || v110 == 2)
          ? (v111 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 88)))
          : (v111 = *(_DWORD *)(a1 + 96)),
            v109 == v111 && ((*(_BYTE *)(a1 + 100) ^ v189) & 7) == 0))
      {
        WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v161, (const WebCore::Position *)(a1 + 104), (const WebCore::Position *)(v5 + 48));
      }
      else
      {
        WebCore::VisibleSelection::operator=(&v161, &v181);
      }
      v113 = v148;
      v148 = 0;
      if (v113)
      {
        if (*((_DWORD *)v113 + 6) == 2)
        {
          if ((*((_WORD *)v113 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v113, v112);
        }
        else
        {
          *((_DWORD *)v113 + 6) -= 2;
        }
      }
      v114 = v149;
      v149 = 0;
      if (v114)
      {
        if (*((_DWORD *)v114 + 6) == 2)
        {
          if ((*((_WORD *)v114 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v114, v112);
        }
        else
        {
          *((_DWORD *)v114 + 6) -= 2;
        }
      }
      if (v26)
      {
        if (*(_DWORD *)(v26 + 24) == 2)
        {
          if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v26, v112);
        }
        else
        {
          *(_DWORD *)(v26 + 24) -= 2;
        }
      }
      v115 = v153;
      v153 = 0;
      if (v115)
      {
        if (*((_DWORD *)v115 + 6) == 2)
        {
          if ((*((_WORD *)v115 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v115, v112);
        }
        else
        {
          *((_DWORD *)v115 + 6) -= 2;
        }
      }
      WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v156, v112);
    }
  }
  LODWORD(v20) = a2;
  if (WebCore::CompositeEditCommand::breakOutOfEmptyMailBlockquotedParagraph((WebCore::CompositeEditCommand *)a1))
    WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 1u);
  *(_BYTE *)(a1 + 306) = 0;
  WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v156, 0);
  WebCore::FrameSelection::setSelection((uint64_t)v156, a1 + 128, 6u, 0, 0, 0, 0);
  WebCore::FrameSelection::modify((uint64_t)v156, 1, 1, a2, 0);
  if (a3 && a2 && v160 == 1)
    WebCore::FrameSelection::modify((uint64_t)v156, 1, 1, 0, 0);
  WebCore::VisibleSelection::visibleStart((WebCore::VisibleSelection *)&v153, (unsigned __int8 *)(a1 + 128));
  WebCore::VisiblePosition::previous(&v153, 1, 0, (uint64_t)&v150);
  v23 = (uint64_t *)v153;
  if (v153)
    *((_DWORD *)v153 + 6) += 2;
  v201 = (WTF::StringImpl *)v23;
  v202 = v154;
  v203 = v155;
  WebCore::enclosingNodeOfType((uint64_t)&v201, (uint64_t (*)(uint64_t))WebCore::isTableCell, 1, (uint64_t *)&v149);
  v25 = (uint64_t *)v201;
  v201 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25, v24);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v26 = v150;
  if (v150)
    *(_DWORD *)(v150 + 24) += 2;
  v201 = (WTF::StringImpl *)v26;
  v202 = v151;
  v203 = v152;
  WebCore::enclosingNodeOfType((uint64_t)&v201, (uint64_t (*)(uint64_t))WebCore::isTableCell, 1, (uint64_t *)&v148);
  v28 = (uint64_t *)v201;
  v201 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, v27);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  if (v26)
  {
    v29 = v149;
    if (v149 == v148)
    {
LABEL_81:
      if (v29)
      {
        v49 = *((_WORD *)v29 + 14);
        *((_DWORD *)v29 + 6) += 2;
        v143 = v29;
        v144 = 0;
        if ((v49 & 1) != 0)
          v50 = v145 & 0xF0;
        else
          v50 = v145 & 0xF0 | 3;
        v145 = v50;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v143, (uint64_t)&v201);
        LOBYTE(v204) = 1;
        v51 = WebCore::operator==((uint64_t *)&v153, (uint64_t *)&v201);
        v52 = (uint64_t *)v201;
        v201 = 0;
        if (v52)
        {
          if (*((_DWORD *)v52 + 6) == 2)
          {
            if ((*((_WORD *)v52 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v52, v34);
          }
          else
          {
            *((_DWORD *)v52 + 6) -= 2;
          }
        }
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v34);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
        if (v51)
          goto LABEL_116;
      }
      if (v153)
        v53 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v53 = 0;
      if (!v53)
        goto LABEL_108;
      WebCore::startOfParagraph((uint64_t)&v153, 1, &v201);
      v55 = WebCore::operator==((uint64_t *)&v153, (uint64_t *)&v201);
      v56 = (uint64_t *)v201;
      v201 = 0;
      if (v56)
      {
        if (*((_DWORD *)v56 + 6) == 2)
        {
          if ((*((_WORD *)v56 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v56, v54);
        }
        else
        {
          *((_DWORD *)v56 + 6) -= 2;
        }
      }
      if (!v55)
        goto LABEL_108;
      WebCore::VisiblePosition::previous(&v153, 1, 0, (uint64_t)&v201);
      WebCore::isFirstPositionAfterTable(&v201, &v143);
      v58 = v143;
      v143 = 0;
      if (v58)
      {
        if (*((_DWORD *)v58 + 6) == 2)
        {
          if ((*((_WORD *)v58 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v58, v57);
        }
        else
        {
          *((_DWORD *)v58 + 6) -= 2;
        }
      }
      v59 = (uint64_t *)v201;
      v201 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 6) == 2)
        {
          if ((*((_WORD *)v59 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v59, v57);
        }
        else
        {
          *((_DWORD *)v59 + 6) -= 2;
        }
      }
      if (v58)
      {
        WebCore::isLastPositionBeforeTable(&v153, &v201);
        v60 = v201;
        v201 = 0;
        if (!v60)
        {
          WebCore::FrameSelection::modify((uint64_t)v156, 1, 1, a2, 0);
          goto LABEL_136;
        }
      }
      else
      {
LABEL_108:
        WebCore::isFirstPositionAfterTable(&v153, &v143);
        v61 = v143;
        if (!v143)
        {
LABEL_136:
          v5 = (unint64_t)&v181;
          WebCore::VisibleSelection::operator=(&v181, v159);
          if (a2)
            goto LABEL_270;
          v40 = v196;
          if (v196 && (v74 = v198 & 7, v74 <= 4))
          {
            v75 = v196;
            if (((1 << v74) & 0x19) == 0)
              v75 = *(_QWORD *)(v196 + 32);
          }
          else
          {
            v75 = 0;
          }
          v38 = v193;
          if (v193 && (v76 = v195 & 7, v76 <= 4))
          {
            v77 = 1 << v76;
            v78 = v193;
            if ((v77 & 0x19) == 0)
              v78 = *(_QWORD *)(v193 + 32);
          }
          else
          {
            v78 = 0;
          }
          if (v75 != v78)
            goto LABEL_270;
          if (!v196)
            goto LABEL_253;
          v39 = v198 & 7;
          if ((v198 & 7) == 0)
          {
            LODWORD(v40) = v197;
            goto LABEL_253;
          }
          if (v39 != 4)
            goto LABEL_327;
          v99 = *(_WORD *)(v196 + 28);
          if ((v99 & 1) != 0)
          {
            v40 = *(_QWORD *)(v196 + 80);
            if (v40)
              LODWORD(v40) = *(_DWORD *)(v40 + 4);
            goto LABEL_253;
          }
          if ((v99 & 4) != 0)
          {
            v100 = *(_QWORD *)(v196 + 80);
            if (v100)
            {
              LODWORD(v40) = 0;
              do
              {
                LODWORD(v40) = v40 + 1;
                v100 = *(_QWORD *)(v100 + 56);
              }
              while (v100);
              goto LABEL_253;
            }
          }
          goto LABEL_221;
        }
        v62 = *((_DWORD *)v143 + 6);
        *((_DWORD *)v143 + 6) = v62 + 2;
        v63 = *(_BYTE *)(a1 + 226) & 2;
        *((_DWORD *)v61 + 6) = v62 + 4;
        v201 = v61;
        v202 = 0;
        v203 = 1;
        v64 = *(_QWORD *)(a1 + 192);
        if (v64)
          *(_DWORD *)(v64 + 24) += 2;
        v204 = v64;
        v205 = *(_DWORD *)(a1 + 200);
        v206 = *(_BYTE *)(a1 + 204);
        v207 = 0;
        v208 = 0;
        v209 &= 0xF0u;
        v210 = 0;
        v211 = 0;
        v212 &= 0xF0u;
        v213 = 0;
        v214 = 0;
        v215 &= 0xF0u;
        v216 = 0;
        v217 = 0;
        v218 &= 0xF0u;
        v219 = 1;
        v220 = v220 & 0xFD | v63;
        WebCore::VisibleSelection::validate((uint64_t)&v201, 0);
        WebCore::EditCommand::setEndingSelection((uint64_t *)a1, (const WebCore::VisibleSelection *)&v201);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
        if (*((_DWORD *)v61 + 6) == 2)
        {
          if ((*((_WORD *)v61 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v61, v65);
        }
        else
        {
          *((_DWORD *)v61 + 6) -= 2;
        }
        WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 1u);
        v60 = v143;
        v143 = 0;
        if (!v60)
          goto LABEL_116;
      }
      if (*((_DWORD *)v60 + 6) == 2)
      {
        if ((*((_WORD *)v60 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v60, v34);
      }
      else
      {
        *((_DWORD *)v60 + 6) -= 2;
      }
      goto LABEL_116;
    }
  }
  WebCore::CompositeEditCommand::shouldBreakOutOfEmptyListItem((WebCore::CompositeEditCommand *)a1, (uint64_t)&v201);
  if (HIBYTE(v219))
  {
    v221[0] = 0;
    WebCore::VisibleSelection::firstRange((WebCore::Node *)&v201, &v143);
    v31 = WebCore::TypingCommand::willAddTypingToOpenCommand(a1, (WTF::StringImpl *)1, a2, v221, (uint64_t *)&v143);
    if (v147)
    {
      v32 = v146;
      v146 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 6) == 2)
        {
          if ((*((_WORD *)v32 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v32, v30);
        }
        else
        {
          *((_DWORD *)v32 + 6) -= 2;
        }
      }
      v33 = v143;
      v143 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, v30);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
    }
    if (v31)
    {
      WebCore::CompositeEditCommand::breakOutOfEmptyListItem((WebCore::CompositeEditCommand *)a1);
      WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 1u);
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
    goto LABEL_116;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
  if (v26)
  {
LABEL_80:
    v29 = v149;
    goto LABEL_81;
  }
  WebCore::VisiblePosition::next((unsigned __int8 *)&v153, 1, 0, (uint64_t)&v143);
  v48 = (uint64_t)v143;
  if (v143)
  {
    if (*((_DWORD *)v143 + 6) != 2)
    {
      *((_DWORD *)v143 + 6) -= 2;
      goto LABEL_80;
    }
    if ((*((_WORD *)v143 + 15) & 0x400) != 0)
      goto LABEL_80;
LABEL_233:
    WebCore::Node::removedLastRef((WebCore::Node *)v48, v47);
    goto LABEL_80;
  }
  v48 = WebCore::editableRootForPosition(a1 + 192, 0);
  if (!v48)
    goto LABEL_80;
  v79 = v48;
  v40 = *(unsigned int *)(v48 + 24);
  *(_DWORD *)(v48 + 24) = v40 + 2;
  v80 = *(_QWORD *)(v48 + 80);
  if (!v80)
    goto LABEL_159;
  if (v80 == *(_QWORD *)(v48 + 88)
    && (*(_WORD *)(v80 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v80 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    v38 = *(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL;
    if (v38)
    {
      v39 = *(unsigned __int8 *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D);
      if ((v39 & 2) != 0)
      {
        __break(0xC471u);
        goto LABEL_326;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
      {
LABEL_159:
        if ((_DWORD)v40)
        {
          *(_DWORD *)(v48 + 24) = v40;
          goto LABEL_80;
        }
        if ((*(_WORD *)(v48 + 30) & 0x400) != 0)
          goto LABEL_80;
        goto LABEL_233;
      }
    }
  }
  do
  {
    v81 = *(_DWORD *)(v80 + 24);
    v82 = v81 + 2;
    *(_DWORD *)(v80 + 24) = v81 + 2;
    v83 = *(_QWORD *)(v80 + 32);
    if (v83 && (*(_WORD *)(v83 + 28) & 0x80) == 0)
    {
      *(_DWORD *)(v80 + 24) = v81 + 4;
      v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v85 = WTF::fastMalloc((WTF *)0x118);
      v86 = *(WTF::StringImpl **)(*(_QWORD *)(v80 + 40) + 8);
      *((_DWORD *)v86 + 6) += 2;
      v201 = v86;
      *(_QWORD *)WebCore::EditCommand::EditCommand(v85, (uint64_t *)&v201, v84) = off_1E33A9E80;
      v88 = (uint64_t *)v201;
      v201 = 0;
      if (v88)
      {
        if (*((_DWORD *)v88 + 6) == 2)
        {
          if ((*((_WORD *)v88 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v88, v87);
        }
        else
        {
          *((_DWORD *)v88 + 6) -= 2;
        }
      }
      *(_QWORD *)v85 = off_1E33AD670;
      *(_QWORD *)(v85 + 256) = 0;
      *(_QWORD *)(v85 + 264) = 0;
      *(_QWORD *)(v85 + 248) = v80;
      *(_DWORD *)(v85 + 272) = 1;
      v201 = (WTF::StringImpl *)v85;
      WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)a1, (uint64_t **)&v201);
      if (v201)
      {
        if (*((_DWORD *)v201 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v201 + 8))(v201);
        else
          --*((_DWORD *)v201 + 2);
      }
      v82 = *(_DWORD *)(v80 + 24);
    }
    v89 = v82 - 2;
    if (v89)
    {
      *(_DWORD *)(v80 + 24) = v89;
    }
    else if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v80, v47);
    }
    v80 = *(_QWORD *)(v79 + 80);
  }
  while (v80);
  WebCore::CompositeEditCommand::addBlockPlaceholderIfNeeded((unsigned int *)a1, (WebCore::Element *)v79, (uint64_t *)v221);
  v91 = (WebCore::Node *)v221[0];
  v221[0] = 0;
  if (v91)
  {
    if (*((_DWORD *)v91 + 6) == 2)
    {
      if ((*((_WORD *)v91 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v91, v90);
    }
    else
    {
      *((_DWORD *)v91 + 6) -= 2;
    }
  }
  v92 = *(_WORD *)(v79 + 28);
  v93 = *(_DWORD *)(v79 + 24);
  *(_DWORD *)(v79 + 24) = v93 + 2;
  if ((v92 & 1) != 0)
    v94 = 0;
  else
    v94 = 3;
  v95 = *(_BYTE *)(a1 + 226) & 2;
  v202 = 0;
  v203 = v94;
  *(_DWORD *)(v79 + 24) = v93 + 6;
  v201 = (WTF::StringImpl *)v79;
  v204 = v79;
  v205 = 0;
  v206 = v94;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v218 = 0;
  v219 = 1;
  v220 = v95;
  WebCore::VisibleSelection::validate((uint64_t)&v201, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)a1, (const WebCore::VisibleSelection *)&v201);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
  v97 = *(_DWORD *)(v79 + 24) - 2;
  if (*(_DWORD *)(v79 + 24) == 2)
  {
    if ((*(_WORD *)(v79 + 30) & 0x400) != 0)
    {
LABEL_247:
      if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v79, v96);
      goto LABEL_202;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v79, v96);
    v97 = *(_DWORD *)(v79 + 24);
  }
  else
  {
    *(_DWORD *)(v79 + 24) = v97;
  }
  v98 = v97 - 2;
  if (!v98)
    goto LABEL_247;
  *(_DWORD *)(v79 + 24) = v98;
LABEL_202:
  WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 1u);
LABEL_116:
  v66 = v148;
  v148 = 0;
  if (v66)
  {
    if (*((_DWORD *)v66 + 6) == 2)
    {
      if ((*((_WORD *)v66 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v66, v34);
    }
    else
    {
      *((_DWORD *)v66 + 6) -= 2;
    }
  }
  v67 = v149;
  v149 = 0;
  if (v67)
  {
    if (*((_DWORD *)v67 + 6) == 2)
    {
      if ((*((_WORD *)v67 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v67, v34);
    }
    else
    {
      *((_DWORD *)v67 + 6) -= 2;
    }
  }
  if (v26)
  {
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v34);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  v68 = v153;
  v153 = 0;
  if (v68)
  {
    if (*((_DWORD *)v68 + 6) == 2)
    {
      if ((*((_WORD *)v68 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v68, v34);
    }
    else
    {
      *((_DWORD *)v68 + 6) -= 2;
    }
  }
  WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v156, v34);
LABEL_129:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v161);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v181);
  result = (unsigned int *)v142;
  if ((v140 & 1) == 0)
  {
    v71 = (unsigned int *)(v139 + 8);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v71);
      v101 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v101 = off_1E31FE290;
      *((_QWORD *)v101 + 1) = v71;
      v156[0] = v101;
      WTF::ensureOnMainThread();
      v102 = v156[0];
      v156[0] = 0;
      if (v102)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v102 + 8))(v102);
      result = (unsigned int *)v142;
    }
  }
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v69);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

unsigned int *WebCore::TypingCommand::forwardDeleteKeyPressed(uint64_t *a1, unsigned __int8 a2, int a3)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *result;
  int v13;
  WebCore::Document *v14;
  uint64_t v15;
  WebCore::TypingCommand *v16;

  v4 = a2;
  if (a3)
  {
    v5 = a3;
    v6 = WTF::fastMalloc((WTF *)0x140);
    v7 = v6;
    if (v5 == 7)
      v8 = 46;
    else
      v8 = 44;
    if (v5 == 1)
      v9 = 50;
    else
      v9 = v8;
    v10 = WebCore::EditCommand::EditCommand(v6, a1, v9);
    *(_OWORD *)(v10 + 248) = 0u;
    *(_OWORD *)(v10 + 264) = 0u;
    *(_QWORD *)v10 = off_1E33AE020;
    *(_BYTE *)(v10 + 280) = 2;
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 4;
    goto LABEL_10;
  }
  WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping((WebCore::TypingCommand *)*a1, &v16);
  v7 = (uint64_t)v16;
  if (!v16)
  {
    v7 = WTF::fastMalloc((WTF *)0x140);
    v15 = WebCore::EditCommand::EditCommand(v7, a1, 44);
    *(_OWORD *)(v15 + 248) = 0u;
    *(_OWORD *)(v15 + 264) = 0u;
    *(_QWORD *)v15 = off_1E33AE020;
    *(_BYTE *)(v15 + 280) = 2;
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 4;
    LOBYTE(v5) = 0;
LABEL_10:
    *(_QWORD *)(v7 + 288) = v11;
    *(_QWORD *)(v7 + 296) = v11;
    *(_BYTE *)(v7 + 304) = 1;
    *(_BYTE *)(v7 + 305) = v4 & 1;
    *(_BYTE *)(v7 + 306) = (v4 & 0x10) != 0;
    *(_BYTE *)(v7 + 307) = 1;
    *(_BYTE *)(v7 + 308) = v5;
    *(_BYTE *)(v7 + 309) = 0;
    *(_BYTE *)(v7 + 310) = (v4 & 2) != 0;
    *(_BYTE *)(v7 + 312) = (v4 & 0x20) != 0;
    *(_BYTE *)(v7 + 313) = 0;
    *(_BYTE *)(v7 + 314) = (v4 & 4) != 0;
    *(_BYTE *)(v7 + 315) = (v4 & 8) != 0;
    *(_BYTE *)(v7 + 281) = *(_BYTE *)(v7 + 240);
    *(_BYTE *)(v7 + 311) = 1;
    result = (unsigned int *)WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v7);
    v13 = *(_DWORD *)(v7 + 8) - 1;
    if (*(_DWORD *)(v7 + 8) == 1)
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_14:
    *(_DWORD *)(v7 + 8) = v13;
    return result;
  }
  WebCore::TypingCommand::updateSelectionIfDifferentFromCurrentSelection(v16, *(WebCore::TypingCommand **)(*a1 + 3064), v14);
  *(_BYTE *)(v7 + 312) = (v4 & 0x20) != 0;
  *(_BYTE *)(v7 + 309) = 0;
  *(_BYTE *)(v7 + 315) = (v4 & 8) != 0;
  result = WebCore::TypingCommand::forwardDeleteKeyPressed(v7, 0, (v4 >> 1) & 1);
  v13 = *(_DWORD *)(v7 + 8) - 1;
  if (*(_DWORD *)(v7 + 8) != 1)
    goto LABEL_14;
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

unsigned int *WebCore::TypingCommand::forwardDeleteKeyPressed(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::Node *v19;
  int v20;
  void *v21;
  WebCore::Node *v22;
  void *v23;
  WTF::StringImpl *v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF::StringImpl *v32;
  void *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  unsigned int v38;
  int v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  int v42;
  int i;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WebCore::Node *v49;
  uint64_t (*v50)();
  WTF::StringImpl *v51;
  unsigned int v52;
  char v53;
  char v54;
  WTF::StringImpl *v55;
  char v56;
  void *v57;
  int v58;
  void *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  uint64_t v67;
  _DWORD *v68;
  void *v69;
  int v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  uint64_t v73;
  uint64_t *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  char v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  uint64_t *v86;
  uint64_t *v87;
  void *v88;
  unsigned int *result;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  WebCore::Node *v99;
  __int16 v100;
  uint64_t v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  unsigned int v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  int v111;
  WebCore::Editor *v112;
  WebCore::Editor *v113;
  void *v114;
  WebCore::Editor *v115;
  void *v116;
  WebCore::Editor *v117;
  void *v118;
  WebCore::Editor *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  WebCore::Editor *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  char v138;
  char v139;
  uint64_t v140;
  char v141;
  WebCore::Document *v143;
  WebCore::Node *v144;
  int v145;
  char v146;
  WTF::StringImpl *v147;
  int v148;
  char v149;
  WebCore::Node *v150;
  int v151;
  char v152;
  uint64_t v153;
  int v154;
  char v155;
  uint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WebCore::Node *v167;
  int v168;
  char v169;
  WebCore::Node *v170;
  WebCore::Node *v171;
  int v172;
  char v173;
  WebCore::Node *v174;
  int v175;
  char v176;
  WebCore::Node *v177[2];
  WebCore::Node *v178;
  char v179;
  uint64_t v180[12];
  char v181;
  uint64_t v182;
  int v183;
  unsigned __int8 v184;
  uint64_t v185;
  int v186;
  char v187;
  uint64_t v188;
  int v189;
  char v190;
  uint64_t v191;
  int v192;
  char v193;
  uint64_t v194;
  int v195;
  char v196;
  uint64_t v197;
  int v198;
  char v199;
  __int16 v200;
  char v201;
  uint64_t v202;
  int v203;
  char v204;
  uint64_t v205;
  int v206;
  char v207;
  uint64_t v208;
  int v209;
  unsigned __int8 v210;
  uint64_t v211;
  int v212;
  char v213;
  uint64_t v214;
  int v215;
  char v216;
  uint64_t v217;
  int v218;
  char v219;
  __int16 v220;
  char v221;

  v13 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v13 + 24) += 2;
  v14 = *(_QWORD *)(v13 + 528);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    v140 = v15;
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v141 = 0;
    v11 = v204;
    v8 = v207;
    v3 = v210;
    v4 = v213;
    v9 = v216;
    v6 = v219;
    v10 = v221;
    v5 = v184;
    v7 = v187;
    v12 = v190;
    v138 = v193;
    v139 = v196;
  }
  else
  {
    v140 = 0;
    v141 = 1;
  }
  v143 = (WebCore::Document *)v13;
  v18 = *(_QWORD *)(v13 + 3056);
  if (!v18)
  {
    v112 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    v113 = WebCore::Editor::Editor(v112, v143);
    v115 = (WebCore::Editor *)*((_QWORD *)v143 + 382);
    *((_QWORD *)v143 + 382) = v113;
    if (v115)
    {
      v135 = v115;
      WebCore::Editor::~Editor(v115, v114);
      if (*(_DWORD *)v135)
      {
        *((_QWORD *)v135 + 62) = 0;
        *((_OWORD *)v135 + 29) = 0u;
        *((_OWORD *)v135 + 30) = 0u;
        *((_OWORD *)v135 + 27) = 0u;
        *((_OWORD *)v135 + 28) = 0u;
        *((_OWORD *)v135 + 25) = 0u;
        *((_OWORD *)v135 + 26) = 0u;
        *((_OWORD *)v135 + 23) = 0u;
        *((_OWORD *)v135 + 24) = 0u;
        *((_OWORD *)v135 + 21) = 0u;
        *((_OWORD *)v135 + 22) = 0u;
        *((_OWORD *)v135 + 19) = 0u;
        *((_OWORD *)v135 + 20) = 0u;
        *((_OWORD *)v135 + 17) = 0u;
        *((_OWORD *)v135 + 18) = 0u;
        *((_OWORD *)v135 + 15) = 0u;
        *((_OWORD *)v135 + 16) = 0u;
        *((_OWORD *)v135 + 13) = 0u;
        *((_OWORD *)v135 + 14) = 0u;
        *((_OWORD *)v135 + 11) = 0u;
        *((_OWORD *)v135 + 12) = 0u;
        *((_OWORD *)v135 + 9) = 0u;
        *((_OWORD *)v135 + 10) = 0u;
        *((_OWORD *)v135 + 7) = 0u;
        *((_OWORD *)v135 + 8) = 0u;
        *((_OWORD *)v135 + 5) = 0u;
        *((_OWORD *)v135 + 6) = 0u;
        *((_OWORD *)v135 + 3) = 0u;
        *((_OWORD *)v135 + 4) = 0u;
        *((_OWORD *)v135 + 1) = 0u;
        *((_OWORD *)v135 + 2) = 0u;
        *(_OWORD *)v135 = 0u;
      }
      else
      {
        WTF::fastFree(v135, v116);
      }
    }
    v18 = *((_QWORD *)v143 + 382);
  }
  WebCore::Editor::updateMarkersForWordsAffectedByEditing(v18, 0);
  v202 = 0;
  v203 = 0;
  v204 = v11 & 0xF0;
  v205 = 0;
  v206 = 0;
  v207 = v8 & 0xF0;
  v208 = 0;
  v209 = 0;
  v210 = v3 & 0xF0;
  v211 = 0;
  v212 = 0;
  v213 = v4 & 0xF0;
  v214 = 0;
  v215 = 0;
  v216 = v9 & 0xF0;
  v217 = 0;
  v218 = 0;
  v219 = v6 & 0xF0;
  v220 = 1;
  v221 = v10 & 0xFC | 1;
  v182 = 0;
  v183 = 0;
  v184 = v5 & 0xF0;
  v185 = 0;
  v186 = 0;
  v187 = v7 & 0xF0;
  v188 = 0;
  v189 = 0;
  v190 = v12 & 0xF0;
  v191 = 0;
  v192 = 0;
  v193 = v138 & 0xF0;
  v194 = 0;
  v195 = 0;
  v196 = v139 & 0xF0;
  v197 = 0;
  v198 = 0;
  v199 &= 0xF0u;
  v200 = 1;
  v201 = v201 & 0xFC | 1;
  v19 = (WebCore::Node *)(a1 + 128);
  v20 = *(unsigned __int8 *)(a1 + 225);
  if (v20 == 2)
  {
    WebCore::VisibleSelection::operator=(&v202, (uint64_t *)(a1 + 128));
    WebCore::VisibleSelection::operator=(&v182, &v202);
    while (1)
    {
      if (HIBYTE(v220) == 1)
        goto LABEL_189;
      if (!HIBYTE(v220))
      {
        WebCore::EditCommand::setEndingSelection((uint64_t *)a1, (const WebCore::VisibleSelection *)(*((_QWORD *)v143 + 383) + 56));
        v67 = *((_QWORD *)v143 + 382);
        if (!v67)
        {
          v117 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v117, v143);
          v119 = (WebCore::Editor *)*((_QWORD *)v143 + 382);
          *((_QWORD *)v143 + 382) = v117;
          if (v119)
          {
            WebCore::Editor::~Editor(v119, v118);
            if (*(_DWORD *)v120)
            {
              *(_QWORD *)(v120 + 496) = 0;
              *(_OWORD *)(v120 + 464) = 0u;
              *(_OWORD *)(v120 + 480) = 0u;
              *(_OWORD *)(v120 + 432) = 0u;
              *(_OWORD *)(v120 + 448) = 0u;
              *(_OWORD *)(v120 + 400) = 0u;
              *(_OWORD *)(v120 + 416) = 0u;
              *(_OWORD *)(v120 + 368) = 0u;
              *(_OWORD *)(v120 + 384) = 0u;
              *(_OWORD *)(v120 + 336) = 0u;
              *(_OWORD *)(v120 + 352) = 0u;
              *(_OWORD *)(v120 + 304) = 0u;
              *(_OWORD *)(v120 + 320) = 0u;
              *(_OWORD *)(v120 + 272) = 0u;
              *(_OWORD *)(v120 + 288) = 0u;
              *(_OWORD *)(v120 + 240) = 0u;
              *(_OWORD *)(v120 + 256) = 0u;
              *(_OWORD *)(v120 + 208) = 0u;
              *(_OWORD *)(v120 + 224) = 0u;
              *(_OWORD *)(v120 + 176) = 0u;
              *(_OWORD *)(v120 + 192) = 0u;
              *(_OWORD *)(v120 + 144) = 0u;
              *(_OWORD *)(v120 + 160) = 0u;
              *(_OWORD *)(v120 + 112) = 0u;
              *(_OWORD *)(v120 + 128) = 0u;
              *(_OWORD *)(v120 + 80) = 0u;
              *(_OWORD *)(v120 + 96) = 0u;
              *(_OWORD *)(v120 + 48) = 0u;
              *(_OWORD *)(v120 + 64) = 0u;
              *(_OWORD *)(v120 + 16) = 0u;
              *(_OWORD *)(v120 + 32) = 0u;
              *(_OWORD *)v120 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v120, v121);
            }
          }
          v67 = *((_QWORD *)v143 + 382);
        }
        v68 = *(_DWORD **)(v67 + 24);
        if (v68)
        {
          ++v68[2];
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v68 + 56))(v68) && *((_BYTE *)v68 + 304))
            *((_BYTE *)v68 + 304) = 0;
          if (v68[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
          else
            --v68[2];
        }
        goto LABEL_189;
      }
      if (!WebCore::FrameSelection::shouldDeleteSelection(*((WebCore::FrameSelection **)v143 + 383), (const WebCore::VisibleSelection *)&v202))goto LABEL_189;
      v147 = 0;
      WebCore::VisibleSelection::firstRange((WebCore::Node *)&v202, v177);
      v70 = WebCore::TypingCommand::willAddTypingToOpenCommand(a1, (WTF::StringImpl *)2, a2, (_DWORD **)&v147, (uint64_t *)v177);
      if (v179)
      {
        v71 = v178;
        v178 = 0;
        if (v71)
        {
          if (*((_DWORD *)v71 + 6) == 2)
          {
            if ((*((_WORD *)v71 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v71, v69);
          }
          else
          {
            *((_DWORD *)v71 + 6) -= 2;
          }
        }
        v72 = v177[0];
        v177[0] = 0;
        if (v72)
        {
          if (*((_DWORD *)v72 + 6) == 2)
          {
            if ((*((_WORD *)v72 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v72, v69);
          }
          else
          {
            *((_DWORD *)v72 + 6) -= 2;
          }
        }
      }
      if (!v70)
        goto LABEL_189;
      WebCore::TypingCommand::postTextStateChangeNotificationForDeletion((unsigned int *)a1, (const WebCore::VisibleSelection *)&v202);
      if (!a3)
        goto LABEL_168;
      v73 = *((_QWORD *)v143 + 382);
      if (!v73)
      {
        v5 = WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor((WebCore::Editor *)v5, v143);
        v123 = (WebCore::Editor *)*((_QWORD *)v143 + 382);
        *((_QWORD *)v143 + 382) = v5;
        if (v123)
        {
          WebCore::Editor::~Editor(v123, v122);
          if (*(_DWORD *)v124)
          {
            *(_QWORD *)(v124 + 496) = 0;
            *(_OWORD *)(v124 + 464) = 0u;
            *(_OWORD *)(v124 + 480) = 0u;
            *(_OWORD *)(v124 + 432) = 0u;
            *(_OWORD *)(v124 + 448) = 0u;
            *(_OWORD *)(v124 + 400) = 0u;
            *(_OWORD *)(v124 + 416) = 0u;
            *(_OWORD *)(v124 + 368) = 0u;
            *(_OWORD *)(v124 + 384) = 0u;
            *(_OWORD *)(v124 + 336) = 0u;
            *(_OWORD *)(v124 + 352) = 0u;
            *(_OWORD *)(v124 + 304) = 0u;
            *(_OWORD *)(v124 + 320) = 0u;
            *(_OWORD *)(v124 + 272) = 0u;
            *(_OWORD *)(v124 + 288) = 0u;
            *(_OWORD *)(v124 + 240) = 0u;
            *(_OWORD *)(v124 + 256) = 0u;
            *(_OWORD *)(v124 + 208) = 0u;
            *(_OWORD *)(v124 + 224) = 0u;
            *(_OWORD *)(v124 + 176) = 0u;
            *(_OWORD *)(v124 + 192) = 0u;
            *(_OWORD *)(v124 + 144) = 0u;
            *(_OWORD *)(v124 + 160) = 0u;
            *(_OWORD *)(v124 + 112) = 0u;
            *(_OWORD *)(v124 + 128) = 0u;
            *(_OWORD *)(v124 + 80) = 0u;
            *(_OWORD *)(v124 + 96) = 0u;
            *(_OWORD *)(v124 + 48) = 0u;
            *(_OWORD *)(v124 + 64) = 0u;
            *(_OWORD *)(v124 + 16) = 0u;
            *(_OWORD *)(v124 + 32) = 0u;
            *(_OWORD *)v124 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v124, v125);
          }
        }
        v73 = *((_QWORD *)v143 + 382);
      }
      v74 = WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v202, v177);
      if (v179)
      {
        WebCore::plainText(v177, 0, 0, (const WTF::String *)&v147);
        *(_BYTE *)(v73 + 89) = 0;
        v76 = v147;
        v147 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v75);
          else
            *(_DWORD *)v76 -= 2;
        }
        if (v179)
        {
          v77 = v178;
          v178 = 0;
          if (v77)
          {
            if (*((_DWORD *)v77 + 6) == 2)
            {
              if ((*((_WORD *)v77 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v77, v75);
            }
            else
            {
              *((_DWORD *)v77 + 6) -= 2;
            }
          }
          v78 = v177[0];
          v177[0] = 0;
          if (v78)
          {
            if (*((_DWORD *)v78 + 6) == 2)
            {
              if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v78, v75);
            }
            else
            {
              *((_DWORD *)v78 + 6) -= 2;
            }
          }
        }
LABEL_168:
        WebCore::EditCommand::setStartingSelection((WebCore::EditCommand *)a1, (const WebCore::VisibleSelection *)&v182);
        if (HIBYTE(v220) == 2)
        {
          v79 = *(_BYTE *)(a1 + 306);
          v80 = WTF::fastMalloc((WTF *)0x248);
          v177[0] = (WebCore::Node *)WebCore::DeleteSelectionCommand::DeleteSelectionCommand(v80, &v202, v79, 1, 0, v20 == 2, 1, 9);
          WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)a1, (uint64_t **)v177);
          if (v177[0])
          {
            if (*((_DWORD *)v177[0] + 2) == 1)
              (*(void (**)(void))(*(_QWORD *)v177[0] + 8))();
            else
              --*((_DWORD *)v177[0] + 2);
          }
        }
        *(_BYTE *)(a1 + 306) = 0;
        WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 2u);
        goto LABEL_189;
      }
      __break(1u);
LABEL_312:
      v82 = 0;
      v148 = *(_DWORD *)(a1 + 112);
      v149 = *(_BYTE *)(a1 + 116);
LABEL_177:
      LODWORD(v83) = v217;
      if (v217 && (v84 = v219 & 7, v84 <= 4))
      {
        v85 = 1 << v84;
        v86 = (uint64_t *)v217;
        if ((v85 & 0x19) == 0)
          v86 = *(uint64_t **)(v217 + 32);
      }
      else
      {
        v86 = 0;
      }
      if (v82 == v86)
        break;
      v87 = (uint64_t *)v211;
      if (v211)
        *(_DWORD *)(v211 + 24) += 2;
      v147 = (WTF::StringImpl *)v87;
      if (v74)
      {
        if (*((_DWORD *)v74 + 6) == 2)
        {
          if ((*((_WORD *)v74 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v74, v59);
        }
        else
        {
          *((_DWORD *)v74 + 6) -= 2;
        }
      }
      v148 = *(_DWORD *)(v5 + 56);
      v149 = *(_BYTE *)(v5 + 60);
LABEL_290:
      WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v182, v19, (const WebCore::Position *)&v147);
      v147 = 0;
      if (v87)
      {
        if (*((_DWORD *)v87 + 6) == 2)
        {
          if ((*((_WORD *)v87 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v87, v28);
        }
        else
        {
          *((_DWORD *)v87 + 6) -= 2;
        }
      }
LABEL_126:
      v58 = 1;
LABEL_127:
      v64 = v170;
      v170 = 0;
      if (v64)
      {
        if (*((_DWORD *)v64 + 6) == 2)
        {
          if ((*((_WORD *)v64 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v64, v28);
        }
        else
        {
          *((_DWORD *)v64 + 6) -= 2;
        }
      }
      v65 = v171;
      v171 = 0;
      if (v65)
      {
        if (*((_DWORD *)v65 + 6) == 2)
        {
          if ((*((_WORD *)v65 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v65, v28);
        }
        else
        {
          *((_DWORD *)v65 + 6) -= 2;
        }
      }
      v66 = v174;
      v174 = 0;
      if (v66)
      {
        if (*((_DWORD *)v66 + 6) == 2)
        {
          if ((*((_WORD *)v66 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v66, v28);
        }
        else
        {
          *((_DWORD *)v66 + 6) -= 2;
        }
      }
      WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v177, v28);
      if (!v58)
        goto LABEL_189;
    }
    LODWORD(v93) = v214;
    if (v214 && (v94 = v216 & 7, v94 <= 4))
    {
      v95 = 1 << v94;
      v96 = v214;
      if ((v95 & 0x19) == 0)
        v96 = *(_QWORD *)(v214 + 32);
    }
    else
    {
      v96 = 0;
    }
    if (!v217)
    {
      if (v96)
      {
LABEL_271:
        if (!v74)
        {
          v147 = 0;
          v148 = v83;
          v149 = 0;
          WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v182, v19, (const WebCore::Position *)&v147);
          goto LABEL_126;
        }
        v107 = v149 & 7;
        if (v107 > 4)
        {
          v87 = 0;
        }
        else
        {
          v87 = v74;
          if (((1 << v107) & 0x19) != 0 || (v87 = (uint64_t *)v74[4]) != 0)
            *((_DWORD *)v87 + 6) += 2;
        }
        if (v107)
        {
          switch(v107)
          {
            case 4u:
              v109 = *((_WORD *)v74 + 14);
              if ((v109 & 1) != 0)
              {
                v108 = v74[10];
                if (v108)
                  LODWORD(v108) = *(_DWORD *)(v108 + 4);
                goto LABEL_287;
              }
              if ((v109 & 4) != 0)
              {
                v110 = v74[10];
                if (v110)
                {
                  LODWORD(v108) = 0;
                  do
                  {
                    LODWORD(v108) = v108 + 1;
                    v110 = *(_QWORD *)(v110 + 56);
                  }
                  while (v110);
                  goto LABEL_287;
                }
              }
              break;
            case 1u:
              v133 = v74[6] & 0xFFFFFFFFFFFFLL;
              if (v133)
              {
                LODWORD(v108) = 0;
                do
                {
                  LODWORD(v108) = v108 + 1;
                  v133 = *(_QWORD *)(v133 + 48) & 0xFFFFFFFFFFFFLL;
                }
                while (v133);
                goto LABEL_287;
              }
              break;
            case 2u:
              v130 = v74[6] & 0xFFFFFFFFFFFFLL;
              if (v130)
              {
                LODWORD(v108) = 1;
                do
                {
                  LODWORD(v108) = v108 + 1;
                  v130 = *(_QWORD *)(v130 + 48) & 0xFFFFFFFFFFFFLL;
                }
                while (v130);
              }
              else
              {
                LODWORD(v108) = 1;
              }
              goto LABEL_287;
          }
          LODWORD(v108) = 0;
        }
        else
        {
          LODWORD(v108) = v148;
        }
LABEL_287:
        v111 = v108 + v83;
        v147 = (WTF::StringImpl *)v87;
        if (*((_DWORD *)v74 + 6) == 2)
        {
          if ((*((_WORD *)v74 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v74, v59);
        }
        else
        {
          *((_DWORD *)v74 + 6) -= 2;
        }
        v148 = v111;
        v149 = 0;
        goto LABEL_290;
      }
LABEL_253:
      if (v214)
      {
        v102 = v216 & 7;
        if ((v216 & 7) != 0)
        {
          switch(v102)
          {
            case 4:
              v103 = *(_WORD *)(v214 + 28);
              if ((v103 & 1) != 0)
              {
                v93 = *(_QWORD *)(v214 + 80);
                if (v93)
                  LODWORD(v93) = *(_DWORD *)(v93 + 4);
                goto LABEL_270;
              }
              if ((v103 & 4) != 0)
              {
                v104 = *(_QWORD *)(v214 + 80);
                if (v104)
                {
                  LODWORD(v93) = 0;
                  do
                  {
                    LODWORD(v93) = v93 + 1;
                    v104 = *(_QWORD *)(v104 + 56);
                  }
                  while (v104);
                  goto LABEL_270;
                }
              }
              break;
            case 1:
              v134 = *(_QWORD *)(v214 + 48) & 0xFFFFFFFFFFFFLL;
              if (v134)
              {
                LODWORD(v93) = 0;
                do
                {
                  LODWORD(v93) = v93 + 1;
                  v134 = *(_QWORD *)(v134 + 48) & 0xFFFFFFFFFFFFLL;
                }
                while (v134);
                goto LABEL_270;
              }
              break;
            case 2:
              v131 = *(_QWORD *)(v214 + 48) & 0xFFFFFFFFFFFFLL;
              if (v131)
              {
                LODWORD(v93) = 1;
                do
                {
                  LODWORD(v93) = v93 + 1;
                  v131 = *(_QWORD *)(v131 + 48) & 0xFFFFFFFFFFFFLL;
                }
                while (v131);
              }
              else
              {
                LODWORD(v93) = 1;
              }
              goto LABEL_270;
          }
          LODWORD(v93) = 0;
        }
        else
        {
          LODWORD(v93) = v215;
        }
      }
LABEL_270:
      LODWORD(v83) = v83 - v93;
      goto LABEL_271;
    }
    v97 = v219 & 7;
    if (v97 > 4)
    {
      v98 = 0;
    }
    else
    {
      v98 = v217;
      if (((1 << v97) & 0x19) == 0)
        v98 = *(_QWORD *)(v217 + 32);
    }
    if ((v219 & 7) == 0)
    {
      LODWORD(v83) = v218;
      goto LABEL_252;
    }
    switch(v97)
    {
      case 4u:
        v100 = *(_WORD *)(v217 + 28);
        if ((v100 & 1) != 0)
        {
          v83 = *(_QWORD *)(v217 + 80);
          if (v83)
            LODWORD(v83) = *(_DWORD *)(v83 + 4);
        }
        else
        {
          if ((v100 & 4) == 0)
            break;
          v101 = *(_QWORD *)(v217 + 80);
          if (!v101)
            break;
          LODWORD(v83) = 0;
          do
          {
            LODWORD(v83) = v83 + 1;
            v101 = *(_QWORD *)(v101 + 56);
          }
          while (v101);
        }
LABEL_252:
        if (v96 != v98)
          goto LABEL_271;
        goto LABEL_253;
      case 1u:
        v132 = *(_QWORD *)(v217 + 48) & 0xFFFFFFFFFFFFLL;
        if (v132)
        {
          LODWORD(v83) = 0;
          do
          {
            LODWORD(v83) = v83 + 1;
            v132 = *(_QWORD *)(v132 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v132);
          goto LABEL_252;
        }
        break;
      case 2u:
        v129 = *(_QWORD *)(v217 + 48) & 0xFFFFFFFFFFFFLL;
        if (v129)
        {
          LODWORD(v83) = 1;
          do
          {
            LODWORD(v83) = v83 + 1;
            v129 = *(_QWORD *)(v129 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v129);
        }
        else
        {
          LODWORD(v83) = 1;
        }
        goto LABEL_252;
    }
    LODWORD(v83) = 0;
    goto LABEL_252;
  }
  *(_BYTE *)(a1 + 306) = 0;
  WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v177, 0);
  WebCore::FrameSelection::setSelection((uint64_t)v177, (uint64_t)v19, 6u, 0, 0, 0, 0);
  WebCore::FrameSelection::modify((uint64_t)v177, 1, 0, a2, 0);
  if (v181)
  {
    if (a3 && a2 && v181 == 1)
      WebCore::FrameSelection::modify((uint64_t)v177, 1, 0, 0, 0);
    WebCore::Position::downstream(a1 + 208, (WebCore::Node *)1, (uint64_t)&v174);
    WebCore::VisibleSelection::visibleEnd((WebCore::VisibleSelection *)&v171, (unsigned __int8 *)v19);
    v22 = v171;
    if (v171)
      *((_DWORD *)v171 + 6) += 2;
    v147 = v22;
    v148 = v172;
    v149 = v173;
    WebCore::enclosingNodeOfType((uint64_t)&v147, (uint64_t (*)(uint64_t))WebCore::isTableCell, 1, (uint64_t *)&v170);
    v24 = v147;
    v147 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24, v23);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    v19 = v170;
    if (v170)
    {
      v25 = *((_WORD *)v170 + 14);
      *((_DWORD *)v170 + 6) += 2;
      if ((v25 & 1) != 0)
      {
        v27 = *((_QWORD *)v19 + 10);
        if (v27)
          LODWORD(v27) = *(_DWORD *)(v27 + 4);
        v144 = v19;
        v145 = v27;
        v26 = v146 & 0xF0;
      }
      else
      {
        v144 = v19;
        v145 = 0;
        v26 = v146 & 0xF0 | 4;
      }
      v146 = v26;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v144, (uint64_t)&v147);
      LOBYTE(v150) = 1;
      v29 = WebCore::operator==((uint64_t *)&v171, (uint64_t *)&v147);
      v30 = v147;
      v147 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v28);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v28);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
      if (v29)
        goto LABEL_104;
    }
    WebCore::endOfParagraph((WebCore::Node *)&v171, 1, &v147);
    v19 = (WebCore::Node *)WebCore::operator==((uint64_t *)&v171, (uint64_t *)&v147);
    v32 = v147;
    v147 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v31);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    if (!(_DWORD)v19)
    {
LABEL_48:
      v37 = v174;
      if (v174)
      {
        v38 = v176 & 7;
        if (v38 <= 4)
        {
          if (((1 << v38) & 0x19) != 0)
          {
            if (v38 - 1 > 1)
            {
              v39 = 0;
              v40 = v174;
LABEL_53:
              if ((*((_QWORD *)v40 + 8) & 0xFFFFFFFFFFFFLL) == 0)
                goto LABEL_83;
              v41 = v174;
              if (v39)
                v41 = (WebCore::Node *)*((_QWORD *)v174 + 4);
              v42 = *(unsigned __int8 *)((*((_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
              if (v42 != 63 && v42 != 35)
                goto LABEL_83;
              if ((v176 & 7) != 0)
              {
                switch(v38)
                {
                  case 4u:
                    v44 = *((_WORD *)v174 + 14);
                    if ((v44 & 1) != 0)
                    {
                      v46 = *((_QWORD *)v174 + 10);
                      if (v46)
                      {
                        i = *(_DWORD *)(v46 + 4);
                        goto LABEL_78;
                      }
                    }
                    else if ((v44 & 4) != 0)
                    {
                      v45 = *((_QWORD *)v174 + 10);
                      if (v45)
                      {
                        i = 0;
                        do
                        {
                          ++i;
                          v45 = *(_QWORD *)(v45 + 56);
                        }
                        while (v45);
                        goto LABEL_78;
                      }
                    }
                    break;
                  case 1u:
                    v128 = *((_QWORD *)v174 + 6) & 0xFFFFFFFFFFFFLL;
                    if (v128)
                    {
                      i = 0;
                      do
                      {
                        ++i;
                        v128 = *(_QWORD *)(v128 + 48) & 0xFFFFFFFFFFFFLL;
                      }
                      while (v128);
                      goto LABEL_78;
                    }
                    break;
                  case 2u:
                    v126 = *((_QWORD *)v174 + 6);
                    for (i = 1; ; ++i)
                    {
                      v127 = v126 & 0xFFFFFFFFFFFFLL;
                      if (!v127)
                        break;
                      v126 = *(_QWORD *)(v127 + 48);
                    }
                    goto LABEL_78;
                }
                i = 0;
              }
              else
              {
                i = v175;
              }
LABEL_78:
              if (v39)
                v37 = (WebCore::Node *)*((_QWORD *)v174 + 4);
              v47 = *((_QWORD *)v37 + 8) & 0xFFFFFFFFFFFFLL;
              if (v47)
                LODWORD(v47) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 528))(v47);
              if (i > (int)v47)
                goto LABEL_83;
              v19 = v174;
              if (v174)
              {
                v52 = v176 & 7;
                v53 = 1;
                if (v52 > 4)
                {
                  v19 = 0;
                }
                else if (((1 << v52) & 0x19) != 0 || (v19 = (WebCore::Node *)*((_QWORD *)v174 + 4)) != 0)
                {
                  v53 = 0;
                  *((_DWORD *)v19 + 6) += 2;
                }
              }
              else
              {
                v53 = 1;
              }
              v54 = *(_BYTE *)(a1 + 226);
              v55 = *(WTF::StringImpl **)(a1 + 208);
              if (v55)
                *((_DWORD *)v55 + 6) += 2;
              v56 = v54 & 2;
              v147 = v55;
              v148 = *(_DWORD *)(a1 + 216);
              v149 = *(_BYTE *)(a1 + 220);
              if ((v53 & 1) == 0)
                *((_DWORD *)v19 + 6) += 2;
              v150 = v19;
              v151 = 0;
              v152 = 2;
              v153 = 0;
              v154 = 0;
              v155 &= 0xF0u;
              v156 = 0;
              v157 = 0;
              v158 &= 0xF0u;
              v159 = 0;
              v160 = 0;
              v161 &= 0xF0u;
              v162 = 0;
              v163 = 0;
              v164 &= 0xF0u;
              v165 = 1;
              v166 = v166 & 0xFD | v56;
              WebCore::VisibleSelection::validate((uint64_t)&v147, 0);
              WebCore::EditCommand::setEndingSelection((uint64_t *)a1, (const WebCore::VisibleSelection *)&v147);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v147);
              if ((v53 & 1) == 0)
              {
                if (*((_DWORD *)v19 + 6) == 2)
                {
                  if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v19, v57);
                }
                else
                {
                  *((_DWORD *)v19 + 6) -= 2;
                }
              }
              WebCore::TypingCommand::typingAddedToOpenCommand((WebCore::CompositeEditCommand *)a1, 2u);
LABEL_104:
              v58 = 0;
              goto LABEL_127;
            }
LABEL_323:
            v40 = (WebCore::Node *)*((_QWORD *)v174 + 4);
            v39 = 1;
            goto LABEL_53;
          }
          if (*((_QWORD *)v174 + 4))
            goto LABEL_323;
        }
      }
LABEL_83:
      if (a2 == 8 && v181 == 1)
      {
        WebCore::VisibleSelection::visibleEnd((WebCore::VisibleSelection *)&v144, (unsigned __int8 *)v180);
        v49 = v144;
        v50 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (!v144)
          v50 = 0;
        if (v50)
        {
          WebCore::endOfParagraph((WebCore::Node *)&v144, 1, &v147);
          v19 = (WebCore::Node *)WebCore::operator==((uint64_t *)&v144, (uint64_t *)&v147);
          v51 = v147;
          v147 = 0;
          if (v51)
          {
            if (*((_DWORD *)v51 + 6) == 2)
            {
              if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v51, v48);
            }
            else
            {
              *((_DWORD *)v51 + 6) -= 2;
            }
          }
          v49 = v144;
        }
        else
        {
          v19 = 0;
        }
        v144 = 0;
        if (v49)
        {
          if (*((_DWORD *)v49 + 6) == 2)
          {
            if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v49, v48);
          }
          else
          {
            *((_DWORD *)v49 + 6) -= 2;
          }
        }
        if ((_DWORD)v19)
          WebCore::FrameSelection::modify((uint64_t)v177, 1, 0, 0, 0);
      }
      WebCore::VisibleSelection::operator=(&v202, v180);
      if (*(_BYTE *)(a1 + 121) == 2)
      {
        v19 = (WebCore::Node *)(a1 + 88);
        if (v208 == *(_QWORD *)(a1 + 88))
        {
          v5 = (uint64_t)&v202;
          if ((v210 & 8) == 0 && ((v60 = v210 & 7, v60 == 4) || v60 == 2))
            v61 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v208);
          else
            v61 = v209;
          if ((*(_BYTE *)(a1 + 100) & 8) == 0 && ((v62 = *(_BYTE *)(a1 + 100) & 7, v62 == 4) || v62 == 2))
            v63 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 88));
          else
            v63 = *(_DWORD *)(a1 + 96);
          if (v61 == v63 && ((*(_BYTE *)(a1 + 100) ^ v210) & 7) == 0)
          {
            v74 = *(uint64_t **)(a1 + 104);
            if (v74)
            {
              *((_DWORD *)v74 + 6) += 2;
              v148 = *(_DWORD *)(a1 + 112);
              v149 = *(_BYTE *)(a1 + 116);
              v81 = v149 & 7;
              if (v81 > 4)
              {
                v82 = 0;
              }
              else if (((1 << v81) & 0x19) != 0)
              {
                v82 = v74;
              }
              else
              {
                v82 = (uint64_t *)v74[4];
              }
              goto LABEL_177;
            }
            goto LABEL_312;
          }
        }
      }
      WebCore::VisibleSelection::operator=(&v182, &v202);
      goto LABEL_126;
    }
    WebCore::VisiblePosition::next((unsigned __int8 *)&v171, 1, 0, (uint64_t)&v147);
    v19 = v147;
    if (v147)
      *((_DWORD *)v147 + 6) += 2;
    v167 = v19;
    v168 = v148;
    v169 = v149;
    WebCore::Position::downstream((uint64_t)&v167, (WebCore::Node *)1, (uint64_t)&v144);
    v34 = v144;
    v144 = 0;
    v35 = v174;
    v174 = v34;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v35, v33);
          v99 = v144;
          v175 = v145;
          v176 = v146;
          v144 = 0;
          if (v99)
          {
            if (*((_DWORD *)v99 + 6) == 2)
            {
              if ((*((_WORD *)v99 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v99, v33);
            }
            else
            {
              *((_DWORD *)v99 + 6) -= 2;
            }
          }
          goto LABEL_42;
        }
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    v175 = v145;
    v176 = v146;
    v144 = 0;
LABEL_42:
    v36 = v167;
    v167 = 0;
    if (v36)
    {
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v36, v33);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
    }
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v33);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    goto LABEL_48;
  }
  WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v177, v21);
LABEL_189:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v182);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v202);
  result = (unsigned int *)v143;
  if ((v141 & 1) == 0)
  {
    v90 = (unsigned int *)(v140 + 8);
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v90);
      v105 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v105 = off_1E31FE290;
      *((_QWORD *)v105 + 1) = v90;
      v177[0] = v105;
      WTF::ensureOnMainThread();
      v106 = v177[0];
      v177[0] = 0;
      if (v106)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v106 + 8))(v106);
      result = (unsigned int *)v143;
    }
  }
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v88);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

void WebCore::TypingCommand::insertText(WebCore::TypingCommand **a1, WebCore *a2, char a3, int a4)
{
  uint64_t v8;
  WebCore::Document *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  WebCore::Editor *v17;
  void *v18;
  WebCore::Editor *v19;
  uint64_t v20;
  void *v21;

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v8 + 4))
  {
    v9 = *a1;
    v10 = *((_QWORD *)*a1 + 382);
    if (v10)
      goto LABEL_29;
    v17 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v17, v9);
    v19 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
    *((_QWORD *)v9 + 382) = v17;
    if (v19)
    {
      WebCore::Editor::~Editor(v19, v18);
      if (*(_DWORD *)v20)
      {
        *(_QWORD *)(v20 + 496) = 0;
        *(_OWORD *)(v20 + 464) = 0u;
        *(_OWORD *)(v20 + 480) = 0u;
        *(_OWORD *)(v20 + 432) = 0u;
        *(_OWORD *)(v20 + 448) = 0u;
        *(_OWORD *)(v20 + 400) = 0u;
        *(_OWORD *)(v20 + 416) = 0u;
        *(_OWORD *)(v20 + 368) = 0u;
        *(_OWORD *)(v20 + 384) = 0u;
        *(_OWORD *)(v20 + 336) = 0u;
        *(_OWORD *)(v20 + 352) = 0u;
        *(_OWORD *)(v20 + 304) = 0u;
        *(_OWORD *)(v20 + 320) = 0u;
        *(_OWORD *)(v20 + 272) = 0u;
        *(_OWORD *)(v20 + 288) = 0u;
        *(_OWORD *)(v20 + 240) = 0u;
        *(_OWORD *)(v20 + 256) = 0u;
        *(_OWORD *)(v20 + 208) = 0u;
        *(_OWORD *)(v20 + 224) = 0u;
        *(_OWORD *)(v20 + 176) = 0u;
        *(_OWORD *)(v20 + 192) = 0u;
        *(_OWORD *)(v20 + 144) = 0u;
        *(_OWORD *)(v20 + 160) = 0u;
        *(_OWORD *)(v20 + 112) = 0u;
        *(_OWORD *)(v20 + 128) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_OWORD *)(v20 + 96) = 0u;
        *(_OWORD *)(v20 + 48) = 0u;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_OWORD *)v20 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v20, v21);
      }
    }
    v10 = *((_QWORD *)v9 + 382);
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_29:
      if (*(_DWORD *)(v8 + 4))
      {
        v11 = *(unsigned __int8 **)(v8 + 8);
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
        {
          LODWORD(v8) = *v11;
        }
        else
        {
          LODWORD(v8) = *(unsigned __int16 *)v11;
          if (v8 > 0xFF)
          {
            v15 = v10;
            v16 = MEMORY[0x19AEA858C](*(unsigned __int16 *)v11);
            v10 = v15;
            v14 = v16 == 9;
LABEL_16:
            WebCore::Editor::updateMarkersForWordsAffectedByEditing(v10, v14);
            goto LABEL_2;
          }
        }
        if (v8 <= 0x20u && ((1 << v8) & 0x100003600) != 0)
        {
          v13 = 1;
          goto LABEL_13;
        }
      }
      else
      {
        LODWORD(v8) = 0;
      }
    }
    v13 = 0;
LABEL_13:
    if ((_DWORD)v8 == 11)
      v14 = 1;
    else
      v14 = v13;
    goto LABEL_16;
  }
LABEL_2:
  WebCore::TypingCommand::insertText(a1, a2, (WTF::String *)(*((_QWORD *)*a1 + 383) + 56), a3, a4);
}

void WebCore::TypingCommand::insertText(WebCore::TypingCommand **a1, WebCore *this, WTF::String *a3, char a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  __int16 v62;
  char v63;
  _QWORD *v64;
  char v65;
  WTF::StringImpl **v66;

  v9 = *((_QWORD *)*a1 + 383);
  v10 = *(_QWORD *)(v9 + 56);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v44 = v10;
  v45 = *(_DWORD *)(v9 + 64);
  v46 = *(_BYTE *)(v9 + 68);
  v11 = *(_QWORD *)(v9 + 72);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v47 = v11;
  v48 = *(_DWORD *)(v9 + 80);
  v49 = *(_BYTE *)(v9 + 84);
  v12 = *(_QWORD *)(v9 + 88);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v50 = v12;
  v51 = *(_DWORD *)(v9 + 96);
  v52 = *(_BYTE *)(v9 + 100);
  v13 = *(_QWORD *)(v9 + 104);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v53 = v13;
  v54 = *(_DWORD *)(v9 + 112);
  v55 = *(_BYTE *)(v9 + 116);
  v14 = *(_QWORD *)(v9 + 120);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v56 = v14;
  v57 = *(_DWORD *)(v9 + 128);
  v58 = *(_BYTE *)(v9 + 132);
  v15 = *(_QWORD *)(v9 + 136);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v59 = v15;
  v60 = *(_DWORD *)(v9 + 144);
  v61 = *(_BYTE *)(v9 + 148);
  v62 = *(_WORD *)(v9 + 152);
  v63 = *(_BYTE *)(v9 + 154);
  WebCore::dispatchBeforeTextInsertedEvent((uint64_t)this, a3, (const WebCore::VisibleSelection *)(a5 == 1), &v43);
  WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping(*a1, &v42);
  v17 = v42;
  if (v42)
  {
    if ((WebCore::operator==(v42 + 128, (uint64_t)a3) & 1) == 0)
    {
      WebCore::EditCommand::setStartingSelection((WebCore::EditCommand *)v17, a3);
      WebCore::EditCommand::setEndingSelection((uint64_t *)v17, a3);
    }
    *(_BYTE *)(v17 + 312) = (a4 & 0x20) != 0;
    *(_BYTE *)(v17 + 309) = a5;
    *(_BYTE *)(v17 + 314) = (a4 & 4) != 0;
    *(_BYTE *)(v17 + 315) = (a4 & 8) != 0;
    if (a5)
    {
      v18 = *(_QWORD *)(v17 + 248);
      if (!v18)
      {
        v18 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = v17;
        v20 = *(unsigned int **)(v17 + 248);
        *(_QWORD *)(v17 + 248) = v18;
        if (v20)
        {
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v19);
          }
          v18 = *(_QWORD *)(v17 + 248);
        }
      }
      do
        v23 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v23 + 1, (unsigned int *)v18));
      v64 = (_QWORD *)v18;
      v65 = a4 & 1;
      v66 = &v43;
      WebCore::forEachLineInString<WebCore::TypingCommandLineOperation>((uint64_t *)&v43, (char *)&v64);
      v64 = 0;
      if (v18)
      {
        do
        {
          v25 = __ldaxr((unsigned int *)v18);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)v18));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)v18);
          WTF::fastFree((WTF *)v18, v24);
        }
      }
      v17 = v42;
      if (!v42)
        goto LABEL_52;
    }
    else
    {
      WebCore::TypingCommand::insertTextAndNotifyAccessibility((WebCore::TypingCommand *)v17, (const WTF::String *)&v43, a4 & 1);
    }
    if (*(_DWORD *)(v17 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    else
      --*(_DWORD *)(v17 + 8);
    goto LABEL_52;
  }
  v27 = *((_QWORD *)*a1 + 66);
  if (!v27)
  {
    v28 = 0;
    goto LABEL_61;
  }
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
  {
LABEL_61:
    v31 = 1;
    goto LABEL_35;
  }
  v29 = (unsigned int *)(v28 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v31 = 0;
LABEL_35:
  v32 = WTF::fastMalloc((WTF *)0x140);
  v33 = v32;
  if (a5 == 1)
  {
    v34 = 54;
  }
  else if (a5 == 2)
  {
    v34 = 51;
  }
  else if ((a4 & 0x20) != 0)
  {
    v34 = 17;
  }
  else
  {
    v34 = 55;
  }
  WebCore::EditCommand::EditCommand(v32, (uint64_t *)a1, v34);
  *(_OWORD *)(v33 + 248) = 0u;
  *(_OWORD *)(v33 + 264) = 0u;
  *(_QWORD *)v33 = off_1E33AE020;
  *(_BYTE *)(v33 + 280) = 3;
  v35 = v43;
  if (v43)
    *(_DWORD *)v43 += 4;
  *(_QWORD *)(v33 + 288) = v35;
  *(_QWORD *)(v33 + 296) = v35;
  *(_BYTE *)(v33 + 304) = 1;
  *(_BYTE *)(v33 + 305) = a4 & 1;
  *(_BYTE *)(v33 + 306) = (a4 & 0x10) != 0;
  *(_WORD *)(v33 + 307) = 1;
  *(_BYTE *)(v33 + 309) = a5;
  *(_BYTE *)(v33 + 310) = (a4 & 2) != 0;
  *(_BYTE *)(v33 + 312) = (a4 & 0x20) != 0;
  *(_BYTE *)(v33 + 313) = 0;
  *(_BYTE *)(v33 + 314) = (a4 & 4) != 0;
  *(_BYTE *)(v33 + 315) = (a4 & 8) != 0;
  *(_BYTE *)(v33 + 281) = *(_BYTE *)(v33 + 240);
  *(_BYTE *)(v33 + 311) = 0;
  WebCore::TextInsertionBaseCommand::applyTextInsertionCommand(v28, (WebCore::CompositeEditCommand *)v33, a3, (const WebCore::VisibleSelection *)&v44);
  if (*(_DWORD *)(v33 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if ((v31 & 1) != 0)
      goto LABEL_52;
  }
  else
  {
    --*(_DWORD *)(v33 + 8);
    if ((v31 & 1) != 0)
      goto LABEL_52;
  }
  v36 = (unsigned int *)(v28 + 8);
  do
  {
    v37 = __ldaxr(v36);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v36));
  if (!v38)
  {
    atomic_store(1u, v36);
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v40 = off_1E31FE290;
    v40[1] = v36;
    v64 = v40;
    WTF::ensureOnMainThread();
    v41 = v64;
    v64 = 0;
    if (v41)
      (*(void (**)(_QWORD *))(*v41 + 8))(v41);
  }
LABEL_52:
  v39 = v43;
  v43 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v39 -= 2;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v44);
}

uint64_t WebCore::TypingCommand::setShouldRetainAutocorrectionIndicator(uint64_t this, char a2)
{
  *(_BYTE *)(this + 314) = a2;
  return this;
}

unsigned int *WebCore::TypingCommand::insertTextAndNotifyAccessibility(WebCore::TypingCommand *this, const WTF::String *a2, char a3)
{
  WebCore::TypingCommand *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::TypingCommand *v19;
  int v20;
  int v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  unsigned int *result;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  WebCore::Node *v40;
  int v41;
  WebCore::Node *v42;
  uint64_t v43;
  char v44;
  const WTF::String *v45;

  v5 = this;
  v6 = *((_QWORD *)this + 2);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::AccessibilityReplacedText::AccessibilityReplacedText((WebCore::AccessibilityReplacedText *)&v38, (const WebCore::VisibleSelection *)(*(_QWORD *)(v6 + 3064) + 56));
  v7 = *((_QWORD *)v5 + 31);
  if (!v7)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v5;
    v9 = (unsigned int *)*((_QWORD *)v5 + 31);
    *((_QWORD *)v5 + 31) = v7;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
      v7 = *((_QWORD *)v5 + 31);
    }
  }
  do
    v12 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v12 + 1, (unsigned int *)v7));
  v43 = v7;
  v44 = a3;
  v45 = a2;
  WebCore::forEachLineInString<WebCore::TypingCommandLineOperation>((uint64_t *)a2, (char *)&v43);
  v43 = 0;
  if (v7)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v7);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v7));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::fastFree((WTF *)v7, v13);
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
    {
      v31 = *(_QWORD *)(v6 + 528);
      i = v6;
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        i = v6;
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 120);
          i = v6;
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + 8);
            for (i = v6; v34; v34 = *(_QWORD *)(v37 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 8);
              v35 = *(_QWORD *)(i + 528);
              if (!v35)
                break;
              v36 = *(_QWORD *)(v35 + 8);
              if (!v36)
                break;
              v37 = *(_QWORD *)(v36 + 120);
              if (!v37)
                break;
            }
          }
        }
      }
    }
    else
    {
      v25 = *(_QWORD *)(v6 + 528);
      i = v6;
      if (v25)
      {
        v27 = *(_QWORD *)(v25 + 8);
        i = v6;
        if (v27)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v27 + 128) + 8);
          v29 = v28 && *(_BYTE *)(v28 + 144) == 0;
          i = v6;
          if (v29)
          {
            v30 = *(_QWORD *)(v28 + 296);
            i = v6;
            if (v30)
              i = v30;
          }
        }
      }
    }
    WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v38, *(WebCore::AXObjectCache **)(i + 1488), 3u, (uint64_t)a2, *(_QWORD *)(v6 + 3064) + 56);
    if (!v5)
    {
LABEL_68:
      if (MEMORY[0x110] == -1 || MEMORY[0x120] == -1)
      {
        MEMORY[0x110] = v39;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x118, (uint64_t *)&v40);
        MEMORY[0x120] = v41;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x128, (uint64_t *)&v42);
      }
      goto LABEL_34;
    }
  }
  else
  {
    WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v38, 0, 3u, (uint64_t)a2, *(_QWORD *)(v6 + 3064) + 56);
  }
  ++*((_DWORD *)v5 + 2);
  while (1)
  {
    v17 = *((_QWORD *)v5 + 34);
    if (v17)
      break;
    v18 = *((_QWORD *)v5 + 29);
    if (v18)
    {
      v19 = *(WebCore::TypingCommand **)(v18 + 8);
      if (v19)
        ++*((_DWORD *)v19 + 2);
    }
    else
    {
      v19 = 0;
    }
    if (*((_DWORD *)v5 + 2) == 1)
      (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 2);
    v5 = v19;
    if (!v19)
      goto LABEL_68;
  }
  v20 = *(_DWORD *)(v17 + 8);
  *(_DWORD *)(v17 + 8) = v20 + 1;
  if (v20)
    *(_DWORD *)(v17 + 8) = v20;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (*((_DWORD *)v5 + 2) == 1)
    (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 2);
  v21 = *(_DWORD *)(v17 + 8);
  *(_DWORD *)(v17 + 8) = v21 + 1;
  if (*(_DWORD *)(v17 + 272) == -1 || *(_DWORD *)(v17 + 288) == -1)
  {
    *(_DWORD *)(v17 + 272) = v39;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v17 + 280), (uint64_t *)&v40);
    *(_DWORD *)(v17 + 288) = v41;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v17 + 296), (uint64_t *)&v42);
    v21 = *(_DWORD *)(v17 + 8) - 1;
  }
  if (v21)
    *(_DWORD *)(v17 + 8) = v21;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_34:
  v22 = v42;
  v42 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22, v16);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  v23 = v40;
  v40 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v16);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  result = (unsigned int *)v38;
  v38 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
    else
      *result -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v16);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::TypingCommand::insertLineBreak(WebCore::TypingCommand **a1, char a2)
{
  uint64_t v4;
  unsigned int *result;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  WebCore::TypingCommand *v9;

  WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping(*a1, &v9);
  v4 = (uint64_t)v9;
  if (!v9)
  {
    v4 = WTF::fastMalloc((WTF *)0x140);
    v7 = WebCore::EditCommand::EditCommand(v4, (uint64_t *)a1, 52);
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_QWORD *)v7 = off_1E33AE020;
    *(_BYTE *)(v7 + 280) = 4;
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v8 += 4;
    *(_QWORD *)(v4 + 288) = v8;
    *(_QWORD *)(v4 + 296) = v8;
    *(_BYTE *)(v4 + 304) = 1;
    *(_BYTE *)(v4 + 305) = a2 & 1;
    *(_BYTE *)(v4 + 306) = (a2 & 0x10) != 0;
    *(_WORD *)(v4 + 307) = 1;
    *(_BYTE *)(v4 + 309) = 0;
    *(_BYTE *)(v4 + 310) = (a2 & 2) != 0;
    *(_BYTE *)(v4 + 312) = (a2 & 0x20) != 0;
    *(_BYTE *)(v4 + 313) = 0;
    *(_BYTE *)(v4 + 314) = (a2 & 4) != 0;
    *(_BYTE *)(v4 + 315) = (a2 & 8) != 0;
    *(_BYTE *)(v4 + 281) = *(_BYTE *)(v4 + 240);
    *(_BYTE *)(v4 + 311) = 1;
    result = (unsigned int *)WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v4);
    v6 = *(_DWORD *)(v4 + 8) - 1;
    if (*(_DWORD *)(v4 + 8) == 1)
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = v6;
    return result;
  }
  *((_BYTE *)v9 + 312) = (a2 & 0x20) != 0;
  *(_BYTE *)(v4 + 309) = 0;
  *(_BYTE *)(v4 + 314) = (a2 & 4) != 0;
  result = WebCore::TypingCommand::insertLineBreakAndNotifyAccessibility((WebCore::TypingCommand *)v4);
  v6 = *(_DWORD *)(v4 + 8) - 1;
  if (*(_DWORD *)(v4 + 8) != 1)
    goto LABEL_7;
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

unsigned int *WebCore::TypingCommand::insertLineBreakAndNotifyAccessibility(WebCore::TypingCommand *this)
{
  WebCore::TypingCommand *v1;
  uint64_t v2;
  const WebCore::VisibleSelection *v3;
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF::StringImpl *v8;
  WebCore::Node *v9;
  WebCore::AXObjectCache *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::TypingCommand *v15;
  int v16;
  int v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  unsigned int *result;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WebCore::Node *v36;
  int v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WTF::StringImpl *v40[4];
  char v41;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::AccessibilityReplacedText::AccessibilityReplacedText((WebCore::AccessibilityReplacedText *)&v34, (const WebCore::VisibleSelection *)(*(_QWORD *)(v2 + 3064) + 56));
  if (WebCore::canAppendNewLineFeedToSelection((WebCore::TypingCommand *)((char *)v1 + 128), v3))
  {
    LOBYTE(v40[0]) = 0;
    v41 = 0;
    if (WebCore::TypingCommand::willAddTypingToOpenCommand((uint64_t)v1, (WTF::StringImpl *)4, 3, MEMORY[0x1E0CBF738], (uint64_t *)v40))
    {
      v4 = (WebCore::Node *)*((_QWORD *)v1 + 2);
      *((_DWORD *)v4 + 6) += 2;
      v39 = v4;
      v5 = WTF::fastMalloc((WTF *)0x118);
      v6 = WebCore::EditCommand::EditCommand(v5, (uint64_t *)&v39, 59);
      *(_OWORD *)(v6 + 248) = 0u;
      *(_OWORD *)(v6 + 264) = 0u;
      *(_QWORD *)v6 = off_1E33ACE28;
      v40[0] = (WTF::StringImpl *)v6;
      WebCore::CompositeEditCommand::applyCommandToComposite(v1, (uint64_t **)v40);
      v8 = v40[0];
      v40[0] = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
        else
          --*((_DWORD *)v8 + 2);
      }
      v9 = v39;
      v39 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v7);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      WebCore::TypingCommand::typingAddedToOpenCommand(v1, 4u);
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
    {
      v27 = *(_QWORD *)(v2 + 528);
      i = v2;
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8);
        i = v2;
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 120);
          i = v2;
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 8);
            for (i = v2; v30; v30 = *(_QWORD *)(v33 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v30 + 40) + 8);
              v31 = *(_QWORD *)(i + 528);
              if (!v31)
                break;
              v32 = *(_QWORD *)(v31 + 8);
              if (!v32)
                break;
              v33 = *(_QWORD *)(v32 + 120);
              if (!v33)
                break;
            }
          }
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(v2 + 528);
      i = v2;
      if (v21)
      {
        v23 = *(_QWORD *)(v21 + 8);
        i = v2;
        if (v23)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v23 + 128) + 8);
          v25 = v24 && *(_BYTE *)(v24 + 144) == 0;
          i = v2;
          if (v25)
          {
            v26 = *(_QWORD *)(v24 + 296);
            i = v2;
            if (v26)
              i = v26;
          }
        }
      }
    }
    v10 = *(WebCore::AXObjectCache **)(i + 1488);
  }
  else
  {
    v10 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v34, v10, 3u, (uint64_t)v40, *(_QWORD *)(v2 + 3064) + 56);
  v12 = v40[0];
  v40[0] = 0;
  if (!v12)
  {
LABEL_15:
    if (v1)
      goto LABEL_16;
LABEL_52:
    if (MEMORY[0x110] == -1 || MEMORY[0x120] == -1)
    {
      MEMORY[0x110] = v35;
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x118, (uint64_t *)&v36);
      MEMORY[0x120] = v37;
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x128, (uint64_t *)&v38);
    }
    goto LABEL_36;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v12, v11);
  if (!v1)
    goto LABEL_52;
LABEL_16:
  ++*((_DWORD *)v1 + 2);
  while (1)
  {
    v13 = *((_QWORD *)v1 + 34);
    if (v13)
      break;
    v14 = *((_QWORD *)v1 + 29);
    if (v14)
    {
      v15 = *(WebCore::TypingCommand **)(v14 + 8);
      if (v15)
        ++*((_DWORD *)v15 + 2);
    }
    else
    {
      v15 = 0;
    }
    if (*((_DWORD *)v1 + 2) == 1)
      (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v1 + 8))(v1);
    else
      --*((_DWORD *)v1 + 2);
    v1 = v15;
    if (!v15)
      goto LABEL_52;
  }
  v16 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v13 + 8) = v16 + 1;
  if (v16)
    *(_DWORD *)(v13 + 8) = v16;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*((_DWORD *)v1 + 2) == 1)
    (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v1 + 8))(v1);
  else
    --*((_DWORD *)v1 + 2);
  v17 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v13 + 8) = v17 + 1;
  if (*(_DWORD *)(v13 + 272) == -1 || *(_DWORD *)(v13 + 288) == -1)
  {
    *(_DWORD *)(v13 + 272) = v35;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v13 + 280), (uint64_t *)&v36);
    *(_DWORD *)(v13 + 288) = v37;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v13 + 296), (uint64_t *)&v38);
    v17 = *(_DWORD *)(v13 + 8) - 1;
  }
  if (v17)
    *(_DWORD *)(v13 + 8) = v17;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_36:
  v18 = v38;
  v38 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v11);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  v19 = v36;
  v36 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v11);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  result = (unsigned int *)v34;
  v34 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *result -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v11);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::TypingCommand::insertParagraphSeparatorInQuotedContent(WebCore::TypingCommand **a1)
{
  uint64_t v2;
  unsigned int *result;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  WebCore::TypingCommand *v7;

  WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping(*a1, &v7);
  v2 = (uint64_t)v7;
  if (!v7)
  {
    v2 = WTF::fastMalloc((WTF *)0x140);
    v5 = WebCore::EditCommand::EditCommand(v2, (uint64_t *)a1, 53);
    *(_OWORD *)(v5 + 248) = 0u;
    *(_OWORD *)(v5 + 264) = 0u;
    *(_QWORD *)v5 = off_1E33AE020;
    *(_BYTE *)(v5 + 280) = 6;
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 4;
    *(_QWORD *)(v2 + 288) = v6;
    *(_QWORD *)(v2 + 296) = v6;
    *(_DWORD *)(v2 + 312) = 0;
    *(_BYTE *)(v2 + 281) = *(_BYTE *)(v2 + 240);
    *(_QWORD *)(v2 + 304) = 16777217;
    result = (unsigned int *)WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v2);
    v4 = *(_DWORD *)(v2 + 8) - 1;
    if (*(_DWORD *)(v2 + 8) == 1)
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_7:
    *(_DWORD *)(v2 + 8) = v4;
    return result;
  }
  *((_BYTE *)v7 + 312) = 0;
  *(_BYTE *)(v2 + 309) = 0;
  result = WebCore::TypingCommand::insertParagraphSeparatorInQuotedContentAndNotifyAccessibility((WebCore::TypingCommand *)v2);
  v4 = *(_DWORD *)(v2 + 8) - 1;
  if (*(_DWORD *)(v2 + 8) != 1)
    goto LABEL_7;
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

unsigned int *WebCore::TypingCommand::insertParagraphSeparatorInQuotedContentAndNotifyAccessibility(WebCore::TypingCommand *this)
{
  WebCore::TypingCommand *v1;
  uint64_t v2;
  void *v3;
  WTF::StringImpl *v4;
  WebCore::AXObjectCache *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::TypingCommand *v10;
  int v11;
  int v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  unsigned int *result;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WebCore::Node *v37;
  int v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WTF::StringImpl *v41[4];
  char v42;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::AccessibilityReplacedText::AccessibilityReplacedText((WebCore::AccessibilityReplacedText *)&v35, (const WebCore::VisibleSelection *)(*(_QWORD *)(v2 + 3064) + 56));
  LOBYTE(v41[0]) = 0;
  v42 = 0;
  if (WebCore::TypingCommand::willAddTypingToOpenCommand((uint64_t)v1, (WTF::StringImpl *)6, 4, MEMORY[0x1E0CBF738], (uint64_t *)v41))
  {
    WebCore::enclosingNodeOfType((uint64_t)v1 + 192, (uint64_t (*)(uint64_t))WebCore::isTableStructureNode, 1, (uint64_t *)v41);
    v4 = v41[0];
    v41[0] = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4, v3);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
      WebCore::TypingCommand::insertParagraphSeparator(v1, (const WebCore::VisibleSelection *)v3);
    }
    else
    {
      v16 = (WebCore::Node *)*((_QWORD *)v1 + 2);
      *((_DWORD *)v16 + 6) += 2;
      v40 = v16;
      v17 = WTF::fastMalloc((WTF *)0x118);
      v18 = WebCore::EditCommand::EditCommand(v17, (uint64_t *)&v40, 59);
      *(_OWORD *)(v18 + 248) = 0u;
      *(_OWORD *)(v18 + 264) = 0u;
      *(_QWORD *)v18 = off_1E33A9758;
      v41[0] = (WTF::StringImpl *)v18;
      WebCore::CompositeEditCommand::applyCommandToComposite(v1, (uint64_t **)v41);
      v20 = v41[0];
      v41[0] = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
        else
          --*((_DWORD *)v20 + 2);
      }
      v21 = v40;
      v40 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v19);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      WebCore::TypingCommand::typingAddedToOpenCommand(v1, 6u);
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
    {
      v28 = *(_QWORD *)(v2 + 528);
      i = v2;
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        i = v2;
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 120);
          i = v2;
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            for (i = v2; v31; v31 = *(_QWORD *)(v34 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v31 + 40) + 8);
              v32 = *(_QWORD *)(i + 528);
              if (!v32)
                break;
              v33 = *(_QWORD *)(v32 + 8);
              if (!v33)
                break;
              v34 = *(_QWORD *)(v33 + 120);
              if (!v34)
                break;
            }
          }
        }
      }
    }
    else
    {
      v22 = *(_QWORD *)(v2 + 528);
      i = v2;
      if (v22)
      {
        v24 = *(_QWORD *)(v22 + 8);
        i = v2;
        if (v24)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
          v26 = v25 && *(_BYTE *)(v25 + 144) == 0;
          i = v2;
          if (v26)
          {
            v27 = *(_QWORD *)(v25 + 296);
            i = v2;
            if (v27)
              i = v27;
          }
        }
      }
    }
    v5 = *(WebCore::AXObjectCache **)(i + 1488);
  }
  else
  {
    v5 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v35, v5, 3u, (uint64_t)v41, *(_QWORD *)(v2 + 3064) + 56);
  v7 = v41[0];
  v41[0] = 0;
  if (!v7)
  {
LABEL_11:
    if (v1)
      goto LABEL_12;
LABEL_48:
    if (MEMORY[0x110] == -1 || MEMORY[0x120] == -1)
    {
      MEMORY[0x110] = v36;
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x118, (uint64_t *)&v37);
      MEMORY[0x120] = v38;
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x128, (uint64_t *)&v39);
    }
    goto LABEL_32;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v7, v6);
  if (!v1)
    goto LABEL_48;
LABEL_12:
  ++*((_DWORD *)v1 + 2);
  while (1)
  {
    v8 = *((_QWORD *)v1 + 34);
    if (v8)
      break;
    v9 = *((_QWORD *)v1 + 29);
    if (v9)
    {
      v10 = *(WebCore::TypingCommand **)(v9 + 8);
      if (v10)
        ++*((_DWORD *)v10 + 2);
    }
    else
    {
      v10 = 0;
    }
    if (*((_DWORD *)v1 + 2) == 1)
      (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v1 + 8))(v1);
    else
      --*((_DWORD *)v1 + 2);
    v1 = v10;
    if (!v10)
      goto LABEL_48;
  }
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = v11 + 1;
  if (v11)
    *(_DWORD *)(v8 + 8) = v11;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*((_DWORD *)v1 + 2) == 1)
    (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v1 + 8))(v1);
  else
    --*((_DWORD *)v1 + 2);
  v12 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = v12 + 1;
  if (*(_DWORD *)(v8 + 272) == -1 || *(_DWORD *)(v8 + 288) == -1)
  {
    *(_DWORD *)(v8 + 272) = v36;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v8 + 280), (uint64_t *)&v37);
    *(_DWORD *)(v8 + 288) = v38;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v8 + 296), (uint64_t *)&v39);
    v12 = *(_DWORD *)(v8 + 8) - 1;
  }
  if (v12)
    *(_DWORD *)(v8 + 8) = v12;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_32:
  v13 = v39;
  v39 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v6);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v6);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    else
      *result -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v6);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::TypingCommand::insertParagraphSeparator(WebCore::TypingCommand **a1, char a2)
{
  uint64_t v4;
  unsigned int *result;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  WebCore::TypingCommand *v9;

  WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping(*a1, &v9);
  v4 = (uint64_t)v9;
  if (!v9)
  {
    v4 = WTF::fastMalloc((WTF *)0x140);
    v7 = WebCore::EditCommand::EditCommand(v4, (uint64_t *)a1, 53);
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_QWORD *)v7 = off_1E33AE020;
    *(_BYTE *)(v7 + 280) = 5;
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v8 += 4;
    *(_QWORD *)(v4 + 288) = v8;
    *(_QWORD *)(v4 + 296) = v8;
    *(_BYTE *)(v4 + 304) = 1;
    *(_BYTE *)(v4 + 305) = a2 & 1;
    *(_BYTE *)(v4 + 306) = (a2 & 0x10) != 0;
    *(_WORD *)(v4 + 307) = 1;
    *(_BYTE *)(v4 + 309) = 0;
    *(_BYTE *)(v4 + 310) = (a2 & 2) != 0;
    *(_BYTE *)(v4 + 312) = (a2 & 0x20) != 0;
    *(_BYTE *)(v4 + 313) = 0;
    *(_BYTE *)(v4 + 314) = (a2 & 4) != 0;
    *(_BYTE *)(v4 + 315) = (a2 & 8) != 0;
    *(_BYTE *)(v4 + 281) = *(_BYTE *)(v4 + 240);
    *(_BYTE *)(v4 + 311) = 1;
    result = (unsigned int *)WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v4);
    v6 = *(_DWORD *)(v4 + 8) - 1;
    if (*(_DWORD *)(v4 + 8) == 1)
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = v6;
    return result;
  }
  *((_BYTE *)v9 + 312) = (a2 & 0x20) != 0;
  *(_BYTE *)(v4 + 309) = 0;
  *(_BYTE *)(v4 + 314) = (a2 & 4) != 0;
  result = WebCore::TypingCommand::insertParagraphSeparatorAndNotifyAccessibility((WebCore::TypingCommand *)v4);
  v6 = *(_DWORD *)(v4 + 8) - 1;
  if (*(_DWORD *)(v4 + 8) != 1)
    goto LABEL_7;
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

unsigned int *WebCore::TypingCommand::insertParagraphSeparatorAndNotifyAccessibility(WebCore::TypingCommand *this)
{
  WebCore::TypingCommand *v1;
  uint64_t v2;
  const WebCore::VisibleSelection *v3;
  WebCore::AXObjectCache *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::TypingCommand *v9;
  int v10;
  int v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  unsigned int *result;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WebCore::Node *v31;
  int v32;
  WebCore::Node *v33;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::AccessibilityReplacedText::AccessibilityReplacedText((WebCore::AccessibilityReplacedText *)&v29, (const WebCore::VisibleSelection *)(*(_QWORD *)(v2 + 3064) + 56));
  WebCore::TypingCommand::insertParagraphSeparator(v1, v3);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
    {
      v21 = *(_QWORD *)(v2 + 528);
      i = v2;
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        i = v2;
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 120);
          i = v2;
          if (v23)
          {
            v24 = *(_QWORD *)(v23 + 8);
            for (i = v2; v24; v24 = *(_QWORD *)(v27 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
              v25 = *(_QWORD *)(i + 528);
              if (!v25)
                break;
              v26 = *(_QWORD *)(v25 + 8);
              if (!v26)
                break;
              v27 = *(_QWORD *)(v26 + 120);
              if (!v27)
                break;
            }
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(v2 + 528);
      i = v2;
      if (v15)
      {
        v17 = *(_QWORD *)(v15 + 8);
        i = v2;
        if (v17)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v17 + 128) + 8);
          v19 = v18 && *(_BYTE *)(v18 + 144) == 0;
          i = v2;
          if (v19)
          {
            v20 = *(_QWORD *)(v18 + 296);
            i = v2;
            if (v20)
              i = v20;
          }
        }
      }
    }
    v4 = *(WebCore::AXObjectCache **)(i + 1488);
  }
  else
  {
    v4 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v29, v4, 3u, (uint64_t)&v28, *(_QWORD *)(v2 + 3064) + 56);
  v6 = v28;
  v28 = 0;
  if (!v6)
  {
LABEL_6:
    if (v1)
      goto LABEL_7;
LABEL_43:
    if (MEMORY[0x110] == -1 || MEMORY[0x120] == -1)
    {
      MEMORY[0x110] = v30;
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x118, (uint64_t *)&v31);
      MEMORY[0x120] = v32;
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x128, (uint64_t *)&v33);
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v6, v5);
  if (!v1)
    goto LABEL_43;
LABEL_7:
  ++*((_DWORD *)v1 + 2);
  while (1)
  {
    v7 = *((_QWORD *)v1 + 34);
    if (v7)
      break;
    v8 = *((_QWORD *)v1 + 29);
    if (v8)
    {
      v9 = *(WebCore::TypingCommand **)(v8 + 8);
      if (v9)
        ++*((_DWORD *)v9 + 2);
    }
    else
    {
      v9 = 0;
    }
    if (*((_DWORD *)v1 + 2) == 1)
      (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v1 + 8))(v1);
    else
      --*((_DWORD *)v1 + 2);
    v1 = v9;
    if (!v9)
      goto LABEL_43;
  }
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)(v7 + 8) = v10 + 1;
  if (v10)
    *(_DWORD *)(v7 + 8) = v10;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((_DWORD *)v1 + 2) == 1)
    (*(void (**)(WebCore::TypingCommand *))(*(_QWORD *)v1 + 8))(v1);
  else
    --*((_DWORD *)v1 + 2);
  v11 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)(v7 + 8) = v11 + 1;
  if (*(_DWORD *)(v7 + 272) == -1 || *(_DWORD *)(v7 + 288) == -1)
  {
    *(_DWORD *)(v7 + 272) = v30;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v7 + 280), (uint64_t *)&v31);
    *(_DWORD *)(v7 + 288) = v32;
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v7 + 296), (uint64_t *)&v33);
    v11 = *(_DWORD *)(v7 + 8) - 1;
  }
  if (v11)
    *(_DWORD *)(v7 + 8) = v11;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_27:
  v12 = v33;
  v33 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v5);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v13 = v31;
  v31 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v5);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    else
      *result -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::TypingCommand::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping(WebCore::TypingCommand *this, WebCore::Document *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t result;
  WebCore::EditCommand *v5;
  uint64_t v6;
  uint64_t *v7;
  WebCore::EditCommand *v8;

  result = WebCore::TypingCommand::lastTypingCommandIfStillOpenForTyping(this, &v8);
  v5 = v8;
  if (v8)
  {
    result = (uint64_t)WebCore::EditCommand::setEndingSelection((uint64_t *)v8, a2);
    v6 = *((unsigned int *)v5 + 67);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)(*((_QWORD *)v5 + 32) + 8 * v6 - 8);
      if (v7)
        ++*((_DWORD *)v7 + 2);
      result = (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
      if ((_DWORD)result)
        result = (uint64_t)WebCore::EditCommand::setEndingSelection(v7, a2);
      if (*((_DWORD *)v7 + 2) == 1)
        result = (*(uint64_t (**)(uint64_t *))(*v7 + 8))(v7);
      else
        --*((_DWORD *)v7 + 2);
    }
    if (*((_DWORD *)v5 + 2) == 1)
      return (*(uint64_t (**)(WebCore::EditCommand *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 2);
  }
  return result;
}

unsigned int *WebCore::TypingCommand::postTextStateChangeNotificationForDeletion(unsigned int *this, const WebCore::VisibleSelection *a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  void *v5;
  WebCore::Node *v6;
  WTF::StringImpl *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  WebCore::Node *v19;
  WebCore::Node *v20[2];
  char v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;
  WebCore::Node *v25[3];
  WTF::StringImpl *v26;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v2 & 1) != 0)
  {
    v4 = (uint64_t)this;
    WebCore::VisibleSelection::visibleStart((WebCore::VisibleSelection *)&v22, (unsigned __int8 *)a2);
    WebCore::VisibleSelection::visibleEnd((WebCore::VisibleSelection *)v25, (unsigned __int8 *)a2);
    WebCore::AccessibilityObject::stringForVisiblePositionRange((uint64_t *)&v22, &v26);
    WebCore::VisiblePosition::canonicalPosition((const WebCore::VisibleSelection *)((char *)a2 + 64), (uint64_t)v20);
    v21 = 1;
    WebCore::EditCommand::postTextStateChangeNotification((unsigned int *)v4, (void *)1, (uint64_t)&v26, (uint64_t *)v20);
    v6 = v20[0];
    v20[0] = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v5);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    v7 = v26;
    v26 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v25[0];
    v25[0] = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v5);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    v9 = v22;
    v22 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v5);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    LODWORD(v22) = -1;
    v23 = 0;
    v24 = -1;
    v25[0] = 0;
    WebCore::VisibleSelection::visibleStart((WebCore::VisibleSelection *)v20, (unsigned __int8 *)a2);
    LODWORD(v22) = WebCore::indexForVisiblePosition((uint64_t *)v20, (uint64_t)&v23);
    v11 = v20[0];
    v20[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    WebCore::VisibleSelection::visibleEnd((WebCore::VisibleSelection *)v20, (unsigned __int8 *)a2);
    v24 = WebCore::indexForVisiblePosition((uint64_t *)v20, (uint64_t)v25);
    v13 = v20[0];
    v20[0] = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v12);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      while (1)
      {
        v14 = *(_QWORD *)(v4 + 272);
        if (v14)
          break;
        v15 = *(_QWORD *)(v4 + 232);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
            ++*(_DWORD *)(v16 + 8);
        }
        else
        {
          v16 = 0;
        }
        if (*(_DWORD *)(v4 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        else
          --*(_DWORD *)(v4 + 8);
        v4 = v16;
        if (!v16)
          goto LABEL_66;
      }
      v17 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v17 + 1;
      if (v17)
        *(_DWORD *)(v14 + 8) = v17;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (*(_DWORD *)(v4 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      else
        --*(_DWORD *)(v4 + 8);
      v18 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v18 + 1;
      if (*(_DWORD *)(v14 + 272) == -1 || *(_DWORD *)(v14 + 288) == -1)
      {
        *(_DWORD *)(v14 + 272) = (_DWORD)v22;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v14 + 280), (uint64_t *)&v23);
        *(_DWORD *)(v14 + 288) = v24;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v14 + 296), (uint64_t *)v25);
        v18 = *(_DWORD *)(v14 + 8) - 1;
      }
      if (v18)
        *(_DWORD *)(v14 + 8) = v18;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    else
    {
LABEL_66:
      if (MEMORY[0x110] == -1 || MEMORY[0x120] == -1)
      {
        MEMORY[0x110] = (_DWORD)v22;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x118, (uint64_t *)&v23);
        MEMORY[0x120] = v24;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)0x128, (uint64_t *)v25);
      }
    }
    v19 = v25[0];
    v25[0] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v12);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    this = (unsigned int *)v23;
    v23 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, v12);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::VisiblePosition::VisiblePosition(uint64_t a1, WebCore::VisiblePosition *a2, char a3)
{
  const WebCore::VisiblePosition *v5;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  int v10;
  char v11;
  char v12;

  WebCore::VisiblePosition::canonicalPosition(a2, a1);
  *(_BYTE *)(a1 + 16) = 1;
  if ((a3 & 1) == 0)
  {
    v7 = *(WebCore::Node **)a1;
    if (*(_QWORD *)a1)
    {
      *((_DWORD *)v7 + 6) += 2;
      v9 = v7;
      v10 = *(_DWORD *)(a1 + 8);
      v11 = *(_BYTE *)(a1 + 12);
      v12 = 0;
      if (!WebCore::inSameLine((WebCore *)a1, (const WebCore::VisiblePosition *)&v9, v5))
        *(_BYTE *)(a1 + 16) = 0;
      v8 = v9;
      v9 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
    }
  }
  return a1;
}

{
  const WebCore::VisiblePosition *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;

  WebCore::VisiblePosition::canonicalPosition(a2, a1);
  *(_BYTE *)(a1 + 16) = 1;
  if ((a3 & 1) == 0)
  {
    v7 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_DWORD *)(v7 + 24) += 2;
      v8 = v7;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 12);
      v11 = 0;
      if (!WebCore::inSameLine((WebCore *)a1, (const WebCore::VisiblePosition *)&v8, v5))
        *(_BYTE *)(a1 + 16) = 0;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v8);
    }
  }
  return a1;
}

unsigned int *WebCore::VisibleSelection::visibleStart(WebCore::VisibleSelection *this, unsigned __int8 *a2)
{
  int v3;
  unsigned int *result;
  const WebCore::VisiblePosition *v5;
  WebCore::Node *v6;
  void *v7;
  WebCore::Node *v8;
  int v9;
  char v10;
  char v11;

  if (a2[97] == 2)
  {
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 64), (uint64_t)this);
    *((_BYTE *)this + 16) = 1;
  }
  else
  {
    v3 = a2[96];
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 64), (uint64_t)this);
    *((_BYTE *)this + 16) = 1;
    if (!v3)
    {
      v6 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
      {
        *((_DWORD *)v6 + 6) += 2;
        v8 = v6;
        v9 = *((_DWORD *)this + 2);
        v10 = *((_BYTE *)this + 12);
        v11 = 0;
        if (!WebCore::inSameLine(this, (const WebCore::VisiblePosition *)&v8, v5))
          *((_BYTE *)this + 16) = 0;
        result = (unsigned int *)v8;
        v8 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
          }
          else
          {
            result[6] -= 2;
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::VisibleSelection::visibleEnd(WebCore::VisibleSelection *this, unsigned __int8 *a2)
{
  int v3;
  unsigned int *result;
  const WebCore::VisiblePosition *v5;
  _BYTE *v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  int v10;
  char v11;
  char v12;

  if (a2[97] == 2)
  {
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 80), (uint64_t)this);
    *((_BYTE *)this + 16) = 1;
    v6 = (char *)this + 16;
  }
  else
  {
    v3 = a2[96];
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 80), (uint64_t)this);
    *((_BYTE *)this + 16) = 1;
    v6 = (char *)this + 16;
    if (v3)
      return result;
  }
  v7 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
  {
    *((_DWORD *)v7 + 6) += 2;
    v9 = v7;
    v10 = *((_DWORD *)this + 2);
    v11 = *((_BYTE *)this + 12);
    v12 = 0;
    if (!WebCore::inSameLine(this, (const WebCore::VisiblePosition *)&v9, v5))
      *v6 = 0;
    result = (unsigned int *)v9;
    v9 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::TypingCommand::willApplyCommand(WebCore::TypingCommand *this, void *a2)
{
  unsigned int v2;

  if (!*((_BYTE *)this + 307))
    return 1;
  v2 = *((unsigned __int8 *)this + 240) - 42;
  if (v2 < 9 && ((0x1DDu >> v2) & 1) != 0)
    return 1;
  else
    return WebCore::CompositeEditCommand::willApplyCommand(this, a2);
}

void WebCore::TypingCommand::doApply(WebCore::TypingCommand *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5[4];
  char v6;

  if (*((_BYTE *)this + 225))
  {
    v2 = *((_QWORD *)this + 24);
    if (!v2 || (*(_BYTE *)(v2 + 22) & 8) != 0)
    {
      v3 = *((_QWORD *)this + 26);
      if (!v3 || (*(_BYTE *)(v3 + 22) & 8) != 0)
      {
        switch(*((_BYTE *)this + 280))
        {
          case 0:
            v4 = *((unsigned __int8 *)this + 306);
            LOBYTE(v5[0]) = 0;
            v6 = 0;
            if (WebCore::TypingCommand::willAddTypingToOpenCommand((uint64_t)this, 0, 0, MEMORY[0x1E0CBF738], v5))
            {
              WebCore::CompositeEditCommand::deleteSelection(this, v4 != 0, 1, 0, 1, 1);
              WebCore::TypingCommand::typingAddedToOpenCommand(this, 0);
            }
            break;
          case 1:
            if (!*((_DWORD *)this + 67))
              *((_BYTE *)this + 313) = 1;
            WebCore::TypingCommand::deleteKeyPressed((uint64_t)this, *((unsigned __int8 *)this + 308), *((unsigned __int8 *)this + 310));
            break;
          case 2:
            WebCore::TypingCommand::forwardDeleteKeyPressed((uint64_t)this, *((unsigned __int8 *)this + 308), *((unsigned __int8 *)this + 310));
            break;
          case 3:
            WebCore::TypingCommand::insertTextAndNotifyAccessibility(this, (WebCore::TypingCommand *)((char *)this + 288), *((_BYTE *)this + 305));
            break;
          case 4:
            WebCore::TypingCommand::insertLineBreakAndNotifyAccessibility(this);
            break;
          case 5:
            WebCore::TypingCommand::insertParagraphSeparatorAndNotifyAccessibility(this);
            break;
          case 6:
            WebCore::TypingCommand::insertParagraphSeparatorInQuotedContentAndNotifyAccessibility(this);
            break;
          default:
            return;
        }
      }
    }
  }
}

uint64_t WebCore::TypingCommand::inputEventTypeName@<X0>(WebCore::TypingCommand *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t)WebCore::inputTypeNameForEditingAction(*((unsigned __int8 *)this + 281));
  if (v4 >= 2)
  {
    result = WTF::AtomStringImpl::add();
    v5 = v6;
  }
  else
  {
    v5 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *a2 = v5;
  return result;
}

uint64_t WebCore::TypingCommand::isInputMethodComposing(WebCore::TypingCommand *this)
{
  return (*((unsigned __int8 *)this + 281) < 0x37uLL) & (0x48880000000000uLL >> *((_BYTE *)this + 281));
}

BOOL WebCore::TypingCommand::isBeforeInputEventCancelable(WebCore::TypingCommand *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 281);
  return v1 != 54 && v1 != 47;
}

WebCore::Node *WebCore::TypingCommand::inputEventData@<X0>(WebCore::Node *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Node *v3;
  int v5;
  _DWORD *v6;

  v3 = this;
  v5 = *((unsigned __int8 *)this + 281);
  if ((v5 - 54) >= 2)
  {
    if (v5 == 17)
    {
      this = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2);
      if (!this)
        goto LABEL_4;
    }
    else if (v5 != 51)
    {
LABEL_4:
      v6 = 0;
      goto LABEL_8;
    }
  }
  v6 = (_DWORD *)*((_QWORD *)v3 + 37);
  if (v6)
    *v6 += 2;
LABEL_8:
  *a3 = v6;
  return this;
}

WTF::StringImpl *WebCore::TypingCommand::inputEventDataTransfer@<X0>(WTF::StringImpl *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;

  if (*((_BYTE *)this + 281) == 17
    && (v4 = this,
        (this = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 120), a2)) == 0))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    v5 = *((_QWORD *)v4 + 37);
    if (v5)
      v6 = *(_DWORD *)(v5 + 4);
    else
      v6 = 0;
    WebCore::MarkupAccumulator::appendCharactersReplacingEntities((WTF::StringBuilder *)&v13, (uint64_t *)v4 + 37, 0, v6, 0x17u);
    v7 = v13;
    if (v13
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v13),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v13),
          (v7 = v13) != 0))
    {
      *(_DWORD *)v7 += 2;
    }
    v11 = v7;
    WebCore::DataTransfer::createForInputEvent((WTF::StringImpl *)((char *)v4 + 296), (const WTF::String *)&v11, &v12);
    v9 = v11;
    *a3 = v12;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::TypingCommand::didApplyCommand(uint64_t this)
{
  *(_BYTE *)(this + 307) = 0;
  return this;
}

WebCore::Node *WebCore::VisiblePosition::previous@<X0>(WebCore::Node **this@<X0>, int a2@<W1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *result;
  WebCore::Node *v11;
  int v12;
  char v13;
  char v14;
  WebCore::Node *v15[2];

  if (a3)
    *a3 = 0;
  WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)v15);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)v15))
  {
    if (a3)
      *a3 = 1;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    goto LABEL_12;
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v15, (uint64_t)&v11);
  v14 = 1;
  if (!a2)
  {
    v9 = v11;
    v11 = 0;
    *(_QWORD *)a4 = v9;
    *(_DWORD *)(a4 + 8) = v12;
    *(_BYTE *)(a4 + 12) = v13;
LABEL_12:
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_13;
  }
  WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)this, (const WebCore::VisiblePosition *)&v11, a3, a4);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
LABEL_13:
  result = v15[0];
  v15[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::VisiblePosition::characterAfter(WebCore::VisiblePosition *this)
{
  WebCore::Node *v1;
  unsigned int v2;
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v14;
  WebCore::Node *v16;
  unsigned int v17;
  char v18;

  WebCore::Position::downstream((uint64_t)this, (WebCore::Node *)1, (uint64_t)&v16);
  v1 = v16;
  if (!v16)
    return 0;
  v2 = v18 & 7;
  if (v2 <= 4 && ((v3 = v16, ((1 << v2) & 0x19) != 0) || (v3 = (WebCore::Node *)*((_QWORD *)v16 + 4)) != 0))
  {
    v4 = 0;
    if ((*((_WORD *)v3 + 14) & 2) != 0 && v2 - 1 >= 4)
    {
      v5 = v17;
      v6 = *((_DWORD *)v16 + 6);
      *((_DWORD *)v16 + 6) = v6 + 2;
      v7 = *((_QWORD *)v1 + 10);
      if (v7 && (v8 = *(_DWORD *)(v7 + 4), v5 < v8))
      {
        v9 = v5 + 1;
        v10 = *(_DWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 8);
        if ((v10 & 4) != 0)
          v4 = *(unsigned __int8 *)(v11 + v5);
        else
          v4 = *(unsigned __int16 *)(v11 + 2 * v5);
        if ((v4 & 0xFC00) == 0xD800 && (_DWORD)v9 != v8 && v8 > v9)
        {
          v14 = (v10 & 4) != 0 ? *(unsigned __int8 *)(v11 + v9) : *(unsigned __int16 *)(v11 + 2 * v9);
          if ((v14 & 0xFC00) == 0xDC00)
            v4 = (v14 + ((_DWORD)v4 << 10) - 56613888);
        }
      }
      else
      {
        v4 = 0;
      }
      if (v6)
      {
        *((_DWORD *)v1 + 6) = v6;
      }
      else if ((*((_WORD *)v1 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v1);
        v1 = v16;
        v16 = 0;
        if (!v1)
          return v4;
        goto LABEL_26;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  v16 = 0;
LABEL_26:
  if (*((_DWORD *)v1 + 6) == 2)
  {
    if ((*((_WORD *)v1 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v1);
  }
  else
  {
    *((_DWORD *)v1 + 6) -= 2;
  }
  return v4;
}

BOOL WebCore::isEndOfParagraph(WebCore::Node *a1, int a2)
{
  uint64_t (*v2)();
  _BOOL8 v4;
  WebCore::Node *v5;
  WebCore::Node *v7[3];

  if (*(_QWORD *)a1)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::endOfParagraph(a1, a2, v7);
  v4 = WebCore::operator==((uint64_t *)a1, (uint64_t *)v7);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v4;
}

WebCore::Node *WebCore::startOfWord@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::Node *v5;
  int v6;
  _DWORD *v7;
  uint64_t (*v8)();
  _BOOL4 v9;
  WebCore::Node *result;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  int v15;
  char v16;
  char v17;
  WebCore::Node *v18;
  int v19;
  char v20;
  char v21;

  v5 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
    *((_DWORD *)v5 + 6) += 2;
  v7 = (_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 8);
  v14 = v5;
  v15 = v6;
  v16 = *(_BYTE *)(a1 + 12);
  v17 = *(_BYTE *)(a1 + 16);
  if ((a2 & 1) != 0)
    goto LABEL_18;
  v8 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v5)
    v8 = 0;
  if (v8)
  {
    WebCore::endOfParagraph((WebCore::Node *)a1, 1, &v18);
    v9 = WebCore::operator==((uint64_t *)a1, (uint64_t *)&v18);
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (v9)
    {
      v11 = *(WebCore::Node **)a1;
      if (*(_QWORD *)a1)
        *((_DWORD *)v11 + 6) += 2;
      *(_QWORD *)a3 = v11;
      *(_DWORD *)(a3 + 8) = *v7;
      *(_BYTE *)(a3 + 12) = *(_BYTE *)(a1 + 12);
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a1 + 16);
      goto LABEL_19;
    }
  }
  result = WebCore::VisiblePosition::next((unsigned __int8 *)a1, 0, 0, (uint64_t)&v18);
  v12 = v18;
  v14 = v18;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  v15 = v19;
  v16 = v20;
  v17 = v21;
  if (v12)
  {
LABEL_18:
    result = WebCore::previousBoundary(a3, (uint64_t)&v14, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startWordBoundary, 0);
    v5 = v14;
LABEL_19:
    v14 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(v5);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    return result;
  }
  v13 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
    *((_DWORD *)v13 + 6) += 2;
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = *v7;
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a3 + 16) = *(_BYTE *)(a1 + 16);
  return result;
}

uint64_t WebCore::TypingCommand::willAddTypingToOpenCommand(uint64_t a1, WTF::StringImpl *a2, int a3, _DWORD **a4, uint64_t *a5)
{
  int v7;
  _DWORD *v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;
  BOOL v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WebCore::Node *v37;
  WebCore::Editor *v38;
  WebCore::Editor *v39;
  uint64_t v40;
  WebCore::Editor *v41;
  void *v42;
  WebCore::Editor *v43;
  uint64_t v44;
  void *v45;
  WTF *v46;
  uint64_t v47;

  v7 = (int)a2;
  v9 = *a4;
  if (*a4)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(unsigned __int8 *)(a1 + 309);
  if (v11 == 2)
  {
    v12 = 51;
    switch(v7)
    {
      case 0:
        v12 = 43;
        break;
      case 1:
LABEL_15:
        if (a3 == 7)
          v12 = 45;
        else
          v12 = 42;
        v13 = a3 == 1;
        v14 = 49;
        goto LABEL_26;
      case 2:
LABEL_19:
        if (a3 == 7)
          v12 = 46;
        else
          v12 = 44;
        v13 = a3 == 1;
        v14 = 50;
LABEL_26:
        if (v13)
          v12 = v14;
        break;
      case 3:
        break;
      case 4:
LABEL_23:
        v12 = 52;
        break;
      case 5:
      case 6:
LABEL_13:
        v12 = 53;
        break;
      default:
LABEL_14:
        v12 = 59;
        break;
    }
  }
  else if (v11 == 1)
  {
    v12 = 54;
    switch(v7)
    {
      case 0:
        v12 = 47;
        break;
      case 1:
        goto LABEL_15;
      case 2:
        goto LABEL_19;
      case 3:
        break;
      case 4:
        goto LABEL_23;
      case 5:
      case 6:
        goto LABEL_13;
      default:
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 48;
    switch(v7)
    {
      case 0:
        break;
      case 1:
        goto LABEL_15;
      case 2:
        goto LABEL_19;
      case 3:
        v13 = *(_BYTE *)(a1 + 312) == 0;
        v12 = 17;
        v14 = 55;
        goto LABEL_26;
      case 4:
        goto LABEL_23;
      case 5:
      case 6:
        goto LABEL_13;
      default:
        goto LABEL_14;
    }
  }
  *(_BYTE *)(a1 + 281) = v12;
  if (*(_BYTE *)(a1 + 307))
  {
    v15 = *(unsigned __int8 *)(a1 + 240);
    v16 = 1;
    if (v15 > 0x32 || ((1 << v15) & 0x7740000000000) == 0)
      return v16;
  }
  if (*((_BYTE *)a5 + 32)
    && !WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 3064) + 120), a2))
  {
    v23 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v23 + 24) += 2;
    v24 = *(_QWORD *)(v23 + 3056);
    if (!v24)
    {
      v41 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v41, (WebCore::Document *)v23);
      v43 = *(WebCore::Editor **)(v23 + 3056);
      *(_QWORD *)(v23 + 3056) = v41;
      if (v43)
      {
        WebCore::Editor::~Editor(v43, v42);
        if (*(_DWORD *)v44)
        {
          *(_QWORD *)(v44 + 496) = 0;
          *(_OWORD *)(v44 + 464) = 0u;
          *(_OWORD *)(v44 + 480) = 0u;
          *(_OWORD *)(v44 + 432) = 0u;
          *(_OWORD *)(v44 + 448) = 0u;
          *(_OWORD *)(v44 + 400) = 0u;
          *(_OWORD *)(v44 + 416) = 0u;
          *(_OWORD *)(v44 + 368) = 0u;
          *(_OWORD *)(v44 + 384) = 0u;
          *(_OWORD *)(v44 + 336) = 0u;
          *(_OWORD *)(v44 + 352) = 0u;
          *(_OWORD *)(v44 + 304) = 0u;
          *(_OWORD *)(v44 + 320) = 0u;
          *(_OWORD *)(v44 + 272) = 0u;
          *(_OWORD *)(v44 + 288) = 0u;
          *(_OWORD *)(v44 + 240) = 0u;
          *(_OWORD *)(v44 + 256) = 0u;
          *(_OWORD *)(v44 + 208) = 0u;
          *(_OWORD *)(v44 + 224) = 0u;
          *(_OWORD *)(v44 + 176) = 0u;
          *(_OWORD *)(v44 + 192) = 0u;
          *(_OWORD *)(v44 + 144) = 0u;
          *(_OWORD *)(v44 + 160) = 0u;
          *(_OWORD *)(v44 + 112) = 0u;
          *(_OWORD *)(v44 + 128) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 96) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 16) = 0u;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)v44 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v44, v45);
        }
      }
      v24 = *(_QWORD *)(v23 + 3056);
    }
    if (*((_BYTE *)a5 + 32))
    {
      v25 = *a5;
      *(_DWORD *)(*a5 + 24) += 2;
      v26 = *((_DWORD *)a5 + 2);
      v27 = a5[2];
      *(_DWORD *)(v27 + 24) += 2;
      v28 = *((_DWORD *)a5 + 6);
      v29 = bmalloc::api::isoAllocate();
      *(_DWORD *)(v29 + 8) = 1;
      *(_QWORD *)(v29 + 16) = v25;
      *(_DWORD *)(v29 + 24) = v26;
      *(_QWORD *)(v29 + 32) = v27;
      *(_DWORD *)(v29 + 40) = v28;
      *(_QWORD *)v29 = off_1E33A7EF0;
      v47 = 0x100000001;
      v46 = (WTF *)WTF::fastMalloc((WTF *)8);
      v30 = *(_DWORD *)(v29 + 8);
      *(_QWORD *)v46 = v29;
      *(_DWORD *)(v29 + 8) = v30 + 1;
      v16 = WebCore::Editor::willApplyEditing(v24, a1, (uint64_t)&v46);
      if (HIDWORD(v47))
      {
        v32 = v46;
        v33 = 8 * HIDWORD(v47);
        do
        {
          v34 = *(_DWORD **)v32;
          *(_QWORD *)v32 = 0;
          if (v34)
          {
            if (v34[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
            else
              --v34[2];
          }
          v32 = (WTF *)((char *)v32 + 8);
          v33 -= 8;
        }
        while (v33);
      }
      v35 = v46;
      if (v46)
      {
        v46 = 0;
        LODWORD(v47) = 0;
        WTF::fastFree(v35, v31);
      }
      if (*(_DWORD *)(v29 + 8) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v23)
          return v16;
      }
      else
      {
        --*(_DWORD *)(v29 + 8);
        if (!v23)
          return v16;
      }
      if (*(_DWORD *)(v23 + 24) != 2)
      {
        *(_DWORD *)(v23 + 24) -= 2;
        return v16;
      }
      if ((*(_WORD *)(v23 + 30) & 0x400) != 0)
        return v16;
      v37 = (WebCore::Node *)v23;
      goto LABEL_73;
    }
    __break(1u);
  }
  else
  {
    a5 = *(uint64_t **)(a1 + 16);
    *((_DWORD *)a5 + 6) += 2;
    v17 = a5[382];
    if (v17)
      goto LABEL_34;
  }
  v38 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
  WebCore::Editor::Editor(v38, (WebCore::Document *)a5);
  v39 = (WebCore::Editor *)a5[382];
  a5[382] = (uint64_t)v38;
  if (v39)
  {
    WebCore::Editor::~Editor(v39, a2);
    if (*(_DWORD *)v40)
    {
      *(_QWORD *)(v40 + 496) = 0;
      *(_OWORD *)(v40 + 464) = 0u;
      *(_OWORD *)(v40 + 480) = 0u;
      *(_OWORD *)(v40 + 432) = 0u;
      *(_OWORD *)(v40 + 448) = 0u;
      *(_OWORD *)(v40 + 400) = 0u;
      *(_OWORD *)(v40 + 416) = 0u;
      *(_OWORD *)(v40 + 368) = 0u;
      *(_OWORD *)(v40 + 384) = 0u;
      *(_OWORD *)(v40 + 336) = 0u;
      *(_OWORD *)(v40 + 352) = 0u;
      *(_OWORD *)(v40 + 304) = 0u;
      *(_OWORD *)(v40 + 320) = 0u;
      *(_OWORD *)(v40 + 272) = 0u;
      *(_OWORD *)(v40 + 288) = 0u;
      *(_OWORD *)(v40 + 240) = 0u;
      *(_OWORD *)(v40 + 256) = 0u;
      *(_OWORD *)(v40 + 208) = 0u;
      *(_OWORD *)(v40 + 224) = 0u;
      *(_OWORD *)(v40 + 176) = 0u;
      *(_OWORD *)(v40 + 192) = 0u;
      *(_OWORD *)(v40 + 144) = 0u;
      *(_OWORD *)(v40 + 160) = 0u;
      *(_OWORD *)(v40 + 112) = 0u;
      *(_OWORD *)(v40 + 128) = 0u;
      *(_OWORD *)(v40 + 80) = 0u;
      *(_OWORD *)(v40 + 96) = 0u;
      *(_OWORD *)(v40 + 48) = 0u;
      *(_OWORD *)(v40 + 64) = 0u;
      *(_OWORD *)(v40 + 16) = 0u;
      *(_OWORD *)(v40 + 32) = 0u;
      *(_OWORD *)v40 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v40, a2);
    }
  }
  v17 = a5[382];
LABEL_34:
  if (WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 3064) + 120), a2))
  {
    v46 = 0;
    v47 = 0;
  }
  else
  {
    (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)a1 + 168))(&v46, a1);
  }
  v16 = WebCore::Editor::willApplyEditing(v17, a1, (uint64_t)&v46);
  if (HIDWORD(v47))
  {
    v19 = v46;
    v20 = 8 * HIDWORD(v47);
    do
    {
      v21 = *(_DWORD **)v19;
      *(_QWORD *)v19 = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    WTF::fastFree(v22, v18);
  }
  if (a5)
  {
    if (*((_DWORD *)a5 + 6) != 2)
    {
      *((_DWORD *)a5 + 6) -= 2;
      return v16;
    }
    if ((*((_WORD *)a5 + 15) & 0x400) != 0)
      return v16;
    v37 = (WebCore::Node *)a5;
LABEL_73:
    WebCore::Node::removedLastRef(v37);
  }
  return v16;
}

void WebCore::TypingCommand::typingAddedToOpenCommand(WebCore::CompositeEditCommand *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  WebCore::Editor *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const WebCore::VisiblePosition *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  uint64_t (*v19)();
  int v20;
  char v21;
  _BOOL4 v23;
  Node *v24;
  char v25;
  const WebCore::VisibleSelection *v26;
  WebCore::Editor *v27;
  WebCore::Node *v28;
  Node *v29;
  WebCore::Node *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  Node *v35;
  WebCore::Editor *v36;
  void *v37;
  WebCore::Editor *v38;
  uint64_t v39;
  void *v40;
  int v41;
  WebCore::Editor *v42;
  void *v43;
  WebCore::Editor *v44;
  uint64_t v45;
  void *v46;
  Node *v47;
  Node *var0;
  WebCore::Editor *v49;
  void *v50;
  WebCore::Editor *v51;
  uint64_t v52;
  void *v53;
  int v54;
  WebCore::Node *v55[3];
  WebCore::Node *v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::Node *v59;
  unsigned int v60;
  char v61;
  char v62;
  VisiblePosition v63;

  v3 = *((_QWORD *)a1 + 2);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_81;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
  {
LABEL_81:
    v8 = 1;
    goto LABEL_6;
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = 0;
LABEL_6:
  v9 = 0x10100010101uLL >> (8 * a2);
  if (a2 >= 7)
    LOBYTE(v9) = 0;
  *((_BYTE *)a1 + 311) = v9;
  v10 = *(WebCore::Editor **)(v3 + 3056);
  if (!v10)
  {
    v36 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v36, (WebCore::Document *)v3);
    v38 = *(WebCore::Editor **)(v3 + 3056);
    *(_QWORD *)(v3 + 3056) = v36;
    if (v38)
    {
      WebCore::Editor::~Editor(v38, v37);
      if (*(_DWORD *)v39)
      {
        *(_QWORD *)(v39 + 496) = 0;
        *(_OWORD *)(v39 + 464) = 0u;
        *(_OWORD *)(v39 + 480) = 0u;
        *(_OWORD *)(v39 + 432) = 0u;
        *(_OWORD *)(v39 + 448) = 0u;
        *(_OWORD *)(v39 + 400) = 0u;
        *(_OWORD *)(v39 + 416) = 0u;
        *(_OWORD *)(v39 + 368) = 0u;
        *(_OWORD *)(v39 + 384) = 0u;
        *(_OWORD *)(v39 + 336) = 0u;
        *(_OWORD *)(v39 + 352) = 0u;
        *(_OWORD *)(v39 + 304) = 0u;
        *(_OWORD *)(v39 + 320) = 0u;
        *(_OWORD *)(v39 + 272) = 0u;
        *(_OWORD *)(v39 + 288) = 0u;
        *(_OWORD *)(v39 + 240) = 0u;
        *(_OWORD *)(v39 + 256) = 0u;
        *(_OWORD *)(v39 + 208) = 0u;
        *(_OWORD *)(v39 + 224) = 0u;
        *(_OWORD *)(v39 + 176) = 0u;
        *(_OWORD *)(v39 + 192) = 0u;
        *(_OWORD *)(v39 + 144) = 0u;
        *(_OWORD *)(v39 + 160) = 0u;
        *(_OWORD *)(v39 + 112) = 0u;
        *(_OWORD *)(v39 + 128) = 0u;
        *(_OWORD *)(v39 + 80) = 0u;
        *(_OWORD *)(v39 + 96) = 0u;
        *(_OWORD *)(v39 + 48) = 0u;
        *(_OWORD *)(v39 + 64) = 0u;
        *(_OWORD *)(v39 + 16) = 0u;
        *(_OWORD *)(v39 + 32) = 0u;
        *(_OWORD *)v39 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v39, v40);
      }
    }
    v10 = *(WebCore::Editor **)(v3 + 3056);
  }
  WebCore::Editor::appliedEditing(v10, a1);
  if (!*((_BYTE *)a1 + 315))
  {
    v11 = *((_QWORD *)a1 + 2);
    *(_DWORD *)(v11 + 24) += 2;
    v12 = *(_QWORD *)(v11 + 3056);
    if (!v12)
    {
      v42 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v42, (WebCore::Document *)v11);
      v44 = *(WebCore::Editor **)(v11 + 3056);
      *(_QWORD *)(v11 + 3056) = v42;
      if (v44)
      {
        WebCore::Editor::~Editor(v44, v43);
        if (*(_DWORD *)v45)
        {
          *(_QWORD *)(v45 + 496) = 0;
          *(_OWORD *)(v45 + 464) = 0u;
          *(_OWORD *)(v45 + 480) = 0u;
          *(_OWORD *)(v45 + 432) = 0u;
          *(_OWORD *)(v45 + 448) = 0u;
          *(_OWORD *)(v45 + 400) = 0u;
          *(_OWORD *)(v45 + 416) = 0u;
          *(_OWORD *)(v45 + 368) = 0u;
          *(_OWORD *)(v45 + 384) = 0u;
          *(_OWORD *)(v45 + 336) = 0u;
          *(_OWORD *)(v45 + 352) = 0u;
          *(_OWORD *)(v45 + 304) = 0u;
          *(_OWORD *)(v45 + 320) = 0u;
          *(_OWORD *)(v45 + 272) = 0u;
          *(_OWORD *)(v45 + 288) = 0u;
          *(_OWORD *)(v45 + 240) = 0u;
          *(_OWORD *)(v45 + 256) = 0u;
          *(_OWORD *)(v45 + 208) = 0u;
          *(_OWORD *)(v45 + 224) = 0u;
          *(_OWORD *)(v45 + 176) = 0u;
          *(_OWORD *)(v45 + 192) = 0u;
          *(_OWORD *)(v45 + 144) = 0u;
          *(_OWORD *)(v45 + 160) = 0u;
          *(_OWORD *)(v45 + 112) = 0u;
          *(_OWORD *)(v45 + 128) = 0u;
          *(_OWORD *)(v45 + 80) = 0u;
          *(_OWORD *)(v45 + 96) = 0u;
          *(_OWORD *)(v45 + 48) = 0u;
          *(_OWORD *)(v45 + 64) = 0u;
          *(_OWORD *)(v45 + 16) = 0u;
          *(_OWORD *)(v45 + 32) = 0u;
          *(_OWORD *)v45 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v45, v46);
        }
      }
      v12 = *(_QWORD *)(v11 + 3056);
    }
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14))
        {
          v15 = *((unsigned __int8 *)a1 + 224);
          WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)a1 + 192), (uint64_t)&v59);
          v62 = 1;
          if (!v15)
          {
            v47 = (Node *)v59;
            if (v59)
            {
              *((_DWORD *)v59 + 6) += 2;
              v63.var0.var0.var0 = v47;
              v63.var0.var1 = v60;
              *((_BYTE *)&v63.var0 + 12) = v61;
              v63.var1 = 0;
              if (!WebCore::inSameLine((WebCore *)&v59, (const WebCore::VisiblePosition *)&v63, v16))
                v62 = 0;
              var0 = v63.var0.var0.var0;
              v63.var0.var0.var0 = 0;
              if (var0)
              {
                if (*((_DWORD *)var0 + 6) == 2)
                {
                  if ((*((_WORD *)var0 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)var0);
                }
                else
                {
                  *((_DWORD *)var0 + 6) -= 2;
                }
              }
            }
          }
          WebCore::previousVisuallyDistinctCandidate(&v59, (uint64_t)v55);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)v55))
          {
            v17 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v55, (uint64_t)&v63);
            v17 = (WebCore::Node *)v63.var0.var0.var0;
            v56 = (WebCore::Node *)v63.var0.var0.var0;
            LODWORD(v57) = v63.var0.var1;
            BYTE4(v57) = *((_BYTE *)&v63.var0 + 12);
          }
          LOBYTE(v58) = 1;
          v18 = v55[0];
          v55[0] = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v18);
                v17 = v56;
              }
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
          if (v17)
            v19 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v19 = 0;
          if (v19)
          {
            v20 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v56);
            if ((unsigned __int16)v20 > 0xFFu)
            {
              v54 = v20;
              v41 = MEMORY[0x19AEA858C]((unsigned __int16)v20);
              v20 = v54;
              v21 = v41 == 9;
            }
            else if ((unsigned __int16)v20 == 11)
            {
              v21 = 1;
            }
            else
            {
              v21 = ((unsigned __int16)v20 < 0x21u) & (0x100003600uLL >> v20);
            }
            if (v20 == 160 || (v21 & 1) != 0)
              goto LABEL_39;
            if (!(v56
                 ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
                 : 0))
              goto LABEL_40;
            WebCore::endOfParagraph((WebCore::Node *)&v56, 1, &v63);
            v23 = WebCore::operator==((uint64_t *)&v56, (uint64_t *)&v63);
            v24 = v63.var0.var0.var0;
            v63.var0.var0.var0 = 0;
            if (v24)
            {
              if (*((_DWORD *)v24 + 6) == 2)
              {
                if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v24);
              }
              else
              {
                *((_DWORD *)v24 + 6) -= 2;
              }
            }
            if (v23)
LABEL_39:
              v25 = 0;
            else
LABEL_40:
              v25 = 1;
            WebCore::startOfWord((uint64_t)&v56, v25, (uint64_t)&v63);
            WebCore::startOfWord((uint64_t)&v59, v25, (uint64_t)v55);
            if (!WebCore::operator==((uint64_t *)&v63, (uint64_t *)v55))
            {
              v26 = (WebCore::CompositeEditCommand *)((char *)a1 + 128);
              v27 = *(WebCore::Editor **)(v11 + 3056);
              if (!v27)
              {
                v49 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v49, (WebCore::Document *)v11);
                v51 = *(WebCore::Editor **)(v11 + 3056);
                *(_QWORD *)(v11 + 3056) = v49;
                if (v51)
                {
                  WebCore::Editor::~Editor(v51, v50);
                  if (*(_DWORD *)v52)
                  {
                    *(_QWORD *)(v52 + 496) = 0;
                    *(_OWORD *)(v52 + 464) = 0u;
                    *(_OWORD *)(v52 + 480) = 0u;
                    *(_OWORD *)(v52 + 432) = 0u;
                    *(_OWORD *)(v52 + 448) = 0u;
                    *(_OWORD *)(v52 + 400) = 0u;
                    *(_OWORD *)(v52 + 416) = 0u;
                    *(_OWORD *)(v52 + 368) = 0u;
                    *(_OWORD *)(v52 + 384) = 0u;
                    *(_OWORD *)(v52 + 336) = 0u;
                    *(_OWORD *)(v52 + 352) = 0u;
                    *(_OWORD *)(v52 + 304) = 0u;
                    *(_OWORD *)(v52 + 320) = 0u;
                    *(_OWORD *)(v52 + 272) = 0u;
                    *(_OWORD *)(v52 + 288) = 0u;
                    *(_OWORD *)(v52 + 240) = 0u;
                    *(_OWORD *)(v52 + 256) = 0u;
                    *(_OWORD *)(v52 + 208) = 0u;
                    *(_OWORD *)(v52 + 224) = 0u;
                    *(_OWORD *)(v52 + 176) = 0u;
                    *(_OWORD *)(v52 + 192) = 0u;
                    *(_OWORD *)(v52 + 144) = 0u;
                    *(_OWORD *)(v52 + 160) = 0u;
                    *(_OWORD *)(v52 + 112) = 0u;
                    *(_OWORD *)(v52 + 128) = 0u;
                    *(_OWORD *)(v52 + 80) = 0u;
                    *(_OWORD *)(v52 + 96) = 0u;
                    *(_OWORD *)(v52 + 48) = 0u;
                    *(_OWORD *)(v52 + 64) = 0u;
                    *(_OWORD *)(v52 + 16) = 0u;
                    *(_OWORD *)(v52 + 32) = 0u;
                    *(_OWORD *)v52 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v52, v53);
                  }
                }
                v27 = *(WebCore::Editor **)(v11 + 3056);
              }
              WebCore::Editor::markMisspellingsAfterTypingToWord(v27, &v63, v26);
            }
            v28 = v55[0];
            v55[0] = 0;
            if (v28)
            {
              if (*((_DWORD *)v28 + 6) == 2)
              {
                if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v28);
              }
              else
              {
                *((_DWORD *)v28 + 6) -= 2;
              }
            }
            v29 = v63.var0.var0.var0;
            v63.var0.var0.var0 = 0;
            if (v29)
            {
              if (*((_DWORD *)v29 + 6) == 2)
              {
                if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v29);
              }
              else
              {
                *((_DWORD *)v29 + 6) -= 2;
              }
            }
            v17 = v56;
          }
          v56 = 0;
          if (v17)
          {
            if (*((_DWORD *)v17 + 6) == 2)
            {
              if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v17);
            }
            else
            {
              *((_DWORD *)v17 + 6) -= 2;
            }
          }
          v30 = v59;
          v59 = 0;
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  if ((v8 & 1) == 0)
  {
    v31 = (unsigned int *)(v5 + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v34 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v34 = off_1E31FE290;
      *(_QWORD *)(v34 + 8) = v31;
      v63.var0.var0.var0 = (Node *)v34;
      WTF::ensureOnMainThread();
      v35 = v63.var0.var0.var0;
      v63.var0.var0.var0 = 0;
      if (v35)
        (*(void (**)(Node *))(*(_QWORD *)v35 + 8))(v35);
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void WebCore::forEachLineInString<WebCore::TypingCommandLineOperation>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  WebCore::TypingCommand *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int16x8_t *v16;
  unint64_t v17;
  unint64_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t *v21;
  __int8 *v22;
  int16x8_t v23;
  WebCore::TypingCommand *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v3 = *a1;
  if (*a1)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if (v7 <= v5)
          goto LABEL_57;
        v8 = v7 - v5;
        if (v8 >= 0x10)
          v9 = 16;
        else
          v9 = v7 - v5;
        if (v9)
        {
          v10 = v9;
          v11 = (_BYTE *)(v6 + v5);
          while (*v11 != 10)
          {
            ++v11;
            if (!--v10)
              goto LABEL_12;
          }
        }
        else
        {
LABEL_12:
          if (v8 < 0x11)
            goto LABEL_57;
          v11 = memchr((void *)(v6 + v5 + v9), 10, v8 - v9);
          if (!v11)
            goto LABEL_57;
        }
        v12 = (uint64_t)&v11[-v6];
      }
      else
      {
        if (v7 <= v5)
          goto LABEL_57;
        v16 = (int16x8_t *)(v6 + 2 * v5);
        v17 = v6 + 2 * v7;
        v18 = v17 - (_QWORD)v16;
        if ((uint64_t)(v17 - (_QWORD)v16) <= -2)
        {
          __break(1u);
          return;
        }
        if (v18 <= 0x3E)
        {
          while (v16->i16[0] != 10)
          {
            v16 = (int16x8_t *)((char *)v16 + 2);
            v18 -= 2;
            if (!v18)
              goto LABEL_57;
          }
        }
        else
        {
          if ((unint64_t)&v16->u64[1] + 6 >= v17)
          {
            v21 = (int16x8_t *)(v6 + 2 * v5);
LABEL_39:
            if ((unint64_t)v21 >= v17
              || (v16 = (int16x8_t *)(v17 - 16),
                  v23.i64[0] = 0xA000A000A000ALL,
                  v23.i64[1] = 0xA000A000A000ALL,
                  v20 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v17 - 16), v23),
                  v23.i16[0] = vmaxvq_u16((uint16x8_t)v20),
                  !v23.i32[0]))
            {
LABEL_57:
              LODWORD(v3) = v7;
              if (!v5)
                goto LABEL_50;
LABEL_46:
              if ((_DWORD)v3 == v5)
                return;
              v24 = *(WebCore::TypingCommand **)(*(_QWORD *)a2 + 8);
              v25 = (WTF::StringImpl *)**((_QWORD **)a2 + 2);
              if (v25)
              {
LABEL_48:
                WTF::StringImpl::substring(v25);
                goto LABEL_53;
              }
LABEL_61:
              v28 = 0;
              goto LABEL_53;
            }
          }
          else
          {
            while (1)
            {
              v19.i64[0] = 0xA000A000A000ALL;
              v19.i64[1] = 0xA000A000A000ALL;
              v20 = (int8x16_t)vceqq_s16(*v16, v19);
              v19.i16[0] = vmaxvq_u16((uint16x8_t)v20);
              if (v19.i32[0])
                break;
              v21 = v16 + 1;
              v22 = &v16[1].i8[14];
              ++v16;
              if ((unint64_t)v22 >= v17)
                goto LABEL_39;
            }
          }
          v16 = (int16x8_t *)((char *)v16
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v20)));
        }
        if (v16 == (int16x8_t *)v17)
          goto LABEL_57;
        v12 = ((uint64_t)v16->i64 - v6) >> 1;
      }
      if (v12 == -1)
        goto LABEL_57;
      if (v12 != v5)
      {
        v13 = *(WebCore::TypingCommand **)(*(_QWORD *)a2 + 8);
        v14 = (WTF::StringImpl *)**((_QWORD **)a2 + 2);
        if (v14)
        {
          if (v5 || *((_DWORD *)v14 + 1) > v12)
          {
            WTF::StringImpl::substring(v14);
          }
          else
          {
            *(_DWORD *)v14 += 2;
            v28 = v14;
          }
        }
        else
        {
          v28 = 0;
        }
        WebCore::TypingCommand::insertTextRunWithoutNewlines(v13, (const WTF::String *)&v28, 0);
        v15 = v28;
        v28 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
      WebCore::TypingCommand::insertParagraphSeparator(*(WebCore::TypingCommand **)(*(_QWORD *)a2 + 8), (const WebCore::VisibleSelection *)a2);
      v5 = v12 + 1;
      v3 = *a1;
      if (!*a1)
      {
        LODWORD(v7) = 0;
        if ((_DWORD)v12 == -1)
          goto LABEL_50;
        goto LABEL_46;
      }
    }
  }
  LODWORD(v7) = 0;
LABEL_50:
  v24 = *(WebCore::TypingCommand **)(*(_QWORD *)a2 + 8);
  v25 = (WTF::StringImpl *)**((_QWORD **)a2 + 2);
  if (!v25)
    goto LABEL_61;
  if (*((_DWORD *)v25 + 1) > v7)
    goto LABEL_48;
  *(_DWORD *)v25 += 2;
  v28 = v25;
LABEL_53:
  WebCore::TypingCommand::insertTextRunWithoutNewlines(v24, (const WTF::String *)&v28, a2[8]);
  v27 = v28;
  v28 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
}

void WebCore::TypingCommand::insertTextRunWithoutNewlines(WebCore::TypingCommand *this, const WTF::String *a2, char a3)
{
  WebCore::Node *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _DWORD *v11;
  WebCore::Node *v12;
  WebCore::Node *v13[4];
  char v14;

  LOBYTE(v13[0]) = 0;
  v14 = 0;
  if (WebCore::TypingCommand::willAddTypingToOpenCommand((uint64_t)this, (WTF::StringImpl *)3, 0, (_DWORD **)a2, (uint64_t *)v13))
  {
    v6 = (WebCore::Node *)*((_QWORD *)this + 2);
    *((_DWORD *)v6 + 6) += 2;
    v13[0] = v6;
    v7 = *((_BYTE *)this + 309) != 0;
    v8 = WTF::fastMalloc((WTF *)0x130);
    v9 = WebCore::EditCommand::EditCommand(v8, (uint64_t *)v13, 55);
    *(_OWORD *)(v9 + 248) = 0u;
    *(_OWORD *)(v9 + 264) = 0u;
    *(_QWORD *)v9 = off_1E33AD0F0;
    v11 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v11 += 2;
    *(_QWORD *)(v8 + 280) = v11;
    *(_BYTE *)(v8 + 288) = a3;
    *(_DWORD *)(v8 + 292) = v7;
    *(_QWORD *)(v8 + 296) = 0;
    v12 = v13[0];
    v13[0] = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v10);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    v13[0] = (WebCore::Node *)v8;
    WebCore::CompositeEditCommand::applyCommandToComposite((uint64_t)this, v13, (WebCore::TypingCommand *)((char *)this + 128));
    if (v13[0])
    {
      if (*((_DWORD *)v13[0] + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v13[0] + 8))();
      else
        --*((_DWORD *)v13[0] + 2);
    }
    WebCore::TypingCommand::typingAddedToOpenCommand(this, 3u);
  }
}

void WebCore::TypingCommand::insertParagraphSeparator(WebCore::TypingCommand *this, const WebCore::VisibleSelection *a2)
{
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t *v10[4];
  char v11;

  if (WebCore::canAppendNewLineFeedToSelection((WebCore::TypingCommand *)((char *)this + 128), a2))
  {
    LOBYTE(v10[0]) = 0;
    v11 = 0;
    if (WebCore::TypingCommand::willAddTypingToOpenCommand((uint64_t)this, (WTF::StringImpl *)5, 4, MEMORY[0x1E0CBF738], (uint64_t *)v10))
    {
      v3 = (WebCore::Node *)*((_QWORD *)this + 2);
      *((_DWORD *)v3 + 6) += 2;
      v9 = v3;
      v4 = WTF::fastMalloc((WTF *)0x128);
      v5 = WebCore::EditCommand::EditCommand(v4, (uint64_t *)&v9, 53);
      *(_OWORD *)(v5 + 248) = 0u;
      *(_OWORD *)(v5 + 264) = 0u;
      *(_QWORD *)v5 = off_1E33AD020;
      *(_QWORD *)(v5 + 280) = 0;
      *(_WORD *)(v5 + 288) = 0;
      v10[0] = (uint64_t *)v5;
      WebCore::CompositeEditCommand::applyCommandToComposite(this, v10);
      v7 = v10[0];
      v10[0] = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 2) == 1)
          (*(void (**)(uint64_t *))(*v7 + 8))(v7);
        else
          --*((_DWORD *)v7 + 2);
      }
      v8 = v9;
      v9 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v6);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      WebCore::TypingCommand::typingAddedToOpenCommand(this, 5u);
    }
  }
}

uint64_t WebCore::VisibleSelection::rootEditableElement(WebCore::VisibleSelection *this)
{
  return WebCore::editableRootForPosition((uint64_t)this + 64, 0);
}

uint64_t WebCore::VisibleSelection::VisibleSelection(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  return WebCore::VisibleSelection::VisibleSelection(a1, a2, a2, a3, a4);
}

WebCore::Node *WebCore::VisibleSelection::firstRange@<X0>(WebCore::Node *this@<X0>, _BYTE *a2@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10[2];
  WebCore::Node *v11[2];

  if (*((_BYTE *)this + 97)
    && ((v3 = this, v5 = *((_QWORD *)this + 8), this = (WebCore::Node *)((char *)this + 64), (v4 = v5) == 0)
     || (*(_BYTE *)(v4 + 22) & 8) != 0)
    && ((v8 = *((_QWORD *)v3 + 10), v7 = (uint64_t)v3 + 80, (v6 = v8) == 0) || (*(_BYTE *)(v6 + 22) & 8) != 0))
  {
    WebCore::Position::parentAnchoredEquivalent((uint64_t)this, (uint64_t)v11);
    WebCore::Position::parentAnchoredEquivalent(v7, (uint64_t)v10);
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)v11, (uint64_t *)v10, (uint64_t)a2);
    v9 = v10[0];
    v10[0] = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    this = v11[0];
    v11[0] = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  return this;
}

WebCore::Node *WebCore::VisiblePosition::next@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  const WebCore::VisiblePosition *v9;
  WebCore::Node *result;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13[2];
  WebCore::Node *v14;
  int v15;
  char v16;
  char v17;
  WebCore::Node *v18;
  int v19;
  char v20;
  char v21;

  if (a3)
    *a3 = 0;
  WebCore::nextVisuallyDistinctCandidate((uint64_t)a1, 1, (uint64_t)v13);
  v8 = a1[16];
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v13, (uint64_t)&v14);
  v17 = 1;
  if (!v8)
  {
    v11 = v14;
    if (v14)
    {
      *((_DWORD *)v14 + 6) += 2;
      v18 = v11;
      v19 = v15;
      v20 = v16;
      v21 = 0;
      if (!WebCore::inSameLine((WebCore *)&v14, (const WebCore::VisiblePosition *)&v18, v9))
        v17 = 0;
      v12 = v18;
      v18 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
    }
  }
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  if (a2)
  {
    WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)a1, (const WebCore::VisiblePosition *)&v14, a3, a4);
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = v15;
    *(_BYTE *)(a4 + 12) = v16;
    *(_BYTE *)(a4 + 16) = v17;
  }
  return result;
}

BOOL WebCore::isStartOfParagraph(uint64_t *a1, int a2)
{
  uint64_t (*v2)();
  void *v4;
  _BOOL8 v5;
  WebCore::Node *v6;
  WebCore::Node *v8[3];

  if (*a1)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::startOfParagraph((uint64_t)a1, a2, v8);
  v5 = WebCore::operator==(a1, (uint64_t *)v8);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return v5;
}

uint64_t WebCore::VisibleSelection::VisibleSelection(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, int a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;

  v6 = *a2;
  if (*a2)
    *(_DWORD *)(v6 + 24) += 2;
  *(_QWORD *)a1 = v6;
  v7 = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)(v8 + 24) += 2;
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *((_DWORD *)a3 + 2);
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a3 + 12);
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) &= 0xF0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) &= 0xF0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) &= 0xF0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) &= 0xF0u;
  *(_BYTE *)(a1 + 96) = a4;
  *(_BYTE *)(a1 + 97) = 0;
  if (a5)
    v10 = 2;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xFD | v10;
  WebCore::VisibleSelection::validate(a1, 0);
  return a1;
}

uint64_t WebCore::VisibleSelection::setWithoutValidation(WebCore::VisibleSelection *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned __int8 v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const WebCore::Position *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const WebCore::Position *v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = v6;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v9 = (int *)((char *)a2 + 8);
  v8 = *((_DWORD *)a2 + 2);
  *((_BYTE *)this + 12) = *((_BYTE *)a2 + 12);
  *((_DWORD *)this + 2) = v8;
  v10 = (uint64_t *)((char *)this + 16);
  v11 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v11 + 24) += 2;
  v12 = *v10;
  *v10 = v11;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v14 = (unsigned int *)((char *)a3 + 8);
  v13 = *((_DWORD *)a3 + 2);
  *((_BYTE *)this + 28) = *((_BYTE *)a3 + 12);
  *((_DWORD *)this + 6) = v13;
  v15 = WebCore::treeOrder<(WebCore::TreeType)1>((uint64_t)this, (uint64_t)this + 16);
  v17 = v15 != 129 && (char)v15 < 1;
  *((_BYTE *)this + 98) = *((_BYTE *)this + 98) & 0xFE | v17;
  v18 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v18 + 24) += 2;
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v18;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  v20 = *v9;
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 12);
  *((_DWORD *)this + 10) = v20;
  v21 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v21 + 24) += 2;
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v21;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  v23 = *v14;
  *((_BYTE *)this + 60) = *((_BYTE *)a3 + 12);
  *((_DWORD *)this + 14) = v23;
  if ((*((_BYTE *)this + 98) & 1) != 0)
    v24 = a2;
  else
    v24 = a3;
  v25 = *(_QWORD *)v24;
  if (*(_QWORD *)v24)
    *(_DWORD *)(v25 + 24) += 2;
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v25;
  if (v26)
  {
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  v27 = *((_DWORD *)v24 + 2);
  *((_BYTE *)this + 76) = *((_BYTE *)v24 + 12);
  *((_DWORD *)this + 18) = v27;
  if ((*((_BYTE *)this + 98) & 1) != 0)
    v28 = a3;
  else
    v28 = a2;
  v29 = *(_QWORD *)v28;
  if (*(_QWORD *)v28)
    *(_DWORD *)(v29 + 24) += 2;
  result = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v29;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v31 = *((_DWORD *)v28 + 2);
  *((_BYTE *)this + 92) = *((_BYTE *)v28 + 12);
  *((_DWORD *)this + 22) = v31;
  if (*(_QWORD *)a2 == *(_QWORD *)a3
    && ((*((_BYTE *)a2 + 12) & 8) == 0 && ((v32 = *((_BYTE *)a2 + 12) & 7, v32 == 4) || v32 == 2)
      ? (v33 = WebCore::Position::offsetForPositionAfterAnchor(a2))
      : (v33 = *v9),
        (*((_BYTE *)a3 + 12) & 8) == 0 && ((v34 = *((_BYTE *)a3 + 12) & 7, v34 == 4) || v34 == 2)
      ? (result = WebCore::Position::offsetForPositionAfterAnchor(a3))
      : (result = *v14),
        v33 == (_DWORD)result))
  {
    if (((*((_BYTE *)a3 + 12) ^ *((_BYTE *)a2 + 12)) & 7) != 0)
      v35 = 2;
    else
      v35 = 1;
  }
  else
  {
    v35 = 2;
  }
  *((_BYTE *)this + 97) = v35;
  return result;
}

uint64_t *WebCore::VisibleSelection::toNormalizedRange@<X0>(WebCore::VisibleSelection *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  const WebCore::Position *v6;
  uint64_t v7[2];
  uint64_t v8[2];
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;

  result = (uint64_t *)WebCore::VisibleSelection::isNoneOrOrphaned(this);
  if ((_DWORD)result
    || (v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 40) + 8),
        *(_DWORD *)(v5 + 24) += 2,
        v12 = v5,
        WebCore::Document::updateLayout(v5, 0, 0),
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v12),
        result = (uint64_t *)WebCore::VisibleSelection::isNoneOrOrphaned(this),
        (_DWORD)result))
  {
    *a2 = 0;
    a2[32] = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    if (*((_BYTE *)this + 97) == 1)
    {
      WebCore::Position::upstream((uint64_t)this + 64, (WebCore::Node *)1, (uint64_t)v7);
      WebCore::Position::parentAnchoredEquivalent((uint64_t)v7, (uint64_t)v8);
      WebCore::Position::operator=(&v12, v8);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v8);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v7);
      WebCore::Position::operator=(&v9, &v12);
    }
    else
    {
      WebCore::Position::downstream((uint64_t)this + 64, (WebCore::Node *)1, (uint64_t)v7);
      WebCore::Position::parentAnchoredEquivalent((uint64_t)v7, (uint64_t)v8);
      WebCore::Position::operator=(&v12, v8);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v8);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v7);
      WebCore::Position::upstream((uint64_t)this + 80, (WebCore::Node *)1, (uint64_t)v7);
      WebCore::Position::parentAnchoredEquivalent((uint64_t)v7, (uint64_t)v8);
      WebCore::Position::operator=(&v9, v8);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v8);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v7);
      if ((char)WebCore::documentOrder((WebCore *)&v12, (const WebCore::Position *)&v9, v6) >= 1)
        std::swap[abi:sn180100]<WebCore::Position>(&v12, (uint64_t)&v9);
    }
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(&v12, &v9, (uint64_t)a2);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v9);
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v12);
  }
  return result;
}

WebCore::Node *WebCore::endOfParagraph@<X0>(WebCore::Node *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  char v8;
  WebCore::Node *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  int v17;
  WebCore::Node *v18;
  uint64_t v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::Node *v22;
  int v23;
  unsigned int v24;
  WebCore::Node *v25;
  uint64_t v26;
  WebCore::Node *v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  WebCore::Node *v31;
  unsigned int v32;
  char v33;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    return result;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  v31 = (WebCore::Node *)v4;
  v32 = *((_DWORD *)result + 2);
  v33 = *((_BYTE *)result + 12);
  *(_DWORD *)(v4 + 24) = v6 + 4;
  v7 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v7
    || (*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0
    || (v14 = *(unsigned __int8 *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E), v14 != 35)
    && v14 != 63
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 152))(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) & 1) == 0
    && ((*(_BYTE *)(v7 + 45) & 1) != 0
     || (v19 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)) == 0
     || (*(_WORD *)(v19 + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::hrTag + 24)))
  {
    *(_DWORD *)(v4 + 24) += 2;
    v26 = v4;
    WebCore::enclosingBlock(&v26, (WebCore::Node *)1, &v27);
    v26 = 0;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    WebCore::highestEditableRoot((uint64_t)&v31, 0, (uint64_t *)&v25);
    v8 = v33;
    if ((v33 & 8) == 0 && ((v33 & 7) == 4 || (v33 & 7) == 2))
    {
      v9 = v31;
      if (v31)
      {
        v10 = *((_DWORD *)v31 + 6);
        *((_DWORD *)v31 + 6) = v10 + 2;
        v11 = *((_WORD *)v9 + 14);
        if ((v11 & 1) != 0)
        {
          v21 = *((_QWORD *)v9 + 10);
          if (v21)
            v13 = *(_DWORD *)(v21 + 4);
          else
            v13 = 0;
        }
        else if ((v11 & 4) != 0 && (v12 = *((_QWORD *)v9 + 10)) != 0)
        {
          v13 = 0;
          do
          {
            ++v13;
            v12 = *(_QWORD *)(v12 + 56);
          }
          while (v12);
        }
        else
        {
          v13 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9) ^ 1;
          v10 = *((_DWORD *)v9 + 6) - 2;
        }
        if (v10)
        {
          *((_DWORD *)v9 + 6) = v10;
        }
        else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v9);
        }
      }
      else
      {
        v13 = 0;
      }
      v8 = v33;
    }
    else
    {
      v13 = v32;
    }
    v23 = v8 & 7;
    v24 = v13;
    v15 = v27;
    WebCore::findEndOfParagraph(v4, (uint64_t)v25, (uint64_t)v27, &v24, &v23, a2, (uint64_t *)&v22);
    v16 = v22;
    if (v22)
    {
      v17 = *((_DWORD *)v22 + 6);
      *((_DWORD *)v22 + 6) = v17 + 2;
      if ((*((_WORD *)v16 + 14) & 2) != 0)
      {
        v28 = (uint64_t)v16;
        v29 = v24;
        v30 = 0;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v28, (uint64_t)a3);
        *((_BYTE *)a3 + 16) = 1;
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
        goto LABEL_32;
      }
      if (v17)
      {
        *((_DWORD *)v16 + 6) = v17;
      }
      else if ((*((_WORD *)v16 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v16);
      }
    }
    v28 = (uint64_t)v16;
    if (v23)
    {
      v29 = 0;
      v30 = v23 & 7;
    }
    else
    {
      v29 = v24;
      v30 = 0;
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v28, (uint64_t)a3);
    *((_BYTE *)a3 + 16) = 1;
    if (!v16)
    {
LABEL_34:
      v18 = v25;
      v25 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      if (!v15)
        goto LABEL_40;
      if (*((_DWORD *)v15 + 6) != 2)
      {
        *((_DWORD *)v15 + 6) -= 2;
        goto LABEL_40;
      }
      if ((*((_WORD *)v15 + 15) & 0x400) != 0)
        goto LABEL_40;
      v20 = v15;
LABEL_69:
      WebCore::Node::removedLastRef(v20);
      goto LABEL_40;
    }
LABEL_32:
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
    goto LABEL_34;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v28 = v4;
  v29 = 0;
  v30 = 2;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v28, (uint64_t)a3);
  *((_BYTE *)a3 + 16) = 1;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) != 0)
      goto LABEL_40;
    v20 = (WebCore::Node *)v4;
    goto LABEL_69;
  }
  *(_DWORD *)(v4 + 24) -= 2;
LABEL_40:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::TypingCommand::isTypingCommand(WebCore::TypingCommand *this)
{
  return 1;
}

unsigned int *WebCore::UnlinkCommand::doApply(unsigned int *this)
{
  WebCore::CompositeEditCommand *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  uint64_t *v10;

  if (*((_BYTE *)this + 225) == 2)
  {
    v1 = (WebCore::CompositeEditCommand *)this;
    v2 = *((_QWORD *)this + 24);
    if (!v2 || (*(_BYTE *)(v2 + 22) & 8) != 0)
    {
      v3 = *((_QWORD *)this + 26);
      if (!v3 || (*(_BYTE *)(v3 + 22) & 8) != 0)
      {
        v4 = *((_QWORD *)this + 2);
        v5 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v5 + 24) = 0x101C00000002;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = v4 + 96;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        ++*(_DWORD *)(v4 + 3324);
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        v6 = WebCore::HTMLNames::aTag;
        if (WebCore::HTMLNames::aTag)
          ++*(_DWORD *)WebCore::HTMLNames::aTag;
        *(_QWORD *)(v5 + 96) = v6;
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)v5 = off_1E33B3458;
        *(_QWORD *)(v5 + 112) = &unk_1E33B3958;
        *(_WORD *)(v5 + 120) = 0;
        *(_BYTE *)(v5 + 122) = 0;
        *(_DWORD *)(v5 + 124) = -1;
        *(_QWORD *)(v5 + 128) = 0;
        v9 = (WebCore::Node *)v5;
        v7 = WTF::fastMalloc((WTF *)0x168);
        v10 = (uint64_t *)WebCore::ApplyStyleCommand::ApplyStyleCommand(v7, (uint64_t *)&v9, 1, 4);
        WebCore::CompositeEditCommand::applyCommandToComposite(v1, &v10);
        if (v10)
        {
          if (*((_DWORD *)v10 + 2) == 1)
            (*(void (**)(void))(*v10 + 8))();
          else
            --*((_DWORD *)v10 + 2);
        }
        this = (unsigned int *)v9;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef(v9, v8);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::VisiblePosition::canonicalPosition@<X0>(WebCore::VisiblePosition *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  const WebCore::Node *v7;
  int v8;
  WebCore::Node *result;
  const WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  WebCore::Node *v17;
  uint64_t v18;
  __int16 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  WebCore::Node *v22;
  char v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  uint64_t (*v26)();
  WebCore::Node *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  BOOL v33;
  uint64_t v34;
  uint64_t (*v35)();
  WebCore::Node *v36;
  int *v37;
  uint64_t v38;
  WebCore::Node *v39;
  uint64_t v40[2];
  WebCore::Node *v41;
  int v42;
  char v43;
  WebCore::Node *v44;
  int v45;
  char v46;
  WebCore::Node *v47;
  int v48;
  char v49;
  WebCore::Node *v50;
  int v51;
  char v52;

  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v50 = 0;
    v51 = *((_DWORD *)this + 2);
    v52 = *((_BYTE *)this + 12);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
    goto LABEL_11;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v50 = (WebCore::Node *)v4;
  v51 = *((_DWORD *)this + 2);
  v52 = *((_BYTE *)this + 12);
  WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), 2, 0);
  v5 = v52 & 7;
  v6 = 1;
  if (v5 > 4)
  {
    v4 = 0;
  }
  else if (((1 << v5) & 0x19) != 0 || (v4 = *(_QWORD *)(v4 + 32)) != 0)
  {
    v6 = 0;
    *(_DWORD *)(v4 + 24) += 2;
  }
  WebCore::Position::upstream((uint64_t)&v50, (WebCore::Node *)1, (uint64_t)&v47);
  if (!WebCore::Position::isCandidate((WebCore::Position *)&v47, v7))
  {
    WebCore::Position::downstream((uint64_t)&v50, (WebCore::Node *)1, (uint64_t)&v44);
    v11 = v44;
    v44 = 0;
    v12 = v47;
    v47 = v11;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v12);
          v25 = v44;
          v48 = v45;
          v49 = v46;
          v44 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v25);
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
LABEL_19:
          if (WebCore::Position::isCandidate((WebCore::Position *)&v47, v10))
          {
            *(_QWORD *)a2 = v47;
            goto LABEL_7;
          }
          WebCore::nextCandidate((WebCore *)&v50, (uint64_t)&v41);
          WebCore::canonicalizeCandidate((uint64_t *)&v44, (const WebCore::Position *)&v41);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v41);
          WebCore::previousCandidate((WebCore *)&v50, (uint64_t)v40);
          WebCore::canonicalizeCandidate((uint64_t *)&v41, (const WebCore::Position *)v40);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v40);
          v13 = v44;
          if (v44)
            *((_DWORD *)v44 + 6) += 2;
          v14 = (uint64_t)v41;
          if (v41)
            *((_DWORD *)v41 + 6) += 2;
          v15 = &v45;
          if ((v6 & 1) == 0
            && (*(_WORD *)(v4 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
            && !WebCore::Node::computeEditability(v4, 0, 1))
          {
            v34 = WebCore::Document::bodyOrFrameset(*(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8));
            if (v34)
            {
              v18 = v34;
              *(_DWORD *)(v34 + 24) += 2;
              if (WebCore::Node::computeEditability(v34, 0, 1))
              {
                v35 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                v36 = v44;
                if (!v44)
                  v35 = 0;
                if (!v35)
                  v36 = v41;
                if (v36)
                  *((_DWORD *)v36 + 6) += 2;
                *(_QWORD *)a2 = v36;
                if (v35)
                  v37 = &v45;
                else
                  v37 = &v42;
                *(_DWORD *)(a2 + 8) = *v37;
                *(_BYTE *)(a2 + 12) = *((_BYTE *)v37 + 4);
                goto LABEL_48;
              }
              if (*(_DWORD *)(v18 + 24) == 2)
              {
                if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v18);
              }
              else
              {
                *(_DWORD *)(v18 + 24) -= 2;
              }
            }
          }
          v16 = WebCore::editableRootForPosition((uint64_t)&v50, 0);
          v18 = v16;
          if (v16
            && (*(_DWORD *)(v16 + 24) += 2, (*(_WORD *)(v16 + 28) & 0x10) != 0)
            && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
            || (v6 & 1) == 0 && ((v19 = *(_WORD *)(v4 + 28), (v19 & 0xF000) == 0x9000) || (v19 & 0x80) != 0))
          {
            v26 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            v27 = v44;
            if (!v44)
              v26 = 0;
            if (!v26)
              v27 = v41;
            if (v27)
              *((_DWORD *)v27 + 6) += 2;
            *(_QWORD *)a2 = v27;
            if (v26)
              v28 = &v45;
            else
              v28 = &v42;
            *(_DWORD *)(a2 + 8) = *v28;
            v23 = *((_BYTE *)v28 + 4);
            goto LABEL_46;
          }
          if (v14)
            v20 = v16 == WebCore::editableRootForPosition((uint64_t)&v41, 0);
          else
            v20 = 0;
          if (v13)
            v21 = v18 == WebCore::editableRootForPosition((uint64_t)&v44, 0);
          else
            v21 = 0;
          if (v20 && !v21)
          {
            v38 = (uint64_t)v41;
            v41 = 0;
            *(_QWORD *)a2 = v38;
            *(_DWORD *)(a2 + 8) = v42;
            v23 = v43;
            goto LABEL_46;
          }
          if (v21 && !v20)
          {
            v22 = v44;
            v44 = 0;
            *(_QWORD *)a2 = v22;
            *(_DWORD *)(a2 + 8) = v45;
            v23 = v46;
LABEL_46:
            *(_BYTE *)(a2 + 12) = v23;
            goto LABEL_47;
          }
          if (!v21 && !v20)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
            v23 = *(_BYTE *)(a2 + 12) & 0xF0;
            goto LABEL_46;
          }
          v29 = WebCore::deprecatedEnclosingBlockFlowElement(v4, v17);
          v30 = v29;
          if (v29)
          {
            *(_DWORD *)(v29 + 24) += 2;
            v31 = WebCore::Node::isDescendantOf((const WebCore::Node ***)v13, (const WebCore::Node ***)v29) ^ 1;
            if (v13 == (WebCore::Node *)v30)
              v32 = 0;
            else
              v32 = v31;
            if ((WebCore::Node::isDescendantOf((const WebCore::Node ***)v14, (const WebCore::Node ***)v30) & 1) != 0)
            {
              v33 = 0;
LABEL_117:
              if (v33 || !v32)
              {
                v39 = v44;
                v44 = 0;
              }
              else
              {
                v39 = v41;
                v41 = 0;
                v15 = &v42;
              }
              *(_DWORD *)(a2 + 8) = *v15;
              *(_BYTE *)(a2 + 12) = *((_BYTE *)v15 + 4);
              *(_QWORD *)a2 = v39;
              if (v30)
              {
                if (*(_DWORD *)(v30 + 24) == 2)
                {
                  if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v30);
                }
                else
                {
                  *(_DWORD *)(v30 + 24) -= 2;
                }
              }
LABEL_47:
              if (!v18)
              {
LABEL_50:
                if (v14)
                {
                  if (*(_DWORD *)(v14 + 24) == 2)
                  {
                    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v14);
                  }
                  else
                  {
                    *(_DWORD *)(v14 + 24) -= 2;
                  }
                }
                if (v13)
                {
                  if (*((_DWORD *)v13 + 6) == 2)
                  {
                    if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v13);
                  }
                  else
                  {
                    *((_DWORD *)v13 + 6) -= 2;
                  }
                }
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v41);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v44);
                v24 = v47;
                v47 = 0;
                if (v24)
                {
                  if (*((_DWORD *)v24 + 6) == 2)
                  {
                    if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v24);
                  }
                  else
                  {
                    *((_DWORD *)v24 + 6) -= 2;
                  }
                }
                goto LABEL_8;
              }
LABEL_48:
              if (*(_DWORD *)(v18 + 24) == 2)
              {
                if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v18);
              }
              else
              {
                *(_DWORD *)(v18 + 24) -= 2;
              }
              goto LABEL_50;
            }
          }
          else
          {
            v32 = v13 != 0;
          }
          v33 = v14 != v30;
          goto LABEL_117;
        }
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    v48 = v45;
    v49 = v46;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = v47;
LABEL_7:
  v8 = v48;
  *(_BYTE *)(a2 + 12) = v49;
  *(_DWORD *)(a2 + 8) = v8;
LABEL_8:
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
LABEL_11:
  result = v50;
  v50 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

BOOL WebCore::inSameLine(WebCore *this, const WebCore::VisiblePosition *a2, const WebCore::VisiblePosition *a3)
{
  uint64_t (*v3)();
  _BOOL8 v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *v9[3];
  WebCore::Node *v10[3];

  if (*(_QWORD *)this)
    v3 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v3 = 0;
  if (!v3)
    return 0;
  WebCore::startOfLine((uint64_t)v10, this, (WebCore::Node *)1, 0);
  WebCore::startOfLine((uint64_t)v9, a2, (WebCore::Node *)1, 0);
  v5 = WebCore::operator==((uint64_t *)v10, (uint64_t *)v9);
  v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  v7 = v10[0];
  v10[0] = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v5;
}

WebCore::Node *WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter@<X0>(WebCore::Node *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  WebCore::Node *v14;
  int v15;
  int v17;
  int v18;
  WebCore::Node *v19;
  _DWORD *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  WebCore::Node *v37;

  v6 = (uint64_t *)this;
  if (a3)
    *a3 = 0;
  if (!*(_QWORD *)a2)
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(a4 + 12) = *((_BYTE *)a2 + 12);
    *(_BYTE *)(a4 + 16) = *((_BYTE *)a2 + 16);
    return this;
  }
  v8 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v8 + 6) += 2;
  v34 = v8;
  v35 = *((_DWORD *)this + 2);
  v36 = *((_BYTE *)this + 12);
  WebCore::highestEditableRoot((uint64_t)&v34, 0, (uint64_t *)&v37);
  v9 = v34;
  v34 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v10 = v37;
  if (v37)
  {
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 4;
      v13 = *((_WORD *)v10 + 14);
      if ((v13 & 0xF000) == 0x9000)
      {
        if (**(WebCore::Node ***)(v11 + 40) == v10 && (*(_WORD *)(v11 + 28) & 0xF000) != 0x9000)
        {
          v15 = (*(unsigned __int8 *)(v11 + 22) >> 3) & 1;
          goto LABEL_33;
        }
      }
      else if ((v13 & 4) != 0
             && *((_QWORD *)v10 + 10)
             && ((*(unsigned __int8 *)(v11 + 22) ^ *((unsigned __int8 *)v10 + 22)) & 8) == 0)
      {
        v14 = (WebCore::Node *)v11;
        do
        {
          v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
          LOBYTE(v15) = v14 != 0;
        }
        while (v14 != v10 && v14 != 0);
LABEL_33:
        v17 = v12 + 2;
        if (v17)
        {
          *(_DWORD *)(v11 + 24) = v17;
        }
        else
        {
          v30 = *(_WORD *)(v11 + 30);
          if ((v30 & 0x400) != 0)
            goto LABEL_78;
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
          v17 = *(_DWORD *)(v11 + 24);
        }
        v18 = v17 - 2;
        if (v18)
        {
          *(_DWORD *)(v11 + 24) = v18;
          goto LABEL_37;
        }
        v30 = *(_WORD *)(v11 + 30);
LABEL_78:
        if ((v30 & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
LABEL_37:
        if ((v15 & 1) == 0)
          goto LABEL_56;
        goto LABEL_38;
      }
      LOBYTE(v15) = 0;
      goto LABEL_33;
    }
    if ((*((_WORD *)v37 + 14) & 0xF000) != 0x9000
      || (WebCore::Node *)*MEMORY[0x28] != v37
      || (MEMORY[0x1C] & 0xF000) == 0x9000
      || (MEMORY[0x16] & 8) == 0)
    {
      goto LABEL_56;
    }
  }
LABEL_38:
  v19 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v19 + 6) += 2;
  v34 = v19;
  v20 = (_DWORD *)((char *)a2 + 8);
  v35 = *((_DWORD *)a2 + 2);
  v36 = *((_BYTE *)a2 + 12);
  WebCore::highestEditableRoot((uint64_t)&v34, 0, (uint64_t *)&v31);
  v21 = v31;
  v22 = v37;
  v31 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  if (v21 == v22)
  {
    if (a3)
      *a3 = WebCore::operator==(v6, (uint64_t *)a2);
    v29 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)(v29 + 24) += 2;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = *v20;
    *(_BYTE *)(a4 + 12) = *((_BYTE *)a2 + 12);
    v28 = *((_BYTE *)a2 + 16);
    goto LABEL_64;
  }
  v24 = v37;
  if (v37)
  {
    v25 = *(WebCore::Node **)a2;
    if (*(_QWORD *)a2)
      *((_DWORD *)v25 + 6) += 2;
    v31 = v25;
    v32 = *v20;
    v33 = *((_BYTE *)a2 + 12);
    WebCore::firstEditablePositionAfterPositionInRoot((uint64_t)&v31, v24, (uint64_t)&v34);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v34, a4);
    *(_BYTE *)(a4 + 16) = 1;
    v26 = v34;
    v34 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 6) == 2)
      {
        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v26);
      }
      else
      {
        *((_DWORD *)v26 + 6) -= 2;
      }
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    goto LABEL_65;
  }
LABEL_56:
  if (a3)
    *a3 = 1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v28 = 1;
LABEL_64:
  *(_BYTE *)(a4 + 16) = v28;
LABEL_65:
  this = v37;
  v37 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return this;
}

WebCore::Node *WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore@<X0>(WebCore::Node *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  WebCore::Node *v14;
  int v15;
  int v17;
  int v18;
  WebCore::Node *v19;
  _DWORD *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  WebCore::Node *v37;

  v6 = (uint64_t *)this;
  if (a3)
    *a3 = 0;
  if (!*(_QWORD *)a2)
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(a4 + 12) = *((_BYTE *)a2 + 12);
    *(_BYTE *)(a4 + 16) = *((_BYTE *)a2 + 16);
    return this;
  }
  v8 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v8 + 6) += 2;
  v34 = v8;
  v35 = *((_DWORD *)this + 2);
  v36 = *((_BYTE *)this + 12);
  WebCore::highestEditableRoot((uint64_t)&v34, 0, (uint64_t *)&v37);
  v9 = v34;
  v34 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v10 = v37;
  if (v37)
  {
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 4;
      v13 = *((_WORD *)v10 + 14);
      if ((v13 & 0xF000) == 0x9000)
      {
        if (**(WebCore::Node ***)(v11 + 40) == v10 && (*(_WORD *)(v11 + 28) & 0xF000) != 0x9000)
        {
          v15 = (*(unsigned __int8 *)(v11 + 22) >> 3) & 1;
          goto LABEL_33;
        }
      }
      else if ((v13 & 4) != 0
             && *((_QWORD *)v10 + 10)
             && ((*(unsigned __int8 *)(v11 + 22) ^ *((unsigned __int8 *)v10 + 22)) & 8) == 0)
      {
        v14 = (WebCore::Node *)v11;
        do
        {
          v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
          LOBYTE(v15) = v14 != 0;
        }
        while (v14 != v10 && v14 != 0);
LABEL_33:
        v17 = v12 + 2;
        if (v17)
        {
          *(_DWORD *)(v11 + 24) = v17;
        }
        else
        {
          v30 = *(_WORD *)(v11 + 30);
          if ((v30 & 0x400) != 0)
            goto LABEL_78;
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
          v17 = *(_DWORD *)(v11 + 24);
        }
        v18 = v17 - 2;
        if (v18)
        {
          *(_DWORD *)(v11 + 24) = v18;
          goto LABEL_37;
        }
        v30 = *(_WORD *)(v11 + 30);
LABEL_78:
        if ((v30 & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
LABEL_37:
        if ((v15 & 1) == 0)
          goto LABEL_56;
        goto LABEL_38;
      }
      LOBYTE(v15) = 0;
      goto LABEL_33;
    }
    if ((*((_WORD *)v37 + 14) & 0xF000) != 0x9000
      || (WebCore::Node *)*MEMORY[0x28] != v37
      || (MEMORY[0x1C] & 0xF000) == 0x9000
      || (MEMORY[0x16] & 8) == 0)
    {
      goto LABEL_56;
    }
  }
LABEL_38:
  v19 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v19 + 6) += 2;
  v34 = v19;
  v20 = (_DWORD *)((char *)a2 + 8);
  v35 = *((_DWORD *)a2 + 2);
  v36 = *((_BYTE *)a2 + 12);
  WebCore::highestEditableRoot((uint64_t)&v34, 0, (uint64_t *)&v31);
  v21 = v31;
  v22 = v37;
  v31 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  if (v21 == v22)
  {
    if (a3)
      *a3 = WebCore::operator==(v6, (uint64_t *)a2);
    v29 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)(v29 + 24) += 2;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = *v20;
    *(_BYTE *)(a4 + 12) = *((_BYTE *)a2 + 12);
    v28 = *((_BYTE *)a2 + 16);
    goto LABEL_64;
  }
  v24 = v37;
  if (v37)
  {
    v25 = *(WebCore::Node **)a2;
    if (*(_QWORD *)a2)
      *((_DWORD *)v25 + 6) += 2;
    v31 = v25;
    v32 = *v20;
    v33 = *((_BYTE *)a2 + 12);
    WebCore::lastEditablePositionBeforePositionInRoot((uint64_t)&v31, v24, (uint64_t)&v34);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v34, a4);
    *(_BYTE *)(a4 + 16) = 1;
    v26 = v34;
    v34 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 6) == 2)
      {
        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v26);
      }
      else
      {
        *((_DWORD *)v26 + 6) -= 2;
      }
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    goto LABEL_65;
  }
LABEL_56:
  if (a3)
    *a3 = 1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v28 = 1;
LABEL_64:
  *(_BYTE *)(a4 + 16) = v28;
LABEL_65:
  this = v37;
  v37 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return this;
}

WebCore::Node *WebCore::VisiblePosition::left@<X0>(WebCore::Node **this@<X0>, BOOL *a2@<X2>, char a3@<W1>, uint64_t a4@<X8>)
{
  WebCore::Node *v5;
  unsigned int v6;
  const WebCore::Node *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  WebCore::Node *v60;
  char v61;
  char v62;
  int v63;
  WebCore::Node *v64;
  _BOOL4 v65;
  WebCore::Node *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  WebCore::Node *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  WebCore::Node *result;
  const WebCore::Position *v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  WebCore::Node *v85;
  WebCore::Node *v86;
  WebCore::VisiblePosition *v87;
  BOOL v88;
  BOOL *v89;
  int v90;
  unsigned int v93;
  uint64_t v94;
  char v95;
  unsigned int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  WebCore::Node *v101;
  unsigned int v102;
  char v103;
  _QWORD v104[2];
  unsigned int v105;
  WebCore::Node *v106;
  int v107;
  unsigned __int8 v108;
  unsigned int v109;
  _QWORD v110[2];
  unsigned int v111;
  WebCore::Node *v112;
  unsigned int v113;
  char v114;
  unsigned int v115[4];
  int v116;
  WebCore::Node *v117;
  int v118;
  unsigned __int8 v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  WebCore::Node *v123;
  int v124;
  unsigned __int8 v125;
  WebCore::Node *v126;
  unsigned int v127;
  char v128;
  char v129;
  _QWORD v130[2];

  if (a2)
    *a2 = 0;
  v5 = *this;
  if (!*this)
  {
    v101 = 0;
    v102 = 0;
    v103 = 0;
    goto LABEL_302;
  }
  *((_DWORD *)v5 + 6) += 2;
  v126 = v5;
  v127 = *((_DWORD *)this + 2);
  v128 = *((_BYTE *)this + 12);
  WebCore::Position::downstream((uint64_t)&v126, (WebCore::Node *)1, (uint64_t)&v123);
  v6 = WebCore::Position::primaryDirection((WebCore::Position *)&v126);
  v122 = 0;
  v97 = v6;
  do
  {
    WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v126, (const WebCore::Node *)*((unsigned __int8 *)this + 16), v6, (uint64_t)&v117);
    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v117))
    {
      if ((v6 & 1) != 0)
      {
        v98 = 1;
        WebCore::nextVisuallyDistinctCandidate((uint64_t)this, 1, (uint64_t)&v101);
      }
      else
      {
        WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)&v101);
        v98 = 1;
      }
      goto LABEL_268;
    }
    if (v120 == -1)
      goto LABEL_346;
    v106 = (WebCore::Node *)v115;
    v8 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(&v106, &v117);
    ++*(_DWORD *)(v8 + 16);
    do
    {
      while (1)
      {
        v99 = v8;
        if ((*(_BYTE *)(v8 + 20) & 2) != 0
          || *(_BYTE *)(v8 + 46) == 17 && ((*(_BYTE *)(v8 + 52) & 7) != 2 || (*(_BYTE *)(v8 + 53) & 1) == 0))
        {
          if (v120 == -1)
            goto LABEL_346;
          v9 = v121;
          v106 = (WebCore::Node *)v115;
          if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) & 1) != 0)
          {
            v10 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v117);
          }
          else
          {
            if (v120 == -1)
              goto LABEL_346;
            v106 = (WebCore::Node *)v115;
            v10 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v120])(&v106, &v117);
          }
          v11 = v9 == v10;
          v8 = v99;
          if (v11)
          {
            if (v120 == -1)
              goto LABEL_346;
            v106 = (WebCore::Node *)v115;
            if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) & 1) != 0)
              goto LABEL_247;
            goto LABEL_245;
          }
        }
        if ((*(_BYTE *)(v8 + 45) & 1) == 0 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
          break;
        WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)&v117);
        if (v120 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v115;
        if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v120])(&v106, &v117))
        {
          if ((v97 & 1) != 0)
          {
LABEL_247:
            WebCore::nextVisuallyDistinctCandidate((uint64_t)this, 1, (uint64_t)&v101);
            goto LABEL_248;
          }
LABEL_245:
          WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)&v101);
LABEL_248:
          v39 = 1;
          goto LABEL_266;
        }
        if (v120 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v115;
        v19 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(&v106, &v117);
        ++*(_DWORD *)(v19 + 16);
        v20 = *(_DWORD *)(v99 + 16);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4243CLL);
        }
        *(_DWORD *)(v99 + 16) = v20 - 1;
        if (v120 == -1)
          goto LABEL_346;
        v21 = v19;
        v106 = (WebCore::Node *)v115;
        if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) & 1) != 0)
        {
          v22 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v117);
        }
        else
        {
          if (v120 == -1)
            goto LABEL_346;
          v106 = (WebCore::Node *)v115;
          v22 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v120])(&v106, &v117);
        }
        v121 = v22;
        v8 = v21;
      }
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v115;
      v12 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117);
      v13 = 560;
      if ((v12 & 1) == 0)
        v13 = 544;
      v121 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + v13))(v8, v121);
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v115;
      v14 = (*(&off_1E33AE218 + v120))((int)&v106, (WebCore::InlineIterator::BoxModernPath *)&v117);
      if (v120 == -1)
        goto LABEL_346;
      v15 = v14;
      v106 = (WebCore::Node *)v115;
      v16 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v120])(&v106, &v117);
      v17 = v121;
      if (v121 > v15 && v121 < v16)
      {
        v8 = v99;
LABEL_225:
        if ((*(_BYTE *)(v8 + 45) & 1) != 0)
        {
          v60 = 0;
          v63 = 8;
          v62 = 1;
          v100 = v121;
        }
        else
        {
          v60 = *(WebCore::Node **)(*(_QWORD *)(v8 + 24) + 8);
          v100 = v121;
          if (v60)
          {
            *((_DWORD *)v60 + 6) += 4;
            v61 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v60 + 208))(v60);
            v62 = 0;
            if ((v61 & 1) != 0)
            {
              v63 = 8;
            }
            else if (v100)
            {
              v63 = 10;
            }
            else
            {
              v63 = 9;
            }
          }
          else
          {
            v63 = 8;
            v62 = 1;
          }
        }
        v64 = v126;
        v126 = v60;
        if (v64)
        {
          if (*((_DWORD *)v64 + 6) == 2)
          {
            if ((*((_WORD *)v64 + 15) & 0x400) == 0)
            {
              v95 = v62;
              v90 = v63;
              WebCore::Node::removedLastRef(v64);
              v63 = v90;
              v62 = v95;
            }
          }
          else
          {
            *((_DWORD *)v64 + 6) -= 2;
          }
        }
        v93 = v63 | v93 & 0xFFFFFFF0;
        v127 = v100;
        v128 = v93;
        if ((v62 & 1) == 0)
        {
          if (*((_DWORD *)v60 + 6) == 2)
          {
            if ((*((_WORD *)v60 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v60);
          }
          else
          {
            *((_DWORD *)v60 + 6) -= 2;
          }
        }
        if (WebCore::Position::isCandidate((WebCore::Position *)&v126, v7))
        {
          v65 = 1;
          WebCore::Position::downstream((uint64_t)&v126, (WebCore::Node *)1, (uint64_t)&v106);
          v66 = v106;
          if (v106 == v123)
          {
            if ((v108 & 8) == 0 && ((v67 = v108 & 7, v67 == 4) || v67 == 2))
              v68 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v106);
            else
              v68 = v107;
            if ((v125 & 8) == 0 && ((v69 = v125 & 7, v69 == 4) || v69 == 2))
              v70 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v123);
            else
              v70 = v124;
            v65 = v68 != v70
               || ((v125 ^ v108) & 7) != 0
               || WebCore::Position::atStartOfTree((WebCore::Position *)&v126)
               || WebCore::Position::atEndOfTree((WebCore::Position *)&v126);
            v66 = v106;
          }
          v106 = 0;
          if (v66)
          {
            if (*((_DWORD *)v66 + 6) == 2)
            {
              if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v66);
            }
            else
            {
              *((_DWORD *)v66 + 6) -= 2;
            }
          }
          if (v65)
          {
LABEL_265:
            v71 = v126;
            v126 = 0;
            v101 = v71;
            v102 = v127;
            v103 = v128;
            v39 = 1;
            goto LABEL_266;
          }
        }
        else if (WebCore::Position::atStartOfTree((WebCore::Position *)&v126)
               || WebCore::Position::atEndOfTree((WebCore::Position *)&v126))
        {
          goto LABEL_265;
        }
        v39 = 0;
        goto LABEL_266;
      }
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v115;
      if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) & 1) != 0)
      {
        if (v120 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v115;
        v18 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v120])(&v106, &v117);
      }
      else
      {
        v18 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v117);
      }
      if (v17 != v18)
      {
        WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)&v117, (uint64_t)v115);
        if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v115))
        {
          if ((v97 & 1) != 0)
            WebCore::nextVisuallyDistinctCandidate((uint64_t)this, 1, (uint64_t)&v112);
          else
            WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)&v112);
          WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v112, (const WebCore::Node *)*((unsigned __int8 *)this + 16), v97, (uint64_t)&v106);
          LOBYTE(v110[0]) = 0;
          v111 = -1;
          v33 = v109;
          if (v109 != -1)
          {
            ((void (*)(_QWORD *, _QWORD *, WebCore::Node **))off_1E33AE248[v109])(v104, v110, &v106);
            v111 = v33;
            if (v109 != -1)
              ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v109])(v104, &v106);
          }
          v8 = v99;
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v110) & 1) != 0)
            goto LABEL_185;
          if (v111 == -1)
            goto LABEL_346;
          v104[0] = v130;
          ((void (*)(WebCore::Node **__return_ptr, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v111])(&v106, v104, v110);
          if (v120 == -1)
            goto LABEL_346;
          v130[0] = &v129;
          ((void (*)(_QWORD *__return_ptr, _QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v120])(v104, v130, &v117);
          v34 = v105;
          v35 = v105 == (unint64_t)v109;
          if (v105 == 0xFFFFFFFFLL)
            v35 = 0;
          v36 = v109 == 0xFFFFFFFFLL ? v105 == 0xFFFFFFFFLL : v35;
          if (v109 == -1)
          {
            v8 = v99;
          }
          else
          {
            v8 = v99;
            if (v35)
            {
              v130[0] = &v129;
              v36 = ((uint64_t (*)(_QWORD *, WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v109])(v130, &v106, v104);
              v34 = v105;
            }
          }
          if (v34 != 0xFFFFFFFFLL)
            ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v34])(v130, v104);
          if (v109 != -1)
            ((void (*)(_QWORD *, WebCore::Node **))off_1E33AE258[v109])(v104, &v106);
          if (!v36)
          {
LABEL_185:
            v49 = v112;
            v112 = 0;
            v101 = v49;
            v102 = v113;
            v103 = v114;
          }
          else
          {
            v101 = 0;
            v102 = 0;
            v103 &= 0xF0u;
          }
          if (v111 != -1)
            ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v111])(&v106, v110);
          v50 = v112;
          v112 = 0;
          if (v50)
          {
            if (*((_DWORD *)v50 + 6) == 2)
            {
              if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v50);
            }
            else
            {
              *((_DWORD *)v50 + 6) -= 2;
            }
          }
          v39 = 1;
        }
        else
        {
          v25 = v120;
          if (v120 == -1)
          {
            if (v116 == -1)
              goto LABEL_346;
          }
          else if (v116 == -1)
          {
            goto LABEL_343;
          }
          v106 = (WebCore::Node *)&v117;
          ((void (*)(WebCore::Node **, WebCore::Node **, unsigned int *))off_1E33AE268[v116])(&v106, &v117, v115);
          if (v120 == -1)
            goto LABEL_346;
          v106 = (WebCore::Node *)v110;
          v43 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(&v106, &v117);
          ++*(_DWORD *)(v43 + 16);
          v44 = *(_DWORD *)(v99 + 16);
          if (!v44)
          {
            __break(0xC471u);
            JUMPOUT(0x195B4245CLL);
          }
          v45 = v43;
          *(_DWORD *)(v99 + 16) = v44 - 1;
          v121 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v115);
          v39 = 4;
          v8 = v45;
        }
        goto LABEL_213;
      }
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v115;
      v23 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117);
      WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)&v117, (uint64_t)v115);
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v110;
      if (v97 == (((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) & 1))
      {
        if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v115))
        {
          v8 = v99;
          if (v97)
          {
            if (v120 == -1)
              goto LABEL_346;
            v106 = (WebCore::Node *)v104;
            ((void (*)(_QWORD *__return_ptr, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v120])(v110, &v106, &v117);
            WebCore::InlineIterator::lastLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)v110, &v122, (unsigned int *)&v106);
          }
          else
          {
            if (v120 == -1)
              goto LABEL_346;
            v106 = (WebCore::Node *)v104;
            ((void (*)(_QWORD *__return_ptr, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v120])(v110, &v106, &v117);
            WebCore::InlineIterator::firstLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)v110, &v122, (unsigned int *)&v106);
          }
          if (v111 != -1)
            ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v111])(v104, v110);
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v106) & 1) == 0)
          {
            v46 = v120;
            if (v120 == -1)
            {
              if (v109 == -1)
                goto LABEL_346;
            }
            else if (v109 == -1)
            {
              goto LABEL_344;
            }
            v110[0] = &v117;
            ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))off_1E33AE268[v109])(v110, &v117, &v106);
            if (v120 == -1)
              goto LABEL_346;
            v110[0] = v104;
            v51 = ((uint64_t (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(v110, &v117);
            ++*(_DWORD *)(v51 + 16);
            v52 = *(_DWORD *)(v99 + 16);
            if (!v52)
            {
              __break(0xC471u);
              JUMPOUT(0x195B424FCLL);
            }
            v53 = v51;
            *(_DWORD *)(v99 + 16) = v52 - 1;
            if ((v97 & 1) != 0)
            {
              if (v120 == -1)
                goto LABEL_346;
              v110[0] = v104;
              v54 = ((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE228[v120])(v110, &v117);
            }
            else
            {
              v54 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v117);
            }
            v121 = v54;
            v8 = v53;
          }
          if (v109 != -1)
            ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v109])(v110, &v106);
          goto LABEL_202;
        }
        v8 = v99;
        if (v116 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        if (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v116])(&v106, v115) >= v23)
        {
          v39 = 5;
          goto LABEL_213;
        }
        if (v116 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        v37 = ((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v116])(&v106, v115);
        LOBYTE(v106) = 0;
        v109 = -1;
        v38 = v120;
        if (v120 != -1)
        {
          ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))off_1E33AE288[v120])(v110, &v106, &v117);
          v109 = v38;
        }
        v8 = v99;
        do
        {
          if (v109 == -1)
            goto LABEL_346;
          v110[0] = v104;
          ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v109])(v110, &v106);
          if (v109 == -1)
            goto LABEL_346;
          v110[0] = v104;
          if ((((uint64_t (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v109])(v110, &v106) & 1) != 0)break;
          if (v109 == -1)
            goto LABEL_346;
          v110[0] = v104;
        }
        while (((unsigned int (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v109])(v110, &v106) > v37);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v106) & 1) == 0)
        {
          if (v109 == -1)
            goto LABEL_346;
          v110[0] = v104;
          if (((unsigned int (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v109])(v110, &v106) == v37)
          {
            v39 = 5;
LABEL_211:
            if (v109 != -1)
            {
              v58 = v39;
              ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v109])(v110, &v106);
              v39 = v58;
            }
            goto LABEL_213;
          }
        }
        v46 = v120;
        if (v120 == -1)
        {
          if (v116 == -1)
            goto LABEL_346;
        }
        else if (v116 == -1)
        {
LABEL_344:
          ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v46])(v110, &v117);
          goto LABEL_345;
        }
        v110[0] = &v117;
        ((void (*)(_QWORD *, WebCore::Node **, unsigned int *))off_1E33AE268[v116])(v110, &v117, v115);
        if (v120 == -1)
          goto LABEL_346;
        v110[0] = v104;
        v55 = ((uint64_t (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(v110, &v117);
        ++*(_DWORD *)(v55 + 16);
        v56 = *(_DWORD *)(v99 + 16);
        if (!v56)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4251CLL);
        }
        v57 = v55;
        *(_DWORD *)(v99 + 16) = v56 - 1;
        v121 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)&v117);
        if (v120 == -1)
          goto LABEL_346;
        v110[0] = v104;
        if (((v97 ^ ((unsigned __int8 (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v120])(v110, &v117)) & 1) != 0)v39 = 4;
        else
          v39 = 5;
        v8 = v57;
        goto LABEL_211;
      }
      while (1)
      {
        if (v116 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        if ((((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v116])(&v106, v115) & 1) != 0)break;
        if (v116 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        v24 = ((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v116])(&v106, v115);
        if ((*(_BYTE *)(v24 + 45) & 1) == 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8))
            break;
        }
        WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>(v115);
      }
      if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v115))
      {
        v25 = v120;
        if (v120 == -1)
        {
          if (v116 == -1)
            goto LABEL_346;
        }
        else if (v116 == -1)
        {
LABEL_343:
          ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v25])(&v106, &v117);
LABEL_345:
          v120 = -1;
          goto LABEL_346;
        }
        v106 = (WebCore::Node *)&v117;
        ((void (*)(WebCore::Node **, WebCore::Node **, unsigned int *))off_1E33AE268[v116])(&v106, &v117, v115);
        if (v120 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        v47 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(&v106, &v117);
        ++*(_DWORD *)(v47 + 16);
        v48 = *(_DWORD *)(v99 + 16);
        if (!v48)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4249CLL);
        }
        v94 = v47;
        *(_DWORD *)(v99 + 16) = v48 - 1;
        v121 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)&v117);
        if (v120 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) <= v23)
          goto LABEL_174;
        do
        {
          WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>(v115);
          if (v116 == -1)
            goto LABEL_346;
          v106 = (WebCore::Node *)v115;
          ((void (*)(WebCore::Node **, unsigned int *, unsigned int *))off_1E33AE268[v116])(&v106, v115, v115);
          if (v116 == -1)
            goto LABEL_346;
          v106 = (WebCore::Node *)v110;
          if ((((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v116])(&v106, v115) & 1) != 0)break;
          if (v116 == -1)
            goto LABEL_346;
          v106 = (WebCore::Node *)v110;
        }
        while (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v116])(&v106, v115) > v23);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v115) & 1) == 0)
        {
          if (v116 == -1)
            goto LABEL_346;
          v106 = (WebCore::Node *)v110;
          if (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v116])(&v106, v115) >= v23)
            goto LABEL_174;
        }
        v39 = 4;
        v8 = v94;
        goto LABEL_213;
      }
      do
      {
        while (1)
        {
          while (1)
          {
LABEL_63:
            LOBYTE(v106) = 0;
            v109 = -1;
            v26 = v120;
            if (v120 == -1)
              goto LABEL_346;
            ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v120])(v104, &v106, &v117);
            v109 = v26;
            v104[0] = &v112;
            ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v26])(v104, &v106);
            LOBYTE(v110[0]) = 0;
            v111 = -1;
            v27 = v109;
            if (v109 == -1)
              goto LABEL_346;
            ((void (*)(_QWORD *, _QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v109])(v104, v110, &v106);
            v111 = v27;
            if (v109 != -1)
            {
              ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v109])(v104, &v106);
              v27 = v111;
              if (v111 == -1)
                goto LABEL_346;
            }
            v106 = (WebCore::Node *)v104;
            if ((((uint64_t (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v27])(&v106, v110) & 1) != 0)goto LABEL_70;
            if (v111 == -1)
              goto LABEL_346;
            v106 = (WebCore::Node *)v104;
            if (((unsigned int (*)(WebCore::Node **, _QWORD *))off_1E33AE278[v111])(&v106, v110) < v23)
            {
LABEL_70:
              v28 = 0;
              goto LABEL_77;
            }
            if (v120 != -1)
              break;
            if (v111 != -1)
            {
LABEL_75:
              v106 = (WebCore::Node *)&v117;
              ((void (*)(WebCore::Node **, WebCore::Node **, _QWORD *))off_1E33AE268[v111])(&v106, &v117, v110);
              goto LABEL_76;
            }
          }
          if (v111 != -1)
            goto LABEL_75;
          ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v120])(&v106, &v117);
          v120 = -1;
LABEL_76:
          v28 = 1;
LABEL_77:
          if (v111 == -1)
            break;
          ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v111])(&v106, v110);
          if ((v28 & 1) == 0)
            goto LABEL_81;
        }
      }
      while (v28);
LABEL_81:
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v110;
      if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) != v23)
      {
        if (v120 != -1)
        {
          v106 = (WebCore::Node *)v110;
          v29 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117);
          while (1)
          {
            while (1)
            {
              LOBYTE(v106) = 0;
              v109 = -1;
              v30 = v120;
              if (v120 != -1)
              {
                ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v120])(v104, &v106, &v117);
                v109 = v30;
              }
              WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)&v106);
              LOBYTE(v110[0]) = 0;
              v111 = -1;
              v31 = v109;
              if (v109 == -1)
                goto LABEL_346;
              ((void (*)(_QWORD *, _QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v109])(v104, v110, &v106);
              v111 = v31;
              if (v109 != -1)
              {
                ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v109])(v104, &v106);
                v31 = v111;
                if (v111 == -1)
                  goto LABEL_346;
              }
              v106 = (WebCore::Node *)v104;
              if ((((uint64_t (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v106, v110) & 1) == 0)
              {
                if (v111 == -1)
                  goto LABEL_346;
                v106 = (WebCore::Node *)v104;
                if (((unsigned int (*)(WebCore::Node **, _QWORD *))off_1E33AE278[v111])(&v106, v110) >= v29)
                  break;
              }
              v32 = 0;
LABEL_100:
              if (v111 != -1)
                ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v111])(&v106, v110);
              if ((v32 & 1) == 0)
              {
                if (v120 == -1)
                  goto LABEL_346;
                v106 = (WebCore::Node *)v110;
                if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117) == v29)goto LABEL_140;
                if (v120 == -1)
                  goto LABEL_346;
                v106 = (WebCore::Node *)v110;
                LOBYTE(v23) = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v120])(&v106, &v117);
                goto LABEL_63;
              }
            }
            if (v120 != -1)
              break;
            if (v111 != -1)
              goto LABEL_98;
          }
          if (v111 == -1)
          {
            ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v120])(&v106, &v117);
            v120 = -1;
          }
          else
          {
LABEL_98:
            v106 = (WebCore::Node *)&v117;
            ((void (*)(WebCore::Node **, WebCore::Node **, _QWORD *))off_1E33AE268[v111])(&v106, &v117, v110);
          }
          v32 = 1;
          goto LABEL_100;
        }
LABEL_346:
        v87 = (WebCore::VisiblePosition *)std::__throw_bad_variant_access[abi:sn180100]();
        return (WebCore::Node *)WebCore::VisiblePosition::right(v87, v88, v89);
      }
LABEL_140:
      if (v120 == -1)
        goto LABEL_346;
      v106 = (WebCore::Node *)v110;
      v40 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v120])(&v106, &v117);
      ++*(_DWORD *)(v40 + 16);
      v41 = *(_DWORD *)(v99 + 16);
      if (!v41)
      {
        __break(0xC471u);
        JUMPOUT(0x195B424BCLL);
      }
      *(_DWORD *)(v99 + 16) = v41 - 1;
      v94 = v40;
      if ((v97 & 1) != 0)
      {
        if (v120 == -1)
          goto LABEL_346;
        v106 = (WebCore::Node *)v110;
        v42 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v120])(&v106, &v117);
      }
      else
      {
        v42 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v117);
      }
      v121 = v42;
LABEL_174:
      v8 = v94;
LABEL_202:
      v39 = 5;
LABEL_213:
      if (v116 != -1)
      {
        v59 = v39;
        ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v116])(&v106, v115);
        v39 = v59;
      }
    }
    while (v39 == 4);
    if (v39 == 5)
      goto LABEL_225;
LABEL_266:
    v72 = *(_DWORD *)(v8 + 16);
    if (!v72)
    {
      __break(0xC471u);
      JUMPOUT(0x195B4247CLL);
    }
    v98 = v39;
    *(_DWORD *)(v8 + 16) = v72 - 1;
    v6 = v97;
LABEL_268:
    if (v120 != -1)
      ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v120])(&v106, &v117);
  }
  while (!v98);
  v73 = v122;
  v122 = 0;
  if (v73)
  {
    v74 = *(unsigned int *)(v73 + 36);
    v75 = *(unsigned int **)(v73 + 24);
    if ((_DWORD)v74)
    {
      v76 = 24 * v74;
      do
      {
        v77 = v75[4];
        if ((_DWORD)v77 != -1)
          ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v77])(&v117, v75);
        v75[4] = -1;
        v75 += 6;
        v76 -= 24;
      }
      while (v76);
      v75 = *(unsigned int **)(v73 + 24);
    }
    if (v75)
    {
      *(_QWORD *)(v73 + 24) = 0;
      *(_DWORD *)(v73 + 32) = 0;
      WTF::fastFree((WTF *)v75, v7);
    }
    v78 = *(unsigned int *)(v73 + 16);
    if ((_DWORD)v78 != -1)
      ((void (*)(WebCore::Node **, uint64_t))off_1E33AE258[v78])(&v117, v73);
    *(_DWORD *)(v73 + 16) = -1;
    WTF::fastFree((WTF *)v73, v7);
  }
  v79 = v123;
  v123 = 0;
  if (v79)
  {
    if (*((_DWORD *)v79 + 6) == 2)
    {
      if ((*((_WORD *)v79 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v79);
    }
    else
    {
      *((_DWORD *)v79 + 6) -= 2;
    }
  }
  v80 = v126;
  v126 = 0;
  if (v80)
  {
    if (*((_DWORD *)v80 + 6) == 2)
    {
      if ((*((_WORD *)v80 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v80);
    }
    else
    {
      *((_DWORD *)v80 + 6) -= 2;
    }
  }
LABEL_302:
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v101)
    || WebCore::Position::atEndOfTree((WebCore::Position *)&v101))
  {
    if (a2)
      *a2 = 1;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v101, (uint64_t)&v117);
    LOBYTE(v120) = 1;
    if ((a3 & 1) != 0)
    {
      v83 = v117;
      if (v117)
        *((_DWORD *)v117 + 6) += 2;
      v106 = v83;
      v107 = v118;
      v108 = v119;
      if ((WebCore::directionOfEnclosingBlock((WebCore *)&v106, v82) & 1) != 0)
        WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)this, (const WebCore::VisiblePosition *)&v117, a2, a4);
      else
        WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)this, (const WebCore::VisiblePosition *)&v117, a2, a4);
      v85 = v106;
      v106 = 0;
      if (v85)
      {
        if (*((_DWORD *)v85 + 6) == 2)
        {
          if ((*((_WORD *)v85 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v85);
        }
        else
        {
          *((_DWORD *)v85 + 6) -= 2;
        }
      }
      v86 = v117;
      v117 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 6) == 2)
        {
          if ((*((_WORD *)v86 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v86);
        }
        else
        {
          *((_DWORD *)v86 + 6) -= 2;
        }
      }
      goto LABEL_308;
    }
    v84 = v117;
    v117 = 0;
    *(_QWORD *)a4 = v84;
    *(_DWORD *)(a4 + 8) = v118;
    *(_BYTE *)(a4 + 12) = v119;
  }
  *(_BYTE *)(a4 + 16) = 1;
LABEL_308:
  result = v101;
  v101 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::VisiblePosition::right@<X0>(WebCore::Node **this@<X0>, BOOL *a2@<X2>, char a3@<W1>, uint64_t a4@<X8>)
{
  WebCore::Node *v5;
  unsigned int v6;
  const WebCore::Node *v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _BOOL4 v37;
  int v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  WebCore::Node *v67;
  unsigned int v68;
  char v69;
  char v70;
  int v71;
  WebCore::Node *v72;
  _BOOL4 v73;
  WebCore::Node *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  WebCore::Node *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WebCore::Node *v87;
  WebCore::Node *v88;
  uint64_t *result;
  const WebCore::Position *v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  WebCore::Node *v93;
  WebCore::Node *v94;
  uint64_t *v95;
  const WebCore::Position *v96;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unsigned int v103;
  char v104;
  unsigned int v105;
  WebCore::Node *v106;
  unsigned int v107;
  char v108;
  _QWORD v109[2];
  unsigned int v110;
  WebCore::Node *v111;
  int v112;
  unsigned __int8 v113;
  unsigned int v114;
  _QWORD v115[2];
  unsigned int v116;
  WebCore::Node *v117;
  unsigned int v118;
  char v119;
  unsigned int v120[4];
  unsigned int v121;
  WebCore::Node *v122;
  int v123;
  unsigned __int8 v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  WebCore::Node *v128;
  int v129;
  unsigned __int8 v130;
  WebCore::Node *v131;
  unsigned int v132;
  char v133;
  char v134;
  _QWORD v135[2];

  if (a2)
    *a2 = 0;
  v5 = *this;
  if (!*this)
  {
    v106 = 0;
    v107 = 0;
    v108 = 0;
    goto LABEL_322;
  }
  *((_DWORD *)v5 + 6) += 2;
  v131 = v5;
  v132 = *((_DWORD *)this + 2);
  v133 = *((_BYTE *)this + 12);
  WebCore::Position::downstream((uint64_t)&v131, (WebCore::Node *)1, (uint64_t)&v128);
  v6 = WebCore::Position::primaryDirection((WebCore::Position *)&v131);
  v127 = 0;
  v105 = v6;
  do
  {
    WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v131, (const WebCore::Node *)*((unsigned __int8 *)this + 16), v6, (uint64_t)&v122);
    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v122))
    {
      if ((v6 & 1) != 0)
      {
        WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)&v106);
        v8 = 1;
      }
      else
      {
        v8 = 1;
        WebCore::nextVisuallyDistinctCandidate((uint64_t)this, 1, (uint64_t)&v106);
      }
      goto LABEL_288;
    }
    if (v125 == -1)
      goto LABEL_366;
    v111 = (WebCore::Node *)v120;
    v9 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(&v111, &v122);
    ++*(_DWORD *)(v9 + 16);
    while (1)
    {
LABEL_10:
      if ((*(_BYTE *)(v9 + 20) & 2) != 0
        || *(_BYTE *)(v9 + 46) == 17 && ((*(_BYTE *)(v9 + 52) & 7) != 2 || (*(_BYTE *)(v9 + 53) & 1) == 0))
      {
        if (v125 == -1)
          goto LABEL_366;
        v103 = v126;
        v111 = (WebCore::Node *)v120;
        if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) & 1) != 0)
        {
          if (v125 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v120;
          v10 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v125])(&v111, &v122);
        }
        else
        {
          v10 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
        }
        if (v103 == v10)
        {
          if (v125 != -1)
          {
            v111 = (WebCore::Node *)v120;
            if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) & 1) != 0)
              goto LABEL_266;
LABEL_264:
            WebCore::nextVisuallyDistinctCandidate((uint64_t)this, 1, (uint64_t)&v106);
            goto LABEL_267;
          }
          goto LABEL_366;
        }
      }
      if ((*(_BYTE *)(v9 + 45) & 1) != 0 || !*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8))
        break;
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v120;
      v11 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122);
      v12 = 544;
      if ((v11 & 1) == 0)
        v12 = 560;
      v126 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + v12))(v9, v126);
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v120;
      v13 = (*(&off_1E33AE218 + v125))((int)&v111, (WebCore::InlineIterator::BoxModernPath *)&v122);
      if (v125 == -1)
        goto LABEL_366;
      v14 = v13;
      v111 = (WebCore::Node *)v120;
      v15 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v125])(&v111, &v122);
      v16 = v126;
      if (v126 > v14 && v126 < v15)
        goto LABEL_244;
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v120;
      if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) & 1) != 0)
      {
        v17 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
      }
      else
      {
        if (v125 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v120;
        v17 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v125])(&v111, &v122);
      }
      if (v16 != v17)
      {
        WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)&v122, (uint64_t)v120);
        if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v120))
        {
          if ((v105 & 1) != 0)
            WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)&v117);
          else
            WebCore::nextVisuallyDistinctCandidate((uint64_t)this, 1, (uint64_t)&v117);
          WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v117, (const WebCore::Node *)*((unsigned __int8 *)this + 16), v105, (uint64_t)&v111);
          LOBYTE(v115[0]) = 0;
          v116 = -1;
          v35 = v114;
          if (v114 != -1)
          {
            ((void (*)(_QWORD *, _QWORD *, WebCore::Node **))off_1E33AE248[v114])(v109, v115, &v111);
            v116 = v35;
            if (v114 != -1)
              ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v114])(v109, &v111);
          }
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v115) & 1) != 0)
            goto LABEL_135;
          if (v116 == -1)
            goto LABEL_366;
          v109[0] = v135;
          ((void (*)(WebCore::Node **__return_ptr, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v116])(&v111, v109, v115);
          if (v125 == -1)
            goto LABEL_366;
          v135[0] = &v134;
          ((void (*)(_QWORD *__return_ptr, _QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v125])(v109, v135, &v122);
          v36 = v110;
          v37 = v110 == (unint64_t)v114;
          if (v110 == 0xFFFFFFFFLL)
            v37 = 0;
          if (v114 == 0xFFFFFFFFLL)
            v38 = v110 == 0xFFFFFFFFLL;
          else
            v38 = v37;
          if (v114 != -1 && v37)
          {
            v135[0] = &v134;
            v38 = ((uint64_t (*)(_QWORD *, WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v114])(v135, &v111, v109);
            v36 = v110;
          }
          if (v36 != 0xFFFFFFFFLL)
            ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v36])(v135, v109);
          if (v114 != -1)
            ((void (*)(_QWORD *, WebCore::Node **))off_1E33AE258[v114])(v109, &v111);
          if (!v38)
          {
LABEL_135:
            v39 = v117;
            v117 = 0;
            v106 = v39;
            v107 = v118;
            v108 = v119;
          }
          else
          {
            v106 = 0;
            v107 = 0;
            v108 &= 0xF0u;
          }
          if (v116 != -1)
            ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v116])(&v111, v115);
          v40 = v117;
          v117 = 0;
          v6 = v105;
          if (v40)
          {
            if (*((_DWORD *)v40 + 6) == 2)
            {
              if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v40);
            }
            else
            {
              *((_DWORD *)v40 + 6) -= 2;
            }
          }
          v41 = 1;
        }
        else
        {
          v27 = v125;
          if (v125 == -1)
          {
            if (v121 == -1)
              goto LABEL_366;
          }
          else if (v121 == -1)
          {
            goto LABEL_363;
          }
          v111 = (WebCore::Node *)&v122;
          ((void (*)(WebCore::Node **, WebCore::Node **, unsigned int *))off_1E33AE268[v121])(&v111, &v122, v120);
          if (v125 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v115;
          v48 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(&v111, &v122);
          ++*(_DWORD *)(v48 + 16);
          v49 = *(_DWORD *)(v9 + 16);
          if (!v49)
          {
            __break(0xC471u);
            JUMPOUT(0x195B43E08);
          }
          *(_DWORD *)(v9 + 16) = v49 - 1;
          if (v121 == -1)
            goto LABEL_366;
          v50 = v48;
          v111 = (WebCore::Node *)v115;
          if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v121])(&v111, v120) & 1) != 0)
          {
            if (v121 == -1)
              goto LABEL_366;
            v111 = (WebCore::Node *)v115;
            v51 = ((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE228[v121])(&v111, v120);
          }
          else
          {
            v51 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v120);
          }
          v126 = v51;
          v41 = 4;
          v9 = v50;
          v6 = v105;
        }
        v52 = v121;
        if (v121 != -1)
          goto LABEL_236;
        goto LABEL_237;
      }
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v120;
      v18 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122);
      LOBYTE(v111) = 0;
      v114 = -1;
      v19 = v125;
      if (v125 == -1)
        goto LABEL_366;
      v20 = v18;
      ((void (*)(unsigned int *, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v125])(v120, &v111, &v122);
      v114 = v19;
      *(_QWORD *)v120 = v115;
      ((void (*)(unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v19])(v120, &v111);
      LOBYTE(v120[0]) = 0;
      v121 = -1;
      v21 = v114;
      if (v114 != -1)
      {
        ((void (*)(_QWORD *, unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v114])(v115, v120, &v111);
        v121 = v21;
        if (v114 != -1)
          ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v114])(v115, &v111);
      }
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v115;
      if (v105 == (((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) & 1))
      {
        if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v120))
        {
          v6 = v105;
          if (v105)
          {
            if (v125 == -1)
              goto LABEL_366;
            v111 = (WebCore::Node *)v109;
            ((void (*)(_QWORD *__return_ptr, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v125])(v115, &v111, &v122);
            WebCore::InlineIterator::firstLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)v115, &v127, (unsigned int *)&v111);
          }
          else
          {
            if (v125 == -1)
              goto LABEL_366;
            v111 = (WebCore::Node *)v109;
            ((void (*)(_QWORD *__return_ptr, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v125])(v115, &v111, &v122);
            WebCore::InlineIterator::lastLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)v115, &v127, (unsigned int *)&v111);
          }
          if (v116 != -1)
            ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v116])(v109, v115);
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v111) & 1) == 0)
          {
            v53 = v125;
            if (v125 == -1)
            {
              if (v114 == -1)
                goto LABEL_366;
            }
            else if (v114 == -1)
            {
              goto LABEL_364;
            }
            v115[0] = &v122;
            ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))off_1E33AE268[v114])(v115, &v122, &v111);
            if (v125 == -1)
              goto LABEL_366;
            v115[0] = v109;
            v57 = ((uint64_t (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(v115, &v122);
            ++*(_DWORD *)(v57 + 16);
            v58 = *(_DWORD *)(v9 + 16);
            if (!v58)
            {
              __break(0xC471u);
              JUMPOUT(0x195B43EA8);
            }
            v59 = v57;
            *(_DWORD *)(v9 + 16) = v58 - 1;
            if ((v105 & 1) != 0)
            {
              v60 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
            }
            else
            {
              if (v125 == -1)
                goto LABEL_366;
              v115[0] = v109;
              v60 = ((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE228[v125])(v115, &v122);
            }
            v126 = v60;
            v9 = v59;
            v6 = v105;
          }
          if (v114 != -1)
            ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v114])(v115, &v111);
          goto LABEL_218;
        }
        if (v121 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        if (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v121])(&v111, v120) >= v20)
        {
          v41 = 5;
          v6 = v105;
          goto LABEL_235;
        }
        if (v121 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        v42 = ((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v121])(&v111, v120);
        LOBYTE(v111) = 0;
        v114 = -1;
        v43 = v125;
        if (v125 != -1)
        {
          ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))off_1E33AE288[v125])(v115, &v111, &v122);
          v114 = v43;
        }
        do
        {
          WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)&v111);
          if (v114 == -1)
            goto LABEL_366;
          v115[0] = v109;
          if ((((uint64_t (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v114])(v115, &v111) & 1) != 0)break;
          if (v114 == -1)
            goto LABEL_366;
          v115[0] = v109;
        }
        while (((unsigned int (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v114])(v115, &v111) > v42);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v111) & 1) == 0)
        {
          if (v114 == -1)
            goto LABEL_366;
          v115[0] = v109;
          if (((unsigned int (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v114])(v115, &v111) == v42)
          {
            v41 = 5;
            goto LABEL_232;
          }
        }
        v53 = v125;
        if (v125 == -1)
        {
          if (v121 == -1)
            goto LABEL_366;
        }
        else if (v121 == -1)
        {
LABEL_364:
          ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v53])(v115, &v122);
          goto LABEL_365;
        }
        v115[0] = &v122;
        ((void (*)(_QWORD *, WebCore::Node **, unsigned int *))off_1E33AE268[v121])(v115, &v122, v120);
        if (v125 == -1)
          goto LABEL_366;
        v115[0] = v109;
        v61 = ((uint64_t (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(v115, &v122);
        ++*(_DWORD *)(v61 + 16);
        v62 = *(_DWORD *)(v9 + 16);
        if (!v62)
        {
          __break(0xC471u);
          JUMPOUT(0x195B43EC8);
        }
        *(_DWORD *)(v9 + 16) = v62 - 1;
        if (v125 == -1)
          goto LABEL_366;
        v63 = v61;
        v115[0] = v109;
        if ((((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v125])(v115, &v122) & 1) != 0)
        {
          if (v125 == -1)
            goto LABEL_366;
          v115[0] = v109;
          v64 = ((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE228[v125])(v115, &v122);
        }
        else
        {
          v64 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
        }
        v126 = v64;
        if (v125 == -1)
          goto LABEL_366;
        v115[0] = v109;
        if (((v105 ^ ((unsigned __int8 (*)(_QWORD *, WebCore::Node **))off_1E33AE278[v125])(v115, &v122)) & 1) != 0)v41 = 4;
        else
          v41 = 5;
        v9 = v63;
LABEL_232:
        if (v114 != -1)
        {
          v65 = v41;
          ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v114])(v115, &v111);
          v41 = v65;
        }
LABEL_234:
        v6 = v105;
        goto LABEL_235;
      }
      while (1)
      {
        if (v121 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        if ((((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v121])(&v111, v120) & 1) != 0)break;
        if (v121 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        v22 = ((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v121])(&v111, v120);
        if ((*(_BYTE *)(v22 + 45) & 1) == 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v22 + 24) + 8))
            break;
        }
        if (v121 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v121])(&v111, v120);
      }
      if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v120))
      {
        v27 = v125;
        if (v125 == -1)
        {
          if (v121 == -1)
            goto LABEL_366;
        }
        else if (v121 == -1)
        {
LABEL_363:
          ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v27])(&v111, &v122);
LABEL_365:
          v125 = -1;
          goto LABEL_366;
        }
        v111 = (WebCore::Node *)&v122;
        ((void (*)(WebCore::Node **, WebCore::Node **, unsigned int *))off_1E33AE268[v121])(&v111, &v122, v120);
        if (v125 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        v54 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(&v111, &v122);
        ++*(_DWORD *)(v54 + 16);
        v55 = *(_DWORD *)(v9 + 16);
        if (!v55)
        {
          __break(0xC471u);
          JUMPOUT(0x195B43E48);
        }
        v100 = v54;
        *(_DWORD *)(v9 + 16) = v55 - 1;
        if (v125 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) & 1) != 0)
        {
          if (v125 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v115;
          v56 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v125])(&v111, &v122);
        }
        else
        {
          v56 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
        }
        v126 = v56;
        if (v125 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v115;
        if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) <= v20)
          goto LABEL_207;
        do
        {
          if (v121 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v115;
          ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v121])(&v111, v120);
          if (v121 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v115;
          if ((((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v121])(&v111, v120) & 1) != 0)break;
          if (v121 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v115;
        }
        while (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v121])(&v111, v120) > v20);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v120) & 1) == 0)
        {
          if (v121 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v115;
          if (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v121])(&v111, v120) >= v20)
          {
LABEL_207:
            v6 = v105;
            v9 = v100;
            goto LABEL_218;
          }
        }
        v41 = 4;
        v9 = v100;
        goto LABEL_234;
      }
      do
      {
        while (1)
        {
LABEL_70:
          LOBYTE(v111) = 0;
          v114 = -1;
          v28 = v125;
          if (v125 != -1)
          {
            ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v125])(v109, &v111, &v122);
            v114 = v28;
          }
          WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)&v111);
          LOBYTE(v115[0]) = 0;
          v116 = -1;
          v29 = v114;
          if (v114 == -1)
            goto LABEL_366;
          ((void (*)(_QWORD *, _QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v114])(v109, v115, &v111);
          v116 = v29;
          if (v114 != -1)
          {
            ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v114])(v109, &v111);
            v29 = v116;
            if (v116 == -1)
              goto LABEL_366;
          }
          v111 = (WebCore::Node *)v109;
          if ((((uint64_t (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v111, v115) & 1) != 0)goto LABEL_78;
          if (v116 == -1)
            goto LABEL_366;
          v111 = (WebCore::Node *)v109;
          if (((unsigned int (*)(WebCore::Node **, _QWORD *))off_1E33AE278[v116])(&v111, v115) < v20)
          {
LABEL_78:
            v30 = 0;
            goto LABEL_85;
          }
          if (v125 != -1)
            break;
          if (v116 != -1)
          {
LABEL_83:
            v111 = (WebCore::Node *)&v122;
            ((void (*)(WebCore::Node **, WebCore::Node **, _QWORD *))off_1E33AE268[v116])(&v111, &v122, v115);
            goto LABEL_84;
          }
        }
        if (v116 != -1)
          goto LABEL_83;
        ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v125])(&v111, &v122);
        v125 = -1;
LABEL_84:
        v30 = 1;
LABEL_85:
        if (v116 != -1)
          ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v116])(&v111, v115);
      }
      while ((v30 & 1) != 0);
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v115;
      if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) != v20)
      {
        if (v125 != -1)
        {
          v111 = (WebCore::Node *)v115;
          v31 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122);
          while (1)
          {
LABEL_92:
            LOBYTE(v111) = 0;
            v114 = -1;
            v32 = v125;
            if (v125 == -1)
              goto LABEL_366;
            ((void (*)(_QWORD *, WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v125])(v109, &v111, &v122);
            v114 = v32;
            v109[0] = &v117;
            ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v32])(v109, &v111);
            LOBYTE(v115[0]) = 0;
            v116 = -1;
            v33 = v114;
            if (v114 == -1)
              goto LABEL_366;
            ((void (*)(_QWORD *, _QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v114])(v109, v115, &v111);
            v116 = v33;
            if (v114 != -1)
            {
              ((void (*)(_QWORD *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v114])(v109, &v111);
              v33 = v116;
              if (v116 == -1)
                goto LABEL_366;
            }
            v111 = (WebCore::Node *)v109;
            if ((((uint64_t (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v111, v115) & 1) == 0)
            {
              if (v116 == -1)
                goto LABEL_366;
              v111 = (WebCore::Node *)v109;
              if (((unsigned int (*)(WebCore::Node **, _QWORD *))off_1E33AE278[v116])(&v111, v115) >= v31)
                break;
            }
            v34 = 0;
LABEL_106:
            if (v116 == -1)
            {
              if (!v34)
              {
LABEL_110:
                if (v125 == -1)
                  goto LABEL_366;
                v111 = (WebCore::Node *)v115;
                if (((unsigned int (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) == v31)goto LABEL_158;
                if (v125 == -1)
                  goto LABEL_366;
                v111 = (WebCore::Node *)v115;
                LOBYTE(v20) = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122);
                goto LABEL_70;
              }
            }
            else
            {
              ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v116])(&v111, v115);
              if ((v34 & 1) == 0)
                goto LABEL_110;
            }
          }
          if (v125 == -1)
          {
            if (v116 == -1)
              goto LABEL_92;
          }
          else if (v116 == -1)
          {
            ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v125])(&v111, &v122);
            v125 = -1;
LABEL_105:
            v34 = 1;
            goto LABEL_106;
          }
          v111 = (WebCore::Node *)&v122;
          ((void (*)(WebCore::Node **, WebCore::Node **, _QWORD *))off_1E33AE268[v116])(&v111, &v122, v115);
          goto LABEL_105;
        }
LABEL_366:
        v95 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::canonicalizeCandidate(v95, v96);
      }
LABEL_158:
      v6 = v105;
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v115;
      v44 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(&v111, &v122);
      ++*(_DWORD *)(v44 + 16);
      v45 = *(_DWORD *)(v9 + 16);
      if (!v45)
      {
        __break(0xC471u);
        JUMPOUT(0x195B43E68);
      }
      *(_DWORD *)(v9 + 16) = v45 - 1;
      if ((v105 & 1) != 0)
      {
        v46 = v44;
        v47 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
      }
      else
      {
        if (v125 == -1)
          goto LABEL_366;
        v46 = v44;
        v111 = (WebCore::Node *)v115;
        v47 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v125])(&v111, &v122);
      }
      v126 = v47;
      v9 = v46;
LABEL_218:
      v41 = 5;
LABEL_235:
      v52 = v121;
      if (v121 != -1)
      {
LABEL_236:
        v66 = v41;
        ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v52])(&v111, v120);
        v41 = v66;
      }
LABEL_237:
      if (v41 != 4)
      {
        if (v41 != 5)
          goto LABEL_286;
LABEL_244:
        if ((*(_BYTE *)(v9 + 45) & 1) != 0)
        {
          v67 = 0;
          v71 = 8;
          v70 = 1;
          v68 = v126;
        }
        else
        {
          v67 = *(WebCore::Node **)(*(_QWORD *)(v9 + 24) + 8);
          v68 = v126;
          if (v67)
          {
            *((_DWORD *)v67 + 6) += 4;
            v69 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v67 + 208))(v67);
            v70 = 0;
            if ((v69 & 1) != 0)
            {
              v71 = 8;
            }
            else if (v68)
            {
              v71 = 10;
            }
            else
            {
              v71 = 9;
            }
          }
          else
          {
            v71 = 8;
            v70 = 1;
          }
        }
        v72 = v131;
        v131 = v67;
        if (v72)
        {
          if (*((_DWORD *)v72 + 6) == 2)
          {
            if ((*((_WORD *)v72 + 15) & 0x400) == 0)
            {
              v104 = v70;
              v101 = v71;
              WebCore::Node::removedLastRef(v72);
              v71 = v101;
              v70 = v104;
            }
          }
          else
          {
            *((_DWORD *)v72 + 6) -= 2;
          }
        }
        v99 = v71 | v99 & 0xFFFFFFF0;
        v132 = v68;
        v133 = v99;
        if ((v70 & 1) == 0)
        {
          if (*((_DWORD *)v67 + 6) == 2)
          {
            if ((*((_WORD *)v67 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v67);
          }
          else
          {
            *((_DWORD *)v67 + 6) -= 2;
          }
        }
        if (WebCore::Position::isCandidate((WebCore::Position *)&v131, v7))
        {
          v73 = 1;
          WebCore::Position::downstream((uint64_t)&v131, (WebCore::Node *)1, (uint64_t)&v111);
          v74 = v111;
          if (v111 == v128)
          {
            if ((v113 & 8) == 0 && ((v75 = v113 & 7, v75 == 4) || v75 == 2))
              v76 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v111);
            else
              v76 = v112;
            if ((v130 & 8) == 0 && ((v77 = v130 & 7, v77 == 4) || v77 == 2))
              v78 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v128);
            else
              v78 = v129;
            v73 = v76 != v78
               || ((v130 ^ v113) & 7) != 0
               || WebCore::Position::atStartOfTree((WebCore::Position *)&v131)
               || WebCore::Position::atEndOfTree((WebCore::Position *)&v131);
            v74 = v111;
          }
          v111 = 0;
          if (v74)
          {
            if (*((_DWORD *)v74 + 6) == 2)
            {
              if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v74);
            }
            else
            {
              *((_DWORD *)v74 + 6) -= 2;
            }
          }
          if (v73)
          {
LABEL_284:
            v79 = v131;
            v131 = 0;
            v106 = v79;
            v107 = v132;
            v108 = v133;
            v41 = 1;
            goto LABEL_285;
          }
        }
        else if (WebCore::Position::atStartOfTree((WebCore::Position *)&v131)
               || WebCore::Position::atEndOfTree((WebCore::Position *)&v131))
        {
          goto LABEL_284;
        }
        v41 = 0;
LABEL_285:
        v6 = v105;
        goto LABEL_286;
      }
    }
    if (v125 == -1)
      goto LABEL_366;
    v111 = (WebCore::Node *)v120;
    ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v125])(&v111, &v122);
    if (v125 == -1)
      goto LABEL_366;
    v111 = (WebCore::Node *)v120;
    if (!((unsigned int (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v125])(&v111, &v122))
    {
      if (v125 == -1)
        goto LABEL_366;
      v111 = (WebCore::Node *)v120;
      v23 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v125])(&v111, &v122);
      ++*(_DWORD *)(v23 + 16);
      v24 = *(_DWORD *)(v9 + 16);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x195B43DE8);
      }
      *(_DWORD *)(v9 + 16) = v24 - 1;
      if (v125 == -1)
        goto LABEL_366;
      v25 = v23;
      v111 = (WebCore::Node *)v120;
      if ((((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE278[v125])(&v111, &v122) & 1) != 0)
      {
        if (v125 == -1)
          goto LABEL_366;
        v111 = (WebCore::Node *)v120;
        v26 = ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33AE228[v125])(&v111, &v122);
      }
      else
      {
        v26 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v122);
      }
      v126 = v26;
      v9 = v25;
      v6 = v105;
      goto LABEL_10;
    }
    if ((v6 & 1) == 0)
      goto LABEL_264;
LABEL_266:
    WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)&v106);
LABEL_267:
    v41 = 1;
LABEL_286:
    v80 = *(_DWORD *)(v9 + 16);
    if (!v80)
    {
      __break(0xC471u);
      JUMPOUT(0x195B43E28);
    }
    v8 = v41;
    *(_DWORD *)(v9 + 16) = v80 - 1;
LABEL_288:
    if (v125 != -1)
      ((void (*)(WebCore::Node **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v125])(&v111, &v122);
  }
  while (!v8);
  v81 = v127;
  v127 = 0;
  if (v81)
  {
    v82 = *(unsigned int *)(v81 + 36);
    v83 = *(unsigned int **)(v81 + 24);
    if ((_DWORD)v82)
    {
      v84 = 24 * v82;
      do
      {
        v85 = v83[4];
        if ((_DWORD)v85 != -1)
          ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v85])(&v122, v83);
        v83[4] = -1;
        v83 += 6;
        v84 -= 24;
      }
      while (v84);
      v83 = *(unsigned int **)(v81 + 24);
    }
    if (v83)
    {
      *(_QWORD *)(v81 + 24) = 0;
      *(_DWORD *)(v81 + 32) = 0;
      WTF::fastFree((WTF *)v83, v7);
    }
    v86 = *(unsigned int *)(v81 + 16);
    if ((_DWORD)v86 != -1)
      ((void (*)(WebCore::Node **, uint64_t))off_1E33AE258[v86])(&v122, v81);
    *(_DWORD *)(v81 + 16) = -1;
    WTF::fastFree((WTF *)v81, v7);
  }
  v87 = v128;
  v128 = 0;
  if (v87)
  {
    if (*((_DWORD *)v87 + 6) == 2)
    {
      if ((*((_WORD *)v87 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v87);
    }
    else
    {
      *((_DWORD *)v87 + 6) -= 2;
    }
  }
  v88 = v131;
  v131 = 0;
  if (v88)
  {
    if (*((_DWORD *)v88 + 6) == 2)
    {
      if ((*((_WORD *)v88 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v88);
    }
    else
    {
      *((_DWORD *)v88 + 6) -= 2;
    }
  }
LABEL_322:
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v106)
    || WebCore::Position::atEndOfTree((WebCore::Position *)&v106))
  {
    if (a2)
      *a2 = 1;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
LABEL_327:
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v106, (uint64_t)&v122);
    LOBYTE(v125) = 1;
    if ((a3 & 1) == 0)
    {
      v92 = v122;
      v122 = 0;
      *(_QWORD *)a4 = v92;
      *(_DWORD *)(a4 + 8) = v123;
      *(_BYTE *)(a4 + 12) = v124;
      goto LABEL_327;
    }
    v91 = v122;
    if (v122)
      *((_DWORD *)v122 + 6) += 2;
    v111 = v91;
    v112 = v123;
    v113 = v124;
    if ((WebCore::directionOfEnclosingBlock((WebCore *)&v111, v90) & 1) != 0)
      WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)this, (const WebCore::VisiblePosition *)&v122, a2, a4);
    else
      WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)this, (const WebCore::VisiblePosition *)&v122, a2, a4);
    v93 = v111;
    v111 = 0;
    if (v93)
    {
      if (*((_DWORD *)v93 + 6) == 2)
      {
        if ((*((_WORD *)v93 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v93);
      }
      else
      {
        *((_DWORD *)v93 + 6) -= 2;
      }
    }
    v94 = v122;
    v122 = 0;
    if (v94)
    {
      if (*((_DWORD *)v94 + 6) == 2)
      {
        if ((*((_WORD *)v94 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v94);
      }
      else
      {
        *((_DWORD *)v94 + 6) -= 2;
      }
    }
  }
  result = (uint64_t *)v106;
  v106 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::canonicalizeCandidate(uint64_t *this, const WebCore::Position *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  const WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = this;
  if (*(_QWORD *)a2)
  {
    v3 = (uint64_t *)a2;
    WebCore::Position::upstream((uint64_t)a2, (WebCore::Node *)1, (uint64_t)v6);
    if (WebCore::Position::isCandidate((WebCore::Position *)v6, v4))
    {
      v5 = v6[0];
      v6[0] = 0;
      v3 = v6;
    }
    else
    {
      v5 = *v3;
      if (*v3)
        *(_DWORD *)(v5 + 24) += 2;
    }
    *v2 = v5;
    *((_DWORD *)v2 + 2) = *((_DWORD *)v3 + 2);
    *((_BYTE *)v2 + 12) = *((_BYTE *)v3 + 12);
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v6);
  }
  else
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    *((_BYTE *)this + 12) &= 0xF0u;
  }
  return this;
}

unint64_t WebCore::VisiblePosition::localCaretRect@<X0>(unint64_t this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  WebCore::RenderBlock *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::VisiblePosition *v11;
  BOOL *v12;
  _BYTE v13[16];
  int v14;
  char v15;
  char *v16;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return this;
  }
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
    {
LABEL_4:
      v5 = (*(unsigned __int8 *)(v4 + 123) >> 2) & 1;
      goto LABEL_5;
    }
    v9 = *(_QWORD *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v9)
    {
      v4 = *(_QWORD *)(v9 + 8);
      if (v4)
      {
        while ((*(_BYTE *)(v4 + 52) & 7) != 1)
        {
          v10 = *(_QWORD *)(v4 + 32);
          if (!v10)
            goto LABEL_24;
          v5 = 0;
          v4 = *(_QWORD *)(v10 + 8);
          if (!v4)
            goto LABEL_5;
        }
        goto LABEL_4;
      }
    }
  }
LABEL_24:
  v5 = 0;
LABEL_5:
  WebCore::Position::inlineBoxAndOffset((WebCore::Position *)this, (const WebCore::Node *)(*(_BYTE *)(this + 16) != 0), v5, (uint64_t)v13);
  this = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v13);
  if ((this & 1) == 0)
  {
    if (v14 == -1)
    {
      v11 = (WebCore::VisiblePosition *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::VisiblePosition::absoluteCaretBounds(v11, v12);
    }
    v16 = &v15;
    v6 = (WebCore::RenderBlock *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v14])(&v16, v13);
    goto LABEL_7;
  }
  v6 = (WebCore::RenderBlock *)(*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
LABEL_7:
    ++*((_DWORD *)v6 + 4);
    this = WebCore::computeLocalCaretRect(v6, (WebCore::InlineIterator::BoxIterator *)v13, 0);
    *a2 = this;
    a2[1] = v7;
    a2[2] = (unint64_t)v6;
    v8 = *((_DWORD *)v6 + 4);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195B4415CLL);
    }
    *((_DWORD *)v6 + 4) = v8 - 1;
    goto LABEL_9;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_9:
  if (v14 != -1)
    this = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v14])(&v16, v13);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

unint64_t WebCore::VisiblePosition::absoluteCaretBounds(WebCore::VisiblePosition *this, const WebCore::LayoutRect *a2, WebCore::RenderBlock **a3)
{
  uint64_t v4;
  BOOL *v5;
  _QWORD v7[2];
  VisiblePosition v8;

  v8.var0.var0.var0 = 0;
  v7[0] = WebCore::localCaretRectInRendererForCaretPainting(this, &v8, a3);
  v7[1] = v4;
  return WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v8.var0.var0.var0, (WebCore::RenderBlock *)v7, a2, v5);
}

float WebCore::VisiblePosition::absoluteSelectionBoundsForLine(WebCore::VisiblePosition *this)
{
  float v1;
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  int *v19;
  float v20;
  float v21;
  float v22;
  float v23[8];
  unsigned int v24[4];
  int v25;
  __int128 v26;
  float v27;
  float v28;
  _BYTE v29[16];
  int v30;

  WebCore::Position::inlineBoxAndOffset(this, (const WebCore::Node *)*((unsigned __int8 *)this + 16), (uint64_t)&v26);
  v29[0] = 0;
  v30 = -1;
  v2 = LODWORD(v27);
  if (v27 != NAN)
  {
    ((void (*)(float *, _BYTE *, __int128 *))off_1E33AE248[LODWORD(v27)])(v23, v29, &v26);
    v30 = v2;
    if (v27 != NAN)
      ((void (*)(float *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[LODWORD(v27)])(v23, &v26);
  }
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v29) & 1) == 0)
  {
    if (v30 == -1)
      goto LABEL_33;
    v2 = (uint64_t)v23;
    *(_QWORD *)&v26 = v23;
    ((void (*)(unsigned int *__return_ptr, __int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v30])(v24, &v26, v29);
    if (v25 == -1)
      goto LABEL_33;
    *(_QWORD *)&v26 = v23;
    v2 = ((uint64_t (*)(__int128 *, unsigned int *))off_1E33AE298[v25])(&v26, v24);
    WebCore::LineSelection::logicalRect(v24);
    if (v25 == -1)
      goto LABEL_33;
    v5 = v6;
    v10 = v7;
    v11 = v8;
    v4 = v9;
    *(_QWORD *)&v26 = v23;
    if ((((uint64_t (*)(__int128 *, unsigned int *))off_1E33AE3B8[v25])(&v26, v24) & 1) != 0)
    {
      v1 = v5;
      v5 = v10;
      v3 = v4;
      v4 = v11;
    }
    else
    {
      v1 = v10;
      v3 = v11;
    }
    if (v25 == -1)
    {
LABEL_33:
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      *(_QWORD *)&v26 = v23;
      v12 = ((uint64_t (*)(__int128 *, unsigned int *))off_1E33AE298[v25])(&v26, v24);
      v13 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
      if (v13 > 5 || ((1 << v13) & 0x2A) == 0)
      {
LABEL_14:
        v23[0] = v1;
        v23[1] = v5;
        v23[2] = v4 + v1;
        v23[3] = v5;
        v23[4] = v4 + v1;
        v23[5] = v3 + v5;
        v23[6] = v1;
        v23[7] = v3 + v5;
        WebCore::RenderObject::localToContainerQuad(v2, v23, 0, 2u, &v26);
        if (v28 >= v27)
          v14 = v27;
        else
          v14 = v28;
        if (*((float *)&v26 + 2) >= *(float *)&v26)
          v15 = *(float *)&v26;
        else
          v15 = *((float *)&v26 + 2);
        if (v14 >= v15)
          v14 = v15;
        v16 = fabsf(v14);
        if (v16 != INFINITY && v16 <= 2147500000.0)
          v5 = v14;
        else
          v5 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
        if (v25 != -1)
          ((void (*)(__int128 *, unsigned int *))off_1E33AE258[v25])(&v26, v24);
        goto LABEL_30;
      }
    }
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v19 = (int *)(v12 + 160);
    else
      v19 = (int *)(v12 + 164);
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v20 = v1;
    else
      v20 = v5;
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v21 = v4;
    else
      v21 = v3;
    v22 = (float)((float)*v19 * 0.015625) - (float)(v20 + v21);
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v1 = v22;
    else
      v5 = v22;
    goto LABEL_14;
  }
LABEL_30:
  if (v30 != -1)
    ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v30])(&v26, v29);
  return v5;
}

uint64_t WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation(WebCore::VisiblePosition *this)
{
  WebCore::RenderObject *v1;
  uint64_t result;
  void *v4;
  float v5;
  float v6;
  WTF *v7;
  WTF *v8;
  WebCore::RenderObject *v9;
  int v10;
  WebCore::RenderObject *v11;
  float v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  WebCore::RenderObject *v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  int v29;
  int v30;

  WebCore::VisiblePosition::localCaretRect((unint64_t)this, &v14);
  if (v15 < 1)
    return 0;
  v1 = v17;
  if (v16 < 1 || v17 == 0)
    return 0;
  ++*((_DWORD *)v17 + 4);
  v18 = (float)(int)v14 * 0.015625;
  v19 = (float)SHIDWORD(v14) * 0.015625;
  v23 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  v28 = 1;
  v29 = 0;
  v30 = 0;
  (*(void (**)(WebCore::RenderObject *, _QWORD, float *, uint64_t, _QWORD))(*(_QWORD *)v1 + 576))(v1, 0, &v18, 4, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v18, 0);
  v5 = v18;
  v6 = v19;
  v7 = v25;
  v25 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  v8 = v24;
  v24 = 0;
  if (v8)
    WTF::fastFree(v8, v4);
  v9 = WebCore::RenderObject::containingBlock(v1);
  if (v9)
  {
    v10 = *((_DWORD *)v9 + 4) + 1;
    *((_DWORD *)v9 + 4) = v10;
    v11 = v1;
    v1 = v9;
  }
  else
  {
    v11 = 0;
    v10 = *((_DWORD *)v1 + 4);
  }
  if ((*((_BYTE *)v1 + 21) & 0x10) != 0)
    v12 = v6;
  else
    v12 = v5;
  if (!v10)
    goto LABEL_23;
  result = (int)v12;
  *((_DWORD *)v1 + 4) = v10 - 1;
  if (!v11)
    return result;
  v13 = *((_DWORD *)v11 + 4);
  if (!v13)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x195B446ECLL);
  }
  *((_DWORD *)v11 + 4) = v13 - 1;
  return result;
}

uint64_t WebCore::enclosingBlockFlowElement(WebCore *this, const WebCore::VisiblePosition *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  *(_DWORD *)(v2 + 24) += 4;
  v4 = WebCore::deprecatedEnclosingBlockFlowElement(v2, a2);
  v5 = *(_DWORD *)(v2 + 24) - 2;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v8 = *(_WORD *)(v2 + 30);
    if ((v8 & 0x400) != 0)
      goto LABEL_11;
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    v5 = *(_DWORD *)(v2 + 24);
  }
  else
  {
    *(_DWORD *)(v2 + 24) = v5;
  }
  v6 = v5 - 2;
  if (v6)
  {
    *(_DWORD *)(v2 + 24) = v6;
    return v4;
  }
  v8 = *(_WORD *)(v2 + 30);
LABEL_11:
  if ((v8 & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  return v4;
}

uint64_t WebCore::isFirstVisiblePositionInNode(WebCore *this, const WebCore::VisiblePosition *a2, const WebCore::Node *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  const WebCore::VisiblePosition *v11;
  int v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  const WebCore::VisiblePosition *v21;
  int v23;
  __int16 v25;
  _QWORD v26[3];
  WebCore::Node *v27[2];

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v6 = *(_DWORD *)(v3 + 24) + 2;
  *(_DWORD *)(v3 + 24) = v6;
  v7 = *((_BYTE *)this + 12) & 7;
  v8 = 1;
  if (v7 > 4)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v9 = v3;
  if (((1 << v7) & 0x19) == 0)
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
    {
      v8 = 1;
      goto LABEL_5;
    }
    v6 = *(_DWORD *)(v9 + 24);
  }
  v8 = 0;
  *(_DWORD *)(v9 + 24) = v6 + 2;
LABEL_5:
  if (!a2)
    goto LABEL_19;
  v10 = *((_WORD *)a2 + 14);
  if ((v10 & 0xF000) == 0x9000)
  {
    if (**(const WebCore::VisiblePosition ***)(v9 + 40) == a2 && (*(_WORD *)(v9 + 28) & 0xF000) != 0x9000)
    {
      v12 = (*(unsigned __int8 *)(v9 + 22) >> 3) & 1;
      if ((v8 & 1) != 0)
        goto LABEL_23;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if ((v10 & 4) == 0
    || !*((_QWORD *)a2 + 10)
    || ((*(unsigned __int8 *)(v9 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
  {
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v11 = (const WebCore::VisiblePosition *)v9;
  do
  {
    v11 = (const WebCore::VisiblePosition *)*((_QWORD *)v11 + 4);
    v12 = v11 != 0;
  }
  while (v11 != a2 && v11 != 0);
LABEL_20:
  if ((v8 & 1) != 0)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_23:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (!v12)
    return 0;
  WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)this, (uint64_t)v27);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)v27))
  {
    v15 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v27, (uint64_t)v26);
    v15 = v26[0];
  }
  v17 = v27[0];
  v27[0] = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v14);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  if (!v15)
    return 1;
  v18 = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 4;
  if (!a2)
  {
    v16 = 1;
    goto LABEL_61;
  }
  v19 = *((_WORD *)a2 + 14);
  if ((v19 & 0xF000) == 0x9000)
  {
    if (**(const WebCore::VisiblePosition ***)(v15 + 40) == a2 && (*(_WORD *)(v15 + 28) & 0xF000) != 0x9000)
    {
      LODWORD(v20) = (*(unsigned __int8 *)(v15 + 22) >> 3) & 1;
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if ((v19 & 4) == 0)
  {
LABEL_59:
    LODWORD(v20) = 0;
    goto LABEL_60;
  }
  v20 = *((_QWORD *)a2 + 10);
  if (v20)
  {
    if (((*(unsigned __int8 *)(v15 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
    {
      v21 = (const WebCore::VisiblePosition *)v15;
      do
      {
        v21 = (const WebCore::VisiblePosition *)*((_QWORD *)v21 + 4);
        LODWORD(v20) = v21 != 0;
      }
      while (v21 != a2 && v21 != 0);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_60:
  v16 = v20 ^ 1;
LABEL_61:
  if (v18 == -2)
  {
    v25 = *(_WORD *)(v15 + 30);
    if ((v25 & 0x400) != 0)
      goto LABEL_70;
    WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
    v18 = *(_DWORD *)(v15 + 24) - 2;
    if (*(_DWORD *)(v15 + 24) != 2)
      goto LABEL_63;
  }
  else
  {
    *(_DWORD *)(v15 + 24) = v18 + 2;
    if (v18)
    {
LABEL_63:
      *(_DWORD *)(v15 + 24) = v18;
LABEL_64:
      v23 = v18 - 2;
      if (v23)
      {
        *(_DWORD *)(v15 + 24) = v23;
        return v16;
      }
      v25 = *(_WORD *)(v15 + 30);
      goto LABEL_73;
    }
  }
  v25 = *(_WORD *)(v15 + 30);
LABEL_70:
  if ((v25 & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
    v18 = *(_DWORD *)(v15 + 24);
    goto LABEL_64;
  }
LABEL_73:
  if ((v25 & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
  return v16;
}

uint64_t WebCore::isLastVisiblePositionInNode(WebCore *this, const WebCore::VisiblePosition *a2, const WebCore::Node *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  const WebCore::VisiblePosition *v11;
  int v12;
  void *v14;
  WebCore::Node *v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v21;
  int v22;
  __int16 v24;
  WebCore::Node *v25;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v6 = *(_DWORD *)(v3 + 24) + 2;
  *(_DWORD *)(v3 + 24) = v6;
  v7 = *((_BYTE *)this + 12) & 7;
  v8 = 1;
  if (v7 > 4)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v9 = v3;
  if (((1 << v7) & 0x19) == 0)
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
    {
      v8 = 1;
      goto LABEL_5;
    }
    v6 = *(_DWORD *)(v9 + 24);
  }
  v8 = 0;
  *(_DWORD *)(v9 + 24) = v6 + 2;
LABEL_5:
  if (!a2)
    goto LABEL_19;
  v10 = *((_WORD *)a2 + 14);
  if ((v10 & 0xF000) == 0x9000)
  {
    if (**(const WebCore::VisiblePosition ***)(v9 + 40) == a2 && (*(_WORD *)(v9 + 28) & 0xF000) != 0x9000)
    {
      v12 = (*(unsigned __int8 *)(v9 + 22) >> 3) & 1;
      if ((v8 & 1) != 0)
        goto LABEL_23;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if ((v10 & 4) == 0
    || !*((_QWORD *)a2 + 10)
    || ((*(unsigned __int8 *)(v9 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
  {
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v11 = (const WebCore::VisiblePosition *)v9;
  do
  {
    v11 = (const WebCore::VisiblePosition *)*((_QWORD *)v11 + 4);
    v12 = v11 != 0;
  }
  while (v11 != a2 && v11 != 0);
LABEL_20:
  if ((v8 & 1) != 0)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_23:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (!v12)
    return 0;
  WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, (uint64_t)&v25);
  v15 = v25;
  if (!v25)
    return 1;
  v16 = *((_DWORD *)v25 + 6);
  *((_DWORD *)v25 + 6) = v16 + 4;
  if (!a2)
  {
    v21 = 1;
    goto LABEL_53;
  }
  v17 = *((_WORD *)a2 + 14);
  if ((v17 & 0xF000) == 0x9000)
  {
    if (**((const WebCore::VisiblePosition ***)v15 + 5) == a2 && (*((_WORD *)v15 + 14) & 0xF000) != 0x9000)
    {
      LODWORD(v18) = (*((unsigned __int8 *)v15 + 22) >> 3) & 1;
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if ((v17 & 4) == 0)
  {
LABEL_51:
    LODWORD(v18) = 0;
    goto LABEL_52;
  }
  v18 = *((_QWORD *)a2 + 10);
  if (v18)
  {
    if (((*((unsigned __int8 *)v15 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
    {
      v19 = v15;
      do
      {
        v19 = (WebCore::Node *)*((_QWORD *)v19 + 4);
        LODWORD(v18) = v19 != 0;
      }
      while (v19 != a2 && v19 != 0);
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_52:
  v21 = v18 ^ 1;
LABEL_53:
  if (v16 == -2)
  {
    v24 = *((_WORD *)v15 + 15);
    if ((v24 & 0x400) != 0)
      goto LABEL_62;
    WebCore::Node::removedLastRef(v15, v14);
    v16 = *((_DWORD *)v15 + 6) - 2;
    if (*((_DWORD *)v15 + 6) != 2)
      goto LABEL_55;
  }
  else
  {
    *((_DWORD *)v15 + 6) = v16 + 2;
    if (v16)
    {
LABEL_55:
      *((_DWORD *)v15 + 6) = v16;
LABEL_56:
      v22 = v16 - 2;
      if (v22)
      {
        *((_DWORD *)v15 + 6) = v22;
        return v21;
      }
      v24 = *((_WORD *)v15 + 15);
      goto LABEL_65;
    }
  }
  v24 = *((_WORD *)v15 + 15);
LABEL_62:
  if ((v24 & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v15, v14);
    v16 = *((_DWORD *)v15 + 6);
    goto LABEL_56;
  }
LABEL_65:
  if ((v24 & 0x400) == 0)
    WebCore::Node::removedLastRef(v15, v14);
  return v21;
}

BOOL WebCore::areVisiblePositionsInSameTreeScope(WebCore *this, const WebCore::VisiblePosition *a2, const WebCore::VisiblePosition *a3)
{
  int v5;
  int v6;
  int *v7;
  _BOOL8 v8;
  int v9;
  int v10;
  __int16 v12;
  __int16 v13;

  if (this)
  {
    v5 = *((_DWORD *)this + 6) + 4;
    *((_DWORD *)this + 6) = v5;
    if (!a2)
    {
      v8 = 0;
      goto LABEL_10;
    }
    v7 = (int *)((char *)a2 + 24);
    v6 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v6 + 4;
    v8 = ((*((unsigned __int8 *)this + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0
      && *((_QWORD *)this + 5) == *((_QWORD *)a2 + 5);
  }
  else
  {
    v8 = 0;
    if (!a2)
      return v8;
    v7 = (int *)((char *)a2 + 24);
    v6 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v6 + 4;
  }
  if (v6 == -2)
  {
    v12 = *((_WORD *)a2 + 15);
    if ((v12 & 0x400) != 0)
      goto LABEL_18;
    WebCore::Node::removedLastRef(a2, a2);
    v6 = *((_DWORD *)a2 + 6) - 2;
    if (*((_DWORD *)a2 + 6) != 2)
      goto LABEL_7;
LABEL_17:
    v12 = *((_WORD *)a2 + 15);
LABEL_18:
    if ((v12 & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, a2);
    goto LABEL_8;
  }
  *v7 = v6 + 2;
  if (!v6)
    goto LABEL_17;
LABEL_7:
  *v7 = v6;
LABEL_8:
  if (!this)
    return v8;
  v5 = *((_DWORD *)this + 6);
LABEL_10:
  v9 = v5 - 2;
  if (v9)
  {
    *((_DWORD *)this + 6) = v9;
LABEL_12:
    v10 = v9 - 2;
    if (v10)
    {
      *((_DWORD *)this + 6) = v10;
      return v8;
    }
    v13 = *((_WORD *)this + 15);
    goto LABEL_23;
  }
  v13 = *((_WORD *)this + 15);
  if ((v13 & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this, a2);
    v9 = *((_DWORD *)this + 6);
    goto LABEL_12;
  }
LABEL_23:
  if ((v13 & 0x400) == 0)
    WebCore::Node::removedLastRef(this, a2);
  return v8;
}

uint64_t *WebCore::makeBoundaryPoint@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *result;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v6 = v3;
    v7 = *((_DWORD *)this + 2);
    v8 = *((_BYTE *)this + 12);
    result = WebCore::makeBoundaryPoint(&v6, a2);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    v6 = 0;
    v7 = *((_DWORD *)this + 2);
    v8 = *((_BYTE *)this + 12);
    return WebCore::makeBoundaryPoint(&v6, a2);
  }
  return result;
}

void *WebCore::makeSimpleRange@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(a1, (uint64_t)(a1 + 3), a2);
}

unsigned int *WebCore::makeVisiblePositionRange@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  char v14;

  if (*((_BYTE *)result + 32))
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(*(_QWORD *)result + 24) + 2;
    v5 = result[2];
    v12 = v4;
    v13 = v5;
    v14 = 0;
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v12, a2);
    *(_BYTE *)(a2 + 16) = 1;
    if (*((_BYTE *)v3 + 32))
    {
      v6 = *((_QWORD *)v3 + 2);
      *(_DWORD *)(v6 + 24) += 2;
      v7 = v3[6];
      v9 = v6;
      v10 = v7;
      v11 = 0;
      result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v9, a2 + 24);
      *(_BYTE *)(a2 + 40) = 1;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 40) = 1;
  }
  return result;
}

uint64_t WebCore::documentOrder(WebCore::Node **this, WebCore::Node **a2, const WebCore::VisiblePosition *a3)
{
  WebCore::Node *v3;
  WebCore::Node *v4;
  void *v5;
  uint64_t v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v10;
  int v11;
  char v12;
  WebCore::Node *v13;
  int v14;
  char v15;

  v3 = *this;
  if (*this)
    *((_DWORD *)v3 + 6) += 2;
  v13 = v3;
  v14 = *((_DWORD *)this + 2);
  v15 = *((_BYTE *)this + 12);
  v4 = *a2;
  if (*a2)
    *((_DWORD *)v4 + 6) += 2;
  v10 = v4;
  v11 = *((_DWORD *)a2 + 2);
  v12 = *((_BYTE *)a2 + 12);
  v6 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v13, (uint64_t)&v10);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v5);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return v6;
}

BOOL WebCore::intersects(WebCore::Node **a1, WebCore::Node **a2, const WebCore::VisiblePosition *a3)
{
  unsigned __int8 v5;
  const WebCore::VisiblePosition *v6;
  unsigned __int8 v9;

  v5 = WebCore::documentOrder(a1, a2 + 3, a3);
  if (v5 == 129 || (char)v5 > 0)
    return 0;
  v9 = WebCore::documentOrder(a2, a1 + 3, v6);
  return v9 != 129 && (char)v9 < 1;
}

BOOL WebCore::contains(WebCore::Node **a1, WebCore::Node **this, const WebCore::VisiblePosition *a3)
{
  const WebCore::VisiblePosition *v5;
  unsigned __int8 v6;

  if ((WebCore::documentOrder(this, a1, a3) & 0x80) != 0)
    return 0;
  v6 = WebCore::documentOrder(this, a1 + 3, v5);
  return v6 != 129 && (char)v6 < 1;
}

uint64_t WebCore::intersection@<X0>(WebCore::Node **a1@<X0>, WebCore::Node **a2@<X1>, const WebCore::VisiblePosition *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7;
  const WebCore::VisiblePosition *v8;
  WebCore::Node **v10;
  WebCore::Node *v11;
  uint64_t result;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  WebCore::Node **v16;
  WebCore::Node **v17;
  WebCore::Node *v18;

  v7 = WebCore::documentOrder(a1, a2, a3);
  if ((v7 & 0x80u) == 0 || v7 == 129)
    v10 = a1;
  else
    v10 = a2;
  v11 = *v10;
  if (*v10)
    *((_DWORD *)v11 + 6) += 2;
  *(_QWORD *)a4 = v11;
  *(_DWORD *)(a4 + 8) = *((_DWORD *)v10 + 2);
  *(_BYTE *)(a4 + 12) = *((_BYTE *)v10 + 12);
  *(_BYTE *)(a4 + 16) = *((_BYTE *)v10 + 16);
  result = WebCore::documentOrder(a2 + 3, a1 + 3, v8);
  v13 = result != 129;
  v14 = (result & 0x80u) != 0;
  v15 = !v13 || !v14;
  if (v13 && v14)
    v16 = a2;
  else
    v16 = a1;
  if (v15)
    v17 = a1 + 3;
  else
    v17 = a2 + 3;
  v18 = v16[3];
  if (v18)
    *((_DWORD *)v18 + 6) += 2;
  *(_QWORD *)(a4 + 24) = v18;
  *(_DWORD *)(a4 + 32) = *((_DWORD *)v17 + 2);
  *(_BYTE *)(a4 + 36) = *((_BYTE *)v17 + 12);
  *(_BYTE *)(a4 + 40) = *((_BYTE *)v17 + 16);
  return result;
}

unsigned int *WebCore::midpoint@<X0>(uint64_t a1@<X0>, const WebCore::Position *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *result;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  void *v26;
  WebCore::Node *v27;
  int v28;
  WebCore::Node *v29;
  int v30;
  int v31;
  int v32;
  WebCore::Node *v33;
  void *v34;
  WebCore::Node *v35;
  int v36;
  char v37;
  WebCore::Node *v38;
  char v39;
  WebCore::Node *v40;
  int v41;
  WebCore::Node *v42;
  int v43;
  WebCore::Node *v44;
  int v45;
  char v46;
  WebCore::Node *v47;
  int v48;

  v6 = a1 + 24;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)(v5 + 24) += 2;
  v35 = (WebCore::Node *)v5;
  v36 = *(_DWORD *)(a1 + 8);
  v37 = *(_BYTE *)(a1 + 12);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v44 = (WebCore::Node *)v7;
  v45 = *(_DWORD *)(a1 + 32);
  v46 = *(_BYTE *)(a1 + 36);
  result = (unsigned int *)WebCore::commonInclusiveAncestor((WebCore *)&v35, (const WebCore::Position *)&v44, a2);
  v10 = result;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (!v10)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    return result;
  }
  v11 = v10[6];
  v10[6] = v11 + 4;
  v12 = v10;
  if ((v10[7] & 4) == 0)
  {
    v13 = v11 + 2;
    if (v13)
    {
      v10[6] = v13;
    }
    else if ((*((_WORD *)v10 + 15) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    v12 = (unsigned int *)*((_QWORD *)v10 + 4);
    if (!v12)
      goto LABEL_91;
    v12[6] += 2;
  }
  v12[6] += 4;
  v14 = *((_WORD *)v12 + 14);
  if ((v14 & 1) != 0)
  {
    v16 = *((_QWORD *)v12 + 10);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 4);
  }
  else if ((v14 & 4) != 0 && (v15 = *((_QWORD *)v12 + 10)) != 0)
  {
    LODWORD(v16) = 0;
    do
    {
      LODWORD(v16) = v16 + 1;
      v15 = *(_QWORD *)(v15 + 56);
    }
    while (v15);
  }
  else
  {
    LODWORD(v16) = 0;
  }
  v40 = (WebCore::Node *)v12;
  v41 = 0;
  v42 = (WebCore::Node *)v12;
  v43 = v16;
  result = (unsigned int *)WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)a1, v6, (uint64_t)&v35);
  if (v39)
  {
    v17 = v40;
    *((_DWORD *)v40 + 6) += 2;
    v44 = v17;
    v45 = v41;
    v18 = v35;
    *((_DWORD *)v35 + 6) += 2;
    v47 = v18;
    v48 = v36;
    v19 = WebCore::characterCount((int *)&v44, 0);
    v21 = WebCore::characterCount((int *)&v35, 0);
    v22 = v47;
    v47 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v20);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    v23 = v44;
    v44 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v20);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    if (v39)
    {
      v24 = v38;
      v38 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v20);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
      v25 = v35;
      v35 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25, v20);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
    }
    WebCore::resolveCharacterRange(&v40, v19 + (v21 >> 1), 0, 0, &v35);
    v27 = v35;
    v28 = v36;
    v29 = v38;
    v35 = 0;
    v38 = 0;
    if (v29)
    {
      v30 = *((_DWORD *)v29 + 6) - 2;
      if (*((_DWORD *)v29 + 6) != 2)
      {
LABEL_42:
        *((_DWORD *)v29 + 6) = v30;
        goto LABEL_43;
      }
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v29, v26);
        v29 = v35;
        v35 = 0;
        if (v29)
        {
          v30 = *((_DWORD *)v29 + 6) - 2;
          if (*((_DWORD *)v29 + 6) != 2)
            goto LABEL_42;
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v34);
        }
      }
    }
LABEL_43:
    *((_DWORD *)v27 + 6) += 2;
    v35 = v27;
    v36 = v28;
    v37 = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v35, (uint64_t)a3);
    *((_BYTE *)a3 + 16) = 1;
    v31 = *((_DWORD *)v27 + 6) - 2;
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) != 0)
        goto LABEL_68;
      WebCore::Node::removedLastRef(v27, v9);
      v31 = *((_DWORD *)v27 + 6);
    }
    else
    {
      *((_DWORD *)v27 + 6) = v31;
    }
    v32 = v31 - 2;
    if (v32)
    {
      *((_DWORD *)v27 + 6) = v32;
LABEL_47:
      v33 = v42;
      v42 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, v9);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
      result = (unsigned int *)v40;
      v40 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
        }
        else
        {
          result[6] -= 2;
        }
      }
      if (v12[6] == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
      }
      else
      {
        v12[6] -= 2;
      }
      goto LABEL_55;
    }
LABEL_68:
    if ((*((_WORD *)v27 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v27, v9);
    goto LABEL_47;
  }
  __break(1u);
LABEL_91:
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 16) = 1;
LABEL_55:
  if (v10[6] == 2)
  {
    if ((*((_WORD *)v10 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
  }
  else
  {
    v10[6] -= 2;
  }
  return result;
}

WebCore::Node *WebCore::VisibleSelection::validate(uint64_t a1, int a2)
{
  _WORD *v4;
  uint64_t v5;
  unsigned __int8 v6;
  BOOL v8;
  int v9;
  const WebCore::Node *v10;
  const WebCore::VisiblePosition *v11;
  WebCore::Node *v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  _WORD *v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Node *v41;
  char v42;
  int *v43;
  uint64_t v44;
  WebCore::Node *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  WebCore::Node *result;
  int v64;
  const WebCore::VisiblePosition *v65;
  WebCore::Node *v66;
  uint64_t v67;
  WebCore::Node *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _BOOL4 v73;
  WebCore::Node *v74;
  __int16 v75;
  WebCore::Node *v76;
  uint64_t *v77;
  WebCore::Node *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  WebCore::Node *v84;
  WebCore::Node *v85;
  unsigned int v86;
  uint64_t *v87;
  const WebCore::VisiblePosition *v88;
  const WebCore::VisiblePosition *v89;
  char v90;
  WebCore::Node *v91;
  const WebCore::VisiblePosition *v92;
  const WebCore::VisiblePosition *v93;
  _BOOL4 v94;
  WebCore::Node *v95;
  const WebCore::Node *v96;
  uint64_t v97;
  char isEmptyTableCell;
  WebCore::Node *v99;
  const WebCore::Node *v100;
  WebCore *v101;
  const WebCore::VisiblePosition *v102;
  const WebCore::VisiblePosition *v103;
  WebCore::Node *v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  const WebCore::Node *v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  uint64_t v112;
  WebCore::Node *v113;
  uint64_t *v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  uint64_t *v117;
  uint64_t (*v118)();
  WebCore::Node *v119;
  uint64_t *v120;
  const WebCore::VisiblePosition *v121;
  const WebCore::VisiblePosition *v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  const WebCore::Node *v126;
  uint64_t v127;
  uint64_t v128;
  WebCore::Node *v129;
  WebCore::Node *v130;
  WebCore::Node *v131;
  WebCore::Node *v132;
  WebCore::Node *v133;
  WebCore::Node *v134;
  WebCore::Node *v135;
  char v136;
  char v137;
  WebCore::VisiblePosition *v138;
  WebCore::Node *v139;
  int v140;
  unsigned __int8 v141;
  WebCore::Node *v142;
  int v143;
  unsigned __int8 v144;
  WebCore::Node *v145;
  WebCore::Node *v146;
  int v147;
  unsigned __int8 v148;
  WebCore::Node *v149;
  int v150;
  unsigned __int8 v151;
  char v152;
  WebCore::Node *v153;
  int v154;
  unsigned __int8 v155;
  char v156;
  WebCore::Node *v157;
  int v158;
  unsigned __int8 v159;
  char v160;
  WebCore::Node *v161;
  int v162;
  unsigned __int8 v163;
  char v164;

  v4 = *(_WORD **)a1;
  v5 = *(_QWORD *)(a1 + 16);
  v138 = (WebCore::VisiblePosition *)(a1 + 16);
  if (!*(_QWORD *)a1)
  {
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
    *(_BYTE *)(a1 + 12) = *(_BYTE *)(a1 + 28);
    v4 = (_WORD *)v5;
  }
  if (!v5)
  {
    if (v4)
      *((_DWORD *)v4 + 6) += 2;
    *(_QWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 12);
  }
  v6 = WebCore::treeOrder<(WebCore::TreeType)1>(a1, (uint64_t)v138);
  v8 = v6 != 129 && (char)v6 < 1;
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xFE | v8;
  v9 = *(unsigned __int8 *)(a1 + 96);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)a1, (uint64_t)&v157);
  v160 = 1;
  if (!v9)
  {
    v129 = v157;
    if (!v157)
    {
      v12 = 0;
      goto LABEL_12;
    }
    *((_DWORD *)v157 + 6) += 2;
    v161 = v129;
    v162 = v158;
    v163 = v159;
    v164 = 0;
    if (!WebCore::inSameLine((WebCore *)&v157, (const WebCore::VisiblePosition *)&v161, v11))
      v160 = 0;
    v130 = v161;
    v161 = 0;
    if (v130)
    {
      if (*((_DWORD *)v130 + 6) == 2)
      {
        if ((*((_WORD *)v130 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v130);
      }
      else
      {
        *((_DWORD *)v130 + 6) -= 2;
      }
    }
  }
  v12 = v157;
  if (v157)
    *((_DWORD *)v157 + 6) += 2;
LABEL_12:
  LODWORD(v161) = v158;
  BYTE4(v161) = v159;
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
        v12 = v157;
      }
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  *(_DWORD *)(a1 + 40) = (_DWORD)v161;
  *(_BYTE *)(a1 + 44) = BYTE4(v161);
  v157 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v14 = *(_WORD **)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 16))
    goto LABEL_135;
  if ((*(_BYTE *)(a1 + 12) & 8) == 0 && ((v15 = *(_BYTE *)(a1 + 12) & 7, v15 == 4) || v15 == 2))
  {
    if (v14)
    {
      v16 = *((_DWORD *)v14 + 6);
      *((_DWORD *)v14 + 6) = v16 + 2;
      v17 = v14[14];
      if ((v17 & 1) != 0)
      {
        v127 = *((_QWORD *)v14 + 10);
        v19 = v127 ? *(_DWORD *)(v127 + 4) : 0;
      }
      else if ((v17 & 4) != 0 && (v18 = *((_QWORD *)v14 + 10)) != 0)
      {
        v19 = 0;
        do
        {
          ++v19;
          v18 = *(_QWORD *)(v18 + 56);
        }
        while (v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v14 + 208))(v14) ^ 1;
        v16 = *((_DWORD *)v14 + 6) - 2;
      }
      if (v16)
      {
        *((_DWORD *)v14 + 6) = v16;
      }
      else if ((v14[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
      }
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 8);
  }
  if ((*(_BYTE *)(a1 + 28) & 8) == 0 && ((v20 = *(_BYTE *)(a1 + 28) & 7, v20 != 4) ? (v21 = v20 == 2) : (v21 = 1), v21))
  {
    v22 = *(_WORD **)v138;
    if (*(_QWORD *)v138)
    {
      v23 = *((_DWORD *)v22 + 6);
      *((_DWORD *)v22 + 6) = v23 + 2;
      v24 = v22[14];
      if ((v24 & 1) != 0)
      {
        v128 = *((_QWORD *)v22 + 10);
        v26 = v128 ? *(_DWORD *)(v128 + 4) : 0;
      }
      else if ((v24 & 4) != 0 && (v25 = *((_QWORD *)v22 + 10)) != 0)
      {
        v26 = 0;
        do
        {
          ++v26;
          v25 = *(_QWORD *)(v25 + 56);
        }
        while (v25);
      }
      else
      {
        v26 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v22 + 208))(v22) ^ 1;
        v23 = *((_DWORD *)v22 + 6) - 2;
      }
      if (v23)
      {
        *((_DWORD *)v22 + 6) = v23;
      }
      else if ((v22[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v22);
      }
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = *(_DWORD *)(a1 + 24);
  }
  if (v19 != v26 || ((*(_BYTE *)(a1 + 28) ^ *(_BYTE *)(a1 + 12)) & 7) != 0)
  {
LABEL_135:
    v64 = *(unsigned __int8 *)(a1 + 96);
    WebCore::VisiblePosition::canonicalPosition(v138, (uint64_t)&v157);
    v160 = 1;
    if (!v64)
    {
      v131 = v157;
      if (!v157)
      {
        v66 = 0;
LABEL_138:
        LODWORD(v161) = v158;
        BYTE4(v161) = v159;
        v67 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v66;
        if (v67)
        {
          if (*(_DWORD *)(v67 + 24) == 2)
          {
            if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v67);
              v66 = v157;
            }
          }
          else
          {
            *(_DWORD *)(v67 + 24) -= 2;
          }
        }
        *(_DWORD *)(a1 + 56) = (_DWORD)v161;
        *(_BYTE *)(a1 + 60) = BYTE4(v161);
        v157 = 0;
        if (v66)
        {
          if (*((_DWORD *)v66 + 6) == 2)
          {
            if ((*((_WORD *)v66 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v66);
          }
          else
          {
            *((_DWORD *)v66 + 6) -= 2;
          }
        }
        goto LABEL_49;
      }
      *((_DWORD *)v157 + 6) += 2;
      v161 = v131;
      v162 = v158;
      v163 = v159;
      v164 = 0;
      if (!WebCore::inSameLine((WebCore *)&v157, (const WebCore::VisiblePosition *)&v161, v65))
        v160 = 0;
      v132 = v161;
      v161 = 0;
      if (v132)
      {
        if (*((_DWORD *)v132 + 6) == 2)
        {
          if ((*((_WORD *)v132 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v132);
        }
        else
        {
          *((_DWORD *)v132 + 6) -= 2;
        }
      }
    }
    v66 = v157;
    if (v157)
      *((_DWORD *)v157 + 6) += 2;
    goto LABEL_138;
  }
  v27 = *(_QWORD *)(a1 + 32);
  if (v27)
    *(_DWORD *)(v27 + 24) += 2;
  v28 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v27;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a1 + 44);
LABEL_49:
  v29 = *(_QWORD *)(a1 + 32);
  if ((v29 == 0) != (*(_QWORD *)(a1 + 48) == 0))
  {
    if (v29)
    {
      v80 = (uint64_t *)(a1 + 48);
      v81 = (uint64_t *)(a1 + 32);
    }
    else
    {
      v80 = (uint64_t *)(a1 + 32);
      v81 = (uint64_t *)(a1 + 48);
    }
    WebCore::Position::operator=(v80, v81);
  }
  v30 = 32;
  if ((*(_BYTE *)(a1 + 98) & 1) != 0)
  {
    v31 = a1 + 32;
  }
  else
  {
    v30 = 48;
    v31 = a1 + 48;
  }
  v32 = (uint64_t *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + v30);
  if (v33)
    *(_DWORD *)(v33 + 24) += 2;
  v34 = *v32;
  *v32 = v33;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  v35 = *(_BYTE *)(v31 + 12);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v31 + 8);
  v36 = (int *)(a1 + 72);
  *(_BYTE *)(a1 + 76) = v35;
  v37 = 48;
  if ((*(_BYTE *)(a1 + 98) & 1) != 0)
  {
    v38 = a1 + 48;
  }
  else
  {
    v37 = 32;
    v38 = a1 + 32;
  }
  v39 = a1 + 80;
  v40 = *(_QWORD *)(a1 + v37);
  if (v40)
    *(_DWORD *)(v40 + 24) += 2;
  v41 = *(WebCore::Node **)v39;
  *(_QWORD *)v39 = v40;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  v42 = *(_BYTE *)(v38 + 12);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v38 + 8);
  v43 = (int *)(a1 + 88);
  *(_BYTE *)(a1 + 92) = v42;
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
    *(_DWORD *)(v44 + 24) += 2;
  v142 = (WebCore::Node *)v44;
  v143 = *v36;
  v144 = *(_BYTE *)(a1 + 76);
  v45 = *(WebCore::Node **)v39;
  if (*(_QWORD *)v39)
    *((_DWORD *)v45 + 6) += 2;
  v139 = v45;
  v140 = *v43;
  v141 = *(_BYTE *)(a1 + 92);
  switch(a2)
  {
    case 1:
      WebCore::VisiblePosition::VisiblePosition((uint64_t)&v161, (WebCore::VisiblePosition *)(a1 + 64), *(_BYTE *)(a1 + 96));
      WebCore::VisiblePosition::VisiblePosition((uint64_t)&v157, (WebCore::VisiblePosition *)(a1 + 80), *(_BYTE *)(a1 + 96));
      v90 = WebCore::isEndOfEditableOrNonEditableContent((WebCore *)&v161, v88)
         || WebCore::isEndOfLine((WebCore *)&v161, v89)
         && !WebCore::isStartOfLine((WebCore *)&v161, v121)
         && !WebCore::isEndOfParagraph((WebCore::Node *)&v161, 1);
      WebCore::startOfWord((uint64_t)&v161, v90, (uint64_t)&v153);
      v91 = v153;
      if (v153)
        *((_DWORD *)v153 + 6) += 2;
      v149 = v91;
      v150 = v154;
      v151 = v155;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v149);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v149);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      v94 = WebCore::isEndOfEditableOrNonEditableContent((WebCore *)&v157, v92)
         || WebCore::isEndOfLine((WebCore *)&v157, v93)
         && !WebCore::isStartOfLine((WebCore *)&v157, v122)
         && !WebCore::isEndOfParagraph((WebCore::Node *)&v157, 1);
      WebCore::endOfWord((WebCore *)&v157, v94, (uint64_t)&v153);
      v95 = v153;
      if (v153)
        *((_DWORD *)v153 + 6) += 2;
      v149 = v95;
      v150 = v154;
      v151 = v155;
      v152 = v156;
      if (!WebCore::isEndOfParagraph((WebCore::Node *)&v157, 1))
        goto LABEL_254;
      v97 = *v32;
      if (*v32)
      {
        *(_DWORD *)(v97 + 24) += 2;
        isEmptyTableCell = WebCore::isEmptyTableCell(v97, v96);
        if (*(_DWORD *)(v97 + 24) == 2)
        {
          if ((*(_WORD *)(v97 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v97);
        }
        else
        {
          *(_DWORD *)(v97 + 24) -= 2;
        }
        if ((isEmptyTableCell & 1) != 0)
          goto LABEL_254;
      }
      else if ((WebCore::isEmptyTableCell(0, v96) & 1) != 0)
      {
        goto LABEL_254;
      }
      WebCore::VisiblePosition::next((unsigned __int8 *)&v153, 0, 0, (uint64_t)&v146);
      WebCore::VisiblePosition::operator=((uint64_t *)&v149, (uint64_t *)&v146);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v146);
      WebCore::isFirstPositionAfterTable(&v149, &v145);
      if (v145)
      {
        if ((*((_QWORD *)v145 + 8) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)v145 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
        {
          WebCore::VisiblePosition::next((unsigned __int8 *)&v149, 1, 0, (uint64_t)&v146);
          WebCore::VisiblePosition::operator=((uint64_t *)&v149, (uint64_t *)&v146);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v146);
        }
        else
        {
          WebCore::VisiblePosition::operator=((uint64_t *)&v149, (uint64_t *)&v153);
        }
        v133 = v145;
        v145 = 0;
        if (v133)
        {
          if (*((_DWORD *)v133 + 6) == 2)
          {
            if ((*((_WORD *)v133 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v133);
          }
          else
          {
            *((_DWORD *)v133 + 6) -= 2;
          }
        }
      }
      v99 = v149;
      if (v149)
      {
LABEL_255:
        *((_DWORD *)v99 + 6) += 2;
LABEL_256:
        v146 = v99;
        v147 = v150;
        v148 = v151;
        WebCore::Position::operator=((uint64_t *)(a1 + 80), (uint64_t *)&v146);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v146);
        if (*v32 == *(_QWORD *)v39)
        {
          v125 = WebCore::Position::deprecatedEditingOffset((WebCore::Position *)(a1 + 64), v100);
          if (v125 > (int)WebCore::Position::deprecatedEditingOffset((WebCore::Position *)(a1 + 80), v126))
            std::swap[abi:sn180100]<WebCore::Position>((uint64_t *)(a1 + 64), a1 + 80);
        }
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v149);
        goto LABEL_274;
      }
      WebCore::VisiblePosition::operator=((uint64_t *)&v149, (uint64_t *)&v153);
LABEL_254:
      v99 = v149;
      if (!v149)
        goto LABEL_256;
      goto LABEL_255;
    case 2:
    case 6:
      WebCore::VisiblePosition::VisiblePosition((uint64_t)&v157, (WebCore::VisiblePosition *)(a1 + 64), *(_BYTE *)(a1 + 96));
      WebCore::previousBoundary((uint64_t)&v161, (uint64_t)&v157, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
      v76 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v153 = v76;
      v154 = v162;
      v155 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      v77 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      WebCore::VisiblePosition::VisiblePosition((uint64_t)v77, (WebCore::VisiblePosition *)(a1 + 80), *(_BYTE *)(a1 + 96));
      WebCore::nextBoundary((uint64_t)&v161, (uint64_t)&v157, (WebCore::Node *)WebCore::endSentenceBoundary);
      goto LABEL_216;
    case 3:
      WebCore::VisiblePosition::VisiblePosition((uint64_t)&v157, (WebCore::VisiblePosition *)(a1 + 64), *(_BYTE *)(a1 + 96));
      WebCore::startOfLine((uint64_t)&v161, (WebCore::VisiblePosition *)&v157, (WebCore::Node *)1, 0);
      v116 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v153 = v116;
      v154 = v162;
      v155 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      v117 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      WebCore::VisiblePosition::VisiblePosition((uint64_t)v117, (WebCore::VisiblePosition *)(a1 + 80), *(_BYTE *)(a1 + 96));
      WebCore::endOfLine((uint64_t *)&v161, (uint64_t)&v157, 1, 0);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      if (WebCore::isEndOfParagraph((WebCore::Node *)&v161, 1))
      {
        WebCore::VisiblePosition::next((unsigned __int8 *)&v161, 0, 0, (uint64_t)&v157);
        if (v157)
          v118 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v118 = 0;
        if (v118)
          WebCore::VisiblePosition::operator=((uint64_t *)&v161, (uint64_t *)&v157);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      }
      goto LABEL_282;
    case 4:
      v101 = (WebCore *)WebCore::VisiblePosition::VisiblePosition((uint64_t)&v161, (WebCore::VisiblePosition *)(a1 + 64), *(_BYTE *)(a1 + 96));
      if (WebCore::isStartOfLine(v101, v102) && WebCore::isEndOfEditableOrNonEditableContent((WebCore *)&v161, v103))
      {
        WebCore::VisiblePosition::previous(&v161, 0, 0, (uint64_t)&v157);
        WebCore::VisiblePosition::operator=((uint64_t *)&v161, (uint64_t *)&v157);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      }
      WebCore::startOfParagraph((uint64_t)&v161, 1, &v157);
      v104 = v157;
      if (v157)
        *((_DWORD *)v157 + 6) += 2;
      v153 = v104;
      v154 = v158;
      v155 = v159;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      WebCore::VisiblePosition::VisiblePosition((uint64_t)&v153, (WebCore::VisiblePosition *)(a1 + 80), *(_BYTE *)(a1 + 96));
      WebCore::endOfParagraph((WebCore::Node *)&v153, 1, &v157);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WebCore::VisiblePosition::next((unsigned __int8 *)&v157, 0, 0, (uint64_t)&v153);
      WebCore::isFirstPositionAfterTable(&v153, &v146);
      if (v146)
      {
        if ((*((_QWORD *)v146 + 8) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)v146 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
        {
          WebCore::VisiblePosition::next((unsigned __int8 *)&v153, 1, 0, (uint64_t)&v149);
          WebCore::VisiblePosition::operator=((uint64_t *)&v153, (uint64_t *)&v149);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v149);
        }
        else
        {
          WebCore::VisiblePosition::operator=((uint64_t *)&v153, (uint64_t *)&v157);
        }
        v105 = v146;
        v146 = 0;
        if (v105)
        {
          if (*((_DWORD *)v105 + 6) == 2)
          {
            if ((*((_WORD *)v105 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v105);
          }
          else
          {
            *((_DWORD *)v105 + 6) -= 2;
          }
        }
      }
      v106 = v153;
      if (v153 || (WebCore::VisiblePosition::operator=((uint64_t *)&v153, (uint64_t *)&v157), (v106 = v153) != 0))
        *((_DWORD *)v106 + 6) += 2;
      v149 = v106;
      v150 = v154;
      v151 = v155;
      WebCore::Position::operator=((uint64_t *)(a1 + 80), (uint64_t *)&v149);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v149);
LABEL_274:
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      goto LABEL_285;
    case 7:
      WebCore::VisiblePosition::VisiblePosition((uint64_t)&v157, (WebCore::VisiblePosition *)(a1 + 64), *(_BYTE *)(a1 + 96));
      WebCore::startOfLine((uint64_t)&v161, (WebCore::VisiblePosition *)&v157, (WebCore::Node *)1, 0);
      v119 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v153 = v119;
      v154 = v162;
      v155 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      v120 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      WebCore::VisiblePosition::VisiblePosition((uint64_t)v120, (WebCore::VisiblePosition *)(a1 + 80), *(_BYTE *)(a1 + 96));
      WebCore::endOfLine((uint64_t *)&v161, (uint64_t)&v157, 1, 0);
      goto LABEL_216;
    case 8:
      v112 = WebCore::VisiblePosition::VisiblePosition((uint64_t)&v157, (WebCore::VisiblePosition *)(a1 + 64), *(_BYTE *)(a1 + 96));
      WebCore::startOfParagraph(v112, 1, &v161);
      v113 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v153 = v113;
      v154 = v162;
      v155 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      v114 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      v115 = (WebCore::Node *)WebCore::VisiblePosition::VisiblePosition((uint64_t)v114, (WebCore::VisiblePosition *)(a1 + 80), *(_BYTE *)(a1 + 96));
      WebCore::endOfParagraph(v115, 1, &v161);
LABEL_216:
      v78 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v153 = v78;
      v154 = v162;
      v155 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 80), (uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v153);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      v79 = (uint64_t *)&v157;
      goto LABEL_286;
    case 9:
      if (v44)
        v107 = *(WebCore::Node **)(*(_QWORD *)(v44 + 40) + 8);
      else
        v107 = 0;
      WebCore::startOfDocument(v107, v10, (uint64_t)&v161);
      v108 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v157 = v108;
      v158 = v162;
      v159 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v157);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      if (*(_QWORD *)v39)
        v110 = *(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)v39 + 40) + 8);
      else
        v110 = 0;
      WebCore::endOfDocument(v110, v109, (uint64_t)&v161);
LABEL_282:
      v111 = v161;
      if (v161)
        *((_DWORD *)v161 + 6) += 2;
      v157 = v111;
      v158 = v162;
      v159 = v163;
      WebCore::Position::operator=((uint64_t *)(a1 + 80), (uint64_t *)&v157);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v157);
LABEL_285:
      v79 = (uint64_t *)&v161;
LABEL_286:
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v79);
      goto LABEL_71;
    default:
LABEL_71:
      v46 = *v32;
      v47 = *(_QWORD *)v39;
      if (!*v32)
      {
        if (v47)
          *(_DWORD *)(v47 + 24) += 2;
        *v32 = v47;
        *v36 = *v43;
        *(_BYTE *)(a1 + 76) = *(_BYTE *)(a1 + 92);
        v46 = v47;
      }
      if (!v47)
      {
        if (v46)
          *(_DWORD *)(v46 + 24) += 2;
        *(_QWORD *)v39 = v46;
        *v43 = *v36;
        *(_BYTE *)(a1 + 92) = *(_BYTE *)(a1 + 76);
        v47 = v46;
      }
      if (!v46 || !v47)
        goto LABEL_80;
      *(_DWORD *)(v46 + 24) += 2;
      *(_DWORD *)(v47 + 24) += 2;
      if (*(_QWORD *)(v46 + 40) == *(_QWORD *)(v47 + 40)
        || (WebCore::isInUserAgentShadowRootOrHasEditableShadowAncestor((WebCore *)v46, v10) & 1) == 0
        && !WebCore::isInUserAgentShadowRootOrHasEditableShadowAncestor((WebCore *)v47, v84))
      {
        goto LABEL_76;
      }
      if ((*(_BYTE *)(a1 + 98) & 1) == 0)
      {
        v85 = *(WebCore::Node **)v39;
        if (*(_QWORD *)v39)
        {
          v86 = *(_BYTE *)(a1 + 92) & 7;
          if (v86 > 4)
          {
            v85 = 0;
          }
          else if (((1 << v86) & 0x19) != 0 || (v85 = (WebCore::Node *)*((_QWORD *)v85 + 4)) != 0)
          {
            v136 = 0;
            *((_DWORD *)v85 + 6) += 2;
LABEL_237:
            v134 = v85;
            WebCore::VisibleSelection::adjustPositionForStart((WebCore::VisibleSelection *)(a1 + 64), v85, (uint64_t)&v161);
            WebCore::Position::operator=((uint64_t *)(a1 + 48), (uint64_t *)&v161);
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
            if ((v136 & 1) == 0)
            {
              if (*((_DWORD *)v134 + 6) == 2)
              {
                if ((*((_WORD *)v134 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v134);
              }
              else
              {
                *((_DWORD *)v134 + 6) -= 2;
              }
            }
            v87 = (uint64_t *)(a1 + 64);
            goto LABEL_325;
          }
        }
        v136 = 1;
        goto LABEL_237;
      }
      v123 = *v32;
      if (!*v32)
        goto LABEL_386;
      v124 = *(_BYTE *)(a1 + 76) & 7;
      if (v124 > 4)
      {
        v123 = 0;
      }
      else if (((1 << v124) & 0x19) != 0 || (v123 = *(_QWORD *)(v123 + 32)) != 0)
      {
        v137 = 0;
        *(_DWORD *)(v123 + 24) += 2;
        goto LABEL_321;
      }
LABEL_386:
      v137 = 1;
LABEL_321:
      v135 = (WebCore::Node *)v123;
      WebCore::VisibleSelection::adjustPositionForEnd((WebCore::VisibleSelection *)(a1 + 80), (const WebCore::Position *)v123, (uint64_t)&v161);
      WebCore::Position::operator=((uint64_t *)(a1 + 48), (uint64_t *)&v161);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
      if ((v137 & 1) == 0)
      {
        if (*((_DWORD *)v135 + 6) == 2)
        {
          if ((*((_WORD *)v135 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v135);
        }
        else
        {
          *((_DWORD *)v135 + 6) -= 2;
        }
      }
      v87 = (uint64_t *)(a1 + 80);
LABEL_325:
      WebCore::Position::operator=(v87, (uint64_t *)(a1 + 48));
      WebCore::Position::operator=((uint64_t *)v138, (uint64_t *)(a1 + 48));
LABEL_76:
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
      if (*(_DWORD *)(v46 + 24) == 2)
      {
        if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v46);
      }
      else
      {
        *(_DWORD *)(v46 + 24) -= 2;
      }
LABEL_80:
      WebCore::VisibleSelection::adjustSelectionToAvoidCrossingEditingBoundaries(a1);
      v48 = *(_QWORD *)(a1 + 64);
      if (v48)
      {
        if (v48 == *(_QWORD *)v39)
        {
          if ((*(_BYTE *)(a1 + 76) & 8) == 0 && ((v49 = *(_BYTE *)(a1 + 76) & 7, v49 == 4) || v49 == 2))
            v50 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 64));
          else
            v50 = *v36;
          if ((*(_BYTE *)(a1 + 92) & 8) == 0 && ((v51 = *(_BYTE *)(a1 + 92) & 7, v51 == 4) || v51 == 2))
            v52 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 80));
          else
            v52 = *v43;
          if (v50 == v52 && ((*(_BYTE *)(a1 + 92) ^ *(_BYTE *)(a1 + 76)) & 7) == 0)
            goto LABEL_90;
        }
        WebCore::Position::upstream(a1 + 64, (WebCore::Node *)1, (uint64_t)&v161);
        WebCore::Position::upstream(a1 + 80, (WebCore::Node *)1, (uint64_t)&v157);
        v68 = v157;
        if (v161 == v157)
        {
          if ((v163 & 8) == 0 && ((v69 = v163 & 7, v69 == 4) || v69 == 2))
            v70 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v161);
          else
            v70 = v162;
          if ((v159 & 8) == 0 && ((v71 = v159 & 7, v71 == 4) || v71 == 2))
            v72 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v157);
          else
            v72 = v158;
          v73 = v70 == v72 && ((v159 ^ v163) & 7) == 0;
          v68 = v157;
        }
        else
        {
          v73 = 0;
        }
        v157 = 0;
        if (v68)
        {
          if (*((_DWORD *)v68 + 6) == 2)
          {
            if ((*((_WORD *)v68 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v68);
          }
          else
          {
            *((_DWORD *)v68 + 6) -= 2;
          }
        }
        v74 = v161;
        v161 = 0;
        if (v74)
        {
          if (*((_DWORD *)v74 + 6) == 2)
          {
            if ((*((_WORD *)v74 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v74);
          }
          else
          {
            *((_DWORD *)v74 + 6) -= 2;
          }
        }
        if (v73)
        {
LABEL_90:
          *(_BYTE *)(a1 + 97) = 1;
          goto LABEL_91;
        }
        v75 = 513;
      }
      else
      {
        v75 = 1;
      }
      *(_WORD *)(a1 + 96) = v75;
LABEL_91:
      v57 = *v32 == v44
         && ((*(_BYTE *)(a1 + 76) & 8) == 0 && ((v53 = *(_BYTE *)(a1 + 76) & 7, v53 == 4) || v53 == 2)
           ? (v54 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 64)))
           : (v54 = *v36),
             (v55 = v144, (v144 & 8) == 0) && ((v144 & 7) == 4 || (v144 & 7) == 2)
           ? (v56 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v142))
           : (v56 = v143),
             v54 == v56)
         && ((*(unsigned __int8 *)(a1 + 76) ^ v55) & 7) == 0;
      v62 = *(WebCore::Node **)v39 == v45
         && ((*(_BYTE *)(a1 + 92) & 8) == 0 && ((v58 = *(_BYTE *)(a1 + 92) & 7, v58 == 4) || v58 == 2)
           ? (v59 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 80)))
           : (v59 = *v43),
             (v60 = v141, (v141 & 8) == 0) && ((v141 & 7) == 4 || (v141 & 7) == 2)
           ? (v61 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v139))
           : (v61 = v140),
             v59 == v61)
         && ((*(unsigned __int8 *)(a1 + 92) ^ v60) & 7) == 0;
      if (*(_BYTE *)(a1 + 97) == 2)
      {
        WebCore::Position::downstream(a1 + 64, (WebCore::Node *)1, (uint64_t)&v161);
        WebCore::Position::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v161);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
        WebCore::Position::upstream(a1 + 80, (WebCore::Node *)1, (uint64_t)&v161);
        WebCore::Position::operator=((uint64_t *)(a1 + 80), (uint64_t *)&v161);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v161);
        WebCore::VisibleSelection::adjustSelectionToAvoidCrossingEditingBoundaries(a1);
      }
      if (!v57)
      {
        if ((*(_BYTE *)(a1 + 98) & 1) != 0)
          v82 = (uint64_t *)(a1 + 64);
        else
          v82 = (uint64_t *)(a1 + 80);
        WebCore::Position::operator=((uint64_t *)a1, v82);
        WebCore::Position::operator=((uint64_t *)(a1 + 32), (uint64_t *)a1);
      }
      if (!v62)
      {
        if ((*(_BYTE *)(a1 + 98) & 1) != 0)
          v83 = (uint64_t *)(a1 + 80);
        else
          v83 = (uint64_t *)(a1 + 64);
        WebCore::Position::operator=((uint64_t *)v138, v83);
        WebCore::Position::operator=((uint64_t *)(a1 + 48), (uint64_t *)v138);
      }
      if (v139)
      {
        if (*((_DWORD *)v139 + 6) == 2)
        {
          if ((*((_WORD *)v139 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v139);
        }
        else
        {
          *((_DWORD *)v139 + 6) -= 2;
        }
      }
      result = v142;
      if (v142)
      {
        if (*((_DWORD *)v142 + 6) == 2)
        {
          if ((*((_WORD *)v142 + 15) & 0x400) == 0)
            return (WebCore::Node *)WebCore::Node::removedLastRef(v142);
        }
        else
        {
          *((_DWORD *)v142 + 6) -= 2;
        }
      }
      return result;
  }
}

WebCore::VisibleSelection *WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this, const WebCore::VisiblePosition *a2, int a3)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  void *v8;
  int v10;
  char v11;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 2;
    v10 = *((_DWORD *)a2 + 2);
    v11 = *((_BYTE *)a2 + 12);
    v6 = *((_BYTE *)a2 + 16);
    *(_DWORD *)(v4 + 24) = v5 + 4;
    *((_DWORD *)this + 2) = v10;
    *((_BYTE *)this + 12) = v11;
    *(_DWORD *)(v4 + 24) += 2;
  }
  else
  {
    v10 = *((_DWORD *)a2 + 2);
    v11 = *((_BYTE *)a2 + 12);
    v6 = *((_BYTE *)a2 + 16);
    *((_DWORD *)this + 2) = v10;
    *((_BYTE *)this + 12) = v11;
  }
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 2) = v4;
  *((_DWORD *)this + 6) = v10;
  *((_BYTE *)this + 28) = v11;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) &= 0xF0u;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 60) &= 0xF0u;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) &= 0xF0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) &= 0xF0u;
  *((_BYTE *)this + 96) = v6;
  *((_BYTE *)this + 97) = 0;
  if (a3)
    v7 = 2;
  else
    v7 = 0;
  *((_BYTE *)this + 98) = *((_BYTE *)this + 98) & 0xFD | v7;
  WebCore::VisibleSelection::validate((uint64_t)this, 0);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return this;
}

{
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v4 + 24) += 2;
  v6 = v4;
  v7 = *((_DWORD *)a2 + 2);
  v8 = *((_BYTE *)a2 + 12);
  WebCore::VisibleSelection::VisibleSelection((uint64_t)this, &v6, &v6, *((_BYTE *)a2 + 16), a3);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v6);
  return this;
}

WebCore::VisibleSelection *WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this, const WebCore::VisiblePosition *a2, const WebCore::VisiblePosition *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  void *v9;
  int v11;
  char v12;
  int v13;
  char v14;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v5 + 24) += 2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = *((_BYTE *)a2 + 12);
  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v6 + 24) += 2;
  v11 = *((_DWORD *)a3 + 2);
  v12 = *((_BYTE *)a3 + 12);
  v7 = *((_BYTE *)a2 + 16);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)this = v5;
  *((_DWORD *)this + 2) = v13;
  *((_BYTE *)this + 12) = v14;
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *((_QWORD *)this + 2) = v6;
  *((_DWORD *)this + 6) = v11;
  *((_BYTE *)this + 28) = v12;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) &= 0xF0u;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 60) &= 0xF0u;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) &= 0xF0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) &= 0xF0u;
  *((_BYTE *)this + 96) = v7;
  *((_BYTE *)this + 97) = 0;
  if (a4)
    v8 = 2;
  else
    v8 = 0;
  *((_BYTE *)this + 98) = *((_BYTE *)this + 98) & 0xFD | v8;
  WebCore::VisibleSelection::validate((uint64_t)this, 0);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v10;
  char v11;
  int v12;
  char v13;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v5 + 24) += 2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = *((_BYTE *)a2 + 12);
  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v6 + 24) += 2;
  v10 = *((_DWORD *)a3 + 2);
  v11 = *((_BYTE *)a3 + 12);
  v7 = *((_BYTE *)a2 + 16);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)this = v5;
  *((_DWORD *)this + 2) = v12;
  *((_BYTE *)this + 12) = v13;
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *((_QWORD *)this + 2) = v6;
  *((_DWORD *)this + 6) = v10;
  *((_BYTE *)this + 28) = v11;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) &= 0xF0u;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 60) &= 0xF0u;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) &= 0xF0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) &= 0xF0u;
  *((_BYTE *)this + 96) = v7;
  *((_BYTE *)this + 97) = 0;
  if (a4)
    v8 = 2;
  else
    v8 = 0;
  *((_BYTE *)this + 98) = *((_BYTE *)this + 98) & 0xFD | v8;
  WebCore::VisibleSelection::validate((uint64_t)this, 0);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::VisibleSelection::VisibleSelection(uint64_t a1, uint64_t a2, char a3, int a4)
{
  WebCore::Node *v8;
  int v9;
  char v10;
  WebCore::Node *v11;
  int v12;
  char v13;
  char v14;
  void *v15;

  v8 = *(WebCore::Node **)a2;
  *((_DWORD *)v8 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v9 = *(_DWORD *)(a2 + 8);
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v8 + 208))(v8) & 1) != 0)
  {
    v10 = 8;
  }
  else if (v9)
  {
    v10 = 10;
  }
  else
  {
    v10 = 9;
  }
  v11 = *(WebCore::Node **)(a2 + 16);
  *((_DWORD *)v11 + 6) += 2;
  v12 = *(_DWORD *)(a2 + 24);
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v11 + 208))(v11) & 1) != 0)
  {
    v13 = 8;
  }
  else if (v12)
  {
    v13 = 10;
  }
  else
  {
    v13 = 9;
  }
  *((_DWORD *)v8 + 6) += 2;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 12) = v10;
  *((_DWORD *)v11 + 6) += 2;
  *(_QWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 28) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) &= 0xF0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) &= 0xF0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) &= 0xF0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) &= 0xF0u;
  *(_BYTE *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 97) = 0;
  if (a4)
    v14 = 2;
  else
    v14 = 0;
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xFD | v14;
  WebCore::VisibleSelection::validate(a1, 0);
  if (*((_DWORD *)v11 + 6) == 2)
  {
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v11, v15);
  }
  else
  {
    *((_DWORD *)v11 + 6) -= 2;
  }
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v8, v15);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return a1;
}

{
  WebCore::Node *v8;
  int v9;
  char v10;
  WebCore::Node *v11;
  int v12;
  char v13;
  char v14;

  v8 = *(WebCore::Node **)a2;
  *((_DWORD *)v8 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v9 = *(_DWORD *)(a2 + 8);
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v8 + 208))(v8) & 1) != 0)
  {
    v10 = 8;
  }
  else if (v9)
  {
    v10 = 10;
  }
  else
  {
    v10 = 9;
  }
  v11 = *(WebCore::Node **)(a2 + 16);
  *((_DWORD *)v11 + 6) += 2;
  v12 = *(_DWORD *)(a2 + 24);
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v11 + 208))(v11) & 1) != 0)
  {
    v13 = 8;
  }
  else if (v12)
  {
    v13 = 10;
  }
  else
  {
    v13 = 9;
  }
  *((_DWORD *)v8 + 6) += 2;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 12) = v10;
  *((_DWORD *)v11 + 6) += 2;
  *(_QWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 28) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) &= 0xF0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) &= 0xF0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) &= 0xF0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) &= 0xF0u;
  *(_BYTE *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 97) = 0;
  if (a4)
    v14 = 2;
  else
    v14 = 0;
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xFD | v14;
  WebCore::VisibleSelection::validate(a1, 0);
  if (*((_DWORD *)v11 + 6) == 2)
  {
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v11);
  }
  else
  {
    *((_DWORD *)v11 + 6) -= 2;
  }
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v8);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return a1;
}

unsigned int *WebCore::VisibleSelection::selectionFromContentsOfNode@<X0>(WebCore::VisibleSelection *this@<X0>, WebCore::VisibleSelection *a2@<X8>)
{
  char v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  char v9;
  void *v10;
  unsigned int *result;
  WebCore::VisibleSelection *v12;
  int v13;
  char v14;
  WebCore::Node *v15[2];
  char v16;
  WebCore::VisibleSelection *v17;
  int v18;
  char v19;
  WebCore::Node *v20[2];
  char v21;

  v5 = *((_WORD *)this + 14);
  *((_DWORD *)this + 6) += 2;
  v17 = this;
  v18 = 0;
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = 3;
  v19 = v6;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v17, (uint64_t)v20);
  v21 = 1;
  v7 = *((_WORD *)this + 14);
  *((_DWORD *)this + 6) += 2;
  if ((v7 & 1) != 0)
  {
    v8 = *((_QWORD *)this + 10);
    v9 = 0;
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 4);
  }
  else
  {
    LODWORD(v8) = 0;
    v9 = 4;
  }
  v12 = this;
  v13 = v8;
  v14 = v9;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v12, (uint64_t)v15);
  v16 = 1;
  WebCore::VisibleSelection::VisibleSelection(a2, (const WebCore::VisiblePosition *)v20, (const WebCore::VisiblePosition *)v15, 0);
  if (v15[0])
  {
    if (*((_DWORD *)v15[0] + 6) == 2)
    {
      if ((*((_WORD *)v15[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15[0], v10);
    }
    else
    {
      *((_DWORD *)v15[0] + 6) -= 2;
    }
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, v10);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  result = (unsigned int *)v20[0];
  if (v20[0])
  {
    if (*((_DWORD *)v20[0] + 6) == 2)
    {
      if ((*((_WORD *)v20[0] + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v20[0], v10);
    }
    else
    {
      *((_DWORD *)v20[0] + 6) -= 2;
    }
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(this, v10);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

BOOL WebCore::VisibleSelection::isOrphan(WebCore::VisibleSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 4);
  result = 1;
  if (!v1 || (*(_BYTE *)(v1 + 22) & 8) != 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (!v2 || (*(_BYTE *)(v2 + 22) & 8) != 0)
    {
      v3 = *((_QWORD *)this + 8);
      if (!v3 || (*(_BYTE *)(v3 + 22) & 8) != 0)
      {
        v4 = *((_QWORD *)this + 10);
        if (!v4 || (*(_BYTE *)(v4 + 22) & 8) != 0)
        {
          v5 = *(_QWORD *)this;
          if (!*(_QWORD *)this
            || (*(_BYTE *)(v5 + 22) & 8) != 0
            || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 680) + 680) & 0x800000000000000) == 0)
          {
            v6 = *((_QWORD *)this + 2);
            if (!v6
              || (*(_BYTE *)(v6 + 22) & 8) != 0
              || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 680) & 0x800000000000000) == 0)
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::swap[abi:sn180100]<WebCore::Position>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  char v11;

  v4 = *a1;
  *a1 = 0;
  v5 = a1 + 1;
  v10 = *((_DWORD *)a1 + 2);
  v11 = *((_BYTE *)a1 + 12);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *(_DWORD *)(a2 + 8);
  *((_BYTE *)v5 + 4) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)v5 = v8;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v4;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  *(_DWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 12) = v11;
  return result;
}

BOOL WebCore::VisibleSelection::expandUsingGranularity(uint64_t a1, int a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 97);
  if (*(_BYTE *)(a1 + 97))
    WebCore::VisibleSelection::validate(a1, a2);
  return v2 != 0;
}

BOOL WebCore::VisibleSelection::isAll(uint64_t a1, int a2)
{
  uint64_t v4;
  __int16 v5;
  _BOOL8 v6;
  void *v7;
  WebCore::Node *v8;
  int v9;
  WebCore::Node *v10;
  WebCore::Node *v12[3];
  WebCore::Node *v13;
  WebCore::Node *v14[3];
  WebCore::Node *v15;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4 || (v5 = *(_WORD *)(v4 + 28), (v5 & 0x80) != 0))
  {
LABEL_7:
    WebCore::VisibleSelection::visibleStart((WebCore::VisibleSelection *)v14, (unsigned __int8 *)a1);
    WebCore::VisiblePosition::previous(v14, a2, 0, (uint64_t)&v15);
    v8 = v15;
    if (v15)
    {
      v9 = *((_DWORD *)v15 + 6) - 2;
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v7);
        v6 = 0;
        goto LABEL_16;
      }
      v6 = 0;
    }
    else
    {
      WebCore::VisibleSelection::visibleEnd((WebCore::VisibleSelection *)v12, (unsigned __int8 *)a1);
      WebCore::VisiblePosition::next((unsigned __int8 *)v12, a2, 0, (uint64_t)&v13);
      v6 = v13 == 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, v7);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v8 = v12[0];
      v12[0] = 0;
      if (!v8)
        goto LABEL_16;
      v9 = *((_DWORD *)v8 + 6) - 2;
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v7);
        goto LABEL_16;
      }
    }
    *((_DWORD *)v8 + 6) = v9;
LABEL_16:
    v10 = v14[0];
    v14[0] = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v7);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    return v6;
  }
  do
  {
    if ((v5 & 0x80) != 0)
      break;
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_7;
    v5 = *(_WORD *)(v4 + 28);
  }
  while ((v5 & 0x80) == 0);
  return 0;
}

void WebCore::VisibleSelection::appendTrailingWhitespace(WebCore::VisibleSelection *this, WebCore::Node *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  char v21;
  WebCore::Node *v22;
  int v23;
  char v24;
  uint64_t v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  WebCore::Node *v36;
  int v37;
  WebCore::Node *v38;
  int v39;
  char v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v3 = (uint64_t *)((char *)this + 80);
  v4 = *((_QWORD *)this + 10);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = WebCore::deprecatedEnclosingBlockFlowElement(v4, a2);
  v7 = v5;
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (!v7)
    return;
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_WORD *)(v7 + 28);
  if ((v8 & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 80);
    if (!v11)
    {
LABEL_12:
      v10 = 0;
      goto LABEL_18;
    }
    v10 = *(_DWORD *)(v11 + 4);
  }
  else
  {
    if ((v8 & 4) == 0)
      goto LABEL_12;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9)
      goto LABEL_12;
    v10 = 0;
    do
    {
      ++v10;
      v9 = *(_QWORD *)(v9 + 56);
    }
    while (v9);
  }
LABEL_18:
  WebCore::makeBoundaryPoint(v3, (uint64_t)&v41);
  if (v43)
  {
    v36 = v41;
    v37 = v42;
    v38 = (WebCore::Node *)v7;
    v39 = v10;
    v40 = 1;
    WebCore::TextIterator::TextIterator((uint64_t)&v41, &v36, 1);
    v47 = 0;
    v48 = 1;
    while (v44 && !(_DWORD)v46)
      WebCore::TextIterator::advance((WebCore::TextIterator *)&v41, v12);
    if (v40)
    {
      v13 = v38;
      v38 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, v12);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v14 = v36;
      v36 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v12);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
    }
    if (v44)
    {
      v15 = HIDWORD(v47);
      while (1)
      {
        v16 = v46;
        v17 = v46 - v15;
        if (v46 <= v15)
          break;
        v18 = v45;
        if (v15)
        {
          v34 = v46 - (unint64_t)v15;
          if ((v46 & 0xFF00000000) != 0)
          {
            if (v34 < v17)
              goto LABEL_118;
            if ((_DWORD)v46 == v15)
              break;
            v18 = &v45[v15];
            v16 = v17 | 0x100000000;
          }
          else
          {
            if (v34 < v17)
              goto LABEL_118;
            if ((_DWORD)v46 == v15)
              break;
            v18 = &v45[2 * v15];
            v16 = v46 - v15;
          }
        }
        else if (!(_DWORD)v46)
        {
          break;
        }
        if ((v16 & 0xFF00000000) != 0)
        {
          if (!(_DWORD)v16)
            goto LABEL_118;
          v19 = *v18;
        }
        else
        {
          if (!(_DWORD)v16)
            goto LABEL_118;
          v19 = *(unsigned __int16 *)v18;
          if (v19 > 0xFF)
          {
            v20 = MEMORY[0x19AEA858C](*(unsigned __int16 *)v18) == 9;
            goto LABEL_43;
          }
        }
        v20 = (v19 < 0x21u) & (0x100003600uLL >> v19);
        if (v19 == 11)
          v20 = 1;
LABEL_43:
        v21 = v20 ^ 1;
        if (v19 == 160)
          v21 = 0;
        if (v19 == 10 || (v21 & 1) != 0)
          break;
        WebCore::CharacterIterator::range((int32x2_t *)&v41, (int32x2_t *)&v36);
        v22 = v38;
        *((_DWORD *)v38 + 6) += 2;
        v23 = v39;
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v22 + 208))(v22) & 1) != 0)
        {
          v24 = 8;
        }
        else if (v23)
        {
          v24 = 10;
        }
        else
        {
          v24 = 9;
        }
        v25 = *v3;
        *v3 = (uint64_t)v22;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v12);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        *((_DWORD *)this + 22) = v23;
        *((_BYTE *)this + 92) = v24;
        v26 = v38;
        v38 = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 6) == 2)
          {
            if ((*((_WORD *)v26 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v26, v12);
          }
          else
          {
            *((_DWORD *)v26 + 6) -= 2;
          }
        }
        v27 = v36;
        v36 = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 6) == 2)
          {
            if ((*((_WORD *)v27 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v27, v12);
          }
          else
          {
            *((_DWORD *)v27 + 6) -= 2;
          }
        }
        v28 = *((_QWORD *)this + 10);
        if ((*((_BYTE *)this + 98) & 1) != 0)
        {
          if (v28)
            *(_DWORD *)(v28 + 24) += 2;
          v31 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v28;
          v30 = (char *)this + 24;
          if (!v31)
            goto LABEL_71;
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            v30 = (char *)this + 24;
            if ((*(_WORD *)(v31 + 30) & 0x400) != 0)
              goto LABEL_71;
            WebCore::Node::removedLastRef((WebCore::Node *)v31, v12);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
          v30 = (char *)this + 24;
        }
        else
        {
          if (v28)
            *(_DWORD *)(v28 + 24) += 2;
          v29 = *(_QWORD *)this;
          *(_QWORD *)this = v28;
          v30 = (char *)this + 8;
          if (!v29)
            goto LABEL_71;
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            v30 = (char *)this + 8;
            if ((*(_WORD *)(v29 + 30) & 0x400) != 0)
              goto LABEL_71;
            WebCore::Node::removedLastRef((WebCore::Node *)v29, v12);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
          v30 = (char *)this + 8;
        }
LABEL_71:
        *(_DWORD *)v30 = *((_DWORD *)this + 22);
        v30[4] = *((_BYTE *)this + 92);
        v48 = 0;
        v32 = v46 - HIDWORD(v47);
        if ((int)v46 - HIDWORD(v47) < 2)
        {
          LODWORD(v47) = v47 + v32;
          WebCore::TextIterator::advance((WebCore::TextIterator *)&v41, v12);
          v33 = v44;
          if (!v44)
          {
LABEL_104:
            v48 = 1;
            HIDWORD(v47) = 0;
            break;
          }
          v15 = 1 - v32;
          while (1)
          {
            if (!(_DWORD)v46)
            {
              v48 = 1;
              goto LABEL_80;
            }
            if ((int)v15 < (int)v46)
              break;
            LODWORD(v47) = v47 + v46;
            v15 -= v46;
LABEL_80:
            WebCore::TextIterator::advance((WebCore::TextIterator *)&v41, v12);
            v33 = v44;
            if (!v44)
              goto LABEL_104;
          }
          HIDWORD(v47) = v15;
          LODWORD(v47) = v47 + v15;
          if (!v33)
            break;
        }
        else
        {
          v15 = ++HIDWORD(v47);
          LODWORD(v47) = v47 + 1;
          if (!v44)
            break;
        }
      }
    }
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v41, v12);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v35);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    if (*(_DWORD *)(v7 + 24) == 2)
      goto LABEL_119;
    *(_DWORD *)(v7 + 24) -= 2;
    do
    {
LABEL_118:
      __break(1u);
LABEL_119:
      ;
    }
    while ((*(_WORD *)(v7 + 30) & 0x400) != 0);
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v12);
    __break(1u);
  }
}

BOOL WebCore::isEndOfEditableOrNonEditableContent(WebCore *this, const WebCore::VisiblePosition *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  WebCore::Node *v5;

  if (*(_QWORD *)this)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, (uint64_t)&v5);
  v3 = v5 == 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v3;
}

BOOL WebCore::isEndOfLine(WebCore *this, const WebCore::VisiblePosition *a2)
{
  uint64_t (*v2)();
  _BOOL8 v4;
  WebCore::Node *v5;
  WebCore::Node *v7[3];

  if (*(_QWORD *)this)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::endOfLine((uint64_t *)v7, (uint64_t)this, 1, 0);
  v4 = WebCore::operator==((uint64_t *)this, (uint64_t *)v7);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v4;
}

BOOL WebCore::isStartOfLine(WebCore *this, const WebCore::VisiblePosition *a2)
{
  uint64_t (*v2)();
  _BOOL8 v4;
  WebCore::Node *v5;
  WebCore::Node *v7[3];

  if (*(_QWORD *)this)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::startOfLine((uint64_t)v7, this, (WebCore::Node *)1, 0);
  v4 = WebCore::operator==((uint64_t *)this, (uint64_t *)v7);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v4;
}

WebCore::Node *WebCore::endOfWord@<X0>(WebCore *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::Node *v5;
  uint64_t (*v6)();
  _DWORD *v7;
  _BOOL4 v8;
  WebCore::Node *result;
  WebCore::Node *v10;
  _BOOL4 v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int v14;
  char v15;
  WebCore::Node *v16;
  int v17;
  char v18;
  char v19;
  WebCore::Node *v20[2];
  WebCore::Node *v21;
  int v22;
  char v23;

  v5 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
  {
    *((_DWORD *)v5 + 6) += 2;
    v6 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  }
  else
  {
    v6 = 0;
  }
  v16 = v5;
  v7 = (_DWORD *)((char *)this + 8);
  v17 = *((_DWORD *)this + 2);
  v18 = *((_BYTE *)this + 12);
  v19 = *((_BYTE *)this + 16);
  if (!a2)
  {
    if (!v6)
      goto LABEL_27;
    WebCore::endOfParagraph(this, 1, &v21);
    v11 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v21);
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (!v11)
      goto LABEL_27;
LABEL_16:
    v12 = *(WebCore::Node **)this;
    if (*(_QWORD *)this)
      *((_DWORD *)v12 + 6) += 2;
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 8) = *v7;
    *(_BYTE *)(a3 + 12) = *((_BYTE *)this + 12);
    *(_BYTE *)(a3 + 16) = *((_BYTE *)this + 16);
    goto LABEL_28;
  }
  if (v6)
  {
    WebCore::startOfParagraph((uint64_t)this, 1, &v21);
    v8 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v21);
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (v8)
      goto LABEL_16;
  }
  WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)this, (uint64_t)v20);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)v20))
  {
    v10 = 0;
    v15 = 0;
    v14 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v20, (uint64_t)&v21);
    v10 = v21;
    v14 = v22;
    v15 = v23;
  }
  result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v16 = v10;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  v17 = v14;
  v18 = v15;
  v19 = 1;
  if (v10)
  {
LABEL_27:
    result = WebCore::nextBoundary(a3, (uint64_t)&v16, (WebCore::Node *)WebCore::endWordBoundary);
    v5 = v16;
LABEL_28:
    v16 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(v5);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    return result;
  }
  v13 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v13 + 6) += 2;
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = *v7;
  *(_BYTE *)(a3 + 12) = *((_BYTE *)this + 12);
  *(_BYTE *)(a3 + 16) = *((_BYTE *)this + 16);
  return result;
}

uint64_t *WebCore::VisiblePosition::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = v6;
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = v6;
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

WTF *WebCore::startOfSentence@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::previousBoundary(a2, (uint64_t)this, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
}

WTF *WebCore::endOfSentence@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::nextBoundary(a2, (uint64_t)this, (WebCore::Node *)WebCore::endSentenceBoundary);
}

WebCore::Node *WebCore::startOfLine@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::startOfLine(a2, this, (WebCore::Node *)1, 0);
}

WebCore::Node *WebCore::endOfLine@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  return WebCore::endOfLine(a2, (uint64_t)this, 1, 0);
}

WebCore::Node *WebCore::startOfParagraph@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  char v8;
  WebCore::Node *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  int v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  int v17;
  WebCore::Node *v18;
  WebCore::Node *result;
  uint64_t v20;
  WebCore::Node *v21;
  uint64_t v22;
  WebCore::Node *v23;
  int v24;
  int v25;
  WebCore::Node *v26;
  uint64_t v27;
  WebCore::Node *v28;
  uint64_t v29;
  int v30;
  char v31;
  WebCore::Node *v32;
  int v33;
  char v34;

  v4 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v32 = 0;
    v33 = *(_DWORD *)(a1 + 8);
    v34 = *(_BYTE *)(a1 + 12);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    goto LABEL_41;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  v32 = (WebCore::Node *)v4;
  v33 = *(_DWORD *)(a1 + 8);
  v34 = *(_BYTE *)(a1 + 12);
  *(_DWORD *)(v4 + 24) = v6 + 4;
  v7 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
    {
      v14 = *(unsigned __int8 *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
      if (v14 == 35
        || v14 == 63
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 152))(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) & 1) != 0
        || (*(_BYTE *)(v7 + 45) & 1) == 0
        && (v20 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)) != 0
        && (*(_WORD *)(v20 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24))
      {
        *(_DWORD *)(v4 + 24) += 2;
        v29 = v4;
        v30 = 0;
        v31 = 1;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v29, (uint64_t)a3);
        *((_BYTE *)a3 + 16) = 1;
        if (*(_DWORD *)(v4 + 24) != 2)
        {
          *(_DWORD *)(v4 + 24) -= 2;
          goto LABEL_39;
        }
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        {
          v21 = (WebCore::Node *)v4;
          goto LABEL_68;
        }
        goto LABEL_39;
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v27 = v4;
  WebCore::enclosingBlock(&v27, (WebCore::Node *)1, &v28);
  v27 = 0;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  WebCore::highestEditableRoot((uint64_t)&v32, 0, (uint64_t *)&v26);
  v8 = v34;
  if ((v34 & 8) == 0 && ((v34 & 7) == 4 || (v34 & 7) == 2))
  {
    v9 = v32;
    if (v32)
    {
      v10 = *((_DWORD *)v32 + 6);
      *((_DWORD *)v32 + 6) = v10 + 2;
      v11 = *((_WORD *)v9 + 14);
      if ((v11 & 1) != 0)
      {
        v22 = *((_QWORD *)v9 + 10);
        if (v22)
          v13 = *(_DWORD *)(v22 + 4);
        else
          v13 = 0;
      }
      else if ((v11 & 4) != 0 && (v12 = *((_QWORD *)v9 + 10)) != 0)
      {
        v13 = 0;
        do
        {
          ++v13;
          v12 = *(_QWORD *)(v12 + 56);
        }
        while (v12);
      }
      else
      {
        v13 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9) ^ 1;
        v10 = *((_DWORD *)v9 + 6) - 2;
      }
      if (v10)
      {
        *((_DWORD *)v9 + 6) = v10;
      }
      else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v9);
      }
    }
    else
    {
      v13 = 0;
    }
    v8 = v34;
  }
  else
  {
    v13 = v33;
  }
  v24 = v8 & 7;
  v25 = v13;
  v15 = v28;
  WebCore::findStartOfParagraph(v4, (uint64_t)v26, (uint64_t)v28, &v25, &v24, a2, (uint64_t *)&v23);
  v16 = v23;
  if (!v23)
  {
LABEL_27:
    v29 = (uint64_t)v16;
    if (v24)
    {
      v30 = 0;
      v31 = v24 & 7;
    }
    else
    {
      v30 = v25;
      v31 = 0;
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v29, (uint64_t)a3);
    *((_BYTE *)a3 + 16) = 1;
    if (!v16)
      goto LABEL_33;
    goto LABEL_31;
  }
  v17 = *((_DWORD *)v23 + 6);
  *((_DWORD *)v23 + 6) = v17 + 2;
  if ((*((_WORD *)v16 + 14) & 2) == 0)
  {
    if (v17)
    {
      *((_DWORD *)v16 + 6) = v17;
    }
    else if ((*((_WORD *)v16 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v16);
    }
    goto LABEL_27;
  }
  v29 = (uint64_t)v16;
  v30 = v25;
  v31 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v29, (uint64_t)a3);
  *((_BYTE *)a3 + 16) = 1;
  if (*((_DWORD *)v16 + 6) == 2)
  {
    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v16);
  }
  else
  {
    *((_DWORD *)v16 + 6) -= 2;
  }
LABEL_31:
  if (*((_DWORD *)v16 + 6) == 2)
  {
    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v16);
  }
  else
  {
    *((_DWORD *)v16 + 6) -= 2;
  }
LABEL_33:
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if (!v15)
    goto LABEL_39;
  if (*((_DWORD *)v15 + 6) != 2)
  {
    *((_DWORD *)v15 + 6) -= 2;
    goto LABEL_39;
  }
  if ((*((_WORD *)v15 + 15) & 0x400) == 0)
  {
    v21 = v15;
LABEL_68:
    WebCore::Node::removedLastRef(v21);
  }
LABEL_39:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
LABEL_41:
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::startOfDocument@<X0>(WebCore::Node *this@<X0>, const WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  WebCore::Node *v6;
  int v7;
  char v8;
  WebCore::Node *v9[2];

  if (this && (v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272)) != 0)
  {
    *(_DWORD *)(v4 + 24) += 4;
    v6 = (WebCore::Node *)v4;
    v7 = 0;
    if (((*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v4 + 208))(v4, a2) & 1) != 0)
      v5 = 8;
    else
      v5 = 9;
    v8 = v5;
    WebCore::nextCandidate((WebCore *)&v6, (uint64_t)v9);
    this = v6;
    v6 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = (WebCore::Node *)WebCore::Node::removedLastRef(this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
    if (v9[0])
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v9, a3);
      this = v9[0];
      *(_BYTE *)(a3 + 16) = 1;
      v9[0] = 0;
      if (this)
      {
        if (*((_DWORD *)this + 6) == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = (WebCore::Node *)WebCore::Node::removedLastRef(this);
        }
        else
        {
          *((_DWORD *)this + 6) -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

WebCore::Node *WebCore::endOfDocument@<X0>(WebCore::Node *this@<X0>, const WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  char v9;
  WebCore::Node *v10;
  WebCore::Node *v11[2];
  WebCore::Node *v12;
  int v13;
  char v14;

  if (this && (v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272)) != 0)
  {
    *(_DWORD *)(v4 + 24) += 4;
    v5 = *(_QWORD *)(v4 + 80);
    if (v5)
    {
      v6 = 0;
      do
      {
        ++v6;
        v5 = *(_QWORD *)(v5 + 56);
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    v12 = (WebCore::Node *)v4;
    v13 = v6;
    v7 = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v4 + 208))(v4, a2);
    if (v6)
      v8 = 10;
    else
      v8 = 9;
    if ((v7 & 1) != 0)
      v9 = 8;
    else
      v9 = v8;
    v14 = v9;
    WebCore::previousCandidate((WebCore *)&v12, (uint64_t)v11);
    if (v11[0])
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v11, a3);
      v10 = v11[0];
      *(_BYTE *)(a3 + 16) = 1;
      v11[0] = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    this = v12;
    v12 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = (WebCore::Node *)WebCore::Node::removedLastRef(this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::VisibleSelection::adjustSelectionToAvoidCrossingEditingBoundaries(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Position *v4;
  uint64_t *v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  int v14;
  WebCore::Node *v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  const WebCore::Position *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  const WebCore::Position *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Node *v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Node *v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  int v50;
  WebCore::Node *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::Node *v55;
  uint64_t (*v56)();
  uint64_t v57;
  unsigned int v58;
  char v59;
  _BOOL4 v60;
  uint64_t v61;
  WebCore::Node *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  WebCore::Node *v68;
  unsigned int v69;
  WebCore::Node *v70;
  unsigned int v71;
  char v72;
  int v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  char v76;
  uint64_t (*v77)();
  WebCore::Node *v78;
  unsigned int v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WebCore::Node *v85;
  uint64_t (*v86)();
  uint64_t v87;
  unsigned int v88;
  char v89;
  _BOOL4 v90;
  uint64_t v91;
  WebCore::Node *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  WebCore::Node *v98;
  unsigned int v99;
  WebCore::Node *v100;
  unsigned int v101;
  char v102;
  int v103;
  WebCore::Node *v104;
  WebCore::Node *v105;
  char v106;
  uint64_t (*v107)();
  WebCore::Node *v108;
  unsigned int v109;
  WebCore::Node *v110;
  int v111;
  int v112;
  uint64_t v113;
  WebCore::Node *v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  WebCore::Node *v121;
  int v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  int v131;
  char v132;
  uint64_t v133;
  int v134;
  char v135;
  uint64_t v136;
  int v137;
  char v138;
  __int16 v139;
  char v140;
  WebCore::Node *v141;
  int v142;
  char v143;
  char v144;
  WebCore::Node **v145;
  int v146;
  char v147;
  const WebCore::Position *v148;
  const WebCore::Position *v149;
  const WebCore::Position *v150;

  v2 = this + 64;
  v1 = *(_QWORD *)(this + 64);
  if (!v1)
    return this;
  v3 = this;
  v4 = (WebCore::Position *)(this + 80);
  if (!*(_QWORD *)(this + 80))
    return this;
  v5 = (uint64_t *)(this + 32);
  if (*(_QWORD *)(this + 32) == v1)
  {
    if ((*(_BYTE *)(this + 44) & 8) == 0 && ((v6 = *(_BYTE *)(this + 44) & 7, v6 != 4) ? (v7 = v6 == 2) : (v7 = 1), v7))
      v8 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(this + 32));
    else
      v8 = *(_DWORD *)(this + 40);
    if ((*(_BYTE *)(v3 + 76) & 8) == 0 && ((v9 = *(_BYTE *)(v3 + 76) & 7, v9 == 4) || v9 == 2))
      v10 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)v2);
    else
      v10 = *(_DWORD *)(v3 + 72);
    if (v8 == v10)
    {
      v11 = *(_BYTE *)(v3 + 44);
      if (((*(_BYTE *)(v3 + 76) ^ v11) & 7) == 0 && *v5 == *(_QWORD *)v4)
      {
        if ((*(_BYTE *)(v3 + 44) & 8) == 0 && ((v12 = v11 & 7, v12 == 4) || v12 == 2))
          v13 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(v3 + 32));
        else
          v13 = *(_DWORD *)(v3 + 40);
        if ((*(_BYTE *)(v3 + 92) & 8) == 0 && ((v14 = *(_BYTE *)(v3 + 92) & 7, v14 == 4) || v14 == 2))
          this = WebCore::Position::offsetForPositionAfterAnchor(v4);
        else
          this = *(unsigned int *)(v3 + 88);
        if (v13 == (_DWORD)this && ((*(_BYTE *)(v3 + 92) ^ *(_BYTE *)(v3 + 44)) & 7) == 0)
          return this;
      }
    }
  }
  WebCore::highestEditableRoot(v3 + 32, 0, (uint64_t *)&v150);
  WebCore::highestEditableRoot(v2, 0, (uint64_t *)&v149);
  WebCore::highestEditableRoot((uint64_t)v4, 0, (uint64_t *)&v148);
  v16 = *v5;
  if (*v5)
  {
    v17 = *(_BYTE *)(v3 + 44) & 7;
    v18 = 1;
    if (v17 > 4)
    {
      v16 = 0;
    }
    else if (((1 << v17) & 0x19) != 0 || (v16 = *(_QWORD *)(v16 + 32)) != 0)
    {
      v18 = 0;
      *(_DWORD *)(v16 + 24) += 2;
    }
  }
  else
  {
    v18 = 1;
  }
  v19 = WebCore::lowestEditableAncestor((WebCore *)v16, v15);
  v20 = v19;
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  if ((v18 & 1) == 0)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  v21 = v150;
  if (v150 == v149)
  {
    v26 = v148;
    if (v150 == v148)
    {
LABEL_88:
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      goto LABEL_91;
    }
    if (v150)
      goto LABEL_52;
  }
  else if (v150)
  {
    WebCore::firstEditablePositionAfterPositionInRoot(v2, v150, (uint64_t)&v141);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v141, (uint64_t)&v121);
    LOBYTE(v124) = 1;
    v22 = v141;
    v141 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    v23 = v121;
    if (v121)
      *((_DWORD *)v121 + 6) += 2;
    v24 = *(WebCore::Node **)v2;
    *(_QWORD *)v2 = v23;
    v25 = v23;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
      v25 = *(WebCore::Node **)v2;
    }
    *(_DWORD *)(v3 + 72) = v122;
    *(_BYTE *)(v3 + 76) = v123;
    if (!v25)
      WebCore::Position::operator=((uint64_t *)v2, (uint64_t *)v4);
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    v26 = v148;
    v21 = v150;
LABEL_52:
    if (v26 != v21)
    {
      WebCore::lastEditablePositionBeforePositionInRoot((uint64_t)v4, v21, (uint64_t)&v141);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v141, (uint64_t)&v121);
      v27 = v141;
      v141 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
      v28 = v121;
      if (v121)
        *((_DWORD *)v121 + 6) += 2;
      v29 = *(WebCore::Node **)v4;
      *(_QWORD *)v4 = v28;
      v30 = v28;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
        v30 = *(WebCore::Node **)v4;
      }
      *(_DWORD *)(v3 + 88) = v122;
      *(_BYTE *)(v3 + 92) = v123;
      if (!v30)
        WebCore::Position::operator=((uint64_t *)v4, (uint64_t *)v2);
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
    }
    goto LABEL_67;
  }
  v41 = *(WebCore::Node **)v4;
  if (*(_QWORD *)v4)
  {
    v42 = *(_BYTE *)(v3 + 92) & 7;
    v43 = 1;
    if (v42 > 4)
    {
      v41 = 0;
    }
    else if (((1 << v42) & 0x19) != 0 || (v41 = (WebCore::Node *)*((_QWORD *)v41 + 4)) != 0)
    {
      v43 = 0;
      *((_DWORD *)v41 + 6) += 2;
    }
  }
  else
  {
    v43 = 1;
  }
  v44 = WebCore::lowestEditableAncestor(v41, v21);
  v45 = v44;
  if (v44)
    *(_DWORD *)(v44 + 24) += 2;
  if ((v43 & 1) == 0)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  v120 = v20;
  v118 = v45;
  if (v45 == v20 && !v148)
    goto LABEL_120;
  WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)v4, (uint64_t)&v145);
  if (!v148)
    goto LABEL_144;
  v52 = 0;
  v53 = **((_QWORD **)v148 + 5);
  if (v53 && (*(_WORD *)(v53 + 28) & 0x80) != 0)
  {
    v54 = *(_QWORD *)(v53 + 200);
    if (!v54)
    {
LABEL_144:
      v52 = 0;
      goto LABEL_145;
    }
    v52 = *(_QWORD *)(v54 + 8);
    if (v52)
    {
      v111 = *(_DWORD *)(v52 + 24);
      *(_DWORD *)(v52 + 24) = v111 + 2;
      if (!v145)
      {
        *(_DWORD *)(v52 + 24) = v111 + 4;
        v121 = (WebCore::Node *)v52;
        v122 = 0;
        v123 = v123 & 0xF0 | 2;
        WebCore::Position::operator=((uint64_t *)&v145, (uint64_t *)&v121);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v121);
      }
    }
  }
LABEL_145:
  v55 = (WebCore::Node *)v145;
  v56 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v145)
    v56 = 0;
  if (v56)
  {
    while (1)
    {
      v57 = v52;
      if (!v55)
        goto LABEL_226;
      v58 = v147 & 7;
      if (v58 > 4)
        break;
      if (((1 << v58) & 0x19) == 0)
      {
        v55 = (WebCore::Node *)*((_QWORD *)v55 + 4);
        if (!v55)
          goto LABEL_226;
      }
      v59 = 0;
      *((_DWORD *)v55 + 6) += 2;
LABEL_152:
      if (v20 == WebCore::lowestEditableAncestor(v55, v51))
      {
        v78 = (WebCore::Node *)v145;
        if (v145 && (v79 = v147 & 7, v79 <= 4) && (((1 << v79) & 0x19) != 0 || (v78 = v145[4]) != 0))
        {
          *((_DWORD *)v78 + 6) += 2;
          v60 = WebCore::Node::computeEditability((uint64_t)v78, 0, 0) != 0;
          if (*((_DWORD *)v78 + 6) == 2)
          {
            if ((*((_WORD *)v78 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v78);
          }
          else
          {
            *((_DWORD *)v78 + 6) -= 2;
          }
        }
        else
        {
          v60 = 0;
        }
      }
      else
      {
        v60 = 1;
      }
      if ((v59 & 1) != 0)
        goto LABEL_375;
      if (*((_DWORD *)v55 + 6) != 2)
      {
        *((_DWORD *)v55 + 6) -= 2;
        if (!v60)
          goto LABEL_376;
        goto LABEL_157;
      }
      if ((*((_WORD *)v55 + 15) & 0x400) != 0)
      {
LABEL_375:
        if (!v60)
        {
LABEL_376:
          v52 = v57;
          goto LABEL_377;
        }
      }
      else
      {
        WebCore::Node::removedLastRef(v55);
        if (!v60)
          goto LABEL_376;
      }
LABEL_157:
      v61 = WebCore::editableRootForPosition((uint64_t)&v145, 0);
      v63 = v61;
      if (!v61
        || ((*(_DWORD *)(v61 + 24) += 2, (v64 = **(_QWORD **)(v61 + 40)) != 0)
          ? (v65 = (*(_WORD *)(v64 + 28) & 0x80) == 0)
          : (v65 = 1),
            v65 || (v66 = *(_QWORD *)(v64 + 200)) == 0))
      {
        v52 = 0;
LABEL_164:
        v67 = 1;
        goto LABEL_165;
      }
      v52 = *(_QWORD *)(v66 + 8);
      if (!v52)
        goto LABEL_164;
      v67 = 0;
      *(_DWORD *)(v52 + 24) += 2;
LABEL_165:
      if (v57)
      {
        if (*(_DWORD *)(v57 + 24) == 2)
        {
          if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v57);
        }
        else
        {
          *(_DWORD *)(v57 + 24) -= 2;
        }
      }
      v68 = (WebCore::Node *)v145;
      if (!v145 || (v69 = v147 & 7, v69 > 4))
      {
        v70 = 0;
LABEL_228:
        v72 = 1;
        goto LABEL_210;
      }
      v70 = (WebCore::Node *)v145;
      if (((1 << v69) & 0x19) == 0)
      {
        v70 = v145[4];
        if (!v70)
          goto LABEL_228;
      }
      *((_DWORD *)v70 + 6) += 2;
      if ((*((_WORD *)v70 + 14) & 4) == 0 || !*((_QWORD *)v70 + 10))
        goto LABEL_173;
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v70 + 208))(v70) & 1) == 0)
      {
        v68 = (WebCore::Node *)v145;
        if (!v145)
          goto LABEL_212;
LABEL_173:
        v71 = v147 & 7;
        if (v71 <= 4 && (((1 << v71) & 0x19) != 0 || (v68 = (WebCore::Node *)*((_QWORD *)v68 + 4)) != 0))
        {
          *((_DWORD *)v68 + 6) += 2;
          v45 = (uint64_t)v68;
        }
        else
        {
LABEL_212:
          v45 = 0;
        }
        WebCore::positionInParentBeforeNode((WebCore *)v45, v62, (uint64_t)&v121);
        v72 = 0;
        v73 = 1;
        goto LABEL_177;
      }
      v72 = 0;
LABEL_210:
      WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v145, (uint64_t)&v121);
      v73 = 0;
LABEL_177:
      v74 = v121;
      v121 = 0;
      v75 = (WebCore::Node *)v145;
      v145 = (WebCore::Node **)v74;
      if (v75)
      {
        if (*((_DWORD *)v75 + 6) == 2)
        {
          if ((*((_WORD *)v75 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v75);
            v80 = v121;
            v146 = v122;
            v147 = v123;
            v121 = 0;
            if (v80)
            {
              if (*((_DWORD *)v80 + 6) == 2)
              {
                if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v80);
              }
              else
              {
                *((_DWORD *)v80 + 6) -= 2;
              }
            }
            goto LABEL_181;
          }
        }
        else
        {
          *((_DWORD *)v75 + 6) -= 2;
        }
      }
      v146 = v122;
      v147 = v123;
      v121 = 0;
LABEL_181:
      if (v73 && v45)
      {
        if (*(_DWORD *)(v45 + 24) == 2)
        {
          if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v45);
        }
        else
        {
          *(_DWORD *)(v45 + 24) -= 2;
        }
        v45 = 0;
      }
      if ((v72 & 1) == 0)
      {
        if (*((_DWORD *)v70 + 6) == 2)
        {
          if ((*((_WORD *)v70 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v70);
        }
        else
        {
          *((_DWORD *)v70 + 6) -= 2;
        }
      }
      v55 = (WebCore::Node *)v145;
      if (v145)
        v76 = 1;
      else
        v76 = v67;
      if ((v76 & 1) == 0)
      {
        *(_DWORD *)(v52 + 24) += 2;
        v145 = (WebCore::Node **)v52;
        v146 = 0;
        v119 = v119 & 0xFFFFFFF0 | 2;
        v147 = v119;
        v55 = (WebCore::Node *)v52;
      }
      if (v63)
      {
        if (*(_DWORD *)(v63 + 24) == 2)
        {
          if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v63);
            v55 = (WebCore::Node *)v145;
          }
        }
        else
        {
          *(_DWORD *)(v63 + 24) -= 2;
        }
      }
      v77 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (!v55)
        v77 = 0;
      v20 = v120;
      if (!v77)
        goto LABEL_377;
    }
    v55 = 0;
LABEL_226:
    v59 = 1;
    goto LABEL_152;
  }
LABEL_377:
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v145, (uint64_t)&v141);
  v144 = 1;
  v114 = v141;
  if (v141)
  {
    *((_DWORD *)v141 + 6) += 2;
    v121 = v114;
    v122 = v142;
    v123 = v143;
    WebCore::Position::operator=((uint64_t *)v4, (uint64_t *)&v121);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v121);
    v45 = v118;
    if (*((_DWORD *)v114 + 6) == 2)
    {
      if ((*((_WORD *)v114 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v114);
    }
    else
    {
      *((_DWORD *)v114 + 6) -= 2;
    }
  }
  else
  {
    v121 = 0;
    v122 = 0;
    v123 &= 0xF0u;
    v124 = 0;
    v125 = 0;
    v126 &= 0xF0u;
    v127 = 0;
    v128 = 0;
    v129 &= 0xF0u;
    v130 = 0;
    v131 = 0;
    v132 &= 0xF0u;
    v133 = 0;
    v134 = 0;
    v135 &= 0xF0u;
    v136 = 0;
    v137 = 0;
    v138 &= 0xF0u;
    v139 = 1;
    v140 = v140 & 0xFC | 1;
    WebCore::VisibleSelection::operator=((uint64_t *)v3, (uint64_t *)&v121);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v121);
    v45 = v118;
  }
  if (v52)
  {
    if (*(_DWORD *)(v52 + 24) == 2)
    {
      if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v52);
    }
    else
    {
      *(_DWORD *)(v52 + 24) -= 2;
    }
  }
  v115 = (WebCore::Node *)v145;
  v145 = 0;
  if (v115)
  {
    if (*((_DWORD *)v115 + 6) == 2)
    {
      if ((*((_WORD *)v115 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v115);
    }
    else
    {
      *((_DWORD *)v115 + 6) -= 2;
    }
  }
  if (!v114)
  {
    v50 = 1;
    goto LABEL_135;
  }
LABEL_120:
  v46 = *(WebCore::Node **)v2;
  if (*(_QWORD *)v2)
  {
    v47 = *(_BYTE *)(v3 + 76) & 7;
    v48 = 1;
    if (v47 > 4)
    {
      v46 = 0;
    }
    else if (((1 << v47) & 0x19) != 0 || (v46 = (WebCore::Node *)*((_QWORD *)v46 + 4)) != 0)
    {
      v48 = 0;
      *((_DWORD *)v46 + 6) += 2;
    }
  }
  else
  {
    v48 = 1;
  }
  v49 = WebCore::lowestEditableAncestor(v46, v21);
  if (v49)
    *(_DWORD *)(v49 + 24) += 2;
  if ((v48 & 1) == 0)
  {
    if (*((_DWORD *)v46 + 6) == 2)
    {
      if ((*((_WORD *)v46 + 15) & 0x400) == 0)
      {
        v113 = v49;
        WebCore::Node::removedLastRef(v46);
        v49 = v113;
      }
    }
    else
    {
      *((_DWORD *)v46 + 6) -= 2;
    }
  }
  if (v49 == v20 && !v149)
    goto LABEL_131;
  v117 = v49;
  WebCore::nextVisuallyDistinctCandidate(v2, 1, (uint64_t)&v145);
  if (!v149)
    goto LABEL_237;
  v82 = 0;
  v83 = **((_QWORD **)v149 + 5);
  if (v83 && (*(_WORD *)(v83 + 28) & 0x80) != 0)
  {
    v84 = *(_QWORD *)(v83 + 200);
    if (!v84)
    {
LABEL_237:
      v82 = 0;
      goto LABEL_238;
    }
    v82 = *(_QWORD *)(v84 + 8);
    if (v82)
    {
      v112 = *(_DWORD *)(v82 + 24);
      *(_DWORD *)(v82 + 24) = v112 + 2;
      if (!v145)
      {
        *(_DWORD *)(v82 + 24) = v112 + 4;
        v121 = (WebCore::Node *)v82;
        v122 = 0;
        v123 = v123 & 0xF0 | 1;
        WebCore::Position::operator=((uint64_t *)&v145, (uint64_t *)&v121);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v121);
      }
    }
  }
LABEL_238:
  v85 = (WebCore::Node *)v145;
  v86 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v145)
    v86 = 0;
  if (v86)
  {
    while (1)
    {
      v87 = v82;
      if (!v85)
        goto LABEL_319;
      v88 = v147 & 7;
      if (v88 > 4)
        break;
      if (((1 << v88) & 0x19) == 0)
      {
        v85 = (WebCore::Node *)*((_QWORD *)v85 + 4);
        if (!v85)
          goto LABEL_319;
      }
      v89 = 0;
      *((_DWORD *)v85 + 6) += 2;
LABEL_245:
      if (v120 == WebCore::lowestEditableAncestor(v85, v81))
      {
        v108 = (WebCore::Node *)v145;
        if (v145 && (v109 = v147 & 7, v109 <= 4) && (((1 << v109) & 0x19) != 0 || (v108 = v145[4]) != 0))
        {
          *((_DWORD *)v108 + 6) += 2;
          v90 = WebCore::Node::computeEditability((uint64_t)v108, 0, 0) != 0;
          if (*((_DWORD *)v108 + 6) == 2)
          {
            if ((*((_WORD *)v108 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v108);
          }
          else
          {
            *((_DWORD *)v108 + 6) -= 2;
          }
        }
        else
        {
          v90 = 0;
        }
      }
      else
      {
        v90 = 1;
      }
      if ((v89 & 1) != 0)
        goto LABEL_395;
      if (*((_DWORD *)v85 + 6) != 2)
      {
        *((_DWORD *)v85 + 6) -= 2;
        if (!v90)
          goto LABEL_396;
        goto LABEL_250;
      }
      if ((*((_WORD *)v85 + 15) & 0x400) != 0)
      {
LABEL_395:
        if (!v90)
        {
LABEL_396:
          v82 = v87;
          goto LABEL_397;
        }
      }
      else
      {
        WebCore::Node::removedLastRef(v85);
        if (!v90)
          goto LABEL_396;
      }
LABEL_250:
      v91 = WebCore::editableRootForPosition((uint64_t)&v145, 0);
      v93 = v91;
      if (!v91
        || ((*(_DWORD *)(v91 + 24) += 2, (v94 = **(_QWORD **)(v91 + 40)) != 0)
          ? (v95 = (*(_WORD *)(v94 + 28) & 0x80) == 0)
          : (v95 = 1),
            v95 || (v96 = *(_QWORD *)(v94 + 200)) == 0))
      {
        v82 = 0;
LABEL_257:
        v97 = 1;
        goto LABEL_258;
      }
      v82 = *(_QWORD *)(v96 + 8);
      if (!v82)
        goto LABEL_257;
      v97 = 0;
      *(_DWORD *)(v82 + 24) += 2;
LABEL_258:
      if (v87)
      {
        if (*(_DWORD *)(v87 + 24) == 2)
        {
          if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v87);
        }
        else
        {
          *(_DWORD *)(v87 + 24) -= 2;
        }
      }
      v98 = (WebCore::Node *)v145;
      if (!v145 || (v99 = v147 & 7, v99 > 4))
      {
        v100 = 0;
LABEL_321:
        v102 = 1;
        goto LABEL_303;
      }
      v100 = (WebCore::Node *)v145;
      if (((1 << v99) & 0x19) == 0)
      {
        v100 = v145[4];
        if (!v100)
          goto LABEL_321;
      }
      *((_DWORD *)v100 + 6) += 2;
      if ((*((_WORD *)v100 + 14) & 4) == 0 || !*((_QWORD *)v100 + 10))
        goto LABEL_266;
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v100 + 208))(v100) & 1) == 0)
      {
        v98 = (WebCore::Node *)v145;
        if (!v145)
          goto LABEL_305;
LABEL_266:
        v101 = v147 & 7;
        if (v101 <= 4 && (((1 << v101) & 0x19) != 0 || (v98 = (WebCore::Node *)*((_QWORD *)v98 + 4)) != 0))
        {
          *((_DWORD *)v98 + 6) += 2;
          v20 = (uint64_t)v98;
        }
        else
        {
LABEL_305:
          v20 = 0;
        }
        WebCore::positionInParentAfterNode(v20, v92, (uint64_t)&v121);
        v102 = 0;
        v103 = 1;
        goto LABEL_270;
      }
      v102 = 0;
LABEL_303:
      WebCore::nextVisuallyDistinctCandidate((uint64_t)&v145, 1, (uint64_t)&v121);
      v103 = 0;
LABEL_270:
      v104 = v121;
      v121 = 0;
      v105 = (WebCore::Node *)v145;
      v145 = (WebCore::Node **)v104;
      if (v105)
      {
        if (*((_DWORD *)v105 + 6) == 2)
        {
          if ((*((_WORD *)v105 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v105);
            v110 = v121;
            v146 = v122;
            v147 = v123;
            v121 = 0;
            if (v110)
            {
              if (*((_DWORD *)v110 + 6) == 2)
              {
                if ((*((_WORD *)v110 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v110);
              }
              else
              {
                *((_DWORD *)v110 + 6) -= 2;
              }
            }
            goto LABEL_274;
          }
        }
        else
        {
          *((_DWORD *)v105 + 6) -= 2;
        }
      }
      v146 = v122;
      v147 = v123;
      v121 = 0;
LABEL_274:
      if (v103 && v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
        v20 = 0;
      }
      if ((v102 & 1) == 0)
      {
        if (*((_DWORD *)v100 + 6) == 2)
        {
          if ((*((_WORD *)v100 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v100);
        }
        else
        {
          *((_DWORD *)v100 + 6) -= 2;
        }
      }
      v85 = (WebCore::Node *)v145;
      if (v145)
        v106 = 1;
      else
        v106 = v97;
      if ((v106 & 1) == 0)
      {
        *(_DWORD *)(v82 + 24) += 2;
        v145 = (WebCore::Node **)v82;
        v146 = 0;
        v119 = v119 & 0xFFFFFFF0 | 1;
        v147 = v119;
        v85 = (WebCore::Node *)v82;
      }
      if (v93)
      {
        if (*(_DWORD *)(v93 + 24) == 2)
        {
          if ((*(_WORD *)(v93 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v93);
            v85 = (WebCore::Node *)v145;
          }
        }
        else
        {
          *(_DWORD *)(v93 + 24) -= 2;
        }
      }
      v107 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (!v85)
        v107 = 0;
      if (!v107)
        goto LABEL_397;
    }
    v85 = 0;
LABEL_319:
    v89 = 1;
    goto LABEL_245;
  }
LABEL_397:
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v145, (uint64_t)&v141);
  v144 = 1;
  v116 = v141;
  v20 = v120;
  if (v141)
  {
    *((_DWORD *)v141 + 6) += 2;
    v121 = v116;
    v122 = v142;
    v123 = v143;
    WebCore::Position::operator=((uint64_t *)v2, (uint64_t *)&v121);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v121);
  }
  else
  {
    v121 = 0;
    v122 = 0;
    v123 &= 0xF0u;
    v124 = 0;
    v125 = 0;
    v126 &= 0xF0u;
    v127 = 0;
    v128 = 0;
    v129 &= 0xF0u;
    v130 = 0;
    v131 = 0;
    v132 &= 0xF0u;
    v133 = 0;
    v134 = 0;
    v135 &= 0xF0u;
    v136 = 0;
    v137 = 0;
    v138 &= 0xF0u;
    v139 = 1;
    v140 = v140 & 0xFC | 1;
    WebCore::VisibleSelection::operator=((uint64_t *)v3, (uint64_t *)&v121);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v121);
  }
  v45 = v118;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v141);
  if (v82)
  {
    if (*(_DWORD *)(v82 + 24) == 2)
    {
      if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v82);
    }
    else
    {
      *(_DWORD *)(v82 + 24) -= 2;
    }
  }
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v145);
  v49 = v117;
  if (v116)
  {
LABEL_131:
    v50 = 0;
    goto LABEL_132;
  }
  v50 = 1;
LABEL_132:
  if (v49)
  {
    if (*(_DWORD *)(v49 + 24) == 2)
    {
      if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v49);
    }
    else
    {
      *(_DWORD *)(v49 + 24) -= 2;
    }
  }
LABEL_135:
  if (v45)
  {
    if (*(_DWORD *)(v45 + 24) == 2)
    {
      if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v45);
    }
    else
    {
      *(_DWORD *)(v45 + 24) -= 2;
    }
  }
  if (v50)
    goto LABEL_88;
LABEL_67:
  v31 = *(_QWORD *)(v3 + 48);
  if (v31)
  {
    v32 = *(_BYTE *)(v3 + 60) & 7;
    if (v32 <= 4 && (((1 << v32) & 0x19) != 0 || (v31 = *(_QWORD *)(v31 + 32)) != 0))
    {
      *(_DWORD *)(v31 + 24) += 2;
      v33 = WebCore::lowestEditableAncestor((WebCore *)v31, v21);
      if (*(_DWORD *)(v31 + 24) == 2)
      {
        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v31);
      }
      else
      {
        *(_DWORD *)(v31 + 24) -= 2;
      }
      if (v20 == v33)
        goto LABEL_88;
      goto LABEL_73;
    }
  }
  if (v20)
  {
LABEL_73:
    v34 = 80;
    if ((*(_BYTE *)(v3 + 98) & 1) != 0)
      v2 = (uint64_t)v4;
    else
      v34 = 64;
    v35 = *(_QWORD *)(v3 + v34);
    if (v35)
      *(_DWORD *)(v35 + 24) += 2;
    v36 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = v35;
    if (v36)
    {
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
      v35 = *(_QWORD *)(v3 + 48);
    }
    v37 = *(_BYTE *)(v2 + 12);
    *(_DWORD *)(v3 + 56) = *(_DWORD *)(v2 + 8);
    *(_BYTE *)(v3 + 60) = v37;
    if (v35)
      *(_DWORD *)(v35 + 24) += 2;
    v38 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v35;
    if (v38)
    {
      if (*(_DWORD *)(v38 + 24) == 2)
      {
        if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v38);
      }
      else
      {
        *(_DWORD *)(v38 + 24) -= 2;
      }
    }
    *(_DWORD *)(v3 + 24) = *(_DWORD *)(v3 + 56);
    *(_BYTE *)(v3 + 28) = *(_BYTE *)(v3 + 60);
    goto LABEL_88;
  }
LABEL_91:
  v39 = (uint64_t)v148;
  v148 = 0;
  if (v39)
  {
    if (*(_DWORD *)(v39 + 24) == 2)
    {
      if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v39);
    }
    else
    {
      *(_DWORD *)(v39 + 24) -= 2;
    }
  }
  v40 = (uint64_t)v149;
  v149 = 0;
  if (v40)
  {
    if (*(_DWORD *)(v40 + 24) == 2)
    {
      if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v40);
    }
    else
    {
      *(_DWORD *)(v40 + 24) -= 2;
    }
  }
  this = (uint64_t)v150;
  v150 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::VisibleSelection::adjustPositionForEnd@<X0>(WebCore::VisibleSelection *this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;
  unsigned int v8;
  const WebCore::Position *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  _DWORD *v18;
  __int16 v19;
  char v21;

  v6 = (uint64_t *)*((_QWORD *)a2 + 5);
  result = *(_QWORD *)this;
  if (!result
    || (v8 = *((_BYTE *)this + 12) & 7, v8 > 4)
    || (v9 = a2, ((1 << v8) & 0x19) == 0) && (result = *(_QWORD *)(result + 32)) == 0)
  {
LABEL_15:
    result = *(_QWORD *)(*v6 + 88);
    if (result)
    {
      v16 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v16 + 4;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 2;
      v17 = v16 + 2;
      if (v17)
      {
        *(_DWORD *)(result + 24) = v17;
      }
      else if ((*(_WORD *)(result + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) &= 0xF0u;
    }
    return result;
  }
  v10 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v10 + 2;
  v11 = result;
  while (1)
  {
    v12 = *(uint64_t **)(v11 + 40);
    if (v12 == v6)
      break;
    if ((*(_BYTE *)(v11 + 22) & 0x10) != 0)
    {
      v13 = *v12;
      if (v13 && (*(_WORD *)(v13 + 28) & 0x80) != 0)
      {
        v15 = *(_QWORD *)(v13 + 200);
        if (v15)
        {
          v11 = *(_QWORD *)(v15 + 8);
          if (v11)
            continue;
        }
      }
    }
    if (v10)
    {
      *(_DWORD *)(result + 24) = v10;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    goto LABEL_15;
  }
  v18 = (_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  if (*(_DWORD *)(result + 24) == 2)
  {
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  else
  {
    *(_DWORD *)(result + 24) -= 2;
  }
  if ((const WebCore::Position *)v11 == v9)
  {
    v18 = (_DWORD *)((char *)v9 + 24);
  }
  else
  {
    v19 = *(_WORD *)(v11 + 28);
    if ((v19 & 0xF000) == 0x9000)
    {
      if (**((_QWORD **)v9 + 5) != v11 || (*((_WORD *)v9 + 14) & 0xF000) == 0x9000 || (*((_BYTE *)v9 + 22) & 8) == 0)
      {
LABEL_31:
        v21 = 1;
        goto LABEL_34;
      }
    }
    else
    {
      if ((v19 & 4) == 0
        || !*(_QWORD *)(v11 + 80)
        || ((*((unsigned __int8 *)v9 + 22) ^ *(unsigned __int8 *)(v11 + 22)) & 8) != 0)
      {
        goto LABEL_31;
      }
      do
        v9 = (const WebCore::Position *)*((_QWORD *)v9 + 4);
      while (v9 != (const WebCore::Position *)v11 && v9 != 0);
      if (!v9)
        goto LABEL_31;
    }
  }
  v21 = 2;
LABEL_34:
  *v18 += 2;
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | v21;
  if (*v18 != 2)
  {
    *v18 -= 2;
    return result;
  }
  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    result = v11;
    return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  return result;
}

uint64_t WebCore::VisibleSelection::adjustPositionForStart@<X0>(WebCore::VisibleSelection *this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;
  unsigned int v8;
  const WebCore::Position *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  _DWORD *v18;
  __int16 v19;
  char v21;

  v6 = (uint64_t *)*((_QWORD *)a2 + 5);
  result = *(_QWORD *)this;
  if (!result
    || (v8 = *((_BYTE *)this + 12) & 7, v8 > 4)
    || (v9 = a2, ((1 << v8) & 0x19) == 0) && (result = *(_QWORD *)(result + 32)) == 0)
  {
LABEL_15:
    result = *(_QWORD *)(*v6 + 80);
    if (result)
    {
      v16 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v16 + 4;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 1;
      v17 = v16 + 2;
      if (v17)
      {
        *(_DWORD *)(result + 24) = v17;
      }
      else if ((*(_WORD *)(result + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) &= 0xF0u;
    }
    return result;
  }
  v10 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v10 + 2;
  v11 = result;
  while (1)
  {
    v12 = *(uint64_t **)(v11 + 40);
    if (v12 == v6)
      break;
    if ((*(_BYTE *)(v11 + 22) & 0x10) != 0)
    {
      v13 = *v12;
      if (v13 && (*(_WORD *)(v13 + 28) & 0x80) != 0)
      {
        v15 = *(_QWORD *)(v13 + 200);
        if (v15)
        {
          v11 = *(_QWORD *)(v15 + 8);
          if (v11)
            continue;
        }
      }
    }
    if (v10)
    {
      *(_DWORD *)(result + 24) = v10;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    goto LABEL_15;
  }
  v18 = (_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  if (*(_DWORD *)(result + 24) == 2)
  {
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  else
  {
    *(_DWORD *)(result + 24) -= 2;
  }
  if ((const WebCore::Position *)v11 == v9)
  {
    v18 = (_DWORD *)((char *)v9 + 24);
  }
  else
  {
    v19 = *(_WORD *)(v11 + 28);
    if ((v19 & 0xF000) == 0x9000)
    {
      if (**((_QWORD **)v9 + 5) != v11 || (*((_WORD *)v9 + 14) & 0xF000) == 0x9000 || (*((_BYTE *)v9 + 22) & 8) == 0)
      {
LABEL_31:
        v21 = 2;
        goto LABEL_34;
      }
    }
    else
    {
      if ((v19 & 4) == 0
        || !*(_QWORD *)(v11 + 80)
        || ((*((unsigned __int8 *)v9 + 22) ^ *(unsigned __int8 *)(v11 + 22)) & 8) != 0)
      {
        goto LABEL_31;
      }
      do
        v9 = (const WebCore::Position *)*((_QWORD *)v9 + 4);
      while (v9 != (const WebCore::Position *)v11 && v9 != 0);
      if (!v9)
        goto LABEL_31;
    }
  }
  v21 = 1;
LABEL_34:
  *v18 += 2;
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | v21;
  if (*v18 != 2)
  {
    *v18 -= 2;
    return result;
  }
  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    result = v11;
    return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  return result;
}

uint64_t WebCore::isInUserAgentShadowRootOrHasEditableShadowAncestor(WebCore *this, WebCore::Node *a2)
{
  uint64_t v2;
  BOOL v3;
  WebCore *v4;
  WebCore *v5;
  WebCore **v6;
  uint64_t v7;
  uint64_t v8;

  v2 = **((_QWORD **)this + 5);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  if (*(_BYTE *)(v2 + 193))
  {
    v4 = this;
    *((_DWORD *)this + 6) += 2;
    while (1)
    {
      v5 = v4;
      if (WebCore::Node::computeEditability((uint64_t)v4, 0, 1))
      {
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v4);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
        goto LABEL_23;
      }
      if ((*((_WORD *)v4 + 14) & 0x80) == 0)
        break;
      v7 = *((_QWORD *)v4 + 25);
      if (v7)
      {
        v6 = (WebCore **)(v7 + 8);
LABEL_10:
        v4 = *v6;
        if (*v6)
          *((_DWORD *)v4 + 6) += 2;
        goto LABEL_12;
      }
      v4 = 0;
LABEL_12:
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
      if (!v4)
      {
        v8 = 0;
        goto LABEL_24;
      }
    }
    v6 = (WebCore **)((char *)v4 + 32);
    goto LABEL_10;
  }
LABEL_23:
  v8 = 1;
LABEL_24:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v8;
}

BOOL WebCore::VisibleSelection::isContentEditable(WebCore::VisibleSelection *this)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  _BOOL8 v4;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *((_BYTE *)this + 76) & 7;
  if (v2 > 4)
    return 0;
  if (((1 << v2) & 0x19) == 0)
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  v4 = WebCore::Node::computeEditability(v1, 0, 0) != 0;
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v4;
}

BOOL WebCore::VisibleSelection::hasEditableStyle(WebCore::VisibleSelection *this)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  _BOOL8 v4;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *((_BYTE *)this + 76) & 7;
  if (v2 > 4)
    return 0;
  if (((1 << v2) & 0x19) == 0)
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  v4 = WebCore::Node::computeEditability(v1, 0, 1) != 0;
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v4;
}

BOOL WebCore::VisibleSelection::isContentRichlyEditable(WebCore::VisibleSelection *this)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  _BOOL8 v4;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *((_BYTE *)this + 76) & 7;
  if (v2 > 4)
    return 0;
  if (((1 << v2) & 0x19) == 0)
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  v4 = WebCore::Node::computeEditability(v1, 0, 1) == 2;
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v4;
}

BOOL WebCore::VisibleSelection::isInPasswordField(WebCore::VisibleSelection *this, const WebCore::Position *a2)
{
  WebCore::Node *v2;
  void *v3;
  int v4;
  _BOOL8 v5;

  v2 = WebCore::enclosingTextFormControl((WebCore::VisibleSelection *)((char *)this + 64), a2);
  if (!v2 || *(_QWORD *)(*((_QWORD *)v2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    return 0;
  v4 = *((_DWORD *)v2 + 6);
  *((_DWORD *)v2 + 6) = v4 + 2;
  v5 = *(_DWORD *)(*((_QWORD *)v2 + 30) + 12) == 2048;
  if (v4)
  {
    *((_DWORD *)v2 + 6) = v4;
  }
  else if ((*((_WORD *)v2 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v2, v3);
  }
  return v5;
}

uint64_t WebCore::VisibleSelection::canEnableWritingSuggestions(WebCore::VisibleSelection *this, const WebCore::Position *a2)
{
  WebCore::Node **v3;
  WebCore::Node *v4;
  void *v5;
  WebCore::Node *v6;
  uint64_t isWritingSuggestionsEnabled;
  unsigned int v9;
  int v10;
  WebCore::Node *v11;
  uint64_t v12;

  v3 = (WebCore::Node **)((char *)this + 64);
  v4 = WebCore::enclosingTextFormControl((WebCore::VisibleSelection *)((char *)this + 64), a2);
  if (v4)
  {
    v6 = v4;
    *((_DWORD *)v4 + 6) += 2;
    isWritingSuggestionsEnabled = WebCore::Element::isWritingSuggestionsEnabled(v4, v5);
    goto LABEL_3;
  }
  v6 = *v3;
  if (!*v3)
    return 0;
  v9 = *((_BYTE *)this + 76) & 7;
  if (v9 > 4)
    return 0;
  if (((1 << v9) & 0x19) == 0)
  {
    v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
    if (!v6)
      return 0;
  }
  v10 = *((_DWORD *)v6 + 6);
  *((_DWORD *)v6 + 6) = v10 + 2;
  if ((*((_WORD *)v6 + 14) & 8) != 0)
  {
    *((_DWORD *)v6 + 6) = v10 + 4;
    isWritingSuggestionsEnabled = WebCore::Element::isWritingSuggestionsEnabled(v6, v5);
    if (*((_DWORD *)v6 + 6) != 2)
    {
      *((_DWORD *)v6 + 6) -= 2;
      goto LABEL_3;
    }
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
    {
      v11 = v6;
LABEL_16:
      WebCore::Node::removedLastRef(v11, v5);
    }
  }
  else
  {
    v12 = *((_QWORD *)v6 + 4);
    if (v12 && (*(_WORD *)(v12 + 28) & 8) != 0)
    {
      *(_DWORD *)(v12 + 24) += 2;
      isWritingSuggestionsEnabled = WebCore::Element::isWritingSuggestionsEnabled((WebCore::Element *)v12, v5);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          v11 = (WebCore::Node *)v12;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    else
    {
      isWritingSuggestionsEnabled = 0;
    }
  }
LABEL_3:
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6, v5);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return isWritingSuggestionsEnabled;
}

uint64_t WebCore::VisibleSelection::isInAutoFilledAndViewableField(WebCore::VisibleSelection *this, const WebCore::Position *a2)
{
  WebCore::Node *v2;
  void *v3;
  int v4;
  uint64_t v5;

  v2 = WebCore::enclosingTextFormControl((WebCore::VisibleSelection *)((char *)this + 64), a2);
  if (!v2 || *(_QWORD *)(*((_QWORD *)v2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    return 0;
  v4 = *((_DWORD *)v2 + 6);
  *((_DWORD *)v2 + 6) = v4 + 2;
  v5 = (*((unsigned __int16 *)v2 + 115) >> 9) & 1;
  if (v4)
  {
    *((_DWORD *)v2 + 6) = v4;
  }
  else if ((*((_WORD *)v2 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v2, v3);
  }
  return v5;
}

WebCore::Node *WebCore::leftWordPosition@<X0>(WebCore *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v5;
  WebCore::Node *result;
  WebCore::Node *v7;
  const WebCore::Position *v8;
  _BOOL4 isEditablePosition;
  WebCore::Node *v10;
  char v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int v14;
  char v15;
  char v16;

  WebCore::visualWordPosition((WebCore::Node **)a3, (uint64_t)this, 0, (int)a2);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore(this, (const WebCore::VisiblePosition *)a3, 0, (uint64_t)&v13);
  v5 = v13;
  result = *(WebCore::Node **)a3;
  *(_QWORD *)a3 = v13;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
        v5 = *(WebCore::Node **)a3;
      }
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  *(_DWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 12) = v15;
  *(_BYTE *)(a3 + 16) = v16;
  if (!v5)
  {
    v7 = *(WebCore::Node **)this;
    if (*(_QWORD *)this)
      *((_DWORD *)v7 + 6) += 2;
    v13 = v7;
    v14 = *((_DWORD *)this + 2);
    v15 = *((_BYTE *)this + 12);
    isEditablePosition = WebCore::isEditablePosition((uint64_t)&v13, 0);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (isEditablePosition)
    {
      v10 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
        *((_DWORD *)v10 + 6) += 2;
      v13 = v10;
      v14 = *((_DWORD *)this + 2);
      v15 = *((_BYTE *)this + 12);
      v11 = WebCore::directionOfEnclosingBlock((WebCore *)&v13, v8);
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      if ((v11 & 1) != 0)
        WebCore::endOfEditableContent(this, (uint64_t)&v13);
      else
        WebCore::startOfEditableContent(this, (uint64_t)&v13);
      result = *(WebCore::Node **)a3;
      *(_QWORD *)a3 = v13;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      *(_DWORD *)(a3 + 8) = v14;
      *(_BYTE *)(a3 + 12) = v15;
      *(_BYTE *)(a3 + 16) = v16;
    }
  }
  return result;
}

WebCore::Node *WebCore::visualWordPosition(WebCore::Node **a1, uint64_t a2, int a3, int a4)
{
  WebCore::Node *result;
  int v9;
  uint64_t v10;
  WebCore::Node *v11;
  const WebCore::Position *v12;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  WebCore::Node *v16;
  uint64_t (**v17)();
  void *v18;
  WebCore::Node *v19;
  int v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  _BOOL4 v23;
  char v24;
  int v25;
  unsigned int v26;
  uint64_t (*v27)();
  WebCore::Node *v28;
  WebCore::Node *v29;
  int v30;
  unsigned int v31;
  uint64_t (*v32)();
  void *v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t (**v41)();
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (**v60)();
  char v61;
  int v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int isBoundary;
  BOOL v68;
  int v69;
  UBreakIterator *v70;
  int v71;
  WebCore::Node *v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  int *v76;
  char *v77;
  WebCore::Node *v78;
  WTF *v79;
  WebCore::Node *v80;
  WebCore *v81;
  uint64_t v82;
  char v83;
  int v84;
  WTF *v85;
  _BYTE v86[16];
  unsigned int v87;
  _BYTE v88[16];
  unsigned int v89;
  __int16 v90;
  unsigned int v91[4];
  unsigned int v92;
  int v93;
  WebCore::Node *v94;
  int v95;
  char v96;
  char v97;
  WTF *v98;
  uint64_t v99;
  _BYTE v100[2048];
  WebCore::Node *v101;
  int v102;
  char v103;
  char v104;
  char v105;
  WebCore::Node *v106;
  int v107;
  char v108;
  char v109;
  _QWORD v110[2];
  unsigned int v111;
  _BYTE v112[16];
  unsigned int v113;
  _QWORD v114[2];
  unsigned int v115;
  _BYTE v116[16];
  unsigned int v117;
  WebCore::Node *v118;
  int v119;
  char v120;
  unsigned int v121;
  char *v122;
  _QWORD v123[2];

  result = *(WebCore::Node **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_257;
  v9 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v9 + 2;
  v10 = *(_QWORD *)(*((_QWORD *)result + 5) + 8);
  if (v9)
  {
    *((_DWORD *)result + 6) = v9;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
  }
  if (!v10)
  {
LABEL_257:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((_BYTE *)a1 + 16) = 1;
    return result;
  }
  v84 = a4;
  v11 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
  {
    *((_DWORD *)v11 + 6) += 2;
    WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)v11 + 5) + 8), 2, 0);
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2, 0);
  }
  v14 = (_DWORD *)(a2 + 8);
  v13 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v13 + 6) += 2;
  v98 = v13;
  LODWORD(v99) = *v14;
  BYTE4(v99) = *(_BYTE *)(a2 + 12);
  v83 = WebCore::directionOfEnclosingBlock((WebCore *)&v98, v12);
  v15 = v98;
  v98 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  v110[0] = 0;
  v111 = 1;
  v16 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v16 + 6) += 2;
  v85 = 0;
  v106 = v16;
  v107 = *v14;
  v108 = *(_BYTE *)(a2 + 12);
  v109 = *(_BYTE *)(a2 + 16);
  LOBYTE(v101) = 0;
  v17 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0;
  v105 = 0;
  v98 = (WTF *)v100;
  v99 = 1024;
  do
  {
    if (a3 == 1)
      WebCore::VisiblePosition::right(&v106, 0, 1, (uint64_t)&v94);
    else
      WebCore::VisiblePosition::left(&v106, 0, 1, (uint64_t)&v94);
    if (WebCore::operator==((uint64_t *)&v94, (uint64_t *)&v106) || (v19 = v94) == 0)
    {
LABEL_23:
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v20 = 1;
      *((_BYTE *)a1 + 16) = 1;
      goto LABEL_24;
    }
    if (!v105)
      goto LABEL_31;
    if (WebCore::operator==((uint64_t *)&v94, (uint64_t *)&v101))
      goto LABEL_23;
    v19 = v94;
    if (v94)
LABEL_31:
      *((_DWORD *)v19 + 6) += 2;
    v118 = v19;
    v119 = v95;
    v120 = v96;
    WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v118, 0, (uint64_t)v91);
    v22 = v118;
    v118 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v91) & 1) != 0)
    {
      v20 = 3;
      goto LABEL_245;
    }
    if ((WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v91) & 1) == 0)
    {
      v28 = v94;
      if (v94)
        *((_DWORD *)v94 + 6) += 2;
      v29 = v106;
      v106 = v28;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      v107 = v95;
      v108 = v96;
      v109 = v97;
      v20 = 2;
      goto LABEL_245;
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v91) & 1) == 0
      && (WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v91) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B4C090);
    }
    v90 = 0;
    if (v111 == -1)
      goto LABEL_298;
    v118 = (WebCore::Node *)v116;
    if (((unsigned int (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v111])(&v118, v110)&& (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v91) & 1) != 0)
    {
      v24 = 1;
    }
    else
    {
      v23 = v92 != -1 && v92 == v111;
      if (v111 == -1)
        v24 = v92 == -1;
      else
        v24 = v23;
      if (v111 != -1 && v23)
      {
        v118 = (WebCore::Node *)v116;
        v24 = ((uint64_t (*)(WebCore::Node **, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v111])(&v118, v110, v91);
      }
    }
    if (v92 == -1)
      goto LABEL_298;
    v25 = v93;
    v118 = (WebCore::Node *)v116;
    if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE2E8[v92])(&v118, v91) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B4C070);
    }
    if (v25 == WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v91))
    {
      v88[0] = 0;
      v89 = -1;
      v26 = v92;
      if (v92 == -1)
      {
        v116[0] = 0;
      }
      else
      {
        v27 = off_1E33AE288[v92];
        ((void (*)(WebCore::Node **, _BYTE *, unsigned int *))v27)(&v118, v88, v91);
        v89 = v26;
        v116[0] = 0;
        v117 = -1;
        ((void (*)(_QWORD *, _BYTE *, _BYTE *))v27)(v114, v116, v88);
      }
      HIBYTE(v90) = 0;
      v122 = 0;
      v117 = v26;
      WebCore::logicallyPreviousBox((uint64_t)&v118, (uint64_t)&v94, (uint64_t)v116, &v122, (_BYTE *)&v90 + 1);
      if (v117 != -1)
        ((void (*)(_QWORD *, _BYTE *))v17[v117])(v114, v116);
      v117 = -1;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118) & 1) == 0)
      {
        while (1)
        {
          if ((WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)&v118) & 1) != 0)
            goto LABEL_89;
          HIBYTE(v90) = 1;
          v112[0] = 0;
          v113 = -1;
          v34 = v121;
          if (v121 != -1)
          {
            ((void (*)(_QWORD *, _BYTE *, WebCore::Node **))off_1E33AE288[v121])(v114, v112, &v118);
            v113 = v34;
          }
          WebCore::logicallyPreviousBox((uint64_t)v114, (uint64_t)&v94, (uint64_t)v112, &v122, (_BYTE *)&v90 + 1);
          if (v121 != -1)
            break;
          if (v115 != -1)
            goto LABEL_83;
LABEL_86:
          v115 = -1;
          if (v113 != -1)
            ((void (*)(_QWORD *, _BYTE *))v17[v113])(v123, v112);
          v113 = -1;
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118))
            goto LABEL_89;
        }
        if (v115 == -1)
        {
          ((void (*)(_QWORD *, WebCore::Node **))v17[v121])(v123, &v118);
          v121 = -1;
        }
        else
        {
LABEL_83:
          v123[0] = &v118;
          ((void (*)(_QWORD *, WebCore::Node **, _QWORD *))off_1E33AE268[v115])(v123, &v118, v114);
        }
        if (v115 != -1)
          ((void (*)(_QWORD *, _QWORD *))v17[v115])(v123, v114);
        goto LABEL_86;
      }
LABEL_89:
      if ((_DWORD)v99)
      {
        if (HIDWORD(v99))
          HIDWORD(v99) = 0;
        v35 = v98;
        if (v100 != (_BYTE *)v98 && v98)
        {
          v98 = 0;
          LODWORD(v99) = 0;
          WTF::fastFree(v35, v33);
          v35 = v98;
        }
        if (!v35)
        {
          v98 = (WTF *)v100;
          LODWORD(v99) = 1024;
        }
      }
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118) & 1) == 0)
      {
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118) & 1) == 0
          && (WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)&v118) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4C1C4);
        }
        if (v121 == -1)
          goto LABEL_298;
        v114[0] = v123;
        if ((((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE2E8[v121])(v114, &v118) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4C164);
        }
        if (v121 == -1)
          goto LABEL_298;
        v114[0] = v123;
        ((void (*)(_QWORD *, WebCore::Node **))off_1E33AE318[v121])(v114, &v118);
        if (v121 == -1)
          goto LABEL_298;
        v114[0] = v123;
        if ((((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE2E8[v121])(v114, &v118) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4C184);
        }
        if (v121 == -1)
          goto LABEL_298;
        v114[0] = v123;
        v36 = off_1E33AE328[v121]((int)v114, (WebCore::InlineIterator::BoxModernPath *)&v118);
        WTF::append<char16_t,1024ul>(&v98, v36, v37);
      }
      if (v89 == -1)
        goto LABEL_298;
      v114[0] = v123;
      if ((((uint64_t (*)(_QWORD *, _BYTE *))off_1E33AE2E8[v89])(v114, v88) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B4C104);
      }
      if (v89 == -1)
        goto LABEL_298;
      v114[0] = v123;
      v38 = off_1E33AE328[v89]((int)v114, (WebCore::InlineIterator::BoxModernPath *)v88);
      WTF::append<char16_t,1024ul>(&v98, v38, v39);
      v85 = (WTF *)WTF::wordBreakIterator();
      if (v121 != -1)
        ((void (*)(_QWORD *, WebCore::Node **))v17[v121])(v114, &v118);
      v40 = v122;
      if (v122)
      {
        v41 = v17;
        v42 = *((unsigned int *)v122 + 9);
        v43 = (unsigned int *)*((_QWORD *)v122 + 3);
        if ((_DWORD)v42)
        {
          v44 = 24 * v42;
          do
          {
            v45 = v43[4];
            if ((_DWORD)v45 != -1)
              ((void (*)(WebCore::Node **, unsigned int *))v41[v45])(&v118, v43);
            v43[4] = -1;
            v43 += 6;
            v44 -= 24;
          }
          while (v44);
          v43 = (unsigned int *)*((_QWORD *)v40 + 3);
        }
        v17 = v41;
        if (v43)
        {
          *((_QWORD *)v40 + 3) = 0;
          *((_DWORD *)v40 + 8) = 0;
          WTF::fastFree((WTF *)v43, v18);
        }
        v46 = *((unsigned int *)v40 + 4);
        if ((_DWORD)v46 != -1)
          ((void (*)(WebCore::Node **, char *))off_1E33AE258[v46])(&v118, v40);
        *((_DWORD *)v40 + 4) = -1;
        WTF::fastFree((WTF *)v40, v18);
      }
      if (v89 != -1)
        ((void (*)(WebCore::Node **, _BYTE *))v17[v89])(&v118, v88);
      v89 = -1;
      goto LABEL_189;
    }
    if (v92 == -1)
      goto LABEL_298;
    v30 = v93;
    v118 = (WebCore::Node *)v116;
    if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE2E8[v92])(&v118, v91) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B4C0E4);
    }
    if (v92 == -1)
    {
LABEL_298:
      v81 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::startOfEditableContent(v81, v82);
    }
    v118 = (WebCore::Node *)v116;
    if (v30 == ((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE228[v92])(&v118, v91))
    {
      v86[0] = 0;
      v87 = -1;
      v31 = v92;
      if (v92 == -1)
      {
        v122 = 0;
        v116[0] = 0;
      }
      else
      {
        v32 = off_1E33AE288[v92];
        ((void (*)(WebCore::Node **, _BYTE *, unsigned int *))v32)(&v118, v86, v91);
        v87 = v31;
        v122 = 0;
        v116[0] = 0;
        v117 = -1;
        ((void (*)(_QWORD *, _BYTE *, _BYTE *))v32)(v114, v116, v86);
      }
      LOBYTE(v90) = 0;
      v117 = v31;
      WebCore::logicallyNextBox((uint64_t)&v118, (uint64_t)&v94, (uint64_t)v116, &v122, &v90);
      if (v117 != -1)
        ((void (*)(_QWORD *, _BYTE *))v17[v117])(v114, v116);
      v117 = -1;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118) & 1) == 0)
      {
        while (1)
        {
          if ((WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)&v118) & 1) != 0)
            goto LABEL_152;
          LOBYTE(v90) = 1;
          v112[0] = 0;
          v113 = -1;
          v48 = v121;
          if (v121 != -1)
          {
            ((void (*)(_QWORD *, _BYTE *, WebCore::Node **))off_1E33AE288[v121])(v114, v112, &v118);
            v113 = v48;
          }
          WebCore::logicallyNextBox((uint64_t)v114, (uint64_t)&v94, (uint64_t)v112, &v122, &v90);
          if (v121 != -1)
            break;
          if (v115 != -1)
            goto LABEL_146;
LABEL_149:
          v115 = -1;
          if (v113 != -1)
            ((void (*)(_QWORD *, _BYTE *))v17[v113])(v123, v112);
          v113 = -1;
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118))
            goto LABEL_152;
        }
        if (v115 == -1)
        {
          ((void (*)(_QWORD *, WebCore::Node **))v17[v121])(v123, &v118);
          v121 = -1;
        }
        else
        {
LABEL_146:
          v123[0] = &v118;
          ((void (*)(_QWORD *, WebCore::Node **, _QWORD *))off_1E33AE268[v115])(v123, &v118, v114);
        }
        if (v115 != -1)
          ((void (*)(_QWORD *, _QWORD *))v17[v115])(v123, v114);
        goto LABEL_149;
      }
LABEL_152:
      if ((_DWORD)v99)
      {
        if (HIDWORD(v99))
          HIDWORD(v99) = 0;
        v49 = v98;
        if (v100 != (_BYTE *)v98 && v98)
        {
          v98 = 0;
          LODWORD(v99) = 0;
          WTF::fastFree(v49, v47);
          v49 = v98;
        }
        if (!v49)
        {
          v98 = (WTF *)v100;
          LODWORD(v99) = 1024;
        }
      }
      if (v87 == -1)
        goto LABEL_298;
      v114[0] = v123;
      if ((((uint64_t (*)(_QWORD *, _BYTE *))off_1E33AE2E8[v87])(v114, v86) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B4C1A4);
      }
      if (v87 == -1)
        goto LABEL_298;
      v114[0] = v123;
      v50 = off_1E33AE328[v87]((int)v114, (WebCore::InlineIterator::BoxModernPath *)v86);
      WTF::append<char16_t,1024ul>(&v98, v50, v51);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118) & 1) == 0)
      {
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v118) & 1) == 0
          && (WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)&v118) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4C224);
        }
        if (v121 == -1)
          goto LABEL_298;
        v114[0] = v123;
        if ((((uint64_t (*)(_QWORD *, WebCore::Node **))off_1E33AE2E8[v121])(v114, &v118) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B4C204);
        }
        if (v121 == -1)
          goto LABEL_298;
        v114[0] = v123;
        v52 = off_1E33AE328[v121]((int)v114, (WebCore::InlineIterator::BoxModernPath *)&v118);
        WTF::append<char16_t,1024ul>(&v98, v52, v53);
      }
      v85 = (WTF *)WTF::wordBreakIterator();
      if (v121 != -1)
        ((void (*)(_QWORD *, WebCore::Node **))v17[v121])(v114, &v118);
      v54 = v122;
      v122 = 0;
      if (v54)
      {
        v55 = *((unsigned int *)v54 + 9);
        v56 = (unsigned int *)*((_QWORD *)v54 + 3);
        if ((_DWORD)v55)
        {
          v57 = 24 * v55;
          do
          {
            v58 = v56[4];
            if ((_DWORD)v58 != -1)
              ((void (*)(WebCore::Node **, unsigned int *))v17[v58])(&v118, v56);
            v56[4] = -1;
            v56 += 6;
            v57 -= 24;
          }
          while (v57);
          v56 = (unsigned int *)*((_QWORD *)v54 + 3);
        }
        if (v56)
        {
          *((_QWORD *)v54 + 3) = 0;
          *((_DWORD *)v54 + 8) = 0;
          WTF::fastFree((WTF *)v56, v18);
        }
        v59 = *((unsigned int *)v54 + 4);
        if ((_DWORD)v59 != -1)
          ((void (*)(WebCore::Node **, char *))off_1E33AE258[v59])(&v118, v54);
        *((_DWORD *)v54 + 4) = -1;
        WTF::fastFree((WTF *)v54, v18);
      }
      if (v87 != -1)
        ((void (*)(WebCore::Node **, _BYTE *))v17[v87])(&v118, v86);
      v87 = -1;
    }
    else
    {
      if ((v24 & 1) != 0)
        goto LABEL_189;
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE2E8[v92])(&v118, v91) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B4C1E4);
      }
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      off_1E33AE328[v92]((int)&v118, (WebCore::InlineIterator::BoxModernPath *)v91);
      v85 = (WTF *)WTF::wordBreakIterator();
      if (v111 == -1)
      {
        if (v92 == -1)
          goto LABEL_189;
      }
      else if (v92 == -1)
      {
        ((void (*)(WebCore::Node **, _QWORD *))v17[v111])(&v118, v110);
        v111 = -1;
        goto LABEL_189;
      }
      v118 = (WebCore::Node *)v110;
      ((void (*)(WebCore::Node **, _QWORD *, unsigned int *))off_1E33AE268[v92])(&v118, v110, v91);
    }
LABEL_189:
    if (!v85)
    {
      v20 = 3;
      goto LABEL_245;
    }
    v60 = v17;
    ubrk_first();
    if (v92 == -1)
      goto LABEL_298;
    v118 = (WebCore::Node *)v116;
    if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE2E8[v92])(&v118, v91) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B4C0B0);
    }
    if (v92 == -1)
      goto LABEL_298;
    v118 = (WebCore::Node *)v116;
    ((void (*)(WebCore::Node **, unsigned int *))off_1E33AE338[v92])(&v118, v91);
    if (v92 == -1)
      goto LABEL_298;
    v118 = (WebCore::Node *)v116;
    v61 = ((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v92])(&v118, v91);
    if (a3)
    {
      if (a3 == 1)
      {
        if (v92 == -1)
          goto LABEL_298;
        v118 = (WebCore::Node *)v116;
        v62 = ((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v92])(&v118, v91) & 1;
      }
      else
      {
        LOBYTE(v62) = 0;
      }
    }
    else
    {
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      LOBYTE(v62) = (((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE278[v92])(&v118, v91) & 1) == 0;
    }
    if (v84)
      v63 = v83 ^ v61;
    else
      v63 = ~(_BYTE)v62;
    v64 = v93;
    if ((v63 & 1) != 0)
    {
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE2E8[v92])(&v118, v91) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B4C124);
      }
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      v65 = ((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE348[v92])(&v118, v91);
      v66 = v90;
      isBoundary = ubrk_isBoundary();
      if (v66)
        v68 = v64 == v65;
      else
        v68 = 0;
      v17 = v60;
      if (v68 || isBoundary)
      {
        if (WTF::isWordTextBreak(v85, (UBreakIterator *)v18))
        {
          v69 = v93;
          if (v69 != WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v91)
            || !HIBYTE(v90))
          {
LABEL_247:
            v78 = v94;
            v94 = 0;
            *a1 = v78;
            v20 = 1;
            v77 = (char *)(a1 + 2);
            v76 = (int *)(a1 + 1);
            goto LABEL_244;
          }
        }
      }
    }
    else
    {
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      if ((((uint64_t (*)(WebCore::Node **, unsigned int *))off_1E33AE2E8[v92])(&v118, v91) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B4C144);
      }
      if (v92 == -1)
        goto LABEL_298;
      v118 = (WebCore::Node *)v116;
      if (v64 == ((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE338[v92])(&v118, v91)
        && HIBYTE(v90)
        || ubrk_isBoundary())
      {
        ubrk_following();
        if (WTF::isWordTextBreak(v85, v70))
        {
          if (v92 == -1)
            goto LABEL_298;
          v71 = v93;
          v118 = (WebCore::Node *)v116;
          if (v71 != ((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E33AE228[v92])(&v118, v91)
            || !(_BYTE)v90)
          {
            goto LABEL_247;
          }
        }
      }
    }
    v72 = v106;
    if (v105)
    {
      if (v106)
        *((_DWORD *)v106 + 6) += 2;
      v73 = v101;
      v101 = v72;
      if (v73)
      {
        if (*((_DWORD *)v73 + 6) == 2)
        {
          if ((*((_WORD *)v73 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v73);
        }
        else
        {
          *((_DWORD *)v73 + 6) -= 2;
        }
      }
      v102 = v107;
      v103 = v108;
      v104 = v109;
    }
    else
    {
      if (v106)
        *((_DWORD *)v106 + 6) += 2;
      v101 = v72;
      v102 = v107;
      v103 = v108;
      v104 = v109;
      v105 = 1;
    }
    v74 = v94;
    if (v94)
      *((_DWORD *)v94 + 6) += 2;
    v75 = v106;
    v106 = v74;
    if (!v75)
      goto LABEL_252;
    if (*((_DWORD *)v75 + 6) == 2)
    {
      if ((*((_WORD *)v75 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v75);
LABEL_252:
      v20 = 0;
      goto LABEL_243;
    }
    v20 = 0;
    *((_DWORD *)v75 + 6) -= 2;
LABEL_243:
    v76 = &v107;
    v77 = &v109;
LABEL_244:
    *v76 = v95;
    *((_BYTE *)v76 + 4) = v96;
    *v77 = v97;
LABEL_245:
    if (v92 != -1)
      ((void (*)(WebCore::Node **, unsigned int *))v17[v92])(&v118, v91);
LABEL_24:
    v21 = v94;
    v94 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
  }
  while (!v20 || v20 == 2);
  if (v20 == 3)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((_BYTE *)a1 + 16) = 1;
  }
  v79 = v98;
  if (v100 != (_BYTE *)v98 && v98)
  {
    v98 = 0;
    LODWORD(v99) = 0;
    WTF::fastFree(v79, v18);
  }
  if (v105)
  {
    v80 = v101;
    v101 = 0;
    if (v80)
    {
      if (*((_DWORD *)v80 + 6) == 2)
      {
        if ((*((_WORD *)v80 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v80);
      }
      else
      {
        *((_DWORD *)v80 + 6) -= 2;
      }
    }
  }
  result = v106;
  v106 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  if (v111 != -1)
    return (WebCore::Node *)((uint64_t (*)(WTF **, _QWORD *))v17[v111])(&v98, v110);
  return result;
}

WebCore::Node *WebCore::startOfEditableContent@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v4;
  WebCore::Node *result;
  WebCore::Node *v6;
  char v7;
  char v8;
  WebCore::Node *v9;
  int v10;
  char v11;
  WebCore::Node *v12;

  v4 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v4 + 6) += 2;
  v9 = v4;
  v10 = *((_DWORD *)this + 2);
  v11 = *((_BYTE *)this + 12);
  WebCore::highestEditableRoot((uint64_t)&v9, 0, (uint64_t *)&v12);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v6 = v12;
  if (v12)
  {
    v7 = *((_WORD *)v12 + 14);
    *((_DWORD *)v12 + 6) += 2;
    v9 = v6;
    v10 = 0;
    if ((v7 & 1) != 0)
      v8 = 0;
    else
      v8 = 3;
    v11 = v8;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v9, a2);
    *(_BYTE *)(a2 + 16) = 1;
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

WebCore::Node *WebCore::endOfEditableContent@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v4;
  WebCore::Node *result;
  WebCore::Node *v6;
  __int16 v7;
  uint64_t v8;
  char v9;
  WebCore::Node *v10;
  int v11;
  char v12;
  WebCore::Node *v13;

  v4 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v4 + 6) += 2;
  v10 = v4;
  v11 = *((_DWORD *)this + 2);
  v12 = *((_BYTE *)this + 12);
  WebCore::highestEditableRoot((uint64_t)&v10, 0, (uint64_t *)&v13);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v6 = v13;
  if (v13)
  {
    v7 = *((_WORD *)v13 + 14);
    *((_DWORD *)v13 + 6) += 2;
    if ((v7 & 1) != 0)
    {
      v8 = *((_QWORD *)v6 + 10);
      v9 = 0;
      if (v8)
        LODWORD(v8) = *(_DWORD *)(v8 + 4);
    }
    else
    {
      LODWORD(v8) = 0;
      v9 = 4;
    }
    v10 = v6;
    v11 = v8;
    v12 = v9;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v10, a2);
    *(_BYTE *)(a2 + 16) = 1;
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

WebCore::Node *WebCore::rightWordPosition@<X0>(WebCore *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v5;
  WebCore::Node *result;
  WebCore::Node *v7;
  const WebCore::Position *v8;
  _BOOL4 isEditablePosition;
  WebCore::Node *v10;
  char v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int v14;
  char v15;
  char v16;

  WebCore::visualWordPosition((WebCore::Node **)a3, (uint64_t)this, 1, (int)a2);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore(this, (const WebCore::VisiblePosition *)a3, 0, (uint64_t)&v13);
  v5 = v13;
  result = *(WebCore::Node **)a3;
  *(_QWORD *)a3 = v13;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
        v5 = *(WebCore::Node **)a3;
      }
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  *(_DWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 12) = v15;
  *(_BYTE *)(a3 + 16) = v16;
  if (!v5)
  {
    v7 = *(WebCore::Node **)this;
    if (*(_QWORD *)this)
      *((_DWORD *)v7 + 6) += 2;
    v13 = v7;
    v14 = *((_DWORD *)this + 2);
    v15 = *((_BYTE *)this + 12);
    isEditablePosition = WebCore::isEditablePosition((uint64_t)&v13, 0);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (isEditablePosition)
    {
      v10 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
        *((_DWORD *)v10 + 6) += 2;
      v13 = v10;
      v14 = *((_DWORD *)this + 2);
      v15 = *((_BYTE *)this + 12);
      v11 = WebCore::directionOfEnclosingBlock((WebCore *)&v13, v8);
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      if ((v11 & 1) != 0)
        WebCore::startOfEditableContent(this, (uint64_t)&v13);
      else
        WebCore::endOfEditableContent(this, (uint64_t)&v13);
      result = *(WebCore::Node **)a3;
      *(_QWORD *)a3 = v13;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      *(_DWORD *)(a3 + 8) = v14;
      *(_BYTE *)(a3 + 12) = v15;
      *(_BYTE *)(a3 + 16) = v16;
    }
  }
  return result;
}

uint64_t WebCore::suffixLengthForRange(_DWORD *a1, _BYTE *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int IntPropertyValue;
  _BYTE v20[96];
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  WebCore::TextIterator::TextIterator((uint64_t)v20, a1, 0);
  if (!v21)
  {
    v3 = 0;
LABEL_41:
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v20, v2);
    return v3;
  }
  LODWORD(v3) = 0;
  while (1)
  {
    v4 = v23;
    if ((_DWORD)v23)
      break;
    LODWORD(v14) = 0;
    v15 = 0x100000000;
    v5 = "";
LABEL_37:
    WTF::append<char16_t,1024ul>(a2, (uint64_t)v5, v15);
    v3 = (v14 + v3);
    if (v14 >= v4)
    {
      WebCore::TextIterator::advance((WebCore::TextIterator *)v20, (WTF::StringImpl *)v2);
      if (v21)
        continue;
    }
    goto LABEL_41;
  }
  v5 = v22;
  if ((v23 & 0xFF00000000) != 0)
  {
    v6 = 0;
    v16 = v23;
    while (1)
    {
      IntPropertyValue = u_getIntPropertyValue(v5[v6], UCHAR_LINE_BREAK);
      if (IntPropertyValue > 0x25 || ((1 << IntPropertyValue) & 0x2001004000) == 0)
        break;
      if (v16 == ++v6)
      {
        LODWORD(v6) = v4;
        break;
      }
    }
LABEL_29:
    if (v6 >= v4)
      v14 = v4;
    else
      v14 = v6;
    if (v6 >= v4)
    {
      v15 = v4;
    }
    else if ((v4 & 0xFF00000000) != 0)
    {
      v15 = v14 | 0x100000000;
    }
    else
    {
      v15 = v14;
    }
    goto LABEL_37;
  }
  LODWORD(v6) = 0;
  while (1)
  {
    v7 = v6 + 1;
    result = *(unsigned __int16 *)&v5[2 * v6];
    if ((_DWORD)v6 + 1 != (_DWORD)v4 && (result & 0xFC00) == 0xD800)
      break;
LABEL_15:
    v12 = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
    if (v12 <= 0x25 && ((1 << v12) & 0x2001004000) != 0)
    {
      LODWORD(v6) = v7;
      if (v7 < v4)
        continue;
    }
    goto LABEL_29;
  }
  if (v7 < v4)
  {
    v9 = *(unsigned __int16 *)&v5[2 * v7];
    v10 = (v9 & 0xFC00) == 56320;
    v11 = v9 + ((_DWORD)result << 10) - 56613888;
    if (v10)
      v7 = v6 + 2;
    else
      v7 = v6 + 1;
    if (v10)
      LODWORD(result) = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::prefixLengthForRange(WebCore::SimpleRange *a1, uint64_t a2)
{
  uint64_t result;
  WTF::StringImpl *v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _BYTE v18[88];
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;

  result = (uint64_t)WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)v18, a1);
  if (!v19)
  {
    v4 = 0;
LABEL_36:
    WebCore::SimplifiedBackwardsTextIterator::~SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)v18, v3);
    return v4;
  }
  LODWORD(v4) = 0;
  while (1)
  {
    v5 = v20;
    v6 = v21;
    if (!(_DWORD)v21)
    {
LABEL_23:
      v7 = 0;
      goto LABEL_24;
    }
    v7 = v21;
    if ((v21 & 0xFF00000000) == 0)
      break;
    v7 = v21;
    while (1)
    {
      v13 = v7 - 1;
      result = u_getIntPropertyValue(*((unsigned __int8 *)v5 + v13), UCHAR_LINE_BREAK);
      if (result > 0x25 || ((1 << result) & 0x2001004000) == 0)
        break;
      --v7;
      if (!v13)
        goto LABEL_23;
    }
LABEL_24:
    v15 = v6 - v7;
    if (v6 <= v7)
    {
      v6 = 0x100000000;
      v5 = (__int16 *)"";
    }
    else if (v7)
    {
      v16 = v6 - (unint64_t)v7;
      if ((v6 & 0xFF00000000) != 0)
      {
        if (v16 < v15)
          goto LABEL_37;
        v5 = (__int16 *)((char *)v5 + v7);
        v6 = v15 | 0x100000000;
      }
      else
      {
        if (v16 < v15)
          goto LABEL_37;
        v5 += v7;
        v6 = v6 - v7;
      }
    }
    WebCore::prepend(a2, v5, v6);
    v4 = (v15 + v4);
    if ((int)v7 <= 0)
    {
      result = WebCore::SimplifiedBackwardsTextIterator::advance((WebCore::SimplifiedBackwardsTextIterator *)v18, v3);
      if (v19)
        continue;
    }
    goto LABEL_36;
  }
  while (1)
  {
    v8 = v7 - 1;
    if (v7 - 1 >= v6)
      break;
    result = (unsigned __int16)v5[v8];
    if ((result & 0xFC00) == 0xDC00 && v7 != 1)
    {
      if (v7 - 2 >= v6)
        break;
      v9 = (unsigned __int16)v5[v7 - 2];
      v10 = v9 & 0xFC00;
      v11 = result + (v9 << 10) - 56613888;
      if (v10 == 55296)
      {
        v8 = v7 - 2;
        LODWORD(result) = v11;
      }
    }
    result = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
    if (result <= 0x25 && ((1 << result) & 0x2001004000) != 0)
    {
      v7 = v8;
      if (v8)
        continue;
    }
    goto LABEL_24;
  }
LABEL_37:
  __break(1u);
  return result;
}

void *WebCore::prepend(uint64_t a1, __int16 *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  size_t v14;
  void *v15;
  void *result;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  __int16 v20;
  __int16 v21;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + a3;
  if (v6 >= (int)v7 + (int)a3)
  {
    v14 = 2 * v7;
  }
  else
  {
    v9 = v6 + (v6 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8)
      v11 = (v7 + a3);
    else
      v11 = v10;
    v12 = *(void **)a1;
    if (v11 < 0x401)
    {
      v13 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1024;
    }
    else
    {
      if (v11 >> 31)
        goto LABEL_26;
      v13 = (void *)WTF::fastMalloc((WTF *)(2 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v13;
    }
    v14 = 2 * v7;
    memcpy(v13, v12, v14);
    if ((void *)(a1 + 16) != v12 && v12)
    {
      if (*(void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v12, v15);
    }
  }
  *(_DWORD *)(a1 + 12) = v8;
  result = memmove((void *)(*(_QWORD *)a1 + 2 * a3), *(const void **)a1, v14);
  if ((_DWORD)a3)
  {
    v17 = a3;
    v18 = *(unsigned int *)(a1 + 12);
    v19 = *(_WORD **)a1;
    if ((a3 & 0xFF00000000) != 0)
    {
      while (v18)
      {
        v21 = *(unsigned __int8 *)a2;
        a2 = (__int16 *)((char *)a2 + 1);
        *v19++ = v21;
        --v18;
        if (!--v17)
          return result;
      }
    }
    else
    {
      while (v18)
      {
        v20 = *a2++;
        *v19++ = v20;
        --v18;
        if (!--v17)
          return result;
      }
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x195B4CB64);
  }
  return result;
}

uint64_t WebCore::backwardSearchForBoundaryWithTextIterator(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, uint64_t, char *))
{
  uint64_t (*v4)(_QWORD, uint64_t, _QWORD, uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  size_t v23;
  void *v24;
  BOOL v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *__dst;
  char v33;

  v33 = 0;
  if (!*(_QWORD *)(a1 + 88))
    return 0;
  v4 = a4;
  v8 = 0;
  __dst = a2 + 2;
  do
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_18;
    v10 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v10)
      goto LABEL_18;
    if ((*(_BYTE *)(v10 + 45) & 2) != 0)
      v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 104) + 228) & 0xC) != 0)
    {
      v11 = *(_QWORD *)(a1 + 136);
      v12 = *((unsigned int *)a2 + 2);
      v13 = *((unsigned int *)a2 + 3);
      v14 = v13 + v11;
      if (v12 >= (int)v13 + (int)v11)
      {
        v23 = 2 * v13;
      }
      else
      {
        v15 = v12 + (v12 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v14)
          v17 = (v13 + v11);
        else
          v17 = v16;
        v18 = (void *)*a2;
        if (v17 < 0x401)
        {
          v20 = __dst;
          *a2 = __dst;
          *((_DWORD *)a2 + 2) = 1024;
          v19 = __dst;
        }
        else
        {
          if (v17 >> 31)
            goto LABEL_40;
          v19 = (void *)WTF::fastMalloc((WTF *)(2 * v17));
          *((_DWORD *)a2 + 2) = v17;
          *a2 = v19;
          v20 = __dst;
        }
        v23 = 2 * v13;
        memcpy(v19, v18, v23);
        v25 = v20 == v18;
        v4 = a4;
        if (!v25 && v18)
        {
          if ((void *)*a2 == v18)
          {
            *a2 = 0;
            *((_DWORD *)a2 + 2) = 0;
          }
          WTF::fastFree((WTF *)v18, v24);
        }
      }
      v26 = v11;
      *((_DWORD *)a2 + 3) = v14;
      memmove((void *)(*a2 + 2 * v11), (const void *)*a2, v23);
      v22 = *((_DWORD *)a2 + 3);
      if ((_DWORD)v11)
      {
        v27 = (_WORD *)*a2;
        v28 = *((unsigned int *)a2 + 3);
        while (v28)
        {
          *v27++ = 120;
          --v28;
          if (!--v26)
            goto LABEL_19;
        }
LABEL_40:
        __break(0xC471u);
        JUMPOUT(0x195B4CD8CLL);
      }
    }
    else
    {
LABEL_18:
      WebCore::prepend((uint64_t)a2, *(__int16 **)(a1 + 128), *(_QWORD *)(a1 + 136));
      v22 = *((_DWORD *)a2 + 3);
    }
LABEL_19:
    if (v22 > a3)
    {
      v8 = v4(*a2, v22, v22 - a3, 1, &v33);
      if (v8 > 1)
        break;
    }
    WebCore::SimplifiedBackwardsTextIterator::advance((WebCore::SimplifiedBackwardsTextIterator *)a1, v21);
  }
  while (*(_QWORD *)(a1 + 88));
  if (v33)
  {
    v29 = *((unsigned int *)a2 + 3);
    if (v29 > a3)
      return v4(*a2, v29, v29 - a3, 0, &v33);
  }
  return v8;
}

uint64_t WebCore::forwardSearchForBoundaryWithTextIterator(WebCore::TextIterator *this, _QWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t (*v4)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  void *__dst;
  char v29;

  v29 = 0;
  if (!*((_QWORD *)this + 12))
    return 0;
  v4 = a4;
  v8 = 0;
  __dst = a2 + 2;
  do
  {
    if (!WebCore::TextIterator::node((int32x2_t *)this)
      || (*(_QWORD *)(WebCore::TextIterator::node((int32x2_t *)this) + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      goto LABEL_18;
    }
    v9 = WebCore::TextIterator::node((int32x2_t *)this);
    v11 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v11 + 0x2D) & 2) != 0)
      v11 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 104) + 228) & 0xC) != 0)
    {
      v12 = *((_QWORD *)this + 19);
      v13 = *((unsigned int *)a2 + 2);
      v14 = *((unsigned int *)a2 + 3);
      v15 = v14 + v12;
      if (v13 < (int)v14 + (int)v12)
      {
        v16 = v13 + (v13 >> 2);
        if (v16 >= 0x10)
          v17 = v16 + 1;
        else
          v17 = 16;
        if (v17 <= v15)
          v18 = (v14 + v12);
        else
          v18 = v17;
        v19 = (void *)*a2;
        if (v18 < 0x401)
        {
          v21 = __dst;
          *a2 = __dst;
          *((_DWORD *)a2 + 2) = 1024;
          v20 = __dst;
        }
        else
        {
          if (v18 >> 31)
            goto LABEL_42;
          v20 = (void *)WTF::fastMalloc((WTF *)(2 * v18));
          *((_DWORD *)a2 + 2) = v18;
          *a2 = v20;
          v21 = __dst;
        }
        memcpy(v20, v19, 2 * v14);
        v22 = v21 == v19;
        v4 = a4;
        if (!v22 && v19)
        {
          if ((void *)*a2 == v19)
          {
            *a2 = 0;
            *((_DWORD *)a2 + 2) = 0;
          }
          WTF::fastFree((WTF *)v19, v10);
        }
      }
      *((_DWORD *)a2 + 3) = v15;
      if ((_DWORD)v12)
      {
        v23 = v12;
        if (v15 >= v14)
          v24 = v12;
        else
          v24 = 0;
        v25 = (_WORD *)(*a2 + 2 * v14);
        while (v24)
        {
          *v25++ = 120;
          --v24;
          if (!--v23)
            goto LABEL_19;
        }
LABEL_42:
        __break(0xC471u);
        JUMPOUT(0x195B4CFC0);
      }
    }
    else
    {
LABEL_18:
      WTF::append<char16_t,1024ul>(a2, *((_QWORD *)this + 18), *((_QWORD *)this + 19));
      v15 = *((_DWORD *)a2 + 3);
    }
LABEL_19:
    if (v15 > a3)
    {
      v8 = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, char *))v4)(*a2, v15, a3, 1, &v29);
      if (*((_DWORD *)a2 + 3) != (_DWORD)v8)
        break;
    }
    WebCore::TextIterator::advance(this, (WTF::StringImpl *)v10);
  }
  while (*((_QWORD *)this + 12));
  if (v29 && *((_DWORD *)a2 + 3) > a3)
    return v4(*a2);
  return v8;
}

uint64_t WebCore::startWordBoundary(uint64_t result, uint64_t a2, unsigned int a3, int a4, _BYTE *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  unsigned int v20;
  uint64_t v21;

  v8 = result;
  v9 = BYTE4(a2);
  if (a4)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    v10 = a3;
    if (BYTE4(a2))
      v10 = a3 | 0x100000000;
    v11 = a2 <= a3 ? a2 : v10;
    if (!(_DWORD)v11)
      goto LABEL_35;
    if ((v11 & 0xFF00000000) == 0)
    {
      v12 = v11;
      while (v12 - 1 < v11)
      {
        result = *(unsigned __int16 *)(v8 + 2 * (v12 - 1));
        if ((result & 0xFC00) == 0xDC00)
        {
          if (v12 == 1)
          {
            v12 = 0;
          }
          else
          {
            if (v12 - 2 >= v11)
              goto LABEL_47;
            v13 = *(unsigned __int16 *)(v8 + 2 * (v12 - 2));
            v14 = (v13 & 0xFC00) == 55296;
            v15 = result + (v13 << 10) - 56613888;
            if (v14)
              v12 -= 2;
            else
              --v12;
            if (v14)
              LODWORD(result) = v15;
          }
        }
        else
        {
          --v12;
        }
        result = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
        if (result > 0x25 || ((1 << result) & 0x2001004000) == 0)
          goto LABEL_37;
        if (!v12)
          goto LABEL_35;
      }
      goto LABEL_47;
    }
    v17 = v11 - 1;
    while (1)
    {
      result = u_getIntPropertyValue(*(unsigned __int8 *)(v8 + v17), UCHAR_LINE_BREAK);
      if (result > 0x25 || ((1 << result) & 0x2001004000) == 0)
        break;
      if (!(unint64_t)v17--)
        goto LABEL_35;
    }
    if (v17 == -1)
    {
LABEL_35:
      result = 0;
      *a5 = 1;
      return result;
    }
  }
LABEL_37:
  *a5 = 0;
  v21 = 0;
  v20 = a3 - 1;
  if (v9)
  {
    if (v20 < a2)
    {
LABEL_46:
      WebCore::findWordBoundary(v8, a2, v20, (unsigned int *)&v21 + 1, (int *)&v21);
      return HIDWORD(v21);
    }
  }
  else if (v20 < a2)
  {
    if (a3 == 1 || (*(_WORD *)(v8 + 2 * v20) & 0xFC00) != 0xDC00)
      goto LABEL_46;
    if (a3 - 2 < a2)
    {
      if ((*(_WORD *)(v8 + 2 * (a3 - 2)) & 0xFC00) == 0xD800)
        v20 = a3 - 2;
      goto LABEL_46;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

WTF *WebCore::previousBoundary(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD, uint64_t, char *), int a4)
{
  WebCore::Node *v4;
  int v5;
  uint64_t v10;
  _DWORD *v11;
  WTF *result;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  uint64_t v17;
  WebCore::Node *v18;
  void *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  UChar32 v22;
  WebCore::Node *v23;
  unsigned int IntPropertyValue;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  WebCore::Node *v35;
  uint64_t v36;
  WebCore::Node *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  WebCore::Node *v48;
  WTF::StringImpl *v49;
  WebCore::Node *v50;
  int v51;
  char v52;
  char v53;
  char v54;
  WTF::StringImpl *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  int v62;
  char v63;
  WebCore::Node *v64;
  int v65;
  WebCore::Node *v66;
  uint64_t v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  int v73;
  char v74;
  WebCore::Node *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  WebCore::Node *v84;
  int v85;
  WebCore::Node *v86;
  int v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[2048];
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;

  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v10 + 24) += 2;
  v89 = (WTF *)v10;
  v11 = (_DWORD *)(a2 + 8);
  LODWORD(v90) = *(_DWORD *)(a2 + 8);
  BYTE4(v90) = *(_BYTE *)(a2 + 12);
  result = (WTF *)WebCore::Position::parentEditingBoundary((uint64_t *)&v89, &v92);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v13 = v92;
  if (!v92)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v89 = (WTF *)v91;
  v90 = 1024;
  *(_DWORD *)(v92 + 24) += 2;
  v72 = (WebCore::Node *)v13;
  v73 = 0;
  WebCore::makeSimpleRange<WebCore::BoundaryPoint,WebCore::VisiblePosition const&>((uint64_t *)&v72, a2, (uint64_t)&v84);
  v15 = v72;
  v72 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (!v88)
  {
LABEL_36:
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_135;
  }
  if (!a4)
    goto LABEL_34;
  if (!(*(_QWORD *)a2
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0))
    goto LABEL_34;
  WebCore::startOfParagraph(a2, 1, &v72);
  v17 = WebCore::operator==((uint64_t *)a2, (uint64_t *)&v72);
  v18 = v72;
  v72 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if (!(_DWORD)v17)
  {
LABEL_34:
    WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)a2, (uint64_t)&v61);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v61))
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v61, (uint64_t)&v72);
      v66 = v72;
      LODWORD(v67) = v73;
      BYTE4(v67) = v74;
    }
    LOBYTE(v68) = 1;
    v21 = v61;
    v61 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v22 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v66);
    v23 = v66;
    v66 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    IntPropertyValue = u_getIntPropertyValue(v22, UCHAR_LINE_BREAK);
    v17 = 0;
    if (IntPropertyValue <= 0x25 && ((1 << IntPropertyValue) & 0x2001004000) != 0)
    {
      if (!v88)
        goto LABEL_192;
      *(_DWORD *)(v13 + 24) += 2;
      v25 = *(_WORD *)(v13 + 28);
      if ((v25 & 1) != 0)
      {
        v27 = *(_QWORD *)(v13 + 80);
        if (v27)
          LODWORD(v27) = *(_DWORD *)(v27 + 4);
      }
      else if ((v25 & 4) != 0 && (v26 = *(_QWORD *)(v13 + 80)) != 0)
      {
        LODWORD(v27) = 0;
        do
        {
          LODWORD(v27) = v27 + 1;
          v26 = *(_QWORD *)(v26 + 56);
        }
        while (v26);
      }
      else
      {
        LODWORD(v27) = 0;
      }
      v28 = v86;
      *((_DWORD *)v86 + 6) += 2;
      v72 = v28;
      v73 = v87;
      v75 = (WebCore::Node *)v13;
      v76 = v27;
      v17 = WebCore::suffixLengthForRange(&v72, &v89);
      v29 = v75;
      v75 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      v30 = v72;
      v72 = 0;
      if (v30)
        goto LABEL_60;
    }
    goto LABEL_62;
  }
  if (!v88)
    goto LABEL_192;
  WebCore::endOfParagraph((WebCore::Node *)a2, 1, &v61);
  v4 = v84;
  v5 = v85;
  *((_DWORD *)v84 + 6) += 2;
  v17 = (uint64_t)v61;
  if (!v61)
    goto LABEL_193;
  *((_DWORD *)v61 + 6) += 2;
  v93 = v17;
  v94 = v62;
  v95 = v63;
  WebCore::makeBoundaryPoint(&v93, (uint64_t)&v72);
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  while (1)
  {
    if ((_BYTE)v75)
    {
      v66 = v4;
      LODWORD(v67) = v5;
      v68 = v72;
      v69 = v73;
      v70 = 1;
    }
    else
    {
      LOBYTE(v66) = 0;
      v70 = 0;
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
    }
    if (v17)
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
    if (!v70)
      goto LABEL_36;
    WebCore::TextIterator::TextIterator((uint64_t)&v72, &v66, 0);
    while (v78)
    {
      WTF::append<char16_t,1024ul>(&v89, v80, v81);
      WebCore::TextIterator::advance((WebCore::TextIterator *)&v72, v20);
    }
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v72, v19);
    v17 = HIDWORD(v90);
    if (v70)
    {
      v48 = v68;
      v68 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
      v30 = v66;
      v66 = 0;
      if (v30)
      {
LABEL_60:
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
    }
LABEL_62:
    if (!v88)
      goto LABEL_192;
    WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)&v66, (const WebCore::SimpleRange *)&v84);
    v31 = WebCore::backwardSearchForBoundaryWithTextIterator((uint64_t)&v66, &v89, v17, a3);
    v4 = v71;
    if (!(_DWORD)v31)
      break;
    a3 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))v31;
    if (v71)
    {
      v33 = *((_DWORD *)v71 + 6);
      *((_DWORD *)v71 + 6) = v33 + 6;
      v34 = v33 + 4;
      if (v34)
      {
        *((_DWORD *)v4 + 6) = v34;
      }
      else if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v4);
      }
      v35 = v4;
    }
    else
    {
      if (!v88)
        goto LABEL_192;
      v4 = v84;
      v35 = v86;
      *((_DWORD *)v84 + 6) += 2;
      *((_DWORD *)v35 + 6) += 2;
    }
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
    if ((*((_WORD *)v4 + 14) & 2) != 0)
      v37 = v4;
    else
      v37 = 0;
    if (v37)
    {
      if (!(_DWORD)v17)
      {
        v38 = *((_QWORD *)v37 + 10);
        if (v38)
        {
          if (a3 <= *(_DWORD *)(v38 + 4))
          {
            *((_DWORD *)v4 + 6) += 2;
            v72 = v4;
            v73 = (int)a3;
            if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v4 + 208))(v4) & 1) != 0)
              v44 = 8;
            else
              v44 = 10;
            v74 = v44;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v72, a1);
            *(_BYTE *)(a1 + 16) = 1;
            if (*((_DWORD *)v4 + 6) != 2)
            {
              *((_DWORD *)v4 + 6) -= 2;
              goto LABEL_134;
            }
            if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            {
              v60 = v4;
LABEL_187:
              WebCore::Node::removedLastRef(v60);
              goto LABEL_134;
            }
            goto LABEL_134;
          }
        }
      }
    }
    if (v88)
    {
      WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)&v72, (const WebCore::SimpleRange *)&v84);
      v82 = 0;
      v83 = 1;
      while (v77 && !v79)
        WebCore::SimplifiedBackwardsTextIterator::advance((WebCore::SimplifiedBackwardsTextIterator *)&v72, v39);
      if (HIDWORD(v90) - (unint64_t)v17 <= a3)
        goto LABEL_119;
      v40 = HIDWORD(v90) - ((_DWORD)a3 + v17);
      if (v40 < 1)
        goto LABEL_119;
      v83 = 0;
      v41 = v40 - (v79 - HIDWORD(v82));
      if (v40 < v79 - HIDWORD(v82))
      {
        v42 = HIDWORD(v82) + v40;
        v43 = v82 + v40;
        HIDWORD(v82) = v42;
        goto LABEL_94;
      }
      LODWORD(v82) = v82 + v79 - HIDWORD(v82);
      WebCore::SimplifiedBackwardsTextIterator::advance((WebCore::SimplifiedBackwardsTextIterator *)&v72, v39);
      if (!v77)
      {
LABEL_118:
        v83 = 1;
        HIDWORD(v82) = 0;
        goto LABEL_119;
      }
      while (1)
      {
        if (v79)
        {
          if (v41 < v79)
          {
            v43 = v82 + v41;
            HIDWORD(v82) = v41;
LABEL_94:
            LODWORD(v82) = v43;
LABEL_119:
            WebCore::BackwardsCharacterIterator::range((uint64_t)&v72, (uint64_t)&v61);
            v50 = v64;
            *((_DWORD *)v64 + 6) += 2;
            v51 = v65;
            v93 = (uint64_t)v50;
            v94 = v65;
            v52 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v50 + 208))(v50);
            if (v51)
              v53 = 10;
            else
              v53 = 9;
            if ((v52 & 1) != 0)
              v54 = 8;
            else
              v54 = v53;
            v95 = v54;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v93, a1);
            *(_BYTE *)(a1 + 16) = 1;
            if (*((_DWORD *)v50 + 6) == 2)
            {
              if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v50);
            }
            else
            {
              *((_DWORD *)v50 + 6) -= 2;
            }
            v56 = v64;
            v64 = 0;
            if (v56)
            {
              if (*((_DWORD *)v56 + 6) == 2)
              {
                if ((*((_WORD *)v56 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v56);
              }
              else
              {
                *((_DWORD *)v56 + 6) -= 2;
              }
            }
            v57 = v61;
            v61 = 0;
            if (v57)
            {
              if (*((_DWORD *)v57 + 6) == 2)
              {
                if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v57);
              }
              else
              {
                *((_DWORD *)v57 + 6) -= 2;
              }
            }
            WebCore::SimplifiedBackwardsTextIterator::~SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)&v72, v55);
            goto LABEL_134;
          }
          LODWORD(v82) = v82 + v79;
          v41 -= v79;
        }
        else
        {
          v83 = 1;
        }
        WebCore::SimplifiedBackwardsTextIterator::advance((WebCore::SimplifiedBackwardsTextIterator *)&v72, v49);
        if (!v77)
          goto LABEL_118;
      }
    }
LABEL_192:
    __break(1u);
LABEL_193:
    v93 = 0;
    v94 = v62;
    v95 = v63;
    WebCore::makeBoundaryPoint(&v93, (uint64_t)&v72);
  }
  if (v71)
  {
    v36 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)(v36 + 24) += 2;
    *(_QWORD *)a1 = v36;
    *(_DWORD *)(a1 + 8) = *v11;
    *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    goto LABEL_134;
  }
  if (!v88)
    goto LABEL_192;
  v45 = v84;
  *((_DWORD *)v84 + 6) += 2;
  v46 = v85;
  v72 = v45;
  v73 = v85;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v45 + 208))(v45) & 1) != 0)
  {
    v47 = 8;
  }
  else if (v46)
  {
    v47 = 10;
  }
  else
  {
    v47 = 9;
  }
  v74 = v47;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v72, a1);
  *(_BYTE *)(a1 + 16) = 1;
  if (*((_DWORD *)v45 + 6) != 2)
  {
    *((_DWORD *)v45 + 6) -= 2;
    goto LABEL_134;
  }
  if ((*((_WORD *)v45 + 15) & 0x400) == 0)
  {
    v60 = v45;
    goto LABEL_187;
  }
LABEL_134:
  WebCore::SimplifiedBackwardsTextIterator::~SimplifiedBackwardsTextIterator((WebCore::SimplifiedBackwardsTextIterator *)&v66, v32);
LABEL_135:
  if (v88)
  {
    v58 = v86;
    v86 = 0;
    if (v58)
    {
      if (*((_DWORD *)v58 + 6) == 2)
      {
        if ((*((_WORD *)v58 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v58);
      }
      else
      {
        *((_DWORD *)v58 + 6) -= 2;
      }
    }
    v59 = v84;
    v84 = 0;
    if (v59)
    {
      if (*((_DWORD *)v59 + 6) == 2)
      {
        if ((*((_WORD *)v59 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v59);
      }
      else
      {
        *((_DWORD *)v59 + 6) -= 2;
      }
    }
  }
  result = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    result = (WTF *)WTF::fastFree(result, v14);
  }
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      return (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v13);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::endWordBoundary(uint64_t result, uint64_t a2, unsigned int a3, int a4, _BYTE *a5)
{
  _BYTE *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  unsigned int IntPropertyValue;
  unint64_t v21;
  int v22;
  uint64_t v24;
  int v26;
  unsigned int v27;
  unsigned int v28;

  v5 = a5;
  v6 = a3;
  v7 = a2;
  v8 = result;
  if (!a4)
    goto LABEL_44;
  v9 = a2 - a3;
  if (a2 <= a3)
  {
    LODWORD(v11) = 0;
    goto LABEL_38;
  }
  if (!a3)
  {
    v10 = result;
    v11 = a2;
    goto LABEL_5;
  }
  v21 = a2 - (unint64_t)a3;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v21 >= v9)
    {
      v10 = result + a3;
      v11 = v9 | 0x100000000;
      goto LABEL_5;
    }
  }
  else if (v21 >= v9)
  {
    v10 = result + 2 * a3;
    v11 = a2 - a3;
LABEL_5:
    if ((_DWORD)v11)
    {
      v26 = a2 - a3;
      if ((v11 & 0xFF00000000) != 0)
      {
        v12 = 0;
        while (1)
        {
          IntPropertyValue = u_getIntPropertyValue(*(unsigned __int8 *)(v10 + v12), UCHAR_LINE_BREAK);
          if (IntPropertyValue > 0x25 || ((1 << IntPropertyValue) & 0x2001004000) == 0)
            break;
          if (v11 == ++v12)
          {
            LODWORD(v12) = v11;
            break;
          }
        }
      }
      else
      {
        v24 = result;
        LODWORD(v12) = 0;
        while (1)
        {
          v13 = v12 + 1;
          result = *(unsigned __int16 *)(v10 + 2 * v12);
          if ((_DWORD)v12 + 1 != (_DWORD)v11 && (result & 0xFC00) == 0xD800)
          {
            if (v13 >= v11)
              goto LABEL_46;
            v14 = *(unsigned __int16 *)(v10 + 2 * v13);
            v15 = (v14 & 0xFC00) == 56320;
            v16 = v14 + ((_DWORD)result << 10) - 56613888;
            if (v15)
              v13 = v12 + 2;
            else
              v13 = v12 + 1;
            if (v15)
              LODWORD(result) = v16;
          }
          v17 = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
          if (v17 > 0x25 || ((1 << v17) & 0x2001004000) == 0)
            break;
          LODWORD(v12) = v13;
          if (v13 >= v11)
          {
            LODWORD(v12) = v13;
            break;
          }
        }
        v6 = a3;
        v5 = a5;
        v8 = v24;
      }
      LODWORD(v9) = v26;
LABEL_39:
      if (v12 >= v11)
        v22 = v11;
      else
        v22 = v12;
      if (v22 == (_DWORD)v9)
      {
        *v5 = 1;
        return v7;
      }
LABEL_44:
      *v5 = 0;
      v27 = 0;
      WebCore::findWordBoundary(v8, v7, v6, &v28, (int *)&v27);
      return v27;
    }
LABEL_38:
    LODWORD(v12) = 0;
    goto LABEL_39;
  }
LABEL_46:
  __break(1u);
  return result;
}

WTF *WebCore::nextBoundary(uint64_t a1, uint64_t a2, WebCore::Node *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF *result;
  uint64_t v9;
  uint64_t v10;
  UChar32 v11;
  unsigned int IntPropertyValue;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  int v25;
  char v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  unsigned __int8 *v32;
  unint64_t v33;
  int v34;
  void *v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  _BOOL4 v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  int v42;
  int v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  char v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  const WebCore::VisiblePosition *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  unint64_t v57;
  WebCore::Node *v58;
  int v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  int v62;
  char v63;
  WebCore::Node *v64[2];
  char v65;
  WebCore::Node *v66;
  int v67;
  WebCore::Node *v68;
  unsigned int v69;
  WebCore::Node *v70;
  int v71;
  char v72;
  WebCore::Node *v73;
  char v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  WebCore::Node *v80;
  int v81;
  char v82;
  uint64_t v83;
  WebCore::Node *v84;
  int v85;
  WebCore::Node *v86;
  int v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[2048];
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v6 + 24) += 2;
  v93 = v6;
  v7 = a2 + 8;
  v94 = *(_DWORD *)(a2 + 8);
  v95 = *(_BYTE *)(a2 + 12);
  result = (WTF *)WebCore::Position::parentEditingBoundary(&v93, &v92);
  v9 = v92;
  if (!v92)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_155;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v92 + 40) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  v89 = (WTF *)v91;
  v90 = 1024;
  v11 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)a2);
  IntPropertyValue = u_getIntPropertyValue(v11, UCHAR_LINE_BREAK);
  v13 = 0;
  if (IntPropertyValue <= 0x25 && ((1 << IntPropertyValue) & 0x2001004000) != 0)
  {
    *(_DWORD *)(v10 + 24) += 2;
    v80 = (WebCore::Node *)v10;
    v81 = 0;
    WebCore::makeSimpleRange<WebCore::BoundaryPoint,WebCore::VisiblePosition const&>((uint64_t *)&v80, a2, (uint64_t)&v70);
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    if (!v74)
      goto LABEL_147;
    v13 = WebCore::prefixLengthForRange((WebCore::SimpleRange *)&v70, (uint64_t)&v89);
    if (v74)
    {
      v16 = v73;
      v73 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
      v17 = v70;
      v70 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
    }
  }
  *(_DWORD *)(v9 + 24) += 2;
  v18 = *(_WORD *)(v9 + 28);
  if ((v18 & 1) != 0)
  {
    v21 = *(_QWORD *)(v9 + 80);
    if (v21)
    {
      v20 = *(_DWORD *)(v21 + 4);
      goto LABEL_27;
    }
  }
  else if ((v18 & 4) != 0)
  {
    v19 = *(_QWORD *)(v9 + 80);
    if (v19)
    {
      v20 = 0;
      do
      {
        ++v20;
        v19 = *(_QWORD *)(v19 + 56);
      }
      while (v19);
      goto LABEL_27;
    }
  }
  v20 = 0;
LABEL_27:
  v22 = *(_QWORD *)a2;
  if (!v22)
    goto LABEL_190;
  *(_DWORD *)(v22 + 24) += 2;
  v80 = (WebCore::Node *)v22;
  v81 = *(_DWORD *)v7;
  v82 = *(_BYTE *)(v7 + 4);
  WebCore::makeBoundaryPoint((uint64_t *)&v80, (uint64_t)&v70);
  if (*(_DWORD *)(v22 + 24) == 2)
  {
    if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v22);
  }
  else
  {
    *(_DWORD *)(v22 + 24) -= 2;
  }
  while (2)
  {
    if (!(_BYTE)v73)
    {
      LOBYTE(v84) = 0;
      v88 = 0;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
          if (v88)
            goto LABEL_32;
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
LABEL_147:
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 1;
      goto LABEL_148;
    }
    v84 = v70;
    v85 = v71;
    v86 = (WebCore::Node *)v9;
    v87 = v20;
    v88 = 1;
LABEL_32:
    WebCore::TextIterator::TextIterator((uint64_t)&v80, &v84, 1);
    v23 = WebCore::forwardSearchForBoundaryWithTextIterator((WebCore::TextIterator *)&v80, &v89, v13, (uint64_t (*)(_QWORD))a3);
    a3 = (WebCore::Node *)v23;
    if (!v83 && HIDWORD(v90) == (_DWORD)v23)
    {
      if (v88)
      {
        v24 = v86;
        *((_DWORD *)v86 + 6) += 2;
        v25 = v87;
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v24 + 208))(v24) & 1) != 0)
        {
          v26 = 8;
        }
        else if (v25)
        {
          v26 = 10;
        }
        else
        {
          v26 = 9;
        }
        v93 = (uint64_t)v24;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        v94 = v25;
        v95 = v26;
        goto LABEL_121;
      }
      goto LABEL_189;
    }
    if (v23 <= v13)
    {
      v24 = (WebCore::Node *)v6;
      goto LABEL_121;
    }
    if (!v88)
      goto LABEL_189;
    WebCore::TextIterator::TextIterator((uint64_t)&v70, &v84, 1);
    v78 = 0;
    v79 = 1;
    while (v75 && !(_DWORD)v77)
      WebCore::TextIterator::advance((WebCore::TextIterator *)&v70, v27);
    v28 = (_DWORD)a3 + ~(_DWORD)v13;
    if (v28 < 1)
      goto LABEL_51;
    v79 = 0;
    v29 = v28 - (v77 - HIDWORD(v78));
    if (v28 < (int)v77 - HIDWORD(v78))
    {
      HIDWORD(v78) += v28;
      LODWORD(v78) = v78 + v28;
LABEL_51:
      if (v75)
        goto LABEL_52;
LABEL_70:
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 1;
      WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v70, v27);
      v24 = (WebCore::Node *)v6;
      goto LABEL_127;
    }
    LODWORD(v78) = v78 + v77 - HIDWORD(v78);
    WebCore::TextIterator::advance((WebCore::TextIterator *)&v70, v27);
    if (!v75)
    {
LABEL_69:
      v79 = 1;
      HIDWORD(v78) = 0;
      goto LABEL_70;
    }
    while (1)
    {
      if (!(_DWORD)v77)
      {
        v79 = 1;
        goto LABEL_68;
      }
      if (v29 < (int)v77)
        break;
      LODWORD(v78) = v78 + v77;
      v29 -= v77;
LABEL_68:
      WebCore::TextIterator::advance((WebCore::TextIterator *)&v70, v27);
      if (!v75)
        goto LABEL_69;
    }
    HIDWORD(v78) = v29;
    LODWORD(v78) = v78 + v29;
LABEL_52:
    WebCore::CharacterIterator::range((int32x2_t *)&v70, (int32x2_t *)&v66);
    a3 = v68;
    *((_DWORD *)v68 + 6) += 2;
    v13 = v69;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a3 + 208))(a3) & 1) != 0)
    {
      v31 = 8;
    }
    else if ((_DWORD)v13)
    {
      v31 = 10;
    }
    else
    {
      v31 = 9;
    }
    v93 = (uint64_t)a3;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    v94 = v13;
    v95 = v31;
    if (v77 <= HIDWORD(v78))
      goto LABEL_189;
    v32 = v76;
    if (!HIDWORD(v78))
    {
      v33 = v77;
      goto LABEL_60;
    }
    v33 = (v77 - HIDWORD(v78));
    v57 = v77 - (unint64_t)HIDWORD(v78);
    if ((v77 & 0xFF00000000) != 0)
    {
      if (v57 >= v33)
      {
        v32 = &v76[HIDWORD(v78)];
        v33 |= 0x100000000uLL;
        goto LABEL_60;
      }
LABEL_189:
      __break(1u);
LABEL_190:
      v80 = 0;
      v81 = *(_DWORD *)v7;
      v82 = *(_BYTE *)(v7 + 4);
      WebCore::makeBoundaryPoint((uint64_t *)&v80, (uint64_t)&v70);
      continue;
    }
    break;
  }
  if (v57 < v33)
    goto LABEL_189;
  v32 = &v76[2 * HIDWORD(v78)];
LABEL_60:
  if ((v33 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v33)
      goto LABEL_189;
    v34 = *v32;
  }
  else
  {
    if (!(_DWORD)v33)
      goto LABEL_189;
    v34 = *(unsigned __int16 *)v32;
  }
  if (v34 != 10)
    goto LABEL_88;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v93, (uint64_t)&v58);
  LOBYTE(v60) = 1;
  v36 = v66;
  *((_DWORD *)v66 + 6) += 2;
  v37 = v67;
  v61 = v36;
  v62 = v67;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v36 + 208))(v36) & 1) != 0)
  {
    v38 = 8;
  }
  else if (v37)
  {
    v38 = 10;
  }
  else
  {
    v38 = 9;
  }
  v63 = v38;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v61, (uint64_t)v64);
  v65 = 1;
  v39 = WebCore::operator==((uint64_t *)&v58, (uint64_t *)v64);
  v40 = v64[0];
  v64[0] = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v36 + 6) == 2)
  {
    if ((*((_WORD *)v36 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v36);
  }
  else
  {
    *((_DWORD *)v36 + 6) -= 2;
  }
  v41 = v58;
  v58 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  if (!v39)
  {
LABEL_88:
    v24 = a3;
    goto LABEL_114;
  }
  v79 = 0;
  v42 = v77 - HIDWORD(v78);
  if ((int)v77 - HIDWORD(v78) >= 2)
  {
    ++HIDWORD(v78);
    v43 = v78 + 1;
    goto LABEL_87;
  }
  LODWORD(v78) = v78 + v42;
  WebCore::TextIterator::advance((WebCore::TextIterator *)&v70, v30);
  if (!v75)
  {
LABEL_103:
    v79 = 1;
    HIDWORD(v78) = 0;
    goto LABEL_104;
  }
  v45 = 1 - v42;
  while (2)
  {
    if (!(_DWORD)v77)
    {
      v79 = 1;
LABEL_102:
      WebCore::TextIterator::advance((WebCore::TextIterator *)&v70, v44);
      if (!v75)
        goto LABEL_103;
      continue;
    }
    break;
  }
  if (v45 >= (int)v77)
  {
    LODWORD(v78) = v78 + v77;
    v45 -= v77;
    goto LABEL_102;
  }
  HIDWORD(v78) = v45;
  v43 = v78 + v45;
LABEL_87:
  LODWORD(v78) = v43;
LABEL_104:
  WebCore::CharacterIterator::range((int32x2_t *)&v70, (int32x2_t *)&v58);
  v24 = v58;
  *((_DWORD *)v58 + 6) += 2;
  v46 = v59;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v24 + 208))(v24) & 1) != 0)
  {
    v47 = 8;
  }
  else if (v46)
  {
    v47 = 10;
  }
  else
  {
    v47 = 9;
  }
  v93 = (uint64_t)v24;
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  v94 = v46;
  v95 = v47;
  v48 = v60;
  v60 = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v48);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  v49 = v58;
  v58 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
LABEL_114:
  v50 = v68;
  v68 = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 6) == 2)
    {
      if ((*((_WORD *)v50 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v50);
    }
    else
    {
      *((_DWORD *)v50 + 6) -= 2;
    }
  }
  v51 = v66;
  v66 = 0;
  if (v51)
  {
    if (*((_DWORD *)v51 + 6) == 2)
    {
      if ((*((_WORD *)v51 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v51);
    }
    else
    {
      *((_DWORD *)v51 + 6) -= 2;
    }
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v70, v30);
LABEL_121:
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v93, a1);
  *(_BYTE *)(a1 + 16) = 1;
  v53 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
  {
    *((_DWORD *)v53 + 6) += 2;
    v70 = v53;
    v71 = *(_DWORD *)(a1 + 8);
    v72 = *(_BYTE *)(a1 + 12);
    LOBYTE(v73) = 0;
    if (!WebCore::inSameLine((WebCore *)a1, (const WebCore::VisiblePosition *)&v70, v52))
      *(_BYTE *)(a1 + 16) = 0;
    v54 = v70;
    v70 = 0;
    if (v54)
    {
      if (*((_DWORD *)v54 + 6) == 2)
      {
        if ((*((_WORD *)v54 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v54);
      }
      else
      {
        *((_DWORD *)v54 + 6) -= 2;
      }
    }
  }
LABEL_127:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v80, v35);
  if (v88)
  {
    v55 = v86;
    v86 = 0;
    if (v55)
    {
      if (*((_DWORD *)v55 + 6) == 2)
      {
        if ((*((_WORD *)v55 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v55);
      }
      else
      {
        *((_DWORD *)v55 + 6) -= 2;
      }
    }
    v56 = v84;
    v84 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 6) == 2)
      {
        if ((*((_WORD *)v56 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v56);
      }
      else
      {
        *((_DWORD *)v56 + 6) -= 2;
      }
    }
  }
  v6 = (uint64_t)v24;
LABEL_148:
  result = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    result = (WTF *)WTF::fastFree(result, v14);
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_155:
  v93 = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::previousWordPosition@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  unsigned int *result;
  WebCore::Node *v7[3];

  WebCore::previousBoundary((uint64_t)v7, (uint64_t)this, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore(this, (const WebCore::VisiblePosition *)v7, 0, a2);
  result = (unsigned int *)v7[0];
  v7[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::previousWordPositionBoundary(uint64_t result, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  unsigned int IntPropertyValue;

  v8 = (unsigned __int8 *)result;
  if (!a4)
  {
LABEL_36:
    *a5 = 0;
    return WebCore::findNextWordFromIndex(v8, a2, a3, 0);
  }
  if (!(_DWORD)a2)
    goto LABEL_34;
  v9 = a3;
  if ((a2 & 0xFF00000000) != 0)
    v9 = a3 | 0x100000000;
  v10 = a2 <= a3 ? a2 : v9;
  if (!(_DWORD)v10)
  {
LABEL_34:
    *a5 = 1;
    return 0;
  }
  if ((v10 & 0xFF00000000) != 0)
  {
    v16 = v10 - 1;
    while (1)
    {
      IntPropertyValue = u_getIntPropertyValue(v8[v16], UCHAR_LINE_BREAK);
      if (IntPropertyValue > 0x25 || ((1 << IntPropertyValue) & 0x2001004000) == 0)
        break;
      if (!(unint64_t)v16--)
        goto LABEL_34;
    }
    if (v16 != -1)
      goto LABEL_36;
    goto LABEL_34;
  }
  v11 = v10;
  while (v11 - 1 < v10)
  {
    result = *(unsigned __int16 *)&v8[2 * (v11 - 1)];
    if ((result & 0xFC00) == 0xDC00)
    {
      if (v11 == 1)
      {
        v11 = 0;
      }
      else
      {
        if (v11 - 2 >= v10)
          break;
        v12 = *(unsigned __int16 *)&v8[2 * (v11 - 2)];
        v13 = v12 & 0xFC00;
        v14 = result + (v12 << 10) - 56613888;
        if (v13 == 55296)
          v11 -= 2;
        else
          --v11;
        if (v13 == 55296)
          LODWORD(result) = v14;
      }
    }
    else
    {
      --v11;
    }
    result = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
    if (result > 0x25 || ((1 << result) & 0x2001004000) == 0)
      goto LABEL_36;
    if (!v11)
      goto LABEL_34;
  }
  __break(1u);
  return result;
}

unsigned int *WebCore::nextWordPosition@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  unsigned int *result;
  WebCore::Node *v7[3];

  WebCore::nextBoundary((uint64_t)v7, (uint64_t)this, (WebCore::Node *)WebCore::nextWordPositionBoundary);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter(this, (const WebCore::VisiblePosition *)v7, 0, a2);
  result = (unsigned int *)v7[0];
  v7[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::nextWordPositionBoundary(uint64_t result, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  _BYTE *v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  unsigned int IntPropertyValue;
  unint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v26;

  v5 = a5;
  v6 = a3;
  v8 = (unsigned __int8 *)result;
  if (!a4)
  {
LABEL_44:
    *v5 = 0;
    return WebCore::findNextWordFromIndex(v8, a2, v6, 1);
  }
  v9 = (a2 - a3);
  if (a2 <= a3)
  {
    LODWORD(v11) = 0;
    goto LABEL_38;
  }
  if (!(_DWORD)a3)
  {
    v10 = result;
    v11 = a2;
    goto LABEL_5;
  }
  v21 = a2 - (unint64_t)a3;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v21 >= v9)
    {
      v10 = result + a3;
      v11 = v9 | 0x100000000;
      goto LABEL_5;
    }
  }
  else if (v21 >= v9)
  {
    v10 = result + 2 * a3;
    v11 = (a2 - a3);
LABEL_5:
    if ((_DWORD)v11)
    {
      v26 = a2 - a3;
      if ((v11 & 0xFF00000000) != 0)
      {
        v12 = 0;
        while (1)
        {
          IntPropertyValue = u_getIntPropertyValue(*(unsigned __int8 *)(v10 + v12), UCHAR_LINE_BREAK);
          if (IntPropertyValue > 0x25 || ((1 << IntPropertyValue) & 0x2001004000) == 0)
            break;
          if (v11 == ++v12)
          {
            LODWORD(v12) = v11;
            break;
          }
        }
      }
      else
      {
        v23 = (unsigned __int8 *)result;
        v24 = a3;
        LODWORD(v12) = 0;
        while (1)
        {
          v13 = v12 + 1;
          result = *(unsigned __int16 *)(v10 + 2 * v12);
          if ((_DWORD)v12 + 1 != (_DWORD)v11 && (result & 0xFC00) == 0xD800)
          {
            if (v13 >= v11)
              goto LABEL_45;
            v14 = *(unsigned __int16 *)(v10 + 2 * v13);
            v15 = (v14 & 0xFC00) == 56320;
            v16 = v14 + ((_DWORD)result << 10) - 56613888;
            if (v15)
              v13 = v12 + 2;
            else
              v13 = v12 + 1;
            if (v15)
              LODWORD(result) = v16;
          }
          v17 = u_getIntPropertyValue(result, UCHAR_LINE_BREAK);
          if (v17 > 0x25 || ((1 << v17) & 0x2001004000) == 0)
            break;
          LODWORD(v12) = v13;
          if (v13 >= v11)
          {
            LODWORD(v12) = v13;
            break;
          }
        }
        v5 = a5;
        v6 = v24;
        v8 = v23;
      }
      LODWORD(v9) = v26;
LABEL_39:
      if (v12 >= v11)
        v22 = v11;
      else
        v22 = v12;
      if (v22 == (_DWORD)v9)
      {
        *v5 = 1;
        return a2;
      }
      goto LABEL_44;
    }
LABEL_38:
    LODWORD(v12) = 0;
    goto LABEL_39;
  }
LABEL_45:
  __break(1u);
  return result;
}

WebCore::Node *WebCore::startOfLine(uint64_t a1, WebCore::VisiblePosition *this, WebCore::Node *a3, BOOL *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned __int16 *v26;
  WTF *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  WTF *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  WTF *v40;
  WTF *v41;
  int v42;
  unsigned int v43;
  int v44;
  WebCore::Node *v45;
  __int16 v46;
  int v47;
  WebCore::Node *v49;
  uint64_t v50;
  WebCore::Node *result;
  __int16 v52;
  char v53;
  WTF **v54;
  int v55;
  char v56;
  WebCore::Node *v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  int v62;
  char v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  WebCore::Node *v72;
  int v73;
  char v74;
  unsigned int v75;
  _BYTE v76[9];

  if (a4)
    *a4 = 0;
  v8 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v58 = 0;
    v57 = 0;
    v59 = 1;
    goto LABEL_109;
  }
  *(_DWORD *)(v8 + 24) += 2;
  v72 = (WebCore::Node *)v8;
  v73 = *((_DWORD *)this + 2);
  v74 = *((_BYTE *)this + 12);
  WebCore::RenderedPosition::RenderedPosition((uint64_t)&v61, (WebCore::Position *)&v72, (const WebCore::Node *)*((unsigned __int8 *)this + 16));
  v9 = (uint64_t)v72;
  v72 = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = (uint64_t)&v62;
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v62) & 1) != 0)
  {
    v72 = 0;
    v75 = 1;
  }
  else
  {
    if (v65 == -1)
      goto LABEL_158;
    v57 = (WebCore::Node *)&v54;
    ((void (*)(WebCore::Node **__return_ptr, WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v65])(&v72, &v57, &v62);
  }
  if (v71)
  {
    if (v70 != -1)
      ((void (*)(WebCore::Node **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v70])(&v57, &v69);
    v70 = -1;
  }
  if (v68)
  {
    if (v67 != -1)
      ((void (*)(WebCore::Node **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v67])(&v57, &v66);
    v67 = -1;
  }
  if (v65 != -1)
    ((void (*)(WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v65])(&v57, &v62);
  v65 = -1;
  v12 = v61;
  v61 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v11);
    else
      --*(_DWORD *)v12;
  }
  if (v75 != -1)
  {
    v61 = (WTF *)&v57;
    if (((unsigned int (*)(WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v75])(&v61, &v72))
    {
      v13 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        *(_DWORD *)(v13 + 24) += 2;
      if ((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) == 0
        || (*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x40) == 0)
      {
        goto LABEL_104;
      }
      v14 = *((_DWORD *)this + 2);
      if ((*((_BYTE *)this + 12) & 8) == 0)
      {
        v15 = *((_BYTE *)this + 12) & 7;
        if (v15 == 4 || v15 == 2)
        {
          v16 = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = v16 + 2;
          v17 = *(_WORD *)(v13 + 28);
          if ((v17 & 1) != 0)
          {
            v50 = *(_QWORD *)(v13 + 80);
            if (v50)
              v14 = *(_DWORD *)(v50 + 4);
            else
              v14 = 0;
          }
          else if ((v17 & 4) != 0 && (v18 = *(_QWORD *)(v13 + 80)) != 0)
          {
            v14 = 0;
            do
            {
              ++v14;
              v18 = *(_QWORD *)(v18 + 56);
            }
            while (v18);
          }
          else
          {
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 208))(v13) ^ 1;
            v16 = *(_DWORD *)(v13 + 24) - 2;
          }
          if (v16)
          {
            *(_DWORD *)(v13 + 24) = v16;
          }
          else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
        }
      }
      if (!v14)
      {
        v49 = *(WebCore::Node **)this;
        if (*(_QWORD *)this)
          *((_DWORD *)v49 + 6) += 2;
        v57 = v49;
        LODWORD(v58) = *((_DWORD *)this + 2);
        BYTE4(v58) = *((_BYTE *)this + 12);
        v39 = *((_BYTE *)this + 16);
      }
      else
      {
LABEL_104:
        v58 = 0;
        v59 = 0;
        v57 = 0;
        v39 = 1;
      }
      LOBYTE(v59) = v39;
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
LABEL_107:
      if (v75 != -1)
        ((void (*)(WTF **, WebCore::Node **))off_1E33AE258[v75])(&v61, &v72);
LABEL_109:
      if ((_DWORD)a3)
        goto LABEL_170;
      v40 = *(WTF **)this;
      if (*(_QWORD *)this)
        *((_DWORD *)v40 + 6) += 2;
      v61 = v40;
      v62 = *((_DWORD *)this + 2);
      v63 = *((_BYTE *)this + 12);
      WebCore::highestEditableRoot((uint64_t)&v61, 0, (uint64_t *)&v72);
      v41 = v61;
      v61 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
      v10 = (uint64_t)v72;
      if (!v72)
        goto LABEL_170;
      a3 = v57;
      if (!v57)
        goto LABEL_175;
      v42 = *((_DWORD *)v57 + 6);
      *((_DWORD *)v57 + 6) = v42 + 2;
      v43 = BYTE4(v58) & 7;
      if (v43 > 4)
        goto LABEL_163;
      v44 = 1 << v43;
      v45 = a3;
      if ((v44 & 0x19) != 0)
        goto LABEL_119;
      goto LABEL_159;
    }
    v60 = 0;
    if ((_DWORD)a3)
    {
      if (v75 == -1)
        goto LABEL_158;
      v57 = (WebCore::Node *)&v54;
      ((void (*)(WTF **__return_ptr, WebCore::Node **, WebCore::Node **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                    + v75))(&v61, &v57, &v72);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v61) & 1) == 0)
      {
        while (1)
        {
          if (v64 == -1)
            goto LABEL_158;
          v57 = (WebCore::Node *)&v54;
          v20 = ((uint64_t (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v64])(&v57, &v61);
          v10 = v20;
          v21 = *(_BYTE *)(v20 + 45);
          if ((v21 & 1) != 0)
            goto LABEL_48;
          v22 = *(unsigned __int16 **)(*(_QWORD *)(v20 + 24) + 8);
          if (!v22 || (~v22[14] & 0x408) != 0)
            goto LABEL_48;
          if (!(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v22 + 368))(v22))
            break;
LABEL_50:
          if (v64 == -1)
            goto LABEL_158;
          v57 = (WebCore::Node *)&v54;
          ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v64])(&v57, &v61);
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v61) & 1) != 0)
            goto LABEL_54;
        }
        v21 = *(_BYTE *)(v10 + 45);
LABEL_48:
        if ((v21 & 1) == 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
          if (v10)
            goto LABEL_78;
        }
        goto LABEL_50;
      }
LABEL_54:
      v10 = 0;
      v58 = 0;
      v57 = 0;
      v59 = 1;
LABEL_85:
      if (v64 != -1)
        ((void (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v64])(&v54, &v61);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      v33 = v60;
      v60 = 0;
      if (v33)
      {
        v34 = *((unsigned int *)v33 + 9);
        v35 = (unsigned int *)*((_QWORD *)v33 + 3);
        if ((_DWORD)v34)
        {
          v36 = 24 * v34;
          do
          {
            v37 = v35[4];
            if ((_DWORD)v37 != -1)
              ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v37])(&v61, v35);
            v35[4] = -1;
            v35 += 6;
            v36 -= 24;
          }
          while (v36);
          v35 = (unsigned int *)*((_QWORD *)v33 + 3);
        }
        if (v35)
        {
          *((_QWORD *)v33 + 3) = 0;
          *((_DWORD *)v33 + 8) = 0;
          WTF::fastFree((WTF *)v35, v19);
        }
        v38 = *((unsigned int *)v33 + 4);
        if ((_DWORD)v38 != -1)
          ((void (*)(WTF **, WTF *))off_1E33AE258[v38])(&v61, v33);
        *((_DWORD *)v33 + 4) = -1;
        WTF::fastFree(v33, v19);
      }
      goto LABEL_107;
    }
    WebCore::InlineIterator::firstLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)&v72, (uint64_t *)&v60, (unsigned int *)&v61);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v61) & 1) != 0)
      goto LABEL_54;
    while (v64 != -1)
    {
      v57 = (WebCore::Node *)&v54;
      v23 = ((uint64_t (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v64])(&v57, &v61);
      v24 = v23;
      v25 = *(_BYTE *)(v23 + 45);
      if ((v25 & 1) == 0)
      {
        v26 = *(unsigned __int16 **)(*(_QWORD *)(v23 + 24) + 8);
        if (v26)
        {
          if ((~v26[14] & 0x408) == 0)
          {
            if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v26 + 368))(v26))
              goto LABEL_63;
            v25 = *(_BYTE *)(v24 + 45);
          }
        }
      }
      if ((v25 & 1) == 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8);
        if (v10)
        {
LABEL_78:
          v30 = *(_DWORD *)(v10 + 24);
          *(_DWORD *)(v10 + 24) = v30 + 2;
          if ((*(_WORD *)(v10 + 28) & 2) == 0)
          {
            v31 = 0;
            *(_DWORD *)(v10 + 24) = v30 + 4;
            v32 = 1;
LABEL_83:
            v54 = (WTF **)v10;
            v55 = v31;
            v56 = v32;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v54, (uint64_t)&v57);
            LOBYTE(v59) = 1;
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
            goto LABEL_85;
          }
          *(_DWORD *)(v10 + 24) = v30 + 4;
          if (v64 != -1)
          {
            v57 = (WebCore::Node *)v76;
            if ((((uint64_t (*)(WebCore::Node **, WTF **))off_1E33AE2E8[v64])(&v57, &v61) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195B4F568);
            }
            if (v64 != -1)
            {
              v57 = (WebCore::Node *)v76;
              v31 = ((uint64_t (*)(WebCore::Node **, WTF **))off_1E33AE338[v64])(&v57, &v61);
              v32 = 0;
              goto LABEL_83;
            }
          }
          break;
        }
      }
LABEL_63:
      WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded((unsigned int *)&v61, (char **)&v60);
      v27 = v60;
      v28 = *((_QWORD *)v60 + 5) + 1;
      *((_QWORD *)v60 + 5) = v28;
      if (v28 >= *((unsigned int *)v27 + 9))
      {
        v57 = 0;
        v58 = 0;
        v10 = 1;
        v59 = 0;
      }
      else
      {
        v29 = *((_QWORD *)v27 + 3) + 24 * v28;
        LOBYTE(v57) = 0;
        LODWORD(v59) = -1;
        v10 = *(unsigned int *)(v29 + 16);
        if ((_DWORD)v10 == -1)
        {
          v10 = 0xFFFFFFFFLL;
          goto LABEL_69;
        }
        ((void (*)(WTF ***, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v10])(&v54, &v57);
      }
      LODWORD(v59) = v10;
LABEL_69:
      if (v64 != -1)
      {
        if (v10 == 0xFFFFFFFFLL)
        {
          ((void (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v64])(&v54, &v61);
          v64 = -1;
        }
        else
        {
LABEL_73:
          v54 = &v61;
          ((void (*)(WTF ***, WTF **, WebCore::Node **))off_1E33AE308[v10])(&v54, &v61, &v57);
        }
        if ((_DWORD)v59 != -1)
          ((void (*)(WTF ***, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v59])(&v54, &v57);
        goto LABEL_76;
      }
      if (v10 != 0xFFFFFFFFLL)
        goto LABEL_73;
LABEL_76:
      if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v61))
        goto LABEL_54;
    }
  }
LABEL_158:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_159:
  v45 = (WebCore::Node *)*((_QWORD *)a3 + 4);
  if (!v45)
    goto LABEL_163;
LABEL_119:
  if ((WebCore::Node *)v10 == v45)
  {
    if (v42)
    {
      *((_DWORD *)a3 + 6) = v42;
    }
    else if ((*((_WORD *)a3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a3);
      v10 = (uint64_t)v72;
      goto LABEL_167;
    }
    v72 = 0;
    goto LABEL_168;
  }
  v46 = *(_WORD *)(v10 + 28);
  if ((v46 & 0xF000) == 0x9000)
  {
    if (**((_QWORD **)v45 + 5) == v10 && (*((_WORD *)v45 + 14) & 0xF000) != 0x9000)
    {
      v47 = (*((unsigned __int8 *)v45 + 22) >> 3) & 1;
      if (v42)
        goto LABEL_165;
      goto LABEL_195;
    }
    goto LABEL_163;
  }
  if ((v46 & 4) == 0
    || !*(_QWORD *)(v10 + 80)
    || ((*((unsigned __int8 *)v45 + 22) ^ *(unsigned __int8 *)(v10 + 22)) & 8) != 0)
  {
LABEL_163:
    LOBYTE(v47) = 0;
    goto LABEL_164;
  }
  do
  {
    v45 = (WebCore::Node *)*((_QWORD *)v45 + 4);
    LOBYTE(v47) = v45 != 0;
  }
  while (v45 != (WebCore::Node *)v10 && v45 != 0);
LABEL_164:
  if (v42)
  {
LABEL_165:
    *((_DWORD *)a3 + 6) = v42;
    goto LABEL_166;
  }
LABEL_195:
  if ((*((_WORD *)a3 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(a3);
    v10 = (uint64_t)v72;
  }
LABEL_166:
  if ((v47 & 1) != 0)
  {
LABEL_167:
    v72 = 0;
    if (!v10)
    {
LABEL_170:
      result = WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore(this, (const WebCore::VisiblePosition *)&v57, a4, a1);
      a3 = v57;
      goto LABEL_171;
    }
LABEL_168:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    goto LABEL_170;
  }
LABEL_175:
  v52 = *(_WORD *)(v10 + 28);
  *(_DWORD *)(v10 + 24) += 2;
  v61 = (WTF *)v10;
  v62 = 0;
  if ((v52 & 1) != 0)
    v53 = v63 & 0xF0;
  else
    v53 = v63 & 0xF0 | 3;
  v63 = v53;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v61, a1);
  *(_BYTE *)(a1 + 16) = 1;
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  if (a4)
    *a4 = WebCore::operator==((uint64_t *)this, (uint64_t *)a1);
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
LABEL_171:
  v57 = 0;
  if (a3)
  {
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(a3);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::endOfLine(uint64_t *a1, uint64_t a2, int a3, BOOL *a4)
{
  const WebCore::VisiblePosition *v8;
  WebCore::Node *v9;
  uint64_t (*v10)();
  BOOL v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  int v25;
  unsigned int v26;
  int v27;
  WebCore::Node *v28;
  __int16 v29;
  int v30;
  WebCore::Node *v32;
  WebCore::Node *result;
  __int16 v34;
  uint64_t v35;
  char v36;
  WebCore::Node *v37;
  int v38;
  int v39;
  char v40;
  char v41;
  WebCore::Node *v42;
  int v43;
  char v44;
  char v45;
  WebCore::Node *v46[3];
  WebCore::Node *v47;
  int v48;
  char v49;
  char v50;

  if (a4)
    *a4 = 0;
  WebCore::endPositionForLine((uint64_t)&v42, (uint64_t *)a2, a3);
  if (a3)
  {
    if (WebCore::inSameLine((WebCore *)a2, (const WebCore::VisiblePosition *)&v42, v8))
    {
LABEL_97:
      WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)a2, (const WebCore::VisiblePosition *)&v42, a4, (uint64_t)a1);
      goto LABEL_98;
    }
    WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)a2, (uint64_t)v46);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v46))
    {
      v9 = 0;
      v40 = 0;
      v38 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v46, (uint64_t)&v47);
      v9 = v47;
      v38 = v48;
      v40 = v49;
    }
    v15 = v46[0];
    v46[0] = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v16 = v42;
    v42 = v9;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v16);
          v9 = v42;
        }
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    v43 = v38;
    v44 = v40;
    v45 = 1;
    if (!v9)
    {
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      *((_BYTE *)a1 + 16) = 1;
      goto LABEL_98;
    }
    WebCore::endPositionForLine((uint64_t)&v47, (uint64_t *)&v42, 1);
    v17 = v47;
    v47 = 0;
    v18 = v42;
    v42 = v17;
    if (!v18)
    {
LABEL_31:
      v43 = v48;
      v44 = v49;
      v45 = v50;
      goto LABEL_97;
    }
    if (*((_DWORD *)v18 + 6) != 2)
    {
      *((_DWORD *)v18 + 6) -= 2;
      goto LABEL_31;
    }
    if ((*((_WORD *)v18 + 15) & 0x400) != 0)
      goto LABEL_31;
    WebCore::Node::removedLastRef(v18);
    v32 = v47;
    v43 = v48;
    v44 = v49;
    v45 = v50;
    v47 = 0;
    if (!v32)
      goto LABEL_97;
    if (*((_DWORD *)v32 + 6) != 2)
    {
      *((_DWORD *)v32 + 6) -= 2;
      goto LABEL_97;
    }
    if ((*((_WORD *)v32 + 15) & 0x400) != 0)
      goto LABEL_97;
LABEL_117:
    WebCore::Node::removedLastRef(v32);
    goto LABEL_97;
  }
  if (*(_QWORD *)a2)
    v10 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_18;
  WebCore::startOfLine((uint64_t)&v47, (WebCore::VisiblePosition *)a2, 0, 0);
  WebCore::startOfLine((uint64_t)v46, (WebCore::VisiblePosition *)&v42, 0, 0);
  v11 = WebCore::operator==((uint64_t *)&v47, (uint64_t *)v46);
  v12 = v46[0];
  v46[0] = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v13 = v47;
  v47 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if (!v11)
  {
LABEL_18:
    WebCore::previousVisuallyDistinctCandidate(&v42, (uint64_t)v46);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v46))
    {
      v14 = 0;
      v41 = 0;
      v39 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v46, (uint64_t)&v47);
      v14 = v47;
      v39 = v48;
      v41 = v49;
    }
    v19 = v46[0];
    v46[0] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v20 = v42;
    v42 = v14;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    v43 = v39;
    v44 = v41;
    v45 = 1;
  }
  v21 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v21 + 6) += 2;
  v47 = v21;
  v48 = *(_DWORD *)(a2 + 8);
  v49 = *(_BYTE *)(a2 + 12);
  WebCore::highestEditableRoot((uint64_t)&v47, 0, (uint64_t *)v46);
  v22 = v47;
  v47 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  v23 = v46[0];
  if (!v46[0])
    goto LABEL_97;
  v24 = v42;
  if (!v42)
    goto LABEL_102;
  v25 = *((_DWORD *)v42 + 6);
  *((_DWORD *)v42 + 6) = v25 + 2;
  v26 = v44 & 7;
  if (v26 > 4)
    goto LABEL_90;
  v27 = 1 << v26;
  v28 = v24;
  if ((v27 & 0x19) == 0)
  {
    v28 = (WebCore::Node *)*((_QWORD *)v24 + 4);
    if (!v28)
      goto LABEL_90;
  }
  if (v23 == v28)
  {
    if (v25)
    {
      *((_DWORD *)v24 + 6) = v25;
    }
    else if ((*((_WORD *)v24 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v24);
      v23 = v46[0];
      goto LABEL_94;
    }
    v46[0] = 0;
LABEL_95:
    if (*((_DWORD *)v23 + 6) != 2)
    {
      *((_DWORD *)v23 + 6) -= 2;
      goto LABEL_97;
    }
    if ((*((_WORD *)v23 + 15) & 0x400) != 0)
      goto LABEL_97;
    v32 = v23;
    goto LABEL_117;
  }
  v29 = *((_WORD *)v23 + 14);
  if ((v29 & 0xF000) == 0x9000)
  {
    if (**((WebCore::Node ***)v28 + 5) == v23 && (*((_WORD *)v28 + 14) & 0xF000) != 0x9000)
    {
      v30 = (*((unsigned __int8 *)v28 + 22) >> 3) & 1;
      if (v25)
        goto LABEL_92;
      goto LABEL_124;
    }
    goto LABEL_90;
  }
  if ((v29 & 4) == 0
    || !*((_QWORD *)v23 + 10)
    || ((*((unsigned __int8 *)v28 + 22) ^ *((unsigned __int8 *)v23 + 22)) & 8) != 0)
  {
LABEL_90:
    LOBYTE(v30) = 0;
    goto LABEL_91;
  }
  do
  {
    v28 = (WebCore::Node *)*((_QWORD *)v28 + 4);
    LOBYTE(v30) = v28 != 0;
  }
  while (v28 != v23 && v28 != 0);
LABEL_91:
  if (v25)
  {
LABEL_92:
    *((_DWORD *)v24 + 6) = v25;
    goto LABEL_93;
  }
LABEL_124:
  if ((*((_WORD *)v24 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v24);
    v23 = v46[0];
  }
LABEL_93:
  if ((v30 & 1) != 0)
  {
LABEL_94:
    v46[0] = 0;
    if (!v23)
      goto LABEL_97;
    goto LABEL_95;
  }
LABEL_102:
  v34 = *((_WORD *)v23 + 14);
  *((_DWORD *)v23 + 6) += 2;
  if ((v34 & 1) != 0)
  {
    v35 = *((_QWORD *)v23 + 10);
    v36 = 0;
    if (v35)
      LODWORD(v35) = *(_DWORD *)(v35 + 4);
  }
  else
  {
    LODWORD(v35) = 0;
    v36 = 4;
  }
  v47 = v23;
  v48 = v35;
  v49 = v36;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v47, (uint64_t)a1);
  *((_BYTE *)a1 + 16) = 1;
  if (*((_DWORD *)v23 + 6) == 2)
  {
    if ((*((_WORD *)v23 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v23);
  }
  else
  {
    *((_DWORD *)v23 + 6) -= 2;
  }
  if (a4)
    *a4 = WebCore::operator==((uint64_t *)a2, a1);
  v37 = v46[0];
  v46[0] = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
LABEL_98:
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::previousLinePosition@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  float v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  WebCore::Node *v22;
  uint64_t (*v23)();
  WebCore::Node *v24;
  WebCore::Node *v25;
  int v26;
  void *v27;
  void *v28;
  WTF *v29;
  WebCore::Node *v30;
  WTF *v31;
  WebCore::Node *v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  WebCore::Node **v36;
  float v37;
  _BOOL8 isEditablePosition;
  __int16 v39;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  WebCore::Node *v46;
  int v47;
  int v48;
  uint64_t result;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WTF *v54;
  int v55;
  char v56;
  int v57;
  int v58;
  _BYTE v59[16];
  int v60;
  char v61;
  _BYTE v62[16];
  int v63;
  char v64;
  WebCore::Node *v65[2];
  unsigned int v66;
  WebCore::Node *v67;
  int v68;
  char v69;
  int v70;
  WebCore::Node *v71;
  int v72;
  char v73;
  int v74;
  unsigned int v75[4];
  unsigned int v76;
  uint64_t v77;
  int v78;
  char v79;
  _BYTE v80[9];

  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v9 + 2;
    v77 = v6;
    v78 = *(_DWORD *)(a1 + 8);
    v79 = *(_BYTE *)(a1 + 12);
    *(_DWORD *)(v6 + 24) = v9 + 4;
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::Document::updateLayout(v10, 2, 0);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    v11 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      *((_BYTE *)a4 + 16) = 1;
LABEL_142:
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      goto LABEL_144;
    }
    ++*(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_QWORD *)v75 = 0;
    v76 = 1;
    WebCore::Position::inlineBoxAndOffset((WebCore::Position *)a1, (const WebCore::Node *)*(unsigned __int8 *)(a1 + 16), (uint64_t)&v54);
    LOBYTE(v71) = 0;
    v74 = -1;
    v12 = v57;
    if (v57 != -1)
    {
      ((void (*)(WebCore::Node **, WebCore::Node **, WTF **))off_1E33AE248[v57])(&v67, &v71, &v54);
      v74 = v12;
      if (v57 != -1)
        ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v57])(&v67, &v54);
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v71) & 1) != 0)
      goto LABEL_44;
    if (v74 == -1)
      goto LABEL_180;
    v54 = (WTF *)&v67;
    ((void (*)(WebCore::Node **__return_ptr, WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v74])(v65, &v54, &v71);
    LOBYTE(v54) = 0;
    v57 = -1;
    v13 = v66;
    if (v66 == -1)
      goto LABEL_180;
    ((void (*)(WebCore::Node **, WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v66])(&v67, &v54, v65);
    v57 = v13;
    v67 = (WebCore::Node *)v80;
    ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v67, &v54);
    LOBYTE(v67) = 0;
    v70 = -1;
    v14 = v57;
    if (v57 == -1)
    {
      v14 = -1;
    }
    else
    {
      ((void (*)(_BYTE *, WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v57])(v80, &v67, &v54);
      v70 = v14;
      if (v57 != -1)
      {
        ((void (*)(_BYTE *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v57])(v80, &v54);
        v14 = v70;
      }
    }
    if (v76 == -1)
    {
      if (v14 == -1)
        goto LABEL_22;
    }
    else if (v14 == -1)
    {
      ((void (*)(WTF **, unsigned int *))off_1E33AE258[v76])(&v54, v75);
      v76 = -1;
      goto LABEL_20;
    }
    v54 = (WTF *)v75;
    ((void (*)(WTF **, unsigned int *, WebCore::Node **))off_1E33AE368[v14])(&v54, v75, &v67);
LABEL_20:
    if (v70 != -1)
      ((void (*)(WTF **, WebCore::Node **))off_1E33AE258[v70])(&v54, &v67);
LABEL_22:
    v70 = -1;
    if (v66 != -1)
      ((void (*)(WTF **, WebCore::Node **))off_1E33AE258[v66])(&v54, v65);
    if (v76 == -1)
      goto LABEL_180;
    v54 = (WTF *)&v67;
    if ((((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v76])(&v54, v75) & 1) != 0)goto LABEL_33;
    if (v76 == -1)
      goto LABEL_180;
    v54 = (WTF *)&v67;
    ((void (*)(WTF **, unsigned int *))off_1E33AE378[v76])(&v54, v75);
    if (v76 == -1)
      goto LABEL_180;
    v54 = (WTF *)&v67;
    if ((float)(v16 - ((float (*)(WTF **, unsigned int *))off_1E33AE388[v76])(&v54, v75)) == 0.0)
      goto LABEL_33;
    if (v76 == -1)
      goto LABEL_180;
    v67 = (WebCore::Node *)v65;
    ((void (*)(WTF **__return_ptr, WebCore::Node **, unsigned int *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                + v76))(&v54, &v67, v75);
    v17 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v54);
    if (v57 != -1)
      ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v57])(&v67, &v54);
    if (v17)
    {
LABEL_33:
      v54 = 0;
      v57 = 1;
      if (v76 == -1)
      {
        v21 = 0;
      }
      else
      {
        if (v76 == 1)
        {
          v18 = *(unsigned int **)v75;
          *(_QWORD *)v75 = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v15);
            }
          }
          goto LABEL_42;
        }
        ((void (*)(WebCore::Node **, unsigned int *))off_1E33AE258[v76])(&v67, v75);
        v21 = v54;
      }
      v54 = 0;
      *(_QWORD *)v75 = v21;
      v76 = 1;
LABEL_42:
      if (v57 != -1)
        ((void (*)(WebCore::Node **, WTF **))off_1E33AE258[v57])(&v67, &v54);
    }
LABEL_44:
    if (v74 != -1)
      ((void (*)(WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v74])(&v54, &v71);
    if (v76 == -1)
      goto LABEL_180;
    v54 = (WTF *)&v71;
    if (!((unsigned int (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v76])(&v54, v75))goto LABEL_105;
    WebCore::previousLineCandidatePosition((uint64_t *)v65, v6, a1, a3);
    v22 = v65[0];
    v23 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v65[0])
      v23 = 0;
    if (!v23)
    {
LABEL_102:
      v65[0] = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
LABEL_105:
      if (v76 != -1)
      {
        v54 = (WTF *)&v71;
        if ((((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v76])(&v54, v75) & 1) != 0)
        {
          if (WebCore::hasEditableStyle((WebCore *)v6, a3))
          {
            WebCore::firstPositionInOrBeforeNode(v6, v32, (uint64_t)&v54);
            v33 = WebCore::editableRootForPosition((uint64_t)&v54, a3);
            v34 = v54;
            v54 = 0;
            if (v34)
            {
              if (*((_DWORD *)v34 + 6) == 2)
              {
                if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v34);
              }
              else
              {
                *((_DWORD *)v34 + 6) -= 2;
              }
            }
          }
          else
          {
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 1272);
          }
          if (!v33)
          {
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            *((_BYTE *)a4 + 16) = 1;
            goto LABEL_138;
          }
          v39 = *(_WORD *)(v33 + 28);
          *(_DWORD *)(v33 + 24) += 4;
          v54 = (WTF *)v33;
          v55 = 0;
          v40 = v56 & 0xF0;
          if ((v39 & 1) == 0)
            v40 = v56 & 0xF0 | 3;
          v56 = v40;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v54, (uint64_t)a4);
          *((_BYTE *)a4 + 16) = 1;
          v41 = *(_DWORD *)(v33 + 24) - 2;
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) != 0)
            {
LABEL_156:
              if ((*(_WORD *)(v33 + 30) & 0x400) != 0)
                goto LABEL_138;
              v30 = (WebCore::Node *)v33;
              goto LABEL_171;
            }
            WebCore::Node::removedLastRef((WebCore::Node *)v33);
            v41 = *(_DWORD *)(v33 + 24);
          }
          else
          {
            *(_DWORD *)(v33 + 24) = v41;
          }
          v42 = v41 - 2;
          if (v42)
          {
            *(_DWORD *)(v33 + 24) = v42;
            goto LABEL_138;
          }
          goto LABEL_156;
        }
        v67 = (WebCore::Node *)WebCore::absoluteLineDirectionPointToLocalPointInBlock(v75, a2);
        if (v76 != -1)
        {
          v54 = (WTF *)&v71;
          v35 = ((uint64_t (*)(WTF **, unsigned int *))off_1E33AE3B8[v76])(&v54, v75);
          v36 = &v67;
          if (!v35)
            v36 = (WebCore::Node **)((char *)&v67 + 4);
          v37 = (float)*(int *)v36 * 0.015625;
          isEditablePosition = WebCore::isEditablePosition((uint64_t)&v77, 0);
          WebCore::InlineIterator::closestBoxForHorizontalPosition((WebCore::InlineIterator *)v75, (const WebCore::InlineIterator::LineBox *)isEditablePosition, v37, (WebCore::InlineIterator::Box *)&v54);
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v54))
          {
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            *((_BYTE *)a4 + 16) = 1;
LABEL_136:
            if (v57 != -1)
              ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v57])(&v71, &v54);
            goto LABEL_138;
          }
          if (v57 != -1)
          {
            v71 = (WebCore::Node *)v65;
            v43 = ((uint64_t (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v57])(&v71, &v54);
            v44 = (_DWORD *)v43;
            ++*(_DWORD *)(v43 + 16);
            if ((*(_BYTE *)(v43 + 45) & 1) != 0 || (v45 = *(_QWORD *)(*(_QWORD *)(v43 + 24) + 8)) == 0)
            {
              (*(void (**)(uint64_t, WebCore::Node **, _QWORD, _QWORD))(*(_QWORD *)v43 + 352))(v43, &v67, 0, 0);
            }
            else
            {
              *(_DWORD *)(v45 + 24) += 2;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 208))(v45) & 1) != 0)
              {
                (*(void (**)(_DWORD *, WebCore::Node **, _QWORD, _QWORD))(*(_QWORD *)v44 + 352))(v44, &v67, 0, 0);
              }
              else
              {
                WebCore::positionInParentBeforeNode((WebCore *)v45, v46, (uint64_t)&v71);
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v71, (uint64_t)a4);
                *((_BYTE *)a4 + 16) = 1;
                if (v71)
                {
                  if (*((_DWORD *)v71 + 6) == 2)
                  {
                    if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v71);
                  }
                  else
                  {
                    *((_DWORD *)v71 + 6) -= 2;
                  }
                }
              }
              if (*(_DWORD *)(v45 + 24) == 2)
              {
                if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v45);
              }
              else
              {
                *(_DWORD *)(v45 + 24) -= 2;
              }
            }
            v47 = v44[4];
            if (!v47)
            {
              __break(0xC471u);
              JUMPOUT(0x195B509BCLL);
            }
            v44[4] = v47 - 1;
            goto LABEL_136;
          }
        }
      }
LABEL_180:
      v50 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::previousLineCandidatePosition(v50, v51, v52, v53);
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v65, (uint64_t)&v71);
    LOBYTE(v74) = 1;
    v24 = v71;
    if (v71)
      *((_DWORD *)v71 + 6) += 2;
    v67 = v24;
    v68 = v72;
    v69 = v73;
    WebCore::RenderedPosition::RenderedPosition((uint64_t)&v54, (WebCore::Position *)&v67, (const WebCore::Node *)1);
    v25 = v67;
    v67 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v55) & 1) != 0)
    {
      v71 = 0;
      v26 = 1;
      v74 = 1;
    }
    else
    {
      if (v58 == -1)
        goto LABEL_180;
      v67 = (WebCore::Node *)v80;
      ((void (*)(WebCore::Node **__return_ptr, WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v58])(&v71, &v67, &v55);
      v26 = v74;
    }
    if (v76 == -1)
    {
      if (v26 == -1)
        goto LABEL_180;
    }
    else if (v26 == -1)
    {
      ((void (*)(WebCore::Node **, unsigned int *))off_1E33AE258[v76])(&v67, v75);
      v76 = -1;
LABEL_68:
      if (v74 != -1)
        ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33AE258[v74])(&v67, &v71);
      if (v76 == -1)
        goto LABEL_180;
      v71 = (WebCore::Node *)&v67;
      if (((unsigned int (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v76])(&v71, v75))
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v65, (uint64_t)a4);
        *((_BYTE *)a4 + 16) = 1;
        if (v64)
        {
          if (v63 != -1)
            ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v63])(&v71, v62);
          v63 = -1;
        }
        if (v61)
        {
          if (v60 != -1)
            ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v60])(&v71, v59);
          v60 = -1;
        }
        if (v58 != -1)
          ((void (*)(WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v58])(&v71, &v55);
        v58 = -1;
        v29 = v54;
        v54 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
            WTF::fastFree(v29, v28);
          else
            --*(_DWORD *)v29;
        }
        v30 = v65[0];
        v65[0] = 0;
        if (!v30)
          goto LABEL_138;
        if (*((_DWORD *)v30 + 6) != 2)
        {
          *((_DWORD *)v30 + 6) -= 2;
LABEL_138:
          if (v76 != -1)
            ((void (*)(WTF **, unsigned int *))off_1E33AE258[v76])(&v54, v75);
          v48 = *(_DWORD *)(v11 + 16);
          if (!v48)
          {
            __break(0xC471u);
            JUMPOUT(0x195B50988);
          }
          *(_DWORD *)(v11 + 16) = v48 - 1;
          goto LABEL_142;
        }
        if ((*((_WORD *)v30 + 15) & 0x400) != 0)
          goto LABEL_138;
LABEL_171:
        WebCore::Node::removedLastRef(v30);
        goto LABEL_138;
      }
      if (v64)
      {
        if (v63 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v63])(&v71, v62);
        v63 = -1;
      }
      if (v61)
      {
        if (v60 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v60])(&v71, v59);
        v60 = -1;
      }
      if (v58 != -1)
        ((void (*)(WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v58])(&v71, &v55);
      v58 = -1;
      v31 = v54;
      v54 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v27);
        else
          --*(_DWORD *)v31;
      }
      v22 = v65[0];
      goto LABEL_102;
    }
    v67 = (WebCore::Node *)v75;
    ((void (*)(WebCore::Node **, unsigned int *, WebCore::Node **))off_1E33AE368[v26])(&v67, v75, &v71);
    goto LABEL_68;
  }
  v77 = 0;
  v78 = *(_DWORD *)(a1 + 8);
  v79 = *(_BYTE *)(a1 + 12);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  *((_BYTE *)a4 + 16) = 1;
LABEL_144:
  result = v77;
  v77 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::previousLineCandidatePosition(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  WebCore::Node *v8;
  WebCore::Node *v9;
  _BOOL4 hasEditableStyle;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  uint64_t v14;
  const WebCore::VisiblePosition *v15;
  WebCore::Node *v16;
  BOOL v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderObject *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  __int16 v28;
  WebCore::RenderText *v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  char v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  WebCore::Node *v40[2];
  WebCore::Node *v41;
  int v42;
  char v43;
  char v44;
  WebCore::Node *v45;

  v8 = *(WebCore::Node **)a3;
  if (*(_QWORD *)a3)
    *((_DWORD *)v8 + 6) += 2;
  v41 = v8;
  v42 = *(_DWORD *)(a3 + 8);
  v43 = *(_BYTE *)(a3 + 12);
  WebCore::highestEditableRoot((uint64_t)&v41, a4, (uint64_t *)&v45);
  v9 = v41;
  v41 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  hasEditableStyle = WebCore::hasEditableStyle((WebCore *)a2, a4);
  do
  {
    v11 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      do
      {
        a2 = v11;
        if ((*(_WORD *)(v11 + 28) & 4) == 0)
          break;
        if (!*(_QWORD *)(v11 + 80))
          break;
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 208))(v11))
          break;
        if ((*(_WORD *)(a2 + 28) & 4) == 0)
          break;
        v11 = *(_QWORD *)(a2 + 88);
      }
      while (v11);
    }
    else
    {
      a2 = *(_QWORD *)(a2 + 32);
      if (!a2)
      {
LABEL_155:
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
        *((_BYTE *)a1 + 12) &= 0xF0u;
        goto LABEL_159;
      }
    }
  }
  while ((*(_WORD *)(a2 + 28) & 4) != 0
       && *(_QWORD *)(a2 + 80)
       && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2) & 1) != 0);
  while (hasEditableStyle != WebCore::hasEditableStyle((WebCore *)a2, a4))
  {
    do
    {
      v12 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        do
        {
          a2 = v12;
          if ((*(_WORD *)(v12 + 28) & 4) == 0)
            break;
          if (!*(_QWORD *)(v12 + 80))
            break;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 208))(v12))
            break;
          if ((*(_WORD *)(a2 + 28) & 4) == 0)
            break;
          v12 = *(_QWORD *)(a2 + 88);
        }
        while (v12);
      }
      else
      {
        a2 = *(_QWORD *)(a2 + 32);
        if (!a2)
          goto LABEL_155;
      }
    }
    while ((*(_WORD *)(a2 + 28) & 4) != 0
         && *(_QWORD *)(a2 + 80)
         && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2) & 1) != 0);
  }
  *(_DWORD *)(a2 + 24) += 2;
  while (1)
  {
    v14 = a2;
    if ((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::firstPositionInOrBeforeNode(a2, v13, (uint64_t)v40);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v40, (uint64_t)&v41);
      v44 = 1;
      v17 = WebCore::inSameLine((WebCore *)&v41, (const WebCore::VisiblePosition *)a3, v15);
      v18 = v41;
      v41 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      v19 = v40[0];
      v40[0] = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      if (!v17)
        break;
    }
    v20 = WebCore::hasEditableStyle((WebCore *)v14, a4);
    a2 = v14;
    do
    {
      v21 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
      if (v21)
      {
        do
        {
          a2 = v21;
          if ((*(_WORD *)(v21 + 28) & 4) == 0)
            break;
          if (!*(_QWORD *)(v21 + 80))
            break;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 208))(v21))
            break;
          if ((*(_WORD *)(a2 + 28) & 4) == 0)
            break;
          v21 = *(_QWORD *)(a2 + 88);
        }
        while (v21);
      }
      else
      {
        a2 = *(_QWORD *)(a2 + 32);
        if (!a2)
          goto LABEL_71;
      }
    }
    while ((*(_WORD *)(a2 + 28) & 4) != 0
         && *(_QWORD *)(a2 + 80)
         && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2) & 1) != 0);
    while (1)
    {
      if (WebCore::Node::computeEditability(a2, 0, 1))
      {
        if (!v20)
          goto LABEL_54;
        goto LABEL_70;
      }
      if (a4 != 1)
        break;
      if (v20 == WebCore::isEditableToAccessibility((WebCore *)a2, v13))
        goto LABEL_70;
      do
      {
LABEL_54:
        v22 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
        if (v22)
        {
          do
          {
            a2 = v22;
            if ((*(_WORD *)(v22 + 28) & 4) == 0)
              break;
            if (!*(_QWORD *)(v22 + 80))
              break;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 208))(v22))
              break;
            if ((*(_WORD *)(a2 + 28) & 4) == 0)
              break;
            v22 = *(_QWORD *)(a2 + 88);
          }
          while (v22);
        }
        else
        {
          a2 = *(_QWORD *)(a2 + 32);
          if (!a2)
            goto LABEL_71;
        }
      }
      while ((*(_WORD *)(a2 + 28) & 4) != 0
           && *(_QWORD *)(a2 + 80)
           && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2) & 1) != 0);
    }
    if (v20)
      goto LABEL_54;
LABEL_70:
    *(_DWORD *)(a2 + 24) += 2;
LABEL_71:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    if (!a2)
      goto LABEL_155;
  }
  while (1)
  {
    v23 = v14;
    if ((*(_WORD *)(v14 + 28) & 0x80) != 0)
      break;
    WebCore::firstPositionInOrBeforeNode(v14, v16, (uint64_t)&v41);
    WebCore::highestEditableRoot((uint64_t)&v41, a4, (uint64_t *)v40);
    v25 = v40[0];
    v26 = v45;
    v40[0] = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    v27 = v41;
    v41 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    if (v25 != v26)
      break;
    v28 = *(_WORD *)(v23 + 28);
    if ((v28 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
    {
      *(_DWORD *)(v23 + 24) += 2;
      *a1 = v23;
      *((_DWORD *)a1 + 2) = 0;
      v33 = 1;
      goto LABEL_105;
    }
    *(_DWORD *)(v23 + 24) += 2;
    if ((v28 & 2) != 0 && (v29 = (WebCore::RenderText *)(*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL)) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v31 = WebCore::RenderText::caretMaxOffset(v29, v24);
    }
    else if ((v28 & 1) != 0)
    {
      v38 = *(_QWORD *)(v23 + 80);
      if (v38)
        v31 = *(_DWORD *)(v38 + 4);
      else
        v31 = 0;
    }
    else
    {
      if ((v28 & 4) != 0)
      {
        v30 = *(_QWORD *)(v23 + 80);
        if (v30)
        {
          v31 = 0;
          do
          {
            ++v31;
            v30 = *(_QWORD *)(v30 + 56);
          }
          while (v30);
          *a1 = v23;
          *((_DWORD *)a1 + 2) = v31;
          goto LABEL_98;
        }
      }
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 208))(v23) ^ 1;
    }
    *a1 = v23;
    *((_DWORD *)a1 + 2) = v31;
LABEL_98:
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 208))(v23);
    if (v31)
      v33 = 10;
    else
      v33 = 9;
    if ((v32 & 1) != 0)
      v33 = 8;
LABEL_105:
    *((_BYTE *)a1 + 12) = *((_BYTE *)a1 + 12) & 0xF0 | v33;
    if (WebCore::Position::isCandidate((WebCore::Position *)a1, v24))
      goto LABEL_157;
    v34 = WebCore::hasEditableStyle((WebCore *)v23, a4);
    v14 = v23;
    do
    {
      v35 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
      if (v35)
      {
        do
        {
          v14 = v35;
          if ((*(_WORD *)(v35 + 28) & 4) == 0)
            break;
          if (!*(_QWORD *)(v35 + 80))
            break;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 208))(v35))
            break;
          if ((*(_WORD *)(v14 + 28) & 4) == 0)
            break;
          v35 = *(_QWORD *)(v14 + 88);
        }
        while (v35);
      }
      else
      {
        v14 = *(_QWORD *)(v14 + 32);
        if (!v14)
          goto LABEL_132;
      }
    }
    while ((*(_WORD *)(v14 + 28) & 4) != 0
         && *(_QWORD *)(v14 + 80)
         && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 208))(v14) & 1) != 0);
    while (v34 != WebCore::hasEditableStyle((WebCore *)v14, a4))
    {
      do
      {
        v36 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
        if (v36)
        {
          do
          {
            v14 = v36;
            if ((*(_WORD *)(v36 + 28) & 4) == 0)
              break;
            if (!*(_QWORD *)(v36 + 80))
              break;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 208))(v36))
              break;
            if ((*(_WORD *)(v14 + 28) & 4) == 0)
              break;
            v36 = *(_QWORD *)(v14 + 88);
          }
          while (v36);
        }
        else
        {
          v14 = *(_QWORD *)(v14 + 32);
          if (!v14)
            goto LABEL_132;
        }
      }
      while ((*(_WORD *)(v14 + 28) & 4) != 0
           && *(_QWORD *)(v14 + 80)
           && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 208))(v14) & 1) != 0);
    }
    *(_DWORD *)(v14 + 24) += 2;
LABEL_132:
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
    v37 = *a1;
    *a1 = 0;
    if (v37)
    {
      if (*(_DWORD *)(v37 + 24) == 2)
      {
        if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v37);
      }
      else
      {
        *(_DWORD *)(v37 + 24) -= 2;
      }
    }
    if (!v14)
      goto LABEL_155;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) &= 0xF0u;
LABEL_157:
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
LABEL_159:
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

unint64_t WebCore::absoluteLineDirectionPointToLocalPointInBlock(unsigned int *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  unsigned int v16;
  double v17;
  uint64_t v18;
  float v20;
  float v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _OWORD v28[4];
  char v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  int v35;
  int v36;

  v2 = a1[4];
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_33;
  }
  *(_QWORD *)&v28[0] = &v27;
  v5 = ((uint64_t (*)(_OWORD *, unsigned int *))off_1E33AE298[v2])(v28, a1);
  v29 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  memset(v28, 0, 41);
  v34 = 1;
  v35 = 0;
  v36 = 0;
  (*(void (**)(uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v5 + 576))(v5, 0, v28, 4, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v28, 0);
  v7 = *(_QWORD *)&v28[0];
  v8 = v31;
  v31 = 0;
  if (v8)
    WTF::fastFree(v8, v6);
  v9 = v30;
  v30 = 0;
  if (v9)
    WTF::fastFree(v9, v6);
  v10 = *(_DWORD *)(v5 + 20);
  v11 = 0.0;
  if ((v10 & 0x10000) != 0
    && ((*(_BYTE *)(v5 + 45) & 2) != 0
      ? (v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 96))
      : (v24 = *(_QWORD *)(v5 + 96)),
        (v25 = v24 & 0x1C00, v25 != 2048) && v25))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 264);
    v12 = 0.0;
    if (v26)
    {
      v12 = (float)*(int *)(v26 + 104);
      v11 = (float)*(int *)(v26 + 108);
    }
  }
  else
  {
    v12 = 0.0;
  }
  if ((v10 & 0x1000) == 0)
  {
    v13 = (float)((float)a2 * 0.015625) - (float)(*(float *)&v7 - v12);
    WebCore::InlineIterator::contentStartInBlockDirection((WebCore::InlineIterator *)a1, (const WebCore::InlineIterator::LineBox *)v6);
    v15 = v13 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    v17 = v14 * 64.0;
    if (v17 < 2147483650.0)
      goto LABEL_13;
LABEL_23:
    v18 = 0x7FFFFFFFLL;
    return v16 | (unint64_t)(v18 << 32);
  }
  v20 = *((float *)&v7 + 1) - v11;
  WebCore::InlineIterator::contentStartInBlockDirection((WebCore::InlineIterator *)a1, (const WebCore::InlineIterator::LineBox *)v6);
  v22 = v21 * 64.0;
  if (v22 > -2147483650.0)
    v23 = (int)v22;
  else
    v23 = 0x80000000;
  if (v22 < 2147483650.0)
    v16 = v23;
  else
    v16 = 0x7FFFFFFF;
  v17 = (float)((float)((float)a2 * 0.015625) - v20) * 64.0;
  if (v17 >= 2147483650.0)
    goto LABEL_23;
LABEL_13:
  if (v17 <= -2147483650.0)
  {
LABEL_33:
    v18 = 0x80000000;
    return v16 | (unint64_t)(v18 << 32);
  }
  v18 = (int)v17;
  return v16 | (unint64_t)(v18 << 32);
}

WebCore::Node *WebCore::nextLinePosition@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  void *v14;
  float v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v27;
  WebCore::Node *v28;
  uint64_t (*v29)();
  WebCore::Node *v30;
  WebCore::Node *v31;
  int v32;
  void *v33;
  void *v34;
  WTF *v35;
  WebCore::Node *v36;
  WTF *v37;
  WebCore::Node *v38;
  uint64_t v39;
  WTF *v40;
  int v41;
  WebCore::Node **v42;
  float v43;
  _BOOL8 isEditablePosition;
  __int16 v45;
  char v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  WebCore::Node *v50;
  uint64_t v51;
  int v52;
  WebCore::Node *result;
  uint64_t *v54;
  WebCore *v55;
  uint64_t v56;
  int v57;
  WTF *v58;
  int v59;
  char v60;
  int v61;
  int v62;
  _BYTE v63[16];
  int v64;
  char v65;
  _BYTE v66[16];
  int v67;
  char v68;
  WebCore::Node *v69[2];
  unsigned int v70;
  WebCore::Node *v71;
  int v72;
  char v73;
  int v74;
  WebCore::Node *v75;
  int v76;
  char v77;
  int v78;
  unsigned int v79[4];
  unsigned int v80;
  WebCore::Node *v81;
  int v82;
  char v83;
  _BYTE v84[9];

  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v9 + 2;
    v81 = (WebCore::Node *)v6;
    v82 = *(_DWORD *)(a1 + 8);
    v83 = *(_BYTE *)(a1 + 12);
    *(_DWORD *)(v6 + 24) = v9 + 4;
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::Document::updateLayout(v10, 2, 0);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      *((_BYTE *)a4 + 16) = 1;
LABEL_164:
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      goto LABEL_166;
    }
    *(_QWORD *)v79 = 0;
    v80 = 1;
    WebCore::Position::inlineBoxAndOffset((WebCore::Position *)a1, (const WebCore::Node *)*(unsigned __int8 *)(a1 + 16), (uint64_t)&v58);
    LOBYTE(v75) = 0;
    v78 = -1;
    v11 = v61;
    if (v61 != -1)
    {
      ((void (*)(WebCore::Node **, WebCore::Node **, WTF **))off_1E33AE248[v61])(&v71, &v75, &v58);
      v78 = v11;
      if (v61 != -1)
        ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v61])(&v71, &v58);
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v75) & 1) != 0)
      goto LABEL_45;
    if (v78 == -1)
      goto LABEL_202;
    v58 = (WTF *)&v71;
    ((void (*)(WebCore::Node **__return_ptr, WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v78])(v69, &v58, &v75);
    LOBYTE(v58) = 0;
    v61 = -1;
    v12 = v70;
    if (v70 == -1)
      goto LABEL_202;
    ((void (*)(WebCore::Node **, WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v70])(&v71, &v58, v69);
    v61 = v12;
    v71 = (WebCore::Node *)v84;
    ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v71, &v58);
    LOBYTE(v71) = 0;
    v74 = -1;
    v13 = v61;
    if (v61 == -1)
    {
      v13 = -1;
    }
    else
    {
      ((void (*)(_BYTE *, WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v61])(v84, &v71, &v58);
      v74 = v13;
      if (v61 != -1)
      {
        ((void (*)(_BYTE *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v61])(v84, &v58);
        v13 = v74;
      }
    }
    if (v80 == -1)
    {
      if (v13 == -1)
        goto LABEL_23;
    }
    else if (v13 == -1)
    {
      ((void (*)(WTF **, unsigned int *))off_1E33AE258[v80])(&v58, v79);
      v80 = -1;
      goto LABEL_21;
    }
    v58 = (WTF *)v79;
    ((void (*)(WTF **, unsigned int *, WebCore::Node **))off_1E33AE368[v13])(&v58, v79, &v71);
LABEL_21:
    if (v74 != -1)
      ((void (*)(WTF **, WebCore::Node **))off_1E33AE258[v74])(&v58, &v71);
LABEL_23:
    v74 = -1;
    if (v70 != -1)
      ((void (*)(WTF **, WebCore::Node **))off_1E33AE258[v70])(&v58, v69);
    if (v80 == -1)
      goto LABEL_202;
    v58 = (WTF *)&v71;
    if ((((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v80])(&v58, v79) & 1) != 0)goto LABEL_34;
    if (v80 == -1)
      goto LABEL_202;
    v58 = (WTF *)&v71;
    ((void (*)(WTF **, unsigned int *))off_1E33AE378[v80])(&v58, v79);
    if (v80 == -1)
      goto LABEL_202;
    v58 = (WTF *)&v71;
    if ((float)(v15 - ((float (*)(WTF **, unsigned int *))off_1E33AE388[v80])(&v58, v79)) == 0.0)
      goto LABEL_34;
    if (v80 == -1)
      goto LABEL_202;
    v71 = (WebCore::Node *)v69;
    ((void (*)(WTF **__return_ptr, WebCore::Node **, unsigned int *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                + v80))(&v58, &v71, v79);
    v16 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v58);
    if (v61 != -1)
      ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v61])(&v71, &v58);
    if (v16)
    {
LABEL_34:
      v58 = 0;
      v61 = 1;
      if (v80 == -1)
      {
        v20 = 0;
      }
      else
      {
        if (v80 == 1)
        {
          v17 = *(unsigned int **)v79;
          *(_QWORD *)v79 = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v14);
            }
          }
          goto LABEL_43;
        }
        ((void (*)(WebCore::Node **, unsigned int *))off_1E33AE258[v80])(&v71, v79);
        v20 = v58;
      }
      v58 = 0;
      *(_QWORD *)v79 = v20;
      v80 = 1;
LABEL_43:
      if (v61 != -1)
        ((void (*)(WebCore::Node **, WTF **))off_1E33AE258[v61])(&v71, &v58);
    }
LABEL_45:
    if (v78 != -1)
      ((void (*)(WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v78])(&v58, &v75);
    if (v80 == -1)
      goto LABEL_202;
    v58 = (WTF *)&v75;
    if (!((unsigned int (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v80])(&v58, v79))goto LABEL_126;
    if ((v83 & 8) == 0 && ((v21 = v83 & 7, v21 == 4) || v21 == 2))
      v22 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v81);
    else
      v22 = v82;
    v23 = v6;
    if ((*(_WORD *)(v6 + 28) & 4) == 0)
      goto LABEL_206;
    v24 = *(_QWORD *)(v6 + 80);
    if (v22 && v24)
    {
      v25 = v22 - 1;
      do
      {
        v24 = *(_QWORD *)(v24 + 56);
        v27 = v25-- != 0;
      }
      while (v24 && v27);
    }
    v23 = v6;
    if (!v24)
    {
LABEL_206:
      do
      {
        v24 = v23;
        if ((*(_WORD *)(v23 + 28) & 4) == 0)
          break;
        v23 = *(_QWORD *)(v23 + 88);
      }
      while (v23);
    }
    *(_DWORD *)(v24 + 24) += 2;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    v6 = v24;
    WebCore::nextLineCandidatePosition((uint64_t *)v69, (WebCore *)v24, a1, a3);
    v28 = v69[0];
    v29 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v69[0])
      v29 = 0;
    if (!v29)
    {
LABEL_123:
      v69[0] = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
LABEL_126:
      if (v80 != -1)
      {
        v58 = (WTF *)&v75;
        if ((((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v80])(&v58, v79) & 1) != 0)
        {
          if (WebCore::hasEditableStyle((WebCore *)v6, a3))
          {
            WebCore::firstPositionInOrBeforeNode(v6, v38, (uint64_t)&v58);
            v39 = WebCore::editableRootForPosition((uint64_t)&v58, a3);
            v40 = v58;
            v58 = 0;
            if (v40)
            {
              if (*((_DWORD *)v40 + 6) == 2)
              {
                if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v40);
              }
              else
              {
                *((_DWORD *)v40 + 6) -= 2;
              }
            }
          }
          else
          {
            v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 1272);
          }
          if (v39)
          {
            v45 = *(_WORD *)(v39 + 28);
            *(_DWORD *)(v39 + 24) += 4;
            if ((v45 & 1) != 0)
            {
              v51 = *(_QWORD *)(v39 + 80);
              if (v51)
                LODWORD(v51) = *(_DWORD *)(v51 + 4);
              v58 = (WTF *)v39;
              v59 = v51;
              v46 = v60 & 0xF0;
            }
            else
            {
              v58 = (WTF *)v39;
              v59 = 0;
              v46 = v60 & 0xF0 | 4;
            }
            v60 = v46;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v58, (uint64_t)a4);
            *((_BYTE *)a4 + 16) = 1;
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v39);
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
            if (*(_DWORD *)(v39 + 24) != 2)
            {
              *(_DWORD *)(v39 + 24) -= 2;
              goto LABEL_162;
            }
            if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
            {
              v36 = (WebCore::Node *)v39;
LABEL_195:
              WebCore::Node::removedLastRef(v36);
            }
          }
          else
          {
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            *((_BYTE *)a4 + 16) = 1;
          }
LABEL_162:
          if (v80 != -1)
            ((void (*)(WTF **, unsigned int *))off_1E33AE258[v80])(&v58, v79);
          goto LABEL_164;
        }
        v71 = (WebCore::Node *)WebCore::absoluteLineDirectionPointToLocalPointInBlock(v79, a2);
        if (v80 != -1)
        {
          v58 = (WTF *)&v75;
          v41 = ((uint64_t (*)(WTF **, unsigned int *))off_1E33AE3B8[v80])(&v58, v79);
          v42 = &v71;
          if (!v41)
            v42 = (WebCore::Node **)((char *)&v71 + 4);
          v43 = (float)*(int *)v42 * 0.015625;
          isEditablePosition = WebCore::isEditablePosition((uint64_t)&v81, 0);
          WebCore::InlineIterator::closestBoxForHorizontalPosition((WebCore::InlineIterator *)v79, (const WebCore::InlineIterator::LineBox *)isEditablePosition, v43, (WebCore::InlineIterator::Box *)&v58);
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v58))
          {
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            *((_BYTE *)a4 + 16) = 1;
LABEL_160:
            if (v61 != -1)
              ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v61])(&v75, &v58);
            goto LABEL_162;
          }
          if (v61 != -1)
          {
            v75 = (WebCore::Node *)v69;
            v47 = ((uint64_t (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v61])(&v75, &v58);
            v48 = (_DWORD *)v47;
            ++*(_DWORD *)(v47 + 16);
            if ((*(_BYTE *)(v47 + 45) & 1) != 0 || (v49 = *(_QWORD *)(*(_QWORD *)(v47 + 24) + 8)) == 0)
            {
              (*(void (**)(uint64_t, WebCore::Node **, _QWORD, _QWORD))(*(_QWORD *)v47 + 352))(v47, &v71, 0, 0);
            }
            else
            {
              *(_DWORD *)(v49 + 24) += 2;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 208))(v49) & 1) != 0)
              {
                (*(void (**)(_DWORD *, WebCore::Node **, _QWORD, _QWORD))(*(_QWORD *)v48 + 352))(v48, &v71, 0, 0);
              }
              else
              {
                WebCore::positionInParentBeforeNode((WebCore *)v49, v50, (uint64_t)&v75);
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v75, (uint64_t)a4);
                *((_BYTE *)a4 + 16) = 1;
                if (v75)
                {
                  if (*((_DWORD *)v75 + 6) == 2)
                  {
                    if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v75);
                  }
                  else
                  {
                    *((_DWORD *)v75 + 6) -= 2;
                  }
                }
              }
              if (*(_DWORD *)(v49 + 24) == 2)
              {
                if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v49);
              }
              else
              {
                *(_DWORD *)(v49 + 24) -= 2;
              }
            }
            v52 = v48[4];
            if (!v52)
            {
              __break(0xC471u);
              JUMPOUT(0x195B520D0);
            }
            v48[4] = v52 - 1;
            goto LABEL_160;
          }
        }
      }
LABEL_202:
      v54 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::nextLineCandidatePosition(v54, v55, v56, v57);
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v69, (uint64_t)&v75);
    LOBYTE(v78) = 1;
    v30 = v75;
    if (v75)
      *((_DWORD *)v75 + 6) += 2;
    v71 = v30;
    v72 = v76;
    v73 = v77;
    WebCore::RenderedPosition::RenderedPosition((uint64_t)&v58, (WebCore::Position *)&v71, (const WebCore::Node *)1);
    v31 = v71;
    v71 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v59) & 1) != 0)
    {
      v75 = 0;
      v32 = 1;
      v78 = 1;
    }
    else
    {
      if (v62 == -1)
        goto LABEL_202;
      v71 = (WebCore::Node *)v84;
      ((void (*)(WebCore::Node **__return_ptr, WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v62])(&v75, &v71, &v59);
      v32 = v78;
    }
    if (v80 == -1)
    {
      if (v32 == -1)
        goto LABEL_202;
    }
    else if (v32 == -1)
    {
      ((void (*)(WebCore::Node **, unsigned int *))off_1E33AE258[v80])(&v71, v79);
      v80 = -1;
LABEL_89:
      if (v78 != -1)
        ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33AE258[v78])(&v71, &v75);
      if (v80 == -1)
        goto LABEL_202;
      v75 = (WebCore::Node *)&v71;
      if (((unsigned int (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v80])(&v75, v79))
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v69, (uint64_t)a4);
        *((_BYTE *)a4 + 16) = 1;
        if (v68)
        {
          if (v67 != -1)
            ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v67])(&v75, v66);
          v67 = -1;
        }
        if (v65)
        {
          if (v64 != -1)
            ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v64])(&v75, v63);
          v64 = -1;
        }
        if (v62 != -1)
          ((void (*)(WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v62])(&v75, &v59);
        v62 = -1;
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
            WTF::fastFree(v35, v34);
          else
            --*(_DWORD *)v35;
        }
        v36 = v69[0];
        v69[0] = 0;
        if (!v36)
          goto LABEL_162;
        if (*((_DWORD *)v36 + 6) != 2)
        {
          *((_DWORD *)v36 + 6) -= 2;
          goto LABEL_162;
        }
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          goto LABEL_195;
        goto LABEL_162;
      }
      if (v68)
      {
        if (v67 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v67])(&v75, v66);
        v67 = -1;
      }
      if (v65)
      {
        if (v64 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v64])(&v75, v63);
        v64 = -1;
      }
      if (v62 != -1)
        ((void (*)(WebCore::Node **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v62])(&v75, &v59);
      v62 = -1;
      v37 = v58;
      v58 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          WTF::fastFree(v37, v33);
        else
          --*(_DWORD *)v37;
      }
      v28 = v69[0];
      goto LABEL_123;
    }
    v71 = (WebCore::Node *)v79;
    ((void (*)(WebCore::Node **, unsigned int *, WebCore::Node **))off_1E33AE368[v32])(&v71, v79, &v75);
    goto LABEL_89;
  }
  v81 = 0;
  v82 = *(_DWORD *)(a1 + 8);
  v83 = *(_BYTE *)(a1 + 12);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  *((_BYTE *)a4 + 16) = 1;
LABEL_166:
  result = v81;
  v81 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::nextLineCandidatePosition(uint64_t *a1, WebCore *a2, uint64_t a3, int a4)
{
  WebCore::Node *v8;
  WebCore::Node *v9;
  _BOOL4 v10;
  const WebCore::Node *v11;
  uint64_t v12;
  uint64_t LeafNode;
  const WebCore::Node *v14;
  WebCore::Node *result;
  uint64_t v16;
  const WebCore::VisiblePosition *v17;
  WebCore::Node *v18;
  _BOOL4 v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  int v22;
  const WebCore::Node *v23;
  uint64_t v24;
  WebCore *v25;
  uint64_t v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  uint64_t v30;
  int v31;
  const WebCore::Node *v32;
  char v33;
  uint64_t v34;
  _BOOL4 hasEditableStyle;
  WebCore *i;
  WebCore *v37;
  uint64_t v38;
  WebCore::Node *v39[2];
  WebCore::Node *v40;
  int v41;
  char v42;
  char v43;
  WebCore::Node *v44;

  v8 = *(WebCore::Node **)a3;
  if (*(_QWORD *)a3)
    *((_DWORD *)v8 + 6) += 2;
  v40 = v8;
  v41 = *(_DWORD *)(a3 + 8);
  v42 = *(_BYTE *)(a3 + 12);
  WebCore::highestEditableRoot((uint64_t)&v40, a4, (uint64_t *)&v44);
  v9 = v40;
  v40 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  if (a2 && (v10 = WebCore::hasEditableStyle(a2, a4), (v12 = WebCore::nextLeafNode(a2, v11)) != 0))
  {
    LeafNode = v12;
    while (v10 != WebCore::hasEditableStyle((WebCore *)LeafNode, a4))
    {
      LeafNode = WebCore::nextLeafNode((WebCore *)LeafNode, v14);
      if (!LeafNode)
        goto LABEL_11;
    }
    *(_DWORD *)(LeafNode + 24) += 2;
    while (1)
    {
      v16 = LeafNode;
      if ((*(_QWORD *)(LeafNode + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        WebCore::firstPositionInOrBeforeNode(LeafNode, v14, (uint64_t)v39);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v39, (uint64_t)&v40);
        v43 = 1;
        v19 = WebCore::inSameLine((WebCore *)&v40, (const WebCore::VisiblePosition *)a3, v17);
        v20 = v40;
        v40 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        v21 = v39[0];
        v39[0] = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
        if (!v19)
          break;
      }
      v22 = WebCore::Node::computeEditability(v16, 0, 1);
      v24 = WebCore::nextLeafNode((WebCore *)v16, v23);
      if (v24)
      {
        v25 = (WebCore *)v24;
        if (v22)
        {
          while (!WebCore::Node::computeEditability((uint64_t)v25, 0, 1))
          {
            v25 = (WebCore *)WebCore::nextLeafNode(v25, v14);
            LeafNode = 0;
            if (!v25)
              goto LABEL_34;
          }
        }
        else
        {
          while (WebCore::Node::computeEditability((uint64_t)v25, 0, 1))
          {
            v25 = (WebCore *)WebCore::nextLeafNode(v25, v14);
            if (!v25)
              goto LABEL_32;
          }
        }
        *((_DWORD *)v25 + 6) += 2;
        LeafNode = (uint64_t)v25;
      }
      else
      {
LABEL_32:
        LeafNode = 0;
      }
LABEL_34:
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      if (!LeafNode)
        goto LABEL_11;
    }
    while (1)
    {
      v26 = v16;
      if ((*(_WORD *)(v16 + 28) & 0x80) != 0)
        break;
      WebCore::firstPositionInOrBeforeNode(v16, v18, (uint64_t)&v40);
      WebCore::highestEditableRoot((uint64_t)&v40, a4, (uint64_t *)v39);
      v27 = v39[0];
      v28 = v44;
      v39[0] = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
      v29 = v40;
      v40 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      if (v27 != v28)
        break;
      *a1 = 0;
      *((_DWORD *)a1 + 2) = 0;
      *((_BYTE *)a1 + 12) &= 0xF0u;
      *(_DWORD *)(v26 + 24) += 2;
      v30 = *(_QWORD *)(v26 + 64) & 0xFFFFFFFFFFFFLL;
      if (v30)
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 528))(v30);
      else
        v31 = 0;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 208))(v26) & 1) != 0)
      {
        v33 = 8;
      }
      else if (v31)
      {
        v33 = 10;
      }
      else
      {
        v33 = 9;
      }
      v34 = *a1;
      *a1 = v26;
      if (v34)
      {
        if (*(_DWORD *)(v34 + 24) == 2)
        {
          if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v34);
        }
        else
        {
          *(_DWORD *)(v34 + 24) -= 2;
        }
      }
      *((_DWORD *)a1 + 2) = v31;
      *((_BYTE *)a1 + 12) = v33;
      if (WebCore::Position::isCandidate((WebCore::Position *)a1, v32))
        goto LABEL_87;
      hasEditableStyle = WebCore::hasEditableStyle((WebCore *)v26, a4);
      for (i = (WebCore *)v26; ; i = (WebCore *)v16)
      {
        v37 = (WebCore *)WebCore::nextLeafNode(i, v18);
        v16 = (uint64_t)v37;
        if (!v37)
          break;
        if (hasEditableStyle == WebCore::hasEditableStyle(v37, a4))
        {
          *(_DWORD *)(v16 + 24) += 2;
          break;
        }
      }
      if (*(_DWORD *)(v26 + 24) == 2)
      {
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v26);
      }
      else
      {
        *(_DWORD *)(v26 + 24) -= 2;
      }
      v38 = *a1;
      *a1 = 0;
      if (v38)
      {
        if (*(_DWORD *)(v38 + 24) == 2)
        {
          if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v38);
        }
        else
        {
          *(_DWORD *)(v38 + 24) -= 2;
        }
      }
      if (!v16)
        goto LABEL_11;
    }
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    *((_BYTE *)a1 + 12) &= 0xF0u;
LABEL_87:
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  else
  {
LABEL_11:
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    *((_BYTE *)a1 + 12) &= 0xF0u;
  }
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::startSentenceBoundary()
{
  WTF::sentenceBreakIterator();
  return ubrk_preceding();
}

uint64_t WebCore::endSentenceBoundary()
{
  WTF::sentenceBreakIterator();
  return ubrk_next();
}

unsigned int *WebCore::previousSentencePosition@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  unsigned int *result;
  WebCore::Node *v7[3];

  WebCore::previousBoundary((uint64_t)v7, (uint64_t)this, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousSentencePositionBoundary, 0);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore(this, (const WebCore::VisiblePosition *)v7, 0, a2);
  result = (unsigned int *)v7[0];
  v7[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::previousSentencePositionBoundary()
{
  WTF::sentenceBreakIterator();
  return ubrk_preceding();
}

unsigned int *WebCore::nextSentencePosition@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  unsigned int *result;
  WebCore::Node *v7[3];

  WebCore::nextBoundary((uint64_t)v7, (uint64_t)this, (WebCore::Node *)WebCore::nextSentencePositionBoundary);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter(this, (const WebCore::VisiblePosition *)v7, 0, a2);
  result = (unsigned int *)v7[0];
  v7[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::nextSentencePositionBoundary()
{
  WTF::sentenceBreakIterator();
  return ubrk_following();
}

uint64_t WebCore::findStartOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, _DWORD *a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  WebCore::RenderObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  __int16 v39;
  int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;

  if (!a1)
  {
    result = WebCore::Node::computeEditability(0, 0, 1);
    v16 = 0;
    v14 = 0;
    goto LABEL_222;
  }
  *(_DWORD *)(a1 + 24) += 4;
  result = WebCore::Node::computeEditability(a1, 0, 1);
  v13 = result;
  v14 = a1;
  v15 = a1;
  while (a6 == 1)
  {
    v20 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v20)
      goto LABEL_33;
    v21 = *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v21 + 1;
    v22 = (_QWORD *)v20;
    if ((*(_BYTE *)(v20 + 45) & 2) != 0)
    {
      v22 = *(_QWORD **)(v20 + 32);
      if (v22)
        v22 = (_QWORD *)v22[1];
    }
    if (v21 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195B52FB4);
    }
    v23 = v22[13];
    if ((*(_BYTE *)(v23 + 239) & 1) != 0)
    {
      *(_DWORD *)(v20 + 16) = v21;
LABEL_33:
      result = WebCore::Node::computeEditability(v15, 0, 1);
      if ((v13 != 0) == ((_DWORD)result != 0))
        goto LABEL_47;
      v16 = v15;
      goto LABEL_222;
    }
    v24 = *(_DWORD *)(v23 + 228);
    v25 = (v24 >> 15) & 3;
    if ((v24 & 0x30) != 0)
    {
      v44 = *(_DWORD *)(*(_QWORD *)(v22[11] + 32) + 148) & 0xC00000;
      v45 = v25 <= 1 ? 1 : (v24 >> 15) & 3;
      if (v44 != 0x800000)
        v25 = v45;
    }
    *(_DWORD *)(v20 + 16) = v21;
    if (v25 != 2)
      goto LABEL_33;
LABEL_47:
    v29 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v29)
    {
      if ((*(_WORD *)(v15 + 28) & 4) != 0)
      {
        v16 = *(_QWORD *)(v15 + 88);
        if (v16)
          goto LABEL_188;
      }
      if (v15 == a3)
      {
        v16 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
        if (v16)
          goto LABEL_188;
        v60 = *(_QWORD *)(v15 + 32);
        if (v60 && v60 != a3)
        {
          while (1)
          {
            v16 = *(_QWORD *)(v60 + 48) & 0xFFFFFFFFFFFFLL;
            if (v16)
              break;
            v60 = *(_QWORD *)(v60 + 32);
            if (v60)
              v61 = v60 == a3;
            else
              v61 = 1;
            if (v61)
              goto LABEL_189;
          }
LABEL_188:
          *(_DWORD *)(v16 + 24) += 2;
        }
      }
LABEL_189:
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
      goto LABEL_212;
    }
    v30 = *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v31 = v30 + 1;
    *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v30 + 1;
    v32 = *(_BYTE *)(v29 + 45);
    v33 = v29;
    if ((v32 & 2) != 0)
      v33 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8);
    if ((*(_BYTE *)(v33 + 120) & 0x30) != 0)
    {
      if ((*(_WORD *)(v15 + 28) & 4) != 0)
      {
        v16 = *(_QWORD *)(v15 + 88);
        if (v16)
          goto LABEL_55;
      }
      if (v15 == a3)
      {
        v16 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
        if (v16)
          goto LABEL_55;
        v42 = *(_QWORD *)(v15 + 32);
        if (v42 && v42 != a3)
        {
          while (1)
          {
            v16 = *(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFLL;
            if (v16)
              break;
            v42 = *(_QWORD *)(v42 + 32);
            if (v42)
              v43 = v42 == a3;
            else
              v43 = 1;
            if (v43)
              goto LABEL_56;
          }
LABEL_55:
          *(_DWORD *)(v16 + 24) += 2;
        }
      }
LABEL_56:
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
          v31 = *(_DWORD *)(v29 + 16);
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
      v34 = 2;
      goto LABEL_209;
    }
    if ((*(_BYTE *)(v29 + 46) != 17 || (*(_BYTE *)(v29 + 52) & 7) == 2 && (*(_BYTE *)(v29 + 53) & 1) != 0)
      && (*(_BYTE *)(v29 + 20) & 1) == 0)
    {
      if ((*(_BYTE *)(v29 + 45) & 2) != 0)
      {
        *(_DWORD *)(v29 + 16) = v30 + 2;
        result = WebCore::RenderText::hasRenderedText((WebCore::RenderText *)v29, v12);
        if ((_DWORD)result)
        {
          *a5 = 0;
          v35 = *(_DWORD *)(v33 + 120);
          v36 = (v35 >> 27) & 7;
          if ((v35 & 0x40000000) == 0 && v36 == 3
            || v36
            && ((v50 = v35 & 0x40000000) != 0 ? (v51 = 1) : (v51 = 2), v36 == v51 || !((v36 != 1) | (v50 >> 30) & 1)))
          {
            v52 = *(_QWORD *)(v29 + 104);
            if (v52)
            {
              v53 = *(unsigned int *)(v52 + 4);
              v54 = *a4 < (int)v53 && v15 == a1;
              LODWORD(v55) = *a4 & ~(*a4 >> 31);
              if (v54)
                v55 = v55;
              else
                v55 = v53;
              v56 = v55 - 1;
              while (1)
              {
                v57 = __OFSUB__((_DWORD)v55, 1);
                LODWORD(v55) = v55 - 1;
                if ((int)v55 < 0 != v57)
                  break;
                if (v56 >= v53)
                {
                  v59 = 0;
                }
                else
                {
                  v58 = *(_QWORD *)(v52 + 8);
                  if ((*(_BYTE *)(v52 + 16) & 4) != 0)
                    v59 = *(unsigned __int8 *)(v58 + v56);
                  else
                    v59 = *(unsigned __int16 *)(v58 + 2 * v56);
                }
                --v56;
                if (v59 == 10)
                {
                  v16 = 0;
                  *a4 = v55 + 1;
                  *a7 = v15;
                  v34 = 1;
                  goto LABEL_98;
                }
              }
            }
          }
          *(_DWORD *)(v15 + 24) += 2;
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
          *a4 = 0;
          if ((*(_WORD *)(v15 + 28) & 4) == 0 || (v16 = *(_QWORD *)(v15 + 88)) == 0)
          {
            if (v15 != a3)
            {
              v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
              if (v16)
                goto LABEL_94;
              v37 = *(_QWORD *)(v15 + 32);
              if (v37 && v37 != a3)
              {
                do
                {
                  v16 = *(_QWORD *)(v37 + 48) & 0xFFFFFFFFFFFFLL;
                  if (v16)
                    goto LABEL_94;
                  v37 = *(_QWORD *)(v37 + 32);
                  if (v37)
                    v38 = v37 == a3;
                  else
                    v38 = 1;
                }
                while (!v38);
              }
LABEL_95:
              if (*(_DWORD *)(v15 + 24) == 2)
              {
                if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
                v34 = 0;
              }
              else
              {
                v34 = 0;
                *(_DWORD *)(v15 + 24) -= 2;
              }
              v14 = v15;
LABEL_98:
              v31 = *(_DWORD *)(v29 + 16);
              if ((v32 & 2) != 0)
              {
                if (!v31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B52FECLL);
                }
                *(_DWORD *)(v29 + 16) = --v31;
              }
              goto LABEL_209;
            }
LABEL_129:
            v16 = 0;
            goto LABEL_95;
          }
LABEL_94:
          *(_DWORD *)(v16 + 24) += 2;
          goto LABEL_95;
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15);
      if (!(_DWORD)result)
      {
LABEL_89:
        *(_DWORD *)(v15 + 24) += 2;
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v14);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
        *a5 = 1;
        v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
        if (v16)
          goto LABEL_94;
        if ((*(_WORD *)(v15 + 28) & 4) != 0)
        {
          v16 = *(_QWORD *)(v15 + 88);
          if (v16)
            goto LABEL_94;
        }
        if (v15 == a3)
          goto LABEL_129;
        v16 = 0;
        v46 = *(_QWORD *)(v15 + 32);
        if (!v46 || v46 == a3)
          goto LABEL_95;
        while (1)
        {
          v16 = *(_QWORD *)(v46 + 48) & 0xFFFFFFFFFFFFLL;
          if (v16)
            goto LABEL_94;
          v46 = *(_QWORD *)(v46 + 32);
          if (v46)
            v47 = v46 == a3;
          else
            v47 = 1;
          if (v47)
            goto LABEL_95;
        }
      }
      v39 = *(_WORD *)(v15 + 28);
      if ((v39 & 0x10) != 0)
      {
        v40 = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = v40 + 2;
        if ((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            goto LABEL_240;
          v41 = *(unsigned __int8 *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
          if (v40)
          {
            *(_DWORD *)(v15 + 24) = v40;
            if (v41 == 35 || v41 == 63)
              goto LABEL_89;
            goto LABEL_135;
          }
          if ((*(_WORD *)(v15 + 30) & 0x400) != 0)
          {
            if (v41 == 63 || v41 == 35)
              goto LABEL_89;
            goto LABEL_135;
          }
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
          if (v41 == 35 || v41 == 63)
            goto LABEL_89;
        }
        else
        {
          if (v40)
          {
            *(_DWORD *)(v15 + 24) = v40;
            goto LABEL_135;
          }
          if ((*(_WORD *)(v15 + 30) & 0x400) != 0)
            goto LABEL_135;
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
        }
        v39 = *(_WORD *)(v15 + 28);
      }
LABEL_135:
      if ((v39 & 4) != 0 && (v16 = *(_QWORD *)(v15 + 88)) != 0)
      {
LABEL_139:
        *(_DWORD *)(v16 + 24) += 2;
      }
      else if (v15 == a3)
      {
        v16 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
        if (v16)
          goto LABEL_139;
        v48 = *(_QWORD *)(v15 + 32);
        if (v48 && v48 != a3)
        {
          do
          {
            v16 = *(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFLL;
            if (v16)
              goto LABEL_139;
            v48 = *(_QWORD *)(v48 + 32);
            if (v48)
              v49 = v48 == a3;
            else
              v49 = 1;
          }
          while (!v49);
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
        v34 = 0;
      }
      else
      {
        v34 = 0;
        *(_DWORD *)(v15 + 24) -= 2;
      }
      goto LABEL_98;
    }
    v34 = 3;
    v16 = v15;
LABEL_209:
    if (!v31)
    {
LABEL_240:
      __break(0xC471u);
      JUMPOUT(0x195B52F94);
    }
    *(_DWORD *)(v29 + 16) = v31 - 1;
    if (v34 && v34 != 2)
    {
      if (v34 == 3)
        goto LABEL_222;
      goto LABEL_223;
    }
LABEL_212:
    v15 = v16;
    if (!v16)
      goto LABEL_222;
  }
  if (a6 != 2)
    goto LABEL_47;
  while (2)
  {
    v16 = v15;
    result = WebCore::Node::computeEditability(v15, 0, 1);
    if ((v13 != 0) != ((_DWORD)result != 0))
    {
      if ((*(_WORD *)(v15 + 28) & 4) != 0)
      {
        v15 = *(_QWORD *)(v15 + 88);
        if (v15)
          goto LABEL_10;
      }
      if (v16 == a3)
      {
        v15 = 0;
        v17 = 1;
      }
      else
      {
        v15 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
        if (v15)
          goto LABEL_10;
        v18 = *(_QWORD *)(v16 + 32);
        v17 = 1;
        if (v18 && v18 != a3)
        {
          while (1)
          {
            v15 = *(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFLL;
            if (v15)
              break;
            v18 = *(_QWORD *)(v18 + 32);
            v17 = 1;
            if (v18)
              v19 = v18 == a3;
            else
              v19 = 1;
            if (v19)
              goto LABEL_11;
          }
LABEL_10:
          v17 = 0;
          *(_DWORD *)(v15 + 24) += 2;
        }
      }
LABEL_11:
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      if ((v17 & 1) != 0)
      {
        v16 = 0;
        goto LABEL_222;
      }
      continue;
    }
    break;
  }
  if (a2)
  {
    v26 = *(_WORD *)(a2 + 28);
    if ((v26 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v15 + 40) == a2 && (*(_WORD *)(v15 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v15 + 22) & 8) != 0)
        goto LABEL_47;
    }
    else if ((v26 & 4) != 0
           && *(_QWORD *)(a2 + 80)
           && ((*(unsigned __int8 *)(v15 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) == 0)
    {
      v27 = v15;
      do
        v27 = *(_QWORD *)(v27 + 32);
      while (v27 != a2 && v27 != 0);
      if (v27)
        goto LABEL_47;
    }
  }
LABEL_222:
  *a7 = v14;
  v14 = 0;
LABEL_223:
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::findEndOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _DWORD *a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  WebCore::RenderObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v37;
  __int16 v38;
  int v39;
  int v40;
  uint64_t v41;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  if (!a1)
  {
    result = WebCore::Node::computeEditability(0, 0, 1);
    v16 = 0;
    v14 = 0;
    goto LABEL_201;
  }
  *(_DWORD *)(a1 + 24) += 4;
  result = WebCore::Node::computeEditability(a1, 0, 1);
  v13 = result;
  v14 = a1;
  v15 = a1;
  while (a6 == 1)
  {
    v19 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v19)
      goto LABEL_30;
    v20 = *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v20 + 1;
    v21 = (_QWORD *)v19;
    if ((*(_BYTE *)(v19 + 45) & 2) != 0)
    {
      v21 = *(_QWORD **)(v19 + 32);
      if (v21)
        v21 = (_QWORD *)v21[1];
    }
    if (v20 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195B53848);
    }
    v22 = v21[13];
    if ((*(_BYTE *)(v22 + 239) & 1) != 0)
    {
      *(_DWORD *)(v19 + 16) = v20;
LABEL_30:
      result = WebCore::Node::computeEditability(v15, 0, 1);
      if ((v13 != 0) == ((_DWORD)result != 0))
        goto LABEL_44;
      v16 = v15;
      goto LABEL_201;
    }
    v23 = *(_DWORD *)(v22 + 228);
    v24 = (v23 >> 15) & 3;
    if ((v23 & 0x30) != 0)
    {
      v43 = *(_DWORD *)(*(_QWORD *)(v21[11] + 32) + 148) & 0xC00000;
      v44 = v24 <= 1 ? 1 : (v23 >> 15) & 3;
      if (v43 != 0x800000)
        v24 = v44;
    }
    *(_DWORD *)(v19 + 16) = v20;
    if (v24 != 2)
      goto LABEL_30;
LABEL_44:
    v28 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v28)
    {
      if ((*(_WORD *)(v15 + 28) & 4) != 0)
      {
        v16 = *(_QWORD *)(v15 + 80);
        if (v16)
          goto LABEL_177;
      }
      if (v15 == a3)
        goto LABEL_169;
      v16 = *(_QWORD *)(v15 + 56);
      if (v16)
      {
LABEL_177:
        *(_DWORD *)(v16 + 24) += 2;
      }
      else
      {
        v56 = v15;
        while (1)
        {
          v56 = *(_QWORD *)(v56 + 32);
          if (!v56 || v56 == a3)
            break;
          v16 = *(_QWORD *)(v56 + 56);
          if (v16)
            goto LABEL_177;
        }
LABEL_169:
        v16 = 0;
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
      goto LABEL_191;
    }
    v29 = *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v30 = v29 + 1;
    *(_DWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v29 + 1;
    v31 = *(_BYTE *)(v28 + 45);
    v32 = v28;
    if ((v31 & 2) != 0)
      v32 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8);
    if ((*(_BYTE *)(v32 + 120) & 0x30) != 0)
    {
      if ((*(_WORD *)(v15 + 28) & 4) != 0)
      {
        v16 = *(_QWORD *)(v15 + 80);
        if (v16)
          goto LABEL_74;
      }
      if (v15 == a3)
        goto LABEL_51;
      v16 = *(_QWORD *)(v15 + 56);
      if (v16)
      {
LABEL_74:
        *(_DWORD *)(v16 + 24) += 2;
      }
      else
      {
        v35 = v15;
        while (1)
        {
          v35 = *(_QWORD *)(v35 + 32);
          if (!v35 || v35 == a3)
            break;
          v16 = *(_QWORD *)(v35 + 56);
          if (v16)
            goto LABEL_74;
        }
LABEL_51:
        v16 = 0;
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
          v30 = *(_DWORD *)(v28 + 16);
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
      v37 = 2;
      goto LABEL_188;
    }
    if ((*(_BYTE *)(v28 + 46) != 17 || (*(_BYTE *)(v28 + 52) & 7) == 2 && (*(_BYTE *)(v28 + 53) & 1) != 0)
      && ((*(_WORD *)(v15 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      && (*(_BYTE *)(v28 + 20) & 1) == 0)
    {
      if ((*(_BYTE *)(v28 + 45) & 2) != 0)
      {
        *(_DWORD *)(v28 + 16) = v29 + 2;
        result = WebCore::RenderText::hasRenderedText((WebCore::RenderText *)v28, v12);
        if ((_DWORD)result)
        {
          *a5 = 0;
          v33 = *(_DWORD *)(v32 + 120);
          v34 = (v33 >> 27) & 7;
          if ((v33 & 0x40000000) == 0 && v34 == 3
            || v34
            && ((v49 = v33 & 0x40000000) != 0 ? (v50 = 1) : (v50 = 2), v34 == v50 || !((v34 != 1) | (v49 >> 30) & 1)))
          {
            v51 = *a4;
            if (v15 != a1)
              v51 = 0;
            v52 = *(_QWORD *)(v28 + 104);
            if (v52)
            {
              v53 = *(_DWORD *)(v52 + 4);
              if ((int)v51 < (int)v53)
              {
                while (1)
                {
                  if (v53 > v51)
                  {
                    v54 = *(_QWORD *)(v52 + 8);
                    v55 = (*(_BYTE *)(v52 + 16) & 4) != 0
                        ? *(unsigned __int8 *)(v54 + v51)
                        : *(unsigned __int16 *)(v54 + 2 * v51);
                    if (v55 == 10)
                      break;
                  }
                  if (v53 == ++v51)
                    goto LABEL_61;
                }
                v16 = 0;
                *a4 = v51;
                *a7 = v15;
                v37 = 1;
                goto LABEL_114;
              }
            }
          }
LABEL_61:
          *(_DWORD *)(v15 + 24) += 2;
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 536))(v28);
          *a4 = result;
          if ((*(_WORD *)(v15 + 28) & 4) == 0 || (v16 = *(_QWORD *)(v15 + 80)) == 0)
          {
            if (v15 == a3)
              goto LABEL_66;
            v16 = *(_QWORD *)(v15 + 56);
            if (!v16)
            {
              v45 = v15;
              do
              {
                v45 = *(_QWORD *)(v45 + 32);
                if (!v45 || v45 == a3)
                  goto LABEL_66;
                v16 = *(_QWORD *)(v45 + 56);
              }
              while (!v16);
            }
          }
LABEL_110:
          *(_DWORD *)(v16 + 24) += 2;
          goto LABEL_111;
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15);
      if ((_DWORD)result)
      {
        v38 = *(_WORD *)(v15 + 28);
        if ((v38 & 0x10) == 0)
          goto LABEL_124;
        v39 = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = v39 + 2;
        if ((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            goto LABEL_219;
          v40 = *(unsigned __int8 *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
          if (v39)
          {
            *(_DWORD *)(v15 + 24) = v39;
            if (v40 == 35 || v40 == 63)
              goto LABEL_85;
LABEL_124:
            if ((v38 & 4) != 0)
            {
              v16 = *(_QWORD *)(v15 + 80);
              if (v16)
                goto LABEL_135;
            }
            if (v15 == a3)
              goto LABEL_127;
            v16 = *(_QWORD *)(v15 + 56);
            if (v16)
            {
LABEL_135:
              *(_DWORD *)(v16 + 24) += 2;
            }
            else
            {
              v47 = v15;
              while (1)
              {
                v47 = *(_QWORD *)(v47 + 32);
                if (!v47 || v47 == a3)
                  break;
                v16 = *(_QWORD *)(v47 + 56);
                if (v16)
                  goto LABEL_135;
              }
LABEL_127:
              v16 = 0;
            }
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
              v37 = 0;
            }
            else
            {
              v37 = 0;
              *(_DWORD *)(v15 + 24) -= 2;
            }
LABEL_114:
            v30 = *(_DWORD *)(v28 + 16);
            if ((v31 & 2) != 0)
            {
              if (!v30)
              {
                __break(0xC471u);
                JUMPOUT(0x195B53880);
              }
              *(_DWORD *)(v28 + 16) = --v30;
            }
            goto LABEL_188;
          }
          if ((*(_WORD *)(v15 + 30) & 0x400) != 0)
          {
            if (v40 == 63 || v40 == 35)
              goto LABEL_85;
            goto LABEL_124;
          }
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
          if (v40 == 35 || v40 == 63)
            goto LABEL_85;
        }
        else
        {
          if (v39)
          {
            *(_DWORD *)(v15 + 24) = v39;
            goto LABEL_124;
          }
          if ((*(_WORD *)(v15 + 30) & 0x400) != 0)
            goto LABEL_124;
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
        }
        v38 = *(_WORD *)(v15 + 28);
        goto LABEL_124;
      }
LABEL_85:
      *(_DWORD *)(v15 + 24) += 2;
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v14);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      *a5 = 2;
      if (v15 == a3)
        goto LABEL_66;
      v16 = *(_QWORD *)(v15 + 56);
      if (v16)
        goto LABEL_110;
      v41 = v15;
      while (1)
      {
        v41 = *(_QWORD *)(v41 + 32);
        if (!v41 || v41 == a3)
          break;
        v16 = *(_QWORD *)(v41 + 56);
        if (v16)
          goto LABEL_110;
      }
LABEL_66:
      v16 = 0;
LABEL_111:
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
        v37 = 0;
      }
      else
      {
        v37 = 0;
        *(_DWORD *)(v15 + 24) -= 2;
      }
      v14 = v15;
      goto LABEL_114;
    }
    v37 = 3;
    v16 = v15;
LABEL_188:
    if (!v30)
    {
LABEL_219:
      __break(0xC471u);
      JUMPOUT(0x195B53828);
    }
    *(_DWORD *)(v28 + 16) = v30 - 1;
    if (v37 && v37 != 2)
    {
      if (v37 == 3)
        goto LABEL_201;
      goto LABEL_202;
    }
LABEL_191:
    v15 = v16;
    if (!v16)
      goto LABEL_201;
  }
  if (a6 != 2)
    goto LABEL_44;
  while (2)
  {
    v16 = v15;
    result = WebCore::Node::computeEditability(v15, 0, 1);
    if ((v13 != 0) != ((_DWORD)result != 0))
    {
      if ((*(_WORD *)(v15 + 28) & 4) != 0)
      {
        v15 = *(_QWORD *)(v15 + 80);
        if (v15)
          goto LABEL_17;
      }
      if (v16 == a3)
        goto LABEL_9;
      v15 = *(_QWORD *)(v16 + 56);
      if (v15)
      {
LABEL_17:
        *(_DWORD *)(v15 + 24) += 2;
      }
      else
      {
        v17 = v16;
        while (1)
        {
          v17 = *(_QWORD *)(v17 + 32);
          if (!v17 || v17 == a3)
            break;
          v15 = *(_QWORD *)(v17 + 56);
          if (v15)
            goto LABEL_17;
        }
LABEL_9:
        v15 = 0;
      }
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      if (!v15)
      {
        v16 = 0;
        goto LABEL_201;
      }
      continue;
    }
    break;
  }
  if (a2)
  {
    v25 = *(_WORD *)(a2 + 28);
    if ((v25 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v15 + 40) == a2 && (*(_WORD *)(v15 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v15 + 22) & 8) != 0)
        goto LABEL_44;
    }
    else if ((v25 & 4) != 0
           && *(_QWORD *)(a2 + 80)
           && ((*(unsigned __int8 *)(v15 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) == 0)
    {
      v26 = v15;
      do
        v26 = *(_QWORD *)(v26 + 32);
      while (v26 != a2 && v26 != 0);
      if (v26)
        goto LABEL_44;
    }
  }
LABEL_201:
  *a7 = v14;
  v14 = 0;
LABEL_202:
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::startOfNextParagraph@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v4;
  WebCore::Node *v5;
  WebCore::Node *result;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  int v10;
  char v11;
  char v12;
  WebCore::Node *v13[3];

  WebCore::endOfParagraph(this, 2, v13);
  WebCore::VisiblePosition::next((unsigned __int8 *)v13, 1, 0, (uint64_t)&v9);
  WebCore::isFirstPositionAfterTable(&v9, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
    WebCore::VisiblePosition::next((unsigned __int8 *)&v9, 1, 0, a2);
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
  }
  else
  {
    v7 = v9;
    v9 = 0;
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 12) = v11;
    *(_BYTE *)(a2 + 16) = v12;
  }
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

BOOL WebCore::inSameParagraph(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t (*v3)();
  _BOOL8 v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v10[3];
  WebCore::Node *v11[3];

  if (*a1)
    v3 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v3 = 0;
  if (!v3)
    return 0;
  WebCore::startOfParagraph((uint64_t)a1, a3, v11);
  WebCore::startOfParagraph(a2, a3, v10);
  v6 = WebCore::operator==((uint64_t *)v11, (uint64_t *)v10);
  v7 = v10[0];
  v10[0] = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return v6;
}

BOOL WebCore::isBlankParagraph(WebCore *this, const WebCore::VisiblePosition *a2)
{
  uint64_t (*v2)();
  void *v4;
  _BOOL4 v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  WebCore::Node *v9;
  uint64_t v10;
  _BOOL8 v11;
  WebCore::Node *v13[3];
  WebCore::Node *v14[3];
  uint64_t v15[3];

  if (*(_QWORD *)this)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::startOfParagraph((uint64_t)this, 1, v15);
  v5 = WebCore::operator==((uint64_t *)this, v15);
  v6 = v15[0];
  v15[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (!v5)
    return 0;
  WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, (uint64_t)v14);
  WebCore::startOfParagraph((uint64_t)v14, 1, v15);
  WebCore::startOfParagraph((uint64_t)this, 1, v13);
  v8 = WebCore::operator==(v15, (uint64_t *)v13);
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v7);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v7);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = !v8;
  if (v14[0])
  {
    if (*((_DWORD *)v14[0] + 6) == 2)
    {
      if ((*((_WORD *)v14[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14[0], v7);
    }
    else
    {
      *((_DWORD *)v14[0] + 6) -= 2;
    }
  }
  return v11;
}

uint64_t WebCore::previousParagraphPosition@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  WebCore::Node *v10;
  int v11;
  char v12;
  char v13;

  v5 = *a1;
  if (*a1)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(a3 + 12) = *((_BYTE *)a1 + 12);
  *(_BYTE *)(a3 + 16) = *((_BYTE *)a1 + 16);
  do
  {
    result = WebCore::previousLinePosition(a3, a2, 0, &v10);
    if (!v10)
      break;
    v8 = WebCore::operator==((uint64_t *)&v10, (uint64_t *)a3);
    result = (uint64_t)v10;
    if (!v8)
    {
      if (v10)
        *((_DWORD *)v10 + 6) += 2;
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = result;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v9);
            result = (uint64_t)v10;
          }
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      *(_DWORD *)(a3 + 8) = v11;
      *(_BYTE *)(a3 + 12) = v12;
      *(_BYTE *)(a3 + 16) = v13;
    }
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v8)
      break;
    result = WebCore::inSameParagraph(a1, a3, 1);
  }
  while ((result & 1) != 0);
  return result;
}

WebCore::Node *WebCore::nextParagraphPosition@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WebCore::Node *result;
  BOOL v8;
  uint64_t v9;
  WebCore::Node *v10;
  int v11;
  char v12;
  char v13;

  v5 = *a1;
  if (*a1)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(a3 + 12) = *((_BYTE *)a1 + 12);
  *(_BYTE *)(a3 + 16) = *((_BYTE *)a1 + 16);
  do
  {
    result = WebCore::nextLinePosition(a3, a2, 0, &v10);
    if (!v10)
      break;
    v8 = WebCore::operator==((uint64_t *)&v10, (uint64_t *)a3);
    result = v10;
    if (!v8)
    {
      if (v10)
        *((_DWORD *)v10 + 6) += 2;
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = result;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v9);
            result = v10;
          }
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      *(_DWORD *)(a3 + 8) = v11;
      *(_BYTE *)(a3 + 12) = v12;
      *(_BYTE *)(a3 + 16) = v13;
    }
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (v8)
      break;
    result = (WebCore::Node *)WebCore::inSameParagraph(a1, a3, 1);
  }
  while ((result & 1) != 0);
  return result;
}

unsigned int *WebCore::startOfBlock@<X0>(unsigned int *result@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  WebCore::Node *v9;
  char v10;
  char v11;
  int v12;
  int v13;
  WebCore::Node *v14;
  int v15;
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    return result;
  }
  v5 = *(_DWORD *)(v4 + 24) + 2;
  *(_DWORD *)(v4 + 24) = v5;
  v6 = result[3] & 7;
  if (v6 > 4 || ((1 << v6) & 0x19) == 0 && !*(_QWORD *)(v4 + 32))
    goto LABEL_25;
  v7 = 1;
  v8 = v4;
  if (((1 << v6) & 0x19) != 0)
    goto LABEL_5;
  v8 = *(_QWORD *)(v4 + 32);
  if (v8)
  {
    v5 = *(_DWORD *)(v8 + 24);
LABEL_5:
    v7 = 0;
    *(_DWORD *)(v8 + 24) = v5 + 2;
  }
  v17 = v8;
  result = (unsigned int *)WebCore::enclosingBlock(&v17, a2, &v14);
  v9 = v14;
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (v9)
  {
    v10 = *((_WORD *)v9 + 14);
    *((_DWORD *)v9 + 6) += 2;
    v14 = v9;
    v15 = 0;
    if ((v10 & 1) != 0)
      v11 = 0;
    else
      v11 = 3;
    v16 = v11;
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v14, (uint64_t)a3);
    *((_BYTE *)a3 + 16) = 1;
    v12 = *((_DWORD *)v9 + 6) - 2;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) != 0)
        goto LABEL_21;
      result = WebCore::Node::removedLastRef(v9, a2);
      v12 = *((_DWORD *)v9 + 6);
    }
    else
    {
      *((_DWORD *)v9 + 6) = v12;
    }
    v13 = v12 - 2;
    if (v13)
    {
      *((_DWORD *)v9 + 6) = v13;
      goto LABEL_26;
    }
LABEL_21:
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v9, a2);
    goto LABEL_26;
  }
LABEL_25:
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 16) = 1;
LABEL_26:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::endOfBlock@<X0>(unsigned int *result@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  WebCore::Node *v9;
  __int16 v10;
  uint64_t v11;
  char v12;
  WebCore::Node *v13;
  int v14;
  char v15;
  uint64_t v16;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    return result;
  }
  v5 = *(_DWORD *)(v4 + 24) + 2;
  *(_DWORD *)(v4 + 24) = v5;
  v6 = result[3] & 7;
  if (v6 > 4 || ((1 << v6) & 0x19) == 0 && !*(_QWORD *)(v4 + 32))
    goto LABEL_27;
  v7 = 1;
  v8 = v4;
  if (((1 << v6) & 0x19) != 0)
    goto LABEL_5;
  v8 = *(_QWORD *)(v4 + 32);
  if (v8)
  {
    v5 = *(_DWORD *)(v8 + 24);
LABEL_5:
    v7 = 0;
    *(_DWORD *)(v8 + 24) = v5 + 2;
  }
  v16 = v8;
  result = (unsigned int *)WebCore::enclosingBlock(&v16, a2, &v13);
  v9 = v13;
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (v9)
  {
    v10 = *((_WORD *)v9 + 14);
    *((_DWORD *)v9 + 6) += 2;
    if ((v10 & 1) != 0)
    {
      v11 = *((_QWORD *)v9 + 10);
      v12 = 0;
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 4);
    }
    else
    {
      LODWORD(v11) = 0;
      v12 = 4;
    }
    v13 = v9;
    v14 = v11;
    v15 = v12;
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v13, (uint64_t)a3);
    *((_BYTE *)a3 + 16) = 1;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v9, a2);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v9, a2);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    goto LABEL_28;
  }
LABEL_27:
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 16) = 1;
LABEL_28:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::inSameBlock(WebCore *this, const WebCore::VisiblePosition *a2, const WebCore::VisiblePosition *a3)
{
  uint64_t v3;
  int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  _BOOL8 v16;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::Node *v21;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v5 = *(_DWORD *)(v3 + 24) + 2;
  *(_DWORD *)(v3 + 24) = v5;
  v6 = *((_BYTE *)this + 12) & 7;
  v7 = 1;
  if (v6 > 4)
  {
    v8 = 0;
    goto LABEL_5;
  }
  v8 = v3;
  if (((1 << v6) & 0x19) == 0)
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (!v8)
      goto LABEL_5;
    v5 = *(_DWORD *)(v8 + 24);
  }
  v7 = 0;
  *(_DWORD *)(v8 + 24) = v5 + 2;
LABEL_5:
  v20 = v8;
  v9 = 1;
  WebCore::enclosingBlock(&v20, (WebCore::Node *)1, &v21);
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    && (v11 = *(_DWORD *)(v10 + 24) + 2, *(_DWORD *)(v10 + 24) = v11, v12 = *((_BYTE *)a2 + 12) & 7, v12 <= 4))
  {
    v13 = v10;
    if (((1 << v12) & 0x19) == 0)
    {
      v13 = *(_QWORD *)(v10 + 32);
      if (!v13)
        goto LABEL_9;
      v11 = *(_DWORD *)(v13 + 24);
    }
    v9 = 0;
    *(_DWORD *)(v13 + 24) = v11 + 2;
  }
  else
  {
    v13 = 0;
  }
LABEL_9:
  v18 = v13;
  WebCore::enclosingBlock(&v18, (WebCore::Node *)1, &v19);
  v15 = v21;
  v16 = v21 == v19;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v14);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v14);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v14);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v14);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v14);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v16;
}

unsigned int *WebCore::startOfDocument@<X0>(unsigned int *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  __int16 v7;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    return this;
  }
  *(_DWORD *)(v3 + 24) += 4;
  this = (unsigned int *)WebCore::startOfDocument((WebCore::Node *)v3, a2, (uint64_t)a3);
  v5 = *(_DWORD *)(v3 + 24) - 2;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v7 = *(_WORD *)(v3 + 30);
    if ((v7 & 0x400) != 0)
      goto LABEL_10;
    this = WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    v5 = *(_DWORD *)(v3 + 24);
  }
  else
  {
    *(_DWORD *)(v3 + 24) = v5;
  }
  v6 = v5 - 2;
  if (v6)
  {
    *(_DWORD *)(v3 + 24) = v6;
    return this;
  }
  v7 = *(_WORD *)(v3 + 30);
LABEL_10:
  if ((v7 & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  return this;
}

unsigned int *WebCore::endOfDocument@<X0>(unsigned int *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  __int16 v7;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    return this;
  }
  *(_DWORD *)(v3 + 24) += 4;
  this = (unsigned int *)WebCore::endOfDocument((WebCore::Node *)v3, a2, (uint64_t)a3);
  v5 = *(_DWORD *)(v3 + 24) - 2;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v7 = *(_WORD *)(v3 + 30);
    if ((v7 & 0x400) != 0)
      goto LABEL_10;
    this = WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    v5 = *(_DWORD *)(v3 + 24);
  }
  else
  {
    *(_DWORD *)(v3 + 24) = v5;
  }
  v6 = v5 - 2;
  if (v6)
  {
    *(_DWORD *)(v3 + 24) = v6;
    return this;
  }
  v7 = *(_WORD *)(v3 + 30);
LABEL_10:
  if ((v7 & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  return this;
}

uint64_t WebCore::isStartOfDocument(WebCore::Node **this, const WebCore::VisiblePosition *a2)
{
  uint64_t (*v2)();
  uint64_t v3;
  WebCore::Node *v4;
  uint64_t result;
  _QWORD v6[3];
  WebCore::Node *v7[2];

  if (*this)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (v2)
  {
    WebCore::previousVisuallyDistinctCandidate(this, (uint64_t)v7);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v7))
    {
      v3 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v7, (uint64_t)v6);
      v3 = v6[0];
    }
    v4 = v7[0];
    v7[0] = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
    }
    if (!v3)
      return 1;
    if (*(_DWORD *)(v3 + 24) != 2)
    {
      result = 0;
      *(_DWORD *)(v3 + 24) -= 2;
      return result;
    }
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  return 0;
}

BOOL WebCore::isEndOfDocument(WebCore *this, const WebCore::VisiblePosition *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  WebCore::Node *v5;

  if (*(_QWORD *)this)
    v2 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (!v2)
    return 0;
  WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, (uint64_t)&v5);
  v3 = v5 == 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v3;
}

BOOL WebCore::atBoundaryOfGranularity(WebCore *this, const WebCore::Node *a2, int a3)
{
  _BOOL8 v3;
  unsigned int v5;
  uint64_t (*v6)();
  void *v7;
  BOOL v8;
  WebCore::Node *v9;
  void *v10;
  WTF *(*v11)@<X0>(WebCore *@<X0>, uint64_t@<X8>);
  void *v12;
  _BOOL4 v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  char v17;
  WebCore::Node *v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  WebCore::Node *v22;
  int v23;
  int v24;
  WebCore::Node *v25;
  int v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v30;
  void *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  __int16 v35;
  WebCore::Node *v36;
  WebCore::Node *v37[3];
  WebCore::Node *v38;
  int v39;
  char v40;
  BOOL v41;
  WebCore::Node *v42;
  uint64_t v43;
  uint64_t v44;

  v3 = 1;
  if (!(_DWORD)a2)
    return v3;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 1;
  v5 = a3 & 0xFFFFFFFD;
  switch((int)a2)
  {
    case 1:
      if (*(_QWORD *)this)
        v6 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v6 = 0;
      if (v5)
      {
        if (!v6)
          goto LABEL_12;
        WebCore::endOfParagraph(this, 1, &v42);
        v8 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v42);
        v9 = v42;
        v42 = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9, v7);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        if (!v8)
        {
LABEL_12:
          WebCore::startOfWord((uint64_t)this, 0, (uint64_t)&v42);
          goto LABEL_56;
        }
      }
      else
      {
        if (!v6)
          goto LABEL_55;
        WebCore::startOfParagraph((uint64_t)this, 1, &v42);
        v21 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v42);
        v22 = v42;
        v42 = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v22, v7);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        if (!v21)
        {
LABEL_55:
          WebCore::endOfWord(this, 1, (uint64_t)&v42);
          goto LABEL_56;
        }
      }
      v3 = 0;
      goto LABEL_62;
    case 2:
      if (v5)
      {
        v11 = WebCore::startOfSentence;
        ((void (*)(WebCore::Node **__return_ptr, WebCore *))WebCore::startOfSentence)(&v42, this);
      }
      else
      {
        v11 = WebCore::endOfSentence;
        ((void (*)(WebCore::Node **__return_ptr, WebCore *))WebCore::endOfSentence)(&v42, this);
      }
      v13 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v42);
      v14 = v42;
      v42 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v12);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      if (v13)
      {
        v15 = *(WebCore::Node **)this;
        if (*(_QWORD *)this)
          *((_DWORD *)v15 + 6) += 2;
        v16 = v38;
        v38 = v15;
        if (v16)
        {
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v16, v12);
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
        }
        v39 = *((_DWORD *)this + 2);
        v40 = *((_BYTE *)this + 12);
        v17 = *((_BYTE *)this + 16);
        goto LABEL_60;
      }
      if (v5)
      {
        WebCore::nextBoundary((uint64_t)&v42, (uint64_t)this, (WebCore::Node *)WebCore::nextSentencePositionBoundary);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter(this, (const WebCore::VisiblePosition *)&v42, 0, (uint64_t)v37);
      }
      else
      {
        WebCore::previousBoundary((uint64_t)&v42, (uint64_t)this, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousSentencePositionBoundary, 0);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore(this, (const WebCore::VisiblePosition *)&v42, 0, (uint64_t)v37);
      }
      v30 = v42;
      v42 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v20);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      ((void (*)(WebCore::Node **__return_ptr, WebCore::Node **))v11)(&v42, v37);
      v32 = v42;
      v42 = 0;
      v33 = v38;
      v38 = v32;
      if (!v33)
        goto LABEL_75;
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v33, v31);
          v36 = v42;
          v39 = v43;
          v40 = BYTE4(v43);
          v41 = v44;
          v42 = 0;
          if (v36)
          {
            if (*((_DWORD *)v36 + 6) == 2)
            {
              if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v36, v31);
            }
            else
            {
              *((_DWORD *)v36 + 6) -= 2;
            }
          }
LABEL_76:
          v34 = v37[0];
          v37[0] = 0;
          if (!v34)
            goto LABEL_61;
          goto LABEL_77;
        }
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
LABEL_75:
      v39 = v43;
      v40 = BYTE4(v43);
      v41 = v44;
      goto LABEL_76;
    case 3:
      v18 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
        *((_DWORD *)v18 + 6) += 2;
      v38 = v18;
      v39 = *((_DWORD *)this + 2);
      v40 = *((_BYTE *)this + 12);
      v41 = v5 != 0;
      if (v5)
        WebCore::startOfLine((uint64_t)&v42, (WebCore::VisiblePosition *)&v38, (WebCore::Node *)1, 0);
      else
        WebCore::endOfLine((uint64_t *)&v42, (uint64_t)&v38, 1, 0);
LABEL_56:
      v27 = v42;
      v42 = 0;
      v25 = v38;
      v38 = v27;
      if (!v25)
        goto LABEL_59;
      v26 = *((_DWORD *)v25 + 6) - 2;
      if (*((_DWORD *)v25 + 6) != 2)
        goto LABEL_58;
      if ((*((_WORD *)v25 + 15) & 0x400) != 0)
        goto LABEL_59;
      WebCore::Node::removedLastRef(v25, v10);
      v34 = v42;
      v39 = v43;
      v40 = BYTE4(v43);
      v41 = v44;
      v42 = 0;
      if (v34)
      {
LABEL_77:
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v31);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
      goto LABEL_61;
    case 4:
      if (v5)
        WebCore::startOfParagraph((uint64_t)this, 1, &v42);
      else
        WebCore::endOfParagraph(this, 1, &v42);
      goto LABEL_51;
    case 5:
      v19 = *(_QWORD *)this;
      if (v5)
      {
        if (v19)
        {
          *(_DWORD *)(v19 + 24) += 4;
          WebCore::startOfDocument((WebCore::Node *)v19, a2, (uint64_t)&v42);
          goto LABEL_47;
        }
LABEL_105:
        v43 = 0;
        v42 = 0;
        v44 = 1;
        goto LABEL_51;
      }
      if (!v19)
        goto LABEL_105;
      *(_DWORD *)(v19 + 24) += 4;
      WebCore::endOfDocument((WebCore::Node *)v19, a2, (uint64_t)&v42);
LABEL_47:
      v23 = *(_DWORD *)(v19 + 24) - 2;
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        v35 = *(_WORD *)(v19 + 30);
        if ((v35 & 0x400) != 0)
          goto LABEL_87;
        WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
        v23 = *(_DWORD *)(v19 + 24);
      }
      else
      {
        *(_DWORD *)(v19 + 24) = v23;
      }
      v24 = v23 - 2;
      if (v24)
      {
        *(_DWORD *)(v19 + 24) = v24;
        goto LABEL_51;
      }
      v35 = *(_WORD *)(v19 + 30);
LABEL_87:
      if ((v35 & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
LABEL_51:
      v25 = v38;
      v38 = v42;
      if (v25)
      {
        v26 = *((_DWORD *)v25 + 6) - 2;
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25, a2);
        }
        else
        {
LABEL_58:
          *((_DWORD *)v25 + 6) = v26;
        }
      }
LABEL_59:
      v39 = v43;
      v40 = BYTE4(v43);
      v17 = v44;
LABEL_60:
      v41 = v17;
LABEL_61:
      v3 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v38);
LABEL_62:
      v28 = v38;
      v38 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v7);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      return v3;
    default:
      goto LABEL_61;
  }
}

BOOL WebCore::withinTextUnitOfGranularity(WebCore::VisiblePosition *this, int a2, char a3)
{
  _BOOL8 v3;
  int v5;
  void *v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  void *v11;
  BOOL v12;
  WebCore::Node *v13;
  void *v14;
  WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int v19;
  void *v20;
  WebCore::Node *v21;
  void *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  void *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  void *v28;
  const WebCore::VisiblePosition *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  void *v32;
  void *v33;
  WebCore::Node *v34;
  const WebCore::VisiblePosition *v35;
  unsigned __int8 v36;
  const WebCore::VisiblePosition *v37;
  unsigned __int8 v38;
  WebCore::Node *v40;
  WebCore::Node *v41;
  void *v43;
  WebCore::Node *v44;
  void *v45;
  WebCore::Node *v46;
  void *v47;
  WebCore::Node *v48;
  void *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  int v52;
  char v53;
  char v54;
  WebCore::Node *v55;
  int v56;
  char v57;
  char v58;
  WebCore::Node *v59;
  int v60;
  char v61;
  char v62;

  v3 = 1;
  if (a2 && a2 != 5)
  {
    v59 = 0;
    v5 = a3 & 0xFD;
    v3 = v5 == 0;
    v60 = 0;
    v61 = 0;
    v62 = 1;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 1;
    switch(a2)
    {
      case 1:
        WebCore::startOfWord((uint64_t)this, v5 != 0, (uint64_t)&v51);
        v7 = v59;
        v59 = v51;
        if (v7)
        {
          if (*((_DWORD *)v7 + 6) == 2)
          {
            if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v7, v6);
          }
          else
          {
            *((_DWORD *)v7 + 6) -= 2;
          }
        }
        v60 = v52;
        v61 = v53;
        v62 = v54;
        WebCore::endOfWord(this, v5 != 0, (uint64_t)&v51);
        v9 = v51;
        v51 = 0;
        v10 = v55;
        v55 = v9;
        if (!v10)
          goto LABEL_10;
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v10, v8);
            v44 = v51;
            v56 = v52;
            v57 = v53;
            v58 = v54;
            v51 = 0;
            if (v44)
            {
              if (*((_DWORD *)v44 + 6) == 2)
              {
                if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v44, v43);
              }
              else
              {
                *((_DWORD *)v44 + 6) -= 2;
              }
            }
LABEL_11:
            WebCore::endOfWord((WebCore *)&v59, 0, (uint64_t)&v51);
            v12 = WebCore::operator==((uint64_t *)&v51, (uint64_t *)&v55);
            v13 = v51;
            v51 = 0;
            if (v13)
            {
              if (*((_DWORD *)v13 + 6) == 2)
              {
                if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v13, v11);
              }
              else
              {
                *((_DWORD *)v13 + 6) -= 2;
              }
            }
            if (v12)
              goto LABEL_48;
            goto LABEL_49;
          }
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
LABEL_10:
        v56 = v52;
        v57 = v53;
        v58 = v54;
        goto LABEL_11;
      case 2:
        WebCore::previousBoundary((uint64_t)&v51, (uint64_t)this, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
        v15 = v59;
        v59 = v51;
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v15, v14);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
        }
        v60 = v52;
        v61 = v53;
        v62 = v54;
        WebCore::nextBoundary((uint64_t)&v51, (uint64_t)this, (WebCore::Node *)WebCore::endSentenceBoundary);
        v17 = v51;
        v51 = 0;
        v18 = v55;
        v55 = v17;
        if (!v18)
          goto LABEL_47;
        v19 = *((_DWORD *)v18 + 6) - 2;
        if (*((_DWORD *)v18 + 6) != 2)
          goto LABEL_46;
        if ((*((_WORD *)v18 + 15) & 0x400) != 0)
          goto LABEL_47;
        WebCore::Node::removedLastRef(v18, v16);
        v21 = v51;
        v56 = v52;
        v57 = v53;
        v58 = v54;
        v51 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21, v20);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
        goto LABEL_48;
      case 3:
        WebCore::startOfLine((uint64_t)&v51, this, (WebCore::Node *)1, 0);
        v23 = v51;
        v51 = 0;
        v24 = v59;
        v59 = v23;
        if (!v24)
          goto LABEL_28;
        if (*((_DWORD *)v24 + 6) != 2)
        {
          *((_DWORD *)v24 + 6) -= 2;
LABEL_28:
          v60 = v52;
          v61 = v53;
          v62 = v54;
          goto LABEL_29;
        }
        if ((*((_WORD *)v24 + 15) & 0x400) != 0)
          goto LABEL_28;
        WebCore::Node::removedLastRef(v24, v22);
        v46 = v51;
        v60 = v52;
        v61 = v53;
        v62 = v54;
        v51 = 0;
        if (v46)
        {
          if (*((_DWORD *)v46 + 6) == 2)
          {
            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v46, v45);
          }
          else
          {
            *((_DWORD *)v46 + 6) -= 2;
          }
        }
LABEL_29:
        WebCore::endOfLine((uint64_t *)&v51, (uint64_t)this, 1, 0);
        v26 = v51;
        v51 = 0;
        v27 = v55;
        v55 = v26;
        if (!v27)
          goto LABEL_32;
        if (*((_DWORD *)v27 + 6) != 2)
        {
          *((_DWORD *)v27 + 6) -= 2;
LABEL_32:
          v56 = v52;
          v57 = v53;
          v58 = v54;
          goto LABEL_33;
        }
        if ((*((_WORD *)v27 + 15) & 0x400) != 0)
          goto LABEL_32;
        WebCore::Node::removedLastRef(v27, v25);
        v48 = v51;
        v56 = v52;
        v57 = v53;
        v58 = v54;
        v51 = 0;
        if (v48)
        {
          if (*((_DWORD *)v48 + 6) == 2)
          {
            if ((*((_WORD *)v48 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v48, v47);
          }
          else
          {
            *((_DWORD *)v48 + 6) -= 2;
          }
        }
LABEL_33:
        if (!WebCore::operator==((uint64_t *)&v59, (uint64_t *)&v55))
          goto LABEL_48;
        WebCore::nextLinePosition((uint64_t)&v55, 0, 0, &v51);
        v30 = v51;
        v51 = 0;
        v31 = v55;
        v55 = v30;
        if (!v31)
          goto LABEL_37;
        if (*((_DWORD *)v31 + 6) != 2)
        {
          *((_DWORD *)v31 + 6) -= 2;
LABEL_37:
          v56 = v52;
          v57 = v53;
          goto LABEL_38;
        }
        if ((*((_WORD *)v31 + 15) & 0x400) != 0)
          goto LABEL_37;
        WebCore::Node::removedLastRef(v31, v28);
        v50 = v51;
        v56 = v52;
        v57 = v53;
        v58 = v54;
        v51 = 0;
        if (v50)
        {
          if (*((_DWORD *)v50 + 6) == 2)
          {
            if ((*((_WORD *)v50 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v50, v49);
          }
          else
          {
            *((_DWORD *)v50 + 6) -= 2;
          }
        }
LABEL_38:
        v58 = 0;
        if (!WebCore::inSameLine((WebCore *)&v59, (const WebCore::VisiblePosition *)&v55, v29))
        {
          WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, (uint64_t)&v51);
LABEL_44:
          v18 = v55;
          v55 = v51;
          if (v18)
          {
            v19 = *((_DWORD *)v18 + 6) - 2;
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v32);
            }
            else
            {
LABEL_46:
              *((_DWORD *)v18 + 6) = v19;
            }
          }
LABEL_47:
          v56 = v52;
          v57 = v53;
          v58 = v54;
        }
LABEL_48:
        if (WebCore::operator==((uint64_t *)&v59, (uint64_t *)&v55))
        {
LABEL_49:
          v3 = 0;
        }
        else if (!WebCore::operator==((uint64_t *)this, (uint64_t *)&v59))
        {
          if (WebCore::operator==((uint64_t *)this, (uint64_t *)&v55))
          {
            v3 = v5 != 0;
          }
          else
          {
            v36 = WebCore::documentOrder(&v59, (WebCore::Node **)this, v35);
            v3 = 0;
            if (v36 != 129 && (char)v36 < 0)
            {
              v38 = WebCore::documentOrder((WebCore::Node **)this, &v55, v37);
              v3 = v38 != 129 && (v38 & 0x80u) != 0;
            }
          }
        }
        v40 = v55;
        v55 = 0;
        if (v40)
        {
          if (*((_DWORD *)v40 + 6) == 2)
          {
            if ((*((_WORD *)v40 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v40, v11);
          }
          else
          {
            *((_DWORD *)v40 + 6) -= 2;
          }
        }
        v41 = v59;
        v59 = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 6) == 2)
          {
            if ((*((_WORD *)v41 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v41, v11);
          }
          else
          {
            *((_DWORD *)v41 + 6) -= 2;
          }
        }
        break;
      case 4:
        WebCore::startOfParagraph((uint64_t)this, 1, &v51);
        v34 = v59;
        v59 = v51;
        if (v34)
        {
          if (*((_DWORD *)v34 + 6) == 2)
          {
            if ((*((_WORD *)v34 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v34, v33);
          }
          else
          {
            *((_DWORD *)v34 + 6) -= 2;
          }
        }
        v60 = v52;
        v61 = v53;
        v62 = v54;
        WebCore::endOfParagraph(this, 1, &v51);
        goto LABEL_44;
      default:
        goto LABEL_48;
    }
  }
  return v3;
}

WebCore::Node *WebCore::positionOfNextBoundaryOfGranularity@<X0>(WebCore::Node *this@<X0>, const WebCore::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void *v7;
  unsigned int v8;
  _BOOL4 v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  char v14;
  WebCore::Node *v15;
  char v16;
  void *v17;
  const WebCore::VisiblePosition *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  int v22;
  const WebCore::VisiblePosition *v23;
  const WebCore::VisiblePosition *v24;
  void *v25;
  const WebCore::VisiblePosition *v26;
  const WebCore::VisiblePosition *v27;
  unsigned __int8 v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  BOOL v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  const WebCore::VisiblePosition *v35;
  int v36;
  void *v37;
  WebCore::Node *v38;
  void *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  uint64_t (*v42)();
  _DWORD *v43;
  void *v44;
  _BOOL4 v45;
  WebCore::Node *v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  char v51;
  int v52;
  unsigned int v53;
  int v54;
  WebCore::Node *v55;
  void *v56;
  WebCore::Node *v57;
  void *v58;
  _BOOL4 v59;
  WebCore::Node *v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  const WebCore::VisiblePosition *v67;
  unsigned __int8 v68;
  BOOL v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  char i;
  void *v74;
  WebCore::Node *v75;
  void *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  WebCore::Node *v79;
  const WebCore::VisiblePosition *v80;
  _BOOL4 v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  WebCore::Node *v85;
  WebCore::Node *v86;
  const WebCore::VisiblePosition *v87;
  BOOL v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  char j;
  void *v93;
  WebCore::Node *v94;
  void *v95;
  WebCore::Node *v96;
  WebCore::Node *v97;
  WebCore::Node *v98;
  const WebCore::VisiblePosition *v99;
  unsigned __int8 v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  BOOL v103;
  int v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  WebCore::Node *v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  char v112;
  WebCore::Node *v113;
  __int16 v114;
  WebCore::Node *v115[3];
  WebCore::Node *v116;
  int v117;
  char v118;
  char v119;
  WebCore::Node *v120;
  int v121;
  char v122;
  char v123;
  WebCore::Node *v124;
  int v125;
  char v126;
  char v127;
  WebCore::Node *v128;
  int v129;
  char v130;
  char v131;

  v6 = (uint64_t)this;
  switch((int)a2)
  {
    case 0:
      if ((a3 & 0xFFFFFFFD) != 0)
      {
        WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)this, (uint64_t)&v124);
        if (WebCore::Position::atStartOfTree((WebCore::Position *)&v124))
        {
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
        }
        else
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v124, (uint64_t)&v128);
          *(_QWORD *)a4 = v128;
          *(_DWORD *)(a4 + 8) = v129;
          *(_BYTE *)(a4 + 12) = v130;
        }
        goto LABEL_297;
      }
      return WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, a4);
    case 1:
      v8 = a3 & 0xFFFFFFFD;
      v9 = WebCore::withinTextUnitOfGranularity(this, 1, a3);
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v127 = 1;
      if (v8)
      {
        if (v9)
        {
          v10 = *(WebCore::Node **)v6;
          if (*(_QWORD *)v6)
            *((_DWORD *)v10 + 6) += 2;
          v128 = v10;
          v129 = *(_DWORD *)(v6 + 8);
          v130 = *(_BYTE *)(v6 + 12);
          v131 = *(_BYTE *)(v6 + 16);
          WebCore::previousBoundary((uint64_t)&v120, (uint64_t)&v128, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startWordBoundary, 0);
          v12 = v128;
          v128 = 0;
          if (v12)
          {
            if (*((_DWORD *)v12 + 6) == 2)
            {
              if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v12, v11);
            }
            else
            {
              *((_DWORD *)v12 + 6) -= 2;
            }
          }
          v13 = v124;
          v124 = v120;
          if (v13)
          {
            if (*((_DWORD *)v13 + 6) == 2)
            {
              if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v13, v11);
            }
            else
            {
              *((_DWORD *)v13 + 6) -= 2;
            }
          }
          v125 = v121;
          v126 = v122;
          v14 = v123;
          goto LABEL_120;
        }
        WebCore::endOfWord((WebCore *)v6, 1, (uint64_t)&v120);
        v68 = WebCore::documentOrder(&v120, (WebCore::Node **)v6, v67);
        if (v68 == 129 || ((char)v68 & 0x80000000) == 0)
          goto LABEL_150;
        WebCore::startOfWord((uint64_t)&v120, 0, (uint64_t)&v128);
        v69 = WebCore::operator==((uint64_t *)&v120, (uint64_t *)&v128);
        v70 = v128;
        v128 = 0;
        if (v70)
        {
          if (*((_DWORD *)v70 + 6) == 2)
          {
            if ((*((_WORD *)v70 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v70, v7);
          }
          else
          {
            *((_DWORD *)v70 + 6) -= 2;
          }
        }
        if (v69)
        {
LABEL_150:
          v71 = *(WebCore::Node **)v6;
          if (*(_QWORD *)v6)
            *((_DWORD *)v71 + 6) += 2;
          v72 = v120;
          v120 = v71;
          if (v72)
          {
            if (*((_DWORD *)v72 + 6) == 2)
            {
              if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v72, v7);
            }
            else
            {
              *((_DWORD *)v72 + 6) -= 2;
            }
          }
          v121 = *(_DWORD *)(v6 + 8);
          v122 = *(_BYTE *)(v6 + 12);
          for (i = *(_BYTE *)(v6 + 16); ; i = v127)
          {
            v123 = i;
            WebCore::previousBoundary((uint64_t)&v128, (uint64_t)&v120, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
            WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v120, (const WebCore::VisiblePosition *)&v128, 0, (uint64_t)v115);
            v75 = v128;
            v128 = 0;
            if (v75)
            {
              if (*((_DWORD *)v75 + 6) == 2)
              {
                if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v75, v74);
              }
              else
              {
                *((_DWORD *)v75 + 6) -= 2;
              }
            }
            WebCore::endOfWord((WebCore *)v115, 0, (uint64_t)&v116);
            v77 = v116;
            v116 = 0;
            v78 = v124;
            v124 = v77;
            if (v78)
            {
              if (*((_DWORD *)v78 + 6) == 2)
              {
                if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v78, v76);
                  v85 = v116;
                  v125 = v117;
                  v126 = v118;
                  v127 = v119;
                  v116 = 0;
                  if (v85)
                  {
                    if (*((_DWORD *)v85 + 6) == 2)
                    {
                      if ((*((_WORD *)v85 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v85, v76);
                    }
                    else
                    {
                      *((_DWORD *)v85 + 6) -= 2;
                    }
                  }
                  goto LABEL_163;
                }
              }
              else
              {
                *((_DWORD *)v78 + 6) -= 2;
              }
            }
            v125 = v117;
            v126 = v118;
            v127 = v119;
            v116 = 0;
LABEL_163:
            v79 = v115[0];
            v115[0] = 0;
            if (v79)
            {
              if (*((_DWORD *)v79 + 6) == 2)
              {
                if ((*((_WORD *)v79 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v79, v76);
              }
              else
              {
                *((_DWORD *)v79 + 6) -= 2;
              }
            }
            if (WebCore::operator==((uint64_t *)&v124, (uint64_t *)&v120))
              goto LABEL_292;
            if (!v124 || (char)WebCore::documentOrder(&v124, &v120, v80) >= 1)
              goto LABEL_283;
            WebCore::startOfWord((uint64_t)&v124, 0, (uint64_t)&v128);
            v81 = WebCore::operator==((uint64_t *)&v124, (uint64_t *)&v128);
            v82 = v128;
            v128 = 0;
            if (v82)
            {
              if (*((_DWORD *)v82 + 6) == 2)
              {
                if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v82, v7);
              }
              else
              {
                *((_DWORD *)v82 + 6) -= 2;
              }
            }
            if (!v81)
              goto LABEL_292;
            v83 = v124;
            if (v124)
              *((_DWORD *)v124 + 6) += 2;
            v84 = v120;
            v120 = v83;
            if (v84)
            {
              if (*((_DWORD *)v84 + 6) == 2)
              {
                if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v84, v7);
              }
              else
              {
                *((_DWORD *)v84 + 6) -= 2;
              }
            }
            v121 = v125;
            v122 = v126;
          }
        }
        goto LABEL_286;
      }
      if (v9)
      {
        WebCore::endOfWord((WebCore *)v6, 0, (uint64_t)&v128);
        v57 = v128;
        v128 = 0;
        v124 = v57;
        v125 = v129;
        v126 = v130;
        v14 = v131;
LABEL_120:
        v127 = v14;
        goto LABEL_295;
      }
      WebCore::startOfWord(v6, 0, (uint64_t)&v120);
      if ((char)WebCore::documentOrder(&v120, (WebCore::Node **)v6, v87) >= 1)
      {
        WebCore::endOfWord((WebCore *)&v120, 0, (uint64_t)&v128);
        v88 = WebCore::operator==((uint64_t *)&v120, (uint64_t *)&v128);
        v89 = v128;
        v128 = 0;
        if (v89)
        {
          if (*((_DWORD *)v89 + 6) == 2)
          {
            if ((*((_WORD *)v89 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v89, v7);
          }
          else
          {
            *((_DWORD *)v89 + 6) -= 2;
          }
        }
        if (!v88)
        {
LABEL_286:
          v109 = v120;
          if (v120)
            *((_DWORD *)v120 + 6) += 2;
          v110 = v124;
          v124 = v109;
          if (v110)
          {
            if (*((_DWORD *)v110 + 6) == 2)
            {
              if ((*((_WORD *)v110 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v110, v7);
            }
            else
            {
              *((_DWORD *)v110 + 6) -= 2;
            }
          }
          v125 = v121;
          v126 = v122;
          v127 = v123;
LABEL_292:
          v111 = v120;
          v120 = 0;
          if (v111)
          {
            if (*((_DWORD *)v111 + 6) == 2)
            {
              if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v111, v7);
            }
            else
            {
              *((_DWORD *)v111 + 6) -= 2;
            }
          }
LABEL_295:
          if (WebCore::operator==((uint64_t *)&v124, (uint64_t *)v6))
            goto LABEL_296;
          v113 = v124;
          v124 = 0;
          *(_QWORD *)a4 = v113;
          *(_DWORD *)(a4 + 8) = v125;
          *(_BYTE *)(a4 + 12) = v126;
          v112 = v127;
          goto LABEL_299;
        }
      }
      v90 = *(WebCore::Node **)v6;
      if (*(_QWORD *)v6)
        *((_DWORD *)v90 + 6) += 2;
      v91 = v120;
      v120 = v90;
      if (v91)
      {
        if (*((_DWORD *)v91 + 6) == 2)
        {
          if ((*((_WORD *)v91 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v91, v7);
        }
        else
        {
          *((_DWORD *)v91 + 6) -= 2;
        }
      }
      v121 = *(_DWORD *)(v6 + 8);
      v122 = *(_BYTE *)(v6 + 12);
      for (j = *(_BYTE *)(v6 + 16); ; j = v127)
      {
        v123 = j;
        WebCore::nextBoundary((uint64_t)&v128, (uint64_t)&v120, (WebCore::Node *)WebCore::nextWordPositionBoundary);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)&v120, (const WebCore::VisiblePosition *)&v128, 0, (uint64_t)v115);
        v94 = v128;
        v128 = 0;
        if (v94)
        {
          if (*((_DWORD *)v94 + 6) == 2)
          {
            if ((*((_WORD *)v94 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v94, v93);
          }
          else
          {
            *((_DWORD *)v94 + 6) -= 2;
          }
        }
        WebCore::startOfWord((uint64_t)v115, 0, (uint64_t)&v116);
        v96 = v116;
        v116 = 0;
        v97 = v124;
        v124 = v96;
        if (v97)
        {
          if (*((_DWORD *)v97 + 6) == 2)
          {
            if ((*((_WORD *)v97 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v97, v95);
          }
          else
          {
            *((_DWORD *)v97 + 6) -= 2;
          }
        }
        v125 = v117;
        v126 = v118;
        v127 = v119;
        v98 = v115[0];
        v115[0] = 0;
        if (v98)
        {
          if (*((_DWORD *)v98 + 6) == 2)
          {
            if ((*((_WORD *)v98 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v98, v95);
          }
          else
          {
            *((_DWORD *)v98 + 6) -= 2;
          }
        }
        if (WebCore::operator==((uint64_t *)&v124, (uint64_t *)&v120))
          goto LABEL_292;
        if (!v124 || (v100 = WebCore::documentOrder(&v124, &v120, v99), v100 != 129) && (char)v100 < 0)
        {
LABEL_283:
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          *(_BYTE *)(a4 + 16) = 1;
          v108 = v120;
          v120 = 0;
          if (v108)
          {
            if (*((_DWORD *)v108 + 6) == 2)
            {
              if ((*((_WORD *)v108 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v108, v7);
            }
            else
            {
              *((_DWORD *)v108 + 6) -= 2;
            }
          }
          goto LABEL_300;
        }
        WebCore::endOfWord((WebCore *)&v124, 0, (uint64_t)&v128);
        if (!WebCore::operator==((uint64_t *)&v124, (uint64_t *)&v128))
        {
          v103 = 1;
          goto LABEL_253;
        }
        v101 = v124;
        if (v124)
          *((_DWORD *)v124 + 6) += 2;
        v102 = v120;
        if (v120)
          *((_DWORD *)v120 + 6) += 2;
        if (v101 == v102)
        {
          if (v101)
            *((_DWORD *)v101 + 6) += 2;
          if ((v126 & 7) == 2)
          {
            if (v102)
            {
              v104 = *((_DWORD *)v101 + 6);
              *((_DWORD *)v101 + 6) = v104 + 2;
              v103 = (v122 & 7) == 1;
              if (v104)
              {
                *((_DWORD *)v101 + 6) = v104;
              }
              else if ((*((_WORD *)v101 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v101, v7);
              }
              v102 = v101;
LABEL_245:
              if (*((_DWORD *)v101 + 6) == 2)
              {
                if ((*((_WORD *)v101 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v101, v7);
              }
              else
              {
                *((_DWORD *)v101 + 6) -= 2;
              }
              goto LABEL_247;
            }
            v103 = (v122 & 7) == 1;
            if (v101)
              goto LABEL_245;
          }
          else
          {
            v103 = 0;
            v102 = v101;
            if (v101)
              goto LABEL_245;
          }
        }
        else
        {
          v103 = 0;
        }
LABEL_247:
        if (v102)
        {
          if (*((_DWORD *)v102 + 6) == 2)
          {
            if ((*((_WORD *)v102 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v102, v7);
          }
          else
          {
            *((_DWORD *)v102 + 6) -= 2;
          }
        }
        if (v101)
        {
          if (*((_DWORD *)v101 + 6) == 2)
          {
            if ((*((_WORD *)v101 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v101, v7);
          }
          else
          {
            *((_DWORD *)v101 + 6) -= 2;
          }
        }
LABEL_253:
        v105 = v128;
        v128 = 0;
        if (v105)
        {
          if (*((_DWORD *)v105 + 6) == 2)
          {
            if ((*((_WORD *)v105 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v105, v7);
          }
          else
          {
            *((_DWORD *)v105 + 6) -= 2;
          }
        }
        if (v103)
          goto LABEL_292;
        v106 = v124;
        if (v124)
          *((_DWORD *)v124 + 6) += 2;
        v107 = v120;
        v120 = v106;
        if (v107)
        {
          if (*((_DWORD *)v107 + 6) == 2)
          {
            if ((*((_WORD *)v107 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v107, v7);
          }
          else
          {
            *((_DWORD *)v107 + 6) -= 2;
          }
        }
        v121 = v125;
        v122 = v126;
      }
    case 2:
      v15 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
        *((_DWORD *)v15 + 6) += 2;
      v16 = a3 & 0xFD;
      v124 = v15;
      v125 = *((_DWORD *)this + 2);
      v126 = *((_BYTE *)this + 12);
      v127 = *((_BYTE *)this + 16);
      while (2)
      {
        if (WebCore::withinTextUnitOfGranularity((WebCore::VisiblePosition *)&v124, 2, a3))
        {
          if (v16)
            WebCore::previousBoundary((uint64_t)&v128, (uint64_t)&v124, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
          else
            WebCore::nextBoundary((uint64_t)&v128, (uint64_t)&v124, (WebCore::Node *)WebCore::endSentenceBoundary);
          v19 = v128;
          v128 = 0;
          v20 = v124;
          v124 = v19;
          if (!v20)
            goto LABEL_28;
          if (*((_DWORD *)v20 + 6) != 2)
          {
            *((_DWORD *)v20 + 6) -= 2;
LABEL_28:
            v125 = v129;
            v126 = v130;
            v127 = v131;
            goto LABEL_61;
          }
          if ((*((_WORD *)v20 + 15) & 0x400) != 0)
            goto LABEL_28;
          WebCore::Node::removedLastRef(v20, v17);
          v38 = v128;
          v125 = v129;
          v126 = v130;
          v127 = v131;
          v128 = 0;
          if (v38)
          {
            if (*((_DWORD *)v38 + 6) == 2)
            {
              if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v38, v37);
            }
            else
            {
              *((_DWORD *)v38 + 6) -= 2;
            }
          }
LABEL_61:
          if (!WebCore::areVisiblePositionsInSameTreeScope(v124, *(const WebCore::VisiblePosition **)v6, v18))
            goto LABEL_140;
          v36 = (char)WebCore::documentOrder(&v124, (WebCore::Node **)v6, v35);
          if (v16)
          {
            if (v36 <= 0)
              goto LABEL_140;
            continue;
          }
          if (v36 == -127 || (v36 & 0x80000000) == 0)
            goto LABEL_140;
          continue;
        }
        break;
      }
      if (v16)
      {
        WebCore::previousBoundary((uint64_t)&v128, (uint64_t)&v124, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousSentencePositionBoundary, 0);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v124, (const WebCore::VisiblePosition *)&v128, 0, (uint64_t)&v120);
      }
      else
      {
        WebCore::nextBoundary((uint64_t)&v128, (uint64_t)&v124, (WebCore::Node *)WebCore::nextSentencePositionBoundary);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)&v124, (const WebCore::VisiblePosition *)&v128, 0, (uint64_t)&v120);
      }
      v21 = v128;
      v128 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v7);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      if (!v120 || WebCore::operator==((uint64_t *)&v120, (uint64_t *)&v124))
      {
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = 0;
        v22 = 1;
        *(_BYTE *)(a4 + 16) = 1;
        goto LABEL_57;
      }
      if (v16)
      {
        WebCore::nextBoundary((uint64_t)&v128, (uint64_t)&v120, (WebCore::Node *)WebCore::endSentenceBoundary);
        if (!WebCore::areVisiblePositionsInSameTreeScope(v128, v124, v23)
          || (char)WebCore::documentOrder(&v128, &v124, v24) <= 0)
        {
          goto LABEL_48;
        }
        WebCore::previousBoundary((uint64_t)&v116, (uint64_t)&v120, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
      }
      else
      {
        WebCore::previousBoundary((uint64_t)&v128, (uint64_t)&v120, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
        if (!WebCore::areVisiblePositionsInSameTreeScope(v128, v124, v26))
          goto LABEL_48;
        v28 = WebCore::documentOrder(&v128, &v124, v27);
        if (v28 == 129 || ((char)v28 & 0x80000000) == 0)
          goto LABEL_48;
        WebCore::nextBoundary((uint64_t)&v116, (uint64_t)&v120, (WebCore::Node *)WebCore::endSentenceBoundary);
      }
      v29 = v116;
      v116 = 0;
      v30 = v128;
      v128 = v29;
      if (!v30)
      {
LABEL_47:
        v129 = v117;
        v130 = v118;
        v131 = v119;
        goto LABEL_48;
      }
      if (*((_DWORD *)v30 + 6) != 2)
      {
        *((_DWORD *)v30 + 6) -= 2;
        goto LABEL_47;
      }
      if ((*((_WORD *)v30 + 15) & 0x400) != 0)
        goto LABEL_47;
      WebCore::Node::removedLastRef(v30, v25);
      v40 = v116;
      v129 = v117;
      v130 = v118;
      v131 = v119;
      v116 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40, v39);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
LABEL_48:
      v31 = WebCore::operator==((uint64_t *)&v128, (uint64_t *)&v124);
      v32 = v128;
      if (v31)
      {
        v22 = 2;
        goto LABEL_54;
      }
      v128 = 0;
      v33 = v124;
      v124 = v32;
      if (!v33)
        goto LABEL_88;
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) != 0)
        {
LABEL_88:
          v32 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v33, v7);
          v32 = v128;
        }
      }
      else
      {
        v32 = 0;
        *((_DWORD *)v33 + 6) -= 2;
      }
      v22 = 0;
      v125 = v129;
      v126 = v130;
      v127 = v131;
LABEL_54:
      v128 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 6) == 2)
        {
          if ((*((_WORD *)v32 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v32, v7);
        }
        else
        {
          *((_DWORD *)v32 + 6) -= 2;
        }
      }
LABEL_57:
      v34 = v120;
      v120 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v7);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
      if (!v22)
        goto LABEL_61;
      if (v22 != 2)
        goto LABEL_300;
LABEL_140:
      this = (WebCore::Node *)WebCore::operator==((uint64_t *)&v124, (uint64_t *)v6);
      if ((_DWORD)this)
      {
LABEL_296:
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = 0;
LABEL_297:
        v112 = 1;
LABEL_299:
        *(_BYTE *)(a4 + 16) = v112;
LABEL_300:
        this = v124;
        v124 = 0;
        if (this)
        {
LABEL_301:
          if (*((_DWORD *)this + 6) == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              return (WebCore::Node *)WebCore::Node::removedLastRef(this, v7);
          }
          else
          {
            *((_DWORD *)this + 6) -= 2;
          }
        }
        return this;
      }
      *(_QWORD *)a4 = v124;
      *(_DWORD *)(a4 + 8) = v125;
      *(_BYTE *)(a4 + 12) = v126;
      v66 = v127;
LABEL_142:
      *(_BYTE *)(a4 + 16) = v66;
      return this;
    case 3:
      v41 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
      {
        *((_DWORD *)v41 + 6) += 2;
        v42 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      }
      else
      {
        v42 = 0;
      }
      *(_QWORD *)a4 = v41;
      *(_DWORD *)(a4 + 8) = *((_DWORD *)this + 2);
      v43 = (_DWORD *)(a4 + 8);
      *(_BYTE *)(a4 + 12) = *((_BYTE *)this + 12);
      *(_BYTE *)(a4 + 16) = *((_BYTE *)this + 16);
      if ((a3 & 0xFD) != 0)
      {
        *(_BYTE *)(a4 + 16) = 0;
        if (v42)
        {
          WebCore::startOfLine((uint64_t)&v128, (WebCore::VisiblePosition *)a4, (WebCore::Node *)1, 0);
          v45 = WebCore::operator==((uint64_t *)a4, (uint64_t *)&v128);
          v46 = v128;
          v128 = 0;
          if (v46)
          {
            if (*((_DWORD *)v46 + 6) == 2)
            {
              if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v46, v44);
            }
            else
            {
              *((_DWORD *)v46 + 6) -= 2;
            }
          }
          if (v45)
          {
            v47 = WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation((WebCore::VisiblePosition *)a4);
            v48 = v47 << 6;
            if (v47 < -33554432)
              v48 = 0x80000000;
            if (v47 <= 0x1FFFFFF)
              v49 = v48;
            else
              v49 = 0x7FFFFFFF;
            WebCore::previousLinePosition(a4, v49, 0, &v124);
            v50 = 1;
            WebCore::endOfLine((uint64_t *)&v128, (uint64_t)&v124, 1, 0);
            goto LABEL_195;
          }
        }
        WebCore::startOfLine((uint64_t)&v128, (WebCore::VisiblePosition *)a4, (WebCore::Node *)1, 0);
      }
      else
      {
        *(_BYTE *)(a4 + 16) = 1;
        if (v42)
        {
          WebCore::endOfLine((uint64_t *)&v128, a4, 1, 0);
          v59 = WebCore::operator==((uint64_t *)a4, (uint64_t *)&v128);
          v60 = v128;
          v128 = 0;
          if (v60)
          {
            if (*((_DWORD *)v60 + 6) == 2)
            {
              if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v60, v58);
            }
            else
            {
              *((_DWORD *)v60 + 6) -= 2;
            }
          }
          if (v59)
          {
            v61 = WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation((WebCore::VisiblePosition *)a4);
            v62 = v61 << 6;
            if (v61 < -33554432)
              v62 = 0x80000000;
            if (v61 <= 0x1FFFFFF)
              v63 = v62;
            else
              v63 = 0x7FFFFFFF;
            WebCore::nextLinePosition(a4, v63, 0, &v124);
            v50 = 1;
            WebCore::startOfLine((uint64_t)&v128, (WebCore::VisiblePosition *)&v124, (WebCore::Node *)1, 0);
LABEL_195:
            v86 = v128;
            v128 = 0;
            this = *(WebCore::Node **)a4;
            *(_QWORD *)a4 = v86;
            if (this)
            {
              if (*((_DWORD *)this + 6) == 2)
              {
                if ((*((_WORD *)this + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(this, v7);
                  this = v128;
                  *v43 = v129;
                  *(_BYTE *)(a4 + 12) = v130;
                  *(_BYTE *)(a4 + 16) = v131;
                  v128 = 0;
                  if (this)
                  {
                    if (*((_DWORD *)this + 6) == 2)
                    {
                      if ((*((_WORD *)this + 15) & 0x400) == 0)
                        this = (WebCore::Node *)WebCore::Node::removedLastRef(this, v7);
                    }
                    else
                    {
                      *((_DWORD *)this + 6) -= 2;
                    }
                  }
LABEL_199:
                  if (!v50)
                    return this;
                  goto LABEL_300;
                }
              }
              else
              {
                *((_DWORD *)this + 6) -= 2;
              }
            }
            *v43 = v129;
            *(_BYTE *)(a4 + 12) = v130;
            *(_BYTE *)(a4 + 16) = v131;
            v128 = 0;
            goto LABEL_199;
          }
        }
        WebCore::endOfLine((uint64_t *)&v128, a4, 1, 0);
      }
      v50 = 0;
      goto LABEL_195;
    case 4:
      v51 = a3 & 0xFD;
      v52 = WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation(this);
      if (!WebCore::atBoundaryOfGranularity((WebCore *)v6, (const WebCore::Node *)4, a3))
      {
        if (v51)
          return WebCore::startOfParagraph(v6, 1, (_QWORD *)a4);
        else
          return WebCore::endOfParagraph((WebCore::Node *)v6, 1, (_QWORD *)a4);
      }
      v53 = v52 << 6;
      if (v52 < -33554432)
        v53 = 0x80000000;
      if (v52 <= 0x1FFFFFF)
        v54 = v53;
      else
        v54 = 0x7FFFFFFF;
      if (v51)
      {
        WebCore::previousParagraphPosition((uint64_t *)v6, v54, (uint64_t)&v128);
        WebCore::endOfParagraph((WebCore::Node *)&v128, 1, (_QWORD *)a4);
      }
      else
      {
        WebCore::nextParagraphPosition((uint64_t *)v6, v54, (uint64_t)&v128);
        WebCore::startOfParagraph((uint64_t)&v128, 1, (_QWORD *)a4);
      }
      this = v128;
      v128 = 0;
      if (!this)
        return this;
      goto LABEL_301;
    case 5:
      v55 = *(WebCore::Node **)this;
      if ((a3 & 0xFFFFFFFD) != 0)
      {
        if (v55)
        {
          *((_DWORD *)v55 + 6) += 4;
          this = WebCore::startOfDocument(v55, a2, a4);
          goto LABEL_134;
        }
      }
      else if (v55)
      {
        *((_DWORD *)v55 + 6) += 4;
        this = WebCore::endOfDocument(v55, a2, a4);
LABEL_134:
        v64 = *((_DWORD *)v55 + 6) - 2;
        if (*((_DWORD *)v55 + 6) == 2)
        {
          v114 = *((_WORD *)v55 + 15);
          if ((v114 & 0x400) != 0)
          {
LABEL_313:
            if ((v114 & 0x400) == 0)
              return (WebCore::Node *)WebCore::Node::removedLastRef(v55, v56);
            return this;
          }
          this = (WebCore::Node *)WebCore::Node::removedLastRef(v55, v56);
          v64 = *((_DWORD *)v55 + 6);
        }
        else
        {
          *((_DWORD *)v55 + 6) = v64;
        }
        v65 = v64 - 2;
        if (v65)
        {
          *((_DWORD *)v55 + 6) = v65;
          return this;
        }
        v114 = *((_WORD *)v55 + 15);
        goto LABEL_313;
      }
LABEL_138:
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0;
      v66 = 1;
      goto LABEL_142;
    default:
      goto LABEL_138;
  }
}

WebCore::Node *WebCore::enclosingTextUnitOfGranularity@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  WebCore::Node *result;
  void *v9;
  const WebCore::VisiblePosition *v10;
  WebCore::Node *v11;
  unsigned __int8 *v12;
  WebCore::Node *v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore *v17;
  int v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  void *v21;
  const WebCore::VisiblePosition *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  int v26;
  int v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  int v30;
  int v31;
  WebCore::Node *v32;
  int v33;
  WebCore::Node *v34;
  unsigned __int8 v35;
  const WebCore::VisiblePosition *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  __int16 v39;
  __int16 v40;
  void *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  int v44;
  char v45;
  char v46;
  WebCore::Node *v47;
  int v48;
  char v49;
  char v50;
  WebCore::Node *v51;
  int v52;
  char v53;
  char v54;
  WebCore::Node *v55;
  uint64_t v56;
  uint64_t v57;

  result = (WebCore::Node *)WebCore::withinTextUnitOfGranularity((WebCore::VisiblePosition *)a1, a2, a3);
  if ((result & 1) != 0)
  {
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 1;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 1;
    switch(a2)
    {
      case 0:
        v11 = *(WebCore::Node **)a1;
        if (*(_QWORD *)a1)
          *((_DWORD *)v11 + 6) += 2;
        v51 = v11;
        v52 = *(_DWORD *)(a1 + 8);
        v53 = *(_BYTE *)(a1 + 12);
        v54 = *(_BYTE *)(a1 + 16);
        v12 = (unsigned __int8 *)&v51;
        goto LABEL_25;
      case 1:
        if ((a3 & 0xFFFFFFFD) != 0)
        {
          v13 = *(WebCore::Node **)a1;
          if (*(_QWORD *)a1)
            *((_DWORD *)v13 + 6) += 2;
          v55 = v13;
          LODWORD(v56) = *(_DWORD *)(a1 + 8);
          BYTE4(v56) = *(_BYTE *)(a1 + 12);
          LOBYTE(v57) = *(_BYTE *)(a1 + 16);
          WebCore::previousBoundary((uint64_t)&v43, (uint64_t)&v55, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startWordBoundary, 0);
          v15 = v55;
          v55 = 0;
          if (v15)
          {
            if (*((_DWORD *)v15 + 6) == 2)
            {
              if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v15, v14);
            }
            else
            {
              *((_DWORD *)v15 + 6) -= 2;
            }
          }
          v16 = v51;
          v51 = v43;
          if (v16)
          {
            if (*((_DWORD *)v16 + 6) == 2)
            {
              if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v16, v14);
            }
            else
            {
              *((_DWORD *)v16 + 6) -= 2;
            }
          }
          v52 = v44;
          v53 = v45;
          v54 = v46;
          v17 = (WebCore *)a1;
          v18 = 1;
        }
        else
        {
          WebCore::startOfWord(a1, 0, (uint64_t)&v55);
          v51 = v55;
          v52 = v56;
          v53 = BYTE4(v56);
          v54 = v57;
          v17 = (WebCore *)a1;
          v18 = 0;
        }
        WebCore::endOfWord(v17, v18, (uint64_t)&v55);
        goto LABEL_46;
      case 2:
        WebCore::previousBoundary((uint64_t)&v55, a1, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
        v51 = v55;
        v52 = v56;
        v53 = BYTE4(v56);
        v54 = v57;
        WebCore::nextBoundary((uint64_t)&v55, a1, (WebCore::Node *)WebCore::endSentenceBoundary);
LABEL_46:
        v34 = v55;
        v55 = 0;
        v32 = v47;
        v47 = v34;
        if (!v32)
          goto LABEL_49;
        v33 = *((_DWORD *)v32 + 6) - 2;
        if (*((_DWORD *)v32 + 6) != 2)
          goto LABEL_48;
        if ((*((_WORD *)v32 + 15) & 0x400) != 0)
          goto LABEL_49;
        WebCore::Node::removedLastRef(v32, v9);
        v38 = v55;
        v48 = v56;
        v49 = BYTE4(v56);
        v50 = v57;
        v55 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38, v9);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        goto LABEL_50;
      case 3:
        WebCore::startOfLine((uint64_t)&v55, (WebCore::VisiblePosition *)a1, (WebCore::Node *)1, 0);
        v19 = v55;
        v55 = 0;
        v51 = v19;
        v52 = v56;
        v53 = BYTE4(v56);
        v54 = v57;
        WebCore::endOfLine((uint64_t *)&v55, a1, 1, 0);
        v20 = v55;
        v55 = 0;
        v47 = v20;
        v48 = v56;
        v49 = BYTE4(v56);
        v50 = v57;
        if (!WebCore::operator==((uint64_t *)&v51, (uint64_t *)&v47))
          goto LABEL_50;
        WebCore::nextLinePosition((uint64_t)&v47, 0, 0, &v55);
        v23 = v55;
        v55 = 0;
        v24 = v47;
        v47 = v23;
        if (!v24)
          goto LABEL_22;
        if (*((_DWORD *)v24 + 6) != 2)
        {
          *((_DWORD *)v24 + 6) -= 2;
LABEL_22:
          v48 = v56;
          v49 = BYTE4(v56);
          goto LABEL_23;
        }
        if ((*((_WORD *)v24 + 15) & 0x400) != 0)
          goto LABEL_22;
        WebCore::Node::removedLastRef(v24, v21);
        v42 = v55;
        v48 = v56;
        v49 = BYTE4(v56);
        v50 = v57;
        v55 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 6) == 2)
          {
            if ((*((_WORD *)v42 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v42, v41);
          }
          else
          {
            *((_DWORD *)v42 + 6) -= 2;
          }
        }
LABEL_23:
        v50 = 0;
        if (!WebCore::inSameLine((WebCore *)&v51, (const WebCore::VisiblePosition *)&v47, v22))
        {
          v12 = (unsigned __int8 *)a1;
LABEL_25:
          WebCore::VisiblePosition::next(v12, 0, 0, (uint64_t)&v55);
LABEL_40:
          v32 = v47;
          v47 = v55;
          if (v32)
          {
            v33 = *((_DWORD *)v32 + 6) - 2;
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v32, v9);
            }
            else
            {
LABEL_48:
              *((_DWORD *)v32 + 6) = v33;
            }
          }
LABEL_49:
          v48 = v56;
          v49 = BYTE4(v56);
          v50 = v57;
        }
LABEL_50:
        if (v51
          && v47
          && ((v35 = WebCore::documentOrder((WebCore::Node **)a1, &v51, v10), v35 == 129)
           || ((char)v35 & 0x80000000) == 0)
          && (char)WebCore::documentOrder((WebCore::Node **)a1, &v47, v36) < 1)
        {
          WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v51, (uint64_t)&v47, (uint64_t)a4);
        }
        else
        {
LABEL_55:
          *a4 = 0;
          a4[32] = 0;
        }
        v37 = v47;
        v47 = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v9);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
        result = v51;
        v51 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v9);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
        break;
      case 4:
        WebCore::startOfParagraph(a1, 1, &v55);
        v51 = v55;
        v52 = v56;
        v53 = BYTE4(v56);
        v54 = v57;
        WebCore::endOfParagraph((WebCore::Node *)a1, 1, &v55);
        goto LABEL_40;
      case 5:
        v25 = *(WebCore::Node **)a1;
        if (!*(_QWORD *)a1)
        {
          v56 = 0;
          v55 = 0;
          v57 = 1;
          goto LABEL_32;
        }
        *((_DWORD *)v25 + 6) += 4;
        WebCore::startOfDocument(v25, (const WebCore::Node *)v9, (uint64_t)&v55);
        v26 = *((_DWORD *)v25 + 6) - 2;
        if (*((_DWORD *)v25 + 6) == 2)
        {
          v39 = *((_WORD *)v25 + 15);
          if ((v39 & 0x400) != 0)
            goto LABEL_75;
          WebCore::Node::removedLastRef(v25, v9);
          v26 = *((_DWORD *)v25 + 6);
        }
        else
        {
          *((_DWORD *)v25 + 6) = v26;
        }
        v27 = v26 - 2;
        if (v27)
        {
          *((_DWORD *)v25 + 6) = v27;
          goto LABEL_32;
        }
        v39 = *((_WORD *)v25 + 15);
LABEL_75:
        if ((v39 & 0x400) == 0)
          WebCore::Node::removedLastRef(v25, v9);
LABEL_32:
        v28 = v51;
        v51 = v55;
        if (v28)
        {
          if (*((_DWORD *)v28 + 6) == 2)
          {
            if ((*((_WORD *)v28 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v28, v9);
          }
          else
          {
            *((_DWORD *)v28 + 6) -= 2;
          }
        }
        v52 = v56;
        v53 = BYTE4(v56);
        v54 = v57;
        v29 = *(WebCore::Node **)a1;
        if (!*(_QWORD *)a1)
        {
          v56 = 0;
          v55 = 0;
          v57 = 1;
          goto LABEL_40;
        }
        *((_DWORD *)v29 + 6) += 4;
        WebCore::endOfDocument(v29, (const WebCore::Node *)v9, (uint64_t)&v55);
        v30 = *((_DWORD *)v29 + 6) - 2;
        if (*((_DWORD *)v29 + 6) == 2)
        {
          v40 = *((_WORD *)v29 + 15);
          if ((v40 & 0x400) != 0)
            goto LABEL_82;
          WebCore::Node::removedLastRef(v29, v9);
          v30 = *((_DWORD *)v29 + 6);
        }
        else
        {
          *((_DWORD *)v29 + 6) = v30;
        }
        v31 = v30 - 2;
        if (v31)
        {
          *((_DWORD *)v29 + 6) = v31;
          goto LABEL_40;
        }
        v40 = *((_WORD *)v29 + 15);
LABEL_82:
        if ((v40 & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v9);
        goto LABEL_40;
      default:
        goto LABEL_55;
    }
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
  return result;
}

void *WebCore::distanceBetweenPositions(WebCore::Node **this, WebCore::Node **a2, const WebCore::VisiblePosition *a3)
{
  BOOL v3;
  uint64_t v4;
  unsigned __int8 v7;
  void *result;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12[2];
  WebCore::Node *v13;
  char v14;

  if (*this)
    v3 = *a2 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v7 = WebCore::documentOrder(this, a2, a3);
  if (v7 == 129 || ((char)v7 & 0x80000000) == 0)
  {
    result = WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)a2, (uint64_t)this, (uint64_t)v12);
    if (v14)
    {
      v4 = WebCore::characterCount((int *)v12, 0);
LABEL_13:
      if (v14)
      {
        v10 = v13;
        v13 = 0;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, v9);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
        v11 = v12[0];
        v12[0] = 0;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v9);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
      }
      return (void *)v4;
    }
  }
  else
  {
    result = WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)this, (uint64_t)a2, (uint64_t)v12);
    if (v14)
    {
      v4 = -WebCore::characterCount((int *)v12, 0);
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t WebCore::charactersAroundPosition(uint64_t result, const WebCore::VisiblePosition *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  WebCore::Node *v8;
  int v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)();
  WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  uint64_t (*v18)();
  WebCore::Node *v19;
  void *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  char v23;
  uint64_t (*v24)();
  WebCore::Node *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  int v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  WebCore::Node *v44;
  char v45;
  WTF::StringImpl *v46;
  WebCore::Node *v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  WebCore::Node *v55;
  int v56;
  char v57;
  char v58;
  WebCore::Node *v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v65 = 0;
  v64 = 0;
  if (*(_QWORD *)result)
  {
    v7 = result;
    result = WebCore::isStartOfDocument((WebCore::Node **)result, a2);
    if ((result & 1) == 0)
    {
      v8 = *(WebCore::Node **)v7;
      if (*(_QWORD *)v7)
      {
        v9 = *((_DWORD *)v8 + 6);
        *((_DWORD *)v8 + 6) = v9 + 2;
        v59 = v8;
        v10 = v7 + 8;
        v60 = *(_DWORD *)(v7 + 8);
        v61 = *(_BYTE *)(v7 + 12);
        v11 = *(_BYTE *)(v7 + 16);
        v62 = v11;
        *((_DWORD *)v8 + 6) = v9 + 4;
      }
      else
      {
        v59 = 0;
        v10 = v7 + 8;
        v60 = *(_DWORD *)(v7 + 8);
        v61 = *(_BYTE *)(v7 + 12);
        v11 = *(_BYTE *)(v7 + 16);
        v62 = v11;
      }
      v55 = v8;
      v56 = *(_DWORD *)v10;
      v57 = *(_BYTE *)(v10 + 4);
      v58 = v11;
      WebCore::VisiblePosition::next((unsigned __int8 *)v7, 1, 0, (uint64_t)&v51);
      v13 = v51;
      if (v51)
        v14 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v14 = 0;
      if (v14)
      {
        if (v51)
          *(_DWORD *)(v51 + 24) += 2;
        v15 = v55;
        v55 = (WebCore::Node *)v13;
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v15, v12);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
        }
        v56 = v52;
        v57 = v53;
        v58 = v54;
      }
      WebCore::VisiblePosition::previous((WebCore::Node **)v7, 1, 0, (uint64_t)&v47);
      v17 = v47;
      if (v47)
        v18 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v18 = 0;
      if (v18)
      {
        if (v47)
          *((_DWORD *)v47 + 6) += 2;
        v19 = v59;
        v59 = v17;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v16);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        v60 = v48;
        v61 = v49;
        v62 = v50;
        WebCore::VisiblePosition::previous(&v47, 1, 0, (uint64_t)&v41);
        v21 = v41;
        v22 = v47;
        v47 = v41;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v22, v20);
              v21 = v47;
            }
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        v48 = v42;
        v49 = v43;
        v23 = (char)v44;
        v50 = (char)v44;
        if (v21)
          v24 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v24 = 0;
        if (v24)
        {
          if (v21)
            *((_DWORD *)v21 + 6) += 2;
          v25 = v59;
          v59 = v21;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v25, v20);
                v23 = v50;
              }
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
          v60 = v48;
          v61 = v49;
          v62 = v23;
        }
      }
      if (!WebCore::operator==((uint64_t *)&v59, (uint64_t *)&v55))
      {
        WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v59, (uint64_t)&v55, (uint64_t)&v41);
        if (!v45)
          __break(1u);
        WebCore::plainText(&v41, 0, 0, (const WTF::String *)&v46);
        if (v46)
        {
          WTF::StringImpl::replace();
          v27 = v63;
          v28 = v46;
          v46 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v26);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        else
        {
          v27 = 0;
          v46 = 0;
        }
        if (v45)
        {
          v29 = v44;
          v44 = 0;
          if (v29)
          {
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v29, v26);
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
            }
          }
          v30 = v41;
          v41 = 0;
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30, v26);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
          }
        }
        if (v27)
        {
          v31 = *(unsigned int *)(v27 + 4);
          v32 = (v31 - 1);
          if ((int)v31 - 1 >= 0)
          {
            v33 = 0;
            do
            {
              if (v33)
                v34 = v33;
              else
                v34 = v13 == 0;
              if (v32 >= v31)
              {
                v36 = 0;
              }
              else
              {
                v35 = *(_QWORD *)(v27 + 8);
                if ((*(_BYTE *)(v27 + 16) & 4) != 0)
                  v36 = *(unsigned __int8 *)(v35 + v32);
                else
                  v36 = *(unsigned __int16 *)(v35 + 2 * v32);
              }
              *((_DWORD *)&v64 + v34) = v36;
              if (v32-- < 1)
                break;
              v33 = v34 + 1;
            }
            while (v34 < 2);
          }
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      v38 = HIDWORD(v64);
      *(_DWORD *)a2 = v64;
      *a3 = v38;
      *a4 = v65;
      v39 = v47;
      v47 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 6) == 2)
        {
          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v39, v26);
        }
        else
        {
          *((_DWORD *)v39 + 6) -= 2;
        }
      }
      if (v13)
      {
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v26);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
      v40 = v55;
      v55 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40, v26);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
      result = (uint64_t)v59;
      v59 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v26);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::wordRangeFromPosition@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  WebCore::Node *v5;
  unsigned int *v6;
  void *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  uint64_t (*v11)();
  void *v12;
  WebCore::Node *v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  int v21;
  unsigned int v22;
  WebCore::Node *v23;
  unsigned int v24;
  void *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  unsigned int v28;
  char v29;
  unsigned __int8 v30;
  WebCore::Node *v31;
  unsigned int v32;
  char v33;
  unsigned __int8 v34;
  WebCore::Node *v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned int v40;
  char v41;

  if (!*(_QWORD *)this)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return this;
  }
  v4 = this;
  this = (unsigned int *)WebCore::enclosingTextUnitOfGranularity((uint64_t)this, 1, 1, (_BYTE *)a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    this = (unsigned int *)WebCore::enclosingTextUnitOfGranularity((uint64_t)v4, 1, 0, (_BYTE *)a2);
    if (!*(_BYTE *)(a2 + 32))
    {
      v5 = *(WebCore::Node **)v4;
      if (*(_QWORD *)v4)
        *((_DWORD *)v5 + 6) += 2;
      v27 = v5;
      v6 = v4 + 2;
      v28 = v4[2];
      v29 = *((_BYTE *)v4 + 12);
      v30 = *((_BYTE *)v4 + 16);
      while (1)
      {
        WebCore::positionOfNextBoundaryOfGranularity((WebCore::Node *)&v27, (const WebCore::Node *)1, 1, (uint64_t)&v35);
        v8 = v35;
        v35 = 0;
        v9 = v27;
        v27 = v8;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v9, v7);
              v13 = v35;
              v28 = v36;
              v29 = v37;
              v30 = v38;
              v35 = 0;
              if (v13)
              {
                if (*((_DWORD *)v13 + 6) == 2)
                {
                  if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v13, v12);
                }
                else
                {
                  *((_DWORD *)v13 + 6) -= 2;
                }
              }
              goto LABEL_11;
            }
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        v28 = v36;
        v29 = v37;
        v30 = v38;
LABEL_11:
        v10 = v27;
        if (v27)
          v11 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v11 = 0;
        if (!v11)
          goto LABEL_25;
        if (WebCore::atBoundaryOfGranularity((WebCore *)&v27, (const WebCore::Node *)1, 1))
        {
          v10 = v27;
LABEL_25:
          if (v10)
            goto LABEL_31;
          WebCore::positionOfNextBoundaryOfGranularity((WebCore::Node *)v4, (const WebCore::Node *)1, 0, (uint64_t)&v35);
          v15 = v35;
          v35 = 0;
          v16 = v27;
          v27 = v15;
          if (!v16)
            goto LABEL_29;
          if (*((_DWORD *)v16 + 6) != 2)
          {
            *((_DWORD *)v16 + 6) -= 2;
            goto LABEL_29;
          }
          if ((*((_WORD *)v16 + 15) & 0x400) != 0)
          {
LABEL_29:
            v28 = v36;
            v29 = v37;
            v30 = v38;
          }
          else
          {
            WebCore::Node::removedLastRef(v16, v14);
            v26 = v35;
            v28 = v36;
            v29 = v37;
            v30 = v38;
            v35 = 0;
            if (v26)
            {
              if (*((_DWORD *)v26 + 6) == 2)
              {
                if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v26, v25);
              }
              else
              {
                *((_DWORD *)v26 + 6) -= 2;
              }
            }
          }
          v10 = v27;
          if (v27)
          {
LABEL_31:
            *((_DWORD *)v10 + 6) += 2;
            v31 = v10;
            v32 = v28;
            v33 = v29;
            WebCore::makeBoundaryPoint((uint64_t *)&v31, (uint64_t)&v35);
            if (*((_DWORD *)v10 + 6) == 2)
            {
              if ((*((_WORD *)v10 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v10, v17);
            }
            else
            {
              *((_DWORD *)v10 + 6) -= 2;
            }
          }
          else
          {
            v31 = 0;
            v32 = v28;
            v33 = v29;
            WebCore::makeBoundaryPoint((uint64_t *)&v31, (uint64_t)&v35);
          }
          v18 = *(_QWORD *)v4;
          if (v18)
          {
            *(_DWORD *)(v18 + 24) += 2;
            v39 = v18;
            v40 = *v6;
            v41 = *((_BYTE *)v6 + 4);
            WebCore::makeBoundaryPoint(&v39, (uint64_t)&v31);
            if (*(_DWORD *)(v18 + 24) == 2)
            {
              if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v18, v19);
            }
            else
            {
              *(_DWORD *)(v18 + 24) -= 2;
            }
          }
          else
          {
            v39 = 0;
            v40 = *v6;
            v41 = *((_BYTE *)v6 + 4);
            WebCore::makeBoundaryPoint(&v39, (uint64_t)&v31);
          }
          v20 = v38;
          v21 = v34;
          if (v38 && v34)
          {
            v22 = v36;
            v23 = v31;
            v24 = v32;
            *(_QWORD *)a2 = v35;
            *(_DWORD *)(a2 + 8) = v22;
            *(_QWORD *)(a2 + 16) = v23;
            *(_DWORD *)(a2 + 24) = v24;
            *(_BYTE *)(a2 + 32) = 1;
          }
          else
          {
            *(_BYTE *)a2 = 0;
            *(_BYTE *)(a2 + 32) = 0;
            if (v21 && v31)
            {
              if (*((_DWORD *)v31 + 6) == 2)
              {
                if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v31, v19);
              }
              else
              {
                *((_DWORD *)v31 + 6) -= 2;
              }
            }
            if (v20 && v35)
            {
              if (*((_DWORD *)v35 + 6) == 2)
              {
                if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v35, v19);
              }
              else
              {
                *((_DWORD *)v35 + 6) -= 2;
              }
            }
          }
          this = (unsigned int *)v27;
          v27 = 0;
          if (this)
          {
            if (this[6] == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)this, v19);
            }
            else
            {
              this[6] -= 2;
            }
          }
          return this;
        }
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::closestWordBoundaryForPosition@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v3;
  uint64_t v5;
  WebCore::Node *result;
  WebCore::Node *v7;
  int v8;
  char v9;
  char v10;
  char v11;
  void *v12;
  const WebCore::VisiblePosition *v13;
  void *v14;
  char v15;
  WebCore::Node *v16;
  uint64_t v17;
  char v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  WebCore::Node *v26;
  int v27;
  char v28;
  WebCore::Node *v29;
  int v30;
  char v31;

  v3 = this;
  *(_DWORD *)(a2 + 8) = 0;
  v5 = a2 + 8;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 12) &= 0xF0u;
  *(_BYTE *)(a2 + 16) = 1;
  result = (WebCore::Node *)WebCore::atBoundaryOfGranularity(this, (const WebCore::Node *)3, 0);
  if ((_DWORD)result)
    goto LABEL_29;
  if (!WebCore::withinTextUnitOfGranularity(v3, 1, 0))
  {
    result = (WebCore::Node *)WebCore::atBoundaryOfGranularity(v3, (const WebCore::Node *)1, 1);
    if (!(_DWORD)result)
    {
      result = WebCore::positionOfNextBoundaryOfGranularity(v3, (const WebCore::Node *)1, 0, (uint64_t)&v26);
      v19 = v26;
      *(_QWORD *)a2 = v26;
      *(_DWORD *)v5 = v27;
      *(_BYTE *)(v5 + 4) = v28;
      *(_BYTE *)(a2 + 16) = (_BYTE)v29;
      if (v19)
        return result;
      result = WebCore::endOfEditableContent(v3, (uint64_t)&v26);
      *(_QWORD *)a2 = v26;
      *(_DWORD *)v5 = v27;
      *(_BYTE *)(v5 + 4) = v28;
      v18 = (char)v29;
LABEL_32:
      *(_BYTE *)(a2 + 16) = v18;
      return result;
    }
LABEL_29:
    v17 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
      *(_DWORD *)(v17 + 24) += 2;
    *(_QWORD *)a2 = v17;
    *(_DWORD *)v5 = *((_DWORD *)v3 + 2);
    *(_BYTE *)(v5 + 4) = *((_BYTE *)v3 + 12);
    v18 = *((_BYTE *)v3 + 16);
    goto LABEL_32;
  }
  result = WebCore::enclosingTextUnitOfGranularity((uint64_t)v3, 1, 0, &v26);
  if (!v31)
    return result;
  v7 = v26;
  *((_DWORD *)v26 + 6) += 2;
  v8 = v27;
  v20 = v7;
  v21 = v27;
  v9 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v7 + 208))(v7);
  if (v8)
    v10 = 10;
  else
    v10 = 9;
  if ((v9 & 1) != 0)
    v11 = 8;
  else
    v11 = v10;
  v22 = v11;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v20, (uint64_t)&v23);
  *(_QWORD *)a2 = v23;
  *(_BYTE *)(v5 + 4) = v25;
  *(_DWORD *)v5 = v24;
  *(_BYTE *)(a2 + 16) = 1;
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, v12);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  result = (WebCore::Node *)WebCore::distanceBetweenPositions((WebCore::Node **)v3, (WebCore::Node **)a2, v13);
  if ((uint64_t)result < 2)
    goto LABEL_21;
  if (!v31)
  {
    __break(1u);
LABEL_47:
    if ((_DWORD)v7)
      v15 = 10;
    else
      v15 = 9;
    goto LABEL_16;
  }
  v3 = v29;
  *((_DWORD *)v29 + 6) += 2;
  LODWORD(v7) = v30;
  v20 = v3;
  v21 = v30;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v3 + 208))(v3) & 1) == 0)
    goto LABEL_47;
  v15 = 8;
LABEL_16:
  v22 = v15;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v20, (uint64_t)&v23);
  result = *(WebCore::Node **)a2;
  *(_QWORD *)a2 = v23;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v14);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  *(_BYTE *)(v5 + 4) = v25;
  *(_DWORD *)v5 = v24;
  *(_BYTE *)(a2 + 16) = 1;
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      result = (WebCore::Node *)WebCore::Node::removedLastRef(v3, v14);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
LABEL_21:
  if (v31)
  {
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v14);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result, v14);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  WebCore::Node *v7;
  int v8;
  int *v9;
  int v10;
  void *v11;
  WebCore::Node *v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  void *v21;
  BOOL v22;
  WebCore::Node *v23;
  void *v24;
  WebCore::Node *v25;
  uint64_t v26;
  void *v27;
  BOOL v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  void *v33;
  WebCore::Node *v34;
  unsigned int *result;
  int v36;
  int v37;
  char v38;
  WebCore::Node *v39[2];
  char v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  unsigned int *v48;
  int v49;
  char v50;

  v5 = a2;
  v7 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
  {
    v8 = *((_DWORD *)v7 + 6);
    *((_DWORD *)v7 + 6) = v8 + 2;
    v10 = *(_DWORD *)(a1 + 8);
    v9 = (int *)(a1 + 8);
    v49 = v10;
    v50 = *((_BYTE *)v9 + 4);
    *((_DWORD *)v7 + 6) = v8 + 4;
  }
  else
  {
    v36 = *(_DWORD *)(a1 + 8);
    v9 = (int *)(a1 + 8);
    v49 = v36;
    v50 = *((_BYTE *)v9 + 4);
  }
  v48 = (unsigned int *)v7;
  v45 = v7;
  v46 = *v9;
  v47 = *((_BYTE *)v9 + 4);
  if (a2 >= 1)
  {
    if (a3 == 1)
    {
      while (1)
      {
        WebCore::Position::previous((uint64_t)&v48, 1, (uint64_t)&v41);
        v12 = v41;
        v41 = 0;
        v13 = (uint64_t)v48;
        v48 = (unsigned int *)v12;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v11);
              v15 = v41;
              v49 = v42;
              v50 = v43;
              v41 = 0;
              if (v15)
              {
                if (*((_DWORD *)v15 + 6) == 2)
                {
                  if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v15, v14);
                }
                else
                {
                  *((_DWORD *)v15 + 6) -= 2;
                }
              }
              goto LABEL_9;
            }
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v49 = v42;
        v50 = v43;
LABEL_9:
        if (!--v5)
          goto LABEL_29;
      }
    }
    do
    {
      WebCore::Position::next((uint64_t)&v45, (WebCore::Node *)1, (uint64_t)&v41);
      v17 = v41;
      v41 = 0;
      v18 = v45;
      v45 = v17;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v18, v16);
            v20 = v41;
            v46 = v42;
            v47 = v43;
            v41 = 0;
            if (v20)
            {
              if (*((_DWORD *)v20 + 6) == 2)
              {
                if ((*((_WORD *)v20 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v20, v19);
              }
              else
              {
                *((_DWORD *)v20 + 6) -= 2;
              }
            }
            goto LABEL_21;
          }
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      v46 = v42;
      v47 = v43;
LABEL_21:
      --v5;
    }
    while (v5);
  }
LABEL_29:
  if (a3)
  {
    if (a3 == 1)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v48, (uint64_t)&v41);
      v44 = 1;
      v22 = WebCore::atBoundaryOfGranularity((WebCore *)&v41, (const WebCore::Node *)1, 1);
      v23 = v41;
      v41 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23, v21);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      if (!v22)
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v48, (uint64_t)v39);
        v40 = 1;
        WebCore::startOfWord((uint64_t)v39, 0, (uint64_t)&v41);
        v25 = v41;
        if (v41)
          *((_DWORD *)v41 + 6) += 2;
        v26 = (uint64_t)v48;
        v48 = (unsigned int *)v25;
        if (v26)
        {
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26, v24);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
        v49 = v42;
        v50 = v43;
        if (!v25)
          goto LABEL_55;
        if (*((_DWORD *)v25 + 6) != 2)
        {
          *((_DWORD *)v25 + 6) -= 2;
          goto LABEL_55;
        }
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        {
          v30 = v25;
LABEL_82:
          WebCore::Node::removedLastRef(v30, v24);
        }
LABEL_55:
        v32 = v39[0];
        v39[0] = 0;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v32, v24);
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
      }
    }
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v45, (uint64_t)&v41);
    v44 = 1;
    v28 = WebCore::atBoundaryOfGranularity((WebCore *)&v41, (const WebCore::Node *)1, 0);
    v29 = v41;
    v41 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v27);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    if (!v28)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v45, (uint64_t)v39);
      v40 = 1;
      WebCore::endOfWord((WebCore *)v39, 0, (uint64_t)&v41);
      v30 = v41;
      if (v41)
        *((_DWORD *)v41 + 6) += 2;
      v37 = v42;
      v38 = v43;
      v31 = v45;
      v45 = v30;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 2)
        {
          if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v31, v24);
            v30 = v41;
          }
        }
        else
        {
          *((_DWORD *)v31 + 6) -= 2;
        }
      }
      v46 = v37;
      v47 = v38;
      v41 = 0;
      if (!v30)
        goto LABEL_55;
      if (*((_DWORD *)v30 + 6) != 2)
      {
        *((_DWORD *)v30 + 6) -= 2;
        goto LABEL_55;
      }
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        goto LABEL_82;
      goto LABEL_55;
    }
  }
  WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)&v48, (uint64_t *)&v45, a4);
  v34 = v45;
  v45 = 0;
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v33);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  result = v48;
  v48 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v33);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

