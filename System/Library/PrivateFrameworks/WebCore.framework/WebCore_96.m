WTF *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF **a1, WTF **a2, WTF **a3, WTF **a4, WTF **a5, uint64_t (**a6)(WTF **, WTF **))
{
  WTF *result;
  void *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a2, a3, a4, a6);
  result = (WTF *)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v14 = *a4;
    *a4 = 0;
    v15 = *a5;
    *a5 = 0;
    v16 = *a4;
    *a4 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v13);
      else
        --*(_DWORD *)v16;
    }
    v17 = *a5;
    *a5 = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v13);
      else
        --*(_DWORD *)v17;
    }
    result = (WTF *)(*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v19 = *a3;
      *a3 = 0;
      v20 = *a4;
      *a4 = 0;
      v21 = *a3;
      *a3 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::fastFree(v21, v18);
        else
          --*(_DWORD *)v21;
      }
      v22 = *a4;
      *a4 = v19;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, v18);
        else
          --*(_DWORD *)v22;
      }
      result = (WTF *)(*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v24 = *a2;
        *a2 = 0;
        v25 = *a3;
        *a3 = 0;
        v26 = *a2;
        *a2 = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            WTF::fastFree(v26, v23);
          else
            --*(_DWORD *)v26;
        }
        v27 = *a3;
        *a3 = v24;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1)
            WTF::fastFree(v27, v23);
          else
            --*(_DWORD *)v27;
        }
        result = (WTF *)(*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v29 = *a1;
          *a1 = 0;
          v30 = *a2;
          *a2 = 0;
          v31 = *a1;
          *a1 = v30;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
              WTF::fastFree(v31, v28);
            else
              --*(_DWORD *)v31;
          }
          result = *a2;
          *a2 = v29;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              return (WTF *)WTF::fastFree(result, v28);
            else
              --*(_DWORD *)result;
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::TextBoxSelectableRange::clamp(unsigned int *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *this;
  v3 = this[1];
  v5 = v3 + *this;
  v14 = v5;
  v15 = a2;
  if (__CFADD__(v3, v4))
  {
    __break(1u);
  }
  else
  {
    v6 = (int *)&v15;
    if (v5 < a2)
      v6 = (int *)&v14;
    if (v4 > a2)
      v6 = (int *)this;
    v7 = *v6 - v4;
    v8 = *((unsigned __int8 *)this + 20);
    if (*((_BYTE *)this + 20) && (v12 = this[4]) != 0)
    {
      if (v12 < v7)
        v7 = this[4];
    }
    else if (v7 == v3)
    {
      v7 = this[2] + v3;
    }
    v14 = v5;
    v15 = a3;
    v9 = v5 >= a3;
    v10 = (int *)&v15;
    if (!v9)
      v10 = (int *)&v14;
    if (v4 > a3)
      v10 = (int *)this;
    v11 = *v10 - v4;
    if (v8 && (v13 = this[4]) != 0)
    {
      if (v13 >= v11)
        v11 = v11;
      else
        v11 = v13;
    }
    else if ((_DWORD)v11 == v3)
    {
      v11 = this[2] + v3;
    }
    return (unsigned int *)(v7 | (unint64_t)(v11 << 32));
  }
  return this;
}

float WebCore::RenderText::measureTextConsideringPossibleTrailingSpace<WebCore::RenderText::widthFromCacheConsideringPossibleTrailingSpace(WebCore::RenderStyle const&,WebCore::FontCascade const&,unsigned int,unsigned int,float,BOOL,WebCore::WordTrailingSpace &,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GlyphOverflow &)::{lambda(unsigned int,unsigned int)#1}>(int a1, unsigned int a2, unsigned int a3, float *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  if (a1 && (v10 = WebCore::WordTrailingSpace::width(a4), (v10 & 0xFF00000000) != 0))
    return WebCore::RenderText::widthFromCacheConsideringPossibleTrailingSpace(WebCore::RenderStyle const&,WebCore::FontCascade const&,unsigned int,unsigned int,float,BOOL,WebCore::WordTrailingSpace &,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GlyphOverflow &)const::{lambda(unsigned int,unsigned int)#1}::operator()(a6, a2, a3 + 1)- *(float *)&v10;
  else
    return WebCore::RenderText::widthFromCacheConsideringPossibleTrailingSpace(WebCore::RenderStyle const&,WebCore::FontCascade const&,unsigned int,unsigned int,float,BOOL,WebCore::WordTrailingSpace &,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GlyphOverflow &)const::{lambda(unsigned int,unsigned int)#1}::operator()(a6, a2, a3);
}

uint64_t WebCore::BreakLines::nextCharacter()
{
  uint64_t v0;
  uint64_t v2;

  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  v0 = ubrk_following();
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v2);
  return v0;
}

unint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(uint64_t *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  unsigned int v6;
  unsigned __int8 v7;
  unint64_t v9;

  v3 = a1;
  v4 = *a1;
  if ((a1[1] & 0xFF00000000) == 0)
    return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>((unsigned __int16 *)a1, v4, a1[1], a2);
  result = a1[1];
  LOWORD(v6) = *((_WORD *)v3 + 66);
  if (!a2 && !*((_WORD *)v3 + 66))
  {
    if (result < 2)
      return result;
    LOBYTE(v3) = *((_BYTE *)v3 + 130);
    goto LABEL_6;
  }
  v9 = a2 - 2;
  if (a2 >= 2)
  {
    if (result <= v9)
      goto LABEL_35;
    LOBYTE(v3) = *(_BYTE *)(v4 + v9);
LABEL_7:
    if (result > a2 - 1)
    {
      LOBYTE(v6) = *(_BYTE *)(v4 + a2 - 1);
      goto LABEL_9;
    }
LABEL_35:
    __break(1u);
    return result;
  }
  LOWORD(v3) = *((_WORD *)v3 + 65);
  if (a2)
  {
LABEL_6:
    a2 = 1;
    goto LABEL_7;
  }
LABEL_9:
  if (a2 >= result)
    return result;
  while (1)
  {
    v7 = v6;
    v6 = *(unsigned __int8 *)(v4 + a2);
    if (v6 <= 0x20 && ((1 << v6) & 0x100000600) != 0)
      return a2;
    if (v7 != 45)
    {
      if (v7 < 0x21u || v6 <= 0x20)
        goto LABEL_24;
LABEL_23:
      if (((WebCore::BreakLines::LineBreakTable::breakTable[28 * v7 - 924 + ((v6 - 33) >> 3)] >> ((v6 - 33) & 7)) & 1) != 0)
        return a2;
      goto LABEL_24;
    }
    if (v6 - 48 > 9)
    {
      if (v6 < 0x21)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (((_BYTE)v3 - 48) < 0xAu || ((v3 | 0x20) - 97) < 0x1Au)
      return a2;
LABEL_24:
    ++a2;
    LOBYTE(v3) = v7;
    if (result == a2)
      return result;
  }
}

WTF *WTF::VectorMover<false,WebCore::RenderTableSection::CellStruct>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      v9 = (void *)(a3 + v6 + 16);
      *(_QWORD *)v7 = v9;
      *(_QWORD *)(v7 + 8) = 1;
      v11 = (uint64_t)v5 + v6 + 16;
      v10 = *(void **)((char *)v5 + v6);
      if ((void *)v11 == v10)
      {
        memcpy(v9, v10, 8 * *((unsigned int *)v8 + 3));
      }
      else
      {
        *(_QWORD *)v8 = v11;
        *(_QWORD *)v7 = v10;
        v13 = *((_DWORD *)v8 + 2);
        *((_DWORD *)v8 + 2) = 1;
        *(_DWORD *)(v7 + 8) = v13;
      }
      v12 = *(_DWORD *)((char *)v5 + v6 + 12);
      *(_DWORD *)((char *)v5 + v6 + 12) = 0;
      *(_DWORD *)(v7 + 12) = v12;
      *(_BYTE *)(a3 + v6 + 24) = *((_BYTE *)v5 + v6 + 24);
      result = *(WTF **)((char *)v5 + v6);
      if ((WTF *)v11 != result)
      {
        if (result)
        {
          v14 = (char *)v5 + v6;
          *(_QWORD *)v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          result = (WTF *)WTF::fastFree(result, v10);
        }
      }
      v6 += 32;
    }
    while ((WTF *)((char *)v5 + v6) != a2);
  }
  return result;
}

_QWORD *WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderTableCell *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 2)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x196465798);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 2)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl>(WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::RenderTableCell&)#1},WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;

  result = WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)a2, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = result;
  }
  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_6;
  if (!(_DWORD)v8)
  {
    v12 = 0;
    v9 = *(_QWORD *)a2;
    goto LABEL_16;
  }
  v10 = 8 * v8;
  v9 = *(_QWORD *)a2;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v10 -= 8;
    if (!v10)
    {
      v9 = v7;
      break;
    }
  }
LABEL_13:
  if (!v6)
  {
    v11 = 0;
    goto LABEL_17;
  }
  v12 = *(unsigned int *)(v6 - 4);
LABEL_16:
  v11 = v6 + 8 * v12;
LABEL_17:
  if (v11 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v13 = v9 + 8;
      v9 = v7;
      if (v13 != v7)
      {
        v9 = v13;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v11)
      {
        v9 = v11;
        break;
      }
    }
  }
  if (v6)
    v14 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v14 = 0;
  for (; v9 != v14; ++a2[2])
  {
    v15 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    result = *(_QWORD *)(v15 + 8);
    if (!result)
    {
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v15;
      v20 = *(WTF **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = result;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WTF::fastFree(v20, v19);
          result = *(_QWORD *)(v15 + 8);
          if (!result)
            goto LABEL_32;
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
    }
    ++*(_DWORD *)result;
LABEL_32:
    v16 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = result;
    *(_DWORD *)(a1 + 12) = v16 + 1;
    v17 = v7;
    if (v9 + 8 != v7)
    {
      v17 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
      {
        v17 += 8;
        if (v17 == v7)
        {
          v17 = v7;
          break;
        }
      }
    }
    v9 = v11;
    if (v17 != v11)
    {
      v9 = v17;
      if (!*(_QWORD *)(*(_QWORD *)v17 + 8))
      {
        while (1)
        {
          v18 = v9 + 8;
          v9 = v7;
          if (v18 != v7)
          {
            v9 = v18;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v11)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_48;
        }
        v9 = v11;
      }
    }
LABEL_48:
    ;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>>::add(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 8 * v22;
        goto LABEL_36;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
  {
    v19 = *(_DWORD *)(v18 + 16);
    if (!v19)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v18 + 16) = v19 - 1;
  }
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_35;
    goto LABEL_26;
  }
  if (3 * v26 > 4 * v25)
    goto LABEL_35;
  if ((_DWORD)v26)
  {
LABEL_26:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
  v27 = 8;
LABEL_31:
  result = WTF::HashTable<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>>::rehash(a2, v27, v14);
  v14 = (uint64_t *)result;
  v23 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v23 - 4);
  else
    v26 = 0;
LABEL_35:
  v29 = v23 + 8 * v26;
  v28 = 1;
LABEL_36:
  *(_QWORD *)v5 = v14;
  *(_QWORD *)(v5 + 8) = v29;
  *(_BYTE *)(v5 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v13 = 0;
        *v24 = v14;
        v25 = *v13;
        if (*v13)
        {
          v26 = *(_DWORD *)(v25 + 16);
          if (!v26)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v25 + 16) = v26 - 1;
        }
        if (v13 == a3)
          v12 = v24;
      }
      if (++v11 == v7)
        goto LABEL_20;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v12;
  }
  return result;
}

WTF *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF *result, WTF *a2, uint64_t (**a3)(WTF **, uint64_t), unint64_t a4, WTF **a5, uint64_t a6)
{
  WTF **v8;
  WTF **v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  unint64_t v14;
  uint64_t *v16;
  unint64_t v17;
  WTF **v18;
  unint64_t v19;
  WTF **v20;
  void *v21;
  uint64_t *v22;
  WTF **v23;
  uint64_t *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;

  if (a4 >= 2)
  {
    v8 = (WTF **)result;
    if (a4 == 2)
    {
      v9 = (WTF **)((char *)a2 - 8);
      result = (WTF *)(*a3)((WTF **)a2 - 1, (uint64_t)result);
      if ((_DWORD)result)
      {
        v11 = *v8;
        *v8 = 0;
        v12 = *v9;
        *v9 = 0;
        v13 = *v8;
        *v8 = v12;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
            WTF::fastFree(v13, v10);
          else
            --*(_DWORD *)v13;
        }
        result = *v9;
        *v9 = v11;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return (WTF *)WTF::fastFree(result, v10);
          else
            --*(_DWORD *)result;
        }
      }
    }
    else
    {
      v14 = a4;
      if ((uint64_t)a4 <= 0)
      {
        return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(result, a2, a3);
      }
      else
      {
        v16 = (uint64_t *)a5;
        v17 = a4 >> 1;
        v18 = (WTF **)((char *)result + 8 * (a4 >> 1));
        v19 = a4 >> 1;
        if ((uint64_t)v14 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(result, v18, (uint64_t (**)(WTF **, WTF *))a3, v19, a5);
          v20 = (WTF **)&v16[v17];
          result = std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>((WTF *)&v8[v14 >> 1], (WTF **)a2, (uint64_t (**)(WTF **, WTF *))a3, v14 - (v14 >> 1), v20);
          v22 = &v16[v14];
          v23 = v20;
          v24 = v16;
          while (v23 != (WTF **)v22)
          {
            if ((*a3)(v23, (uint64_t)v24))
            {
              v25 = *v23;
              *v23 = 0;
              result = *v8;
              *v8 = v25;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = (WTF *)WTF::fastFree(result, v21);
                else
                  --*(_DWORD *)result;
              }
              ++v23;
            }
            else
            {
              v26 = (WTF *)*v24;
              *v24 = 0;
              result = *v8;
              *v8 = v26;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = (WTF *)WTF::fastFree(result, v21);
                else
                  --*(_DWORD *)result;
              }
              ++v24;
            }
            ++v8;
            if (v24 == (uint64_t *)v20)
            {
              if (v23 != (WTF **)v22)
              {
                v29 = 0;
                do
                {
                  v30 = v23[v29];
                  v23[v29] = 0;
                  result = v8[v29];
                  v8[v29] = v30;
                  if (result)
                  {
                    if (*(_DWORD *)result == 1)
                      result = (WTF *)WTF::fastFree(result, v21);
                    else
                      --*(_DWORD *)result;
                  }
                  ++v29;
                }
                while (&v23[v29] != (WTF **)v22);
              }
              goto LABEL_46;
            }
          }
          if (v24 != (uint64_t *)v20)
          {
            v27 = 0;
            do
            {
              v28 = (WTF *)v24[v27];
              v24[v27] = 0;
              result = v8[v27];
              v8[v27] = v28;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = (WTF *)WTF::fastFree(result, v21);
                else
                  --*(_DWORD *)result;
              }
              ++v27;
            }
            while (&v24[v27] != (uint64_t *)v20);
          }
LABEL_46:
          if (v16)
          {
            do
            {
              result = (WTF *)*v16;
              *v16 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = (WTF *)WTF::fastFree(result, v21);
                else
                  --*(_DWORD *)result;
              }
              ++v16;
              --v14;
            }
            while (v14);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(result, v18, a3, v19, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(&v8[v14 >> 1], a2, a3, v14 - (v14 >> 1), v16, a6);
          return (WTF *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>((uint64_t)v8, (uint64_t *)&v8[v14 >> 1], (uint64_t *)a2, (unsigned int (**)(uint64_t, uint64_t))a3, v14 >> 1, v14 - (v14 >> 1), v16, a6);
        }
      }
    }
  }
  return result;
}

WTF *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF *result, WTF **a2, uint64_t (**a3)(WTF **, WTF *), unint64_t a4, WTF **a5)
{
  WTF **v5;
  WTF *v7;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF **v15;
  uint64_t v16;
  WTF **v17;
  WTF **v18;
  void *v19;
  WTF *v20;
  WTF **v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  WTF *v34;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      v13 = *(WTF **)v7;
      *(_QWORD *)v7 = 0;
      *v5 = v13;
      return result;
    }
    if (a4 == 2)
    {
      v10 = (WTF *)(a2 - 1);
      result = (WTF *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      v12 = *(WTF **)v11;
      *(_QWORD *)v11 = 0;
      *v5++ = v12;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v28 = (WTF *)((char *)result + 8 * (a4 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(result, v28, a3, a4 >> 1, a5, a4 >> 1);
      result = (WTF *)std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>((char *)v7 + 8 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v29 = (WTF **)((char *)v7 + 8 * (a4 >> 1));
      while (v29 != a2)
      {
        result = (WTF *)(*a3)(v29, v7);
        if ((_DWORD)result)
        {
          v30 = *v29;
          *v29++ = 0;
        }
        else
        {
          v30 = *(WTF **)v7;
          *(_QWORD *)v7 = 0;
          v7 = (WTF *)((char *)v7 + 8);
        }
        *v5++ = v30;
        if (v7 == v28)
        {
          if (v29 != a2)
          {
            v31 = 0;
            do
            {
              v32 = v29[v31];
              v29[v31] = 0;
              v5[v31++] = v32;
            }
            while (&v29[v31] != a2);
          }
          return result;
        }
      }
      if (v7 != v28)
      {
        v33 = 0;
        do
        {
          v34 = *(WTF **)((char *)v7 + v33);
          *(_QWORD *)((char *)v7 + v33) = 0;
          v5[v33 / 8] = v34;
          v33 += 8;
        }
        while ((WTF *)((char *)v7 + v33) != v28);
      }
    }
    else if (result != (WTF *)a2)
    {
      v14 = *(WTF **)result;
      *(_QWORD *)result = 0;
      v15 = (WTF **)((char *)result + 8);
      *a5 = v14;
      if ((WTF **)((char *)result + 8) != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v18 = v17++;
          result = (WTF *)(*a3)(v15, (WTF *)v18);
          if ((_DWORD)result)
          {
            v20 = *v18;
            *v18 = 0;
            v18[1] = v20;
            v21 = v5;
            if (v18 != v5)
            {
              v22 = v16;
              while (1)
              {
                v21 = (WTF **)((char *)v5 + v22);
                v23 = (WTF **)((char *)v5 + v22 - 8);
                if (!(*a3)(v15, (WTF *)v23))
                  break;
                v24 = *v23;
                *v23 = 0;
                v25 = *(WTF **)((char *)v5 + v22);
                *(WTF **)((char *)v5 + v22) = v24;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 1)
                    WTF::fastFree(v25, v19);
                  else
                    --*(_DWORD *)v25;
                }
                v22 -= 8;
                if (!v22)
                {
                  v21 = v5;
                  break;
                }
              }
            }
            v27 = *v15;
            *v15 = 0;
            result = *v21;
            *v21 = v27;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                result = (WTF *)WTF::fastFree(result, v19);
              else
                --*(_DWORD *)result;
            }
          }
          else
          {
            v26 = *v15;
            *v15 = 0;
            *v17 = v26;
          }
          ++v15;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  unsigned int (**v10)(uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *i;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF **v35;
  uint64_t *v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  unsigned int (**v52)(uint64_t, uint64_t);
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v82;

  v82 = a6;
  if (!a6)
    return result;
  v10 = a4;
  v12 = a2;
  v13 = (uint64_t *)result;
  while (a5 > a8 && v82 > a8)
  {
    if (!a5)
      return result;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = &v13[v14];
      result = ((uint64_t (*)(uint64_t *, uint64_t *))*v10)(v12, &v13[v14]);
      if ((result & 1) != 0)
        break;
      ++v15;
      ++v14;
      if (a5 == v15)
        return result;
    }
    v79 = a3;
    if (a5 - v15 >= v82)
    {
      if (a5 - 1 == v15)
      {
        v63 = v13[v15];
        v13[v15] = 0;
        v64 = *v12;
        *v12 = 0;
        v65 = (WTF *)v13[v15];
        v13[v15] = v64;
        if (v65)
        {
          if (*(_DWORD *)v65 == 1)
            WTF::fastFree(v65, v17);
          else
            --*(_DWORD *)v65;
        }
        result = *v12;
        *v12 = v63;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return WTF::fastFree((WTF *)result, v17);
          else
            --*(_DWORD *)result;
        }
        return result;
      }
      v23 = (a5 - v15) / 2;
      v21 = &v13[v23 + v14];
      if (a3 == v12)
      {
        v28 = a3;
      }
      else
      {
        v77 = a7;
        v24 = (uint64_t (*)(uint64_t *, uint64_t *))*v10;
        v25 = a3 - v12;
        a3 = v12;
        do
        {
          v26 = &a3[v25 >> 1];
          v27 = v24(v26, v21);
          if (v27)
            v25 += ~(v25 >> 1);
          else
            v25 >>= 1;
          if (v27)
            a3 = v26 + 1;
        }
        while (v25);
        v28 = v12;
        a7 = v77;
        v10 = a4;
        v23 = (a5 - v15) / 2;
      }
      v19 = a3 - v28;
    }
    else
    {
      if (v82 >= 0)
        v18 = v82;
      else
        v18 = v82 + 1;
      v19 = v18 >> 1;
      a3 = &v12[v18 >> 1];
      if (v16 == v12)
      {
        v21 = v12;
        v22 = v12;
      }
      else
      {
        v74 = v18 >> 1;
        v76 = a7;
        v72 = &v13[v14];
        v20 = ((char *)v12 - (char *)v13 - v14 * 8) >> 3;
        v21 = &v13[v14];
        do
        {
          if ((*a4)((uint64_t)a3, (uint64_t)&v21[v20 >> 1]))
          {
            v20 >>= 1;
          }
          else
          {
            v21 += (v20 >> 1) + 1;
            v20 += ~(v20 >> 1);
          }
        }
        while (v20);
        v19 = v74;
        a7 = v76;
        v22 = v72;
      }
      v23 = v21 - v22;
      v10 = a4;
    }
    v29 = a3;
    if (v21 != v12)
    {
      v29 = v21;
      if (v12 != a3)
      {
        v73 = v23;
        v75 = v19;
        v29 = v21 + 1;
        for (i = v12 + 1; ; ++i)
        {
          v31 = *(v29 - 1);
          *(v29 - 1) = 0;
          v32 = *(i - 1);
          *(i - 1) = 0;
          v33 = (WTF *)*(v29 - 1);
          *(v29 - 1) = v32;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, v17);
            else
              --*(_DWORD *)v33;
          }
          v34 = (WTF *)*(i - 1);
          *(i - 1) = v31;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v17);
            else
              --*(_DWORD *)v34;
          }
          if (i == a3)
            break;
          if (v29 == v12)
            v12 = i;
          ++v29;
        }
        if (v29 == v12)
        {
          v29 = v12;
        }
        else
        {
          v78 = a7;
          v35 = (WTF **)v29;
          v36 = v12;
          do
          {
            while (1)
            {
              v37 = *v35;
              *v35 = 0;
              v38 = *v12;
              *v12 = 0;
              v39 = *v35;
              *v35 = (WTF *)v38;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1)
                  WTF::fastFree(v39, v17);
                else
                  --*(_DWORD *)v39;
              }
              v40 = (WTF *)*v12;
              *v12 = (uint64_t)v37;
              if (v40)
              {
                if (*(_DWORD *)v40 == 1)
                  WTF::fastFree(v40, v17);
                else
                  --*(_DWORD *)v40;
              }
              ++v35;
              if (++v12 == a3)
                break;
              if (v35 == (WTF **)v36)
                v36 = v12;
            }
            v12 = v36;
          }
          while (v35 != (WTF **)v36);
          a7 = v78;
        }
        v10 = a4;
        v23 = v73;
        v19 = v75;
      }
    }
    v41 = a5 - v23 - v15;
    v42 = v82 - v19;
    v43 = v82 + a5 - (v23 + v19) - v15;
    v44 = v19;
    v45 = v23;
    if (v23 + v19 >= v43)
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v29, a3, v79, v10, v41, v82 - v19, a7, a8);
      a3 = v21;
      v42 = v44;
      v41 = v45;
      v79 = v29;
    }
    else
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v16, v21, v29, v10, v23, v19, a7, a8);
      v16 = v29;
    }
    a5 = v41;
    v82 = v42;
    v13 = v16;
    v12 = a3;
    a3 = v79;
    if (!v42)
      return result;
  }
  if (a5 > v82)
  {
    if (v12 == a3)
      return result;
    v46 = 0;
    v47 = 0;
    do
    {
      v48 = v12[v46];
      v12[v46] = 0;
      a7[v46] = v48;
      ++v47;
      ++v46;
    }
    while (&v12[v46] != a3);
    if (!(v46 * 8))
      goto LABEL_132;
    v49 = &a7[v46];
    v50 = a3 - 1;
    while (1)
    {
      if (v12 == v13)
      {
        v66 = 0;
        do
        {
          v67 = v49[v66 - 1];
          v49[v66 - 1] = 0;
          result = v50[v66];
          v50[v66] = v67;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = WTF::fastFree((WTF *)result, a2);
            else
              --*(_DWORD *)result;
          }
          --v66;
        }
        while (&v49[v66] != a7);
        goto LABEL_132;
      }
      v51 = v12 - 1;
      v52 = v10;
      v53 = v49 - 1;
      if ((*v52)((uint64_t)(v49 - 1), (uint64_t)(v12 - 1)))
      {
        v54 = *v51;
        *v51 = 0;
        result = *v50;
        *v50 = v54;
        if (result)
        {
          v10 = a4;
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, a2);
          else
            --*(_DWORD *)result;
          goto LABEL_89;
        }
      }
      else
      {
        v55 = *v53;
        *v53 = 0;
        result = *v50;
        *v50 = v55;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, a2);
          else
            --*(_DWORD *)result;
        }
        v51 = v12;
        --v49;
      }
      v10 = a4;
LABEL_89:
      --v50;
      v12 = v51;
      if (v49 == a7)
        goto LABEL_132;
    }
  }
  if (v13 != v12)
  {
    v56 = 0;
    v47 = 0;
    do
    {
      v57 = v13[v56];
      v13[v56] = 0;
      a7[v56] = v57;
      ++v47;
      ++v56;
    }
    while (&v13[v56] != v12);
    if (!(v56 * 8))
      goto LABEL_132;
    v58 = &a7[v56];
    v59 = (uint64_t)&a7[v56 - 1];
    v60 = a7;
    while (v12 != a3)
    {
      if ((*a4)((uint64_t)v12, (uint64_t)v60))
      {
        v61 = *v12;
        *v12 = 0;
        result = *v13;
        *v13 = v61;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, a2);
          else
            --*(_DWORD *)result;
        }
        ++v12;
      }
      else
      {
        v62 = *v60;
        *v60 = 0;
        result = *v13;
        *v13 = v62;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, a2);
          else
            --*(_DWORD *)result;
        }
        ++v60;
      }
      ++v13;
      if (v58 == v60)
        goto LABEL_132;
    }
    v68 = a7;
    v69 = 0;
    do
    {
      v70 = v60[v69];
      v60[v69] = 0;
      result = v13[v69];
      v13[v69] = v70;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      ++v69;
    }
    while ((uint64_t *)v59 != &v60[v69 - 1]);
    a7 = v68;
LABEL_132:
    if (a7)
    {
      v71 = 0;
      do
      {
        result = a7[v71];
        a7[v71] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, a2);
          else
            --*(_DWORD *)result;
        }
        ++v71;
      }
      while (v71 < v47);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::RenderTableSection::CellStruct>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  WTF *v7;
  uint64_t result;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = (WTF *)(*(_QWORD *)a1 + 32 * a2);
  WTF::VectorMover<false,WebCore::RenderTableSection::CellStruct>::moveOverlapping(v7, (WTF *)(*(_QWORD *)a1 + 32 * v6), (unint64_t)v7 + 32);
  result = WebCore::RenderTableSection::CellStruct::CellStruct((uint64_t)v7, v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

WTF *WTF::VectorMover<false,WebCore::RenderTableSection::CellStruct>::moveOverlapping(WTF *result, WTF *a2, unint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v7;

  v3 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::RenderTableSection::CellStruct>::move(result, a2, a3);
  if (a2 != result)
  {
    v4 = ((a2 - result) & 0xFFFFFFFFFFFFFFE0) + a3 - 32;
    v5 = (uint64_t)a2 - 32;
    do
    {
      WebCore::RenderTableSection::CellStruct::CellStruct(v4, v5);
      result = *(WTF **)v5;
      v7 = v5 + 16 == *(_QWORD *)v5 || result == 0;
      if (!v7)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        result = (WTF *)WTF::fastFree(result, v6);
      }
      v4 -= 32;
      v7 = v5 == (_QWORD)v3;
      v5 -= 32;
    }
    while (!v7);
  }
  return result;
}

void **WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,WebCore::RenderTableCell * const>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 2)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 1;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 8 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::removeWithoutEntryConsistencyCheck(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;

  v2 = *result;
  if (*result)
    v2 += 40 * *(unsigned int *)(v2 - 4);
  if ((_QWORD *)v2 != a2)
  {
    *a2 = -1;
    v3 = a2[3];
    if ((v3 & 0x8000000000000) != 0)
    {
      v13 = result;
      v10 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
        result = v13;
      }
    }
    ++*(_DWORD *)(*result - 16);
    v4 = *result;
    if (*result)
      v5 = *(_DWORD *)(v4 - 12) - 1;
    else
      v5 = -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *result;
    if (*result)
    {
      v7 = 6 * *(_DWORD *)(v6 - 12);
      v8 = *(_DWORD *)(v6 - 4);
      if (v7 < v8 && v8 >= 9)
        return (uint64_t *)WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::rehash(result, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *result;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  _DWORD *v58;
  _DWORD *v59;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 48);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      *((_QWORD *)v12 - 4) = 0;
      *((_QWORD *)v12 - 3) = 0;
      *((_DWORD *)v12 - 4) = 0;
      v12 += 40;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 40 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        v10 = (_DWORD *)*((unsigned int *)v16 + 2);
        if (v17)
          v18 = 0;
        else
          v18 = (_DWORD)v10 == 0;
        if (v18)
        {
          v38 = *(_QWORD *)(v6 + 40 * v13 + 24);
          if ((v38 & 0x8000000000000) != 0)
          {
            v39 = v15;
            v40 = v13;
            v41 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v41);
              WTF::fastFree((WTF *)v41, v10);
            }
            v13 = v40;
            v15 = v39;
          }
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = 9 * (((_DWORD)v10 + ~((_DWORD)v10 << 15)) ^ (((_DWORD)v10 + ~((_DWORD)v10 << 15)) >> 10));
          v25 = v20 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v23 >> 31) ^ v23)
                                         + 95187966
                                         * (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6))
                                                                                                 + ~((v24 ^ (v24 >> 6)) << 11)) >> 16)))) >> 4);
          v26 = 1;
          do
          {
            v27 = v25;
            v10 = (_DWORD *)(v19 + 40 * v25);
            v25 = (v25 + v26++) & v20;
            if (*(_QWORD *)v10)
              v28 = 0;
            else
              v28 = v10[2] == 0;
          }
          while (!v28);
          v29 = v27;
          v30 = v19 + 40 * v27;
          v33 = *(_QWORD *)(v30 + 24);
          v32 = (_QWORD *)(v30 + 24);
          v31 = v33;
          if ((v33 & 0x8000000000000) != 0)
          {
            v56 = (uint64_t *)(v6 + 40 * v13);
            v58 = v10;
            v54 = v15;
            v55 = *a1;
            v53 = v13;
            v45 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
            do
            {
              v46 = __ldaxr(v45);
              v47 = --v46 == 0;
            }
            while (__stlxr(v46, v45));
            v13 = v53;
            v16 = v56;
            if (v47)
            {
              atomic_store(1u, v45);
              WTF::fastFree((WTF *)v45, v10);
              v16 = v56;
              v10 = v58;
              v15 = v54;
              v19 = v55;
              v13 = v53;
            }
          }
          *(_OWORD *)v10 = *(_OWORD *)v16;
          v34 = v6 + 40 * v13;
          *v32 = 0;
          v37 = *(_QWORD *)(v34 + 24);
          v35 = (_QWORD *)(v34 + 24);
          v36 = v37;
          *(_DWORD *)(v19 + 40 * v29 + 16) = *((_DWORD *)v35 - 2);
          if (v37)
          {
            *v32 = v36;
            *v35 = 0;
          }
          *(_BYTE *)(v19 + 40 * v29 + 32) = *(_BYTE *)(v6 + 40 * v13 + 32);
          if ((*v35 & 0x8000000000000) != 0)
          {
            v57 = v16;
            v59 = v10;
            v48 = v15;
            v49 = v13;
            v50 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFLL);
            do
            {
              v51 = __ldaxr(v50);
              v52 = --v51 == 0;
            }
            while (__stlxr(v51, v50));
            v13 = v49;
            if (v52)
            {
              atomic_store(1u, v50);
              WTF::fastFree((WTF *)v50, v10);
              v16 = v57;
              v10 = v59;
              v15 = v48;
              v13 = v49;
            }
          }
          if (v16 == a3)
            v14 = v10;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::inlineSet<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue&>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = a2[2];
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = v10 & ((0xD7862706ELL
              * (unint64_t)(95187966 * (v17 ^ HIWORD(v17))
                                 + 277951225
                                 * (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27))))) >> 4);
  v19 = v8 + 40 * v18;
  v20 = *(_QWORD *)v19;
  result = *(unsigned int *)(v19 + 8);
  if (*(_QWORD *)v19)
    v22 = 0;
  else
    v22 = (_DWORD)result == 0;
  if (!v22)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      if (v20 == v11 && (_DWORD)result == v15)
      {
        if ((v9 & 1) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v19;
        *(_QWORD *)(a4 + 8) = v8 + 40 * v35;
        *(_BYTE *)(a4 + 16) = 0;
        *(_DWORD *)(v19 + 16) = *(_DWORD *)a3;
        result = (uint64_t)WebCore::Color::operator=((unint64_t *)(v19 + 24), (_QWORD *)(a3 + 8));
        *(_BYTE *)(v19 + 32) = *(_BYTE *)(a3 + 16);
        return result;
      }
      if (v20 == -1)
        v32 = v19;
      v18 = (v18 + v33) & v10;
      v19 = v8 + 40 * v18;
      v20 = *(_QWORD *)v19;
      result = *(unsigned int *)(v19 + 8);
      ++v33;
      if (*(_QWORD *)v19)
        v34 = 0;
      else
        v34 = (_DWORD)result == 0;
    }
    while (!v34);
    if (v32)
    {
      *(_QWORD *)(v32 + 24) = 0;
      *(_BYTE *)(v32 + 32) = 0;
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      *(_DWORD *)(v32 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *(_QWORD *)a2;
      v15 = a2[2];
      v19 = v32;
    }
  }
  *(_QWORD *)v19 = v11;
  *(_DWORD *)(v19 + 8) = v15;
  *(_DWORD *)(v19 + 16) = *(_DWORD *)a3;
  v23 = *(_QWORD *)(v19 + 24);
  v24 = *(_QWORD *)(a3 + 8);
  if ((v23 & 0x8000000000000) != 0)
  {
    if ((v24 & 0x8000000000000) != 0)
    {
      v43 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
      v42 = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)&v43, (float *)&v42);
      v23 = *(_QWORD *)(v19 + 24);
      if ((_DWORD)result)
      {
        v36 = *(_QWORD *)(a3 + 8);
        if (HIBYTE(v23) == HIBYTE(v36) && BYTE6(v23) == BYTE6(v36))
          goto LABEL_14;
      }
    }
  }
  else if (v23 == v24 && (v24 & 0x8000000000000) == 0)
  {
    goto LABEL_14;
  }
  if ((v23 & 0x8000000000000) != 0)
  {
    result = v23 & 0xFFFFFFFFFFFFLL;
    do
    {
      v40 = __ldaxr((unsigned int *)result);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)result));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v37 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v19 + 24) = v37;
  if ((v37 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
LABEL_14:
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(a3 + 16);
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_20;
LABEL_35:
    result = (uint64_t)WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::expand(a1, (uint64_t *)v19);
    v19 = result;
    v28 = *a1;
    if (*a1)
      LODWORD(v31) = *(_DWORD *)(v28 - 4);
    else
      LODWORD(v31) = 0;
    goto LABEL_20;
  }
  if (3 * v31 <= 4 * v30)
    goto LABEL_35;
LABEL_20:
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v28 + 40 * v31;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_DWORD *WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v15;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = *(_DWORD *)(a2 + 8);
  v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v4 & ((0xD7862706ELL
             * (unint64_t)(95187966 * (v10 ^ HIWORD(v10))
                                + 277951225
                                * (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27))))) >> 4);
  result = (uint64_t *)(v2 + 40 * v11);
  v12 = *result;
  v13 = *((_DWORD *)result + 2);
  if (*result != *(_QWORD *)a2 || v13 != v8)
  {
    v15 = 1;
    while (v12 || v13)
    {
      v11 = (v11 + v15) & v4;
      result = (uint64_t *)(v2 + 40 * v11);
      v12 = *result;
      v13 = *((_DWORD *)result + 2);
      ++v15;
      if (*result == *(_QWORD *)a2 && v13 == v8)
        return result;
    }
    return (uint64_t *)(v2 + 40 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t *WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = result;
  v3 = *result;
  if (*result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_25;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      v8 = (uint64_t **)(v3 + 16 * v6);
      result = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !result[1])
      {
        *v8 = 0;
        if (*(_DWORD *)result == 1)
          WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
        *v8 = (uint64_t *)-1;
        v9 = v3 + 16 * v6;
        result = *(uint64_t **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (result)
        {
          WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)result);
          result = (uint64_t *)WTF::fastFree(v10, v11);
        }
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *v2;
      if (*v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *v2;
    }
    if (v3)
    {
      v14 = *(_DWORD *)(v3 - 4);
      v15 = *(unsigned int *)(v3 - 12);
      if (v14 >= 9 && 6 * (int)v15 < v14)
      {
        v19 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v15)
            goto LABEL_36;
        }
        else if (3 * v21 > 4 * v15)
        {
LABEL_34:
          v22 = (double)v15;
          v23 = (double)v21;
          v24 = 0.604166667;
          goto LABEL_37;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400)
          goto LABEL_34;
LABEL_36:
        v22 = (double)v15;
        v23 = (double)v21;
        v24 = 0.416666667;
LABEL_37:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::SecureTextTimer>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v25, 0);
        v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          v17 = 0;
          goto LABEL_29;
        }
LABEL_26:
        v17 = *(_DWORD *)(v3 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_25:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_26;
    }
  }
  v17 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_29:
  v18 = v17;
LABEL_30:
  *((_DWORD *)v2 + 3) = 2 * v18;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::SecureTextTimer>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  WebCore::TimerBase *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  WTF **v28;
  WebCore::TimerBase *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  WebCore::TimerBase *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (WTF **)(v19 + 16 * v26);
          v29 = v28[1];
          v28[1] = 0;
          if (v29)
          {
            WebCore::TimerBase::~TimerBase(v29);
            WTF::fastFree(v30, v31);
            v32 = *v28;
            *v28 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 1)
                WTF::fastFree(v32, v10);
              else
                --*(_DWORD *)v32;
            }
          }
          else
          {
            *v28 = 0;
          }
          v33 = *v13;
          *v13 = 0;
          *v28 = v33;
          v34 = v6 + 16 * v11;
          v35 = *(WTF **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v28[1] = v35;
          v36 = *(WebCore::TimerBase **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            WebCore::TimerBase::~TimerBase(v36);
            WTF::fastFree(v37, v38);
          }
          v39 = *v13;
          *v13 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
              WTF::fastFree(v39, v10);
            else
              --*(_DWORD *)v39;
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::TimerBase **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::TimerBase::~TimerBase(v16);
            WTF::fastFree(v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v10);
            else
              --*(_DWORD *)v14;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl *WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::remove(WTF **a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *result;
  int v5;
  unsigned int v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  result = a1[1];
  *a1 = (WTF *)-1;
  a1[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  ++*(_DWORD *)(WebCore::originalTextMap(void)::map - 16);
  if (WebCore::originalTextMap(void)::map)
    v5 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) = v5;
  if (WebCore::originalTextMap(void)::map)
  {
    v6 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 4);
    if (6 * *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) < v6 && v6 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v6 >> 1);
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;

  v2 = WebCore::originalTextMap(void)::map;
  if (WebCore::originalTextMap(void)::map)
  {
    v3 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 4);
    v4 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::originalTextMap(void)::map = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = v2 + 16 * v7;
      v9 = *(WTF **)v8;
      if (*(_QWORD *)v8)
        break;
      v10 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v6);
          v9 = *(WTF **)v8;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      *(_QWORD *)v8 = 0;
      if (!v9)
        goto LABEL_10;
      if (*(_DWORD *)v9 == 1)
      {
LABEL_35:
        WTF::fastFree(v9, v6);
        goto LABEL_10;
      }
      --*(_DWORD *)v9;
LABEL_10:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
    if (v9 == (WTF *)-1)
      goto LABEL_10;
    if (WebCore::originalTextMap(void)::map)
      v11 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 8);
    else
      v11 = 0;
    v12 = ~(*((_QWORD *)v9 + 1) << 32) + *((_QWORD *)v9 + 1);
    v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
    v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
    v15 = v11 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
    v16 = 1;
    do
    {
      v17 = v15;
      v18 = *(_QWORD *)(WebCore::originalTextMap(void)::map + 16 * v15);
      v15 = (v15 + v16++) & v11;
    }
    while (v18);
    v19 = WebCore::originalTextMap(void)::map + 16 * v17;
    v20 = *(WTF::StringImpl **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v6);
        v25 = *(WTF **)v19;
        *(_QWORD *)v19 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
            WTF::fastFree(v25, v6);
          else
            --*(_DWORD *)v25;
        }
        goto LABEL_21;
      }
      *(_DWORD *)v20 -= 2;
    }
    *(_QWORD *)v19 = 0;
LABEL_21:
    v21 = *(WTF **)v8;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)v19 = v21;
    v22 = v2 + 16 * v7;
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v19 + 8) = v23;
    v24 = *(WTF::StringImpl **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v6);
      else
        *(_DWORD *)v24 -= 2;
    }
    v9 = *(WTF **)v8;
    *(_QWORD *)v8 = 0;
    if (!v9)
      goto LABEL_10;
    if (*(_DWORD *)v9 == 1)
      goto LABEL_35;
    --*(_DWORD *)v9;
    goto LABEL_10;
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  uint64_t v9;
  WTF *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
      return 0;
    v4 = *(WTF **)a1;
    v5 = *(unsigned int *)(a1 + 12);
    WTF::tryFastMalloc((WTF *)(32 * a2));
    v7 = v13;
    if (!v13)
      return 0;
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v13;
    if ((_DWORD)v5)
    {
      v9 = 32 * v5;
      v10 = v4;
      do
      {
        v11 = *(_OWORD *)v10;
        v12 = *((_OWORD *)v10 + 1);
        v10 = (WTF *)((char *)v10 + 32);
        *v7 = v11;
        v7[1] = v12;
        v7 += 2;
        v9 -= 32;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v6);
    }
  }
  return 1;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::expand()
{
  int v0;

  if (WebCore::originalTextMap(void)::map && (v0 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 4)) != 0)
    return WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u);
}

WTF *WTF::GenericHashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>::assignToEmpty<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *result;

  v3 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  void *v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  WTF **v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
  for (i = 0; ; v6 = ++i + v9)
  {
    v9 = v6 & v5;
    v10 = *(_QWORD *)(v2 + 16 * v9);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
    }
  }
  if ((_DWORD)v9 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (WTF **)(v2 + 16 * v9);
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v12, v7);
  v14 = v12[1];
  v12[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, v13);
    else
      --*(_DWORD *)v14;
  }
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF **v25;
  WTF *v26;
  uint64_t *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    while (1)
    {
      v16 = (uint64_t **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != (uint64_t *)-1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v17[1]);
          v23 = 0;
          do
          {
            v24 = v22 & v21;
            v22 = ++v23 + v24;
          }
          while (*(_QWORD *)(v20 + 16 * v24));
          v25 = (WTF **)(v20 + 16 * v24);
          v26 = v25[1];
          v25[1] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 != 1)
            {
              --*(_DWORD *)v26;
              goto LABEL_24;
            }
            WTF::fastFree(v26, v10);
            v32 = *v25;
            *v25 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 1)
                WTF::fastFree(v32, v10);
              else
                --*(_DWORD *)v32;
            }
          }
          else
          {
LABEL_24:
            *v25 = 0;
          }
          v27 = *v16;
          *v16 = 0;
          *v25 = (WTF *)v27;
          v28 = v6 + 16 * v13;
          v29 = *(WTF **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v25[1] = v29;
          v30 = *(WTF **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, v10);
            else
              --*(_DWORD *)v30;
          }
          v31 = (WTF *)*v16;
          *v16 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
              WTF::fastFree(v31, v10);
            else
              --*(_DWORD *)v31;
          }
          if (v16 == a3)
            v14 = v25;
          goto LABEL_31;
        }
        v18 = v6 + 16 * v13;
        v19 = *(WTF **)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            WTF::fastFree(v19, v10);
            v17 = *v16;
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
        *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            WTF::fastFree((WTF *)v17, v10);
          else
            --*(_DWORD *)v17;
        }
      }
LABEL_31:
      if (++v13 == v15)
        goto LABEL_44;
    }
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WebCore::RenderTextLineBoxes::createAndAppendLineBox(WebCore::RenderTextLineBoxes *this, WebCore::RenderText *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr, WebCore::RenderText *))(*(_QWORD *)a2 + 688))(&v5, a2);
  if (*(_QWORD *)this)
  {
    v4 = *((_QWORD *)this + 1);
    result = v5;
    *(_QWORD *)(v4 + 64) = v5;
    *(_QWORD *)(result + 56) = v4;
  }
  else
  {
    result = v5;
    *(_QWORD *)this = v5;
  }
  *((_QWORD *)this + 1) = result;
  return result;
}

_QWORD **WebCore::RenderTextLineBoxes::dirtyAll(_QWORD **this)
{
  _QWORD *i;

  for (i = *this; i; i = (_QWORD *)i[8])
    this = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*i + 184))(i);
  return this;
}

uint64_t WebCore::RenderTheme::adjustStyle(uint64_t this, WebCore::RenderStyle *a2, const WebCore::Element *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  const WTF::StringImpl *v22;
  WTF *v23;
  void *v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  const WebCore::Element *v37;
  const char **v38;
  uint64_t v39;
  const char *v40;
  int v41;
  const char *v42;
  const char *v43;
  const char *v44;
  __int16 v45;
  char v46;
  const char *v47;
  const char *v48;
  const char *v49;
  WebCore::ShadowData *v50;
  const char *v51;
  WTF::StringImpl *v52;

  v7 = this;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_27;
  }
  v8 = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = v8 + 4;
  v9 = *((unsigned __int16 *)a3 + 14);
  if ((v9 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)a3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v10 = *((_QWORD *)a3 + 30);
    v11 = *(_DWORD *)(v10 + 12);
    if ((v11 & 0x14001) != 0)
    {
      v12 = 6;
      goto LABEL_21;
    }
    if (v11 == 2)
    {
      v16 = *(_QWORD *)(v10 + 24);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        v12 = 2;
        if (v17)
        {
          if ((*(_WORD *)(v17 + 232) & 0x2000) != 0)
            v12 = 30;
          else
            v12 = 2;
        }
      }
      else
      {
        v12 = 2;
      }
      goto LABEL_21;
    }
    if (v11 < 0x2000)
    {
      if (v11 <= 511)
      {
        if (v11 != 8 && v11 != 16)
        {
          if (v11 == 4)
          {
            v12 = 21;
            goto LABEL_21;
          }
          goto LABEL_195;
        }
      }
      else
      {
        if (v11 == 4096)
        {
          v12 = 3;
          goto LABEL_21;
        }
        if (v11 != 512)
          goto LABEL_195;
      }
LABEL_148:
      v12 = 10;
      goto LABEL_21;
    }
    if (v11 >= 0x40000)
    {
      if (v11 == 0x40000 || v11 == 0x100000)
        goto LABEL_148;
    }
    else
    {
      if (v11 == 0x8000)
      {
        v12 = 15;
        goto LABEL_21;
      }
      if (v11 == 0x2000)
      {
        v45 = (unsigned __int16)*((_DWORD *)a2 + 11) >> 13;
        v46 = 2;
        switch((unsigned __int16)*((_DWORD *)a2 + 11) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_191;
          case 3:
          case 5:
            LOBYTE(v45) = 3;
            goto LABEL_191;
          case 4:
            goto LABEL_192;
          default:
            LOBYTE(v45) = 0;
LABEL_191:
            v46 = v45;
LABEL_192:
            if ((v46 & 6) == 2)
              v12 = 14;
            else
              v12 = 13;
            break;
        }
LABEL_21:
        v18 = v8 + 2;
        if (v18)
        {
LABEL_22:
          *((_DWORD *)a3 + 6) = v18;
          goto LABEL_23;
        }
        goto LABEL_230;
      }
    }
LABEL_195:
    if ((v11 & 0x2A8C20) != 0)
      v12 = 20;
    else
      v12 = 0;
    goto LABEL_21;
  }
  v13 = v8 + 2;
  if (v13)
  {
    *((_DWORD *)a3 + 6) = v13;
  }
  else if ((*((_WORD *)a3 + 15) & 0x400) == 0)
  {
    this = WebCore::Node::removedLastRef(a3);
    v9 = *((unsigned __int16 *)a3 + 14);
  }
  if ((v9 & 0x10) == 0)
  {
    v15 = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v15 + 2;
LABEL_76:
    v30 = v9 & 0x10;
    if (v15)
    {
      *((_DWORD *)a3 + 6) = v15;
    }
    else if ((*((_WORD *)a3 + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef(a3);
      v9 = *((unsigned __int16 *)a3 + 14);
      v30 = v9 & 0x10;
    }
    if (v30)
    {
      v31 = *(_QWORD *)(*((_QWORD *)a3 + 12) + 24);
      if (v31 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
      {
        v12 = 19;
        goto LABEL_23;
      }
      if (v31 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
      {
        v12 = 11;
        goto LABEL_23;
      }
      if (v31 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
      {
        v12 = 12;
        goto LABEL_23;
      }
      if ((~v9 & 0x110) != 0 && v31 == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        v12 = 17;
        goto LABEL_23;
      }
    }
    v32 = **((_QWORD **)a3 + 5);
    if (!v32 || (*(_WORD *)(v32 + 28) & 0x80) == 0 || *(_BYTE *)(v32 + 193))
      goto LABEL_86;
    v33 = *((_QWORD *)a3 + 13);
    if (v33
      && ((v34 = *(_DWORD *)(v33 + 4), (v34 & 1) != 0)
        ? (v35 = *(_QWORD *)(v33 + 40), LODWORD(v36) = *(_DWORD *)(v33 + 52))
        : (v35 = v33 + 32, LODWORD(v36) = v34 >> 5),
          (_DWORD)v36))
    {
      v36 = v36;
      v38 = (const char **)(v35 + 8);
      while (1)
      {
        v39 = (uint64_t)*(v38 - 1);
        if (v39 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          break;
        }
        v38 += 2;
        if (!--v36)
        {
          v38 = (const char **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v38 = (const char **)MEMORY[0x1E0CBF2F8];
    }
    {
      v51 = "-webkit-list-button";
      v52 = (WTF::StringImpl *)20;
      this = (uint64_t)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitListButton(void)::webkitListButton, (uint64_t)&v51);
    }
    v40 = *v38;
    if (*v38 == (const char *)WebCore::UserAgentParts::webkitListButton(void)::webkitListButton)
    {
      v12 = 23;
      goto LABEL_23;
    }
    {
      v51 = "-webkit-search-cancel-button";
      v52 = (WTF::StringImpl *)29;
      this = (uint64_t)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitSearchCancelButton(void)::webkitSearchCancelButton, (uint64_t)&v51);
      v40 = *v38;
    }
    if (v40 == (const char *)WebCore::UserAgentParts::webkitSearchCancelButton(void)::webkitSearchCancelButton)
    {
      v12 = 27;
      goto LABEL_23;
    }
    v41 = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v41 + 2;
    if ((*((_WORD *)a3 + 14) & 0x10) != 0)
    {
      this = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1184))(a3);
      if ((this & 1) != 0)
      {
        if (*((_BYTE *)a3 + 112))
        {
          {
            v51 = "-webkit-search-decoration";
            v52 = (WTF::StringImpl *)26;
            this = (uint64_t)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitSearchDecoration(void)::webkitSearchDecoration, (uint64_t)&v51);
          }
          v47 = *v38;
          if (*v38 == (const char *)WebCore::UserAgentParts::webkitSearchDecoration(void)::webkitSearchDecoration)
          {
            v12 = 24;
          }
          else
          {
            {
              v48 = (const char *)WebCore::UserAgentParts::webkitSearchResultsDecoration(void)::webkitSearchResultsDecoration;
            }
            else
            {
              this = WTF::AtomStringImpl::add();
              v48 = v51;
              WebCore::UserAgentParts::webkitSearchResultsDecoration(void)::webkitSearchResultsDecoration = (uint64_t)v51;
              v47 = *v38;
            }
            if (v47 == v48)
            {
              v12 = 25;
            }
            else
            {
              {
                v49 = (const char *)WebCore::UserAgentParts::webkitSearchResultsButton(void)::webkitSearchResultsButton;
              }
              else
              {
                this = WTF::AtomStringImpl::add();
                v49 = v51;
                WebCore::UserAgentParts::webkitSearchResultsButton(void)::webkitSearchResultsButton = (uint64_t)v51;
                v47 = *v38;
              }
              if (v47 != v49)
              {
                v41 = *((_DWORD *)a3 + 6) - 2;
                if (*((_DWORD *)a3 + 6) != 2)
                  goto LABEL_169;
                goto LABEL_222;
              }
              v12 = 26;
            }
          }
        }
        else
        {
          v12 = 0;
        }
        v18 = *((_DWORD *)a3 + 6) - 2;
        if (*((_DWORD *)a3 + 6) != 2)
          goto LABEL_22;
LABEL_230:
        if ((*((_WORD *)a3 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(a3);
        goto LABEL_23;
      }
      v41 = *((_DWORD *)a3 + 6) - 2;
    }
    if (v41)
    {
LABEL_169:
      *((_DWORD *)a3 + 6) = v41;
LABEL_170:
      {
        v51 = "-webkit-slider-thumb";
        v52 = (WTF::StringImpl *)21;
        this = (uint64_t)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitSliderThumb(void)::webkitSliderThumb, (uint64_t)&v51);
      }
      v42 = *v38;
      if (*v38 == (const char *)WebCore::UserAgentParts::webkitSliderThumb(void)::webkitSliderThumb)
      {
        v12 = 28;
        goto LABEL_23;
      }
      {
        v51 = "-webkit-inner-spin-button";
        v52 = (WTF::StringImpl *)26;
        this = (uint64_t)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitInnerSpinButton(void)::webkitInnerSpinButton, (uint64_t)&v51);
        v42 = *v38;
      }
      if (v42 == (const char *)WebCore::UserAgentParts::webkitInnerSpinButton(void)::webkitInnerSpinButton)
      {
        v12 = 22;
        goto LABEL_23;
      }
      {
        v43 = (const char *)WebCore::UserAgentParts::thumb(void)::thumb;
      }
      else
      {
        this = WTF::AtomStringImpl::add();
        v43 = v51;
        WebCore::UserAgentParts::thumb(void)::thumb = (uint64_t)v51;
        v42 = *v38;
      }
      if (v42 == v43)
      {
        v12 = 31;
        goto LABEL_23;
      }
      {
        v44 = (const char *)WebCore::UserAgentParts::track(void)::track;
      }
      else
      {
        this = WTF::AtomStringImpl::add();
        v44 = v51;
        WebCore::UserAgentParts::track(void)::track = (uint64_t)v51;
        v42 = *v38;
      }
      if (v42 == v44)
      {
        v12 = 32;
        goto LABEL_23;
      }
LABEL_86:
      v12 = 0;
      goto LABEL_23;
    }
LABEL_222:
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef(a3);
    goto LABEL_170;
  }
  v14 = *(_QWORD *)(*((_QWORD *)a3 + 12) + 24);
  if (v14 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
  {
    v12 = 6;
    goto LABEL_23;
  }
  v15 = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = v15 + 2;
  if (v14 != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    goto LABEL_76;
  v51 = 0;
  this = (uint64_t)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v51);
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef(a3);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  v12 = 10;
LABEL_23:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef(a3);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  v19 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148) >> 14) & 0x7F;
  if (v19 == v12)
    goto LABEL_28;
  if (v19 - 1 < 5)
  {
LABEL_27:
    this = WebCore::RenderStyle::setUsedAppearance((uint64_t)a2, v12);
LABEL_28:
    LOBYTE(v19) = v12;
    goto LABEL_29;
  }
  if (v19 <= 0x13)
  {
    if (((1 << v19) & 0x8BF00) != 0)
      goto LABEL_27;
    if (v19 == 6)
    {
      if ((v12 & 0xFE) == 4)
      {
        LOBYTE(v19) = 6;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
  }
  if ((*((_WORD *)a3 + 14) & 0x10) != 0)
  {
    if (*(_QWORD *)(*((_QWORD *)a3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      v37 = a3;
    else
      v37 = 0;
  }
  else
  {
    v37 = 0;
  }
  switch(v19)
  {
    case 0x14u:
      if (v37 && *(_DWORD *)(*((_QWORD *)v37 + 30) + 12) == 0x8000)
      {
        LOBYTE(v19) = 20;
        goto LABEL_30;
      }
      goto LABEL_27;
    case 0xEu:
      if (v37 && *(_DWORD *)(*((_QWORD *)v37 + 30) + 12) == 0x2000)
      {
        LOBYTE(v19) = 14;
        goto LABEL_30;
      }
      goto LABEL_27;
    case 0x10u:
      if (v12 == 6)
      {
        v12 = 6;
      }
      else
      {
        if (v12 || v37)
          goto LABEL_27;
        v12 = 0;
      }
      LOBYTE(v19) = 16;
      goto LABEL_30;
  }
LABEL_29:
  if (!(_BYTE)v19)
    return this;
LABEL_30:
  v20 = *((_QWORD *)a2 + 2) & 0x1FLL;
  if (v20 <= 0xD && ((0x3FF5u >> v20) & 1) != 0)
    *((_QWORD *)a2 + 2) = qword_1969FD2A8[*((_QWORD *)a2 + 2) & 0x1FLL] | *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFE0;
  if (a4)
  {
    this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::RenderStyle *))(*(_QWORD *)v7 + 152))(v7, a2, a4);
    if ((_DWORD)this)
    {
      if (v19 == 9)
        v21 = 10;
      else
        v21 = 0;
      LOBYTE(v19) = v21;
LABEL_49:
      this = WebCore::RenderStyle::setUsedAppearance((uint64_t)a2, v21);
      goto LABEL_50;
    }
  }
  if (v19 != 15)
    goto LABEL_42;
  this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *))(*(_QWORD *)v7 + 224))(v7, a2);
  if ((_DWORD)this)
  {
    LOBYTE(v19) = 20;
    this = WebCore::RenderStyle::setUsedAppearance((uint64_t)a2, 20);
LABEL_42:
    if (a4)
      goto LABEL_50;
    goto LABEL_43;
  }
  LOBYTE(v19) = 15;
  if (!a4)
  {
LABEL_43:
    if (v12 || v19 == 16)
      goto LABEL_50;
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    this = WebCore::RenderStyle::borderAndBackgroundEqual(a2, (const WebCore::RenderStyle *)&WebCore::RenderStyle::defaultStyle(void)::style);
    if ((this & 1) != 0)
      goto LABEL_50;
    v21 = 0;
    goto LABEL_49;
  }
LABEL_50:
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148) & 0x1FC000) != 0)
  {
    this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *))(*(_QWORD *)v7 + 208))(v7, a2);
    if ((this & 1) == 0)
    {
      v50 = 0;
      WebCore::RenderStyle::setBoxShadow((uint64_t)a2, (unsigned int **)&v50, 0);
      this = (uint64_t)v50;
      if (v50)
      {
        WebCore::ShadowData::~ShadowData(v50);
        this = WTF::fastFree(v23, v24);
      }
    }
    switch((char)v19)
    {
      case 2:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 672))(v7, a2, a3);
        break;
      case 3:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 688))(v7, a2, a3);
        break;
      case 4:
      case 5:
      case 6:
      case 7:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 704))(v7, a2, a3);
        break;
      case 9:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 800))(v7, a2, a3);
        break;
      case 10:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 824))(v7, a2, a3);
        break;
      case 11:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 856))(v7, a2, a3);
        break;
      case 12:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 912))(v7, a2, a3);
        break;
      case 13:
      case 14:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 928))(v7, a2, a3);
        break;
      case 15:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 960))(v7, a2, a3);
        break;
      case 16:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 872))(v7, a2, a3);
        break;
      case 19:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 776))(v7, a2, a3);
        break;
      case 20:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 752))(v7, a2, a3);
        break;
      case 21:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 720))(v7, a2, a3);
        break;
      case 22:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 744))(v7, a2, a3);
        break;
      case 23:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 896))(v7, a2, a3);
        break;
      case 24:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 1000))(v7, a2, a3);
        break;
      case 25:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 1016))(v7, a2, a3);
        break;
      case 26:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 1032))(v7, a2, a3);
        break;
      case 27:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 984))(v7, a2, a3);
        break;
      case 28:
      case 29:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 944))(v7, a2, a3);
        break;
      case 30:
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)v7 + 1048))(v7, a2, a3);
        break;
      case 31:
      case 32:
        LOBYTE(v51) = 1;
        v25 = WebCore::GridPosition::gMaxPositionForTesting;
        if (!byte_1EE2F9580)
          v25 = 1000000;
        if (-v25 > 1)
          v26 = -v25;
        else
          v26 = 1;
        if (v25 <= 1)
          v26 = v25;
        HIDWORD(v51) = v26;
        v27 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          *(_DWORD *)v27 += 2;
        v52 = v27;
        WebCore::RenderStyle::setGridItemRowStart(a2, (const WebCore::GridPosition *)&v51, v22);
        WebCore::RenderStyle::setGridItemColumnStart(a2, (const WebCore::GridPosition *)&v51, v28);
        this = (uint64_t)v52;
        v52 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v29);
          else
            *(_DWORD *)this -= 2;
        }
        break;
      default:
        return this;
    }
  }
  return this;
}

uint64_t WebCore::RenderTheme::createControlPart@<X0>(const WebCore::RenderObject *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  void (**v6)(WebCore::ToggleButtonPart *__hidden);
  void (**v7)(WebCore::SwitchThumbPart *__hidden);

  if ((*((_BYTE *)a1 + 45) & 2) != 0)
    a1 = *(const WebCore::RenderObject **)(*((_QWORD *)a1 + 4) + 8);
  result = 0;
  v5 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 148) >> 14) & 0x7F;
  switch(v5)
  {
    case 2:
    case 3:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v5;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439580;
      goto LABEL_21;
    case 4:
    case 5:
    case 6:
    case 7:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v5;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E34395A8;
      goto LABEL_21;
    case 8:
    case 19:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v5;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439648;
      goto LABEL_21;
    case 9:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 9;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E34395D0;
      goto LABEL_21;
    case 10:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 10;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E34395F8;
      goto LABEL_21;
    case 11:
      result = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 11;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = off_1E3412FC0;
      *(_BYTE *)(result + 32) = 2;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      goto LABEL_16;
    case 12:
      result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 12;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = off_1E3412FE8;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      break;
    case 13:
    case 14:
      result = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v5;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = off_1E3413010;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_QWORD *)(result + 64) = 0;
      break;
    case 15:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 15;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439620;
      goto LABEL_21;
    case 16:
      result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 16;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = off_1E3412C98;
      *(_WORD *)(result + 32) = 0;
LABEL_16:
      *(_QWORD *)(result + 40) = 0;
      break;
    case 20:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 20;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439670;
      goto LABEL_21;
    case 21:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 21;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439698;
      goto LABEL_21;
    case 22:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 22;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E34396C0;
      goto LABEL_21;
    case 25:
    case 26:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v5;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E34396E8;
      goto LABEL_21;
    case 27:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 27;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439710;
      goto LABEL_21;
    case 28:
    case 29:
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v5;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v6 = off_1E3439738;
LABEL_21:
      *(_QWORD *)result = v6;
      break;
    case 31:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 31;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v7 = off_1E3439760;
      goto LABEL_25;
    case 32:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 32;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v7 = off_1E3439788;
LABEL_25:
      *(_QWORD *)result = v7;
      *(_BYTE *)(result + 32) = 0;
      *(_DWORD *)(result + 36) = 0;
      break;
    default:
      break;
  }
  *a2 = result;
  return result;
}

void WebCore::RenderTheme::updateControlPartForRenderer(WebCore::RenderTheme *this, WebCore::ControlPart *a2, WebCore::SwitchThumbPart **a3)
{
  int v3;

  v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 == 11)
  {
    if (*((_BYTE *)a3 + 46) == 23)
    {
      WebCore::updateMeterPartForRenderer(a2, (WebCore::MeterPart *)a3, (const WebCore::RenderMeter *)a3);
      return;
    }
    goto LABEL_16;
  }
  if (v3 == 12)
  {
    if (*((_BYTE *)a3 + 46) == 28)
    {
      *((_QWORD *)a2 + 4) = a3[31];
      *((_QWORD *)a2 + 5) = a3[32];
      return;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1964692BCLL);
  }
  if ((v3 - 13) <= 1)
  {
    WebCore::updateSliderTrackPartForRenderer(a2, (WebCore::SliderTrackPart *)a3, (const WebCore::RenderObject *)a3);
  }
  else if (v3 == 31 || v3 == 32)
  {
    WebCore::updateSwitchThumbPartForRenderer((uint64_t)a2, a3[3], (const WebCore::RenderObject *)*((unsigned __int8 *)a3 + 45));
  }
  else if (v3 == 16)
  {
    WebCore::updateApplePayButtonPartForRenderer(a2, (WebCore::ApplePayButtonPart *)a3, (const WebCore::RenderObject *)a3);
  }
}

void WebCore::updateMeterPartForRenderer(WebCore *this, WebCore::MeterPart *a2, const WebCore::RenderMeter *a3)
{
  WebCore::HTMLMeterElement *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (WebCore::HTMLMeterElement *)WebCore::RenderMeter::meterElement(a2);
  WebCore::HTMLMeterElement::low(v4);
  v6 = v5;
  WebCore::HTMLMeterElement::high(v4);
  v8 = v7;
  WebCore::HTMLMeterElement::value(v4);
  v10 = v9;
  WebCore::HTMLMeterElement::optimum(v4);
  if (v11 < v6)
  {
    if (v10 > v6)
    {
      if (v10 > v8)
      {
LABEL_4:
        v12 = 2;
        goto LABEL_12;
      }
LABEL_8:
      v12 = 1;
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 < v11)
  {
    if (v8 > v10)
    {
      if (v6 > v10)
        goto LABEL_4;
      goto LABEL_8;
    }
LABEL_9:
    v12 = 0;
    goto LABEL_12;
  }
  v12 = v6 > v10;
  if (v10 > v8)
    v12 = 1;
LABEL_12:
  *((_BYTE *)this + 32) = v12;
  WebCore::HTMLMeterElement::value(v4);
  *((_QWORD *)this + 5) = v13;
  *((double *)this + 6) = WebCore::HTMLMeterElement::min(v4);
  WebCore::HTMLMeterElement::max(v4);
  *((_QWORD *)this + 7) = v14;
}

double WebCore::updateSliderTrackPartForRenderer(WebCore *this, WebCore::SliderTrackPart *a2, const WebCore::RenderObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::RenderObject *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const WebCore::HTMLOptionElement *v17;
  WebCore::Node *v18;
  WTF *v19;
  double result;
  double v21;
  double v22;
  double v23;
  double v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  double v27;
  double v28;
  WTF::StringImpl *v29;
  int v30;
  double v31;
  WTF::StringImpl *v32;
  const WebCore::HTMLOptionElement *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t v36;
  double v37;

  if ((*((_BYTE *)a2 + 45) & 1) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196469584);
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 584))(*(_QWORD *)(v5 + 240));
  if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = 0;
LABEL_21:
    v9 = 0;
    goto LABEL_13;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196469660);
  }
  v7 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 8);
  if (*(_BYTE *)(v7 + 8) == 11)
  {
    v8 = 0;
  }
  else if (*(_BYTE *)(v7 + 10))
  {
    v8 = (int)*(float *)(v7 + 4);
  }
  else
  {
    v8 = *(_DWORD *)(v7 + 4);
  }
  if (*(_BYTE *)(v7 + 16) == 11)
    goto LABEL_21;
  if (*(_BYTE *)(v7 + 18))
    v9 = (int)*(float *)(v7 + 12);
  else
    v9 = *(unsigned int *)(v7 + 12);
LABEL_13:
  v10 = (WebCore::RenderObject *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 592))(*(_QWORD *)(v5 + 240))
                                            + 64) & 0xFFFFFFFFFFFFLL);
  if (v10)
  {
    if ((*((_BYTE *)v10 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196469680);
    }
    v11 = WebCore::RenderObject::absoluteBoundingBoxRect(v10, 0, 0);
    v13 = v12;
    v14 = WebCore::RenderObject::absoluteBoundingBoxRect(a2, 0, 0);
    v15 = (v11 - v14);
    v16 = (v11 - (v14 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000;
  }
  else
  {
    v13 = 0;
    v16 = 0;
    v15 = 0;
  }
  v36 = 0;
  v37 = 0.0;
  WebCore::HTMLInputElement::dataList(v5, &v35);
  v18 = v35;
  if (v35)
  {
    WebCore::HTMLInputElement::minimum((WebCore::HTMLInputElement *)v5);
    v22 = v21;
    WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)v5);
    v24 = v23;
    v34 = v18;
    v26 = WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first((uint64_t *)&v34, v25);
    v32 = v18;
    v33 = (const WebCore::HTMLOptionElement *)v26;
    if (v26)
    {
      v17 = (const WebCore::HTMLOptionElement *)v26;
      v27 = v24 - v22;
      do
      {
        v28 = COERCE_DOUBLE(WebCore::HTMLInputElement::listOptionValueAsDouble((WebCore::InputType **)v5, v17));
        if ((_BYTE)v29)
        {
          v31 = (v28 - v22) / v27;
          v30 = HIDWORD(v37);
          if (HIDWORD(v37) == LODWORD(v37))
          {
            WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,double &>((uint64_t)&v36, (unint64_t)&v31);
          }
          else
          {
            *(double *)(v36 + 8 * HIDWORD(v37)) = (v28 - v22) / v27;
            HIDWORD(v37) = v30 + 1;
          }
        }
        WebCore::FilteredElementDescendantIterator<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::operator++(&v32, v29);
        v17 = v33;
      }
      while (v33);
    }
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v17);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  *((_QWORD *)this + 4) = v8 | (unint64_t)(v9 << 32);
  *((_QWORD *)this + 5) = v15 | v16;
  *((_QWORD *)this + 6) = v13;
  v19 = (WTF *)*((_QWORD *)this + 7);
  if (v19)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v19, v17);
  }
  *((_QWORD *)this + 7) = v36;
  result = v37;
  *((double *)this + 8) = v37;
  return result;
}

uint64_t WebCore::updateSwitchThumbPartForRenderer(uint64_t this, WebCore::SwitchThumbPart *a2, const WebCore::RenderObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (**v9)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v10;
  double v11;
  double v12;
  double v13;
  float v14;

  v3 = this;
  v4 = **(_QWORD **)(*((_QWORD *)a2 + 1) + 40);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 200);
    if (v6)
      v6 = *(_QWORD *)(v6 + 8);
  }
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964697DCLL);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (*(_DWORD *)(v7 + 12) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1964697FCLL);
  }
  if (*(_BYTE *)(v7 + 36))
    v8 = *(_BYTE *)(v7 + 41) != 0;
  else
    v8 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 230) & 1;
  *(_BYTE *)(this + 32) = v8;
  if (*(double *)(v7 + 48) == 0.0)
  {
    v14 = 1.0;
  }
  else
  {
    {
      v9 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      byte_1ECE88AB8 = 0;
      unk_1ECE88AC0 = 0u;
      unk_1ECE88AD0 = 0u;
      v9 = &off_1E335BC30;
      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      unk_1ECE88AB0 = 0;
    }
    v10 = (WTF::MonotonicTime *)((uint64_t (*)(uint64_t *))v9[63])(&WebCore::RenderTheme::singleton(void)::theme);
    v12 = v11;
    this = WTF::MonotonicTime::now(v10);
    v14 = (v13 - *(double *)(v7 + 48)) / v12;
    if (v14 > 1.0)
      v14 = 1.0;
  }
  *(float *)(v3 + 36) = v14;
  return this;
}

WTF::StringImpl *WebCore::updateApplePayButtonPartForRenderer(WebCore *this, WebCore::ApplePayButtonPart *a2, const WebCore::RenderObject *a3)
{
  WebCore::ApplePayButtonPart *v3;
  int *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  int v10;
  int v11;
  WTF::StringImpl *v12;

  v3 = a2;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
    v3 = *(WebCore::ApplePayButtonPart **)(*((_QWORD *)a2 + 4) + 8);
  v5 = *(int **)(*((_QWORD *)v3 + 14) + 176);
  if (v5)
  {
    v6 = v5[1];
    *v5 += 2;
    if (v6)
      goto LABEL_8;
    WTF::defaultLanguage();
    v7 = v12;
    if (*v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
    else
      *v5 -= 2;
  }
  else
  {
    WTF::defaultLanguage();
    v7 = v12;
  }
  v5 = (int *)v7;
LABEL_8:
  v8 = *(_QWORD *)(*((_QWORD *)v3 + 11) + 40);
  *((_BYTE *)this + 32) = *(_DWORD *)(v8 + 636) >> 28;
  *((_BYTE *)this + 33) = (*(_DWORD *)(v8 + 636) >> 26) & 3;
  if (v5)
    *v5 += 4;
  result = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      if (!v5)
        return result;
      goto LABEL_14;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v5)
    return result;
LABEL_14:
  v10 = *v5 - 2;
  if (*v5 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
    v10 = *v5;
  }
  else
  {
    *v5 = v10;
  }
  v11 = v10 - 2;
  if (!v11)
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  *v5 = v11;
  return result;
}

uint64_t WebCore::RenderTheme::extractControlStyleStatesForRendererInternal(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  const WebCore::RenderObject *v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  WebCore::Node *v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  int isFocusedAndActive;
  const WebCore::RenderObject *v21;
  uint64_t v22;
  const WebCore::RenderObject *v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  void *v28;
  char v29;
  const WebCore::RenderObject *v30;
  const WebCore::RenderObject *v31;
  uint64_t v32;
  _WORD *v33;
  char v34;
  unsigned __int16 *v35;
  uint64_t v36;
  void *v37;
  int v38;
  int v40;
  void *v41;
  char v42;
  _BOOL4 isUserActionElementActive;
  BOOL v44;
  int v45;
  WebCore::Node *v46;
  uint64_t v47;
  WebCore::Node *v48;

  v2 = a2;
  v4 = *((_BYTE *)a2 + 45);
  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 864))(v5) & 1) != 0)
        {
          if ((*(_BYTE *)(v5 + 54) & 2) != 0
            && WebCore::Element::isUserActionElementHovered((WebCore::Element *)v5)
            && *(_DWORD *)(v5 + 140))
          {
            goto LABEL_52;
          }
LABEL_8:
          v7 = 0;
          goto LABEL_9;
        }
        v4 = *((_BYTE *)v2 + 45);
      }
    }
  }
  if ((v4 & 1) != 0)
    goto LABEL_8;
  v6 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
  if (!v6
    || (*(_WORD *)(v6 + 28) & 8) == 0
    || (*(_BYTE *)(v6 + 54) & 2) == 0
    || !WebCore::Element::isUserActionElementHovered((WebCore::Element *)v6))
  {
    goto LABEL_8;
  }
LABEL_52:
  if (WebCore::RenderTheme::isSpinUpButtonPartHovered(*((WebCore::RenderTheme **)v2 + 3), (const WebCore::RenderObject *)*((unsigned __int8 *)v2 + 45)))v7 = 257;
  else
    v7 = 1;
LABEL_9:
  if ((*((_BYTE *)v2 + 45) & 1) == 0)
  {
    v8 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
    if (v8)
    {
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
      {
        v9 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v9 + 2;
        if ((*(_BYTE *)(v8 + 54) & 2) != 0)
        {
          isUserActionElementActive = WebCore::Element::isUserActionElementActive((WebCore::Element *)v8);
          v44 = isUserActionElementActive;
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
            {
              if (!isUserActionElementActive)
                goto LABEL_15;
            }
            else
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
              if (!v44)
                goto LABEL_15;
            }
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
            if (!isUserActionElementActive)
              goto LABEL_15;
          }
          if (WebCore::RenderTheme::isSpinUpButtonPartPressed(*((WebCore::RenderTheme **)v2 + 3), (const WebCore::RenderObject *)*((unsigned __int8 *)v2 + 45)))v45 = 258;
          else
            v45 = 2;
          v7 |= v45;
        }
        else if (v9)
        {
          *(_DWORD *)(v8 + 24) = v9;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
      }
    }
  }
LABEL_15:
  v10 = *((_BYTE *)v2 + 45);
  if ((v10 & 1) != 0)
    goto LABEL_17;
  v11 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
  if (!v11 || (*(_WORD *)(v11 + 28) & 8) == 0)
    goto LABEL_17;
  *(_DWORD *)(v11 + 24) += 6;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11) & 1) != 0)
  {
    WebCore::SliderThumbElement::hostInput(v11, &v48);
    v17 = v48;
    v48 = 0;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        v46 = v48;
        v48 = 0;
        if (v46)
        {
          if (*((_DWORD *)v46 + 6) == 2)
          {
            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v46, a2);
          }
          else
          {
            *((_DWORD *)v46 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      v17 = (WebCore::Node *)v11;
      if ((*(_WORD *)(v11 + 30) & 0x400) != 0)
        goto LABEL_38;
      WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    v17 = (WebCore::Node *)v11;
  }
LABEL_38:
  v18 = *(_QWORD *)(*((_QWORD *)v17 + 5) + 8);
  v19 = *(_QWORD *)(v18 + 528);
  if (v19 && v17 == *(WebCore::Node **)(v18 + 1248) && (v47 = *(_QWORD *)(v19 + 8)) != 0)
    isFocusedAndActive = WebCore::FrameSelection::isFocusedAndActive(*(WebCore::FrameSelection **)(*(_QWORD *)(v47 + 296)
                                                                                                 + 3064));
  else
    isFocusedAndActive = 0;
  if (*((_DWORD *)v17 + 6) == 2)
  {
    if ((*((_WORD *)v17 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v17, a2);
  }
  else
  {
    *((_DWORD *)v17 + 6) -= 2;
  }
  if (*(_DWORD *)(v11 + 24) != 2)
  {
    *(_DWORD *)(v11 + 24) -= 2;
    goto LABEL_45;
  }
  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
LABEL_45:
    v10 = *((_BYTE *)v2 + 45);
    if ((isFocusedAndActive & 1) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
  v10 = *((_BYTE *)v2 + 45);
  if (!isFocusedAndActive)
    goto LABEL_17;
LABEL_46:
  v21 = v2;
  if ((v10 & 2) != 0)
    v21 = *(const WebCore::RenderObject **)(*((_QWORD *)v2 + 4) + 8);
  v7 |= (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v21 + 11) + 16) + 52) >> 2) & 4;
LABEL_17:
  if ((v10 & 1) == 0)
  {
    v12 = *(WebCore::Node **)(*((_QWORD *)v2 + 3) + 8);
    if (v12)
    {
      if ((*((_WORD *)v12 + 14) & 8) != 0)
      {
        *((_DWORD *)v12 + 6) += 2;
        v13 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v12 + 960))(v12);
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, a2);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
        if ((v13 & 1) == 0)
          v7 |= 8u;
      }
    }
  }
  if ((*((_BYTE *)v2 + 45) & 1) == 0)
  {
    v14 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
    if (v14)
    {
      if ((*(_WORD *)(v14 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v15 = *(_DWORD *)(v14 + 24);
        *(_DWORD *)(v14 + 24) = v15 + 2;
        if ((*(_WORD *)(v14 + 230) & 1) != 0)
        {
          v16 = *(_DWORD *)(*(_QWORD *)(v14 + 240) + 12) & 0x1002;
          if (v15)
          {
            *(_DWORD *)(v14 + 24) = v15;
          }
          else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
          }
          if (v16)
            v7 |= 0x10u;
        }
        else if (v15)
        {
          *(_DWORD *)(v14 + 24) = v15;
        }
        else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
        }
      }
    }
  }
  v22 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 72)
                 + 26) & 1) != 0)
  {
    v23 = v2;
    if ((*((_BYTE *)v2 + 45) & 2) != 0)
      v23 = *(const WebCore::RenderObject **)(*((_QWORD *)v2 + 4) + 8);
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 11) + 32) + 148) & 0x1FC000) == 0x1C000)
      v7 |= 0x20u;
    v7 |= 0x40u;
  }
  if ((*((_BYTE *)v2 + 45) & 1) == 0
    && (*(_WORD *)(v22 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v24 = *(_DWORD *)(v22 + 24);
    *(_DWORD *)(v22 + 24) = v24 + 2;
    v25 = *(_DWORD **)(v22 + 240);
    if (v25[3] == 2)
    {
      v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 808))(v25);
      v42 = v40;
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) != 0)
        {
          if (!v40)
            goto LABEL_69;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v22, v41);
          if ((v42 & 1) == 0)
            goto LABEL_69;
        }
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
        if ((v40 & 1) == 0)
          goto LABEL_69;
      }
      v7 |= 0x80u;
      goto LABEL_69;
    }
    if (v24)
    {
      *(_DWORD *)(v22 + 24) = v24;
    }
    else if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v22, a2);
    }
  }
LABEL_69:
  if ((*((_BYTE *)v2 + 45) & 1) == 0)
  {
    v26 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
    if (v26)
    {
      if ((*(_WORD *)(v26 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v26 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        *(_DWORD *)(v26 + 24) += 2;
        v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 240) + 816))(*(_QWORD *)(v26 + 240));
        v29 = v27;
        if (*(_DWORD *)(v26 + 24) != 2)
        {
          *(_DWORD *)(v26 + 24) -= 2;
          if ((v27 & 1) == 0)
            goto LABEL_75;
          goto LABEL_123;
        }
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v26, v28);
          if ((v29 & 1) == 0)
            goto LABEL_75;
          goto LABEL_123;
        }
        if (v27)
LABEL_123:
          v7 |= 0x200u;
      }
    }
  }
LABEL_75:
  if (*((_BYTE *)this + 16))
    v7 |= 0x400u;
  v30 = v2;
  if ((*((_BYTE *)v2 + 45) & 2) != 0)
  {
    v30 = (const WebCore::RenderObject *)*((_QWORD *)v2 + 4);
    if (v30)
      v30 = (const WebCore::RenderObject *)*((_QWORD *)v30 + 1);
  }
  if (WebCore::Document::useDarkAppearance(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40) + 8), (const WebCore::RenderObject *)((char *)v30 + 80)))
  {
    v7 |= 0x800u;
  }
  v31 = v2;
  if ((*((_BYTE *)v2 + 45) & 2) != 0)
    v31 = *(const WebCore::RenderObject **)(*((_QWORD *)v2 + 4) + 8);
  if ((*((_BYTE *)v31 + 123) & 4) != 0)
    v7 |= 0x1000u;
  if ((*(unsigned int (**)(WebCore::RenderTheme *))(*(_QWORD *)this + 216))(this))
    v32 = v7 | 0x2000;
  else
    v32 = v7;
  if ((*((_BYTE *)v2 + 45) & 1) == 0)
  {
    v33 = *(_WORD **)(*((_QWORD *)v2 + 3) + 8);
    if (v33)
    {
      if ((v33[14] & 8) != 0 && (*(unsigned int (**)(_WORD *))(*(_QWORD *)v33 + 848))(v33))
      {
        if ((*(unsigned int (**)(_WORD *))(*(_QWORD *)v33 + 800))(v33))
          v32 = v32;
        else
          v32 = v32 | 0x4000;
      }
    }
  }
  v34 = *((_BYTE *)v2 + 45);
  if ((v34 & 1) == 0)
  {
    v35 = *(unsigned __int16 **)(*((_QWORD *)v2 + 3) + 8);
    if (v35)
    {
      if ((~v35[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v35 + 368))(v35))
        {
          v36 = WebCore::RenderObject::generatingPseudoHostElement(v2);
          goto LABEL_99;
        }
        v34 = *((_BYTE *)v2 + 45);
      }
    }
  }
  if ((v34 & 1) != 0)
    goto LABEL_111;
  v36 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
LABEL_99:
  if (v36
    && (*(_WORD *)(v36 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    *(_DWORD *)(v36 + 24) += 2;
    WebCore::HTMLInputElement::dataList(v36, &v48);
    if (v48)
    {
      if (*((_DWORD *)v48 + 6) == 2)
      {
        if ((*((_WORD *)v48 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v48, v37);
      }
      else
      {
        *((_DWORD *)v48 + 6) -= 2;
      }
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v37);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
      if (WebCore::RenderTheme::hasListButtonPressed(v2, (const WebCore::RenderObject *)v37))
        v38 = 98304;
      else
        v38 = 0x8000;
      v32 = v38 | v32;
    }
    else if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36, v37);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
  }
LABEL_111:
  if ((*((_BYTE *)v2 + 45) & 2) != 0)
    v2 = *(const WebCore::RenderObject **)(*((_QWORD *)v2 + 4) + 8);
  if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 <= 3)
    return v32 | 0x20000;
  return v32;
}

uint64_t WebCore::RenderTheme::isSpinUpButtonPartHovered(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 1) != 0)
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (!v2 || (*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 864))(*((_QWORD *)this + 1));
  if ((_DWORD)result)
    return *(_DWORD *)(v2 + 140) == 2;
  return result;
}

uint64_t WebCore::RenderTheme::isSpinUpButtonPartPressed(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  _DWORD *v2;
  uint64_t result;

  if ((a2 & 1) != 0)
    return 0;
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  if (!v2 || (v2[7] & 8) == 0)
    return 0;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 864))(*((_QWORD *)this + 1));
  if (!(_DWORD)result)
    return result;
  if ((*((_BYTE *)v2 + 54) & 2) == 0)
    return 0;
  result = WebCore::Element::isUserActionElementActive((WebCore::Element *)v2);
  if ((_DWORD)result)
    return v2[35] == 2;
  return result;
}

uint64_t WebCore::RenderTheme::isEnabled(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  if ((*((_BYTE *)a2 + 45) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (!v2 || (*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 960))(v2) ^ 1;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v3;
}

BOOL WebCore::RenderTheme::hasListButtonPressed(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebCore::Element *v5;
  _BOOL8 v6;

  v2 = WebCore::RenderObject::generatingNode(this);
  if (!v2)
    return 0;
  v3 = v2;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 240) + 608))(*(_QWORD *)(v2 + 240))
    && (v5 = (WebCore::Element *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 240) + 608))(*(_QWORD *)(v3 + 240)),
        (*((_BYTE *)v5 + 54) & 2) != 0)
    && WebCore::Element::isUserActionElementActive(v5);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v6;
}

WebCore *WebCore::effectiveRendererForAppearance(WebCore *this, const WebCore::RenderObject *a2)
{
  WebCore *v2;
  WebCore *v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v2 = this;
  v3 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v3 = *(WebCore **)(*((_QWORD *)this + 4) + 8);
  v4 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*((_QWORD *)v3 + 11) + 32) + 148) >> 14) & 0x7F;
  v5 = v4 > 0x20;
  v6 = (1 << v4) & 0x188000000;
  if (!v5 && v6 != 0)
  {
    v8 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
    if (v8)
      v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
    else
      v9 = 1;
    if (v9 || (v10 = *(_QWORD *)(v8 + 200)) == 0 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
      v11 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8);
    *(_DWORD *)(v11 + 24) += 2;
    if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v2 = (WebCore *)(*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL);
      else
        v2 = 0;
    }
    else
    {
      v2 = 0;
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  return v2;
}

double WebCore::RenderTheme::extractControlStyleForRenderer@<D0>(WebCore::RenderTheme *this@<X0>, const WebCore::RenderObject *a2@<X1>, uint64_t a3@<X8>)
{
  const WebCore::RenderObject *v3;
  WebCore *v6;
  WebCore *v7;
  uint64_t *v8;
  uint64_t *v9;
  WebCore::Document *v10;
  unsigned __int8 v11;
  WebCore *v12;
  double result;
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = a2;
  v6 = WebCore::effectiveRendererForAppearance(a2, a2);
  if (v6)
  {
    v7 = v6;
    *(_DWORD *)a3 = WebCore::RenderTheme::extractControlStyleStatesForRendererInternal(this, v6);
    if ((*((_BYTE *)v7 + 45) & 2) != 0)
    {
      v8 = *(uint64_t **)(*((_QWORD *)v7 + 4) + 8);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(v8[14] + 204);
    }
    else
    {
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(*((_QWORD *)v7 + 14) + 204);
      v8 = (uint64_t *)v7;
    }
    v9 = v8 + 10;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v8[13] + 184);
    v10 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) + 40) + 8);
    if ((*((_BYTE *)v3 + 45) & 2) != 0)
    {
      v17 = *((_QWORD *)v3 + 4);
      if (v17)
        v3 = *(const WebCore::RenderObject **)(v17 + 8);
      else
        v3 = 0;
    }
    v11 = WebCore::Document::styleColorOptions(v10, (const WebCore::RenderObject *)((char *)v3 + 80));
    WebCore::RenderStyle::usedAccentColor(v9, v11, (unint64_t *)(a3 + 16));
    v12 = v7;
    if ((*((_BYTE *)v7 + 45) & 2) != 0)
    {
      v12 = (WebCore *)*((_QWORD *)v7 + 4);
      if (v12)
        v12 = (WebCore *)*((_QWORD *)v12 + 1);
    }
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v12 + 80, 5, 0, (unint64_t *)(a3 + 24));
    if ((*((_BYTE *)v7 + 45) & 2) != 0)
      v7 = *(WebCore **)(*((_QWORD *)v7 + 4) + 8);
    WebCore::BorderData::borderWidth((WebCore::BorderData *)(*(_QWORD *)(*((_QWORD *)v7 + 11) + 24) + 104));
    *(_DWORD *)(a3 + 32) = LODWORD(result);
    *(_DWORD *)(a3 + 36) = v14;
    *(_DWORD *)(a3 + 40) = v15;
    *(_DWORD *)(a3 + 44) = v16;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 4) = 0x3F80000041400000;
    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
  }
  return result;
}

uint64_t WebCore::RenderTheme::paint(WebCore::RenderTheme *this, WebCore::SwitchThumbPart **a2, WebCore::ControlPart *a3, const WebCore::PaintInfo *a4, const WebCore::LayoutRect *a5)
{
  WebCore::RenderTheme *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  int v16;
  double v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  double v23;
  int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;
  float32x4_t v30;
  void *v31;
  WTF *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD v41[4];
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  _OWORD v45[3];

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a4 + 10) + 56))(*((_QWORD *)a4 + 10)))
  {
    if ((*(unsigned int (**)(WebCore::RenderTheme *, WebCore::SwitchThumbPart **))(*(_QWORD *)this + 144))(this, a2))
    {
      WebCore::RenderObject::repaint((uint64_t)a2, 0);
    }
  }
  else
  {
    v10 = (WebCore::RenderTheme *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a4 + 10) + 40))(*((_QWORD *)a4 + 10));
    if ((v10 & 1) == 0)
    {
      WebCore::RenderTheme::updateControlPartForRenderer(v10, a3, a2);
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2[3] + 1) + 40) + 8) + 528);
      v12 = 1.0;
      if (v11)
      {
        v13 = *(_QWORD *)(v11 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            v15 = *(float **)(v14 + 8);
            if (v15)
            {
              v16 = (*(_DWORD *)v15)++;
              v12 = v15[91];
              if (v16)
              {
                *(_DWORD *)v15 = v16;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v15);
                WTF::fastFree(v33, v34);
              }
            }
          }
        }
      }
      v17 = WebCore::snapRectToDevicePixels((int *)a5, v12) * 64.0;
      if (v17 > -2147483650.0)
        v21 = (int)v17;
      else
        v21 = 0x80000000;
      if (v17 < 2147483650.0)
        v22 = v21;
      else
        v22 = 0x7FFFFFFF;
      v23 = v18 * 64.0;
      if (v23 > -2147483650.0)
        v24 = (int)v23;
      else
        v24 = 0x80000000;
      if (v23 >= 2147483650.0)
        v24 = 0x7FFFFFFF;
      v41[0] = v22;
      v41[1] = v24;
      v25 = v19 * 64.0;
      if (v25 > -2147483650.0)
        v26 = (int)v25;
      else
        v26 = 0x80000000;
      if (v25 < 2147483650.0)
        v27 = v26;
      else
        v27 = 0x7FFFFFFF;
      v28 = v20 * 64.0;
      if (v28 > -2147483650.0)
        v29 = (int)v28;
      else
        v29 = 0x80000000;
      if (v28 >= 2147483650.0)
        v29 = 0x7FFFFFFF;
      v41[2] = v27;
      v41[3] = v29;
      WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)(a2 + 10), (const WebCore::LayoutRect *)v41, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v42);
      v30 = (float32x4_t)vdupq_n_s32(0x3C800000u);
      v45[0] = vmulq_f32(vcvtq_f32_s32(v42), v30);
      v45[1] = vmulq_f32(vcvtq_f32_s32(v43), v30);
      v45[2] = vmulq_f32(vcvtq_f32_s32(v44), v30);
      WebCore::RenderTheme::extractControlStyleForRenderer(this, (const WebCore::RenderObject *)a2, (uint64_t)&v42);
      (*(void (**)(_QWORD, WebCore::ControlPart *, _OWORD *, int32x4_t *, float))(**((_QWORD **)a4 + 10)
                                                                                           + 424))(*((_QWORD *)a4 + 10), a3, v45, &v42, v12);
      if ((v43.i64[1] & 0x8000000000000) != 0)
      {
        v35 = (unsigned int *)(v43.i64[1] & 0xFFFFFFFFFFFFLL);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v31);
        }
      }
      if ((v43.i64[0] & 0x8000000000000) != 0)
      {
        v38 = (unsigned int *)(v43.i64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v31);
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::RenderTheme::paint(WebCore::RenderTheme *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::LayoutRect *a4)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t (*v32)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *);
  WTF *v33;
  void *v34;
  __int128 *v35;
  _DWORD v36[4];
  char v37;
  __int128 v38;
  char v39;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 10) + 56))(*((_QWORD *)a3 + 10)))
  {
    result = (*(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *))(*(_QWORD *)this + 144))(this, a2);
    if (!(_DWORD)result)
      return result;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v38) = 0;
      v39 = 0;
      LOBYTE(v36[0]) = 0;
      v37 = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)a2, &v38, 0, 0, (uint64_t)v36);
    }
    return 0;
  }
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 10) + 40))(*((_QWORD *)a3 + 10)) & 1) != 0)
    return 0;
  v9 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 148) >> 14) & 0x7F;
  result = (*(uint64_t (**)(WebCore::RenderTheme *, const WebCore::PaintInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 528))(this, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 112), v9);
  if ((_DWORD)result)
  {
    v10 = HIDWORD(*(_QWORD *)a4);
    v11 = *(_QWORD *)a4 + 63;
    if ((int)*(_QWORD *)a4 >= 0)
      v11 = *(_QWORD *)a4;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)a4 - (v11 & 0xFFFFFFC0);
    v14 = (int)v10 / 64;
    v15 = v10 - (v11 & 0xFFFFFFC0);
    v17 = *((_DWORD *)a4 + 2);
    v16 = *((_DWORD *)a4 + 3);
    v18 = __OFADD__(v13, v17);
    v19 = v13 + v17;
    if (v18)
      v19 = (v13 >> 31) + 0x7FFFFFFF;
    v18 = __OFADD__(v15, v16);
    v20 = v15 + v16;
    if (v18)
      v20 = (v15 >> 31) + 0x7FFFFFFF;
    v21 = v15 + 32;
    v22 = v13 + 32;
    *(_QWORD *)&v38 = (v12 + (v22 >> 6)) | ((unint64_t)(v14 + (v21 >> 6)) << 32);
    *((_QWORD *)&v38 + 1) = (v19 / 64 - (v22 >> 6) + ((int)(v19 - (v14 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v20 / 64 - (v21 >> 6) + ((int)(v20 - (v14 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
    v24 = 1.0;
    if (v23)
    {
      v25 = *(_QWORD *)(v23 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 24);
        if (v26)
        {
          v27 = *(float **)(v26 + 8);
          if (v27)
          {
            v28 = (*(_DWORD *)v27)++;
            v24 = v27[91];
            if (v28)
            {
              *(_DWORD *)v27 = v28;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v27);
              WTF::fastFree(v33, v34);
            }
          }
        }
      }
    }
    v36[0] = WebCore::snapRectToDevicePixels((int *)a4, v24);
    v36[1] = v29;
    v36[2] = v30;
    v36[3] = v31;
    result = 1;
    switch(v9)
    {
      case 2u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 680);
        goto LABEL_43;
      case 3u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 696);
        goto LABEL_43;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 712);
        goto LABEL_40;
      case 9u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 808);
        goto LABEL_43;
      case 0xBu:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 864);
        goto LABEL_40;
      case 0xCu:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 920);
        goto LABEL_40;
      case 0xDu:
      case 0xEu:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 936);
        goto LABEL_40;
      case 0xFu:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 968);
        goto LABEL_40;
      case 0x11u:
      case 0x12u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 880);
        goto LABEL_40;
      case 0x15u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 728);
        goto LABEL_40;
      case 0x17u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 904);
        goto LABEL_43;
      case 0x18u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 1008);
        goto LABEL_40;
      case 0x19u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 1024);
        goto LABEL_40;
      case 0x1Au:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 1040);
        goto LABEL_40;
      case 0x1Bu:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 992);
        goto LABEL_40;
      case 0x1Cu:
      case 0x1Du:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 952);
LABEL_40:
        v35 = &v38;
        goto LABEL_44;
      case 0x1Fu:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 1056);
        goto LABEL_43;
      case 0x20u:
        v32 = *(uint64_t (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, __int128 *))(*(_QWORD *)this + 1064);
LABEL_43:
        v35 = (__int128 *)v36;
LABEL_44:
        result = v32(this, a2, a3, v35);
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL WebCore::RenderTheme::paintBorderOnly(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 80) + 40))(*(_QWORD *)(a3 + 80)) & 1) == 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 32) + 148) & 0x1FC000) != 0;
}

void WebCore::RenderTheme::paintDecorations(WebCore::RenderTheme *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::LayoutRect *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  void (*v31)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *);
  _QWORD *v32;
  WTF *v33;
  void *v34;
  _DWORD v35[4];
  _QWORD v36[2];

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 10) + 40))(*((_QWORD *)a3 + 10)) & 1) == 0)
  {
    v8 = HIDWORD(*(_QWORD *)a4);
    v9 = *(_QWORD *)a4 + 63;
    if ((int)*(_QWORD *)a4 >= 0)
      v9 = *(_QWORD *)a4;
    v10 = v9 >> 6;
    v11 = *(_QWORD *)a4 - (v9 & 0xFFFFFFC0);
    v12 = (int)v8 / 64;
    v13 = v8 - (v9 & 0xFFFFFFC0);
    v15 = *((_DWORD *)a4 + 2);
    v14 = *((_DWORD *)a4 + 3);
    v16 = __OFADD__(v11, v15);
    v17 = v11 + v15;
    if (v16)
      v17 = (v11 >> 31) + 0x7FFFFFFF;
    v16 = __OFADD__(v13, v14);
    v18 = v13 + v14;
    if (v16)
      v18 = (v13 >> 31) + 0x7FFFFFFF;
    v19 = v13 + 32;
    v20 = v11 + 32;
    v36[0] = (v10 + (v20 >> 6)) | ((unint64_t)(v12 + (v19 >> 6)) << 32);
    v36[1] = (v17 / 64 - (v20 >> 6) + ((int)(v17 - (v12 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v18 / 64 - (v19 >> 6) + ((int)(v18 - (v12 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
    v22 = 1.0;
    if (v21)
    {
      v23 = *(_QWORD *)(v21 + 8);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 24);
        if (v24)
        {
          v25 = *(float **)(v24 + 8);
          if (v25)
          {
            v26 = (*(_DWORD *)v25)++;
            v22 = v25[91];
            if (v26)
            {
              *(_DWORD *)v25 = v26;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v25);
              WTF::fastFree(v33, v34);
            }
          }
        }
      }
    }
    v35[0] = WebCore::snapRectToDevicePixels((int *)a4, v22);
    v35[1] = v27;
    v35[2] = v28;
    v35[3] = v29;
    v30 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 148) >> 14) & 0x7F;
    switch(v30)
    {
      case 5:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 848);
        goto LABEL_21;
      case 6:
      case 7:
      case 8:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
      case 17:
      case 18:
        return;
      case 9:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 816);
        goto LABEL_21;
      case 10:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 832);
        goto LABEL_26;
      case 15:
        goto LABEL_19;
      case 19:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 792);
        goto LABEL_26;
      case 20:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 768);
        goto LABEL_26;
      case 21:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 736);
LABEL_26:
        v32 = v35;
        goto LABEL_27;
      default:
        if (v30 != 28)
          return;
LABEL_19:
        v31 = *(void (**)(WebCore::RenderTheme *, const WebCore::RenderBox *, const WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)this + 976);
LABEL_21:
        v32 = v36;
LABEL_27:
        v31(this, a2, a3, v32);
        break;
    }
  }
}

uint64_t WebCore::RenderTheme::activeSelectionBackgroundColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v8 = (unint64_t *)(result + 48);
  v7 = *(_QWORD *)(result + 48);
  if ((v7 & 0x4000000000000) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(&v16, a1, v5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 232))(&v17, a1, &v16, v5);
    result = (uint64_t)WebCore::Color::operator=(v8, &v17);
    if ((v17 & 0x8000000000000) != 0)
    {
      result = v17 & 0xFFFFFFFFFFFFLL;
      do
      {
        v12 = __ldaxr((unsigned int *)result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)result));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
    if ((v16 & 0x8000000000000) != 0)
    {
      result = v16 & 0xFFFFFFFFFFFFLL;
      do
      {
        v14 = __ldaxr((unsigned int *)result);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)result));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
    v7 = *v8;
  }
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  return result;
}

unsigned int *WebCore::RenderTheme::activeListBoxSelectionBackgroundColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = *((_QWORD *)result + 10);
  if ((v7 & 0x4000000000000) == 0)
  {
    v8 = result;
    result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 568))(&v19, a1, v5);
    v10 = *((_QWORD *)v8 + 10);
    v11 = v19;
    if ((v10 & 0x8000000000000) != 0)
    {
      if ((v19 & 0x8000000000000) == 0
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v10) != HIBYTE(v19)
        || BYTE6(v10) != BYTE6(v19))
      {
        result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
        }
        goto LABEL_7;
      }
    }
    else
    {
      if (v10 != v19 || (v19 & 0x8000000000000) != 0)
      {
LABEL_7:
        *((_QWORD *)v8 + 10) = v19;
LABEL_8:
        v7 = *((_QWORD *)v8 + 10);
        goto LABEL_9;
      }
      v11 = *((_QWORD *)v8 + 10);
    }
    if ((v11 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
    goto LABEL_8;
  }
LABEL_9:
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

unsigned int *WebCore::RenderTheme::activeListBoxSelectionForegroundColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = result;
  if ((*((_BYTE *)result + 102) & 4) == 0)
  {
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 664))(a1, v5);
    if ((_DWORD)result)
    {
      result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 584))(&v19, a1, v5);
      v9 = *((_QWORD *)v7 + 12);
      v10 = v19;
      if ((v9 & 0x8000000000000) != 0)
      {
        if ((v19 & 0x8000000000000) == 0
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v9) != HIBYTE(v19)
          || BYTE6(v9) != BYTE6(v19))
        {
          result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
          {
            v17 = __ldaxr(result);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, result));
          if (!v18)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
          }
          goto LABEL_8;
        }
      }
      else
      {
        if (v9 != v19 || (v19 & 0x8000000000000) != 0)
        {
LABEL_8:
          *((_QWORD *)v7 + 12) = v19;
          goto LABEL_9;
        }
        v10 = *((_QWORD *)v7 + 12);
      }
      if ((v10 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(result);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, result));
        if (!v14)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
        }
      }
    }
  }
LABEL_9:
  v12 = *((_QWORD *)v7 + 12);
  *a3 = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

void WebCore::RenderTheme::platformActiveSelectionBackgroundColor(_QWORD *a1@<X8>)
{
  *a1 = 0x110400000000FFFFLL;
}

void WebCore::RenderTheme::platformActiveSelectionForegroundColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000FFFFFFFFLL;
}

void WebCore::RenderTheme::platformInactiveSelectionBackgroundColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000B0B0B0FFLL;
}

uint64_t WebCore::RenderTheme::platformActiveListBoxSelectionBackgroundColor(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 536))(a1, a2);
}

uint64_t WebCore::RenderTheme::platformActiveListBoxSelectionForegroundColor(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 552))(a1, a2);
}

uint64_t WebCore::RenderTheme::platformInactiveListBoxSelectionBackgroundColor(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 544))(a1, a2);
}

uint64_t WebCore::RenderTheme::platformInactiveListBoxSelectionForegroundColor(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 560))(a1, a2);
}

uint64_t WebCore::RenderTheme::baselinePosition(WebCore::RenderTheme *this, const WebCore::RenderBox *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)a2 + 21) & 0x10) != 0)
  {
    v6 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v6 > 4)
      v7 = 0;
    else
      v7 = qword_1969FD318[v6];
    return (int)(float)((float)((float)((float)*((int *)a2 + 40) * 0.015625) * 0.5)
                                    + (float)((float)*((int *)a2 + v7 + 42) * 0.015625));
  }
  else
  {
    v2 = *((_DWORD *)a2 + 41);
    v3 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1080))(a2);
    v4 = v2 + v3;
    if (__OFADD__(v2, v3))
      v4 = (v2 >> 31) + 0x7FFFFFFF;
    return (v4 / 64);
  }
}

BOOL WebCore::RenderTheme::isControlContainer(uint64_t a1, int a2)
{
  return (a2 - 4) < 0xFFFFFFFE;
}

uint64_t WebCore::RenderTheme::isControlStyled(WebCore::RenderTheme *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v19;
  char *v20;

  v5 = *((_QWORD *)a2 + 1);
  v6 = (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 148) >> 14) & 0x7F;
  if (v6 - 4 >= 6)
  {
    v9 = v6 > 0x15;
    v10 = (1 << v6) & 0x381800;
    v11 = v9 || v10 == 0;
    if (v11)
      return 0;
  }
  v7 = WebCore::operator==(*(_QWORD *)(v5 + 24) + 104, *(_QWORD *)(*((_QWORD *)a3 + 1) + 24) + 104);
  if (v7)
  {
    v7 = WebCore::FillLayer::operator==(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16) + 8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16) + 8));
    if (v7)
    {
      v12 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16);
      v13 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 16);
      v14 = *(unsigned int *)(v12 + 24);
      v15 = *(_DWORD *)(v13 + 24);
      v16 = v15 == v14;
      v11 = v15 == -1;
      v17 = v15 == -1;
      if (v11)
        v16 = 0;
      if ((_DWORD)v14 == -1)
        v7 = v17;
      else
        v7 = v16;
      if ((_DWORD)v14 != -1 && v16)
      {
        v20 = &v19;
        v7 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v14])(&v20, v12 + 16, v13 + 16);
      }
    }
  }
  return v7 ^ 1u;
}

uint64_t WebCore::RenderTheme::supportsFocusRing(WebCore::RenderTheme *this, const WebCore::RenderStyle *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148);
  v3 = (v2 >> 14) & 0x7F;
  v4 = v3 > 0x14;
  v5 = (0x7FAFFu >> v3) & 1;
  if (v4)
    v5 = 1;
  if ((v2 & 0x1FC000) != 0)
    return v5;
  else
    return 0;
}

uint64_t WebCore::RenderObject::generatingNode(WebCore::RenderObject *this)
{
  char v2;
  unsigned __int16 *v3;

  v2 = *((_BYTE *)this + 45);
  if ((v2 & 1) == 0)
  {
    v3 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v3)
    {
      if ((~v3[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v3 + 368))(v3))
          return WebCore::RenderObject::generatingPseudoHostElement(this);
        v2 = *((_BYTE *)this + 45);
      }
    }
  }
  if ((v2 & 1) != 0)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 3) + 8);
}

void WebCore::RenderTheme::adjustButtonOrCheckboxOrColorWellOrInnerSpinButtonOrRadioStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t (**v15)();
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  int v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t (**v31)();
  uint64_t (**v32)();
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned __int8 *v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  uint64_t (**v50)();
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  WTF::StringImpl *v62;
  WebCore *v63;
  _DWORD *v64;
  unsigned int *v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int *v70;
  float v71;
  int v72;
  float v73;
  unsigned int v74;
  float v75;
  unsigned int v76;
  float v77;
  uint64_t v78;
  unsigned int v79;
  __int16 v80;
  char v81;
  unsigned int v82;
  __int16 v83;
  char v84;
  unsigned int v85;
  __int16 v86;
  char v87;
  WTF *v88;
  char v89;
  unsigned int v90[2];
  unsigned int v91;
  unsigned __int8 v92;
  char v93;
  char v94;
  int v95;
  char v96;
  char v97;
  int v98;
  char v99;
  char v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  unsigned int v107;
  char v108;
  unsigned int v109;
  char v110;
  unsigned int v111;
  char v112;
  int v113;
  __int16 v114;
  char v115;
  int v116;
  __int16 v117;
  char v118;
  int v119;
  __int16 v120;
  unsigned __int8 v121;
  int v122;
  __int16 v123;
  char v124;

  v6 = (WTF **)((char *)this + 8);
  v5 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = 0.0;
  v9 = 0.0;
  if ((*(_BYTE *)(v7 + 172) & 0xE) != 0)
  {
    v59 = *(_QWORD *)(v7 + 200);
    if (*(_BYTE *)(v59 + 5) && *(_BYTE *)(v59 + 52) == 4)
    {
      if (*(_BYTE *)(v59 + 54))
        v9 = *(float *)(v59 + 48);
      else
        v9 = (float)*(int *)(v59 + 48);
    }
    else
    {
      v9 = *(float *)(v7 + 168);
    }
  }
  v10 = *(_QWORD *)(v5 + 32);
  if ((*(_BYTE *)(v7 + 148) & 0xE) != 0)
  {
    v55 = *(_QWORD *)(v7 + 200);
    if (*(_BYTE *)(v55 + 5) && *(_BYTE *)(v55 + 60) == 4)
    {
      if (*(_BYTE *)(v55 + 62))
        v8 = *(float *)(v55 + 56);
      else
        v8 = (float)*(int *)(v55 + 56);
    }
    else
    {
      v8 = *(float *)(v7 + 144);
    }
  }
  v11 = *(_DWORD *)(v10 + 148);
  v12 = 0.0;
  v13 = 0.0;
  if ((*(_BYTE *)(v7 + 196) & 0xE) != 0)
  {
    v52 = *(_QWORD *)(v7 + 200);
    if (*(_BYTE *)(v52 + 5) && *(_BYTE *)(v52 + 68) == 4)
    {
      if (*(_BYTE *)(v52 + 70))
        v13 = *(float *)(v52 + 64);
      else
        v13 = (float)*(int *)(v52 + 64);
    }
    else
    {
      v13 = *(float *)(v7 + 192);
    }
  }
  v14 = (v11 >> 14) & 0x7F;
  if ((*(_BYTE *)(v7 + 124) & 0xE) != 0)
  {
    v57 = *(_QWORD *)(v7 + 200);
    if (*(_BYTE *)(v57 + 5) && *(_BYTE *)(v57 + 76) == 4)
    {
      if (*(_BYTE *)(v57 + 78))
        v12 = *(float *)(v57 + 72);
      else
        v12 = (float)*(int *)(v57 + 72);
    }
    else
    {
      v12 = *(float *)(v7 + 120);
    }
  }
  v114 = 4;
  v115 = 0;
  v113 = (int)v9;
  v117 = 4;
  v118 = 0;
  v116 = (int)v8;
  v120 = 4;
  v121 = 0;
  v119 = (int)v13;
  v123 = 4;
  v124 = 0;
  v122 = (int)v12;
  {
    v15 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v15 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, int *, float))v15[3])(&v78, &WebCore::Theme::singleton(void)::theme, v14, *((_QWORD *)this + 4) + 32, &v113, *(float *)(*((_QWORD *)this + 3) + 184));
  std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)&v113, (uint64_t)&v78);
  if (v86 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v85);
  }
  if (v83 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v82);
  }
  if (v80 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v79);
  }
  if (BYTE4(v78) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v78);
  }
  if (((*((_DWORD *)this + 11) >> 13) & 6u) - 2 <= 3 && ((v14 - 4) < 4 || (_DWORD)v14 == 21))
  {
    v71 = *(float *)&v122;
    if (!v124)
      v71 = (float)v122;
    v72 = (int)v71;
    v73 = *(float *)&v113;
    if (!v115)
      v73 = (float)v113;
    v74 = (int)v73;
    v75 = *(float *)&v116;
    if (!v118)
      v75 = (float)v116;
    v76 = (int)v75;
    v77 = *(float *)&v119;
    if (!v121)
      v77 = (float)v119;
    WORD2(v78) = 4;
    BYTE6(v78) = 0;
    LODWORD(v78) = v72;
    v80 = 4;
    v81 = 0;
    v79 = v74;
    v83 = 4;
    v84 = 0;
    v82 = v76;
    v86 = 4;
    v87 = 0;
    v85 = (int)v77;
    std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)&v113, (uint64_t)&v78);
    WebCore::LengthBox::~LengthBox((WebCore::LengthBox *)&v78);
  }
  v16 = (float)v113;
  if (v115)
    v17 = *(float *)&v113;
  else
    v17 = (float)v113;
  v18 = *((_QWORD *)*v6 + 3);
  v19 = 0.0;
  if ((*(_BYTE *)(v18 + 172) & 0xE) != 0)
  {
    v60 = *(_QWORD *)(v18 + 200);
    if (*(_BYTE *)(v60 + 5) && *(_BYTE *)(v60 + 52) == 4)
    {
      if (*(_BYTE *)(v60 + 54))
        v19 = *(float *)(v60 + 48);
      else
        v19 = (float)*(int *)(v60 + 48);
    }
    else
    {
      v19 = *(float *)(v18 + 168);
    }
  }
  if (v17 != (float)(int)v19)
  {
    if (v115)
    {
      v16 = *(float *)&v113;
      if (*(float *)&v113 == 0.0)
        goto LABEL_45;
    }
    else if (*(float *)&v113 == 0.0)
    {
LABEL_45:
      WebCore::RenderStyle::resetBorderTop(this);
      goto LABEL_17;
    }
    WebCore::RenderStyle::setBorderTopWidth(this, v16);
  }
LABEL_17:
  v20 = (float)v116;
  if (v118)
    v21 = *(float *)&v116;
  else
    v21 = (float)v116;
  v22 = *((_QWORD *)*v6 + 3);
  v23 = 0.0;
  if ((*(_BYTE *)(v22 + 148) & 0xE) != 0)
  {
    v56 = *(_QWORD *)(v22 + 200);
    if (*(_BYTE *)(v56 + 5) && *(_BYTE *)(v56 + 60) == 4)
    {
      if (*(_BYTE *)(v56 + 62))
        v23 = *(float *)(v56 + 56);
      else
        v23 = (float)*(int *)(v56 + 56);
    }
    else
    {
      v23 = *(float *)(v22 + 144);
    }
  }
  if (v21 != (float)(int)v23)
  {
    if (v118)
    {
      v20 = *(float *)&v116;
      if (*(float *)&v116 != 0.0)
        goto LABEL_219;
    }
    else if (*(float *)&v116 != 0.0)
    {
LABEL_219:
      WebCore::RenderStyle::setBorderRightWidth(this, v20);
      goto LABEL_22;
    }
    WebCore::RenderStyle::resetBorderRight(this);
  }
LABEL_22:
  v24 = v121;
  if (v121)
    v25 = *(float *)&v119;
  else
    v25 = (float)v119;
  v26 = *((_QWORD *)*v6 + 3);
  v27 = 0.0;
  if ((*(_BYTE *)(v26 + 196) & 0xE) != 0)
  {
    v53 = *(_QWORD *)(v26 + 200);
    if (*(_BYTE *)(v53 + 5) && *(_BYTE *)(v53 + 68) == 4)
    {
      if (*(_BYTE *)(v53 + 70))
        v27 = *(float *)(v53 + 64);
      else
        v27 = (float)*(int *)(v53 + 64);
    }
    else
    {
      v27 = *(float *)(v26 + 192);
    }
  }
  if (v25 != (float)(int)v27)
  {
    if (*(float *)(v26 + 192) != v25)
    {
      v35 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v6);
      *((float *)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v35 + 3) + 48) = v25;
      v24 = v121;
    }
    if (v24)
    {
      v54 = *(float *)&v119;
      if (*(float *)&v119 == 0.0)
        goto LABEL_50;
    }
    else
    {
      if (*(float *)&v119 == 0.0)
      {
LABEL_50:
        WebCore::RenderStyle::resetBorderBottom(this);
        goto LABEL_27;
      }
      v54 = (float)v119;
    }
    WebCore::RenderStyle::setBorderBottomWidth(this, v54);
  }
LABEL_27:
  v28 = *(float *)&v122;
  if (!v124)
    v28 = (float)v122;
  v29 = *((_QWORD *)*v6 + 3);
  v30 = 0.0;
  if ((*(_BYTE *)(v29 + 124) & 0xE) != 0)
  {
    v58 = *(_QWORD *)(v29 + 200);
    if (*(_BYTE *)(v58 + 5) && *(_BYTE *)(v58 + 76) == 4)
    {
      if (*(_BYTE *)(v58 + 78))
        v30 = *(float *)(v58 + 72);
      else
        v30 = (float)*(int *)(v58 + 72);
    }
    else
    {
      v30 = *(float *)(v29 + 120);
    }
  }
  if (v28 != (float)(int)v30)
  {
    WebCore::RenderStyle::setBorderLeftWidth(this, v28);
    if (v124)
    {
      v61 = *(float *)&v122;
      if (*(float *)&v122 != 0.0)
        goto LABEL_223;
    }
    else if (*(float *)&v122 != 0.0)
    {
      v61 = (float)v122;
LABEL_223:
      WebCore::RenderStyle::setBorderLeftWidth(this, v61);
      goto LABEL_31;
    }
    WebCore::RenderStyle::resetBorderLeft(this);
  }
LABEL_31:
  {
    v31 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v31 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t, float))v31[2])(&v106, &WebCore::Theme::singleton(void)::theme, v14, *((_QWORD *)this + 4) + 32, *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 72, *(float *)(*((_QWORD *)this + 3) + 184));
  if ((WebCore::operator==((unsigned __int8 *)&v106, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 72)) & 1) == 0)WebCore::RenderStyle::setPaddingBox((uint64_t)this, (unsigned __int8 *)&v106);
  {
    v32 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v32 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  if (((unsigned int (*)(uint64_t *, uint64_t))v32[4])(&WebCore::Theme::singleton(void)::theme, v14))
    *((_DWORD *)this + 10) = *((_DWORD *)this + 10) & 0x87FFFFFF | 0x48000000;
  {
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v33 = *((_QWORD *)this + 4) + 32;
  v34 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  LODWORD(v78) = 0;
  BYTE6(v78) = 0;
  WORD2(v78) = *(_WORD *)(v34 + 8);
  if (BYTE4(v78) - 2 >= 9)
  {
    if (BYTE4(v78) == 11)
    {
      LODWORD(v78) = *(_DWORD *)(v34 + 4);
      WebCore::Length::ref((int *)&v78);
      v34 = *((_QWORD *)*v6 + 1);
    }
  }
  else
  {
    BYTE6(v78) = *(_BYTE *)(v34 + 10);
    LODWORD(v78) = *(_DWORD *)(v34 + 4);
  }
  v79 = 0;
  v81 = 0;
  v80 = *(_WORD *)(v34 + 16);
  if (v80 - 2 >= 9)
  {
    if (v80 == 11)
    {
      v79 = *(_DWORD *)(v34 + 12);
      WebCore::Length::ref((int *)&v79);
    }
  }
  else
  {
    v81 = *(_BYTE *)(v34 + 18);
    v79 = *(_DWORD *)(v34 + 12);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t *, float))(WebCore::Theme::singleton(void)::theme
                                                                                               + 8))(&v101, &WebCore::Theme::singleton(void)::theme, v14, v33, &v78, *(float *)(*((_QWORD *)this + 3) + 184));
  if (v80 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v79);
  }
  if (BYTE4(v78) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v78);
  }
  v36 = (unsigned __int8 *)*((_QWORD *)*v6 + 1);
  if (BYTE4(v101) == v36[8] && (BYTE5(v101) != 0) == (v36[9] != 0))
  {
    if (BYTE4(v101) == 13)
      goto LABEL_68;
    if (BYTE4(v101) == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)&v101, (const WebCore::Length *)(v36 + 4)) & 1) != 0)
        goto LABEL_68;
    }
    else
    {
      v37 = *(float *)&v101;
      if (!BYTE6(v101))
        v37 = (float)(int)v101;
      v38 = *((float *)v36 + 1);
      if (!v36[10])
        v38 = (float)SLODWORD(v38);
      if (v37 == v38)
        goto LABEL_68;
    }
  }
  WebCore::RenderStyle::setWidth((uint64_t)this, (WebCore::Length *)&v101);
LABEL_68:
  v39 = (float *)*((_QWORD *)*v6 + 1);
  if (v103 != *((_BYTE *)v39 + 16) || (v104 != 0) != (*((_BYTE *)v39 + 17) != 0))
    goto LABEL_258;
  if (v103 == 13)
    goto LABEL_77;
  if (v103 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)&v102, (const WebCore::Length *)(v39 + 3)) & 1) != 0)
      goto LABEL_77;
    goto LABEL_258;
  }
  v40 = *(float *)&v102;
  if (!v105)
    v40 = (float)v102;
  v41 = v39[3];
  if (!*((_BYTE *)v39 + 18))
    v41 = (float)SLODWORD(v41);
  if (v40 != v41)
LABEL_258:
    WebCore::RenderStyle::setHeight((uint64_t)this, (WebCore::Length *)&v102);
LABEL_77:
  {
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v42 = (WTF *)*((_QWORD *)this + 1);
  v43 = *((_QWORD *)v42 + 1);
  LODWORD(v78) = 0;
  BYTE6(v78) = 0;
  WORD2(v78) = *(_WORD *)(v43 + 24);
  if (BYTE4(v78) - 2 >= 9)
  {
    if (BYTE4(v78) == 11)
    {
      LODWORD(v78) = *(_DWORD *)(v43 + 20);
      WebCore::Length::ref((int *)&v78);
      v42 = *v6;
      v43 = *((_QWORD *)*v6 + 1);
    }
  }
  else
  {
    BYTE6(v78) = *(_BYTE *)(v43 + 26);
    LODWORD(v78) = *(_DWORD *)(v43 + 20);
  }
  v79 = 0;
  v81 = 0;
  v80 = *(_WORD *)(v43 + 40);
  if (v80 - 2 >= 9)
  {
    if (v80 == 11)
    {
      v79 = *(_DWORD *)(v43 + 36);
      WebCore::Length::ref((int *)&v79);
      v42 = *v6;
    }
  }
  else
  {
    v81 = *(_BYTE *)(v43 + 42);
    v79 = *(_DWORD *)(v43 + 36);
  }
  v44 = *((_QWORD *)v42 + 1);
  v90[0] = 0;
  BYTE2(v90[1]) = 0;
  LOWORD(v90[1]) = *(_WORD *)(v44 + 8);
  if (LOBYTE(v90[1]) - 2 >= 9)
  {
    if (LOBYTE(v90[1]) == 11)
    {
      v90[0] = *(_DWORD *)(v44 + 4);
      WebCore::Length::ref((int *)v90);
      v44 = *((_QWORD *)*v6 + 1);
    }
  }
  else
  {
    BYTE2(v90[1]) = *(_BYTE *)(v44 + 10);
    v90[0] = *(_DWORD *)(v44 + 4);
  }
  v91 = 0;
  v94 = 0;
  v92 = *(_BYTE *)(v44 + 16);
  v93 = *(_BYTE *)(v44 + 17);
  if (v92 - 2 >= 9)
  {
    if (v92 == 11)
    {
      v91 = *(_DWORD *)(v44 + 12);
      WebCore::Length::ref((int *)&v91);
    }
  }
  else
  {
    v94 = *(_BYTE *)(v44 + 18);
    v91 = *(_DWORD *)(v44 + 12);
  }
  WebCore::Theme::minimumControlSize((uint64_t)&WebCore::Theme::singleton(void)::theme, v14, (uint64_t)&v78, (uint64_t)v90, (uint64_t)&v95);
  if (v92 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v91);
  }
  if (LOBYTE(v90[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v90[0]);
  }
  if (v80 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v79);
  }
  if (BYTE4(v78) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v78);
  }
  v45 = *(float *)&v95;
  if (!v97)
    v45 = (float)v95;
  v46 = *((_QWORD *)*v6 + 1);
  if (*(_BYTE *)(v46 + 26))
    v47 = *(float *)(v46 + 20);
  else
    v47 = (float)*(int *)(v46 + 20);
  if (v45 > v47)
  {
    WebCore::RenderStyle::setMinWidth((uint64_t)this, (WebCore::Length *)&v95);
    v46 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  }
  v48 = *(float *)&v98;
  if (!v100)
    v48 = (float)v98;
  if (*(_BYTE *)(v46 + 42))
    v49 = *(float *)(v46 + 36);
  else
    v49 = (float)*(int *)(v46 + 36);
  if (v48 > v49)
    WebCore::RenderStyle::setMinHeight((uint64_t)this, (WebCore::Length *)&v98);
  {
    v50 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v50 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, float))*v50)(&v78, &WebCore::Theme::singleton(void)::theme, v14, *((_QWORD *)this + 4) + 32, *(float *)(*((_QWORD *)this + 3) + 184));
  if (v89)
  {
    v90[0] = -1027080192;
    LOWORD(v90[1]) = 3;
    BYTE2(v90[1]) = 1;
    WebCore::RenderStyle::setLineHeight((uint64_t)this, (WebCore::Length *)v90);
    if (LOBYTE(v90[1]) == 11)
    {
      v70 = &dword_1ECE90000;
        goto LABEL_310;
      goto LABEL_264;
    }
    while (!v89)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_310:
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
      *((_BYTE *)v70 + 3232) = 1;
LABEL_264:
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v90[0]);
    }
    if (WebCore::RenderStyle::setFontDescription((uint64_t)this, (uint64_t)&v78))
    {
      v63 = (WebCore *)(*((_QWORD *)this + 4) + 32);
      *(_QWORD *)v90 = 0;
      WebCore::FontCascade::update(v63, (WebCore **)v90);
      v64 = *(_DWORD **)v90;
      *(_QWORD *)v90 = 0;
      if (v64)
      {
        if (v64[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
        else
          --v64[2];
      }
    }
    if (v89)
    {
      v65 = (unsigned int *)v88;
      v88 = 0;
      if (v65)
      {
        if (*v65 == 1)
        {
          v66 = v65[1];
          if ((_DWORD)v66)
          {
            v67 = (WTF::StringImpl **)(v65 + 2);
            v68 = 8 * v66;
            do
            {
              v69 = *v67;
              *v67 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  WTF::StringImpl::destroy(v69, v62);
                else
                  *(_DWORD *)v69 -= 2;
              }
              ++v67;
              v68 -= 8;
            }
            while (v68);
          }
          WTF::fastFree((WTF *)v65, v62);
        }
        else
        {
          --*v65;
        }
      }
      WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v78, v62);
    }
  }
  if ((_DWORD)v14 == 7 && a2)
  {
    if ((*(unsigned int (**)(WebCore::RenderStyle *))(*(_QWORD *)a2 + 960))(a2))
      v51 = 0;
    else
      v51 = 4096;
  }
  else
  {
    v51 = 0;
  }
  *((_DWORD *)this + 11) = *((_DWORD *)this + 11) & 0xFFFFEFFF | v51;
  if (v99 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
  }
  if (v96 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v95);
  }
  if (v103 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v102);
  }
  if (BYTE4(v101) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v101);
  }
  if (v112 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v111);
  }
  if (v110 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v109);
  }
  if (v108 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v107);
  }
  if (BYTE4(v106) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v106);
  }
  if (v123 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v122);
  }
  if (v120 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v119);
  }
  if (v117 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v116);
  }
  if (v114 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v113);
  }
}

uint64_t WebCore::RenderStyle::setPaddingBox(uint64_t a1, unsigned __int8 *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  _DWORD *v6;

  v3 = (WTF **)(a1 + 8);
  result = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 72), a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    return (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v6 + 18), (uint64_t)a2);
  }
  return result;
}

void WebCore::RenderTheme::adjustCheckboxStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WebCore::RenderTheme::adjustButtonOrCheckboxOrColorWellOrInnerSpinButtonOrRadioStyle(a2, a3, a3);
}

void WebCore::RenderTheme::adjustRadioStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WebCore::RenderTheme::adjustButtonOrCheckboxOrColorWellOrInnerSpinButtonOrRadioStyle(a2, a3, a3);
}

void WebCore::RenderTheme::adjustColorWellStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WebCore::RenderTheme::adjustButtonOrCheckboxOrColorWellOrInnerSpinButtonOrRadioStyle(a2, a3, a3);
}

void WebCore::RenderTheme::adjustButtonStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WebCore::RenderTheme::adjustButtonOrCheckboxOrColorWellOrInnerSpinButtonOrRadioStyle(a2, a3, a3);
}

void WebCore::RenderTheme::adjustInnerSpinButtonStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WebCore::RenderTheme::adjustButtonOrCheckboxOrColorWellOrInnerSpinButtonOrRadioStyle(a2, a3, a3);
}

void WebCore::RenderTheme::adjustMenuListStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  *((_QWORD *)a2 + 2) &= 0xFFFFFFFFFFFF03FFLL;
}

WebCore::ShadowData *WebCore::RenderTheme::adjustMeterStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WebCore::ShadowData *result;
  WTF *v4;
  void *v5;
  WebCore::ShadowData *v6;

  v6 = 0;
  WebCore::RenderStyle::setBoxShadow((uint64_t)a2, (unsigned int **)&v6, 0);
  result = v6;
  if (v6)
  {
    WebCore::ShadowData::~ShadowData(v6);
    return (WebCore::ShadowData *)WTF::fastFree(v4, v5);
  }
  return result;
}

float WebCore::RenderTheme::meterSizeForBounds(WebCore::RenderTheme *this, const WebCore::RenderMeter *a2, const WebCore::FloatRect *a3)
{
  return *((float *)a3 + 2);
}

uint64_t WebCore::RenderTheme::attachmentStyleSheet(WebCore::RenderTheme *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::RenderTheme::colorInputStyleSheet(WebCore::RenderTheme *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::RenderTheme::dataListStyleSheet(WebCore::RenderTheme *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

unsigned int *WebCore::RenderTheme::paintSliderTicks(unsigned int *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  const WebCore::RenderObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v9;
  WebCore::Node *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const WebCore::RenderObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  const WebCore::RenderObject *v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  float v32;
  int v33;
  float v34;
  float v35;
  float v36;
  double v37;
  int v38;
  double v39;
  unint64_t v40;
  int v41;
  float v42;
  double v43;
  uint64_t v44;
  WebCore::GraphicsContext *v45;
  const WebCore::RenderObject *v46;
  void *v47;
  int v48;
  const WebCore::RenderObject *v49;
  uint64_t v50;
  WebCore::Node *v51;
  double v52;
  double v53;
  double v54;
  WTF::StringImpl *v55;
  double v56;
  float v57;
  WebCore::Node *v58;
  __int16 v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  int v69;
  WebCore::Node *v70;
  uint64_t v71;
  float v72;
  float v73;
  WebCore::Node *v74;
  WTF::StringImpl *v75;

  if ((*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v4 = a2;
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v6 = *(_DWORD *)(v5 + 24);
        *(_DWORD *)(v5 + 24) = v6 + 2;
        if (*(_DWORD *)(*(_QWORD *)(v5 + 240) + 12) != 0x2000)
          goto LABEL_87;
        v9 = (uint64_t)this;
        this = (unsigned int *)WebCore::HTMLInputElement::dataList(v5, &v74);
        v10 = v74;
        if (v74)
        {
          WebCore::HTMLInputElement::minimum((WebCore::HTMLInputElement *)v5);
          v12 = v11;
          this = (unsigned int *)WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)v5);
          v14 = v13;
          v15 = v4;
          if ((*((_BYTE *)v4 + 45) & 2) != 0)
            v15 = *(const WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
          v16 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 11) + 32) + 148) >> 14) & 0x7F;
          if ((v16 - 15) > 0xFFFFFFFD)
          {
            v17 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 584))(*(_QWORD *)(v5 + 240))
                            + 64) & 0xFFFFFFFFFFFFLL;
            v69 = v16;
            if (v17)
            {
              if ((*(_BYTE *)(v17 + 45) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19646D1B0);
              }
              v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8);
              if (*(_BYTE *)(v18 + 8) == 11)
              {
                v19 = 0;
              }
              else if (*(_BYTE *)(v18 + 10))
              {
                v19 = (int)*(float *)(v18 + 4);
              }
              else
              {
                v19 = *(_DWORD *)(v18 + 4);
              }
              if (*(_BYTE *)(v18 + 16) == 11)
              {
                v20 = 0;
              }
              else if (*(_BYTE *)(v18 + 18))
              {
                v20 = (int)*(float *)(v18 + 12);
              }
              else
              {
                v20 = *(_DWORD *)(v18 + 12);
              }
              if (v16 == 13)
                v21 = v19;
              else
                v21 = v20;
            }
            else
            {
              v21 = 0;
            }
            v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 376))(v9);
            v23 = v4;
            if ((*((_BYTE *)v4 + 45) & 2) != 0)
              v23 = *(const WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
            v24 = *(float *)(*((_QWORD *)v23 + 13) + 184);
            v71 = 0;
            v25 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 592))(*(_QWORD *)(v5 + 240))
                            + 64);
            if ((v25 & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((v25 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19646D1D0);
              }
              v26 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(v25 & 0xFFFFFFFFFFFFLL), 0, 0);
              v27 = v26;
              v68 = v28;
              v29 = HIDWORD(v26);
            }
            else
            {
              v68 = 0;
              LODWORD(v29) = 0;
              v27 = 0;
            }
            v30 = WebCore::RenderObject::absoluteBoundingBoxRect(v4, 0, 0);
            v31 = *(float *)a4;
            v32 = *((float *)a4 + 1);
            if (v69 == 13)
            {
              v33 = (int)(float)(v31 + (float)(v27 - (int)v30));
              v34 = floorf(v24 * (float)(int)v22);
              v35 = floorf(v24 * (float)SHIDWORD(v22));
              v36 = floor(*((float *)a4 + 3) * 0.5+ v32+ (float)(v24 * (float)(*(int (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9)));
              *((float *)&v71 + 1) = v36;
              v37 = (double)v33;
              v38 = v21;
              v39 = (float)((float)v21 - (float)((float)(int)v22 * v24)) * 0.5 + v37;
              LODWORD(v40) = v68;
            }
            else
            {
              v41 = (int)(float)(v32 + (float)((int)v29 - HIDWORD(v30)));
              v34 = floorf(v24 * (float)SHIDWORD(v22));
              v35 = floorf(v24 * (float)(int)v22);
              v42 = floor(*((float *)a4 + 2) * 0.5+ v31+ (float)(v24 * (float)(*(int (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9)));
              v43 = (double)v41;
              v38 = v21;
              *(float *)&v71 = v42;
              v39 = (float)((float)v21 - (float)((float)(int)v22 * v24)) * 0.5 + v43;
              v40 = HIDWORD(v68);
            }
            v72 = v34;
            v73 = v35;
            v44 = *((_QWORD *)a3 + 10);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 96))(v44, 1);
            v45 = (WebCore::GraphicsContext *)*((_QWORD *)a3 + 10);
            v46 = v4;
            if ((*((_BYTE *)v4 + 45) & 2) != 0)
            {
              v46 = (const WebCore::RenderObject *)*((_QWORD *)v4 + 4);
              if (v46)
                v46 = (const WebCore::RenderObject *)*((_QWORD *)v46 + 1);
            }
            WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v46 + 80, 5, 0, (unint64_t *)&v75);
            WebCore::GraphicsContext::setFillColor(v45, (const WebCore::Color *)&v75);
            if (((unint64_t)v75 & 0x8000000000000) != 0)
            {
              v65 = (unsigned int *)((unint64_t)v75 & 0xFFFFFFFFFFFFLL);
              do
              {
                v66 = __ldaxr(v65);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, v65));
              if (!v67)
              {
                atomic_store(1u, v65);
                WTF::fastFree((WTF *)v65, v47);
              }
            }
            if (v69 == 13)
              goto LABEL_33;
            v49 = v4;
            if ((*((_BYTE *)v4 + 45) & 2) != 0)
              v49 = *(const WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
            if (((*((_DWORD *)v49 + 31) >> 13) & 6u) - 2 <= 3)
            {
LABEL_33:
              if ((*((_BYTE *)v4 + 45) & 2) != 0)
                v4 = *(const WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
              v48 = (*((unsigned __int8 *)v4 + 123) >> 2) & 1;
            }
            else
            {
              v48 = 1;
            }
            v10 = v74;
            v70 = v74;
            v50 = WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first((uint64_t *)&v70, (WTF::StringImpl *)v47);
            if (v50)
            {
              v51 = (WebCore::Node *)v50;
              v52 = (double)(int)v39;
              v53 = v14 - v12;
LABEL_42:
              v54 = COERCE_DOUBLE(WebCore::HTMLInputElement::listOptionValueAsDouble((WebCore::InputType **)v5, v51));
              if ((_BYTE)v55)
              {
                v56 = (v54 - v12) / v53;
                if (v48)
                  v56 = 1.0 - v56;
                v57 = round(v52 + (double)((int)v40 - v38) * v56);
                if (v69 == 13)
                  *(float *)&v71 = v57;
                else
                  *((float *)&v71 + 1) = v57;
                (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)a3 + 10) + 216))(*((_QWORD *)a3 + 10), &v71, 1);
              }
              while (1)
              {
                v58 = (WebCore::Node *)*((_QWORD *)v51 + 10);
                if (!v58)
                  break;
LABEL_50:
                while (1)
                {
                  v51 = v58;
                  v59 = *((_WORD *)v58 + 14);
                  if ((v59 & 0x10) != 0
                    && *(_QWORD *)(*((_QWORD *)v51 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                  {
                    break;
                  }
                  if ((v59 & 4) != 0)
                  {
                    v58 = (WebCore::Node *)*((_QWORD *)v51 + 10);
                    if (v58)
                      continue;
                  }
                  if (v51 == v10)
                    goto LABEL_82;
                  while (1)
                  {
                    v58 = (WebCore::Node *)*((_QWORD *)v51 + 7);
                    if (v58)
                      break;
                    v51 = (WebCore::Node *)*((_QWORD *)v51 + 4);
                    if (v51)
                      v60 = v51 == v10;
                    else
                      v60 = 1;
                    if (v60)
                      goto LABEL_82;
                  }
                }
                if (!*((_BYTE *)v51 + 112))
                {
                  v62 = *((_QWORD *)v51 + 4);
                  if (!v62
                    || (*(_WORD *)(v62 + 28) & 0x10) == 0
                    || *(_QWORD *)(*(_QWORD *)(v62 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
                    || !*(_BYTE *)(v62 + 112))
                  {
                    WebCore::HTMLOptionElement::value(v51, v55, &v75);
                    v63 = v75;
                    if (v75)
                    {
                      v64 = *((_DWORD *)v75 + 1);
                      v75 = 0;
                      if (*(_DWORD *)v63 == 2)
                      {
                        WTF::StringImpl::destroy(v63, v55);
                        if (v64)
                          goto LABEL_42;
                      }
                      else
                      {
                        *(_DWORD *)v63 -= 2;
                        if (v64)
                          goto LABEL_42;
                      }
                    }
                  }
                }
              }
              if (v51 != v10)
              {
                do
                {
                  v58 = (WebCore::Node *)*((_QWORD *)v51 + 7);
                  if (v58)
                    goto LABEL_50;
                  v51 = (WebCore::Node *)*((_QWORD *)v51 + 4);
                  if (v51)
                    v61 = v51 == v10;
                  else
                    v61 = 1;
                }
                while (!v61);
              }
LABEL_82:
              v10 = v74;
            }
            this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 104))(v44, 1);
            v74 = 0;
            if (!v10)
              goto LABEL_86;
          }
          else
          {
            v74 = 0;
          }
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef(v10, a2);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
LABEL_86:
        v6 = *(_DWORD *)(v5 + 24) - 2;
LABEL_87:
        if (v6)
        {
          *(_DWORD *)(v5 + 24) = v6;
        }
        else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        {
          return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        }
      }
    }
  }
  return this;
}

WTF::StringImpl **WebCore::FilteredElementDescendantIterator<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::operator++(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v14;

  while (1)
  {
    v3 = *a1;
    v4 = a1[1];
    v5 = (WTF::StringImpl *)*((_QWORD *)v4 + 10);
    if (!v5)
      break;
LABEL_2:
    while (1)
    {
      v6 = v5;
      v7 = *((_WORD *)v5 + 14);
      if ((v7 & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        break;
      }
      if ((v7 & 4) != 0)
      {
        v5 = (WTF::StringImpl *)*((_QWORD *)v6 + 10);
        if (v5)
          continue;
      }
      if (v6 == v3)
        goto LABEL_34;
      while (1)
      {
        v5 = (WTF::StringImpl *)*((_QWORD *)v6 + 7);
        if (v5)
          break;
        v6 = (WTF::StringImpl *)*((_QWORD *)v6 + 4);
        if (v6)
          v8 = v6 == v3;
        else
          v8 = 1;
        if (v8)
          goto LABEL_34;
      }
    }
    a1[1] = v6;
    if (!*((_BYTE *)v6 + 112))
    {
      v10 = *((_QWORD *)v6 + 4);
      if (!v10
        || (*(_WORD *)(v10 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
        || !*(_BYTE *)(v10 + 112))
      {
        WebCore::HTMLOptionElement::value(v6, a2, &v14);
        v11 = v14;
        if (v14)
        {
          v14 = 0;
          v12 = *((_DWORD *)v11 + 1);
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, a2);
            if (v12)
              return a1;
          }
          else
          {
            *(_DWORD *)v11 -= 2;
            if (v12)
              return a1;
          }
        }
      }
    }
  }
  if (v4 != v3)
  {
    do
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)v4 + 7);
      if (v5)
        goto LABEL_2;
      v4 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
      if (v4)
        v9 = v4 == v3;
      else
        v9 = 1;
    }
    while (!v9);
  }
LABEL_34:
  a1[1] = 0;
  return a1;
}

BOOL WebCore::RenderTheme::shouldHaveSpinButton(WebCore::RenderTheme *this, const WebCore::HTMLInputElement *a2)
{
  int v2;

  v2 = *(_DWORD *)(*((_QWORD *)a2 + 30) + 12);
  return (v2 & 0x142618) != 0 && v2 != 0x2000;
}

uint64_t WebCore::RenderTheme::adjustSliderThumbStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  return (*(uint64_t (**)(WebCore::RenderTheme *, WebCore::RenderStyle *, const WebCore::Element *))(*(_QWORD *)this + 288))(this, a2, a3);
}

int *WebCore::RenderTheme::adjustSwitchStyle(WebCore::RenderTheme *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int *result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  char v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  __int16 v20;
  uint64_t v21;
  unsigned int v22;
  char v23;

  {
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v4 = *((_QWORD *)a2 + 4) + 32;
  v5 = ((*((_DWORD *)a2 + 11) >> 13) & 6) - 2;
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  v7 = v6 + 12;
  if (v5 >= 4)
    v7 = v6 + 4;
  v14 = 0;
  v17 = 0;
  v15 = *(_BYTE *)(v7 + 4);
  v16 = *(_BYTE *)(v7 + 5);
  if (v15 - 2 >= 9)
  {
    if (v15 == 11)
    {
      v14 = *(_DWORD *)v7;
      WebCore::Length::ref((int *)&v14);
      v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
      v5 = ((*((_DWORD *)a2 + 11) >> 13) & 6) - 2;
    }
  }
  else
  {
    v17 = *(_BYTE *)(v7 + 6);
    v14 = *(_DWORD *)v7;
  }
  v8 = v5 >= 4;
  v9 = v6 + 4;
  v10 = v6 + 12;
  if (!v8)
    v10 = v9;
  v18 = 0;
  v20 = 0;
  v19 = *(_BYTE *)(v10 + 4);
  LOBYTE(v20) = *(_BYTE *)(v10 + 5);
  if (v19 <= 0xDu)
  {
    if (((1 << v19) & 0x7FC) != 0)
    {
      HIBYTE(v20) = *(_BYTE *)(v10 + 6);
      v18 = *(_DWORD *)v10;
    }
    else if (((1 << v19) & 0x3003) != 0)
    {
      v18 = 0;
    }
    else
    {
      v18 = *(_DWORD *)v10;
      WebCore::Length::ref((int *)&v18);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, unsigned int *, float))(WebCore::Theme::singleton(void)::theme + 8))(&v21, &WebCore::Theme::singleton(void)::theme, 30, v4, &v14, *(float *)(*((_QWORD *)a2 + 3) + 184));
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
  }
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
  }
  if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
    WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v21);
  else
    WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v21);
  if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
    result = (int *)WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v22);
  else
    result = (int *)WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v22);
  v12 = *((_QWORD *)a2 + 2) & 0x1FLL;
  if ((_DWORD)v12 == 3)
  {
    v13 = 20;
  }
  else
  {
    if ((_DWORD)v12 != 1)
      goto LABEL_27;
    v13 = 19;
  }
  *((_QWORD *)a2 + 2) = v13 | *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFE0;
LABEL_27:
  if (v23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
  }
  if (BYTE4(v21) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  return result;
}

uint64_t WebCore::RenderTheme::purgeCaches(WebCore::RenderTheme *this, void *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
  {
    *((_QWORD *)this + 1) = 0;
    return WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::deallocateTable(result, a2);
  }
  return result;
}

void WebCore::RenderTheme::platformColorsDidChange(WebCore::RenderTheme *this, void *a2)
{
  WebCore::Page *v3;

  v3 = (WebCore::Page *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    v3 = (WebCore::Page *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::deallocateTable((uint64_t)v3, a2);
  }
  WebCore::Page::updateStyleForAllPagesAfterGlobalChangeInEnvironment(v3);
}

uint64_t WebCore::RenderTheme::systemColor@<X0>(uint64_t result@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  BOOL v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  if (a2 == 228)
  {
    if ((a3 & 1) != 0)
    {
LABEL_3:
      v4 = (a3 & 4) == 0;
      v5 = -1004080;
      v6 = -7660971;
LABEL_4:
      if (v4)
        v5 = v6;
    }
    else
    {
LABEL_12:
      if ((a3 & 4) != 0)
        v9 = -65536;
      else
        v9 = -1179648;
      v5 = v9 | (((a3 << 29 >> 31) & 0x9E) << 8) | (a3 << 29 >> 31) & 0x9E;
    }
    v7 = bswap32(v5) | 0x1104000000000000;
  }
  else
  {
    switch(a2)
    {
      case 145:
      case 152:
      case 159:
      case 161:
      case 162:
      case 163:
      case 165:
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 272))(result, 174, a3);
      case 146:
      case 151:
      case 156:
      case 157:
      case 166:
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 272))(result, 168, a3);
      case 147:
      case 148:
      case 153:
      case 155:
      case 158:
      case 164:
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 272))(result, 167, a3);
      case 149:
      case 150:
      case 160:
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 272))(result, 172, a3);
      case 154:
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 272))(result, 183, a3);
      case 167:
      case 174:
      case 175:
        v8 = 0xFFFF0000FFFFFFFFLL;
        goto LABEL_10;
      case 168:
      case 173:
      case 176:
      case 178:
      case 180:
      case 182:
      case 185:
      case 226:
        goto LABEL_9;
      case 169:
        goto LABEL_12;
      case 170:
        goto LABEL_3;
      case 171:
      case 227:
        v4 = (a3 & 4) == 0;
        v5 = -6381825;
        v6 = -16776961;
        goto LABEL_4;
      case 172:
      case 179:
        v8 = 3233857791;
        goto LABEL_10;
      case 177:
        v8 = 3050700799;
        goto LABEL_10;
      case 181:
        v8 = 4294902015;
        goto LABEL_10;
      case 183:
        v8 = 2155905279;
        goto LABEL_10;
      case 184:
        v8 = 8060927;
        goto LABEL_10;
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
        goto LABEL_21;
      default:
        if (a2 == 18)
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 272))(result, 167, a3);
        if (a2 != 403)
        {
LABEL_21:
          *a4 = 0;
          return result;
        }
LABEL_9:
        v8 = 255;
LABEL_10:
        v7 = v8 & 0xFFFFFFFFFFFFLL | 0x1104000000000000;
        break;
    }
  }
  *a4 = v7;
  return result;
}

unsigned int *WebCore::RenderTheme::textSearchHighlightColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = *((_QWORD *)result + 14);
  if ((v7 & 0x4000000000000) == 0)
  {
    v8 = result;
    result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(&v19, a1, v5);
    v10 = *((_QWORD *)v8 + 14);
    v11 = v19;
    if ((v10 & 0x8000000000000) != 0)
    {
      if ((v19 & 0x8000000000000) == 0
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v10) != HIBYTE(v19)
        || BYTE6(v10) != BYTE6(v19))
      {
        result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
        }
        goto LABEL_7;
      }
    }
    else
    {
      if (v10 != v19 || (v19 & 0x8000000000000) != 0)
      {
LABEL_7:
        *((_QWORD *)v8 + 14) = v19;
LABEL_8:
        v7 = *((_QWORD *)v8 + 14);
        goto LABEL_9;
      }
      v11 = *((_QWORD *)v8 + 14);
    }
    if ((v11 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
    goto LABEL_8;
  }
LABEL_9:
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

void WebCore::RenderTheme::platformTextSearchHighlightColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000FFFF00FFLL;
}

unsigned int *WebCore::RenderTheme::annotationHighlightColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = *((_QWORD *)result + 15);
  if ((v7 & 0x4000000000000) != 0)
    goto LABEL_10;
  v8 = result;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 608))(&v21, a1, v5);
  result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 232))(&v22, a1, &v21, v5);
  v10 = *((_QWORD *)v8 + 15);
  v11 = v22;
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v22 & 0x8000000000000) == 0
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v10) != HIBYTE(v22)
      || BYTE6(v10) != BYTE6(v22))
    {
      result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v19 = __ldaxr(result);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, result));
      if (!v20)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
      goto LABEL_7;
    }
LABEL_13:
    if ((v11 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
    goto LABEL_8;
  }
  if (v10 == v22 && (v22 & 0x8000000000000) == 0)
  {
    v11 = *((_QWORD *)v8 + 15);
    goto LABEL_13;
  }
LABEL_7:
  *((_QWORD *)v8 + 15) = v22;
  v22 = 0;
LABEL_8:
  if ((v21 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(result);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, result));
    if (!v18)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  v7 = *((_QWORD *)v8 + 15);
LABEL_10:
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

void WebCore::RenderTheme::platformAnnotationHighlightColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000FFFF00FFLL;
}

unsigned int *WebCore::RenderTheme::defaultButtonTextColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = *((_QWORD *)result + 16);
  if ((v7 & 0x4000000000000) == 0)
  {
    v8 = result;
    result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 616))(&v19, a1, v5);
    v10 = *((_QWORD *)v8 + 16);
    v11 = v19;
    if ((v10 & 0x8000000000000) != 0)
    {
      if ((v19 & 0x8000000000000) == 0
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v10) != HIBYTE(v19)
        || BYTE6(v10) != BYTE6(v19))
      {
        result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
        }
        goto LABEL_7;
      }
    }
    else
    {
      if (v10 != v19 || (v19 & 0x8000000000000) != 0)
      {
LABEL_7:
        *((_QWORD *)v8 + 16) = v19;
LABEL_8:
        v7 = *((_QWORD *)v8 + 16);
        goto LABEL_9;
      }
      v11 = *((_QWORD *)v8 + 16);
    }
    if ((v11 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
    goto LABEL_8;
  }
LABEL_9:
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

uint64_t WebCore::RenderTheme::platformDefaultButtonTextColor(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, 226, a2);
}

int8x8_t WebCore::RenderTheme::datePlaceholderTextColor@<D0>(WebCore::RenderTheme *this@<X0>, const WebCore::Color *a2@<X1>, const WebCore::Color *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  float v11;
  int v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  int8x8_t v23;
  int8x8_t result;
  unsigned int v30;
  float v31;
  char v32;
  __int128 v33;
  __int128 v34;

  v7 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
  {
    v33 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v34 = &v32;
    *((_QWORD *)&v34 + 1) = &v33;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v7), (uint64_t)&v34);
  }
  else
  {
    v8 = bswap32(v7);
    *(float *)&v34 = (float)v8 / 255.0;
    *(float32x2_t *)((char *)&v34 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v8), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v34 + 3) = (float)HIBYTE(v8) / 255.0;
    v9 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v34);
  }
  v13 = 0.0;
  v14 = v11;
  *(_QWORD *)&v34 = __PAIR64__(v10, LODWORD(v9));
  HIDWORD(v34) = v12;
  v15 = WebCore::Color::luminance(a2);
  if (v15 >= WebCore::Color::luminance(a3))
    v16 = v14 * 0.66;
  else
    v16 = v14 + (float)((float)(100.0 - v14) * 0.66);
  *((float *)&v34 + 2) = v16;
  v31 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v34);
  v30 = v18;
  v20 = v19;
  v21 = 1.0;
  if (v17 <= 1.0)
    v21 = v17;
  if (v17 >= 0.0)
    v13 = v21;
  v22 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v22 = 1;
  v23 = vand_s8((int8x8_t)__PAIR64__(v30, LODWORD(v31)), vorr_s8((int8x8_t)vcltz_f32((float32x2_t)__PAIR64__(v30, LODWORD(v31))), (int8x8_t)vcgez_f32((float32x2_t)__PAIR64__(v30, LODWORD(v31)))));
  __asm { FMOV            V2.2S, #1.0 }
  result = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v23, (float32x2_t)_D2), _D2, v23), (int8x8_t)vcltz_f32((float32x2_t)v23));
  *(int8x8_t *)(v22 + 4) = result;
  *(float *)(v22 + 12) = v13;
  *(float *)(v22 + 16) = v20;
  *a4 = v22 | 0x110C000000000000;
  return result;
}

void WebCore::RenderTheme::platformSpellingMarkerColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000FF0000FFLL;
}

void WebCore::RenderTheme::platformDictationAlternativesMarkerColor(_QWORD *a1@<X8>)
{
  *a1 = 0x1104000000FF00FFLL;
}

_QWORD *WebCore::RenderTheme::autocorrectionReplacementMarkerColor@<X0>(WebCore::RenderTheme *this@<X0>, const WebCore::RenderText *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Document *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;

  v5 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v14 = *((_QWORD *)a2 + 4);
    if (v14)
      a2 = *(const WebCore::RenderText **)(v14 + 8);
    else
      a2 = 0;
  }
  v6 = WebCore::Document::styleColorOptions(v5, (const WebCore::RenderText *)((char *)a2 + 80));
  result = (_QWORD *)(*(uint64_t (**)(WebCore::RenderTheme *, uint64_t))(*(_QWORD *)this + 1072))(this, v6);
  v8 = result[19];
  if ((v8 & 0x4000000000000) == 0)
  {
    v9 = result;
    result = (*(_QWORD *(**)(unint64_t *__return_ptr, WebCore::RenderTheme *, uint64_t))(*(_QWORD *)this + 640))(&v21, this, v6);
    v11 = v9[19];
    v12 = v21;
    if ((v11 & 0x8000000000000) != 0)
    {
      if ((v21 & 0x8000000000000) == 0
        || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v11) != HIBYTE(v21)
        || BYTE6(v11) != BYTE6(v21))
      {
        result = (_QWORD *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr((unsigned int *)result);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)result));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (_QWORD *)WTF::fastFree((WTF *)result, v10);
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (v11 != v21 || (v21 & 0x8000000000000) != 0)
      {
LABEL_8:
        v9[19] = v21;
LABEL_9:
        v8 = v9[19];
        goto LABEL_10;
      }
      v12 = v9[19];
    }
    if ((v12 & 0x8000000000000) != 0)
    {
      result = (_QWORD *)(v12 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr((unsigned int *)result);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)result));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (_QWORD *)WTF::fastFree((WTF *)result, v10);
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  *a3 = v8;
  if ((v8 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  return result;
}

void WebCore::RenderTheme::platformAutocorrectionReplacementMarkerColor(_QWORD *a1@<X8>)
{
  *a1 = 0x1104000000FF00FFLL;
}

void WebCore::RenderTheme::platformGrammarMarkerColor(_QWORD *a1@<X8>)
{
  *a1 = 0x1104000000FF00FFLL;
}

unsigned int *WebCore::RenderTheme::documentMarkerLineColor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned int *result;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;

  v8 = a2;
  if ((*(_BYTE *)(a2 + 45) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
  }
  result = (unsigned int *)WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8), (const WebCore::RenderStyle *)(v8 + 80));
  switch(a3)
  {
    case 0:
    case 4:
      v10 = result;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, result);
      v11 = *((_QWORD *)result + 18);
      if ((v11 & 0x4000000000000) != 0)
        goto LABEL_11;
      v12 = result;
      result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 632))(&v49, a1, v10);
      v14 = *((_QWORD *)v12 + 18);
      v15 = v49;
      if ((v14 & 0x8000000000000) != 0)
      {
        if ((v49 & 0x8000000000000) == 0
          || *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v14) != HIBYTE(v49)
          || BYTE6(v14) != BYTE6(v49))
        {
          result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
          {
            v43 = __ldaxr(result);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, result));
          if (!v44)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
          }
          goto LABEL_9;
        }
      }
      else
      {
        if (v14 != v49 || (v49 & 0x8000000000000) != 0)
        {
LABEL_9:
          *((_QWORD *)v12 + 18) = v49;
          goto LABEL_10;
        }
        v15 = *((_QWORD *)v12 + 18);
      }
      if ((v15 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v37 = __ldaxr(result);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, result));
        if (!v38)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
        }
      }
LABEL_10:
      v11 = *((_QWORD *)v12 + 18);
LABEL_11:
      *a4 = v11;
      if ((v11 & 0x8000000000000) != 0)
      {
        v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      return result;
    case 1:
      v19 = result;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, result);
      v20 = *((_QWORD *)result + 17);
      if ((v20 & 0x4000000000000) != 0)
        goto LABEL_24;
      v21 = result;
      result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 624))(&v49, a1, v19);
      v23 = *((_QWORD *)v21 + 17);
      v24 = v49;
      if ((v23 & 0x8000000000000) != 0)
      {
        if ((v49 & 0x8000000000000) == 0
          || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v23) != HIBYTE(v49)
          || BYTE6(v23) != BYTE6(v49))
        {
          result = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
          do
          {
            v45 = __ldaxr(result);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, result));
          if (!v46)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
          }
          goto LABEL_22;
        }
      }
      else
      {
        if (v23 != v49 || (v49 & 0x8000000000000) != 0)
        {
LABEL_22:
          *((_QWORD *)v21 + 17) = v49;
          goto LABEL_23;
        }
        v24 = *((_QWORD *)v21 + 17);
      }
      if ((v24 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
        do
        {
          v39 = __ldaxr(result);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, result));
        if (!v40)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
        }
      }
LABEL_23:
      v20 = *((_QWORD *)v21 + 17);
LABEL_24:
      *a4 = v20;
      if ((v20 & 0x8000000000000) != 0)
      {
        v26 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
      }
      return result;
    case 2:
      v28 = result;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, result);
      v29 = *((_QWORD *)result + 20);
      if ((v29 & 0x4000000000000) != 0)
        goto LABEL_36;
      v30 = result;
      result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 648))(&v49, a1, v28);
      v32 = *((_QWORD *)v30 + 20);
      v33 = v49;
      if ((v32 & 0x8000000000000) != 0)
      {
        if ((v49 & 0x8000000000000) == 0
          || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v32) != HIBYTE(v49)
          || BYTE6(v32) != BYTE6(v49))
        {
          result = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
          do
          {
            v47 = __ldaxr(result);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, result));
          if (!v48)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v31);
          }
          goto LABEL_34;
        }
      }
      else
      {
        if (v32 != v49 || (v49 & 0x8000000000000) != 0)
        {
LABEL_34:
          *((_QWORD *)v30 + 20) = v49;
          goto LABEL_35;
        }
        v33 = *((_QWORD *)v30 + 20);
      }
      if ((v33 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
        do
        {
          v41 = __ldaxr(result);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, result));
        if (!v42)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v31);
        }
      }
LABEL_35:
      v29 = *((_QWORD *)v30 + 20);
LABEL_36:
      *a4 = v29;
      if ((v29 & 0x8000000000000) != 0)
      {
        v35 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      return result;
    case 3:
      return (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1080))(a1, a2);
    default:
      *a4 = 0x1104000000000000;
      return result;
  }
}

uint64_t WebCore::RenderTheme::focusRingColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = a2;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v8 = (unint64_t *)(result + 32);
  v7 = *(_QWORD *)(result + 32);
  if ((v7 & 0x4000000000000) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, v5);
    result = (uint64_t)WebCore::Color::operator=(v8, &v14);
    if ((v14 & 0x8000000000000) != 0)
    {
      result = v14 & 0xFFFFFFFFFFFFLL;
      do
      {
        v12 = __ldaxr((unsigned int *)result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)result));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
    v7 = *v8;
  }
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  return result;
}

void WebCore::RenderTheme::fileListDefaultLabel(uint64_t a1@<X8>, int a2@<W1>)
{
  if (a2)
    WebCore::fileButtonNoFilesSelectedLabel(a1);
  else
    WebCore::fileButtonNoFileSelectedLabel(a1);
}

WTF::StringImpl *WebCore::RenderTheme::fileListNameForWidth@<X0>(WTF::StringImpl *this@<X0>, const WebCore::FileList *a2@<X1>, const WebCore::FontCascade *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (a4 <= 0)
  {
    *a6 = 0;
  }
  else
  {
    v7 = *((_DWORD *)a2 + 7);
    if (v7 == 1)
    {
      v8 = *(WTF::StringImpl **)(**((_QWORD **)a2 + 2) + 144);
      if (v8)
        *(_DWORD *)v8 += 2;
      v10 = v8;
    }
    else if (v7)
    {
      WebCore::multipleFileUploadText((WebCore *)*((unsigned int *)a2 + 7), (uint64_t)&v10);
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, uint64_t, const WebCore::FontCascade *))(*(_QWORD *)this + 440))(&v10, this, a5, a3);
    }
    WebCore::truncateString((uint64_t)a6, (uint64_t)&v10);
    this = v10;
    v10 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WebCore::RenderTheme::paintSystemPreviewBadge(WebCore::RenderTheme *this, WebCore::Image *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  uint64_t v5;
  float v6;
  float v8;
  __int128 v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  float v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, 1);
  v6 = *((float *)a4 + 2);
  if (v6 >= 32.0 && *((float *)a4 + 3) >= 32.0)
  {
    v8 = *((float *)a4 + 1);
    v16[0] = (float)(v6 + *(float *)a4) + -24.0;
    v16[1] = v8 + 8.0;
    v17 = xmmword_1969FD360;
    *(_QWORD *)&v9 = 0x4100000041000000;
    *((_QWORD *)&v9 + 1) = 0x4100000041000000;
    v18 = v9;
    v19 = 0x4100000041000000;
    v15 = 0x11040000FF0000FFLL;
    (*(void (**)(uint64_t, float *, uint64_t *, uint64_t))(*(_QWORD *)v5 + 264))(v5, v16, &v15, 1);
    if ((v15 & 0x8000000000000) != 0)
    {
      v12 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, 1);
}

void WebCore::RenderTheme::platformTapHighlightColor(_QWORD *a1@<X8>)
{
  *a1 = 0x1104000000000066;
}

WTF::StringImpl *WebCore::quoteAndEscapeNonPrintables@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  _BYTE *v6;
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  char *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *result;
  int v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  char v50;
  __int16 v51;
  _DWORD __n[5];
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  LOBYTE(v51) = 34;
  WTF::StringBuilder::append();
  if ((_DWORD)a2)
  {
    v8 = 0;
    v9 = 0uLL;
    do
    {
      if ((a2 & 0xFF00000000) != 0)
        v10 = *(unsigned __int8 *)(a1 + v8);
      else
        v10 = *(unsigned __int16 *)(a1 + 2 * v8);
      if (v10 > 91)
      {
        if (v10 == 160)
        {
LABEL_13:
          LOBYTE(v51) = 32;
          if (v48)
          {
            v11 = v49;
            if (v49 < *((_DWORD *)v48 + 1) && v47 == 0)
            {
              v15 = *((_DWORD *)v48 + 4);
              v16 = *((_QWORD *)v48 + 1);
              ++v49;
              if ((v15 & 4) != 0)
                *(_BYTE *)(v16 + v11) = 32;
              else
                *(_WORD *)(v16 + 2 * v11) = 32;
              goto LABEL_20;
            }
          }
LABEL_18:
          v43 = v7;
          v45 = v9;
          WTF::StringBuilder::append();
          goto LABEL_19;
        }
        if (v10 == 92)
          goto LABEL_18;
      }
      else
      {
        if (v10 == 10)
          goto LABEL_13;
        if (v10 == 34)
          goto LABEL_18;
      }
      if ((v10 - 32) > 0x5E)
      {
        v44 = v7;
        v46 = v9;
        WTF::Internal::appendHex();
        __n[0] = v17;
        v18 = v48;
        if ((v48 || (v18 = v47) != 0) && (*((_BYTE *)v18 + 16) & 4) == 0)
        {
          v19 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v47);
          v7 = v44;
          v9 = v46;
          if (v19)
          {
            *(_DWORD *)v19 = 7864412;
            *(_WORD *)(v19 + 4) = 123;
            v20 = v19 + 6;
            v21 = __n[0];
            v22 = (int8x16_t *)((char *)__n - __n[0]);
            if (__n[0] >= 0x40u)
            {
              v23 = (char *)(v20 + 2 * (__n[0] & 0xFFFFFFC0));
              v30 = (char *)(v19 + 6);
              do
              {
                v53.val[0] = *v22;
                v31 = v22[1];
                v54.val[0] = v22[2];
                v32 = v22[3];
                v22 += 4;
                v7 = v32;
                v54.val[1] = v46;
                v55.val[0] = v31;
                v53.val[1] = v46;
                v33 = v30;
                vst2q_s8(v33, v53);
                v33 += 32;
                v55.val[1] = v46;
                vst2q_s8(v33, v55);
                v34 = v30 + 64;
                vst2q_s8(v34, v54);
                v35 = v30 + 96;
                vst2q_s8(v35, *(int8x16x2_t *)v7.i8);
                v30 += 128;
              }
              while (v30 != v23);
            }
            else
            {
              v23 = (char *)(v19 + 6);
            }
            v24 = (char *)(v20 + 2 * v21);
            while (v23 != v24)
            {
              v25 = v22->u8[0];
              v22 = (int8x16_t *)((char *)v22 + 1);
              *(_WORD *)v23 = v25;
              v23 += 2;
            }
            *(_WORD *)(v20 + 2 * __n[0]) = 125;
          }
        }
        else
        {
          v26 = MEMORY[0x19AEA4824](&v47);
          v7 = v44;
          v9 = v46;
          if (v26)
          {
            *(_BYTE *)(v26 + 2) = 123;
            *(_WORD *)v26 = 30812;
            v27 = (_BYTE *)(v26 + 3);
            if (__n[0])
            {
              v6 = (char *)__n - __n[0];
              if (__n[0] == 1)
              {
                *v27 = *v6;
              }
              else
              {
                memcpy((void *)(v26 + 3), v6, __n[0]);
                v7 = v44;
                v9 = v46;
              }
            }
            v27[__n[0]] = 125;
          }
        }
        goto LABEL_20;
      }
      v51 = v10;
      if (v48)
      {
        v13 = v49;
        if (v49 < *((_DWORD *)v48 + 1) && v47 == 0)
        {
          v28 = *((_DWORD *)v48 + 4);
          v29 = *((_QWORD *)v48 + 1);
          ++v49;
          if ((v28 & 4) != 0)
            *(_BYTE *)(v29 + v13) = v10;
          else
            *(_WORD *)(v29 + 2 * v13) = v10;
          goto LABEL_20;
        }
      }
      v43 = v7;
      v45 = v9;
      WTF::StringBuilder::append();
LABEL_19:
      v7 = v43;
      v9 = v45;
LABEL_20:
      ++v8;
    }
    while (v8 != a2);
  }
  LOBYTE(v51) = 34;
  if (v48 && ((v36 = v49, v49 < *((_DWORD *)v48 + 1)) ? (v37 = v47 == 0) : (v37 = 0), v37))
  {
    v41 = *((_DWORD *)v48 + 4);
    v42 = *((_QWORD *)v48 + 1);
    ++v49;
    if ((v41 & 4) != 0)
      *(_BYTE *)(v42 + v36) = 34;
    else
      *(_WORD *)(v42 + 2 * v36) = 34;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v38 = v47;
  if (v47
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v47),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v47),
        (v38 = v47) != 0))
  {
    *(_DWORD *)v38 += 2;
  }
  *a3 = v38;
  v39 = v48;
  v48 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v39 -= 2;
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::writeDebugInfo(int a1, WebCore::SVGBoundingBoxComputation *this, double a3, __int16 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t i;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  const WebCore::RenderLayerModelObject *v22;
  double v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  if ((a4 & 0x80) != 0 && (*((_BYTE *)this + 45) & 1) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 28) & 8) != 0)
      {
        v7 = *(_QWORD *)(v6 + 104);
        if (v7)
        {
          if (!*(_QWORD *)(v7 + 24))
            goto LABEL_89;
          WTF::TextStream::operator<<();
          v8 = *(_QWORD *)(v6 + 104);
          if (v8 && *(_QWORD *)(v8 + 24))
          {
            v32 = *(_DWORD *)(v8 + 4);
            if ((v32 & 1) != 0)
            {
              v33 = *(uint64_t **)(v8 + 40);
              LODWORD(v34) = *(_DWORD *)(v8 + 52);
            }
            else
            {
              v33 = (uint64_t *)(v8 + 32);
              LODWORD(v34) = v32 >> 5;
            }
            if ((_DWORD)v34)
            {
              v34 = v34;
              do
              {
                v35 = *v33;
                if (*v33 == WebCore::HTMLNames::idAttr
                  || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                  && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                {
                  break;
                }
                v33 += 2;
                --v34;
              }
              while (v34);
            }
          }
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v7 = *(_QWORD *)(v6 + 104);
          if (v7)
          {
LABEL_89:
            if (*(_QWORD *)(v7 + 16))
            {
              WTF::TextStream::operator<<();
              v9 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 16);
              if (v9 && *(_DWORD *)(v9 + 12))
              {
                WTF::TextStream::operator<<();
                v10 = 1;
                for (i = 24; ; i += 8)
                {
                  v12 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 16);
                  if (v12)
                    v12 = *(unsigned int *)(v12 + 12);
                  if (v10 >= v12)
                    break;
                  WTF::TextStream::operator<<();
                  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 104) + 16) + 12) <= v10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19646F330);
                  }
                  WTF::TextStream::operator<<();
                  ++v10;
                }
              }
              WTF::TextStream::operator<<();
            }
          }
        }
      }
    }
  }
  if ((a4 & 0x400) != 0)
  {
    v13 = *((_DWORD *)this + 5);
    v14 = v13 & 0x78;
    if ((v13 & 0x78) != 0)
    {
      WTF::TextStream::operator<<();
      v13 = *((_DWORD *)this + 5);
    }
    if ((v13 & 8) != 0)
    {
      WTF::TextStream::operator<<();
      v15 = *((_DWORD *)this + 5);
      if ((v15 & 0x10) == 0)
      {
        if ((v15 & 0x20) != 0)
        {
LABEL_58:
          WTF::TextStream::operator<<();
LABEL_59:
          WTF::TextStream::operator<<();
          if ((*((_DWORD *)this + 5) & 0x40) == 0)
            goto LABEL_31;
LABEL_60:
          WTF::TextStream::operator<<();
          goto LABEL_61;
        }
LABEL_30:
        if ((v15 & 0x40) == 0)
          goto LABEL_31;
        goto LABEL_60;
      }
      WTF::TextStream::operator<<();
    }
    else if ((v13 & 0x10) == 0)
    {
      if ((v13 & 0x20) == 0)
      {
        if ((v13 & 0x40) != 0)
        {
LABEL_61:
          WTF::TextStream::operator<<();
          if (!v14)
            goto LABEL_33;
LABEL_32:
          WTF::TextStream::operator<<();
          goto LABEL_33;
        }
LABEL_31:
        if (!v14)
          goto LABEL_33;
        goto LABEL_32;
      }
      goto LABEL_59;
    }
    WTF::TextStream::operator<<();
    v15 = *((_DWORD *)this + 5);
    if ((v15 & 0x20) != 0)
      goto LABEL_58;
    goto LABEL_30;
  }
LABEL_33:
  if ((a4 & 8) != 0)
  {
    if ((*((_BYTE *)this + 45) & 4) != 0)
    {
      v16 = *((_QWORD *)this + 24);
      v17 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
      if (!v16)
        v17 = 0;
      if (v17)
      {
        if (!v16)
          WebCore::RenderBox::flippedClientBoxRect(this);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v18 = *((_QWORD *)this + 24);
        if (v18)
        {
          v26 = *(_QWORD *)(v18 + 20);
          v27 = *(_QWORD *)(v18 + 28);
          if ((v26 & 0x80000000) != 0)
            goto LABEL_71;
          v28 = *((_QWORD *)this + 20);
          v29 = v26 + v27;
          if (__OFADD__((_DWORD)v26, (_DWORD)v27))
            v29 = 0x7FFFFFFF;
          if (v29 > (int)v28 || v26 < 0)
            goto LABEL_71;
          v30 = HIDWORD(v28);
          v31 = HIDWORD(v26) + HIDWORD(v27);
          if (__OFADD__(HIDWORD(v26), HIDWORD(v27)))
            v31 = 0x7FFFFFFF;
          if (v31 > (int)v30)
          {
LABEL_71:
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
          }
        }
      }
    }
    if ((*((_BYTE *)this + 52) & 7) == 4 && (*((_BYTE *)this + 53) & 1) == 0)
    {
      v20 = *((_QWORD *)this + 20);
      v21 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, this, a3);
      if ((v21 & 0x80000000) != 0)
        goto LABEL_54;
      v24 = v21 + (_DWORD)v22;
      if (__OFADD__((_DWORD)v21, (_DWORD)v22))
        v24 = 0x7FFFFFFF;
      if (v24 > (int)v20 || (v21 & 0x8000000000000000) != 0)
        goto LABEL_54;
      v25 = HIDWORD(v21) + HIDWORD(v22);
      if (__OFADD__(HIDWORD(v21), HIDWORD(v22)))
        v25 = 0x7FFFFFFF;
      if (v25 > SHIDWORD(v20))
      {
LABEL_54:
        WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, v22, v23);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
      }
    }
  }
}

unsigned int *WebCore::RenderTreeAsText::writeRenderObject(WTF::TextStream &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17[4];
  WTF::StringImpl **v18;

  if (!*a2)
    return (unsigned int *)WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  *(double *)v17 = (float)((float)*a2 * 0.015625);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*a3 <= 9)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v8 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v8 + 45) & 2) != 0)
    v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
  v16 = *(_QWORD *)(v8 + 112) + 328;
  v17[0] = (WTF::StringImpl *)&v16;
  v17[1] = (WTF::StringImpl *)&v16;
  v17[2] = (WTF::StringImpl *)&v16;
  v17[3] = (WTF::StringImpl *)&v16;
  v9 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v9 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
    return result;
  }
  v18 = v17;
  ((void (*)(uint64_t *__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v9])(&v15, &v18, a4);
  WebCore::serializationForRenderTreeAsText((WebCore *)&v15, (uint64_t *)v17);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = (unsigned int *)v17[0];
  v17[0] = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
    else
      *result -= 2;
  }
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_15;
  return result;
}

void WebCore::write(WTF::TextStream *a1, uint64_t a2, unsigned __int16 a3)
{
  int v6;
  float *v7;
  int v8;
  WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  WTF::StringImpl *v14;
  double v16;
  double v17;
  float v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  WTF::String *v41;
  __n128 v42;
  uint64_t v43;
  _QWORD *Attribute;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  const char *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  signed int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  WebCore::SVGPolyElement **v61;
  const WebCore::SVGGraphicsElement *v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  WTF::StringImpl *v84;
  _BOOL4 v85;
  int v86;
  _BOOL4 v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  WTF::StringImpl *v93;
  _BOOL4 v94;
  int v95;
  _BOOL4 v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  char v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL4 v123;
  _BOOL4 v124;
  BOOL v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BOOL4 v136;
  _BOOL4 v137;
  BOOL v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL4 v149;
  _BOOL4 v150;
  BOOL v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  float v158;
  float v159;
  double v160;
  int v161;
  unsigned __int8 *v162;
  int v163;
  float v164;
  float v165;
  double v166;
  int v167;
  unsigned __int8 *v168;
  int v169;
  float v170;
  float v171;
  double v172;
  int v173;
  unsigned __int8 *v174;
  int v175;
  float v176;
  float v177;
  double v178;
  int v179;
  int v180;
  WebCore::RenderObject *v181;
  double v182;
  double v183;
  float v184;
  uint64_t v185;
  uint64_t i;
  uint64_t v187;
  uint64_t v188;
  WebCore::LayoutIntegration::LineLayout *v189;
  int v190;
  BOOL v192;
  float v193;
  float v194;
  float v195;
  WebCore::RenderObject *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  float v212;
  float v213;
  float v214;
  float v215;
  double v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  unsigned int *v231;
  BOOL v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned __int8 *v248;
  int v249;
  unint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  const char *v274;
  const char *v275;
  float *v276;
  float *v277;
  WTF::StringImpl *v278;
  int v279;
  float v280;
  unsigned __int8 v281;
  WTF::StringImpl *v282[2];
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int8x16_t v287;
  WTF::StringImpl *v288;
  unsigned int v289;
  char v290;
  WTF::StringImpl *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t v295[2];

  if ((*(_BYTE *)(a2 + 52) & 7) == 4)
  {
    v8 = *(unsigned __int8 *)(a2 + 53);
    if ((~v8 & 0x11) == 0)
    {
      WebCore::write(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3);
      return;
    }
    v7 = (float *)(a2 + 46);
    v6 = *(unsigned __int8 *)(a2 + 46);
    if (v6 == 68)
    {
LABEL_3:
      WebCore::writeSVGGradientStop(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3);
      return;
    }
    if ((~v8 & 9) == 0)
    {
      WebCore::writeSVGResourceContainer(a1, a2, a3);
      return;
    }
    if ((~v8 & 3) == 0)
    {
      WebCore::writeSVGContainer(a1, a2, a3);
      return;
    }
  }
  else
  {
    v7 = (float *)(a2 + 46);
    v6 = *(unsigned __int8 *)(a2 + 46);
    if (v6 == 68)
      goto LABEL_3;
  }
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      WebCore::writeStandardPrefix(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3, 1);
      WebCore::writePositionAndStyle(a1, (_BYTE *)a2, a3);
      WTF::TextStream::operator<<();
      WebCore::writeResources((uint64_t)a1, a2, a3, v16, v17, v18);
      return;
    }
    if (v6 == 103)
    {
      WebCore::write(a1, a2, a3);
      return;
    }
  }
  else
  {
    if (v6 == 72)
    {
      WebCore::writeSVGInlineText(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3);
      return;
    }
    if (v6 == 85)
    {
      WebCore::writeSVGText(a1, a2, a3);
      return;
    }
  }
  WTF::TextStream::writeIndent(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  WTF::TextStream::operator<<();
  if ((a3 & 0x40) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  v10 = *(_BYTE *)(a2 + 45);
  v11 = a2;
  if ((v10 & 2) != 0)
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 8) + 64))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v10 = *(_BYTE *)(a2 + 45);
  }
  if ((v10 & 1) == 0)
  {
    v12 = *(_WORD **)(*(_QWORD *)(a2 + 24) + 8);
    if (v12)
    {
      v13 = v12[14] & 0xF000;
      if (v13 == 0x8000)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v291;
      }
      else
      {
        if (v13 != 36864)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v12 + 104))(&v278);
LABEL_33:
          if ((*(_BYTE *)(a2 + 45) & 1) == 0
            && (v19 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 24) + 8)) != 0
            && (~v19[14] & 0x408) == 0
            && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v19 + 368))(v19)
            || (v20 = *(_QWORD *)(a2 + 32)) != 0
            && (v21 = *(_QWORD *)(v20 + 8)) != 0
            && (*(_BYTE *)(v21 + 45) & 1) == 0
            && (v22 = *(unsigned __int16 **)(*(_QWORD *)(v21 + 24) + 8)) != 0
            && (~v22[14] & 0x408) == 0
            && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v22 + 368))(v22))
          {
            v23 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
            if (*MEMORY[0x1E0CBF3B8])
              *(_DWORD *)v23 += 2;
            v24 = v278;
            v278 = v23;
            if (!v24)
            {
LABEL_49:
              if (!v23)
                goto LABEL_50;
              if (!*((_DWORD *)v23 + 1))
                goto LABEL_50;
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              if ((*(_BYTE *)(a2 + 45) & 1) != 0)
                goto LABEL_50;
              v43 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
              if (!v43)
                goto LABEL_50;
              if ((*(_WORD *)(v43 + 28) & 0x10) == 0)
                goto LABEL_50;
              if (*(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
                goto LABEL_50;
              Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v43, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, v40, v41, v42);
              if (!MEMORY[0x19AEA53F4](*Attribute, "Apple-style-span", 16))
                goto LABEL_50;
              if ((*(_WORD *)(v43 + 28) & 4) != 0)
              {
                if (*(_QWORD *)(v43 + 80))
                {
                  v45 = *(_QWORD *)(v43 + 104);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 8);
                    if (v46)
                    {
                      v47 = *(_DWORD *)(v46 + 4);
                      if ((v47 & 8) != 0)
                      {
                        if (*(_DWORD *)(v46 + 28))
                          goto LABEL_50;
                      }
                      else if (v47 >> 4)
                      {
LABEL_50:
                        v25 = v278;
                        v278 = 0;
                        if (v25)
                        {
                          if (*(_DWORD *)v25 == 2)
                            WTF::StringImpl::destroy(v25, v9);
                          else
                            *(_DWORD *)v25 -= 2;
                        }
                        v10 = *(_BYTE *)(a2 + 45);
                        goto LABEL_54;
                      }
                    }
                  }
                }
              }
              WTF::TextStream::operator<<();
              goto LABEL_50;
            }
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v9);
            else
              *(_DWORD *)v24 -= 2;
          }
          v23 = v278;
          goto LABEL_49;
        }
        v14 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      v278 = v14;
      goto LABEL_33;
    }
  }
LABEL_54:
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 + 680) + 680) >> 47) & (*(_BYTE *)(v26 + 3419) != 0);
  v287 = 0uLL;
  if ((v10 & 2) != 0)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 672))(a2);
    goto LABEL_89;
  }
  v28 = *(unsigned __int8 *)(a2 + 46);
  if (v28 == 17)
  {
    if ((*(_BYTE *)(a2 + 52) & 7) != 2 || (*(_BYTE *)(a2 + 53) & 1) == 0)
    {
      v29 = WebCore::RenderLineBreak::linesBoundingBox((WebCore::RenderLineBreak *)a2, v9);
LABEL_89:
      v48.i64[0] = v29;
      v48.i64[1] = v30;
      v49.i64[0] = 0xFE000000FE000000;
      v49.i64[1] = 0xFE000000FE000000;
      v50 = (int8x16_t)vcgtq_s32(v48, v49);
      v51.i64[0] = 0xFE000000FE000000;
      v51.i64[1] = 0xFE000000FE000000;
      v52.i64[0] = 0x8000000080000000;
      v52.i64[1] = 0x8000000080000000;
      v287 = vorrq_s8((int8x16_t)(*(_OWORD *)&v50 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v51, v48), v52, (int8x16_t)vshlq_n_s32(v48, 6uLL)), v50));
      LODWORD(v37) = v287.i32[2];
      LODWORD(v39) = v287.i32[3];
      goto LABEL_90;
    }
    if ((v10 & 0x20) == 0)
      goto LABEL_84;
LABEL_88:
    v29 = (uint64_t)WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)a2, v9);
    goto LABEL_89;
  }
  if ((v10 & 0x20) != 0)
    goto LABEL_88;
  if (v28 != 37)
  {
LABEL_84:
    if ((v10 & 4) != 0)
    {
      v37 = *(_QWORD *)(a2 + 160);
      v287.i64[0] = *(_QWORD *)(a2 + 152);
      v287.i64[1] = v37;
      v39 = HIDWORD(v37);
    }
    else
    {
      LODWORD(v39) = 0;
      if ((*(_BYTE *)(a2 + 52) & 7) == 4)
      {
        LODWORD(v37) = 0;
        if ((*(_BYTE *)(a2 + 53) & 1) == 0)
        {
          v37 = *(_QWORD *)(a2 + 160);
          v287.i64[0] = *(_QWORD *)(a2 + 152);
          v287.i64[1] = v37;
          v39 = HIDWORD(v37);
        }
      }
      else
      {
        LODWORD(v37) = 0;
      }
    }
    goto LABEL_90;
  }
  v31 = *(_DWORD *)(a2 + 156);
  v32 = *(_DWORD *)(a2 + 252);
  v33 = v31 + v32;
  if (__OFADD__(v31, v32))
    v33 = (v31 >> 31) + 0x7FFFFFFF;
  v34 = *(_DWORD *)(a2 + 164);
  v35 = __OFSUB__(v34, v32);
  v36 = v34 - v32;
  if (v35)
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  LODWORD(v37) = *(_DWORD *)(a2 + 160);
  v38 = *(_DWORD *)(a2 + 256);
  LODWORD(v39) = v36 - v38;
  if (__OFSUB__(v36, v38))
    LODWORD(v39) = (v36 >> 31) + 0x7FFFFFFF;
  v287.i32[0] = *(_DWORD *)(a2 + 152);
  *(uint64_t *)((char *)v287.i64 + 4) = __PAIR64__(v37, v33);
  v287.i32[3] = v39;
LABEL_90:
  v53 = (const char *)a3;
  v54 = WTF::TextStream::operator<<();
  if (v27)
  {
    WebCore::operator<<(v54);
  }
  else
  {
    v56 = (v287.i32[0] >> 6);
    if ((_DWORD)v37)
    {
      v57 = v287.i32[0] + v37;
      if (__OFADD__(v287.i32[0], (_DWORD)v37))
        v57 = ((unsigned __int32)v287.i32[0] >> 31) + 0x7FFFFFFF;
      if (v57 > 2147483583)
      {
        v58 = 0x1FFFFFF;
      }
      else if (v57 < 0)
      {
        v58 = -(-v57 >> 6);
      }
      else
      {
        v58 = (v57 + 63) >> 6;
      }
    }
    else
    {
      v58 = v287.i32[0] >> 6;
    }
    v59 = v287.i64[0] >> 38;
    if ((_DWORD)v39)
    {
      v60 = v287.i32[1] + v39;
      if (__OFADD__(v287.i32[1], (_DWORD)v39))
        v60 = ((unsigned __int32)v287.i32[1] >> 31) + 0x7FFFFFFF;
      if (v60 > 2147483583)
      {
        LODWORD(v59) = 0x1FFFFFF;
      }
      else if (v60 < 0)
      {
        LODWORD(v59) = -(-v60 >> 6);
      }
      else
      {
        LODWORD(v59) = (v60 + 63) >> 6;
      }
    }
    v291 = (WTF::StringImpl *)(v56 | (v287.i64[0] >> 38 << 32));
    v292 = (uint64_t *)((v58 - v56) | ((unint64_t)(v59
                                                                     - (v287.i64[0] >> 38)) << 32));
    WebCore::operator<<(v54);
  }
  if ((*(_BYTE *)(a2 + 52) & 7) != 4 || (*(_BYTE *)(a2 + 53) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 45) & 2) != 0)
      goto LABEL_391;
    if (*(_BYTE *)(a2 + 46) == 8)
    {
      WTF::TextStream::operator<<();
      WebCore::RenderFileUploadControl::fileTextValue((WTF::StringImpl *)a2, &v278);
      v63 = v278;
      if (v278)
      {
        v64 = *((_QWORD *)v278 + 1);
        v63 = *((_DWORD *)v278 + 1);
        v65 = ((unint64_t)*((unsigned int *)v278 + 4) >> 2) & 1;
      }
      else
      {
        v64 = 0;
        v65 = 1;
      }
      WebCore::quoteAndEscapeNonPrintables(v64, v63 | (v65 << 32), &v291);
      WTF::TextStream::operator<<();
      v67 = v291;
      v291 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v66);
        else
          *(_DWORD *)v67 -= 2;
      }
      v68 = v278;
      v278 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v66);
        else
          *(_DWORD *)v68 -= 2;
      }
    }
    v69 = *(_QWORD *)(a2 + 32);
    if (!v69 || (v70 = *(_QWORD *)(v69 + 8)) == 0)
    {
LABEL_202:
      if ((*(_BYTE *)(a2 + 45) & 8) == 0 || *(_BYTE *)(a2 + 46) == 17)
        goto LABEL_404;
      v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1000))(a2);
      v286 = v104;
      v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
      v285 = v105;
      v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1008))(a2);
      v284 = v106;
      v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1016))(a2);
      v283 = v107;
      v108 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v108 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      v109 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 88) + 24) + 200) + 5);
      if ((*(_BYTE *)(a2 + 45) & 1) == 0)
      {
        v110 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
        if (v110)
        {
          if ((*(_WORD *)(v110 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v110 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            if ((*(_BYTE *)(a2 + 45) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x196471714);
            }
            if ((*(_BYTE *)(a2 + 45) & 2) != 0)
              v111 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 124);
            else
              v111 = *(_DWORD *)(a2 + 124);
            v112 = (unsigned __int16)v111 >> 13;
            if ((v112 - 1) < 5)
            {
              if ((v111 & 0xE000) == 0x2000)
              {
                v273 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a2);
                if (__OFSUB__(v106, v273))
                  v106 = (v106 >> 31) + 0x7FFFFFFF;
                else
                  v106 -= v273;
                v284 = v106;
              }
              else if (v112 == 4 || v112 == 2)
              {
                v272 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a2);
                if (__OFSUB__(v107, v272))
                  v107 = (v107 >> 31) + 0x7FFFFFFF;
                else
                  v107 -= v272;
                v283 = v107;
              }
              else
              {
                v269 = a2;
                if ((*(_BYTE *)(a2 + 45) & 2) != 0)
                  v269 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
                v270 = (unsigned __int16)*(_DWORD *)(v269 + 124) >> 13;
                if (v270 == 5 || v270 == 3)
                {
                  v271 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a2);
                  if (__OFSUB__(v105, v271))
                    v105 = (v105 >> 31) + 0x7FFFFFFF;
                  else
                    v105 -= v271;
                  v285 = v105;
                }
              }
            }
            else
            {
              v113 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a2);
              if (__OFSUB__(v104, v113))
                v104 = (v104 >> 31) + 0x7FFFFFFF;
              else
                v104 -= v113;
              v286 = v104;
            }
          }
        }
      }
      if (!v104 && !v105 && !v106 && !v107)
      {
LABEL_344:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2)
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 928))(a2)
          && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2)
          && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 936))(a2)
          && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2))
        {
          goto LABEL_391;
        }
        WTF::TextStream::operator<<();
        v109 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24);
        v157 = *(unsigned __int8 *)(v109 + 76);
        if ((v157 & 0xFFFFFFF7) == 3)
        {
          v253 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1144))(a2);
          v157 = *(unsigned __int8 *)(v109 + 76);
          v158 = (float)v253 * 0.015625;
        }
        else
        {
          v158 = 0.0;
        }
        if (v157 == 4)
        {
          v159 = *(float *)(v109 + 72);
          if (!*(_BYTE *)(v109 + 78))
            v159 = (float)SLODWORD(v159);
          goto LABEL_354;
        }
        if (v157 == 3)
        {
          v212 = *(float *)(v109 + 72);
          if (!*(_BYTE *)(v109 + 78))
            v212 = (float)SLODWORD(v212);
          v159 = (float)(v158 * v212) / 100.0;
          goto LABEL_354;
        }
        if (v157 != 11)
        {
          v161 = 0;
          goto LABEL_357;
        }
        goto LABEL_530;
      }
      WTF::TextStream::operator<<();
      v282[0] = a1;
      v282[1] = (WTF::StringImpl *)a2;
      v114 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v114 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      v274 = v53;
      v276 = v7;
      v115 = *(_QWORD *)(*(_QWORD *)(v114 + 88) + 24);
      v291 = (WTF::StringImpl *)v295;
      v292 = v295;
      v293 = v295;
      v294 = v295;
      v116 = *(unsigned int *)(v115 + 160);
      if ((_DWORD)v116 == -1)
        goto LABEL_529;
      v288 = (WTF::StringImpl *)&v291;
      v53 = (const char *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix;
      ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v116])(&v278, &v288, v115 + 152);
      v280 = *(float *)(v115 + 168);
      v281 = *(_BYTE *)(v115 + 172);
      v117 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v117 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      v118 = *(_QWORD *)(*(_QWORD *)(v117 + 88) + 24);
      LOBYTE(v291) = *(_BYTE *)(v118 + 172) & 0xF;
      WebCore::RenderTreeAsText::writeRenderObject(WTF::TextStream &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v282, (int *)&v286, (char *)&v291, v118 + 152);
      v119 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v119 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      v7 = &v280;
      v120 = *(_QWORD *)(*(_QWORD *)(v119 + 88) + 24);
      v121 = *(unsigned int *)(v120 + 136);
      v123 = v279 == (_DWORD)v121 && v279 != -1;
      if ((_DWORD)v121 == -1 || !v123)
      {
        if ((_DWORD)v121 == -1)
          v124 = v279 == -1;
        else
          v124 = v123;
        if (!v124)
          goto LABEL_252;
      }
      else
      {
        v291 = (WTF::StringImpl *)&v288;
        if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v121])(&v291, v120 + 128, &v278) & 1) == 0)goto LABEL_252;
      }
      if (*(float *)(v120 + 144) == v280)
      {
        v125 = !(_DWORD)v109 || v105 == v104;
        v126 = v125;
        if (((v281 ^ *(_BYTE *)(v120 + 148)) & 0x1F) == 0 && v126)
          goto LABEL_265;
      }
LABEL_252:
      v127 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v127 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      v128 = *(_QWORD *)(*(_QWORD *)(v127 + 88) + 24);
      v291 = (WTF::StringImpl *)&v290;
      v292 = (uint64_t *)&v290;
      v293 = (uint64_t *)&v290;
      v294 = (uint64_t *)&v290;
      v129 = *(unsigned int *)(v128 + 136);
      if ((_DWORD)v129 == -1)
        goto LABEL_529;
      v295[0] = (uint64_t)&v291;
      ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v129])(&v288, v295, v128 + 128);
      if (v279 == -1)
      {
        if (v289 == -1)
        {
LABEL_262:
          v280 = *(float *)(v128 + 144);
          v281 = *(_BYTE *)(v128 + 148);
          v130 = a2;
          if ((*(_BYTE *)(a2 + 45) & 2) != 0)
            v130 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
          v131 = *(_QWORD *)(*(_QWORD *)(v130 + 88) + 24);
          LOBYTE(v291) = *(_BYTE *)(v131 + 148) & 0xF;
          WebCore::RenderTreeAsText::writeRenderObject(WTF::TextStream &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v282, (int *)&v285, (char *)&v291, v131 + 128);
LABEL_265:
          v132 = a2;
          if ((*(_BYTE *)(a2 + 45) & 2) != 0)
            v132 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
          v133 = *(_QWORD *)(*(_QWORD *)(v132 + 88) + 24);
          v134 = *(unsigned int *)(v133 + 184);
          v136 = v279 == (_DWORD)v134 && v279 != -1;
          if ((_DWORD)v134 == -1 || !v136)
          {
            if ((_DWORD)v134 == -1)
              v137 = v279 == -1;
            else
              v137 = v136;
            if (!v137)
              goto LABEL_290;
          }
          else
          {
            v291 = (WTF::StringImpl *)&v288;
            if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v134])(&v291, v133 + 176, &v278) & 1) == 0)goto LABEL_290;
          }
          if (*(float *)(v133 + 192) == v280)
          {
            v138 = !(_DWORD)v109 || v106 == v105;
            v139 = v138;
            if (((v281 ^ *(_BYTE *)(v133 + 196)) & 0x1F) == 0 && v139)
              goto LABEL_303;
          }
LABEL_290:
          v140 = a2;
          if ((*(_BYTE *)(a2 + 45) & 2) != 0)
            v140 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
          v141 = *(_QWORD *)(*(_QWORD *)(v140 + 88) + 24);
          v291 = (WTF::StringImpl *)&v290;
          v292 = (uint64_t *)&v290;
          v293 = (uint64_t *)&v290;
          v294 = (uint64_t *)&v290;
          v142 = *(unsigned int *)(v141 + 184);
          if ((_DWORD)v142 == -1)
            goto LABEL_529;
          v295[0] = (uint64_t)&v291;
          ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v142])(&v288, v295, v141 + 176);
          if (v279 == -1)
          {
            if (v289 == -1)
            {
LABEL_300:
              v280 = *(float *)(v141 + 192);
              v281 = *(_BYTE *)(v141 + 196);
              v143 = a2;
              if ((*(_BYTE *)(a2 + 45) & 2) != 0)
                v143 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
              v144 = *(_QWORD *)(*(_QWORD *)(v143 + 88) + 24);
              LOBYTE(v291) = *(_BYTE *)(v144 + 196) & 0xF;
              WebCore::RenderTreeAsText::writeRenderObject(WTF::TextStream &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v282, (int *)&v284, (char *)&v291, v144 + 176);
LABEL_303:
              v145 = a2;
              if ((*(_BYTE *)(a2 + 45) & 2) != 0)
                v145 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
              v146 = *(_QWORD *)(*(_QWORD *)(v145 + 88) + 24);
              v147 = *(unsigned int *)(v146 + 112);
              v149 = v279 == (_DWORD)v147 && v279 != -1;
              if ((_DWORD)v147 == -1 || !v149)
              {
                if ((_DWORD)v147 == -1)
                  v150 = v279 == -1;
                else
                  v150 = v149;
                if (!v150)
                  goto LABEL_328;
              }
              else
              {
                v291 = (WTF::StringImpl *)&v288;
                if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v147])(&v291, v146 + 104, &v278) & 1) == 0)goto LABEL_328;
              }
              if (*(float *)(v146 + 120) == v280)
              {
                v151 = !(_DWORD)v109 || v107 == v106;
                v152 = v151;
                if (((v281 ^ *(_BYTE *)(v146 + 124)) & 0x1F) == 0 && v152)
                {
LABEL_341:
                  WTF::TextStream::operator<<();
                  if (v279 != -1)
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v279])(&v291, &v278);
                  v53 = v274;
                  v7 = v276;
                  goto LABEL_344;
                }
              }
LABEL_328:
              v153 = a2;
              if ((*(_BYTE *)(a2 + 45) & 2) != 0)
                v153 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
              v109 = *(_QWORD *)(*(_QWORD *)(v153 + 88) + 24);
              v291 = (WTF::StringImpl *)&v290;
              v292 = (uint64_t *)&v290;
              v293 = (uint64_t *)&v290;
              v294 = (uint64_t *)&v290;
              v154 = *(unsigned int *)(v109 + 112);
              if ((_DWORD)v154 == -1)
                goto LABEL_529;
              v295[0] = (uint64_t)&v291;
              ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v154])(&v288, v295, v109 + 104);
              if (v279 == -1)
              {
                if (v289 == -1)
                {
LABEL_338:
                  v280 = *(float *)(v109 + 120);
                  v281 = *(_BYTE *)(v109 + 124);
                  v155 = a2;
                  if ((*(_BYTE *)(a2 + 45) & 2) != 0)
                    v155 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
                  v156 = *(_QWORD *)(*(_QWORD *)(v155 + 88) + 24);
                  LOBYTE(v291) = *(_BYTE *)(v156 + 124) & 0xF;
                  WebCore::RenderTreeAsText::writeRenderObject(WTF::TextStream &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v282, (int *)&v283, (char *)&v291, v156 + 104);
                  goto LABEL_341;
                }
              }
              else if (v289 == -1)
              {
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v279])(&v291, &v278);
                v279 = -1;
                goto LABEL_336;
              }
              v291 = (WTF::StringImpl *)&v278;
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                                                + v289))(&v291, &v278, &v288);
LABEL_336:
              if (v289 != -1)
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v289])(&v291, &v288);
              goto LABEL_338;
            }
          }
          else if (v289 == -1)
          {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v279])(&v291, &v278);
            v279 = -1;
            goto LABEL_298;
          }
          v291 = (WTF::StringImpl *)&v278;
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                                            + v289))(&v291, &v278, &v288);
LABEL_298:
          if (v289 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v289])(&v291, &v288);
          goto LABEL_300;
        }
      }
      else if (v289 == -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v279])(&v291, &v278);
        v279 = -1;
        goto LABEL_260;
      }
      v291 = (WTF::StringImpl *)&v278;
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                                        + v289))(&v291, &v278, &v288);
LABEL_260:
      if (v289 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v289])(&v291, &v288);
      goto LABEL_262;
    }
    if ((*(_BYTE *)(a2 + 45) & 2) == 0)
      v70 = a2;
    WebCore::RenderStyle::visitedDependentColor(v70 + 80, 5, 0, (uint64_t *)&v291);
    v71 = *(_QWORD *)(a2 + 32);
    if (v71)
      v71 = *(_QWORD *)(v71 + 8);
    WebCore::RenderStyle::visitedDependentColor(v71 + 80, 5, 0, (uint64_t *)&v278);
    if (((unint64_t)v278 & 0x8000000000000) != 0)
    {
      v231 = (unsigned int *)((unint64_t)v278 & 0xFFFFFFFFFFFFLL);
      if (((unint64_t)v291 & 0x8000000000000) != 0)
      {
        if (*(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)(((unint64_t)v291 & 0xFFFFFFFFFFFFLL)
                                                                                     + 4))
        {
          if (*(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)(((unint64_t)v291 & 0xFFFFFFFFFFFFLL)
                                                                                       + 8))
          {
            if (*(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)(((unint64_t)v291 & 0xFFFFFFFFFFFFLL)
                                                                                           + 0xC))
              v232 = *(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)(((unint64_t)v291 & 0xFFFFFFFFFFFFLL)
                                                                                                + 0x10)
                  && (((unint64_t)v291 ^ (unint64_t)v278) & 0xFE000000000000) == 0
                  && (unint64_t)v278 >> 56 == (unint64_t)v291 >> 56;
            else
              v232 = 0;
          }
          else
          {
            v232 = 0;
          }
        }
        else
        {
          v232 = 0;
        }
      }
      else
      {
        v232 = 0;
      }
      do
      {
        v243 = __ldaxr(v231);
        v244 = v243 - 1;
      }
      while (__stlxr(v244, v231));
      if (v244)
      {
        if (v232)
          goto LABEL_136;
      }
      else
      {
        atomic_store(1u, v231);
        WTF::fastFree((WTF *)v231, v72);
        if (v232)
          goto LABEL_136;
      }
    }
    else if (((unint64_t)v291 & 0x8000000000000) == 0
           && (_DWORD)v278 == (_DWORD)v291
           && (((unint64_t)v291 ^ (unint64_t)v278) & 0xFE000000000000) == 0)
    {
      goto LABEL_136;
    }
    WTF::TextStream::operator<<();
    WebCore::serializationForRenderTreeAsText((WebCore *)&v291, (uint64_t *)&v278);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v74 = v278;
    v278 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
LABEL_136:
    v75 = a2;
    if ((*(_BYTE *)(a2 + 45) & 2) != 0)
    {
      v75 = *(_QWORD *)(a2 + 32);
      if (v75)
        v75 = *(_QWORD *)(v75 + 8);
    }
    WebCore::RenderStyle::visitedDependentColor(v75 + 80, 61, 0, (uint64_t *)&v278);
    v76 = *(_QWORD *)(a2 + 32);
    if (v76)
      v76 = *(_QWORD *)(v76 + 8);
    WebCore::RenderStyle::visitedDependentColor(v76 + 80, 61, 0, (uint64_t *)&v288);
    v78 = v278;
    if (((unint64_t)v288 & 0x8000000000000) != 0)
    {
      v233 = (unsigned int *)((unint64_t)v288 & 0xFFFFFFFFFFFFLL);
      if (((unint64_t)v278 & 0x8000000000000) != 0
        && *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL)
                                                                                   + 4)
        && *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL)
                                                                                   + 8)
        && *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL)
                                                                                     + 0xC)
        && *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)(((unint64_t)v278 & 0xFFFFFFFFFFFFLL)
                                                                                      + 0x10)
        && (unint64_t)v288 >> 56 == (unint64_t)v278 >> 56
        && (((unint64_t)v278 ^ (unint64_t)v288) & 0xFE000000000000) == 0)
      {
        do
        {
          v245 = __ldaxr(v233);
          v246 = v245 - 1;
        }
        while (__stlxr(v246, v233));
        if (!v246)
        {
          atomic_store(1u, v233);
          WTF::fastFree((WTF *)v233, v77);
        }
LABEL_147:
        v81 = a2;
        if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        {
          v81 = *(_QWORD *)(a2 + 32);
          if (v81)
            v81 = *(_QWORD *)(v81 + 8);
        }
        WebCore::RenderStyle::visitedDependentColor(v81 + 80, 342, 0, (uint64_t *)&v288);
        v82 = *(_QWORD *)(a2 + 32);
        if (v82)
          v82 = *(_QWORD *)(v82 + 8);
        WebCore::RenderStyle::visitedDependentColor(v82 + 80, 342, 0, (uint64_t *)v282);
        if (((unint64_t)v282[0] & 0x8000000000000) != 0)
        {
          if (((unint64_t)v288 & 0x8000000000000) == 0)
          {
LABEL_154:
            v84 = v291;
            v85 = ((unint64_t)v291 & 0x8000000000000) == 0;
            goto LABEL_155;
          }
          v236 = (unsigned int *)((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL);
          v224 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 4);
          v223 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 8);
          v226 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 0xC);
          v225 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 0x10);
          if (*(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 4) == v224
            && *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 8) == v223
            && *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 0xC) == v226
            && *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 0x10) == v225
            && (unint64_t)v282[0] >> 56 == (unint64_t)v288 >> 56
            && (((unint64_t)v288 ^ (unint64_t)v282[0]) & 0xFE000000000000) == 0)
          {
            v86 = 0;
            goto LABEL_569;
          }
          v84 = v291;
          if (((unint64_t)v291 & 0x8000000000000) != 0)
            goto LABEL_637;
        }
        else
        {
          if (((unint64_t)v288 & 0x8000000000000) == 0 && LODWORD(v282[0]) == (_DWORD)v288)
          {
            if ((((unint64_t)v288 ^ (unint64_t)v282[0]) & 0xFE000000000000) == 0)
              goto LABEL_166;
            goto LABEL_154;
          }
          v84 = v291;
          v85 = ((unint64_t)v291 & 0x8000000000000) == 0;
          if (((unint64_t)v288 & 0x8000000000000) == 0)
          {
LABEL_155:
            if (v85 && v288 == v84)
            {
              v86 = 0;
LABEL_161:
              if (((unint64_t)v282[0] & 0x8000000000000) == 0)
                goto LABEL_162;
              v236 = (unsigned int *)((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL);
              do
              {
LABEL_569:
                v237 = __ldaxr(v236);
                v238 = v237 - 1;
              }
              while (__stlxr(v238, v236));
              if (!v238)
              {
                atomic_store(1u, v236);
                WTF::fastFree((WTF *)v236, v83);
                if ((v86 & 1) == 0)
                  goto LABEL_166;
LABEL_163:
                WTF::TextStream::operator<<();
                WebCore::serializationForRenderTreeAsText((WebCore *)&v288, (uint64_t *)v282);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v89 = v282[0];
                v282[0] = 0;
                if (v89)
                {
                  if (*(_DWORD *)v89 == 2)
                    WTF::StringImpl::destroy(v89, v88);
                  else
                    *(_DWORD *)v89 -= 2;
                }
LABEL_166:
                v90 = a2;
                if ((*(_BYTE *)(a2 + 45) & 2) != 0)
                {
                  v90 = *(_QWORD *)(a2 + 32);
                  if (v90)
                    v90 = *(_QWORD *)(v90 + 8);
                }
                WebCore::RenderStyle::visitedDependentColor(v90 + 80, 344, 0, (uint64_t *)v282);
                v91 = *(_QWORD *)(a2 + 32);
                if (v91)
                  v91 = *(_QWORD *)(v91 + 8);
                WebCore::RenderStyle::visitedDependentColor(v91 + 80, 344, 0, v295);
                if ((v295[0] & 0x8000000000000) != 0)
                {
                  if (((unint64_t)v282[0] & 0x8000000000000) == 0)
                  {
LABEL_173:
                    v93 = v291;
                    v94 = ((unint64_t)v291 & 0x8000000000000) == 0;
                    goto LABEL_174;
                  }
                  v239 = (unsigned int *)(v295[0] & 0xFFFFFFFFFFFFLL);
                  v228 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 4);
                  v227 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 8);
                  v230 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 0xC);
                  v229 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 0x10);
                  if (*(float *)((v295[0] & 0xFFFFFFFFFFFFLL) + 4) == v228
                    && *(float *)((v295[0] & 0xFFFFFFFFFFFFLL) + 8) == v227
                    && *(float *)((v295[0] & 0xFFFFFFFFFFFFLL) + 0xC) == v230
                    && *(float *)((v295[0] & 0xFFFFFFFFFFFFLL) + 0x10) == v229
                    && HIBYTE(v295[0]) == (unint64_t)v282[0] >> 56
                    && (((uint64_t)v282[0] ^ v295[0]) & 0xFE000000000000) == 0)
                  {
                    v95 = 0;
                    goto LABEL_581;
                  }
                  v93 = v291;
                  if (((unint64_t)v291 & 0x8000000000000) != 0)
                    goto LABEL_626;
                }
                else
                {
                  if (((unint64_t)v282[0] & 0x8000000000000) == 0 && LODWORD(v295[0]) == LODWORD(v282[0]))
                  {
                    if ((((uint64_t)v282[0] ^ v295[0]) & 0xFE000000000000) == 0)
                      goto LABEL_184;
                    goto LABEL_173;
                  }
                  v93 = v291;
                  v94 = ((unint64_t)v291 & 0x8000000000000) == 0;
                  if (((unint64_t)v282[0] & 0x8000000000000) == 0)
                  {
LABEL_174:
                    if (v94 && v282[0] == v93)
                    {
                      v95 = 0;
LABEL_179:
                      if ((v295[0] & 0x8000000000000) == 0)
                        goto LABEL_180;
                      v239 = (unsigned int *)(v295[0] & 0xFFFFFFFFFFFFLL);
                      do
                      {
LABEL_581:
                        v240 = __ldaxr(v239);
                        v241 = v240 - 1;
                      }
                      while (__stlxr(v241, v239));
                      if (!v241)
                      {
                        atomic_store(1u, v239);
                        WTF::fastFree((WTF *)v239, v92);
                        if ((v95 & 1) != 0)
                        {
LABEL_181:
                          WTF::TextStream::operator<<();
                          WebCore::serializationForRenderTreeAsText((WebCore *)v282, v295);
                          WTF::TextStream::operator<<();
                          WTF::TextStream::operator<<();
                          v97 = (WTF::StringImpl *)v295[0];
                          v295[0] = 0;
                          if (v97)
                          {
                            if (*(_DWORD *)v97 == 2)
                              WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v92);
                            else
                              *(_DWORD *)v97 -= 2;
                          }
                        }
LABEL_184:
                        v98 = *(_QWORD *)(a2 + 32);
                        if (v98)
                        {
                          v99 = *(_QWORD *)(v98 + 8);
                          v100 = v99 + 104;
                          v101 = (*(_BYTE *)(a2 + 45) & 2) == 0;
                          if ((*(_BYTE *)(a2 + 45) & 2) == 0)
                            v99 = a2;
                        }
                        else
                        {
                          v101 = 1;
                          v100 = 104;
                          v99 = a2;
                        }
                        if (*(float *)(*(_QWORD *)v100 + 4) != *(float *)(*(_QWORD *)(v99 + 104) + 4))
                        {
                          if (v98)
                            v102 = v101;
                          else
                            v102 = 1;
                          if (v101)
                            v103 = a2;
                          else
                            v103 = 0;
                          if ((v102 & 1) == 0)
                            v103 = *(_QWORD *)(v98 + 8);
                          if (*(float *)(*(_QWORD *)(v103 + 104) + 4) > 0.0)
                          {
                            WTF::TextStream::operator<<();
                            WTF::TextStream::operator<<();
                            WTF::TextStream::operator<<();
                          }
                        }
                        if (((unint64_t)v282[0] & 0x8000000000000) != 0)
                        {
                          v257 = (unsigned int *)((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v258 = __ldaxr(v257);
                            v259 = v258 - 1;
                          }
                          while (__stlxr(v259, v257));
                          if (!v259)
                          {
                            atomic_store(1u, v257);
                            WTF::fastFree((WTF *)v257, v92);
                          }
                        }
                        if (((unint64_t)v288 & 0x8000000000000) != 0)
                        {
                          v260 = (unsigned int *)((unint64_t)v288 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v261 = __ldaxr(v260);
                            v262 = v261 - 1;
                          }
                          while (__stlxr(v262, v260));
                          if (!v262)
                          {
                            atomic_store(1u, v260);
                            WTF::fastFree((WTF *)v260, v92);
                          }
                        }
                        if (((unint64_t)v278 & 0x8000000000000) != 0)
                        {
                          v263 = (unsigned int *)((unint64_t)v278 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v264 = __ldaxr(v263);
                            v265 = v264 - 1;
                          }
                          while (__stlxr(v265, v263));
                          if (!v265)
                          {
                            atomic_store(1u, v263);
                            WTF::fastFree((WTF *)v263, v92);
                          }
                        }
                        if (((unint64_t)v291 & 0x8000000000000) != 0)
                        {
                          v266 = (unsigned int *)((unint64_t)v291 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v267 = __ldaxr(v266);
                            v268 = v267 - 1;
                          }
                          while (__stlxr(v268, v266));
                          if (!v268)
                          {
                            atomic_store(1u, v266);
                            WTF::fastFree((WTF *)v266, v92);
                          }
                        }
                        goto LABEL_202;
                      }
LABEL_180:
                      if (v95)
                        goto LABEL_181;
                      goto LABEL_184;
                    }
                    v96 = v282[0] == (WTF::StringImpl *)0x1104000000000000;
LABEL_178:
                    v95 = !v96;
                    goto LABEL_179;
                  }
                  if (((unint64_t)v291 & 0x8000000000000) != 0)
                  {
                    v228 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 4);
                    v227 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 8);
                    v230 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 0xC);
                    v229 = *(float *)(((unint64_t)v282[0] & 0xFFFFFFFFFFFFLL) + 0x10);
LABEL_626:
                    if (v228 != *(float *)(((unint64_t)v93 & 0xFFFFFFFFFFFFLL) + 4))
                    {
                      v96 = 0;
                      goto LABEL_178;
                    }
                    if (v227 != *(float *)(((unint64_t)v93 & 0xFFFFFFFFFFFFLL) + 8))
                    {
                      v96 = 0;
                      goto LABEL_178;
                    }
                    if (v230 != *(float *)(((unint64_t)v93 & 0xFFFFFFFFFFFFLL) + 0xC))
                    {
                      v96 = 0;
                      goto LABEL_178;
                    }
                    if (v229 != *(float *)(((unint64_t)v93 & 0xFFFFFFFFFFFFLL) + 0x10))
                    {
                      v96 = 0;
                      goto LABEL_178;
                    }
                    if ((unint64_t)v282[0] >> 56 == (unint64_t)v93 >> 56)
                    {
                      v96 = 0;
                      v95 = 0;
                      if (BYTE6(v282[0]) == BYTE6(v93))
                        goto LABEL_179;
                      goto LABEL_178;
                    }
                  }
                }
                v96 = 0;
                goto LABEL_178;
              }
LABEL_162:
              if (!v86)
                goto LABEL_166;
              goto LABEL_163;
            }
            v87 = v288 == (WTF::StringImpl *)0x1104000000000000;
LABEL_160:
            v86 = !v87;
            goto LABEL_161;
          }
          if (((unint64_t)v291 & 0x8000000000000) != 0)
          {
            v224 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 4);
            v223 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 8);
            v226 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 0xC);
            v225 = *(float *)(((unint64_t)v288 & 0xFFFFFFFFFFFFLL) + 0x10);
LABEL_637:
            if (v224 == *(float *)(((unint64_t)v84 & 0xFFFFFFFFFFFFLL) + 4))
            {
              if (v223 != *(float *)(((unint64_t)v84 & 0xFFFFFFFFFFFFLL) + 8))
              {
                v87 = 0;
                goto LABEL_160;
              }
              if (v226 != *(float *)(((unint64_t)v84 & 0xFFFFFFFFFFFFLL) + 0xC))
              {
                v87 = 0;
                goto LABEL_160;
              }
              if (v225 != *(float *)(((unint64_t)v84 & 0xFFFFFFFFFFFFLL) + 0x10))
              {
                v87 = 0;
                goto LABEL_160;
              }
              if ((unint64_t)v288 >> 56 == (unint64_t)v84 >> 56)
              {
                v87 = 0;
                v86 = 0;
                if (BYTE6(v288) == BYTE6(v84))
                  goto LABEL_161;
                goto LABEL_160;
              }
            }
          }
        }
        v87 = 0;
        goto LABEL_160;
      }
      do
      {
        v234 = __ldaxr(v233);
        v235 = v234 - 1;
      }
      while (__stlxr(v235, v233));
      if (!v235)
      {
        atomic_store(1u, v233);
        WTF::fastFree((WTF *)v233, v77);
      }
    }
    else if (((unint64_t)v278 & 0x8000000000000) == 0
           && (_DWORD)v288 == (_DWORD)v278
           && (((unint64_t)v278 ^ (unint64_t)v288) & 0xFE000000000000) == 0)
    {
      goto LABEL_147;
    }
    if (v78 != (WTF::StringImpl *)0x1104000000000000)
    {
      WTF::TextStream::operator<<();
      WebCore::serializationForRenderTreeAsText((WebCore *)&v278, (uint64_t *)&v288);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v80 = v288;
      v288 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v79);
        else
          *(_DWORD *)v80 -= 2;
      }
    }
    goto LABEL_147;
  }
  WebCore::writeSVGPaintingFeatures(a1, a2);
  if ((*(_BYTE *)(a2 + 52) & 7) == 4 && (*(_BYTE *)(a2 + 53) & 1) == 0 && (*(_BYTE *)(a2 + 53) & 0x10) != 0)
  {
    v61 = *(WebCore::SVGPolyElement ***)(*(_QWORD *)(a2 + 24) + 8);
    if ((*((_WORD *)v61 + 14) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196471DF0);
    }
    if (((*((uint64_t (**)(_QWORD))*v61 + 148))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196471E10);
    }
    WebCore::writeSVGGraphicsElement(a1, v61, v62);
  }
  while (1)
  {
    WebCore::writeDebugInfo((int)a1, (WebCore::SVGBoundingBoxComputation *)a2, v55, (__int16)v53);
LABEL_404:
    WTF::TextStream::operator<<();
    ++*((_DWORD *)a1 + 6);
    if ((*(_BYTE *)(a2 + 45) & 2) == 0)
    {
      v185 = *(unsigned __int8 *)(a2 + 68);
      for (i = *(unsigned int *)(a2 + 64); ; i = *(unsigned int *)(v188 + 47))
      {
        v187 = i | (v185 << 32);
        if (!v187)
          break;
        v188 = *(_QWORD *)(v187 + 8);
        if (!v188)
          break;
        if ((*(_BYTE *)(v188 + 21) & 0x80) == 0)
          WebCore::write(a1, v188, v53);
        v185 = *(unsigned __int8 *)(v188 + 51);
      }
      goto LABEL_422;
    }
    v189 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a2, v181);
    if (v189)
    {
      WebCore::LayoutIntegration::LineLayout::textBoxesFor(v189, (const WebCore::RenderText *)a2, (uint64_t)&v291);
      v190 = (int)v293;
      LOBYTE(v278) = 0;
      v280 = NAN;
      if ((_DWORD)v293 == -1)
        goto LABEL_415;
    }
    else
    {
      v291 = *(WTF::StringImpl **)(a2 + 64);
      v190 = 1;
      LODWORD(v293) = 1;
      LOBYTE(v278) = 0;
      v280 = NAN;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v190])(&v288, &v278, &v291);
    v280 = *(float *)&v190;
    if ((_DWORD)v293 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v293])(&v288, &v291);
LABEL_415:
    v275 = v53;
    v277 = v7;
    LOBYTE(v291) = 0;
    LODWORD(v293) = -1;
    v109 = LODWORD(v280);
    if (v280 != NAN)
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E34397B0[LODWORD(v280)])(&v288, &v291, &v278);
      LODWORD(v293) = v109;
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v291) & 1) != 0)
      break;
    v53 = "\n";
    while ((_DWORD)v293 != -1)
    {
      v288 = (WTF::StringImpl *)&v287;
      if ((((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34397C0[v293])(&v288, &v291) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964714D0);
      }
      WTF::TextStream::writeIndent(a1);
      if ((_DWORD)v293 == -1)
        break;
      v288 = (WTF::StringImpl *)&v287;
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3439820[v293])(&v288, &v291);
      if ((_DWORD)v293 == -1)
        break;
      v195 = v193;
      v109 = (int)v194;
      v288 = (WTF::StringImpl *)&v287;
      ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34397D0[v293])(&v288, &v291);
      v196 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a2);
      if (v196 && *((_BYTE *)v196 + 46) == 37)
        v109 = (v109 - (*((int *)v196 + 63) >> 6));
      v7 = (float *)(int)v195;
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      if ((_DWORD)v293 == -1)
        break;
      v288 = (WTF::StringImpl *)&v287;
      if ((((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34397E0[v293])(&v288, &v291) & 1) != 0)WTF::TextStream::operator<<();
      v197 = WTF::TextStream::operator<<();
      if ((_DWORD)v293 == -1)
        break;
      v109 = v197;
      v288 = (WTF::StringImpl *)&v287;
      v198 = off_1E34397F0[v293]((int)&v288, (WebCore::InlineIterator::BoxModernPath *)&v291);
      WebCore::quoteAndEscapeNonPrintables(v198, v199, &v288);
      WTF::TextStream::operator<<();
      v201 = v288;
      v288 = 0;
      if (v201)
      {
        if (*(_DWORD *)v201 == 2)
          WTF::StringImpl::destroy(v201, v200);
        else
          *(_DWORD *)v201 -= 2;
      }
      if ((_DWORD)v293 == -1)
        break;
      v288 = (WTF::StringImpl *)&v287;
      if (((unsigned int (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3439800[v293])(&v288, &v291))
      {
        v109 = WTF::TextStream::operator<<();
        v203 = *(_QWORD *)(a2 + 32);
        if (v203)
          v7 = *(float **)(v203 + 8);
        else
          v7 = 0;
        v204 = *(_QWORD *)(*((_QWORD *)v7 + 13) + 288);
        if (v204)
          goto LABEL_461;
        {
          WTF::AtomStringImpl::add();
          WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = (uint64_t)v288;
        }
        {
          WTF::AtomStringImpl::add();
          WebCore::RenderStyle::hyphenString(void)const::hyphenString = (uint64_t)v288;
        }
        v205 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)v7 + 14) + 32), v202);
        v206 = WebCore::Font::glyphForCharacter(v205, (void *)0x2010);
        v207 = &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
        if (v206)
          v207 = &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
        v204 = *v207;
        if (v204)
        {
LABEL_461:
          v208 = *(_QWORD *)(v204 + 8);
          v209 = *(unsigned int *)(v204 + 4) | ((unint64_t)((*(_DWORD *)(v204 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v208 = 0;
          v209 = 0x100000000;
        }
        WebCore::quoteAndEscapeNonPrintables(v208, v209, &v288);
        WTF::TextStream::operator<<();
        v211 = v288;
        v288 = 0;
        if (v211)
        {
          if (*(_DWORD *)v211 == 2)
            WTF::StringImpl::destroy(v211, v210);
          else
            *(_DWORD *)v211 -= 2;
        }
      }
      WTF::TextStream::operator<<();
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)&v291);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v291) & 1) != 0)
        goto LABEL_418;
    }
LABEL_529:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_530:
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v109 + 72), v158);
LABEL_354:
    v160 = v159 * 64.0;
    if (v160 >= 2147483650.0)
    {
      v161 = 0x7FFFFFFF;
    }
    else if (v160 <= -2147483650.0)
    {
      v161 = 0x80000000;
    }
    else
    {
      v161 = (int)v160;
    }
LABEL_357:
    v162 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 88) + 24);
    v163 = v162[84];
    if ((v163 & 0xFFFFFFF7) == 3)
    {
      v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1144))(a2);
      v163 = v162[84];
      v164 = (float)v254 * 0.015625;
    }
    else
    {
      v164 = 0.0;
    }
    switch(v163)
    {
      case 4:
        v165 = *((float *)v162 + 20);
        if (!v162[86])
          v165 = (float)SLODWORD(v165);
        goto LABEL_362;
      case 3:
        v213 = *((float *)v162 + 20);
        if (!v162[86])
          v213 = (float)SLODWORD(v213);
        v165 = (float)(v164 * v213) / 100.0;
        goto LABEL_362;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v162 + 80), v164);
LABEL_362:
        v166 = v165 * 64.0;
        if (v166 >= 2147483650.0)
        {
          v167 = 0x7FFFFFFF;
        }
        else if (v166 <= -2147483650.0)
        {
          v167 = 0x80000000;
        }
        else
        {
          v167 = (int)v166;
        }
        goto LABEL_365;
    }
    v167 = 0;
LABEL_365:
    v168 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 88) + 24);
    v169 = v168[92];
    if ((v169 & 0xFFFFFFF7) == 3)
    {
      v255 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1144))(a2);
      v169 = v168[92];
      v170 = (float)v255 * 0.015625;
    }
    else
    {
      v170 = 0.0;
    }
    switch(v169)
    {
      case 4:
        v171 = *((float *)v168 + 22);
        if (!v168[94])
          v171 = (float)SLODWORD(v171);
        goto LABEL_370;
      case 3:
        v214 = *((float *)v168 + 22);
        if (!v168[94])
          v214 = (float)SLODWORD(v214);
        v171 = (float)(v170 * v214) / 100.0;
        goto LABEL_370;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v168 + 88), v170);
LABEL_370:
        v172 = v171 * 64.0;
        if (v172 >= 2147483650.0)
        {
          v173 = 0x7FFFFFFF;
        }
        else if (v172 <= -2147483650.0)
        {
          v173 = 0x80000000;
        }
        else
        {
          v173 = (int)v172;
        }
        goto LABEL_373;
    }
    v173 = 0;
LABEL_373:
    v174 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 88) + 24);
    v175 = v174[100];
    if ((v175 & 0xFFFFFFF7) == 3)
    {
      v256 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1144))(a2);
      v175 = v174[100];
      v176 = (float)v256 * 0.015625;
    }
    else
    {
      v176 = 0.0;
    }
    switch(v175)
    {
      case 4:
        v177 = *((float *)v174 + 24);
        if (!v174[102])
          v177 = (float)SLODWORD(v177);
        goto LABEL_378;
      case 3:
        v215 = *((float *)v174 + 24);
        if (!v174[102])
          v215 = (float)SLODWORD(v215);
        v216 = (float)((float)(v176 * v215) / 100.0) * 64.0;
        if (v216 > -2147483650.0)
          v217 = (int)v216;
        else
          v217 = 0x80000000;
        if (v216 < 2147483650.0)
          v179 = v217;
        else
          v179 = 0x7FFFFFFF;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v174 + 96), v176);
LABEL_378:
        v178 = v177 * 64.0;
        if (v178 >= 2147483650.0)
        {
          v179 = 0x7FFFFFFF;
        }
        else if (v178 <= -2147483650.0)
        {
          v179 = 0x80000000;
        }
        else
        {
          v179 = (int)v178;
        }
        break;
      default:
        v179 = 0;
        break;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 928))(a2) != v161
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2) != v167
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 936))(a2) != v173
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2) != v179)
    {
      WTF::TextStream::operator<<();
      if (v161 || v167 || v173 || v179)
        WTF::TextStream::operator<<();
    }
    WTF::TextStream::operator<<();
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 928))(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 936))(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
LABEL_391:
    v180 = *(unsigned __int8 *)(a2 + 46);
    if (v180 == 37)
    {
      WTF::TextStream::operator<<();
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1964716A0);
      }
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      if ((*(_BYTE *)(a2 + 251) & 8) != 0)
        WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      if ((*(_BYTE *)(a2 + 251) & 4) != 0)
        WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v180 = *(unsigned __int8 *)(a2 + 46);
    }
    if (v180 == 6)
    {
      WTF::TextStream::operator<<();
      if (WebCore::RenderDetailsMarker::orientation((WebCore::RenderDetailsMarker *)a2) <= 3)
        WTF::TextStream::operator<<();
      v180 = *(unsigned __int8 *)(a2 + 46);
    }
    if (v180 == 20)
    {
      v219 = *(_QWORD *)(a2 + 200);
      if (v219 && *(_DWORD *)(v219 + 4) && (*(_BYTE *)(v219 + 16) & 4) == 0)
        WTF::String::String();
      else
        WTF::String::String();
      v221 = v278;
      if (v278)
      {
        v222 = *((unsigned int *)v278 + 1);
        if ((_DWORD)v222 != 1)
        {
          if (!(_DWORD)v222)
          {
            v278 = 0;
            goto LABEL_654;
          }
          v248 = (unsigned __int8 *)*((_QWORD *)v278 + 1);
          v250 = v222 | ((unint64_t)((*((_DWORD *)v278 + 4) >> 2) & 1) << 32);
          goto LABEL_649;
        }
        v247 = *((_DWORD *)v278 + 4);
        v248 = (unsigned __int8 *)*((_QWORD *)v278 + 1);
        if ((v247 & 4) != 0)
          v249 = *v248;
        else
          v249 = *(unsigned __int16 *)v248;
        if (v249 != 9702 && v249 != 9632 && v249 != 8226)
        {
          v250 = ((unint64_t)((v247 >> 2) & 1) << 32) | 1;
LABEL_649:
          WebCore::quoteAndEscapeNonPrintables((uint64_t)v248, v250, &v291);
          goto LABEL_650;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_650:
        v252 = v278;
        v278 = v291;
        if (v252)
        {
          if (*(_DWORD *)v252 == 2)
            WTF::StringImpl::destroy(v252, v251);
          else
            *(_DWORD *)v252 -= 2;
        }
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v221 = v278;
        v278 = 0;
        if (v221)
        {
LABEL_654:
          if (*(_DWORD *)v221 == 2)
            WTF::StringImpl::destroy(v221, v220);
          else
            *(_DWORD *)v221 -= 2;
        }
      }
    }
  }
LABEL_418:
  if ((_DWORD)v293 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34397A0[v293])(&v288, &v291);
  v53 = v275;
  v7 = v277;
  if (v280 != NAN)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34397A0[LODWORD(v280)])(&v291, &v278);
LABEL_422:
  if ((*(_BYTE *)(a2 + 52) & 7) == 3 && (*(_BYTE *)(a2 + 53) & 4) != 0)
  {
    v218 = *(_QWORD *)(a2 + 232);
    if (v218)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v218 + 72))(*(_QWORD *)(a2 + 232)) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 80))(v218))
      {
        (*(void (**)(uint64_t, WTF::TextStream *, const char *))(*(_QWORD *)v218 + 712))(v218, a1, v53);
      }
    }
  }
  v192 = (*(_BYTE *)(a2 + 52) & 7) == 4 && (*(_BYTE *)(a2 + 53) & 1) == 0;
  if (v192 || *(_BYTE *)v7 == 83)
    WebCore::writeResources((uint64_t)a1, a2, (__int16)v53, v182, v183, v184);
  --*((_DWORD *)a1 + 6);
}

uint64_t WebCore::createTextStream@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8);
  if (((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 680) >> 47) & (*(_BYTE *)(v3 + 3419) != 0)) != 0)
    v4 = 1;
  else
    v4 = 5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = v4;
  *(_BYTE *)(a2 + 29) = 1;
  *(_DWORD *)(a2 + 32) = 0;
  return this;
}

void WebCore::externalRepresentation(WebCore::LocalFrame *a1@<X0>, unsigned __int16 a2@<W1>, WTF *a3@<X8>)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(WebCore::FrameDestructionObserver *__hidden);
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  if ((a2 & 0x200) == 0)
  {
    v6 = (_DWORD *)*((_QWORD *)a1 + 36);
    if (v6)
      WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v6, (void *)0xA);
  }
  v7 = *((_QWORD *)a1 + 37);
  if (v7 && (v8 = *(_QWORD *)(v7 + 1944)) != 0)
  {
    v9 = off_1E33FEB10;
    v10 = 0u;
    WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)&v9, a1);
    v9 = off_1E3401AC0;
    v13 = 0;
    v11 = 0u;
    v12 = 0;
    if ((a2 & 0x100) != 0)
      WebCore::PrintContext::begin((WebCore::PrintContext *)&v9, (float)*(int *)(v8 + 160) * 0.015625, 0.0);
    WebCore::externalRepresentation(a3, v8, a2);
    WebCore::PrintContext::~PrintContext((WebCore::PrintContext *)&v9);
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
}

WTF::StringImpl *WebCore::externalRepresentation(WTF *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v3;
  char v4;
  WTF::StringImpl *v5;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  void *v23;
  int v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  void *v28;
  int v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __n128 v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  __n128 v48;
  void *v49;
  int v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  __n128 v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *result;
  int v67;
  int v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  char v73;
  int v74;
  char v75;
  char v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  uint64_t v90;
  int v91;
  char v92;
  _WORD *v93;
  int v94;
  char v95;
  __int16 v96;
  char v97;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
  if (((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 680) >> 47) & (*(_BYTE *)(v3 + 3419) != 0)) != 0)
    v4 = 1;
  else
    v4 = 5;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 1;
  v74 = 0;
  v75 = v4;
  v76 = 1;
  v77 = 0;
  if ((*(_BYTE *)(a2 + 21) & 0x80) != 0)
  {
    if (WTF::isMainThread(a1))
      ++WebCore::ScriptDisallowedScope::s_count;
    v8 = *(_QWORD *)(a2 + 144);
    v9 = *(_DWORD *)(v8 + 164);
    v10 = *(_DWORD *)(v8 + 168);
    LODWORD(v11) = v9 << 6;
    if (v9 < -33554432)
      LODWORD(v11) = 0x80000000;
    if (v9 <= 0x1FFFFFF)
      v11 = v11;
    else
      v11 = 0x7FFFFFFFLL;
    if (v10 >= -33554432)
      v12 = v10 << 6;
    else
      v12 = 0x80000000;
    if (v10 <= 0x1FFFFFF)
      v13 = v12;
    else
      v13 = 0x7FFFFFFFLL;
    *(_QWORD *)&v80 = *(_QWORD *)(v8 + 156);
    *((_QWORD *)&v80 + 1) = v11 | (v13 << 32);
    WebCore::writeLayers((WTF::TextStream *)&v70, v8, (WebCore::RenderLayer *)v8, &v80, a3);
    if (*(_BYTE *)(a2 + 46) == 49)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 528);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 296) + 3064);
          v17 = *(_QWORD *)(v16 + 56);
          if (v17)
            *(_DWORD *)(v17 + 24) += 2;
          *(_QWORD *)&v80 = v17;
          DWORD2(v80) = *(_DWORD *)(v16 + 64);
          BYTE12(v80) = *(_BYTE *)(v16 + 68);
          v18 = *(_QWORD *)(v16 + 72);
          if (v18)
            *(_DWORD *)(v18 + 24) += 2;
          v81 = v18;
          v82 = *(_DWORD *)(v16 + 80);
          v83 = *(_BYTE *)(v16 + 84);
          v19 = *(_QWORD *)(v16 + 88);
          if (v19)
            *(_DWORD *)(v19 + 24) += 2;
          v84 = v19;
          v85 = *(_DWORD *)(v16 + 96);
          v86 = *(_BYTE *)(v16 + 100);
          v20 = *(_QWORD *)(v16 + 104);
          if (v20)
            *(_DWORD *)(v20 + 24) += 2;
          v87 = v20;
          v88 = *(_DWORD *)(v16 + 112);
          v89 = *(_BYTE *)(v16 + 116);
          v21 = *(_QWORD *)(v16 + 120);
          if (v21)
            *(_DWORD *)(v21 + 24) += 2;
          v90 = v21;
          v91 = *(_DWORD *)(v16 + 128);
          v92 = *(_BYTE *)(v16 + 132);
          v22 = *(_WORD **)(v16 + 136);
          if (v22)
            *((_DWORD *)v22 + 6) += 2;
          v93 = v22;
          v94 = *(_DWORD *)(v16 + 144);
          v95 = *(_BYTE *)(v16 + 148);
          v96 = *(_WORD *)(v16 + 152);
          v97 = *(_BYTE *)(v16 + 154);
          if (HIBYTE(v96) == 2)
          {
            WTF::TextStream::operator<<();
            if ((v92 & 8) == 0)
            {
              v29 = v92 & 7;
              if (v29 == 4 || v29 == 2)
              {
                if (v21)
                {
                  v30 = *(_DWORD *)(v21 + 24);
                  *(_DWORD *)(v21 + 24) = v30 + 2;
                  v31 = *(_WORD *)(v21 + 28);
                  if ((v31 & 1) == 0)
                  {
                    if ((v31 & 4) != 0 && (v32 = *(_QWORD *)(v21 + 80)) != 0)
                    {
                      v68 = 0;
                      do
                      {
                        ++v68;
                        v32 = *(_QWORD *)(v32 + 56);
                      }
                      while (v32);
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 208))(v21);
                      v30 = *(_DWORD *)(v21 + 24) - 2;
                    }
                  }
                  if (v30)
                  {
                    *(_DWORD *)(v21 + 24) = v30;
                  }
                  else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v21, v28);
                  }
                }
              }
            }
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WebCore::nodePosition((WebCore *)&v79, (WebCore::Node *)v21, v42, v43, v44, v45, v46, v47, v48);
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            if ((v95 & 8) == 0)
            {
              v50 = v95 & 7;
              if (v50 == 4 || v50 == 2)
              {
                if (v22)
                {
                  v51 = *((_DWORD *)v22 + 6);
                  *((_DWORD *)v22 + 6) = v51 + 2;
                  v52 = v22[14];
                  if ((v52 & 1) == 0)
                  {
                    if ((v52 & 4) != 0 && (v53 = *((_QWORD *)v22 + 10)) != 0)
                    {
                      v69 = 0;
                      do
                      {
                        ++v69;
                        v53 = *(_QWORD *)(v53 + 56);
                      }
                      while (v53);
                    }
                    else
                    {
                      (*(void (**)(_WORD *))(*(_QWORD *)v22 + 208))(v22);
                      v51 = *((_DWORD *)v22 + 6) - 2;
                    }
                  }
                  if (v51)
                  {
                    *((_DWORD *)v22 + 6) = v51;
                  }
                  else if ((v22[15] & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v22, v49);
                  }
                }
              }
            }
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WebCore::nodePosition((WebCore *)&v78, (WebCore::Node *)v22, v54, v55, v56, v57, v58, v59, v60);
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            v62 = v78;
            v78 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2)
                WTF::StringImpl::destroy(v62, v61);
              else
                *(_DWORD *)v62 -= 2;
            }
            v63 = v79;
            v79 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy(v63, v61);
              else
                *(_DWORD *)v63 -= 2;
            }
          }
          else if (HIBYTE(v96) == 1)
          {
            WTF::TextStream::operator<<();
            if ((v92 & 8) == 0)
            {
              v24 = v92 & 7;
              if (v24 == 4 || v24 == 2)
              {
                if (v21)
                {
                  v25 = *(_DWORD *)(v21 + 24);
                  *(_DWORD *)(v21 + 24) = v25 + 2;
                  v26 = *(_WORD *)(v21 + 28);
                  if ((v26 & 1) == 0)
                  {
                    if ((v26 & 4) != 0 && (v27 = *(_QWORD *)(v21 + 80)) != 0)
                    {
                      v67 = 0;
                      do
                      {
                        ++v67;
                        v27 = *(_QWORD *)(v27 + 56);
                      }
                      while (v27);
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 208))(v21);
                      v25 = *(_DWORD *)(v21 + 24) - 2;
                    }
                  }
                  if (v25)
                  {
                    *(_DWORD *)(v21 + 24) = v25;
                  }
                  else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v21, v23);
                  }
                }
              }
            }
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WebCore::nodePosition((WebCore *)&v79, (WebCore::Node *)v21, v33, v34, v35, v36, v37, v38, v39);
            WTF::TextStream::operator<<();
            v41 = v79;
            v79 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v40);
              else
                *(_DWORD *)v41 -= 2;
            }
            if (!(_BYTE)v96)
              WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
          }
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v80);
        }
      }
    }
    v64 = (WTF *)WTF::TextStream::release((WTF::TextStream *)&v70);
    if (WTF::isMainThread(v64))
      --WebCore::ScriptDisallowedScope::s_count;
  }
  else
  {
    WTF::TextStream::release((WTF::TextStream *)&v70);
  }
  v65 = v71;
  v71 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v5);
    else
      *(_DWORD *)v65 -= 2;
  }
  result = v70;
  v70 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::externalRepresentationForLocalFrame(WTF::TextStream *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1944);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 164);
        v7 = *(_DWORD *)(v5 + 168);
        LODWORD(v8) = v6 << 6;
        if (v6 < -33554432)
          LODWORD(v8) = 0x80000000;
        if (v6 <= 0x1FFFFFF)
          v8 = v8;
        else
          v8 = 0x7FFFFFFFLL;
        if (v7 >= -33554432)
          v9 = v7 << 6;
        else
          v9 = 0x80000000;
        if (v7 <= 0x1FFFFFF)
          v10 = v9;
        else
          v10 = 0x7FFFFFFFLL;
        *(_QWORD *)&v11 = *(_QWORD *)(v5 + 156);
        *((_QWORD *)&v11 + 1) = v8 | (v10 << 32);
        WebCore::writeLayers(a1, v5, (WebCore::RenderLayer *)v5, &v11, a3);
      }
    }
  }
}

void WebCore::writeLayers(WTF::TextStream *a1, uint64_t a2, WebCore::RenderLayer *a3, _OWORD *a4, unsigned __int16 a5)
{
  unsigned __int16 v5;
  char v9;
  WebCore::RenderBox *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  signed int v14;
  WebCore::RenderBox *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  WebCore::RenderBox *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  signed int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _BOOL4 v31;
  double v32;
  uint64_t v33;
  _BOOL4 v34;
  unsigned __int16 v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  WTF *v67;
  uint64_t v68;
  _BYTE v69[104];
  unint64_t v70;
  WTF *v71;
  _QWORD v72[2];
  char v73;
  __int128 v74;
  char v75;
  WTF *v76[2];
  int v77[8];

  v5 = a5;
  v9 = a5;
  *(_OWORD *)v77 = *a4;
  if ((WebCore::RenderLayer *)a2 == a3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 45) & 4) != 0)
      v10 = *(WebCore::RenderBox **)(a2 + 32);
    else
      v10 = 0;
    v11 = *((_QWORD *)v10 + 24);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 4);
      v13 = *(_QWORD *)(v11 + 12);
    }
    else
    {
      LODWORD(v12) = WebCore::RenderBox::flippedClientBoxRect(v10);
    }
    v14 = v12 + v13;
    if (__OFADD__((_DWORD)v12, (_DWORD)v13))
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    if (v77[2] > v14)
      v14 = v77[2];
    v77[2] = v14;
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 45) & 4) != 0)
      v15 = *(WebCore::RenderBox **)(a2 + 32);
    else
      v15 = 0;
    v16 = *((_QWORD *)v15 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 4);
      v18 = *(_QWORD *)(v16 + 12);
    }
    else
    {
      v17 = WebCore::RenderBox::flippedClientBoxRect(v15);
    }
    v19 = (HIDWORD(v17) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(HIDWORD(v17), HIDWORD(v18)))
      v19 = HIDWORD(v17) + HIDWORD(v18);
    if (v77[3] > v19)
      v19 = v77[3];
    v77[3] = v19;
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 45) & 4) != 0)
      v20 = *(WebCore::RenderBox **)(a2 + 32);
    else
      v20 = 0;
    v21 = *((_QWORD *)v20 + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 4);
      v23 = *(_QWORD *)(v21 + 12);
    }
    else
    {
      v22 = WebCore::RenderBox::flippedClientBoxRect(v20);
    }
    v24 = v22 + v23;
    v25 = (v22 >> 31) + 0x7FFFFFFF;
    if (__OFADD__((_DWORD)v22, (_DWORD)v23))
      v24 = (v22 >> 31) + 0x7FFFFFFF;
    v26 = (HIDWORD(v22) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(HIDWORD(v22), HIDWORD(v23)))
      v26 = HIDWORD(v22) + HIDWORD(v23);
    LODWORD(v27) = ((int)(v24 - (v25 & 0xFFFFFFC0) + 32) >> 6) + v24 / 64;
    LODWORD(v28) = ((int)(v26 - (v25 & 0xFFFFFFC0) + 32) >> 6) + v26 / 64;
    v29 = *(_DWORD *)(a2 + 164);
    v30 = *(_DWORD *)(a2 + 168);
    if (v29 <= (int)v27)
      v27 = v27;
    else
      v27 = v29;
    if (v30 <= (int)v28)
      v28 = v28;
    else
      v28 = v30;
    *(_QWORD *)(a2 + 164) = v27 | (v28 << 32);
  }
  v76[0] = 0;
  v76[1] = 0;
  v74 = 0uLL;
  v75 = 0;
  v72[0] = 0;
  v72[1] = 0;
  v73 = 0;
  v71 = (WTF *)WebCore::RenderLayer::offsetFromAncestor((uint64_t)a3, a2, 0);
  v67 = (WTF *)a2;
  LODWORD(v68) = 5;
  v31 = 1;
  BYTE4(v68) = 1;
  WebCore::RenderLayer::calculateRects((uint64_t)a3, &v67, v77, v76, &v74, (uint64_t)v72, &v71);
  WebCore::RenderLayer::updateLayerListsIfNeeded(a3);
  WebCore::RenderLayer::updateDescendantDependentFlags(a3);
  if ((v9 & 1) == 0)
  {
    v70 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a3, a2, 0);
    LOBYTE(v67) = 0;
    v69[0] = 0;
    v31 = WebCore::RenderLayer::intersectsDamageRect((uint64_t)a3, (WebCore::LayoutRect *)v76, (WebCore::LayoutRect *)&v74, v32, a2, &v70, (WebCore::LayoutRect *)&v67);
  }
  v33 = *((_QWORD *)a3 + 12);
  if (!v33)
  {
    v34 = 0;
    goto LABEL_42;
  }
  v46 = *(_DWORD *)(v33 + 12);
  v34 = v46 != 0;
  if (v46)
    v47 = v31;
  else
    v47 = 0;
  if (v47)
  {
    WebCore::writeLayer(a1, a3, (unsigned int *)v76, (unsigned int *)&v74, (unsigned int *)v72, -1, v5);
    v46 = *(_DWORD *)(v33 + 12);
  }
  if (v46)
  {
    if ((v9 & 2) != 0)
    {
      WTF::TextStream::writeIndent(a1);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v56 = *((_DWORD *)a1 + 6) + 1;
      *((_DWORD *)a1 + 6) = v56;
      v57 = *(unsigned int *)(v33 + 12);
      if (!(_DWORD)v57)
      {
LABEL_75:
        *((_DWORD *)a1 + 6) = v56 - 1;
        goto LABEL_42;
      }
      v48 = *(uint64_t **)v33;
      v49 = *(_QWORD *)v33 + 8 * v57;
    }
    else
    {
      v48 = *(uint64_t **)v33;
      v49 = *(_QWORD *)v33 + 8 * v46;
    }
    do
    {
      v58 = *v48++;
      WebCore::writeLayers(a1, a2, v58, v77, v5);
    }
    while (v48 != (uint64_t *)v49);
    if ((v9 & 2) != 0)
    {
      v56 = *((_DWORD *)a1 + 6);
      goto LABEL_75;
    }
  }
LABEL_42:
  if (v31)
  {
    v35 = v5;
    WebCore::writeLayer(a1, a3, (unsigned int *)v76, (unsigned int *)&v74, (unsigned int *)v72, v34, v5);
    if ((v9 & 0x20) != 0)
    {
      v67 = (WTF *)v69;
      v68 = 1;
      WebCore::RenderLayer::collectFragments((uint64_t)a3, &v67, (WebCore::RenderLayer *)a2, (const WebCore::LayoutRect *)v77, 0, 5, 1u, (uint64_t *)&v71, 0, 1);
      if (HIDWORD(v68) >= 2)
      {
        v65 = v5;
        v66 = v5;
        v37 = 0;
        v38 = 20;
        *((_DWORD *)a1 + 6) += 2;
        do
        {
          v39 = v67;
          WTF::TextStream::writeIndent(a1);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v40 = WTF::TextStream::operator<<();
          WebCore::operator<<(v40);
          v41 = WTF::TextStream::operator<<();
          if (*((_BYTE *)v39 + v38))
            WebCore::operator<<(v41);
          else
            WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          ++v37;
          v38 += 104;
        }
        while (v37 < HIDWORD(v68));
        *((_DWORD *)a1 + 6) -= 2;
        v35 = v65;
        v5 = v66;
      }
      v42 = v67;
      if (v69 != (_BYTE *)v67 && v67)
      {
        v67 = 0;
        LODWORD(v68) = 0;
        WTF::fastFree(v42, v36);
      }
    }
    v43 = *((_QWORD *)a3 + 4);
    ++*((_DWORD *)a1 + 6);
    WebCore::write(a1, v43, v35);
    --*((_DWORD *)a1 + 6);
  }
  v44 = *((_QWORD *)a3 + 13);
  if (v44)
  {
    v50 = *(unsigned int *)(v44 + 12);
    if ((_DWORD)v50)
    {
      if ((v9 & 2) != 0)
      {
        WTF::TextStream::writeIndent(a1);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v59 = *((_DWORD *)a1 + 6);
        *((_DWORD *)a1 + 6) = v59 + 1;
        v60 = *(unsigned int *)(v44 + 12);
        if (!(_DWORD)v60)
        {
LABEL_81:
          *((_DWORD *)a1 + 6) = v59;
          goto LABEL_54;
        }
        v51 = *(uint64_t **)v44;
        v52 = *(_QWORD *)v44 + 8 * v60;
      }
      else
      {
        v51 = *(uint64_t **)v44;
        v52 = *(_QWORD *)v44 + 8 * v50;
      }
      do
      {
        v61 = *v51++;
        WebCore::writeLayers(a1, a2, v61, v77, v5);
      }
      while (v51 != (uint64_t *)v52);
      if ((v9 & 2) != 0)
      {
        v59 = *((_DWORD *)a1 + 6) - 1;
        goto LABEL_81;
      }
    }
  }
LABEL_54:
  v45 = *((_QWORD *)a3 + 11);
  if (v45)
  {
    v53 = *(unsigned int *)(v45 + 12);
    if ((_DWORD)v53)
    {
      if ((v9 & 2) != 0)
      {
        WTF::TextStream::writeIndent(a1);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v62 = *((_DWORD *)a1 + 6);
        *((_DWORD *)a1 + 6) = v62 + 1;
        v63 = *(unsigned int *)(v45 + 12);
        if (!(_DWORD)v63)
        {
LABEL_87:
          *((_DWORD *)a1 + 6) = v62;
          return;
        }
        v54 = *(uint64_t **)v45;
        v55 = &v54[v63];
      }
      else
      {
        v54 = *(uint64_t **)v45;
        v55 = &v54[v53];
      }
      do
      {
        v64 = *v54++;
        WebCore::writeLayers(a1, a2, v64, v77, v5);
      }
      while (v54 != v55);
      if ((v9 & 2) != 0)
      {
        v62 = *((_DWORD *)a1 + 6) - 1;
        goto LABEL_87;
      }
    }
  }
}

uint64_t WebCore::externalRepresentation@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, WTF *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  if ((a2 & 0x200) == 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        result = *(_QWORD *)(v7 + 288);
        if (result)
          result = WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive((_DWORD *)result, (void *)0xA);
      }
    }
  }
  v8 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v8)
    goto LABEL_9;
  if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    {
LABEL_9:
      *(_QWORD *)a3 = 0;
      return result;
    }
    return (uint64_t)WebCore::externalRepresentation(a3, v8, a2 & 0xFFFE | 1u);
  }
  return result;
}

unsigned int *WebCore::counterValueForElement(WebCore *this, WebCore::Element *a2)
{
  BOOL *v3;
  char v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  int v18;
  char v19;
  char v20;
  int v21;

  if (this)
    *((_DWORD *)this + 6) += 2;
  WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 0, 0);
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) >> 47) & (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3419) != 0)) != 0)
    v4 = 1;
  else
    v4 = 5;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v18 = 0;
  v19 = v4;
  v20 = 1;
  v21 = 0;
  v13 = 1;
  v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v9 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 64);
      if ((v10 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        goto LABEL_30;
      }
      WebCore::writeCounterValuesFromChildren((WebCore *)&v14, (WTF::TextStream *)(v10 & 0xFFFFFFFFFFFFLL), (const WebCore::RenderElement *)&v13, v3);
      v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      if (!v5)
        goto LABEL_7;
    }
    v11 = *(_QWORD *)(v5 + 176);
    if (!v11)
      goto LABEL_7;
    v12 = *(_QWORD *)(v11 + 64);
    if ((v12 & 0xFFFFFFFFFFFFLL) == 0 || (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      WebCore::writeCounterValuesFromChildren((WebCore *)&v14, (WTF::TextStream *)(v12 & 0xFFFFFFFFFFFFLL), (const WebCore::RenderElement *)&v13, v3);
      goto LABEL_7;
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x19647310CLL);
  }
LABEL_7:
  WTF::TextStream::release((WTF::TextStream *)&v14);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = (unsigned int *)v14;
  v14 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    else
      *result -= 2;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(this, v6);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

void WebCore::writeCounterValuesFromChildren(WebCore *this, WTF::TextStream *a2, const WebCore::RenderElement *a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  if (a2)
  {
    if (*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
    {
      v4 = *(_QWORD *)((*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
      if (v4)
      {
        while (*(_BYTE *)(v4 + 46) != 4)
        {
          v6 = *(unsigned int *)(v4 + 47);
          if (v6 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
          {
            v4 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
            if (v4)
              continue;
          }
          return;
        }
LABEL_8:
        if (!*(_BYTE *)a3)
          WTF::TextStream::operator<<();
        *(_BYTE *)a3 = 0;
        v7 = *(WTF::StringImpl **)(v4 + 104);
        if (v7)
          *(_DWORD *)v7 += 2;
        v10 = v7;
        WTF::TextStream::operator<<();
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
        while (1)
        {
          v9 = *(unsigned int *)(v4 + 47);
          if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)))
            break;
          v4 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
          if (!v4)
            break;
          if (*(_BYTE *)(v4 + 46) == 4)
            goto LABEL_8;
        }
      }
    }
  }
}

uint64_t WebCore::markerTextForListItem@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (this)
    *((_DWORD *)this + 6) += 2;
  result = WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 0, 0);
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_12;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
  {
    v7 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0xF8);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (v9 = *(_QWORD *)(v8 + 200)) != 0
      && *(_DWORD *)(v9 + 4)
      && (*(_BYTE *)(v9 + 16) & 4) == 0)
    {
      result = WTF::String::String();
    }
    else
    {
      result = WTF::String::String();
    }
  }
  else
  {
LABEL_12:
    *a2 = 0;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(this, v6);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

void WebCore::RenderVTTCue::~RenderVTTCue(WebCore::RenderVTTCue *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 256) = 0;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderVTTCue::layout(WebCore::RenderVTTCue *this)
{
  uint64_t (**v1)();
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::RenderObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  WebCore::RenderObject *v20;
  int *v21;
  int v22;
  float v23;
  double v24;
  int v25;
  int v26;
  unint64_t v27;
  const WebCore::RenderBlockFlow *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  float v36;
  double v37;
  int v38;
  unsigned int v39;
  signed int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  double v48;
  int v49;
  uint64_t v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  signed int v64;
  int v65;
  unsigned int v66;
  int *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  const WebCore::RenderBlockFlow *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  WebCore::RenderObject *v89;
  unint64_t v90;
  float v91;
  int v92;
  int v93;
  float v94;
  double v95;
  int v96;
  int v97;
  double v98;
  WebCore::RenderObject *v99;
  int v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  WebCore::RenderObject *v104;
  int v105;
  BOOL v106;
  BOOL v107;
  char v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  double v113;
  int v114;
  double v115;
  int v116;
  uint64_t v117;
  int v118;
  char v119;
  _QWORD v120[2];
  unsigned int v121;
  _BYTE v122[16];
  unsigned int v123;
  unint64_t v124[2];
  int v125;
  char v126;
  unint64_t v127[2];
  unsigned int v128;

  result = WebCore::RenderBlock::layout(this);
  v4 = *(_QWORD *)(*((_QWORD *)this + 31) + 224);
  if (v4)
    v5 = (uint64_t *)(v4 + 24);
  else
    v5 = (uint64_t *)MEMORY[0x1E0CBF738];
  v6 = *v5;
  if (!v6 || !*(_DWORD *)(v6 + 4))
  {
    v127[0] = *((_QWORD *)this + 19);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                   + 248);
    v8 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v7 + 336, this, (int *)v127, 0, 0);
    if (v8)
      ++*(_DWORD *)(v7 + 492);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 128))(*((_QWORD *)this + 31));
    if ((_DWORD)result != 3)
    {
      v10 = *((unsigned int *)this + 16);
      if (!(v10 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
        goto LABEL_168;
      v11 = *(_QWORD *)((v10 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (!v11)
        goto LABEL_168;
      if ((*(_BYTE *)(v11 + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19647420CLL);
      }
      v12 = *(unsigned int *)(v11 + 64) | ((unint64_t)*(unsigned __int8 *)(v11 + 68) << 32);
      if (v12)
        v13 = *(_QWORD *)(v12 + 8);
      else
        v13 = 0;
      if ((*(_BYTE *)(v13 + 45) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19647422CLL);
      }
      v18 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v13, v9);
      if (v18)
      {
        WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v18, (const WebCore::RenderInline *)v13, v127);
      }
      else
      {
        v127[0] = *(_QWORD *)(v13 + 152);
        v128 = 1;
      }
      v19 = (_BYTE *)*((_QWORD *)this + 31);
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v19 + 128))(v19) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19647424CLL);
      }
      if (v19[488]
        && (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v127) & 1) == 0)
      {
        v20 = WebCore::RenderObject::containingBlock(this);
        if (((*((_DWORD *)v20 + 31) >> 13) & 6u) - 2 < 4)
          v21 = (int *)((char *)v20 + 164);
        else
          v21 = (int *)((char *)v20 + 160);
        if (v128 == -1)
          goto LABEL_285;
        v22 = *v21;
        v124[0] = (unint64_t)v122;
        if ((((uint64_t (*)(unint64_t *, unint64_t *))off_1E3439810[v128])(v124, v127) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964742CCLL);
        }
        if (v128 == -1)
          goto LABEL_285;
        v124[0] = (unint64_t)v122;
        ((void (*)(unint64_t *, unint64_t *))off_1E3439820[v128])(v124, v127);
        v24 = v23 * 64.0;
        if (v24 >= 2147483650.0)
        {
          v25 = -1073741823;
        }
        else if (v24 <= -2147483650.0)
        {
          v25 = 0x40000000;
        }
        else
        {
          v25 = (int)v24 / -2;
        }
        if (v22 >= 0)
          v26 = v22;
        else
          v26 = v22 + 1;
        *((_DWORD *)this + 38) = v25 + (v26 >> 1);
      }
      result = WebCore::RenderVTTCue::repositionCueSnapToLinesNotSet((uint64_t)this);
      goto LABEL_43;
    }
    if ((*(_BYTE *)(*((_QWORD *)this + 31) + 357) & 1) == 0)
    {
      result = WebCore::RenderVTTCue::repositionCueSnapToLinesNotSet((uint64_t)this);
      goto LABEL_168;
    }
    v14 = *((unsigned int *)this + 16);
    if (v14 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    {
      v15 = *(_QWORD *)((v14 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 52) & 7) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19647426CLL);
        }
        v16 = *(unsigned int *)(v15 + 64) | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32);
        if (v16)
          v17 = *(_QWORD *)(v16 + 8);
        else
          v17 = 0;
        if ((*(_BYTE *)(v17 + 45) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19647428CLL);
        }
        v27 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v17, v9);
        if (v27)
        {
          WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v27, (const WebCore::RenderInline *)v17, v127);
        }
        else
        {
          v127[0] = *(_QWORD *)(v17 + 152);
          v128 = 1;
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v127) & 1) != 0)
        {
          WebCore::InlineIterator::firstRootInlineBoxFor((unsigned int *)this, v28, (uint64_t)v124);
        }
        else
        {
          v29 = *((unsigned int *)this + 16);
          v30 = v29 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
          if (v30)
            v30 = *(_QWORD *)((v29 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
          if ((*(_BYTE *)(v30 + 52) & 7) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1964742ECLL);
          }
          v31 = *(unsigned int *)(v30 + 64) | ((unint64_t)*(unsigned __int8 *)(v30 + 68) << 32);
          if (v31)
            v32 = *(_QWORD *)(v31 + 8);
          else
            v32 = 0;
          if ((*(_BYTE *)(v32 + 45) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19647430CLL);
          }
          v33 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v32, v28);
          if (v33)
          {
            WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v33, (const WebCore::RenderInline *)v32, v124);
          }
          else
          {
            v124[0] = *(_QWORD *)(v32 + 152);
            v125 = 1;
          }
        }
        if (v128 != -1)
          ((void (*)(_BYTE *, unint64_t *))off_1E34397A0[v128])(v122, v127);
        result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v124);
        if ((result & 1) != 0)
        {
          LODWORD(v1) = 0;
LABEL_95:
          LODWORD(v50) = 0;
          v51 = 0;
LABEL_159:
          if (v125 != -1)
            result = ((uint64_t (*)(unint64_t *, unint64_t *))off_1E34397A0[v125])(v127, v124);
          if (!v51)
            goto LABEL_168;
          v70 = *((unsigned int *)this + 16);
          if (!(v70 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
            goto LABEL_168;
          v71 = *(_QWORD *)((v70 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
          if (!v71)
            goto LABEL_168;
          if (*(_BYTE *)(*((_QWORD *)this + 31) + 216))
          {
            v73 = *((_DWORD *)this + 38);
            v72 = *((_DWORD *)this + 39);
            v101 = __OFADD__(v73, (_DWORD)v50);
            v74 = v73 + v50;
            v75 = (v73 >> 31) + 0x7FFFFFFF;
            if (!v101)
              v75 = v74;
            *((_DWORD *)this + 38) = v75;
          }
          else
          {
            v75 = *((_DWORD *)this + 38);
            v76 = *((_DWORD *)this + 39);
            v101 = __OFADD__(v76, (_DWORD)v50);
            v77 = v76 + v50;
            v72 = (v76 >> 31) + 0x7FFFFFFF;
            if (!v101)
              v72 = v77;
            *((_DWORD *)this + 39) = v72;
          }
          *((float *)this + 64) = (float)v75 * 0.015625;
          *((float *)this + 65) = (float)v72 * 0.015625;
          if ((*(_BYTE *)(v71 + 52) & 7) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19647439CLL);
          }
          v78 = *(unsigned int *)(v71 + 64) | ((unint64_t)*(unsigned __int8 *)(v71 + 68) << 32);
          if (v78)
            v79 = *(_QWORD *)(v78 + 8);
          else
            v79 = 0;
          if ((*(_BYTE *)(v79 + 45) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1964743BCLL);
          }
          v80 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v79, v9);
          if (v80)
          {
            WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v80, (const WebCore::RenderInline *)v79, v124);
          }
          else
          {
            v124[0] = *(_QWORD *)(v79 + 152);
            v125 = 1;
          }
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v124) & 1) != 0)
          {
            WebCore::InlineIterator::firstRootInlineBoxFor((unsigned int *)this, v81, (uint64_t)v127);
          }
          else
          {
            v82 = *((unsigned int *)this + 16);
            v83 = v82 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
            if (v83)
              v83 = *(_QWORD *)((v82 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
            if ((*(_BYTE *)(v83 + 52) & 7) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1964743DCLL);
            }
            v84 = *(unsigned int *)(v83 + 64) | ((unint64_t)*(unsigned __int8 *)(v83 + 68) << 32);
            if (v84)
              v85 = *(_QWORD *)(v84 + 8);
            else
              v85 = 0;
            if ((*(_BYTE *)(v85 + 45) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1964743FCLL);
            }
            v86 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v85, v81);
            if (v86)
            {
              WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v86, (const WebCore::RenderInline *)v85, v127);
            }
            else
            {
              v127[0] = *(_QWORD *)(v85 + 152);
              v128 = 1;
            }
          }
          v87 = (int)v1;
          if (v125 != -1)
            ((void (*)(_BYTE *, unint64_t *))off_1E34397A0[v125])(v122, v124);
          v119 = 1;
          while (1)
          {
            while (1)
            {
              if ((WebCore::RenderVTTCue::isOutside(this) & 1) == 0)
              {
                v88 = *((unsigned int *)this + 16);
                if (!(v88 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
                  goto LABEL_252;
                v89 = *(WebCore::RenderObject **)((v88 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
                if (!v89)
                  goto LABEL_252;
                if ((*((_BYTE *)v89 + 52) & 7) != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196474374);
                }
                v124[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v89, 1, 0);
                v124[1] = v90;
                if (!WebCore::RenderVTTCue::overlappingObjectForRect(*((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32), (const WebCore::IntRect *)v124))
                {
LABEL_252:
                  if ((*(unsigned int (**)(WebCore::RenderVTTCue *))(*(_QWORD *)this + 1064))(this)
                    || (*(unsigned int (**)(WebCore::RenderVTTCue *))(*(_QWORD *)this + 1072))(this)
                    || (*(unsigned int (**)(WebCore::RenderVTTCue *))(*(_QWORD *)this + 976))(this)
                    || (*(unsigned int (**)(WebCore::RenderVTTCue *))(*(_QWORD *)this + 984))(this)
                    || (*(unsigned int (**)(WebCore::RenderVTTCue *, _QWORD))(*(_QWORD *)this + 1128))(this, 0)|| (result = (*(uint64_t (**)(WebCore::RenderVTTCue *, _QWORD))(*(_QWORD *)this + 1136))(this, 0), (_DWORD)result))
                  {
                    result = WebCore::RenderVTTCue::moveIfNecessaryToKeepWithinContainer((unint64_t)this);
                  }
LABEL_43:
                  if (v128 != -1)
                    result = ((uint64_t (*)(unint64_t *, unint64_t *))off_1E34397A0[v128])(v124, v127);
                  goto LABEL_168;
                }
              }
              if (v128 == -1)
                goto LABEL_285;
              v124[0] = (unint64_t)v122;
              if ((((uint64_t (*)(unint64_t *, unint64_t *))off_1E3439810[v128])(v124, v127) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1964742ACLL);
              }
              if (v128 == -1)
                goto LABEL_285;
              v124[0] = (unint64_t)v122;
              ((void (*)(unint64_t *, unint64_t *))off_1E3439820[v128])(v124, v127);
              v92 = *((_DWORD *)this + 38);
              v93 = *((_DWORD *)this + 39);
              v95 = (float)(v94 + (float)((float)v93 * 0.015625)) * 64.0;
              v96 = (int)v95;
              if (v95 <= -2147483650.0)
                v96 = 0x80000000;
              v97 = v95 < 2147483650.0 ? v96 : 0x7FFFFFFF;
              v98 = (float)(v91 + (float)((float)v92 * 0.015625)) * 64.0;
              if (v98 >= 2147483650.0)
                LODWORD(v1) = 0x7FFFFFFF;
              else
                LODWORD(v1) = v98 <= -2147483650.0 ? 0x80000000 : (int)v98;
              v99 = WebCore::RenderObject::containingBlock(this);
              if (*(_BYTE *)(*((_QWORD *)this + 31) + 216))
                break;
              v100 = *((_DWORD *)v99 + 41);
              if (v87 > 0)
              {
                v101 = __OFSUB__(v97, v100);
                v102 = v97 <= v100;
              }
              else
              {
                v101 = 0;
                v102 = 1;
              }
              v103 = !v102;
              if ((v93 & v87) < 0 == v101 && !v103)
                break;
LABEL_237:
              v113 = *((float *)this + 64) * 64.0;
              v114 = (int)v113;
              if (v113 <= -2147483650.0)
                v114 = 0x80000000;
              if (v113 >= 2147483650.0)
                v114 = 0x7FFFFFFF;
              *((_DWORD *)this + 38) = v114;
              v115 = *((float *)this + 65) * 64.0;
              if (v115 >= 2147483650.0)
              {
                v116 = 0x7FFFFFFF;
              }
              else if (v115 <= -2147483650.0)
              {
                v116 = 0x80000000;
              }
              else
              {
                v116 = (int)v115;
              }
              *((_DWORD *)this + 39) = v116;
              if ((v119 & 1) == 0)
                goto LABEL_252;
              v119 = 0;
              if (v87 == 0x80000000)
                v87 = 0x7FFFFFFF;
              else
                v87 = -v87;
            }
            v104 = WebCore::RenderObject::containingBlock(this);
            if (*(_BYTE *)(*((_QWORD *)this + 31) + 216))
            {
              v105 = *((_DWORD *)v104 + 40);
              if (v87 > 0)
              {
                v106 = __OFSUB__((_DWORD)v1, v105);
                v107 = (int)v1 <= v105;
              }
              else
              {
                v106 = 0;
                v107 = 1;
              }
              v108 = !v107;
              if ((v87 & v92) < 0 != v106 || (v108 & 1) != 0)
                goto LABEL_237;
              v109 = *((_DWORD *)this + 38);
              v110 = v109 + v87;
              if (__OFADD__(v109, v87))
                v110 = (v109 >> 31) + 0x7FFFFFFF;
              *((_DWORD *)this + 38) = v110;
            }
            else
            {
              v111 = *((_DWORD *)this + 39);
              v112 = v111 + v87;
              if (__OFADD__(v111, v87))
                v112 = (v111 >> 31) + 0x7FFFFFFF;
              *((_DWORD *)this + 39) = v112;
            }
          }
        }
        if (v125 != -1)
        {
          v127[0] = (unint64_t)v122;
          if ((((uint64_t (*)(unint64_t *, unint64_t *))off_1E3439810[v125])(v127, v124) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19647432CLL);
          }
          if (v125 != -1)
          {
            v127[0] = (unint64_t)v122;
            ((void (*)(unint64_t *, unint64_t *))off_1E3439820[v125])(v127, v124);
            if (*(_BYTE *)(*((_QWORD *)this + 31) + 216))
              v36 = v34;
            else
              v36 = v35;
            v37 = v36 * 64.0;
            if (v37 >= 2147483650.0)
            {
              v38 = 0x7FFFFFFF;
            }
            else if (v37 <= -2147483650.0)
            {
              v38 = 0x80000000;
            }
            else
            {
              v38 = (int)v37;
            }
            v122[0] = 0;
            v123 = -1;
            v39 = v125;
            if (v125 != -1)
            {
              ((void (*)(unint64_t *, _BYTE *, unint64_t *))off_1E34397B0[v125])(v127, v122, v124);
              v123 = v39;
            }
            v118 = v38;
            result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v122);
            v40 = 0;
            if ((result & 1) != 0)
            {
LABEL_78:
              if (v123 != -1)
                result = ((uint64_t (*)(unint64_t *, _BYTE *))off_1E34397A0[v123])(v127, v122);
              v41 = *((unsigned int *)this + 16);
              v42 = v41 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
              LODWORD(v1) = v118;
              if (v42)
                v42 = *(_QWORD *)((v41 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
              if ((*(_BYTE *)(v42 + 52) & 7) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19647434CLL);
              }
              if (((*(_DWORD *)(v42 + 124) >> 13) & 6u) - 2 < 4)
                v43 = (unsigned int *)(v42 + 160);
              else
                v43 = (unsigned int *)(v42 + 164);
              v44 = *v43;
              v45 = *v43 - v40;
              if (__OFSUB__(v44, v40))
                v45 = (v44 >> 31) + 0x7FFFFFFF;
              if (v45 <= 0)
              {
LABEL_90:
                if (!(_DWORD)v1)
                  goto LABEL_95;
LABEL_91:
                v47 = *((_QWORD *)this + 31);
                if ((*(_BYTE *)(v47 + 357) & 1) != 0)
                {
                  if (!*(_BYTE *)(v47 + 168))
                  {
                    v60 = *(_QWORD *)(v47 + 104);
                    if (v60 && (v61 = *(_QWORD *)(v60 + 8)) != 0)
                    {
                      if (*(_BYTE *)(v61 + 132))
                      {
                        result = *(unsigned int *)(v61 + 128);
                      }
                      else
                      {
                        v117 = *(_QWORD *)(v61 - 16);
                        if (v117)
                        {
                          result = *(_QWORD *)(v117 + 8);
                          if (result)
                          {
                            if (*(_DWORD *)(result + 72) != 1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x196474444);
                            }
                            result = WebCore::TextTrackList::getTrackIndexRelativeToRenderedTracks((WebCore::TextTrackList *)result, (WebCore::TextTrack *)(v61 - 120));
                            *(_DWORD *)(v61 + 128) = result;
                            *(_BYTE *)(v61 + 132) = 1;
                            v47 = *((_QWORD *)this + 31);
                          }
                        }
                        else
                        {
                          result = 0;
                        }
                      }
                      v49 = ~(_DWORD)result;
                    }
                    else
                    {
                      v49 = -1;
                    }
LABEL_135:
                    v62 = *(unsigned __int8 *)(v47 + 216);
                    if (v62 == 1)
                      v63 = ~v49;
                    else
                      v63 = v49;
                    v64 = v63 << 6;
                    if (v63 < -33554432)
                      v64 = 0x80000000;
                    if (v63 > 0x1FFFFFF)
                      v64 = 0x7FFFFFFF;
                    v50 = v64 * (uint64_t)(int)v1 / 64;
                    if (HIDWORD(v50) != (int)v50 >> 31)
                      LODWORD(v50) = ((v64 ^ v1) >> 31) + 0x7FFFFFFF;
                    if (v62 == 1)
                    {
                      v65 = *((_DWORD *)this + 40);
                      v101 = __OFSUB__((_DWORD)v50, v65);
                      v66 = v50 - v65;
                      if (v101)
                        v66 = (v50 >> 31) + 0x7FFFFFFF;
                      LODWORD(v50) = v66 + (_DWORD)v1;
                      if (__OFADD__(v66, (_DWORD)v1))
                      {
                        LODWORD(v50) = (v66 >> 31) + 0x7FFFFFFF;
                        if (v49 < 0)
                          goto LABEL_158;
                      }
                      else if (v49 < 0)
                      {
                        goto LABEL_158;
                      }
                    }
                    else
                    {
                      if ((v49 & 0x80000000) == 0)
                      {
LABEL_158:
                        v51 = 1;
                        goto LABEL_159;
                      }
                      if (!v62)
                      {
                        result = (uint64_t)WebCore::RenderObject::containingBlock(this);
                        v67 = (int *)(result + 164);
                        goto LABEL_153;
                      }
                    }
                    result = (uint64_t)WebCore::RenderObject::containingBlock(this);
                    v67 = (int *)(result + 160);
LABEL_153:
                    v68 = *v67;
                    v101 = __OFADD__((_DWORD)v50, v68);
                    v69 = v50 + v68;
                    if (v101)
                      LODWORD(v50) = (v50 >> 31) + 0x7FFFFFFF;
                    else
                      LODWORD(v50) = v69;
                    if ((_DWORD)v1 == 0x80000000)
                      LODWORD(v1) = 0x7FFFFFFF;
                    else
                      LODWORD(v1) = -(int)v1;
                    goto LABEL_158;
                  }
                  v48 = *(double *)(v47 + 160);
                  if (v48 >= 0.0 || v48 <= 100.0)
                    goto LABEL_94;
                }
                else if (*(_BYTE *)(v47 + 168))
                {
                  v48 = *(double *)(v47 + 160);
LABEL_94:
                  v49 = (int)v48;
                  goto LABEL_135;
                }
                v49 = 100;
                goto LABEL_135;
              }
              v101 = __OFADD__(v118, v45);
              v46 = v118 + v45;
              if (!v101)
              {
                LODWORD(v1) = v46;
                goto LABEL_90;
              }
LABEL_286:
              LODWORD(v1) = (v1 >> 31) + 0x7FFFFFFF;
              goto LABEL_91;
            }
            v1 = __const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0;
            while (1)
            {
              if (v123 == -1)
                goto LABEL_285;
              v127[0] = (unint64_t)v120;
              if ((((uint64_t (*)(unint64_t *, _BYTE *))off_1E3439810[v123])(v127, v122) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1964741C4);
              }
              if (v123 == -1)
                goto LABEL_285;
              v127[0] = (unint64_t)v120;
              ((void (*)(unint64_t *, _BYTE *))off_1E3439820[v123])(v127, v122);
              if (v123 == -1)
                goto LABEL_285;
              v54 = v52;
              v55 = v53;
              v127[0] = (unint64_t)v120;
              v56 = ((unsigned int (*)(unint64_t *, _BYTE *))off_1E34397D0[v123])(v127, v122)
                  ? v55
                  : v54;
              v57 = (float)((float)((float)v40 * 0.015625) + v56) * 64.0;
              if (v57 >= 2147483650.0)
                v40 = 0x7FFFFFFF;
              else
                v40 = v57 <= -2147483650.0 ? 0x80000000 : (int)v57;
              if (v123 == -1)
                goto LABEL_285;
              v127[0] = (unint64_t)v120;
              if ((((uint64_t (*)(unint64_t *, _BYTE *))off_1E3439810[v123])(v127, v122) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1964741E4);
              }
              LOBYTE(v127[0]) = 0;
              v128 = -1;
              v58 = v123;
              if (v123 == -1)
                goto LABEL_285;
              ((void (*)(_QWORD *, unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v123])(v120, v127, v122);
              v128 = v58;
              v120[0] = &v126;
              ((void (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v58])(v120, v127);
              LOBYTE(v120[0]) = 0;
              v121 = -1;
              v59 = v128;
              if (v128 == -1)
              {
                v59 = 0xFFFFFFFFLL;
              }
              else
              {
                ((void (*)(char *, _QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v128])(&v126, v120, v127);
                v121 = v59;
                if (v128 != -1)
                {
                  ((void (*)(char *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v128])(&v126, v127);
                  v59 = v121;
                }
              }
              if (v123 != -1)
                break;
              if (v59 != 0xFFFFFFFFLL)
                goto LABEL_118;
LABEL_121:
              result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v122);
              if ((result & 1) != 0)
                goto LABEL_78;
            }
            if (v59 == 0xFFFFFFFFLL)
            {
              ((void (*)(unint64_t *, _BYTE *))off_1E34397A0[v123])(v127, v122);
              v123 = -1;
            }
            else
            {
LABEL_118:
              v127[0] = (unint64_t)v122;
              ((void (*)(unint64_t *, _BYTE *, _QWORD *))off_1E3439830[v59])(v127, v122, v120);
            }
            if (v121 != -1)
              ((void (*)(unint64_t *, _QWORD *))off_1E34397A0[v121])(v127, v120);
            goto LABEL_121;
          }
        }
LABEL_285:
        result = std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_286;
      }
    }
LABEL_168:
    if (v8)
    {
      result = WebCore::LocalFrameViewLayoutContext::popLayoutState(v7 + 336, v9);
      --*(_DWORD *)(v7 + 492);
    }
  }
  return result;
}

uint64_t WebCore::RenderVTTCue::repositionCueSnapToLinesNotSet(uint64_t this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  WebCore::RenderObject *v32;
  WebCore::RenderObject *v33;
  WebCore::RenderObject *v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  WebCore::RenderObject *v39;
  WebCore::RenderObject *v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  WebCore::RenderObject *v45;
  int v46;
  int v47;
  double v48;
  int v49;
  double v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  if (!(*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)))
    return this;
  v1 = this;
  this = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
  if (!this)
    return this;
  if ((*(_BYTE *)(this + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196474A50);
  }
  WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)this, 1, 0);
  v3 = *(_QWORD *)(v1 + 248);
  if (*(unsigned __int8 *)(v3 + 216) - 1 >= 2)
  {
    if (!*(_BYTE *)(v3 + 216))
    {
      v9 = *(unsigned __int8 *)(v3 + 359);
      if (v9 == 2)
      {
        v10 = *(_DWORD *)(v1 + 156);
        v11 = HIDWORD(v2);
        v13 = HIDWORD(v2) << 6;
        if (SHIDWORD(v2) < -33554432)
          v13 = 0x80000000;
        v14 = 0x1FFFFFF;
      }
      else
      {
        if (v9 != 1)
          goto LABEL_38;
        v10 = *(_DWORD *)(v1 + 156);
        v11 = HIDWORD(v2);
        if ((v2 & 0x8000000000000000) == 0)
          v12 = HIDWORD(v2);
        else
          v12 = HIDWORD(v2) + 1;
        v13 = (32 * v12) & 0xFFFFFFC0;
        if (SHIDWORD(v2) < -67108865)
          v13 = 0x80000000;
        v14 = 0x3FFFFFF;
      }
      if ((int)v11 > v14)
        v13 = 0x7FFFFFFF;
      v15 = __OFSUB__(v10, v13);
      v18 = v10 - v13;
      v19 = (v10 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v19 = v18;
      *(_DWORD *)(v1 + 156) = v19;
    }
  }
  else
  {
    v4 = *(unsigned __int8 *)(v3 + 359);
    if (v4 == 2)
    {
      v5 = *(_DWORD *)(v1 + 152);
      v7 = (_DWORD)v2 << 6;
      if ((int)v2 < -33554432)
        v7 = 0x80000000;
      v8 = 0x1FFFFFF;
      goto LABEL_25;
    }
    if (v4 == 1)
    {
      v5 = *(_DWORD *)(v1 + 152);
      if ((v2 & 0x80000000) == 0)
        v6 = v2;
      else
        v6 = v2 + 1;
      v7 = (32 * v6) & 0xFFFFFFC0;
      if ((int)v2 < -67108865)
        v7 = 0x80000000;
      v8 = 0x3FFFFFF;
LABEL_25:
      if ((int)v2 > v8)
        v7 = 0x7FFFFFFF;
      v15 = __OFSUB__(v5, v7);
      v16 = v5 - v7;
      v17 = (v5 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v17 = v16;
      *(_DWORD *)(v1 + 152) = v17;
    }
  }
LABEL_38:
  this = WebCore::RenderVTTCue::isOutside((WebCore::RenderVTTCue *)v1);
  if ((this & 1) != 0)
    goto LABEL_39;
  v52 = *(unsigned int *)(v1 + 64);
  if (v52 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32))
  {
    this = *(_QWORD *)((v52 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32)) + 8);
    if (this)
    {
      if ((*(_BYTE *)(this + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x196474A90);
      }
      v54 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)this, 1, 0);
      v55 = v53;
      this = WebCore::RenderVTTCue::overlappingObjectForRect(*(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32), (const WebCore::IntRect *)&v54);
      if (this)
      {
LABEL_39:
        this = WebCore::RenderVTTCue::moveIfNecessaryToKeepWithinContainer(v1);
        v20 = *(unsigned int *)(v1 + 64);
        if (v20 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32))
        {
          this = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32)) + 8);
          if (this)
          {
            v21 = *(_DWORD *)(v1 + 152);
            v22 = *(_DWORD *)(v1 + 156);
            if (v21 >= 0)
              v23 = *(_DWORD *)(v1 + 152);
            else
              v23 = v21 + 63;
            if (v22 >= 0)
              v24 = *(_DWORD *)(v1 + 156);
            else
              v24 = v22 + 63;
            if ((*(_BYTE *)(this + 52) & 7) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x196474A70);
            }
            v25 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)this, 1, 0);
            v27 = v26;
            v54 = v25;
            v55 = v26;
            v28 = WebCore::RenderVTTCue::overlappingObjectForRect(*(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32), (const WebCore::IntRect *)&v54);
            v29 = HIDWORD(v25);
            v30 = v25;
            if (v28)
            {
              v29 = HIDWORD(v25);
              v30 = v25;
              do
              {
                v31 = *(unsigned int *)(v28 + 64) | ((unint64_t)*(unsigned __int8 *)(v28 + 68) << 32);
                if (*(_BYTE *)(*(_QWORD *)(v1 + 248) + 216))
                {
                  if ((v31 & 0xFFFFFFFFFFLL) != 0)
                    v32 = *(WebCore::RenderObject **)((v31 & 0xFFFFFFFFFFLL) + 8);
                  else
                    v32 = 0;
                  if ((*((_BYTE *)v32 + 52) & 7) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1964749D0);
                  }
                  v30 = WebCore::RenderObject::absoluteBoundingBoxRect(v32, 1, 0) - v27;
                  LODWORD(v54) = v30;
                }
                else
                {
                  if ((v31 & 0xFFFFFFFFFFLL) != 0)
                    v33 = *(WebCore::RenderObject **)((v31 & 0xFFFFFFFFFFLL) + 8);
                  else
                    v33 = 0;
                  if ((*((_BYTE *)v33 + 52) & 7) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196474A10);
                  }
                  v29 = (WebCore::RenderObject::absoluteBoundingBoxRect(v33, 1, 0) >> 32) - HIDWORD(v27);
                  HIDWORD(v54) = v29;
                }
                v28 = WebCore::RenderVTTCue::overlappingObjectForRect(*(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32), (const WebCore::IntRect *)&v54);
              }
              while (v28);
            }
            v34 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v1);
            this = WebCore::RenderObject::absoluteBoundingBoxRect(v34, 1, 0);
            if (v30 >= (int)this
              && v35 + (int)this >= v30 + (int)v27
              && v29 >= SHIDWORD(this)
              && v36 + HIDWORD(this) >= v29 + HIDWORD(v27))
            {
              goto LABEL_84;
            }
            v54 = v25;
            v55 = v27;
            v37 = WebCore::RenderVTTCue::overlappingObjectForRect(*(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32), (const WebCore::IntRect *)&v54);
            v29 = HIDWORD(v25);
            v30 = v25;
            if (v37)
            {
              v29 = HIDWORD(v25);
              v30 = v25;
              do
              {
                v38 = *(unsigned int *)(v37 + 64) | ((unint64_t)*(unsigned __int8 *)(v37 + 68) << 32);
                if (*(_BYTE *)(*(_QWORD *)(v1 + 248) + 216))
                {
                  if ((v38 & 0xFFFFFFFFFFLL) != 0)
                    v39 = *(WebCore::RenderObject **)((v38 & 0xFFFFFFFFFFLL) + 8);
                  else
                    v39 = 0;
                  if ((*((_BYTE *)v39 + 52) & 7) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1964749F0);
                  }
                  v41 = WebCore::RenderObject::absoluteBoundingBoxRect(v39, 1, 0);
                  v30 = v42 + v41;
                  LODWORD(v54) = v42 + v41;
                }
                else
                {
                  if ((v38 & 0xFFFFFFFFFFLL) != 0)
                    v40 = *(WebCore::RenderObject **)((v38 & 0xFFFFFFFFFFLL) + 8);
                  else
                    v40 = 0;
                  if ((*((_BYTE *)v40 + 52) & 7) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196474A30);
                  }
                  v43 = WebCore::RenderObject::absoluteBoundingBoxRect(v40, 1, 0);
                  v29 = v44 + HIDWORD(v43);
                  HIDWORD(v54) = v44 + HIDWORD(v43);
                }
                v37 = WebCore::RenderVTTCue::overlappingObjectForRect(*(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32), (const WebCore::IntRect *)&v54);
              }
              while (v37);
            }
            v45 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v1);
            this = WebCore::RenderObject::absoluteBoundingBoxRect(v45, 1, 0);
            if (v30 >= (int)this
              && v46 + (int)this >= v30 + (int)v27
              && v29 >= SHIDWORD(this)
              && v47 + HIDWORD(this) >= v29 + HIDWORD(v27))
            {
LABEL_84:
              v48 = (float)((v23 >> 6) - (int)v25 + v30) * 64.0;
              if (v48 >= 2147483650.0)
              {
                v49 = 0x7FFFFFFF;
              }
              else if (v48 <= -2147483650.0)
              {
                v49 = 0x80000000;
              }
              else
              {
                v49 = (int)v48;
              }
              *(_DWORD *)(v1 + 152) = v49;
              v50 = (float)((v24 >> 6) - HIDWORD(v25) + v29) * 64.0;
              if (v50 >= 2147483650.0)
              {
                v51 = 0x7FFFFFFF;
              }
              else if (v50 <= -2147483650.0)
              {
                v51 = 0x80000000;
              }
              else
              {
                v51 = (int)v50;
              }
              *(_DWORD *)(v1 + 156) = v51;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderVTTCue::isOutside(WebCore::RenderVTTCue *this)
{
  WebCore::RenderObject *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderObject *v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t result;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  v2 = *(WebCore::RenderObject **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                                 + 8);
  if (!v2)
    return 0;
  if ((*((_BYTE *)v2 + 52) & 7) == 1)
  {
    v3 = 1;
    v4 = WebCore::RenderObject::absoluteBoundingBoxRect(v2, 1, 0);
    v6 = v5;
    v7 = WebCore::RenderObject::containingBlock(this);
    v8 = WebCore::RenderObject::absoluteBoundingBoxRect(v7, 1, 0);
    if ((int)v8 <= (int)v4 && v9 + (int)v8 >= (int)v6 + (int)v4 && SHIDWORD(v8) <= SHIDWORD(v4))
      return v10 + HIDWORD(v8) < HIDWORD(v6) + HIDWORD(v4);
    return v3;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderVTTCue::overlappingObjectForRect(unint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::RenderObject *v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t result;

  if ((this & 0xFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
  if (!v2)
    return 0;
  while (1)
  {
    if (*(_BYTE *)(v2 + 46) != 47)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x196474CACLL);
    }
    v4 = *(unsigned int *)(v2 + 64);
    if (v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32))
    {
      v5 = *(WebCore::RenderObject **)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)) + 8);
      if (v5)
      {
        if ((*((_BYTE *)v5 + 52) & 7) != 1)
          goto LABEL_26;
        v6 = WebCore::RenderObject::absoluteBoundingBoxRect(v5, 1, 0);
        v9 = *((_DWORD *)a2 + 2);
        if (v9 >= 1)
        {
          v10 = *((_DWORD *)a2 + 3);
          if (v10 >= 1 && v7 >= 1 && v8 >= 1)
          {
            v12 = *(_DWORD *)a2 + v9;
            if (*(_DWORD *)a2 < (int)v6 + v7 && v12 > (int)v6)
            {
              v14 = *((_DWORD *)a2 + 1);
              v15 = v14 + v10;
              if (v14 < HIDWORD(v6) + v8 && v15 > SHIDWORD(v6))
                return v2;
            }
          }
        }
      }
    }
    v17 = *(unsigned int *)(v2 + 40);
    if (!(v17 | ((unint64_t)*(unsigned __int8 *)(v2 + 44) << 32)))
      return 0;
    result = 0;
    v2 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v2 + 44) << 32)) + 8);
    if (!v2)
      return result;
  }
}

unint64_t WebCore::RenderVTTCue::moveIfNecessaryToKeepWithinContainer(unint64_t this)
{
  unint64_t v1;
  WebCore::RenderObject *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderObject *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;

  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)
    && *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8))
  {
    v1 = this;
    v2 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)this);
    v3 = WebCore::RenderObject::absoluteBoundingBoxRect(v2, 1, 0);
    v5 = v4;
    v6 = *(unsigned int *)(v1 + 64);
    if (v6 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32))
      v7 = *(WebCore::RenderObject **)((v6 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32)) + 8);
    else
      v7 = 0;
    if ((*((_BYTE *)v7 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x196474E28);
    }
    this = WebCore::RenderObject::absoluteBoundingBoxRect(v7, 1, 0);
    if (SHIDWORD(this) < SHIDWORD(v3))
      v10 = HIDWORD(v3) - HIDWORD(this);
    else
      v10 = (HIDWORD(v5) + HIDWORD(v3) - (v9 + HIDWORD(this))) & ((HIDWORD(v5) + HIDWORD(v3) - (v9 + HIDWORD(this))) >> 31);
    if (v10)
    {
      v11 = *(_DWORD *)(v1 + 156);
      if (v10 >= -33554432)
        v12 = v10 << 6;
      else
        v12 = 0x80000000;
      if (v10 <= 0x1FFFFFF)
        v13 = v12;
      else
        v13 = 0x7FFFFFFF;
      v14 = __OFADD__(v11, v13);
      v15 = v11 + v13;
      if (v14)
        v15 = (v11 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v1 + 156) = v15;
    }
    v16 = (v5 + v3 - (v8 + this)) & (((int)v5 + (int)v3 - (v8 + (int)this)) >> 31);
    if ((int)this < (int)v3)
      v16 = v3 - this;
    if (v16)
    {
      v17 = *(_DWORD *)(v1 + 152);
      if (v16 >= -33554432)
        v18 = v16 << 6;
      else
        v18 = 0x80000000;
      if (v16 <= 0x1FFFFFF)
        v19 = v18;
      else
        v19 = 0x7FFFFFFF;
      v14 = __OFADD__(v17, v19);
      v20 = v17 + v19;
      if (v14)
        v20 = (v17 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v1 + 152) = v20;
    }
  }
  return this;
}

unint64_t WebCore::RenderVideo::RenderVideo(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int shouldApplyInlineSizeContainment;
  int v9;
  unint64_t v10;

  v4 = WebCore::RenderImage::RenderImage(a1, 48, a2, a3, 2uLL, 0, 1.0);
  *(_BYTE *)(v4 + 234) = 1;
  *(_QWORD *)v4 = off_1E3438070;
  *(_QWORD *)(v4 + 240) = 0;
  if (WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)v4))
  {
    v5 = WebCore::RenderReplaced::intrinsicSize(a1);
    LODWORD(v6) = v5;
    v7 = v5;
  }
  else
  {
    v6 = WebCore::RenderVideo::calculateIntrinsicSizeInternal((WebCore::RenderVideo *)a1);
    shouldApplyInlineSizeContainment = WebCore::RenderElement::shouldApplyInlineSizeContainment((WebCore::RenderElement *)a1);
    v7 = v6;
    if (shouldApplyInlineSizeContainment)
    {
      v9 = *(_DWORD *)(a1 + 20);
      v10 = WebCore::RenderReplaced::intrinsicSize(a1);
      if ((v9 & 0x1000) != 0)
        v7 = v10;
      else
        v7 = v6;
      if ((v9 & 0x1000) == 0)
        LODWORD(v6) = v10;
    }
  }
  *(_QWORD *)(a1 + 200) = v7 & 0xFFFFFFFF00000000 | v6;
  return a1;
}

void WebCore::RenderVideo::~RenderVideo(WebCore::RenderVideo *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E34280E8;
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34280E8;
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 30) = 0;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
}

void WebCore::RenderVideo::willBeDestroyed(WebCore::RenderVideo *this)
{
  WebCore::HTMLMediaElement *v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(WebCore::HTMLMediaElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v1 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964751F8);
  }
  if (*(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475218);
  }
  WebCore::HTMLMediaElement::isVisibleInViewportChanged(v1);
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196475238);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475258);
  }
  v4 = *(_QWORD *)(v3 + 1136);
  if (v4)
  {
    v5 = *(unsigned __int8 **)v4;
    if (__ldaxr(*(unsigned __int8 **)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_12:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_17:
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 1240))(*(_QWORD *)(v4 + 72));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 28) + 24))(*((_QWORD *)this + 28));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        (*(void (**)(uint64_t, WebCore::RenderVideo *))(*(_QWORD *)v10 + 672))(v10, this);
    }
  }
  WebCore::RenderBox::willBeDestroyed(this, v8);
}

_QWORD *WebCore::RenderVideo::visibleInViewportStateChanged(WebCore::RenderVideo *this)
{
  WebCore::HTMLMediaElement *v1;

  v1 = *(WebCore::HTMLMediaElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v1 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964752ECLL);
  }
  return WebCore::HTMLMediaElement::isVisibleInViewportChanged(v1);
}

uint64_t WebCore::RenderVideo::videoElement(WebCore::RenderVideo *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19647538CLL);
  }
  return v1;
}

void WebCore::RenderVideo::intrinsicSizeChanged(WebCore::RenderVideo *this)
{
  WebCore::HTMLVideoElement *v1;
  uint64_t v3;

  v1 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v1 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475464);
  }
  if (WebCore::HTMLVideoElement::shouldDisplayPosterImage(v1))
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 28) + 72))(*((_QWORD *)this + 28));
    (*(void (**)(WebCore::RenderVideo *, uint64_t, _QWORD))(*(_QWORD *)this + 568))(this, v3, 0);
  }
  WebCore::RenderVideo::updateIntrinsicSize(this);
}

void WebCore::RenderVideo::updateIntrinsicSize(WebCore::RenderVideo *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int shouldApplyInlineSizeContainment;
  int v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  WebCore::RenderElement *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;

  if (WebCore::RenderElement::shouldApplySizeContainment(this))
  {
    v2 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
    LODWORD(v3) = v2;
    v4 = v2;
  }
  else
  {
    v3 = WebCore::RenderVideo::calculateIntrinsicSizeInternal(this);
    shouldApplyInlineSizeContainment = WebCore::RenderElement::shouldApplyInlineSizeContainment(this);
    v4 = v3;
    if (shouldApplyInlineSizeContainment)
    {
      v6 = *((_DWORD *)this + 5);
      v7 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
      v4 = (v6 & 0x1000) != 0 ? v7 : v3;
      if ((v6 & 0x1000) == 0)
        LODWORD(v3) = v7;
    }
  }
  v8 = HIDWORD(v4);
  v9 = *(float *)(*((_QWORD *)this + 13) + 184);
  v10 = (float)((float)((float)(int)v3 * 0.015625) * v9) * 64.0;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFFLL;
  v13 = (float)(v9 * (float)((float)(int)v8 * 0.015625)) * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFFLL;
    if ((int)v12 > 0)
      goto LABEL_19;
  }
  else
  {
    v14 = (int)fmax(v13, -2147483650.0);
    if ((int)v12 >= 1 && (int)v14 >= 1)
      goto LABEL_19;
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3358) & 0x10) != 0)
    return;
LABEL_19:
  v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v15 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    goto LABEL_61;
  }
  if (*(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475790);
  }
  if (*(int *)(v15 + 904) >= 1)
  {
    v16 = (int)v12 >= 0 ? v12 : (int)v12 + 63;
    v17 = (int)v14 >= 0 ? v14 : (int)v14 + 63;
    v18 = *((_WORD *)this + 38);
    if ((v18 & 8) == 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 1944)
                      + 248);
      v20 = *(_DWORD *)(v19 + 1160);
      if (v20 <= 0x400)
      {
        v25 = ((int)(v12 - (v16 & 0xFFFFFFC0) + 32) >> 6) + (v16 >> 6);
        v26 = ((int)(v14 - (v17 & 0xFFFFFFC0) + 32) >> 6) + (v17 >> 6);
        if (v25 < 0)
          v25 = -v25;
        if (v26 < 0)
          v26 = -v26;
        v27 = v26 * (unint64_t)v25;
        if ((v27 & 0xFFFFFFFF00000000) != 0)
          v28 = 0;
        else
          v28 = v27;
        v29 = __CFADD__(v28, v20);
        v30 = v28 + v20;
        if (v29)
          v30 = -1;
        if ((v27 & 0xFFFFFFFF00000000) != 0)
          v31 = -1;
        else
          v31 = v30;
        *(_DWORD *)(v19 + 1160) = v31;
        v18 = *((_WORD *)this + 38);
      }
      *((_WORD *)this + 38) = v18 | 8;
    }
  }
  if (__PAIR64__(v14, v12) != WebCore::RenderReplaced::intrinsicSize((unint64_t)this))
  {
    *((_QWORD *)this + 25) = v12 | (v14 << 32);
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
    v21 = *((_DWORD *)this + 5);
    if ((v21 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v21 | 8;
      v22 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v22);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964757C0);
        }
        v23 = *((_QWORD *)this + 18);
        if (v23)
        {
          v24 = *(_DWORD *)(v23 + 8) + 1;
          *(_DWORD *)(v23 + 8) = v24;
        }
        else
        {
          v24 = MEMORY[8];
        }
        *(_QWORD *)(v23 + 24) = *(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (v24)
        {
          *(_DWORD *)(v23 + 8) = v24 - 1;
          return;
        }
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x196475770);
      }
    }
  }
}

unint64_t WebCore::RenderVideo::calculateIntrinsicSizeInternal(WebCore::RenderVideo *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  double v8;
  float v9;
  int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    goto LABEL_43;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475A40);
  }
  v3 = *(_QWORD *)(v1 + 1136);
  if (!v3)
    goto LABEL_22;
  v4 = *(unsigned __int8 **)v3;
  if (__ldaxr(*(unsigned __int8 **)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_9:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_14:
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v7 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196475A60);
  }
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475A80);
  }
  if (*(int *)(v7 + 904) < 1)
    goto LABEL_22;
  v8 = (*(float (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 288))(*(_QWORD *)(v3 + 72)) * 64.0;
  if (v8 >= 2147483650.0)
  {
    v11 = v9 * 64.0;
    v10 = 0x7FFFFFFF;
    v12 = 0x7FFFFFFFLL;
    if (v11 >= 2147483650.0)
      goto LABEL_32;
    goto LABEL_20;
  }
  v10 = (int)fmax(v8, -2147483650.0);
  v11 = v9 * 64.0;
  if (v11 < 2147483650.0)
  {
LABEL_20:
    if (v10 >= 1)
    {
      v12 = (int)fmax(v11, -2147483650.0);
      if ((int)v12 >= 1)
        goto LABEL_32;
    }
    goto LABEL_22;
  }
  if (v10 > 0)
  {
    v12 = 0x7FFFFFFFLL;
    goto LABEL_32;
  }
LABEL_22:
  if (WebCore::RenderVideo::hasPosterFrameSize(this))
  {
    v10 = *((_DWORD *)this + 60);
    v12 = *((unsigned int *)this + 61);
    goto LABEL_31;
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v13 + 28) & 8) == 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 824))(v13) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196475AD4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x196475A20);
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8) + 3358) & 0x10) != 0)
    v12 = 64;
  else
    v12 = 9600;
  v10 = 19200;
LABEL_31:
  if (v3)
LABEL_32:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  return v10 | (unint64_t)(v12 << 32);
}

uint64_t WebCore::RenderVideo::hasPosterFrameSize(WebCore::RenderVideo *this)
{
  _BOOL4 v2;
  uint64_t v3;
  WebCore::HTMLVideoElement *v4;

  v2 = *((int *)this + 60) < 1 || *((_DWORD *)this + 61) < 1;
  if (WebCore::RenderElement::shouldApplyInlineSizeContainment(this))
  {
    v3 = 240;
    if ((*((_BYTE *)this + 21) & 0x10) == 0)
      v3 = 244;
    v2 = *(_DWORD *)((char *)this + v3) == 0;
  }
  v4 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v4 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475BF8);
  }
  if (((WebCore::HTMLVideoElement::shouldDisplayPosterImage(v4) ^ 1 | v2) & 1) != 0)
    return 0;
  else
    return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28)) ^ 1;
}

void WebCore::RenderVideo::imageChanged(WebCore::RenderVideo *this, WTF::StringImpl *a2, const WebCore::IntRect *a3, WTF::String *a4, __n128 a5)
{
  WebCore::HTMLVideoElement *v6;

  WebCore::RenderImage::imageChanged(this, a2, a3, a4, a5);
  v6 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v6 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475CB8);
  }
  if (WebCore::HTMLVideoElement::shouldDisplayPosterImage(v6))
    *((_QWORD *)this + 30) = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  WebCore::RenderVideo::updateIntrinsicSize(this);
}

unint64_t WebCore::RenderVideo::videoBox(WebCore::RenderVideo *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  WebCore::HTMLVideoElement *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v16;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    goto LABEL_27;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196475FECLL);
  }
  v3 = *(_QWORD *)(v1 + 1136);
  if (!v3)
    goto LABEL_16;
  v4 = *(unsigned __int8 **)v3;
  if (__ldaxr(*(unsigned __int8 **)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_9:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v4))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 1128))(*(_QWORD *)(v3 + 72)))
  {
    v7 = WebCore::RenderBox::contentBoxRect(this);
    v10 = ((int)v7 / 64 + ((int)(v7 - (v8 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v7) / 64 + ((int)(HIDWORD(v7) - (v9 & 0xFFFFFFC0) + 32) >> 6)) << 32);
LABEL_22:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
    return v10;
  }
LABEL_16:
  v16 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  v11 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_BYTE *)v11 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19647600CLL);
  }
  if (*(_QWORD *)(*((_QWORD *)v11 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x196475FCCLL);
  }
  if (WebCore::HTMLVideoElement::shouldDisplayPosterImage(v11))
    v16 = *((_QWORD *)this + 30);
  v12 = WebCore::RenderReplaced::replacedContentRect(this, (int32x2_t *)&v16);
  v10 = ((int)v12 / 64 + ((int)(v12 - (v13 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v12) / 64 + ((int)(HIDWORD(v12) - (v14 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  if (v3)
    goto LABEL_22;
  return v10;
}

uint64_t WebCore::RenderVideo::shouldDisplayVideo(WebCore::RenderVideo *this)
{
  WebCore::HTMLVideoElement *v1;

  v1 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v1 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964760B4);
  }
  return WebCore::HTMLVideoElement::shouldDisplayPosterImage(v1) ^ 1;
}

void WebCore::RenderVideo::paintReplaced(WebCore::RenderVideo *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  int v10;
  WebCore::HTMLVideoElement *v11;
  int shouldDisplayPosterImage;
  int v13;
  uint64_t v14;
  WebCore::Page *v15;
  int32x4_t v16;
  uint64_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  WebCore::Page *v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  _BYTE *v35;
  int v36;
  __int32 v37;
  int v38;
  __int32 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int32x4_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  unsigned __int8 *v52;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  WebCore::RenderView *v61;
  WebCore::RenderLayerCompositor *v62;
  uint64_t v63;
  unsigned __int8 **v64;
  unsigned __int8 *v65;
  int v67;
  int v68;
  WebCore::RenderLayerCompositor *v69;
  WebCore::RenderLayerCompositor *v70;
  WTF *v71;
  void *v72;
  float32x4_t v73;
  int32x4_t v74;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196476790);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964767B0);
  }
  v7 = *(unsigned __int8 ***)(v3 + 1136);
  if (!v7)
    goto LABEL_14;
  v8 = *v7;
  if (__ldaxr(*v7))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_9;
  }
  if (__stxr(1u, v8))
    goto LABEL_8;
LABEL_9:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_14:
  v11 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v11 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964767D0);
  }
  if (*(_QWORD *)(*((_QWORD *)v11 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964767F0);
  }
  shouldDisplayPosterImage = WebCore::HTMLVideoElement::shouldDisplayPosterImage(v11);
  v13 = shouldDisplayPosterImage;
  if (v7 || (shouldDisplayPosterImage & 1) != 0)
  {
    v16.i64[0] = WebCore::RenderVideo::videoBox(this);
    v16.i64[1] = v17;
    v18.i64[0] = 0xFE000000FE000000;
    v18.i64[1] = 0xFE000000FE000000;
    v19 = (int8x16_t)vcgtq_s32(v16, v18);
    v20.i64[0] = 0xFE000000FE000000;
    v20.i64[1] = 0xFE000000FE000000;
    v21.i64[0] = 0x8000000080000000;
    v21.i64[1] = 0x8000000080000000;
    v22 = vorrq_s8((int8x16_t)(*(_OWORD *)&v19 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v20, v16), v21, (int8x16_t)vshlq_n_s32(v16, 6uLL)), v19));
    v74 = (int32x4_t)v22;
    *(int32x2_t *)v19.i8 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
    if (((v19.i32[1] | v19.i32[0]) & 1) != 0)
    {
      if (*((_WORD *)a2 + 8) == 8)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                            + 8)
                                                + 528)
                                    + 8)
                        + 24);
        if (v23)
          v24 = *(WebCore::Page **)(v23 + 8);
        else
          v24 = 0;
        v45 = *((_QWORD *)this + 24);
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 20);
          v47 = (uint64_t *)(v45 + 28);
        }
        else
        {
          v46 = 0;
          v47 = (uint64_t *)((char *)this + 160);
        }
        v48 = *v47;
        v73.i64[0] = v46;
        v73.i64[1] = v48;
        WebCore::Page::addRelevantUnpaintedObject(v24, this, (const WebCore::LayoutRect *)&v73);
        if (!v7)
          return;
LABEL_110:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v7);
        return;
      }
      goto LABEL_109;
    }
    v25 = *((_DWORD *)a3 + 1);
    v26 = v22.i32[0] + *(_DWORD *)a3;
    if (__OFADD__(v22.i32[0], *(_DWORD *)a3))
      v26 = ((unsigned __int32)v22.i32[0] >> 31) + 0x7FFFFFFF;
    v27 = __OFADD__(v22.i32[1], v25);
    v28 = v22.i32[1] + v25;
    if (v27)
      v28 = ((unsigned __int32)v22.i32[1] >> 31) + 0x7FFFFFFF;
    v74.i64[0] = __PAIR64__(v28, v26);
    if (*((_WORD *)a2 + 8) == 8)
      WebCore::Page::addRelevantRepaintedObject(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), this, (const WebCore::LayoutRect *)&v74);
    v29 = WebCore::RenderBox::contentBoxRect(this);
    v31 = v30;
    v32 = *((_DWORD *)a3 + 1);
    v33 = v29 + *(_DWORD *)a3;
    if (__OFADD__((_DWORD)v29, *(_DWORD *)a3))
      v33 = (v29 >> 31) + 0x7FFFFFFF;
    v34 = HIDWORD(v29) + v32;
    if (__OFADD__(HIDWORD(v29), v32))
      v34 = (HIDWORD(v29) >> 31) + 0x7FFFFFFF;
    v35 = (_BYTE *)*((_QWORD *)a2 + 10);
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v35 + 72))(v35))
    {
      v35[716] |= 2u;
      if (!v7)
        return;
      goto LABEL_110;
    }
    if ((int)v33 > v74.i32[0])
      goto LABEL_64;
    v36 = v33 + v31;
    if (__OFADD__(v33, (_DWORD)v31))
      v36 = (v33 >> 31) + 0x7FFFFFFF;
    v37 = v74.i32[0] + v74.i32[2];
    if (__OFADD__(v74.i32[0], v74.i32[2]))
      v37 = ((unsigned __int32)v74.i32[0] >> 31) + 0x7FFFFFFF;
    if (v36 < v37 || v34 > v74.i32[1])
      goto LABEL_64;
    v38 = v34 + HIDWORD(v31);
    if (__OFADD__(v34, HIDWORD(v31)))
      v38 = (v34 >> 31) + 0x7FFFFFFF;
    v39 = v74.i32[1] + v74.i32[3];
    if (__OFADD__(v74.i32[1], v74.i32[3]))
      v39 = ((unsigned __int32)v74.i32[1] >> 31) + 0x7FFFFFFF;
    if (v38 < v39)
    {
LABEL_64:
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v35 + 96))(v35, 1);
      v49.i64[0] = __PAIR64__(v34, v33);
      v49.i64[1] = v31;
      v73 = vmulq_f32(vcvtq_f32_s32(v49), (float32x4_t)vdupq_n_s32(0x3C800000u));
      (*(void (**)(_BYTE *, float32x4_t *))(*(_QWORD *)v35 + 456))(v35, &v73);
      v40 = 0;
      if (v13)
        goto LABEL_54;
    }
    else
    {
      v40 = 1;
      if (v13)
      {
LABEL_54:
        v73 = vmulq_f32(vcvtq_f32_s32(v74), (float32x4_t)vdupq_n_s32(0x3C800000u));
        WebCore::RenderImage::paintIntoRect(this, (WebCore::GraphicsContext **)a2, (const WebCore::FloatRect *)&v73);
        goto LABEL_108;
      }
    }
    if (!v7)
      goto LABEL_108;
    v50 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v50 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v50 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196476810);
    }
    if (*(_QWORD *)(*(_QWORD *)(v50 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196476830);
    }
    v51 = *(unsigned __int8 ***)(v50 + 1136);
    if (!v51)
      goto LABEL_90;
    v52 = *v51;
    if (__ldaxr(*v51))
    {
      __clrex();
    }
    else if (!__stxr(1u, v52))
    {
      goto LABEL_74;
    }
    MEMORY[0x19AEA534C](v52);
LABEL_74:
    ++*((_QWORD *)v52 + 1);
    v54 = __ldxr(v52);
    if (v54 == 1)
    {
      if (!__stlxr(0, v52))
      {
LABEL_79:
        v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v50 + 1136) + 72) + 784))(*(_QWORD *)(*(_QWORD *)(v50 + 1136) + 72));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v51);
        if (v55)
        {
          v56 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if ((*(_WORD *)(v56 + 28) & 8) == 0
            || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v56 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196476850);
          }
          if (*(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x196476870);
          }
          v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 40) + 8) + 1992);
          if (v57)
          {
            v58 = *(_DWORD *)(v57 + 8);
            *(_DWORD *)(v57 + 8) = v58 + 1;
            v59 = *(_QWORD *)(v57 + 56);
            if (v59 && v59 == v56)
            {
              if (v58 != -1)
              {
                *(_DWORD *)(v57 + 8) = v58;
                goto LABEL_108;
              }
LABEL_124:
              __break(0xC471u);
              JUMPOUT(0x19647689CLL);
            }
            if (v58 == -1)
              goto LABEL_124;
            v60 = *(_DWORD *)(v56 + 1080);
            *(_DWORD *)(v57 + 8) = v58;
            if (v60)
              goto LABEL_108;
          }
          else if (*(_DWORD *)(v56 + 1080))
          {
            goto LABEL_108;
          }
        }
LABEL_90:
        v61 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                      + 1944);
        v62 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v61 + 50);
        if (!v62)
        {
          v69 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v62 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v69, v61);
          v70 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v61 + 50);
          *((_QWORD *)v61 + 50) = v62;
          if (v70)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v70);
            WTF::fastFree(v71, v72);
            v62 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v61 + 50);
          }
        }
        if (!*((_BYTE *)v62 + 132))
          goto LABEL_107;
        v63 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v63 + 28) & 8) == 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 824))(v63) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964768BCLL);
        }
        if (*(_QWORD *)(*(_QWORD *)(v63 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1964768DCLL);
        }
        v64 = *(unsigned __int8 ***)(v63 + 1136);
        if (!v64)
          goto LABEL_107;
        v65 = *v64;
        if (__ldaxr(*v64))
        {
          __clrex();
        }
        else if (!__stxr(1u, v65))
        {
          goto LABEL_100;
        }
        MEMORY[0x19AEA534C](v65);
LABEL_100:
        ++*((_QWORD *)v65 + 1);
        v67 = __ldxr(v65);
        if (v67 == 1)
        {
          if (!__stlxr(0, v65))
            goto LABEL_105;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v65);
LABEL_105:
        v68 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v63 + 1136) + 72) + 784))(*(_QWORD *)(*(_QWORD *)(v63 + 1136) + 72));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v64);
        if (!v68 || (*((_DWORD *)a2 + 5) & 0x10200) != 0)
        {
LABEL_107:
          v73 = vmulq_f32(vcvtq_f32_s32(v74), (float32x4_t)vdupq_n_s32(0x3C800000u));
          (*(void (**)(_BYTE *, unsigned __int8 **, float32x4_t *))(*(_QWORD *)v35 + 432))(v35, v7, &v73);
        }
LABEL_108:
        if ((v40 & 1) == 0)
        {
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v35 + 104))(v35, 1);
          if (!v7)
            return;
          goto LABEL_110;
        }
LABEL_109:
        if (!v7)
          return;
        goto LABEL_110;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v52);
    goto LABEL_79;
  }
  if (*((_WORD *)a2 + 8) == 8)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v14)
      v15 = *(WebCore::Page **)(v14 + 8);
    else
      v15 = 0;
    v41 = *((_QWORD *)this + 24);
    if (v41)
    {
      v42 = *(_QWORD *)(v41 + 20);
      v43 = (uint64_t *)(v41 + 28);
    }
    else
    {
      v42 = 0;
      v43 = (uint64_t *)((char *)this + 160);
    }
    v44 = *v43;
    v74.i64[0] = v42;
    v74.i64[1] = v44;
    WebCore::Page::addRelevantUnpaintedObject(v15, this, (const WebCore::LayoutRect *)&v74);
  }
}

uint64_t WebCore::RenderVideo::layout(WebCore::RenderVideo *this)
{
  WebCore::RenderVideo::updateIntrinsicSize(this);
  WebCore::RenderMedia::layout((uint64_t)this);
  return WebCore::RenderVideo::updatePlayer((uint64_t)this);
}

uint64_t WebCore::RenderVideo::updatePlayer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 3405))
    return this;
  v1 = this;
  WebCore::RenderVideo::updateIntrinsicSize((WebCore::RenderVideo *)this);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
  if ((*(_WORD *)(v2 + 28) & 8) == 0
    || (this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 824))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)),
        (this & 1) == 0))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x196476B74);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196476B94);
  }
  v3 = *(unsigned __int8 ***)(v2 + 1136);
  if (v3)
  {
    v4 = *v3;
    if (__ldaxr(*v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_11:
    ++*((_QWORD *)v4 + 1);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_16:
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
    if ((*(_WORD *)(v7 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 824))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196476BB4);
    }
    if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196476BD4);
    }
    if ((*(_DWORD *)(v7 + 1265) & 0x20) != 0 && (*(_BYTE *)(v1 + 21) & 0x80) != 0)
      WebCore::RenderLayer::contentChanged(*(_QWORD *)(v1 + 144), (const WebCore::RenderObject *)5);
    v8 = *(_QWORD **)(*(_QWORD *)(v1 + 24) + 8);
    if ((*((_WORD *)v8 + 14) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*v8 + 824))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196476BF4);
    }
    if (*(_QWORD *)(v8[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    {
      WebCore::RenderVideo::videoBox((WebCore::RenderVideo *)v1);
      WebCore::HTMLMediaElement::updateMediaPlayer((WebCore::HTMLMediaElement *)v8, v9, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 32) + 148) & 0x7000000) != 0);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
    }
    goto LABEL_31;
  }
  return this;
}

void WebCore::RenderVideo::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  int v8;

  WebCore::RenderMedia::styleDidChange(a1, a2, a3);
  if (!a3
    || ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148) ^ *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88)
                                                                                              + 32)
                                                                                  + 148)) & 0x7000000) != 0)
  {
    v5 = *(_DWORD *)(a1 + 20);
    if ((v5 & 8) == 0)
    {
      *(_DWORD *)(a1 + 20) = v5 | 8;
      v6 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a1, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a1, v6);
      if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(a1 + 45) & 0x10) == 0
          || ((v7 = *(_QWORD *)(a1 + 144)) == 0
            ? (v8 = MEMORY[8])
            : (v8 = *(_DWORD *)(v7 + 8) + 1, *(_DWORD *)(v7 + 8) = v8),
              *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
              !v8))
        {
          __break(0xC471u);
          JUMPOUT(0x196476CE8);
        }
        *(_DWORD *)(v7 + 8) = v8 - 1;
      }
    }
  }
}

uint64_t WebCore::RenderVideo::computeReplacedLogicalWidth(WebCore::RenderReplaced *a1, int a2)
{
  uint64_t v4;

  v4 = WebCore::RenderReplaced::computeReplacedLogicalWidth(a1, a2);
  return WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)a1, v4, a2);
}

uint64_t WebCore::RenderVideo::minimumReplacedHeight(WebCore::RenderVideo *this)
{
  return 0;
}

uint64_t WebCore::RenderVideo::supportsAcceleratedRendering(WebCore::RenderVideo *this)
{
  uint64_t v1;
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196476E58);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196476E78);
  }
  v2 = *(unsigned __int8 ***)(v1 + 1136);
  if (v2)
  {
    v3 = *v2;
    if (__ldaxr(*v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_9:
    ++*((_QWORD *)v3 + 1);
    v5 = __ldxr(v3);
    if (v5 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_14:
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 1136) + 72) + 784))(*(_QWORD *)(*(_QWORD *)(v1 + 1136) + 72));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v2);
    return v6;
  }
  return 0;
}

unsigned __int8 *WebCore::RenderVideo::acceleratedRenderingStateChanged(WebCore::RenderVideo *this)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v1 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196476F00);
  }
  return WebCore::HTMLVideoElement::computeAcceleratedRenderingStateAndUpdateMediaPlayer(v1);
}

uint64_t WebCore::RenderVideo::requiresImmediateCompositing(WebCore::RenderVideo *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19647701CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19647703CLL);
  }
  v2 = *(_QWORD *)(v1 + 1136);
  if (v2)
  {
    v3 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_9:
    ++*((_QWORD *)v3 + 1);
    v5 = __ldxr(v3);
    if (v5 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_14:
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 272))(*(_QWORD *)(v2 + 72));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
    return v6;
  }
  return 0;
}

uint64_t WebCore::RenderVideo::foregroundIsKnownToBeOpaqueInRect(WebCore::RenderVideo *this, const WebCore::LayoutRect *a2)
{
  WebCore::HTMLVideoElement *v2;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  uint64_t v26;

  v2 = *(WebCore::HTMLVideoElement **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v2 + 14) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    goto LABEL_48;
  }
  if (*(_QWORD *)(*((_QWORD *)v2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964772B4);
  }
  if (WebCore::HTMLVideoElement::shouldDisplayPosterImage(v2))
    return WebCore::RenderImage::foregroundIsKnownToBeOpaqueInRect(this, a2);
  v6 = WebCore::RenderVideo::videoBox(this);
  v9 = HIDWORD(*(_QWORD *)a2);
  v10 = *((_DWORD *)a2 + 2);
  v11 = *((_DWORD *)a2 + 3);
  v12 = (*(_QWORD *)a2 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_QWORD *)a2, v10))
    v12 = *(_QWORD *)a2 + v10;
  v13 = -(-v12 >> 6);
  if (v12 >= 0)
    v13 = (v12 + 63) >> 6;
  if (v12 <= 2147483583)
    v14 = v13;
  else
    v14 = 0x1FFFFFF;
  if (v10)
    v15 = v14;
  else
    v15 = (int)*(_QWORD *)a2 >> 6;
  v16 = __OFADD__((_DWORD)v9, v11);
  v17 = v9 + v11;
  v18 = (v9 >> 31) + 0x7FFFFFFF;
  if (v16)
    v17 = v18;
  v19 = -(-v17 >> 6);
  if (v17 >= 0)
    v19 = (v17 + 63) >> 6;
  if (v17 <= 2147483583)
    v20 = v19;
  else
    v20 = 0x1FFFFFF;
  if (!v11)
    v20 = *(uint64_t *)a2 >> 38;
  if ((int)*(_QWORD *)a2 >> 6 < (int)v6
    || v7 + (int)v6 < v15
    || *(uint64_t *)a2 >> 38 < SHIDWORD(v6)
    || v8 + HIDWORD(v6) < v20)
  {
    return 0;
  }
  v21 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v21 + 28) & 8) == 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 824))(v21) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964772D4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x196477294);
  }
  v22 = *(_QWORD *)(v21 + 1136);
  if (!v22)
    return 0;
  v23 = *(unsigned __int8 **)v22;
  if (__ldaxr(*(unsigned __int8 **)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](v23);
LABEL_39:
  ++*((_QWORD *)v23 + 1);
  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_44;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_44:
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 72) + 712))(*(_QWORD *)(v22 + 72));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v22);
  return v26;
}

uint64_t WebCore::RenderVideo::hasDefaultObjectSize(WebCore::RenderVideo *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    goto LABEL_15;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196477418);
  }
  if (!*(_QWORD *)(v1 + 1136))
    goto LABEL_9;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 824))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196477438);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1964773F8);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 1136) + 72) + 560))(*(_QWORD *)(*(_QWORD *)(v3 + 1136) + 72)))
    return 0;
LABEL_9:
  if ((WebCore::RenderVideo::hasPosterFrameSize(this) & 1) != 0)
    return 0;
  return WebCore::RenderElement::shouldApplySizeContainment(this) ^ 1;
}

uint64_t WebCore::RenderView::availableLogicalHeight(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(a1 + 224);
  if (v1
    && (v7 = *(_QWORD *)(v1 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v9 = *(unsigned int *)(v8 + 47) | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) != 0
    && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    v11 = v10;
    while (*(_BYTE *)(v11 + 46) != 26)
    {
      v12 = *(unsigned int *)(v11 + 47) | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32);
      if (v12)
      {
        v11 = *(_QWORD *)(v12 + 8);
        if (v11)
          continue;
      }
      goto LABEL_2;
    }
    while (*(_BYTE *)(v10 + 46) != 26)
      v10 = *(_QWORD *)((*(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
    return *(unsigned int *)(v10 + 292);
  }
  else
  {
LABEL_2:
    v2 = *(_QWORD *)(a1 + 248);
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3358) & 8) != 0
      && *(_BYTE *)(v2 + 321))
    {
      LODWORD(v2) = *(_DWORD *)(v2 + 252);
    }
    else
    {
      v3 = *(_DWORD *)(a1 + 20);
      if (*(int *)(v2 + 248) >= 1 && *(int *)(v2 + 252) >= 1 && *(_BYTE *)(v2 + 321))
        v4 = *(_QWORD *)(v2 + 248);
      else
        v4 = WebCore::ScrollView::sizeForUnobscuredContent(*(id **)(a1 + 248), 0);
      v2 = HIDWORD(v4);
      if ((v3 & 0x1000) != 0)
        LODWORD(v2) = v4;
    }
    v5 = (_DWORD)v2 << 6;
    if ((int)v2 < -33554432)
      v5 = 0x80000000;
    if ((int)v2 <= 0x1FFFFFF)
      return v5;
    else
      return 0x7FFFFFFFLL;
  }
}

uint64_t WebCore::RenderView::viewWidth(WebCore::RenderView *this)
{
  int v2;
  float v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382)
    && WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328)))
  {
    return 0;
  }
  v2 = WebCore::ScrollView::layoutSize(*((WebCore::ScrollView **)this + 31));
  if (*(_BYTE *)(*((_QWORD *)this + 31) + 321))
    v3 = ceilf(*(float *)(*((_QWORD *)this + 13) + 184) * (float)v2);
  else
    v3 = (float)v2;
  return (int)v3;
}

uint64_t WebCore::RenderView::viewHeight(WebCore::RenderView *this)
{
  unint64_t v2;
  float v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382)
    && WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328)))
  {
    return 0;
  }
  v2 = WebCore::ScrollView::layoutSize(*((WebCore::ScrollView **)this + 31)) >> 32;
  if (*(_BYTE *)(*((_QWORD *)this + 31) + 321))
    v3 = ceilf(*(float *)(*((_QWORD *)this + 13) + 184) * (float)(int)v2);
  else
    v3 = (float)(int)v2;
  return (int)v3;
}

uint64_t WebCore::RenderView::clientLogicalWidthForFixedPosition(WebCore::RenderView *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  int v15;
  double v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;

  v2 = *((_QWORD *)this + 31);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 328) + 136);
  if ((*(_QWORD *)(v3 + 680) & 0x10) != 0)
  {
    v7 = *((_DWORD *)this + 5);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 64) + 488))(v2 + 64);
    v9 = HIDWORD(v8);
    if ((v7 & 0x1000) == 0)
      LODWORD(v9) = v8;
    v10 = (float)(int)v9;
    v11 = *(_QWORD *)(*((_QWORD *)this + 31) + 328);
    v12 = *(_QWORD *)(v11 + 24);
    v13 = 1.0;
    if (v12)
    {
      v14 = *(_QWORD *)(v12 + 8);
      if (v14)
      {
        v15 = (*(_DWORD *)v14)++;
        if (*(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) == v11 && !*(_BYTE *)(v14 + 1098))
          v13 = *(float *)(v14 + 356);
        if (v15)
        {
          *(_DWORD *)v14 = v15;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)v14);
          WTF::fastFree(v20, v21);
        }
      }
    }
    v16 = (float)(v10 / v13) * 64.0;
    if (v16 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v16;
    }
  }
  else if ((*(_QWORD *)(v3 + 704) & 0x1000) != 0 || !*(_BYTE *)(v2 + 1176))
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 704) & 0x1000) != 0)
    {
      v17 = *((_DWORD *)this + 5);
      WebCore::LocalFrameView::layoutViewportRect((WebCore::LocalFrameView *)v2);
      if ((v17 & 0x1000) != 0)
        return v19;
      else
        return v18;
    }
    else if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      return WebCore::RenderBox::clientHeight(this);
    }
    else
    {
      return WebCore::RenderBox::clientWidth(this);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v2 + 1192);
    if ((*((_BYTE *)this + 21) & 0x10) == 0)
      v4 = *(_DWORD *)(v2 + 1188);
    v5 = v4 << 6;
    if (v4 < -33554432)
      v5 = 0x80000000;
    if (v4 <= 0x1FFFFFF)
      return v5;
    else
      return 0x7FFFFFFFLL;
  }
}

uint64_t WebCore::RenderView::clientLogicalHeightForFixedPosition(WebCore::RenderView *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  int v15;
  double v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;

  v2 = *((_QWORD *)this + 31);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 328) + 136);
  if ((*(_QWORD *)(v3 + 680) & 0x10) != 0)
  {
    v7 = *((_DWORD *)this + 5);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 64) + 488))(v2 + 64);
    v9 = HIDWORD(v8);
    if ((v7 & 0x1000) != 0)
      LODWORD(v9) = v8;
    v10 = (float)(int)v9;
    v11 = *(_QWORD *)(*((_QWORD *)this + 31) + 328);
    v12 = *(_QWORD *)(v11 + 24);
    v13 = 1.0;
    if (v12)
    {
      v14 = *(_QWORD *)(v12 + 8);
      if (v14)
      {
        v15 = (*(_DWORD *)v14)++;
        if (*(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) == v11 && !*(_BYTE *)(v14 + 1098))
          v13 = *(float *)(v14 + 356);
        if (v15)
        {
          *(_DWORD *)v14 = v15;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)v14);
          WTF::fastFree(v20, v21);
        }
      }
    }
    v16 = (float)(v10 / v13) * 64.0;
    if (v16 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v16;
    }
  }
  else if ((*(_QWORD *)(v3 + 704) & 0x1000) != 0 || !*(_BYTE *)(v2 + 1176))
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 704) & 0x1000) != 0)
    {
      v17 = *((_DWORD *)this + 5);
      WebCore::LocalFrameView::layoutViewportRect((WebCore::LocalFrameView *)v2);
      if ((v17 & 0x1000) != 0)
        return v18;
      else
        return v19;
    }
    else if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      return WebCore::RenderBox::clientWidth(this);
    }
    else
    {
      return WebCore::RenderBox::clientHeight(this);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v2 + 1188);
    if ((*((_BYTE *)this + 21) & 0x10) == 0)
      v4 = *(_DWORD *)(v2 + 1192);
    v5 = v4 << 6;
    if (v4 < -33554432)
      v5 = 0x80000000;
    if (v4 <= 0x1FFFFFF)
      return v5;
    else
      return 0x7FFFFFFFLL;
  }
}

uint64_t WebCore::RenderView::viewRect(WebCore::RenderView *this)
{
  WebCore::RenderView *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL4 shouldUsePrintingLayout;

  v1 = this;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
  {
    shouldUsePrintingLayout = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328));
    v1 = this;
    if (shouldUsePrintingLayout)
      return 0;
  }
  v2 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*((_QWORD *)v1 + 31) + 64) + 832))(*((_QWORD *)v1 + 31) + 64, 0, 1);
  if ((int)v2 >= -33554432)
    v3 = ((_DWORD)v2 << 6);
  else
    v3 = 0x80000000;
  if (SHIDWORD(v2) >= -33554432)
    v4 = HIDWORD(v2) << 38;
  else
    v4 = 0x8000000000000000;
  if (SHIDWORD(v2) <= 0x1FFFFFF)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF00000000;
  if ((int)v2 > 0x1FFFFFF)
    v3 = 0x7FFFFFFFLL;
  return v5 | v3;
}

void WebCore::RenderView::repaintViewAndCompositedLayers(WebCore::RenderView *this)
{
  uint64_t v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v4;
  WTF *v5;
  void *v6;

  WebCore::RenderView::repaintRootContents(this);
  v2 = *((_QWORD *)this + 50);
  if (!v2)
  {
    v3 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v2 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v3, this);
    v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v2;
    if (v4)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v4);
      WTF::fastFree(v5, v6);
      v2 = *((_QWORD *)this + 50);
    }
  }
  if (*(_BYTE *)(v2 + 195))
    WebCore::RenderLayerCompositor::recursiveRepaintLayer((WebCore::RenderLayerCompositor *)v2, *(WebCore::RenderLayer **)(*(_QWORD *)(v2 + 8) + 144));
}

BOOL WebCore::RenderView::isScrollableOrRubberbandableBox(WebCore::RenderView *this)
{
  return WebCore::LocalFrameView::isScrollable(*((_QWORD *)this + 31));
}

uint64_t WebCore::RenderView::boundingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(result + 144);
  v6 = *(_DWORD *)(v4 + 164);
  v5 = *(_DWORD *)(v4 + 168);
  LODWORD(v7) = v6 << 6;
  if (v6 < -33554432)
    LODWORD(v7) = 0x80000000;
  if (v6 <= 0x1FFFFFF)
    v7 = v7;
  else
    v7 = 0x7FFFFFFFLL;
  if (v5 >= -33554432)
    v8 = v5 << 6;
  else
    v8 = 0x80000000;
  if (v5 <= 0x1FFFFFF)
    v9 = v8;
  else
    v9 = 0x7FFFFFFFLL;
  *(_QWORD *)&v13 = *a3;
  *((_QWORD *)&v13 + 1) = v7 | (v9 << 32);
  v10 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
  {
    result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v10 + 1, (unint64_t)&v13);
    v10 = *(unsigned int *)(a2 + 12);
    v11 = *(_QWORD *)a2;
    v12 = *(_OWORD *)result;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = v13;
  }
  *(_OWORD *)(v11 + 16 * v10) = v12;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

uint64_t WebCore::RenderView::absoluteQuads(uint64_t result, uint64_t a2, _BYTE *a3)
{
  float32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x2_t v6[2];

  if (a3)
    *a3 = 0;
  v3 = vcvt_f32_s32(*(int32x2_t *)(*(_QWORD *)(result + 144) + 164));
  v6[0] = 0;
  v6[1] = v3;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(a2 + 8))
    return WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect>(a2, v6);
  v5 = *(_QWORD *)a2 + 32 * v4;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = v3.i32[0];
  *(_DWORD *)(v5 + 12) = 0;
  *(float32x2_t *)(v5 + 16) = v3;
  *(_DWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 28) = v3.i32[1];
  ++*(_DWORD *)(a2 + 12);
  return result;
}

double WebCore::RenderView::unextendedBackgroundRect(WebCore::RenderView *this)
{
  unint64_t v1;
  uint64x2_t v2;
  uint64_t v3;
  int64x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x2_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x2_t v12;
  double result;

  v1 = WebCore::RenderView::unscaledDocumentRect(this);
  v2.i64[0] = v1;
  v2.i64[1] = v3;
  v4 = (int64x2_t)vshrq_n_u64(v2, 0x20uLL);
  v5 = vshrn_n_s64((int64x2_t)v2, 0x20uLL);
  v6 = vcgt_s32((int32x2_t)__PAIR64__(v3, v1), (int32x2_t)0xFE000000FE000000);
  v7.i64[0] = v6.i32[0];
  v7.i64[1] = v6.i32[1];
  v8 = v7;
  v9 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v3, v1));
  v7.i64[0] = v9.i32[0];
  v7.i64[1] = v9.i32[1];
  v10 = vorrq_s8(vandq_s8(v7, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v2, 6uLL), v7), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
  *(int32x2_t *)v2.i8 = vcgt_s32(v5, (int32x2_t)0xFE000000FE000000);
  v7.i64[0] = v2.i32[0];
  v7.i64[1] = v2.i32[1];
  v11 = v7;
  v12 = vcgt_s32((int32x2_t)0xFE000000FE000000, v5);
  v7.i64[0] = v12.i32[0];
  v7.i64[1] = v12.i32[1];
  *(_QWORD *)&result = vorrq_s8(vbslq_s8(v11, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v7, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v4, 0x26uLL))), vbslq_s8(v8, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v10)).u64[0];
  return result;
}

float WebCore::RenderView::sizeForCSSSmallViewportUnits(WebCore::RenderView *this)
{
  uint64_t v1;
  __int128 v3;
  int v4;

  v1 = *((_QWORD *)this + 31);
  v3 = *(_OWORD *)(v1 + 1228);
  v4 = *(_DWORD *)(v1 + 1244);
  return WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(v1, (uint64_t)&v3);
}

float WebCore::RenderView::sizeForCSSLargeViewportUnits(WebCore::RenderView *this)
{
  uint64_t v1;
  __int128 v3;
  int v4;

  v1 = *((_QWORD *)this + 31);
  v3 = *(_OWORD *)(v1 + 1248);
  v4 = *(_DWORD *)(v1 + 1264);
  return WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(v1, (uint64_t)&v3);
}

float WebCore::RenderView::sizeForCSSDynamicViewportUnits(WebCore::RenderView *this)
{
  uint64_t v1;
  int v3;
  int v4;

  v1 = *((_QWORD *)this + 31);
  if (*(_BYTE *)(v1 + 1104))
    return (float)*(int *)(v1 + 1096) * 0.015625;
  if (*(_BYTE *)(v1 + 321))
    return (float)*(int *)(v1 + 248);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 328) + 136) + 704) & 0x1000) != 0)
  {
    WebCore::ScrollView::unobscuredContentRect(v1, 1);
    return (float)v4;
  }
  else
  {
    WebCore::LocalFrameView::viewportConstrainedVisibleContentRect((WebCore::LocalFrameView *)v1);
    return (float)v3 * 0.015625;
  }
}

uint64_t WebCore::RenderView::nodeForHitTest(WebCore::RenderView *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
}

unsigned int *WebCore::RenderView::updateHitTestResult(unsigned int *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (!*((_QWORD *)a2 + 9))
  {
    v5 = (uint64_t)this;
    v6 = *((_QWORD *)this + 28);
    if (v6
      && (v15 = *(_QWORD *)(v6 + 24)) != 0
      && (this = *(unsigned int **)(v15 + 8)) != 0
      && (this = (unsigned int *)WebCore::RenderMultiColumnFlow::firstMultiColumnSet((WebCore::RenderMultiColumnFlow *)this)) != 0)
    {
      return WebCore::RenderMultiColumnSet::updateHitTestResult(this, a2, a3);
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 1272);
      if (v7)
      {
        *(_DWORD *)(v7 + 24) += 2;
        v8 = v7;
        if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) != 0
          || (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7), v8 = v7, !v9)
          || (v8 = *(_QWORD *)(v7 + 112)) != 0 && (v8 = *(_QWORD *)(v8 + 8)) != 0)
        {
          *(_DWORD *)(v8 + 24) += 2;
        }
        v10 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a2 + 9) = v8;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        if (!*((_QWORD *)a2 + 10))
        {
          v11 = v7;
          if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) != 0
            || (v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7), v11 = v7, !v12)
            || (v11 = *(_QWORD *)(v7 + 112)) != 0 && (v11 = *(_QWORD *)(v11 + 8)) != 0)
          {
            *(_DWORD *)(v11 + 24) += 2;
          }
          v13 = *((_QWORD *)a2 + 10);
          *((_QWORD *)a2 + 10) = v11;
          if (v13)
          {
            if (*(_DWORD *)(v13 + 24) == 2)
            {
              if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
            }
            else
            {
              *(_DWORD *)(v13 + 24) -= 2;
            }
          }
        }
        v16 = *(_QWORD *)a3;
        this = (unsigned int *)WebCore::RenderBlock::offsetForContents(v5, (WebCore::LayoutPoint *)&v16);
        *((_QWORD *)a2 + 12) = v16;
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v7, v14);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderView::setBestTruncatedAt(uint64_t this, int a2, WebCore::RenderBoxModelObject *a3, int a4)
{
  uint64_t v5;
  signed int v6;
  int v7;
  signed int v8;

  if (!*(_BYTE *)(this + 372))
  {
    v5 = this;
    if (a4)
    {
      *(_BYTE *)(this + 372) = 1;
LABEL_12:
      *(_DWORD *)(v5 + 344) = a2;
      return this;
    }
    this = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)a3 + 912))(a3);
    v7 = *(_DWORD *)(v5 + 352);
    v8 = v7 << 6;
    if (v7 < -33554432)
      v8 = 0x80000000;
    if (v7 <= 0x1FFFFFF && v8 < v6)
    {
      *(_DWORD *)(v5 + 352) = v6 / 64;
      goto LABEL_12;
    }
  }
  return this;
}

uint64_t WebCore::RenderView::unregisterForVisibleInViewportCallback(WebCore::RenderView *this, WebCore::RenderElement *a2)
{
  return WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)this + 480, a2);
}

uint64_t WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  v6 = (WTF *)a2[1];
  if (!v6)
    return 0;
  if (!*((_QWORD *)v6 + 1))
    return 0;
  v7 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  for (i = 1; ; v12 = (v12 + i++) & v8)
  {
    v14 = v7 + 24 * v12;
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
    {
      if (!v15)
      {
        v16 = *(_DWORD *)(v7 - 4);
        v14 = v7 + 24 * v16;
        goto LABEL_13;
      }
      if (v15 == v6)
        break;
    }
  }
  v16 = *(_DWORD *)(v7 - 4);
LABEL_13:
  if (v7 + 24 * v16 == v14)
    return 0;
  v17 = *(WTF **)v14;
  *(_QWORD *)v14 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, a2);
    else
      --*(_DWORD *)v17;
  }
  *(_QWORD *)v14 = -1;
  v18 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v18)
  {
    v19 = *(unsigned int ***)(v14 + 8);
    v20 = &v19[v18];
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, a2);
        }
      }
      ++v19;
    }
    while (v19 != v20);
  }
  v25 = *(WTF **)(v14 + 8);
  if (v25)
  {
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    WTF::fastFree(v25, a2);
  }
  ++*(_DWORD *)(*(_QWORD *)a1 - 16);
  v26 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v27 = *(_DWORD *)(v26 - 12) - 1;
  else
    v27 = -1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v29 = 6 * *(_DWORD *)(v28 - 12);
    v30 = *(_DWORD *)(v28 - 4);
    if (v29 < v30 && v30 >= 9)
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v30 >> 1, 0);
  }
  return 1;
}

unsigned int *WebCore::RenderView::removeRendererWithPausedImageAnimations(WebCore::RenderView *this, WebCore::RenderElement *a2, WebCore::CachedImage *a3)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *j;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;

  result = (unsigned int *)((char *)this + 448);
  v5 = *((_QWORD *)a2 + 1);
  ++*((_DWORD *)this + 114);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = *(uint64_t **)result;
    if (*(_QWORD *)result)
    {
      v7 = *((_DWORD *)v6 - 2);
      v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      for (i = 1; ; ++i)
      {
        v13 = &v6[3 * v11];
        v14 = *v13;
        if (*v13 != -1)
        {
          if (!v14)
          {
            v15 = *((_DWORD *)v6 - 1);
            v13 = &v6[3 * v15];
            v16 = v13;
            goto LABEL_14;
          }
          if (v14 == v5)
            break;
        }
        v11 = (v11 + i) & v7;
      }
      v15 = *((_DWORD *)v6 - 1);
      v16 = &v6[3 * v15];
LABEL_14:
      v17 = &v6[3 * v15];
      if (v13 != v17 && !*(_QWORD *)(*v13 + 8))
      {
        while (1)
        {
          v26 = v13 + 3;
          v13 = v16;
          if (v26 != v16)
          {
            v13 = v26;
            while ((unint64_t)(*v13 + 1) <= 1)
            {
              v13 += 3;
              if (v13 == v16)
              {
                v13 = v16;
                break;
              }
            }
          }
          if (v13 == v17)
            break;
          if (*(_QWORD *)(*v13 + 8))
            goto LABEL_15;
        }
        v13 = v17;
      }
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = *(uint64_t **)result;
    if (*(_QWORD *)result)
      v13 += 3 * *((unsigned int *)v13 - 1);
  }
LABEL_15:
  v18 = *((unsigned int *)v13 + 5);
  if ((_DWORD)v18)
  {
    v19 = v13[1];
    v20 = *((unsigned int *)v13 + 5);
    while (!*(_QWORD *)v19 || *(WebCore::CachedImage **)(*(_QWORD *)v19 + 8) != a3)
    {
      v19 += 8;
      if (!--v20)
        return result;
    }
    if ((_DWORD)v18 == 1)
    {
      *(_WORD *)((char *)a2 + 69) &= ~4u;
      return (unsigned int *)WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::remove((uint64_t)result, a2);
    }
    else
    {
      for (j = (_QWORD *)(v13[1] + 8); ; ++j)
      {
        result = (unsigned int *)*(j - 1);
        if (result)
        {
          if (*((WebCore::CachedImage **)result + 1) == a3)
            break;
        }
        if (!--v18)
          return result;
      }
      *(j - 1) = 0;
      do
      {
        v22 = __ldaxr(result);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, result));
      if (!v23)
      {
        atomic_store(1u, result);
        v27 = j;
        v28 = v13;
        result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        j = v27;
        v13 = v28;
      }
      v24 = *((unsigned int *)v13 + 5);
      v25 = v13[1] + 8 * v24;
      while (j != (_QWORD *)v25)
      {
        *(j - 1) = *j;
        *j++ = 0;
      }
      *((_DWORD *)v13 + 5) = v24 - 1;
    }
  }
  return result;
}

uint64_t std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~pair(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  return a1;
}

WTF *WebCore::RenderView::updatePlayStateForAllAnimations(WebCore::IntRect const&)::$_0::operator()(WTF *result, uint64_t a2)
{
  WTF *v3;
  WebCore::RenderView *v4;
  __int16 v5;
  WTF *v6;
  void *v7;
  BOOL v8;
  __int16 v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13[2];

  if (!a2)
    return result;
  v3 = result;
  v4 = (WebCore::RenderView *)*((_QWORD *)result + 2);
  v5 = *(_WORD *)(*(_QWORD *)result + 69);
  if ((*(_WORD *)(a2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(a2 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v13);
    result = v13[0];
    if (v13[0])
    {
      v6 = (WTF *)*((_QWORD *)v13[0] + 1);
      v13[0] = 0;
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WTF *)WTF::fastFree(result, v10);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = *(WTF **)(a2 + 688);
    if (v6)
      goto LABEL_4;
    {
      v6 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      result = (WTF *)WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v13);
      v6 = v13[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v13[0];
    }
  }
  if (!v6)
    return result;
LABEL_4:
  result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v6 + 56))(v6);
  if ((_DWORD)result)
  {
    if (**((_BYTE **)v3 + 1))
      v8 = (v5 & 4) == 0;
    else
      v8 = 1;
    if (!v8)
    {
      WebCore::SVGImage::resumeAnimation(v6);
      return (WTF *)WebCore::RenderView::removeRendererWithPausedImageAnimations(v4, *(WebCore::RenderElement **)v3, (WebCore::CachedImage *)a2);
    }
    if ((v5 & 4) == 0)
    {
      WebCore::SVGImage::stopAnimation((unsigned int *)v6, v7);
      return WebCore::RenderView::addRendererWithPausedImageAnimations(v4, *(WebCore::RenderElement **)v3, (WebCore::CachedImage *)a2);
    }
  }
  else
  {
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v6 + 112))(v6);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(*(_QWORD *)v3 + 45) & 1) != 0)
        goto LABEL_19;
      result = *(WTF **)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8);
      if (!result)
        goto LABEL_19;
      v9 = *((_WORD *)result + 14);
      if ((v9 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964787B8);
      }
      if ((v9 & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)result + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        result = WebCore::HTMLImageElement::setAllowsAnimation(result, 0);
      }
      else
      {
LABEL_19:
        *((_WORD *)v6 + 24) = 0;
      }
      if (**((_BYTE **)v3 + 1) && (v5 & 4) != 0)
      {
        **((_BYTE **)v3 + 3) = 1;
        return (WTF *)WebCore::RenderView::removeRendererWithPausedImageAnimations(v4, *(WebCore::RenderElement **)v3, (WebCore::CachedImage *)a2);
      }
      if ((v5 & 4) == 0)
      {
        **((_BYTE **)v3 + 3) = 1;
        return WebCore::RenderView::addRendererWithPausedImageAnimations(v4, *(WebCore::RenderElement **)v3, (WebCore::CachedImage *)a2);
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGSVGElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v35;
  uint64_t v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_2;
  v28 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_27;
  v30 = *(unsigned int *)(v28 - 4);
  if (!(_DWORD)v30)
    goto LABEL_43;
  v31 = 0;
  v32 = v30 - 1;
  do
  {
    v33 = (uint64_t *)(v28 + 8 * v32);
    if ((unint64_t)(*v33 + 1) >= 2 && !*(_QWORD *)(*v33 + 8))
    {
      v43 = v32;
      v45 = v28;
      v42 = v31;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v33, a2);
      v32 = v43;
      v28 = v45;
      v31 = v42 + 1;
    }
  }
  while ((unint64_t)v32--);
  v28 = *(_QWORD *)a1;
  if (v31)
  {
    v39 = v31;
    *(_DWORD *)(v28 - 16) += v31;
    v40 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    *(_DWORD *)(v40 - 12) = v41 - v39;
    v28 = *(_QWORD *)a1;
  }
  if (v28)
  {
    v35 = *(_DWORD *)(v28 - 4);
    if (v35 >= 9 && 6 * *(_DWORD *)(v28 - 12) < v35)
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      v28 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v28)
        goto LABEL_28;
LABEL_44:
      LODWORD(v28) = *(_DWORD *)(v28 - 12);
      v29 = 0x7FFFFFFF;
      if (v28 >= 0x7FFFFFFF)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_43:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_44;
  }
LABEL_27:
  LODWORD(v28) = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
  v29 = v28;
LABEL_29:
  *(_DWORD *)(a1 + 12) = 2 * v29;
LABEL_2:
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 8) = a2;
    *(_BYTE *)(v20 + 32) = 0;
    v22 = a2[2];
    a2[2] = v22 & 0xFFFF000000000000 | v20;
    v23 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v22 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v23));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)v23);
        v26 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v26)
        {
          v46 = v23;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v26));
          v23 = v46;
        }
        v27 = *(WTF **)(v23 + 16);
        if (v27)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          v44 = v23;
          WTF::fastFree(v27, v21);
          v23 = v44;
        }
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  v8 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v47 = (WTF *)v8;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v47, a3);
  v13 = v47;
  v47 = 0;
  if (v13)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v13));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *((unsigned int *)v13 + 7);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v18));
      v19 = (WTF *)*((_QWORD *)v13 + 2);
      if (v19)
      {
        *((_QWORD *)v13 + 2) = 0;
        *((_DWORD *)v13 + 6) = 0;
        WTF::fastFree(v19, v12);
      }
      result = WTF::fastFree(v13, v12);
    }
  }
  if (v8)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v8));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v8);
      v37 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v37)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v37));
      v38 = *(WTF **)(v8 + 16);
      if (v38)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v38, v12);
      }
      return WTF::fastFree((WTF *)v8, v12);
    }
  }
  return result;
}

void WebCore::RenderView::RepaintRegionAccumulator::~RepaintRegionAccumulator(WTF **this, void *a2)
{
  int v3;
  WTF *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  WTF *v14;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _OWORD *v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
    goto LABEL_27;
  if (!v4)
  {
    *this = 0;
    return;
  }
  v5 = *((_QWORD *)v4 + 1);
  if (v5)
  {
    v6 = *(__int128 **)(v5 + 280);
    v39 = (WTF *)&v41;
    v40 = 1;
    v7 = *((_QWORD *)v6 + 2);
    if (v7)
    {
      v18 = *(unsigned int *)(v7 + 156);
      if (v18 < 2)
      {
LABEL_7:
        v8 = *(WTF **)(v5 + 280);
        *(_QWORD *)(v5 + 280) = 0;
        if (v8)
        {
          v9 = *((_QWORD *)v8 + 2);
          *((_QWORD *)v8 + 2) = 0;
          if (v9)
          {
            v10 = *(WTF **)(v9 + 144);
            if ((WTF *)(v9 + 160) != v10 && v10 != 0)
            {
              *(_QWORD *)(v9 + 144) = 0;
              *(_DWORD *)(v9 + 152) = 0;
              WTF::fastFree(v10, a2);
            }
            v12 = *(WTF **)v9;
            if (v9 + 16 != *(_QWORD *)v9 && v12 != 0)
            {
              *(_QWORD *)v9 = 0;
              *(_DWORD *)(v9 + 8) = 0;
              WTF::fastFree(v12, a2);
            }
            WTF::fastFree((WTF *)v9, a2);
          }
          WTF::fastFree(v8, a2);
        }
        v14 = v39;
        if (&v41 != (__int128 *)v39 && v39 != 0)
        {
          v39 = 0;
          LODWORD(v40) = 0;
          WTF::fastFree(v14, a2);
        }
        v4 = *this;
LABEL_27:
        *this = 0;
        if (!v4)
          return;
        goto LABEL_28;
      }
      v19 = 0;
      v20 = *(unsigned int **)(v7 + 144);
      v21 = &v20[4 * v18];
      v22 = v20 + 4;
      do
      {
        v23 = v22;
        v24 = *v20;
        v25 = v20[4] - *v20;
        v26 = (uint64_t *)*((_QWORD *)v6 + 2);
        v27 = *((_QWORD *)v20 + 1);
        v28 = *((unsigned int *)v26 + 3);
        if (v27 != v28)
        {
          if (v27 >= v28)
          {
            __break(0xC471u);
            return;
          }
          v29 = *v26;
          v30 = v29 + 4 * v27;
          v31 = *((_QWORD *)v20 + 3);
          v32 = (_DWORD *)(v29 + 4 * v31);
          v33 = (_DWORD *)(v30 + 4);
          if (v27 != v31 && v33 != v32)
          {
            v35 = 4 * v31 - 4 * v27 - 12;
            do
            {
              v36 = *v33 - *(v33 - 1);
              LODWORD(v42) = *(v33 - 1);
              *(_QWORD *)((char *)&v42 + 4) = __PAIR64__(v36, v24);
              HIDWORD(v42) = v25;
              if (v19 == (_DWORD)v40)
              {
                v38 = (_OWORD *)WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, (void *)(v19 + 1), (unint64_t)&v42);
                *((_OWORD *)v39 + HIDWORD(v40)) = *v38;
              }
              else
              {
                *((_OWORD *)v39 + v19) = v42;
              }
              v19 = ++HIDWORD(v40);
              if (v35 == -4)
                break;
              v33 += 2;
              v37 = v35;
              v35 -= 8;
            }
            while (v37);
          }
        }
        if (v23 == v21)
          break;
        v22 = v23 + 4;
        v20 = v23;
      }
      while (v23 + 4 != v21);
      if (!v19)
        goto LABEL_7;
      v17 = v39;
      v16 = (WTF *)((char *)v39 + 16 * v19);
    }
    else
    {
      if (*((int *)v6 + 2) < 1 || *((int *)v6 + 3) < 1)
        goto LABEL_7;
      v41 = *v6;
      HIDWORD(v40) = 1;
      v16 = (WTF *)&v42;
      v17 = (WTF *)&v41;
    }
    do
    {
      WebCore::LocalFrameView::repaintContentRectangle(*(_QWORD *)(v5 + 248), v17);
      v17 = (WTF *)((char *)v17 + 16);
    }
    while (v17 != v16);
    goto LABEL_7;
  }
  *this = 0;
LABEL_28:
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, a2);
  else
    --*(_DWORD *)v4;
}

uint64_t WebCore::RenderView::pageCount(WebCore::RenderView *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 468))
    return 0;
  v1 = *((_QWORD *)this + 28);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = v6;
  while (*(_BYTE *)(v7 + 46) != 26)
  {
    v8 = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
    if (!v8)
      return 0;
    result = 0;
    v7 = *(_QWORD *)(v8 + 8);
    if (!v7)
      return result;
  }
  while (*(_BYTE *)(v6 + 46) != 26)
    v6 = *(_QWORD *)((*(unsigned int *)(v6 + 47) | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
  v9 = *(unsigned int *)(v6 + 292);
  if ((int)v9 < 1)
    return 1;
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 8);
  v11 = *(_QWORD *)(v6 + 264);
  if ((*(_BYTE *)(v10 + 21) & 0x10) == 0)
    v11 >>= 32;
  if ((int)v11 < 1)
    return 1;
  v12 = 0x7FFFFFFF;
  if ((uint64_t)(((unint64_t)v11 << 6) / v9) >= 0x7FFFFFFF)
    LODWORD(v13) = 0x7FFFFFFF;
  else
    v13 = ((unint64_t)v11 << 6) / v9;
  v14 = v13 >> 6;
  v15 = v13 & 0x7FFFFFC0;
  if (v14 != 0x1FFFFFF)
    v12 = v15;
  v16 = v12 * (unint64_t)v9;
  v17 = v16 >> 6;
  if (v16 >> 38 != (int)(v16 >> 6) >> 31)
    LODWORD(v17) = 0x7FFFFFFF;
  if ((int)v17 >= (int)v11)
    return v14;
  else
    return v14 + 1;
}

WTF *WebCore::RenderView::registerBoxWithScrollSnapPositions(WebCore::RenderView *this, const WebCore::RenderBox *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)this + 496, a2, (uint64_t)v3);
}

uint64_t WebCore::RenderView::unregisterBoxWithScrollSnapPositions(uint64_t this, const WebCore::RenderBox *a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  char v9;

  v3 = (uint64_t *)(this + 496);
  v4 = *(_DWORD *)(this + 504) + 1;
  *(_DWORD *)(this + 504) = v4;
  if (v4 > *(_DWORD *)(this + 508))
  {
    v5 = this;
    this = _ZN3WTF7HashSetINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIKN7WebCore9RenderBoxES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_((uint64_t *)(this + 496), &v9);
    v6 = 0;
    *(_DWORD *)(v5 + 504) = 0;
    v7 = *(_QWORD *)(v5 + 496);
    if (v7)
    {
      v6 = *(_DWORD *)(v7 - 12);
      if (v6 > 0x7FFFFFFE)
        v6 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v5 + 508) = 2 * v6;
  }
  v8 = (WTF *)*((_QWORD *)a2 + 1);
  if (v8)
  {
    if (*((_QWORD *)v8 + 1))
      return WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(v3, v8);
  }
  return this;
}

WTF *WebCore::RenderView::registerContainerQueryBox(WebCore::RenderView *this, const WebCore::RenderBox *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)this + 512, a2, (uint64_t)v3);
}

uint64_t WebCore::RenderView::unregisterContainerQueryBox(uint64_t this, const WebCore::RenderBox *a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  char v9;

  v3 = (uint64_t *)(this + 512);
  v4 = *(_DWORD *)(this + 520) + 1;
  *(_DWORD *)(this + 520) = v4;
  if (v4 > *(_DWORD *)(this + 524))
  {
    v5 = this;
    this = _ZN3WTF7HashSetINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIKN7WebCore9RenderBoxES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_((uint64_t *)(this + 512), &v9);
    v6 = 0;
    *(_DWORD *)(v5 + 520) = 0;
    v7 = *(_QWORD *)(v5 + 512);
    if (v7)
    {
      v6 = *(_DWORD *)(v7 - 12);
      if (v6 > 0x7FFFFFFE)
        v6 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v5 + 524) = 2 * v6;
  }
  v8 = (WTF *)*((_QWORD *)a2 + 1);
  if (v8)
  {
    if (*((_QWORD *)v8 + 1))
      return WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(v3, v8);
  }
  return this;
}

WTF *WTF::WeakHashSet<WebCore::RenderCounter,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderCounter>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v19;
  WTF *v20;
  void *v21;
  WTF *result;
  void *v23;
  WTF *v24;
  WTF *v25;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_28;
    }
    v10 = *(_DWORD *)(v8 - 4);
    if (!v10)
      goto LABEL_25;
    v11 = 0;
    v12 = v10 - 1;
    do
    {
      v13 = v12;
      v14 = *(WTF **)(v8 + 8 * v12);
      if ((unint64_t)v14 + 1 >= 2 && !*((_QWORD *)v14 + 1))
      {
        *(_QWORD *)(v8 + 8 * v12) = 0;
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, a2);
        else
          --*(_DWORD *)v14;
        *(_QWORD *)(v8 + 8 * v12) = -1;
        ++v11;
      }
      --v12;
    }
    while (v13);
    v8 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v8 - 16) += v11;
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v11;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v17 = *(_DWORD *)(v8 - 4);
    if (v17 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v17)
    {
LABEL_25:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_28;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v19 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
    {
LABEL_29:
      *(_DWORD *)(a1 + 12) = 2 * v19;
      goto LABEL_30;
    }
LABEL_28:
    v19 = v9;
    goto LABEL_29;
  }
LABEL_30:
  v20 = (WTF *)a2[1];
  if (!v20)
  {
    v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = a2;
    v24 = (WTF *)a2[1];
    a2[1] = v20;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        WTF::fastFree(v24, v23);
        v20 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
  }
  *(_DWORD *)v20 += 2;
  v25 = v20;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v25, a3);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v21);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v20 == 1)
    return (WTF *)WTF::fastFree(v20, v21);
  --*(_DWORD *)v20;
  return result;
}

uint64_t WebCore::RenderView::viewTransitionRoot@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 528);
  if (v2)
    ++*v2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::RenderView::setViewTransitionRoot(WebCore::RenderView *this, WebCore::RenderElement *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v6;

  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v6 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v6)
    goto LABEL_2;
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
LABEL_2:
    ++*(_DWORD *)result;
    goto LABEL_3;
  }
  WTF::fastFree(v6, a2);
  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
LABEL_3:
  v4 = (WTF *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = result;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::RenderViewTransitionCapture::~RenderViewTransitionCapture(WebCore::RenderViewTransitionCapture *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  WTF *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  *(_QWORD *)this = off_1E34201A0;
  v11 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, a2);
    else
      --*(_DWORD *)v11;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v13 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  *(_QWORD *)this = off_1E34201A0;
  v11 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, a2);
    else
      --*(_DWORD *)v11;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 34) = 0;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v12);
  }
}

uint64_t WebCore::RenderViewTransitionCapture::setImage(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v2 = result;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C](v4);
LABEL_6:
    ++*(_QWORD *)(v4 + 8);
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
LABEL_11:
  v7 = *(_QWORD *)(v2 + 216);
  *(_QWORD *)(v2 + 216) = v3;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_16:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_23:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_23;
  if (v11)
    return result;
LABEL_24:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    return WTF::fastFree((WTF *)v8, a2);
  return result;
}

void WebCore::RenderViewTransitionCapture::intrinsicSizeChanged(WebCore::RenderViewTransitionCapture *this)
{
  unint64_t v2;
  int v4;
  WebCore::RenderElement *v5;
  uint64_t v6;
  int v7;

  v2 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  if (*((_DWORD *)this + 66) != (_DWORD)v2 || *((_DWORD *)this + 67) != HIDWORD(v2))
  {
    *((_QWORD *)this + 25) = *((_QWORD *)this + 33);
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
    v4 = *((_DWORD *)this + 5);
    if ((v4 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v4 | 8;
      v5 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v5);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0
          || ((v6 = *((_QWORD *)this + 18)) == 0
            ? (v7 = MEMORY[8])
            : (v7 = *(_DWORD *)(v6 + 8) + 1, *(_DWORD *)(v6 + 8) = v7),
              *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
              !v7))
        {
          __break(0xC471u);
          JUMPOUT(0x1964797FCLL);
        }
        *(_DWORD *)(v6 + 8) = v7 - 1;
      }
    }
  }
}

unint64_t WebCore::RenderViewTransitionCapture::paintReplaced(WebCore::RenderViewTransitionCapture *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v4;
  unint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char v10;
  int32x2_t *v11;
  float32x4_t v12;
  int32x2_t v13[2];

  v4 = *((_QWORD *)a2 + 10);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  if ((result & 1) == 0)
  {
    v13[0] = (int32x2_t)WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
    result = WebCore::RenderReplaced::replacedContentRect(this, v13);
    v12 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)((char *)this + 248)), (float32x4_t)vdupq_n_s32(0x3C800000u));
    v6 = (*(_BYTE *)(*((_QWORD *)this + 13) + 234) & 7) - 1;
    if (v6 > 3)
    {
      v8 = (unsigned __int8 *)(v4 + 340);
      v9 = *(unsigned __int8 *)(v4 + 340);
      v7 = v9;
    }
    else
    {
      v7 = (0x1010002u >> (8 * v6)) & 3;
      v8 = (unsigned __int8 *)(v4 + 340);
      v9 = *(unsigned __int8 *)(v4 + 340);
    }
    if (!v7 || v9 == v7)
    {
      v10 = 1;
    }
    else
    {
      *(_BYTE *)(v4 + 340) = v7;
      *(_DWORD *)(v4 + 184) |= 0x400u;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
      v10 = 0;
    }
    v11 = (int32x2_t *)*((_QWORD *)this + 27);
    if (v11)
    {
      v13[0] = 0;
      v13[1] = v11[2];
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4);
    }
    if ((v10 & 1) == 0)
    {
      if (*v8 != v9)
      {
        *(_BYTE *)(v4 + 340) = v9;
        *(_DWORD *)(v4 + 184) |= 0x400u;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
    }
  }
  return result;
}

uint64_t WebCore::RenderViewTransitionCapture::layout(WebCore::RenderViewTransitionCapture *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  float v12;
  int v13;
  float v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unint64_t v21;

  WebCore::RenderReplaced::layout(this);
  *(_OWORD *)((char *)this + 248) = *((_OWORD *)this + 14);
  v2 = *((_DWORD *)this + 60);
  v3 = *((_DWORD *)this + 61);
  if (v2 == 0x80000000)
    v4 = 0x7FFFFFFF;
  else
    v4 = -v2;
  if (v3 == 0x80000000)
    v5 = 0x7FFFFFFF;
  else
    v5 = -v3;
  v6 = *((_DWORD *)this + 62);
  v7 = __OFADD__(v6, v4);
  v8 = v6 + v4;
  if (v7)
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 62) = v8;
  v9 = *((_DWORD *)this + 63);
  v7 = __OFADD__(v9, v5);
  v10 = v9 + v5;
  if (v7)
    v10 = (v9 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 63) = v10;
  v21 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  WebCore::RenderReplaced::replacedContentRect(this, (int32x2_t *)&v21);
  v12 = (float)((float)v11 * 0.015625)
      / (float)((float)(int)WebCore::RenderReplaced::intrinsicSize((unint64_t)this) * 0.015625);
  v21 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  WebCore::RenderReplaced::replacedContentRect(this, (int32x2_t *)&v21);
  v14 = (float)((float)v13 * 0.015625)
      / (float)((float)(int)(WebCore::RenderReplaced::intrinsicSize((unint64_t)this) >> 32) * 0.015625);
  *((float *)this + 68) = v12;
  *((float *)this + 69) = v14;
  WebCore::LayoutRect::scale((int *)this + 62, v12, v14);
  v21 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  v15 = WebCore::RenderReplaced::replacedContentRect(this, (int32x2_t *)&v21);
  v16 = *((_DWORD *)this + 62);
  v17 = v16 + v15;
  if (__OFADD__(v16, (_DWORD)v15))
    v17 = (v16 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 62) = v17;
  v18 = *((_DWORD *)this + 63);
  v19 = v18 + HIDWORD(v15);
  if (__OFADD__(v18, HIDWORD(v15)))
    v19 = (v18 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 63) = v19;
  return WebCore::RenderBox::addVisualOverflow((uint64_t)this, (WebCore::RenderViewTransitionCapture *)((char *)this + 248));
}

unsigned int *WebCore::RenderViewTransitionCapture::updateFromStyle(WebCore::RenderViewTransitionCapture *this)
{
  unsigned int *result;
  int v3;
  BOOL v4;

  result = WebCore::RenderBox::updateFromStyle(this);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x80000) != 0
    || ((*((_QWORD *)this + 12) & 0x1C00) == 0 ? (v4 = (*((_QWORD *)this + 12) & 0xE000) == 0) : (v4 = 0), !v4))
  {
    *((_DWORD *)this + 5) = v3 | 0x10000;
  }
  return result;
}

uint64_t WebCore::RenderViewTransitionCapture::captureContentInset(WebCore::RenderViewTransitionCapture *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *((_DWORD *)this + 62);
  v1 = *((_DWORD *)this + 63);
  v3 = *((_QWORD *)this + 24);
  if (v3)
    v3 = *(_QWORD *)(v3 + 20);
  if (HIDWORD(v3) == 0x80000000)
    v4 = 0x7FFFFFFF;
  else
    v4 = -HIDWORD(v3);
  if ((_DWORD)v3 == 0x80000000)
    v5 = 0x7FFFFFFF;
  else
    v5 = -(int)v3;
  v6 = __OFADD__(v2, v5);
  v7 = v2 + v5;
  LODWORD(v8) = (v2 >> 31) + 0x7FFFFFFF;
  if (v6)
    v8 = v8;
  else
    v8 = v7;
  v6 = __OFADD__(v1, v4);
  v9 = v1 + v4;
  LODWORD(v10) = (v1 >> 31) + 0x7FFFFFFF;
  if (v6)
    v10 = v10;
  else
    v10 = v9;
  return v8 | (v10 << 32);
}

uint64_t WebCore::RenderViewTransitionCapture::nodeForHitTest(WebCore::RenderViewTransitionCapture *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
}

WTF::StringImpl *WebCore::RenderViewTransitionCapture::debugDescription@<X0>(WebCore::RenderViewTransitionCapture *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4;
  int8x16_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;
  int8x16_t **v13;
  const char *v14;
  int v15;
  int8x16_t *v16;
  int v17;
  int8x16_t *v18;
  int v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  WTF::Internal::appendHex();
  v20 = v4;
  v16 = (int8x16_t *)"RenderViewTransitionCapture";
  v17 = 27;
  v13 = &v18;
  v14 = " 0x";
  v15 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v9, (uint64_t)&v16, (uint64_t)&v14, (uint64_t *)&v13);
  if ((*((_QWORD *)this + 12) & 0xF80000000000) == 0x800000000000)
    v5 = (int8x16_t *)"new(";
  else
    v5 = (int8x16_t *)"old(";
  v18 = (int8x16_t *)" ::view-transition-";
  v19 = 19;
  v16 = v5;
  v17 = 4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v9, &v18, &v16);
  v18 = *(int8x16_t **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 592);
  LOBYTE(v16) = 41;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v9, (uint64_t *)&v18, (char *)&v16);
  result = v9;
  if (v9
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v9),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v9),
        (result = v9) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      result = v9;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

const char *WebCore::RenderViewTransitionCapture::renderName(WebCore::RenderViewTransitionCapture *this)
{
  return "RenderViewTransitionCapture";
}

void WebCore::RenderTheme::mediaControlsStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebCore::RenderTheme::mediaControlsScripts@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *a1 = a1 + 2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

void WebCore::RenderTheme::mediaControlsBase64StringForIconNameAndType(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::RenderTheme::mediaControlsFormattedStringForDuration(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebCore::RenderTheme::animationRepeatIntervalForProgressBar(WebCore::RenderTheme *this, const WebCore::RenderProgress *a2)
{
  return 0.0;
}

uint64_t WebCore::RenderTheme::shouldHaveCapsLockIndicator(WebCore::RenderTheme *this, const WebCore::HTMLInputElement *a2)
{
  return 0;
}

uint64_t WebCore::RenderTheme::attachmentBaseline(WebCore::RenderTheme *this, const WebCore::RenderAttachment *a2)
{
  return 0xFFFFFFFFLL;
}

const char *WebCore::RenderVideo::renderName(WebCore::RenderVideo *this)
{
  return "RenderVideo";
}

uint64_t WebCore::RenderVideo::requiresLayer(WebCore::RenderVideo *this)
{
  return 1;
}

uint64_t WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::RenderTheme::ColorCache *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::RenderTheme::ColorCache *)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254)
        WebCore::RenderTheme::ColorCache::~ColorCache(v4, a2);
      v4 = (WebCore::RenderTheme::ColorCache *)((char *)v4 + 176);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(_DWORD *a1, void *a2)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *(a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_DWORD *)WTF::KeyValuePair<int,WebCore::Color>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 4), a2);
}

void WebCore::ToggleButtonPart::~ToggleButtonPart(WebCore::ToggleButtonPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::ToggleButtonPart::~ToggleButtonPart(WebCore::ToggleButtonPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ToggleButtonPart::createPlatformControl(WebCore::ToggleButtonPart *this)
{
  uint64_t v2;
  WebCore::ToggleButtonPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::ToggleButtonPart *))(*(_QWORD *)v5 + 152))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::ToggleButtonPart *))(*(_QWORD *)v2 + 152))(v2, this);
}

void WebCore::ButtonPart::~ButtonPart(WebCore::ButtonPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::ButtonPart::~ButtonPart(WebCore::ButtonPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ButtonPart::createPlatformControl(WebCore::ButtonPart *this)
{
  uint64_t v2;
  WebCore::ButtonPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::ButtonPart *))(*(_QWORD *)v5 + 24))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::ButtonPart *))(*(_QWORD *)v2 + 24))(v2, this);
}

void WebCore::MenuListPart::~MenuListPart(WebCore::MenuListPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::MenuListPart::~MenuListPart(WebCore::MenuListPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MenuListPart::createPlatformControl(WebCore::MenuListPart *this)
{
  uint64_t v2;
  WebCore::MenuListPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::MenuListPart *))(*(_QWORD *)v5 + 48))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::MenuListPart *))(*(_QWORD *)v2 + 48))(v2, this);
}

void WebCore::MenuListButtonPart::~MenuListButtonPart(WebCore::MenuListButtonPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::MenuListButtonPart::~MenuListButtonPart(WebCore::MenuListButtonPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MenuListButtonPart::createPlatformControl(WebCore::MenuListButtonPart *this)
{
  uint64_t v2;
  WebCore::MenuListButtonPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::MenuListButtonPart *))(*(_QWORD *)v5 + 56))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::MenuListButtonPart *))(*(_QWORD *)v2 + 56))(v2, this);
}

void WebCore::SearchFieldPart::~SearchFieldPart(WebCore::SearchFieldPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SearchFieldPart::~SearchFieldPart(WebCore::SearchFieldPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SearchFieldPart::createPlatformControl(WebCore::SearchFieldPart *this)
{
  uint64_t v2;
  WebCore::SearchFieldPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldPart *))(*(_QWORD *)v5 + 80))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldPart *))(*(_QWORD *)v2 + 80))(v2, this);
}

void WebCore::TextAreaPart::~TextAreaPart(WebCore::TextAreaPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::TextAreaPart::~TextAreaPart(WebCore::TextAreaPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::TextAreaPart::createPlatformControl(WebCore::TextAreaPart *this)
{
  uint64_t v2;
  WebCore::TextAreaPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::TextAreaPart *))(*(_QWORD *)v5 + 136))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::TextAreaPart *))(*(_QWORD *)v2 + 136))(v2, this);
}

void WebCore::TextFieldPart::~TextFieldPart(WebCore::TextFieldPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::TextFieldPart::~TextFieldPart(WebCore::TextFieldPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::TextFieldPart::createPlatformControl(WebCore::TextFieldPart *this)
{
  uint64_t v2;
  WebCore::TextFieldPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::TextFieldPart *))(*(_QWORD *)v5 + 144))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::TextFieldPart *))(*(_QWORD *)v2 + 144))(v2, this);
}

void WebCore::ColorWellPart::~ColorWellPart(WebCore::ColorWellPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::ColorWellPart::~ColorWellPart(WebCore::ColorWellPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ColorWellPart::createPlatformControl(WebCore::ColorWellPart *this)
{
  uint64_t v2;
  WebCore::ColorWellPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::ColorWellPart *))(*(_QWORD *)v5 + 32))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::ColorWellPart *))(*(_QWORD *)v2 + 32))(v2, this);
}

void WebCore::InnerSpinButtonPart::~InnerSpinButtonPart(WebCore::InnerSpinButtonPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::InnerSpinButtonPart::~InnerSpinButtonPart(WebCore::InnerSpinButtonPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::InnerSpinButtonPart::createPlatformControl(WebCore::InnerSpinButtonPart *this)
{
  uint64_t v2;
  WebCore::InnerSpinButtonPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::InnerSpinButtonPart *))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::InnerSpinButtonPart *))(*(_QWORD *)v2 + 40))(v2, this);
}

void WebCore::SearchFieldResultsPart::~SearchFieldResultsPart(WebCore::SearchFieldResultsPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SearchFieldResultsPart::~SearchFieldResultsPart(WebCore::SearchFieldResultsPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SearchFieldResultsPart::createPlatformControl(WebCore::SearchFieldResultsPart *this)
{
  uint64_t v2;
  WebCore::SearchFieldResultsPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldResultsPart *))(*(_QWORD *)v5 + 96))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldResultsPart *))(*(_QWORD *)v2 + 96))(v2, this);
}

void WebCore::SearchFieldCancelButtonPart::~SearchFieldCancelButtonPart(WebCore::SearchFieldCancelButtonPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SearchFieldCancelButtonPart::~SearchFieldCancelButtonPart(WebCore::SearchFieldCancelButtonPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SearchFieldCancelButtonPart::createPlatformControl(WebCore::SearchFieldCancelButtonPart *this)
{
  uint64_t v2;
  WebCore::SearchFieldCancelButtonPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldCancelButtonPart *))(*(_QWORD *)v5 + 88))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::SearchFieldCancelButtonPart *))(*(_QWORD *)v2 + 88))(v2, this);
}

void WebCore::SliderThumbPart::~SliderThumbPart(WebCore::SliderThumbPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SliderThumbPart::~SliderThumbPart(WebCore::SliderThumbPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SliderThumbPart::createPlatformControl(WebCore::SliderThumbPart *this)
{
  uint64_t v2;
  WebCore::SliderThumbPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::SliderThumbPart *))(*(_QWORD *)v5 + 104))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::SliderThumbPart *))(*(_QWORD *)v2 + 104))(v2, this);
}

void WebCore::SwitchThumbPart::~SwitchThumbPart(WebCore::SwitchThumbPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SwitchThumbPart::~SwitchThumbPart(WebCore::SwitchThumbPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SwitchThumbPart::createPlatformControl(WebCore::SwitchThumbPart *this)
{
  uint64_t v2;
  WebCore::SwitchThumbPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::SwitchThumbPart *))(*(_QWORD *)v5 + 120))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::SwitchThumbPart *))(*(_QWORD *)v2 + 120))(v2, this);
}

void WebCore::SwitchTrackPart::~SwitchTrackPart(WebCore::SwitchTrackPart *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3412F80;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SwitchTrackPart::~SwitchTrackPart(WebCore::SwitchTrackPart *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3412F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SwitchTrackPart::createPlatformControl(WebCore::SwitchTrackPart *this)
{
  uint64_t v2;
  WebCore::SwitchTrackPart *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    {
      v4 = this;
      WebCore::ControlFactory::create(&v5);
      WebCore::ControlFactory::shared(void)::shared = v5;
      return (*(uint64_t (**)(uint64_t, WebCore::SwitchTrackPart *))(*(_QWORD *)v5 + 128))(v5, v4);
    }
    v2 = WebCore::ControlFactory::shared(void)::shared;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::SwitchTrackPart *))(*(_QWORD *)v2 + 128))(v2, this);
}

double WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,double &>(uint64_t a1, unint64_t a2)
{
  double *v3;
  uint64_t v4;
  double result;

  v3 = (double *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  result = *v3;
  *(double *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox9hasHyphenEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return *(_DWORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 76) >> 31;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox9hasHyphenEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_()
{
  return 0;
}

WTF::StringImpl *WebCore::nodePosition(WebCore *this, WebCore::Node *a2, double a3, double a4, double a5, double a6, double a7, double a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t k;
  WebCore::Node *i;
  WebCore::Node **v16;
  WebCore::Node *v17;
  __int16 v18;
  uint64_t v19;
  unsigned int j;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int8x16_t *v27;
  WTF::StringImpl *v28;
  int v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _WORD *v39;
  unsigned int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  _WORD *v51;
  _BYTE *v52;
  size_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int16 v57;
  uint64_t v58;
  char *v59;
  int8x16_t v60;
  __n128 v61;
  char *v62;
  char *v63;
  char *v64;
  unsigned __int128 *v65;
  unsigned __int128 *v66;
  unsigned __int128 v67;
  __int8 v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  WTF::StringImpl *v71;
  __n128 v73;
  int8x16_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82[4];
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;

  v82[2] = *MEMORY[0x1E0C80C00];
  v78 = 0;
  v76 = 0;
  v77 = 0;
  v79 = 1;
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1272);
  if (v10
    && (*(_WORD *)(v10 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v11 = *(_QWORD *)(v10 + 80);
    if (v11)
    {
      while ((*(_WORD *)(v11 + 28) & 0x10) == 0)
      {
        v11 = *(_QWORD *)(v11 + 56);
        if (!v11)
          goto LABEL_15;
      }
      v12 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
      if (v13 != v12)
      {
LABEL_9:
        if (v13 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v11 = *(_QWORD *)(v11 + 56);
            if (!v11)
              break;
            if ((*(_WORD *)(v11 + 28) & 0x10) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
              if (v13 != v12)
                goto LABEL_9;
              break;
            }
          }
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_15:
  k = 0uLL;
  for (i = a2; ; i = v17)
  {
    if ((*((_WORD *)i + 14) & 0x80) == 0)
    {
      v16 = (WebCore::Node **)((char *)i + 32);
LABEL_18:
      v17 = *v16;
      goto LABEL_19;
    }
    v58 = *((_QWORD *)i + 25);
    if (v58)
    {
      v16 = (WebCore::Node **)(v58 + 8);
      goto LABEL_18;
    }
    v17 = 0;
LABEL_19:
    v73 = a9;
    v74 = k;
    if (i != a2)
      WTF::StringBuilder::append();
    if (!v17 || v11 && i == (WebCore::Node *)v11)
      break;
    v18 = *((_WORD *)i + 14);
    if ((v18 & 0x80) == 0)
    {
      v19 = *((_QWORD *)i + 6);
      for (j = 0; ; ++j)
      {
        v21 = v19 & 0xFFFFFFFFFFFFLL;
        if (!v21)
          break;
        v19 = *(_QWORD *)(v21 + 48);
      }
      v25 = v18 & 0xF000;
      if (v25 == 0x8000)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v26 = (WTF::StringImpl *)v82[0];
      }
      else
      {
        if (v25 != 36864)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)i + 104))(&v75, i);
          v26 = v75;
          goto LABEL_42;
        }
        v26 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      v75 = v26;
LABEL_42:
      v30 = 0;
      v31 = j;
      do
      {
        ++v30;
        v32 = v31 > 9;
        v31 /= 0xAu;
      }
      while (v32);
      v33 = v77;
      if ((v77 || (v33 = v76) != 0) && (*((_BYTE *)v33 + 16) & 4) == 0 || v26 && (*((_BYTE *)v26 + 16) & 4) == 0)
      {
        v34 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v76);
        a9 = v73;
        k = v74;
        if (v34)
        {
          *(_QWORD *)v34 = 0x6C006900680063;
          *(_DWORD *)(v34 + 8) = 2097252;
          v35 = -1;
          v36 = 12;
          v37 = j;
          do
          {
            v38 = v35;
            *((_BYTE *)v82 + v36--) = (v37 % 0xA) | 0x30;
            --v35;
            v32 = v37 > 9;
            v37 /= 0xAu;
          }
          while (v32);
          if (v36 + 2 <= 13)
          {
            v39 = (_WORD *)(v34 + 12);
            do
              *v39++ = *((unsigned __int8 *)&v82[1] + v38 + 5);
            while (!__CFADD__(v38++, 1));
          }
          v41 = 0;
          do
          {
            ++v41;
            v32 = j > 9;
            j /= 0xAu;
          }
          while (v32);
          v42 = (_DWORD *)(v34 + 12 + 2 * v41);
          *v42 = 8060960;
          v43 = (char *)(v42 + 1);
          if (v26)
          {
            v27 = (int8x16_t *)*((_QWORD *)v26 + 1);
            v44 = *((unsigned int *)v26 + 1);
            if ((*((_BYTE *)v26 + 16) & 4) != 0)
            {
              if (v44 >= 0x40)
              {
                v55 = &v43[2 * (v44 & 0xFFFFFFC0)];
                v59 = v43;
                do
                {
                  v83.val[0] = *v27;
                  v60 = v27[1];
                  v84.val[0] = v27[2];
                  v61 = (__n128)v27[3];
                  v27 += 4;
                  a9 = v61;
                  v84.val[1] = v74;
                  v85.val[0] = v60;
                  v83.val[1] = v74;
                  v62 = v59;
                  vst2q_s8(v62, v83);
                  v62 += 32;
                  v85.val[1] = v74;
                  vst2q_s8(v62, v85);
                  v63 = v59 + 64;
                  vst2q_s8(v63, v84);
                  v64 = v59 + 96;
                  vst2q_s8(v64, *(int8x16x2_t *)a9.n128_u64);
                  v59 += 128;
                }
                while (v59 != v55);
              }
              else
              {
                v55 = v43;
              }
              v56 = &v43[2 * v44];
              while (v55 != v56)
              {
                v57 = v27->u8[0];
                v27 = (int8x16_t *)((char *)v27 + 1);
                *(_WORD *)v55 = v57;
                v55 += 2;
              }
            }
            else if ((_DWORD)v44 == 1)
            {
              *(_WORD *)v43 = v27->i16[0];
            }
            else if ((_DWORD)v44)
            {
              memcpy(v43, v27, 2 * v44);
              a9 = v73;
              k = v74;
            }
            v45 = *((unsigned int *)v26 + 1);
          }
          else
          {
            v45 = 0;
          }
          *(_WORD *)&v43[2 * v45] = 125;
        }
      }
      else
      {
        v46 = MEMORY[0x19AEA4824](&v76);
        a9 = v73;
        k = v74;
        if (v46)
        {
          v47 = 0;
          *(_WORD *)(v46 + 4) = 8292;
          *(_DWORD *)v46 = 1818847331;
          v48 = j;
          do
          {
            *((_BYTE *)&v82[1] + v47-- + 4) = (v48 % 0xA) | 0x30;
            v32 = v48 > 9;
            v48 /= 0xAu;
          }
          while (v32);
          v49 = v46 + 6;
          if (v47 + 14 <= 13)
          {
            memcpy((void *)(v46 + 6), (char *)&v82[1] + v47 + 5, -v47);
            a9 = v73;
            k = v74;
          }
          v50 = 0;
          do
          {
            ++v50;
            v32 = j > 9;
            j /= 0xAu;
          }
          while (v32);
          v51 = (_WORD *)(v49 + v50);
          *v51 = 31520;
          v52 = v51 + 1;
          if (v26)
          {
            v27 = (int8x16_t *)*((_QWORD *)v26 + 1);
            v53 = *((unsigned int *)v26 + 1);
            if ((*((_BYTE *)v26 + 16) & 4) != 0)
            {
              if ((_DWORD)v53)
              {
                if ((_DWORD)v53 == 1)
                {
                  *v52 = v27->i8[0];
                }
                else
                {
                  memcpy(v52, v27, v53);
                  a9 = v73;
                  k = v74;
                }
              }
            }
            else
            {
              if (v53 < 0x10)
              {
                v65 = (unsigned __int128 *)v52;
              }
              else
              {
                v65 = (unsigned __int128 *)&v52[v53 & 0xFFFFFFF0];
                v66 = (unsigned __int128 *)v52;
                do
                {
                  v67 = (unsigned __int128)vld2q_s8(v27->i8);
                  v27 += 2;
                  *v66++ = v67;
                }
                while (v66 != v65);
              }
              a9 = v73;
              for (k = v74; v65 != (unsigned __int128 *)&v52[v53]; v65 = (unsigned __int128 *)((char *)v65 + 1))
              {
                v68 = v27->i8[0];
                v27 = (int8x16_t *)((char *)v27 + 2);
                *(_BYTE *)v65 = v68;
              }
            }
            v54 = *((unsigned int *)v26 + 1);
          }
          else
          {
            v54 = 0;
          }
          v52[v54] = 125;
        }
      }
      v28 = v75;
      v75 = 0;
      if (v28)
      {
        v29 = *(_DWORD *)v28 - 2;
        if (*(_DWORD *)v28 != 2)
        {
LABEL_80:
          *(_DWORD *)v28 = v29;
          continue;
        }
        v73 = a9;
        v74 = k;
        goto LABEL_88;
      }
      continue;
    }
    v22 = v18 & 0xF000;
    if (v22 == 0x8000)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v24 = (WTF::StringImpl *)v82[0];
      v75 = (WTF::StringImpl *)v82[0];
    }
    else if (v22 == 36864)
    {
      v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v75 = v23;
      v24 = v23;
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)i + 104))(&v75, i);
      v24 = v75;
    }
    v81 = 123;
    v82[0] = (uint64_t)v24;
    v80 = 125;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v76, &v81, v82, &v80);
    v28 = v75;
    v75 = 0;
    a9 = v73;
    k = v74;
    if (v28)
    {
      v29 = *(_DWORD *)v28 - 2;
      if (*(_DWORD *)v28 != 2)
        goto LABEL_80;
LABEL_88:
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v27);
      a9 = v73;
      k = v74;
      continue;
    }
  }
  WTF::StringBuilder::append();
  result = v76;
  if (v76
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v76),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v76),
        (result = v76) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *(_QWORD *)this = result;
  v71 = v77;
  v77 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::destroy(v71, v69);
      result = v76;
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v76 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v69);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::writeLayer(WTF::TextStream *this, const WebCore::RenderLayer *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int a6, char a7)
{
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  char v41;
  WebCore::RenderLayerScrollableArea *v42;
  WebCore::RenderBox *v43;
  int v44;
  int v45;
  int v46;
  WebCore::RenderBox *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  WebCore::RenderLayerScrollableArea *v101;
  WebCore::RenderBox *v102;
  int v103;
  int v104;
  int v105;
  WebCore::RenderBox *v106;
  int v107;
  int v108;
  int v109;
  WebCore::RenderView *v110;
  WebCore::RenderLayerCompositor *v111;
  int v112;
  int i;
  uint64_t v114;
  WebCore::RenderView *v115;
  WebCore::RenderLayerCompositor *v116;
  int v117;
  int j;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WebCore::RenderLayerCompositor *v133;
  WebCore::RenderLayerCompositor *v134;
  WTF *v135;
  void *v136;
  WebCore::RenderLayerCompositor *v137;
  WebCore::RenderLayerCompositor *v138;
  WTF *v139;
  void *v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  __int128 v150;

  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 24) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v14 + 680) + 680) & 0x800000000000) != 0 && *(_BYTE *)(v14 + 3419))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    if ((a7 & 0x40) != 0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      if (*((_QWORD *)a2 + 33))
      {
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
      }
    }
    WebCore::operator<<((uint64_t)this);
    v15 = a3[2];
    if (v15 >= 1)
    {
      v16 = a3[3];
      if (v16 >= 1)
      {
        v17 = *a4;
        v18 = *a3;
        if ((int)*a4 > (int)*a3)
          goto LABEL_20;
        v19 = a4[2];
        v20 = __OFADD__(v17, v19);
        v21 = v17 + v19;
        if (v20)
          v21 = (v17 >> 31) + 0x7FFFFFFF;
        v20 = __OFADD__(v18, v15);
        v22 = v18 + v15;
        if (v20)
          v22 = (v18 >> 31) + 0x7FFFFFFF;
        if (v21 < v22)
          goto LABEL_20;
        v23 = a4[1];
        v24 = a3[1];
        if ((int)v23 > (int)v24)
          goto LABEL_20;
        v25 = a4[3];
        v20 = __OFADD__(v23, v25);
        v26 = v23 + v25;
        if (v20)
          v26 = (v23 >> 31) + 0x7FFFFFFF;
        v20 = __OFADD__(v24, v16);
        v27 = v24 + v16;
        if (v20)
          v27 = (v24 >> 31) + 0x7FFFFFFF;
        if (v26 < v27)
        {
LABEL_20:
          v28 = WTF::TextStream::operator<<();
          WebCore::operator<<(v28);
          v18 = *a3;
        }
        v29 = *a5;
        if ((int)*a5 > (int)v18)
          goto LABEL_33;
        v30 = a5[2];
        v20 = __OFADD__(v29, v30);
        v31 = v29 + v30;
        if (v20)
          v31 = (v29 >> 31) + 0x7FFFFFFF;
        v32 = a3[2];
        v20 = __OFADD__(v18, v32);
        v33 = v18 + v32;
        if (v20)
          v33 = (v18 >> 31) + 0x7FFFFFFF;
        if (v31 < v33)
          goto LABEL_33;
        v34 = a5[1];
        v35 = a3[1];
        if ((int)v34 > (int)v35)
          goto LABEL_33;
        v36 = a5[3];
        v20 = __OFADD__(v34, v36);
        v37 = v34 + v36;
        if (v20)
          v37 = (v34 >> 31) + 0x7FFFFFFF;
        v38 = a3[3];
        v20 = __OFADD__(v35, v38);
        v39 = v35 + v38;
        if (v20)
          v39 = (v35 >> 31) + 0x7FFFFFFF;
        if (v37 < v39)
        {
LABEL_33:
          v40 = WTF::TextStream::operator<<();
          WebCore::operator<<(v40);
        }
      }
    }
    v41 = a7;
    if ((*(_BYTE *)(*((_QWORD *)a2 + 4) + 22) & 1) != 0)
    {
      v42 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)a2 + 33);
      if (v42)
      {
        if (*((_DWORD *)v42 + 8)
           + (*(unsigned int (**)(_QWORD))(*(_QWORD *)v42 + 416))(*((_QWORD *)a2 + 33)))
        {
          WTF::TextStream::operator<<();
          (*(void (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 416))(v42);
          WTF::TextStream::operator<<();
        }
        if (((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 416))(v42)
            + ((unint64_t)*((unsigned int *)v42 + 9) << 32)) >> 32)
        {
          WTF::TextStream::operator<<();
          (*(void (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 416))(v42);
          WTF::TextStream::operator<<();
        }
        v43 = (WebCore::RenderBox *)*((_QWORD *)a2 + 4);
        if (v43 && (*((_BYTE *)v43 + 45) & 4) != 0)
        {
          v44 = WebCore::RenderBox::clientWidth(v43);
          v46 = ((int)(v44 - (v45 & 0xFFFFFFC0) + 32) >> 6) + v44 / 64;
          if (*((_BYTE *)v42 + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions(v42);
          if (v46 != *((_DWORD *)v42 + 22))
          {
            WTF::TextStream::operator<<();
            if (*((_BYTE *)v42 + 76))
              WebCore::RenderLayerScrollableArea::computeScrollDimensions(v42);
            WTF::TextStream::operator<<();
          }
        }
        v47 = (WebCore::RenderBox *)*((_QWORD *)a2 + 4);
        if (v47 && (*((_BYTE *)v47 + 45) & 4) != 0)
        {
          v48 = WebCore::RenderBox::clientHeight(v47);
          v50 = ((int)(v48 - (v49 & 0xFFFFFFC0) + 32) >> 6) + v48 / 64;
          if (*((_BYTE *)v42 + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions(v42);
          if (v50 != *((_DWORD *)v42 + 23))
          {
            WTF::TextStream::operator<<();
            if (*((_BYTE *)v42 + 76))
              WebCore::RenderLayerScrollableArea::computeScrollDimensions(v42);
            WTF::TextStream::operator<<();
          }
        }
      }
    }
    if (a6 == -1 || a6 == 1)
      WTF::TextStream::operator<<();
    if ((v41 & 4) != 0)
    {
      if (*((_QWORD *)a2 + 32))
      {
        WTF::TextStream::operator<<();
        v110 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 1944);
        v111 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v110 + 50);
        if (!v111)
        {
          v133 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v111 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v133, v110);
          v134 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v110 + 50);
          *((_QWORD *)v110 + 50) = v111;
          if (v134)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v134);
            WTF::fastFree(v135, v136);
            v111 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v110 + 50);
          }
        }
        v112 = WebCore::RenderLayerCompositor::reasonsForCompositing(v111, a2);
        WTF::TextStream::operator<<();
        if (v112)
        {
          WebCore::operator<<();
          for (i = (v112 - 1) & v112; i; i &= i - 1)
          {
            WTF::TextStream::operator<<();
            WebCore::operator<<();
          }
        }
        WTF::TextStream::operator<<();
        v114 = WTF::TextStream::operator<<();
        v150 = *(_OWORD *)(*((_QWORD *)a2 + 32) + 176);
        WebCore::operator<<(v114);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        goto LABEL_134;
      }
      v120 = *((_QWORD *)a2 + 10);
      if (v120 && *(_QWORD *)(v120 + 8))
      {
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
LABEL_134:
        WTF::TextStream::operator<<();
      }
    }
    v121 = *((_QWORD *)a2 + 3);
    if ((v121 & 0x800000000000) != 0 && (v121 & 0xA) != 0)
      WTF::TextStream::operator<<();
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 88) + 40) + 636) & 0x1F00000) != 0x100000)
    {
      WTF::TextStream::operator<<();
      v122 = *((_QWORD *)a2 + 3);
      if ((v122 & 0x3C0000000000) != 0)
      {
        v123 = (&WebCore::blendOperatorNames)[2 * ((v122 >> 41) & 0x1F) - 1];
        if (v123)
        {
          if (v123 == (char *)1)
          {
            v124 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v124 = (WTF::StringImpl *)v150;
          }
          v148 = v124;
        }
        else
        {
          v148 = 0;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      WTF::TextStream::operator<<();
      v131 = v148;
      if (v148)
      {
        if (*(_DWORD *)v148 != 2)
        {
          *(_DWORD *)v148 -= 2;
          return WTF::TextStream::operator<<();
        }
        goto LABEL_170;
      }
    }
    return WTF::TextStream::operator<<();
  }
  v51 = HIDWORD(*(_QWORD *)a3);
  v52 = *(_QWORD *)a3 + 63;
  if ((int)*(_QWORD *)a3 >= 0)
    v52 = *(_QWORD *)a3;
  v53 = *(_QWORD *)a3 - (v52 & 0xFFFFFFC0);
  if ((int)v51 >= 0)
    v54 = HIDWORD(*(_QWORD *)a3);
  else
    v54 = v51 + 63;
  v55 = v51 - (v54 & 0xFFFFFFC0);
  v56 = a3[2];
  v57 = a3[3];
  v20 = __OFADD__(v53, v56);
  v58 = v53 + v56;
  if (v20)
    v58 = (v53 >> 31) + 0x7FFFFFFF;
  v59 = v52 >> 6;
  v60 = v54 >> 6;
  v61 = v55 + v57;
  if (__OFADD__(v55, v57))
    v61 = (v55 >> 31) + 0x7FFFFFFF;
  v62 = v55 + 32;
  v63 = v53 + 32;
  v145 = v59 + (v63 >> 6);
  v146 = v60 + (v62 >> 6);
  v64 = v58 / 64 - (v63 >> 6) + ((int)(v58 - (v60 & 0xFFFFFFC0) + 32) >> 6);
  v65 = v61 / 64 - (v62 >> 6) + ((int)(v61 - (v63 & 0xFFFFFFC0) + 32) >> 6);
  v66 = HIDWORD(*(_QWORD *)a4);
  v67 = *(_QWORD *)a4 + 63;
  if ((int)*(_QWORD *)a4 >= 0)
    v67 = *(_QWORD *)a4;
  v68 = *(_QWORD *)a4 - (v67 & 0xFFFFFFC0);
  if ((int)v66 >= 0)
    v69 = HIDWORD(*(_QWORD *)a4);
  else
    v69 = v66 + 63;
  v70 = v66 - (v69 & 0xFFFFFFC0);
  v71 = a4[2];
  v72 = a4[3];
  v20 = __OFADD__(v68, v71);
  v73 = v68 + v71;
  if (v20)
    v73 = (v68 >> 31) + 0x7FFFFFFF;
  v74 = v67 >> 6;
  v75 = v69 >> 6;
  v76 = v70 + v72;
  if (__OFADD__(v70, v72))
    v76 = (v70 >> 31) + 0x7FFFFFFF;
  v77 = v70 + 32;
  v78 = v68 + 32;
  v143 = v74 + (v78 >> 6);
  v144 = v75 + (v77 >> 6);
  v141 = v76 / 64 - (v77 >> 6) + ((int)(v76 - (v78 & 0xFFFFFFC0) + 32) >> 6);
  v142 = v73 / 64 - (v78 >> 6) + ((int)(v73 - (v75 & 0xFFFFFFC0) + 32) >> 6);
  v79 = HIDWORD(*(_QWORD *)a5);
  v80 = *(_QWORD *)a5 + 63;
  if ((int)*(_QWORD *)a5 >= 0)
    v80 = *(_QWORD *)a5;
  v81 = *(_QWORD *)a5 - (v80 & 0xFFFFFFC0);
  if ((int)v79 >= 0)
    v82 = HIDWORD(*(_QWORD *)a5);
  else
    v82 = v79 + 63;
  v83 = v79 - (v82 & 0xFFFFFFC0);
  v84 = a5[2];
  v85 = a5[3];
  v20 = __OFADD__(v81, v84);
  v87 = v81 + v84;
  if (v20)
    v87 = (v81 >> 31) + 0x7FFFFFFF;
  v88 = v64;
  v89 = v80 >> 6;
  v90 = v82 >> 6;
  v91 = v83 + v85;
  if (__OFADD__(v83, v85))
    v91 = (v83 >> 31) + 0x7FFFFFFF;
  v92 = v83 + 32;
  v93 = v90 + (v92 >> 6);
  v94 = v81 + 32;
  v95 = v89 + (v94 >> 6);
  v96 = v87 / 64 - (v94 >> 6) + ((int)(v87 - (v90 & 0xFFFFFFC0) + 32) >> 6);
  v97 = v91 / 64 - (v92 >> 6) + ((int)(v91 - (v94 & 0xFFFFFFC0) + 32) >> 6);
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  if ((a7 & 0x40) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (*((_QWORD *)a2 + 33))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
  }
  WebCore::operator<<((uint64_t)this);
  if (v88 >= 1 && v65 >= 1)
  {
    if (v143 > v145 || v142 + v143 < v145 + v88 || v144 > v146 || v141 + v144 < v146 + v65)
    {
      v98 = WTF::TextStream::operator<<();
      WebCore::operator<<(v98);
    }
    if (v95 > v145 || v96 + v95 < v145 + v88 || v93 > v146 || v97 + v93 < v146 + v65)
    {
      v99 = WTF::TextStream::operator<<();
      WebCore::operator<<(v99);
    }
  }
  v100 = a7;
  if ((*(_BYTE *)(*((_QWORD *)a2 + 4) + 22) & 1) != 0)
  {
    v101 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)a2 + 33);
    if (v101)
    {
      if (*((_DWORD *)v101 + 8)
         + (*(unsigned int (**)(_QWORD))(*(_QWORD *)v101 + 416))(*((_QWORD *)a2 + 33)))
      {
        WTF::TextStream::operator<<();
        (*(void (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v101 + 416))(v101);
        WTF::TextStream::operator<<();
      }
      if (((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v101 + 416))(v101)
          + ((unint64_t)*((unsigned int *)v101 + 9) << 32)) >> 32)
      {
        WTF::TextStream::operator<<();
        (*(void (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v101 + 416))(v101);
        WTF::TextStream::operator<<();
      }
      v102 = (WebCore::RenderBox *)*((_QWORD *)a2 + 4);
      if (v102 && (*((_BYTE *)v102 + 45) & 4) != 0)
      {
        v103 = WebCore::RenderBox::clientWidth(v102);
        v105 = ((int)(v103 - (v104 & 0xFFFFFFC0) + 32) >> 6) + v103 / 64;
        if (*((_BYTE *)v101 + 76))
          WebCore::RenderLayerScrollableArea::computeScrollDimensions(v101);
        if (v105 != *((_DWORD *)v101 + 22))
        {
          WTF::TextStream::operator<<();
          if (*((_BYTE *)v101 + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions(v101);
          WTF::TextStream::operator<<();
        }
      }
      v106 = (WebCore::RenderBox *)*((_QWORD *)a2 + 4);
      if (v106 && (*((_BYTE *)v106 + 45) & 4) != 0)
      {
        v107 = WebCore::RenderBox::clientHeight(v106);
        v109 = ((int)(v107 - (v108 & 0xFFFFFFC0) + 32) >> 6) + v107 / 64;
        if (*((_BYTE *)v101 + 76))
          WebCore::RenderLayerScrollableArea::computeScrollDimensions(v101);
        if (v109 != *((_DWORD *)v101 + 23))
        {
          WTF::TextStream::operator<<();
          if (*((_BYTE *)v101 + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions(v101);
          WTF::TextStream::operator<<();
        }
      }
    }
  }
  if (a6 == -1 || a6 == 1)
    WTF::TextStream::operator<<();
  if ((v100 & 4) != 0)
  {
    if (*((_QWORD *)a2 + 32))
    {
      WTF::TextStream::operator<<();
      v115 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 24) + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v116 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v115 + 50);
      if (!v116)
      {
        v137 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v116 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v137, v115);
        v138 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v115 + 50);
        *((_QWORD *)v115 + 50) = v116;
        if (v138)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v138);
          WTF::fastFree(v139, v140);
          v116 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v115 + 50);
        }
      }
      v117 = WebCore::RenderLayerCompositor::reasonsForCompositing(v116, a2);
      WTF::TextStream::operator<<();
      if (v117)
      {
        WebCore::operator<<();
        for (j = (v117 - 1) & v117; j; j &= j - 1)
        {
          WTF::TextStream::operator<<();
          WebCore::operator<<();
        }
      }
      WTF::TextStream::operator<<();
      v119 = WTF::TextStream::operator<<();
      v150 = *(_OWORD *)(*((_QWORD *)a2 + 32) + 176);
      WebCore::operator<<(v119);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      goto LABEL_143;
    }
    v125 = *((_QWORD *)a2 + 10);
    if (v125 && *(_QWORD *)(v125 + 8))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
LABEL_143:
      WTF::TextStream::operator<<();
    }
  }
  v126 = *((_QWORD *)a2 + 3);
  if ((v126 & 0x800000000000) != 0 && (v126 & 0xA) != 0)
    WTF::TextStream::operator<<();
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 88) + 40) + 636) & 0x1F00000) != 0x100000)
  {
    WTF::TextStream::operator<<();
    v127 = *((_QWORD *)a2 + 3);
    if ((v127 & 0x3C0000000000) != 0)
    {
      v128 = (&WebCore::blendOperatorNames)[2 * ((v127 >> 41) & 0x1F) - 1];
      if (v128)
      {
        if (v128 == (char *)1)
        {
          v129 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v129 = (WTF::StringImpl *)v150;
        }
        v149 = v129;
      }
      else
      {
        v149 = 0;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    WTF::TextStream::operator<<();
    v131 = v149;
    if (v149)
    {
      if (*(_DWORD *)v149 == 2)
      {
LABEL_170:
        WTF::StringImpl::destroy(v131, v130);
        return WTF::TextStream::operator<<();
      }
      *(_DWORD *)v149 -= 2;
    }
  }
  return WTF::TextStream::operator<<();
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF **v5;
  uint64_t v6;
  unsigned int ***v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  WTF *v15;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF **)(a1 + 24 * i);
      if (*v5 != (WTF *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (unsigned int ***)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v9 = *v7;
          v10 = (uint64_t)&(*v7)[v8];
          do
          {
            v11 = *v9;
            *v9 = 0;
            if (v11)
            {
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, v11);
                WTF::fastFree((WTF *)v11, a2);
              }
            }
            ++v9;
          }
          while (v9 != (unsigned int **)v10);
        }
        v14 = (WTF *)*v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v14, a2);
        }
        v15 = *v5;
        *v5 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, a2);
          else
            --*(_DWORD *)v15;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebCore::ImageQualityController>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  WebCore::TimerBase *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  if (a2)
  {
    a2[2] = off_1E33DC988;
    v3 = (WebCore::TimerBase *)(a2 + 2);
    v4 = a2[8];
    a2[8] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WebCore::TimerBase::~TimerBase(v3);
    v6 = a2[1];
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = a2[1];
        do
        {
          v9 = *(WTF **)v8;
          if (*(_QWORD *)v8 != -1)
          {
            v10 = *(_QWORD *)(v8 + 8);
            if (v10)
            {
              WTF::fastFree((WTF *)(v10 - 16), v5);
              v9 = *(WTF **)v8;
            }
            *(_QWORD *)v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
                WTF::fastFree(v9, v5);
              else
                --*(_DWORD *)v9;
            }
          }
          v8 += 16;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 16), v5);
    }
    WTF::fastFree((WTF *)a2, v5);
  }
}

_BYTE *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::reinsert(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = 0;
  v6 = 9
     * ((~(*(unsigned __int8 *)a2 << 15) + *(unsigned __int8 *)a2) ^ ((~(*(unsigned __int8 *)a2 << 15)
                                                                     + *(unsigned __int8 *)a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v7 ^ HIWORD(v7);
  do
  {
    v9 = v8 & v4;
    v10 = (_BYTE *)(a1 + 176 * (v8 & v4));
    v8 = ++v5 + (v8 & v4);
  }
  while (*v10 != 255);
  v11 = a1 + 176 * v9;
  WebCore::RenderTheme::ColorCache::~ColorCache((WebCore::RenderTheme::ColorCache *)(v11 + 8), a2);
  *v10 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v12 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v11 + 8) = v12;
  v13 = a2[2];
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v13;
    a2[2] = 0;
  }
  v14 = a1 + 176 * v9;
  *(_QWORD *)(v14 + 24) = 0;
  v15 = (_QWORD *)(v14 + 24);
  v16 = a2[3];
  if (v16)
  {
    *v15 = v16;
    a2[3] = 0;
  }
  v17 = a1 + 176 * v9;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = (_QWORD *)(v17 + 32);
  v19 = a2[4];
  if (v19)
  {
    *v18 = v19;
    a2[4] = 0;
  }
  v20 = a1 + 176 * v9;
  *(_QWORD *)(v20 + 40) = 0;
  v21 = (_QWORD *)(v20 + 40);
  v22 = a2[5];
  if (v22)
  {
    *v21 = v22;
    a2[5] = 0;
  }
  v23 = a1 + 176 * v9;
  *(_QWORD *)(v23 + 48) = 0;
  v24 = (_QWORD *)(v23 + 48);
  v25 = a2[6];
  if (v25)
  {
    *v24 = v25;
    a2[6] = 0;
  }
  v26 = a1 + 176 * v9;
  *(_QWORD *)(v26 + 56) = 0;
  v27 = (_QWORD *)(v26 + 56);
  v28 = a2[7];
  if (v28)
  {
    *v27 = v28;
    a2[7] = 0;
  }
  v29 = a1 + 176 * v9;
  *(_QWORD *)(v29 + 64) = 0;
  v30 = (_QWORD *)(v29 + 64);
  v31 = a2[8];
  if (v31)
  {
    *v30 = v31;
    a2[8] = 0;
  }
  v32 = a1 + 176 * v9;
  *(_QWORD *)(v32 + 72) = 0;
  v33 = (_QWORD *)(v32 + 72);
  v34 = a2[9];
  if (v34)
  {
    *v33 = v34;
    a2[9] = 0;
  }
  v35 = a1 + 176 * v9;
  *(_QWORD *)(v35 + 80) = 0;
  v36 = (_QWORD *)(v35 + 80);
  v37 = a2[10];
  if (v37)
  {
    *v36 = v37;
    a2[10] = 0;
  }
  v38 = a1 + 176 * v9;
  *(_QWORD *)(v38 + 88) = 0;
  v39 = (_QWORD *)(v38 + 88);
  v40 = a2[11];
  if (v40)
  {
    *v39 = v40;
    a2[11] = 0;
  }
  v41 = a1 + 176 * v9;
  *(_QWORD *)(v41 + 96) = 0;
  v42 = (_QWORD *)(v41 + 96);
  v43 = a2[12];
  if (v43)
  {
    *v42 = v43;
    a2[12] = 0;
  }
  v44 = a1 + 176 * v9;
  *(_QWORD *)(v44 + 104) = 0;
  v45 = (_QWORD *)(v44 + 104);
  v46 = a2[13];
  if (v46)
  {
    *v45 = v46;
    a2[13] = 0;
  }
  v47 = a1 + 176 * v9;
  *(_QWORD *)(v47 + 112) = 0;
  v48 = (_QWORD *)(v47 + 112);
  v49 = a2[14];
  if (v49)
  {
    *v48 = v49;
    a2[14] = 0;
  }
  v50 = a1 + 176 * v9;
  *(_QWORD *)(v50 + 120) = 0;
  v51 = (_QWORD *)(v50 + 120);
  v52 = a2[15];
  if (v52)
  {
    *v51 = v52;
    a2[15] = 0;
  }
  v53 = a1 + 176 * v9;
  *(_QWORD *)(v53 + 128) = 0;
  v54 = (_QWORD *)(v53 + 128);
  v55 = a2[16];
  if (v55)
  {
    *v54 = v55;
    a2[16] = 0;
  }
  v56 = a1 + 176 * v9;
  *(_QWORD *)(v56 + 136) = 0;
  v57 = (_QWORD *)(v56 + 136);
  v58 = a2[17];
  if (v58)
  {
    *v57 = v58;
    a2[17] = 0;
  }
  v59 = a1 + 176 * v9;
  *(_QWORD *)(v59 + 144) = 0;
  v60 = (_QWORD *)(v59 + 144);
  v61 = a2[18];
  if (v61)
  {
    *v60 = v61;
    a2[18] = 0;
  }
  v62 = a1 + 176 * v9;
  *(_QWORD *)(v62 + 152) = 0;
  v63 = (_QWORD *)(v62 + 152);
  v64 = a2[19];
  if (v64)
  {
    *v63 = v64;
    a2[19] = 0;
  }
  v65 = a1 + 176 * v9;
  *(_QWORD *)(v65 + 160) = 0;
  v66 = (_QWORD *)(v65 + 160);
  v67 = a2[20];
  if (v67)
  {
    *v66 = v67;
    a2[20] = 0;
  }
  v68 = a1 + 176 * v9;
  *(_QWORD *)(v68 + 168) = 0;
  v69 = (_QWORD *)(v68 + 168);
  v70 = a2[21];
  if (v70)
  {
    *v69 = v70;
    a2[21] = 0;
  }
  return v10;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  unsigned int ***v15;
  uint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  WTF *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int ***v37;
  unsigned int **v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int **v48;
  uint64_t v49;
  unsigned int **v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WTF *v55;
  WTF *v56;
  WTF **result;
  uint64_t v58;
  uint64_t v59;
  WTF **v62;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v58 = v5;
    v59 = v4;
    do
    {
      v12 = (WTF **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF *)-1)
      {
        if (v13)
        {
          v22 = *a1;
          v62 = v10;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v26 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v23 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v10 = (WTF **)(v22 + 24 * v29);
            v29 = (v29 + v30++) & v23;
          }
          while (*v10);
          v32 = v31;
          v33 = v22 + 24 * v31;
          v36 = *(_DWORD *)(v33 + 20);
          v35 = (_DWORD *)(v33 + 20);
          v34 = v36;
          v37 = (unsigned int ***)(v35 - 3);
          if (v36)
          {
            v38 = *v37;
            v39 = (uint64_t)&(*v37)[v34];
            do
            {
              v40 = *v38;
              *v38 = 0;
              if (v40)
              {
                do
                {
                  v41 = __ldaxr(v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, v40));
                if (!v42)
                {
                  atomic_store(1u, v40);
                  WTF::fastFree((WTF *)v40, v8);
                }
              }
              ++v38;
            }
            while (v38 != (unsigned int **)v39);
          }
          v43 = (WTF *)*v37;
          if (*v37)
          {
            *v37 = 0;
            *(_DWORD *)(v22 + 24 * v32 + 16) = 0;
            WTF::fastFree(v43, v8);
          }
          v44 = *v10;
          *v10 = 0;
          v4 = v59;
          if (v44)
          {
            if (*(_DWORD *)v44 == 1)
              WTF::fastFree(v44, v8);
            else
              --*(_DWORD *)v44;
          }
          v45 = *v12;
          *v12 = 0;
          *v10 = v45;
          v46 = v59 + 24 * v9;
          *v37 = 0;
          *(_QWORD *)(v35 - 1) = 0;
          v48 = *(unsigned int ***)(v46 + 8);
          v47 = v46 + 8;
          *(_QWORD *)v47 = 0;
          *v37 = v48;
          LODWORD(v45) = *(_DWORD *)(v47 + 8);
          *(_DWORD *)(v47 + 8) = 0;
          *(_DWORD *)(v22 + 24 * v32 + 16) = (_DWORD)v45;
          LODWORD(v45) = *(_DWORD *)(v47 + 12);
          *(_DWORD *)(v47 + 12) = 0;
          *v35 = (_DWORD)v45;
          v49 = *(unsigned int *)(v47 + 12);
          v11 = v58;
          if ((_DWORD)v49)
          {
            v50 = *(unsigned int ***)v47;
            v51 = *(_QWORD *)v47 + 8 * v49;
            do
            {
              v52 = *v50;
              *v50 = 0;
              if (v52)
              {
                do
                {
                  v53 = __ldaxr(v52);
                  v54 = v53 - 1;
                }
                while (__stlxr(v54, v52));
                if (!v54)
                {
                  atomic_store(1u, v52);
                  WTF::fastFree((WTF *)v52, v8);
                }
              }
              ++v50;
            }
            while (v50 != (unsigned int **)v51);
          }
          v55 = *(WTF **)v47;
          if (*(_QWORD *)v47)
          {
            *(_QWORD *)v47 = 0;
            *(_DWORD *)(v47 + 8) = 0;
            WTF::fastFree(v55, v8);
          }
          v56 = *v12;
          *v12 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 1)
              WTF::fastFree(v56, v8);
            else
              --*(_DWORD *)v56;
          }
          if (v12 != a3)
            v10 = v62;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (unsigned int ***)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = (uint64_t)&(*v15)[v16];
            do
            {
              v19 = *v17;
              *v17 = 0;
              if (v19)
              {
                do
                {
                  v20 = __ldaxr(v19);
                  v21 = v20 - 1;
                }
                while (__stlxr(v21, v19));
                if (!v21)
                {
                  atomic_store(1u, v19);
                  WTF::fastFree((WTF *)v19, v8);
                }
              }
              ++v17;
            }
            while (v17 != (unsigned int **)v18);
          }
          v24 = (WTF *)*v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v24, v8);
          }
          v25 = *v12;
          *v12 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
              WTF::fastFree(v25, v8);
            else
              --*(_DWORD *)v25;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

_QWORD *WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::PeekType>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 24;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 24;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>(unsigned int *a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (result[2] >= a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = result[3];
  if (a2 >= 0xB)
  {
    if (a2 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
    v6 = result;
    v3[2] = v2;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_18;
    goto LABEL_7;
  }
  v6 = result + 4;
  *(_QWORD *)result = result + 4;
  result[2] = 10;
  if ((_DWORD)v5)
  {
LABEL_7:
    v7 = (unsigned int **)v4;
    do
    {
      v8 = *v7;
      *v7 = 0;
      *(_QWORD *)v6 = v8;
      v9 = v7[1];
      v7[1] = 0;
      *((_QWORD *)v6 + 1) = v9;
      v10 = v7[1];
      v7[1] = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, (void *)a2);
        }
      }
      result = *v7;
      *v7 = 0;
      if (result)
      {
        if (*result == 1)
          result = (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
        else
          --*result;
      }
      v6 += 4;
      v7 += 2;
    }
    while (v7 != (unsigned int **)((char *)v4 + 16 * v5));
  }
LABEL_18:
  if (v3 + 4 != (unsigned int *)v4 && v4 != 0)
  {
    if (*(WTF **)v3 == v4)
    {
      *(_QWORD *)v3 = 0;
      v3[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::contains<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = *(_QWORD *)(result + 8 * v6);
      if (!v8)
        break;
      if (v8 != -1 && v8 == a2)
        return 1;
      v6 = (v6 + i) & v2;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RenderView::resumePausedImageAnimationsIfNeeded(WebCore::IntRect const&)::$_0,void,WebCore::SVGSVGElement &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;

  result = WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a2);
  if (result)
  {
    v5 = result;
    do
      v6 = __ldaxr((unsigned int *)result);
    while (__stlxr(v6 + 1, (unsigned int *)result));
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      result = WebCore::SVGSVGElement::resumePausedAnimationsIfNeeded((WebCore::SVGSVGElement *)result, *(const WebCore::IntRect **)(a1 + 8));
      if ((_DWORD)result)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_QWORD *)(v5 + 8);
        v9 = *(unsigned int *)(v7 + 12);
        if ((_DWORD)v9 == *(_DWORD *)(v7 + 8))
        {
          v10 = v9 + (v9 >> 2);
          if (v10 >= 0x10)
            v11 = v10 + 1;
          else
            v11 = 16;
          if (v11 <= v9 + 1)
            v12 = v9 + 1;
          else
            v12 = v11;
          if (v12 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v13 = *(void **)v7;
          v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
          *(_DWORD *)(v7 + 8) = v12;
          *(_QWORD *)v7 = v14;
          result = (uint64_t)memcpy(v14, v13, 8 * v9);
          if (v13)
          {
            if (*(void **)v7 == v13)
            {
              *(_QWORD *)v7 = 0;
              *(_DWORD *)(v7 + 8) = 0;
            }
            result = WTF::fastFree((WTF *)v13, v4);
          }
          v9 = *(unsigned int *)(v7 + 12);
          v15 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
        }
        else
        {
          v15 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
        }
        *(_DWORD *)(v8 + 24) += 2;
        *v15 = v8;
        *(_DWORD *)(v7 + 12) = v9 + 1;
      }
    }
    do
    {
      v16 = __ldaxr((unsigned int *)v5);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v5));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v5);
      v18 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v18));
      v19 = *(WTF **)(v5 + 16);
      if (v19)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v19, v4);
      }
      return WTF::fastFree((WTF *)v5, v4);
    }
  }
  return result;
}

void WebCore::RenderWidget::willBeDestroyed(WebCore::RenderWidget *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::AXObjectCache *v7;
  uint64_t *v8;
  uint64_t v9;
  WebCore::RenderObject *v10;
  int v11;
  uint64_t v12;

  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v7 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8));
    if (v7)
    {
      v8 = (uint64_t *)v7;
      ++*((_DWORD *)v7 + 2);
      v9 = *((_QWORD *)this + 4);
      if (v9)
        v10 = *(WebCore::RenderObject **)(v9 + 8);
      else
        v10 = 0;
      WebCore::AXObjectCache::childrenChanged(v7, v10, 0);
      WebCore::AXObjectCache::remove(v8, this);
      v11 = *((_DWORD *)v8 + 2);
      if (!v11)
      {
        __break(0xC471u);
        return;
      }
      *((_DWORD *)v8 + 2) = v11 - 1;
    }
  }
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (*(_BYTE *)(v2 + 3405))
  {
    if (!*(_BYTE *)(v2 + 3362))
    {
      v6 = *((_QWORD *)this + 29);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 160))(v6);
    }
  }
  v12 = 0;
  WebCore::RenderWidget::setWidget((uint64_t)this, &v12);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        (*(void (**)(uint64_t, WebCore::RenderWidget *))(*(_QWORD *)v5 + 672))(v5, this);
    }
  }
  WebCore::RenderBox::willBeDestroyed(this, v3);
}

void WebCore::RenderWidget::~RenderWidget(WebCore::RenderWidget *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void `non-virtual thunk to'WebCore::RenderWidget::~RenderWidget(WebCore::RenderWidget *this, void *a2)
{
  WebCore::RenderLayerModelObject *v3;
  _DWORD *v4;
  WTF *v5;

  *((_QWORD *)this - 27) = off_1E3439928;
  v3 = (WebCore::RenderWidget *)((char *)this - 216);
  *(_QWORD *)this = &unk_1E3439FE8;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)v3 = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(v3, a2);
}

{
  WebCore::RenderLayerModelObject *v3;
  _DWORD *v4;
  WTF *v5;
  void *v6;

  *((_QWORD *)this - 27) = off_1E3439928;
  v3 = (WebCore::RenderWidget *)((char *)this - 216);
  *(_QWORD *)this = &unk_1E3439FE8;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *((_QWORD *)this - 27) = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(v3, a2);
  if (*((_DWORD *)this - 50))
  {
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v6);
  }
}

uint64_t WebCore::RenderWidget::layout(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(this + 20) = v1;
  if (this && (*(_BYTE *)(this + 45) & 2) == 0)
  {
    *(_WORD *)(this + 69) &= ~1u;
    *(_WORD *)(this + 76) = *(_WORD *)(this + 76) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *(_DWORD *)(this + 20) = v1 & 0xFFDFFE07;
  return this;
}

uint64_t WebCore::RenderWidget::setOverlapTestResult(WebCore::RenderWidget *this, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 29);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3) & 1) != 0)
    return WebCore::LocalFrameView::setIsOverlapped(v3, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RenderWidget::setOverlapTestResult(WebCore::RenderWidget *this, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 2);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3) & 1) != 0)
    return WebCore::LocalFrameView::setIsOverlapped(v3, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderWidget::windowClipRect(WebCore::RenderWidget *this, uint64_t a2, const WebCore::IntRect *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;

  v4 = WebCore::ScrollView::contentsToWindow(*(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)+ 8)+ 1944)+ 248), (WebCore::RenderWidget *)((char *)this + 240), a3);
  v6 = v5;
  v7 = WebCore::LocalFrameView::windowClipRect(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                       + 1944)
                                                                           + 248));
  if ((int)v4 <= (int)v7)
    LODWORD(v10) = v7;
  else
    LODWORD(v10) = v4;
  if (SHIDWORD(v4) <= SHIDWORD(v7))
    v11 = HIDWORD(v7);
  else
    v11 = HIDWORD(v4);
  v12 = v6 + v4;
  if (v8 + (int)v7 < (int)v6 + (int)v4)
    v12 = v8 + v7;
  v13 = HIDWORD(v6) + HIDWORD(v4);
  if (v9 + HIDWORD(v7) < HIDWORD(v6) + HIDWORD(v4))
    v13 = v9 + HIDWORD(v7);
  v14 = (int)v10 < v12 && v11 < v13;
  if (v14)
    v10 = v10;
  else
    v10 = 0;
  if (v14)
    v15 = v11;
  else
    v15 = 0;
  return v10 | (v15 << 32);
}

WebCore::RenderObject *WebCore::RenderWidget::setSelectionState(WebCore::RenderObject *this, uint64_t a2)
{
  WebCore::RenderObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = this;
  switch((_DWORD)a2)
  {
    case 1:
      v4 = *((_DWORD *)this + 5);
      v5 = v4 & 0xE000000;
      v6 = 100663296;
      break;
    case 2:
      v4 = *((_DWORD *)this + 5);
      if ((v4 & 0xE000000) != 0)
        goto LABEL_15;
      goto LABEL_11;
    case 3:
      v4 = *((_DWORD *)this + 5);
      v5 = v4 & 0xE000000;
      v6 = 0x2000000;
      break;
    default:
      v4 = *((_DWORD *)this + 5);
      goto LABEL_11;
  }
  if (v5 != v6)
  {
LABEL_11:
    v7 = (a2 & 7) << 25;
    goto LABEL_12;
  }
  v7 = 0x8000000;
LABEL_12:
  *((_DWORD *)this + 5) = v4 & 0xF1FFFFFF | v7;
  this = WebCore::RenderObject::containingBlock(this);
  if (this && *((_BYTE *)this + 46) != 49)
    this = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 496))(this, a2);
LABEL_15:
  if (*((_QWORD *)v3 + 29))
    return (WebCore::RenderObject *)WebCore::RenderReplaced::isSelected(v3);
  return this;
}

uint64_t WebCore::RenderWidget::nodeAtPoint(WebCore::RenderBox *this, uint64_t a2, _QWORD *a3, WebCore::HitTestLocation *a4, const WebCore::LayoutPoint *a5, unsigned int a6)
{
  _BOOL4 v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int32x2_t v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  uint64_t v43;
  _BOOL8 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  signed int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  const WebCore::LayoutPoint *v62;
  _QWORD *v63;
  int32x2_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  int32x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  int32x2_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int16 v85;

  if ((*(_DWORD *)a2 & 0x800) != 0)
  {
    v12 = 1;
  }
  else if ((*(_DWORD *)a2 & 0x1000) != 0)
  {
    v64 = *(int32x2_t *)a2;
    LOBYTE(v65) = 1;
    v12 = WebCore::RenderElement::visibleToHitTesting((uint64_t)this, &v64);
  }
  else
  {
    v12 = 0;
  }
  v13 = (_QWORD *)*((_QWORD *)this + 29);
  if (v13)
  {
    v14 = (*(uint64_t (**)(_QWORD))(*v13 + 72))(*((_QWORD *)this + 29));
    if (!v14)
      v13 = 0;
    if ((v14 & v12) == 1)
    {
      v15 = *(_QWORD *)(v13[41] + 296);
      if (v15)
      {
        if (*(_QWORD *)(v15 + 1944))
        {
          v17 = *((_DWORD *)this + 38);
          v16 = *((_DWORD *)this + 39);
          v18 = *(_DWORD *)a5 + v17;
          v63 = a3;
          if (__OFADD__(*(_DWORD *)a5, v17))
            v18 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
          v62 = a5;
          v19 = *((_DWORD *)a5 + 1);
          v20 = a6;
          v21 = v19 + v16;
          if (__OFADD__(v19, v16))
            v21 = (v19 >> 31) + 0x7FFFFFFF;
          v22 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
          v23 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
          v24 = v22 + v23;
          if (__OFADD__(v22, v23))
            v24 = (v22 >> 31) + 0x7FFFFFFF;
          v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
          v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
          v27 = v25 + v26;
          if (__OFADD__(v25, v26))
            v27 = (v25 >> 31) + 0x7FFFFFFF;
          v28 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v13[8] + 832))(v13 + 8, 0, 1);
          v29 = (_DWORD)v28 << 6;
          if ((int)v28 < -33554432)
            v29 = 0x80000000;
          if ((int)v28 <= 0x1FFFFFF)
            v30 = v29;
          else
            v30 = 0x7FFFFFFF;
          v31 = HIDWORD(v28) << 6;
          if (SHIDWORD(v28) < -33554432)
            v31 = 0x80000000;
          if (SHIDWORD(v28) > 0x1FFFFFF)
            v31 = 0x7FFFFFFF;
          v32 = v24 - v30;
          if (__OFSUB__(v24, v30))
            v32 = (v24 >> 31) + 0x7FFFFFFF;
          a6 = v20;
          v33 = __OFSUB__(v27, v31);
          v34 = v27 - v31;
          a5 = v62;
          if (v33)
            v34 = (v27 >> 31) + 0x7FFFFFFF;
          if (v18 == 0x80000000)
            v35 = 0x7FFFFFFF;
          else
            v35 = -v18;
          if (v21 == 0x80000000)
            v36 = 0x7FFFFFFF;
          else
            v36 = -v21;
          v33 = __OFSUB__(v35, v32);
          v37 = v35 - v32;
          if (v33)
            v37 = (v35 >> 31) + 0x7FFFFFFF;
          a3 = v63;
          v33 = __OFSUB__(v36, v34);
          v38 = v36 - v34;
          if (v33)
            v38 = (v36 >> 31) + 0x7FFFFFFF;
          v64.i32[0] = v37;
          v64.i32[1] = v38;
          v39 = *(int32x2_t *)a4;
          v81 = *(_OWORD *)((char *)a4 + 8);
          v40 = *((_QWORD *)a4 + 3);
          v80 = v39;
          v82 = v40;
          v41 = *((_OWORD *)a4 + 3);
          v83 = *((_OWORD *)a4 + 2);
          v84 = v41;
          v85 = *((_WORD *)a4 + 32);
          WebCore::HitTestLocation::move((WebCore::HitTestLocation *)&v80, &v64);
          v78 = *(_DWORD *)a2 | 0x2000;
          v79 = 1;
          v64 = v80;
          v65 = v81;
          v66 = v82;
          v67 = v83;
          v68 = v84;
          v69 = v85;
          v70 = 0;
          v71 = 0;
          v77 = 0;
          v72 = v80;
          v73 = 0;
          v76 = 0;
          v43 = *(_QWORD *)(v13[41] + 296);
          v44 = v43 != 0;
          v74 = 0;
          v75 = 0;
          if (v43)
          {
            v45 = WebCore::Document::hitTest(v43, &v78, (WebCore::HitTestingTransformState *)&v80, (uint64_t)&v64);
            v46 = v45;
            if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
            {
              WebCore::HitTestResult::append(v63, (uint64_t)&v64);
              if (!v46)
                goto LABEL_43;
            }
            else
            {
              if (!v45)
              {
LABEL_43:
                WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v64, v42);
                goto LABEL_44;
              }
              WebCore::HitTestResult::operator=((uint64_t)v63, (uint64_t)&v64);
            }
          }
          WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v64, v42);
          return v44;
        }
      }
    }
  }
LABEL_44:
  v47 = a3[9];
  v48 = WebCore::RenderBox::nodeAtPoint(this, (int *)a2, (WebCore::HitTestResult *)a3, (float32x4_t *)a4, a5, a6);
  if ((v48 & 1) != 0)
  {
    if (v47)
      return 1;
  }
  else
  {
    v44 = 0;
    if (!*((_BYTE *)a3 + 64) || v47)
      return v44;
  }
  v50 = a3[9];
  v51 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 192))(v51) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19647E04CLL);
  }
  if (v50 == v51)
  {
    v52 = WebCore::RenderBox::contentBoxRect(this);
    v55 = *((_DWORD *)a3 + 24);
    if (v55 < (int)v52)
    {
      v61 = 0;
    }
    else
    {
      v56 = *((_DWORD *)a3 + 25);
      v57 = v52 + v53;
      if (__OFADD__((_DWORD)v52, v53))
        v57 = (v52 >> 31) + 0x7FFFFFFF;
      v58 = (HIDWORD(v52) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v52), v54))
        v58 = HIDWORD(v52) + v54;
      v59 = v58 > v56;
      v60 = v56 >= SHIDWORD(v52) && v59;
      v61 = v57 > v55 && v60;
    }
    *((_BYTE *)a3 + 120) = v61;
  }
  return v48;
}

BOOL WebCore::RenderElement::visibleToHitTesting(uint64_t a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2[8])
    v2 = a2[4] == 0;
  else
    v2 = 0;
  if ((v2 || (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) == 0) && (*(_BYTE *)(a1 + 120) & 0x30) == 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 0x18) == 0)
    {
      if (a2[8] && (*a2 & 0x10) != 0)
        return 1;
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
      if (!*(_BYTE *)(v6 + 3441) || *(_QWORD *)(v6 + 1272) == v5)
      {
        v7 = (*(_BYTE *)(a1 + 45) & 2) != 0 ? 0 : a1;
        if (v3)
        {
          if ((*(_BYTE *)(a1 + 45) & 2) != 0)
            v7 = *(_QWORD *)(v3 + 8);
        }
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 1) == 0)
          return (*(_WORD *)(v7 + 124) & 0x3C0) != 0;
      }
    }
  }
  return 0;
}

uint64_t WebCore::RenderWidget::requiresLayer(WebCore::RenderWidget *this, WTF::StringImpl *a2)
{
  if ((WebCore::RenderBox::requiresLayer(this, a2) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(WebCore::RenderWidget *))(*(_QWORD *)this + 1696))(this);
}

uint64_t WebCore::TextDecorationPainter::stylesForRenderer(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  if (a3)
  {
    v6 = a2;
    v7 = result;
    result = WebCore::collectStylesForRenderer((int *)result, a2, a3, 0, 0);
    if (a4)
      result = WebCore::collectStylesForRenderer((int *)v7, v6, a3, 1, 0);
    if ((*(_BYTE *)(v6 + 45) & 2) != 0)
      v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
    *(_BYTE *)(v7 + 48) = (*(_DWORD *)(*(_QWORD *)(v6 + 104) + 232) >> 28) & 3;
  }
  return result;
}

void WebCore::StyledMarkedText::subdivideAndResolve(unsigned int *a1, unsigned int *a2, WebCore::RenderText *a3, int a4, WebCore::PaintInfo *a5)
{
  uint64_t v6;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *LineStyle;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  __int128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WebCore::RenderElement *v39;
  __int128 v40;
  WTF::StringImpl *v41;
  const WebCore::MarkedText *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  WTF::StringImpl *v49;
  unsigned int v50[4];
  _BYTE v51[24];
  WTF::StringImpl *v52;
  int v53;
  _BYTE v54[41];
  int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  int v65;
  unsigned int *v66[23];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[20];
  int v71;
  WTF::StringImpl *v72;
  int v73;
  unsigned int *v74[25];

  v74[23] = *(unsigned int **)MEMORY[0x1E0C80C00];
  v6 = a2[3];
  if ((_DWORD)v6)
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v11 = 40 * v6;
    v12 = (_QWORD *)(*(_QWORD *)a2 + 24);
    do
    {
      if (*v12)
        WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add(&v67, (uint64_t)v12, (uint64_t)v51);
      v12 += 5;
      v11 -= 40;
    }
    while (v11);
    v13 = *((_QWORD *)a3 + 4);
    if ((a4 & 1) != 0)
    {
      if (v13)
        v39 = *(WebCore::RenderElement **)(v13 + 8);
      else
        v39 = 0;
      LineStyle = WebCore::RenderElement::firstLineStyle(v39, (WTF::StringImpl *)a2);
    }
    else
    {
      if (v13)
        v13 = *(_QWORD *)(v13 + 8);
      LineStyle = (char *)(v13 + 80);
    }
    WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)v66, a3, (const WebCore::RenderStyle *)LineStyle, a4, a5);
    if (a2[3] != 1 || (v15 = *(_QWORD *)a2, *(_BYTE *)(*(_QWORD *)a2 + 12)))
    {
      WebCore::MarkedText::subdivide((uint64_t)a2, 0, (uint64_t)v70);
      v31 = *(unsigned int *)&v70[12];
      if (*(_DWORD *)&v70[12])
      {
        v32 = (unsigned __int8 *)(*(_QWORD *)v70 + 12);
        v33 = *(unsigned int *)&v70[12];
        do
        {
          v34 = *v32;
          v32 += 40;
          if (v34 == 7)
          {
            WebCore::orderHighlights(v68, (unint64_t)v70);
            *(_QWORD *)v51 = v66;
            *(_QWORD *)&v51[8] = a3;
            *(_QWORD *)&v51[16] = LineStyle;
            v52 = a5;
            WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::StyledMarkedText::subdivideAndResolve(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderText const&,BOOL,WebCore::PaintInfo const&)::$_0,WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)v50, (uint64_t)v70, (const WebCore::StyledMarkedText::Style **)v51);
            WebCore::coalesceAdjacentWithSameRanges(a1, (uint64_t)v50);
            WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v50, v38);
            goto LABEL_45;
          }
          --v33;
        }
        while (v33);
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        if (v31 >= 0x124924A)
        {
          __break(0xC471u);
          JUMPOUT(0x19647E7C0);
        }
        v35 = 224 * v31;
        v36 = WTF::fastMalloc((WTF *)(224 * v31));
        a1[2] = (613566757 * (unint64_t)(v35 >> 5)) >> 32;
        *(_QWORD *)a1 = v36;
        if (!*(_DWORD *)&v70[12])
          goto LABEL_66;
        v37 = v36;
        WebCore::resolveStyleForMarkedText((WebCore *)v51, *(const WebCore::MarkedText **)v70, (const WebCore::StyledMarkedText::Style *)v66, a3, (const WebCore::RenderStyle *)LineStyle, a5);
        if (v35 >= 0xE0)
        {
          *(_DWORD *)v37 = 0;
          v40 = *(_OWORD *)&v51[4];
          *(_DWORD *)(v37 + 20) = *(_DWORD *)&v51[20];
          *(_OWORD *)(v37 + 4) = v40;
          v41 = v52;
          v52 = 0;
          *(_QWORD *)(v37 + 24) = v41;
          *(_DWORD *)(v37 + 32) = v53;
          WebCore::StyledMarkedText::Style::Style(v37 + 40, (uint64_t)v54);
          a1[3] = 1;
        }
        else
        {
          WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyledMarkedText>(a1, (unint64_t)v51);
        }
        WebCore::StyledMarkedText::~StyledMarkedText((unsigned int **)v51);
        if (*(_DWORD *)&v70[12] != 1)
        {
          v42 = (const WebCore::MarkedText *)(*(_QWORD *)v70 + 40);
          v43 = 40 * *(unsigned int *)&v70[12] - 40;
          while (1)
          {
            v44 = a1[3];
            if (!(_DWORD)v44)
              break;
            v45 = *(_QWORD *)a1;
            v46 = *(_QWORD *)a1 + 224 * (v44 - 1);
            if (*(_DWORD *)(v46 + 4) == *((_DWORD *)v42 + 1) && *(_DWORD *)(v46 + 8) == *((_DWORD *)v42 + 2))
            {
              WebCore::resolveStyleForMarkedText((WebCore *)v51, v42, (const WebCore::StyledMarkedText::Style *)(v45 + 224 * (v44 - 1) + 40), a3, (const WebCore::RenderStyle *)LineStyle, a5);
              WebCore::StyledMarkedText::operator=(v46, (uint64_t)v51);
            }
            else
            {
              WebCore::resolveStyleForMarkedText((WebCore *)v51, v42, (const WebCore::StyledMarkedText::Style *)v66, a3, (const WebCore::RenderStyle *)LineStyle, a5);
              if ((_DWORD)v44 == a1[2])
              {
                WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyledMarkedText>(a1, (unint64_t)v51);
              }
              else
              {
                v47 = v45 + 224 * v44;
                *(_DWORD *)v47 = 0;
                v48 = *(_OWORD *)&v51[4];
                *(_DWORD *)(v47 + 20) = *(_DWORD *)&v51[20];
                *(_OWORD *)(v47 + 4) = v48;
                v49 = v52;
                v52 = 0;
                *(_QWORD *)(v47 + 24) = v49;
                *(_DWORD *)(v47 + 32) = v53;
                WebCore::StyledMarkedText::Style::Style(v47 + 40, (uint64_t)v54);
                a1[3] = v44 + 1;
              }
            }
            WebCore::StyledMarkedText::~StyledMarkedText((unsigned int **)v51);
            v42 = (const WebCore::MarkedText *)((char *)v42 + 40);
            v43 -= 40;
            if (!v43)
              goto LABEL_45;
          }
LABEL_66:
          __break(0xC471u);
          JUMPOUT(0x19647E7B8);
        }
      }
      else
      {
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
LABEL_45:
      WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v70, v30);
    }
    else
    {
      *(_DWORD *)v51 = 0;
      v16 = *(_DWORD *)(v15 + 20);
      *(_OWORD *)&v51[4] = *(_OWORD *)(v15 + 4);
      *(_DWORD *)&v51[20] = v16;
      v17 = *(WTF::StringImpl **)(v15 + 24);
      if (v17)
        *(_DWORD *)v17 += 2;
      v52 = v17;
      v53 = *(_DWORD *)(v15 + 32);
      memset(v54, 0, sizeof(v54));
      v55 = 1082130432;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 1065353216;
      WebCore::StyledMarkedText::Style::operator=((uint64_t *)v54, (unsigned int *)v66);
      *(_DWORD *)v70 = 0;
      *(_OWORD *)&v70[4] = *(_OWORD *)&v51[4];
      v71 = *(_DWORD *)&v51[20];
      v18 = v52;
      if (v52)
        *(_DWORD *)v52 += 2;
      v72 = v18;
      v73 = v53;
      WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)v74, v54);
      *((_QWORD *)a1 + 1) = 0x100000001;
      v19 = WTF::fastMalloc((WTF *)0xE0);
      *(_QWORD *)a1 = v19;
      *(_DWORD *)v19 = 0;
      v20 = *(_OWORD *)&v70[4];
      *(_DWORD *)(v19 + 20) = v71;
      *(_OWORD *)(v19 + 4) = v20;
      v21 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *(_QWORD *)(v19 + 24) = v21;
      *(_DWORD *)(v19 + 32) = v73;
      WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v19 + 40), (const Style *)v74);
      WebCore::StyledMarkedText::Style::~Style(v74);
      v23 = v72;
      v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      WebCore::StyledMarkedText::Style::~Style((unsigned int **)v54);
      v25 = v52;
      v52 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    WebCore::StyledMarkedText::Style::~Style(v66);
    v27 = v68;
    while (v27)
    {
      v28 = (WTF *)v27;
      v27 = *(_QWORD *)(v27 + 16);
      v29 = *(WTF::StringImpl **)v28;
      *(_QWORD *)v28 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v26);
        else
          *(_DWORD *)v29 -= 2;
      }
      WTF::fastFree(v28, v26);
    }
    if (v67)
      WTF::fastFree((WTF *)(v67 - 16), v26);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
  }
}

uint64_t *WebCore::StyledMarkedText::Style::operator=(uint64_t *a1, unsigned int *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;

  v4 = *a1;
  v5 = *(_QWORD *)a2;
  if ((*a1 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) == 0
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v4) != HIBYTE(v5)
      || BYTE6(v4) != BYTE6(v5))
    {
      v28 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
      goto LABEL_6;
    }
  }
  else if (v4 != v5 || (v5 & 0x8000000000000) != 0)
  {
LABEL_6:
    *a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  v7 = a1[1];
  v8 = *((_QWORD *)a2 + 1);
  if ((v7 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) == 0
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v7) != HIBYTE(v8)
      || BYTE6(v7) != BYTE6(v8))
    {
      v31 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, a2);
      }
      goto LABEL_12;
    }
  }
  else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
  {
LABEL_12:
    a1[1] = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  v10 = a1[2];
  v11 = *((_QWORD *)a2 + 2);
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v11 & 0x8000000000000) == 0
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v10) != HIBYTE(v11)
      || BYTE6(v10) != BYTE6(v11))
    {
      v34 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, a2);
      }
      goto LABEL_18;
    }
  }
  else if (v10 != v11 || (v11 & 0x8000000000000) != 0)
  {
LABEL_18:
    a1[2] = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
  }
  v13 = a1[3];
  v14 = *((_QWORD *)a2 + 3);
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v14 & 0x8000000000000) == 0
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v13) != HIBYTE(v14)
      || BYTE6(v13) != BYTE6(v14))
    {
      v37 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, a2);
      }
      goto LABEL_24;
    }
  }
  else if (v13 != v14 || (v14 & 0x8000000000000) != 0)
  {
LABEL_24:
    a1[3] = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v16 = a1[6];
  v17 = *((_QWORD *)a2 + 6);
  if ((v16 & 0x8000000000000) != 0)
  {
    if ((v17 & 0x8000000000000) == 0
      || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v16) != HIBYTE(v17)
      || BYTE6(v16) != BYTE6(v17))
    {
      v40 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
      goto LABEL_30;
    }
  }
  else if (v16 != v17 || (v17 & 0x8000000000000) != 0)
  {
LABEL_30:
    a1[6] = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
  }
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v19 = a1[8];
  v20 = *((_QWORD *)a2 + 8);
  if ((v19 & 0x8000000000000) != 0)
  {
    if ((v20 & 0x8000000000000) == 0
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v19) != HIBYTE(v20)
      || BYTE6(v19) != BYTE6(v20))
    {
      v43 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, a2);
      }
      goto LABEL_36;
    }
  }
  else if (v19 != v20 || (v20 & 0x8000000000000) != 0)
  {
LABEL_36:
    a1[8] = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = 0;
  }
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  v22 = a1[10];
  v23 = *((_QWORD *)a2 + 10);
  if ((v22 & 0x8000000000000) == 0)
  {
    if (v22 == v23 && (v23 & 0x8000000000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  if ((v23 & 0x8000000000000) == 0
    || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10)
    || HIBYTE(v22) != HIBYTE(v23)
    || BYTE6(v22) != BYTE6(v23))
  {
    v46 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, a2);
    }
LABEL_42:
    a1[10] = *((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = 0;
  }
LABEL_43:
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  v25 = (unsigned int *)(a1 + 13);
  v26 = a2 + 26;
  if (*((unsigned __int8 *)a1 + 168) == *((unsigned __int8 *)a2 + 168))
  {
    if (*((_BYTE *)a1 + 168))
      WebCore::ShadowData::operator=(v25, v26);
  }
  else if (*((_BYTE *)a1 + 168))
  {
    std::__optional_destruct_base<WebCore::ShadowData,false>::reset[abi:sn180100](v25);
  }
  else
  {
    WebCore::ShadowData::ShadowData((WebCore::ShadowData *)v25, (const WebCore::ShadowData *)v26);
    *((_BYTE *)a1 + 168) = 1;
  }
  *((_DWORD *)a1 + 44) = a2[44];
  return a1;
}

void WebCore::StyledMarkedText::~StyledMarkedText(unsigned int **this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  WebCore::StyledMarkedText::Style::~Style(this + 5);
  v3 = (WTF::StringImpl *)this[3];
  this[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

uint64_t WebCore::orderHighlights(uint64_t result, unint64_t a2)
{
  unsigned int v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  _DWORD *v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int j;
  uint64_t v34;
  uint64_t v35;
  int k;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  uint64_t v55[5];

  v2 = *(_DWORD *)(a2 + 12);
  if (!v2)
    return result;
  v3 = (_DWORD *)a2;
  v4 = (_QWORD *)result;
  v55[0] = 0;
  if (!result)
  {
    v19 = v2 - 1;
    if ((int)(v2 - 1) > 0)
      goto LABEL_60;
    return result;
  }
  v5 = 0;
  v6 = 0;
  do
  {
    if (v5
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,int>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,int,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v55, 8u), (v5 = v55[0]) != 0))
    {
      v7 = *(_DWORD *)(v5 - 8);
    }
    else
    {
      v7 = 0;
    }
    v8 = 0;
    v9 = (_DWORD *)*v4;
    v10 = *(_DWORD *)(*v4 + 16) >> 8;
    for (i = 1; ; ++i)
    {
      v12 = v10 & v7;
      v13 = (uint64_t *)(v5 + 16 * v12);
      result = *v13;
      if (*v13 == -1)
      {
        v8 = (uint64_t *)(v5 + 16 * v12);
        goto LABEL_13;
      }
      if (!result)
        break;
      if ((_DWORD *)result == v9)
        goto LABEL_28;
LABEL_13:
      v10 = i + v12;
    }
    if (v8)
    {
      result = 0;
      *v8 = 0;
      v8[1] = 0;
      --*(_DWORD *)(v5 - 16);
      v9 = (_DWORD *)*v4;
      v13 = v8;
    }
    if (v9)
      *v9 += 2;
    *v13 = (uint64_t)v9;
    *((_DWORD *)v13 + 2) = v6;
    v14 = v55[0];
    if (v55[0])
      v15 = *(_DWORD *)(v55[0] - 12) + 1;
    else
      v15 = 1;
    *(_DWORD *)(v55[0] - 12) = v15;
    v16 = (*(_DWORD *)(v14 - 16) + v15);
    v17 = *(unsigned int *)(v14 - 4);
    if (v17 > 0x400)
    {
      if (v17 <= 2 * v16)
      {
LABEL_24:
        v18 = (_DWORD)v17 << (6 * v15 >= (2 * v17));
        goto LABEL_27;
      }
    }
    else if (3 * v17 <= 4 * v16)
    {
      if ((_DWORD)v17)
        goto LABEL_24;
      v18 = 8;
LABEL_27:
      result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,int>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,int,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v55, v18);
    }
LABEL_28:
    v4 = (_QWORD *)v4[2];
    v5 = v55[0];
    ++v6;
  }
  while (v4);
  v2 = v3[3];
  v19 = v2 - 1;
  if ((int)(v2 - 1) > 0)
  {
    if (v55[0])
    {
      v20 = 0;
      while (v20 < v2)
      {
        v21 = *(_QWORD *)v3;
        v22 = *(_QWORD *)v3 + 40 * v20;
        v25 = *(_QWORD *)(v22 + 24);
        v24 = (_QWORD *)(v22 + 24);
        v23 = v25;
        v26 = v20 + 1;
        if (v25)
        {
          if (v26 >= v2)
            break;
          v27 = v21 + 40 * v26;
          v30 = *(_QWORD *)(v27 + 24);
          v28 = (_QWORD *)(v27 + 24);
          v29 = v30;
          if (v30)
          {
            v31 = 0;
            v32 = *(_DWORD *)(v5 - 8);
            for (j = *(_DWORD *)(v23 + 16) >> 8; ; j = v31 + v34)
            {
              v34 = j & v32;
              v35 = *(_QWORD *)(v5 + 16 * v34);
              if (v35 != -1)
              {
                if (!v35)
                {
                  result = 0;
                  goto LABEL_46;
                }
                if (v35 == v23)
                  break;
              }
              ++v31;
            }
            result = *(unsigned int *)(v5 + 16 * v34 + 8);
LABEL_46:
            a2 = 0;
            for (k = *(_DWORD *)(v29 + 16) >> 8; ; k = a2 + v37)
            {
              v37 = k & v32;
              v38 = *(_QWORD *)(v5 + 16 * v37);
              if (v38 != -1)
              {
                if (!v38)
                {
                  v39 = 0;
                  goto LABEL_53;
                }
                if (v38 == v29)
                  break;
              }
              a2 = (a2 + 1);
            }
            v39 = *(_DWORD *)(v5 + 16 * v37 + 8);
LABEL_53:
            if ((int)result > v39)
            {
              v40 = v21 + 40 * v20;
              v41 = *(_DWORD *)(v40 + 4);
              result = v40 + 4;
              a2 = v41;
              v42 = v21 + 40 * v26;
              v44 = *(_DWORD *)(v42 + 4);
              v43 = v42 + 4;
              if ((_DWORD)a2 == v44)
              {
                a2 = *(unsigned int *)(v21 + 40 * v20 + 8);
                if ((_DWORD)a2 == *(_DWORD *)(v21 + 40 * v26 + 8))
                {
                  v45 = *(_DWORD *)(result + 16);
                  v46 = *(_OWORD *)result;
                  v47 = v21 + 40 * v20;
                  a2 = *(unsigned int *)(v47 + 32);
                  *(_OWORD *)result = *(_OWORD *)v43;
                  *(_DWORD *)(result + 16) = *(_DWORD *)(v43 + 16);
                  *v24 = v29;
                  v48 = v21 + 40 * v26;
                  *(_DWORD *)(v47 + 32) = *(_DWORD *)(v48 + 32);
                  *(_OWORD *)v43 = v46;
                  *(_DWORD *)(v43 + 16) = v45;
                  *v28 = v23;
                  *(_DWORD *)(v48 + 32) = a2;
                  v2 = v3[3];
                }
              }
            }
          }
        }
        v20 = v26;
        if ((uint64_t)v26 >= (int)(v2 - 1))
          goto LABEL_68;
      }
LABEL_80:
      __break(0xC471u);
      JUMPOUT(0x19647F27CLL);
    }
LABEL_60:
    v49 = 0;
    v50 = (_QWORD *)(*(_QWORD *)v3 + 24);
    do
    {
      if (v2 == v49)
        goto LABEL_80;
      ++v49;
      if (*v50 && v49 >= v2)
        goto LABEL_80;
      v50 += 5;
    }
    while (v19 != v49);
    v5 = 0;
  }
LABEL_68:
  if (v5)
  {
    v52 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v52)
    {
      v53 = (WTF::StringImpl **)v5;
      do
      {
        v54 = *v53;
        if (*v53 != (WTF::StringImpl *)-1)
        {
          *v53 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v54 -= 2;
          }
        }
        v53 += 2;
        --v52;
      }
      while (v52);
    }
    return WTF::fastFree((WTF *)(v5 - 16), (void *)a2);
  }
  return result;
}

WTF::StringImpl *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::StyledMarkedText::subdivideAndResolve(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderText const&,BOOL,WebCore::PaintInfo const&)::$_0,WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::StringImpl *result, uint64_t a2, const WebCore::StyledMarkedText::Style **a3)
{
  uint64_t v3;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WebCore::MarkedText *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  WTF::StringImpl *v17;
  _BYTE v18[4];
  __int128 v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  _BYTE v35[72];
  int v36;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x124924A)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = 224 * v3;
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(224 * v3));
      *((_DWORD *)v6 + 2) = (613566757 * (unint64_t)(v7 >> 5)) >> 32;
      *(_QWORD *)v6 = result;
      v8 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v8)
      {
        v9 = result;
        v10 = *(const WebCore::MarkedText **)a2;
        v11 = 40 * v8;
        v12 = 1;
        do
        {
          WebCore::resolveStyleForMarkedText((WebCore *)v18, v10, *a3, a3[1], a3[2], a3[3]);
          *(_DWORD *)v9 = 0;
          v13 = v19;
          *((_DWORD *)v9 + 5) = v20;
          *(_OWORD *)((char *)v9 + 4) = v13;
          v14 = v21;
          v21 = 0;
          *((_QWORD *)v9 + 3) = v14;
          *((_DWORD *)v9 + 8) = v22;
          *((_QWORD *)v9 + 5) = 0;
          if (v23)
          {
            *((_QWORD *)v9 + 5) = v23;
            v23 = 0;
          }
          *((_QWORD *)v9 + 6) = 0;
          if (v24)
          {
            *((_QWORD *)v9 + 6) = v24;
            v24 = 0;
          }
          *((_QWORD *)v9 + 7) = 0;
          if (v25)
          {
            *((_QWORD *)v9 + 7) = v25;
            v25 = 0;
          }
          *((_QWORD *)v9 + 8) = 0;
          if (v26)
          {
            *((_QWORD *)v9 + 8) = v26;
            v26 = 0;
          }
          *(_OWORD *)((char *)v9 + 72) = v27;
          *((_QWORD *)v9 + 11) = 0;
          if (v28)
          {
            *((_QWORD *)v9 + 11) = v28;
            v28 = 0;
          }
          *((_BYTE *)v9 + 96) = v29;
          *((_QWORD *)v9 + 13) = 0;
          if (v30)
          {
            *((_QWORD *)v9 + 13) = v30;
            v30 = 0;
          }
          *((_BYTE *)v9 + 112) = v31;
          *((_QWORD *)v9 + 15) = 0;
          if (v32)
          {
            *((_QWORD *)v9 + 15) = v32;
            v32 = 0;
          }
          v15 = v33;
          v16 = v34;
          *((_BYTE *)v9 + 144) = 0;
          *((_BYTE *)v9 + 128) = v15;
          *((_BYTE *)v9 + 136) = v16;
          *((_BYTE *)v9 + 208) = 0;
          if (v35[64])
          {
            WebCore::ShadowData::ShadowData((WTF::StringImpl *)((char *)v9 + 144), (const WebCore::ShadowData *)v35);
            *((_BYTE *)v9 + 208) = 1;
          }
          *((_DWORD *)v9 + 54) = v36;
          *((_DWORD *)v6 + 3) = v12;
          WebCore::StyledMarkedText::Style::~Style(&v23);
          result = v21;
          v21 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
            else
              *(_DWORD *)result -= 2;
          }
          v10 = (const WebCore::MarkedText *)((char *)v10 + 40);
          v9 = (WTF::StringImpl *)((char *)v9 + 224);
          ++v12;
          v11 -= 40;
        }
        while (v11);
      }
    }
  }
  return result;
}

unint64_t WebCore::coalesceAdjacentWithSameRanges(unsigned int *a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _DWORD *v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  int v54;
  uint64_t v55;
  _BYTE *v56;
  char v57;
  char v58;
  char v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _BYTE *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _BYTE *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v130;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned int v174;
  BOOL v175;
  unint64_t *v176;
  unint64_t v177;
  unsigned int v178;
  BOOL v179;
  unint64_t *v180;
  unint64_t v181;
  unsigned int v182;
  BOOL v183;
  unsigned int v184;
  BOOL v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  unint64_t *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  void *v193;
  _BYTE *v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unint64_t *v198;
  char v199;
  char v200;
  char v201;
  char v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t *v210;
  unint64_t *v211;
  unint64_t *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unint64_t *v222;
  unint64_t *v223;
  unint64_t *v224;
  unint64_t *v225;
  unint64_t *v226;
  _BYTE *v227;
  _BYTE *v228;
  _BYTE *v229;
  _BYTE *v230;
  unint64_t *v231;
  _BYTE *v232;
  char v233;
  char v234;
  char v235;
  char v236;
  char v237;
  char v238;
  char v239;
  char v240;
  char v241;
  char v242;
  _BYTE *v243;
  _BYTE *v244;
  _BYTE *v245;
  _BYTE *v246;
  _BYTE *v247;
  _BYTE *v248;
  unint64_t v249;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  if (!*(_DWORD *)(a2 + 12))
  {
    __break(0xC471u);
LABEL_281:
    JUMPOUT(0x196480564);
  }
  v4 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, 1uLL, *(_QWORD *)a2);
  v5 = a1[3];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 224 * v5;
  *(_DWORD *)v7 = 0;
  v8 = *(_OWORD *)(v4 + 4);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v4 + 20);
  *(_OWORD *)(v7 + 4) = v8;
  v9 = *(_DWORD **)(v4 + 24);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v7 + 24) = v9;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v4 + 32);
  result = (unint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v6 + 224 * v5 + 40), (const Style *)(v4 + 40));
  v12 = *(_QWORD *)a2;
  v13 = *(_DWORD *)(a2 + 12);
  a1[3] = v5 + 1;
  if (v13 != 1)
  {
    v14 = v12 + 224 * v13;
    v15 = v12 + 224;
    do
    {
      v16 = a1[3];
      if (!(_DWORD)v16)
      {
        __break(0xC471u);
        goto LABEL_281;
      }
      v17 = v12;
      v12 = v15;
      v18 = v16 - 1;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)a1 + 224 * (v16 - 1);
      if (*(_DWORD *)(v20 + 4) != *(_DWORD *)(v17 + 228) || *(_DWORD *)(v20 + 8) != *(_DWORD *)(v17 + 232))
      {
        if ((_DWORD)v16 == a1[2])
        {
          v61 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v16 + 1, v15);
          v62 = v61;
          v63 = a1[3];
          v64 = *(_QWORD *)a1;
          v65 = *(_QWORD *)a1 + 224 * v63;
          *(_DWORD *)v65 = 0;
          v66 = *(_OWORD *)(v61 + 4);
          v67 = *(_DWORD *)(v61 + 20);
          *(_QWORD *)(v65 + 40) = 0;
          v68 = (_QWORD *)(v65 + 40);
          *((_DWORD *)v68 - 5) = v67;
          *(_OWORD *)((char *)v68 - 36) = v66;
          v69 = *(_QWORD *)(v61 + 24);
          *(_QWORD *)(v61 + 24) = 0;
          *(v68 - 2) = v69;
          *((_DWORD *)v68 - 2) = *(_DWORD *)(v61 + 32);
          v70 = *(_QWORD *)(v61 + 40);
          if (v70)
          {
            *v68 = v70;
            *(_QWORD *)(v61 + 40) = 0;
          }
          v71 = v64 + 224 * v63;
          *(_QWORD *)(v71 + 48) = 0;
          v72 = (_QWORD *)(v71 + 48);
          v73 = *(_QWORD *)(v61 + 48);
          if (v73)
          {
            *v72 = v73;
            *(_QWORD *)(v61 + 48) = 0;
          }
          v74 = v64 + 224 * v63;
          *(_QWORD *)(v74 + 56) = 0;
          v75 = (_QWORD *)(v74 + 56);
          v76 = *(_QWORD *)(v61 + 56);
          if (v76)
          {
            *v75 = v76;
            *(_QWORD *)(v61 + 56) = 0;
          }
          v77 = v64 + 224 * v63;
          *(_QWORD *)(v77 + 64) = 0;
          v78 = (_QWORD *)(v77 + 64);
          v79 = *(_QWORD *)(v61 + 64);
          if (v79)
          {
            *v78 = v79;
            *(_QWORD *)(v61 + 64) = 0;
          }
          v80 = v64 + 224 * v63;
          v81 = *(_OWORD *)(v61 + 72);
          *(_QWORD *)(v80 + 88) = 0;
          v82 = (_QWORD *)(v80 + 88);
          *((_OWORD *)v82 - 1) = v81;
          v83 = *(_QWORD *)(v61 + 88);
          if (v83)
          {
            *v82 = v83;
            *(_QWORD *)(v61 + 88) = 0;
          }
          v84 = v64 + 224 * v63;
          v85 = *(_BYTE *)(v61 + 96);
          *(_QWORD *)(v84 + 104) = 0;
          v86 = (_QWORD *)(v84 + 104);
          *((_BYTE *)v86 - 8) = v85;
          v87 = *(_QWORD *)(v61 + 104);
          if (v87)
          {
            *v86 = v87;
            *(_QWORD *)(v61 + 104) = 0;
          }
          v88 = v64 + 224 * v63;
          v89 = *(_BYTE *)(v61 + 112);
          *(_QWORD *)(v88 + 120) = 0;
          v90 = (_QWORD *)(v88 + 120);
          *((_BYTE *)v90 - 8) = v89;
          v91 = *(_QWORD *)(v61 + 120);
          if (v91)
          {
            *v90 = v91;
            *(_QWORD *)(v61 + 120) = 0;
          }
          v92 = v64 + 224 * v63;
          v93 = *(_BYTE *)(v61 + 128);
          *(_BYTE *)(v92 + 208) = 0;
          v94 = (_BYTE *)(v92 + 208);
          *(v94 - 80) = v93;
          *(v94 - 72) = *(_BYTE *)(v61 + 136);
          *(v94 - 64) = 0;
          result = (unint64_t)(v94 - 64);
          if (*(_BYTE *)(v62 + 208))
          {
            result = (unint64_t)WebCore::ShadowData::ShadowData((WebCore::ShadowData *)result, (const WebCore::ShadowData *)(v62 + 144));
            *v94 = 1;
          }
          v95 = (_DWORD *)(v64 + 224 * v63 + 216);
          v96 = (_DWORD *)(v62 + 216);
        }
        else
        {
          v97 = v19 + 224 * v16;
          *(_DWORD *)v97 = 0;
          v98 = *(_OWORD *)(v17 + 228);
          v99 = *(_DWORD *)(v17 + 244);
          *(_QWORD *)(v97 + 40) = 0;
          v100 = (_QWORD *)(v97 + 40);
          *((_DWORD *)v100 - 5) = v99;
          *(_OWORD *)((char *)v100 - 36) = v98;
          v101 = *(_QWORD *)(v17 + 248);
          *(_QWORD *)(v17 + 248) = 0;
          *(v100 - 2) = v101;
          *((_DWORD *)v100 - 2) = *(_DWORD *)(v17 + 256);
          v102 = *(_QWORD *)(v17 + 264);
          if (v102)
          {
            *v100 = v102;
            *(_QWORD *)(v17 + 264) = 0;
          }
          v103 = v19 + 224 * v16;
          *(_QWORD *)(v103 + 48) = 0;
          v104 = (_QWORD *)(v103 + 48);
          v105 = *(_QWORD *)(v17 + 272);
          if (v105)
          {
            *v104 = v105;
            *(_QWORD *)(v17 + 272) = 0;
          }
          v106 = v19 + 224 * v16;
          *(_QWORD *)(v106 + 56) = 0;
          v107 = (_QWORD *)(v106 + 56);
          v108 = *(_QWORD *)(v17 + 280);
          if (v108)
          {
            *v107 = v108;
            *(_QWORD *)(v17 + 280) = 0;
          }
          v109 = v19 + 224 * v16;
          *(_QWORD *)(v109 + 64) = 0;
          v110 = (_QWORD *)(v109 + 64);
          v111 = *(_QWORD *)(v17 + 288);
          if (v111)
          {
            *v110 = v111;
            *(_QWORD *)(v17 + 288) = 0;
          }
          v112 = v19 + 224 * v16;
          v113 = *(_OWORD *)(v17 + 296);
          *(_QWORD *)(v112 + 88) = 0;
          v114 = (_QWORD *)(v112 + 88);
          *((_OWORD *)v114 - 1) = v113;
          v115 = *(_QWORD *)(v17 + 312);
          if (v115)
          {
            *v114 = v115;
            *(_QWORD *)(v17 + 312) = 0;
          }
          v116 = v19 + 224 * v16;
          v117 = *(_BYTE *)(v17 + 320);
          *(_QWORD *)(v116 + 104) = 0;
          v118 = (_QWORD *)(v116 + 104);
          *((_BYTE *)v118 - 8) = v117;
          v119 = *(_QWORD *)(v17 + 328);
          if (v119)
          {
            *v118 = v119;
            *(_QWORD *)(v17 + 328) = 0;
          }
          v120 = v19 + 224 * v16;
          v121 = *(_BYTE *)(v17 + 336);
          *(_QWORD *)(v120 + 120) = 0;
          v122 = (_QWORD *)(v120 + 120);
          *((_BYTE *)v122 - 8) = v121;
          v123 = *(_QWORD *)(v17 + 344);
          if (v123)
          {
            *v122 = v123;
            *(_QWORD *)(v17 + 344) = 0;
          }
          v124 = v19 + 224 * v16;
          v125 = *(_BYTE *)(v17 + 352);
          *(_BYTE *)(v124 + 208) = 0;
          v126 = (_BYTE *)(v124 + 208);
          *(v126 - 80) = v125;
          *(v126 - 72) = *(_BYTE *)(v17 + 360);
          *(v126 - 64) = 0;
          result = (unint64_t)(v126 - 64);
          if (*(_BYTE *)(v17 + 432))
          {
            result = (unint64_t)WebCore::ShadowData::ShadowData((WebCore::ShadowData *)result, (const WebCore::ShadowData *)(v17 + 368));
            *v126 = 1;
            v63 = a1[3];
          }
          else
          {
            v63 = v16;
          }
          v95 = (_DWORD *)(v19 + 224 * v16 + 216);
          v96 = (_DWORD *)(v17 + 440);
        }
        *v95 = *v96;
        a1[3] = v63 + 1;
        goto LABEL_83;
      }
      v21 = *(_QWORD *)(v17 + 248);
      if (*(_QWORD *)(v20 + 24) == v21)
        goto LABEL_21;
      v22 = v19 + 224 * v18;
      v25 = *(_QWORD *)(v22 + 40);
      v24 = (unint64_t *)(v22 + 40);
      v23 = v25;
      if ((v25 & 0x8000000000000) != 0)
      {
        if (*(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
        {
LABEL_12:
          v26 = *(_QWORD *)(v17 + 264);
          if ((v26 & 0x8000000000000) != 0)
          {
            if (v21 && *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
              goto LABEL_21;
          }
          else if (v21 && *(_QWORD *)(v17 + 264) == 255)
          {
            goto LABEL_21;
          }
        }
      }
      else if ((_BYTE)v23 == 0xFF)
      {
        goto LABEL_12;
      }
      result = (unint64_t)WebCore::blendSourceOver(v24, (const WebCore::Color *)(v17 + 264), &v249);
      v27 = *v24;
      v28 = v249;
      if ((*v24 & 0x8000000000000) != 0)
      {
        if ((v249 & 0x8000000000000) == 0
          || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v249 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v249 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v249 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v249 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v27) != HIBYTE(v249)
          || BYTE6(v27) != BYTE6(v249))
        {
          result = v27 & 0xFFFFFFFFFFFFLL;
          do
          {
            v168 = __ldaxr((unsigned int *)result);
            v169 = v168 - 1;
          }
          while (__stlxr(v169, (unsigned int *)result));
          if (!v169)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, (void *)v11);
          }
LABEL_20:
          *v24 = v249;
          goto LABEL_21;
        }
      }
      else
      {
        if (v27 != v249 || (v249 & 0x8000000000000) != 0)
          goto LABEL_20;
        v28 = *v24;
      }
      if ((v28 & 0x8000000000000) != 0)
      {
        result = v28 & 0xFFFFFFFFFFFFLL;
        do
        {
          v144 = __ldaxr((unsigned int *)result);
          v145 = v144 - 1;
        }
        while (__stlxr(v145, (unsigned int *)result));
        if (!v145)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, (void *)v11);
        }
      }
LABEL_21:
      if (!*(_BYTE *)(v17 + 236) || !*(_BYTE *)(v17 + 300))
        goto LABEL_29;
      v30 = v19 + 224 * v18;
      v33 = *(_QWORD *)(v30 + 48);
      v32 = (_QWORD *)(v30 + 48);
      v31 = v33;
      v34 = *(_QWORD *)(v17 + 272);
      if ((v33 & 0x8000000000000) != 0)
      {
        if ((v34 & 0x8000000000000) != 0
          && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v31) == HIBYTE(v34)
          && BYTE6(v31) == BYTE6(v34))
        {
          goto LABEL_29;
        }
        result = v31 & 0xFFFFFFFFFFFFLL;
        do
        {
          v170 = __ldaxr((unsigned int *)result);
          v171 = v170 - 1;
        }
        while (__stlxr(v171, (unsigned int *)result));
        if (!v171)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, (void *)v11);
        }
      }
      else if (v31 == v34 && (v34 & 0x8000000000000) == 0)
      {
        goto LABEL_29;
      }
      v36 = *(_QWORD *)(v17 + 272);
      *v32 = v36;
      if ((v36 & 0x8000000000000) != 0)
      {
        v146 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 + 1, v146));
      }
LABEL_29:
      v37 = *(_DWORD **)(v17 + 248);
      if (v37)
      {
        *v37 += 2;
        result = *(_QWORD *)(v20 + 24);
        *(_QWORD *)(v20 + 24) = v37;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      v38 = *(_DWORD *)(v17 + 256);
      if (*(_DWORD *)(v20 + 32) > v38)
        goto LABEL_83;
      *(_DWORD *)(v20 + 32) = v38;
      if (*(_QWORD *)(v17 + 248))
      {
        v39 = v19 + 224 * v18 + 88;
        v40 = (*(_QWORD *)(v17 + 312) >> 50) & 1;
        if ((*(_BYTE *)(v17 + 334) & 4) != 0)
          v41 = v40 | 2;
        else
          v41 = (*(_QWORD *)(v17 + 312) >> 50) & 1;
        v42 = *(_BYTE *)(v17 + 350);
        v43 = *(_QWORD *)v39;
        if ((*(_QWORD *)v39 & 0x8000000000000) != 0)
        {
          v148 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 + 1, v148));
        }
        v44 = *(_BYTE *)(v19 + 224 * v18 + 96);
        v45 = v19 + 224 * v18;
        v48 = *(_QWORD *)(v45 + 104);
        v47 = (unint64_t *)(v45 + 104);
        v46 = v48;
        if ((v48 & 0x8000000000000) != 0)
        {
          v150 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 + 1, v150));
        }
        v49 = v19 + 224 * v18;
        v52 = *(_QWORD *)(v49 + 120);
        v50 = (unint64_t *)(v49 + 120);
        v51 = v52;
        v53 = v50 - 1;
        v11 = *((unsigned __int8 *)v50 - 8);
        if ((v52 & 0x8000000000000) != 0)
        {
          v152 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 + 1, v152));
        }
        v54 = v42 & 4;
        v55 = v19 + 224 * v18;
        v58 = *(_BYTE *)(v55 + 136);
        v56 = (_BYTE *)(v55 + 136);
        v57 = v58;
        v60 = v56 - 8;
        v59 = *(v56 - 8);
        if (!(v54 | v41))
          goto LABEL_104;
        if (!(_DWORD)v40)
        {
          if ((v41 & 2) == 0)
            goto LABEL_44;
LABEL_90:
          v128 = *(_QWORD *)(v17 + 328);
          if ((v46 & 0x8000000000000) != 0)
          {
            v190 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
            if ((v128 & 0x8000000000000) == 0
              || *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 4)
              || *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 8)
              || *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 0xC)
              || *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 0x10)
              || HIBYTE(v46) != HIBYTE(v128)
              || BYTE6(v46) != BYTE6(v128))
            {
              do
              {
                v191 = __ldaxr(v190);
                v192 = v191 - 1;
                v193 = (void *)__stlxr(v192, v190);
              }
              while ((_DWORD)v193);
              if (!v192)
              {
                atomic_store(1u, v190);
                v225 = v53;
                v231 = v50;
                v194 = v56;
                v212 = v47;
                v217 = v51;
                v237 = v57;
                v242 = v59;
                v247 = v60;
                v207 = v39;
                v201 = v44;
                WTF::fastFree((WTF *)v190, v193);
                v44 = v201;
                v39 = v207;
                v47 = v212;
                v57 = v237;
                v59 = v242;
                v53 = v225;
                v50 = v231;
                v60 = v247;
                v51 = v217;
                v56 = v194;
              }
LABEL_95:
              v46 = *(_QWORD *)(v17 + 328);
              if ((v46 & 0x8000000000000) != 0)
              {
                v154 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 + 1, v154));
              }
            }
          }
          else if (v46 != v128 || (v128 & 0x8000000000000) != 0)
          {
            goto LABEL_95;
          }
          v11 = *(unsigned __int8 *)(v17 + 336);
          if (v54)
          {
LABEL_97:
            v130 = *(_QWORD *)(v17 + 344);
            if ((v51 & 0x8000000000000) != 0)
            {
              v195 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
              if ((v130 & 0x8000000000000) == 0
                || *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 4)
                || *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 8)
                || *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0xC)
                || *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0x10)
                || HIBYTE(v51) != HIBYTE(v130)
                || BYTE6(v51) != BYTE6(v130))
              {
                do
                {
                  v196 = __ldaxr(v195);
                  v197 = v196 - 1;
                }
                while (__stlxr(v197, v195));
                if (!v197)
                {
                  atomic_store(1u, v195);
                  v205 = v46;
                  v208 = v39;
                  v198 = v50;
                  v226 = v53;
                  v232 = v56;
                  v199 = v57;
                  v248 = v60;
                  v213 = v47;
                  v221 = v11;
                  v202 = v44;
                  WTF::fastFree((WTF *)v195, (void *)v11);
                  v44 = v202;
                  v11 = v221;
                  v39 = v208;
                  v47 = v213;
                  v53 = v226;
                  v56 = v232;
                  v60 = v248;
                  v57 = v199;
                  v50 = v198;
                  v46 = v205;
                }
LABEL_102:
                v51 = *(_QWORD *)(v17 + 344);
                if ((v51 & 0x8000000000000) != 0)
                {
                  v156 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
                  do
                    v157 = __ldaxr(v156);
                  while (__stlxr(v157 + 1, v156));
                }
              }
            }
            else if (v51 != v130 || (v130 & 0x8000000000000) != 0)
            {
              goto LABEL_102;
            }
            v59 = *(_BYTE *)(v17 + 352);
          }
LABEL_104:
          result = *(_QWORD *)v39;
          if ((*(_QWORD *)v39 & 0x8000000000000) != 0)
          {
            v200 = v44;
            v218 = v11;
            v206 = v39;
            v209 = v47;
            v233 = v57;
            v238 = v59;
            v222 = v53;
            v227 = v56;
            v243 = v60;
            v214 = v51;
            v172 = v50;
            v173 = v46;
            if ((v43 & 0x8000000000000) != 0
              && *(float *)((result & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4)
              && *(float *)((result & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 8)
              && *(float *)((result & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0xC)
              && *(float *)((result & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0x10)
              && HIBYTE(result) == HIBYTE(v43)
              && BYTE6(result) == BYTE6(v43))
            {
              v11 = v11;
            }
            else
            {
              result &= 0xFFFFFFFFFFFFuLL;
              do
              {
                v174 = __ldaxr((unsigned int *)result);
                v175 = --v174 == 0;
              }
              while (__stlxr(v174, (unsigned int *)result));
              v46 = v173;
              v11 = v11;
              if (v175)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, (void *)v11);
                v44 = v200;
                v11 = v218;
                v39 = v206;
                v47 = v209;
                v57 = v233;
                v59 = v238;
                v53 = v222;
                v56 = v227;
                v60 = v243;
                v51 = v214;
                v50 = v172;
                v46 = v173;
              }
LABEL_107:
              *(_QWORD *)v39 = v43;
              v43 = 0;
            }
          }
          else if (result != v43 || (v43 & 0x8000000000000) != 0)
          {
            goto LABEL_107;
          }
          *(_BYTE *)(v39 + 8) = v44;
          v132 = *v47;
          if ((*v47 & 0x8000000000000) != 0)
          {
            v219 = v11;
            v234 = v57;
            v239 = v59;
            v223 = v53;
            v228 = v56;
            v210 = v47;
            v215 = v51;
            v244 = v60;
            v176 = v50;
            v177 = v46;
            if ((v46 & 0x8000000000000) != 0
              && *(float *)((v132 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 4)
              && *(float *)((v132 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 8)
              && *(float *)((v132 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 0xC)
              && *(float *)((v132 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v46 & 0xFFFFFFFFFFFFLL) + 0x10)
              && HIBYTE(v132) == HIBYTE(v46)
              && BYTE6(v132) == BYTE6(v46))
            {
              v11 = v11;
            }
            else
            {
              result = v132 & 0xFFFFFFFFFFFFLL;
              do
              {
                v178 = __ldaxr((unsigned int *)result);
                v179 = --v178 == 0;
              }
              while (__stlxr(v178, (unsigned int *)result));
              v46 = v177;
              v11 = v11;
              if (v179)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, (void *)v11);
                v11 = v219;
                v57 = v234;
                v59 = v239;
                v53 = v223;
                v56 = v228;
                v47 = v210;
                v51 = v215;
                v60 = v244;
                v50 = v176;
                v46 = v177;
              }
LABEL_111:
              *v47 = v46;
              v46 = 0;
            }
          }
          else if ((v46 & 0x8000000000000) != 0 || v132 != v46)
          {
            goto LABEL_111;
          }
          *(_BYTE *)v53 = v11;
          v133 = *v50;
          if ((*v50 & 0x8000000000000) == 0)
          {
            if ((v51 & 0x8000000000000) != 0 || v133 != v51)
              goto LABEL_115;
            goto LABEL_116;
          }
          v235 = v57;
          v240 = v59;
          v245 = v60;
          v229 = v56;
          v180 = v50;
          v203 = v46;
          v181 = v51;
          if ((v51 & 0x8000000000000) != 0
            && (result = v51 & 0xFFFFFFFFFFFFLL,
                *(float *)((v133 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 4))
            && *(float *)((v133 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v133 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 0xC)
            && *(float *)((v133 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v51 & 0xFFFFFFFFFFFFLL) + 0x10)
            && HIBYTE(v133) == HIBYTE(v51)
            && BYTE6(v133) == BYTE6(v51))
          {
            *v60 = v59;
            *v56 = v57;
            do
            {
              v184 = __ldaxr((unsigned int *)result);
              v185 = --v184 == 0;
            }
            while (__stlxr(v184, (unsigned int *)result));
            v46 = v203;
            if (v185)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v11);
              v46 = v203;
            }
          }
          else
          {
            result = v133 & 0xFFFFFFFFFFFFLL;
            do
            {
              v182 = __ldaxr((unsigned int *)result);
              v183 = --v182 == 0;
            }
            while (__stlxr(v182, (unsigned int *)result));
            v46 = v203;
            if (v183)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v11);
              v57 = v235;
              v59 = v240;
              v60 = v245;
              v51 = v181;
              v56 = v229;
              v50 = v180;
              v46 = v203;
            }
LABEL_115:
            *v50 = v51;
LABEL_116:
            *v60 = v59;
            *v56 = v57;
          }
          if ((v46 & 0x8000000000000) != 0)
          {
            result = v46 & 0xFFFFFFFFFFFFLL;
            do
            {
              v164 = __ldaxr((unsigned int *)result);
              v165 = v164 - 1;
            }
            while (__stlxr(v165, (unsigned int *)result));
            if (!v165)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v11);
            }
          }
          if ((v43 & 0x8000000000000) != 0)
          {
            result = v43 & 0xFFFFFFFFFFFFLL;
            do
            {
              v166 = __ldaxr((unsigned int *)result);
              v167 = v166 - 1;
            }
            while (__stlxr(v167, (unsigned int *)result));
            if (!v167)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v11);
            }
          }
          goto LABEL_119;
        }
        v127 = *(_QWORD *)(v17 + 312);
        if ((v43 & 0x8000000000000) != 0)
        {
          v186 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
          if ((v127 & 0x8000000000000) == 0
            || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v43) != HIBYTE(v127)
            || BYTE6(v43) != BYTE6(v127))
          {
            do
            {
              v187 = __ldaxr(v186);
              v188 = v187 - 1;
            }
            while (__stlxr(v188, v186));
            if (!v188)
            {
              atomic_store(1u, v186);
              v204 = v46;
              v189 = v50;
              v224 = v50 - 1;
              v230 = v56;
              v211 = v47;
              v216 = v51;
              v236 = v57;
              v241 = v59;
              v246 = v56 - 8;
              v220 = v11;
              WTF::fastFree((WTF *)v186, (void *)v11);
              v11 = v220;
              v39 = v19 + 224 * v18 + 88;
              v47 = v211;
              v57 = v236;
              v59 = v241;
              v53 = v224;
              v56 = v230;
              v60 = v246;
              v51 = v216;
              v50 = v189;
              v46 = v204;
            }
LABEL_88:
            v43 = *(_QWORD *)(v17 + 312);
            if ((v43 & 0x8000000000000) != 0)
            {
              v158 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 + 1, v158));
            }
          }
        }
        else if (v43 != v127 || (v127 & 0x8000000000000) != 0)
        {
          goto LABEL_88;
        }
        v44 = *(_BYTE *)(v17 + 320);
        if ((v41 & 2) != 0)
          goto LABEL_90;
LABEL_44:
        if (v54)
          goto LABEL_97;
        goto LABEL_104;
      }
LABEL_119:
      v134 = *(_QWORD *)(v17 + 264);
      if ((v134 & 0x8000000000000) == 0)
      {
        if ((_BYTE)v134 != 0xFF)
          goto LABEL_83;
        v135 = v19 + 224 * v18;
        v138 = *(_QWORD *)(v135 + 40);
        v137 = (_QWORD *)(v135 + 40);
        v136 = v138;
        v139 = (v138 | v134) & 0x8000000000000;
        if (v138 == v134 && v139 == 0)
          goto LABEL_83;
        if ((v136 & 0x8000000000000) != 0)
        {
LABEL_168:
          result = v136 & 0xFFFFFFFFFFFFLL;
          do
          {
            v162 = __ldaxr((unsigned int *)result);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, (unsigned int *)result));
          if (!v163)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, (void *)v11);
          }
        }
LABEL_126:
        v141 = *(_QWORD *)(v17 + 264);
        *v137 = v141;
        if ((v141 & 0x8000000000000) != 0)
        {
          v142 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFLL);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 + 1, v142));
        }
        goto LABEL_83;
      }
      if (*(float *)((v134 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
      {
        v160 = v19 + 224 * v18;
        v161 = *(_QWORD *)(v160 + 40);
        v137 = (_QWORD *)(v160 + 40);
        v136 = v161;
        if ((v161 & 0x8000000000000) == 0)
          goto LABEL_126;
        if (*(float *)((v136 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v134 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v134 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v134 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v134 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v136) != HIBYTE(v134)
          || BYTE6(v136) != BYTE6(v134))
        {
          goto LABEL_168;
        }
      }
LABEL_83:
      v15 = v12 + 224;
    }
    while (v12 + 224 != v14);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 224 * v3;
    v5 = (unsigned int **)(*(_QWORD *)a1 + 40);
    do
    {
      WebCore::StyledMarkedText::Style::~Style(v5);
      v6 = (WTF::StringImpl *)*(v5 - 2);
      *(v5 - 2) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 28;
      v4 -= 224;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCore::resolveStyleForMarkedText(WebCore *this, const WebCore::MarkedText *a2, const WebCore::StyledMarkedText::Style *a3, const WebCore::RenderText *a4, const WebCore::RenderStyle *a5, const WebCore::PaintInfo *a6)
{
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::StyledMarkedText::Style *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const WebCore::ShadowData *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  const WebCore::PaintInfo *v39;
  WTF::StringImpl *v40;
  void *v41;
  WebCore::RenderStyle *v42;
  unint64_t v43;
  uint64_t v44;
  int32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  _DWORD *v51;
  char *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  WebCore::StyledMarkedText::Style *v104[2];
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  char v116;
  unsigned int v117[16];
  unsigned __int8 v118;
  int v119;
  unint64_t v120;
  WTF::StringImpl *v121;
  char v122;
  char v123;
  char v124;

  v12 = *(_QWORD *)a3;
  v105 = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v57 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
  v13 = (unsigned int *)*((_QWORD *)a3 + 1);
  v106 = (unint64_t)v13;
  if (((unint64_t)v13 & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFLL);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v14 = *((_QWORD *)a3 + 2);
  v107 = v14;
  if ((v14 & 0x8000000000000) != 0)
  {
    v61 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
  }
  v15 = *((_QWORD *)a3 + 3);
  v108 = v15;
  if ((v15 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
  }
  v109 = *((_OWORD *)a3 + 2);
  v16 = *((_QWORD *)a3 + 6);
  v110 = v16;
  if ((v16 & 0x8000000000000) != 0)
  {
    v65 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 + 1, v65));
  }
  v111 = *((_BYTE *)a3 + 56);
  v17 = *((_QWORD *)a3 + 8);
  v112 = v17;
  if ((v17 & 0x8000000000000) != 0)
  {
    v67 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v113 = *((_BYTE *)a3 + 72);
  v18 = *((_QWORD *)a3 + 10);
  v114 = v18;
  if ((v18 & 0x8000000000000) != 0)
  {
    v69 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 + 1, v69));
  }
  v115 = *((_BYTE *)a3 + 88);
  v116 = *((_BYTE *)a3 + 96);
  LOBYTE(v117[0]) = 0;
  v118 = 0;
  if (*((_BYTE *)a3 + 168))
  {
    WebCore::ShadowData::ShadowData((WebCore::ShadowData *)v117, (const WebCore::StyledMarkedText::Style *)((char *)a3 + 104));
    v118 = 1;
  }
  v119 = *((_DWORD *)a3 + 44);
  switch(*((_BYTE *)a2 + 12))
  {
    case 1:
      v19 = *((_QWORD *)a4 + 4);
      if (!v19)
        goto LABEL_121;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        goto LABEL_121;
      v21 = 0;
      do
      {
        if ((*(_BYTE *)(v20 + 45) & 1) == 0)
        {
          v44 = WebCore::RenderElement::grammarErrorPseudoStyle((WebCore::RenderElement *)v20, 0);
          goto LABEL_76;
        }
        v22 = *(_QWORD *)(v20 + 32);
        if (!v22)
          goto LABEL_121;
        v20 = *(_QWORD *)(v22 + 8);
      }
      while (v20);
      goto LABEL_77;
    case 4:
      v30 = *((_QWORD *)a4 + 4);
      if (!v30)
        goto LABEL_121;
      v31 = *(_QWORD *)(v30 + 8);
      if (!v31)
        goto LABEL_121;
      v21 = 0;
      while (2)
      {
        if ((*(_BYTE *)(v31 + 45) & 1) != 0)
        {
          v32 = *(_QWORD *)(v31 + 32);
          if (v32)
          {
            v31 = *(_QWORD *)(v32 + 8);
            if (!v31)
              break;
            continue;
          }
LABEL_121:
          v21 = 0;
        }
        else
        {
          v44 = WebCore::RenderElement::spellingErrorPseudoStyle((WebCore::RenderElement *)v31, 0);
LABEL_76:
          v21 = (WebCore::StyledMarkedText::Style *)v44;
        }
        break;
      }
LABEL_77:
      WebCore::computeStyleForPseudoElementStyle((unsigned int *)&v105, v21, a6, a4);
      goto LABEL_112;
    case 5:
      {
        v79 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v79 + 40) = 0u;
        *(_OWORD *)(v79 + 24) = 0u;
        *(_QWORD *)v79 = &off_1E335BC30;
      }
      WebCore::RenderTheme::textSearchHighlightColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, 2u, &v120);
      v24 = v120;
      if ((v105 & 0x8000000000000) != 0)
      {
        if ((v120 & 0x8000000000000) == 0
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v105) != HIBYTE(v120)
          || BYTE6(v105) != BYTE6(v120))
        {
          v90 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
          do
          {
            v91 = __ldaxr(v90);
            v92 = --v91 == 0;
          }
          while (__stlxr(v91, v90));
          goto LABEL_209;
        }
      }
      else
      {
        if (v105 != v120 || (v120 & 0x8000000000000) != 0)
          goto LABEL_72;
        v24 = v105;
      }
      if ((v24 & 0x8000000000000) == 0)
        goto LABEL_112;
      v25 = v24 & 0xFFFFFFFFFFFFLL;
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = --v26 == 0;
      }
      while (__stlxr(v26, (unsigned int *)v25));
      goto LABEL_183;
    case 7:
      v35 = *((_QWORD *)a4 + 4);
      if (v35)
        v36 = *(_QWORD *)(v35 + 8);
      else
        v36 = 0;
      LODWORD(v120) = 4;
      v37 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
      if (v37)
        *(_DWORD *)v37 += 2;
      v121 = v37;
      v122 = 0;
      v123 = 0;
      if (v35)
        v35 = *(_QWORD *)(v35 + 8);
      WebCore::RenderElement::getUncachedPseudoStyle(v36, (int *)&v120, v35 + 80, 0, v104);
      v40 = v121;
      v121 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v38);
        else
          *(_DWORD *)v40 -= 2;
      }
      WebCore::computeStyleForPseudoElementStyle((unsigned int *)&v105, v104[0], a6, v39);
      v42 = v104[0];
      v104[0] = 0;
      if (!v42)
        goto LABEL_112;
      WebCore::RenderStyle::~RenderStyle(v42, v41);
      if (!*(_DWORD *)v25)
        goto LABEL_66;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      goto LABEL_112;
    case 8:
      {
        v81 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v81 + 40) = 0u;
        *(_OWORD *)(v81 + 24) = 0u;
        *(_QWORD *)v81 = &off_1E335BC30;
      }
      WebCore::RenderTheme::annotationHighlightColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, 2u, &v120);
      v43 = v120;
      if ((v105 & 0x8000000000000) != 0)
      {
        if ((v120 & 0x8000000000000) == 0
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v105) != HIBYTE(v120)
          || BYTE6(v105) != BYTE6(v120))
        {
          v90 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
          do
          {
            v97 = __ldaxr(v90);
            v92 = --v97 == 0;
          }
          while (__stlxr(v97, v90));
          goto LABEL_209;
        }
      }
      else
      {
        if (v105 != v120 || (v120 & 0x8000000000000) != 0)
          goto LABEL_72;
        v43 = v105;
      }
      if ((v43 & 0x8000000000000) == 0)
        goto LABEL_112;
      v25 = v43 & 0xFFFFFFFFFFFFLL;
      do
      {
        v53 = __ldaxr((unsigned int *)v25);
        v27 = --v53 == 0;
      }
      while (__stlxr(v53, (unsigned int *)v25));
      goto LABEL_183;
    case 9:
      {
        v80 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v80 + 40) = 0u;
        *(_OWORD *)(v80 + 24) = 0u;
        *(_QWORD *)v80 = &off_1E335BC30;
      }
      WebCore::RenderTheme::annotationHighlightColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, 2u, &v120);
      v28 = v120;
      if ((v105 & 0x8000000000000) != 0)
      {
        if ((v120 & 0x8000000000000) != 0
          && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v105) == HIBYTE(v120)
          && BYTE6(v105) == BYTE6(v120))
        {
          goto LABEL_34;
        }
        v90 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
        do
        {
          v93 = __ldaxr(v90);
          v92 = --v93 == 0;
        }
        while (__stlxr(v93, v90));
LABEL_209:
        if (v92)
        {
          atomic_store(1u, v90);
          WTF::fastFree((WTF *)v90, v23);
        }
      }
      else if (v105 == v120 && (v120 & 0x8000000000000) == 0)
      {
        v28 = v105;
LABEL_34:
        if ((v28 & 0x8000000000000) == 0)
          goto LABEL_112;
        v25 = v28 & 0xFFFFFFFFFFFFLL;
        do
        {
          v29 = __ldaxr((unsigned int *)v25);
          v27 = --v29 == 0;
        }
        while (__stlxr(v29, (unsigned int *)v25));
        goto LABEL_183;
      }
LABEL_72:
      v105 = v120;
      goto LABEL_112;
    case 0xB:
      if ((v106 & 0x8000000000000) != 0)
      {
        v73 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 + 1, v73));
      }
      if ((v107 & 0x8000000000000) != 0)
      {
        v75 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 + 1, v75));
      }
      if ((v108 & 0x8000000000000) != 0)
      {
        v77 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFLL);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 + 1, v77));
      }
      *(_OWORD *)v104 = v109;
      if ((*((_BYTE *)a6 + 20) & 0xC) == 0
        && (v33 = *(const WebCore::ShadowData **)(*((_QWORD *)a5 + 3) + 160)) != 0)
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)&v120, v33);
        v34 = 1;
      }
      else
      {
        v34 = 0;
        LOBYTE(v120) = 0;
      }
      v124 = v34;
      if (v118 == v34)
      {
        if (v118)
          WebCore::ShadowData::operator=(v117, (unsigned int *)&v120);
      }
      else if (v118)
      {
        std::__optional_destruct_base<WebCore::ShadowData,false>::reset[abi:sn180100](v117);
      }
      else
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)v117, (const WebCore::ShadowData *)&v120);
        v118 = 1;
      }
      std::__optional_destruct_base<WebCore::ShadowData,false>::~__optional_destruct_base[abi:sn180100]((unsigned int **)&v120);
      if ((v106 & 0x8000000000000) != 0)
        v45.i32[0] = *(_DWORD *)((v106 & 0xFFFFFFFFFFFFLL) + 0x10);
      if ((v107 & 0x8000000000000) != 0)
        v45.i32[0] = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 0x10);
      if ((v108 & 0x8000000000000) != 0)
      {
        v98 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFLL);
        v45.i32[0] = *(_DWORD *)((v108 & 0xFFFFFFFFFFFFLL) + 0x10);
        v109 = *(_OWORD *)v104;
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          atomic_store(1u, v98);
          WTF::fastFree((WTF *)v98, v23);
        }
      }
      else
      {
        v109 = *(_OWORD *)v104;
      }
      if ((v107 & 0x8000000000000) != 0)
      {
        v83 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
        do
        {
          v84 = __ldaxr(v83);
          v85 = v84 - 1;
        }
        while (__stlxr(v85, v83));
        if (!v85)
        {
          atomic_store(1u, v83);
          WTF::fastFree((WTF *)v83, v23);
        }
      }
      if ((v106 & 0x8000000000000) != 0)
      {
        v86 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          atomic_store(1u, v86);
          WTF::fastFree((WTF *)v86, v23);
        }
      }
      v46 = *((_QWORD *)a4 + 4);
      if (!v46)
        goto LABEL_93;
      while (1)
      {
        v47 = *(_QWORD *)(v46 + 8);
        if (!v47)
        {
LABEL_93:
          v48 = 0;
          v120 = 0;
          goto LABEL_95;
        }
        if ((*(_BYTE *)(v47 + 45) & 1) == 0)
          break;
        v46 = *(_QWORD *)(v47 + 32);
        if (!v46)
          goto LABEL_93;
      }
      WebCore::RenderElement::selectionBackgroundColor((WebCore::RenderElement *)v47, &v120);
      v48 = v120;
LABEL_95:
      if ((v105 & 0x8000000000000) != 0)
      {
        if ((v48 & 0x8000000000000) != 0)
        {
          v45.i32[0] = *(_DWORD *)((v48 & 0xFFFFFFFFFFFFLL) + 0x10);
          if (*(float *)((v105 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 4)
            && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 0xC)
            && *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)v45.i32
            && HIBYTE(v105) == HIBYTE(v48)
            && BYTE6(v105) == BYTE6(v48))
          {
            goto LABEL_101;
          }
        }
        v94 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          atomic_store(1u, v94);
          WTF::fastFree((WTF *)v94, v23);
        }
      }
      else if (v105 == v48 && (v48 & 0x8000000000000) == 0)
      {
        goto LABEL_101;
      }
      v48 = v120;
      v105 = v120;
      if ((v120 & 0x8000000000000) != 0)
      {
        v71 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFLL);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 + 1, v71));
        v48 = v120;
      }
LABEL_101:
      if ((v48 & 0x4000000000000) == 0)
        goto LABEL_111;
      if ((v48 & 0x8000000000000) != 0)
      {
        v82 = *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 0x10);
        if (v82 > 0.0 && (v106 & 0x8000000000000) != 0)
        {
          v45.i32[0] = *(_DWORD *)((v106 & 0xFFFFFFFFFFFFLL) + 0x10);
          if (*(float *)((v106 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 4)
            && *(float *)((v106 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v106 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 0xC)
            && *(float *)v45.i32 == v82
            && HIBYTE(v106) == HIBYTE(v48)
            && BYTE6(v106) == BYTE6(v48))
          {
LABEL_106:
            WebCore::Color::invertedColorWithAlpha((uint64_t)&v120, 1.0, (uint64_t *)v104, v45);
            v50 = (unint64_t)v104[0];
            if ((v105 & 0x8000000000000) != 0)
            {
              if (((unint64_t)v104[0] & 0x8000000000000) == 0
                || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)(((unint64_t)v104[0] & 0xFFFFFFFFFFFFLL)
                                                                         + 4)
                || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)(((unint64_t)v104[0] & 0xFFFFFFFFFFFFLL)
                                                                         + 8)
                || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)(((unint64_t)v104[0] & 0xFFFFFFFFFFFFLL)
                                                                           + 0xC)
                || *(float *)((v105 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)(((unint64_t)v104[0] & 0xFFFFFFFFFFFFLL)
                                                                            + 0x10)
                || HIBYTE(v105) != (unint64_t)v104[0] >> 56
                || BYTE6(v105) != BYTE6(v104[0]))
              {
                v101 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v102 = __ldaxr(v101);
                  v103 = v102 - 1;
                }
                while (__stlxr(v103, v101));
                if (!v103)
                {
                  atomic_store(1u, v101);
                  WTF::fastFree((WTF *)v101, v23);
                }
                goto LABEL_109;
              }
            }
            else
            {
              if ((WebCore::StyledMarkedText::Style *)v105 != v104[0]
                || ((unint64_t)v104[0] & 0x8000000000000) != 0)
              {
LABEL_109:
                v105 = (unint64_t)v104[0];
LABEL_110:
                v48 = v120;
                goto LABEL_111;
              }
              v50 = v105;
            }
            if ((v50 & 0x8000000000000) != 0)
            {
              v54 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                atomic_store(1u, v54);
                WTF::fastFree((WTF *)v54, v23);
              }
            }
            goto LABEL_110;
          }
        }
      }
      else if ((_BYTE)v48 && v106 == v48 && ((v106 | v48) & 0x8000000000000) == 0)
      {
        goto LABEL_106;
      }
LABEL_111:
      if ((v48 & 0x8000000000000) == 0)
        goto LABEL_112;
      v25 = v48 & 0xFFFFFFFFFFFFLL;
      do
      {
        v89 = __ldaxr((unsigned int *)v25);
        v27 = --v89 == 0;
      }
      while (__stlxr(v89, (unsigned int *)v25));
LABEL_183:
      if (v27)
      {
        atomic_store(1u, (unsigned int *)v25);
LABEL_66:
        WTF::fastFree((WTF *)v25, v23);
      }
LABEL_112:
      *(_DWORD *)this = 0;
      *(_OWORD *)((char *)this + 4) = *(_OWORD *)((char *)a2 + 4);
      *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
      v51 = (_DWORD *)*((_QWORD *)a2 + 3);
      if (v51)
        *v51 += 2;
      *(_OWORD *)((char *)this + 40) = 0u;
      v52 = (char *)this + 40;
      *((_QWORD *)v52 - 2) = v51;
      *((_DWORD *)v52 - 2) = *((_DWORD *)a2 + 8);
      *((_OWORD *)v52 + 1) = 0u;
      *(_OWORD *)(v52 + 25) = 0u;
      *((_DWORD *)v52 + 11) = 1082130432;
      *((_QWORD *)v52 + 6) = 0;
      v52[56] = 0;
      *((_QWORD *)v52 + 8) = 0;
      v52[72] = 0;
      *((_QWORD *)v52 + 10) = 0;
      v52[88] = 0;
      v52[96] = 0;
      v52[104] = 0;
      v52[168] = 0;
      *((_DWORD *)v52 + 44) = 1065353216;
      WebCore::StyledMarkedText::Style::operator=((uint64_t *)v52, (unsigned int *)&v105);
      WebCore::StyledMarkedText::Style::~Style((unsigned int **)&v105);
      return;
    case 0xC:
      v119 = 1048576000;
      goto LABEL_112;
    case 0xD:
      v119 = 0;
      goto LABEL_112;
    default:
      goto LABEL_112;
  }
}

uint64_t WebCore::StyledMarkedText::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v4 = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 4) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  WebCore::StyledMarkedText::Style::operator=((uint64_t *)(a1 + 40), (unsigned int *)(a2 + 40));
  return a1;
}

unsigned int *WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = 40 * v3;
    v7 = (WTF::StringImpl **)(*(_QWORD *)a1 + 24);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v9 = v7;
          v10 = v6;
          WTF::StringImpl::destroy(v8, a2);
          v7 = v9;
          v6 = v10;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v7 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::StyledMarkedText::coalesceAdjacentWithEqualForeground(uint64_t result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const Style *v9;
  __int128 v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _DWORD *v20;
  WebCore::StyledMarkedText::Style *v21;
  __int128 v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;

  v3 = (unsigned int *)result;
  v4 = *(unsigned int *)(a2 + 12);
  if (v4 <= 1)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = v4;
    if ((_DWORD)v4)
    {
      v5 = 224 * v4;
      result = WTF::fastMalloc((WTF *)(224 * v4));
      v3[2] = v5 > 0xDF;
      *(_QWORD *)v3 = result;
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a2;
        result += 40;
        v8 = 224 * v6;
        v9 = (const Style *)(v7 + 40);
        do
        {
          *(_DWORD *)(result - 40) = 0;
          v10 = *(_OWORD *)(v9 - 36);
          *(_DWORD *)(result - 20) = *((_DWORD *)v9 - 5);
          *(_OWORD *)(result - 36) = v10;
          v11 = (_DWORD *)*((_QWORD *)v9 - 2);
          if (v11)
            *v11 += 2;
          *(_QWORD *)(result - 16) = v11;
          *(_DWORD *)(result - 8) = *((_DWORD *)v9 - 2);
          result = (uint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)result, v9)
                 + 224;
          v9 += 224;
          v8 -= 224;
        }
        while (v8);
      }
    }
    return result;
  }
  *(_QWORD *)(result + 8) = 0;
  if (v4 >= 0x124924A)
  {
    __break(0xC471u);
    JUMPOUT(0x196481960);
  }
  v12 = 224 * v4;
  v13 = WTF::fastMalloc((WTF *)(224 * v4));
  v3[2] = (613566757 * (unint64_t)(v12 >> 5)) >> 32;
  *(_QWORD *)v3 = v13;
  if (!*(_DWORD *)(a2 + 12))
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x196481958);
  }
  v14 = *(_QWORD *)a2;
  if (v12 >= 0xE0)
  {
    *(_DWORD *)v13 = 0;
    v22 = *(_OWORD *)(v14 + 4);
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
    *(_OWORD *)(v13 + 4) = v22;
    v23 = *(_DWORD **)(v14 + 24);
    if (v23)
      *v23 += 2;
    *(_QWORD *)(v13 + 24) = v23;
    *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
    v21 = (WebCore::StyledMarkedText::Style *)(v13 + 40);
  }
  else
  {
    v15 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, 1uLL, v14);
    v14 = v15;
    v16 = v3[3];
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)v3 + 224 * v16;
    *(_DWORD *)v18 = 0;
    v19 = *(_OWORD *)(v15 + 4);
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v15 + 20);
    *(_OWORD *)(v18 + 4) = v19;
    v20 = *(_DWORD **)(v15 + 24);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v18 + 24) = v20;
    *(_DWORD *)(v18 + 32) = *(_DWORD *)(v15 + 32);
    v21 = (WebCore::StyledMarkedText::Style *)(v17 + 224 * v16 + 40);
  }
  result = (uint64_t)WebCore::StyledMarkedText::Style::Style(v21, (const Style *)(v14 + 40));
  ++v3[3];
  v24 = *(_DWORD *)(a2 + 12);
  if (v24 != 1)
  {
    v25 = 0;
    v26 = *(_QWORD *)a2;
    v48 = 224 * v24 - 224;
    while (1)
    {
      v27 = v3[3];
      if (!(_DWORD)v27)
        goto LABEL_45;
      v28 = v27 - 1;
      v29 = *(_QWORD *)v3;
      v30 = *(_QWORD *)v3 + 224 * (v27 - 1);
      v32 = *(_DWORD *)(v30 + 8);
      v31 = (_DWORD *)(v30 + 8);
      if (v32 != *(_DWORD *)(v26 + v25 + 228))
        break;
      result = WebCore::TextPaintStyle::operator==((unint64_t *)(v29 + 224 * v28 + 48), (unint64_t *)(v26 + v25 + 272));
      if (!(_DWORD)result)
        break;
      v33 = *(unsigned __int8 *)(v26 + v25 + 432);
      if (*(_BYTE *)(v29 + 224 * v28 + 208))
        v34 = v33 == 0;
      else
        v34 = 1;
      if (v34)
      {
        if ((*(_BYTE *)(v29 + 224 * v28 + 208) != 0) != (v33 != 0))
          break;
      }
      else
      {
        result = WebCore::ShadowData::operator==((WebCore::Length *)(v29 + 224 * v28 + 144), (WebCore::Length *)(v26 + v25 + 368));
        if ((result & 1) == 0)
          break;
      }
      if (*(float *)(v29 + 224 * v28 + 216) != *(float *)(v26 + v25 + 440))
        break;
      *v31 = *(_DWORD *)(v26 + v25 + 232);
LABEL_41:
      v25 += 224;
      if (v48 == v25)
        return result;
    }
    v35 = v3[3];
    if ((_DWORD)v35 == v3[2])
    {
      v36 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v35 + 1, v26 + v25 + 224);
      v37 = v3[3];
      v38 = *(_QWORD *)v3;
      v39 = *(_QWORD *)v3 + 224 * v37;
      *(_DWORD *)v39 = 0;
      v40 = *(_OWORD *)(v36 + 4);
      *(_DWORD *)(v39 + 20) = *(_DWORD *)(v36 + 20);
      *(_OWORD *)(v39 + 4) = v40;
      v41 = *(_DWORD **)(v36 + 24);
      if (v41)
        *v41 += 2;
      *(_QWORD *)(v39 + 24) = v41;
      *(_DWORD *)(v39 + 32) = *(_DWORD *)(v36 + 32);
      result = (uint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v38 + 224 * v37 + 40), (const Style *)(v36 + 40));
      v42 = v37 + 1;
    }
    else
    {
      v43 = *(_QWORD *)v3;
      v44 = *(_QWORD *)v3 + 224 * v35;
      *(_DWORD *)v44 = 0;
      v45 = *(_DWORD *)(v26 + v25 + 244);
      *(_OWORD *)(v44 + 4) = *(_OWORD *)(v26 + v25 + 228);
      *(_DWORD *)(v44 + 20) = v45;
      v46 = v26 + v25;
      v47 = *(_DWORD **)(v26 + v25 + 248);
      if (v47)
        *v47 += 2;
      *(_QWORD *)(v44 + 24) = v47;
      *(_DWORD *)(v44 + 32) = *(_DWORD *)(v46 + 256);
      result = (uint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v43 + 224 * v35 + 40), (const Style *)(v46 + 264));
      v42 = v3[3] + 1;
    }
    v3[3] = v42;
    goto LABEL_41;
  }
  return result;
}

uint64_t WebCore::StyledMarkedText::coalesceAdjacentWithEqualDecorations(uint64_t result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const Style *v9;
  __int128 v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _DWORD *v20;
  WebCore::StyledMarkedText::Style *v21;
  __int128 v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;

  v3 = (unsigned int *)result;
  v4 = *(unsigned int *)(a2 + 12);
  if (v4 <= 1)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = v4;
    if ((_DWORD)v4)
    {
      v5 = 224 * v4;
      result = WTF::fastMalloc((WTF *)(224 * v4));
      v3[2] = v5 > 0xDF;
      *(_QWORD *)v3 = result;
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a2;
        result += 40;
        v8 = 224 * v6;
        v9 = (const Style *)(v7 + 40);
        do
        {
          *(_DWORD *)(result - 40) = 0;
          v10 = *(_OWORD *)(v9 - 36);
          *(_DWORD *)(result - 20) = *((_DWORD *)v9 - 5);
          *(_OWORD *)(result - 36) = v10;
          v11 = (_DWORD *)*((_QWORD *)v9 - 2);
          if (v11)
            *v11 += 2;
          *(_QWORD *)(result - 16) = v11;
          *(_DWORD *)(result - 8) = *((_DWORD *)v9 - 2);
          result = (uint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)result, v9)
                 + 224;
          v9 += 224;
          v8 -= 224;
        }
        while (v8);
      }
    }
    return result;
  }
  *(_QWORD *)(result + 8) = 0;
  if (v4 >= 0x124924A)
  {
    __break(0xC471u);
    JUMPOUT(0x196481D38);
  }
  v12 = 224 * v4;
  v13 = WTF::fastMalloc((WTF *)(224 * v4));
  v3[2] = (613566757 * (unint64_t)(v12 >> 5)) >> 32;
  *(_QWORD *)v3 = v13;
  if (!*(_DWORD *)(a2 + 12))
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x196481D30);
  }
  v14 = *(_QWORD *)a2;
  if (v12 >= 0xE0)
  {
    *(_DWORD *)v13 = 0;
    v22 = *(_OWORD *)(v14 + 4);
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
    *(_OWORD *)(v13 + 4) = v22;
    v23 = *(_DWORD **)(v14 + 24);
    if (v23)
      *v23 += 2;
    *(_QWORD *)(v13 + 24) = v23;
    *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
    v21 = (WebCore::StyledMarkedText::Style *)(v13 + 40);
  }
  else
  {
    v15 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, 1uLL, v14);
    v14 = v15;
    v16 = v3[3];
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)v3 + 224 * v16;
    *(_DWORD *)v18 = 0;
    v19 = *(_OWORD *)(v15 + 4);
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v15 + 20);
    *(_OWORD *)(v18 + 4) = v19;
    v20 = *(_DWORD **)(v15 + 24);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v18 + 24) = v20;
    *(_DWORD *)(v18 + 32) = *(_DWORD *)(v15 + 32);
    v21 = (WebCore::StyledMarkedText::Style *)(v17 + 224 * v16 + 40);
  }
  result = (uint64_t)WebCore::StyledMarkedText::Style::Style(v21, (const Style *)(v14 + 40));
  ++v3[3];
  v24 = *(_DWORD *)(a2 + 12);
  if (v24 != 1)
  {
    v25 = 0;
    v26 = *(_QWORD *)a2;
    v48 = 224 * v24 - 224;
    while (1)
    {
      v27 = v3[3];
      if (!(_DWORD)v27)
        goto LABEL_46;
      v28 = v27 - 1;
      v29 = *(_QWORD *)v3;
      v30 = *(_QWORD *)v3 + 224 * (v27 - 1);
      v32 = *(_DWORD *)(v30 + 8);
      v31 = (_DWORD *)(v30 + 8);
      if (v32 != *(_DWORD *)(v26 + v25 + 228))
        break;
      if (!WebCore::TextDecorationPainter::Styles::operator==((unint64_t *)(v29 + 224 * v28 + 88), (unint64_t *)(v26 + v25 + 312)))break;
      result = WebCore::TextPaintStyle::operator==((unint64_t *)(v29 + 224 * v28 + 48), (unint64_t *)(v26 + v25 + 272));
      if (!(_DWORD)result)
        break;
      v33 = *(unsigned __int8 *)(v26 + v25 + 432);
      if (*(_BYTE *)(v29 + 224 * v28 + 208))
        v34 = v33 == 0;
      else
        v34 = 1;
      if (v34)
      {
        if ((*(_BYTE *)(v29 + 224 * v28 + 208) != 0) != (v33 != 0))
          break;
      }
      else
      {
        result = WebCore::ShadowData::operator==((WebCore::Length *)(v29 + 224 * v28 + 144), (WebCore::Length *)(v26 + v25 + 368));
        if ((result & 1) == 0)
          break;
      }
      if (*(float *)(v29 + 224 * v28 + 216) != *(float *)(v26 + v25 + 440))
        break;
      *v31 = *(_DWORD *)(v26 + v25 + 232);
LABEL_42:
      v25 += 224;
      if (v48 == v25)
        return result;
    }
    v35 = v3[3];
    if ((_DWORD)v35 == v3[2])
    {
      v36 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v35 + 1, v26 + v25 + 224);
      v37 = v3[3];
      v38 = *(_QWORD *)v3;
      v39 = *(_QWORD *)v3 + 224 * v37;
      *(_DWORD *)v39 = 0;
      v40 = *(_OWORD *)(v36 + 4);
      *(_DWORD *)(v39 + 20) = *(_DWORD *)(v36 + 20);
      *(_OWORD *)(v39 + 4) = v40;
      v41 = *(_DWORD **)(v36 + 24);
      if (v41)
        *v41 += 2;
      *(_QWORD *)(v39 + 24) = v41;
      *(_DWORD *)(v39 + 32) = *(_DWORD *)(v36 + 32);
      result = (uint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v38 + 224 * v37 + 40), (const Style *)(v36 + 40));
      v42 = v37 + 1;
    }
    else
    {
      v43 = *(_QWORD *)v3;
      v44 = *(_QWORD *)v3 + 224 * v35;
      *(_DWORD *)v44 = 0;
      v45 = *(_DWORD *)(v26 + v25 + 244);
      *(_OWORD *)(v44 + 4) = *(_OWORD *)(v26 + v25 + 228);
      *(_DWORD *)(v44 + 20) = v45;
      v46 = v26 + v25;
      v47 = *(_DWORD **)(v26 + v25 + 248);
      if (v47)
        *v47 += 2;
      *(_QWORD *)(v44 + 24) = v47;
      *(_DWORD *)(v44 + 32) = *(_DWORD *)(v46 + 256);
      result = (uint64_t)WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v43 + 224 * v35 + 40), (const Style *)(v46 + 264));
      v42 = v3[3] + 1;
    }
    v3[3] = v42;
    goto LABEL_42;
  }
  return result;
}

BOOL WebCore::InlineIterator::BoxModernPath::isHorizontal(WebCore::InlineIterator::BoxModernPath *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Layout::Box *v4;
  uint64_t LineStyle;
  __int16 v6;
  char v8;

  v2 = *((_QWORD *)this + 1);
  if (*(unsigned int *)(v2 + 60) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x196481DD8);
  }
  v3 = *(_QWORD *)(v2 + 48) + 80 * a2;
  v4 = *(WebCore::Layout::Box **)v3;
  if (*(_DWORD *)(v3 + 40))
    LineStyle = (uint64_t)v4 + 16;
  else
    LineStyle = WebCore::Layout::Box::firstLineStyle(v4);
  v6 = (unsigned __int16)*(_DWORD *)(LineStyle + 44) >> 13;
  v8 = 2;
  switch((unsigned __int16)*(_DWORD *)(LineStyle + 44) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_6;
    case 3:
    case 5:
      LOBYTE(v6) = 3;
      goto LABEL_6;
    case 4:
      return (v8 & 6) != 2;
    default:
      LOBYTE(v6) = 0;
LABEL_6:
      v8 = v6;
      return (v8 & 6) != 2;
  }
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::~TextBoxPainter(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

void WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintCompositionUnderlines(float *a1, void *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  unsigned int v43;
  uint64_t v44;
  WebCore::RenderElement *v45;
  char *LineStyle;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  uint64_t v57;
  WebCore::RenderElement *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  void (**v68)(WebCore::RenderThemeIOS *__hidden);
  void *v69;
  unint64_t v70;
  unint64_t v71;
  WTF *v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v98;
  void *v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  WebCore::Editor *v112;
  WebCore::Editor *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  __int128 v120;
  __int128 v121;
  _QWORD *v122;
  float v123;
  float v124;
  unint64_t v125;
  float v126;
  float v127;
  _QWORD v128[2];

  v3 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 24)
                                                                                         + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 528)
                                         + 8)
                             + 296);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v112 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v112, v3);
    v113 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v112;
    if (v113)
    {
      WebCore::Editor::~Editor(v113, a2);
      if (*(_DWORD *)v114)
      {
        *(_QWORD *)(v114 + 496) = 0;
        *(_OWORD *)(v114 + 464) = 0u;
        *(_OWORD *)(v114 + 480) = 0u;
        *(_OWORD *)(v114 + 432) = 0u;
        *(_OWORD *)(v114 + 448) = 0u;
        *(_OWORD *)(v114 + 400) = 0u;
        *(_OWORD *)(v114 + 416) = 0u;
        *(_OWORD *)(v114 + 368) = 0u;
        *(_OWORD *)(v114 + 384) = 0u;
        *(_OWORD *)(v114 + 336) = 0u;
        *(_OWORD *)(v114 + 352) = 0u;
        *(_OWORD *)(v114 + 304) = 0u;
        *(_OWORD *)(v114 + 320) = 0u;
        *(_OWORD *)(v114 + 272) = 0u;
        *(_OWORD *)(v114 + 288) = 0u;
        *(_OWORD *)(v114 + 240) = 0u;
        *(_OWORD *)(v114 + 256) = 0u;
        *(_OWORD *)(v114 + 208) = 0u;
        *(_OWORD *)(v114 + 224) = 0u;
        *(_OWORD *)(v114 + 176) = 0u;
        *(_OWORD *)(v114 + 192) = 0u;
        *(_OWORD *)(v114 + 144) = 0u;
        *(_OWORD *)(v114 + 160) = 0u;
        *(_OWORD *)(v114 + 112) = 0u;
        *(_OWORD *)(v114 + 128) = 0u;
        *(_OWORD *)(v114 + 80) = 0u;
        *(_OWORD *)(v114 + 96) = 0u;
        *(_OWORD *)(v114 + 48) = 0u;
        *(_OWORD *)(v114 + 64) = 0u;
        *(_OWORD *)(v114 + 16) = 0u;
        *(_OWORD *)(v114 + 32) = 0u;
        *(_OWORD *)v114 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v114, a2);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
  }
  v5 = *(unsigned int *)(v4 + 60);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(unsigned int **)(v4 + 48);
    v8 = *v7;
    v9 = v7[1];
    v10 = 32 * v5;
    do
    {
      v6 |= *((_BYTE *)v7 + 24) != 0;
      v11 = *v7;
      v12 = v7[1];
      v7 += 8;
      if (v11 < v8)
        v8 = v11;
      if (v12 > v9)
        v9 = v12;
      v10 -= 32;
    }
    while (v10);
    v13 = 0;
    v14 = llroundf(89.25);
    if (v14 >= 255)
      v14 = 255;
    v15 = v14 & ~(v14 >> 63);
    v17 = *(_QWORD *)a1;
    v16 = *((_QWORD *)a1 + 1);
    v115 = v15 | 0x1104000000000000;
    v18 = *(unsigned int *)(v4 + 60);
    v117 = v18;
    v118 = v4;
    while (1)
    {
      v19 = *(_QWORD *)(v17 + 8);
      if (v16 >= *(unsigned int *)(v19 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x196482A74);
      }
      v20 = *(_QWORD *)(v4 + 48);
      v21 = (unsigned int *)(v20 + 32 * v13);
      v119 = v21 + 1;
      v22 = *(_QWORD *)(v19 + 48);
      v23 = *(_DWORD *)(v22 + 80 * v16 + 68);
      if (v21[1] <= v23)
      {
        if (++v13 >= v5)
          return;
        goto LABEL_130;
      }
      if (*v21 >= *(_DWORD *)(v22 + 80 * v16 + 72) + v23)
        return;
      v120 = 0u;
      v121 = 0u;
      v24 = atomic_load(&qword_1ECE84268);
      if (v24 != -1)
      {
        v122 = v128;
        v125 = (unint64_t)&v122;
        std::__call_once(&qword_1ECE84268, &v125, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::redesignedTextCursorEnabled(void)::{lambda(void)#1} &&>>);
      }
      if (byte_1ECE84252)
      {
        __asm { FMOV            V0.2S, #1.0 }
        if (*v21 >= v8)
        {
          *(_QWORD *)&v120 = _D0;
          *(_QWORD *)&v121 = _D0;
        }
        if (*v119 <= v9)
        {
          *((_QWORD *)&v120 + 1) = _D0;
          *((_QWORD *)&v121 + 1) = _D0;
        }
      }
      v29 = *((_QWORD *)a1 + 1);
      v30 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v29 >= *(unsigned int *)(v30 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x196482A84);
      }
      v31 = a1[12];
      v32 = *(_QWORD *)(v30 + 48) + 80 * v29;
      v33 = *(_DWORD *)(v32 + 68);
      v34 = *(_DWORD *)(v32 + 72);
      v35 = *v21;
      v36 = 0.0;
      if (v33 <= *v21)
      {
        v38 = *((_QWORD *)a1 + 2);
        v39 = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::textPosition(a1);
        v40 = *(_QWORD *)(v38 + 104);
        if (v40)
        {
          v41 = *(_DWORD *)(v40 + 4);
          if (v41 > v33)
          {
            v42 = v39;
            if (v35 >= v41)
              v43 = v41;
            else
              v43 = v35;
            v44 = *(_QWORD *)(v38 + 32);
            if (*((_BYTE *)a1 + 152))
            {
              v116 = v43;
              if (v44)
                v45 = *(WebCore::RenderElement **)(v44 + 8);
              else
                v45 = 0;
              LineStyle = WebCore::RenderElement::firstLineStyle(v45, (WTF::StringImpl *)a2);
              v43 = v116;
            }
            else
            {
              if (v44)
                v44 = *(_QWORD *)(v44 + 8);
              LineStyle = (char *)(v44 + 80);
            }
            v36 = WebCore::RenderText::width(v38, v33, v43 - v33, (WebCore::FontCascade *)(*((_QWORD *)LineStyle + 4) + 32), 0, 0, v42);
          }
        }
        v37 = v35;
      }
      else
      {
        v37 = *(_DWORD *)(v32 + 68);
      }
      v47 = v34 + v33;
      if (v47 != *v119)
        break;
      if (*((_BYTE *)a1 + 124))
        goto LABEL_47;
      if (v33 > v35)
      {
        v5 = v117;
        v4 = v118;
        goto LABEL_68;
      }
LABEL_50:
      v51 = *((_QWORD *)a1 + 2);
      v52 = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::textPosition(a1);
      v53 = *(_QWORD *)(v51 + 104);
      v31 = 0.0;
      if (v53)
      {
        v54 = *(_DWORD *)(v53 + 4);
        if (v54 > v37)
        {
          v55 = v52;
          if (v47 >= v54)
            v56 = v54;
          else
            v56 = v47;
          v57 = *(_QWORD *)(v51 + 32);
          if (*((_BYTE *)a1 + 152))
          {
            if (v57)
              v58 = *(WebCore::RenderElement **)(v57 + 8);
            else
              v58 = 0;
            v59 = WebCore::RenderElement::firstLineStyle(v58, (WTF::StringImpl *)a2);
          }
          else
          {
            if (v57)
              v57 = *(_QWORD *)(v57 + 8);
            v59 = (char *)(v57 + 80);
          }
          v31 = WebCore::RenderText::width(v51, v37, v56 - v37, (WebCore::FontCascade *)(*((_QWORD *)v59 + 4) + 32), 0, 0, v36 + v55);
        }
      }
      v60 = *((_QWORD *)a1 + 1);
      v61 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v60 >= *(unsigned int *)(v61 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x196482A94);
      }
      v5 = v117;
      v4 = v118;
      if ((*(_BYTE *)(*(_QWORD *)(v61 + 48) + 80 * v60 + 49) & 1) != 0)
        v36 = (float)(a1[12] - v31) - v36;
LABEL_68:
      v62 = atomic_load(&qword_1ECE84268);
      if (v62 != -1)
      {
        v122 = v128;
        v125 = (unint64_t)&v122;
        std::__call_once(&qword_1ECE84268, &v125, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::redesignedTextCursorEnabled(void)::{lambda(void)#1} &&>>);
      }
      if (!byte_1ECE84252)
      {
        v72 = WebCore::RenderStyle::metricsOfPrimaryFont(*((WebCore::RenderStyle **)a1 + 4), a2);
        v73 = 1.0;
        if (*(_BYTE *)(v20 + 32 * v13 + 24) && (float)(a1[13] - (float)*((int *)v72 + 11)) >= 2.0)
          v73 = 2.0;
        v74 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 32);
        if (v74)
          v74 = *(_QWORD *)(v74 + 8);
        v75 = v74 + 80;
        v76 = v20 + 32 * v13;
        if (*(_BYTE *)(v76 + 8))
          WebCore::RenderStyle::visitedDependentColorWithColorFilter(v75, 342, 0, &v125);
        else
          WebCore::RenderStyle::colorByApplyingColorFilter(v75, (const WebCore::Color *)(v76 + 16), &v125);
        v77 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 80);
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v77, (const WebCore::Color *)&v125);
        if (*(float *)(v77 + 188) != v73)
        {
          *(float *)(v77 + 188) = v73;
          *(_DWORD *)(v77 + 184) |= 8u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 88))(v77, v77 + 8);
        v78 = (float)(a1[35] + a1[13]) - v73;
        *(float *)&v122 = (float)(v36 + 1.0) + a1[34];
        *((float *)&v122 + 1) = v78;
        v123 = v31 + -2.0;
        v124 = v73;
        WebCore::GraphicsContext::drawLineForText(v77, (float *)&v122, *((unsigned __int8 *)a1 + 154), 0, 1);
        if ((v125 & 0x8000000000000) == 0)
          goto LABEL_124;
        v101 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFLL);
        do
        {
          v104 = __ldaxr(v101);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v101));
        v5 = v117;
        v4 = v118;
        if (v105)
          goto LABEL_124;
LABEL_143:
        atomic_store(1u, v101);
        WTF::fastFree((WTF *)v101, a2);
        goto LABEL_124;
      }
      v63 = *(_QWORD *)(v20 + 32 * v13 + 16);
      if ((v63 & 0x8000000000000) != 0)
      {
        if (*(float *)((v63 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
          goto LABEL_124;
LABEL_73:
        if ((float)(a1[13]
                   - (float)*((int *)WebCore::RenderStyle::metricsOfPrimaryFont(*((WebCore::RenderStyle **)a1 + 4), a2)
                            + 11)) >= 2.0)
          v64 = 2.0;
        else
          v64 = 1.0;
        v65 = *((_QWORD *)a1 + 2);
        if ((*(_BYTE *)(v65 + 45) & 2) != 0)
        {
          v66 = *(_QWORD *)(v65 + 32);
          if (v66)
            v66 = *(_QWORD *)(v66 + 8);
        }
        else
        {
          v66 = *((_QWORD *)a1 + 2);
        }
        v67 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 24) + 8) + 40) + 8), (const WebCore::RenderStyle *)(v66 + 80));
        {
          v68 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
        }
        else
        {
          v100 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
          *(_OWORD *)(v100 + 40) = 0u;
          *(_OWORD *)(v100 + 24) = 0u;
          v68 = &off_1E335BC30;
          *(_QWORD *)v100 = &off_1E335BC30;
        }
        ((void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, _QWORD))v68[34])(v128, &WebCore::RenderTheme::singleton(void)::theme, 207, v67 | 2u);
        if (*(_BYTE *)(v20 + 32 * v13 + 24) == 0 && (v6 & 1) != 0)
        {
          v70 = v128[0];
          if ((v128[0] & 0x8000000000000) != 0)
          {
            v79 = *(_DWORD *)((v128[0] & 0xFFFFFFFFFFFFLL) + 0xC);
            if (HIBYTE(v128[0]) >= 0x14)
              v80 = 0x110C000000000000;
            else
              v80 = v128[0] & 0xFF00000000000000 | 0xC000000000000;
            v81 = v128[0] & 0x1000000000000;
            v82 = *(_QWORD *)((v128[0] & 0xFFFFFFFFFFFFLL) + 4);
            v83 = WTF::fastMalloc((WTF *)0x14);
            *(_DWORD *)v83 = 1;
            *(_QWORD *)(v83 + 4) = v82;
            *(_DWORD *)(v83 + 12) = v79;
            *(_DWORD *)(v83 + 16) = 1051931443;
            v71 = v80 | v81 | v83;
            v70 = v128[0];
          }
          else
          {
            v71 = v115 | v128[0] & 0x10000FFFFFF00;
          }
          if ((v70 & 0x8000000000000) != 0)
          {
            v106 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFLL);
            if ((v71 & 0x8000000000000) != 0
              && (v109 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL),
                  *(float *)((v70 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 4))
              && *(float *)((v70 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 8)
              && *(float *)((v70 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 0xC)
              && *(float *)((v70 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v71 & 0xFFFFFFFFFFFFLL) + 0x10)
              && HIBYTE(v70) == HIBYTE(v71)
              && BYTE6(v70) == BYTE6(v71))
            {
              do
              {
                v110 = __ldaxr(v109);
                v111 = v110 - 1;
              }
              while (__stlxr(v111, v109));
              v5 = v117;
              v4 = v118;
              if (!v111)
              {
                atomic_store(1u, v109);
                WTF::fastFree((WTF *)(v71 & 0xFFFFFFFFFFFFLL), v69);
              }
            }
            else
            {
              do
              {
                v107 = __ldaxr(v106);
                v108 = v107 - 1;
              }
              while (__stlxr(v108, v106));
              v5 = v117;
              v4 = v118;
              if (!v108)
              {
                atomic_store(1u, v106);
                WTF::fastFree((WTF *)v106, v69);
              }
LABEL_102:
              v128[0] = v71;
            }
          }
          else if (v70 != v71 || (v71 & 0x8000000000000) != 0)
          {
            goto LABEL_102;
          }
        }
        v84 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 80);
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v84, (const WebCore::Color *)v128);
        if (*(float *)(v84 + 188) != v64)
        {
          *(float *)(v84 + 188) = v64;
          *(_DWORD *)(v84 + 184) |= 8u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 88))(v84, v84 + 8);
        v85 = (float)(a1[35] + a1[13]) - v64;
        *(float *)&v125 = v36 + a1[34];
        *((float *)&v125 + 1) = v85;
        v126 = v31;
        v127 = v64;
        if (!WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)&v120))
        {
          v86 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 528);
          if (v86)
          {
            v87 = *(_QWORD *)(v86 + 8);
            if (v87)
            {
              v88 = *(_QWORD *)(v87 + 24);
              if (v88)
              {
                v89 = *(_DWORD **)(v88 + 8);
                if (v89)
                {
                  v90 = (*v89)++;
                  if (v90)
                  {
                    *v89 = v90;
                  }
                  else
                  {
                    WebCore::Page::~Page((uint64_t)v89);
                    WTF::fastFree(v98, v99);
                  }
                }
              }
            }
          }
          v91 = *((_QWORD *)a1 + 1);
          v92 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          if (v91 < *(unsigned int *)(v92 + 60))
          {
            v93 = *(unsigned __int16 *)(*(_QWORD *)(v92 + 48) + 80 * v91 + 50);
            if ((v93 & 0x40) != 0)
              v94 = 2;
            else
              v94 = 3;
            if ((v93 & 0x20) != 0)
              v94 = 1;
            if ((~v93 & 0x60) != 0)
              v95 = v94;
            else
              v95 = 0;
            __asm { BR              X9 }
          }
          __break(0xC471u);
          JUMPOUT(0x196482AA4);
        }
        WebCore::GraphicsContext::drawLineForText(v84, (float *)&v125, *((unsigned __int8 *)a1 + 154), 0, 1);
        if ((v128[0] & 0x8000000000000) == 0)
          goto LABEL_124;
        v101 = (unsigned int *)(v128[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v102 = __ldaxr(v101);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v101));
        v5 = v117;
        v4 = v118;
        if (v103)
          goto LABEL_124;
        goto LABEL_143;
      }
      if (*(_QWORD *)(v20 + 32 * v13 + 16))
        goto LABEL_73;
LABEL_124:
      v17 = *(_QWORD *)a1;
      v16 = *((_QWORD *)a1 + 1);
      v96 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v16 >= *(unsigned int *)(v96 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x196482A8CLL);
      }
      ++v13;
      if (*v119 > *(_DWORD *)(*(_QWORD *)(v96 + 48) + 80 * v16 + 72)
                 + *(_DWORD *)(*(_QWORD *)(v96 + 48) + 80 * v16 + 68)
        || v13 >= v5)
      {
        return;
      }
      v18 = *(unsigned int *)(v4 + 60);
LABEL_130:
      if (v13 >= v18)
      {
        __break(0xC471u);
        JUMPOUT(0x196482A7CLL);
      }
    }
    if (*v119 < v47)
      v47 = *v119;
    if (!*((_BYTE *)a1 + 124))
      goto LABEL_50;
LABEL_47:
    v48 = *((_QWORD *)a1 + 1);
    v49 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v48 >= *(unsigned int *)(v49 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x196482A9CLL);
    }
    v50 = *((_DWORD *)a1 + 30) + *(_DWORD *)(*(_QWORD *)(v49 + 48) + 80 * v48 + 68);
    if (v50 < v47)
      v47 = v50;
    goto LABEL_50;
  }
}

__n128 WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  __n128 result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a2 + 12);
  v3 = v2 + *(unsigned int *)(a1 + 12);
  if (v3 > *(unsigned int *)(a1 + 8))
  {
    v10 = a2;
    v11 = a1;
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v3);
    a2 = v10;
    a1 = v11;
    v2 = *(unsigned int *)(v10 + 12);
  }
  if ((_DWORD)v2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = 40 * v2;
    v7 = *(_QWORD *)a2 + 24;
    do
    {
      v8 = *(_QWORD *)a1 + 40 * v5;
      *(_DWORD *)v8 = 0;
      result = *(__n128 *)(v7 - 20);
      *(_DWORD *)(v8 + 20) = *(_DWORD *)(v7 - 4);
      *(__n128 *)(v8 + 4) = result;
      v9 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v8 + 24) = v9;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)(v7 + 8);
      v5 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v5;
      v7 += 40;
      v6 -= 40;
    }
    while (v6);
  }
  return result;
}

uint64_t *WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintCompositionForeground(uint64_t a1, uint64_t a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v6;
  WebCore::Editor *v7;
  void *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  void *v37;
  void *v38;
  void *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WebCore::RenderElement *v42;
  char *LineStyle;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned int *v56[23];
  int v57;
  unsigned int *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int *v63;
  char v64;
  char v65;
  char v66;
  char v67;
  unsigned int *v68;
  unint64_t v69[22];
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;

  v3 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24)
                                                                                         + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 528)
                                         + 8)
                             + 296);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v6 = a1;
    v7 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v7, v3);
    v9 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v7;
    if (v9)
    {
      WebCore::Editor::~Editor(v9, v8);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 496) = 0;
        *(_OWORD *)(v10 + 464) = 0u;
        *(_OWORD *)(v10 + 480) = 0u;
        *(_OWORD *)(v10 + 432) = 0u;
        *(_OWORD *)(v10 + 448) = 0u;
        *(_OWORD *)(v10 + 400) = 0u;
        *(_OWORD *)(v10 + 416) = 0u;
        *(_OWORD *)(v10 + 368) = 0u;
        *(_OWORD *)(v10 + 384) = 0u;
        *(_OWORD *)(v10 + 336) = 0u;
        *(_OWORD *)(v10 + 352) = 0u;
        *(_OWORD *)(v10 + 304) = 0u;
        *(_OWORD *)(v10 + 320) = 0u;
        *(_OWORD *)(v10 + 272) = 0u;
        *(_OWORD *)(v10 + 288) = 0u;
        *(_OWORD *)(v10 + 240) = 0u;
        *(_OWORD *)(v10 + 256) = 0u;
        *(_OWORD *)(v10 + 208) = 0u;
        *(_OWORD *)(v10 + 224) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v11);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
    a1 = v6;
  }
  if (!*(_DWORD *)(v4 + 76) || !*(_BYTE *)(a1 + 156))
    return (uint64_t *)WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground((WTF::StringImpl *)a1, a2);
  v12 = (_QWORD *)a1;
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v72, (uint64_t *)(v4 + 64));
  v70 = 0;
  v71 = 0;
  v13 = v12[1];
  v14 = *(_QWORD *)(*v12 + 8);
  if (v13 >= *(unsigned int *)(v14 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x1964830A8);
  }
  if (!v73)
  {
    __break(0xC471u);
    JUMPOUT(0x1964830B0);
  }
  v15 = v12;
  v16 = *(_DWORD *)(*(_QWORD *)(v14 + 48) + 80 * v13 + 68);
  v17 = *v72;
  LOBYTE(v68) = 0;
  LOBYTE(v69[0]) = 0;
  LOBYTE(v57) = 0;
  BYTE4(v58) = 0;
  v63 = (unsigned int *)__PAIR64__(v17, v16);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v70, (unint64_t)&v63);
  WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)&v63, v18);
  std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v57, v19);
  std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v68, v20);
  if (!v73)
    goto LABEL_56;
  v21 = 0;
  do
  {
    v22 = (unint64_t)&v72[10 * v21];
    v23 = HIDWORD(v71);
    if (HIDWORD(v71) == (_DWORD)v71)
    {
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight&>((uint64_t)&v70, v22);
    }
    else
    {
      WebCore::CompositionHighlight::CompositionHighlight(v70 + 40 * HIDWORD(v71), v22);
      HIDWORD(v71) = v23 + 1;
    }
    v24 = v73;
    if (v21 == v73 - 1)
    {
      ++v21;
    }
    else
    {
      if (v21 >= v73)
        goto LABEL_59;
      v25 = v21 + 1;
      if (v21 + 1 >= v73)
      {
        __break(0xC471u);
        JUMPOUT(0x196483088);
      }
      v26 = v72[10 * v21 + 1];
      v27 = v72[10 * v25];
      LOBYTE(v68) = 0;
      LOBYTE(v69[0]) = 0;
      LOBYTE(v57) = 0;
      BYTE4(v58) = 0;
      v63 = (unsigned int *)__PAIR64__(v27, v26);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v28 = HIDWORD(v71);
      if (HIDWORD(v71) == (_DWORD)v71)
      {
        WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v70, (unint64_t)&v63);
      }
      else
      {
        WebCore::CompositionHighlight::CompositionHighlight(v70 + 40 * HIDWORD(v71), (uint64_t)&v63);
        HIDWORD(v71) = v28 + 1;
      }
      WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)&v63, v29);
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v57, v30);
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v68, v31);
      v24 = v73;
      v21 = v25;
    }
  }
  while (v21 < v24);
  if (!(_DWORD)v24)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1964830A0);
  }
  v32 = v12[1];
  v33 = *(_QWORD *)(*v12 + 8);
  if (v32 >= *(unsigned int *)(v33 + 60))
  {
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x196483080);
  }
  v34 = v72[10 * v24 - 9];
  v35 = *(_DWORD *)(*(_QWORD *)(v33 + 48) + 80 * v32 + 72) + *(_DWORD *)(*(_QWORD *)(v33 + 48) + 80 * v32 + 68);
  LOBYTE(v68) = 0;
  LOBYTE(v69[0]) = 0;
  LOBYTE(v57) = 0;
  BYTE4(v58) = 0;
  v63 = (unsigned int *)__PAIR64__(v35, v34);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v36 = HIDWORD(v71);
  if (HIDWORD(v71) == (_DWORD)v71)
  {
    WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v70, (unint64_t)&v63);
  }
  else
  {
    WebCore::CompositionHighlight::CompositionHighlight(v70 + 40 * HIDWORD(v71), (uint64_t)&v63);
    HIDWORD(v71) = v36 + 1;
  }
  WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)&v63, v37);
  std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v57, v38);
  std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v68, v39);
  v41 = *(_QWORD *)(v15[2] + 32);
  if (*((_BYTE *)v15 + 152))
  {
    if (v41)
      v42 = *(WebCore::RenderElement **)(v41 + 8);
    else
      v42 = 0;
    LineStyle = WebCore::RenderElement::firstLineStyle(v42, v40);
  }
  else
  {
    if (v41)
      v41 = *(_QWORD *)(v41 + 8);
    LineStyle = (char *)(v41 + 80);
  }
  if (HIDWORD(v71))
  {
    v44 = 40 * HIDWORD(v71);
    v45 = v70 + 24;
    while (1)
    {
      WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)&v68, (const WebCore::RenderText *)v15[2], (const WebCore::RenderStyle *)LineStyle, *((unsigned __int8 *)v15 + 152), (const WebCore::PaintInfo *)v15[12]);
      v46 = v15[1];
      v47 = *(_QWORD *)(*v15 + 8);
      if (v46 >= *(unsigned int *)(v47 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x196483090);
      }
      v48 = *(_DWORD *)(v45 - 20);
      v49 = *(_QWORD *)(v47 + 48);
      v50 = *(_DWORD *)(v49 + 80 * v46 + 68);
      if (v48 > v50)
      {
        v51 = *(_DWORD *)(v45 - 24);
        if (v51 >= *(_DWORD *)(v49 + 80 * v46 + 72) + v50)
          break;
        v52 = WebCore::TextBoxSelectableRange::clamp((unsigned int *)v15 + 26, v51, v48);
        if (*(_BYTE *)(v45 + 8))
          WebCore::Color::operator=(v69, (_QWORD *)v45);
        v57 = 0;
        v58 = v52;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)v56, (const Style *)&v68);
        WebCore::StyledMarkedText::StyledMarkedText((WebCore::StyledMarkedText *)&v63, (const WebCore::MarkedText *)&v57, (uint64_t *)v56);
        WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground((WTF::StringImpl *)v15, (uint64_t)&v63);
        WebCore::StyledMarkedText::~StyledMarkedText(&v63);
        WebCore::StyledMarkedText::Style::~Style(v56);
        v53 = v15[1];
        v54 = *(_QWORD *)(*v15 + 8);
        if (v53 >= *(unsigned int *)(v54 + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x196483098);
        }
        if (*(_DWORD *)(v45 - 20) > (*(_DWORD *)(*(_QWORD *)(v54 + 48) + 80 * v53 + 72)
                                                  + *(_DWORD *)(*(_QWORD *)(v54 + 48) + 80 * v53 + 68)))
          break;
      }
      WebCore::StyledMarkedText::Style::~Style(&v68);
      v45 += 40;
      v44 -= 40;
      if (!v44)
        goto LABEL_49;
    }
    WebCore::StyledMarkedText::Style::~Style(&v68);
  }
LABEL_49:
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v70, v40);
  return WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v72, v55);
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::fontCascade(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Layout::Box *v4;
  uint64_t LineStyle;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 153))
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v7 + 46) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x196483150);
    }
    LineStyle = *(_QWORD *)(v7 + 120);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v1 >= *(unsigned int *)(v2 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x196483130);
    }
    v3 = *(_QWORD *)(v2 + 48) + 80 * v1;
    v4 = *(WebCore::Layout::Box **)v3;
    if (*(_DWORD *)(v3 + 40))
      LineStyle = (uint64_t)v4 + 16;
    else
      LineStyle = WebCore::Layout::Box::firstLineStyle(v4);
  }
  return *(_QWORD *)(LineStyle + 32) + 32;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 40 * v7;
      do
      {
        *(_QWORD *)v6 = *(_QWORD *)v8;
        *(_BYTE *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 16) = 0;
        if (*(_BYTE *)(v8 + 16))
        {
          v10 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v6 + 8) = v10;
          if ((v10 & 0x8000000000000) != 0)
          {
            v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
          }
          *(_BYTE *)(v6 + 16) = 1;
        }
        *(_BYTE *)(v6 + 24) = 0;
        *(_BYTE *)(v6 + 32) = 0;
        if (*(_BYTE *)(v8 + 32))
        {
          v11 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v6 + 24) = v11;
          if ((v11 & 0x8000000000000) != 0)
          {
            v14 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
          }
          *(_BYTE *)(v6 + 32) = 1;
        }
        v6 += 40;
        v8 += 40;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CompositionHighlight::~CompositionHighlight(WebCore::CompositionHighlight *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::CompositionHighlight *v10;

  if (*((_BYTE *)this + 32))
  {
    v2 = *((_QWORD *)this + 3);
    if ((v2 & 0x8000000000000) != 0)
    {
      v10 = this;
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
        this = v10;
      }
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v3 = *((_QWORD *)this + 1);
    if ((v3 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
}

WebCore::RenderElement *WebCore::RenderText::spellingErrorPseudoStyle(WebCore::RenderText *this)
{
  WebCore::RenderElement *result;
  WTF::StringImpl *v2;

  result = (WebCore::RenderElement *)WebCore::RenderObject::firstNonAnonymousAncestor(this);
  if (result)
    return (WebCore::RenderElement *)WebCore::RenderElement::spellingErrorPseudoStyle(result, v2);
  return result;
}

WebCore::RenderElement *WebCore::RenderText::grammarErrorPseudoStyle(WebCore::RenderText *this)
{
  WebCore::RenderElement *result;
  WTF::StringImpl *v2;

  result = (WebCore::RenderElement *)WebCore::RenderObject::firstNonAnonymousAncestor(this);
  if (result)
    return (WebCore::RenderElement *)WebCore::RenderElement::grammarErrorPseudoStyle(result, v2);
  return result;
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintPlatformDocumentMarker(uint64_t result, uint64_t a2, const WebCore::MarkedText *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  CGFloat v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  WTF::MonotonicTime *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  CGFloat x;
  float v22;
  void *v23;
  uint64_t v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  const CGRect *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[8];
  CGFloat v46;
  CGFloat v47;
  float v48[4];
  CGRect v49;

  if (!*(_BYTE *)(*(_QWORD *)(result + 24) + 3382))
  {
    v4 = result;
    v5 = *(unsigned int **)result;
    if (*(_QWORD *)result)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = *(double *)(result + 8);
    *(_QWORD *)&v49.origin.x = v5;
    v49.origin.y = v7;
    LODWORD(v49.size.width) = 0;
    WebCore::calculateDocumentMarkerBounds((WebCore *)&v49, (const WebCore::InlineIterator::TextBoxIterator *)a2, a3);
    v9 = v8;
    v11 = v10;
    v48[2] = v12;
    v48[3] = v13;
    if (LODWORD(v49.size.width) != -1)
      ((void (*)(CGFloat *, CGRect *))off_1E343A000[LODWORD(v49.size.width)])(&v47, &v49);
    v14 = v11 + *(float *)(v4 + 140);
    v48[0] = v9 + *(float *)(v4 + 136);
    v48[1] = v14;
    v15 = 1;
    switch(*(_BYTE *)(a2 + 12))
    {
      case 1:
        v15 = 2;
        goto LABEL_14;
      case 2:
        v15 = 3;
        goto LABEL_14;
      case 3:
        v16 = *(WTF::MonotonicTime **)(*(_QWORD *)(v4 + 96) + 80);
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16)
                                                                                                + 24)
                                                                                    + 8)
                                                                        + 40)
                                                            + 8)
                                                + 528)
                                    + 8)
                        + 288);
        v18 = *(void **)(v17 + 40);
        if (v18)
        {
          if (objc_msgSend(*(id *)(v17 + 40), "conformsToProtocol:", &unk_1EE342188))
            v18 = (void *)objc_msgSend(v18, "superview");
          objc_msgSend(v18, "frame");
          v49.origin.x = v29;
          v49.origin.y = v30;
          v49.size.width = v31;
          v49.size.height = v32;
          WebCore::enclosingIntRect(&v49, v33);
          v19 = v34;
        }
        else
        {
          v19 = *(_QWORD *)(v17 + 56);
        }
        return WebCore::drawUnifiedTextReplacementUnderline(v16, v48, v19);
      case 6:
        v15 = 4;
        goto LABEL_14;
      case 0xA:
        v15 = 0;
        goto LABEL_14;
      default:
LABEL_14:
        {
          v28 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
          *(_OWORD *)(v28 + 40) = 0u;
          *(_OWORD *)(v28 + 24) = 0u;
          *(_QWORD *)v28 = &off_1E335BC30;
        }
        WebCore::RenderTheme::documentMarkerLineColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, *(_QWORD *)(v4 + 16), v15, &v49);
        v20 = *(_QWORD *)(a2 + 16);
        x = v49.origin.x;
        if (!v20)
          goto LABEL_24;
        if ((*(_QWORD *)&v49.origin.x & 0x8000000000000) != 0)
          v22 = *(float *)((*(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v22 = (float)LOBYTE(v49.origin.x) / 255.0;
        WebCore::Color::colorWithAlpha((uint64_t)&v49, *(float *)(v20 + 148) * v22, (uint64_t *)&v47);
        if ((*(_QWORD *)&v49.origin.x & 0x8000000000000) != 0)
        {
          v39 = (unsigned int *)(*(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL);
          if ((*(_QWORD *)&v47 & 0x8000000000000) == 0
            || (v42 = (unsigned int *)(*(_QWORD *)&v47 & 0xFFFFFFFFFFFFLL),
                *(float *)((*(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v47 & 0xFFFFFFFFFFFFLL)
                                                                                          + 4))
            || *(float *)((*(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v47 & 0xFFFFFFFFFFFFLL)
                                                                                         + 8)
            || *(float *)((*(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v47 & 0xFFFFFFFFFFFFLL)
                                                                                           + 0xC)
            || *(float *)((*(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v47 & 0xFFFFFFFFFFFFLL)
                                                                                            + 0x10)
            || HIBYTE(*(_QWORD *)&v49.origin.x) != HIBYTE(*(_QWORD *)&v47)
            || BYTE6(v49.origin.x) != BYTE6(v47))
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              WTF::fastFree((WTF *)v39, v23);
            }
            goto LABEL_22;
          }
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v42);
            WTF::fastFree((WTF *)v42, v23);
          }
        }
        else if (*(_QWORD *)&v49.origin.x != *(_QWORD *)&v47 || (*(_QWORD *)&v47 & 0x8000000000000) != 0)
        {
LABEL_22:
          v49.origin.x = v47;
        }
        x = v49.origin.x;
LABEL_24:
        v24 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 80);
        v45[0] = v15;
        v46 = x;
        if ((*(_QWORD *)&x & 0x8000000000000) != 0)
        {
          v26 = (unsigned int *)(*(_QWORD *)&x & 0xFFFFFFFFFFFFLL);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
        }
        result = (*(uint64_t (**)(uint64_t, float *, _BYTE *))(*(_QWORD *)v24 + 576))(v24, v48, v45);
        if ((*(_QWORD *)&v46 & 0x8000000000000) != 0)
        {
          result = *(_QWORD *)&v46 & 0xFFFFFFFFFFFFLL;
          do
          {
            v35 = __ldaxr((unsigned int *)result);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unsigned int *)result));
          if (!v36)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v25);
          }
        }
        if ((*(_QWORD *)&v49.origin.x & 0x8000000000000) != 0)
        {
          result = *(_QWORD *)&v49.origin.x & 0xFFFFFFFFFFFFLL;
          do
          {
            v37 = __ldaxr((unsigned int *)result);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, (unsigned int *)result));
          if (!v38)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v25);
          }
        }
        break;
    }
  }
  return result;
}

uint64_t WebCore::updateGraphicsContext(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t result;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  v6 = *(unsigned __int8 *)(a1 + 341);
  if (*(float *)(a2 + 24) > 0.0)
  {
    v17 = *(_QWORD *)(a2 + 8);
    if ((v17 & 0x8000000000000) != 0)
    {
      if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
        goto LABEL_2;
    }
    else if (!*(_QWORD *)(a2 + 8))
    {
      goto LABEL_2;
    }
    if (v6 != (v6 | 2))
    {
      *(_BYTE *)(a1 + 341) = v6 | 2;
      *(_DWORD *)(a1 + 184) |= 0x200u;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
      LOBYTE(v6) = v6 | 2;
    }
  }
LABEL_2:
  v7 = *(unsigned __int8 *)(a2 + 29);
  if (*(unsigned __int8 *)(a1 + 347) != v7)
  {
    *(_BYTE *)(a1 + 347) = v7;
    *(_DWORD *)(a1 + 184) |= 0x10000u;
  }
  v8 = (uint64_t *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  v11 = (unint64_t *)(a2 + 16);
  if (a3 != 1)
    v11 = (unint64_t *)a2;
  v12 = *v11;
  v21 = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  if ((v6 & 1) != 0)
  {
    v13 = *v8;
    if ((v21 & 0x8000000000000) != 0)
    {
      if ((v13 & 0x8000000000000) == 0
        || (v23 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4),
            v22 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4),
            result = WebCore::operator==<float,4ul>((float *)&v23, (float *)&v22),
            !(_DWORD)result)
        || HIBYTE(v21) != HIBYTE(*v8)
        || BYTE6(v21) != BYTE6(*v8))
      {
LABEL_38:
        result = WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)a1, (const WebCore::Color *)&v21);
      }
    }
    else if (v21 != v13 || (v13 & 0x8000000000000) != 0)
    {
      goto LABEL_38;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (!WebCore::operator==((uint64_t *)(a2 + 8), (uint64_t *)(a1 + 96)))
      WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)a1, (const WebCore::Color *)(a2 + 8));
    v18 = *(float *)(a2 + 24);
    if (v18 != *(float *)(a1 + 188))
    {
      *(float *)(a1 + 188) = v18;
      *(_DWORD *)(a1 + 184) |= 8u;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, *(unsigned __int8 *)(a2 + 31));
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 296))(a1, *(unsigned __int8 *)(a2 + 32));
    if (!*(_BYTE *)(a2 + 31))
      result = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 320))(a1, *(float *)(a2 + 36));
  }
  if ((v21 & 0x8000000000000) != 0)
  {
    result = v21 & 0xFFFFFFFFFFFFLL;
    do
    {
      v19 = __ldaxr((unsigned int *)result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)result));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

__n128 WebCore::TextPainter::setStyle(__n128 *a1, uint64_t a2)
{
  __n128 result;

  WebCore::Color::operator=(&a1[1].n128_u64[1], (_QWORD *)a2);
  WebCore::Color::operator=(a1[2].n128_u64, (_QWORD *)(a2 + 8));
  WebCore::Color::operator=(&a1[2].n128_u64[1], (_QWORD *)(a2 + 16));
  result = *(__n128 *)(a2 + 24);
  a1[3] = result;
  return result;
}

WTF::StringImpl *WebCore::TextPainter::setEmphasisMark(WebCore::TextPainter *this, const WTF::AtomString *a2, float a3, const WebCore::RenderCombineText *a4)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((float *)this + 26) = a3;
  *((_QWORD *)this + 11) = a4;
  return result;
}

uint64_t WebCore::TextDecorationPainter::paintBackgroundDecorations(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  _QWORD *v13;
  uint64_t v15;
  BOOL v16;
  char v17;
  __int32 v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  WebCore::FilterOperations *v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  void *v39;
  void *v40;
  float v41;
  float v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  float v50;
  double v51;
  int v52;
  float32x2_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  float v71;
  __n128 v72;
  __n128 v73;
  _QWORD v74[4];
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  __int128 v78;
  char v79;
  uint64_t v80;
  _QWORD v81[2];

  v13 = (_QWORD *)result;
  v74[0] = result;
  v74[1] = a4;
  v74[2] = a6;
  v74[3] = a3;
  if (*(_BYTE *)(result + 8))
    goto LABEL_63;
  if ((a5 & 1) != 0)
  {
    v43 = *(_QWORD *)a6;
    if ((*(_QWORD *)a6 & 0x8000000000000) != 0)
    {
LABEL_114:
      if (*(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
        goto LABEL_63;
    }
    else if ((_BYTE)v43 != 0xFF)
    {
LABEL_63:
      v17 = 0;
      goto LABEL_10;
    }
  }
  if ((a5 & 2) == 0)
    goto LABEL_4;
  v59 = *(_QWORD *)(a6 + 16);
  if ((v59 & 0x8000000000000) != 0)
  {
    if (*(float *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
      goto LABEL_63;
  }
  else if ((_BYTE)v59 != 0xFF)
  {
    goto LABEL_63;
  }
LABEL_4:
  if ((a5 & 4) != 0)
  {
    v15 = *(_QWORD *)(a6 + 32);
    if ((v15 & 0x8000000000000) != 0)
      v16 = *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0;
    else
      v16 = ~*(_BYTE *)(a6 + 32) == 0;
    v17 = v16;
  }
  else
  {
    v17 = 1;
  }
LABEL_10:
  v18 = *(_DWORD *)(a4 + 12);
  v19 = *(float *)(a4 + 8);
  LODWORD(v20) = v18;
  v21 = v13[2];
  v22 = 0.0;
  if (!v21)
    goto LABEL_11;
  if (!*(_QWORD *)(v21 + 56))
    v17 = 1;
  if ((v17 & 1) != 0)
  {
LABEL_11:
    v23 = 0;
  }
  else
  {
    v47 = *(_DWORD *)(a4 + 16);
    v48 = *(_DWORD *)(a4 + 36);
    LODWORD(v76) = *(_DWORD *)(a4 + 8);
    HIDWORD(v76) = v18;
    v77 = (uint64_t *)__PAIR64__(v48, v47);
    v49 = *((unsigned __int8 *)v13 + 9);
    do
    {
      if (*(_BYTE *)(v21 + 30))
        v50 = *(float *)(v21 + 24);
      else
        v50 = (float)*(int *)(v21 + 24);
      v51 = ceilf(v50 * 1.4) * 64.0;
      if (v51 >= 2147483650.0)
      {
        v52 = 0x7FFFFFFF;
      }
      else if (v51 <= -2147483650.0)
      {
        v52 = 0x80000000;
      }
      else
      {
        v52 = (int)v51;
      }
      v73.n128_u64[0] = (unint64_t)v76;
      *(float *)&a11 = (float)v52 * 0.015625;
      v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0);
      *(float32x2_t *)&v73.n128_i8[8] = vadd_f32(v53, vadd_f32(v53, (float32x2_t)v77));
      if (v49)
      {
        if (*(_BYTE *)(v21 + 6))
          v54 = *(float *)v21;
        else
          v54 = (float)*(int *)v21;
        if (*(_BYTE *)(v21 + 14))
          v55 = *(float *)(v21 + 8);
        else
          v55 = (float)*(int *)(v21 + 8);
      }
      else
      {
        if (*(_BYTE *)(v21 + 14))
          v54 = *(float *)(v21 + 8);
        else
          v54 = (float)*(int *)(v21 + 8);
        if (*(_BYTE *)(v21 + 6))
          v57 = *(float *)v21;
        else
          v57 = (float)*(int *)v21;
        v55 = -v57;
      }
      v73.n128_f32[0] = (float)(*(float *)&v76 - *(float *)&a11) + v54;
      v73.n128_f32[1] = (float)(*((float *)&v76 + 1) - *(float *)&a11) + v55;
      v71 = (float)v52 * 0.015625;
      WebCore::FloatRect::unite((float32x2_t *)&v76, (float32x2_t *)&v73);
      v56 = v71 + fmaxf(v55, 0.0);
      if (v22 < v56)
        v22 = v56;
      v21 = *(_QWORD *)(v21 + 56);
    }
    while (v21);
    v23 = 1;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v13 + 96))(*v13, 1);
    result = (*(uint64_t (**)(_QWORD, uint64_t **))(*(_QWORD *)*v13 + 456))(*v13, &v76);
    v22 = v22 + *(float *)(a4 + 36);
    v19 = v19 + 0.0;
    v20 = v22 + v20;
  }
  v73.n128_u64[0] = __PAIR64__(LODWORD(v20), LODWORD(v19));
  v73.n128_u64[1] = *(_QWORD *)(a4 + 16);
  v24 = v73;
  v72 = v73;
  if ((a5 & 1) != 0)
  {
    v42 = v20 + *(float *)(a4 + 24);
    v73.n128_f32[0] = v19 + 0.0;
    v73.n128_f32[1] = v42;
  }
  if ((a5 & 2) != 0)
  {
    v58 = *(float *)(a4 + 28) + v72.n128_f32[1];
    v72.n128_f32[0] = v72.n128_f32[0] + 0.0;
    v72.n128_f32[1] = v58;
  }
  v25 = v13[2];
  while (1)
  {
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 56);
      v24.n128_f32[0] = v19 + 0.0;
      if (v26)
        v27 = 0.0;
      else
        v27 = v22;
      if (!v26)
      {
        v19 = v19 + 0.0;
        v22 = 0.0;
      }
      v80 = *(_QWORD *)(a2 + 32) + 328;
      v76 = &v80;
      v77 = &v80;
      *(_QWORD *)&v78 = &v80;
      *((_QWORD *)&v78 + 1) = &v80;
      v28 = *(unsigned int *)(v25 + 40);
      if ((_DWORD)v28 == -1)
      {
        result = std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_114;
      }
      v81[0] = &v76;
      ((void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v28])(&v75, v81, v25 + 32, v24);
      v29 = (WebCore::FilterOperations *)v13[3];
      if (v29)
        WebCore::FilterOperations::transformColor(v29, (WebCore::Color *)&v75);
      if (*((_BYTE *)v13 + 9))
      {
        v30 = v71;
        if (*(_BYTE *)(v25 + 6))
          v31 = *(float *)v25;
        else
          v31 = (float)*(int *)v25;
        if (*(_BYTE *)(v25 + 14))
          v32 = *(float *)(v25 + 8);
        else
          v32 = (float)*(int *)(v25 + 8);
      }
      else
      {
        v30 = v71;
        if (*(_BYTE *)(v25 + 14))
          v31 = *(float *)(v25 + 8);
        else
          v31 = (float)*(int *)(v25 + 8);
        if (*(_BYTE *)(v25 + 6))
          v41 = *(float *)v25;
        else
          v41 = (float)*(int *)v25;
        v32 = -v41;
      }
      v33 = v23;
      v34 = *v13;
      v35 = a2;
      if (*(_BYTE *)(v25 + 30))
        v36 = *(float *)(v25 + 24);
      else
        v36 = (float)*(int *)(v25 + 24);
      v37 = v32 - v22;
      v38 = v75;
      if ((v75 & 0x8000000000000) != 0)
      {
        v60 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 + 1, v60));
        v76 = (uint64_t *)__PAIR64__(LODWORD(v37), LODWORD(v31));
        *(float *)&v77 = v36;
        *(_QWORD *)&v78 = v38;
        do
          v62 = __ldaxr(v60);
        while (__stlxr(v62 + 1, v60));
      }
      else
      {
        v76 = (uint64_t *)__PAIR64__(LODWORD(v37), LODWORD(v31));
        *(float *)&v77 = v36;
        *(_QWORD *)&v78 = v75;
      }
      LODWORD(v71) = LODWORD(v30) & 0xFFFFFF00;
      DWORD2(v78) = LODWORD(v30) & 0xFFFFFF00;
      HIDWORD(v78) = 1065353216;
      v79 = 1;
      WebCore::GraphicsContextState::setDropShadow(v34 + 8, (uint64_t)&v76);
      if (v79)
      {
        if ((v78 & 0x8000000000000) != 0)
        {
          v67 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFLL);
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            atomic_store(1u, v67);
            WTF::fastFree((WTF *)v67, v39);
          }
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 88))(v34, v34 + 8);
      if ((v38 & 0x8000000000000) != 0)
      {
        result = v38 & 0xFFFFFFFFFFFFLL;
        do
        {
          v63 = __ldaxr((unsigned int *)result);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, (unsigned int *)result));
        if (!v64)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v40);
        }
      }
      v25 = *(_QWORD *)(v25 + 56);
      if ((v75 & 0x8000000000000) != 0)
      {
        result = v75 & 0xFFFFFFFFFFFFLL;
        do
        {
          v65 = __ldaxr((unsigned int *)result);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, (unsigned int *)result));
        if (!v66)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v40);
        }
      }
      v20 = v20 - v27;
      a2 = v35;
      v23 = v33;
    }
    if ((a5 & 1) != 0 && v73.n128_f32[2] > 0.0 && v73.n128_f32[3] > 0.0)
      result = WebCore::TextDecorationPainter::paintBackgroundDecorations(WebCore::RenderStyle const&,WebCore::TextRun const&,WebCore::TextDecorationPainter::BackgroundDecorationGeometry const&,WTF::OptionSet<WebCore::TextDecorationLine>,WebCore::TextDecorationPainter::Styles const&)::$_0::operator()<WebCore::TextDecorationLine,WebCore::TextDecorationStyle,WebCore::Color const,WebCore::FloatRect>((uint64_t)v74, *(unsigned __int8 *)(a6 + 8), (WebCore::Color *)a6, (float *)&v73);
    if ((a5 & 2) != 0 && v72.n128_f32[2] > 0.0 && v72.n128_f32[3] > 0.0)
      result = WebCore::TextDecorationPainter::paintBackgroundDecorations(WebCore::RenderStyle const&,WebCore::TextRun const&,WebCore::TextDecorationPainter::BackgroundDecorationGeometry const&,WTF::OptionSet<WebCore::TextDecorationLine>,WebCore::TextDecorationPainter::Styles const&)::$_0::operator()<WebCore::TextDecorationLine,WebCore::TextDecorationStyle,WebCore::Color const,WebCore::FloatRect>((uint64_t)v74, *(unsigned __int8 *)(a6 + 24), (WebCore::Color *)(a6 + 16), (float *)&v72);
    if (!v25)
      break;
    if ((a5 & 4) != 0)
    {
      v76 = (uint64_t *)__PAIR64__(LODWORD(v20), LODWORD(v19));
      v77 = *(uint64_t **)(a4 + 16);
      LODWORD(v78) = *(_DWORD *)(a4 + 32);
      *(_QWORD *)((char *)&v78 + 4) = *(_QWORD *)(a4 + 40);
      v81[0] = 0x1104000000000000;
      result = (uint64_t)WebCore::TextDecorationPainter::paintLineThrough((uint64_t)v13, (uint64_t)&v76, (WebCore::Color *)v81, a6);
      if ((v81[0] & 0x8000000000000) != 0)
      {
        result = v81[0] & 0xFFFFFFFFFFFFLL;
        do
        {
          v45 = __ldaxr((unsigned int *)result);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, (unsigned int *)result));
        if (!v46)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v44);
        }
      }
    }
  }
  if ((_DWORD)v23)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v13 + 104))(*v13, 1);
  if (v13[2])
    return WebCore::GraphicsContext::clearDropShadow((WebCore::GraphicsContext *)*v13);
  return result;
}

float WebCore::computedTextDecorationThickness(WebCore *this, const WebCore::RenderStyle *a2, float a3)
{
  uint64_t v5;
  float v6;
  WTF *v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v13;
  char v14;
  unsigned int v15;
  unsigned __int8 v16;
  char v17;
  char v18;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v14 = *(_BYTE *)(v5 + 448);
  v15 = 0;
  v18 = 0;
  v16 = *(_BYTE *)(v5 + 456);
  v17 = *(_BYTE *)(v5 + 457);
  if (v16 - 2 >= 9)
  {
    if (v16 == 11)
    {
      v15 = *(_DWORD *)(v5 + 452);
      WebCore::Length::ref((int *)&v15);
    }
  }
  else
  {
    v18 = *(_BYTE *)(v5 + 458);
    v15 = *(_DWORD *)(v5 + 452);
  }
  v6 = *(float *)(*((_QWORD *)this + 4) + 204);
  v7 = WebCore::RenderStyle::metricsOfPrimaryFont(this, a2);
  if (!v14)
  {
    v8 = 0.0625;
LABEL_7:
    v9 = v6 * v8;
    goto LABEL_8;
  }
  if (v14 == 1)
  {
    v9 = *((float *)v7 + 8);
  }
  else
  {
    if (v16 != 11)
    {
      if (v16 != 3)
      {
        if (v18)
          v9 = *(float *)&v15;
        else
          v9 = (float)(int)v15;
        goto LABEL_8;
      }
      v13 = *(float *)&v15;
      if (!v18)
        v13 = (float)(int)v15;
      v8 = v13 / 100.0;
      goto LABEL_7;
    }
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v15, v6);
  }
LABEL_8:
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 2147500000.0;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = -2147500000.0;
  }
  else
  {
    v11 = (float)(int)v10;
  }
  if (v16 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
  }
  return ceilf((float)(v11 * a3) * 0.015625) / a3;
}

float WebCore::computedAutoTextDecorationThickness(WebCore *this, const WebCore::RenderStyle *a2, float a3)
{
  float v4;
  double v5;
  float v6;

  v4 = *(float *)(*((_QWORD *)this + 4) + 204);
  WebCore::RenderStyle::metricsOfPrimaryFont(this, a2);
  v5 = (float)(v4 * 0.0625) * 64.0;
  if (v5 >= 2147483650.0)
  {
    v6 = 2147500000.0;
  }
  else if (v5 <= -2147483650.0)
  {
    v6 = -2147500000.0;
  }
  else
  {
    v6 = (float)(int)v5;
  }
  return ceilf((float)(v6 * a3) * 0.015625) / a3;
}

float WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::textPosition(float *a1)
{
  float v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  BOOL v9;
  void *v10;
  float v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v16[2];
  int v17;
  _BYTE v18[16];
  int v19;
  char v20;
  char *v21;

  v1 = a1[10];
  if (v1 == 0.0)
    return 0.0;
  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
  }
  v4 = *((_QWORD *)a1 + 1);
  v16[0] = v2;
  v16[1] = v4;
  v17 = 0;
  v5 = *(_QWORD *)(v2 + 8);
  if (v4 >= *(unsigned int *)(v5 + 60))
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x196484550);
  }
  v6 = *(_WORD *)(*(_QWORD *)(v5 + 48) + 80 * v4 + 50);
  v7 = v6 & 0xE;
  v8 = v6 & 0xF;
  if (v7)
    v9 = v8 == 3;
  else
    v9 = 1;
  if (!v9)
  {
LABEL_20:
    __break(0xC471u);
    goto LABEL_22;
  }
  std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::lineBox(void)::$_0,WebCore::InlineIterator::Box::lineBox(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(v16, (uint64_t)v18);
  if (v19 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_20;
  }
  v21 = &v20;
  v11 = ((float (*)(char **, _BYTE *))off_1E343A0A0[v19])(&v21, v18);
  if (v19 != -1)
    ((void (*)(char **, _BYTE *))off_1E343A050[v19])(&v21, v18);
  v12 = v1 - v11;
  v19 = -1;
  v16[0] = 0;
  do
  {
    v13 = __ldaxr((unsigned int *)v2);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v2));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v2);
    WTF::fastFree((WTF *)v2, v10);
  }
  return v12;
}

void WebCore::snapRectToDevicePixelsInDirection(float *a1, int a2, float a3)
{
  double v4;
  int v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  int v35[2];
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v4 = *a1 * 64.0;
  if (v4 > -2147483650.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147483650.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  v7 = a1[1] * 64.0;
  if (v7 > -2147483650.0)
    v8 = (int)v7;
  else
    v8 = 0x80000000;
  if (v7 < 2147483650.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFFLL;
  v35[0] = v6;
  v35[1] = v9;
  v10 = a1[3];
  v11 = a1[2] * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147483650.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  LODWORD(v36) = v13;
  v14 = v10 * 64.0;
  if (v14 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  HIDWORD(v36) = v15;
  if (a2 == 2)
  {
    v19 = WebCore::snapRectToDevicePixels(v35, a3) * 64.0;
    if (v19 >= 2147483650.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v19 <= -2147483650.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v19;
    }
    v24 = v20 * 64.0;
    if (v24 > -2147483650.0)
      v25 = (int)v24;
    else
      v25 = 0x80000000;
    if (v24 < 2147483650.0)
      v26 = v25;
    else
      v26 = 0x7FFFFFFFLL;
    v27 = v21 * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFFLL;
    }
    else if (v27 <= -2147483650.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v27;
    }
    v29 = v22 * 64.0;
    if (v29 >= 2147483650.0)
    {
      v30 = 0x7FFFFFFF00000000;
    }
    else if (v29 <= -2147483650.0)
    {
      v30 = 0x8000000000000000;
    }
    else
    {
      v30 = (unint64_t)(int)v29 << 32;
    }
    v31 = v30 | v28;
    v32 = __OFADD__(v23, (_DWORD)v28);
    v33 = v23 + v28;
    v34 = v32;
    v38 = v31;
    if (v34)
      v33 = (v23 >> 31) + 0x7FFFFFFF;
    v18 = (v26 << 32) | v33;
  }
  else
  {
    if (a2 != 1)
      return;
    v16 = v9 << 32;
    v38 = v36;
    v17 = v6 + v36;
    if (__OFADD__(v6, (_DWORD)v36))
      v17 = (v6 >> 31) + 0x7FFFFFFF;
    v18 = v16 | v17;
  }
  v37 = v18;
  WebCore::snapSizeToDevicePixel((int *)&v38, (int *)&v37, a3);
}

WTF::StringImpl *WebCore::calculateDocumentMarkerBounds(WebCore *this, const WebCore::InlineIterator::TextBoxIterator *a2, const WebCore::MarkedText *a3)
{
  WebCore *v3;
  const WebCore::InlineIterator::TextBoxIterator *v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const WebCore::FontCascade *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::DocumentMarkerController *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *result;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  unsigned int v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  int **v41;
  int v42;
  unsigned int v43;
  int ***v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  char v47;
  int v48;
  int *v49;

  v6 = *((unsigned int *)this + 4);
  if ((_DWORD)v6 == -1)
    goto LABEL_67;
  v4 = a2;
  v3 = this;
  v44 = &v41;
  v5 = off_1E343A010;
  if ((((uint64_t (*)(int ****, WebCore *, const WebCore::MarkedText *))off_1E343A010[v6])(&v44, this, a3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196484DCCLL);
  }
  v7 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v7 == -1)
    goto LABEL_67;
  v44 = &v41;
  v8 = ((uint64_t (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v7])(&v44, v3);
  if ((*(_BYTE *)(v8 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196484DECLL);
  }
  if (*(_BYTE *)(v8 + 46) == 3)
    goto LABEL_68;
LABEL_6:
  v10 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v10 != -1)
  {
    v44 = &v41;
    v11 = ((uint64_t (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v10])(&v44, v3);
    goto LABEL_8;
  }
  while (1)
  {
    while (1)
    {
LABEL_67:
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_68:
      if ((*(_BYTE *)(v8 + 140) & 1) == 0)
        goto LABEL_6;
      v11 = *(_QWORD *)(v8 + 120);
LABEL_8:
      v12 = (WebCore::DocumentMarkerController *)(*(_QWORD *)(v11 + 32) + 32);
      v13 = WebCore::DocumentMarkerController::markerYPositionAndHeightForFont(v12, v9);
      v15 = v14;
      if (*((_DWORD *)v4 + 1))
        break;
      v16 = *((unsigned int *)v3 + 4);
      if ((_DWORD)v16 != -1)
      {
        v17 = *((_DWORD *)v4 + 2);
        v41 = &v49;
        if ((((uint64_t (*)(int ***, WebCore *))v5[v16])(&v41, v3) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196484E88);
        }
        v18 = *((unsigned int *)v3 + 4);
        if ((_DWORD)v18 != -1)
        {
          v41 = &v49;
          ((void (*)(int ****__return_ptr, int ***, WebCore *))*(&off_1E343A128 + v18))(&v44, &v41, v3);
          v19 = *((unsigned int *)v3 + 4);
          if ((_DWORD)v19 != -1)
          {
            v41 = &v49;
            if ((((uint64_t (*)(int ***, WebCore *))v5[v19])(&v41, v3) & 1) == 0)
            {
              __break(0xC471u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(0xC471u);
              JUMPOUT(0x196484EC8);
            }
            v20 = *((unsigned int *)v3 + 4);
            if ((_DWORD)v20 != -1)
            {
              v41 = &v49;
              v21 = ((uint64_t (*)(int ***, WebCore *))off_1E343A138[v20])(&v41, v3);
              v22 = HIDWORD(v44) + (_DWORD)v44;
              if (__CFADD__(HIDWORD(v44), (_DWORD)v44))
                goto LABEL_65;
              if (v22 >= v21)
                v22 = v21;
              v23 = v22 - (_DWORD)v44;
              if (v44 <= v21)
                v24 = v23;
              else
                v24 = 0;
              if (v47 && v46)
              {
                if (v46 < v24)
                  v24 = v46;
              }
              else if (v24 == HIDWORD(v44))
              {
                v24 = (_DWORD)v45 + HIDWORD(v44);
              }
              if (v17 != v24)
                break;
              v25 = *((unsigned int *)v3 + 4);
              if ((_DWORD)v25 != -1)
              {
                v44 = &v41;
                if ((((uint64_t (*)(int ****, WebCore *))v5[v25])(&v44, v3) & 1) == 0)
                  goto LABEL_66;
                v26 = *((unsigned int *)v3 + 4);
                if ((_DWORD)v26 != -1)
                {
                  v4 = (const WebCore::InlineIterator::TextBoxIterator *)&v41;
                  v44 = &v41;
                  ((void (*)(int ****, WebCore *))off_1E343A0F0[v26])(&v44, v3);
                  v27 = *((unsigned int *)v3 + 4);
                  if ((_DWORD)v27 != -1)
                  {
                    v44 = &v41;
                    return (WTF::StringImpl *)((uint64_t (*)(int ****, WebCore *))off_1E343A0C0[v27])(&v44, v3);
                  }
                }
              }
            }
          }
        }
      }
    }
    v29 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v29 != -1)
    {
      v44 = &v41;
      if ((((uint64_t (*)(int ****, WebCore *))v5[v29])(&v44, v3) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196484E0CLL);
      }
      v48 = 0;
      v49 = &v48;
      v30 = *((unsigned int *)v3 + 4);
      if ((_DWORD)v30 != -1)
      {
        v41 = &v49;
        ((void (*)(int ****__return_ptr, int ***, WebCore *))off_1E343A148[v30])(&v44, &v41, v3);
        v31 = v13 * 64.0;
        v32 = v31 > -2147483650.0 ? (int)v31 : 0x80000000;
        v33 = v31 < 2147483650.0 ? v32 : 0x7FFFFFFF;
        LODWORD(v41) = 0;
        HIDWORD(v41) = v33;
        v42 = 0;
        v34 = v15 * 64.0;
        if (v34 >= 2147483650.0)
          v35 = 0x7FFFFFFF;
        else
          v35 = v34 <= -2147483650.0 ? 0x80000000 : (int)v34;
        v43 = v35;
        v36 = *((unsigned int *)v3 + 4);
        if ((_DWORD)v36 != -1)
        {
          v49 = &v48;
          if ((((uint64_t (*)(int **, WebCore *))v5[v36])(&v49, v3) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196484E2CLL);
          }
          v37 = *((unsigned int *)v3 + 4);
          if ((_DWORD)v37 != -1)
            break;
        }
      }
    }
  }
  v49 = &v48;
  v38 = ((uint64_t (*)(int **, WebCore *))off_1E343A0E0[v37])(&v49, v3);
  if ((*(_BYTE *)(v38 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196484E4CLL);
  }
  v39 = *(unsigned __int16 *)(v38 + 112);
  if (v39 <= 0x100)
    LOBYTE(v39) = 0;
  WebCore::FontCascade::adjustSelectionRectForText((uint64_t)v12, (void *)(v39 != 0), (uint64_t)&v44, (WebCore::LayoutRect *)&v41, *((_DWORD *)v4 + 1), *((unsigned int *)v4 + 2) | 0x100000000);
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::drawUnifiedTextReplacementUnderline(WTF::MonotonicTime *a1, float *a2, unint64_t a3)
{
  int v3;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  long double v12;
  long double v13;
  long double v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  float v33;
  void *v34;
  double v35;
  unsigned int v36;
  unsigned int v37;
  float v38;
  uint64_t result;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  WTF *v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  WTF *v84[2];
  _OWORD v85[2];
  char v86;
  int v87;
  uint64_t v88;

  v3 = a3;
  v88 = *MEMORY[0x1E0C80C00];
  v5 = HIDWORD(a3);
  v7 = a2[2];
  v6 = a2[3];
  v8 = *a2;
  v9 = a2[1];
  v10 = v6 + v9;
  v11 = (float)(v9 + (float)(v6 + v9)) * 0.5;
  WTF::MonotonicTime::now(a1);
  v13 = fmod(v12, 10.0);
  v14 = fmod(v13 / 10.0 + v11 / (double)(int)v5, 1.0) * (double)v3;
  *(float *)&v15 = 0.0 - v14;
  *(float *)&v14 = (double)(2 * v3) - v14;
  *(_QWORD *)&v81 = v15;
  DWORD2(v81) = LODWORD(v14);
  *((float *)&v81 + 3) = (float)(int)v5;
  v82 = 0;
  v84[0] = (WTF *)v85;
  v84[1] = (WTF *)2;
  v86 = 1;
  v16 = WTF::fastMalloc((WTF *)0xC8);
  v83 = WebCore::Gradient::Gradient(v16, &v81, 0x600000000, 1, 0, (uint64_t *)v84, 0, 0);
  v18 = v84[0];
  if (HIDWORD(v84[1]))
  {
    v19 = (WTF *)((char *)v84[0] + 16 * HIDWORD(v84[1]));
    do
    {
      v20 = *((_QWORD *)v18 + 1);
      if ((v20 & 0x8000000000000) != 0)
      {
        v80 = v18;
        v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v17);
          v18 = v80;
        }
      }
      v18 = (WTF *)((char *)v18 + 16);
    }
    while (v18 != v19);
    v18 = v84[0];
  }
  if (v85 != (_OWORD *)v18 && v18)
  {
    v84[0] = 0;
    LODWORD(v84[1]) = 0;
    WTF::fastFree(v18, v17);
  }
  LODWORD(v84[0]) = 0;
  v84[1] = (WTF *)0x110400009A6DD1FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v50 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v24);
    }
  }
  LODWORD(v84[0]) = 1036831949;
  v84[1] = (WTF *)0x11040000E36488FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v53 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      WTF::fastFree((WTF *)v53, v25);
    }
  }
  LODWORD(v84[0]) = 1045220557;
  v84[1] = (WTF *)0x11040000F2E1A2FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v56 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v56);
      WTF::fastFree((WTF *)v56, v26);
    }
  }
  LODWORD(v84[0]) = 1050253722;
  v84[1] = (WTF *)0x11040000E36488FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v59);
      WTF::fastFree((WTF *)v59, v27);
    }
  }
  LODWORD(v84[0]) = 1053609165;
  v84[1] = (WTF *)0x110400009A6DD1FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v62 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
    {
      atomic_store(1u, v62);
      WTF::fastFree((WTF *)v62, v28);
    }
  }
  LODWORD(v84[0]) = 1056964608;
  v84[1] = (WTF *)0x110400009A6DD1FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v65 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      WTF::fastFree((WTF *)v65, v29);
    }
  }
  LODWORD(v84[0]) = 1058642330;
  v84[1] = (WTF *)0x11040000E36488FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, v30);
    }
  }
  LODWORD(v84[0]) = 1060320052;
  v84[1] = (WTF *)0x11040000F2E1A2FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v71 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v71);
      WTF::fastFree((WTF *)v71, v31);
    }
  }
  LODWORD(v84[0]) = 1061997774;
  v84[1] = (WTF *)0x11040000E36488FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v74 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v74);
      WTF::fastFree((WTF *)v74, v32);
    }
  }
  v33 = v8 + v7;
  LODWORD(v84[0]) = 1063675496;
  v84[1] = (WTF *)0x110400009A6DD1FFLL;
  WebCore::Gradient::addColorStop(v83, (float *)v84);
  if (((unint64_t)v84[1] & 0x8000000000000) != 0)
  {
    v77 = (unsigned int *)((unint64_t)v84[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      WTF::fastFree((WTF *)v77, v34);
    }
  }
  v35 = v6 * 0.5;
  (*(void (**)(WTF::MonotonicTime *, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
  *(_OWORD *)v84 = xmmword_1969FD398;
  v85[0] = unk_1969FD3A8;
  v85[1] = xmmword_1969FD3B8;
  WebCore::SourceBrush::setGradient((uint64_t)a1 + 8, &v83, (__int128 *)v84);
  *((_DWORD *)a1 + 46) |= 1u;
  (*(void (**)(WTF::MonotonicTime *, _DWORD *))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2);
  v87 = 0;
  *(float *)&v36 = v35 + v8;
  *(_QWORD *)&v81 = __PAIR64__(LODWORD(v10), v36);
  WebCore::Path::moveTo((WebCore::Path *)v84, (const WebCore::FloatPoint *)&v81);
  *(float *)&v37 = v11;
  *(_QWORD *)&v81 = __PAIR64__(v37, v36);
  v38 = v35;
  WebCore::Path::addArc((uint64_t)v84, (uint64_t *)&v81, 1, v38, 1.5708, 4.7124);
  *(float *)&v35 = v33 - v35;
  *(_QWORD *)&v81 = __PAIR64__(LODWORD(v9), LODWORD(v35));
  WebCore::Path::addLineTo((uint64_t)v84, (const WebCore::FloatPoint *)&v81);
  *(_QWORD *)&v81 = __PAIR64__(v37, LODWORD(v35));
  WebCore::Path::addArc((uint64_t)v84, (uint64_t *)&v81, 1, v38, 4.7124, 1.5708);
  (*(void (**)(WTF::MonotonicTime *, WTF **))(*(_QWORD *)a1 + 176))(a1, v84);
  result = (*(uint64_t (**)(WTF::MonotonicTime *, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1);
  if (v87 != -1)
    result = ((uint64_t (*)(__int128 *, WTF **))off_1E343A110[v87])(&v81, &v84[1]);
  v41 = v83;
  v83 = 0;
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 8);
    if (__ldaxr((unsigned __int8 *)v42))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v42))
    {
      goto LABEL_30;
    }
    result = MEMORY[0x19AEA534C](v42);
LABEL_30:
    v44 = *(_QWORD *)(v42 + 8);
    v45 = v44 - 1;
    *(_QWORD *)(v42 + 8) = v44 - 1;
    if (v44 == 1)
    {
      v49 = *(_QWORD *)(v42 + 16);
      v46 = *(_QWORD *)(v42 + 24);
      *(_QWORD *)(v42 + 24) = 0;
      v47 = v49 != 0;
    }
    else
    {
      v46 = 0;
      v47 = 1;
    }
    v48 = __ldxr((unsigned __int8 *)v42);
    if (v48 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v42))
      {
        if (v45)
          return result;
LABEL_38:
        if (v46)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        if (!v47)
          return WTF::fastFree((WTF *)v42, v40);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v42);
    if (v45)
      return result;
    goto LABEL_38;
  }
  return result;
}

uint64_t WebCore::TextDecorationPainter::Styles::Styles(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = *a2;
  *(_QWORD *)result = *a2;
  if ((v2 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  v3 = a2[2];
  *(_QWORD *)(result + 16) = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_BYTE *)(result + 24) = *((_BYTE *)a2 + 24);
  v4 = a2[4];
  *(_QWORD *)(result + 32) = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_BYTE *)(result + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(result + 48) = *((_BYTE *)a2 + 48);
  return result;
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox::~DecoratingBox(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;

  v3 = *(_QWORD *)(a1 + 64);
  if ((v3 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v4 = *(_QWORD *)(a1 + 48);
  if ((v4 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_1E343A000[v6])(&v17, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t _ZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxModernPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_(uint64_t *a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *LineStyle;
  uint64_t v11;
  const WebCore::RenderStyle *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  _BOOL8 v37;
  WebCore::RenderElement *v38;
  WTF::StringImpl *v39;
  _BOOL8 v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unint64_t *v44;
  void *v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59[2];
  uint64_t v60;
  char *v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  int v65;
  float v66;
  unsigned int *v67;
  char *v68;
  uint64_t v69;
  char v70;
  _QWORD v71[2];

  v6 = *a1;
  if (*(_BYTE *)(*a1 + 152))
  {
    v37 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a2);
    v38 = (WebCore::RenderElement *)WebCore::InlineIterator::InlineBox::renderer((WebCore::InlineIterator::InlineBox *)v37);
    LineStyle = WebCore::RenderElement::firstLineStyle(v38, v39);
  }
  else
  {
    v7 = a2[4];
    if ((_DWORD)v7 == -1)
      goto LABEL_57;
    v59[0] = (unint64_t)&v67;
    if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v7])(v59, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196485B64);
    }
    v8 = a2[4];
    if ((_DWORD)v8 == -1)
      goto LABEL_57;
    v59[0] = (unint64_t)&v67;
    v9 = ((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0E0[v8])(v59, a2);
    if ((*(_BYTE *)(v9 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196485B84);
    }
    LineStyle = (char *)(v9 + 80);
  }
  v67 = a2;
  v68 = LineStyle;
  v69 = v6;
  v11 = a2[4];
  if ((_DWORD)v11 == -1)
    goto LABEL_57;
  v59[0] = (unint64_t)v71;
  if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v11])(v59, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196485B44);
  }
  result = WebCore::isDecoratingBoxForBackground((WebCore *)a2, (const WebCore::InlineIterator::InlineBox *)LineStyle, v12);
  if ((result & 1) != 0)
    goto LABEL_10;
  if (a3)
  {
    v44 = (unint64_t *)a1[1];
    _ZZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxModernPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_ENKUlvE_clEv((uint64_t)v59, &v67);
    result = WebCore::TextDecorationPainter::Styles::operator==(v44, v59);
    v46 = result;
    if ((v62[0] & 0x8000000000000) != 0)
    {
      result = v62[0] & 0xFFFFFFFFFFFFLL;
      do
      {
        v53 = __ldaxr((unsigned int *)result);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unsigned int *)result));
      if (!v54)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v45);
      }
    }
    if ((v60 & 0x8000000000000) != 0)
    {
      result = v60 & 0xFFFFFFFFFFFFLL;
      do
      {
        v55 = __ldaxr((unsigned int *)result);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, (unsigned int *)result));
      if (!v56)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v45);
      }
    }
    if ((v59[0] & 0x8000000000000) != 0)
    {
      result = v59[0] & 0xFFFFFFFFFFFFLL;
      do
      {
        v57 = __ldaxr((unsigned int *)result);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, (unsigned int *)result));
      if (!v58)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v45);
      }
    }
    if ((v46 & 1) == 0)
    {
LABEL_10:
      v14 = a2[4];
      if ((_DWORD)v14 == -1)
        goto LABEL_57;
      v59[0] = (unint64_t)v71;
      if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v14])(v59, a2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196485BA4);
      }
      v15 = a2[4];
      if ((_DWORD)v15 == -1)
        goto LABEL_57;
      v59[0] = (unint64_t)v71;
      if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0B0[v15])(v59, a2) & 1) != 0)
      {
        v16 = 0;
      }
      else
      {
        v40 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a2);
        v41 = WebCore::InlineIterator::InlineBox::renderer((WebCore::InlineIterator::InlineBox *)v40);
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1048))(v41);
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 960))(v41);
        if (__OFADD__(v42, v43))
          v16 = (v42 >> 31) + 0x7FFFFFFF;
        else
          v16 = v42 + v43;
      }
      v17 = a1[2];
      LOBYTE(v59[0]) = 0;
      LODWORD(v60) = -1;
      v18 = a2[4];
      if ((_DWORD)v18 != -1)
      {
        ((void (*)(_QWORD *, unint64_t *, unsigned int *))off_1E343A0D0[v18])(v71, v59, a2);
        LODWORD(v60) = v18;
      }
      v61 = LineStyle;
      if (a3)
      {
        WebCore::TextDecorationPainter::Styles::Styles((uint64_t)v62, (uint64_t *)a1[1]);
      }
      else
      {
        v19 = v67;
        v20 = v67[4];
        if ((_DWORD)v20 == -1)
          goto LABEL_57;
        v21 = v69;
        v71[0] = &v70;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E343A060[v20])(v71, v67) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196485BE4);
        }
        v22 = v19[4];
        if ((_DWORD)v22 == -1)
          goto LABEL_57;
        v71[0] = &v70;
        v23 = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E343A0E0[v22])(v71, v19);
        if ((*(_BYTE *)(v23 + 45) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196485C04);
        }
        WebCore::TextDecorationPainter::stylesForRenderer((uint64_t)v62, v23, ((unint64_t)*((unsigned int *)v68 + 10) >> 15) & 0xF, *(unsigned __int8 *)(v21 + 152));
      }
      v24 = a2[4];
      if ((_DWORD)v24 != -1)
      {
        v25 = *(_DWORD *)a1[3];
        v26 = *(_DWORD *)(v6 + 132);
        v71[0] = &v70;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E343A060[v24])(v71, a2) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196485BC4);
        }
        v27 = a2[4];
        if ((_DWORD)v27 != -1)
        {
          v71[0] = &v70;
          ((void (*)(_QWORD *, unsigned int *))off_1E343A0F0[v27])(v71, a2);
          v30 = a2[4];
          if ((_DWORD)v30 != -1)
          {
            v31 = v28;
            v32 = v29;
            v71[0] = &v70;
            if (((unsigned int (*)(_QWORD *, unsigned int *))off_1E343A0C0[v30])(v71, a2))
              v33 = v32;
            else
              v33 = v31;
            v65 = v25;
            v66 = (float)((float)v16 * 0.015625) + (float)((float)((float)v26 * 0.015625) + v33);
            v34 = *(_DWORD *)(v17 + 12);
            if (v34 == *(_DWORD *)(v17 + 8))
            {
              result = WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox>(v17, (unint64_t)v59);
            }
            else
            {
              result = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox::DecoratingBox(*(_QWORD *)v17 + 96 * v34, (uint64_t)v59);
              ++*(_DWORD *)(v17 + 12);
            }
            v36 = v64;
            if ((v64 & 0x8000000000000) == 0)
            {
LABEL_33:
              if ((v63 & 0x8000000000000) != 0)
              {
                result = v63 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v49 = __ldaxr((unsigned int *)result);
                  v50 = v49 - 1;
                }
                while (__stlxr(v50, (unsigned int *)result));
                if (!v50)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, v35);
                }
              }
              if ((v62[0] & 0x8000000000000) != 0)
              {
                result = v62[0] & 0xFFFFFFFFFFFFLL;
                do
                {
                  v51 = __ldaxr((unsigned int *)result);
                  v52 = v51 - 1;
                }
                while (__stlxr(v52, (unsigned int *)result));
                if (!v52)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, v35);
                }
              }
              if ((_DWORD)v60 != -1)
                return ((uint64_t (*)(_QWORD *, unint64_t *))off_1E343A000[v60])(v71, v59);
              return result;
            }
LABEL_58:
            result = v36 & 0xFFFFFFFFFFFFLL;
            do
            {
              v47 = __ldaxr((unsigned int *)result);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, (unsigned int *)result));
            if (!v48)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v35);
            }
            goto LABEL_33;
          }
        }
      }
LABEL_57:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_58;
    }
  }
  return result;
}

WebCore::LegacyInlineBox **WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::TextBoxPainter(WebCore::LegacyInlineBox **a1, WTF::StringImpl *a2, WebCore::LegacyInlineBox *a3, int *a4)
{
  WebCore::LegacyInlineBox *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  char *LineStyle;
  WebCore::LegacyInlineBox *v12;
  WTF::StringImpl *v13;
  float v14;
  float v15;
  _DWORD *v16;
  int *v17;
  int v18;
  WTF::StringImpl *v19;
  WebCore::LegacyInlineTextBox *v20;
  WebCore::LegacyInlineBox *v21;
  WebCore::LegacyInlineTextBox *v22;
  WTF::StringImpl *v23;
  float v24;
  int v25;
  int v26;
  WebCore::LegacyInlineBox *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  WebCore::LegacyInlineBox *v32;
  WebCore::LegacyInlineBox *v33;
  uint64_t v34;
  unsigned int v35;
  WebCore::LegacyInlineBox *v36;
  WebCore::LegacyInlineBox *v37;
  uint64_t v38;
  WebCore::LegacyInlineBox *v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  WebCore::Document *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  WebCore::Document *v50;
  uint64_t v51;
  WebCore::LegacyInlineBox *v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  WebCore::Editor *v57;
  void *v58;
  WebCore::Editor *v59;
  uint64_t v60;
  void *v61;
  WebCore::Editor *v62;
  void *v63;
  WebCore::Editor *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  WebCore::RenderBlockFlow *v70;
  _BOOL4 hasLines;
  uint64_t v72;
  float v73;
  float v74;
  float v75;

  v7 = *(WebCore::LegacyInlineBox **)a2;
  *a1 = *(WebCore::LegacyInlineBox **)a2;
  v8 = *((_QWORD *)v7 + 4);
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964862BCLL);
  }
  a1[1] = (WebCore::LegacyInlineBox *)v8;
  a1[2] = *(WebCore::LegacyInlineBox **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8);
  v9 = *((_WORD *)v7 + 26);
  v10 = *((_QWORD *)v7 + 4);
  if ((v9 & 1) != 0)
  {
    v67 = *(_QWORD *)(v10 + 8);
    if ((*(_BYTE *)(v67 + 45) & 2) != 0)
    {
      v68 = *(_QWORD *)(v67 + 32);
      if (v68)
        v67 = *(_QWORD *)(v68 + 8);
      else
        v67 = 0;
    }
    LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v67, a2);
  }
  else
  {
    if (v10)
      v10 = *(_QWORD *)(v10 + 8);
    if ((*(_BYTE *)(v10 + 45) & 2) != 0)
    {
      v10 = *(_QWORD *)(v10 + 32);
      if (v10)
        v10 = *(_QWORD *)(v10 + 8);
    }
    LineStyle = (char *)(v10 + 80);
  }
  a1[3] = (WebCore::LegacyInlineBox *)LineStyle;
  v12 = *a1;
  if ((*((_WORD *)*a1 + 26) & 0x800) != 0)
  {
    v15 = *((float *)v12 + 10);
    v14 = WebCore::LegacyInlineBox::logicalHeight(*a1, a2);
    v16 = (_DWORD *)((char *)v12 + 44);
    v17 = (int *)((char *)v12 + 48);
  }
  else
  {
    v14 = WebCore::LegacyInlineBox::logicalHeight(*a1, a2);
    if ((*((_WORD *)v12 + 26) & 0x800) != 0)
      v15 = WebCore::LegacyInlineBox::logicalHeight(v12, v13);
    else
      v15 = *((float *)v12 + 10);
    v17 = (int *)((char *)v12 + 44);
    v16 = (_DWORD *)((char *)v12 + 48);
  }
  v18 = *v17;
  *((_DWORD *)a1 + 8) = *v16;
  *((_DWORD *)a1 + 9) = v18;
  *((float *)a1 + 10) = v15;
  *((float *)a1 + 11) = v14;
  if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)*a1 + 80))(*a1))
  {
    v20 = *a1;
    if (*a1 && ((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v20 + 80))(*a1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648629CLL);
    }
    WebCore::LegacyInlineTextBox::createTextRun(v20, v19, (uint64_t)(a1 + 6));
  }
  else
  {
    *((_DWORD *)a1 + 12) = 0;
    v21 = (WebCore::LegacyInlineBox *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v21 += 2;
    a1[7] = v21;
    *((_DWORD *)a1 + 16) = 0;
    *((_BYTE *)a1 + 68) = 1;
    a1[9] = (WebCore::LegacyInlineBox *)0x3F80000000000000;
    *((_DWORD *)a1 + 20) = 0;
    *((_BYTE *)a1 + 84) = 4;
    *((_BYTE *)a1 + 85) = *((_BYTE *)a1 + 85) & 0xE0 | 8;
  }
  a1[11] = a3;
  v22 = *a1;
  if (*a1 && ((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v22 + 80))(*a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196486268);
  }
  a1[12] = (WebCore::LegacyInlineBox *)*((_QWORD *)v22 + 9);
  *((_DWORD *)a1 + 26) = 0;
  *((_BYTE *)a1 + 108) = WebCore::LegacyInlineTextBox::isLineBreak(v22);
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 116) = 0;
  a1[15] = *(WebCore::LegacyInlineBox **)a4;
  v24 = 0.0;
  if (((*((_DWORD *)a1[3] + 11) >> 13) & 6u) - 2 <= 3)
    v24 = -*((float *)a1 + 11);
  v26 = *a4;
  v25 = a4[1];
  v27 = *a1;
  if ((*((_WORD *)*a1 + 26) & 0x800) != 0)
  {
    v28 = *((float *)v27 + 10);
    goto LABEL_26;
  }
  v28 = WebCore::LegacyInlineBox::logicalHeight(*a1, v23);
  if ((*((_WORD *)v27 + 26) & 0x800) != 0)
  {
LABEL_26:
    v29 = WebCore::LegacyInlineBox::logicalHeight(v27, v23);
    goto LABEL_29;
  }
  v29 = *((float *)v27 + 10);
LABEL_29:
  v30 = *((float *)v27 + 11);
  v31 = *((float *)v27 + 12);
  v32 = *a1;
  v33 = (WebCore::LegacyInlineBox *)*((_QWORD *)*a1 + 3);
  if (v33)
  {
    do
    {
      v32 = v33;
      v33 = (WebCore::LegacyInlineBox *)*((_QWORD *)v33 + 3);
    }
    while (v33);
    if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v32 + 88))(v32) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196485F9CLL);
    }
  }
  else if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v32 + 88))(*a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648637CLL);
  }
  v34 = *((_QWORD *)v32 + 4);
  if (v34)
    v34 = *(_QWORD *)(v34 + 8);
  if ((*(_BYTE *)(v34 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964862DCLL);
  }
  if ((*(_BYTE *)(v34 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1964862FCLL);
  }
  v35 = (unsigned __int16)*(_DWORD *)(v34 + 124) >> 13;
  if (v35 <= 5 && ((1 << v35) & 0x2A) != 0)
  {
    v72 = 160;
    if ((*(_DWORD *)(v34 + 20) & 0x1000) != 0)
    {
      v73 = v30;
    }
    else
    {
      v72 = 164;
      v73 = v31;
    }
    if ((*(_DWORD *)(v34 + 20) & 0x1000) != 0)
      v74 = v28;
    else
      v74 = v29;
    v75 = (float)((float)*(int *)(v34 + v72) * 0.015625) - (float)(v73 + v74);
    if ((*(_DWORD *)(v34 + 20) & 0x1000) != 0)
      v30 = v75;
    else
      v31 = v75;
  }
  *((float *)a1 + 32) = (float)((float)((float)v26 * 0.015625) + 0.0) + v30;
  *((float *)a1 + 33) = (float)((float)((float)v25 * 0.015625) + v24) + v31;
  a1[17] = a1[5];
  v36 = *a1;
  v37 = (WebCore::LegacyInlineBox *)*((_QWORD *)*a1 + 3);
  if (v37)
  {
    do
    {
      v36 = v37;
      v37 = (WebCore::LegacyInlineBox *)*((_QWORD *)v37 + 3);
    }
    while (v37);
    if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v36 + 88))(v36) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648607CLL);
    }
  }
  else if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v36 + 88))(*a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648639CLL);
  }
  v38 = *((_QWORD *)v36 + 11);
  if (v38 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 88))(v38) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648635CLL);
  }
  *((_BYTE *)a1 + 144) = v38 == 0;
  v39 = a1[1];
  if (*((_BYTE *)v39 + 46) == 3)
    v40 = *((_BYTE *)v39 + 140) & 1;
  else
    v40 = 0;
  *((_BYTE *)a1 + 145) = v40;
  v41 = *((unsigned __int8 *)a1[2] + 3382);
  *((_BYTE *)a1 + 146) = v41;
  if (v41 || *((_WORD *)a1[11] + 8) == 512)
  {
    v42 = 0;
  }
  else
  {
    v42 = WebCore::RenderHighlight::highlightStateForTextBox((WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v39 + 3) + 8)+ 40)+ 8)+ 1944)+ 288), v39, (const WebCore::TextBoxSelectableRange *)(a1 + 12)) != 0;
    v39 = a1[1];
  }
  *((_BYTE *)a1 + 147) = v42;
  v43 = *((_BYTE *)v39 + 45);
  if ((v43 & 1) != 0 || (v44 = *(_QWORD *)(*((_QWORD *)v39 + 3) + 8)) == 0)
  {
    v49 = 0;
    *((_BYTE *)a1 + 148) = 0;
  }
  else
  {
    if ((*(_WORD *)(v44 + 28) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648631CLL);
    }
    v45 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 40) + 8) + 528) + 8)
                                + 296);
    v46 = *((_QWORD *)v45 + 382);
    if (!v46)
    {
      v57 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v57, v45);
      v59 = (WebCore::Editor *)*((_QWORD *)v45 + 382);
      *((_QWORD *)v45 + 382) = v57;
      if (v59)
      {
        WebCore::Editor::~Editor(v59, v58);
        if (*(_DWORD *)v60)
        {
          *(_QWORD *)(v60 + 496) = 0;
          *(_OWORD *)(v60 + 464) = 0u;
          *(_OWORD *)(v60 + 480) = 0u;
          *(_OWORD *)(v60 + 432) = 0u;
          *(_OWORD *)(v60 + 448) = 0u;
          *(_OWORD *)(v60 + 400) = 0u;
          *(_OWORD *)(v60 + 416) = 0u;
          *(_OWORD *)(v60 + 368) = 0u;
          *(_OWORD *)(v60 + 384) = 0u;
          *(_OWORD *)(v60 + 336) = 0u;
          *(_OWORD *)(v60 + 352) = 0u;
          *(_OWORD *)(v60 + 304) = 0u;
          *(_OWORD *)(v60 + 320) = 0u;
          *(_OWORD *)(v60 + 272) = 0u;
          *(_OWORD *)(v60 + 288) = 0u;
          *(_OWORD *)(v60 + 240) = 0u;
          *(_OWORD *)(v60 + 256) = 0u;
          *(_OWORD *)(v60 + 208) = 0u;
          *(_OWORD *)(v60 + 224) = 0u;
          *(_OWORD *)(v60 + 176) = 0u;
          *(_OWORD *)(v60 + 192) = 0u;
          *(_OWORD *)(v60 + 144) = 0u;
          *(_OWORD *)(v60 + 160) = 0u;
          *(_OWORD *)(v60 + 112) = 0u;
          *(_OWORD *)(v60 + 128) = 0u;
          *(_OWORD *)(v60 + 80) = 0u;
          *(_OWORD *)(v60 + 96) = 0u;
          *(_OWORD *)(v60 + 48) = 0u;
          *(_OWORD *)(v60 + 64) = 0u;
          *(_OWORD *)(v60 + 16) = 0u;
          *(_OWORD *)(v60 + 32) = 0u;
          *(_OWORD *)v60 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v60, v61);
        }
      }
      v46 = *((_QWORD *)v45 + 382);
      v39 = a1[1];
      v43 = *((_BYTE *)v39 + 45);
    }
    v47 = *(_QWORD *)(v46 + 32);
    if ((v43 & 1) != 0)
    {
      v48 = 0;
    }
    else
    {
      v48 = *(_QWORD *)(*((_QWORD *)v39 + 3) + 8);
      if (v48 && (*(_WORD *)(v48 + 28) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19648633CLL);
      }
    }
    *((_BYTE *)a1 + 148) = v47 == v48;
    if (v47 == v48)
    {
      v50 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v39 + 3)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 296);
      v51 = *((_QWORD *)v50 + 382);
      if (!v51)
      {
        v62 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v62, v50);
        v64 = (WebCore::Editor *)*((_QWORD *)v50 + 382);
        *((_QWORD *)v50 + 382) = v62;
        if (v64)
        {
          WebCore::Editor::~Editor(v64, v63);
          if (*(_DWORD *)v65)
          {
            *(_QWORD *)(v65 + 496) = 0;
            *(_OWORD *)(v65 + 464) = 0u;
            *(_OWORD *)(v65 + 480) = 0u;
            *(_OWORD *)(v65 + 432) = 0u;
            *(_OWORD *)(v65 + 448) = 0u;
            *(_OWORD *)(v65 + 400) = 0u;
            *(_OWORD *)(v65 + 416) = 0u;
            *(_OWORD *)(v65 + 368) = 0u;
            *(_OWORD *)(v65 + 384) = 0u;
            *(_OWORD *)(v65 + 336) = 0u;
            *(_OWORD *)(v65 + 352) = 0u;
            *(_OWORD *)(v65 + 304) = 0u;
            *(_OWORD *)(v65 + 320) = 0u;
            *(_OWORD *)(v65 + 272) = 0u;
            *(_OWORD *)(v65 + 288) = 0u;
            *(_OWORD *)(v65 + 240) = 0u;
            *(_OWORD *)(v65 + 256) = 0u;
            *(_OWORD *)(v65 + 208) = 0u;
            *(_OWORD *)(v65 + 224) = 0u;
            *(_OWORD *)(v65 + 176) = 0u;
            *(_OWORD *)(v65 + 192) = 0u;
            *(_OWORD *)(v65 + 144) = 0u;
            *(_OWORD *)(v65 + 160) = 0u;
            *(_OWORD *)(v65 + 112) = 0u;
            *(_OWORD *)(v65 + 128) = 0u;
            *(_OWORD *)(v65 + 80) = 0u;
            *(_OWORD *)(v65 + 96) = 0u;
            *(_OWORD *)(v65 + 48) = 0u;
            *(_OWORD *)(v65 + 64) = 0u;
            *(_OWORD *)(v65 + 16) = 0u;
            *(_OWORD *)(v65 + 32) = 0u;
            *(_OWORD *)v65 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v65, v66);
          }
        }
        v51 = *((_QWORD *)v50 + 382);
        v39 = a1[1];
      }
      v49 = *(_DWORD *)(v51 + 60) != 0;
    }
    else
    {
      v49 = 0;
    }
  }
  *((_BYTE *)a1 + 149) = v49;
  v52 = a1[3];
  v53 = *((_QWORD *)v52 + 3);
  if ((*(_BYTE *)(v53 + 231) & 0x1C) == 0)
  {
    v54 = 0;
    v55 = 0;
    goto LABEL_65;
  }
  v69 = *(_DWORD *)(v53 + 232);
  if ((v69 & 0xC) != 0)
  {
    if (((*((_DWORD *)v52 + 11) >> 13) & 6u) - 2 >= 4)
    {
      v54 = v69 & 1;
      goto LABEL_100;
    }
    v54 = (v69 & 0xC) == 8;
LABEL_118:
    if ((v69 & 4) != 0)
      goto LABEL_119;
    goto LABEL_101;
  }
  v54 = v69 & 1;
  if (((*((_DWORD *)v52 + 11) >> 13) & 6u) - 2 < 4)
    goto LABEL_118;
LABEL_100:
  if ((v69 & 2) != 0)
  {
LABEL_119:
    v55 = 1;
    goto LABEL_65;
  }
LABEL_101:
  v70 = (WebCore::RenderBlockFlow *)WebCore::RenderText::emphasisMarkExistsAndIsAbove(WebCore::RenderText const&,WebCore::RenderStyle const&)::$_0::operator()(*((_QWORD *)v39 + 4));
  if (!v70)
    goto LABEL_119;
  hasLines = WebCore::RenderBlockFlow::hasLines(v70);
  if (hasLines)
    v54 = 0;
  v55 = !hasLines;
LABEL_65:
  *((_WORD *)a1 + 75) = v54 | (v55 << 8);
  return a1;
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::~TextBoxPainter(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

void WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paint(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::EventRegionContext *v13;
  WebCore::EventRegionContext *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  CGRect *v36;
  CGRect *v37;
  unsigned int v38;
  int v39;
  CGRect *v40;
  CGRect *v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  WTF **v52;
  WTF **v53;
  unsigned int v54;
  int v55;
  WTF **v56;
  WTF **v57;
  unsigned int v58;
  void *v59;
  const WebCore::TextBoxSelectableRange *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  CGFloat v69;
  WTF *v70;
  __int128 v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  unsigned int v77;
  CGFloat v78;
  uint64_t v79;
  __int128 v80;
  _DWORD *v81;
  WebCore::StyledMarkedText::Style *v82;
  unsigned int v83;
  __int128 v84;
  _DWORD *v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  __int128 v96;
  _DWORD *v97;
  uint64_t v98;
  __int128 v99;
  _DWORD *v100;
  uint64_t v101;
  unsigned int **v102;
  WTF::StringImpl *v103;
  WTF *v104;
  uint64_t v105;
  unsigned int **v106;
  WTF::StringImpl *v107;
  CGFloat v108;
  WebCore::RenderElement *v109;
  WTF::StringImpl *v110;
  CGFloat x;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unsigned int y_high;
  WTF::StringImpl *v126;
  WebCore::RenderElement *v127;
  WTF::StringImpl *v128;
  CGFloat v129;
  unint64_t v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  unsigned int v143;
  WTF::StringImpl *v144;
  void *v145;
  const WebCore::MarkedText *v146;
  WTF *v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl **v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WebCore::Document *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  float v164;
  unsigned int *v168;
  unsigned int v169;
  _DWORD *v170;
  unsigned int v171;
  _DWORD *v172;
  unint64_t v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  WTF::StringImpl *v178;
  int v179;
  int v180;
  unsigned int v181;
  float v182;
  unsigned int v183;
  unsigned int *v184;
  uint64_t v185;
  CGFloat v186;
  CGFloat v187;
  unsigned int v188;
  int v189;
  float v190;
  uint64_t v191;
  unsigned int v192;
  float v193;
  unsigned int v194;
  uint64_t v195;
  WebCore::RenderElement *v196;
  char *LineStyle;
  unsigned int v198;
  _DWORD *v199;
  uint64_t v200;
  float v201;
  uint64_t v202;
  unsigned int v203;
  float v204;
  uint64_t v205;
  WebCore::RenderElement *v206;
  char *v207;
  BOOL v208;
  unint64_t v209;
  uint64_t v210;
  float v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  void (**v215)(WebCore::RenderThemeIOS *__hidden);
  void *v216;
  WTF *v217;
  unint64_t v218;
  WTF *v219;
  float v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float v225;
  void *v226;
  unsigned int v227;
  BOOL v228;
  int v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _DWORD *v239;
  int v240;
  unsigned int v241;
  _DWORD *v242;
  WTF *v244;
  void *v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int v253;
  const WebCore::RenderObject *v254;
  WebCore::Page *v255;
  float v256;
  float v257;
  float v258;
  unsigned int v259;
  uint64_t v260;
  float v261;
  unsigned int v262;
  uint64_t v263;
  float v264;
  float v265;
  int v266;
  unsigned int v267;
  float v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  float v274;
  float v275;
  WTF *v276;
  float v277;
  float v278;
  float v279;
  float v280;
  unsigned int v281;
  unsigned int v282;
  float v283;
  int v284;
  WTF::MonotonicTime *v285;
  uint64_t v286;
  void *v287;
  unint64_t v288;
  uint64_t v289;
  CGFloat v290;
  float v291;
  void *v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  CGFloat v296;
  CGFloat v297;
  CGFloat v298;
  CGFloat v299;
  const CGRect *v300;
  unint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  WTF::StringImpl *v321;
  uint64_t v322;
  WTF::StringImpl **v323;
  WTF::StringImpl *v324;
  uint64_t v325;
  WTF::StringImpl **v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  WTF::StringImpl **v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  WTF::StringImpl **v332;
  WTF::StringImpl *v333;
  WebCore::Editor *v334;
  void *v335;
  void *v336;
  unsigned int v337;
  unsigned int v338;
  WebCore::Editor *v339;
  void *v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  unsigned int v346;
  uint64_t v347;
  int v348;
  int v349;
  int v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  _QWORD *v355;
  WTF *v356;
  int v357;
  unsigned int v358;
  CGFloat v359;
  WTF *v360[2];
  __int128 v361;
  CGRect v362;
  __int128 v363;
  CGPoint v364;

  v1 = (_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(unsigned __int16 *)(v2 + 16);
  if (v3 == 0x2000)
  {
    v15 = *(_QWORD *)(v2 + 72);
    if (v15 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
      v15 = 0;
    WebCore::AccessibilityRegionContext::takeBounds(v15, (_QWORD *)v1[1], *((float *)v1 + 32), *((float *)v1 + 33), *((float *)v1 + 34), *((float *)v1 + 35));
    return;
  }
  if (v3 == 4096)
  {
    v9 = *(WebCore::RenderObject **)(a1 + 8);
    v10 = *(_QWORD *)(*((_QWORD *)v9 + 4) + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v10 + 120) & 0x30) == 0)
    {
      v11 = *(_QWORD *)(v10 + 32);
      if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v12 + 104) + 239) & 0x18) == 0)
      {
        v13 = *(WebCore::EventRegionContext **)(v2 + 72);
        if (v13)
        {
          if ((*(unsigned int (**)(WebCore::EventRegionContext *))(*(_QWORD *)v13 + 16))(v13))
            v14 = v13;
          else
            v14 = 0;
          v9 = (WebCore::RenderObject *)v1[1];
        }
        else
        {
          v14 = 0;
        }
        v362.size = 0u;
        v363 = 0u;
        v362.origin = (CGPoint)*((_OWORD *)v1 + 8);
        WebCore::EventRegionContext::unite(v14, (const WebCore::FloatRoundedRect *)&v362, v9, (const WebCore::RenderStyle *)v1[3], 0);
      }
    }
    return;
  }
  if (v3 == 128 && !*(_BYTE *)(a1 + 147))
    return;
  if ((*(_WORD *)(*(_QWORD *)a1 + 52) & 0x800) != 0 || *(_BYTE *)(a1 + 145))
  {
    v348 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 80);
    v17 = *((float *)v1 + 32);
    v18 = *((float *)v1 + 33) + *((float *)v1 + 35);
    v362.origin = (CGPoint)xmmword_1968A14C0;
    v362.size = (CGSize)xmmword_1969F8310;
    *(double *)&v363 = (float)(v17 + v18);
    *((double *)&v363 + 1) = (float)(v18 - v17);
    a1 = (*(uint64_t (**)(uint64_t, CGRect *))(*(_QWORD *)v16 + 656))(v16, &v362);
    v3 = *(unsigned __int16 *)(v1[11] + 16);
    v348 = 1;
  }
  v355 = v1;
  if (v3 != 8)
    goto LABEL_248;
  if (!*((_BYTE *)v1 + 146))
  {
    if (*((_BYTE *)v1 + 148) && !*((_BYTE *)v1 + 149))
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1[1] + 24) + 8)
                                                                      + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 296);
      v24 = *(_QWORD *)(v23 + 3056);
      if (v24)
        goto LABEL_43;
      v339 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v339, (WebCore::Document *)v23);
      a1 = *(_QWORD *)(v23 + 3056);
      *(_QWORD *)(v23 + 3056) = v339;
      if (!a1)
        goto LABEL_573;
      WebCore::Editor::~Editor((WebCore::Editor *)a1, v340);
      if (!*(_DWORD *)a1)
      {
        a1 = WTF::fastFree((WTF *)a1, v341);
        goto LABEL_573;
      }
      goto LABEL_582;
    }
    v4 = (_QWORD *)v1[2];
    v5 = (int *)v4[187];
    if (v5)
    {
      v6 = *v5;
      v7 = *v5 + 1;
      *v5 = v7;
      v8 = *((_QWORD *)v5 + 1);
      if (v8 && *(_DWORD *)(v8 - 12))
      {
        if (v7)
        {
          *v5 = v6;
          goto LABEL_106;
        }
LABEL_556:
        __break(0xC471u);
        JUMPOUT(0x19648863CLL);
      }
      if (!v7)
        goto LABEL_556;
      *v5 = v6;
    }
    v19 = v4[308];
    if (v19)
    {
      v342 = *(_QWORD *)(v19 + 8);
      if (v342)
      {
        if (*(_DWORD *)(v342 - 12))
          goto LABEL_106;
      }
    }
    v20 = v4[309];
    if (v20)
    {
      v343 = *(_QWORD *)(v20 + 8);
      if (v343)
      {
        if (*(_DWORD *)(v343 - 12))
          goto LABEL_106;
      }
    }
    v21 = v4[310];
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        if (*(_DWORD *)(v22 - 12))
          goto LABEL_106;
      }
    }
    goto LABEL_174;
  }
  while (1)
  {
LABEL_174:
    WebCore::MarkedText::collectForDocumentMarkers(v1[1], (uint64_t)(v1 + 12), 2, (uint64_t)&v364);
    v109 = WebCore::RenderText::spellingErrorPseudoStyle((WebCore::RenderText *)v1[1]);
    if (v109 && (*((_DWORD *)v109 + 10) & 0x78000) != 0)
    {
      x = v364.x;
      v112 = *(_QWORD *)&v364.x + 40 * HIDWORD(v364.y);
      if (HIDWORD(v364.y))
      {
        v113 = 0;
        v114 = *(_QWORD *)&v364.x + 40 * HIDWORD(v364.y);
        v115 = v114;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)&x + 12) == 4)
          {
            v116 = *(_QWORD *)&x;
            if (v115 != *(_QWORD *)&v364.x + 40 * HIDWORD(v364.y))
            {
              if (v114 == *(_QWORD *)&x)
              {
                v116 = v115;
              }
              else
              {
                if (v114 <= v115)
                {
                  v119 = 0;
                  v117 = (uint64_t)(*(_QWORD *)&x - v114) / 40;
                  do
                  {
                    v120 = v115 + 40 * v117 + v119;
                    *(_DWORD *)(v120 - 40) = 0;
                    v121 = *(_QWORD *)&x + v119;
                    v122 = *(_OWORD *)(*(_QWORD *)&x + v119 - 36);
                    *(_DWORD *)(v120 - 20) = *(_DWORD *)(*(_QWORD *)&x + v119 - 20);
                    *(_OWORD *)(v120 - 36) = v122;
                    v123 = *(_QWORD *)(*(_QWORD *)&x + v119 - 16);
                    *(_QWORD *)(v121 - 16) = 0;
                    *(_QWORD *)(v120 - 16) = v123;
                    *(_DWORD *)(v120 - 8) = *(_DWORD *)(*(_QWORD *)&x + v119 - 8);
                    v124 = *(WTF::StringImpl **)(*(_QWORD *)&x + v119 - 16);
                    *(_QWORD *)(v121 - 16) = 0;
                    if (v124)
                    {
                      if (*(_DWORD *)v124 == 2)
                        WTF::StringImpl::destroy(v124, v110);
                      else
                        *(_DWORD *)v124 -= 2;
                    }
                    v119 -= 40;
                  }
                  while (*(_QWORD *)&x + v119 != v114);
                }
                else
                {
                  WTF::VectorMover<false,WebCore::MarkedText>::move(v114, *(WTF::StringImpl **)&x, v115);
                  v117 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&x - v114) >> 3);
                }
                v116 = v115 + 40 * v117;
              }
            }
            v118 = *(WTF::StringImpl **)(*(_QWORD *)&x + 24);
            *(_QWORD *)(*(_QWORD *)&x + 24) = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
                WTF::StringImpl::destroy(v118, v110);
              else
                *(_DWORD *)v118 -= 2;
            }
            v114 = *(_QWORD *)&x + 40;
            ++v113;
            v115 = v116;
          }
          else
          {
            v116 = v115;
          }
          *(_QWORD *)&x += 40;
        }
        while (*(_QWORD *)&x < v112);
        x = v364.x;
        y_high = HIDWORD(v364.y);
        v112 = v116;
        v1 = v355;
      }
      else
      {
        y_high = 0;
        v113 = 0;
        v114 = *(_QWORD *)&v364.x;
      }
      v126 = (WTF::StringImpl *)(*(_QWORD *)&x + 40 * y_high);
      if ((WTF::StringImpl *)v114 != v126)
      {
        if (v114 <= v112)
        {
          v314 = v112 + 40 * ((uint64_t)((uint64_t)v126 - v114) / 40) - 16;
          do
          {
            *(_DWORD *)(v314 - 24) = 0;
            v315 = *(_OWORD *)((char *)v126 - 36);
            *(_DWORD *)(v314 - 4) = *((_DWORD *)v126 - 5);
            *(_OWORD *)(v314 - 20) = v315;
            v316 = *((_QWORD *)v126 - 2);
            *((_QWORD *)v126 - 2) = 0;
            *(_QWORD *)v314 = v316;
            *(_DWORD *)(v314 + 8) = *((_DWORD *)v126 - 2);
            v317 = (WTF::StringImpl *)*((_QWORD *)v126 - 2);
            *((_QWORD *)v126 - 2) = 0;
            if (v317)
            {
              if (*(_DWORD *)v317 == 2)
                WTF::StringImpl::destroy(v317, v110);
              else
                *(_DWORD *)v317 -= 2;
            }
            v126 = (WTF::StringImpl *)((char *)v126 - 40);
            v314 -= 40;
          }
          while (v126 != (WTF::StringImpl *)v114);
        }
        else
        {
          WTF::VectorMover<false,WebCore::MarkedText>::move(v114, v126, v112);
        }
      }
      HIDWORD(v364.y) -= v113;
    }
    v127 = WebCore::RenderText::grammarErrorPseudoStyle((WebCore::RenderText *)v1[1]);
    if (v127 && (*((_DWORD *)v127 + 10) & 0x78000) != 0)
    {
      v129 = v364.x;
      v130 = *(_QWORD *)&v364.x + 40 * HIDWORD(v364.y);
      if (HIDWORD(v364.y))
      {
        v131 = 0;
        v132 = *(_QWORD *)&v364.x + 40 * HIDWORD(v364.y);
        v133 = v132;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)&v129 + 12) == 1)
          {
            v134 = *(_QWORD *)&v129;
            if (v133 != *(_QWORD *)&v364.x + 40 * HIDWORD(v364.y))
            {
              if (v132 == *(_QWORD *)&v129)
              {
                v134 = v133;
              }
              else
              {
                if (v132 <= v133)
                {
                  v137 = 0;
                  v135 = (uint64_t)(*(_QWORD *)&v129 - v132) / 40;
                  do
                  {
                    v138 = v133 + 40 * v135 + v137;
                    *(_DWORD *)(v138 - 40) = 0;
                    v139 = *(_QWORD *)&v129 + v137;
                    v140 = *(_OWORD *)(*(_QWORD *)&v129 + v137 - 36);
                    *(_DWORD *)(v138 - 20) = *(_DWORD *)(*(_QWORD *)&v129 + v137 - 20);
                    *(_OWORD *)(v138 - 36) = v140;
                    v141 = *(_QWORD *)(*(_QWORD *)&v129 + v137 - 16);
                    *(_QWORD *)(v139 - 16) = 0;
                    *(_QWORD *)(v138 - 16) = v141;
                    *(_DWORD *)(v138 - 8) = *(_DWORD *)(*(_QWORD *)&v129 + v137 - 8);
                    v142 = *(WTF::StringImpl **)(*(_QWORD *)&v129 + v137 - 16);
                    *(_QWORD *)(v139 - 16) = 0;
                    if (v142)
                    {
                      if (*(_DWORD *)v142 == 2)
                        WTF::StringImpl::destroy(v142, v128);
                      else
                        *(_DWORD *)v142 -= 2;
                    }
                    v137 -= 40;
                  }
                  while (*(_QWORD *)&v129 + v137 != v132);
                }
                else
                {
                  WTF::VectorMover<false,WebCore::MarkedText>::move(v132, *(WTF::StringImpl **)&v129, v133);
                  v135 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v129 - v132) >> 3);
                }
                v134 = v133 + 40 * v135;
              }
            }
            v136 = *(WTF::StringImpl **)(*(_QWORD *)&v129 + 24);
            *(_QWORD *)(*(_QWORD *)&v129 + 24) = 0;
            if (v136)
            {
              if (*(_DWORD *)v136 == 2)
                WTF::StringImpl::destroy(v136, v128);
              else
                *(_DWORD *)v136 -= 2;
            }
            v132 = *(_QWORD *)&v129 + 40;
            ++v131;
            v133 = v134;
          }
          else
          {
            v134 = v133;
          }
          *(_QWORD *)&v129 += 40;
        }
        while (*(_QWORD *)&v129 < v130);
        v129 = v364.x;
        v143 = HIDWORD(v364.y);
        v130 = v134;
        v1 = v355;
      }
      else
      {
        v143 = 0;
        v131 = 0;
        v132 = *(_QWORD *)&v364.x;
      }
      v144 = (WTF::StringImpl *)(*(_QWORD *)&v129 + 40 * v143);
      if ((WTF::StringImpl *)v132 != v144)
      {
        if (v132 <= v130)
        {
          v318 = v130 + 40 * ((uint64_t)((uint64_t)v144 - v132) / 40) - 16;
          do
          {
            *(_DWORD *)(v318 - 24) = 0;
            v319 = *(_OWORD *)((char *)v144 - 36);
            *(_DWORD *)(v318 - 4) = *((_DWORD *)v144 - 5);
            *(_OWORD *)(v318 - 20) = v319;
            v320 = *((_QWORD *)v144 - 2);
            *((_QWORD *)v144 - 2) = 0;
            *(_QWORD *)v318 = v320;
            *(_DWORD *)(v318 + 8) = *((_DWORD *)v144 - 2);
            v321 = (WTF::StringImpl *)*((_QWORD *)v144 - 2);
            *((_QWORD *)v144 - 2) = 0;
            if (v321)
            {
              if (*(_DWORD *)v321 == 2)
                WTF::StringImpl::destroy(v321, v128);
              else
                *(_DWORD *)v321 -= 2;
            }
            v144 = (WTF::StringImpl *)((char *)v144 - 40);
            v318 -= 40;
          }
          while (v144 != (WTF::StringImpl *)v132);
        }
        else
        {
          WTF::VectorMover<false,WebCore::MarkedText>::move(v132, v144, v130);
        }
      }
      HIDWORD(v364.y) -= v131;
    }
    WebCore::MarkedText::subdivide((uint64_t)&v364, 1, (uint64_t)&v356);
    v147 = v356;
    v148 = v358;
    if (v358)
    {
      if (!*(_BYTE *)(v1[2] + 3382))
      {
        v276 = (WTF *)((char *)v356 + 40 * v358);
        do
        {
          if (!*(_BYTE *)(v355[2] + 3382))
          {
            v362.origin.x = *(CGFloat *)v355;
            LODWORD(v362.size.width) = 1;
            WebCore::calculateDocumentMarkerBounds((WebCore *)&v362, v147, v146);
            v278 = v277;
            v280 = v279;
            v360[1] = (WTF *)__PAIR64__(v282, v281);
            if (LODWORD(v362.size.width) != -1)
              ((void (*)(CGFloat *, CGRect *))off_1E343A000[LODWORD(v362.size.width)])(&v359, &v362);
            v283 = v280 + *((float *)v355 + 33);
            *(float *)v360 = v278 + *((float *)v355 + 32);
            *((float *)v360 + 1) = v283;
            v284 = 1;
            switch(*((_BYTE *)v147 + 12))
            {
              case 1:
                v284 = 2;
                goto LABEL_456;
              case 2:
                v284 = 3;
                goto LABEL_456;
              case 3:
                v285 = *(WTF::MonotonicTime **)(v355[11] + 80);
                v286 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v355[1] + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 288);
                v287 = *(void **)(v286 + 40);
                if (v287)
                {
                  if (objc_msgSend(*(id *)(v286 + 40), "conformsToProtocol:", &unk_1EE342188))
                    v287 = (void *)objc_msgSend(v287, "superview");
                  objc_msgSend(v287, "frame", v347);
                  v362.origin.x = v296;
                  v362.origin.y = v297;
                  v362.size.width = v298;
                  v362.size.height = v299;
                  WebCore::enclosingIntRect(&v362, v300);
                  v288 = v301;
                }
                else
                {
                  v288 = *(_QWORD *)(v286 + 56);
                }
                WebCore::drawUnifiedTextReplacementUnderline(v285, (float *)v360, v288);
                break;
              case 6:
                v284 = 4;
                goto LABEL_456;
              case 0xA:
                v284 = 0;
                goto LABEL_456;
              default:
LABEL_456:
                {
                  WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                  unk_1ECE88AD0 = 0u;
                  unk_1ECE88AC0 = 0u;
                  WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                }
                WebCore::RenderTheme::documentMarkerLineColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, v355[1], v284, &v359);
                v289 = *((_QWORD *)v147 + 2);
                v290 = v359;
                if (!v289)
                  goto LABEL_466;
                if ((*(_QWORD *)&v359 & 0x8000000000000) != 0)
                  v291 = *(float *)((*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL) + 0x10);
                else
                  v291 = (float)LOBYTE(v359) / 255.0;
                WebCore::Color::colorWithAlpha((uint64_t)&v359, *(float *)(v289 + 148) * v291, (uint64_t *)&v362);
                if ((*(_QWORD *)&v359 & 0x8000000000000) != 0)
                {
                  v308 = (unsigned int *)(*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL);
                  if ((*(_QWORD *)&v362.origin.x & 0x8000000000000) == 0
                    || (v311 = (unsigned int *)(*(_QWORD *)&v362.origin.x & 0xFFFFFFFFFFFFLL),
                        *(float *)((*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v362.origin.x & 0xFFFFFFFFFFFFLL)
                                                                                          + 4))
                    || *(float *)((*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v362.origin.x & 0xFFFFFFFFFFFFLL)
                                                                                         + 8)
                    || *(float *)((*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v362.origin.x & 0xFFFFFFFFFFFFLL)
                                                                                           + 0xC)
                    || *(float *)((*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v362.origin.x & 0xFFFFFFFFFFFFLL)
                                                                                            + 0x10)
                    || HIBYTE(*(_QWORD *)&v359) != HIBYTE(*(_QWORD *)&v362.origin.x)
                    || BYTE6(v359) != BYTE6(v362.origin.x))
                  {
                    do
                    {
                      v309 = __ldaxr(v308);
                      v310 = v309 - 1;
                    }
                    while (__stlxr(v310, v308));
                    if (!v310)
                    {
                      atomic_store(1u, v308);
                      WTF::fastFree((WTF *)v308, v292);
                    }
LABEL_464:
                    v359 = v362.origin.x;
                    goto LABEL_465;
                  }
                  do
                  {
                    v312 = __ldaxr(v311);
                    v313 = v312 - 1;
                  }
                  while (__stlxr(v313, v311));
                  if (!v313)
                  {
                    atomic_store(1u, v311);
                    WTF::fastFree((WTF *)v311, v292);
                  }
                }
                else if (*(_QWORD *)&v359 != *(_QWORD *)&v362.origin.x
                       || (*(_QWORD *)&v362.origin.x & 0x8000000000000) != 0)
                {
                  goto LABEL_464;
                }
LABEL_465:
                v290 = v359;
LABEL_466:
                v293 = *(_QWORD *)(v355[11] + 80);
                LOBYTE(v362.origin.x) = v284;
                v362.origin.y = v290;
                if ((*(_QWORD *)&v290 & 0x8000000000000) != 0)
                {
                  v294 = (unsigned int *)(*(_QWORD *)&v290 & 0xFFFFFFFFFFFFLL);
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 + 1, v294));
                }
                (*(void (**)(uint64_t, WTF **, CGRect *))(*(_QWORD *)v293 + 576))(v293, v360, &v362);
                if ((*(_QWORD *)&v362.origin.y & 0x8000000000000) != 0)
                {
                  v302 = (unsigned int *)(*(_QWORD *)&v362.origin.y & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v303 = __ldaxr(v302);
                    v304 = v303 - 1;
                  }
                  while (__stlxr(v304, v302));
                  if (!v304)
                  {
                    atomic_store(1u, v302);
                    WTF::fastFree((WTF *)v302, v145);
                  }
                }
                if ((*(_QWORD *)&v359 & 0x8000000000000) != 0)
                {
                  v305 = (unsigned int *)(*(_QWORD *)&v359 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v306 = __ldaxr(v305);
                    v307 = v306 - 1;
                  }
                  while (__stlxr(v307, v305));
                  if (!v307)
                  {
                    atomic_store(1u, v305);
                    WTF::fastFree((WTF *)v305, v145);
                  }
                }
                break;
            }
          }
          v147 = (WTF *)((char *)v147 + 40);
        }
        while (v147 != v276);
        v148 = v358;
        v147 = v356;
        if (!v358)
        {
          v1 = v355;
          if (!v356)
            goto LABEL_246;
          goto LABEL_501;
        }
        v1 = v355;
      }
      v149 = 40 * v148;
      v150 = (WTF::StringImpl **)((char *)v147 + 24);
      do
      {
        v151 = *v150;
        *v150 = 0;
        if (v151)
        {
          if (*(_DWORD *)v151 == 2)
            WTF::StringImpl::destroy(v151, (WTF::StringImpl *)v145);
          else
            *(_DWORD *)v151 -= 2;
        }
        v150 += 5;
        v149 -= 40;
      }
      while (v149);
      v147 = v356;
    }
    if (!v147)
      goto LABEL_246;
LABEL_501:
    v356 = 0;
    v357 = 0;
    WTF::fastFree(v147, v145);
LABEL_246:
    v152 = *(WTF **)&v364.x;
    if (!HIDWORD(v364.y))
    {
      if (!*(_QWORD *)&v364.x)
        goto LABEL_248;
LABEL_528:
      v364.x = 0.0;
      LODWORD(v364.y) = 0;
      WTF::fastFree(v152, v145);
      goto LABEL_248;
    }
    v322 = 40 * HIDWORD(v364.y);
    v323 = (WTF::StringImpl **)(*(_QWORD *)&v364.x + 24);
    do
    {
      v324 = *v323;
      *v323 = 0;
      if (v324)
      {
        if (*(_DWORD *)v324 == 2)
          WTF::StringImpl::destroy(v324, (WTF::StringImpl *)v145);
        else
          *(_DWORD *)v324 -= 2;
      }
      v323 += 5;
      v322 -= 40;
    }
    while (v322);
    v152 = *(WTF **)&v364.x;
    if (*(_QWORD *)&v364.x)
      goto LABEL_528;
LABEL_248:
    a1 = (uint64_t)WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintForegroundAndDecorations((uint64_t)v1);
    if (*(_WORD *)(v1[11] + 16) != 8)
      goto LABEL_441;
    if (!*((_BYTE *)v1 + 149))
      break;
    v153 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1[1] + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 296);
    v154 = *((_QWORD *)v153 + 382);
    if (!v154)
    {
      v334 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v334, v153);
      a1 = *((_QWORD *)v153 + 382);
      *((_QWORD *)v153 + 382) = v334;
      if (a1)
      {
        WebCore::Editor::~Editor((WebCore::Editor *)a1, v335);
        if (*(_DWORD *)a1)
        {
          *(_QWORD *)(a1 + 496) = 0;
          *(_OWORD *)(a1 + 464) = 0u;
          *(_OWORD *)(a1 + 480) = 0u;
          *(_OWORD *)(a1 + 432) = 0u;
          *(_OWORD *)(a1 + 448) = 0u;
          *(_OWORD *)(a1 + 400) = 0u;
          *(_OWORD *)(a1 + 416) = 0u;
          *(_OWORD *)(a1 + 368) = 0u;
          *(_OWORD *)(a1 + 384) = 0u;
          *(_OWORD *)(a1 + 336) = 0u;
          *(_OWORD *)(a1 + 352) = 0u;
          *(_OWORD *)(a1 + 304) = 0u;
          *(_OWORD *)(a1 + 320) = 0u;
          *(_OWORD *)(a1 + 272) = 0u;
          *(_OWORD *)(a1 + 288) = 0u;
          *(_OWORD *)(a1 + 240) = 0u;
          *(_OWORD *)(a1 + 256) = 0u;
          *(_OWORD *)(a1 + 208) = 0u;
          *(_OWORD *)(a1 + 224) = 0u;
          *(_OWORD *)(a1 + 176) = 0u;
          *(_OWORD *)(a1 + 192) = 0u;
          *(_OWORD *)(a1 + 144) = 0u;
          *(_OWORD *)(a1 + 160) = 0u;
          *(_OWORD *)(a1 + 112) = 0u;
          *(_OWORD *)(a1 + 128) = 0u;
          *(_OWORD *)(a1 + 80) = 0u;
          *(_OWORD *)(a1 + 96) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)(a1 + 64) = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          *(_OWORD *)(a1 + 32) = 0u;
          *(_OWORD *)a1 = 0u;
        }
        else
        {
          a1 = WTF::fastFree((WTF *)a1, v336);
        }
      }
      v154 = *((_QWORD *)v153 + 382);
      v1 = v355;
    }
    v155 = *(unsigned int *)(v154 + 60);
    if (!(_DWORD)v155)
      break;
    v156 = 0;
    v157 = *(unsigned int **)(v154 + 48);
    v158 = *v157;
    v159 = v157[1];
    v160 = 32 * v155;
    do
    {
      v156 |= *((_BYTE *)v157 + 24) != 0;
      v161 = *v157;
      v162 = v157[1];
      v157 += 8;
      if (v161 < v158)
        v158 = v161;
      if (v162 > v159)
        v159 = v162;
      v160 -= 32;
    }
    while (v160);
    v23 = 0;
    v163 = llroundf(89.25);
    if (v163 >= 255)
      v163 = 255;
    v164 = -2.0;
    v347 = v163 & ~(v163 >> 63) | 0x1104000000000000;
    __asm { FMOV            V15.2S, #1.0 }
    v351 = *(unsigned int *)(v154 + 60);
    v352 = v154;
    do
    {
      v353 = *(_QWORD *)(v154 + 48);
      v168 = (unsigned int *)(v353 + 32 * v23);
      v169 = v168[1];
      v354 = v168 + 1;
      v170 = (_DWORD *)*v1;
      if (*v1)
      {
        a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v170 + 80))(*v1);
        if ((a1 & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196488698);
        }
      }
      if (v169 <= v170[18])
      {
        if (++v23 >= v155)
          goto LABEL_411;
        continue;
      }
      v171 = *v168;
      v172 = (_DWORD *)*v1;
      if (*v1 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v172 + 80))(*v1) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964886E0);
      }
      if (v171 >= v172[19] + v172[18])
        goto LABEL_411;
      *(_OWORD *)v360 = 0u;
      v361 = 0u;
      v173 = atomic_load(&qword_1ECE84268);
      if (v173 != -1)
      {
        *(_QWORD *)&v362.origin.x = &v356;
        *(_QWORD *)&v364.x = &v362;
        std::__call_once(&qword_1ECE84268, &v364, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::redesignedTextCursorEnabled(void)::{lambda(void)#1} &&>>);
      }
      if (byte_1ECE84252)
      {
        if (*v168 >= v158)
        {
          v360[0] = _D15;
          *(_QWORD *)&v361 = _D15;
        }
        if (*v354 <= v159)
        {
          v360[1] = _D15;
          *((_QWORD *)&v361 + 1) = _D15;
        }
      }
      v174 = *((float *)v1 + 10);
      v175 = *v1;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 80))(*v1) & 1) == 0)
        goto LABEL_589;
      v176 = *v1;
      v177 = *(_DWORD *)(v175 + 72);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 80))(*v1) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196488470);
      }
      v179 = *(_DWORD *)(v176 + 72);
      v180 = *(_DWORD *)(v176 + 76);
      v181 = *v168;
      v182 = 0.0;
      if (v177 <= *v168)
      {
        v349 = *(_DWORD *)(v176 + 76);
        v350 = *(_DWORD *)(v176 + 72);
        v186 = *(double *)v355;
        v185 = v355[1];
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v355 + 80))(*v355) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196488490);
        }
        v187 = *(double *)v355;
        v188 = *(_DWORD *)(*(_QWORD *)&v186 + 72);
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v355 + 80))(*v355) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964884B0);
        }
        v189 = *(_DWORD *)(*(_QWORD *)&v187 + 72);
        WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::textPosition((uint64_t)v355);
        v191 = *(_QWORD *)(v185 + 104);
        if (v191)
        {
          v192 = *(_DWORD *)(v191 + 4);
          if (v192 > v188)
          {
            v193 = v190;
            if (v181 - v189 + v188 <= v192)
              v194 = v181 - v189;
            else
              v194 = v192 - v188;
            v195 = *(_QWORD *)(v185 + 32);
            if (*((_BYTE *)v355 + 144))
            {
              if (v195)
                v196 = *(WebCore::RenderElement **)(v195 + 8);
              else
                v196 = 0;
              LineStyle = WebCore::RenderElement::firstLineStyle(v196, v178);
            }
            else
            {
              if (v195)
                v195 = *(_QWORD *)(v195 + 8);
              LineStyle = (char *)(v195 + 80);
            }
            v182 = WebCore::RenderText::width(v185, v188, v194, (WebCore::FontCascade *)(*((_QWORD *)LineStyle + 4) + 32), 0, 0, v193);
          }
        }
        v183 = v181;
        v184 = v354;
        v180 = v349;
        v179 = v350;
      }
      else
      {
        v183 = v177;
        v184 = v168 + 1;
      }
      v198 = v180 + v179;
      if (v180 + v179 == *v184)
      {
        if (!*((_BYTE *)v355 + 116))
        {
          v208 = v177 > v181;
          v1 = v355;
          v154 = v352;
          if (v208)
            goto LABEL_320;
          goto LABEL_303;
        }
        v1 = v355;
        v154 = v352;
LABEL_300:
        v199 = (_DWORD *)*v1;
        if (*v1)
        {
          a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v199 + 80))(*v1);
          if ((a1 & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196488720);
          }
          if (!*((_BYTE *)v1 + 116))
            goto LABEL_581;
        }
        if (*((_DWORD *)v1 + 28) + v199[18] < v198)
          v198 = *((_DWORD *)v1 + 28) + v199[18];
        goto LABEL_303;
      }
      if (*v184 < v198)
        v198 = *v184;
      v1 = v355;
      v154 = v352;
      if (*((_BYTE *)v355 + 116))
        goto LABEL_300;
LABEL_303:
      v200 = v1[1];
      WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::textPosition((uint64_t)v1);
      v202 = *(_QWORD *)(v200 + 104);
      v174 = 0.0;
      if (v202)
      {
        v203 = *(_DWORD *)(v202 + 4);
        if (v203 > v183)
        {
          v204 = v201;
          if (v198 >= v203)
            v198 = v203;
          v205 = *(_QWORD *)(v200 + 32);
          if (*((_BYTE *)v1 + 144))
          {
            if (v205)
              v206 = *(WebCore::RenderElement **)(v205 + 8);
            else
              v206 = 0;
            v207 = WebCore::RenderElement::firstLineStyle(v206, v178);
          }
          else
          {
            if (v205)
              v205 = *(_QWORD *)(v205 + 8);
            v207 = (char *)(v205 + 80);
          }
          v174 = WebCore::RenderText::width(v200, v183, v198 - v183, (WebCore::FontCascade *)(*((_QWORD *)v207 + 4) + 32), 0, 0, v182 + v204);
        }
      }
      if ((*(_WORD *)(*v1 + 52) & 4) != 0)
        v182 = (float)(*((float *)v1 + 10) - v174) - v182;
LABEL_320:
      v155 = v351;
      a1 = (uint64_t)&qword_1ECE84268;
      v209 = atomic_load(&qword_1ECE84268);
      if (v209 != -1)
      {
        *(_QWORD *)&v362.origin.x = &v356;
        *(_QWORD *)&v364.x = &v362;
        std::__call_once(&qword_1ECE84268, &v364, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::redesignedTextCursorEnabled(void)::{lambda(void)#1} &&>>);
      }
      if (byte_1ECE84252)
      {
        v210 = *(_QWORD *)(v353 + 32 * v23 + 16);
        if ((v210 & 0x8000000000000) != 0)
        {
          if (*(float *)((v210 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_369;
        }
        else if (!*(_QWORD *)(v353 + 32 * v23 + 16))
        {
          goto LABEL_369;
        }
        if ((float)(*((float *)v1 + 11)
                   - (float)*((int *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v1[3], v178) + 11)) >= 2.0)
          v211 = 2.0;
        else
          v211 = 1.0;
        v212 = v1[1];
        if ((*(_BYTE *)(v212 + 45) & 2) != 0)
        {
          v213 = *(_QWORD *)(v212 + 32);
          if (v213)
            v213 = *(_QWORD *)(v213 + 8);
        }
        else
        {
          v213 = v1[1];
        }
        v214 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v212 + 24) + 8) + 40) + 8), (const WebCore::RenderStyle *)(v213 + 80));
        {
          v215 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
        }
        else
        {
          v246 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
          *(_OWORD *)(v246 + 40) = 0u;
          *(_OWORD *)(v246 + 24) = 0u;
          v215 = &off_1E335BC30;
          *(_QWORD *)v246 = &off_1E335BC30;
        }
        ((void (*)(WTF **__return_ptr, uint64_t *, uint64_t, _QWORD))v215[34])(&v356, &WebCore::RenderTheme::singleton(void)::theme, 207, v214 | 2u);
        if (*(_BYTE *)(v353 + 32 * v23 + 24) != 0 || (v156 & 1) == 0)
          goto LABEL_357;
        v217 = v356;
        if (((unint64_t)v356 & 0x8000000000000) != 0)
        {
          v229 = *(_DWORD *)(((unint64_t)v356 & 0xFFFFFFFFFFFFLL) + 0xC);
          if (((unint64_t)v356 >> 56) >= 0x14)
            v230 = 0x110C000000000000;
          else
            v230 = (unint64_t)v356 & 0xFF00000000000000 | 0xC000000000000;
          v231 = (unint64_t)v356 & 0x1000000000000;
          v232 = *(_QWORD *)(((unint64_t)v356 & 0xFFFFFFFFFFFFLL) + 4);
          v233 = WTF::fastMalloc((WTF *)0x14);
          *(_DWORD *)v233 = 1;
          *(_QWORD *)(v233 + 4) = v232;
          v164 = -2.0;
          *(_DWORD *)(v233 + 12) = v229;
          *(_DWORD *)(v233 + 16) = 1051931443;
          v218 = v230 | v231 | v233;
          v217 = v356;
        }
        else
        {
          v218 = v347 | (unint64_t)v356 & 0x10000FFFFFF00;
        }
        if (((unint64_t)v217 & 0x8000000000000) != 0)
        {
          v248 = (unsigned int *)((unint64_t)v217 & 0xFFFFFFFFFFFFLL);
          if ((v218 & 0x8000000000000) != 0)
          {
            v251 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFLL);
            if (*(float *)(((unint64_t)v217 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v218 & 0xFFFFFFFFFFFFLL) + 4)
              && *(float *)(((unint64_t)v217 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v218 & 0xFFFFFFFFFFFFLL) + 8)
              && *(float *)(((unint64_t)v217 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v218 & 0xFFFFFFFFFFFFLL)
                                                                                           + 0xC)
              && *(float *)(((unint64_t)v217 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v218 & 0xFFFFFFFFFFFFLL)
                                                                                            + 0x10)
              && (unint64_t)v217 >> 56 == HIBYTE(v218)
              && BYTE6(v217) == BYTE6(v218))
            {
              do
              {
                v252 = __ldaxr(v251);
                v253 = v252 - 1;
              }
              while (__stlxr(v253, v251));
              v184 = v354;
              v1 = v355;
              v155 = v351;
              v154 = v352;
              v164 = -2.0;
              if (!v253)
              {
                atomic_store(1u, v251);
                WTF::fastFree((WTF *)(v218 & 0xFFFFFFFFFFFFLL), v216);
              }
              goto LABEL_357;
            }
          }
          do
          {
            v249 = __ldaxr(v248);
            v250 = v249 - 1;
          }
          while (__stlxr(v250, v248));
          v184 = v354;
          v1 = v355;
          v155 = v351;
          v154 = v352;
          v164 = -2.0;
          if (!v250)
          {
            atomic_store(1u, v248);
            WTF::fastFree((WTF *)v248, v216);
          }
        }
        else if (v217 == (WTF *)v218 && (v218 & 0x8000000000000) == 0)
        {
          goto LABEL_357;
        }
        v356 = (WTF *)v218;
LABEL_357:
        v234 = *(_QWORD *)(v1[11] + 80);
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v234, (const WebCore::Color *)&v356);
        if (*(float *)(v234 + 188) != v211)
        {
          *(float *)(v234 + 188) = v211;
          *(_DWORD *)(v234 + 184) |= 8u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v234 + 88))(v234, v234 + 8);
        *(float *)&v235 = (float)(*((float *)v1 + 33) + *((float *)v1 + 11)) - v211;
        *(float *)&v364.x = v182 + *((float *)v1 + 32);
        *(_QWORD *)((char *)&v364.x + 4) = __PAIR64__(LODWORD(v174), v235);
        *((float *)&v364.y + 1) = v211;
        if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)v360))
        {
          a1 = (uint64_t)WebCore::GraphicsContext::drawLineForText(v234, (float *)&v364, *((unsigned __int8 *)v1 + 146), 0, 1);
        }
        else
        {
          v236 = *(_QWORD *)(v1[2] + 528);
          if (v236)
          {
            v237 = *(_QWORD *)(v236 + 8);
            if (v237)
            {
              v238 = *(_QWORD *)(v237 + 24);
              if (v238)
              {
                v239 = *(_DWORD **)(v238 + 8);
                if (v239)
                {
                  v240 = (*v239)++;
                  if (v240)
                  {
                    *v239 = v240;
                  }
                  else
                  {
                    WebCore::Page::~Page((uint64_t)v239);
                    WTF::fastFree(v244, v245);
                  }
                }
              }
            }
          }
          v362.origin = v364;
          v362.size = *(CGSize *)v360;
          v363 = v361;
          a1 = (*(uint64_t (**)(uint64_t, CGRect *, WTF **, uint64_t))(*(_QWORD *)v234 + 264))(v234, &v362, &v356, 1);
        }
        if (((unint64_t)v356 & 0x8000000000000) == 0)
          goto LABEL_369;
        a1 = (unint64_t)v356 & 0xFFFFFFFFFFFFLL;
        do
        {
          v247 = __ldaxr((unsigned int *)a1);
          v228 = --v247 == 0;
        }
        while (__stlxr(v247, (unsigned int *)a1));
LABEL_395:
        v184 = v354;
        v1 = v355;
        v155 = v351;
        v154 = v352;
        v164 = -2.0;
        if (v228)
        {
          atomic_store(1u, (unsigned int *)a1);
          a1 = WTF::fastFree((WTF *)a1, v226);
        }
        goto LABEL_369;
      }
      v219 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v1[3], v178);
      v220 = 1.0;
      if (*(_BYTE *)(v353 + 32 * v23 + 24) && (float)(*((float *)v1 + 11) - (float)*((int *)v219 + 11)) >= 2.0)
        v220 = 2.0;
      v221 = *(_QWORD *)(v1[1] + 32);
      if (v221)
        v221 = *(_QWORD *)(v221 + 8);
      v222 = v221 + 80;
      v223 = v353 + 32 * v23;
      if (*(_BYTE *)(v223 + 8))
        WebCore::RenderStyle::visitedDependentColorWithColorFilter(v222, 342, 0, (unint64_t *)&v364);
      else
        WebCore::RenderStyle::colorByApplyingColorFilter(v222, (const WebCore::Color *)(v223 + 16), (unint64_t *)&v364);
      v224 = *(_QWORD *)(v1[11] + 80);
      WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v224, (const WebCore::Color *)&v364);
      if (*(float *)(v224 + 188) != v220)
      {
        *(float *)(v224 + 188) = v220;
        *(_DWORD *)(v224 + 184) |= 8u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v224 + 88))(v224, v224 + 8);
      v225 = (float)(*((float *)v1 + 33) + *((float *)v1 + 11)) - v220;
      *(float *)&v362.origin.x = (float)(v182 + 1.0) + *((float *)v1 + 32);
      *((float *)&v362.origin.x + 1) = v225;
      *(float *)&v362.origin.y = v174 + v164;
      *((float *)&v362.origin.y + 1) = v220;
      a1 = (uint64_t)WebCore::GraphicsContext::drawLineForText(v224, (float *)&v362, *((unsigned __int8 *)v1 + 146), 0, 1);
      if ((*(_QWORD *)&v364.x & 0x8000000000000) != 0)
      {
        a1 = *(_QWORD *)&v364.x & 0xFFFFFFFFFFFFLL;
        do
        {
          v227 = __ldaxr((unsigned int *)a1);
          v228 = --v227 == 0;
        }
        while (__stlxr(v227, (unsigned int *)a1));
        goto LABEL_395;
      }
LABEL_369:
      v241 = *v184;
      v242 = (_DWORD *)*v1;
      if (*v1)
      {
        a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v242 + 80))(*v1);
        if ((a1 & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196488700);
        }
      }
      _CF = v241 > v242[19] + v242[18] || ++v23 >= v155;
      if (_CF)
        goto LABEL_411;
    }
    while (v23 < *(unsigned int *)(v154 + 60));
    __break(0xC471u);
    do
    {
LABEL_581:
      __break(1u);
LABEL_582:
      *(_QWORD *)(a1 + 496) = 0;
      *(_OWORD *)(a1 + 464) = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_OWORD *)(a1 + 432) = 0u;
      *(_OWORD *)(a1 + 448) = 0u;
      *(_OWORD *)(a1 + 400) = 0u;
      *(_OWORD *)(a1 + 416) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 384) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
LABEL_573:
      v24 = *(_QWORD *)(v23 + 3056);
      v1 = v355;
LABEL_43:
      v25 = *(_DWORD *)(v24 + 76);
      if (v25)
      {
        v26 = *(_QWORD *)(v24 + 64);
        v27 = v26 + 40 * v25;
        while (1)
        {
          if (*(_BYTE *)(v26 + 16))
          {
            v28 = *(_DWORD *)(v26 + 4);
            v29 = (_DWORD *)*v1;
            if (*v1)
            {
              a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v29 + 80))(*v1);
              if ((a1 & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19648877CLL);
              }
            }
            if (v28 > v29[18])
            {
              v30 = *(_DWORD *)v26;
              v23 = *v1;
              if (*v1)
              {
                a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23 + 80))(*v1);
                if ((a1 & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19648879CLL);
                }
              }
              if (v30 >= *(_DWORD *)(v23 + 76) + *(_DWORD *)(v23 + 72))
                goto LABEL_106;
              v32 = *(_DWORD *)v26;
              v31 = *(_DWORD *)(v26 + 4);
              LODWORD(v362.origin.x) = *(_DWORD *)v26;
              v34 = *((_DWORD *)v1 + 24);
              v33 = *((_DWORD *)v1 + 25);
              v35 = v33 + v34;
              LODWORD(v360[0]) = v33 + v34;
              if (__CFADD__(v33, v34))
                goto LABEL_581;
              v36 = v35 >= v32 ? &v362 : (CGRect *)v360;
              v37 = v34 <= v32 ? v36 : (CGRect *)(v1 + 12);
              v38 = LODWORD(v37->origin.x) - v34;
              v39 = *((unsigned __int8 *)v1 + 116);
              if (*((_BYTE *)v1 + 116) && (v45 = *((_DWORD *)v1 + 28)) != 0)
              {
                if (v45 < v38)
                  v38 = *((_DWORD *)v1 + 28);
              }
              else if (v38 == v33)
              {
                v38 = *((_DWORD *)v1 + 26) + v33;
              }
              LODWORD(v362.origin.x) = v31;
              LODWORD(v360[0]) = v33 + v34;
              v40 = v35 >= v31 ? &v362 : (CGRect *)v360;
              v41 = v34 <= v31 ? v40 : (CGRect *)(v1 + 12);
              v42 = LODWORD(v41->origin.x) - v34;
              if (v39 && (v46 = *((_DWORD *)v1 + 28)) != 0)
              {
                if (v46 < v42)
                  v42 = *((_DWORD *)v1 + 28);
              }
              else if (v42 == v33)
              {
                v42 = *((_DWORD *)v1 + 26) + v33;
              }
              if (!*(_BYTE *)(v26 + 16))
                goto LABEL_581;
              a1 = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintBackground((uint64_t)v1, v38, v42, (uint64_t *)(v26 + 8), 1);
              v43 = *(_DWORD *)(v26 + 4);
              v44 = (_DWORD *)*v1;
              if (*v1)
              {
                a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44 + 80))(*v1);
                if ((a1 & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964887BCLL);
                }
              }
              if (v43 > v44[19] + v44[18])
                goto LABEL_106;
            }
          }
          v26 += 40;
          if (v26 == v27)
            goto LABEL_106;
        }
      }
      v48 = *(_DWORD *)(v24 + 40);
      v47 = *(_DWORD *)(v24 + 44);
      LODWORD(v362.origin.x) = v48;
      v50 = *((_DWORD *)v1 + 24);
      v49 = *((_DWORD *)v1 + 25);
      v51 = v49 + v50;
      LODWORD(v360[0]) = v49 + v50;
    }
    while (__CFADD__(v49, v50));
    v52 = (WTF **)&v362;
    if (v51 < v48)
      v52 = v360;
    if (v50 <= v48)
      v53 = v52;
    else
      v53 = (WTF **)(v1 + 12);
    v54 = *(_DWORD *)v53 - v50;
    v55 = *((unsigned __int8 *)v1 + 116);
    if (*((_BYTE *)v1 + 116) && (v337 = *((_DWORD *)v1 + 28)) != 0)
    {
      if (v337 < v54)
        v54 = *((_DWORD *)v1 + 28);
    }
    else if (v54 == v49)
    {
      v54 = *((_DWORD *)v1 + 26) + v49;
    }
    LODWORD(v362.origin.x) = v47;
    LODWORD(v360[0]) = v49 + v50;
    _CF = v51 >= v47;
    v56 = (WTF **)&v362;
    if (!_CF)
      v56 = v360;
    if (v50 <= v47)
      v57 = v56;
    else
      v57 = (WTF **)(v1 + 12);
    v58 = *(_DWORD *)v57 - v50;
    if (v55 && (v338 = *((_DWORD *)v1 + 28)) != 0)
    {
      if (v338 < v58)
        v58 = *((_DWORD *)v1 + 28);
    }
    else if (v58 == v49)
    {
      v58 = *((_DWORD *)v1 + 26) + v49;
    }
    v362.origin.x = 1.05531837e-226;
    WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintBackground((uint64_t)v1, v54, v58, (uint64_t *)&v362, 0);
    if ((*(_QWORD *)&v362.origin.x & 0x8000000000000) != 0)
    {
      v344 = (unsigned int *)(*(_QWORD *)&v362.origin.x & 0xFFFFFFFFFFFFLL);
      do
      {
        v345 = __ldaxr(v344);
        v346 = v345 - 1;
      }
      while (__stlxr(v346, v344));
      v1 = v355;
      if (!v346)
      {
        atomic_store(1u, v344);
        WTF::fastFree((WTF *)v344, v59);
      }
    }
LABEL_106:
    v362.origin.x = 0.0;
    v362.origin.y = 0.0;
    v60 = (const WebCore::TextBoxSelectableRange *)(v1 + 12);
    WebCore::MarkedText::collectForDocumentMarkers(v1[1], (uint64_t)(v1 + 12), 0, (uint64_t)v360);
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v362, (uint64_t)v360);
    v62 = v360[0];
    if (HIDWORD(v360[1]))
    {
      v325 = 40 * HIDWORD(v360[1]);
      v326 = (WTF::StringImpl **)((char *)v360[0] + 24);
      do
      {
        v327 = *v326;
        *v326 = 0;
        if (v327)
        {
          if (*(_DWORD *)v327 == 2)
            WTF::StringImpl::destroy(v327, v61);
          else
            *(_DWORD *)v327 -= 2;
        }
        v326 += 5;
        v325 -= 40;
      }
      while (v325);
      v62 = v360[0];
      v1 = v355;
      if (v360[0])
        goto LABEL_544;
    }
    else
    {
      if (!v360[0])
        goto LABEL_108;
LABEL_544:
      v360[0] = 0;
      LODWORD(v360[1]) = 0;
      WTF::fastFree(v62, v61);
    }
LABEL_108:
    WebCore::MarkedText::collectForHighlights((const WebCore::RenderText *)v1[1], v60, 0, (uint64_t)v360);
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v362, (uint64_t)v360);
    v64 = v360[0];
    if (HIDWORD(v360[1]))
    {
      v328 = 40 * HIDWORD(v360[1]);
      v329 = (WTF::StringImpl **)((char *)v360[0] + 24);
      do
      {
        v330 = *v329;
        *v329 = 0;
        if (v330)
        {
          if (*(_DWORD *)v330 == 2)
            WTF::StringImpl::destroy(v330, v63);
          else
            *(_DWORD *)v330 -= 2;
        }
        v329 += 5;
        v328 -= 40;
      }
      while (v328);
      v64 = v360[0];
      v1 = v355;
      if (v360[0])
        goto LABEL_546;
    }
    else
    {
      if (!v360[0])
        goto LABEL_110;
LABEL_546:
      v360[0] = 0;
      LODWORD(v360[1]) = 0;
      WTF::fastFree(v64, v63);
    }
LABEL_110:
    WebCore::StyledMarkedText::subdivideAndResolve((unsigned int *)v360, (unsigned int *)&v362, (WebCore::RenderText *)v1[1], *((unsigned __int8 *)v1 + 144), (WebCore::PaintInfo *)v1[11]);
    v66 = HIDWORD(v360[1]);
    if (HIDWORD(v360[1]) <= 1)
    {
      HIDWORD(v364.y) = HIDWORD(v360[1]);
      if (HIDWORD(v360[1]))
      {
        v67 = 224 * HIDWORD(v360[1]);
        v68 = WTF::fastMalloc((WTF *)(224 * HIDWORD(v360[1])));
        v69 = *(double *)&v68;
        LODWORD(v364.y) = v67 > 0xDF;
        *(_QWORD *)&v364.x = v68;
        v70 = v360[0];
        *(_DWORD *)v68 = 0;
        v71 = *(_OWORD *)((char *)v70 + 4);
        *(_DWORD *)(v68 + 20) = *((_DWORD *)v70 + 5);
        *(_OWORD *)(v68 + 4) = v71;
        v72 = (_DWORD *)*((_QWORD *)v70 + 3);
        if (v72)
          *v72 += 2;
        *(_QWORD *)(v68 + 24) = v72;
        *(_DWORD *)(v68 + 32) = *((_DWORD *)v70 + 8);
        WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v68 + 40), (const Style *)v70 + 40);
        v73 = *(_QWORD *)&v69 + 224 * v66;
        do
        {
LABEL_151:
          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintBackground((uint64_t)v1, *(_DWORD *)(*(_QWORD *)&v69 + 4), *(_DWORD *)(*(_QWORD *)&v69 + 8), (uint64_t *)(*(_QWORD *)&v69 + 40), 0);
          *(_QWORD *)&v69 += 224;
        }
        while (*(_QWORD *)&v69 != v73);
        v69 = v364.x;
        if (HIDWORD(v364.y))
        {
          v101 = 224 * HIDWORD(v364.y);
          v102 = (unsigned int **)(*(_QWORD *)&v364.x + 40);
          do
          {
            WebCore::StyledMarkedText::Style::~Style(v102);
            v103 = (WTF::StringImpl *)*(v102 - 2);
            *(v102 - 2) = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v65);
              else
                *(_DWORD *)v103 -= 2;
            }
            v102 += 28;
            v101 -= 224;
          }
          while (v101);
          v69 = v364.x;
        }
        goto LABEL_160;
      }
      goto LABEL_162;
    }
    v364.y = 0.0;
    if (HIDWORD(v360[1]) >= 0x124924A)
    {
LABEL_589:
      __break(0xC471u);
      JUMPOUT(0x196488450);
    }
    v74 = WTF::fastMalloc((WTF *)(224 * HIDWORD(v360[1])));
    LODWORD(v364.y) = (613566757 * (unint64_t)((7 * v66) & 0x7FFFFFF)) >> 32;
    *(_QWORD *)&v364.x = v74;
    v75 = v360[0];
    if (224 * v66 >= 0xE0)
    {
      v78 = *(double *)&v74;
      *(_DWORD *)v74 = 0;
      v84 = *(_OWORD *)((char *)v75 + 4);
      *(_DWORD *)(v74 + 20) = *((_DWORD *)v75 + 5);
      *(_OWORD *)(v74 + 4) = v84;
      v85 = (_DWORD *)*((_QWORD *)v75 + 3);
      if (v85)
        *v85 += 2;
      *(_QWORD *)(v74 + 24) = v85;
      *(_DWORD *)(v74 + 32) = *((_DWORD *)v75 + 8);
      v82 = (WebCore::StyledMarkedText::Style *)(v74 + 40);
      v83 = 1;
    }
    else
    {
      v76 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v364, 1uLL, (unint64_t)v360[0]);
      v75 = (WTF *)v76;
      v77 = HIDWORD(v364.y);
      v78 = v364.x;
      v79 = *(_QWORD *)&v364.x + 224 * HIDWORD(v364.y);
      *(_DWORD *)v79 = 0;
      v80 = *(_OWORD *)(v76 + 4);
      *(_DWORD *)(v79 + 20) = *(_DWORD *)(v76 + 20);
      *(_OWORD *)(v79 + 4) = v80;
      v81 = *(_DWORD **)(v76 + 24);
      if (v81)
        *v81 += 2;
      *(_QWORD *)(v79 + 24) = v81;
      *(_DWORD *)(v79 + 32) = *(_DWORD *)(v76 + 32);
      v82 = (WebCore::StyledMarkedText::Style *)(*(_QWORD *)&v78 + 224 * v77 + 40);
      v83 = v77 + 1;
    }
    WebCore::StyledMarkedText::Style::Style(v82, (const Style *)v75 + 40);
    HIDWORD(v364.y) = v83;
    if (HIDWORD(v360[1]) != 1)
    {
      v86 = 0;
      v87 = v360[0];
      v88 = 224 * HIDWORD(v360[1]) - 224;
      while (1)
      {
        if (!v83)
        {
          __break(0xC471u);
          JUMPOUT(0x19648888CLL);
        }
        v89 = *(_QWORD *)&v78 + 224 * v83;
        v65 = (WTF *)((char *)v87 + v86 + 264);
        v90 = *(_QWORD *)v65;
        if (*(_DWORD *)(v89 - 216) != *(_DWORD *)((char *)v87 + v86 + 228))
          break;
        v91 = *(_QWORD *)(v89 - 184);
        if ((v91 & 0x8000000000000) != 0)
        {
          if ((v90 & 0x8000000000000) == 0
            || *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v91) != HIBYTE(v90)
            || BYTE6(v91) != BYTE6(v90))
          {
            break;
          }
        }
        else if (v91 != v90 || (v90 & 0x8000000000000) != 0)
        {
          break;
        }
        *(_DWORD *)(v89 - 216) = *(_DWORD *)((char *)v87 + v86 + 232);
LABEL_148:
        v86 += 224;
        if (v88 == v86)
          goto LABEL_149;
      }
      if (v83 == LODWORD(v364.y))
      {
        v93 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v364, v83 + 1, (unint64_t)v87 + v86 + 224);
        v94 = HIDWORD(v364.y);
        v78 = v364.x;
        v95 = *(_QWORD *)&v364.x + 224 * HIDWORD(v364.y);
        *(_DWORD *)v95 = 0;
        v96 = *(_OWORD *)(v93 + 4);
        *(_DWORD *)(v95 + 20) = *(_DWORD *)(v93 + 20);
        *(_OWORD *)(v95 + 4) = v96;
        v97 = *(_DWORD **)(v93 + 24);
        if (v97)
          *v97 += 2;
        *(_QWORD *)(v95 + 24) = v97;
        *(_DWORD *)(v95 + 32) = *(_DWORD *)(v93 + 32);
        WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(*(_QWORD *)&v78 + 224 * v94 + 40), (const Style *)(v93 + 40));
        v83 = v94 + 1;
      }
      else
      {
        v98 = *(_QWORD *)&v78 + 224 * v83;
        *(_DWORD *)v98 = 0;
        v99 = *(_OWORD *)((char *)v87 + v86 + 228);
        *(_DWORD *)(v98 + 20) = *(_DWORD *)((char *)v87 + v86 + 244);
        *(_OWORD *)(v98 + 4) = v99;
        v100 = *(_DWORD **)((char *)v87 + v86 + 248);
        if (v100)
          *v100 += 2;
        *(_QWORD *)(v98 + 24) = v100;
        *(_DWORD *)(v98 + 32) = *(_DWORD *)((char *)v87 + v86 + 256);
        WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(*(_QWORD *)&v78 + 224 * v83++ + 40), (const Style *)v65);
      }
      HIDWORD(v364.y) = v83;
      goto LABEL_148;
    }
LABEL_149:
    v69 = v364.x;
    if (v83)
    {
      v73 = *(_QWORD *)&v364.x + 224 * v83;
      goto LABEL_151;
    }
LABEL_160:
    if (v69 != 0.0)
      WTF::fastFree(*(WTF **)&v69, v65);
LABEL_162:
    v104 = v360[0];
    if (HIDWORD(v360[1]))
    {
      v105 = 224 * HIDWORD(v360[1]);
      v106 = (unsigned int **)((char *)v360[0] + 40);
      do
      {
        WebCore::StyledMarkedText::Style::~Style(v106);
        v107 = (WTF::StringImpl *)*(v106 - 2);
        *(v106 - 2) = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v65);
          else
            *(_DWORD *)v107 -= 2;
        }
        v106 += 28;
        v105 -= 224;
      }
      while (v105);
      v104 = v360[0];
    }
    if (v104)
      WTF::fastFree(v104, v65);
    v108 = v362.origin.x;
    if (!HIDWORD(v362.origin.y))
    {
      if (!*(_QWORD *)&v362.origin.x)
        continue;
LABEL_555:
      v362.origin.x = 0.0;
      LODWORD(v362.origin.y) = 0;
      WTF::fastFree(*(WTF **)&v108, v65);
      continue;
    }
    v331 = 40 * HIDWORD(v362.origin.y);
    v332 = (WTF::StringImpl **)(*(_QWORD *)&v362.origin.x + 24);
    do
    {
      v333 = *v332;
      *v332 = 0;
      if (v333)
      {
        if (*(_DWORD *)v333 == 2)
          WTF::StringImpl::destroy(v333, v65);
        else
          *(_DWORD *)v333 -= 2;
      }
      v332 += 5;
      v331 -= 40;
    }
    while (v331);
    v108 = v362.origin.x;
    v1 = v355;
    if (*(_QWORD *)&v362.origin.x)
      goto LABEL_555;
  }
LABEL_411:
  v254 = (const WebCore::RenderObject *)v1[1];
  v255 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v254 + 3) + 8)
                                                                                       + 40)
                                                                           + 8)
                                                               + 528)
                                                   + 8)
                                       + 24)
                           + 8);
  v256 = *((float *)v1 + 32);
  v257 = *((float *)v1 + 33);
  v258 = floorf(v256 * 64.0);
  if (v258 > -2147500000.0)
    v259 = (int)v258;
  else
    v259 = 0x80000000;
  if (v258 < 2147500000.0)
    v260 = v259;
  else
    v260 = 0x7FFFFFFFLL;
  v261 = floorf(v257 * 64.0);
  if (v261 > -2147500000.0)
    v262 = (int)v261;
  else
    v262 = 0x80000000;
  if (v261 < 2147500000.0)
    v263 = v262;
  else
    v263 = 0x7FFFFFFFLL;
  v264 = v257 + *((float *)v1 + 35);
  v265 = ceilf((float)(v256 + *((float *)v1 + 34)) * 64.0);
  if (v265 > -2147500000.0)
    v266 = (int)v265;
  else
    v266 = 0x80000000;
  if (v265 < 2147500000.0)
    v267 = v266;
  else
    v267 = 0x7FFFFFFF;
  v268 = ceilf(v264 * 64.0);
  if (v268 > -2147500000.0)
    v269 = (int)v268;
  else
    v269 = 0x80000000;
  if (v268 >= 2147500000.0)
    v269 = 0x7FFFFFFF;
  _VF = __OFSUB__(v267, (_DWORD)v260);
  v270 = v267 - v260;
  LODWORD(v271) = (v267 >> 31) + 0x7FFFFFFF;
  if (_VF)
    v271 = v271;
  else
    v271 = v270;
  LODWORD(v272) = (v269 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v269, (_DWORD)v263))
    v272 = v272;
  else
    v272 = v269 - v263;
  *(_QWORD *)&v362.origin.x = v260 | (v263 << 32);
  *(_QWORD *)&v362.origin.y = v271 | (v272 << 32);
  WebCore::Page::addRelevantRepaintedObject(v255, v254, (const WebCore::LayoutRect *)&v362);
LABEL_441:
  if (v348)
  {
    v273 = *(_QWORD *)(v1[11] + 80);
    v274 = *((float *)v1 + 32);
    v275 = *((float *)v1 + 33) + *((float *)v1 + 35);
    v362.origin = (CGPoint)xmmword_1969F8300;
    v362.size = (CGSize)xmmword_1968A14B0;
    *(double *)&v363 = (float)(v274 - v275);
    *((double *)&v363 + 1) = (float)(v274 + v275);
    (*(void (**)(uint64_t, CGRect *))(*(_QWORD *)v273 + 656))(v273, &v362);
  }
}

void sub_1964888CC()
{
  objc_end_catch();
  JUMPOUT(0x1964888D4);
}

WTF::StringImpl *WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintForegroundAndDecorations(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  const WebCore::TextBoxSelectableRange *v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  WebCore::RenderElement *v19;
  _QWORD *v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  char *LineStyle;
  int v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  WTF **v34;
  WTF **v35;
  unsigned int v36;
  BOOL v37;
  WTF **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::RenderElement *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  WTF **v60;
  WTF **v61;
  unsigned int v62;
  WTF **v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *result;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  unsigned int v77;
  WTF *v78;
  int v79;
  WTF *v80;
  WTF::StringImpl *v81;
  WTF *v82;
  WTF *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unsigned int **v93;
  WTF::StringImpl *v94;
  WTF *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  _DWORD *v105;
  float v106;
  WTF *v107;
  WTF *v108;
  unsigned int v109;
  uint64_t v110;
  double v111;
  int v112;
  float v113;
  double v114;
  int v115;
  double v116;
  int v117;
  float v118;
  double v119;
  int v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  WTF::StringImpl *v127;
  float v128;
  float v129;
  int v130;
  float v131;
  float v132;
  uint64_t v133;
  double v134;
  int v135;
  float v136;
  float v137;
  float v138;
  double v139;
  int v140;
  double v141;
  int v142;
  double v143;
  int v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  float v156;
  float v157;
  int v158;
  float v159;
  float v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  __n128 v163;
  float v164;
  char v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  BOOL v174;
  uint64_t v175;
  float v176;
  float v177;
  WTF::StringImpl *v178;
  int i;
  int v180;
  uint64_t v181;
  WebCore::RenderElement *v182;
  char *v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  WTF *v188;
  char *v189;
  int v190;
  char *v191;
  WTF *v192;
  double *v193;
  char *v194;
  char v195;
  _QWORD *v196;
  char *v197;
  char v198;
  _QWORD *v199;
  char *v200;
  uint64_t v201;
  WTF *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  WebCore *v206;
  unsigned int v207;
  char v208;
  uint64_t v209;
  float v210;
  float v211;
  uint64_t v212;
  uint64_t v213;
  float *v214;
  int v215;
  const WebCore::RenderStyle *v216;
  float v217;
  WebCore *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float *v222;
  int v223;
  float v224;
  void *v225;
  int v226;
  double v227;
  int v228;
  double v229;
  int v230;
  uint64_t v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  double v237;
  double v238;
  double v239;
  double v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  float v244;
  float v245;
  uint64_t v246;
  const WebCore::RenderStyle *v247;
  float v248;
  float v249;
  uint64_t v250;
  uint64_t v251;
  float v252;
  unsigned int v253;
  float v254;
  float v255;
  WTF *v256;
  void *v257;
  int *v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  WTF *v264;
  void *v265;
  WTF *v266;
  void *v267;
  WTF *v268;
  void *v269;
  char v270;
  int v271;
  int v272;
  uint64_t v273;
  float v274;
  float v275;
  WTF *v276;
  WTF *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int v290;
  WTF::StringImpl *v291;
  uint64_t v292;
  WebCore::RenderElement *v293;
  char *v294;
  uint64_t v295;
  float v296;
  float v297;
  uint64_t v298;
  float v299;
  uint64_t v300;
  uint64_t v301;
  float *v302;
  int v303;
  float v304;
  const WebCore::RenderStyle *v305;
  float v306;
  void *v307;
  float *v308;
  float v309;
  int v310;
  uint64_t v311;
  float v312;
  float v313;
  WTF *v314;
  void *v315;
  WTF *v316;
  void *v317;
  WTF *v318;
  void *v319;
  int v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  unsigned int v327;
  float v328;
  int v329;
  int v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  unsigned int v337;
  float v338;
  int v339;
  unsigned int *v340;
  unsigned int v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int *v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int *v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int *v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  unsigned int **v360;
  WTF::StringImpl *v361;
  WTF *v362;
  uint64_t v363;
  unsigned int **v364;
  WTF::StringImpl *v365;
  uint64_t v366;
  WTF::StringImpl **v367;
  WTF::StringImpl *v368;
  uint64_t v369;
  WTF::StringImpl **v370;
  WTF::StringImpl *v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t v374;
  WTF::StringImpl **v375;
  WTF::StringImpl *v376;
  uint64_t v377;
  WTF::StringImpl **v378;
  WTF::StringImpl *v379;
  int v380;
  char *v381;
  __int128 v382;
  WTF *v383;
  unsigned int v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  WTF::StringImpl *v391;
  WTF *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  WTF::StringImpl **v397;
  WTF::StringImpl *v398;
  WTF *v399;
  uint64_t v400;
  WebCore::TextRun *v401;
  WTF *v402;
  uint64_t v403;
  unint64_t v405;
  char v406;
  BOOL v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  WTF *v411;
  float v412;
  int v413;
  WTF *v414;
  unsigned int v415;
  __int128 v416;
  WTF *v417;
  unsigned int v418;
  WTF *v419;
  uint64_t v420;
  unsigned int *v421[23];
  WTF *v422[4];
  double v423;
  double v424;
  uint64_t v425;
  char v426;
  uint64_t v427;
  char v428;
  char v429;
  WTF *v430;
  WTF *v431;
  uint64_t v432;
  _QWORD v433[2];
  int v434;
  WTF *v435;
  WTF::StringImpl *v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  _QWORD v440[2];
  int v441;
  unsigned int v442[4];
  int v443;
  WTF *v444;
  _QWORD v445[3];

  v1 = (_QWORD *)a1;
  if (*(_BYTE *)(a1 + 147))
    LODWORD(v2) = *(_BYTE *)(a1 + 149) == 0;
  else
    LODWORD(v2) = 0;
  v3 = *(_QWORD **)(a1 + 16);
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 40) & 0x78000;
  v5 = v3[308];
  if (!v5 || (v388 = *(_QWORD *)(v5 + 8)) == 0 || !*(_DWORD *)(v388 - 12))
  {
    v6 = v3[309];
    if (!v6 || (v389 = *(_QWORD *)(v6 + 8)) == 0 || !*(_DWORD *)(v389 - 12))
    {
      v7 = v3[310];
      if (!v7)
      {
LABEL_7:
        v8 = 0;
        goto LABEL_8;
      }
      v390 = *(_QWORD *)(v7 + 8);
      if (!v390)
      {
        v8 = 0;
        goto LABEL_677;
      }
      v1 = (_QWORD *)a1;
      if (!*(_DWORD *)(v390 - 12))
        goto LABEL_7;
    }
  }
  WebCore::MarkedText::collectForHighlights((const WebCore::RenderText *)v1[1], (const WebCore::TextBoxSelectableRange *)(v1 + 12), 2, (uint64_t)v422);
  v8 = HIDWORD(v422[1]) != 0;
  v392 = v422[0];
  if (HIDWORD(v422[1]))
  {
    v396 = 40 * HIDWORD(v422[1]);
    v397 = (WTF::StringImpl **)((char *)v422[0] + 24);
    do
    {
      v398 = *v397;
      *v397 = 0;
      if (v398)
      {
        if (*(_DWORD *)v398 == 2)
          WTF::StringImpl::destroy(v398, v391);
        else
          *(_DWORD *)v398 -= 2;
      }
      v397 += 5;
      v396 -= 40;
    }
    while (v396);
    v392 = v422[0];
    if (!v422[0])
      goto LABEL_677;
    goto LABEL_675;
  }
  if (v422[0])
  {
LABEL_675:
    v422[0] = 0;
    LODWORD(v422[1]) = 0;
    WTF::fastFree(v392, v391);
  }
LABEL_677:
  v1 = (_QWORD *)a1;
LABEL_8:
  v9 = 0;
  v10 = ((*((unsigned __int8 *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v1[1]) + 123) ^ *(unsigned __int16 *)(*v1 + 52)) >> 2) & 1;
  v11 = (const WebCore::TextBoxSelectableRange *)(v1 + 12);
  if (*((_BYTE *)v1 + 116))
    v12 = v10;
  else
    v12 = 0;
  if (!v4 && !v8)
  {
    WebCore::MarkedText::collectForDocumentMarkers(v1[1], (uint64_t)(v1 + 12), 2, (uint64_t)v422);
    v14 = HIDWORD(v422[1]);
    v15 = v422[0];
    if (HIDWORD(v422[1]))
    {
      v16 = 0;
      while (*((_BYTE *)v422[0] + v16 + 12) != 4)
      {
        v16 += 40;
        if (40 * HIDWORD(v422[1]) == v16)
          goto LABEL_17;
      }
      v19 = WebCore::RenderText::spellingErrorPseudoStyle((WebCore::RenderText *)v1[1]);
      if (v19)
      {
LABEL_26:
        v4 = (*((_DWORD *)v19 + 10) & 0x78000) != 0;
        goto LABEL_28;
      }
      v14 = HIDWORD(v422[1]);
      v15 = v422[0];
      if (!HIDWORD(v422[1]))
        goto LABEL_23;
LABEL_17:
      v17 = (unsigned __int8 *)v15 + 12;
      while (1)
      {
        v18 = *v17;
        v17 += 40;
        if (v18 == 1)
          break;
        if (!--v14)
          goto LABEL_27;
      }
      v19 = WebCore::RenderText::grammarErrorPseudoStyle((WebCore::RenderText *)v1[1]);
      if (v19)
        goto LABEL_26;
LABEL_27:
      v4 = 0;
LABEL_28:
      v15 = v422[0];
      if (HIDWORD(v422[1]))
      {
        v369 = 40 * HIDWORD(v422[1]);
        v370 = (WTF::StringImpl **)((char *)v422[0] + 24);
        do
        {
          v371 = *v370;
          *v370 = 0;
          if (v371)
          {
            if (*(_DWORD *)v371 == 2)
              WTF::StringImpl::destroy(v371, v13);
            else
              *(_DWORD *)v371 -= 2;
          }
          v370 += 5;
          v369 -= 40;
        }
        while (v369);
        v15 = v422[0];
        v1 = (_QWORD *)a1;
        if (!v422[0])
        {
LABEL_30:
          if (((v2 | v4) & 1) != 0)
          {
            v9 = v4 ^ 1;
            goto LABEL_38;
          }
          v20 = (_QWORD *)v1[2];
          v21 = (int *)v20[187];
          if (v21)
          {
            v22 = *v21;
            v23 = *v21 + 1;
            *v21 = v23;
            v24 = *((_QWORD *)v21 + 1);
            if (v24 && *(_DWORD *)(v24 - 12))
            {
              if (v23)
              {
                *v21 = v22;
LABEL_37:
                v9 = 1;
                goto LABEL_38;
              }
LABEL_647:
              __break(0xC471u);
              JUMPOUT(0x19648AEC8);
            }
            if (!v23)
              goto LABEL_647;
            *v21 = v22;
          }
          v50 = v20[308];
          if (!v50 || (v393 = *(_QWORD *)(v50 + 8)) == 0 || !*(_DWORD *)(v393 - 12))
          {
            v51 = v20[309];
            if (!v51 || (v394 = *(_QWORD *)(v51 + 8)) == 0 || !*(_DWORD *)(v394 - 12))
            {
              v52 = v20[310];
              if (!v52 || (v395 = *(_QWORD *)(v52 + 8)) == 0 || !*(_DWORD *)(v395 - 12))
              {
                v53 = *(_QWORD *)(v1[1] + 32);
                if (*((_BYTE *)v1 + 144))
                {
                  if (v53)
                    v54 = *(WebCore::RenderElement **)(v53 + 8);
                  else
                    v54 = 0;
                  LineStyle = WebCore::RenderElement::firstLineStyle(v54, v13);
                }
                else
                {
                  if (v53)
                    v53 = *(_QWORD *)(v53 + 8);
                  LineStyle = (char *)(v53 + 80);
                }
                v2 = *v1;
                if ((v12 & 1) != 0)
                {
                  if (v2 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*v1) & 1) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19648AC50);
                  }
                  if (*((_BYTE *)v1 + 116))
                  {
                    v4 = *(_DWORD *)(v2 + 76);
                    LODWORD(v2) = *((_DWORD *)v1 + 28);
                    v11 = (const WebCore::TextBoxSelectableRange *)*v1;
                    if (!*v1)
                    {
LABEL_96:
                      v4 -= v2;
                      v55 = *((_DWORD *)v11 + 19);
LABEL_116:
                      LODWORD(v435) = 0;
                      HIDWORD(v435) = v4;
                      LODWORD(v436) = v55;
                      BYTE4(v436) = 0;
                      v438 = 0;
                      v437 = 0;
                      v439 = 0;
                      WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)v421, (const WebCore::RenderText *)v1[1], (const WebCore::RenderStyle *)LineStyle, *((unsigned __int8 *)v1 + 144), (const WebCore::PaintInfo *)v1[11]);
                      WebCore::StyledMarkedText::StyledMarkedText((WebCore::StyledMarkedText *)v422, (const WebCore::MarkedText *)&v435, (uint64_t *)v421);
                      WebCore::StyledMarkedText::Style::~Style(v421);
                      WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintCompositionForeground(v1, (char *)v422);
                      WebCore::StyledMarkedText::Style::~Style((unsigned int **)&v424);
                      result = v422[3];
                      v422[3] = 0;
                      if (result)
                      {
                        if (*(_DWORD *)result == 2)
                          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v64);
                        else
                          *(_DWORD *)result -= 2;
                      }
                      return result;
                    }
LABEL_602:
                    if (((*(uint64_t (**)(const WebCore::TextBoxSelectableRange *))(*(_QWORD *)v11 + 80))(v11) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19648ACB8);
                    }
                    goto LABEL_96;
                  }
                }
                else if (!v2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*v1) & 1) != 0)
                {
                  v56 = *(_DWORD *)(v2 + 72);
                  LODWORD(v422[0]) = v56;
                  v58 = *((_DWORD *)v1 + 24);
                  v57 = *((_DWORD *)v1 + 25);
                  v59 = v57 + v58;
                  LODWORD(v435) = v57 + v58;
                  if (!__CFADD__(v57, v58))
                  {
                    v60 = v422;
                    if (v59 < v56)
                      v60 = &v435;
                    v61 = v58 <= v56 ? v60 : (WTF **)v11;
                    v4 = *(_DWORD *)v61 - v58;
                    if (*((_BYTE *)v1 + 116) && (v384 = *((_DWORD *)v1 + 28)) != 0)
                    {
                      if (v384 < v4)
                        v4 = *((_DWORD *)v1 + 28);
                    }
                    else if (v4 == v57)
                    {
                      v4 = *((_DWORD *)v1 + 26) + v57;
                    }
                    v2 = *v1;
                    if (*v1)
                    {
                      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v2 + 80))(*v1))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19648B018);
                      }
                      v58 = *((_DWORD *)v1 + 24);
                      v57 = *((_DWORD *)v1 + 25);
                      v59 = v57 + v58;
                    }
                    v62 = *(_DWORD *)(v2 + 76) + *(_DWORD *)(v2 + 72);
                    LODWORD(v422[0]) = v62;
                    LODWORD(v435) = v59;
                    if (v59 >= v58)
                    {
                      v37 = v59 >= v62;
                      v63 = v422;
                      if (!v37)
                        v63 = &v435;
                      if (v58 > v62)
                        v63 = (WTF **)v11;
                      v55 = *(_DWORD *)v63 - v58;
                      if (*((_BYTE *)v1 + 116) && (v385 = *((_DWORD *)v1 + 28)) != 0)
                      {
                        if (v385 < v55)
                          v55 = *((_DWORD *)v1 + 28);
                      }
                      else if (v55 == v57)
                      {
                        v55 = *((_DWORD *)v1 + 26) + v57;
                      }
                      goto LABEL_116;
                    }
                  }
                }
                else
                {
                  __break(0xC471u);
                }
                goto LABEL_601;
              }
            }
          }
          goto LABEL_37;
        }
      }
      else if (!v422[0])
      {
        goto LABEL_30;
      }
    }
    else
    {
LABEL_23:
      v4 = 0;
      if (!v15)
        goto LABEL_30;
    }
    v422[0] = 0;
    LODWORD(v422[1]) = 0;
    WTF::fastFree(v15, v13);
    goto LABEL_30;
  }
LABEL_38:
  v419 = 0;
  v420 = 0;
  if (*(_WORD *)(v1[11] + 16) == 128)
    goto LABEL_134;
  LineStyle = (char *)*v1;
  if ((v12 & 1) != 0)
  {
    if (LineStyle && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)LineStyle + 80))(*v1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648AAECLL);
    }
    if (*((_BYTE *)v1 + 116))
    {
      v26 = *((_DWORD *)LineStyle + 19);
      v27 = *((_DWORD *)v1 + 28);
      v28 = (_DWORD *)*v1;
      if (*v1 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 80))(*v1) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19648AB54);
      }
      v4 = v26 - v27;
      v29 = v28[19];
      goto LABEL_63;
    }
    goto LABEL_601;
  }
  if (LineStyle && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)LineStyle + 80))(*v1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648AB20);
  }
  v30 = *((_DWORD *)LineStyle + 18);
  LODWORD(v422[0]) = v30;
  v32 = *((_DWORD *)v1 + 24);
  v31 = *((_DWORD *)v1 + 25);
  v33 = v31 + v32;
  LODWORD(v435) = v31 + v32;
  if (__CFADD__(v31, v32))
    goto LABEL_601;
  v34 = v422;
  if (v33 < v30)
    v34 = &v435;
  v35 = v32 <= v30 ? v34 : (WTF **)v11;
  v4 = *(_DWORD *)v35 - v32;
  if (*((_BYTE *)v1 + 116) && (v372 = *((_DWORD *)v1 + 28)) != 0)
  {
    if (v372 < v4)
      v4 = *((_DWORD *)v1 + 28);
  }
  else if (v4 == v31)
  {
    v4 = *((_DWORD *)v1 + 26) + v31;
  }
  LineStyle = (char *)*v1;
  if (*v1)
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)LineStyle + 80))(*v1))
    {
      __break(0xC471u);
      JUMPOUT(0x19648AFD0);
    }
    v32 = *((_DWORD *)v1 + 24);
    v31 = *((_DWORD *)v1 + 25);
    v33 = v31 + v32;
  }
  v36 = *((_DWORD *)LineStyle + 19) + *((_DWORD *)LineStyle + 18);
  LODWORD(v422[0]) = v36;
  LODWORD(v435) = v33;
  if (v33 < v32)
  {
LABEL_601:
    __break(1u);
    goto LABEL_602;
  }
  v37 = v33 >= v36;
  v38 = v422;
  if (!v37)
    v38 = &v435;
  if (v32 > v36)
    v38 = (WTF **)v11;
  v29 = *(_DWORD *)v38 - v32;
  if (*((_BYTE *)v1 + 116) && (v373 = *((_DWORD *)v1 + 28)) != 0)
  {
    if (v373 < v29)
      v29 = *((_DWORD *)v1 + 28);
  }
  else if (v29 == v31)
  {
    v29 = *((_DWORD *)v1 + 26) + v31;
  }
LABEL_63:
  LODWORD(v422[0]) = 0;
  HIDWORD(v422[0]) = v4;
  LODWORD(v422[1]) = v29;
  BYTE4(v422[1]) = 0;
  v422[2] = 0;
  v422[3] = 0;
  LODWORD(v423) = 0;
  WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>((uint64_t)&v419, (unint64_t)v422);
  v40 = v422[3];
  v422[3] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (!*((_BYTE *)v1 + 146))
  {
    WebCore::MarkedText::collectForDocumentMarkers(v1[1], (uint64_t)v11, 1, (uint64_t)v422);
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v419, (uint64_t)v422);
    v42 = v422[0];
    if (HIDWORD(v422[1]))
    {
      v374 = 40 * HIDWORD(v422[1]);
      v375 = (WTF::StringImpl **)((char *)v422[0] + 24);
      do
      {
        v376 = *v375;
        *v375 = 0;
        if (v376)
        {
          if (*(_DWORD *)v376 == 2)
            WTF::StringImpl::destroy(v376, v41);
          else
            *(_DWORD *)v376 -= 2;
        }
        v375 += 5;
        v374 -= 40;
      }
      while (v374);
      v42 = v422[0];
      if (!v422[0])
      {
LABEL_69:
        WebCore::MarkedText::collectForHighlights((const WebCore::RenderText *)v1[1], v11, 1, (uint64_t)v422);
        WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v419, (uint64_t)v422);
        v44 = v422[0];
        if (HIDWORD(v422[1]))
        {
          v377 = 40 * HIDWORD(v422[1]);
          v378 = (WTF::StringImpl **)((char *)v422[0] + 24);
          do
          {
            v379 = *v378;
            *v378 = 0;
            if (v379)
            {
              if (*(_DWORD *)v379 == 2)
                WTF::StringImpl::destroy(v379, v43);
              else
                *(_DWORD *)v379 -= 2;
            }
            v378 += 5;
            v377 -= 40;
          }
          while (v377);
          v44 = v422[0];
          if (!v422[0])
            goto LABEL_71;
        }
        else if (!v422[0])
        {
LABEL_71:
          if ((*(_BYTE *)(v1[11] + 21) & 1) == 0)
          {
            WebCore::MarkedText::collectForDraggedAndTransparentContent(0x4000, v1[1], (unsigned int *)v11, (uint64_t)v422);
            v46 = HIDWORD(v422[1]);
            if (HIDWORD(v422[1]))
            {
              WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v419, (uint64_t)v422);
              v47 = 0;
              v48 = v422[0];
              do
              {
                v49 = *(WTF::StringImpl **)((char *)v48 + v47 + 24);
                *(_QWORD *)((char *)v48 + v47 + 24) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, v45);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v47 += 40;
              }
              while (40 * v46 != v47);
              LODWORD(v2) = 0;
            }
            else
            {
              v48 = v422[0];
            }
            if (v48)
              WTF::fastFree(v48, v45);
          }
          WebCore::MarkedText::collectForDraggedAndTransparentContent(0x20000, v1[1], (unsigned int *)v11, (uint64_t)v422);
          v67 = HIDWORD(v422[1]);
          if (HIDWORD(v422[1]))
          {
            WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v419, (uint64_t)v422);
            v68 = 0;
            v69 = v422[0];
            v70 = 40 * v67;
            do
            {
              v71 = *(WTF::StringImpl **)((char *)v69 + v68 + 24);
              *(_QWORD *)((char *)v69 + v68 + 24) = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v66);
                else
                  *(_DWORD *)v71 -= 2;
              }
              v68 += 40;
            }
            while (v70 != v68);
          }
          else
          {
            v69 = v422[0];
          }
          if (v69)
            WTF::fastFree(v69, v66);
          goto LABEL_134;
        }
        v422[0] = 0;
        LODWORD(v422[1]) = 0;
        WTF::fastFree(v44, v43);
        goto LABEL_71;
      }
    }
    else if (!v422[0])
    {
      goto LABEL_69;
    }
    v422[0] = 0;
    LODWORD(v422[1]) = 0;
    WTF::fastFree(v42, v41);
    goto LABEL_69;
  }
LABEL_134:
  if ((_DWORD)v2)
  {
    v72 = (WTF *)WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1[1] + 24)+ 8)+ 40)+ 8)+ 1944)+ 288), (const WebCore::RenderText *)v1[1], v11);
    if (v72 >= HIDWORD(v72))
    {
      v423 = 0.0;
      memset(v422, 0, sizeof(v422));
    }
    else
    {
      LODWORD(v422[0]) = 0;
      *(WTF **)((char *)v422 + 4) = v72;
      BYTE4(v422[1]) = 11;
      v422[2] = 0;
      v422[3] = 0;
      LODWORD(v423) = 0;
      if (HIDWORD(v420) == (_DWORD)v420)
      {
        WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>((uint64_t)&v419, (unint64_t)v422);
      }
      else
      {
        v380 = HIDWORD(v420) + 1;
        v381 = (char *)v419 + 40 * HIDWORD(v420);
        *(_DWORD *)v381 = 0;
        v382 = *(_OWORD *)((char *)v422 + 4);
        *((_DWORD *)v381 + 5) = HIDWORD(v422[2]);
        *(_OWORD *)(v381 + 4) = v382;
        v383 = v422[3];
        v422[3] = 0;
        *((_QWORD *)v381 + 3) = v383;
        *((_DWORD *)v381 + 8) = LODWORD(v423);
        HIDWORD(v420) = v380;
      }
    }
    v74 = v422[3];
    v422[3] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  WebCore::StyledMarkedText::subdivideAndResolve((unsigned int *)&v417, (unsigned int *)&v419, (WebCore::RenderText *)v1[1], *((unsigned __int8 *)v1 + 144), (WebCore::PaintInfo *)v1[11]);
  if (!*((_BYTE *)v1 + 146) && (*(_BYTE *)(v1[11] + 21) & 1) != 0)
  {
    v76 = v417;
    v77 = v418;
    v78 = (WTF *)((char *)v417 + 224 * v418);
    if (v418)
    {
      v79 = 0;
      v80 = v417;
      v81 = (WTF *)((char *)v417 + 224 * v418);
      v82 = v81;
      do
      {
        if (*((_BYTE *)v76 + 12) == 11)
        {
          v83 = v76;
          if (v82 != (WTF *)((char *)v417 + 224 * v418))
          {
            if (v76 == v81)
            {
              v83 = v82;
            }
            else
            {
              WTF::VectorMover<false,WebCore::StyledMarkedText>::moveOverlapping(v81, v76, (unint64_t)v82);
              v83 = (WTF *)((char *)v82 + v80 - v81);
            }
          }
          WebCore::StyledMarkedText::Style::~Style((unsigned int **)v76 + 5);
          v85 = (WTF::StringImpl *)*((_QWORD *)v76 + 3);
          *((_QWORD *)v76 + 3) = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v84);
            else
              *(_DWORD *)v85 -= 2;
          }
          v81 = (WTF *)((char *)v76 + 224);
          ++v79;
          v82 = v83;
        }
        else
        {
          v83 = v82;
        }
        v76 = (WTF *)((char *)v76 + 224);
        v80 = (WTF *)((char *)v80 + 224);
      }
      while (v76 < v78);
      v76 = v417;
      v86 = v418;
      v77 = v418;
      v78 = v83;
      v1 = (_QWORD *)a1;
    }
    else
    {
      v86 = 0;
      v79 = 0;
      v81 = v417;
    }
    v75 = (WTF *)((char *)v76 + 224 * v86);
    if (v81 != v75)
    {
      WTF::VectorMover<false,WebCore::StyledMarkedText>::moveOverlapping(v81, v75, (unint64_t)v78);
      v77 = v418;
    }
    v418 = v77 - v79;
  }
  if ((v9 & 1) != 0 || (v87 = v1[11], *(_WORD *)(v87 + 16) == 128))
  {
    WebCore::StyledMarkedText::coalesceAdjacentWithEqualForeground((uint64_t)v422, (uint64_t)&v417);
    v89 = v422[0];
    if (HIDWORD(v422[1]))
    {
      v90 = 224 * HIDWORD(v422[1]);
      v91 = v90;
      v92 = (char *)v422[0];
      do
      {
        WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintCompositionForeground(v1, v92);
        v92 += 224;
        v91 -= 224;
      }
      while (v91);
      v93 = (unsigned int **)((char *)v89 + 40);
      do
      {
        WebCore::StyledMarkedText::Style::~Style(v93);
        v94 = (WTF::StringImpl *)*(v93 - 2);
        *(v93 - 2) = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, v88);
          else
            *(_DWORD *)v94 -= 2;
        }
        v93 += 28;
        v90 -= 224;
      }
      while (v90);
      v95 = v422[0];
      if (!v422[0])
        goto LABEL_559;
      goto LABEL_558;
    }
    if (v422[0])
    {
      v95 = v422[0];
LABEL_558:
      WTF::fastFree(v95, v88);
      goto LABEL_559;
    }
    goto LABEL_559;
  }
  v96 = v1[7];
  if (v96)
    v97 = *(_DWORD *)(v96 + 4);
  else
    v97 = 0;
  if (*((_BYTE *)v1 + 116))
    v97 = *((_DWORD *)v1 + 28);
  v401 = (WebCore::TextRun *)(v1 + 6);
  if (*((_BYTE *)v1 + 147))
  {
    v98 = WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1[1] + 24) + 8)+ 40)+ 8)+ 1944)+ 288), (const WebCore::RenderText *)v1[1], v11);
    v99 = v98;
    v100 = HIDWORD(v98);
    v87 = v1[11];
  }
  else
  {
    v99 = 0;
    LODWORD(v100) = 0;
  }
  v416 = 0uLL;
  if ((*(_BYTE *)(v87 + 21) & 1) != 0 && v99 < v100 && v100 <= v97)
  {
    v416 = *((_OWORD *)v1 + 8);
    LODWORD(v422[0]) = 0;
    LODWORD(v435) = 0;
    if (*((_BYTE *)v1 + 145))
    {
      v101 = v1[1];
      if (*(_BYTE *)(v101 + 46) != 3)
      {
LABEL_658:
        __break(0xC471u);
        JUMPOUT(0x19648AFB0);
      }
      v102 = *(char **)(v101 + 120);
    }
    else
    {
      v103 = *(_QWORD *)(*v1 + 32);
      if ((*(_WORD *)(*v1 + 52) & 1) != 0)
      {
        v386 = *(_QWORD *)(v103 + 8);
        if ((*(_BYTE *)(v386 + 45) & 2) != 0)
        {
          v387 = *(_QWORD *)(v386 + 32);
          if (v387)
            v386 = *(_QWORD *)(v387 + 8);
          else
            v386 = 0;
        }
        v102 = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v386, v75);
        v1 = (_QWORD *)a1;
      }
      else
      {
        if (v103)
          v103 = *(_QWORD *)(v103 + 8);
        if ((*(_BYTE *)(v103 + 45) & 2) != 0)
        {
          v103 = *(_QWORD *)(v103 + 32);
          if (v103)
            v103 = *(_QWORD *)(v103 + 8);
        }
        v102 = (char *)(v103 + 80);
      }
    }
    WebCore::FontCascade::widthOfTextRange(*((_QWORD *)v102 + 4) + 32, (uint64_t)v401);
    if ((*(_WORD *)(*v1 + 52) & 0x800) != 0)
    {
      v105 = (_DWORD *)&v416 + 2;
      if ((*(_WORD *)(*v1 + 52) & 4) != 0)
        v106 = *(float *)&v435;
      else
        v106 = *(float *)v422;
      *(float *)&v416 = *(float *)&v416 + v106;
      *((float *)&v416 + 1) = *((float *)&v416 + 1) + 0.0;
    }
    else
    {
      *(float *)&v416 = *(float *)&v416 + 0.0;
      *((float *)&v416 + 1) = *(float *)v422 + *((float *)&v416 + 1);
      v105 = (_DWORD *)((unint64_t)&v416 | 0xC);
    }
    *v105 = v104;
  }
  WebCore::StyledMarkedText::coalesceAdjacentWithEqualDecorations((uint64_t)&v414, (uint64_t)&v417);
  v107 = v414;
  if (v415)
  {
    v108 = (WTF *)((char *)v414 + 224 * v415);
    v399 = v108;
    while (1)
    {
      v109 = *((_DWORD *)v107 + 1);
      v110 = *((unsigned int *)v107 + 2);
      if (v109 < v110)
        break;
LABEL_465:
      v107 = (WTF *)((char *)v107 + 224);
      if (v107 == v108)
      {
        v107 = v414;
        if (v415)
        {
          v359 = 224 * v415;
          v360 = (unsigned int **)((char *)v414 + 40);
          do
          {
            WebCore::StyledMarkedText::Style::~Style(v360);
            v361 = (WTF::StringImpl *)*(v360 - 2);
            *(v360 - 2) = 0;
            if (v361)
            {
              if (*(_DWORD *)v361 == 2)
                WTF::StringImpl::destroy(v361, v88);
              else
                *(_DWORD *)v361 -= 2;
            }
            v360 += 28;
            v359 -= 224;
          }
          while (v359);
          v107 = v414;
        }
        goto LABEL_556;
      }
    }
    v111 = *((float *)v1 + 32) * 64.0;
    if (v111 >= 2147483650.0)
    {
      v112 = 0x7FFFFFFF;
    }
    else if (v111 <= -2147483650.0)
    {
      v112 = 0x80000000;
    }
    else
    {
      v112 = (int)v111;
    }
    v113 = *((float *)v1 + 33);
    LODWORD(v422[0]) = v112;
    v114 = v113 * 64.0;
    if (v114 >= 2147483650.0)
    {
      v115 = 0x7FFFFFFF;
    }
    else if (v114 <= -2147483650.0)
    {
      v115 = 0x80000000;
    }
    else
    {
      v115 = (int)v114;
    }
    HIDWORD(v422[0]) = v115;
    v116 = *((float *)v1 + 34) * 64.0;
    if (v116 >= 2147483650.0)
    {
      v117 = 0x7FFFFFFF;
    }
    else if (v116 <= -2147483650.0)
    {
      v117 = 0x80000000;
    }
    else
    {
      v117 = (int)v116;
    }
    v118 = *((float *)v1 + 35);
    LODWORD(v422[1]) = v117;
    v119 = v118 * 64.0;
    if (v119 >= 2147483650.0)
    {
      v120 = 0x7FFFFFFF;
    }
    else if (v119 <= -2147483650.0)
    {
      v120 = 0x80000000;
    }
    else
    {
      v120 = (int)v119;
    }
    HIDWORD(v422[1]) = v120;
    v121 = *(_QWORD *)(v1[2] + 528);
    v122 = 1.0;
    if (v121)
    {
      v123 = *(_QWORD *)(v121 + 8);
      if (v123)
      {
        v124 = *(_QWORD *)(v123 + 24);
        if (v124)
        {
          v125 = *(_QWORD *)(v124 + 8);
          if (v125)
          {
            v126 = (*(_DWORD *)v125)++;
            v122 = *(float *)(v125 + 364);
            if (v126)
            {
              *(_DWORD *)v125 = v126;
            }
            else
            {
              WebCore::Page::~Page(v125);
              WTF::fastFree(v314, v315);
            }
          }
        }
      }
    }
    if ((*((_BYTE *)v1 + 85) & 2) != 0)
    {
      v320 = LODWORD(v422[0]) + LODWORD(v422[1]);
      if (__OFADD__(v422[0], v422[1]))
        v320 = (LODWORD(v422[0]) >> 31) + 0x7FFFFFFF;
      v321 = (double)v320 * 0.015625 + -0.000122070312;
      if (v321 < 0.0)
        v322 = round((v321 + (double)-v320) * v122) / v122 - (double)-v320;
      else
        v322 = round(v321 * v122) / v122;
      v323 = (double)SHIDWORD(v422[0]) * 0.015625;
      v324 = round((v323 + (double)-HIDWORD(v422[0])) * v122) / v122
           - (double)-HIDWORD(v422[0]);
      v325 = round(v323 * v122) / v122;
      if (v323 >= 0.0)
        v326 = v325;
      else
        v326 = v324;
      v435 = v422[1];
      v327 = LODWORD(v422[0]) + LODWORD(v422[1]);
      if (__OFADD__(v422[0], v422[1]))
        v327 = (LODWORD(v422[0]) >> 31) + 0x7FFFFFFF;
      v328 = v322;
      v132 = v326;
      v405 = ((unint64_t)HIDWORD(v422[0]) << 32) | v327;
      v129 = WebCore::snapSizeToDevicePixel((int *)&v435, (int *)&v405, v122);
      v130 = v329;
      v128 = v328 - v129;
    }
    else
    {
      v128 = WebCore::snapRectToDevicePixels((int *)v422, v122);
      v132 = v131;
    }
    v411 = (WTF *)__PAIR64__(LODWORD(v132), LODWORD(v128));
    v412 = v129;
    v413 = v130;
    if (v109 || (v133 = v1[7]) == 0 || (_DWORD)v110 != *(_DWORD *)(v133 + 4))
    {
      v134 = *((float *)v1 + 32) * 64.0;
      if (v134 >= 2147483650.0)
      {
        v135 = 0x7FFFFFFF;
      }
      else if (v134 <= -2147483650.0)
      {
        v135 = 0x80000000;
      }
      else
      {
        v135 = (int)v134;
      }
      v137 = *((float *)v1 + 33);
      v136 = *((float *)v1 + 34);
      v138 = *((float *)v1 + 35);
      LODWORD(v422[0]) = v135;
      v139 = v137 * 64.0;
      if (v139 >= 2147483650.0)
      {
        v140 = 0x7FFFFFFF;
      }
      else if (v139 <= -2147483650.0)
      {
        v140 = 0x80000000;
      }
      else
      {
        v140 = (int)v139;
      }
      HIDWORD(v422[0]) = v140;
      v141 = v136 * 64.0;
      if (v141 >= 2147483650.0)
      {
        v142 = 0x7FFFFFFF;
      }
      else if (v141 <= -2147483650.0)
      {
        v142 = 0x80000000;
      }
      else
      {
        v142 = (int)v141;
      }
      LODWORD(v422[1]) = v142;
      v143 = v138 * 64.0;
      if (v143 >= 2147483650.0)
      {
        v144 = 0x7FFFFFFF;
      }
      else if (v143 <= -2147483650.0)
      {
        v144 = 0x80000000;
      }
      else
      {
        v144 = (int)v143;
      }
      HIDWORD(v422[1]) = v144;
      if (*((_BYTE *)v1 + 145))
      {
        v145 = v1[1];
        if (*(_BYTE *)(v145 + 46) != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19648AD84);
        }
        v146 = *(char **)(v145 + 120);
      }
      else
      {
        v147 = *(_QWORD *)(*v1 + 32);
        if ((*(_WORD *)(*v1 + 52) & 1) != 0)
        {
          v348 = *(_QWORD *)(v147 + 8);
          if ((*(_BYTE *)(v348 + 45) & 2) != 0)
          {
            v349 = *(_QWORD *)(v348 + 32);
            if (v349)
              v348 = *(_QWORD *)(v349 + 8);
            else
              v348 = 0;
          }
          v146 = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v348, v127);
          v1 = (_QWORD *)a1;
        }
        else
        {
          if (v147)
            v147 = *(_QWORD *)(v147 + 8);
          if ((*(_BYTE *)(v147 + 45) & 2) != 0)
          {
            v147 = *(_QWORD *)(v147 + 32);
            if (v147)
              v147 = *(_QWORD *)(v147 + 8);
          }
          v146 = (char *)(v147 + 80);
        }
      }
      v148 = *((_QWORD *)v146 + 4) + 32;
      v149 = *(unsigned __int16 *)(v1[1] + 112);
      if (v149 <= 0x100)
        LOBYTE(v149) = 0;
      WebCore::FontCascade::adjustSelectionRectForText(v148, (void *)(v149 != 0), (uint64_t)v401, (WebCore::LayoutRect *)v422, v109, v110 | 0x100000000);
      v150 = *(_QWORD *)(v1[2] + 528);
      v151 = 1.0;
      if (v150)
      {
        v152 = *(_QWORD *)(v150 + 8);
        if (v152)
        {
          v153 = *(_QWORD *)(v152 + 24);
          if (v153)
          {
            v154 = *(_QWORD *)(v153 + 8);
            if (v154)
            {
              v155 = (*(_DWORD *)v154)++;
              v151 = *(float *)(v154 + 364);
              if (v155)
              {
                *(_DWORD *)v154 = v155;
              }
              else
              {
                WebCore::Page::~Page(v154);
                WTF::fastFree(v316, v317);
              }
            }
          }
        }
      }
      if ((*((_BYTE *)v1 + 85) & 2) != 0)
      {
        v330 = LODWORD(v422[0]) + LODWORD(v422[1]);
        if (__OFADD__(v422[0], v422[1]))
          v330 = (LODWORD(v422[0]) >> 31) + 0x7FFFFFFF;
        v331 = (double)v330 * 0.015625 + -0.000122070312;
        if (v331 < 0.0)
          v332 = round((v331 + (double)-v330) * v151) / v151 - (double)-v330;
        else
          v332 = round(v331 * v151) / v151;
        v333 = (double)SHIDWORD(v422[0]) * 0.015625;
        v334 = round((v333 + (double)-HIDWORD(v422[0])) * v151) / v151
             - (double)-HIDWORD(v422[0]);
        v335 = round(v333 * v151) / v151;
        if (v333 >= 0.0)
          v336 = v335;
        else
          v336 = v334;
        v435 = v422[1];
        v337 = LODWORD(v422[0]) + LODWORD(v422[1]);
        if (__OFADD__(v422[0], v422[1]))
          v337 = (LODWORD(v422[0]) >> 31) + 0x7FFFFFFF;
        v338 = v332;
        v160 = v336;
        v405 = ((unint64_t)HIDWORD(v422[0]) << 32) | v337;
        v157 = WebCore::snapSizeToDevicePixel((int *)&v435, (int *)&v405, v151);
        v158 = v339;
        v156 = v338 - v157;
      }
      else
      {
        v156 = WebCore::snapRectToDevicePixels((int *)v422, v151);
        v160 = v159;
      }
      v411 = (WTF *)__PAIR64__(LODWORD(v160), LODWORD(v156));
      v412 = v157;
      v413 = v158;
    }
    v161 = *(_QWORD *)(v1[11] + 80);
    WebCore::updateGraphicsContext(v161, (uint64_t)v107 + 48, 0);
    if ((*((_BYTE *)v107 + 12) & 0xFE) == 0xC)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 96))(v161, 1);
      v164 = *((float *)v107 + 54);
      if (*(float *)(v161 + 336) != v164)
      {
        *(float *)(v161 + 336) = v164;
        *(_DWORD *)(v161 + 184) |= 0x100u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 88))(v161, v161 + 8);
    }
    else
    {
      v163.n128_u32[0] = DWORD2(v416);
      v165 = 1;
      if (*((float *)&v416 + 2) <= 0.0)
        goto LABEL_272;
      v163.n128_u32[0] = HIDWORD(v416);
      if (*((float *)&v416 + 3) <= 0.0)
        goto LABEL_272;
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v161 + 96))(v161, 1, *((float *)&v416 + 3));
    }
    v165 = 0;
    v163.n128_u32[0] = DWORD2(v416);
    if (*((float *)&v416 + 2) > 0.0)
    {
      v163.n128_u32[0] = HIDWORD(v416);
      if (*((float *)&v416 + 3) > 0.0)
      {
        (*(void (**)(uint64_t, __int128 *, float))(*(_QWORD *)v161 + 472))(v161, &v416, *((float *)&v416 + 3));
        v165 = 0;
      }
    }
LABEL_272:
    if (*((_BYTE *)v107 + 208))
    {
      v166 = (char *)v107 + 144;
      v167 = *(_QWORD *)(*(_QWORD *)(v1[3] + 24) + 320);
      if (*(_DWORD *)(v167 + 20))
        v168 = v167 + 8;
      else
        v168 = 0;
    }
    else
    {
      v166 = 0;
      v168 = 0;
    }
    if (*((_BYTE *)v1 + 145))
    {
      v169 = v1[1];
      if (*(_BYTE *)(v169 + 46) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19648ACF8);
      }
      v170 = *(char **)(v169 + 120);
    }
    else
    {
      v171 = *(_QWORD *)(*v1 + 32);
      if ((*(_WORD *)(*v1 + 52) & 1) != 0)
      {
        v346 = *(_QWORD *)(v171 + 8);
        if ((*(_BYTE *)(v346 + 45) & 2) != 0)
        {
          v347 = *(_QWORD *)(v346 + 32);
          if (v347)
            v346 = *(_QWORD *)(v347 + 8);
          else
            v346 = 0;
        }
        v170 = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v346, v162);
        v1 = (_QWORD *)a1;
      }
      else
      {
        if (v171)
          v171 = *(_QWORD *)(v171 + 8);
        if ((*(_BYTE *)(v171 + 45) & 2) != 0)
        {
          v171 = *(_QWORD *)(v171 + 32);
          if (v171)
            v171 = *(_QWORD *)(v171 + 8);
        }
        v170 = (char *)(v171 + 80);
      }
    }
    v172 = *((_QWORD *)v170 + 4) + 32;
    v173 = *(_BYTE *)(v1[2] + 3382);
    v174 = (*(_DWORD *)(v1[1] + 20) & 0x1000) == 0;
    v405 = v161;
    v406 = v173;
    v407 = v174;
    v408 = v166;
    v409 = v168;
    v410 = v172;
    if ((v165 & 1) == 0)
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v161 + 104))(v161, 1, v163);
    if (*((_BYTE *)v1 + 145))
    {
      v175 = *(_QWORD *)(v1[11] + 80);
      v176 = *((float *)v1 + 32);
      v177 = *((float *)v1 + 33) + *((float *)v1 + 35);
      *(_OWORD *)v422 = xmmword_1968A14C0;
      *(_OWORD *)&v422[2] = xmmword_1969F8310;
      v423 = (float)(v176 + v177);
      v424 = (float)(v177 - v176);
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v175 + 656))(v175, v422);
    }
    WebCore::TextRun::subRun((uint64_t)v401, (WTF::StringImpl *)*((unsigned int *)v107 + 1), *((_DWORD *)v107 + 2) - *((_DWORD *)v107 + 1), (unint64_t)&v435);
    v433[0] = *v1;
    v434 = 1;
    v432 = 0;
    v431 = 0;
    v444 = v411;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v433[0] + 80))(v433[0]) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648ABC4);
    }
    WebCore::InlineIterator::Box::parentInlineBox((WebCore::InlineIterator::Box *)v433);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v442) & 1) == 0)
    {
      if (v443 == -1)
        goto LABEL_657;
      v422[0] = (WTF *)v440;
      if ((((uint64_t (*)(WTF **, unsigned int *))off_1E343A060[v443])(v422, v442) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19648ADA4);
      }
      if (v443 == -1)
      {
LABEL_657:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_658;
      }
      v422[0] = (WTF *)v440;
      if ((((uint64_t (*)(WTF **, unsigned int *))off_1E343A0B0[v443])(v422, v442) & 1) == 0)
      {
        if (v434 == -1)
          goto LABEL_657;
        v422[0] = (WTF *)v440;
        if ((((uint64_t (*)(WTF **, _QWORD *))off_1E343A010[v434])(v422, v433) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19648ADC4);
        }
        if (v434 == -1)
          goto LABEL_657;
        v422[0] = (WTF *)v440;
        if ((((uint64_t (*)(WTF **, _QWORD *))off_1E343A0C0[v434])(v422, v433) & 1) != 0)
        {
          v422[0] = (WTF *)v1;
          v422[1] = (WTF *)((char *)v107 + 88);
          v422[2] = (WTF *)&v431;
          v422[3] = (WTF *)&v444;
          for (i = 1; ; i = 0)
          {
            _ZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxLegacyPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_((uint64_t *)v422, v442, i);
            if (v443 == -1)
              goto LABEL_657;
            v440[0] = v445;
            if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E343A060[v443])(v440, v442) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19648AAB8);
            }
            if (v443 == -1)
              goto LABEL_657;
            v440[0] = v445;
            if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E343A0B0[v443])(v440, v442) & 1) != 0)
              goto LABEL_343;
            if (v443 == -1)
              goto LABEL_657;
            v440[0] = v445;
            if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E343A060[v443])(v440, v442) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19648AB94);
            }
            WebCore::InlineIterator::Box::parentInlineBox((WebCore::InlineIterator::Box *)v442);
            if (v443 == -1)
            {
              if (v441 == -1)
                goto LABEL_313;
            }
            else if (v441 == -1)
            {
              ((void (*)(_QWORD *, unsigned int *))off_1E343A000[v443])(v445, v442);
              v443 = -1;
              goto LABEL_311;
            }
            v445[0] = v442;
            ((void (*)(_QWORD *, unsigned int *, _QWORD *))off_1E343A100[v441])(v445, v442, v440);
LABEL_311:
            if (v441 != -1)
              ((void (*)(_QWORD *, _QWORD *))off_1E343A000[v441])(v445, v440);
LABEL_313:
            if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v442) & 1) != 0)
              goto LABEL_343;
          }
        }
      }
      LOBYTE(v422[0]) = 0;
      LODWORD(v422[2]) = -1;
      v180 = v443;
      if (v443 != -1)
      {
        ((void (*)(_QWORD *, WTF **, unsigned int *))off_1E343A0D0[v443])(v440, v422, v442);
        LODWORD(v422[2]) = v180;
      }
      v181 = *(_QWORD *)(v1[1] + 32);
      if (*((_BYTE *)v1 + 144))
      {
        if (v181)
          v182 = *(WebCore::RenderElement **)(v181 + 8);
        else
          v182 = 0;
        v183 = WebCore::RenderElement::firstLineStyle(v182, v178);
      }
      else
      {
        if (v181)
          v181 = *(_QWORD *)(v181 + 8);
        v183 = (char *)(v181 + 80);
      }
      v184 = *((double *)v107 + 11);
      v422[3] = (WTF *)v183;
      v423 = v184;
      if ((*(_QWORD *)&v184 & 0x8000000000000) != 0)
      {
        v340 = (unsigned int *)(*(_QWORD *)&v184 & 0xFFFFFFFFFFFFLL);
        do
          v341 = __ldaxr(v340);
        while (__stlxr(v341 + 1, v340));
      }
      LOBYTE(v424) = *((_BYTE *)v107 + 96);
      v185 = *((_QWORD *)v107 + 13);
      v425 = v185;
      if ((v185 & 0x8000000000000) != 0)
      {
        v342 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFLL);
        do
          v343 = __ldaxr(v342);
        while (__stlxr(v343 + 1, v342));
      }
      v426 = *((_BYTE *)v107 + 112);
      v186 = *((_QWORD *)v107 + 15);
      v427 = v186;
      if ((v186 & 0x8000000000000) != 0)
      {
        v344 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFLL);
        do
          v345 = __ldaxr(v344);
        while (__stlxr(v345 + 1, v344));
      }
      v428 = *((_BYTE *)v107 + 128);
      v429 = *((_BYTE *)v107 + 136);
      v430 = v444;
      v187 = HIDWORD(v432);
      if (HIDWORD(v432) == (_DWORD)v432)
      {
        WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox>((uint64_t)&v431, (unint64_t)v422);
      }
      else
      {
        v188 = v431;
        v189 = (char *)v431 + 96 * HIDWORD(v432);
        *v189 = 0;
        *((_DWORD *)v189 + 4) = -1;
        v190 = (int)v422[2];
        if (LODWORD(v422[2]) != -1)
        {
          ((void (*)(_QWORD *, char *, WTF **))off_1E343A158[LODWORD(v422[2])])(v440, v189, v422);
          *((_DWORD *)v189 + 4) = v190;
        }
        v191 = (char *)v188 + 96 * v187;
        v192 = v422[3];
        *((_QWORD *)v191 + 4) = 0;
        v193 = (double *)(v191 + 32);
        *((_QWORD *)v193 - 1) = v192;
        if (v423 != 0.0)
        {
          *v193 = v423;
          v423 = 0.0;
        }
        v194 = (char *)v188 + 96 * v187;
        v195 = LOBYTE(v424);
        *((_QWORD *)v194 + 6) = 0;
        v196 = v194 + 48;
        *((_BYTE *)v196 - 8) = v195;
        if (v425)
        {
          *v196 = v425;
          v425 = 0;
        }
        v197 = (char *)v188 + 96 * v187;
        v198 = v426;
        *((_QWORD *)v197 + 8) = 0;
        v199 = v197 + 64;
        *((_BYTE *)v199 - 8) = v198;
        if (v427)
        {
          *v199 = v427;
          v427 = 0;
        }
        v200 = (char *)v188 + 96 * v187;
        v200[72] = v428;
        v200[80] = v429;
        *((_QWORD *)v200 + 11) = v430;
        ++HIDWORD(v432);
      }
      if ((v427 & 0x8000000000000) != 0)
      {
        v350 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFLL);
        do
        {
          v351 = __ldaxr(v350);
          v352 = v351 - 1;
        }
        while (__stlxr(v352, v350));
        v1 = (_QWORD *)a1;
        if (!v352)
        {
          atomic_store(1u, v350);
          WTF::fastFree((WTF *)v350, v178);
        }
      }
      if ((v425 & 0x8000000000000) != 0)
      {
        v353 = (unsigned int *)(v425 & 0xFFFFFFFFFFFFLL);
        do
        {
          v354 = __ldaxr(v353);
          v355 = v354 - 1;
        }
        while (__stlxr(v355, v353));
        v1 = (_QWORD *)a1;
        if (!v355)
        {
          atomic_store(1u, v353);
          WTF::fastFree((WTF *)v353, v178);
        }
      }
      if ((*(_QWORD *)&v423 & 0x8000000000000) != 0)
      {
        v356 = (unsigned int *)(*(_QWORD *)&v423 & 0xFFFFFFFFFFFFLL);
        do
        {
          v357 = __ldaxr(v356);
          v358 = v357 - 1;
        }
        while (__stlxr(v358, v356));
        v1 = (_QWORD *)a1;
        if (!v358)
        {
          atomic_store(1u, v356);
          WTF::fastFree((WTF *)v356, v178);
        }
      }
      if (LODWORD(v422[2]) != -1)
        ((void (*)(_QWORD *, WTF **))off_1E343A000[LODWORD(v422[2])])(v440, v422);
    }
LABEL_343:
    v400 = (uint64_t)v107 + 88;
    v402 = v107;
    if (v443 != -1)
      ((void (*)(WTF **, unsigned int *))off_1E343A000[v443])(v422, v442);
    if (HIDWORD(v432))
    {
      v201 = 0;
      v202 = v431;
      v203 = 96 * HIDWORD(v432);
      while (2)
      {
        v204 = (char *)v202 + v203;
        v205 = (*(_QWORD *)((char *)v202 + v203 - 64) >> 50) & 1;
        if ((*((_BYTE *)v202 + v203 - 42) & 4) != 0)
          LODWORD(v205) = v205 | 2;
        v206 = (WebCore *)*((_QWORD *)v204 - 9);
        v207 = *((_DWORD *)v206 + 10);
        v208 = *(v204 - 26);
        v403 = v1[3];
        v209 = *(_QWORD *)(v1[2] + 528);
        v210 = 1.0;
        v211 = 1.0;
        if (v209)
        {
          v212 = *(_QWORD *)(v209 + 8);
          if (v212)
          {
            v213 = *(_QWORD *)(v212 + 24);
            if (v213)
            {
              v214 = *(float **)(v213 + 8);
              if (v214)
              {
                v215 = (*(_DWORD *)v214)++;
                v211 = v214[91];
                if (v215)
                {
                  *(_DWORD *)v214 = v215;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v214);
                  WTF::fastFree(v264, v265);
                }
              }
            }
          }
        }
        v217 = WebCore::computedTextDecorationThickness(v206, v178, v211);
        v218 = (WebCore *)*((_QWORD *)v204 - 9);
        v219 = *(_QWORD *)(v1[2] + 528);
        if (v219)
        {
          v220 = *(_QWORD *)(v219 + 8);
          if (v220)
          {
            v221 = *(_QWORD *)(v220 + 24);
            if (v221)
            {
              v222 = *(float **)(v221 + 8);
              if (v222)
              {
                v223 = (*(_DWORD *)v222)++;
                v210 = v222[91];
                if (v223)
                {
                  *(_DWORD *)v222 = v223;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v222);
                  WTF::fastFree(v266, v267);
                }
              }
            }
          }
        }
        v224 = WebCore::computedAutoTextDecorationThickness(v218, v216, v210);
        LODWORD(v422[0]) = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::textOriginFromPaintRect((uint64_t)v1, (float *)&v411);
        HIDWORD(v422[0]) = v226;
        v227 = *(float *)((char *)v202 + v203 - 8) * 64.0;
        if (v227 >= 2147483650.0)
        {
          v228 = 0x7FFFFFFF;
        }
        else if (v227 <= -2147483650.0)
        {
          v228 = 0x80000000;
        }
        else
        {
          v228 = (int)v227;
        }
        v229 = *(float *)((char *)v202 + v203 - 4) * 64.0;
        if (v229 >= 2147483650.0)
        {
          v230 = 0x7FFFFFFF;
        }
        else if (v229 <= -2147483650.0)
        {
          v230 = 0x80000000;
        }
        else
        {
          v230 = (int)v229;
        }
        v231 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 528);
        v232 = 1.0;
        if (v231)
        {
          v233 = *(_QWORD *)(v231 + 8);
          if (v233)
          {
            v234 = *(_QWORD *)(v233 + 24);
            if (v234)
            {
              v235 = *(_QWORD *)(v234 + 8);
              if (v235)
              {
                v236 = (*(_DWORD *)v235)++;
                v232 = *(float *)(v235 + 364);
                if (v236)
                {
                  *(_DWORD *)v235 = v236;
                }
                else
                {
                  WebCore::Page::~Page(v235);
                  WTF::fastFree(v268, v269);
                }
              }
            }
          }
        }
        v237 = (double)v228 * 0.015625;
        if ((*(_BYTE *)(a1 + 85) & 2) != 0)
          v237 = v237 + -0.000122070312;
        if (v237 < 0.0)
          v238 = round((v237 + (double)-v228) * v232) / v232 - (double)-v228;
        else
          v238 = round(v237 * v232) / v232;
        v239 = (double)v230 * 0.015625;
        if (v239 < 0.0)
          v240 = round((v239 + (double)-v230) * v232) / v232 - (double)-v230;
        else
          v240 = round(v239 * v232) / v232;
        v1 = (_QWORD *)a1;
        v241 = v205 | (v207 >> 15) & 0xF;
        *(float *)&v242 = v238;
        *(float *)&v243 = v240;
        v422[1] = (WTF *)__PAIR64__(v243, v242);
        v422[2] = (WTF *)__PAIR64__(LODWORD(v217), LODWORD(v412));
        v244 = 0.0;
        v245 = 0.0;
        if ((v241 & 1) != 0)
        {
          v246 = *(unsigned int *)((char *)v202 + v203 - 80);
          if ((_DWORD)v246 == -1)
            goto LABEL_657;
          *(_QWORD *)v442 = v440;
          if ((((uint64_t (*)(unsigned int *, char *, float))off_1E343A060[v246])(v442, v204 - 96, 0.0) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19648AA78);
          }
          WebCore::underlineOffsetForTextBoxPainting((WebCore *)(v204 - 96), *((const WebCore::InlineIterator::InlineBox **)v204 - 9), v247);
          if (*((_BYTE *)v202 + v203 - 56) == 4)
            v249 = 1.0;
          else
            v249 = 0.0;
          v245 = v248 + v249;
        }
        *(float *)&v422[3] = v245;
        if ((v241 & 2) == 0)
          goto LABEL_395;
        v250 = *(unsigned int *)((char *)v202 + v203 - 80);
        if ((_DWORD)v250 == -1)
          goto LABEL_657;
        *(_QWORD *)v442 = v440;
        if ((((uint64_t (*)(unsigned int *, char *))off_1E343A060[v250])(v442, v204 - 96) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19648AA98);
        }
        v251 = *((_QWORD *)v204 - 9);
        v252 = 0.0;
        if ((*(_BYTE *)(v251 + 41) & 0x80) == 0 || (v253 = *(_DWORD *)(v251 + 44), ((v253 >> 13) & 6) - 2 > 3))
        {
LABEL_391:
          v254 = (float)(v224 - v217) + v252;
          if (*((_BYTE *)v202 + v203 - 40) == 4)
            v255 = 1.0;
          else
            v255 = 0.0;
          v244 = v254 - v255;
LABEL_395:
          *((float *)&v422[3] + 1) = v244;
          v256 = WebCore::RenderStyle::metricsOfPrimaryFont(*((WebCore::RenderStyle **)v204 - 9), v225);
          *(float *)&v423 = (float)((float)(v224 * 0.5)
                                  + (float)((float)(*((float *)v256 + 1) + *((float *)v256 + 1)) / 3.0))
                          - (float)(v217 * 0.5);
          v258 = (int *)WebCore::RenderStyle::metricsOfPrimaryFont(*((WebCore::RenderStyle **)v204 - 9), v257);
          *((float *)&v423 + 1) = (float)v258[11] + 2.0;
          *(float *)&v259 = WebCore::wavyStrokeParameters((WebCore *)v258, *(float *)(*(_QWORD *)(*((_QWORD *)v204 - 9) + 32) + 204));
          v424 = COERCE_DOUBLE(__PAIR64__(LODWORD(v260), LODWORD(v259)));
          WebCore::TextDecorationPainter::paintBackgroundDecorations((uint64_t)&v405, v403, (uint64_t)&v435, (uint64_t)v422, v208 & 4 | v241, (uint64_t)v202 + v203 - 64, v259, v260, v261, v262, v263);
          v202 = (WTF *)((char *)v202 - 96);
          v201 += 96;
          if (v203 == v201)
            goto LABEL_415;
          continue;
        }
        break;
      }
      v270 = *(_DWORD *)(*(_QWORD *)(v251 + 24) + 236);
      v271 = *(_DWORD *)(v251 + 44) & 0xC000;
      v272 = v270 & 7;
      if (v272 == 3)
      {
        if (v271 != 0x4000)
        {
          v1 = (_QWORD *)a1;
          if (((((unsigned __int16)v253 >> 13) - 2) & 0xFFFFFFFD) != 0)
            goto LABEL_391;
          goto LABEL_414;
        }
      }
      else if (v272 == 4)
      {
        v1 = (_QWORD *)a1;
        if (v271 != 0x4000 && ((((unsigned __int16)v253 >> 13) - 3) & 0xFFFFFFFD) != 0)
          goto LABEL_391;
LABEL_414:
        WebCore::inlineBoxContentBoxHeight((WebCore *)(v204 - 96), (const WebCore::InlineIterator::InlineBox *)v225);
        goto LABEL_391;
      }
      v1 = (_QWORD *)a1;
      goto LABEL_391;
    }
LABEL_415:
    if (*((_BYTE *)v1 + 145))
    {
      v273 = *(_QWORD *)(v1[11] + 80);
      v274 = *((float *)v1 + 32);
      v275 = *((float *)v1 + 33) + *((float *)v1 + 35);
      *(_OWORD *)v422 = xmmword_1969F8300;
      *(_OWORD *)&v422[2] = xmmword_1968A14B0;
      v423 = (float)(v274 - v275);
      v424 = (float)(v274 + v275);
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v273 + 656))(v273, v422);
    }
    v276 = v431;
    v108 = v399;
    if (HIDWORD(v432))
    {
      v277 = (WTF *)((char *)v431 + 96 * HIDWORD(v432));
      v107 = v402;
      do
      {
        v278 = *((_QWORD *)v276 + 8);
        if ((v278 & 0x8000000000000) != 0)
        {
          v282 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFLL);
          do
          {
            v283 = __ldaxr(v282);
            v284 = v283 - 1;
          }
          while (__stlxr(v284, v282));
          v1 = (_QWORD *)a1;
          v107 = v402;
          v108 = v399;
          if (!v284)
          {
            atomic_store(1u, v282);
            WTF::fastFree((WTF *)v282, v178);
          }
        }
        v279 = *((_QWORD *)v276 + 6);
        if ((v279 & 0x8000000000000) != 0)
        {
          v285 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFLL);
          do
          {
            v286 = __ldaxr(v285);
            v287 = v286 - 1;
          }
          while (__stlxr(v287, v285));
          v1 = (_QWORD *)a1;
          v107 = v402;
          v108 = v399;
          if (!v287)
          {
            atomic_store(1u, v285);
            WTF::fastFree((WTF *)v285, v178);
          }
        }
        v280 = *((_QWORD *)v276 + 4);
        if ((v280 & 0x8000000000000) != 0)
        {
          v288 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFLL);
          do
          {
            v289 = __ldaxr(v288);
            v290 = v289 - 1;
          }
          while (__stlxr(v290, v288));
          v1 = (_QWORD *)a1;
          v107 = v402;
          v108 = v399;
          if (!v290)
          {
            atomic_store(1u, v288);
            WTF::fastFree((WTF *)v288, v178);
          }
        }
        v281 = *((unsigned int *)v276 + 4);
        if ((_DWORD)v281 != -1)
          ((void (*)(WTF **, WTF *))off_1E343A000[v281])(v422, v276);
        *((_DWORD *)v276 + 4) = -1;
        v276 = (WTF *)((char *)v276 + 96);
      }
      while (v276 != v277);
      v276 = v431;
      if (!v431)
        goto LABEL_440;
    }
    else
    {
      v107 = v402;
      if (!v431)
        goto LABEL_440;
    }
    v431 = 0;
    LODWORD(v432) = 0;
    WTF::fastFree(v276, v178);
LABEL_440:
    if (v434 != -1)
      ((void (*)(WTF **, _QWORD *))off_1E343A000[v434])(v422, v433);
    v291 = v436;
    v436 = 0;
    if (v291)
    {
      if (*(_DWORD *)v291 == 2)
        WTF::StringImpl::destroy(v291, v178);
      else
        *(_DWORD *)v291 -= 2;
    }
    WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintCompositionForeground(v1, (char *)v107);
    v292 = *(_QWORD *)(v1[1] + 32);
    if (*((_BYTE *)v1 + 144))
    {
      if (v292)
        v293 = *(WebCore::RenderElement **)(v292 + 8);
      else
        v293 = 0;
      v294 = WebCore::RenderElement::firstLineStyle(v293, v88);
    }
    else
    {
      if (v292)
        v292 = *(_QWORD *)(v292 + 8);
      v294 = (char *)(v292 + 80);
    }
    if (((*((unsigned __int8 *)v107 + 126) | (*((_DWORD *)v294 + 10) >> 15)) & 4) != 0)
    {
      if (*((_BYTE *)v1 + 145))
      {
        v295 = *(_QWORD *)(v1[11] + 80);
        v296 = *((float *)v1 + 32);
        v297 = *((float *)v1 + 33) + *((float *)v1 + 35);
        *(_OWORD *)v422 = xmmword_1968A14C0;
        *(_OWORD *)&v422[2] = xmmword_1969F8310;
        v423 = (float)(v296 + v297);
        v424 = (float)(v297 - v296);
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v295 + 656))(v295, v422);
      }
      v298 = *(_QWORD *)(v1[2] + 528);
      v299 = 1.0;
      if (v298)
      {
        v300 = *(_QWORD *)(v298 + 8);
        if (v300)
        {
          v301 = *(_QWORD *)(v300 + 24);
          if (v301)
          {
            v302 = *(float **)(v301 + 8);
            if (v302)
            {
              v303 = (*(_DWORD *)v302)++;
              v299 = v302[91];
              if (v303)
              {
                *(_DWORD *)v302 = v303;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v302);
                WTF::fastFree(v318, v319);
              }
            }
          }
        }
      }
      v304 = WebCore::computedTextDecorationThickness((WebCore *)v294, v88, v299);
      v306 = WebCore::computedAutoTextDecorationThickness((WebCore *)v294, v305, v299);
      v308 = (float *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v294, v307);
      v309 = (float)(v308[1] + v308[1]) / 3.0;
      v422[0] = v411;
      v422[1] = (WTF *)__PAIR64__(LODWORD(v304), LODWORD(v412));
      *(float *)&v422[2] = (float)((float)(v306 * 0.5) + v309) - (float)(v304 * 0.5);
      HIDWORD(v422[2]) = WebCore::wavyStrokeParameters((WebCore *)v308, *(float *)(*((_QWORD *)v294 + 4) + 204));
      LODWORD(v422[3]) = v310;
      WebCore::TextDecorationPainter::paintLineThrough((uint64_t)&v405, (uint64_t)v422, (WTF *)((char *)v107 + 120), v400);
      v1 = (_QWORD *)a1;
      if (*(_BYTE *)(a1 + 145))
      {
        v311 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 80);
        v312 = *(float *)(a1 + 128);
        v313 = *(float *)(a1 + 132) + *(float *)(a1 + 140);
        *(_OWORD *)v422 = xmmword_1969F8300;
        *(_OWORD *)&v422[2] = xmmword_1968A14B0;
        v423 = (float)(v312 - v313);
        v424 = (float)(v312 + v313);
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v311 + 656))(v311, v422);
      }
    }
    goto LABEL_465;
  }
LABEL_556:
  if (v107)
  {
    v95 = v107;
    goto LABEL_558;
  }
LABEL_559:
  v362 = v417;
  if (v418)
  {
    v363 = 224 * v418;
    v364 = (unsigned int **)((char *)v417 + 40);
    do
    {
      WebCore::StyledMarkedText::Style::~Style(v364);
      v365 = (WTF::StringImpl *)*(v364 - 2);
      *(v364 - 2) = 0;
      if (v365)
      {
        if (*(_DWORD *)v365 == 2)
          WTF::StringImpl::destroy(v365, v88);
        else
          *(_DWORD *)v365 -= 2;
      }
      v364 += 28;
      v363 -= 224;
    }
    while (v363);
    v362 = v417;
  }
  if (v362)
    WTF::fastFree(v362, v88);
  result = v419;
  if (!HIDWORD(v420))
  {
    if (!v419)
      return result;
LABEL_596:
    v419 = 0;
    LODWORD(v420) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, v88);
  }
  v366 = 40 * HIDWORD(v420);
  v367 = (WTF::StringImpl **)((char *)v419 + 24);
  do
  {
    v368 = *v367;
    *v367 = 0;
    if (v368)
    {
      if (*(_DWORD *)v368 == 2)
        WTF::StringImpl::destroy(v368, v88);
      else
        *(_DWORD *)v368 -= 2;
    }
    v367 += 5;
    v366 -= 40;
  }
  while (v366);
  result = v419;
  if (v419)
    goto LABEL_596;
  return result;
}

WTF::StringImpl *WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintCompositionForeground(unint64_t *a1, char *a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v20;
  int v21;
  char *v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  _DWORD *v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  WebCore::RenderElement *v114;
  char *LineStyle;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  unsigned int v119;
  _DWORD *v120;
  unsigned int v121;
  _DWORD *v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t *v128;
  unint64_t *v129;
  unsigned int v130;
  int v131;
  BOOL v132;
  unint64_t *v133;
  unint64_t *v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  unsigned int v140;
  _DWORD *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  WTF *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  WebCore::Editor *v167;
  void *v168;
  WebCore::Editor *v169;
  uint64_t v170;
  void *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int *v181[23];
  _DWORD v182[3];
  char v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  uint64_t v188;
  char v189;
  WTF::StringImpl *v190;
  char v191;
  unsigned int *v192;
  unsigned int *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v4 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 528)
                                         + 8)
                             + 296);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v167 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v167, v4);
    v169 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v167;
    if (v169)
    {
      WebCore::Editor::~Editor(v169, v168);
      if (*(_DWORD *)v170)
      {
        *(_QWORD *)(v170 + 496) = 0;
        *(_OWORD *)(v170 + 464) = 0u;
        *(_OWORD *)(v170 + 480) = 0u;
        *(_OWORD *)(v170 + 432) = 0u;
        *(_OWORD *)(v170 + 448) = 0u;
        *(_OWORD *)(v170 + 400) = 0u;
        *(_OWORD *)(v170 + 416) = 0u;
        *(_OWORD *)(v170 + 368) = 0u;
        *(_OWORD *)(v170 + 384) = 0u;
        *(_OWORD *)(v170 + 336) = 0u;
        *(_OWORD *)(v170 + 352) = 0u;
        *(_OWORD *)(v170 + 304) = 0u;
        *(_OWORD *)(v170 + 320) = 0u;
        *(_OWORD *)(v170 + 272) = 0u;
        *(_OWORD *)(v170 + 288) = 0u;
        *(_OWORD *)(v170 + 240) = 0u;
        *(_OWORD *)(v170 + 256) = 0u;
        *(_OWORD *)(v170 + 208) = 0u;
        *(_OWORD *)(v170 + 224) = 0u;
        *(_OWORD *)(v170 + 176) = 0u;
        *(_OWORD *)(v170 + 192) = 0u;
        *(_OWORD *)(v170 + 144) = 0u;
        *(_OWORD *)(v170 + 160) = 0u;
        *(_OWORD *)(v170 + 112) = 0u;
        *(_OWORD *)(v170 + 128) = 0u;
        *(_OWORD *)(v170 + 80) = 0u;
        *(_OWORD *)(v170 + 96) = 0u;
        *(_OWORD *)(v170 + 48) = 0u;
        *(_OWORD *)(v170 + 64) = 0u;
        *(_OWORD *)(v170 + 16) = 0u;
        *(_OWORD *)(v170 + 32) = 0u;
        *(_OWORD *)v170 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v170, v171);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
  }
  v6 = *(unsigned int *)(v5 + 76);
  if (!(_DWORD)v6 || !*((_BYTE *)a1 + 148))
    return WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintForeground((WTF::StringImpl *)a1, a2);
  if (v6 >= 0x6666667)
    goto LABEL_255;
  v7 = WTF::fastMalloc((WTF *)(40 * v6));
  v8 = (WTF *)v7;
  v9 = *(_DWORD *)(v5 + 76);
  if (v9)
  {
    v10 = *(_QWORD *)(v5 + 64);
    v11 = v10 + 40 * v9;
    v12 = v7;
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v10;
      *(_BYTE *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      if (*(_BYTE *)(v10 + 16))
      {
        v13 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v12 + 8) = v13;
        if ((v13 & 0x8000000000000) != 0)
        {
          v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
        }
        *(_BYTE *)(v12 + 16) = 1;
      }
      *(_BYTE *)(v12 + 24) = 0;
      *(_BYTE *)(v12 + 32) = 0;
      if (*(_BYTE *)(v10 + 32))
      {
        v14 = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v12 + 24) = v14;
        if ((v14 & 0x8000000000000) != 0)
        {
          v17 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
        }
        *(_BYTE *)(v12 + 32) = 1;
      }
      v12 += 40;
      v10 += 40;
    }
    while (v10 != v11);
  }
  v195 = 0;
  v196 = 0;
  v20 = (_DWORD *)*a1;
  if (*a1)
  {
    if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 80))(*a1) & 1) == 0)
    {
LABEL_255:
      __break(0xC471u);
      JUMPOUT(0x19648BC78);
    }
  }
  v21 = *(_DWORD *)v8;
  LODWORD(v187) = v20[18];
  HIDWORD(v187) = v21;
  LOBYTE(v188) = 0;
  v189 = 0;
  LOBYTE(v190) = 0;
  v191 = 0;
  v22 = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, 1uLL, (unint64_t)&v187);
  v24 = HIDWORD(v196);
  v25 = v195;
  v26 = v195 + 40 * HIDWORD(v196);
  *(_QWORD *)v26 = *(_QWORD *)v22;
  *(_BYTE *)(v26 + 8) = 0;
  v27 = (_QWORD *)(v26 + 8);
  *(_BYTE *)(v26 + 16) = 0;
  v28 = (_BYTE *)(v26 + 16);
  if (v22[16])
  {
    *v27 = 0;
    v29 = *((_QWORD *)v22 + 1);
    if (v29)
    {
      *v27 = v29;
      *((_QWORD *)v22 + 1) = 0;
    }
    *v28 = 1;
  }
  v30 = v25 + 40 * v24;
  *(_BYTE *)(v30 + 24) = 0;
  v31 = v30 + 24;
  *(_BYTE *)(v31 + 8) = 0;
  if (v22[32])
  {
    *(_QWORD *)v31 = 0;
    v32 = *((_QWORD *)v22 + 3);
    if (v32)
    {
      *(_QWORD *)v31 = v32;
      *((_QWORD *)v22 + 3) = 0;
    }
    *(_BYTE *)(v31 + 8) = 1;
  }
  HIDWORD(v196) = v24 + 1;
  if (v191)
  {
    if (((unint64_t)v190 & 0x8000000000000) != 0)
    {
      v172 = (unsigned int *)((unint64_t)v190 & 0xFFFFFFFFFFFFLL);
      do
      {
        v173 = __ldaxr(v172);
        v174 = v173 - 1;
      }
      while (__stlxr(v174, v172));
      if (!v174)
      {
        atomic_store(1u, v172);
        WTF::fastFree((WTF *)v172, v23);
      }
    }
  }
  if (v189)
  {
    if ((v188 & 0x8000000000000) != 0)
    {
      v175 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFLL);
      do
      {
        v176 = __ldaxr(v175);
        v177 = v176 - 1;
      }
      while (__stlxr(v177, v175));
      if (!v177)
      {
        atomic_store(1u, v175);
        WTF::fastFree((WTF *)v175, v23);
      }
    }
  }
  v33 = 0;
  v34 = v6 - 1;
  if (v6 <= 1)
    v35 = 1;
  else
    v35 = v6;
  do
  {
    v36 = (_QWORD *)((char *)v8 + 40 * v33);
    v37 = HIDWORD(v196);
    if (HIDWORD(v196) == (_DWORD)v196)
    {
      v38 = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, HIDWORD(v196) + 1, (unint64_t)v36);
      v39 = HIDWORD(v196);
      v40 = v195;
      v41 = v195 + 40 * HIDWORD(v196);
      *(_QWORD *)v41 = *(_QWORD *)v38;
      *(_BYTE *)(v41 + 8) = 0;
      v42 = (_QWORD *)(v41 + 8);
      *(_BYTE *)(v41 + 16) = 0;
      v43 = (_BYTE *)(v41 + 16);
      if (v38[16])
      {
        v44 = *((_QWORD *)v38 + 1);
        *v42 = v44;
        if ((v44 & 0x8000000000000) != 0)
        {
          v82 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 + 1, v82));
        }
        *v43 = 1;
      }
      v45 = v40 + 40 * v39;
      *(_BYTE *)(v45 + 24) = 0;
      v46 = v45 + 24;
      *(_BYTE *)(v46 + 8) = 0;
      v47 = (_BYTE *)(v46 + 8);
      if (v38[32])
      {
        v48 = *((_QWORD *)v38 + 3);
LABEL_49:
        *(_QWORD *)v46 = v48;
        if ((v48 & 0x8000000000000) != 0)
        {
          v80 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 + 1, v80));
        }
        *v47 = 1;
      }
    }
    else
    {
      v49 = v195;
      v50 = v195 + 40 * HIDWORD(v196);
      *(_QWORD *)v50 = *v36;
      *(_BYTE *)(v50 + 8) = 0;
      v51 = (_QWORD *)(v50 + 8);
      *(_BYTE *)(v50 + 16) = 0;
      v52 = (_BYTE *)(v50 + 16);
      if (*((_BYTE *)v8 + 40 * v33 + 16))
      {
        v53 = *((_QWORD *)v8 + 5 * v33 + 1);
        *v51 = v53;
        if ((v53 & 0x8000000000000) != 0)
        {
          v84 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 + 1, v84));
        }
        *v52 = 1;
      }
      v54 = v49 + 40 * v37;
      *(_BYTE *)(v54 + 24) = 0;
      v46 = v54 + 24;
      *(_BYTE *)(v46 + 8) = 0;
      v47 = (_BYTE *)(v46 + 8);
      if (*((_BYTE *)v8 + 40 * v33 + 32))
      {
        v48 = *((_QWORD *)v8 + 5 * v33 + 3);
        goto LABEL_49;
      }
    }
    v55 = HIDWORD(v196);
    v56 = ++HIDWORD(v196);
    v57 = v6;
    if (v33 == v34)
      goto LABEL_79;
    v57 = v33 + 1;
    if (v33 + 1 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19648BE38);
    }
    v58 = *((_DWORD *)v8 + 10 * v57);
    LODWORD(v187) = *((_DWORD *)v8 + 10 * v33 + 1);
    HIDWORD(v187) = v58;
    LOBYTE(v188) = 0;
    v189 = 0;
    LOBYTE(v190) = 0;
    v191 = 0;
    if ((_DWORD)v56 == (_DWORD)v196)
    {
      v59 = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, v56 + 1, (unint64_t)&v187);
      LODWORD(v56) = HIDWORD(v196);
      v60 = v195;
      v61 = v195 + 40 * HIDWORD(v196);
      *(_QWORD *)v61 = *(_QWORD *)v59;
      *(_BYTE *)(v61 + 8) = 0;
      v62 = (_QWORD *)(v61 + 8);
      *(_BYTE *)(v61 + 16) = 0;
      v63 = (_BYTE *)(v61 + 16);
      if (v59[16])
      {
        *v62 = 0;
        v64 = *((_QWORD *)v59 + 1);
        if (v64)
        {
          *v62 = v64;
          *((_QWORD *)v59 + 1) = 0;
        }
        *v63 = 1;
      }
      v65 = v60 + 40 * v56;
      *(_BYTE *)(v65 + 24) = 0;
      v66 = v65 + 24;
      *(_BYTE *)(v66 + 8) = 0;
      v67 = (_BYTE *)(v66 + 8);
      if (!v59[32])
        goto LABEL_70;
      *(_QWORD *)v66 = 0;
      v70 = *((_QWORD *)v59 + 3);
      v68 = (WTF::StringImpl **)(v59 + 24);
      v69 = v70;
      if (v70)
      {
        *(_QWORD *)v66 = v69;
LABEL_68:
        *v68 = 0;
        goto LABEL_69;
      }
      goto LABEL_69;
    }
    v71 = v195;
    v72 = v195 + 40 * v56;
    *(_QWORD *)v72 = v187;
    *(_BYTE *)(v72 + 8) = 0;
    v73 = (_QWORD *)(v72 + 8);
    *(_BYTE *)(v72 + 16) = 0;
    v74 = (_BYTE *)(v72 + 16);
    if (v189)
    {
      *v73 = 0;
      if (v188)
      {
        *v73 = v188;
        v188 = 0;
      }
      *v74 = 1;
    }
    v75 = v71 + 40 * v56;
    *(_BYTE *)(v75 + 24) = 0;
    v76 = v75 + 24;
    *(_BYTE *)(v76 + 8) = 0;
    v67 = (_BYTE *)(v76 + 8);
    if (v191)
    {
      *(_QWORD *)v76 = 0;
      if (v190)
      {
        *(_QWORD *)v76 = v190;
        v68 = &v190;
        goto LABEL_68;
      }
LABEL_69:
      *v67 = 1;
LABEL_70:
      HIDWORD(v196) = v56 + 1;
      if (v191)
      {
        if (((unint64_t)v190 & 0x8000000000000) != 0)
        {
          v77 = (unsigned int *)((unint64_t)v190 & 0xFFFFFFFFFFFFLL);
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            atomic_store(1u, v77);
            WTF::fastFree((WTF *)v77, v23);
          }
        }
      }
      goto LABEL_77;
    }
    HIDWORD(v196) = v55 + 2;
LABEL_77:
    if (v189)
    {
      if ((v188 & 0x8000000000000) != 0)
      {
        v86 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFLL);
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          atomic_store(1u, v86);
          WTF::fastFree((WTF *)v86, v23);
        }
      }
    }
LABEL_79:
    v33 = v57;
  }
  while (v57 != v35);
  v89 = *((_DWORD *)v8 + 10 * v34 + 1);
  v90 = (_DWORD *)*a1;
  if (*a1 && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v90 + 80))(*a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648BCACLL);
  }
  v187 = __PAIR64__(v90[19] + v90[18], v89);
  LOBYTE(v188) = 0;
  v189 = 0;
  LOBYTE(v190) = 0;
  v191 = 0;
  v91 = HIDWORD(v196);
  if (HIDWORD(v196) == (_DWORD)v196)
  {
    v92 = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, HIDWORD(v196) + 1, (unint64_t)&v187);
    v91 = HIDWORD(v196);
    v93 = v195;
    v94 = v195 + 40 * HIDWORD(v196);
    *(_QWORD *)v94 = *(_QWORD *)v92;
    *(_BYTE *)(v94 + 8) = 0;
    v95 = (_QWORD *)(v94 + 8);
    *(_BYTE *)(v94 + 16) = 0;
    v96 = (_BYTE *)(v94 + 16);
    if (v92[16])
    {
      *v95 = 0;
      v97 = *((_QWORD *)v92 + 1);
      if (v97)
      {
        *v95 = v97;
        *((_QWORD *)v92 + 1) = 0;
      }
      *v96 = 1;
    }
    v98 = v93 + 40 * v91;
    *(_BYTE *)(v98 + 24) = 0;
    v99 = v98 + 24;
    *(_BYTE *)(v99 + 8) = 0;
    v100 = (_BYTE *)(v99 + 8);
    if (v92[32])
    {
      *(_QWORD *)v99 = 0;
      v103 = *((_QWORD *)v92 + 3);
      v101 = (WTF::StringImpl **)(v92 + 24);
      v102 = v103;
      if (v103)
      {
        *(_QWORD *)v99 = v102;
        goto LABEL_111;
      }
      goto LABEL_112;
    }
    goto LABEL_113;
  }
  v104 = v195;
  v105 = v195 + 40 * HIDWORD(v196);
  *(_QWORD *)v105 = v187;
  *(_BYTE *)(v105 + 8) = 0;
  v106 = (_QWORD *)(v105 + 8);
  *(_BYTE *)(v105 + 16) = 0;
  v107 = (_BYTE *)(v105 + 16);
  if (v189)
  {
    *v106 = 0;
    if (v188)
    {
      *v106 = v188;
      v188 = 0;
    }
    *v107 = 1;
  }
  v108 = v104 + 40 * v91;
  *(_BYTE *)(v108 + 24) = 0;
  v109 = v108 + 24;
  *(_BYTE *)(v109 + 8) = 0;
  v100 = (_BYTE *)(v109 + 8);
  if (v191)
  {
    *(_QWORD *)v109 = 0;
    if (v190)
    {
      v101 = &v190;
      *(_QWORD *)v109 = v190;
LABEL_111:
      *v101 = 0;
    }
LABEL_112:
    *v100 = 1;
LABEL_113:
    HIDWORD(v196) = v91 + 1;
    if (v191)
    {
      if (((unint64_t)v190 & 0x8000000000000) != 0)
      {
        v110 = (unsigned int *)((unint64_t)v190 & 0xFFFFFFFFFFFFLL);
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((WTF *)v110, v23);
        }
      }
    }
  }
  else
  {
    HIDWORD(v196) = v91 + 1;
  }
  if (v189)
  {
    if ((v188 & 0x8000000000000) != 0)
    {
      v178 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFLL);
      do
      {
        v179 = __ldaxr(v178);
        v180 = v179 - 1;
      }
      while (__stlxr(v180, v178));
      if (!v180)
      {
        atomic_store(1u, v178);
        WTF::fastFree((WTF *)v178, v23);
      }
    }
  }
  v113 = *(_QWORD *)(a1[1] + 32);
  if (*((_BYTE *)a1 + 144))
  {
    if (v113)
      v114 = *(WebCore::RenderElement **)(v113 + 8);
    else
      v114 = 0;
    LineStyle = WebCore::RenderElement::firstLineStyle(v114, (WTF::StringImpl *)v23);
  }
  else
  {
    if (v113)
      v113 = *(_QWORD *)(v113 + 8);
    LineStyle = (char *)(v113 + 80);
  }
  v116 = v195;
  if (!HIDWORD(v196))
    goto LABEL_196;
  v117 = v195 + 40 * HIDWORD(v196);
  while (2)
  {
    WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)&v193, (const WebCore::RenderText *)a1[1], (const WebCore::RenderStyle *)LineStyle, *((unsigned __int8 *)a1 + 144), (const WebCore::PaintInfo *)a1[11]);
    v119 = *(_DWORD *)(v116 + 4);
    v120 = (_DWORD *)*a1;
    if (*a1 && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v120 + 80))(*a1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648BDA4);
    }
    if (v119 <= v120[18])
      goto LABEL_163;
    v121 = *(_DWORD *)v116;
    v122 = (_DWORD *)*a1;
    if (*a1 && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v122 + 80))(*a1) & 1) == 0)
    {
      __break(0xC471u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(0xC471u);
      JUMPOUT(0x19648BDE4);
    }
    if (v121 >= v122[19] + v122[18])
      break;
    v124 = *(_DWORD *)v116;
    v123 = *(_DWORD *)(v116 + 4);
    LODWORD(v187) = *(_DWORD *)v116;
    v126 = *((_DWORD *)a1 + 24);
    v125 = *((_DWORD *)a1 + 25);
    v127 = v125 + v126;
    v182[0] = v125 + v126;
    if (__CFADD__(v125, v126))
      goto LABEL_239;
    v128 = (unint64_t *)v182;
    if (v127 >= v124)
      v128 = &v187;
    if (v126 <= v124)
      v129 = v128;
    else
      v129 = a1 + 12;
    v130 = *(_DWORD *)v129 - v126;
    v131 = *((unsigned __int8 *)a1 + 116);
    if (*((_BYTE *)a1 + 116) && (v142 = *((_DWORD *)a1 + 28)) != 0)
    {
      if (v142 < v130)
        v130 = *((_DWORD *)a1 + 28);
    }
    else if (v130 == v125)
    {
      v130 = *((_DWORD *)a1 + 26) + v125;
    }
    LODWORD(v187) = v123;
    v182[0] = v125 + v126;
    v132 = v127 >= v123;
    v133 = (unint64_t *)v182;
    if (v132)
      v133 = &v187;
    if (v126 <= v123)
      v134 = v133;
    else
      v134 = a1 + 12;
    v135 = *(_DWORD *)v134 - v126;
    if (v131 && (v143 = *((_DWORD *)a1 + 28)) != 0)
    {
      if (v143 < v135)
        v135 = *((_DWORD *)a1 + 28);
    }
    else if (v135 == v125)
    {
      v135 = *((_DWORD *)a1 + 26) + v125;
    }
    if (*(_BYTE *)(v116 + 32))
    {
      v136 = *(_QWORD *)(v116 + 24);
      if ((v194 & 0x8000000000000) != 0)
      {
        if ((v136 & 0x8000000000000) == 0
          || *(float *)((v194 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v194 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v194 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v194 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v136 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v194) != HIBYTE(v136)
          || BYTE6(v194) != BYTE6(v136))
        {
          v146 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFLL);
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          if (!v148)
          {
            atomic_store(1u, v146);
            WTF::fastFree((WTF *)v146, v118);
          }
LABEL_157:
          v137 = *(_QWORD *)(v116 + 24);
          v194 = v137;
          if ((v137 & 0x8000000000000) != 0)
          {
            v144 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFLL);
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 + 1, v144));
          }
        }
      }
      else if (v194 != v136 || (v136 & 0x8000000000000) != 0)
      {
        goto LABEL_157;
      }
    }
    v182[0] = 0;
    v182[1] = v130;
    v182[2] = v135;
    v183 = 0;
    v184 = 0;
    v185 = 0;
    v186 = 0;
    WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)v181, (const Style *)&v193);
    WebCore::StyledMarkedText::StyledMarkedText((WebCore::StyledMarkedText *)&v187, (const WebCore::MarkedText *)v182, (uint64_t *)v181);
    WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintForeground((WTF::StringImpl *)a1, (char *)&v187);
    WebCore::StyledMarkedText::Style::~Style(&v192);
    v139 = v190;
    v190 = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 2)
        WTF::StringImpl::destroy(v139, v138);
      else
        *(_DWORD *)v139 -= 2;
    }
    WebCore::StyledMarkedText::Style::~Style(v181);
    v140 = *(_DWORD *)(v116 + 4);
    v141 = (_DWORD *)*a1;
    if (*a1 && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v141 + 80))(*a1) & 1) == 0)
      goto LABEL_240;
    if (v140 <= v141[19] + v141[18])
    {
LABEL_163:
      WebCore::StyledMarkedText::Style::~Style(&v193);
      v116 += 40;
      if (v116 == v117)
        goto LABEL_195;
      continue;
    }
    break;
  }
  WebCore::StyledMarkedText::Style::~Style(&v193);
LABEL_195:
  v116 = v195;
  if (!HIDWORD(v196))
  {
LABEL_196:
    if (!v116)
      goto LABEL_197;
LABEL_234:
    WTF::fastFree((WTF *)v116, v23);
    goto LABEL_197;
  }
  v158 = v195 + 40 * HIDWORD(v196);
  do
  {
    if (*(_BYTE *)(v116 + 32))
    {
      v159 = *(_QWORD *)(v116 + 24);
      if ((v159 & 0x8000000000000) != 0)
      {
        v161 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFLL);
        do
        {
          v162 = __ldaxr(v161);
          v163 = v162 - 1;
        }
        while (__stlxr(v163, v161));
        if (!v163)
        {
          atomic_store(1u, v161);
          WTF::fastFree((WTF *)v161, v23);
        }
      }
    }
    if (*(_BYTE *)(v116 + 16))
    {
      v160 = *(_QWORD *)(v116 + 8);
      if ((v160 & 0x8000000000000) != 0)
      {
        v164 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFLL);
        do
        {
          v165 = __ldaxr(v164);
          v166 = v165 - 1;
        }
        while (__stlxr(v166, v164));
        if (!v166)
        {
          atomic_store(1u, v164);
          WTF::fastFree((WTF *)v164, v23);
        }
      }
    }
    v116 += 40;
  }
  while (v116 != v158);
  v116 = v195;
  if (v195)
    goto LABEL_234;
LABEL_197:
  v149 = v8;
  do
  {
    if (*((_BYTE *)v149 + 32))
    {
      v150 = *((_QWORD *)v149 + 3);
      if ((v150 & 0x8000000000000) != 0)
      {
        v152 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFLL);
        do
        {
          v153 = __ldaxr(v152);
          v154 = v153 - 1;
        }
        while (__stlxr(v154, v152));
        if (!v154)
        {
          atomic_store(1u, v152);
          WTF::fastFree((WTF *)v152, v23);
        }
      }
    }
    if (*((_BYTE *)v149 + 16))
    {
      v151 = *((_QWORD *)v149 + 1);
      if ((v151 & 0x8000000000000) != 0)
      {
        v155 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFLL);
        do
        {
          v156 = __ldaxr(v155);
          v157 = v156 - 1;
        }
        while (__stlxr(v157, v155));
        if (!v157)
        {
          atomic_store(1u, v155);
          WTF::fastFree((WTF *)v155, v23);
        }
      }
    }
    v149 = (WTF *)((char *)v149 + 40);
  }
  while (v149 != (WTF *)((char *)v8 + 40 * v6));
  return (WTF::StringImpl *)WTF::fastFree(v8, v23);
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintBackground(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4, int a5)
{
  int *v5;
  int v6;
  unsigned int v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  float v16;
  float v17;
  uint64_t v18;
  WebCore::RenderBlock *v19;
  double v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  float v23;
  unsigned int v24;
  float v25;
  double v26;
  int v27;
  double v28;
  int v29;
  double v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  char *LineStyle;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  signed int v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  __int128 v57;
  WTF *v58;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80[2];
  unsigned int v81;
  int v82;
  uint64_t v83[2];
  unsigned int v84;

  v7 = a3 - a2;
  if (a3 <= a2)
    return result;
  v12 = result;
  v13 = *(_QWORD *)(*(_QWORD *)(result + 88) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(v13, 1);
  v14 = *a4;
  *(_QWORD *)&v76 = v14;
  if ((v14 & 0x8000000000000) != 0)
  {
    v60 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 + 1, v60));
    v62 = *a4;
    *((_QWORD *)&v76 + 1) = v62;
    if ((v62 & 0x8000000000000) != 0)
    {
      v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 + 1, v63));
    }
  }
  else
  {
    *((_QWORD *)&v76 + 1) = v14;
  }
  v77 = 0uLL;
  LOBYTE(v78) = 0;
  DWORD1(v78) = 1082130432;
  WebCore::updateGraphicsContext(v13, (uint64_t)&v76, 0);
  if ((v77 & 0x8000000000000) != 0)
  {
    v67 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, v15);
    }
  }
  if ((*((_QWORD *)&v76 + 1) & 0x8000000000000) != 0)
  {
    v70 = (unsigned int *)(*((_QWORD *)&v76 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, v15);
    }
  }
  if ((v76 & 0x8000000000000) != 0)
  {
    v73 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, v15);
    }
  }
  *(_QWORD *)&v76 = *(_QWORD *)v12;
  LODWORD(v77) = 1;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v76 + 80))(v76) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648C3FCLL);
  }
  WebCore::InlineIterator::Box::lineBox(v83, (WebCore::InlineIterator::Box *)&v76);
  if ((_DWORD)v77 != -1)
    ((void (*)(int *, __int128 *))off_1E343A000[v77])(v80, &v76);
  if (v84 == -1
    || (v5 = v80,
        *(_QWORD *)&v76 = v80,
        (*(&off_1E343A020 + v84))((int)&v76, (WebCore::InlineIterator::LineBoxIteratorModernPath *)v83),
        v84 == -1)
    || (v17 = v16,
        *(_QWORD *)&v76 = v80,
        v18 = ((uint64_t (*)(__int128 *, uint64_t *))off_1E343A030[v84])(&v76, v83),
        v84 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_98;
  }
  v19 = (WebCore::RenderBlock *)v18;
  *(_QWORD *)&v76 = v80;
  v20 = ((float (*)(__int128 *, uint64_t *))*(&off_1E343A040 + v84))(&v76, v83) * 64.0;
  if (v20 >= 2147483650.0)
  {
    v21 = 0x7FFFFFFFLL;
  }
  else if (v20 <= -2147483650.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  v23 = (float)(int)WebCore::RenderBlockFlow::adjustEnclosingTopForPrecedingBlock(v19, v21) * 0.015625;
  v24 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v12 + 24) + 44) >> 13;
  if (v24 <= 4 && ((1 << v24) & 0x16) != 0)
    v25 = v17 - (float)(*(float *)(v12 + 36) + *(float *)(v12 + 44));
  else
    v25 = *(float *)(v12 + 36) - v23;
  v26 = v25 * 64.0;
  if (v26 >= 2147483650.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else if (v26 <= -2147483650.0)
  {
    v27 = 0x80000000;
  }
  else
  {
    v27 = (int)v26;
  }
  v28 = fmaxf(v17 - v23, 0.0) * 64.0;
  if (v28 >= 2147483650.0)
  {
    v29 = 0x7FFFFFFF;
  }
  else if (v28 <= -2147483650.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v28;
  }
  v30 = *(float *)(v12 + 128) * 64.0;
  if (v30 >= 2147483650.0)
  {
    LODWORD(v5) = 0x7FFFFFFF;
  }
  else if (v30 <= -2147483650.0)
  {
    LODWORD(v5) = 0x80000000;
  }
  else
  {
    LODWORD(v5) = (int)v30;
  }
  v31 = (float)(*(float *)(v12 + 132) + (float)((float)v27 * -0.015625)) * 64.0;
  if (v31 >= 2147483650.0)
  {
    v32 = 0x7FFFFFFF;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = 0x80000000;
  }
  else
  {
    v32 = (int)v31;
  }
  v33 = *(float *)(v12 + 40) * 64.0;
  if (v33 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFF;
  }
  else if (v33 <= -2147483650.0)
  {
    v6 = 0x80000000;
  }
  else
  {
    v6 = (int)v33;
  }
  v80[0] = (int)v5;
  v80[1] = v32;
  v81 = v6;
  v82 = v29;
  if (*(_BYTE *)(v12 + 145))
  {
    v34 = *(_QWORD *)(v12 + 8);
    if (*(_BYTE *)(v34 + 46) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19648C41CLL);
    }
    LineStyle = *(char **)(v34 + 120);
    goto LABEL_42;
  }
  v36 = *(_QWORD *)(*(_QWORD *)v12 + 32);
  if ((*(_WORD *)(*(_QWORD *)v12 + 52) & 1) == 0)
  {
    if (v36)
      v36 = *(_QWORD *)(v36 + 8);
    if ((*(_BYTE *)(v36 + 45) & 2) != 0)
    {
      v36 = *(_QWORD *)(v36 + 32);
      if (v36)
        v36 = *(_QWORD *)(v36 + 8);
    }
    LineStyle = (char *)(v36 + 80);
    goto LABEL_42;
  }
  v65 = *(_QWORD *)(v36 + 8);
  if ((*(_BYTE *)(v65 + 45) & 2) != 0)
  {
    v66 = *(_QWORD *)(v65 + 32);
    if (v66)
    {
      v65 = *(_QWORD *)(v66 + 8);
      goto LABEL_96;
    }
LABEL_98:
    v65 = 0;
  }
LABEL_96:
  LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v65, v22);
LABEL_42:
  v37 = *((_QWORD *)LineStyle + 4) + 32;
  v38 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 8) + 112);
  if (v38 <= 0x100)
    LOBYTE(v38) = 0;
  WebCore::FontCascade::adjustSelectionRectForText(v37, (void *)(v38 != 0), v12 + 48, (WebCore::LayoutRect *)v80, a2, a3 | 0x100000000);
  v39 = *(_QWORD *)(v12 + 56);
  if (v39)
    LODWORD(v39) = *(_DWORD *)(v39 + 4);
  if ((_DWORD)v39 == v7)
  {
    v40 = v80[0] + v81;
    v41 = __OFADD__(v80[0], v81);
    v42 = v80[0] + v81;
    if (__OFADD__(v80[0], v81))
      v42 = (v80[0] >> 31) + 0x7FFFFFFF;
    v43 = (_DWORD)v5 + v6;
    if (__OFADD__((_DWORD)v5, v6))
      v43 = (v5 >> 31) + 0x7FFFFFFF;
    if ((int)v42 <= v43)
      v42 = v43;
    if (v41)
      v40 = (v80[0] >> 31) + 0x7FFFFFFF;
    v44 = __OFSUB__(v42, v40);
    v45 = v42 - v40;
    if (v44)
      v45 = (v42 >> 31) + 0x7FFFFFFF;
    v44 = __OFADD__(v81, v45);
    v46 = v81 + v45;
    if (v44)
      v46 = (v81 >> 31) + 0x7FFFFFFF;
    v81 = v46 & ~(v46 >> 31);
  }
  v47 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 528);
  v48 = 1.0;
  if (v47)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 24);
      if (v50)
      {
        v51 = *(float **)(v50 + 8);
        if (v51)
        {
          v52 = (*(_DWORD *)v51)++;
          v48 = v51[91];
          if (v52)
          {
            *(_DWORD *)v51 = v52;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v51);
            WTF::fastFree(v58, v59);
          }
        }
      }
    }
  }
  v53 = WebCore::snapRectToDevicePixels(v80, v48);
  *(_QWORD *)&v79 = __PAIR64__(LODWORD(v54), LODWORD(v53));
  *((_QWORD *)&v79 + 1) = __PAIR64__(LODWORD(v56), LODWORD(v55));
  if (a5 == 1)
  {
    *((float *)&v79 + 2) = v55 + -1.0;
    *((float *)&v79 + 3) = v56 + -1.0;
    *(float *)&v79 = v53 + 0.5;
    *((float *)&v79 + 1) = v54 + 0.5;
    *(_QWORD *)&v57 = 0x4000000040000000;
    *((_QWORD *)&v57 + 1) = 0x4000000040000000;
    v76 = v79;
    v77 = v57;
    v78 = v57;
    (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v13 + 264))(v13, &v76, a4, 1);
  }
  else
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v13 + 224))(v13, &v79, a4);
  }
  if (v84 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E343A050[v84])(&v76, v83);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(v13, 1);
}

WTF::StringImpl *WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paintForeground(WTF::StringImpl *result, char *a2)
{
  char *v2;
  float32x4_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *LineStyle;
  WebCore::FontCascade *v7;
  const WTF::AtomString *v8;
  const WTF::AtomString *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  const WebCore::RenderCombineText *v13;
  int v14;
  float v15;
  _BOOL4 v16;
  float v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  __int32 v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int v27;
  void *v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  WTF *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  __n128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  int v57;
  WTF::StringImpl *v58[2];
  _BYTE v59[28];
  BOOL v60;
  unsigned int v61;
  __int16 v62;
  char v63;
  unsigned int v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  __int16 v70;
  char v71;
  unsigned int v72;
  __int16 v73;
  char v74;
  char v75;

  if (*((_DWORD *)a2 + 1) < *((_DWORD *)a2 + 2))
  {
    v2 = a2;
    v3 = (float32x4_t *)result;
    v4 = *(_QWORD *)(*((_QWORD *)result + 11) + 80);
    if (*((_BYTE *)result + 145))
    {
      v5 = *((_QWORD *)result + 1);
      if (*(_BYTE *)(v5 + 46) != 3)
      {
        a2 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Deve"
             "loper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
        __break(0xC471u);
        goto LABEL_83;
      }
      LineStyle = *(char **)(v5 + 120);
    }
    else
    {
      v5 = *(_QWORD *)(*(_QWORD *)result + 32);
      if ((*(_WORD *)(*(_QWORD *)result + 52) & 1) != 0)
        goto LABEL_84;
      if (v5)
        v5 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(v5 + 45) & 2) != 0)
      {
        v5 = *(_QWORD *)(v5 + 32);
        if (v5)
          v5 = *(_QWORD *)(v5 + 8);
      }
      LineStyle = (char *)(v5 + 80);
    }
    while (1)
    {
      v7 = (WebCore::FontCascade *)(*((_QWORD *)LineStyle + 4) + 32);
      if (v3[9].i8[7])
      {
        WebCore::RenderStyle::textEmphasisMarkString((WebCore::RenderStyle *)v3[1].i64[1]);
        v9 = v8;
      }
      else
      {
        v9 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      }
      v10 = 0.0;
      if (!*(_QWORD *)v9 || !*(_DWORD *)(*(_QWORD *)v9 + 4))
        break;
      v5 = v3[9].u8[7];
      if (v3[9].i8[7])
      {
        v25 = v3[9].u8[6];
        v26 = WebCore::FontCascade::metricsOfPrimaryFont(v7, a2);
        if (v25)
        {
          v27 = *(_DWORD *)(v26 + 44);
          WebCore::FontCascade::getEmphasisMarkGlyphData((unsigned __int16 *)v7, v9, (uint64_t)&v52);
          if ((_BYTE)v53 && (v29 = (WTF *)v52.n128_u64[1]) != 0)
          {
            v30 = *(_QWORD *)(v52.n128_u64[1] + 8);
            if (v30)
            {
              v31 = (*(_DWORD *)v30)++;
              v32 = *(_DWORD *)(v30 + 64);
              if (v31)
              {
                *(_DWORD *)v30 = v31;
              }
              else
              {
                WebCore::Font::~Font((WTF **)v30);
                WTF::fastFree(v40, v41);
              }
            }
            else
            {
              v32 = 0;
            }
            if (*(_DWORD *)v29 == 1)
              WTF::fastFree(v29, v28);
            else
              --*(_DWORD *)v29;
          }
          else
          {
            v32 = 0;
          }
          v39 = -v32 - v27;
        }
        else
        {
          v33 = *(_DWORD *)(v26 + 48);
          WebCore::FontCascade::getEmphasisMarkGlyphData((unsigned __int16 *)v7, v9, (uint64_t)&v52);
          if ((_BYTE)v53 && (v35 = (WTF *)v52.n128_u64[1]) != 0)
          {
            v36 = *(_QWORD *)(v52.n128_u64[1] + 8);
            if (v36)
            {
              v37 = (*(_DWORD *)v36)++;
              v38 = *(_DWORD *)(v36 + 60);
              if (v37)
              {
                *(_DWORD *)v36 = v37;
              }
              else
              {
                WebCore::Font::~Font((WTF **)v36);
                WTF::fastFree(v42, v43);
              }
            }
            else
            {
              v38 = 0;
            }
            if (*(_DWORD *)v35 == 1)
              WTF::fastFree(v35, v34);
            else
              --*(_DWORD *)v35;
          }
          else
          {
            v38 = 0;
          }
          v39 = v38 + v33;
        }
        v10 = (float)v39;
        break;
      }
LABEL_83:
      __break(1u);
LABEL_84:
      v44 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(v44 + 45) & 2) != 0)
      {
        v45 = *(_QWORD *)(v44 + 32);
        if (v45)
          v44 = *(_QWORD *)(v45 + 8);
        else
          v44 = 0;
      }
      LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v44, (WTF::StringImpl *)a2);
    }
    v11 = v3[1].i64[1];
    v52.n128_u64[0] = v4;
    v52.n128_u64[1] = (unint64_t)v7;
    v53 = v11;
    v54 = 0u;
    v55 = 0u;
    v56 = 0;
    v57 = 1082130432;
    *(_OWORD *)v58 = 0u;
    memset(v59, 0, sizeof(v59));
    v60 = 1;
    WebCore::TextPainter::setStyle(&v52, (uint64_t)(v2 + 48));
    v60 = (*(_WORD *)(v3->i64[0] + 52) & 0x800) != 0;
    if (v2[208])
    {
      v58[1] = (WTF::StringImpl *)(v2 + 144);
      v12 = *(_QWORD *)(*(_QWORD *)(v3[1].i64[1] + 24) + 320);
      if (*(_DWORD *)(v12 + 20))
        *(_QWORD *)v59 = v12 + 8;
    }
    if (v3[9].i8[1])
    {
      v13 = (const WebCore::RenderCombineText *)v3->i64[1];
      if (*((_BYTE *)v13 + 46) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19648C724);
      }
    }
    else
    {
      v13 = 0;
    }
    WebCore::TextPainter::setEmphasisMark((WebCore::TextPainter *)&v52, *(const WTF::AtomString **)v9, v10, v13);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3->i64[1] + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 680) & 0x4000000000000) != 0)
    {
      if ((byte_1ECE84260 & 1) == 0)
      {
        v62 = 4;
        v63 = 0;
        v61 = 0;
        v65 = 4;
        v66 = 0;
        v64 = 0;
        v73 = 4;
        v74 = 0;
        v72 = 10;
        v70 = 4;
        v71 = 0;
        v69 = 20;
        v67 = 0x11040000960000BELL;
        v68 = 0;
        WebCore::ShadowData::ShadowData((uint64_t)&unk_1ECE84298, (uint64_t)&v61, (uint64_t)&v72, (uint64_t)&v69, 0, 1, (uint64_t)&v67);
        if (v68 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v68])(&v75, &v67);
        if (v70 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v69);
        }
        if (v73 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v72);
        }
        if (v65 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v64);
        }
        if (v62 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v61);
        }
        byte_1ECE84260 = 1;
      }
      v58[1] = (WTF::StringImpl *)&unk_1ECE84298;
    }
    v14 = v2[12] & 0xFE;
    v15 = *((float *)v2 + 18);
    v16 = v15 > 0.0 || v14 == 12;
    if (v15 > 0.0 || v14 == 12)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, 1);
      if (v14 == 12)
      {
        v17 = *((float *)v2 + 54);
        if (*(float *)(v4 + 336) != v17)
        {
          *(float *)(v4 + 336) = v17;
          *(_DWORD *)(v4 + 184) |= 0x100u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
      }
    }
    WebCore::updateGraphicsContext(v4, (uint64_t)(v2 + 48), 0);
    v18 = (unsigned __int16 *)v3->i64[0];
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3->i64[0] + 80))(v3->i64[0]) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648CAC8);
    }
    v19 = v3[5].i64[1];
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 80) + 40))(*(_QWORD *)(v19 + 80)) & 1) != 0
      || !*(_QWORD *)(v19 + 64))
    {
      if ((v18[26] & 0x4000) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v67 = (uint64_t)v18;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v67);
        v21 = v18[26];
        v20 = v18 + 26;
        v22 = *((unsigned __int8 *)v20 + 2);
        *v20 = v21 & 0xBFFF;
        *((_BYTE *)v20 + 2) = (v21 & 0xFFFFBFFF | (v22 << 16)) >> 16;
      }
    }
    else
    {
      {
        WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
        qword_1EE2F92D8 = 0;
        qword_1EE2F92E0 = 0;
      }
      *(_QWORD *)&v59[16] = WebCore::GlyphDisplayListCache::getDisplayList<WebCore::LegacyInlineTextBox>((WTF::MemoryPressureHandler *)&WebCore::GlyphDisplayListCache::singleton(void)::cache, (WTF *)v18, v52.n128_i64[1], v52.n128_u64[0], (WTF *)&v3[3], v19);
    }
    LODWORD(v67) = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::textOriginFromPaintRect((uint64_t)v3, v3[8].f32);
    HIDWORD(v67) = v23;
    WebCore::TextPainter::paintTextAndEmphasisMarksIfNeeded((float *)&v52, (int *)&v3[3], v3 + 8, (float32x2_t *)&v67, *((unsigned int *)v2 + 1), *((_DWORD *)v2 + 2), (uint64_t)&v54, v58[1], *(const WebCore::FilterOperations **)v59);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, 1);
    result = v58[0];
    v58[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
    if ((v55 & 0x8000000000000) != 0)
    {
      result = (WTF::StringImpl *)(v55 & 0xFFFFFFFFFFFFLL);
      do
      {
        v46 = __ldaxr((unsigned int *)result);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, (unsigned int *)result));
      if (!v47)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WTF::StringImpl *)WTF::fastFree(result, v24);
      }
    }
    if ((*((_QWORD *)&v54 + 1) & 0x8000000000000) != 0)
    {
      result = (WTF::StringImpl *)(*((_QWORD *)&v54 + 1) & 0xFFFFFFFFFFFFLL);
      do
      {
        v48 = __ldaxr((unsigned int *)result);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, (unsigned int *)result));
      if (!v49)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WTF::StringImpl *)WTF::fastFree(result, v24);
      }
    }
    if ((v54 & 0x8000000000000) != 0)
    {
      result = (WTF::StringImpl *)(v54 & 0xFFFFFFFFFFFFLL);
      do
      {
        v50 = __ldaxr((unsigned int *)result);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, (unsigned int *)result));
      if (!v51)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF::StringImpl *)WTF::fastFree(result, v24);
      }
    }
  }
  return result;
}

float WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::textOriginFromPaintRect(uint64_t a1, float *a2)
{
  float v4;
  uint64_t v5;
  char *LineStyle;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 145))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v5 + 46) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D094);
    }
    LineStyle = *(char **)(v5 + 120);
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((*(_WORD *)(*(_QWORD *)a1 + 52) & 1) != 0)
    {
      v29 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v29 + 45) & 2) != 0)
      {
        v30 = *(_QWORD *)(v29 + 32);
        if (v30)
          v29 = *(_QWORD *)(v30 + 8);
        else
          v29 = 0;
      }
      LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v29, (WTF::StringImpl *)a2);
    }
    else
    {
      if (v7)
        v7 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 45) & 2) != 0)
      {
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          v7 = *(_QWORD *)(v7 + 8);
      }
      LineStyle = (char *)(v7 + 80);
    }
  }
  WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)LineStyle + 4) + 32), a2);
  if (*(_BYTE *)(a1 + 145))
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v8 + 46) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D0B4);
    }
    if ((*(_BYTE *)(v8 + 140) & 1) != 0)
      v4 = (float)(*a2 + (float)((float)(a2[3] - *(float *)(v8 + 128)) * 0.5)) + 0.0;
  }
  if ((*(_WORD *)(*(_QWORD *)a1 + 52) & 0x800) != 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8)
                    + 528);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 24);
        if (v21)
        {
          v22 = *(_DWORD **)(v21 + 8);
          if (v22)
          {
            v23 = (*v22)++;
            if (v23)
            {
              *v22 = v23;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v22);
              WTF::fastFree(v27, v28);
            }
          }
        }
      }
    }
  }
  else
  {
    v9 = v4 * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFF;
    }
    else if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v9;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8)
                    + 528);
    v12 = 1.0;
    if (v11)
    {
      v13 = *(_QWORD *)(v11 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = (*(_DWORD *)v15)++;
            v12 = *(float *)(v15 + 364);
            if (v16)
            {
              *(_DWORD *)v15 = v16;
            }
            else
            {
              WebCore::Page::~Page(v15);
              WTF::fastFree(v25, v26);
            }
          }
        }
      }
    }
    v17 = (double)v10 * 0.015625;
    if (v17 < 0.0)
      return round((v17 + (double)-v10) * v12) / v12 - (double)-v10;
    else
      return round(v17 * v12) / v12;
  }
  return v4;
}

void WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::textPosition(uint64_t a1)
{
  uint64_t *v1;
  unsigned int *v2;
  int v3;
  _QWORD v4[2];
  int v5;
  uint64_t v6[2];
  int v7;
  char v8;
  char *v9;

  if (*(float *)(a1 + 32) != 0.0)
  {
    v4[0] = *(_QWORD *)a1;
    v5 = 1;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[0] + 80))(v4[0]) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D200);
    }
    WebCore::InlineIterator::Box::lineBox(v6, (WebCore::InlineIterator::Box *)v4);
    if (v7 == -1)
    {
      v1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      _ZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxLegacyPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_(v1, v2, v3);
    }
    else
    {
      v9 = &v8;
      ((void (*)(char **, uint64_t *))off_1E343A0A0[v7])(&v9, v6);
      if (v7 != -1)
        ((void (*)(char **, uint64_t *))off_1E343A050[v7])(&v9, v6);
      v7 = -1;
      if (v5 != -1)
        ((void (*)(char **, _QWORD *))off_1E343A000[v5])(&v9, v4);
    }
  }
}

uint64_t _ZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxLegacyPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_(uint64_t *a1, unsigned int *a2, int a3)
{
  unsigned int *LineStyle;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderElement *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::RenderStyle *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  void *v44;
  float v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int *v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78[2];
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  char v89;
  char *v90;

  v8 = *a1;
  if (*(_BYTE *)(*a1 + 144))
  {
    v9 = a2[4];
    if ((_DWORD)v9 == -1)
      goto LABEL_88;
    v78[0] = (unint64_t)&v90;
    if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v9])(v78, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D7DCLL);
    }
    v10 = a2[4];
    if ((_DWORD)v10 == -1)
      goto LABEL_88;
    v78[0] = (unint64_t)&v90;
    v11 = (WebCore::RenderElement *)((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0E0[v10])(v78, a2);
    if ((*((_BYTE *)v11 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D7FCLL);
    }
    LineStyle = (unsigned int *)WebCore::RenderElement::firstLineStyle(v11, v12);
  }
  else
  {
    v13 = a2[4];
    if ((_DWORD)v13 == -1)
      goto LABEL_88;
    v78[0] = (unint64_t)&v90;
    if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v13])(v78, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D85CLL);
    }
    v14 = a2[4];
    if ((_DWORD)v14 == -1)
      goto LABEL_88;
    v78[0] = (unint64_t)&v90;
    v15 = ((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0E0[v14])(v78, a2);
    if ((*(_BYTE *)(v15 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D87CLL);
    }
    LineStyle = (unsigned int *)(v15 + 80);
  }
  v16 = a2[4];
  if ((_DWORD)v16 == -1)
    goto LABEL_88;
  v78[0] = (unint64_t)&v90;
  if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v16])(v78, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648D7BCLL);
  }
  result = WebCore::isDecoratingBoxForBackground((WebCore *)a2, (const WebCore::InlineIterator::InlineBox *)LineStyle, v17);
  if ((result & 1) != 0)
    goto LABEL_15;
  if (a3)
  {
    v22 = a2[4];
    if ((_DWORD)v22 == -1)
      goto LABEL_88;
    v23 = (unint64_t *)a1[1];
    v78[0] = (unint64_t)&v90;
    if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v22])(v78, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D91CLL);
    }
    v24 = a2[4];
    if ((_DWORD)v24 == -1)
      goto LABEL_88;
    v78[0] = (unint64_t)&v90;
    v25 = ((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0E0[v24])(v78, a2);
    if ((*(_BYTE *)(v25 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648D93CLL);
    }
    WebCore::TextDecorationPainter::stylesForRenderer((uint64_t)v78, v25, ((unint64_t)LineStyle[10] >> 15) & 0xF, *(unsigned __int8 *)(v8 + 144));
    result = WebCore::TextDecorationPainter::Styles::operator==(v23, v78);
    v27 = result;
    if ((v81 & 0x8000000000000) != 0)
    {
      result = v81 & 0xFFFFFFFFFFFFLL;
      do
      {
        v72 = __ldaxr((unsigned int *)result);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, (unsigned int *)result));
      if (!v73)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v26);
      }
    }
    if ((v79 & 0x8000000000000) != 0)
    {
      result = v79 & 0xFFFFFFFFFFFFLL;
      do
      {
        v74 = __ldaxr((unsigned int *)result);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, (unsigned int *)result));
      if (!v75)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v26);
      }
    }
    if ((v78[0] & 0x8000000000000) != 0)
    {
      result = v78[0] & 0xFFFFFFFFFFFFLL;
      do
      {
        v76 = __ldaxr((unsigned int *)result);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, (unsigned int *)result));
      if (!v77)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v26);
      }
    }
    if ((v27 & 1) == 0)
    {
LABEL_15:
      v19 = a2[4];
      if ((_DWORD)v19 == -1)
        goto LABEL_88;
      v78[0] = (unint64_t)&v90;
      if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v19])(v78, a2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19648D81CLL);
      }
      v20 = a2[4];
      if ((_DWORD)v20 == -1)
        goto LABEL_88;
      v78[0] = (unint64_t)&v90;
      if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0B0[v20])(v78, a2) & 1) != 0)
      {
        v21 = 0;
      }
      else
      {
        v28 = a2[4];
        if ((_DWORD)v28 == -1)
          goto LABEL_88;
        v78[0] = (unint64_t)&v90;
        if ((((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A060[v28])(v78, a2) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19648D89CLL);
        }
        v29 = a2[4];
        if ((_DWORD)v29 == -1)
          goto LABEL_88;
        v78[0] = (unint64_t)&v90;
        v30 = (_BYTE *)((uint64_t (*)(unint64_t *, unsigned int *))off_1E343A0E0[v29])(v78, a2);
        if ((v30[45] & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19648D8DCLL);
        }
        v31 = v30;
        LODWORD(v4) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v30 + 1048))(v30);
        v32 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v31 + 960))(v31);
        v21 = v4 + v32;
        if (__OFADD__((_DWORD)v4, v32))
          goto LABEL_89;
      }
      while (1)
      {
        v33 = a1[2];
        LOBYTE(v78[0]) = 0;
        LODWORD(v79) = -1;
        v4 = a2[4];
        if ((_DWORD)v4 != -1)
        {
          ((void (*)(char **, unint64_t *, unsigned int *))off_1E343A0D0[v4])(&v90, v78, a2);
          LODWORD(v79) = v4;
        }
        v80 = LineStyle;
        if (a3)
        {
          v34 = (uint64_t *)a1[1];
          v35 = *v34;
          v81 = v35;
          if ((v35 & 0x8000000000000) != 0)
          {
            v60 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 + 1, v60));
          }
          v82 = *((_BYTE *)v34 + 8);
          v36 = v34[2];
          v83 = v36;
          if ((v36 & 0x8000000000000) != 0)
          {
            v62 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 + 1, v62));
          }
          v84 = *((_BYTE *)v34 + 24);
          v37 = v34[4];
          v85 = v37;
          if ((v37 & 0x8000000000000) != 0)
          {
            v64 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 + 1, v64));
          }
          v86 = *((_BYTE *)v34 + 40);
          v87 = *((_BYTE *)v34 + 48);
        }
        else
        {
          v38 = a2[4];
          if ((_DWORD)v38 == -1)
            goto LABEL_88;
          v90 = &v89;
          if ((((uint64_t (*)(char **, unsigned int *))off_1E343A060[v38])(&v90, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19648D8BCLL);
          }
          v39 = a2[4];
          if ((_DWORD)v39 == -1)
            goto LABEL_88;
          v90 = &v89;
          v40 = ((uint64_t (*)(char **, unsigned int *))off_1E343A0E0[v39])(&v90, a2);
          if ((*(_BYTE *)(v40 + 45) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19648D8FCLL);
          }
          WebCore::TextDecorationPainter::stylesForRenderer((uint64_t)&v81, v40, ((unint64_t)LineStyle[10] >> 15) & 0xF, *(unsigned __int8 *)(v8 + 144));
        }
        v41 = a2[4];
        if ((_DWORD)v41 != -1)
        {
          v42 = *(_DWORD *)a1[3];
          v43 = *(_DWORD *)(v8 + 124);
          v90 = &v89;
          if ((((uint64_t (*)(char **, unsigned int *))off_1E343A060[v41])(&v90, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19648D83CLL);
          }
          result = WebCore::InlineIterator::Box::logicalTop((WebCore::InlineIterator::Box *)a2);
          LODWORD(v88) = v42;
          *((float *)&v88 + 1) = (float)((float)v21 * 0.015625) + (float)((float)((float)v43 * 0.015625) + v45);
          v46 = *(_DWORD *)(v33 + 12);
          if (v46 == *(_DWORD *)(v33 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox>(v33, (unint64_t)v78);
          }
          else
          {
            v47 = *(_QWORD *)v33;
            v48 = *(_QWORD *)v33 + 96 * v46;
            *(_BYTE *)v48 = 0;
            *(_DWORD *)(v48 + 16) = -1;
            v49 = v79;
            if ((_DWORD)v79 != -1)
            {
              result = ((uint64_t (*)(char **, uint64_t, unint64_t *))off_1E343A158[v79])(&v90, v48, v78);
              *(_DWORD *)(v48 + 16) = v49;
            }
            v50 = v47 + 96 * v46;
            v51 = v80;
            *(_QWORD *)(v50 + 32) = 0;
            v52 = (_QWORD *)(v50 + 32);
            *(v52 - 1) = v51;
            if (v81)
            {
              *v52 = v81;
              v81 = 0;
            }
            v53 = v47 + 96 * v46;
            v54 = v82;
            *(_QWORD *)(v53 + 48) = 0;
            v55 = (_QWORD *)(v53 + 48);
            *((_BYTE *)v55 - 8) = v54;
            if (v83)
            {
              *v55 = v83;
              v83 = 0;
            }
            v56 = v47 + 96 * v46;
            v57 = v84;
            *(_QWORD *)(v56 + 64) = 0;
            v58 = (_QWORD *)(v56 + 64);
            *((_BYTE *)v58 - 8) = v57;
            if (v85)
            {
              *v58 = v85;
              v85 = 0;
            }
            v59 = v47 + 96 * v46;
            *(_BYTE *)(v59 + 72) = v86;
            *(_BYTE *)(v59 + 80) = v87;
            *(_QWORD *)(v59 + 88) = v88;
            ++*(_DWORD *)(v33 + 12);
          }
          if ((v85 & 0x8000000000000) != 0)
          {
            result = v85 & 0xFFFFFFFFFFFFLL;
            do
            {
              v66 = __ldaxr((unsigned int *)result);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, (unsigned int *)result));
            if (!v67)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v44);
            }
          }
          if ((v83 & 0x8000000000000) != 0)
          {
            result = v83 & 0xFFFFFFFFFFFFLL;
            do
            {
              v68 = __ldaxr((unsigned int *)result);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, (unsigned int *)result));
            if (!v69)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v44);
            }
          }
          if ((v81 & 0x8000000000000) != 0)
          {
            result = v81 & 0xFFFFFFFFFFFFLL;
            do
            {
              v70 = __ldaxr((unsigned int *)result);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, (unsigned int *)result));
            if (!v71)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v44);
            }
          }
          if ((_DWORD)v79 != -1)
            return ((uint64_t (*)(char **, unint64_t *))off_1E343A000[v79])(&v90, v78);
          return result;
        }
LABEL_88:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_89:
        v21 = (v4 >> 31) + 0x7FFFFFFF;
      }
    }
  }
  return result;
}

WebCore::LegacyInlineBox **WebCore::LegacyTextBoxPainter::LegacyTextBoxPainter(WebCore::LegacyInlineBox **this, const WebCore::LegacyInlineTextBox *a2, WebCore::PaintInfo *a3, const WebCore::LayoutPoint *a4)
{
  const WebCore::LegacyInlineTextBox *v5;

  v5 = a2;
  return WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::TextBoxPainter(this, (WTF::StringImpl *)&v5, a3, (int *)a4);
}

WebCore::ModernTextBoxPainter *WebCore::ModernTextBoxPainter::ModernTextBoxPainter(WebCore::ModernTextBoxPainter *this, const WebCore::LayoutIntegration::InlineContent *a2, const WebCore::InlineDisplay::Box *a3, WebCore::PaintInfo *a4, const WebCore::LayoutPoint *a5)
{
  unint64_t v5;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::Layout::Box *v17;
  uint64_t LineStyle;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::Layout::Box *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int *v27;
  int *v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  WebCore::Layout::Box *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  float v53;
  uint64_t v54;
  float *v55;
  float v56;
  unint64_t v57;
  float v58;
  char v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  float v62;
  int v63;
  char *v64;
  char v65;
  unsigned int v66;
  int v67;
  BOOL v68;
  BOOL v69;
  BOOL v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  int v80;
  char v81;
  float v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float *v88;
  float v89;
  float v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  __int16 v107;
  int v109;
  BOOL v110;
  void *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  float v117;
  float v118;
  uint64_t v119;
  WebCore::Layout::Box *v120;
  WebCore::RenderStyle *v121;
  int v122;
  uint64_t v123;
  int v124;
  WebCore::RenderBlockFlow *v125;
  _BOOL4 hasLines;
  uint64_t v127;
  WebCore *v128;
  uint64_t v129;
  uint64_t v130;
  WebCore::RenderObject *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v144;
  BOOL v145;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  float v153;
  float v154;
  uint64_t v155;
  float v156;
  float v157;
  unsigned int v158;
  BOOL v159;
  WTF::StringImpl *v160;
  WTF *v161;
  int v162;

  v5 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a3 - *((_QWORD *)a2 + 6)) >> 4);
  if (v5 >= *((unsigned int *)a2 + 15))
    goto LABEL_234;
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    goto LABEL_256;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a2;
  v112 = *(unsigned int **)a2;
  *(_QWORD *)a2 = v10;
  if (!v112)
    goto LABEL_256;
  do
  {
    v113 = __ldaxr(v112);
    v114 = v113 - 1;
  }
  while (__stlxr(v114, v112));
  if (!v114)
  {
    atomic_store(1u, v112);
    WTF::fastFree((WTF *)v112, v111);
  }
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
LABEL_256:
    do
      v11 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v11 + 1, (unsigned int *)v10));
  }
  *(_QWORD *)this = v10;
  *((_QWORD *)this + 1) = v5;
  v12 = *(_QWORD *)(v10 + 8);
  if (v5 >= *(unsigned int *)(v12 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x19648E600);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 80 * v5) + 112);
  if ((*(_BYTE *)(v13 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E194);
  }
  *((_QWORD *)this + 2) = v13;
  *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8);
  v14 = *(_QWORD *)(v10 + 8);
  if (v5 >= *(unsigned int *)(v14 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x19648E608);
  }
  v15 = *(_QWORD *)(v14 + 48) + 80 * v5;
  v16 = *(_DWORD *)(v15 + 40);
  v17 = *(WebCore::Layout::Box **)v15;
  if (v16)
  {
    LineStyle = (uint64_t)v17 + 16;
  }
  else
  {
    LineStyle = WebCore::Layout::Box::firstLineStyle(v17);
    v10 = *(_QWORD *)this;
    v5 = *((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 4) = LineStyle;
  v19 = *(_QWORD *)(v10 + 8);
  v20 = *(unsigned int *)(v19 + 60);
  if (v5 >= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E610);
  }
  v21 = *(_QWORD *)(v19 + 48) + 80 * v5;
  v22 = *(_DWORD *)(v21 + 40);
  v23 = *(WebCore::Layout::Box **)v21;
  if (v22)
  {
    v24 = (uint64_t)v23 + 16;
  }
  else
  {
    v24 = WebCore::Layout::Box::firstLineStyle(v23);
    v10 = *(_QWORD *)this;
    v5 = *((_QWORD *)this + 1);
    v19 = *(_QWORD *)(*(_QWORD *)this + 8);
    v20 = *(unsigned int *)(v19 + 60);
  }
  if (((*(_DWORD *)(v24 + 44) >> 13) & 6u) - 2 < 4)
  {
    if (v5 < v20)
    {
      v152 = *(_QWORD *)(v19 + 48) + 80 * v5;
      v27 = (int *)(v152 + 8);
      v26 = (_DWORD *)(v152 + 12);
      v29 = (int *)(v152 + 16);
      v28 = (int *)(v152 + 20);
      goto LABEL_15;
    }
LABEL_234:
    __break(0xC471u);
    JUMPOUT(0x19648E174);
  }
  if (v5 >= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E628);
  }
  v25 = *(_QWORD *)(v19 + 48) + 80 * v5;
  v26 = (_DWORD *)(v25 + 8);
  v27 = (int *)(v25 + 12);
  v28 = (int *)(v25 + 16);
  v29 = (int *)(v25 + 20);
LABEL_15:
  v30 = *v29;
  v31 = *v28;
  v32 = *v27;
  *((_DWORD *)this + 10) = *v26;
  *((_DWORD *)this + 11) = v32;
  *((_DWORD *)this + 12) = v31;
  *((_DWORD *)this + 13) = v30;
  v33 = *(_QWORD *)(v10 + 8);
  v34 = *(unsigned int *)(v33 + 60);
  if (v5 >= v34)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E618);
  }
  v35 = *(_QWORD *)(v33 + 48) + 80 * v5;
  v36 = *(WebCore::Layout::Box **)v35;
  if (*(_DWORD *)(v35 + 40))
  {
    v37 = (uint64_t)v36 + 16;
  }
  else
  {
    v37 = WebCore::Layout::Box::firstLineStyle(v36);
    v5 = *((_QWORD *)this + 1);
    v33 = *(_QWORD *)(*(_QWORD *)this + 8);
    v34 = *(unsigned int *)(v33 + 60);
  }
  if (v5 >= v34)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E620);
  }
  v38 = *(_QWORD *)(v33 + 48);
  v39 = v38 + 80 * v5;
  v40 = *(_BYTE *)(v39 + 48);
  v41 = *(_DWORD *)(v39 + 44);
  v42 = *(_WORD *)(v39 + 50);
  if ((v42 & 0xE) == 0 || (v42 & 0xF) == 3)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v39 + 112);
    if ((*(_BYTE *)(v43 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648E1B4);
    }
    v44 = ~(*(unsigned __int16 *)(v43 + 118) >> 5) & 8;
  }
  else
  {
    LOBYTE(v44) = 0;
  }
  v45 = *(_QWORD *)(v38 + 80 * v5 + 60);
  if (v45)
  {
    LODWORD(v46) = *(_DWORD *)(v45 + 4);
    v47 = ((unint64_t)*(unsigned int *)(v45 + 16) >> 2) & 1;
  }
  else
  {
    WebCore::InlineDisplay::Box::Text::originalContent((WebCore::InlineDisplay::Box::Text *)(v38 + 80 * v5 + 52));
    v47 = HIDWORD(v46);
  }
  if ((*(_BYTE *)(v37 + 43) & 4) != 0)
  {
    v115 = v46;
    v116 = WebCore::InlineIterator::BoxModernPath::line(this);
    v53 = *(float *)(v116 + 16) + *(float *)(v116 + 24);
    WebCore::InlineIterator::BoxModernPath::visualRectIgnoringBlockDirection(this);
    v56 = v117 + v118;
    v119 = WebCore::InlineIterator::BoxModernPath::line(this);
    LODWORD(v46) = v115;
    v55 = (float *)(v119 + 108);
    v48 = *((_QWORD *)this + 1);
    v49 = *(_QWORD *)(*(_QWORD *)this + 8);
    v50 = *(unsigned int *)(v49 + 60);
  }
  else
  {
    v48 = *((_QWORD *)this + 1);
    v49 = *(_QWORD *)(*(_QWORD *)this + 8);
    v50 = *(unsigned int *)(v49 + 60);
    if (v48 >= v50)
    {
      __break(0xC471u);
      JUMPOUT(0x19648E6C4);
    }
    v51 = *(_QWORD *)(v49 + 48);
    v52 = *(_DWORD *)(v51 + 80 * v48 + 40);
    if (*(_DWORD *)(v49 + 44) <= v52)
    {
      __break(0xC471u);
      JUMPOUT(0x19648E6CCLL);
    }
    v53 = *(float *)(v51 + 80 * v48 + 8);
    v54 = *(_QWORD *)(v49 + 32) + 152 * v52;
    v55 = (float *)(v54 + 16);
    v56 = *(float *)(v54 + 108);
  }
  if (v48 >= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E630);
  }
  v57 = (unint64_t)v47 << 32;
  v46 = v46;
  v58 = v56 + *v55;
  v59 = *(_BYTE *)(*(_QWORD *)(v49 + 48) + 80 * v48 + 49);
  v60 = *(_DWORD *)(v37 + 44);
  if (v57)
  {
    if ((_DWORD)v46)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_32:
      v61 = v160;
      goto LABEL_33;
    }
  }
  else if ((_DWORD)v46)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_32;
  }
  v61 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_33:
  v62 = v53 - v58;
  *((_DWORD *)this + 14) = 0;
  if (v61)
  {
    v63 = *(_DWORD *)v61;
    *(_DWORD *)v61 += 2;
    *((_DWORD *)this + 18) = 0;
    v64 = (char *)this + 72;
    *((_QWORD *)this + 8) = v61;
    *((_BYTE *)this + 76) = 1;
    *((float *)this + 20) = v62;
    *((_DWORD *)this + 21) = 1065353216;
    *((_DWORD *)this + 22) = v41;
    *((_BYTE *)this + 92) = v40;
    v65 = *((_BYTE *)this + 93);
    if (v63)
      *(_DWORD *)v61 = v63;
    else
      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v46);
    v66 = *(_DWORD *)(v37 + 40);
    v67 = (v66 >> 27) & 7;
    v68 = (v66 & 0x40000000) == 0;
    if ((v66 & 0x40000000) != 0 || v67 != 3)
    {
      if (v67)
        v69 = 0;
      else
        v69 = (v66 & 0x40000000) == 0;
      if (v69)
      {
LABEL_42:
        v67 = 0;
        goto LABEL_43;
      }
      if ((v66 & 0x40000000) != 0 && !v67)
        goto LABEL_84;
      if ((v66 & 0x40000000) != 0 && v67 == 1)
        goto LABEL_43;
      v109 = (v66 >> 30) & 1;
      if (v67 != 2)
        LOBYTE(v109) = 1;
      v110 = v67 == 1 && v68;
      if ((v109 & 1) != 0 && v110)
      {
        v67 = 2;
        goto LABEL_43;
      }
      if ((v109 & 1) != 0)
      {
LABEL_226:
        if (v67 == 1 && v68)
          v67 = 2;
        else
          v67 = 0;
        goto LABEL_43;
      }
      goto LABEL_217;
    }
  }
  else
  {
    *((_DWORD *)this + 18) = 0;
    v64 = (char *)this + 72;
    *((_QWORD *)this + 8) = 0;
    *((_BYTE *)this + 76) = 1;
    *((float *)this + 20) = v62;
    *((_DWORD *)this + 21) = 1065353216;
    *((_DWORD *)this + 22) = v41;
    *((_BYTE *)this + 92) = v40;
    v65 = *((_BYTE *)this + 93);
    v158 = *(_DWORD *)(v37 + 40);
    v67 = (v158 >> 27) & 7;
    v68 = (v158 & 0x40000000) == 0;
    if ((v158 & 0x40000000) != 0 || v67 != 3)
    {
      if (v67)
        v159 = 0;
      else
        v159 = (v158 & 0x40000000) == 0;
      if (v159)
        goto LABEL_42;
      if ((v158 & 0x40000000) != 0 && !v67)
      {
LABEL_84:
        v67 = 4;
        goto LABEL_43;
      }
      if ((v158 & 0x40000000) != 0 && v67 == 1)
        goto LABEL_43;
      if ((v158 & 0x40000000) != 0 || v67 != 2)
        goto LABEL_226;
LABEL_217:
      v67 = 3;
      goto LABEL_43;
    }
  }
  v67 = 5;
LABEL_43:
  v71 = v67 == 5 || (v67 - 1) < 2;
  v72 = *(_QWORD *)(v37 + 24);
  *((_BYTE *)this + 93) = (2 * (v59 & 1)) | v44 | v65 & 0xE0 | (v60 >> 2) & 4 | v71;
  v73 = *(_DWORD *)(v72 + 336);
  v64[4] = *(_BYTE *)(v72 + 340);
  *(_DWORD *)v64 = v73;
  *((_QWORD *)this + 12) = a4;
  v74 = *((_QWORD *)this + 1);
  v75 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v74 >= *(unsigned int *)(v75 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x19648E6BCLL);
  }
  v76 = *(_QWORD *)(v75 + 48);
  v77 = v76 + 80 * v74;
  *((_QWORD *)this + 13) = *(_QWORD *)(v77 + 68);
  v78 = (_DWORD *)(v77 + 76);
  if ((*(_DWORD *)(v77 + 76) & 0x80000000) != 0)
  {
    v120 = *(WebCore::Layout::Box **)v77;
    if (*(_DWORD *)(v76 + 80 * v74 + 40))
      v121 = (WebCore::Layout::Box *)((char *)v120 + 16);
    else
      v121 = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v120);
    v79 = *WebCore::RenderStyle::hyphenString(v121, (void *)v46);
    if (v79)
      LODWORD(v79) = *(_DWORD *)(v79 + 4);
  }
  else
  {
    if ((*(_WORD *)(*(_QWORD *)v77 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648E1D4);
    }
    if (*(_BYTE *)(*(_QWORD *)v77 + 128))
    {
      WebCore::InlineDisplay::Box::Text::renderedContent((WebCore::InlineDisplay::Box::Text *)(v77 + 52));
      v79 = *((_QWORD *)this + 1);
      v123 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (v79 >= *(unsigned int *)(v123 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x19648E724);
      }
      LODWORD(v79) = v122 - *(_DWORD *)(*(_QWORD *)(v123 + 48) + 80 * v79 + 72);
    }
    else
    {
      LODWORD(v79) = 0;
    }
  }
  *((_DWORD *)this + 28) = v79;
  v80 = (*(_WORD *)(v76 + 80 * v74 + 50) & 0xFu) - 3 < 2;
  *((_BYTE *)this + 116) = v80;
  if ((*v78 & 0x40000000) != 0)
  {
    *((_DWORD *)this + 30) = *v78 & 0x3FFFFFFF;
    v81 = 1;
  }
  else
  {
    v81 = 0;
    *((_BYTE *)this + 120) = 0;
  }
  *((_BYTE *)this + 124) = v81;
  *((_QWORD *)this + 16) = *(_QWORD *)a5;
  v82 = 0.0;
  if (((*(_DWORD *)(*((_QWORD *)this + 4) + 44) >> 13) & 6u) - 2 <= 3)
    v82 = -*((float *)this + 13);
  v84 = *(_QWORD *)this;
  v83 = *((_QWORD *)this + 1);
  v85 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v83 >= *(unsigned int *)(v85 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x19648E6D4);
  }
  v86 = *(_QWORD *)(*(_QWORD *)(v85 + 24) + 16);
  if ((*(_BYTE *)(v86 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19648E1F4);
  }
  v87 = (float)((float)*((int *)a5 + 1) * 0.015625) + v82;
  v88 = (float *)(*(_QWORD *)(v85 + 48) + 80 * v83);
  v90 = v88[2];
  v89 = v88[3];
  v91 = (unsigned __int16)*(_DWORD *)(v86 + 124) >> 13;
  if (v91 <= 5 && ((1 << v91) & 0x2A) != 0)
  {
    v153 = v88[4];
    v154 = v88[5];
    v155 = 160;
    if ((*(_DWORD *)(v86 + 20) & 0x1000) != 0)
    {
      v156 = v90;
    }
    else
    {
      v155 = 164;
      v156 = v89;
    }
    if ((*(_DWORD *)(v86 + 20) & 0x1000) == 0)
      v153 = v154;
    v157 = (float)((float)*(int *)(v86 + v155) * 0.015625) - (float)(v156 + v153);
    if ((*(_DWORD *)(v86 + 20) & 0x1000) != 0)
      v90 = v157;
    else
      v89 = v157;
  }
  *((float *)this + 34) = (float)((float)((float)*(int *)a5 * 0.015625) + 0.0) + v90;
  *((float *)this + 35) = v87 + v89;
  *((_QWORD *)this + 18) = *((_QWORD *)this + 6);
  v92 = *(_QWORD *)(v84 + 8);
  if (v83 >= *(unsigned int *)(v92 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x19648E6DCLL);
  }
  *((_BYTE *)this + 152) = *(_DWORD *)(*(_QWORD *)(v92 + 48) + 80 * v83 + 40) == 0;
  v93 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v93 + 46) == 3)
    v94 = *(_BYTE *)(v93 + 140) & 1;
  else
    v94 = 0;
  *((_BYTE *)this + 153) = v94;
  v95 = *(unsigned __int8 *)(*((_QWORD *)this + 3) + 3382);
  *((_BYTE *)this + 154) = v95;
  if (v95 || *(_WORD *)(*((_QWORD *)this + 12) + 16) == 512)
  {
    v99 = 0;
    goto LABEL_72;
  }
  v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v93 + 24) + 8) + 40) + 8) + 1944);
  if (*(_BYTE *)(v96 + 312))
  {
    v97 = (*(_DWORD *)(v93 + 20) >> 25) & 7;
  }
  else
  {
    v127 = *(_QWORD *)(v96 + 288);
    if (v127 && *(_QWORD *)(v127 + 8) == v93)
    {
      v149 = *(_QWORD *)(v96 + 296);
      if (v149 && (v150 = *(_QWORD *)(v149 + 8)) != 0 && v150 == v93)
        v97 = 4;
      else
        v97 = 1;
LABEL_150:
      v138 = *(_DWORD *)(v96 + 304);
      v139 = *(_DWORD *)(v96 + 308);
      v140 = *((_DWORD *)this + 26);
      v141 = *((_DWORD *)this + 27) + v140;
      v142 = v141 - v80;
      v144 = v97 != 3 && v138 >= v140;
      v145 = v138 < v141 && v144;
      v148 = v97 != 1 && v139 > v140 && v139 <= v142;
      v98 = 2;
      if (!v145 && !v148 && (v144 || v97 != 1 && v139 <= v142))
        v98 = 0;
      goto LABEL_71;
    }
    v128 = *(WebCore **)(*(_QWORD *)(v96 + 296) + 8);
    if (v128 == (WebCore *)v93)
    {
      v97 = 3;
      goto LABEL_150;
    }
    v129 = WebCore::rendererAfterOffset(v128, (const WebCore::RenderObject *)*(unsigned int *)(v96 + 308));
    v130 = *(_QWORD *)(v96 + 288);
    if (v130)
      v131 = *(WebCore::RenderObject **)(v130 + 8);
    else
      v131 = 0;
    WebCore::RenderRangeIterator::RenderRangeIterator((WebCore::RenderRangeIterator *)&v160, v131);
    v133 = *(_QWORD *)(v96 + 288);
    if (v133)
    {
      v97 = 0;
      v134 = *(_QWORD *)(v133 + 8);
      if (v134)
      {
        while (v134 != v129)
        {
          v135 = *(_QWORD *)(v96 + 288);
          if (v135)
            v135 = *(_QWORD *)(v135 + 8);
          if (v134 != v135)
          {
            v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 512))(v134);
            if (v134 == v93 && (v136 & 1) != 0)
            {
              v97 = 2;
              break;
            }
          }
          v137 = WebCore::RenderRangeIterator::next((WebCore::RenderRangeIterator *)&v160);
          v97 = 0;
          if (!v137)
            break;
          v134 = v137;
        }
      }
    }
    else
    {
      v97 = 0;
    }
    v151 = v161;
    if (v161)
    {
      v161 = 0;
      v162 = 0;
      WTF::fastFree(v151, v132);
    }
  }
  if ((v97 | 2) != 2)
  {
    v80 = *((unsigned __int8 *)this + 116);
    goto LABEL_150;
  }
  v98 = v97;
LABEL_71:
  v99 = v98 != 0;
  v93 = *((_QWORD *)this + 2);
LABEL_72:
  *((_BYTE *)this + 155) = v99;
  if ((*(_BYTE *)(v93 + 45) & 1) != 0 || (v100 = *(_QWORD *)(*(_QWORD *)(v93 + 24) + 8)) == 0)
  {
    v103 = 0;
    *((_BYTE *)this + 156) = 0;
  }
  else
  {
    if ((*(_WORD *)(v100 + 28) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19648E214);
    }
    v101 = *(_QWORD *)(WebCore::Document::editor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 40) + 8)
                                                                                               + 528)
                                                                                   + 8)
                                                                       + 296))
                     + 32);
    v102 = WebCore::RenderText::textNode(*((WebCore::RenderText **)this + 2));
    v93 = *((_QWORD *)this + 2);
    *((_BYTE *)this + 156) = v101 == v102;
    if (v101 == v102)
    {
      v103 = *(_DWORD *)(WebCore::Document::editor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v93 + 24) + 8) + 40) + 8)
                                                                                                 + 528)
                                                                                     + 8)
                                                                         + 296))
                       + 60) != 0;
      v93 = *((_QWORD *)this + 2);
    }
    else
    {
      v103 = 0;
    }
  }
  *((_BYTE *)this + 157) = v103;
  v104 = *((_QWORD *)this + 4);
  v105 = *(_QWORD *)(v104 + 24);
  if ((*(_BYTE *)(v105 + 231) & 0x1C) == 0)
  {
    v106 = 0;
    v107 = 0;
    goto LABEL_79;
  }
  v124 = *(_DWORD *)(v105 + 232);
  if ((v124 & 0xC) != 0)
  {
    if (((*(_DWORD *)(v104 + 44) >> 13) & 6u) - 2 >= 4)
    {
      v106 = v124 & 1;
      goto LABEL_122;
    }
    v106 = (v124 & 0xC) == 8;
LABEL_231:
    if ((v124 & 4) != 0)
      goto LABEL_232;
    goto LABEL_123;
  }
  v106 = v124 & 1;
  if (((*(_DWORD *)(v104 + 44) >> 13) & 6u) - 2 < 4)
    goto LABEL_231;
LABEL_122:
  if ((v124 & 2) != 0)
  {
LABEL_232:
    v107 = 1;
    goto LABEL_79;
  }
LABEL_123:
  v125 = (WebCore::RenderBlockFlow *)WebCore::RenderText::emphasisMarkExistsAndIsAbove(WebCore::RenderText const&,WebCore::RenderStyle const&)::$_0::operator()(*(_QWORD *)(v93 + 32));
  if (!v125)
    goto LABEL_232;
  hasLines = WebCore::RenderBlockFlow::hasLines(v125);
  if (hasLines)
    v106 = 0;
  v107 = !hasLines;
LABEL_79:
  *((_WORD *)this + 79) = v106 | (v107 << 8);
  return this;
}

uint64_t WebCore::LegacyTextBoxPainter::calculateUnionOfAllDocumentMarkerBounds(WebCore::LegacyTextBoxPainter *this, const WebCore::LegacyInlineTextBox *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const WebCore::MarkedText *v6;
  WTF *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t result;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  WebCore::LegacyTextBoxPainter *v33;
  int v34;
  BOOL isLineBreak;
  int v36;
  char v37;
  WTF *v38;
  int v39;
  unsigned int v40;
  char v41;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((*(_BYTE *)(v4 + 45) & 2) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v33 = (WebCore::LegacyTextBoxPainter *)*((_QWORD *)this + 9);
  v34 = 0;
  isLineBreak = WebCore::LegacyInlineTextBox::isLineBreak(this);
  LOBYTE(v36) = 0;
  v37 = 0;
  WebCore::MarkedText::collectForDocumentMarkers(v4, (uint64_t)&v33, 2, (uint64_t)&v38);
  WebCore::MarkedText::subdivide((uint64_t)&v38, 1, (uint64_t)&v30);
  v7 = v30;
  if (!v32)
    goto LABEL_33;
  v8 = 40 * v32;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  do
  {
    v33 = this;
    v36 = 1;
    WebCore::calculateDocumentMarkerBounds((WebCore *)&v33, v7, v6);
    if (v15 <= 0.0 || (v17 = v16, v16 <= 0.0))
    {
      v18 = v12;
      v19 = v11;
      v20 = v10;
      v17 = v9;
    }
    else
    {
      v18 = v13;
      v19 = v14;
      v20 = v15;
      if (v10 > 0.0 && v9 > 0.0)
      {
        v21 = v15 + v13;
        if (v18 >= v12)
          v18 = v12;
        v22 = v16 + v14;
        if (v19 >= v11)
          v19 = v11;
        if ((float)(v10 + v12) >= v21)
          v21 = v10 + v12;
        if ((float)(v9 + v11) >= v22)
          v22 = v9 + v11;
        v20 = v21 - v18;
        v17 = v22 - v19;
      }
    }
    if (v36 != -1)
      ((void (*)(char *, WebCore::LegacyTextBoxPainter **))off_1E343A000[v36])(&v41, &v33);
    v7 = (WTF *)((char *)v7 + 40);
    v9 = v17;
    v10 = v20;
    v11 = v19;
    v12 = v18;
    v8 -= 40;
  }
  while (v8);
  v7 = v30;
  if (!v32)
  {
LABEL_33:
    if (!v7)
      goto LABEL_34;
    goto LABEL_47;
  }
  v23 = 40 * v32;
  v24 = (WTF::StringImpl **)((char *)v30 + 24);
  do
  {
    v25 = *v24;
    *v24 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v5);
      else
        *(_DWORD *)v25 -= 2;
    }
    v24 += 5;
    v23 -= 40;
  }
  while (v23);
  v7 = v30;
  if (v30)
  {
LABEL_47:
    v30 = 0;
    v31 = 0;
    WTF::fastFree(v7, v5);
  }
LABEL_34:
  result = (uint64_t)v38;
  if (!v40)
  {
    if (!v38)
      return result;
LABEL_45:
    v38 = 0;
    v39 = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  v27 = 40 * v40;
  v28 = (WTF::StringImpl **)((char *)v38 + 24);
  do
  {
    v29 = *v28;
    *v28 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v5);
      else
        *(_DWORD *)v29 -= 2;
    }
    v28 += 5;
    v27 -= 40;
  }
  while (v27);
  result = (uint64_t)v38;
  if (v38)
    goto LABEL_45;
  return result;
}

BOOL WebCore::TextDecorationPainter::Styles::operator==(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v2 = *a1;
  v3 = *a2;
  if ((*a1 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v2) != HIBYTE(v3)
      || BYTE6(v2) != BYTE6(v3))
    {
      return 0;
    }
  }
  else if (v2 != v3 || (v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v5 = a1[2];
  v6 = a2[2];
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) == 0
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v5) != HIBYTE(v6)
      || BYTE6(v5) != BYTE6(v6))
    {
      return 0;
    }
  }
  else if (v5 != v6 || (v6 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v10 = a1[4];
  v11 = a2[4];
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v11 & 0x8000000000000) != 0
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v10) == HIBYTE(v11)
      && BYTE6(v10) == BYTE6(v11))
    {
LABEL_32:
      if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8)
        && *((unsigned __int8 *)a1 + 24) == *((unsigned __int8 *)a2 + 24))
      {
        return *((unsigned __int8 *)a1 + 40) == *((unsigned __int8 *)a2 + 40);
      }
    }
    return 0;
  }
  v8 = 0;
  if (v10 == v11 && (v11 & 0x8000000000000) == 0)
    goto LABEL_32;
  return v8;
}

uint64_t WebCore::TextDecorationPainter::paintBackgroundDecorations(WebCore::RenderStyle const&,WebCore::TextRun const&,WebCore::TextDecorationPainter::BackgroundDecorationGeometry const&,WTF::OptionSet<WebCore::TextDecorationLine>,WebCore::TextDecorationPainter::Styles const&)::$_0::operator()<WebCore::TextDecorationLine,WebCore::TextDecorationStyle,WebCore::Color const,WebCore::FloatRect>(uint64_t a1, uint64_t a2, WebCore::Color *a3, float *a4)
{
  WebCore::GraphicsContext **v7;
  uint64_t result;
  WebCore::GraphicsContext *v9;
  int v10;
  void *v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  void *v27;
  __n128 v28;
  unsigned int v29;
  WTF *v30;
  unsigned int v31;
  float v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  double v38;
  double *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF *v45;
  unint64_t v46;
  int v47;
  double *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  double v57;
  double *v58;
  double v59;
  double v60;
  int v61;
  float *v62;
  float v63;
  float v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  double *v68;
  float *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int v73;
  uint64_t v74;
  float *v75;
  float v76;
  float v77;
  uint64_t v78;
  float v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  int v85;
  float v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  WTF *v91;
  uint64_t v92;
  double *v93;
  int v94;
  unsigned int v95;
  _DWORD v96[3];
  float v97;
  float v98;
  float64x2_t v99;
  void *__src;
  uint64_t v101;

  v7 = *(WebCore::GraphicsContext ***)a1;
  WebCore::GraphicsContext::setStrokeColor(**(WebCore::GraphicsContext ***)a1, a3);
  v83 = 4;
  switch((int)a2)
  {
    case 1:
      goto LABEL_3;
    case 2:
    case 3:
      v83 = a2;
      goto LABEL_3;
    case 4:
      return WebCore::strokeWavyTextDecoration((uint64_t)*v7, a4, *(float *)(*(_QWORD *)(a1 + 8) + 40), *(float *)(*(_QWORD *)(a1 + 8) + 44));
    default:
      v83 = 1;
LABEL_3:
      if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 48) - 1 > 1 || !*((_BYTE *)v7 + 9))
      {
        v35 = (uint64_t)*v7;
        v36 = *((unsigned __int8 *)v7 + 8);
        v99.f64[0] = *(float64_t *)a4;
        v37 = a4[3];
        v38 = a4[2];
        v39 = (double *)WTF::fastMalloc((WTF *)0x10);
        __src = v39;
        *v39 = 0.0;
        v39[1] = v38;
        v101 = 0x200000002;
        (*(void (**)(uint64_t, float64x2_t *, void **, uint64_t, BOOL, uint64_t, float))(*(_QWORD *)v35 + 568))(v35, &v99, &__src, v36, (_DWORD)a2 == 1, v83, v37);
        result = (uint64_t)__src;
        if (!__src)
          return result;
        __src = 0;
        LODWORD(v101) = 0;
        return WTF::fastFree((WTF *)result, v40);
      }
      result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)*v7 + 40))(*v7);
      if ((result & 1) != 0)
        return result;
      v9 = *v7;
      v10 = *((unsigned __int8 *)v7 + 8);
      __src = 0;
      v12 = WebCore::GraphicsContext::computeLineBoundsAndAntialiasingModeForText(v9, (const WebCore::FloatRect *)a4, v10, (WebCore::Color *)&__src);
      if (((unint64_t)__src & 0x8000000000000) != 0)
      {
        v84 = v15;
        v90 = v14;
        v85 = v13;
        v86 = v12;
        v87 = (unsigned int *)((unint64_t)__src & 0xFFFFFFFFFFFFLL);
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          atomic_store(1u, v87);
          WTF::fastFree((WTF *)v87, v11);
          v15 = v84;
          v14 = v90;
          v13 = v85;
          v12 = v86;
        }
      }
      *(float *)v96 = v12;
      v96[1] = v13;
      v96[2] = v14;
      v97 = v15;
      WebCore::FontCascade::dashesForIntersectionsWithRect((uint64_t *)&v93, v7[4], *(const WebCore::TextRun **)(a1 + 24), *(const WebCore::FloatPoint **)(a1 + 8), (const WebCore::FloatRect *)v96);
      v16 = v97;
      v17 = a4[2];
      __src = 0;
      v101 = 0;
      v18 = v95;
      if (!v95)
      {
        v19 = 0;
        v20 = 0;
        *(_QWORD *)&v99.f64[0] = WebCore::compareTuples;
LABEL_9:
        v21 = 0;
        goto LABEL_10;
      }
      v56 = (uint64_t)v93;
      v57 = v97;
      v58 = v93;
      do
      {
        v59 = *v58 - v57;
        v60 = v58[1] + v57;
        v99.f64[0] = v59;
        v99.f64[1] = v60;
        if (HIDWORD(v101) == (_DWORD)v101)
        {
          WTF::Vector<std::pair<float,float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<double,double>>((uint64_t)&__src, &v99);
          v56 = (uint64_t)v93;
          v18 = v95;
        }
        else
        {
          v61 = HIDWORD(v101) + 1;
          v62 = (float *)((char *)__src + 8 * HIDWORD(v101));
          v63 = v59;
          v64 = v60;
          *v62 = v63;
          v62[1] = v64;
          HIDWORD(v101) = v61;
        }
        v58 += 2;
      }
      while (v58 != (double *)(v56 + 8 * v18));
      v20 = (float *)__src;
      v19 = (float *)((char *)__src + 8 * HIDWORD(v101));
      *(_QWORD *)&v99.f64[0] = WebCore::compareTuples;
      if (!HIDWORD(v101))
        goto LABEL_9;
      v21 = 126 - 2 * __clz(HIDWORD(v101));
LABEL_10:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*,false>(v20, v19, (uint64_t (**)(float, float, float, float))&v99, v21, 1);
      v99 = 0uLL;
      if (HIDWORD(v101) > 1)
      {
        v70 = (char *)__src;
        WTF::Vector<std::pair<float,float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<float,float>&>((uint64_t)&v99, (unint64_t)__src);
        v71 = HIDWORD(v101);
        if (HIDWORD(v101) != 1)
        {
          v72 = v70 + 8;
          do
          {
            v73 = HIDWORD(v99.f64[1]);
            if (!HIDWORD(v99.f64[1]))
            {
              __break(0xC471u);
              JUMPOUT(0x19648F2C4);
            }
            v74 = *(_QWORD *)&v99.f64[0] + 8 * HIDWORD(v99.f64[1]);
            v76 = *(float *)(v74 - 4);
            v75 = (float *)(v74 - 4);
            v77 = v76;
            v78 = *(_QWORD *)v72;
            LODWORD(v79) = HIDWORD(*(_QWORD *)v72);
            if (COERCE_FLOAT(*(_QWORD *)v72) > v76 || v79 > v77)
            {
              if (*(float *)&v78 <= v77)
              {
                *v75 = v79;
              }
              else if (HIDWORD(v99.f64[1]) == LODWORD(v99.f64[1]))
              {
                WTF::Vector<std::pair<float,float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<float,float>&>((uint64_t)&v99, (unint64_t)v72);
                v71 = HIDWORD(v101);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)&v99.f64[0] + 8 * HIDWORD(v99.f64[1])) = v78;
                HIDWORD(v99.f64[1]) = v73 + 1;
              }
            }
            v72 += 8;
          }
          while (v72 != &v70[8 * v71]);
        }
        v29 = HIDWORD(v99.f64[1]);
        v24 = *(_QWORD *)&v99.f64[0];
      }
      else
      {
        if (HIDWORD(v101))
        {
          WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v99, 1uLL);
          v22 = HIDWORD(v99.f64[1]);
          v23 = HIDWORD(v101);
          v24 = *(_QWORD *)&v99.f64[0];
          v26 = __src;
          v25 = (char *)__src + 8 * HIDWORD(v99.f64[1]);
          if (HIDWORD(v99.f64[1]))
          {
            v81 = 0;
            v82 = 8 * HIDWORD(v99.f64[1]);
            do
            {
              *(_QWORD *)(v24 + v81) = *(_QWORD *)&v26[v81];
              v81 += 8;
            }
            while (v82 != v81);
          }
          else
          {
            v22 = 0;
          }
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = (char *)__src;
          v26 = __src;
        }
        memcpy((void *)(v24 + 8 * v22), v25, &v26[8 * v23] - v25);
        v29 = HIDWORD(v101);
        HIDWORD(v99.f64[1]) = HIDWORD(v101);
      }
      v98 = 0.0;
      v91 = 0;
      v92 = 0;
      v30 = 0;
      v31 = 0;
      if (v29)
      {
        v65 = 8 * v29;
        v32 = 0.0;
        do
        {
          if ((float)(*(float *)v24 - v32) > v16)
          {
            v66 = v92;
            if (v31 == (_DWORD)v92)
            {
              WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float &>((uint64_t)&v91, &v98);
              v66 = v92;
              v67 = HIDWORD(v92);
            }
            else
            {
              v67 = v31 + 1;
              *((double *)v30 + v31) = v32;
              HIDWORD(v92) = v31 + 1;
            }
            if (v67 == v66)
            {
              v69 = (float *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,float>((uint64_t)&v91, v66 + 1, v24);
              v67 = HIDWORD(v92);
              v30 = v91;
              v68 = (double *)((char *)v91 + 8 * HIDWORD(v92));
            }
            else
            {
              v30 = v91;
              v68 = (double *)((char *)v91 + 8 * v67);
              v69 = (float *)v24;
            }
            v31 = v67 + 1;
            *v68 = *v69;
            HIDWORD(v92) = v67 + 1;
          }
          v32 = *(float *)(v24 + 4);
          v98 = v32;
          v24 += 8;
          v65 -= 8;
        }
        while (v65);
      }
      else
      {
        v32 = 0.0;
      }
      if ((float)(v17 - v32) > v16)
      {
        v33 = v31;
        v34 = v92;
        if (v31 == (_DWORD)v92)
        {
          v41 = v31 + 1;
          v42 = v33 + (v33 >> 2);
          if (v42 >= 0x10)
            v43 = v42 + 1;
          else
            v43 = 16;
          if (v43 <= v41)
            v44 = v33 + 1;
          else
            v44 = v43;
          if (v44 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19648F2B4);
          }
          v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * v44));
          LODWORD(v92) = v44;
          v91 = v45;
          memcpy(v45, v30, 8 * v33);
          if (v30)
          {
            if (v91 == v30)
            {
              v91 = 0;
              LODWORD(v92) = 0;
            }
            WTF::fastFree(v30, v27);
            v32 = v98;
          }
          v31 = HIDWORD(v92);
          v30 = v91;
          *((double *)v91 + HIDWORD(v92)) = v32;
          v34 = v92;
        }
        else
        {
          *((double *)v30 + v31) = v32;
        }
        v46 = v31 + 1;
        HIDWORD(v92) = v46;
        if ((_DWORD)v46 == v34)
        {
          v49 = v46 + (v46 >> 2);
          if (v49 >= 0x10)
            v50 = v49 + 1;
          else
            v50 = 16;
          if (v50 <= v46 + 1)
            v51 = v46 + 1;
          else
            v51 = v50;
          if (v51 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19648F2BCLL);
          }
          v52 = (WTF *)WTF::fastMalloc((WTF *)(8 * v51));
          LODWORD(v92) = v51;
          v91 = v52;
          memcpy(v52, v30, 8 * v46);
          if (v91 == v30)
          {
            v91 = 0;
            LODWORD(v92) = 0;
          }
          WTF::fastFree(v30, v53);
          v47 = HIDWORD(v92) + 1;
          v48 = (double *)((char *)v91 + 8 * HIDWORD(v92));
        }
        else
        {
          v47 = v31 + 2;
          v48 = (double *)((char *)v30 + 8 * v46);
        }
        *v48 = v17;
        HIDWORD(v92) = v47;
      }
      if (*(_QWORD *)&v99.f64[0])
        WTF::fastFree(*(WTF **)&v99.f64[0], v27);
      if (__src)
        WTF::fastFree((WTF *)__src, v27);
      v54 = (uint64_t)*v7;
      __src = *(void **)a4;
      v28.n128_u32[1] = HIDWORD(__src);
      v28.n128_f32[0] = a4[3];
      (*(void (**)(uint64_t, void **, WTF **, _QWORD, BOOL, uint64_t, __n128))(*(_QWORD *)v54 + 568))(v54, &__src, &v91, *((unsigned __int8 *)v7 + 8), (_DWORD)a2 == 1, v83, v28);
      v55 = v91;
      if (v91)
      {
        v91 = 0;
        LODWORD(v92) = 0;
        WTF::fastFree(v55, v40);
      }
      result = (uint64_t)v93;
      if (v93)
      {
        v93 = 0;
        v94 = 0;
        return WTF::fastFree((WTF *)result, v40);
      }
      return result;
  }
}

WTF *WebCore::TextDecorationPainter::paintLineThrough(uint64_t a1, uint64_t a2, WebCore::Color *a3, uint64_t a4)
{
  float v7;
  uint64_t v8;
  float v10[2];
  uint64_t v11;

  v11 = *(_QWORD *)(a2 + 8);
  v7 = *(float *)(a2 + 16) + *(float *)(a2 + 4);
  v10[0] = *(float *)a2 + 0.0;
  v10[1] = v7;
  WebCore::GraphicsContext::setStrokeColor(*(WebCore::GraphicsContext **)a1, a3);
  v8 = 4;
  switch(*(_BYTE *)(a4 + 40))
  {
    case 1:
      return WebCore::GraphicsContext::drawLineForText(*(_QWORD *)a1, v10, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a4 + 40) == 1, v8);
    case 2:
    case 3:
      v8 = *(unsigned __int8 *)(a4 + 40);
      return WebCore::GraphicsContext::drawLineForText(*(_QWORD *)a1, v10, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a4 + 40) == 1, v8);
    case 4:
      return (WTF *)WebCore::strokeWavyTextDecoration(*(_QWORD *)a1, v10, *(float *)(a2 + 20), *(float *)(a2 + 24));
    default:
      v8 = 1;
      return WebCore::GraphicsContext::drawLineForText(*(_QWORD *)a1, v10, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a4 + 40) == 1, v8);
  }
}

uint64_t WebCore::strokeWavyTextDecoration(uint64_t result, float *a2, float a3, float a4)
{
  float v5;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float i;
  float v18;
  float v19;
  _DWORD v20[2];
  float v21[2];
  float v22[2];
  __int128 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  _BYTE v28[8];
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2[2];
  if (v5 > 0.0 && a2[3] > 0.0 && a4 != 0.0)
  {
    v8 = result;
    v9 = a2[1];
    v10 = *a2 + (float)(a4 * -2.0);
    v11 = (float)(v5 + *a2) + (float)(a4 * 2.0);
    v23 = *(_OWORD *)a2;
    v24 = v9;
    v25 = v11;
    v26 = v10;
    v27 = v9;
    *((float *)&v23 + 1) = *((float *)&v23 + 1) - a3;
    *((float *)&v23 + 3) = *((float *)&v23 + 3) + (float)(a3 * 2.0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 96))(result, 1);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 456))(v8, &v23);
    v12 = a2[3];
    if ((*(_BYTE *)(v8 + 193) & 0xFE) == 2)
    {
      if (v10 == v11)
      {
        v13 = v9 + v12;
        v27 = v9 + v12;
        v14 = &v24;
      }
      else
      {
        v10 = v10 + v12;
        v26 = v10;
        v14 = &v25;
        v13 = v9;
        v9 = v11;
      }
      *v14 = v9 - v12;
      v11 = v25;
      v9 = v13;
    }
    if (((int)v12 & 1) != 0)
    {
      if (v10 == v11)
      {
        v10 = v10 + 0.5;
        v26 = v10;
        v15 = &v25;
      }
      else
      {
        v9 = v9 + 0.5;
        v27 = v9;
        v15 = &v24;
      }
      *v15 = *v15 + 0.5;
      v11 = v25;
    }
    v30 = 0;
    WebCore::Path::moveTo((WebCore::Path *)v28, (const WebCore::FloatPoint *)&v26);
    if (v11 >= v10)
      v16 = v10;
    else
      v16 = v11;
    if (v10 < v11)
      v10 = v11;
    v22[0] = 0.0;
    v22[1] = a3 + v9;
    v21[0] = 0.0;
    v21[1] = v9 - a3;
    for (i = v16 + (float)(a4 * 2.0); i <= v10; v16 = v18)
    {
      v22[0] = a4 + v16;
      v18 = i;
      *(float *)&v20[1] = v9;
      v21[0] = a4 + v16;
      *(float *)v20 = i;
      WebCore::Path::addBezierCurveTo((uint64_t)v28, (const WebCore::FloatPoint *)v22, (const WebCore::FloatPoint *)v21, (const WebCore::FloatPoint *)v20);
      i = v18 + (float)(a4 * 2.0);
    }
    if (!*(_BYTE *)(v8 + 342))
    {
      *(_BYTE *)(v8 + 342) = 1;
      *(_DWORD *)(v8 + 184) |= 0x800u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, v8 + 8);
    v19 = a2[3];
    if (*(float *)(v8 + 188) != v19)
    {
      *(float *)(v8 + 188) = v19;
      *(_DWORD *)(v8 + 184) |= 8u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, v8 + 8);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 184))(v8, v28);
    if (v30 != -1)
      ((void (*)(float *, uint64_t *))off_1E343A110[v30])(v22, &v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
  }
  return result;
}

uint64_t WebCore::collectStylesForRenderer(int *a1, uint64_t a2, char a3, char a4, int a5)
{
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  char *v14;
  int *v15[3];
  char v16;
  int v17;
  char v18;

  v18 = a3;
  v17 = a5;
  v16 = a4;
  v15[0] = &v17;
  v15[1] = (int *)&v18;
  v15[2] = a1;
  while (1)
  {
    v6 = WebCore::collectStylesForRenderer(WebCore::TextDecorationPainter::Styles &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::TextDecorationLine>,BOOL,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::PseudoId)::$_1::operator()(0, (WTF::StringImpl *)&v16, a2);
    result = (uint64_t)WebCore::collectStylesForRenderer(WebCore::TextDecorationPainter::Styles &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::TextDecorationLine>,BOOL,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::PseudoId)::$_0::operator()(v15, (uint64_t)v6, *((_DWORD *)v6 + 5) & 0xF);
    v8 = a2;
    if ((*(_BYTE *)(a2 + 45) & 2) != 0)
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if ((*(_QWORD *)(v8 + 96) & 0x1FLL) == 0x19)
      return result;
    v9 = *(_QWORD *)(a2 + 32);
    if (v9)
    {
      a2 = *(_QWORD *)(v9 + 8);
      if (!a2 || (*(_BYTE *)(a2 + 45) & 1) == 0)
        goto LABEL_8;
      v10 = (*(_BYTE *)(a2 + 45) & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 96)
          : *(_QWORD *)(a2 + 96);
      if ((v10 & 0x1F) != 1 && (v10 & 0x1F) != 14)
        goto LABEL_8;
      if ((*(_BYTE *)(a2 + 45) & 0x40) == 0)
        goto LABEL_8;
      if ((v10 & 0xF80000000000) != 0)
        goto LABEL_8;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
      if ((result & 1) != 0)
        goto LABEL_8;
      v12 = *(unsigned __int8 *)(a2 + 46);
      if (v12 == 20)
        goto LABEL_8;
      if ((*(_BYTE *)(a2 + 52) & 7) == 1)
      {
        if ((*(_BYTE *)(a2 + 53) & 2) != 0 || v12 == 26 || v12 == 49)
          goto LABEL_8;
      }
      else if (v12 == 49 || v12 == 26)
      {
        goto LABEL_8;
      }
      if ((*(_BYTE *)(a2 + 45) & 0x40) == 0)
      {
        result = 96;
        __break(0xC471u);
        return result;
      }
      result = WebCore::RenderBoxModelObject::continuation((WebCore::RenderBoxModelObject *)a2);
      if (result)
        a2 = result;
    }
    else
    {
      a2 = 0;
    }
LABEL_8:
    if (!v18 || !a2)
      return result;
    if ((*(_BYTE *)(a2 + 45) & 1) == 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v13)
      {
        if ((*(_WORD *)(v13 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
        {
          v14 = WebCore::collectStylesForRenderer(WebCore::TextDecorationPainter::Styles &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::TextDecorationLine>,BOOL,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::PseudoId)::$_1::operator()(0, (WTF::StringImpl *)&v16, a2);
          return (uint64_t)WebCore::collectStylesForRenderer(WebCore::TextDecorationPainter::Styles &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::TextDecorationLine>,BOOL,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::PseudoId)::$_0::operator()(v15, (uint64_t)v14, v18);
        }
      }
    }
  }
}

BOOL WebCore::TextPaintStyle::operator==(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v2 = *a1;
  v3 = *a2;
  if ((*a1 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v2) != HIBYTE(v3)
      || BYTE6(v2) != BYTE6(v3))
    {
      return 0;
    }
  }
  else if (v2 != v3 || (v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v5 = a1[1];
  v6 = a2[1];
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) == 0
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v5) != HIBYTE(v6)
      || BYTE6(v5) != BYTE6(v6))
    {
      return 0;
    }
  }
  else if (v5 != v6 || (v6 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v10 = a1[2];
  v11 = a2[2];
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v11 & 0x8000000000000) != 0
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v10) == HIBYTE(v11)
      && BYTE6(v10) == BYTE6(v11))
    {
LABEL_32:
      if (*((float *)a1 + 6) == *((float *)a2 + 6)
        && *((unsigned __int8 *)a1 + 30) == *((unsigned __int8 *)a2 + 30)
        && *((unsigned __int8 *)a1 + 31) == *((unsigned __int8 *)a2 + 31)
        && *((unsigned __int8 *)a1 + 29) == *((unsigned __int8 *)a2 + 29)
        && *((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
      {
        return *((float *)a1 + 9) == *((float *)a2 + 9);
      }
    }
    return 0;
  }
  v8 = 0;
  if (v10 == v11 && (v11 & 0x8000000000000) == 0)
    goto LABEL_32;
  return v8;
}

void WebCore::adjustColorForVisibilityOnBackground(WebCore *this, const WebCore::Color *a2, const WebCore::Color *a3)
{
  double v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  WebCore::contrastRatio(a2, a3, a3);
  if (v5 >= 4.5)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)this = *(_QWORD *)a2;
    if ((v6 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  else if (WebCore::Color::luminance(a2) <= 0.5)
  {
    WebCore::Color::lightened(a2, (uint64_t *)this);
  }
  else
  {
    WebCore::Color::darkened(a2, (uint64_t *)this);
  }
}

uint64_t WebCore::ShadowApplier::ShadowApplier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::FilterOperations *a5, float32x4_t *a6, int a7, char a8, char a9)
{
  char v15;
  int v16;
  char v17;
  int v19;
  int v20;
  char v21;
  float v22;
  float v23;
  uint64_t v24;
  void *v25;
  char v26;
  float v27;
  uint64_t *v28;
  void *v29;
  float v30;
  float v31;
  float v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float v37;
  float v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  float v51;
  float v52;
  unint64_t v53;
  unsigned int v54;
  unsigned __int8 v55;
  char v56;
  char v57;
  float32x4_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  float32x4_t *v63;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  if (!a4)
  {
    v15 = *(_BYTE *)(a1 + 24) | 1;
LABEL_3:
    v16 = 0;
    v17 = v15 & 0xFD;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a4 + 56))
    v19 = 1;
  else
    v19 = a7 ^ 1;
  v15 = *(_BYTE *)(a1 + 24) & 0xFE | v19;
  *(_BYTE *)(a1 + 24) = v15;
  if ((a8 & 1) == 0 || !*(_BYTE *)(a4 + 4) || *(_BYTE *)(a4 + 4) == 11)
    goto LABEL_3;
  if (*(_BYTE *)(a4 + 6))
  {
    if (*(float *)a4 != 0.0)
      goto LABEL_3;
  }
  else if (*(_DWORD *)a4)
  {
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a4 + 12) || *(_BYTE *)(a4 + 12) == 11)
    goto LABEL_3;
  if (*(_BYTE *)(a4 + 14))
  {
    if (*(float *)(a4 + 8) != 0.0)
      goto LABEL_3;
  }
  else if (*(_DWORD *)(a4 + 8))
  {
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a4 + 28) || *(_BYTE *)(a4 + 28) == 11)
    goto LABEL_3;
  if (*(_BYTE *)(a4 + 30))
  {
    if (*(float *)(a4 + 24) != 0.0)
      goto LABEL_24;
  }
  else if (*(_DWORD *)(a4 + 24))
  {
LABEL_24:
    v20 = 0;
    v21 = 0;
    goto LABEL_25;
  }
  v21 = 2;
  v20 = 1;
LABEL_25:
  v17 = v21 | v15 & 0xFD;
  if ((v19 & v20) != 0)
    v16 = 4;
  else
    v16 = 0;
LABEL_4:
  *(_BYTE *)(a1 + 24) = v17 & 0xF3 | v16;
  if (!a4 || v16)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return a1;
  }
  if ((a9 & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 14))
      v30 = *(float *)(a4 + 8);
    else
      v30 = (float)*(int *)(a4 + 8);
    v51 = v30;
    if (*(_BYTE *)(a4 + 6))
      v31 = *(float *)a4;
    else
      v31 = (float)*(int *)a4;
    v23 = -v31;
  }
  else
  {
    if (*(_BYTE *)(a4 + 6))
      v22 = *(float *)a4;
    else
      v22 = (float)*(int *)a4;
    v51 = v22;
    if (*(_BYTE *)(a4 + 14))
      v23 = *(float *)(a4 + 8);
    else
      v23 = (float)*(int *)(a4 + 8);
  }
  v52 = v23;
  *(float *)&v54 = 0.0;
  v57 = 0;
  v55 = *(_BYTE *)(a4 + 28);
  v56 = *(_BYTE *)(a4 + 29);
  if (v55 - 2 >= 9)
  {
    if (v55 == 11)
    {
      v54 = *(unsigned int *)(a4 + 24);
      WebCore::Length::ref((int *)&v54);
    }
  }
  else
  {
    v57 = *(_BYTE *)(a4 + 30);
    v54 = *(unsigned int *)(a4 + 24);
  }
  v62 = *(_QWORD *)(a2 + 32) + 328;
  v58.i64[0] = (uint64_t)&v62;
  v58.i64[1] = (uint64_t)&v62;
  v59 = (unint64_t)&v62;
  v60 = (uint64_t)&v62;
  v24 = *(unsigned int *)(a4 + 40);
  if ((_DWORD)v24 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v63 = &v58;
    ((void (*)(unint64_t *__return_ptr, float32x4_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v24])(&v53, &v63, a4 + 32);
    if (a5)
      WebCore::FilterOperations::transformColor(a5, (WebCore::Color *)&v53);
    v26 = *(_BYTE *)(a1 + 24);
    if ((v26 & 1) == 0)
      goto LABEL_41;
    v58 = *a6;
    if (*(_BYTE *)(a4 + 30))
      v32 = *(float *)(a4 + 24);
    else
      v32 = (float)*(int *)(a4 + 24);
    v33 = ceilf(v32 * 1.4) * 64.0;
    if (v33 < 2147483650.0)
    {
      if (v33 <= -2147483650.0)
        v33 = -1.2554213e58;
      else
        *(float *)&v33 = (float)(int)v33 * 0.015625;
      goto LABEL_70;
    }
  }
  v33 = 1.2554207e58;
LABEL_70:
  *(float *)&v33 = *(float *)&v33 + (float)(a6->f32[3] * 3.0);
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33, 0);
  v35.i64[0] = vsubq_f32(v58, v34).u64[0];
  v35.i64[1] = vaddq_f32(v58, v34).i64[1];
  v34.i64[0] = __PAIR64__(LODWORD(v52), LODWORD(v51));
  v58 = vaddq_f32(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a3 + 456))(a3, &v58);
  v26 = *(_BYTE *)(a1 + 24) | 8;
  *(_BYTE *)(a1 + 24) = v26;
  v36 = fmaxf(v52, 0.0) + (float)(v58.f32[3] * 2.0);
  v37 = *(float *)&v54;
  if (!v57)
    v37 = (float)(int)v54;
  v38 = v36 + v37;
  *(_DWORD *)a1 = 0;
  *(float *)(a1 + 4) = v38;
  v52 = v52 - v38;
LABEL_41:
  if ((v26 & 2) == 0)
  {
    v27 = *(float *)&v54;
    if (!v57)
      v27 = (float)(int)v54;
    v28 = (uint64_t *)v53;
    if ((v53 & 0x8000000000000) != 0)
    {
      v39 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      v58.i64[0] = __PAIR64__(LODWORD(v52), LODWORD(v51));
      v58.f32[2] = v27;
      v59 = (unint64_t)v28;
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 + 1, v39));
    }
    else
    {
      v58.i64[0] = __PAIR64__(LODWORD(v52), LODWORD(v51));
      v58.f32[2] = v27;
      v59 = v53;
    }
    v60 = 0x3F80000000000000;
    v61 = 1;
    WebCore::GraphicsContextState::setDropShadow(a3 + 8, (uint64_t)&v58);
    if (v61)
    {
      if ((v59 & 0x8000000000000) != 0)
      {
        v48 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v29);
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(a3, a3 + 8);
    if (((unint64_t)v28 & 0x8000000000000) != 0)
    {
      v45 = (unsigned int *)((unint64_t)v28 & 0xFFFFFFFFFFFFLL);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v25);
      }
    }
  }
  if ((v53 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v25);
    }
  }
  if (v55 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v54);
  }
  return a1;
}

uint64_t WebCore::TextPainter::paintTextOrEmphasisMarks(WebCore::TextPainter *this, const WebCore::FontCascade *a2, const WebCore::TextRun *a3, const WTF::AtomString *a4, float a5, const WebCore::FloatPoint *a6, uint64_t a7, unsigned int a8)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  float v34[2];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 72))(*(_QWORD *)this);
  if ((_DWORD)result)
  {
    v23 = *((_QWORD *)a3 + 1);
    if (!v23)
      return result;
    v24 = *(unsigned __int8 **)(v23 + 8);
    v25 = *(unsigned int *)(v23 + 4);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      if (!(_DWORD)v25)
        return result;
      while (1)
      {
        v26 = *v24;
        v27 = v26 > 0x20;
        v28 = (1 << v26) & 0x100003600;
        if (v27 || v28 == 0)
          break;
        ++v24;
        if (!--v25)
          return result;
      }
    }
    else
    {
      if (!(_DWORD)v25)
        return result;
      v30 = 2 * v25;
      while (1)
      {
        v31 = *(unsigned __int16 *)v24;
        v27 = v31 > 0x20;
        v32 = (1 << v31) & 0x100003600;
        if (v27 || v32 == 0)
          break;
        v24 += 2;
        v30 -= 2;
        if (!v30)
          return result;
      }
    }
    *(_BYTE *)(*(_QWORD *)this + 716) |= 2u;
    return result;
  }
  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v21 = *(_QWORD *)this;
    v22 = *((float *)a6 + 1);
    v34[0] = *(float *)a6 + 0.0;
    v34[1] = v22 + a5;
    result = (*(uint64_t (**)(uint64_t, const WebCore::FontCascade *, const WebCore::TextRun *, const WTF::AtomString *, float *, uint64_t, uint64_t))(*(_QWORD *)v21 + 528))(v21, a2, a3, a4, v34, a7, a8 | 0x100000000);
  }
  else if ((_DWORD)a7
         || (v17 = *((_QWORD *)a3 + 1)) != 0 && *(_DWORD *)(v17 + 4) > a8
         || (v18 = *((_QWORD *)this + 12)) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, const WebCore::FontCascade *, const WebCore::TextRun *, const WebCore::FloatPoint *, uint64_t, uint64_t))(**(_QWORD **)this + 520))(*(_QWORD *)this, a2, a3, a6, a7, a8 | 0x100000000);
  }
  else
  {
    v19 = *(_QWORD *)this;
    {
      v20 = (_QWORD *)WebCore::ControlFactory::shared(void)::shared;
    }
    else
    {
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3351410;
      v20[1] = 1;
      WebCore::ControlFactory::shared(void)::shared = (uint64_t)v20;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, const WebCore::FloatPoint *))(*(_QWORD *)v19 + 584))(v19, v18, v18 + 16, v20, a6);
  }
  *((_QWORD *)this + 12) = 0;
  return result;
}

unsigned int *WebCore::TextPainter::paintTextWithShadows(WebCore::TextPainter *this, const WebCore::ShadowData *a2, const WebCore::FilterOperations *a3, const WebCore::FontCascade *a4, const WebCore::TextRun *a5, float32x4_t *a6, float32x2_t *a7, uint64_t a8, float a9, unsigned int a10, const WTF::AtomString *a11, BOOL a12)
{
  unsigned int *result;
  uint64_t v19;
  uint64_t v20;
  WebCore::GraphicsContext *v21;
  _QWORD *v22;
  WebCore::GraphicsContext *v23;
  float v24;
  const WebCore::ShadowData *v27;
  uint64_t v28;
  BOOL v29;
  _BOOL4 v30;
  BOOL v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  WebCore::GraphicsContext *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  float v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  float32x2_t v66;
  uint64_t v67;
  char v68;

  if (a2)
  {
    v27 = a2;
    v28 = *(_QWORD *)(*(_QWORD *)this + 8);
    v65 = v28;
    if ((v28 & 0x8000000000000) != 0)
    {
      v45 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
      v28 = v65;
    }
    if ((v28 & 0x8000000000000) != 0)
    {
      v51 = *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10);
      v30 = !a12;
      v29 = v51 == 1.0;
      if (v51 != 1.0)
        v30 = 0;
    }
    else
    {
      v29 = v28 == 255;
      v30 = v28 == 255 && !a12;
    }
    HIDWORD(v60) = v30;
    if (v29)
    {
      LOBYTE(v60) = 1;
    }
    else
    {
      v43 = *(WebCore::GraphicsContext **)this;
      v66 = (float32x2_t)0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(v43, (const WebCore::Color *)&v66);
      if ((*(_QWORD *)&v66 & 0x8000000000000) != 0)
      {
        v55 = (unsigned int *)(*(_QWORD *)&v66 & 0xFFFFFFFFFFFFLL);
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v55);
          WTF::fastFree((WTF *)v55, v44);
        }
      }
      v60 = 0;
    }
    do
    {
      if (*((_BYTE *)this + 108))
        v31 = 1;
      else
        v31 = *((_QWORD *)this + 11) != 0;
      result = (unsigned int *)WebCore::ShadowApplier::ShadowApplier((uint64_t)&v61, *((_QWORD *)this + 2), *(_QWORD *)this, (uint64_t)v27, a3, a6, SHIDWORD(v60), v60, !v31);
      if ((v64 & 4) == 0)
      {
        v66 = vadd_f32(v61, *a7);
        result = (unsigned int *)WebCore::TextPainter::paintTextOrEmphasisMarks(this, a4, a5, a11, a9, (const WebCore::FloatPoint *)&v66, a8, a10);
      }
      v27 = (const WebCore::ShadowData *)*((_QWORD *)v27 + 7);
      if (v63)
      {
        if ((v64 & 1) != 0)
        {
          result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 104))(v62, 1);
        }
        else if ((v64 & 2) == 0)
        {
          v66.i8[0] = 0;
          v68 = 0;
          v58 = v62 + 8;
          v59 = v62;
          WebCore::GraphicsContextState::setDropShadow(v62 + 8, (uint64_t)&v66);
          if (v68)
          {
            if ((v67 & 0x8000000000000) != 0)
            {
              v52 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                atomic_store(1u, v52);
                WTF::fastFree((WTF *)v52, v33);
              }
            }
          }
          result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 88))(v59, v58);
        }
      }
    }
    while (v27);
    if ((v60 & 0x100000000) == 0)
    {
      if ((v60 & 1) == 0)
        WebCore::GraphicsContext::setFillColor(*(WebCore::GraphicsContext **)this, (const WebCore::Color *)&v65);
      result = (unsigned int *)WebCore::TextPainter::paintTextOrEmphasisMarks(this, a4, a5, a11, a9, (const WebCore::FloatPoint *)a7, a8, a10);
    }
    if ((v65 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
      do
      {
        v34 = __ldaxr(result);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, result));
      if (!v35)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v32);
      }
    }
  }
  else
  {
    result = (unsigned int *)(*(uint64_t (**)(void))(**(_QWORD **)this + 72))();
    if ((_DWORD)result)
    {
      v36 = *((_QWORD *)a5 + 1);
      if (!v36)
        return result;
      v37 = *(unsigned __int8 **)(v36 + 8);
      v38 = *(unsigned int *)(v36 + 4);
      if ((*(_BYTE *)(v36 + 16) & 4) != 0)
      {
        if (!(_DWORD)v38)
          return result;
        while (1)
        {
          v39 = *v37;
          v40 = v39 > 0x20;
          v41 = (1 << v39) & 0x100003600;
          if (v40 || v41 == 0)
            break;
          ++v37;
          if (!--v38)
            return result;
        }
      }
      else
      {
        if (!(_DWORD)v38)
          return result;
        v47 = 2 * v38;
        while (1)
        {
          v48 = *(unsigned __int16 *)v37;
          v40 = v48 > 0x20;
          v49 = (1 << v48) & 0x100003600;
          if (v40 || v49 == 0)
            break;
          v37 += 2;
          v47 -= 2;
          if (!v47)
            return result;
        }
      }
      *(_BYTE *)(*(_QWORD *)this + 716) |= 2u;
      return result;
    }
    if (*(_QWORD *)a11 && *(_DWORD *)(*(_QWORD *)a11 + 4))
    {
      v23 = *(WebCore::GraphicsContext **)this;
      v24 = a7->f32[1];
      v66.f32[0] = a7->f32[0] + 0.0;
      v66.f32[1] = v24 + a9;
      result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, const WebCore::FontCascade *, const WebCore::TextRun *, const WTF::AtomString *, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)v23 + 528))(v23, a4, a5, a11, &v66, a8, a10 | 0x100000000);
    }
    else if ((_DWORD)a8
           || (v19 = *((_QWORD *)a5 + 1)) != 0 && *(_DWORD *)(v19 + 4) > a10
           || (v20 = *((_QWORD *)this + 12)) == 0)
    {
      result = (unsigned int *)(*(uint64_t (**)(_QWORD, const WebCore::FontCascade *, const WebCore::TextRun *, float32x2_t *, uint64_t, uint64_t))(**(_QWORD **)this + 520))(*(_QWORD *)this, a4, a5, a7, a8, a10 | 0x100000000);
    }
    else
    {
      v21 = *(WebCore::GraphicsContext **)this;
      {
        v22 = (_QWORD *)WebCore::ControlFactory::shared(void)::shared;
      }
      else
      {
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v22 = off_1E3351410;
        v22[1] = 1;
        WebCore::ControlFactory::shared(void)::shared = (uint64_t)v22;
      }
      result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, _QWORD *, float32x2_t *))(*(_QWORD *)v21 + 584))(v21, v20, v20 + 16, v22, a7);
    }
    *((_QWORD *)this + 12) = 0;
  }
  return result;
}

unsigned int *WebCore::TextPainter::paintTextAndEmphasisMarksIfNeeded(float *a1, int *a2, float32x4_t *a3, float32x2_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, const WebCore::ShadowData *a8, const WebCore::FilterOperations *a9)
{
  const WebCore::FontCascade *v15;
  unsigned int *result;
  uint64_t v17;
  uint64_t v18;
  WebCore::GraphicsContext *v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  float v23;
  void *v24;
  unsigned int v25;
  WebCore::GraphicsContext *v26;
  float v27;
  double v28;
  double v29;
  uint64_t v30;
  const WebCore::FontCascade *v31;
  WebCore::GraphicsContext *v32;
  float32x4_t *v33;
  float v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  WebCore::GraphicsContext *v53;
  void *v54;
  int v55;
  unsigned int v56;
  unsigned int *v57;
  const WebCore::ShadowData *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v66;
  WebCore::GraphicsContext *v67;
  float v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  int v88;
  __int128 v91;
  __int128 v92;
  double v93;
  double v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;

  if (*(_BYTE *)(a7 + 30))
  {
    v55 = *(unsigned __int8 *)(*(_QWORD *)a1 + 341);
    result = (unsigned int *)WebCore::RenderStyle::paintTypesForPaintOrder(*(unsigned __int8 *)(a7 + 30));
    v88 = v55 & 0xFE;
    v56 = v55 & 0xFFFFFFFD;
    v57 = result;
    if (*(_BYTE *)result == 1)
    {
      v71 = *(_QWORD *)a1;
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v88)
      {
        *(_BYTE *)(v71 + 341) = v88;
        *(_DWORD *)(v71 + 184) |= 0x200u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 88))(v71, v71 + 8);
      WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, a8, a9, *((const WebCore::FontCascade **)a1 + 1), (const WebCore::TextRun *)a2, a3, a4, a5, 0.0, a6, MEMORY[0x1E0CBF2F8], *(float *)(a7 + 24) > 0.0);
    }
    else
    {
      v58 = a8;
      if (*(_BYTE *)result)
        goto LABEL_98;
      v59 = *(_QWORD *)a1;
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v56)
      {
        *(_BYTE *)(v59 + 341) = v56;
        *(_DWORD *)(v59 + 184) |= 0x200u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 88))(v59, v59 + 8);
      WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, a8, a9, *((const WebCore::FontCascade **)a1 + 1), (const WebCore::TextRun *)a2, a3, a4, a5, 0.0, a6, MEMORY[0x1E0CBF2F8], 0);
    }
    v72 = *(_QWORD *)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v55)
    {
      *(_BYTE *)(v72 + 341) = v55;
      *(_DWORD *)(v72 + 184) |= 0x200u;
    }
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 88))(v72, v72 + 8);
    v58 = 0;
LABEL_98:
    if (*((_BYTE *)v57 + 1))
    {
      if (*((_BYTE *)v57 + 1) != 1)
      {
LABEL_109:
        if (*((_BYTE *)v57 + 2))
        {
          if (*((_BYTE *)v57 + 2) != 1)
            goto LABEL_13;
          v76 = *(_QWORD *)a1;
          if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v88)
          {
            *(_BYTE *)(v76 + 341) = v88;
            *(_DWORD *)(v76 + 184) |= 0x200u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 88))(v76, v76 + 8);
          WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, v58, a9, *((const WebCore::FontCascade **)a1 + 1), (const WebCore::TextRun *)a2, a3, a4, a5, 0.0, a6, MEMORY[0x1E0CBF2F8], *(float *)(a7 + 24) > 0.0);
        }
        else
        {
          v77 = *(_QWORD *)a1;
          if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v56)
          {
            *(_BYTE *)(v77 + 341) = v56;
            *(_DWORD *)(v77 + 184) |= 0x200u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 88))(v77, v77 + 8);
          WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, v58, a9, *((const WebCore::FontCascade **)a1 + 1), (const WebCore::TextRun *)a2, a3, a4, a5, 0.0, a6, MEMORY[0x1E0CBF2F8], 0);
        }
        v78 = *(_QWORD *)a1;
        if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v55)
        {
          *(_BYTE *)(v78 + 341) = v55;
          *(_DWORD *)(v78 + 184) |= 0x200u;
        }
        result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 88))(v78, v78 + 8);
        goto LABEL_13;
      }
      v73 = *(_QWORD *)a1;
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v88)
      {
        *(_BYTE *)(v73 + 341) = v88;
        *(_DWORD *)(v73 + 184) |= 0x200u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 88))(v73, v73 + 8);
      WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, v58, a9, *((const WebCore::FontCascade **)a1 + 1), (const WebCore::TextRun *)a2, a3, a4, a5, 0.0, a6, MEMORY[0x1E0CBF2F8], *(float *)(a7 + 24) > 0.0);
    }
    else
    {
      v74 = *(_QWORD *)a1;
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v56)
      {
        *(_BYTE *)(v74 + 341) = v56;
        *(_DWORD *)(v74 + 184) |= 0x200u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 88))(v74, v74 + 8);
      WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, v58, a9, *((const WebCore::FontCascade **)a1 + 1), (const WebCore::TextRun *)a2, a3, a4, a5, 0.0, a6, MEMORY[0x1E0CBF2F8], 0);
    }
    v75 = *(_QWORD *)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + 341) != v55)
    {
      *(_BYTE *)(v75 + 341) = v55;
      *(_DWORD *)(v75 + 184) |= 0x200u;
    }
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 88))(v75, v75 + 8);
    v58 = 0;
    goto LABEL_109;
  }
  v15 = (const WebCore::FontCascade *)*((_QWORD *)a1 + 1);
  if (a8)
  {
    v33 = a3;
    v34 = *(float *)(a7 + 24);
    v35 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v99 = v35;
    if ((v35 & 0x8000000000000) != 0)
    {
      v60 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 + 1, v60));
      v35 = v99;
      v33 = a3;
    }
    if ((v35 & 0x8000000000000) != 0)
      v36 = *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0;
    else
      v36 = v35 == 255;
    v37 = v36 && v34 <= 0.0;
    if (v36)
    {
      v87 = 1;
    }
    else
    {
      v53 = *(WebCore::GraphicsContext **)a1;
      *(_QWORD *)&v91 = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(v53, (const WebCore::Color *)&v91);
      if ((v91 & 0x8000000000000) != 0)
      {
        v82 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, v82);
          WTF::fastFree((WTF *)v82, v54);
        }
      }
      v37 = 0;
      v87 = 0;
      v33 = a3;
    }
    v38 = (uint64_t)a8;
    do
    {
      if (*((_BYTE *)a1 + 108))
        v39 = 1;
      else
        v39 = *((_QWORD *)a1 + 11) != 0;
      v40 = v38;
      result = (unsigned int *)WebCore::ShadowApplier::ShadowApplier((uint64_t)&v95, *((_QWORD *)a1 + 2), *(_QWORD *)a1, v38, a9, v33, v37, v87, !v39);
      if ((v98 & 4) == 0)
      {
        *(float32x2_t *)&v91 = vadd_f32((float32x2_t)v95, *a4);
        result = (unsigned int *)WebCore::TextPainter::paintTextOrEmphasisMarks((WebCore::TextPainter *)a1, v15, (const WebCore::TextRun *)a2, MEMORY[0x1E0CBF2F8], 0.0, (const WebCore::FloatPoint *)&v91, a5, a6);
      }
      v38 = *(_QWORD *)(v40 + 56);
      if (v97)
      {
        if ((v98 & 1) != 0)
        {
          v66 = *(_QWORD *)(v40 + 56);
          result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 104))(v96, 1);
          v38 = v66;
        }
        else if ((v98 & 2) == 0)
        {
          v42 = v96;
          LOBYTE(v91) = 0;
          LOBYTE(v93) = 0;
          v85 = v96 + 8;
          v86 = v38;
          WebCore::GraphicsContextState::setDropShadow(v96 + 8, (uint64_t)&v91);
          if (LOBYTE(v93))
          {
            if ((v92 & 0x8000000000000) != 0)
            {
              v79 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFLL);
              do
              {
                v80 = __ldaxr(v79);
                v81 = v80 - 1;
              }
              while (__stlxr(v81, v79));
              v33 = a3;
              if (!v81)
              {
                atomic_store(1u, v79);
                WTF::fastFree((WTF *)v79, v43);
              }
            }
          }
          result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 88))(v42, v85);
          v38 = v86;
        }
      }
    }
    while (v38);
    if (!v37)
    {
      if ((v87 & 1) == 0)
        WebCore::GraphicsContext::setFillColor(*(WebCore::GraphicsContext **)a1, (const WebCore::Color *)&v99);
      result = (unsigned int *)WebCore::TextPainter::paintTextOrEmphasisMarks((WebCore::TextPainter *)a1, v15, (const WebCore::TextRun *)a2, MEMORY[0x1E0CBF2F8], 0.0, (const WebCore::FloatPoint *)a4, a5, a6);
    }
    if ((v99 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v99 & 0xFFFFFFFFFFFFLL);
      do
      {
        v44 = __ldaxr(result);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, result));
      if (!v45)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v41);
      }
    }
  }
  else
  {
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 72))(*(_QWORD *)a1);
    if ((_DWORD)result)
    {
      v46 = *((_QWORD *)a2 + 1);
      if (v46)
      {
        v47 = *(unsigned __int8 **)(v46 + 8);
        v48 = *(unsigned int *)(v46 + 4);
        if ((*(_BYTE *)(v46 + 16) & 4) != 0)
        {
          if (!(_DWORD)v48)
            goto LABEL_13;
          while (1)
          {
            v49 = *v47;
            v50 = v49 > 0x20;
            v51 = (1 << v49) & 0x100003600;
            if (v50 || v51 == 0)
              break;
            ++v47;
            if (!--v48)
              goto LABEL_13;
          }
        }
        else
        {
          if (!(_DWORD)v48)
            goto LABEL_13;
          v62 = 2 * v48;
          while (1)
          {
            v63 = *(unsigned __int16 *)v47;
            v50 = v63 > 0x20;
            v64 = (1 << v63) & 0x100003600;
            if (v50 || v64 == 0)
              break;
            v47 += 2;
            v62 -= 2;
            if (!v62)
              goto LABEL_13;
          }
        }
        *(_BYTE *)(*(_QWORD *)a1 + 716) |= 2u;
      }
    }
    else
    {
      if (*MEMORY[0x1E0CBF2F8] && *(_DWORD *)(*MEMORY[0x1E0CBF2F8] + 4))
      {
        v32 = *(WebCore::GraphicsContext **)a1;
        *(float32x2_t *)&v91 = vadd_f32(*a4, 0);
        result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, const WebCore::FontCascade *, int *, _QWORD, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v32 + 528))(v32, v15, a2, MEMORY[0x1E0CBF2F8], &v91, a5, a6 | 0x100000000);
      }
      else if ((_DWORD)a5
             || (v17 = *((_QWORD *)a2 + 1)) != 0 && *(_DWORD *)(v17 + 4) > a6
             || (v18 = *((_QWORD *)a1 + 12)) == 0)
      {
        result = (unsigned int *)(*(uint64_t (**)(_QWORD, const WebCore::FontCascade *, int *, float32x2_t *, uint64_t, uint64_t))(**(_QWORD **)a1 + 520))(*(_QWORD *)a1, v15, a2, a4, a5, a6 | 0x100000000);
      }
      else
      {
        v19 = *(WebCore::GraphicsContext **)a1;
        {
          v20 = (_QWORD *)WebCore::ControlFactory::shared(void)::shared;
        }
        else
        {
          v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v20 = off_1E3351410;
          v20[1] = 1;
          WebCore::ControlFactory::shared(void)::shared = (uint64_t)v20;
        }
        result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, _QWORD *, float32x2_t *))(*(_QWORD *)v19 + 584))(v19, v18, v18 + 16, v20, a4);
      }
      *((_QWORD *)a1 + 12) = 0;
    }
  }
LABEL_13:
  v21 = *((_QWORD *)a1 + 8);
  if (v21 && *(_DWORD *)(v21 + 4))
  {
    v23 = a3->f32[0];
    v22 = a3->f32[1];
    WebCore::updateGraphicsContext(*(_QWORD *)a1, a7, 1);
    if ((byte_1ECE84251 & 1) == 0)
    {
      WTF::NeverDestroyed<WebCore::TextRun,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::StringView>((uint64_t)&WTF::Unicode::objectReplacementCharacter, 1uLL);
      byte_1ECE84251 = 1;
    }
    if (*((_QWORD *)a1 + 11))
    {
      *(float *)&v25 = v23 + (float)(a3->f32[2] * 0.5);
      v95 = __PAIR64__(v22+ (float)*(int *)(WebCore::FontCascade::metricsOfPrimaryFont(*((WebCore::FontCascade **)a1 + 1), v24) + 44), v25);
      if (*((_QWORD *)a1 + 11))
      {
        v26 = *(WebCore::GraphicsContext **)a1;
        v27 = a3->f32[1] + a3->f32[3];
        v28 = (float)(v27 - a3->f32[0]);
        v29 = (float)(a3->f32[0] + v27);
        v91 = xmmword_1968A14C0;
        v92 = xmmword_1969F8310;
        v93 = v29;
        v94 = v28;
        (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)v26 + 656))(v26, &v91);
        v30 = *((_QWORD *)a1 + 11);
        if (v30)
        {
          v31 = (const WebCore::FontCascade *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 32) + 8) + 112) + 32);
          a2 = &dword_1ECE84270;
          goto LABEL_90;
        }
      }
      a2 = &dword_1ECE84270;
    }
    else
    {
      v95 = (unint64_t)*a4;
    }
    v31 = (const WebCore::FontCascade *)*((_QWORD *)a1 + 1);
LABEL_90:
    result = WebCore::TextPainter::paintTextWithShadows((WebCore::TextPainter *)a1, a8, a9, v31, (const WebCore::TextRun *)a2, a3, (float32x2_t *)&v95, a5, a1[26], a6, (const WTF::AtomString *)(a1 + 16), *(float *)(a7 + 24) > 0.0);
    if (*((_QWORD *)a1 + 11))
    {
      v67 = *(WebCore::GraphicsContext **)a1;
      v68 = a3->f32[1] + a3->f32[3];
      v69 = (float)(a3->f32[0] + v68);
      v70 = (float)(a3->f32[0] - v68);
      v91 = xmmword_1969F8300;
      v92 = xmmword_1968A14B0;
      v93 = v70;
      v94 = v69;
      return (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)v67 + 656))(v67, &v91);
    }
  }
  return result;
}

uint64_t WebCore::TextPainter::setForceUseGlyphDisplayListForTesting(uint64_t this)
{
  {
    WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
    qword_1EE2F92D8 = 0;
    qword_1EE2F92E0 = 0;
  }
  LOBYTE(qword_1EE2F92E0) = this;
  return this;
}

WTF **WebCore::TextPainter::clearGlyphDisplayListCacheForTesting(WebCore::TextPainter *this, void *a2)
{
  {
    WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
    qword_1EE2F92D8 = 0;
    qword_1EE2F92E0 = 0;
  }
  return WebCore::GlyphDisplayListCache::clear((WebCore::GlyphDisplayListCache *)&WebCore::GlyphDisplayListCache::singleton(void)::cache, a2);
}

WTF::StringImpl *WebCore::TextPainter::cachedGlyphDisplayListsForTextNodeAsText@<X0>(WTF::StringImpl *result@<X0>, WebCore::RenderObject *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t *v3;
  char v4;
  int v5;
  WebCore::LayoutIntegration::LineLayout *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  _DWORD *IfExists;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  unint64_t v33;
  int v34;
  _BYTE v35[16];
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  char v40;
  _QWORD v41[2];
  int v42;

  v3 = (uint64_t *)(*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL);
  if (!v3)
  {
    *a3 = 0;
    return result;
  }
  if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964916D4);
  }
  v4 = (char)a2;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v5 = 1;
  v40 = 1;
  v6 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v3, a2);
  if (v6)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v6, (const WebCore::RenderText *)v3, (uint64_t)v41);
    v5 = v42;
    v35[0] = 0;
    v36 = -1;
    if (v42 == -1)
      goto LABEL_8;
  }
  else
  {
LABEL_84:
    v41[0] = v3[8];
    v42 = v5;
    v35[0] = 0;
    v36 = -1;
  }
  ((void (*)(WTF::StringImpl ***, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v5])(&v32, v35, v41);
  v36 = v5;
  if (v42 != -1)
    ((void (*)(WTF::StringImpl ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v42])(&v32, v41);
LABEL_8:
  LOBYTE(v41[0]) = 0;
  v42 = -1;
  v7 = v36;
  if (v36 != -1)
  {
    ((void (*)(WTF::StringImpl ***, _QWORD *, _BYTE *))off_1E343A0D0[v36])(&v32, v41, v35);
    v42 = v7;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41) & 1) == 0)
  {
    v3 = &WebCore::GlyphDisplayListCache::singleton(void)::cache;
    v5 = 80;
    while (1)
    {
      if (v42 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_84;
      }
      v32 = &v31;
      if ((((uint64_t (*)(WTF::StringImpl ***, _QWORD *))off_1E343A010[v42])(&v32, v41) & 1) == 0)
        goto LABEL_85;
      LOBYTE(v32) = 0;
      v34 = -1;
      v11 = v42;
      ((void (*)(WTF::StringImpl **, WTF::StringImpl ***, _QWORD *))off_1E343A0D0[v42])(&v31, &v32, v41);
      v34 = v11;
      v12 = v32;
      if (v11 != 1)
        break;
      if (((*((uint64_t (**)(WTF::StringImpl **))*v32 + 10))(v32) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964916F4);
      }
      {
        WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
        qword_1EE2F92D8 = 0;
        qword_1EE2F92E0 = 0;
      }
      if ((*((_WORD *)v12 + 26) & 0x4000) != 0 && WebCore::GlyphDisplayListCache::singleton(void)::cache)
      {
        v22 = *(_DWORD *)(WebCore::GlyphDisplayListCache::singleton(void)::cache - 8);
        v23 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = *(WTF::StringImpl ***)(WebCore::GlyphDisplayListCache::singleton(void)::cache + 16 * v26);
        if (v27 != v12)
        {
          v29 = 1;
          while (v27)
          {
            v26 = ((_DWORD)v26 + v29) & v22;
            v27 = *(WTF::StringImpl ***)(WebCore::GlyphDisplayListCache::singleton(void)::cache
                                       + 16 * v26);
            ++v29;
            if (v27 == v12)
              goto LABEL_69;
          }
          goto LABEL_52;
        }
LABEL_69:
        v28 = *(_QWORD *)(WebCore::GlyphDisplayListCache::singleton(void)::cache + 16 * v26 + 8);
        if (v28)
        {
          IfExists = *(_DWORD **)(v28 + 16);
          if (IfExists)
            goto LABEL_33;
        }
      }
LABEL_52:
      if (v34 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl ***))off_1E343A000[v34])(&v31, &v32);
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v41);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41) & 1) != 0)
        goto LABEL_11;
    }
    v13 = v32[1];
    if (v33 >= *((unsigned int *)v13 + 15))
    {
LABEL_85:
      __break(0xC471u);
      JUMPOUT(0x1964916B4);
    }
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    IfExists = (_DWORD *)WebCore::GlyphDisplayListCache::getIfExists((WebCore::GlyphDisplayListCache *)&WebCore::GlyphDisplayListCache::singleton(void)::cache, (const WebCore::InlineDisplay::Box *)(*((_QWORD *)v13 + 6) + 80 * v33));
    if (!IfExists)
      goto LABEL_52;
LABEL_33:
    WebCore::DisplayList::DisplayList::asText(IfExists, v4);
    v16 = v31;
    if (v39 || v38)
    {
      if (v31 && (*((_BYTE *)v31 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      goto LABEL_43;
    }
    if (v31)
      *(_DWORD *)v31 += 2;
    v17 = v37;
    v37 = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        v16 = v31;
        if (!v31)
          goto LABEL_42;
        goto LABEL_41;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v16)
    {
LABEL_42:
      v39 = v16;
LABEL_43:
      v18 = v31;
      v31 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      LOBYTE(v31) = 10;
      if (!v38 || (v19 = v39, v39 >= *((_DWORD *)v38 + 1)) || v37)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v20 = *((_DWORD *)v38 + 4);
        v21 = *((_QWORD *)v38 + 1);
        ++v39;
        if ((v20 & 4) != 0)
          *(_BYTE *)(v21 + v19) = 10;
        else
          *(_WORD *)(v21 + 2 * v19) = 10;
      }
      goto LABEL_52;
    }
LABEL_41:
    LODWORD(v16) = *((_DWORD *)v16 + 1);
    goto LABEL_42;
  }
LABEL_11:
  if (v42 != -1)
    ((void (*)(WTF::StringImpl ***, _QWORD *))off_1E343A000[v42])(&v32, v41);
  if (v36 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E343A000[v36])(v41, v35);
  v9 = v37;
  if (v37
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v37),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v37),
        (v9 = v37) != 0))
  {
    *(_DWORD *)v9 += 2;
  }
  *a3 = v9;
  v10 = v38;
  v38 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::~KeyValuePair(uint64_t a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;

  v3 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WebCore::LocalFrameView*&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *result;
  WTF *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  int v31;
  void *v32;
  WTF *v33;

  v6 = qword_1ECE84258;
  if (qword_1ECE84258
    || (WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(8u, 0), (v6 = qword_1ECE84258) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (!*v14)
    goto LABEL_5;
  v25 = 0;
  v26 = 1;
  while (v15 != v9)
  {
    if (v15 == -1)
      v25 = v14;
    v13 = (v13 + v26) & v8;
    v14 = (uint64_t *)(v6 + 16 * v13);
    v15 = *v14;
    ++v26;
    if (!*v14)
    {
      if (v25)
      {
        *v25 = 0;
        v25[1] = 0;
        --*(_DWORD *)(v6 - 16);
        v9 = *a2;
        v14 = v25;
      }
LABEL_5:
      *a2 = 0;
      v16 = (_DWORD *)*v14;
      *v14 = v9;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      v17 = *a3;
      if (!v17)
      {
        result = 0;
        goto LABEL_10;
      }
      result = *(uint64_t **)(v17 + 16);
      if (result)
        goto LABEL_36;
      result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      result[1] = v17;
      v27 = *(WTF **)(v17 + 16);
      *(_QWORD *)(v17 + 16) = result;
      if (!v27)
        goto LABEL_36;
      if (*(_DWORD *)v27 != 1)
      {
        --*(_DWORD *)v27;
        goto LABEL_36;
      }
      WTF::fastFree(v27, a2);
      result = *(uint64_t **)(v17 + 16);
      if (result)
LABEL_36:
        ++*(_DWORD *)result;
LABEL_10:
      v19 = (WTF *)v14[1];
      v14[1] = (uint64_t)result;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          result = (uint64_t *)WTF::fastFree(v19, a2);
        else
          --*(_DWORD *)v19;
      }
      if (qword_1ECE84258)
        v20 = *(_DWORD *)(qword_1ECE84258 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(qword_1ECE84258 - 12) = v20;
      v21 = qword_1ECE84258;
      if (qword_1ECE84258)
        v22 = *(_DWORD *)(qword_1ECE84258 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(qword_1ECE84258 - 16) + v22);
      v24 = *(unsigned int *)(qword_1ECE84258 - 4);
      if (v24 > 0x400)
      {
        if (v24 <= 2 * v23)
          goto LABEL_24;
      }
      else
      {
        if (3 * v24 > 4 * v23)
          goto LABEL_19;
LABEL_24:
        result = WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::expand(v14);
        v14 = result;
        v21 = qword_1ECE84258;
        if (qword_1ECE84258)
          v24 = *(unsigned int *)(qword_1ECE84258 - 4);
        else
          v24 = 0;
      }
LABEL_19:
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v21 + 16 * v24;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
  }
  if ((v7 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v6 + 16 * v28;
  *(_BYTE *)(a1 + 16) = 0;
  WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v33, *a3);
  v30 = v33;
  v33 = 0;
  result = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v30;
  if (result)
  {
    v31 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result == 1)
    {
      WTF::fastFree((WTF *)result, v29);
      result = (uint64_t *)v33;
      v33 = 0;
      if (!result)
        return result;
      v31 = *(_DWORD *)result - 1;
      if (*(_DWORD *)result == 1)
        return (uint64_t *)WTF::fastFree((WTF *)result, v32);
    }
    *(_DWORD *)result = v31;
  }
  return result;
}

uint64_t *WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v6;
  WTF *v7;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (!v3)
    {
      v3 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 8) = a2;
      v7 = *(WTF **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v3;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WTF::fastFree(v7, v6);
          v3 = *(_QWORD *)(a2 + 16);
          if (!v3)
            goto LABEL_3;
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    ++*(_DWORD *)v3;
  }
  else
  {
    v3 = 0;
  }
LABEL_3:
  *a1 = v3;
  return a1;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::expand(uint64_t *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE84258 && (v2 = *(_DWORD *)(qword_1ECE84258 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE84258 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(v3, a1);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  void *v16;

  v4 = qword_1ECE84258;
  if (qword_1ECE84258)
  {
    v5 = *(_DWORD *)(qword_1ECE84258 - 4);
    v6 = *(_DWORD *)(qword_1ECE84258 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = (_DWORD *)v7;
  v10 = v7 + 16;
  if (a1)
    bzero((void *)(v7 + 16), 16 * a1);
  qword_1ECE84258 = v10;
  v9[2] = a1 - 1;
  v9[3] = a1;
  *v9 = 0;
  *(_DWORD *)(qword_1ECE84258 - 12) = v6;
  v11 = 0;
  if (v5)
  {
    v13 = v5;
    v14 = (uint64_t *)v4;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::reinsert(v14, v8);
          WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a2)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::~KeyValuePair((uint64_t)v14, v8);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::reinsert(uint64_t *a1, void *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v16;

  if (qword_1ECE84258)
    v3 = *(_DWORD *)(qword_1ECE84258 - 8);
  else
    v3 = 0;
  v4 = ~(*a1 << 32) + *a1;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(qword_1ECE84258 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (_QWORD *)(qword_1ECE84258 + 16 * v9);
  v12 = (WTF *)v11[1];
  v11[1] = 0;
  if (!v12)
    goto LABEL_8;
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
LABEL_8:
    *v11 = 0;
    goto LABEL_9;
  }
  WTF::fastFree(v12, a2);
  v16 = (_DWORD *)*v11;
  *v11 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
LABEL_9:
  v13 = *a1;
  *a1 = 0;
  *v11 = v13;
  v14 = a1[1];
  a1[1] = 0;
  v11[1] = v14;
  return v11;
}

unsigned int *WebCore::ShadowData::operator=(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  char v21;

  if (a1 != a2)
  {
    if (*((_BYTE *)a1 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a1);
    }
    v4 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)a1 + 4) = v4;
    *((_BYTE *)a1 + 5) = *((_BYTE *)a2 + 5);
    if (v4 - 2 < 9)
    {
      v5 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)a1 + 6) = v5;
      if (v5)
      {
        *a1 = *a2;
        goto LABEL_6;
      }
      v16 = *a2;
      goto LABEL_26;
    }
    if (v4 <= 0xD)
    {
      if (((1 << v4) & 0x3003) != 0)
      {
        *a1 = 0;
      }
      else if (v4 == 11)
      {
        v16 = *a2;
        *a2 = 0;
LABEL_26:
        *a1 = v16;
      }
    }
LABEL_6:
    *((_BYTE *)a2 + 4) = 0;
    if (*((_BYTE *)a1 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a1[2]);
    }
    v6 = *((unsigned __int8 *)a2 + 12);
    *((_BYTE *)a1 + 12) = v6;
    *((_BYTE *)a1 + 13) = *((_BYTE *)a2 + 13);
    if (v6 - 2 < 9)
    {
      v7 = *((unsigned __int8 *)a2 + 14);
      *((_BYTE *)a1 + 14) = v7;
      if (v7)
      {
        a1[2] = a2[2];
        goto LABEL_10;
      }
      v17 = a2[2];
      goto LABEL_28;
    }
    if (v6 <= 0xD)
    {
      if (((1 << v6) & 0x3003) != 0)
      {
        a1[2] = 0;
      }
      else if (v6 == 11)
      {
        v17 = a2[2];
        a2[2] = 0;
LABEL_28:
        a1[2] = v17;
      }
    }
LABEL_10:
    *((_BYTE *)a2 + 12) = 0;
    if (*((_BYTE *)a1 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a1[4]);
    }
    v8 = *((unsigned __int8 *)a2 + 20);
    *((_BYTE *)a1 + 20) = v8;
    *((_BYTE *)a1 + 21) = *((_BYTE *)a2 + 21);
    if (v8 - 2 < 9)
    {
      v9 = *((unsigned __int8 *)a2 + 22);
      *((_BYTE *)a1 + 22) = v9;
      if (v9)
      {
        a1[4] = a2[4];
        goto LABEL_14;
      }
      v18 = a2[4];
      goto LABEL_30;
    }
    if (v8 <= 0xD)
    {
      if (((1 << v8) & 0x3003) != 0)
      {
        a1[4] = 0;
      }
      else if (v8 == 11)
      {
        v18 = a2[4];
        a2[4] = 0;
LABEL_30:
        a1[4] = v18;
      }
    }
LABEL_14:
    *((_BYTE *)a2 + 20) = 0;
    if (*((_BYTE *)a1 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a1[6]);
    }
    v10 = *((unsigned __int8 *)a2 + 28);
    *((_BYTE *)a1 + 28) = v10;
    *((_BYTE *)a1 + 29) = *((_BYTE *)a2 + 29);
    if (v10 - 2 >= 9)
    {
      if (v10 > 0xD)
        goto LABEL_18;
      if (((1 << v10) & 0x3003) != 0)
      {
        a1[6] = 0;
        goto LABEL_18;
      }
      if (v10 != 11)
        goto LABEL_18;
      v19 = a2[6];
      a2[6] = 0;
    }
    else
    {
      v11 = *((unsigned __int8 *)a2 + 30);
      *((_BYTE *)a1 + 30) = v11;
      if (v11)
      {
        a1[6] = a2[6];
LABEL_18:
        *((_BYTE *)a2 + 28) = 0;
        goto LABEL_19;
      }
      v19 = a2[6];
    }
    a1[6] = v19;
    goto LABEL_18;
  }
LABEL_19:
  v12 = a1[10];
  v13 = a2[10];
  if ((_DWORD)v12 == -1)
  {
    if ((_DWORD)v13 == -1)
      goto LABEL_24;
LABEL_23:
    v20 = a1 + 8;
    ((void (*)(unsigned int **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                           + v13))(&v20);
    goto LABEL_24;
  }
  if ((_DWORD)v13 != -1)
    goto LABEL_23;
  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v21, a1 + 8);
  a1[10] = -1;
LABEL_24:
  *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
  v14 = (unsigned int *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)a1 + 7, v14);
  return a1;
}

unsigned int *std::__optional_destruct_base<WebCore::ShadowData,false>::reset[abi:sn180100](unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*((_BYTE *)result + 64))
  {
    v1 = result;
    v3 = (unsigned int **)(result + 14);
    v2 = *((_QWORD *)result + 7);
    if (v2)
    {
      *v3 = 0;
      do
      {
        v5 = *(_QWORD *)(v2 + 56);
        *(_QWORD *)(v2 + 56) = 0;
        v6 = v5;
        std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)&v6, (unsigned int *)v2);
        v2 = v6;
      }
      while (v6);
    }
    result = (unsigned int *)std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](v3, 0);
    v4 = v1[10];
    if ((_DWORD)v4 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v4])(&v7, v1 + 8);
    v1[10] = -1;
    if (*((_BYTE *)v1 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1[6]);
    }
    if (*((_BYTE *)v1 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1[4]);
    }
    if (*((_BYTE *)v1 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1[2]);
    }
    if (*((_BYTE *)v1 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v1);
    }
    *((_BYTE *)v1 + 64) = 0;
  }
  return result;
}

unsigned int **std::__optional_destruct_base<WebCore::ShadowData,false>::~__optional_destruct_base[abi:sn180100](unsigned int **a1)
{
  uint64_t v2;
  char v4;

  if (*((_BYTE *)a1 + 64))
  {
    if (a1[7])
      WebCore::ShadowData::deleteNextLinkedListWithoutRecursion((WebCore::ShadowData *)a1);
    std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](a1 + 7, 0);
    v2 = *((unsigned int *)a1 + 10);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v4, a1 + 4);
    *((_DWORD *)a1 + 10) = -1;
    if (*((_BYTE *)a1 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)a1 + 6));
    }
    if (*((_BYTE *)a1 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)a1 + 4));
    }
    if (*((_BYTE *)a1 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)a1 + 2));
    }
    if (*((_BYTE *)a1 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a1);
    }
  }
  return a1;
}

void WebCore::StyledMarkedText::Style::~Style(unsigned int **this)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  std::__optional_destruct_base<WebCore::ShadowData,false>::~__optional_destruct_base[abi:sn180100](this + 13);
  v3 = (unint64_t)this[10];
  if ((v3 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v2);
    }
  }
  v4 = (unint64_t)this[8];
  if ((v4 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v2);
    }
  }
  v5 = (unint64_t)this[6];
  if ((v5 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v2);
    }
  }
  v6 = (unint64_t)this[3];
  if ((v6 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v2);
    }
  }
  v7 = (unint64_t)this[2];
  if ((v7 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v2);
    }
  }
  v8 = (unint64_t)this[1];
  if ((v8 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v2);
    }
  }
  if (((unint64_t)*this & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)((unint64_t)*this & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v2);
    }
  }
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,int>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,int,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = 0;
          v15 = *((_DWORD *)v11 + 4) >> 8;
          do
          {
            v16 = v15 & v13;
            v15 = ++v14 + v16;
          }
          while (*(_QWORD *)(v12 + 16 * v16));
          v17 = v12 + 16 * v16;
          *(_QWORD *)v17 = 0;
          v18 = *v10;
          *v10 = 0;
          *(_QWORD *)v17 = v18;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
          v19 = *v10;
          *v10 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v8);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 224 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  char *v25;
  uint64_t v26;

  if (result[2] < a2)
  {
    if (a2 >= 0x124924A)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 224 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(224 * a2));
      v2[2] = (613566757 * (unint64_t)(v5 >> 5)) >> 32;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 224 * v4;
        do
        {
          v10 = &v7[v8 / 4];
          *v10 = 0;
          v11 = (char *)v3 + v8;
          v12 = *(_OWORD *)((char *)v3 + v8 + 4);
          v10[5] = *(_DWORD *)((char *)v3 + v8 + 20);
          *(_OWORD *)(v10 + 1) = v12;
          v13 = *(_QWORD *)((char *)v3 + v8 + 24);
          *(_QWORD *)((char *)v3 + v8 + 24) = 0;
          *((_QWORD *)v10 + 3) = v13;
          v10[8] = *(_DWORD *)((char *)v3 + v8 + 32);
          *((_QWORD *)v10 + 5) = 0;
          v14 = *(_QWORD *)((char *)v3 + v8 + 40);
          if (v14)
          {
            *((_QWORD *)v10 + 5) = v14;
            *(_QWORD *)((char *)v3 + v8 + 40) = 0;
          }
          *((_QWORD *)v10 + 6) = 0;
          v15 = *((_QWORD *)v11 + 6);
          if (v15)
          {
            *((_QWORD *)v10 + 6) = v15;
            *((_QWORD *)v11 + 6) = 0;
          }
          v16 = &v7[v8 / 4];
          v17 = (char *)v3 + v8;
          *(_QWORD *)&v7[v8 / 4 + 14] = 0;
          v18 = *(_QWORD *)((char *)v3 + v8 + 56);
          if (v18)
          {
            *((_QWORD *)v16 + 7) = v18;
            *((_QWORD *)v17 + 7) = 0;
          }
          *((_QWORD *)v16 + 8) = 0;
          v19 = *((_QWORD *)v17 + 8);
          if (v19)
          {
            *((_QWORD *)v16 + 8) = v19;
            *((_QWORD *)v17 + 8) = 0;
          }
          v20 = &v7[v8 / 4];
          v21 = (char *)v3 + v8;
          *(_OWORD *)(v20 + 18) = *(_OWORD *)((char *)v3 + v8 + 72);
          *((_QWORD *)v20 + 11) = 0;
          v22 = *(_QWORD *)((char *)v3 + v8 + 88);
          if (v22)
          {
            *((_QWORD *)v20 + 11) = v22;
            *((_QWORD *)v21 + 11) = 0;
          }
          *((_BYTE *)v20 + 96) = v21[96];
          *((_QWORD *)v20 + 13) = 0;
          v23 = *((_QWORD *)v21 + 13);
          if (v23)
          {
            *((_QWORD *)v20 + 13) = v23;
            *((_QWORD *)v21 + 13) = 0;
          }
          v24 = &v7[v8 / 4];
          v25 = (char *)v3 + v8;
          *((_BYTE *)v24 + 112) = *((_BYTE *)v3 + v8 + 112);
          *((_QWORD *)v24 + 15) = 0;
          v26 = *(_QWORD *)((char *)v3 + v8 + 120);
          if (v26)
          {
            *((_QWORD *)v24 + 15) = v26;
            *((_QWORD *)v25 + 15) = 0;
          }
          *((_BYTE *)v24 + 128) = v25[128];
          *((_BYTE *)v24 + 136) = v25[136];
          *((_BYTE *)v24 + 144) = 0;
          *((_BYTE *)v24 + 208) = 0;
          if (v25[208])
          {
            WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v24 + 36), (WTF *)((char *)v3 + v8 + 144));
            *((_BYTE *)v24 + 208) = 1;
          }
          v7[v8 / 4 + 54] = *(_DWORD *)((char *)v3 + v8 + 216);
          WebCore::StyledMarkedText::Style::~Style((unsigned int **)((char *)v3 + v8 + 40));
          result = (unsigned int *)*((_QWORD *)v11 + 3);
          *((_QWORD *)v11 + 3) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v8 += 224;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::StyledMarkedText::Style::Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  WebCore::ShadowData *v12;

  *(_QWORD *)a1 = 0;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a2 + 24) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a2 + 48) = 0;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  v8 = *(_QWORD *)(a2 + 64);
  if (v8)
  {
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a2 + 64) = 0;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  if (v9)
  {
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a2 + 80) = 0;
  }
  v10 = *(_BYTE *)(a2 + 88);
  v11 = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = 0;
  v12 = (WebCore::ShadowData *)(a1 + 104);
  *(_BYTE *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    WebCore::ShadowData::ShadowData(v12, (const WebCore::ShadowData *)(a2 + 104));
    *(_BYTE *)(a1 + 168) = 1;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  return a1;
}

unsigned int *WebCore::computeStyleForPseudoElementStyle(unsigned int *this, WebCore::StyledMarkedText::Style *a2, const WebCore::RenderStyle *a3, const WebCore::PaintInfo *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62[4];
  uint64_t *v63;

  if (a2)
  {
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16);
    v61 = *((_QWORD *)a2 + 4) + 328;
    v62[0] = (uint64_t)&v61;
    v62[1] = (uint64_t)&v61;
    v62[2] = (uint64_t)&v61;
    v62[3] = (uint64_t)&v61;
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_68:
      this = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
      {
        v43 = __ldaxr(this);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, this));
      if (!v44)
      {
        atomic_store(1u, this);
        return (unsigned int *)WTF::fastFree((WTF *)this, v18);
      }
      return this;
    }
    v8 = this;
    v63 = v62;
    ((void (*)(unint64_t *__return_ptr, uint64_t **, uint64_t, const WebCore::RenderStyle *, const WebCore::PaintInfo *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v6])(&v60, &v63, v5 + 16, a3, a4);
    v10 = *(_QWORD *)v8;
    v11 = v60;
    if ((*(_QWORD *)v8 & 0x8000000000000) != 0)
    {
      if ((v60 & 0x8000000000000) == 0
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v10) != HIBYTE(v60)
        || BYTE6(v10) != BYTE6(v60))
      {
        v45 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v9);
        }
        goto LABEL_6;
      }
    }
    else
    {
      if (v10 != v60 || (v60 & 0x8000000000000) != 0)
      {
LABEL_6:
        *(_QWORD *)v8 = v60;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)v8;
    }
    if ((v11 & 0x8000000000000) != 0)
    {
      v28 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v9);
      }
    }
LABEL_7:
    WebCore::RenderStyle::computedStrokeColor(a2, v62);
    v13 = *((_QWORD *)v8 + 1);
    v14 = v62[0];
    if ((v13 & 0x8000000000000) != 0)
    {
      if ((v62[0] & 0x8000000000000) == 0
        || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v13) != HIBYTE(v62[0])
        || BYTE6(v13) != BYTE6(v62[0]))
      {
        v48 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v12);
        }
        goto LABEL_10;
      }
    }
    else
    {
      if (v13 != v62[0] || (v62[0] & 0x8000000000000) != 0)
      {
LABEL_10:
        *((_QWORD *)v8 + 1) = v62[0];
        goto LABEL_11;
      }
      v14 = *((_QWORD *)v8 + 1);
    }
    if ((v14 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v12);
      }
    }
LABEL_11:
    WebCore::RenderStyle::computedStrokeColor(a2, v62);
    v16 = *((_QWORD *)v8 + 2);
    v17 = v62[0];
    if ((v16 & 0x8000000000000) != 0)
    {
      if ((v62[0] & 0x8000000000000) == 0
        || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v16) != HIBYTE(v62[0])
        || BYTE6(v16) != BYTE6(v62[0]))
      {
        v51 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v51);
          WTF::fastFree((WTF *)v51, v15);
        }
        goto LABEL_14;
      }
    }
    else
    {
      if (v16 != v62[0] || (v62[0] & 0x8000000000000) != 0)
      {
LABEL_14:
        *((_QWORD *)v8 + 2) = v62[0];
        goto LABEL_15;
      }
      v17 = *((_QWORD *)v8 + 2);
    }
    if ((v17 & 0x8000000000000) != 0)
    {
      v34 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v15);
      }
    }
LABEL_15:
    *((_BYTE *)v8 + 36) = (*((_DWORD *)a2 + 11) & 0x200000) != 0;
    this = WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)a2, 254, *((_DWORD *)a3 + 5), (unint64_t *)v62);
    v19 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 636) >> 12) & 7;
    v20 = *((_DWORD *)a2 + 10) >> 15;
    v21 = v20;
    v22 = v62[0];
    if ((v20 & 1) == 0)
    {
      if ((v20 & 2) == 0)
        goto LABEL_17;
      goto LABEL_25;
    }
    v23 = *((_QWORD *)v8 + 6);
    if ((v23 & 0x8000000000000) != 0)
    {
      if ((v62[0] & 0x8000000000000) != 0
        && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v62[0] & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v23) == HIBYTE(v62[0])
        && BYTE6(v23) == BYTE6(v62[0]))
      {
        goto LABEL_24;
      }
      this = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      do
      {
        v54 = __ldaxr(this);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, this));
      if (!v55)
      {
        atomic_store(1u, this);
        this = (unsigned int *)WTF::fastFree((WTF *)this, v18);
      }
    }
    else if (v23 == v62[0] && (v62[0] & 0x8000000000000) == 0)
    {
      goto LABEL_24;
    }
    v22 = v62[0];
    *((_QWORD *)v8 + 6) = v62[0];
    if ((v22 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
      v22 = v62[0];
    }
LABEL_24:
    *((_BYTE *)v8 + 56) = v19;
    if ((v21 & 2) == 0)
    {
LABEL_17:
      if ((v21 & 4) == 0)
        goto LABEL_18;
      goto LABEL_32;
    }
LABEL_25:
    v24 = *((_QWORD *)v8 + 8);
    if ((v24 & 0x8000000000000) != 0)
    {
      if ((v22 & 0x8000000000000) != 0
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v24) == HIBYTE(v22)
        && BYTE6(v24) == BYTE6(v22))
      {
        goto LABEL_31;
      }
      this = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      do
      {
        v56 = __ldaxr(this);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, this));
      if (!v57)
      {
        atomic_store(1u, this);
        this = (unsigned int *)WTF::fastFree((WTF *)this, v18);
      }
    }
    else if (v24 == v22 && (v22 & 0x8000000000000) == 0)
    {
      goto LABEL_31;
    }
    v22 = v62[0];
    *((_QWORD *)v8 + 8) = v62[0];
    if ((v22 & 0x8000000000000) != 0)
    {
      v39 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      v22 = v62[0];
    }
LABEL_31:
    *((_BYTE *)v8 + 72) = v19;
    if ((v21 & 4) == 0)
    {
LABEL_18:
      if ((v22 & 0x8000000000000) == 0)
        return this;
      goto LABEL_68;
    }
LABEL_32:
    v26 = *((_QWORD *)v8 + 10);
    if ((v26 & 0x8000000000000) != 0)
    {
      if ((v22 & 0x8000000000000) != 0
        && *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v26) == HIBYTE(v22)
        && BYTE6(v26) == BYTE6(v22))
      {
        goto LABEL_38;
      }
      this = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      do
      {
        v58 = __ldaxr(this);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, this));
      if (!v59)
      {
        atomic_store(1u, this);
        this = (unsigned int *)WTF::fastFree((WTF *)this, v18);
      }
    }
    else if (v26 == v22 && (v22 & 0x8000000000000) == 0)
    {
LABEL_38:
      *((_BYTE *)v8 + 88) = v19;
      if ((v22 & 0x8000000000000) == 0)
        return this;
      goto LABEL_68;
    }
    v22 = v62[0];
    *((_QWORD *)v8 + 10) = v62[0];
    if ((v22 & 0x8000000000000) != 0)
    {
      v41 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
      v22 = v62[0];
    }
    goto LABEL_38;
  }
  return this;
}

WebCore::StyledMarkedText *WebCore::StyledMarkedText::StyledMarkedText(WebCore::StyledMarkedText *this, const WebCore::MarkedText *a2, uint64_t *a3)
{
  __int128 v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  WebCore::ShadowData *v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  *(_DWORD *)this = 0;
  v5 = *(_OWORD *)((char *)a2 + 4);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 4) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 3) = v6;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  v7 = *a3;
  *((_QWORD *)this + 5) = *a3;
  if ((v7 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  v8 = a3[1];
  *((_QWORD *)this + 6) = v8;
  if ((v8 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v9 = a3[2];
  *((_QWORD *)this + 7) = v9;
  if ((v9 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v10 = a3[3];
  *((_QWORD *)this + 8) = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a3 + 2);
  v11 = a3[6];
  *((_QWORD *)this + 11) = v11;
  if ((v11 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
  }
  *((_BYTE *)this + 96) = *((_BYTE *)a3 + 56);
  v12 = a3[8];
  *((_QWORD *)this + 13) = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v28 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  *((_BYTE *)this + 112) = *((_BYTE *)a3 + 72);
  v13 = a3[10];
  *((_QWORD *)this + 15) = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v14 = *((_BYTE *)a3 + 88);
  v15 = *((_BYTE *)a3 + 96);
  *((_BYTE *)this + 144) = 0;
  v16 = (WebCore::StyledMarkedText *)((char *)this + 144);
  *((_BYTE *)this + 128) = v14;
  *((_BYTE *)this + 136) = v15;
  *((_BYTE *)this + 208) = 0;
  if (*((_BYTE *)a3 + 168))
  {
    WebCore::ShadowData::ShadowData(v16, (const WebCore::ShadowData *)(a3 + 13));
    *((_BYTE *)this + 208) = 1;
  }
  *((_DWORD *)this + 54) = *((_DWORD *)a3 + 44);
  return this;
}

WebCore::StyledMarkedText::Style *WebCore::StyledMarkedText::Style::Style(WebCore::StyledMarkedText::Style *this, const Style *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Style v11;
  Style v12;
  WebCore::ShadowData *v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v5;
  if ((v5 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 6) = v8;
  if ((v8 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  *((_BYTE *)this + 56) = a2[56];
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v9;
  if ((v9 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  *((_BYTE *)this + 72) = a2[72];
  v10 = *((_QWORD *)a2 + 10);
  *((_QWORD *)this + 10) = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  v11 = a2[88];
  v12 = a2[96];
  *((_BYTE *)this + 104) = 0;
  v13 = (WebCore::StyledMarkedText::Style *)((char *)this + 104);
  *((_BYTE *)this + 88) = v11;
  *((_BYTE *)this + 96) = v12;
  *((_BYTE *)this + 168) = 0;
  if (a2[168])
  {
    WebCore::ShadowData::ShadowData(v13, (const WebCore::ShadowData *)(a2 + 104));
    *((_BYTE *)this + 168) = 1;
  }
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  return this;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::redesignedTextCursorEnabled(void)::{lambda(void)#1} &&>>()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  byte_1ECE84252 = result;
  return result;
}

uint64_t WebCore::InlineIterator::InlineBox::renderer(WebCore::InlineIterator::InlineBox *this)
{
  uint64_t v1;
  uint64_t result;
  WebCore *v3;
  const WebCore::InlineIterator::InlineBox *v4;
  const WebCore::RenderStyle *v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::isDecoratingBoxForBackground(v3, v4, v5);
  }
  else
  {
    v7 = &v6;
    result = ((uint64_t (*)(char **, WebCore::InlineIterator::InlineBox *))off_1E343A0E0[v1])(&v7, this);
    if ((*(_BYTE *)(result + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964935F0);
    }
  }
  return result;
}

uint64_t WebCore::isDecoratingBoxForBackground(WebCore *this, const WebCore::InlineIterator::InlineBox *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;

  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 == -1)
    goto LABEL_17;
  v14 = &v13;
  v6 = ((uint64_t (*)(char **, WebCore *, const WebCore::RenderStyle *))off_1E343A0E0[v3])(&v14, this, a3);
  if ((*(_BYTE *)(v6 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196493714);
  }
  if ((*(_BYTE *)(v6 + 45) & 1) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
    if (v7)
    {
      v8 = *(_WORD *)(v7 + 28);
      if ((v8 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196493734);
      }
      if ((v8 & 0x10) != 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
        if (v9 == *(_QWORD *)(WebCore::HTMLNames::aTag + 24) || v9 == *(_QWORD *)(WebCore::HTMLNames::fontTag + 24))
          return 1;
      }
    }
  }
  if ((*((_BYTE *)a2 + 20) & 3) != 0)
    return 1;
  v11 = *((unsigned int *)this + 4);
  if ((_DWORD)v11 == -1)
  {
LABEL_17:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxModernPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_ENKUlvE_clEv(v12);
  }
  else
  {
    v14 = &v13;
    result = ((uint64_t (*)(char **, WebCore *))off_1E343A0B0[v11])(&v14, this);
    if ((_DWORD)result)
      return (*((_DWORD *)a2 + 10) & 0x18000) != 0;
  }
  return result;
}

uint64_t _ZZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxModernPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_ENKUlvE_clEv(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::InlineIterator::Box *v10;
  char v11;
  char *v12;

  v2 = *a2;
  v3 = *(unsigned int *)(*a2 + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v6 = a2[2];
  v12 = &v11;
  if ((((uint64_t (*)(char **, uint64_t))off_1E343A060[v3])(&v12, v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196493810);
  }
  v7 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v7 == -1)
  {
LABEL_8:
    v10 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::logicalTop(v10);
  }
  else
  {
    v12 = &v11;
    v8 = ((uint64_t (*)(char **, uint64_t))off_1E343A0E0[v7])(&v12, v2);
    if ((*(_BYTE *)(v8 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196493830);
    }
    return WebCore::TextDecorationPainter::stylesForRenderer(a1, v8, ((unint64_t)*(unsigned int *)(a2[1] + 40) >> 15) & 0xF, *(unsigned __int8 *)(v6 + 152));
  }
}

uint64_t WebCore::InlineIterator::Box::logicalTop(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t v3;
  float v5;
  double v6;
  float v7;
  char v8;
  char *v9;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1
    || (v9 = &v8,
        ((void (*)(char **, WebCore::InlineIterator::Box *))off_1E343A0F0[v1])(&v9, this),
        v3 = *((unsigned int *)this + 4),
        (_DWORD)v3 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::compareTuples(v5, v6, v7);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E343A0C0[v3])(&v9, this);
  }
}

BOOL WebCore::compareTuples(float a1, double a2, float a3)
{
  return a1 < a3;
}

float32x2_t WTF::Vector<std::pair<float,float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<double,double>>(uint64_t a1, float64x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  result = vcvt_f32_f64(*a2);
  *(float32x2_t *)(*(_QWORD *)a1 + 8 * v8) = result;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*,false>(float *a1, float *a2, uint64_t (**a3)(float, float, float, float), uint64_t a4, char a5)
{
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  float *v16;
  unint64_t v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float *v21;
  char v22;
  BOOL v23;

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(uint64_t result, float *a2, uint64_t (**a3)(float, float, float, float))
{
  float *v4;
  float *v5;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  int v14;
  float *v15;

  if ((float *)result != a2)
  {
    v4 = (float *)result;
    v5 = (float *)(result + 8);
    if ((float *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (float *)result;
      do
      {
        v9 = v5;
        result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if ((_DWORD)result)
        {
          v10 = *v9;
          v11 = v8[3];
          v12 = v7;
          while (1)
          {
            v13 = (float *)((char *)v4 + v12);
            v14 = *(_DWORD *)((char *)v4 + v12 + 4);
            v13[2] = *(float *)((char *)v4 + v12);
            *((_DWORD *)v13 + 3) = v14;
            if (!v12)
              break;
            result = (*a3)(v10, v11, *(v13 - 2), *(v13 - 1));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v15 = (float *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v10;
          v15[1] = v11;
        }
        v5 = v9 + 2;
        v7 += 8;
        v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(uint64_t result, float *a2, uint64_t (**a3)(float, float, float, float))
{
  uint64_t v4;
  float *v5;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  float *v17;
  int v18;

  if ((float *)result != a2)
  {
    v4 = result;
    v5 = (float *)(result + 8);
    if ((float *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (float *)(result + 12);
      v9 = -2;
      v10 = 1;
      v11 = (float *)result;
      while (1)
      {
        v12 = v4 + 8 * v7;
        v7 = v10;
        result = (*a3)(*v5, v11[3], *v11, *(float *)(v12 + 4));
        if ((_DWORD)result)
          break;
LABEL_9:
        v11 = (float *)(v4 + 8 * v7);
        v10 = v7 + 1;
        v5 = (float *)(v4 + 8 * (v7 + 1));
        --v9;
        v8 += 2;
        if (v5 == a2)
          return result;
      }
      v13 = *v5;
      v14 = v11[3];
      v15 = v8;
      v16 = v9;
      v17 = v8;
      while (1)
      {
        v18 = *((_DWORD *)v17 - 2);
        v17 -= 2;
        *(v15 - 1) = *(v15 - 3);
        *(_DWORD *)v15 = v18;
        if (__CFADD__(v16++, 1))
          break;
        result = (*a3)(v13, v14, *(v15 - 5), *(v15 - 4));
        v15 = v17;
        if ((result & 1) == 0)
        {
          *(v17 - 1) = v13;
          *v17 = v14;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

float std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(float *a1, float *a2, float *a3, uint64_t (**a4)(float, float, float, float))
{
  float *v8;
  float *v9;
  char v10;
  int v11;
  float result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v8 = a2 + 1;
  v9 = a1 + 1;
  v10 = (*a4)(*a2, a2[1], *a1, a1[1]);
  v11 = (*a4)(*a3, a3[1], *a2, *v8);
  if ((v10 & 1) != 0)
  {
    v13 = *(_DWORD *)a1;
    if (v11)
    {
      *a1 = *a3;
      *(_DWORD *)a3 = v13;
    }
    else
    {
      *a1 = *a2;
      *(_DWORD *)a2 = v13;
      v17 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v17;
      if (!((unsigned int (*)(float, float, float))*a4)(*a3, a3[1], *a2))
        return result;
      v18 = *(_DWORD *)a2;
      *a2 = *a3;
      *(_DWORD *)a3 = v18;
      v9 = v8;
    }
    v8 = a3 + 1;
    goto LABEL_10;
  }
  if (v11)
  {
    v14 = *(_DWORD *)a2;
    *a2 = *a3;
    *(_DWORD *)a3 = v14;
    v15 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v15;
    if ((*a4)(*a2, a2[1], *a1, a1[1]))
    {
      v16 = *(_DWORD *)a1;
      *a1 = *a2;
      *(_DWORD *)a2 = v16;
LABEL_10:
      result = *v9;
      *v9 = *v8;
      *v8 = result;
    }
  }
  return result;
}

uint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,std::pair<float,float> *,BOOL (*&)(std::pair<float,float>,std::pair<float,float>)>(float *a1, float *a2, uint64_t (**a3)(float, float, float, float))
{
  float v6;
  float v7;
  uint64_t result;
  float *v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v6 = *a1;
  v7 = a1[1];
  result = (*a3)(*a1, v7, *(a2 - 2), *(a2 - 1));
  if ((result & 1) != 0)
  {
    v9 = a1 + 2;
    while (v9 != a2)
    {
      v10 = *v9;
      v11 = v9[1];
      v9 += 2;
      result = (*a3)(v6, v7, v10, v11);
      if ((result & 1) != 0)
      {
        v12 = v9 - 2;
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v13 = a1 + 2;
  do
  {
    v12 = v13;
    if (v13 >= a2)
      break;
    result = (*a3)(v6, v7, *v13, v13[1]);
    v13 = v12 + 2;
  }
  while ((result & 1) == 0);
LABEL_9:
  v14 = a2;
  if (v12 < a2)
  {
    v14 = a2;
    while (v14 != a1)
    {
      v15 = *(v14 - 2);
      v16 = *(v14 - 1);
      v14 -= 2;
      result = (*a3)(v6, v7, v15, v16);
      if ((result & 1) == 0)
        goto LABEL_20;
    }
    goto LABEL_24;
  }
LABEL_20:
  if (v12 < v14)
  {
    v17 = *v12;
    *v12 = *v14;
    *v14 = v17;
    v18 = *((_DWORD *)v12 + 1);
    v12[1] = v14[1];
    *((_DWORD *)v14 + 1) = v18;
    v19 = v12 + 2;
    while (v19 != a2)
    {
      v20 = *v19;
      v21 = v19[1];
      v19 += 2;
      result = (*a3)(v6, v7, v20, v21);
      if ((_DWORD)result)
      {
        v12 = v19 - 2;
        while (v14 != a1)
        {
          v22 = *(v14 - 2);
          v23 = *(v14 - 1);
          v14 -= 2;
          result = (*a3)(v6, v7, v22, v23);
          if ((result & 1) == 0)
            goto LABEL_20;
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    a1[1] = *(v12 - 1);
  }
  *(v12 - 2) = v6;
  *(v12 - 1) = v7;
  return (uint64_t)v12;
}

uint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,std::pair<float,float> *,BOOL (*&)(std::pair<float,float>,std::pair<float,float>)>(uint64_t result, float *a2, uint64_t (**a3)(float, float, float, float))
{
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  int v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v5 = (float *)result;
  v6 = 0;
  v7 = *(float *)result;
  v8 = *(float *)(result + 4);
  do
  {
    v9 = &v5[v6 + 2];
    if (v9 == a2)
      goto LABEL_24;
    result = (*a3)(*v9, v5[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((result & 1) != 0);
  v10 = &v5[v6];
  if (v6 != 2)
  {
    v11 = a2;
    while (v11 != v5)
    {
      v12 = *(v11 - 2);
      v13 = *(v11 - 1);
      v11 -= 2;
      result = (*a3)(v12, v13, v7, v8);
      if ((_DWORD)result)
        goto LABEL_12;
    }
    goto LABEL_24;
  }
  v11 = a2;
  do
  {
    if (v10 >= v11)
      break;
    v14 = *(v11 - 2);
    v15 = *(v11 - 1);
    v11 -= 2;
    result = (*a3)(v14, v15, v7, v8);
  }
  while ((result & 1) == 0);
LABEL_12:
  v16 = v10;
  if (v10 < v11)
  {
    v17 = v11;
LABEL_14:
    v18 = *v16;
    *v16 = *v17;
    *v17 = v18;
    v19 = *((_DWORD *)v16 + 1);
    v16[1] = v17[1];
    *((_DWORD *)v17 + 1) = v19;
    v20 = v16 + 2;
    while (v20 != a2)
    {
      v21 = *v20;
      v22 = v20[1];
      v20 += 2;
      result = (*a3)(v21, v22, v7, v8);
      if ((result & 1) == 0)
      {
        v16 = v20 - 2;
        while (v17 != v5)
        {
          v23 = *(v17 - 2);
          v24 = *(v17 - 1);
          v17 -= 2;
          result = (*a3)(v23, v24, v7, v8);
          if ((_DWORD)result)
          {
            if (v16 < v17)
              goto LABEL_14;
            goto LABEL_21;
          }
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_21:
  result = (uint64_t)(v16 - 2);
  if (v16 - 2 != v5)
  {
    *v5 = *(v16 - 2);
    v5[1] = *(v16 - 1);
  }
  *(v16 - 2) = v7;
  *(v16 - 1) = v8;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(float *a1, float *a2, uint64_t (**a3)(float, float, float, float))
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  float *v10;
  float *v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  int v18;
  float *v19;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(uint64_t, float, float, float, float))*a3)(1, *(a2 - 2), *(a2 - 1), *a1, a1[1]))
      {
        v8 = *(_DWORD *)a1;
        *a1 = *(a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
        v9 = *((_DWORD *)a1 + 1);
        a1[1] = *(a2 - 1);
        *((_DWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*v11, v11[1], *v10, v10[1]))
    {
      v14 = *v11;
      v15 = v11[1];
      v16 = v12;
      while (1)
      {
        v17 = (float *)((char *)a1 + v16);
        v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        v17[6] = *(float *)((char *)a1 + v16 + 16);
        *((_DWORD *)v17 + 7) = v18;
        if (v16 == -16)
          break;
        v16 -= 8;
        if (((*a3)(v14, v15, v17[2], v17[3]) & 1) == 0)
        {
          v19 = (float *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v14;
      v19[1] = v15;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

float std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(float *a1, float *a2, float *a3, float *a4, uint64_t (**a5)(float, float, float, float))
{
  float result;
  float v11;
  int v12;
  float v13;
  int v14;
  float v15;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v12;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v14;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        result = a1[1];
        a1[1] = a2[1];
        a2[1] = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t (**a6)(float, float, float, float))
{
  float result;
  float v13;
  int v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float v19;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, a2, a3, a4, a6);
  if ((*a6)(*a5, a5[1], *a4, a4[1]))
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = *((_DWORD *)a4 + 1);
    a4[1] = a5[1];
    *((_DWORD *)a5 + 1) = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = *((_DWORD *)a3 + 1);
      a3[1] = a4[1];
      *((_DWORD *)a4 + 1) = v16;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = *((_DWORD *)a2 + 1);
        a2[1] = a3[1];
        *((_DWORD *)a3 + 1) = v18;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          result = a1[1];
          a1[1] = a2[1];
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*,std::pair<float,float>*>(uint64_t result, float *a2, float *a3, unsigned int (**a4)(float, float, float, float))
{
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float *v28;
  float v29;
  float v30;
  float *v31;
  BOOL v32;

  if ((float *)result != a2)
  {
    v6 = a2;
    v7 = (float *)result;
    v8 = (uint64_t)a2 - result;
    v9 = ((uint64_t)a2 - result) >> 3;
    if ((uint64_t)a2 - result >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (float *)(result + 8 * v10);
      do
      {
        result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>((uint64_t)v7, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        result = ((uint64_t (*)(uint64_t, float, float, float, float))*a4)(result, *v13, v13[1], *v7, v7[1]);
        if ((_DWORD)result)
        {
          v14 = *(_DWORD *)v13;
          *v13 = *v7;
          *(_DWORD *)v7 = v14;
          v15 = *((_DWORD *)v13 + 1);
          v13[1] = v7[1];
          *((_DWORD *)v7 + 1) = v15;
          result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>((uint64_t)v7, a4, v9, v7);
        }
        v13 += 2;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      while (v16 > 0)
      {
        if (v16 != 1)
        {
          v17 = 0;
          v19 = *v7;
          v18 = *((_DWORD *)v7 + 1);
          v20 = v7;
          do
          {
            v21 = &v20[2 * v17 + 2];
            v22 = (2 * v17) | 1;
            v23 = 2 * v17 + 2;
            if (v23 < v16)
            {
              result = ((uint64_t (*)(uint64_t, float, float, float, float))*a4)(result, *v21, v21[1], v21[2], v21[3]);
              if ((_DWORD)result)
              {
                v21 += 2;
                v22 = v23;
              }
            }
            *v20 = *v21;
            v20[1] = v21[1];
            v20 = v21;
            v17 = v22;
          }
          while (v22 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
          v24 = v6 - 2;
          if (v21 == v6 - 2)
          {
            *v21 = v19;
            *((_DWORD *)v21 + 1) = v18;
            v26 = v16 - 1;
          }
          else
          {
            *v21 = *(v6 - 2);
            v21[1] = *(v6 - 1);
            *(v6 - 2) = v19;
            *((_DWORD *)v6 - 1) = v18;
            v25 = (char *)v21 - (char *)v7 + 8;
            v26 = v16 - 1;
            if (v25 >= 9)
            {
              v27 = (((unint64_t)v25 >> 3) - 2) >> 1;
              v28 = &v7[2 * v27];
              result = ((uint64_t (*)(float, float, float, float))*a4)(*v28, v28[1], *v21, v21[1]);
              if ((_DWORD)result)
              {
                v29 = *v21;
                v30 = v21[1];
                do
                {
                  v31 = v21;
                  v21 = v28;
                  *v31 = *v28;
                  v31[1] = v28[1];
                  if (!v27)
                    break;
                  v27 = (v27 - 1) >> 1;
                  v28 = &v7[2 * v27];
                  result = ((uint64_t (*)(float, float, float, float))*a4)(*v28, v28[1], v29, v30);
                }
                while ((result & 1) != 0);
                *v21 = v29;
                v21[1] = v30;
              }
            }
          }
          v6 = v24;
          v32 = (unint64_t)v16 > 2;
          v16 = v26;
          if (v32)
            continue;
        }
        return result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(uint64_t result, unsigned int (**a2)(float, float, float, float), uint64_t a3, float *a4)
{
  unint64_t v4;
  float *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (float *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1], v12[2], v12[3]))
      {
        v12 += 2;
        v11 = v13;
      }
      result = ((uint64_t (*)(float, float, float, float))*a2)(*v12, v12[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        v15 = v5[1];
        do
        {
          v16 = v5;
          v5 = v12;
          *v16 = *v12;
          v16[1] = v12[1];
          if (v7 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = (float *)(v6 + 8 * v17);
          v18 = 2 * v11 + 2;
          if (v18 < a3)
          {
            if ((*a2)(*v12, v12[1], v12[2], v12[3]))
            {
              v12 += 2;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(float, float, float, float))*a2)(*v12, v12[1], v14, v15);
          v11 = v17;
        }
        while (!(_DWORD)result);
        *v5 = v14;
        v5[1] = v15;
      }
    }
  }
  return result;
}

double WTF::Vector<std::pair<float,float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<float,float>&>(uint64_t a1, unint64_t a2)
{
  double *v3;
  uint64_t v4;
  double result;

  v3 = (double *)WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  result = *v3;
  *(double *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float &>(uint64_t result, float *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    *(double *)(*(_QWORD *)v3 + 8 * v12) = *a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

char *WebCore::collectStylesForRenderer(WebCore::TextDecorationPainter::Styles &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::TextDecorationLine>,BOOL,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::PseudoId)::$_1::operator()(int a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t CachedPseudoStyle;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderElement *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;

  if (a1)
  {
    if ((*(_BYTE *)(a3 + 45) & 2) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
      if (((*(unsigned __int16 *)(v7 + 102) >> (a1 - 1)) & 1) != 0)
      {
        v13 = a1;
        v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v6 += 2;
        v14 = v6;
        while ((*(_BYTE *)(v7 + 45) & 1) != 0)
        {
          v8 = *(_QWORD *)(v7 + 32);
          if (v8)
          {
            v7 = *(_QWORD *)(v8 + 8);
            if (v7)
              continue;
          }
          CachedPseudoStyle = 0;
          goto LABEL_8;
        }
        v4 = v7;
        goto LABEL_7;
      }
    }
    else if (((*(unsigned __int16 *)(a3 + 102) >> (a1 - 1)) & 1) != 0)
    {
      v13 = a1;
      v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v3 += 2;
      v14 = v3;
      v4 = a3;
LABEL_7:
      CachedPseudoStyle = WebCore::RenderElement::getCachedPseudoStyle(v4, (uint64_t)&v13, 0);
      v6 = v14;
LABEL_8:
      v14 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      return (char *)CachedPseudoStyle;
    }
  }
  if (!*(_BYTE *)a2)
  {
    if ((*(_BYTE *)(a3 + 45) & 2) != 0)
    {
      v12 = *(_QWORD *)(a3 + 32);
      if (v12)
        a3 = *(_QWORD *)(v12 + 8);
      else
        a3 = 0;
    }
    return (char *)(a3 + 80);
  }
  if ((*(_BYTE *)(a3 + 45) & 2) != 0)
  {
    v11 = *(_QWORD *)(a3 + 32);
    if (v11)
      v9 = *(WebCore::RenderElement **)(v11 + 8);
    else
      v9 = 0;
  }
  else
  {
    v9 = (WebCore::RenderElement *)a3;
  }
  return WebCore::RenderElement::firstLineStyle(v9, a2);
}

int **WebCore::collectStylesForRenderer(WebCore::TextDecorationPainter::Styles &,WebCore::RenderObject const&,WTF::OptionSet<WebCore::TextDecorationLine>,BOOL,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::PseudoId)::$_0::operator()(int **result, uint64_t a2, char a3)
{
  int **v5;
  void *v6;
  int v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  int *v16;
  unint64_t v17;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int *v33;
  int *v34;
  unint64_t v35;

  if (a3)
  {
    v5 = result;
    result = (int **)WebCore::RenderStyle::visitedDependentColorWithColorFilter(a2, 254, **result, &v35);
    v7 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 636) >> 12) & 7;
    v8 = v35;
    if ((a3 & 1) == 0)
    {
      if ((a3 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
    v9 = v5[2];
    *(_BYTE *)v5[1] &= ~1u;
    v10 = *(_QWORD *)v9;
    if ((*(_QWORD *)v9 & 0x8000000000000) != 0)
    {
      if ((v8 & 0x8000000000000) != 0
        && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v10) == HIBYTE(v8)
        && BYTE6(v10) == BYTE6(v8))
      {
        goto LABEL_13;
      }
      v33 = v9;
      result = (int **)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v27 = __ldaxr((unsigned int *)result);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)result));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (int **)WTF::fastFree((WTF *)result, v6);
        v9 = v33;
      }
    }
    else if (v10 == v8 && (v8 & 0x8000000000000) == 0)
    {
      goto LABEL_13;
    }
    v12 = v35;
    *(_QWORD *)v9 = v35;
    if ((v12 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
LABEL_13:
    *((_BYTE *)v5[2] + 8) = v7;
    v8 = v35;
    if ((a3 & 2) == 0)
    {
LABEL_4:
      if ((a3 & 4) == 0)
        goto LABEL_5;
      goto LABEL_21;
    }
LABEL_14:
    v13 = v5[2];
    *(_BYTE *)v5[1] &= ~2u;
    v14 = *((_QWORD *)v13 + 2);
    if ((v14 & 0x8000000000000) != 0)
    {
      if ((v8 & 0x8000000000000) != 0
        && *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v14) == HIBYTE(v8)
        && BYTE6(v14) == BYTE6(v8))
      {
        goto LABEL_20;
      }
      v34 = v13;
      result = (int **)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr((unsigned int *)result);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)result));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (int **)WTF::fastFree((WTF *)result, v6);
        v13 = v34;
      }
    }
    else if (v14 == v8 && (v8 & 0x8000000000000) == 0)
    {
      goto LABEL_20;
    }
    v8 = v35;
    *((_QWORD *)v13 + 2) = v35;
    if ((v8 & 0x8000000000000) != 0)
    {
      v21 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v8 = v35;
    }
LABEL_20:
    *((_BYTE *)v5[2] + 24) = v7;
    if ((a3 & 4) == 0)
    {
LABEL_5:
      if ((v8 & 0x8000000000000) == 0)
        return result;
LABEL_38:
      result = (int **)(v8 & 0xFFFFFFFFFFFFLL);
      do
      {
        v25 = __ldaxr((unsigned int *)result);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)result));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)result);
        return (int **)WTF::fastFree((WTF *)result, v6);
      }
      return result;
    }
LABEL_21:
    v16 = v5[2];
    *(_BYTE *)v5[1] &= ~4u;
    v17 = *((_QWORD *)v16 + 4);
    if ((v17 & 0x8000000000000) != 0)
    {
      if ((v8 & 0x8000000000000) != 0
        && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v17) == HIBYTE(v8)
        && BYTE6(v17) == BYTE6(v8))
      {
        goto LABEL_27;
      }
      result = (int **)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v31 = __ldaxr((unsigned int *)result);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, (unsigned int *)result));
      if (!v32)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (int **)WTF::fastFree((WTF *)result, v6);
      }
    }
    else if (v17 == v8 && (v8 & 0x8000000000000) == 0)
    {
LABEL_27:
      *((_BYTE *)v5[2] + 40) = v7;
      if ((v8 & 0x8000000000000) == 0)
        return result;
      goto LABEL_38;
    }
    v8 = v35;
    *((_QWORD *)v16 + 4) = v35;
    if ((v8 & 0x8000000000000) != 0)
    {
      v23 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v8 = v35;
    }
    goto LABEL_27;
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _DWORD *result;
  void *v6;
  WTF **v7;

  v2 = WebCore::widgetRendererMap(void)::staticWidgetRendererMap;
  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
  {
    LODWORD(v3) = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 4);
    v4 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12);
  }
  else
  {
    LODWORD(v3) = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::widgetRendererMap(void)::staticWidgetRendererMap = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) = v4;
  if ((_DWORD)v3)
  {
    v3 = v3;
    v7 = (WTF **)v2;
    do
    {
      if (*v7 != (WTF *)-1)
      {
        if (*v7)
          WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::reinsert(v7, v6);
        WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>::~KeyValuePair(v7, v6);
      }
      v7 += 2;
      --v3;
    }
    while (v3);
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

WTF **WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>::~KeyValuePair(WTF **a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return a1;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::reinsert(WTF **a1, void *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  WTF **v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  void *v16;
  WTF *v17;

  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
    v3 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 8);
  else
    v3 = 0;
  v4 = ~(*((_QWORD *)*a1 + 1) << 32) + *((_QWORD *)*a1 + 1);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (WTF **)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v9);
  v12 = v11[1];
  v11[1] = 0;
  if (!v12)
    goto LABEL_6;
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
LABEL_6:
    *v11 = 0;
    goto LABEL_7;
  }
  WTF::fastFree(v12, a2);
  v17 = *v11;
  *v11 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, v16);
    else
      --*(_DWORD *)v17;
  }
LABEL_7:
  v13 = *a1;
  *a1 = 0;
  *v11 = v13;
  v14 = a1[1];
  a1[1] = 0;
  v11[1] = v14;
  return v11;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::expand()
{
  int v0;

  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap
    && (v0 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 4)) != 0)
  {
    return WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u);
  }
}

_QWORD *WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::inlineSet<WebCore::OverlapTestRequestClient *,WebCore::IntRect>(_QWORD *result, uint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::OverlapTestRequestClient *,WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>>,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::OverlapTestRequestClient *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (_QWORD *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(_DWORD *)(v8 - 4);
        *v7 = v16;
        v7[1] = v8 + 24 * v27;
        *((_BYTE *)v7 + 16) = 0;
        *(_OWORD *)(v16 + 1) = *a4;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  *(_OWORD *)(v16 + 1) = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_19;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_25:
      result = WTF::HashTable<WebCore::OverlapTestRequestClient *,WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>>,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::OverlapTestRequestClient *>>::rehash(a2, v26, v16);
      v16 = result;
      v22 = *a2;
      if (*a2)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
      goto LABEL_27;
    }
LABEL_19:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_25;
  }
LABEL_27:
  *v7 = v16;
  v7[1] = v22 + 24 * v25;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

float WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyledMarkedText>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE *v36;
  float result;

  v3 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = v3;
  v5 = a1[3];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 224 * v5;
  *(_DWORD *)v7 = 0;
  v8 = *(_OWORD *)(v3 + 4);
  v9 = *(_DWORD *)(v3 + 20);
  *(_QWORD *)(v7 + 40) = 0;
  v10 = (_QWORD *)(v7 + 40);
  *((_DWORD *)v10 - 5) = v9;
  *(_OWORD *)((char *)v10 - 36) = v8;
  v11 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(v10 - 2) = v11;
  *((_DWORD *)v10 - 2) = *(_DWORD *)(v3 + 32);
  v12 = *(_QWORD *)(v3 + 40);
  if (v12)
  {
    *v10 = v12;
    *(_QWORD *)(v3 + 40) = 0;
  }
  v13 = v6 + 224 * v5;
  *(_QWORD *)(v13 + 48) = 0;
  v14 = (_QWORD *)(v13 + 48);
  v15 = *(_QWORD *)(v3 + 48);
  if (v15)
  {
    *v14 = v15;
    *(_QWORD *)(v3 + 48) = 0;
  }
  v16 = v6 + 224 * v5;
  *(_QWORD *)(v16 + 56) = 0;
  v17 = (_QWORD *)(v16 + 56);
  v18 = *(_QWORD *)(v3 + 56);
  if (v18)
  {
    *v17 = v18;
    *(_QWORD *)(v3 + 56) = 0;
  }
  v19 = v6 + 224 * v5;
  *(_QWORD *)(v19 + 64) = 0;
  v20 = (_QWORD *)(v19 + 64);
  v21 = *(_QWORD *)(v3 + 64);
  if (v21)
  {
    *v20 = v21;
    *(_QWORD *)(v3 + 64) = 0;
  }
  v22 = v6 + 224 * v5;
  v23 = *(_OWORD *)(v3 + 72);
  *(_QWORD *)(v22 + 88) = 0;
  v24 = (_QWORD *)(v22 + 88);
  *((_OWORD *)v24 - 1) = v23;
  v25 = *(_QWORD *)(v3 + 88);
  if (v25)
  {
    *v24 = v25;
    *(_QWORD *)(v3 + 88) = 0;
  }
  v26 = v6 + 224 * v5;
  v27 = *(_BYTE *)(v3 + 96);
  *(_QWORD *)(v26 + 104) = 0;
  v28 = (_QWORD *)(v26 + 104);
  *((_BYTE *)v28 - 8) = v27;
  v29 = *(_QWORD *)(v3 + 104);
  if (v29)
  {
    *v28 = v29;
    *(_QWORD *)(v3 + 104) = 0;
  }
  v30 = v6 + 224 * v5;
  v31 = *(_BYTE *)(v3 + 112);
  *(_QWORD *)(v30 + 120) = 0;
  v32 = (_QWORD *)(v30 + 120);
  *((_BYTE *)v32 - 8) = v31;
  v33 = *(_QWORD *)(v3 + 120);
  if (v33)
  {
    *v32 = v33;
    *(_QWORD *)(v3 + 120) = 0;
  }
  v34 = v6 + 224 * v5;
  v35 = *(_BYTE *)(v3 + 128);
  *(_BYTE *)(v34 + 208) = 0;
  v36 = (_BYTE *)(v34 + 208);
  *(v36 - 80) = v35;
  *(v36 - 72) = *(_BYTE *)(v3 + 136);
  *(v36 - 64) = 0;
  if (*(_BYTE *)(v3 + 208))
  {
    WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v36 - 64), (const WebCore::ShadowData *)(v3 + 144));
    *v36 = 1;
  }
  result = *(float *)(v4 + 216);
  *(float *)(v6 + 224 * v5 + 216) = result;
  ++a1[3];
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::MarkedText>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  for (; (WTF::StringImpl *)result != a2; a3 += 40)
  {
    *(_DWORD *)a3 = 0;
    v5 = *(_OWORD *)(result + 4);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 20);
    *(_OWORD *)(a3 + 4) = v5;
    v6 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(a3 + 24) = v6;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(result + 32);
    WebCore::MarkedText::~MarkedText((WebCore::MarkedText *)result, a2);
    result = v7 + 40;
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::StyledMarkedText>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  WTF::StringImpl *v44;

  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      v25 = 0;
      v26 = a3 + a2 - result;
      do
      {
        v27 = v26 + v25;
        *(_DWORD *)(v27 - 224) = 0;
        v28 = (char *)a2 + v25;
        v29 = *(_OWORD *)((char *)a2 + v25 - 220);
        *(_DWORD *)(v27 - 204) = *(_DWORD *)((char *)a2 + v25 - 204);
        *(_OWORD *)(v27 - 220) = v29;
        v30 = *(_QWORD *)((char *)a2 + v25 - 200);
        *(_QWORD *)((char *)a2 + v25 - 200) = 0;
        *(_QWORD *)(v27 - 200) = v30;
        *(_DWORD *)(v27 - 192) = *(_DWORD *)((char *)a2 + v25 - 192);
        *(_QWORD *)(v27 - 184) = 0;
        v31 = *(_QWORD *)((char *)a2 + v25 - 184);
        if (v31)
        {
          *(_QWORD *)(v27 - 184) = v31;
          *(_QWORD *)((char *)a2 + v25 - 184) = 0;
        }
        *(_QWORD *)(v27 - 176) = 0;
        v32 = *((_QWORD *)v28 - 22);
        if (v32)
        {
          *(_QWORD *)(v27 - 176) = v32;
          *((_QWORD *)v28 - 22) = 0;
        }
        v33 = v26 + v25;
        v34 = (char *)a2 + v25;
        *(_QWORD *)(v26 + v25 - 168) = 0;
        v35 = *(_QWORD *)((char *)a2 + v25 - 168);
        if (v35)
        {
          *(_QWORD *)(v33 - 168) = v35;
          *((_QWORD *)v34 - 21) = 0;
        }
        *(_QWORD *)(v33 - 160) = 0;
        v36 = *((_QWORD *)v34 - 20);
        if (v36)
        {
          *(_QWORD *)(v33 - 160) = v36;
          *((_QWORD *)v34 - 20) = 0;
        }
        v37 = v26 + v25;
        v38 = (char *)a2 + v25;
        *(_OWORD *)(v37 - 152) = *(_OWORD *)((char *)a2 + v25 - 152);
        *(_QWORD *)(v37 - 136) = 0;
        v39 = *(_QWORD *)((char *)a2 + v25 - 136);
        if (v39)
        {
          *(_QWORD *)(v37 - 136) = v39;
          *((_QWORD *)v38 - 17) = 0;
        }
        *(_BYTE *)(v37 - 128) = *(v38 - 128);
        *(_QWORD *)(v37 - 120) = 0;
        v40 = *((_QWORD *)v38 - 15);
        if (v40)
        {
          *(_QWORD *)(v37 - 120) = v40;
          *((_QWORD *)v38 - 15) = 0;
        }
        v41 = v26 + v25;
        v42 = (char *)a2 + v25;
        *(_BYTE *)(v41 - 112) = *((_BYTE *)a2 + v25 - 112);
        *(_QWORD *)(v41 - 104) = 0;
        v43 = *(_QWORD *)((char *)a2 + v25 - 104);
        if (v43)
        {
          *(_QWORD *)(v41 - 104) = v43;
          *((_QWORD *)v42 - 13) = 0;
        }
        *(_BYTE *)(v41 - 96) = *(v42 - 96);
        *(_BYTE *)(v41 - 88) = *(v42 - 88);
        *(_BYTE *)(v41 - 80) = 0;
        *(_BYTE *)(v41 - 16) = 0;
        if (*(v42 - 16))
        {
          WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v41 - 80), (WTF::StringImpl *)((char *)a2 + v25 - 80));
          *(_BYTE *)(v41 - 16) = 1;
        }
        *(_DWORD *)(v26 + v25 - 8) = *(_DWORD *)((char *)a2 + v25 - 8);
        WebCore::StyledMarkedText::Style::~Style((unsigned int **)((char *)a2 + v25 - 184));
        result = (WTF::StringImpl *)*((_QWORD *)v28 - 25);
        *((_QWORD *)v28 - 25) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v44);
          else
            *(_DWORD *)result -= 2;
        }
        v25 -= 224;
      }
      while ((WTF::StringImpl *)((char *)a2 + v25) != v5);
    }
  }
  else if (result != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_DWORD *)v7 = 0;
      v8 = (char *)v5 + v6;
      v9 = *(_OWORD *)((char *)v5 + v6 + 4);
      *(_DWORD *)(v7 + 20) = *(_DWORD *)((char *)v5 + v6 + 20);
      *(_OWORD *)(v7 + 4) = v9;
      v10 = *(_QWORD *)((char *)v5 + v6 + 24);
      *(_QWORD *)((char *)v5 + v6 + 24) = 0;
      *(_QWORD *)(v7 + 24) = v10;
      *(_DWORD *)(v7 + 32) = *(_DWORD *)((char *)v5 + v6 + 32);
      *(_QWORD *)(v7 + 40) = 0;
      v11 = *(_QWORD *)((char *)v5 + v6 + 40);
      if (v11)
      {
        *(_QWORD *)(v7 + 40) = v11;
        *(_QWORD *)((char *)v5 + v6 + 40) = 0;
      }
      *(_QWORD *)(v7 + 48) = 0;
      v12 = *((_QWORD *)v8 + 6);
      if (v12)
      {
        *(_QWORD *)(v7 + 48) = v12;
        *((_QWORD *)v8 + 6) = 0;
      }
      v13 = a3 + v6;
      v14 = (char *)v5 + v6;
      *(_QWORD *)(a3 + v6 + 56) = 0;
      v15 = *(_QWORD *)((char *)v5 + v6 + 56);
      if (v15)
      {
        *(_QWORD *)(v13 + 56) = v15;
        *((_QWORD *)v14 + 7) = 0;
      }
      *(_QWORD *)(v13 + 64) = 0;
      v16 = *((_QWORD *)v14 + 8);
      if (v16)
      {
        *(_QWORD *)(v13 + 64) = v16;
        *((_QWORD *)v14 + 8) = 0;
      }
      v17 = a3 + v6;
      v18 = (char *)v5 + v6;
      *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)v5 + v6 + 72);
      *(_QWORD *)(v17 + 88) = 0;
      v19 = *(_QWORD *)((char *)v5 + v6 + 88);
      if (v19)
      {
        *(_QWORD *)(v17 + 88) = v19;
        *((_QWORD *)v18 + 11) = 0;
      }
      *(_BYTE *)(v17 + 96) = v18[96];
      *(_QWORD *)(v17 + 104) = 0;
      v20 = *((_QWORD *)v18 + 13);
      if (v20)
      {
        *(_QWORD *)(v17 + 104) = v20;
        *((_QWORD *)v18 + 13) = 0;
      }
      v21 = a3 + v6;
      v22 = (char *)v5 + v6;
      *(_BYTE *)(v21 + 112) = *((_BYTE *)v5 + v6 + 112);
      *(_QWORD *)(v21 + 120) = 0;
      v23 = *(_QWORD *)((char *)v5 + v6 + 120);
      if (v23)
      {
        *(_QWORD *)(v21 + 120) = v23;
        *((_QWORD *)v22 + 15) = 0;
      }
      *(_BYTE *)(v21 + 128) = v22[128];
      *(_BYTE *)(v21 + 136) = v22[136];
      *(_BYTE *)(v21 + 144) = 0;
      *(_BYTE *)(v21 + 208) = 0;
      if (v22[208])
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v21 + 144), (WTF::StringImpl *)((char *)v5 + v6 + 144));
        *(_BYTE *)(v21 + 208) = 1;
      }
      *(_DWORD *)(a3 + v6 + 216) = *(_DWORD *)((char *)v5 + v6 + 216);
      WebCore::StyledMarkedText::Style::~Style((unsigned int **)((char *)v5 + v6 + 40));
      result = (WTF::StringImpl *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 224;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t WebCore::CompositionHighlight::CompositionHighlight(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(result + 8) = v2;
    if ((v2 & 0x8000000000000) != 0)
    {
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    *(_BYTE *)(result + 16) = 1;
  }
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(result + 24) = v3;
    if ((v3 & 0x8000000000000) != 0)
    {
      v6 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_QWORD *)(result + 8) = 0;
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      *(_QWORD *)(result + 8) = v2;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_BYTE *)(result + 16) = 1;
  }
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)(result + 24) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      *(_QWORD *)(result + 24) = v3;
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

char *WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>(uint64_t a1, unint64_t a2)
{
  char *result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 40 * v4;
  *(_QWORD *)v6 = *(_QWORD *)result;
  *(_BYTE *)(v6 + 8) = 0;
  v7 = (_QWORD *)(v6 + 8);
  *(_BYTE *)(v6 + 16) = 0;
  v8 = (_BYTE *)(v6 + 16);
  if (result[16])
  {
    *v7 = 0;
    v9 = *((_QWORD *)result + 1);
    if (v9)
    {
      *v7 = v9;
      *((_QWORD *)result + 1) = 0;
    }
    *v8 = 1;
  }
  v10 = v5 + 40 * v4;
  *(_BYTE *)(v10 + 24) = 0;
  v11 = v10 + 24;
  *(_BYTE *)(v11 + 8) = 0;
  if (result[32])
  {
    *(_QWORD *)v11 = 0;
    v12 = *((_QWORD *)result + 3);
    if (v12)
    {
      *(_QWORD *)v11 = v12;
      *((_QWORD *)result + 3) = 0;
    }
    *(_BYTE *)(v11 + 8) = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  BOOL v33;
  WTF *v34;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v34 = *(WTF **)a1;
        return (char *)v34 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x6666667)
      {
        v10 = 40 * v9;
        v11 = WTF::fastMalloc((WTF *)(40 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
        *(_QWORD *)a1 = v11;
        v13 = v5;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v13;
          *(_BYTE *)(v11 + 8) = 0;
          *(_BYTE *)(v11 + 16) = 0;
          if (*((_BYTE *)v13 + 16))
          {
            *(_QWORD *)(v11 + 8) = 0;
            v14 = *((_QWORD *)v13 + 1);
            if (v14)
            {
              *(_QWORD *)(v11 + 8) = v14;
              *((_QWORD *)v13 + 1) = 0;
            }
            *(_BYTE *)(v11 + 16) = 1;
          }
          *(_BYTE *)(v11 + 24) = 0;
          *(_BYTE *)(v11 + 32) = 0;
          if (*((_BYTE *)v13 + 32))
          {
            *(_QWORD *)(v11 + 24) = 0;
            v15 = *((_QWORD *)v13 + 3);
            if (v15)
            {
              *(_QWORD *)(v11 + 24) = v15;
              *((_QWORD *)v13 + 3) = 0;
            }
            *(_BYTE *)(v11 + 32) = 1;
          }
          if (*((_BYTE *)v13 + 16))
          {
            v16 = *((_QWORD *)v13 + 1);
            if ((v16 & 0x8000000000000) != 0)
            {
              v36 = v13;
              v38 = v11;
              v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
              do
              {
                v18 = __ldaxr(v17);
                v19 = --v18 == 0;
              }
              while (__stlxr(v18, v17));
              v13 = v36;
              if (v19)
              {
                atomic_store(1u, v17);
                WTF::fastFree((WTF *)v17, v12);
                v13 = v36;
                v11 = v38;
              }
            }
          }
          v11 += 40;
          v13 = (WTF *)((char *)v13 + 40);
        }
        while (v13 != v6);
        v34 = *(WTF **)a1;
        if (v5)
        {
          if (v34 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v34 = *(WTF **)a1;
        }
        return (char *)v34 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_65:
      __break(0xC471u);
      JUMPOUT(0x196495ECCLL);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v22 = a2;
  if (v22 > v20)
  {
    if (v22 >= 0x6666667)
      goto LABEL_65;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = 40 * v22;
    v25 = WTF::fastMalloc((WTF *)(40 * v22));
    *(_DWORD *)(a1 + 8) = (v24 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v25;
    if (v23)
    {
      v27 = v5;
      do
      {
        *(_QWORD *)v25 = *(_QWORD *)v27;
        *(_BYTE *)(v25 + 8) = 0;
        *(_BYTE *)(v25 + 16) = 0;
        if (*((_BYTE *)v27 + 16))
        {
          *(_QWORD *)(v25 + 8) = 0;
          v28 = *((_QWORD *)v27 + 1);
          if (v28)
          {
            *(_QWORD *)(v25 + 8) = v28;
            *((_QWORD *)v27 + 1) = 0;
          }
          *(_BYTE *)(v25 + 16) = 1;
        }
        *(_BYTE *)(v25 + 24) = 0;
        *(_BYTE *)(v25 + 32) = 0;
        if (*((_BYTE *)v27 + 32))
        {
          *(_QWORD *)(v25 + 24) = 0;
          v29 = *((_QWORD *)v27 + 3);
          if (v29)
          {
            *(_QWORD *)(v25 + 24) = v29;
            *((_QWORD *)v27 + 3) = 0;
          }
          *(_BYTE *)(v25 + 32) = 1;
        }
        if (*((_BYTE *)v27 + 16))
        {
          v30 = *((_QWORD *)v27 + 1);
          if ((v30 & 0x8000000000000) != 0)
          {
            v37 = v27;
            v39 = v25;
            v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
            do
            {
              v32 = __ldaxr(v31);
              v33 = --v32 == 0;
            }
            while (__stlxr(v32, v31));
            v27 = v37;
            if (v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v26);
              v27 = v37;
              v25 = v39;
            }
          }
        }
        v25 += 40;
        v27 = (WTF *)((char *)v27 + 40);
      }
      while (v27 != (WTF *)((char *)v5 + 40 * v23));
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v26);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight&>(uint64_t a1, unint64_t a2)
{
  char *result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;

  result = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 40 * v4;
  *(_QWORD *)v6 = *(_QWORD *)result;
  *(_BYTE *)(v6 + 8) = 0;
  v7 = (_QWORD *)(v6 + 8);
  *(_BYTE *)(v6 + 16) = 0;
  v8 = (_BYTE *)(v6 + 16);
  if (result[16])
  {
    v9 = *((_QWORD *)result + 1);
    *v7 = v9;
    if ((v9 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    *v8 = 1;
  }
  v10 = v5 + 40 * v4;
  *(_BYTE *)(v10 + 24) = 0;
  v11 = v10 + 24;
  *(_BYTE *)(v11 + 8) = 0;
  v12 = (_BYTE *)(v11 + 8);
  if (result[32])
  {
    v13 = *((_QWORD *)result + 3);
    *(_QWORD *)v11 = v13;
    if ((v13 & 0x8000000000000) != 0)
    {
      v16 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    *v12 = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox::DecoratingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E343A158[v4])(&v9, a1, a2);
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a2 + 48) = 0;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(_QWORD *)(a2 + 64);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a2 + 64) = 0;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

unint64_t WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  result = WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 96 * v5;
  *(_BYTE *)v7 = 0;
  *(_DWORD *)(v7 + 16) = -1;
  v8 = *(unsigned int *)(result + 16);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, unint64_t))off_1E343A158[v8])(&v21, v7, result);
    *(_DWORD *)(v7 + 16) = v8;
  }
  v9 = v6 + 96 * v5;
  *(_QWORD *)(v9 + 32) = 0;
  v10 = (_QWORD *)(v9 + 32);
  v11 = *(_QWORD *)(v4 + 32);
  *(v10 - 1) = *(_QWORD *)(v4 + 24);
  if (v11)
  {
    *v10 = v11;
    *(_QWORD *)(v4 + 32) = 0;
  }
  v12 = v6 + 96 * v5;
  v13 = *(_BYTE *)(v4 + 40);
  *(_QWORD *)(v12 + 48) = 0;
  v14 = (_QWORD *)(v12 + 48);
  *((_BYTE *)v14 - 8) = v13;
  v15 = *(_QWORD *)(v4 + 48);
  if (v15)
  {
    *v14 = v15;
    *(_QWORD *)(v4 + 48) = 0;
  }
  v16 = v6 + 96 * v5;
  v17 = *(_BYTE *)(v4 + 56);
  *(_QWORD *)(v16 + 64) = 0;
  v18 = (_QWORD *)(v16 + 64);
  *((_BYTE *)v18 - 8) = v17;
  v19 = *(_QWORD *)(v4 + 64);
  if (v19)
  {
    *v18 = v19;
    *(_QWORD *)(v4 + 64) = 0;
  }
  v20 = v6 + 96 * v5;
  *(_BYTE *)(v20 + 72) = *(_BYTE *)(v4 + 72);
  *(_BYTE *)(v20 + 80) = *(_BYTE *)(v4 + 80);
  *(_QWORD *)(v20 + 88) = *(_QWORD *)(v4 + 88);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x2AAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 96 * v4;
      result = WTF::fastMalloc((WTF *)(96 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = result;
        v11 = 96 * v7;
        v12 = (uint64_t)v6;
        do
        {
          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox::DecoratingBox(v10, v12);
          result = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox::~DecoratingBox(v12, v13);
          v10 += 96;
          v12 += 96;
          v11 -= 96;
        }
        while (v11);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox>(uint64_t a1, unint64_t a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  result = WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 96 * v5;
  *(_BYTE *)v7 = 0;
  *(_DWORD *)(v7 + 16) = -1;
  v8 = result[4];
  if ((_DWORD)v8 != -1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t, unsigned int *))off_1E343A158[v8])(&v21, v7, result);
    *(_DWORD *)(v7 + 16) = v8;
  }
  v9 = v6 + 96 * v5;
  *(_QWORD *)(v9 + 32) = 0;
  v10 = (_QWORD *)(v9 + 32);
  v11 = *((_QWORD *)v4 + 4);
  *(v10 - 1) = *((_QWORD *)v4 + 3);
  if (v11)
  {
    *v10 = v11;
    *((_QWORD *)v4 + 4) = 0;
  }
  v12 = v6 + 96 * v5;
  v13 = *((_BYTE *)v4 + 40);
  *(_QWORD *)(v12 + 48) = 0;
  v14 = (_QWORD *)(v12 + 48);
  *((_BYTE *)v14 - 8) = v13;
  v15 = *((_QWORD *)v4 + 6);
  if (v15)
  {
    *v14 = v15;
    *((_QWORD *)v4 + 6) = 0;
  }
  v16 = v6 + 96 * v5;
  v17 = *((_BYTE *)v4 + 56);
  *(_QWORD *)(v16 + 64) = 0;
  v18 = (_QWORD *)(v16 + 64);
  *((_BYTE *)v18 - 8) = v17;
  v19 = *((_QWORD *)v4 + 8);
  if (v19)
  {
    *v18 = v19;
    *((_QWORD *)v4 + 8) = 0;
  }
  v20 = v6 + 96 * v5;
  *(_BYTE *)(v20 + 72) = *((_BYTE *)v4 + 72);
  *(_BYTE *)(v20 + 80) = *((_BYTE *)v4 + 80);
  *(_QWORD *)(v20 + 88) = *((_QWORD *)v4 + 11);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[24 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x2AAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1964965E4);
      }
      v17 = &v5[24 * *(unsigned int *)(a1 + 12)];
      v18 = 96 * v16;
      v19 = WTF::fastMalloc((WTF *)(96 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox>::move(v5, v17, v19);
      if (v5)
      {
        if (*(unsigned int **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(unsigned int **)a1;
    }
    else
    {
      if (v9 >= 0x2AAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1964965ECLL);
      }
      v10 = 96 * v9;
      v11 = WTF::fastMalloc((WTF *)(96 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox>::move(v5, v6, v11);
      v13 = *(unsigned int **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(unsigned int **)a1;
      }
    }
    return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 5)];
  }
  return (unsigned int *)v3;
}

unsigned int *WTF::VectorMover<false,WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::DecoratingBox>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  if (result != a2)
  {
    v24 = v3;
    v25 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 16) = -1;
      v8 = v7[4];
      if ((_DWORD)v8 != -1)
      {
        result = (unsigned int *)((uint64_t (*)(char *, uint64_t, unsigned int *))off_1E343A158[v8])(&v22, a3, v7);
        *(_DWORD *)(a3 + 16) = v8;
      }
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *((_QWORD *)v7 + 4);
      *(_QWORD *)(a3 + 24) = *((_QWORD *)v7 + 3);
      if (v9)
      {
        *(_QWORD *)(a3 + 32) = v9;
        *((_QWORD *)v7 + 4) = 0;
      }
      *(_BYTE *)(a3 + 40) = *((_BYTE *)v7 + 40);
      *(_QWORD *)(a3 + 48) = 0;
      v10 = *((_QWORD *)v7 + 6);
      if (v10)
      {
        *(_QWORD *)(a3 + 48) = v10;
        *((_QWORD *)v7 + 6) = 0;
      }
      *(_BYTE *)(a3 + 56) = *((_BYTE *)v7 + 56);
      *(_QWORD *)(a3 + 64) = 0;
      v11 = *((_QWORD *)v7 + 8);
      if (v11)
      {
        *(_QWORD *)(a3 + 64) = v11;
        *((_QWORD *)v7 + 8) = 0;
      }
      *(_BYTE *)(a3 + 72) = *((_BYTE *)v7 + 72);
      *(_BYTE *)(a3 + 80) = *((_BYTE *)v7 + 80);
      *(_QWORD *)(a3 + 88) = *((_QWORD *)v7 + 11);
      v12 = *((_QWORD *)v7 + 8);
      if ((v12 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
        do
        {
          v16 = __ldaxr(result);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, result));
        if (!v17)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v13 = *((_QWORD *)v7 + 6);
      if ((v13 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
        {
          v18 = __ldaxr(result);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, result));
        if (!v19)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v14 = *((_QWORD *)v7 + 4);
      if ((v14 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
        {
          v20 = __ldaxr(result);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, result));
        if (!v21)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v15 = v7[4];
      if ((_DWORD)v15 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E343A000[v15])(&v23, v7);
      v7[4] = -1;
      a3 += 96;
      v7 += 24;
    }
    while (v7 != a2);
  }
  return result;
}

double WTF::NeverDestroyed<WebCore::TextRun,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::StringView>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  WTF::StringImpl *v3;
  double result;
  WTF::StringImpl *v5;

  v2 = a2;
  a2 = a2;
  if ((v2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_6:
      v3 = v5;
      goto LABEL_7;
    }
  }
  else if ((_DWORD)a2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_6;
  }
  v3 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_7:
  dword_1ECE84270 = 0;
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    qword_1ECE84278 = (uint64_t)v3;
    dword_1ECE84280 = 0;
    byte_1ECE84284 = 1;
    result = 0.0078125;
    qword_1ECE84288 = 0x3F80000000000000;
    dword_1ECE84290 = 0;
    byte_1ECE84294 = 4;
    byte_1ECE84295 = byte_1ECE84295 & 0xE0 | 8;
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  else
  {
    qword_1ECE84278 = 0;
    dword_1ECE84280 = 0;
    byte_1ECE84284 = 1;
    result = 0.0078125;
    qword_1ECE84288 = 0x3F80000000000000;
    dword_1ECE84290 = 0;
    byte_1ECE84294 = 4;
    byte_1ECE84295 = byte_1ECE84295 & 0xE0 | 8;
  }
  return result;
}

void WebCore::cloneRenderStyleWithState(WebCore *this, const WebCore::RenderStyle *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  WebCore::RenderStyle *v18;
  void *v19;
  WebCore::RenderStyle *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::RenderStyle *v34;

  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  ++*v4;
  v5 = *((_QWORD *)a2 + 2);
  v6 = (_DWORD *)*((_QWORD *)a2 + 3);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = v5;
  ++*v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  ++*v7;
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = 0;
  v8 = (_DWORD *)*((_QWORD *)a2 + 7);
  ++*v8;
  *((_QWORD *)this + 7) = v8;
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v9 += 2;
  v10 = (uint64_t *)*((_QWORD *)a2 + 6);
  if (v10 && (v23 = *((unsigned int *)v10 + 3), (_DWORD)v23))
  {
    v24 = *v10;
    v25 = 8 * v23;
    do
    {
      v11 = *(_QWORD **)v24;
      if ((*(_QWORD *)(*(_QWORD *)v24 + 16) & 0xF80000000000) == 0x100000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(v11[1] + 40) + 592) == v9)
      {
        break;
      }
      v11 = 0;
      v24 += 8;
      v25 -= 8;
    }
    while (v25);
  }
  else
  {
    v11 = 0;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, a2);
      if (!v11)
        goto LABEL_13;
      goto LABEL_9;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (!v11)
    goto LABEL_13;
LABEL_9:
  v26 = 0;
  v12 = (_DWORD *)v11[1];
  ++*v12;
  v14 = (_DWORD *)v11[3];
  v28 = v11[2];
  v13 = v28;
  ++*v14;
  v15 = (_DWORD *)v11[4];
  ++*v15;
  v31 = v11[5];
  v16 = v31;
  v17 = (_DWORD *)v11[7];
  ++*v17;
  v18 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v18 = 0;
  v27 = 0;
  *((_QWORD *)v18 + 1) = v12;
  *((_QWORD *)v18 + 2) = v13;
  v29 = 0;
  *((_QWORD *)v18 + 3) = v14;
  v30 = 0;
  *((_QWORD *)v18 + 4) = v15;
  *((_QWORD *)v18 + 5) = v16;
  v32 = 0;
  *((_QWORD *)v18 + 6) = 0;
  v33 = 0;
  v34 = v18;
  *((_QWORD *)v18 + 7) = v17;
  WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)this, (uint64_t *)&v34);
  v20 = v34;
  v34 = 0;
  if (v20)
  {
    WebCore::RenderStyle::~RenderStyle(v20, v19);
    if (*(_DWORD *)v21)
    {
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *(_OWORD *)v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v21, v19);
    }
  }
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v26, v19);
LABEL_13:
  v22 = *((_QWORD *)a2 + 2);
  if ((v22 & 0x20000000000) != 0)
    *((_QWORD *)this + 2) |= 0x20080000000uLL;
  if ((v22 & 0x10000000000) != 0)
    *((_QWORD *)this + 2) |= 0x10080000000uLL;
}

void WebCore::TextAutoSizingValue::reset(WebCore::TextAutoSizingValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  __n128 v15;
  __n128 v16;
  float v17;
  float v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  uint64_t v23;
  WebCore *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const WebCore::Element *v28;
  WebCore *v29;
  void *v30;
  unsigned __int8 *v31;
  unsigned int *v32;
  int v33;
  float v34;
  float v35;
  WebCore *v36;
  WebCore *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const WebCore::Element *v41;
  _DWORD *v42;
  void *v43;
  unsigned int *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v55;
  WebCore *v57[21];
  WTF *v58;
  float v59;
  __int16 v60;
  unsigned int v61[2];
  uint64_t v62;
  _BYTE v63[156];
  float v64;
  WTF *v65;
  float v66;
  __int16 v67;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = v1 + 8 * v2;
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = *(_QWORD *)this;
      if ((_DWORD)v2)
      {
        v5 = 8 * v2;
        v4 = *(_QWORD *)this;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          v5 -= 8;
          if (!v5)
          {
            v4 = v3;
            break;
          }
        }
      }
      if (v1)
        goto LABEL_9;
      goto LABEL_13;
    }
    v4 = v1 + 8 * v2;
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = v1 + 8 * v2;
  if (v1)
  {
LABEL_9:
    v6 = v1 + 8 * *(unsigned int *)(v1 - 4);
    goto LABEL_14;
  }
LABEL_13:
  v6 = 0;
LABEL_14:
  if (v6 != v4)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL;
      if (v8)
      {
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          __break(0xC471u);
          return;
        }
        v10 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
            break;
        }
      }
LABEL_17:
      v9 = v4 + 8;
      v4 = v3;
      if (v9 != v3)
      {
        v4 = v9;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          if (v4 == v3)
          {
            v4 = v3;
            break;
          }
        }
      }
      if (v4 == v6)
        return;
    }
    v12 = *(_QWORD *)(v11 + 112);
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v63, (const WebCore::FontDescription *)(v12 + 48));
    v14 = *(WTF **)(v12 + 216);
    ++*(_DWORD *)v14;
    v65 = v14;
    v67 = *(_WORD *)(v12 + 228);
    v66 = *(float *)(v12 + 224);
    v15.n128_f32[0] = v66;
    v16.n128_f32[0] = v64;
    if (v64 != v66)
    {
      v17 = -3.4028e38;
      if (v66 > -3.4028e38)
        v17 = v66;
      if (v66 < 3.4028e38)
        v18 = v17;
      else
        v18 = 3.4028e38;
      v64 = v18;
      v19 = *(_QWORD *)(v8 + 32);
      if (v19)
        v19 = *(_QWORD *)(v19 + 8);
      WebCore::cloneRenderStyleWithState((WebCore *)v61, (const WebCore::RenderStyle *)(v19 + 80));
      WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v57, (const WebCore::FontDescription *)v63);
      v20 = v65;
      ++*(_DWORD *)v65;
      v58 = v20;
      v59 = v66;
      v60 = v67;
      WebCore::RenderStyle::setFontDescription((uint64_t)v61, (uint64_t)v57);
      v22 = (unsigned int *)v58;
      v58 = 0;
      if (v22)
      {
        if (*v22 == 1)
        {
          v49 = v22[1];
          if ((_DWORD)v49)
          {
            v50 = (WTF::StringImpl **)(v22 + 2);
            v51 = 8 * v49;
            do
            {
              v52 = *v50;
              *v50 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, v21);
                else
                  *(_DWORD *)v52 -= 2;
              }
              ++v50;
              v51 -= 8;
            }
            while (v51);
          }
          WTF::fastFree((WTF *)v22, v21);
        }
        else
        {
          --*v22;
        }
      }
      WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v57, v21);
      v23 = v62;
      v24 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 40) + 8) + 2648);
      if (!v24)
        v24 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v4 + 40)
                                                                                     + 8));
      ++*((_DWORD *)v24 + 2);
      v57[0] = v24;
      v25 = *(_QWORD *)(StatusReg + 736);
      if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
        v26 = WebCore::threadGlobalDataSlow(v24);
      v27 = *(_QWORD *)(v26 + 80);
      if (!v27)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v26);
        v27 = *(_QWORD *)(v26 + 80);
      }
      WebCore::FontCache::updateFontCascade(v27, v23 + 32, v57);
      v29 = v57[0];
      v57[0] = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v29 + 8))(v29);
        else
          --*((_DWORD *)v29 + 2);
      }
      WebCore::RenderElement::setStyle(v11, (WebCore::Style *)v61, 0, v28);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v61, v30);
    }
    if ((*(_BYTE *)(v11 + 45) & 1) == 0)
      goto LABEL_50;
    v53 = (*(_BYTE *)(v11 + 45) & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8) + 96)
        : *(_QWORD *)(v11 + 96);
    if ((v53 & 0x1F) != 1 && (v53 & 0x1F) != 14)
      goto LABEL_50;
    if ((*(_BYTE *)(v11 + 45) & 0x40) == 0)
      goto LABEL_50;
    if ((v53 & 0xF80000000000) != 0)
      goto LABEL_50;
    if (((*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)v11 + 176))(v11, v15, v16) & 1) != 0)
      goto LABEL_50;
    v55 = *(unsigned __int8 *)(v11 + 46);
    if (v55 == 20)
      goto LABEL_50;
    if ((*(_BYTE *)(v11 + 52) & 7) == 1)
    {
      if ((*(_BYTE *)(v11 + 53) & 2) != 0 || v55 == 26 || v55 == 49)
        goto LABEL_50;
    }
    else if (v55 == 49 || v55 == 26)
    {
      goto LABEL_50;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
LABEL_50:
    v31 = *(unsigned __int8 **)(v11 + 112);
    v32 = (unsigned int *)(v31 + 20);
    v33 = v31[24];
    if (v33 == v31[16] && (v31[25] != 0) == (v31[17] != 0))
    {
      if (v33 == 13)
        goto LABEL_75;
      if (v33 != 11)
      {
        v34 = *((float *)v31 + 5);
        if (!v31[26])
          v34 = (float)SLODWORD(v34);
        v35 = *((float *)v31 + 3);
        if (!v31[18])
          v35 = (float)SLODWORD(v35);
        if (v34 == v35)
          goto LABEL_75;
        goto LABEL_59;
      }
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v31 + 20), (const WebCore::Length *)(v31 + 12)) & 1) != 0)
      {
LABEL_75:
        v44 = (unsigned int *)v65;
        v65 = 0;
        if (v44)
        {
          if (*v44 == 1)
          {
            v45 = v44[1];
            if ((_DWORD)v45)
            {
              v46 = (WTF::StringImpl **)(v44 + 2);
              v47 = 8 * v45;
              do
              {
                v48 = *v46;
                *v46 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, v13);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                ++v46;
                v47 -= 8;
              }
              while (v47);
            }
            WTF::fastFree((WTF *)v44, v13);
          }
          else
          {
            --*v44;
          }
        }
        WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v63, v13);
        goto LABEL_17;
      }
    }
LABEL_59:
    WebCore::cloneRenderStyleWithState((WebCore *)v57, (const WebCore::RenderStyle *)(v11 + 80));
    v61[0] = 0;
    BYTE2(v61[1]) = 0;
    LOWORD(v61[1]) = *((_WORD *)v31 + 12);
    if (LOBYTE(v61[1]) - 2 >= 9)
    {
      if (LOBYTE(v61[1]) == 11)
      {
        v61[0] = *v32;
        WebCore::Length::ref((int *)v61);
      }
    }
    else
    {
      BYTE2(v61[1]) = v31[26];
      v61[0] = *v32;
    }
    WebCore::RenderStyle::setLineHeight((uint64_t)v57, (WebCore::Length *)v61);
    if (LOBYTE(v61[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v61[0]);
    }
    WebCore::RenderStyle::setFontDescription((uint64_t)v57, (uint64_t)v63);
    v36 = v57[4];
    v37 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 40) + 8) + 2648);
    if (!v37)
      v37 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v4 + 40)
                                                                                   + 8));
    ++*((_DWORD *)v37 + 2);
    *(_QWORD *)v61 = v37;
    v38 = *(_QWORD *)(StatusReg + 736);
    if (!v38 || (v39 = *(_QWORD *)(v38 + 96)) == 0)
      v39 = WebCore::threadGlobalDataSlow(v37);
    v40 = *(_QWORD *)(v39 + 80);
    if (!v40)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v39);
      v40 = *(_QWORD *)(v39 + 80);
    }
    WebCore::FontCache::updateFontCascade(v40, (uint64_t)v36 + 32, (WebCore **)v61);
    v42 = *(_DWORD **)v61;
    *(_QWORD *)v61 = 0;
    if (v42)
    {
      if (v42[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
      else
        --v42[2];
    }
    WebCore::RenderElement::setStyle(v11, (WebCore::Style *)v57, 0, v41);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v57, v43);
    goto LABEL_75;
  }
}

uint64_t WebCore::TextAutoSizing::addTextNode(WebCore::TextAutoSizing *this, WebCore::Text *a2, float a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  const WTF::AtomString *v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  WebCore::RenderStyle *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  WebCore::RenderStyle *v24;
  WTF *v25;
  void *v26;
  WebCore::TextAutoSizingValue *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  WebCore::TextAutoSizingValue *v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  WebCore::Text **v53;
  WebCore::Text *v54;
  WebCore::Text **v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    goto LABEL_101;
  }
  v6 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
  v7 = v6 ? *(_QWORD **)(v6 + 8) : 0;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::rehash((uint64_t *)this, 8u, 0), (v8 = *(_QWORD *)this) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = 0;
  v64 = WebCore::RenderStyle::hashForTextAutosizing((WebCore::RenderStyle *)(v7 + 10));
  for (i = v64; ; i = v10 + v14)
  {
    v14 = i & v9;
    v15 = (uint64_t *)(v8 + 24 * (i & v9));
    v16 = (WebCore::RenderStyle *)*v15;
    if (*v15 == -1)
      goto LABEL_13;
    if (!v16)
      break;
    result = WebCore::RenderStyle::equalForTextAutosizing(v16, (const WebCore::RenderStyle *)(v7 + 10), v12);
    if ((result & 1) != 0)
      goto LABEL_64;
    v16 = (WebCore::RenderStyle *)*v15;
LABEL_13:
    if (v16 == (WebCore::RenderStyle *)-1)
      v11 = (uint64_t *)(v8 + 24 * v14);
    ++v10;
  }
  if (v11)
    v15 = v11;
  if (*v15 == -1)
  {
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    --*(_DWORD *)(*(_QWORD *)this - 16);
  }
  v19 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v19 = 0;
  v20 = (_DWORD *)v7[11];
  ++*v20;
  *(_QWORD *)(v19 + 8) = v20;
  *(_QWORD *)(v19 + 16) = v7[12];
  v21 = (_DWORD *)v7[13];
  v22 = (_DWORD *)v7[14];
  ++*v21;
  ++*v22;
  *(_QWORD *)(v19 + 24) = v21;
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v7[15];
  *(_QWORD *)(v19 + 48) = 0;
  v23 = (_DWORD *)v7[17];
  ++*v23;
  *(_QWORD *)(v19 + 56) = v23;
  v24 = (WebCore::RenderStyle *)*v15;
  *v15 = v19;
  if (v24)
  {
    WebCore::RenderStyle::~RenderStyle(v24, v18);
    if (*(_DWORD *)v25)
    {
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *(_OWORD *)v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v25, v26);
    }
  }
  *((_DWORD *)v15 + 2) = v64;
  v27 = (WebCore::TextAutoSizingValue *)v15[2];
  v15[2] = 0;
  if (v27)
  {
    WebCore::TextAutoSizingValue::reset(v27);
    v29 = *(uint64_t **)v27;
    if (*(_QWORD *)v27)
    {
      v30 = *((unsigned int *)v29 - 1);
      if ((_DWORD)v30)
      {
        v31 = *(uint64_t **)v27;
        do
        {
          v32 = *v31;
          if (*v31 != -1)
          {
            *v31 = 0;
            if (v32)
            {
              if (*(_DWORD *)(v32 + 24) == 2)
              {
                if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v32);
              }
              else
              {
                *(_DWORD *)(v32 + 24) -= 2;
              }
            }
          }
          ++v31;
          --v30;
        }
        while (v30);
      }
      WTF::fastFree((WTF *)(v29 - 2), v28);
    }
    WTF::fastFree(v27, v28);
  }
  v33 = *(_QWORD *)this;
  v34 = *(_QWORD *)this ? *(_DWORD *)(v33 - 12) + 1 : 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *(_QWORD *)this;
  v36 = *(_QWORD *)this ? *(_DWORD *)(v35 - 12) : 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
    {
LABEL_46:
      v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
      goto LABEL_49;
    }
  }
  else if (3 * v38 <= 4 * v37)
  {
    if ((_DWORD)v38)
      goto LABEL_46;
    v39 = 8;
LABEL_49:
    v15 = (uint64_t *)WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::rehash((uint64_t *)this, v39, v15);
  }
  result = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)result = 0;
  v40 = (WebCore::TextAutoSizingValue *)v15[2];
  v15[2] = result;
  if (v40)
  {
    WebCore::TextAutoSizingValue::reset(v40);
    v42 = *(uint64_t **)v40;
    if (*(_QWORD *)v40)
    {
      v43 = *((unsigned int *)v42 - 1);
      if ((_DWORD)v43)
      {
        v44 = *(uint64_t **)v40;
        do
        {
          v45 = *v44;
          if (*v44 != -1)
          {
            *v44 = 0;
            if (v45)
            {
              if (*(_DWORD *)(v45 + 24) == 2)
              {
                if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v45);
              }
              else
              {
                *(_DWORD *)(v45 + 24) -= 2;
              }
            }
          }
          ++v44;
          --v43;
        }
        while (v43);
      }
      WTF::fastFree((WTF *)(v42 - 2), v41);
    }
    result = WTF::fastFree(v40, v41);
  }
LABEL_64:
  v46 = (uint64_t *)v15[2];
  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x1964976ACLL);
  }
  *(float *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x50) = a3;
  *((_DWORD *)a2 + 6) += 2;
  v47 = *v46;
  if (*v46
    || (result = WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash(v46, 8u), (v47 = *v46) != 0))
  {
    v48 = *(_DWORD *)(v47 - 8);
  }
  else
  {
    v48 = 0;
  }
  v49 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
  v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
  v52 = v48 & ((v51 >> 31) ^ v51);
  v53 = (WebCore::Text **)(v47 + 8 * v52);
  v54 = *v53;
  if (!*v53)
  {
LABEL_77:
    *v53 = a2;
    v57 = *v46;
    if (*v46)
      v58 = *(_DWORD *)(v57 - 12) + 1;
    else
      v58 = 1;
    *(_DWORD *)(v57 - 12) = v58;
    v59 = *v46;
    if (*v46)
      v60 = *(_DWORD *)(v59 - 12);
    else
      v60 = 0;
    v61 = (*(_DWORD *)(v59 - 16) + v60);
    v62 = *(unsigned int *)(v59 - 4);
    if (v62 > 0x400)
    {
      if (v62 > 2 * v61)
        return result;
    }
    else
    {
      if (3 * v62 > 4 * v61)
        return result;
      if (!(_DWORD)v62)
      {
        v63 = 8;
        return WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash(v46, v63);
      }
    }
    v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
    return WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash(v46, v63);
  }
  v55 = 0;
  v56 = 1;
  while (v54 != a2)
  {
    if (v54 == (WebCore::Text *)-1)
      v55 = v53;
    v52 = (v52 + v56) & v48;
    v53 = (WebCore::Text **)(v47 + 8 * v52);
    v54 = *v53;
    ++v56;
    if (!*v53)
    {
      if (v55)
      {
        *v55 = 0;
        --*(_DWORD *)(*v46 - 16);
        v53 = v55;
      }
      goto LABEL_77;
    }
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::LineBreaker::skipTrailingWhitespace(uint64_t this, WebCore::LegacyInlineIterator *a2, const LineInfo *a3)
{
  uint64_t v4;
  const WebCore::RenderInline *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v19;

  if (!*(_QWORD *)(this + 8))
    return this;
  v4 = this;
  do
  {
    do
    {
      this = WebCore::requiresLineBox(v4, a2, (const LineInfo *)1);
      if ((this & 1) == 0)
      {
        v6 = *(_QWORD *)(v4 + 8);
        if (v6)
          goto LABEL_5;
      }
      return this;
LABEL_5:
      if ((*(_BYTE *)(v6 + 45) & 2) == 0)
        break;
      v7 = *(_DWORD *)(v4 + 24) + 1;
      *(_DWORD *)(v4 + 24) = v7;
      v8 = *(_QWORD *)(v6 + 104);
      if (!v8)
        break;
    }
    while (v7 < *(_DWORD *)(v8 + 4));
    v9 = *(_QWORD *)v4;
    while ((*(_BYTE *)(v6 + 45) & 2) == 0 && *(_BYTE *)(v6 + 46) != 17)
    {
      v14 = *(_DWORD *)(v6 + 20);
      if ((v14 & 0x802) != 0 || (v14 & 0x1800000) == 0x1000000)
        break;
      v16 = *(unsigned int *)(v6 + 64);
      if (!(v16 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32)))
        break;
      v11 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32)) + 8);
      if (!v11)
        break;
LABEL_27:
      if ((*(_BYTE *)(v11 + 45) & 2) == 0 && *(_BYTE *)(v11 + 46) != 17)
      {
        v17 = *(_DWORD *)(v11 + 20);
        if ((v17 & 0x802) == 0 && (v17 & 0x1800000) != 0x1000000)
        {
          v6 = v11;
          if ((*(_BYTE *)(v11 + 45) & 0x20) == 0)
            continue;
          this = WebCore::isEmptyInline((WebCore *)v11, v5);
          v6 = v11;
          if (!(_DWORD)this)
            continue;
        }
      }
      goto LABEL_37;
    }
    if (v6 != v9)
    {
      while (1)
      {
        v10 = *(unsigned int *)(v6 + 47);
        if (v10 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32))
        {
          v11 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
          if (v11)
            goto LABEL_27;
        }
        v12 = *(_QWORD *)(v6 + 32);
        if (v12)
        {
          v6 = *(_QWORD *)(v12 + 8);
          if (v6 && v6 != v9)
            continue;
        }
        break;
      }
    }
    v11 = 0;
LABEL_37:
    if (v11)
      v19 = 0;
    else
      v19 = 0x1FFFFFFFFLL;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 16) = v19;
    *(_BYTE *)(v4 + 20) = BYTE4(v19);
  }
  while (v11);
  return this;
}

uint64_t WebCore::requiresLineBox(uint64_t a1, const WebCore::RenderInline *a2, const LineInfo *a3)
{
  WebCore *v3;
  char v4;
  BOOL v5;
  uint64_t isEmptyInline;
  WebCore *v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  const WebCore::RenderInline *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _BOOL4 v23;
  char v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WebCore *v29;
  WebCore *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WebCore::RenderInline *v34;
  const WebCore::RenderInline *v35;
  const WebCore::RenderInline *v36;
  const WebCore::RenderInline *v37;

  v3 = *(WebCore **)(a1 + 8);
  v4 = *((_BYTE *)v3 + 45);
  if (v3)
    v5 = (v4 & 0x20) == 0;
  else
    v5 = 1;
  if (v5)
  {
    isEmptyInline = 0;
  }
  else
  {
    v25 = (int)a3;
    v29 = *(WebCore **)(a1 + 8);
    v31 = a1;
    v34 = a2;
    if (!WebCore::requiresLineBoxForContent(v3, a2, a3))
      return 0;
    isEmptyInline = WebCore::isEmptyInline(v29, v15);
    a1 = v31;
    v3 = *(WebCore **)(v31 + 8);
    v4 = *((_BYTE *)v3 + 45);
    a2 = v34;
    LODWORD(a3) = v25;
  }
  v7 = v3;
  if ((v4 & 2) != 0)
    v7 = *(WebCore **)(*((_QWORD *)v3 + 4) + 8);
  v8 = *((_DWORD *)v7 + 30);
  v9 = (v8 >> 27) & 7;
  if ((v8 & 0x40000000) == 0 && v9 == 3)
  {
    v9 = 5;
  }
  else
  {
    if (v9)
      v10 = 0;
    else
      v10 = (v8 & 0x40000000) == 0;
    if (v10)
    {
      v9 = 0;
    }
    else if ((v8 & 0x40000000) == 0 || v9)
    {
      if ((v8 & 0x40000000) == 0 || v9 != 1)
      {
        if ((v8 & 0x40000000) == 0 && v9 == 2)
        {
          v9 = 3;
        }
        else if (v9 == 1 && (v8 & 0x40000000) == 0)
        {
          v9 = 2;
        }
        else
        {
          v9 = 0;
        }
      }
    }
    else
    {
      v9 = 4;
    }
  }
  v11 = (v9 - 3) >= 0xFFFFFFFE || v9 == 5;
  if (v11 && (_DWORD)a3)
  {
    v24 = v4;
    v26 = isEmptyInline;
    v30 = v3;
    v32 = a1;
    v35 = a2;
    v16 = WebCore::RenderStyle::whiteSpace((WebCore *)((char *)v7 + 80));
    v12 = 1;
    if (v16 != 2)
      return v12;
    a2 = v35;
    v3 = v30;
    a1 = v32;
    v4 = v24;
    isEmptyInline = v26;
    if (*((_BYTE *)v35 + 2))
      return v12;
  }
  else
  {
    v12 = 1;
    if (((1 << v9) & 0x26) != 0)
      return v12;
  }
  v17 = v4 & 2;
  if (v17)
  {
    v18 = *((_QWORD *)v3 + 13);
    if (v18 && (v19 = *(unsigned int *)(a1 + 24), *(_DWORD *)(v18 + 4) > v19))
    {
      v20 = *(_QWORD *)(v18 + 8);
      if ((*(_BYTE *)(v18 + 16) & 4) != 0)
        v21 = *(unsigned __int8 *)(v20 + v19);
      else
        v21 = *(unsigned __int16 *)(v20 + 2 * v19);
      v17 = 1;
      if (v21 <= 31)
      {
        if (v21 == 9)
          return isEmptyInline;
        v28 = isEmptyInline;
        v33 = a1;
        v37 = a2;
        if (v21 == 10)
        {
          v23 = WebCore::RenderObject::preservesNewline(v3);
          a2 = v37;
          a1 = v33;
          isEmptyInline = v28;
          if (!v23)
            return isEmptyInline;
          v3 = *(WebCore **)(v33 + 8);
          v17 = *((_BYTE *)v3 + 45) & 2;
        }
      }
      else if (v21 == 32 || v21 == 173)
      {
        return isEmptyInline;
      }
    }
    else
    {
      v17 = 1;
    }
  }
  if (v17)
    v3 = *(WebCore **)(*((_QWORD *)v3 + 4) + 8);
  if ((*(_BYTE *)(*((_QWORD *)v3 + 13) + 229) & 8) == 0)
    return 1;
  v27 = isEmptyInline;
  v36 = a2;
  v22 = WebCore::LegacyInlineIterator::current((WebCore::LegacyInlineIterator *)a1);
  v12 = 1;
  if (v22 == 160)
  {
    isEmptyInline = v27;
    if (!*((_BYTE *)v36 + 2))
      return isEmptyInline;
  }
  return v12;
}

uint64_t WebCore::LegacyInlineIterator::increment(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = result;
    if ((*(_BYTE *)(v3 + 45) & 2) == 0
      || (v5 = *(_DWORD *)(result + 24) + 1, *(_DWORD *)(result + 24) = v5, (v6 = *(_QWORD *)(v3 + 104)) == 0)
      || v5 >= *(_DWORD *)(v6 + 4))
    {
      result = WebCore::nextInlineRendererSkippingEmpty<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(*(_QWORD *)result, v3, a2);
      v7 = 0x1FFFFFFFFLL;
      if (result)
        v7 = 0;
      *(_QWORD *)(v4 + 8) = result;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 16) = v7;
      *(_BYTE *)(v4 + 20) = BYTE4(v7);
    }
  }
  return result;
}

WTF *WebCore::LineBreaker::nextLineBreak@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const WebCore::RenderInline *a3@<X2>, uint64_t a4@<X3>, WebCore::BreakingContext *a5@<X8>)
{
  int v9;
  uint64_t v10;
  char v11;
  unsigned int *v12;
  uint64_t v13;
  char *LineStyle;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  WTF *result;
  const WebCore::RenderInline *v30;
  const LineInfo *v31;
  float v32;
  BOOL v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  WebCore *v37;
  BOOL v38;
  WebCore *v39;
  WebCore *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore *v52;
  int v53;
  WebCore *v54;
  unsigned int v55;
  WebCore::RenderListMarker *v56;
  WebCore::RenderListMarker *v57;
  int v58;
  int v59;
  BOOL v60;
  WebCore::RenderText *v61;
  int v62;
  WebCore::RenderText *v63;
  WebCore::RenderText *v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  float v69;
  int v70;
  unsigned int v71;
  int v72;
  _BOOL4 v73;
  WebCore::FontCascade *v74;
  uint64_t v75;
  unsigned int v76;
  char v77;
  int v78;
  _BOOL4 v80;
  int v81;
  _BOOL4 v82;
  WTF::StringImpl *v83;
  WebCore::FontCascade *v84;
  WebCore::ComplexTextController *v85;
  WTF *v86;
  void *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  int v99;
  unsigned __int16 v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  __int128 v106;
  float v107;
  WebCore::RenderText *v108;
  int v109;
  float v110;
  _BOOL4 v112;
  int v113;
  int v115;
  BOOL v116;
  char v117;
  uint64_t v118;
  unsigned int Character;
  BOOL v120;
  _BOOL4 v121;
  unsigned int v122;
  uint64_t *v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  float *v131;
  float v132;
  int v133;
  unsigned int v134;
  int v135;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  char *v146;
  __int128 *v147;
  __int128 v148;
  __int128 v149;
  int v150;
  unsigned int v151;
  int v152;
  BOOL v153;
  BOOL v154;
  uint64_t v155;
  char *v156;
  __int128 *v157;
  __int128 v158;
  float v159;
  float v160;
  WebCore::RenderText *v161;
  int v162;
  WebCore *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  float v169;
  void *v170;
  float v171;
  float v172;
  BOOL v173;
  BOOL v174;
  float v175;
  BOOL v176;
  int v177;
  char isEmptyInline;
  WTF::StringImpl *v180;
  __int128 v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  int v189;
  WebCore::FontCascade *v190;
  uint64_t v191;
  unsigned int v192;
  __int128 v193;
  _BOOL4 v195;
  _BOOL4 v196;
  const LineInfo *v197;
  int v198;
  float v199;
  _BOOL4 v200;
  int v201;
  float v202;
  char v203;
  uint64_t v204;
  _BOOL4 v205;
  unsigned int CharacterIndexStrippingSpaces;
  int v208;
  int v209;
  _BOOL4 v210;
  int v211;
  int v212;
  char v213;
  int v214;
  _BOOL4 v215;
  char *v216;
  WebCore::RenderText *v217;
  _QWORD v218[2];
  WebCore::RenderText *v219[2];
  unsigned int v220[4];
  __int128 v221;
  __int128 v222;
  __int128 v223;
  char v224;
  char v225;
  unsigned int v226;
  char v227;
  uint64_t v228;
  WebCore::RenderListMarker *v229;
  WebCore *v230;
  uint64_t v231;
  WebCore::LegacyInlineIterator *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  float v237;
  float v238;
  float v239;
  char v240;
  uint64_t v241;
  char v242;
  int v243;
  _BYTE v244[5];
  BOOL v245;
  BOOL v246;
  __int16 v247;
  char v248;
  char *v249;
  WebCore::RenderText *v250;
  WTF *v251;
  uint64_t v252;
  _BYTE v253[32];
  __int128 v254;
  __int128 v255;

  v9 = *(_DWORD *)(a2 + 24);
  v10 = *a1;
  v11 = *(_BYTE *)a3;
  v12 = (unsigned int *)(*a1 + 164);
  if (((*(_DWORD *)(*a1 + 124) >> 13) & 6u) - 2 < 4)
    v12 = (unsigned int *)(*a1 + 160);
  v13 = *v12;
  if (*(_BYTE *)a3)
  {
    if ((*(_BYTE *)(*((_QWORD *)WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v10, (WTF::StringImpl *)a2)+ 3)+ 233) & 1) != 0)
    {
      LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v10, v180);
      goto LABEL_6;
    }
LABEL_350:
    v17 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 104) + 233) & 1) == 0)
    goto LABEL_350;
  LineStyle = (char *)(v10 + 80);
LABEL_6:
  v15 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, (void *)a2) * 64.0);
  if (v15 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 > -2147500000.0)
  {
    v16 = (int)v15;
  }
  else
  {
    v16 = 0x80000000;
  }
  v17 = v16 & ~(v16 >> 31);
LABEL_11:
  WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)v10, v13);
  v18 = *(_QWORD *)v10;
  if (((*(_DWORD *)(v10 + 124) >> 13) & 6u) - 2 < 4)
  {
    v19 = (*(uint64_t (**)(uint64_t))(v18 + 1000))(v10);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 928))(v10);
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t))(v18 + 1016))(v10);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 944))(v10);
  }
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 1824))(v10, v13, v21, v17);
  v23 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(v10, (void *)v22);
  v24 = WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)v10, v13);
  v25 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)v10, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 1816))(v10, v13, v25, v17);
  v28 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine(v10, (void *)v26);
  while (*(_QWORD *)(a2 + 8) && (WebCore::requiresLineBox(a2, a3, 0) & 1) == 0)
    WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::increment(a2);
  result = (WTF *)WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(a2, v27);
  if (!*(_QWORD *)(a2 + 8))
  {
    v181 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *((_OWORD *)a5 + 1) = v181;
    return result;
  }
  v32 = fmaxf((float)((float)v28 * 0.015625) - (float)((float)v23 * 0.015625), 0.0);
  v33 = v9 != 0;
  v34 = *a1;
  v218[0] = a1;
  v218[1] = a2;
  v35 = *(_OWORD *)a2;
  v36 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v219 = v35;
  *(_OWORD *)v220 = v36;
  v221 = v35;
  v222 = v36;
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v223 = 0uLL;
  v224 = 0;
  v37 = (WebCore *)*((_QWORD *)&v35 + 1);
  v228 = v34;
  v229 = (WebCore::RenderListMarker *)*((_QWORD *)&v35 + 1);
  v230 = 0;
  v231 = v34 + 80;
  v232 = a3;
  v233 = a4;
  v234 = v10;
  v235 = 0;
  v236 = 0;
  v237 = (float)v23 * 0.015625;
  v238 = (float)v28 * 0.015625;
  v239 = v32;
  v240 = v11;
  v241 = 0;
  v38 = 1;
  v242 = 1;
  v243 = 0;
  v244[0] = v33;
  *(_DWORD *)&v244[1] = 16777217;
  v245 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8) + 40) + 8) + 3384) == 2)
  {
    if (*(_BYTE *)(v34 + 46) == 37)
    {
      v182 = ((*(_DWORD *)(v34 + 124) >> 13) & 6) - 2;
      v183 = *(_QWORD *)(*(_QWORD *)(v34 + 88) + 8);
      if (v182 < 4)
        v184 = v183 + 12;
      else
        v184 = v183 + 4;
      v185 = *(unsigned __int8 *)(v184 + 4);
      v38 = (v185 >= 0xB || ((0x781u >> v185) & 1) == 0) && v185 - 7 < 0xFFFFFFFE;
    }
    else
    {
      v38 = 1;
    }
  }
  v246 = v38;
  v247 = 0;
  v248 = 0;
  v249 = (char *)(a2 + 272);
  v250 = 0;
  v251 = (WTF *)v253;
  v252 = 4;
  if (!*((_QWORD *)&v35 + 1))
  {
LABEL_289:
    v169 = (float)(*((float *)&v235 + 1) + *(float *)&v235) - *((float *)&v236 + 1);
    if (v169 <= v32
      || ((v171 = vabds_f32(v169, v32), v172 = fabsf(v169), v172 >= 1.0) || (float)(v172 * 3.4028e38) >= v171)
      && ((float)(v172 * 1.1755e-38) > v171 ? (v174 = v172 <= 1.0) : (v174 = 1),
          (!v174 || (float)(v171 / v172) <= 0.00000011921)
       && ((v175 = fabsf(v32), v175 >= 1.0) || (float)(v175 * 3.4028e38) >= v171)
       && ((float)(v175 * 1.1755e-38) > v171 ? (v176 = v175 <= 1.0) : (v176 = 1),
           !v176 || (float)(v171 / v175) <= 0.00000011921))
      || (!BYTE6(v241) ? (v173 = BYTE4(v241) == 0) : (v173 = 1), !v173 || v248))
    {
      *((_QWORD *)&v221 + 1) = 0;
      DWORD2(v222) = 0;
      BYTE4(v222) = 1;
      LODWORD(v222) = -1;
    }
    v248 = 0;
    goto LABEL_292;
  }
  while (1)
  {
    HIBYTE(v247) = *(float *)&v235 != 0.0;
    v39 = (WebCore *)v228;
    v40 = v37;
    while (1)
    {
      if ((*((_BYTE *)v40 + 45) & 2) == 0 && *((_BYTE *)v40 + 46) != 17)
      {
        v45 = *((_DWORD *)v40 + 5);
        if ((v45 & 0x802) == 0 && (v45 & 0x1800000) != 0x1000000)
        {
          v166 = *((unsigned int *)v40 + 16);
          if (v166 | ((unint64_t)*((unsigned __int8 *)v40 + 68) << 32))
          {
            v42 = *(_QWORD *)((v166 | ((unint64_t)*((unsigned __int8 *)v40 + 68) << 32)) + 8);
            if (v42)
              goto LABEL_328;
          }
        }
      }
      if (v40 == v39)
      {
LABEL_54:
        v230 = 0;
        goto LABEL_55;
      }
      while (1)
      {
        v41 = *(unsigned int *)((char *)v40 + 47);
        if (v41 | ((unint64_t)*((unsigned __int8 *)v40 + 51) << 32))
        {
          v42 = *(_QWORD *)((v41 | ((unint64_t)*((unsigned __int8 *)v40 + 51) << 32)) + 8);
          if (v42)
            break;
        }
        v43 = *((_QWORD *)v40 + 4);
        if (v43)
        {
          v40 = *(WebCore **)(v43 + 8);
          if (v40 && v40 != v39)
            continue;
        }
        goto LABEL_54;
      }
LABEL_328:
      if ((*(_BYTE *)(v42 + 45) & 2) != 0 || *(_BYTE *)(v42 + 46) == 17)
        break;
      v177 = *(_DWORD *)(v42 + 20);
      if ((v177 & 0x802) != 0 || (v177 & 0x1800000) == 0x1000000)
        break;
      v40 = (WebCore *)v42;
      if ((*(_BYTE *)(v42 + 45) & 0x20) != 0)
      {
        isEmptyInline = WebCore::isEmptyInline((WebCore *)v42, v30);
        v40 = (WebCore *)v42;
        if ((isEmptyInline & 1) != 0)
          break;
      }
    }
    v230 = (WebCore *)v42;
    v47 = *(_QWORD *)(v42 + 32);
    if (v47)
    {
      v48 = *(_QWORD *)(v47 + 8);
      if (v48)
      {
        v49 = *((_QWORD *)v37 + 4);
        if (!v49 || (v49 = *(_QWORD *)(v49 + 8), v48 != v49))
        {
          while (1)
          {
            v50 = *(_QWORD *)(v48 + 32);
            if (!v50)
              break;
            v48 = *(_QWORD *)(v50 + 8);
            if (v48 == v49 || v48 == 0)
            {
              if (v48)
                goto LABEL_55;
              break;
            }
          }
          v244[1] = 1;
        }
      }
    }
LABEL_55:
    if ((*((_BYTE *)v37 + 20) & 2) != 0 || (v52 = v37, (*((_BYTE *)v37 + 45) & 2) != 0))
      v52 = *(WebCore **)(*((_QWORD *)v37 + 4) + 8);
    v53 = (*((_DWORD *)v52 + 30) >> 30) & 1;
    BYTE3(v241) = (*((_DWORD *)v52 + 30) & 0x40000000) != 0;
    if ((*((_BYTE *)v37 + 20) & 2) != 0 || (v54 = v37, (*((_BYTE *)v37 + 45) & 2) != 0))
      v54 = *(WebCore **)(*((_QWORD *)v37 + 4) + 8);
    v55 = *((_DWORD *)v54 + 30);
    BYTE5(v241) = (v55 >> 27) & 7;
    v56 = v229;
    if ((*((_BYTE *)v229 + 20) & 2) != 0 || (v57 = v229, (*((_BYTE *)v229 + 45) & 2) != 0))
      v57 = *(WebCore::RenderListMarker **)(*((_QWORD *)v229 + 4) + 8);
    v58 = (*((_DWORD *)v57 + 30) >> 30) & 1;
    BYTE4(v241) = v58;
    if ((*((_BYTE *)v229 + 20) & 2) != 0 || (*((_BYTE *)v229 + 45) & 2) != 0)
      v56 = *(WebCore::RenderListMarker **)(*((_QWORD *)v229 + 4) + 8);
    BYTE6(v241) = (*((_DWORD *)v56 + 30) >> 27) & 7;
    if (*((_BYTE *)v37 + 46) == 72)
    {
      v59 = 0;
      v60 = 0;
    }
    else
    {
      v59 = v53 ^ 1;
      v186 = v244[3] || v53 == 0;
      v187 = v186;
      v244[3] = v187;
      v60 = ((v55 >> 27) & 7) != 0;
    }
    v244[2] = v59;
    HIBYTE(v241) = v60;
    v245 = ((v55 >> 27) & 5) == 0;
    v61 = v219[1];
    if ((*((_BYTE *)v219[1] + 45) & 0x20) == 0)
      break;
    WebCore::BreakingContext::handleEmptyInline((WebCore::BreakingContext *)v218, (uint64_t)v30, v31);
LABEL_253:
    if ((_BYTE)v247)
      goto LABEL_292;
    v160 = *((float *)&v235 + 1);
    if (*((float *)&v235 + 1) == 0.0
      || WebCore::LineWidth::fitsOnLine((WebCore::LineWidth *)&v234, BYTE1(v243), *((float *)&v235 + 1))
      || BYTE5(v241)
      || !BYTE3(v241))
    {
      v161 = v219[1];
      if (v219[1] && (*((_BYTE *)v219[1] + 45) & 0x20) != 0)
      {
        if ((WebCore::isEmptyInline(v219[1], v30) & 1) != 0)
          goto LABEL_262;
        v161 = v219[1];
      }
      if ((*((_BYTE *)v161 + 20) & 2) == 0
        && v230
        && (*((_BYTE *)v230 + 45) & 0x20) != 0
        && (WebCore::isEmptyInline(v230, v30) & 1) != 0)
      {
LABEL_262:
        if ((*(_BYTE *)(v231 + 43) & 0x40) == 0
          && !WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, v160)
          && !(_BYTE)v241
          && !v248)
        {
          WebCore::LineWidth::fitBelowFloats((WebCore::LineWidth *)&v234, *(unsigned __int8 *)v232);
        }
        goto LABEL_263;
      }
      v162 = v244[2];
      if (!v244[2] || !BYTE1(v243))
      {
        v163 = v230;
        if (!v230
          || *((_BYTE *)v230 + 46) == 17 && (*((_BYTE *)v230 + 52) & 7) == 2 && (*((_BYTE *)v230 + 53) & 1) != 0
          || (*((_BYTE *)v230 + 45) & 2) == 0)
        {
          goto LABEL_261;
        }
        if (!v244[2] && (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v230 + 4) + 8) + 123) & 0x40) != 0)
          goto LABEL_262;
        if ((*((_BYTE *)v219[1] + 45) & 2) == 0)
        {
          if ((*((_BYTE *)v219[1] + 45) & 0x20) == 0)
            goto LABEL_261;
          if ((WebCore::isEmptyInline(v219[1], v30) & 1) == 0)
          {
            v162 = v244[2];
LABEL_261:
            if (!v162)
              goto LABEL_262;
            goto LABEL_492;
          }
        }
        if (BYTE1(v243))
          v201 = 0;
        else
          v201 = WebCore::textBeginsWithBreakablePosition(v163, v30);
        if (!WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, v160) && !(_BYTE)v241)
          WebCore::LineWidth::fitBelowFloats((WebCore::LineWidth *)&v234, *(unsigned __int8 *)v232);
        if (WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, v202))
        {
          if (!v201)
            goto LABEL_262;
        }
        else
        {
          if (v244[3])
            v203 = 0;
          else
            v203 = v201;
          if ((v203 & 1) == 0)
          {
            if (!v201)
              goto LABEL_262;
            goto LABEL_492;
          }
        }
        v160 = *(float *)&v235 + *((float *)&v235 + 1);
        *((float *)&v235 + 1) = *(float *)&v235 + *((float *)&v235 + 1);
        LODWORD(v235) = 0;
        if (BYTE2(v241))
          *(_WORD *)((char *)&v241 + 1) = 1;
        LOBYTE(v241) = 1;
        *((_QWORD *)&v221 + 1) = v163;
        DWORD2(v222) = 0;
        BYTE4(v222) = 0;
        LODWORD(v222) = 0;
        v248 = 0;
        if ((v201 & 1) == 0)
          goto LABEL_262;
      }
    }
LABEL_492:
    v198 = v243;
    if (WebCore::LineWidth::fitsOnLine((WebCore::LineWidth *)&v234, v243, v160) || v248)
      goto LABEL_262;
    if (!v198 && BYTE1(v243) && v245)
    {
      v250 = 0;
      HIDWORD(v252) = 0;
    }
    if (*((float *)&v235 + 1) != 0.0
      || (WebCore::LineWidth::fitBelowFloats((WebCore::LineWidth *)&v234, *(unsigned __int8 *)v232),
          !WebCore::LineWidth::fitsOnLine((WebCore::LineWidth *)&v234, v243, v199)))
    {
      LOBYTE(v247) = 1;
LABEL_292:
      WebCore::BreakingContext::handleEndOfLine(a5, (uint64_t)v218);
      goto LABEL_293;
    }
LABEL_263:
    v164 = *((_DWORD *)v219[1] + 5);
    if ((v164 & 0x800) == 0 && (v164 & 0x1800000) != 0x1000000)
    {
      v229 = v219[1];
      if ((*((_BYTE *)v219[1] + 20) & 2) != 0
        && v244[2]
        && (!(*(unsigned int (**)(void))(*(_QWORD *)v219[1] + 152))() || v246)
        && (!v229 || *((_BYTE *)v229 + 46) != 20 || WebCore::RenderListMarker::isInside(v229)))
      {
        *((float *)&v235 + 1) = *(float *)&v235 + *((float *)&v235 + 1);
        LODWORD(v235) = 0;
        v191 = 0x1FFFFFFFFLL;
        if (v230)
          v191 = 0;
        if (BYTE2(v241))
          *(_WORD *)((char *)&v241 + 1) = 1;
        LOBYTE(v241) = 1;
        *((_QWORD *)&v221 + 1) = v230;
        DWORD2(v222) = 0;
        LODWORD(v222) = v191;
        BYTE4(v222) = BYTE4(v191);
        v248 = 0;
      }
    }
    if ((_BYTE)v247)
      goto LABEL_292;
    if (!v245)
      BYTE1(v243) = 0;
    v37 = v230;
    v165 = 0x1FFFFFFFFLL;
    if (v230)
      v165 = 0;
    v219[1] = v230;
    v220[2] = 0;
    v220[0] = v165;
    LOBYTE(v220[1]) = BYTE4(v165);
    v242 = 0;
    if (!v230)
    {
      v32 = v239;
      goto LABEL_289;
    }
  }
  v62 = *((unsigned __int8 *)v219[1] + 46);
  if ((*((_BYTE *)v219[1] + 45) & 2) == 0)
  {
    if (v62 == 17 && (*((_BYTE *)v219[1] + 52) & 7) == 2 && (*((_BYTE *)v219[1] + 53) & 1) != 0)
    {
      *((float *)&v235 + 1) = *(float *)&v235 + *((float *)&v235 + 1);
      LODWORD(v235) = 0;
      if (BYTE2(v241))
        *(_WORD *)((char *)&v241 + 1) = 1;
      LOBYTE(v241) = 1;
      *((WebCore::RenderText **)&v221 + 1) = v219[1];
      DWORD2(v222) = 0;
      BYTE4(v222) = 0;
      LODWORD(v222) = 0;
      v248 = 0;
    }
    goto LABEL_253;
  }
  if (v62 == 72)
    v63 = v219[1];
  else
    v63 = 0;
  v217 = v63;
  if (v59 && v58 && (_BYTE)v243)
  {
    *((float *)&v235 + 1) = *(float *)&v235 + *((float *)&v235 + 1);
    LODWORD(v235) = 0;
    if (BYTE2(v241))
      *(_WORD *)((char *)&v241 + 1) = 1;
    LOBYTE(v241) = 1;
    *((WebCore::RenderText **)&v221 + 1) = v219[1];
    DWORD2(v222) = 0;
    BYTE4(v222) = 0;
    LODWORD(v222) = 0;
    v248 = 0;
  }
  if (*(_BYTE *)v232)
  {
    v65 = WebCore::RenderObject::firstLineStyle(v219[1], v30);
  }
  else
  {
    v64 = v219[1];
    if ((*((_BYTE *)v219[1] + 45) & 2) != 0)
    {
      v64 = (WebCore::RenderText *)*((_QWORD *)v219[1] + 4);
      if (v64)
        v64 = (WebCore::RenderText *)*((_QWORD *)v64 + 1);
    }
    v65 = (char *)v64 + 80;
  }
  v66 = *((_QWORD *)v65 + 4);
  v67 = *(_DWORD *)(*((_QWORD *)v65 + 3) + 236);
  if (((v67 >> 7) & 2) != 0 && v245)
  {
    CharacterIndexStrippingSpaces = WebCore::RenderText::lastCharacterIndexStrippingSpaces(v61);
  }
  else
  {
    v68 = *((_QWORD *)v61 + 13);
    if (v68)
      LODWORD(v68) = *(_DWORD *)(v68 + 4);
    CharacterIndexStrippingSpaces = v68 - 1;
  }
  v69 = *(float *)&v235;
  v70 = WebCore::inlineLogicalWidth(v61, (const WebCore::RenderObject *)(v244[0] == 0), 1);
  v71 = *(_DWORD *)(*((_QWORD *)v65 + 3) + 228);
  if (v244[2])
    v212 = (v71 >> 11) & 1;
  else
    v212 = 0;
  v72 = BYTE3(v241);
  if (BYTE3(v241))
  {
    v72 = 0;
  }
  else
  {
    v188 = ((v71 >> 9) & 3) - 3 >= 0xFFFFFFFE || (*(_DWORD *)(*((_QWORD *)v65 + 3) + 228) & 0x1C0) == 192;
    if (v188 && *((float *)&v235 + 1) == 0.0)
      v72 = BYTE1(v241) == 0;
  }
  v215 = (*(_DWORD *)(*((_QWORD *)v65 + 3) + 228) & 0x7000) == 0x5000 && v244[2] != 0;
  v211 = (v71 >> 6) & 7;
  v73 = (v211 == 1 || v215) && v244[2] != 0;
  v74 = (WebCore::FontCascade *)(v66 + 32);
  v75 = v233;
  v76 = *(_DWORD *)(*(_QWORD *)(v231 + 24) + 228);
  if (((v76 >> 12) & 4) != 0)
    v77 = 0;
  else
    v77 = (v76 >> 12) & 7;
  v78 = *(_DWORD *)(*(_QWORD *)(v231 + 24) + 228) & 0x1C0;
  v80 = v78 != 256 && ((v76 >> 12) & 7) - 4 < 0xFFFFFFFD;
  v210 = v80;
  if (v217)
    v81 = 0;
  else
    v81 = v72;
  if (v217)
    v82 = 0;
  else
    v82 = v73;
  v208 = v82;
  v209 = v81;
  if (*(WebCore::RenderText **)v233 == v61)
  {
    if (*(_QWORD *)(v233 + 8))
    {
      if (*(WebCore::FontCascade **)(v233 + 152) != v74)
      {
        *(_QWORD *)(v233 + 152) = v74;
        WebCore::FontCascade::createLayout(v74, v61, *((float *)&v235 + 1) + *(float *)&v235, v245, (WebCore::TextLayout **)&v254);
        v189 = v233 + 8;
        v190 = *(WebCore::FontCascade **)(v233 + 8);
        *(_QWORD *)(v233 + 8) = v254;
        if (v190)
          WebCore::TextLayoutDeleter::operator()(v189, v190);
      }
    }
  }
  else
  {
    *(_QWORD *)v233 = v61;
    *(_QWORD *)(v75 + 152) = v74;
    WebCore::FontCascade::createLayout(v74, v61, *((float *)&v235 + 1) + *(float *)&v235, v245, (WebCore::TextLayout **)&v254);
    v84 = *(WebCore::FontCascade **)(v233 + 8);
    *(_QWORD *)(v233 + 8) = v254;
    if (v84)
    {
      v85 = (WebCore::ComplexTextController *)*((_QWORD *)v84 + 42);
      *((_QWORD *)v84 + 42) = 0;
      if (v85)
      {
        WebCore::ComplexTextController::~ComplexTextController(v85, v83);
        WTF::fastFree(v86, v87);
      }
      v88 = (WTF::StringImpl *)*((_QWORD *)v84 + 38);
      *((_QWORD *)v84 + 38) = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v83);
        else
          *(_DWORD *)v88 -= 2;
      }
      WebCore::FontCascade::~FontCascade(v84, v83);
      WTF::fastFree(v89, v90);
    }
    v91 = v233;
    v92 = *((_QWORD *)v61 + 13);
    if (v92)
    {
      v93 = *(_QWORD *)(v92 + 8);
      v94 = *(unsigned int *)(v92 + 4) | ((unint64_t)((*(_DWORD *)(v92 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v93 = 0;
      v94 = 0x100000000;
    }
    v95 = *((_QWORD *)v65 + 4);
    *(_QWORD *)(v233 + 16) = v93;
    *(_DWORD *)(v91 + 24) = v94;
    *(_BYTE *)(v91 + 28) = BYTE4(v94);
    v96 = *(_DWORD **)(v95 + 176);
    if (v96)
      *v96 += 2;
    v97 = *(WTF::StringImpl **)(v91 + 32);
    *(_QWORD *)(v91 + 32) = v96;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, v83);
      else
        *(_DWORD *)v97 -= 2;
    }
    if (*(_BYTE *)(v91 + 128))
    {
      WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)(v91 + 40));
      *(_BYTE *)(v91 + 128) = 0;
    }
    *(_QWORD *)(v91 + 136) = 0;
    *(_BYTE *)(v91 + 144) = v77;
    *(_BYTE *)(v91 + 145) = v78 != 256;
  }
  HIBYTE(v243) = 0;
  v98 = v233;
  LOWORD(v99) = *(_WORD *)(v233 + 148);
  v100 = *(_WORD *)(v233 + 146);
  v101 = *((_QWORD *)v61 + 13);
  if (!v101 || (v102 = v220[2], v220[2] >= *(_DWORD *)(v101 + 4)))
  {
LABEL_251:
    *(_DWORD *)(v98 + 146) = v100 | ((unsigned __int16)v99 << 16);
    v159 = (float)(int)WebCore::inlineLogicalWidth(v61, (const WebCore::RenderObject *)(v244[0] == 0), v244[1])
         * 0.015625;
    *(float *)&v235 = *(float *)&v235 + (float)(v159 + 0.0);
    if (v248 && v159 != 0.0)
      v248 = 0;
    *(_WORD *)v244 = 0;
    goto LABEL_253;
  }
  v216 = v65;
  v103 = 0;
  v104 = (v67 >> 7) & 1;
  v105 = (v67 >> 8) & 1;
  *(float *)&v106 = (float)v70 * 0.015625;
  v107 = v69 + *(float *)&v106;
  v213 = v67 >> 7;
  v214 = v209 | v208;
  v108 = v219[1];
  v109 = BYTE1(v243);
  v110 = v107;
  while (1)
  {
    v100 = v99;
    if (!v108
      || (*((_BYTE *)v108 + 45) & 2) == 0
      || (v142 = *((_QWORD *)v108 + 13)) == 0
      || *(_DWORD *)(v142 + 4) <= v102)
    {
      v99 = 0;
LABEL_125:
      v112 = v99 == 10 && HIBYTE(v241) == 0;
      goto LABEL_131;
    }
    v143 = *(_QWORD *)(v142 + 8);
    if ((*(_BYTE *)(v142 + 16) & 4) != 0)
      v99 = *(unsigned __int8 *)(v143 + v102);
    else
      v99 = *(unsigned __int16 *)(v143 + 2 * v102);
    v112 = 1;
    if (v99 != 9 && v99 != 32)
      goto LABEL_125;
LABEL_131:
    v113 = BYTE2(v243);
    BYTE1(v243) = v112;
    if (!v109 && v242 && v112)
    {
      LOBYTE(v209) = 0;
      HIBYTE(v243) = !v215;
      v214 = v208;
    }
    if ((v104 & 1) != 0)
    {
      if (v240)
      {
        LODWORD(v106) = HIDWORD(v235);
        LOBYTE(v104) = 1;
        if (*((float *)&v235 + 1) == 0.0
          && v107 == 0.0
          && !WebCore::inlineLogicalWidth(v61, (const WebCore::RenderObject *)1, 0))
        {
          *(float *)&v106 = WebCore::RenderText::hangablePunctuationStartWidth(v61, v220[2]);
          LOBYTE(v104) = 0;
          *(float *)&v106 = *(float *)&v235 - *(float *)&v106;
          LODWORD(v235) = v106;
        }
      }
      else
      {
        LOBYTE(v104) = 1;
      }
    }
    else
    {
      LOBYTE(v104) = 0;
    }
    if ((v105 & 1) != 0)
    {
      LOBYTE(v105) = 1;
      if (!v230 && v220[2] == CharacterIndexStrippingSpaces && !WebCore::inlineLogicalWidth(v61, 0, 1))
      {
        *(float *)&v106 = WebCore::RenderText::hangablePunctuationEndWidth(v61, CharacterIndexStrippingSpaces);
        LOBYTE(v105) = 0;
        *(float *)&v106 = *(float *)&v235 - *(float *)&v106;
        LODWORD(v235) = v106;
      }
    }
    else
    {
      LOBYTE(v105) = 0;
    }
    v115 = BYTE1(v243);
    if (v245 && BYTE1(v243))
    {
      BYTE2(v243) = 1;
      if (v103 & 1 | ((v214 & 1) == 0))
        goto LABEL_148;
      goto LABEL_509;
    }
    *((_BYTE *)v232 + 2) = 0;
    v116 = v115 != 0;
    v117 = v212 ^ 1;
    if (v115)
      v117 = 1;
    if ((v117 & 1) == 0)
      v116 = v99 == 160;
    BYTE2(v243) = v116;
    if (!(v103 & 1 | ((v214 & 1) == 0)))
    {
      if (!v115)
      {
LABEL_515:
        v107 = v107 + 0.0;
        *(float *)&v106 = v107 + *((float *)&v235 + 1);
        v103 = (float)(v107 + *((float *)&v235 + 1)) > v239;
        goto LABEL_148;
      }
LABEL_509:
      if (!v242 && BYTE5(v241) == 1)
      {
        v141 = BYTE3(v241);
        if (!BYTE3(v241))
        {
          Character = v220[0];
          v118 = *(_QWORD *)v220;
          goto LABEL_204;
        }
      }
      goto LABEL_515;
    }
LABEL_148:
    v118 = *(_QWORD *)v220;
    Character = v220[0];
    if (BYTE5(v241) == 1)
    {
      v141 = BYTE3(v241);
LABEL_204:
      v120 = v141 != 0;
      goto LABEL_150;
    }
    v120 = 0;
LABEL_150:
    v121 = v99 == 10;
    if (v99 != 10 && !v120)
    {
      if (v242)
      {
        v121 = 0;
      }
      else
      {
        v122 = v220[2];
        if ((v118 & 0xFF00000000) == 0 || v220[2] > Character)
        {
          v123 = (uint64_t *)(v233 + 16);
          if (v215)
          {
            Character = WebCore::BreakLines::nextCharacter();
          }
          else if (v211 == 2)
          {
            if (v212)
              Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v123, v220[2]);
            else
              Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v123, v220[2]);
          }
          else if (v210)
          {
            if (v212)
              Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v123, v220[2]);
            else
              Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v123, v220[2]);
          }
          else if (v212)
          {
            Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v123, v220[2]);
          }
          else
          {
            Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v123, v220[2]);
          }
        }
        v121 = Character == v122;
      }
    }
    v220[0] = v118;
    LOBYTE(v220[1]) = BYTE4(v118);
    if ((v213 & 4) != 0
      && WebCore::RenderText::isHangableStopOrComma(v99)
      && WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, *(float *)&v106))
    {
      v248 = 0;
      *(float *)&v106 = *(float *)&v235 + 0.0;
      *(float *)&v235 = *(float *)&v235 + 0.0;
    }
    v124 = v243;
    if (((v121 | v103) & 1) != 0)
      break;
    if ((_BYTE)v243)
    {
      LOBYTE(v243) = 0;
      *(_QWORD *)&v254 = 0;
      *((_QWORD *)&v254 + 1) = v61;
      LOBYTE(v255) = 0;
      BYTE4(v255) = 0;
      DWORD2(v255) = v220[2];
      BYTE12(v255) = 0;
      WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::startIgnoringSpaces(v249, &v254);
    }
    if (v248)
    {
      v103 = 0;
      if ((WebCore::RenderText::isHangableStopOrComma(v99) & 1) == 0)
        v248 = 0;
    }
    else
    {
      v103 = 0;
    }
LABEL_166:
    if (v217)
    {
      if (v220[2])
      {
        v125 = *((_QWORD *)v217 + 54);
        if (v125)
        {
          v126 = v220[2] + 1;
          v127 = *(_DWORD *)(v125 - 8);
          v128 = 9 * ((v220[2] - (v126 << 15)) ^ ((v220[2] - (v126 << 15)) >> 10));
          v129 = (v128 ^ (v128 >> 6)) + ~((v128 ^ (v128 >> 6)) << 11);
          v130 = v127 & (v129 ^ HIWORD(v129));
          v131 = (float *)(v125 + 24 * v130);
          v132 = *v131;
          if (*(_DWORD *)v131 != v220[2] + 1)
          {
            v133 = 1;
            while (v132 != 0.0)
            {
              v130 = (v130 + v133) & v127;
              v131 = (float *)(v125 + 24 * v130);
              v132 = *v131;
              ++v133;
              if (*(_DWORD *)v131 == v126)
                goto LABEL_175;
            }
            v131 = (float *)(v125 + 24 * *(unsigned int *)(v125 - 4));
          }
LABEL_175:
          if (v131 != (float *)(v125 + 24 * *(unsigned int *)(v125 - 4)))
          {
            if (v131[1] != 3.4028e38 || (*(float *)&v106 = v131[2], *(float *)&v106 != 3.4028e38))
            {
              v144 = (uint64_t *)v249;
              *(_QWORD *)&v254 = 0;
              *((WebCore::RenderText **)&v254 + 1) = v219[1];
              LOBYTE(v255) = 0;
              BYTE4(v255) = 0;
              DWORD2(v255) = v220[2] - 1;
              BYTE12(v255) = 0;
              v145 = *((unsigned int *)v249 + 3);
              if ((_DWORD)v145 == *((_DWORD *)v249 + 2))
              {
                v146 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v249, v145 + 1, (unint64_t)&v254);
                v147 = (__int128 *)(*v144 + 32 * *((unsigned int *)v144 + 3));
                v148 = *(_OWORD *)v146;
                v149 = *((_OWORD *)v146 + 1);
              }
              else
              {
                v147 = (__int128 *)(*(_QWORD *)v249 + 32 * v145);
                v148 = v254;
                v149 = v255;
              }
              *v147 = v148;
              v147[1] = v149;
              v155 = (*((_DWORD *)v144 + 3) + 1);
              *((_DWORD *)v144 + 3) = v155;
              *(_QWORD *)&v254 = 0;
              *((WebCore::RenderText **)&v254 + 1) = v219[1];
              LOBYTE(v255) = 0;
              BYTE4(v255) = 0;
              DWORD2(v255) = v220[2];
              BYTE12(v255) = 0;
              if ((_DWORD)v155 == *((_DWORD *)v144 + 2))
              {
                v156 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v144, v155 + 1, (unint64_t)&v254);
                v157 = (__int128 *)(*v144 + 32 * *((unsigned int *)v144 + 3));
                v106 = *(_OWORD *)v156;
                v158 = *((_OWORD *)v156 + 1);
              }
              else
              {
                v157 = (__int128 *)(*v144 + 32 * v155);
                v106 = v254;
                v158 = v255;
              }
              *v157 = v106;
              v157[1] = v158;
              ++*((_DWORD *)v144 + 3);
            }
          }
        }
      }
    }
    if (!v109)
    {
      if (BYTE1(v243))
      {
        *((_QWORD *)&v223 + 1) = v61;
        v226 = v220[2];
        if (v230)
        {
          if (v220[2]
            && *((_BYTE *)v230 + 46) == 17
            && ((*((_BYTE *)v230 + 52) & 7) != 2 || (*((_BYTE *)v230 + 53) & 1) == 0)
            && ((*(_DWORD *)(v231 + 40) >> 6) & 0xB | 4) == 5)
          {
            v226 = v220[2] - 1;
            v204 = *((_QWORD *)v61 + 13);
            if (v204)
              LODWORD(v204) = *(_DWORD *)(v204 + 4);
            if (v220[2] == (_DWORD)v204 - 1)
              WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::startIgnoringSpaces(v249, &v223);
          }
        }
      }
    }
    if (v113
      && !BYTE2(v243)
      && v244[2]
      && ((*((_DWORD *)v216 + 10) & 0x68000000) == 0x8000000
       || (*(_DWORD *)(*((_QWORD *)v216 + 3) + 228) & 0x7000) == 0x4000))
    {
      *((_QWORD *)&v221 + 1) = v61;
      DWORD2(v222) = v220[2];
      LODWORD(v222) = v220[0];
      BYTE4(v222) = v220[1];
    }
    v109 = BYTE1(v243);
    if (v245 && BYTE1(v243) && !(_BYTE)v243)
    {
      v250 = v61;
    }
    else
    {
      v134 = *((_DWORD *)v216 + 10);
      v135 = (v134 >> 27) & 7;
      v137 = (v134 & 0x40000000) == 0 && v135 == 3;
      if (v135 == 1 || v137 || !BYTE1(v243))
      {
        v250 = 0;
        HIDWORD(v252) = 0;
      }
    }
    v242 = 0;
LABEL_195:
    v108 = v219[1];
    if ((*((_BYTE *)v219[1] + 45) & 2) == 0)
    {
      __break(0xC471u);
LABEL_344:
      __break(1u);
LABEL_345:
      LODWORD(v139) = v220[2];
LABEL_198:
      v102 = v139 + 1;
LABEL_199:
      v220[2] = v102;
      goto LABEL_200;
    }
    v138 = *((_QWORD *)v219[1] + 13);
    if (!v138)
      goto LABEL_345;
    v139 = v220[2];
    if ((*(_BYTE *)(v138 + 16) & 4) != 0)
      goto LABEL_198;
    v167 = *(_QWORD *)(v138 + 8);
    v102 = *(_DWORD *)(v138 + 4);
    v168 = ++v220[2];
    if (v102 <= v139)
      goto LABEL_344;
    if ((*(_WORD *)(v167 + 2 * v139) & 0xFC00) == 0xD800)
    {
      if (v168 != v102)
      {
        if (v102 <= v168)
          goto LABEL_344;
        v102 = v139 + 1;
        if ((*(_WORD *)(v167 + 2 * v168) & 0xFC00) == 0xDC00)
        {
          v102 = v139 + 2;
          goto LABEL_199;
        }
      }
    }
    else
    {
      v102 = v139 + 1;
    }
LABEL_200:
    v140 = *((_QWORD *)v61 + 13);
    if (!v140 || v102 >= *(_DWORD *)(v140 + 4))
    {
      v98 = v233;
      goto LABEL_251;
    }
  }
  if ((_BYTE)v243)
  {
    if (BYTE1(v243))
    {
      v109 = 1;
      goto LABEL_195;
    }
    LOBYTE(v243) = 0;
    *(_QWORD *)&v254 = 0;
    *((_QWORD *)&v254 + 1) = v61;
    LOBYTE(v255) = 0;
    BYTE4(v255) = 0;
    DWORD2(v255) = v220[2];
    BYTE12(v255) = 0;
    WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::startIgnoringSpaces(v249, &v254);
  }
  if (!v244[0])
  {
    *(float *)&v106 = (float)(int)WebCore::inlineLogicalWidth(v61, (const WebCore::RenderObject *)1, 0) * 0.015625;
    *(float *)&v235 = *(float *)&v235 + *(float *)&v106;
    v244[0] = 1;
    if (v248)
    {
      if (*(float *)&v106 != 0.0)
        v248 = 0;
    }
  }
  v150 = v244[2];
  if (!(_BYTE)v241 && v244[2])
  {
    if (!WebCore::BreakingContext::fitsOnLineOrHangsAtEnd((WebCore::BreakingContext *)v218))
    {
      WebCore::LineWidth::fitBelowFloats((WebCore::LineWidth *)&v234, *(unsigned __int8 *)v232);
      v150 = v244[2];
      goto LABEL_222;
    }
  }
  else
  {
LABEL_222:
    if (!((v150 != 0) | v209 & 1))
      goto LABEL_223;
  }
  v195 = BYTE5(v241) == 3 && BYTE3(v241) == 0;
  v205 = v195;
  if (WebCore::BreakingContext::fitsOnLineOrHangsAtEnd((WebCore::BreakingContext *)v218)
    && BYTE2(v243)
    && ((*((_DWORD *)v216 + 10) & 0x68000000) == 0x8000000
      ? (v196 = 1)
      : (v196 = (*(_DWORD *)(*((_QWORD *)v216 + 3) + 228) & 0x7000) == 0x4000),
        v196
     && ((v205 | v103 ^ 1) & 1) != 0
     && !WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, *(float *)&v106)))
  {
    if (v205)
    {
      if (v109 || !HIBYTE(v243))
      {
        *((_QWORD *)&v221 + 1) = v61;
        DWORD2(v222) = v220[2];
        LODWORD(v222) = v220[0];
        BYTE4(v222) = v220[1];
        if (!((v109 != 0) | v214 & 1))
          WebCore::LegacyInlineIterator::increment((uint64_t)&v221, 0);
      }
    }
    else
    {
      *((_QWORD *)&v221 + 1) = v61;
      DWORD2(v222) = v220[2];
      LODWORD(v222) = v220[0];
      BYTE4(v222) = v220[1];
      WebCore::LineBreaker::skipTrailingWhitespace((uint64_t)&v221, v232, v197);
    }
    if (!v248)
      goto LABEL_467;
  }
  else if (!WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, *(float *)&v106) && !v248)
  {
LABEL_467:
    if (WebCore::LegacyInlineIterator::atTextParagraphSeparator((WebCore::LegacyInlineIterator *)&v221))
    {
      if (!v124 && v220[2])
        WebCore::ensureCharacterGetsLineBox(v249, (uint64_t)v219);
      WebCore::LegacyInlineIterator::increment((uint64_t)&v221, 0);
    }
    if ((_BYTE)v243 || !v245 || !v109 || !BYTE1(v243))
    {
      LOBYTE(v247) = 1;
      goto LABEL_292;
    }
  }
LABEL_223:
  if (v99 != 10 || !HIBYTE(v241))
  {
    if (v244[2] && v121)
    {
      *(float *)&v106 = *(float *)&v235 + *((float *)&v235 + 1);
      *((float *)&v235 + 1) = *(float *)&v235 + *((float *)&v235 + 1);
      LODWORD(v235) = 0;
      if (BYTE2(v241))
        *(_WORD *)((char *)&v241 + 1) = 1;
      LOBYTE(v209) = 0;
      LOBYTE(v241) = 1;
      *((_QWORD *)&v221 + 1) = v61;
      DWORD2(v222) = v220[2];
      LODWORD(v222) = v220[0];
      BYTE4(v222) = v220[1];
      v248 = 0;
      v107 = 0.0;
      v214 = v208;
      v110 = 0.0;
      HIBYTE(v243) = !v215;
    }
    if ((v103 & 1) != 0)
    {
      v103 = 1;
      if ((v99 & 0xFC00) != 0xDC00 && ((1 << u_charType(v99)) & 0x1C0) == 0)
      {
        *((_QWORD *)&v221 + 1) = v61;
        DWORD2(v222) = v220[2];
        LODWORD(v222) = v220[0];
        BYTE4(v222) = v220[1];
        v103 = v214;
      }
    }
    else
    {
      v103 = 0;
    }
    if (!(_BYTE)v243)
    {
      v151 = *((_DWORD *)v216 + 10);
      v152 = (v151 >> 27) & 7;
      v153 = (v151 & 0x40000000) == 0 && v152 == 3;
      v154 = v153;
      if (v152 != 1 && !v154 && v109 && BYTE1(v243))
      {
        LOBYTE(v243) = 1;
        WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::startIgnoringSpaces(v249, &v223);
        WebCore::TrailingObjects::updateWhitespaceCollapsingTransitionsForTrailingBoxes((char *)&v250, (uint64_t *)v249, 0, 0);
      }
    }
    if ((((*((_WORD *)v61 + 59) & 0x100) == 0) & v103) == 1)
    {
      v200 = WebCore::LineWidth::fitsOnLineIncludingExtraWidth((WebCore::LineWidth *)&v234, *(float *)&v106);
      *(float *)&v106 = v110 + 0.0;
      v103 = !v200;
      if (v200)
        v107 = v110 + 0.0;
    }
    goto LABEL_166;
  }
  v192 = v220[2];
  if (!v124 && v220[2])
  {
    WebCore::ensureCharacterGetsLineBox(v249, (uint64_t)v219);
    v192 = v220[2];
  }
  *((float *)&v235 + 1) = *(float *)&v235 + *((float *)&v235 + 1);
  LODWORD(v235) = 0;
  if (BYTE2(v241))
    *(_WORD *)((char *)&v241 + 1) = 1;
  LOBYTE(v241) = 1;
  *((_QWORD *)&v221 + 1) = v61;
  DWORD2(v222) = v192;
  LODWORD(v222) = v220[0];
  BYTE4(v222) = v220[1];
  v248 = 0;
  WebCore::LegacyInlineIterator::increment((uint64_t)&v221, 0);
  v193 = v222;
  *(_OWORD *)a5 = v221;
  *((_OWORD *)a5 + 1) = v193;
LABEL_293:
  result = v251;
  if (v253 != (_BYTE *)v251)
  {
    if (v251)
    {
      v251 = 0;
      LODWORD(v252) = 0;
      return (WTF *)WTF::fastFree(result, v170);
    }
  }
  return result;
}

uint64_t WebCore::BreakingContext::handleEmptyInline(WebCore::BreakingContext *this, uint64_t a2, const LineInfo *a3)
{
  WebCore::RenderInline *v3;
  WebCore::RenderObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t InlineRendererSkippingEmpty;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  WebCore::RenderInline **v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t result;
  int v48;
  int v49;
  float v50;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  __int128 v69;
  __int128 v70;

  v3 = (WebCore::RenderInline *)*((_QWORD *)this + 3);
  if ((*((_BYTE *)v3 + 45) & 0x20) == 0)
    goto LABEL_97;
  if (!WebCore::requiresLineBoxForContent(*((WebCore **)this + 3), *((const WebCore::RenderInline **)this + 18), a3))
    goto LABEL_36;
  if (*((_BYTE *)this + 206))
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 63) = 0;
    v6 = *((_QWORD *)this + 28);
    v7 = *((_QWORD *)this + 3);
    *(_QWORD *)&v69 = 0;
    *((_QWORD *)&v69 + 1) = v7;
    LOBYTE(v70) = 0;
    BYTE4(v70) = 0;
    DWORD2(v70) = 0;
    BYTE12(v70) = 0;
    v8 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(v6 + 8))
    {
      v9 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v8 + 1, (unint64_t)&v69);
      v10 = (_OWORD *)(*(_QWORD *)v6 + 32 * *(unsigned int *)(v6 + 12));
      v11 = *(_OWORD *)v9;
      v12 = *((_OWORD *)v9 + 1);
    }
    else
    {
      v10 = (_OWORD *)(*(_QWORD *)v6 + 32 * v8);
      v11 = v69;
      v12 = v70;
    }
    *v10 = v11;
    v10[1] = v12;
    v27 = *(_DWORD *)(v6 + 8);
    v28 = (*(_DWORD *)(v6 + 12) + 1);
    *(_DWORD *)(v6 + 12) = v28;
    if ((_DWORD)v28 == v27)
    {
      v29 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v28 + 1, (unint64_t)&v69);
      v30 = (_OWORD *)(*(_QWORD *)v6 + 32 * *(unsigned int *)(v6 + 12));
      v31 = *(_OWORD *)v29;
      v32 = *((_OWORD *)v29 + 1);
    }
    else
    {
      v30 = (_OWORD *)(*(_QWORD *)v6 + 32 * v28);
      v31 = v69;
      v32 = v70;
    }
    *v30 = v31;
    v30[1] = v32;
    ++*(_DWORD *)(v6 + 12);
    goto LABEL_36;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 17) + 40);
  v14 = (v13 >> 27) & 7;
  v15 = v13 & 0x40000000;
  if (v14 == 3 && v15 == 0 || v14 == 1)
    goto LABEL_15;
  v18 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v18 != *((_QWORD *)this + 3))
    goto LABEL_15;
  v19 = *((_QWORD *)this + 28);
  InlineRendererSkippingEmpty = WebCore::nextInlineRendererSkippingEmpty(*((WebCore **)this + 14), *(WebCore::RenderElement **)(*((_QWORD *)this + 1) + 8), v5);
  if (!InlineRendererSkippingEmpty)
    goto LABEL_15;
  if ((*(_BYTE *)(InlineRendererSkippingEmpty + 45) & 2) == 0)
    goto LABEL_15;
  v52 = *(_QWORD *)(InlineRendererSkippingEmpty + 104);
  if (!v52 || !*(_DWORD *)(v52 + 4))
    goto LABEL_15;
  v53 = *(unsigned __int8 **)(v52 + 8);
  if ((*(_BYTE *)(v52 + 16) & 4) != 0)
    v54 = *v53;
  else
    v54 = *(unsigned __int16 *)v53;
  v55 = *(_QWORD *)(InlineRendererSkippingEmpty + 32);
  if (v55)
    v55 = *(_QWORD *)(v55 + 8);
  if (v54 != 32)
  {
    if (v54 == 10)
    {
      v65 = *(_DWORD *)(v55 + 120);
      v66 = (v65 >> 27) & 7;
      if ((v65 & 0x40000000) != 0 || v66 != 3)
      {
        if (!v66)
          goto LABEL_78;
        v67 = v65 & 0x40000000;
        v68 = v67 ? 1 : 2;
        if (v66 != v68 && (v66 != 1) | (v67 >> 30) & 1)
          goto LABEL_78;
      }
      goto LABEL_15;
    }
    if (v54 != 9)
      goto LABEL_15;
  }
  v56 = *(_DWORD *)(v55 + 120);
  v57 = (v56 >> 27) & 7;
  v58 = (v56 & 0x40000000) == 0 && v57 == 3;
  v59 = v58;
  if (v57 == 1 || v59)
  {
LABEL_15:
    if (!*((_QWORD *)this + 29))
      goto LABEL_36;
    v21 = *((unsigned int *)this + 63);
    if ((_DWORD)v21 != *((_DWORD *)this + 62))
    {
      v33 = (WebCore::RenderInline **)(*((_QWORD *)this + 30) + 8 * v21);
LABEL_35:
      *v33 = v3;
      *((_DWORD *)this + 63) = v21 + 1;
      goto LABEL_36;
    }
    v22 = v21 + (v21 >> 2);
    if (v22 >= 0x10)
      v23 = v22 + 1;
    else
      v23 = 16;
    if (v23 <= v21 + 1)
      v24 = v21 + 1;
    else
      v24 = v23;
    v25 = (char *)*((_QWORD *)this + 30);
    if (v24 < 5)
    {
      v26 = (char *)this + 256;
      *((_QWORD *)this + 30) = (char *)this + 256;
      *((_DWORD *)this + 62) = 4;
LABEL_33:
      memcpy(v26, v25, 8 * v21);
      if ((char *)this + 256 != v25 && v25)
      {
        if (*((char **)this + 30) == v25)
        {
          *((_QWORD *)this + 30) = 0;
          *((_DWORD *)this + 62) = 0;
        }
        WTF::fastFree((WTF *)v25, v34);
      }
      v21 = *((unsigned int *)this + 63);
      v33 = (WebCore::RenderInline **)(*((_QWORD *)this + 30) + 8 * v21);
      goto LABEL_35;
    }
    if (!(v24 >> 29))
    {
      v26 = (char *)WTF::fastMalloc((WTF *)(8 * v24));
      *((_DWORD *)this + 62) = v24;
      *((_QWORD *)this + 30) = v26;
      goto LABEL_33;
    }
LABEL_97:
    __break(0xC471u);
    JUMPOUT(0x196499B48);
  }
LABEL_78:
  *(_QWORD *)&v69 = 0;
  *((_QWORD *)&v69 + 1) = v18;
  LOBYTE(v70) = 0;
  BYTE4(v70) = 0;
  DWORD2(v70) = 0;
  BYTE12(v70) = 0;
  v60 = *(unsigned int *)(v19 + 12);
  if ((_DWORD)v60 == *(_DWORD *)(v19 + 8))
  {
    v61 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v60 + 1, (unint64_t)&v69);
    v62 = (_OWORD *)(*(_QWORD *)v19 + 32 * *(unsigned int *)(v19 + 12));
    v63 = *(_OWORD *)v61;
    v64 = *((_OWORD *)v61 + 1);
  }
  else
  {
    v62 = (_OWORD *)(*(_QWORD *)v19 + 32 * v60);
    v63 = v69;
    v64 = v70;
  }
  *v62 = v63;
  v62[1] = v64;
  ++*(_DWORD *)(v19 + 12);
  *((_BYTE *)this + 208) = 1;
  *((_WORD *)this + 103) = 257;
LABEL_36:
  v35 = WebCore::inlineLogicalWidth(*((WebCore **)this + 3), (const WebCore::RenderObject *)1, 1);
  v36 = WebCore::RenderInline::marginStart(v3, 0);
  v37 = (*(uint64_t (**)(WebCore::RenderInline *))(*(_QWORD *)v3 + 976))(v3);
  if (__OFADD__(v36, v37))
    v38 = (v36 >> 31) + 0x7FFFFFFF;
  else
    v38 = v36 + v37;
  v39 = (*(uint64_t (**)(WebCore::RenderInline *))(*(_QWORD *)v3 + 1064))(v3);
  v40 = v38 + v39;
  if (__OFADD__(v38, v39))
    v40 = (v38 >> 31) + 0x7FFFFFFF;
  v41 = __OFADD__(v35, v40);
  v42 = v35 + v40;
  if (v41)
    v43 = (v35 >> 31) + 0x7FFFFFFF;
  else
    v43 = v42;
  v44 = WebCore::RenderInline::marginEnd(v3, 0);
  v45 = (*(uint64_t (**)(WebCore::RenderInline *))(*(_QWORD *)v3 + 984))(v3);
  if (__OFADD__(v44, v45))
    v46 = (v44 >> 31) + 0x7FFFFFFF;
  else
    v46 = v44 + v45;
  result = (*(uint64_t (**)(WebCore::RenderInline *))(*(_QWORD *)v3 + 1072))(v3);
  v48 = v46 + result;
  if (__OFADD__(v46, (_DWORD)result))
    v48 = (v46 >> 31) + 0x7FFFFFFF;
  v41 = __OFADD__(v43, v48);
  v49 = v43 + v48;
  if (v41)
    v49 = (v43 >> 31) + 0x7FFFFFFF;
  v50 = (float)v49 * 0.015625;
  *((float *)this + 42) = *((float *)this + 42) + v50;
  if (v50 != 0.0 && *((_BYTE *)this + 219) != 0)
    *((_BYTE *)this + 219) = 0;
  return result;
}

uint64_t WebCore::BreakingContext::handleEndOfLine(WebCore::BreakingContext *this, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  int v11;
  uint64_t result;
  int v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  _BYTE *v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;

  v4 = (_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_DWORD *)(v5 + 24);
  v8 = *(_BYTE **)(a2 + 56);
  v9 = *(_BYTE **)(v5 + 8);
  if (v6 != v7 || v8 != v9)
  {
    if (!*(_DWORD *)(a2 + 40)
      && *(float *)(a2 + 172) == 0.0
      && *(float *)(a2 + 168) != 0.0
      && !*(_BYTE *)(a2 + 218)
      && v8)
    {
      v20 = *((_DWORD *)v8 + 5);
      if ((v20 & 0x800) != 0 || (v20 & 0x1800000) == 0x1000000)
        goto LABEL_31;
      goto LABEL_30;
    }
    goto LABEL_8;
  }
  if (v8 && v8[46] == 17 && ((v8[52] & 7) != 2 || (v8[53] & 1) == 0))
  {
    v19 = *(_BYTE **)(a2 + 56);
    goto LABEL_65;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 136) + 40) & 0x78000000) == 0x48000000 && !*(_DWORD *)(a2 + 40))
  {
    v15 = *(_BYTE **)(a2 + 120);
    if (!v15)
    {
      v17 = 0;
      *(float *)(a2 + 172) = *(float *)(a2 + 168) + *(float *)(a2 + 172);
      *(_DWORD *)(a2 + 168) = 0;
      v16 = 0x1FFFFFFFFLL;
      if (!*(_BYTE *)(a2 + 199))
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else
  {
    if (!v8)
    {
      v19 = 0;
LABEL_65:
      v17 = *(_DWORD *)(a2 + 72);
      goto LABEL_23;
    }
    v15 = *(_BYTE **)(a2 + 24);
    if (v15)
    {
      v16 = 0;
      v17 = *(_DWORD *)(a2 + 40);
      goto LABEL_20;
    }
    v15 = *(_BYTE **)(a2 + 120);
    v19 = *(_BYTE **)(a2 + 56);
    v17 = *(_DWORD *)(a2 + 72);
    if (!v15)
      goto LABEL_23;
  }
  if ((v15[45] & 2) != 0)
    v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 488))(v15);
  else
    v17 = 0;
  v16 = 0;
LABEL_20:
  *(float *)(a2 + 172) = *(float *)(a2 + 168) + *(float *)(a2 + 172);
  *(_DWORD *)(a2 + 168) = 0;
  if (*(_BYTE *)(a2 + 199))
LABEL_21:
    *(_WORD *)(a2 + 198) = 1;
LABEL_22:
  *(_BYTE *)(a2 + 197) = 1;
  *(_QWORD *)(a2 + 56) = v15;
  *(_DWORD *)(a2 + 72) = v17;
  *(_DWORD *)(a2 + 64) = v16;
  *(_BYTE *)(a2 + 68) = BYTE4(v16);
  *(_BYTE *)(a2 + 219) = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(v18 + 24);
  v19 = *(_BYTE **)(v18 + 8);
  v8 = v15;
LABEL_23:
  if (v17 == v6 && v8 == v19)
  {
LABEL_30:
    WebCore::LegacyInlineIterator::increment((uint64_t)v4, 0);
    v8 = *(_BYTE **)(a2 + 56);
  }
LABEL_8:
  if (!v8)
  {
LABEL_9:
    v11 = 1;
    goto LABEL_10;
  }
LABEL_31:
  v21 = *(uint64_t **)(a2 + 224);
  v22 = *((unsigned int *)v21 + 3);
  if ((_DWORD)v22)
    v23 = (v22 & 1) == 0;
  else
    v23 = 0;
  if (!v23)
    goto LABEL_9;
  v24 = *v21;
  v25 = v22 - 2;
  v26 = (__int128 *)(*v21 + 32 * (v22 - 2));
  v27 = v26[1];
  v43 = *v26;
  v44 = v27;
  v28 = (_BYTE *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v29 = v24 + 32 * v22;
    v30 = (_DWORD *)(v29 - 8);
    v31 = (_QWORD *)(v29 - 24);
    while (1)
    {
      v8 = *(_BYTE **)(a2 + 56);
      if (DWORD2(v44) == *v30 && v28 == (_BYTE *)*v31)
        break;
      v33 = DWORD2(v44) == *(_DWORD *)(a2 + 72) && v28 == v8;
      v8 = v28;
      if (v33)
        break;
      WebCore::LegacyInlineIterator::increment((uint64_t)&v43, 0);
      v28 = (_BYTE *)*((_QWORD *)&v43 + 1);
      if (!*((_QWORD *)&v43 + 1))
      {
        v8 = *(_BYTE **)(a2 + 56);
        break;
      }
    }
  }
  if (DWORD2(v44) != *(_DWORD *)(a2 + 72) || v28 != v8)
    goto LABEL_9;
  v35 = (*((_DWORD *)v21 + 3) - 1);
  *((_DWORD *)v21 + 3) = v35;
  v36 = *(_QWORD *)(v24 + 32 * v25 + 8);
  v37 = *(_BYTE *)(v36 + 45);
  if ((v37 & 2) != 0)
  {
    v36 = *(_QWORD *)(v36 + 32);
    if (v36)
      v36 = *(_QWORD *)(v36 + 8);
  }
  result = WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(v36 + 80));
  v38 = result > 5 || ((1 << result) & 0x26) == 0;
  if (!v38 || (v37 & 2) == 0)
    goto LABEL_9;
  if (!(_DWORD)v35)
  {
    __break(0xC471u);
    return result;
  }
  v39 = *v21 + 32 * (v35 - 1);
  v42 = *(_DWORD *)(v39 + 24);
  v40 = (_DWORD *)(v39 + 24);
  v41 = v42;
  if (v42)
    *v40 = v41 - 1;
  else
    *(_BYTE *)(*v21 + 32 * (v35 - 1) + 28) = 1;
  v11 = 0;
LABEL_10:
  result = (uint64_t)WebCore::TrailingObjects::updateWhitespaceCollapsingTransitionsForTrailingBoxes((char *)(a2 + 232), *(uint64_t **)(a2 + 224), *(_QWORD *)(a2 + 56), v11);
  v13 = *(_DWORD *)(a2 + 72);
  if (v13)
  {
    *(_DWORD *)(a2 + 72) = v13 - 1;
    result = WebCore::LegacyInlineIterator::increment((uint64_t)v4, 0);
  }
  v14 = v4[1];
  *(_OWORD *)this = *v4;
  *((_OWORD *)this + 1) = v14;
  return result;
}

BOOL WebCore::LineWidth::fitsOnLine(WebCore::LineWidth *this, int a2, float a3)
{
  float v3;
  float v4;
  float v6;
  float v7;
  BOOL v9;
  float v10;
  float v12;

  if (!a2)
    return WebCore::LineWidth::fitsOnLineIncludingExtraWidth(this, a3);
  v3 = (float)(*((float *)this + 3) + *((float *)this + 2)) - *((float *)this + 5);
  v4 = *((float *)this + 8);
  if (v3 <= v4)
    return 1;
  v6 = vabds_f32(v3, v4);
  v7 = fabsf(v3);
  if (v7 < 1.0 && (float)(v7 * 3.4028e38) < v6)
    return 0;
  v9 = (float)(v7 * 1.1755e-38) <= v6 || v7 <= 1.0;
  v10 = v6 / v7;
  if (v9 && v10 > 0.00000011921)
    return 0;
  v12 = fabsf(v4);
  if (v12 < 1.0 && (float)(v12 * 3.4028e38) < v6)
    return 0;
  if (v12 > 1.0 && (float)(v12 * 1.1755e-38) > v6)
    return 1;
  return (float)(v6 / v12) <= 0.00000011921;
}

BOOL WebCore::LineWidth::fitsOnLineIncludingExtraWidth(WebCore::LineWidth *this, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  BOOL v7;
  float v8;
  float v10;

  v2 = (float)(*((float *)this + 3) + *((float *)this + 2)) + 0.0;
  v3 = *((float *)this + 8);
  if (v2 <= v3)
    return 1;
  v4 = vabds_f32(v2, v3);
  v5 = fabsf(v2);
  if (v5 < 1.0 && (float)(v5 * 3.4028e38) < v4)
    return 0;
  v7 = (float)(v5 * 1.1755e-38) <= v4 || v5 <= 1.0;
  v8 = v4 / v5;
  if (v7 && v8 > 0.00000011921)
    return 0;
  v10 = fabsf(v3);
  if (v10 < 1.0 && (float)(v10 * 3.4028e38) < v4)
    return 0;
  return v10 > 1.0 && (float)(v10 * 1.1755e-38) > v4 || (float)(v4 / v10) <= 0.00000011921;
}

_QWORD *WebCore::LineWidth::fitBelowFloats(WebCore::LineWidth *this, int a2)
{
  int *v4;
  int *v5;
  int v6;
  float v7;
  float v8;
  float v9;
  const WebCore::RenderBox *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  WebCore::RenderBox *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  float v24;
  double v25;
  float v26;
  double v27;
  float v28;
  int *v29;
  int *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  char *LineStyle;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  _QWORD *v39;
  int NextFloatLogicalBottomBelow;
  WebCore::RenderBox *v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  float v48;
  float v49;
  unsigned int v50;
  BOOL v51;
  double v52;
  double v53;
  double v54;
  unsigned int v55;
  int *v56;
  unsigned int *v57;

  v4 = *(int **)this;
  v5 = v4 + 40;
  if (((v4[31] >> 13) & 6) - 2 >= 4)
    v5 = v4 + 41;
  v6 = *v5;
  v7 = *((float *)this + 7);
  v8 = *((float *)this + 8);
  v9 = *((float *)this + 6);
  v11 = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 1672))(v4);
  v12 = *(char **)this;
  if (!v11)
    goto LABEL_6;
  v13 = **(_QWORD **)(*((_QWORD *)v12 + 27) + 16);
  if (!v13)
    goto LABEL_6;
  v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  if ((*(_WORD *)(v14 + 69) & 0x800) == 0)
    goto LABEL_6;
  if ((WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)v14, v10) & 1) == 0)
  {
    v12 = *(char **)this;
    goto LABEL_6;
  }
  {
    WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
    *(_QWORD *)&dword_1EE2F9340 = 0;
  }
  v32 = WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, v14);
  v12 = *(char **)this;
  if (!v32)
  {
LABEL_6:
    result = (_QWORD *)*((_QWORD *)v12 + 27);
    if (result)
    {
      for (result = (_QWORD *)WebCore::FloatingObjects::findNextFloatLogicalBottomBelow(result, v6);
            (int)result > v6;
            result = (_QWORD *)WebCore::FloatingObjects::findNextFloatLogicalBottomBelow(result, v17))
      {
        v6 = (int)result;
        v16 = *(WebCore::RenderBox **)this;
        v17 = result;
        WebCore::RenderBlock::fragmentAtBlockOffset(*(_BYTE **)this, (int)result);
        v18 = WebCore::RenderBlock::logicalLeftOffsetForContent(v16);
        v19 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 1824))(v16, v17, v18, 0);
        v9 = (float)(int)WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)v16, (void *)v19) * 0.015625;
        v20 = WebCore::RenderBlock::fragmentAtBlockOffset(v16, v17);
        v21 = WebCore::RenderBlock::logicalRightOffsetForContent(v16, v20);
        v22 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 1816))(v16, v17, v21, 0);
        result = (_QWORD *)WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)v16, (void *)v22);
        v7 = (float)(int)result * 0.015625;
        v8 = fmaxf(v7 - v9, 0.0);
        if (v8 >= *((float *)this + 2))
          break;
        result = *(_QWORD **)(*(_QWORD *)this + 216);
        if (!result)
          break;
      }
    }
    v23 = v8 * 64.0;
    if (v23 >= 2147483650.0)
    {
      v24 = 33554000.0;
    }
    else if (v23 <= -2147483650.0)
    {
      v24 = -33554000.0;
    }
    else
    {
      v24 = (float)(int)v23 * 0.015625;
    }
    v25 = v9 * 64.0;
    if (v25 >= 2147483650.0)
    {
      v26 = 33554000.0;
    }
    else if (v25 <= -2147483650.0)
    {
      v26 = -33554000.0;
    }
    else
    {
      v26 = (float)(int)v25 * 0.015625;
    }
    v27 = v7 * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 33554000.0;
    }
    else if (v27 <= -2147483650.0)
    {
      v28 = -33554000.0;
    }
    else
    {
      v28 = (float)(int)v27 * 0.015625;
    }
    if (v24 > *((float *)this + 8))
    {
      v29 = *(int **)this;
      if (((*(_DWORD *)(*(_QWORD *)this + 124) >> 13) & 6u) - 2 < 4)
        v30 = v29 + 40;
      else
        v30 = v29 + 41;
      *v30 = v6;
LABEL_24:
      *((float *)this + 7) = v28;
      *((float *)this + 8) = v24;
      *((float *)this + 6) = v26;
      return result;
    }
    return result;
  }
  if (a2)
    LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v12, v31);
  else
    LineStyle = v12 + 80;
  v34 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, v31) * 64.0);
  v35 = 0x80000000;
  if (v34 > -2147500000.0)
    v35 = (int)v34;
  if (v34 < 2147500000.0)
    v36 = v35;
  else
    v36 = 0x7FFFFFFFLL;
  v37 = (int *)(*(_QWORD *)this + 160);
  if (((*(_DWORD *)(*(_QWORD *)this + 124) >> 13) & 6u) - 2 >= 4)
    v37 = (int *)(*(_QWORD *)this + 164);
  v38 = *v37;
  v39 = *(_QWORD **)(*(_QWORD *)this + 216);
  NextFloatLogicalBottomBelow = *v37;
  if (v39)
    NextFloatLogicalBottomBelow = WebCore::FloatingObjects::findNextFloatLogicalBottomBelow(v39, *v37);
  do
  {
    v41 = *(WebCore::RenderBox **)this;
    WebCore::RenderBlock::fragmentAtBlockOffset(*(_BYTE **)this, v38);
    v42 = WebCore::RenderBlock::logicalLeftOffsetForContent(v41);
    v43 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v41 + 1824))(v41, v38, v42, v36);
    v44 = (float)(int)WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)v41, (void *)v43) * 0.015625;
    v45 = WebCore::RenderBlock::fragmentAtBlockOffset(v41, v38);
    v46 = WebCore::RenderBlock::logicalRightOffsetForContent(v41, v45);
    v47 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v41 + 1816))(v41, v38, v46, v36);
    result = (_QWORD *)WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)v41, (void *)v47);
    v48 = (float)(int)result * 0.015625;
    v49 = fmaxf(v48 - v44, 0.0);
    v50 = v38 + 64;
    v51 = v49 < *((float *)this + 2) && (int)v38 < NextFloatLogicalBottomBelow;
    v38 += 64;
  }
  while (v51);
  v52 = v49 * 64.0;
  if (v52 >= 2147483650.0)
  {
    v24 = 33554000.0;
  }
  else if (v52 <= -2147483650.0)
  {
    v24 = -33554000.0;
  }
  else
  {
    v24 = (float)(int)v52 * 0.015625;
  }
  v53 = v44 * 64.0;
  if (v53 >= 2147483650.0)
  {
    v26 = 33554000.0;
  }
  else if (v53 <= -2147483650.0)
  {
    v26 = -33554000.0;
  }
  else
  {
    v26 = (float)(int)v53 * 0.015625;
  }
  v54 = v48 * 64.0;
  if (v54 >= 2147483650.0)
  {
    v28 = 33554000.0;
  }
  else if (v54 <= -2147483650.0)
  {
    v28 = -33554000.0;
  }
  else
  {
    v28 = (float)(int)v54 * 0.015625;
  }
  if (v24 > *((float *)this + 8))
  {
    v55 = v50 - 64;
    v56 = *(int **)this;
    if (((*(_DWORD *)(*(_QWORD *)this + 124) >> 13) & 6u) - 2 < 4)
      v57 = (unsigned int *)(v56 + 40);
    else
      v57 = (unsigned int *)(v56 + 41);
    *v57 = v55;
    goto LABEL_24;
  }
  return result;
}

char *WebCore::TrailingObjects::updateWhitespaceCollapsingTransitionsForTrailingBoxes(char *result, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  char v21;
  char v22;
  int v23;
  char v24;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v6 = result;
    v7 = *((unsigned int *)a2 + 3);
    if ((v7 & 1) != 0)
    {
      v12 = *a2;
      v13 = ((v7 - 1) & (((int)v7 - 1) >> 31)) + 1;
      LODWORD(v14) = *((_DWORD *)a2 + 3);
      while (1)
      {
        v14 = (v14 - 1);
        if ((int)v14 < 1)
          break;
        if (v7 <= v14)
          goto LABEL_31;
        if (*(_QWORD *)(v12 + 32 * v14 + 8) == v4)
        {
          v13 = v14 + 1;
          goto LABEL_19;
        }
      }
      LODWORD(v14) = (v7 - 1) & (((int)v7 - 1) >> 31);
LABEL_19:
      if (a4)
      {
        if (v7 <= (int)v14)
        {
LABEL_31:
          __break(0xC471u);
          JUMPOUT(0x19649A7E4);
        }
        v15 = v12 + 32 * (int)v14;
        v16 = *(_DWORD *)(v15 + 24);
        if (v16)
          *(_DWORD *)(v15 + 24) = v16 - 1;
        else
          *(_BYTE *)(v15 + 28) = 1;
      }
      v17 = *((unsigned int *)result + 5);
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = v13;
        do
        {
          if (v19 >= *((unsigned int *)a2 + 3))
          {
            result = WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::ensureLineBoxInsideIgnoredSpaces((char *)a2, *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * v18));
            v17 = *((unsigned int *)v6 + 5);
          }
          v19 += 2;
          ++v18;
        }
        while (v18 < v17);
      }
    }
    else if (!a3)
    {
      v8 = *(_QWORD *)(v4 + 104);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 4);
        if (v9 <= 1)
          v10 = -1;
        else
          v10 = v9 - 2;
      }
      else
      {
        v10 = -1;
      }
      *(_QWORD *)&v20 = 0;
      *((_QWORD *)&v20 + 1) = v4;
      v21 = 0;
      v22 = 0;
      v23 = v10;
      v24 = 0;
      result = WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::startIgnoringSpaces((char *)a2, &v20);
      if (*((_DWORD *)v6 + 5))
      {
        v11 = 0;
        do
          result = WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::ensureLineBoxInsideIgnoredSpaces((char *)a2, *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * v11++));
        while (v11 < *((unsigned int *)v6 + 5));
      }
    }
  }
  return result;
}

char *WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::ensureLineBoxInsideIgnoredSpaces(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = (uint64_t)result;
  *(_QWORD *)&v12 = 0;
  *((_QWORD *)&v12 + 1) = a2;
  LOBYTE(v13) = 0;
  BYTE4(v13) = 0;
  DWORD2(v13) = 0;
  BYTE12(v13) = 0;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 == *((_DWORD *)result + 2))
  {
    result = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v3 + 1, (unint64_t)&v12);
    v4 = (_OWORD *)(*(_QWORD *)v2 + 32 * *(unsigned int *)(v2 + 12));
    v5 = *(_OWORD *)result;
    v6 = *((_OWORD *)result + 1);
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)result + 32 * v3);
    v5 = v12;
    v6 = v13;
  }
  *v4 = v5;
  v4[1] = v6;
  v7 = *(_DWORD *)(v2 + 8);
  v8 = (*(_DWORD *)(v2 + 12) + 1);
  *(_DWORD *)(v2 + 12) = v8;
  if ((_DWORD)v8 == v7)
  {
    result = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v8 + 1, (unint64_t)&v12);
    v9 = (_OWORD *)(*(_QWORD *)v2 + 32 * *(unsigned int *)(v2 + 12));
    v10 = *(_OWORD *)result;
    v11 = *((_OWORD *)result + 1);
  }
  else
  {
    v9 = (_OWORD *)(*(_QWORD *)v2 + 32 * v8);
    v10 = v12;
    v11 = v13;
  }
  *v9 = v10;
  v9[1] = v11;
  ++*(_DWORD *)(v2 + 12);
  return result;
}

char *WebCore::WhitespaceCollapsingState<WebCore::LegacyInlineIterator>::startIgnoringSpaces(char *result, __int128 *a2)
{
  char *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v2 = result;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 == *((_DWORD *)result + 2))
  {
    result = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v3 + 1, (unint64_t)a2);
    v4 = (_OWORD *)(*(_QWORD *)v2 + 32 * *((unsigned int *)v2 + 3));
    v5 = *(_OWORD *)result;
    v6 = *((_OWORD *)result + 1);
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)result + 32 * v3);
    v5 = *a2;
    v6 = a2[1];
  }
  *v4 = v5;
  v4[1] = v6;
  ++*((_DWORD *)v2 + 3);
  return result;
}

uint64_t WebCore::MathMLStyle::resolveMathMLStyle(WebCore::MathMLStyle *this, WebCore::RenderObject *a2)
{
  int v4;
  uint64_t i;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  _WORD *v10;
  __int16 v11;

  v4 = *((_DWORD *)this + 1);
  for (i = *((_QWORD *)a2 + 4); i; i = *(_QWORD *)(v6 + 32))
  {
    v6 = *(_QWORD *)(i + 8);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 46) == 63)
      goto LABEL_8;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6) & 1) != 0)
    {
      if (*(_BYTE *)(v6 + 46) == 63)
      {
LABEL_8:
        v8 = (uint64_t *)(v6 + 360);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
        if (!(_DWORD)result)
          goto LABEL_11;
        v8 = (uint64_t *)(v6 + 200);
      }
      v9 = *v8;
      *((_DWORD *)this + 1) = 0;
      if (v9)
      {
        result = *(unsigned int *)(v9 + 4);
        goto LABEL_11;
      }
      result = 0;
      goto LABEL_12;
    }
  }
  result = 0;
LABEL_11:
  *((_DWORD *)this + 1) = result;
LABEL_12:
  if ((*((_BYTE *)a2 + 45) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 45) & 2) != 0)
      goto LABEL_28;
    v10 = *(_WORD **)(*((_QWORD *)a2 + 3) + 8);
    if (!v10)
      goto LABEL_21;
    v11 = v10[14];
    if ((v11 & 8) == 0)
    {
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19649AA7CLL);
    }
    if ((v11 & 0x40) != 0)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 1176))(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8));
      if ((result & 0xFF00000000) != 0)
        *((_DWORD *)this + 1) = result;
      else
        result = *((unsigned int *)this + 1);
    }
  }
LABEL_21:
  if ((_DWORD)result != v4)
  {
    result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 208))(a2);
    if ((_DWORD)result)
    {
      if ((*((_BYTE *)a2 + 45) & 1) == 0)
        return (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 1928))(a2);
    }
  }
  return result;
}

void WebCore::MathOperator::reset(WebCore::MathOperator *this, WebCore::Font **a2)
{
  CGFloat height;
  _BOOL4 Glyph;
  void *v5;
  WTF *v6;
  void *width_low;
  double v8;
  unsigned __int16 *v9;
  uint64_t v10;
  BOOL v11;
  float width;
  int v13;
  float v14;
  float v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  WebCore::Font *v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  WebCore::Font **v33;
  unint64_t v34;
  float v35;
  double v36;
  int v37;
  float v38;
  float v39;
  BOOL v40;
  void *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  CTFontOrientation v45;
  uint64_t v46;
  unsigned __int16 v47;
  char v48;
  WTF *v49;
  unsigned __int16 v50;
  char v51;
  WebCore::Font **v52;
  WTF *v53;
  uint64_t v54;
  CGGlyph glyphs[4];
  uint64_t v56;
  CGSize advances;

  height = *(double *)&a2;
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 60) = 0x3F80000000000000;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  Glyph = WebCore::MathOperator::getGlyph((uint64_t)a2, (void *)*(unsigned int *)this, (uint64_t)&v47);
  v6 = v49;
  if (!Glyph)
    goto LABEL_68;
  LODWORD(width_low) = v47;
  v8 = 0.0;
  v9 = &WebCore::lookup[6508];
  if (!v49
    || (v10 = *((_QWORD *)v49 + 1)) == 0
    || (*(unsigned __int16 *)(v10 + 334) == v47 ? (v11 = v47 == 0) : (v11 = 1), !v11 && (*(_BYTE *)(v10 + 256) & 2) == 0))
  {
LABEL_12:
    v13 = (int)v8;
    goto LABEL_13;
  }
  width = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v10 + 128, v47);
  if (width == -1.0)
  {
    glyphs[0] = (unsigned __int16)width_low;
    advances = (CGSize)*MEMORY[0x1E0C9D820];
    if (*(float *)(v10 + 96) != 0.0)
    {
      v45 = kCTFontOrientationHorizontal;
      if (*(_BYTE *)(v10 + 100))
      {
        if ((*(_BYTE *)(v10 + 344) & 4) != 0)
          v45 = kCTFontOrientationHorizontal;
        else
          v45 = kCTFontOrientationVertical;
      }
      CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v10 + 88), v45, glyphs, &advances, 1);
    }
    width = advances.width;
    WebCore::GlyphMetricsMap<float>::locatePage(v10 + 128, width_low >> 4);
    *(float *)(v46 + 4 * (width_low & 0xF)) = width;
  }
  v8 = (float)(width + *(float *)(v10 + 340)) * 64.0;
  if (v8 < 2147483650.0)
  {
    if (v8 <= -2147483650.0)
      goto LABEL_89;
    goto LABEL_12;
  }
  v13 = 0x7FFFFFFF;
LABEL_13:
  while (1)
  {
    *((_DWORD *)this + 11) = v13;
    *((_DWORD *)this + 12) = v13;
    WebCore::boundsForGlyph((CGGlyph)width_low, (uint64_t)v6);
    v16 = v14 * -64.0;
    v17 = *((double *)v9 + 458);
    v18 = v16 > -2147483650.0 ? (int)v16 : 0x80000000;
    v19 = v16 < v17 ? v18 : 0x7FFFFFFF;
    *((_DWORD *)this + 13) = v19;
    v20 = (float)(v14 + v15) * 64.0;
    if (v20 >= v17)
      v21 = 0x7FFFFFFF;
    else
      v21 = v20 <= -2147483650.0 ? 0x80000000 : (int)v20;
    *((_DWORD *)this + 14) = v21;
    v22 = *((_DWORD *)this + 1);
    if (v22 != 1)
      break;
    LOWORD(advances.width) = 0;
    BYTE2(advances.width) = 0;
    advances.height = 0.0;
    v23 = WebCore::MathOperator::getGlyph(*(uint64_t *)&height, (void *)*(unsigned int *)this, (uint64_t)&advances);
    height = advances.height;
    if (!v23)
      goto LABEL_65;
    v24 = *(_QWORD *)&advances.height ? *(WebCore::Font **)(*(_QWORD *)&advances.height + 8) : 0;
    if (!WebCore::Font::mathData(v24))
      goto LABEL_65;
    width_low = (void *)LOWORD(advances.width);
    WebCore::boundsForGlyph(LOWORD(advances.width), *(uint64_t *)&height);
    if (height != 0.0)
    {
      v26 = v25 * 1.4142;
      v27 = WebCore::Font::mathData(*(WebCore::Font **)(*(_QWORD *)&height + 8));
      WebCore::OpenTypeMathData::getMathConstant(v27);
      if (v26 >= v28)
        v29 = v26;
      else
        v29 = v28;
      *(_QWORD *)glyphs = 0;
      v56 = 0;
      v53 = 0;
      v54 = 0;
      v30 = WebCore::Font::mathData(*(WebCore::Font **)(*(_QWORD *)&height + 8));
      WebCore::OpenTypeMathData::getMathVariants(v30, width_low, 1, (uint64_t)glyphs, (unsigned int *)&v53);
      if (!HIDWORD(v56))
      {
LABEL_60:
        v43 = v53;
        if (v53)
        {
          v53 = 0;
          LODWORD(v54) = 0;
          WTF::fastFree(v43, v5);
        }
        v44 = *(WTF **)glyphs;
        if (*(_QWORD *)glyphs)
        {
          *(_QWORD *)glyphs = 0;
          LODWORD(v56) = 0;
          WTF::fastFree(v44, v5);
        }
        height = advances.height;
LABEL_65:
        if (height != 0.0)
        {
          if (**(_DWORD **)&height == 1)
          {
            WTF::fastFree(*(WTF **)&height, v5);
            if (!v6)
              return;
            goto LABEL_69;
          }
          --**(_DWORD **)&height;
        }
        goto LABEL_68;
      }
      v31 = *(unsigned __int16 **)glyphs;
      v32 = 2 * HIDWORD(v56) - 2;
      while (2)
      {
        LODWORD(width_low) = *v31;
        v9 = *(unsigned __int16 **)(*(_QWORD *)&height + 8);
        v50 = *v31;
        v51 = 0;
        if (!v9)
        {
          v33 = 0;
          goto LABEL_38;
        }
        v33 = (WebCore::Font **)*((_QWORD *)v9 + 1);
        if (v33)
          goto LABEL_53;
        v33 = (WebCore::Font **)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v33 = 1;
        v33[1] = (WebCore::Font *)v9;
        v42 = (WTF *)*((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = v33;
        if (!v42)
          goto LABEL_53;
        if (*(_DWORD *)v42 != 1)
        {
          --*(_DWORD *)v42;
          goto LABEL_53;
        }
        WTF::fastFree(v42, v41);
        v33 = (WebCore::Font **)*((_QWORD *)v9 + 1);
        if (v33)
LABEL_53:
          ++*(_DWORD *)v33;
LABEL_38:
        v52 = v33;
        WebCore::MathOperator::setSizeVariant((uint64_t)this, &v50);
        *((_DWORD *)this + 11) = *((_DWORD *)this + 12);
        if (!v33)
          break;
        v34 = WebCore::Font::mathData(v33[1]);
        WebCore::OpenTypeMathData::getItalicCorrection(v34, v33[1], width_low);
        v36 = v35 * 64.0;
        if (v36 >= v17)
        {
          v37 = 0x7FFFFFFF;
        }
        else if (v36 <= -2147483650.0)
        {
          v37 = 0x80000000;
        }
        else
        {
          v37 = (int)v36;
        }
        *((_DWORD *)this + 15) = v37;
        WebCore::boundsForGlyph((CGGlyph)width_low, (uint64_t)v33);
        v39 = v38;
        v52 = 0;
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree((WTF *)v33, v5);
        else
          --*(_DWORD *)v33;
        ++v31;
        v40 = v39 >= v29 || v32 == 0;
        v32 -= 2;
        if (v40)
          goto LABEL_60;
        continue;
      }
    }
    WebCore::Font::mathData(0);
    __break(1u);
LABEL_89:
    v13 = 0x80000000;
  }
  if (v22 != 2)
  {
LABEL_68:
    if (!v6)
      return;
    goto LABEL_69;
  }
  WebCore::MathOperator::calculateStretchyData((int *)this, *(uint64_t *)&height, 1, 0);
  if (!v6)
    return;
LABEL_69:
  if (*(_DWORD *)v6 == 1)
    WTF::fastFree(v6, v5);
  else
    --*(_DWORD *)v6;
}

WTF *WebCore::MathOperator::calculateStretchyData(int *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  int *v6;
  void *v7;
  WTF *v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  WebCore::Font *v14;
  _BOOL4 Glyph;
  CGFloat height;
  WebCore::Font *v17;
  uint64_t v18;
  CGGlyph *v19;
  uint64_t i;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  float v24;
  uint64_t v25;
  BOOL v26;
  float v27;
  double v28;
  int v29;
  float v30;
  uint64_t v31;
  BOOL v32;
  float v33;
  double v34;
  int v35;
  CTFontOrientation v37;
  uint64_t v38;
  CTFontOrientation v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  BOOL v52;
  int v53;
  unsigned __int16 *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  int v60;
  unsigned __int16 v61;
  WTF *v62;
  int v63;
  int v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  WTF *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  int v72;
  int v73;
  unsigned int v74;
  float v75;
  uint64_t v76;
  int *v77;
  unsigned int v78;
  BOOL v79;
  float v80;
  double v81;
  int v82;
  float v83;
  uint64_t v84;
  unsigned int v85;
  float v86;
  double v87;
  int v88;
  float v89;
  uint64_t v90;
  unsigned int v91;
  float v92;
  double v93;
  int v94;
  double v95;
  uint64_t v96;
  unsigned int v97;
  float v98;
  int v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  float v111;
  uint64_t v112;
  unsigned int v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  unsigned int v118;
  float v119;
  unsigned __int16 v120;
  int *v121;
  int *v122;
  float v123;
  uint64_t v124;
  unsigned int v125;
  float v126;
  double v127;
  int v128;
  float v129;
  uint64_t v130;
  unsigned int v131;
  float v132;
  double v133;
  int v134;
  double v135;
  uint64_t v136;
  unsigned int v137;
  float v138;
  int v139;
  double v140;
  uint64_t v141;
  unsigned int v142;
  float v143;
  int v144;
  float v145;
  float v146;
  double v147;
  int v148;
  double v149;
  int v150;
  float v151;
  float v152;
  double v153;
  int v154;
  double v155;
  int v156;
  float v157;
  float v158;
  double v159;
  int v160;
  double v161;
  int v162;
  float v163;
  float v164;
  double v165;
  int v166;
  double v167;
  int v168;
  WTF *v169;
  WTF *v170;
  WTF *v171;
  WTF *v172;
  WTF *v173;
  WTF *v174;
  WTF *v175;
  WTF *result;
  int v177;
  int v178;
  int v179;
  float v180;
  double v181;
  int v182;
  int v183;
  double v184;
  int v185;
  void *v186;
  _BOOL4 v187;
  WTF *v188;
  WebCore::Font *v189;
  uint64_t v190;
  int v191;
  void *v192;
  _BOOL4 v193;
  WTF *v194;
  WebCore::Font *v195;
  uint64_t v196;
  CTFontOrientation v197;
  float width;
  uint64_t v199;
  CTFontOrientation v200;
  float v201;
  uint64_t v202;
  CTFontOrientation v203;
  float v204;
  uint64_t v205;
  CTFontOrientation v206;
  float v207;
  uint64_t v208;
  CTFontOrientation v209;
  float v210;
  uint64_t v211;
  uint64_t v212;
  CTFontOrientation v213;
  float v214;
  uint64_t v215;
  CTFontOrientation v216;
  float v217;
  uint64_t v218;
  CTFontOrientation v219;
  float v220;
  uint64_t v221;
  CTFontOrientation v222;
  float v223;
  uint64_t v224;
  CTFontOrientation v225;
  float v226;
  uint64_t v227;
  CTFontOrientation v228;
  float v229;
  uint64_t v230;
  CTFontOrientation v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int *v236;
  unsigned int v238;
  CGGlyph v239;
  WTF *v240;
  CGGlyph v241;
  WTF *v242;
  unsigned __int16 v243;
  WTF *v244;
  CGGlyph v245;
  WTF *v246;
  CGGlyph v247;
  char v248;
  WTF *v249;
  CGGlyph glyphs;
  WTF *v251;
  WTF *v252;
  WTF *v253;
  WTF *v254;
  WTF *v255;
  CGGlyph v256;
  char v257;
  WTF *v258;
  CGSize advances;
  CGGlyph v260[5];

  v5 = a2;
  v6 = a1;
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v238 = a1[1];
  if (!WebCore::MathOperator::getGlyph(a2, (void *)*a1, (uint64_t)&v247))
    goto LABEL_367;
  if (a3)
  {
    v8 = v249;
  }
  else
  {
    v9 = v247;
    v8 = v249;
    if (v238 == 2)
    {
      WebCore::boundsForGlyph(v247, (uint64_t)v249);
    }
    else
    {
      v10 = 0.0;
      if (v249)
      {
        v11 = *((_QWORD *)v249 + 1);
        if (v11)
        {
          v12 = *(unsigned __int16 *)(v11 + 334) != v247 || v247 == 0;
          if (v12 || (*(_BYTE *)(v11 + 256) & 2) != 0)
          {
            v13 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v11 + 128, v247);
            if (v13 == -1.0)
            {
              v256 = v9;
              advances = (CGSize)*MEMORY[0x1E0C9D820];
              if (*(float *)(v11 + 96) != 0.0)
              {
                v197 = kCTFontOrientationHorizontal;
                if (*(_BYTE *)(v11 + 100))
                {
                  if ((*(_BYTE *)(v11 + 344) & 4) != 0)
                    v197 = kCTFontOrientationHorizontal;
                  else
                    v197 = kCTFontOrientationVertical;
                }
                CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v11 + 88), v197, &v256, &advances, 1);
              }
              width = advances.width;
              WebCore::GlyphMetricsMap<float>::locatePage(v11 + 128, v9 >> 4);
              v13 = width;
              *(float *)(v199 + 4 * (v9 & 0xF)) = width;
            }
            v10 = v13 + *(float *)(v11 + 340);
          }
        }
      }
    }
    if ((float)((float)a4 * 0.015625) <= v10)
      goto LABEL_367;
  }
  if (v8)
    v14 = (WebCore::Font *)*((_QWORD *)v8 + 1);
  else
    v14 = 0;
  v236 = v6;
  if (!WebCore::Font::mathData(v14))
  {
    if (v238 != 2)
      goto LABEL_367;
    v53 = *v6;
    if (*v6 > 8213)
    {
      if (v53 > 8967)
      {
        switch(v53)
        {
          case 8968:
            v54 = (unsigned __int16 *)&unk_1969FD498;
            goto LABEL_208;
          case 8969:
            v54 = (unsigned __int16 *)&unk_1969FD4A4;
            goto LABEL_208;
          case 8970:
            v54 = (unsigned __int16 *)&unk_1969FD4B0;
            goto LABEL_208;
          case 8971:
            v54 = (unsigned __int16 *)&unk_1969FD4BC;
            goto LABEL_208;
          default:
            goto LABEL_375;
        }
      }
      switch(v53)
      {
        case 8214:
          v54 = (unsigned __int16 *)&unk_1969FD4D4;
          goto LABEL_208;
        case 8741:
          v54 = (unsigned __int16 *)&unk_1969FD4E0;
          goto LABEL_208;
        case 8747:
          v54 = (unsigned __int16 *)&unk_1969FD4EC;
          goto LABEL_208;
      }
    }
    else if (v53 <= 92)
    {
      switch(v53)
      {
        case '(':
          v54 = (unsigned __int16 *)&WebCore::stretchyCharacters;
          goto LABEL_208;
        case ')':
          v54 = (unsigned __int16 *)&unk_1969FD45C;
          goto LABEL_208;
        case '[':
          v54 = (unsigned __int16 *)&unk_1969FD468;
          goto LABEL_208;
      }
    }
    else if (v53 > 123)
    {
      if (v53 == 124)
      {
        v54 = (unsigned __int16 *)&unk_1969FD4C8;
        goto LABEL_208;
      }
      if (v53 == 125)
      {
        v54 = (unsigned __int16 *)&unk_1969FD48C;
        goto LABEL_208;
      }
    }
    else
    {
      if (v53 == 93)
      {
        v54 = (unsigned __int16 *)&unk_1969FD474;
        goto LABEL_208;
      }
      if (v53 == 123)
      {
        v54 = (unsigned __int16 *)&unk_1969FD480;
LABEL_208:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v71 = (void *)v54[2];
        v70 = (void *)v54[3];
        v69 = (void *)v54[4];
        v68 = (void *)v54[5];
        goto LABEL_209;
      }
    }
LABEL_375:
    if (v53 == 8730 && (a3 & 1) == 0)
    {
      v178 = v6[13];
      v177 = v6[14];
      v179 = v178 + v177;
      if (__OFADD__(v178, v177))
        v179 = (v178 >> 31) + 0x7FFFFFFF;
      if (v179 >= 1 && v179 < a4)
      {
        v180 = (float)((float)a4 * 0.015625) / (float)((float)v179 * 0.015625);
        *((float *)v6 + 16) = v180;
        v181 = (float)((float)((float)v178 * 0.015625) * v180) * 64.0;
        if (v181 > -2147483650.0)
          v182 = (int)v181;
        else
          v182 = 0x80000000;
        if (v181 < 2147483650.0)
          v183 = v182;
        else
          v183 = 0x7FFFFFFF;
        v6[13] = v183;
        v184 = (float)((float)((float)v177 * 0.015625) * v180) * 64.0;
        if (v184 >= 2147483650.0)
        {
          v185 = 0x7FFFFFFF;
        }
        else if (v184 <= -2147483650.0)
        {
          v185 = 0x80000000;
        }
        else
        {
          v185 = (int)v184;
        }
        v6[14] = v185;
      }
    }
    goto LABEL_367;
  }
  v254 = 0;
  v255 = 0;
  v252 = 0;
  v253 = 0;
  LOWORD(advances.width) = 0;
  BYTE2(advances.width) = 0;
  advances.height = 0.0;
  v234 = v5;
  Glyph = WebCore::MathOperator::getGlyph(v5, (void *)*v6, (uint64_t)&advances);
  height = advances.height;
  if (!Glyph)
    goto LABEL_25;
  if (!*(_QWORD *)&advances.height)
  {
    v212 = WebCore::Font::mathData(0);
    v17 = 0;
    if (!v212)
      goto LABEL_28;
LABEL_23:
    v18 = WebCore::Font::mathData(v17);
    WebCore::OpenTypeMathData::getMathVariants(v18, (void *)LOWORD(advances.width), v238 == 2, (uint64_t)&v254, (unsigned int *)&v252);
    if (!HIDWORD(v255) && !HIDWORD(v253))
    {
      v72 = *v6;
      if (*v6 > 174)
      {
        switch(v72)
        {
          case 175:
            v73 = 1;
            v74 = 3;
            break;
          case 710:
            v73 = 0;
            v74 = 4;
            break;
          case 711:
            v73 = 0;
            v74 = 5;
            break;
          default:
            goto LABEL_25;
        }
      }
      else
      {
        switch(v72)
        {
          case '^':
            v73 = 0;
            v74 = 0;
            break;
          case '_':
            v73 = 0;
            v74 = 1;
            break;
          case '~':
            v73 = 0;
            v74 = 2;
            break;
          default:
            goto LABEL_25;
        }
      }
      v186 = (void *)WebCore::characterFallback[3 * v74 + 1];
      v256 = 0;
      v257 = 0;
      v258 = 0;
      v187 = WebCore::MathOperator::getGlyph(v234, v186, (uint64_t)&v256);
      v188 = v258;
      if (v187)
      {
        if (v258)
          v189 = (WebCore::Font *)*((_QWORD *)v258 + 1);
        else
          v189 = 0;
        v190 = WebCore::Font::mathData(v189);
        WebCore::OpenTypeMathData::getMathVariants(v190, (void *)v256, v238 == 2, (uint64_t)&v254, (unsigned int *)&v252);
        if (HIDWORD(v255))
          v191 = 1;
        else
          v191 = HIDWORD(v253) != 0;
      }
      else
      {
        v191 = 7;
      }
      if (v188)
      {
        if (*(_DWORD *)v188 == 1)
          WTF::fastFree(v188, v7);
        else
          --*(_DWORD *)v188;
      }
      if ((v191 == 7 || !v191) && v73)
      {
        v192 = (void *)WebCore::characterFallback[3 * v74 + 2];
        v256 = 0;
        v257 = 0;
        v258 = 0;
        v193 = WebCore::MathOperator::getGlyph(v234, v192, (uint64_t)&v256);
        v194 = v258;
        if (v193)
        {
          if (v258)
            v195 = (WebCore::Font *)*((_QWORD *)v258 + 1);
          else
            v195 = 0;
          v196 = WebCore::Font::mathData(v195);
          WebCore::OpenTypeMathData::getMathVariants(v196, (void *)v256, v238 == 2, (uint64_t)&v254, (unsigned int *)&v252);
        }
        if (v194)
        {
          if (*(_DWORD *)v194 == 1)
            WTF::fastFree(v194, v7);
          else
            --*(_DWORD *)v194;
        }
      }
    }
LABEL_25:
    if (height == 0.0)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (WebCore::Font::mathData(*(WebCore::Font **)(*(_QWORD *)&advances.height + 8)))
  {
    v17 = *(WebCore::Font **)(*(_QWORD *)&height + 8);
    goto LABEL_23;
  }
LABEL_26:
  if (**(_DWORD **)&height == 1)
    WTF::fastFree(*(WTF **)&height, v7);
  else
    --**(_DWORD **)&height;
LABEL_28:
  if (HIDWORD(v255))
  {
    v19 = (CGGlyph *)v254;
    for (i = 2 * HIDWORD(v255); i; i -= 2)
    {
      v21 = *v19;
      if (!v8)
      {
        v23 = 0;
        v256 = *v19;
        v257 = 0;
        goto LABEL_33;
      }
      v22 = *((_QWORD *)v8 + 1);
      v256 = *v19;
      v257 = 0;
      if (!v22)
      {
        v23 = 0;
        goto LABEL_33;
      }
      v23 = *(WTF **)(v22 + 8);
      if (!v23)
      {
        v23 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v23 = 1;
        *((_QWORD *)v23 + 1) = v22;
        v41 = *(WTF **)(v22 + 8);
        *(_QWORD *)(v22 + 8) = v23;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
          {
            WTF::fastFree(v41, v7);
            v23 = *(WTF **)(v22 + 8);
            if (!v23)
              goto LABEL_85;
          }
          else
          {
            --*(_DWORD *)v41;
          }
        }
      }
      ++*(_DWORD *)v23;
LABEL_85:
      v6 = v236;
LABEL_33:
      v258 = v23;
      if (a3)
      {
        v24 = 0.0;
        if (v23)
        {
          v25 = *((_QWORD *)v23 + 1);
          if (v25)
          {
            v26 = *(unsigned __int16 *)(v25 + 334) != v21 || v21 == 0;
            if (v26 || (*(_BYTE *)(v25 + 256) & 2) != 0)
            {
              v27 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v25 + 128, v21);
              if (v27 == -1.0)
              {
                glyphs = v21;
                advances = (CGSize)*MEMORY[0x1E0C9D820];
                if (*(float *)(v25 + 96) != 0.0)
                {
                  if (*(_BYTE *)(v25 + 100))
                  {
                    if ((*(_BYTE *)(v25 + 344) & 4) != 0)
                      v37 = kCTFontOrientationHorizontal;
                    else
                      v37 = kCTFontOrientationVertical;
                  }
                  else
                  {
                    v37 = kCTFontOrientationHorizontal;
                  }
                  CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v25 + 88), v37, &glyphs, &advances, 1);
                }
                v27 = advances.width;
                WebCore::GlyphMetricsMap<float>::locatePage(v25 + 128, v21 >> 4);
                *(float *)(v38 + 4 * (v21 & 0xF)) = v27;
              }
              v24 = v27 + *(float *)(v25 + 340);
              v6 = v236;
            }
          }
        }
        v28 = v24 * 64.0;
        if (v28 >= 2147483650.0)
        {
          v29 = 0x7FFFFFFF;
        }
        else if (v28 <= -2147483650.0)
        {
          v29 = 0x80000000;
        }
        else
        {
          v29 = (int)v28;
        }
        if (v6[11] > v29)
          v29 = v6[11];
        v6[11] = v29;
      }
      else
      {
        WebCore::MathOperator::setSizeVariant((uint64_t)v6, &v256);
        if (v238 == 2)
        {
          WebCore::boundsForGlyph(v21, (uint64_t)v23);
        }
        else
        {
          v30 = 0.0;
          if (v23)
          {
            v31 = *((_QWORD *)v23 + 1);
            if (v31)
            {
              v32 = *(unsigned __int16 *)(v31 + 334) != v21 || v21 == 0;
              if (v32 || (*(_BYTE *)(v31 + 256) & 2) != 0)
              {
                v33 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v31 + 128, v21);
                if (v33 == -1.0)
                {
                  glyphs = v21;
                  advances = (CGSize)*MEMORY[0x1E0C9D820];
                  if (*(float *)(v31 + 96) != 0.0)
                  {
                    if (*(_BYTE *)(v31 + 100))
                    {
                      if ((*(_BYTE *)(v31 + 344) & 4) != 0)
                        v39 = kCTFontOrientationHorizontal;
                      else
                        v39 = kCTFontOrientationVertical;
                    }
                    else
                    {
                      v39 = kCTFontOrientationHorizontal;
                    }
                    CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v31 + 88), v39, &glyphs, &advances, 1);
                  }
                  v33 = advances.width;
                  WebCore::GlyphMetricsMap<float>::locatePage(v31 + 128, v21 >> 4);
                  *(float *)(v40 + 4 * (v21 & 0xF)) = v33;
                }
                v30 = v33 + *(float *)(v31 + 340);
                v6 = v236;
              }
            }
          }
        }
        v34 = v30 * 64.0;
        v35 = (int)fmax(v34, -2147483650.0);
        if (v34 >= 2147483650.0 || v35 >= a4)
        {
          v258 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v7);
            else
              --*(_DWORD *)v23;
          }
          v58 = v252;
          if (v252)
          {
            v252 = 0;
            LODWORD(v253) = 0;
            WTF::fastFree(v58, v7);
          }
          v59 = v254;
          if (v254)
          {
            v254 = 0;
            LODWORD(v255) = 0;
            goto LABEL_142;
          }
          goto LABEL_367;
        }
      }
      v258 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::fastFree(v23, v7);
        else
          --*(_DWORD *)v23;
      }
      ++v19;
    }
  }
  v42 = v252;
  if (!HIDWORD(v253))
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v5 = v234;
    goto LABEL_172;
  }
  v43 = 0;
  v44 = 4 * HIDWORD(v253);
  v45 = (unsigned __int8 *)v252 + 2;
  v46 = v44;
  v5 = v234;
  do
  {
    v47 = *v45;
    v45 += 4;
    if (!v47)
      ++v43;
    v46 -= 4;
  }
  while (v46);
  if (v43 <= 3)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    if (v43 != 3)
    {
      v60 = 0;
      v61 = 0;
      v62 = v252;
      while (2)
      {
        v63 = v60;
        if (v60 == 1)
          v64 = 3;
        else
          v64 = v60;
        if (!*((_BYTE *)v62 + 2))
        {
          v52 = 0;
          switch(v64)
          {
            case 0:
              v49 = *(_WORD *)v62;
              v60 = 1;
              goto LABEL_162;
            case 1:
            case 2:
              v48 = *(_WORD *)v62;
LABEL_158:
              v60 = 3;
              goto LABEL_162;
            case 3:
            case 4:
              v51 = *(_WORD *)v62;
              v60 = 5;
              goto LABEL_162;
            case 5:
              goto LABEL_172;
            default:
LABEL_159:
              v60 = v63;
LABEL_162:
              v62 = (WTF *)((char *)v62 + 4);
              v44 -= 4;
              if (!v44)
                goto LABEL_163;
              continue;
          }
        }
        break;
      }
      if (v61)
      {
        if (*(unsigned __int16 *)v62 != v61)
          goto LABEL_109;
      }
      else
      {
        v50 = *(_WORD *)v62;
        v61 = *(_WORD *)v62;
      }
      v52 = 0;
      v60 = 1;
      switch(v64)
      {
        case 0:
          goto LABEL_162;
        case 1:
        case 3:
          v60 = v64;
          goto LABEL_162;
        case 2:
          goto LABEL_158;
        case 4:
        case 5:
          goto LABEL_172;
        default:
          goto LABEL_159;
      }
      goto LABEL_172;
    }
    v55 = 0;
    v61 = 0;
    v56 = v252;
    while (2)
    {
      if (!*((_BYTE *)v56 + 2))
      {
        v52 = 0;
        switch((int)v55)
        {
          case 0:
            v49 = *(_WORD *)v56;
            v57 = 1;
            goto LABEL_133;
          case 1:
          case 2:
            v48 = *(_WORD *)v56;
LABEL_130:
            v57 = 3;
            goto LABEL_133;
          case 3:
            v51 = *(_WORD *)v56;
            v57 = 5;
            goto LABEL_133;
          case 5:
            goto LABEL_172;
          default:
LABEL_129:
            v57 = v55;
LABEL_133:
            v56 = (WTF *)((char *)v56 + 4);
            v55 = v57;
            v44 -= 4;
            if (v44)
              continue;
LABEL_163:
            if (v51)
              v65 = v51;
            else
              v65 = v61;
            if (v49)
              v66 = v49;
            else
              v66 = v61;
            if (v61)
            {
              v49 = v66;
              v51 = v65;
            }
            v52 = v61 != 0;
            break;
        }
        goto LABEL_172;
      }
      break;
    }
    if (v61)
    {
      if (*(unsigned __int16 *)v56 != v61)
        goto LABEL_109;
    }
    else
    {
      v50 = *(_WORD *)v56;
      v61 = *(_WORD *)v56;
    }
    v52 = 0;
    v57 = 1;
    switch((int)v55)
    {
      case 0:
        goto LABEL_133;
      case 2:
        goto LABEL_130;
      case 5:
        goto LABEL_172;
      default:
        goto LABEL_129;
    }
    goto LABEL_172;
  }
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
LABEL_109:
  v52 = 0;
LABEL_172:
  if (v252)
  {
    v252 = 0;
    LODWORD(v253) = 0;
    WTF::fastFree(v42, v7);
  }
  v67 = v254;
  if (v254)
  {
    v254 = 0;
    LODWORD(v255) = 0;
    WTF::fastFree(v67, v7);
  }
  if (!v52)
    goto LABEL_367;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
LABEL_209:
  WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v245, *(_QWORD *)(v5 + 32), v71, v51);
  WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v243, *(_QWORD *)(v5 + 32), v70, v50);
  WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v241, *(_QWORD *)(v5 + 32), v68, v48);
  WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v239, *(_QWORD *)(v5 + 32), v69, v49);
  if (a3)
  {
    v75 = 0.0;
    if (v246)
    {
      v76 = *((_QWORD *)v246 + 1);
      v77 = v236;
      if (v76)
      {
        v78 = v245;
        v79 = *(unsigned __int16 *)(v76 + 334) != v245 || v245 == 0;
        if (v79 || (*(_BYTE *)(v76 + 256) & 2) != 0)
        {
          v80 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v76 + 128, v245);
          if (v80 == -1.0)
          {
            v256 = v78;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v76 + 96) != 0.0)
            {
              v200 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v76 + 100))
              {
                if ((*(_BYTE *)(v76 + 344) & 4) != 0)
                  v200 = kCTFontOrientationHorizontal;
                else
                  v200 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v76 + 88), v200, &v256, &advances, 1);
              v77 = v236;
            }
            v201 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v76 + 128, v78 >> 4);
            v80 = v201;
            *(float *)(v202 + 4 * (v78 & 0xF)) = v201;
          }
          v75 = v80 + *(float *)(v76 + 340);
        }
      }
    }
    else
    {
      v77 = v236;
    }
    v81 = v75 * 64.0;
    if (v81 >= 2147483650.0)
    {
      v82 = 0x7FFFFFFF;
    }
    else if (v81 <= -2147483650.0)
    {
      v82 = 0x80000000;
    }
    else
    {
      v82 = (int)v81;
    }
    if (v77[11] > v82)
      v82 = v77[11];
    v77[11] = v82;
    v83 = 0.0;
    if (v244)
    {
      v84 = *((_QWORD *)v244 + 1);
      if (v84)
      {
        v85 = v243;
        if (*(unsigned __int16 *)(v84 + 334) != v243 || !v243 || (*(_BYTE *)(v84 + 256) & 2) != 0)
        {
          v86 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v84 + 128, v243);
          if (v86 == -1.0)
          {
            v256 = v85;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v84 + 96) != 0.0)
            {
              v203 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v84 + 100))
              {
                if ((*(_BYTE *)(v84 + 344) & 4) != 0)
                  v203 = kCTFontOrientationHorizontal;
                else
                  v203 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v84 + 88), v203, &v256, &advances, 1);
              v77 = v236;
            }
            v204 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v84 + 128, v85 >> 4);
            v86 = v204;
            *(float *)(v205 + 4 * (v85 & 0xF)) = v204;
          }
          v83 = v86 + *(float *)(v84 + 340);
        }
      }
    }
    v87 = v83 * 64.0;
    if (v87 >= 2147483650.0)
    {
      v88 = 0x7FFFFFFF;
    }
    else if (v87 <= -2147483650.0)
    {
      v88 = 0x80000000;
    }
    else
    {
      v88 = (int)v87;
    }
    if (v77[11] > v88)
      v88 = v77[11];
    v77[11] = v88;
    v89 = 0.0;
    if (v242)
    {
      v90 = *((_QWORD *)v242 + 1);
      if (v90)
      {
        v91 = v241;
        if (*(unsigned __int16 *)(v90 + 334) != v241 || !v241 || (*(_BYTE *)(v90 + 256) & 2) != 0)
        {
          v92 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v90 + 128, v241);
          if (v92 == -1.0)
          {
            v256 = v91;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v90 + 96) != 0.0)
            {
              v206 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v90 + 100))
              {
                if ((*(_BYTE *)(v90 + 344) & 4) != 0)
                  v206 = kCTFontOrientationHorizontal;
                else
                  v206 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v90 + 88), v206, &v256, &advances, 1);
              v77 = v236;
            }
            v207 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v90 + 128, v91 >> 4);
            v92 = v207;
            *(float *)(v208 + 4 * (v91 & 0xF)) = v207;
          }
          v89 = v92 + *(float *)(v90 + 340);
        }
      }
    }
    v93 = v89 * 64.0;
    if (v93 >= 2147483650.0)
    {
      v94 = 0x7FFFFFFF;
    }
    else if (v93 <= -2147483650.0)
    {
      v94 = 0x80000000;
    }
    else
    {
      v94 = (int)v93;
    }
    if (v77[11] > v94)
      v94 = v77[11];
    v77[11] = v94;
    v95 = 0.0;
    if (v240)
    {
      v96 = *((_QWORD *)v240 + 1);
      if (v96)
      {
        v97 = v239;
        if (*(unsigned __int16 *)(v96 + 334) != v239 || !v239 || (*(_BYTE *)(v96 + 256) & 2) != 0)
        {
          v98 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v96 + 128, v239);
          if (v98 == -1.0)
          {
            v256 = v97;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v96 + 96) != 0.0)
            {
              v209 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v96 + 100))
              {
                if ((*(_BYTE *)(v96 + 344) & 4) != 0)
                  v209 = kCTFontOrientationHorizontal;
                else
                  v209 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v96 + 88), v209, &v256, &advances, 1);
              v77 = v236;
            }
            v210 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v96 + 128, v97 >> 4);
            v98 = v210;
            *(float *)(v211 + 4 * (v97 & 0xF)) = v210;
          }
          v95 = (float)(v98 + *(float *)(v96 + 340)) * 64.0;
          if (v95 >= 2147483650.0)
          {
            v99 = 0x7FFFFFFF;
            goto LABEL_251;
          }
          if (v95 <= -2147483650.0)
          {
            v99 = 0x80000000;
            goto LABEL_251;
          }
        }
      }
    }
    v99 = (int)v95;
LABEL_251:
    if (v77[11] > v99)
      v99 = v77[11];
    v77[11] = v99;
    goto LABEL_355;
  }
  if (v238 == 2)
  {
    WebCore::boundsForGlyph(v245, (uint64_t)v246);
    v101 = v100;
    WebCore::boundsForGlyph(v241, (uint64_t)v242);
    v103 = v101 + v102;
    WebCore::boundsForGlyph(v239, (uint64_t)v240);
    v105 = v103 + v104;
  }
  else
  {
    v235 = (int)v68;
    v106 = 0.0;
    v107 = 0.0;
    if (v240)
    {
      v108 = *((_QWORD *)v240 + 1);
      if (v108)
      {
        v109 = v239;
        v110 = *(unsigned __int16 *)(v108 + 334) != v239 || v239 == 0;
        if (v110 || (*(_BYTE *)(v108 + 256) & 2) != 0)
        {
          v111 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v108 + 128, v239);
          if (v111 == -1.0)
          {
            v256 = v109;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v108 + 96) != 0.0)
            {
              v213 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v108 + 100))
              {
                if ((*(_BYTE *)(v108 + 344) & 4) != 0)
                  v213 = kCTFontOrientationHorizontal;
                else
                  v213 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v108 + 88), v213, &v256, &advances, 1);
            }
            v214 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v108 + 128, v109 >> 4);
            v111 = v214;
            *(float *)(v215 + 4 * (v109 & 0xF)) = v214;
          }
          v107 = v111 + *(float *)(v108 + 340);
        }
      }
    }
    if (v242)
    {
      v112 = *((_QWORD *)v242 + 1);
      if (v112)
      {
        v113 = v241;
        if (*(unsigned __int16 *)(v112 + 334) != v241 || !v241 || (*(_BYTE *)(v112 + 256) & 2) != 0)
        {
          v114 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v112 + 128, v241);
          if (v114 == -1.0)
          {
            v256 = v113;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v112 + 96) != 0.0)
            {
              v216 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v112 + 100))
              {
                if ((*(_BYTE *)(v112 + 344) & 4) != 0)
                  v216 = kCTFontOrientationHorizontal;
                else
                  v216 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v112 + 88), v216, &v256, &advances, 1);
            }
            v217 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v112 + 128, v113 >> 4);
            v114 = v217;
            *(float *)(v218 + 4 * (v113 & 0xF)) = v217;
          }
          v106 = v114 + *(float *)(v112 + 340);
        }
      }
    }
    v115 = v107 + v106;
    v116 = 0.0;
    if (v246)
    {
      v117 = *((_QWORD *)v246 + 1);
      if (v117)
      {
        v118 = v245;
        if (*(unsigned __int16 *)(v117 + 334) != v245 || !v245 || (*(_BYTE *)(v117 + 256) & 2) != 0)
        {
          v119 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v117 + 128, v245);
          if (v119 == -1.0)
          {
            v256 = v118;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v117 + 96) != 0.0)
            {
              v219 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v117 + 100))
              {
                if ((*(_BYTE *)(v117 + 344) & 4) != 0)
                  v219 = kCTFontOrientationHorizontal;
                else
                  v219 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v117 + 88), v219, &v256, &advances, 1);
            }
            v220 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v117 + 128, v118 >> 4);
            v119 = v220;
            *(float *)(v221 + 4 * (v118 & 0xF)) = v220;
          }
          v116 = v119 + *(float *)(v117 + 340);
        }
      }
    }
    v105 = v115 + v116;
    LODWORD(v68) = v235;
  }
  if ((float)((float)a4 * 0.015625) >= v105)
  {
    v120 = v48;
    v121 = v236;
    v236[2] = 2;
    v236[3] = (int)v71;
    *((_WORD *)v236 + 8) = v51;
    v236[5] = (int)v70;
    *((_WORD *)v236 + 12) = v50;
    v236[7] = (int)v69;
    *((_WORD *)v236 + 16) = v49;
    v236[9] = (int)v68;
    *((_WORD *)v236 + 20) = v120;
    WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v256, *(_QWORD *)(v5 + 32), v71, v51);
    WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v254, *(_QWORD *)(v5 + 32), (void *)v121[5], *((unsigned __int16 *)v121 + 12));
    WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v252, *(_QWORD *)(v5 + 32), (void *)v121[9], *((unsigned __int16 *)v121 + 20));
    WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&glyphs, *(_QWORD *)(v5 + 32), (void *)v121[7], *((unsigned __int16 *)v121 + 16));
    if (v236[1] != 2)
    {
      v236[14] = 0;
      v236[13] = 0;
      WebCore::boundsForGlyph(glyphs, (uint64_t)v251);
      v147 = v145 * -64.0;
      if (v147 >= 2147483650.0)
      {
        v148 = 0x7FFFFFFF;
      }
      else if (v147 <= -2147483650.0)
      {
        v148 = 0x80000000;
      }
      else
      {
        v148 = (int)v147;
      }
      v149 = (float)(v145 + v146) * 64.0;
      if (v149 >= 2147483650.0)
      {
        v150 = 0x7FFFFFFF;
      }
      else if (v149 <= -2147483650.0)
      {
        v150 = 0x80000000;
      }
      else
      {
        v150 = (int)v149;
      }
      *(int32x2_t *)(v236 + 13) = vmax_s32(*(int32x2_t *)(v236 + 13), (int32x2_t)__PAIR64__(v150, v148));
      WebCore::boundsForGlyph((CGGlyph)v254, (uint64_t)v255);
      v153 = v151 * -64.0;
      if (v153 >= 2147483650.0)
      {
        v154 = 0x7FFFFFFF;
      }
      else if (v153 <= -2147483650.0)
      {
        v154 = 0x80000000;
      }
      else
      {
        v154 = (int)v153;
      }
      v155 = (float)(v151 + v152) * 64.0;
      if (v155 >= 2147483650.0)
      {
        v156 = 0x7FFFFFFF;
      }
      else if (v155 <= -2147483650.0)
      {
        v156 = 0x80000000;
      }
      else
      {
        v156 = (int)v155;
      }
      *(int32x2_t *)(v236 + 13) = vmax_s32(*(int32x2_t *)(v236 + 13), (int32x2_t)__PAIR64__(v156, v154));
      WebCore::boundsForGlyph(v256, (uint64_t)v258);
      v159 = v157 * -64.0;
      if (v159 >= 2147483650.0)
      {
        v160 = 0x7FFFFFFF;
      }
      else if (v159 <= -2147483650.0)
      {
        v160 = 0x80000000;
      }
      else
      {
        v160 = (int)v159;
      }
      v161 = (float)(v157 + v158) * 64.0;
      if (v161 >= 2147483650.0)
      {
        v162 = 0x7FFFFFFF;
      }
      else if (v161 <= -2147483650.0)
      {
        v162 = 0x80000000;
      }
      else
      {
        v162 = (int)v161;
      }
      *(int32x2_t *)(v236 + 13) = vmax_s32(*(int32x2_t *)(v236 + 13), (int32x2_t)__PAIR64__(v162, v160));
      WebCore::boundsForGlyph((CGGlyph)v252, (uint64_t)v253);
      v165 = v163 * -64.0;
      if (v165 >= 2147483650.0)
      {
        v166 = 0x7FFFFFFF;
      }
      else if (v165 <= -2147483650.0)
      {
        v166 = 0x80000000;
      }
      else
      {
        v166 = (int)v165;
      }
      v167 = (float)(v163 + v164) * 64.0;
      if (v167 >= 2147483650.0)
      {
        v144 = 0x7FFFFFFF;
      }
      else if (v167 <= -2147483650.0)
      {
        v144 = 0x80000000;
      }
      else
      {
        v144 = (int)v167;
      }
      if (v236[13] > v166)
        v166 = v236[13];
      v236[13] = v166;
      v122 = v236 + 14;
      goto LABEL_341;
    }
    v236[12] = 0;
    v122 = v236 + 12;
    v123 = 0.0;
    if (v258)
    {
      v124 = *((_QWORD *)v258 + 1);
      if (v124)
      {
        v125 = v256;
        if (*(unsigned __int16 *)(v124 + 334) != v256 || !v256 || (*(_BYTE *)(v124 + 256) & 2) != 0)
        {
          v126 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v124 + 128, v256);
          if (v126 == -1.0)
          {
            v260[0] = v125;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v124 + 96) != 0.0)
            {
              v222 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v124 + 100))
              {
                if ((*(_BYTE *)(v124 + 344) & 4) != 0)
                  v222 = kCTFontOrientationHorizontal;
                else
                  v222 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v124 + 88), v222, v260, &advances, 1);
            }
            v223 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v124 + 128, v125 >> 4);
            v126 = v223;
            *(float *)(v224 + 4 * (v125 & 0xF)) = v223;
          }
          v123 = v126 + *(float *)(v124 + 340);
        }
      }
    }
    v127 = v123 * 64.0;
    if (v127 >= 2147483650.0)
    {
      v128 = 0x7FFFFFFF;
    }
    else if (v127 <= -2147483650.0)
    {
      v128 = 0x80000000;
    }
    else
    {
      v128 = (int)v127;
    }
    if (*v122 > v128)
      v128 = *v122;
    *v122 = v128;
    v129 = 0.0;
    if (v255)
    {
      v130 = *((_QWORD *)v255 + 1);
      if (v130)
      {
        v131 = (unsigned __int16)v254;
        if (*(unsigned __int16 *)(v130 + 334) != (unsigned __int16)v254
          || !(_WORD)v254
          || (*(_BYTE *)(v130 + 256) & 2) != 0)
        {
          v132 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v130 + 128, (unsigned __int16)v254);
          if (v132 == -1.0)
          {
            v260[0] = v131;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v130 + 96) != 0.0)
            {
              v225 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v130 + 100))
              {
                if ((*(_BYTE *)(v130 + 344) & 4) != 0)
                  v225 = kCTFontOrientationHorizontal;
                else
                  v225 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v130 + 88), v225, v260, &advances, 1);
            }
            v226 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v130 + 128, v131 >> 4);
            v132 = v226;
            *(float *)(v227 + 4 * (v131 & 0xF)) = v226;
          }
          v129 = v132 + *(float *)(v130 + 340);
        }
      }
    }
    v133 = v129 * 64.0;
    if (v133 >= 2147483650.0)
    {
      v134 = 0x7FFFFFFF;
    }
    else if (v133 <= -2147483650.0)
    {
      v134 = 0x80000000;
    }
    else
    {
      v134 = (int)v133;
    }
    if (*v122 > v134)
      v134 = *v122;
    *v122 = v134;
    v135 = 0.0;
    if (!v251)
      goto LABEL_304;
    v136 = *((_QWORD *)v251 + 1);
    if (!v136)
      goto LABEL_304;
    v137 = glyphs;
    if (*(unsigned __int16 *)(v136 + 334) == glyphs && glyphs && (*(_BYTE *)(v136 + 256) & 2) == 0)
      goto LABEL_304;
    v138 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v136 + 128, glyphs);
    if (v138 == -1.0)
    {
      v260[0] = v137;
      advances = (CGSize)*MEMORY[0x1E0C9D820];
      if (*(float *)(v136 + 96) != 0.0)
      {
        v228 = kCTFontOrientationHorizontal;
        if (*(_BYTE *)(v136 + 100))
        {
          if ((*(_BYTE *)(v136 + 344) & 4) != 0)
            v228 = kCTFontOrientationHorizontal;
          else
            v228 = kCTFontOrientationVertical;
        }
        CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v136 + 88), v228, v260, &advances, 1);
      }
      v229 = advances.width;
      WebCore::GlyphMetricsMap<float>::locatePage(v136 + 128, v137 >> 4);
      v138 = v229;
      *(float *)(v230 + 4 * (v137 & 0xF)) = v229;
    }
    v135 = (float)(v138 + *(float *)(v136 + 340)) * 64.0;
    if (v135 >= 2147483650.0)
    {
      v139 = 0x7FFFFFFF;
    }
    else
    {
      if (v135 > -2147483650.0)
      {
LABEL_304:
        v139 = (int)v135;
        goto LABEL_305;
      }
      v139 = 0x80000000;
    }
LABEL_305:
    if (*v122 > v139)
      v139 = *v122;
    *v122 = v139;
    v140 = 0.0;
    if (v253)
    {
      v141 = *((_QWORD *)v253 + 1);
      if (v141)
      {
        v142 = (unsigned __int16)v252;
        if (*(unsigned __int16 *)(v141 + 334) != (unsigned __int16)v252
          || !(_WORD)v252
          || (*(_BYTE *)(v141 + 256) & 2) != 0)
        {
          v143 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v141 + 128, (unsigned __int16)v252);
          if (v143 == -1.0)
          {
            v260[0] = v142;
            advances = (CGSize)*MEMORY[0x1E0C9D820];
            if (*(float *)(v141 + 96) != 0.0)
            {
              v231 = kCTFontOrientationHorizontal;
              if (*(_BYTE *)(v141 + 100))
              {
                if ((*(_BYTE *)(v141 + 344) & 4) != 0)
                  v231 = kCTFontOrientationHorizontal;
                else
                  v231 = kCTFontOrientationVertical;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v141 + 88), v231, v260, &advances, 1);
            }
            v232 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v141 + 128, v142 >> 4);
            v143 = v232;
            *(float *)(v233 + 4 * (v142 & 0xF)) = v232;
          }
          v140 = (float)(v143 + *(float *)(v141 + 340)) * 64.0;
          if (v140 >= 2147483650.0)
          {
            v144 = 0x7FFFFFFF;
            goto LABEL_341;
          }
          if (v140 <= -2147483650.0)
          {
            v144 = 0x80000000;
            goto LABEL_341;
          }
        }
      }
    }
    v144 = (int)v140;
LABEL_341:
    v168 = *v122;
    if (*v122 <= v144)
      v168 = v144;
    *v122 = v168;
    v169 = v251;
    v251 = 0;
    if (v169)
    {
      if (*(_DWORD *)v169 == 1)
        WTF::fastFree(v169, v7);
      else
        --*(_DWORD *)v169;
    }
    v170 = v253;
    v253 = 0;
    if (v170)
    {
      if (*(_DWORD *)v170 == 1)
        WTF::fastFree(v170, v7);
      else
        --*(_DWORD *)v170;
    }
    v171 = v255;
    v255 = 0;
    if (v171)
    {
      if (*(_DWORD *)v171 == 1)
        WTF::fastFree(v171, v7);
      else
        --*(_DWORD *)v171;
    }
    v172 = v258;
    v258 = 0;
    if (v172)
    {
      if (*(_DWORD *)v172 == 1)
        WTF::fastFree(v172, v7);
      else
        --*(_DWORD *)v172;
    }
  }
LABEL_355:
  v173 = v240;
  v240 = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 1)
      WTF::fastFree(v173, v7);
    else
      --*(_DWORD *)v173;
  }
  v174 = v242;
  v242 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 1)
      WTF::fastFree(v174, v7);
    else
      --*(_DWORD *)v174;
  }
  v175 = v244;
  v244 = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 1)
      WTF::fastFree(v175, v7);
    else
      --*(_DWORD *)v175;
  }
  v59 = v246;
  v246 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 1)
LABEL_142:
      WTF::fastFree(v59, v7);
    else
      --*(_DWORD *)v59;
  }
LABEL_367:
  result = v249;
  if (v249)
  {
    if (*(_DWORD *)v249 == 1)
      return (WTF *)WTF::fastFree(v249, v7);
    else
      --*(_DWORD *)v249;
  }
  return result;
}

BOOL WebCore::MathOperator::getGlyph(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  WTF *v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v12;
  char v13;
  WTF *v14;

  WebCore::FontCascade::glyphDataForCharacter(a2, *(_QWORD *)(a1 + 32) + 32, (*(_DWORD *)(a1 + 40) >> 26) & 1, 0, (uint64_t)&v12);
  *(_WORD *)a3 = v12;
  *(_BYTE *)(a3 + 2) = v13;
  v6 = v14;
  v14 = 0;
  v7 = *(WTF **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 - 1;
    if (*(_DWORD *)v7 == 1)
    {
      WTF::fastFree(v7, v5);
      v7 = v14;
      v14 = 0;
      if (!v7)
        goto LABEL_4;
      v8 = *(_DWORD *)v7 - 1;
      if (*(_DWORD *)v7 == 1)
      {
        WTF::fastFree(v7, v5);
        goto LABEL_4;
      }
    }
    *(_DWORD *)v7 = v8;
LABEL_4:
    v6 = *(WTF **)(a3 + 8);
  }
  if (!v6 || !*((_QWORD *)v6 + 1))
    return 0;
  v9 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a1 + 32) + 32), v5);
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  return v10 == v9;
}

void WebCore::MathOperator::setSizeVariant(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  float width;
  double v9;
  int v10;
  CTFontOrientation v11;
  uint64_t v12;
  float v13;
  float v14;
  double v15;
  int v16;
  int v17;
  double v18;
  int v19;
  CGSize v20;
  CGGlyph glyphs;

  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = *a2;
  v4 = *((_QWORD *)a2 + 1);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && ((v6 = *a2, *(unsigned __int16 *)(v5 + 334) == v6) ? (v7 = v6 == 0) : (v7 = 1),
        v7 || (*(_BYTE *)(v5 + 256) & 2) != 0))
  {
    width = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v5 + 128, *a2);
    if (width == -1.0)
    {
      glyphs = v6;
      v20 = (CGSize)*MEMORY[0x1E0C9D820];
      if (*(float *)(v5 + 96) != 0.0)
      {
        v11 = kCTFontOrientationHorizontal;
        if (*(_BYTE *)(v5 + 100))
        {
          if ((*(_BYTE *)(v5 + 344) & 4) != 0)
            v11 = kCTFontOrientationHorizontal;
          else
            v11 = kCTFontOrientationVertical;
        }
        CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v5 + 88), v11, &glyphs, &v20, 1);
      }
      width = v20.width;
      WebCore::GlyphMetricsMap<float>::locatePage(v5 + 128, v6 >> 4);
      *(float *)(v12 + 4 * (v6 & 0xF)) = width;
    }
    v9 = (float)(width + *(float *)(v5 + 340)) * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFF;
      goto LABEL_23;
    }
    if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
      goto LABEL_23;
    }
  }
  else
  {
    v9 = 0.0;
  }
  v10 = (int)v9;
LABEL_23:
  *(_DWORD *)(a1 + 48) = v10;
  WebCore::boundsForGlyph(*a2, *((_QWORD *)a2 + 1));
  v15 = v13 * -64.0;
  if (v15 > -2147483650.0)
    v16 = (int)v15;
  else
    v16 = 0x80000000;
  if (v15 < 2147483650.0)
    v17 = v16;
  else
    v17 = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 52) = v17;
  v18 = (float)(v13 + v14) * 64.0;
  if (v18 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else if (v18 <= -2147483650.0)
  {
    v19 = 0x80000000;
  }
  else
  {
    v19 = (int)v18;
  }
  *(_DWORD *)(a1 + 56) = v19;
}

WTF *WebCore::glyphDataForCodePointOrFallbackGlyph(WTF *result, uint64_t a2, void *c, int a4)
{
  WTF *v4;
  uint64_t v5;
  void *v6;
  WTF *v7;

  v4 = result;
  if ((_DWORD)c)
    return WebCore::FontCascade::glyphDataForCharacter(c, a2 + 32, 0, 0, (uint64_t)result);
  *(_WORD *)result = 0;
  *((_BYTE *)result + 2) = 0;
  *((_QWORD *)result + 1) = 0;
  if (a4)
  {
    *(_WORD *)result = a4;
    v5 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(a2 + 32), (void *)a2);
    result = *(WTF **)(v5 + 8);
    if (!result)
    {
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *((_QWORD *)result + 1) = v5;
      v7 = *(WTF **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = result;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WTF::fastFree(v7, v6);
          result = *(WTF **)(v5 + 8);
          if (!result)
            goto LABEL_6;
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    ++*(_DWORD *)result;
LABEL_6:
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

unint64_t WebCore::MathOperator::paintGlyph(uint64_t a1, int32x4_t *a2, unsigned __int16 *a3, int32x2_t *a4, int a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  int v15;
  unsigned int v16;
  double v17;
  int v18;
  unsigned int v19;
  int32x2_t v20;
  double v21;
  uint64_t v22;
  float32x4_t v23;
  float *v24;
  uint64_t v25;
  signed int v26;
  unsigned int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  signed int v34;
  float v35;
  unsigned int v36;
  signed int v37;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  signed int v44;
  unsigned int v45;
  signed int v46;
  int v47;
  int v48;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  float v55;
  float v56;
  signed int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  float v68;
  float v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  float width;
  uint64_t v77;
  uint64_t v78;
  CTFontOrientation v79;
  uint64_t v80;
  int v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v85;
  CGGlyph glyphs[4];
  float32x4_t v87;
  CGSize advances;

  v10 = WebCore::boundsForGlyph(*a3, *((_QWORD *)a3 + 1));
  v14 = (float)(v10 + v13) * 64.0;
  if (v14 > -2147483650.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147483650.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v17 = v12 * 64.0;
  if (v17 > -2147483650.0)
    v18 = (int)v17;
  else
    v18 = 0x80000000;
  if (v17 < 2147483650.0)
    v19 = v18;
  else
    v19 = 0x7FFFFFFF;
  v20 = *a4;
  v21 = (float)(v11 + (float)((float)(int)HIDWORD(*(unint64_t *)a4) * 0.015625)) * 64.0;
  if (v21 >= 2147483650.0)
  {
    v22 = 0x7FFFFFFFLL;
  }
  else if (v21 <= -2147483650.0)
  {
    v22 = 0x80000000;
  }
  else
  {
    v22 = (int)v21;
  }
  v23 = vmulq_f32(vcvtq_f32_s32(*a2), (float32x4_t)vdupq_n_s32(0x3C800000u));
  v87 = v23;
  v24 = (float *)((unint64_t)&v87 | 0xC);
  switch(a5)
  {
    case 0:
      if ((int)v22 > 2147483583)
        goto LABEL_20;
      if ((v22 & 0x80000000) != 0)
      {
        v25 = 64 - (-(int)v22 & 0xFFFFFFC0);
      }
      else if (v22 < 0x7FFFFF81)
      {
        v25 = (((_DWORD)v22 + 63) & 0xFFFFFFC0) + 64;
      }
      else
      {
LABEL_20:
        v25 = 0x7FFFFFFFLL;
      }
      v87.f32[1] = (float)(int)v25 * 0.015625;
      v35 = v23.f32[3] - (float)(v87.f32[1] - v23.f32[1]);
      goto LABEL_94;
    case 1:
      v37 = v22 + v19;
      if (__OFADD__((_DWORD)v22, v19))
        v37 = (v22 >> 31) + 0x7FFFFFFF;
      v39 = (v37 & 0xFFFFFFC0) - 64;
      if (v37 < -2147483584)
        v39 = 0x80000000;
      v29 = __OFSUB__(v39, v37);
      v40 = v39 - v37;
      v41 = (v39 >> 31) + 0x7FFFFFFF;
      if (v29)
        v40 = v41;
      v29 = __OFADD__(v19, v40);
      v42 = v19 + v40;
      if (v29)
        v42 = (v19 >> 31) + 0x7FFFFFFF;
      v43 = v42 & ~(v42 >> 31);
      v44 = v22 + v43;
      if (__OFADD__((_DWORD)v22, v43))
        v44 = (v22 >> 31) + 0x7FFFFFFF;
      v35 = v23.f32[3] + (float)((float)((float)v44 * 0.015625) - (float)(v23.f32[1] + v23.f32[3]));
      goto LABEL_122;
    case 2:
      if ((int)v22 > 2147483583)
        goto LABEL_41;
      if ((v22 & 0x80000000) != 0)
      {
        v25 = 64 - (-(int)v22 & 0xFFFFFFC0);
      }
      else if (v22 < 0x7FFFFF81)
      {
        v25 = (((_DWORD)v22 + 63) & 0xFFFFFFC0) + 64;
      }
      else
      {
LABEL_41:
        v25 = 0x7FFFFFFFLL;
      }
      v45 = v25 - v22;
      v46 = (v25 >> 31) + 0x7FFFFFFF;
      if (__OFSUB__((_DWORD)v25, (_DWORD)v22))
        v45 = (v25 >> 31) + 0x7FFFFFFF;
      v29 = __OFSUB__(v19, v45);
      v47 = v19 - v45;
      if (v29)
        v47 = (v19 >> 31) + 0x7FFFFFFF;
      v48 = v47 & ~(v47 >> 31);
      if (!__OFADD__((_DWORD)v25, v48))
        v46 = v25 + v48;
      if (v46 >= -2147483584)
        v50 = (v46 & 0xFFFFFFC0) - 64;
      else
        v50 = 0x80000000;
      v29 = __OFSUB__(v50, v46);
      v51 = v50 - v46;
      v52 = (v50 >> 31) + 0x7FFFFFFF;
      if (!v29)
        v52 = v51;
      v29 = __OFADD__(v48, v52);
      v53 = v48 + v52;
      if (v29)
        v53 = 0x7FFFFFFF;
      v54 = v53 & ~(v53 >> 31);
      v55 = (float)(int)v25 * 0.015625;
      v87.f32[1] = v55;
      v56 = fmaxf(v23.f32[3] - (float)(v55 - v23.f32[1]), 0.0);
      v57 = v25 + v54;
      if (__OFADD__((_DWORD)v25, v54))
        v57 = (v25 >> 31) + 0x7FFFFFFF;
      v35 = v56 + (float)((float)((float)v57 * 0.015625) - (float)(v55 + v56));
LABEL_94:
      v22 = v25;
      goto LABEL_122;
    case 3:
      if (v20.i32[0] > 2147483583)
        goto LABEL_45;
      if (v20.i32[0] < 0)
      {
        v36 = 64 - (-v20.i32[0] & 0xFFFFFFC0);
      }
      else if (v20.i32[0] < 0x7FFFFF81u)
      {
        v36 = ((v20.i32[0] + 63) & 0xFFFFFFC0) + 64;
      }
      else
      {
LABEL_45:
        v36 = 0x7FFFFFFF;
      }
      v87.f32[0] = (float)(int)v36 * 0.015625;
      v35 = v23.f32[2] - (float)(v87.f32[0] - v23.f32[0]);
      goto LABEL_121;
    case 4:
      v26 = v20.i32[0] + v16;
      if (__OFADD__(v20.i32[0], v16))
        v26 = ((unsigned __int32)v20.i32[0] >> 31) + 0x7FFFFFFF;
      v28 = (v26 & 0xFFFFFFC0) - 64;
      if (v26 < -2147483584)
        v28 = 0x80000000;
      v29 = __OFSUB__(v28, v26);
      v30 = v28 - v26;
      v31 = (v28 >> 31) + 0x7FFFFFFF;
      if (v29)
        v30 = v31;
      v29 = __OFADD__(v16, v30);
      v32 = v16 + v30;
      if (v29)
        v32 = (v16 >> 31) + 0x7FFFFFFF;
      v33 = v32 & ~(v32 >> 31);
      v34 = v20.i32[0] + v33;
      if (__OFADD__(v20.i32[0], v33))
        v34 = ((unsigned __int32)v20.i32[0] >> 31) + 0x7FFFFFFF;
      v35 = v23.f32[2] + (float)((float)((float)v34 * 0.015625) - (float)(v23.f32[0] + v23.f32[2]));
      v24 = &v87.f32[2];
      goto LABEL_122;
    case 5:
      if (v20.i32[0] > 2147483583)
        goto LABEL_67;
      if (v20.i32[0] < 0)
      {
        v36 = 64 - (-v20.i32[0] & 0xFFFFFFC0);
      }
      else if (v20.i32[0] < 0x7FFFFF81u)
      {
        v36 = ((v20.i32[0] + 63) & 0xFFFFFFC0) + 64;
      }
      else
      {
LABEL_67:
        v36 = 0x7FFFFFFF;
      }
      v58 = v36 - v20.i32[0];
      v59 = (v36 >> 31) + 0x7FFFFFFF;
      if (__OFSUB__(v36, v20.i32[0]))
        v58 = (v36 >> 31) + 0x7FFFFFFF;
      v29 = __OFSUB__(v16, v58);
      v60 = v16 - v58;
      if (v29)
        v60 = (v16 >> 31) + 0x7FFFFFFF;
      v61 = v60 & ~(v60 >> 31);
      if (!__OFADD__(v36, v61))
        v59 = v36 + v61;
      if (v59 >= -2147483584)
        v63 = (v59 & 0xFFFFFFC0) - 64;
      else
        v63 = 0x80000000;
      v29 = __OFSUB__(v63, v59);
      v64 = v63 - v59;
      v65 = (v63 >> 31) + 0x7FFFFFFF;
      if (!v29)
        v65 = v64;
      v29 = __OFADD__(v61, v65);
      v66 = v61 + v65;
      if (v29)
        v66 = 0x7FFFFFFF;
      v67 = v66 & ~(v66 >> 31);
      v68 = (float)(int)v36 * 0.015625;
      v87.f32[0] = v68;
      v69 = fmaxf(v23.f32[2] - (float)(v68 - v23.f32[0]), 0.0);
      v70 = v36 + v67;
      if (__OFADD__(v36, v67))
        v70 = (v36 >> 31) + 0x7FFFFFFF;
      v35 = v69 + (float)((float)((float)v70 * 0.015625) - (float)(v68 + v69));
LABEL_121:
      v24 = &v87.f32[2];
      v20.i32[0] = v36;
LABEL_122:
      v85 = v22;
      *v24 = fmaxf(v35, 0.0);
LABEL_123:
      v71 = a2[5].i64[0];
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 96))(v71, 1);
      (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a2[5].i64[0] + 456))(a2[5].i64[0], &v87);
      v72 = *((_QWORD *)a3 + 1);
      if (!v72)
      {
        v73 = 0;
LABEL_144:
        advances.width = 0.0;
        advances.height = 0.0;
        v78 = a2[5].i64[0];
        goto LABEL_145;
      }
      v73 = *(_QWORD *)(v72 + 8);
      if (!v73)
        goto LABEL_144;
      v74 = *a3;
      v75 = *(unsigned __int16 *)(v73 + 334) != v74 || v74 == 0;
      if (!v75 && (*(_BYTE *)(v73 + 256) & 2) == 0)
        goto LABEL_144;
      width = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v73 + 128, v74);
      if (width == -1.0)
      {
        glyphs[0] = v74;
        advances = (CGSize)*MEMORY[0x1E0C9D820];
        if (*(float *)(v73 + 96) != 0.0)
        {
          v79 = kCTFontOrientationHorizontal;
          if (*(_BYTE *)(v73 + 100))
          {
            if ((*(_BYTE *)(v73 + 344) & 4) != 0)
              v79 = kCTFontOrientationHorizontal;
            else
              v79 = kCTFontOrientationVertical;
          }
          CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v73 + 88), v79, glyphs, &advances, 1);
        }
        width = advances.width;
        WebCore::GlyphMetricsMap<float>::locatePage(v73 + 128, v74 >> 4);
        *(float *)(v80 + 4 * (v74 & 0xF)) = width;
      }
      v77 = *((_QWORD *)a3 + 1);
      advances.width = (float)(width + *(float *)(v73 + 340));
      advances.height = 0.0;
      v78 = a2[5].i64[0];
      if (v77)
        v73 = *(_QWORD *)(v77 + 8);
      else
        v73 = 0;
LABEL_145:
      *(float32x2_t *)glyphs = vmul_f32(vcvt_f32_s32(*a4), (float32x2_t)vdup_n_s32(0x3C800000u));
      v81 = (*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 228) >> 7) & 3;
      v82 = atomic_load(WebCore::disableFontSubpixelAntialiasingForTesting);
      if ((v82 & 1) == 0 || (v83 = 2, v81) && v81 != 3)
        v83 = (*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 228) >> 7) & 3;
      (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, CGSize *, uint64_t, CGGlyph *, uint64_t))(*(_QWORD *)v78 + 552))(v78, v73, a3, &advances, 1, glyphs, v83);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 104))(v71, 1);
      return v20.u32[0] | (unint64_t)(v85 << 32);
    default:
      v85 = v22;
      goto LABEL_123;
  }
}

float WebCore::boundsForGlyph(CGGlyph a1, uint64_t a2)
{
  float v2;
  uint64_t v3;
  uint64_t v5;
  WTF **v6;
  uint64_t PageSlowCase;
  float *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  float *v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;

  v2 = 0.0;
  if (!a2)
    return v2;
  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return v2;
  if (*(unsigned __int16 *)(v3 + 334) == a1)
  {
    if (a1)
      return v2;
    v6 = (WTF **)(v3 + 208);
    v5 = *(_QWORD *)(v3 + 208);
    if (v5)
      goto LABEL_12;
  }
  else
  {
    v6 = (WTF **)(v3 + 208);
    v5 = *(_QWORD *)(v3 + 208);
    if (v5)
    {
      if (a1 >= 0x10u)
      {
        PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(v5, a1 >> 4);
        goto LABEL_7;
      }
LABEL_12:
      PageSlowCase = v5 + 4;
      if (!*(_BYTE *)v5)
      {
        *(_OWORD *)(v5 + 4) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 20) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 36) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 52) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 68) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 84) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 100) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 116) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 132) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 148) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 164) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 180) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 196) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 212) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 228) = xmmword_1969F2680;
        *(_OWORD *)(v5 + 244) = xmmword_1969F2680;
        *(_BYTE *)v5 = 1;
      }
LABEL_7:
      v8 = (float *)(PageSlowCase + 16 * (a1 & 0xF));
      if (v8[2] != -1.0)
        return *v8;
    }
  }
  v2 = WebCore::Font::platformBoundsForGlyph((WebCore::Font *)v3, a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = *(_OWORD **)(v3 + 208);
  if (!v16)
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
    *v16 = 0u;
    v16[1] = 0u;
    v16[2] = 0u;
    v16[3] = 0u;
    v16[4] = 0u;
    v16[5] = 0u;
    v16[6] = 0u;
    v16[7] = 0u;
    v16[8] = 0u;
    v16[9] = 0u;
    v16[10] = 0u;
    v16[11] = 0u;
    v16[12] = 0u;
    v16[13] = 0u;
    v16[14] = 0u;
    v16[15] = 0u;
    v16[16] = 0u;
    v20 = *v6;
    *v6 = (WTF *)v16;
    if (v20)
    {
      v21 = *((_QWORD *)v20 + 33);
      if (v21)
      {
        v22 = *(unsigned int *)(v21 - 4);
        if ((_DWORD)v22)
        {
          v23 = (WTF **)(v21 + 8);
          do
          {
            if (*((_DWORD *)v23 - 2) != -1)
            {
              v24 = *v23;
              *v23 = 0;
              if (v24)
                WTF::fastFree(v24, v19);
            }
            v23 += 2;
            --v22;
          }
          while (v22);
        }
        WTF::fastFree((WTF *)(v21 - 16), v19);
      }
      WTF::fastFree(v20, v19);
      v16 = *v6;
    }
  }
  if (a1 < 0x10u)
  {
    v17 = (uint64_t)v16 + 4;
    if (!*(_BYTE *)v16)
    {
      *(_OWORD *)((char *)v16 + 4) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 20) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 36) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 52) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 68) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 84) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 100) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 116) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 132) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 148) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 164) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 180) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 196) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 212) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 228) = xmmword_1969F2680;
      *(_OWORD *)((char *)v16 + 244) = xmmword_1969F2680;
      *(_BYTE *)v16 = 1;
    }
  }
  else
  {
    v17 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v16, a1 >> 4);
  }
  v18 = (float *)(v17 + 16 * (a1 & 0xF));
  *v18 = v2;
  *((_DWORD *)v18 + 1) = v11;
  *((_DWORD *)v18 + 2) = v13;
  *((_DWORD *)v18 + 3) = v15;
  return v2;
}

WTF *WebCore::MathOperator::fillWithVerticalExtensionGlyph(void *c, const WebCore::RenderStyle *a2, WebCore::PaintInfo *a3, int32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  void *v10;
  uint64_t v11;
  float v12;
  float v13;
  int32x4_t v14;
  __int32 v15;
  unsigned __int32 v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  double v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  float v37;
  double v38;
  WTF *result;
  float32x4_t v41;
  CGGlyph v42;
  WTF *v43;

  WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v42, *((_QWORD *)a3 + 4), c, (unsigned __int16)a2);
  if (*((_DWORD *)a5 + 1) != *(_DWORD *)(a6 + 4))
  {
    v11 = a4[5].i64[0];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 96))(v11, 1);
    WebCore::boundsForGlyph(v42, (uint64_t)v43);
    v13 = v12;
    v14 = *a4;
    v15 = a4->i32[1];
    v16 = a4->u32[3];
    v17 = *((_DWORD *)a5 + 1);
    v18 = __OFSUB__(v17, v15);
    v19 = v17 - v15;
    v20 = (v17 >> 31) + 0x7FFFFFFF;
    if (v18)
      v19 = (v17 >> 31) + 0x7FFFFFFF;
    v18 = __OFSUB__(v16, v19);
    v21 = v16 - v19;
    v22 = (v16 >> 31) + 0x7FFFFFFF;
    if (v18)
      v21 = v22;
    v23 = v21 & ~(v21 >> 31);
    v24 = *(_DWORD *)(a6 + 4);
    if (!__OFADD__(v17, v23))
      v20 = v17 + v23;
    v18 = __OFSUB__(v24, v20);
    v25 = v24 - v20;
    v26 = (v24 >> 31) + 0x7FFFFFFF;
    if (!v18)
      v26 = v25;
    v18 = __OFADD__(v23, v26);
    v27 = v23 + v26;
    if (v18)
      v27 = 0x7FFFFFFF;
    v28 = a4[5].i64[0];
    v14.i32[1] = *((_DWORD *)a5 + 1);
    v14.i32[2] = a4->i32[2];
    v14.i32[3] = v27 & ~(v27 >> 31);
    v41 = vmulq_f32(vcvtq_f32_s32(v14), (float32x4_t)vdupq_n_s32(0x3C800000u));
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v28 + 456))(v28, &v41);
    v29 = *(_DWORD *)a5;
    v30 = (float)*((int *)a5 + 1) * 0.015625;
    v31 = (float)(v30 - (float)(v13 + 2.0)) * 64.0;
    if (v31 >= 2147483650.0)
    {
      v32 = 0x7FFFFFFF;
    }
    else if (v31 <= -2147483650.0)
    {
      v32 = 0x80000000;
    }
    else
    {
      v32 = (int)v31;
    }
    v41.i64[0] = __PAIR64__(v32, v29);
    if ((float)((float)*(int *)(a6 + 4) * 0.015625) > (float)(v30 + 0.0))
    {
      v33 = 0;
      do
      {
        v34 = WebCore::MathOperator::paintGlyph((uint64_t)a3, a4, &v42, (int32x2_t *)&v41, 2);
        v37 = (float)v36 * 0.015625;
        v38 = (float)((float)((float)v32 * 0.015625) + v37) * 64.0;
        if (v38 >= 2147483650.0)
        {
          v32 = 0x7FFFFFFF;
        }
        else if (v38 <= -2147483650.0)
        {
          v32 = 0x80000000;
        }
        else
        {
          v32 = (int)v38;
        }
        v41.i32[1] = v32;
        if ((float)((float)v35 * 0.015625) <= 0.0)
          break;
        if (v37 <= 0.0)
          break;
        if ((float)((float)*(int *)(a6 + 4) * 0.015625) <= (float)((float)((float)SHIDWORD(v34) * 0.015625) + v37))
          break;
      }
      while (v33++ <= 0x7E);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, 1);
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF *WebCore::MathOperator::fillWithHorizontalExtensionGlyph(void *c, const WebCore::RenderStyle *a2, WebCore::PaintInfo *a3, int32x4_t *a4, const WebCore::LayoutPoint *a5, unsigned int *a6)
{
  void *v10;
  uint64_t v11;
  unsigned __int32 v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int32x4_t v25;
  float v26;
  double v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  double v34;
  WTF *result;
  float32x4_t v37;
  unsigned __int16 v38;
  WTF *v39;

  WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v38, *((_QWORD *)a3 + 4), c, (unsigned __int16)a2);
  if (*(_DWORD *)a5 != *a6)
  {
    v11 = a4[5].i64[0];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 96))(v11, 1);
    v12 = a4->u32[2];
    v13 = *(_DWORD *)a5;
    v14 = *(_DWORD *)a5 - a4->i32[0];
    v15 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(*(_DWORD *)a5, a4->i32[0]))
      v14 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
    v16 = __OFSUB__(v12, v14);
    v17 = v12 - v14;
    v18 = (v12 >> 31) + 0x7FFFFFFF;
    if (v16)
      v17 = v18;
    v19 = v17 & ~(v17 >> 31);
    v20 = *a6;
    if (!__OFADD__(v13, v19))
      v15 = v13 + v19;
    v16 = __OFSUB__(v20, v15);
    v21 = v20 - v15;
    v22 = (v20 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v22 = v21;
    v16 = __OFADD__(v19, v22);
    v23 = v19 + v22;
    if (v16)
      v23 = 0x7FFFFFFF;
    v24 = a4[5].i64[0];
    v25.i32[0] = *(_DWORD *)a5;
    v25.i32[1] = a4->i32[1];
    v25.i32[2] = v23 & ~(v23 >> 31);
    v25.i32[3] = a4->i32[3];
    v37 = vmulq_f32(vcvtq_f32_s32(v25), (float32x4_t)vdupq_n_s32(0x3C800000u));
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v24 + 456))(v24, &v37);
    v26 = (float)*(int *)a5 * 0.015625;
    v27 = (float)(v26 + -2.0) * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFF;
    }
    else if (v27 <= -2147483650.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v27;
    }
    v37.i64[0] = __PAIR64__(*((_DWORD *)a5 + 1), v28);
    if ((float)((float)(int)*a6 * 0.015625) > (float)(v26 + 0.0))
    {
      v29 = 0;
      do
      {
        v30 = WebCore::MathOperator::paintGlyph((uint64_t)a3, a4, &v38, (int32x2_t *)&v37, 5);
        v33 = (float)v32 * 0.015625;
        v34 = (float)((float)((float)v28 * 0.015625) + v33) * 64.0;
        if (v34 >= 2147483650.0)
        {
          v28 = 0x7FFFFFFF;
        }
        else if (v34 <= -2147483650.0)
        {
          v28 = 0x80000000;
        }
        else
        {
          v28 = (int)v34;
        }
        v37.i32[0] = v28;
        if (v33 <= 0.0)
          break;
        if ((float)((float)v31 * 0.015625) <= 0.0)
          break;
        if ((float)((float)(int)*a6 * 0.015625) <= (float)((float)((float)v30 * 0.015625) + v33))
          break;
      }
      while (v29++ <= 0x7E);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, 1);
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::MathOperator::paint(WebCore::MathOperator *this, const WebCore::RenderStyle *a2, WebCore::PaintInfo *a3, const WebCore::LayoutPoint *a4)
{
  uint64_t result;
  __int128 v9;
  WebCore::GraphicsContext *v10;
  __int128 v11;
  void *v12;
  int v13;
  float v14;
  int v15;
  int v16;
  double v17;
  double v18;
  float v19;
  double v20;
  double v21;
  int v22;
  int v23;
  double v24;
  double v25;
  BOOL v26;
  CGFloat height;
  int v28;
  __int32 v29;
  float v30;
  double v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  float v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  float v60;
  double v61;
  float v62;
  uint64_t v63;
  double v64;
  BOOL v65;
  float v66;
  CGFloat v67;
  int v68;
  double v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  int v75;
  float v76;
  _BOOL4 v77;
  int v78;
  int v79;
  int v80;
  double v81;
  int v82;
  unsigned int v83;
  double v84;
  int v85;
  _BOOL4 v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  double v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  void *v98;
  int v99;
  int v100;
  _BOOL4 v101;
  int v102;
  int v103;
  int v104;
  double v105;
  int v106;
  _BOOL4 v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  WTF *v114;
  WTF *v115;
  CTFontOrientation v116;
  float width;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  CGSize advances;
  __int128 v125;
  double v126;
  double v127;
  _OWORD v128[5];
  WebCore::GraphicsContext *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  CGGlyph glyphs[4];
  WTF *v134;
  unint64_t v135;
  unint64_t v136;
  CGGlyph v137;
  char v138;
  WTF *v139;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 10) + 40))(*((_QWORD *)a3 + 10));
  if ((result & 1) == 0
    && *((_WORD *)a3 + 8) == 8
    && (*(_BYTE *)(*((_QWORD *)a2 + 3) + 239) & 4) == 0
    && (*((_BYTE *)a2 + 40) & 0x30) == 0)
  {
    v9 = *((_OWORD *)a3 + 3);
    v128[2] = *((_OWORD *)a3 + 2);
    v128[3] = v9;
    v128[4] = *((_OWORD *)a3 + 4);
    v10 = (WebCore::GraphicsContext *)*((_QWORD *)a3 + 10);
    v129 = v10;
    v11 = *((_OWORD *)a3 + 1);
    v128[0] = *(_OWORD *)a3;
    v128[1] = v11;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v10 + 96))(v10, 1);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)a2, 5, 0, (unint64_t *)&advances);
    WebCore::GraphicsContext::setFillColor(v10, (const WebCore::Color *)&advances);
    if ((*(_QWORD *)&advances.width & 0x8000000000000) != 0)
    {
      v119 = (unsigned int *)(*(_QWORD *)&advances.width & 0xFFFFFFFFFFFFLL);
      do
      {
        v120 = __ldaxr(v119);
        v121 = v120 - 1;
      }
      while (__stlxr(v121, v119));
      if (!v121)
      {
        atomic_store(1u, v119);
        WTF::fastFree((WTF *)v119, v12);
      }
    }
    if (*(_DWORD *)this == 8730)
    {
      v13 = *((_DWORD *)a2 + 10);
      v14 = (v13 & 0x4000000) != 0 ? -1.0 : 1.0;
      if (v14 == -1.0 || *((float *)this + 16) > 1.0)
      {
        v15 = *((_DWORD *)a4 + 1);
        v16 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(*(_DWORD *)a4, *((_DWORD *)this + 12) / 2))
          v16 = *(_DWORD *)a4 + *((_DWORD *)this + 12) / 2;
        advances = (CGSize)xmmword_1969FD4F8;
        v125 = unk_1969FD508;
        v126 = 0.0;
        v17 = (float)((float)v16 * 0.015625) + 0.0;
        v18 = (float)((float)v15 * 0.015625) + 0.0;
        v19 = *((float *)this + 16);
        v20 = v14 * 0.0;
        advances.width = v14;
        advances.height = v20;
        v21 = v19 * 0.0;
        *(double *)&v125 = v21;
        *((double *)&v125 + 1) = v19;
        if (v16 == 0x80000000)
          v22 = 0x7FFFFFFF;
        else
          v22 = -v16;
        if (v15 == 0x80000000)
          v23 = 0x7FFFFFFF;
        else
          v23 = -v15;
        v24 = (float)((float)v22 * 0.015625);
        v25 = (float)((float)v23 * 0.015625);
        if ((v13 & 0x4000000) == 0 && v20 == 0.0 && (v21 == 0.0 ? (v26 = v19 == 1.0) : (v26 = 0), v26))
        {
          v126 = v17 + v24;
        }
        else
        {
          v126 = v21 * v25 + v24 * v14 + v17;
          v25 = v19 * v25 + v24 * v20;
        }
        v127 = v18 + v25;
        WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)v128, (const WebCore::AffineTransform *)&advances);
      }
    }
    if (*((_DWORD *)this + 2) != 2)
    {
      v137 = 0;
      v138 = 0;
      v139 = 0;
      if (WebCore::MathOperator::getGlyph((uint64_t)a2, (void *)*(unsigned int *)this, (uint64_t)&v137))
      {
        if (*((_DWORD *)this + 2) == 1)
        {
          v44 = *((unsigned __int16 *)this + 6);
          v137 = v44;
        }
        else
        {
          v44 = v137;
        }
        v57 = *(_DWORD *)a4;
        v58 = (uint64_t)v139;
        v59 = *((_DWORD *)a4 + 1);
        WebCore::boundsForGlyph(v44, (uint64_t)v139);
        v61 = (float)((float)((float)v59 * 0.015625) - v60) * 64.0;
        if (v61 >= 2147483650.0)
        {
          v62 = 33554000.0;
        }
        else if (v61 <= -2147483650.0)
        {
          v62 = -33554000.0;
        }
        else
        {
          v62 = (float)(int)v61 * 0.015625;
        }
        if (v58)
        {
          v63 = *(_QWORD *)(v58 + 8);
          v64 = 0.0;
          if (v63)
          {
            v65 = *(unsigned __int16 *)(v63 + 334) != v44 || v44 == 0;
            if (v65 || (*(_BYTE *)(v63 + 256) & 2) != 0)
            {
              v66 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v63 + 128, v44);
              if (v66 == -1.0)
              {
                glyphs[0] = v44;
                advances = (CGSize)*MEMORY[0x1E0C9D820];
                if (*(float *)(v63 + 96) != 0.0)
                {
                  v116 = kCTFontOrientationHorizontal;
                  if (*(_BYTE *)(v63 + 100))
                  {
                    if ((*(_BYTE *)(v63 + 344) & 4) != 0)
                      v116 = kCTFontOrientationHorizontal;
                    else
                      v116 = kCTFontOrientationVertical;
                  }
                  CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v63 + 88), v116, glyphs, &advances, 1);
                }
                width = advances.width;
                WebCore::GlyphMetricsMap<float>::locatePage(v63 + 128, v44 >> 4);
                v66 = width;
                *(float *)(v118 + 4 * (v44 & 0xF)) = width;
              }
              v64 = (float)(v66 + *(float *)(v63 + 340));
            }
          }
          advances.width = v64;
          advances.height = 0.0;
        }
        else
        {
          advances.width = 0.0;
          advances.height = 0.0;
        }
        *(float *)glyphs = (float)v57 * 0.015625;
        *(float *)&glyphs[2] = v62;
        atomic_load(WebCore::disableFontSubpixelAntialiasingForTesting);
        (*(void (**)(void))(*(_QWORD *)v129 + 552))();
      }
      v67 = *(double *)&v139;
      v139 = 0;
      if (v67 == 0.0)
        return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
LABEL_146:
      if (**(_DWORD **)&v67 == 1)
        WTF::fastFree(*(WTF **)&v67, *(void **)&height);
      else
        --**(_DWORD **)&v67;
      return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
    }
    if (*((_DWORD *)this + 1) == 2)
    {
      WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&advances, *((_QWORD *)a2 + 4), (void *)*((unsigned int *)this + 3), *((unsigned __int16 *)this + 8));
      WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v137, *((_QWORD *)a2 + 4), (void *)*((unsigned int *)this + 7), *((unsigned __int16 *)this + 16));
      height = advances.height;
      if (!*(_QWORD *)&advances.height
        || !*(_QWORD *)(*(_QWORD *)&advances.height + 8)
        || !v139
        || !*((_QWORD *)v139 + 1))
      {
        goto LABEL_142;
      }
      v29 = *(_DWORD *)a4;
      v28 = *((_DWORD *)a4 + 1);
      WebCore::boundsForGlyph(LOWORD(advances.width), *(uint64_t *)&advances.height);
      v31 = (float)((float)((float)v28 * 0.015625) - v30) * 64.0;
      if (v31 > -2147483650.0)
        v32 = (int)v31;
      else
        v32 = 0x80000000;
      if (v31 < 2147483650.0)
        v33 = v32;
      else
        v33 = 0x7FFFFFFF;
      v136 = __PAIR64__(v33, v29);
      v34 = WebCore::MathOperator::paintGlyph((uint64_t)a2, (int32x4_t *)a3, (unsigned __int16 *)&advances, (int32x2_t *)&v136, 1);
      v36 = v35;
      WebCore::boundsForGlyph(v137, (uint64_t)v139);
      if (*((_DWORD *)this + 1) == 2)
      {
        v39 = *((_DWORD *)this + 13);
        v40 = *((_DWORD *)this + 14);
        v41 = __OFADD__(v39, v40);
        v42 = v39 + v40;
        v43 = (v39 >> 31) + 0x7FFFFFFF;
        if (!v41)
          v43 = v42;
      }
      else
      {
        v43 = *((_DWORD *)this + 12);
      }
      v41 = __OFADD__(v28, v43);
      v68 = v28 + v43;
      if (v41)
        v68 = (v28 >> 31) + 0x7FFFFFFF;
      v69 = (float)((float)((float)v68 * 0.015625) - (float)(v38 + v37)) * 64.0;
      if (v69 >= 2147483650.0)
      {
        v70 = 0x7FFFFFFF;
      }
      else if (v69 <= -2147483650.0)
      {
        v70 = 0x80000000;
      }
      else
      {
        v70 = (int)v69;
      }
      v135 = __PAIR64__(v70, v29);
      v71 = WebCore::MathOperator::paintGlyph((uint64_t)a2, (int32x4_t *)a3, &v137, (int32x2_t *)&v135, 0);
      v72 = v71;
      v73 = (void *)*((unsigned int *)this + 9);
      v74 = HIDWORD(v36);
      if (!(_DWORD)v73 && !*((_WORD *)this + 20))
      {
        v75 = HIDWORD(v34) + v74;
        if (__OFADD__(HIDWORD(v34), (_DWORD)v74))
          v75 = (HIDWORD(v34) >> 31) + 0x7FFFFFFF;
        v132 = v71;
        glyphs[0] = v34;
        glyphs[1] = WORD1(v34);
        *(_DWORD *)&glyphs[2] = v75;
        WebCore::MathOperator::fillWithVerticalExtensionGlyph((void *)*((unsigned int *)this + 5), (const WebCore::RenderStyle *)*((unsigned __int16 *)this + 12), a2, (int32x4_t *)a3, (const WebCore::LayoutPoint *)glyphs, (uint64_t)&v132);
        goto LABEL_142;
      }
      WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)glyphs, *((_QWORD *)a2 + 4), v73, *((unsigned __int16 *)this + 20));
      WebCore::boundsForGlyph(glyphs[0], (uint64_t)v134);
      v77 = __OFADD__(HIDWORD(v34), (_DWORD)v74);
      v78 = (HIDWORD(v34) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v34), (_DWORD)v74))
        v78 = HIDWORD(v34) + v74;
      v41 = __OFSUB__(HIDWORD(v72), v78);
      v79 = HIDWORD(v72) - v78;
      v80 = (HIDWORD(v72) >> 31) + 0x7FFFFFFF;
      if (!v41)
        v80 = v79;
      v81 = (double)v80 * 0.015625 * 0.5 * 64.0;
      if (v81 >= 2147483650.0)
      {
        v82 = 0x7FFFFFFF;
      }
      else if (v81 <= -2147483650.0)
      {
        v82 = 0x80000000;
      }
      else
      {
        v82 = (int)v81;
      }
      v41 = __OFADD__(v33, v82);
      v83 = v33 + v82;
      v122 = HIDWORD(v34) + v74;
      if (v41)
        v83 = (v33 >> 31) + 0x7FFFFFFF;
      v84 = v76 * 0.5 * 64.0;
      if (v84 >= 2147483650.0)
      {
        v85 = 0x7FFFFFFF;
      }
      else if (v84 <= -2147483650.0)
      {
        v85 = 0x80000000;
      }
      else
      {
        v85 = (int)v84;
      }
      LODWORD(v132) = v29;
      v86 = v77;
      v41 = __OFADD__(v83, v85);
      v87 = v83 + v85;
      if (v41)
        v87 = (v83 >> 31) + 0x7FFFFFFF;
      HIDWORD(v132) = v87;
      v88 = WebCore::MathOperator::paintGlyph((uint64_t)a2, (int32x4_t *)a3, glyphs, (int32x2_t *)&v132, 2);
      v89 = v88;
      v91 = v90;
      if (v86)
        v122 = (HIDWORD(v34) >> 31) + 0x7FFFFFFF;
      v130 = v88;
      v131 = v34 | ((unint64_t)v122 << 32);
      WebCore::MathOperator::fillWithVerticalExtensionGlyph((void *)*((unsigned int *)this + 5), (const WebCore::RenderStyle *)*((unsigned __int16 *)this + 12), a2, (int32x4_t *)a3, (const WebCore::LayoutPoint *)&v131, (uint64_t)&v130);
      v92 = HIDWORD(v89) + v91;
      if (__OFADD__(HIDWORD(v89), v91))
        v92 = (HIDWORD(v89) >> 31) + 0x7FFFFFFF;
      v130 = v72;
      v131 = v89 | ((unint64_t)v92 << 32);
      WebCore::MathOperator::fillWithVerticalExtensionGlyph((void *)*((unsigned int *)this + 5), (const WebCore::RenderStyle *)*((unsigned __int16 *)this + 12), a2, (int32x4_t *)a3, (const WebCore::LayoutPoint *)&v131, (uint64_t)&v130);
    }
    else
    {
      WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&advances, *((_QWORD *)a2 + 4), (void *)*((unsigned int *)this + 3), *((unsigned __int16 *)this + 8));
      WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)&v137, *((_QWORD *)a2 + 4), (void *)*((unsigned int *)this + 7), *((unsigned __int16 *)this + 16));
      if (!*(_QWORD *)&advances.height
        || !*(_QWORD *)(*(_QWORD *)&advances.height + 8)
        || !v139
        || !*((_QWORD *)v139 + 1))
      {
        goto LABEL_142;
      }
      v46 = *(_DWORD *)a4;
      v45 = *((_DWORD *)a4 + 1);
      v47 = *((_DWORD *)this + 13);
      v48 = v45 + v47;
      if (__OFADD__(v45, v47))
        v48 = (v45 >> 31) + 0x7FFFFFFF;
      LODWORD(v136) = *(_DWORD *)a4;
      HIDWORD(v136) = v48;
      v49 = WebCore::MathOperator::paintGlyph((uint64_t)a2, (int32x4_t *)a3, &v137, (int32x2_t *)&v136, 4);
      v51 = v50;
      WebCore::boundsForGlyph(LOWORD(advances.width), *(uint64_t *)&advances.height);
      if (*((_DWORD *)this + 1) == 2)
      {
        v53 = *((_DWORD *)this + 13);
        v54 = *((_DWORD *)this + 14);
        v41 = __OFADD__(v53, v54);
        v55 = v53 + v54;
        v56 = (v53 >> 31) + 0x7FFFFFFF;
        if (!v41)
          v56 = v55;
      }
      else
      {
        v56 = *((_DWORD *)this + 12);
      }
      v41 = __OFADD__(v46, v56);
      v93 = v46 + v56;
      if (v41)
        v93 = (v46 >> 31) + 0x7FFFFFFF;
      v94 = (float)((float)((float)v93 * 0.015625) - v52) * 64.0;
      if (v94 >= 2147483650.0)
      {
        v95 = 0x7FFFFFFF;
      }
      else if (v94 <= -2147483650.0)
      {
        v95 = 0x80000000;
      }
      else
      {
        v95 = (int)v94;
      }
      v135 = __PAIR64__(v48, v95);
      v96 = WebCore::MathOperator::paintGlyph((uint64_t)a2, (int32x4_t *)a3, (unsigned __int16 *)&advances, (int32x2_t *)&v135, 3);
      v97 = v96;
      v98 = (void *)*((unsigned int *)this + 9);
      if (!(_DWORD)v98 && !*((_WORD *)this + 20))
      {
        v99 = v49 + v51;
        if (__OFADD__(v49, v51))
          v99 = (v49 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)glyphs = v99;
        *(_DWORD *)&glyphs[2] = v48;
        v132 = __PAIR64__(v48, v96);
        WebCore::MathOperator::fillWithHorizontalExtensionGlyph((void *)*((unsigned int *)this + 5), (const WebCore::RenderStyle *)*((unsigned __int16 *)this + 12), a2, (int32x4_t *)a3, (const WebCore::LayoutPoint *)glyphs, (unsigned int *)&v132);
LABEL_142:
        v115 = v139;
        v139 = 0;
        if (v115)
        {
          if (*(_DWORD *)v115 == 1)
            WTF::fastFree(v115, *(void **)&height);
          else
            --*(_DWORD *)v115;
        }
        v67 = advances.height;
        advances.height = 0.0;
        if (v67 == 0.0)
          return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
        goto LABEL_146;
      }
      WebCore::glyphDataForCodePointOrFallbackGlyph((WTF *)glyphs, *((_QWORD *)a2 + 4), v98, *((unsigned __int16 *)this + 20));
      v100 = v49 + v51;
      v101 = __OFADD__(v49, v51);
      v102 = (v49 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v49, v51))
        v102 = v49 + v51;
      v41 = __OFSUB__(v97, v102);
      v103 = v97 - v102;
      v104 = (v97 >> 31) + 0x7FFFFFFF;
      if (!v41)
        v104 = v103;
      v105 = (double)v104 * 0.015625 * 0.5 * 64.0;
      if (v105 >= 2147483650.0)
      {
        v106 = 0x7FFFFFFF;
      }
      else if (v105 <= -2147483650.0)
      {
        v106 = 0x80000000;
      }
      else
      {
        v106 = (int)v105;
      }
      v123 = v49;
      v107 = v101;
      v41 = __OFADD__(v46, v106);
      v108 = v46 + v106;
      if (v41)
        v108 = (v46 >> 31) + 0x7FFFFFFF;
      v132 = __PAIR64__(v48, v108);
      v109 = WebCore::MathOperator::paintGlyph((uint64_t)a2, (int32x4_t *)a3, glyphs, (int32x2_t *)&v132, 5);
      v110 = v109;
      v112 = v111;
      if (v107)
        v100 = (v123 >> 31) + 0x7FFFFFFF;
      v131 = __PAIR64__(v48, v100);
      v130 = __PAIR64__(v48, v109);
      WebCore::MathOperator::fillWithHorizontalExtensionGlyph((void *)*((unsigned int *)this + 5), (const WebCore::RenderStyle *)*((unsigned __int16 *)this + 12), a2, (int32x4_t *)a3, (const WebCore::LayoutPoint *)&v131, (unsigned int *)&v130);
      v113 = v110 + v112;
      if (__OFADD__(v110, v112))
        v113 = (v110 >> 31) + 0x7FFFFFFF;
      v131 = __PAIR64__(v48, v113);
      v130 = __PAIR64__(v48, v97);
      WebCore::MathOperator::fillWithHorizontalExtensionGlyph((void *)*((unsigned int *)this + 5), (const WebCore::RenderStyle *)*((unsigned __int16 *)this + 12), a2, (int32x4_t *)a3, (const WebCore::LayoutPoint *)&v131, (unsigned int *)&v130);
    }
    v114 = v134;
    v134 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 1)
        WTF::fastFree(v114, *(void **)&height);
      else
        --*(_DWORD *)v114;
    }
    goto LABEL_142;
  }
  return result;
}

void WebCore::PaintInfo::applyTransform(WebCore::PaintInfo *this, const WebCore::AffineTransform *a2)
{
  int32x4_t v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  double v8;
  double v9;
  double v11;
  double v12;
  BOOL v13;
  float64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float64x2_t v17;
  double v18;
  __int128 *v19;
  __int128 v20;
  double v21;
  float v22;
  double v23;
  double v24;
  float v25;
  double v26;
  float v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  _OWORD v48[3];

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a2, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*((float64x2_t *)a2 + 1), (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| *((double *)a2 + 4) != 0.0|| *((double *)a2 + 5) != 0.0)
  {
    (*(void (**)(_QWORD, const WebCore::AffineTransform *))(**((_QWORD **)this + 10) + 656))(*((_QWORD *)this + 10), a2);
    v4.i64[0] = *(_QWORD *)this;
    if (*(_QWORD *)this != 0xC0000010C0000010
      || *((_DWORD *)this + 2) != 2147483615
      || *((_DWORD *)this + 3) != 2147483615)
    {
      v5 = *(double *)a2;
      v6.f64[0] = *((float64_t *)a2 + 3);
      v7 = *(float64x2_t *)((char *)a2 + 8);
      v8 = -v7.f64[0];
      v9 = vmuld_lane_f64(-v7.f64[0], v7, 1) + *(double *)a2 * v6.f64[0];
      if (((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
        && (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
      {
        LOBYTE(v43) = 0;
        v19 = &xmmword_1969FD4F8;
      }
      else
      {
        v11 = *((double *)a2 + 2);
        v12 = 1.0;
        if (v5 == 1.0 && v7.f64[0] == 0.0 && (v7.f64[1] == 0.0 ? (v13 = v6.f64[0] == 1.0) : (v13 = 0), v13))
        {
          v17 = vnegq_f64(*((float64x2_t *)a2 + 2));
          v44 = 0.0;
          v45 = 0.0;
          v18 = 1.0;
        }
        else
        {
          v12 = v6.f64[0] / v9;
          v6.f64[1] = *(float64_t *)a2;
          v14 = *((float64x2_t *)a2 + 2);
          v15 = (int8x16_t)vmulq_f64(v14, vnegq_f64(v6));
          v16 = (int8x16_t)vdivq_f64(vmlaq_f64((float64x2_t)vextq_s8(v15, v15, 8uLL), v14, v7), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0));
          v17 = (float64x2_t)vextq_s8(v16, v16, 8uLL);
          v44 = v8 / v9;
          v45 = -v11 / v9;
          v18 = v5 / v9;
        }
        v43 = v12;
        v46 = v18;
        v19 = (__int128 *)&v43;
        v47 = v17;
      }
      v20 = v19[1];
      v48[0] = *v19;
      v48[1] = v20;
      v48[2] = v19[2];
      v4.i64[1] = *((_QWORD *)this + 1);
      v42 = vmulq_f32(vcvtq_f32_s32(v4), (float32x4_t)vdupq_n_s32(0x3C800000u));
      v21 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v48, (const WebCore::FloatRect *)&v42) * 64.0;
      v23 = v22;
      v24 = v22 * 64.0;
      v26 = v25;
      v28 = v27;
      if (v24 >= 2147483650.0
        || (v29 = v26 * 64.0, v26 * 64.0 >= 2147483650.0)
        || (v30 = v28 * 64.0, v28 * 64.0 >= 2147483650.0)
        || v21 <= -2147483650.0
        || v24 <= -2147483650.0
        || v29 <= -2147483650.0
        || v30 <= -2147483650.0
        || v21 >= 2147483650.0)
      {
        v34 = 0x7FFFFFFFLL;
        v35 = 0x80000000;
        if (v21 > -2147483650.0)
          v35 = (int)v21;
        if (v21 < 2147483650.0)
          v34 = v35;
        v36 = v23 * 64.0;
        v37 = 0x7FFFFFFF00000000;
        v38 = 0x8000000000000000;
        if (v23 * 64.0 > -2147483650.0)
          v38 = (unint64_t)(int)v36 << 32;
        if (v36 < 2147483650.0)
          v37 = v38;
        *(_QWORD *)this = v37 | v34;
        v39 = v26 * 64.0;
        v31 = 0x7FFFFFFFLL;
        v40 = 0x80000000;
        if (v39 > -2147483650.0)
          v40 = (int)v39;
        if (v39 < 2147483650.0)
          v31 = v40;
        v41 = v28 * 64.0;
        if (v41 >= 2147483650.0)
        {
          v33 = 0x7FFFFFFF00000000;
          goto LABEL_29;
        }
        if (v41 <= -2147483650.0)
        {
          v33 = 0x8000000000000000;
          goto LABEL_29;
        }
        v32 = (int)v41;
      }
      else
      {
        *(_QWORD *)this = (int)v21 | ((unint64_t)(int)v24 << 32);
        v31 = (int)v29;
        v32 = (int)v30;
      }
      v33 = v32 << 32;
LABEL_29:
      *((_QWORD *)this + 1) = v33 | v31;
    }
  }
}

void WebCore::RenderMathMLBlock::~RenderMathMLBlock(WebCore::RenderMathMLBlock *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLBlock::isChildAllowed(WebCore::RenderMathMLBlock *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;

  if ((*((_BYTE *)a2 + 45) & 1) == 0 && (v3 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8)) != 0)
    return (*(unsigned __int16 *)(v3 + 28) >> 3) & 1;
  else
    return 0;
}

uint64_t WebCore::axisHeight(WebCore *this, const WebCore::RenderStyle *a2)
{
  WebCore::Font *v3;
  WebCore::OpenTypeMathData *v4;
  void *v5;
  WebCore::OpenTypeMathData *v6;
  void *v7;
  float v8;
  double v9;
  uint64_t v10;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  double v16;

  v3 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 4) + 32), a2);
  ++*(_DWORD *)v3;
  v4 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v3);
  if (v4)
  {
    v6 = v4;
    ++*(_DWORD *)v4;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v4);
    v9 = v8 * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFFLL;
    }
    else if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v9;
    }
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v6, v7);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  else
  {
    v16 = (float)(*((float *)WebCore::RenderStyle::metricsOfPrimaryFont(this, v5) + 9) * 0.5) * 64.0;
    if (v16 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v16;
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Font::~Font((WTF **)v3);
    WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v10;
}

uint64_t WebCore::RenderMathMLBlock::baselinePosition(WebCore::RenderElement *a1, WTF::StringImpl *a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v11;

  if (a5 == 1)
    return 0;
  v11 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 1480))(a1);
  LODWORD(result) = WebCore::RenderBlock::baselinePosition(a1, a2, a3, a4, a5);
  if ((v11 & 0xFF00000000) != 0)
    return v11;
  else
    return result;
}

uint64_t WebCore::toUserUnits(uint64_t a1, WebCore::RenderStyle *this, int *a3)
{
  float v3;
  float v4;
  uint64_t result;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  double v11;

  switch(*(_DWORD *)a1)
  {
    case 0:
      v3 = (float)(*(float *)(*((_QWORD *)this + 3) + 184) * *(float *)(a1 + 4)) * 96.0;
      v4 = 2.54;
      goto LABEL_14;
    case 1:
      v6 = *(float *)(a1 + 4);
      v7 = *(float *)(*((_QWORD *)this + 4) + 204);
      goto LABEL_16;
    case 2:
      v9 = *(float *)(a1 + 4);
      v10 = v9 * *((float *)WebCore::RenderStyle::metricsOfPrimaryFont(this, this) + 9);
      goto LABEL_17;
    case 3:
      v6 = *(float *)(*((_QWORD *)this + 3) + 184) * *(float *)(a1 + 4);
      v7 = 96.0;
      goto LABEL_16;
    case 4:
      v3 = *(float *)(a1 + 4) * *(float *)(*((_QWORD *)this + 4) + 204);
      v4 = 18.0;
      goto LABEL_14;
    case 5:
      v3 = (float)(*(float *)(*((_QWORD *)this + 3) + 184) * *(float *)(a1 + 4)) * 96.0;
      v4 = 25.4;
      goto LABEL_14;
    case 7:
      v3 = (float)(*(float *)(*((_QWORD *)this + 3) + 184) * *(float *)(a1 + 4)) * 96.0;
      v4 = 6.0;
      goto LABEL_14;
    case 8:
      v3 = *(float *)(a1 + 4) * (float)((float)*a3 * 0.015625);
      v8 = 1120403456;
      goto LABEL_13;
    case 9:
      v3 = (float)(*(float *)(*((_QWORD *)this + 3) + 184) * *(float *)(a1 + 4)) * 96.0;
      v8 = 1116733440;
LABEL_13:
      v4 = *(float *)&v8;
LABEL_14:
      v10 = v3 / v4;
      goto LABEL_17;
    case 0xA:
      v6 = *(float *)(*((_QWORD *)this + 3) + 184);
      v7 = *(float *)(a1 + 4);
      goto LABEL_16;
    case 0xB:
      v6 = *(float *)(a1 + 4);
      v7 = (float)*a3 * 0.015625;
LABEL_16:
      v10 = v6 * v7;
LABEL_17:
      v11 = v10 * 64.0;
      if (v11 >= 2147483650.0)
      {
        result = 0x7FFFFFFFLL;
      }
      else if (v11 <= -2147483650.0)
      {
        result = 0x80000000;
      }
      else
      {
        result = (int)v11;
      }
      break;
    default:
      result = *a3;
      break;
  }
  return result;
}

void WebCore::RenderMathMLTable::~RenderMathMLTable(WebCore::RenderMathMLTable *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::RenderTable::~RenderTable(this, a2);
}

{
  WTF *v3;
  void *v4;

  v3 = (WTF *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::RenderTable::~RenderTable(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderMathMLTable::firstLineBaseline(WebCore::RenderMathMLTable *this, const WebCore::RenderStyle *a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = (char *)this + 160;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v2 = (char *)this + 164;
  v3 = *(_DWORD *)v2;
  if (*(int *)v2 >= 0)
    v4 = *(_DWORD *)v2;
  else
    v4 = v3 + 1;
  v5 = WebCore::axisHeight((WebCore::RenderMathMLTable *)((char *)this + 80), a2);
  if (v3 < -1)
    v6 = 0x80000000;
  else
    v6 = 0x7FFFFFFF;
  if (!__OFADD__(v5, v4 >> 1))
    v6 = v5 + (v4 >> 1);
  return (v6 + (v6 < 0 ? 0x3F : 0)) & 0xFFFFFFC0 | 0x100000000;
}

uint64_t WebCore::RenderMathMLBlock::layoutItems(WebCore::RenderMathMLBlock *this, int a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v104[20];
  __int128 v105;
  char v106;

  v3 = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 1048))(this);
  v4 = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v3, v4))
    v5 = (v3 >> 31) + 0x7FFFFFFF;
  else
    v5 = v3 + v4;
  v6 = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 1064))(this);
  v7 = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 + v7;
  v9 = *((unsigned int *)this + 16);
  if (v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v10 = *(_QWORD *)((v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v10 + 45) & 4) != 0)
  {
    v11 = 0;
    do
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 416))(v10);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1016))(v10);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1024))(v10);
      if (__OFADD__(v16, v17))
        v18 = (v16 >> 31) + 0x7FFFFFFF;
      else
        v18 = v16 + v17;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 944))(v10);
      if (__OFADD__(v18, v19))
        v20 = (v18 >> 31) + 0x7FFFFFFF;
      else
        v20 = v18 + v19;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 952))(v10);
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        v22 = (v20 >> 31) + 0x7FFFFFFF;
      v23 = __OFSUB__(v15, v22);
      v24 = v15 - v22;
      if (v23)
        v25 = (v15 >> 31) + 0x7FFFFFFF;
      else
        v25 = v24;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1016))(v10);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1024))(v10);
      if (__OFADD__(v26, v27))
        v28 = (v26 >> 31) + 0x7FFFFFFF;
      else
        v28 = v26 + v27;
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 944))(v10);
      if (__OFADD__(v28, v29))
        v30 = (v28 >> 31) + 0x7FFFFFFF;
      else
        v30 = v28 + v29;
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 952))(v10);
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
        v32 = (v30 >> 31) + 0x7FFFFFFF;
      v23 = __OFADD__(v32, v25);
      v33 = v32 + v25;
      v34 = (v32 >> 31) + 0x7FFFFFFF;
      if (v23)
        v35 = v34;
      else
        v35 = v33;
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1096))(v10);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1104))(v10);
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        v38 = (v36 >> 31) + 0x7FFFFFFF;
      v23 = __OFADD__(v35, v38);
      v39 = v35 + v38;
      if (v23)
        v39 = (v35 >> 31) + 0x7FFFFFFF;
      v23 = __OFADD__(v11, v39);
      v40 = v11 + v39;
      if (v23)
        v11 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v11 = v40;
      v41 = *(unsigned int *)(v10 + 47);
      if (!(v41 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)))
        break;
      v10 = *(_QWORD *)((v41 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
      if (!v10)
        break;
    }
    while ((*(_BYTE *)(v10 + 45) & 4) != 0);
  }
  else
  {
    v11 = 0;
  }
  result = WebCore::RenderBox::contentLogicalWidth(this);
  v13 = *((unsigned int *)this + 16);
  if (v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v14 = *(_QWORD *)((v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 45) & 4) != 0)
      {
        v42 = result;
        while (1)
        {
          v43 = *(_DWORD *)(v14 + 20);
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 416))(v14);
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1016))(v14);
          v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1024))(v14);
          v47 = v45 + v46;
          if (__OFADD__(v45, v46))
            v47 = (v45 >> 31) + 0x7FFFFFFF;
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 944))(v14);
          v49 = v47 + v48;
          if (__OFADD__(v47, v48))
            v49 = (v47 >> 31) + 0x7FFFFFFF;
          v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 952))(v14);
          v51 = v49 + v50;
          if (__OFADD__(v49, v50))
            v51 = (v49 >> 31) + 0x7FFFFFFF;
          v23 = __OFSUB__(v44, v51);
          v52 = v44 - v51;
          if (v23)
            v52 = (v44 >> 31) + 0x7FFFFFFF;
          if (v11 <= v42)
            v53 = v52;
          else
            v53 = v42;
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1016))(v14);
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1024))(v14);
          v56 = v54 + v55;
          if (__OFADD__(v54, v55))
            v56 = (v54 >> 31) + 0x7FFFFFFF;
          v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 944))(v14);
          v58 = v56 + v57;
          if (__OFADD__(v56, v57))
            v58 = (v56 >> 31) + 0x7FFFFFFF;
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 952))(v14);
          v60 = v58 + v59;
          if (__OFADD__(v58, v59))
            v60 = (v58 >> 31) + 0x7FFFFFFF;
          v61 = v53 + v60;
          if (__OFADD__(v53, v60))
            v61 = (v53 >> 31) + 0x7FFFFFFF;
          v62 = *(_DWORD *)(v14 + 20);
          v63 = v61 != *(_DWORD *)(v14 + 160) && (*(_DWORD *)(v14 + 20) & 0x20) == 0;
          if (v63)
          {
            v62 |= 0x20u;
            *(_DWORD *)(v14 + 20) = v62;
          }
          if ((v62 & 0x1800000) != 0x1000000)
            break;
LABEL_85:
          if ((*(_BYTE *)(v14 + 20) & 0xF8) != 0)
          {
            v64 = *(_QWORD *)(v14 + 32);
            if (v64
              && (v65 = *(_QWORD *)(v64 + 8)) != 0
              && (*(_BYTE *)(*(_QWORD *)(v65 + 104) + 239) & 0x18) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 479))
            {
              WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v14);
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 688))(v14);
            }
          }
          v66 = *(_DWORD *)(v14 + 164);
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1080))(v14);
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1088))(v14);
          v69 = v67 + v68;
          if (__OFADD__(v67, v68))
            v69 = (v67 >> 31) + 0x7FFFFFFF;
          v70 = v66 + v69;
          if (__OFADD__(v66, v69))
            v70 = (v66 >> 31) + 0x7FFFFFFF;
          v71 = 164;
          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
            v71 = 160;
          v72 = *(_DWORD *)((char *)this + v71);
          v73 = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 1056))(this);
          v74 = v5 + v73;
          if (__OFADD__(v5, v73))
            v74 = (v5 >> 31) + 0x7FFFFFFF;
          v75 = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 968))(this);
          v76 = v74 + v75;
          if (__OFADD__(v74, v75))
            v76 = (v74 >> 31) + 0x7FFFFFFF;
          v77 = v76 + v70;
          if (__OFADD__(v76, v70))
            v77 = (v76 >> 31) + 0x7FFFFFFF;
          result = (*(uint64_t (**)(WebCore::RenderMathMLBlock *))(*(_QWORD *)this + 1360))(this);
          v78 = (_DWORD)result << 6;
          if ((int)result < -33554432)
            v78 = 0x80000000;
          if ((int)result > 0x1FFFFFF)
            v78 = 0x7FFFFFFF;
          v23 = __OFADD__(v77, v78);
          v79 = v77 + v78;
          if (v23)
            v79 = (v77 >> 31) + 0x7FFFFFFF;
          if (v72 > v79)
            v79 = v72;
          v80 = 164;
          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
            v80 = 160;
          *(_DWORD *)((char *)this + v80) = v79;
          v81 = *(_DWORD *)(v14 + 120);
          v82 = (unsigned __int16)*(_DWORD *)(v14 + 124) >> 13;
          v83 = (v81 >> 26) & 1;
          v84 = v83;
          if ((v82 - 2) >= 2)
          {
            if ((_DWORD)v82 == 4)
            {
              v84 = (v81 & 0x4000000) == 0;
            }
            else
            {
              v84 = (v81 >> 26) & 1;
              if ((_DWORD)v82 != 5)
              {
                if ((v81 & 0x4000000) != 0)
                  v85 = 1;
                else
                  v85 = 3;
                goto LABEL_118;
              }
            }
          }
          v63 = v84 == 0;
          v85 = 2;
          if (v63)
            v85 = 0;
LABEL_118:
          v86 = v14 + 168;
          v87 = *(_DWORD *)(v14 + 168 + 4 * v85);
          v23 = __OFADD__(v8, v87);
          v88 = v8 + v87;
          if (v23)
            v88 = (v8 >> 31) + 0x7FFFFFFF;
          v89 = *(_DWORD *)(v14 + 160);
          v90 = v88;
          if ((*((_BYTE *)this + 123) & 4) != 0)
          {
            v91 = *((_DWORD *)this + 40);
            v92 = v91 - v88;
            if (__OFSUB__(v91, v88))
              v92 = (v91 >> 31) + 0x7FFFFFFF;
            v90 = v92 - v89;
            if (__OFSUB__(v92, v89))
              v90 = (v92 >> 31) + 0x7FFFFFFF;
          }
          if ((v82 - 1) > 4)
          {
            v93 = 0;
          }
          else
          {
            result = (uint64_t)qword_1969FD528;
            v93 = qword_1969FD528[v82 - 1];
          }
          v94 = *(_DWORD *)(v86 + 4 * v93);
          v23 = __OFADD__(v5, v94);
          v95 = v5 + v94;
          if (v23)
            v95 = (v5 >> 31) + 0x7FFFFFFF;
          *(_QWORD *)(v14 + 152) = v90 | (unint64_t)(v95 << 32);
          if ((v82 - 2) >= 2)
          {
            if ((_DWORD)v82 == 4)
            {
              v83 = (v81 & 0x4000000) == 0;
            }
            else if ((_DWORD)v82 != 5)
            {
              if ((v81 & 0x4000000) != 0)
                v96 = 3;
              else
                v96 = 1;
              goto LABEL_136;
            }
          }
          v63 = v83 == 0;
          v96 = 2;
          if (!v63)
            v96 = 0;
LABEL_136:
          v97 = *(_DWORD *)(v86 + 4 * v96);
          v23 = __OFADD__(v89, v97);
          v98 = v89 + v97;
          if (v23)
            v98 = (v89 >> 31) + 0x7FFFFFFF;
          v8 = v88 + v98;
          if (__OFADD__(v88, v98))
          {
            v8 = (v88 >> 31) + 0x7FFFFFFF;
            if ((v43 & 0x200) != 0)
              goto LABEL_145;
          }
          else if ((v43 & 0x200) != 0)
          {
            goto LABEL_145;
          }
          v99 = *(_DWORD *)(v14 + 20);
          if ((v99 & 0x200) != 0)
          {
            if ((v99 & 0x8000) == 0)
              goto LABEL_142;
            if ((*(_BYTE *)(v14 + 45) & 0x10) == 0)
            {
              result = 96;
              __break(0xC471u);
              return result;
            }
            v102 = *(_QWORD *)(v14 + 144);
            if (!v102 || (*(_BYTE *)(v102 + 25) & 8) == 0)
            {
LABEL_142:
              v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40) + 8);
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 528) + 8) + 288) + 476)
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 1944) + 24) + 8)
                                                     + 40)
                                         + 8)
                             + 3382))
              {
                LOBYTE(v105) = 0;
                v106 = 0;
                v104[0] = 0;
                v104[16] = 0;
                result = WebCore::RenderObject::issueRepaint(v14, &v105, 0, 0, (uint64_t)v104);
              }
            }
          }
LABEL_145:
          v101 = *(unsigned int *)(v14 + 47);
          if (v101 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
          {
            v14 = *(_QWORD *)((v101 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
            if (v14)
            {
              if ((*(_BYTE *)(v14 + 45) & 4) != 0)
                continue;
            }
          }
          return result;
        }
        if ((a2 & 1) != 0)
        {
          if ((v62 & 0x20) != 0)
          {
LABEL_81:
            if (a2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 1520))(v14))
              WebCore::RenderObject::setPreferredLogicalWidthsDirty(v14, 1, 0);
            goto LABEL_85;
          }
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 1544))(v14) || *((_BYTE *)this + 46) == 49)
            goto LABEL_85;
          v62 = *(_DWORD *)(v14 + 20);
          if ((v62 & 0x20) != 0)
            goto LABEL_81;
        }
        *(_DWORD *)(v14 + 20) = v62 | 0x20;
        goto LABEL_81;
      }
    }
  }
  return result;
}

void WebCore::RenderMathMLBlock::layoutBlock(uint64_t a1, int a2)
{
  int *v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  uint64_t v27;
  WebCore::RenderLayerScrollableArea *v28;
  _BYTE v29[56];
  _BYTE v30[24];

  if ((a2 & 1) != 0 || (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) == 0)
  {
    WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v29, (WebCore::RenderObject *)a1, 0, 0, 1);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v4 = (int *)(a1 + 164);
    else
      v4 = (int *)(a1 + 160);
    v5 = *v4;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
    v6 = *(unsigned __int16 *)(a1 + 69);
    *(_WORD *)(a1 + 69) = v6 & 0xFDFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v7 = (_DWORD *)(a1 + 164);
    else
      v7 = (_DWORD *)(a1 + 160);
    v8 = (v6 >> 9) & 1;
    if (v5 == *v7)
      v9 = v8;
    else
      v9 = 1;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    v16 = v12 + v15;
    if (__OFADD__(v12, v15))
      v16 = (v12 >> 31) + 0x7FFFFFFF;
    v17 = v9 | a2;
    v18 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v18 = 1352;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v18))(a1);
    v20 = v19 << 6;
    if (v19 < -33554432)
      v20 = 0x80000000;
    if (v19 > 0x1FFFFFF)
      v20 = 0x7FFFFFFF;
    v21 = __OFADD__(v16, v20);
    v22 = v16 + v20;
    if (v21)
      v22 = (v16 >> 31) + 0x7FFFFFFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v23 = (int *)(a1 + 160);
    else
      v23 = (int *)(a1 + 164);
    *v23 = v22;
    WebCore::RenderMathMLBlock::layoutItems((WebCore::RenderMathMLBlock *)a1, v17);
    WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
    WebCore::RenderBlock::layoutPositionedObjects(a1);
    WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v29);
    if ((*(_BYTE *)(a1 + 22) & 1) != 0)
    {
      v25 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      if ((v25 > 5 || ((1 << v25) & 0x2A) == 0)
        && (v26 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 528)) != 0
        && *v26)
      {
        WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v26 + 2), (_QWORD *)a1, (uint64_t)v30);
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 144);
        if (v27)
        {
          WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
          v28 = *(WebCore::RenderLayerScrollableArea **)(v27 + 264);
          if (v28)
            WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v28);
        }
      }
    }
    v24 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
    *(_DWORD *)(a1 + 20) = v24;
    if ((*(_BYTE *)(a1 + 45) & 2) == 0)
    {
      *(_WORD *)(a1 + 69) &= ~1u;
      *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                       * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                          + 1944)
                                                                              + 248)
                                                                  + 472));
    }
    *(_DWORD *)(a1 + 20) = v24 & 0xFFDFFE07;
  }
}

void WebCore::RenderMathMLBlock::layoutInvalidMarkup(WebCore::RenderMathMLBlock *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  WebCore::RenderObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  WebCore::RenderLayerScrollableArea *v15;
  _BYTE v16[24];

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v2)
    {
      while ((*(_BYTE *)(v2 + 45) & 4) != 0)
      {
        v4 = *(_DWORD *)(v2 + 20);
        if ((v4 & 0x1800000) == 0x1000000)
        {
          v5 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v2);
          if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
            WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v2);
          if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
            WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v2);
          if ((*(_BYTE *)(v2 + 52) & 7) != 1 || (*(_BYTE *)(v2 + 53) & 2) == 0)
          {
            if ((*(_BYTE *)(v2 + 20) & 0xF8) != 0)
              *((_DWORD *)v5 + 5) |= 0x40u;
            {
              WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
              unk_1ECE91358 = 0u;
            }
            WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v5, (WebCore::RenderBox *)v2);
          }
        }
        else if ((v4 & 0xF8) != 0)
        {
          v6 = *(_QWORD *)(v2 + 32);
          if (v6
            && (v7 = *(_QWORD *)(v6 + 8)) != 0
            && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 0x18) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248)
                         + 479))
          {
            WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v2);
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 688))(v2);
          }
        }
        v8 = *(unsigned int *)(v2 + 47);
        if (!(v8 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
          break;
        v2 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
        if (!v2)
          break;
      }
    }
  }
  *((_QWORD *)this + 20) = 0;
  WebCore::RenderBlock::layoutPositionedObjects((uint64_t)this);
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v9 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x2A;
    v12 = v10 || v11 == 0;
    if (v12
      && (v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 528)) != 0
      && *v13)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v13 + 2), this, (uint64_t)v16);
    }
    else
    {
      v14 = *((_QWORD *)this + 18);
      if (v14)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*((WebCore::RenderLayer **)this + 18));
        v15 = *(WebCore::RenderLayerScrollableArea **)(v14 + 264);
        if (v15)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v15);
      }
    }
  }
  v3 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v3;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v3 & 0xFFDFFE07;
}

void WebCore::RenderMathMLBlock::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  int v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  int v8;

  WebCore::RenderBlock::styleDidChange(a1, a2, a3);
  if (a3
    && ((*(unsigned __int8 *)(*(_QWORD *)(a1 + 104) + 238) >> 4) & 1) != (*(_BYTE *)(*((_QWORD *)a3 + 3) + 238) & 0x10) >> 4)
  {
    v5 = *(_DWORD *)(a1 + 20);
    if ((v5 & 8) == 0)
    {
      *(_DWORD *)(a1 + 20) = v5 | 8;
      v6 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a1, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a1, v6);
      if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(a1 + 45) & 0x10) == 0
          || ((v7 = *(_QWORD *)(a1 + 144)) == 0
            ? (v8 = MEMORY[8])
            : (v8 = *(_DWORD *)(v7 + 8) + 1, *(_DWORD *)(v7 + 8) = v8),
              *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
              !v8))
        {
          __break(0xC471u);
          JUMPOUT(0x1964A03CCLL);
        }
        *(_DWORD *)(v7 + 8) = v8 - 1;
      }
    }
    WebCore::RenderObject::setPreferredLogicalWidthsDirty(a1, 1, 1);
  }
}

const char *WebCore::RenderMathMLBlock::renderName(WebCore::RenderMathMLBlock *this)
{
  return "RenderMathMLBlock";
}

uint64_t WebCore::RenderMathMLBlock::isRenderMathMLBlock(WebCore::RenderMathMLBlock *this)
{
  return 1;
}

uint64_t WebCore::RenderMathMLBlock::avoidsFloats(WebCore::RenderMathMLBlock *this)
{
  return 1;
}

uint64_t WebCore::RenderMathMLBlock::canDropAnonymousBlockChild(WebCore::RenderMathMLBlock *this)
{
  return 0;
}

uint64_t WebCore::RenderMathMLBlock::unembellishedOperator(WebCore::RenderMathMLBlock *this)
{
  return 0;
}

const char *WebCore::RenderMathMLTable::renderName(WebCore::RenderMathMLTable *this)
{
  return "RenderMathMLTable";
}

BOOL WebCore::requiresLineBoxForContent(WebCore *this, const WebCore::RenderInline *a2, const LineInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore *v5;
  char *LineStyle;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  WebCore::RenderElement *v18;
  uint64_t v19;
  char *v20;
  char isCalculatedEqual;
  const WebCore::RenderInline *v23;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) != 1)
    return 0;
  if (*(_BYTE *)a2)
  {
    v23 = a2;
    if ((*((_BYTE *)this + 45) & 2) != 0)
    {
      if (v3)
        this = *(WebCore **)(v3 + 8);
      else
        this = 0;
    }
    LineStyle = WebCore::RenderElement::firstLineStyle(this, a2);
    a2 = v23;
  }
  else
  {
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v5 = 0;
    else
      v5 = this;
    if (v3 && (*((_BYTE *)this + 45) & 2) != 0)
      v5 = *(WebCore **)(v3 + 8);
    LineStyle = (char *)v5 + 80;
  }
  if (*(_BYTE *)a2)
  {
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      v19 = *(_QWORD *)(v4 + 32);
      if (v19)
        v18 = *(WebCore::RenderElement **)(v19 + 8);
      else
        v18 = 0;
    }
    else
    {
      v18 = (WebCore::RenderElement *)v4;
    }
    v7 = WebCore::RenderElement::firstLineStyle(v18, a2);
  }
  else
  {
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      v17 = *(_QWORD *)(v4 + 32);
      if (v17)
        v4 = *(_QWORD *)(v17 + 8);
      else
        v4 = 0;
    }
    v7 = (char *)(v4 + 80);
  }
  v8 = (unsigned __int8 *)*((_QWORD *)LineStyle + 4);
  v9 = (unsigned __int8 *)*((_QWORD *)v7 + 4);
  v10 = v8[16];
  if (v10 != v9[16] || (v8[17] != 0) != (v9[17] != 0))
    return 1;
  if (v10 == 13)
    goto LABEL_24;
  if (v10 == 11)
  {
    v20 = v7;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v8 + 12), (const WebCore::Length *)(v9 + 12));
    v7 = v20;
    if ((isCalculatedEqual & 1) != 0)
      goto LABEL_24;
    return 1;
  }
  v11 = *((float *)v8 + 3);
  if (!v8[18])
    v11 = (float)SLODWORD(v11);
  v12 = *((float *)v9 + 3);
  if (!v9[18])
    v12 = (float)SLODWORD(v12);
  if (v11 != v12)
    return 1;
LABEL_24:
  if ((*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 8) + 68) ^ *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)LineStyle + 1) + 8) + 68)) > 0xF)
    return 1;
  v13 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)v7 + 4) + 32), a2);
  v15 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)LineStyle + 4) + 32), v14);
  if (*(_QWORD *)(v13 + 44) != *(_QWORD *)(v15 + 44))
    return 1;
  return *(_DWORD *)(v13 + 52) != *(_DWORD *)(v15 + 52);
}

uint64_t WebCore::LegacyInlineIterator::current(WebCore::LegacyInlineIterator *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 45) & 2) == 0)
    return 0;
  v3 = *(_QWORD *)(v1 + 104);
  if (!v3)
    return 0;
  v4 = *((unsigned int *)this + 6);
  if (*(_DWORD *)(v3 + 4) <= v4)
    return 0;
  v5 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    return *(unsigned __int8 *)(v5 + v4);
  else
    return *(unsigned __int16 *)(v5 + 2 * v4);
}

BOOL WebCore::RenderObject::preservesNewline(WebCore::RenderObject *this)
{
  unsigned int v1;
  int v2;
  _BOOL4 v3;
  _BOOL4 v5;
  BOOL v6;
  _BOOL4 v7;
  _BOOL4 v8;

  if (*((_BYTE *)this + 46) == 72)
    return 0;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    this = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  v1 = *((_DWORD *)this + 30);
  v2 = (v1 >> 27) & 7;
  v3 = (v1 & 0x40000000) == 0;
  if ((v1 & 0x40000000) == 0 && v2 == 3)
    return 1;
  if (!v2)
    return 0;
  v5 = v2 != 2;
  v6 = v2 == 1;
  v7 = v2 != 1;
  if (!v6)
    v3 = 0;
  if ((v1 & 0x40000000) != 0)
    v8 = v7;
  else
    v8 = v5;
  return v3 || !v8;
}

uint64_t WebCore::nextInlineRendererSkippingEmpty(WebCore *this, WebCore::RenderElement *a2, WebCore::RenderObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v10;
  int isEmptyInline;
  uint64_t v14;

  if (!a2)
    return 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + 45) & 2) == 0 && *((_BYTE *)a2 + 46) != 17)
    {
      v8 = *((_DWORD *)a2 + 5);
      if ((v8 & 0x802) == 0 && (v8 & 0x1800000) != 0x1000000)
      {
        v14 = *((unsigned int *)a2 + 16);
        if (v14 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
        {
          v5 = *(_QWORD *)((v14 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
          if (v5)
            goto LABEL_21;
        }
      }
    }
    if (a2 == this)
      return 0;
    while (1)
    {
      v4 = *(unsigned int *)((char *)a2 + 47);
      if (v4 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32))
      {
        v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32)) + 8);
        if (v5)
          break;
      }
      v6 = *((_QWORD *)a2 + 4);
      if (v6)
      {
        a2 = *(WebCore::RenderElement **)(v6 + 8);
        if (a2 && a2 != this)
          continue;
      }
      return 0;
    }
LABEL_21:
    if ((*(_BYTE *)(v5 + 45) & 2) != 0 || *(_BYTE *)(v5 + 46) == 17)
      return v5;
    v10 = *(_DWORD *)(v5 + 20);
    if ((v10 & 0x802) != 0 || (v10 & 0x1800000) == 0x1000000)
      return v5;
    a2 = (WebCore::RenderElement *)v5;
    if ((*(_BYTE *)(v5 + 45) & 0x20) != 0)
    {
      isEmptyInline = WebCore::isEmptyInline((WebCore *)v5, (const WebCore::RenderInline *)v5);
      a2 = (WebCore::RenderElement *)v5;
      if (isEmptyInline)
        return v5;
    }
  }
}

uint64_t WebCore::inlineLogicalWidth(WebCore *this, const WebCore::RenderObject *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  WebCore *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 45) & 0x20) != 0)
      {
        LOBYTE(v8) = (_BYTE)a2;
        v9 = this;
        v5 = 0;
        v10 = 1;
        while (1)
        {
          if (v10 == 200)
            return v5;
          if ((WebCore::isEmptyInline((WebCore *)v4, a2) & 1) == 0)
          {
            v11 = *((unsigned int *)v9 + 10);
            if (v11 | ((unint64_t)*((unsigned __int8 *)v9 + 44) << 32)
              && (v12 = *(_QWORD *)((v11 | ((unint64_t)*((unsigned __int8 *)v9 + 44) << 32)) + 8)) != 0)
            {
              while ((*(_DWORD *)(v12 + 20) & 0x1800000) == 0x1000000)
              {
                v31 = *(unsigned int *)(v12 + 40) | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32);
                if (!v31)
                  goto LABEL_11;
                v13 = 0;
                v12 = *(_QWORD *)(v31 + 8);
                if (!v12)
                  goto LABEL_12;
              }
              v13 = v12;
            }
            else
            {
LABEL_11:
              v13 = 0;
            }
LABEL_12:
            if ((v8 & 1) != 0
              && (!v13 || _ZZN7WebCore18inlineLogicalWidthERKNS_12RenderObjectEbbENKUlRKT_E0_clIS0_EEDaS5_(v13)))
            {
              v14 = WebCore::RenderInline::marginStart((WebCore::RenderInline *)v4, 0);
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 976))(v4);
              if (__OFADD__(v14, v15))
                v16 = (v14 >> 31) + 0x7FFFFFFF;
              else
                v16 = v14 + v15;
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1064))(v4);
              v18 = v16 + v17;
              if (__OFADD__(v16, v17))
                v18 = (v16 >> 31) + 0x7FFFFFFF;
              v19 = __OFADD__((_DWORD)v5, v18);
              v20 = (v5 + v18);
              if (v19)
              {
                v5 = (v5 >> 31) + 0x7FFFFFFF;
                v8 = 1;
              }
              else
              {
                v8 = 1;
                v5 = v20;
              }
            }
            else
            {
              v8 = 0;
            }
            v21 = *(unsigned int *)((char *)v9 + 47);
            if (v21 | ((unint64_t)*((unsigned __int8 *)v9 + 51) << 32))
            {
              if ((a3 & 1) == 0
                || (v22 = *(_QWORD *)((v21 | ((unint64_t)*((unsigned __int8 *)v9 + 51) << 32)) + 8)) != 0
                && !_ZZN7WebCore18inlineLogicalWidthERKNS_12RenderObjectEbbENKUlRKT_E0_clIS0_EEDaS5_(v22))
              {
LABEL_26:
                if (!v8)
                  return v5;
                a3 = 0;
                LOBYTE(v8) = 1;
                goto LABEL_39;
              }
            }
            else if ((a3 & 1) == 0)
            {
              goto LABEL_26;
            }
            v23 = WebCore::RenderInline::marginEnd((WebCore::RenderInline *)v4, 0);
            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 984))(v4);
            if (__OFADD__(v23, v24))
              v25 = (v23 >> 31) + 0x7FFFFFFF;
            else
              v25 = v23 + v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1072))(v4);
            v27 = v25 + v26;
            if (__OFADD__(v25, v26))
              v27 = (v25 >> 31) + 0x7FFFFFFF;
            v19 = __OFADD__((_DWORD)v5, v27);
            v28 = v5 + v27;
            if (v19)
              v5 = (v5 >> 31) + 0x7FFFFFFF;
            else
              v5 = v28;
            a3 = 1;
          }
LABEL_39:
          v29 = *(_QWORD *)(v4 + 32);
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 8);
            if (v30)
            {
              ++v10;
              v9 = (WebCore *)v4;
              v4 = v30;
              if ((*(_BYTE *)(v30 + 45) & 0x20) != 0)
                continue;
            }
          }
          return v5;
        }
      }
    }
  }
  return 0;
}

BOOL _ZZN7WebCore18inlineLogicalWidthERKNS_12RenderObjectEbbENKUlRKT_E0_clIS0_EEDaS5_(uint64_t a1)
{
  uint64_t v1;

  return (*(_BYTE *)(a1 + 45) & 2) != 0 && ((v1 = *(_QWORD *)(a1 + 104)) == 0 || !*(_DWORD *)(v1 + 4))
      || *(_BYTE *)(a1 + 46) == 17
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88) + 8) + 68) & 8) != 0;
}

BOOL WebCore::BreakingContext::fitsOnLineOrHangsAtEnd(WebCore::BreakingContext *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  BOOL v6;
  float v7;
  float v9;
  BOOL v11;
  uint64_t v12;

  v1 = (float)(*((float *)this + 43) + *((float *)this + 42)) + 0.0;
  v2 = *((float *)this + 48);
  if (v1 <= v2)
    return 1;
  v3 = vabds_f32(v1, v2);
  v4 = fabsf(v1);
  if (v4 < 1.0 && (float)(v4 * 3.4028e38) < v3)
    return *((_BYTE *)this + 219) != 0;
  v6 = (float)(v4 * 1.1755e-38) <= v3 || v4 <= 1.0;
  v7 = v3 / v4;
  if (v6 && v7 > 0.00000011921)
    return *((_BYTE *)this + 219) != 0;
  v9 = fabsf(v2);
  if (v9 < 1.0 && (float)(v9 * 3.4028e38) < v3)
    return *((_BYTE *)this + 219) != 0;
  v11 = (float)(v9 * 1.1755e-38) <= v3 || v9 <= 1.0;
  v12 = 1;
  if (v11 && (float)(v3 / v9) > 0.00000011921)
    return *((_BYTE *)this + 219) != 0;
  return v12;
}

BOOL WebCore::LegacyInlineIterator::atTextParagraphSeparator(WebCore::LegacyInlineIterator *this)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = *((_QWORD *)this + 1);
  if (!v1 || (*(_BYTE *)(v1 + 45) & 2) == 0 || *(_BYTE *)(v1 + 46) == 72)
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 120);
  v4 = (v3 >> 27) & 7;
  if ((v3 & 0x40000000) != 0 || v4 != 3)
  {
    if (!v4)
      return 0;
    v5 = v3 & 0x40000000;
    v6 = v5 ? 1 : 2;
    if (v4 != v6 && (v4 != 1) | (v5 >> 30) & 1)
      return 0;
  }
  v7 = *(_QWORD *)(v1 + 104);
  if (v7 && (v8 = *((unsigned int *)this + 6), *(_DWORD *)(v7 + 4) > v8))
  {
    v9 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      v10 = *(unsigned __int8 *)(v9 + v8);
    else
      v10 = *(unsigned __int16 *)(v9 + 2 * v8);
  }
  else
  {
    v10 = 0;
  }
  return v10 == 10;
}

char *WebCore::ensureCharacterGetsLineBox(char *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = (uint64_t)result;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 24) - 1;
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = v4;
  LOBYTE(v18) = 0;
  BYTE4(v18) = 0;
  DWORD2(v18) = v5;
  BYTE12(v18) = 0;
  v6 = *((unsigned int *)result + 3);
  if ((_DWORD)v6 == *((_DWORD *)result + 2))
  {
    result = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v6 + 1, (unint64_t)&v17);
    v7 = (_OWORD *)(*(_QWORD *)v3 + 32 * *(unsigned int *)(v3 + 12));
    v8 = *(_OWORD *)result;
    v9 = *((_OWORD *)result + 1);
  }
  else
  {
    v7 = (_OWORD *)(*(_QWORD *)result + 32 * v6);
    v8 = v17;
    v9 = v18;
  }
  *v7 = v8;
  v7[1] = v9;
  v10 = *(_DWORD *)(v3 + 8);
  v11 = (*(_DWORD *)(v3 + 12) + 1);
  *(_DWORD *)(v3 + 12) = v11;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = v12;
  LOBYTE(v18) = 0;
  BYTE4(v18) = 0;
  DWORD2(v18) = v13;
  BYTE12(v18) = 0;
  if ((_DWORD)v11 == v10)
  {
    result = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v11 + 1, (unint64_t)&v17);
    v14 = (_OWORD *)(*(_QWORD *)v3 + 32 * *(unsigned int *)(v3 + 12));
    v15 = *(_OWORD *)result;
    v16 = *((_OWORD *)result + 1);
  }
  else
  {
    v14 = (_OWORD *)(*(_QWORD *)v3 + 32 * v11);
    v15 = v17;
    v16 = v18;
  }
  *v14 = v15;
  v14[1] = v16;
  ++*(_DWORD *)(v3 + 12);
  return result;
}

uint64_t WebCore::textBeginsWithBreakablePosition(WebCore *this, WebCore::RenderText *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;

  v2 = *((_QWORD *)this + 13);
  if (!v2 || !*(_DWORD *)(v2 + 4))
    return 0;
  v3 = *(unsigned __int8 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    v4 = *v3;
  else
    v4 = *(unsigned __int16 *)v3;
  v5 = 1;
  if (v4 == 9 || v4 == 32)
    return v5;
  if (v4 != 10)
    return 0;
  if (*((_BYTE *)this + 46) == 72)
    return 1;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    this = *(WebCore **)(*((_QWORD *)this + 4) + 8);
  v6 = *((_DWORD *)this + 30);
  v7 = (v6 >> 27) & 7;
  if ((v6 & 0x40000000) == 0 && v7 == 3)
    return 0;
  v5 = 1;
  if (v7)
  {
    if ((v6 & 0x40000000) != 0)
      v8 = 1;
    else
      v8 = 2;
    v9 = (v6 >> 30) & 1;
    if (v7 != 1)
      v9 = 1;
    if (v7 == v8)
      return 0;
    else
      return v9;
  }
  return v5;
}

uint64_t WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 24 * v10);
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v13 + 2);
          do
          {
            v18 = v17 & v15;
            v19 = v14 + 24 * (v17 & v15);
            v17 = ++v16 + (v17 & v15);
          }
          while (*(_QWORD *)v19);
          WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>::~KeyValuePair((WebCore::RenderStyle **)(v14 + 24 * v18), v9);
          v20 = *v13;
          *v13 = 0;
          *(_QWORD *)v19 = v20;
          *(_DWORD *)(v19 + 8) = *((_DWORD *)v13 + 2);
          v21 = v5 + 24 * v10;
          v22 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v14 + 24 * v18 + 16) = v22;
          WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>::~KeyValuePair((WebCore::RenderStyle **)v21, v23);
          if (v13 == a3)
            v11 = v14 + 24 * v18;
        }
        else
        {
          WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>::~KeyValuePair((WebCore::RenderStyle **)(v5 + 24 * v10), v9);
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WebCore::RenderStyle **WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>::~KeyValuePair(WebCore::RenderStyle **a1, void *a2)
{
  WebCore::TextAutoSizingValue *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::RenderStyle *v9;
  WTF *v10;
  void *v11;

  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    WebCore::TextAutoSizingValue::reset(v3);
    v5 = *(uint64_t **)v3;
    if (*(_QWORD *)v3)
    {
      v6 = *((unsigned int *)v5 - 1);
      if ((_DWORD)v6)
      {
        v7 = *(uint64_t **)v3;
        do
        {
          v8 = *v7;
          if (*v7 != -1)
          {
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)(v8 + 24) == 2)
              {
                if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v8);
              }
              else
              {
                *(_DWORD *)(v8 + 24) -= 2;
              }
            }
          }
          ++v7;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v5 - 2), v4);
    }
    WTF::fastFree(v3, v4);
  }
  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    WebCore::RenderStyle::~RenderStyle(v9, a2);
    if (*(_DWORD *)v10)
    {
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v10, v11);
    }
  }
  return a1;
}

void WebCore::RenderMathMLFenced::~RenderMathMLFenced(WebCore::RenderMathMLFenced *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;

  v3 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = off_1E343A178;
  v7 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v8 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderMathMLFenced::~RenderMathMLFenced(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

void WebCore::RenderMathMLFenced::updateFromElement(WebCore::RenderMathMLFenced *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  const WTF::String *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  const WTF::String *v23;
  char v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WebCore::RenderMathMLFencedOperator *v46;
  uint64_t v47;
  WebCore::RenderMathMLFencedOperator *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  char v52;
  __int16 v53;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 104);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (WTF::StringImpl **)(v6 + 8);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 1);
    if (v9 == WebCore::MathMLNames::openAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::MathMLNames::openAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::MathMLNames::openAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *v8;
  if (*v8)
  {
    v11 = *(_DWORD *)v10 + 2;
    *(_DWORD *)v10 = v11;
    v12 = (WebCore::RenderMathMLFenced *)((char *)this + 208);
  }
  else
  {
    v13 = 1;
    WTF::AtomStringImpl::add();
    v10 = v49;
    v12 = (WebCore::RenderMathMLFenced *)((char *)this + 208);
    if (!v49)
      goto LABEL_18;
    v11 = *(_DWORD *)v49;
  }
  v13 = 0;
  *(_DWORD *)v10 = v11 + 2;
LABEL_18:
  v14 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = v10;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, a2);
      if ((v13 & 1) != 0)
        goto LABEL_24;
      goto LABEL_22;
    }
    *(_DWORD *)v14 -= 2;
  }
  if ((v13 & 1) != 0)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
LABEL_24:
  v15 = *(_QWORD *)(v3 + 104);
  if (!v15)
    goto LABEL_35;
  v16 = *(_DWORD *)(v15 + 4);
  if ((v16 & 1) == 0)
  {
    v17 = v15 + 32;
    LODWORD(v18) = v16 >> 5;
    if ((_DWORD)v18)
      goto LABEL_27;
LABEL_35:
    v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_36;
  }
  v17 = *(_QWORD *)(v15 + 40);
  LODWORD(v18) = *(_DWORD *)(v15 + 52);
  if (!(_DWORD)v18)
    goto LABEL_35;
LABEL_27:
  v18 = v18;
  v19 = (WTF::StringImpl **)(v17 + 8);
  while (1)
  {
    v20 = (uint64_t)*(v19 - 1);
    if (v20 == WebCore::MathMLNames::closeAttr
      || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::MathMLNames::closeAttr + 24)
      && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::MathMLNames::closeAttr + 32))
    {
      break;
    }
    v19 += 2;
    if (!--v18)
    {
      v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_36:
  v21 = *v19;
  if (*v19)
  {
    v22 = *(_DWORD *)v21 + 2;
    *(_DWORD *)v21 = v22;
    v23 = (WebCore::RenderMathMLFenced *)((char *)this + 216);
  }
  else
  {
    v24 = 1;
    WTF::AtomStringImpl::add();
    v21 = v49;
    v23 = (WebCore::RenderMathMLFenced *)((char *)this + 216);
    if (!v49)
      goto LABEL_41;
    v22 = *(_DWORD *)v49;
  }
  v24 = 0;
  *(_DWORD *)v21 = v22 + 2;
LABEL_41:
  v25 = *(WTF::StringImpl **)v23;
  *(_QWORD *)v23 = v21;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, a2);
      if ((v24 & 1) != 0)
        goto LABEL_47;
      goto LABEL_45;
    }
    *(_DWORD *)v25 -= 2;
  }
  if ((v24 & 1) != 0)
    goto LABEL_47;
LABEL_45:
  if (*(_DWORD *)v21 == 2)
    WTF::StringImpl::destroy(v21, a2);
  else
    *(_DWORD *)v21 -= 2;
LABEL_47:
  v26 = *(_QWORD *)(v3 + 104);
  if (!v26)
    goto LABEL_58;
  v27 = *(_DWORD *)(v26 + 4);
  if ((v27 & 1) == 0)
  {
    v28 = v26 + 32;
    LODWORD(v29) = v27 >> 5;
    if ((_DWORD)v29)
      goto LABEL_50;
LABEL_58:
    v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_59;
  }
  v28 = *(_QWORD *)(v26 + 40);
  LODWORD(v29) = *(_DWORD *)(v26 + 52);
  if (!(_DWORD)v29)
    goto LABEL_58;
LABEL_50:
  v29 = v29;
  v30 = (uint64_t *)(v28 + 8);
  while (1)
  {
    v31 = *(v30 - 1);
    if (v31 == WebCore::MathMLNames::separatorsAttr
      || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::MathMLNames::separatorsAttr + 24)
      && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::MathMLNames::separatorsAttr + 32))
    {
      break;
    }
    v30 += 2;
    if (!--v29)
    {
      v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_59:
  if (!*v30)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v41 = v49;
    v49 = 0;
    v42 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v41;
    if (!v42)
      goto LABEL_98;
    v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2)
    {
LABEL_97:
      *(_DWORD *)v42 = v43;
      goto LABEL_98;
    }
LABEL_115:
    WTF::StringImpl::destroy(v42, a2);
    goto LABEL_95;
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 1;
  v32 = *v30;
  if (*v30)
  {
    v33 = 0;
    while (1)
    {
      v34 = *(unsigned int *)(v32 + 4);
      if (v33 >= v34)
        goto LABEL_89;
      v35 = *(_QWORD *)(v32 + 8);
      if ((*(_BYTE *)(v32 + 16) & 4) != 0)
        break;
      v36 = *(unsigned __int16 *)(v35 + 2 * v33);
      if (v36 <= 0xFF)
        goto LABEL_65;
      v39 = MEMORY[0x19AEA858C]();
      v32 = *v30;
      if (v39 != 9)
      {
        if (v32)
        {
          v34 = *(unsigned int *)(v32 + 4);
          goto LABEL_79;
        }
LABEL_82:
        v53 = v32;
        WTF::StringBuilder::append();
        v32 = *v30;
      }
LABEL_73:
      ++v33;
      if (!v32)
        goto LABEL_89;
    }
    v36 = *(unsigned __int8 *)(v35 + v33);
LABEL_65:
    if (v36 <= 0x20u && ((1 << v36) & 0x100003600) != 0 || v36 == 11)
      goto LABEL_73;
LABEL_79:
    if (v33 >= v34)
    {
      LOWORD(v32) = 0;
    }
    else
    {
      v40 = *(_QWORD *)(v32 + 8);
      if ((*(_BYTE *)(v32 + 16) & 4) != 0)
        LOWORD(v32) = *(unsigned __int8 *)(v40 + v33);
      else
        LOWORD(v32) = *(_WORD *)(v40 + 2 * v33);
    }
    goto LABEL_82;
  }
LABEL_89:
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v42 = v50;
  v50 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 != 2)
    {
      *(_DWORD *)v42 -= 2;
      goto LABEL_95;
    }
    goto LABEL_115;
  }
LABEL_95:
  v42 = v49;
  v49 = 0;
  if (v42)
  {
    v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, a2);
      goto LABEL_98;
    }
    goto LABEL_97;
  }
LABEL_98:
  v45 = *((unsigned int *)this + 16);
  if (v45 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v46 = *(WebCore::RenderMathMLFencedOperator **)((v45 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v46)
    {
      if (*((_BYTE *)v46 + 46) == 53)
        WebCore::RenderMathMLFencedOperator::updateOperatorContent(v46, v12);
      v47 = *((_QWORD *)this + 29);
      if (v47)
        v48 = *(WebCore::RenderMathMLFencedOperator **)(v47 + 8);
      else
        v48 = 0;
      WebCore::RenderMathMLFencedOperator::updateOperatorContent(v48, v23);
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void WebCore::RenderMathMLFencedOperator::updateOperatorContent(WebCore::RenderMathMLFencedOperator *this, const WTF::String *a2)
{
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  WebCore::MathOperator *v18;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(const char **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = WebCore::MathMLTokenElement::convertToSingleCodePoint(v4, v5);
  if ((v6 & 0xFF00000000) != 0)
  {
    v7 = 0;
    if ((_DWORD)v6 == 45)
      LODWORD(v6) = 8722;
    v8 = 110;
    do
    {
      v9 = WebCore::horizontalOperators[v7 + ((v8 - 1) >> 1)];
      if (v9 == (_DWORD)v6)
      {
        v12 = 0;
        goto LABEL_17;
      }
      v10 = (v8 - 1) >> 1;
      v8 -= v10 + 1;
      if (v9 <= v6)
      {
        v11 = v10 + 1;
      }
      else
      {
        v8 = v10;
        v11 = 0;
      }
      v7 += v11;
    }
    while (v8 > 1);
    if (!v8)
      goto LABEL_15;
    v12 = WebCore::horizontalOperators[v7] != (_DWORD)v6;
  }
  else
  {
    LODWORD(v6) = 0;
LABEL_15:
    v12 = 1;
  }
LABEL_17:
  *((_BYTE *)this + 308) = v12;
  *((_DWORD *)this + 76) = v6;
  v13 = WebCore::MathMLOperatorDictionary::search(v6, *((_DWORD *)this + 79), 1);
  if ((v14 & 0xFF00000000) != 0)
  {
    v15 = HIDWORD(v13);
    v16 = HIWORD(v13);
    *((_WORD *)this + 160) = *((_WORD *)this + 160) & 0x12 | v14;
  }
  else
  {
    *((_WORD *)this + 160) &= 0x12u;
    LOWORD(v15) = 5;
    LOWORD(v16) = 5;
  }
  *((_WORD *)this + 156) = v15;
  *((_WORD *)this + 157) = v16;
  if ((*(unsigned int (**)(WebCore::RenderMathMLFencedOperator *))(*(_QWORD *)this + 1952))(this)
    && (*(unsigned int (**)(WebCore::RenderMathMLFencedOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 32))
  {
    if ((*(unsigned int (**)(WebCore::RenderMathMLFencedOperator *))(*(_QWORD *)this + 1944))(this))
      v17 = 2;
    else
      v17 = 3;
  }
  else
  {
    v17 = (*(unsigned int (**)(WebCore::RenderMathMLFencedOperator *))(*(_QWORD *)this + 1952))(this)
       && ((*(uint64_t (**)(WebCore::RenderMathMLFencedOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 32) & 1) == 0&& (*(unsigned int (**)(WebCore::RenderMathMLFencedOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 4)&& (*(_BYTE *)(*((_QWORD *)this + 13) + 238) & 0x10) == 0;
  }
  *((_DWORD *)this + 59) = (*(uint64_t (**)(WebCore::RenderMathMLFencedOperator *))(*(_QWORD *)this + 1952))(this);
  v18 = (WebCore::RenderMathMLFencedOperator *)((char *)this + 236);
  *((_DWORD *)v18 + 1) = v17;
  WebCore::MathOperator::reset(v18, (WebCore::Font **)((char *)v18 - 156));
}

void WebCore::RenderMathMLFencedOperator::~RenderMathMLFencedOperator(WebCore::RenderMathMLFencedOperator *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 40) = 0;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::RenderMathMLOperator::updateMathOperator(WebCore::RenderMathMLOperator *this)
{
  int v2;
  WebCore::MathOperator *v3;

  if ((*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this)
    && (*(unsigned int (**)(WebCore::RenderMathMLOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 32))
  {
    if ((*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1944))(this))
      v2 = 2;
    else
      v2 = 3;
  }
  else
  {
    v2 = (*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this)
      && ((*(uint64_t (**)(WebCore::RenderMathMLOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 32) & 1) == 0
      && (*(unsigned int (**)(WebCore::RenderMathMLOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 4)&& (*(_BYTE *)(*((_QWORD *)this + 13) + 238) & 0x10) == 0;
  }
  *((_DWORD *)this + 59) = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this);
  v3 = (WebCore::RenderMathMLOperator *)((char *)this + 236);
  *((_DWORD *)v3 + 1) = v2;
  WebCore::MathOperator::reset(v3, (WebCore::Font **)((char *)v3 - 156));
}

uint64_t WebCore::RenderMathMLFencedOperator::leadingSpace(WebCore::RenderMathMLFencedOperator *this, float a2)
{
  int v3;
  _DWORD v4[2];

  v3 = 0;
  v4[0] = 4;
  LOWORD(a2) = *((_WORD *)this + 156);
  *(float *)&v4[1] = (float)LODWORD(a2);
  return WebCore::toUserUnits((uint64_t)v4, (WebCore::RenderMathMLFencedOperator *)((char *)this + 80), &v3);
}

uint64_t WebCore::RenderMathMLFencedOperator::trailingSpace(WebCore::RenderMathMLFencedOperator *this, float a2)
{
  int v3;
  _DWORD v4[2];

  v3 = 0;
  v4[0] = 4;
  LOWORD(a2) = *((_WORD *)this + 157);
  *(float *)&v4[1] = (float)LODWORD(a2);
  return WebCore::toUserUnits((uint64_t)v4, (WebCore::RenderMathMLFencedOperator *)((char *)this + 80), &v3);
}

void WebCore::RenderMathMLFraction::~RenderMathMLFraction(WebCore::RenderMathMLFraction *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLFraction::defaultLineThickness(WebCore::RenderMathMLFraction *this, void *a2)
{
  WebCore::Font *v3;
  WebCore::OpenTypeMathData *v4;
  WebCore::OpenTypeMathData *v5;
  void *v6;
  float v7;
  double v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  double v15;

  v3 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), a2);
  ++*(_DWORD *)v3;
  v4 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v3);
  if (v4)
  {
    v5 = v4;
    ++*(_DWORD *)v4;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v4);
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFFLL;
    }
    else if (v8 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v5, v6);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    v15 = (float)(*(float *)(*((_QWORD *)this + 14) + 204) * 0.05) * 64.0;
    if (v15 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFFLL;
    }
    else if (v15 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v15;
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Font::~Font((WTF **)v3);
    WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v9;
}

uint64_t WebCore::RenderMathMLFraction::fractionParameters(WebCore::RenderMathMLFraction *this, void *a2)
{
  int v3;
  WebCore::Font *v4;
  WebCore::OpenTypeMathData *v5;
  WebCore::OpenTypeMathData *v6;
  float v7;
  double v8;
  uint64_t v9;
  float v10;
  double v11;
  int v12;
  float v13;
  double v14;
  int v15;
  void *v16;
  float v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  WebCore *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t *v54;
  void *v55;
  int v56;
  unsigned int v57;
  const WebCore::RenderStyle *v58;
  unsigned int v59;
  const WebCore::RenderStyle *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v72;
  void *v73;
  WTF *v74;
  void *v75;
  double v76;
  int v77;
  int v78;

  v3 = *(_DWORD *)(*((_QWORD *)this + 13) + 236);
  v4 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), a2);
  ++*(_DWORD *)v4;
  v5 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v4);
  if (v5)
  {
    v6 = v5;
    ++*(_DWORD *)v5;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v5);
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      LODWORD(v9) = 0x7FFFFFFF;
    }
    else if (v8 <= -2147483650.0)
    {
      LODWORD(v9) = 0x80000000;
    }
    else
    {
      LODWORD(v9) = (int)v8;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v11 = v10 * 64.0;
    if (v11 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v11 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v11;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v14 = v13 * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v18 = v17 * 64.0;
    if (v18 >= 2147483650.0)
    {
      v19 = 0x7FFFFFFF;
    }
    else if (v18 <= -2147483650.0)
    {
      v19 = 0x80000000;
    }
    else
    {
      v19 = (int)v18;
    }
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v6, v16);
      WTF::fastFree(v74, v75);
    }
    else
    {
      --*(_DWORD *)v6;
    }
    goto LABEL_16;
  }
  v76 = (float)(*(float *)(*((_QWORD *)this + 14) + 204) * 0.05) * 64.0;
  if ((v3 & 0x100000) == 0)
  {
    if (v76 < 2147483650.0)
    {
      if (v76 > -2147483650.0)
        v77 = (int)v76;
      else
        v77 = 0x80000000;
    }
    else
    {
      v77 = 0x7FFFFFFF;
    }
    v9 = 3 * v77;
    v15 = 0;
    v19 = 0;
    if (HIDWORD(v9) != (int)v9 >> 31)
      LODWORD(v9) = (v77 >> 31) + 0x7FFFFFFF;
LABEL_101:
    v12 = v9;
    goto LABEL_16;
  }
  if (v76 < 2147483650.0)
  {
    v15 = 0;
    v19 = 0;
    if (v76 <= -2147483650.0)
    {
      LODWORD(v9) = 0x80000000;
      v12 = 0x80000000;
      goto LABEL_16;
    }
    LODWORD(v9) = (int)v76;
    goto LABEL_101;
  }
  v15 = 0;
  v19 = 0;
  LODWORD(v9) = 0x7FFFFFFF;
  v12 = 0x7FFFFFFF;
LABEL_16:
  v20 = *((unsigned int *)this + 16);
  if (v20 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v21 = *(_QWORD *)((v20 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0)
  {
    if ((*(_BYTE *)(v21 + 45) & 4) != 0)
      v22 = *(int **)((v20 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    else
      v22 = 0;
  }
  else
  {
    v22 = 0;
  }
  v23 = (*(uint64_t (**)(int *))(*(_QWORD *)v22 + 1480))(v22);
  if (((v22[31] >> 13) & 6) - 2 < 4)
    v24 = v22 + 40;
  else
    v24 = v22 + 41;
  v25 = 0;
  v26 = (*v24 + (*v24 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v23 & 0xFF00000000) != 0)
    v26 = v23;
  if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                             + 8)
                 + 45) & 4) != 0)
    v27 = *(unsigned int **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                           + 8);
  else
    v27 = 0;
  v28 = v27[31];
  v29 = ((unsigned __int16)v28 >> 13) - 1;
  if (v29 <= 4)
    v25 = qword_1969FD5B0[v29];
  v30 = v27[v25 + 42];
  v31 = v26 + v30;
  if (__OFADD__(v26, v30))
    v31 = (v26 >> 31) + 0x7FFFFFFF;
  if (((v28 >> 13) & 6) - 2 < 4)
    v32 = v27 + 40;
  else
    v32 = v27 + 41;
  v33 = *v32;
  v34 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v27 + 1112))(v27, 0);
  v35 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v27 + 1120))(v27, 0);
  v36 = v34 + v35;
  if (__OFADD__(v34, v35))
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  v37 = __OFADD__(v33, v36);
  v38 = v33 + v36;
  if (v37)
    v38 = (v33 >> 31) + 0x7FFFFFFF;
  v37 = __OFSUB__(v38, v31);
  v39 = v38 - v31;
  if (v37)
    v39 = (v38 >> 31) + 0x7FFFFFFF;
  v40 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if ((*(_BYTE *)(v40 + 45) & 4) == 0)
    v40 = 0;
  v41 = *(unsigned int *)(v40 + 47) | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32);
  if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0)
  {
    if ((*(_BYTE *)(v42 + 45) & 4) != 0)
      v43 = (int *)v42;
    else
      v43 = 0;
  }
  else
  {
    v43 = 0;
  }
  v44 = (*(uint64_t (**)(int *))(*(_QWORD *)v43 + 1480))(v43);
  if (((v43[31] >> 13) & 6) - 2 < 4)
    v45 = v43 + 40;
  else
    v45 = v43 + 41;
  v46 = 0;
  v47 = (WebCore::RenderMathMLFraction *)((char *)this + 80);
  v48 = (*v45 + (*v45 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v44 & 0xFF00000000) != 0)
    v48 = v44;
  v49 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if ((*(_BYTE *)(v49 + 45) & 4) == 0)
    v49 = 0;
  v50 = *(_QWORD *)((*(unsigned int *)(v49 + 47) | ((unint64_t)*(unsigned __int8 *)(v49 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v50 + 45) & 4) == 0)
    v50 = 0;
  v51 = ((unsigned __int16)*(_DWORD *)(v50 + 124) >> 13) - 1;
  if (v51 <= 4)
    v46 = qword_1969FD5B0[v51];
  v52 = *(_DWORD *)(v50 + 4 * v46 + 168);
  v53 = v48 + v52;
  if (__OFADD__(v48, v52))
    v53 = (v48 >> 31) + 0x7FFFFFFF;
  v54 = WebCore::MathMLFractionElement::lineThickness(*(WebCore::MathMLFractionElement **)(*((_QWORD *)this + 3) + 8));
  v78 = WebCore::RenderMathMLFraction::defaultLineThickness(this, v55);
  v56 = WebCore::toUserUnits((uint64_t)v54, (WebCore::RenderMathMLFraction *)((char *)this + 80), &v78);
  v57 = v56 & ~(v56 >> 31);
  v59 = WebCore::axisHeight(v47, v58);
  v61 = v59 + (v57 >> 1);
  if (__OFADD__(v59, v57 >> 1))
    v61 = (v59 >> 31) + 0x7FFFFFFF;
  v62 = v61 + v9;
  if (__OFADD__(v61, (_DWORD)v9))
    v62 = (v61 >> 31) + 0x7FFFFFFF;
  v63 = v57 >> 1;
  v64 = v62 + v39;
  if (__OFADD__(v62, v39))
    v64 = (v62 >> 31) + 0x7FFFFFFF;
  v65 = v63 + v12;
  if (__OFADD__(v63, v12))
    v65 = 0x7FFFFFFF;
  v66 = v65 + v53;
  if (__OFADD__(v65, v53))
    v66 = (v65 >> 31) + 0x7FFFFFFF;
  v67 = WebCore::axisHeight(v47, v60);
  if (__OFSUB__(v66, v67))
    v68 = (v66 >> 31) + 0x7FFFFFFF;
  else
    v68 = v66 - v67;
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Font::~Font((WTF **)v4);
    WTF::fastFree(v72, v73);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  if (v19 <= v68)
    v69 = v68;
  else
    v69 = v19;
  if (v15 <= v64)
    v70 = v64;
  else
    v70 = v15;
  return v70 | (v69 << 32);
}

unint64_t WebCore::RenderMathMLFraction::stackParameters(WebCore::RenderMathMLFraction *this, void *a2)
{
  int v3;
  WebCore::Font *v4;
  WebCore::OpenTypeMathData *v5;
  WebCore::OpenTypeMathData *v6;
  float v7;
  double v8;
  unint64_t v9;
  float v10;
  double v11;
  unsigned int v12;
  void *v13;
  float v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  signed int v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  double v65;
  unint64_t v66;
  int v67;

  v3 = *(_DWORD *)(*((_QWORD *)this + 13) + 236);
  v4 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), a2);
  ++*(_DWORD *)v4;
  v5 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v4);
  if (v5)
  {
    v6 = v5;
    ++*(_DWORD *)v5;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v5);
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      LODWORD(v9) = 0x7FFFFFFF;
    }
    else if (v8 <= -2147483650.0)
    {
      LODWORD(v9) = 0x80000000;
    }
    else
    {
      LODWORD(v9) = (int)v8;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v11 = v10 * 64.0;
    if (v11 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v11 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v11;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v15 = v14 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFFLL;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v6, v13);
      WTF::fastFree(v63, v64);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  else
  {
    v65 = (float)(*(float *)(*((_QWORD *)this + 14) + 204) * 0.05) * 64.0;
    if ((v3 & 0x100000) != 0)
    {
      if (v65 < 2147483650.0)
      {
        if (v65 <= -2147483650.0)
          v67 = 0x80000000;
        else
          v67 = (int)v65;
      }
      else
      {
        v67 = 0x7FFFFFFF;
      }
      v9 = 3 * v67;
      v66 = HIDWORD(v9);
    }
    else
    {
      if (v65 < 2147483650.0)
      {
        if (v65 > -2147483650.0)
          v67 = (int)v65;
        else
          v67 = 0x80000000;
      }
      else
      {
        v67 = 0x7FFFFFFF;
      }
      v9 = 7 * v67;
      v66 = HIDWORD(v9);
    }
    v16 = 0;
    v12 = 0;
    if ((_DWORD)v66 != (int)v9 >> 31)
      LODWORD(v9) = (v67 >> 31) + 0x7FFFFFFF;
  }
  v17 = *((unsigned int *)this + 16);
  if (v17 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v18 = *(_QWORD *)((v17 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0)
  {
    if ((*(_BYTE *)(v18 + 45) & 4) != 0)
      v19 = *(int **)((v17 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    else
      v19 = 0;
  }
  else
  {
    v19 = 0;
  }
  v20 = (*(uint64_t (**)(int *))(*(_QWORD *)v19 + 1480))(v19);
  if (((v19[31] >> 13) & 6) - 2 < 4)
    v21 = v19 + 40;
  else
    v21 = v19 + 41;
  v22 = 0;
  v23 = (*v21 + (*v21 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v20 & 0xFF00000000) != 0)
    v23 = v20;
  if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                             + 8)
                 + 45) & 4) != 0)
    v24 = *(unsigned int **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                           + 8);
  else
    v24 = 0;
  v25 = v24[31];
  v26 = ((unsigned __int16)v25 >> 13) - 1;
  if (v26 <= 4)
    v22 = qword_1969FD5B0[v26];
  v27 = v24[v22 + 42];
  v28 = v23 + v27;
  if (__OFADD__(v23, v27))
    v28 = (v23 >> 31) + 0x7FFFFFFF;
  if (((v25 >> 13) & 6) - 2 < 4)
    v29 = v24 + 40;
  else
    v29 = v24 + 41;
  v30 = *v29;
  v31 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v24 + 1112))(v24, 0);
  v32 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v24 + 1120))(v24, 0);
  v33 = v31 + v32;
  if (__OFADD__(v31, v32))
    v33 = (v31 >> 31) + 0x7FFFFFFF;
  v34 = __OFADD__(v30, v33);
  v35 = v30 + v33;
  if (v34)
    v35 = (v30 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v35, v28))
    v36 = (v35 >> 31) + 0x7FFFFFFF;
  else
    v36 = v35 - v28;
  v37 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if ((*(_BYTE *)(v37 + 45) & 4) == 0)
    v37 = 0;
  v38 = *(unsigned int *)(v37 + 47) | ((unint64_t)*(unsigned __int8 *)(v37 + 51) << 32);
  if (v38 && (v39 = *(_QWORD *)(v38 + 8)) != 0)
  {
    if ((*(_BYTE *)(v39 + 45) & 4) != 0)
      v40 = (int *)v39;
    else
      v40 = 0;
  }
  else
  {
    v40 = 0;
  }
  v41 = (*(uint64_t (**)(int *))(*(_QWORD *)v40 + 1480))(v40);
  if (((v40[31] >> 13) & 6) - 2 < 4)
    v42 = v40 + 40;
  else
    v42 = v40 + 41;
  v43 = 0;
  v44 = (*v42 + (*v42 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v41 & 0xFF00000000) != 0)
    v44 = v41;
  v45 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if ((*(_BYTE *)(v45 + 45) & 4) == 0)
    v45 = 0;
  v46 = *(_QWORD *)((*(unsigned int *)(v45 + 47) | ((unint64_t)*(unsigned __int8 *)(v45 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v46 + 45) & 4) == 0)
    v46 = 0;
  v47 = ((unsigned __int16)*(_DWORD *)(v46 + 124) >> 13) - 1;
  if (v47 <= 4)
    v43 = qword_1969FD5B0[v47];
  v48 = *(_DWORD *)(v46 + 4 * v43 + 168);
  v34 = __OFADD__(v44, v48);
  v49 = v44 + v48;
  if (v34)
    v49 = (v44 >> 31) + 0x7FFFFFFF;
  v50 = v12 - v36;
  if (__OFSUB__(v12, v36))
    v50 = (v12 >> 31) + 0x7FFFFFFF;
  v34 = __OFADD__(v50, (_DWORD)v16);
  v51 = v50 + v16;
  v52 = (v50 >> 31) + 0x7FFFFFFF;
  if (!v34)
    v52 = v51;
  v34 = __OFSUB__(v52, v49);
  v53 = v52 - v49;
  v54 = (v52 >> 31) + 0x7FFFFFFF;
  if (!v34)
    v54 = v53;
  if (v54 < (int)v9)
  {
    v34 = __OFSUB__((_DWORD)v9, v54);
    v55 = v9 - v54;
    if (v34)
      v55 = (v9 >> 31) + 0x7FFFFFFF;
    if (v55 >= 0)
      v56 = v55;
    else
      v56 = v55 + 1;
    v57 = v56 >> 1;
    v34 = __OFADD__(v12, v56 >> 1);
    v58 = v12 + (v56 >> 1);
    if (v34)
      v12 = (v12 >> 31) + 0x7FFFFFFF;
    else
      v12 = v58;
    v34 = __OFADD__((_DWORD)v16, v57);
    v59 = (v16 + v57);
    if (v34)
      v16 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v16 = v59;
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Font::~Font((WTF **)v4);
    WTF::fastFree(v61, v62);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v12 | (unint64_t)(v16 << 32);
}

uint64_t WebCore::RenderMathMLFraction::unembellishedOperator(WebCore::RenderMathMLFraction *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v1 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v1 + 45) & 4) != 0
    && (v2 = *(unsigned int *)(v1 + 47), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32))
    && (v3 = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) + 8)) != 0
    && (*(_BYTE *)(v3 + 45) & 4) != 0
    && ((v4 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) == 0
     || (v5 = *(_QWORD *)(v4 + 8)) == 0
     || (*(_BYTE *)(v5 + 45) & 4) == 0)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1))
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1920))(v1);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::RenderMathMLFraction::computePreferredLogicalWidths(WebCore::RenderMathMLFraction *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  WebCore::RenderBox *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::RenderBox *v16;
  WebCore::RenderBox *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;

  *((_QWORD *)this + 23) = 0;
  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 45) & 4) != 0)
      {
        v3 = *(unsigned int *)(v2 + 47);
        if (v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
        {
          v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
          if (v4)
          {
            if ((*(_BYTE *)(v4 + 45) & 4) != 0)
            {
              v5 = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32);
              if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (*(_BYTE *)(v6 + 45) & 4) == 0)
              {
                v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 416))(v2);
                if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this
                                                                                                + 68) << 32))
                                           + 8)
                               + 45) & 4) != 0)
                  v8 = *(WebCore::RenderBox **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                                              + 8);
                else
                  v8 = 0;
                v9 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v8);
                if (__OFADD__(v7, v9))
                  v10 = (v7 >> 31) + 0x7FFFFFFF;
                else
                  v10 = v7 + v9;
                v11 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                                + 8);
                if ((*(_BYTE *)(v11 + 45) & 4) == 0)
                  v11 = 0;
                v12 = *(_QWORD *)((*(unsigned int *)(v11 + 47) | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
                                + 8);
                if ((*(_BYTE *)(v12 + 45) & 4) != 0)
                  v13 = v12;
                else
                  v13 = 0;
                v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 416))(v13);
                v15 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                                + 8);
                if ((*(_BYTE *)(v15 + 45) & 4) == 0)
                  v15 = 0;
                v16 = *(WebCore::RenderBox **)((*(unsigned int *)(v15 + 47) | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32))
                                             + 8);
                if ((*((_BYTE *)v16 + 45) & 4) != 0)
                  v17 = v16;
                else
                  v17 = 0;
                v18 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v17);
                if (__OFADD__(v14, v18))
                  v19 = (v14 >> 31) + 0x7FFFFFFF;
                else
                  v19 = v14 + v18;
                v20 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 1064))(this);
                v21 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 1072))(this);
                if (__OFADD__(v20, v21))
                  v22 = (v20 >> 31) + 0x7FFFFFFF;
                else
                  v22 = v20 + v21;
                v23 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 976))(this);
                if (__OFADD__(v22, v23))
                  v24 = (v22 >> 31) + 0x7FFFFFFF;
                else
                  v24 = v22 + v23;
                v25 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 984))(this);
                v26 = v24 + v25;
                if (__OFADD__(v24, v25))
                  v26 = (v24 >> 31) + 0x7FFFFFFF;
                if (v10 <= v19)
                  v27 = v19;
                else
                  v27 = v10;
                v28 = __OFADD__(v27, v26);
                v29 = v27 + v26;
                v30 = (v27 >> 31) + 0x7FFFFFFF;
                if (v28)
                  v29 = v30;
                *((_DWORD *)this + 46) = v29;
                *((_DWORD *)this + 47) = v29;
              }
            }
          }
        }
      }
    }
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

uint64_t WebCore::RenderMathMLFraction::horizontalOffset(unsigned int *a1, _DWORD *a2, int a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t result;
  int v33;
  int v34;
  BOOL v35;

  if (((a1[31] >> 13) & 6) - 2 < 4)
    v6 = a1 + 41;
  else
    v6 = a1 + 40;
  v7 = *v6;
  v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 1064))(a1);
  v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 1072))(a1);
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 + v9;
  v11 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 976))(a1);
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 + v11;
  v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 984))(a1);
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  v15 = __OFSUB__(v7, v14);
  v16 = v7 - v14;
  if (v15)
    v16 = (v7 >> 31) + 0x7FFFFFFF;
  v18 = a2[30];
  v17 = a2[31];
  v19 = v17 >> 13;
  v20 = (unsigned __int16)v17 >> 13;
  v21 = (v18 >> 26) & 1;
  v22 = v21;
  if ((v20 - 2) < 2)
    goto LABEL_45;
  if (v20 == 4)
  {
    v22 = (v18 & 0x4000000) == 0;
LABEL_45:
    if (v22)
      v23 = 2;
    else
      v23 = 0;
    goto LABEL_20;
  }
  v22 = (v18 >> 26) & 1;
  if (v20 == 5)
    goto LABEL_45;
  if ((v18 & 0x4000000) != 0)
    v23 = 1;
  else
    v23 = 3;
LABEL_20:
  v24 = a2[v23 + 42];
  if ((v19 & 6u) - 2 < 4)
    v25 = a2 + 41;
  else
    v25 = a2 + 40;
  v26 = *v25;
  v15 = __OFADD__(v24, v26);
  v27 = v24 + v26;
  v28 = (v24 >> 31) + 0x7FFFFFFF;
  if (v15)
    v27 = v28;
  if ((v20 - 2) >= 2)
  {
    if (v20 == 4)
    {
      v21 = (v18 & 0x4000000) == 0;
    }
    else if (v20 != 5)
    {
      v29 = 3;
      if ((v18 & 0x4000000) == 0)
        v29 = 1;
      goto LABEL_30;
    }
  }
  v35 = v21 == 0;
  v29 = 2;
  if (!v35)
    v29 = 0;
LABEL_30:
  v30 = a2[v29 + 42];
  v15 = __OFADD__(v27, v30);
  v31 = v27 + v30;
  if (v15)
    v31 = (v27 >> 31) + 0x7FFFFFFF;
  if (a3)
  {
    if (a3 == 2)
    {
      result = v16 - v31;
      if (__OFSUB__(v16, v31))
        return (v16 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v15 = __OFSUB__(v16, v31);
    v33 = v16 - v31;
    v34 = (v16 >> 31) + 0x7FFFFFFF;
    if (!v15)
      v34 = v33;
    return (v34 / 2);
  }
  return result;
}

uint64_t WebCore::RenderMathMLFraction::fractionAscent(WebCore::RenderMathMLFraction *this)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t *v14;
  void *v15;
  int v16;
  unsigned int v17;
  int v18;
  void *v19;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v37;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0)
  {
    if ((*(_BYTE *)(v2 + 45) & 4) != 0)
      v3 = *(int **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 1480))(v3);
  v5 = 0;
  v6 = v3 + 40;
  if (((v3[31] >> 13) & 6) - 2 >= 4)
    v6 = v3 + 41;
  v7 = (*v6 + (*v6 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v4 & 0xFF00000000) != 0)
    v7 = v4;
  v8 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if ((*(_BYTE *)(v8 + 45) & 4) == 0)
    v8 = 0;
  v9 = ((unsigned __int16)*(_DWORD *)(v8 + 124) >> 13) - 1;
  if (v9 <= 4)
    v5 = qword_1969FD5B0[v9];
  v10 = *(_DWORD *)(v8 + 4 * v5 + 168);
  v29 = __OFADD__(v7, v10);
  v11 = v7 + v10;
  v12 = (v7 >> 31) + 0x7FFFFFFF;
  if (v29)
    v13 = v12;
  else
    v13 = v11;
  v14 = WebCore::MathMLFractionElement::lineThickness(*(WebCore::MathMLFractionElement **)(*((_QWORD *)this + 3) + 8));
  v37 = WebCore::RenderMathMLFraction::defaultLineThickness(this, v15);
  v16 = WebCore::toUserUnits((uint64_t)v14, (WebCore::RenderMathMLFraction *)((char *)this + 80), &v37);
  v17 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 1048))(this);
  v18 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 960))(this);
  v20 = v17 + v18;
  v21 = __OFADD__(v17, v18);
  if (v16 < 1)
  {
    if (v21)
      v20 = (v17 >> 31) + 0x7FFFFFFF;
    v29 = __OFADD__(v20, v13);
    v32 = v20 + v13;
    v33 = (v20 >> 31) + 0x7FFFFFFF;
    if (v29)
      v34 = v33;
    else
      v34 = v32;
    v35 = WebCore::RenderMathMLFraction::stackParameters(this, v19);
    v29 = __OFADD__(v34, v35);
    v30 = v34 + v35;
    v31 = (v34 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v22 = v16 & ~(v16 >> 31);
    if (v21)
      v23 = (v17 >> 31) + 0x7FFFFFFF;
    else
      v23 = v17 + v18;
    v24 = WebCore::axisHeight((WebCore::RenderMathMLFraction *)((char *)this + 80), (const WebCore::RenderStyle *)v19);
    v26 = v24 + (v22 >> 1);
    if (__OFADD__(v24, v22 >> 1))
      v26 = (v24 >> 31) + 0x7FFFFFFF;
    v27 = WebCore::RenderMathMLFraction::fractionParameters(this, v25);
    v28 = v13 + v27;
    if (__OFADD__(v13, v27))
      v28 = (v13 >> 31) + 0x7FFFFFFF;
    if (v26 > v28)
      v28 = v26;
    v29 = __OFADD__(v23, v28);
    v30 = v23 + v28;
    v31 = (v23 >> 31) + 0x7FFFFFFF;
  }
  if (v29)
    return v31;
  else
    return v30;
}

void WebCore::RenderMathMLFraction::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int *v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  int *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int v98;
  unint64_t *v99;
  void *v100;
  void *v101;
  unint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  WebCore::RenderObject *v124;
  WebCore::RenderObject *v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  WebCore::RenderObject *v132;
  WebCore::RenderObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  _DWORD *v154;
  uint64_t v155;
  WebCore::RenderLayerScrollableArea *v156;
  BOOL v157;
  int v158[6];

  if ((a2 & 1) == 0 && (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) != 0)
    return;
  v3 = *(unsigned int *)(a1 + 64);
  if (!(v3 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    || (v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)) == 0
    || (*(_BYTE *)(v4 + 45) & 4) == 0
    || (v5 = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) == 0
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (*(_BYTE *)(v6 + 45) & 4) == 0
    || (v7 = *(unsigned int *)(v6 + 47) | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (*(_BYTE *)(v8 + 45) & 4) != 0)
  {
    WebCore::RenderMathMLBlock::layoutInvalidMarkup((WebCore::RenderMathMLBlock *)a1);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  *(_WORD *)(a1 + 69) &= ~0x200u;
  if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)
                 + 45) & 4) != 0)
    v9 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  else
    v9 = 0;
  if ((*(_BYTE *)(v9 + 20) & 0xF8) != 0)
  {
    v10 = *(_QWORD *)(v9 + 32);
    if (v10
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v9);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 688))(v9);
    }
  }
  v12 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v12 + 45) & 4) == 0)
    v12 = 0;
  v13 = *(_QWORD *)((*(unsigned int *)(v12 + 47) | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v13 + 45) & 4) != 0)
    v14 = v13;
  else
    v14 = 0;
  if ((*(_BYTE *)(v14 + 20) & 0xF8) != 0)
  {
    v15 = *(_QWORD *)(v14 + 32);
    if (v15
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v16 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v14);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 688))(v14);
    }
  }
  v17 = *(unsigned int *)(a1 + 64);
  v18 = v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (v18)
  {
    v19 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v19)
    {
      if ((*(_BYTE *)(v19 + 45) & 4) != 0)
      {
        do
        {
          WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v19, (const WebCore::RenderBlock *)a1);
          v20 = *(unsigned int *)(v19 + 47);
          if (!(v20 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32)))
            break;
          v19 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32)) + 8);
          if (!v19)
            break;
        }
        while ((*(_BYTE *)(v19 + 45) & 4) != 0);
        v18 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
      }
    }
  }
  v21 = *(_QWORD *)(v18 + 8);
  if ((*(_BYTE *)(v21 + 45) & 4) == 0)
    v21 = 0;
  v23 = *(_DWORD *)(v21 + 120);
  v22 = *(_DWORD *)(v21 + 124);
  v24 = v22 >> 13;
  v25 = (unsigned __int16)v22 >> 13;
  v26 = (v23 >> 26) & 1;
  v27 = v26;
  if ((v25 - 2) < 2)
    goto LABEL_261;
  if (v25 == 4)
  {
    v27 = (v23 & 0x4000000) == 0;
LABEL_261:
    if (v27)
      v28 = 2;
    else
      v28 = 0;
    goto LABEL_45;
  }
  v27 = (v23 >> 26) & 1;
  if (v25 == 5)
    goto LABEL_261;
  if ((v23 & 0x4000000) != 0)
    v28 = 1;
  else
    v28 = 3;
LABEL_45:
  v29 = *(_DWORD *)(v21 + 168 + 4 * v28);
  if ((v24 & 6u) - 2 < 4)
    v30 = (int *)(v21 + 164);
  else
    v30 = (int *)(v21 + 160);
  v31 = *v30;
  v32 = __OFADD__(v29, v31);
  v33 = v29 + v31;
  if (v32)
    v33 = (v29 >> 31) + 0x7FFFFFFF;
  if ((v25 - 2) >= 2)
  {
    if (v25 == 4)
    {
      v26 = (v23 & 0x4000000) == 0;
    }
    else if (v25 != 5)
    {
      v34 = 3;
      if ((v23 & 0x4000000) == 0)
        v34 = 1;
      goto LABEL_54;
    }
  }
  v157 = v26 == 0;
  v34 = 2;
  if (!v157)
    v34 = 0;
LABEL_54:
  v35 = *(_DWORD *)(v21 + 168 + 4 * v34);
  v36 = v33 + v35;
  if (__OFADD__(v33, v35))
    v36 = (v33 >> 31) + 0x7FFFFFFF;
  v37 = *(_QWORD *)((*(unsigned int *)(v21 + 47) | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v37 + 45) & 4) != 0)
    v38 = (int *)v37;
  else
    v38 = 0;
  v40 = v38[30];
  v39 = v38[31];
  v41 = v39 >> 13;
  v42 = (unsigned __int16)v39 >> 13;
  v43 = (v40 >> 26) & 1;
  v44 = v43;
  if ((v42 - 2) < 2)
    goto LABEL_269;
  if (v42 == 4)
  {
    v44 = (v40 & 0x4000000) == 0;
LABEL_269:
    if (v44)
      v45 = 2;
    else
      v45 = 0;
    goto LABEL_65;
  }
  v44 = (v40 >> 26) & 1;
  if (v42 == 5)
    goto LABEL_269;
  if ((v40 & 0x4000000) != 0)
    v45 = 1;
  else
    v45 = 3;
LABEL_65:
  v46 = v38 + 42;
  v47 = v38[v45 + 42];
  if ((v41 & 6u) - 2 < 4)
    v48 = v38 + 41;
  else
    v48 = v38 + 40;
  v49 = *v48;
  v32 = __OFADD__(v47, v49);
  v50 = v47 + v49;
  if (v32)
    v50 = (v47 >> 31) + 0x7FFFFFFF;
  if ((v42 - 2) < 2)
    goto LABEL_273;
  if (v42 == 4)
  {
    v43 = (v40 & 0x4000000) == 0;
LABEL_273:
    v157 = v43 == 0;
    v51 = 2;
    if (!v157)
      v51 = 0;
    goto LABEL_74;
  }
  if (v42 == 5)
    goto LABEL_273;
  v51 = 3;
  if ((v40 & 0x4000000) == 0)
    v51 = 1;
LABEL_74:
  v52 = v46[v51];
  v53 = v50 + v52;
  if (__OFADD__(v50, v52))
    v53 = (v50 >> 31) + 0x7FFFFFFF;
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  v56 = v54 + v55;
  if (__OFADD__(v54, v55))
    v56 = (v54 >> 31) + 0x7FFFFFFF;
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v58 = v56 + v57;
  if (__OFADD__(v56, v57))
    v58 = (v56 >> 31) + 0x7FFFFFFF;
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v60 = v58 + v59;
  if (__OFADD__(v58, v59))
    v60 = (v58 >> 31) + 0x7FFFFFFF;
  if (v36 <= v53)
    v61 = v53;
  else
    v61 = v36;
  v32 = __OFADD__(v61, v60);
  v62 = v61 + v60;
  if (v32)
    v62 = (v61 >> 31) + 0x7FFFFFFF;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v63 = (int *)(a1 + 164);
  else
    v63 = (int *)(a1 + 160);
  *v63 = v62;
  v64 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v65 = (*(uint64_t (**)(uint64_t))(v64 + 1072))(a1);
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  }
  else
  {
    v65 = (*(uint64_t (**)(uint64_t))(v64 + 1064))(a1);
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  }
  v67 = v65 + v66;
  if (__OFADD__(v65, v66))
    v67 = (v65 >> 31) + 0x7FFFFFFF;
  v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  v70 = v68 + v69;
  if (__OFADD__(v68, v69))
    v70 = (v68 >> 31) + 0x7FFFFFFF;
  v71 = 0;
  if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)
                 + 45) & 4) != 0)
    v72 = *(_DWORD **)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  else
    v72 = 0;
  v73 = ((unsigned __int16)v72[31] >> 13) - 1;
  if (v73 <= 4)
    v71 = qword_1969FD5B0[v73];
  v74 = v72[v71 + 42];
  v75 = v70 + v74;
  if (__OFADD__(v70, v74))
    v75 = (v70 >> 31) + 0x7FFFFFFF;
  v76 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v72 + 1096))(v72);
  v77 = v67 + v76;
  if (__OFADD__(v67, v76))
    v77 = (v67 >> 31) + 0x7FFFFFFF;
  v78 = *(unsigned int *)(a1 + 64);
  if (v78 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)
    && (v79 = *(_QWORD *)((v78 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)) != 0)
  {
    if ((*(_BYTE *)(v79 + 45) & 4) != 0)
      v80 = *(_DWORD **)((v78 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    else
      v80 = 0;
  }
  else
  {
    v80 = 0;
  }
  v81 = WebCore::MathMLFractionElement::cachedFractionAlignment(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), &WebCore::MathMLNames::numalignAttr, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 132));
  v82 = WebCore::RenderMathMLFraction::horizontalOffset((unsigned int *)a1, v80, v81);
  v83 = v77 + v82;
  if (__OFADD__(v77, v82))
    v83 = (v77 >> 31) + 0x7FFFFFFF;
  v84 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v84 + 45) & 4) == 0)
    v84 = 0;
  *(_QWORD *)(v84 + 152) = v83 | (unint64_t)(v75 << 32);
  v85 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v85 + 45) & 4) == 0)
    v85 = 0;
  v86 = *(unsigned int *)(v85 + 47) | ((unint64_t)*(unsigned __int8 *)(v85 + 51) << 32);
  if (v86 && (v87 = *(_QWORD *)(v86 + 8)) != 0)
  {
    if ((*(_BYTE *)(v87 + 45) & 4) != 0)
      v88 = (int *)v87;
    else
      v88 = 0;
  }
  else
  {
    v88 = 0;
  }
  v89 = (*(uint64_t (**)(int *))(*(_QWORD *)v88 + 1480))(v88);
  if (((v88[31] >> 13) & 6) - 2 < 4)
    v90 = v88 + 40;
  else
    v90 = v88 + 41;
  v91 = 0;
  v92 = (*v90 + (*v90 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v89 & 0xFF00000000) != 0)
    v92 = v89;
  v93 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v93 + 45) & 4) == 0)
    v93 = 0;
  v94 = *(_QWORD *)((*(unsigned int *)(v93 + 47) | ((unint64_t)*(unsigned __int8 *)(v93 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v94 + 45) & 4) == 0)
    v94 = 0;
  v95 = ((unsigned __int16)*(_DWORD *)(v94 + 124) >> 13) - 1;
  if (v95 <= 4)
    v91 = qword_1969FD5B0[v95];
  v96 = *(_DWORD *)(v94 + 4 * v91 + 168);
  v97 = v92 + v96;
  if (__OFADD__(v92, v96))
    v97 = (v92 >> 31) + 0x7FFFFFFF;
  v98 = WebCore::RenderMathMLFraction::fractionAscent((WebCore::RenderMathMLFraction *)a1);
  v99 = WebCore::MathMLFractionElement::lineThickness(*(WebCore::MathMLFractionElement **)(*(_QWORD *)(a1 + 24) + 8));
  v158[0] = WebCore::RenderMathMLFraction::defaultLineThickness((WebCore::RenderMathMLFraction *)a1, v100);
  if ((int)WebCore::toUserUnits((uint64_t)v99, (WebCore::RenderStyle *)(a1 + 80), v158) < 1)
    v102 = WebCore::RenderMathMLFraction::stackParameters((WebCore::RenderMathMLFraction *)a1, v101);
  else
    v102 = WebCore::RenderMathMLFraction::fractionParameters((WebCore::RenderMathMLFraction *)a1, v101);
  v103 = HIDWORD(v102) - v97;
  if (__OFSUB__(HIDWORD(v102), v97))
    v103 = (HIDWORD(v102) >> 31) + 0x7FFFFFFF;
  v32 = __OFADD__(v98, v103);
  v104 = v98 + v103;
  if (v32)
    v104 = (v98 >> 31) + 0x7FFFFFFF;
  v105 = 0;
  v106 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v106 + 45) & 4) == 0)
    v106 = 0;
  v107 = *(_QWORD *)((*(unsigned int *)(v106 + 47) | ((unint64_t)*(unsigned __int8 *)(v106 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v107 + 45) & 4) != 0)
    v108 = (_DWORD *)v107;
  else
    v108 = 0;
  v109 = ((unsigned __int16)v108[31] >> 13) - 1;
  if (v109 <= 4)
    v105 = qword_1969FD5B0[v109];
  v110 = v108[v105 + 42];
  v111 = v104 + v110;
  if (__OFADD__(v104, v110))
    v111 = (v104 >> 31) + 0x7FFFFFFF;
  v112 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v108 + 1096))(v108);
  v113 = v67 + v112;
  if (__OFADD__(v67, v112))
    v113 = (v67 >> 31) + 0x7FFFFFFF;
  v114 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v114 + 45) & 4) == 0)
    v114 = 0;
  v115 = *(unsigned int *)(v114 + 47) | ((unint64_t)*(unsigned __int8 *)(v114 + 51) << 32);
  if (v115 && (v116 = *(_QWORD *)(v115 + 8)) != 0)
  {
    if ((*(_BYTE *)(v116 + 45) & 4) != 0)
      v117 = (_DWORD *)v116;
    else
      v117 = 0;
  }
  else
  {
    v117 = 0;
  }
  v118 = WebCore::MathMLFractionElement::cachedFractionAlignment(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), &WebCore::MathMLNames::denomalignAttr, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 140));
  v119 = WebCore::RenderMathMLFraction::horizontalOffset((unsigned int *)a1, v117, v118);
  v120 = v113 + v119;
  if (__OFADD__(v113, v119))
    v120 = (v113 >> 31) + 0x7FFFFFFF;
  v121 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v121 + 45) & 4) == 0)
    v121 = 0;
  v122 = *(_QWORD *)((*(unsigned int *)(v121 + 47) | ((unint64_t)*(unsigned __int8 *)(v121 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v122 + 45) & 4) == 0)
    v122 = 0;
  *(_QWORD *)(v122 + 152) = v120 | (unint64_t)(v111 << 32);
  v123 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (v123)
  {
    v124 = (*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                 + 8)
                     + 45) & 4) != 0
         ? *(WebCore::RenderObject **)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                     + 8)
         : 0;
    if ((*((_DWORD *)v124 + 5) & 0x1800000) == 0x1000000)
    {
      v125 = WebCore::RenderObject::containingBlock(v124);
      if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                 + 8)
                     + 45) & 4) != 0)
        v126 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      else
        v126 = 0;
      if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v126);
      if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v126);
      if ((*(_BYTE *)(v126 + 52) & 7) != 1 || (*(_BYTE *)(v126 + 53) & 2) == 0)
      {
        if ((*(_BYTE *)(v126 + 20) & 0xF8) != 0)
          *((_DWORD *)v125 + 5) |= 0x40u;
        {
          WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
          unk_1ECE91358 = 0u;
        }
        WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v125, (WebCore::RenderBox *)v126);
      }
      v123 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
    }
  }
  v127 = *(_QWORD *)(v123 + 8);
  v128 = *(_BYTE *)(v127 + 45) & 4;
  if (v128)
    v129 = v127;
  else
    v129 = 0;
  v130 = *(unsigned int *)(v129 + 47) | ((unint64_t)*(unsigned __int8 *)(v129 + 51) << 32);
  if (v130)
  {
    v131 = *(_QWORD *)(v130 + 8);
    v132 = (*(_BYTE *)(v131 + 45) & 4) != 0 ? (WebCore::RenderObject *)v131 : 0;
    if ((*((_DWORD *)v132 + 5) & 0x1800000) == 0x1000000)
    {
      v133 = WebCore::RenderObject::containingBlock(v132);
      v134 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if ((*(_BYTE *)(v134 + 45) & 4) == 0)
        v134 = 0;
      v135 = *(_QWORD *)((*(unsigned int *)(v134 + 47) | ((unint64_t)*(unsigned __int8 *)(v134 + 51) << 32)) + 8);
      if ((*(_BYTE *)(v135 + 45) & 4) != 0)
        v136 = v135;
      else
        v136 = 0;
      if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v136);
      if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v136);
      if ((*(_BYTE *)(v136 + 52) & 7) != 1 || (*(_BYTE *)(v136 + 53) & 2) == 0)
      {
        if ((*(_BYTE *)(v136 + 20) & 0xF8) != 0)
          *((_DWORD *)v133 + 5) |= 0x40u;
        {
          WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
          unk_1ECE91358 = 0u;
        }
        WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v133, (WebCore::RenderBox *)v136);
      }
      v127 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      v128 = *(_BYTE *)(v127 + 45) & 4;
    }
  }
  if (!v128)
    v127 = 0;
  v137 = *(unsigned int *)(v127 + 47) | ((unint64_t)*(unsigned __int8 *)(v127 + 51) << 32);
  if (v137)
  {
    v138 = *(_QWORD *)(v137 + 8);
    if (v138 && (*(_BYTE *)(v138 + 45) & 4) == 0)
      v138 = 0;
  }
  else
  {
    v138 = 0;
  }
  if (((*(_DWORD *)(v138 + 124) >> 13) & 6u) - 2 < 4)
    v139 = (unsigned int *)(v138 + 160);
  else
    v139 = (unsigned int *)(v138 + 164);
  v140 = *v139;
  v141 = *(_QWORD *)(v137 + 8);
  if ((*(_BYTE *)(v141 + 45) & 4) == 0)
    v141 = 0;
  v142 = ((unsigned __int16)*(_DWORD *)(v141 + 124) >> 13) - 1;
  if (v142 > 4)
    v143 = 2;
  else
    v143 = qword_1969FD588[v142];
  v144 = *(_DWORD *)(v141 + 4 * v143 + 168);
  v145 = v140 + v144;
  if (__OFADD__(v140, v144))
    v145 = (v140 >> 31) + 0x7FFFFFFF;
  v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v148 = v146 + v147;
  if (__OFADD__(v146, v147))
    v148 = (v146 >> 31) + 0x7FFFFFFF;
  v32 = __OFADD__(v145, v148);
  v149 = v145 + v148;
  if (v32)
    v149 = (v145 >> 31) + 0x7FFFFFFF;
  v32 = __OFADD__((_DWORD)v111, v149);
  v150 = v111 + v149;
  if (v32)
    v150 = (v111 >> 31) + 0x7FFFFFFF;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v151 = (unsigned int *)(a1 + 160);
  else
    v151 = (unsigned int *)(a1 + 164);
  *v151 = v150;
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v153 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v153 > 5 || ((1 << v153) & 0x2A) == 0)
      && (v154 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v154)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v154 + 2), (_QWORD *)a1, (uint64_t)v158);
    }
    else
    {
      v155 = *(_QWORD *)(a1 + 144);
      if (v155)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v156 = *(WebCore::RenderLayerScrollableArea **)(v155 + 264);
        if (v156)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v156);
      }
    }
  }
  v152 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v152;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v152 & 0xFFDFFE07;
}

uint64_t WebCore::RenderMathMLFraction::paint(WebCore::RenderMathMLFraction *this, WebCore::GraphicsContext **a2, const WebCore::LayoutPoint *a3)
{
  unint64_t *v6;
  void *v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  const WebCore::RenderStyle *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  signed int v35;
  int v36;
  signed int v37;
  WebCore::GraphicsContext *v38;
  WebCore::GraphicsContext *v39;
  float v40;
  WebCore::GraphicsContext *v41;
  int v42;
  int v43;
  WebCore::GraphicsContext *v44;
  void *v45;
  WebCore::GraphicsContext *v46;
  char *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  signed int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  float v66[2];
  unint64_t v67;

  WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)a2, a3);
  v6 = WebCore::MathMLFractionElement::lineThickness(*(WebCore::MathMLFractionElement **)(*((_QWORD *)this + 3) + 8));
  LODWORD(v67) = WebCore::RenderMathMLFraction::defaultLineThickness(this, v7);
  v8 = WebCore::toUserUnits((uint64_t)v6, (WebCore::RenderMathMLFraction *)((char *)this + 80), (int *)&v67);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2[10] + 40))(a2[10]);
  if ((result & 1) == 0 && *((_WORD *)a2 + 8) == 8 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0)
  {
    v10 = *((_DWORD *)this + 30);
    if ((v10 & 0x30) == 0)
    {
      v11 = *((unsigned int *)this + 16);
      if (v11 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
      {
        v12 = *(_QWORD *)((v11 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 45) & 4) != 0)
          {
            v13 = *(unsigned int *)(v12 + 47) | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                if ((*(_BYTE *)(v14 + 45) & 4) != 0)
                {
                  v15 = *(unsigned int *)(v14 + 47) | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32);
                  if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
                  {
                    if ((*(_BYTE *)(v16 + 45) & 4) != 0 || v8 <= 0)
                      return result;
                  }
                  else if (v8 < 1)
                  {
                    return result;
                  }
                  v17 = *(_QWORD *)this;
                  if ((v10 & 0x4000000) != 0)
                  {
                    v18 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(v17 + 1072))(this);
                    v19 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 984))(this);
                  }
                  else
                  {
                    v18 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(v17 + 1064))(this);
                    v19 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 976))(this);
                  }
                  v20 = v18 + v19;
                  if (__OFADD__(v18, v19))
                    v20 = (v18 >> 31) + 0x7FFFFFFF;
                  v22 = *((_DWORD *)this + 38);
                  v21 = *((_DWORD *)this + 39);
                  v23 = *(_DWORD *)a3 + v22;
                  if (__OFADD__(*(_DWORD *)a3, v22))
                    v23 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
                  v24 = *((_DWORD *)a3 + 1);
                  v25 = v24 + v21;
                  if (__OFADD__(v24, v21))
                    v25 = (v24 >> 31) + 0x7FFFFFFF;
                  v26 = WebCore::RenderMathMLFraction::fractionAscent(this);
                  v28 = WebCore::axisHeight((WebCore::RenderMathMLFraction *)((char *)this + 80), v27);
                  v29 = v26 - v28;
                  if (__OFSUB__(v26, v28))
                    v29 = (v26 >> 31) + 0x7FFFFFFF;
                  v30 = v23 + v20;
                  if (__OFADD__(v23, v20))
                    v30 = (v23 >> 31) + 0x7FFFFFFF;
                  v31 = v8 & ~(v8 >> 31);
                  v32 = __OFADD__(v25, v29);
                  v33 = v25 + v29;
                  if (v32)
                    v33 = (v25 >> 31) + 0x7FFFFFFF;
                  if (v30 >= 0)
                    v34 = v30;
                  else
                    v34 = v30 + 63;
                  v35 = v30 - (v34 & 0xFFFFFFC0) + 32;
                  if (v33 >= 0)
                    v36 = v33;
                  else
                    v36 = v33 + 63;
                  v37 = v33 - (v36 & 0xFFFFFFC0) + 32;
                  v38 = a2[10];
                  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v38 + 96))(v38, 1);
                  v39 = a2[10];
                  v40 = (float)v31 * 0.015625;
                  if (*((float *)v39 + 47) != v40)
                  {
                    *((float *)v39 + 47) = v40;
                    *((_DWORD *)v39 + 46) |= 8u;
                  }
                  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v39 + 88))(v39, (uint64_t)v39 + 8);
                  v41 = a2[10];
                  if (*((_BYTE *)v41 + 193) != 1)
                  {
                    *((_BYTE *)v41 + 193) = 1;
                    *((_DWORD *)v41 + 46) |= 0x10u;
                  }
                  v42 = (v35 >> 6) + (v34 >> 6);
                  v43 = (v37 >> 6) + (v36 >> 6);
                  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v41 + 88))(v41, (uint64_t)v41 + 8);
                  v44 = a2[10];
                  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, &v67);
                  WebCore::GraphicsContext::setStrokeColor(v44, (const WebCore::Color *)&v67);
                  if ((v67 & 0x8000000000000) != 0)
                  {
                    v63 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v64 = __ldaxr(v63);
                      v65 = v64 - 1;
                    }
                    while (__stlxr(v65, v63));
                    if (!v65)
                    {
                      atomic_store(1u, v63);
                      WTF::fastFree((WTF *)v63, v45);
                    }
                  }
                  v46 = a2[10];
                  *(float *)&v67 = (float)v42;
                  *((float *)&v67 + 1) = (float)v43;
                  v47 = (char *)this + 164;
                  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
                    v47 = (char *)this + 160;
                  v48 = *(_DWORD *)v47;
                  v49 = v42 << 6;
                  if (v42 < -33554432)
                    v49 = 0x80000000;
                  if (v42 > 0x1FFFFFF)
                    v49 = 0x7FFFFFFF;
                  v32 = __OFADD__(v49, v48);
                  v50 = v49 + v48;
                  v51 = (v49 >> 31) + 0x7FFFFFFF;
                  if (v32)
                    v52 = v51;
                  else
                    v52 = v50;
                  v53 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 1064))(this);
                  v54 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 1072))(this);
                  if (__OFADD__(v53, v54))
                    v55 = (v53 >> 31) + 0x7FFFFFFF;
                  else
                    v55 = v53 + v54;
                  v56 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 976))(this);
                  if (__OFADD__(v55, v56))
                    v57 = (v55 >> 31) + 0x7FFFFFFF;
                  else
                    v57 = v55 + v56;
                  v58 = (*(uint64_t (**)(WebCore::RenderMathMLFraction *))(*(_QWORD *)this + 984))(this);
                  v60 = v57 + v58;
                  if (__OFADD__(v57, v58))
                    v60 = (v57 >> 31) + 0x7FFFFFFF;
                  v32 = __OFSUB__(v52, v60);
                  v61 = v52 - v60;
                  if (v32)
                    v61 = (v52 >> 31) + 0x7FFFFFFF;
                  v62 = v43 << 6;
                  if (v43 < -33554432)
                    v62 = 0x80000000;
                  if (v43 > 0x1FFFFFF)
                    v62 = 0x7FFFFFFF;
                  v66[0] = (float)(((int)(v61 - (v59 & 0xFFFFFFC0) + 32) >> 6) + v61 / 64);
                  v66[1] = (float)(((int)(v62 - (v59 & 0xFFFFFFC0) + 32) >> 6) + v62 / 64);
                  (*(void (**)(WebCore::GraphicsContext *, unint64_t *, float *))(*(_QWORD *)v46
                                                                                                  + 152))(v46, &v67, v66);
                  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v38 + 104))(v38, 1);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::RenderMathMLFraction::firstLineBaseline(WebCore::RenderMathMLFraction *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t LineBaseline;
  uint64_t v9;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v1 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v1 + 45) & 4) != 0
    && (v2 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && (*(_BYTE *)(v3 + 45) & 4) != 0
    && ((v4 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) == 0
     || (v5 = *(_QWORD *)(v4 + 8)) == 0
     || (*(_BYTE *)(v5 + 45) & 4) == 0))
  {
    v6 = roundf((float)(int)WebCore::RenderMathMLFraction::fractionAscent(this) * 0.015625) * 64.0;
    if (v6 >= 2147483650.0)
    {
      v7 = 0;
      v9 = 0x100000000;
      LODWORD(LineBaseline) = 0x7FFFFFFF;
    }
    else
    {
      v7 = 0;
      if (v6 <= -2147483650.0)
      {
        v9 = 0x100000000;
        LODWORD(LineBaseline) = 0x80000000;
      }
      else
      {
        LODWORD(LineBaseline) = (int)v6;
        v9 = 0x100000000;
      }
    }
  }
  else
  {
    LineBaseline = WebCore::RenderBlock::firstLineBaseline(this);
    v7 = LineBaseline & 0xFFFFFF0000000000;
    v9 = LineBaseline & 0xFF00000000;
  }
  return v9 | v7 | LineBaseline;
}

void WebCore::RenderMathMLMath::~RenderMathMLMath(WebCore::RenderMathMLMath *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::RenderMathMLMath::layoutBlock(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  signed int v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WebCore::RenderLayerScrollableArea *v78;
  int v79;
  int v80;
  int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::RenderLayerScrollableArea *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE v95[20];
  __int128 v96;
  char v97;

  if ((*(_QWORD *)(a1 + 96) & 0x1FLL) != 1)
  {
    WebCore::RenderMathMLRow::layoutBlock(a1, a2);
    return;
  }
  if ((a2 & 1) != 0 || (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
    *(_WORD *)(a1 + 69) &= ~0x200u;
    v4 = *(unsigned __int8 *)(a1 + 68);
    for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v7 + 47))
    {
      v6 = i | (v4 << 32);
      if (!v6)
        break;
      v7 = *(_QWORD *)(v6 + 8);
      if (!v7 || (*(_BYTE *)(v7 + 45) & 4) == 0)
        break;
      WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v7, (const WebCore::RenderBlock *)a1);
      v4 = *(unsigned __int8 *)(v7 + 51);
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v10 = v8 + v9;
    if (__OFADD__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    v14 = v10 + v13;
    if (__OFADD__(v10, v13))
      v14 = (v10 >> 31) + 0x7FFFFFFF;
    v15 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v15 = 1352;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v15))(a1);
    v17 = v16 << 6;
    if (v16 < -33554432)
      v17 = 0x80000000;
    if (v16 > 0x1FFFFFF)
      v17 = 0x7FFFFFFF;
    v18 = __OFADD__(v14, v17);
    LODWORD(v19) = v14 + v17;
    if (v18)
      LODWORD(v19) = (v14 >> 31) + 0x7FFFFFFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      goto LABEL_161;
    v20 = (_DWORD *)(a1 + 164);
LABEL_26:
    *v20 = v19;
    v94 = 0;
    v93 = 0;
    WebCore::RenderMathMLRow::stretchVerticalOperatorsAndLayoutChildren((WebCore::RenderMathMLRow *)a1);
    WebCore::RenderMathMLRow::getContentBoundingBox(a1, (WebCore::LayoutUnit *)&v94, (WebCore::LayoutUnit *)((char *)&v93 + 4), (WebCore::LayoutUnit *)&v93);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v21 = (unsigned int *)(a1 + 164);
    else
      v21 = (unsigned int *)(a1 + 160);
    WebCore::RenderMathMLRow::layoutRowItems(a1, *v21, HIDWORD(v93));
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
    {
      v22 = (_DWORD *)(a1 + 164);
      v23 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      v22 = (_DWORD *)(a1 + 160);
      v23 = *(_DWORD *)(a1 + 160);
    }
    if (v94 >= (int)v23)
    {
      *v22 = v94;
    }
    else
    {
      v24 = v23 - v94;
      if (__OFSUB__(v23, v94))
        v24 = (v23 >> 31) + 0x7FFFFFFF;
      if ((v24 + 1) >= 3)
      {
        v25 = v24 / 2;
        v26 = (*(_BYTE *)(a1 + 123) & 4) != 0 ? -v25 : v25;
        v27 = *(unsigned int *)(a1 + 64);
        v19 = v27 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
        if (v19)
        {
          v28 = *(_QWORD *)((v27 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
          if (v28)
          {
            v29 = *(_BYTE *)(v28 + 45);
            if ((v29 & 4) != 0)
            {
              while (1)
              {
                v30 = *(_DWORD *)(v28 + 20);
                if ((v30 & 0x800) == 0 && (v30 & 0x1800000) != 0x1000000)
                {
                  if ((v30 & 0x200) == 0)
                    goto LABEL_45;
                  if ((v30 & 0x8000) != 0)
                  {
                    if ((v29 & 0x10) == 0)
                    {
                      __break(0xC471u);
LABEL_160:
                      __break(1u);
LABEL_161:
                      v20 = (_DWORD *)(a1 + 160);
                      goto LABEL_26;
                    }
                    v61 = *(_QWORD *)(v28 + 144);
                    if (v61)
                    {
                      if ((*(_BYTE *)(v61 + 25) & 8) != 0)
                        goto LABEL_45;
                    }
                  }
                  v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 528)
                                                                   + 8)
                                                       + 288)
                                           + 476);
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 528)
                                                        + 8)
                                            + 288)
                                + 476))
                  {
LABEL_45:
                    v32 = 0;
                    v19 &= 0xFFFFFFFFFFFFFF00;
                    v33 = *(_DWORD *)(v28 + 152);
                    v31 = 1;
                  }
                  else
                  {
                    v19 = *(_QWORD *)(v28 + 152);
                    v2 = *(_QWORD *)(v28 + 160);
                    v32 = 1;
                    v33 = v19;
                  }
                  v18 = __OFADD__(v33, v26);
                  v34 = v33 + v26;
                  v35 = (v33 >> 31) + 0x7FFFFFFF;
                  if (!v18)
                    v35 = v34;
                  *(_DWORD *)(v28 + 152) = v35;
                  if (v32)
                  {
                    v37 = *(_DWORD *)(v28 + 152);
                    v36 = *(_DWORD *)(v28 + 156);
                    v38 = *(_QWORD *)(v28 + 160);
                    if ((int)v37 >= (int)v19)
                      v39 = v19;
                    else
                      v39 = v37;
                    v40 = HIDWORD(v19);
                    if ((int)v36 >= SHIDWORD(v19))
                      v41 = HIDWORD(v19);
                    else
                      v41 = v36;
                    v18 = __OFADD__((_DWORD)v19, (_DWORD)v2);
                    v42 = v19 + v2;
                    v43 = (v19 >> 31) + 0x7FFFFFFF;
                    if (!v18)
                      v43 = v42;
                    v18 = __OFADD__(v37, (_DWORD)v38);
                    v44 = v37 + v38;
                    v45 = (v37 >> 31) + 0x7FFFFFFF;
                    if (!v18)
                      v45 = v44;
                    if ((int)v43 <= v45)
                      v43 = v45;
                    v18 = __OFADD__((_DWORD)v40, HIDWORD(v2));
                    v46 = v40 + HIDWORD(v2);
                    v47 = (v40 >> 31) + 0x7FFFFFFF;
                    if (v18)
                      v46 = v47;
                    v48 = HIDWORD(v38);
                    v18 = __OFADD__(v36, (_DWORD)v48);
                    v49 = v36 + v48;
                    v50 = (v36 >> 31) + 0x7FFFFFFF;
                    if (!v18)
                      v50 = v49;
                    if (v46 > v50)
                      v50 = v46;
                    v18 = __OFSUB__(v43, (_DWORD)v39);
                    v51 = v43 - v39;
                    LODWORD(v19) = (v43 >> 31) + 0x7FFFFFFF;
                    if (v18)
                      v19 = v19;
                    else
                      v19 = v51;
                    v18 = __OFSUB__(v50, (_DWORD)v41);
                    v52 = v50 - v41;
                    LODWORD(v53) = (v50 >> 31) + 0x7FFFFFFF;
                    if (v18)
                      v53 = v53;
                    else
                      v53 = v52;
                    if (v31)
                      goto LABEL_160;
                    v2 = v19 | (v53 << 32);
                    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                    + 1944);
                    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8) + 40) + 8)
                                   + 3382))
                    {
                      v55 = *(_QWORD *)(v54 + 248);
                      v56 = *(unsigned int *)(v55 + 508);
                      if ((_DWORD)v56 && (v56 = *(_QWORD *)(*(_QWORD *)(v55 + 496) + 8 * v56 - 8)) != 0)
                      {
                        v57 = *(_DWORD *)(v56 + 64);
                        LODWORD(v56) = *(_DWORD *)(v56 + 68);
                      }
                      else
                      {
                        v57 = 0;
                      }
                      v18 = __OFADD__((_DWORD)v39, v57);
                      v58 = v39 + v57;
                      if (v18)
                        v58 = (v39 >> 31) + 0x7FFFFFFF;
                      v18 = __OFADD__((_DWORD)v41, (_DWORD)v56);
                      v59 = v41 + v56;
                      if (v18)
                        v59 = (v41 >> 31) + 0x7FFFFFFF;
                      *(_QWORD *)&v96 = __PAIR64__(v59, v58);
                      *((_QWORD *)&v96 + 1) = v2;
                      v97 = 1;
                      v95[0] = 0;
                      v95[16] = 0;
                      WebCore::RenderObject::issueRepaint(a1, &v96, 1, 0, (uint64_t)v95);
                    }
                    v19 = v39 | (v41 << 32);
                  }
                }
                v60 = *(unsigned int *)(v28 + 47);
                if (v60 | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32))
                {
                  v28 = *(_QWORD *)((v60 | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32)) + 8);
                  if (v28)
                  {
                    v29 = *(_BYTE *)(v28 + 45);
                    if ((v29 & 4) != 0)
                      continue;
                  }
                }
                break;
              }
            }
          }
        }
      }
    }
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v64 = v62 + v63;
    if (__OFADD__(v62, v63))
      v64 = (v62 >> 31) + 0x7FFFFFFF;
    v65 = *(unsigned int *)(a1 + 64);
    if (v65 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v66 = *(_QWORD *)((v65 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v66)
      {
        while ((*(_BYTE *)(v66 + 45) & 4) != 0)
        {
          v83 = *(_QWORD *)(v66 + 152);
          v84 = (HIDWORD(v83) >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(HIDWORD(v83), v64))
            v84 = HIDWORD(v83) + v64;
          *(_QWORD *)(v66 + 152) = *(_QWORD *)(v66 + 152) | ((unint64_t)v84 << 32);
          v85 = *(unsigned int *)(v66 + 47) | ((unint64_t)*(unsigned __int8 *)(v66 + 51) << 32);
          if (!v85)
            break;
          v66 = *(_QWORD *)(v85 + 8);
          if (!v66)
            break;
        }
      }
    }
    if (__OFADD__(HIDWORD(v93), (_DWORD)v93))
      v67 = (HIDWORD(v93) >> 31) + 0x7FFFFFFF;
    else
      v67 = HIDWORD(v93) + v93;
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    if (__OFADD__(v68, v69))
      v70 = (v68 >> 31) + 0x7FFFFFFF;
    else
      v70 = v68 + v69;
    v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v73 = v71 + v72;
    if (__OFADD__(v71, v72))
      v73 = (v71 >> 31) + 0x7FFFFFFF;
    v18 = __OFADD__(v70, v73);
    v74 = v70 + v73;
    if (v18)
      v74 = (v70 >> 31) + 0x7FFFFFFF;
    v18 = __OFADD__(v67, v74);
    v75 = v67 + v74;
    if (v18)
      v76 = (v67 >> 31) + 0x7FFFFFFF;
    else
      v76 = v75;
    v77 = *(_QWORD *)(a1 + 144);
    if (!v77)
      goto LABEL_125;
    v78 = *(WebCore::RenderLayerScrollableArea **)(v77 + 264);
    if (!v78)
      goto LABEL_124;
    if ((*(_BYTE *)(a1 + 22) & 1) == 0)
      goto LABEL_124;
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v78 + 400))(v78))
    {
      v88 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v78 + 400))(v78);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 272))(v88) & 1) != 0)
        goto LABEL_124;
    }
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v78 + 392))(v78))
    {
      v92 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v78 + 392))(v78);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 272))(v92) & 1) != 0)
        goto LABEL_124;
    }
    v79 = (*(_DWORD *)(a1 + 96) >> 10) & 7;
    if (v79 == 1)
    {
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 1) != 0)
      {
LABEL_124:
        LODWORD(v77) = 0;
LABEL_125:
        v18 = __OFADD__(v76, (_DWORD)v77);
        v80 = v76 + v77;
        if (v18)
          v80 = (v76 >> 31) + 0x7FFFFFFF;
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
          v81 = (int *)(a1 + 160);
        else
          v81 = (int *)(a1 + 164);
        *v81 = v80;
        WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
        WebCore::RenderBlock::layoutPositionedObjects(a1);
        if ((*(_BYTE *)(a1 + 22) & 1) != 0)
        {
          v86 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
          if ((v86 > 5 || ((1 << v86) & 0x2A) == 0)
            && (v87 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 1944)
                                             + 248)
                                 + 528)) != 0
            && *v87)
          {
            WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v87 + 2), (_QWORD *)a1, (uint64_t)&v96);
          }
          else
          {
            v89 = *(_QWORD *)(a1 + 144);
            if (v89)
            {
              WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
              v90 = *(WebCore::RenderLayerScrollableArea **)(v89 + 264);
              if (v90)
                WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v90);
            }
          }
        }
        v82 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
        *(_DWORD *)(a1 + 20) = v82;
        if ((*(_BYTE *)(a1 + 45) & 2) == 0)
        {
          *(_WORD *)(a1 + 69) &= ~1u;
          *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                           * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                              + 1944)
                                                                                  + 248)
                                                                      + 472));
        }
        *(_DWORD *)(a1 + 20) = v82 & 0xFFDFFE07;
        return;
      }
    }
    else if ((v79 - 3) >= 2)
    {
      goto LABEL_124;
    }
    v91 = WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v78, 0, (*(_DWORD *)(a1 + 20) & 0x1000) == 0);
    if (v91 >= -33554432)
    {
      LODWORD(v77) = v91 << 6;
      if (v91 > 0x1FFFFFF)
        LODWORD(v77) = 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v77) = 0x80000000;
    }
    goto LABEL_125;
  }
}

void WebCore::RenderMathMLMenclose::~RenderMathMLMenclose(WebCore::RenderMathMLMenclose *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

unint64_t WebCore::RenderMathMLMenclose::spaceAroundContent(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  double v32;
  int v33;

  v8 = a3;
  v9 = a2;
  v10 = a1;
  a5.n128_f64[0] = (float)(*(float *)(*(_QWORD *)(a1 + 112) + 204) * 0.05) * 64.0;
  if (a5.n128_f64[0] >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (a5.n128_f64[0] <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)a5.n128_f64[0];
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964A5A28);
  }
  if (!*(_BYTE *)(v12 + 122))
  {
    WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(a1 + 24) + 8), a5, a2, a3, a4);
    if (!*(_BYTE *)(v12 + 122))
      goto LABEL_118;
  }
  v13 = 5 * v11;
  if (HIDWORD(v13) != (int)v13 >> 31)
    LODWORD(v13) = (v11 >> 31) + 0x7FFFFFFF;
  v14 = v13 & ~((int)v13 >> 31);
  if ((*(_WORD *)(v12 + 120) & 0x10) != 0)
    v5 = v14;
  else
    v5 = 0;
  v15 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964A5A48);
  }
  if (!*(_BYTE *)(v15 + 122))
  {
    WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4);
    if (!*(_BYTE *)(v15 + 122))
      goto LABEL_118;
  }
  if ((*(_WORD *)(v15 + 120) & 0x20) != 0)
  {
    v16 = 5 * v11;
    if (HIDWORD(v16) != (int)v16 >> 31)
      LODWORD(v16) = (v11 >> 31) + 0x7FFFFFFF;
    v6 = v16 & ~((int)v16 >> 31);
  }
  else
  {
    v6 = 0;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964A5A68);
  }
  if (!*(_BYTE *)(v17 + 122))
  {
    WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4);
    if (!*(_BYTE *)(v17 + 122))
      goto LABEL_118;
  }
  v7 = 4 * v11;
  v8 = (4 * v11) >> 31;
  if ((*(_WORD *)(v17 + 120) & 0x10) == 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964A5B70);
    }
    if (!*(_BYTE *)(v18 + 122))
    {
      WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4);
      if (!*(_BYTE *)(v18 + 122))
        goto LABEL_118;
    }
  }
  while (1)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (*(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964A5A88);
    }
    if (*(_BYTE *)(v19 + 122)
      || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4), *(_BYTE *)(v19 + 122)))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
      if (*(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x1964A5AA8);
      }
      if (*(_BYTE *)(v20 + 122)
        || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4), *(_BYTE *)(v20 + 122)))
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
        if (*(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1964A5AC8);
        }
        if (*(_BYTE *)(v21 + 122)
          || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4), *(_BYTE *)(v21 + 122)))
        {
          if ((*(_WORD *)(v21 + 120) & 0x40) != 0)
            goto LABEL_41;
          v22 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
          if (*(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x1964A5B90);
          }
          if (!*(_BYTE *)(v22 + 122))
          {
            WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4);
            if (!*(_BYTE *)(v22 + 122))
              goto LABEL_118;
          }
          if ((*(_WORD *)(v22 + 120) & 0x80) != 0)
          {
LABEL_41:
            v23 = v7;
            if (v8 != v11 >> 30)
              v23 = (v11 >> 31) + 0x7FFFFFFF;
            if (v5 <= v23)
              v5 = v23;
            if ((int)v6 <= v23)
              v6 = v23;
            else
              v6 = v6;
          }
          v24 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
          if (*(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x1964A5AE8);
          }
          if (*(_BYTE *)(v24 + 122)
            || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4), *(_BYTE *)(v24 + 122)))
          {
            if ((*(_WORD *)(v24 + 120) & 2) != 0)
            {
              v25 = 10 * v11;
              if ((int)((unint64_t)(640 * v11) >> 32) >> 6 != (10 * v11) >> 31)
                v25 = (v11 >> 31) + 0x7FFFFFFF;
              if (v5 <= v25)
                v5 = v25;
              if (v8 != v11 >> 30)
                v7 = (v11 >> 31) + 0x7FFFFFFF;
              if ((int)v6 <= v7)
                v6 = v7;
              else
                v6 = v6;
            }
            v26 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
            if (*(_QWORD *)(*(_QWORD *)(v26 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1964A5B08);
            }
            if (*(_BYTE *)(v26 + 122)
              || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4), *(_BYTE *)(v26 + 122)))
            {
              if ((*(_WORD *)(v26 + 120) & 4) != 0)
              {
                v27 = 5 * v11;
                if (HIDWORD(v27) != (int)v27 >> 31)
                  LODWORD(v27) = (v11 >> 31) + 0x7FFFFFFF;
                if (v5 <= (int)v27)
                  v5 = v27;
                if ((int)v6 <= (int)v27)
                  v6 = v27;
                else
                  v6 = v6;
              }
              v28 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
              if (*(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
              {
                __break(0xC471u);
                JUMPOUT(0x1964A5B28);
              }
              if (*(_BYTE *)(v28 + 122)
                || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4), *(_BYTE *)(v28 + 122)))
              {
                if ((*(_WORD *)(v28 + 120) & 0x100) != 0)
                  goto LABEL_80;
                v29 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
                if (*(_QWORD *)(*(_QWORD *)(v29 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964A5BB0);
                }
                if (*(_BYTE *)(v29 + 122))
                  break;
                WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)(v10 + 24) + 8), a5, a2, a3, a4);
                if (*(_BYTE *)(v29 + 122))
                  break;
              }
            }
          }
        }
      }
    }
LABEL_118:
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  if ((*(_WORD *)(v29 + 120) & 0x200) == 0)
    goto LABEL_88;
LABEL_80:
  if (v11 >= 0)
    v30 = v11;
  else
    v30 = v11 + 1;
  if (v5 <= v30 >> 1)
    v5 = v30 >> 1;
  if ((int)v6 <= v30 >> 1)
    v6 = (v30 >> 1);
  else
    v6 = v6;
LABEL_88:
  v10 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964A5B48);
  }
  if (!*(_BYTE *)(v10 + 122))
  {
    WebCore::MathMLMencloseElement::parseNotationAttribute((WebCore::MathMLMencloseElement *)v10, a5, a2, a3, a4);
    if (!*(_BYTE *)(v10 + 122))
      goto LABEL_118;
  }
  if ((*(_WORD *)(v10 + 120) & 8) != 0)
  {
    v31 = 3 * v11;
    if ((3 * v11) >> 31 != (unint64_t)(3 * v11) >> 32)
      v31 = (v11 >> 31) + 0x7FFFFFFF;
    v32 = (float)((float)((float)((float)((float)v9 * 0.015625) * 0.41421) + (float)((float)v31 * 0.015625)) * 0.5)
        * 64.0;
    if (v32 >= 2147483650.0)
    {
      v33 = 0x7FFFFFFF;
    }
    else if (v32 <= -2147483650.0)
    {
      v33 = 0x80000000;
    }
    else
    {
      v33 = (int)v32;
    }
    if (v5 <= v33)
      v5 = v33;
    if ((int)v6 <= v33)
      v6 = v33;
    else
      v6 = v6;
  }
  return v5 | (unint64_t)(v6 << 32);
}

uint64_t WebCore::RenderMathMLMenclose::computePreferredLogicalWidths(WebCore::RenderMathMLMenclose *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v6 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v6 + 45) & 4) != 0)
  {
    v7 = 0;
    do
    {
      if ((*(_DWORD *)(v6 + 20) & 0x1800000) != 0x1000000)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 416))(v6);
        v22 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v6);
        v23 = v21 + v22;
        if (__OFADD__(v21, v22))
          v23 = (v21 >> 31) + 0x7FFFFFFF;
        v17 = __OFADD__(v7, v23);
        v24 = v7 + v23;
        if (v17)
          v7 = (v7 >> 31) + 0x7FFFFFFF;
        else
          v7 = v24;
      }
      v25 = *(unsigned int *)(v6 + 47);
      if (!(v25 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
        break;
      v6 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
      if (!v6)
        break;
    }
    while ((*(_BYTE *)(v6 + 45) & 4) != 0);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::RenderMathMLMenclose::spaceAroundContent((uint64_t)this, v7, 0, a5, a2);
  if (__OFADD__((_DWORD)v8, HIDWORD(v8)))
    v9 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v9 = v8 + HIDWORD(v8);
  v10 = (*(uint64_t (**)(WebCore::RenderMathMLMenclose *))(*(_QWORD *)this + 1064))(this);
  v11 = (*(uint64_t (**)(WebCore::RenderMathMLMenclose *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 + v11;
  v13 = (*(uint64_t (**)(WebCore::RenderMathMLMenclose *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v14 = v12 + v13;
  v15 = (*(uint64_t (**)(WebCore::RenderMathMLMenclose *))(*(_QWORD *)this + 984))(this);
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  v17 = __OFADD__(v9, v16);
  v18 = v9 + v16;
  if (v17)
    v18 = (v9 >> 31) + 0x7FFFFFFF;
  v17 = __OFADD__(v7, v18);
  v19 = v7 + v18;
  if (v17)
    v19 = (v7 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 46) = v19;
  *((_DWORD *)this + 47) = v19;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

void WebCore::RenderMathMLMenclose::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  double v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  float v20;
  float v21;
  double v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  float v29;
  double v30;
  unsigned int v31;
  unsigned __int8 *v32;
  int v33;
  float v34;
  float v35;
  double v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  unsigned int v75;
  _DWORD *v76;
  uint64_t v77;
  WebCore::RenderLayerScrollableArea *v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned __int8 *v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  _BYTE v89[24];

  if ((a2 & 1) == 0 && (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) != 0)
    return;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  *(_WORD *)(a1 + 69) &= ~0x200u;
  v3 = *(unsigned __int8 *)(a1 + 68);
  for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v6 + 47))
  {
    v5 = i | (v3 << 32);
    if (!v5)
      break;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || (*(_BYTE *)(v6 + 45) & 4) == 0)
      break;
    WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v6, (const WebCore::RenderBlock *)a1);
    v3 = *(unsigned __int8 *)(v6 + 51);
  }
  v88 = 0;
  v87 = 0;
  WebCore::RenderMathMLRow::stretchVerticalOperatorsAndLayoutChildren((WebCore::RenderMathMLRow *)a1);
  WebCore::RenderMathMLRow::getContentBoundingBox(a1, (WebCore::LayoutUnit *)((char *)&v88 + 4), (WebCore::LayoutUnit *)&v88, (WebCore::LayoutUnit *)&v87);
  WebCore::RenderMathMLRow::layoutRowItems(a1, HIDWORD(v88), v88);
  if (__OFADD__((_DWORD)v88, v87))
    v9 = (v88 >> 31) + 0x7FFFFFFF;
  else
    v9 = (v88 + v87);
  v10 = WebCore::RenderMathMLMenclose::spaceAroundContent(a1, HIDWORD(v88), v9, v7, v8);
  v12 = v11;
  v13 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v13 == 4 || v13 == 2)
    && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1))
  {
    v81 = WebCore::RenderBoxModelObject::borderLeft((WebCore::RenderBoxModelObject *)a1);
    v82 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
    if (__OFADD__(v81, v82))
      v17 = (v81 >> 31) + 0x7FFFFFFF;
    else
      v17 = v81 + v82;
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    v15 = 0.0;
    if ((*(_BYTE *)(v14 + 124) & 0xE) != 0)
    {
      v72 = *(_QWORD *)(v14 + 200);
      if (*(_BYTE *)(v72 + 5) && *(_BYTE *)(v72 + 76) == 4)
      {
        if (*(_BYTE *)(v72 + 78))
          v15 = *(float *)(v72 + 72);
        else
          v15 = (float)*(int *)(v72 + 72);
      }
      else
      {
        v15 = *(float *)(v14 + 120);
      }
    }
    v16 = v15 * 64.0;
    if (v16 >= 2147483650.0)
    {
      v17 = 0x7FFFFFFF;
    }
    else if (v16 <= -2147483650.0)
    {
      v17 = 0x80000000;
    }
    else
    {
      v17 = (int)v16;
    }
  }
  v18 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
  v19 = v18[100];
  if ((v19 & 0xFFFFFFF7) == 3)
  {
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v19 = v18[100];
    v20 = (float)v79 * 0.015625;
  }
  else
  {
    v20 = 0.0;
  }
  switch(v19)
  {
    case 4:
      v21 = *((float *)v18 + 24);
      if (!v18[102])
        v21 = (float)SLODWORD(v21);
      break;
    case 3:
      v73 = *((float *)v18 + 24);
      if (!v18[102])
        v73 = (float)SLODWORD(v73);
      v21 = (float)(v20 * v73) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v18 + 96), v20);
      break;
    default:
      v23 = 0;
      goto LABEL_25;
  }
  v22 = v21 * 64.0;
  if (v22 >= 2147483650.0)
  {
    v23 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147483650.0)
  {
    v23 = 0x80000000;
  }
  else
  {
    v23 = (int)v22;
  }
LABEL_25:
  v24 = __OFADD__(v17, v23);
  v25 = v17 + v23;
  if (v24)
    v25 = (v17 >> 31) + 0x7FFFFFFF;
  v26 = v10 + v25;
  if (__OFADD__((_DWORD)v10, v25))
    v26 = (v10 >> 31) + 0x7FFFFFFF;
  v27 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v27 == 5 || v27 == 3)
    && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1))
  {
    v86 = v26;
    v83 = WebCore::RenderBoxModelObject::borderRight((WebCore::RenderBoxModelObject *)a1);
    v84 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
    v31 = v83 + v84;
    if (__OFADD__(v83, v84))
      v31 = (v83 >> 31) + 0x7FFFFFFF;
    v26 = v86;
  }
  else
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    v29 = 0.0;
    if ((*(_BYTE *)(v28 + 148) & 0xE) != 0)
    {
      v71 = *(_QWORD *)(v28 + 200);
      if (*(_BYTE *)(v71 + 5) && *(_BYTE *)(v71 + 60) == 4)
      {
        if (*(_BYTE *)(v71 + 62))
          v29 = *(float *)(v71 + 56);
        else
          v29 = (float)*(int *)(v71 + 56);
      }
      else
      {
        v29 = *(float *)(v28 + 144);
      }
    }
    v30 = v29 * 64.0;
    if (v30 >= 2147483650.0)
    {
      v31 = 0x7FFFFFFF;
    }
    else if (v30 <= -2147483650.0)
    {
      v31 = 0x80000000;
    }
    else
    {
      v31 = (int)v30;
    }
  }
  v32 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
  v33 = v32[84];
  if ((v33 & 0xFFFFFFF7) == 3)
  {
    v85 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v32 = v85;
    v33 = v85[84];
    v34 = (float)v80 * 0.015625;
  }
  else
  {
    v34 = 0.0;
  }
  switch(v33)
  {
    case 4:
      v35 = *((float *)v32 + 20);
      if (!v32[86])
        v35 = (float)SLODWORD(v35);
      goto LABEL_40;
    case 3:
      v74 = *((float *)v32 + 20);
      if (!v32[86])
        v74 = (float)SLODWORD(v74);
      v35 = (float)(v34 * v74) / 100.0;
      goto LABEL_40;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v32 + 80), v34);
LABEL_40:
      v36 = v35 * 64.0;
      if (v36 >= 2147483650.0)
      {
        v37 = 0x7FFFFFFF;
      }
      else if (v36 <= -2147483650.0)
      {
        v37 = 0x80000000;
      }
      else
      {
        v37 = (int)v36;
      }
      goto LABEL_43;
  }
  v37 = 0;
LABEL_43:
  v24 = __OFADD__(v31, v37);
  v38 = v31 + v37;
  if (v24)
    v38 = (v31 >> 31) + 0x7FFFFFFF;
  v39 = HIDWORD(v10) + v38;
  if (__OFADD__(HIDWORD(v10), v38))
    v39 = (HIDWORD(v10) >> 31) + 0x7FFFFFFF;
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  v42 = v40 + v41;
  if (__OFADD__(v40, v41))
    v42 = (v40 >> 31) + 0x7FFFFFFF;
  v43 = v12 + v42;
  if (__OFADD__((_DWORD)v12, v42))
    v43 = (v12 >> 31) + 0x7FFFFFFF;
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v46 = v44 + v45;
  if (__OFADD__(v44, v45))
    v46 = (v44 >> 31) + 0x7FFFFFFF;
  v47 = HIDWORD(v12) + v46;
  if (__OFADD__(HIDWORD(v12), v46))
    v47 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
  v48 = HIDWORD(v88);
  v49 = v26 + HIDWORD(v88);
  if (__OFADD__(v26, HIDWORD(v88)))
    v49 = (v26 >> 31) + 0x7FFFFFFF;
  v50 = v49 + v39;
  if (__OFADD__(v49, v39))
    v50 = (v49 >> 31) + 0x7FFFFFFF;
  v51 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  if (v51 < 4)
    v52 = (int *)(a1 + 164);
  else
    v52 = (int *)(a1 + 160);
  *v52 = v50;
  v53 = v88;
  v54 = v43 + v88;
  if (__OFADD__(v43, (_DWORD)v88))
    v54 = (v43 >> 31) + 0x7FFFFFFF;
  v55 = v87;
  v56 = v54 + v87;
  if (__OFADD__(v54, v87))
    v56 = (v54 >> 31) + 0x7FFFFFFF;
  v24 = __OFADD__(v56, v47);
  v57 = v56 + v47;
  if (v24)
    v57 = (v56 >> 31) + 0x7FFFFFFF;
  if (v51 < 4)
    v58 = (int *)(a1 + 160);
  else
    v58 = (int *)(a1 + 164);
  *v58 = v57;
  v59 = *(unsigned int *)(a1 + 64);
  if (v59 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v60 = *(_QWORD *)((v59 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v60)
    {
      while ((*(_BYTE *)(v60 + 45) & 4) != 0)
      {
        v65 = *(_DWORD *)(v60 + 152);
        v64 = *(_DWORD *)(v60 + 156);
        v24 = __OFADD__(v65, v26);
        v66 = v65 + v26;
        LODWORD(v67) = (v65 >> 31) + 0x7FFFFFFF;
        if (v24)
          v67 = v67;
        else
          v67 = v66;
        v24 = __OFADD__(v64, v43);
        v68 = v64 + v43;
        LODWORD(v69) = (v64 >> 31) + 0x7FFFFFFF;
        if (v24)
          v69 = v69;
        else
          v69 = v68;
        *(_QWORD *)(v60 + 152) = v67 | (v69 << 32);
        v70 = *(unsigned int *)(v60 + 47) | ((unint64_t)*(unsigned __int8 *)(v60 + 51) << 32);
        if (!v70)
          break;
        v60 = *(_QWORD *)(v70 + 8);
        if (!v60)
          break;
      }
    }
  }
  v24 = __OFADD__(v53, v55);
  v61 = v53 + v55;
  v62 = (v53 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a1 + 208) = v26;
  *(_DWORD *)(a1 + 212) = v43;
  if (!v24)
    v62 = v61;
  *(_DWORD *)(a1 + 216) = v48;
  *(_DWORD *)(a1 + 220) = v62;
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v75 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v75 > 5 || ((1 << v75) & 0x2A) == 0)
      && (v76 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 528)) != 0
      && *v76)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v76 + 2), (_QWORD *)a1, (uint64_t)v89);
    }
    else
    {
      v77 = *(_QWORD *)(a1 + 144);
      if (v77)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v78 = *(WebCore::RenderLayerScrollableArea **)(v77 + 264);
        if (v78)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v78);
      }
    }
  }
  v63 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v63;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v63 & 0xFFDFFE07;
}

uint64_t WebCore::RenderMathMLMenclose::paint(int32x2_t *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::PaintInfo *v4;
  uint64_t result;
  double v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  float v12;
  void *v13;
  void *v14;
  __int32 v15;
  __int32 v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::String *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int32 v36;
  unsigned int v37;
  int v38;
  int v39;
  float32x2_t v40;
  uint64_t v41;
  unsigned __int32 v42;
  __int32 v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned __int32 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int32 v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  float32x2_t v58;
  uint64_t v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  int v62;
  int v63;
  unsigned __int32 v64;
  __int32 v65;
  int v66;
  float32x2_t v67;
  uint64_t v68;
  unsigned __int32 v69;
  uint64_t v70;
  int v71;
  unsigned __int32 v72;
  int v73;
  int v74;
  int v75;
  int v76;
  __int32 v77;
  unsigned int v78;
  int v79;
  float32_t v80;
  uint64_t v81;
  unsigned __int32 v82;
  __int32 v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unsigned __int32 v87;
  int v88;
  int v89;
  int v90;
  int v91;
  __int32 v92;
  unsigned int v93;
  int v94;
  float32_t v95;
  uint64_t v96;
  unsigned __int32 v97;
  unsigned __int32 v98;
  int v99;
  int v100;
  int v101;
  __int32 v102;
  int v103;
  float32_t v104;
  uint64_t v105;
  unsigned __int32 v106;
  unsigned __int32 v107;
  __int32 v108;
  int v109;
  __int32 v110;
  int v111;
  float32x2_t v112;
  uint64_t v113;
  int32x2_t v114;
  __int32 v115;
  unsigned int v116;
  __int32 v117;
  int v118;
  float32x2_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  double v130;
  unsigned __int32 v131;
  uint64_t v132;
  int v133;
  int v134;
  __int32 v135;
  unsigned int v136;
  int v137;
  unsigned __int32 v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  __int32 v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  float32x2_t v153;
  float32x2_t v154;
  int v155;
  double v156;
  unsigned int v157;
  int v158;
  double v159;
  unsigned int v160;
  unsigned __int32 v161;
  int v162;
  int v163;
  unsigned __int32 v164;
  int v165;
  int v166;
  int32x4_t v167;
  __n128 v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned __int32 v175;
  unsigned __int32 v176;
  unsigned __int32 v177;
  float32x2_t v178;
  __int128 v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _OWORD v184[5];
  WebCore::GraphicsContext *v185;
  float32x4_t v186;
  _OWORD v187[4];
  int v188;
  uint64_t v189;

  v4 = a2;
  v189 = *MEMORY[0x1E0C80C00];
  WebCore::RenderBlock::paint((uint64_t)this, a2, a3);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 10) + 40))(*((_QWORD *)v4 + 10));
  if ((result & 1) == 0
    && *((_WORD *)v4 + 8) == 8
    && (*(_BYTE *)(*(_QWORD *)&this[13] + 239) & 4) == 0
    && (this[15].i8[0] & 0x30) == 0)
  {
    v7 = (float)(*(float *)(*(_QWORD *)&this[14] + 204) * 0.05) * 64.0;
    if (v7 >= 2147483650.0)
    {
      v8 = 0x7FFFFFFF;
    }
    else if (v7 <= -2147483650.0)
    {
      v8 = 0x80000000;
    }
    else
    {
      v8 = (int)v7;
    }
    v9 = *((_OWORD *)v4 + 3);
    v184[2] = *((_OWORD *)v4 + 2);
    v184[3] = v9;
    v184[4] = *((_OWORD *)v4 + 4);
    v10 = *((_QWORD *)v4 + 10);
    v185 = (WebCore::GraphicsContext *)v10;
    v11 = *((_OWORD *)v4 + 1);
    v184[0] = *(_OWORD *)v4;
    v184[1] = v11;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, 1);
    v12 = (float)v8 * 0.015625;
    if (*(float *)(v10 + 188) != v12)
    {
      *(float *)(v10 + 188) = v12;
      *(_DWORD *)(v10 + 184) |= 8u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
    if (*(_BYTE *)(v10 + 193) != 1)
    {
      *(_BYTE *)(v10 + 193) = 1;
      *(_DWORD *)(v10 + 184) |= 0x10u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)&this[10], 5, 0, (unint64_t *)v187);
    WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)v187);
    if ((*(_QWORD *)&v187[0] & 0x8000000000000) != 0)
    {
      v169 = (unsigned int *)(*(_QWORD *)&v187[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v170 = __ldaxr(v169);
        v171 = v170 - 1;
      }
      while (__stlxr(v171, v169));
      if (!v171)
      {
        atomic_store(1u, v169);
        WTF::fastFree((WTF *)v169, v13);
      }
    }
    *(_QWORD *)&v187[0] = 0x1104000000000000;
    WebCore::GraphicsContext::setFillColor(v185, (const WebCore::Color *)v187);
    if ((*(_QWORD *)&v187[0] & 0x8000000000000) != 0)
    {
      v172 = (unsigned int *)(*(_QWORD *)&v187[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v173 = __ldaxr(v172);
        v174 = v173 - 1;
      }
      while (__stlxr(v174, v172));
      if (!v174)
      {
        atomic_store(1u, v172);
        WTF::fastFree((WTF *)v172, v14);
      }
    }
    v187[0] = xmmword_1969FD558;
    v187[1] = unk_1969FD568;
    v16 = this[19].i32[0];
    v15 = this[19].i32[1];
    v17 = *((_DWORD *)a3 + 1);
    v18 = __OFADD__(*(_DWORD *)a3, v16);
    v19 = *(_DWORD *)a3 + v16;
    if (v18)
      v19 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    v18 = __OFADD__(v17, v15);
    v20 = v17 + v15;
    if (v18)
      v20 = (v17 >> 31) + 0x7FFFFFFF;
    v187[2] = vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v20, v19)), (float32x2_t)vdup_n_s32(0x3C800000u))), (float64x2_t)0);
    WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)v184, (const WebCore::AffineTransform *)v187);
    v25 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
    if (*(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964A75A4);
    }
    if (!*(_BYTE *)(v25 + 122))
    {
      WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23);
      if (!*(_BYTE *)(v25 + 122))
        goto LABEL_251;
    }
    if ((*(_WORD *)(v25 + 120) & 0x10) != 0)
    {
      v26 = 7 * v8;
      v27 = (v8 >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v26) != (int)v26 >> 31)
        LODWORD(v26) = (v8 >> 31) + 0x7FFFFFFF;
      v28 = this[26].u32[0];
      v29 = this[26].u32[1];
      v18 = __OFSUB__(v28, (int)v26 / 2);
      v30 = v28 - (int)v26 / 2;
      v31 = (v28 >> 31) + 0x7FFFFFFF;
      if (v18)
        v30 = v31;
      v32 = (4 * v8) >> 31;
      if (v32 == v8 >> 30)
        v33 = 4 * v8;
      else
        v33 = (v8 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v29, v33);
      v34 = v29 - v33;
      v35 = (v29 >> 31) + 0x7FFFFFFF;
      if (v18)
        v34 = (v29 >> 31) + 0x7FFFFFFF;
      v36 = this[27].i32[1];
      v18 = __OFADD__(v29, v36);
      v37 = v29 + v36;
      if (v18)
        v37 = v35;
      if (v32 == v8 >> 30)
        v27 = 4 * v8;
      v18 = __OFADD__(v37, v27);
      v38 = v37 + v27;
      if (v18)
        v39 = (v37 >> 31) + 0x7FFFFFFF;
      else
        v39 = v38;
      v188 = 0;
      v40 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v34, v30)), (float32x2_t)vdup_n_s32(0x3C800000u));
      v175 = v40.i32[0];
      *(float32x2_t *)v186.f32 = v40;
      WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
      v186.i32[0] = v175;
      v186.f32[1] = (float)v39 * 0.015625;
      WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
      (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
      if (v188 != -1)
        ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
    }
    v41 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
    if (*(_QWORD *)(*(_QWORD *)(v41 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964A75C4);
    }
    if (!*(_BYTE *)(v41 + 122))
    {
      WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23);
      if (!*(_BYTE *)(v41 + 122))
        goto LABEL_251;
    }
    if ((*(_WORD *)(v41 + 120) & 0x20) == 0)
      goto LABEL_67;
    v42 = this[26].u32[0];
    v43 = this[27].i32[0];
    v18 = __OFADD__(v42, v43);
    v44 = v42 + v43;
    if (v18)
      v44 = (v42 >> 31) + 0x7FFFFFFF;
    v45 = 7 * v8;
    if (HIDWORD(v45) != (int)v45 >> 31)
      goto LABEL_252;
    while (1)
    {
      v18 = __OFADD__(v44, (int)v45 / 2);
      v46 = v44 + (int)v45 / 2;
      if (v18)
        v46 = (v44 >> 31) + 0x7FFFFFFF;
      v47 = this[26].u32[1];
      v48 = 4 * v8;
      v49 = (4 * v8) >> 31;
      v50 = 4 * v8;
      if (v49 != v8 >> 30)
        v50 = (v8 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v47, v50);
      v51 = v47 - v50;
      if (v18)
        v51 = (v47 >> 31) + 0x7FFFFFFF;
      v52 = this[27].i32[1];
      v18 = __OFADD__(v47, v52);
      v53 = v47 + v52;
      v54 = (v47 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v54 = v53;
      if (v49 != v8 >> 30)
        v48 = (v8 >> 31) + 0x7FFFFFFF;
      v18 = __OFADD__(v54, v48);
      v55 = v54 + v48;
      v56 = (v54 >> 31) + 0x7FFFFFFF;
      if (v18)
        v57 = v56;
      else
        v57 = v55;
      v188 = 0;
      v58 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v51, v46)), (float32x2_t)vdup_n_s32(0x3C800000u));
      v176 = v58.i32[0];
      *(float32x2_t *)v186.f32 = v58;
      WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
      v186.i32[0] = v176;
      v186.f32[1] = (float)v57 * 0.015625;
      WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
      (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
      if (v188 != -1)
        ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
LABEL_67:
      v59 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
      if (*(_QWORD *)(*(_QWORD *)(v59 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x1964A75E4);
      }
      if (*(_BYTE *)(v59 + 122)
        || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *(_BYTE *)(v59 + 122)))
      {
        if ((*(_WORD *)(v59 + 120) & 0x400) != 0)
        {
          v60 = this[26].u32[0];
          v61 = this[27].u32[0];
          v62 = v61 - v8;
          if (__OFSUB__(v61, v8))
            v62 = (v61 >> 31) + 0x7FFFFFFF;
          v18 = __OFADD__(v60, v62 / 2);
          v63 = v60 + v62 / 2;
          if (v18)
            v63 = (v60 >> 31) + 0x7FFFFFFF;
          v64 = this[26].u32[1];
          v65 = this[27].i32[1];
          v66 = v64 + v65;
          if (__OFADD__(v64, v65))
            v66 = (v64 >> 31) + 0x7FFFFFFF;
          v188 = 0;
          v67 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v64, v63)), (float32x2_t)vdup_n_s32(0x3C800000u));
          v177 = v67.i32[0];
          *(float32x2_t *)v186.f32 = v67;
          WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
          v186.i32[0] = v177;
          v186.f32[1] = (float)v66 * 0.015625;
          WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
          (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
          if (v188 != -1)
            ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
        }
        v68 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
        if (*(_QWORD *)(*(_QWORD *)(v68 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1964A7604);
        }
        if (*(_BYTE *)(v68 + 122)
          || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *(_BYTE *)(v68 + 122)))
        {
          if ((*(_WORD *)(v68 + 120) & 0x40) != 0)
          {
            v69 = this[26].u32[1];
            v70 = 7 * v8;
            if (HIDWORD(v70) != (int)v70 >> 31)
              LODWORD(v70) = (v8 >> 31) + 0x7FFFFFFF;
            v18 = __OFSUB__(v69, (int)v70 / 2);
            v71 = v69 - (int)v70 / 2;
            if (v18)
              v71 = (v69 >> 31) + 0x7FFFFFFF;
            v72 = this[26].u32[0];
            v73 = 4 * v8;
            v74 = (4 * v8) >> 31;
            v75 = 4 * v8;
            if (v74 != v8 >> 30)
              v75 = (v8 >> 31) + 0x7FFFFFFF;
            v18 = __OFSUB__(v72, v75);
            v76 = v72 - v75;
            if (v18)
              v76 = (v72 >> 31) + 0x7FFFFFFF;
            v77 = this[27].i32[0];
            v18 = __OFADD__(v72, v77);
            v78 = v72 + v77;
            if (v18)
              v78 = (v72 >> 31) + 0x7FFFFFFF;
            if (v74 != v8 >> 30)
              v73 = (v8 >> 31) + 0x7FFFFFFF;
            v79 = v78 + v73;
            if (__OFADD__(v78, v73))
              v79 = (v78 >> 31) + 0x7FFFFFFF;
            v188 = 0;
            v80 = (float)v71 * 0.015625;
            v186.f32[0] = (float)v76 * 0.015625;
            v186.f32[1] = v80;
            WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
            v186.f32[0] = (float)v79 * 0.015625;
            v186.f32[1] = v80;
            WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
            (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
            if (v188 != -1)
              ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
          }
          v81 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
          if (*(_QWORD *)(*(_QWORD *)(v81 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x1964A7624);
          }
          if (*(_BYTE *)(v81 + 122)
            || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *(_BYTE *)(v81 + 122)))
          {
            if ((*(_WORD *)(v81 + 120) & 0x80) != 0)
            {
              v82 = this[26].u32[1];
              v83 = this[27].i32[1];
              v18 = __OFADD__(v82, v83);
              v84 = v82 + v83;
              if (v18)
                v84 = (v82 >> 31) + 0x7FFFFFFF;
              v85 = 7 * v8;
              if (HIDWORD(v85) != (int)v85 >> 31)
                LODWORD(v85) = (v8 >> 31) + 0x7FFFFFFF;
              v18 = __OFADD__(v84, (int)v85 / 2);
              v86 = v84 + (int)v85 / 2;
              if (v18)
                v86 = (v84 >> 31) + 0x7FFFFFFF;
              v87 = this[26].u32[0];
              v88 = 4 * v8;
              v89 = (4 * v8) >> 31;
              v90 = 4 * v8;
              if (v89 != v8 >> 30)
                v90 = (v8 >> 31) + 0x7FFFFFFF;
              v18 = __OFSUB__(v87, v90);
              v91 = v87 - v90;
              if (v18)
                v91 = (v87 >> 31) + 0x7FFFFFFF;
              v92 = this[27].i32[0];
              v18 = __OFADD__(v87, v92);
              v93 = v87 + v92;
              if (v18)
                v93 = (v87 >> 31) + 0x7FFFFFFF;
              if (v89 != v8 >> 30)
                v88 = (v8 >> 31) + 0x7FFFFFFF;
              v94 = v93 + v88;
              if (__OFADD__(v93, v88))
                v94 = (v93 >> 31) + 0x7FFFFFFF;
              v188 = 0;
              v95 = (float)v86 * 0.015625;
              v186.f32[0] = (float)v91 * 0.015625;
              v186.f32[1] = v95;
              WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
              v186.f32[0] = (float)v94 * 0.015625;
              v186.f32[1] = v95;
              WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
              (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
              if (v188 != -1)
                ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
            }
            v96 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
            if (*(_QWORD *)(*(_QWORD *)(v96 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1964A7644);
            }
            if (*(_BYTE *)(v96 + 122)
              || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *(_BYTE *)(v96 + 122)))
            {
              if ((*(_WORD *)(v96 + 120) & 0x800) != 0)
              {
                v97 = this[26].u32[1];
                v98 = this[27].u32[1];
                v99 = v98 - v8;
                if (__OFSUB__(v98, v8))
                  v99 = (v98 >> 31) + 0x7FFFFFFF;
                v18 = __OFADD__(v97, v99 / 2);
                v100 = v97 + v99 / 2;
                if (v18)
                  v100 = (v97 >> 31) + 0x7FFFFFFF;
                v101 = this[26].i32[0];
                v102 = this[27].i32[0];
                v103 = v101 + v102;
                if (__OFADD__(v101, v102))
                  v103 = (v101 >> 31) + 0x7FFFFFFF;
                v188 = 0;
                v104 = (float)v100 * 0.015625;
                v186.f32[0] = (float)v101 * 0.015625;
                v186.f32[1] = v104;
                WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
                v186.f32[0] = (float)v103 * 0.015625;
                v186.f32[1] = v104;
                WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
                (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
                if (v188 != -1)
                  ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
              }
              v105 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
              if (*(_QWORD *)(*(_QWORD *)(v105 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
              {
                __break(0xC471u);
                JUMPOUT(0x1964A7664);
              }
              if (*(_BYTE *)(v105 + 122)
                || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *(_BYTE *)(v105 + 122)))
              {
                if ((*(_WORD *)(v105 + 120) & 0x100) != 0)
                {
                  v106 = this[26].u32[0];
                  v107 = this[26].u32[1];
                  v108 = this[27].i32[1];
                  v18 = __OFADD__(v107, v108);
                  v109 = v107 + v108;
                  if (v18)
                    v109 = (v107 >> 31) + 0x7FFFFFFF;
                  v110 = this[27].i32[0];
                  v111 = v106 + v110;
                  if (__OFADD__(v106, v110))
                    v111 = (v106 >> 31) + 0x7FFFFFFF;
                  v188 = 0;
                  v112 = (float32x2_t)vdup_n_s32(0x3C800000u);
                  *(float32x2_t *)v186.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v109, v106)), v112);
                  WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
                  *(float32x2_t *)v186.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v107, v111)), v112);
                  WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
                  (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
                  if (v188 != -1)
                    ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
                }
                v113 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
                if (*(_QWORD *)(*(_QWORD *)(v113 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964A7684);
                }
                if (*(_BYTE *)(v113 + 122)
                  || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *(_BYTE *)(v113 + 122)))
                {
                  if ((*(_WORD *)(v113 + 120) & 0x200) != 0)
                  {
                    v114 = this[26];
                    v115 = this[27].i32[0];
                    v116 = v114.i32[0] + v115;
                    if (__OFADD__(v114.i32[0], v115))
                      v116 = ((unsigned __int32)v114.i32[0] >> 31) + 0x7FFFFFFF;
                    v117 = this[27].i32[1];
                    v118 = v114.i32[1] + v117;
                    if (__OFADD__(v114.i32[1], v117))
                      v118 = ((unsigned __int32)v114.i32[1] >> 31) + 0x7FFFFFFF;
                    v188 = 0;
                    v119 = (float32x2_t)vdup_n_s32(0x3C800000u);
                    *(float32x2_t *)v186.f32 = vmul_f32(vcvt_f32_s32(v114), v119);
                    WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
                    *(float32x2_t *)v186.f32 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v118, v116)), v119);
                    WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
                    (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)v4 + 10) + 184))(*((_QWORD *)v4 + 10), v187);
                    if (v188 != -1)
                      ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
                  }
                  v4 = *(WebCore::PaintInfo **)(*(_QWORD *)&this[3] + 8);
                  if (*(_QWORD *)(*((_QWORD *)v4 + 12) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1964A76A4);
                  }
                  if (*((_BYTE *)v4 + 122)
                    || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *((_BYTE *)v4 + 122)))
                  {
                    if ((*((_WORD *)v4 + 60) & 4) != 0)
                    {
                      v120 = 3 * v8;
                      if (HIDWORD(v120) != (int)v120 >> 31)
                        LODWORD(v120) = (v8 >> 31) + 0x7FFFFFFF;
                      v179 = *(_OWORD *)this[26].i8;
                      v180 = v120 | ((unint64_t)v120 << 32);
                      v181 = v180;
                      v182 = v180;
                      v183 = v180;
                      v121 = 7 * v8;
                      if (HIDWORD(v121) != (int)v121 >> 31)
                        LODWORD(v121) = (v8 >> 31) + 0x7FFFFFFF;
                      if ((int)v121 >= 0)
                        v122 = v121;
                      else
                        v122 = v121 + 1;
                      v123 = v122 >> 1;
                      v18 = __OFSUB__((_DWORD)v179, v122 >> 1);
                      v124 = v179 - (v122 >> 1);
                      if (v18)
                        v124 = (v179 >> 31) + 0x7FFFFFFF;
                      LODWORD(v179) = v124;
                      v125 = DWORD2(v179) + v123;
                      if (__OFADD__(DWORD2(v179), v123))
                        v125 = (DWORD2(v179) >> 31) + 0x7FFFFFFF;
                      v126 = v125 + v123;
                      if (__OFADD__(v125, v123))
                        v126 = (v125 >> 31) + 0x7FFFFFFF;
                      DWORD2(v179) = v126;
                      v127 = DWORD1(v179) - v123;
                      if (__OFSUB__(DWORD1(v179), v123))
                        v127 = (DWORD1(v179) >> 31) + 0x7FFFFFFF;
                      DWORD1(v179) = v127;
                      v128 = HIDWORD(v179) + v123;
                      if (__OFADD__(HIDWORD(v179), v123))
                        v128 = (HIDWORD(v179) >> 31) + 0x7FFFFFFF;
                      v18 = __OFADD__(v128, v123);
                      v129 = v128 + v123;
                      if (v18)
                        v129 = (v128 >> 31) + 0x7FFFFFFF;
                      HIDWORD(v179) = v129;
                      v188 = 0;
                      WebCore::FloatRoundedRect::FloatRoundedRect((uint64_t)&v186, (uint64_t)&v179);
                      v130 = WebCore::Path::addRoundedRect((WebCore::Path *)v187, (WebCore::FloatRect *)&v186, 0);
                      (*(void (**)(WebCore::GraphicsContext *, _OWORD *, double))(*(_QWORD *)v185 + 184))(v185, v187, v130);
                      if (v188 != -1)
                        ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
                    }
                    v4 = *(WebCore::PaintInfo **)(*(_QWORD *)&this[3] + 8);
                    if (*(_QWORD *)(*((_QWORD *)v4 + 12) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1964A76C4);
                    }
                    if (*((_BYTE *)v4 + 122)
                      || (WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23), *((_BYTE *)v4 + 122)))
                    {
                      if ((*((_WORD *)v4 + 60) & 2) != 0)
                      {
                        v131 = this[26].u32[1];
                        v132 = 7 * v8;
                        v133 = 7 * v8;
                        if ((int)v132 >> 31 != HIDWORD(v132))
                          v133 = (v8 >> 31) + 0x7FFFFFFF;
                        v18 = __OFSUB__(v131, v133 / 2);
                        v134 = v131 - v133 / 2;
                        if (v18)
                          v134 = (v131 >> 31) + 0x7FFFFFFF;
                        v135 = this[27].i32[1];
                        v18 = __OFADD__(v131, v135);
                        v136 = v131 + v135;
                        if (v18)
                          v136 = (v131 >> 31) + 0x7FFFFFFF;
                        if ((int)v132 >> 31 != HIDWORD(v132))
                          LODWORD(v132) = (v8 >> 31) + 0x7FFFFFFF;
                        v137 = v136 + (int)v132 / 2;
                        if (__OFADD__(v136, (int)v132 / 2))
                          v137 = (v136 >> 31) + 0x7FFFFFFF;
                        v138 = this[26].u32[0];
                        v139 = 10 * v8;
                        v140 = (640 * v8) >> 38;
                        v141 = (10 * v8) >> 31;
                        v142 = 10 * v8;
                        if (v141 != (_DWORD)v140)
                          v142 = (v8 >> 31) + 0x7FFFFFFF;
                        v18 = __OFSUB__(v138, v142);
                        v143 = v138 - v142;
                        if (v18)
                          v143 = (v138 >> 31) + 0x7FFFFFFF;
                        if (v8 >= 0)
                          v144 = v8;
                        else
                          v144 = v8 + 1;
                        v145 = v143 + (v144 >> 1);
                        if (__OFADD__(v143, v144 >> 1))
                          v145 = (v143 >> 31) + 0x7FFFFFFF;
                        v146 = this[27].i32[0];
                        v18 = __OFADD__(v138, v146);
                        v147 = v138 + v146;
                        if (v18)
                          v147 = (v138 >> 31) + 0x7FFFFFFF;
                        if ((4 * v8) >> 31 == v8 >> 30)
                          v148 = 4 * v8;
                        else
                          v148 = (v8 >> 31) + 0x7FFFFFFF;
                        v18 = __OFADD__(v147, v148);
                        v149 = v147 + v148;
                        if (v18)
                          v149 = (v147 >> 31) + 0x7FFFFFFF;
                        if (v141 != (_DWORD)v140)
                          v139 = (v8 >> 31) + 0x7FFFFFFF;
                        v8 = v145 + v139;
                        if (__OFADD__(v145, v139))
                          v8 = (v145 >> 31) + 0x7FFFFFFF;
                        v150 = v134 + v137;
                        if (__OFADD__(v134, v137))
                          v150 = (v134 >> 31) + 0x7FFFFFFF;
                        v151 = v150 / 2;
                        v188 = 0;
                        *(float *)&v152 = (float)v134 * 0.015625;
                        v186.f32[0] = (float)v149 * 0.015625;
                        v186.f32[1] = *(float *)&v152;
                        WebCore::Path::moveTo((WebCore::Path *)v187, (const WebCore::FloatPoint *)&v186);
                        v153 = (float32x2_t)vdup_n_s32(0x3C800000u);
                        v154 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v151, v8)), v153);
                        v178 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v137, v145)), v153);
                        v186.i64[0] = __PAIR64__(v152, v178.u32[0]);
                        WebCore::Path::addLineTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186);
                        *(float32x2_t *)v186.f32 = v154;
                        *(float32x2_t *)&v179 = v178;
                        WebCore::Path::addQuadCurveTo((uint64_t)v187, (const WebCore::FloatPoint *)&v186, (const WebCore::FloatPoint *)&v179);
                        (*(void (**)(WebCore::GraphicsContext *, _OWORD *))(*(_QWORD *)v185 + 184))(v185, v187);
                        if (v188 != -1)
                          ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
                      }
                      v4 = *(WebCore::PaintInfo **)(*(_QWORD *)&this[3] + 8);
                      if (*(_QWORD *)(*((_QWORD *)v4 + 12) + 24) != *(_QWORD *)(WebCore::MathMLNames::mencloseTag + 24))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1964A76E4);
                      }
                      if (*((_BYTE *)v4 + 122))
                        break;
                      WebCore::MathMLMencloseElement::parseNotationAttribute(*(WebCore::MathMLMencloseElement **)(*(_QWORD *)&this[3] + 8), v24, v21, v22, v23);
                      if (*((_BYTE *)v4 + 122))
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_251:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_252:
      LODWORD(v45) = (v8 >> 31) + 0x7FFFFFFF;
    }
    if ((*((_WORD *)v4 + 60) & 8) != 0)
    {
      v155 = this[27].i32[0];
      v156 = (float)(v12 + (float)((float)((float)v155 * 0.015625) * 1.4142)) * 64.0;
      if (v156 >= 2147483650.0)
      {
        v157 = 0x7FFFFFFF;
      }
      else if (v156 <= -2147483650.0)
      {
        v157 = 0x80000000;
      }
      else
      {
        v157 = (int)v156;
      }
      v158 = this[27].i32[1];
      v159 = (float)(v12 + (float)((float)((float)v158 * 0.015625) * 1.4142)) * 64.0;
      if (v159 >= 2147483650.0)
      {
        v160 = 0x7FFFFFFF;
      }
      else if (v159 <= -2147483650.0)
      {
        v160 = 0x80000000;
      }
      else
      {
        v160 = (int)v159;
      }
      v161 = this[26].u32[0];
      v18 = __OFSUB__(v157, v155);
      v162 = v157 - v155;
      if (v18)
        v162 = (v157 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v161, v162 / 2);
      v163 = v161 - v162 / 2;
      if (v18)
        v163 = (v161 >> 31) + 0x7FFFFFFF;
      v164 = this[26].u32[1];
      v18 = __OFSUB__(v160, v158);
      v165 = v160 - v158;
      if (v18)
        v165 = (v160 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v164, v165 / 2);
      v166 = v164 - v165 / 2;
      if (v18)
        v166 = (v164 >> 31) + 0x7FFFFFFF;
      v188 = 0;
      v167.i64[0] = __PAIR64__(v166, v163);
      v167.i64[1] = __PAIR64__(v160, v157);
      v186 = vmulq_f32(vcvtq_f32_s32(v167), (float32x4_t)vdupq_n_s32(0x3C800000u));
      v168 = WebCore::Path::addEllipseInRect((WebCore::Path *)v187, (__n128 *)&v186);
      (*(void (**)(WebCore::GraphicsContext *, _OWORD *, __n128))(*(_QWORD *)v185 + 184))(v185, v187, v168);
      if (v188 != -1)
        ((void (*)(float32x4_t *, char *))off_1E343EE10[v188])(&v186, (char *)v187 + 8);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
  }
  return result;
}

uint64_t WebCore::RenderMathMLOperator::updateTokenContent(WebCore::RenderMathMLOperator *this)
{
  uint64_t result;

  WebCore::RenderMathMLToken::updateTokenContent(this);
  result = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 2000))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1960))(this);
  return result;
}

void WebCore::RenderMathMLOperator::~RenderMathMLOperator(WebCore::RenderMathMLOperator *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLOperator::textContent(WebCore::RenderMathMLOperator *this, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringBuilder *a5, __n128 a6)
{
  return *(unsigned int *)WebCore::MathMLOperatorElement::operatorChar(*(WebCore::MathMLOperatorElement **)(*((_QWORD *)this + 3) + 8), a6, a2, a3, a4, a5);
}

BOOL WebCore::RenderMathMLOperator::hasOperatorFlag(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v3 + 150) & a2) != 0)
  {
    WebCore::MathMLOperatorElement::computeOperatorFlag(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
    *(_WORD *)(v3 + 150) &= ~a2;
  }
  return (unsigned __int16)(*(_WORD *)(v3 + 148) & a2) != 0;
}

uint64_t WebCore::RenderMathMLOperator::leadingSpace(WebCore::RenderMathMLOperator *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::MathMLPresentationElement *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  int v18;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_BYTE *)(v2 + 144))
  {
    LOWORD(v3) = *(_WORD *)(v2 + 136);
  }
  else
  {
    v4 = WebCore::MathMLOperatorElement::computeDictionaryProperty(*(WebCore::MathMLOperatorElement **)(*((_QWORD *)this + 3) + 8));
    if (*(_BYTE *)(v2 + 144))
    {
      *(_QWORD *)(v2 + 132) = v4;
      *(_WORD *)(v2 + 140) = v5;
    }
    else
    {
      *(_QWORD *)(v2 + 132) = v4;
      *(_DWORD *)(v2 + 140) = v5;
      *(_BYTE *)(v2 + 144) = 1;
    }
    v3 = HIDWORD(v4);
  }
  v17 = ((unint64_t)COERCE_UNSIGNED_INT((float)(unsigned __int16)v3) << 32) | 4;
  v16 = 0;
  v18 = WebCore::toUserUnits((uint64_t)&v17, (WebCore::RenderMathMLOperator *)((char *)this + 80), &v16);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!*(_BYTE *)(v6 + 160))
  {
    v7 = *(_QWORD *)(v6 + 104);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v7 + 40);
        LODWORD(v10) = *(_DWORD *)(v7 + 52);
        if ((_DWORD)v10)
        {
LABEL_11:
          v10 = v10;
          v11 = (WebCore::MathMLPresentationElement *)(v9 + 8);
          while (1)
          {
            v12 = *((_QWORD *)v11 - 1);
            if (v12 == WebCore::MathMLNames::lspaceAttr
              || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::MathMLNames::lspaceAttr + 24)
              && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::MathMLNames::lspaceAttr + 32))
            {
              goto LABEL_20;
            }
            v11 = (WebCore::MathMLPresentationElement *)((char *)v11 + 16);
            if (!--v10)
            {
              v11 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_20;
            }
          }
        }
      }
      else
      {
        v9 = v7 + 32;
        LODWORD(v10) = v8 >> 5;
        if ((_DWORD)v10)
          goto LABEL_11;
      }
    }
    v11 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_20:
    v13 = WebCore::MathMLPresentationElement::parseMathMLLength(v11, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v6 + 160))
      *(_BYTE *)(v6 + 160) = 1;
    *(_QWORD *)(v6 + 152) = v13;
  }
  v14 = WebCore::toUserUnits(v6 + 152, (WebCore::RenderMathMLOperator *)((char *)this + 80), &v18);
  return v14 & ~(v14 >> 31);
}

uint64_t WebCore::RenderMathMLOperator::trailingSpace(WebCore::RenderMathMLOperator *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::MathMLPresentationElement *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  int v18;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_BYTE *)(v2 + 144))
  {
    LODWORD(v3) = *(unsigned __int16 *)(v2 + 138);
  }
  else
  {
    v4 = WebCore::MathMLOperatorElement::computeDictionaryProperty(*(WebCore::MathMLOperatorElement **)(*((_QWORD *)this + 3) + 8));
    if (*(_BYTE *)(v2 + 144))
    {
      *(_QWORD *)(v2 + 132) = v4;
      *(_WORD *)(v2 + 140) = v5;
    }
    else
    {
      *(_QWORD *)(v2 + 132) = v4;
      *(_DWORD *)(v2 + 140) = v5;
      *(_BYTE *)(v2 + 144) = 1;
    }
    v3 = HIWORD(v4);
  }
  v17 = ((unint64_t)COERCE_UNSIGNED_INT((float)v3) << 32) | 4;
  v16 = 0;
  v18 = WebCore::toUserUnits((uint64_t)&v17, (WebCore::RenderMathMLOperator *)((char *)this + 80), &v16);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!*(_BYTE *)(v6 + 172))
  {
    v7 = *(_QWORD *)(v6 + 104);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v7 + 40);
        LODWORD(v10) = *(_DWORD *)(v7 + 52);
        if ((_DWORD)v10)
        {
LABEL_11:
          v10 = v10;
          v11 = (WebCore::MathMLPresentationElement *)(v9 + 8);
          while (1)
          {
            v12 = *((_QWORD *)v11 - 1);
            if (v12 == WebCore::MathMLNames::rspaceAttr
              || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::MathMLNames::rspaceAttr + 24)
              && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::MathMLNames::rspaceAttr + 32))
            {
              goto LABEL_20;
            }
            v11 = (WebCore::MathMLPresentationElement *)((char *)v11 + 16);
            if (!--v10)
            {
              v11 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_20;
            }
          }
        }
      }
      else
      {
        v9 = v7 + 32;
        LODWORD(v10) = v8 >> 5;
        if ((_DWORD)v10)
          goto LABEL_11;
      }
    }
    v11 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_20:
    v13 = WebCore::MathMLPresentationElement::parseMathMLLength(v11, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v6 + 172))
      *(_BYTE *)(v6 + 172) = 1;
    *(_QWORD *)(v6 + 164) = v13;
  }
  v14 = WebCore::toUserUnits(v6 + 164, (WebCore::RenderMathMLOperator *)((char *)this + 80), &v18);
  return v14 & ~(v14 >> 31);
}

uint64_t WebCore::RenderMathMLOperator::minSize(WebCore::RenderMathMLOperator *this)
{
  double v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MathMLPresentationElement *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v14;

  v2 = *(float *)(*((_QWORD *)this + 14) + 204) * 64.0;
  if (v2 >= 2147483650.0)
  {
    v3 = 0x7FFFFFFF;
  }
  else if (v2 <= -2147483650.0)
  {
    v3 = 0x80000000;
  }
  else
  {
    v3 = (int)v2;
  }
  v14 = v3;
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_BYTE *)(v4 + 184))
    goto LABEL_20;
  v5 = *(_QWORD *)(v4 + 104);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_8:
        v8 = v8;
        v9 = (WebCore::MathMLPresentationElement *)(v7 + 8);
        while (1)
        {
          v10 = *((_QWORD *)v9 - 1);
          if (v10 == WebCore::MathMLNames::minsizeAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::MathMLNames::minsizeAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::MathMLNames::minsizeAttr + 32))
          {
            goto LABEL_17;
          }
          v9 = (WebCore::MathMLPresentationElement *)((char *)v9 + 16);
          if (!--v8)
          {
            v9 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_8;
    }
  }
  v9 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  v11 = WebCore::MathMLPresentationElement::parseMathMLLength(v9, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 680) + 664) >= 0));
  if (!*(_BYTE *)(v4 + 184))
    *(_BYTE *)(v4 + 184) = 1;
  *(_QWORD *)(v4 + 176) = v11;
LABEL_20:
  v12 = WebCore::toUserUnits(v4 + 176, (WebCore::RenderMathMLOperator *)((char *)this + 80), &v14);
  return v12 & ~(v12 >> 31);
}

uint64_t WebCore::RenderMathMLOperator::maxSize(WebCore::RenderMathMLOperator *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::MathMLPresentationElement *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v12;

  v12 = 2147483584;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_BYTE *)(v2 + 196))
    goto LABEL_17;
  v3 = *(_QWORD *)(v2 + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if ((_DWORD)v6)
      {
LABEL_5:
        v6 = v6;
        v7 = (WebCore::MathMLPresentationElement *)(v5 + 8);
        while (1)
        {
          v8 = *((_QWORD *)v7 - 1);
          if (v8 == WebCore::MathMLNames::maxsizeAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::MathMLNames::maxsizeAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::MathMLNames::maxsizeAttr + 32))
          {
            goto LABEL_14;
          }
          v7 = (WebCore::MathMLPresentationElement *)((char *)v7 + 16);
          if (!--v6)
          {
            v7 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if ((_DWORD)v6)
        goto LABEL_5;
    }
  }
  v7 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  v9 = WebCore::MathMLPresentationElement::parseMathMLLength(v7, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680) + 664) >= 0));
  if (!*(_BYTE *)(v2 + 196))
    *(_BYTE *)(v2 + 196) = 1;
  *(_QWORD *)(v2 + 188) = v9;
LABEL_17:
  v10 = WebCore::toUserUnits(v2 + 188, (WebCore::RenderMathMLOperator *)((char *)this + 80), &v12);
  return v10 & ~(v10 >> 31);
}

uint64_t WebCore::RenderMathMLOperator::isVertical(WebCore::RenderMathMLOperator *this, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringBuilder *a5, __n128 a6)
{
  return WebCore::MathMLOperatorElement::operatorChar(*(WebCore::MathMLOperatorElement **)(*((_QWORD *)this + 3) + 8), a6, a2, a3, a4, a5)[4];
}

uint64_t WebCore::RenderMathMLOperator::stretchTo(int *a1, int a2, int a3)
{
  uint64_t result;
  const WebCore::RenderStyle *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  float v18;
  int v19;
  double v20;
  unsigned int v21;
  double v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int *v38;

  result = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1944))(a1);
  if ((_DWORD)result && (a1[55] != a2 || a1[56] != a3))
  {
    a1[55] = a2;
    a1[56] = a3;
    if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a1 + 1936))(a1, 64))
    {
      v8 = WebCore::axisHeight((WebCore *)(a1 + 20), v7);
      v9 = a1[55];
      v10 = v9 - v8;
      if (__OFSUB__(v9, v8))
        v10 = (v9 >> 31) + 0x7FFFFFFF;
      v11 = a1[56];
      v12 = v11 + v8;
      if (__OFADD__(v11, v8))
        v12 = (v11 >> 31) + 0x7FFFFFFF;
      if ((int)v10 <= v12)
        v10 = v12;
      v13 = v10 + v8;
      if (__OFADD__(v10, v8))
        v13 = (v10 >> 31) + 0x7FFFFFFF;
      a1[55] = v13;
      v14 = v10 - v8;
      if (__OFSUB__(v10, v8))
        v14 = (v10 >> 31) + 0x7FFFFFFF;
      a1[56] = v14;
    }
    if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 1944))(a1))
    {
      v15 = a1[55];
      v16 = a1[56];
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        v17 = (v15 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v17 = a1[57];
    }
    v18 = 1.0;
    if (v17 >= 1)
    {
      v19 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1984))(a1);
      if (v17 < v19 || (v19 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1992))(a1), v19 < v17))
        v18 = (float)((float)v19 * 0.015625) / (float)((float)v17 * 0.015625);
    }
    v20 = (float)(v18 * (float)((float)a1[55] * 0.015625)) * 64.0;
    if (v20 >= 2147483650.0)
    {
      v21 = 0x7FFFFFFF;
    }
    else if (v20 <= -2147483650.0)
    {
      v21 = 0x80000000;
    }
    else
    {
      v21 = (int)v20;
    }
    a1[55] = v21;
    v22 = (float)(v18 * (float)((float)a1[56] * 0.015625)) * 64.0;
    if (v22 >= 2147483650.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147483650.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v22;
    }
    a1[56] = v23;
    v24 = __OFADD__(v21, v23);
    v25 = v21 + v23;
    v26 = (v21 >> 31) + 0x7FFFFFFF;
    if (v24)
      v27 = v26;
    else
      v27 = v25;
    WebCore::MathOperator::calculateStretchyData(a1 + 59, (uint64_t)(a1 + 20), 0, v27);
    if (a1[61] == 2)
    {
      if (a1[60] == 2)
      {
        a1[72] = v27;
        a1[73] = 0;
      }
      else
      {
        a1[71] = v27;
      }
    }
    v28 = a1[72];
    v29 = a1[73];
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      v30 = (v28 >> 31) + 0x7FFFFFFF;
    v31 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1048))(a1);
    v32 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 960))(a1);
    if (__OFADD__(v31, v32))
      v33 = (v31 >> 31) + 0x7FFFFFFF;
    else
      v33 = v31 + v32;
    v34 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1056))(a1);
    result = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 968))(a1);
    v35 = v34 + result;
    if (__OFADD__(v34, (_DWORD)result))
      v35 = (v34 >> 31) + 0x7FFFFFFF;
    v24 = __OFADD__(v33, v35);
    v36 = v33 + v35;
    if (v24)
      v36 = (v33 >> 31) + 0x7FFFFFFF;
    v24 = __OFADD__(v30, v36);
    v37 = v30 + v36;
    if (v24)
      v37 = (v30 >> 31) + 0x7FFFFFFF;
    if (((a1[31] >> 13) & 6) - 2 < 4)
      v38 = a1 + 40;
    else
      v38 = a1 + 41;
    *v38 = v37;
  }
  return result;
}

uint64_t WebCore::RenderMathMLOperator::stretchTo(int *a1, int a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int *v29;

  result = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1944))(a1);
  if ((result & 1) == 0 && a1[57] != a2)
  {
    a1[57] = a2;
    WebCore::MathOperator::calculateStretchyData(a1 + 59, (uint64_t)(a1 + 20), 0, a2);
    if (a1[61] == 2)
    {
      if (a1[60] == 2)
      {
        a1[72] = a2;
        a1[73] = 0;
      }
      else
      {
        a1[71] = a2;
      }
    }
    v5 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1968))(a1);
    v6 = __OFADD__(v5, a2);
    v7 = v5 + a2;
    if (v6)
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    v8 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1976))(a1);
    v9 = v7 + v8;
    if (__OFADD__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    v10 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1064))(a1);
    v11 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1072))(a1);
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v13 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 976))(a1);
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    v15 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 984))(a1);
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    v6 = __OFADD__(v9, v16);
    v17 = v9 + v16;
    if (v6)
      v17 = (v9 >> 31) + 0x7FFFFFFF;
    if (((a1[31] >> 13) & 6) - 2 < 4)
      v18 = a1 + 41;
    else
      v18 = a1 + 40;
    *v18 = v17;
    v19 = a1[72];
    v20 = a1[73];
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      v21 = (v19 >> 31) + 0x7FFFFFFF;
    v22 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1048))(a1);
    v23 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 960))(a1);
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      v24 = (v22 >> 31) + 0x7FFFFFFF;
    v25 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1056))(a1);
    result = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 968))(a1);
    v26 = v25 + result;
    if (__OFADD__(v25, (_DWORD)result))
      v26 = (v25 >> 31) + 0x7FFFFFFF;
    v6 = __OFADD__(v24, v26);
    v27 = v24 + v26;
    if (v6)
      v27 = (v24 >> 31) + 0x7FFFFFFF;
    v6 = __OFADD__(v21, v27);
    v28 = v21 + v27;
    if (v6)
      v28 = (v21 >> 31) + 0x7FFFFFFF;
    if (((a1[31] >> 13) & 6) - 2 < 4)
      v29 = a1 + 40;
    else
      v29 = a1 + 41;
    *v29 = v28;
  }
  return result;
}

uint64_t WebCore::RenderMathMLOperator::computePreferredLogicalWidths(WebCore::RenderMathMLOperator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringBuilder *v5;
  __n128 v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  float v25;
  int v26;
  int v27;
  WTF *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  CTFontOrientation v34;
  float width;
  uint64_t v36;
  unsigned __int16 v37;
  WTF *v38;
  CGSize advances;
  CGGlyph glyphs;

  if (((*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 2000))(this) & 1) != 0)
  {
    v7 = *((_DWORD *)this + 70);
    v8 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1064))(this);
    v9 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1072))(this);
    if (__OFADD__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    else
      v10 = v8 + v9;
    v11 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 976))(this);
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v12 = v10 + v11;
    v13 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 984))(this);
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    v15 = __OFADD__(v7, v14);
    v16 = v7 + v14;
    if (v15)
      v17 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v17 = v16;
    goto LABEL_34;
  }
  WebCore::RenderMathMLToken::computePreferredLogicalWidths(this, v6, v2, v3, v4, v5);
  v17 = *((_DWORD *)this + 47);
  if ((*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this) - 8289 > 3)
    goto LABEL_34;
  v18 = *((_QWORD *)this + 14) + 32;
  v19 = (void *)(*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this);
  WebCore::FontCascade::glyphDataForCharacter(v19, v18, 0, 0, (uint64_t)&v37);
  v21 = 0.0;
  if (v38)
  {
    v22 = *((_QWORD *)v38 + 1);
    if (v22)
    {
      v23 = v37;
      v24 = *(unsigned __int16 *)(v22 + 334) != v37 || v37 == 0;
      if (v24 || (*(_BYTE *)(v22 + 256) & 2) != 0)
      {
        v25 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v22 + 128, v37);
        if (v25 == -1.0)
        {
          glyphs = v23;
          advances = (CGSize)*MEMORY[0x1E0C9D820];
          if (*(float *)(v22 + 96) != 0.0)
          {
            v34 = kCTFontOrientationHorizontal;
            if (*(_BYTE *)(v22 + 100))
            {
              if ((*(_BYTE *)(v22 + 344) & 4) != 0)
                v34 = kCTFontOrientationHorizontal;
              else
                v34 = kCTFontOrientationVertical;
            }
            CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v22 + 88), v34, &glyphs, &advances, 1);
          }
          width = advances.width;
          WebCore::GlyphMetricsMap<float>::locatePage(v22 + 128, v23 >> 4);
          v25 = width;
          *(float *)(v36 + 4 * (v23 & 0xF)) = width;
        }
        v21 = (float)(v25 + *(float *)(v22 + 340)) * 64.0;
        if (v21 >= 2147483650.0)
        {
          v26 = 0x7FFFFFFF;
          goto LABEL_26;
        }
        if (v21 <= -2147483650.0)
        {
          v26 = 0x80000000;
          goto LABEL_26;
        }
      }
    }
  }
  v26 = (int)v21;
LABEL_26:
  if (v17 < v26)
    v26 = v17;
  v15 = __OFSUB__(v17, v26);
  v27 = v17 - v26;
  if (v15)
    v17 = (v17 >> 31) + 0x7FFFFFFF;
  else
    v17 = v27;
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::fastFree(v28, v20);
    else
      --*(_DWORD *)v28;
  }
LABEL_34:
  v29 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1968))(this);
  if (__OFADD__(v29, v17))
    v30 = (v29 >> 31) + 0x7FFFFFFF;
  else
    v30 = v29 + v17;
  v31 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1976))(this);
  v32 = v30 + v31;
  if (__OFADD__(v30, v31))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 46) = v32;
  *((_DWORD *)this + 47) = v32;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

void WebCore::RenderMathMLOperator::layoutBlock(int *a1, int a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  BOOL v57;
  _DWORD *v58;
  uint64_t v59;
  WebCore::RenderLayerScrollableArea *v60;
  char v61[24];

  if ((a2 & 1) != 0 || (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) == 0)
  {
    v4 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1968))(a1);
    v5 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1976))(a1);
    v6 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 2000))(a1);
    (*(void (**)(int *))(*(_QWORD *)a1 + 1304))(a1);
    *(_WORD *)((char *)a1 + 69) &= ~0x200u;
    if (v6)
    {
      v7 = *((unsigned __int8 *)a1 + 68);
      for (i = a1[16]; ; i = *(unsigned int *)(v10 + 47))
      {
        v9 = i | (v7 << 32);
        if (!v9)
          break;
        v10 = *(_QWORD *)(v9 + 8);
        if (!v10 || (*(_BYTE *)(v10 + 45) & 4) == 0)
          break;
        if ((*(_BYTE *)(v10 + 20) & 0xF8) != 0)
        {
          v11 = *(_QWORD *)(v10 + 32);
          if (v11
            && (v12 = *(_QWORD *)(v11 + 8)) != 0
            && (*(_BYTE *)(*(_QWORD *)(v12 + 104) + 239) & 0x18) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8)
                                                                         + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248)
                         + 479))
          {
            WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v10);
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 688))(v10);
          }
        }
        v7 = *(unsigned __int8 *)(v10 + 51);
      }
      v29 = a1[71];
      v18 = __OFADD__(v4, v29);
      v30 = v4 + v29;
      if (v18)
        v30 = (v4 >> 31) + 0x7FFFFFFF;
      v18 = __OFADD__(v30, v5);
      v31 = v30 + v5;
      if (v18)
        v31 = (v30 >> 31) + 0x7FFFFFFF;
      v32 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1064))(a1);
      v33 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1072))(a1);
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        v34 = (v32 >> 31) + 0x7FFFFFFF;
      v35 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 976))(a1);
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        v36 = (v34 >> 31) + 0x7FFFFFFF;
      v37 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 984))(a1);
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        v38 = (v36 >> 31) + 0x7FFFFFFF;
      v18 = __OFADD__(v31, v38);
      v39 = v31 + v38;
      if (v18)
        v39 = (v31 >> 31) + 0x7FFFFFFF;
      if (((a1[31] >> 13) & 6) - 2 < 4)
        v40 = a1 + 41;
      else
        v40 = a1 + 40;
      *v40 = v39;
      v41 = a1[72];
      v42 = a1[73];
      v43 = v41 + v42;
      if (__OFADD__(v41, v42))
        v43 = (v41 >> 31) + 0x7FFFFFFF;
      v44 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1048))(a1);
      v45 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 960))(a1);
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
        v46 = (v44 >> 31) + 0x7FFFFFFF;
      v47 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1056))(a1);
      v48 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 968))(a1);
      v49 = v47 + v48;
      if (__OFADD__(v47, v48))
        v49 = (v47 >> 31) + 0x7FFFFFFF;
      v18 = __OFADD__(v46, v49);
      v50 = v46 + v49;
      if (v18)
        v50 = (v46 >> 31) + 0x7FFFFFFF;
      v18 = __OFADD__(v43, v50);
      v51 = v43 + v50;
      if (v18)
        v51 = (v43 >> 31) + 0x7FFFFFFF;
      if (((a1[31] >> 13) & 6) - 2 < 4)
        v52 = a1 + 40;
      else
        v52 = a1 + 41;
      *v52 = v51;
      WebCore::RenderBlock::layoutPositionedObjects((uint64_t)a1);
    }
    else
    {
      v13 = ((a1[31] >> 13) & 6) - 2;
      v14 = a1 + 40;
      if (v13 >= 4)
        v15 = (unsigned int *)(a1 + 40);
      else
        v15 = (unsigned int *)(a1 + 41);
      v16 = *v15;
      v17 = *v15 - v4;
      if (__OFSUB__(v16, v4))
        v17 = (v16 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v17, v5);
      v19 = v17 - v5;
      v20 = (v17 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v20 = v19;
      if (v13 < 4)
        v14 = a1 + 41;
      *v14 = v20;
      WebCore::RenderMathMLToken::layoutBlock(a1, a2);
      if (((a1[31] >> 13) & 6) - 2 < 4)
        v21 = (unsigned int *)(a1 + 41);
      else
        v21 = (unsigned int *)(a1 + 40);
      *v21 = v16;
      if (v4 == 0x80000000)
        v22 = 0x7FFFFFFF;
      else
        v22 = -v4;
      if ((*((_BYTE *)a1 + 123) & 4) == 0)
        v22 = v4;
      v23 = a1[16];
      if (v23 | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32))
      {
        v24 = *(_QWORD *)((v23 | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32)) + 8);
        if (v24)
        {
          while ((*(_BYTE *)(v24 + 45) & 4) != 0)
          {
            v27 = *(_QWORD *)(v24 + 152);
            v25 = v27 & 0xFFFFFFFF00000000;
            v18 = __OFADD__((_DWORD)v27, v22);
            v26 = v27 + v22;
            LODWORD(v27) = (v27 >> 31) + 0x7FFFFFFF;
            if (v18)
              v27 = v27;
            else
              v27 = v26;
            *(_QWORD *)(v24 + 152) = v25 | v27;
            v28 = *(unsigned int *)(v24 + 47) | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32);
            if (!v28)
              break;
            v24 = *(_QWORD *)(v28 + 8);
            if (!v24)
              break;
          }
        }
      }
    }
    if ((*((_BYTE *)a1 + 22) & 1) != 0)
    {
      v54 = (unsigned __int16)a1[31] >> 13;
      v55 = v54 > 5;
      v56 = (1 << v54) & 0x2A;
      v57 = v55 || v56 == 0;
      if (v57
        && (v58 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 528)) != 0
        && *v58)
      {
        WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v58 + 2), a1, (uint64_t)v61);
      }
      else
      {
        v59 = *((_QWORD *)a1 + 18);
        if (v59)
        {
          WebCore::RenderLayer::updateLayerScrollableArea(*((WebCore::RenderLayer **)a1 + 18));
          v60 = *(WebCore::RenderLayerScrollableArea **)(v59 + 264);
          if (v60)
            WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v60);
        }
      }
    }
    v53 = a1[5] & 0xFFDFFDFF | 0x200;
    a1[5] = v53;
    if ((*((_BYTE *)a1 + 45) & 2) == 0)
    {
      *(_WORD *)((char *)a1 + 69) &= ~1u;
      *((_WORD *)a1 + 38) = a1[19] & 0xF | (16
                                          * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 248)
                                                     + 472));
    }
    a1[5] = v53 & 0xFFDFFE07;
  }
}

uint64_t WebCore::RenderMathMLOperator::updateFromElement(WebCore::RenderMathMLOperator *this)
{
  uint64_t result;

  WebCore::RenderMathMLToken::updateTokenContent(this);
  result = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 2000))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1960))(this);
  return result;
}

BOOL WebCore::RenderMathMLOperator::useMathOperator(WebCore::RenderMathMLOperator *this)
{
  return (*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this)
      && ((*(uint64_t (**)(WebCore::RenderMathMLOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 32) & 1) != 0
      || (*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this)
      && ((*(uint64_t (**)(WebCore::RenderMathMLOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 32) & 1) == 0
      && (*(unsigned int (**)(WebCore::RenderMathMLOperator *, uint64_t))(*(_QWORD *)this + 1936))(this, 4)&& (*(_BYTE *)(*((_QWORD *)this + 13) + 238) & 0x10) == 0|| (*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this) == 8722;
}

void WebCore::RenderMathMLOperator::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  WebCore::RenderMathMLBlock::styleDidChange(a1, a2, a3);
  WebCore::MathOperator::reset((WebCore::MathOperator *)(a1 + 236), (WebCore::Font **)(a1 + 80));
  if (a3
    && ((*(unsigned __int8 *)(*(_QWORD *)(a1 + 104) + 238) >> 4) & 1) != (*(_BYTE *)(*((_QWORD *)a3 + 3) + 238) & 0x10) >> 4
    && (*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    WebCore::RenderMathMLToken::updateTokenContent((WebCore::RenderMathMLToken *)a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2000))(a1))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1960))(a1);
  }
}

unint64_t WebCore::RenderMathMLOperator::firstLineBaseline(WebCore::RenderMathMLOperator *this)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t LineBaseline;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;

  if (!(*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 2000))(this))
  {
    LineBaseline = WebCore::RenderMathMLToken::firstLineBaseline(this);
    v16 = LineBaseline & 0xFFFFFF0000000000;
    v17 = LineBaseline & 0xFF00000000;
    return v17 | v16 | LineBaseline;
  }
  v2 = *((_DWORD *)this + 72);
  if ((*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1944))(this))
  {
    if ((*(unsigned int (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1944))(this))
    {
      v4 = *((_DWORD *)this + 55);
      v3 = *((_DWORD *)this + 56);
      if (__OFADD__(v4, v3))
      {
LABEL_7:
        v5 = __OFSUB__(v3, v4);
        v6 = v3 - v4;
        v7 = (v3 >> 31) + 0x7FFFFFFF;
        if (!v5)
          v7 = v6;
        v8 = *((_DWORD *)this + 73);
        v5 = __OFSUB__(v7, v8);
        v9 = v7 - v8;
        v10 = (v7 >> 31) + 0x7FFFFFFF;
        if (!v5)
          v10 = v9;
        v11 = *((_DWORD *)this + 72);
        v5 = __OFADD__(v10, v11);
        v12 = v10 + v11;
        v13 = (v10 >> 31) + 0x7FFFFFFF;
        if (!v5)
          v13 = v12;
        v14 = v13 / 2;
        goto LABEL_17;
      }
      if (v4 + v3)
      {
LABEL_6:
        v4 = *((_DWORD *)this + 55);
        v3 = *((_DWORD *)this + 56);
        goto LABEL_7;
      }
    }
    else if (*((_DWORD *)this + 57))
    {
      goto LABEL_6;
    }
  }
  v14 = 0;
LABEL_17:
  v5 = __OFSUB__(v2, v14);
  v18 = v2 - v14;
  if (v5)
    v18 = (v2 >> 31) + 0x7FFFFFFF;
  v19 = llroundf((float)v18 * 0.015625);
  v20 = v19 << 6;
  if (v19 < -33554432)
    v20 = 0x80000000;
  if (v19 <= 0x1FFFFFF)
    v21 = v20;
  else
    v21 = 0x7FFFFFFF;
  v22 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1048))(this);
  v23 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 960))(this);
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
    v24 = (v22 >> 31) + 0x7FFFFFFF;
  LODWORD(LineBaseline) = v21 + v24;
  if (__OFADD__(v21, v24))
  {
    v16 = 0;
    LODWORD(LineBaseline) = (v21 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v16 = 0;
  }
  v17 = 0x100000000;
  return v17 | v16 | LineBaseline;
}

uint64_t WebCore::RenderMathMLOperator::paint(WebCore::RenderMathMLOperator *this, WebCore::GraphicsContext **a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD v26[2];

  WebCore::RenderMathMLToken::paint(this, a2, a3);
  result = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 2000))(this);
  if ((_DWORD)result)
  {
    v8 = *((_DWORD *)this + 38);
    v7 = *((_DWORD *)this + 39);
    v9 = *((_DWORD *)a3 + 1);
    v10 = __OFADD__(*(_DWORD *)a3, v8);
    v11 = *(_DWORD *)a3 + v8;
    if (v10)
      v12 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    else
      v12 = v11;
    v10 = __OFADD__(v9, v7);
    v13 = v9 + v7;
    if (v10)
      v14 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v14 = v13;
    v15 = 1976;
    if ((*((_DWORD *)this + 30) & 0x4000000) == 0)
      v15 = 1968;
    v16 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + v15))(this);
    v17 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1016))(this);
    if (__OFADD__(v16, v17))
      v18 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v18 = v16 + v17;
    v19 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 944))(this);
    if (__OFADD__(v18, v19))
      v20 = (v18 >> 31) + 0x7FFFFFFF;
    else
      v20 = v18 + v19;
    v21 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1048))(this);
    v22 = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 960))(this);
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      v23 = (v21 >> 31) + 0x7FFFFFFF;
    v24 = v12 + v20;
    if (__OFADD__(v12, v20))
      v24 = (v12 >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__(v14, v23);
    v25 = v14 + v23;
    if (v10)
      v25 = (v14 >> 31) + 0x7FFFFFFF;
    v26[0] = v24;
    v26[1] = v25;
    return WebCore::MathOperator::paint((WebCore::RenderMathMLOperator *)((char *)this + 236), (WebCore::RenderMathMLOperator *)((char *)this + 80), (WebCore::PaintInfo *)a2, (const WebCore::LayoutPoint *)v26);
  }
  return result;
}

uint64_t WebCore::RenderMathMLOperator::paintChildren(WebCore::RenderMathMLOperator *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, WebCore::PaintInfo *a4, int a5)
{
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;

  result = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 2000))(this);
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(WebCore::RenderMathMLOperator *))(*(_QWORD *)this + 1952))(this);
    if ((result - 8289) >= 4)
    {
      if (!*((_BYTE *)this + 212))
        return WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
      WebCore::FontCascade::glyphDataForCharacter((void *)*((unsigned int *)this + 52), *((_QWORD *)this + 14) + 32, *((unsigned __int8 *)this + 216), 0, (uint64_t)&v13);
      result = (uint64_t)v14;
      if (!v14)
        return WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
      v12 = *((_QWORD *)v14 + 1);
      v14 = 0;
      if (*(_DWORD *)result != 1)
      {
        --*(_DWORD *)result;
        if (v12)
          return result;
        return WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
      }
      result = WTF::fastFree((WTF *)result, v11);
      if (!v12)
        return WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
    }
  }
  return result;
}

void WebCore::RenderMathMLPadded::~RenderMathMLPadded(WebCore::RenderMathMLPadded *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLPadded::computePreferredLogicalWidths(WebCore::RenderMathMLPadded *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MathMLPresentationElement *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v29;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v2 + 45) & 4) != 0)
  {
    v3 = 0;
    do
    {
      if ((*(_DWORD *)(v2 + 20) & 0x1800000) != 0x1000000)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 416))(v2);
        v12 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v2);
        v13 = v11 + v12;
        if (__OFADD__(v11, v12))
          v13 = (v11 >> 31) + 0x7FFFFFFF;
        v14 = __OFADD__(v3, v13);
        v15 = v3 + v13;
        if (v14)
          v3 = (v3 >> 31) + 0x7FFFFFFF;
        else
          v3 = v15;
      }
      v16 = *(unsigned int *)(v2 + 47);
      if (!(v16 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
        break;
      v2 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
      if (!v2)
        break;
    }
    while ((*(_BYTE *)(v2 + 45) & 4) != 0);
  }
  else
  {
    v3 = 0;
  }
  v29 = v3;
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!*(_BYTE *)(v4 + 128))
  {
    v5 = *(_QWORD *)(v4 + 104);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 4);
      if ((v6 & 1) != 0)
      {
        v7 = *(_QWORD *)(v5 + 40);
        LODWORD(v8) = *(_DWORD *)(v5 + 52);
        if ((_DWORD)v8)
        {
LABEL_9:
          v8 = v8;
          v9 = (WebCore::MathMLPresentationElement *)(v7 + 8);
          while (1)
          {
            v10 = *((_QWORD *)v9 - 1);
            if (v10 == WebCore::MathMLNames::widthAttr
              || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 24)
              && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 32))
            {
              goto LABEL_30;
            }
            v9 = (WebCore::MathMLPresentationElement *)((char *)v9 + 16);
            if (!--v8)
            {
              v9 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_30;
            }
          }
        }
      }
      else
      {
        v7 = v5 + 32;
        LODWORD(v8) = v6 >> 5;
        if ((_DWORD)v8)
          goto LABEL_9;
      }
    }
    v9 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_30:
    v17 = WebCore::MathMLPresentationElement::parseMathMLLength(v9, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v4 + 128))
      *(_BYTE *)(v4 + 128) = 1;
    *(_QWORD *)(v4 + 120) = v17;
  }
  v18 = WebCore::toUserUnits(v4 + 120, (WebCore::RenderMathMLPadded *)((char *)this + 80), (int *)&v29);
  v19 = v18 & ~(v18 >> 31);
  v20 = (*(uint64_t (**)(WebCore::RenderMathMLPadded *))(*(_QWORD *)this + 1064))(this);
  v21 = (*(uint64_t (**)(WebCore::RenderMathMLPadded *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v20, v21))
    v22 = (v20 >> 31) + 0x7FFFFFFF;
  else
    v22 = v20 + v21;
  v23 = (*(uint64_t (**)(WebCore::RenderMathMLPadded *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v22, v23))
    v24 = (v22 >> 31) + 0x7FFFFFFF;
  else
    v24 = v22 + v23;
  v25 = (*(uint64_t (**)(WebCore::RenderMathMLPadded *))(*(_QWORD *)this + 984))(this);
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    v26 = (v24 >> 31) + 0x7FFFFFFF;
  v14 = __OFADD__(v19, v26);
  v27 = v19 + v26;
  if (v14)
    v27 = 0x7FFFFFFF;
  *((_DWORD *)this + 46) = v27;
  *((_DWORD *)this + 47) = v27;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

void WebCore::RenderMathMLPadded::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::MathMLPresentationElement *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::MathMLPresentationElement *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::MathMLPresentationElement *v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  float v57;
  double v58;
  unsigned int v59;
  unsigned __int8 *v60;
  int v61;
  float v62;
  float v63;
  double v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::MathMLPresentationElement *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::MathMLPresentationElement *v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int *v92;
  int v93;
  int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  float v104;
  unsigned int v105;
  _DWORD *v106;
  uint64_t v107;
  WebCore::RenderLayerScrollableArea *v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114[6];

  if ((a2 & 1) == 0 && (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) != 0)
    return;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  *(_WORD *)(a1 + 69) &= ~0x200u;
  v3 = *(unsigned __int8 *)(a1 + 68);
  for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v6 + 47))
  {
    v5 = i | (v3 << 32);
    if (!v5)
      break;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || (*(_BYTE *)(v6 + 45) & 4) == 0)
      break;
    WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v6, (const WebCore::RenderBlock *)a1);
    v3 = *(unsigned __int8 *)(v6 + 51);
  }
  v113 = 0;
  v112 = 0;
  WebCore::RenderMathMLRow::stretchVerticalOperatorsAndLayoutChildren((WebCore::RenderMathMLRow *)a1);
  WebCore::RenderMathMLRow::getContentBoundingBox(a1, (WebCore::LayoutUnit *)((char *)&v113 + 4), (WebCore::LayoutUnit *)&v113, (WebCore::LayoutUnit *)&v112);
  WebCore::RenderMathMLRow::layoutRowItems(a1, HIDWORD(v113), v113);
  v114[0] = HIDWORD(v113);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v8 = (unint64_t *)(v7 + 120);
  if (!*(_BYTE *)(v7 + 128))
  {
    v9 = *(_QWORD *)(v7 + 104);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(v9 + 40);
        LODWORD(v12) = *(_DWORD *)(v9 + 52);
        if ((_DWORD)v12)
        {
LABEL_12:
          v12 = v12;
          v13 = (WebCore::MathMLPresentationElement *)(v11 + 8);
          while (1)
          {
            v14 = *((_QWORD *)v13 - 1);
            if (v14 == WebCore::MathMLNames::widthAttr
              || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 24)
              && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 32))
            {
              goto LABEL_21;
            }
            v13 = (WebCore::MathMLPresentationElement *)((char *)v13 + 16);
            if (!--v12)
            {
              v13 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_21;
            }
          }
        }
      }
      else
      {
        v11 = v9 + 32;
        LODWORD(v12) = v10 >> 5;
        if ((_DWORD)v12)
          goto LABEL_12;
      }
    }
    v13 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_21:
    v15 = WebCore::MathMLPresentationElement::parseMathMLLength(v13, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v7 + 128))
      *(_BYTE *)(v7 + 128) = 1;
    *v8 = v15;
  }
  v16 = WebCore::toUserUnits((uint64_t)v8, (WebCore::RenderStyle *)(a1 + 80), v114);
  v17 = v16 & ~(v16 >> 31);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  if (__OFADD__(v18, v19))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  else
    v20 = v18 + v19;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  if (__OFADD__(v20, v21))
    v22 = (v20 >> 31) + 0x7FFFFFFF;
  else
    v22 = v20 + v21;
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
    v24 = (v22 >> 31) + 0x7FFFFFFF;
  v25 = __OFADD__(v17, v24);
  v26 = v17 + v24;
  if (v25)
    v26 = 0x7FFFFFFF;
  v114[0] = v113;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!*(_BYTE *)(v27 + 140))
  {
    v28 = *(_QWORD *)(v27 + 104);
    if (v28)
    {
      v29 = *(_DWORD *)(v28 + 4);
      if ((v29 & 1) != 0)
      {
        v30 = *(_QWORD *)(v28 + 40);
        LODWORD(v31) = *(_DWORD *)(v28 + 52);
        if ((_DWORD)v31)
        {
LABEL_39:
          v31 = v31;
          v32 = (WebCore::MathMLPresentationElement *)(v30 + 8);
          while (1)
          {
            v33 = *((_QWORD *)v32 - 1);
            if (v33 == WebCore::MathMLNames::heightAttr
              || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::MathMLNames::heightAttr + 24)
              && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::MathMLNames::heightAttr + 32))
            {
              goto LABEL_48;
            }
            v32 = (WebCore::MathMLPresentationElement *)((char *)v32 + 16);
            if (!--v31)
            {
              v32 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_48;
            }
          }
        }
      }
      else
      {
        v30 = v28 + 32;
        LODWORD(v31) = v29 >> 5;
        if ((_DWORD)v31)
          goto LABEL_39;
      }
    }
    v32 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_48:
    v34 = WebCore::MathMLPresentationElement::parseMathMLLength(v32, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v27 + 140))
      *(_BYTE *)(v27 + 140) = 1;
    *(_QWORD *)(v27 + 132) = v34;
  }
  v35 = WebCore::toUserUnits(v27 + 132, (WebCore::RenderStyle *)(a1 + 80), v114);
  v36 = v35 & ~(v35 >> 31);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  v39 = v37 + v38;
  if (__OFADD__(v37, v38))
    v39 = (v37 >> 31) + 0x7FFFFFFF;
  v25 = __OFADD__(v36, v39);
  v40 = v36 + v39;
  if (v25)
    v40 = 0x7FFFFFFF;
  v114[0] = v112;
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!*(_BYTE *)(v41 + 152))
  {
    v42 = *(_QWORD *)(v41 + 104);
    if (v42)
    {
      v43 = *(_DWORD *)(v42 + 4);
      if ((v43 & 1) != 0)
      {
        v44 = *(_QWORD *)(v42 + 40);
        LODWORD(v45) = *(_DWORD *)(v42 + 52);
        if ((_DWORD)v45)
        {
LABEL_60:
          v45 = v45;
          v46 = (WebCore::MathMLPresentationElement *)(v44 + 8);
          while (1)
          {
            v47 = *((_QWORD *)v46 - 1);
            if (v47 == WebCore::MathMLNames::depthAttr
              || *(_QWORD *)(v47 + 24) == *(_QWORD *)(WebCore::MathMLNames::depthAttr + 24)
              && *(_QWORD *)(v47 + 32) == *(_QWORD *)(WebCore::MathMLNames::depthAttr + 32))
            {
              goto LABEL_69;
            }
            v46 = (WebCore::MathMLPresentationElement *)((char *)v46 + 16);
            if (!--v45)
            {
              v46 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_69;
            }
          }
        }
      }
      else
      {
        v44 = v42 + 32;
        LODWORD(v45) = v43 >> 5;
        if ((_DWORD)v45)
          goto LABEL_60;
      }
    }
    v46 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_69:
    v48 = WebCore::MathMLPresentationElement::parseMathMLLength(v46, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v41 + 152))
      *(_BYTE *)(v41 + 152) = 1;
    *(_QWORD *)(v41 + 144) = v48;
  }
  v49 = WebCore::toUserUnits(v41 + 144, (WebCore::RenderStyle *)(a1 + 80), v114);
  v50 = v49 & ~(v49 >> 31);
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v53 = v51 + v52;
  if (__OFADD__(v51, v52))
    v53 = (v51 >> 31) + 0x7FFFFFFF;
  v25 = __OFADD__(v50, v53);
  v54 = v50 + v53;
  if (v25)
    v54 = 0x7FFFFFFF;
  v55 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v55 == 4 || v55 == 2)
    && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1))
  {
    v110 = WebCore::RenderBoxModelObject::borderLeft((WebCore::RenderBoxModelObject *)a1);
    v111 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
    if (__OFADD__(v110, v111))
      v59 = (v110 >> 31) + 0x7FFFFFFF;
    else
      v59 = v110 + v111;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    v57 = 0.0;
    if ((*(_BYTE *)(v56 + 124) & 0xE) != 0)
    {
      v103 = *(_QWORD *)(v56 + 200);
      if (*(_BYTE *)(v103 + 5) && *(_BYTE *)(v103 + 76) == 4)
      {
        if (*(_BYTE *)(v103 + 78))
          v57 = *(float *)(v103 + 72);
        else
          v57 = (float)*(int *)(v103 + 72);
      }
      else
      {
        v57 = *(float *)(v56 + 120);
      }
    }
    v58 = v57 * 64.0;
    if (v58 >= 2147483650.0)
    {
      v59 = 0x7FFFFFFF;
    }
    else if (v58 <= -2147483650.0)
    {
      v59 = 0x80000000;
    }
    else
    {
      v59 = (int)v58;
    }
  }
  v60 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
  v61 = v60[100];
  if ((v61 & 0xFFFFFFF7) == 3)
  {
    v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v61 = v60[100];
    v62 = (float)v109 * 0.015625;
  }
  else
  {
    v62 = 0.0;
  }
  switch(v61)
  {
    case 4:
      v63 = *((float *)v60 + 24);
      if (!v60[102])
        v63 = (float)SLODWORD(v63);
      break;
    case 3:
      v104 = *((float *)v60 + 24);
      if (!v60[102])
        v104 = (float)SLODWORD(v104);
      v63 = (float)(v62 * v104) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v60 + 96), v62);
      break;
    default:
      v65 = 0;
      goto LABEL_90;
  }
  v64 = v63 * 64.0;
  if (v64 >= 2147483650.0)
  {
    v65 = 0x7FFFFFFF;
  }
  else if (v64 <= -2147483650.0)
  {
    v65 = 0x80000000;
  }
  else
  {
    v65 = (int)v64;
  }
LABEL_90:
  v66 = v59 + v65;
  if (__OFADD__(v59, v65))
    v66 = (v59 >> 31) + 0x7FFFFFFF;
  v67 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!*(_BYTE *)(v67 + 164))
  {
    v68 = *(_QWORD *)(v67 + 104);
    if (v68)
    {
      v69 = *(_DWORD *)(v68 + 4);
      if ((v69 & 1) != 0)
      {
        v70 = *(_QWORD *)(v68 + 40);
        LODWORD(v71) = *(_DWORD *)(v68 + 52);
        if ((_DWORD)v71)
        {
LABEL_96:
          v71 = v71;
          v72 = (WebCore::MathMLPresentationElement *)(v70 + 8);
          while (1)
          {
            v73 = *((_QWORD *)v72 - 1);
            if (v73 == WebCore::MathMLNames::lspaceAttr
              || *(_QWORD *)(v73 + 24) == *(_QWORD *)(WebCore::MathMLNames::lspaceAttr + 24)
              && *(_QWORD *)(v73 + 32) == *(_QWORD *)(WebCore::MathMLNames::lspaceAttr + 32))
            {
              goto LABEL_105;
            }
            v72 = (WebCore::MathMLPresentationElement *)((char *)v72 + 16);
            if (!--v71)
            {
              v72 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_105;
            }
          }
        }
      }
      else
      {
        v70 = v68 + 32;
        LODWORD(v71) = v69 >> 5;
        if ((_DWORD)v71)
          goto LABEL_96;
      }
    }
    v72 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_105:
    v74 = WebCore::MathMLPresentationElement::parseMathMLLength(v72, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v67 + 164))
      *(_BYTE *)(v67 + 164) = 1;
    *(_QWORD *)(v67 + 156) = v74;
  }
  v114[0] = 0;
  v75 = WebCore::toUserUnits(v67 + 156, (WebCore::RenderStyle *)(a1 + 80), v114);
  v76 = v75 & ~(v75 >> 31);
  v77 = v66 + v76;
  if (__OFADD__(v66, v76))
    v77 = (v66 >> 31) + 0x7FFFFFFF;
  v78 = v40 - v113;
  if (__OFSUB__(v40, (_DWORD)v113))
    v78 = (v40 >> 31) + 0x7FFFFFFF;
  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (*(_BYTE *)(v79 + 176))
    goto LABEL_128;
  v80 = *(_QWORD *)(v79 + 104);
  if (v80)
  {
    v81 = *(_DWORD *)(v80 + 4);
    if ((v81 & 1) != 0)
    {
      v82 = *(_QWORD *)(v80 + 40);
      LODWORD(v83) = *(_DWORD *)(v80 + 52);
      if ((_DWORD)v83)
      {
LABEL_116:
        v83 = v83;
        v84 = (WebCore::MathMLPresentationElement *)(v82 + 8);
        while (1)
        {
          v85 = *((_QWORD *)v84 - 1);
          if (v85 == WebCore::MathMLNames::voffsetAttr
            || *(_QWORD *)(v85 + 24) == *(_QWORD *)(WebCore::MathMLNames::voffsetAttr + 24)
            && *(_QWORD *)(v85 + 32) == *(_QWORD *)(WebCore::MathMLNames::voffsetAttr + 32))
          {
            goto LABEL_125;
          }
          v84 = (WebCore::MathMLPresentationElement *)((char *)v84 + 16);
          if (!--v83)
          {
            v84 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
            goto LABEL_125;
          }
        }
      }
    }
    else
    {
      v82 = v80 + 32;
      LODWORD(v83) = v81 >> 5;
      if ((_DWORD)v83)
        goto LABEL_116;
    }
  }
  v84 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_125:
  v86 = WebCore::MathMLPresentationElement::parseMathMLLength(v84, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 40) + 8) + 680) + 664) >= 0));
  if (!*(_BYTE *)(v79 + 176))
    *(_BYTE *)(v79 + 176) = 1;
  *(_QWORD *)(v79 + 168) = v86;
LABEL_128:
  v114[0] = 0;
  v87 = WebCore::toUserUnits(v79 + 168, (WebCore::RenderStyle *)(a1 + 80), v114);
  v88 = v78 - v87;
  if (__OFSUB__(v78, v87))
    v88 = (v78 >> 31) + 0x7FFFFFFF;
  v89 = *(unsigned int *)(a1 + 64);
  if (v89 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v90 = *(_QWORD *)((v89 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v90)
    {
      while ((*(_BYTE *)(v90 + 45) & 4) != 0)
      {
        v97 = *(_DWORD *)(v90 + 152);
        v96 = *(_DWORD *)(v90 + 156);
        v25 = __OFADD__(v97, v77);
        v98 = v97 + v77;
        LODWORD(v99) = (v97 >> 31) + 0x7FFFFFFF;
        if (v25)
          v99 = v99;
        else
          v99 = v98;
        v25 = __OFADD__(v96, v88);
        v100 = v96 + v88;
        LODWORD(v101) = (v96 >> 31) + 0x7FFFFFFF;
        if (v25)
          v101 = v101;
        else
          v101 = v100;
        *(_QWORD *)(v90 + 152) = v99 | (v101 << 32);
        v102 = *(unsigned int *)(v90 + 47) | ((unint64_t)*(unsigned __int8 *)(v90 + 51) << 32);
        if (!v102)
          break;
        v90 = *(_QWORD *)(v102 + 8);
        if (!v90)
          break;
      }
    }
  }
  v91 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  if (v91 < 4)
    v92 = (int *)(a1 + 164);
  else
    v92 = (int *)(a1 + 160);
  *v92 = v26;
  v93 = v40 + v54;
  if (__OFADD__(v40, v54))
    v93 = (v40 >> 31) + 0x7FFFFFFF;
  if (v91 < 4)
    v94 = (int *)(a1 + 160);
  else
    v94 = (int *)(a1 + 164);
  *v94 = v93;
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v105 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v105 > 5 || ((1 << v105) & 0x2A) == 0)
      && (v106 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v106)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v106 + 2), (_QWORD *)a1, (uint64_t)v114);
    }
    else
    {
      v107 = *(_QWORD *)(a1 + 144);
      if (v107)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v108 = *(WebCore::RenderLayerScrollableArea **)(v107 + 264);
        if (v108)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v108);
      }
    }
  }
  v95 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v95;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v95 & 0xFFDFFE07;
}

uint64_t WebCore::RenderMathMLPadded::firstLineBaseline(WebCore::RenderMathMLPadded *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MathMLPresentationElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::MathMLPresentationElement *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v32;
  int v33;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    || (v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) == 0
    || (*(_BYTE *)(v2 + 45) & 4) == 0)
  {
    v33 = 0;
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (*(_BYTE *)(v3 + 140))
    {
LABEL_39:
      v27 = WebCore::toUserUnits(v3 + 132, (WebCore::RenderMathMLPadded *)((char *)this + 80), &v33);
      v28 = v27 & ~(v27 >> 31);
      return v28 | 0x100000000;
    }
    v4 = *(_QWORD *)(v3 + 104);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if ((_DWORD)v7)
        {
LABEL_8:
          v7 = v7;
          v8 = (WebCore::MathMLPresentationElement *)(v6 + 8);
          while (1)
          {
            v9 = *((_QWORD *)v8 - 1);
            if (v9 == WebCore::MathMLNames::heightAttr
              || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::MathMLNames::heightAttr + 24)
              && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::MathMLNames::heightAttr + 32))
            {
              goto LABEL_36;
            }
            v8 = (WebCore::MathMLPresentationElement *)((char *)v8 + 16);
            if (!--v7)
            {
              v8 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        v6 = v4 + 32;
        LODWORD(v7) = v5 >> 5;
        if ((_DWORD)v7)
          goto LABEL_8;
      }
    }
    v8 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_36:
    v26 = WebCore::MathMLPresentationElement::parseMathMLLength(v8, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v3 + 140))
      *(_BYTE *)(v3 + 140) = 1;
    *(_QWORD *)(v3 + 132) = v26;
    goto LABEL_39;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1480))(v2);
  v11 = v10 & 0xFF00000000;
  if (((*(_DWORD *)(v2 + 124) >> 13) & 6u) - 2 < 4)
  {
    v13 = (int *)(v2 + 152);
    if (v11)
      v12 = v10;
    else
      v12 = (*(_DWORD *)(v2 + 160) + (*(int *)(v2 + 160) < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  }
  else
  {
    if (v11)
      v12 = v10;
    else
      v12 = (*(_DWORD *)(v2 + 164) + (*(int *)(v2 + 164) < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    v13 = (int *)(v2 + 156);
  }
  v14 = *v13;
  v15 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  v17 = (v12 >> 31) + 0x7FFFFFFF;
  if (v15)
    v18 = v17;
  else
    v18 = v16;
  v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!*(_BYTE *)(v19 + 176))
  {
    v20 = *(_QWORD *)(v19 + 104);
    if (v20)
    {
      v21 = *(_DWORD *)(v20 + 4);
      if ((v21 & 1) != 0)
      {
        v22 = *(_QWORD *)(v20 + 40);
        LODWORD(v23) = *(_DWORD *)(v20 + 52);
        if ((_DWORD)v23)
        {
LABEL_27:
          v23 = v23;
          v24 = (WebCore::MathMLPresentationElement *)(v22 + 8);
          while (1)
          {
            v25 = *((_QWORD *)v24 - 1);
            if (v25 == WebCore::MathMLNames::voffsetAttr
              || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::MathMLNames::voffsetAttr + 24)
              && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::MathMLNames::voffsetAttr + 32))
            {
              goto LABEL_42;
            }
            v24 = (WebCore::MathMLPresentationElement *)((char *)v24 + 16);
            if (!--v23)
            {
              v24 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_42;
            }
          }
        }
      }
      else
      {
        v22 = v20 + 32;
        LODWORD(v23) = v21 >> 5;
        if ((_DWORD)v23)
          goto LABEL_27;
      }
    }
    v24 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_42:
    v29 = WebCore::MathMLPresentationElement::parseMathMLLength(v24, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v19 + 176))
      *(_BYTE *)(v19 + 176) = 1;
    *(_QWORD *)(v19 + 168) = v29;
  }
  v32 = 0;
  v30 = WebCore::toUserUnits(v19 + 168, (WebCore::RenderMathMLPadded *)((char *)this + 80), &v32);
  v28 = v18 + v30;
  if (__OFADD__(v18, v30))
    v28 = (v18 >> 31) + 0x7FFFFFFF;
  return v28 | 0x100000000;
}

void WebCore::RenderMathMLRoot::~RenderMathMLRoot(WebCore::RenderMathMLRoot *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::RenderMathMLRoot::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  WebCore::RenderMathMLBlock::styleDidChange(a1, a2, a3);
  WebCore::MathOperator::reset((WebCore::MathOperator *)(a1 + 208), (WebCore::Font **)(a1 + 80));
}

unint64_t WebCore::RenderMathMLRoot::horizontalParameters(uint64_t a1, void *a2)
{
  int v2;
  WebCore::Font *v4;
  WebCore::OpenTypeMathData *v5;
  WebCore::OpenTypeMathData *v6;
  float v7;
  double v8;
  int v9;
  void *v10;
  float v11;
  double v12;
  int v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  float v20;
  double v21;
  double v22;

  v2 = (int)a2;
  v4 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a1 + 112) + 32), a2);
  ++*(_DWORD *)v4;
  v5 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v4);
  if (v5)
  {
    v6 = v5;
    ++*(_DWORD *)v5;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v5);
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v8 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v12 = v11 * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v12 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v6, v10);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  else
  {
    v20 = *(float *)(*(_QWORD *)(a1 + 112) + 204);
    v21 = (float)((float)(v20 * 5.0) / 18.0) * 64.0;
    if (v21 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v21 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v21;
    }
    v22 = (float)((float)(v20 * -10.0) / 18.0) * 64.0;
    if (v22 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v22;
    }
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Font::~Font((WTF **)v4);
    WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  if (v2 == 0x80000000)
    LODWORD(v14) = 0x7FFFFFFF;
  else
    LODWORD(v14) = -v2;
  if ((int)v14 <= v13)
    v14 = v13;
  else
    v14 = v14;
  return v9 & ~(v9 >> 31) | (unint64_t)(v14 << 32);
}

unint64_t WebCore::RenderMathMLRoot::verticalParameters(WebCore::RenderMathMLRoot *this, void *a2)
{
  WebCore::Font *v3;
  WebCore::OpenTypeMathData *v4;
  void *v5;
  WebCore::OpenTypeMathData *v6;
  float v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  double v12;
  unsigned int v13;
  void *v14;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  double v20;
  double v21;
  uint64_t v22;

  v3 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), a2);
  ++*(_DWORD *)v3;
  v4 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v3);
  if (v4)
  {
    v6 = v4;
    ++*(_DWORD *)v4;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v4);
    v8 = v7 * 64.0;
    if (v8 > -2147483650.0)
      v9 = (int)v8;
    else
      v9 = 0x80000000;
    if (v8 < 2147483650.0)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFLL;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    v12 = v11 * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v12 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120) == 1)
      WebCore::OpenTypeMathData::getMathConstant((uint64_t)v6);
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v6, v14);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  else
  {
    v20 = (float)(*(float *)(*((_QWORD *)this + 14) + 204) * 0.05) * 64.0;
    if (v20 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFFLL;
    }
    else if (v20 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v20;
    }
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 238) & 0x10) != 0)
    {
      v22 = 5 * (int)v10;
      if (HIDWORD(v22) != (int)v22 >> 31)
        LODWORD(v22) = (v10 >> 31) + 0x7FFFFFFF;
      v13 = (int)v22 / 4;
    }
    else
    {
      v21 = (float)((float)((float)(int)v10 * 0.015625)
                  + (float)(*((float *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderMathMLRoot *)((char *)this + 80), v5)+ 9)* 0.25))* 64.0;
      if (v21 >= 2147483650.0)
      {
        v13 = 0x7FFFFFFF;
      }
      else if (v21 <= -2147483650.0)
      {
        v13 = 0x80000000;
      }
      else
      {
        v13 = (int)v21;
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Font::~Font((WTF **)v3);
    WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v13 | (unint64_t)(v10 << 32);
}

uint64_t WebCore::RenderMathMLRoot::computePreferredLogicalWidths(WebCore::RenderMathMLRoot *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::RenderBox *v9;
  WebCore::RenderBox *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  WebCore::RenderBox *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120))
  {
    v2 = *((unsigned int *)this + 16);
    v3 = v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
    if (!v3)
      goto LABEL_60;
    v3 = *(_QWORD *)((v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (!v3)
      goto LABEL_60;
    if ((*(_BYTE *)(v3 + 45) & 4) == 0)
      goto LABEL_59;
    v3 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
    if (!v3)
      goto LABEL_60;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4
      || (*(_BYTE *)(v4 + 45) & 4) == 0
      || (v5 = *(unsigned int *)(v4 + 47), v5 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
      && (v6 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8)) != 0
      && (*(_BYTE *)(v6 + 45) & 4) != 0)
    {
LABEL_59:
      LODWORD(v3) = 0;
      goto LABEL_60;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 416))(v4);
    v8 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if ((*(_BYTE *)(v8 + 45) & 4) == 0)
      v8 = 0;
    v9 = *(WebCore::RenderBox **)((*(unsigned int *)(v8 + 47) | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
                                + 8);
    if ((*((_BYTE *)v9 + 45) & 4) != 0)
      v10 = v9;
    else
      v10 = 0;
    v11 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v10);
    if (__OFADD__(v7, v11))
      v12 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v12 = v7 + v11;
    v13 = WebCore::RenderMathMLRoot::horizontalParameters((uint64_t)this, (void *)v12);
    v14 = v13 + v12;
    if (__OFADD__((_DWORD)v13, (_DWORD)v12))
      v14 = (v13 >> 31) + 0x7FFFFFFF;
    v15 = __OFADD__(v14, HIDWORD(v13));
    v16 = v14 + HIDWORD(v13);
    v17 = (v14 >> 31) + 0x7FFFFFFF;
    if (v15)
      v16 = v17;
    v18 = *((_DWORD *)this + 63);
    v15 = __OFADD__(v16, v18);
    v19 = v16 + v18;
    v20 = (v16 >> 31) + 0x7FFFFFFF;
    if (v15)
      v21 = v20;
    else
      v21 = v19;
    if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                               + 8)
                   + 45) & 4) != 0)
      v22 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    else
      v22 = 0;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 416))(v22);
    if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                               + 8)
                   + 45) & 4) != 0)
      v24 = *(WebCore::RenderBox **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                                   + 8);
    else
      v24 = 0;
    v25 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v24);
    v26 = v23 + v25;
    if (__OFADD__(v23, v25))
      v26 = (v23 >> 31) + 0x7FFFFFFF;
    v27 = v21 + v26;
    if (__OFADD__(v21, v26))
      v27 = (v21 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v28 = *((_DWORD *)this + 63);
    v29 = *((unsigned int *)this + 16);
    if (v29 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
      && (v30 = *(_QWORD *)((v29 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
      && (*(_BYTE *)(v30 + 45) & 4) != 0)
    {
      v31 = 0;
      do
      {
        if ((*(_DWORD *)(v30 + 20) & 0x1800000) != 0x1000000)
        {
          v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 416))(v30);
          v41 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v30);
          v42 = v40 + v41;
          if (__OFADD__(v40, v41))
            v42 = (v40 >> 31) + 0x7FFFFFFF;
          v15 = __OFADD__(v31, v42);
          v43 = v31 + v42;
          if (v15)
            v31 = (v31 >> 31) + 0x7FFFFFFF;
          else
            v31 = v43;
        }
        v44 = *(unsigned int *)(v30 + 47);
        if (!(v44 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)))
          break;
        v30 = *(_QWORD *)((v44 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)) + 8);
        if (!v30)
          break;
      }
      while ((*(_BYTE *)(v30 + 45) & 4) != 0);
    }
    else
    {
      v31 = 0;
    }
    if (__OFADD__(v28, v31))
      v27 = (v28 >> 31) + 0x7FFFFFFF;
    else
      v27 = v28 + v31;
  }
  v32 = (*(uint64_t (**)(WebCore::RenderMathMLRoot *))(*(_QWORD *)this + 1064))(this);
  v33 = (*(uint64_t (**)(WebCore::RenderMathMLRoot *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v32, v33))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  else
    v34 = v32 + v33;
  v35 = (*(uint64_t (**)(WebCore::RenderMathMLRoot *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v34, v35))
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  else
    v36 = v34 + v35;
  v37 = (*(uint64_t (**)(WebCore::RenderMathMLRoot *))(*(_QWORD *)this + 984))(this);
  v38 = v36 + v37;
  if (__OFADD__(v36, v37))
    v38 = (v36 >> 31) + 0x7FFFFFFF;
  v15 = __OFADD__(v27, v38);
  LODWORD(v3) = v27 + v38;
  if (v15)
    LODWORD(v3) = (v27 >> 31) + 0x7FFFFFFF;
LABEL_60:
  *((_DWORD *)this + 46) = v3;
  *((_DWORD *)this + 47) = v3;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

void WebCore::RenderMathMLRoot::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  double v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int *v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int *v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  int *v175;
  int v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  int *v212;
  int v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  int *v226;
  unsigned int v227;
  unsigned int v228;
  _DWORD *v229;
  uint64_t v230;
  WebCore::RenderLayerScrollableArea *v231;
  BOOL v232;
  int v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  char v237[24];

  if ((a2 & 1) == 0 && (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) != 0)
    return;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if (!(v3 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
      || (v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)) == 0
      || (*(_BYTE *)(v4 + 45) & 4) == 0
      || (v5 = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) == 0
      || (v6 = *(_QWORD *)(v5 + 8)) == 0
      || (*(_BYTE *)(v6 + 45) & 4) == 0
      || (v7 = *(unsigned int *)(v6 + 47) | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) != 0
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (*(_BYTE *)(v8 + 45) & 4) != 0)
    {
      WebCore::RenderMathMLBlock::layoutInvalidMarkup((WebCore::RenderMathMLBlock *)a1);
      return;
    }
  }
  v236 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  *(_WORD *)(a1 + 69) &= ~0x200u;
  v9 = *(unsigned __int8 *)(a1 + 68);
  for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v12 + 47))
  {
    v11 = i | (v9 << 32);
    if (!v11)
      break;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12 || (*(_BYTE *)(v12 + 45) & 4) == 0)
      break;
    WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v12, (const WebCore::RenderBlock *)a1);
    v9 = *(unsigned __int8 *)(v12 + 51);
  }
  v13 = (_DWORD *)(a1 + 280);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120))
  {
    WebCore::RenderMathMLRow::stretchVerticalOperatorsAndLayoutChildren((WebCore::RenderMathMLRow *)a1);
    WebCore::RenderMathMLRow::getContentBoundingBox(a1, (WebCore::LayoutUnit *)(a1 + 280), (WebCore::LayoutUnit *)((char *)&v236 + 4), (WebCore::LayoutUnit *)&v236);
    WebCore::RenderMathMLRow::layoutRowItems(a1, *(_DWORD *)(a1 + 280), HIDWORD(v236));
    goto LABEL_84;
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)
                 + 45) & 4) != 0)
    v14 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  else
    v14 = 0;
  if ((*(_BYTE *)(v14 + 20) & 0xF8) != 0)
  {
    v15 = *(_QWORD *)(v14 + 32);
    if (v15
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v16 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v14);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 688))(v14);
    }
  }
  v17 = *(unsigned int *)(a1 + 64);
  v18 = v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (v18)
  {
    v19 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v19 && (*(_BYTE *)(v19 + 45) & 4) == 0)
      v19 = 0;
  }
  else
  {
    v19 = 0;
  }
  if (((*(_DWORD *)(v19 + 124) >> 13) & 6u) - 2 < 4)
  {
    v21 = (unsigned int *)(v19 + 164);
    if (!v18)
      goto LABEL_44;
  }
  else
  {
    v21 = (unsigned int *)(v19 + 160);
    if (!v18)
      goto LABEL_44;
  }
  v22 = *(_QWORD *)(v18 + 8);
  if (v22)
  {
    if ((*(_BYTE *)(v22 + 45) & 4) != 0)
      v23 = v22;
    else
      v23 = 0;
    goto LABEL_45;
  }
LABEL_44:
  v23 = 0;
LABEL_45:
  v24 = *v21;
  v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 1128))(v23, 0);
  v26 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 1136))(v23, 0);
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    v27 = (v25 >> 31) + 0x7FFFFFFF;
  v28 = __OFADD__(v24, v27);
  v29 = v24 + v27;
  if (v28)
    v29 = (v24 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a1 + 280) = v29;
  v30 = *(unsigned int *)(a1 + 64);
  if (v30 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)
    && (v31 = *(_QWORD *)((v30 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)) != 0)
  {
    if ((*(_BYTE *)(v31 + 45) & 4) != 0)
      v32 = *(int **)((v30 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    else
      v32 = 0;
  }
  else
  {
    v32 = 0;
  }
  v33 = (*(uint64_t (**)(int *))(*(_QWORD *)v32 + 1480))(v32);
  if (((v32[31] >> 13) & 6) - 2 < 4)
    v34 = v32 + 40;
  else
    v34 = v32 + 41;
  v35 = 0;
  v36 = (*v34 + (*v34 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v33 & 0xFF00000000) != 0)
    v36 = v33;
  if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)
                 + 45) & 4) != 0)
    v37 = *(unsigned int **)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  else
    v37 = 0;
  v38 = v37[31];
  v39 = ((unsigned __int16)v38 >> 13) - 1;
  if (v39 <= 4)
    v35 = qword_1969FD5B0[v39];
  v40 = v37[v35 + 42];
  v41 = v36 + v40;
  if (__OFADD__(v36, v40))
    v41 = (v36 >> 31) + 0x7FFFFFFF;
  HIDWORD(v236) = v41;
  if (((v38 >> 13) & 6) - 2 < 4)
    v42 = v37 + 40;
  else
    v42 = v37 + 41;
  v43 = *v42;
  v44 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v37 + 1112))(v37, 0);
  v45 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v37 + 1120))(v37, 0);
  v46 = v44 + v45;
  if (__OFADD__(v44, v45))
    v46 = (v44 >> 31) + 0x7FFFFFFF;
  v28 = __OFADD__(v43, v46);
  v47 = v43 + v46;
  if (v28)
    v47 = (v43 >> 31) + 0x7FFFFFFF;
  v48 = v47 - v41;
  if (__OFSUB__(v47, v41))
    v48 = (v47 >> 31) + 0x7FFFFFFF;
  LODWORD(v236) = v48;
  v49 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v49 + 45) & 4) == 0)
    v49 = 0;
  v50 = *(_QWORD *)((*(unsigned int *)(v49 + 47) | ((unint64_t)*(unsigned __int8 *)(v49 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v50 + 45) & 4) != 0)
    v51 = v50;
  else
    v51 = 0;
  if ((*(_BYTE *)(v51 + 20) & 0xF8) != 0)
  {
    v52 = *(_QWORD *)(v51 + 32);
    if (v52
      && (v53 = *(_QWORD *)(v52 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v53 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v51);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 688))(v51);
    }
  }
LABEL_84:
  v54 = WebCore::RenderMathMLRoot::verticalParameters((WebCore::RenderMathMLRoot *)a1, v20);
  v56 = v55;
  v57 = HIDWORD(v55);
  v58 = (HIDWORD(v236) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v236), (_DWORD)v236))
    v58 = HIDWORD(v236) + v236;
  v28 = __OFADD__(v58, (_DWORD)v54);
  v59 = v58 + v54;
  v60 = (v58 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v60 = v59;
  v28 = __OFADD__(v60, HIDWORD(v54));
  v61 = v60 + HIDWORD(v54);
  v62 = (v60 >> 31) + 0x7FFFFFFF;
  if (v28)
    v63 = v62;
  else
    v63 = v61;
  WebCore::MathOperator::calculateStretchyData((int *)(a1 + 208), a1 + 80, 0, v63);
  if (*(_DWORD *)(a1 + 216) == 2)
  {
    if (*(_DWORD *)(a1 + 212) == 2)
    {
      *(_DWORD *)(a1 + 260) = v63;
      *(_DWORD *)(a1 + 264) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 256) = v63;
    }
  }
  v64 = *(_DWORD *)(a1 + 260);
  v65 = *(_DWORD *)(a1 + 264);
  v28 = __OFADD__(v64, v65);
  v66 = v64 + v65;
  if (v28)
    v66 = (v64 >> 31) + 0x7FFFFFFF;
  v67 = (float)((float)((float)v66 * 0.015625) * *(float *)&v57) * 64.0;
  if (v67 >= 2147483650.0)
  {
    v68 = 0x7FFFFFFF;
  }
  else if (v67 <= -2147483650.0)
  {
    v68 = 0x80000000;
  }
  else
  {
    v68 = (int)v67;
  }
  v235 = v68;
  v69 = HIDWORD(v236) + v54;
  if (__OFADD__(HIDWORD(v236), (_DWORD)v54))
    v69 = (HIDWORD(v236) >> 31) + 0x7FFFFFFF;
  v70 = v69 + HIDWORD(v54);
  if (__OFADD__(v69, HIDWORD(v54)))
    v70 = (v69 >> 31) + 0x7FFFFFFF;
  v71 = v70 + v56;
  if (__OFADD__(v70, v56))
    v71 = (v70 >> 31) + 0x7FFFFFFF;
  v72 = v66 + v56;
  if (__OFADD__(v66, v56))
    v72 = (v66 >> 31) + 0x7FFFFFFF;
  v73 = v72 - v71;
  if (__OFSUB__(v72, v71))
    v73 = (v72 >> 31) + 0x7FFFFFFF;
  if ((int)v236 <= v73)
    v74 = v73;
  else
    v74 = v236;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120))
  {
    v75 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if ((*(_BYTE *)(v75 + 45) & 4) == 0)
      v75 = 0;
    v76 = *(unsigned int *)(v75 + 47) | ((unint64_t)*(unsigned __int8 *)(v75 + 51) << 32);
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 8);
      if (v77 && (*(_BYTE *)(v77 + 45) & 4) == 0)
        v77 = 0;
    }
    else
    {
      v77 = 0;
    }
    if (((*(_DWORD *)(v77 + 124) >> 13) & 6u) - 2 < 4)
    {
      v91 = (unsigned int *)(v77 + 164);
      if (!v76)
        goto LABEL_146;
    }
    else
    {
      v91 = (unsigned int *)(v77 + 160);
      if (!v76)
        goto LABEL_146;
    }
    v92 = *(_QWORD *)(v76 + 8);
    if (v92)
    {
      if ((*(_BYTE *)(v92 + 45) & 4) != 0)
        v93 = v92;
      else
        v93 = 0;
LABEL_147:
      v94 = *v91;
      v95 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 1128))(v93, 0);
      v96 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 1136))(v93, 0);
      v97 = v95 + v96;
      if (__OFADD__(v95, v96))
        v97 = (v95 >> 31) + 0x7FFFFFFF;
      v98 = v94 + v97;
      if (__OFADD__(v94, v97))
        v98 = (v94 >> 31) + 0x7FFFFFFF;
      v99 = WebCore::RenderMathMLRoot::horizontalParameters(a1, (void *)v98);
      v89 = v99;
      v90 = HIDWORD(v99);
      v100 = v99 + v98;
      if (__OFADD__((_DWORD)v99, v98))
        v100 = (v99 >> 31) + 0x7FFFFFFF;
      v101 = v100 + HIDWORD(v99);
      if (__OFADD__(v100, HIDWORD(v99)))
        v101 = (v100 >> 31) + 0x7FFFFFFF;
      v102 = *(_DWORD *)(a1 + 256);
      v28 = __OFADD__(v101, v102);
      v103 = v101 + v102;
      if (v28)
        v103 = (v101 >> 31) + 0x7FFFFFFF;
      v104 = v103 + *v13;
      if (__OFADD__(v103, *v13))
        v104 = (v103 >> 31) + 0x7FFFFFFF;
      v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
      v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
      v107 = v105 + v106;
      if (__OFADD__(v105, v106))
        v107 = (v105 >> 31) + 0x7FFFFFFF;
      v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
      v109 = v107 + v108;
      if (__OFADD__(v107, v108))
        v109 = (v107 >> 31) + 0x7FFFFFFF;
      v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
      v111 = v109 + v110;
      if (__OFADD__(v109, v110))
        v111 = (v109 >> 31) + 0x7FFFFFFF;
      v28 = __OFADD__(v104, v111);
      v88 = v104 + v111;
      if (v28)
        v88 = (v104 >> 31) + 0x7FFFFFFF;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
        goto LABEL_168;
      goto LABEL_363;
    }
LABEL_146:
    v93 = 0;
    goto LABEL_147;
  }
  v78 = *(_DWORD *)(a1 + 256);
  v79 = *(_DWORD *)(a1 + 280);
  v80 = v78 + v79;
  if (__OFADD__(v78, v79))
    v80 = (v78 >> 31) + 0x7FFFFFFF;
  v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  v83 = v81 + v82;
  if (__OFADD__(v81, v82))
    v83 = (v81 >> 31) + 0x7FFFFFFF;
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v85 = v83 + v84;
  if (__OFADD__(v83, v84))
    v85 = (v83 >> 31) + 0x7FFFFFFF;
  v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v87 = v85 + v86;
  if (__OFADD__(v85, v86))
    v87 = (v85 >> 31) + 0x7FFFFFFF;
  v28 = __OFADD__(v80, v87);
  v88 = v80 + v87;
  if (v28)
    v88 = (v80 >> 31) + 0x7FFFFFFF;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
  {
    v89 = 0;
    LODWORD(v90) = 0;
LABEL_168:
    *(_DWORD *)(a1 + 160) = v88;
    goto LABEL_169;
  }
  v89 = 0;
  LODWORD(v90) = 0;
LABEL_363:
  *(_DWORD *)(a1 + 164) = v88;
LABEL_169:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120) == 1)
  {
    v112 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if ((*(_BYTE *)(v112 + 45) & 4) == 0)
      v112 = 0;
    v113 = *(unsigned int *)(v112 + 47) | ((unint64_t)*(unsigned __int8 *)(v112 + 51) << 32);
    if (v113 && (v114 = *(_QWORD *)(v113 + 8)) != 0)
    {
      if ((*(_BYTE *)(v114 + 45) & 4) != 0)
        v115 = (int *)v114;
      else
        v115 = 0;
    }
    else
    {
      v115 = 0;
    }
    v118 = (*(uint64_t (**)(int *))(*(_QWORD *)v115 + 1480))(v115);
    if (((v115[31] >> 13) & 6) - 2 < 4)
      v119 = v115 + 40;
    else
      v119 = v115 + 41;
    v120 = 0;
    v121 = (*v119 + (*v119 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    if ((v118 & 0xFF00000000) != 0)
      v121 = v118;
    v122 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if ((*(_BYTE *)(v122 + 45) & 4) == 0)
      v122 = 0;
    v123 = *(_QWORD *)((*(unsigned int *)(v122 + 47) | ((unint64_t)*(unsigned __int8 *)(v122 + 51) << 32)) + 8);
    if ((*(_BYTE *)(v123 + 45) & 4) != 0)
      v124 = (unsigned int *)v123;
    else
      v124 = 0;
    v125 = v124[31];
    v126 = ((unsigned __int16)v125 >> 13) - 1;
    if (v126 <= 4)
      v120 = qword_1969FD5B0[v126];
    v127 = v124[v120 + 42];
    v28 = __OFADD__(v121, v127);
    v128 = v121 + v127;
    if (v28)
      v128 = (v121 >> 31) + 0x7FFFFFFF;
    v234 = v128;
    v116 = v90;
    if (((v125 >> 13) & 6) - 2 < 4)
      v129 = v124 + 40;
    else
      v129 = v124 + 41;
    v130 = *v129;
    v131 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v124 + 1112))(v124, 0);
    v132 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v124 + 1120))(v124, 0);
    v133 = v131 + v132;
    if (__OFADD__(v131, v132))
      v133 = (v131 >> 31) + 0x7FFFFFFF;
    v28 = __OFADD__(v130, v133);
    v134 = v130 + v133;
    if (v28)
      v134 = (v130 >> 31) + 0x7FFFFFFF;
    v135 = v134 - v234;
    if (__OFSUB__(v134, v234))
      v135 = (v134 >> 31) + 0x7FFFFFFF;
    v136 = v235 + v135;
    v233 = v135;
    if (__OFADD__(v235, v135))
      v136 = (v235 >> 31) + 0x7FFFFFFF;
    v137 = v136 + v234;
    if (__OFADD__(v136, v234))
      v137 = (v136 >> 31) + 0x7FFFFFFF;
    v138 = v137 - v74;
    if (__OFSUB__(v137, v74))
      v138 = (v137 >> 31) + 0x7FFFFFFF;
    if (v71 <= v138)
      v117 = v138;
    else
      v117 = v71;
  }
  else
  {
    v116 = v90;
    v233 = 0;
    v234 = 0;
    v117 = v71;
  }
  v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  v141 = v139 + v140;
  if (__OFADD__(v139, v140))
    v141 = (v139 >> 31) + 0x7FFFFFFF;
  v142 = v117 + v141;
  if (__OFADD__(v117, v141))
    v142 = (v117 >> 31) + 0x7FFFFFFF;
  v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v145 = v143 + v144;
  if (__OFADD__(v143, v144))
    v145 = (v143 >> 31) + 0x7FFFFFFF;
  v146 = v74 + v145;
  if (__OFADD__(v74, v145))
    v146 = (v74 >> 31) + 0x7FFFFFFF;
  v147 = v142 - v71;
  if (__OFSUB__(v142, v71))
    v147 = (v142 >> 31) + 0x7FFFFFFF;
  v148 = v147 + v56;
  if (__OFADD__(v147, v56))
    v148 = (v147 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a1 + 276) = v148;
  v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v151 = v149 + v150;
  if (__OFADD__(v149, v150))
    v151 = (v149 >> 31) + 0x7FFFFFFF;
  v152 = *(_DWORD *)(a1 + 256);
  v153 = v151 + v152;
  if (__OFADD__(v151, v152))
    v153 = (v151 >> 31) + 0x7FFFFFFF;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120) == 1)
  {
    v154 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if ((*(_BYTE *)(v154 + 45) & 4) == 0)
      v154 = 0;
    v155 = *(unsigned int *)(v154 + 47) | ((unint64_t)*(unsigned __int8 *)(v154 + 51) << 32);
    if (v155)
    {
      v156 = *(_QWORD *)(v155 + 8);
      if (v156 && (*(_BYTE *)(v156 + 45) & 4) == 0)
        v156 = 0;
    }
    else
    {
      v156 = 0;
    }
    if (((*(_DWORD *)(v156 + 124) >> 13) & 6u) - 2 < 4)
      v157 = (int *)(v156 + 164);
    else
      v157 = (int *)(v156 + 160);
    v158 = *v157;
    v159 = v89 + v158;
    if (__OFADD__(v89, v158))
    {
      v159 = (v89 >> 31) + 0x7FFFFFFF;
      if (!v155)
        goto LABEL_243;
    }
    else if (!v155)
    {
      goto LABEL_243;
    }
    v160 = *(_QWORD *)(v155 + 8);
    if (v160)
    {
      if ((*(_BYTE *)(v160 + 45) & 4) != 0)
        v161 = v160;
      else
        v161 = 0;
      goto LABEL_244;
    }
LABEL_243:
    v161 = 0;
LABEL_244:
    v162 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 1128))(v161, 0);
    v163 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 1136))(v161, 0);
    v164 = v162 + v163;
    if (__OFADD__(v162, v163))
      v164 = (v162 >> 31) + 0x7FFFFFFF;
    v28 = __OFADD__(v159, v164);
    v165 = v159 + v164;
    if (v28)
      v165 = (v159 >> 31) + 0x7FFFFFFF;
    v166 = v165 + v116;
    if (__OFADD__(v165, v116))
      v166 = (v165 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v153, v166))
      v153 = (v153 >> 31) + 0x7FFFFFFF;
    else
      v153 += v166;
  }
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120))
  {
    if ((*(_BYTE *)(a1 + 123) & 4) != 0)
    {
      v183 = *(_DWORD *)(a1 + 280);
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v184 = (unsigned int *)(a1 + 164);
      else
        v184 = (unsigned int *)(a1 + 160);
      v185 = *v184;
      v28 = __OFSUB__(v185, v183);
      v186 = v185 - v183;
      if (v28)
        v186 = (v185 >> 31) + 0x7FFFFFFF;
      v28 = __OFSUB__(v186, v153);
      v153 = v186 - v153;
      if (v28)
        v153 = (v186 >> 31) + 0x7FFFFFFF;
    }
    v187 = v142 - HIDWORD(v236);
    if (__OFSUB__(v142, HIDWORD(v236)))
      v187 = (v142 >> 31) + 0x7FFFFFFF;
    v188 = *(unsigned int *)(a1 + 64);
    if (v188 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v189 = *(_QWORD *)((v188 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v189)
      {
        while ((*(_BYTE *)(v189 + 45) & 4) != 0)
        {
          v191 = *(_DWORD *)(v189 + 152);
          v190 = *(_DWORD *)(v189 + 156);
          v28 = __OFADD__(v191, v153);
          v192 = v191 + v153;
          LODWORD(v193) = (v191 >> 31) + 0x7FFFFFFF;
          if (v28)
            v193 = v193;
          else
            v193 = v192;
          v28 = __OFADD__(v190, v187);
          v194 = v190 + v187;
          LODWORD(v195) = (v190 >> 31) + 0x7FFFFFFF;
          if (v28)
            v195 = v195;
          else
            v195 = v194;
          *(_QWORD *)(v189 + 152) = v193 | (v195 << 32);
          v196 = *(unsigned int *)(v189 + 47) | ((unint64_t)*(unsigned __int8 *)(v189 + 51) << 32);
          if (!v196)
            break;
          v189 = *(_QWORD *)(v196 + 8);
          if (!v189)
            break;
        }
      }
    }
    goto LABEL_338;
  }
  v167 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v167 + 45) & 4) == 0)
    v167 = 0;
  v168 = *(_DWORD *)(v167 + 120);
  v169 = *(_DWORD *)(v167 + 124);
  v170 = (unsigned __int16)v169 >> 13;
  v171 = (v168 >> 26) & 1;
  if ((v170 - 2) >= 2)
  {
    if ((_DWORD)v170 == 4)
    {
      v171 = (v168 & 0x4000000) == 0;
    }
    else if ((_DWORD)v170 != 5)
    {
      v172 = 3;
      if ((v168 & 0x4000000) != 0)
        v172 = 1;
      goto LABEL_260;
    }
  }
  v232 = v171 == 0;
  v172 = 2;
  if (v232)
    v172 = 0;
LABEL_260:
  v173 = *(_DWORD *)(v167 + 168 + 4 * v172);
  v28 = __OFADD__(v153, v173);
  v174 = v153 + v173;
  if (v28)
    v174 = (v153 >> 31) + 0x7FFFFFFF;
  if (((v169 >> 13) & 6) - 2 < 4)
    v175 = (int *)(v167 + 164);
  else
    v175 = (int *)(v167 + 160);
  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v176 = *v175;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v177 = (unsigned int *)(a1 + 164);
    else
      v177 = (unsigned int *)(a1 + 160);
    v178 = *v177;
    v28 = __OFSUB__(v178, v176);
    v179 = v178 - v176;
    if (v28)
      v179 = (v178 >> 31) + 0x7FFFFFFF;
    v28 = __OFSUB__(v179, v174);
    v174 = v179 - v174;
    if (v28)
      v174 = (v179 >> 31) + 0x7FFFFFFF;
  }
  v180 = v142 - HIDWORD(v236);
  if (__OFSUB__(v142, HIDWORD(v236)))
    v180 = (v142 >> 31) + 0x7FFFFFFF;
  v181 = v170 - 1;
  if (v181 > 4)
    v182 = 0;
  else
    v182 = qword_1969FD5B0[v181];
  v197 = *(_DWORD *)(v167 + 168 + 4 * v182);
  v28 = __OFADD__(v180, v197);
  v198 = v180 + v197;
  if (v28)
    v198 = (v180 >> 31) + 0x7FFFFFFF;
  *(_QWORD *)(v167 + 152) = v174 | (unint64_t)(v198 << 32);
  v199 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v201 = v199 + v200;
  if (__OFADD__(v199, v200))
    v201 = (v199 >> 31) + 0x7FFFFFFF;
  v202 = v201 + v89;
  if (__OFADD__(v201, v89))
    v202 = (v201 >> 31) + 0x7FFFFFFF;
  v203 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if ((*(_BYTE *)(v203 + 45) & 4) == 0)
    v203 = 0;
  v204 = *(_QWORD *)((*(unsigned int *)(v203 + 47) | ((unint64_t)*(unsigned __int8 *)(v203 + 51) << 32)) + 8);
  if ((*(_BYTE *)(v204 + 45) & 4) == 0)
    v204 = 0;
  v205 = *(_DWORD *)(v204 + 120);
  v206 = *(_DWORD *)(v204 + 124);
  v207 = (unsigned __int16)v206 >> 13;
  v208 = (v205 >> 26) & 1;
  if ((v207 - 2) < 2)
    goto LABEL_373;
  if ((_DWORD)v207 == 4)
  {
    v208 = (v205 & 0x4000000) == 0;
LABEL_373:
    v232 = v208 == 0;
    v209 = 2;
    if (v232)
      v209 = 0;
    goto LABEL_313;
  }
  if ((_DWORD)v207 == 5)
    goto LABEL_373;
  v209 = 3;
  if ((v205 & 0x4000000) != 0)
    v209 = 1;
LABEL_313:
  v210 = *(_DWORD *)(v204 + 168 + 4 * v209);
  v28 = __OFADD__(v202, v210);
  v211 = v202 + v210;
  if (v28)
    v211 = (v202 >> 31) + 0x7FFFFFFF;
  if (((v206 >> 13) & 6) - 2 < 4)
    v212 = (int *)(v204 + 164);
  else
    v212 = (int *)(v204 + 160);
  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v213 = *v212;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v214 = (unsigned int *)(a1 + 164);
    else
      v214 = (unsigned int *)(a1 + 160);
    v215 = *v214;
    v28 = __OFSUB__(v215, v213);
    v216 = v215 - v213;
    if (v28)
      v216 = (v215 >> 31) + 0x7FFFFFFF;
    v28 = __OFSUB__(v216, v211);
    v211 = v216 - v211;
    if (v28)
      v211 = (v216 >> 31) + 0x7FFFFFFF;
  }
  v217 = v142 + v146;
  if (__OFADD__(v142, v146))
    v217 = (v142 >> 31) + 0x7FFFFFFF;
  v218 = v217 - v235;
  if (__OFSUB__(v217, v235))
    v218 = (v217 >> 31) + 0x7FFFFFFF;
  v219 = v218 - v233;
  if (__OFSUB__(v218, v233))
    v219 = (v218 >> 31) + 0x7FFFFFFF;
  v220 = v219 - v234;
  if (__OFSUB__(v219, v234))
    v220 = (v219 >> 31) + 0x7FFFFFFF;
  v221 = v207 - 1;
  if (v221 > 4)
    v222 = 0;
  else
    v222 = qword_1969FD5B0[v221];
  v223 = *(_DWORD *)(v204 + 168 + 4 * v222);
  v28 = __OFADD__(v220, v223);
  v224 = v220 + v223;
  if (v28)
    v224 = (v220 >> 31) + 0x7FFFFFFF;
  *(_QWORD *)(v204 + 152) = v211 | (unint64_t)(v224 << 32);
LABEL_338:
  v225 = v142 + v146;
  if (__OFADD__(v142, v146))
    v225 = (v142 >> 31) + 0x7FFFFFFF;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v226 = (int *)(a1 + 160);
  else
    v226 = (int *)(a1 + 164);
  *v226 = v225;
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v228 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v228 > 5 || ((1 << v228) & 0x2A) == 0)
      && (v229 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v229)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v229 + 2), (_QWORD *)a1, (uint64_t)v237);
    }
    else
    {
      v230 = *(_QWORD *)(a1 + 144);
      if (v230)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v231 = *(WebCore::RenderLayerScrollableArea **)(v230 + 264);
        if (v231)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v231);
      }
    }
  }
  v227 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v227;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v227 & 0xFFDFFE07;
}

unint64_t WebCore::RenderMathMLRoot::paint(WebCore::RenderMathMLRoot *this, WebCore::GraphicsContext **a2, const WebCore::LayoutPoint *a3)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  WebCore::GraphicsContext *v52;
  WebCore::GraphicsContext *v53;
  float v54;
  WebCore::GraphicsContext *v55;
  WebCore::GraphicsContext *v56;
  void *v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  int64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  char *v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  WebCore::GraphicsContext *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  float v90[2];
  unint64_t v91;
  _DWORD v92[2];

  result = WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)a2, a3);
  v7 = *((unsigned int *)this + 16);
  if (v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    if (*(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
    {
      result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2[10] + 40))(a2[10]);
      if ((result & 1) == 0
        && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
        && (*((_BYTE *)this + 120) & 0x30) == 0)
      {
        if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120)
          || (v8 = *((unsigned int *)this + 16), v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
          && (v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
          && (*(_BYTE *)(v9 + 45) & 4) != 0
          && (v10 = *(unsigned int *)(v9 + 47) | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) != 0
          && (v11 = *(_QWORD *)(v10 + 8)) != 0
          && (*(_BYTE *)(v11 + 45) & 4) != 0
          && ((v12 = *(unsigned int *)(v11 + 47) | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) == 0
           || (v13 = *(_QWORD *)(v12 + 8)) == 0
           || (*(_BYTE *)(v13 + 45) & 4) == 0))
        {
          v15 = *((_DWORD *)this + 38);
          v14 = *((_DWORD *)this + 39);
          v16 = *(_DWORD *)a3 + v15;
          if (__OFADD__(*(_DWORD *)a3, v15))
            v16 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
          v17 = *((_DWORD *)a3 + 1);
          v18 = v17 + v14;
          if (__OFADD__(v17, v14))
            v18 = (v17 >> 31) + 0x7FFFFFFF;
          v19 = (*(uint64_t (**)(WebCore::RenderMathMLRoot *))(*(_QWORD *)this + 1064))(this);
          v20 = (*(uint64_t (**)(WebCore::RenderMathMLRoot *))(*(_QWORD *)this + 976))(this);
          if (__OFADD__(v19, v20))
            v21 = (v19 >> 31) + 0x7FFFFFFF;
          else
            v21 = v19 + v20;
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120) == 1)
          {
            v22 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                            + 8);
            if ((*(_BYTE *)(v22 + 45) & 4) == 0)
              v22 = 0;
            v23 = *(unsigned int *)(v22 + 47) | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 8);
              if (v24 && (*(_BYTE *)(v24 + 45) & 4) == 0)
                v24 = 0;
            }
            else
            {
              v24 = 0;
            }
            v25 = ((*(_DWORD *)(v24 + 124) >> 13) & 6u) - 2 >= 4;
            v26 = (unsigned int *)(v24 + 164);
            v27 = (unsigned int *)(v24 + 160);
            if (!v25)
              v27 = v26;
            v28 = *v27;
            if (v23 && (v29 = *(_QWORD *)(v23 + 8)) != 0)
            {
              if ((*(_BYTE *)(v29 + 45) & 4) != 0)
                v30 = v29;
              else
                v30 = 0;
            }
            else
            {
              v30 = 0;
            }
            v31 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 1128))(v30, 0);
            v32 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 1136))(v30, 0);
            v33 = v31 + v32;
            if (__OFADD__(v31, v32))
              v33 = (v31 >> 31) + 0x7FFFFFFF;
            v62 = __OFADD__(v28, v33);
            v34 = v28 + v33;
            if (v62)
              v35 = (v28 >> 31) + 0x7FFFFFFF;
            else
              v35 = v34;
            v36 = WebCore::RenderMathMLRoot::horizontalParameters((uint64_t)this, (void *)v35);
            v37 = v36 + v35;
            if (__OFADD__((_DWORD)v36, (_DWORD)v35))
              v37 = (v36 >> 31) + 0x7FFFFFFF;
            v62 = __OFADD__(v37, HIDWORD(v36));
            v38 = v37 + HIDWORD(v36);
            v39 = (v37 >> 31) + 0x7FFFFFFF;
            if (v62)
              v38 = v39;
            v62 = __OFADD__(v21, v38);
            v40 = v21 + v38;
            if (v62)
              v21 = (v21 >> 31) + 0x7FFFFFFF;
            else
              v21 = v40;
          }
          v41 = v21;
          if ((*((_BYTE *)this + 123) & 4) != 0)
          {
            v42 = *((_DWORD *)this + 64);
            if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
              v43 = (char *)this + 164;
            else
              v43 = (char *)this + 160;
            v44 = *(_DWORD *)v43;
            v62 = __OFSUB__(v44, v42);
            v45 = v44 - v42;
            if (v62)
              v45 = (v44 >> 31) + 0x7FFFFFFF;
            v41 = v45 - v21;
            if (__OFSUB__(v45, v21))
              v41 = (v45 >> 31) + 0x7FFFFFFF;
          }
          v46 = *((_DWORD *)this + 69);
          v62 = __OFADD__(v16, v41);
          v47 = v16 + v41;
          if (v62)
            v47 = (v16 >> 31) + 0x7FFFFFFF;
          v92[0] = v47;
          v62 = __OFADD__(v18, v46);
          v48 = v18 + v46;
          if (v62)
            v48 = (v18 >> 31) + 0x7FFFFFFF;
          v92[1] = v48;
          WebCore::MathOperator::paint((WebCore::RenderMathMLRoot *)((char *)this + 208), (WebCore::RenderMathMLRoot *)((char *)this + 80), (WebCore::PaintInfo *)a2, (const WebCore::LayoutPoint *)v92);
          result = WebCore::RenderMathMLRoot::verticalParameters(this, v49);
          v50 = HIDWORD(result);
          if (HIDWORD(result))
          {
            v51 = result;
            v52 = a2[10];
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v52 + 96))(v52, 1);
            v53 = a2[10];
            v54 = (float)(int)v50 * 0.015625;
            if (*((float *)v53 + 47) != v54)
            {
              *((float *)v53 + 47) = v54;
              *((_DWORD *)v53 + 46) |= 8u;
            }
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v53 + 88))(v53, (uint64_t)v53 + 8);
            v55 = a2[10];
            if (*((_BYTE *)v55 + 193) != 1)
            {
              *((_BYTE *)v55 + 193) = 1;
              *((_DWORD *)v55 + 46) |= 0x10u;
            }
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v55 + 88))(v55, (uint64_t)v55 + 8);
            v56 = a2[10];
            WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, &v91);
            WebCore::GraphicsContext::setStrokeColor(v56, (const WebCore::Color *)&v91);
            if ((v91 & 0x8000000000000) != 0)
            {
              v87 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
              do
              {
                v88 = __ldaxr(v87);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, v87));
              if (!v89)
              {
                atomic_store(1u, v87);
                WTF::fastFree((WTF *)v87, v57);
              }
            }
            v58 = *((_DWORD *)this + 38);
            v59 = *((_DWORD *)this + 39);
            v62 = __OFADD__(*(_DWORD *)a3, v58);
            v60 = *(_DWORD *)a3 + v58;
            if (v62)
              v60 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
            v61 = *((_DWORD *)a3 + 1);
            v62 = __OFADD__(v61, v59);
            v63 = v61 + v59;
            if (__OFADD__(v61, v59))
              v63 = (v61 >> 31) + 0x7FFFFFFF;
            v64 = (v51 >> 26) & 0xFFFFFFFFFFFFFFC0;
            if (v51 >> 26 < 0 != v62)
              v64 += 127;
            v65 = v64 >> 7;
            if (v65 <= (uint64_t)0xFFFFFFFF80000000)
              v65 = 0xFFFFFFFF80000000;
            if (v65 >= 0x7FFFFFFF)
              LODWORD(v65) = 0x7FFFFFFF;
            v66 = *((_DWORD *)this + 69);
            v62 = __OFADD__(v66, (_DWORD)v65);
            v67 = v66 + v65;
            if (v62)
              v67 = (v66 >> 31) + 0x7FFFFFFF;
            v62 = __OFADD__(v63, v67);
            v68 = v63 + v67;
            if (v62)
              v68 = (v63 >> 31) + 0x7FFFFFFF;
            v69 = *((_DWORD *)this + 64);
            v62 = __OFADD__(v21, v69);
            v70 = v21 + v69;
            if (v62)
              v71 = (v21 >> 31) + 0x7FFFFFFF;
            else
              v71 = v70;
            v72 = *((_DWORD *)this + 30);
            v73 = v71;
            if ((v72 & 0x4000000) != 0)
            {
              v74 = (char *)this + 164;
              if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
                v74 = (char *)this + 160;
              v75 = *(_DWORD *)v74;
              v62 = __OFSUB__(v75, v71);
              v76 = v75 - v71;
              v73 = (v75 >> 31) + 0x7FFFFFFF;
              if (!v62)
                v73 = v76;
            }
            v62 = __OFADD__(v60, v73);
            v77 = v60 + v73;
            if (v62)
              v77 = (v60 >> 31) + 0x7FFFFFFF;
            v78 = *((_DWORD *)this + 70);
            v62 = __OFADD__(v71, v78);
            v79 = v71 + v78;
            v80 = (v71 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v80 = v79;
            if ((v72 & 0x4000000) != 0)
            {
              v81 = (char *)this + 164;
              if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
                v81 = (char *)this + 160;
              v82 = *(_DWORD *)v81;
              v62 = __OFSUB__(v82, v80);
              v80 = v82 - v80;
              v83 = (v82 >> 31) + 0x7FFFFFFF;
              if (v62)
                v80 = v83;
            }
            v62 = __OFADD__(v60, v80);
            v84 = v60 + v80;
            v85 = (v60 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v85 = v84;
            v86 = a2[10];
            *(float *)&v91 = (float)v77 * 0.015625;
            *((float *)&v91 + 1) = (float)v68 * 0.015625;
            v90[0] = (float)v85 * 0.015625;
            v90[1] = *((float *)&v91 + 1);
            (*(void (**)(WebCore::GraphicsContext *, unint64_t *, float *))(*(_QWORD *)v86 + 152))(v86, &v91, v90);
            return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v52 + 104))(v52, 1);
          }
        }
      }
    }
  }
  return result;
}

const char *WebCore::RenderMathMLFenced::renderName(WebCore::RenderMathMLFenced *this)
{
  return "RenderMathMLFenced";
}

const char *WebCore::RenderMathMLOperator::renderName(WebCore::RenderMathMLOperator *this)
{
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return "RenderMathMLOperator (anonymous)";
  else
    return "RenderMathMLOperator";
}

uint64_t WebCore::RenderMathMLOperator::isRenderMathMLOperator(WebCore::RenderMathMLOperator *this)
{
  return 1;
}

uint64_t WebCore::RenderMathMLToken::isRenderMathMLToken(WebCore::RenderMathMLToken *this)
{
  return 1;
}

uint64_t WebCore::RenderMathMLToken::isChildAllowed(WebCore::RenderMathMLToken *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

BOOL WebCore::RenderMathMLFencedOperator::hasOperatorFlag(uint64_t a1, __int16 a2)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 320) & a2) != 0;
}

uint64_t WebCore::RenderMathMLFencedOperator::isVertical(WebCore::RenderMathMLFencedOperator *this)
{
  return *((unsigned __int8 *)this + 308);
}

uint64_t WebCore::RenderMathMLFencedOperator::textContent(WebCore::RenderMathMLFencedOperator *this)
{
  return *((unsigned int *)this + 76);
}

uint64_t WebCore::RenderMathMLFencedOperator::minSize(WebCore::RenderMathMLFencedOperator *this)
{
  double v1;

  v1 = *(float *)(*((_QWORD *)this + 14) + 204) * 64.0;
  if (v1 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v1 <= -2147483650.0)
    return 0x80000000;
  return (int)v1;
}

uint64_t WebCore::RenderMathMLFencedOperator::maxSize(WebCore::RenderMathMLFencedOperator *this)
{
  return 2147483584;
}

uint64_t WebCore::RenderMathMLFencedOperator::useMathOperator(WebCore::RenderMathMLFencedOperator *this)
{
  return 1;
}

const char *WebCore::RenderMathMLFraction::renderName(WebCore::RenderMathMLFraction *this)
{
  return "RenderMathMLFraction";
}

const char *WebCore::RenderMathMLMath::renderName(WebCore::RenderMathMLMath *this)
{
  return "RenderMathMLMath";
}

const char *WebCore::RenderMathMLMenclose::renderName(WebCore::RenderMathMLMenclose *this)
{
  return "RenderMathMLMenclose";
}

const char *WebCore::RenderMathMLPadded::renderName(WebCore::RenderMathMLPadded *this)
{
  return "RenderMathMLPadded";
}

const char *WebCore::RenderMathMLRoot::renderName(WebCore::RenderMathMLRoot *this)
{
  return "RenderMathMLRoot";
}

BOOL WebCore::RenderMathMLRoot::isRenderMathMLSquareRoot(WebCore::RenderMathMLRoot *this)
{
  return *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120) == 0;
}

void WebCore::RenderMathMLRow::~RenderMathMLRow(WebCore::RenderMathMLRow *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

unint64_t WebCore::RenderMathMLRow::firstLineBaseline(WebCore::RenderMathMLRow *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;

  v1 = *((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
  if (!v1)
    goto LABEL_5;
  v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v2 || (*(_BYTE *)(v2 + 45) & 4) == 0)
  {
    v1 = 0;
LABEL_5:
    v3 = 0;
    v4 = 0;
    return v1 | v4 | v3;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1480))(v2);
  v6 = *(_DWORD *)(v2 + 124);
  v7 = ((v6 >> 13) & 6) - 2;
  v8 = (int *)(v2 + 160);
  if (v7 >= 4)
    v8 = (int *)(v2 + 164);
  v9 = (*v8 + (*v8 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v5 & 0xFF00000000) != 0)
    v9 = v5;
  v10 = ((unsigned __int16)v6 >> 13) - 1;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_1969FDAA0[v10];
  v12 = *(_DWORD *)(v2 + 4 * v11 + 168);
  v13 = __OFADD__(v9, v12);
  v14 = v9 + v12;
  v15 = (v9 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  v16 = v7 >= 4;
  v17 = (int *)(v2 + 152);
  if (v16)
    v17 = (int *)(v2 + 156);
  v18 = *v17;
  v13 = __OFADD__(v15, v18);
  v19 = v15 + v18;
  v20 = (v15 >> 31) + 0x7FFFFFFF;
  if (v13)
    v19 = v20;
  v21 = llroundf((float)v19 * 0.015625);
  v22 = v21 << 6;
  if (v21 < -33554432)
    v22 = 0x80000000;
  if (v21 <= 0x1FFFFFF)
    v23 = v22;
  else
    v23 = 0x7FFFFFFF;
  v4 = v23 & 0xFFFFFF00;
  v3 = v23;
  v1 = 0x100000000;
  return v1 | v4 | v3;
}

void WebCore::RenderMathMLRow::stretchVerticalOperatorsAndLayoutChildren(WebCore::RenderMathMLRow *this)
{
  uint64_t v2;
  int v3;
  int v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v2 + 45) & 4) != 0)
  {
    v4 = 0;
    v3 = 0;
    do
    {
      if ((*(_DWORD *)(v2 + 20) & 0x1800000) == 0x1000000)
      {
        v8 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v2);
        if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v2);
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v2);
        if ((*(_BYTE *)(v2 + 52) & 7) != 1 || (*(_BYTE *)(v2 + 53) & 2) == 0)
        {
          if ((*(_BYTE *)(v2 + 20) & 0xF8) != 0)
            *((_DWORD *)v8 + 5) |= 0x40u;
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v8, (WebCore::RenderBox *)v2);
        }
      }
      else if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2)
             || (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1920))(v2)) == 0
             || (v10 = v9, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 1952))(v9))
             || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 1936))(v10, 32)
             || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1944))(v10) & 1) == 0)
      {
        if ((*(_BYTE *)(v2 + 20) & 0xF8) != 0)
        {
          v11 = *(_QWORD *)(v2 + 32);
          if (v11
            && (v12 = *(_QWORD *)(v11 + 8)) != 0
            && (*(_BYTE *)(*(_QWORD *)(v12 + 104) + 239) & 0x18) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248)
                         + 479))
          {
            WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v2);
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 688))(v2);
          }
        }
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1480))(v2);
        v14 = *(_DWORD *)(v2 + 124);
        v15 = ((v14 >> 13) & 6) - 2;
        if (v15 >= 4)
          v16 = (int *)(v2 + 164);
        else
          v16 = (int *)(v2 + 160);
        v17 = (*v16 + (*v16 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
        if ((v13 & 0xFF00000000) != 0)
          v17 = v13;
        v18 = ((unsigned __int16)v14 >> 13) - 1;
        if (v18 > 4)
          v19 = 0;
        else
          v19 = qword_1969FDAA0[v18];
        v20 = *(_DWORD *)(v2 + 4 * v19 + 168);
        v21 = __OFADD__(v17, v20);
        v22 = v17 + v20;
        v23 = (v17 >> 31) + 0x7FFFFFFF;
        if (v21)
          v24 = v23;
        else
          v24 = v22;
        if (v15 >= 4)
          v25 = (unsigned int *)(v2 + 164);
        else
          v25 = (unsigned int *)(v2 + 160);
        v26 = *v25;
        v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 1112))(v2, 0);
        v28 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 1120))(v2, 0);
        v29 = v27 + v28;
        if (__OFADD__(v27, v28))
          v29 = (v27 >> 31) + 0x7FFFFFFF;
        v21 = __OFADD__(v26, v29);
        v30 = v26 + v29;
        if (v21)
          v30 = (v26 >> 31) + 0x7FFFFFFF;
        v21 = __OFSUB__(v30, v24);
        v31 = v30 - v24;
        v32 = (v30 >> 31) + 0x7FFFFFFF;
        if (!v21)
          v32 = v31;
        if (v4 <= v24)
          v4 = v24;
        if (v3 <= v32)
          v3 = v32;
      }
      v33 = *(unsigned int *)(v2 + 47);
      if (!(v33 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
        break;
      v2 = *(_QWORD *)((v33 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
      if (!v2)
        break;
    }
    while ((*(_BYTE *)(v2 + 45) & 4) != 0);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  if (!__OFADD__(v4, v3) && v4 + v3 <= 0)
  {
    v5 = *(float *)(*((_QWORD *)this + 14) + 204) * 64.0;
    if (v5 >= 2147483650.0)
    {
      v3 = 0;
      v4 = 0x7FFFFFFF;
    }
    else
    {
      v3 = 0;
      if (v5 <= -2147483650.0)
        v4 = 0x80000000;
      else
        v4 = (int)v5;
    }
  }
  v6 = *((unsigned int *)this + 16);
  if (v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v7 = *(_QWORD **)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v7)
    {
      while ((*((_BYTE *)v7 + 45) & 4) != 0)
      {
        if ((*((_DWORD *)v7 + 5) & 0x1800000) != 0x1000000)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v7 + 176))(v7))
          {
            v34 = (*(uint64_t (**)(_QWORD *))(*v7 + 1920))(v7);
            if (v34)
            {
              v35 = v34;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 1952))(v34))
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 1936))(v35, 32)
                  && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 1944))(v35))
                {
                  WebCore::RenderMathMLOperator::stretchTo((int *)v35, v4, v3);
                  if ((*(_BYTE *)(v35 + 20) & 0xF8) != 0)
                  {
                    v36 = *(_QWORD *)(v35 + 32);
                    if (v36
                      && (v37 = *(_QWORD *)(v36 + 8)) != 0
                      && (*(_BYTE *)(*(_QWORD *)(v37 + 104) + 239) & 0x18) != 0
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 24)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8)
                                                           + 1944)
                                               + 248)
                                   + 479))
                    {
                      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v35);
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 688))(v35);
                    }
                  }
                  if ((*((_BYTE *)v7 + 20) & 0xF8) != 0)
                  {
                    v38 = v7[4];
                    if (v38
                      && (v39 = *(_QWORD *)(v38 + 8)) != 0
                      && (*(_BYTE *)(*(_QWORD *)(v39 + 104) + 239) & 0x18) != 0
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7[3] + 8) + 40)
                                                                       + 8)
                                                           + 1944)
                                               + 248)
                                   + 479))
                    {
                      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v7);
                    }
                    else
                    {
                      (*(void (**)(_QWORD *))(*v7 + 688))(v7);
                    }
                  }
                }
              }
            }
          }
        }
        v40 = *(unsigned int *)((char *)v7 + 47);
        if (!(v40 | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32)))
          break;
        v7 = *(_QWORD **)((v40 | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32)) + 8);
        if (!v7)
          break;
      }
    }
  }
}

uint64_t WebCore::RenderMathMLRow::getContentBoundingBox(uint64_t this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  _BYTE *v4;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int *v14;
  _BYTE *v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  BOOL v41;

  *(_DWORD *)a3 = 0;
  *(_DWORD *)a4 = 0;
  *(_DWORD *)a2 = 0;
  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v4 = *(_BYTE **)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (v4)
    {
      if ((v4[45] & 4) != 0)
      {
        while ((*((_DWORD *)v4 + 5) & 0x1800000) == 0x1000000)
        {
LABEL_48:
          v40 = *(unsigned int *)(v4 + 47);
          if (v40 | ((unint64_t)v4[51] << 32))
          {
            v4 = *(_BYTE **)((v40 | ((unint64_t)v4[51] << 32)) + 8);
            if (v4)
            {
              if ((v4[45] & 4) != 0)
                continue;
            }
          }
          return this;
        }
        v8 = *((_DWORD *)v4 + 30);
        v9 = *((_DWORD *)v4 + 31);
        v10 = (unsigned __int16)v9 >> 13;
        v11 = (v8 >> 26) & 1;
        v12 = v11;
        if ((v10 - 2) >= 2)
        {
          if (v10 == 4)
          {
            v12 = (v8 & 0x4000000) == 0;
          }
          else
          {
            v12 = (v8 >> 26) & 1;
            if (v10 != 5)
            {
              if ((v8 & 0x4000000) != 0)
                v13 = 1;
              else
                v13 = 3;
              goto LABEL_12;
            }
          }
        }
        v41 = v12 == 0;
        v13 = 2;
        if (v41)
          v13 = 0;
LABEL_12:
        if (((v9 >> 13) & 6) - 2 < 4)
          v14 = (int *)(v4 + 164);
        else
          v14 = (int *)(v4 + 160);
        v15 = v4 + 168;
        v16 = *(_DWORD *)&v4[4 * v13 + 168];
        v17 = *v14;
        v18 = __OFADD__(v16, v17);
        v19 = v16 + v17;
        if (v18)
          v19 = (v16 >> 31) + 0x7FFFFFFF;
        if ((v10 - 2) >= 2)
        {
          if (v10 == 4)
          {
            v11 = (v8 & 0x4000000) == 0;
          }
          else if (v10 != 5)
          {
            if ((v8 & 0x4000000) != 0)
              v20 = 3;
            else
              v20 = 1;
LABEL_22:
            v21 = *(_DWORD *)&v15[4 * v20];
            v18 = __OFADD__(v19, v21);
            v22 = v19 + v21;
            if (v18)
              v22 = (v19 >> 31) + 0x7FFFFFFF;
            v18 = __OFADD__(*(_DWORD *)a2, v22);
            v23 = *(_DWORD *)a2 + v22;
            if (v18)
              v23 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)a2 = v23;
            v24 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 1480))(v4);
            v25 = *((_DWORD *)v4 + 31);
            v26 = ((v25 >> 13) & 6) - 2;
            if (v26 < 4)
              v27 = (int *)(v4 + 160);
            else
              v27 = (int *)(v4 + 164);
            v28 = (*v27 + (*v27 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
            if ((v24 & 0xFF00000000) != 0)
              v28 = v24;
            v29 = ((unsigned __int16)v25 >> 13) - 1;
            if (v29 > 4)
              v30 = 0;
            else
              v30 = qword_1969FDAA0[v29];
            v31 = *(_DWORD *)&v15[4 * v30];
            v32 = v28 + v31;
            if (__OFADD__(v28, v31))
              v32 = (v28 >> 31) + 0x7FFFFFFF;
            if (v26 < 4)
              v33 = (unsigned int *)(v4 + 160);
            else
              v33 = (unsigned int *)(v4 + 164);
            v34 = *v33;
            v35 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v4 + 1112))(v4, 0);
            this = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v4 + 1120))(v4, 0);
            v36 = v35 + this;
            if (__OFADD__(v35, (_DWORD)this))
              v36 = (v35 >> 31) + 0x7FFFFFFF;
            v37 = v34 + v36;
            if (__OFADD__(v34, v36))
              v37 = (v34 >> 31) + 0x7FFFFFFF;
            v38 = v37 - v32;
            if (__OFSUB__(v37, v32))
              v38 = (v37 >> 31) + 0x7FFFFFFF;
            v39 = *(_DWORD *)a3;
            if (*(_DWORD *)a3 <= v32)
              v39 = v32;
            *(_DWORD *)a3 = v39;
            if (*(_DWORD *)a4 > v38)
              v38 = *(_DWORD *)a4;
            *(_DWORD *)a4 = v38;
            goto LABEL_48;
          }
        }
        v41 = v11 == 0;
        v20 = 2;
        if (!v41)
          v20 = 0;
        goto LABEL_22;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderMathMLRow::computePreferredLogicalWidths(WebCore::RenderMathMLRow *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v2 + 45) & 4) != 0)
  {
    v3 = 0;
    do
    {
      if ((*(_DWORD *)(v2 + 20) & 0x1800000) != 0x1000000)
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 416))(v2);
        v15 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v2);
        v16 = v14 + v15;
        if (__OFADD__(v14, v15))
          v16 = (v14 >> 31) + 0x7FFFFFFF;
        v11 = __OFADD__(v3, v16);
        v17 = v3 + v16;
        if (v11)
          v3 = (v3 >> 31) + 0x7FFFFFFF;
        else
          v3 = v17;
      }
      v18 = *(unsigned int *)(v2 + 47);
      if (!(v18 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
        break;
      v2 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
      if (!v2)
        break;
    }
    while ((*(_BYTE *)(v2 + 45) & 4) != 0);
  }
  else
  {
    v3 = 0;
  }
  v4 = (*(uint64_t (**)(WebCore::RenderMathMLRow *))(*(_QWORD *)this + 1064))(this);
  v5 = (*(uint64_t (**)(WebCore::RenderMathMLRow *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(WebCore::RenderMathMLRow *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 + v7;
  v9 = (*(uint64_t (**)(WebCore::RenderMathMLRow *))(*(_QWORD *)this + 984))(this);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = __OFADD__(v3, v10);
  v12 = v3 + v10;
  if (v11)
    v12 = (v3 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 46) = v12;
  *((_DWORD *)this + 47) = v12;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

uint64_t WebCore::RenderMathMLRow::layoutRowItems(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  signed int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  _BYTE v57[20];
  __int128 v58;
  char v59;

  if (*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    v3 = *(_QWORD *)((*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 45) & 4) != 0)
      {
        v6 = result;
        v7 = 0;
        v55 = (a2 >> 31) + 0x7FFFFFFF;
        v56 = (a3 >> 31) + 0x7FFFFFFF;
        while ((*(_DWORD *)(v3 + 20) & 0x1800000) == 0x1000000)
        {
LABEL_81:
          v53 = *(unsigned int *)(v3 + 47);
          if (v53 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
          {
            v3 = *(_QWORD *)((v53 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
            if (v3)
            {
              if ((*(_BYTE *)(v3 + 45) & 4) != 0)
                continue;
            }
          }
          return result;
        }
        v8 = *(_DWORD *)(v3 + 120);
        v9 = (v8 >> 26) & 1;
        v10 = (unsigned __int16)*(_DWORD *)(v3 + 124) >> 13;
        if ((v10 - 2) >= 2)
        {
          if (v10 == 4)
          {
            v9 = (v8 & 0x4000000) == 0;
          }
          else if (v10 != 5)
          {
            if ((v8 & 0x4000000) != 0)
              v11 = 1;
            else
              v11 = 3;
            goto LABEL_13;
          }
        }
        v54 = v9 == 0;
        v11 = 2;
        if (v54)
          v11 = 0;
LABEL_13:
        v12 = *(_DWORD *)(v3 + 168 + 4 * v11);
        v13 = v7 + v12;
        if (__OFADD__(v7, v12))
          v13 = (v7 >> 31) + 0x7FFFFFFF;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1480))(v3);
        v14 = *(_DWORD *)(v3 + 124);
        v15 = ((v14 >> 13) & 6) - 2;
        if (v15 < 4)
          v16 = (int *)(v3 + 160);
        else
          v16 = (int *)(v3 + 164);
        v17 = (*v16 + (*v16 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
        if ((result & 0xFF00000000) != 0)
          v17 = result;
        v18 = __OFSUB__(a3, v17);
        v19 = a3 - v17;
        if (v18)
          v19 = v56;
        if (v15 < 4)
          v20 = (unsigned int *)(v3 + 164);
        else
          v20 = (unsigned int *)(v3 + 160);
        v21 = *v20;
        v22 = v13;
        if ((*(_BYTE *)(v6 + 123) & 4) != 0)
        {
          v23 = a2 - v13;
          if (__OFSUB__(a2, v13))
            v23 = v55;
          v18 = __OFSUB__(v23, v21);
          v24 = v23 - v21;
          v25 = (v23 >> 31) + 0x7FFFFFFF;
          if (v18)
            v22 = v25;
          else
            v22 = v24;
        }
        v26 = v14 >> 13;
        v27 = *(_DWORD *)(v3 + 20);
        if ((v27 & 0x200) == 0)
          goto LABEL_32;
        if ((v27 & 0x8000) != 0)
        {
          if ((*(_BYTE *)(v3 + 45) & 0x10) == 0)
          {
            result = 96;
            __break(0xC471u);
            return result;
          }
          v44 = *(_QWORD *)(v3 + 144);
          if (v44)
          {
            if ((*(_BYTE *)(v44 + 25) & 8) != 0)
              goto LABEL_32;
          }
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 288)
                      + 476))
        {
LABEL_32:
          *(_QWORD *)(v3 + 152) = v22 | (unint64_t)(v19 << 32);
        }
        else
        {
          v29 = *(_DWORD *)(v3 + 152);
          v28 = *(_DWORD *)(v3 + 156);
          v30 = *(_QWORD *)(v3 + 160);
          *(_QWORD *)(v3 + 152) = v22 | (unint64_t)(v19 << 32);
          if ((int)v22 >= v29)
            v31 = v29;
          else
            v31 = v22;
          if ((int)v19 >= v28)
            v32 = v28;
          else
            v32 = v19;
          v33 = v29 + v30;
          if (__OFADD__(v29, (_DWORD)v30))
            v33 = (v29 >> 31) + 0x7FFFFFFF;
          v34 = v22 + v30;
          if (__OFADD__(v22, (_DWORD)v30))
            v34 = (v22 >> 31) + 0x7FFFFFFF;
          if (v33 <= v34)
            v35 = v34;
          else
            v35 = v33;
          v36 = HIDWORD(v30);
          LODWORD(v30) = v28 + HIDWORD(v30);
          if (__OFADD__(v28, HIDWORD(v30)))
            LODWORD(v30) = (v28 >> 31) + 0x7FFFFFFF;
          v37 = v19 + v36;
          if (__OFADD__((_DWORD)v19, (_DWORD)v36))
            v37 = (v19 >> 31) + 0x7FFFFFFF;
          if ((int)v30 > (int)v37)
            v37 = v30;
          v38 = v35 - v31;
          if (__OFSUB__(v35, v31))
            v38 = (v35 >> 31) + 0x7FFFFFFF;
          v39 = v37 - v32;
          if (__OFSUB__(v37, v32))
            v39 = (v37 >> 31) + 0x7FFFFFFF;
          v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 1944);
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) + 40) + 8) + 3382))
          {
            v41 = *(_QWORD *)(v40 + 248);
            v42 = *(unsigned int *)(v41 + 508);
            if ((_DWORD)v42)
            {
              v43 = *(_QWORD *)(*(_QWORD *)(v41 + 496) + 8 * v42 - 8);
              if (v43)
              {
                LODWORD(v42) = *(_DWORD *)(v43 + 64);
                LODWORD(v43) = *(_DWORD *)(v43 + 68);
              }
              else
              {
                LODWORD(v42) = 0;
              }
            }
            else
            {
              LODWORD(v43) = 0;
            }
            v18 = __OFADD__(v31, (_DWORD)v42);
            v45 = v31 + v42;
            if (v18)
              v45 = (v31 >> 31) + 0x7FFFFFFF;
            v46 = v32 + v43;
            if (__OFADD__(v32, (_DWORD)v43))
              v46 = (v32 >> 31) + 0x7FFFFFFF;
            *(_QWORD *)&v58 = __PAIR64__(v46, v45);
            *((_QWORD *)&v58 + 1) = v38 | (unint64_t)(v39 << 32);
            v59 = 1;
            v57[0] = 0;
            v57[16] = 0;
            result = WebCore::RenderObject::issueRepaint(v6, &v58, 1, 0, (uint64_t)v57);
            v26 = *(_DWORD *)(v3 + 124) >> 13;
          }
        }
        v47 = v26 & 7;
        v48 = *(_DWORD *)(v3 + 120);
        v49 = (v48 >> 26) & 1;
        if ((v47 - 2) >= 2)
        {
          if (v47 == 4)
          {
            v49 = (v48 & 0x4000000) == 0;
          }
          else if (v47 != 5)
          {
            if ((v48 & 0x4000000) != 0)
              v50 = 3;
            else
              v50 = 1;
LABEL_76:
            v51 = *(_DWORD *)(v3 + 168 + 4 * v50);
            v18 = __OFADD__(v21, v51);
            v52 = v21 + v51;
            if (v18)
              v52 = (v21 >> 31) + 0x7FFFFFFF;
            v18 = __OFADD__(v13, v52);
            v7 = v13 + v52;
            if (v18)
              v7 = (v13 >> 31) + 0x7FFFFFFF;
            goto LABEL_81;
          }
        }
        v54 = v49 == 0;
        v50 = 2;
        if (!v54)
          v50 = 0;
        goto LABEL_76;
      }
    }
  }
  return result;
}

void WebCore::RenderMathMLRow::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int *v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _DWORD *v62;
  uint64_t v63;
  WebCore::RenderLayerScrollableArea *v64;
  int v65;
  uint64_t v66;
  _BYTE v67[24];

  if ((a2 & 1) != 0 || (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
    *(_WORD *)(a1 + 69) &= ~0x200u;
    v3 = *(unsigned __int8 *)(a1 + 68);
    for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v6 + 47))
    {
      v5 = i | (v3 << 32);
      if (!v5)
        break;
      v6 = *(_QWORD *)(v5 + 8);
      if (!v6 || (*(_BYTE *)(v6 + 45) & 4) == 0)
        break;
      WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v6, (const WebCore::RenderBlock *)a1);
      v3 = *(unsigned __int8 *)(v6 + 51);
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v9 = v7 + v8;
    if (__OFADD__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v13 = v9 + v12;
    if (__OFADD__(v9, v12))
      v13 = (v9 >> 31) + 0x7FFFFFFF;
    v14 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v14 = 1352;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v14))(a1);
    v16 = v15 << 6;
    if (v15 < -33554432)
      v16 = 0x80000000;
    if (v15 > 0x1FFFFFF)
      v16 = 0x7FFFFFFF;
    v17 = __OFADD__(v13, v16);
    v18 = v13 + v16;
    if (v17)
      v18 = (v13 >> 31) + 0x7FFFFFFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v19 = (int *)(a1 + 160);
    else
      v19 = (int *)(a1 + 164);
    *v19 = v18;
    v66 = 0;
    v65 = 0;
    WebCore::RenderMathMLRow::stretchVerticalOperatorsAndLayoutChildren((WebCore::RenderMathMLRow *)a1);
    WebCore::RenderMathMLRow::getContentBoundingBox(a1, (WebCore::LayoutUnit *)((char *)&v66 + 4), (WebCore::LayoutUnit *)&v66, (WebCore::LayoutUnit *)&v65);
    v20 = v66;
    v21 = HIDWORD(v66);
    WebCore::RenderMathMLRow::layoutRowItems(a1, HIDWORD(v66), v66);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      v24 = (v22 >> 31) + 0x7FFFFFFF;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      v26 = (v24 >> 31) + 0x7FFFFFFF;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    v17 = __OFADD__(v21, v28);
    v29 = v21 + v28;
    if (v17)
      v29 = (v21 >> 31) + 0x7FFFFFFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v30 = (int *)(a1 + 164);
    else
      v30 = (int *)(a1 + 160);
    *v30 = v29;
    v31 = v20 + v65;
    if (__OFADD__(v20, v65))
      v31 = (v20 >> 31) + 0x7FFFFFFF;
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      v34 = (v32 >> 31) + 0x7FFFFFFF;
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      v37 = (v35 >> 31) + 0x7FFFFFFF;
    v17 = __OFADD__(v34, v37);
    v38 = v34 + v37;
    if (v17)
      v38 = (v34 >> 31) + 0x7FFFFFFF;
    v39 = v31 + v38;
    if (__OFADD__(v31, v38))
      v39 = (v31 >> 31) + 0x7FFFFFFF;
    v40 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v40 = 1352;
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v40))(a1);
    v42 = v41 << 6;
    if (v41 < -33554432)
      v42 = 0x80000000;
    if (v41 > 0x1FFFFFF)
      v42 = 0x7FFFFFFF;
    v17 = __OFADD__(v39, v42);
    v43 = v39 + v42;
    if (v17)
      v43 = (v39 >> 31) + 0x7FFFFFFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v44 = (int *)(a1 + 160);
    else
      v44 = (int *)(a1 + 164);
    *v44 = v43;
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1016))(a1);
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
      v47 = (v45 >> 31) + 0x7FFFFFFF;
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v50 = v48 + v49;
    if (__OFADD__(v48, v49))
      v50 = (v48 >> 31) + 0x7FFFFFFF;
    v51 = *(unsigned int *)(a1 + 64);
    if (v51 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v52 = *(_QWORD *)((v51 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v52)
      {
        while ((*(_BYTE *)(v52 + 45) & 4) != 0)
        {
          v55 = *(_DWORD *)(v52 + 152);
          v54 = *(_DWORD *)(v52 + 156);
          v17 = __OFADD__(v55, v47);
          v56 = v55 + v47;
          LODWORD(v57) = (v55 >> 31) + 0x7FFFFFFF;
          if (v17)
            v57 = v57;
          else
            v57 = v56;
          v17 = __OFADD__(v54, v50);
          v58 = v54 + v50;
          LODWORD(v59) = (v54 >> 31) + 0x7FFFFFFF;
          if (v17)
            v59 = v59;
          else
            v59 = v58;
          *(_QWORD *)(v52 + 152) = v57 | (v59 << 32);
          v60 = *(unsigned int *)(v52 + 47) | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32);
          if (!v60)
            break;
          v52 = *(_QWORD *)(v60 + 8);
          if (!v52)
            break;
        }
      }
    }
    WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
    WebCore::RenderBlock::layoutPositionedObjects(a1);
    if ((*(_BYTE *)(a1 + 22) & 1) != 0)
    {
      v61 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      if ((v61 > 5 || ((1 << v61) & 0x2A) == 0)
        && (v62 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 528)) != 0
        && *v62)
      {
        WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v62 + 2), (_QWORD *)a1, (uint64_t)v67);
      }
      else
      {
        v63 = *(_QWORD *)(a1 + 144);
        if (v63)
        {
          WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
          v64 = *(WebCore::RenderLayerScrollableArea **)(v63 + 264);
          if (v64)
            WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v64);
        }
      }
    }
    v53 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
    *(_DWORD *)(a1 + 20) = v53;
    if ((*(_BYTE *)(a1 + 45) & 2) == 0)
    {
      *(_WORD *)(a1 + 69) &= ~1u;
      *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                       * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                          + 1944)
                                                                              + 248)
                                                                  + 472));
    }
    *(_DWORD *)(a1 + 20) = v53 & 0xFFDFFE07;
  }
}

void WebCore::RenderMathMLScripts::~RenderMathMLScripts(WebCore::RenderMathMLScripts *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLScripts::unembellishedOperator(WebCore::RenderMathMLScripts *this)
{
  _BYTE *v1;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v1 = *(_BYTE **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (v1[45] & 4) != 0
    && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 176))(v1))
  {
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 1920))(v1);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::RenderMathMLScripts::validateAndGetReferenceChildren(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v2 = *(unsigned int *)(a2 + 64);
  if (!(v2 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)))
    goto LABEL_4;
  v3 = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
  if (!v3)
    goto LABEL_4;
  if ((*(_BYTE *)(v3 + 45) & 4) == 0)
    goto LABEL_4;
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 120);
  if (v5 > 6)
    goto LABEL_4;
  v6 = 1 << v5;
  if ((v6 & 0x33) != 0)
  {
    v7 = *(unsigned int *)(v3 + 47);
    if (!(v7 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
      goto LABEL_4;
    v8 = *(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
    if (!v8)
      goto LABEL_4;
    if ((*(_BYTE *)(v8 + 45) & 4) == 0)
      goto LABEL_4;
    if ((*(_BYTE *)(v8 + 45) & 1) == 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
      if (v9)
      {
        if ((*(_WORD *)(v9 + 28) & 0x40) != 0
          && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mprescriptsTag + 24))
        {
          goto LABEL_4;
        }
      }
    }
    v10 = *(unsigned int *)(v8 + 47) | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32);
    if (!v10)
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((v6 & 0x44) != 0)
  {
    v12 = *(unsigned int *)(v3 + 47);
    if (!(v12 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
      goto LABEL_4;
    v8 = *(_QWORD *)((v12 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
    if (!v8)
      goto LABEL_4;
    if ((*(_BYTE *)(v8 + 45) & 4) == 0)
      goto LABEL_4;
    if ((*(_BYTE *)(v8 + 45) & 1) == 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
      if (v13)
      {
        if ((*(_WORD *)(v13 + 28) & 0x40) != 0
          && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mprescriptsTag + 24))
        {
          goto LABEL_4;
        }
      }
    }
    v14 = *(unsigned int *)(v8 + 47);
    if (!(v14 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
      goto LABEL_4;
    v15 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
    if (!v15)
      goto LABEL_4;
    if ((*(_BYTE *)(v15 + 45) & 4) == 0)
      goto LABEL_4;
    if ((*(_BYTE *)(v15 + 45) & 1) == 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
      if (v16)
      {
        if ((*(_WORD *)(v16 + 28) & 0x40) != 0
          && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mprescriptsTag + 24))
        {
          goto LABEL_4;
        }
      }
    }
    v10 = *(unsigned int *)(v15 + 47) | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32);
    if (!v10)
      goto LABEL_18;
LABEL_16:
    v11 = *(_QWORD *)(v10 + 8);
    if (v11 && (*(_BYTE *)(v11 + 45) & 4) != 0)
      goto LABEL_4;
LABEL_18:
    *(_QWORD *)this = v3;
    *(_QWORD *)(this + 8) = 0;
    v4 = 1;
    *(_QWORD *)(this + 16) = v8;
    *(_QWORD *)(this + 24) = 0;
    goto LABEL_5;
  }
  v17 = *(unsigned int *)(v3 + 47);
  v18 = v17 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
  if (!v18)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_65;
  }
  v19 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
  if (!v19 || (*(_BYTE *)(v19 + 45) & 4) == 0)
  {
    v20 = 0;
    v21 = 0;
    v18 = 0;
    goto LABEL_65;
  }
  if ((*(_BYTE *)(v19 + 45) & 1) == 0
    && (v22 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8)) != 0
    && (*(_WORD *)(v22 + 28) & 0x40) != 0
    && (v23 = WebCore::MathMLNames::mprescriptsTag,
        *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mprescriptsTag + 24)))
  {
    v18 = 0;
  }
  else
  {
    v23 = WebCore::MathMLNames::mprescriptsTag;
    v18 = v19;
  }
  v20 = 0;
  v21 = 0;
LABEL_47:
  v24 = 1;
  v25 = v19;
  do
  {
    v26 = v24;
    if ((*(_BYTE *)(v25 + 45) & 1) == 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8);
      if (v27)
      {
        if ((*(_WORD *)(v27 + 28) & 0x40) != 0 && *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) == *(_QWORD *)(v23 + 24))
        {
          if ((v26 & (v20 == 0)) == 0)
            goto LABEL_4;
          v29 = *(unsigned int *)(v25 + 47);
          v20 = v29 | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32);
          if (!v20)
            goto LABEL_63;
          v19 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32)) + 8);
          if (!v19)
          {
            v20 = 0;
LABEL_63:
            v21 = v25;
            goto LABEL_65;
          }
          if ((*(_BYTE *)(v19 + 45) & 4) != 0)
            v20 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32)) + 8);
          else
            v20 = 0;
          v21 = v25;
          if ((*(_BYTE *)(v19 + 45) & 4) == 0)
            goto LABEL_63;
          goto LABEL_47;
        }
      }
    }
    v28 = *(unsigned int *)(v25 + 47) | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32);
    if (!v28)
      break;
    v25 = *(_QWORD *)(v28 + 8);
    if (!v25)
      break;
    v24 = v26 ^ 1;
  }
  while ((*(_BYTE *)(v25 + 45) & 4) != 0);
  if ((v26 & 1) == 0)
  {
LABEL_65:
    *(_QWORD *)this = v3;
    *(_QWORD *)(this + 8) = v21;
    v4 = 1;
    *(_QWORD *)(this + 16) = v18;
    *(_QWORD *)(this + 24) = v20;
    goto LABEL_5;
  }
LABEL_4:
  v4 = 0;
  *(_BYTE *)this = 0;
LABEL_5:
  *(_BYTE *)(this + 32) = v4;
  return this;
}

uint64_t WebCore::RenderMathMLScripts::spaceAfterScript(WebCore::RenderMathMLScripts *this, void *a2)
{
  WebCore::Font *v3;
  WebCore::OpenTypeMathData *v4;
  WebCore::OpenTypeMathData *v5;
  void *v6;
  float v7;
  double v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  double v15;

  v3 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), a2);
  ++*(_DWORD *)v3;
  v4 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v3);
  if (v4)
  {
    v5 = v4;
    ++*(_DWORD *)v4;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v4);
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFFLL;
    }
    else if (v8 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v5, v6);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    v15 = (float)(*(float *)(*((_QWORD *)this + 14) + 204) / 5.0) * 64.0;
    if (v15 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFFLL;
    }
    else if (v15 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v15;
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Font::~Font((WTF **)v3);
    WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v9;
}

uint64_t WebCore::RenderMathMLScripts::computePreferredLogicalWidths(WebCore::RenderMathMLScripts *this)
{
  WebCore::RenderBox *v2;
  unsigned int v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  WebCore::RenderBox *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::RenderBox *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  WebCore::RenderBox *v47;
  WebCore::RenderBox *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  WebCore::RenderBox *v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  WebCore::RenderBox *v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  WebCore::RenderBox *v92;
  WebCore::RenderBox *v93;
  WebCore::RenderBox *v94;
  WebCore::RenderBox *v95;
  char v96;

  *((_QWORD *)this + 23) = 0;
  WebCore::RenderMathMLScripts::validateAndGetReferenceChildren((uint64_t)&v92, (uint64_t)this);
  if (v96)
  {
    v2 = v92;
    v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v92 + 416))(v92);
    v4 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v2);
    if (__OFADD__(v3, v4))
      v5 = (v3 >> 31) + 0x7FFFFFFF;
    else
      v5 = v3 + v4;
    if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 176))(v2)
      && (v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 1920))(v2)) != 0)
    {
      v8 = *(_DWORD *)(v7 + 296);
    }
    else
    {
      v8 = 0;
    }
    if (v8 >= v5)
      v9 = v5;
    else
      v9 = v8;
    v10 = WebCore::RenderMathMLScripts::spaceAfterScript(this, v6);
    v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120);
    if (v11 <= 6)
    {
      v12 = v10;
      v13 = 1 << v11;
      if ((v13 & 0x4C) != 0)
      {
        v26 = v95;
        if (v95)
        {
          do
          {
            v27 = *(unsigned int *)((char *)v26 + 47);
            if (v27 | ((unint64_t)*((unsigned __int8 *)v26 + 51) << 32)
              && (v28 = *(_QWORD *)((v27 | ((unint64_t)*((unsigned __int8 *)v26 + 51) << 32)) + 8)) != 0)
            {
              if ((*(_BYTE *)(v28 + 45) & 4) != 0)
                v29 = *(_QWORD *)((v27 | ((unint64_t)*((unsigned __int8 *)v26 + 51) << 32)) + 8);
              else
                v29 = 0;
            }
            else
            {
              v29 = 0;
            }
            v30 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v26 + 416))(v26);
            v31 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v26);
            if (__OFADD__(v30, v31))
              v32 = (v30 >> 31) + 0x7FFFFFFF;
            else
              v32 = v30 + v31;
            v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 416))(v29);
            v34 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v29);
            v35 = v33 + v34;
            if (__OFADD__(v33, v34))
              v35 = (v33 >> 31) + 0x7FFFFFFF;
            if (v32 > v35)
              v35 = v32;
            v18 = __OFADD__(v35, v12);
            v36 = v35 + v12;
            v37 = (v35 >> 31) + 0x7FFFFFFF;
            if (!v18)
              v37 = v36;
            v38 = *((_DWORD *)this + 47);
            v18 = __OFADD__(v38, v37);
            v39 = v38 + v37;
            v40 = (v38 >> 31) + 0x7FFFFFFF;
            if (v18)
              v39 = v40;
            *((_DWORD *)this + 47) = v39;
            v41 = *(unsigned int *)(v29 + 47);
            if (!(v41 | ((unint64_t)*(unsigned __int8 *)(v29 + 51) << 32)))
              break;
            v26 = *(WebCore::RenderBox **)((v41 | ((unint64_t)*(unsigned __int8 *)(v29 + 51) << 32)) + 8);
            if (!v26)
              break;
          }
          while ((*((_BYTE *)v26 + 45) & 4) != 0);
        }
        v42 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 416))(v2);
        v43 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v2);
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
          v44 = (v42 >> 31) + 0x7FFFFFFF;
        v45 = *((_DWORD *)this + 47);
        v18 = __OFADD__(v45, v44);
        v46 = v45 + v44;
        if (v18)
          v46 = (v45 >> 31) + 0x7FFFFFFF;
        *((_DWORD *)this + 47) = v46;
        v47 = v94;
        if (v94)
        {
          v48 = v93;
          if (v94 != v93)
          {
            do
            {
              v49 = *(unsigned int *)((char *)v47 + 47);
              if (v49 | ((unint64_t)*((unsigned __int8 *)v47 + 51) << 32)
                && (v50 = *(_QWORD *)((v49 | ((unint64_t)*((unsigned __int8 *)v47 + 51) << 32)) + 8)) != 0)
              {
                if ((*(_BYTE *)(v50 + 45) & 4) != 0)
                  v51 = *(_QWORD *)((v49 | ((unint64_t)*((unsigned __int8 *)v47 + 51) << 32)) + 8);
                else
                  v51 = 0;
              }
              else
              {
                v51 = 0;
              }
              v52 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v47 + 416))(v47);
              v53 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v47);
              v54 = v52 + v53;
              if (__OFADD__(v52, v53))
                v54 = (v52 >> 31) + 0x7FFFFFFF;
              v18 = __OFSUB__(v54, v9);
              v55 = v54 - v9;
              v56 = (v54 >> 31) + 0x7FFFFFFF;
              if (v18)
                v57 = v56;
              else
                v57 = v55;
              v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 416))(v51);
              v59 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v51);
              v60 = v58 + v59;
              if (__OFADD__(v58, v59))
                v60 = (v58 >> 31) + 0x7FFFFFFF;
              if (v57 > v60)
                v60 = v57;
              v61 = v60 & ~(v60 >> 31);
              v18 = __OFADD__(v61, v12);
              v62 = v61 + v12;
              if (v18)
                v62 = 0x7FFFFFFF;
              v63 = *((_DWORD *)this + 47);
              v18 = __OFADD__(v63, v62);
              v64 = v63 + v62;
              v65 = (v63 >> 31) + 0x7FFFFFFF;
              if (v18)
                v64 = v65;
              *((_DWORD *)this + 47) = v64;
              v66 = *(unsigned int *)(v51 + 47);
              if (!(v66 | ((unint64_t)*(unsigned __int8 *)(v51 + 51) << 32)))
                break;
              v47 = *(WebCore::RenderBox **)((v66 | ((unint64_t)*(unsigned __int8 *)(v51 + 51) << 32)) + 8);
              if (!v47)
                break;
              v67 = (*((_BYTE *)v47 + 45) & 4) != 0
                  ? *(WebCore::RenderBox **)((v66 | ((unint64_t)*(unsigned __int8 *)(v51 + 51) << 32)) + 8)
                  : 0;
            }
            while ((*((_BYTE *)v47 + 45) & 4) != 0 && v67 != v48);
          }
        }
      }
      else
      {
        if ((v13 & 0x11) != 0)
        {
          v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 416))(v2);
          v15 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v2);
          v16 = v14 + v15;
          if (__OFADD__(v14, v15))
            v16 = (v14 >> 31) + 0x7FFFFFFF;
          v17 = *((_DWORD *)this + 47);
          v18 = __OFADD__(v17, v16);
          v19 = v17 + v16;
          if (v18)
            v19 = (v17 >> 31) + 0x7FFFFFFF;
          *((_DWORD *)this + 47) = v19;
          v20 = v94;
          v21 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v94 + 416))(v94);
          v22 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v20);
          v23 = v21 + v22;
          if (__OFADD__(v21, v22))
            v23 = (v21 >> 31) + 0x7FFFFFFF;
          v18 = __OFSUB__(v23, v9);
          v24 = v23 - v9;
          v25 = (v23 >> 31) + 0x7FFFFFFF;
          if (!v18)
            v25 = v24;
        }
        else
        {
          v68 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 416))(v2);
          v69 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v2);
          v70 = v68 + v69;
          if (__OFADD__(v68, v69))
            v70 = (v68 >> 31) + 0x7FFFFFFF;
          v71 = *((_DWORD *)this + 47);
          v18 = __OFADD__(v71, v70);
          v72 = v71 + v70;
          if (v18)
            v72 = (v71 >> 31) + 0x7FFFFFFF;
          *((_DWORD *)this + 47) = v72;
          v73 = v94;
          v74 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v94 + 416))(v94);
          v75 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v73);
          v25 = v74 + v75;
          if (__OFADD__(v74, v75))
            v25 = (v74 >> 31) + 0x7FFFFFFF;
        }
        v18 = __OFADD__(v25, v12);
        v76 = v25 + v12;
        v77 = (v25 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v77 = v76;
        v78 = *((_DWORD *)this + 47);
        v79 = v77 & ~(v77 >> 31);
        v18 = __OFADD__(v78, v79);
        v80 = v78 + v79;
        if (v18)
          v80 = (v78 >> 31) + 0x7FFFFFFF;
        *((_DWORD *)this + 47) = v80;
      }
    }
    v81 = (*(uint64_t (**)(WebCore::RenderMathMLScripts *))(*(_QWORD *)this + 1064))(this);
    v82 = (*(uint64_t (**)(WebCore::RenderMathMLScripts *))(*(_QWORD *)this + 1072))(this);
    if (__OFADD__(v81, v82))
      v83 = (v81 >> 31) + 0x7FFFFFFF;
    else
      v83 = v81 + v82;
    v84 = (*(uint64_t (**)(WebCore::RenderMathMLScripts *))(*(_QWORD *)this + 976))(this);
    if (__OFADD__(v83, v84))
      v85 = (v83 >> 31) + 0x7FFFFFFF;
    else
      v85 = v83 + v84;
    v86 = (*(uint64_t (**)(WebCore::RenderMathMLScripts *))(*(_QWORD *)this + 984))(this);
    v87 = v85 + v86;
    if (__OFADD__(v85, v86))
      v87 = (v85 >> 31) + 0x7FFFFFFF;
    v88 = *((_DWORD *)this + 47);
    v18 = __OFADD__(v88, v87);
    v89 = v88 + v87;
    v90 = (v88 >> 31) + 0x7FFFFFFF;
    if (v18)
      v89 = v90;
    *((_DWORD *)this + 46) = v89;
    *((_DWORD *)this + 47) = v89;
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

void WebCore::RenderMathMLScripts::layoutBlock(uint64_t a1, char a2)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Font *v10;
  WebCore::OpenTypeMathData *v11;
  void *v12;
  WebCore::OpenTypeMathData *v13;
  float v14;
  double v15;
  int v16;
  float v17;
  double v18;
  int v19;
  float v20;
  double v21;
  int v22;
  float v23;
  double v24;
  int v25;
  float v26;
  double v27;
  int v28;
  float v29;
  double v30;
  int v31;
  float v32;
  double v33;
  int v34;
  void *v35;
  float v36;
  double v37;
  int v38;
  int *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::MathMLPresentationElement *v64;
  uint64_t v65;
  int v66;
  WebCore::RenderObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  void *v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::MathMLPresentationElement *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  int v88;
  int *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  int *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  int *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  int *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  BOOL v145;
  int v146;
  _BOOL4 v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  int *v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  int v185;
  int *v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  int *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  int v222;
  int v223;
  unsigned int v224;
  int v225;
  int v226;
  int *v227;
  unsigned int v228;
  int v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  int *v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  int v250;
  unsigned int v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int *v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  int *v264;
  int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int *v301;
  unsigned int v302;
  unsigned int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int *v308;
  BOOL v309;
  char v310;
  unsigned int *v311;
  int v312;
  _BOOL4 v313;
  unsigned int v314;
  unsigned int v315;
  _BOOL4 v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  int v325;
  int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  int *v338;
  char v339;
  int v340;
  int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  int v345;
  uint64_t v346;
  unsigned int v347;
  unsigned int v348;
  int *v349;
  int v350;
  unsigned int v351;
  int *v352;
  int v353;
  uint64_t v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  int *v362;
  char v363;
  int v364;
  int v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  int v369;
  uint64_t v370;
  int v371;
  unsigned int v372;
  int *v373;
  int v374;
  unsigned int v375;
  int *v376;
  int v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int *v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  int v388;
  unsigned int v389;
  unsigned int *v390;
  unsigned int v391;
  unsigned int v392;
  int v393;
  int v394;
  unsigned int v395;
  int v396;
  int v397;
  unsigned int v398;
  unsigned int v399;
  int v400;
  unsigned int v401;
  int v402;
  unsigned int v403;
  int v404;
  int v405;
  int v406;
  unsigned int v407;
  int *v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  int v414;
  unsigned int v415;
  int *v416;
  int v417;
  unsigned int *v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  uint64_t v422;
  uint64_t v423;
  int *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned int *v428;
  unsigned int v429;
  unsigned int v430;
  int v431;
  int v432;
  unsigned int v433;
  int v434;
  int v435;
  int v436;
  unsigned int *v437;
  unsigned int v438;
  unsigned int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  unsigned int v445;
  uint64_t v446;
  int *v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t v450;
  int v451;
  WebCore::RenderBlock *v452;
  unsigned int v453;
  _DWORD *v454;
  uint64_t v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  int *v459;
  int v460;
  unsigned int *v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  unsigned int *v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  _BOOL4 v477;
  unsigned int v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  unsigned int v485;
  int *v486;
  unsigned int v487;
  unsigned int v488;
  int v489;
  unsigned int v490;
  int v491;
  uint64_t v492;
  unsigned int v493;
  unsigned int v494;
  int *v495;
  int v496;
  uint64_t v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  int *v505;
  char v506;
  int v507;
  int v508;
  unsigned int v509;
  int v510;
  unsigned int v511;
  int v512;
  uint64_t v513;
  int v514;
  unsigned int v515;
  int *v516;
  int v517;
  uint64_t v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int *v523;
  unsigned int v524;
  unsigned int v525;
  int v526;
  int v527;
  int v528;
  unsigned int *v529;
  unsigned int v530;
  unsigned int v531;
  int v532;
  int v533;
  int v534;
  unsigned int v535;
  int v536;
  unsigned int v537;
  uint64_t v538;
  int *v539;
  int v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  unsigned int v544;
  unsigned int v545;
  int *v546;
  char v547;
  unsigned int v548;
  unsigned int v549;
  int v550;
  unsigned int v551;
  int v552;
  uint64_t v553;
  int v554;
  unsigned int v555;
  int *v556;
  int v557;
  unsigned int *v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  int v562;
  uint64_t v563;
  unsigned int v564;
  uint64_t v565;
  unsigned int v566;
  int *v567;
  int v568;
  unsigned int v569;
  int v570;
  uint64_t v571;
  int v572;
  int *v573;
  int v574;
  unsigned int *v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  unsigned int v579;
  unsigned int v580;
  _DWORD *v581;
  uint64_t v582;
  WebCore::RenderLayerScrollableArea *v583;
  float v584;
  double v585;
  int v586;
  double v587;
  int v588;
  double v589;
  double v590;
  double v591;
  int v592;
  double v593;
  double v594;
  double v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  unsigned int v601;
  unsigned int v602;
  int *v603;
  char v604;
  _BOOL4 v605;
  _BOOL4 v606;
  int v607;
  unsigned int v608;
  int v609;
  int *v610;
  int v611;
  unsigned int v612;
  int v613;
  unsigned int v614;
  int v615;
  WebCore::RenderBlock *v616;
  int v617;
  int v618;
  int v619;
  unsigned int v620;
  int v621;
  _DWORD *v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int *v627;
  int *v628;
  int *v629;
  int *v630;
  char v631;
  int v632[8];

  if ((a2 & 1) == 0 && (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) != 0)
    return;
  WebCore::RenderMathMLScripts::validateAndGetReferenceChildren((uint64_t)&v627, a1);
  if (!v631)
  {
    WebCore::RenderMathMLBlock::layoutInvalidMarkup((WebCore::RenderMathMLBlock *)a1);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  *(_WORD *)(a1 + 69) &= ~0x200u;
  v4 = *(unsigned int *)(a1 + 64);
  v5 = v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (v5)
  {
    v6 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (!v6 || (*(_BYTE *)(v6 + 45) & 4) == 0)
      goto LABEL_990;
    do
    {
      WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v6, (const WebCore::RenderBlock *)a1);
      v7 = *(unsigned int *)(v6 + 47);
      if (!(v7 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
        break;
      v6 = *(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
      if (!v6)
        break;
    }
    while ((*(_BYTE *)(v6 + 45) & 4) != 0);
    v5 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
    if (v5)
    {
LABEL_990:
      v8 = *(_QWORD *)(v5 + 8);
      if (v8)
      {
        while ((*(_BYTE *)(v8 + 45) & 4) != 0)
        {
          v66 = *(_DWORD *)(v8 + 20);
          if ((v66 & 0x1800000) == 0x1000000)
          {
            v67 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v8);
            if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
              WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v8);
            if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
              WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v8);
            if ((*(_BYTE *)(v8 + 52) & 7) != 1 || (*(_BYTE *)(v8 + 53) & 2) == 0)
            {
              if ((*(_BYTE *)(v8 + 20) & 0xF8) != 0)
                *((_DWORD *)v67 + 5) |= 0x40u;
              {
                WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                unk_1ECE91358 = 0u;
              }
              WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v67, (WebCore::RenderBox *)v8);
            }
          }
          else if ((v66 & 0xF8) != 0)
          {
            v68 = *(_QWORD *)(v8 + 32);
            if (v68
              && (v69 = *(_QWORD *)(v68 + 8)) != 0
              && (*(_BYTE *)(*(_QWORD *)(v69 + 104) + 239) & 0x18) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 479))
            {
              WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v8);
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 688))(v8);
            }
          }
          v70 = *(unsigned int *)(v8 + 47);
          if (!(v70 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
            break;
          v8 = *(_QWORD *)((v70 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
          if (!v8)
            break;
        }
      }
    }
  }
  v601 = WebCore::RenderMathMLScripts::spaceAfterScript((WebCore::RenderMathMLScripts *)a1, v3);
  v10 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a1 + 112) + 32), v9);
  ++*(_DWORD *)v10;
  v11 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v10);
  if (v11)
  {
    v13 = v11;
    ++*(_DWORD *)v11;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v11);
    v15 = v14 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    v624 = v16;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v18 = v17 * 64.0;
    if (v18 >= 2147483650.0)
    {
      v19 = 0x7FFFFFFF;
    }
    else if (v18 <= -2147483650.0)
    {
      v19 = 0x80000000;
    }
    else
    {
      v19 = (int)v18;
    }
    v621 = v19;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v21 = v20 * 64.0;
    if (v21 >= 2147483650.0)
    {
      v22 = 0x7FFFFFFF;
    }
    else if (v21 <= -2147483650.0)
    {
      v22 = 0x80000000;
    }
    else
    {
      v22 = (int)v21;
    }
    v613 = v22;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v24 = v23 * 64.0;
    if (v24 >= 2147483650.0)
    {
      v25 = 0x7FFFFFFF;
    }
    else if (v24 <= -2147483650.0)
    {
      v25 = 0x80000000;
    }
    else
    {
      v25 = (int)v24;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v27 = v26 * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFF;
    }
    else if (v27 <= -2147483650.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v27;
    }
    v617 = v28;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v30 = v29 * 64.0;
    if (v30 >= 2147483650.0)
    {
      v31 = 0x7FFFFFFF;
    }
    else if (v30 <= -2147483650.0)
    {
      v31 = 0x80000000;
    }
    else
    {
      v31 = (int)v30;
    }
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v33 = v32 * 64.0;
    if (v33 >= 2147483650.0)
    {
      v34 = 0x7FFFFFFF;
    }
    else if (v33 <= -2147483650.0)
    {
      v34 = 0x80000000;
    }
    else
    {
      v34 = (int)v33;
    }
    v619 = v34;
    WebCore::OpenTypeMathData::getMathConstant((uint64_t)v13);
    v37 = v36 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v38 = 0x7FFFFFFF;
    }
    else if (v37 <= -2147483650.0)
    {
      v38 = 0x80000000;
    }
    else
    {
      v38 = (int)v37;
    }
    v602 = v38;
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v13, v35);
      WTF::fastFree(v73, v74);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  else
  {
    v584 = *((float *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)(a1 + 80), v12) + 9);
    v585 = (float)(v584 / 3.0) * 64.0;
    if (v585 >= 2147483650.0)
    {
      v586 = 0x7FFFFFFF;
    }
    else if (v585 > -2147483650.0)
    {
      v586 = (int)v585;
    }
    else
    {
      v586 = 0x80000000;
    }
    v624 = v586;
    v587 = v584 * 64.0;
    if (v587 >= 2147483650.0)
    {
      v588 = 0x7FFFFFFF;
    }
    else if (v587 <= -2147483650.0)
    {
      v588 = 0x80000000;
    }
    else
    {
      v588 = (int)v587;
    }
    v621 = v588;
    v589 = (float)(v584 * 0.5) * 64.0;
    if (v589 >= 2147483650.0)
    {
      v613 = 0x7FFFFFFF;
      v25 = 0x7FFFFFFF;
    }
    else
    {
      v590 = -2147483650.0;
      if (v589 > -2147483650.0)
        v590 = (float)(v584 * 0.5) * 64.0;
      v613 = (int)v590;
      if (v589 > -2147483650.0)
        v25 = (int)v589;
      else
        v25 = 0x80000000;
    }
    v591 = (float)(*(float *)(*(_QWORD *)(a1 + 112) + 204) / 5.0) * 64.0;
    if (v591 >= 2147483650.0)
    {
      v592 = 0x7FFFFFFF;
    }
    else if (v591 > -2147483650.0)
    {
      v592 = (int)v591;
    }
    else
    {
      v592 = 0x80000000;
    }
    v617 = v592;
    v593 = (float)(v584 * 0.25) * 64.0;
    if (v593 >= 2147483650.0)
    {
      v31 = 0x7FFFFFFF;
    }
    else if (v593 <= -2147483650.0)
    {
      v31 = 0x80000000;
    }
    else
    {
      v31 = (int)v593;
    }
    v594 = (float)((float)(v584 * 4.0) / 5.0) * 64.0;
    if (v594 >= 2147483650.0)
    {
      v596 = 0x7FFFFFFF;
      v619 = 0x7FFFFFFF;
    }
    else
    {
      v595 = -2147483650.0;
      if (v594 > -2147483650.0)
        v595 = v594;
      v619 = (int)v595;
      if (v594 <= -2147483650.0)
        v596 = 0x80000000;
      else
        v596 = (int)v594;
    }
    v602 = v596;
  }
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::Font::~Font((WTF **)v10);
    WTF::fastFree(v71, v72);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  v39 = v627;
  v40 = (*(uint64_t (**)(int *))(*(_QWORD *)v627 + 1480))(v627);
  v41 = v39[31];
  v42 = ((v41 >> 13) & 6) - 2;
  if (v42 < 4)
    v43 = v39 + 40;
  else
    v43 = v39 + 41;
  v44 = (*v43 + (*v43 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v40 & 0xFF00000000) != 0)
    v44 = v40;
  v45 = ((unsigned __int16)v41 >> 13) - 1;
  if (v45 > 4)
    v46 = 0;
  else
    v46 = qword_1969FDAA0[v45];
  v47 = v39[v46 + 42];
  v48 = v44 + v47;
  if (__OFADD__(v44, v47))
    v48 = (v44 >> 31) + 0x7FFFFFFF;
  if (v42 < 4)
    v49 = (unsigned int *)(v39 + 40);
  else
    v49 = (unsigned int *)(v39 + 41);
  v50 = *v49;
  v51 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v39 + 1112))(v39, 0);
  v52 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v39 + 1120))(v39, 0);
  v53 = v51 + v52;
  if (__OFADD__(v51, v52))
    v53 = (v51 >> 31) + 0x7FFFFFFF;
  v145 = __OFADD__(v50, v53);
  v54 = v50 + v53;
  if (v145)
    v54 = (v50 >> 31) + 0x7FFFFFFF;
  v55 = v54 - v48;
  if (__OFSUB__(v54, v48))
    v55 = (v54 >> 31) + 0x7FFFFFFF;
  v56 = 0;
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v58 = *(_DWORD *)(v57 + 120);
  if (v58 <= 6 && ((1 << v58) & 0x5D) != 0)
  {
    v59 = v55 + v613;
    if (__OFADD__(v55, v613))
      v59 = (v55 >> 31) + 0x7FFFFFFF;
    v56 = v624 <= v59 ? v59 : v624;
    if (*(_BYTE *)(a1 + 46) != 65)
    {
      if (*(_BYTE *)(v57 + 132))
      {
LABEL_109:
        v632[0] = 0;
        v76 = WebCore::toUserUnits(v57 + 124, (WebCore::RenderStyle *)(a1 + 80), v632);
        if (v56 <= v76)
          v56 = v76;
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        v58 = *(_DWORD *)(v57 + 120);
        goto LABEL_112;
      }
      v60 = *(_QWORD *)(v57 + 104);
      if (v60)
      {
        v61 = *(_DWORD *)(v60 + 4);
        if ((v61 & 1) != 0)
        {
          v62 = *(_QWORD *)(v60 + 40);
          LODWORD(v63) = *(_DWORD *)(v60 + 52);
          if ((_DWORD)v63)
          {
LABEL_72:
            v63 = v63;
            v64 = (WebCore::MathMLPresentationElement *)(v62 + 8);
            while (1)
            {
              v65 = *((_QWORD *)v64 - 1);
              if (v65 == WebCore::MathMLNames::subscriptshiftAttr
                || *(_QWORD *)(v65 + 24) == *(_QWORD *)(WebCore::MathMLNames::subscriptshiftAttr + 24)
                && *(_QWORD *)(v65 + 32) == *(_QWORD *)(WebCore::MathMLNames::subscriptshiftAttr + 32))
              {
                goto LABEL_106;
              }
              v64 = (WebCore::MathMLPresentationElement *)((char *)v64 + 16);
              if (!--v63)
              {
                v64 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
                goto LABEL_106;
              }
            }
          }
        }
        else
        {
          v62 = v60 + 32;
          LODWORD(v63) = v61 >> 5;
          if ((_DWORD)v63)
            goto LABEL_72;
        }
      }
      v64 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_106:
      v75 = WebCore::MathMLPresentationElement::parseMathMLLength(v64, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 40) + 8) + 680) + 664) >= 0));
      if (!*(_BYTE *)(v57 + 132))
        *(_BYTE *)(v57 + 132) = 1;
      *(_QWORD *)(v57 + 124) = v75;
      goto LABEL_109;
    }
  }
LABEL_112:
  v77 = v58 > 6 || ((1 << v58) & 0x6E) == 0;
  if (!v77)
  {
    v78 = v48 - v25;
    if (__OFSUB__(v48, v25))
      v78 = (v48 >> 31) + 0x7FFFFFFF;
    if (v621 > v78)
      v78 = v621;
    v626 = v78;
    if (*(_BYTE *)(a1 + 46) == 65)
      goto LABEL_141;
    if (*(_BYTE *)(v57 + 144))
      goto LABEL_138;
    v79 = *(_QWORD *)(v57 + 104);
    if (v79)
    {
      v80 = *(_DWORD *)(v79 + 4);
      if ((v80 & 1) != 0)
      {
        v81 = *(_QWORD *)(v79 + 40);
        LODWORD(v82) = *(_DWORD *)(v79 + 52);
        if ((_DWORD)v82)
        {
LABEL_125:
          v82 = v82;
          v83 = (WebCore::MathMLPresentationElement *)(v81 + 8);
          while (1)
          {
            v84 = *((_QWORD *)v83 - 1);
            if (v84 == WebCore::MathMLNames::superscriptshiftAttr
              || *(_QWORD *)(v84 + 24) == *(_QWORD *)(WebCore::MathMLNames::superscriptshiftAttr + 24)
              && *(_QWORD *)(v84 + 32) == *(_QWORD *)(WebCore::MathMLNames::superscriptshiftAttr + 32))
            {
              goto LABEL_135;
            }
            v83 = (WebCore::MathMLPresentationElement *)((char *)v83 + 16);
            if (!--v82)
            {
              v83 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_135;
            }
          }
        }
      }
      else
      {
        v81 = v79 + 32;
        LODWORD(v82) = v80 >> 5;
        if ((_DWORD)v82)
          goto LABEL_125;
      }
    }
    v83 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_135:
    v85 = WebCore::MathMLPresentationElement::parseMathMLLength(v83, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v57 + 144))
      *(_BYTE *)(v57 + 144) = 1;
    *(_QWORD *)(v57 + 136) = v85;
LABEL_138:
    v632[0] = 0;
    v86 = WebCore::toUserUnits(v57 + 136, (WebCore::RenderStyle *)(a1 + 80), v632);
    v87 = v626;
    if (v626 <= v86)
      v87 = v86;
    v626 = v87;
    v58 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120);
    goto LABEL_141;
  }
  v626 = 0;
LABEL_141:
  v616 = (WebCore::RenderBlock *)a1;
  if (v58 > 6)
    goto LABEL_270;
  v88 = 1 << v58;
  if ((v88 & 0x4C) == 0)
  {
    if ((v88 & 0x11) != 0)
    {
      v89 = v629;
      v90 = (*(uint64_t (**)(int *))(*(_QWORD *)v629 + 1480))(v629);
      v91 = v89[31];
      v92 = ((v91 >> 13) & 6) - 2;
      if (v92 < 4)
        v93 = v89 + 40;
      else
        v93 = v89 + 41;
      v94 = (*v93 + (*v93 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
      if ((v90 & 0xFF00000000) != 0)
        v94 = v90;
      v95 = ((unsigned __int16)v91 >> 13) - 1;
      if (v95 > 4)
        v96 = 0;
      else
        v96 = qword_1969FDAA0[v95];
      v167 = v89[v96 + 42];
      v168 = v94 + v167;
      if (__OFADD__(v94, v167))
        v168 = (v94 >> 31) + 0x7FFFFFFF;
      if (v92 < 4)
        v169 = (unsigned int *)(v89 + 40);
      else
        v169 = (unsigned int *)(v89 + 41);
      v170 = *v169;
      v171 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v89 + 1112))(v89, 0);
      v172 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v89 + 1120))(v89, 0);
      v173 = v171 + v172;
      if (__OFADD__(v171, v172))
        v173 = (v171 >> 31) + 0x7FFFFFFF;
      v145 = __OFADD__(v170, v173);
      v174 = v170 + v173;
      if (v145)
        v174 = (v170 >> 31) + 0x7FFFFFFF;
      v99 = v174 - v168;
      if (__OFSUB__(v174, v168))
        v99 = (v174 >> 31) + 0x7FFFFFFF;
      v175 = v168 - v619;
      if (__OFSUB__(v168, v619))
        v175 = (v168 >> 31) + 0x7FFFFFFF;
      v101 = 0;
      if (v56 <= v175)
        v56 = v175;
    }
    else
    {
      v158 = v629;
      v159 = (*(uint64_t (**)(int *))(*(_QWORD *)v629 + 1480))(v629);
      v160 = v158[31];
      v161 = ((v160 >> 13) & 6) - 2;
      if (v161 < 4)
        v162 = v158 + 40;
      else
        v162 = v158 + 41;
      v163 = (*v162 + (*v162 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
      if ((v159 & 0xFF00000000) != 0)
        v163 = v159;
      v164 = ((unsigned __int16)v160 >> 13) - 1;
      v165 = v31;
      if (v164 > 4)
        v166 = 0;
      else
        v166 = qword_1969FDAA0[v164];
      v176 = v158[v166 + 42];
      v101 = v163 + v176;
      if (__OFADD__(v163, v176))
        v101 = (v163 >> 31) + 0x7FFFFFFF;
      if (v161 < 4)
        v177 = (unsigned int *)(v158 + 40);
      else
        v177 = (unsigned int *)(v158 + 41);
      v178 = *v177;
      v179 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v158 + 1112))(v158, 0);
      v180 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v158 + 1120))(v158, 0);
      v181 = v179 + v180;
      if (__OFADD__(v179, v180))
        v181 = (v179 >> 31) + 0x7FFFFFFF;
      v145 = __OFADD__(v178, v181);
      v182 = v178 + v181;
      if (v145)
        v182 = (v178 >> 31) + 0x7FFFFFFF;
      v183 = v182 - v101;
      if (__OFSUB__(v182, v101))
        v183 = (v182 >> 31) + 0x7FFFFFFF;
      v184 = v165 + v183;
      if (__OFADD__(v165, v183))
        v184 = (v165 >> 31) + 0x7FFFFFFF;
      v99 = 0;
      v185 = v626;
      if (v626 <= v184)
        v185 = v184;
      v626 = v185;
    }
    goto LABEL_308;
  }
  v97 = v630;
  v98 = v629 ? v629 : v630;
  if (!v98)
  {
LABEL_270:
    v101 = 0;
    v99 = 0;
    goto LABEL_308;
  }
  v99 = 0;
  v100 = v31;
  v101 = 0;
  v145 = __OFADD__(v55, v613);
  v611 = v55 + v613;
  v614 = v100;
  v102 = v145;
  v609 = v102;
  v607 = v48 - v25;
  v103 = __OFSUB__(v48, v25);
  v605 = v103;
  v598 = (v100 >> 31) + 0x7FFFFFFF;
  v599 = (v55 >> 31) + 0x7FFFFFFF;
  v597 = (v48 >> 31) + 0x7FFFFFFF;
  v603 = v628;
  do
  {
    v104 = *(unsigned int *)((char *)v98 + 47);
    if (v104 | ((unint64_t)*((unsigned __int8 *)v98 + 51) << 32)
      && (v105 = *(_QWORD *)((v104 | ((unint64_t)*((unsigned __int8 *)v98 + 51) << 32)) + 8)) != 0)
    {
      if ((*(_BYTE *)(v105 + 45) & 4) != 0)
        v106 = *(int **)((v104 | ((unint64_t)*((unsigned __int8 *)v98 + 51) << 32)) + 8);
      else
        v106 = 0;
    }
    else
    {
      v106 = 0;
    }
    v107 = (*(uint64_t (**)(int *))(*(_QWORD *)v98 + 1480))(v98);
    v108 = v98[31];
    v109 = ((v108 >> 13) & 6) - 2;
    if (v109 < 4)
      v110 = v98 + 40;
    else
      v110 = v98 + 41;
    v111 = (*v110 + (*v110 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    if ((v107 & 0xFF00000000) != 0)
      v111 = v107;
    v112 = ((unsigned __int16)v108 >> 13) - 1;
    if (v112 > 4)
      v113 = 0;
    else
      v113 = qword_1969FDAA0[v112];
    v114 = v98[v113 + 42];
    v115 = v111 + v114;
    if (__OFADD__(v111, v114))
      v115 = (v111 >> 31) + 0x7FFFFFFF;
    if (v109 < 4)
      v116 = (unsigned int *)(v98 + 40);
    else
      v116 = (unsigned int *)(v98 + 41);
    v117 = *v116;
    v118 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v98 + 1112))(v98, 0);
    v119 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v98 + 1120))(v98, 0);
    v120 = v118 + v119;
    if (__OFADD__(v118, v119))
      v120 = (v118 >> 31) + 0x7FFFFFFF;
    v145 = __OFADD__(v117, v120);
    v121 = v117 + v120;
    if (v145)
      v121 = (v117 >> 31) + 0x7FFFFFFF;
    v122 = v121 - v115;
    if (__OFSUB__(v121, v115))
      v122 = (v121 >> 31) + 0x7FFFFFFF;
    v123 = (*(uint64_t (**)(int *))(*(_QWORD *)v106 + 1480))(v106);
    v124 = v106[31];
    v125 = ((v124 >> 13) & 6) - 2;
    if (v125 < 4)
      v126 = v106 + 40;
    else
      v126 = v106 + 41;
    v127 = (*v126 + (*v126 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    if ((v123 & 0xFF00000000) != 0)
      v127 = v123;
    v128 = ((unsigned __int16)v124 >> 13) - 1;
    if (v128 > 4)
      v129 = 0;
    else
      v129 = qword_1969FDAA0[v128];
    v130 = v106[v129 + 42];
    v131 = v127 + v130;
    if (__OFADD__(v127, v130))
      v131 = (v127 >> 31) + 0x7FFFFFFF;
    v132 = v56;
    if (v125 < 4)
      v133 = (unsigned int *)(v106 + 40);
    else
      v133 = (unsigned int *)(v106 + 41);
    v134 = *v133;
    v135 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v106 + 1112))(v106, 0);
    v136 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v106 + 1120))(v106, 0);
    v137 = v135 + v136;
    if (__OFADD__(v135, v136))
      v137 = (v135 >> 31) + 0x7FFFFFFF;
    v145 = __OFADD__(v134, v137);
    v138 = v134 + v137;
    if (v145)
      v138 = (v134 >> 31) + 0x7FFFFFFF;
    v139 = v138 - v131;
    if (__OFSUB__(v138, v131))
      v139 = (v138 >> 31) + 0x7FFFFFFF;
    if (v101 <= v131)
      v101 = v131;
    if (v99 <= v122)
      v99 = v122;
    v140 = v611;
    if (v609)
      v140 = v599;
    if (v624 > v140)
      v140 = v624;
    v141 = v115 - v619;
    if (__OFSUB__(v115, v619))
      v141 = (v115 >> 31) + 0x7FFFFFFF;
    if (v140 <= v141)
      v140 = v141;
    v142 = v607;
    if (v605)
      v142 = v597;
    if (v621 > v142)
      v142 = v621;
    v143 = v614 + v139;
    if (__OFADD__(v614, v139))
      v143 = v598;
    if (v142 <= v143)
      v142 = v143;
    v144 = v140 - v115;
    if (__OFSUB__(v140, v115))
      v144 = (v140 >> 31) + 0x7FFFFFFF;
    v145 = __OFSUB__(v142, v139);
    v146 = v142 - v139;
    v147 = __OFSUB__(v142, v139);
    v148 = v142 - v139;
    if (v145)
      v148 = (v142 >> 31) + 0x7FFFFFFF;
    v145 = __OFADD__(v144, v148);
    v149 = v144 + v148;
    if (v145)
      v149 = (v144 >> 31) + 0x7FFFFFFF;
    if (v149 < v617)
    {
      if (v147)
        v146 = (v142 >> 31) + 0x7FFFFFFF;
      v145 = __OFSUB__(v602, v146);
      v150 = v602 - v146;
      if (v145)
        v150 = (v602 >> 31) + 0x7FFFFFFF;
      if (v150 >= 1)
      {
        v151 = v617 - v149;
        if (__OFSUB__(v617, v149))
          v151 = (v617 >> 31) + 0x7FFFFFFF;
        if (v151 < v150)
          v150 = v151;
        if (__OFADD__(v142, v150))
          v142 = (v142 >> 31) + 0x7FFFFFFF;
        else
          v142 += v150;
        v145 = __OFADD__(v149, v150);
        v152 = v149 + v150;
        if (v145)
          v149 = (v149 >> 31) + 0x7FFFFFFF;
        else
          v149 = v152;
      }
      if (v149 < v617)
      {
        v145 = __OFSUB__(v617, v149);
        v153 = v617 - v149;
        if (v145)
          v153 = (v617 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v140, v153);
        v154 = v140 + v153;
        if (v145)
          v140 = (v140 >> 31) + 0x7FFFFFFF;
        else
          v140 = v154;
      }
    }
    if (v132 <= v140)
      v56 = v140;
    else
      v56 = v132;
    v155 = v626;
    if (v626 <= v142)
      v155 = v142;
    v626 = v155;
    v156 = *(unsigned int *)((char *)v106 + 47);
    v157 = v156 | ((unint64_t)*((unsigned __int8 *)v106 + 51) << 32);
    if (v157)
    {
      v157 = *(_QWORD *)((v156 | ((unint64_t)*((unsigned __int8 *)v106 + 51) << 32)) + 8);
      if (v157)
      {
        if ((*(_BYTE *)(v157 + 45) & 4) == 0)
          v157 = 0;
      }
    }
    if ((int *)v157 == v603)
      v98 = v97;
    else
      v98 = (int *)v157;
  }
  while (v98);
LABEL_308:
  v186 = v627;
  v187 = (*(uint64_t (**)(int *))(*(_QWORD *)v627 + 1480))(v627);
  v188 = v186[31];
  v189 = ((v188 >> 13) & 6) - 2;
  if (v189 < 4)
    v190 = v186 + 40;
  else
    v190 = v186 + 41;
  v191 = (*v190 + (*v190 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v187 & 0xFF00000000) != 0)
    v191 = v187;
  v192 = ((unsigned __int16)v188 >> 13) - 1;
  if (v192 > 4)
    v193 = 0;
  else
    v193 = qword_1969FDAA0[v192];
  v194 = v186[v193 + 42];
  v195 = v191 + v194;
  if (__OFADD__(v191, v194))
    v195 = (v191 >> 31) + 0x7FFFFFFF;
  if (v189 < 4)
    v196 = (unsigned int *)(v186 + 40);
  else
    v196 = (unsigned int *)(v186 + 41);
  v197 = *v196;
  v198 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1112))(v186, 0);
  v199 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1120))(v186, 0);
  v200 = v198 + v199;
  if (__OFADD__(v198, v199))
    v200 = (v198 >> 31) + 0x7FFFFFFF;
  v145 = __OFADD__(v197, v200);
  v201 = v197 + v200;
  if (v145)
    v201 = (v197 >> 31) + 0x7FFFFFFF;
  v202 = v201 - v195;
  if (__OFSUB__(v201, v195))
    v202 = (v201 >> 31) + 0x7FFFFFFF;
  v622 = v186 + 42;
  if (((v186[31] >> 13) & 6) - 2 < 4)
    v203 = (unsigned int *)(v186 + 41);
  else
    v203 = (unsigned int *)(v186 + 40);
  v204 = *v203;
  v205 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1128))(v186, 0);
  v206 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1136))(v186, 0);
  v207 = v205 + v206;
  if (__OFADD__(v205, v206))
    v207 = (v205 >> 31) + 0x7FFFFFFF;
  v208 = v204 + v207;
  if (__OFADD__(v204, v207))
    v208 = (v204 >> 31) + 0x7FFFFFFF;
  if ((*(unsigned int (**)(int *))(*(_QWORD *)v186 + 176))(v186)
    && (v209 = (*(uint64_t (**)(int *))(*(_QWORD *)v186 + 1920))(v186)) != 0)
  {
    v210 = *(_DWORD *)(v209 + 296);
  }
  else
  {
    v210 = 0;
  }
  if (v210 >= v208)
    v210 = v208;
  v625 = v210;
  v211 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1064))(v616);
  v212 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 976))(v616);
  v213 = v211 + v212;
  if (__OFADD__(v211, v212))
    v213 = (v211 >> 31) + 0x7FFFFFFF;
  v620 = v213;
  v214 = v101 + v626;
  if (__OFADD__(v101, v626))
    v214 = (v101 >> 31) + 0x7FFFFFFF;
  v215 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1048))(v616);
  v216 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 960))(v616);
  v217 = v215 + v216;
  if (__OFADD__(v215, v216))
    v217 = (v215 >> 31) + 0x7FFFFFFF;
  v618 = v195;
  if (v195 <= v214)
    v218 = v214;
  else
    v218 = v195;
  v219 = v218 + v217;
  if (__OFADD__(v218, v217))
    v219 = (v218 >> 31) + 0x7FFFFFFF;
  v220 = v99 + v56;
  if (__OFADD__(v99, v56))
    v220 = (v99 >> 31) + 0x7FFFFFFF;
  v221 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1056))(v616);
  v222 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 968))(v616);
  v223 = v221 + v222;
  if (__OFADD__(v221, v222))
    v223 = (v221 >> 31) + 0x7FFFFFFF;
  if (v202 <= v220)
    v224 = v220;
  else
    v224 = v202;
  v145 = __OFADD__(v224, v223);
  v225 = v224 + v223;
  if (v145)
    v225 = (v224 >> 31) + 0x7FFFFFFF;
  v145 = __OFADD__(v219, v225);
  v226 = v219 + v225;
  if (v145)
    v226 = (v219 >> 31) + 0x7FFFFFFF;
  if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
    v227 = (int *)((char *)v616 + 160);
  else
    v227 = (int *)((char *)v616 + 164);
  *v227 = v226;
  v228 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v616 + 3) + 8) + 120);
  if (v228 > 6)
    goto LABEL_872;
  v229 = 1 << v228;
  if ((v229 & 0x4C) != 0)
  {
    v272 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1064))(v616);
    v273 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1072))(v616);
    v274 = v272 + v273;
    if (__OFADD__(v272, v273))
      v274 = (v272 >> 31) + 0x7FFFFFFF;
    v275 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 976))(v616);
    v276 = v274 + v275;
    if (__OFADD__(v274, v275))
      v276 = (v274 >> 31) + 0x7FFFFFFF;
    v277 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 984))(v616);
    v278 = v276 + v277;
    if (__OFADD__(v276, v277))
      v278 = (v276 >> 31) + 0x7FFFFFFF;
    v279 = (unsigned int *)v630;
    v615 = v56;
    if (v630)
    {
      v280 = (unsigned int *)v630;
      do
      {
        v281 = *(unsigned int *)((char *)v280 + 47);
        if (v281 | ((unint64_t)*((unsigned __int8 *)v280 + 51) << 32)
          && (v282 = *(_QWORD *)((v281 | ((unint64_t)*((unsigned __int8 *)v280 + 51) << 32)) + 8)) != 0)
        {
          if ((*(_BYTE *)(v282 + 45) & 4) != 0)
            v283 = *(_QWORD *)((v281 | ((unint64_t)*((unsigned __int8 *)v280 + 51) << 32)) + 8);
          else
            v283 = 0;
        }
        else
        {
          v283 = 0;
        }
        v284 = v280 + 41;
        if (((v280[31] >> 13) & 6) - 2 >= 4)
          v284 = v280 + 40;
        v285 = *v284;
        v286 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v280 + 1128))(v280, 0);
        v287 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v280 + 1136))(v280, 0);
        v288 = v286 + v287;
        if (__OFADD__(v286, v287))
          v288 = (v286 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v285, v288);
        v289 = v285 + v288;
        if (v145)
          v290 = (v285 >> 31) + 0x7FFFFFFF;
        else
          v290 = v289;
        v291 = (unsigned int *)(v283 + 164);
        if (((*(_DWORD *)(v283 + 124) >> 13) & 6u) - 2 >= 4)
          v291 = (unsigned int *)(v283 + 160);
        v292 = *v291;
        v293 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v283 + 1128))(v283, 0);
        v294 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v283 + 1136))(v283, 0);
        v295 = v293 + v294;
        if (__OFADD__(v293, v294))
          v295 = (v293 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v292, v295);
        v296 = v292 + v295;
        if (v145)
          v296 = (v292 >> 31) + 0x7FFFFFFF;
        if (v290 > v296)
          v296 = v290;
        v145 = __OFADD__(v296, v601);
        v297 = v296 + v601;
        v298 = (v296 >> 31) + 0x7FFFFFFF;
        if (!v145)
          v298 = v297;
        v145 = __OFADD__(v278, v298);
        v299 = v278 + v298;
        if (v145)
          v278 = (v278 >> 31) + 0x7FFFFFFF;
        else
          v278 = v299;
        v300 = *(unsigned int *)(v283 + 47);
        if (!(v300 | ((unint64_t)*(unsigned __int8 *)(v283 + 51) << 32)))
          break;
        v280 = *(unsigned int **)((v300 | ((unint64_t)*(unsigned __int8 *)(v283 + 51) << 32)) + 8);
        if (!v280)
          break;
      }
      while ((*((_BYTE *)v280 + 45) & 4) != 0);
    }
    if (((v186[31] >> 13) & 6) - 2 < 4)
      v301 = (unsigned int *)(v186 + 41);
    else
      v301 = (unsigned int *)(v186 + 40);
    v302 = *v301;
    v303 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1128))(v186, 0);
    v304 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1136))(v186, 0);
    v305 = v303 + v304;
    if (__OFADD__(v303, v304))
      v305 = (v303 >> 31) + 0x7FFFFFFF;
    v145 = __OFADD__(v302, v305);
    v306 = v302 + v305;
    if (v145)
      v306 = (v302 >> 31) + 0x7FFFFFFF;
    v307 = v278 + v306;
    if (__OFADD__(v278, v306))
      v307 = (v278 >> 31) + 0x7FFFFFFF;
    v308 = (unsigned int *)v629;
    v610 = v628;
    if (v629)
      v309 = v629 == v628;
    else
      v309 = 1;
    v310 = v309;
    v604 = v310;
    v612 = v219;
    if (!v309)
    {
      v424 = v629;
      do
      {
        v425 = *(unsigned int *)((char *)v424 + 47);
        if (v425 | ((unint64_t)*((unsigned __int8 *)v424 + 51) << 32)
          && (v426 = *(_QWORD *)((v425 | ((unint64_t)*((unsigned __int8 *)v424 + 51) << 32)) + 8)) != 0)
        {
          if ((*(_BYTE *)(v426 + 45) & 4) != 0)
            v427 = *(_QWORD *)((v425 | ((unint64_t)*((unsigned __int8 *)v424 + 51) << 32)) + 8);
          else
            v427 = 0;
        }
        else
        {
          v427 = 0;
        }
        v428 = (unsigned int *)(v424 + 41);
        if (((v424[31] >> 13) & 6) - 2 >= 4)
          v428 = (unsigned int *)(v424 + 40);
        v429 = *v428;
        v430 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v424 + 1128))(v424, 0);
        v431 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v424 + 1136))(v424, 0);
        v432 = v430 + v431;
        if (__OFADD__(v430, v431))
          v432 = (v430 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v429, v432);
        v433 = v429 + v432;
        if (v145)
          v433 = (v429 >> 31) + 0x7FFFFFFF;
        v145 = __OFSUB__(v433, v625);
        v434 = v433 - v625;
        v435 = (v433 >> 31) + 0x7FFFFFFF;
        if (v145)
          v436 = v435;
        else
          v436 = v434;
        v437 = (unsigned int *)(v427 + 164);
        if (((*(_DWORD *)(v427 + 124) >> 13) & 6u) - 2 >= 4)
          v437 = (unsigned int *)(v427 + 160);
        v438 = *v437;
        v439 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v427 + 1128))(v427, 0);
        v440 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v427 + 1136))(v427, 0);
        v441 = v439 + v440;
        if (__OFADD__(v439, v440))
          v441 = (v439 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v438, v441);
        v442 = v438 + v441;
        if (v145)
          v442 = (v438 >> 31) + 0x7FFFFFFF;
        if (v436 > v442)
          v442 = v436;
        v443 = v442 & ~(v442 >> 31);
        v145 = __OFADD__(v443, v601);
        v444 = v443 + v601;
        if (v145)
          v444 = 0x7FFFFFFF;
        v145 = __OFADD__(v307, v444);
        v445 = v307 + v444;
        v219 = v612;
        if (v145)
          v307 = (v307 >> 31) + 0x7FFFFFFF;
        else
          v307 = v445;
        v446 = *(unsigned int *)(v427 + 47);
        if (!(v446 | ((unint64_t)*(unsigned __int8 *)(v427 + 51) << 32)))
          break;
        v424 = *(int **)((v446 | ((unint64_t)*(unsigned __int8 *)(v427 + 51) << 32)) + 8);
        if (!v424)
          break;
        v447 = (*((_BYTE *)v424 + 45) & 4) != 0
             ? *(int **)((v446 | ((unint64_t)*(unsigned __int8 *)(v427 + 51) << 32)) + 8)
             : 0;
      }
      while ((*((_BYTE *)v424 + 45) & 4) != 0 && v447 != v610);
    }
    if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
      v311 = (unsigned int *)((char *)v616 + 164);
    else
      v311 = (unsigned int *)((char *)v616 + 160);
    v312 = v615;
    *v311 = v307;
    if (v279)
    {
      v608 = v219 + v615;
      v313 = __OFADD__(v219, v615);
      v606 = v313;
      v314 = v219 - v626;
      v315 = v219;
      v316 = __OFSUB__(v219, v626);
      v600 = (v315 >> 31) + 0x7FFFFFFF;
      v317 = v620;
      while (1)
      {
        v318 = *(unsigned int *)((char *)v279 + 47);
        if (v318 | ((unint64_t)*((unsigned __int8 *)v279 + 51) << 32)
          && (v319 = *(_QWORD *)((v318 | ((unint64_t)*((unsigned __int8 *)v279 + 51) << 32)) + 8)) != 0)
        {
          if ((*(_BYTE *)(v319 + 45) & 4) != 0)
            v320 = *(_QWORD *)((v318 | ((unint64_t)*((unsigned __int8 *)v279 + 51) << 32)) + 8);
          else
            v320 = 0;
        }
        else
        {
          v320 = 0;
        }
        if (((v279[31] >> 13) & 6) - 2 < 4)
          v321 = v279 + 41;
        else
          v321 = v279 + 40;
        v322 = *v321;
        v323 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v279 + 1128))(v279, 0);
        v324 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v279 + 1136))(v279, 0);
        v325 = v323 + v324;
        if (__OFADD__(v323, v324))
          v325 = (v323 >> 31) + 0x7FFFFFFF;
        v326 = v322 + v325;
        if (__OFADD__(v322, v325))
          v326 = (v322 >> 31) + 0x7FFFFFFF;
        if (((*(_DWORD *)(v320 + 124) >> 13) & 6u) - 2 < 4)
          v327 = (unsigned int *)(v320 + 164);
        else
          v327 = (unsigned int *)(v320 + 160);
        v328 = *v327;
        v329 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v320 + 1128))(v320, 0);
        v330 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v320 + 1136))(v320, 0);
        v331 = v329 + v330;
        if (__OFADD__(v329, v330))
          v331 = (v329 >> 31) + 0x7FFFFFFF;
        v312 = v615;
        v145 = __OFADD__(v328, v331);
        v332 = v328 + v331;
        if (v145)
          v332 = (v328 >> 31) + 0x7FFFFFFF;
        if (v326 > v332)
          v332 = v326;
        v145 = __OFADD__(v601, v332);
        v333 = v601 + v332;
        if (v145)
          v333 = (v601 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v317, v333);
        v334 = v317 + v333;
        if (v145)
          v317 = (v317 >> 31) + 0x7FFFFFFF;
        else
          v317 = v334;
        v335 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v279 + 1480))(v279);
        v336 = v279[31];
        v337 = ((v336 >> 13) & 6) - 2;
        if (v337 < 4)
          v338 = (int *)(v279 + 40);
        else
          v338 = (int *)(v279 + 41);
        v339 = v336 >> 13;
        v340 = *v338;
        v341 = *v338 + 63;
        if (v340 < 0)
          v340 = v341;
        v342 = v340 & 0xFFFFFFC0;
        if ((v335 & 0xFF00000000) != 0)
          v342 = v335;
        v343 = v339 & 7;
        v344 = v279[30];
        v345 = (v344 >> 26) & 1;
        if ((v343 - 2) >= 2)
        {
          if (v343 == 4)
          {
            v345 = (v344 & 0x4000000) == 0;
          }
          else if (v343 != 5)
          {
            if ((v344 & 0x4000000) != 0)
              v346 = 3;
            else
              v346 = 1;
            goto LABEL_515;
          }
        }
        v77 = v345 == 0;
        v346 = 2;
        if (!v77)
          v346 = 0;
LABEL_515:
        v347 = v279[v346 + 42];
        v348 = v317 - v347;
        if (__OFSUB__(v317, v347))
          v348 = (v317 >> 31) + 0x7FFFFFFF;
        if (v337 < 4)
          v349 = (int *)(v279 + 41);
        else
          v349 = (int *)(v279 + 40);
        v350 = *v349;
        v145 = __OFSUB__(v348, v350);
        v351 = v348 - v350;
        if (v145)
          v351 = (v348 >> 31) + 0x7FFFFFFF;
        if (v337 < 4)
          v352 = (int *)(v279 + 41);
        else
          v352 = (int *)(v279 + 40);
        if ((*((_BYTE *)v616 + 123) & 4) != 0)
        {
          v353 = *v352;
          v354 = 160;
          if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
            v354 = 164;
          v355 = *(_DWORD *)((char *)v616 + v354);
          v145 = __OFSUB__(v355, v353);
          v356 = v355 - v353;
          if (v145)
            v356 = (v355 >> 31) + 0x7FFFFFFF;
          v145 = __OFSUB__(v356, v351);
          v351 = v356 - v351;
          if (v145)
            v351 = (v356 >> 31) + 0x7FFFFFFF;
        }
        v357 = v608;
        if (v606)
          v357 = v600;
        v145 = __OFSUB__(v357, v342);
        v358 = v357 - v342;
        if (v145)
          v358 = (v357 >> 31) + 0x7FFFFFFF;
        *((_QWORD *)v279 + 19) = v351 | (unint64_t)(v358 << 32);
        v359 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v320 + 1480))(v320);
        v360 = *(_DWORD *)(v320 + 124);
        v361 = ((v360 >> 13) & 6) - 2;
        if (v361 < 4)
          v362 = (int *)(v320 + 160);
        else
          v362 = (int *)(v320 + 164);
        v363 = v360 >> 13;
        v364 = *v362;
        v365 = *v362 + 63;
        if (v364 < 0)
          v364 = v365;
        v366 = v364 & 0xFFFFFFC0;
        if ((v359 & 0xFF00000000) != 0)
          v366 = v359;
        v367 = v363 & 7;
        v368 = *(_DWORD *)(v320 + 120);
        v369 = (v368 >> 26) & 1;
        if ((v367 - 2) < 2)
          goto LABEL_583;
        if (v367 == 4)
        {
          v369 = (v368 & 0x4000000) == 0;
LABEL_583:
          v77 = v369 == 0;
          v370 = 2;
          if (!v77)
            v370 = 0;
          goto LABEL_546;
        }
        if (v367 == 5)
          goto LABEL_583;
        if ((v368 & 0x4000000) != 0)
          v370 = 3;
        else
          v370 = 1;
LABEL_546:
        v371 = *(_DWORD *)(v320 + 4 * v370 + 168);
        v372 = v317 - v371;
        if (__OFSUB__(v317, v371))
          v372 = (v317 >> 31) + 0x7FFFFFFF;
        if (v361 < 4)
          v373 = (int *)(v320 + 164);
        else
          v373 = (int *)(v320 + 160);
        v374 = *v373;
        v145 = __OFSUB__(v372, v374);
        v375 = v372 - v374;
        if (v145)
          v375 = (v372 >> 31) + 0x7FFFFFFF;
        if (v361 < 4)
          v376 = (int *)(v320 + 164);
        else
          v376 = (int *)(v320 + 160);
        if ((*((_BYTE *)v616 + 123) & 4) != 0)
        {
          v377 = *v376;
          v378 = 160;
          if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
            v378 = 164;
          v379 = *(_DWORD *)((char *)v616 + v378);
          v145 = __OFSUB__(v379, v377);
          v380 = v379 - v377;
          if (v145)
            v380 = (v379 >> 31) + 0x7FFFFFFF;
          v145 = __OFSUB__(v380, v375);
          v375 = v380 - v375;
          if (v145)
            v375 = (v380 >> 31) + 0x7FFFFFFF;
        }
        v381 = v314;
        if (v316)
          v381 = v600;
        v145 = __OFSUB__(v381, v366);
        v382 = v381 - v366;
        if (v145)
          v382 = (v381 >> 31) + 0x7FFFFFFF;
        *(_QWORD *)(v320 + 152) = v375 | (unint64_t)(v382 << 32);
        v383 = *(unsigned int *)(v320 + 47);
        if (v383 | ((unint64_t)*(unsigned __int8 *)(v320 + 51) << 32))
        {
          v279 = *(unsigned int **)((v383 | ((unint64_t)*(unsigned __int8 *)(v320 + 51) << 32)) + 8);
          if (v279)
          {
            if ((*((_BYTE *)v279 + 45) & 4) != 0)
              continue;
          }
        }
        goto LABEL_673;
      }
    }
    v317 = v620;
LABEL_673:
    v449 = v186[30];
    v448 = v186[31];
    v450 = (unsigned __int16)v448 >> 13;
    v451 = (v449 >> 26) & 1;
    if ((v450 - 2) < 2)
    {
      v452 = v616;
      v453 = v612;
      v454 = v186 + 42;
    }
    else
    {
      v452 = v616;
      v453 = v612;
      v454 = v186 + 42;
      if ((_DWORD)v450 == 4)
      {
        v451 = (v449 & 0x4000000) == 0;
      }
      else if ((_DWORD)v450 != 5)
      {
        v455 = 3;
        if ((v449 & 0x4000000) != 0)
          v455 = 1;
LABEL_678:
        v456 = v454[v455];
        v145 = __OFADD__(v317, v456);
        v457 = v317 + v456;
        if (v145)
          v457 = (v317 >> 31) + 0x7FFFFFFF;
        v458 = ((v448 >> 13) & 6) - 2;
        if (v458 < 4)
          v459 = v186 + 41;
        else
          v459 = v186 + 40;
        if ((*((_BYTE *)v452 + 123) & 4) != 0)
        {
          v460 = *v459;
          if (((*((_DWORD *)v452 + 31) >> 13) & 6u) - 2 < 4)
            v461 = (unsigned int *)((char *)v452 + 164);
          else
            v461 = (unsigned int *)((char *)v452 + 160);
          v462 = *v461;
          v145 = __OFSUB__(v462, v460);
          v463 = v462 - v460;
          if (v145)
            v463 = (v462 >> 31) + 0x7FFFFFFF;
          v145 = __OFSUB__(v463, v457);
          v457 = v463 - v457;
          if (v145)
            v457 = (v463 >> 31) + 0x7FFFFFFF;
        }
        v464 = v453 - v618;
        if (__OFSUB__(v453, v618))
          v464 = (v453 >> 31) + 0x7FFFFFFF;
        v465 = v450 - 1;
        if (v465 > 4)
          v466 = 0;
        else
          v466 = qword_1969FDAA0[v465];
        v467 = v454[v466];
        v145 = __OFADD__(v464, v467);
        v468 = v464 + v467;
        if (v145)
          v468 = (v464 >> 31) + 0x7FFFFFFF;
        *((_QWORD *)v186 + 19) = v457 | (unint64_t)(v468 << 32);
        if (v458 < 4)
          v469 = (unsigned int *)(v186 + 41);
        else
          v469 = (unsigned int *)(v186 + 40);
        v470 = *v469;
        v471 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1128))(v186, 0);
        v472 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1136))(v186, 0);
        v473 = v471 + v472;
        if (__OFADD__(v471, v472))
          v473 = (v471 >> 31) + 0x7FFFFFFF;
        v145 = __OFADD__(v470, v473);
        v474 = v470 + v473;
        if (v145)
          v474 = (v470 >> 31) + 0x7FFFFFFF;
        v475 = v317 + v474;
        if (__OFADD__(v317, v474))
          v475 = (v317 >> 31) + 0x7FFFFFFF;
        if ((v604 & 1) != 0)
          goto LABEL_872;
        v476 = v453 + v312;
        v477 = __OFADD__(v453, v312);
        v623 = (v453 >> 31) + 0x7FFFFFFF;
        v145 = __OFSUB__(v453, v626);
        v478 = v453 - v626;
        v479 = v145;
        while (1)
        {
          v480 = *(unsigned int *)((char *)v308 + 47);
          if (v480 | ((unint64_t)*((unsigned __int8 *)v308 + 51) << 32)
            && (v481 = *(_QWORD *)((v480 | ((unint64_t)*((unsigned __int8 *)v308 + 51) << 32)) + 8)) != 0)
          {
            if ((*(_BYTE *)(v481 + 45) & 4) != 0)
              v482 = *(_QWORD *)((v480 | ((unint64_t)*((unsigned __int8 *)v308 + 51) << 32)) + 8);
            else
              v482 = 0;
          }
          else
          {
            v482 = 0;
          }
          v483 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v308 + 1480))(v308);
          v484 = v308[31];
          v485 = ((v484 >> 13) & 6) - 2;
          if (v485 < 4)
            v486 = (int *)(v308 + 40);
          else
            v486 = (int *)(v308 + 41);
          v487 = (*v486 + (*v486 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
          if ((v483 & 0xFF00000000) != 0)
            v487 = v483;
          v488 = v475 - v625;
          if (__OFSUB__(v475, v625))
            v488 = (v475 >> 31) + 0x7FFFFFFF;
          v489 = (unsigned __int16)v484 >> 13;
          v490 = v308[30];
          v491 = (v490 >> 26) & 1;
          if ((v489 - 2) >= 2)
          {
            if (v489 == 4)
            {
              v491 = (v490 & 0x4000000) == 0;
            }
            else if (v489 != 5)
            {
              if ((v490 & 0x4000000) != 0)
                v492 = 1;
              else
                v492 = 3;
              goto LABEL_729;
            }
          }
          v77 = v491 == 0;
          v492 = 2;
          if (v77)
            v492 = 0;
LABEL_729:
          v493 = v308[v492 + 42];
          v145 = __OFADD__(v488, v493);
          v494 = v488 + v493;
          if (v145)
            v494 = (v488 >> 31) + 0x7FFFFFFF;
          if (v485 < 4)
            v495 = (int *)(v308 + 41);
          else
            v495 = (int *)(v308 + 40);
          if ((*((_BYTE *)v616 + 123) & 4) != 0)
          {
            v496 = *v495;
            v497 = 160;
            if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
              v497 = 164;
            v498 = *(_DWORD *)((char *)v616 + v497);
            v145 = __OFSUB__(v498, v496);
            v499 = v498 - v496;
            if (v145)
              v499 = (v498 >> 31) + 0x7FFFFFFF;
            v145 = __OFSUB__(v499, v494);
            v494 = v499 - v494;
            if (v145)
              v494 = (v499 >> 31) + 0x7FFFFFFF;
          }
          v500 = v476;
          if (v477)
            v500 = v623;
          v145 = __OFSUB__(v500, v487);
          v501 = v500 - v487;
          if (v145)
            v501 = (v500 >> 31) + 0x7FFFFFFF;
          *((_QWORD *)v308 + 19) = v494 | (unint64_t)(v501 << 32);
          v502 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v482 + 1480))(v482);
          v503 = *(_DWORD *)(v482 + 124);
          v504 = ((v503 >> 13) & 6) - 2;
          if (v504 < 4)
            v505 = (int *)(v482 + 160);
          else
            v505 = (int *)(v482 + 164);
          v506 = v503 >> 13;
          v507 = *v505;
          v508 = *v505 + 63;
          if (v507 < 0)
            v507 = v508;
          v509 = v507 & 0xFFFFFFC0;
          if ((v502 & 0xFF00000000) != 0)
            v509 = v502;
          v510 = v506 & 7;
          v511 = *(_DWORD *)(v482 + 120);
          v512 = (v511 >> 26) & 1;
          if ((v510 - 2) < 2)
            goto LABEL_810;
          if (v510 == 4)
          {
            v512 = (v511 & 0x4000000) == 0;
LABEL_810:
            v77 = v512 == 0;
            v513 = 2;
            if (v77)
              v513 = 0;
            goto LABEL_756;
          }
          if (v510 == 5)
            goto LABEL_810;
          if ((v511 & 0x4000000) != 0)
            v513 = 1;
          else
            v513 = 3;
LABEL_756:
          v514 = *(_DWORD *)(v482 + 4 * v513 + 168);
          v145 = __OFADD__(v475, v514);
          v515 = v475 + v514;
          if (v145)
            v515 = (v475 >> 31) + 0x7FFFFFFF;
          if (v504 < 4)
            v516 = (int *)(v482 + 164);
          else
            v516 = (int *)(v482 + 160);
          if ((*((_BYTE *)v616 + 123) & 4) != 0)
          {
            v517 = *v516;
            v518 = 160;
            if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
              v518 = 164;
            v519 = *(_DWORD *)((char *)v616 + v518);
            v145 = __OFSUB__(v519, v517);
            v520 = v519 - v517;
            if (v145)
              v520 = (v519 >> 31) + 0x7FFFFFFF;
            v145 = __OFSUB__(v520, v515);
            v515 = v520 - v515;
            if (v145)
              v515 = (v520 >> 31) + 0x7FFFFFFF;
          }
          v521 = v478;
          if (v479)
            v521 = v623;
          v145 = __OFSUB__(v521, v509);
          v522 = v521 - v509;
          if (v145)
            v522 = (v521 >> 31) + 0x7FFFFFFF;
          *(_QWORD *)(v482 + 152) = v515 | (unint64_t)(v522 << 32);
          if (((v308[31] >> 13) & 6) - 2 < 4)
            v523 = v308 + 41;
          else
            v523 = v308 + 40;
          v524 = *v523;
          v525 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v308 + 1128))(v308, 0);
          v526 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v308 + 1136))(v308, 0);
          v527 = v525 + v526;
          if (__OFADD__(v525, v526))
            v527 = (v525 >> 31) + 0x7FFFFFFF;
          v528 = v524 + v527;
          if (__OFADD__(v524, v527))
            v528 = (v524 >> 31) + 0x7FFFFFFF;
          if (((*(_DWORD *)(v482 + 124) >> 13) & 6u) - 2 < 4)
            v529 = (unsigned int *)(v482 + 164);
          else
            v529 = (unsigned int *)(v482 + 160);
          v530 = *v529;
          v531 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v482 + 1128))(v482, 0);
          v532 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v482 + 1136))(v482, 0);
          v533 = v531 + v532;
          if (__OFADD__(v531, v532))
            v533 = (v531 >> 31) + 0x7FFFFFFF;
          v145 = __OFADD__(v530, v533);
          v534 = v530 + v533;
          if (v145)
            v534 = (v530 >> 31) + 0x7FFFFFFF;
          if (v528 <= v534)
            v535 = v534;
          else
            v535 = v528;
          v536 = v535 + v601;
          if (__OFADD__(v535, v601))
            v536 = (v535 >> 31) + 0x7FFFFFFF;
          v145 = __OFADD__(v475, v536);
          v537 = v475 + v536;
          if (v145)
            v475 = (v475 >> 31) + 0x7FFFFFFF;
          else
            v475 = v537;
          v538 = *(unsigned int *)(v482 + 47);
          if (v538 | ((unint64_t)*(unsigned __int8 *)(v482 + 51) << 32))
          {
            v308 = *(unsigned int **)((v538 | ((unint64_t)*(unsigned __int8 *)(v482 + 51) << 32)) + 8);
            if (v308)
            {
              v539 = (*((_BYTE *)v308 + 45) & 4) != 0
                   ? *(int **)((v538 | ((unint64_t)*(unsigned __int8 *)(v482 + 51) << 32)) + 8)
                   : 0;
              if ((*((_BYTE *)v308 + 45) & 4) != 0 && v539 != v610)
                continue;
            }
          }
          goto LABEL_872;
        }
      }
    }
    v77 = v451 == 0;
    v455 = 2;
    if (v77)
      v455 = 0;
    goto LABEL_678;
  }
  if ((v229 & 0x11) != 0)
  {
    if (((v186[31] >> 13) & 6) - 2 < 4)
      v230 = (unsigned int *)(v186 + 41);
    else
      v230 = (unsigned int *)(v186 + 40);
    v231 = *v230;
    v232 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1128))(v186, 0);
    v233 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1136))(v186, 0);
    v234 = v232 + v233;
    if (__OFADD__(v232, v233))
      v234 = (v232 >> 31) + 0x7FFFFFFF;
    v235 = v231 + v234;
    if (__OFADD__(v231, v234))
      v235 = (v231 >> 31) + 0x7FFFFFFF;
    v236 = v629;
    if (((v629[31] >> 13) & 6) - 2 < 4)
      v237 = (unsigned int *)(v629 + 41);
    else
      v237 = (unsigned int *)(v629 + 40);
    v238 = *v237;
    v239 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v629 + 1128))(v629, 0);
    v240 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v236 + 1136))(v236, 0);
    v241 = v239 + v240;
    if (__OFADD__(v239, v240))
      v241 = (v239 >> 31) + 0x7FFFFFFF;
    v145 = __OFADD__(v238, v241);
    v242 = v238 + v241;
    if (v145)
      v242 = (v238 >> 31) + 0x7FFFFFFF;
    v243 = v242 - v625;
    if (__OFSUB__(v242, v625))
      v243 = (v242 >> 31) + 0x7FFFFFFF;
    v244 = v243 + v601;
    if (__OFADD__(v243, v601))
      v244 = (v243 >> 31) + 0x7FFFFFFF;
    v245 = v244 & ~(v244 >> 31);
    v246 = v235 + v245;
    if (__OFADD__(v235, v245))
      v246 = (v235 >> 31) + 0x7FFFFFFF;
    v247 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1064))(v616);
    v248 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1072))(v616);
    v249 = v247 + v248;
    if (__OFADD__(v247, v248))
      v249 = (v247 >> 31) + 0x7FFFFFFF;
    v250 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 976))(v616);
    v251 = v249 + v250;
    if (__OFADD__(v249, v250))
      v251 = (v249 >> 31) + 0x7FFFFFFF;
    v252 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 984))(v616);
    v253 = v251 + v252;
    if (__OFADD__(v251, v252))
      v253 = (v251 >> 31) + 0x7FFFFFFF;
    v145 = __OFADD__(v246, v253);
    v254 = v246 + v253;
    if (v145)
      v254 = (v246 >> 31) + 0x7FFFFFFF;
    v255 = ((*((_DWORD *)v616 + 31) >> 13) & 6) - 2;
    if (v255 < 4)
      v256 = (int *)((char *)v616 + 164);
    else
      v256 = (int *)((char *)v616 + 160);
    *v256 = v254;
    v258 = v186[30];
    v257 = v186[31];
    v259 = (unsigned __int16)v257 >> 13;
    v260 = (v258 >> 26) & 1;
    if ((v259 - 2) >= 2)
    {
      if ((_DWORD)v259 == 4)
      {
        v260 = (v258 & 0x4000000) == 0;
      }
      else if ((_DWORD)v259 != 5)
      {
        v261 = 3;
        if ((v258 & 0x4000000) != 0)
          v261 = 1;
        goto LABEL_397;
      }
    }
    v77 = v260 == 0;
    v261 = 2;
    if (v77)
      v261 = 0;
LABEL_397:
    v262 = v622[v261];
    v145 = __OFADD__(v620, v262);
    v263 = v620 + v262;
    if (v145)
      v263 = (v620 >> 31) + 0x7FFFFFFF;
    if (((v257 >> 13) & 6) - 2 < 4)
      v264 = v186 + 41;
    else
      v264 = v186 + 40;
    if ((*((_BYTE *)v616 + 123) & 4) != 0)
    {
      v265 = *v264;
      if (v255 < 4)
        v266 = (unsigned int *)((char *)v616 + 164);
      else
        v266 = (unsigned int *)((char *)v616 + 160);
      v267 = *v266;
      v268 = *v266 - v265;
      if (__OFSUB__(v267, v265))
        v268 = (v267 >> 31) + 0x7FFFFFFF;
      v145 = __OFSUB__(v268, v263);
      v263 = v268 - v263;
      if (v145)
        v263 = (v268 >> 31) + 0x7FFFFFFF;
    }
    v269 = v219 - v195;
    if (__OFSUB__(v219, v195))
      v269 = (v219 >> 31) + 0x7FFFFFFF;
    v270 = v259 - 1;
    if (v270 > 4)
      v271 = 0;
    else
      v271 = qword_1969FDAA0[v270];
    v540 = v622[v271];
    v145 = __OFADD__(v269, v540);
    v541 = v269 + v540;
    if (v145)
      v541 = (v269 >> 31) + 0x7FFFFFFF;
    *((_QWORD *)v186 + 19) = v263 | (unint64_t)(v541 << 32);
    v145 = __OFADD__(v620, v235);
    v542 = v620 + v235;
    if (v145)
      v542 = (v620 >> 31) + 0x7FFFFFFF;
    v543 = (*(uint64_t (**)(int *))(*(_QWORD *)v236 + 1480))(v236);
    v544 = v236[31];
    v545 = ((v544 >> 13) & 6) - 2;
    if (v545 < 4)
      v546 = v236 + 40;
    else
      v546 = v236 + 41;
    v547 = v544 >> 13;
    v548 = (*v546 + (*v546 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    if ((v543 & 0xFF00000000) != 0)
      v548 = v543;
    v549 = v542 - v625;
    if (__OFSUB__(v542, v625))
      v549 = (v542 >> 31) + 0x7FFFFFFF;
    v550 = v547 & 7;
    v551 = v236[30];
    v552 = (v551 >> 26) & 1;
    if ((v550 - 2) >= 2)
    {
      if (v550 == 4)
      {
        v552 = (v551 & 0x4000000) == 0;
      }
      else if (v550 != 5)
      {
        v553 = 3;
        if ((v551 & 0x4000000) != 0)
          v553 = 1;
        goto LABEL_829;
      }
    }
    v77 = v552 == 0;
    v553 = 2;
    if (v77)
      v553 = 0;
LABEL_829:
    v554 = v236[v553 + 42];
    v145 = __OFADD__(v549, v554);
    v555 = v549 + v554;
    if (v145)
      v555 = (v549 >> 31) + 0x7FFFFFFF;
    if (v545 < 4)
      v556 = v236 + 41;
    else
      v556 = v236 + 40;
    if ((*((_BYTE *)v616 + 123) & 4) != 0)
    {
      v557 = *v556;
      if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
        v558 = (unsigned int *)((char *)v616 + 164);
      else
        v558 = (unsigned int *)((char *)v616 + 160);
      v559 = *v558;
      v145 = __OFSUB__(v559, v557);
      v560 = v559 - v557;
      if (v145)
        v560 = (v559 >> 31) + 0x7FFFFFFF;
      v145 = __OFSUB__(v560, v555);
      v555 = v560 - v555;
      if (v145)
        v555 = (v560 >> 31) + 0x7FFFFFFF;
    }
    v561 = v219 + v56;
    if (!__OFADD__(v219, v56))
      goto LABEL_869;
    goto LABEL_842;
  }
  if (((v186[31] >> 13) & 6) - 2 < 4)
    v384 = (unsigned int *)(v186 + 41);
  else
    v384 = (unsigned int *)(v186 + 40);
  v385 = *v384;
  v386 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1128))(v186, 0);
  v387 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v186 + 1136))(v186, 0);
  v388 = v386 + v387;
  if (__OFADD__(v386, v387))
    v388 = (v386 >> 31) + 0x7FFFFFFF;
  v389 = v385 + v388;
  if (__OFADD__(v385, v388))
    v389 = (v385 >> 31) + 0x7FFFFFFF;
  v236 = v629;
  if (((v629[31] >> 13) & 6) - 2 < 4)
    v390 = (unsigned int *)(v629 + 41);
  else
    v390 = (unsigned int *)(v629 + 40);
  v391 = *v390;
  v392 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v629 + 1128))(v629, 0);
  v393 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v236 + 1136))(v236, 0);
  v394 = v392 + v393;
  if (__OFADD__(v392, v393))
    v394 = (v392 >> 31) + 0x7FFFFFFF;
  v145 = __OFADD__(v391, v394);
  v395 = v391 + v394;
  if (v145)
    v395 = (v391 >> 31) + 0x7FFFFFFF;
  v396 = v395 + v601;
  if (__OFADD__(v395, v601))
    v396 = (v395 >> 31) + 0x7FFFFFFF;
  v397 = v396 & ~(v396 >> 31);
  v398 = v389 + v397;
  if (__OFADD__(v389, v397))
    v398 = (v389 >> 31) + 0x7FFFFFFF;
  v399 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1064))(v616);
  v400 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 1072))(v616);
  v401 = v399 + v400;
  if (__OFADD__(v399, v400))
    v401 = (v399 >> 31) + 0x7FFFFFFF;
  v402 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 976))(v616);
  v403 = v401 + v402;
  if (__OFADD__(v401, v402))
    v403 = (v401 >> 31) + 0x7FFFFFFF;
  v404 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v616 + 984))(v616);
  v405 = v403 + v404;
  if (__OFADD__(v403, v404))
    v405 = (v403 >> 31) + 0x7FFFFFFF;
  v145 = __OFADD__(v398, v405);
  v406 = v398 + v405;
  if (v145)
    v406 = (v398 >> 31) + 0x7FFFFFFF;
  v407 = ((*((_DWORD *)v616 + 31) >> 13) & 6) - 2;
  if (v407 < 4)
    v408 = (int *)((char *)v616 + 164);
  else
    v408 = (int *)((char *)v616 + 160);
  *v408 = v406;
  v410 = v186[30];
  v409 = v186[31];
  v411 = (unsigned __int16)v409 >> 13;
  v412 = (v410 >> 26) & 1;
  if ((v411 - 2) >= 2)
  {
    if ((_DWORD)v411 == 4)
    {
      v412 = (v410 & 0x4000000) == 0;
    }
    else if ((_DWORD)v411 != 5)
    {
      v413 = 3;
      if ((v410 & 0x4000000) != 0)
        v413 = 1;
      goto LABEL_617;
    }
  }
  v77 = v412 == 0;
  v413 = 2;
  if (v77)
    v413 = 0;
LABEL_617:
  v414 = v622[v413];
  v145 = __OFADD__(v620, v414);
  v415 = v620 + v414;
  if (v145)
    v415 = (v620 >> 31) + 0x7FFFFFFF;
  if (((v409 >> 13) & 6) - 2 < 4)
    v416 = v186 + 41;
  else
    v416 = v186 + 40;
  if ((*((_BYTE *)v616 + 123) & 4) != 0)
  {
    v417 = *v416;
    if (v407 < 4)
      v418 = (unsigned int *)((char *)v616 + 164);
    else
      v418 = (unsigned int *)((char *)v616 + 160);
    v419 = *v418;
    v420 = *v418 - v417;
    if (__OFSUB__(v419, v417))
      v420 = (v419 >> 31) + 0x7FFFFFFF;
    v145 = __OFSUB__(v420, v415);
    v415 = v420 - v415;
    if (v145)
      v415 = (v420 >> 31) + 0x7FFFFFFF;
  }
  v421 = v219 - v195;
  if (__OFSUB__(v219, v195))
    v421 = (v219 >> 31) + 0x7FFFFFFF;
  v422 = v411 - 1;
  if (v422 > 4)
    v423 = 0;
  else
    v423 = qword_1969FDAA0[v422];
  v562 = v622[v423];
  v145 = __OFADD__(v421, v562);
  v563 = v421 + v562;
  if (v145)
    v563 = (v421 >> 31) + 0x7FFFFFFF;
  *((_QWORD *)v186 + 19) = v415 | (unint64_t)(v563 << 32);
  v145 = __OFADD__(v620, v389);
  v564 = v620 + v389;
  if (v145)
    v564 = (v620 >> 31) + 0x7FFFFFFF;
  v565 = (*(uint64_t (**)(int *))(*(_QWORD *)v236 + 1480))(v236);
  v566 = ((v236[31] >> 13) & 6) - 2;
  if (v566 < 4)
    v567 = v236 + 40;
  else
    v567 = v236 + 41;
  v548 = (*v567 + (*v567 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v565 & 0xFF00000000) != 0)
    v548 = v565;
  v568 = HIBYTE(*((_WORD *)v236 + 62)) >> 5;
  v569 = v236[30];
  v570 = (v569 >> 26) & 1;
  if ((v568 - 2) >= 2)
  {
    if (v568 == 4)
    {
      v570 = (v569 & 0x4000000) == 0;
    }
    else if (v568 != 5)
    {
      v571 = 3;
      if ((v569 & 0x4000000) != 0)
        v571 = 1;
      goto LABEL_857;
    }
  }
  v77 = v570 == 0;
  v571 = 2;
  if (v77)
    v571 = 0;
LABEL_857:
  v572 = v236[v571 + 42];
  v145 = __OFADD__(v564, v572);
  v555 = v564 + v572;
  if (v145)
    v555 = (v564 >> 31) + 0x7FFFFFFF;
  if (v566 < 4)
    v573 = v236 + 41;
  else
    v573 = v236 + 40;
  if ((*((_BYTE *)v616 + 123) & 4) != 0)
  {
    v574 = *v573;
    if (((*((_DWORD *)v616 + 31) >> 13) & 6u) - 2 < 4)
      v575 = (unsigned int *)((char *)v616 + 164);
    else
      v575 = (unsigned int *)((char *)v616 + 160);
    v576 = *v575;
    v145 = __OFSUB__(v576, v574);
    v577 = v576 - v574;
    if (v145)
      v577 = (v576 >> 31) + 0x7FFFFFFF;
    v145 = __OFSUB__(v577, v555);
    v555 = v577 - v555;
    if (v145)
      v555 = (v577 >> 31) + 0x7FFFFFFF;
  }
  v561 = v219 - v626;
  if (!__OFSUB__(v219, v626))
    goto LABEL_869;
LABEL_842:
  v561 = (v219 >> 31) + 0x7FFFFFFF;
LABEL_869:
  v145 = __OFSUB__(v561, v548);
  v578 = v561 - v548;
  if (v145)
    v578 = (v561 >> 31) + 0x7FFFFFFF;
  *((_QWORD *)v236 + 19) = v555 | (unint64_t)(v578 << 32);
LABEL_872:
  WebCore::RenderBlock::layoutPositionedObjects((uint64_t)v616);
  if ((*((_BYTE *)v616 + 22) & 1) != 0)
  {
    v580 = (unsigned __int16)*((_DWORD *)v616 + 31) >> 13;
    if ((v580 > 5 || ((1 << v580) & 0x2A) == 0)
      && (v581 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v616 + 3) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v581)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v581 + 2), v616, (uint64_t)v632);
    }
    else
    {
      v582 = *((_QWORD *)v616 + 18);
      if (v582)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*((WebCore::RenderLayer **)v616 + 18));
        v583 = *(WebCore::RenderLayerScrollableArea **)(v582 + 264);
        if (v583)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v583);
      }
    }
  }
  v579 = *((_DWORD *)v616 + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)v616 + 5) = v579;
  if ((*((_BYTE *)v616 + 45) & 2) == 0)
  {
    *(_WORD *)((char *)v616 + 69) &= ~1u;
    *((_WORD *)v616 + 38) = *((_WORD *)v616 + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v616 + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)v616 + 5) = v579 & 0xFFDFFE07;
}

unint64_t WebCore::RenderMathMLScripts::firstLineBaseline(WebCore::RenderMathMLScripts *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  double v21;
  int v22;

  v1 = *((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
  if (!v1)
    goto LABEL_5;
  v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v2 || (*(_BYTE *)(v2 + 45) & 4) == 0)
  {
    v1 = 0;
LABEL_5:
    v3 = 0;
    v4 = 0;
    return v1 | v4 | v3;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1480))(v2);
  v6 = *(_DWORD *)(v2 + 124);
  v7 = ((v6 >> 13) & 6) - 2;
  v8 = (int *)(v2 + 160);
  if (v7 >= 4)
    v8 = (int *)(v2 + 164);
  v9 = (*v8 + (*v8 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  if ((v5 & 0xFF00000000) != 0)
    v9 = v5;
  v10 = ((unsigned __int16)v6 >> 13) - 1;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_1969FDAA0[v10];
  v12 = *(_DWORD *)(v2 + 4 * v11 + 168);
  v13 = __OFADD__(v9, v12);
  v14 = v9 + v12;
  v15 = (v9 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  v16 = v7 >= 4;
  v17 = (int *)(v2 + 152);
  if (v16)
    v17 = (int *)(v2 + 156);
  v18 = *v17;
  v13 = __OFADD__(v15, v18);
  v19 = v15 + v18;
  v20 = (v15 >> 31) + 0x7FFFFFFF;
  if (v13)
    v19 = v20;
  v21 = roundf((float)v19 * 0.015625) * 64.0;
  if (v21 >= 2147483650.0)
  {
    v22 = 0x7FFFFFFF;
  }
  else if (v21 <= -2147483650.0)
  {
    v22 = 0x80000000;
  }
  else
  {
    v22 = (int)v21;
  }
  v4 = v22 & 0xFFFFFF00;
  v3 = v22;
  v1 = 0x100000000;
  return v1 | v4 | v3;
}

void WebCore::RenderMathMLSpace::~RenderMathMLSpace(WebCore::RenderMathMLSpace *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLSpace::computePreferredLogicalWidths(WebCore::RenderMathMLSpace *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::MathMLPresentationElement *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v23;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  if (*(_BYTE *)(v2 + 128))
    goto LABEL_17;
  v3 = *(_QWORD *)(v2 + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if ((_DWORD)v6)
      {
LABEL_5:
        v6 = v6;
        v7 = (WebCore::MathMLPresentationElement *)(v5 + 8);
        while (1)
        {
          v8 = *((_QWORD *)v7 - 1);
          if (v8 == WebCore::MathMLNames::widthAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 32))
          {
            goto LABEL_14;
          }
          v7 = (WebCore::MathMLPresentationElement *)((char *)v7 + 16);
          if (!--v6)
          {
            v7 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if ((_DWORD)v6)
        goto LABEL_5;
    }
  }
  v7 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  v9 = WebCore::MathMLPresentationElement::parseMathMLLength(v7, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680) + 664) >= 0));
  if (!*(_BYTE *)(v2 + 128))
    *(_BYTE *)(v2 + 128) = 1;
  *(_QWORD *)(v2 + 120) = v9;
LABEL_17:
  v23 = 0;
  v11 = WebCore::toUserUnits(v2 + 120, (WebCore::RenderMathMLSpace *)((char *)this + 80), &v23);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v10);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v12 = v11 & ~(v11 >> 31);
  v13 = (*(uint64_t (**)(WebCore::RenderMathMLSpace *))(*(_QWORD *)this + 1064))(this);
  v14 = (*(uint64_t (**)(WebCore::RenderMathMLSpace *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v15 = v13 + v14;
  v16 = (*(uint64_t (**)(WebCore::RenderMathMLSpace *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v15, v16))
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v17 = v15 + v16;
  v18 = (*(uint64_t (**)(WebCore::RenderMathMLSpace *))(*(_QWORD *)this + 984))(this);
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  v20 = __OFADD__(v12, v19);
  v21 = v12 + v19;
  if (v20)
    v21 = 0x7FFFFFFF;
  *((_DWORD *)this + 46) = v21;
  *((_DWORD *)this + 47) = v21;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

unsigned int *WebCore::RenderMathMLSpace::getSpaceHeightAndDepth(WebCore::RenderMathMLSpace *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::MathMLPresentationElement *v11;
  uint64_t v12;
  unint64_t v13;
  WebCore::RenderStyle *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::MathMLPresentationElement *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *result;
  void *v23;
  int v24;
  int v25;
  int v26;

  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  if (*(_BYTE *)(v6 + 140))
    goto LABEL_17;
  v7 = *(_QWORD *)(v6 + 104);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if ((_DWORD)v10)
      {
LABEL_5:
        v10 = v10;
        v11 = (WebCore::MathMLPresentationElement *)(v9 + 8);
        while (1)
        {
          v12 = *((_QWORD *)v11 - 1);
          if (v12 == WebCore::MathMLNames::heightAttr
            || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::MathMLNames::heightAttr + 24)
            && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::MathMLNames::heightAttr + 32))
          {
            goto LABEL_14;
          }
          v11 = (WebCore::MathMLPresentationElement *)((char *)v11 + 16);
          if (!--v10)
          {
            v11 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v9 = v7 + 32;
      LODWORD(v10) = v8 >> 5;
      if ((_DWORD)v10)
        goto LABEL_5;
    }
  }
  v11 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  v13 = WebCore::MathMLPresentationElement::parseMathMLLength(v11, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 664) >= 0));
  if (!*(_BYTE *)(v6 + 140))
    *(_BYTE *)(v6 + 140) = 1;
  *(_QWORD *)(v6 + 132) = v13;
LABEL_17:
  v14 = (WebCore::RenderMathMLSpace *)((char *)this + 80);
  v26 = 0;
  *(_DWORD *)a2 = WebCore::toUserUnits(v6 + 132, v14, &v26);
  if (*(_BYTE *)(v6 + 152))
    goto LABEL_33;
  v15 = *(_QWORD *)(v6 + 104);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 4);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(v15 + 40);
      LODWORD(v18) = *(_DWORD *)(v15 + 52);
      if ((_DWORD)v18)
      {
LABEL_21:
        v18 = v18;
        v19 = (WebCore::MathMLPresentationElement *)(v17 + 8);
        while (1)
        {
          v20 = *((_QWORD *)v19 - 1);
          if (v20 == WebCore::MathMLNames::depthAttr
            || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::MathMLNames::depthAttr + 24)
            && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::MathMLNames::depthAttr + 32))
          {
            goto LABEL_30;
          }
          v19 = (WebCore::MathMLPresentationElement *)((char *)v19 + 16);
          if (!--v18)
          {
            v19 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
            goto LABEL_30;
          }
        }
      }
    }
    else
    {
      v17 = v15 + 32;
      LODWORD(v18) = v16 >> 5;
      if ((_DWORD)v18)
        goto LABEL_21;
    }
  }
  v19 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_30:
  v21 = WebCore::MathMLPresentationElement::parseMathMLLength(v19, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 664) >= 0));
  if (!*(_BYTE *)(v6 + 152))
    *(_BYTE *)(v6 + 152) = 1;
  *(_QWORD *)(v6 + 144) = v21;
LABEL_33:
  v25 = 0;
  result = (unsigned int *)WebCore::toUserUnits(v6 + 144, v14, &v25);
  *(_DWORD *)a3 = (_DWORD)result;
  v24 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a2, (_DWORD)result))
    v24 = *(_DWORD *)a2 + (_DWORD)result;
  if (v24 < 0)
  {
    *(_DWORD *)a2 = 0;
    *(_DWORD *)a3 = 0;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v23);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

void WebCore::RenderMathMLSpace::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MathMLPresentationElement *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int *v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  WebCore::RenderLayerScrollableArea *v38;
  uint64_t v39;
  int v40[6];

  if ((a2 & 1) == 0 && (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) != 0)
    return;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  *(_WORD *)(a1 + 69) &= ~0x200u;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  if (!*(_BYTE *)(v3 + 128))
  {
    v4 = *(_QWORD *)(v3 + 104);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if ((_DWORD)v7)
        {
LABEL_7:
          v7 = v7;
          v8 = (WebCore::MathMLPresentationElement *)(v6 + 8);
          while (1)
          {
            v9 = *((_QWORD *)v8 - 1);
            if (v9 == WebCore::MathMLNames::widthAttr
              || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 24)
              && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::MathMLNames::widthAttr + 32))
            {
              goto LABEL_16;
            }
            v8 = (WebCore::MathMLPresentationElement *)((char *)v8 + 16);
            if (!--v7)
            {
              v8 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              goto LABEL_16;
            }
          }
        }
      }
      else
      {
        v6 = v4 + 32;
        LODWORD(v7) = v5 >> 5;
        if ((_DWORD)v7)
          goto LABEL_7;
      }
    }
    v8 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
LABEL_16:
    v10 = WebCore::MathMLPresentationElement::parseMathMLLength(v8, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 680) + 664) >= 0));
    if (!*(_BYTE *)(v3 + 128))
      *(_BYTE *)(v3 + 128) = 1;
    *(_QWORD *)(v3 + 120) = v10;
  }
  v40[0] = 0;
  v12 = WebCore::toUserUnits(v3 + 120, (WebCore::RenderStyle *)(a1 + 80), v40);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  v18 = v12 & ~(v12 >> 31);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v20 = v17 + v19;
  if (__OFADD__(v17, v19))
    v20 = (v17 >> 31) + 0x7FFFFFFF;
  v21 = __OFADD__(v18, v20);
  v22 = v18 + v20;
  if (v21)
    v22 = 0x7FFFFFFF;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v23 = (int *)(a1 + 164);
  else
    v23 = (int *)(a1 + 160);
  *v23 = v22;
  v39 = 0;
  WebCore::RenderMathMLSpace::getSpaceHeightAndDepth((WebCore::RenderMathMLSpace *)a1, (WebCore::LayoutUnit *)((char *)&v39 + 4), (WebCore::LayoutUnit *)&v39);
  v24 = HIDWORD(v39) + v39;
  if (__OFADD__(HIDWORD(v39), (_DWORD)v39))
    v24 = (HIDWORD(v39) >> 31) + 0x7FFFFFFF;
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    v27 = (v25 >> 31) + 0x7FFFFFFF;
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v30 = v28 + v29;
  if (__OFADD__(v28, v29))
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  v21 = __OFADD__(v27, v30);
  v31 = v27 + v30;
  if (v21)
    v31 = (v27 >> 31) + 0x7FFFFFFF;
  v21 = __OFADD__(v24, v31);
  v32 = v24 + v31;
  if (v21)
    v32 = (v24 >> 31) + 0x7FFFFFFF;
  v33 = *(_DWORD *)(a1 + 124);
  if (((v33 >> 13) & 6) - 2 < 4)
    v34 = (int *)(a1 + 160);
  else
    v34 = (int *)(a1 + 164);
  *v34 = v32;
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    if (((unsigned __int16)((unsigned __int16)v33 >> 13) > 5u || ((1 << ((v33 >> 13) & 7)) & 0x2A) == 0)
      && (v36 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 528)) != 0
      && *v36)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v36 + 2), (_QWORD *)a1, (uint64_t)v40);
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 144);
      if (v37)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v38 = *(WebCore::RenderLayerScrollableArea **)(v37 + 264);
        if (v38)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v38);
      }
    }
  }
  v35 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v35;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v35 & 0xFFDFFE07;
}

uint64_t WebCore::RenderMathMLSpace::firstLineBaseline(WebCore::RenderMathMLSpace *this)
{
  unsigned int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v8[4];
  unsigned int v9;

  v9 = 0;
  WebCore::RenderMathMLSpace::getSpaceHeightAndDepth(this, (WebCore::LayoutUnit *)&v9, (WebCore::LayoutUnit *)v8);
  v2 = (*(uint64_t (**)(WebCore::RenderMathMLSpace *))(*(_QWORD *)this + 1048))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderMathMLSpace *))(*(_QWORD *)this + 960))(this);
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  v5 = __OFADD__(v9, v4);
  LODWORD(v6) = v9 + v4;
  if (v5)
    v6 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v6 = v6;
  return v6 | 0x100000000;
}

void WebCore::RenderMathMLToken::~RenderMathMLToken(WebCore::RenderMathMLToken *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLToken::updateTokenContent(WebCore::RenderMathMLToken *this)
{
  int v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  int v5;

  *((_BYTE *)this + 217) = 1;
  v2 = *((_DWORD *)this + 5);
  if ((v2 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v2 | 8;
    v3 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v3);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0
        || ((v4 = *((_QWORD *)this + 18)) == 0
          ? (v5 = MEMORY[8])
          : (v5 = *(_DWORD *)(v4 + 8) + 1, *(_DWORD *)(v4 + 8) = v5),
            *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
            !v5))
      {
        __break(0xC471u);
        JUMPOUT(0x1964B287CLL);
      }
      *(_DWORD *)(v4 + 8) = v5 - 1;
    }
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
}

int *WebCore::RenderMathMLToken::computePreferredLogicalWidths(WebCore::RenderMathMLToken *this, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat width;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  void *v21;
  int *result;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  float v26;
  float v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  double v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  CTFontOrientation v54;
  uint64_t v55;
  int v56;
  unsigned __int16 v57;
  WTF *v58;
  CGSize advances;
  CGGlyph glyphs;

  if (!*((_BYTE *)this + 217))
    goto LABEL_38;
  if (*((_BYTE *)this + 212))
    *((_BYTE *)this + 212) = 0;
  *((_BYTE *)this + 217) = 0;
  v7 = *((unsigned int *)this + 16);
  if (v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v8 = *(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964B2F1CLL);
      }
      v9 = *(unsigned __int8 *)(v8 + 68);
      for (i = *(unsigned int *)(v8 + 64); ; i = *(unsigned int *)(v12 + 47))
      {
        v11 = i | (v9 << 32);
        if (!v11)
          break;
        v12 = *(_QWORD *)(v11 + 8);
        if (!v12)
          break;
        if ((*(_BYTE *)(v12 + 45) & 2) == 0)
          goto LABEL_38;
        v9 = *(unsigned __int8 *)(v12 + 51);
      }
    }
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v13 + 24) += 2;
  WebCore::Node::textContent((WebCore::Node *)v13, 0, a6, (WTF::StringImpl **)&advances, a2);
  width = advances.width;
  if (*(_QWORD *)&advances.width)
  {
    v16 = WebCore::MathMLTokenElement::convertToSingleCodePoint(*(const char **)(*(_QWORD *)&advances.width + 8), *(unsigned int *)(*(_QWORD *)&advances.width + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)&advances.width+ 16) >> 2) & 1) << 32));
    if (**(_DWORD **)&width == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)&width, v15);
    else
      **(_DWORD **)&width -= 2;
  }
  else
  {
    v16 = WebCore::MathMLTokenElement::convertToSingleCodePoint(0, 0x100000000uLL);
  }
  if ((v16 & 0xFF00000000) == 0)
    goto LABEL_36;
  v17 = *(_DWORD *)(*((_QWORD *)this + 25) + 4);
  if (v17 == 1)
    goto LABEL_36;
  if (!v17)
  {
    if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::miTag + 24))
      goto LABEL_36;
    v17 = 3;
  }
  if ((int)v16 <= 929)
  {
    if ((_DWORD)v16 == 305)
    {
      v18 = 120484;
      v19 = v17 == 3;
      v20 = 305;
    }
    else
    {
      if ((_DWORD)v16 != 567)
        goto LABEL_69;
      v18 = 120485;
      v19 = v17 == 3;
      v20 = 567;
    }
LABEL_32:
    if (!v19)
      v18 = v20;
    goto LABEL_34;
  }
  v18 = v16;
  switch((_DWORD)v16)
  {
    case 0x3A2:
      goto LABEL_34;
    case 0x3DD:
      v18 = 120779;
      v19 = v17 == 2;
      v20 = 989;
      goto LABEL_32;
    case 0x3DC:
      v18 = 120778;
      v19 = v17 == 2;
      v20 = 988;
      goto LABEL_32;
  }
LABEL_69:
  v37 = v16 - 65;
  if ((v16 - 65) < 0x1A)
    goto LABEL_72;
  if ((v16 - 97) <= 0x19)
  {
    v37 = v16 - 71;
LABEL_72:
    if (v17 <= 14)
    {
      v38 = 0;
      v39 = v37 + 52 * (char)(v17 - 2) + 119808;
      v40 = 24;
      do
      {
        v41 = v40 - 1;
        v42 = WebCore::latinExceptionMapTable[2 * v38 + 2 * ((v40 - 1) >> 1)];
        if (v42 == v39)
        {
          v38 += (v40 - 1) >> 1;
          goto LABEL_88;
        }
        v40 -= (v41 >> 1) + 1;
        if (v42 <= v39)
        {
          v43 = (v41 >> 1) + 1;
        }
        else
        {
          v40 = v41 >> 1;
          v43 = 0;
        }
        v38 += v43;
      }
      while (v40 > 1);
      if (!v40 || WebCore::latinExceptionMapTable[2 * v38] != v39)
        goto LABEL_89;
LABEL_88:
      v18 = WebCore::latinExceptionMapTable[2 * v38 + 1];
      if (v18)
        goto LABEL_34;
LABEL_89:
      v18 = v39;
      goto LABEL_34;
    }
    goto LABEL_36;
  }
  if ((v16 - 48) < 0xA)
  {
    switch(v17)
    {
      case 8:
        v44 = 10;
        goto LABEL_113;
      case 9:
      case 12:
      case 13:
        goto LABEL_36;
      case 10:
        v44 = 20;
        goto LABEL_113;
      case 11:
        v44 = 30;
        goto LABEL_113;
      case 14:
        v44 = 40;
        goto LABEL_113;
      default:
        if (v17 != 2)
          goto LABEL_36;
        v44 = 0;
LABEL_113:
        v18 = v16 + v44 + 119808 + 926;
        break;
    }
    goto LABEL_34;
  }
  v45 = v16 - 913;
  if ((v16 - 913) >= 0x19)
  {
    if ((v16 - 945) > 0x18)
    {
      if ((v16 & 0xFFFFFF00) == 0x600)
      {
        v47 = v17 - 8;
        if ((v17 - 8) <= 0xA && ((0x781u >> v47) & 1) != 0)
        {
          v48 = 0;
          v49 = (uint64_t)*(&off_1E34415E8 + v47);
          v50 = qword_1969FDA48[v47];
          do
          {
            v51 = v50 - 1;
            v52 = *(_DWORD *)(v49 + 8 * (v48 + ((v50 - 1) >> 1)));
            if (v52 == (_DWORD)v16)
            {
              v48 += (v50 - 1) >> 1;
LABEL_131:
              v56 = *(_DWORD *)(v49 + 8 * v48 + 4);
              if (v56)
                v18 = v56;
              else
                v18 = v16;
              goto LABEL_34;
            }
            v50 -= (v51 >> 1) + 1;
            if (v52 <= v16)
            {
              v53 = (v51 >> 1) + 1;
            }
            else
            {
              v50 = v51 >> 1;
              v53 = 0;
            }
            v48 += v53;
          }
          while (v50 > 1);
          if (v50 && *(_DWORD *)(v49 + 8 * v48) == (_DWORD)v16)
            goto LABEL_131;
        }
        goto LABEL_36;
      }
      if ((int)v16 <= 1007)
      {
        switch((_DWORD)v16)
        {
          case 0x3D1:
            v45 = 53;
            break;
          case 0x3D5:
            v45 = 55;
            break;
          case 0x3D6:
            v45 = 57;
            break;
          default:
            goto LABEL_36;
        }
      }
      else
      {
        v45 = 17;
        switch((int)v16)
        {
          case 1008:
            v45 = 54;
            break;
          case 1009:
            v45 = 56;
            break;
          case 1010:
          case 1011:
            goto LABEL_36;
          case 1012:
            break;
          case 1013:
            v45 = 52;
            break;
          default:
            if ((_DWORD)v16 == 8706)
            {
              v45 = 51;
            }
            else
            {
              if ((_DWORD)v16 != 8711)
                goto LABEL_36;
              v45 = 25;
            }
            break;
        }
      }
    }
    else
    {
      v45 = v16 - 919;
    }
  }
  v46 = v17 - 2;
  if (v46 <= 0xB && ((0xA07u >> v46) & 1) != 0)
  {
    v18 = v45 + 119808 + dword_1969FDA18[v46] + 680;
LABEL_34:
    if (v18 != (_DWORD)v16)
    {
      *((_DWORD *)this + 52) = v18;
      *((_BYTE *)this + 212) = 1;
      *((_BYTE *)this + 216) = (*((_DWORD *)this + 30) & 0x4000000) != 0;
    }
  }
LABEL_36:
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v15);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
LABEL_38:
  if (!*((_BYTE *)this + 212))
    return WebCore::RenderBlock::computePreferredLogicalWidths(this);
  WebCore::FontCascade::glyphDataForCharacter((void *)*((unsigned int *)this + 52), *((_QWORD *)this + 14) + 32, *((unsigned __int8 *)this + 216), 0, (uint64_t)&v57);
  result = (int *)v58;
  if (!v58)
    return WebCore::RenderBlock::computePreferredLogicalWidths(this);
  v23 = *((_QWORD *)v58 + 1);
  if (!v23)
  {
    v58 = 0;
    goto LABEL_63;
  }
  v24 = v57;
  v25 = *(unsigned __int16 *)(v23 + 334) != v57 || v57 == 0;
  if (v25 || (v27 = 0.0, (*(_BYTE *)(v23 + 256) & 2) != 0))
  {
    v26 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v23 + 128, v57);
    if (v26 == -1.0)
    {
      glyphs = v24;
      advances = (CGSize)*MEMORY[0x1E0C9D820];
      if (*(float *)(v23 + 96) != 0.0)
      {
        v54 = kCTFontOrientationHorizontal;
        if (*(_BYTE *)(v23 + 100))
        {
          if ((*(_BYTE *)(v23 + 344) & 4) != 0)
            v54 = kCTFontOrientationHorizontal;
          else
            v54 = kCTFontOrientationVertical;
        }
        CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v23 + 88), v54, &glyphs, &advances, 1);
      }
      v26 = advances.width;
      WebCore::GlyphMetricsMap<float>::locatePage(v23 + 128, v24 >> 4);
      *(float *)(v55 + 4 * (v24 & 0xF)) = v26;
    }
    v27 = v26 + *(float *)(v23 + 340);
  }
  v28 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 1064))(this);
  v29 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v28, v29))
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  else
    v30 = v28 + v29;
  v31 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v30, v31))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  else
    v32 = v30 + v31;
  v33 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 984))(this);
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  v35 = (float)(v27 + (float)((float)v34 * 0.015625)) * 64.0;
  if (v35 >= 2147483650.0)
  {
    v36 = 0x7FFFFFFF;
  }
  else if (v35 <= -2147483650.0)
  {
    v36 = 0x80000000;
  }
  else
  {
    v36 = (int)v35;
  }
  *((_DWORD *)this + 46) = v36;
  *((_DWORD *)this + 47) = v36;
  WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
  result = (int *)v58;
  v58 = 0;
  if (result)
  {
LABEL_63:
    if (*result == 1)
    {
      result = (int *)WTF::fastFree((WTF *)result, v21);
      if (v23)
        return result;
    }
    else
    {
      --*result;
      if (v23)
        return result;
    }
    return WebCore::RenderBlock::computePreferredLogicalWidths(this);
  }
  return result;
}

uint64_t WebCore::RenderMathMLToken::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  int v4;
  WebCore::RenderElement *v5;
  uint64_t v6;
  int v7;

  WebCore::RenderMathMLBlock::styleDidChange(a1, a2, a3);
  *(_BYTE *)(a1 + 217) = 1;
  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 8) == 0)
  {
    *(_DWORD *)(a1 + 20) = v4 | 8;
    v5 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a1, 0);
    WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a1, v5);
    if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
    {
      if ((*(_BYTE *)(a1 + 45) & 0x10) == 0
        || ((v6 = *(_QWORD *)(a1 + 144)) == 0
          ? (v7 = MEMORY[8])
          : (v7 = *(_DWORD *)(v6 + 8) + 1, *(_DWORD *)(v6 + 8) = v7),
            *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
            !v7))
      {
        __break(0xC471u);
        JUMPOUT(0x1964B30BCLL);
      }
      *(_DWORD *)(v6 + 8) = v7 - 1;
    }
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty(a1, 1, 1);
}

uint64_t WebCore::RenderMathMLToken::updateFromElement(WebCore::RenderMathMLToken *this)
{
  int v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  int v5;

  *((_BYTE *)this + 217) = 1;
  v2 = *((_DWORD *)this + 5);
  if ((v2 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v2 | 8;
    v3 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v3);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0
        || ((v4 = *((_QWORD *)this + 18)) == 0
          ? (v5 = MEMORY[8])
          : (v5 = *(_DWORD *)(v4 + 8) + 1, *(_DWORD *)(v4 + 8) = v5),
            *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
            !v5))
      {
        __break(0xC471u);
        JUMPOUT(0x1964B31A0);
      }
      *(_DWORD *)(v4 + 8) = v5 - 1;
    }
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
}

unint64_t WebCore::RenderMathMLToken::firstLineBaseline(WebCore::RenderMathMLToken *this)
{
  unsigned int v1;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  WTF *v17;
  unint64_t v18;
  unint64_t LineBaseline;
  CTFontOrientation v21;
  float y;
  float width;
  float height;
  float v25;
  float v26;
  _OWORD *v27;
  float v28;
  float v29;
  uint64_t PageSlowCase;
  float *v31;
  void *v32;
  _QWORD *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF **v37;
  WTF *v38;
  _OWORD **v39;
  CGFloat x;
  float v41;
  float v42;
  float v43;
  unsigned __int16 v44;
  WTF *v45;
  CGRect boundingRects;
  CGGlyph glyphs;
  CGRect BoundingRectsForGlyphs;

  if (!*((_BYTE *)this + 212))
    goto LABEL_27;
  WebCore::FontCascade::glyphDataForCharacter((void *)*((unsigned int *)this + 52), *((_QWORD *)this + 14) + 32, *((unsigned __int8 *)this + 216), 0, (uint64_t)&v44);
  if (!v45)
    goto LABEL_27;
  v4 = *((_QWORD *)v45 + 1);
  if (v4)
  {
    v5 = v44;
    if (*(unsigned __int16 *)(v4 + 334) == v44)
    {
      v10 = 0.0;
      if (v44)
        goto LABEL_10;
      v7 = (_QWORD **)(v4 + 208);
      v6 = *(_QWORD *)(v4 + 208);
      if (!v6)
      {
LABEL_33:
        glyphs = v5;
        memset(&boundingRects, 0, sizeof(boundingRects));
        if (*(_BYTE *)(v4 + 100))
          v21 = kCTFontOrientationVertical;
        else
          v21 = kCTFontOrientationHorizontal;
        BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(_QWORD *)(v4 + 88), v21, &glyphs, &boundingRects, 1);
        y = BoundingRectsForGlyphs.origin.y;
        width = BoundingRectsForGlyphs.size.width;
        height = BoundingRectsForGlyphs.size.height;
        v25 = y + height;
        v26 = *(float *)(v4 + 340);
        v27 = *(_OWORD **)(v4 + 208);
        if (!v27)
        {
          v42 = *(float *)(v4 + 340);
          v43 = y + height;
          v41 = width;
          x = BoundingRectsForGlyphs.origin.x;
          v27 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
          *v27 = 0u;
          v27[1] = 0u;
          v27[2] = 0u;
          v27[3] = 0u;
          v27[4] = 0u;
          v27[5] = 0u;
          v27[6] = 0u;
          v27[7] = 0u;
          v27[8] = 0u;
          v27[9] = 0u;
          v27[10] = 0u;
          v27[11] = 0u;
          v27[12] = 0u;
          v27[13] = 0u;
          v27[14] = 0u;
          v27[15] = 0u;
          v27[16] = 0u;
          v33 = v7;
          v34 = (WTF *)*v7;
          v39 = (_OWORD **)v33;
          *v33 = v27;
          if (v34)
          {
            v35 = *((_QWORD *)v34 + 33);
            if (v35)
            {
              v36 = *(unsigned int *)(v35 - 4);
              if ((_DWORD)v36)
              {
                v37 = (WTF **)(v35 + 8);
                do
                {
                  if (*((_DWORD *)v37 - 2) != -1)
                  {
                    v38 = *v37;
                    *v37 = 0;
                    if (v38)
                      WTF::fastFree(v38, v32);
                  }
                  v37 += 2;
                  --v36;
                }
                while (v36);
              }
              WTF::fastFree((WTF *)(v35 - 16), v32);
            }
            WTF::fastFree(v34, v32);
            v27 = *v39;
          }
          BoundingRectsForGlyphs.origin.x = x;
          width = v41;
          v26 = v42;
          v25 = v43;
        }
        v28 = BoundingRectsForGlyphs.origin.x;
        v10 = -v25;
        v29 = v26 + width;
        if (v5 < 0x10)
        {
          PageSlowCase = (uint64_t)v27 + 4;
          if (!*(_BYTE *)v27)
          {
            *(_OWORD *)((char *)v27 + 4) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 20) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 36) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 52) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 68) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 84) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 100) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 116) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 132) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 148) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 164) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 180) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 196) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 212) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 228) = xmmword_1969F2680;
            *(_OWORD *)((char *)v27 + 244) = xmmword_1969F2680;
            *(_BYTE *)v27 = 1;
          }
        }
        else
        {
          PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v27, v5 >> 4);
        }
        v31 = (float *)(PageSlowCase + 16 * (v5 & 0xF));
        *v31 = v28;
        v31[1] = v10;
        v31[2] = v29;
        v31[3] = height;
        goto LABEL_10;
      }
    }
    else
    {
      v7 = (_QWORD **)(v4 + 208);
      v6 = *(_QWORD *)(v4 + 208);
      if (!v6)
        goto LABEL_33;
      if (v44 >= 0x10u)
      {
        v8 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(v6, v44 >> 4);
        goto LABEL_8;
      }
    }
    v8 = v6 + 4;
    if (!*(_BYTE *)v6)
    {
      *(_OWORD *)(v6 + 4) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 20) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 36) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 52) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 68) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 84) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 100) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 116) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 132) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 148) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 164) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 180) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 196) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 212) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 228) = xmmword_1969F2680;
      *(_OWORD *)(v6 + 244) = xmmword_1969F2680;
      *(_BYTE *)v6 = 1;
    }
LABEL_8:
    v9 = v8 + 16 * (v5 & 0xF);
    if (*(float *)(v9 + 8) != -1.0)
    {
      v10 = *(float *)(v9 + 4);
LABEL_10:
      v11 = llroundf(-v10);
      v12 = v11 << 6;
      if (v11 < -33554432)
        v12 = 0x80000000;
      if (v11 <= 0x1FFFFFF)
        v13 = v12;
      else
        v13 = 0x7FFFFFFF;
      v14 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 1048))(this);
      v15 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 960))(this);
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        v16 = (v14 >> 31) + 0x7FFFFFFF;
      v1 = v13 + v16;
      if (__OFADD__(v13, v16))
        v1 = (v13 >> 31) + 0x7FFFFFFF;
      goto LABEL_21;
    }
    goto LABEL_33;
  }
LABEL_21:
  v17 = v45;
  v45 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WTF::fastFree(v17, v3);
      if (v4)
        goto LABEL_25;
LABEL_27:
      LineBaseline = WebCore::RenderBlock::firstLineBaseline(this);
      v1 = LineBaseline;
      v18 = LineBaseline & 0xFFFFFFFF00000000;
      return v18 | v1;
    }
    --*(_DWORD *)v17;
  }
  if (!v4)
    goto LABEL_27;
LABEL_25:
  v18 = 0x100000000;
  return v18 | v1;
}

void WebCore::RenderMathMLToken::layoutBlock(_DWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  CGFloat y;
  unsigned int x_low;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  float x;
  float v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  WTF **v36;
  uint64_t v37;
  uint64_t v38;
  float height;
  double v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int *v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v56;
  WebCore::RenderLayerScrollableArea *v57;
  CTFontOrientation v58;
  uint64_t v59;
  CTFontOrientation v60;
  float v61;
  float width;
  float v63;
  float v64;
  _OWORD *v65;
  float v66;
  float v67;
  float v68;
  uint64_t PageSlowCase;
  float *v70;
  void *v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  WTF **v75;
  WTF *v76;
  CGFloat v77;
  float v78;
  float v79;
  float v80;
  CGRect advances;
  CGGlyph glyphs;
  CGRect BoundingRectsForGlyphs;

  v4 = *((unsigned __int8 *)a1 + 68);
  for (i = a1[16]; ; i = *(unsigned int *)(v7 + 47))
  {
    v6 = i | (v4 << 32);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      break;
    if ((*(_BYTE *)(v7 + 45) & 4) != 0)
    {
LABEL_6:
      if ((*(_DWORD *)(v7 + 20) & 0x1800000) == 0x1000000)
      {
        v8 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
        if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v7);
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v7);
        if ((*(_BYTE *)(v7 + 52) & 7) != 1 || (*(_BYTE *)(v7 + 53) & 2) == 0)
        {
          if ((*(_BYTE *)(v7 + 20) & 0xF8) != 0)
            *((_DWORD *)v8 + 5) |= 0x40u;
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v8, (WebCore::RenderBox *)v7);
        }
      }
      while (1)
      {
        v9 = *(unsigned int *)(v7 + 47);
        if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
          goto LABEL_22;
        v7 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
        if (!v7)
          goto LABEL_22;
        if ((*(_BYTE *)(v7 + 45) & 4) != 0)
          goto LABEL_6;
      }
    }
    v4 = *(unsigned __int8 *)(v7 + 51);
  }
LABEL_22:
  if ((a2 & 1) != 0 || (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) == 0)
  {
    if (!*((_BYTE *)a1 + 212)
      || (WebCore::FontCascade::glyphDataForCharacter((void *)a1[52], *((_QWORD *)a1 + 14) + 32, *((unsigned __int8 *)a1 + 216), 0, (uint64_t)&advances), y = advances.origin.y, !*(_QWORD *)&advances.origin.y))
    {
      WebCore::RenderMathMLBlock::layoutBlock((uint64_t)a1, a2);
      return;
    }
    if (!*(_QWORD *)(*(_QWORD *)&advances.origin.y + 8))
    {
      WebCore::RenderMathMLBlock::layoutBlock((uint64_t)a1, a2);
LABEL_91:
      if (**(_DWORD **)&y == 1)
        WTF::fastFree(*(WTF **)&y, v52);
      else
        --**(_DWORD **)&y;
      return;
    }
    x_low = LOWORD(advances.origin.x);
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 1304))(a1);
    *(_WORD *)((char *)a1 + 69) &= ~0x200u;
    v12 = *((unsigned __int8 *)a1 + 68);
    for (j = a1[16]; ; j = *(unsigned int *)(v15 + 47))
    {
      v14 = j | (v12 << 32);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15 || (*(_BYTE *)(v15 + 45) & 4) == 0)
        break;
      if ((*(_BYTE *)(v15 + 20) & 0xF8) != 0)
      {
        v16 = *(_QWORD *)(v15 + 32);
        if (v16
          && (v17 = *(_QWORD *)(v16 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v17 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v15);
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 688))(v15);
        }
      }
      v12 = *(unsigned __int8 *)(v15 + 51);
    }
    v18 = *(_QWORD *)(*(_QWORD *)&y + 8);
    v19 = *(unsigned __int16 *)(v18 + 334) != x_low || x_low == 0;
    if (v19 || (v21 = 0.0, (*(_BYTE *)(v18 + 256) & 2) != 0))
    {
      x = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v18 + 128, x_low);
      if (x == -1.0)
      {
        glyphs = x_low;
        advances.origin = (CGPoint)*MEMORY[0x1E0C9D820];
        if (*(float *)(v18 + 96) != 0.0)
        {
          v58 = kCTFontOrientationHorizontal;
          if (*(_BYTE *)(v18 + 100))
          {
            if ((*(_BYTE *)(v18 + 344) & 4) != 0)
              v58 = kCTFontOrientationHorizontal;
            else
              v58 = kCTFontOrientationVertical;
          }
          CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v18 + 88), v58, &glyphs, (CGSize *)&advances, 1);
        }
        x = advances.origin.x;
        WebCore::GlyphMetricsMap<float>::locatePage(v18 + 128, x_low >> 4);
        *(float *)(v59 + 4 * (x_low & 0xF)) = x;
      }
      v21 = x + *(float *)(v18 + 340);
    }
    v22 = v21 * 64.0;
    if (v22 >= 2147483650.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147483650.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v22;
    }
    v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1064))(a1);
    v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1072))(a1);
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      v26 = (v24 >> 31) + 0x7FFFFFFF;
    v27 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 976))(a1);
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 984))(a1);
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      v30 = (v28 >> 31) + 0x7FFFFFFF;
    v31 = __OFADD__(v23, v30);
    v32 = v23 + v30;
    if (v31)
      v32 = (v23 >> 31) + 0x7FFFFFFF;
    if (((a1[31] >> 13) & 6u) - 2 < 4)
      v33 = a1 + 41;
    else
      v33 = a1 + 40;
    *v33 = v32;
    v34 = *(_QWORD *)(*(_QWORD *)&y + 8);
    if (*(unsigned __int16 *)(v34 + 334) == x_low)
    {
      height = 0.0;
      if (x_low)
        goto LABEL_65;
      v36 = (WTF **)(v34 + 208);
      v35 = *(_QWORD *)(v34 + 208);
      if (!v35)
      {
LABEL_117:
        glyphs = x_low;
        memset(&advances, 0, sizeof(advances));
        if (*(_BYTE *)(v34 + 100))
          v60 = kCTFontOrientationVertical;
        else
          v60 = kCTFontOrientationHorizontal;
        BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(_QWORD *)(v34 + 88), v60, &glyphs, &advances, 1);
        v61 = BoundingRectsForGlyphs.origin.y;
        width = BoundingRectsForGlyphs.size.width;
        height = BoundingRectsForGlyphs.size.height;
        v63 = v61 + height;
        v64 = *(float *)(v34 + 340);
        v65 = *(_OWORD **)(v34 + 208);
        if (!v65)
        {
          v79 = v61 + height;
          v80 = *(float *)(v34 + 340);
          v78 = width;
          v77 = BoundingRectsForGlyphs.origin.x;
          v65 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
          *v65 = 0u;
          v65[1] = 0u;
          v65[2] = 0u;
          v65[3] = 0u;
          v65[4] = 0u;
          v65[5] = 0u;
          v65[6] = 0u;
          v65[7] = 0u;
          v65[8] = 0u;
          v65[9] = 0u;
          v65[10] = 0u;
          v65[11] = 0u;
          v65[12] = 0u;
          v65[13] = 0u;
          v65[14] = 0u;
          v65[15] = 0u;
          v65[16] = 0u;
          v72 = *v36;
          *v36 = (WTF *)v65;
          if (v72)
          {
            v73 = *((_QWORD *)v72 + 33);
            if (v73)
            {
              v74 = *(unsigned int *)(v73 - 4);
              if ((_DWORD)v74)
              {
                v75 = (WTF **)(v73 + 8);
                do
                {
                  if (*((_DWORD *)v75 - 2) != -1)
                  {
                    v76 = *v75;
                    *v75 = 0;
                    if (v76)
                      WTF::fastFree(v76, v71);
                  }
                  v75 += 2;
                  --v74;
                }
                while (v74);
              }
              WTF::fastFree((WTF *)(v73 - 16), v71);
            }
            WTF::fastFree(v72, v71);
            v65 = *v36;
          }
          BoundingRectsForGlyphs.origin.x = v77;
          width = v78;
          v63 = v79;
          v64 = v80;
        }
        v66 = BoundingRectsForGlyphs.origin.x;
        v67 = -v63;
        v68 = v64 + width;
        if (x_low < 0x10)
        {
          PageSlowCase = (uint64_t)v65 + 4;
          if (!*(_BYTE *)v65)
          {
            *(_OWORD *)((char *)v65 + 4) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 20) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 36) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 52) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 68) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 84) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 100) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 116) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 132) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 148) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 164) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 180) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 196) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 212) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 228) = xmmword_1969F2680;
            *(_OWORD *)((char *)v65 + 244) = xmmword_1969F2680;
            *(_BYTE *)v65 = 1;
          }
        }
        else
        {
          PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v65, x_low >> 4);
        }
        v70 = (float *)(PageSlowCase + 16 * (x_low & 0xF));
        *v70 = v66;
        v70[1] = v67;
        v70[2] = v68;
        v70[3] = height;
        goto LABEL_65;
      }
    }
    else
    {
      v36 = (WTF **)(v34 + 208);
      v35 = *(_QWORD *)(v34 + 208);
      if (!v35)
        goto LABEL_117;
      if (x_low >= 0x10)
      {
        v37 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(v35, x_low >> 4);
        goto LABEL_63;
      }
    }
    v37 = v35 + 4;
    if (!*(_BYTE *)v35)
    {
      *(_OWORD *)(v35 + 4) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 20) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 36) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 52) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 68) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 84) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 100) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 116) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 132) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 148) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 164) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 180) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 196) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 212) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 228) = xmmword_1969F2680;
      *(_OWORD *)(v35 + 244) = xmmword_1969F2680;
      *(_BYTE *)v35 = 1;
    }
LABEL_63:
    v38 = v37 + 16 * (x_low & 0xF);
    if (*(float *)(v38 + 8) != -1.0)
    {
      height = *(float *)(v38 + 12);
LABEL_65:
      v40 = height * 64.0;
      if (v40 > -2147483650.0)
        v41 = (int)v40;
      else
        v41 = 0x80000000;
      if (v40 < 2147483650.0)
        v42 = v41;
      else
        v42 = 0x7FFFFFFF;
      v43 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1048))(a1);
      v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 960))(a1);
      if (__OFADD__(v43, v44))
        v45 = (v43 >> 31) + 0x7FFFFFFF;
      else
        v45 = v43 + v44;
      v46 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1056))(a1);
      v47 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 968))(a1);
      v48 = v46 + v47;
      if (__OFADD__(v46, v47))
        v48 = (v46 >> 31) + 0x7FFFFFFF;
      v31 = __OFADD__(v45, v48);
      v49 = v45 + v48;
      if (v31)
        v49 = (v45 >> 31) + 0x7FFFFFFF;
      v31 = __OFADD__(v42, v49);
      v50 = v42 + v49;
      if (v31)
        v50 = (v42 >> 31) + 0x7FFFFFFF;
      if (((a1[31] >> 13) & 6u) - 2 < 4)
        v51 = a1 + 40;
      else
        v51 = a1 + 41;
      *v51 = v50;
      WebCore::RenderBlock::layoutPositionedObjects((uint64_t)a1);
      if ((*((_BYTE *)a1 + 22) & 1) != 0)
      {
        v54 = (unsigned __int16)a1[31] >> 13;
        if ((v54 > 5 || ((1 << v54) & 0x2A) == 0)
          && (v55 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 528)) != 0
          && *v55)
        {
          WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v55 + 2), a1, (uint64_t)&advances);
        }
        else
        {
          v56 = *((_QWORD *)a1 + 18);
          if (v56)
          {
            WebCore::RenderLayer::updateLayerScrollableArea(*((WebCore::RenderLayer **)a1 + 18));
            v57 = *(WebCore::RenderLayerScrollableArea **)(v56 + 264);
            if (v57)
              WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v57);
          }
        }
      }
      v53 = a1[5] & 0xFFDFFDFF | 0x200;
      a1[5] = v53;
      if ((*((_BYTE *)a1 + 45) & 2) == 0)
      {
        *(_WORD *)((char *)a1 + 69) &= ~1u;
        *((_WORD *)a1 + 38) = a1[19] & 0xF | (16
                                            * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 248)
                                                       + 472));
      }
      a1[5] = v53 & 0xFFDFFE07;
      goto LABEL_91;
    }
    goto LABEL_117;
  }
}

uint64_t WebCore::RenderMathMLToken::paint(WebCore::RenderMathMLToken *this, WebCore::GraphicsContext **a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  void *v7;
  WebCore::GraphicsContext *v8;
  WebCore::GraphicsContext *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t PageSlowCase;
  uint64_t v16;
  float v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  double v25;
  WebCore::GraphicsContext *v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  CTFontOrientation v48;
  float v49;
  uint64_t v50;
  CTFontOrientation v51;
  float y;
  float width;
  float height;
  float v55;
  float v56;
  _OWORD *v57;
  float v58;
  float v59;
  uint64_t v60;
  float *v61;
  void *v62;
  _QWORD *v63;
  WTF *v64;
  _OWORD **v65;
  uint64_t v66;
  uint64_t v67;
  WTF **v68;
  WTF *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  CGFloat x;
  float v74;
  float v75;
  float v76;
  CGGlyph v77[4];
  uint64_t v78;
  unsigned __int16 v79;
  WTF *v80;
  CGRect advances;
  CGGlyph glyphs;
  CGRect BoundingRectsForGlyphs;

  WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)a2, a3);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2[10] + 40))(a2[10]);
  if ((result & 1) != 0)
    return result;
  if (*((_WORD *)a2 + 8) != 8)
    return result;
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
    return result;
  if ((*((_BYTE *)this + 120) & 0x30) != 0)
    return result;
  if (!*((_BYTE *)this + 212))
    return result;
  WebCore::FontCascade::glyphDataForCharacter((void *)*((unsigned int *)this + 52), *((_QWORD *)this + 14) + 32, *((unsigned __int8 *)this + 216), 0, (uint64_t)&v79);
  result = (uint64_t)v80;
  if (!v80)
    return result;
  if (!*((_QWORD *)v80 + 1))
  {
    v80 = 0;
LABEL_55:
    if (*(_DWORD *)result == 1)
      return WTF::fastFree((WTF *)result, v7);
    --*(_DWORD *)result;
    return result;
  }
  v8 = a2[10];
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
  v9 = a2[10];
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, (unint64_t *)&advances);
  WebCore::GraphicsContext::setFillColor(v9, (const WebCore::Color *)&advances);
  if ((*(_QWORD *)&advances.origin.x & 0x8000000000000) != 0)
  {
    v70 = (unsigned int *)(*(_QWORD *)&advances.origin.x & 0xFFFFFFFFFFFFLL);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, v10);
    }
  }
  if (v80)
    v11 = *((_QWORD *)v80 + 1);
  else
    v11 = 0;
  v12 = v79;
  if (*(unsigned __int16 *)(v11 + 334) == v79)
  {
    v17 = 0.0;
    if (v79)
      goto LABEL_17;
    v14 = (_QWORD **)(v11 + 208);
    v13 = *(_QWORD *)(v11 + 208);
    if (v13)
      goto LABEL_74;
  }
  else
  {
    v14 = (_QWORD **)(v11 + 208);
    v13 = *(_QWORD *)(v11 + 208);
    if (v13)
    {
      if (v79 >= 0x10u)
      {
        PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(v13, v79 >> 4);
        goto LABEL_15;
      }
LABEL_74:
      PageSlowCase = v13 + 4;
      if (!*(_BYTE *)v13)
      {
        *(_OWORD *)(v13 + 4) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 20) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 36) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 52) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 68) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 84) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 100) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 116) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 132) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 148) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 164) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 180) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 196) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 212) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 228) = xmmword_1969F2680;
        *(_OWORD *)(v13 + 244) = xmmword_1969F2680;
        *(_BYTE *)v13 = 1;
      }
LABEL_15:
      v16 = PageSlowCase + 16 * (v12 & 0xF);
      if (*(float *)(v16 + 8) != -1.0)
      {
        v17 = *(float *)(v16 + 4);
        goto LABEL_17;
      }
    }
  }
  v77[0] = v12;
  memset(&advances, 0, sizeof(advances));
  if (*(_BYTE *)(v11 + 100))
    v51 = kCTFontOrientationVertical;
  else
    v51 = kCTFontOrientationHorizontal;
  BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(_QWORD *)(v11 + 88), v51, v77, &advances, 1);
  y = BoundingRectsForGlyphs.origin.y;
  width = BoundingRectsForGlyphs.size.width;
  height = BoundingRectsForGlyphs.size.height;
  v55 = y + height;
  v56 = *(float *)(v11 + 340);
  v57 = *(_OWORD **)(v11 + 208);
  if (!v57)
  {
    v75 = y + height;
    v76 = *(float *)(v11 + 340);
    v74 = width;
    x = BoundingRectsForGlyphs.origin.x;
    v57 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
    *v57 = 0u;
    v57[1] = 0u;
    v57[2] = 0u;
    v57[3] = 0u;
    v57[4] = 0u;
    v57[5] = 0u;
    v57[6] = 0u;
    v57[7] = 0u;
    v57[8] = 0u;
    v57[9] = 0u;
    v57[10] = 0u;
    v57[11] = 0u;
    v57[12] = 0u;
    v57[13] = 0u;
    v57[14] = 0u;
    v57[15] = 0u;
    v57[16] = 0u;
    v63 = v14;
    v64 = (WTF *)*v14;
    *v63 = v57;
    if (v64)
    {
      v65 = (_OWORD **)v63;
      v66 = *((_QWORD *)v64 + 33);
      if (v66)
      {
        v67 = *(unsigned int *)(v66 - 4);
        if ((_DWORD)v67)
        {
          v68 = (WTF **)(v66 + 8);
          do
          {
            if (*((_DWORD *)v68 - 2) != -1)
            {
              v69 = *v68;
              *v68 = 0;
              if (v69)
                WTF::fastFree(v69, v62);
            }
            v68 += 2;
            --v67;
          }
          while (v67);
        }
        WTF::fastFree((WTF *)(v66 - 16), v62);
      }
      WTF::fastFree(v64, v62);
      v57 = *v65;
    }
    BoundingRectsForGlyphs.origin.x = x;
    width = v74;
    v55 = v75;
    v56 = v76;
  }
  v58 = BoundingRectsForGlyphs.origin.x;
  v17 = -v55;
  v59 = v56 + width;
  if (v12 < 0x10)
  {
    v60 = (uint64_t)v57 + 4;
    if (!*(_BYTE *)v57)
    {
      *(_OWORD *)((char *)v57 + 4) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 20) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 36) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 52) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 68) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 84) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 100) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 116) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 132) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 148) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 164) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 180) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 196) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 212) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 228) = xmmword_1969F2680;
      *(_OWORD *)((char *)v57 + 244) = xmmword_1969F2680;
      *(_BYTE *)v57 = 1;
    }
  }
  else
  {
    v60 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v57, v12 >> 4);
  }
  v61 = (float *)(v60 + 16 * (v12 & 0xF));
  *v61 = v58;
  v61[1] = v17;
  v61[2] = v59;
  v61[3] = height;
LABEL_17:
  v18 = llroundf(-v17);
  v19 = v18 << 6;
  if (v18 < -33554432)
    v19 = 0x80000000;
  if (v18 <= 0x1FFFFFF)
    v20 = v19;
  else
    v20 = 0x7FFFFFFF;
  *(_QWORD *)v77 = 0;
  v78 = 0;
  v21 = v80;
  if (v80)
    v22 = *((_QWORD *)v80 + 1);
  else
    v22 = 0;
  v23 = v79;
  if (*(unsigned __int16 *)(v22 + 334) != v79 || !v79 || (v25 = 0.0, (*(_BYTE *)(v22 + 256) & 2) != 0))
  {
    v24 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v22 + 128, v79);
    if (v24 == -1.0)
    {
      glyphs = v23;
      advances.origin = (CGPoint)*MEMORY[0x1E0C9D820];
      if (*(float *)(v22 + 96) != 0.0)
      {
        v48 = kCTFontOrientationHorizontal;
        if (*(_BYTE *)(v22 + 100))
        {
          if ((*(_BYTE *)(v22 + 344) & 4) != 0)
            v48 = kCTFontOrientationHorizontal;
          else
            v48 = kCTFontOrientationVertical;
        }
        CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v22 + 88), v48, &glyphs, (CGSize *)&advances, 1);
      }
      v49 = advances.origin.x;
      WebCore::GlyphMetricsMap<float>::locatePage(v22 + 128, v23 >> 4);
      v24 = v49;
      *(float *)(v50 + 4 * (v23 & 0xF)) = v49;
    }
    v25 = (float)(v24 + *(float *)(v22 + 340));
    v21 = v80;
  }
  *(double *)v77 = v25;
  v78 = 0;
  v26 = a2[10];
  if (v21)
    v27 = *((_QWORD *)v21 + 1);
  else
    v27 = 0;
  v29 = *((_DWORD *)this + 38);
  v28 = *((_DWORD *)this + 39);
  v30 = *((_DWORD *)a3 + 1);
  v31 = __OFADD__(*(_DWORD *)a3, v29);
  v32 = *(_DWORD *)a3 + v29;
  if (v31)
    v33 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  else
    v33 = v32;
  v31 = __OFADD__(v30, v28);
  v34 = v30 + v28;
  if (v31)
    v35 = (v30 >> 31) + 0x7FFFFFFF;
  else
    v35 = v34;
  v36 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 1016))(this);
  v37 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 944))(this);
  if (__OFADD__(v36, v37))
    v38 = (v36 >> 31) + 0x7FFFFFFF;
  else
    v38 = v36 + v37;
  v39 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 1048))(this);
  v40 = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)this + 960))(this);
  v41 = v39 + v40;
  if (__OFADD__(v39, v40))
    v41 = (v39 >> 31) + 0x7FFFFFFF;
  v31 = __OFADD__(v20, v41);
  v42 = v20 + v41;
  if (v31)
    v42 = (v20 >> 31) + 0x7FFFFFFF;
  v43 = v33 + v38;
  if (__OFADD__(v33, v38))
    v43 = (v33 >> 31) + 0x7FFFFFFF;
  v31 = __OFADD__(v35, v42);
  v44 = v35 + v42;
  if (v31)
    v44 = (v35 >> 31) + 0x7FFFFFFF;
  *(float32x2_t *)&advances.origin.x = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v44, v43)), (float32x2_t)vdup_n_s32(0x3C800000u));
  v45 = (*(unsigned __int16 *)(*((_QWORD *)this + 14) + 228) >> 7) & 3;
  v46 = atomic_load(WebCore::disableFontSubpixelAntialiasingForTesting);
  if ((v46 & 1) == 0 || (v47 = 2, v45) && v45 != 3)
    v47 = (*(unsigned __int16 *)(*((_QWORD *)this + 14) + 228) >> 7) & 3;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, unsigned __int16 *, CGGlyph *, uint64_t, CGRect *, uint64_t))(*(_QWORD *)v26 + 552))(v26, v27, &v79, v77, 1, &advances, v47);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
  result = (uint64_t)v80;
  v80 = 0;
  if (result)
    goto LABEL_55;
  return result;
}

WTF *WebCore::RenderMathMLToken::paintChildren(WebCore::RenderMathMLToken *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, WebCore::PaintInfo *a4, int a5)
{
  void *v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;

  if (!*((_BYTE *)this + 212))
    return (WTF *)WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
  WebCore::FontCascade::glyphDataForCharacter((void *)*((unsigned int *)this + 52), *((_QWORD *)this + 14) + 32, *((unsigned __int8 *)this + 216), 0, (uint64_t)&v13);
  result = v14;
  if (!v14)
    return (WTF *)WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
  v12 = *((_QWORD *)v14 + 1);
  v14 = 0;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    if (v12)
      return result;
    return (WTF *)WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
  }
  result = (WTF *)WTF::fastFree(result, v10);
  if (!v12)
    return (WTF *)WebCore::RenderBlock::paintChildren((uint64_t)this, a2, a3, a4, a5);
  return result;
}

void WebCore::RenderMathMLUnderOver::~RenderMathMLUnderOver(WebCore::RenderMathMLUnderOver *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E343A178;
  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderMathMLUnderOver::computePreferredLogicalWidths(WebCore::RenderMathMLUnderOver *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  WebCore::RenderBox *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::RenderBox *v23;
  WebCore::RenderBox *v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    goto LABEL_19;
  v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v2)
    goto LABEL_19;
  if ((*(_BYTE *)(v2 + 45) & 4) == 0)
    goto LABEL_19;
  v3 = *(unsigned int *)(v2 + 47);
  if (!(v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
    goto LABEL_19;
  v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
  if (!v4 || (*(_BYTE *)(v4 + 45) & 4) == 0)
    goto LABEL_19;
  v5 = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 45) & 4) == 0)
        v5 = 0;
    }
  }
  v6 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120);
  if ((v6 - 4) < 2)
  {
    if (!v5)
      goto LABEL_24;
LABEL_19:
    *((_QWORD *)this + 23) = 0;
    return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
  }
  if (v6 != 6 || v5 == 0)
    goto LABEL_19;
  v9 = *(unsigned int *)(v5 + 47) | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 45) & 4) != 0)
        goto LABEL_19;
    }
  }
LABEL_24:
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 238) & 0x10) == 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2)
    || (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1920))(v2)) == 0
    || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 1936))(v11, 8))
  {
    if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                               + 8)
                   + 45) & 4) != 0)
      v12 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    else
      v12 = 0;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 416))(v12);
    if ((*(_BYTE *)(*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                               + 8)
                   + 45) & 4) != 0)
      v14 = *(WebCore::RenderBox **)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
                                   + 8);
    else
      v14 = 0;
    v15 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v14);
    if (__OFADD__(v13, v15))
      v16 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v16 = v13 + v15;
    v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120);
    if ((v17 | 2) == 6)
    {
      v18 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if ((*(_BYTE *)(v18 + 45) & 4) == 0)
        v18 = 0;
      v19 = *(_QWORD *)((*(unsigned int *)(v18 + 47) | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32)) + 8);
      if ((*(_BYTE *)(v19 + 45) & 4) != 0)
        v20 = v19;
      else
        v20 = 0;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 416))(v20);
      v22 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if ((*(_BYTE *)(v22 + 45) & 4) == 0)
        v22 = 0;
      v23 = *(WebCore::RenderBox **)((*(unsigned int *)(v22 + 47) | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32))
                                   + 8);
      if ((*((_BYTE *)v23 + 45) & 4) != 0)
        v24 = v23;
      else
        v24 = 0;
      v25 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, v24);
      v26 = v21 + v25;
      if (__OFADD__(v21, v25))
        v26 = (v21 >> 31) + 0x7FFFFFFF;
      if (v16 <= v26)
        v16 = v26;
      v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120);
    }
    if ((v17 - 5) <= 1)
    {
      v27 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if ((*(_BYTE *)(v27 + 45) & 4) == 0)
        v27 = 0;
      v28 = *(unsigned int *)(v27 + 47) | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32);
      if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
      {
        if ((*(_BYTE *)(v29 + 45) & 4) != 0)
          v30 = v29;
        else
          v30 = 0;
      }
      else
      {
        v30 = 0;
      }
      if (v17 != 5)
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(v30 + 47) | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32))
                                   + 8)
                       + 45) & 4) != 0)
          v30 = *(_QWORD *)((*(unsigned int *)(v30 + 47) | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)) + 8);
        else
          v30 = 0;
      }
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 416))(v30);
      v32 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if ((*(_BYTE *)(v32 + 45) & 4) == 0)
        v32 = 0;
      v33 = *(unsigned int *)(v32 + 47) | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32);
      if (v33 && (v34 = *(_QWORD *)(v33 + 8)) != 0)
      {
        if ((*(_BYTE *)(v34 + 45) & 4) != 0)
          v35 = v34;
        else
          v35 = 0;
      }
      else
      {
        v35 = 0;
      }
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 120) != 5)
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(v35 + 47) | ((unint64_t)*(unsigned __int8 *)(v35 + 51) << 32))
                                   + 8)
                       + 45) & 4) != 0)
          v35 = *(_QWORD *)((*(unsigned int *)(v35 + 47) | ((unint64_t)*(unsigned __int8 *)(v35 + 51) << 32)) + 8);
        else
          v35 = 0;
      }
      v36 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v35);
      v37 = v31 + v36;
      if (__OFADD__(v31, v36))
        v37 = (v31 >> 31) + 0x7FFFFFFF;
      if (v16 <= v37)
        v16 = v37;
    }
    v38 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 1064))(this);
    v39 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 1072))(this);
    if (__OFADD__(v38, v39))
      v40 = (v38 >> 31) + 0x7FFFFFFF;
    else
      v40 = v38 + v39;
    v41 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 976))(this);
    if (__OFADD__(v40, v41))
      v42 = (v40 >> 31) + 0x7FFFFFFF;
    else
      v42 = v40 + v41;
    v43 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 984))(this);
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      v44 = (v42 >> 31) + 0x7FFFFFFF;
    v45 = __OFADD__(v16, v44);
    v46 = v16 + v44;
    if (v45)
      v46 = (v16 >> 31) + 0x7FFFFFFF;
    *((_DWORD *)this + 46) = v46;
    *((_DWORD *)this + 47) = v46;
    return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
  }
  return WebCore::RenderMathMLScripts::computePreferredLogicalWidths(this);
}

uint64_t WebCore::RenderMathMLUnderOver::horizontalOffset(WebCore::RenderMathMLUnderOver *this, const WebCore::RenderBox *a2)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;
  double v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  float v27;
  float v28;
  double v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v37;
  float v38;
  uint64_t (*v39)(WebCore::RenderMathMLUnderOver *);
  WebCore::RenderMathMLUnderOver *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;

  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v4 = (char *)this + 164;
  else
    v4 = (char *)this + 160;
  v5 = *(_DWORD *)v4;
  v6 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 1064))(this);
  v7 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 1072))(this);
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  v9 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 976))(this);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = (*(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 984))(this);
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  v13 = v5 - v12;
  if (__OFSUB__(v5, v12))
    v13 = (v5 >> 31) + 0x7FFFFFFF;
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
    v14 = (char *)a2 + 164;
  else
    v14 = (char *)a2 + 160;
  v15 = *(_DWORD *)v14;
  v16 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1128))(a2, 0);
  v17 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1136))(a2, 0);
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  v19 = v15 + v18;
  if (__OFADD__(v15, v18))
    v19 = (v15 >> 31) + 0x7FFFFFFF;
  v20 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v20 == 4 || v20 == 2) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
  {
    v45 = v19;
    v43 = WebCore::RenderBoxModelObject::borderLeft(this);
    v44 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v24 = v43 + v44;
    if (__OFADD__(v43, v44))
      v24 = (v43 >> 31) + 0x7FFFFFFF;
    v19 = v45;
  }
  else
  {
    v21 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v22 = 0.0;
    if ((*(_BYTE *)(v21 + 124) & 0xE) != 0)
    {
      v37 = *(_QWORD *)(v21 + 200);
      if (*(_BYTE *)(v37 + 5) && *(_BYTE *)(v37 + 76) == 4)
      {
        if (*(_BYTE *)(v37 + 78))
          v22 = *(float *)(v37 + 72);
        else
          v22 = (float)*(int *)(v37 + 72);
      }
      else
      {
        v22 = *(float *)(v21 + 120);
      }
    }
    v23 = v22 * 64.0;
    if (v23 >= 2147483650.0)
    {
      v24 = 0x7FFFFFFF;
    }
    else if (v23 <= -2147483650.0)
    {
      v24 = 0x80000000;
    }
    else
    {
      v24 = (int)v23;
    }
  }
  v25 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v26 = v25[100];
  if ((v26 & 0xFFFFFFF7) == 3)
  {
    v39 = *(uint64_t (**)(WebCore::RenderMathMLUnderOver *))(*(_QWORD *)this + 1144);
    v40 = this;
    v41 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v42 = v39(v40);
    v25 = v41;
    v26 = v41[100];
    v27 = (float)v42 * 0.015625;
  }
  else
  {
    v27 = 0.0;
  }
  switch(v26)
  {
    case 4:
      v28 = *((float *)v25 + 24);
      if (!v25[102])
        v28 = (float)SLODWORD(v28);
      break;
    case 3:
      v38 = *((float *)v25 + 24);
      if (!v25[102])
        v38 = (float)SLODWORD(v38);
      v28 = (float)(v27 * v38) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v25 + 96), v27);
      break;
    default:
      v30 = 0;
      goto LABEL_31;
  }
  v29 = v28 * 64.0;
  if (v29 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
LABEL_31:
  v31 = __OFADD__(v24, v30);
  v32 = v24 + v30;
  if (v31)
    v32 = (v24 >> 31) + 0x7FFFFFFF;
  v33 = v13 - v19;
  if (__OFSUB__(v13, v19))
    v33 = (v13 >> 31) + 0x7FFFFFFF;
  v34 = v32 + v33 / 2;
  if (__OFADD__(v32, v33 / 2))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  v35 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1096))(a2);
  if (__OFADD__(v34, v35))
    return (v34 >> 31) + 0x7FFFFFFF;
  else
    return v34 + v35;
}

void WebCore::RenderMathMLUnderOver::layoutBlock(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderElement *v25;
  int v26;
  char v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::RenderElement *v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  int v45;
  WTF *v46;
  _BYTE *v47;
  int v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  WebCore::RenderElement *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  WebCore::RenderElement *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  WTF *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  void *v122;
  int v123;
  int v124;
  int *v125;
  WebCore::Font *v126;
  WebCore::OpenTypeMathData *v127;
  void *v128;
  WebCore::OpenTypeMathData *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  double v136;
  int v137;
  float v138;
  double v139;
  uint64_t v140;
  float v141;
  double v142;
  int v143;
  uint64_t v144;
  void *v145;
  float v146;
  double v147;
  int v148;
  int v149;
  int v150;
  int v151;
  float v152;
  double v153;
  int v154;
  float v155;
  double v156;
  float v157;
  double v158;
  int v159;
  float v160;
  double v161;
  float v162;
  double v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF *v178;
  void *v179;
  WTF *v180;
  void *v181;
  float v182;
  double v183;
  int v184;
  float v185;
  double v186;
  float v187;
  double v188;
  int v189;
  double v190;
  int v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int *v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int *v245;
  unsigned int v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  unsigned int *v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  int *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int *v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  int *v322;
  int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  int v332;
  int v333;
  int *v334;
  unsigned int v335;
  unsigned int v336;
  _DWORD *v337;
  uint64_t v338;
  WebCore::RenderLayerScrollableArea *v339;
  unsigned int v340;
  int v341;
  int v342;
  _BYTE *v343;
  WebCore::RenderElement *v344;
  WTF *v345;
  uint64_t v346;
  _BYTE v347[24];
  WTF *v348;
  uint64_t v349;
  _BYTE v350[24];

  v4 = *(unsigned __int8 *)(a1 + 68);
  for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v7 + 47))
  {
    v6 = i | (v4 << 32);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      break;
    if ((*(_BYTE *)(v7 + 45) & 4) != 0)
    {
LABEL_6:
      if ((*(_DWORD *)(v7 + 20) & 0x1800000) == 0x1000000)
      {
        v8 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
        if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v7);
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v7);
        if ((*(_BYTE *)(v7 + 52) & 7) != 1 || (*(_BYTE *)(v7 + 53) & 2) == 0)
        {
          if ((*(_BYTE *)(v7 + 20) & 0xF8) != 0)
            *((_DWORD *)v8 + 5) |= 0x40u;
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v8, (WebCore::RenderBox *)v7);
        }
      }
      while (1)
      {
        v9 = *(unsigned int *)(v7 + 47);
        if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
          goto LABEL_22;
        v7 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
        if (!v7)
          goto LABEL_22;
        if ((*(_BYTE *)(v7 + 45) & 4) != 0)
          goto LABEL_6;
      }
    }
    v4 = *(unsigned __int8 *)(v7 + 51);
  }
LABEL_22:
  if ((a2 & 1) != 0 || (WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1) & 1) == 0)
  {
    v10 = *(unsigned int *)(a1 + 64);
    if (v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v11 = *(_BYTE **)((v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v11)
      {
        if ((v11[45] & 4) != 0)
        {
          v12 = *(unsigned int *)(v11 + 47);
          if (v12 | ((unint64_t)v11[51] << 32))
          {
            v13 = *(_QWORD *)((v12 | ((unint64_t)v11[51] << 32)) + 8);
            if (v13)
            {
              if ((*(_BYTE *)(v13 + 45) & 4) != 0)
              {
                v14 = *(unsigned int *)(v13 + 47) | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32);
                if (v14)
                {
                  v14 = *(_QWORD *)(v14 + 8);
                  if (v14)
                  {
                    if ((*(_BYTE *)(v14 + 45) & 4) == 0)
                      v14 = 0;
                  }
                }
                v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120);
                if ((v15 - 4) >= 2)
                {
                  if (v15 == 6 && v14 != 0)
                  {
                    v17 = *(unsigned int *)(v14 + 47) | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32);
                    if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0 || (*(_BYTE *)(v18 + 45) & 4) == 0)
                    {
LABEL_46:
                      if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 238) & 0x10) != 0)
                      {
                        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v11 + 176))(v11))
                        {
                          v19 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 1920))(v11);
                          if (v19)
                          {
                            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 1936))(v19, 8))
                            {
                              WebCore::RenderMathMLScripts::layoutBlock(a1, a2);
                              return;
                            }
                          }
                        }
                      }
                      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
                      *(_WORD *)(a1 + 69) &= ~0x200u;
                      v21 = *(unsigned int *)(a1 + 64);
                      v22 = v21 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
                      if (v22)
                      {
                        v23 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                        if (v23)
                        {
                          if ((*(_BYTE *)(v23 + 45) & 4) != 0)
                          {
                            do
                            {
                              WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v23, (const WebCore::RenderBlock *)a1);
                              v24 = *(unsigned int *)(v23 + 47);
                              if (!(v24 | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32)))
                                break;
                              v23 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32)) + 8);
                              if (!v23)
                                break;
                            }
                            while ((*(_BYTE *)(v23 + 45) & 4) != 0);
                            v22 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
                          }
                        }
                      }
                      v348 = (WTF *)v350;
                      v349 = 3;
                      v345 = (WTF *)v347;
                      v346 = 3;
                      if (v22)
                      {
                        v25 = *(WebCore::RenderElement **)(v22 + 8);
                        if (v25)
                        {
                          if ((*((_BYTE *)v25 + 45) & 4) != 0)
                          {
                            v26 = 0;
                            v27 = 1;
                            do
                            {
                              v343 = 0;
                              v344 = v25;
                              if ((*(unsigned int (**)(WebCore::RenderElement *))(*(_QWORD *)v25 + 176))(v25)
                                && (v28 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v25 + 1920))(v25)) != 0
                                && (v29 = (_BYTE *)v28,
                                    (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 1952))(v28))
                                && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v29 + 1936))(v29, 32)&& ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v29 + 1944))(v29) & 1) == 0&& !v29[232])
                              {
                                v343 = v29;
                                v41 = HIDWORD(v349);
                                if (HIDWORD(v349) == (_DWORD)v349)
                                {
                                  v42 = WTF::Vector<WebCore::RenderBox *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v348, HIDWORD(v349) + 1, (unint64_t)&v344);
                                  v41 = HIDWORD(v349);
                                  *((_QWORD *)v348 + HIDWORD(v349)) = *(_QWORD *)v42;
                                }
                                else
                                {
                                  *((_QWORD *)v348 + HIDWORD(v349)) = v344;
                                }
                                HIDWORD(v349) = v41 + 1;
                                v43 = HIDWORD(v346);
                                if (HIDWORD(v346) == (_DWORD)v346)
                                {
                                  v44 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,1u>::ThenCallbackBase>>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v345, HIDWORD(v346) + 1, (unint64_t)&v343);
                                  v43 = HIDWORD(v346);
                                  v45 = HIDWORD(v346) + 1;
                                  v46 = v345;
                                  v47 = *(_BYTE **)v44;
                                }
                                else
                                {
                                  v45 = HIDWORD(v346) + 1;
                                  v46 = v345;
                                  v47 = v343;
                                }
                                *((_QWORD *)v46 + v43) = v47;
                                HIDWORD(v346) = v45;
                              }
                              else
                              {
                                v343 = 0;
                                if ((*((_BYTE *)v344 + 20) & 0xF8) != 0)
                                {
                                  v30 = *((_QWORD *)v344 + 4);
                                  if (v30
                                    && (v31 = *(_QWORD *)(v30 + 8)) != 0
                                    && (*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 0x18) != 0
                                    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v344 + 3) + 8)
                                                                                                 + 40)
                                                                                     + 8)
                                                                         + 1944)
                                                             + 248)
                                                 + 479))
                                  {
                                    WebCore::RenderElement::clearNeedsLayoutForSkippedContent(v344);
                                  }
                                  else
                                  {
                                    (*(void (**)(void))(*(_QWORD *)v344 + 688))();
                                  }
                                }
                                v32 = v344;
                                v33 = (char *)v344 + 164;
                                if (((*((_DWORD *)v344 + 31) >> 13) & 6u) - 2 >= 4)
                                  v33 = (char *)v344 + 160;
                                v34 = *(_DWORD *)v33;
                                v35 = (*(uint64_t (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)v344
                                                                                                  + 1128))(v344, 0);
                                v36 = (*(uint64_t (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)v32
                                                                                                  + 1136))(v32, 0);
                                v27 = 0;
                                v37 = v35 + v36;
                                if (__OFADD__(v35, v36))
                                  v37 = (v35 >> 31) + 0x7FFFFFFF;
                                v38 = __OFADD__(v34, v37);
                                v39 = v34 + v37;
                                if (v38)
                                  v39 = (v34 >> 31) + 0x7FFFFFFF;
                                if (v26 <= v39)
                                  v26 = v39;
                              }
                              v40 = *((unsigned __int8 *)v344 + 51);
                              if (!(*(unsigned int *)((char *)v344 + 47) | (unint64_t)(v40 << 32)))
                                break;
                              v25 = *(WebCore::RenderElement **)((*(unsigned int *)((char *)v344 + 47) | (unint64_t)(v40 << 32))
                                                               + 8);
                              if (!v25)
                                break;
                            }
                            while ((*((_BYTE *)v25 + 45) & 4) != 0);
                            v48 = HIDWORD(v349);
                            if ((v27 & (HIDWORD(v349) != 0)) == 1)
                            {
                              v49 = 0;
                              do
                              {
                                if (v49 >= HIDWORD(v346))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B7088);
                                }
                                v50 = (_DWORD *)*((_QWORD *)v345 + v49);
                                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v50 + 1944))(v50))
                                {
                                  v50[55] = 0;
                                  v51 = v50 + 56;
                                }
                                else
                                {
                                  v51 = v50 + 57;
                                }
                                *v51 = 0;
                                if (v49 >= HIDWORD(v349))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B7090);
                                }
                                if (v49 >= HIDWORD(v346))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B7098);
                                }
                                v52 = *((_QWORD *)v348 + v49);
                                v53 = *((_QWORD *)v345 + v49);
                                *(_BYTE *)(v53 + 232) = 1;
                                v54 = *(_DWORD *)(v53 + 20);
                                if ((v54 & 8) == 0)
                                {
                                  *(_DWORD *)(v53 + 20) = v54 | 8;
                                  v55 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v53, 0);
                                  WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v53, v55);
                                  if ((*(_BYTE *)(v53 + 21) & 0x80) != 0)
                                  {
                                    if ((*(_BYTE *)(v53 + 45) & 0x10) == 0)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x1964B57D4);
                                    }
                                    v56 = *(_QWORD *)(v53 + 144);
                                    if (v56)
                                    {
                                      v57 = *(_DWORD *)(v56 + 8) + 1;
                                      *(_DWORD *)(v56 + 8) = v57;
                                    }
                                    else
                                    {
                                      v57 = MEMORY[8];
                                    }
                                    *(_QWORD *)(v56 + 24) = *(_QWORD *)(v56 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                                    if (!v57)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x1964B57F4);
                                    }
                                    *(_DWORD *)(v56 + 8) = v57 - 1;
                                  }
                                }
                                if ((*(_BYTE *)(v52 + 20) & 0xF8) != 0)
                                {
                                  v58 = *(_QWORD *)(v52 + 32);
                                  if (v58
                                    && (v59 = *(_QWORD *)(v58 + 8)) != 0
                                    && (*(_BYTE *)(*(_QWORD *)(v59 + 104) + 239) & 0x18) != 0
                                    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) + 8)
                                                                                                 + 40)
                                                                                     + 8)
                                                                         + 1944)
                                                             + 248)
                                                 + 479))
                                  {
                                    WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v52);
                                  }
                                  else
                                  {
                                    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 688))(v52);
                                  }
                                }
                                *(_BYTE *)(v53 + 232) = 0;
                                if (v49 >= HIDWORD(v349))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B70A0);
                                }
                                v60 = (unsigned int *)*((_QWORD *)v348 + v49);
                                v61 = v60 + 41;
                                if (((v60[31] >> 13) & 6) - 2 >= 4)
                                  v61 = v60 + 40;
                                v62 = *v61;
                                v63 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v60 + 1128))(*((_QWORD *)v348 + v49), 0);
                                v64 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v60 + 1136))(v60, 0);
                                v65 = v63 + v64;
                                if (__OFADD__(v63, v64))
                                  v65 = (v63 >> 31) + 0x7FFFFFFF;
                                v38 = __OFADD__(v62, v65);
                                v66 = v62 + v65;
                                if (v38)
                                  v66 = (v62 >> 31) + 0x7FFFFFFF;
                                if (v26 <= v66)
                                  v26 = v66;
                                ++v49;
                                v48 = HIDWORD(v349);
                              }
                              while (v49 < HIDWORD(v349));
                            }
                            if (v48)
                            {
                              v67 = 0;
                              v68 = v26;
                              do
                              {
                                if (v67 >= HIDWORD(v346))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B7034);
                                }
                                WebCore::RenderMathMLOperator::stretchTo(*((int **)v345 + v67), v68);
                                if (v67 >= HIDWORD(v349))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B703CLL);
                                }
                                if (v67 >= HIDWORD(v346))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1964B7044);
                                }
                                v69 = *((_QWORD *)v348 + v67);
                                v70 = *((_QWORD *)v345 + v67);
                                *(_BYTE *)(v70 + 232) = 1;
                                v71 = *(_DWORD *)(v70 + 20);
                                if ((v71 & 8) == 0)
                                {
                                  *(_DWORD *)(v70 + 20) = v71 | 8;
                                  v72 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v70, 0);
                                  WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v70, v72);
                                  if ((*(_BYTE *)(v70 + 21) & 0x80) != 0)
                                  {
                                    if ((*(_BYTE *)(v70 + 45) & 0x10) == 0)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x1964B5794);
                                    }
                                    v73 = *(_QWORD *)(v70 + 144);
                                    if (v73)
                                    {
                                      v74 = *(_DWORD *)(v73 + 8) + 1;
                                      *(_DWORD *)(v73 + 8) = v74;
                                    }
                                    else
                                    {
                                      v74 = MEMORY[8];
                                    }
                                    *(_QWORD *)(v73 + 24) = *(_QWORD *)(v73 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                                    if (!v74)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x1964B57B4);
                                    }
                                    *(_DWORD *)(v73 + 8) = v74 - 1;
                                  }
                                }
                                if ((*(_BYTE *)(v69 + 20) & 0xF8) != 0)
                                {
                                  v75 = *(_QWORD *)(v69 + 32);
                                  if (v75
                                    && (v76 = *(_QWORD *)(v75 + 8)) != 0
                                    && (*(_BYTE *)(*(_QWORD *)(v76 + 104) + 239) & 0x18) != 0
                                    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 24) + 8)
                                                                                                 + 40)
                                                                                     + 8)
                                                                         + 1944)
                                                             + 248)
                                                 + 479))
                                  {
                                    WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v69);
                                  }
                                  else
                                  {
                                    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 688))(v69);
                                  }
                                }
                                *(_BYTE *)(v70 + 232) = 0;
                                ++v67;
                              }
                              while (v67 < HIDWORD(v349));
                            }
                          }
                        }
                      }
                      v77 = v345;
                      if (v347 != (_BYTE *)v345 && v345 != 0)
                      {
                        v345 = 0;
                        LODWORD(v346) = 0;
                        WTF::fastFree(v77, v20);
                      }
                      v79 = v348;
                      if (v350 != (_BYTE *)v348 && v348)
                      {
                        v348 = 0;
                        LODWORD(v349) = 0;
                        WTF::fastFree(v79, v20);
                      }
                      v80 = *(unsigned int *)(a1 + 64);
                      v81 = v80 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
                      if (v81)
                      {
                        v82 = *(_QWORD *)((v80 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                        if (v82 && (*(_BYTE *)(v82 + 45) & 4) == 0)
                          v82 = 0;
                      }
                      else
                      {
                        v82 = 0;
                      }
                      if (((*(_DWORD *)(v82 + 124) >> 13) & 6u) - 2 < 4)
                      {
                        v83 = (unsigned int *)(v82 + 164);
                        if (!v81)
                          goto LABEL_179;
                      }
                      else
                      {
                        v83 = (unsigned int *)(v82 + 160);
                        if (!v81)
                          goto LABEL_179;
                      }
                      v84 = *(_QWORD *)(v81 + 8);
                      if (v84)
                      {
                        if ((*(_BYTE *)(v84 + 45) & 4) != 0)
                          v85 = v84;
                        else
                          v85 = 0;
LABEL_180:
                        v86 = *v83;
                        v87 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 1128))(v85, 0);
                        v88 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 1136))(v85, 0);
                        v89 = v87 + v88;
                        if (__OFADD__(v87, v88))
                          v89 = (v87 >> 31) + 0x7FFFFFFF;
                        v90 = v86 + v89;
                        if (__OFADD__(v86, v89))
                          v90 = (v86 >> 31) + 0x7FFFFFFF;
                        v91 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120);
                        if ((v91 | 2) != 6)
                        {
LABEL_208:
                          if ((v91 - 5) > 1)
                            goto LABEL_243;
                          v103 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                           + 8);
                          if ((*(_BYTE *)(v103 + 45) & 4) == 0)
                            v103 = 0;
                          v104 = *(unsigned int *)(v103 + 47) | ((unint64_t)*(unsigned __int8 *)(v103 + 51) << 32);
                          if (v104)
                          {
                            v105 = *(_QWORD *)(v104 + 8);
                            if (v105 && (*(_BYTE *)(v105 + 45) & 4) == 0)
                              v105 = 0;
                          }
                          else
                          {
                            v105 = 0;
                          }
                          if (v91 != 5)
                          {
                            v105 = *(unsigned int *)(v105 + 47) | ((unint64_t)*(unsigned __int8 *)(v105 + 51) << 32);
                            if (v105)
                            {
                              v105 = *(_QWORD *)(v105 + 8);
                              if (v105)
                              {
                                if ((*(_BYTE *)(v105 + 45) & 4) == 0)
                                  v105 = 0;
                              }
                            }
                          }
                          if (((*(_DWORD *)(v105 + 124) >> 13) & 6u) - 2 < 4)
                          {
                            v106 = (unsigned int *)(v105 + 164);
                            if (!v104)
                              goto LABEL_229;
                          }
                          else
                          {
                            v106 = (unsigned int *)(v105 + 160);
                            if (!v104)
                              goto LABEL_229;
                          }
                          v107 = *(_QWORD *)(v104 + 8);
                          if (v107)
                          {
                            if ((*(_BYTE *)(v107 + 45) & 4) != 0)
                              v108 = v107;
                            else
                              v108 = 0;
                            goto LABEL_230;
                          }
LABEL_229:
                          v108 = 0;
LABEL_230:
                          if (v91 != 5)
                          {
                            v109 = *(unsigned int *)(v108 + 47);
                            if (v109 | ((unint64_t)*(unsigned __int8 *)(v108 + 51) << 32)
                              && (v110 = *(_QWORD *)((v109 | ((unint64_t)*(unsigned __int8 *)(v108 + 51) << 32))
                                                   + 8)) != 0)
                            {
                              if ((*(_BYTE *)(v110 + 45) & 4) != 0)
                                v108 = *(_QWORD *)((v109 | ((unint64_t)*(unsigned __int8 *)(v108 + 51) << 32)) + 8);
                              else
                                v108 = 0;
                            }
                            else
                            {
                              v108 = 0;
                            }
                          }
                          v111 = *v106;
                          v112 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 1128))(v108, 0);
                          v113 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 1136))(v108, 0);
                          v114 = v112 + v113;
                          if (__OFADD__(v112, v113))
                            v114 = (v112 >> 31) + 0x7FFFFFFF;
                          v38 = __OFADD__(v111, v114);
                          v115 = v111 + v114;
                          if (v38)
                            v115 = (v111 >> 31) + 0x7FFFFFFF;
                          if (v90 <= v115)
                            v90 = v115;
LABEL_243:
                          v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
                          v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
                          v118 = v116 + v117;
                          if (__OFADD__(v116, v117))
                            v118 = (v116 >> 31) + 0x7FFFFFFF;
                          v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
                          v120 = v118 + v119;
                          if (__OFADD__(v118, v119))
                            v120 = (v118 >> 31) + 0x7FFFFFFF;
                          v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
                          v123 = v120 + v121;
                          if (__OFADD__(v120, v121))
                            v123 = (v120 >> 31) + 0x7FFFFFFF;
                          v38 = __OFADD__(v90, v123);
                          v124 = v90 + v123;
                          if (v38)
                            v124 = (v90 >> 31) + 0x7FFFFFFF;
                          if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                            v125 = (int *)(a1 + 164);
                          else
                            v125 = (int *)(a1 + 160);
                          *v125 = v124;
                          v126 = (WebCore::Font *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a1 + 112) + 32), v122);
                          ++*(_DWORD *)v126;
                          v127 = (WebCore::OpenTypeMathData *)WebCore::Font::mathData(v126);
                          if (!v127)
                          {
                            v190 = (float)(*(float *)(*(_QWORD *)(a1 + 112) + 204) * 0.05) * 64.0;
                            if (v190 >= 2147483650.0)
                            {
                              v191 = 0x7FFFFFFF;
                            }
                            else if (v190 <= -2147483650.0)
                            {
                              v191 = 0x80000000;
                            }
                            else
                            {
                              v191 = (int)v190;
                            }
                            v342 = v191;
                            v140 = 3 * v191;
                            if (HIDWORD(v140) != (int)v140 >> 31)
                              LODWORD(v140) = (v191 >> 31) + 0x7FFFFFFF;
                            v192 = *((float *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)(a1 + 80), v128)+ 9)* 64.0;
                            if (v192 >= 2147483650.0)
                            {
                              v340 = 0;
                              v151 = 0;
                              v150 = 1;
                              v149 = 0x7FFFFFFF;
                            }
                            else
                            {
                              v340 = 0;
                              v151 = 0;
                              if (v192 <= -2147483650.0)
                              {
                                v150 = 1;
                                v149 = 0x80000000;
                              }
                              else
                              {
                                v149 = (int)v192;
                                v150 = 1;
                              }
                            }
                            v148 = v342;
                            v341 = v140;
LABEL_296:
                            if (*(_DWORD *)v126 == 1)
                            {
                              WebCore::Font::~Font((WTF **)v126);
                              WTF::fastFree(v178, v179);
                            }
                            else
                            {
                              --*(_DWORD *)v126;
                            }
                            v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
                            v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
                            v166 = v164 + v165;
                            if (__OFADD__(v164, v165))
                              v166 = (v164 >> 31) + 0x7FFFFFFF;
                            v167 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120);
                            if ((v167 - 5) > 1)
                              goto LABEL_540;
                            v168 = v166 + v148;
                            if (__OFADD__(v166, v148))
                              v168 = (v166 >> 31) + 0x7FFFFFFF;
                            v169 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                             + 8);
                            if ((*(_BYTE *)(v169 + 45) & 4) == 0)
                              v169 = 0;
                            v170 = *(unsigned int *)(v169 + 47) | ((unint64_t)*(unsigned __int8 *)(v169 + 51) << 32);
                            if (v170)
                            {
                              v171 = *(_QWORD *)(v170 + 8);
                              if (v171 && (*(_BYTE *)(v171 + 45) & 4) == 0)
                                v171 = 0;
                            }
                            else
                            {
                              v171 = 0;
                            }
                            if (v167 != 5)
                            {
                              v171 = *(_QWORD *)((*(unsigned int *)(v171 + 47) | ((unint64_t)*(unsigned __int8 *)(v171 + 51) << 32))
                                               + 8);
                              if ((*(_BYTE *)(v171 + 45) & 4) == 0)
                                v171 = 0;
                            }
                            v172 = ((unsigned __int16)*(_DWORD *)(v171 + 124) >> 13) - 1;
                            if (v172 > 4)
                              v173 = 0;
                            else
                              v173 = qword_1969FDAA0[v172];
                            v174 = *(_DWORD *)(v171 + 4 * v173 + 168);
                            v175 = v168 + v174;
                            if (__OFADD__(v168, v174))
                            {
                              v175 = (v168 >> 31) + 0x7FFFFFFF;
                              if (!v170)
                                goto LABEL_354;
                            }
                            else if (!v170)
                            {
                              goto LABEL_354;
                            }
                            v176 = *(_QWORD *)(v170 + 8);
                            if (v176)
                            {
                              if ((*(_BYTE *)(v176 + 45) & 4) != 0)
                                v177 = *(_QWORD *)(v170 + 8);
                              else
                                v177 = 0;
LABEL_355:
                              if (v167 != 5)
                              {
                                v193 = *(unsigned int *)(v177 + 47);
                                if (v193 | ((unint64_t)*(unsigned __int8 *)(v177 + 51) << 32)
                                  && (v194 = *(_QWORD *)((v193 | ((unint64_t)*(unsigned __int8 *)(v177 + 51) << 32))
                                                       + 8)) != 0)
                                {
                                  if ((*(_BYTE *)(v194 + 45) & 4) != 0)
                                    v177 = *(_QWORD *)((v193 | ((unint64_t)*(unsigned __int8 *)(v177 + 51) << 32))
                                                     + 8);
                                  else
                                    v177 = 0;
                                }
                                else
                                {
                                  v177 = 0;
                                }
                              }
                              if (v170 && (v195 = *(_QWORD *)(v170 + 8)) != 0)
                              {
                                if ((*(_BYTE *)(v195 + 45) & 4) != 0)
                                  v196 = v195;
                                else
                                  v196 = 0;
                              }
                              else
                              {
                                v196 = 0;
                              }
                              if (v167 != 5)
                              {
                                if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(v196 + 47) | ((unint64_t)*(unsigned __int8 *)(v196 + 51) << 32))
                                                           + 8)
                                               + 45) & 4) != 0)
                                  v196 = *(_QWORD *)((*(unsigned int *)(v196 + 47) | ((unint64_t)*(unsigned __int8 *)(v196 + 51) << 32))
                                                   + 8);
                                else
                                  v196 = 0;
                              }
                              *(_QWORD *)(v177 + 152) = WebCore::RenderMathMLUnderOver::horizontalOffset((WebCore::RenderMathMLUnderOver *)a1, (const WebCore::RenderBox *)v196) | (unint64_t)(v175 << 32);
                              v197 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                               + 8);
                              if ((*(_BYTE *)(v197 + 45) & 4) == 0)
                                v197 = 0;
                              v198 = *(unsigned int *)(v197 + 47) | ((unint64_t)*(unsigned __int8 *)(v197 + 51) << 32);
                              if (v150)
                              {
                                if ((v198 & 0xFFFFFFFFFFLL) != 0
                                  && (v199 = *(_QWORD *)((v198 & 0xFFFFFFFFFFLL) + 8)) != 0)
                                {
                                  if ((*(_BYTE *)(v199 + 45) & 4) != 0)
                                    v200 = *(_QWORD *)((v198 & 0xFFFFFFFFFFLL) + 8);
                                  else
                                    v200 = 0;
                                }
                                else
                                {
                                  v200 = 0;
                                }
                                v203 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
                                v204 = *(_DWORD *)(v203 + 120);
                                if (v204 != 5)
                                {
                                  v200 = *(unsigned int *)(v200 + 47) | ((unint64_t)*(unsigned __int8 *)(v200 + 51) << 32);
                                  if (v200)
                                  {
                                    v200 = *(_QWORD *)(v200 + 8);
                                    if (v200)
                                    {
                                      if ((*(_BYTE *)(v200 + 45) & 4) == 0)
                                        v200 = 0;
                                    }
                                  }
                                }
                                if (((*(_DWORD *)(v200 + 124) >> 13) & 6u) - 2 < 4)
                                  v205 = (int *)(v200 + 160);
                                else
                                  v205 = (int *)(v200 + 164);
                                v206 = *v205;
                                v38 = __OFADD__((_DWORD)v175, v206);
                                v207 = v175 + v206;
                                if (v38)
                                  v207 = (v175 >> 31) + 0x7FFFFFFF;
                                if ((v198 & 0xFFFFFFFFFFLL) != 0)
                                {
                                  v208 = *(_QWORD *)((v198 & 0xFFFFFFFFFFLL) + 8);
                                  if (v208 && (*(_BYTE *)(v208 + 45) & 4) == 0)
                                    v208 = 0;
                                }
                                else
                                {
                                  v208 = 0;
                                }
                                if (v204 != 5)
                                {
                                  v208 = *(_QWORD *)((*(unsigned int *)(v208 + 47) | ((unint64_t)*(unsigned __int8 *)(v208 + 51) << 32))
                                                   + 8);
                                  if ((*(_BYTE *)(v208 + 45) & 4) == 0)
                                    v208 = 0;
                                }
                                v209 = ((unsigned __int16)*(_DWORD *)(v208 + 124) >> 13) - 1;
                                if (v209 > 4)
                                  v210 = 2;
                                else
                                  v210 = qword_1969FDAC8[v209];
                                v211 = *(_DWORD *)(v208 + 4 * v210 + 168);
                                v166 = v207 + v211;
                                if (__OFADD__(v207, v211))
                                  v166 = (v207 >> 31) + 0x7FFFFFFF;
                                if (*(_BYTE *)(v203 + 152))
                                {
                                  v212 = *(_DWORD *)(v203 + 148);
                                }
                                else
                                {
                                  v213 = *(_QWORD *)(v203 + 104);
                                  if (v213
                                    && ((v214 = *(_DWORD *)(v213 + 4), (v214 & 1) != 0)
                                      ? (v215 = *(_QWORD *)(v213 + 40), LODWORD(v216) = *(_DWORD *)(v213 + 52))
                                      : (v215 = v213 + 32, LODWORD(v216) = v214 >> 5),
                                        (_DWORD)v216))
                                  {
                                    v216 = v216;
                                    v232 = (uint64_t *)(v215 + 8);
                                    while (1)
                                    {
                                      v233 = *(v232 - 1);
                                      if (v233 == WebCore::MathMLNames::accentAttr
                                        || *(_QWORD *)(v233 + 24) == *(_QWORD *)(WebCore::MathMLNames::accentAttr + 24)
                                        && *(_QWORD *)(v233 + 32) == *(_QWORD *)(WebCore::MathMLNames::accentAttr + 32))
                                      {
                                        break;
                                      }
                                      v232 += 2;
                                      if (!--v216)
                                      {
                                        v232 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                                        break;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v232 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                                  }
                                  v234 = *v232;
                                  if (v234 == WebCore::falseAtomData)
                                    v235 = 1;
                                  else
                                    v235 = 2;
                                  if (v234 == WebCore::trueAtomData)
                                    v212 = 0;
                                  else
                                    v212 = v235;
                                  *(_DWORD *)(v203 + 148) = v212;
                                  *(_BYTE *)(v203 + 152) = 1;
                                }
                                if (v212)
                                {
                                  if (v212 == 1)
                                    goto LABEL_489;
                                  v236 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                   + 8);
                                  if ((*(_BYTE *)(v236 + 45) & 4) == 0)
                                    v236 = 0;
                                  v237 = *(unsigned int *)(v236 + 47) | ((unint64_t)*(unsigned __int8 *)(v236 + 51) << 32);
                                  if (v237 && (v238 = *(_QWORD *)(v237 + 8)) != 0)
                                  {
                                    if ((*(_BYTE *)(v238 + 45) & 4) != 0)
                                      v239 = v238;
                                    else
                                      v239 = 0;
                                  }
                                  else
                                  {
                                    v239 = 0;
                                  }
                                  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120) != 5)
                                  {
                                    v240 = *(unsigned int *)(v239 + 47);
                                    if (v240 | ((unint64_t)*(unsigned __int8 *)(v239 + 51) << 32)
                                      && (v241 = *(_QWORD *)((v240 | ((unint64_t)*(unsigned __int8 *)(v239 + 51) << 32))
                                                           + 8)) != 0)
                                    {
                                      if ((*(_BYTE *)(v241 + 45) & 4) != 0)
                                        v239 = *(_QWORD *)((v240 | ((unint64_t)*(unsigned __int8 *)(v239 + 51) << 32))
                                                         + 8);
                                      else
                                        v239 = 0;
                                    }
                                    else
                                    {
                                      v239 = 0;
                                    }
                                  }
                                  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 176))(v239)
                                    || (v242 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 1920))(v239)) == 0
                                    || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v242 + 1936))(v242, 1))
                                  {
LABEL_489:
                                    v246 = v166 + v140;
                                    if (!__OFADD__(v166, (_DWORD)v140))
                                    {
LABEL_490:
                                      v166 = v246;
                                      goto LABEL_540;
                                    }
                                    goto LABEL_507;
                                  }
                                }
                                v243 = *(unsigned int *)(a1 + 64);
                                if (v243 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)
                                  && (v244 = *(_QWORD *)((v243 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                       + 8)) != 0)
                                {
                                  if ((*(_BYTE *)(v244 + 45) & 4) != 0)
                                    v245 = *(int **)((v243 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                                  else
                                    v245 = 0;
                                }
                                else
                                {
                                  v245 = 0;
                                }
                                v247 = (*(uint64_t (**)(int *))(*(_QWORD *)v245 + 1480))(v245);
                                if (((v245[31] >> 13) & 6) - 2 < 4)
                                  v248 = v245 + 40;
                                else
                                  v248 = v245 + 41;
                                v249 = 0;
                                v250 = (*v248 + (*v248 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
                                if ((v247 & 0xFF00000000) != 0)
                                  v250 = v247;
                                v251 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                 + 8);
                                if ((*(_BYTE *)(v251 + 45) & 4) == 0)
                                  v251 = 0;
                                v252 = ((unsigned __int16)*(_DWORD *)(v251 + 124) >> 13) - 1;
                                if (v252 <= 4)
                                  v249 = qword_1969FDAA0[v252];
                                v253 = *(_DWORD *)(v251 + 4 * v249 + 168);
                                v38 = __OFADD__(v250, v253);
                                v254 = v250 + v253;
                                if (v38)
                                  v254 = (v250 >> 31) + 0x7FFFFFFF;
                                if (v254 < v149)
                                {
                                  v255 = v149 - v254;
                                  if (__OFSUB__(v149, v254))
                                    v255 = (v149 >> 31) + 0x7FFFFFFF;
                                  v38 = __OFADD__(v166, v255);
                                  v246 = v166 + v255;
                                  if (!v38)
                                    goto LABEL_490;
LABEL_507:
                                  v166 = (v166 >> 31) + 0x7FFFFFFF;
                                }
LABEL_540:
                                v265 = 0;
                                if ((*(_BYTE *)(*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                           + 8)
                                               + 45) & 4) != 0)
                                  v266 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                   + 8);
                                else
                                  v266 = 0;
                                v267 = ((unsigned __int16)*(_DWORD *)(v266 + 124) >> 13) - 1;
                                if (v267 <= 4)
                                  v265 = qword_1969FDAA0[v267];
                                v268 = *(_DWORD *)(v266 + 4 * v265 + 168);
                                v269 = v166 + v268;
                                if (__OFADD__(v166, v268))
                                  v269 = (v166 >> 31) + 0x7FFFFFFF;
                                *(_QWORD *)(v266 + 152) = WebCore::RenderMathMLUnderOver::horizontalOffset((WebCore::RenderMathMLUnderOver *)a1, (const WebCore::RenderBox *)v266) | (unint64_t)(v269 << 32);
                                v270 = *(unsigned int *)(a1 + 64);
                                v271 = v270 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
                                if (v271)
                                {
                                  v272 = *(_QWORD *)((v270 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                                  if (v272 && (*(_BYTE *)(v272 + 45) & 4) == 0)
                                    v272 = 0;
                                }
                                else
                                {
                                  v272 = 0;
                                }
                                if (((*(_DWORD *)(v272 + 124) >> 13) & 6u) - 2 < 4)
                                  v273 = (int *)(v272 + 160);
                                else
                                  v273 = (int *)(v272 + 164);
                                v274 = *v273;
                                v38 = __OFADD__((_DWORD)v269, v274);
                                v275 = v269 + v274;
                                v276 = (v269 >> 31) + 0x7FFFFFFF;
                                if (!v38)
                                  v276 = v275;
                                v277 = *(_QWORD *)(v271 + 8);
                                if ((*(_BYTE *)(v277 + 45) & 4) != 0)
                                  v278 = v277;
                                else
                                  v278 = 0;
                                v279 = ((unsigned __int16)*(_DWORD *)(v278 + 124) >> 13) - 1;
                                if (v279 > 4)
                                  v280 = 2;
                                else
                                  v280 = qword_1969FDAC8[v279];
                                v281 = *(_DWORD *)(v278 + 4 * v280 + 168);
                                v38 = __OFADD__(v276, v281);
                                v282 = v276 + v281;
                                if (v38)
                                  v283 = (v276 >> 31) + 0x7FFFFFFF;
                                else
                                  v283 = v282;
                                v284 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
                                if ((*(_DWORD *)(v284 + 120) | 2) != 6)
                                  goto LABEL_661;
                                if (v150)
                                {
                                  if (*(_BYTE *)(v284 + 160))
                                  {
                                    v285 = *(_DWORD *)(v284 + 156);
                                  }
                                  else
                                  {
                                    v288 = *(_QWORD *)(v284 + 104);
                                    if (v288
                                      && ((v289 = *(_DWORD *)(v288 + 4), (v289 & 1) != 0)
                                        ? (v290 = *(_QWORD *)(v288 + 40), LODWORD(v291) = *(_DWORD *)(v288 + 52))
                                        : (v290 = v288 + 32, LODWORD(v291) = v289 >> 5),
                                          (_DWORD)v291))
                                    {
                                      v291 = v291;
                                      v302 = (uint64_t *)(v290 + 8);
                                      while (1)
                                      {
                                        v303 = *(v302 - 1);
                                        if (v303 == WebCore::MathMLNames::accentunderAttr
                                          || *(_QWORD *)(v303 + 24) == *(_QWORD *)(WebCore::MathMLNames::accentunderAttr
                                                                                 + 24)
                                          && *(_QWORD *)(v303 + 32) == *(_QWORD *)(WebCore::MathMLNames::accentunderAttr
                                                                                 + 32))
                                        {
                                          break;
                                        }
                                        v302 += 2;
                                        if (!--v291)
                                        {
                                          v302 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                                          break;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v302 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                                    }
                                    v304 = *v302;
                                    if (v304 == WebCore::falseAtomData)
                                      v305 = 1;
                                    else
                                      v305 = 2;
                                    if (v304 == WebCore::trueAtomData)
                                      v285 = 0;
                                    else
                                      v285 = v305;
                                    *(_DWORD *)(v284 + 156) = v285;
                                    *(_BYTE *)(v284 + 160) = 1;
                                  }
                                  if (!v285)
                                    goto LABEL_629;
                                  if (v285 != 1)
                                  {
                                    v306 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                     + 8);
                                    if ((*(_BYTE *)(v306 + 45) & 4) == 0)
                                      v306 = 0;
                                    v307 = *(unsigned int *)(v306 + 47) | ((unint64_t)*(unsigned __int8 *)(v306 + 51) << 32);
                                    if (v307 && (v308 = *(_QWORD *)(v307 + 8)) != 0)
                                      v309 = (*(_BYTE *)(v308 + 45) & 4) != 0 ? v308 : 0;
                                    else
                                      v309 = 0;
                                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v309 + 176))(v309))
                                    {
                                      v310 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v309 + 1920))(v309);
                                      if (v310)
                                      {
                                        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v310 + 1936))(v310, 1) & 1) != 0)goto LABEL_629;
                                      }
                                    }
                                  }
                                  v301 = v341;
                                }
                                else
                                {
                                  if (*(unsigned int *)(v278 + 47) | ((unint64_t)*(unsigned __int8 *)(v278 + 51) << 32)
                                    && (v286 = *(_QWORD *)((*(unsigned int *)(v278 + 47) | ((unint64_t)*(unsigned __int8 *)(v278 + 51) << 32))
                                                         + 8)) != 0)
                                  {
                                    if ((*(_BYTE *)(v286 + 45) & 4) != 0)
                                      v287 = *(int **)((*(unsigned int *)(v278 + 47) | ((unint64_t)*(unsigned __int8 *)(v278 + 51) << 32))
                                                     + 8);
                                    else
                                      v287 = 0;
                                  }
                                  else
                                  {
                                    v287 = 0;
                                  }
                                  v292 = (*(uint64_t (**)(int *))(*(_QWORD *)v287 + 1480))(v287);
                                  if (((v287[31] >> 13) & 6) - 2 < 4)
                                    v293 = v287 + 40;
                                  else
                                    v293 = v287 + 41;
                                  v294 = 0;
                                  v295 = (*v293 + (*v293 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
                                  if ((v292 & 0xFF00000000) != 0)
                                    v295 = v292;
                                  v296 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                   + 8);
                                  if ((*(_BYTE *)(v296 + 45) & 4) == 0)
                                    v296 = 0;
                                  v297 = *(_QWORD *)((*(unsigned int *)(v296 + 47) | ((unint64_t)*(unsigned __int8 *)(v296 + 51) << 32))
                                                   + 8);
                                  if ((*(_BYTE *)(v297 + 45) & 4) == 0)
                                    v297 = 0;
                                  v298 = ((unsigned __int16)*(_DWORD *)(v297 + 124) >> 13) - 1;
                                  if (v298 <= 4)
                                    v294 = qword_1969FDAA0[v298];
                                  v299 = *(_DWORD *)(v297 + 4 * v294 + 168);
                                  v38 = __OFADD__(v295, v299);
                                  v300 = v295 + v299;
                                  if (v38)
                                    v300 = (v295 >> 31) + 0x7FFFFFFF;
                                  v301 = v340 - v300;
                                  if (__OFSUB__(v340, v300))
                                    v301 = (v340 >> 31) + 0x7FFFFFFF;
                                  if (v341 > v301)
                                    v301 = v341;
                                }
                                v38 = __OFADD__(v283, v301);
                                v311 = v283 + v301;
                                if (v38)
                                  v283 = (v283 >> 31) + 0x7FFFFFFF;
                                else
                                  v283 = v311;
LABEL_629:
                                v312 = 0;
                                v313 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                 + 8);
                                if ((*(_BYTE *)(v313 + 45) & 4) == 0)
                                  v313 = 0;
                                v314 = *(_QWORD *)((*(unsigned int *)(v313 + 47) | ((unint64_t)*(unsigned __int8 *)(v313 + 51) << 32))
                                                 + 8);
                                if ((*(_BYTE *)(v314 + 45) & 4) != 0)
                                  v315 = v314;
                                else
                                  v315 = 0;
                                v316 = ((unsigned __int16)*(_DWORD *)(v315 + 124) >> 13) - 1;
                                if (v316 <= 4)
                                  v312 = qword_1969FDAA0[v316];
                                v317 = *(_DWORD *)(v315 + 4 * v312 + 168);
                                v318 = v283 + v317;
                                if (__OFADD__(v283, v317))
                                  v318 = (v283 >> 31) + 0x7FFFFFFF;
                                *(_QWORD *)(v315 + 152) = WebCore::RenderMathMLUnderOver::horizontalOffset((WebCore::RenderMathMLUnderOver *)a1, (const WebCore::RenderBox *)v315) | (unint64_t)(v318 << 32);
                                v319 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                                 + 8);
                                if ((*(_BYTE *)(v319 + 45) & 4) == 0)
                                  v319 = 0;
                                v320 = *(unsigned int *)(v319 + 47) | ((unint64_t)*(unsigned __int8 *)(v319 + 51) << 32);
                                if (v320)
                                {
                                  v321 = *(_QWORD *)(v320 + 8);
                                  if (v321 && (*(_BYTE *)(v321 + 45) & 4) == 0)
                                    v321 = 0;
                                }
                                else
                                {
                                  v321 = 0;
                                }
                                if (((*(_DWORD *)(v321 + 124) >> 13) & 6u) - 2 < 4)
                                  v322 = (int *)(v321 + 160);
                                else
                                  v322 = (int *)(v321 + 164);
                                v323 = *v322;
                                v324 = v318 + v323;
                                if (__OFADD__((_DWORD)v318, v323))
                                  v324 = (v318 >> 31) + 0x7FFFFFFF;
                                v325 = *(_QWORD *)(v320 + 8);
                                if ((*(_BYTE *)(v325 + 45) & 4) == 0)
                                  v325 = 0;
                                v326 = ((unsigned __int16)*(_DWORD *)(v325 + 124) >> 13) - 1;
                                if (v326 > 4)
                                  v327 = 2;
                                else
                                  v327 = qword_1969FDAC8[v326];
                                v328 = *(_DWORD *)(v325 + 4 * v327 + 168);
                                v38 = __OFADD__(v324, v328);
                                v329 = v324 + v328;
                                if (v38)
                                  v329 = (v324 >> 31) + 0x7FFFFFFF;
                                v283 = v329 + v342;
                                if (__OFADD__(v329, v342))
                                  v283 = (v329 >> 31) + 0x7FFFFFFF;
LABEL_661:
                                v330 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
                                v331 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
                                v332 = v330 + v331;
                                if (__OFADD__(v330, v331))
                                  v332 = (v330 >> 31) + 0x7FFFFFFF;
                                v38 = __OFADD__(v283, v332);
                                v333 = v283 + v332;
                                if (v38)
                                  v333 = (v283 >> 31) + 0x7FFFFFFF;
                                if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                                  v334 = (int *)(a1 + 160);
                                else
                                  v334 = (int *)(a1 + 164);
                                *v334 = v333;
                                WebCore::RenderBlock::layoutPositionedObjects(a1);
                                if ((*(_BYTE *)(a1 + 22) & 1) != 0)
                                {
                                  v336 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
                                  if ((v336 > 5 || ((1 << v336) & 0x2A) == 0)
                                    && (v337 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                                                              + 8)
                                                                                  + 1944)
                                                                      + 248)
                                                          + 528)) != 0
                                    && *v337)
                                  {
                                    WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v337 + 2), (_QWORD *)a1, (uint64_t)&v348);
                                  }
                                  else
                                  {
                                    v338 = *(_QWORD *)(a1 + 144);
                                    if (v338)
                                    {
                                      WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
                                      v339 = *(WebCore::RenderLayerScrollableArea **)(v338 + 264);
                                      if (v339)
                                        WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v339);
                                    }
                                  }
                                }
                                v335 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
                                *(_DWORD *)(a1 + 20) = v335;
                                if ((*(_BYTE *)(a1 + 45) & 2) == 0)
                                {
                                  *(_WORD *)(a1 + 69) &= ~1u;
                                  *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                                                   * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944) + 248)
                                                                                              + 472));
                                }
                                *(_DWORD *)(a1 + 20) = v335 & 0xFFDFFE07;
                                return;
                              }
                              if ((v198 & 0xFFFFFFFFFFLL) != 0
                                && (v201 = *(_QWORD *)((v198 & 0xFFFFFFFFFFLL) + 8)) != 0)
                              {
                                if ((*(_BYTE *)(v201 + 45) & 4) != 0)
                                  v202 = *(_QWORD *)((v198 & 0xFFFFFFFFFFLL) + 8);
                                else
                                  v202 = 0;
                              }
                              else
                              {
                                v202 = 0;
                              }
                              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120) != 5)
                              {
                                v217 = *(unsigned int *)(v202 + 47);
                                if (v217 | ((unint64_t)*(unsigned __int8 *)(v202 + 51) << 32)
                                  && (v218 = *(_QWORD *)((v217 | ((unint64_t)*(unsigned __int8 *)(v202 + 51) << 32))
                                                       + 8)) != 0)
                                {
                                  if ((*(_BYTE *)(v218 + 45) & 4) != 0)
                                    v202 = *(_QWORD *)((v217 | ((unint64_t)*(unsigned __int8 *)(v202 + 51) << 32))
                                                     + 8);
                                  else
                                    v202 = 0;
                                }
                                else
                                {
                                  v202 = 0;
                                }
                              }
                              v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 1480))(v202);
                              if (((*(_DWORD *)(v202 + 124) >> 13) & 6u) - 2 < 4)
                                v220 = (int *)(v202 + 160);
                              else
                                v220 = (int *)(v202 + 164);
                              v221 = (*v220 + (*v220 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
                              if ((v219 & 0xFF00000000) != 0)
                                v222 = v219;
                              else
                                v222 = v221;
                              v223 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                               + 8);
                              if ((*(_BYTE *)(v223 + 45) & 4) == 0)
                                v223 = 0;
                              v224 = *(unsigned int *)(v223 + 47) | ((unint64_t)*(unsigned __int8 *)(v223 + 51) << 32);
                              if (v224)
                              {
                                v225 = *(_QWORD *)((*(unsigned int *)(v223 + 47) | ((unint64_t)*(unsigned __int8 *)(v223 + 51) << 32))
                                                 + 8);
                                if (v225 && (*(_BYTE *)(v225 + 45) & 4) == 0)
                                  v225 = 0;
                              }
                              else
                              {
                                v225 = 0;
                              }
                              v226 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120);
                              if (v226 != 5)
                              {
                                v225 = *(_QWORD *)((*(unsigned int *)(v225 + 47) | ((unint64_t)*(unsigned __int8 *)(v225 + 51) << 32))
                                                 + 8);
                                if ((*(_BYTE *)(v225 + 45) & 4) == 0)
                                  v225 = 0;
                              }
                              v227 = ((unsigned __int16)*(_DWORD *)(v225 + 124) >> 13) - 1;
                              if (v227 > 4)
                                v228 = 0;
                              else
                                v228 = qword_1969FDAA0[v227];
                              v229 = *(_DWORD *)(v225 + 4 * v228 + 168);
                              v38 = __OFADD__(v222, v229);
                              v230 = v222 + v229;
                              if (v38)
                              {
                                v230 = (v222 >> 31) + 0x7FFFFFFF;
                                if (v224)
                                  goto LABEL_443;
                              }
                              else if (v224)
                              {
LABEL_443:
                                v231 = *(_QWORD *)(v224 + 8);
                                if (v231 && (*(_BYTE *)(v231 + 45) & 4) == 0)
                                  v231 = 0;
LABEL_513:
                                if (v226 != 5)
                                {
                                  v231 = *(unsigned int *)(v231 + 47) | ((unint64_t)*(unsigned __int8 *)(v231 + 51) << 32);
                                  if (v231)
                                  {
                                    v231 = *(_QWORD *)(v231 + 8);
                                    if (v231)
                                    {
                                      if ((*(_BYTE *)(v231 + 45) & 4) == 0)
                                        v231 = 0;
                                    }
                                  }
                                }
                                if (((*(_DWORD *)(v231 + 124) >> 13) & 6u) - 2 < 4)
                                {
                                  v256 = (unsigned int *)(v231 + 160);
                                  if (v224)
                                    goto LABEL_520;
                                }
                                else
                                {
                                  v256 = (unsigned int *)(v231 + 164);
                                  if (v224)
                                  {
LABEL_520:
                                    v224 = *(_QWORD *)(v224 + 8);
                                    if (v224 && (*(_BYTE *)(v224 + 45) & 4) == 0)
                                      v224 = 0;
                                  }
                                }
                                if (v226 != 5)
                                {
                                  v224 = *(_QWORD *)((*(unsigned int *)(v224 + 47) | ((unint64_t)*(unsigned __int8 *)(v224 + 51) << 32))
                                                   + 8);
                                  if ((*(_BYTE *)(v224 + 45) & 4) == 0)
                                    v224 = 0;
                                }
                                v257 = *v256;
                                v258 = ((unsigned __int16)*(_DWORD *)(v224 + 124) >> 13) - 1;
                                if (v258 > 4)
                                  v259 = 2;
                                else
                                  v259 = qword_1969FDAC8[v258];
                                v260 = *(_DWORD *)(v224 + 4 * v259 + 168);
                                v261 = v257 + v260;
                                if (__OFADD__(v257, v260))
                                  v261 = (v257 >> 31) + 0x7FFFFFFF;
                                v262 = v261 + v140;
                                if (__OFADD__(v261, (_DWORD)v140))
                                  v262 = (v261 >> 31) + 0x7FFFFFFF;
                                v263 = v230 + v151;
                                if (__OFADD__(v230, v151))
                                  v263 = (v230 >> 31) + 0x7FFFFFFF;
                                if (v262 <= v263)
                                  v264 = v263;
                                else
                                  v264 = v262;
                                v166 = v175 + v264;
                                if (__OFADD__((_DWORD)v175, v264))
                                  v166 = (v175 >> 31) + 0x7FFFFFFF;
                                goto LABEL_540;
                              }
                              v231 = 0;
                              goto LABEL_513;
                            }
LABEL_354:
                            v177 = 0;
                            goto LABEL_355;
                          }
                          v129 = v127;
                          ++*(_DWORD *)v127;
                          v130 = *(unsigned int *)(a1 + 64);
                          if (v130 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)
                            && (v131 = *(_QWORD *)((v130 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)) != 0)
                          {
                            if ((*(_BYTE *)(v131 + 45) & 4) != 0)
                              v132 = *(_QWORD *)((v130 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                            else
                              v132 = 0;
                          }
                          else
                          {
                            v132 = 0;
                          }
                          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 176))(v132))
                          {
                            v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 1920))(v132);
                            if (v133)
                            {
                              v134 = v133;
                              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 1936))(v133, 4))
                              {
                                WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                                v136 = v135 * 64.0;
                                if (v136 >= 2147483650.0)
                                {
                                  v137 = 0x7FFFFFFF;
                                }
                                else if (v136 <= -2147483650.0)
                                {
                                  v137 = 0x80000000;
                                }
                                else
                                {
                                  v137 = (int)v136;
                                }
                                v341 = v137;
                                WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                                v139 = v138 * 64.0;
                                if (v139 >= 2147483650.0)
                                {
                                  LODWORD(v140) = 0x7FFFFFFF;
                                }
                                else if (v139 <= -2147483650.0)
                                {
                                  LODWORD(v140) = 0x80000000;
                                }
                                else
                                {
                                  LODWORD(v140) = (int)v139;
                                }
                                WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                                v142 = v141 * 64.0;
                                if (v142 >= 2147483650.0)
                                {
                                  v143 = 0x7FFFFFFF;
                                }
                                else if (v142 <= -2147483650.0)
                                {
                                  v143 = 0x80000000;
                                }
                                else
                                {
                                  v143 = (int)v142;
                                }
                                v340 = v143;
                                v144 = (uint64_t)v129;
LABEL_273:
                                WebCore::OpenTypeMathData::getMathConstant(v144);
                                v147 = v146 * 64.0;
                                if (v147 >= 2147483650.0)
                                {
                                  v342 = 0;
                                  v148 = 0;
                                  v149 = 0;
                                  v150 = 0;
                                  v151 = 0x7FFFFFFF;
                                }
                                else
                                {
                                  v342 = 0;
                                  v148 = 0;
                                  v149 = 0;
                                  v150 = 0;
                                  if (v147 <= -2147483650.0)
                                    v151 = 0x80000000;
                                  else
                                    v151 = (int)v147;
                                }
LABEL_294:
                                if (*(_DWORD *)v129 == 1)
                                {
                                  WebCore::OpenTypeMathData::~OpenTypeMathData(v129, v145);
                                  WTF::fastFree(v180, v181);
                                }
                                else
                                {
                                  --*(_DWORD *)v129;
                                }
                                goto LABEL_296;
                              }
                              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v134 + 1952))(v134)
                                && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 1936))(v134, 32)&& ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 1944))(v134) & 1) == 0)
                              {
                                WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                                v183 = v182 * 64.0;
                                if (v183 >= 2147483650.0)
                                {
                                  v184 = 0x7FFFFFFF;
                                }
                                else if (v183 <= -2147483650.0)
                                {
                                  v184 = 0x80000000;
                                }
                                else
                                {
                                  v184 = (int)v183;
                                }
                                v341 = v184;
                                WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                                v186 = v185 * 64.0;
                                if (v186 >= 2147483650.0)
                                {
                                  LODWORD(v140) = 0x7FFFFFFF;
                                }
                                else if (v186 <= -2147483650.0)
                                {
                                  LODWORD(v140) = 0x80000000;
                                }
                                else
                                {
                                  LODWORD(v140) = (int)v186;
                                }
                                WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                                v188 = v187 * 64.0;
                                if (v188 >= 2147483650.0)
                                {
                                  v189 = 0x7FFFFFFF;
                                }
                                else if (v188 <= -2147483650.0)
                                {
                                  v189 = 0x80000000;
                                }
                                else
                                {
                                  v189 = (int)v188;
                                }
                                v340 = v189;
                                v144 = (uint64_t)v129;
                                goto LABEL_273;
                              }
                            }
                          }
                          WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                          v153 = v152 * 64.0;
                          if (v153 >= 2147483650.0)
                          {
                            v154 = 0x7FFFFFFF;
                          }
                          else if (v153 <= -2147483650.0)
                          {
                            v154 = 0x80000000;
                          }
                          else
                          {
                            v154 = (int)v153;
                          }
                          v341 = v154;
                          WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                          v156 = v155 * 64.0;
                          if (v156 >= 2147483650.0)
                          {
                            LODWORD(v140) = 0x7FFFFFFF;
                          }
                          else if (v156 <= -2147483650.0)
                          {
                            LODWORD(v140) = 0x80000000;
                          }
                          else
                          {
                            LODWORD(v140) = (int)v156;
                          }
                          WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                          v158 = v157 * 64.0;
                          if (v158 >= 2147483650.0)
                          {
                            v159 = 0x7FFFFFFF;
                          }
                          else if (v158 <= -2147483650.0)
                          {
                            v159 = 0x80000000;
                          }
                          else
                          {
                            v159 = (int)v158;
                          }
                          v342 = v159;
                          WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                          v161 = v160 * 64.0;
                          if (v161 >= 2147483650.0)
                          {
                            v148 = 0x7FFFFFFF;
                          }
                          else if (v161 <= -2147483650.0)
                          {
                            v148 = 0x80000000;
                          }
                          else
                          {
                            v148 = (int)v161;
                          }
                          WebCore::OpenTypeMathData::getMathConstant((uint64_t)v129);
                          v163 = v162 * 64.0;
                          if (v163 >= 2147483650.0)
                          {
                            v340 = 0;
                            v151 = 0;
                            v150 = 1;
                            v149 = 0x7FFFFFFF;
                          }
                          else
                          {
                            v340 = 0;
                            v151 = 0;
                            if (v163 <= -2147483650.0)
                            {
                              v150 = 1;
                              v149 = 0x80000000;
                            }
                            else
                            {
                              v149 = (int)v163;
                              v150 = 1;
                            }
                          }
                          goto LABEL_294;
                        }
                        v92 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
                                        + 8);
                        if ((*(_BYTE *)(v92 + 45) & 4) == 0)
                          v92 = 0;
                        v93 = *(unsigned int *)(v92 + 47) | ((unint64_t)*(unsigned __int8 *)(v92 + 51) << 32);
                        if (v93)
                        {
                          v94 = *(_QWORD *)(v93 + 8);
                          if (v94 && (*(_BYTE *)(v94 + 45) & 4) == 0)
                            v94 = 0;
                        }
                        else
                        {
                          v94 = 0;
                        }
                        if (((*(_DWORD *)(v94 + 124) >> 13) & 6u) - 2 < 4)
                        {
                          v95 = (unsigned int *)(v94 + 164);
                          if (!v93)
                            goto LABEL_200;
                        }
                        else
                        {
                          v95 = (unsigned int *)(v94 + 160);
                          if (!v93)
                            goto LABEL_200;
                        }
                        v96 = *(_QWORD *)(v93 + 8);
                        if (v96)
                        {
                          if ((*(_BYTE *)(v96 + 45) & 4) != 0)
                            v97 = v96;
                          else
                            v97 = 0;
                          goto LABEL_201;
                        }
LABEL_200:
                        v97 = 0;
LABEL_201:
                        v98 = *v95;
                        v99 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 1128))(v97, 0);
                        v100 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 1136))(v97, 0);
                        v101 = v99 + v100;
                        if (__OFADD__(v99, v100))
                          v101 = (v99 >> 31) + 0x7FFFFFFF;
                        v38 = __OFADD__(v98, v101);
                        v102 = v98 + v101;
                        if (v38)
                          v102 = (v98 >> 31) + 0x7FFFFFFF;
                        if (v90 <= v102)
                          v90 = v102;
                        v91 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 120);
                        goto LABEL_208;
                      }
LABEL_179:
                      v85 = 0;
                      goto LABEL_180;
                    }
                  }
                }
                else if (!v14)
                {
                  goto LABEL_46;
                }
              }
            }
          }
        }
      }
    }
    WebCore::RenderMathMLBlock::layoutInvalidMarkup((WebCore::RenderMathMLBlock *)a1);
  }
}

void WebCore::computeRoundedRectForBoxShape(int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::RenderStyle *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char hasBorderRadius;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float RoundedBorderFor;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  double v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  double v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  double v61;
  uint64_t v62;
  int v63;
  double v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  double v72;
  uint64_t v73;
  int v74;
  double v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  double v87;
  int v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unint64_t v96;
  float v97;
  __int128 v98;
  float v99;
  float v100;
  float v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD v107[2];
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  __int128 v118;
  __int128 v119;

  v5 = (WebCore::RenderStyle *)(a2 + 10);
  switch(a1)
  {
    case 1:
      hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(a2 + 10));
      v19 = WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth((WebCore::RenderBoxModelObject *)a2, (const WebCore::Length *)(*(_QWORD *)(a2[11] + 24) + 64));
      v20 = WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth((WebCore::RenderBoxModelObject *)a2, (const WebCore::Length *)(*(_QWORD *)(a2[11] + 24) + 48));
      v21 = WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth((WebCore::RenderBoxModelObject *)a2, (const WebCore::Length *)(*(_QWORD *)(a2[11] + 24) + 40));
      v22 = WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth((WebCore::RenderBoxModelObject *)a2, (const WebCore::Length *)(*(_QWORD *)(a2[11] + 24) + 56));
      v23 = a2[20];
      v24 = v23 + v19;
      v25 = __OFADD__((_DWORD)v23, v19);
      v26 = HIDWORD(v23);
      if ((hasBorderRadius & 1) != 0)
      {
        if (v25)
          v24 = (v23 >> 31) + 0x7FFFFFFF;
        v27 = v24 + v20;
        if (__OFADD__(v24, v20))
          v27 = (v24 >> 31) + 0x7FFFFFFF;
        v28 = HIDWORD(v23) + v21;
        v105 = v27;
        if (__OFADD__(HIDWORD(v23), v21))
          v28 = (HIDWORD(v23) >> 31) + 0x7FFFFFFF;
        v29 = v28 + v22;
        if (__OFADD__(v28, v22))
          v29 = (v28 >> 31) + 0x7FFFFFFF;
        if (v21 == 0x80000000)
          v30 = 0x7FFFFFFFLL;
        else
          v30 = -v21;
        if (v19 == 0x80000000)
          v31 = 0x7FFFFFFFLL;
        else
          v31 = -v19;
        v107[0] = 0;
        v107[1] = v23;
        RoundedBorderFor = WebCore::RenderStyle::getRoundedBorderFor(v5, (const WebCore::LayoutRect *)v107, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v108);
        v33 = (*(uint64_t (**)(_QWORD *, float))(*a2 + 1096))(a2, RoundedBorderFor);
        v34 = (*(uint64_t (**)(_QWORD *))(*a2 + 1080))(a2);
        v36 = v110;
        v35 = v111;
        if (v33)
        {
          v37 = ((uint64_t)v110 << 6) / v33;
          if (v37 <= (uint64_t)0xFFFFFFFF80000000)
            v37 = 0xFFFFFFFF80000000;
          if (v37 >= 0x7FFFFFFF)
            LODWORD(v37) = 0x7FFFFFFF;
          if ((int)v37 > 63)
          {
            if (__OFADD__(v110, v33))
              v36 = (v110 >> 31) + 0x7FFFFFFF;
            else
              v36 = v110 + v33;
          }
          else
          {
            v38 = __OFSUB__((_DWORD)v37, 64);
            v39 = v37 - 64;
            if (v38)
              v39 = 0x80000000;
            v40 = ((double)v36 * 0.015625 + (double)v33 * 0.015625 * (pow((double)v39 * 0.015625, 3.0) + 1.0)) * 64.0;
            if (v40 >= 2147483650.0)
            {
              v36 = 0x7FFFFFFF;
            }
            else if (v40 <= -2147483650.0)
            {
              v36 = 0x80000000;
            }
            else
            {
              v36 = (int)v40;
            }
          }
        }
        v102 = v36;
        if (v34)
        {
          v51 = ((uint64_t)(int)v35 << 6) / v34;
          if (v51 <= (uint64_t)0xFFFFFFFF80000000)
            v51 = 0xFFFFFFFF80000000;
          if (v51 >= 0x7FFFFFFF)
            LODWORD(v51) = 0x7FFFFFFF;
          if ((int)v51 > 63)
          {
            v54 = (v35 + v34);
            if (__OFADD__((_DWORD)v35, v34))
              v54 = (v35 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v38 = __OFSUB__((_DWORD)v51, 64);
            v52 = v51 - 64;
            if (v38)
              v52 = 0x80000000;
            v53 = ((double)(int)v35 * 0.015625 + (double)v34 * 0.015625 * (pow((double)v52 * 0.015625, 3.0) + 1.0))
                * 64.0;
            if (v53 >= 2147483650.0)
            {
              v54 = 0x7FFFFFFFLL;
            }
            else if (v53 <= -2147483650.0)
            {
              v54 = 0x80000000;
            }
            else
            {
              v54 = (int)v53;
            }
          }
          v106 = v54;
        }
        else
        {
          v106 = v35;
        }
        v55 = (*(uint64_t (**)(_QWORD *))(*a2 + 1104))(a2);
        v56 = (*(uint64_t (**)(_QWORD *))(*a2 + 1080))(a2);
        v57 = v112;
        v58 = v113;
        if (v55)
        {
          v59 = ((uint64_t)v112 << 6) / v55;
          if (v59 <= (uint64_t)0xFFFFFFFF80000000)
            v59 = 0xFFFFFFFF80000000;
          if (v59 >= 0x7FFFFFFF)
            LODWORD(v59) = 0x7FFFFFFF;
          if ((int)v59 > 63)
          {
            if (__OFADD__(v112, v55))
              v57 = (v112 >> 31) + 0x7FFFFFFF;
            else
              v57 = v112 + v55;
          }
          else
          {
            v38 = __OFSUB__((_DWORD)v59, 64);
            v60 = v59 - 64;
            if (v38)
              v60 = 0x80000000;
            v61 = ((double)v57 * 0.015625 + (double)v55 * 0.015625 * (pow((double)v60 * 0.015625, 3.0) + 1.0)) * 64.0;
            if (v61 >= 2147483650.0)
            {
              v57 = 0x7FFFFFFF;
            }
            else if (v61 <= -2147483650.0)
            {
              v57 = 0x80000000;
            }
            else
            {
              v57 = (int)v61;
            }
          }
        }
        v103 = v31;
        v104 = v30;
        if (v56)
        {
          v62 = ((uint64_t)(int)v58 << 6) / v56;
          if (v62 <= (uint64_t)0xFFFFFFFF80000000)
            v62 = 0xFFFFFFFF80000000;
          if (v62 >= 0x7FFFFFFF)
            LODWORD(v62) = 0x7FFFFFFF;
          if ((int)v62 > 63)
          {
            v65 = (v58 + v56);
            if (__OFADD__((_DWORD)v58, v56))
              v65 = (v58 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v38 = __OFSUB__((_DWORD)v62, 64);
            v63 = v62 - 64;
            if (v38)
              v63 = 0x80000000;
            v64 = ((double)(int)v58 * 0.015625 + (double)v56 * 0.015625 * (pow((double)v63 * 0.015625, 3.0) + 1.0))
                * 64.0;
            if (v64 >= 2147483650.0)
            {
              v65 = 0x7FFFFFFFLL;
            }
            else if (v64 <= -2147483650.0)
            {
              v65 = 0x80000000;
            }
            else
            {
              v65 = (int)v64;
            }
          }
        }
        else
        {
          v65 = v58;
        }
        v66 = (*(uint64_t (**)(_QWORD *))(*a2 + 1096))(a2);
        v67 = (*(uint64_t (**)(_QWORD *))(*a2 + 1088))(a2);
        v68 = v114;
        v69 = v115;
        if (v66)
        {
          v70 = ((uint64_t)v114 << 6) / v66;
          if (v70 <= (uint64_t)0xFFFFFFFF80000000)
            v70 = 0xFFFFFFFF80000000;
          if (v70 >= 0x7FFFFFFF)
            LODWORD(v70) = 0x7FFFFFFF;
          if ((int)v70 > 63)
          {
            if (__OFADD__(v114, v66))
              v68 = (v114 >> 31) + 0x7FFFFFFF;
            else
              v68 = v114 + v66;
          }
          else
          {
            v38 = __OFSUB__((_DWORD)v70, 64);
            v71 = v70 - 64;
            if (v38)
              v71 = 0x80000000;
            v72 = ((double)v68 * 0.015625 + (double)v66 * 0.015625 * (pow((double)v71 * 0.015625, 3.0) + 1.0)) * 64.0;
            if (v72 >= 2147483650.0)
            {
              v68 = 0x7FFFFFFF;
            }
            else if (v72 <= -2147483650.0)
            {
              v68 = 0x80000000;
            }
            else
            {
              v68 = (int)v72;
            }
          }
        }
        if (v67)
        {
          v73 = ((uint64_t)(int)v69 << 6) / v67;
          if (v73 <= (uint64_t)0xFFFFFFFF80000000)
            v73 = 0xFFFFFFFF80000000;
          if (v73 >= 0x7FFFFFFF)
            LODWORD(v73) = 0x7FFFFFFF;
          if ((int)v73 > 63)
          {
            v76 = (v69 + v67);
            if (__OFADD__((_DWORD)v69, v67))
              v76 = (v69 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v38 = __OFSUB__((_DWORD)v73, 64);
            v74 = v73 - 64;
            if (v38)
              v74 = 0x80000000;
            v75 = ((double)(int)v69 * 0.015625 + (double)v67 * 0.015625 * (pow((double)v74 * 0.015625, 3.0) + 1.0))
                * 64.0;
            if (v75 >= 2147483650.0)
            {
              v76 = 0x7FFFFFFFLL;
            }
            else if (v75 <= -2147483650.0)
            {
              v76 = 0x80000000;
            }
            else
            {
              v76 = (int)v75;
            }
          }
        }
        else
        {
          v76 = v69;
        }
        v77 = (*(uint64_t (**)(_QWORD *))(*a2 + 1104))(a2);
        v78 = (*(uint64_t (**)(_QWORD *))(*a2 + 1088))(a2);
        v79 = v116;
        v80 = v117;
        if (v77)
        {
          v81 = 0xFFFFFFFF80000000;
          if (((uint64_t)v116 << 6) / v77 > (uint64_t)0xFFFFFFFF80000000)
            v81 = ((uint64_t)v116 << 6) / v77;
          if (v81 >= 0x7FFFFFFF)
            LODWORD(v81) = 0x7FFFFFFF;
          if ((int)v81 > 63)
          {
            if (__OFADD__(v116, v77))
              v79 = (v116 >> 31) + 0x7FFFFFFF;
            else
              v79 = v116 + v77;
          }
          else
          {
            v82 = v81 - 64;
            if (__OFSUB__((_DWORD)v81, 64))
              v82 = 0x80000000;
            v83 = ((double)v79 * 0.015625 + (double)v77 * 0.015625 * (pow((double)v82 * 0.015625, 3.0) + 1.0)) * 64.0;
            if (v83 < 2147483650.0)
            {
              v84 = v106;
              if (v83 > -2147483650.0)
              {
                v79 = (int)v83;
                if (!v78)
                  goto LABEL_189;
LABEL_157:
                v85 = ((uint64_t)(int)v80 << 6) / v78;
                if (v85 <= (uint64_t)0xFFFFFFFF80000000)
                  v85 = 0xFFFFFFFF80000000;
                if (v85 >= 0x7FFFFFFF)
                  LODWORD(v85) = 0x7FFFFFFF;
                if ((int)v85 > 63)
                {
                  v89 = (v80 + v78);
                  if (__OFADD__((_DWORD)v80, v78))
                    v89 = (v80 >> 31) + 0x7FFFFFFF;
                }
                else
                {
                  v38 = __OFSUB__((_DWORD)v85, 64);
                  v86 = v85 - 64;
                  if (v38)
                    v86 = 0x80000000;
                  v87 = ((double)(int)v80 * 0.015625 + (double)v78 * 0.015625 * (pow((double)v86 * 0.015625, 3.0) + 1.0))
                      * 64.0;
                  if (v87 < 2147483650.0)
                  {
                    v88 = v105;
                    if (v87 <= -2147483650.0)
                      v89 = 0x80000000;
                    else
                      v89 = (int)v87;
                    goto LABEL_191;
                  }
                  v89 = 0x7FFFFFFFLL;
                }
LABEL_190:
                v88 = v105;
LABEL_191:
                *(_QWORD *)&v118 = v102 | (unint64_t)(v84 << 32);
                *((_QWORD *)&v118 + 1) = v57 | (unint64_t)(v65 << 32);
                *(_QWORD *)&v119 = v68 | (unint64_t)(v76 << 32);
                *((_QWORD *)&v119 + 1) = v79 | (unint64_t)(v89 << 32);
                v90 = (float)v88 * 0.015625;
                v91 = (float)((float)v102 * 0.015625) + (float)((float)v57 * 0.015625);
                v92 = 1.0;
                if (v91 > v90)
                {
                  v92 = v90 / v91;
                  if ((float)(v90 / v91) > 1.0)
                    v92 = 1.0;
                }
                v93 = (float)(int)v29 * 0.015625;
                v94 = (float)((float)v68 * 0.015625) + (float)((float)v79 * 0.015625);
                if (v94 > v90)
                {
                  v99 = v90 / v94;
                  if (v92 >= v99)
                    v92 = v99;
                }
                v95 = (float)((float)(int)v84 * 0.015625) + (float)((float)(int)v76 * 0.015625);
                if (v95 > v93)
                {
                  v100 = v93 / v95;
                  if (v92 >= v100)
                    v92 = v100;
                }
                v96 = v88 | (unint64_t)(v29 << 32);
                v97 = (float)((float)(int)v65 * 0.015625) + (float)((float)(int)v89 * 0.015625);
                if (v97 > v93)
                {
                  v101 = v93 / v97;
                  if (v92 >= v101)
                    v92 = v101;
                }
                WebCore::RoundedRectRadii::scale((int *)&v118, v92);
                *(_QWORD *)a3 = v103 | (v104 << 32);
                *(_QWORD *)(a3 + 8) = v96;
                v98 = v119;
                *(_OWORD *)(a3 + 16) = v118;
                *(_OWORD *)(a3 + 32) = v98;
                return;
              }
              v79 = 0x80000000;
              if (v78)
                goto LABEL_157;
LABEL_189:
              v89 = v80;
              goto LABEL_190;
            }
            v79 = 0x7FFFFFFF;
          }
        }
        v84 = v106;
        if (v78)
          goto LABEL_157;
        goto LABEL_189;
      }
      v42 = (v23 >> 31) + 0x7FFFFFFF;
      if (!v25)
        v42 = v24;
      v38 = __OFADD__(v42, v20);
      v43 = v42 + v20;
      LODWORD(v44) = (v42 >> 31) + 0x7FFFFFFF;
      if (v38)
        v44 = v44;
      else
        v44 = v43;
      v38 = __OFADD__((_DWORD)v26, v21);
      v45 = v26 + v21;
      v46 = (v26 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v46 = v45;
      v38 = __OFADD__(v46, v22);
      v47 = v46 + v22;
      LODWORD(v48) = (v46 >> 31) + 0x7FFFFFFF;
      if (v38)
        v48 = v48;
      else
        v48 = v47;
      if (v21 == 0x80000000)
        v49 = 0x7FFFFFFFLL;
      else
        v49 = -v21;
      if (v19 == 0x80000000)
        v50 = 0x7FFFFFFFLL;
      else
        v50 = -v19;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_QWORD *)a3 = v50 | (v49 << 32);
      *(_QWORD *)(a3 + 8) = v44 | (v48 << 32);
      return;
    case 3:
      v41 = a2[20];
      v108 = 0;
      v109 = v41;
      WebCore::RenderStyle::getRoundedInnerBorderFor(v5, (const WebCore::LayoutRect *)&v108, 1, 1, a3);
      return;
    case 4:
    case 5:
      v7 = a2[20];
      v108 = 0;
      v109 = v7;
      v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 992))(a2);
      v10 = v9;
      v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 920))(a2);
      if (__OFADD__((_DWORD)v8, (_DWORD)v11))
        v14 = (v8 >> 31) + 0x7FFFFFFF;
      else
        v14 = v8 + v11;
      if (__OFADD__((_DWORD)v10, v12))
        v15 = (v10 >> 31) + 0x7FFFFFFF;
      else
        v15 = v10 + v12;
      if (__OFADD__(HIDWORD(v10), v13))
        v16 = (HIDWORD(v10) >> 31) + 0x7FFFFFFF;
      else
        v16 = HIDWORD(v10) + v13;
      if (__OFADD__(HIDWORD(v8), HIDWORD(v11)))
        v17 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
      else
        v17 = HIDWORD(v8) + HIDWORD(v11);
      WebCore::RenderStyle::getRoundedInnerBorderFor((uint64_t)v5, (int *)&v108, v14, v15, v16, v17, 1, 1, a3);
      return;
    default:
      v6 = a2[20];
      v108 = 0;
      v109 = v6;
      WebCore::RenderStyle::getRoundedBorderFor(v5, (const WebCore::LayoutRect *)&v108, (const WebCore::LayoutSize *)1, 1, a3);
      return;
  }
}

uint64_t WebCore::BoxShape::shapeMarginLogicalBoundingBox(WebCore::BoxShape *this)
{
  float v1;
  float v2;
  float v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *((float *)this + 6);
  v3 = *((float *)this + 4);
  v2 = *((float *)this + 5);
  if (v3 > 0.0)
  {
    v2 = v2 - v3;
    v1 = v1 - v3;
  }
  v4 = v2 * 64.0;
  v5 = 0x7FFFFFFFLL;
  v6 = 0x80000000;
  if (v4 > -2147483650.0)
    v6 = (int)v4;
  if (v4 < 2147483650.0)
    v5 = v6;
  v7 = v1 * 64.0;
  v8 = 0x7FFFFFFF00000000;
  v9 = 0x8000000000000000;
  if (v7 > -2147483650.0)
    v9 = (unint64_t)(int)v7 << 32;
  if (v7 < 2147483650.0)
    v8 = v9;
  return v8 | v5;
}

unint64_t WebCore::BoxShape::getExcludedInterval(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  __int128 v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  int v14;
  float v16;
  int v18;
  int v19;
  _BOOL4 isZero;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v30;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v8 = *(_OWORD *)(a1 + 36);
  v33 = *(_OWORD *)(a1 + 20);
  v34 = v8;
  v35 = *(_OWORD *)(a1 + 52);
  LODWORD(a6) = *(_DWORD *)(a1 + 16);
  v9 = *((float *)&v33 + 2);
  if (*(float *)&a6 <= 0.0)
  {
    v10 = *((float *)&v33 + 3);
  }
  else
  {
    v9 = *(float *)&a6 + (float)(*(float *)&a6 + *((float *)&v33 + 2));
    *(float32x2_t *)&v33 = vsub_f32(*(float32x2_t *)&v33, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0));
    v10 = *(float *)&a6 + (float)(*(float *)&a6 + *((float *)&v33 + 3));
    *((float *)&v33 + 2) = v9;
    *((float *)&v33 + 3) = v10;
    if (*(float *)&v34 > 0.0 && *((float *)&v34 + 1) > 0.0)
      *(_QWORD *)&v34 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *((float *)&v34 + 1), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *(float *)&v34, 0.0)));
    if (*((float *)&v34 + 2) > 0.0 && *((float *)&v34 + 3) > 0.0)
      *((_QWORD *)&v34 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *((float *)&v34 + 3), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *((float *)&v34 + 2), 0.0)));
    if (*(float *)&v35 > 0.0 && *((float *)&v35 + 1) > 0.0)
      *(_QWORD *)&v35 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *((float *)&v35 + 1), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *(float *)&v35, 0.0)));
    if (*((float *)&v35 + 2) > 0.0 && *((float *)&v35 + 3) > 0.0)
      *((_QWORD *)&v35 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *((float *)&v35 + 3), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&a6 + *((float *)&v35 + 2), 0.0)));
  }
  v11 = 0.0;
  if (v9 <= 0.0 || v10 <= 0.0)
    goto LABEL_22;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0);
  if (v14 < 1 || v13 < 1)
    goto LABEL_22;
  v18 = HIDWORD(v12) + v13;
  if (__OFADD__(HIDWORD(v12), v13))
    v18 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
  if (v18 <= a2)
    goto LABEL_30;
  v19 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    v19 = 0x7FFFFFFF;
    if ((int)((a2 >> 31) + 0x7FFFFFFF) > SHIDWORD(v12))
      goto LABEL_32;
LABEL_30:
    if (!a3)
    {
      v19 = a2;
      v16 = 0.0;
      if (HIDWORD(v12) != a2)
        return LODWORD(v16) | ((unint64_t)LODWORD(v11) << 32);
      goto LABEL_32;
    }
LABEL_22:
    v16 = 0.0;
    return LODWORD(v16) | ((unint64_t)LODWORD(v11) << 32);
  }
  if (v19 <= SHIDWORD(v12))
    goto LABEL_30;
LABEL_32:
  isZero = WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)&v34);
  v16 = *(float *)&v33;
  if (isZero)
  {
    v11 = *(float *)&v33 + *((float *)&v33 + 2);
  }
  else
  {
    v21 = (float)a2 * 0.015625;
    v22 = (float)v19 * 0.015625;
    v11 = *(float *)&v33 + *((float *)&v33 + 2);
    if ((float)(*((float *)&v33 + 1) + *((float *)&v34 + 1)) >= (float)(*((float *)&v33 + 1) + *((float *)&v34 + 3)))
      v23 = *((float *)&v33 + 1) + *((float *)&v34 + 1);
    else
      v23 = *((float *)&v33 + 1) + *((float *)&v34 + 3);
    v24 = (float)(*((float *)&v33 + 1) + *((float *)&v33 + 3)) - *((float *)&v35 + 1);
    v25 = (float)(*((float *)&v33 + 1) + *((float *)&v33 + 3)) - *((float *)&v35 + 3);
    if (v25 >= v24)
      v26 = (float)(*((float *)&v33 + 1) + *((float *)&v33 + 3)) - *((float *)&v35 + 1);
    else
      v26 = (float)(*((float *)&v33 + 1) + *((float *)&v33 + 3)) - *((float *)&v35 + 3);
    if (v23 > v26 || v21 > v23 || v22 < v26)
    {
      v32 = 0;
      if (v22 < v24 || v21 > (float)(*((float *)&v33 + 1) + *((float *)&v34 + 1)))
        v30 = *(float *)&v33 + *((float *)&v33 + 2);
      else
        v30 = *(float *)&v33;
      if (v22 < v25 || v21 > (float)(*((float *)&v33 + 1) + *((float *)&v34 + 3)))
        v11 = *(float *)&v33;
      if (WebCore::FloatRoundedRect::xInterceptsAtY((WebCore::FloatRoundedRect *)&v33, v21, (float *)&v32 + 1, (float *)&v32))
      {
        if (*((float *)&v32 + 1) < v30)
          v30 = *((float *)&v32 + 1);
        if (v11 < *(float *)&v32)
          v11 = *(float *)&v32;
      }
      if (WebCore::FloatRoundedRect::xInterceptsAtY((WebCore::FloatRoundedRect *)&v33, (float)v19 * 0.015625, (float *)&v32 + 1, (float *)&v32))
      {
        if (*((float *)&v32 + 1) < v30)
          v30 = *((float *)&v32 + 1);
        if (v11 < *(float *)&v32)
          v11 = *(float *)&v32;
      }
      v16 = v30;
    }
  }
  return LODWORD(v16) | ((unint64_t)LODWORD(v11) << 32);
}

double WebCore::BoxShape::buildDisplayPaths(uint64_t a1, WebCore::Path *this)
{
  __int128 *v4;
  double result;
  __int128 v6;
  float32x2_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = (__int128 *)(a1 + 20);
  result = WebCore::Path::addRoundedRect(this, (WebCore::FloatRect *)(a1 + 20), 1);
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  if (*(float *)&result != 0.0)
  {
    v6 = v4[1];
    v8 = *v4;
    v9 = v6;
    v10 = v4[2];
    if (*(float *)&result > 0.0)
    {
      v7 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&result, 0);
      *(float32x2_t *)&v8 = vsub_f32(*(float32x2_t *)&v8, v7);
      *((float32x2_t *)&v8 + 1) = vadd_f32(v7, vadd_f32(v7, *(float32x2_t *)((char *)&v8 + 8)));
      if (*(float *)&v9 > 0.0 && *((float *)&v9 + 1) > 0.0)
        *(_QWORD *)&v9 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *((float *)&v9 + 1), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *(float *)&v9, 0.0)));
      if (*((float *)&v9 + 2) > 0.0 && *((float *)&v9 + 3) > 0.0)
        *((_QWORD *)&v9 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *((float *)&v9 + 3), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *((float *)&v9 + 2), 0.0)));
      if (*(float *)&v10 > 0.0 && *((float *)&v10 + 1) > 0.0)
        *(_QWORD *)&v10 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *((float *)&v10 + 1), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *(float *)&v10, 0.0)));
      if (*((float *)&v10 + 2) > 0.0 && *((float *)&v10 + 3) > 0.0)
        *((_QWORD *)&v10 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *((float *)&v10 + 3), 0.0)), COERCE_UNSIGNED_INT(fmaxf(*(float *)&result + *((float *)&v10 + 2), 0.0)));
    }
    return WebCore::Path::addRoundedRect((WebCore::Path *)((char *)this + 72), (WebCore::FloatRect *)&v8, 1);
  }
  return result;
}

uint64_t WebCore::OffsetPolygonEdge::xIntercept(WebCore::OffsetPolygonEdge *this, float a2)
{
  uint64_t result;
  float v5;
  float v6;

  if (*((float *)this + 3) == *((float *)this + 5) || *((float *)this + 2) == *((float *)this + 4))
  {
    (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this);
    return (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this);
  }
  else
  {
    v5 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
    result = (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this);
    v6 = *(float *)(result + 4);
    if (v6 >= v5)
      v6 = v5;
    if (v6 != a2)
    {
      (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this);
      return (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this);
    }
  }
  return result;
}

uint64_t WebCore::OffsetPolygonEdge::vertex1(WebCore::OffsetPolygonEdge *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::OffsetPolygonEdge::vertex2(WebCore::OffsetPolygonEdge *this)
{
  return (uint64_t)this + 16;
}

float WebCore::OffsetPolygonEdge::clippedEdgeXRange(WebCore::OffsetPolygonEdge *this, float a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float *v34;

  v6 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
  v7 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
  if (v7 >= v6)
    v7 = v6;
  v8 = -1.0;
  if (v7 <= a3)
  {
    v9 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
    v10 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
    if (v9 >= v10)
      v10 = v9;
    if (v10 >= a2)
    {
      v11 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
      v12 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
      if (v11 >= v12)
        v12 = v11;
      if (v12 != a2)
        goto LABEL_13;
      v13 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
      v14 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
      if (v14 >= v13)
        v14 = v13;
      if (v14 > a2)
      {
LABEL_13:
        v15 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
        v16 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
        if (v16 >= v15)
          v16 = v15;
        if (v16 != a3)
          goto LABEL_19;
        v17 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
        v18 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
        if (v17 >= v18)
          v18 = v17;
        if (v18 < a3)
        {
LABEL_19:
          v19 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
          v20 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
          if (v20 >= v19)
            v20 = v19;
          if (v20 < a2)
            goto LABEL_25;
          v21 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this) + 4);
          v22 = *(float *)((*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this) + 4);
          if (v21 >= v22)
            v22 = v21;
          if (v22 <= a3)
          {
            v33 = *(float *)(*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this);
            v34 = (float *)(*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this);
            if (*v34 >= v33)
              v8 = v33;
            else
              v8 = *v34;
            (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 16))(this);
            (*(uint64_t (**)(WebCore::OffsetPolygonEdge *))(*(_QWORD *)this + 24))(this);
          }
          else
          {
LABEL_25:
            v23 = (float *)((char *)this + 8);
            v24 = *((float *)this + 3);
            v25 = *((float *)this + 5);
            v26 = 16;
            if (v24 >= v25)
              v27 = 16;
            else
              v27 = 8;
            if (v24 < v25)
              v23 = (float *)((char *)this + 16);
            else
              v26 = 8;
            if (v24 >= v25)
              v24 = *((float *)this + 5);
            v28 = *(float *)((char *)this + v26);
            v29 = v23[1];
            if (v24 >= a2)
            {
              v31 = *(float *)((char *)this + v27);
            }
            else
            {
              WebCore::OffsetPolygonEdge::xIntercept(this, a2);
              v31 = v30;
            }
            if (v29 > a3)
            {
              WebCore::OffsetPolygonEdge::xIntercept(this, a3);
              v28 = v32;
            }
            if (v28 >= v31)
              return v31;
            else
              return v28;
          }
        }
      }
    }
  }
  return v8;
}

uint64_t WebCore::PolygonShape::shapeMarginLogicalBoundingBox(WebCore::PolygonShape *this)
{
  float v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *((float *)this + 4);
  v2 = (float)(*((float *)this + 11) - v1) * 64.0;
  v3 = 0x7FFFFFFFLL;
  v4 = 0x80000000;
  if (v2 > -2147483650.0)
    v4 = (int)v2;
  if (v2 < 2147483650.0)
    v3 = v4;
  v5 = (float)(*((float *)this + 12) - v1) * 64.0;
  v6 = 0x7FFFFFFF00000000;
  v7 = 0x8000000000000000;
  if (v5 > -2147483650.0)
    v7 = (unint64_t)(int)v5 << 32;
  if (v5 < 2147483650.0)
    v6 = v7;
  return v6 | v3;
}

char *WebCore::PolygonShape::getExcludedInterval(uint64_t a1, int a2, int a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  char *result;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  unint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  float v24;
  WTF *v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _BOOL4 v42;
  float v44;
  float v45;
  float v46;
  float *v47;
  float32_t v48;
  float *v49;
  float32_t v50;
  float v51;
  float v52;
  _BOOL4 v53;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  float32_t v67;
  float *v68;
  float32_t v69;
  float v70;
  float v71;
  _BOOL4 v72;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  _BOOL4 v81;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  _BOOL4 v90;
  float v92;
  float v93;
  void (**v94)(WebCore::OffsetPolygonEdge *__hidden);
  float32x2_t v95;
  float32x2_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99[2];

  v3 = a2 + a3;
  if (__OFADD__(a2, a3))
    v3 = (a2 >> 31) + 0x7FFFFFFF;
  if (*(_BYTE *)(a1 + 60) || *(float *)(a1 + 52) <= 0.0)
  {
LABEL_5:
    v4 = 0;
    v5 = 0;
    return (char *)(v5 | v4);
  }
  v8 = (float)a2 * 0.015625;
  v9 = (float)v3 * 0.015625;
  v10 = *(float *)(a1 + 16);
  v11 = v8 - v10;
  v12 = v9 + v10;
  if (v12 < v11 || (v13 = *(float *)(a1 + 56), v13 <= 0.0))
  {
    v4 = 0;
    v5 = 0;
    return (char *)(v5 | v4);
  }
  v14 = *(float *)(a1 + 48);
  v15 = v13 + v14;
  v16 = v14 > v12 || v15 < v11;
  v4 = 0;
  v5 = 0;
  if (v16)
    return (char *)(v5 | v4);
  v94 = (void (**)(WebCore::OffsetPolygonEdge *__hidden))__PAIR64__(LODWORD(v12), LODWORD(v11));
  v95 = 0;
  v96.f32[0] = v12;
  v97 = 0;
  v98 = 0;
  v99[0] = (uint64_t)&v97;
  v99[1] = (uint64_t)&v94;
  result = WebCore::PODIntervalTree<float,WebCore::FloatPolygonEdge *>::searchForOverlapsFrom<WebCore::PODIntervalTree<float,WebCore::FloatPolygonEdge *>::OverlapsSearchAdapter>((char *)(a1 + 80), *(_QWORD *)(a1 + 80), v99);
  if (!HIDWORD(v98))
  {
    v19 = 0;
    goto LABEL_21;
  }
  if (!(HIDWORD(v98) >> 29))
  {
    v18 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v98)));
    v19 = (WTF *)v18;
    if (HIDWORD(v98))
    {
      v20 = 0;
      v21 = 8;
      do
      {
        *(_QWORD *)(v18 + 8 * v20++) = *(_QWORD *)((char *)v97 + v21);
        v21 += 24;
      }
      while (v20 < HIDWORD(v98));
LABEL_22:
      v22 = v97;
      if (v97)
      {
        v97 = 0;
        LODWORD(v98) = 0;
        WTF::fastFree(v22, v17);
      }
      if ((_DWORD)v20)
      {
        v23 = 8 * v20;
        v24 = -2.0;
        v25 = v19;
        v26 = -1.0;
        do
        {
          v27 = *(_QWORD *)v25;
          v28 = *(float *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v25 + 16))(*(_QWORD *)v25) + 4);
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
          if (v28 < *(float *)(v29 + 4))
            v28 = *(float *)(v29 + 4);
          v30 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27) + 4);
          v31 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27) + 4);
          if (v31 >= v30)
            v31 = v30;
          if (v28 != v31)
          {
            if (*(float *)(a1 + 16) == 0.0)
            {
              v94 = &off_1E3441578;
              v95 = vadd_f32(*(float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27), 0);
              v96 = vadd_f32(*(float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27), 0);
              v40 = WebCore::OffsetPolygonEdge::clippedEdgeXRange((WebCore::OffsetPolygonEdge *)&v94, v8, v9);
              if (v41 >= v40)
              {
                v42 = v24 < v26;
                if (v40 < v26 || v24 < v26)
                  v26 = v40;
                if (v24 < v41)
                  v42 = 1;
                if (v42)
                  v24 = v41;
              }
            }
            else
            {
              v32 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
              v33 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
              v34 = v33[1];
              v35 = *v32 - *v33;
              v36 = v32[1] - v34;
              if (v35 == 0.0)
              {
                if (v36 <= 0.0)
                  v38 = 1.0;
                else
                  v38 = -1.0;
                v39 = 0.0;
              }
              else if (v36 == 0.0)
              {
                if (v35 <= 0.0)
                  v39 = -1.0;
                else
                  v39 = 1.0;
                v38 = 0.0;
              }
              else
              {
                v37 = hypotf(*v32 - *v33, v32[1] - v34);
                v38 = (float)-v36 / v37;
                v39 = v35 / v37;
              }
              v44 = *(float *)(a1 + 16);
              v45 = -(float)(v38 * v44);
              v46 = -(float)(v39 * v44);
              v94 = &off_1E3441578;
              v47 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
              v48 = v46 + v47[1];
              v95.f32[0] = v45 + *v47;
              v95.f32[1] = v48;
              v49 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
              v50 = v46 + v49[1];
              v96.f32[0] = v45 + *v49;
              v96.f32[1] = v50;
              v51 = WebCore::OffsetPolygonEdge::clippedEdgeXRange((WebCore::OffsetPolygonEdge *)&v94, v8, v9);
              if (v52 >= v51)
              {
                v53 = v24 < v26;
                if (v51 < v26 || v24 < v26)
                  v26 = v51;
                if (v24 < v52)
                  v53 = 1;
                if (v53)
                  v24 = v52;
              }
              v55 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
              v56 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
              v57 = v56[1];
              v58 = *v55 - *v56;
              v59 = v55[1] - v57;
              if (v58 == 0.0)
              {
                if (v59 <= 0.0)
                  v61 = 1.0;
                else
                  v61 = -1.0;
                v62 = 0.0;
              }
              else if (v59 == 0.0)
              {
                if (v58 <= 0.0)
                  v62 = -1.0;
                else
                  v62 = 1.0;
                v61 = 0.0;
              }
              else
              {
                v60 = hypotf(*v55 - *v56, v55[1] - v57);
                v61 = (float)-v59 / v60;
                v62 = v58 / v60;
              }
              v63 = *(float *)(a1 + 16);
              v64 = v61 * v63;
              v65 = v62 * v63;
              v94 = &off_1E3441578;
              v66 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
              v67 = v65 + v66[1];
              v95.f32[0] = v64 + *v66;
              v95.f32[1] = v67;
              v68 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
              v69 = v65 + v68[1];
              v96.f32[0] = v64 + *v68;
              v96.f32[1] = v69;
              v70 = WebCore::OffsetPolygonEdge::clippedEdgeXRange((WebCore::OffsetPolygonEdge *)&v94, v8, v9);
              if (v71 >= v70)
              {
                v72 = v24 < v26;
                if (v70 < v26 || v24 < v26)
                  v26 = v70;
                if (v24 < v71)
                  v72 = 1;
                if (v72)
                  v24 = v71;
              }
              v74 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
              v75 = *(float *)(a1 + 16);
              v76 = v74[1];
              if ((float)(v75 + v76) > v8 && (float)(v76 - v75) < v9)
              {
                v77 = *v74;
                if (v76 < v8 || v76 > v9)
                {
                  v79 = v76 <= v9 ? v8 : v9;
                  v75 = v75
                      * sqrtf(1.0 - (float)((float)((float)(v79 - v76) * (float)(v79 - v76)) / (float)(v75 * v75)));
                  v78 = v77 + v75;
                }
                else
                {
                  v78 = v75 + v77;
                }
                v80 = v77 - v75;
                if (v78 >= v80)
                {
                  v81 = v24 < v26;
                  if (v80 < v26 || v24 < v26)
                    v26 = v80;
                  if (v24 < v78)
                    v81 = 1;
                  if (v81)
                    v24 = v78;
                }
              }
              v83 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
              v84 = *(float *)(a1 + 16);
              v85 = v83[1];
              if ((float)(v84 + v85) > v8 && (float)(v85 - v84) < v9)
              {
                v86 = *v83;
                if (v85 < v8 || v85 > v9)
                {
                  v88 = v85 <= v9 ? v8 : v9;
                  v84 = v84
                      * sqrtf(1.0 - (float)((float)((float)(v88 - v85) * (float)(v88 - v85)) / (float)(v84 * v84)));
                  v87 = v86 + v84;
                }
                else
                {
                  v87 = v84 + v86;
                }
                v89 = v86 - v84;
                if (v87 >= v89)
                {
                  v90 = v24 < v26;
                  if (v89 < v26 || v24 < v26)
                    v26 = v89;
                  if (v24 < v87)
                    v90 = 1;
                  if (v90)
                    v24 = v87;
                }
              }
            }
          }
          v25 = (WTF *)((char *)v25 + 8);
          v23 -= 8;
        }
        while (v23);
      }
      else
      {
        v24 = -2.0;
        v26 = -1.0;
      }
      if (v19)
        WTF::fastFree(v19, v17);
      if (v24 > v26)
      {
        v92 = 0.0;
        if (v24 >= v26)
          v93 = v26;
        else
          v93 = 0.0;
        if (v24 >= v26)
          v92 = v24;
        v5 = LODWORD(v93);
        v4 = (unint64_t)LODWORD(v92) << 32;
        return (char *)(v5 | v4);
      }
      goto LABEL_5;
    }
LABEL_21:
    LODWORD(v20) = 0;
    goto LABEL_22;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PolygonShape::buildDisplayPaths(uint64_t result, WebCore::Path *this)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  __int128 v12;
  int v13;

  if (!*(_BYTE *)(result + 60))
  {
    v2 = result;
    if (!*(_DWORD *)(result + 36))
    {
      __break(0xC471u);
      return result;
    }
    result = WebCore::Path::moveTo(this, *(const WebCore::FloatPoint **)(result + 24));
    if (*(_DWORD *)(v2 + 36) >= 2u)
    {
      v4 = 1;
      v5 = 8;
      do
      {
        result = WebCore::Path::addLineTo((uint64_t)this, (const WebCore::FloatPoint *)(*(_QWORD *)(v2 + 24) + v5));
        ++v4;
        v5 += 8;
      }
      while (v4 < *(unsigned int *)(v2 + 36));
    }
    v6 = *((_DWORD *)this + 16);
    if (v6 == 2)
    {
      v7 = *((_QWORD *)this + 1);
      if (!v7)
        goto LABEL_24;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
      if ((result & 1) != 0)
        return result;
      v6 = *((_DWORD *)this + 16);
    }
    else if (!v6)
    {
      return result;
    }
    if (v6 == 2)
    {
      v9 = *((_QWORD *)this + 1);
      if (v9)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 208))(v9);
        if ((result & 1) != 0)
          return result;
        if (*((_DWORD *)this + 16) == 1)
        {
          v8 = *((_DWORD *)this + 15);
LABEL_22:
          if (v8 == 5)
          {
            *(_OWORD *)v11 = *(_OWORD *)((char *)this + 8);
            *(_QWORD *)&v11[13] = *(_QWORD *)((char *)this + 21);
            *(_OWORD *)((char *)this + 40) = v12;
            *(_OWORD *)((char *)this + 8) = *(_OWORD *)v11;
            *(_OWORD *)((char *)this + 24) = *(_OWORD *)&v11[16];
            *((_DWORD *)this + 14) = v13;
            *((_DWORD *)this + 15) = 6;
            return result;
          }
        }
      }
    }
    else if (v6 == 1)
    {
      v8 = *((_DWORD *)this + 15);
      if (v8 == 6 || v8 == 15)
        return result;
      goto LABEL_22;
    }
LABEL_24:
    v10 = WebCore::Path::ensureImpl(this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
  }
  return result;
}

WTF *WebCore::RasterShapeIntervals::computeShapeMarginIntervals(WebCore::RasterShapeIntervals *this, uint64_t a2, int a3)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *result;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int v40;
  BOOL v41;
  unint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  int *v73;
  int v74;
  int v75;
  BOOL v76;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  BOOL v86;
  int v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;

  v4 = a2;
  v6 = *(_DWORD *)(a2 + 32);
  v7 = 2 * (a3 - v6);
  if (a3 < v6)
    v7 = 0;
  LODWORD(v8) = v7 + *(_DWORD *)(a2 + 28);
  v9 = WTF::fastMalloc((WTF *)0x28);
  v11 = v9;
  v109 = a3;
  if (v6 <= a3)
    v6 = a3;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  if (v8 >= 0x7FFFFFFF)
    v8 = 0x7FFFFFFFLL;
  else
    v8 = v8;
  *(_DWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 28) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
LABEL_143:
      __break(0xC471u);
      JUMPOUT(0x1964B947CLL);
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v11 + 24) = v8;
    *(_QWORD *)(v11 + 16) = v12;
    v13 = *(unsigned int *)(v11 + 28);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        *v12++ = 0xFFFFFFFEFFFFFFFFLL;
        v14 -= 8;
      }
      while (v14);
    }
  }
  *(_DWORD *)(v11 + 32) = v6;
  *(_QWORD *)this = v11;
  v15 = (a3 + 1);
  if (a3 == -1)
  {
    result = 0;
  }
  else
  {
    if (v15 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x1964B94BCLL);
    }
    result = (WTF *)WTF::fastMalloc((WTF *)(4 * v15));
  }
  v17 = 0;
  v18 = a3;
  do
  {
    if (v15 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1964B949CLL);
    }
    *((_DWORD *)result + v17) = (int)sqrt((double)((a3 + v17) * v18));
    ++v17;
    --v18;
  }
  while (v18 != -1);
  v19 = *(_DWORD *)(v4 + 12);
  if (v19 >= 1)
  {
    v20 = *(int *)(v4 + 4);
    v21 = v20 + v19;
    v22 = *(unsigned int *)(v4 + 28);
    v23 = *(int *)(v4 + 32);
    v106 = -(int)v23;
    v105 = v22 - v23;
    v24 = (int)v20 + 1;
    v104 = v23 - 1;
    v25 = v23 + v24;
    v26 = (8 * (v23 + v24)) | 4;
    v10 = 1;
    v27 = v20;
    v107 = v23;
    v108 = v4;
    do
    {
      v28 = v27 + v23;
      if (v27 + v23 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1964B94A4);
      }
      v29 = *(_QWORD *)(v4 + 16);
      v30 = (int *)(v29 + 8 * v28);
      v31 = v30 + 1;
      v32 = v30[1];
      v33 = *v30;
      if (*v30 >= v32)
      {
        v68 = v27 + 1;
      }
      else
      {
        v34 = v27 - v109;
        if ((int)v27 - v109 <= v106)
          v34 = v106;
        v35 = v15 + v27;
        if ((int)v15 + (int)v27 >= v105)
          v35 = v105;
        if (v27 > v34)
        {
          v36 = 0;
          v37 = v34;
          v38 = (_DWORD *)(v29 + 8 * v28 - 4);
          do
          {
            if (v27 + v36 - 1 > v20)
            {
              if (v104 + v27 + v36 >= v22)
              {
                __break(0xC471u);
                JUMPOUT(0x1964B948CLL);
              }
              v39 = *(v38 - 1);
              if (*v38 >= v39)
              {
                v40 = *v30;
                v41 = *v38 < *v31 || *v31 < v40;
                if (!v41 && v39 <= v40)
                  break;
              }
            }
            v43 = v27 + v36 + *(int *)(v11 + 32) - 1;
            if (v43 >= *(unsigned int *)(v11 + 28))
              goto LABEL_143;
            v44 = v36 - 1;
            if ((int)v36 - 1 < 0)
              v44 = 1 - v36;
            if (v15 <= v44)
              v45 = 0;
            else
              v45 = *((_DWORD *)result + v44);
            v46 = v33 - v45;
            v47 = v45 + v32;
            if (v47 >= v46)
            {
              v48 = (int *)(*(_QWORD *)(v11 + 16) + 8 * v43);
              v49 = v48[1];
              v50 = *v48;
              if (v46 >= *v48)
                v51 = *v48;
              else
                v51 = v46;
              if (v49 <= v47)
                v52 = v47;
              else
                v52 = v48[1];
              v53 = v49 < v50;
              if (v49 >= v50)
                v54 = v51;
              else
                v54 = v46;
              if (v53)
                v52 = v47;
              *v48 = v54;
              v48[1] = v52;
            }
            --v36;
            v38 -= 2;
          }
          while (v27 + v36 > v37);
        }
        v55 = *(unsigned int *)(v11 + 28);
        v56 = *(int *)(v11 + 32);
        if (v27 + v56 >= v55)
        {
          __break(0xC471u);
          JUMPOUT(0x1964B94B4);
        }
        v57 = *(_QWORD *)(v11 + 16);
        v58 = v33 - *(_DWORD *)result;
        v59 = *(_DWORD *)result + v32;
        if (v59 >= v58)
        {
          v60 = (int *)(v57 + 8 * (v27 + v56));
          v62 = *v60;
          v61 = v60[1];
          if (v58 >= *v60)
            v63 = *v60;
          else
            v63 = v33 - *(_DWORD *)result;
          if (v61 <= v59)
            v64 = *(_DWORD *)result + v32;
          else
            v64 = v60[1];
          v65 = v61 < v62;
          if (v61 >= v62)
            v66 = v63;
          else
            v66 = v33 - *(_DWORD *)result;
          if (v65)
            v67 = *(_DWORD *)result + v32;
          else
            v67 = v64;
          *v60 = v66;
          v60[1] = v67;
        }
        v68 = v27 + 1;
        if (v27 + 1 < v35)
        {
          v69 = 0;
          v70 = v24 + v56;
          v71 = (_DWORD *)(v29 + v26);
          v72 = v24 - v27;
          v73 = (int *)(v57 + 8 * v70 + 4);
          do
          {
            if (v24 + v69 < v21)
            {
              if (v25 + v69 >= v22)
              {
                __break(0xC471u);
                JUMPOUT(0x1964B9494);
              }
              v74 = *(v71 - 1);
              if (*v71 >= v74)
              {
                v75 = *v30;
                v76 = *v71 < *v31 || *v31 < v75;
                if (!v76 && v74 <= v75)
                  break;
              }
            }
            if (v70 + v69 >= v55)
            {
              __break(0xC471u);
              JUMPOUT(0x1964B9484);
            }
            if (v72 + (int)v69 >= 0)
              v78 = v72 + v69;
            else
              v78 = -(v72 + v69);
            if (v15 <= v78)
              v79 = 0;
            else
              v79 = *((_DWORD *)result + v78);
            v80 = v33 - v79;
            v81 = v79 + v32;
            if (v81 >= v80)
            {
              v83 = *(v73 - 1);
              v82 = *v73;
              if (v80 >= v83)
                v84 = *(v73 - 1);
              else
                v84 = v80;
              if (v82 <= v81)
                v85 = v81;
              else
                v85 = *v73;
              v86 = v82 < v83;
              if (v82 >= v83)
                v87 = v84;
              else
                v87 = v80;
              if (v86)
                v88 = v81;
              else
                v88 = v85;
              *(v73 - 1) = v87;
              *v73 = v88;
            }
            ++v69;
            v71 += 2;
            v73 += 2;
          }
          while (v24 + v69 < v35);
        }
        v23 = v107;
        v4 = v108;
      }
      ++v24;
      v26 += 8;
      ++v25;
      v27 = v68;
    }
    while (v68 < v21);
  }
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  v89 = *(unsigned int *)(v11 + 28);
  v90 = *(_DWORD *)(v11 + 32);
  v91 = -v90;
  v92 = v89 - v90;
  if (v92 > (int)v91)
  {
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    do
    {
      if (v89 <= v94)
      {
        __break(0xC471u);
        JUMPOUT(0x1964B94ACLL);
      }
      v100 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + v93);
      v99 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + v93 + 4);
      v101 = v99 - v100;
      if (v99 > v100 && v101 >= 1)
      {
        v10 = v91 + v94;
        if (v98 < 1 || v97 <= 0)
        {
          *(_DWORD *)v11 = v100;
          *(_DWORD *)(v11 + 4) = v10;
          v97 = 1;
          *(_DWORD *)(v11 + 8) = v101;
        }
        else
        {
          if (v100 >= v96)
            v100 = v96;
          if ((int)v10 >= v95)
            v10 = v95;
          else
            v10 = v10;
          v102 = v96 + v98;
          if (v102 <= v99)
            v102 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + v93 + 4);
          v103 = v95 + v97;
          if (v103 <= (int)v91 + (int)v94 + 1)
            v103 = v91 + v94 + 1;
          *(_DWORD *)v11 = v100;
          *(_DWORD *)(v11 + 4) = v10;
          v101 = v102 - v100;
          *(_DWORD *)(v11 + 8) = v102 - v100;
          v97 = v103 - v10;
        }
        *(_DWORD *)(v11 + 12) = v97;
        v95 = v10;
        v96 = v100;
        v98 = v101;
      }
      ++v94;
      v93 += 8;
    }
    while ((int)v91 + (int)v94 < v92);
  }
  if (result)
    return (WTF *)WTF::fastFree(result, (void *)v10);
  return result;
}

void WebCore::RasterShapeIntervals::buildBoundsPath(WebCore::RasterShapeIntervals *this, WebCore::Path *a2)
{
  int v2;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  int v25;
  float v26;
  int v27;
  _DWORD v28[4];

  v2 = *((_DWORD *)this + 3);
  if (v2 >= 1)
  {
    v5 = *((_DWORD *)this + 1);
    v6 = v5 + v2;
    v7 = v5;
    do
    {
      v8 = *((unsigned int *)this + 7);
      v9 = *((int *)this + 8);
      v10 = v9 + v7;
      if (v8 <= v10)
      {
LABEL_27:
        __break(0xC471u);
        JUMPOUT(0x1964B9604);
      }
      v11 = *((_QWORD *)this + 2) + 8 * v10;
      if (*(_DWORD *)v11 < *(_DWORD *)(v11 + 4))
      {
        v14 = *(_QWORD *)v11;
        v13 = (int *)(v11 + 12);
        v12 = v14;
        v15 = HIDWORD(v14);
        v16 = v6;
        if (v6 <= v7 + 1)
          v17 = v7 + 1;
        else
          v17 = v6;
        v18 = v17 - 1;
        v19 = v7 + 1;
        v20 = v7;
        while (1)
        {
          if (v19 >= v16)
          {
            v20 = v17;
            goto LABEL_19;
          }
          if (v9 + v19 >= v8)
            goto LABEL_27;
          v22 = *(v13 - 1);
          v21 = *v13;
          if (v22 >= *v13)
            break;
          ++v20;
          v13 += 2;
          ++v19;
          if (v22 != v12 || v21 != (_DWORD)v15)
          {
            v18 = v20 - 1;
            goto LABEL_19;
          }
        }
        v18 = v20++;
LABEL_19:
        v24 = __OFSUB__((_DWORD)v15, v12);
        v25 = v15 - v12;
        if (v25 < 0 != v24)
          v12 = 0;
        v26 = (float)v12;
        if (v25 < 0 != v24)
          v27 = 0;
        else
          v27 = v25;
        *(float *)v28 = v26;
        *(float *)&v28[1] = (float)v7;
        *(float *)&v28[2] = (float)v27;
        *(float *)&v28[3] = (float)(v20 - v7);
        WebCore::Path::addRect(a2, (const WebCore::FloatRect *)v28);
        v5 = *((_DWORD *)this + 1);
        v2 = *((_DWORD *)this + 3);
        v7 = v18;
      }
      ++v7;
      v6 = v5 + v2;
    }
    while (v7 < v5 + v2);
  }
}

unint64_t WebCore::RasterShape::getExcludedInterval(uint64_t a1, int a2, int a3)
{
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int *v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;

  v6 = *(float *)(a1 + 16);
  if (v6 == 0.0)
  {
    v10 = (uint64_t *)(a1 + 24);
  }
  else
  {
    v7 = ceilf(v6);
    v8 = (int)v7;
    if (v7 <= 0.0)
      v8 = 0;
    if (v7 < 2147483650.0)
      v9 = v8;
    else
      v9 = 0x7FFFFFFF;
    v10 = (uint64_t *)(a1 + 32);
    if (!*(_QWORD *)(a1 + 32))
    {
      v11 = *(_DWORD *)(a1 + 40);
      if (v11 <= *(_DWORD *)(a1 + 44))
        v11 = *(_DWORD *)(a1 + 44);
      v12 = (int)((double)v11 * 1.41421356);
      if (v9 >= v12)
        v13 = v12;
      else
        v13 = v9;
      WebCore::RasterShapeIntervals::computeShapeMarginIntervals((WebCore::RasterShapeIntervals *)&v43, *(_QWORD *)(a1 + 24), v13);
      v15 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v43;
      if (v15)
      {
        v16 = *(WTF **)(v15 + 16);
        if (v16)
        {
          *(_QWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v15 + 24) = 0;
          WTF::fastFree(v16, v14);
        }
        WTF::fastFree((WTF *)v15, v14);
      }
    }
  }
  v17 = *v10;
  if (*(int *)(*v10 + 8) < 1)
    goto LABEL_35;
  v18 = *(_DWORD *)(v17 + 12);
  if (v18 < 1)
    goto LABEL_35;
  v19 = a2 + 63;
  if (a2 >= 0)
    v19 = a2;
  v20 = a2 + a3;
  if (__OFADD__(a2, a3))
    v20 = (a2 >> 31) + 0x7FFFFFFF;
  v21 = v20 / 64;
  v22 = *(_DWORD *)(v17 + 4);
  if (v21 < v22 || (v23 = v19 >> 6, v24 = v22 + v18, v23 >= v22 + v18))
  {
LABEL_35:
    v30 = 0;
    v31 = 0;
    return v31 | v30;
  }
  if (v23 <= v22)
    v25 = *(_DWORD *)(v17 + 4);
  else
    v25 = v23;
  if (v24 >= v21)
    v24 = v21;
  if (v25 != v24)
  {
    if (v25 >= v24)
    {
      v29 = -1;
      v28 = -2;
      goto LABEL_55;
    }
    v33 = *(unsigned int *)(v17 + 28);
    v34 = *(int *)(v17 + 32) + (uint64_t)v25;
    v35 = v33 >= v34;
    v36 = v33 - v34;
    if (!v35)
      v36 = 0;
    if (v36 > (v24 + ~v25))
    {
      v37 = v24 - (uint64_t)v25;
      v38 = (int *)(*(_QWORD *)(v17 + 16) + 8 * v34 + 4);
      v28 = -2;
      v29 = -1;
      do
      {
        v40 = *(v38 - 1);
        v39 = *v38;
        v38 += 2;
        if (v40 >= v29)
          v41 = v29;
        else
          v41 = v40;
        if (v28 <= v39)
          v42 = v39;
        else
          v42 = v28;
        if (v28 < v29)
        {
          v41 = v40;
          v42 = v39;
        }
        if (v39 >= v40)
        {
          v28 = v42;
          v29 = v41;
        }
        --v37;
      }
      while (v37);
      goto LABEL_55;
    }
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x1964B9860);
  }
  v26 = *(int *)(v17 + 32) + (uint64_t)v25;
  if (*(unsigned int *)(v17 + 28) <= v26)
    goto LABEL_58;
  v27 = (int *)(*(_QWORD *)(v17 + 16) + 8 * v26);
  v29 = *v27;
  v28 = v27[1];
LABEL_55:
  if (v28 < v29)
  {
    v29 = 0;
    v28 = 0;
  }
  v31 = COERCE_UNSIGNED_INT((float)v29);
  v30 = (unint64_t)COERCE_UNSIGNED_INT((float)v28) << 32;
  return v31 | v30;
}

const char *WebCore::RenderMathMLRow::renderName(WebCore::RenderMathMLRow *this)
{
  return "RenderMathMLRow";
}

const char *WebCore::RenderMathMLScripts::renderName(WebCore::RenderMathMLScripts *this)
{
  return "RenderMathMLScripts";
}

uint64_t WebCore::RenderMathMLScripts::isRenderMathMLScripts(WebCore::RenderMathMLScripts *this)
{
  return 1;
}

const char *WebCore::RenderMathMLSpace::renderName(WebCore::RenderMathMLSpace *this)
{
  return "RenderMathMLSpace";
}

uint64_t WebCore::RenderMathMLSpace::isChildAllowed(WebCore::RenderMathMLSpace *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return 0;
}

const char *WebCore::RenderMathMLToken::renderName(WebCore::RenderMathMLToken *this)
{
  return "RenderMathMLToken";
}

const char *WebCore::RenderMathMLUnderOver::renderName(WebCore::RenderMathMLUnderOver *this)
{
  return "RenderMathMLUnderOver";
}

uint64_t WebCore::RenderMathMLUnderOver::isRenderMathMLScripts(WebCore::RenderMathMLUnderOver *this)
{
  return 0;
}

BOOL WebCore::BoxShape::isEmpty(WebCore::BoxShape *this)
{
  return *((float *)this + 7) <= 0.0 || *((float *)this + 8) <= 0.0;
}

void WebCore::PolygonShape::~PolygonShape(WebCore::PolygonShape *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *i;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(void);
  void (**v11)(void);
  WTF *v12;
  WTF *v13;

  *(_QWORD *)this = off_1E34414F8;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = *(WTF **)v3;
    }
    while (v3);
    v5 = (WTF *)*((_QWORD *)v4 + 2);
    if (v5)
    {
      do
      {
        if (*(WTF **)v5 == v4)
        {
          for (i = (WTF *)*((_QWORD *)v5 + 1); i; i = *(WTF **)i)
            v5 = i;
        }
        v7 = v5;
        WTF::fastFree(v4, a2);
        v5 = (WTF *)*((_QWORD *)v7 + 2);
        v4 = v7;
      }
      while (v5);
    }
    else
    {
      v7 = v4;
    }
    WTF::fastFree(v7, a2);
    *((_QWORD *)this + 10) = 0;
  }
  v8 = *((unsigned int *)this + 19);
  if ((_DWORD)v8)
  {
    v9 = 32 * v8;
    v10 = (void (***)(void))*((_QWORD *)this + 8);
    do
    {
      v11 = *v10;
      v10 += 4;
      (*v11)();
      v9 -= 32;
    }
    while (v9);
  }
  v12 = (WTF *)*((_QWORD *)this + 8);
  if (v12)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v13, a2);
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *i;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(void);
  void (**v11)(void);
  WTF *v12;
  WTF *v13;

  *(_QWORD *)this = off_1E34414F8;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = *(WTF **)v3;
    }
    while (v3);
    v5 = (WTF *)*((_QWORD *)v4 + 2);
    if (v5)
    {
      do
      {
        if (*(WTF **)v5 == v4)
        {
          for (i = (WTF *)*((_QWORD *)v5 + 1); i; i = *(WTF **)i)
            v5 = i;
        }
        v7 = v5;
        WTF::fastFree(v4, a2);
        v5 = (WTF *)*((_QWORD *)v7 + 2);
        v4 = v7;
      }
      while (v5);
    }
    else
    {
      v7 = v4;
    }
    WTF::fastFree(v7, a2);
    *((_QWORD *)this + 10) = 0;
  }
  v8 = *((unsigned int *)this + 19);
  if ((_DWORD)v8)
  {
    v9 = 32 * v8;
    v10 = (void (***)(void))*((_QWORD *)this + 8);
    do
    {
      v11 = *v10;
      v10 += 4;
      (*v11)();
      v9 -= 32;
    }
    while (v9);
  }
  v12 = (WTF *)*((_QWORD *)this + 8);
  if (v12)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PolygonShape::isEmpty(WebCore::PolygonShape *this)
{
  return *((unsigned __int8 *)this + 60);
}

void WebCore::RasterShape::~RasterShape(WebCore::RasterShape *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    v4 = *(WTF **)(v3 + 16);
    if (v4)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = *(WTF **)(v5 + 16);
    if (v6)
    {
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      WTF::fastFree(v6, a2);
    }
    WTF::fastFree((WTF *)v5, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    v4 = *(WTF **)(v3 + 16);
    if (v4)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = *(WTF **)(v5 + 16);
    if (v6)
    {
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      WTF::fastFree(v6, a2);
    }
    WTF::fastFree((WTF *)v5, a2);
  }
  WTF::fastFree(this, a2);
}

double WebCore::RasterShape::shapeMarginLogicalBoundingBox(WebCore::RasterShape *this)
{
  float v2;
  float v3;
  int v4;
  int v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  int64x2_t v13;
  int32x2_t v14;
  int64x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int32x2_t v22;
  int8x16_t v23;
  int32x2_t v24;
  double result;
  uint64_t v26;

  v2 = *((float *)this + 4);
  if (v2 == 0.0)
  {
    v6 = (char *)this + 24;
  }
  else
  {
    v3 = ceilf(v2);
    v4 = (int)v3;
    if (v3 <= 0.0)
      v4 = 0;
    if (v3 < 2147483650.0)
      v5 = v4;
    else
      v5 = 0x7FFFFFFF;
    v6 = (char *)this + 32;
    if (!*((_QWORD *)this + 4))
    {
      v7 = *((_DWORD *)this + 10);
      if (v7 <= *((_DWORD *)this + 11))
        v7 = *((_DWORD *)this + 11);
      v8 = (int)((double)v7 * 1.41421356);
      if (v5 >= v8)
        v9 = v8;
      else
        v9 = v5;
      WebCore::RasterShapeIntervals::computeShapeMarginIntervals((WebCore::RasterShapeIntervals *)&v26, *((_QWORD *)this + 3), v9);
      v11 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v26;
      if (v11)
      {
        v12 = *(WTF **)(v11 + 16);
        if (v12)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          WTF::fastFree(v12, v10);
        }
        WTF::fastFree((WTF *)v11, v10);
      }
    }
  }
  v13 = *(int64x2_t *)*(_QWORD *)v6;
  v14 = vmovn_s64(v13);
  v15 = (int64x2_t)vshrq_n_u64((uint64x2_t)v13, 0x20uLL);
  v16 = vshrn_n_s64(v13, 0x20uLL);
  v17 = vcgt_s32(v14, (int32x2_t)0xFE000000FE000000);
  v18.i64[0] = v17.i32[0];
  v18.i64[1] = v17.i32[1];
  v19 = v18;
  v20 = vcgt_s32((int32x2_t)0xFE000000FE000000, v14);
  v18.i64[0] = v20.i32[0];
  v18.i64[1] = v20.i32[1];
  v21 = vorrq_s8(vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64(v13, 6uLL), v18), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
  v22 = vcgt_s32(v16, (int32x2_t)0xFE000000FE000000);
  v18.i64[0] = v22.i32[0];
  v18.i64[1] = v22.i32[1];
  v23 = v18;
  v24 = vcgt_s32((int32x2_t)0xFE000000FE000000, v16);
  v18.i64[0] = v24.i32[0];
  v18.i64[1] = v24.i32[1];
  *(_QWORD *)&result = vorrq_s8(vbslq_s8(v23, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v18, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v15, 0x26uLL))), vbslq_s8(v19, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v21)).u64[0];
  return result;
}

BOOL WebCore::RasterShape::isEmpty(WebCore::RasterShape *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  return *(int *)(v1 + 8) < 1 || *(_DWORD *)(v1 + 12) < 1;
}

void WebCore::RasterShape::buildDisplayPaths(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  int v6;
  WebCore::RasterShapeIntervals *v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  WebCore::RasterShapeIntervals *v14;

  WebCore::RasterShapeIntervals::buildBoundsPath(*(WebCore::RasterShapeIntervals **)(a1 + 24), (WebCore::Path *)a2);
  v4 = *(float *)(a1 + 16);
  if (v4 != 0.0)
  {
    v5 = ceilf(v4);
    if (v5 >= 2147483650.0)
    {
      v6 = 0x7FFFFFFF;
    }
    else if (v5 <= 0.0)
    {
      v6 = 0;
    }
    else
    {
      v6 = (int)v5;
    }
    v7 = *(WebCore::RasterShapeIntervals **)(a1 + 32);
    if (!v7)
    {
      v8 = *(_DWORD *)(a1 + 40);
      if (v8 <= *(_DWORD *)(a1 + 44))
        v8 = *(_DWORD *)(a1 + 44);
      v9 = (int)((double)v8 * 1.41421356);
      if (v6 >= v9)
        v10 = v9;
      else
        v10 = v6;
      WebCore::RasterShapeIntervals::computeShapeMarginIntervals((WebCore::RasterShapeIntervals *)&v14, *(_QWORD *)(a1 + 24), v10);
      v7 = v14;
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v14;
      if (v12)
      {
        v13 = *(WTF **)(v12 + 16);
        if (v13)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          WTF::fastFree(v13, v11);
        }
        WTF::fastFree((WTF *)v12, v11);
        v7 = *(WebCore::RasterShapeIntervals **)(a1 + 32);
      }
    }
    WebCore::RasterShapeIntervals::buildBoundsPath(v7, (WebCore::Path *)(a2 + 72));
  }
}

void WebCore::OffsetPolygonEdge::~OffsetPolygonEdge(WebCore::OffsetPolygonEdge *this)
{
  JUMPOUT(0x19AEA7644);
}

char *WTF::Vector<WebCore::RenderBox *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 4)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 3;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1964BA000);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 4)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 3;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

unint64_t WebCore::RectangleShape::getExcludedInterval(float *a1, int a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v17;

  v4 = a1[4];
  v3 = a1[5];
  if (v4 == 0.0)
  {
    v5 = a1[6];
    v6 = a1[7];
    v7 = a1[8];
  }
  else
  {
    v3 = v3 - v4;
    v5 = a1[6] - v4;
    v6 = a1[7] + (float)(v4 * 2.0);
    v7 = a1[8] + (float)(v4 * 2.0);
  }
  v8 = 0.0;
  if (v6 <= 0.0 || v7 <= 0.0)
    goto LABEL_14;
  v9 = a2 + a3;
  if (__OFADD__(a2, a3))
    v9 = (a2 >> 31) + 0x7FFFFFFF;
  v10 = (float)v9 * 0.015625;
  if (v10 < v5 || (v11 = (float)a2 * 0.015625, v12 = v7 + v5, v11 >= v12))
  {
LABEL_14:
    v3 = 0.0;
  }
  else
  {
    v8 = v6 + v3;
    v13 = v4 + a1[10];
    if (v13 > 0.0)
    {
      v14 = v4 + a1[9];
      if (v10 < (float)(v5 + v13))
      {
        v15 = (float)(v10 - v5) - v13;
LABEL_18:
        v17 = v14 * sqrtf(1.0 - (float)((float)(v15 * v15) / (float)(v13 * v13)));
        v3 = (float)(v3 + v14) - v17;
        v8 = (float)(v8 - v14) + v17;
        return LODWORD(v3) | ((unint64_t)LODWORD(v8) << 32);
      }
      if (v11 > (float)(v12 - v13))
      {
        v15 = v11 - (float)(v12 - v13);
        goto LABEL_18;
      }
    }
  }
  return LODWORD(v3) | ((unint64_t)LODWORD(v8) << 32);
}

double WebCore::RectangleShape::buildDisplayPaths(uint64_t a1, WebCore::Path *this, __n128 a3)
{
  __n128 v5;
  float32x2_t v6;
  float32x2_t v7;
  unint64_t v9;
  __n128 v10;

  v10.n128_u64[0] = *(_QWORD *)(a1 + 36);
  a3.n128_u64[0] = v10.n128_u64[0];
  v5.n128_f64[0] = WebCore::Path::addRoundedRect(this, (__n128 *)(a1 + 20), (float *)&v10, 1, a3);
  v5.n128_u32[0] = *(_DWORD *)(a1 + 16);
  if (v5.n128_f32[0] != 0.0)
  {
    v6 = (float32x2_t)vdup_lane_s32((int32x2_t)v5.n128_u64[0], 0);
    v7 = vmla_n_f32(*(float32x2_t *)(a1 + 28), (float32x2_t)0x4000000040000000, v5.n128_f32[0]);
    v10.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)(a1 + 20), v6);
    *(float32x2_t *)&v10.n128_i8[8] = v7;
    v5.n128_u64[0] = (unint64_t)vadd_f32(v6, *(float32x2_t *)(a1 + 36));
    v9 = v5.n128_u64[0];
    v5.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)((char *)this + 72), &v10, (float *)&v9, 1, v5);
  }
  return v5.n128_f64[0];
}

uint64_t WebCore::BasicShapePolygon::windRule(WebCore::BasicShapePolygon *this)
{
  return *((unsigned __int8 *)this + 12);
}

void WebCore::Shape::createRasterShape(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t ***v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  float v65;
  float v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v75;
  unint64_t v77;
  BOOL v78;
  _BOOL4 v79;
  int v80;
  int v81;
  int v82;
  int *v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t ***v103;
  CFTypeRef v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t *v132;
  unsigned int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  void (**v141)(WebCore::ImageBufferAllocator *__hidden);
  uint64_t **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  CFTypeRef cf;
  uint64_t ***v147;

  v10 = HIDWORD(*(_QWORD *)a2);
  if ((int)*(_QWORD *)a2 >= 0)
    v11 = *(_QWORD *)a2;
  else
    v11 = *(_QWORD *)a2 + 63;
  v12 = *(_QWORD *)a2 - (v11 & 0xFFFFFFC0);
  if ((int)v10 >= 0)
    v13 = HIDWORD(*(_QWORD *)a2);
  else
    v13 = v10 + 63;
  v14 = v10 - (v13 & 0xFFFFFFC0);
  v16 = *(_DWORD *)(a2 + 8);
  v15 = *(_DWORD *)(a2 + 12);
  v17 = v12 + v16;
  if (__OFADD__(v12, v16))
    v17 = (v12 >> 31) + 0x7FFFFFFF;
  v18 = v14 + v15;
  v130 = v13;
  if (__OFADD__(v14, v15))
    v18 = (v14 >> 31) + 0x7FFFFFFF;
  if (v17 >= 0)
    v19 = v17;
  else
    v19 = v17 + 63;
  if (v18 >= 0)
    v20 = v18;
  else
    v20 = v18 + 63;
  v21 = HIDWORD(*(_QWORD *)a3);
  if ((int)*(_QWORD *)a3 <= 0)
    v22 = -(-(int)*(_QWORD *)a3 & 0x3F);
  else
    v22 = *(_DWORD *)a3 & 0x3F;
  if ((int)v21 >= 0)
    v23 = HIDWORD(*(_QWORD *)a3);
  else
    v23 = v21 + 63;
  v24 = v21 - (v23 & 0xFFFFFFC0);
  v26 = *(_DWORD *)(a3 + 8);
  v25 = *(_DWORD *)(a3 + 12);
  v27 = v22 + v26;
  v134 = v22;
  v132 = a5;
  v129 = v11;
  v137 = v14;
  v139 = *(_QWORD *)a2 - (v11 & 0xFFFFFFC0);
  v135 = v20;
  if (__OFADD__(v22, v26))
    v27 = (v22 >> 31) + 0x7FFFFFFF;
  v28 = __OFADD__(v24, v25);
  v29 = v24 + v25;
  if (v28)
    v29 = (v24 >> 31) + 0x7FFFFFFF;
  v30 = v24 + 32;
  if (v27 >= 0)
    v31 = v27;
  else
    v31 = v27 + 63;
  v32 = (v29 / 64 - (v30 >> 6) + ((int)(v29 - ((v27 + 63) & 0xFFFFFFC0) + 32) >> 6));
  v33 = WTF::fastMalloc((WTF *)0x28);
  v34 = v33;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  if (v32 >= 0x7FFFFFFF)
    v35 = 0x7FFFFFFFLL;
  else
    v35 = v32;
  *(_QWORD *)v33 = 0;
  *(_DWORD *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + 28) = v35;
  if ((_DWORD)v35)
  {
    if (v35 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1964BAA40);
    }
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v35));
    *(_DWORD *)(v34 + 24) = v35;
    *(_QWORD *)(v34 + 16) = v36;
    v37 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v37)
    {
      v38 = 8 * v37;
      do
      {
        *v36++ = 0xFFFFFFFEFFFFFFFFLL;
        v38 -= 8;
      }
      while (v38);
    }
  }
  v39 = v19 >> 6;
  v40 = v17 - (v19 & 0xFFFFFFC0);
  v41 = v137 + 32;
  v138 = v139 + 32;
  v140 = v39;
  v42 = v40 + 32;
  v43 = v135 >> 6;
  v44 = v18 - (v135 & 0xFFFFFFC0);
  v136 = v42;
  v45 = (v39 - (v138 >> 6) + (v42 >> 6));
  v46 = (v43 - (v41 >> 6) + ((int)(v44 + 32) >> 6));
  v47 = (v23 >> 6) + (v30 >> 6);
  v48 = ((v31 >> 6) - ((int)(v134 + 32) >> 6) + ((int)(v27 - (v31 & 0xFFFFFFC0) + 32) >> 6));
  *(_DWORD *)(v34 + 32) = -v47;
  *(float *)&v147 = (float)(int)v45;
  *((float *)&v147 + 1) = (float)(int)v46;
  v49 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v49 != -1)
  {
    v145 = &v144;
    v142 = &v145;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v142, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v50 = v48 | (v32 << 32);
  v145 = 0;
  cf = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v147, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, &v144, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&cf + 4));
  if (v144)
  {
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 16))(v144);
    if (a1)
    {
      v52 = v51;
      v142 = 0;
      *(float *)&v143 = (float)(int)v45;
      *((float *)&v143 + 1) = (float)(int)v46;
      *(float *)&v53 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
      v145 = 0;
      cf = (CFTypeRef)__PAIR64__(v54, v53);
      (*(void (**)(uint64_t, uint64_t, uint64_t ***, uint64_t **, uint64_t))(*(_QWORD *)v52 + 360))(v52, a1, &v142, &v145, 545);
    }
    LOWORD(v145) = 1;
    v55 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v55 != -1)
    {
      v142 = (uint64_t **)&v141;
      v147 = &v142;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v147, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v142 = 0;
    v143 = v45 | (v46 << 32);
    v141 = off_1E340D360;
    (*(void (**)(uint64_t ****__return_ptr, uint64_t, uint64_t **, uint64_t ***, void (***)(WebCore::ImageBufferAllocator *__hidden)))(*(_QWORD *)v144 + 88))(&v147, v144, &v145, &v142, &v141);
    v56 = v147;
    if (v147)
    {
      if ((int)v45 >= 0)
        v57 = v45;
      else
        v57 = -(int)v45;
      if ((int)v46 >= 0)
        v58 = v46;
      else
        v58 = -(int)v46;
      v59 = v58 * (unint64_t)v57;
      if ((v59 & 0xFFFFFFFF00000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964BAA48);
      }
      if (v59 >> 30)
      {
LABEL_169:
        __break(0xC471u);
        JUMPOUT(0x1964BA9DCLL);
      }
      v60 = (4 * v59);
      v61 = (unint64_t)v147[6];
      if (v61 == v60)
      {
        v62 = (v130 >> 6) + (v41 >> 6);
        v63 = (v47 - v62) & ~((v47 - v62) >> 31);
        v64 = v32 + v47 - v62;
        if (v64 >= (int)v46)
          v64 = v46;
        if (v63 < v64)
        {
          v65 = 255.0;
          v66 = a6 * 255.0;
          if (a6 <= 0.0)
            v66 = 0.0;
          if (a6 < 1.0)
            v65 = v66;
          if ((int)v45 >= 1)
          {
            v67 = (v129 >> 6) + (v138 >> 6);
            v68 = llroundf(v65);
            v69 = (v138 >> 6) - (v136 >> 6) - v140;
            v70 = 3;
            do
            {
              v71 = 0;
              v72 = -1;
              do
              {
                if (v61 <= v70)
                  goto LABEL_169;
                v73 = *((unsigned __int8 *)v56[5] + v70);
                if (v68 < v73 && v72 == -1)
                  v75 = v71;
                else
                  v75 = -1;
                if (v72 == -1)
                {
                  v72 = v75;
                }
                else if (v68 >= v73 || v69 + v71 == -1)
                {
                  v77 = *(int *)(v34 + 32) + (uint64_t)(v63 + v62);
                  if (*(unsigned int *)(v34 + 28) <= v77)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1964BAA28);
                  }
                  v78 = v68 >= v73;
                  v79 = v68 < v73;
                  if (v78)
                    v80 = v71;
                  else
                    v80 = v71 + 1;
                  if (v80 >= v72)
                  {
                    v81 = v72 + v67;
                    v82 = v67 + v71 + v79;
                    v83 = (int *)(*(_QWORD *)(v34 + 16) + 8 * v77);
                    v84 = v83[1];
                    if (v81 >= *v83)
                      v85 = *v83;
                    else
                      v85 = v81;
                    if (v84 <= v82)
                      v86 = v82;
                    else
                      v86 = v83[1];
                    if (v84 >= *v83)
                    {
                      v81 = v85;
                      v82 = v86;
                    }
                    *v83 = v81;
                    v83[1] = v82;
                  }
                  v72 = -1;
                }
                ++v71;
                v70 += 4;
              }
              while (v69 + v71);
              ++v63;
            }
            while (v63 != v64);
          }
        }
      }
    }
    v87 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v87 + 8) = 1;
    *(_QWORD *)v87 = off_1E3441538;
    *(_QWORD *)(v87 + 24) = v34;
    *(_QWORD *)(v87 + 32) = 0;
    *(_QWORD *)(v87 + 40) = v50;
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    v89 = *(unsigned int *)(v34 + 28);
    v90 = *(_DWORD *)(v34 + 32);
    v91 = -v90;
    if ((int)v89 - v90 > -v90)
    {
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      do
      {
        if (v93 >= v89)
        {
          __break(0xC471u);
          JUMPOUT(0x1964BAA30);
        }
        v99 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v92);
        v98 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v92 + 4);
        v88 = (v98 - v99);
        if (v98 > v99 && (int)v88 >= 1)
        {
          v100 = v91 + v93;
          if (v97 < 1 || v96 <= 0)
          {
            v96 = 1;
          }
          else
          {
            if (v99 >= v95)
              v99 = v95;
            if (v100 >= v94)
              v100 = v94;
            v101 = v97 + v95;
            if (v101 <= v98)
              v101 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v92 + 4);
            v102 = v96 + v94;
            if (v102 <= v91 + (int)v93 + 1)
              v102 = v91 + v93 + 1;
            v88 = (v101 - v99);
            v96 = v102 - v100;
          }
          *(_DWORD *)v34 = v99;
          *(_DWORD *)(v34 + 4) = v100;
          v94 = v100;
          v95 = v99;
          v97 = v88;
          *(_DWORD *)(v34 + 8) = v88;
          *(_DWORD *)(v34 + 12) = v96;
        }
        ++v93;
        v92 += 8;
      }
      while ((_DWORD)v89 != (_DWORD)v93);
    }
    *(_BYTE *)(v87 + 12) = a4;
    *(float *)(v87 + 16) = a7;
    *v132 = v87;
    v103 = v147;
    v147 = 0;
    if (v103)
    {
      if (*((_DWORD *)v103 + 2) == 1)
        ((void (*)(uint64_t ***))(*v103)[1])(v103);
      else
        --*((_DWORD *)v103 + 2);
    }
    v104 = cf;
    cf = 0;
    if (v104)
      CFRelease(v104);
  }
  else
  {
    v105 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v105 + 8) = 1;
    *(_QWORD *)v105 = off_1E3441538;
    *(_QWORD *)(v105 + 24) = v34;
    *(_QWORD *)(v105 + 32) = 0;
    *(_QWORD *)(v105 + 40) = v50;
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    v106 = *(unsigned int *)(v34 + 28);
    v107 = *(_DWORD *)(v34 + 32);
    v108 = -v107;
    if ((int)v106 - v107 > -v107)
    {
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      do
      {
        if (v110 >= v106)
        {
          __break(0xC471u);
          JUMPOUT(0x1964BAA38);
        }
        v116 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v109);
        v115 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v109 + 4);
        v88 = (v115 - v116);
        if (v115 > v116 && (int)v88 >= 1)
        {
          v117 = v108 + v110;
          if (v114 < 1 || v113 <= 0)
          {
            v113 = 1;
          }
          else
          {
            if (v116 >= v112)
              v116 = v112;
            if (v117 >= v111)
              v117 = v111;
            v118 = v114 + v112;
            if (v118 <= v115)
              v118 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v109 + 4);
            v119 = v113 + v111;
            if (v119 <= v108 + (int)v110 + 1)
              v119 = v108 + v110 + 1;
            v88 = (v118 - v116);
            v113 = v119 - v117;
          }
          *(_DWORD *)v34 = v116;
          *(_DWORD *)(v34 + 4) = v117;
          v111 = v117;
          v112 = v116;
          v114 = v88;
          *(_DWORD *)(v34 + 8) = v88;
          *(_DWORD *)(v34 + 12) = v113;
        }
        ++v110;
        v109 += 8;
      }
      while ((_DWORD)v106 != (_DWORD)v110);
    }
    *(_BYTE *)(v105 + 12) = a4;
    *(float *)(v105 + 16) = a7;
    *v132 = v105;
  }
  v120 = v144;
  v144 = 0;
  if (v120)
  {
    v121 = *(_QWORD *)(v120 + 8);
    if (__ldaxr((unsigned __int8 *)v121))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v121))
    {
      goto LABEL_148;
    }
    MEMORY[0x19AEA534C](v121);
LABEL_148:
    v123 = *(_QWORD *)(v121 + 8);
    v124 = v123 - 1;
    *(_QWORD *)(v121 + 8) = v123 - 1;
    if (v123 == 1)
    {
      v128 = *(_QWORD *)(v121 + 16);
      v125 = *(_QWORD *)(v121 + 24);
      *(_QWORD *)(v121 + 24) = 0;
      v126 = v128 != 0;
    }
    else
    {
      v125 = 0;
      v126 = 1;
    }
    v127 = __ldxr((unsigned __int8 *)v121);
    if (v127 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v121))
      {
        if (v124)
          return;
LABEL_156:
        if (v125)
          (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
        if (!v126)
          WTF::fastFree((WTF *)v121, (void *)v88);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v121);
    if (v124)
      return;
    goto LABEL_156;
  }
}

unint64_t WebCore::ShapeOutsideInfo::computedShapePhysicalBoundingBox(WebCore::ShapeOutsideInfo *this)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    WebCore::makeShapeForShapeOutside(*(WebCore **)this, &v19);
    v2 = v19;
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v19;
    if (v3)
    {
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        v2 = *((_QWORD *)this + 1);
      }
      else
      {
        --v3[2];
      }
    }
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v6 = HIDWORD(v4);
  v7 = *(_QWORD *)this;
  v8 = *(_DWORD *)(*(_QWORD *)this + 124);
  v9 = (unsigned __int16)v8 >> 13;
  switch((unsigned __int16)v8 >> 13)
  {
    case 1:
    case 3:
    case 5:
      v12 = ((v8 >> 13) & 6) - 2 >= 4;
      v13 = (unsigned int *)(v7 + 160);
      v14 = (unsigned int *)(v7 + 164);
      if (!v12)
        v14 = v13;
      v15 = *v14;
      v16 = (HIDWORD(v4) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v4), v5))
        v16 = HIDWORD(v4) + v5;
      v17 = __OFSUB__(v15, v16);
      LODWORD(v6) = v15 - v16;
      v18 = (v15 >> 31) + 0x7FFFFFFF;
      if (v17)
        v6 = v18;
      else
        v6 = v6;
      goto LABEL_6;
    case 4:
      goto LABEL_9;
    default:
LABEL_6:
      if ((v9 - 2) > 3)
        return v4 | (v6 << 32);
LABEL_9:
      v11 = v6;
      v6 = v4;
      LODWORD(v4) = v11;
      return v4 | (v6 << 32);
  }
}

uint64_t WebCore::ShapeOutsideInfo::computedShape(WebCore::ShapeOutsideInfo *this)
{
  uint64_t result;
  _DWORD *v3;
  uint64_t v4;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    WebCore::makeShapeForShapeOutside(*(WebCore **)this, &v4);
    result = v4;
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v3)
    {
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return *((_QWORD *)this + 1);
      }
      else
      {
        --v3[2];
      }
    }
  }
  return result;
}

unint64_t WebCore::computeLogicalBoxSize(WebCore *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 240);
  v3 = __ROR8__(*((_QWORD *)this + 20), 32);
  if ((_DWORD)a2)
    v4 = *((_QWORD *)this + 20);
  else
    v4 = v3;
  v5 = HIDWORD(v4);
  switch(*(_BYTE *)(v2 + 24))
  {
    case 0:
      if (*(_DWORD *)(v2 + 4) != 2)
        goto LABEL_23;
      goto LABEL_6;
    case 1:
LABEL_23:
      v21 = *(_QWORD *)this;
      if ((_DWORD)a2)
      {
        v22 = (*(uint64_t (**)(WebCore *))(v21 + 1096))(this);
        v23 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1104))(this);
        if (__OFADD__(v22, v23))
          v24 = (v22 >> 31) + 0x7FFFFFFF;
        else
          v24 = v22 + v23;
        v25 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1080))(this);
        v26 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1088))(this);
      }
      else
      {
        v43 = (*(uint64_t (**)(WebCore *))(v21 + 1080))(this);
        v44 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1088))(this);
        if (__OFADD__(v43, v44))
          v24 = (v43 >> 31) + 0x7FFFFFFF;
        else
          v24 = v43 + v44;
        v25 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1096))(this);
        v26 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1104))(this);
      }
      v45 = v25 + v26;
      if (__OFADD__(v25, v26))
        v45 = (v25 >> 31) + 0x7FFFFFFF;
      if (__OFADD__((_DWORD)v4, v24))
        LODWORD(v4) = (v4 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v4) = v4 + v24;
      v41 = __OFADD__((_DWORD)v5, v45);
      v42 = v5 + v45;
      goto LABEL_64;
    case 3:
      v27 = *(_QWORD *)this;
      if ((_DWORD)a2)
      {
        v28 = (*(uint64_t (**)(WebCore *))(v27 + 1032))(this);
        v29 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1040))(this);
      }
      else
      {
        v28 = (*(uint64_t (**)(WebCore *))(v27 + 1040))(this);
        v29 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1032))(this);
      }
      if (__OFSUB__((_DWORD)v4, v28))
        LODWORD(v4) = (v4 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v4) = v4 - v28;
      v41 = __OFSUB__((_DWORD)v5, v29);
      v42 = v5 - v29;
      v46 = (v5 >> 31) + 0x7FFFFFFF;
      goto LABEL_70;
    case 4:
LABEL_6:
      v7 = *(_QWORD *)this;
      if ((_DWORD)a2)
      {
        v8 = (*(uint64_t (**)(WebCore *))(v7 + 1016))(this);
        v9 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1024))(this);
        if (__OFADD__(v8, v9))
          v10 = (v8 >> 31) + 0x7FFFFFFF;
        else
          v10 = v8 + v9;
        v11 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 944))(this);
        if (__OFADD__(v10, v11))
          v12 = (v10 >> 31) + 0x7FFFFFFF;
        else
          v12 = v10 + v11;
        v13 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 952))(this);
        if (__OFADD__(v12, v13))
          v14 = (v12 >> 31) + 0x7FFFFFFF;
        else
          v14 = v12 + v13;
        v15 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1000))(this);
        v16 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1008))(this);
        if (__OFADD__(v15, v16))
          v17 = (v15 >> 31) + 0x7FFFFFFF;
        else
          v17 = v15 + v16;
        v18 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 928))(this);
        if (__OFADD__(v17, v18))
          v19 = (v17 >> 31) + 0x7FFFFFFF;
        else
          v19 = v17 + v18;
        v20 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 936))(this);
      }
      else
      {
        v30 = (*(uint64_t (**)(WebCore *))(v7 + 1000))(this);
        v31 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1008))(this);
        if (__OFADD__(v30, v31))
          v32 = (v30 >> 31) + 0x7FFFFFFF;
        else
          v32 = v30 + v31;
        v33 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 928))(this);
        if (__OFADD__(v32, v33))
          v34 = (v32 >> 31) + 0x7FFFFFFF;
        else
          v34 = v32 + v33;
        v35 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 936))(this);
        if (__OFADD__(v34, v35))
          v14 = (v34 >> 31) + 0x7FFFFFFF;
        else
          v14 = v34 + v35;
        v36 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1016))(this);
        v37 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1024))(this);
        if (__OFADD__(v36, v37))
          v38 = (v36 >> 31) + 0x7FFFFFFF;
        else
          v38 = v36 + v37;
        v39 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 944))(this);
        if (__OFADD__(v38, v39))
          v19 = (v38 >> 31) + 0x7FFFFFFF;
        else
          v19 = v38 + v39;
        v20 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 952))(this);
      }
      v40 = v19 + v20;
      if (__OFADD__(v19, v20))
        v40 = (v19 >> 31) + 0x7FFFFFFF;
      if (__OFSUB__((_DWORD)v4, v14))
        LODWORD(v4) = (v4 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v4) = v4 - v14;
      v41 = __OFSUB__((_DWORD)v5, v40);
      v42 = v5 - v40;
LABEL_64:
      v46 = (v5 >> 31) + 0x7FFFFFFF;
LABEL_70:
      if (v41)
        v5 = v46;
      else
        v5 = v42;
      break;
    default:
      return v4 | (v5 << 32);
  }
  return v4 | (v5 << 32);
}

WTF *WebCore::makeShapeForShapeOutside@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::RenderObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  WebCore::RenderObject *v38;
  int v39;
  uint64_t (**v40)(_QWORD);
  unsigned int v41;
  int v42;
  int v43;
  int32x4_t v44;
  WTF *v45;
  int32x4_t v46;
  int32x4_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  WTF *result;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int32x2_t v60;
  int8x16_t v61;
  int32x2_t v62;
  float32x4_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  signed int v102;
  int v103;
  unint64_t v104;
  WebCore::Length *v105;
  WebCore::RenderObject *v106;
  unsigned int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  WebCore::RenderObject *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  const WebCore::FloatSize *v127;
  _UNKNOWN *__ptr32 *v128;
  WTF *v129;
  float v130;
  float v131;
  char v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  WTF *v137;
  WebCore::Length *v138;
  float v139;
  unsigned int v140;
  WebCore::Length *v141;
  float v142;
  unsigned int v143;
  WebCore::Length *v144;
  float v145;
  unsigned int v146;
  uint64_t v147;
  float v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  WebCore::Length *v153;
  float v154;
  float v155;
  uint64_t v156;
  uint64_t v157;
  WebCore::Length *v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float *v163;
  _UNKNOWN *__ptr32 *v164;
  float v165;
  char v166;
  void *v167;
  float v168;
  float v169;
  float v170;
  float v171;
  WebCore::Length *v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  WebCore::Length *v180;
  float v181;
  WebCore::Length *v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  WebCore::Length *v194;
  WebCore::Length *v195;
  float v196;
  float v197;
  float v198;
  WebCore::Length *v199;
  float v200;
  float v201;
  float v202;
  WebCore::Length *v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  const WebCore::FloatSize *v211;
  float v212;
  float v213;
  float v214;
  const WebCore::FloatSize *v215;
  float v216;
  float v217;
  float v218;
  const WebCore::FloatSize *v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  WebCore::Length *v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  _BOOL4 v248;
  _BOOL4 v249;
  _BOOL4 v250;
  _BOOL4 v251;
  _BOOL4 v252;
  _BOOL4 v253;
  float v254;
  float v255;
  _BOOL4 v256;
  _BOOL4 v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  int v267;
  int v268;
  BOOL v269;
  float v270;
  float v271;
  float v272;
  float32x4_t v273;
  unsigned int v274;
  float v275;
  float32x4_t v276;
  char v277;
  float v278;
  uint64_t *v279;
  float32x4_t v280;
  uint64_t *v281;
  float v282;
  WTF *v283[2];
  int32x4_t v284;
  int32x4_t v285;
  float v286[2];
  WTF *v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;

  v5 = WebCore::RenderObject::containingBlock(this);
  v6 = *((_DWORD *)v5 + 31);
  v7 = *((_DWORD *)v5 + 5);
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v9 = *(float *)(v8 + 256);
  v10 = *(_QWORD *)(v8 + 240);
  v11 = WebCore::computeLogicalBoxSize(this, (const WebCore::RenderBox *)((v7 & 0x1000) == 0));
  v290 = v11;
  v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v13 = *((_DWORD *)v5 + 40);
  v14 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1016))(v5);
  if (__OFSUB__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v15 = v13 - v14;
  v16 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1024))(v5);
  if (__OFSUB__(v15, v16))
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v17 = v15 - v16;
  v18 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1352))(v5);
  v19 = v18 << 6;
  if (v18 < -33554432)
    v19 = 0x80000000;
  if (v18 > 0x1FFFFFF)
    v19 = 0x7FFFFFFF;
  v20 = __OFSUB__(v17, v19);
  v21 = v17 - v19;
  if (v20)
    v21 = (v17 >> 31) + 0x7FFFFFFF;
  v22 = v21 & ~(v21 >> 31);
  v23 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 944))(v5);
  v20 = __OFSUB__(v22, v23);
  v24 = v22 - v23;
  if (v20)
    v24 = 0x7FFFFFFF;
  v25 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 952))(v5);
  if (__OFSUB__(v24, v25))
    v26 = (v24 >> 31) + 0x7FFFFFFF;
  else
    v26 = v24 - v25;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 584) & 0x100) != 0)
  {
    v267 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1352))(v5);
    v268 = v267 << 6;
    if (v267 > 0x1FFFFFF)
      v268 = 0x7FFFFFFF;
    if (v267 >= -33554432)
      v27 = v268;
    else
      v27 = 0x80000000;
  }
  else
  {
    v27 = 0;
  }
  v28 = (unsigned __int16)v6 >> 13;
  v20 = __OFSUB__(v26, v27);
  v29 = v26 - v27;
  if (v20)
    v29 = (v26 >> 31) + 0x7FFFFFFF;
  v30 = v29 & ~(v29 >> 31);
  if (*(_BYTE *)(v12 + 252) == 3)
  {
    v31 = *(float *)(v12 + 248);
    if (!*(_BYTE *)(v12 + 254))
      v31 = (float)*(int *)(v12 + 248);
    v32 = (float)((float)((float)v30 * 0.015625) * v31) / 100.0;
  }
  else
  {
    v32 = 0.0;
    v105 = (WebCore::Length *)(v12 + 248);
    switch(*(_BYTE *)(v12 + 252))
    {
      case 0:
      case 1:
      case 9:
        v32 = (float)v30 * 0.015625;
        break;
      case 4:
        if (*(_BYTE *)(v12 + 254))
          v32 = *(float *)v105;
        else
          v32 = (float)*(int *)v105;
        break;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue(v105, (float)v30 * 0.015625);
        break;
      default:
        break;
    }
  }
  v33 = v32;
  v34 = *(_DWORD *)(v10 + 4);
  if (v34 == 2)
  {
    v279 = a2;
    v48 = *(_QWORD *)(v10 + 16);
    v49 = WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions((uint64_t)this, v48, (int *)&v290, 1);
    *(float *)v283 = (float)(int)v49 * 0.015625;
    *((float *)v283 + 1) = (float)SHIDWORD(v49) * 0.015625;
    (*(void (**)(uint64_t, WebCore *, WTF **, float))(*(_QWORD *)v48 + 216))(v48, this, v283, *(float *)(*((_QWORD *)this + 13) + 184));
    v50 = *((_DWORD *)this + 31);
    v51 = ((unsigned __int16)v50 >> 13) - 2;
    v52 = v28;
    if (v51 > 3)
      v53 = 3;
    else
      v53 = qword_1969FDC98[v51];
    v64 = v50 >> 13;
    v65 = *(_QWORD *)this;
    v66 = *((_DWORD *)this + v53 + 42);
    if (v66 == 0x80000000)
      v67 = 0x7FFFFFFF;
    else
      v67 = -v66;
    if ((v64 & 6) - 2 < 4)
    {
      v68 = (*(uint64_t (**)(WebCore *))(v65 + 1000))(this);
      v69 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 928))(this);
    }
    else
    {
      v68 = (*(uint64_t (**)(WebCore *))(v65 + 1016))(this);
      v69 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 944))(this);
    }
    v70 = v68 + v69;
    if (__OFADD__(v68, v69))
      v70 = (v68 >> 31) + 0x7FFFFFFF;
    v71 = v67 - v70;
    if (__OFSUB__(v67, v70))
      v71 = (v67 >> 31) + 0x7FFFFFFF;
    v72 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    if (v72 > 4)
      v73 = 0;
    else
      v73 = qword_1969FDCB8[v72];
    v74 = *((_DWORD *)this + v73 + 42);
    if (v74 == 0x80000000)
      v75 = 0x7FFFFFFF;
    else
      v75 = -v74;
    v76 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1048))(this);
    v77 = v75 - v76;
    if (__OFSUB__(v75, v76))
      v77 = (v75 >> 31) + 0x7FFFFFFF;
    v78 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 960))(this);
    v79 = v77 - v78;
    if (__OFSUB__(v77, v78))
      v79 = (v77 >> 31) + 0x7FFFFFFF;
    v80 = (*(uint64_t (**)(WebCore *, _QWORD))(*(_QWORD *)this + 1128))(this, 0);
    v81 = (*(uint64_t (**)(WebCore *, _QWORD))(*(_QWORD *)this + 1136))(this, 0);
    v82 = v80 + v81;
    if (__OFADD__(v80, v81))
      v82 = (v80 >> 31) + 0x7FFFFFFF;
    v83 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1064))(this);
    v84 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1072))(this);
    v85 = v83 + v84;
    if (__OFADD__(v83, v84))
      v85 = (v83 >> 31) + 0x7FFFFFFF;
    v86 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 976))(this);
    v87 = v85 + v86;
    if (__OFADD__(v85, v86))
      v87 = (v85 >> 31) + 0x7FFFFFFF;
    v88 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 984))(this);
    v89 = v87 + v88;
    if (__OFADD__(v87, v88))
      v89 = (v87 >> 31) + 0x7FFFFFFF;
    v90 = v82 + v89;
    if (__OFADD__(v82, v89))
      v90 = (v82 >> 31) + 0x7FFFFFFF;
    v91 = (*(uint64_t (**)(WebCore *, _QWORD))(*(_QWORD *)this + 1112))(this, 0);
    v92 = (*(uint64_t (**)(WebCore *, _QWORD))(*(_QWORD *)this + 1120))(this, 0);
    v93 = v91 + v92;
    if (__OFADD__(v91, v92))
      v93 = (v91 >> 31) + 0x7FFFFFFF;
    v94 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1048))(this);
    v95 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 960))(this);
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
      v96 = (v94 >> 31) + 0x7FFFFFFF;
    v97 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1056))(this);
    v98 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 968))(this);
    v99 = v97 + v98;
    if (__OFADD__(v97, v98))
      v99 = (v97 >> 31) + 0x7FFFFFFF;
    v20 = __OFADD__(v96, v99);
    v100 = v96 + v99;
    if (v20)
      v100 = (v96 >> 31) + 0x7FFFFFFF;
    v20 = __OFADD__(v93, v100);
    v101 = v93 + v100;
    if (v20)
      v101 = (v93 >> 31) + 0x7FFFFFFF;
    v102 = v290 + v90;
    if (__OFADD__((_DWORD)v290, v90))
      v102 = (v290 >> 31) + 0x7FFFFFFF;
    v20 = __OFADD__(HIDWORD(v290), v101);
    v103 = HIDWORD(v290) + v101;
    if (v20)
      v103 = (HIDWORD(v290) >> 31) + 0x7FFFFFFF;
    LODWORD(v283[0]) = v71;
    HIDWORD(v283[0]) = v79;
    LODWORD(v283[1]) = v102 & ~(v102 >> 31);
    HIDWORD(v283[1]) = v103 & ~(v103 >> 31);
    if ((*((_BYTE *)this + 52) & 7) == 3 && (*((_BYTE *)this + 53) & 1) != 0)
    {
      v288 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
      v288 = WebCore::RenderReplaced::replacedContentRect(this, (int32x2_t *)&v288);
      v289 = v104;
    }
    else
    {
      v288 = 0;
      v289 = v49;
    }
    v286[0] = (float)(int)v49 * 0.015625;
    v286[1] = (float)SHIDWORD(v49) * 0.015625;
    (*(void (**)(WTF **__return_ptr, uint64_t, WebCore *, float *, _QWORD))(*(_QWORD *)v48 + 176))(&v287, v48, this, v286, 0);
    WebCore::Shape::createRasterShape((uint64_t)v287, (uint64_t)&v288, (uint64_t)v283, v52, v279, v9, v33);
    result = v287;
    v287 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    if (v34 == 1)
    {
      if (*(unsigned __int8 *)(v10 + 24) <= 1u)
        v43 = 1;
      else
        v43 = *(unsigned __int8 *)(v10 + 24);
      WebCore::computeRoundedRectForBoxShape(v43, this, (uint64_t)v283);
      v44.i64[0] = (uint64_t)v283[0];
      v45 = v283[1];
      v46 = v284;
      if ((v7 & 0x1000) != 0)
      {
        v55 = (int32x2_t)vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u64[0];
        v56 = vzip1_s32(*(int32x2_t *)v284.i8, v55);
        v57 = vzip2_s32(*(int32x2_t *)v284.i8, v55);
        v46 = vrev64q_s32(v284);
        v58.i64[0] = vdup_lane_s32((int32x2_t)v283[0], 1).u32[0];
        v58.i64[1] = HIDWORD(v283[1]);
        v59 = vorrq_s8((int8x16_t)vshll_n_s32(vzip1_s32((int32x2_t)v283[0], (int32x2_t)v283[1]), 0x20uLL), v58);
        v47 = vrev64q_s32(v285);
        v58.i64[0] = v57.u32[0];
        v58.i64[1] = v57.u32[1];
        *(int8x16_t *)v283 = v59;
        v284 = (int32x4_t)vorrq_s8((int8x16_t)vshll_n_s32(v56, 0x20uLL), v58);
        v60 = (int32x2_t)vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u64[0];
        v61 = (int8x16_t)vshll_n_s32(vzip1_s32(*(int32x2_t *)v285.i8, v60), 0x20uLL);
        v62 = vzip2_s32(*(int32x2_t *)v285.i8, v60);
        v58.i64[0] = v62.u32[0];
        v58.i64[1] = v62.u32[1];
        v285 = (int32x4_t)vorrq_s8(v61, v58);
      }
      else
      {
        v47 = v285;
        v45 = (WTF *)vrev64_s32((int32x2_t)v283[1]);
        *(int32x2_t *)v44.i8 = vrev64_s32((int32x2_t)v283[0]);
      }
      v44.i64[1] = (uint64_t)v45;
      v273 = vcvtq_f32_s32(v44);
      v276 = vcvtq_f32_s32(v46);
      v280 = vcvtq_f32_s32(v47);
      result = (WTF *)WTF::fastMalloc((WTF *)0x48);
      *((_DWORD *)result + 2) = 1;
      *(_QWORD *)result = off_1E34414B8;
      v63 = (float32x4_t)vdupq_n_s32(0x3C800000u);
      *(int32x4_t *)((char *)result + 20) = vrev64q_s32((int32x4_t)vmulq_f32(v273, v63));
      *(float32x4_t *)((char *)result + 36) = vmulq_f32(v276, v63);
      *(float32x4_t *)((char *)result + 52) = vmulq_f32(v280, v63);
      *((_BYTE *)result + 12) = v28;
      *((float *)result + 4) = v33;
    }
    else
    {
      if (!v34)
      {
        v35 = HIDWORD(v11);
        if ((*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 1) != 0)
        {
          v36 = 0;
LABEL_119:
          v114 = 0;
          v115 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 240);
          switch(*(_BYTE *)(v115 + 24))
          {
            case 0:
              if (*(_DWORD *)(v115 + 4) == 2)
                goto LABEL_121;
              goto LABEL_126;
            case 1:
LABEL_126:
              v119 = ((unsigned __int16)*((_DWORD *)WebCore::RenderObject::containingBlock(this) + 31) >> 13) - 1;
              if (v119 > 4)
                v120 = 0;
              else
                v120 = qword_1969FDCB8[v119];
              v123 = *((_DWORD *)this + v120 + 42);
              if (v123 == 0x80000000)
                v114 = 0x7FFFFFFF;
              else
                v114 = -v123;
              break;
            case 3:
              v121 = ((unsigned __int16)*((_DWORD *)WebCore::RenderObject::containingBlock(this) + 31) >> 13) - 1;
              if (v121 > 4)
                v122 = 125;
              else
                v122 = qword_1969FDC70[v121];
              v114 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 8 * v122))(this);
              break;
            case 4:
LABEL_121:
              v116 = ((unsigned __int16)*((_DWORD *)WebCore::RenderObject::containingBlock(this) + 31) >> 13) - 1;
              switch(v116)
              {
                case 0:
                  v117 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1008))(this);
                  v118 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 936))(this);
                  break;
                case 1:
                case 3:
                  v117 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1016))(this);
                  v118 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 944))(this);
                  break;
                case 2:
                case 4:
                  v117 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1024))(this);
                  v118 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 952))(this);
                  break;
                default:
                  v117 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1000))(this);
                  v118 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 928))(this);
                  break;
              }
              v114 = v117 + v118;
              if (__OFADD__(v117, v118))
                v114 = (v117 >> 31) + 0x7FFFFFFF;
              break;
            default:
              break;
          }
          v124 = *(_QWORD *)(v10 + 8);
          v277 = v28;
          v274 = v28 - 2;
          if ((v28 - 2) >= 4)
            v125 = HIDWORD(v11);
          else
            v125 = v11;
          if ((v28 - 2) >= 4)
            v126 = v11;
          else
            v126 = HIDWORD(v11);
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124);
          v129 = 0;
          v130 = (float)v126 * 0.015625;
          v131 = (float)v125 * 0.015625;
          v132 = v277;
          switch((int)result)
          {
            case 0:
              v133 = v36;
              v281 = a2;
              v134 = *(unsigned int *)(v124 + 28);
              v135 = v134 >> 1;
              v283[0] = 0;
              LODWORD(v283[1]) = 0;
              HIDWORD(v283[1]) = v134 >> 1;
              if (v134 >= 2)
              {
                if (v134 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964BC964);
                }
                v137 = (WTF *)WTF::fastMalloc((WTF *)(8 * v135));
                LODWORD(v283[1]) = v134 >> 1;
                v283[0] = v137;
                bzero(v137, 8 * v135);
                v136 = v274;
              }
              else
              {
                v136 = v274;
                if (!(_DWORD)v134)
                {
LABEL_187:
                  v166 = *(_BYTE *)(v124 + 12);
                  v129 = (WTF *)WTF::fastMalloc((WTF *)0x58);
                  *((_DWORD *)v129 + 2) = 1;
                  *(_QWORD *)v129 = off_1E34414F8;
                  WebCore::FloatPolygon::FloatPolygon((uint64_t *)v129 + 3, (uint64_t *)v283, v166);
                  result = v283[0];
                  if (v283[0])
                    result = (WTF *)WTF::fastFree(v283[0], v167);
                  a2 = v281;
                  goto LABEL_190;
                }
                v137 = 0;
              }
              v147 = 0;
              v148 = (float)v133 * 0.015625;
              v149 = 2;
              do
              {
                v150 = v149 - 2;
                v151 = *(_DWORD *)(v124 + 28);
                if (v151 <= v149 - 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964BC7E8);
                }
                v152 = *(_QWORD *)(v124 + 16);
                v153 = (WebCore::Length *)(v152 + 8 * v147);
                v154 = v130;
                switch(*((_BYTE *)v153 + 4))
                {
                  case 0:
                  case 1:
                  case 9:
                    break;
                  case 3:
                    v155 = *(float *)v153;
                    if (!*(_BYTE *)(v152 + 8 * v147 + 6))
                      v155 = (float)*(int *)v153;
                    v154 = (float)(v130 * v155) / 100.0;
                    break;
                  case 4:
                    if (*(_BYTE *)(v152 + 8 * v147 + 6))
                      v154 = *(float *)v153;
                    else
                      v154 = (float)*(int *)v153;
                    break;
                  case 0xB:
                    v164 = v128;
                    WebCore::Length::nonNanCalculatedValue(v153, v130);
                    v128 = v164;
                    v136 = v274;
                    v154 = v165;
                    v151 = *(_DWORD *)(v124 + 28);
                    break;
                  default:
                    v154 = 0.0;
                    break;
                }
                if (v151 <= v149 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964BC7F0);
                }
                v156 = v149 - 1;
                v157 = *(_QWORD *)(v124 + 16);
                v158 = (WebCore::Length *)(v157 + 8 * v156);
                v159 = v131;
                switch(*((_BYTE *)v158 + 4))
                {
                  case 0:
                  case 1:
                  case 9:
                    break;
                  case 3:
                    v160 = *(float *)v158;
                    if (!*(_BYTE *)(v157 + 8 * v156 + 6))
                      v160 = (float)*(int *)v158;
                    v159 = (float)(v131 * v160) / 100.0;
                    break;
                  case 4:
                    if (*(_BYTE *)(v157 + 8 * v156 + 6))
                      v159 = *(float *)v158;
                    else
                      v159 = (float)*(int *)v158;
                    break;
                  case 0xB:
                    WebCore::Length::nonNanCalculatedValue(v158, v131);
                    v128 = &jpt_1964BBBEC;
                    v136 = v274;
                    break;
                  default:
                    v159 = 0.0;
                    break;
                }
                v161 = (float)((float)v114 * 0.015625) + v159;
                switch(v136)
                {
                  case 0u:
                  case 2u:
                    v162 = v148 + v154;
                    goto LABEL_186;
                  case 1u:
                  case 3u:
                    v162 = (float)((float)(int)v35 * 0.015625) - (float)(v148 + v154);
LABEL_186:
                    v136 = v274;
                    break;
                  default:
                    v162 = v161;
                    v161 = v148 + v154;
                    break;
                }
                if (v135 <= v150 >> 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964BC7F8);
                }
                v163 = (float *)((char *)v137 + 8 * (v150 >> 1));
                *v163 = v161;
                v163[1] = v162;
                v147 = v149;
                v149 += 2;
              }
              while (v134 > v150 + 2);
              goto LABEL_187;
            case 1:
              goto LABEL_356;
            case 2:
              v141 = (WebCore::Length *)(v124 + 20);
              v142 = (float)v126 * 0.015625;
              v143 = v274;
              switch(*(_BYTE *)(v124 + 24))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 2:
                case 5:
                case 6:
                case 7:
                case 8:
                case 0xA:
                case 0xC:
                case 0xD:
                  v142 = 0.0;
                  break;
                case 3:
                  v169 = *(float *)(v124 + 20);
                  if (!*(_BYTE *)(v124 + 26))
                    v169 = (float)SLODWORD(v169);
                  v142 = (float)(v130 * v169) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 26))
                    v142 = *(float *)v141;
                  else
                    v142 = (float)*(int *)v141;
                  break;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue(v141, (float)v126 * 0.015625);
                  goto LABEL_397;
                default:
                  v142 = 0.0;
LABEL_397:
                  v143 = v274;
                  break;
              }
              if (*(_BYTE *)(v124 + 16))
                v181 = v130 - v142;
              else
                v181 = v142;
              v182 = (WebCore::Length *)(v124 + 40);
              v183 = v131;
              switch(*(_BYTE *)(v124 + 44))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 3:
                  v184 = *(float *)(v124 + 40);
                  if (!*(_BYTE *)(v124 + 46))
                    v184 = (float)SLODWORD(v184);
                  v183 = (float)(v131 * v184) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 46))
                    v183 = *(float *)v182;
                  else
                    v183 = (float)*(int *)v182;
                  break;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue(v182, v131);
                  v143 = v274;
                  break;
                default:
                  v183 = 0.0;
                  break;
              }
              if (*(_BYTE *)(v124 + 36))
                v185 = v131 - v183;
              else
                v185 = v183;
              if (*(_BYTE *)(v124 + 64))
              {
                v186 = vabds_f32(v130, v181);
                v187 = vabds_f32(v131, v185);
                v188 = fabsf(v181);
                v189 = fabsf(v185);
                if (v188 >= v186)
                  v190 = v188;
                else
                  v190 = v186;
                if (v189 >= v187)
                  v191 = v189;
                else
                  v191 = v187;
                if (v190 < v191)
                  v190 = v191;
                if (v187 >= v189)
                  v187 = v189;
                if (v186 >= v188)
                  v186 = v188;
                if (v187 < v186)
                  v186 = v187;
                if (*(_BYTE *)(v124 + 64) == 1)
                  v192 = v186;
                else
                  v192 = v190;
              }
              else
              {
                v193 = hypotf((float)v126 * 0.015625, v131);
                v194 = (WebCore::Length *)(v124 + 56);
                v192 = v193 / 1.4142;
                v143 = v274;
                switch(*(_BYTE *)(v124 + 60))
                {
                  case 0:
                  case 1:
                  case 9:
                    break;
                  case 2:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 0xA:
                  case 0xC:
                  case 0xD:
                    v192 = 0.0;
                    break;
                  case 3:
                    v236 = *(float *)(v124 + 56);
                    if (!*(_BYTE *)(v124 + 62))
                      v236 = (float)SLODWORD(v236);
                    v192 = (float)(v192 * v236) / 100.0;
                    break;
                  case 4:
                    if (*(_BYTE *)(v124 + 62))
                      v192 = *(float *)v194;
                    else
                      v192 = (float)*(int *)v194;
                    break;
                  case 0xB:
                    WebCore::Length::nonNanCalculatedValue(v194, v193 / 1.4142);
                    v143 = v274;
                    v192 = v265;
                    break;
                  default:
                    v192 = 0.0;
                    v143 = v274;
                    break;
                }
              }
              switch(v143)
              {
                case 0u:
                case 2u:
                  v245 = v181;
                  goto LABEL_450;
                case 1u:
                case 3u:
                  v245 = (float)((float)(int)v35 * 0.015625) - v181;
LABEL_450:
                  v132 = v277;
                  break;
                default:
                  v245 = v185;
                  v185 = v181;
                  break;
              }
              v246 = (float)((float)v114 * 0.015625) + v245;
              result = (WTF *)WTF::fastMalloc((WTF *)0x30);
              v129 = result;
              *((_DWORD *)result + 2) = 1;
              *(_QWORD *)result = off_1E34416B0;
              *((float *)result + 5) = (float)((float)((float)v36 * 0.015625) + v185) - v192;
              *((float *)result + 6) = v246 - v192;
              *((float *)result + 7) = v192 + v192;
              *((float *)result + 8) = v192 + v192;
              *((float *)result + 9) = v192;
              *((float *)result + 10) = v192;
              goto LABEL_356;
            case 3:
              v138 = (WebCore::Length *)(v124 + 20);
              v139 = (float)v126 * 0.015625;
              v140 = v274;
              switch(*(_BYTE *)(v124 + 24))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 2:
                case 5:
                case 6:
                case 7:
                case 8:
                case 0xA:
                case 0xC:
                case 0xD:
                  v139 = 0.0;
                  break;
                case 3:
                  v168 = *(float *)(v124 + 20);
                  if (!*(_BYTE *)(v124 + 26))
                    v168 = (float)SLODWORD(v168);
                  v139 = (float)(v130 * v168) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 26))
                    v139 = *(float *)v138;
                  else
                    v139 = (float)*(int *)v138;
                  break;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue(v138, (float)v126 * 0.015625);
                  goto LABEL_395;
                default:
                  v139 = 0.0;
LABEL_395:
                  v140 = v274;
                  break;
              }
              if (*(_BYTE *)(v124 + 16))
                v171 = v130 - v139;
              else
                v171 = v139;
              v172 = (WebCore::Length *)(v124 + 40);
              v173 = v131;
              switch(*(_BYTE *)(v124 + 44))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 3:
                  v174 = *(float *)(v124 + 40);
                  if (!*(_BYTE *)(v124 + 46))
                    v174 = (float)SLODWORD(v174);
                  v173 = (float)(v131 * v174) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 46))
                    v173 = *(float *)v172;
                  else
                    v173 = (float)*(int *)v172;
                  break;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue(v172, v131);
                  v140 = v274;
                  break;
                default:
                  v173 = 0.0;
                  break;
              }
              if (*(_BYTE *)(v124 + 36))
                v175 = v131 - v173;
              else
                v175 = v173;
              if (*(_BYTE *)(v124 + 64))
              {
                v176 = vabds_f32(v130, v171);
                v177 = fabsf(v171);
                if (v177 >= v176)
                  v178 = v177;
                else
                  v178 = v176;
                if (v176 >= v177)
                  v176 = v177;
                if (*(_BYTE *)(v124 + 64) == 1)
                  v179 = v176;
                else
                  v179 = v178;
              }
              else
              {
                v180 = (WebCore::Length *)(v124 + 56);
                v179 = fabsf(v130);
                switch(*(_BYTE *)(v124 + 60))
                {
                  case 0:
                  case 1:
                  case 9:
                    break;
                  case 3:
                    v235 = *(float *)(v124 + 56);
                    if (!*(_BYTE *)(v124 + 62))
                      v235 = (float)SLODWORD(v235);
                    v179 = (float)(v179 * v235) / 100.0;
                    break;
                  case 4:
                    if (*(_BYTE *)(v124 + 62))
                      v179 = *(float *)v180;
                    else
                      v179 = (float)*(int *)v180;
                    break;
                  case 0xB:
                    WebCore::Length::nonNanCalculatedValue(v180, v179);
                    v140 = v274;
                    v179 = v264;
                    break;
                  default:
                    v179 = 0.0;
                    break;
                }
              }
              if (*(_BYTE *)(v124 + 76))
              {
                v237 = vabds_f32(v131, v175);
                v238 = fabsf(v175);
                if (v238 >= v237)
                  v239 = v238;
                else
                  v239 = v237;
                if (v237 >= v238)
                  v237 = v238;
                if (*(_BYTE *)(v124 + 76) == 1)
                  v240 = v237;
                else
                  v240 = v239;
              }
              else
              {
                v241 = (WebCore::Length *)(v124 + 68);
                v240 = fabsf(v131);
                switch(*(_BYTE *)(v124 + 72))
                {
                  case 0:
                  case 1:
                  case 9:
                    break;
                  case 3:
                    v242 = *(float *)(v124 + 68);
                    if (!*(_BYTE *)(v124 + 74))
                      v242 = (float)SLODWORD(v242);
                    v240 = (float)(v240 * v242) / 100.0;
                    break;
                  case 4:
                    if (*(_BYTE *)(v124 + 74))
                      v240 = *(float *)v241;
                    else
                      v240 = (float)*(int *)v241;
                    break;
                  case 0xB:
                    WebCore::Length::nonNanCalculatedValue(v241, v240);
                    v140 = v274;
                    v240 = v266;
                    break;
                  default:
                    v240 = 0.0;
                    break;
                }
              }
              switch(v140)
              {
                case 0u:
                case 2u:
                  v243 = v171;
                  goto LABEL_446;
                case 1u:
                case 3u:
                  v243 = (float)((float)(int)v35 * 0.015625) - v171;
LABEL_446:
                  v132 = v277;
                  break;
                default:
                  v243 = v175;
                  v175 = v171;
                  break;
              }
              v244 = (float)((float)v114 * 0.015625) + v243;
              result = (WTF *)WTF::fastMalloc((WTF *)0x30);
              v129 = result;
              *((_DWORD *)result + 2) = 1;
              *(_QWORD *)result = off_1E34416B0;
              *((float *)result + 5) = (float)((float)((float)v36 * 0.015625) + v175) - v179;
              *((float *)result + 6) = v244 - v240;
              *((float *)result + 7) = v179 + v179;
              *((float *)result + 8) = v240 + v240;
              *((float *)result + 9) = v179;
              *((float *)result + 10) = v240;
              goto LABEL_356;
            case 4:
              v144 = (WebCore::Length *)(v124 + 36);
              v145 = (float)v126 * 0.015625;
              v146 = v274;
              switch(*(_BYTE *)(v124 + 40))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 2:
                case 5:
                case 6:
                case 7:
                case 8:
                case 0xA:
                case 0xC:
                case 0xD:
                  v145 = 0.0;
                  break;
                case 3:
                  v170 = *(float *)(v124 + 36);
                  if (!*(_BYTE *)(v124 + 42))
                    v170 = (float)SLODWORD(v170);
                  v145 = (float)(v130 * v170) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 42))
                    v145 = *(float *)v144;
                  else
                    v145 = (float)*(int *)v144;
                  break;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue(v144, (float)v126 * 0.015625);
                  goto LABEL_399;
                default:
                  v145 = 0.0;
LABEL_399:
                  v146 = v274;
                  break;
              }
              v195 = (WebCore::Length *)(v124 + 20);
              v196 = v131;
              switch(*(_BYTE *)(v124 + 24))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 3:
                  v197 = *(float *)(v124 + 20);
                  if (!*(_BYTE *)(v124 + 26))
                    v197 = (float)SLODWORD(v197);
                  v196 = (float)(v131 * v197) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 26))
                    v196 = *(float *)v195;
                  else
                    v196 = (float)*(int *)v195;
                  break;
                case 0xB:
                  v258 = v145;
                  WebCore::Length::nonNanCalculatedValue(v195, v131);
                  v146 = v274;
                  v196 = v259;
                  v145 = v258;
                  break;
                default:
                  v196 = 0.0;
                  break;
              }
              v198 = v130 - v145;
              v199 = (WebCore::Length *)(v124 + 12);
              v200 = (float)v126 * 0.015625;
              switch(*(_BYTE *)(v124 + 16))
              {
                case 0:
                case 1:
                case 9:
                  break;
                case 3:
                  v201 = *(float *)(v124 + 12);
                  if (!*(_BYTE *)(v124 + 18))
                    v201 = (float)SLODWORD(v201);
                  v200 = (float)(v130 * v201) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 18))
                    v200 = *(float *)v199;
                  else
                    v200 = (float)*(int *)v199;
                  break;
                case 0xB:
                  v260 = v145;
                  WebCore::Length::nonNanCalculatedValue(v199, (float)v126 * 0.015625);
                  v146 = v274;
                  v200 = v261;
                  v145 = v260;
                  break;
                default:
                  v200 = 0.0;
                  break;
              }
              if ((float)(v198 - v200) >= 0.0)
                v202 = v198 - v200;
              else
                v202 = 0.0;
              v203 = (WebCore::Length *)(v124 + 28);
              v204 = v131;
              switch(*(_BYTE *)(v124 + 32))
              {
                case 2:
                case 5:
                case 6:
                case 7:
                case 8:
                case 0xA:
                case 0xC:
                case 0xD:
                  v204 = 0.0;
                  break;
                case 3:
                  v205 = *(float *)(v124 + 28);
                  if (!*(_BYTE *)(v124 + 34))
                    v205 = (float)SLODWORD(v205);
                  v204 = (float)(v131 * v205) / 100.0;
                  break;
                case 4:
                  if (*(_BYTE *)(v124 + 34))
                    v204 = *(float *)v203;
                  else
                    v204 = (float)*(int *)v203;
                  break;
                case 0xB:
                  v262 = v145;
                  WebCore::Length::nonNanCalculatedValue(v203, v131);
                  v146 = v274;
                  v204 = v263;
                  v145 = v262;
                  break;
                default:
                  break;
              }
              v206 = (float)(v131 - v196) - v204;
              if (v206 >= 0.0)
                v207 = v206;
              else
                v207 = 0.0;
              v272 = v33;
              switch(v146)
              {
                case 0u:
                case 2u:
                  v282 = v202;
                  v270 = v145;
                  goto LABEL_448;
                case 1u:
                case 3u:
                  v270 = (float)((float)(int)v35 * 0.015625) - (float)(v145 + v202);
                  v282 = v202;
LABEL_448:
                  v132 = v277;
                  break;
                default:
                  v282 = v207;
                  v207 = v202;
                  v270 = v196;
                  v196 = v145;
                  break;
              }
              *(float *)v283 = (float)v126 * 0.015625;
              *((float *)v283 + 1) = v131;
              v208 = WebCore::floatSizeForLengthSize((WebCore *)(v124 + 44), (const WebCore::LengthSize *)v283, v127);
              v210 = v209;
              v212 = WebCore::floatSizeForLengthSize((WebCore *)(v124 + 60), (const WebCore::LengthSize *)v283, v211);
              v214 = v213;
              v216 = WebCore::floatSizeForLengthSize((WebCore *)(v124 + 92), (const WebCore::LengthSize *)v283, v215);
              v218 = v217;
              v220 = WebCore::floatSizeForLengthSize((WebCore *)(v124 + 76), (const WebCore::LengthSize *)v283, v219);
              if (v274 >= 4)
                v222 = v218;
              else
                v222 = v216;
              if (v274 >= 4)
                v223 = v216;
              else
                v223 = v218;
              if (v274 >= 4)
                v224 = v210;
              else
                v224 = v208;
              if (v274 >= 4)
                v225 = v208;
              else
                v225 = v210;
              if (v274 >= 4)
                v226 = v212;
              else
                v226 = v214;
              if (v274 >= 4)
                v227 = v214;
              else
                v227 = v212;
              if (v274 >= 4)
                v228 = v220;
              else
                v228 = v221;
              if (v274 >= 4)
                v229 = v221;
              else
                v229 = v220;
              v230 = 1.0;
              if ((float)(v225 + v226) > v207)
              {
                v230 = v207 / (float)(v225 + v226);
                if (v230 > 1.0)
                  v230 = 1.0;
              }
              if ((float)(v223 + v228) > v207 && v230 >= (float)(v207 / (float)(v223 + v228)))
                v230 = v207 / (float)(v223 + v228);
              if ((float)(v224 + v222) > v282 && v230 >= (float)(v282 / (float)(v224 + v222)))
                v230 = v282 / (float)(v224 + v222);
              if ((float)(v227 + v229) > v282 && v230 >= (float)(v282 / (float)(v227 + v229)))
                v230 = v282 / (float)(v227 + v229);
              v275 = (float)((float)v36 * 0.015625) + v196;
              v271 = (float)((float)v114 * 0.015625) + v270;
              if (v230 == 1.0)
              {
                v231 = v225;
                v232 = v226;
                v278 = v224;
                v233 = v223;
                v234 = v222;
              }
              else
              {
                v247 = v224 * v230;
                v248 = (float)(v225 * v230) != 0.0;
                v249 = (float)(v224 * v230) != 0.0;
                if (!v248 || !v249)
                  v247 = 0.0;
                v278 = v247;
                if (v248 && v249)
                  v231 = v225 * v230;
                else
                  v231 = 0.0;
                v250 = (float)(v226 * v230) != 0.0;
                v251 = (float)(v227 * v230) != 0.0;
                if (v250 && v251)
                  v227 = v227 * v230;
                else
                  v227 = 0.0;
                if (v250 && v251)
                  v232 = v226 * v230;
                else
                  v232 = 0.0;
                v252 = (float)(v223 * v230) != 0.0;
                v253 = (float)(v222 * v230) != 0.0;
                if (v252 && v253)
                  v234 = v222 * v230;
                else
                  v234 = 0.0;
                if (v252 && v253)
                  v233 = v223 * v230;
                else
                  v233 = 0.0;
                v254 = v228 * v230;
                v255 = v229 * v230;
                v256 = v254 != 0.0;
                v257 = v255 != 0.0;
                if (v256 && v257)
                  v229 = v255;
                else
                  v229 = 0.0;
                if (v256 && v257)
                  v228 = v254;
                else
                  v228 = 0.0;
              }
              result = (WTF *)WTF::fastMalloc((WTF *)0x48);
              v129 = result;
              *((_DWORD *)result + 2) = 1;
              *(_QWORD *)result = off_1E34414B8;
              *((float *)result + 5) = v275;
              *((float *)result + 6) = v271;
              *((float *)result + 7) = v207;
              *((float *)result + 8) = v282;
              *((float *)result + 9) = v231;
              *((float *)result + 10) = v278;
              *((float *)result + 11) = v232;
              *((float *)result + 12) = v227;
              *((float *)result + 13) = v233;
              *((float *)result + 14) = v234;
              *((float *)result + 15) = v228;
              *((float *)result + 16) = v229;
              v33 = v272;
              goto LABEL_356;
            default:
LABEL_190:
              v132 = v277;
LABEL_356:
              *((_BYTE *)v129 + 12) = v132;
              *((float *)v129 + 4) = v33;
              *a2 = (uint64_t)v129;
              return result;
          }
        }
        v36 = 0;
        v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 240);
        switch(*(_BYTE *)(v37 + 24))
        {
          case 0:
            if (*(_DWORD *)(v37 + 4) == 2)
              goto LABEL_35;
            goto LABEL_103;
          case 1:
LABEL_103:
            v106 = WebCore::RenderObject::containingBlock(this);
            v107 = *((_DWORD *)v106 + 30);
            v108 = (v107 >> 26) & 1;
            v109 = (unsigned __int16)*((_DWORD *)v106 + 31) >> 13;
            if ((v109 - 2) < 2)
              goto LABEL_453;
            if (v109 == 4)
            {
              v108 = (v107 & 0x4000000) == 0;
            }
            else if (v109 != 5)
            {
              v110 = 3;
              if ((v107 & 0x4000000) != 0)
                v110 = 1;
LABEL_108:
              v111 = *((_DWORD *)this + v110 + 42);
              if (v111 == 0x80000000)
                v36 = 0x7FFFFFFF;
              else
                v36 = -v111;
              goto LABEL_119;
            }
LABEL_453:
            v269 = v108 == 0;
            v110 = 2;
            if (v269)
              v110 = 0;
            goto LABEL_108;
          case 3:
            v112 = WebCore::RenderObject::containingBlock(this);
            if (((*((_DWORD *)v112 + 31) >> 13) & 6u) - 2 < 4)
              v113 = 125;
            else
              v113 = 127;
            if ((*((_DWORD *)v112 + 30) & 0x4000000) != 0)
              ++v113;
            v36 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 8 * v113))(this);
            goto LABEL_119;
          case 4:
LABEL_35:
            v38 = WebCore::RenderObject::containingBlock(this);
            v39 = *((_DWORD *)v38 + 30);
            v40 = *(uint64_t (***)(_QWORD))this;
            if (((*((_DWORD *)v38 + 31) >> 13) & 6u) - 2 < 4)
            {
              if ((v39 & 0x4000000) != 0)
              {
                v41 = ((uint64_t (**)(WebCore *))v40)[126](this);
                v42 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 936))(this);
              }
              else
              {
                v41 = ((uint64_t (**)(WebCore *))v40)[125](this);
                v42 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 928))(this);
              }
            }
            else if ((v39 & 0x4000000) != 0)
            {
              v41 = ((uint64_t (**)(WebCore *))v40)[128](this);
              v42 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 952))(this);
            }
            else
            {
              v41 = ((uint64_t (**)(WebCore *))v40)[127](this);
              v42 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 944))(this);
            }
            v36 = v41 + v42;
            if (__OFADD__(v41, v42))
              v36 = (v41 >> 31) + 0x7FFFFFFF;
            goto LABEL_119;
          default:
            goto LABEL_119;
        }
      }
      result = (WTF *)WTF::fastMalloc((WTF *)0x48);
      *((_DWORD *)result + 2) = 1;
      *(_QWORD *)result = off_1E34414B8;
      *(_OWORD *)((char *)result + 20) = 0u;
      *(_OWORD *)((char *)result + 36) = 0u;
      *(_OWORD *)((char *)result + 52) = 0u;
      *((_BYTE *)result + 12) = v28;
      *((_DWORD *)result + 4) = 0;
    }
    *a2 = (uint64_t)result;
  }
  return result;
}

uint64_t WebCore::ShapeOutsideInfo::isEnabledFor(WebCore::ShapeOutsideInfo *this, const WebCore::RenderBox *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  WebCore::ResourceRequest *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  result = 0;
  if ((*((_BYTE *)this + 21) & 8) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 240);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if (v5 != 2)
      {
        if (v5 != 1)
        {
          if (!v5)
            return *(_QWORD *)(v4 + 8) != 0;
          return 0;
        }
        return 1;
      }
      result = *(_QWORD *)(v4 + 16);
      if (!result)
        return result;
      if (*(_BYTE *)(result + 24)
        && (v6 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t, const WebCore::RenderBox *))(*(_QWORD *)result + 192))(result, a2)+ 24), result = *(_QWORD *)(v4 + 16), v6))
      {
        if (*(unsigned __int8 *)(result + 24) - 3 > 6)
          return 0;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, const WebCore::RenderBox *))(*(_QWORD *)result + 200))(result, a2);
        if (!result)
          return result;
        if (!*(_QWORD *)(result + 688))
          return 0;
        result = *(_QWORD *)(v4 + 16);
      }
      if (*(unsigned __int8 *)(result + 24) - 3 < 7)
        return 1;
      v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 24), v9);
      v10 = *(_QWORD *)(v8 + 400);
      if (v10)
      {
        v11 = (uint64_t *)(v10 + 320);
      }
      else
      {
        v18 = atomic_load(&WebCore::CachedResource::resourceError(void)const::onceFlag);
        if (v18 != -1)
        {
          v21 = (WTF::StringImpl *)&v19;
          v20 = (WTF::StringImpl *)&v21;
          std::__call_once(&WebCore::CachedResource::resourceError(void)const::onceFlag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::resourceError(void)::$_0 &&>>);
        }
        v11 = &WebCore::CachedResource::resourceError(void)const::emptyError;
      }
      if (!*((_BYTE *)v11 + 60) && WebCore::CachedResource::isCORSSameOrigin((WebCore::CachedResource *)v8))
        return 1;
      v12 = (WebCore::ResourceRequest *)(v8 + 160);
      if ((*(_BYTE *)(v8 + 344) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(v12);
        v12 = (WebCore::ResourceRequest *)(v8 + 160);
        *(_BYTE *)(v8 + 344) |= 1u;
      }
      if (*(_QWORD *)v12)
      {
        WTF::URL::stringCenterEllipsizedToLength(v12);
        v13 = v20;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v13 = v21;
        v20 = v21;
      }
      if (v13)
        *(_DWORD *)v13 += 2;
      v19 = v13;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Unsafe attempt to load URL ", 28, (uint64_t *)&v19, 46, &v21);
      WebCore::Document::addConsoleMessage(v7, 8, 2, &v21, 0);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v19;
      v19 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *WebCore::ShapeOutsideInfo::computeDeltasForContainingBlockLine@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *v10;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;
  float v40;
  uint64_t v41;
  double v42;
  int v43;
  int v44;
  uint64_t v45;
  int *v46;
  double v47;
  int v48;
  int v49;
  _QWORD *v50;

  v10 = result;
  if (result[1]
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 480))
  {
    if ((*(_DWORD *)(a2 + 20) & 0x1000) != 0)
      v12 = a3 + 2;
    else
      v12 = a3 + 3;
    v13 = *v12;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)*result + 1112))();
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    v16 = __OFSUB__(a4, v15);
    v17 = a4 - v15;
    if (v16)
      v18 = (a4 >> 31) + 0x7FFFFFFF;
    else
      v18 = v17;
    result = (_QWORD *)v10[1];
    if (!result || (v10[5] & 2) == 0 || *((_DWORD *)v10 + 8) != (_DWORD)v18 || *((_DWORD *)v10 + 9) != a5)
    {
      v19 = a3 + 4;
      if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
        v19 = a3 + 5;
      v20 = *v19;
      if (!result)
      {
        WebCore::makeShapeForShapeOutside((WebCore *)*v10, (uint64_t *)&v50);
        result = v50;
        v21 = (_DWORD *)v10[1];
        v10[1] = v50;
        if (v21)
        {
          if (v21[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            result = (_QWORD *)v10[1];
          }
          else
          {
            --v21[2];
          }
        }
      }
      v22 = v20 & ~(v20 >> 31);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      if (v24 < 1 || v23 < 1)
        goto LABEL_52;
      v26 = HIDWORD(result) + v23;
      if (__OFADD__(HIDWORD(result), v23))
        v26 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
      if (v26 <= (int)v18)
        goto LABEL_34;
      v27 = (v18 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v18, a5))
        v27 = v18 + a5;
      if (v27 <= SHIDWORD(result))
      {
LABEL_34:
        if (a5 || (_DWORD)v18 != HIDWORD(result))
          goto LABEL_52;
      }
      v28 = v10[1];
      v29 = v28;
      if (!v28)
      {
        WebCore::makeShapeForShapeOutside((WebCore *)*v10, (uint64_t *)&v50);
        v28 = (uint64_t)v50;
        v30 = (_DWORD *)v10[1];
        v10[1] = v50;
        if (v30)
        {
          if (v30[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            v28 = v10[1];
          }
          else
          {
            --v30[2];
          }
        }
        v29 = v28;
        if (!v28)
        {
          WebCore::makeShapeForShapeOutside((WebCore *)*v10, (uint64_t *)&v50);
          v29 = (uint64_t)v50;
          v31 = (_DWORD *)v10[1];
          v10[1] = v50;
          if (v31)
          {
            if (v31[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
              v29 = v10[1];
            }
            else
            {
              --v31[2];
            }
          }
          v28 = 0;
        }
      }
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v34 = (HIDWORD(v32) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v32), v33))
        v34 = HIDWORD(v32) + v33;
      v16 = __OFSUB__(v34, (_DWORD)v18);
      v35 = v34 - v18;
      v36 = (v34 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v36 = v35;
      v37 = v36 >= a5 ? a5 : v36;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v18, v37);
      if ((v38 & 1) != 0)
      {
        v40 = *((float *)&result + 1);
        v41 = 1136;
        if ((*(_DWORD *)(a2 + 120) & 0x4000000) == 0)
          v41 = 1128;
        v42 = (float)((float)((float)(*(int (**)(void))(*(_QWORD *)*v10 + v41))() * 0.015625) + *(float *)&result)
            * 64.0;
        if (v42 >= 2147483650.0)
        {
          v43 = 0x7FFFFFFF;
        }
        else if (v42 > -2147483650.0)
        {
          v43 = (int)v42;
        }
        else
        {
          v43 = 0x80000000;
        }
        if (v43 >= v22)
          v43 = v20;
        v44 = v43 & ~(v43 >> 31);
        v45 = 1128;
        if ((*(_DWORD *)(a2 + 120) & 0x4000000) == 0)
          v45 = 1136;
        result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)*v10 + v45))();
        v46 = (int *)(*v10 + 164);
        if ((*(_BYTE *)(a2 + 21) & 0x10) == 0)
          v46 = (int *)(*v10 + 160);
        v47 = (float)((float)(v40 - (float)((float)*v46 * 0.015625)) - (float)((float)(int)result * 0.015625)) * 64.0;
        if (v47 >= 2147483650.0)
        {
          v48 = 0;
        }
        else if (v47 <= -2147483650.0)
        {
          v48 = -v22;
        }
        else
        {
          v48 = 0;
          if ((int)v47 <= -v22)
            v49 = -v22;
          else
            v49 = (int)v47;
          if ((int)v47 < 0)
            v48 = v49;
        }
        *((_DWORD *)v10 + 6) = v44;
        *((_DWORD *)v10 + 7) = v48;
        *((_DWORD *)v10 + 8) = v18;
        *((_DWORD *)v10 + 9) = a5;
        v39 = 3;
      }
      else
      {
LABEL_52:
        *((_DWORD *)v10 + 6) = v22;
        *((_DWORD *)v10 + 7) = -v22;
        *((_DWORD *)v10 + 8) = v18;
        *((_DWORD *)v10 + 9) = a5;
        v39 = 2;
      }
      *((_BYTE *)v10 + 40) = v39;
    }
    *(_OWORD *)a6 = *(_OWORD *)(v10 + 3);
    *(_DWORD *)(a6 + 16) = *((_DWORD *)v10 + 10);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_BYTE *)(a6 + 16) &= 0xFCu;
  }
  return result;
}

int *WebCore::BasicShapeCenterCoordinate::updateComputedLength(int *this)
{
  int *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  char v5;
  char v6;
  float v7;
  float *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  __int16 v14;
  unsigned __int8 v15;
  unsigned int v16;
  __int16 v17;
  char v18;

  v1 = this;
  if (!*(_BYTE *)this)
  {
    v3 = *((unsigned __int8 *)this + 8);
    v4 = 0;
    if (v3 == 13)
    {
      v5 = 0;
      v6 = 0;
      v3 = 4;
    }
    else
    {
      v18 = 0;
      LOBYTE(v17) = v3;
      v6 = *((_BYTE *)this + 9);
      HIBYTE(v17) = v6;
      if (v3 - 2 >= 9)
      {
        if (v3 == 11)
        {
          v16 = this[1];
          v4 = v16;
          this = WebCore::Length::ref((int *)&v16);
          v5 = 0;
          v3 = 11;
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = *((_BYTE *)this + 10);
        v4 = this[1];
        if (v5)
          v5 = 1;
      }
    }
    if (*((_BYTE *)v1 + 16) == 11)
    {
      v12 = v5;
      v11 = v3;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1[3]);
      v3 = v11;
      v5 = v12;
    }
    *((_BYTE *)v1 + 16) = v3;
    *((_BYTE *)v1 + 17) = v6;
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        return this;
      if (((1 << v3) & 0x3003) != 0)
      {
        v1[3] = 0;
        return this;
      }
      if (v3 != 11)
        return this;
    }
    else
    {
      *((_BYTE *)v1 + 18) = v5;
    }
    v1[3] = v4;
    return this;
  }
  v2 = *((unsigned __int8 *)this + 8);
  if (v2 == 13)
  {
    if (*((_BYTE *)this + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)this[3]);
    }
    *((_WORD *)v1 + 8) = 3;
    *((_BYTE *)v1 + 18) = 0;
    v1[3] = 100;
    return this;
  }
  if (v2 == 3)
  {
    v7 = *((float *)this + 1);
    if (!*((_BYTE *)this + 10))
      v7 = (float)SLODWORD(v7);
    *(float *)&v13 = 100.0 - v7;
    v14 = 3;
    v15 = 1;
  }
  else
  {
    v16 = 100;
    v17 = 3;
    v18 = 0;
    this = (int *)WebCore::makeCalculated((uint64_t)&v13, 45, (unsigned __int8 *)&v16, (unsigned __int8 *)this + 4);
    if (v17 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
    }
  }
  v8 = (float *)(v1 + 3);
  if (v1 + 3 == (int *)&v13)
  {
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
  }
  else
  {
    if (*((_BYTE *)v1 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v8);
    }
    v9 = v14;
    *((_WORD *)v1 + 8) = v14;
    if (v9 - 2 < 9)
    {
      v10 = v15;
      *((_BYTE *)v1 + 18) = v15;
      if (v10)
      {
        *v8 = *(float *)&v13;
        return this;
      }
LABEL_38:
      *v8 = *(float *)&v13;
      return this;
    }
    if (v9 <= 0xD)
    {
      if (((1 << v9) & 0x3003) != 0)
      {
        *v8 = 0.0;
        return this;
      }
      if (v9 == 11)
        goto LABEL_38;
    }
  }
  return this;
}

uint64_t WebCore::BasicShapeCircle::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x48);
  result = WebCore::BasicShapeCircle::BasicShapeCircle(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t WebCore::BasicShapeCircle::BasicShapeCircle(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = off_1E3441768;
  *(_BYTE *)(result + 16) = *(_BYTE *)a2;
  *(_DWORD *)(result + 20) = 0;
  *(_WORD *)(result + 25) = 0;
  v4 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(result + 24) = v4;
  *(_BYTE *)(result + 25) = *(_BYTE *)(a2 + 9);
  if (v4 - 2 < 9)
  {
    v5 = *(unsigned __int8 *)(a2 + 10);
    *(_BYTE *)(result + 26) = v5;
    if (v5)
    {
      *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 4);
      goto LABEL_4;
    }
    v14 = *(_DWORD *)(a2 + 4);
    goto LABEL_18;
  }
  if (v4 <= 0xD)
  {
    if (((1 << v4) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 20) = 0;
    }
    else if (v4 == 11)
    {
      v14 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = 0;
LABEL_18:
      *(_DWORD *)(result + 20) = v14;
    }
  }
LABEL_4:
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 33) = 0;
  v6 = *(unsigned __int8 *)(a2 + 16);
  *(_BYTE *)(result + 32) = v6;
  *(_BYTE *)(result + 33) = *(_BYTE *)(a2 + 17);
  if (v6 - 2 < 9)
  {
    v7 = *(unsigned __int8 *)(a2 + 18);
    *(_BYTE *)(result + 34) = v7;
    if (v7)
    {
      *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 12);
      goto LABEL_7;
    }
    v15 = *(_DWORD *)(a2 + 12);
    goto LABEL_20;
  }
  if (v6 <= 0xD)
  {
    if (((1 << v6) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 28) = 0;
    }
    else if (v6 == 11)
    {
      v15 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = 0;
LABEL_20:
      *(_DWORD *)(result + 28) = v15;
    }
  }
LABEL_7:
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(result + 36) = *(_BYTE *)a3;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 45) = 0;
  v8 = *(unsigned __int8 *)(a3 + 8);
  *(_BYTE *)(result + 44) = v8;
  *(_BYTE *)(result + 45) = *(_BYTE *)(a3 + 9);
  if (v8 - 2 < 9)
  {
    v9 = *(unsigned __int8 *)(a3 + 10);
    *(_BYTE *)(result + 46) = v9;
    if (v9)
    {
      *(_DWORD *)(result + 40) = *(_DWORD *)(a3 + 4);
      goto LABEL_10;
    }
    v16 = *(_DWORD *)(a3 + 4);
    goto LABEL_22;
  }
  if (v8 <= 0xD)
  {
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 40) = 0;
    }
    else if (v8 == 11)
    {
      v16 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = 0;
LABEL_22:
      *(_DWORD *)(result + 40) = v16;
    }
  }
LABEL_10:
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_WORD *)(result + 53) = 0;
  v10 = *(unsigned __int8 *)(a3 + 16);
  *(_BYTE *)(result + 52) = v10;
  *(_BYTE *)(result + 53) = *(_BYTE *)(a3 + 17);
  if (v10 - 2 < 9)
  {
    v11 = *(unsigned __int8 *)(a3 + 18);
    *(_BYTE *)(result + 54) = v11;
    if (v11)
    {
      *(_DWORD *)(result + 48) = *(_DWORD *)(a3 + 12);
      goto LABEL_13;
    }
    v17 = *(_DWORD *)(a3 + 12);
    goto LABEL_24;
  }
  if (v10 <= 0xD)
  {
    if (((1 << v10) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 48) = 0;
    }
    else if (v10 == 11)
    {
      v17 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
LABEL_24:
      *(_DWORD *)(result + 48) = v17;
    }
  }
LABEL_13:
  *(_BYTE *)(a3 + 16) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_WORD *)(result + 61) = 0;
  v12 = *((unsigned __int8 *)a4 + 4);
  *(_BYTE *)(result + 60) = v12;
  *(_BYTE *)(result + 61) = *((_BYTE *)a4 + 5);
  if (v12 - 2 >= 9)
  {
    if (v12 > 0xD)
      goto LABEL_16;
    if (((1 << v12) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 56) = 0;
      goto LABEL_16;
    }
    if (v12 != 11)
      goto LABEL_16;
    v18 = *a4;
    *a4 = 0;
    goto LABEL_26;
  }
  v13 = *((unsigned __int8 *)a4 + 6);
  *(_BYTE *)(result + 62) = v13;
  if (!v13)
  {
    v18 = *a4;
LABEL_26:
    *(_DWORD *)(result + 56) = v18;
    goto LABEL_16;
  }
  *(_DWORD *)(result + 56) = *a4;
LABEL_16:
  *((_BYTE *)a4 + 4) = 0;
  *(_BYTE *)(result + 64) = *((_BYTE *)a4 + 8);
  return result;
}

int *WebCore::BasicShapeCircle::clone@<X0>(WebCore::BasicShapeCircle *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  int *result;
  unsigned int v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[4];
  unsigned int v12;
  unsigned __int8 v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  char v18;
  char v19;
  _BYTE v20[4];
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  unsigned int v25;
  unsigned __int8 v26;
  char v27;
  char v28;

  v20[0] = *((_BYTE *)this + 16);
  v21 = 0;
  v24 = 0;
  v22 = *((_BYTE *)this + 24);
  v23 = *((_BYTE *)this + 25);
  if (v22 - 2 >= 9)
  {
    if (v22 == 11)
    {
      v21 = *((_DWORD *)this + 5);
      WebCore::Length::ref((int *)&v21);
    }
  }
  else
  {
    v24 = *((_BYTE *)this + 26);
    v21 = *((_DWORD *)this + 5);
  }
  v25 = 0;
  v28 = 0;
  v26 = *((_BYTE *)this + 32);
  v27 = *((_BYTE *)this + 33);
  if (v26 - 2 >= 9)
  {
    if (v26 == 11)
    {
      v25 = *((_DWORD *)this + 7);
      WebCore::Length::ref((int *)&v25);
    }
  }
  else
  {
    v28 = *((_BYTE *)this + 34);
    v25 = *((_DWORD *)this + 7);
  }
  v11[0] = *((_BYTE *)this + 36);
  v12 = 0;
  v15 = 0;
  v13 = *((_BYTE *)this + 44);
  v14 = *((_BYTE *)this + 45);
  if (v13 - 2 >= 9)
  {
    if (v13 == 11)
    {
      v12 = *((_DWORD *)this + 10);
      WebCore::Length::ref((int *)&v12);
    }
  }
  else
  {
    v15 = *((_BYTE *)this + 46);
    v12 = *((_DWORD *)this + 10);
  }
  v16 = 0;
  v19 = 0;
  v17 = *((_BYTE *)this + 52);
  v18 = *((_BYTE *)this + 53);
  if (v17 - 2 >= 9)
  {
    if (v17 == 11)
    {
      v16 = *((_DWORD *)this + 12);
      WebCore::Length::ref((int *)&v16);
    }
  }
  else
  {
    v19 = *((_BYTE *)this + 54);
    v16 = *((_DWORD *)this + 12);
  }
  v6 = 0;
  v9 = 0;
  v7 = *((_BYTE *)this + 60);
  v8 = *((_BYTE *)this + 61);
  if (v7 - 2 >= 9)
  {
    if (v7 == 11)
    {
      v6 = *((_DWORD *)this + 14);
      WebCore::Length::ref((int *)&v6);
    }
  }
  else
  {
    v9 = *((_BYTE *)this + 62);
    v6 = *((_DWORD *)this + 14);
  }
  v10 = *((_BYTE *)this + 64);
  v4 = WTF::fastMalloc((WTF *)0x48);
  result = (int *)WebCore::BasicShapeCircle::BasicShapeCircle(v4, (uint64_t)v20, (uint64_t)v11, (int *)&v6);
  *a2 = result;
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  if (v26 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25);
  }
  if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  return result;
}

uint64_t WebCore::BasicShapeCircle::operator==(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  WebCore::Length *v6;
  float v7;
  float v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 2)
    return 0;
  result = WebCore::BasicShapeCenterCoordinate::operator==(a1 + 16, (float *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = WebCore::BasicShapeCenterCoordinate::operator==(a1 + 36, (float *)(a2 + 36));
    if ((_DWORD)result)
    {
      v5 = a1[60];
      if (v5 == *(unsigned __int8 *)(a2 + 60) && (a1[61] != 0) == (*(_BYTE *)(a2 + 61) != 0))
      {
        if (v5 == 13)
          goto LABEL_14;
        v6 = (WebCore::Length *)(a1 + 56);
        if (v5 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v6, (const WebCore::Length *)(a2 + 56)) & 1) != 0)
            goto LABEL_14;
        }
        else
        {
          if (a1[62])
            v7 = *(float *)v6;
          else
            v7 = (float)*(int *)v6;
          v8 = *(float *)(a2 + 56);
          if (!*(_BYTE *)(a2 + 62))
            v8 = (float)SLODWORD(v8);
          if (v7 == v8)
          {
LABEL_14:
            if (a1[64] == *(_BYTE *)(a2 + 64))
              return (a1[12] == 0) ^ (*(_BYTE *)(a2 + 12) != 0);
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::BasicShapeCircle::type(WebCore::BasicShapeCircle *this)
{
  return 2;
}

uint64_t WebCore::BasicShapeCenterCoordinate::operator==(_BYTE *a1, float *a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  int v6;
  float *v7;
  float v8;
  float v9;
  char isCalculatedEqual;
  float *v12;
  _BYTE *v13;

  if ((*a1 == 0) == (*(_BYTE *)a2 != 0))
    return 0;
  v2 = a1[8];
  if (v2 != *((unsigned __int8 *)a2 + 8) || (a1[9] != 0) != (*((_BYTE *)a2 + 9) != 0))
    return 0;
  if (v2 != 13)
  {
    v3 = (float *)(a1 + 4);
    if (v2 == 11)
    {
      v12 = a2;
      v13 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 4), (const WebCore::Length *)(a2 + 1));
      a2 = v12;
      a1 = v13;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[10])
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      v5 = a2[1];
      if (!*((_BYTE *)a2 + 10))
        v5 = (float)SLODWORD(v5);
      if (v4 != v5)
        return 0;
    }
  }
  v6 = a1[16];
  if (v6 != *((unsigned __int8 *)a2 + 16) || (a1[17] != 0) != (*((_BYTE *)a2 + 17) != 0))
    return 0;
  if (v6 == 13)
    return 1;
  v7 = (float *)(a1 + 12);
  if (v6 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 3));
  if (a1[18])
    v8 = *v7;
  else
    v8 = (float)*(int *)v7;
  v9 = a2[3];
  if (!*((_BYTE *)a2 + 18))
    v9 = (float)SLODWORD(v9);
  return v8 == v9;
}

char *WebCore::BasicShapeCircle::pathForCenterCoordinate(float *a1, float *a2, float a3, float a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  WebCore::Length *v17;
  float v18;
  float v19;
  __n128 v21;

  v7 = a2[2];
  v8 = a2[3];
  if (*((_BYTE *)a1 + 64))
  {
    v9 = vabds_f32(v7, a3);
    v10 = vabds_f32(v8, a4);
    v11 = fabsf(a3);
    v12 = fabsf(a4);
    if (v11 >= v9)
      v13 = v11;
    else
      v13 = v9;
    if (v12 >= v10)
      v14 = v12;
    else
      v14 = v10;
    if (v13 < v14)
      v13 = v14;
    if (v10 >= v12)
      v10 = v12;
    if (v9 >= v11)
      v9 = v11;
    if (v10 < v9)
      v9 = v10;
    if (*((_BYTE *)a1 + 64) != 1)
      v9 = v13;
  }
  else
  {
    v16 = hypotf(v7, v8);
    v17 = (WebCore::Length *)(a1 + 14);
    v9 = v16 / 1.4142;
    switch(*((_BYTE *)a1 + 60))
    {
      case 0:
      case 1:
      case 9:
        break;
      case 3:
        v18 = a1[14];
        if (!*((_BYTE *)a1 + 62))
          v18 = (float)SLODWORD(v18);
        v9 = (float)(v9 * v18) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)a1 + 62))
          v9 = *(float *)v17;
        else
          v9 = (float)*(int *)v17;
        break;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue(v17, v9);
        break;
      default:
        v9 = 0.0;
        break;
    }
  }
  v19 = (float)(a4 - v9) + a2[1];
  v21.n128_f32[0] = (float)(a3 - v9) + *a2;
  v21.n128_f32[1] = v19;
  v21.n128_f32[2] = v9 + v9;
  v21.n128_f32[3] = v9 + v9;
  if ((_MergedGlobals_254[0] & 1) == 0)
  {
    qword_1ECE84580 = 0;
    xmmword_1ECE84560 = 0u;
    unk_1ECE84570 = 0u;
    xmmword_1ECE84540 = 0u;
    unk_1ECE84550 = 0u;
    xmmword_1ECE84520 = 0u;
    unk_1ECE84530 = 0u;
    xmmword_1ECE84500 = 0u;
    unk_1ECE84510 = 0u;
    xmmword_1ECE844E0 = 0u;
    unk_1ECE844F0 = 0u;
    xmmword_1ECE844C0 = 0u;
    unk_1ECE844D0 = 0u;
    xmmword_1ECE844A0 = 0u;
    unk_1ECE844B0 = 0u;
    xmmword_1ECE84480 = 0u;
    unk_1ECE84490 = 0u;
    xmmword_1ECE84460 = 0u;
    unk_1ECE84470 = 0u;
    xmmword_1ECE84440 = 0u;
    unk_1ECE84450 = 0u;
    xmmword_1ECE84420 = 0u;
    *(_OWORD *)algn_1ECE84430 = 0u;
    _MergedGlobals_254[0] = 1;
  }
  return WTF::TinyLRUCache<WebCore::FloatRect,WebCore::Path,4ul,WebCore::EllipsePathPolicy>::get(&v21);
}

char *WebCore::BasicShapeCircle::path(WebCore::BasicShapeCircle *this, const WebCore::FloatRect *a2)
{
  float v2;
  float *v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  float v15;
  int v16;
  float v17;
  const WebCore::FloatRect *v18;
  const WebCore::FloatRect *v19;
  WebCore::BasicShapeCircle *v20;
  WebCore::BasicShapeCircle *v21;
  float v22;
  float v23;

  v2 = *((float *)a2 + 2);
  v3 = (float *)((char *)this + 20);
  v4 = v2;
  switch(*((_BYTE *)this + 24))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v5 = *((float *)this + 5);
      if (!*((_BYTE *)this + 26))
        v5 = (float)SLODWORD(v5);
      v4 = (float)(v2 * v5) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 26))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      break;
    case 0xB:
      v20 = this;
      v22 = *((float *)a2 + 2);
      v18 = a2;
      WebCore::Length::nonNanCalculatedValue((WebCore::BasicShapeCircle *)((char *)this + 20), v2);
      this = v20;
      a2 = v18;
      v2 = v22;
      break;
    default:
      v4 = 0.0;
      break;
  }
  v6 = *((unsigned __int8 *)this + 16);
  v7 = *((float *)a2 + 3);
  v8 = (float *)((char *)this + 40);
  v9 = v7;
  switch(*((_BYTE *)this + 44))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v10 = *((float *)this + 10);
      if (!*((_BYTE *)this + 46))
        v10 = (float)SLODWORD(v10);
      v9 = (float)(v7 * v10) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 46))
        v9 = *v8;
      else
        v9 = (float)*(int *)v8;
      break;
    case 0xB:
      v21 = this;
      v23 = v2;
      v17 = v4;
      v19 = a2;
      v15 = *((float *)a2 + 3);
      v16 = *((unsigned __int8 *)this + 16);
      WebCore::Length::nonNanCalculatedValue((WebCore::BasicShapeCircle *)((char *)this + 40), v7);
      v6 = v16;
      v7 = v15;
      this = v21;
      a2 = v19;
      v9 = v14;
      v4 = v17;
      v2 = v23;
      break;
    default:
      v9 = 0.0;
      break;
  }
  v11 = v2 - v4;
  if (v6)
    v4 = v11;
  v12 = v7 - v9;
  if (!*((_BYTE *)this + 36))
    v12 = v9;
  return WebCore::BasicShapeCircle::pathForCenterCoordinate((float *)this, (float *)a2, v4, v12);
}

BOOL WebCore::BasicShapeCircle::canBlend(uint64_t a1, unsigned __int8 *a2)
{
  return (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) == 2
      && (*(unsigned __int8 *)(a1 + 64) | a2[64]) == 0;
}

void WebCore::BasicShapeCircle::blend(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int *v12;
  __n128 v13;
  __n128 v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  __n128 v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned __int8 v34;
  char v35;
  unsigned __int8 v36;
  char v37;
  int v38;
  unsigned int v39;
  unsigned __int8 v40;
  char v41;
  unsigned __int8 v42;
  unsigned int v43[2];
  int v44;
  unsigned int v45;
  unsigned __int8 v46;
  char v47;
  unsigned __int8 v48;
  unsigned int v49[2];
  unsigned int v50;
  unsigned __int8 v51;
  char v52;
  unsigned __int8 v53;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1964BE9D0);
  }
  v8 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v8 + 8) = 1;
  *(_BYTE *)(v8 + 12) = 0;
  *(_QWORD *)v8 = off_1E3441768;
  *(_BYTE *)(v8 + 16) = 0;
  v9 = (int *)(v8 + 16);
  *(_DWORD *)(v8 + 20) = 0;
  *(_WORD *)(v8 + 24) = 13;
  *(_BYTE *)(v8 + 26) = 0;
  *(_DWORD *)(v8 + 28) = 0;
  v10 = (unsigned int *)(v8 + 28);
  *(_DWORD *)(v8 + 31) = 0;
  WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v8 + 16));
  *(_BYTE *)(v8 + 36) = 0;
  v11 = (int *)(v8 + 36);
  *(_DWORD *)(v8 + 40) = 0;
  *(_WORD *)(v8 + 44) = 13;
  *(_BYTE *)(v8 + 46) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  v12 = (unsigned int *)(v8 + 48);
  *(_DWORD *)(v8 + 51) = 0;
  WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v8 + 36));
  *(_DWORD *)(v8 + 56) = 0;
  *(_WORD *)(v8 + 60) = 13;
  *(_BYTE *)(v8 + 62) = 0;
  *(_BYTE *)(v8 + 64) = 1;
  WebCore::blend(a2 + 28, a1 + 28, a3, (uint64_t)&v50, v13);
  LOBYTE(v44) = 0;
  v45 = 0;
  v48 = 0;
  v46 = v51;
  v47 = v52;
  if (v51 - 2 < 9)
  {
    v48 = v53;
    if (v53)
    {
      v45 = v50;
      goto LABEL_5;
    }
    v27 = v50;
    goto LABEL_40;
  }
  if (v51 == 11)
  {
    v27 = v50;
    v50 = 0;
LABEL_40:
    v45 = v27;
  }
LABEL_5:
  v51 = 0;
  memset(v49, 0, 7);
  WebCore::BasicShapeCenterCoordinate::updateComputedLength(&v44);
  if (v51 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
  }
  *(_BYTE *)v9 = v44;
  if (v9 != &v44)
  {
    if (*(_BYTE *)(v8 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 20));
    }
    v15 = v46;
    *(_BYTE *)(v8 + 24) = v46;
    *(_BYTE *)(v8 + 25) = v47;
    if (v15 - 2 < 9)
    {
      v16 = v48;
      *(_BYTE *)(v8 + 26) = v48;
      if (v16)
      {
        v14.n128_u32[0] = v45;
        *(_DWORD *)(v8 + 20) = v45;
        goto LABEL_11;
      }
      v29 = v45;
      goto LABEL_44;
    }
    if (v15 <= 0xD)
    {
      if (((1 << v15) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 20) = 0;
      }
      else if (v15 == 11)
      {
        v29 = v45;
        v45 = 0;
LABEL_44:
        *(_DWORD *)(v8 + 20) = v29;
      }
    }
LABEL_11:
    v46 = 0;
    if (*(_BYTE *)(v8 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
    }
    v17 = LOBYTE(v49[1]);
    *(_WORD *)(v8 + 32) = v49[1];
    if (v17 - 2 >= 9)
    {
      if (v17 > 0xD)
        goto LABEL_15;
      if (((1 << v17) & 0x3003) != 0)
      {
        *v10 = 0;
        goto LABEL_15;
      }
      if (v17 != 11)
        goto LABEL_15;
      v30 = v49[0];
      v49[0] = 0;
    }
    else
    {
      v18 = BYTE2(v49[1]);
      *(_BYTE *)(v8 + 34) = BYTE2(v49[1]);
      if (v18)
      {
        v14.n128_u32[0] = v49[0];
        *v10 = v49[0];
LABEL_15:
        LOBYTE(v49[1]) = 0;
        goto LABEL_16;
      }
      v30 = v49[0];
    }
    *v10 = v30;
    goto LABEL_15;
  }
  if (LOBYTE(v49[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v49[0]);
  }
LABEL_16:
  if (v46 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v45);
  }
  WebCore::blend(a2 + 48, a1 + 48, a3, (uint64_t)&v50, v14);
  LOBYTE(v38) = 0;
  v39 = 0;
  v42 = 0;
  v40 = v51;
  v41 = v52;
  if (v51 - 2 < 9)
  {
    v42 = v53;
    if (v53)
    {
      v39 = v50;
      goto LABEL_20;
    }
    v28 = v50;
    goto LABEL_42;
  }
  if (v51 == 11)
  {
    v28 = v50;
    v50 = 0;
LABEL_42:
    v39 = v28;
  }
LABEL_20:
  v51 = 0;
  memset(v43, 0, 7);
  WebCore::BasicShapeCenterCoordinate::updateComputedLength(&v38);
  if (v51 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
  }
  *(_BYTE *)v11 = v38;
  if (v11 != &v38)
  {
    if (*(_BYTE *)(v8 + 44) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 40));
    }
    v20 = v40;
    *(_BYTE *)(v8 + 44) = v40;
    *(_BYTE *)(v8 + 45) = v41;
    if (v20 - 2 < 9)
    {
      v21 = v42;
      *(_BYTE *)(v8 + 46) = v42;
      if (v21)
      {
        v19.n128_u32[0] = v39;
        *(_DWORD *)(v8 + 40) = v39;
        goto LABEL_26;
      }
      v31 = v39;
      goto LABEL_48;
    }
    if (v20 <= 0xD)
    {
      if (((1 << v20) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 40) = 0;
      }
      else if (v20 == 11)
      {
        v31 = v39;
        v39 = 0;
LABEL_48:
        *(_DWORD *)(v8 + 40) = v31;
      }
    }
LABEL_26:
    v40 = 0;
    if (*(_BYTE *)(v8 + 52) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v22 = LOBYTE(v43[1]);
    *(_WORD *)(v8 + 52) = v43[1];
    if (v22 - 2 >= 9)
    {
      if (v22 > 0xD)
        goto LABEL_30;
      if (((1 << v22) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_30;
      }
      if (v22 != 11)
        goto LABEL_30;
      v32 = v43[0];
      v43[0] = 0;
    }
    else
    {
      v23 = BYTE2(v43[1]);
      *(_BYTE *)(v8 + 54) = BYTE2(v43[1]);
      if (v23)
      {
        v19.n128_u32[0] = v43[0];
        *v12 = v43[0];
LABEL_30:
        LOBYTE(v43[1]) = 0;
        goto LABEL_31;
      }
      v32 = v43[0];
    }
    *v12 = v32;
    goto LABEL_30;
  }
  if (LOBYTE(v43[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v43[0]);
  }
LABEL_31:
  if (v40 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39);
  }
  WebCore::BasicShapeRadius::blend((WebCore::Length *)&v33, a1 + 56, a2 + 56, a3, v19);
  if (*(_BYTE *)(v8 + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 56));
  }
  v24 = v34;
  *(_BYTE *)(v8 + 60) = v34;
  *(_BYTE *)(v8 + 61) = v35;
  if (v24 - 2 < 9)
  {
    v25 = v36;
    *(_BYTE *)(v8 + 62) = v36;
    if (v25)
    {
      *(_DWORD *)(v8 + 56) = v33;
      goto LABEL_36;
    }
LABEL_83:
    *(_DWORD *)(v8 + 56) = v33;
    goto LABEL_36;
  }
  if (v24 > 0xD)
    goto LABEL_36;
  if (((1 << v24) & 0x3003) != 0)
  {
    *(_DWORD *)(v8 + 56) = 0;
    goto LABEL_36;
  }
  if (v24 == 11)
    goto LABEL_83;
LABEL_36:
  *(_BYTE *)(v8 + 64) = v37;
  v26 = a1[12];
  if (v26)
    v26 = a2[12] != 0;
  *(_BYTE *)(v8 + 12) = v26;
  *a4 = v8;
}

void WebCore::BasicShapeRadius::blend(WebCore::Length *this, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, __n128 a5)
{
  unsigned __int8 v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;

  v7 = a3[8];
  if (a2[8] | v7)
  {
    *(_DWORD *)this = 0;
    *((_BYTE *)this + 6) = 0;
    v9 = a3[4];
    *((_BYTE *)this + 4) = v9;
    *((_BYTE *)this + 5) = a3[5];
    if ((v9 - 2) >= 9)
    {
      if (v9 == 11)
      {
        *(_DWORD *)this = *(_DWORD *)a3;
        WebCore::Length::ref((int *)this);
        v7 = a3[8];
      }
    }
    else
    {
      *((_BYTE *)this + 6) = a3[6];
      *(_DWORD *)this = *(_DWORD *)a3;
    }
    *((_BYTE *)this + 8) = v7;
  }
  else
  {
    WebCore::blend(a3, a2, a4, (uint64_t)&v10, a5);
    *(_DWORD *)this = 0;
    *((_BYTE *)this + 6) = 0;
    v8 = v11;
    *((_BYTE *)this + 4) = v11;
    *((_BYTE *)this + 5) = v12;
    if ((v8 - 2) >= 9)
    {
      if (v8 == 11)
      {
        *(_DWORD *)this = v10;
        WebCore::Length::ref((int *)this);
        v8 = v11;
      }
      *((_BYTE *)this + 8) = 0;
      if (v8 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
      }
    }
    else
    {
      *((_BYTE *)this + 6) = v13;
      *(_DWORD *)this = v10;
      *((_BYTE *)this + 8) = 0;
    }
  }
}

uint64_t WebCore::BasicShapeCircle::dump(WebCore::BasicShapeCircle *this, WTF::TextStream *a2)
{
  WTF::TextStream *v4;
  WTF::TextStream *v5;

  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::dumpProperty<WebCore::Length>(v4, (uint64_t)"length", (unsigned int *)this + 5);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(v5);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v5);
  WTF::TextStream::dumpProperty<WebCore::Length>(v5, (uint64_t)"length", (unsigned int *)this + 10);
  WTF::TextStream::endGroup(a2);
  return WTF::TextStream::dumpProperty<WebCore::BasicShapeRadius>(a2, (uint64_t)"radius", (uint64_t)this + 56);
}

uint64_t WTF::TextStream::dumpProperty<WebCore::BasicShapeRadius>(WTF::TextStream *a1, uint64_t a2, uint64_t a3)
{
  WTF::TextStream *v5;
  unint64_t v6;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::dumpProperty<WebCore::Length>(v5, (uint64_t)"value", (unsigned int *)a3);
  v6 = *(char *)(a3 + 8);
  WTF::TextStream::startGroup(v5);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v6 <= 2)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v5);
  return WTF::TextStream::endGroup(a1);
}

uint64_t WebCore::BasicShapeEllipse::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0x50);
  result = WebCore::BasicShapeEllipse::BasicShapeEllipse(v10, a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t WebCore::BasicShapeEllipse::BasicShapeEllipse(uint64_t result, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = off_1E34417D0;
  *(_BYTE *)(result + 16) = *(_BYTE *)a2;
  *(_DWORD *)(result + 20) = 0;
  *(_WORD *)(result + 25) = 0;
  v5 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(result + 24) = v5;
  *(_BYTE *)(result + 25) = *(_BYTE *)(a2 + 9);
  if (v5 - 2 < 9)
  {
    v6 = *(unsigned __int8 *)(a2 + 10);
    *(_BYTE *)(result + 26) = v6;
    if (v6)
    {
      *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 4);
      goto LABEL_4;
    }
    v17 = *(_DWORD *)(a2 + 4);
    goto LABEL_21;
  }
  if (v5 <= 0xD)
  {
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 20) = 0;
    }
    else if (v5 == 11)
    {
      v17 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = 0;
LABEL_21:
      *(_DWORD *)(result + 20) = v17;
    }
  }
LABEL_4:
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 33) = 0;
  v7 = *(unsigned __int8 *)(a2 + 16);
  *(_BYTE *)(result + 32) = v7;
  *(_BYTE *)(result + 33) = *(_BYTE *)(a2 + 17);
  if (v7 - 2 < 9)
  {
    v8 = *(unsigned __int8 *)(a2 + 18);
    *(_BYTE *)(result + 34) = v8;
    if (v8)
    {
      *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 12);
      goto LABEL_7;
    }
    v18 = *(_DWORD *)(a2 + 12);
    goto LABEL_23;
  }
  if (v7 <= 0xD)
  {
    if (((1 << v7) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 28) = 0;
    }
    else if (v7 == 11)
    {
      v18 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = 0;
LABEL_23:
      *(_DWORD *)(result + 28) = v18;
    }
  }
LABEL_7:
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(result + 36) = *(_BYTE *)a3;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 45) = 0;
  v9 = *(unsigned __int8 *)(a3 + 8);
  *(_BYTE *)(result + 44) = v9;
  *(_BYTE *)(result + 45) = *(_BYTE *)(a3 + 9);
  if (v9 - 2 < 9)
  {
    v10 = *(unsigned __int8 *)(a3 + 10);
    *(_BYTE *)(result + 46) = v10;
    if (v10)
    {
      *(_DWORD *)(result + 40) = *(_DWORD *)(a3 + 4);
      goto LABEL_10;
    }
    v19 = *(_DWORD *)(a3 + 4);
    goto LABEL_25;
  }
  if (v9 <= 0xD)
  {
    if (((1 << v9) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 40) = 0;
    }
    else if (v9 == 11)
    {
      v19 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = 0;
LABEL_25:
      *(_DWORD *)(result + 40) = v19;
    }
  }
LABEL_10:
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_WORD *)(result + 53) = 0;
  v11 = *(unsigned __int8 *)(a3 + 16);
  *(_BYTE *)(result + 52) = v11;
  *(_BYTE *)(result + 53) = *(_BYTE *)(a3 + 17);
  if (v11 - 2 < 9)
  {
    v12 = *(unsigned __int8 *)(a3 + 18);
    *(_BYTE *)(result + 54) = v12;
    if (v12)
    {
      *(_DWORD *)(result + 48) = *(_DWORD *)(a3 + 12);
      goto LABEL_13;
    }
    v20 = *(_DWORD *)(a3 + 12);
    goto LABEL_27;
  }
  if (v11 <= 0xD)
  {
    if (((1 << v11) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 48) = 0;
    }
    else if (v11 == 11)
    {
      v20 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
LABEL_27:
      *(_DWORD *)(result + 48) = v20;
    }
  }
LABEL_13:
  *(_BYTE *)(a3 + 16) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_WORD *)(result + 61) = 0;
  v13 = *((unsigned __int8 *)a4 + 4);
  *(_BYTE *)(result + 60) = v13;
  *(_BYTE *)(result + 61) = *((_BYTE *)a4 + 5);
  if (v13 - 2 < 9)
  {
    v14 = *((unsigned __int8 *)a4 + 6);
    *(_BYTE *)(result + 62) = v14;
    if (v14)
    {
      *(_DWORD *)(result + 56) = *a4;
      goto LABEL_16;
    }
    v21 = *a4;
    goto LABEL_29;
  }
  if (v13 <= 0xD)
  {
    if (((1 << v13) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 56) = 0;
    }
    else if (v13 == 11)
    {
      v21 = *a4;
      *a4 = 0;
LABEL_29:
      *(_DWORD *)(result + 56) = v21;
    }
  }
LABEL_16:
  *((_BYTE *)a4 + 4) = 0;
  *(_BYTE *)(result + 64) = *((_BYTE *)a4 + 8);
  *(_DWORD *)(result + 68) = 0;
  *(_WORD *)(result + 73) = 0;
  v15 = *((unsigned __int8 *)a5 + 4);
  *(_BYTE *)(result + 72) = v15;
  *(_BYTE *)(result + 73) = *((_BYTE *)a5 + 5);
  if (v15 - 2 >= 9)
  {
    if (v15 > 0xD)
      goto LABEL_19;
    if (((1 << v15) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 68) = 0;
      goto LABEL_19;
    }
    if (v15 != 11)
      goto LABEL_19;
    v22 = *a5;
    *a5 = 0;
    goto LABEL_31;
  }
  v16 = *((unsigned __int8 *)a5 + 6);
  *(_BYTE *)(result + 74) = v16;
  if (!v16)
  {
    v22 = *a5;
LABEL_31:
    *(_DWORD *)(result + 68) = v22;
    goto LABEL_19;
  }
  *(_DWORD *)(result + 68) = *a5;
LABEL_19:
  *((_BYTE *)a5 + 4) = 0;
  *(_BYTE *)(result + 76) = *((_BYTE *)a5 + 8);
  return result;
}

int *WebCore::BasicShapeEllipse::clone@<X0>(WebCore::BasicShapeEllipse *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  int *result;
  unsigned int v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  char v10;
  unsigned int v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  _BYTE v16[4];
  unsigned int v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  _BYTE v25[4];
  unsigned int v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  char v33;

  v25[0] = *((_BYTE *)this + 16);
  v26 = 0;
  v29 = 0;
  v27 = *((_BYTE *)this + 24);
  v28 = *((_BYTE *)this + 25);
  if (v27 - 2 >= 9)
  {
    if (v27 == 11)
    {
      v26 = *((_DWORD *)this + 5);
      WebCore::Length::ref((int *)&v26);
    }
  }
  else
  {
    v29 = *((_BYTE *)this + 26);
    v26 = *((_DWORD *)this + 5);
  }
  v30 = 0;
  v33 = 0;
  v31 = *((_BYTE *)this + 32);
  v32 = *((_BYTE *)this + 33);
  if (v31 - 2 >= 9)
  {
    if (v31 == 11)
    {
      v30 = *((_DWORD *)this + 7);
      WebCore::Length::ref((int *)&v30);
    }
  }
  else
  {
    v33 = *((_BYTE *)this + 34);
    v30 = *((_DWORD *)this + 7);
  }
  v16[0] = *((_BYTE *)this + 36);
  v17 = 0;
  v20 = 0;
  v18 = *((_BYTE *)this + 44);
  v19 = *((_BYTE *)this + 45);
  if (v18 - 2 >= 9)
  {
    if (v18 == 11)
    {
      v17 = *((_DWORD *)this + 10);
      WebCore::Length::ref((int *)&v17);
    }
  }
  else
  {
    v20 = *((_BYTE *)this + 46);
    v17 = *((_DWORD *)this + 10);
  }
  v21 = 0;
  v24 = 0;
  v22 = *((_BYTE *)this + 52);
  v23 = *((_BYTE *)this + 53);
  if (v22 - 2 >= 9)
  {
    if (v22 == 11)
    {
      v21 = *((_DWORD *)this + 12);
      WebCore::Length::ref((int *)&v21);
    }
  }
  else
  {
    v24 = *((_BYTE *)this + 54);
    v21 = *((_DWORD *)this + 12);
  }
  v11 = 0;
  v14 = 0;
  v12 = *((_BYTE *)this + 60);
  v13 = *((_BYTE *)this + 61);
  if (v12 - 2 >= 9)
  {
    if (v12 == 11)
    {
      v11 = *((_DWORD *)this + 14);
      WebCore::Length::ref((int *)&v11);
    }
  }
  else
  {
    v14 = *((_BYTE *)this + 62);
    v11 = *((_DWORD *)this + 14);
  }
  v15 = *((_BYTE *)this + 64);
  v6 = 0;
  v9 = 0;
  v7 = *((_BYTE *)this + 72);
  v8 = *((_BYTE *)this + 73);
  if (v7 - 2 >= 9)
  {
    if (v7 == 11)
    {
      v6 = *((_DWORD *)this + 17);
      WebCore::Length::ref((int *)&v6);
    }
  }
  else
  {
    v9 = *((_BYTE *)this + 74);
    v6 = *((_DWORD *)this + 17);
  }
  v10 = *((_BYTE *)this + 76);
  v4 = WTF::fastMalloc((WTF *)0x50);
  result = (int *)WebCore::BasicShapeEllipse::BasicShapeEllipse(v4, (uint64_t)v25, (uint64_t)v16, (int *)&v11, (int *)&v6);
  *a2 = result;
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
  }
  if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  if (v18 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
  }
  if (v31 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  if (v27 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  return result;
}

uint64_t WebCore::BasicShapeEllipse::operator==(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  WebCore::Length *v6;
  float v7;
  float v8;
  int v9;
  WebCore::Length *v10;
  float v11;
  float v12;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 3)
    return 0;
  result = WebCore::BasicShapeCenterCoordinate::operator==(a1 + 16, (float *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = WebCore::BasicShapeCenterCoordinate::operator==(a1 + 36, (float *)(a2 + 36));
    if ((_DWORD)result)
    {
      v5 = a1[60];
      if (v5 != *(unsigned __int8 *)(a2 + 60) || (a1[61] != 0) != (*(_BYTE *)(a2 + 61) != 0))
        return 0;
      if (v5 != 13)
      {
        v6 = (WebCore::Length *)(a1 + 56);
        if (v5 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v6, (const WebCore::Length *)(a2 + 56)) & 1) == 0)
            return 0;
        }
        else
        {
          if (a1[62])
            v7 = *(float *)v6;
          else
            v7 = (float)*(int *)v6;
          v8 = *(float *)(a2 + 56);
          if (!*(_BYTE *)(a2 + 62))
            v8 = (float)SLODWORD(v8);
          if (v7 != v8)
            return 0;
        }
      }
      if (a1[64] == *(_BYTE *)(a2 + 64))
      {
        v9 = a1[72];
        if (v9 == *(unsigned __int8 *)(a2 + 72) && (a1[73] != 0) == (*(_BYTE *)(a2 + 73) != 0))
        {
          if (v9 == 13)
            goto LABEL_25;
          v10 = (WebCore::Length *)(a1 + 68);
          if (v9 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v10, (const WebCore::Length *)(a2 + 68)) & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            if (a1[74])
              v11 = *(float *)v10;
            else
              v11 = (float)*(int *)v10;
            v12 = *(float *)(a2 + 68);
            if (!*(_BYTE *)(a2 + 74))
              v12 = (float)SLODWORD(v12);
            if (v11 == v12)
            {
LABEL_25:
              if (a1[76] == *(_BYTE *)(a2 + 76))
                return (a1[12] == 0) ^ (*(_BYTE *)(a2 + 12) != 0);
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::BasicShapeEllipse::type(WebCore::BasicShapeEllipse *this)
{
  return 3;
}

char *WebCore::BasicShapeEllipse::pathForCenterCoordinate(float *a1, float *a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float *v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  __n128 v28;

  v4 = a2[2];
  if (*((_BYTE *)a1 + 64))
  {
    v5 = vabds_f32(v4, a3);
    v6 = fabsf(a3);
    if (v6 >= v5)
      v7 = v6;
    else
      v7 = v5;
    if (v5 >= v6)
      v5 = v6;
    if (*((_BYTE *)a1 + 64) != 1)
      v5 = v7;
  }
  else
  {
    v8 = a1 + 14;
    v5 = fabsf(v4);
    switch(*((_BYTE *)a1 + 60))
    {
      case 0:
      case 1:
      case 9:
        break;
      case 3:
        v9 = a1[14];
        if (!*((_BYTE *)a1 + 62))
          v9 = (float)SLODWORD(v9);
        v5 = (float)(v5 * v9) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)a1 + 62))
          v5 = *v8;
        else
          v5 = (float)*(int *)v8;
        break;
      case 0xB:
        v20 = a1;
        v26 = a3;
        v24 = a4;
        v22 = a2;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(a1 + 14), v5);
        a1 = v20;
        a2 = v22;
        a4 = v24;
        v5 = v18;
        a3 = v26;
        break;
      default:
        v5 = 0.0;
        break;
    }
  }
  v10 = a2[3];
  if (*((_BYTE *)a1 + 76))
  {
    v11 = vabds_f32(v10, a4);
    v12 = fabsf(a4);
    if (v12 >= v11)
      v13 = v12;
    else
      v13 = v11;
    if (v11 >= v12)
      v11 = v12;
    if (*((_BYTE *)a1 + 76) != 1)
      v11 = v13;
  }
  else
  {
    v14 = a1 + 17;
    v11 = fabsf(v10);
    switch(*((_BYTE *)a1 + 72))
    {
      case 0:
      case 1:
      case 9:
        break;
      case 3:
        v15 = a1[17];
        if (!*((_BYTE *)a1 + 74))
          v15 = (float)SLODWORD(v15);
        v11 = (float)(v11 * v15) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)a1 + 74))
          v11 = *v14;
        else
          v11 = (float)*(int *)v14;
        break;
      case 0xB:
        v27 = a3;
        v25 = a4;
        v23 = a2;
        v21 = v5;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(a1 + 17), v11);
        v5 = v21;
        a2 = v23;
        a4 = v25;
        v11 = v19;
        a3 = v27;
        break;
      default:
        v11 = 0.0;
        break;
    }
  }
  v16 = (float)(a4 - v11) + a2[1];
  v28.n128_f32[0] = (float)(a3 - v5) + *a2;
  v28.n128_f32[1] = v16;
  v28.n128_f32[2] = v5 + v5;
  v28.n128_f32[3] = v11 + v11;
  if ((_MergedGlobals_254[0] & 1) == 0)
  {
    qword_1ECE84580 = 0;
    xmmword_1ECE84560 = 0u;
    unk_1ECE84570 = 0u;
    xmmword_1ECE84540 = 0u;
    unk_1ECE84550 = 0u;
    xmmword_1ECE84520 = 0u;
    unk_1ECE84530 = 0u;
    xmmword_1ECE84500 = 0u;
    unk_1ECE84510 = 0u;
    xmmword_1ECE844E0 = 0u;
    unk_1ECE844F0 = 0u;
    xmmword_1ECE844C0 = 0u;
    unk_1ECE844D0 = 0u;
    xmmword_1ECE844A0 = 0u;
    unk_1ECE844B0 = 0u;
    xmmword_1ECE84480 = 0u;
    unk_1ECE84490 = 0u;
    xmmword_1ECE84460 = 0u;
    unk_1ECE84470 = 0u;
    xmmword_1ECE84440 = 0u;
    unk_1ECE84450 = 0u;
    xmmword_1ECE84420 = 0u;
    *(_OWORD *)algn_1ECE84430 = 0u;
    _MergedGlobals_254[0] = 1;
  }
  return WTF::TinyLRUCache<WebCore::FloatRect,WebCore::Path,4ul,WebCore::EllipsePathPolicy>::get(&v28);
}

char *WebCore::BasicShapeEllipse::path(WebCore::BasicShapeEllipse *this, const WebCore::FloatRect *a2)
{
  float v2;
  float *v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  float v15;
  int v16;
  float v17;
  const WebCore::FloatRect *v18;
  const WebCore::FloatRect *v19;
  WebCore::BasicShapeEllipse *v20;
  WebCore::BasicShapeEllipse *v21;
  float v22;
  float v23;

  v2 = *((float *)a2 + 2);
  v3 = (float *)((char *)this + 20);
  v4 = v2;
  switch(*((_BYTE *)this + 24))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v5 = *((float *)this + 5);
      if (!*((_BYTE *)this + 26))
        v5 = (float)SLODWORD(v5);
      v4 = (float)(v2 * v5) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 26))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      break;
    case 0xB:
      v20 = this;
      v22 = *((float *)a2 + 2);
      v18 = a2;
      WebCore::Length::nonNanCalculatedValue((WebCore::BasicShapeEllipse *)((char *)this + 20), v2);
      this = v20;
      a2 = v18;
      v2 = v22;
      break;
    default:
      v4 = 0.0;
      break;
  }
  v6 = *((unsigned __int8 *)this + 16);
  v7 = *((float *)a2 + 3);
  v8 = (float *)((char *)this + 40);
  v9 = v7;
  switch(*((_BYTE *)this + 44))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v10 = *((float *)this + 10);
      if (!*((_BYTE *)this + 46))
        v10 = (float)SLODWORD(v10);
      v9 = (float)(v7 * v10) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 46))
        v9 = *v8;
      else
        v9 = (float)*(int *)v8;
      break;
    case 0xB:
      v21 = this;
      v23 = v2;
      v17 = v4;
      v19 = a2;
      v15 = *((float *)a2 + 3);
      v16 = *((unsigned __int8 *)this + 16);
      WebCore::Length::nonNanCalculatedValue((WebCore::BasicShapeEllipse *)((char *)this + 40), v7);
      v6 = v16;
      v7 = v15;
      this = v21;
      a2 = v19;
      v9 = v14;
      v4 = v17;
      v2 = v23;
      break;
    default:
      v9 = 0.0;
      break;
  }
  v11 = v2 - v4;
  if (v6)
    v4 = v11;
  v12 = v7 - v9;
  if (!*((_BYTE *)this + 36))
    v12 = v9;
  return WebCore::BasicShapeEllipse::pathForCenterCoordinate((float *)this, (float *)a2, v4, v12);
}

BOOL WebCore::BasicShapeEllipse::canBlend(uint64_t a1, unsigned __int8 *a2)
{
  return (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) == 3
      && !(*(unsigned __int8 *)(a1 + 64) | a2[64])
      && (*(unsigned __int8 *)(a1 + 76) | a2[76]) == 0;
}

void WebCore::BasicShapeEllipse::blend(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int *v9;
  int *v10;
  unsigned int *v11;
  __n128 v12;
  char v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  char v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  char v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  char v38;
  int v39;
  char v40;
  unsigned int v41;
  char v42;
  unsigned int v43;
  char v44;
  int v45;
  char v46;
  __n128 v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  __n128 v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  __n128 v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned __int8 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  char v73;
  char v74;
  char v75;
  char v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  char v79;
  char v80;
  char v81;
  int *v82;
  uint64_t *v83;
  _DWORD *v84;
  char v85;
  int v86;
  unsigned __int8 v87;
  char v88;
  unsigned __int8 v89;
  char v90;
  unsigned __int32 v91;
  unsigned __int8 v92;
  char v93;
  unsigned __int8 v94;
  char v95;
  int v96;
  unsigned int v97;
  unsigned __int8 v98;
  char v99;
  unsigned __int8 v100;
  unsigned int v101[2];
  int v102;
  unsigned int v103;
  unsigned __int8 v104;
  char v105;
  unsigned __int8 v106;
  unsigned int v107[2];
  int v108;
  unsigned __int8 v109;
  char v110;
  char v111;
  int v112;
  unsigned __int8 v113;
  char v114;
  char v115;
  char v116;
  int v117;
  unsigned __int8 v118;
  char v119;
  char v120;
  int v121;
  unsigned __int8 v122;
  char v123;
  char v124;
  char v125;
  int v126;
  unsigned __int8 v127;
  char v128;
  char v129;
  int v130;
  unsigned __int8 v131;
  char v132;
  char v133;
  unsigned int v134;
  unsigned __int8 v135;
  char v136;
  unsigned __int8 v137;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1964C087CLL);
  }
  v8 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v8 + 8) = 1;
  *(_BYTE *)(v8 + 12) = 0;
  *(_QWORD *)v8 = off_1E34417D0;
  *(_BYTE *)(v8 + 16) = 0;
  v9 = (int *)(v8 + 16);
  *(_DWORD *)(v8 + 20) = 0;
  *(_WORD *)(v8 + 24) = 13;
  *(_BYTE *)(v8 + 26) = 0;
  *(_DWORD *)(v8 + 28) = 0;
  v84 = (_DWORD *)(v8 + 28);
  *(_DWORD *)(v8 + 31) = 0;
  WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v8 + 16));
  *(_BYTE *)(v8 + 36) = 0;
  v10 = (int *)(v8 + 36);
  *(_DWORD *)(v8 + 40) = 0;
  *(_WORD *)(v8 + 44) = 13;
  *(_BYTE *)(v8 + 46) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  v11 = (unsigned int *)(v8 + 48);
  *(_DWORD *)(v8 + 51) = 0;
  WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v8 + 36));
  *(_DWORD *)(v8 + 56) = 0;
  *(_WORD *)(v8 + 60) = 13;
  *(_BYTE *)(v8 + 62) = 0;
  *(_BYTE *)(v8 + 64) = 1;
  *(_DWORD *)(v8 + 68) = 0;
  *(_WORD *)(v8 + 72) = 13;
  *(_BYTE *)(v8 + 74) = 0;
  *(_BYTE *)(v8 + 76) = 1;
  if (a1[64] || *(_BYTE *)(a2 + 64) || a1[76] || *(_BYTE *)(a2 + 76))
  {
    v13 = *(_BYTE *)(a2 + 16);
    v125 = v13;
    v126 = 0;
    v129 = 0;
    v127 = *(_BYTE *)(a2 + 24);
    v14 = v127;
    v15 = *(_BYTE *)(a2 + 25);
    v128 = v15;
    v16 = v127 - 2;
    v82 = (int *)(v8 + 48);
    v83 = a4;
    if (v16 >= 9)
    {
      if (v127 == 11)
      {
        v126 = *(_DWORD *)(a2 + 20);
        v18 = v126;
        WebCore::Length::ref(&v126);
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    else
    {
      v129 = *(_BYTE *)(a2 + 26);
      if (v129)
      {
        v18 = *(_DWORD *)(a2 + 20);
        v126 = v18;
        v17 = 1;
      }
      else
      {
        v17 = 0;
        v126 = *(_DWORD *)(a2 + 20);
        v18 = v126;
      }
    }
    v130 = 0;
    v133 = 0;
    v131 = *(_BYTE *)(a2 + 32);
    v19 = v131;
    v20 = *(_BYTE *)(a2 + 33);
    v132 = v20;
    v21 = v131 - 2;
    if (v21 >= 9)
    {
      if (v131 == 11)
      {
        v130 = *(_DWORD *)(a2 + 28);
        v23 = v130;
        v80 = v17;
        WebCore::Length::ref(&v130);
        v17 = v80;
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    else
    {
      v133 = *(_BYTE *)(a2 + 34);
      if (v133)
      {
        v23 = *(_DWORD *)(a2 + 28);
        v130 = v23;
        v22 = 1;
      }
      else
      {
        v22 = 0;
        v130 = *(_DWORD *)(a2 + 28);
        v23 = v130;
      }
    }
    *(_BYTE *)(v8 + 16) = v13;
    if (*(_BYTE *)(v8 + 24) == 11)
    {
      v79 = v22;
      v73 = v17;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 20));
      v17 = v73;
      v22 = v79;
    }
    *(_BYTE *)(v8 + 24) = v14;
    *(_BYTE *)(v8 + 25) = v15;
    if (v16 < 9)
    {
      *(_BYTE *)(v8 + 26) = v17;
LABEL_21:
      *(_DWORD *)(v8 + 20) = v18;
      goto LABEL_22;
    }
    if (v14 <= 0xD)
    {
      if (((1 << v14) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 20) = 0;
      }
      else if (v14 == 11)
      {
        v126 = 0;
        goto LABEL_21;
      }
    }
LABEL_22:
    v127 = 0;
    if (*(_BYTE *)(v8 + 32) == 11)
    {
      v74 = v22;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v84);
      v22 = v74;
    }
    *(_BYTE *)(v8 + 32) = v19;
    *(_BYTE *)(v8 + 33) = v20;
    if (v21 < 9)
    {
      *(_BYTE *)(v8 + 34) = v22;
LABEL_25:
      *v84 = v23;
      goto LABEL_26;
    }
    if (v19 <= 0xD)
    {
      if (((1 << v19) & 0x3003) != 0)
      {
        *v84 = 0;
      }
      else if (v19 == 11)
      {
        v130 = 0;
        goto LABEL_25;
      }
    }
LABEL_26:
    v131 = 0;
    v24 = *(_BYTE *)(a2 + 36);
    v116 = v24;
    v117 = 0;
    v120 = 0;
    v118 = *(_BYTE *)(a2 + 44);
    v25 = v118;
    v26 = *(_BYTE *)(a2 + 45);
    v119 = v26;
    v27 = v118 - 2;
    if (v27 >= 9)
    {
      if (v118 == 11)
      {
        v117 = *(_DWORD *)(a2 + 40);
        v29 = v117;
        WebCore::Length::ref(&v117);
        v28 = 0;
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    else
    {
      v120 = *(_BYTE *)(a2 + 46);
      if (v120)
      {
        v29 = *(_DWORD *)(a2 + 40);
        v117 = v29;
        v28 = 1;
      }
      else
      {
        v28 = 0;
        v117 = *(_DWORD *)(a2 + 40);
        v29 = v117;
      }
    }
    v124 = 0;
    v122 = *(_BYTE *)(a2 + 52);
    v30 = v122;
    v31 = *(_BYTE *)(a2 + 53);
    v123 = v31;
    v32 = v122 - 2;
    if (v32 >= 9)
    {
      if (v122 == 11)
      {
        v121 = *(_DWORD *)(a2 + 48);
        v34 = v121;
        v85 = v28;
        WebCore::Length::ref(&v121);
        v28 = v85;
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
    else
    {
      v124 = *(_BYTE *)(a2 + 54);
      if (v124)
      {
        v34 = *(_DWORD *)(a2 + 48);
        v33 = 1;
      }
      else
      {
        v33 = 0;
        v34 = *(_DWORD *)(a2 + 48);
      }
    }
    *(_BYTE *)(v8 + 36) = v24;
    if (*(_BYTE *)(v8 + 44) == 11)
    {
      v81 = v33;
      v75 = v28;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 40));
      v28 = v75;
      v33 = v81;
    }
    *(_BYTE *)(v8 + 44) = v25;
    *(_BYTE *)(v8 + 45) = v26;
    if (v27 < 9)
    {
      *(_BYTE *)(v8 + 46) = v28;
LABEL_41:
      *(_DWORD *)(v8 + 40) = v29;
      goto LABEL_42;
    }
    if (v25 <= 0xD)
    {
      if (((1 << v25) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 40) = 0;
      }
      else if (v25 == 11)
      {
        goto LABEL_41;
      }
    }
LABEL_42:
    if (*(_BYTE *)(v8 + 52) == 11)
    {
      v76 = v33;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v82);
      v33 = v76;
    }
    *(_BYTE *)(v8 + 52) = v30;
    *(_BYTE *)(v8 + 53) = v31;
    if (v32 >= 9)
    {
      a4 = v83;
      if (v30 <= 0xD)
      {
        if (((1 << v30) & 0x3003) != 0)
        {
          *v82 = 0;
        }
        else if (v30 == 11)
        {
          *v82 = v34;
        }
      }
    }
    else
    {
      *(_BYTE *)(v8 + 54) = v33;
      a4 = v83;
      *v82 = v34;
    }
    v115 = 0;
    v113 = *(_BYTE *)(a2 + 60);
    v35 = v113;
    v36 = *(_BYTE *)(a2 + 61);
    v114 = v36;
    v37 = v113 - 2;
    if (v37 >= 9)
    {
      if (v113 == 11)
      {
        v112 = *(_DWORD *)(a2 + 56);
        v39 = v112;
        WebCore::Length::ref(&v112);
        v38 = 0;
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
    else if (*(_BYTE *)(a2 + 62))
    {
      v39 = *(_DWORD *)(a2 + 56);
      v38 = 1;
    }
    else
    {
      v38 = 0;
      v39 = *(_DWORD *)(a2 + 56);
    }
    v40 = *(_BYTE *)(a2 + 64);
    if (*(_BYTE *)(v8 + 60) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 56));
    }
    *(_BYTE *)(v8 + 60) = v35;
    *(_BYTE *)(v8 + 61) = v36;
    if (v37 < 9)
    {
      *(_BYTE *)(v8 + 62) = v38;
LABEL_54:
      *(_DWORD *)(v8 + 56) = v39;
      goto LABEL_55;
    }
    if (v35 <= 0xD)
    {
      if (((1 << v35) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 56) = 0;
      }
      else if (v35 == 11)
      {
        goto LABEL_54;
      }
    }
LABEL_55:
    *(_BYTE *)(v8 + 64) = v40;
    v111 = 0;
    v109 = *(_BYTE *)(a2 + 72);
    v41 = v109;
    v42 = *(_BYTE *)(a2 + 73);
    v110 = v42;
    v43 = v109 - 2;
    if (v43 >= 9)
    {
      if (v109 == 11)
      {
        v108 = *(_DWORD *)(a2 + 68);
        v45 = v108;
        WebCore::Length::ref(&v108);
        v44 = 0;
      }
      else
      {
        v44 = 0;
        v45 = 0;
      }
    }
    else if (*(_BYTE *)(a2 + 74))
    {
      v45 = *(_DWORD *)(a2 + 68);
      v44 = 1;
    }
    else
    {
      v44 = 0;
      v45 = *(_DWORD *)(a2 + 68);
    }
    v46 = *(_BYTE *)(a2 + 76);
    if (*(_BYTE *)(v8 + 72) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 68));
    }
    *(_BYTE *)(v8 + 72) = v41;
    *(_BYTE *)(v8 + 73) = v42;
    if (v43 >= 9)
    {
      if (v41 > 0xD)
        goto LABEL_65;
      if (((1 << v41) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 68) = 0;
        goto LABEL_65;
      }
      if (v41 != 11)
        goto LABEL_65;
    }
    else
    {
      *(_BYTE *)(v8 + 74) = v44;
    }
    *(_DWORD *)(v8 + 68) = v45;
LABEL_65:
    *(_BYTE *)(v8 + 76) = v46;
    goto LABEL_66;
  }
  WebCore::blend((unsigned __int8 *)(a2 + 28), a1 + 28, a3, (uint64_t)&v134, v12);
  LOBYTE(v102) = 0;
  v103 = 0;
  v106 = 0;
  v104 = v135;
  v105 = v136;
  if (v135 - 2 < 9)
  {
    v106 = v137;
    if (v137)
    {
      v103 = v134;
      goto LABEL_88;
    }
    v65 = v134;
    goto LABEL_127;
  }
  if (v135 == 11)
  {
    v65 = v134;
    v134 = 0;
LABEL_127:
    v103 = v65;
  }
LABEL_88:
  v135 = 0;
  memset(v107, 0, 7);
  WebCore::BasicShapeCenterCoordinate::updateComputedLength(&v102);
  if (v135 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v134);
  }
  *(_BYTE *)v9 = v102;
  if (v9 != &v102)
  {
    if (*(_BYTE *)(v8 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 20));
    }
    v48 = v104;
    *(_BYTE *)(v8 + 24) = v104;
    *(_BYTE *)(v8 + 25) = v105;
    if (v48 - 2 < 9)
    {
      v49 = v106;
      *(_BYTE *)(v8 + 26) = v106;
      if (v49)
      {
        v47.n128_u32[0] = v103;
        *(_DWORD *)(v8 + 20) = v103;
        goto LABEL_94;
      }
      v67 = v103;
      goto LABEL_131;
    }
    if (v48 <= 0xD)
    {
      if (((1 << v48) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 20) = 0;
      }
      else if (v48 == 11)
      {
        v67 = v103;
        v103 = 0;
LABEL_131:
        *(_DWORD *)(v8 + 20) = v67;
      }
    }
LABEL_94:
    v104 = 0;
    if (*(_BYTE *)(v8 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v84);
    }
    v50 = LOBYTE(v107[1]);
    *(_WORD *)(v8 + 32) = v107[1];
    if (v50 - 2 >= 9)
    {
      if (v50 > 0xD)
        goto LABEL_98;
      if (((1 << v50) & 0x3003) != 0)
      {
        *v84 = 0;
        goto LABEL_98;
      }
      if (v50 != 11)
        goto LABEL_98;
      v68 = v107[0];
      v107[0] = 0;
    }
    else
    {
      v51 = BYTE2(v107[1]);
      *(_BYTE *)(v8 + 34) = BYTE2(v107[1]);
      if (v51)
      {
        v47.n128_u32[0] = v107[0];
        *v84 = v107[0];
LABEL_98:
        LOBYTE(v107[1]) = 0;
        goto LABEL_99;
      }
      v68 = v107[0];
    }
    *v84 = v68;
    goto LABEL_98;
  }
  if (LOBYTE(v107[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v107[0]);
  }
LABEL_99:
  if (v104 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v103);
  }
  WebCore::blend((unsigned __int8 *)(a2 + 48), a1 + 48, a3, (uint64_t)&v134, v47);
  LOBYTE(v96) = 0;
  v97 = 0;
  v100 = 0;
  v98 = v135;
  v99 = v136;
  if (v135 - 2 < 9)
  {
    v100 = v137;
    if (v137)
    {
      v97 = v134;
      goto LABEL_103;
    }
    v66 = v134;
    goto LABEL_129;
  }
  if (v135 == 11)
  {
    v66 = v134;
    v134 = 0;
LABEL_129:
    v97 = v66;
  }
LABEL_103:
  v135 = 0;
  memset(v101, 0, 7);
  WebCore::BasicShapeCenterCoordinate::updateComputedLength(&v96);
  if (v135 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v134);
  }
  v53 = a1 + 56;
  v54 = (unsigned __int8 *)(a2 + 56);
  *(_BYTE *)v10 = v96;
  if (v10 != &v96)
  {
    if (*(_BYTE *)(v8 + 44) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 40));
      v53 = a1 + 56;
      v54 = (unsigned __int8 *)(a2 + 56);
    }
    v55 = v98;
    *(_BYTE *)(v8 + 44) = v98;
    *(_BYTE *)(v8 + 45) = v99;
    if (v55 - 2 < 9)
    {
      v56 = v100;
      *(_BYTE *)(v8 + 46) = v100;
      if (v56)
      {
        v52.n128_u32[0] = v97;
        *(_DWORD *)(v8 + 40) = v97;
        goto LABEL_109;
      }
      v69 = v97;
      goto LABEL_135;
    }
    if (v55 <= 0xD)
    {
      if (((1 << v55) & 0x3003) != 0)
      {
        *(_DWORD *)(v8 + 40) = 0;
      }
      else if (v55 == 11)
      {
        v69 = v97;
        v97 = 0;
LABEL_135:
        *(_DWORD *)(v8 + 40) = v69;
      }
    }
LABEL_109:
    v98 = 0;
    if (*(_BYTE *)(v8 + 52) == 11)
    {
      v77 = v54;
      v78 = v53;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v11);
      v53 = v78;
      v54 = v77;
    }
    v57 = LOBYTE(v101[1]);
    *(_WORD *)(v8 + 52) = v101[1];
    if (v57 - 2 >= 9)
    {
      if (v57 > 0xD)
        goto LABEL_113;
      if (((1 << v57) & 0x3003) != 0)
      {
        *v11 = 0;
        goto LABEL_113;
      }
      if (v57 != 11)
        goto LABEL_113;
      v70 = v101[0];
      v101[0] = 0;
    }
    else
    {
      v58 = BYTE2(v101[1]);
      *(_BYTE *)(v8 + 54) = BYTE2(v101[1]);
      if (v58)
      {
        v52.n128_u32[0] = v101[0];
        *v11 = v101[0];
LABEL_113:
        LOBYTE(v101[1]) = 0;
        goto LABEL_114;
      }
      v70 = v101[0];
    }
    *v11 = v70;
    goto LABEL_113;
  }
  if (LOBYTE(v101[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v101[0]);
    v53 = a1 + 56;
    v54 = (unsigned __int8 *)(a2 + 56);
  }
LABEL_114:
  if (v98 == 11)
  {
    v71 = v54;
    v72 = v53;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    v53 = v72;
    v54 = v71;
  }
  WebCore::BasicShapeRadius::blend((WebCore::Length *)&v91, v53, v54, a3, v52);
  if (*(_BYTE *)(v8 + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 56));
  }
  v60 = v92;
  *(_BYTE *)(v8 + 60) = v92;
  *(_BYTE *)(v8 + 61) = v93;
  if (v60 - 2 < 9)
  {
    v61 = v94;
    *(_BYTE *)(v8 + 62) = v94;
    if (v61)
    {
      v59.n128_u32[0] = v91;
      *(_DWORD *)(v8 + 56) = v91;
      goto LABEL_119;
    }
LABEL_192:
    *(_DWORD *)(v8 + 56) = v91;
    goto LABEL_119;
  }
  if (v60 > 0xD)
    goto LABEL_119;
  if (((1 << v60) & 0x3003) != 0)
  {
    *(_DWORD *)(v8 + 56) = 0;
    goto LABEL_119;
  }
  if (v60 == 11)
    goto LABEL_192;
LABEL_119:
  *(_BYTE *)(v8 + 64) = v95;
  WebCore::BasicShapeRadius::blend((WebCore::Length *)&v86, a1 + 68, (unsigned __int8 *)(a2 + 68), a3, v59);
  if (*(_BYTE *)(v8 + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 68));
  }
  v62 = v87;
  *(_BYTE *)(v8 + 72) = v87;
  *(_BYTE *)(v8 + 73) = v88;
  if (v62 - 2 >= 9)
  {
    if (v62 > 0xD)
      goto LABEL_123;
    if (((1 << v62) & 0x3003) != 0)
    {
      *(_DWORD *)(v8 + 68) = 0;
      goto LABEL_123;
    }
    if (v62 != 11)
      goto LABEL_123;
LABEL_194:
    *(_DWORD *)(v8 + 68) = v86;
    goto LABEL_123;
  }
  v63 = v89;
  *(_BYTE *)(v8 + 74) = v89;
  if (!v63)
    goto LABEL_194;
  *(_DWORD *)(v8 + 68) = v86;
LABEL_123:
  *(_BYTE *)(v8 + 76) = v90;
  v64 = a1[12];
  if (v64)
    v64 = *(_BYTE *)(a2 + 12) != 0;
  *(_BYTE *)(v8 + 12) = v64;
LABEL_66:
  *a4 = v8;
}

uint64_t WebCore::BasicShapeEllipse::dump(WebCore::BasicShapeEllipse *this, WTF::TextStream *a2)
{
  WTF::TextStream *v4;
  WTF::TextStream *v5;

  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::dumpProperty<WebCore::Length>(v4, (uint64_t)"length", (unsigned int *)this + 5);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(v5);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v5);
  WTF::TextStream::dumpProperty<WebCore::Length>(v5, (uint64_t)"length", (unsigned int *)this + 10);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::dumpProperty<WebCore::BasicShapeRadius>(a2, (uint64_t)"radius-x", (uint64_t)this + 56);
  return WTF::TextStream::dumpProperty<WebCore::BasicShapeRadius>(a2, (uint64_t)"radius-y", (uint64_t)this + 68);
}

uint64_t WebCore::BasicShapeRect::create@<X0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, int *a5@<X4>, int *a6@<X5>, int *a7@<X6>, int *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  v18 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)v18 = off_1E3441958;
  result = WebCore::RectEdges<WebCore::Length>::RectEdges<WebCore::Length>(v18 + 12, a1, a2, a3, a4);
  *(_DWORD *)(v18 + 44) = 0;
  *(_WORD *)(v18 + 49) = 0;
  v20 = *((unsigned __int8 *)a5 + 4);
  *(_BYTE *)(v18 + 48) = v20;
  *(_BYTE *)(v18 + 49) = *((_BYTE *)a5 + 5);
  if (v20 - 2 < 9)
  {
    v21 = *((unsigned __int8 *)a5 + 6);
    *(_BYTE *)(v18 + 50) = v21;
    if (v21)
    {
      *(_DWORD *)(v18 + 44) = *a5;
      goto LABEL_4;
    }
    v36 = *a5;
    goto LABEL_27;
  }
  if (v20 <= 0xD)
  {
    if (((1 << v20) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 44) = 0;
    }
    else if (v20 == 11)
    {
      v36 = *a5;
      *a5 = 0;
LABEL_27:
      *(_DWORD *)(v18 + 44) = v36;
    }
  }
LABEL_4:
  *((_BYTE *)a5 + 4) = 0;
  *(_DWORD *)(v18 + 52) = 0;
  *(_WORD *)(v18 + 57) = 0;
  v22 = *((unsigned __int8 *)a5 + 12);
  *(_BYTE *)(v18 + 56) = v22;
  *(_BYTE *)(v18 + 57) = *((_BYTE *)a5 + 13);
  if (v22 - 2 < 9)
  {
    v23 = *((unsigned __int8 *)a5 + 14);
    *(_BYTE *)(v18 + 58) = v23;
    if (v23)
    {
      *(_DWORD *)(v18 + 52) = a5[2];
      goto LABEL_7;
    }
    v37 = a5[2];
    goto LABEL_29;
  }
  if (v22 <= 0xD)
  {
    if (((1 << v22) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 52) = 0;
    }
    else if (v22 == 11)
    {
      v37 = a5[2];
      a5[2] = 0;
LABEL_29:
      *(_DWORD *)(v18 + 52) = v37;
    }
  }
LABEL_7:
  *((_BYTE *)a5 + 12) = 0;
  *(_DWORD *)(v18 + 60) = 0;
  *(_WORD *)(v18 + 65) = 0;
  v24 = *((unsigned __int8 *)a6 + 4);
  *(_BYTE *)(v18 + 64) = v24;
  *(_BYTE *)(v18 + 65) = *((_BYTE *)a6 + 5);
  if (v24 - 2 < 9)
  {
    v25 = *((unsigned __int8 *)a6 + 6);
    *(_BYTE *)(v18 + 66) = v25;
    if (v25)
    {
      *(_DWORD *)(v18 + 60) = *a6;
      goto LABEL_10;
    }
    v38 = *a6;
    goto LABEL_31;
  }
  if (v24 <= 0xD)
  {
    if (((1 << v24) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 60) = 0;
    }
    else if (v24 == 11)
    {
      v38 = *a6;
      *a6 = 0;
LABEL_31:
      *(_DWORD *)(v18 + 60) = v38;
    }
  }
LABEL_10:
  *((_BYTE *)a6 + 4) = 0;
  *(_DWORD *)(v18 + 68) = 0;
  *(_WORD *)(v18 + 73) = 0;
  v26 = *((unsigned __int8 *)a6 + 12);
  *(_BYTE *)(v18 + 72) = v26;
  *(_BYTE *)(v18 + 73) = *((_BYTE *)a6 + 13);
  if (v26 - 2 < 9)
  {
    v27 = *((unsigned __int8 *)a6 + 14);
    *(_BYTE *)(v18 + 74) = v27;
    if (v27)
    {
      *(_DWORD *)(v18 + 68) = a6[2];
      goto LABEL_13;
    }
    v39 = a6[2];
    goto LABEL_33;
  }
  if (v26 <= 0xD)
  {
    if (((1 << v26) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 68) = 0;
    }
    else if (v26 == 11)
    {
      v39 = a6[2];
      a6[2] = 0;
LABEL_33:
      *(_DWORD *)(v18 + 68) = v39;
    }
  }
LABEL_13:
  *((_BYTE *)a6 + 12) = 0;
  *(_DWORD *)(v18 + 76) = 0;
  *(_WORD *)(v18 + 81) = 0;
  v28 = *((unsigned __int8 *)a7 + 4);
  *(_BYTE *)(v18 + 80) = v28;
  *(_BYTE *)(v18 + 81) = *((_BYTE *)a7 + 5);
  if (v28 - 2 < 9)
  {
    v29 = *((unsigned __int8 *)a7 + 6);
    *(_BYTE *)(v18 + 82) = v29;
    if (v29)
    {
      *(_DWORD *)(v18 + 76) = *a7;
      goto LABEL_16;
    }
    v40 = *a7;
    goto LABEL_35;
  }
  if (v28 <= 0xD)
  {
    if (((1 << v28) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 76) = 0;
    }
    else if (v28 == 11)
    {
      v40 = *a7;
      *a7 = 0;
LABEL_35:
      *(_DWORD *)(v18 + 76) = v40;
    }
  }
LABEL_16:
  *((_BYTE *)a7 + 4) = 0;
  *(_DWORD *)(v18 + 84) = 0;
  *(_WORD *)(v18 + 89) = 0;
  v30 = *((unsigned __int8 *)a7 + 12);
  *(_BYTE *)(v18 + 88) = v30;
  *(_BYTE *)(v18 + 89) = *((_BYTE *)a7 + 13);
  if (v30 - 2 < 9)
  {
    v31 = *((unsigned __int8 *)a7 + 14);
    *(_BYTE *)(v18 + 90) = v31;
    if (v31)
    {
      *(_DWORD *)(v18 + 84) = a7[2];
      goto LABEL_19;
    }
    v41 = a7[2];
    goto LABEL_37;
  }
  if (v30 <= 0xD)
  {
    if (((1 << v30) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 84) = 0;
    }
    else if (v30 == 11)
    {
      v41 = a7[2];
      a7[2] = 0;
LABEL_37:
      *(_DWORD *)(v18 + 84) = v41;
    }
  }
LABEL_19:
  *((_BYTE *)a7 + 12) = 0;
  *(_DWORD *)(v18 + 92) = 0;
  *(_WORD *)(v18 + 97) = 0;
  v32 = *((unsigned __int8 *)a8 + 4);
  *(_BYTE *)(v18 + 96) = v32;
  *(_BYTE *)(v18 + 97) = *((_BYTE *)a8 + 5);
  if (v32 - 2 < 9)
  {
    v33 = *((unsigned __int8 *)a8 + 6);
    *(_BYTE *)(v18 + 98) = v33;
    if (v33)
    {
      *(_DWORD *)(v18 + 92) = *a8;
      goto LABEL_22;
    }
    v42 = *a8;
    goto LABEL_39;
  }
  if (v32 <= 0xD)
  {
    if (((1 << v32) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 92) = 0;
    }
    else if (v32 == 11)
    {
      v42 = *a8;
      *a8 = 0;
LABEL_39:
      *(_DWORD *)(v18 + 92) = v42;
    }
  }
LABEL_22:
  *((_BYTE *)a8 + 4) = 0;
  *(_DWORD *)(v18 + 100) = 0;
  *(_WORD *)(v18 + 105) = 0;
  v34 = *((unsigned __int8 *)a8 + 12);
  *(_BYTE *)(v18 + 104) = v34;
  *(_BYTE *)(v18 + 105) = *((_BYTE *)a8 + 13);
  if (v34 - 2 >= 9)
  {
    if (v34 > 0xD)
      goto LABEL_25;
    if (((1 << v34) & 0x3003) != 0)
    {
      *(_DWORD *)(v18 + 100) = 0;
      goto LABEL_25;
    }
    if (v34 != 11)
      goto LABEL_25;
    v43 = a8[2];
    a8[2] = 0;
    goto LABEL_41;
  }
  v35 = *((unsigned __int8 *)a8 + 14);
  *(_BYTE *)(v18 + 106) = v35;
  if (!v35)
  {
    v43 = a8[2];
LABEL_41:
    *(_DWORD *)(v18 + 100) = v43;
    goto LABEL_25;
  }
  *(_DWORD *)(v18 + 100) = a8[2];
LABEL_25:
  *((_BYTE *)a8 + 12) = 0;
  *a9 = v18;
  return result;
}

int *WebCore::BasicShapeRect::clone@<X0>(WebCore::BasicShapeRect *this@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  unsigned int v5;
  int v6;
  char v7;
  unsigned int v8;
  int v9;
  char v10;
  unsigned int v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  char v22;
  int v23;
  int v24;
  char v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int *result;
  int v30;
  int v31;
  char v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  char v36;
  uint64_t *v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  char v56;
  int v57;
  unsigned int v58;
  char v59;
  int v60;
  uint64_t *v61;
  int v62;
  unsigned __int8 v63;
  char v64;
  char v65;
  int v66;
  unsigned __int8 v67;
  char v68;
  char v69;
  int v70;
  unsigned __int8 v71;
  char v72;
  char v73;
  int v74;
  unsigned __int8 v75;
  char v76;
  char v77;
  int v78;
  unsigned __int8 v79;
  char v80;
  char v81;
  int v82;
  unsigned __int8 v83;
  char v84;
  char v85;
  int v86;
  unsigned __int8 v87;
  char v88;
  char v89;
  int v90;
  unsigned __int8 v91;
  char v92;
  char v93;
  unsigned int v94;
  char v95;
  unsigned int v96;
  char v97;
  unsigned int v98;
  char v99;
  unsigned int v100;
  char v101;

  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v94, (WebCore::BasicShapeRect *)((char *)this + 12));
  v86 = 0;
  v89 = 0;
  v87 = *((_BYTE *)this + 48);
  v4 = *((_BYTE *)this + 49);
  v88 = v4;
  v5 = v87 - 2;
  v60 = v87;
  if (v5 >= 9)
  {
    if (v87 == 11)
    {
      v86 = *((_DWORD *)this + 11);
      v6 = v86;
      WebCore::Length::ref(&v86);
      v45 = 0;
    }
    else
    {
      v45 = 0;
      v6 = 0;
    }
  }
  else
  {
    v89 = *((_BYTE *)this + 50);
    if (v89)
    {
      v6 = *((_DWORD *)this + 11);
      v86 = v6;
      v45 = 1;
    }
    else
    {
      v45 = 0;
      v86 = *((_DWORD *)this + 11);
      v6 = v86;
    }
  }
  v90 = 0;
  v93 = 0;
  v91 = *((_BYTE *)this + 56);
  v7 = *((_BYTE *)this + 57);
  v92 = v7;
  v8 = v91 - 2;
  v57 = v91;
  if (v8 >= 9)
  {
    if (v91 == 11)
    {
      v90 = *((_DWORD *)this + 13);
      v9 = v90;
      WebCore::Length::ref(&v90);
      v44 = 0;
    }
    else
    {
      v44 = 0;
      v9 = 0;
    }
  }
  else
  {
    v93 = *((_BYTE *)this + 58);
    if (v93)
    {
      v9 = *((_DWORD *)this + 13);
      v90 = v9;
      v44 = 1;
    }
    else
    {
      v44 = 0;
      v90 = *((_DWORD *)this + 13);
      v9 = v90;
    }
  }
  v78 = 0;
  v81 = 0;
  v79 = *((_BYTE *)this + 64);
  v10 = *((_BYTE *)this + 65);
  v80 = v10;
  v11 = v79 - 2;
  v54 = v79;
  v58 = v5;
  if (v11 >= 9)
  {
    if (v79 == 11)
    {
      v78 = *((_DWORD *)this + 15);
      v12 = v78;
      WebCore::Length::ref(&v78);
      v43 = 0;
    }
    else
    {
      v43 = 0;
      v12 = 0;
    }
  }
  else
  {
    v81 = *((_BYTE *)this + 66);
    if (v81)
    {
      v12 = *((_DWORD *)this + 15);
      v78 = v12;
      v43 = 1;
    }
    else
    {
      v43 = 0;
      v78 = *((_DWORD *)this + 15);
      v12 = v78;
    }
  }
  v82 = 0;
  v85 = 0;
  v83 = *((_BYTE *)this + 72);
  v13 = v83;
  v14 = *((_BYTE *)this + 73);
  v84 = v14;
  v51 = v83 - 2;
  if (v51 >= 9)
  {
    if (v83 == 11)
    {
      v82 = *((_DWORD *)this + 17);
      v15 = v82;
      WebCore::Length::ref(&v82);
      v42 = 0;
    }
    else
    {
      v42 = 0;
      v15 = 0;
    }
  }
  else
  {
    v85 = *((_BYTE *)this + 74);
    if (v85)
    {
      v15 = *((_DWORD *)this + 17);
      v82 = v15;
      v42 = 1;
    }
    else
    {
      v42 = 0;
      v82 = *((_DWORD *)this + 17);
      v15 = v82;
    }
  }
  v70 = 0;
  v73 = 0;
  v71 = *((_BYTE *)this + 80);
  v16 = v71;
  v50 = *((_BYTE *)this + 81);
  v72 = v50;
  v49 = v71 - 2;
  v56 = v7;
  if (v49 >= 9)
  {
    if (v71 == 11)
    {
      v70 = *((_DWORD *)this + 19);
      v17 = v70;
      WebCore::Length::ref(&v70);
      v41 = 0;
    }
    else
    {
      v41 = 0;
      v17 = 0;
    }
  }
  else
  {
    v73 = *((_BYTE *)this + 82);
    if (v73)
    {
      v17 = *((_DWORD *)this + 19);
      v70 = v17;
      v41 = 1;
    }
    else
    {
      v41 = 0;
      v70 = *((_DWORD *)this + 19);
      v17 = v70;
    }
  }
  v77 = 0;
  v75 = *((_BYTE *)this + 88);
  v18 = v75;
  v48 = *((_BYTE *)this + 89);
  v76 = v48;
  v47 = v75 - 2;
  v59 = v4;
  v55 = v8;
  v53 = v11;
  if (v47 >= 9)
  {
    if (v75 == 11)
    {
      v74 = *((_DWORD *)this + 21);
      v19 = v74;
      WebCore::Length::ref(&v74);
      v40 = 0;
    }
    else
    {
      v40 = 0;
      v19 = 0;
    }
  }
  else
  {
    v77 = *((_BYTE *)this + 90);
    if (v77)
    {
      v19 = *((_DWORD *)this + 21);
      v74 = v19;
      v40 = 1;
    }
    else
    {
      v40 = 0;
      v74 = *((_DWORD *)this + 21);
      v19 = v74;
    }
  }
  v62 = 0;
  v65 = 0;
  v63 = *((_BYTE *)this + 96);
  v20 = v63;
  v64 = *((_BYTE *)this + 97);
  v21 = v63 - 2;
  v61 = a2;
  v52 = v14;
  v46 = v64;
  if (v21 >= 9)
  {
    v22 = v10;
    if (v63 == 11)
    {
      v62 = *((_DWORD *)this + 23);
      v23 = v62;
      WebCore::Length::ref(&v62);
      v39 = 0;
    }
    else
    {
      v39 = 0;
      v23 = 0;
    }
  }
  else
  {
    v65 = *((_BYTE *)this + 98);
    v22 = v10;
    if (v65)
    {
      v23 = *((_DWORD *)this + 23);
      v62 = v23;
      v39 = 1;
    }
    else
    {
      v39 = 0;
      v62 = *((_DWORD *)this + 23);
      v23 = v62;
    }
  }
  v69 = 0;
  v67 = *((_BYTE *)this + 104);
  v24 = v67;
  v25 = *((_BYTE *)this + 105);
  v68 = v25;
  v26 = v67 - 2;
  if (v26 >= 9)
  {
    if (v67 == 11)
    {
      v66 = *((_DWORD *)this + 25);
      v27 = v66;
      WebCore::Length::ref(&v66);
      v38 = 0;
    }
    else
    {
      v38 = 0;
      v27 = 0;
    }
  }
  else
  {
    v69 = *((_BYTE *)this + 106);
    if (v69)
    {
      v27 = *((_DWORD *)this + 25);
      v66 = v27;
      v38 = 1;
    }
    else
    {
      v38 = 0;
      v66 = *((_DWORD *)this + 25);
      v27 = v66;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)(v28 + 8) = 1;
  *(_QWORD *)v28 = off_1E3441958;
  result = (int *)WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v28 + 12), (const WebCore::LengthBox *)&v94);
  *(_DWORD *)(v28 + 44) = 0;
  *(_BYTE *)(v28 + 50) = 0;
  *(_BYTE *)(v28 + 48) = v60;
  *(_BYTE *)(v28 + 49) = v59;
  if (v58 < 9)
  {
    *(_BYTE *)(v28 + 50) = v45;
    v30 = v57;
LABEL_51:
    *(_DWORD *)(v28 + 44) = v6;
    goto LABEL_52;
  }
  v30 = v57;
  if (v60 == 11)
  {
    v86 = 0;
    goto LABEL_51;
  }
LABEL_52:
  v87 = 0;
  *(_DWORD *)(v28 + 52) = 0;
  *(_BYTE *)(v28 + 58) = 0;
  *(_BYTE *)(v28 + 56) = v30;
  *(_BYTE *)(v28 + 57) = v56;
  if (v55 >= 9)
  {
    v31 = v54;
    if (v30 == 11)
    {
      v90 = 0;
      *(_DWORD *)(v28 + 52) = v9;
    }
  }
  else
  {
    *(_BYTE *)(v28 + 58) = v44;
    *(_DWORD *)(v28 + 52) = v9;
    v31 = v54;
  }
  v91 = 0;
  *(_DWORD *)(v28 + 60) = 0;
  *(_BYTE *)(v28 + 66) = 0;
  *(_BYTE *)(v28 + 64) = v31;
  *(_BYTE *)(v28 + 65) = v22;
  if (v53 < 9)
  {
    *(_BYTE *)(v28 + 66) = v43;
    v33 = v49;
    v32 = v50;
    v35 = v47;
    v34 = v48;
    v36 = v46;
LABEL_56:
    *(_DWORD *)(v28 + 60) = v12;
    goto LABEL_57;
  }
  v33 = v49;
  v32 = v50;
  v35 = v47;
  v34 = v48;
  v36 = v46;
  if (v31 == 11)
  {
    v78 = 0;
    goto LABEL_56;
  }
LABEL_57:
  *(_DWORD *)(v28 + 68) = 0;
  *(_BYTE *)(v28 + 74) = 0;
  *(_BYTE *)(v28 + 72) = v13;
  *(_BYTE *)(v28 + 73) = v52;
  if (v51 < 9)
  {
    *(_BYTE *)(v28 + 74) = v42;
LABEL_59:
    *(_DWORD *)(v28 + 68) = v15;
    goto LABEL_60;
  }
  if (v13 == 11)
    goto LABEL_59;
LABEL_60:
  *(_DWORD *)(v28 + 76) = 0;
  *(_BYTE *)(v28 + 82) = 0;
  *(_BYTE *)(v28 + 80) = v16;
  *(_BYTE *)(v28 + 81) = v32;
  if (v33 < 9)
  {
    *(_BYTE *)(v28 + 82) = v41;
LABEL_62:
    *(_DWORD *)(v28 + 76) = v17;
    goto LABEL_63;
  }
  if (v16 == 11)
    goto LABEL_62;
LABEL_63:
  *(_DWORD *)(v28 + 84) = 0;
  *(_BYTE *)(v28 + 90) = 0;
  *(_BYTE *)(v28 + 88) = v18;
  *(_BYTE *)(v28 + 89) = v34;
  if (v35 < 9)
  {
    *(_BYTE *)(v28 + 90) = v40;
LABEL_65:
    *(_DWORD *)(v28 + 84) = v19;
    goto LABEL_66;
  }
  if (v18 == 11)
    goto LABEL_65;
LABEL_66:
  *(_DWORD *)(v28 + 92) = 0;
  *(_BYTE *)(v28 + 98) = 0;
  *(_BYTE *)(v28 + 96) = v20;
  *(_BYTE *)(v28 + 97) = v36;
  if (v21 < 9)
  {
    *(_BYTE *)(v28 + 98) = v39;
LABEL_68:
    *(_DWORD *)(v28 + 92) = v23;
    goto LABEL_69;
  }
  if (v20 == 11)
    goto LABEL_68;
LABEL_69:
  *(_DWORD *)(v28 + 100) = 0;
  *(_BYTE *)(v28 + 106) = 0;
  *(_BYTE *)(v28 + 104) = v24;
  *(_BYTE *)(v28 + 105) = v25;
  if (v26 < 9)
  {
    *(_BYTE *)(v28 + 106) = v38;
    v37 = v61;
LABEL_71:
    *(_DWORD *)(v28 + 100) = v27;
    goto LABEL_72;
  }
  v37 = v61;
  if (v24 == 11)
    goto LABEL_71;
LABEL_72:
  *v37 = v28;
  if (v101 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v100);
  }
  if (v99 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
  }
  if (v97 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v96);
  }
  if (v95 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v94);
  }
  return result;
}

uint64_t WebCore::BasicShapeRect::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  int v5;
  WebCore::Length *v6;
  float v7;
  float v8;
  int v9;
  WebCore::Length *v10;
  float v11;
  float v12;
  int v13;
  WebCore::Length *v14;
  float v15;
  float v16;
  int v17;
  WebCore::Length *v18;
  float v19;
  float v20;
  int v21;
  WebCore::Length *v22;
  float v23;
  float v24;
  int v25;
  WebCore::Length *v26;
  float v27;
  float v28;
  int v29;
  WebCore::Length *v30;
  float v31;
  float v32;
  int v33;
  WebCore::Length *v34;
  float v35;
  float v36;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 5)
    return 0;
  result = WebCore::operator==(a1 + 12, a2 + 12);
  if (!(_DWORD)result)
    return result;
  v5 = a1[48];
  if (v5 != a2[48] || (a1[49] != 0) != (a2[49] != 0))
    return 0;
  if (v5 != 13)
  {
    v6 = (WebCore::Length *)(a1 + 44);
    if (v5 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v6, (const WebCore::Length *)(a2 + 44)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[50])
        v7 = *(float *)v6;
      else
        v7 = (float)*(int *)v6;
      v8 = *((float *)a2 + 11);
      if (!a2[50])
        v8 = (float)SLODWORD(v8);
      if (v7 != v8)
        return 0;
    }
  }
  v9 = a1[56];
  if (v9 != a2[56] || (a1[57] != 0) != (a2[57] != 0))
    return 0;
  if (v9 != 13)
  {
    v10 = (WebCore::Length *)(a1 + 52);
    if (v9 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v10, (const WebCore::Length *)(a2 + 52)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[58])
        v11 = *(float *)v10;
      else
        v11 = (float)*(int *)v10;
      v12 = *((float *)a2 + 13);
      if (!a2[58])
        v12 = (float)SLODWORD(v12);
      if (v11 != v12)
        return 0;
    }
  }
  v13 = a1[64];
  if (v13 != a2[64] || (a1[65] != 0) != (a2[65] != 0))
    return 0;
  if (v13 != 13)
  {
    v14 = (WebCore::Length *)(a1 + 60);
    if (v13 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v14, (const WebCore::Length *)(a2 + 60)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[66])
        v15 = *(float *)v14;
      else
        v15 = (float)*(int *)v14;
      v16 = *((float *)a2 + 15);
      if (!a2[66])
        v16 = (float)SLODWORD(v16);
      if (v15 != v16)
        return 0;
    }
  }
  v17 = a1[72];
  if (v17 != a2[72] || (a1[73] != 0) != (a2[73] != 0))
    return 0;
  if (v17 != 13)
  {
    v18 = (WebCore::Length *)(a1 + 68);
    if (v17 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v18, (const WebCore::Length *)(a2 + 68)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[74])
        v19 = *(float *)v18;
      else
        v19 = (float)*(int *)v18;
      v20 = *((float *)a2 + 17);
      if (!a2[74])
        v20 = (float)SLODWORD(v20);
      if (v19 != v20)
        return 0;
    }
  }
  v21 = a1[80];
  if (v21 != a2[80] || (a1[81] != 0) != (a2[81] != 0))
    return 0;
  if (v21 != 13)
  {
    v22 = (WebCore::Length *)(a1 + 76);
    if (v21 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v22, (const WebCore::Length *)(a2 + 76)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[82])
        v23 = *(float *)v22;
      else
        v23 = (float)*(int *)v22;
      v24 = *((float *)a2 + 19);
      if (!a2[82])
        v24 = (float)SLODWORD(v24);
      if (v23 != v24)
        return 0;
    }
  }
  v25 = a1[88];
  if (v25 != a2[88] || (a1[89] != 0) != (a2[89] != 0))
    return 0;
  if (v25 != 13)
  {
    v26 = (WebCore::Length *)(a1 + 84);
    if (v25 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v26, (const WebCore::Length *)(a2 + 84)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[90])
        v27 = *(float *)v26;
      else
        v27 = (float)*(int *)v26;
      v28 = *((float *)a2 + 21);
      if (!a2[90])
        v28 = (float)SLODWORD(v28);
      if (v27 != v28)
        return 0;
    }
  }
  v29 = a1[96];
  if (v29 != a2[96] || (a1[97] != 0) != (a2[97] != 0))
    return 0;
  if (v29 != 13)
  {
    v30 = (WebCore::Length *)(a1 + 92);
    if (v29 != 11)
    {
      if (a1[98])
        v31 = *(float *)v30;
      else
        v31 = (float)*(int *)v30;
      v32 = *((float *)a2 + 23);
      if (!a2[98])
        v32 = (float)SLODWORD(v32);
      if (v31 != v32)
        return 0;
      goto LABEL_73;
    }
    if ((WebCore::Length::isCalculatedEqual(v30, (const WebCore::Length *)(a2 + 92)) & 1) != 0)
      goto LABEL_73;
    return 0;
  }
LABEL_73:
  v33 = a1[104];
  if (v33 != a2[104] || (a1[105] != 0) != (a2[105] != 0))
    return 0;
  if (v33 == 13)
    return 1;
  v34 = (WebCore::Length *)(a1 + 100);
  if (v33 == 11)
    return WebCore::Length::isCalculatedEqual(v34, (const WebCore::Length *)(a2 + 100));
  if (a1[106])
    v35 = *(float *)v34;
  else
    v35 = (float)*(int *)v34;
  v36 = *((float *)a2 + 25);
  if (!a2[106])
    v36 = (float)SLODWORD(v36);
  return v35 == v36;
}

uint64_t WebCore::BasicShapeRect::type(WebCore::BasicShapeRect *this)
{
  return 5;
}

char *WebCore::BasicShapeRect::path(WebCore::BasicShapeRect *this, const WebCore::FloatRect *a2, const WebCore::FloatSize *a3)
{
  int v5;
  float v6;
  WebCore::Length *v7;
  float v8;
  WebCore::Length *v9;
  float v10;
  float v11;
  WebCore::Length *v12;
  float v13;
  float v14;
  float v15;
  WebCore::Length *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  const WebCore::FloatSize *v22;
  float v23;
  float v24;
  float v25;
  const WebCore::FloatSize *v26;
  float v27;
  float v28;
  float v29;
  const WebCore::FloatSize *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = *((unsigned __int8 *)this + 16);
  v6 = 0.0;
  if (*((_BYTE *)this + 16))
  {
    v7 = (WebCore::BasicShapeRect *)((char *)this + 12);
    v6 = *((float *)a2 + 3);
    switch(v5)
    {
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
        v6 = 0.0;
        break;
      case 3:
        v8 = *((float *)this + 3);
        if (!*((_BYTE *)this + 18))
          v8 = (float)SLODWORD(v8);
        v6 = (float)(v6 * v8) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)this + 18))
          v6 = *(float *)v7;
        else
          v6 = (float)*(int *)v7;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue(v7, *((float *)a2 + 3));
        v6 = v44;
        break;
      default:
        break;
    }
  }
  if (*((_BYTE *)this + 24))
  {
    v9 = (WebCore::BasicShapeRect *)((char *)this + 20);
    v10 = *((float *)a2 + 2);
    switch(*((_BYTE *)this + 24))
    {
      case 1:
      case 9:
        break;
      case 3:
        v11 = *((float *)this + 5);
        if (!*((_BYTE *)this + 26))
          v11 = (float)SLODWORD(v11);
        v10 = (float)(v10 * v11) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)this + 26))
          v10 = *(float *)v9;
        else
          v10 = (float)*(int *)v9;
        break;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue(v9, v10);
        break;
      default:
        v10 = 0.0;
        break;
    }
  }
  else
  {
    v10 = *((float *)a2 + 2);
  }
  if (*((_BYTE *)this + 32))
  {
    v12 = (WebCore::BasicShapeRect *)((char *)this + 28);
    v13 = *((float *)a2 + 3);
    switch(*((_BYTE *)this + 32))
    {
      case 1:
      case 9:
        break;
      case 3:
        v14 = *((float *)this + 7);
        if (!*((_BYTE *)this + 34))
          v14 = (float)SLODWORD(v14);
        v13 = (float)(v13 * v14) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)this + 34))
          v13 = *(float *)v12;
        else
          v13 = (float)*(int *)v12;
        break;
      case 0xB:
        v45 = v10;
        WebCore::Length::nonNanCalculatedValue(v12, *((float *)a2 + 3));
        v13 = v46;
        v10 = v45;
        break;
      default:
        v13 = 0.0;
        break;
    }
  }
  else
  {
    v13 = *((float *)a2 + 3);
  }
  v15 = 0.0;
  if (*((_BYTE *)this + 40))
  {
    v16 = (WebCore::BasicShapeRect *)((char *)this + 36);
    v15 = *((float *)a2 + 2);
    switch(*((_BYTE *)this + 40))
    {
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xA:
      case 0xC:
      case 0xD:
        v15 = 0.0;
        break;
      case 3:
        v17 = *((float *)this + 9);
        if (!*((_BYTE *)this + 42))
          v17 = (float)SLODWORD(v17);
        v15 = (float)(v15 * v17) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)this + 42))
          v15 = *(float *)v16;
        else
          v15 = (float)*(int *)v16;
        break;
      case 0xB:
        v47 = v10;
        WebCore::Length::nonNanCalculatedValue(v16, *((float *)a2 + 2));
        v15 = v48;
        v10 = v47;
        break;
      default:
        break;
    }
  }
  if (v10 < v15)
    v10 = v15;
  if (v6 >= v13)
    v18 = v6;
  else
    v18 = v13;
  v51 = *(float *)a2;
  v49 = v18;
  v50 = *((float *)a2 + 1);
  v19 = v10 - v15;
  v53 = *((_QWORD *)a2 + 1);
  v20 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeRect *)((char *)this + 44), (const WebCore::LengthSize *)&v53, a3);
  v52 = v21;
  v66 = *((_QWORD *)a2 + 1);
  v23 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeRect *)((char *)this + 60), (const WebCore::LengthSize *)&v66, v22);
  v25 = v24;
  v65 = *((_QWORD *)a2 + 1);
  v27 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeRect *)((char *)this + 92), (const WebCore::LengthSize *)&v65, v26);
  v29 = v28;
  v64 = *((_QWORD *)a2 + 1);
  v31 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeRect *)((char *)this + 76), (const WebCore::LengthSize *)&v64, v30);
  v33 = 1.0;
  if ((float)(v20 + v23) > v19 && (float)(v19 / (float)(v20 + v23)) <= 1.0)
    v33 = v19 / (float)(v20 + v23);
  v34 = v49 - v6;
  v35 = v27;
  if ((float)(v27 + v31) > v19 && v33 >= (float)(v19 / (float)(v27 + v31)))
    v33 = v19 / (float)(v27 + v31);
  v36 = v52;
  if ((float)(v52 + v29) > v34 && v33 >= (float)(v34 / (float)(v52 + v29)))
    v33 = v34 / (float)(v52 + v29);
  if ((float)(v25 + v32) > v34 && v33 >= (float)(v34 / (float)(v25 + v32)))
    v33 = v34 / (float)(v25 + v32);
  if (v33 != 1.0)
  {
    v38 = (float)(v20 * v33) != 0.0;
    v39 = (float)(v52 * v33) != 0.0;
    v36 = v38 && v39 ? v52 * v33 : 0.0;
    v20 = v38 && v39 ? v20 * v33 : 0.0;
    v40 = (float)(v23 * v33) != 0.0;
    v41 = (float)(v25 * v33) != 0.0;
    v25 = v40 && v41 ? v25 * v33 : 0.0;
    v23 = v40 && v41 ? v23 * v33 : 0.0;
    v42 = (float)(v35 * v33) != 0.0;
    v43 = (float)(v29 * v33) != 0.0;
    v29 = v42 && v43 ? v29 * v33 : 0.0;
    v35 = v42 && v43 ? v35 * v33 : 0.0;
    v31 = v31 * v33;
    v32 = v32 * v33;
    if (v31 == 0.0 || v32 == 0.0)
    {
      v32 = 0.0;
      v31 = 0.0;
    }
  }
  *(float *)&v53 = v15 + v51;
  *((float *)&v53 + 1) = v6 + v50;
  v54 = v19;
  v55 = v49 - v6;
  v56 = v20;
  v57 = v36;
  v58 = v23;
  v59 = v25;
  v60 = v35;
  v61 = v29;
  v62 = v31;
  v63 = v32;
  if ((byte_1ECE842D9 & 1) == 0)
  {
    qword_1ECE848D0 = 0;
    xmmword_1ECE848B0 = 0u;
    unk_1ECE848C0 = 0u;
    xmmword_1ECE84890 = 0u;
    unk_1ECE848A0 = 0u;
    xmmword_1ECE84870 = 0u;
    unk_1ECE84880 = 0u;
    xmmword_1ECE84850 = 0u;
    unk_1ECE84860 = 0u;
    xmmword_1ECE84830 = 0u;
    unk_1ECE84840 = 0u;
    xmmword_1ECE84810 = 0u;
    unk_1ECE84820 = 0u;
    xmmword_1ECE847F0 = 0u;
    unk_1ECE84800 = 0u;
    xmmword_1ECE847D0 = 0u;
    unk_1ECE847E0 = 0u;
    xmmword_1ECE847B0 = 0u;
    unk_1ECE847C0 = 0u;
    xmmword_1ECE84790 = 0u;
    unk_1ECE847A0 = 0u;
    xmmword_1ECE84770 = 0u;
    unk_1ECE84780 = 0u;
    xmmword_1ECE84750 = 0u;
    unk_1ECE84760 = 0u;
    xmmword_1ECE84730 = 0u;
    unk_1ECE84740 = 0u;
    xmmword_1ECE84710 = 0u;
    unk_1ECE84720 = 0u;
    xmmword_1ECE846F0 = 0u;
    unk_1ECE84700 = 0u;
    byte_1ECE842D9 = 1;
  }
  return WTF::TinyLRUCache<WebCore::FloatRoundedRect,WebCore::Path,4ul,WebCore::RoundedRectPathPolicy>::get((uint64_t)&v53);
}

BOOL WebCore::BasicShapeRect::canBlend(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == 5;
}

void WebCore::BasicShapeRect::blend(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  __n128 v13;
  __n128 v14;
  unsigned int v15;
  int v16;
  int v17;
  __n128 v18;
  unsigned int v19;
  int v20;
  int v21;
  __n128 v22;
  unsigned int v23;
  int v24;
  int v25;
  __n128 v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned __int32 *v30;
  __n128 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  unsigned __int8 v36;
  unsigned __int32 *v37;
  __n128 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unsigned __int8 v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int32 *v46;
  __n128 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 v50;
  char v51;
  unsigned int v52;
  unsigned __int32 *v53;
  __n128 v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 v57;
  char v58;
  unsigned int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int32 *v62;
  __n128 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 v66;
  char v67;
  unsigned int v68;
  unsigned __int32 *v69;
  __n128 v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 v73;
  char v74;
  unsigned int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int32 *v78;
  __n128 v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 v82;
  char v83;
  unsigned int v84;
  float *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned __int8 v88;
  char v89;
  unsigned int v90;
  uint64_t *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 v103;
  char v104;
  unsigned __int8 v105;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1964C2B08);
  }
  v91 = a4;
  v8 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v8 = off_1E3441958;
  *(_QWORD *)(v8 + 8) = 1;
  *(_DWORD *)(v8 + 20) = 0;
  v9 = (int *)(v8 + 20);
  *(_DWORD *)(v8 + 28) = 0;
  v10 = (int *)(v8 + 28);
  *(_DWORD *)(v8 + 36) = 0;
  v11 = (int *)(v8 + 36);
  v12 = (int *)(v8 + 12);
  *(_DWORD *)(v8 + 15) = 0;
  *(_DWORD *)(v8 + 23) = 0;
  *(_DWORD *)(v8 + 31) = 0;
  *(_DWORD *)(v8 + 39) = 0;
  *(_DWORD *)(v8 + 44) = 0;
  v92 = (unsigned int *)(v8 + 44);
  *(_DWORD *)(v8 + 52) = 0;
  v93 = (unsigned int *)(v8 + 52);
  *(_DWORD *)(v8 + 47) = 0;
  *(_DWORD *)(v8 + 60) = 0;
  v94 = (unsigned int *)(v8 + 60);
  *(_DWORD *)(v8 + 55) = 0;
  *(_DWORD *)(v8 + 68) = 0;
  v95 = (unsigned int *)(v8 + 68);
  *(_DWORD *)(v8 + 63) = 0;
  *(_DWORD *)(v8 + 71) = 0;
  *(_DWORD *)(v8 + 76) = 0;
  v96 = (unsigned int *)(v8 + 76);
  *(_DWORD *)(v8 + 84) = 0;
  v97 = (unsigned int *)(v8 + 84);
  *(_DWORD *)(v8 + 79) = 0;
  *(_DWORD *)(v8 + 87) = 0;
  *(_DWORD *)(v8 + 92) = 0;
  v98 = (unsigned int *)(v8 + 92);
  *(_DWORD *)(v8 + 100) = 0;
  v99 = (unsigned int *)(v8 + 100);
  *(_DWORD *)(v8 + 95) = 0;
  *(_DWORD *)(v8 + 103) = 0;
  WebCore::blend(a2 + 12, a1 + 12, a3, (uint64_t)&v102, v13);
  v100 = a3;
  v101 = a1;
  if ((unsigned int *)(v8 + 12) != &v102)
  {
    if (*(_BYTE *)(v8 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v15 = v103;
    *(_BYTE *)(v8 + 16) = v103;
    *(_BYTE *)(v8 + 17) = v104;
    if (v15 <= 0xD)
    {
      v16 = 1 << v15;
      if ((v16 & 0x7FC) != 0)
      {
        v17 = v105;
        *(_BYTE *)(v8 + 18) = v105;
        if (v17)
          v14.n128_u32[0] = v102;
        *v12 = v102;
      }
      else if ((v16 & 0x3003) != 0)
      {
        *v12 = 0;
      }
      else
      {
        *v12 = v102;
        WebCore::Length::ref(v12);
      }
    }
  }
  if (v103 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v102);
  }
  WebCore::blend(a2 + 20, a1 + 20, a3, (uint64_t)&v102, v14);
  if (v9 != (int *)&v102)
  {
    if (*(_BYTE *)(v8 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
    }
    v19 = v103;
    *(_BYTE *)(v8 + 24) = v103;
    *(_BYTE *)(v8 + 25) = v104;
    if (v19 <= 0xD)
    {
      v20 = 1 << v19;
      if ((v20 & 0x7FC) != 0)
      {
        v21 = v105;
        *(_BYTE *)(v8 + 26) = v105;
        if (v21)
          v18.n128_u32[0] = v102;
        *v9 = v102;
      }
      else if ((v20 & 0x3003) != 0)
      {
        *v9 = 0;
      }
      else
      {
        *v9 = v102;
        WebCore::Length::ref(v9);
      }
    }
  }
  if (v103 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v102);
  }
  WebCore::blend(a2 + 28, a1 + 28, a3, (uint64_t)&v102, v18);
  if (v10 != (int *)&v102)
  {
    if (*(_BYTE *)(v8 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
    }
    v23 = v103;
    *(_BYTE *)(v8 + 32) = v103;
    *(_BYTE *)(v8 + 33) = v104;
    if (v23 <= 0xD)
    {
      v24 = 1 << v23;
      if ((v24 & 0x7FC) != 0)
      {
        v25 = v105;
        *(_BYTE *)(v8 + 34) = v105;
        if (v25)
          v22.n128_u32[0] = v102;
        *v10 = v102;
      }
      else if ((v24 & 0x3003) != 0)
      {
        *v10 = 0;
      }
      else
      {
        *v10 = v102;
        WebCore::Length::ref(v10);
      }
    }
  }
  if (v103 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v102);
  }
  WebCore::blend(a2 + 36, a1 + 36, a3, (uint64_t)&v102, v22);
  if (v11 != (int *)&v102)
  {
    if (*(_BYTE *)(v8 + 40) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v11);
    }
    v27 = v103;
    *(_BYTE *)(v8 + 40) = v103;
    *(_BYTE *)(v8 + 41) = v104;
    if (v27 <= 0xD)
    {
      v28 = 1 << v27;
      if ((v28 & 0x7FC) != 0)
      {
        v29 = v105;
        *(_BYTE *)(v8 + 42) = v105;
        if (v29)
          v26.n128_u32[0] = v102;
        *v11 = v102;
      }
      else if ((v28 & 0x3003) != 0)
      {
        *v11 = 0;
      }
      else
      {
        *v11 = v102;
        WebCore::Length::ref(v11);
      }
    }
  }
  if (v103 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v102);
  }
  v30 = (unsigned __int32 *)(a2 + 44);
  WebCore::blend(a2 + 44, a1 + 44, a3, (uint64_t)&v102, v26);
  v32 = v103;
  if (v103 != 11 && v103 != 13)
  {
    if (v105)
    {
      v31.n128_u32[0] = v102;
      if (*(float *)&v102 < 0.0)
      {
LABEL_46:
        v33 = a2[48];
        if (!a2[48] || v33 == 11)
          goto LABEL_51;
        if (a2[50])
        {
          v31.n128_u32[0] = *v30;
          if (*(float *)v30 != 0.0)
          {
LABEL_51:
            v34 = 0;
            v35 = 0;
            v36 = 0;
            if (v33 == 11)
              v32 = 4;
            else
              v32 = v33;
            goto LABEL_77;
          }
        }
        else if (*v30)
        {
          goto LABEL_51;
        }
        v33 = a1[48];
        goto LABEL_51;
      }
    }
    else if ((v102 & 0x80000000) != 0)
    {
      goto LABEL_46;
    }
  }
  v35 = v104;
  if (v103 - 2 >= 9)
  {
    if (v103 != 11)
    {
      v34 = 0;
      v36 = 0;
      goto LABEL_77;
    }
    v36 = 0;
  }
  else
  {
    v36 = v105;
  }
  v34 = v102;
LABEL_77:
  v37 = (unsigned __int32 *)(a2 + 52);
  WebCore::blend(a2 + 52, a1 + 52, a3, (uint64_t)&v102, v31);
  v39 = v103;
  if (v103 == 11 || v103 == 13)
    goto LABEL_95;
  if (!v105)
  {
    if ((v102 & 0x80000000) != 0)
      goto LABEL_81;
LABEL_95:
    v42 = v104;
    if (v103 - 2 >= 9)
    {
      if (v103 != 11)
      {
        v41 = 0;
        v43 = 0;
        goto LABEL_98;
      }
      v43 = 0;
    }
    else
    {
      v43 = v105;
    }
    v41 = v102;
    goto LABEL_98;
  }
  v38.n128_u32[0] = v102;
  if (*(float *)&v102 >= 0.0)
    goto LABEL_95;
LABEL_81:
  v40 = a2[56];
  if (!a2[56] || v40 == 11)
    goto LABEL_86;
  if (!a2[58])
  {
    if (*v37)
      goto LABEL_86;
    goto LABEL_85;
  }
  v38.n128_u32[0] = *v37;
  if (*(float *)v37 == 0.0)
LABEL_85:
    v40 = a1[56];
LABEL_86:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (v40 == 11)
    v39 = 4;
  else
    v39 = v40;
LABEL_98:
  if (*(_BYTE *)(v8 + 48) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v92);
  }
  *(_BYTE *)(v8 + 48) = v32;
  *(_BYTE *)(v8 + 49) = v35;
  if (v32 - 2 < 9)
  {
    *(_BYTE *)(v8 + 50) = v36;
LABEL_101:
    *v92 = v34;
    goto LABEL_102;
  }
  if (v32 <= 0xD)
  {
    if (((1 << v32) & 0x3003) != 0)
    {
      v34 = 0;
      goto LABEL_101;
    }
    if (v32 == 11)
      goto LABEL_101;
  }
LABEL_102:
  if (*(_BYTE *)(v8 + 56) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v93);
  }
  *(_BYTE *)(v8 + 56) = v39;
  *(_BYTE *)(v8 + 57) = v42;
  if (v39 - 2 >= 9)
  {
    v45 = v100;
    v44 = v101;
    if (v39 > 0xD)
      goto LABEL_106;
    if (((1 << v39) & 0x3003) != 0)
    {
      v41 = 0;
    }
    else if (v39 != 11)
    {
      goto LABEL_106;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 58) = v43;
    v45 = v100;
    v44 = v101;
  }
  *v93 = v41;
LABEL_106:
  v46 = (unsigned __int32 *)(a2 + 60);
  WebCore::blend(a2 + 60, v44 + 60, v45, (uint64_t)&v102, v38);
  v48 = v103;
  if (v103 != 11 && v103 != 13)
  {
    if (v105)
    {
      v47.n128_u32[0] = v102;
      if (*(float *)&v102 < 0.0)
      {
LABEL_110:
        v49 = a2[64];
        if (!a2[64] || v49 == 11)
          goto LABEL_115;
        if (a2[66])
        {
          v47.n128_u32[0] = *v46;
          if (*(float *)v46 != 0.0)
          {
LABEL_115:
            v50 = 0;
            v51 = 0;
            v52 = 0;
            if (v49 == 11)
              v48 = 4;
            else
              v48 = v49;
            goto LABEL_137;
          }
        }
        else if (*v46)
        {
          goto LABEL_115;
        }
        v49 = v44[64];
        goto LABEL_115;
      }
    }
    else if ((v102 & 0x80000000) != 0)
    {
      goto LABEL_110;
    }
  }
  v51 = v104;
  if (v103 - 2 >= 9)
  {
    if (v103 != 11)
    {
      v50 = 0;
      v52 = 0;
      goto LABEL_137;
    }
    v50 = 0;
  }
  else
  {
    v50 = v105;
  }
  v52 = v102;
LABEL_137:
  v53 = (unsigned __int32 *)(a2 + 68);
  WebCore::blend(a2 + 68, v44 + 68, v45, (uint64_t)&v102, v47);
  v55 = v103;
  if (v103 == 11 || v103 == 13)
    goto LABEL_155;
  if (!v105)
  {
    if ((v102 & 0x80000000) != 0)
      goto LABEL_141;
LABEL_155:
    v58 = v104;
    if (v103 - 2 >= 9)
    {
      if (v103 != 11)
      {
        v57 = 0;
        v59 = 0;
        goto LABEL_158;
      }
      v57 = 0;
    }
    else
    {
      v57 = v105;
    }
    v59 = v102;
    goto LABEL_158;
  }
  v54.n128_u32[0] = v102;
  if (*(float *)&v102 >= 0.0)
    goto LABEL_155;
LABEL_141:
  v56 = a2[72];
  if (!a2[72] || v56 == 11)
    goto LABEL_146;
  if (!a2[74])
  {
    if (*v53)
      goto LABEL_146;
    goto LABEL_145;
  }
  v54.n128_u32[0] = *v53;
  if (*(float *)v53 == 0.0)
LABEL_145:
    v56 = v44[72];
LABEL_146:
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if (v56 == 11)
    v55 = 4;
  else
    v55 = v56;
LABEL_158:
  if (*(_BYTE *)(v8 + 64) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v94);
  }
  *(_BYTE *)(v8 + 64) = v48;
  *(_BYTE *)(v8 + 65) = v51;
  if (v48 - 2 < 9)
  {
    *(_BYTE *)(v8 + 66) = v50;
LABEL_161:
    *v94 = v52;
    goto LABEL_162;
  }
  if (v48 <= 0xD)
  {
    if (((1 << v48) & 0x3003) != 0)
    {
      v52 = 0;
      goto LABEL_161;
    }
    if (v48 == 11)
      goto LABEL_161;
  }
LABEL_162:
  if (*(_BYTE *)(v8 + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v95);
  }
  *(_BYTE *)(v8 + 72) = v55;
  *(_BYTE *)(v8 + 73) = v58;
  if (v55 - 2 >= 9)
  {
    v61 = v100;
    v60 = v101;
    if (v55 > 0xD)
      goto LABEL_166;
    if (((1 << v55) & 0x3003) != 0)
    {
      v59 = 0;
    }
    else if (v55 != 11)
    {
      goto LABEL_166;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 74) = v57;
    v61 = v100;
    v60 = v101;
  }
  *v95 = v59;
LABEL_166:
  v62 = (unsigned __int32 *)(a2 + 76);
  WebCore::blend(a2 + 76, v60 + 76, v61, (uint64_t)&v102, v54);
  v64 = v103;
  if (v103 != 11 && v103 != 13)
  {
    if (v105)
    {
      v63.n128_u32[0] = v102;
      if (*(float *)&v102 < 0.0)
      {
LABEL_170:
        v65 = a2[80];
        if (!a2[80] || v65 == 11)
          goto LABEL_175;
        if (a2[82])
        {
          v63.n128_u32[0] = *v62;
          if (*(float *)v62 != 0.0)
          {
LABEL_175:
            v66 = 0;
            v67 = 0;
            v68 = 0;
            if (v65 == 11)
              v64 = 4;
            else
              v64 = v65;
            goto LABEL_197;
          }
        }
        else if (*v62)
        {
          goto LABEL_175;
        }
        v65 = v60[80];
        goto LABEL_175;
      }
    }
    else if ((v102 & 0x80000000) != 0)
    {
      goto LABEL_170;
    }
  }
  v67 = v104;
  if (v103 - 2 >= 9)
  {
    if (v103 != 11)
    {
      v66 = 0;
      v68 = 0;
      goto LABEL_197;
    }
    v66 = 0;
  }
  else
  {
    v66 = v105;
  }
  v68 = v102;
LABEL_197:
  v69 = (unsigned __int32 *)(a2 + 84);
  WebCore::blend(a2 + 84, v60 + 84, v61, (uint64_t)&v102, v63);
  v71 = v103;
  if (v103 == 11 || v103 == 13)
    goto LABEL_215;
  if (!v105)
  {
    if ((v102 & 0x80000000) != 0)
      goto LABEL_201;
LABEL_215:
    v74 = v104;
    if (v103 - 2 >= 9)
    {
      if (v103 != 11)
      {
        v73 = 0;
        v75 = 0;
        goto LABEL_218;
      }
      v73 = 0;
    }
    else
    {
      v73 = v105;
    }
    v75 = v102;
    goto LABEL_218;
  }
  v70.n128_u32[0] = v102;
  if (*(float *)&v102 >= 0.0)
    goto LABEL_215;
LABEL_201:
  v72 = a2[88];
  if (!a2[88] || v72 == 11)
    goto LABEL_206;
  if (!a2[90])
  {
    if (*v69)
      goto LABEL_206;
    goto LABEL_205;
  }
  v70.n128_u32[0] = *v69;
  if (*(float *)v69 == 0.0)
LABEL_205:
    v72 = v60[88];
LABEL_206:
  v73 = 0;
  v74 = 0;
  v75 = 0;
  if (v72 == 11)
    v71 = 4;
  else
    v71 = v72;
LABEL_218:
  if (*(_BYTE *)(v8 + 80) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v96);
  }
  *(_BYTE *)(v8 + 80) = v64;
  *(_BYTE *)(v8 + 81) = v67;
  if (v64 - 2 < 9)
  {
    *(_BYTE *)(v8 + 82) = v66;
LABEL_221:
    *v96 = v68;
    goto LABEL_222;
  }
  if (v64 <= 0xD)
  {
    if (((1 << v64) & 0x3003) != 0)
    {
      v68 = 0;
      goto LABEL_221;
    }
    if (v64 == 11)
      goto LABEL_221;
  }
LABEL_222:
  if (*(_BYTE *)(v8 + 88) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v97);
  }
  *(_BYTE *)(v8 + 88) = v71;
  *(_BYTE *)(v8 + 89) = v74;
  if (v71 - 2 >= 9)
  {
    v77 = v100;
    v76 = v101;
    if (v71 > 0xD)
      goto LABEL_226;
    if (((1 << v71) & 0x3003) != 0)
    {
      v75 = 0;
    }
    else if (v71 != 11)
    {
      goto LABEL_226;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 90) = v73;
    v77 = v100;
    v76 = v101;
  }
  *v97 = v75;
LABEL_226:
  v78 = (unsigned __int32 *)(a2 + 92);
  WebCore::blend(a2 + 92, v76 + 92, v77, (uint64_t)&v102, v70);
  v80 = v103;
  if (v103 != 11 && v103 != 13)
  {
    if (v105)
    {
      v79.n128_u32[0] = v102;
      if (*(float *)&v102 < 0.0)
      {
LABEL_230:
        v81 = a2[96];
        if (!a2[96] || v81 == 11)
          goto LABEL_235;
        if (a2[98])
        {
          v79.n128_u32[0] = *v78;
          if (*(float *)v78 != 0.0)
          {
LABEL_235:
            v82 = 0;
            v83 = 0;
            v84 = 0;
            if (v81 == 11)
              v80 = 4;
            else
              v80 = v81;
            goto LABEL_257;
          }
        }
        else if (*v78)
        {
          goto LABEL_235;
        }
        v81 = v76[96];
        goto LABEL_235;
      }
    }
    else if ((v102 & 0x80000000) != 0)
    {
      goto LABEL_230;
    }
  }
  v83 = v104;
  if (v103 - 2 >= 9)
  {
    if (v103 != 11)
    {
      v82 = 0;
      v84 = 0;
      goto LABEL_257;
    }
    v82 = 0;
  }
  else
  {
    v82 = v105;
  }
  v84 = v102;
LABEL_257:
  v85 = (float *)(a2 + 100);
  WebCore::blend(a2 + 100, v76 + 100, v77, (uint64_t)&v102, v79);
  v86 = v103;
  if (v103 == 11 || v103 == 13)
    goto LABEL_275;
  if (!v105)
  {
    if ((v102 & 0x80000000) != 0)
      goto LABEL_261;
LABEL_275:
    v89 = v104;
    if (v103 - 2 >= 9)
    {
      if (v103 != 11)
      {
        v88 = 0;
        v90 = 0;
        goto LABEL_278;
      }
      v88 = 0;
    }
    else
    {
      v88 = v105;
    }
    v90 = v102;
    goto LABEL_278;
  }
  if (*(float *)&v102 >= 0.0)
    goto LABEL_275;
LABEL_261:
  v87 = a2[104];
  if (!a2[104] || v87 == 11)
    goto LABEL_266;
  if (!a2[106])
  {
    if (*(_DWORD *)v85)
      goto LABEL_266;
    goto LABEL_265;
  }
  if (*v85 == 0.0)
LABEL_265:
    v87 = v76[104];
LABEL_266:
  v88 = 0;
  v89 = 0;
  v90 = 0;
  if (v87 == 11)
    v86 = 4;
  else
    v86 = v87;
LABEL_278:
  if (*(_BYTE *)(v8 + 96) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v98);
  }
  *(_BYTE *)(v8 + 96) = v80;
  *(_BYTE *)(v8 + 97) = v83;
  if (v80 - 2 < 9)
  {
    *(_BYTE *)(v8 + 98) = v82;
LABEL_281:
    *v98 = v84;
    goto LABEL_282;
  }
  if (v80 <= 0xD)
  {
    if (((1 << v80) & 0x3003) != 0)
    {
      v84 = 0;
      goto LABEL_281;
    }
    if (v80 == 11)
      goto LABEL_281;
  }
LABEL_282:
  if (*(_BYTE *)(v8 + 104) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v99);
  }
  *(_BYTE *)(v8 + 104) = v86;
  *(_BYTE *)(v8 + 105) = v89;
  if (v86 - 2 >= 9)
  {
    if (v86 > 0xD)
      goto LABEL_286;
    if (((1 << v86) & 0x3003) != 0)
    {
      v90 = 0;
    }
    else if (v86 != 11)
    {
      goto LABEL_286;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 106) = v88;
  }
  *v99 = v90;
LABEL_286:
  *v91 = v8;
}

