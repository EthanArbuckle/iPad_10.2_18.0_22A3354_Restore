uint64_t WebCore::ApplicationManifestParser::logManifestPropertyNotAString(uint64_t this, const WTF::String *a2)
{
  uint64_t *v3;
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (uint64_t *)this;
  if (a2)
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    if (v4 < 0)
    {
LABEL_21:
      v9 = 0;
LABEL_22:
      __break(0xC471u);
      return this;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 18);
  v6 = v4 + 18;
  if (v5)
    goto LABEL_21;
  this = (v6 + 14);
  if (__OFADD__(v6, 14))
    goto LABEL_21;
  v7 = !a2 || (*((_BYTE *)a2 + 16) & 4) != 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v7, (int8x16_t *)"The value of \"", 0xEu, (uint64_t)a2, (int8x16_t *)"\" is not a string.", 0x12u, &v9);
  if (!v9)
    goto LABEL_22;
  WebCore::ApplicationManifestParser::logDeveloperWarning(v3, v9);
  this = (uint64_t)v9;
  v9 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
      if (!a2)
        return this;
      goto LABEL_14;
    }
    *(_DWORD *)this -= 2;
  }
  if (!a2)
    return this;
LABEL_14:
  if (*(_DWORD *)a2 == 2)
    return WTF::StringImpl::destroy(a2, v8);
  *(_DWORD *)a2 -= 2;
  return this;
}

uint64_t WebCore::ApplicationManifestParser::logManifestPropertyInvalidURL(uint64_t this, const WTF::String *a2)
{
  uint64_t *v3;
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (uint64_t *)this;
  if (a2)
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    if (v4 < 0)
    {
LABEL_21:
      v9 = 0;
LABEL_22:
      __break(0xC471u);
      return this;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 21);
  v6 = v4 + 21;
  if (v5)
    goto LABEL_21;
  this = (v6 + 14);
  if (__OFADD__(v6, 14))
    goto LABEL_21;
  v7 = !a2 || (*((_BYTE *)a2 + 16) & 4) != 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v7, (int8x16_t *)"The value of \"", 0xEu, (uint64_t)a2, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v9);
  if (!v9)
    goto LABEL_22;
  WebCore::ApplicationManifestParser::logDeveloperWarning(v3, v9);
  this = (uint64_t)v9;
  v9 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
      if (!a2)
        return this;
      goto LABEL_14;
    }
    *(_DWORD *)this -= 2;
  }
  if (!a2)
    return this;
LABEL_14:
  if (*(_DWORD *)a2 == 2)
    return WTF::StringImpl::destroy(a2, v8);
  *(_DWORD *)a2 -= 2;
  return this;
}

WTF::JSONImpl::Value *WebCore::ApplicationManifestParser::parseGenericString(WebCore::ApplicationManifestParser *this, const WTF::JSONImpl::Object *a2, const WTF::String *a3, const WTF::String *a4)
{
  WTF::JSONImpl::Value *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::JSONImpl::Value *v10;

  WTF::JSONImpl::ObjectBase::getValue(a3, a4);
  result = v10;
  if (v10)
  {
    WTF::JSONImpl::Value::asString(v10);
    if (v9)
    {
      WTF::String::trim();
    }
    else
    {
      WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)a2, *(const WTF::String **)a4);
      *(_QWORD *)this = 0;
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = v10;
    if (*(_DWORD *)v10 == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v10;
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

BOOL WTF::deprecatedIsSpaceOrNewline(uint64_t a1, uint64_t a2)
{
  if (a1 > 0xFF)
    return MEMORY[0x19AEA858C](a1, a2) == 9;
  if ((_DWORD)a1 == 11)
    return 1;
  return (a1 < 0x21) & (0x100003600uLL >> a1);
}

void WebCore::Clipboard::~Clipboard(WebCore::Clipboard *this, WTF::StringImpl *a2)
{
  WebCore::Clipboard::ItemWriter *v3;
  WebCore::Clipboard::ItemWriter *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::ClipboardItem **v13;
  uint64_t v14;
  WebCore::ClipboardItem *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;

  v3 = (WebCore::Clipboard::ItemWriter *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*((_QWORD *)v3 + 4))
      WebCore::Clipboard::ItemWriter::reject(v3, a2);
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Clipboard::ItemWriter::~ItemWriter(v3, a2);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v3;
    }
    v4 = (WebCore::Clipboard::ItemWriter *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::Clipboard::ItemWriter::~ItemWriter(v4, a2);
        WTF::fastFree(v22, v23);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  v5 = *((unsigned int *)this + 23);
  v6 = (WTF *)*((_QWORD *)this + 10);
  if ((_DWORD)v5)
  {
    v7 = 32 * v5;
    do
    {
      if (*((_BYTE *)v6 + 24))
      {
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6 + 8, a2);
        v8 = *(WTF::StringImpl **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 32);
      v7 -= 32;
    }
    while (v7);
    v6 = (WTF *)*((_QWORD *)this + 10);
  }
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  if (*((_BYTE *)this + 64))
  {
    v12 = *((unsigned int *)this + 13);
    if ((_DWORD)v12)
    {
      v13 = (WebCore::ClipboardItem **)*((_QWORD *)this + 5);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
          {
            WebCore::ClipboardItem::~ClipboardItem(v15, a2);
            WTF::fastFree(v16, v17);
          }
          else
          {
            --*(_DWORD *)v15;
          }
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v18 = (WTF *)*((_QWORD *)this + 5);
    if (v18)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v18, a2);
    }
    v19 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  WebCore::EventTarget::~EventTarget(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Clipboard::~Clipboard(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::Clipboard::eventTargetInterface(WebCore::Clipboard *this)
{
  return 51;
}

uint64_t WebCore::Clipboard::scriptExecutionContext(WebCore::Clipboard *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return v4 - 96;
  else
    return 0;
}

WTF::StringImpl *WebCore::Clipboard::readText(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WTF::StringImpl *v30;
  unint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  int8x16_t v52;
  WTF::StringImpl *v53[2];
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  unsigned int v57;
  unsigned __int8 v58;
  _QWORD *v59;

  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 72);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              if (*(_BYTE *)(v8 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x1952C7F78);
              }
              v9 = *(_QWORD *)(v8 + 240);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                {
                  v11 = (unsigned int *)(v10 + 8);
                  do
                    v12 = __ldaxr(v11);
                  while (__stlxr(v12 + 1, v11));
                  v13 = *(_QWORD *)(v10 + 24);
                  v14 = 0uLL;
                  if (v13)
                  {
                    v15 = *(int8x16_t **)(v13 + 8);
                    v16 = 0uLL;
                    if (v15)
                    {
                      v17 = v15[2];
                      v18.i64[0] = -256;
                      v18.i64[1] = -256;
                      v16 = vandq_s8(v17, v18);
                      v19.i64[0] = 255;
                      v19.i64[1] = 255;
                      v14 = vandq_s8(v17, v19);
                    }
                  }
                  else
                  {
                    v16 = 0uLL;
                  }
                  v52 = vorrq_s8(v14, v16);
                  v23 = WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)v23 = off_1E327FAB0;
                  *(int8x16_t *)(v23 + 8) = v52;
                  v55 = (WTF::StringImpl *)v23;
                  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v55, (uint64_t *)&v59);
                  if (v55)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 8))(v55);
                  v24 = v59;
                  v25 = WebCore::s_platformStrategies;
                  v26 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
                  if (!v26)
                  {
                    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                    *(_QWORD *)(v25 + 16) = v26;
                  }
                  v27 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v26 + 80))(v26, v24 + 2, v24[1]);
                  if ((WebCore::LocalFrame::requestDOMPasteAccess(v10, 0) & 1) == 0)
                  {
LABEL_36:
                    v36 = *a2;
                    v55 = 0;
                    WebCore::DeferredPromise::reject(v36, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v55, 0);
                    v38 = v55;
                    v55 = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, v37);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
LABEL_62:
                    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *))(*v24 + 8))(v24);
                    do
                    {
LABEL_63:
                      v49 = __ldaxr(v11);
                      v50 = v49 - 1;
                    }
                    while (__stlxr(v50, v11));
                    if (!v50)
                    {
                      atomic_store(1u, v11);
                      v51 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v51 = off_1E31FE290;
                      *((_QWORD *)v51 + 1) = v11;
                      v55 = v51;
                      WTF::ensureOnMainThread();
                      result = v55;
                      v55 = 0;
                      if (result)
                        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
                    }
                    return result;
                  }
                  v28 = WebCore::s_platformStrategies;
                  v29 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
                  if (v29
                    || (v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies),
                        (*(_QWORD *)(v28 + 16) = v29) != 0))
                  {
                    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v29 + 208))(&v55, v29, v24 + 2, v24[3], v24[1]);
                    if (v58)
                    {
                      v31 = 0;
                      v54 = 0;
                      v32 = 1;
                      while (1)
                      {
                        if (v31 >= v57)
                        {
                          v39 = 0;
                          goto LABEL_40;
                        }
                        v33 = (char *)v55 + 120 * v31;
                        if (*((_DWORD *)v33 + 27))
                          break;
LABEL_34:
                        ++v31;
                        if (!v32)
                        {
                          __break(1u);
                          goto LABEL_36;
                        }
                      }
                      v34 = 0;
                      v35 = v33 + 96;
                      while ((WTF::equal(*(WTF **)(*(_QWORD *)v35 + 8 * v34), (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v30) & 1) == 0)
                      {
                        if (++v34 >= (unint64_t)*((unsigned int *)v35 + 3))
                        {
                          v32 = v58;
                          goto LABEL_34;
                        }
                      }
                      v53[0] = 0;
                      (*(void (**)(_QWORD *, WTF::StringImpl **, _QWORD, unint64_t, uint64_t))(*v24 + 104))(v24, v53, 0, v31, 1);
                      v39 = v53[0];
                      v54 = v53[0];
LABEL_40:
                      v40 = WebCore::s_platformStrategies;
                      v41 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
                      if (!v41)
                      {
                        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                        *(_QWORD *)(v40 + 16) = v41;
                      }
                      v42 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v41 + 80))(v41, v24 + 2, v24[1]);
                      v43 = *a2;
                      if (v27 == v42)
                      {
                        result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(v43, (uint64_t *)&v54);
                        v39 = v54;
                      }
                      else
                      {
                        v53[0] = 0;
                        WebCore::DeferredPromise::reject(v43, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)v53, 0);
                        result = v53[0];
                        v53[0] = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v44);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                      v54 = 0;
                      if (!v39)
                      {
LABEL_55:
                        if (v58)
                        {
                          if (v57)
                          {
                            v46 = v55;
                            v47 = 120 * v57;
                            do
                            {
                              WebCore::PasteboardItemInfo::~PasteboardItemInfo(v46, v44);
                              v46 = (WTF::StringImpl *)(v48 + 120);
                              v47 -= 120;
                            }
                            while (v47);
                          }
                          result = v55;
                          if (v55)
                          {
                            v55 = 0;
                            v56 = 0;
                            result = (WTF::StringImpl *)WTF::fastFree(result, v44);
                          }
                        }
                        v24 = v59;
                        if (!v59)
                          goto LABEL_63;
                        goto LABEL_62;
                      }
                      if (*(_DWORD *)v39 != 2)
                      {
                        *(_DWORD *)v39 -= 2;
                        goto LABEL_55;
                      }
                      result = v39;
LABEL_69:
                      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v44);
                      goto LABEL_55;
                    }
                  }
                  else
                  {
                    LOBYTE(v55) = 0;
                    v58 = 0;
                  }
                  v45 = *a2;
                  v53[0] = 0;
                  WebCore::DeferredPromise::reject(v45, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)v53, 0);
                  result = v53[0];
                  v53[0] = 0;
                  if (!result)
                    goto LABEL_55;
                  if (*(_DWORD *)result != 2)
                  {
                    *(_DWORD *)result -= 2;
                    goto LABEL_55;
                  }
                  goto LABEL_69;
                }
              }
            }
          }
        }
      }
    }
  }
  v20 = *a2;
  v55 = 0;
  WebCore::DeferredPromise::reject(v20, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v55, 0);
  result = v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  objc_class *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (!v2 || !*(_QWORD *)v2 || (*(_BYTE *)(v2 + 8) & 3) != 0)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(result + 32);
  if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
    v6 = 0;
  else
    v6 = *(WebCore::JSDOMGlobalObject **)v5;
  v7 = *((_QWORD *)v6 + 7);
  MEMORY[0x19AEA3294](v16, v7);
  v15 = v7;
  v8 = *((_QWORD *)v6 + 7);
  v9 = *a2;
  if (*a2 && (v10 = *(_DWORD *)(v9 + 4)) != 0)
  {
    if (v10 != 1)
    {
LABEL_10:
      v11 = *(objc_class **)(v8 + 64760);
      if (!v11 || v9 != *((_QWORD *)v11 + 1))
        v11 = (objc_class *)JSC::jsStringWithCacheSlowCase();
      goto LABEL_13;
    }
    v12 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_10;
      v13 = v14;
    }
    v11 = *(objc_class **)(v8 + 8 * v13 + 42216);
  }
  else
  {
    v11 = *(objc_class **)(v8 + 41968);
  }
LABEL_13:
  if (*(_QWORD *)(v7 + 16) || (WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v11), *(_QWORD *)(v7 + 16)))
    WebCore::DeferredPromise::handleUncaughtException(v4, &v15, v6);
  return MEMORY[0x19AEA32A0](v16);
}

WTF::StringImpl *WebCore::Clipboard::writeText(uint64_t a1, _DWORD **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Document *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  char v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  WTF *v43;
  WTF::StringImpl *v44;
  char *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  WTF::StringImpl *v70;
  WebCore::Editor *v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  int8x16_t v75;
  uint64_t v76;
  WTF *v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82[2];
  uint64_t v83;
  char v84;
  WTF::StringImpl *v85[2];
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
    goto LABEL_23;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_23;
  v6 = *(_QWORD *)(v5 + 64);
  if (!v6)
    goto LABEL_23;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_23;
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
    goto LABEL_23;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_23;
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1952C8790);
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (!v10)
  {
LABEL_23:
    v11 = 0;
    goto LABEL_24;
  }
  v11 = *(_QWORD **)(v10 + 8);
  if (!v11)
  {
LABEL_24:
    v15 = 0;
    v25 = 1;
LABEL_25:
    v26 = 1;
    goto LABEL_26;
  }
  v13 = (unsigned int *)(v11 + 1);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = v11[37];
  if (!v15)
  {
    v25 = 0;
    goto LABEL_25;
  }
  *(_DWORD *)(v15 + 24) += 2;
  v16 = v11[17];
  if ((*(_QWORD *)(v16 + 680) & 0x80000000000) == 0)
  {
    v17 = (WebCore::Document *)v11[37];
    v18 = *((_QWORD *)v17 + 382);
    if (!v18)
    {
      v74 = v11;
      v76 = v11[17];
      v71 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v71, v17);
      a1 = *((_QWORD *)v17 + 382);
      *((_QWORD *)v17 + 382) = v71;
      if (a1)
      {
        WebCore::Editor::~Editor((WebCore::Editor *)a1, v72);
        if (*(_DWORD *)a1)
        {
          *(_QWORD *)(a1 + 496) = 0;
          *(_OWORD *)(a1 + 464) = 0u;
          *(_OWORD *)(a1 + 480) = 0u;
          *(_OWORD *)(a1 + 432) = 0u;
          *(_OWORD *)(a1 + 448) = 0u;
          *(_OWORD *)(a1 + 400) = 0u;
          *(_OWORD *)(a1 + 416) = 0u;
          *(_OWORD *)(a1 + 368) = 0u;
          *(_OWORD *)(a1 + 384) = 0u;
          *(_OWORD *)(a1 + 336) = 0u;
          *(_OWORD *)(a1 + 352) = 0u;
          *(_OWORD *)(a1 + 304) = 0u;
          *(_OWORD *)(a1 + 320) = 0u;
          *(_OWORD *)(a1 + 272) = 0u;
          *(_OWORD *)(a1 + 288) = 0u;
          *(_OWORD *)(a1 + 240) = 0u;
          *(_OWORD *)(a1 + 256) = 0u;
          *(_OWORD *)(a1 + 208) = 0u;
          *(_OWORD *)(a1 + 224) = 0u;
          *(_OWORD *)(a1 + 176) = 0u;
          *(_OWORD *)(a1 + 192) = 0u;
          *(_OWORD *)(a1 + 144) = 0u;
          *(_OWORD *)(a1 + 160) = 0u;
          *(_OWORD *)(a1 + 112) = 0u;
          *(_OWORD *)(a1 + 128) = 0u;
          *(_OWORD *)(a1 + 80) = 0u;
          *(_OWORD *)(a1 + 96) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)(a1 + 64) = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          *(_OWORD *)(a1 + 32) = 0u;
          *(_OWORD *)a1 = 0u;
        }
        else
        {
          a1 = WTF::fastFree((WTF *)a1, v73);
        }
      }
      v18 = *((_QWORD *)v17 + 382);
      v11 = v74;
      v16 = v76;
    }
    if (!*(_BYTE *)(v18 + 475))
    {
      v69 = *(_DWORD *)(v16 + 320);
      if (v69)
      {
        if (v69 != 2 || !WTF::isMainThread((WTF *)a1))
          goto LABEL_122;
        {
          v25 = 0;
          v26 = 0;
          WebCore::currentToken(void)::token = 0;
LABEL_26:
          v27 = *(_QWORD *)a3;
          v82[0] = 0;
          WebCore::DeferredPromise::reject(v27, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)v82, 0);
          result = v82[0];
          v82[0] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
              if ((v26 & 1) != 0)
                goto LABEL_32;
              goto LABEL_30;
            }
            *(_DWORD *)result -= 2;
          }
          if ((v26 & 1) != 0)
            goto LABEL_32;
LABEL_30:
          if (*(_DWORD *)(v15 + 24) != 2)
          {
            *(_DWORD *)(v15 + 24) -= 2;
            goto LABEL_32;
          }
          goto LABEL_129;
        }
        if (!WebCore::currentToken(void)::token
          || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
          || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
        {
LABEL_122:
          v25 = 0;
          v26 = 0;
          goto LABEL_26;
        }
      }
    }
  }
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  v19 = *a2;
  if (*a2)
    *v19 += 2;
  v20 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)v82, (const WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, a3);
  v22 = v20;
  v23 = *(unsigned int *)(v20 + 24);
  if ((_DWORD)v23 == -1)
    goto LABEL_35;
  v21 = (WTF::StringImpl *)(v20 + 16);
  if ((_DWORD)v23)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v23])(v85, v21);
LABEL_35:
    *(_QWORD *)(v22 + 16) = v19;
    *(_DWORD *)(v22 + 24) = 0;
    goto LABEL_36;
  }
  v24 = *(WTF::StringImpl **)v21;
  *(_QWORD *)v21 = v19;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_36:
  WebCore::Document::originIdentifierForPasteboard((WebCore::Document *)v15, v21, v85);
  v31 = v85[0];
  if (v85[0])
    *(_DWORD *)v85[0] += 2;
  v32 = v82[0];
  v82[0] = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::destroy(v32, v30);
      if (!v31)
        goto LABEL_44;
      goto LABEL_42;
    }
    *(_DWORD *)v32 -= 2;
  }
  if (!v31)
    goto LABEL_44;
LABEL_42:
  if (*(_DWORD *)v31 == 2)
    WTF::StringImpl::destroy(v31, v30);
  else
    *(_DWORD *)v31 -= 2;
LABEL_44:
  v33 = v11[3];
  v34 = 0uLL;
  if (v33)
  {
    v35 = *(int8x16_t **)(v33 + 8);
    v36 = 0uLL;
    if (v35)
    {
      v37 = v35[2];
      v38.i64[0] = -256;
      v38.i64[1] = -256;
      v36 = vandq_s8(v37, v38);
      v39.i64[0] = 255;
      v39.i64[1] = 255;
      v34 = vandq_s8(v37, v39);
    }
  }
  else
  {
    v36 = 0uLL;
  }
  v75 = vorrq_s8(v34, v36);
  v40 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v40 = off_1E327FAB0;
  *(int8x16_t *)(v40 + 8) = v75;
  v80 = v40;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v80, &v81);
  v41 = v81;
  v42 = *(_OWORD *)v82;
  v82[0] = 0;
  v82[1] = 0;
  *(_OWORD *)v85 = v42;
  *(_QWORD *)&v42 = v83;
  v83 = 0;
  v86 = v42;
  v43 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  v78 = 1;
  v77 = v43;
  v44 = v85[0];
  if (v85[0])
    *(_DWORD *)v85[0] += 2;
  *(_QWORD *)v43 = v44;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v43 + 8, (uint64_t *)&v85[1]);
  v79 = 1;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v41 + 176))(v41, &v77);
  if (v79)
  {
    v45 = (char *)v77 + 8;
    v46 = 24 * v79;
    do
    {
      WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v28);
      v47 = (WTF::StringImpl *)*((_QWORD *)v45 - 1);
      *((_QWORD *)v45 - 1) = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v28);
        else
          *(_DWORD *)v47 -= 2;
      }
      v45 += 24;
      v46 -= 24;
    }
    while (v46);
  }
  v48 = v77;
  if (v77)
  {
    v77 = 0;
    v78 = 0;
    WTF::fastFree(v48, v28);
  }
  if (HIDWORD(v86))
  {
    v49 = 32 * HIDWORD(v86);
    v50 = (char *)v85[1] + 16;
    do
    {
      v51 = *((unsigned int *)v50 + 2);
      if ((_DWORD)v51 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v51])(&v84, v50);
      *((_DWORD *)v50 + 2) = -1;
      v52 = (WTF::StringImpl *)*((_QWORD *)v50 - 1);
      *((_QWORD *)v50 - 1) = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v28);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = (WTF::StringImpl *)*((_QWORD *)v50 - 2);
      *((_QWORD *)v50 - 2) = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v28);
        else
          *(_DWORD *)v53 -= 2;
      }
      v50 += 32;
      v49 -= 32;
    }
    while (v49);
  }
  v54 = v85[1];
  if (v85[1])
  {
    v85[1] = 0;
    LODWORD(v86) = 0;
    WTF::fastFree(v54, v28);
  }
  v55 = v85[0];
  v85[0] = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v28);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v56 = *(_QWORD *)a3;
  v57 = *(_QWORD *)(v56 + 24);
  if (v57 && *(_QWORD *)v57 && (*(_BYTE *)(v57 + 8) & 3) == 0)
  {
    v58 = *(_QWORD *)(v56 + 32);
    if (!v58 || (*(_BYTE *)(v58 + 8) & 3) != 0)
      v59 = 0;
    else
      v59 = *(uint64_t **)v58;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v56, v59, 0, (objc_class *)0xA);
    MEMORY[0x19AEA32A0](v85);
  }
  if (HIDWORD(v83))
  {
    v60 = 32 * HIDWORD(v83);
    v61 = (char *)v82[1] + 16;
    do
    {
      v62 = *((unsigned int *)v61 + 2);
      if ((_DWORD)v62 != -1)
        ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v62])(v85, v61);
      *((_DWORD *)v61 + 2) = -1;
      v63 = (WTF::StringImpl *)*((_QWORD *)v61 - 1);
      *((_QWORD *)v61 - 1) = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v28);
        else
          *(_DWORD *)v63 -= 2;
      }
      v64 = (WTF::StringImpl *)*((_QWORD *)v61 - 2);
      *((_QWORD *)v61 - 2) = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v28);
        else
          *(_DWORD *)v64 -= 2;
      }
      v61 += 32;
      v60 -= 32;
    }
    while (v60);
  }
  v65 = v82[1];
  if (v82[1])
  {
    v82[1] = 0;
    LODWORD(v83) = 0;
    WTF::fastFree(v65, v28);
  }
  result = v82[0];
  v82[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    v25 = 0;
LABEL_129:
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v15, v28);
LABEL_32:
    if ((v25 & 1) != 0)
      return result;
    goto LABEL_111;
  }
  *(_DWORD *)(v15 + 24) -= 2;
LABEL_111:
  v66 = (unsigned int *)(v11 + 1);
  do
  {
    v67 = __ldaxr(v66);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, v66));
  if (!v68)
  {
    atomic_store(1u, v66);
    v70 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v70 = off_1E31FE290;
    *((_QWORD *)v70 + 1) = v66;
    v82[0] = v70;
    WTF::ensureOnMainThread();
    result = v82[0];
    v82[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::Clipboard::read(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const WebCore::PasteboardItemInfo *v36;
  WebCore::ClipboardItem *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::ClipboardItem **v41;
  uint64_t v42;
  WebCore::ClipboardItem *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  JSC::VM *v55;
  unsigned int v56;
  WebCore::ClipboardItem **v57;
  uint64_t v58;
  objc_class *v59;
  int v60;
  BOOL v61;
  JSValue v62;
  void *v63;
  JSC::VM *v64;
  objc_class *v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v76;
  int v77;
  int8x16_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81[2];
  char v82[8];
  WTF *v83;
  int v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  _OWORD v88[4];
  uint64_t v89;
  JSC::VM *v90;

  v81[0] = (_QWORD *)a1;
  v81[1] = a2;
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v4 = *(_QWORD *)(v3 + 64);
  if (!v4)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    goto LABEL_125;
  }
  v8 = *(_QWORD *)(v7 + 240);
  if (!v8)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, a2);
  v12 = (unsigned int *)(v9 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_QWORD *)(v9 + 24);
  v15 = 0uLL;
  if (v14)
  {
    v16 = *(int8x16_t **)(v14 + 8);
    v17 = 0uLL;
    if (v16)
    {
      v18 = v16[2];
      v19.i64[0] = -256;
      v19.i64[1] = -256;
      v17 = vandq_s8(v18, v19);
      v20.i64[0] = 255;
      v20.i64[1] = 255;
      v15 = vandq_s8(v18, v20);
    }
  }
  else
  {
    v17 = 0uLL;
  }
  v78 = vorrq_s8(v15, v17);
  v22 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v22 = off_1E327FAB0;
  *(int8x16_t *)(v22 + 8) = v78;
  v85 = (WTF *)v22;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v85, (uint64_t *)&v80);
  if (v85)
    (*(void (**)(WTF *))(*(_QWORD *)v85 + 8))(v85);
  v23 = v80;
  v24 = WebCore::s_platformStrategies;
  v25 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v25)
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v24 + 16) = v25;
  }
  v26 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v25 + 80))(v25, v23 + 2, v23[1]);
  result = WebCore::LocalFrame::requestDOMPasteAccess(v9, 0);
  if ((result & 1) == 0)
  {
    WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, v27);
    v80 = 0;
LABEL_95:
    result = (*(uint64_t (**)(_QWORD *))(*v23 + 8))(v23);
    goto LABEL_96;
  }
  if (*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 56) == v26)
    goto LABEL_61;
  v28 = WebCore::s_platformStrategies;
  v29 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v29)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v28 + 16) = v29;
    if (!v29)
    {
      LOBYTE(v85) = 0;
      LOBYTE(v87) = 0;
      goto LABEL_36;
    }
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v29 + 208))(&v85, v29, v23 + 2, v23[3], v23[1]);
  if (!(_BYTE)v87)
  {
LABEL_36:
    result = (uint64_t)WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(v81, v30);
    v38 = 1;
    goto LABEL_53;
  }
  v31 = HIDWORD(v86);
  if (HIDWORD(v86))
  {
    if (HIDWORD(v86) >> 29)
    {
      __break(0xC471u);
LABEL_124:
      __break(1u);
LABEL_125:
      JUMPOUT(0x1952C8DF8);
    }
    result = WTF::fastMalloc((WTF *)(8 * HIDWORD(v86)));
    v32 = result;
    if (HIDWORD(v86))
    {
      v33 = 0;
      v34 = 0;
      do
      {
        v35 = v34;
        v36 = (WTF *)((char *)v85 + v33);
        v37 = (WebCore::ClipboardItem *)WTF::fastMalloc((WTF *)0x28);
        result = (uint64_t)WebCore::ClipboardItem::ClipboardItem(v37, (WebCore::Clipboard *)a1, v36);
        v34 = v35 + 1;
        *(_QWORD *)(v32 + 8 * v35) = result;
        v33 += 120;
      }
      while (v35 + 1 < (unint64_t)HIDWORD(v86));
    }
    else
    {
      LODWORD(v34) = 0;
    }
  }
  else
  {
    LODWORD(v34) = 0;
    v32 = 0;
  }
  v80 = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    v39 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v23;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v40)
    {
      v41 = *(WebCore::ClipboardItem ***)(a1 + 40);
      v42 = 8 * v40;
      do
      {
        v43 = *v41;
        *v41 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
          {
            WebCore::ClipboardItem::~ClipboardItem(v43, v30);
            WTF::fastFree(v44, v45);
          }
          else
          {
            --*(_DWORD *)v43;
          }
        }
        ++v41;
        v42 -= 8;
      }
      while (v42);
    }
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      result = WTF::fastFree((WTF *)result, v30);
    }
    v38 = 0;
    v23 = 0;
    *(_QWORD *)(a1 + 40) = v32;
    *(_DWORD *)(a1 + 48) = v31;
    *(_DWORD *)(a1 + 52) = v34;
    *(_QWORD *)(a1 + 56) = v26;
  }
  else
  {
    v38 = 0;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v32;
    *(_DWORD *)(a1 + 48) = v31;
    *(_DWORD *)(a1 + 52) = v34;
    *(_QWORD *)(a1 + 56) = v26;
    *(_BYTE *)(a1 + 64) = 1;
    v23 = 0;
  }
LABEL_53:
  if ((_BYTE)v87)
  {
    if (HIDWORD(v86))
    {
      v46 = v85;
      v47 = 120 * HIDWORD(v86);
      do
      {
        WebCore::PasteboardItemInfo::~PasteboardItemInfo(v46, (WTF::StringImpl *)v30);
        v46 = (WTF *)(v48 + 120);
        v47 -= 120;
      }
      while (v47);
    }
    result = (uint64_t)v85;
    if (v85)
    {
      v85 = 0;
      LODWORD(v86) = 0;
      result = WTF::fastFree((WTF *)result, v30);
    }
  }
  if ((v38 & 1) != 0)
    goto LABEL_94;
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_124;
LABEL_61:
  v49 = *a2;
  v50 = *(_QWORD *)(v49 + 24);
  if (v50 && *(_QWORD *)v50 && (*(_BYTE *)(v50 + 8) & 3) == 0)
  {
    v51 = *(_QWORD *)(v49 + 32);
    if (!v51 || (*(_BYTE *)(v51 + 8) & 3) != 0)
      v52 = 0;
    else
      v52 = *(uint64_t **)v51;
    v53 = v52[7];
    MEMORY[0x19AEA3294](v82, v53);
    v54 = **(_QWORD **)(v49 + 32);
    v55 = (JSC::VM *)v52[7];
    v90 = v55;
    LOBYTE(v85) = 0;
    v86 = 0x800000000;
    v87 = (WTF *)((char *)v88 + 8);
    memset(v88, 0, sizeof(v88));
    v89 = 0;
    v56 = *(_DWORD *)(a1 + 52);
    if (v56 >= 9)
    {
      LOBYTE(v85) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v86) == 1;
      v56 = *(_DWORD *)(a1 + 52);
    }
    v79 = v53;
    if (v56)
    {
      v57 = *(WebCore::ClipboardItem ***)(a1 + 40);
      v58 = 8 * v56;
      while (1)
      {
        v59 = (objc_class *)WebCore::wrap<WebCore::ClipboardItem>((uint64_t)v52, v54, *v57);
        if (*((_DWORD *)v55 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) != 0)
            break;
        }
        v60 = v86;
        if ((_DWORD)v86 != HIDWORD(v86) && (v87 != (WTF *)((char *)v88 + 8) ? (v61 = v87 == 0) : (v61 = 1), v61))
        {
          *((_QWORD *)v87 + v86) = v59;
          LODWORD(v86) = v60 + 1;
        }
        else
        {
          v62.super.isa = v59;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v86, v62) == 1)
            LOBYTE(v85) = 1;
        }
        ++v57;
        v58 -= 8;
        if (!v58)
          goto LABEL_85;
      }
    }
    else
    {
LABEL_85:
      if ((_BYTE)v85)
      {
        JSC::throwOutOfMemoryError();
      }
      else
      {
        v83 = v87;
        v84 = v86;
        v64 = *(JSC::VM **)(v54 + 56);
        if (!*((_DWORD *)v64 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v64) & 1) == 0)
        {
          v65 = (objc_class *)JSC::constructArray();
          goto LABEL_88;
        }
      }
    }
    v65 = 0;
LABEL_88:
    v66 = *(uint64_t **)&v88[0];
    if (*(_QWORD *)&v88[0])
    {
      v83 = (WTF *)&v86;
      v72 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v88[0], (uint64_t *)&v83);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v66, v72);
    }
    if (v87 != (WTF *)((char *)v88 + 8) && v87)
      WTF::fastFree(v87, v63);
    v67 = *(_QWORD *)(v79 + 16);
    if (!v67)
    {
      WebCore::DeferredPromise::callFunction(v49, v52, 0, v65);
      v67 = *(_QWORD *)(v79 + 16);
      if (!v67)
        goto LABEL_93;
    }
    v71 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v52);
    if (!(*(unsigned int (**)(_QWORD *))(*v71 + 64))(v71))
    {
LABEL_105:
      WebCore::reportException((JSC::JSGlobalObject *)v52, v67, 0, 0, 0);
      v23 = v80;
LABEL_93:
      result = MEMORY[0x19AEA32A0](v82);
      goto LABEL_94;
    }
    v73 = v71[43];
    if (*(_QWORD *)(v79 + 24) == v67)
    {
LABEL_122:
      *(_BYTE *)(*(_QWORD *)(v73 + 8) + 93442) = 1;
      *(_BYTE *)(v49 + 44) = 1;
      goto LABEL_105;
    }
    if (!v73)
      goto LABEL_105;
    v74 = (unsigned __int8 *)(v73 + 40);
    if (__ldaxr((unsigned __int8 *)(v73 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v74))
    {
      goto LABEL_116;
    }
    MEMORY[0x19AEA534C](v73 + 40);
LABEL_116:
    v76 = *(unsigned __int8 *)(v73 + 41);
    v77 = __ldxr(v74);
    if (v77 == 1)
    {
      if (!__stlxr(0, v74))
      {
LABEL_121:
        if (!v76)
          goto LABEL_105;
        goto LABEL_122;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v73 + 40));
    goto LABEL_121;
  }
LABEL_94:
  v80 = 0;
  if (v23)
    goto LABEL_95;
  do
  {
LABEL_96:
    v68 = __ldaxr(v12);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v12));
  if (!v69)
  {
    atomic_store(1u, v12);
    v70 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v70 = off_1E31FE290;
    *((_QWORD *)v70 + 1) = v12;
    v85 = v70;
    WTF::ensureOnMainThread();
    result = (uint64_t)v85;
    v85 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::Clipboard::read(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(_QWORD **a1, void *a2)
{
  _BYTE *v3;
  uint64_t v4;
  WebCore::ClipboardItem **v5;
  uint64_t v6;
  WebCore::ClipboardItem *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;

  v3 = *a1;
  if (*((_BYTE *)*a1 + 64))
  {
    v4 = *((unsigned int *)v3 + 13);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::ClipboardItem **)*((_QWORD *)v3 + 5);
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::ClipboardItem::~ClipboardItem(v7, a2);
            WTF::fastFree(v8, v9);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    v10 = (WTF *)*((_QWORD *)v3 + 5);
    if (v10)
    {
      *((_QWORD *)v3 + 5) = 0;
      *((_DWORD *)v3 + 12) = 0;
      WTF::fastFree(v10, a2);
    }
    v11 = *((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v3[64] = 0;
  }
  v12 = *a1[1];
  v15 = 0;
  WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v15, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Clipboard::getType(uint64_t a1, char *a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  const WTF::StringImpl **v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::ClipboardItem **v21;
  uint64_t v22;
  WebCore::ClipboardItem *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;
  WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  char v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int updated;
  uint64_t v40;
  WTF::StringImpl *v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  const WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::ClipboardItem *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;

  if (*(_BYTE *)(a1 + 64))
  {
    v10 = a1;
    v11 = *(_QWORD *)(a1 + 72);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 64);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 72);
            if (v15)
            {
              v16 = *(_QWORD *)(v15 + 8);
              if (v16)
              {
                if (*(_BYTE *)(v16 + 178))
                {
                  a2 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Con"
                       "tents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/in"
                       "clude/wtf/TypeCasts.h";
                  a1 = 105;
                  __break(0xC471u);
                  goto LABEL_163;
                }
                v17 = *(_QWORD *)(v16 + 240);
                if (v17)
                {
                  v7 = *(_QWORD **)(v17 + 8);
                  if (v7)
                  {
                    v4 = a3;
                    v6 = (unsigned int *)(v7 + 1);
                    do
                      v18 = __ldaxr(v6);
                    while (__stlxr(v18 + 1, v6));
                    if (!*(_BYTE *)(a1 + 64))
                      goto LABEL_163;
                    v19 = *(unsigned int *)(a1 + 52);
                    if ((_DWORD)v19)
                    {
                      v5 = 0;
                      while (*(char **)(*(_QWORD *)(a1 + 40) + 8 * v5) != a2)
                      {
                        if (v19 == ++v5)
                          goto LABEL_147;
                      }
                      (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)a2 + 3) + 16))(&v84);
                      if (HIDWORD(v85))
                      {
                        v8 = 0;
                        while (1)
                        {
                          v33 = WTF::equal(*((WTF **)v84 + (_QWORD)v8), *v4, v32);
                          if ((v33 & 1) != 0)
                            break;
                          v8 = (WTF::StringImpl *)((char *)v8 + 1);
                          v34 = HIDWORD(v85);
                          if ((unint64_t)v8 >= HIDWORD(v85))
                            goto LABEL_44;
                        }
                        v34 = HIDWORD(v85);
LABEL_44:
                        if (v34)
                        {
                          v8 = v84;
                          v81 = 8 * v34;
                          do
                          {
                            v82 = *(WTF::StringImpl **)v8;
                            *(_QWORD *)v8 = 0;
                            if (v82)
                            {
                              if (*(_DWORD *)v82 == 2)
                              {
                                v83 = v81;
                                WTF::StringImpl::destroy(v82, v31);
                                v81 = v83;
                              }
                              else
                              {
                                *(_DWORD *)v82 -= 2;
                              }
                            }
                            v8 = (WTF::StringImpl *)((char *)v8 + 8);
                            v81 -= 8;
                          }
                          while (v81);
                        }
                      }
                      else
                      {
                        v33 = 0;
                      }
                      v35 = v84;
                      if (v84)
                      {
                        v84 = 0;
                        LODWORD(v85) = 0;
                        WTF::fastFree(v35, v31);
                        if ((v33 & 1) != 0)
                          goto LABEL_47;
                      }
                      else if ((v33 & 1) != 0)
                      {
LABEL_47:
                        a1 = MEMORY[0x19AEA53F4](*v4, "image/png", 9);
                        if ((_DWORD)a1)
                        {
                          v36 = (WTF::StringImpl *)v7[37];
                          v84 = (WTF::StringImpl *)off_1E3352A20;
                          if (v36)
                            *((_DWORD *)v36 + 6) += 2;
                          v85 = v36;
                          v37 = *v4;
                          if (*v4)
                            *(_DWORD *)v37 += 2;
                          v86 = v37;
                          v87 = 0;
                          if (!*(_BYTE *)(v10 + 64))
                            goto LABEL_163;
                          (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t, uint64_t))(**(_QWORD **)(v10 + 32)
                                                                                               + 120))(*(_QWORD *)(v10 + 32), &v84, v5, 1);
                          v38 = v87;
                          v87 = 0;
                          updated = WebCore::Clipboard::updateSessionValidity((WebCore::Clipboard *)v10);
                          v40 = *a4;
                          if (updated && v38)
                          {
                            WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::Blob>>(v40, (uint64_t)v38);
                          }
                          else
                          {
                            v89 = 0;
                            WebCore::DeferredPromise::reject(v40, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v89, 0);
                            v69 = v89;
                            v89 = 0;
                            if (v69)
                            {
                              if (*(_DWORD *)v69 == 2)
                                WTF::StringImpl::destroy(v69, v41);
                              else
                                *(_DWORD *)v69 -= 2;
                            }
                            if (!v38)
                              goto LABEL_107;
                          }
                          if (*((_DWORD *)v38 + 4) == 1)
                            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 8))(v38);
                          else
                            --*((_DWORD *)v38 + 4);
LABEL_107:
                          v70 = v87;
                          v84 = (WTF::StringImpl *)off_1E3352A20;
                          v87 = 0;
                          if (v70)
                          {
                            if (*((_DWORD *)v70 + 4) == 1)
                              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v70 + 8))(v70);
                            else
                              --*((_DWORD *)v70 + 4);
                          }
                          v71 = v86;
                          v86 = 0;
                          if (v71)
                          {
                            if (*(_DWORD *)v71 == 2)
                              WTF::StringImpl::destroy(v71, v41);
                            else
                              *(_DWORD *)v71 -= 2;
                          }
                          result = (uint64_t)v85;
                          v85 = 0;
                          if (result)
                          {
                            if (*(_DWORD *)(result + 24) == 2)
                            {
                              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v41);
                            }
                            else
                            {
                              *(_DWORD *)(result + 24) -= 2;
                            }
                          }
                          goto LABEL_150;
                        }
                        v89 = 0;
                        a1 = MEMORY[0x19AEA53F4](*v4, "text/uri-list", 13);
                        v43 = 0;
                        if ((_DWORD)a1)
                        {
                          v88 = 0;
                          if (!*(_BYTE *)(v10 + 64))
                            goto LABEL_163;
                          v8 = *(WTF::StringImpl **)(v10 + 32);
                          v44 = WebCore::s_platformStrategies;
                          v45 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
                          if (v45
                            || (v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies
                                                                         + 24))(WebCore::s_platformStrategies),
                                (*(_QWORD *)(v44 + 16) = v45) != 0))
                          {
                            (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v45 + 192))(&v84, v45, v5, (uint64_t)v8 + 16, &v88, *((_QWORD *)v8 + 1));
                          }
                          else
                          {
                            v84 = 0;
                            WTF::URL::invalidate((WTF::URL *)&v84);
                          }
                          v43 = v84;
                          if (v84)
                          {
                            v47 = *(_DWORD *)v84;
                            *(_DWORD *)v84 += 2;
                            v89 = v43;
                            v84 = 0;
                            if (v47)
                              *(_DWORD *)v43 = v47;
                            else
                              WTF::StringImpl::destroy(v43, v46);
                          }
                          else
                          {
                            v89 = 0;
                          }
                          v48 = v88;
                          v88 = 0;
                          if (v48)
                          {
                            if (*(_DWORD *)v48 == 2)
                              WTF::StringImpl::destroy(v48, v46);
                            else
                              *(_DWORD *)v48 -= 2;
                          }
                        }
                        a1 = WTF::equal(*v4, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v42);
                        if (!(_DWORD)a1)
                          goto LABEL_73;
                        v84 = 0;
                        if (*(_BYTE *)(v10 + 64))
                        {
                          (*(void (**)(_QWORD, WTF::StringImpl **, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v10 + 32) + 104))(*(_QWORD *)(v10 + 32), &v84, 0, v5, 1);
                          v8 = v84;
                          v84 = 0;
                          v89 = v8;
                          if (v43)
                          {
                            if (*(_DWORD *)v43 == 2)
                            {
                              WTF::StringImpl::destroy(v43, v50);
                              a1 = (uint64_t)v84;
                              v84 = 0;
                              if (a1)
                              {
                                if (*(_DWORD *)a1 == 2)
                                  goto LABEL_164;
                                *(_DWORD *)a1 -= 2;
                              }
                            }
                            else
                            {
                              *(_DWORD *)v43 -= 2;
                            }
                          }
                          goto LABEL_72;
                        }
LABEL_163:
                        while (1)
                        {
                          __break(1u);
LABEL_164:
                          WTF::StringImpl::destroy((WTF::StringImpl *)a1, (WTF::StringImpl *)a2);
LABEL_72:
                          v43 = v8;
LABEL_73:
                          a1 = WTF::equal(*v4, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v49);
                          if (!(_DWORD)a1)
                            break;
                          v84 = (WTF::StringImpl *)off_1E327FAD8;
                          v85 = 0;
                          if (!v7[2])
                          {
                            v74 = WTF::fastCompactMalloc((WTF *)0x10);
                            *(_DWORD *)v74 = 1;
                            *(_QWORD *)(v74 + 8) = v7;
                            a1 = v7[2];
                            v7[2] = v74;
                            if (a1)
                            {
                              do
                              {
                                v75 = __ldaxr((unsigned int *)a1);
                                v76 = v75 - 1;
                              }
                              while (__stlxr(v76, (unsigned int *)a1));
                              if (!v76)
                              {
                                atomic_store(1u, (unsigned int *)a1);
                                a1 = WTF::fastFree((WTF *)a1, a2);
                              }
                            }
                          }
                          v51 = (unsigned int *)v7[2];
                          do
                            v52 = __ldaxr(v51);
                          while (__stlxr(v52 + 1, v51));
                          v86 = (WTF::StringImpl *)v51;
                          v87 = 0;
                          v84 = (WTF::StringImpl *)&off_1E3283A28;
                          if (*(_BYTE *)(v10 + 64))
                          {
                            (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 + 32) + 112))(*(_QWORD *)(v10 + 32), &v84, 1, v5, 1);
                            v54 = v87;
                            v87 = 0;
                            v55 = v89;
                            v89 = v54;
                            if (v55)
                            {
                              if (*(_DWORD *)v55 == 2)
                              {
                                WTF::StringImpl::destroy(v55, v53);
                                v73 = v87;
                                v87 = 0;
                                if (v73)
                                {
                                  if (*(_DWORD *)v73 == 2)
                                    WTF::StringImpl::destroy(v73, v53);
                                  else
                                    *(_DWORD *)v73 -= 2;
                                }
                              }
                              else
                              {
                                *(_DWORD *)v55 -= 2;
                                v87 = 0;
                              }
                            }
                            v56 = (unsigned int *)v86;
                            v84 = (WTF::StringImpl *)off_1E327FAD8;
                            v86 = 0;
                            if (v56)
                            {
                              do
                              {
                                v57 = __ldaxr(v56);
                                v58 = v57 - 1;
                              }
                              while (__stlxr(v58, v56));
                              if (!v58)
                              {
                                atomic_store(1u, v56);
                                WTF::fastFree((WTF *)v56, v53);
                              }
                            }
                            v59 = v85;
                            v84 = (WTF::StringImpl *)off_1E327FB48;
                            v85 = 0;
                            if (v59)
                            {
                              if (*(_DWORD *)v59 == 2)
                                WTF::StringImpl::destroy(v59, v53);
                              else
                                *(_DWORD *)v59 -= 2;
                            }
                            v43 = v89;
                            break;
                          }
                        }
                        if (WebCore::Clipboard::updateSessionValidity((WebCore::Clipboard *)v10) && v43)
                        {
                          v60 = v7[3];
                          if (v60)
                          {
                            v61 = *(_QWORD *)(v60 + 8);
                            if (v61)
                            {
                              WebCore::Page::applyLinkDecorationFiltering(v61, &v89, &v84);
                              v63 = v84;
                              v84 = 0;
                              v89 = v63;
                              if (*(_DWORD *)v43 == 2)
                                WTF::StringImpl::destroy(v43, v62);
                              else
                                *(_DWORD *)v43 -= 2;
                            }
                          }
                          v64 = *a4;
                          v65 = v7[37];
                          if (v65)
                            v66 = (WebCore::ClipboardItem *)(v65 + 192);
                          else
                            v66 = 0;
                          WebCore::ClipboardItem::blobFromString(v66, (const WTF::String *)v4, (uint64_t *)&v84);
                          v67 = v84;
                          result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::Blob>>(v64, (uint64_t)v84);
                          if (*((_DWORD *)v67 + 4) == 1)
                            result = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
                          else
                            --*((_DWORD *)v67 + 4);
                          v43 = v89;
                        }
                        else
                        {
                          v72 = *a4;
                          v84 = 0;
                          WebCore::DeferredPromise::reject(v72, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v84, 0);
                          result = (uint64_t)v84;
                          v84 = 0;
                          if (result)
                          {
                            if (*(_DWORD *)result == 2)
                              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v68);
                            else
                              *(_DWORD *)result -= 2;
                          }
                        }
                        v89 = 0;
                        if (!v43)
                          goto LABEL_150;
                        if (*(_DWORD *)v43 != 2)
                        {
                          *(_DWORD *)v43 -= 2;
                          do
                          {
LABEL_150:
                            v78 = __ldaxr(v6);
                            v79 = v78 - 1;
                          }
                          while (__stlxr(v79, v6));
                          if (!v79)
                          {
                            atomic_store(1u, v6);
                            v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                            *(_QWORD *)v80 = off_1E31FE290;
                            *((_QWORD *)v80 + 1) = v6;
                            v84 = v80;
                            WTF::ensureOnMainThread();
                            result = (uint64_t)v84;
                            v84 = 0;
                            if (result)
                              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                          }
                          return result;
                        }
                        result = (uint64_t)v43;
LABEL_154:
                        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v68);
                        goto LABEL_150;
                      }
                    }
LABEL_147:
                    v77 = *a4;
                    v84 = 0;
                    WebCore::DeferredPromise::reject(v77, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v84, 0);
                    result = (uint64_t)v84;
                    v84 = 0;
                    if (!result)
                      goto LABEL_150;
                    if (*(_DWORD *)result != 2)
                    {
                      *(_DWORD *)result -= 2;
                      goto LABEL_150;
                    }
                    goto LABEL_154;
                  }
                }
              }
            }
          }
        }
      }
    }
    v20 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v20)
    {
      v21 = *(WebCore::ClipboardItem ***)(a1 + 40);
      v22 = 8 * v20;
      do
      {
        v23 = *v21;
        *v21 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
          {
            WebCore::ClipboardItem::~ClipboardItem(v23, a2);
            WTF::fastFree(v24, v25);
          }
          else
          {
            --*(_DWORD *)v23;
          }
        }
        ++v21;
        v22 -= 8;
      }
      while (v22);
    }
    v26 = *(WTF **)(v10 + 40);
    if (v26)
    {
      *(_QWORD *)(v10 + 40) = 0;
      *(_DWORD *)(v10 + 48) = 0;
      WTF::fastFree(v26, a2);
    }
    v27 = *(_QWORD *)(v10 + 32);
    *(_QWORD *)(v10 + 32) = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    *(_BYTE *)(v10 + 64) = 0;
  }
  v28 = *a4;
  v84 = 0;
  WebCore::DeferredPromise::reject(v28, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v84, 0);
  result = (uint64_t)v84;
  v84 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Clipboard::updateSessionValidity(WebCore::Clipboard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  WebCore::ClipboardItem **v9;
  uint64_t v10;
  WebCore::ClipboardItem *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;

  if (!*((_BYTE *)this + 64))
    return 0;
  v2 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 4);
  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  if (v2 == (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 80))(v5, v3 + 16, *(_QWORD *)(v3 + 8)))return 1;
  if (!*((_BYTE *)this + 64))
    return 0;
  v8 = *((unsigned int *)this + 13);
  if ((_DWORD)v8)
  {
    v9 = (WebCore::ClipboardItem **)*((_QWORD *)this + 5);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::ClipboardItem::~ClipboardItem(v11, v6);
          WTF::fastFree(v12, v13);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 5);
  if (v14)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v14, v6);
  }
  v15 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = 0;
  *((_BYTE *)this + 64) = 0;
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::Blob>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::Blob>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

void WebCore::ClipboardImageReader::~ClipboardImageReader(WebCore::ClipboardImageReader *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E3352A20;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E3352A20;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::Clipboard::write(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::Document *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WebCore::Clipboard::ItemWriter *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  WTF *v92;
  void *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WebCore::Editor *v96;
  void *v97;
  void *v98;
  int8x16_t v99;
  WTF::StringImpl *v100;
  WTF *v101;
  int v102;
  unsigned int v103;
  unsigned __int8 v104;
  char v105;

  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_21;
  v6 = *(_QWORD *)(v5 + 64);
  if (!v6)
    goto LABEL_21;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_21;
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
    goto LABEL_21;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_21;
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    goto LABEL_164;
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v13 = a1;
      v14 = (unsigned int *)(v11 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = *(_QWORD *)(v11 + 136);
      if ((*(_QWORD *)(v16 + 680) & 0x80000000000) == 0)
      {
        v17 = *(WebCore::Document **)(v11 + 296);
        v18 = *((_QWORD *)v17 + 382);
        if (!v18)
        {
          v95 = v11;
          v96 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v96, v17);
          a1 = *((_QWORD *)v17 + 382);
          *((_QWORD *)v17 + 382) = v96;
          if (a1)
          {
            WebCore::Editor::~Editor((WebCore::Editor *)a1, v97);
            if (*(_DWORD *)a1)
            {
              *(_QWORD *)(a1 + 496) = 0;
              *(_OWORD *)(a1 + 464) = 0u;
              *(_OWORD *)(a1 + 480) = 0u;
              *(_OWORD *)(a1 + 432) = 0u;
              *(_OWORD *)(a1 + 448) = 0u;
              *(_OWORD *)(a1 + 400) = 0u;
              *(_OWORD *)(a1 + 416) = 0u;
              *(_OWORD *)(a1 + 368) = 0u;
              *(_OWORD *)(a1 + 384) = 0u;
              *(_OWORD *)(a1 + 336) = 0u;
              *(_OWORD *)(a1 + 352) = 0u;
              *(_OWORD *)(a1 + 304) = 0u;
              *(_OWORD *)(a1 + 320) = 0u;
              *(_OWORD *)(a1 + 272) = 0u;
              *(_OWORD *)(a1 + 288) = 0u;
              *(_OWORD *)(a1 + 240) = 0u;
              *(_OWORD *)(a1 + 256) = 0u;
              *(_OWORD *)(a1 + 208) = 0u;
              *(_OWORD *)(a1 + 224) = 0u;
              *(_OWORD *)(a1 + 176) = 0u;
              *(_OWORD *)(a1 + 192) = 0u;
              *(_OWORD *)(a1 + 144) = 0u;
              *(_OWORD *)(a1 + 160) = 0u;
              *(_OWORD *)(a1 + 112) = 0u;
              *(_OWORD *)(a1 + 128) = 0u;
              *(_OWORD *)(a1 + 80) = 0u;
              *(_OWORD *)(a1 + 96) = 0u;
              *(_OWORD *)(a1 + 48) = 0u;
              *(_OWORD *)(a1 + 64) = 0u;
              *(_OWORD *)(a1 + 16) = 0u;
              *(_OWORD *)(a1 + 32) = 0u;
              *(_OWORD *)a1 = 0u;
            }
            else
            {
              a1 = WTF::fastFree((WTF *)a1, v98);
            }
          }
          v18 = *((_QWORD *)v17 + 382);
          v11 = v95;
        }
        if (!*(_BYTE *)(v18 + 475))
        {
          v55 = *(_DWORD *)(v16 + 320);
          if (v55)
          {
            if (v55 != 2 || !WTF::isMainThread((WTF *)a1))
              goto LABEL_68;
            {
              v31 = 0;
              WebCore::currentToken(void)::token = 0;
              goto LABEL_23;
            }
            if (!WebCore::currentToken(void)::token
              || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
              || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
            {
LABEL_68:
              v31 = 0;
              goto LABEL_23;
            }
          }
        }
      }
      v19 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v19 = 1;
      v20 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v13);
      if (v20)
      {
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 8) = v20;
      v22 = *a3;
      *a3 = 0;
      *(_QWORD *)(v19 + 32) = v22;
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 8) + 64) + 8)
                                  + 72)
                      + 8);
      if (*(_BYTE *)(v23 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1952CA460);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 240) + 8) + 24);
      v25 = 0uLL;
      if (v24)
      {
        v26 = *(int8x16_t **)(v24 + 8);
        v27 = 0uLL;
        if (v26)
        {
          v28 = v26[2];
          v29.i64[0] = -256;
          v29.i64[1] = -256;
          v27 = vandq_s8(v28, v29);
          v30.i64[0] = 255;
          v30.i64[1] = 255;
          v25 = vandq_s8(v28, v30);
        }
      }
      else
      {
        v27 = 0uLL;
      }
      v99 = vorrq_s8(v25, v27);
      v38 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v38 = off_1E327FAB0;
      *(int8x16_t *)(v38 + 8) = v99;
      v100 = (WTF::StringImpl *)v38;
      WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v100, (uint64_t *)(v19 + 48));
      if (v100)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v100 + 8))(v100);
      *(_QWORD *)(v19 + 56) = 0;
      v40 = *(WebCore::Clipboard::ItemWriter **)(v13 + 96);
      *(_QWORD *)(v13 + 96) = v19;
      if (v40)
      {
        if (*((_QWORD *)v40 + 4))
          WebCore::Clipboard::ItemWriter::reject(v40, v39);
        if (*(_DWORD *)v40 == 1)
        {
          WebCore::Clipboard::ItemWriter::~ItemWriter(v40, v39);
          WTF::fastFree(v92, v93);
        }
        else
        {
          --*(_DWORD *)v40;
        }
      }
      v41 = *(_QWORD *)(v13 + 96);
      v42 = *(_QWORD *)(v41 + 48);
      v43 = WebCore::s_platformStrategies;
      v44 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
      if (!v44)
      {
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
        *(_QWORD *)(v43 + 16) = v44;
      }
      *(_QWORD *)(v41 + 56) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v44 + 80))(v44, v42 + 16, *(_QWORD *)(v42 + 8));
      LOBYTE(v100) = 0;
      v104 = 0;
      v46 = *(unsigned int *)(a2 + 12);
      v47 = *(unsigned int *)(v41 + 28);
      if (v47 > v46)
      {
        v48 = *(_QWORD *)(v41 + 16) + 32 * v46;
        v49 = 32 * v47 - 32 * v46;
        do
        {
          if (*(_BYTE *)(v48 + 24))
          {
            WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v48 + 8, v45);
            v50 = *(WTF::StringImpl **)v48;
            *(_QWORD *)v48 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v45);
              else
                *(_DWORD *)v50 -= 2;
            }
          }
          v48 += 32;
          v49 -= 32;
        }
        while (v49);
        *(_DWORD *)(v41 + 28) = v46;
        LODWORD(v47) = v46;
        goto LABEL_88;
      }
      v51 = *(_DWORD *)(v41 + 24);
      if (v51 >= v46)
      {
LABEL_88:
        v68 = *(_QWORD *)(v41 + 16);
        if ((_DWORD)v47)
        {
          v69 = v47 + 1;
          do
          {
            if (*(unsigned __int8 *)(v68 + 24) == v104)
            {
              if (*(_BYTE *)(v68 + 24))
              {
                v70 = v100;
                if (v100)
                  *(_DWORD *)v100 += 2;
                v71 = *(WTF::StringImpl **)v68;
                *(_QWORD *)v68 = v70;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 2)
                    WTF::StringImpl::destroy(v71, v45);
                  else
                    *(_DWORD *)v71 -= 2;
                }
                WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v68 + 8), (unsigned int *)&v101);
              }
            }
            else if (*(_BYTE *)(v68 + 24))
            {
              WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v68 + 8, v45);
              v72 = *(WTF::StringImpl **)v68;
              *(_QWORD *)v68 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, v45);
                else
                  *(_DWORD *)v72 -= 2;
              }
              *(_BYTE *)(v68 + 24) = 0;
            }
            else
            {
              v73 = v100;
              if (v100)
                *(_DWORD *)v100 += 2;
              *(_QWORD *)v68 = v73;
              WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v68 + 8, (uint64_t *)&v101);
              *(_BYTE *)(v68 + 24) = 1;
            }
            v68 += 32;
            --v69;
          }
          while (v69 > 1);
          v68 = *(_QWORD *)(v41 + 16);
          v74 = *(unsigned int *)(v41 + 28);
        }
        else
        {
          v74 = 0;
        }
        if (v74 != v46)
        {
          v75 = (_BYTE *)(v68 + 32 * v74);
          v76 = 32 * v46 - 32 * v74;
          do
          {
            *v75 = 0;
            v75[24] = 0;
            if (v104)
            {
              v77 = v100;
              if (v100)
                *(_DWORD *)v100 += 2;
              *(_QWORD *)v75 = v77;
              WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v75 + 8), (uint64_t *)&v101);
              v75[24] = 1;
            }
            v75 += 32;
            v76 -= 32;
          }
          while (v76);
        }
        *(_DWORD *)(v41 + 28) = v46;
        if (v104)
        {
          v78 = v101;
          if (v103)
          {
            v79 = 32 * v103;
            v80 = (char *)v101 + 16;
            do
            {
              v81 = *((unsigned int *)v80 + 2);
              if ((_DWORD)v81 != -1)
                ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v81])(&v105, v80);
              *((_DWORD *)v80 + 2) = -1;
              v82 = (WTF::StringImpl *)*((_QWORD *)v80 - 1);
              *((_QWORD *)v80 - 1) = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v45);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v83 = (WTF::StringImpl *)*((_QWORD *)v80 - 2);
              *((_QWORD *)v80 - 2) = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, v45);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v80 += 32;
              v79 -= 32;
            }
            while (v79);
            v78 = v101;
          }
          if (v78)
          {
            v101 = 0;
            v102 = 0;
            WTF::fastFree(v78, v45);
          }
          v84 = v100;
          v100 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, v45);
            else
              *(_DWORD *)v84 -= 2;
          }
        }
        v85 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(v41 + 40) = v85;
        if (!v85)
          goto LABEL_147;
        v86 = 0;
        do
        {
          v87 = *(_QWORD *)(v41 + 8);
          if (v87)
            v88 = *(_QWORD *)(v87 + 8);
          else
            v88 = 0;
          v89 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v86);
          ++*(_DWORD *)v41;
          v90 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v90 = &off_1E3352CF0;
          *((_QWORD *)v90 + 1) = v41;
          *((_QWORD *)v90 + 2) = v41;
          *((_QWORD *)v90 + 3) = v86;
          v100 = v90;
          (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(v89 + 24) + 32))(*(_QWORD *)(v89 + 24), v88, &v100);
          result = v100;
          v100 = 0;
          if (result)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          ++v86;
          v91 = *(unsigned int *)(a2 + 12);
        }
        while (v86 < v91);
        if (!(_DWORD)v91)
LABEL_147:
          result = WebCore::Clipboard::ItemWriter::didSetAllData((WebCore::Clipboard::ItemWriter *)v41);
        goto LABEL_27;
      }
      if (v51)
      {
        v52 = *(WTF **)(v41 + 16);
        if ((_DWORD)v47)
        {
          v53 = 32 * v47;
          do
          {
            if (*((_BYTE *)v52 + 24))
            {
              WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52 + 8, v45);
              v54 = *(WTF::StringImpl **)v52;
              *(_QWORD *)v52 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v45);
                else
                  *(_DWORD *)v54 -= 2;
              }
            }
            v52 = (WTF *)((char *)v52 + 32);
            v53 -= 32;
          }
          while (v53);
          *(_DWORD *)(v41 + 28) = 0;
          v52 = *(WTF **)(v41 + 16);
        }
        if (v52)
        {
          *(_QWORD *)(v41 + 16) = 0;
          *(_DWORD *)(v41 + 24) = 0;
          WTF::fastFree(v52, v45);
        }
      }
      if (*(_DWORD *)(v41 + 24) >= v46)
      {
LABEL_87:
        LODWORD(v47) = *(_DWORD *)(v41 + 28);
        goto LABEL_88;
      }
      if (!(v46 >> 27))
      {
        v56 = *(WTF **)(v41 + 16);
        v57 = *(unsigned int *)(v41 + 28);
        v58 = WTF::fastMalloc((WTF *)(32 * v46));
        *(_DWORD *)(v41 + 24) = v46;
        *(_QWORD *)(v41 + 16) = v58;
        if ((_DWORD)v57)
        {
          v59 = v58;
          v60 = 0;
          v61 = 32 * v57;
          do
          {
            v62 = v59 + v60;
            *(_BYTE *)v62 = 0;
            *(_BYTE *)(v62 + 24) = 0;
            v63 = (uint64_t *)((char *)v56 + v60);
            if (*((_BYTE *)v56 + v60 + 24))
            {
              v64 = *v63;
              *v63 = 0;
              *(_QWORD *)(v62 + 8) = 0;
              *(_QWORD *)(v62 + 16) = 0;
              *(_QWORD *)v62 = v64;
              v66 = v63[1];
              v65 = (uint64_t)(v63 + 1);
              *(_QWORD *)v65 = 0;
              *(_QWORD *)(v62 + 8) = v66;
              LODWORD(v64) = *(_DWORD *)(v65 + 8);
              *(_DWORD *)(v65 + 8) = 0;
              *(_DWORD *)(v62 + 16) = v64;
              LODWORD(v64) = *(_DWORD *)(v65 + 12);
              *(_DWORD *)(v65 + 12) = 0;
              *(_DWORD *)(v62 + 20) = v64;
              *(_BYTE *)(v62 + 24) = 1;
              if (*((_BYTE *)v56 + v60 + 24))
              {
                WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v65, v45);
                v67 = *(WTF::StringImpl **)((char *)v56 + v60);
                *(_QWORD *)((char *)v56 + v60) = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, v45);
                  else
                    *(_DWORD *)v67 -= 2;
                }
              }
            }
            v60 += 32;
          }
          while (v61 != v60);
        }
        if (v56)
        {
          if (*(WTF **)(v41 + 16) == v56)
          {
            *(_QWORD *)(v41 + 16) = 0;
            *(_DWORD *)(v41 + 24) = 0;
          }
          WTF::fastFree(v56, v45);
        }
        goto LABEL_87;
      }
      __break(0xC471u);
LABEL_164:
      JUMPOUT(0x1952CA440);
    }
  }
  else
  {
LABEL_21:
    v11 = 0;
  }
  v31 = 1;
LABEL_23:
  v32 = *a3;
  v100 = 0;
  WebCore::DeferredPromise::reject(v32, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v100, 0);
  result = v100;
  v100 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
      if ((v31 & 1) != 0)
        return result;
      goto LABEL_27;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v31 & 1) != 0)
    return result;
LABEL_27:
  v35 = (unsigned int *)(v11 + 8);
  do
  {
    v36 = __ldaxr(v35);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v35));
  if (!v37)
  {
    atomic_store(1u, v35);
    v94 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = off_1E31FE290;
    *((_QWORD *)v94 + 1) = v35;
    v100 = v94;
    WTF::ensureOnMainThread();
    result = v100;
    v100 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::Clipboard::ItemWriter::~ItemWriter(WebCore::Clipboard::ItemWriter *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *((unsigned int *)this + 7);
  v6 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v5)
  {
    v7 = 32 * v5;
    do
    {
      if (*((_BYTE *)v6 + 24))
      {
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6 + 8, a2);
        v8 = *(WTF::StringImpl **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 32);
      v7 -= 32;
    }
    while (v7);
    v6 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v6)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v12)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v12));
      v13 = *(WTF **)(v9 + 16);
      if (v13)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        WTF::fastFree(v13, a2);
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

WebCore::Clipboard::ItemWriter *WebCore::Clipboard::ItemWriter::didSetAllData(WebCore::Clipboard::ItemWriter *this)
{
  WebCore::Clipboard::ItemWriter *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  _DWORD **v14;
  unsigned int v15;
  WTF *v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF *v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  int v50;
  unsigned int v51;
  char v52;
  WTF *v53;
  uint64_t v54;
  char v55;

  if (!*((_QWORD *)this + 4))
    return this;
  v1 = this;
  v2 = *((_QWORD *)this + 6);
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 16) = v4;
  }
  if (*((_QWORD *)v1 + 7) != (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 80))(v4, v2 + 16, *(_QWORD *)(v2 + 8)))return WebCore::Clipboard::ItemWriter::reject(v1, v5);
  v6 = (WTF *)*((_QWORD *)v1 + 2);
  v7 = *((unsigned int *)v1 + 7);
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = 0;
  v53 = 0;
  v54 = 0;
  if ((_DWORD)v7)
  {
    if (v7 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1952CAB4CLL);
    }
    LODWORD(v54) = 24 * (int)v7 / 0x18u;
    v53 = (WTF *)WTF::fastMalloc((WTF *)(24 * v7));
    v47 = v6;
    v9 = (WTF *)((char *)v6 + 32 * v7);
    v10 = v6;
    while (1)
    {
      LOBYTE(v48) = 0;
      v52 = 0;
      v11 = *((unsigned __int8 *)v10 + 24);
      if (*((_BYTE *)v10 + 24))
      {
        v12 = *(WTF::StringImpl **)v10;
        if (*(_QWORD *)v10)
          *(_DWORD *)v12 += 2;
        v48 = v12;
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v49, (uint64_t *)v10 + 1);
        v52 = 1;
        v13 = HIDWORD(v54);
        if (HIDWORD(v54) == (_DWORD)v54)
        {
          v14 = (_DWORD **)WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v53, HIDWORD(v54) + 1, (unint64_t)&v48);
          v15 = HIDWORD(v54);
          v16 = v53;
          v17 = *v14;
          if (*v14)
            *v17 += 2;
          v18 = (_QWORD *)((char *)v16 + 24 * v15);
          *v18 = v17;
          v19 = (uint64_t *)(v14 + 1);
          v20 = (uint64_t)(v18 + 1);
        }
        else
        {
          v21 = v53;
          v22 = v48;
          if (v48)
            *(_DWORD *)v48 += 2;
          v23 = (WTF::StringImpl **)((char *)v21 + 24 * v13);
          *v23 = v22;
          v20 = (uint64_t)(v23 + 1);
          v19 = (uint64_t *)&v49;
        }
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v20, v19);
        ++HIDWORD(v54);
      }
      else
      {
        WebCore::Clipboard::ItemWriter::reject(v1, v8);
      }
      if (!v52)
        goto LABEL_40;
      if (v51)
      {
        v24 = 32 * v51;
        v25 = (char *)v49 + 16;
        do
        {
          v26 = *((unsigned int *)v25 + 2);
          if ((_DWORD)v26 != -1)
            ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v26])(&v55, v25);
          *((_DWORD *)v25 + 2) = -1;
          v27 = (WTF::StringImpl *)*((_QWORD *)v25 - 1);
          *((_QWORD *)v25 - 1) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v8);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = (WTF::StringImpl *)*((_QWORD *)v25 - 2);
          *((_QWORD *)v25 - 2) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v8);
            else
              *(_DWORD *)v28 -= 2;
          }
          v25 += 32;
          v24 -= 32;
        }
        while (v24);
      }
      v29 = v49;
      if (v49)
      {
        v49 = 0;
        v50 = 0;
        WTF::fastFree(v29, v8);
      }
      v30 = v48;
      v48 = 0;
      if (!v30)
        goto LABEL_40;
      if (*(_DWORD *)v30 != 2)
        break;
      WTF::StringImpl::destroy(v30, v8);
      if (!v11)
      {
LABEL_44:
        v6 = v47;
        goto LABEL_63;
      }
LABEL_41:
      v10 = (WTF *)((char *)v10 + 32);
      if (v10 == v9)
      {
        v6 = v47;
        goto LABEL_47;
      }
    }
    *(_DWORD *)v30 -= 2;
LABEL_40:
    if (!v11)
      goto LABEL_44;
    goto LABEL_41;
  }
  v9 = (WTF *)((char *)v6 + 32 * v7);
LABEL_47:
  (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v1 + 6) + 176))(*((_QWORD *)v1 + 6), &v53);
  v31 = *((_QWORD *)v1 + 4);
  v32 = *(_QWORD *)(v31 + 24);
  if (v32 && *(_QWORD *)v32 && (*(_BYTE *)(v32 + 8) & 3) == 0)
  {
    v33 = *(_QWORD *)(v31 + 32);
    if (!v33 || (*(_BYTE *)(v33 + 8) & 3) != 0)
      v34 = 0;
    else
      v34 = *(uint64_t **)v33;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v31, v34, 0, (objc_class *)0xA);
    MEMORY[0x19AEA32A0](&v48);
    v31 = *((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = 0;
    if (!v31)
      goto LABEL_56;
  }
  else
  {
    *((_QWORD *)v1 + 4) = 0;
  }
  if (*(_DWORD *)(v31 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  else
    --*(_DWORD *)(v31 + 16);
LABEL_56:
  v35 = *((_QWORD *)v1 + 1);
  *((_QWORD *)v1 + 1) = 0;
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36 && *(WebCore::Clipboard::ItemWriter **)(v36 + 96) == v1)
    {
      *(_QWORD *)(v36 + 96) = 0;
      if (*(_DWORD *)v1 == 1)
      {
        WebCore::Clipboard::ItemWriter::~ItemWriter(v1, v8);
        WTF::fastFree(v43, v44);
      }
      else
      {
        --*(_DWORD *)v1;
      }
    }
    do
    {
      v37 = __ldaxr((unsigned int *)v35);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)v35));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)v35);
      v45 = *(unsigned int *)(v35 + 28);
      if ((_DWORD)v45)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v35 + 16), (WTF::StringImpl *)(*(_QWORD *)(v35 + 16) + 32 * v45));
      v46 = *(WTF **)(v35 + 16);
      if (v46)
      {
        *(_QWORD *)(v35 + 16) = 0;
        *(_DWORD *)(v35 + 24) = 0;
        WTF::fastFree(v46, v8);
      }
      WTF::fastFree((WTF *)v35, v8);
    }
  }
LABEL_63:
  if (HIDWORD(v54))
  {
    v39 = (char *)v53 + 8;
    v40 = 24 * HIDWORD(v54);
    do
    {
      WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v8);
      v41 = (WTF::StringImpl *)*((_QWORD *)v39 - 1);
      *((_QWORD *)v39 - 1) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v8);
        else
          *(_DWORD *)v41 -= 2;
      }
      v39 += 24;
      v40 -= 24;
    }
    while (v40);
  }
  this = v53;
  if (v53)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    this = (WebCore::Clipboard::ItemWriter *)WTF::fastFree(this, v8);
  }
  if ((_DWORD)v7)
  {
    v42 = v6;
    do
    {
      if (*((_BYTE *)v42 + 24))
      {
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42 + 8, v8);
        this = *(WebCore::Clipboard::ItemWriter **)v42;
        *(_QWORD *)v42 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WebCore::Clipboard::ItemWriter *)WTF::StringImpl::destroy(this, v8);
          else
            *(_DWORD *)this -= 2;
        }
      }
      v42 = (WTF *)((char *)v42 + 32);
    }
    while (v42 != v9);
  }
  if (v6)
    return (WebCore::Clipboard::ItemWriter *)WTF::fastFree(v6, v8);
  return this;
}

WebCore::Clipboard::ItemWriter *WebCore::Clipboard::ItemWriter::reject(WebCore::Clipboard::ItemWriter *this, WTF::StringImpl *a2)
{
  WebCore::Clipboard::ItemWriter *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;

  v2 = this;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    v12 = 0;
    WebCore::DeferredPromise::reject((uint64_t)v3, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v12, 0);
    this = v12;
    v12 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WebCore::Clipboard::ItemWriter *)WTF::StringImpl::destroy(this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    if (v3[4] == 1)
      this = (WebCore::Clipboard::ItemWriter *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 && *(WebCore::Clipboard::ItemWriter **)(v5 + 96) == v2)
    {
      *(_QWORD *)(v5 + 96) = 0;
      if (*(_DWORD *)v2 == 1)
      {
        WebCore::Clipboard::ItemWriter::~ItemWriter(v2, a2);
        this = (WebCore::Clipboard::ItemWriter *)WTF::fastFree(v8, v9);
      }
      else
      {
        --*(_DWORD *)v2;
      }
    }
    do
    {
      v6 = __ldaxr((unsigned int *)v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v4);
      v10 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v10)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v10));
      v11 = *(WTF **)(v4 + 16);
      if (v11)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        WTF::fastFree(v11, a2);
      }
      return (WebCore::Clipboard::ItemWriter *)WTF::fastFree((WTF *)v4, a2);
    }
  }
  return this;
}

uint64_t WebCore::ClipboardImageReader::shouldReadBuffer(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (this[3])
    return 0;
  else
    return WTF::equal(this[2], *a2, a3);
}

uint64_t WebCore::ApplePayPaymentHandler::canAbortSession(WebCore::ApplePayPaymentHandler *this)
{
  return 1;
}

void WebCore::ApplePayPaymentHandler::~ApplePayPaymentHandler(WebCore::ApplePayPaymentHandler *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  if (*((_BYTE *)this + 680))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayPaymentHandler *)((char *)this + 88), a2);
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, (char *)this + 32);
  *((_DWORD *)this + 18) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ApplePayPaymentHandler *)((char *)this + 16), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  char v9;

  if (*((_BYTE *)this + 680))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayPaymentHandler *)((char *)this + 88), a2);
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v9, (char *)this + 32);
  *((_DWORD *)this + 18) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ApplePayPaymentHandler *)((char *)this + 16), a2);
  WTF::fastFree(this, v6);
}

void `non-virtual thunk to'WebCore::ApplePayPaymentHandler::~ApplePayPaymentHandler(WebCore::ApplePayPaymentHandler *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  if (*((_BYTE *)this + 672))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayPaymentHandler *)((char *)this + 80), a2);
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, (char *)this + 24);
  *((_DWORD *)this + 16) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ApplePayPaymentHandler *)((char *)this + 8), a2);
}

{
  WebCore::ApplePayPaymentHandler::~ApplePayPaymentHandler((WebCore::ApplePayPaymentHandler *)((char *)this - 8), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  if (*((_BYTE *)this + 664))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayPaymentHandler *)((char *)this + 72), a2);
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, (char *)this + 16);
  *((_DWORD *)this + 14) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WebCore::ApplePayPaymentHandler::~ApplePayPaymentHandler((WebCore::ApplePayPaymentHandler *)((char *)this - 16), a2);
}

void `virtual thunk to'WebCore::ApplePayPaymentHandler::~ApplePayPaymentHandler(WebCore::ApplePayPaymentHandler *this, WTF::StringImpl *a2)
{
  char *v2;
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (v2[680])
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 84);
    *((_QWORD *)v2 + 84) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayRequestBase *)(v2 + 88), a2);
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)v2 + 10);
  *((_QWORD *)v2 + 10) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)v2 + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, v2 + 32);
  *((_DWORD *)v2 + 18) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v2 + 16), a2);
}

{
  WebCore::ApplePayPaymentHandler::~ApplePayPaymentHandler((WebCore::ApplePayPaymentHandler *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), a2);
}

uint64_t WebCore::ApplePayAMSUIPaymentHandler::canAbortSession(WebCore::ApplePayAMSUIPaymentHandler *this)
{
  return 0;
}

void WebCore::ApplePayAMSUIPaymentHandler::~ApplePayAMSUIPaymentHandler(WebCore::ApplePayAMSUIPaymentHandler *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  if (*((_BYTE *)this + 88))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, (char *)this + 24);
  *((_DWORD *)this + 16) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ApplePayAMSUIPaymentHandler *)((char *)this + 8), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  char v9;

  if (*((_BYTE *)this + 88))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v9, (char *)this + 24);
  *((_DWORD *)this + 16) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ApplePayAMSUIPaymentHandler *)((char *)this + 8), a2);
  WTF::fastFree(this, v6);
}

void `non-virtual thunk to'WebCore::ApplePayAMSUIPaymentHandler::~ApplePayAMSUIPaymentHandler(WebCore::ApplePayAMSUIPaymentHandler *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  if (*((_BYTE *)this + 80))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, (char *)this + 16);
  *((_DWORD *)this + 14) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  char v9;

  if (*((_BYTE *)this + 80))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v9, (char *)this + 16);
  *((_DWORD *)this + 14) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree((WebCore::ApplePayAMSUIPaymentHandler *)((char *)this - 8), v6);
}

void `virtual thunk to'WebCore::ApplePayAMSUIPaymentHandler::~ApplePayAMSUIPaymentHandler(WebCore::ApplePayAMSUIPaymentHandler *this, WTF::StringImpl *a2)
{
  char *v2;
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (v2[88])
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 10);
    *((_QWORD *)v2 + 10) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)v2 + 9);
  *((_QWORD *)v2 + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)v2 + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v8, v2 + 24);
  *((_DWORD *)v2 + 16) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v2 + 8), a2);
}

{
  char *v2;
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  char v9;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (v2[88])
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 10);
    *((_QWORD *)v2 + 10) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WebCore::PaymentRequest *)*((_QWORD *)v2 + 9);
  *((_QWORD *)v2 + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  v5 = *((unsigned int *)v2 + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3352A68[v5])(&v9, v2 + 24);
  *((_DWORD *)v2 + 16) = -1;
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v2 + 8), a2);
  WTF::fastFree((WTF *)v2, v6);
}

uint64_t WebCore::Clipboard::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::Clipboard *WebCore::Clipboard::derefEventTarget(WebCore::Clipboard *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::Clipboard::~Clipboard(this, a2);
    return (WebCore::Clipboard *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ApplePayRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayRequestBase *this)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, this);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::ApplePayRequestBase::~ApplePayRequestBase(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ApplePayRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayRequestBase *this)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, this);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::ApplePayRequestBase::~ApplePayRequestBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ApplePayRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3URLEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3URLEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  __n128 result;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t WebCore::validate(_QWORD *a1, WTF **a2, const WTF::StringImpl **a3)
{
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  result = WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
  if ((result & 1) != 0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    v13 = v7;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v12 = v8;
    v17[0] = "\"";
    v17[1] = 2;
    v16[0] = "\" does not match the expected currency of \"";
    v16[1] = 44;
    v15[0] = "\". Apple Pay requires all PaymentCurrencyAmounts to use the same currency code.";
    v15[1] = 80;
    result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v17, (uint64_t *)&v13, (uint64_t)v16, (uint64_t *)&v12, (uint64_t)v15, &v14);
    v10 = v14;
    if (v14)
    {
      *(_BYTE *)a1 = 33;
      a1[1] = v10;
      *((_BYTE *)a1 + 16) = 1;
      v14 = 0;
      v11 = v12;
      v12 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      result = (uint64_t)v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_5tupleIJN7WebCore22PaymentDetailsModifierENSA_16ApplePayModifierEEEEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2)
{
  WTF::StringImpl *v3;

  if (a2[720])
  {
    WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)(a2 + 72), a2);
    WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)a2, v3);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_5tupleIJN7WebCore22PaymentDetailsModifierENSA_16ApplePayModifierEEEEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ApplePayModifierENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayModifier *this)
{
  WebCore::ApplePayModifier::~ApplePayModifier(this, this);
}

WTF *std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ApplePayLineItem &,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *result;
  uint64_t v21;

  v4 = *a1;
  *(_BYTE *)v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(WTF::StringImpl **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *(WTF::StringImpl **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v10;
  *(_OWORD *)(v4 + 24) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v12 = *(WTF::StringImpl **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_WORD *)(v4 + 72) = *(_WORD *)(a2 + 72);
  v13 = (unsigned int *)a1[1];
  v14 = v13[3];
  if ((_DWORD)v14)
  {
    v15 = 80 * v14;
    v16 = (WTF::StringImpl **)(*(_QWORD *)v13 + 64);
    do
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *(v16 - 6);
      *(v16 - 6) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(v16 - 7);
      *(v16 - 7) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      v16 += 10;
      v15 -= 80;
    }
    while (v15);
  }
  result = *(WTF **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)v13 = 0;
    v13[2] = 0;
    result = (WTF *)WTF::fastFree(result, (void *)a2);
  }
  v21 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)v13 = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  v13[2] = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  v13[3] = v21;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN7WebCore16ApplePayLineItemEN3WTF6VectorISA_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a2 + 80), (WTF::StringImpl *)a2);
  v4 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN7WebCore16ApplePayLineItemEN3WTF6VectorISA_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentOrderDetailsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentOrderDetailsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(result + 32))
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(result + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 32) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30ApplePayPaymentCompleteDetailsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30ApplePayPaymentCompleteDetailsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30ApplePayPaymentCompleteDetailsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

uint64_t WebCore::ApplePayPayment::ApplePayPayment(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v6 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 48) = v9;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  v10 = a1 + 72;
  *(_BYTE *)(a1 + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>(v10, a2 + 9);
    *(_BYTE *)(a1 + 216) = 1;
  }
  v11 = a2[28];
  a2[28] = 0;
  *(_QWORD *)(a1 + 224) = v11;
  v12 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v12;
  v13 = a2[30];
  a2[30] = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = v13;
  *(_BYTE *)(a1 + 392) = 0;
  if (*((_BYTE *)a2 + 392))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>(a1 + 248, a2 + 31);
    *(_BYTE *)(a1 + 392) = 1;
  }
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  if (*((_BYTE *)a2 + 544))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>(a1 + 400, a2 + 50);
    *(_BYTE *)(a1 + 544) = 1;
  }
  v14 = a2[69];
  a2[69] = 0;
  *(_QWORD *)(a1 + 552) = v14;
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20ApplePayAMSUIRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20ApplePayAMSUIRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20ApplePayAMSUIRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ApplicationManifest::ApplicationManifest(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v5;
  v6 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(result + 32) = v6;
  v7 = *(_DWORD *)(result + 40) & 0xFFFFFFFE | a2[5] & 1;
  *(_DWORD *)(result + 40) = v7;
  v8 = v7 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 10) >> 1) & 1));
  *(_DWORD *)(result + 40) = v8;
  v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 10) >> 2) & 1));
  *(_DWORD *)(result + 40) = v9;
  v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 10) >> 3) & 7));
  *(_DWORD *)(result + 40) = v10;
  *(_DWORD *)(result + 40) = a2[5] & 0xFFFFFFC0 | v10 & 0x3F;
  *(_OWORD *)(result + 44) = *(_OWORD *)((char *)a2 + 44);
  *(_QWORD *)(result + 60) = *(uint64_t *)((char *)a2 + 60);
  *(_DWORD *)(result + 68) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 10) &= ~1u;
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  v11 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(result + 80) = v11;
  v12 = *(_DWORD *)(result + 88) & 0xFFFFFFFE | a2[11] & 1;
  *(_DWORD *)(result + 88) = v12;
  v13 = v12 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 22) >> 1) & 1));
  *(_DWORD *)(result + 88) = v13;
  v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 22) >> 2) & 1));
  *(_DWORD *)(result + 88) = v14;
  v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 22) >> 3) & 7));
  *(_DWORD *)(result + 88) = v15;
  *(_DWORD *)(result + 88) = a2[11] & 0xFFFFFFC0 | v15 & 0x3F;
  *(_OWORD *)(result + 92) = *(_OWORD *)((char *)a2 + 92);
  *(_QWORD *)(result + 108) = *(uint64_t *)((char *)a2 + 108);
  *(_DWORD *)(result + 116) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 22) &= ~1u;
  v16 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(result + 120) = v16;
  v17 = *(_DWORD *)(result + 128) & 0xFFFFFFFE | a2[16] & 1;
  *(_DWORD *)(result + 128) = v17;
  v18 = v17 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 32) >> 1) & 1));
  *(_DWORD *)(result + 128) = v18;
  v19 = v18 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 32) >> 2) & 1));
  *(_DWORD *)(result + 128) = v19;
  v20 = v19 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 32) >> 3) & 7));
  *(_DWORD *)(result + 128) = v20;
  *(_DWORD *)(result + 128) = a2[16] & 0xFFFFFFC0 | v20 & 0x3F;
  *(_OWORD *)(result + 132) = *(_OWORD *)((char *)a2 + 132);
  *(_QWORD *)(result + 148) = *(uint64_t *)((char *)a2 + 148);
  *(_DWORD *)(result + 156) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 32) &= ~1u;
  v21 = a2[20];
  a2[20] = 0;
  *(_QWORD *)(result + 160) = v21;
  v22 = *(_DWORD *)(result + 168) & 0xFFFFFFFE | a2[21] & 1;
  *(_DWORD *)(result + 168) = v22;
  v23 = v22 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 42) >> 1) & 1));
  *(_DWORD *)(result + 168) = v23;
  v24 = v23 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 42) >> 2) & 1));
  *(_DWORD *)(result + 168) = v24;
  v25 = v24 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 42) >> 3) & 7));
  *(_DWORD *)(result + 168) = v25;
  *(_DWORD *)(result + 168) = a2[21] & 0xFFFFFFC0 | v25 & 0x3F;
  *(_OWORD *)(result + 172) = *(_OWORD *)((char *)a2 + 172);
  *(_QWORD *)(result + 188) = *(uint64_t *)((char *)a2 + 188);
  *(_DWORD *)(result + 196) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 42) &= ~1u;
  *(_QWORD *)(result + 200) = 0;
  v26 = a2[25];
  if (v26)
  {
    *(_QWORD *)(result + 200) = v26;
    a2[25] = 0;
  }
  *(_QWORD *)(result + 208) = 0;
  v27 = a2[26];
  if (v27)
  {
    *(_QWORD *)(result + 208) = v27;
    a2[26] = 0;
  }
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  v28 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(result + 216) = v28;
  LODWORD(v28) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(result + 224) = v28;
  LODWORD(v28) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(result + 228) = v28;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  v29 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(result + 232) = v29;
  LODWORD(v29) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(result + 240) = v29;
  LODWORD(v29) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(result + 244) = v29;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  v30 = a2[31];
  a2[31] = 0;
  *(_QWORD *)(result + 248) = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = 0;
  *(_DWORD *)(result + 256) = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = 0;
  *(_DWORD *)(result + 260) = v30;
  return result;
}

void WebCore::ApplicationManifest::~ApplicationManifest(WTF::StringImpl **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  v3 = *((unsigned int *)this + 65);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(this[31], (WTF::StringImpl *)((char *)this[31] + 64 * v3));
  v4 = this[31];
  if (v4)
  {
    this[31] = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_DWORD *)this + 61);
  if (v5)
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(this[29], (WTF::StringImpl *)((char *)this[29] + 72 * v5));
  v6 = this[29];
  if (v6)
  {
    this[29] = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 57);
  if ((_DWORD)v7)
  {
    v19 = (WTF::StringImpl **)this[27];
    v20 = 8 * v7;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v8 = this[27];
  if (v8)
  {
    this[27] = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (unint64_t)this[26];
  if ((v9 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  v10 = (unint64_t)this[25];
  if ((v10 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, a2);
    }
  }
  v11 = this[20];
  this[20] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = this[15];
  this[15] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = this[10];
  this[10] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = this[4];
  this[4] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = this[3];
  this[3] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = this[2];
  this[2] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = this[1];
  this[1] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *this;
  *this = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E3352B78;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v11)
      {
        v14 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v11));
        v4 = v14;
      }
      v12 = *(WTF **)(v4 + 16);
      if (v12)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v13 = v4;
        WTF::fastFree(v12, a2);
        v4 = v13;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E3352B78;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v11)
      {
        v14 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v11));
        v4 = v14;
      }
      v12 = *(WTF **)(v4 + 16);
      if (v12)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v13 = v4;
        WTF::fastFree(v12, a2);
        v4 = v13;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134218240;
    v11 = v5;
    v12 = 1024;
    v13 = a2;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::canMakePaymentsWithActiveCard() -> %d", (uint8_t *)&v10, 0x12u);
  }
  if ((a2 & 1) != 0 && (v7 = *(_QWORD *)(a1 + 24)) != 0 && *(_QWORD *)(v7 + 8))
    v8 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 16);
  else
    v8 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 16);
  return v8();
}

void WebCore::LinkIcon::~LinkIcon(WebCore::LinkIcon *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v7 = 16 * v3;
    v8 = (WTF::StringImpl **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          v11 = v8;
          v13 = v7;
          WTF::StringImpl::destroy(v9, a2);
          v8 = v11;
          v7 = v13;
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      v10 = *(v8 - 1);
      *(v8 - 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          v12 = v8;
          v14 = v7;
          WTF::StringImpl::destroy(v10, a2);
          v8 = v12;
          v7 = v14;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorTypeOperations<WTF::URL>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorTypeOperations<WTF::URL>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 5;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::getSetupFeatures(WebCore::ApplePaySetupConfiguration const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3352BA0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::getSetupFeatures(WebCore::ApplePaySetupConfiguration const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3352BA0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::getSetupFeatures(WebCore::ApplePaySetupConfiguration const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    v6 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned int *)(a2 + 12);
      v9 = 134218240;
      v10 = v5;
      v11 = 2048;
      v12 = v7;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::getSetupFeatures() completed (features: %zu)", (uint8_t *)&v9, 0x16u);
    }
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::beginApplePaySetup(WebCore::ApplePaySetupConfiguration const&,WTF::URL const&,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3352BC8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::beginApplePaySetup(WebCore::ApplePaySetupConfiguration const&,WTF::URL const&,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3352BC8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentCoordinator::beginApplePaySetup(WebCore::ApplePaySetupConfiguration const&,WTF::URL const&,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    v6 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134218240;
      v9 = v5;
      v10 = 1024;
      v11 = a2;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::beginApplePaySetup() completed (success: %d)", (uint8_t *)&v8, 0x12u);
    }
    v7 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  _BOOL4 v26;

  v9 = *(_OWORD **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_32;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2;
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (v14)
  {
    v15 = v14 - 1;
    if ((unint64_t)(v14 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1952CCD5CLL);
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = *a4;
  v18 = *(int8x16_t **)a5;
  v17 = *(_QWORD *)(a5 + 8);
  if (v17)
  {
    if ((unint64_t)--v17 >> 31)
    {
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x1952CCD30);
    }
  }
  if (v12)
  {
    v19 = *(_DWORD *)(v12 + 4);
    if (v16)
      goto LABEL_8;
LABEL_25:
    v20 = 0;
    goto LABEL_9;
  }
  v19 = 0;
  if (!v16)
    goto LABEL_25;
LABEL_8:
  v20 = *(_DWORD *)(v16 + 4);
  if (v20 < 0)
  {
LABEL_26:
    *a6 = 0;
    return result;
  }
LABEL_9:
  v21 = __OFADD__(v20, (_DWORD)v17);
  v22 = v20 + v17;
  if (v21)
    goto LABEL_26;
  v21 = __OFADD__(v15, v22);
  v23 = v15 + v22;
  v24 = v21;
  if (v19 < 0)
    goto LABEL_26;
  if (v24)
    goto LABEL_26;
  v21 = __OFADD__(v19, v23);
  v25 = v19 + v23;
  if (v21)
    goto LABEL_26;
  result = v11 + v25;
  if (__OFADD__(v11, v25))
    goto LABEL_26;
  v26 = (!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0) && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0);
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v26, v9, v11, v12, v13, v15, v16, a6, v18, v17);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, int8x16_t *a10, unsigned int a11)
{
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v17 = result;
  v18 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v19 = v33;
        if (v33)
        {
          v20 = (_BYTE *)(v33 + 20);
          *(_DWORD *)v33 = 2;
          *(_DWORD *)(v33 + 4) = v17;
          *(_QWORD *)(v33 + 8) = v33 + 20;
          *(_DWORD *)(v33 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v20 = *(_BYTE *)a3;
            else
              memcpy((void *)(v33 + 20), a3, a4);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v20[a4], a5, a6, a7, a8, a10, a11);
        }
        v18 = a9;
        goto LABEL_20;
      }
LABEL_23:
      v19 = 0;
      goto LABEL_20;
    }
LABEL_22:
    v19 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_20;
  }
  if (!(_DWORD)result)
    goto LABEL_22;
  if (result > 0x7FFFFFEF)
    goto LABEL_23;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v19 = v33;
  if (v33)
  {
    v21 = (char *)(v33 + 20);
    *(_DWORD *)v33 = 2;
    *(_DWORD *)(v33 + 4) = v17;
    *(_QWORD *)(v33 + 8) = v33 + 20;
    *(_DWORD *)(v33 + 16) = 0;
    v22 = (char *)(v33 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v23 = &v21[2 * (a4 & 0xFFFFFFC0)];
      v24 = 0uLL;
      do
      {
        v34.val[0] = (int8x16_t)*a3;
        v25 = *((int8x16_t *)a3 + 1);
        v35.val[0] = (int8x16_t)a3[2];
        v26 = a3[3];
        a3 += 4;
        v27 = v26;
        v35.val[1] = 0uLL;
        v36.val[0] = v25;
        v34.val[1] = 0uLL;
        v28 = v21;
        vst2q_s8(v28, v34);
        v28 += 32;
        v36.val[1] = 0uLL;
        vst2q_s8(v28, v36);
        v29 = v21 + 64;
        vst2q_s8(v29, v35);
        v30 = v21 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v21 += 128;
      }
      while (v21 != v23);
      v21 = v23;
    }
    while (v21 != v22)
    {
      v31 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v21 = v31;
      v21 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v22, a5, a6, a7, a8, a10, a11);
  }
LABEL_20:
  *v18 = v19;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_WORD *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, int8x16_t *a6, int a7)
{
  _WORD *v12;
  int8x16_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  int8x16_t *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int16 v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;

  v12 = __dst;
  if (a2)
  {
    v14 = *(int8x16_t **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v16 = (char *)&__dst[v15];
      if (v15 >= 0x40)
      {
        v17 = (char *)&__dst[v15 & 0xFFFFFFC0];
        v19 = 0uLL;
        v20 = (char *)__dst;
        do
        {
          v64.val[0] = *v14;
          v21 = v14[1];
          v68.val[0] = v14[2];
          v22 = v14[3];
          v14 += 4;
          v23 = v22;
          v68.val[1] = 0uLL;
          v72.val[0] = v21;
          v64.val[1] = 0uLL;
          v24 = v20;
          vst2q_s8(v24, v64);
          v24 += 32;
          v72.val[1] = 0uLL;
          vst2q_s8(v24, v72);
          v25 = v20 + 64;
          vst2q_s8(v25, v68);
          v26 = v20 + 96;
          vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
          v20 += 128;
        }
        while (v20 != v17);
      }
      else
      {
        v17 = (char *)__dst;
      }
      while (v17 != v16)
      {
        v27 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)v17 = v27;
        v17 += 2;
      }
    }
    else if ((_DWORD)v15 == 1)
    {
      *__dst = v14->i16[0];
    }
    else if ((_DWORD)v15)
    {
      __dst = memcpy(__dst, v14, 2 * v15);
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v28 = (char *)&v12[v18];
  v29 = &v28[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v30 = &v28[2 * (a4 & 0xFFFFFFC0)];
    v31 = 0uLL;
    do
    {
      v65.val[0] = *a3;
      v32 = a3[1];
      v69.val[0] = a3[2];
      v33 = a3[3];
      a3 += 4;
      v34 = v33;
      v69.val[1] = 0uLL;
      v73.val[0] = v32;
      v65.val[1] = 0uLL;
      v35 = v28;
      vst2q_s8(v35, v65);
      v35 += 32;
      v73.val[1] = 0uLL;
      vst2q_s8(v35, v73);
      v36 = v28 + 64;
      vst2q_s8(v36, v69);
      v37 = v28 + 96;
      vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
      v28 += 128;
    }
    while (v28 != v30);
    v28 = v30;
  }
  while (v28 != v29)
  {
    v38 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v28 = v38;
    v28 += 2;
  }
  if (a5)
  {
    v39 = *(int8x16_t **)(a5 + 8);
    v40 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v41 = &v29[2 * v40];
      if (v40 >= 0x40)
      {
        v42 = &v29[2 * (v40 & 0xFFFFFFC0)];
        v44 = 0uLL;
        v45 = v29;
        do
        {
          v66.val[0] = *v39;
          v46 = v39[1];
          v70.val[0] = v39[2];
          v47 = v39[3];
          v39 += 4;
          v48 = v47;
          v70.val[1] = 0uLL;
          v74.val[0] = v46;
          v66.val[1] = 0uLL;
          v49 = v45;
          vst2q_s8(v49, v66);
          v49 += 32;
          v74.val[1] = 0uLL;
          vst2q_s8(v49, v74);
          v50 = v45 + 64;
          vst2q_s8(v50, v70);
          v51 = v45 + 96;
          vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
          v45 += 128;
        }
        while (v45 != v42);
      }
      else
      {
        v42 = v29;
      }
      while (v42 != v41)
      {
        v52 = v39->u8[0];
        v39 = (int8x16_t *)((char *)v39 + 1);
        *(_WORD *)v42 = v52;
        v42 += 2;
      }
    }
    else if ((_DWORD)v40 == 1)
    {
      *(_WORD *)v29 = v39->i16[0];
    }
    else if ((_DWORD)v40)
    {
      __dst = memcpy(v29, v39, 2 * v40);
    }
    v43 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v43 = 0;
  }
  v53 = &v29[2 * v43];
  v54 = &v53[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v55 = &v53[2 * (a7 & 0xFFFFFFC0)];
    v56 = 0uLL;
    do
    {
      v67.val[0] = *a6;
      v57 = a6[1];
      v71.val[0] = a6[2];
      v58 = a6[3];
      a6 += 4;
      v59 = v58;
      v71.val[1] = 0uLL;
      v75.val[0] = v57;
      v67.val[1] = 0uLL;
      v60 = v53;
      vst2q_s8(v60, v67);
      v60 += 32;
      v75.val[1] = 0uLL;
      vst2q_s8(v60, v75);
      v61 = v53 + 64;
      vst2q_s8(v61, v71);
      v62 = v53 + 96;
      vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
      v53 += 128;
    }
    while (v53 != v55);
    v53 = v55;
  }
  while (v53 != v54)
  {
    v63 = a6->u8[0];
    a6 = (int8x16_t *)((char *)a6 + 1);
    *(_WORD *)v53 = v63;
    v53 += 2;
  }
  return __dst;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePayPaymentHandler::didAuthorizePayment(WebCore::Payment const&)::$_0,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,JSC::JSGlobalObject &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E3352BF0;
  v3 = *(WTF::StringImpl **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*(_BYTE *)(a1 + 552))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 408), a2);
  if (*(_BYTE *)(a1 + 400))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 256), a2);
  WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPayment::Token *)(a1 + 8), a2);
  return a1;
}

{
  WTF::StringImpl *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E3352BF0;
  v3 = *(WTF::StringImpl **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*(_BYTE *)(a1 + 552))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 408), a2);
  if (*(_BYTE *)(a1 + 400))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 256), a2);
  WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPayment::Token *)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePayPaymentHandler::didAuthorizePayment(WebCore::Payment const&)::$_0,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,JSC::JSGlobalObject &>::call@<X0>(uint64_t a1@<X0>, WebCore *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  char v13[8];

  v5 = a1 + 8;
  JSC::JSLockHolder::JSLockHolder();
  v6 = *((_QWORD *)a2 + 7);
  v7 = WebCore::convertDictionaryToJS(a2, a2, v5);
  v8 = *(_QWORD *)(v6 + 712);
  if (!v8)
  {
    v12 = v7;
    JSC::HandleSet::grow((JSC::HandleSet *)(v6 + 672));
    v7 = v12;
    v8 = *(_QWORD *)(v6 + 712);
  }
  *(_QWORD *)(v6 + 712) = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *a3 = v8 + 16;
  if (v7)
  {
    v9 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
    v10 = v9[3];
    v9 += 3;
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v9;
    *v9 = v8;
    *(_QWORD *)(v10 + 8) = v8;
  }
  *(_QWORD *)(v8 + 16) = v7;
  return MEMORY[0x19AEA32A0](v13);
}

uint64_t std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::~__func(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = &off_1E3352C18;
  v3 = *(WTF::StringImpl **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*(_BYTE *)(a1 + 224))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 80), a2);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100](a1 + 32, a2);
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

void std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::~__func(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = &off_1E3352C18;
  v3 = *(WTF::StringImpl **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*(_BYTE *)(a1 + 224))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 80), a2);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100](a1 + 32, a2);
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xF0uLL);
  *v2 = &off_1E3352C18;
  WebCore::ApplePayPaymentMethod::ApplePayPaymentMethod((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3352C18;
  return WebCore::ApplePayPaymentMethod::ApplePayPaymentMethod((uint64_t)(a2 + 1), a1 + 8);
}

WTF::StringImpl *std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__function::__alloc_func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::destroy[abi:sn180100](a1 + 8, a2);
}

void std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::destroy_deallocate(void *a1, WTF::StringImpl *a2)
{
  std::__function::__alloc_func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::destroy[abi:sn180100]((uint64_t)a1 + 8, a2);
  operator delete(a1);
}

uint64_t std::__function::__func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::operator()@<X0>(uint64_t a1@<X0>, WebCore *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  char v13[8];

  v5 = (uint64_t *)(a1 + 8);
  JSC::JSLockHolder::JSLockHolder();
  v6 = *((_QWORD *)a2 + 7);
  v7 = WebCore::convertDictionaryToJS(a2, a2, v5);
  v8 = *(_QWORD *)(v6 + 712);
  if (!v8)
  {
    v12 = v7;
    JSC::HandleSet::grow((JSC::HandleSet *)(v6 + 672));
    v7 = v12;
    v8 = *(_QWORD *)(v6 + 712);
  }
  *(_QWORD *)(v6 + 712) = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *a3 = v8 + 16;
  if (v7)
  {
    v9 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
    v10 = v9[3];
    v9 += 3;
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v9;
    *v9 = v8;
    *(_QWORD *)(v10 + 8) = v8;
  }
  *(_QWORD *)(v8 + 16) = v7;
  return MEMORY[0x19AEA32A0](v13);
}

uint64_t WebCore::ApplePayPaymentMethod::ApplePayPaymentMethod(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    v6 = *(_DWORD **)(a2 + 24);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(_DWORD **)(a2 + 32);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(_DWORD **)(a2 + 40);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = *(_DWORD **)(a2 + 48);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(a1 + 48) = v9;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  v10 = a1 + 72;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    WebCore::ApplePayPaymentContact::ApplePayPaymentContact(v10, (const WebCore::ApplePayPaymentContact *)(a2 + 72));
    *(_BYTE *)(a1 + 216) = 1;
  }
  v11 = *(_DWORD **)(a2 + 224);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a1 + 224) = v11;
  return a1;
}

WTF::StringImpl *std::__function::__alloc_func<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0,std::allocator<WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::PaymentMethod const&)::$_0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>::destroy[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*(_BYTE *)(a1 + 216))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a1 + 72), a2);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, a2);
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E3352C60;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

void std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E3352C60;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  _DWORD *v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD **)(a1 + 8);
  *result = &off_1E3352C60;
  if (v3)
    *v3 += 2;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::__clone(uint64_t result, _QWORD *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(result + 8);
  *a2 = &off_1E3352C60;
  if (v2)
    *v2 += 2;
  a2[1] = v2;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::destroy_deallocate(_QWORD *__p, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)__p[1];
  __p[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebCore::ApplePayPaymentHandler::didChangeCouponCode(WTF::String &&)::$_0,std::allocator<WTF::String &&>,JSC::Strong<std::allocator<WTF::String &&>::JSObject,(std::allocator<WTF::String &&>::ShouldStrongDestructorGrabLock)0> ()(std::allocator<WTF::String &&>::JSGlobalObject &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  char v13[8];

  v5 = (uint64_t *)(a1 + 8);
  JSC::JSLockHolder::JSLockHolder();
  v6 = *(_QWORD *)(a2 + 56);
  v7 = WebCore::convertDictionaryToJS(a2, a2, v5);
  v8 = *(_QWORD *)(v6 + 712);
  if (!v8)
  {
    v12 = v7;
    JSC::HandleSet::grow((JSC::HandleSet *)(v6 + 672));
    v7 = v12;
    v8 = *(_QWORD *)(v6 + 712);
  }
  *(_QWORD *)(v6 + 712) = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *a3 = v8 + 16;
  if (v7)
  {
    v9 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
    v10 = v9[3];
    v9 += 3;
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v9;
    *v9 = v8;
    *(_QWORD *)(v10 + 8) = v8;
  }
  *(_QWORD *)(v8 + 16) = v7;
  return MEMORY[0x19AEA32A0](v13);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePayAMSUIPaymentHandler::finishSession(std::optional<BOOL> &&)::$_0,JSC::Strong<WebCore::ApplePayAMSUIPaymentHandler::finishSession(std::optional<BOOL> &&)::$_0::JSObject,(WebCore::ApplePayAMSUIPaymentHandler::finishSession(std::optional<BOOL> &&)::$_0::ShouldStrongDestructorGrabLock)0>,WebCore::ApplePayAMSUIPaymentHandler::finishSession(std::optional<BOOL> &&)::$_0::JSGlobalObject &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t SlowCase;
  char v19[8];
  _QWORD v20[2];
  int v21;
  int v22;
  uint64_t v23;

  JSC::JSLockHolder::JSLockHolder();
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(v6 + 15056);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 60);
    v9 = *(_QWORD *)(v7 + 24);
    if (v9 < *(_QWORD *)(v7 + 32))
    {
LABEL_3:
      *(_QWORD *)(v7 + 24) = v9 + v8;
      goto LABEL_4;
    }
    v9 = *(_QWORD *)(v7 + 40);
    if ((v9 & 1) == 0)
    {
      v17 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(v7 + 48);
      *(_QWORD *)(v7 + 32) = v9 + HIDWORD(v17);
      *(_QWORD *)(v7 + 40) = v9 + (int)v17;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow();
  }
  v9 = SlowCase;
LABEL_4:
  *(_DWORD *)v9 = 0;
  *(_DWORD *)v9 = *(_DWORD *)(a2 + 848);
  *(_DWORD *)(v9 + 4) = 16783360;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v10 = (WTF::StringImpl *)v20[0];
  if (*(_BYTE *)(a1 + 8))
    v11 = 7;
  else
    v11 = 6;
  v20[0] = 0;
  v20[1] = v9;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v10, v11, 0, (uint64_t)v20);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v12);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*(_DWORD *)(v6 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6))
  {
    *a3 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 712);
    if (!v13)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v6 + 672));
      v13 = *(_QWORD *)(v6 + 712);
    }
    *(_QWORD *)(v6 + 712) = *(_QWORD *)v13;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = *(unint64_t **)((v13 & 0xFFFFFFFFFFFFF000) + 0x10);
    v15 = v14[3];
    v14 += 3;
    *a3 = v13 + 16;
    *(_QWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v14;
    *v14 = v13;
    *(_QWORD *)(v15 + 8) = v13;
    *(_QWORD *)(v13 + 16) = v9;
  }
  return MEMORY[0x19AEA32A0](v19);
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 7);
      *((_QWORD *)v3 + 7) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = *((unsigned int *)v3 + 13);
      if ((_DWORD)v5)
      {
        v7 = (WTF::StringImpl **)*((_QWORD *)v3 + 5);
        v8 = 8 * v5;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v6 = (WTF *)*((_QWORD *)v3 + 5);
      if (v6)
      {
        *((_QWORD *)v3 + 5) = 0;
        *((_DWORD *)v3 + 12) = 0;
        WTF::fastFree(v6, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 72);
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_DWORD *)v3 + 15);
      if (v4)
        WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(*((WTF::StringImpl **)v3 + 6), (WTF::StringImpl *)(*((_QWORD *)v3 + 6) + 72 * v4));
      v5 = (WTF *)*((_QWORD *)v3 + 6);
      if (v5)
      {
        *((_QWORD *)v3 + 6) = 0;
        *((_DWORD *)v3 + 14) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 64);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  int8x16_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;

  v7 = *(int8x16_t **)result;
  v8 = *(_QWORD *)(result + 8);
  if (v8)
  {
    v9 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
      goto LABEL_29;
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  v11 = *(int8x16_t **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_5;
  }
  v13 = v12 - 1;
  if ((unint64_t)(v12 - 1) >> 31)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1952CDEDCLL);
  }
LABEL_5:
  v14 = *a4;
  if (v10)
  {
    v15 = *(_DWORD *)(v10 + 4);
    if (v14)
      goto LABEL_7;
  }
  else
  {
    v15 = 0;
    if (v14)
    {
LABEL_7:
      v16 = *(_DWORD *)(v14 + 4);
      if (v16 < 0)
        goto LABEL_25;
      goto LABEL_8;
    }
  }
  v16 = 0;
LABEL_8:
  v17 = __OFADD__(v13, v16);
  v18 = v13 + v16;
  v19 = v17;
  if ((v15 & 0x80000000) == 0 && (v19 & 1) == 0)
  {
    v17 = __OFADD__(v15, v18);
    v20 = v15 + v18;
    if (!v17)
    {
      result = v9 + v20;
      if (!__OFADD__(v9, v20))
      {
        if (v10)
        {
          v21 = *(_DWORD *)(v10 + 16);
          v22 = (v21 >> 2) & 1;
          if (!v14 || (v21 & 4) == 0)
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v22, v7, v9, v10, v11, v13, v14, a5);
        }
        else if (!v14)
        {
          v22 = 1;
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v22, v7, v9, v10, v11, v13, v14, a5);
        }
        v22 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v22, v7, v9, v10, v11, v13, v14, a5);
      }
    }
  }
LABEL_25:
  *a5 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v29;
        if (v29)
        {
          *(_DWORD *)v29 = 2;
          *(_DWORD *)(v29 + 4) = v15;
          *(_QWORD *)(v29 + 8) = v29 + 20;
          *(_DWORD *)(v29 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((_BYTE *)(v29 + 20), a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_16;
      }
LABEL_18:
      v17 = 0;
      goto LABEL_16;
    }
LABEL_17:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_18;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v29;
  if (v29)
  {
    v18 = (char *)(v29 + 20);
    *(_DWORD *)v29 = 2;
    *(_DWORD *)(v29 + 4) = v15;
    *(_QWORD *)(v29 + 8) = v29 + 20;
    *(_DWORD *)(v29 + 16) = 0;
    v19 = (char *)(v29 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v20 = &v18[2 * (a4 & 0xFFFFFFC0)];
      v21 = 0uLL;
      do
      {
        v30.val[0] = *a3;
        v22 = a3[1];
        v31.val[0] = a3[2];
        v23 = a3[3];
        a3 += 4;
        v24 = v23;
        v31.val[1] = 0uLL;
        v32.val[0] = v22;
        v30.val[1] = 0uLL;
        v25 = v18;
        vst2q_s8(v25, v30);
        v25 += 32;
        v32.val[1] = 0uLL;
        vst2q_s8(v25, v32);
        v26 = v18 + 64;
        vst2q_s8(v26, v31);
        v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    while (v18 != v19)
    {
      v28 = a3->u8[0];
      a3 = (int8x16_t *)((char *)a3 + 1);
      *(_WORD *)v18 = v28;
      v18 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, a5, a6, a7, a8);
  }
LABEL_16:
  *a9 = v17;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, _BYTE *__src, unsigned int a6, uint64_t a7)
{
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned __int128 v25;
  char v26;
  char v27;

  v12 = __dst;
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v13 = &v12[a3];
  if (a4)
  {
    v14 = *(_BYTE **)(a4 + 8);
    v15 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          *v13 = *v14;
        else
          __dst = memcpy(v13, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v20 = (unsigned __int128 *)v13;
      }
      else
      {
        v20 = (unsigned __int128 *)&v13[v15 & 0xFFFFFFF0];
        v21 = (unsigned __int128 *)v13;
        do
        {
          v22 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v21++ = v22;
        }
        while (v21 != v20);
      }
      while (v20 != (unsigned __int128 *)&v13[v15])
      {
        v27 = *v14;
        v14 += 2;
        *(_BYTE *)v20 = v27;
        v20 = (unsigned __int128 *)((char *)v20 + 1);
      }
    }
    v16 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v13[v16];
  if (!a6)
  {
LABEL_13:
    if (!a7)
      return __dst;
    goto LABEL_14;
  }
  if (a6 != 1)
  {
    __dst = memcpy(&v13[v16], __src, a6);
    goto LABEL_13;
  }
  *v17 = *__src;
  if (!a7)
    return __dst;
LABEL_14:
  __dst = &v17[a6];
  v18 = *(_BYTE **)(a7 + 8);
  v19 = *(unsigned int *)(a7 + 4);
  if ((*(_BYTE *)(a7 + 16) & 4) != 0)
  {
    if ((_DWORD)v19)
    {
      if ((_DWORD)v19 == 1)
        *__dst = *v18;
      else
        return memcpy(__dst, v18, v19);
    }
  }
  else
  {
    v23 = &__dst[v19];
    if (v19 >= 0x10)
    {
      v24 = &__dst[v19 & 0xFFFFFFF0];
      do
      {
        v25 = (unsigned __int128)vld2q_s8(v18);
        v18 += 32;
        *(_OWORD *)__dst = v25;
        __dst += 16;
      }
      while (__dst != v24);
      __dst = v24;
    }
    while (__dst != v23)
    {
      v26 = *v18;
      v18 += 2;
      *__dst++ = v26;
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5)
{
  int8x16_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  char *v24;
  char *result;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  int8x16_t *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  if (a2)
  {
    v10 = *(int8x16_t **)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v12 = &__dst[2 * v11];
      if (v11 >= 0x40)
      {
        v13 = &__dst[2 * (v11 & 0xFFFFFFC0)];
        v15 = 0uLL;
        v16 = __dst;
        do
        {
          v47.val[0] = *v10;
          v17 = v10[1];
          v50.val[0] = v10[2];
          v18 = v10[3];
          v10 += 4;
          v19 = v18;
          v50.val[1] = 0uLL;
          v53.val[0] = v17;
          v47.val[1] = 0uLL;
          v20 = v16;
          vst2q_s8(v20, v47);
          v20 += 32;
          v53.val[1] = 0uLL;
          vst2q_s8(v20, v53);
          v21 = v16 + 64;
          vst2q_s8(v21, v50);
          v22 = v16 + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
          v16 += 128;
        }
        while (v16 != v13);
      }
      else
      {
        v13 = __dst;
      }
      while (v13 != v12)
      {
        v23 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v13 = v23;
        v13 += 2;
      }
    }
    else if ((_DWORD)v11 == 1)
    {
      *(_WORD *)__dst = v10->i16[0];
    }
    else if ((_DWORD)v11)
    {
      memcpy(__dst, v10, 2 * v11);
    }
    v14 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v14 = 0;
  }
  v24 = &__dst[2 * v14];
  result = &v24[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v26 = &v24[2 * (a4 & 0xFFFFFFC0)];
    v27 = 0uLL;
    do
    {
      v48.val[0] = *a3;
      v28 = a3[1];
      v51.val[0] = a3[2];
      v29 = a3[3];
      a3 += 4;
      v30 = v29;
      v51.val[1] = 0uLL;
      v54.val[0] = v28;
      v48.val[1] = 0uLL;
      v31 = v24;
      vst2q_s8(v31, v48);
      v31 += 32;
      v54.val[1] = 0uLL;
      vst2q_s8(v31, v54);
      v32 = v24 + 64;
      vst2q_s8(v32, v51);
      v33 = v24 + 96;
      vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
      v24 += 128;
    }
    while (v24 != v26);
    v24 = v26;
  }
  while (v24 != result)
  {
    v34 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v24 = v34;
    v24 += 2;
  }
  if (a5)
  {
    v35 = *(int8x16_t **)(a5 + 8);
    v36 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v37 = &result[2 * v36];
      if (v36 >= 0x40)
      {
        v38 = &result[2 * (v36 & 0xFFFFFFC0)];
        v39 = 0uLL;
        do
        {
          v49.val[0] = *v35;
          v40 = v35[1];
          v52.val[0] = v35[2];
          v41 = v35[3];
          v35 += 4;
          v42 = v41;
          v52.val[1] = 0uLL;
          v55.val[0] = v40;
          v49.val[1] = 0uLL;
          v43 = result;
          vst2q_s8(v43, v49);
          v43 += 32;
          v55.val[1] = 0uLL;
          vst2q_s8(v43, v55);
          v44 = result + 64;
          vst2q_s8(v44, v52);
          v45 = result + 96;
          vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
          result += 128;
        }
        while (result != v38);
        result = v38;
      }
      while (result != v37)
      {
        v46 = v35->u8[0];
        v35 = (int8x16_t *)((char *)v35 + 1);
        *(_WORD *)result = v46;
        result += 2;
      }
    }
    else if ((_DWORD)v36 == 1)
    {
      *(_WORD *)result = v35->i16[0];
    }
    else if ((_DWORD)v36)
    {
      return (char *)memcpy(result, v35, 2 * v36);
    }
  }
  return result;
}

char *WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 72 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x1952CE624);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 72 * *(unsigned int *)(a1 + 12));
      v18 = 72 * v16;
      v19 = WTF::fastMalloc((WTF *)(72 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ApplicationManifest::Icon>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x1952CE62CLL);
      }
      v10 = 72 * v9;
      v11 = WTF::fastMalloc((WTF *)(72 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ApplicationManifest::Icon>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplicationManifest::Icon>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_DWORD *)(a3 + 8) & 0xFFFFFFFE | *((_DWORD *)v5 + 2) & 1;
      *(_DWORD *)(a3 + 8) = v7;
      v8 = v7 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v5 + 2) >> 1) & 1));
      *(_DWORD *)(a3 + 8) = v8;
      v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v5 + 2) >> 2) & 1));
      *(_DWORD *)(a3 + 8) = v9;
      v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v5 + 2) >> 3) & 7));
      *(_DWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2) & 0xFFFFFFC0 | v10 & 0x3F;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)((char *)v5 + 12);
      *(_QWORD *)(a3 + 28) = *(_QWORD *)((char *)v5 + 28);
      *(_DWORD *)(a3 + 36) = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 2) &= ~1u;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v11 = *((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      *(_QWORD *)(a3 + 40) = v11;
      LODWORD(v11) = *((_DWORD *)v5 + 12);
      *((_DWORD *)v5 + 12) = 0;
      *(_DWORD *)(a3 + 48) = v11;
      LODWORD(v11) = *((_DWORD *)v5 + 13);
      *((_DWORD *)v5 + 13) = 0;
      *(_DWORD *)(a3 + 52) = v11;
      v12 = *((_QWORD *)v5 + 7);
      *((_QWORD *)v5 + 7) = 0;
      *(_QWORD *)(a3 + 56) = v12;
      *(_BYTE *)(a3 + 64) = *((_BYTE *)v5 + 64);
      v13 = (WTF::StringImpl *)*((_QWORD *)v5 + 7);
      *((_QWORD *)v5 + 7) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *((unsigned int *)v5 + 13);
      if ((_DWORD)v14)
      {
        v16 = (WTF::StringImpl **)*((_QWORD *)v5 + 5);
        v17 = 8 * v14;
        do
        {
          v18 = *v16;
          *v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, a2);
            else
              *(_DWORD *)v18 -= 2;
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      v15 = (WTF *)*((_QWORD *)v5 + 5);
      if (v15)
      {
        *((_QWORD *)v5 + 5) = 0;
        *((_DWORD *)v5 + 12) = 0;
        WTF::fastFree(v15, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 72;
      v5 = (WTF::StringImpl *)((char *)v5 + 72);
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 64 * (unint64_t)*(unsigned int *)(a1 + 12)),
        (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x1952CE92CLL);
      }
      v18 = (WTF::StringImpl *)((char *)v5 + 64 * (unint64_t)*(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(v17 << 6));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ApplicationManifest::Shortcut>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x1952CE934);
      }
      v11 = WTF::fastMalloc((WTF *)(v10 << 6));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ApplicationManifest::Shortcut>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 64 * ((uint64_t)(v3 - (_QWORD)v5) >> 6);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplicationManifest::Shortcut>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  WTF *v14;
  WTF::StringImpl *v15;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | *((_DWORD *)v5 + 4) & 1;
      *(_DWORD *)(a3 + 16) = v8;
      v9 = v8 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v5 + 4) >> 1) & 1));
      *(_DWORD *)(a3 + 16) = v9;
      v10 = v9 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v5 + 4) >> 2) & 1));
      *(_DWORD *)(a3 + 16) = v10;
      v11 = v10 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v5 + 4) >> 3) & 7));
      *(_DWORD *)(a3 + 16) = v11;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4) & 0xFFFFFFC0 | v11 & 0x3F;
      *(_OWORD *)(a3 + 20) = *(_OWORD *)((char *)v5 + 20);
      *(_QWORD *)(a3 + 36) = *(_QWORD *)((char *)v5 + 36);
      *(_DWORD *)(a3 + 44) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 4) &= ~1u;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v12 = *((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = 0;
      *(_QWORD *)(a3 + 48) = v12;
      LODWORD(v12) = *((_DWORD *)v5 + 14);
      *((_DWORD *)v5 + 14) = 0;
      *(_DWORD *)(a3 + 56) = v12;
      LODWORD(v12) = *((_DWORD *)v5 + 15);
      *((_DWORD *)v5 + 15) = 0;
      *(_DWORD *)(a3 + 60) = v12;
      v13 = *((_DWORD *)v5 + 15);
      if (v13)
        WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(*((WTF::StringImpl **)v5 + 6), (WTF::StringImpl *)(*((_QWORD *)v5 + 6) + 72 * v13));
      v14 = (WTF *)*((_QWORD *)v5 + 6);
      if (v14)
      {
        *((_QWORD *)v5 + 6) = 0;
        *((_DWORD *)v5 + 14) = 0;
        WTF::fastFree(v14, a2);
      }
      v15 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 64);
      a3 += 64;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = a1;
    *(_BYTE *)(v2 + 32) = 0;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4 & 0xFFFF000000000000 | v2;
    v5 = v4 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v9 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v9)
        {
          v12 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
          v5 = v12;
        }
        v10 = *(WTF **)(v5 + 16);
        if (v10)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v11 = v5;
          WTF::fastFree(v10, v3);
          v5 = v11;
        }
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Clipboard::ItemWriter::write(WTF::Vector<WTF::Ref<WebCore::ClipboardItem,WTF::RawPtrTraits<WebCore::ClipboardItem>,WTF::DefaultRefDerefTraits<WebCore::ClipboardItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,std::optional<WebCore::PasteboardCustomData>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::Clipboard::ItemWriter *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E3352CF0;
  v3 = (WebCore::Clipboard::ItemWriter *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Clipboard::ItemWriter::~ItemWriter(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Clipboard::ItemWriter::write(WTF::Vector<WTF::Ref<WebCore::ClipboardItem,WTF::RawPtrTraits<WebCore::ClipboardItem>,WTF::DefaultRefDerefTraits<WebCore::ClipboardItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,std::optional<WebCore::PasteboardCustomData>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::Clipboard::ItemWriter *v3;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3352CF0;
  v3 = (WebCore::Clipboard::ItemWriter *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Clipboard::ItemWriter::~ItemWriter(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Clipboard::ItemWriter::write(WTF::Vector<WTF::Ref<WebCore::ClipboardItem,WTF::RawPtrTraits<WebCore::ClipboardItem>,WTF::DefaultRefDerefTraits<WebCore::ClipboardItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,std::optional<WebCore::PasteboardCustomData>>::call(WTF::StringImpl *result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  WTF *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  WebCore::Clipboard::ItemWriter *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  char v24;
  char v25;

  LOBYTE(v20) = 0;
  v24 = 0;
  v4 = (WTF *)*(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(WTF::StringImpl **)a2;
    v4 = *(WTF **)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v20 = v5;
    v21 = v4;
    v3 = *(_DWORD *)(a2 + 16);
    v2 = *(_DWORD *)(a2 + 20);
    *(_QWORD *)(a2 + 16) = 0;
    v22 = v3;
    v23 = v2;
    v6 = 1;
    v24 = 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = (WebCore::Clipboard::ItemWriter *)*((_QWORD *)result + 1);
  v7 = *((_QWORD *)result + 2);
  v9 = *((_QWORD *)result + 3);
  if (v9 < *(unsigned int *)(v7 + 28))
  {
    v10 = *(_QWORD *)(v7 + 16) + 32 * v9;
    if (*(unsigned __int8 *)(v10 + 24) == v6)
    {
      if (*(_BYTE *)(v10 + 24))
      {
        if (v20)
          *(_DWORD *)v20 += 2;
        v11 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = v20;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        result = (WTF::StringImpl *)WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v10 + 8), (unsigned int *)&v21);
      }
    }
    else if (*(_BYTE *)(v10 + 24))
    {
      WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 8, (WTF::StringImpl *)a2);
      result = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_BYTE *)(v10 + 24) = 0;
    }
    else
    {
      v12 = v20;
      v20 = 0;
      *(_QWORD *)v10 = v12;
      v21 = 0;
      *(_QWORD *)(v10 + 8) = v4;
      v22 = 0;
      *(_DWORD *)(v10 + 16) = v3;
      v23 = 0;
      *(_DWORD *)(v10 + 20) = v2;
      *(_BYTE *)(v10 + 24) = 1;
    }
  }
  v13 = *((_DWORD *)v8 + 10) - 1;
  *((_DWORD *)v8 + 10) = v13;
  if (!v13)
    result = WebCore::Clipboard::ItemWriter::didSetAllData(v8);
  if (v24)
  {
    v14 = v21;
    if (v23)
    {
      v15 = 32 * v23;
      v16 = (char *)v21 + 16;
      do
      {
        v17 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v17])(&v25, v16);
        *((_DWORD *)v16 + 2) = -1;
        v18 = (WTF::StringImpl *)*((_QWORD *)v16 - 1);
        *((_QWORD *)v16 - 1) = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = (WTF::StringImpl *)*((_QWORD *)v16 - 2);
        *((_QWORD *)v16 - 2) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        v16 += 32;
        v15 -= 32;
      }
      while (v15);
      v14 = v21;
    }
    if (v14)
    {
      v21 = 0;
      v22 = 0;
      WTF::fastFree(v14, (void *)a2);
    }
    result = v20;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = result[3];
      v8 = 24 * v4;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4));
      v5[2] = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
      if (v7)
      {
        v10 = result;
        v11 = (char *)v6 + 24 * v7;
        v12 = (uint64_t)v6 + 8;
        do
        {
          v14 = v12 - 8;
          v13 = *(_QWORD *)(v12 - 8);
          *(_QWORD *)(v12 - 8) = 0;
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = 0;
          *(_QWORD *)v10 = v13;
          v15 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v10 + 1) = v15;
          LODWORD(v15) = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = 0;
          v10[4] = v15;
          LODWORD(v15) = *(_DWORD *)(v12 + 12);
          *(_DWORD *)(v12 + 12) = 0;
          v10[5] = v15;
          WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, v9);
          result = *(unsigned int **)(v12 - 8);
          *(_QWORD *)(v12 - 8) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 += 24;
          v10 += 6;
        }
        while ((char *)(v14 + 24) != v11);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          v5[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

void WebCore::ClipboardItem::~ClipboardItem(WebCore::ClipboardItem *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v10)
      {
        v13 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
        v7 = v13;
      }
      v11 = *(WTF **)(v7 + 16);
      if (v11)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v12 = v7;
        WTF::fastFree(v11, a2);
        v7 = v12;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

WTF *WebCore::ClipboardItem::blobFromString@<X0>(WebCore::ClipboardItem *this@<X0>, const WTF::String *a2@<X2>, uint64_t *a3@<X8>)
{
  WTF *result;
  WTF *v9;
  char *v10;
  WTF *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;

  result = (WTF *)WTF::String::utf8();
  if (v27)
  {
    v9 = (WTF *)*((_QWORD *)v27 + 1);
    v28 = 0;
    LODWORD(v29) = 0;
    HIDWORD(v29) = (_DWORD)v9;
    if (v9)
    {
      if ((unint64_t)v9 >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (char *)v27 + 16;
      v11 = (WTF *)WTF::fastMalloc(v9);
      LODWORD(v29) = (_DWORD)v9;
      v28 = v11;
      do
      {
        v12 = *v10++;
        *(_BYTE *)v11 = v12;
        v11 = (WTF *)((char *)v11 + 1);
        v9 = (WTF *)((char *)v9 - 1);
      }
      while (v9);
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  v13 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_22;
  v14 = *(unsigned int *)(v13 + 4);
  if (!(_DWORD)v14)
    goto LABEL_22;
  v15 = *(unsigned __int16 **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    if (*v15 - 127 >= 0xFFFFFFA1)
    {
      v16 = 0;
      v19 = v15 + 1;
      while (v14 - 1 != v16)
      {
        v20 = v19[v16++] - 127;
        if (v20 < 0xFFFFFFA1)
        {
LABEL_18:
          if (v16 >= v14)
            goto LABEL_22;
          goto LABEL_19;
        }
      }
      goto LABEL_22;
    }
LABEL_19:
    v21 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v21 += 2;
    v26 = v21;
    goto LABEL_23;
  }
  if (*(unsigned __int8 *)v15 - 127 < 0xFFFFFFA1)
    goto LABEL_19;
  v16 = 0;
  v17 = (char *)v15 + 1;
  while (v14 - 1 != v16)
  {
    v18 = v17[v16++] - 127;
    if (v18 < 0xFFFFFFA1)
      goto LABEL_18;
  }
LABEL_22:
  WTF::String::convertToASCIILowercase(a2);
LABEL_23:
  v22 = bmalloc::api::isoAllocate();
  v23 = WebCore::Blob::Blob(v22, this, (uint64_t)&v28, &v26);
  *a3 = v23;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v23 + 24));
  v25 = v26;
  v26 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (v28)
    WTF::fastFree(v28, v24);
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v24);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::ClipboardItem *WebCore::ClipboardItem::ClipboardItem(WebCore::ClipboardItem *this, WebCore::Clipboard *a2, const WebCore::PasteboardItemInfo *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WebCore::ClipboardItem *result;
  WebCore::ClipboardItem *v12;
  uint64_t v13;
  int v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  *(_DWORD *)this = 1;
  v6 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 1) = v6;
  v8 = *((_QWORD *)a2 + 9);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 24), *(_QWORD *)(v8 + 8));
      v8 = *(_QWORD *)(v9 + 24);
      if (v8)
      {
        do
          v10 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v10 + 1, (unsigned int *)v8));
      }
    }
    else
    {
      v8 = 0;
    }
  }
  *((_QWORD *)this + 2) = v8;
  result = (WebCore::ClipboardItem *)WTF::fastMalloc((WTF *)0x20);
  v12 = result;
  *(_QWORD *)result = off_1E3352E10;
  *((_QWORD *)result + 1) = this;
  v13 = *((unsigned int *)a3 + 27);
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = 0;
  *((_DWORD *)result + 7) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v12 + 6) = v13;
    *((_QWORD *)v12 + 2) = v16;
    v17 = *((unsigned int *)a3 + 27);
    if ((_DWORD)v17)
    {
      v18 = (_DWORD **)*((_QWORD *)a3 + 12);
      v19 = 8 * v17;
      do
      {
        v20 = *v18;
        if (*v18)
          *v20 += 2;
        *v16++ = v20;
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
  }
  *((_QWORD *)this + 3) = v12;
  v14 = *((unsigned __int8 *)a3 + 112);
  if (v14 == 2)
    v15 = 2;
  else
    v15 = v14 == 1;
  *((_BYTE *)this + 32) = v15;
  return this;
}

void WebCore::ClipboardItemBindingsDataSource::~ClipboardItemBindingsDataSource(WebCore::ClipboardItemBindingsDataSource *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = off_1E3352D90;
  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      v7 = (WTF::StringImpl *)*(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v18 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v18)
      {
        v21 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v18));
        v9 = v21;
      }
      v19 = *(WTF **)(v9 + 16);
      if (v19)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v20 = v9;
        WTF::fastFree(v19, a2);
        v9 = v20;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((unsigned int *)this + 11);
  if ((_DWORD)v12)
  {
    v13 = (_DWORD **)*((_QWORD *)this + 4);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (v15[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[4];
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v16 = (WTF *)*((_QWORD *)this + 4);
  if (v16)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

{
  WTF *v2;
  void *v3;

  WebCore::ClipboardItemBindingsDataSource::~ClipboardItemBindingsDataSource(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ClipboardItemBindingsDataSource::types@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(this + 68);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(_DWORD *)(v4 + 68);
      if (v5)
      {
        v6 = *(_DWORD ***)(v4 + 56);
        v7 = *(unsigned int *)(v4 + 68);
        do
        {
          v8 = *v6;
          if (*v6)
            *v8 += 2;
          *(_QWORD *)this = v8;
          this += 8;
          v6 += 2;
          --v7;
        }
        while (v7);
        *(_DWORD *)(a2 + 12) = v5;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::ClipboardItemBindingsDataSource::getType(uint64_t a1, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  JSC::Structure *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24[3];
  WTF::StringImpl **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 68))
  {
LABEL_5:
    v8 = *(_QWORD *)a3;
    v24[0] = 0;
    WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)5, (JSC::JSGlobalObject *)v24, 0);
    result = v24[0];
    v24[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v6 = 0;
  v7 = 0;
  while ((WTF::equal(*a2, *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 56) + v6), a3) & 1) == 0)
  {
    ++v7;
    v6 += 16;
    if (v7 >= *(unsigned int *)(a1 + 68))
      goto LABEL_5;
  }
  if (v7 >= *(unsigned int *)(a1 + 68))
  {
    __break(0xC471u);
    JUMPOUT(0x1952CF8B0);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v6 + 8);
  *(_DWORD *)(v11 + 16) += 2;
  v12 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v13 = *a2;
  if (*a2)
    *(_DWORD *)v13 += 2;
  v14 = operator new(0x20uLL);
  v15 = v14;
  *v14 = &off_1E33530B8;
  v14[1] = v11;
  v14[2] = v12;
  if (v13)
    *(_DWORD *)v13 += 2;
  v14[3] = v13;
  v16 = *(_QWORD *)(v11 + 32);
  if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
    v17 = 0;
  else
    v17 = *(JSC::JSGlobalObject **)v16;
  v18 = **(_QWORD **)(v11 + 24);
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    v19 = 0;
  }
  else if (*(_BYTE *)(v18 + 5) == 68)
  {
    v19 = **(JSC::Structure ***)(v11 + 24);
  }
  else
  {
    v19 = 0;
  }
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v20 = &off_1E3392A30;
  v20[4] = v15;
  v25 = 0;
  v23 = v20;
  WebCore::DOMPromise::whenPromiseIsSettled(v17, v19, (uint64_t *)&v23);
  if (v23)
    (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  result = (WTF::StringImpl *)v25;
  if (v25 == v24)
  {
    v22 = 4;
    result = (WTF::StringImpl *)v24;
    goto LABEL_26;
  }
  if (v25)
  {
    v22 = 5;
LABEL_26:
    result = (WTF::StringImpl *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v22))();
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v21);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*(_DWORD *)(v11 + 16) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  --*(_DWORD *)(v11 + 16);
  return result;
}

WTF *WebCore::ClipboardItemBindingsDataSource::collectDataForWriting(uint64_t a1, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader **v7;
  uint64_t v8;
  WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  _QWORD *v18;
  const WTF::StringImpl *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  JSC::JSGlobalObject *v48;
  uint64_t v49;
  JSC::Structure *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  uint64_t v58;
  _DWORD *v59;
  WTF *result;
  uint64_t v61;
  WTF *v62;
  int v63;
  _OWORD v64[3];
  uint64_t v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v6)
  {
    v7 = *(WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader ***)(a1 + 32);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      v10 = *((_QWORD *)*v7 + 7);
      *((_QWORD *)*v7 + 7) = 0;
      if (v10)
      {
        WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded(v9, (uint64_t)a2, a3);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  if (*(_DWORD *)(a1 + 40))
  {
    v11 = *(unsigned int *)(a1 + 44);
    v12 = *(WTF **)(a1 + 32);
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      do
      {
        v14 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v14)
        {
          if (v14[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          else
            --v14[4];
        }
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
      *(_DWORD *)(a1 + 44) = 0;
      v12 = *(WTF **)(a1 + 32);
    }
    if (v12)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v12, a2);
    }
  }
  v15 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
  if (v17)
  {
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 + 1, v17));
  }
  v21 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v17;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v61 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v61)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v61));
      v62 = *(WTF **)(v21 + 16);
      if (v62)
      {
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 24) = 0;
        WTF::fastFree(v62, v18);
      }
      WTF::fastFree((WTF *)v21, v18);
    }
  }
  v24 = *(unsigned int *)(a1 + 68);
  *(_DWORD *)(a1 + 16) = v24;
  if ((_DWORD)v24)
  {
    if (v24 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1952CFE54);
    }
    v25 = WTF::fastMalloc((WTF *)(8 * v24));
    if (*(_DWORD *)(a1 + 68))
    {
      v63 = v24;
      v26 = 0;
      while (1)
      {
        v27 = v26;
        v28 = *(_QWORD *)(a1 + 56);
        v29 = *(WTF::StringImpl **)(v28 + 16 * v26);
        if (v29)
          *(_DWORD *)v29 += 2;
        v30 = *(_DWORD **)(a1 + 8);
        ++*v30;
        v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v31 = &off_1E3353100;
        v31[1] = a1;
        v31[2] = v30;
        v32 = WTF::fastMalloc((WTF *)0x48);
        v33 = v32;
        *(_DWORD *)(v32 + 16) = 1;
        *(_QWORD *)v32 = off_1E3352DC8;
        *(_QWORD *)(v32 + 8) = 0;
        if (v29)
          *(_DWORD *)v29 += 2;
        *(_QWORD *)(v32 + 24) = v29;
        *(_QWORD *)(v32 + 32) = 0;
        *(_DWORD *)(v32 + 40) = 0;
        *(_QWORD *)(v32 + 48) = 0;
        *(_QWORD *)(v32 + 56) = v31;
        v34 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
        if (v34)
        {
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
        }
        *(_QWORD *)(v33 + 64) = v34;
        v36 = *(_QWORD *)(v28 + 16 * v27 + 8);
        ++*(_DWORD *)(v36 + 16);
        v37 = *(_QWORD *)(v33 + 8);
        if (v37)
          goto LABEL_99;
        v37 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = v33;
        v39 = *(unsigned int **)(v33 + 8);
        *(_QWORD *)(v33 + 8) = v37;
        if (!v39)
          goto LABEL_99;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v39);
          WTF::fastFree((WTF *)v39, v38);
        }
        v37 = *(_QWORD *)(v33 + 8);
        if (v37)
        {
LABEL_99:
          do
            v42 = __ldaxr((unsigned int *)v37);
          while (__stlxr(v42 + 1, (unsigned int *)v37));
        }
        *(_QWORD *)&v64[0] = a1;
        v43 = *(_DWORD **)(a1 + 8);
        ++*v43;
        *((_QWORD *)&v64[0] + 1) = v43;
        v44 = *(unsigned int **)(a1 + 48);
        if (v44)
        {
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 + 1, v44));
        }
        ++*(_DWORD *)(v36 + 16);
        if (v29)
          *(_DWORD *)v29 += 2;
        v46 = (char *)operator new(0x38uLL);
        *(_QWORD *)v46 = &off_1E3353128;
        *(_OWORD *)(v46 + 8) = v64[0];
        *(_OWORD *)((char *)v64 + 8) = 0u;
        *((_QWORD *)v46 + 3) = v44;
        *((_QWORD *)v46 + 4) = v36;
        memset((char *)&v64[1] + 8, 0, 24);
        *((_QWORD *)v46 + 5) = v29;
        *((_QWORD *)v46 + 6) = v37;
        v67 = v46;
        v47 = *(_QWORD *)(v36 + 32);
        if (!v47 || (*(_BYTE *)(v47 + 8) & 3) != 0)
          v48 = 0;
        else
          v48 = *(JSC::JSGlobalObject **)v47;
        v49 = **(_QWORD **)(v36 + 24);
        if ((v49 & 0xFFFE000000000002) != 0)
        {
          v50 = 0;
        }
        else if (*(_BYTE *)(v49 + 5) == 68)
        {
          v50 = **(JSC::Structure ***)(v36 + 24);
        }
        else
        {
          v50 = 0;
        }
        v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        v52 = (uint64_t)v51;
        *v51 = &off_1E3392A30;
        if (v67)
        {
          if (v67 == v66)
          {
            v51[4] = v51 + 1;
            (*(void (**)(_QWORD *))(v66[0] + 24))(v66);
          }
          else
          {
            v51[4] = v67;
            v67 = 0;
          }
        }
        else
        {
          v51[4] = 0;
        }
        v65 = v52;
        WebCore::DOMPromise::whenPromiseIsSettled(v48, v50, &v65);
        if (v65)
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
        v54 = v67;
        if (v67 == v66)
        {
          v54 = v66;
          v55 = 4;
        }
        else
        {
          if (!v67)
            goto LABEL_64;
          v55 = 5;
        }
        (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_64:
        _ZZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS_9ClipboardEON3WTF17CompletionHandlerIFvNSt3__18optionalINS_20PasteboardCustomDataEEEEEEENK3__0clIKNS3_12KeyValuePairINS3_6StringENS3_3RefINS_10DOMPromiseENS3_12RawPtrTraitsISH_EENS3_21DefaultRefDerefTraitsISH_EEEEEEEEDaRT_ENUlvE0_D1Ev(v64, v53);
        if (*(_DWORD *)(v36 + 16) == 1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
          if (v29)
          {
LABEL_66:
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)v29 -= 2;
          }
        }
        else
        {
          --*(_DWORD *)(v36 + 16);
          if (v29)
            goto LABEL_66;
        }
        v26 = v27 + 1;
        *(_QWORD *)(v25 + 8 * v27) = v33;
        if (v27 + 1 >= (unint64_t)*(unsigned int *)(a1 + 68))
        {
          LODWORD(v24) = v63;
          goto LABEL_77;
        }
      }
    }
    LODWORD(v26) = 0;
  }
  else
  {
    LODWORD(v26) = 0;
    v25 = 0;
  }
LABEL_77:
  v56 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v56)
  {
    v57 = *(_DWORD ***)(a1 + 32);
    v58 = 8 * v56;
    do
    {
      v59 = *v57;
      *v57 = 0;
      if (v59)
      {
        if (v59[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
        else
          --v59[4];
      }
      ++v57;
      v58 -= 8;
    }
    while (v58);
  }
  result = *(WTF **)(a1 + 32);
  if (result)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    result = (WTF *)WTF::fastFree(result, v18);
  }
  *(_QWORD *)(a1 + 32) = v25;
  *(_DWORD *)(a1 + 40) = v24;
  *(_DWORD *)(a1 + 44) = v26;
  if (!*(_DWORD *)(a1 + 16))
    return (WTF *)WebCore::ClipboardItemBindingsDataSource::invokeCompletionHandler(a1, v18, v19);
  return result;
}

uint64_t WebCore::ClipboardItemBindingsDataSource::invokeCompletionHandler(uint64_t this, _QWORD *a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  char v36;
  WTF::StringImpl *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF *v46;
  _DWORD *v47;
  bmalloc::api *v48;
  void *v49;
  WebCore::Document *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 v54;
  WTF *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  unsigned int v76;
  uint64_t v77;
  WTF *v78;
  WebCore::Document *v79;
  WTF *v80[2];
  uint64_t v81;
  char v82;
  __int128 v83;
  int v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89[2];
  uint64_t v90;
  __int128 v91;
  int v92;
  unsigned int v93;
  char v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  int v97;
  uint64_t v98[2];

  if (!*(_QWORD *)(this + 24))
    return this;
  v95 = *(_QWORD *)(this + 24);
  v3 = *(WTF **)(this + 32);
  v4 = *(unsigned int *)(this + 44);
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  v5 = *(_QWORD *)(this + 48);
  if (!v5)
  {
    v6 = 0;
    *(_QWORD *)(this + 48) = 0;
    goto LABEL_51;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
  {
    *(_QWORD *)(this + 48) = 0;
    do
      v76 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v76 - 1, (unsigned int *)v5));
    if (v76 == 1)
      goto LABEL_174;
    v6 = 0;
LABEL_51:
    v36 = 1;
LABEL_52:
    LOBYTE(v91) = 0;
    v94 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardCustomData>)>::operator()(&v95, &v91);
    if (v94)
    {
      v38 = (WTF *)*((_QWORD *)&v91 + 1);
      if (v93)
      {
        v39 = 32 * v93;
        v40 = *((_QWORD *)&v91 + 1) + 16;
        do
        {
          v41 = *(unsigned int *)(v40 + 8);
          if ((_DWORD)v41 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v41])(v89, v40);
          *(_DWORD *)(v40 + 8) = -1;
          v42 = *(WTF::StringImpl **)(v40 - 8);
          *(_QWORD *)(v40 - 8) = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v37);
            else
              *(_DWORD *)v42 -= 2;
          }
          v43 = *(WTF::StringImpl **)(v40 - 16);
          *(_QWORD *)(v40 - 16) = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v37);
            else
              *(_DWORD *)v43 -= 2;
          }
          v40 += 32;
          v39 -= 32;
        }
        while (v39);
        v38 = (WTF *)*((_QWORD *)&v91 + 1);
      }
      if (v38)
      {
        *((_QWORD *)&v91 + 1) = 0;
        v92 = 0;
        WTF::fastFree(v38, v37);
      }
      v44 = (WTF::StringImpl *)v91;
      *(_QWORD *)&v91 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v37);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    if ((v36 & 1) == 0)
      goto LABEL_73;
LABEL_75:
    if (!(_DWORD)v4)
      goto LABEL_84;
LABEL_76:
    v45 = 8 * v4;
    v46 = v3;
    do
    {
      v47 = *(_DWORD **)v46;
      *(_QWORD *)v46 = 0;
      if (v47)
      {
        if (v47[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
        else
          --v47[4];
      }
      v46 = (WTF *)((char *)v46 + 8);
      v45 -= 8;
    }
    while (v45);
    goto LABEL_84;
  }
  ++*(_DWORD *)(v6 + 24);
  *(_QWORD *)(this + 48) = 0;
  do
  {
    v7 = __ldaxr((unsigned int *)v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)v5));
  if (v8)
    goto LABEL_7;
LABEL_174:
  atomic_store(1u, (unsigned int *)v5);
  v77 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v77)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v77));
  v78 = *(WTF **)(v5 + 16);
  if (v78)
  {
    *(_QWORD *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    WTF::fastFree(v78, a2);
  }
  WTF::fastFree((WTF *)v5, a2);
  if (!v6)
    goto LABEL_51;
LABEL_7:
  v9 = *(_QWORD *)(v6 + 72);
  if (!v9)
    goto LABEL_49;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_49;
  v11 = *(_QWORD *)(v10 + 64);
  if (!v11)
    goto LABEL_49;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    goto LABEL_49;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
    goto LABEL_49;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    goto LABEL_49;
  if (*(_BYTE *)(v14 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1952D05D8);
  }
  v15 = *(_QWORD *)(v14 + 240);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0 || (v17 = *(_QWORD *)(v16 + 296)) == 0)
  {
LABEL_49:
    v36 = 0;
    goto LABEL_52;
  }
  v79 = *(WebCore::Document **)(v16 + 296);
  *(_DWORD *)(v17 + 24) += 2;
  v89[0] = 0;
  v89[1] = 0;
  v90 = 0;
  if (!(_DWORD)v4)
  {
LABEL_89:
    v50 = v79;
    WebCore::Document::originIdentifierForPasteboard(v79, (WTF::StringImpl *)a2, &v96);
    v52 = v96;
    if (v96)
      *(_DWORD *)v96 += 2;
    v53 = v89[0];
    v89[0] = v52;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::destroy(v53, v51);
        if (v52)
        {
LABEL_95:
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v51);
          else
            *(_DWORD *)v52 -= 2;
        }
LABEL_97:
        v54 = *(_OWORD *)v89;
        v89[0] = 0;
        v89[1] = 0;
        *(_OWORD *)v80 = v54;
        *(_QWORD *)&v54 = v90;
        v90 = 0;
        v81 = v54;
        v82 = 1;
        WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardCustomData>)>::operator()(&v95, (__int128 *)v80);
        if (v82)
        {
          v55 = v80[1];
          if (HIDWORD(v81))
          {
            v56 = 32 * HIDWORD(v81);
            v57 = (char *)v80[1] + 16;
            do
            {
              v58 = *((unsigned int *)v57 + 2);
              if ((_DWORD)v58 != -1)
                ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v58])(&v96, v57);
              *((_DWORD *)v57 + 2) = -1;
              v59 = (WTF::StringImpl *)*((_QWORD *)v57 - 1);
              *((_QWORD *)v57 - 1) = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, v37);
                else
                  *(_DWORD *)v59 -= 2;
              }
              v60 = (WTF::StringImpl *)*((_QWORD *)v57 - 2);
              *((_QWORD *)v57 - 2) = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, v37);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v57 += 32;
              v56 -= 32;
            }
            while (v56);
            v55 = v80[1];
          }
          if (v55)
          {
            v80[1] = 0;
            LODWORD(v81) = 0;
            WTF::fastFree(v55, v37);
          }
          v67 = v80[0];
          v80[0] = 0;
          if (v67)
            goto LABEL_138;
        }
        goto LABEL_140;
      }
      *(_DWORD *)v53 -= 2;
    }
    if (v52)
      goto LABEL_95;
    goto LABEL_97;
  }
  v18 = v3;
  while (1)
  {
    v19 = *(_QWORD *)v18;
    v20 = *(WTF::StringImpl **)(*(_QWORD *)v18 + 24);
    if (v20)
      *(_DWORD *)v20 += 2;
    v88 = v20;
    v21 = *(_DWORD *)(v19 + 40);
    if (v21 == 1)
    {
      v27 = *(unsigned int **)(v19 + 32);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      v87 = 0;
      v97 = 1;
      v29 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)v89, &v88, a3);
      v31 = v29;
      v32 = *(unsigned int *)(v29 + 24);
      if ((_DWORD)v32 != -1)
      {
        v33 = (uint64_t *)(v29 + 16);
        if ((_DWORD)v32 == 1)
        {
          v96 = 0;
          v34 = *v33;
          *v33 = (uint64_t)v27;
          v98[0] = v34;
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v98, v33);
          goto LABEL_37;
        }
        ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v32])(v98, v33);
      }
      v96 = 0;
      *(_QWORD *)(v31 + 16) = v27;
      *(_DWORD *)(v31 + 24) = 1;
LABEL_37:
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v96, v30);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v87, v35);
      v20 = v88;
      if (v88)
        goto LABEL_42;
      goto LABEL_44;
    }
    if (v21)
      break;
    v22 = *(_DWORD **)(v19 + 32);
    if (!v22)
      break;
    *v22 += 2;
    v23 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)v89, &v88, a3);
    v24 = v23;
    v25 = *(unsigned int *)(v23 + 24);
    if ((_DWORD)v25 == -1)
      goto LABEL_40;
    a2 = (_QWORD *)(v23 + 16);
    if ((_DWORD)v25)
    {
      ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v25])(&v96, a2);
LABEL_40:
      *(_QWORD *)(v24 + 16) = v22;
      *(_DWORD *)(v24 + 24) = 0;
LABEL_41:
      if (v20)
        goto LABEL_42;
      goto LABEL_44;
    }
    v26 = (WTF::StringImpl *)*a2;
    *a2 = v22;
    if (!v26)
      goto LABEL_41;
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
      if (v20)
      {
LABEL_42:
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v26 -= 2;
      if (v20)
        goto LABEL_42;
    }
LABEL_44:
    v18 = (WTF *)((char *)v18 + 8);
    if (v18 == (WTF *)((char *)v3 + 8 * v4))
      goto LABEL_89;
  }
  LOBYTE(v83) = 0;
  v86 = 0;
  WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardCustomData>)>::operator()(&v95, &v83);
  v50 = v79;
  if (v86)
  {
    v61 = (WTF *)*((_QWORD *)&v83 + 1);
    if (v85)
    {
      v62 = 32 * v85;
      v63 = *((_QWORD *)&v83 + 1) + 16;
      do
      {
        v64 = *(unsigned int *)(v63 + 8);
        if ((_DWORD)v64 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v64])(&v96, v63);
        *(_DWORD *)(v63 + 8) = -1;
        v65 = *(WTF::StringImpl **)(v63 - 8);
        *(_QWORD *)(v63 - 8) = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, v37);
          else
            *(_DWORD *)v65 -= 2;
        }
        v66 = *(WTF::StringImpl **)(v63 - 16);
        *(_QWORD *)(v63 - 16) = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v37);
          else
            *(_DWORD *)v66 -= 2;
        }
        v63 += 32;
        v62 -= 32;
      }
      while (v62);
      v61 = (WTF *)*((_QWORD *)&v83 + 1);
    }
    if (v61)
    {
      *((_QWORD *)&v83 + 1) = 0;
      v84 = 0;
      WTF::fastFree(v61, v37);
    }
    v68 = (WTF::StringImpl *)v83;
    *(_QWORD *)&v83 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v37);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  v67 = v88;
  if (v88)
  {
LABEL_138:
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v37);
    else
      *(_DWORD *)v67 -= 2;
  }
LABEL_140:
  if (HIDWORD(v90))
  {
    v69 = 32 * HIDWORD(v90);
    v70 = (char *)v89[1] + 16;
    do
    {
      v71 = *((unsigned int *)v70 + 2);
      if ((_DWORD)v71 != -1)
        ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v71])(&v96, v70);
      *((_DWORD *)v70 + 2) = -1;
      v72 = (WTF::StringImpl *)*((_QWORD *)v70 - 1);
      *((_QWORD *)v70 - 1) = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v37);
        else
          *(_DWORD *)v72 -= 2;
      }
      v73 = (WTF::StringImpl *)*((_QWORD *)v70 - 2);
      *((_QWORD *)v70 - 2) = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v37);
        else
          *(_DWORD *)v73 -= 2;
      }
      v70 += 32;
      v69 -= 32;
    }
    while (v69);
  }
  v74 = v89[1];
  if (v89[1])
  {
    v89[1] = 0;
    LODWORD(v90) = 0;
    WTF::fastFree(v74, v37);
  }
  v75 = v89[0];
  v89[0] = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v37);
    else
      *(_DWORD *)v75 -= 2;
  }
  if (*((_DWORD *)v50 + 6) == 2)
  {
    if ((*((_WORD *)v50 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v50, v37);
  }
  else
  {
    *((_DWORD *)v50 + 6) -= 2;
  }
LABEL_73:
  if (*(_DWORD *)(v6 + 24) != 1)
  {
    --*(_DWORD *)(v6 + 24);
    goto LABEL_75;
  }
  WebCore::Clipboard::~Clipboard((WebCore::Clipboard *)v6, v37);
  bmalloc::api::isoDeallocate(v48, v49);
  if ((_DWORD)v4)
    goto LABEL_76;
LABEL_84:
  if (v3)
    WTF::fastFree(v3, v37);
  this = v95;
  if (v95)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  return this;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardCustomData>)>::operator()(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  char v3;
  __int128 v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14[2];
  uint64_t v15;
  char v16;
  char v17;

  v2 = *a1;
  *a1 = 0;
  v3 = *((_BYTE *)a2 + 24);
  if (v3)
  {
    v4 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)v14 = v4;
    *(_QWORD *)&v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    v15 = v4;
    v3 = 1;
  }
  else
  {
    LOBYTE(v14[0]) = 0;
  }
  v16 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, v14);
  if (v16)
  {
    if (HIDWORD(v15))
    {
      v6 = 32 * HIDWORD(v15);
      v7 = (char *)v14[1] + 16;
      do
      {
        v8 = *((unsigned int *)v7 + 2);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v8])(&v17, v7);
        *((_DWORD *)v7 + 2) = -1;
        v9 = (WTF::StringImpl *)*((_QWORD *)v7 - 1);
        *((_QWORD *)v7 - 1) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v5);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = (WTF::StringImpl *)*((_QWORD *)v7 - 2);
        *((_QWORD *)v7 - 2) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v5);
          else
            *(_DWORD *)v10 -= 2;
        }
        v7 += 32;
        v6 -= 32;
      }
      while (v6);
    }
    v11 = v14[1];
    if (v14[1])
    {
      v14[1] = 0;
      LODWORD(v15) = 0;
      WTF::fastFree(v11, v5);
    }
    v12 = v14[0];
    v14[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v5);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::~ClipboardItemTypeLoader(WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  *(_QWORD *)this = off_1E3352DC8;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    *(_WORD *)(v3 + 204) = 272;
    v4 = *(_QWORD *)(v3 + 144);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v5);
    }
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v13 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v13)
      {
        v16 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v13));
        v6 = v16;
      }
      v14 = *(WTF **)(v6 + 16);
      if (v14)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v15 = v6;
        WTF::fastFree(v14, a2);
        v6 = v15;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
  v11 = *((unsigned int *)this + 10);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, char *))off_1E3353058[v11])(&v17, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::~ClipboardItemTypeLoader(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::didFinishLoading(WTF::StringImpl **this)
{
  char *v2;
  const WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;

  if ((MEMORY[0x19AEA53F4](this[3], "text/uri-list", 13) & 1) != 0
    || (WTF::equal(this[3], (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v3) & 1) != 0
    || WTF::equal(this[3], (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v4))
  {
    WebCore::FileReaderLoader::stringResult(this[6], v2, &v34);
    v6 = v34;
    if (v34)
      goto LABEL_5;
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v6 += 2;
    v34 = v6;
    if (v6)
    {
LABEL_5:
      *(_DWORD *)v6 += 2;
      v7 = *((unsigned int *)this + 10);
      if ((_DWORD)v7 != -1)
      {
        v2 = (char *)(this + 4);
        if (!(_DWORD)v7)
        {
          v8 = *(WTF::StringImpl **)v2;
          *(_QWORD *)v2 = v6;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v2);
            else
              *(_DWORD *)v8 -= 2;
          }
          goto LABEL_32;
        }
        ((void (*)(uint64_t *, char *))off_1E3353058[v7])(&v32, v2);
      }
      this[4] = v6;
      *((_DWORD *)this + 10) = 0;
      goto LABEL_32;
    }
  }
  v9 = this[6];
  v10 = *((_QWORD *)v9 + 19);
  if (!v10 || *((_BYTE *)v9 + 205))
    goto LABEL_32;
  if (*((_DWORD *)v9 + 49) == *((_DWORD *)v9 + 50))
  {
    *(_DWORD *)v10 += 2;
  }
  else
  {
    JSC::ArrayBuffer::create((JSC::ArrayBuffer *)v10, (JSC::ArrayBuffer *)v2);
    v10 = v32;
    v32 = 0;
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v32);
    if (!v10)
      goto LABEL_32;
  }
  v11 = *(WTF **)(v10 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v12)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v11 = (WTF *)(((unint64_t)v11 & 0x3FFFFFFFFLL) + v12);
    }
  }
  if (*(_BYTE *)(v10 + 64) && (v30 = *(_QWORD *)(v10 + 32)) != 0)
    v13 = *(WTF **)(v30 + 32);
  else
    v13 = *(WTF **)(v10 + 48);
  v14 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v14 + 24;
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v14, v11, v13);
  v32 = v14;
  v15 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v15, &v32);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v32, v16);
  v31 = 0;
  v33 = 1;
  v18 = *((unsigned int *)this + 10);
  if ((_DWORD)v18 != -1)
  {
    v19 = (uint64_t *)(this + 4);
    if ((_DWORD)v18 == 1)
    {
      v32 = 0;
      v20 = *v19;
      *v19 = v15;
      v35 = v20;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v35, v19);
      goto LABEL_31;
    }
    ((void (*)(uint64_t *, uint64_t *))off_1E3353058[v18])(&v35, v19);
  }
  v32 = 0;
  this[4] = (WTF::StringImpl *)v15;
  *((_DWORD *)this + 10) = 1;
LABEL_31:
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, v17);
  v33 = -1;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v31, v21);
  v22 = *(_DWORD *)v10 == 2;
  *(_DWORD *)v10 -= 2;
  if (v22)
  {
    v26 = *(_QWORD *)(v10 + 80);
    if (v26)
    {
      *(_QWORD *)(v26 + 8) = 3;
      *(_QWORD *)(v10 + 80) = 0;
    }
    if ((*(_BYTE *)(v10 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v10 + 16));
    v28 = *(WTF **)(v10 + 8);
    if ((v28 & 1) == 0 && v28)
    {
      v29 = *(WTF **)v28;
      if (*(_QWORD *)v28)
      {
        *(_QWORD *)v28 = 0;
        *((_DWORD *)v28 + 2) = 0;
        WTF::fastFree(v29, v27);
      }
      WTF::fastFree(v28, v27);
    }
    WTF::fastFree((WTF *)v10, v27);
  }
LABEL_32:
  v23 = this[6];
  this[6] = 0;
  if (v23)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 64))(v23);
  v24 = this[7];
  this[7] = 0;
  if (v24)
  {
    WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded((WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *)this, (uint64_t)v2, v5);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 16))(v24);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::didFail(WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  v5 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v5)
  {
    WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded(a1, a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded(WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  void *v45;
  WTF **v46;
  int v47;
  WTF *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  void *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  float v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  void *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  WTF *v103;
  WebCore::ClipboardItemPasteboardDataSource *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  float v113;
  int v114;
  WTF *v115;
  unint64_t v116;

  if ((WTF::equal(*((WTF **)this + 3), (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, a3) & 1) == 0
    && !MEMORY[0x19AEA53F4](*((_QWORD *)this + 3), "text/uri-list", 13))
  {
    goto LABEL_49;
  }
  v6 = *((_QWORD *)this + 8);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return;
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
    return;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return;
  v10 = *(_QWORD *)(v9 + 64);
  if (!v10)
    return;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return;
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
    return;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    return;
  if (*(_BYTE *)(v13 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1952D1660);
  }
  v14 = *(_QWORD *)(v13 + 240);
  if (!v14)
    return;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    return;
  v16 = *(_QWORD *)(v15 + 296);
  if (!v16)
    return;
  v17 = *(_DWORD *)(v16 + 24) + 2;
  *(_DWORD *)(v16 + 24) = v17;
  v18 = *(_QWORD *)(v16 + 528);
  if (!v18
    || (v19 = *(_QWORD *)(v18 + 8)) == 0
    || (v20 = *(_QWORD *)(v19 + 24)) == 0
    || (v21 = *(_QWORD *)(v20 + 8)) == 0)
  {
    v27 = 1;
    goto LABEL_46;
  }
  v22 = (char *)this + 32;
  v23 = *((_DWORD *)this + 10);
  if (!v23)
  {
    v26 = *(WTF::StringImpl **)v22;
    if (*(_QWORD *)v22)
      *(_DWORD *)v26 += 2;
    v112 = v26;
    goto LABEL_29;
  }
  if (v23 == 1)
  {
    if (*(_DWORD *)(*(_QWORD *)v22 + 20))
    {
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) + 8);
      v25 = *(unsigned int *)(v24 + 24);
      if ((_DWORD)v25 == -1)
        goto LABEL_182;
      v115 = (WTF *)&v112;
      ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v115, v24 + 8);
    }
    WTF::String::fromUTF8();
    v26 = v112;
LABEL_29:
    if (!v26)
      goto LABEL_30;
    if (!*((_DWORD *)v26 + 1))
    {
      v112 = 0;
      v27 = 1;
LABEL_43:
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v4);
      else
        *(_DWORD *)v26 -= 2;
      goto LABEL_45;
    }
    WebCore::Page::applyLinkDecorationFiltering(v21, &v112, &v111);
    v28 = v111;
    v115 = v111;
    LODWORD(v116) = 0;
    v29 = *((unsigned int *)this + 10);
    if ((_DWORD)v29 != -1)
    {
      if (!(_DWORD)v29)
      {
        v115 = 0;
        v30 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = v111;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v4);
          else
            *(_DWORD *)v30 -= 2;
        }
LABEL_40:
        if ((_DWORD)v116 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E3353058[v116])(&v108, &v115);
        v27 = 0;
        v26 = v112;
        v112 = 0;
        if (!v26)
          goto LABEL_45;
        goto LABEL_43;
      }
      ((void (*)(uint64_t *, char *))off_1E3353058[v29])(&v108, (char *)this + 32);
      v28 = v115;
    }
    v115 = 0;
    *((_QWORD *)this + 4) = v28;
    *((_DWORD *)this + 10) = 0;
    goto LABEL_40;
  }
LABEL_30:
  v27 = 1;
LABEL_45:
  v17 = *(_DWORD *)(v16 + 24);
LABEL_46:
  v31 = v17 - 2;
  if (v31)
  {
    *(_DWORD *)(v16 + 24) = v31;
  }
  else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v16, v4);
  }
  if (v27)
    return;
LABEL_49:
  if (WTF::equal(*((WTF **)this + 3), (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v5))
  {
    v33 = (char *)this + 32;
    v34 = *((_DWORD *)this + 10);
    if (!v34)
    {
      v37 = *(WTF::StringImpl **)v33;
      if (*(_QWORD *)v33)
        *(_DWORD *)v37 += 2;
      v112 = v37;
      if (!v37)
        return;
LABEL_60:
      if (!*((_DWORD *)v37 + 1))
      {
        v112 = 0;
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v32);
        else
          *(_DWORD *)v37 -= 2;
        return;
      }
      LOBYTE(v109) = 0;
      v110 = 0;
      WebCore::sanitizeMarkup((unsigned int **)&v112, 1, &v109, &v111);
      v39 = v111;
      v111 = 0;
      v115 = v39;
      LODWORD(v116) = 0;
      v40 = *((unsigned int *)this + 10);
      if ((_DWORD)v40 != -1)
      {
        if (!(_DWORD)v40)
        {
          v115 = 0;
          v41 = *(WTF::StringImpl **)v33;
          *(_QWORD *)v33 = v39;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v38);
            else
              *(_DWORD *)v41 -= 2;
          }
          goto LABEL_70;
        }
        ((void (*)(uint64_t *, char *))off_1E3353058[v40])(&v108, (char *)this + 32);
        v39 = v115;
      }
      v115 = 0;
      *((_QWORD *)this + 4) = v39;
      *((_DWORD *)this + 10) = 0;
LABEL_70:
      if ((_DWORD)v116 != -1)
        ((void (*)(uint64_t *, WTF **))off_1E3353058[v116])(&v108, &v115);
      LODWORD(v116) = -1;
      v42 = v111;
      v111 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v38);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (v110)
      {
        v43 = v109;
        v109 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      }
      v44 = v112;
      v112 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v38);
        else
          *(_DWORD *)v44 -= 2;
      }
      goto LABEL_81;
    }
    if (v34 != 1)
      return;
    if (!*(_DWORD *)(*(_QWORD *)v33 + 20))
    {
LABEL_55:
      WTF::String::fromUTF8();
      v37 = v112;
      if (!v112)
        return;
      goto LABEL_60;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v33 + 8) + 8);
    v36 = *(unsigned int *)(v35 + 24);
    if ((_DWORD)v36 != -1)
    {
      v115 = (WTF *)&v111;
      ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v36])(&v115, v35 + 8);
      goto LABEL_55;
    }
LABEL_182:
    v105 = (WebCore::ClipboardItemPasteboardDataSource *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ClipboardItemPasteboardDataSource::~ClipboardItemPasteboardDataSource(v105);
    return;
  }
LABEL_81:
  if (!MEMORY[0x19AEA53F4](*((_QWORD *)this + 3), "image/png", 9))
    return;
  v46 = (WTF **)((char *)this + 32);
  v47 = *((_DWORD *)this + 10);
  if (v47)
  {
    if (v47 != 1)
      return;
    v48 = *v46;
    if (!*v46)
      return;
    do
      v49 = __ldaxr((unsigned int *)v48);
    while (__stlxr(v49 + 1, (unsigned int *)v48));
  }
  else
  {
    WebCore::utf8Buffer((uint64_t *)this + 4, (uint64_t *)&v115);
    v48 = v115;
    if (!v115)
      return;
  }
  if (*((_QWORD *)v48 + 6))
  {
    v50 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v50 + 8) = 1;
    *(_QWORD *)(v50 + 16) = 0;
    *(_QWORD *)(v50 + 24) = 0;
    *(_QWORD *)(v50 + 56) = 0;
    *(_QWORD *)(v50 + 32) = 0;
    *(_QWORD *)(v50 + 40) = 0;
    *(_WORD *)(v50 + 48) = 0;
    *(_QWORD *)v50 = off_1E340AC28;
    v51 = WTF::fastMalloc((WTF *)0xF8);
    *(_QWORD *)(v50 + 64) = WebCore::BitmapImageSource::BitmapImageSource(v51, v50, 0, 0);
    v115 = v48;
    WebCore::Image::setData((_QWORD *)v50, (uint64_t *)&v115, 1);
    v53 = v115;
    v115 = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr((unsigned int *)v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, (unsigned int *)v53));
      if (!v55)
      {
        atomic_store(1u, (unsigned int *)v53);
        v92 = *((unsigned int *)v53 + 5);
        if ((_DWORD)v92)
        {
          v93 = *((_QWORD *)v53 + 1);
          v94 = v93 + 16 * v92;
          do
          {
            v95 = *(unsigned int **)(v93 + 8);
            *(_QWORD *)(v93 + 8) = 0;
            if (v95)
            {
              v96 = v95;
              do
              {
                v97 = __ldaxr(v95);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, v95));
              if (!v98)
              {
                atomic_store(1u, v95);
                v99 = v95[6];
                if ((_DWORD)v99 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E3353088[v99])(&v112, v96 + 2);
                v96[6] = -1;
                WTF::fastFree((WTF *)v96, v52);
              }
            }
            v93 += 16;
          }
          while (v93 != v94);
        }
        v101 = (WTF *)*((_QWORD *)v53 + 1);
        if ((WTF *)((char *)v53 + 24) != v101 && v101 != 0)
        {
          *((_QWORD *)v53 + 1) = 0;
          *((_DWORD *)v53 + 4) = 0;
          WTF::fastFree(v101, v52);
        }
        WTF::fastFree(v53, v52);
      }
    }
    v56 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v50 + 64) + 176))(*(_QWORD *)(v50 + 64), 0);
    *(float *)&v111 = (float)(int)v56;
    *((float *)&v111 + 1) = (float)SHIDWORD(v56);
    v57 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v57 != -1)
    {
      v115 = (WTF *)&v108;
      v112 = (WTF::StringImpl *)&v115;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v115 = 0;
    v116 = 0;
    v58 = 1;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v111, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, &v108, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v116 + 4));
    if (!v108)
    {
      v80 = (WTF *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v80 += 2;
      v81 = *((unsigned int *)this + 10);
      if ((_DWORD)v81 != -1)
      {
        if (!(_DWORD)v81)
        {
          v82 = *v46;
          *v46 = v80;
          if (!v82)
            goto LABEL_125;
          goto LABEL_121;
        }
        ((void (*)(WTF **, char *))off_1E3353058[v81])(&v115, (char *)this + 32);
      }
      *((_QWORD *)this + 4) = v80;
      *((_DWORD *)this + 10) = 0;
      goto LABEL_125;
    }
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
    *(float *)&v61 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 168))(v50, 0);
    v115 = 0;
    v116 = __PAIR64__(v62, v61);
    v63 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 168))(v50, 0);
    v112 = 0;
    v113 = v63;
    v114 = v64;
    (*(void (**)(uint64_t, uint64_t, WTF **, WTF::StringImpl **, uint64_t))(*(_QWORD *)v60 + 360))(v60, v50, &v115, &v112, 545);
    v65 = v108;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ImageBuffer::toData((WebCore *)&v106, v65, 0, 0, 0, &v112);
    WebCore::FragmentedSharedBuffer::create(&v112, (uint64_t *)&v115);
    v66 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v66, (uint64_t *)&v115);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v115, v67);
    v107 = 0;
    LODWORD(v116) = 1;
    v69 = *((unsigned int *)this + 10);
    if ((_DWORD)v69 != -1)
    {
      if ((_DWORD)v69 == 1)
      {
        v115 = 0;
        v70 = *v46;
        *v46 = (WTF *)v66;
        v111 = v70;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v111, v68);
        goto LABEL_118;
      }
      ((void (*)(WTF::StringImpl **, char *))off_1E3353058[v69])(&v111, (char *)this + 32);
    }
    v115 = 0;
    *((_QWORD *)this + 4) = v66;
    *((_DWORD *)this + 10) = 1;
LABEL_118:
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v115, v68);
    LODWORD(v116) = -1;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v107, v83);
    v84 = v112;
    if (v112)
    {
      v112 = 0;
      v113 = 0.0;
      WTF::fastFree(v84, v59);
    }
    v82 = v106;
    v106 = 0;
    if (!v82)
    {
LABEL_125:
      v85 = v108;
      v108 = 0;
      if (!v85)
      {
LABEL_142:
        if (*(_DWORD *)(v50 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        else
          --*(_DWORD *)(v50 + 8);
        return;
      }
      v86 = *(_QWORD *)(v85 + 8);
      if (__ldaxr((unsigned __int8 *)v86))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v86))
      {
        goto LABEL_130;
      }
      MEMORY[0x19AEA534C](v86);
LABEL_130:
      v88 = *(_QWORD *)(v86 + 8);
      v89 = v88 - 1;
      *(_QWORD *)(v86 + 8) = v88 - 1;
      if (v88 == 1)
      {
        v100 = *(_QWORD *)(v86 + 16);
        v90 = *(_QWORD *)(v86 + 24);
        *(_QWORD *)(v86 + 24) = 0;
        v58 = v100 != 0;
      }
      else
      {
        v90 = 0;
      }
      v91 = __ldxr((unsigned __int8 *)v86);
      if (v91 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v86))
        {
LABEL_137:
          if (!v89)
          {
            if (v90)
              (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
            if (!v58)
              WTF::fastFree((WTF *)v86, v59);
          }
          goto LABEL_142;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v86);
      goto LABEL_137;
    }
LABEL_121:
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v59);
    else
      *(_DWORD *)v82 -= 2;
    goto LABEL_125;
  }
  do
  {
    v71 = __ldaxr((unsigned int *)v48);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, (unsigned int *)v48));
  if (!v72)
  {
    atomic_store(1u, (unsigned int *)v48);
    v73 = *((unsigned int *)v48 + 5);
    if ((_DWORD)v73)
    {
      v74 = *((_QWORD *)v48 + 1);
      v75 = v74 + 16 * v73;
      do
      {
        v76 = *(unsigned int **)(v74 + 8);
        *(_QWORD *)(v74 + 8) = 0;
        if (v76)
        {
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            atomic_store(1u, v76);
            v79 = v76[6];
            if ((_DWORD)v79 != -1)
              ((void (*)(WTF **, unsigned int *))off_1E3353088[v79])(&v115, v76 + 2);
            v76[6] = -1;
            WTF::fastFree((WTF *)v76, v45);
          }
        }
        v74 += 16;
      }
      while (v74 != v75);
    }
    v103 = (WTF *)*((_QWORD *)v48 + 1);
    if ((WTF *)((char *)v48 + 24) != v103 && v103 != 0)
    {
      *((_QWORD *)v48 + 1) = 0;
      *((_DWORD *)v48 + 4) = 0;
      WTF::fastFree(v103, v45);
    }
    WTF::fastFree(v48, v45);
  }
}

void WebCore::ClipboardItemPasteboardDataSource::~ClipboardItemPasteboardDataSource(WebCore::ClipboardItemPasteboardDataSource *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = off_1E3352E10;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = off_1E3352E10;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ClipboardItemPasteboardDataSource::types@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(unsigned int *)(this + 28);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v2;
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v5)
      {
        v6 = *(_DWORD ***)(v4 + 16);
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          if (*v6)
            *v8 += 2;
          *(_QWORD *)this = v8;
          this += 8;
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::ClipboardItemPasteboardDataSource::getType(uint64_t a1, const WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Clipboard *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  bmalloc::api *v12;
  void *v13;
  WTF::StringImpl *v14;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6 && (v7 = *(WebCore::Clipboard **)(v6 + 8)) != 0)
  {
    ++*((_DWORD *)v7 + 6);
    result = (WTF::StringImpl *)WebCore::Clipboard::getType((uint64_t)v7, (char *)v5, a2, a3);
    if (*((_DWORD *)v7 + 6) == 1)
    {
      WebCore::Clipboard::~Clipboard(v7, v9);
      return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v12, v13);
    }
    else
    {
      --*((_DWORD *)v7 + 6);
    }
  }
  else
  {
    v10 = *a3;
    v14 = 0;
    WebCore::DeferredPromise::reject(v10, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v14, 0);
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ClipboardItemPasteboardDataSource::collectDataForWriting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  unsigned int v12;
  char v13;
  char v14;

  LOBYTE(v11) = 0;
  v13 = 0;
  result = WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardCustomData>)>::operator()(a3, &v11);
  if (v13)
  {
    v5 = (WTF *)*((_QWORD *)&v11 + 1);
    if (v12)
    {
      v6 = 32 * v12;
      v7 = *((_QWORD *)&v11 + 1) + 16;
      do
      {
        v8 = *(unsigned int *)(v7 + 8);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v8])(&v14, v7);
        *(_DWORD *)(v7 + 8) = -1;
        v9 = *(WTF::StringImpl **)(v7 - 8);
        *(_QWORD *)(v7 - 8) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v4);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = *(WTF::StringImpl **)(v7 - 16);
        *(_QWORD *)(v7 - 16) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v4);
          else
            *(_DWORD *)v10 -= 2;
        }
        v7 += 32;
        v6 -= 32;
      }
      while (v6);
      v5 = (WTF *)*((_QWORD *)&v11 + 1);
    }
    if (v5)
      WTF::fastFree(v5, v4);
    result = v11;
    if ((_QWORD)v11)
    {
      if (*(_DWORD *)v11 == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)v11, v4);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

void WebCore::NavigatorClipboard::~NavigatorClipboard(WebCore::NavigatorClipboard *this, WTF::StringImpl *a2)
{
  WebCore::Clipboard *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WebCore::Clipboard *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::Clipboard::~Clipboard(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
}

{
  WebCore::Clipboard *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WebCore::Clipboard *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::Clipboard::~Clipboard(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::DOMAudioSession::~DOMAudioSession(unsigned int **this)
{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v2 + 216))(v2, (char *)this + 56);
  v4 = this[8];
  if (v4)
  {
    *((_QWORD *)v4 + 1) = 0;
    v5 = this[8];
    this[8] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    this[8] = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this + 4), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)this, v8);
}

{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v2 + 216))(v2, (char *)this + 56);
  v4 = this[8];
  if (v4)
  {
    *((_QWORD *)v4 + 1) = 0;
    v5 = this[8];
    this[8] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    this[8] = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this + 4), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)this, v8);
  bmalloc::api::isoDeallocate(v9, v10);
}

void `non-virtual thunk to'WebCore::DOMAudioSession::~DOMAudioSession(unsigned int **this)
{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v2 + 216))(v2, (char *)this + 24);
  v4 = this[4];
  if (v4)
  {
    *((_QWORD *)v4 + 1) = 0;
    v5 = this[4];
    this[4] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    this[4] = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)this, v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(this - 4), v8);
}

{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, unsigned int **))(*(_QWORD *)v2 + 216))(v2, this);
  v4 = this[1];
  if (v4)
  {
    *((_QWORD *)v4 + 1) = 0;
    v5 = this[1];
    this[1] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this - 3), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(this - 7), v8);
}

{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v2 + 216))(v2, (char *)this + 24);
  v4 = this[4];
  if (v4)
  {
    *((_QWORD *)v4 + 1) = 0;
    v5 = this[4];
    this[4] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    this[4] = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)this, v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(this - 4), v8);
  bmalloc::api::isoDeallocate(v9, v10);
}

{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, unsigned int **))(*(_QWORD *)v2 + 216))(v2, this);
  v4 = this[1];
  if (v4)
  {
    *((_QWORD *)v4 + 1) = 0;
    v5 = this[1];
    this[1] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this - 3), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(this - 7), v8);
  bmalloc::api::isoDeallocate(v9, v10);
}

unsigned int *WebCore::DOMAudioSession::setType@<X0>(unsigned int *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  WebCore::AudioSessionIOS *v15;
  WebCore::AudioSessionIOS *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;

  v4 = *((_QWORD *)result + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1952D206CLL);
    }
    v7 = (_DWORD *)(v5 - 264);
    *(_DWORD *)(v5 - 264) += 2;
    result = (unsigned int *)WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v5 - 288), 0);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(v5 + 3074) || *(_BYTE *)(v5 + 3117))
      {
        v19 = *(_QWORD *)(v5 + 240);
        i = v5 - 288;
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          i = v5 - 288;
          if (v20)
          {
            v21 = *(_QWORD *)(v20 + 120);
            i = v5 - 288;
            if (v21)
            {
              v22 = *(_QWORD *)(v21 + 8);
              for (i = v5 - 288; v22; v22 = *(_QWORD *)(v25 + 8))
              {
                i = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
                v23 = *(_QWORD *)(i + 528);
                if (!v23)
                  break;
                v24 = *(_QWORD *)(v23 + 8);
                if (!v24)
                  break;
                v25 = *(_QWORD *)(v24 + 120);
                if (!v25)
                  break;
              }
            }
          }
        }
      }
      else
      {
        v9 = *(_QWORD *)(v5 + 240);
        i = v5 - 288;
        if (v9)
        {
          v11 = *(_QWORD *)(v9 + 8);
          i = v5 - 288;
          if (v11)
          {
            v12 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
            v13 = v12 && *(_BYTE *)(v12 + 144) == 0;
            i = v5 - 288;
            if (v13)
            {
              v14 = *(_QWORD *)(v12 + 296);
              i = v5 - 288;
              if (v14)
                i = v14;
            }
          }
        }
      }
      *(_BYTE *)(i + 3367) = a2;
      if ((a2 - 1) >= 5)
      {
        v16 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)result);
        result = (unsigned int *)(*(uint64_t (**)(WebCore::AudioSessionIOS *, _QWORD))(*(_QWORD *)v16 + 40))(v16, 0);
        {
          v17 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
          if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
          {
            if (!*(_BYTE *)(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager + 80))
            {
              *(_BYTE *)(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager + 80) = 1;
              v18 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v18 = off_1E3408070;
              *((_QWORD *)v18 + 1) = v17;
              v26 = v18;
              WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(v17, (uint64_t *)&v26);
              result = v26;
              if (v26)
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
            }
          }
        }
        else
        {
          WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
        }
      }
      else
      {
        v15 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)result);
        result = (unsigned int *)(*(uint64_t (**)(WebCore::AudioSessionIOS *, unint64_t))(*(_QWORD *)v15 + 40))(v15, (0x501020103uLL >> (8 * (a2 - 1))) & 7);
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (*v7 == 2)
    {
      if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v8);
    }
    else
    {
      *v7 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 8;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::DOMAudioSession::scriptExecutionContext(WebCore::DOMAudioSession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::DOMAudioSession::type(WebCore::DOMAudioSession *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1952D2214);
  }
  v3 = (_DWORD *)(v2 - 264);
  *(_DWORD *)(v2 - 264) += 2;
  v5 = 0;
  if (WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v2 - 288), 0))
  {
    if (*(_BYTE *)(v2 + 3074) || *(_BYTE *)(v2 + 3117))
    {
      v13 = *(_QWORD *)(v2 + 240);
      i = v2 - 288;
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        i = v2 - 288;
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 120);
          i = v2 - 288;
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            for (i = v2 - 288; v16; v16 = *(_QWORD *)(v19 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
              v17 = *(_QWORD *)(i + 528);
              if (!v17)
                break;
              v18 = *(_QWORD *)(v17 + 8);
              if (!v18)
                break;
              v19 = *(_QWORD *)(v18 + 120);
              if (!v19)
                break;
            }
          }
        }
      }
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 240);
      i = v2 - 288;
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 8);
        i = v2 - 288;
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
          v10 = v9 && *(_BYTE *)(v9 + 144) == 0;
          i = v2 - 288;
          if (v10)
          {
            v11 = *(_QWORD *)(v9 + 296);
            i = v2 - 288;
            if (v11)
              i = v11;
          }
        }
      }
    }
    v5 = *(unsigned __int8 *)(i + 3367);
  }
  if (*v3 == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v4);
  }
  else
  {
    *v3 -= 2;
  }
  return v5;
}

uint64_t WebCore::DOMAudioSession::state(WebCore::DOMAudioSession *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  WebCore::AudioSession *isFeatureEnabled;
  void *v6;
  uint64_t v7;
  WebCore::AudioSessionIOS *v8;
  WebCore::AudioSessionIOS *v9;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v4 = (_DWORD *)(v2 - 264);
    *(_DWORD *)(v2 - 264) += 2;
    isFeatureEnabled = (WebCore::AudioSession *)WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v2 - 288), 0);
    v7 = 0;
    if ((_DWORD)isFeatureEnabled)
    {
      if (*((_BYTE *)this + 74))
      {
        v7 = *((unsigned __int8 *)this + 73);
      }
      else
      {
        v8 = WebCore::AudioSession::sharedSession(isFeatureEnabled);
        if (*((_BYTE *)v8 + 42))
        {
          v7 = 2;
        }
        else
        {
          v9 = WebCore::AudioSession::sharedSession(v8);
          v7 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v9 + 224))(v9);
        }
        *(_WORD *)((char *)this + 73) = v7 | 0x100;
      }
    }
    if (*v4 == 2)
    {
      if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v6);
    }
    else
    {
      *v4 -= 2;
    }
    return v7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DOMAudioSession::scheduleStateChangeEvent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    if (*(_BYTE *)(this + 72))
      return this;
    v4 = 0;
    v6 = 1;
LABEL_7:
    *(_BYTE *)(v1 + 72) = 1;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E33531A8;
    v7[1] = v1;
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    v9 = *(_DWORD *)(v1 + 24);
    *(_QWORD *)(v8 + 8) = v1;
    ++*(_QWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 24) = v9 + 2;
    this = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)this = &off_1E3353180;
    *(_QWORD *)(this + 8) = v1;
    *(_QWORD *)(this + 16) = v8;
    *(_QWORD *)(this + 24) = v7;
    v14 = this;
    v10 = *(_QWORD *)(v1 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v12, 9, &v14);
        this = v14;
        v14 = 0;
        if (!this)
        {
LABEL_14:
          if ((v6 & 1) != 0)
            return this;
          goto LABEL_15;
        }
      }
      else
      {
        v14 = 0;
      }
      v13 = *(uint64_t (***)())this;
    }
    else
    {
      v14 = 0;
      v13 = &off_1E3353180;
    }
    this = v13[1]();
    goto LABEL_14;
  }
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1952D2514);
  }
  v4 = v3 - 288;
  *(_DWORD *)(v3 - 264) += 2;
  this = WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v3 - 288), 0);
  if ((this & 1) != 0 && !*(_BYTE *)(v1 + 72))
  {
    v6 = 0;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DOMAudioSession::beginAudioSessionInterruption(WebCore::DOMAudioSession *this)
{
  return WebCore::DOMAudioSession::scheduleStateChangeEvent((uint64_t)this - 56);
}

uint64_t `non-virtual thunk to'WebCore::DOMAudioSession::endAudioSessionInterruption(uint64_t a1)
{
  return WebCore::DOMAudioSession::scheduleStateChangeEvent(a1 - 56);
}

uint64_t `non-virtual thunk to'WebCore::DOMAudioSession::audioSessionActiveStateChanged(WebCore::DOMAudioSession *this)
{
  return WebCore::DOMAudioSession::scheduleStateChangeEvent((uint64_t)this - 56);
}

void WebCore::NavigatorAudioSession::~NavigatorAudioSession(WebCore::NavigatorAudioSession *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v1)
    WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v1 + 24));
}

void WebCore::NavigatorAudioSession::~NavigatorAudioSession(WebCore::NavigatorAudioSession *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v3 + 24));
  WTF::fastFree(this, a2);
}

unsigned __int8 *WebCore::NavigatorAudioSession::audioSession@<X0>(WebCore::NavigatorAudioSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v5;
  unsigned __int8 *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  WebCore::AudioSessionIOS *v16;
  uint64_t v17;
  unsigned __int8 *v18[3];
  uint64_t v19;

  v5 = (uint64_t *)((char *)this + 72);
  v18[0] = "NavigatorAudioSession";
  v18[1] = (unsigned __int8 *)22;
  result = (unsigned __int8 *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v18);
  if (!result || (v7 = *((_QWORD *)result + 2)) == 0)
  {
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E3352FA8;
    *(_QWORD *)(v7 + 8) = 0;
    v18[0] = (unsigned __int8 *)v7;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v5, "NavigatorAudioSession", (unsigned __int8 *)0x16, (const char **)v18);
    result = v18[0];
    v18[0] = 0;
    if (result)
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
    goto LABEL_20;
  v9 = *((_QWORD *)this + 1);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    v8 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v8 + 24) = 1;
    if (*(_BYTE *)(v10 + 178))
    {
      v11 = v10 - 96;
    }
    else
    {
      v12 = v10 - 288;
      v13 = *(_QWORD *)(v10 + 416);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
          v12 = v14;
      }
      v11 = v12 + 192;
    }
  }
  else
  {
    v8 = bmalloc::api::isoAllocate();
    v11 = 0;
    *(_DWORD *)(v8 + 24) = 1;
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  v15 = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)v11);
  *(_QWORD *)v8 = &off_1E33A0540;
  *(_QWORD *)(v8 + 16) = 0;
  if (v11)
  {
    if (*(_BYTE *)(v11 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1952D27B0);
    }
    v19 = v8;
    v15 = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v11 + 128), &v19, (uint64_t)v18);
  }
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)v8 = &off_1E3352E68;
  *(_QWORD *)(v8 + 32) = &unk_1E3352EF8;
  *(_QWORD *)(v8 + 56) = &unk_1E3352F70;
  *(_WORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 74) = 0;
  v16 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v15);
  (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v16 + 208))(v16, v8 + 56);
  result = (unsigned __int8 *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
  v17 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = v8;
  if (!v17
    || (result = (unsigned __int8 *)WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v17 + 24)),
        (v8 = *(_QWORD *)(v7 + 8)) != 0))
  {
LABEL_20:
    ++*(_DWORD *)(v8 + 24);
  }
  *a2 = v8;
  return result;
}

void WebCore::NavigatorBeacon::~NavigatorBeacon(WebCore::NavigatorBeacon *this, void *a2)
{
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::CachedResource *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v3 = (unsigned int **)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      if (*v3)
        v6 = (WebCore::CachedResource *)*((_QWORD *)*v3 + 1);
      else
        v6 = 0;
      WebCore::CachedResource::removeClient(v6, (unsigned int **)this + 1);
      ++v3;
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    v3 = (unsigned int **)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v3++, a2);
        v8 -= 8;
      }
      while (v8);
      v3 = (unsigned int **)*((_QWORD *)this + 4);
    }
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((WTF *)v3, a2);
  }
  *((_QWORD *)this + 1) = &off_1E33F87C8;
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, a2);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::CachedResource *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v3 = (unsigned int **)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      if (*v3)
        v6 = (WebCore::CachedResource *)*((_QWORD *)*v3 + 1);
      else
        v6 = 0;
      WebCore::CachedResource::removeClient(v6, (unsigned int **)this + 1);
      ++v3;
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    v3 = (unsigned int **)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v3++, a2);
        v8 -= 8;
      }
      while (v8);
      v3 = (unsigned int **)*((_QWORD *)this + 4);
    }
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((WTF *)v3, a2);
  }
  *((_QWORD *)this + 1) = &off_1E33F87C8;
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, a2);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

void `non-virtual thunk to'WebCore::NavigatorBeacon::~NavigatorBeacon(WebCore::NavigatorBeacon *this, void *a2)
{
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::CachedResource *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v3 = (unsigned int **)*((_QWORD *)this + 3);
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      if (*v3)
        v6 = (WebCore::CachedResource *)*((_QWORD *)*v3 + 1);
      else
        v6 = 0;
      WebCore::CachedResource::removeClient(v6, (unsigned int **)this);
      ++v3;
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 9);
    v3 = (unsigned int **)*((_QWORD *)this + 3);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v3++, a2);
        v8 -= 8;
      }
      while (v8);
      v3 = (unsigned int **)*((_QWORD *)this + 3);
    }
  }
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((WTF *)v3, a2);
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, a2);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::NavigatorBeacon::~NavigatorBeacon((WebCore::NavigatorBeacon *)((char *)this - 8), a2);
}

uint64_t WebCore::NavigatorBeacon::from(WebCore::NavigatorBeacon *this, WebCore::Navigator *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  const char *v6;
  const char *v8;
  unsigned __int8 *v9[2];

  v3 = (uint64_t *)((char *)this + 72);
  v9[0] = "NavigatorBeacon";
  v9[1] = (unsigned __int8 *)16;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v9);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v5 = off_1E3352FC8;
    *(_QWORD *)(v5 + 8) = &unk_1E3352FF0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = this;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    v8 = (const char *)v5;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v3, "NavigatorBeacon", (unsigned __int8 *)0x10, &v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5;
}

void WebCore::NavigatorBeacon::notifyFinished(uint64_t a1, WebCore::CachedResource *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  void *v8;
  uint64_t v9;
  unsigned int **i;
  void *v11;
  unsigned int **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  unsigned int **v20;

  v4 = *((_QWORD *)a2 + 50);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v19);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v5 + 60))
  {
    v6 = *((_QWORD *)a2 + 50);
    if (v6)
    {
      v7 = (WTF::StringImpl **)(v6 + 320);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v19);
      v7 = (WTF::StringImpl **)&WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    WebCore::NavigatorBeacon::logError(*(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 64), v7);
  }
  WebCore::CachedResource::removeClient(a2, (unsigned int **)(a1 + 8));
  v9 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v9)
  {
    for (i = *(unsigned int ***)(a1 + 32); !*i || *((WebCore::CachedResource **)*i + 1) != a2; ++i)
    {
      if (!--v9)
        return;
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(i, v8);
    v12 = i + 1;
    v13 = *(unsigned int *)(a1 + 44);
    v14 = *(_QWORD *)(a1 + 32) + 8 * v13;
    if (i + 1 != (unsigned int **)v14)
    {
      do
      {
        v15 = *v12;
        if (*v12)
        {
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          *i = v15;
          v17 = *((_QWORD *)v15 + 1);
          if (v17)
          {
            v20 = i;
            ++*(_DWORD *)(v17 + 548);
            v18 = *(_QWORD *)(v17 + 488);
            if (v18)
            {
              if (*(_QWORD *)(v18 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), (uint64_t *)&v20, (uint64_t)v19);
            }
          }
        }
        else
        {
          *i = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v12, v11);
        ++i;
        ++v12;
      }
      while (v12 != (unsigned int **)v14);
      LODWORD(v13) = *(_DWORD *)(a1 + 44);
    }
    *(_DWORD *)(a1 + 44) = v13 - 1;
  }
}

WTF::StringImpl *WebCore::NavigatorBeacon::logError(WTF::StringImpl *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];
  _QWORD v26[2];

  if (!this)
    return this;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    goto LABEL_53;
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return this;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return this;
  v8 = (unsigned int *)(v6 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v6 + 296);
  if (!v10)
    goto LABEL_39;
  *(_DWORD *)(v10 + 24) += 2;
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
  v11 = a2[6];
  if (v11 && (v12 = *((_DWORD *)v11 + 1), *(_DWORD *)v11 += 2, v12))
  {
    v13 = ". ";
    v14 = 3;
  }
  else
  {
    if (*((_BYTE *)a2 + 60) == 2)
      v14 = 31;
    else
      v14 = 2;
    if (*((_BYTE *)a2 + 60) == 2)
      v13 = " due to access control checks.";
    else
      v13 = ".";
  }
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
  v15 = a2[1];
  if (v15)
    *(_DWORD *)v15 += 2;
  v23 = v15;
  if (v11)
    *(_DWORD *)v11 += 2;
  v22 = v11;
  v26[0] = "Beacon API cannot load ";
  v26[1] = 24;
  v25[0] = v13;
  v25[1] = v14;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)v26, (uint64_t *)&v23, (uint64_t)v25, (uint64_t *)&v22, &v24);
  if (!v24)
  {
    __break(0xC471u);
LABEL_53:
    JUMPOUT(0x1952D2EE8);
  }
  WebCore::Document::addConsoleMessage((_QWORD *)v10, 2, 2, &v24, 0);
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  this = v23;
  v23 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
      if (!v11)
        goto LABEL_37;
      goto LABEL_35;
    }
    *(_DWORD *)this -= 2;
  }
  if (!v11)
    goto LABEL_37;
LABEL_35:
  if (*(_DWORD *)v11 == 2)
    this = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v16);
  else
    *(_DWORD *)v11 -= 2;
LABEL_37:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10, v16);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  do
  {
LABEL_39:
    v19 = __ldaxr(v8);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v8));
  if (!v20)
  {
    atomic_store(1u, v8);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v8;
    v26[0] = v21;
    WTF::ensureOnMainThread();
    this = (WTF::StringImpl *)v26[0];
    v26[0] = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void `non-virtual thunk to'WebCore::NavigatorBeacon::notifyFinished(uint64_t a1, WebCore::CachedResource *a2)
{
  WebCore::NavigatorBeacon::notifyFinished(a1 - 8, a2);
}

WTF::StringImpl *WebCore::NavigatorBeacon::sendBeacon@<X0>(WebCore::CachedResourceLoader **this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WebCore::CachedResourceLoader *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  WTF::StringImpl *v16;
  unsigned int v18;
  WTF::StringImpl *v19;
  char v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::CachedResourceLoader *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  char v34;
  WebCore::FormData *v35;
  WebCore::FormData *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WebCore::CachedResourceLoader *v39;
  __int128 v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  void *v43;
  char v44;
  WebCore::CachedResource *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  unsigned int **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::CachedResourceHandleBase *v59;
  WebCore::CachedResource *v60;
  WebCore::CachedResourceClient *v61;
  void *v62;
  WTF *v63;
  void *v64;
  _DWORD *v65;
  bmalloc::api *v66;
  void *v67;
  WebCore::FormData *v68;
  bmalloc::api *v69;
  void *v70;
  int v71;
  WebCore::FormData *v72;
  WTF *v73;
  __int128 v74;
  __int128 v75;
  _QWORD v76[7];
  _OWORD v77[3];
  int v78;
  char v79;
  __int128 v80;
  WebCore::FormData *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  WebCore::FormData *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  _WORD v97[76];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int16 v101;
  WTF::StringImpl *v102[10];
  unsigned int v103;
  WTF::StringImpl *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int v109;
  char v110;
  char v111;
  char v112;
  __int16 v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  WebCore::Document::completeURL((WebCore::Document *)this, a3, (uint64_t)(this + 106), 0, (WTF::URL *)&v85);
  if ((v86 & 1) == 0 || (v86 & 2) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    *(_DWORD *)(a5 + 16) = 1;
    goto LABEL_4;
  }
  v11 = this[66];
  if (!v11 || !*((_QWORD *)v11 + 1))
  {
    *(_BYTE *)a5 = 0;
LABEL_44:
    *(_DWORD *)(a5 + 16) = 0;
    goto LABEL_4;
  }
  if ((WebCore::Document::shouldBypassMainWorldContentSecurityPolicy((WebCore::Document *)this) & 1) != 0)
    goto LABEL_20;
  v12 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(this + 24));
  v13 = v12;
  if (v12)
  {
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
  }
  v88 = 0;
  WTF::URL::invalidate((WTF::URL *)&v88);
  v15 = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v13, (WTF::URL *)&v85, 0, (uint64_t)&v88);
  v16 = v88;
  v88 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v9);
      if (!v13)
        goto LABEL_19;
      goto LABEL_17;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v13)
    goto LABEL_19;
LABEL_17:
  if (!atomic_load(v13))
  {
    __break(0xC471u);
    goto LABEL_137;
  }
  do
    v18 = __ldaxr(v13);
  while (__stlxr(v18 - 1, v13));
LABEL_19:
  if ((v15 & 1) == 0)
  {
    *(_BYTE *)a5 = 1;
    goto LABEL_44;
  }
LABEL_20:
  v19 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  v73 = v19;
  v74 = v86;
  v75 = v87;
  v76[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v76);
  v76[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v76[6] = v88;
  memset(v77, 0, sizeof(v77));
  v78 = 0x10000;
  v20 = v79 & 0x80 | 4;
  v79 = v20;
  *(_QWORD *)&v80 = 0;
  v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v21 += 2;
    v20 = v79;
  }
  *((_QWORD *)&v80 + 1) = v21;
  v81 = 0;
  LOBYTE(v82) = 0;
  BYTE4(v82) = 0;
  v83 = v83 & 0xE0 | 5;
  v79 = v20 | 2;
  v84 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v104 = v88;
  WebCore::ResourceRequestBase::setHTTPMethod(&v73, &v104);
  v23 = v104;
  v104 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  HIBYTE(v78) = 8;
  v24 = this[66];
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v25 + 280) + 88);
      if (v26)
      {
        if (*(WebCore::CachedResourceLoader ***)(v25 + 296) == this)
        {
          ++*(_DWORD *)(v26 + 24);
          v27 = *(unsigned __int8 *)(v26 + 3533);
          v28 = v83;
          if ((v83 & 1) == 0)
          {
            v71 = *(unsigned __int8 *)(v26 + 3533);
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v73);
            v27 = v71;
            v28 = v83 | 1;
            v83 |= 1u;
          }
          if ((v27 != 0) == ((v79 & 4) == 0))
          {
            v79 = v79 & 0xFB | (4 * (v27 != 0));
            v83 = v28 & 0xFD;
          }
          if (*(_DWORD *)(v26 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
          else
            --*(_DWORD *)(v26 + 24);
        }
      }
    }
  }
  WORD2(v104) = 0;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0;
  v110 = 1;
  v111 = 0;
  v112 = 0;
  v113 = 20;
  v116 = 0;
  v115 = 0;
  LODWORD(v104) = 50463232;
  BYTE6(v104) = 1;
  v114 = v114 & 0xF0000000 | 0xC0009C2;
  if (!*(_BYTE *)(a4 + 16))
    goto LABEL_66;
  v102[0] = 0;
  WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_6>((uint64_t)&v88, a4, (uint64_t)v102, (uint64_t)v102, (uint64_t)v102, (uint64_t)v102);
  if (v90)
  {
    if (v90 != 1)
      goto LABEL_135;
    v29 = v89;
    v89 = 0;
    *(_BYTE *)a5 = (_BYTE)v88;
    *(_QWORD *)(a5 + 8) = v29;
    v30 = 1;
    *(_DWORD *)(a5 + 16) = 1;
    v31 = 1;
    goto LABEL_61;
  }
  WebCore::ExceptionOr<WebCore::FetchBody>::releaseReturnValue((uint64_t)&v88, (uint64_t)&v117);
  if (v118 == 7)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    v30 = 1;
    *(_DWORD *)(a5 + 16) = 1;
    goto LABEL_55;
  }
  WebCore::FetchBody::bodyAsFormData((uint64_t *)&v117, v32, &v72);
  v34 = v83;
  if ((v83 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v73);
    v34 = v83 | 1;
    v83 |= 1u;
  }
  v35 = v72;
  v72 = 0;
  v36 = v81;
  v81 = v35;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      WebCore::FormData::~FormData(v36, v33);
      bmalloc::api::isoDeallocate(v66, v67);
      v68 = v72;
      v83 = v83 & 0xF3 | 4;
      v72 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 1)
        {
          WebCore::FormData::~FormData(v68, v33);
          bmalloc::api::isoDeallocate(v69, v70);
        }
        else
        {
          --*(_DWORD *)v68;
        }
      }
      goto LABEL_53;
    }
    --*(_DWORD *)v36;
    v34 = v83;
  }
  v83 = v34 & 0xF3 | 4;
  if (!v102[0] || !*((_DWORD *)v102[0] + 1))
    goto LABEL_54;
LABEL_53:
  if ((v83 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v73);
    v83 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v77, (WTF::StringImpl *)0x1A, v102);
  v83 &= ~2u;
  if (!WebCore::isCrossOriginSafeRequestHeader(26, v102))
  {
    v30 = 0;
    BYTE1(v104) = 3;
    HIBYTE(v113) |= 1u;
  }
  else
  {
LABEL_54:
    v30 = 0;
  }
LABEL_55:
  v37 = v120;
  v120 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      v65 = (_DWORD *)*((_QWORD *)v37 + 1);
      *((_QWORD *)v37 + 1) = 0;
      if (v65)
      {
        if (v65[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 16))(v65);
        else
          --v65[4];
      }
      WTF::fastFree(v37, v33);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v119, v33);
  if (v118 != -1)
    ((void (*)(WebCore::FormData **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v118])(&v72, &v117);
  v31 = v90;
  if (v90 != -1)
LABEL_61:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3353068[v31])(&v117, &v88);
  v38 = v102[0];
  v102[0] = 0;
  if (!v38)
    goto LABEL_65;
  if (*(_DWORD *)v38 == 2)
  {
    WTF::StringImpl::destroy(v38, v22);
    if (v30)
      goto LABEL_110;
LABEL_66:
    v39 = this[90];
    if (!v39)
      v39 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)this, v22);
    ++*(_DWORD *)v39;
    WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)&v88, (uint64_t *)&v73);
    v40 = v80;
    v80 = 0u;
    v41 = v84;
    v92 = v81;
    v93 = v82;
    v91 = v40;
    v94 = v83;
    v81 = 0;
    v84 = 0;
    v95 = v41;
    v96 = 0;
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v97, (const WebCore::ResourceLoaderOptions *)&v104);
    v97[72] = 0;
    v98 = 0;
    v99 = 0u;
    WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v88, &v100);
    v101 = 0;
    WebCore::CachedResourceLoader::requestResource(&v117, (WebCore::ResourceRequest *)&v88, v39, (WTF::StringImpl *)0xA, 0, 0);
    WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v102, &v117);
    if ((_DWORD)v120 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
       + v120))((int)&v72, (WebCore::CachedResourceHandleBase *)&v117);
    WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v88, v42);
    if (*(_DWORD *)v39 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v39, v43);
      WTF::fastFree(v63, v64);
    }
    else
    {
      --*(_DWORD *)v39;
    }
    if (v103)
    {
      if (v103 == 1)
      {
        WebCore::NavigatorBeacon::logError(*(WTF::StringImpl **)(*(_QWORD *)(a2 + 24) + 64), v102);
        v44 = 0;
LABEL_108:
        *(_BYTE *)a5 = v44;
        *(_DWORD *)(a5 + 16) = 0;
        if (v103 != -1)
          (*(&off_1E3353078 + v103))((int)&v88, (WebCore::CachedResourceHandleBase *)v102);
        goto LABEL_110;
      }
    }
    else
    {
      if (v102[0])
        v45 = (WebCore::CachedResource *)*((_QWORD *)v102[0] + 1);
      else
        v45 = 0;
      v46 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v46 == *(_DWORD *)(a2 + 40))
      {
        v47 = v46 + (v46 >> 2);
        if (v47 >= 0x10)
          v48 = v47 + 1;
        else
          v48 = 16;
        if (v48 <= v46 + 1)
          v49 = v46 + 1;
        else
          v49 = v48;
        if (v49 >> 29)
          goto LABEL_136;
        v50 = *(WTF **)(a2 + 32);
        v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v49));
        *(_DWORD *)(a2 + 40) = v49;
        *(_QWORD *)(a2 + 32) = v52;
        if ((_DWORD)v46)
        {
          v53 = (unsigned int **)((char *)v50 + 8 * v46);
          v54 = (unsigned int **)v50;
          do
          {
            v55 = *v54;
            if (*v54)
            {
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 + 1, v55));
              *(_QWORD *)v52 = v55;
              v57 = *((_QWORD *)v55 + 1);
              if (v57)
              {
                v117 = v52;
                ++*(_DWORD *)(v57 + 548);
                v58 = *(_QWORD *)(v57 + 488);
                if (v58)
                {
                  if (*(_QWORD *)(v58 + 8))
                    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v57 + 464), (uint64_t *)&v117, (uint64_t)&v88);
                }
              }
            }
            else
            {
              *(_QWORD *)v52 = 0;
            }
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v54, v51);
            v52 = (WTF::StringImpl *)((char *)v52 + 8);
            ++v54;
          }
          while (v54 != v53);
          v52 = *(WTF::StringImpl **)(a2 + 32);
        }
        if (v50)
        {
          if (v52 == v50)
          {
            *(_QWORD *)(a2 + 32) = 0;
            *(_DWORD *)(a2 + 40) = 0;
          }
          WTF::fastFree(v50, v51);
          v52 = *(WTF::StringImpl **)(a2 + 32);
        }
        v59 = (WTF::StringImpl *)((char *)v52 + 8 * *(unsigned int *)(a2 + 44));
      }
      else
      {
        v59 = (WebCore::CachedResourceHandleBase *)(*(_QWORD *)(a2 + 32) + 8 * v46);
      }
      WebCore::CachedResourceHandleBase::CachedResourceHandleBase(v59, v45);
      ++*(_DWORD *)(a2 + 44);
      if (!v103)
      {
        if (v102[0])
          v60 = (WebCore::CachedResource *)*((_QWORD *)v102[0] + 1);
        else
          v60 = 0;
        v61 = (WebCore::CachedResourceClient *)(a2 + 8);
        if (WebCore::CachedResource::addClientToSet(v60, v61))
          (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v60 + 88))(v60, v61);
        v44 = 1;
        goto LABEL_108;
      }
    }
LABEL_135:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    __break(0xC471u);
LABEL_137:
    JUMPOUT(0x1952D3888);
  }
  *(_DWORD *)v38 -= 2;
LABEL_65:
  if (!v30)
    goto LABEL_66;
LABEL_110:
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v104, v22);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v73, v62);
LABEL_4:
  result = v85;
  v85 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ExceptionOr<WebCore::FetchBody>::releaseReturnValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  if (!*(_DWORD *)(a1 + 88))
    return WebCore::FetchBody::FetchBody(a2, a1);
  v3 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CacheStorageConnection::computeRecordBodySize(v3);
}

uint64_t WebCore::CacheStorageConnection::computeRecordBodySize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t **v53;

  v4 = *(_QWORD *)(a2 + 840);
  if (!v4)
  {
    v50 = 0;
    v51 = &v50;
    v52 = &v50;
    v36 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v36 != -1)
    {
      v53 = &v51;
      ((void (*)(uint64_t ***, uint64_t))off_1E3353200[v36])(&v53, a3);
      return v50;
    }
LABEL_60:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1952D3CD8);
  }
  v7 = (uint64_t *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 16), 8u, 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (_QWORD *)(v6 + 16 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v4)
        return v13[1];
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (_QWORD *)(v6 + 16 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*v7 - 16);
      v13 = v15;
    }
  }
  *v13 = v4;
  v50 = 0;
  v51 = &v50;
  v52 = &v50;
  v17 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v17 == -1)
    goto LABEL_60;
  v53 = &v51;
  v18 = (WTF *)((uint64_t (*)(uint64_t ***, uint64_t))off_1E3353200[v17])(&v53, a3);
  v19 = v50;
  WTF::cryptographicallyRandomUnitInterval(v18);
  v21 = (((v19 + (unint64_t)(v20 * 128000.0)) >> 8) * (unsigned __int128)0x20C49BA5E353F7DuLL) >> 64;
  v22 = *(_QWORD *)(a2 + 840);
  v23 = *v7;
  if (*v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, 8u, 0), (v23 = *v7) != 0))
  {
    v24 = *(_DWORD *)(v23 - 8);
  }
  else
  {
    v24 = 0;
  }
  v25 = 32000 * v21 + 32000;
  v26 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
  v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
  v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
  v29 = v24 & ((v28 >> 31) ^ v28);
  v30 = (_QWORD *)(v23 + 16 * v29);
  v31 = *v30;
  if (*v30)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      if (v31 == v22)
      {
        v30[1] = v25;
        goto LABEL_42;
      }
      if (v31 == -1)
        v32 = v30;
      v29 = (v29 + v33) & v24;
      v30 = (_QWORD *)(v23 + 16 * v29);
      v31 = *v30;
      ++v33;
    }
    while (*v30);
    if (v32)
    {
      *v32 = 0;
      v32[1] = 0;
      --*(_DWORD *)(*v7 - 16);
      v30 = v32;
    }
  }
  *v30 = v22;
  v30[1] = v25;
  v34 = *v7;
  if (*v7)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v38 = *v7;
  if (*v7)
    v39 = *(_DWORD *)(v38 - 12);
  else
    v39 = 0;
  v40 = (*(_DWORD *)(v38 - 16) + v39);
  v41 = *(unsigned int *)(v38 - 4);
  if (v41 <= 0x400)
  {
    if (3 * v41 > 4 * v40)
      goto LABEL_42;
    if (!(_DWORD)v41)
    {
      v42 = 8;
      goto LABEL_41;
    }
LABEL_37:
    v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
LABEL_41:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, v42, v30);
    goto LABEL_42;
  }
  if (v41 <= 2 * v40)
    goto LABEL_37;
LABEL_42:
  v13[1] = v25;
  v43 = *v7;
  if (*v7)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(v43 - 12) = v44;
  v45 = *v7;
  if (*v7)
    v46 = *(_DWORD *)(v45 - 12);
  else
    v46 = 0;
  v47 = (*(_DWORD *)(v45 - 16) + v46);
  v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 > 2 * v47)
      return v13[1];
    goto LABEL_51;
  }
  if (3 * v48 <= 4 * v47)
  {
    if (!(_DWORD)v48)
    {
      v49 = 8;
      goto LABEL_53;
    }
LABEL_51:
    v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
LABEL_53:
    v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, v49, v13);
  }
  return v13[1];
}

uint64_t WebCore::DOMAudioSession::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::AudioSession *WebCore::DOMAudioSession::deref(WebCore::DOMAudioSession *this)
{
  return WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::DOMAudioSession *)((char *)this + 24));
}

uint64_t WebCore::DOMAudioSession::eventTargetInterface(WebCore::DOMAudioSession *this)
{
  return 2;
}

uint64_t WebCore::DOMAudioSession::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::AudioSession *WebCore::DOMAudioSession::derefEventTarget(WebCore::DOMAudioSession *this)
{
  return WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::DOMAudioSession *)((char *)this + 24));
}

uint64_t `non-virtual thunk to'WebCore::DOMAudioSession::eventTargetInterface(WebCore::DOMAudioSession *this)
{
  return 2;
}

uint64_t `non-virtual thunk to'WebCore::DOMAudioSession::scriptExecutionContext(WebCore::DOMAudioSession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::DOMAudioSession::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

unsigned int **WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int **v5;

  if (*result)
  {
    *((_QWORD *)*result + 1) = 0;
    v2 = *result;
    *result = 0;
    if (v2)
    {
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v5 = result;
        WTF::fastFree((WTF *)v2, a2);
        return v5;
      }
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void WebCore::Supplement<WebCore::Navigator>::~Supplement()
{
  JUMPOUT(0x19AEA7644);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9FetchBodyENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  v3 = *(WTF **)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        else
          --v5[4];
      }
      WTF::fastFree(v3, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)(a2 + 16), (void *)a2);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v4])(&v6, a2);
  *(_DWORD *)(a2 + 8) = -1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9FetchBodyENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::AudioSession *WTF::RefCounted<WebCore::DOMAudioSession>::deref(WebCore::AudioSession *result)
{
  WebCore::AudioSession *v1;
  WebCore::AudioSessionIOS *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v1 = result;
  if (*(_DWORD *)result == 1)
  {
    v2 = WebCore::AudioSession::sharedSession(result);
    (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v2 + 216))(v2, (uint64_t)v1 + 32);
    v4 = *((_QWORD *)v1 + 5);
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = 0;
      v5 = (unsigned int *)*((_QWORD *)v1 + 5);
      *((_QWORD *)v1 + 5) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, v3);
        }
      }
    }
    else
    {
      *((_QWORD *)v1 + 5) = 0;
    }
    WebCore::EventTarget::~EventTarget((WebCore::AudioSession *)((char *)v1 + 8), v3);
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::AudioSession *)((char *)v1 - 24), v8);
    return (WebCore::AudioSession *)bmalloc::api::isoDeallocate(v9, v10);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;

  *a1 = &off_1E33530B8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

void std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;

  *a1 = &off_1E33530B8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  result = operator new(0x20uLL);
  v3 = a1[1];
  v4 = a1[2];
  ++*(_DWORD *)(v3 + 16);
  *result = &off_1E33530B8;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 16);
  result[2] = v4;
  v5 = (_DWORD *)a1[3];
  if (v5)
    *v5 += 2;
  result[3] = v5;
  return result;
}

_QWORD *std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  v2 = result[1];
  ++*(_DWORD *)(v2 + 16);
  *a2 = &off_1E33530B8;
  a2[1] = v2;
  v3 = result[2];
  ++*(_DWORD *)(v3 + 16);
  a2[2] = v3;
  v4 = (_DWORD *)result[3];
  if (v4)
    *v4 += 2;
  a2[3] = v4;
  return result;
}

_DWORD *std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::destroy(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *result;

  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  result = (_DWORD *)a1[1];
  a1[1] = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::destroy_deallocate(_QWORD *__p, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (WTF::StringImpl *)__p[3];
  __p[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)__p[2];
  __p[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)__p[1];
  __p[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  operator delete(__p);
}

WTF::StringImpl *std::__function::__func<WebCore::ClipboardItemBindingsDataSource::getType(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,std::allocator<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  JSC::JSPromise *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSPromise *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::ClipboardItem *v21;
  WTF::StringImpl *v22;
  uint64_t Object;
  uint64_t v24;
  BOOL v25;
  char **v26;
  BOOL v27;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v2 = a1[1];
  v3 = **(_QWORD **)(v2 + 24);
  if ((v3 & 0xFFFE000000000002) != 0)
  {
    v4 = 0;
  }
  else if (*(_BYTE *)(v3 + 5) == 68)
  {
    v4 = **(JSC::JSPromise ***)(v2 + 24);
  }
  else
  {
    v4 = 0;
  }
  if (JSC::JSPromise::status(v4, *(JSC::VM **)(**(_QWORD **)(v2 + 32) + 56)) != 1)
  {
    v15 = a1[2];
    v31 = 0;
    v16 = 16;
LABEL_21:
    WebCore::DeferredPromise::reject(v15, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v31, 0);
    goto LABEL_22;
  }
  v5 = a1[1];
  v6 = **(_QWORD **)(v5 + 24);
  if ((v6 & 0xFFFE000000000002) != 0)
  {
    v7 = 0;
  }
  else if (*(_BYTE *)(v6 + 5) == 68)
  {
    v7 = **(JSC::JSPromise ***)(v5 + 24);
  }
  else
  {
    v7 = 0;
  }
  v8 = JSC::JSPromise::result(v7, *(JSC::VM **)(**(_QWORD **)(v5 + 32) + 56));
  if (!v8)
  {
    v15 = a1[2];
    v31 = 0;
    v16 = 33;
    goto LABEL_21;
  }
  v9 = (unsigned __int8 *)v8;
  v31 = 0;
  v10 = *(_QWORD *)(a1[1] + 32);
  if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
    v11 = 0;
  else
    v11 = *(JSC::JSGlobalObject **)v10;
  if ((v8 & 0xFFFE000000000002) != 0)
    goto LABEL_15;
  JSC::JSCell::getString((JSC::JSCell *)v8, v11, (WTF::String *)&v31);
  if (v31)
  {
    v18 = a1[2];
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
        v21 = (WebCore::ClipboardItem *)(v20 - 96);
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    WebCore::ClipboardItem::blobFromString(v21, (const WTF::String *)(a1 + 3), (uint64_t *)&v30);
    v22 = v30;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::Blob>>(v18, (uint64_t)v30);
    if (*((_DWORD *)v22 + 4) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
    else
      --*((_DWORD *)v22 + 4);
    goto LABEL_22;
  }
  if (v9[5] <= 0x16u)
    goto LABEL_15;
  JSC::JSCell::getObject((JSC::JSCell *)v9);
  Object = JSC::JSCell::getObject((JSC::JSCell *)v9);
  if ((Object & 0xFFFE000000000002) != 0)
    goto LABEL_15;
  v24 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v25 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v26 = (char **)(16 * v24);
  if ((_DWORD)v24)
    v27 = v26 == &WebCore::JSBlob::s_info;
  else
    v27 = 1;
  if (!v27)
  {
    do
    {
      v26 = (char **)v26[2];
      v25 = v26 != 0;
    }
    while (v26 != &WebCore::JSBlob::s_info && v26 != 0);
  }
  if (!v25)
  {
LABEL_15:
    v12 = a1[2];
  }
  else
  {
    v29 = *(_QWORD *)(Object + 24);
    v12 = a1[2];
    if (v29)
    {
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::Blob>>(v12, v29);
      goto LABEL_22;
    }
  }
  v30 = 0;
  WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v30, 0);
  v14 = v30;
  v30 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_22:
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS_9ClipboardEON3WTF17CompletionHandlerIFvNSt3__18optionalINS_20PasteboardCustomDataEEEEEEENK3__0clIKNS3_12KeyValuePairINS3_6StringENS3_3RefINS_10DOMPromiseENS3_12RawPtrTraitsISH_EENS3_21DefaultRefDerefTraitsISH_EEEEEEEEDaRT_ENUlvE0_D1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WebCore::ClipboardItem *v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v15 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v15)
      {
        v18 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v15));
        v8 = v18;
      }
      v16 = *(WTF **)(v8 + 16);
      if (v16)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v17 = v8;
        WTF::fastFree(v16, a2);
        v8 = v17;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = (WebCore::ClipboardItem *)a1[1];
  a1[1] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::ClipboardItem::~ClipboardItem(v11, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEONS_17CompletionHandlerIFvNSt3__18optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS_12KeyValuePairINS_6StringENS_3RefINS2_10DOMPromiseENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  WebCore::ClipboardItem *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E3353100;
  v3 = (WebCore::ClipboardItem *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ClipboardItem::~ClipboardItem(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEONS_17CompletionHandlerIFvNSt3__18optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS_12KeyValuePairINS_6StringENS_3RefINS2_10DOMPromiseENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  WebCore::ClipboardItem *v3;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3353100;
  v3 = (WebCore::ClipboardItem *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ClipboardItem::~ClipboardItem(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEONS_17CompletionHandlerIFvNSt3__18optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS_12KeyValuePairINS_6StringENS_3RefINS2_10DOMPromiseENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE_vJEE4callEv(uint64_t a1, _QWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  int v4;

  result = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v4;
  if (!v4)
    return WebCore::ClipboardItemBindingsDataSource::invokeCompletionHandler(result, a2, a3);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = &off_1E3353128;
  _ZZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS_9ClipboardEON3WTF17CompletionHandlerIFvNSt3__18optionalINS_20PasteboardCustomDataEEEEEEENK3__0clIKNS3_12KeyValuePairINS3_6StringENS3_3RefINS_10DOMPromiseENS3_12RawPtrTraitsISH_EENS3_21DefaultRefDerefTraitsISH_EEEEEEEEDaRT_ENUlvE0_D1Ev(a1 + 1, a2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEED0Ev(_QWORD *a1, void *a2)
{
  *a1 = &off_1E3353128;
  _ZZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS_9ClipboardEON3WTF17CompletionHandlerIFvNSt3__18optionalINS_20PasteboardCustomDataEEEEEEENK3__0clIKNS3_12KeyValuePairINS3_6StringENS3_3RefINS_10DOMPromiseENS3_12RawPtrTraitsISH_EENS3_21DefaultRefDerefTraitsISH_EEEEEEEEDaRT_ENUlvE0_D1Ev(a1 + 1, a2);
  JUMPOUT(0x19AEA7644);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEE7__cloneEv(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new(0x38uLL);
  v3 = a1[1];
  v4 = (_DWORD *)a1[2];
  *result = &off_1E3353128;
  result[1] = v3;
  ++*v4;
  result[2] = v4;
  v5 = (unsigned int *)a1[3];
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v8 = a1[4];
  v7 = (_DWORD *)a1[5];
  ++*(_DWORD *)(v8 + 16);
  result[3] = v5;
  result[4] = v8;
  if (v7)
    *v7 += 2;
  result[5] = v7;
  v9 = (unsigned int *)a1[6];
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  result[6] = v9;
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEE7__cloneEPNS0_6__baseISX_EE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;

  v2 = result[1];
  *a2 = &off_1E3353128;
  a2[1] = v2;
  v3 = (_DWORD *)result[2];
  ++*v3;
  a2[2] = v3;
  v4 = (unsigned int *)result[3];
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  a2[3] = v4;
  v6 = result[4];
  ++*(_DWORD *)(v6 + 16);
  a2[4] = v6;
  v7 = (_DWORD *)result[5];
  if (v7)
    *v7 += 2;
  a2[5] = v7;
  v8 = (unsigned int *)result[6];
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  a2[6] = v8;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEE7destroyEv(uint64_t a1, void *a2)
{
  return _ZZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS_9ClipboardEON3WTF17CompletionHandlerIFvNSt3__18optionalINS_20PasteboardCustomDataEEEEEEENK3__0clIKNS3_12KeyValuePairINS3_6StringENS3_3RefINS_10DOMPromiseENS3_12RawPtrTraitsISH_EENS3_21DefaultRefDerefTraitsISH_EEEEEEEEDaRT_ENUlvE0_D1Ev((_QWORD *)(a1 + 8), a2);
}

void _ZNSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEE18destroy_deallocateEv(_QWORD *a1, void *a2)
{
  _ZZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS_9ClipboardEON3WTF17CompletionHandlerIFvNSt3__18optionalINS_20PasteboardCustomDataEEEEEEENK3__0clIKNS3_12KeyValuePairINS3_6StringENS3_3RefINS_10DOMPromiseENS3_12RawPtrTraitsISH_EENS3_21DefaultRefDerefTraitsISH_EEEEEEEEDaRT_ENUlvE0_D1Ev(a1 + 1, a2);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZZN7WebCore31ClipboardItemBindingsDataSource21collectDataForWritingERNS2_9ClipboardEON3WTF17CompletionHandlerIFvNS_8optionalINS2_20PasteboardCustomDataEEEEEEENK3__0clIKNS6_12KeyValuePairINS6_6StringENS6_3RefINS2_10DOMPromiseENS6_12RawPtrTraitsISJ_EENS6_21DefaultRefDerefTraitsISJ_EEEEEEEEDaRT_EUlvE0_NS_9allocatorISU_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::JSPromise *v6;
  JSC::JSGlobalObject *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Object;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::ScriptExecutionContext *v32;
  bmalloc::api *v33;
  void *v34;
  const WTF::StringImpl *v35;
  int v36;
  const WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  __int128 v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;

  v1 = *(_QWORD *)(result + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      ++*(_DWORD *)(v2 + 16);
      v4 = *(_QWORD *)(result + 32);
      v5 = **(_QWORD **)(v4 + 24);
      if ((v5 & 0xFFFE000000000002) != 0)
      {
        v6 = 0;
      }
      else if (*(_BYTE *)(v5 + 5) == 68)
      {
        v6 = **(JSC::JSPromise ***)(v4 + 24);
      }
      else
      {
        v6 = 0;
      }
      result = JSC::JSPromise::result(v6, *(JSC::VM **)(**(_QWORD **)(v4 + 32) + 56));
      if (!result || (v9 = *(_QWORD *)(v3 + 24)) == 0 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
      {
        v19 = *(_QWORD *)(v2 + 56);
        *(_QWORD *)(v2 + 56) = 0;
        if (v19)
        {
          WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded((WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *)v2, (uint64_t)v7, v8);
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        goto LABEL_57;
      }
      ++*(_DWORD *)(v10 + 24);
      v11 = *(_QWORD *)(v10 + 72);
      if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0 || (v13 = *(_QWORD *)(v12 + 8)) == 0 || !*(_QWORD *)(v13 + 8))
      {
        v20 = *(_QWORD *)(v2 + 56);
        *(_QWORD *)(v2 + 56) = 0;
        if (v20)
        {
          WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded((WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *)v2, (uint64_t)v7, v8);
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        goto LABEL_55;
      }
      v14 = (unsigned __int8 *)result;
      v50 = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 32);
      if (!v15 || (*(_BYTE *)(v15 + 8) & 3) != 0)
        v7 = 0;
      else
        v7 = *(JSC::JSGlobalObject **)v15;
      if ((result & 0xFFFE000000000002) != 0)
        goto LABEL_49;
      JSC::JSCell::getString((JSC::JSCell *)result, v7, (WTF::String *)&v50);
      v16 = v50;
      if (v50)
      {
        *(_DWORD *)v50 += 2;
        v17 = *(unsigned int *)(v2 + 40);
        if ((_DWORD)v17 != -1)
        {
          v7 = (JSC::JSGlobalObject *)(v2 + 32);
          if (!(_DWORD)v17)
          {
            v18 = *(WTF::StringImpl **)v7;
            *(_QWORD *)v7 = v16;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v7);
              else
                *(_DWORD *)v18 -= 2;
            }
            goto LABEL_49;
          }
          ((void (*)(WTF::StringImpl **, JSC::JSGlobalObject *))off_1E3353058[v17])(&v51, v7);
        }
        *(_QWORD *)(v2 + 32) = v16;
        *(_DWORD *)(v2 + 40) = 0;
      }
      else if (v14[5] > 0x16u)
      {
        JSC::JSCell::getObject((JSC::JSCell *)v14);
        Object = JSC::JSCell::getObject((JSC::JSCell *)v14);
        if ((Object & 0xFFFE000000000002) == 0)
        {
          v22 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
          v23 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
          v24 = (char **)(16 * v22);
          if ((_DWORD)v22)
            v25 = v24 == &WebCore::JSBlob::s_info;
          else
            v25 = 1;
          if (!v25)
          {
            do
            {
              v24 = (char **)v24[2];
              v23 = v24 != 0;
            }
            while (v24 != &WebCore::JSBlob::s_info && v24 != 0);
          }
          if (v23)
          {
            v27 = *(_QWORD *)(Object + 24);
            if (v27)
            {
              ++*(_DWORD *)(v27 + 16);
              v28 = *(_QWORD *)(v10 + 72);
              if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
              {
                v31 = *(_QWORD *)(v30 + 8);
                if (v31)
                  v32 = (WebCore::ScriptExecutionContext *)(v31 - 96);
                else
                  v32 = 0;
              }
              else
              {
                v32 = 0;
              }
              if ((MEMORY[0x19AEA53F4](*(_QWORD *)(v2 + 24), "text/uri-list", 13) & 1) != 0)
              {
                v36 = 3;
              }
              else
              {
                v36 = 3;
                if ((WTF::equal(*(WTF **)(v2 + 24), (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v35) & 1) == 0)
                {
                  if (WTF::equal(*(WTF **)(v2 + 24), (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v37))v36 = 3;
                  else
                    v36 = 0;
                }
              }
              v38 = WTF::fastMalloc((WTF *)0xD0);
              *(_QWORD *)v38 = &off_1E33AEE88;
              *(_QWORD *)(v38 + 8) = 0;
              *(_DWORD *)(v38 + 16) = 0;
              *(_DWORD *)(v38 + 20) = v36;
              v39 = *(_QWORD *)(v2 + 8);
              if (v39)
                goto LABEL_94;
              v39 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v39 = 1;
              *(_QWORD *)(v39 + 8) = v2;
              v41 = *(unsigned int **)(v2 + 8);
              *(_QWORD *)(v2 + 8) = v39;
              if (!v41)
                goto LABEL_94;
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                atomic_store(1u, v41);
                WTF::fastFree((WTF *)v41, v40);
              }
              v39 = *(_QWORD *)(v2 + 8);
              if (v39)
              {
LABEL_94:
                do
                  v44 = __ldaxr((unsigned int *)v39);
                while (__stlxr(v44 + 1, (unsigned int *)v39));
              }
              *(_QWORD *)(v38 + 72) = 0;
              *(_QWORD *)(v38 + 24) = v39;
              *(_QWORD *)(v38 + 32) = &off_1E31F4A18;
              *(_QWORD *)(v38 + 40) = 0;
              *(_QWORD *)(v38 + 48) = 0;
              *(_QWORD *)(v38 + 64) = 0;
              WTF::URL::invalidate((WTF::URL *)(v38 + 72));
              *(_BYTE *)(v38 + 160) = 0;
              *(_OWORD *)(v38 + 144) = 0u;
              *(_OWORD *)(v38 + 128) = 0u;
              *(_OWORD *)(v38 + 112) = 0u;
              v45 = (_DWORD *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *v45 += 2;
              *(_QWORD *)(v38 + 176) = 0;
              *(_QWORD *)(v38 + 184) = 0;
              *(_QWORD *)(v38 + 168) = v45;
              *(_BYTE *)(v38 + 192) = 0;
              *(_QWORD *)(v38 + 196) = 0;
              *(_WORD *)(v38 + 204) = 0;
              v46 = *(_QWORD *)(v2 + 48);
              *(_QWORD *)(v2 + 48) = v38;
              if (v46)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v46 + 64))(v46);
                v38 = *(_QWORD *)(v2 + 48);
              }
              v47 = *(WTF::StringImpl **)(v27 + 80);
              if (v47)
                *(_DWORD *)v47 += 2;
              v51 = v47;
              v48 = *(_OWORD *)(v27 + 104);
              v52 = *(_OWORD *)(v27 + 88);
              v53 = v48;
              WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v38, v32, (const WTF::URL *)&v51);
              v49 = v51;
              v51 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v7);
                else
                  *(_DWORD *)v49 -= 2;
              }
              if (*(_DWORD *)(v27 + 16) != 1)
              {
                --*(_DWORD *)(v27 + 16);
LABEL_52:
                result = (uint64_t)v50;
                v50 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
                  else
                    *(_DWORD *)result -= 2;
                }
LABEL_55:
                if (*(_DWORD *)(v10 + 24) == 1)
                {
                  WebCore::Clipboard::~Clipboard((WebCore::Clipboard *)v10, v7);
                  result = bmalloc::api::isoDeallocate(v33, v34);
                }
                else
                {
                  --*(_DWORD *)(v10 + 24);
                }
LABEL_57:
                if (*(_DWORD *)(v2 + 16) == 1)
                  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
                --*(_DWORD *)(v2 + 16);
                return result;
              }
LABEL_51:
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              goto LABEL_52;
            }
          }
        }
      }
LABEL_49:
      v27 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = 0;
      if (!v27)
        goto LABEL_52;
      WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader::sanitizeDataIfNeeded((WebCore::ClipboardItemBindingsDataSource::ClipboardItemTypeLoader *)v2, (uint64_t)v7, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      goto LABEL_51;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::DOMAudioSession>(WebCore::DOMAudioSession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E3353180;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v6 + 24));
      WTF::fastFree(v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v4 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::DOMAudioSession>(WebCore::DOMAudioSession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E3353180;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v7 + 24));
      WTF::fastFree(v4, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::AudioSession *)(v5 + 24));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::DOMAudioSession>(WebCore::DOMAudioSession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMAudioSession::scheduleStateChangeEvent(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::AudioSessionIOS *v4;
  WebCore::AudioSessionIOS *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        *(_BYTE *)(v1 + 72) = 0;
        v4 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)result);
        if (*((_BYTE *)v4 + 42))
        {
          result = 2;
        }
        else
        {
          v5 = WebCore::AudioSession::sharedSession(v4);
          result = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v5 + 224))(v5);
        }
        if (!*(_BYTE *)(v1 + 74) || *(unsigned __int8 *)(v1 + 73) != (_DWORD)result)
        {
          *(_WORD *)(v1 + 73) = result | 0x100;
          v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
            v7 = WebCore::threadGlobalDataSlow((WebCore *)result);
          v8 = (WebCore::EventTarget *)(v1 + 32);
          v9 = *(_QWORD *)(v7 + 40);
          if (!v9)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
            v9 = *(_QWORD *)(v7 + 40);
          }
          v10 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
          *(_QWORD *)v10 = off_1E33A4B48;
          *(_QWORD *)(v10 + 8) = 0;
          v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
          v13 = *(_QWORD *)(v9 + 1984) != 0;
          *(_DWORD *)(v10 + 16) = 1;
          *(_DWORD *)(v10 + 20) = v12 | v13;
          v14 = *(_DWORD **)(v9 + 1984);
          if (v14)
            *v14 += 2;
          *(_QWORD *)(v10 + 24) = v14;
          *(_QWORD *)(v10 + 32) = 0;
          *(_QWORD *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 56) = v11;
          *(_QWORD *)(v10 + 64) = 0;
          result = (uint64_t)WebCore::EventTarget::dispatchEvent(v8, (WebCore::Event *)v10);
          if (*(_DWORD *)(v10 + 16) == 1)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          else
            --*(_DWORD *)(v10 + 16);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::FetchBody::FetchBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33531C0[v4])(&v13, a1, a2);
    *(_DWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v11;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS17_LNS0_6_TraitE1EEEEEvRS18_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(WTF *a1, uint64_t *a2)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];

  v2 = *(_QWORD ***)a1;
  v3 = *a2;
  result = WTF::isMainThread(a1);
  if (!(_DWORD)result)
  {
    v18 = 0;
    v6 = bmalloc::api::isoAllocate();
    *(_DWORD *)v6 = 1;
    *(_BYTE *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 56) = 0;
    *(_BYTE *)(v6 + 32) = *(_BYTE *)(v3 + 32);
    v19[0] = 0;
    v19[1] = 0;
    _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore15FormDataElementELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(v19, (uint64_t *)(v3 + 8));
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v6 + 8, v19);
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v7);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E3353228;
    v8[1] = v6;
    v8[2] = &v18;
    v19[0] = v8;
    WTF::callOnMainThreadAndWait();
    result = v19[0];
    v19[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v5 = v18;
    goto LABEL_16;
  }
  if (*(_BYTE *)(v3 + 64))
  {
    v5 = *(_QWORD **)(v3 + 56);
LABEL_16:
    **v2 = v5;
    return result;
  }
  v9 = *(unsigned int *)(v3 + 20);
  if (!(_DWORD)v9)
  {
    v5 = 0;
LABEL_15:
    *(_QWORD *)(v3 + 56) = v5;
    *(_BYTE *)(v3 + 64) = 1;
    goto LABEL_16;
  }
  v5 = 0;
  v10 = *(_QWORD *)(v3 + 8);
  v11 = 48 * v9;
  while (1)
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &dword_1E341D9C8;
    v17 = v12;
    v18 = &v17;
    v13 = *(unsigned int *)(v10 + 40);
    if ((_DWORD)v13 == -1)
      break;
    v19[0] = &v18;
    v14 = ((uint64_t (*)(_QWORD *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                      + v13))(v19, v10);
    result = (uint64_t)v17;
    v17 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v5 = (_QWORD *)((char *)v5 + v14);
    v10 += 48;
    v11 -= 48;
    if (!v11)
      goto LABEL_15;
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(v15, v16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::CacheStorageConnection::computeRealBodySize(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = *(_QWORD *)(*(_QWORD *)a2 + 48);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::formDataSize(WebCore::FormData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::FormData *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::FormData *)a1[1];
  *a1 = &off_1E3353228;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormData::~FormData(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::formDataSize(WebCore::FormData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::FormData *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::FormData *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3353228;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormData::~FormData(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::formDataSize(WebCore::FormData const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WebCore::DeviceMotionClientIOS *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 64))
  {
    v3 = *(_QWORD *)(v2 + 56);
LABEL_12:
    **(_QWORD **)(a1 + 16) = v3;
    return;
  }
  v4 = *(unsigned int *)(v2 + 20);
  if (!(_DWORD)v4)
  {
    v3 = 0;
LABEL_11:
    *(_QWORD *)(v2 + 56) = v3;
    *(_BYTE *)(v2 + 64) = 1;
    goto LABEL_12;
  }
  v3 = 0;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = 48 * v4;
  while (1)
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &dword_1E341D9C8;
    v13 = v7;
    v14 = &v13;
    v8 = *(unsigned int *)(v5 + 40);
    if ((_DWORD)v8 == -1)
      break;
    v15 = &v14;
    v9 = ((uint64_t (*)(_QWORD **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                      + v8))(&v15, v5);
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v3 += v9;
    v5 += 48;
    v6 -= 48;
    if (!v6)
      goto LABEL_11;
  }
  v11 = (WebCore::DeviceMotionClientIOS *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS(v11, v12);
}

void `non-virtual thunk to'WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS(WebCore::DeviceMotionClientIOS *this, void *a2)
{
  WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS((WebCore::DeviceMotionClientIOS *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS((WebCore::DeviceMotionClientIOS *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::DeviceMotionClientIOS::startUpdating(WebCore::DeviceMotionClientIOS *this)
{
  uint64_t v2;
  id v4;

  *((_BYTE *)this + 64) = 1;
  v2 = *((_QWORD *)this + 7);
  if (v2)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 32))(v2, (char *)this + 16);
  v4 = (id)*((_QWORD *)this + 4);
  if (!v4)
  {
    v4 = +[WebCoreMotionManager sharedManager](WebCoreMotionManager, "sharedManager");
    *((_QWORD *)this + 4) = v4;
  }
  return objc_msgSend(v4, "addMotionClient:", (char *)this + 16);
}

uint64_t WebCore::DeviceMotionClientIOS::lastMotion(WebCore::DeviceMotionClientIOS *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::DeviceMotionClientIOS::motionChanged(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  WTF **v29;

  if (*(_BYTE *)(result + 64))
  {
    v24 = result;
    v25 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v25 = 1;
    *(double *)(v25 + 8) = a11;
    *(_QWORD *)(v25 + 16) = 1;
    *(double *)(v25 + 24) = a12;
    *(_QWORD *)(v25 + 32) = 1;
    *(double *)(v25 + 40) = a13;
    *(_QWORD *)(v25 + 48) = 1;
    v26 = WTF::fastMalloc((WTF *)0x38);
    v27 = 0;
    *(_DWORD *)v26 = 1;
    *(double *)(v26 + 8) = a8;
    *(_QWORD *)(v26 + 16) = 1;
    *(double *)(v26 + 24) = a9;
    *(_QWORD *)(v26 + 32) = 1;
    *(double *)(v26 + 40) = a10;
    *(_QWORD *)(v26 + 48) = 1;
    if (a3 && a5 && a7)
    {
      v27 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = a2;
      *(_QWORD *)(v27 + 16) = 1;
      *(_QWORD *)(v27 + 24) = a4;
      *(_QWORD *)(v27 + 32) = 1;
      *(_QWORD *)(v27 + 40) = a6;
      *(_QWORD *)(v27 + 48) = 1;
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)v28 = 1;
    v28[1] = v26;
    v28[2] = v25;
    v28[3] = v27;
    *((_OWORD *)v28 + 2) = xmmword_1968DDAB0;
    v29 = *(WTF ***)(v24 + 48);
    *(_QWORD *)(v24 + 48) = v28;
    if (v29)
    {
      WTF::RefCounted<WebCore::DeviceMotionData>::deref(v29, v28);
      v28 = *(_QWORD **)(v24 + 48);
    }
    return WebCore::DeviceMotionController::didChangeDeviceMotion(*(WebCore::DeviceMotionController **)(v24 + 40), (WebCore::DeviceMotionData *)v28);
  }
  return result;
}

void sub_1952D586C(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;
  WTF *v3;

  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, a2);
  else
    --*(_DWORD *)v3;
  if (*(_DWORD *)v2 == 1)
    WTF::fastFree(v2, a2);
  else
    --*(_DWORD *)v2;
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::DeviceMotionClientIOS::motionChanged(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  return WebCore::DeviceMotionClientIOS::motionChanged(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void `non-virtual thunk to'WebCore::DeviceOrientationClientIOS::~DeviceOrientationClientIOS(WebCore::DeviceOrientationClientIOS *this, void *a2)
{
  WebCore::DeviceOrientationClientIOS::~DeviceOrientationClientIOS((WebCore::DeviceOrientationClientIOS *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::DeviceOrientationClientIOS::~DeviceOrientationClientIOS((WebCore::DeviceOrientationClientIOS *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::DeviceOrientationClientIOS::startUpdating(WebCore::DeviceOrientationClientIOS *this)
{
  uint64_t v2;
  id v4;

  *((_BYTE *)this + 64) = 1;
  v2 = *((_QWORD *)this + 7);
  if (v2)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, (char *)this + 16);
  v4 = (id)*((_QWORD *)this + 4);
  if (!v4)
  {
    v4 = +[WebCoreMotionManager sharedManager](WebCoreMotionManager, "sharedManager");
    *((_QWORD *)this + 4) = v4;
  }
  return objc_msgSend(v4, "addOrientationClient:", (char *)this + 16);
}

uint64_t WebCore::DeviceOrientationClientIOS::lastOrientation(WebCore::DeviceOrientationClientIOS *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::DeviceOrientationClientIOS::orientationChanged(uint64_t this, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11;
  double *v12;
  WTF *v13;

  if (*(_BYTE *)(this + 64))
  {
    v11 = this;
    v12 = (double *)WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v12 = 1;
    v12[1] = a2;
    *((_QWORD *)v12 + 2) = 1;
    v12[3] = a3;
    *((_QWORD *)v12 + 4) = 1;
    v12[5] = a4;
    *((_QWORD *)v12 + 6) = 1;
    v12[7] = a5;
    *((_QWORD *)v12 + 8) = 1;
    v12[9] = a6;
    *((_QWORD *)v12 + 10) = 1;
    v13 = *(WTF **)(v11 + 48);
    *(_QWORD *)(v11 + 48) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        v12 = *(double **)(v11 + 48);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
    return WebCore::DeviceOrientationController::didChangeDeviceOrientation(*(WebCore **)(v11 + 40), v12);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DeviceOrientationClientIOS::orientationChanged(uint64_t this, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11;
  double *v12;
  WTF *v13;

  if (*(_BYTE *)(this + 48))
  {
    v11 = this;
    v12 = (double *)WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v12 = 1;
    v12[1] = a2;
    *((_QWORD *)v12 + 2) = 1;
    v12[3] = a3;
    *((_QWORD *)v12 + 4) = 1;
    v12[5] = a4;
    *((_QWORD *)v12 + 6) = 1;
    v12[7] = a5;
    *((_QWORD *)v12 + 8) = 1;
    v12[9] = a6;
    *((_QWORD *)v12 + 10) = 1;
    v13 = *(WTF **)(v11 + 32);
    *(_QWORD *)(v11 + 32) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        v12 = *(double **)(v11 + 32);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
    return WebCore::DeviceOrientationController::didChangeDeviceOrientation(*(WebCore **)(v11 + 24), v12);
  }
  return this;
}

void WebCore::scaleDragImage(CGImageRef *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  double v7;
  PAL *Height;
  double v9;
  void *v10;
  CGImageRef v11;
  const void *v12;
  _QWORD v13[6];
  __int128 v14;
  double v15;
  double v16;
  CFTypeRef cf;

  v7 = (float)(a3 * (float)CGImageGetWidth(*a1));
  Height = (PAL *)CGImageGetHeight(*a1);
  v9 = (float)(a4 * (float)(unint64_t)Height);
  v14 = *MEMORY[0x1E0C9D538];
  v10 = (void *)objc_msgSend(objc_alloc((Class)PAL::getUIGraphicsImageRendererClass[0](Height)), "initWithSize:", v7, v9);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3321888768;
  v13[2] = ___ZN7WebCore14scaleDragImageEN3WTF9RetainPtrIP7CGImageEENS_9FloatSizeE_block_invoke;
  v13[3] = &__block_descriptor_88_e8_80c31_ZTSN3WTF9RetainPtrIP7CGImageEE_e40_v16__0__UIGraphicsImageRendererContext_8l;
  *(double *)&v13[4] = v7;
  *(double *)&v13[5] = v9;
  v15 = v7;
  v16 = v9;
  v11 = *a1;
  cf = v11;
  if (v11)
    CFRetain(v11);
  v12 = (const void *)objc_msgSend((id)objc_msgSend(v10, "imageWithActions:", v13), "CGImage");
  *a2 = v12;
  if (v12)
    CFRetain(v12);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
}

void sub_1952D5C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  const void *v20;

  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore14scaleDragImageEN3WTF9RetainPtrIP7CGImageEENS_9FloatSizeE_block_invoke(uint64_t a1, void *a2)
{
  CGContext *v3;

  v3 = (CGContext *)objc_msgSend(a2, "CGContext");
  CGContextTranslateCTM(v3, 0.0, *(CGFloat *)(a1 + 40));
  CGContextScaleCTM(v3, 1.0, -1.0);
  CGContextDrawImage(v3, *(CGRect *)(a1 + 48), *(CGImageRef *)(a1 + 80));
}

CFTypeRef __copy_helper_block_e8_80c31_ZTSN3WTF9RetainPtrIP7CGImageEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_80c31_ZTSN3WTF9RetainPtrIP7CGImageEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::createDragImageFromImage(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  float v6;
  PAL *v7;
  float v8;
  float v9;
  double v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  float v18;
  void *v19;
  const void *v20;
  _QWORD v21[7];
  float v22;
  char v23;

  if (!a1
    || (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0) == 0.0
    || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0), v6 == 0.0))
  {
    *a3 = 0;
  }
  else
  {
    v8 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
    v10 = v8;
    v11 = v9;
    v12 = 1.0;
    if (v8 * v9 <= 614400.0)
    {
      v17 = v8;
    }
    else
    {
      v13 = v8 / v9;
      v14 = sqrtf(v13 * 614400.0);
      v15 = v14 / v13;
      v16 = roundf(v14);
      v11 = 2147483650.0;
      v17 = 2147483650.0;
      if (v16 < 2147500000.0)
      {
        if (v16 <= -2147500000.0)
          v17 = -2147483650.0;
        else
          v17 = (double)(int)v16;
      }
      v18 = roundf(v15);
      if (v18 < 2147500000.0)
      {
        if (v18 <= -2147500000.0)
          v11 = -2147483650.0;
        else
          v11 = (double)(int)v18;
      }
      v12 = v17 / v10;
    }
    v19 = (void *)objc_msgSend(objc_alloc((Class)PAL::getUIGraphicsImageRendererClass[0](v7)), "initWithSize:", v17, v11);
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ___ZN7WebCore24createDragImageFromImageEPNS_5ImageENS_16ImageOrientationE_block_invoke;
    v21[3] = &__block_descriptor_61_e40_v16__0__UIGraphicsImageRendererContext_8l;
    *(double *)&v21[4] = v17;
    *(double *)&v21[5] = v11;
    v22 = v12;
    v21[6] = a1;
    v23 = a2;
    v20 = (const void *)objc_msgSend((id)objc_msgSend(v19, "imageWithActions:", v21), "CGImage");
    *a3 = v20;
    if (v20)
      CFRetain(v20);
    if (v19)
      CFRelease(v19);
  }
}

void sub_1952D5EA4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore24createDragImageFromImageEPNS_5ImageENS_16ImageOrientationE_block_invoke(uint64_t a1, void *a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  int v8;
  float v9;
  int v10;
  void *v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  float v16;
  int v17;
  _QWORD v18[90];
  CGContextRef c;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextCG::GraphicsContextCG((uint64_t)v18, (CGContext *)objc_msgSend(a2, "CGContext"), 0, 0);
  v3 = *(double *)(a1 + 40);
  v20 |= 8u;
  CGContextTranslateCTM(c, 0.0, v3);
  v4 = *(float *)(a1 + 56);
  v20 = v20 & 0xF3 | 8;
  CGContextScaleCTM(c, v4, (float)-v4);
  v20 &= ~4u;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = ((unint64_t)(*(_BYTE *)(a1 + 60) & 0xF) << 12) | 0x221;
  v7 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, 0);
  v15 = 0;
  v16 = v7;
  v17 = v8;
  v9 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, 0);
  v12 = 0;
  v13 = v9;
  v14 = v10;
  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t *, unint64_t))(v18[0] + 360))(v18, v5, &v15, &v12, v6);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v18, v11);
}

WTF::StringImpl *WebCore::createDragImageForLink@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  const __CFString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  const WebCore::FontCascade *v11;
  WTF::StringImpl *v12;
  float v13;
  const WebCore::FontCascade *v14;
  PAL *v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  const void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  WebCore::Node *v30;
  WTF::StringImpl *result;
  WebCore::TextIndicator *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  void *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF *v44;
  WebCore::TextIndicator *v45;
  const void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  unsigned int *v58;
  unsigned int v59;
  void *v60;
  void *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  WebCore::TextIndicator *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, void *);
  void *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79[2];
  WebCore::Node *v80[2];
  __int128 v81;
  WTF *v82;
  int v83;
  int v84;
  int v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  int v90;

  if ((_MergedGlobals_128 & 1) == 0)
  {
    WebCore::cascadeForSystemFont((WebCore *)v79, 16.0);
    WebCore::FontCascade::FontCascade((WebCore::FontCascade *)&unk_1ECE81970, (const WebCore::FontCascade *)v79);
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v79, v60);
    _MergedGlobals_128 = 1;
  }
  if ((byte_1ECE81969 & 1) == 0)
  {
    WebCore::cascadeForSystemFont((WebCore *)v79, 14.0);
    WebCore::FontCascade::FontCascade((WebCore::FontCascade *)&unk_1ECE81A98, (const WebCore::FontCascade *)v79);
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v79, v61);
    byte_1ECE81969 = 1;
  }
  WTF::String::trim();
  v6 = (const __CFString *)objc_msgSend((id)WTF::URL::operator NSURL *(), "absoluteString");
  if (!v78 || !*((_DWORD *)v78 + 1))
  {
    MEMORY[0x19AEA5508](v79, v6);
    v8 = v78;
    v78 = v79[0];
    v79[0] = 0;
    if (!v8)
      goto LABEL_9;
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 != 2)
      goto LABEL_8;
    WTF::StringImpl::destroy(v8, v7);
    v8 = v79[0];
    v79[0] = 0;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_8:
        *(_DWORD *)v8 = v9;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy(v8, v50);
    }
LABEL_9:
    if (*MEMORY[0x1E0CBF738])
      v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E3487BC0;
  }
  WebCore::truncateString((uint64_t)&v77, (uint64_t)&v78);
  MEMORY[0x19AEA5508](v79, v6);
  WebCore::truncateString((uint64_t)&v76, (uint64_t)v79);
  v12 = v79[0];
  v79[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = WebCore::StringTruncator::width((WebCore::StringTruncator *)&v77, (const WTF::String *)&unk_1ECE81970, v11);
  v16 = WebCore::StringTruncator::width((WebCore::StringTruncator *)&v76, (const WTF::String *)&unk_1ECE81A98, v14);
  if (v13 >= v16)
    v16 = v13;
  v17 = v16;
  if (!v76)
  {
    v18 = v17 + 20.0;
LABEL_18:
    v19 = 42.0;
    goto LABEL_19;
  }
  v18 = v17 + 20.0;
  if (!*((_DWORD *)v76 + 1))
    goto LABEL_18;
  v19 = 64.0;
LABEL_19:
  v20 = v19;
  v21 = (void *)objc_msgSend(objc_alloc((Class)PAL::getUIGraphicsImageRendererClass[0](v15)), "initWithSize:", v18, v19);
  v22 = v21;
  v66 = MEMORY[0x1E0C809B0];
  v67 = 3321888768;
  v68 = ___ZN7WebCore22createDragImageForLinkERNS_7ElementERN3WTF3URLERKNS2_6StringERNS_17TextIndicatorDataEf_block_invoke;
  v69 = &__block_descriptor_80_e8_64c17_ZTSN3WTF6StringE72c17_ZTSN3WTF6StringE_e40_v16__0__UIGraphicsImageRendererContext_8l;
  v70 = 0;
  v71 = 0;
  v72 = v18;
  v73 = v20;
  v23 = v77;
  if (v77)
    *(_DWORD *)v77 += 2;
  v74 = v23;
  v24 = v76;
  if (v76)
    *(_DWORD *)v76 += 2;
  v75 = v24;
  v25 = (void *)objc_msgSend(v21, "imageWithActions:", &v66);
  *(_DWORD *)(a1 + 24) += 4;
  v26 = *(_WORD *)(a1 + 28);
  if ((v26 & 1) != 0)
  {
    v27 = *(_QWORD *)(a1 + 80);
    if (v27)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
  }
  else
  {
    LODWORD(v27) = 0;
    if ((v26 & 4) != 0)
    {
      v28 = *(_QWORD *)(a1 + 80);
      if (v28)
      {
        LODWORD(v27) = 0;
        do
        {
          LODWORD(v27) = v27 + 1;
          v28 = *(_QWORD *)(v28 + 56);
        }
        while (v28);
      }
    }
  }
  v79[0] = (WTF::StringImpl *)a1;
  LODWORD(v79[1]) = 0;
  v80[0] = (WebCore::Node *)a1;
  LODWORD(v80[1]) = v27;
  WebCore::TextIndicator::createWithRange((uint64_t)v79, (void *)0x8B1, 0, (uint64_t *)&v65, 0.0, 0.0);
  v30 = v80[0];
  v80[0] = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v29);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  result = v79[0];
  v79[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(result, v29);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v32 = v65;
  if (v65)
  {
    v33 = *(_OWORD *)((char *)v65 + 8);
    v34 = *(_OWORD *)((char *)v65 + 40);
    *(_OWORD *)v80 = *(_OWORD *)((char *)v65 + 24);
    v81 = v34;
    *(_OWORD *)v79 = v33;
    v35 = *((unsigned int *)v65 + 17);
    v82 = 0;
    v83 = 0;
    v84 = v35;
    if ((_DWORD)v35)
    {
      if (v35 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v53 = (WTF *)WTF::fastMalloc((WTF *)(16 * v35));
      v83 = v35;
      v82 = v53;
      v54 = *((unsigned int *)v32 + 17);
      if ((_DWORD)v54)
      {
        v55 = (__int128 *)*((_QWORD *)v32 + 7);
        v56 = 16 * v54;
        do
        {
          v57 = *v55++;
          *(_OWORD *)v53 = v57;
          v53 = (WTF *)((char *)v53 + 16);
          v56 -= 16;
        }
        while (v56);
      }
    }
    v85 = *((_DWORD *)v32 + 18);
    v36 = (_DWORD *)*((_QWORD *)v32 + 10);
    if (v36)
      ++v36[2];
    v86 = v36;
    v37 = (_DWORD *)*((_QWORD *)v32 + 11);
    if (v37)
      ++v37[2];
    v87 = v37;
    v38 = (_DWORD *)*((_QWORD *)v32 + 12);
    if (v38)
      ++v38[2];
    v39 = *((_QWORD *)v32 + 13);
    v88 = v38;
    v89 = v39;
    if ((v39 & 0x8000000000000) != 0)
    {
      v58 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
    v90 = *((_DWORD *)v32 + 28);
    WebCore::TextIndicatorData::operator=(a2, (unint64_t *)v79);
    if ((v89 & 0x8000000000000) != 0)
    {
      v62 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v62);
        WTF::fastFree((WTF *)v62, v40);
      }
    }
    v41 = v88;
    v88 = 0;
    if (v41)
    {
      if (v41[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      else
        --v41[2];
    }
    v42 = v87;
    v87 = 0;
    if (v42)
    {
      if (v42[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
      else
        --v42[2];
    }
    v43 = v86;
    v86 = 0;
    if (v43)
    {
      if (v43[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
      else
        --v43[2];
    }
    v44 = v82;
    if (v82)
    {
      v82 = 0;
      v83 = 0;
      WTF::fastFree(v44, v40);
    }
    v45 = v65;
    v65 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
      {
        WebCore::TextIndicator::~TextIndicator(v45, v40);
        WTF::fastFree(v51, v52);
      }
      else
      {
        --*(_DWORD *)v45;
      }
    }
  }
  v46 = (const void *)objc_msgSend(v25, "CGImage", v65, v66, v67, v68, v69, v70, v71, *(_QWORD *)&v72, *(_QWORD *)&v73);
  *a3 = v46;
  if (v46)
    CFRetain(v46);
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v47);
    else
      *(_DWORD *)v75 -= 2;
  }
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::destroy(v74, v47);
      if (!v22)
        goto LABEL_75;
      goto LABEL_74;
    }
    *(_DWORD *)v74 -= 2;
  }
  if (v22)
LABEL_74:
    CFRelease(v22);
LABEL_75:
  v48 = v76;
  v76 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v77;
  v77 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v47);
    else
      *(_DWORD *)v49 -= 2;
  }
  result = v78;
  v78 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1952D667C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::TextIndicator *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WebCore::Node *a23,uint64_t a24,WebCore::Node *a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  const void *v35;
  WTF *v37;
  void *v38;

  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
    {
      WebCore::TextIndicator::~TextIndicator(a9, a2);
      WTF::fastFree(v37, v38);
    }
    else
    {
      --*(_DWORD *)a9;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
    {
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
      if (!v35)
      {
LABEL_15:
        if (a20)
        {
          if (*(_DWORD *)a20 == 2)
            WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)a20 -= 2;
        }
        if (a21)
        {
          if (*(_DWORD *)a21 == 2)
            WTF::StringImpl::destroy(a21, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)a21 -= 2;
        }
        if (a22)
        {
          if (*(_DWORD *)a22 == 2)
            WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)a22 -= 2;
        }
        _Unwind_Resume(exception_object);
      }
LABEL_12:
      CFRelease(v35);
      goto LABEL_15;
    }
    *(_DWORD *)a18 -= 2;
  }
  if (!v35)
    goto LABEL_15;
  goto LABEL_12;
}

void WebCore::cascadeForSystemFont(WebCore *this, double a2)
{
  void *v3;
  const __CFString *v4;
  CGFloat v5;
  CTFontRef v6;
  double v7;
  WTF::StringImpl *v8;
  CTFontRef v9;
  _BYTE v10[32];

  v3 = (void *)objc_msgSend((id)PAL::getUIFontClass(this), "systemFontOfSize:", a2);
  v4 = (const __CFString *)objc_msgSend(v3, "fontName");
  objc_msgSend(v3, "pointSize");
  v6 = CTFontCreateWithName(v4, v5, 0);
  v9 = v6;
  objc_msgSend(v3, "pointSize");
  *(float *)&v7 = v7;
  WebCore::FontPlatformData::FontPlatformData((uint64_t)v10, (CFTypeRef *)&v9, 0, 0, 0, 0, 0, 0, *(float *)&v7);
  WebCore::FontCascade::FontCascade((uint64_t)this, (const WebCore::FontPlatformData *)v10, 0);
  WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v10, v8);
  if (v6)
    CFRelease(v6);
}

void sub_1952D6994(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore22createDragImageForLinkERNS_7ElementERN3WTF3URLERKNS2_6StringERNS_17TextIndicatorDataEf_block_invoke(uint64_t a1, void *a2)
{
  float Height;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[720];
  CGContextRef c;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextCG::GraphicsContextCG((uint64_t)v22, (CGContext *)objc_msgSend(a2, "CGContext"), 0, 0);
  Height = CGRectGetHeight(*(CGRect *)(a1 + 32));
  v24 |= 8u;
  CGContextTranslateCTM(c, 0.0, Height);
  v24 = v24 & 0xF3 | 8;
  CGContextScaleCTM(c, 1.0, -1.0);
  v24 &= ~4u;
  __asm { FMOV            V0.4S, #4.0 }
  *(float32x4_t *)v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 32)), *(float64x2_t *)(a1 + 48));
  v20 = _Q0;
  v21 = _Q0;
  v18 = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContext::fillRoundedRect((uint64_t)v22, (float *)v19, (uint64_t)&v18, 1);
  if ((v18 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v9);
    }
  }
  LODWORD(v19[0]) = 0;
  v10 = *(WTF::StringImpl **)(a1 + 64);
  if (v10)
    *(_DWORD *)v10 += 2;
  v19[1] = v10;
  LODWORD(v20) = 0;
  BYTE4(v20) = 1;
  *((_QWORD *)&v20 + 1) = 0x3F80000000000000;
  LODWORD(v21) = 0;
  BYTE4(v21) = 4;
  BYTE5(v21) = BYTE5(v21) & 0xE0 | 8;
  v18 = 0x41E0000041200000;
  WebCore::FontCascade::drawText((uint64_t)&unk_1ECE81970, (uint64_t)v22);
  v12 = v19[1];
  v19[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)(a1 + 72);
  if (v13)
  {
    if (*((_DWORD *)v13 + 1))
    {
      LODWORD(v19[0]) = 0;
      *(_DWORD *)v13 += 2;
      v19[1] = v13;
      LODWORD(v20) = 0;
      BYTE4(v20) = 1;
      *((_QWORD *)&v20 + 1) = 0x3F80000000000000;
      LODWORD(v21) = 0;
      BYTE4(v21) = 4;
      BYTE5(v21) = BYTE5(v21) & 0xE0 | 8;
      v18 = 0x4248000041200000;
      WebCore::FontCascade::drawText((uint64_t)&unk_1ECE81A98, (uint64_t)v22);
      v14 = v19[1];
      v19[1] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v22, v11);
}

void sub_1952D6C34(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)&a18, a2);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_64c17_ZTSN3WTF6StringE72c17_ZTSN3WTF6StringE(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a2 + 64);
  if (v2)
    *v2 += 2;
  *(_QWORD *)(result + 64) = v2;
  v3 = *(_DWORD **)(a2 + 72);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(result + 72) = v3;
  return result;
}

WTF::StringImpl *__destroy_helper_block_e8_64c17_ZTSN3WTF6StringE72c17_ZTSN3WTF6StringE(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::TextIndicatorData::operator=(uint64_t a1, unint64_t *a2)
{
  __int128 v4;
  __int128 v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = *(WTF **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  v8 = a2[9];
  a2[9] = 0;
  v9 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = a2[10];
  a2[10] = 0;
  v11 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = a2[11];
  a2[11] = 0;
  v13 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = *(_QWORD *)(a1 + 96);
  v15 = a2[12];
  if ((v14 & 0x8000000000000) != 0)
  {
    if ((v15 & 0x8000000000000) != 0)
    {
      v23 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 4);
      v22 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
      v20 = WebCore::operator==<float,4ul>((float *)&v23, (float *)&v22);
      v14 = *(_QWORD *)(a1 + 96);
      if (v20)
      {
        v21 = a2[12];
        if (HIBYTE(v14) == HIBYTE(v21) && BYTE6(v14) == BYTE6(v21))
          goto LABEL_17;
      }
    }
  }
  else if (v14 == v15 && (v15 & 0x8000000000000) == 0)
  {
    goto LABEL_17;
  }
  if ((v14 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  *(_QWORD *)(a1 + 96) = a2[12];
  a2[12] = 0;
LABEL_17:
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  return a1;
}

void WebCore::createDragImageForSelection(WebCore::SimpleRange *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  __int16 v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  void *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF *v24;
  float v25;
  PAL *v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  void *v33;
  const void *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[5];
  float v48;
  float v49;
  float v50;
  float v51;
  _OWORD v52[3];
  WTF *v53;
  int v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int *v62;

  v8 = *((_QWORD *)a1 + 37);
  if (v8)
    WebCore::Document::updateLayout(v8, 0, 0);
  if (a3)
    v9 = 3204;
  else
    v9 = 3205;
  WebCore::TextIndicator::createWithSelectionInFrame(a1, v9, 0, &v62, 0.0, 0.0);
  v11 = v62;
  if (!v62)
  {
    *a4 = 0;
    return;
  }
  v12 = *((_QWORD *)v62 + 12);
  if (!v12)
  {
    *a4 = 0;
    v62 = 0;
LABEL_39:
    if (*v11 == 1)
    {
      WebCore::TextIndicator::~TextIndicator((WebCore::TextIndicator *)v11, v10);
      WTF::fastFree(v35, v36);
    }
    else
    {
      --*v11;
    }
    return;
  }
  v13 = *(_OWORD *)(v62 + 2);
  v14 = *(_OWORD *)(v62 + 10);
  v52[1] = *(_OWORD *)(v62 + 6);
  v52[2] = v14;
  v52[0] = v13;
  v15 = v62[17];
  v53 = 0;
  v54 = 0;
  v55 = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v37 = (WTF *)WTF::fastMalloc((WTF *)(16 * v15));
    v54 = v15;
    v53 = v37;
    v38 = v11[17];
    if ((_DWORD)v38)
    {
      v39 = (__int128 *)*((_QWORD *)v11 + 7);
      v40 = 16 * v38;
      do
      {
        v41 = *v39++;
        *(_OWORD *)v37 = v41;
        v37 = (WTF *)((char *)v37 + 16);
        v40 -= 16;
      }
      while (v40);
    }
  }
  v56 = v11[18];
  v16 = (_DWORD *)*((_QWORD *)v11 + 10);
  if (v16)
    ++v16[2];
  v57 = v16;
  v17 = (_DWORD *)*((_QWORD *)v11 + 11);
  if (v17)
    ++v17[2];
  v58 = v17;
  v18 = (_DWORD *)*((_QWORD *)v11 + 12);
  if (v18)
    ++v18[2];
  v19 = *((_QWORD *)v11 + 13);
  v59 = v18;
  v60 = v19;
  if ((v19 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61 = v11[28];
  WebCore::TextIndicatorData::operator=(a2, (unint64_t *)v52);
  if ((v60 & 0x8000000000000) != 0)
  {
    v44 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v20);
    }
  }
  v21 = v59;
  v59 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = v58;
  v58 = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = v57;
  v57 = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = v53;
  if (v53)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree(v24, v20);
  }
  v25 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 168))(v12, 0);
  v26 = (PAL *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 168))(v12, 0);
  v28 = v27;
  v29 = *((_QWORD *)a1 + 3);
  v30 = 0.0;
  if (v29)
  {
    v31 = *(_QWORD *)(v29 + 8);
    if (v31)
    {
      v32 = 1.0 / *(float *)(v31 + 364);
      v30 = v32 * 0.0;
      v25 = v25 * v32;
      v28 = v27 * v32;
    }
  }
  v33 = (void *)objc_msgSend(objc_alloc((Class)PAL::getUIGraphicsImageRendererClass[0](v26)), "initWithSize:", v25, v28);
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = ___ZN7WebCore27createDragImageForSelectionERNS_10LocalFrameERNS_17TextIndicatorDataEb_block_invoke;
  v47[3] = &__block_descriptor_56_e40_v16__0__UIGraphicsImageRendererContext_8l;
  v48 = v30;
  v49 = v30;
  v50 = v25;
  v51 = v28;
  v47[4] = v12;
  v34 = (const void *)objc_msgSend((id)objc_msgSend(v33, "imageWithActions:", v47), "CGImage");
  *a4 = v34;
  if (v34)
    CFRetain(v34);
  if (v33)
    CFRelease(v33);
  v11 = v62;
  v62 = 0;
  if (v11)
    goto LABEL_39;
}

void sub_1952D724C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  WebCore::TextIndicator *v31;
  WTF *v32;
  void *v33;

  v31 = *(WebCore::TextIndicator **)(v29 - 104);
  *(_QWORD *)(v29 - 104) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
    {
      WebCore::TextIndicator::~TextIndicator(v31, a2);
      WTF::fastFree(v32, v33);
    }
    else
    {
      --*(_DWORD *)v31;
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore27createDragImageForSelectionERNS_10LocalFrameERNS_17TextIndicatorDataEb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  int v7;
  void *v8;
  uint64_t v9;
  float v10;
  int v11;
  _QWORD v12[90];
  CGContextRef c;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextCG::GraphicsContextCG((uint64_t)v12, (CGContext *)objc_msgSend(a2, "CGContext"), 0, 0);
  v3 = a1 + 40;
  v4 = *(float *)(a1 + 52);
  v14 |= 8u;
  CGContextTranslateCTM(c, 0.0, v4);
  v14 = v14 & 0xF3 | 8;
  CGContextScaleCTM(c, 1.0, -1.0);
  v14 &= ~4u;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, 0);
  v9 = 0;
  v10 = v6;
  v11 = v7;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t))(v12[0] + 360))(v12, v5, v3, &v9, 545);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v12, v8);
}

WebCore::TextIndicator *WebCore::createDragImageForRange@<X0>(WebCore *this@<X0>, WebCore::LocalFrame *a2@<X1>, const WebCore::SimpleRange *a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  WebCore::TextIndicator *result;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  id v13;
  float v14;
  float v15;
  void *v16;
  const void *v17;
  WTF *v18;
  void *v19;
  _QWORD v20[5];
  WebCore::TextIndicator *v21;

  v4 = (int)a3;
  result = (WebCore::TextIndicator *)*((_QWORD *)this + 37);
  if (result)
    result = (WebCore::TextIndicator *)WebCore::Document::updateLayout((uint64_t)result, 0, 0);
  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 2) && *((_DWORD *)a2 + 2) == *((_DWORD *)a2 + 6))
  {
    *a4 = 0;
  }
  else
  {
    if (v4)
      v9 = 3204;
    else
      v9 = 3205;
    v10 = WebCore::TextIndicator::createWithRange((uint64_t)a2, (void *)v9, 0, (uint64_t *)&v21, 2.0, 1.0);
    if (v21 && (v12 = *((_QWORD *)v21 + 12)) != 0)
    {
      v13 = objc_alloc((Class)PAL::getUIGraphicsImageRendererClass[0]((PAL *)v10));
      v14 = ((__n128 (*)(uint64_t, _QWORD))*(_QWORD *)(*(_QWORD *)v12 + 168))(v12, 0).n128_f32[0];
      v16 = (void *)objc_msgSend(v13, "initWithSize:", v14, v15);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3321888768;
      v20[2] = ___ZN7WebCore23createDragImageForRangeERNS_10LocalFrameERKNS_11SimpleRangeEb_block_invoke;
      v20[3] = &__block_descriptor_40_e8_32c83_ZTSKZN7WebCore23createDragImageForRangeERNS_10LocalFrameERKNS_11SimpleRangeEbE3__0_e40_v16__0__UIGraphicsImageRendererContext_8l;
      v20[4] = v12;
      v17 = (const void *)objc_msgSend((id)objc_msgSend(v16, "imageWithActions:", v20), "CGImage");
      *a4 = v17;
      if (v17)
        CFRetain(v17);
      if (v16)
        CFRelease(v16);
    }
    else
    {
      *a4 = 0;
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::TextIndicator::~TextIndicator(result, v11);
        return (WebCore::TextIndicator *)WTF::fastFree(v18, v19);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

void sub_1952D75DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::TextIndicator *a14)
{
  const void *v14;
  WTF *v16;
  void *v17;

  if (v14)
    CFRelease(v14);
  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
    {
      WebCore::TextIndicator::~TextIndicator(a14, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)a14;
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore23createDragImageForRangeERNS_10LocalFrameERKNS_11SimpleRangeEb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  int v7;
  void *v8;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;
  int v14;
  _QWORD v15[95];

  v15[94] = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextCG::GraphicsContextCG((uint64_t)v15, (CGContext *)objc_msgSend(a2, "CGContext"), 0, 0);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 168))(v3, 0);
  v12 = 0;
  v13 = v4;
  v14 = v5;
  v6 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 168))(v3, 0);
  v9 = 0;
  v10 = v6;
  v11 = v7;
  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t *, uint64_t))(v15[0] + 360))(v15, v3, &v12, &v9, 545);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v15, v8);
}

uint64_t __copy_helper_block_e8_32c83_ZTSKZN7WebCore23createDragImageForRangeERNS_10LocalFrameERKNS_11SimpleRangeEbE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void WebCore::createDragImageForColor(WebCore *this@<X0>, const WebCore::Color *a2@<X1>, const WebCore::FloatRect *a3@<X2>, double a4@<D0>, _QWORD *a5@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  void *v11;
  const void *v12;
  _QWORD v13[6];
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  int32x4_t v17;
  int32x4_t v18;
  __int128 v19;
  int32x4_t v20;
  int32x4_t v21;

  *(float *)&v9 = *((float *)a2 + 2) * *(float *)&a4;
  *(float *)&v10 = *((float *)a2 + 3) * *(float *)&a4;
  *(float *)&a4 = *(float *)&a4 * 4.0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = __PAIR64__(v10, v9);
  v20 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  v21 = v20;
  v11 = (void *)objc_msgSend(objc_alloc((Class)PAL::getUIGraphicsImageRendererClass[0](this)), "initWithSize:", *(float *)&v9, *(float *)&v10);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN7WebCore23createDragImageForColorERKNS_5ColorERKNS_9FloatRectEfRNS_4PathE_block_invoke;
  v13[3] = &__block_descriptor_104_e40_v16__0__UIGraphicsImageRendererContext_8l;
  v13[5] = 0;
  v14 = v9;
  v15 = v10;
  v16 = v19;
  v17 = v20;
  v18 = v20;
  v13[4] = this;
  v12 = (const void *)objc_msgSend((id)objc_msgSend(v11, "imageWithActions:", v13), "CGImage", WebCore::Path::addRoundedRect(a3, (WebCore::FloatRect *)&v19, 0));
  *a5 = v12;
  if (v12)
    CFRetain(v12);
  if (v11)
    CFRelease(v11);
}

void sub_1952D7828(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore23createDragImageForColorERKNS_5ColorERKNS_9FloatRectEfRNS_4PathE_block_invoke(uint64_t a1, void *a2)
{
  float Height;
  void *v4;
  _BYTE v5[720];
  CGContextRef c;
  char v7;
  uint64_t v8;
  CGRect v9;

  v8 = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextCG::GraphicsContextCG((uint64_t)v5, (CGContext *)objc_msgSend(a2, "CGContext"), 0, 0);
  v9.origin.x = *(float *)(a1 + 40);
  v9.origin.y = *(float *)(a1 + 44);
  v9.size.width = *(float *)(a1 + 48);
  v9.size.height = *(float *)(a1 + 52);
  Height = CGRectGetHeight(v9);
  v7 |= 8u;
  CGContextTranslateCTM(c, 0.0, Height);
  v7 = v7 & 0xF3 | 8;
  CGContextScaleCTM(c, 1.0, -1.0);
  v7 &= ~4u;
  WebCore::GraphicsContext::fillRoundedRect((uint64_t)v5, (float *)(a1 + 56), *(_QWORD *)(a1 + 32), 1);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v5, v4);
}

void sub_1952D7930(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::windowsKeyCodeForCharCode(WebCore *this)
{
  int v1;
  uint64_t result;

  if ((int)this > 63231)
  {
    switch((int)this)
    {
      case 63232:
        result = 38;
        break;
      case 63233:
        result = 40;
        break;
      case 63234:
        result = 37;
        break;
      case 63235:
        result = 39;
        break;
      default:
        if ((_DWORD)this == 63276)
        {
          result = 33;
        }
        else if ((_DWORD)this == 63277)
        {
          result = 34;
        }
        else
        {
LABEL_63:
          result = 0;
        }
        break;
    }
  }
  else
  {
    v1 = (_DWORD)this - 3;
    result = 8;
    switch(v1)
    {
      case 0:
      case 10:
        result = 13;
        break;
      case 5:
      case 124:
        return result;
      case 6:
        result = 9;
        break;
      case 24:
        result = 27;
        break;
      case 29:
        result = 32;
        break;
      case 30:
      case 46:
        result = 49;
        break;
      case 31:
      case 36:
        result = 222;
        break;
      case 32:
      case 48:
        result = 51;
        break;
      case 33:
      case 49:
        result = 52;
        break;
      case 34:
      case 50:
        result = 53;
        break;
      case 35:
      case 52:
        result = 55;
        break;
      case 37:
      case 54:
        result = 57;
        break;
      case 38:
      case 45:
        result = 48;
        break;
      case 39:
      case 53:
        result = 56;
        break;
      case 40:
      case 58:
        result = 187;
        break;
      case 41:
      case 57:
        result = 188;
        break;
      case 42:
      case 92:
        result = 189;
        break;
      case 43:
      case 59:
        result = 190;
        break;
      case 44:
      case 60:
        result = 191;
        break;
      case 47:
      case 61:
        result = 50;
        break;
      case 51:
      case 91:
        result = 54;
        break;
      case 55:
      case 56:
        result = 186;
        break;
      case 62:
      case 94:
        result = 65;
        break;
      case 63:
      case 95:
        result = 66;
        break;
      case 64:
      case 96:
        result = 67;
        break;
      case 65:
      case 97:
        result = 68;
        break;
      case 66:
      case 98:
        result = 69;
        break;
      case 67:
      case 99:
        result = 70;
        break;
      case 68:
      case 100:
        result = 71;
        break;
      case 69:
      case 101:
        result = 72;
        break;
      case 70:
      case 102:
        result = 73;
        break;
      case 71:
      case 103:
        result = 74;
        break;
      case 72:
      case 104:
        result = 75;
        break;
      case 73:
      case 105:
        result = 76;
        break;
      case 74:
      case 106:
        result = 77;
        break;
      case 75:
      case 107:
        result = 78;
        break;
      case 76:
      case 108:
        result = 79;
        break;
      case 77:
      case 109:
        result = 80;
        break;
      case 78:
      case 110:
        result = 81;
        break;
      case 79:
      case 111:
        result = 82;
        break;
      case 80:
      case 112:
        result = 83;
        break;
      case 81:
      case 113:
        result = 84;
        break;
      case 82:
      case 114:
        result = 85;
        break;
      case 83:
      case 115:
        result = 86;
        break;
      case 84:
      case 116:
        result = 87;
        break;
      case 85:
      case 117:
        result = 88;
        break;
      case 86:
      case 118:
        result = 89;
        break;
      case 87:
      case 119:
        result = 90;
        break;
      case 88:
      case 120:
        result = 219;
        break;
      case 89:
      case 121:
        result = 220;
        break;
      case 90:
      case 122:
        result = 221;
        break;
      case 93:
      case 123:
        result = 192;
        break;
      default:
        goto LABEL_63;
    }
  }
  return result;
}

uint64_t WebCore::PlatformKeyboardEvent::disambiguateKeyDownEvent(uint64_t result, WTF::StringImpl *a2, char a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned int v8;

  *(_BYTE *)(result + 8) = (_BYTE)a2;
  if ((a3 & 1) != 0)
    return result;
  v3 = result;
  if ((_DWORD)a2 == 3)
  {
    result = *(_QWORD *)(result + 56);
    *(_QWORD *)(v3 + 56) = 0;
    if (!result)
      goto LABEL_22;
    goto LABEL_20;
  }
  v4 = *(WTF::StringImpl **)(result + 88);
  *(_QWORD *)(v3 + 88) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_DWORD *)(v3 + 96) = 0;
  result = *(_QWORD *)(v3 + 56);
  if (result && *(_DWORD *)(result + 4) == 1)
  {
    v5 = *(unsigned __int8 **)(result + 8);
    v6 = (*(_BYTE *)(result + 16) & 4) != 0 ? *v5 : *(unsigned __int16 *)v5;
    v7 = (v6 - 63232) > 0x39 || ((1 << v6) & 0x2003B800000000FLL) == 0;
    v8 = (unsigned __int16)(v6 + 2300);
    if (!v7 || v8 <= 0x17)
    {
      *(_QWORD *)(v3 + 56) = 0;
LABEL_20:
      if (*(_DWORD *)result == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
LABEL_22:
      result = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WebCore::LegacyTileCache *WebCore::LegacyTileCache::LegacyTileCache(WebCore::LegacyTileCache *this, WAKWindow *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = objc_alloc_init(LegacyTileCacheTombstone);
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 40) = 0;
  *(_OWORD *)((char *)this + 44) = xmmword_1968DDAC0;
  *(_QWORD *)((char *)this + 60) = 0x100000001000000;
  *((_WORD *)this + 34) = 0;
  v3 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v3 = this;
  *(_QWORD *)(v3 + 8) = -[LegacyTileHostLayer initWithTileGrid:]([LegacyTileHostLayer alloc], "initWithTileGrid:", v3);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)((char *)this + 44);
  *(_DWORD *)(v3 + 32) = 1065353216;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0x8000000080000000;
  *((_QWORD *)this + 11) = off_1E3407128;
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 10) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 16) = v5;
  *((_QWORD *)this + 11) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3353488;
  v7[1] = WebCore::LegacyTileCache::tileCreationTimerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 17) = v7;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 1065353216;
  *(_QWORD *)((char *)this + 164) = 0;
  *(_DWORD *)((char *)this + 171) = 0;
  objc_msgSend((id)objc_msgSend(*(id *)this, "hostLayer"), "insertSublayer:atIndex:", *(_QWORD *)(*((_QWORD *)this + 9) + 8), 0);
  WebCore::LegacyTileCache::hostLayerSizeChanged(this);
  return this;
}

void sub_1952D7DF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  WebCore::TimerBase *v2;
  id *v4;
  WTF *v5;
  void *v6;
  id *v7;
  WTF *v8;
  void *v9;
  const void *v10;
  const void *v11;

  WebCore::TimerBase::~TimerBase(v2);
  v4 = (id *)v1[10];
  v1[10] = 0;
  if (v4)
  {
    WebCore::LegacyTileGrid::~LegacyTileGrid(v4);
    WTF::fastFree(v5, v6);
  }
  v7 = (id *)v1[9];
  v1[9] = 0;
  if (v7)
  {
    WebCore::LegacyTileGrid::~LegacyTileGrid(v7);
    WTF::fastFree(v8, v9);
  }
  v10 = (const void *)v1[2];
  v1[2] = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)v1[1];
  v1[1] = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(a1);
}

WebCore::LegacyTileGrid *WebCore::LegacyTileCache::tileCreationTimerFired(WebCore::LegacyTileGrid *this)
{
  int v1;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v11;
  int v12;

  v1 = *((_DWORD *)this + 13);
  if ((v1 != 3 || *((_BYTE *)this + 60) != 0) && v1 != 4)
  {
    v4 = (uint64_t)this;
    v5 = (unsigned __int8 *)this + 172;
    if (__ldaxr((unsigned __int8 *)this + 172))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_14;
    }
    this = (WebCore::LegacyTileGrid *)MEMORY[0x19AEA534C]((char *)this + 172);
LABEL_14:
    v7 = WTF::MemoryPressureHandler::singleton(this);
    v9 = atomic_load((unsigned __int8 *)(v7 + 4));
    if (v9 == 2 || *(_BYTE *)(v7 + 7) != 0)
      WebCore::LegacyTileCache::removeAllNonVisibleTilesInternal((WebCore::LegacyTileCache *)v4, v8);
    if (!*(_BYTE *)(v4 + 60)
      || *(_DWORD *)(v4 + 52) == 3
      || (v11 = *(_QWORD *)(v4 + 80)) == 0
      || *(float *)(v4 + 160) != *(float *)(v11 + 32))
    {
      v11 = *(_QWORD *)(v4 + 72);
    }
    this = WebCore::LegacyTileGrid::createTiles((_QWORD *)v11, 1);
    v12 = __ldxr(v5);
    if (v12 == 1)
    {
      if (!__stlxr(0, v5))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WebCore::LegacyTileGrid *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

void sub_1952D7F94(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::LegacyTileCache::hostLayerSizeChanged(WebCore::LegacyTileCache *this)
{
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t result;
  double v9;
  double v10;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v2 = *((_QWORD *)this + 9);
  v3 = (void *)objc_msgSend(**(id **)v2, "hostLayer");
  objc_msgSend(v3, "bounds");
  objc_msgSend(v3, "convertRect:toLayer:", *(_QWORD *)(v2 + 8));
  v5 = round(v4);
  v7 = round(v6);
  result = objc_msgSend(*(id *)(v2 + 8), "bounds");
  if (v10 != v5 || v9 != v7)
    result = objc_msgSend(*(id *)(v2 + 8), "setBounds:");
  v12 = *((_QWORD *)this + 10);
  if (v12)
  {
    v13 = (void *)objc_msgSend(**(id **)v12, "hostLayer");
    objc_msgSend(v13, "bounds");
    objc_msgSend(v13, "convertRect:toLayer:", *(_QWORD *)(v12 + 8));
    v15 = round(v14);
    v17 = round(v16);
    result = objc_msgSend(*(id *)(v12 + 8), "bounds");
    if (v19 != v15 || v18 != v17)
      return objc_msgSend(*(id *)(v12 + 8), "setBounds:");
  }
  return result;
}

void WebCore::LegacyTileCache::~LegacyTileCache(id *this)
{
  void *v2;
  WTF *v3;
  id v4;
  id *v5;
  WTF *v6;
  void *v7;
  id *v8;
  WTF *v9;
  void *v10;
  id v11;
  id v12;

  objc_msgSend(this[2], "setDead:", 1);
  v3 = (WTF *)this[18];
  if (v3)
  {
    this[18] = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, v2);
  }
  this[11] = off_1E31F7378;
  v4 = this[17];
  this[17] = 0;
  if (v4)
    (*(void (**)(id))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(this + 11));
  v5 = (id *)this[10];
  this[10] = 0;
  if (v5)
  {
    WebCore::LegacyTileGrid::~LegacyTileGrid(v5);
    WTF::fastFree(v6, v7);
  }
  v8 = (id *)this[9];
  this[9] = 0;
  if (v8)
  {
    WebCore::LegacyTileGrid::~LegacyTileGrid(v8);
    WTF::fastFree(v9, v10);
  }
  v11 = this[2];
  this[2] = 0;
  if (v11)
    CFRelease(v11);
  v12 = this[1];
  this[1] = 0;
  if (v12)
    CFRelease(v12);
}

void sub_1952D8164(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v4;
  uint64_t v5;
  id *v6;
  WTF *v7;
  void *v8;
  id *v9;
  WTF *v10;
  void *v11;
  const void *v12;
  const void *v13;

  v4 = *(WTF **)(v2 + 144);
  if (v4)
  {
    *(_QWORD *)(v2 + 144) = 0;
    *(_DWORD *)(v2 + 152) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)(v2 + 88) = off_1E31F7378;
  v5 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v2 + 88));
  v6 = *(id **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v6)
  {
    WebCore::LegacyTileGrid::~LegacyTileGrid(v6);
    WTF::fastFree(v7, v8);
  }
  v9 = *(id **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v9)
  {
    WebCore::LegacyTileGrid::~LegacyTileGrid(v9);
    WTF::fastFree(v10, v11);
  }
  v12 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v13)
    CFRelease(v13);
  _Unwind_Resume(a1);
}

float *WebCore::LegacyTileCache::setOverrideVisibleRect(WebCore::LegacyTileCache *this, const WebCore::FloatRect *a2)
{
  int v3;
  float *result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[2];

  v3 = *((unsigned __int8 *)this + 40);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2;
  if (!v3)
    *((_BYTE *)this + 40) = 1;
  if (*((_BYTE *)this + 60)
    && *((_DWORD *)this + 13) != 3
    && (result = (float *)*((_QWORD *)this + 10)) != 0
    && *((float *)this + 40) == result[8]
    || (result = (float *)*((_QWORD *)this + 9)) != 0)
  {
    v5 = *((float *)this + 6);
    v6 = *((float *)this + 7);
    v7 = floorf(v5);
    v8 = 2147500000.0;
    if (v7 < 2147500000.0)
    {
      v8 = -2147500000.0;
      if (v7 > -2147500000.0)
        v8 = (float)(int)v7;
    }
    v9 = floorf(v6);
    v10 = 2147500000.0;
    if (v9 < 2147500000.0)
    {
      v10 = -2147500000.0;
      if (v9 > -2147500000.0)
        v10 = (float)(int)v9;
    }
    v11 = v6 + *((float *)this + 9);
    v12 = ceilf(v5 + *((float *)this + 8));
    v13 = 2147500000.0;
    if (v12 < 2147500000.0)
    {
      v13 = -2147500000.0;
      if (v12 > -2147500000.0)
        v13 = (float)(int)v12;
    }
    v14 = ceilf(v11);
    v15 = 2147500000.0;
    if (v14 < 2147500000.0)
    {
      v15 = -2147500000.0;
      if (v14 > -2147500000.0)
        v15 = (float)(int)v14;
    }
    v16 = 0x7FFFFFFFLL;
    v17 = 0x80000000;
    if (v8 > -2147500000.0)
      v17 = (int)v8;
    if (v8 < 2147500000.0)
      v16 = v17;
    v18 = 0x7FFFFFFF00000000;
    v19 = 0x8000000000000000;
    if (v10 > -2147500000.0)
      v19 = (unint64_t)(int)v10 << 32;
    if (v10 < 2147500000.0)
      v18 = v19;
    v20 = v13 - v8;
    v21 = v15 - v10;
    v22 = 0x7FFFFFFFLL;
    v23 = 0x80000000;
    if (v20 > -2147500000.0)
      v23 = (int)v20;
    if (v20 < 2147500000.0)
      v22 = v23;
    if (v21 >= 2147500000.0)
    {
      v24 = 0x7FFFFFFF00000000;
    }
    else if (v21 <= -2147500000.0)
    {
      v24 = 0x8000000000000000;
    }
    else
    {
      v24 = (unint64_t)(int)v21 << 32;
    }
    v25[0] = v18 | v16;
    v25[1] = v24 | v22;
    return (float *)WebCore::LegacyTileGrid::tilesCover((WebCore::LegacyTileGrid *)result, (const WebCore::IntRect *)v25);
  }
  return result;
}

uint64_t WebCore::LegacyTileGrid::tilesCover(WebCore::LegacyTileGrid *this, const WebCore::IntRect *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v19;
  int *v20;
  id *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int v32;
  int *v33;
  id *v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int *v41;
  int v42;
  int v43;
  int v45;
  int *v46;
  id *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int *v52;
  int v53;
  int v54;
  int v56;
  int *v57;
  id *v59;
  int v60;
  uint64_t v61;
  WTF *v63;
  void *v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  void *v68;
  WTF *v69;
  void *v70;

  v2 = *((_DWORD *)this + 4);
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)this + 6);
  v5 = *((_DWORD *)this + 7);
  v6 = v4 - v2;
  if (!v2)
    v6 = 0;
  v7 = v5 - v3;
  if (!v3)
    v7 = 0;
  v8 = *((_QWORD *)this + 5);
  if (!v8)
    return 0;
  v9 = v6 + *(_DWORD *)a2;
  v10 = v7 + *((_DWORD *)a2 + 1);
  v11 = (v9 / v4) & ~((v9 / v4) >> 31);
  v12 = (v10 / v5) & ~((v10 / v5) >> 31);
  v13 = *(_DWORD *)(v8 - 8);
  v14 = v13 & ((0xD7862706ELL * (unint64_t)(95187966 * v12 + 277951225 * v11)) >> 4);
  v15 = (int *)(v8 + 16 * v14);
  v17 = *v15;
  v16 = v15[1];
  if (*v15 != v11 || v16 != v12)
  {
    v19 = 1;
    while (v17 || v16 != 0x80000000)
    {
      v14 = ((_DWORD)v14 + v19) & v13;
      v20 = (int *)(v8 + 16 * v14);
      v17 = *v20;
      v16 = v20[1];
      ++v19;
      if (v17 == v11 && v16 == v12)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v22 = *(id **)(v8 + 16 * v14 + 8);
  if (!v22)
    return 0;
  ++*(_DWORD *)v22;
  v23 = *((_QWORD *)this + 5);
  if (!v23)
    goto LABEL_65;
  v24 = (v9 + *((_DWORD *)a2 + 2) - 1) / v4;
  v25 = v24 & ~(v24 >> 31);
  v26 = *(_DWORD *)(v23 - 8);
  v27 = v26 & ((0xD7862706ELL * (unint64_t)(277951225 * v25 + 95187966 * v12)) >> 4);
  v28 = (int *)(v23 + 16 * v27);
  v30 = *v28;
  v29 = v28[1];
  if (*v28 != v25 || v29 != v12)
  {
    v32 = 1;
    while (v30 || v29 != 0x80000000)
    {
      v27 = ((_DWORD)v27 + v32) & v26;
      v33 = (int *)(v23 + 16 * v27);
      v30 = *v33;
      v29 = v33[1];
      ++v32;
      if (v30 == v25 && v29 == v12)
        goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_32:
  v35 = *(id **)(v23 + 16 * v27 + 8);
  if (v35)
  {
    ++*(_DWORD *)v35;
    v36 = *((_QWORD *)this + 5);
    if (!v36)
      goto LABEL_66;
    v37 = (v10 + *((_DWORD *)a2 + 3) - 1) / v5;
    v38 = v37 & ~(v37 >> 31);
    v39 = *(_DWORD *)(v36 - 8);
    v40 = v39 & ((0xD7862706ELL * (unint64_t)(95187966 * v38 + 277951225 * v11)) >> 4);
    v41 = (int *)(v36 + 16 * v40);
    v43 = *v41;
    v42 = v41[1];
    if (*v41 != v11 || v42 != v38)
    {
      v45 = 1;
      while (v43 || v42 != 0x80000000)
      {
        v40 = ((_DWORD)v40 + v45) & v39;
        v46 = (int *)(v36 + 16 * v40);
        v43 = *v46;
        v42 = v46[1];
        ++v45;
        if (v43 == v11 && v42 == v38)
          goto LABEL_46;
      }
      goto LABEL_66;
    }
LABEL_46:
    v48 = *(id **)(v36 + 16 * v40 + 8);
    if (!v48)
    {
LABEL_66:
      v61 = 0;
LABEL_70:
      if (*(_DWORD *)v35 == 1)
      {
        WebCore::LegacyTileGridTile::~LegacyTileGridTile(v35);
        WTF::fastFree(v65, v66);
      }
      else
      {
        --*(_DWORD *)v35;
      }
      goto LABEL_72;
    }
    ++*(_DWORD *)v48;
    v49 = *((_QWORD *)this + 5);
    if (v49)
    {
      v50 = *(_DWORD *)(v49 - 8);
      v51 = v50 & ((0xD7862706ELL * (unint64_t)(95187966 * v38 + 277951225 * v25)) >> 4);
      v52 = (int *)(v49 + 16 * v51);
      v54 = *v52;
      v53 = v52[1];
      if (*v52 == v25 && v53 == v38)
      {
LABEL_60:
        v59 = *(id **)(v49 + 16 * v51 + 8);
        if (v59)
        {
          v60 = (*(_DWORD *)v59)++;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::LegacyTileGridTile::~LegacyTileGridTile(v59);
            WTF::fastFree(v69, v70);
          }
          v61 = 1;
          goto LABEL_68;
        }
      }
      else
      {
        v56 = 1;
        while (v54 || v53 != 0x80000000)
        {
          v51 = ((_DWORD)v51 + v56) & v50;
          v57 = (int *)(v49 + 16 * v51);
          v54 = *v57;
          v53 = v57[1];
          ++v56;
          if (v54 == v25 && v53 == v38)
            goto LABEL_60;
        }
      }
    }
    v61 = 0;
LABEL_68:
    if (*(_DWORD *)v48 == 1)
    {
      WebCore::LegacyTileGridTile::~LegacyTileGridTile(v48);
      WTF::fastFree(v67, v68);
    }
    else
    {
      --*(_DWORD *)v48;
    }
    goto LABEL_70;
  }
LABEL_65:
  v61 = 0;
LABEL_72:
  if (*(_DWORD *)v22 == 1)
  {
    WebCore::LegacyTileGridTile::~LegacyTileGridTile(v22);
    WTF::fastFree(v63, v64);
  }
  else
  {
    --*(_DWORD *)v22;
  }
  return v61;
}

uint64_t WebCore::LegacyTileCache::setTilesOpaque(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _BOOL4 v30;
  int v32;

  if (*(unsigned __int8 *)(this + 63) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = (unsigned __int8 *)(this + 172);
    if (__ldaxr((unsigned __int8 *)(this + 172)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    this = MEMORY[0x19AEA534C](this + 172);
LABEL_6:
    *(_BYTE *)(v3 + 63) = v2;
    v6 = *(_QWORD **)(v3 + 72);
    v7 = v6[5];
    if (v7)
    {
      v8 = *(unsigned int *)(v7 - 4);
      v9 = v7 + 16 * v8;
      if (*(_DWORD *)(v7 - 12))
      {
        if ((_DWORD)v8)
        {
          v10 = 16 * v8;
          while (1)
          {
            v11 = !*(_DWORD *)v7 && *(_DWORD *)(v7 + 4) == 0x80000000;
            v12 = v11;
            if (*(_DWORD *)v7 != 0x80000000 && !v12)
              break;
            v7 += 16;
            v10 -= 16;
            if (!v10)
            {
              v7 = v9;
              break;
            }
          }
        }
        v14 = v9;
LABEL_26:
        while (v7 != v9)
        {
          this = objc_msgSend(*(id *)(*(_QWORD *)(v7 + 8) + 16), "setOpaque:", *(unsigned __int8 *)(*v6 + 63));
          v15 = v7 + 16;
          v7 = v14;
          if (v15 != v14)
          {
            v7 = v15;
            while (1)
            {
              v16 = !*(_DWORD *)v7 && *(_DWORD *)(v7 + 4) == 0x80000000;
              v17 = v16;
              if (*(_DWORD *)v7 != 0x80000000 && !v17)
                break;
              v7 += 16;
              if (v7 == v14)
              {
                v7 = v14;
                break;
              }
            }
          }
        }
        v19 = *(_QWORD **)(v3 + 80);
        if (!v19)
        {
LABEL_79:
          v32 = __ldxr(v4);
          if (v32 == 1)
          {
            if (!__stlxr(0, v4))
              return this;
          }
          else
          {
            __clrex();
          }
          return WTF::Lock::unlockSlow((WTF::Lock *)v4);
        }
        v20 = v19[5];
        if (v20)
        {
          v21 = *(unsigned int *)(v20 - 4);
          v22 = v20 + 16 * v21;
          if (*(_DWORD *)(v20 - 12))
          {
            if ((_DWORD)v21)
            {
              v23 = 16 * v21;
              while (1)
              {
                v24 = !*(_DWORD *)v20 && *(_DWORD *)(v20 + 4) == 0x80000000;
                v25 = v24;
                if (*(_DWORD *)v20 != 0x80000000 && !v25)
                  break;
                v20 += 16;
                v23 -= 16;
                if (!v23)
                {
                  v20 = v22;
                  break;
                }
              }
            }
            v27 = v22;
            goto LABEL_63;
          }
          this = v20 + 16 * v21;
        }
        else
        {
          v22 = 0;
          this = 0;
          v21 = 0;
        }
        v27 = v20 + 16 * v21;
        v20 = this;
LABEL_63:
        while (v20 != v22)
        {
          this = objc_msgSend(*(id *)(*(_QWORD *)(v20 + 8) + 16), "setOpaque:", *(unsigned __int8 *)(*v19 + 63));
          v28 = v20 + 16;
          v20 = v27;
          if (v28 != v27)
          {
            v20 = v28;
            while (1)
            {
              v29 = !*(_DWORD *)v20 && *(_DWORD *)(v20 + 4) == 0x80000000;
              v30 = v29;
              if (*(_DWORD *)v20 != 0x80000000 && !v30)
                break;
              v20 += 16;
              if (v20 == v27)
              {
                v20 = v27;
                break;
              }
            }
          }
        }
        goto LABEL_79;
      }
      this = v7 + 16 * v8;
    }
    else
    {
      v9 = 0;
      this = 0;
      v8 = 0;
    }
    v14 = v7 + 16 * v8;
    v7 = this;
    goto LABEL_26;
  }
  return this;
}

void sub_1952D895C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::LegacyTileCache::doLayoutTiles(uint64_t this)
{
  int v1;
  uint64_t v4;
  unsigned __int8 *v5;
  float *v7;
  float *v8;
  id *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;

  v1 = *(_DWORD *)(this + 52);
  if ((v1 != 3 || *(_BYTE *)(this + 60) != 0) && v1 != 4)
  {
    v4 = this;
    v5 = (unsigned __int8 *)(this + 172);
    if (__ldaxr((unsigned __int8 *)(this + 172)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
LABEL_14:
      if (*(_BYTE *)(v4 + 60) && *(_DWORD *)(v4 + 52) != 3)
      {
        v8 = *(float **)(v4 + 80);
        if (v8)
        {
          v9 = *(id **)(v4 + 72);
          if (*(float *)(v4 + 160) == v8[8])
          {
            v7 = *(float **)(v4 + 80);
            if (v8 != (float *)v9)
            {
LABEL_18:
              if (v9)
                WebCore::LegacyTileGrid::dropInvalidTiles(v9);
              this = WebCore::LegacyTileGrid::checkDoSingleTileLayout((WebCore::LegacyTileGrid *)v8);
              if ((this & 1) == 0)
              {
                v10 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)this);
                v12 = atomic_load((unsigned __int8 *)(v10 + 4));
                if (v12 == 2 || *(_BYTE *)(v10 + 7))
                  WebCore::LegacyTileCache::removeAllNonVisibleTilesInternal((WebCore::LegacyTileCache *)v4, v11);
                if (!*(_BYTE *)(v4 + 60)
                  || *(_DWORD *)(v4 + 52) == 3
                  || (v13 = *(_QWORD *)(v4 + 80)) == 0
                  || *(float *)(v4 + 160) != *(float *)(v13 + 32))
                {
                  v13 = *(_QWORD *)(v4 + 72);
                }
                this = (uint64_t)WebCore::LegacyTileGrid::createTiles((_QWORD *)v13, 0);
              }
              v14 = __ldxr(v5);
              if (v14 == 1)
              {
                if (!__stlxr(0, v5))
                  return this;
              }
              else
              {
                __clrex();
              }
              return WTF::Lock::unlockSlow((WTF::Lock *)v5);
            }
          }
          else
          {
            v7 = *(float **)(v4 + 72);
          }
        }
        else
        {
          v7 = *(float **)(v4 + 72);
        }
      }
      else
      {
        v7 = *(float **)(v4 + 72);
        v8 = *(float **)(v4 + 80);
      }
      v9 = (id *)v8;
      v8 = v7;
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](this + 172);
    goto LABEL_14;
  }
  return this;
}

void sub_1952D8AF0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF *WebCore::LegacyTileGrid::dropInvalidTiles(id *this)
{
  void *v2;
  double v3;
  double v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BOOL4 v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  WTF *result;
  int32x2_t v33;
  float64_t v34;
  float64x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  unsigned __int32 v39;
  __int32 v40;
  unsigned __int32 v41;
  __int32 v42;
  BOOL v43;
  unsigned __int32 v44;
  unsigned __int32 v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  _QWORD *v51;
  unint64_t v52;
  BOOL v53;
  _BOOL4 v54;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int32 v60;
  WTF *v61;
  uint64_t v62;

  objc_msgSend(this[1], "size");
  v5 = (int)v3;
  v7 = *((_DWORD *)this + 12);
  v6 = *((_DWORD *)this + 13);
  v8 = v7 & ~(v7 >> 31);
  v9 = v6 & ~(v6 >> 31);
  v10 = *((_DWORD *)this + 14) + v7;
  if ((int)v3 < v10)
    v10 = (int)v3;
  v11 = *((_DWORD *)this + 15) + v6;
  if ((int)v4 < v11)
    v11 = (int)v4;
  v12 = v8 < v10 && v9 < v11;
  if (v12)
    v13 = v8;
  else
    v13 = 0;
  v59 = (int)v4;
  v60 = v13;
  if (v12)
    v14 = v9;
  else
    v14 = 0;
  if (v12)
    v15 = v10;
  else
    v15 = 0;
  if (v12)
    v16 = v11;
  else
    v16 = 0;
  v61 = 0;
  v62 = 0;
  v17 = this[5];
  if (v17)
  {
    v18 = *(v17 - 1);
    v19 = (unint64_t)&v17[4 * v18];
    if (*(v17 - 3))
    {
      v20 = (unint64_t)this[5];
      if ((_DWORD)v18)
      {
        v21 = 16 * v18;
        v20 = (unint64_t)this[5];
        while (1)
        {
          v22 = !*(_DWORD *)v20 && *(_DWORD *)(v20 + 4) == 0x80000000;
          v23 = v22;
          if (*(_DWORD *)v20 != 0x80000000 && !v23)
            break;
          v20 += 16;
          v21 -= 16;
          if (!v21)
          {
            v20 = v19;
            goto LABEL_36;
          }
        }
      }
      goto LABEL_36;
    }
    v20 = (unint64_t)&v17[4 * v18];
  }
  else
  {
    v20 = 0;
    v18 = 0;
  }
  v19 = (unint64_t)&v17[4 * v18];
  if (!v17)
  {
    v25 = 0;
    goto LABEL_41;
  }
LABEL_36:
  v25 = (char *)&v17[4 * *(v17 - 1)];
LABEL_41:
  if (v25 == (char *)v20)
    goto LABEL_95;
  do
  {
    v26 = *(_QWORD *)(v20 + 8);
    v28 = *(_QWORD *)(v26 + 24);
    v27 = *(_QWORD *)(v26 + 32);
    v29 = *(int32x2_t *)v20;
    v31 = (int32x2_t)this[2];
    v30 = (int32x2_t)this[3];
    result = (WTF *)objc_msgSend(this[1], "size");
    v33 = vmla_s32((int32x2_t)vbic_s8((int8x8_t)vsub_s32(v31, v30), (int8x8_t)vceqz_s32(v31)), v30, v29);
    v35.f64[1] = v34;
    v36 = vmax_s32(v33, 0);
    v37 = vmin_s32(vmovn_s64(vcvtq_s64_f64(v35)), vadd_s32(v33, v30));
    v38 = vcgt_s32(v37, v36);
    v39 = v36.i32[0];
    v40 = v37.i32[1];
    if ((v38.i8[0] & v38.i8[4] & 1) != 0)
    {
      v41 = v36.u32[1];
    }
    else
    {
      v39 = 0;
      v41 = 0;
    }
    if ((v38.i8[0] & v38.i8[4] & 1) != 0)
      v42 = v37.i32[0];
    else
      v42 = 0;
    if ((v38.i8[0] & v38.i8[4] & 1) == 0)
      v40 = 0;
    v43 = v39 == (_DWORD)v28 && v41 == HIDWORD(v28);
    if (!v43
      || ((v44 = v42 - v39, v45 = v40 - v41, v60 <= v39) ? (v46 = v44 == (_DWORD)v27) : (v46 = 0),
          v46 ? (v47 = v45 == HIDWORD(v27)) : (v47 = 0),
          v47 ? (v48 = v15 < (int)(v39 + v27)) : (v48 = 1),
          !v48 ? (v49 = v14 > v41) : (v49 = 1),
          !v49 ? (v50 = v16 < (int)(v41 + HIDWORD(v27))) : (v50 = 1),
          v50))
    {
      if (HIDWORD(v62) == (_DWORD)v62)
      {
        result = (WTF *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v61, HIDWORD(v62) + 1, v20);
        v51 = (_QWORD *)((char *)v61 + 8 * HIDWORD(v62));
      }
      else
      {
        v51 = (_QWORD *)((char *)v61 + 8 * HIDWORD(v62));
        result = (WTF *)v20;
      }
      *v51 = *(_QWORD *)result;
      ++HIDWORD(v62);
    }
    v52 = v20 + 16;
    v20 = v19;
    if (v52 != v19)
    {
      v20 = v52;
      while (1)
      {
        v53 = !*(_DWORD *)v20 && *(_DWORD *)(v20 + 4) == 0x80000000;
        v54 = v53;
        if (*(_DWORD *)v20 != 0x80000000 && !v54)
          break;
        v20 += 16;
        if (v20 == v19)
        {
          v20 = v19;
          break;
        }
      }
    }
  }
  while ((char *)v20 != v25);
  if (!HIDWORD(v62))
  {
LABEL_95:
    this[6] = 0;
    *((_DWORD *)this + 14) = v5;
    *((_DWORD *)this + 15) = v59;
    result = v61;
    if (v61)
    {
      v61 = 0;
      LODWORD(v62) = 0;
      return (WTF *)WTF::fastFree(result, v2);
    }
  }
  else
  {
    v56 = 0;
    v57 = 0;
    v58 = 8 * HIDWORD(v62);
    while (v57 < HIDWORD(v62))
    {
      result = (WTF *)WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::remove(this + 5, *(_DWORD *)((char *)v61 + v56), *(_DWORD *)((char *)v61 + v56 + 4));
      ++v57;
      v56 += 8;
      if (v58 == v56)
        goto LABEL_95;
    }
    __break(0xC471u);
  }
  return result;
}

void sub_1952D8E34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LegacyTileGrid::checkDoSingleTileLayout(WebCore::LegacyTileGrid *this)
{
  void *v2;
  double v3;
  double v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  id **v10;
  id *v11;
  WTF *v12;
  void *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  WebCore::LegacyTileGridTile *v33;
  WTF *v34;
  void *v35;
  _BYTE v36[24];
  _QWORD v37[2];
  WebCore::LegacyTileGridTile *v38;
  uint64_t v39;

  objc_msgSend(*((id *)this + 1), "size");
  v5 = (int)v4;
  if (*((_DWORD *)this + 6) < (int)v4)
    return 0;
  v6 = (int)v3;
  if (*((_DWORD *)this + 7) < (int)v3)
    return 0;
  if (*((_QWORD *)this + 2))
  {
    v8 = *((_QWORD *)this + 5);
    if (v8)
    {
      *((_QWORD *)this + 5) = 0;
      v9 = *(unsigned int *)(v8 - 4);
      if ((_DWORD)v9)
      {
        v10 = (id **)(v8 + 8);
        do
        {
          if (*((_DWORD *)v10 - 2) != 0x80000000)
          {
            v11 = *v10;
            *v10 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 1)
              {
                WebCore::LegacyTileGridTile::~LegacyTileGridTile(v11);
                WTF::fastFree(v12, v13);
              }
              else
              {
                --*(_DWORD *)v11;
              }
            }
          }
          v10 += 2;
          --v9;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)(v8 - 16), v2);
    }
    *((_QWORD *)this + 2) = 0;
  }
  WebCore::LegacyTileGrid::dropInvalidTiles((id *)this);
  result = 1;
  if (v5 >= 1 && v6 >= 1)
  {
    v39 = 0;
    v14 = (int *)*((_QWORD *)this + 5);
    if (v14)
    {
      v16 = *v14;
      v15 = v14[1];
      if (*(_QWORD *)v14)
      {
        LODWORD(v17) = 0;
        v18 = 1;
        while (v16 || v15 != 0x80000000)
        {
          v17 = ((_DWORD)v17 + v18) & *(v14 - 2);
          v19 = &v14[4 * v17];
          v16 = *v19;
          v15 = v19[1];
          ++v18;
          if (!(v16 | v15))
            goto LABEL_27;
        }
      }
      else
      {
        v17 = 0;
LABEL_27:
        if (*(_QWORD *)&v14[4 * v17 + 2])
          return 1;
      }
    }
    v20 = *((_DWORD *)this + 6);
    v21 = *((_DWORD *)this + 7);
    v22 = *((_DWORD *)this + 4);
    v23 = *((_DWORD *)this + 5);
    if (v22)
      v24 = v22 - v20;
    else
      v24 = 0;
    if (v23)
      v25 = v23 - v21;
    else
      v25 = 0;
    objc_msgSend(*((id *)this + 1), "size");
    v27 = (int)v26;
    v29 = (int)v28;
    LODWORD(v30) = v24 & ~(v24 >> 31);
    LODWORD(v31) = v25 & ~(v25 >> 31);
    if ((int)v26 >= v24 + v20)
      v27 = v24 + v20;
    if (v29 >= v25 + v21)
      v29 = v25 + v21;
    v32 = (int)v30 < v27 && (int)v31 < v29;
    if (v32)
      v30 = v30;
    else
      v30 = 0;
    if (v32)
      v31 = v31;
    else
      v31 = 0;
    if (!v32)
    {
      v27 = 0;
      v29 = 0;
    }
    v37[0] = v30 | (v31 << 32);
    v37[1] = (v27 - v30) | ((unint64_t)(v29 - v31) << 32);
    v33 = (WebCore::LegacyTileGridTile *)WTF::fastMalloc((WTF *)0x28);
    WebCore::LegacyTileGridTile::LegacyTileGridTile(v33, this, (const WebCore::IntRect *)v37);
    v38 = v33;
    WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::inlineSet<WebCore::IntPoint const&,WTF::Ref<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>((uint64_t)v36, (uint64_t *)this + 5, &v39, (void **)&v38);
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
      {
        WebCore::LegacyTileGridTile::~LegacyTileGridTile((id *)v38);
        WTF::fastFree(v34, v35);
      }
      else
      {
        --*(_DWORD *)v38;
      }
    }
    return 1;
  }
  return result;
}

void sub_1952D9098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *a15)
{
  WTF *v16;
  void *v17;

  if (a15)
  {
    if (*(_DWORD *)a15 == 1)
    {
      WebCore::LegacyTileGridTile::~LegacyTileGridTile(a15);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)a15;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::LegacyTileCache::setCurrentScale(WebCore::LegacyTileCache *this, float a2)
{
  void *v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id **v10;
  id *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  int v15;

  if (*((float *)this + 40) == a2)
  {
    *((_DWORD *)this + 41) = 0;
    return;
  }
  *((float *)this + 41) = a2;
  if (*((_DWORD *)this + 13) != 4)
  {
    WebCore::LegacyTileCache::commitScaleChange(this);
    if (!*((_BYTE *)this + 60) && (*((_DWORD *)this + 13) - 2) >= 4)
    {
      v4 = (unsigned __int8 *)this + 172;
      if (__ldaxr((unsigned __int8 *)this + 172))
      {
        __clrex();
      }
      else if (!__stxr(1u, v4))
      {
LABEL_11:
        v6 = *((unsigned __int8 *)this + 60);
        if (!*((_BYTE *)this + 60)
          || *((_DWORD *)this + 13) == 3
          || (v7 = *((_QWORD *)this + 10)) == 0
          || *((float *)this + 40) != *(float *)(v7 + 32))
        {
          v7 = *((_QWORD *)this + 9);
        }
        v8 = *(_QWORD *)(v7 + 40);
        if (v8)
        {
          *(_QWORD *)(v7 + 40) = 0;
          v9 = *(unsigned int *)(v8 - 4);
          if ((_DWORD)v9)
          {
            v10 = (id **)(v8 + 8);
            do
            {
              if (*((_DWORD *)v10 - 2) != 0x80000000)
              {
                v11 = *v10;
                *v10 = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 1)
                  {
                    WebCore::LegacyTileGridTile::~LegacyTileGridTile(v11);
                    WTF::fastFree(v12, v13);
                  }
                  else
                  {
                    --*(_DWORD *)v11;
                  }
                }
              }
              v10 += 2;
              --v9;
            }
            while (v9);
          }
          WTF::fastFree((WTF *)(v8 - 16), v3);
          v6 = *((unsigned __int8 *)this + 60);
        }
        if (!v6
          || *((_DWORD *)this + 13) == 3
          || (v14 = *((_QWORD *)this + 10)) == 0
          || *((float *)this + 40) != *(float *)(v14 + 32))
        {
          v14 = *((_QWORD *)this + 9);
        }
        WebCore::LegacyTileGrid::createTiles((_QWORD *)v14, 0);
        v15 = __ldxr(v4);
        if (v15 == 1)
        {
          if (!__stlxr(0, v4))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WebCore::LegacyTileCache *)((char *)this + 172));
        return;
      }
      MEMORY[0x19AEA534C]((char *)this + 172);
      goto LABEL_11;
    }
  }
}

void sub_1952D9270(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::LegacyTileCache::commitScaleChange(WebCore::LegacyTileCache *this)
{
  unsigned __int8 *v2;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v27;
  int v28;
  CATransform3D v29;

  v2 = (unsigned __int8 *)this + 172;
  if (__ldaxr((unsigned __int8 *)this + 172))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 172);
LABEL_5:
  v4 = *((float *)this + 42);
  if (v4 != 0.0)
  {
    *(float *)(*((_QWORD *)this + 9) + 32) = v4;
    *((_DWORD *)this + 42) = 0;
  }
  v5 = *((float *)this + 41);
  if (*((_BYTE *)this + 60))
  {
    if (v5 == 0.0)
    {
      v5 = *((float *)this + 40);
    }
    else
    {
      *((float *)this + 40) = v5;
      *((_DWORD *)this + 41) = 0;
    }
    if (v5 != *(float *)(*((_QWORD *)this + 9) + 32))
    {
      v6 = *((_QWORD *)this + 10);
      if (!v6)
      {
        v7 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v7 = this;
        *(_QWORD *)(v7 + 8) = -[LegacyTileHostLayer initWithTileGrid:]([LegacyTileHostLayer alloc], "initWithTileGrid:", v7);
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = *(_QWORD *)((char *)this + 44);
        *(_DWORD *)(v7 + 32) = 1065353216;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0x8000000080000000;
        v8 = (id *)*((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = v7;
        if (v8)
        {
          WebCore::LegacyTileGrid::~LegacyTileGrid(v8);
          WTF::fastFree(v9, v10);
        }
        objc_msgSend((id)objc_msgSend(*(id *)this, "hostLayer"), "addSublayer:", *(_QWORD *)(*((_QWORD *)this + 10) + 8));
        WebCore::LegacyTileCache::hostLayerSizeChanged(this);
        v6 = *((_QWORD *)this + 10);
        v5 = *((float *)this + 40);
      }
      *(float *)(v6 + 32) = v5;
    }
    if (*((_DWORD *)this + 13) == 3)
      goto LABEL_32;
    if (*((_BYTE *)this + 60))
    {
      v11 = *((_QWORD *)this + 10);
      if (v11)
      {
        v12 = *((_QWORD *)this + 9);
        if (v5 == *(float *)(v11 + 32))
        {
          v13 = *((_QWORD *)this + 10);
          if (v11 != v12)
          {
            if (!v12)
              goto LABEL_32;
            goto LABEL_31;
          }
        }
        else
        {
          v13 = *((_QWORD *)this + 9);
        }
      }
      else
      {
        v13 = *((_QWORD *)this + 9);
      }
    }
    else
    {
      v13 = *((_QWORD *)this + 9);
      v11 = *((_QWORD *)this + 10);
    }
    v12 = v11;
    v11 = v13;
    if (!v12)
    {
LABEL_32:
      v14 = *((_QWORD *)this + 9);
      v15 = *(void **)(v14 + 8);
      CATransform3DMakeScale(&v29, (float)(v5 / *(float *)(v14 + 32)), (float)(v5 / *(float *)(v14 + 32)), 1.0);
      objc_msgSend(v15, "setTransform:", &v29);
      v16 = *((_QWORD *)this + 9);
      v17 = (void *)objc_msgSend(**(id **)v16, "hostLayer");
      objc_msgSend(v17, "bounds");
      objc_msgSend(v17, "convertRect:toLayer:", *(_QWORD *)(v16 + 8));
      v19 = v18;
      v21 = v20;
      objc_msgSend(*(id *)(v16 + 8), "bounds");
      v23 = v22;
      v24 = round(v21);
      if (v25 != round(v19) || v23 != v24)
        objc_msgSend(*(id *)(v16 + 8), "setBounds:");
      if (!*((_BYTE *)this + 61))
      {
        *((_BYTE *)this + 61) = 1;
        v27 = *((double *)this + 2);
        *(_QWORD *)&v29.m11 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v29.m12 = 3221225472;
        *(_QWORD *)&v29.m13 = ___ZN7WebCore15LegacyTileCache11layoutTilesEv_block_invoke;
        *(_QWORD *)&v29.m14 = &unk_1E3353458;
        v29.m21 = v27;
        *(_QWORD *)&v29.m22 = this;
        WebThreadRun(&v29);
      }
      goto LABEL_39;
    }
LABEL_31:
    objc_msgSend((id)objc_msgSend(*(id *)this, "hostLayer"), "insertSublayer:above:", *(_QWORD *)(v11 + 8), *(_QWORD *)(v12 + 8));
    v5 = *((float *)this + 40);
    goto LABEL_32;
  }
  if (v5 != 0.0)
  {
    *((float *)this + 40) = v5;
    *(float *)(*((_QWORD *)this + 9) + 32) = v5;
  }
  *((_DWORD *)this + 41) = 0;
LABEL_39:
  v28 = __ldxr(v2);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_43;
  }
  if (__stlxr(0, v2))
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

void sub_1952D9560(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WebCore::LegacyTileGrid *WebCore::LegacyTileGrid::createTiles(_QWORD *a1, int a2)
{
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  WebCore::LegacyTileGrid *result;
  double v15;
  double v16;
  double v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void *v60;
  double v61;
  double v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  id **v69;
  id *v70;
  WTF *v71;
  void *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  double v79;
  unint64_t v80;
  unsigned int v81;
  double v82;
  int v83;
  int v84;
  double v85;
  double v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  void *v92;
  double v93;
  double v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v116;
  int v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  int v125;
  int v126;
  double v127;
  BOOL v128;
  int v129;
  double v130;
  double v131;
  int v132;
  double v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int *v137;
  int v138;
  int v139;
  BOOL v140;
  int v141;
  int *v142;
  id *v144;
  int v145;
  int v146;
  WTF *v147;
  char *v148;
  WTF *v149;
  void *v150;
  unint64_t v152;
  double v153;
  void *v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  _BOOL4 v158;
  char *v159;
  unsigned __int8 *v160;
  WTF *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  WebCore::LegacyTileGrid *v167;
  float v168;
  float v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  id **v173;
  id *v174;
  WTF *v175;
  void *v176;
  double v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  WTF *v189;
  uint64_t v190;

  v4 = *a1;
  v5 = (void *)a1[1];
  if (*(_BYTE *)(*a1 + 40))
  {
    v6 = *(float *)(v4 + 24);
    v7 = *(float *)(v4 + 28);
    v8 = *(float *)(v4 + 32);
    v9 = *(float *)(v4 + 36);
  }
  else
  {
    objc_msgSend(*(id *)v4, "extendedVisibleRect");
    v6 = v10;
    v7 = v11;
    v8 = v12;
    v9 = v13;
  }
  result = (WebCore::LegacyTileGrid *)objc_msgSend(v5, "convertRect:fromLayer:", objc_msgSend(*(id *)v4, "hostLayer"), v6, v7, v8, v9);
  v18 = v17;
  v20 = v19;
  v21 = floorf(v20);
  v22 = 2147500000.0;
  if (v21 < 2147500000.0)
  {
    v22 = -2147500000.0;
    if (v21 > -2147500000.0)
      v22 = (float)(int)v21;
  }
  v23 = v16;
  v24 = v15;
  v25 = floorf(v18);
  v26 = 2147500000.0;
  if (v25 < 2147500000.0)
  {
    v26 = -2147500000.0;
    if (v25 > -2147500000.0)
      v26 = (float)(int)v25;
  }
  v27 = v18 + v23;
  v28 = ceilf(v20 + v24);
  v29 = 2147500000.0;
  if (v28 < 2147500000.0)
  {
    v29 = -2147500000.0;
    if (v28 > -2147500000.0)
      v29 = (float)(int)v28;
  }
  v30 = ceilf(v27);
  v31 = 2147500000.0;
  if (v30 < 2147500000.0)
  {
    v31 = -2147500000.0;
    if (v30 > -2147500000.0)
      v31 = (float)(int)v30;
  }
  if (v22 > -2147500000.0)
    v32 = (int)v22;
  else
    v32 = 0x80000000;
  if (v22 < 2147500000.0)
    v33 = v32;
  else
    v33 = 0x7FFFFFFFLL;
  v187 = v33;
  if (v26 > -2147500000.0)
    v34 = (int)v26;
  else
    v34 = 0x80000000;
  if (v26 < 2147500000.0)
    LODWORD(v35) = v34;
  else
    LODWORD(v35) = 0x7FFFFFFF;
  v36 = v29 - v22;
  v37 = v31 - v26;
  v38 = 0x80000000;
  if (v36 > -2147500000.0)
    v38 = (int)v36;
  if (v36 < 2147500000.0)
    v39 = v38;
  else
    v39 = 0x7FFFFFFFLL;
  v40 = 0x8000000000000000;
  if (v37 > -2147500000.0)
    v40 = (unint64_t)(int)v37 << 32;
  if (v37 < 2147500000.0)
    v41 = v40;
  else
    v41 = 0x7FFFFFFF00000000;
  if (*(_DWORD *)(*a1 + 52) == 5)
    v35 = 0;
  else
    v35 = v35;
  v186 = v35;
  v42 = v39 - 1;
  if ((int)v39 < 1)
    return result;
  v43 = HIDWORD(v41);
  v44 = HIDWORD(v41) - 1;
  if (SHIDWORD(v41) < 1)
    return result;
  v45 = WebCore::LegacyTileGrid::dropInvalidTiles((id *)a1);
  v179 = a2;
  v178 = v39;
  if (*(_DWORD *)(*a1 + 52) == 1
    || !*(_BYTE *)(*a1 + 67)
    || (v46 = WTF::MemoryPressureHandler::singleton(v45), v47 = atomic_load((unsigned __int8 *)(v46 + 4)), v47 == 2)
    || *(_BYTE *)(v46 + 7))
  {
    v50 = v41 | v39;
    v48 = v187 | (v186 << 32);
    v51 = a1[5];
    goto LABEL_51;
  }
  LODWORD(v189) = v187 - (v39 >> 1);
  HIDWORD(v189) = v186 - HIDWORD(v41);
  LODWORD(v190) = (v39 & 0xFFFFFFFE) + v39;
  HIDWORD(v190) = 3 * HIDWORD(v41);
  v48 = WebCore::LegacyTileGrid::adjustCoverRectForPageBounds((id *)a1, (const WebCore::IntRect *)&v189);
  v50 = v49;
  v51 = a1[5];
  if (!v51 || !*(_DWORD *)(v51 - 12))
  {
LABEL_51:
    v55 = *((_DWORD *)a1 + 6);
    v54 = *((_DWORD *)a1 + 7);
    v56 = v42 / v55;
    v52 = *((_DWORD *)a1 + 4);
    LODWORD(v53) = *((_DWORD *)a1 + 5);
    if (v52)
      v57 = v55 - v52;
    else
      v57 = 0;
    v58 = v54 - v53;
    if (!(_DWORD)v53)
      v58 = 0;
    v59 = v44 / v54;
    if (!v51
      || !*(_DWORD *)(v51 - 12)
      || (((v57 + (int)v187 + v42) / v55) & ~(((v57 + (int)v187 + v42) / v55) >> 31))
       - (((v57 + (int)v187) / v55) & ~(((v57 + (int)v187) / v55) >> 31)) != v56
      && (((v58 + (int)v186 + v44) / v54) & ~(((v58 + (int)v186 + v44) / v54) >> 31))
       - (((v58 + (int)v186) / v54) & ~(((v58 + (int)v186) / v54) >> 31)) != v59)
    {
      objc_msgSend((id)a1[1], "size", v178);
      v63 = *((_DWORD *)a1 + 6);
      if ((int)v63 >= (int)v62)
      {
        v52 = 0;
      }
      else
      {
        v64 = v187 - ((v63 * (v56 + 1) - v178) >> 1);
        v52 = (v64 % v63) & ~((int)(v64 % v63) >> 31);
      }
      v65 = *((_DWORD *)a1 + 7);
      if ((int)v65 >= (int)v61)
      {
        v53 = 0;
      }
      else
      {
        v66 = v186 - ((v65 * (v59 + 1) - v43) >> 1);
        v53 = (v66 % v65) & ~((int)(v66 % v65) >> 31);
      }
      if (v52 != *((_DWORD *)a1 + 4) || (_DWORD)v53 != *((_DWORD *)a1 + 5))
      {
        v67 = a1[5];
        if (v67)
        {
          a1[5] = 0;
          v68 = *(unsigned int *)(v67 - 4);
          if ((_DWORD)v68)
          {
            v69 = (id **)(v67 + 8);
            do
            {
              if (*((_DWORD *)v69 - 2) != 0x80000000)
              {
                v70 = *v69;
                *v69 = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 1)
                  {
                    WebCore::LegacyTileGridTile::~LegacyTileGridTile(v70);
                    WTF::fastFree(v71, v72);
                  }
                  else
                  {
                    --*(_DWORD *)v70;
                  }
                }
              }
              v69 += 2;
              --v68;
            }
            while (v68);
          }
          WTF::fastFree((WTF *)(v67 - 16), v60);
        }
        a1[2] = v52 | (unint64_t)(v53 << 32);
      }
    }
    goto LABEL_80;
  }
  v52 = *((_DWORD *)a1 + 4);
  LODWORD(v53) = *((_DWORD *)a1 + 5);
LABEL_80:
  v189 = 0;
  v190 = 0;
  v73 = *((_DWORD *)a1 + 6);
  v74 = *((_DWORD *)a1 + 7);
  v75 = v73 - v52;
  if (!v52)
    v75 = 0;
  v76 = v74 - v53;
  if (!(_DWORD)v53)
    v76 = 0;
  v77 = v76 + HIDWORD(v48);
  v78 = (v77 / v74) & ~((v77 / v74) >> 31);
  v79 = 0.0;
  v181 = ((HIDWORD(v50) + v77 - 1) / v74) & ~(((HIDWORD(v50) + v77 - 1) / v74) >> 31);
  if (v78 > v181
    || (v180 = ((v75 + (int)v48) / v73) & ~(((v75 + (int)v48) / v73) >> 31),
        v185 = (((int)v50 + (int)v48 + v75 - 1) / v73) & ~((((int)v50 + (int)v48 + v75 - 1) / v73) >> 31),
        v180 > v185))
  {
    v80 = 0;
    v81 = 0;
    v82 = INFINITY;
    goto LABEL_179;
  }
  v81 = 0;
  v184 = v187 + v178;
  if ((int)v178 >= 0)
    v83 = v178;
  else
    v83 = v178 + 1;
  if ((v43 & 0x80000000) == 0)
    v84 = v43;
  else
    v84 = v43 + 1;
  v183 = v187 + (v83 >> 1);
  v182 = v186 + (v84 >> 1);
  v85 = (double)(int)v43;
  v86 = (double)(int)v178;
  v82 = INFINITY;
  while (2)
  {
    v87 = v180;
    do
    {
      v188 = __PAIR64__(v78, v87);
      v88 = *((_DWORD *)a1 + 6);
      v89 = *((_DWORD *)a1 + 7);
      v90 = *((_DWORD *)a1 + 4);
      v91 = *((_DWORD *)a1 + 5);
      objc_msgSend((id)a1[1], "size", v178);
      v95 = v91 - v89;
      if (!v91)
        v95 = 0;
      v96 = v95 + v89 * v78;
      v97 = v90 - v88;
      if (!v90)
        v97 = 0;
      v98 = v97 + v88 * v87;
      v99 = (int)v93;
      v100 = (int)v94;
      v101 = v98 & ~(v98 >> 31);
      v102 = v96 & ~(v96 >> 31);
      v103 = v98 + v88;
      if ((int)v93 >= v103)
        v99 = v103;
      v104 = v96 + v89;
      if (v100 >= v104)
        v100 = v104;
      v105 = v101 < v99 && v102 < v100;
      if (v105)
        v106 = v101;
      else
        v106 = 0;
      if (v105)
        v107 = v102;
      else
        v107 = 0;
      if (v105)
        v108 = v99;
      else
        v108 = 0;
      if (v105)
        v109 = v100;
      else
        v109 = 0;
      v110 = v109 - v107;
      if (v108 - v106 >= 1
        && v110 >= 1
        && (int)v187 < v108
        && v106 < v184
        && (int)v186 < v109
        && v107 < (int)v186 + (int)v43)
      {
        v133 = 0.0;
      }
      else
      {
        v116 = v108 - v106 + (v108 - v106 < 0);
        v117 = v110 + (v110 < 0);
        v118 = *(int *)(*a1 + 56);
        v119 = 1.0;
        v120 = 1.0;
        v121 = 1.0;
        v122 = 1.0;
        v123 = 1.0;
        v124 = 1.0;
        if (v118 <= 3)
        {
          v119 = dbl_1968DDD98[v118];
          v120 = dbl_1968DDDB8[v118];
          v121 = dbl_1968DDDD8[v118];
          v122 = dbl_1968DDDF8[v118];
          v123 = dbl_1968DDE18[v118];
          v124 = dbl_1968DDE38[v118];
        }
        v125 = v106 + (v116 >> 1);
        v126 = v107 + (v117 >> 1);
        v127 = v124 * v85 / v86;
        v128 = __OFSUB__(v125, v183);
        v129 = v125 - v183;
        if (v129 < 0 != v128)
          v122 = v123;
        v130 = v122 * v127;
        v131 = v121 * v86 / v85;
        v128 = __OFSUB__(v126, v182);
        v132 = v126 - v182;
        if (v132 < 0 != v128)
          v119 = v120;
        v133 = v119 * v131 * (double)v132 * (v119 * v131 * (double)v132) + v130 * (double)v129 * (v130 * (double)v129);
      }
      if (v133 > v79)
        v79 = v133;
      v134 = a1[5];
      if (v134)
      {
        v135 = *(_DWORD *)(v134 - 8);
        v136 = v135 & ((0xD7862706ELL
                                    * (unint64_t)(277951225 * v188 + 95187966 * HIDWORD(v188))) >> 4);
        v137 = (int *)(v134 + 16 * v136);
        v139 = *v137;
        v138 = v137[1];
        v140 = *v137 == (_DWORD)v188 && v138 == HIDWORD(v188);
        if (v140)
        {
LABEL_157:
          v144 = *(id **)(v134 + 16 * v136 + 8);
          if (v144)
          {
            v145 = (*(_DWORD *)v144)++;
            if (v145)
            {
              *(_DWORD *)v144 = v145;
            }
            else
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v144);
              WTF::fastFree(v149, v150);
            }
            goto LABEL_172;
          }
        }
        else
        {
          v141 = 1;
          while (v139 || v138 != 0x80000000)
          {
            v136 = ((_DWORD)v136 + v141) & v135;
            v142 = (int *)(v134 + 16 * v136);
            v139 = *v142;
            v138 = v142[1];
            ++v141;
            if (v139 == (_DWORD)v188 && v138 == HIDWORD(v188))
              goto LABEL_157;
          }
        }
      }
      ++v81;
      if (v133 <= v82)
      {
        v146 = v190;
        if (v133 < v82)
        {
          if ((_DWORD)v190)
          {
            if (HIDWORD(v190))
              HIDWORD(v190) = 0;
            v147 = v189;
            if (v189)
            {
              v189 = 0;
              LODWORD(v190) = 0;
              WTF::fastFree(v147, v92);
              v146 = v190;
            }
          }
        }
        else
        {
          v133 = v82;
        }
        if (HIDWORD(v190) == v146)
        {
          v148 = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, HIDWORD(v190) + 1, (unint64_t)&v188);
          *((_QWORD *)v189 + HIDWORD(v190)) = *(_QWORD *)v148;
        }
        else
        {
          *((_QWORD *)v189 + HIDWORD(v190)) = v188;
        }
        ++HIDWORD(v190);
        v82 = v133;
      }
LABEL_172:
      v140 = v87++ == v185;
    }
    while (!v140);
    v140 = v78++ == v181;
    if (!v140)
      continue;
    break;
  }
  v80 = HIDWORD(v190);
LABEL_179:
  if (v82 > 0.0 && v179 == 0)
    v152 = 0;
  else
    v152 = v80;
  if (v79 >= v82)
    v153 = v82;
  else
    v153 = v79;
  result = (WebCore::LegacyTileGrid *)WebCore::LegacyTileGrid::dropDistantTiles((WebCore::LegacyTileGrid *)a1, v152, v153);
  if (v81)
    v155 = (int)result;
  else
    v155 = 0;
  if (v155 != 1)
    goto LABEL_239;
  if (!v152)
  {
    v159 = (char *)*a1;
    v158 = 1;
    goto LABEL_212;
  }
  v156 = 0;
  v157 = 0;
  do
  {
    if (v157 >= HIDWORD(v190))
    {
      __break(0xC471u);
      return result;
    }
    result = WebCore::LegacyTileGrid::addTileForIndex((WebCore::LegacyTileGrid *)a1, (int32x2_t *)((char *)v189 + v156));
    ++v157;
    v156 += 8;
  }
  while (8 * v152 != v156);
  v158 = v152 < v81;
  v159 = (char *)*a1;
  if (!*((_DWORD *)v159 + 39))
    goto LABEL_212;
  v160 = (unsigned __int8 *)(v159 + 173);
  if (__ldaxr((unsigned __int8 *)v159 + 173))
  {
    __clrex();
    goto LABEL_201;
  }
  if (__stxr(1u, v160))
LABEL_201:
    result = (WebCore::LegacyTileGrid *)MEMORY[0x19AEA534C](v159 + 173);
  v162 = (WTF *)*((_QWORD *)v159 + 18);
  v163 = *((unsigned int *)v159 + 39);
  *((_QWORD *)v159 + 18) = 0;
  *((_QWORD *)v159 + 19) = 0;
  v164 = __ldxr(v160);
  if (v164 != 1)
  {
    __clrex();
    goto LABEL_206;
  }
  if (__stlxr(0, v160))
LABEL_206:
    result = (WebCore::LegacyTileGrid *)WTF::Lock::unlockSlow((WTF::Lock *)(v159 + 173));
  if ((_DWORD)v163)
  {
    v165 = 0;
    v166 = 16 * v163;
    do
    {
      result = WebCore::LegacyTileCache::invalidateTiles((WebCore::LegacyTileCache *)v159, (WTF *)((char *)v162 + v165));
      v165 += 16;
    }
    while (v166 != v165);
  }
  if (v162)
    result = (WebCore::LegacyTileGrid *)WTF::fastFree(v162, v154);
LABEL_212:
  if (v159[60])
  {
    v167 = (WebCore::LegacyTileGrid *)*((_QWORD *)v159 + 10);
    if (!v167 || *((_DWORD *)v159 + 13) == 3)
    {
      result = (WebCore::LegacyTileGrid *)*((_QWORD *)v159 + 9);
      goto LABEL_216;
    }
    v168 = *((float *)v159 + 40);
    v169 = *((float *)v167 + 8);
    result = (WebCore::LegacyTileGrid *)*((_QWORD *)v159 + 9);
    v170 = v168 != v169 || v167 == result;
    if (v170 && (v171 = *((_QWORD *)v167 + 5)) != 0 && *(_DWORD *)(v171 - 12))
    {
      *((_QWORD *)v167 + 5) = 0;
      v172 = *(unsigned int *)(v171 - 4);
      if ((_DWORD)v172)
      {
        v173 = (id **)(v171 + 8);
        do
        {
          if (*((_DWORD *)v173 - 2) != 0x80000000)
          {
            v174 = *v173;
            *v173 = 0;
            if (v174)
            {
              if (*(_DWORD *)v174 == 1)
              {
                WebCore::LegacyTileGridTile::~LegacyTileGridTile(v174);
                WTF::fastFree(v175, v176);
              }
              else
              {
                --*(_DWORD *)v174;
              }
            }
          }
          v173 += 2;
          --v172;
        }
        while (v172);
      }
      result = (WebCore::LegacyTileGrid *)WTF::fastFree((WTF *)(v171 - 16), v154);
    }
    else
    {
      if (v168 != v169)
      {
LABEL_216:
        v140 = result == v167;
        result = (WebCore::LegacyTileGrid *)*((_QWORD *)v159 + 10);
        if (!v140)
          goto LABEL_237;
      }
      result = (WebCore::LegacyTileGrid *)WebCore::LegacyTileGrid::dropDistantTiles(result, 0, 2.22507386e-308);
    }
  }
LABEL_237:
  if (v158)
  {
    *((_QWORD *)v159 + 14) = 0;
    WTF::MonotonicTime::now(result);
    WebCore::TimerBase::setNextFireTime((uint64_t)(v159 + 88), v177 + 0.0);
  }
LABEL_239:
  result = v189;
  if (v189)
  {
    v189 = 0;
    LODWORD(v190) = 0;
    return (WebCore::LegacyTileGrid *)WTF::fastFree(result, v154);
  }
  return result;
}

void sub_1952DA004(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17)
    WTF::fastFree(a17, a2);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore15LegacyTileCache11layoutTilesEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 40);
  result = objc_msgSend(*(id *)(a1 + 32), "isDead");
  if ((result & 1) == 0)
  {
    *(_BYTE *)(v1 + 61) = 0;
    return WebCore::LegacyTileCache::doLayoutTiles(v1);
  }
  return result;
}

uint64_t WebCore::LegacyTileCache::layoutTilesNow(uint64_t this)
{
  int v1;
  uint64_t v2;
  unsigned __int8 *v3;
  float *v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;

  v1 = *(_DWORD *)(this + 52);
  if (v1 != 4)
  {
    v2 = this;
    if (v1 == 3)
      *(_DWORD *)(this + 52) = 1;
    v3 = (unsigned __int8 *)(this + 172);
    if (__ldaxr((unsigned __int8 *)(this + 172)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
LABEL_8:
      if (!*(_BYTE *)(v2 + 60)
        || *(_DWORD *)(v2 + 52) == 3
        || (v5 = *(float **)(v2 + 80)) == 0
        || *(float *)(v2 + 160) != v5[8])
      {
        v5 = *(float **)(v2 + 72);
      }
      this = WebCore::LegacyTileGrid::checkDoSingleTileLayout((WebCore::LegacyTileGrid *)v5);
      if ((this & 1) == 0)
      {
        v6 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)this);
        v8 = atomic_load((unsigned __int8 *)(v6 + 4));
        if (v8 == 2 || *(_BYTE *)(v6 + 7))
          WebCore::LegacyTileCache::removeAllNonVisibleTilesInternal((WebCore::LegacyTileCache *)v2, v7);
        if (!*(_BYTE *)(v2 + 60)
          || *(_DWORD *)(v2 + 52) == 3
          || (v9 = *(_QWORD *)(v2 + 80)) == 0
          || *(float *)(v2 + 160) != *(float *)(v9 + 32))
        {
          v9 = *(_QWORD *)(v2 + 72);
        }
        this = (uint64_t)WebCore::LegacyTileGrid::createTiles((_QWORD *)v9, 0);
      }
      *(_DWORD *)(v2 + 52) = v1;
      v10 = __ldxr(v3);
      if (v10 == 1)
      {
        if (!__stlxr(0, v3))
          return this;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 172));
    }
    MEMORY[0x19AEA534C](this + 172);
    goto LABEL_8;
  }
  return this;
}

void sub_1952DA1B0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

id *WebCore::LegacyTileGrid::addTilesCoveringRect(id *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  id *result;
  double v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int *v35;
  int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;

  v3 = *(_QWORD *)a2;
  v4 = HIDWORD(*(_QWORD *)a2);
  v5 = *((_DWORD *)a2 + 2);
  v6 = *((_DWORD *)a2 + 3);
  result = (id *)objc_msgSend(this[1], "size");
  v10 = (int)v9;
  v11 = v3 & ~((int)v3 >> 31);
  v12 = v4 & ~(v3 >> 63);
  if ((int)v9 >= v5 + (int)v3)
    v10 = v5 + v3;
  v13 = v6 + v4;
  if ((int)v8 < v6 + (int)v4)
    v13 = (int)v8;
  if (v11 < v10 && v12 < v13)
  {
    v15 = *((_DWORD *)this + 4);
    v16 = *((_DWORD *)this + 5);
    v17 = *((_DWORD *)this + 6);
    v18 = *((_DWORD *)this + 7);
    v19 = v15 ? v17 - v15 : 0;
    v20 = v16 ? v18 - v16 : 0;
    v21 = ((v20 + v12) / v18) & ~(((v20 + v12) / v18) >> 31);
    v22 = ((v13 + v20 - 1) / v18) & ~(((v13 + v20 - 1) / v18) >> 31);
    if (v21 <= v22)
    {
      v23 = ((v19 + v11) / v17) & ~(((v19 + v11) / v17) >> 31);
      v24 = ((v10 + v19 - 1) / v17) & ~(((v10 + v19 - 1) / v17) >> 31);
      if (v23 <= v24)
      {
        v25 = v24 + 1;
        do
        {
          v26 = v23;
          do
          {
            v40 = __PAIR64__(v21, v26);
            v27 = this[5];
            if (!v27)
              goto LABEL_36;
            v28 = *(v27 - 2);
            v29 = v28 & ((0xD7862706ELL * (unint64_t)(95187966 * v21 + 277951225 * (_DWORD)v26)) >> 4);
            v30 = &v27[4 * v29];
            v32 = *v30;
            v31 = v30[1];
            v33 = v26 == v32 && v31 == v21;
            if (!v33)
            {
              v34 = 1;
              while ((_DWORD)v32 || v31 != 0x80000000)
              {
                v29 = ((_DWORD)v29 + v34) & v28;
                v35 = &v27[4 * v29];
                v32 = *v35;
                v31 = v35[1];
                ++v34;
                if (v26 == v32 && v31 == v21)
                  goto LABEL_33;
              }
LABEL_36:
              result = (id *)WebCore::LegacyTileGrid::addTileForIndex((WebCore::LegacyTileGrid *)this, (int32x2_t *)&v40);
              goto LABEL_37;
            }
LABEL_33:
            result = *(id **)&v27[4 * v29 + 2];
            if (!result)
              goto LABEL_36;
            v37 = (*(_DWORD *)result)++;
            if (v37)
            {
              *(_DWORD *)result = v37;
            }
            else
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(result);
              result = (id *)WTF::fastFree(v38, v39);
            }
LABEL_37:
            ++v26;
          }
          while (v26 != v25);
          v33 = v21++ == v22;
        }
        while (!v33);
      }
    }
  }
  return result;
}

id *WebCore::LegacyTileCache::removeAllNonVisibleTilesInternal(WebCore::LegacyTileCache *this, void *a2)
{
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id **v9;
  id *v10;
  WTF *v11;
  void *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  float *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  double v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const WebCore::IntRect *v53;
  _QWORD v55[2];
  _QWORD v56[2];
  __int128 v57;

  if (*((_BYTE *)this + 60))
  {
    v3 = *((_QWORD *)this + 10);
    if (*((_DWORD *)this + 13) != 3 && v3 && *((float *)this + 40) == *(float *)(v3 + 32)
      || (v4 = (id *)*((_QWORD *)this + 9), v4 == (id *)v3))
    {
      v5 = *(_QWORD *)(v3 + 40);
      if (v5)
      {
        if (*(_DWORD *)(v5 - 12))
        {
          v6 = *((_QWORD *)this + 9);
          v7 = *(_QWORD *)(v6 + 40);
          if (v7)
          {
            *(_QWORD *)(v6 + 40) = 0;
            v8 = *(unsigned int *)(v7 - 4);
            if ((_DWORD)v8)
            {
              v9 = (id **)(v7 + 8);
              do
              {
                if (*((_DWORD *)v9 - 2) != 0x80000000)
                {
                  v10 = *v9;
                  *v9 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 1)
                    {
                      WebCore::LegacyTileGridTile::~LegacyTileGridTile(v10);
                      WTF::fastFree(v11, v12);
                    }
                    else
                    {
                      --*(_DWORD *)v10;
                    }
                  }
                }
                v9 += 2;
                --v8;
              }
              while (v8);
            }
            WTF::fastFree((WTF *)(v7 - 16), a2);
          }
        }
      }
      v4 = (id *)v3;
    }
  }
  else
  {
    v4 = (id *)*((_QWORD *)this + 9);
  }
  objc_msgSend(v4[1], "size");
  v14 = (int)v13;
  v16 = (int)v15;
  v56[0] = 0;
  v56[1] = v14 | (v16 << 32);
  if (*((_DWORD *)this + 11) >= (int)v14 && *((_DWORD *)this + 12) >= (int)v16)
  {
    v57 = xmmword_1968DDAD0;
    v53 = (const WebCore::IntRect *)v56;
  }
  else
  {
    v18 = (float *)*v4;
    v17 = v4[1];
    if (*((_BYTE *)*v4 + 40))
    {
      v19 = v18[6];
      v20 = v18[7];
      v21 = v18[8];
      v22 = v18[9];
    }
    else
    {
      objc_msgSend(*(id *)v18, "extendedVisibleRect");
      v19 = v23;
      v20 = v24;
      v21 = v25;
      v22 = v26;
    }
    objc_msgSend(v17, "convertRect:fromLayer:", objc_msgSend(*(id *)v18, "hostLayer"), v19, v20, v21, v22);
    v30 = v29;
    v32 = v31;
    v33 = floorf(v32);
    v34 = 2147500000.0;
    if (v33 < 2147500000.0)
    {
      v34 = -2147500000.0;
      if (v33 > -2147500000.0)
        v34 = (float)(int)v33;
    }
    v35 = v28;
    v36 = v27;
    v37 = floorf(v30);
    v38 = 2147500000.0;
    if (v37 < 2147500000.0)
    {
      v38 = -2147500000.0;
      if (v37 > -2147500000.0)
        v38 = (float)(int)v37;
    }
    v39 = v30 + v35;
    v40 = ceilf(v32 + v36);
    v41 = 2147500000.0;
    if (v40 < 2147500000.0)
    {
      v41 = -2147500000.0;
      if (v40 > -2147500000.0)
        v41 = (float)(int)v40;
    }
    v42 = ceilf(v39);
    v43 = 2147500000.0;
    if (v42 < 2147500000.0)
    {
      v43 = -2147500000.0;
      if (v42 > -2147500000.0)
        v43 = (float)(int)v42;
    }
    if (v34 >= 2147500000.0)
    {
      v44 = 0x7FFFFFFFLL;
    }
    else if (v34 <= -2147500000.0)
    {
      v44 = 0x80000000;
    }
    else
    {
      v44 = (int)v34;
    }
    if (v38 >= 2147500000.0)
    {
      v45 = 0x7FFFFFFF00000000;
    }
    else if (v38 <= -2147500000.0)
    {
      v45 = 0x8000000000000000;
    }
    else
    {
      v45 = (unint64_t)(int)v38 << 32;
    }
    v46 = v41 - v34;
    v47 = v43 - v38;
    v48 = 0x7FFFFFFFLL;
    v49 = 0x80000000;
    if (v46 > -2147500000.0)
      v49 = (int)v46;
    if (v46 < 2147500000.0)
      v48 = v49;
    v50 = 0x7FFFFFFF00000000;
    v51 = 0x8000000000000000;
    if (v47 > -2147500000.0)
      v51 = (unint64_t)(int)v47 << 32;
    if (v47 < 2147500000.0)
      v50 = v51;
    v52 = v50 | v48;
    if (*((_DWORD *)*v4 + 13) == 5)
      v45 = 0;
    v55[0] = v45 | v44;
    v55[1] = v52;
    v57 = xmmword_1968DDAD0;
    v53 = (const WebCore::IntRect *)v55;
  }
  return WebCore::LegacyTileGrid::dropTilesBetweenRects(v4, (const WebCore::IntRect *)&v57, v53);
}

uint64_t WebCore::LegacyTileCache::removeAllTiles(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id **v8;
  id *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id **v15;
  id *v16;
  WTF *v17;
  void *v18;
  int v19;

  v2 = this;
  v3 = (unsigned __int8 *)(this + 172);
  if (__ldaxr((unsigned __int8 *)(this + 172)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 172);
LABEL_5:
  v5 = *(_QWORD *)(v2 + 72);
  v6 = *(_QWORD *)(v5 + 40);
  if (v6)
  {
    *(_QWORD *)(v5 + 40) = 0;
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (id **)(v6 + 8);
      do
      {
        if (*((_DWORD *)v8 - 2) != 0x80000000)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v9);
              WTF::fastFree(v10, v11);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    this = WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v12 = *(_QWORD *)(v2 + 80);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      *(_QWORD *)(v12 + 40) = 0;
      v14 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v14)
      {
        v15 = (id **)(v13 + 8);
        do
        {
          if (*((_DWORD *)v15 - 2) != 0x80000000)
          {
            v16 = *v15;
            *v15 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
              {
                WebCore::LegacyTileGridTile::~LegacyTileGridTile(v16);
                WTF::fastFree(v17, v18);
              }
              else
              {
                --*(_DWORD *)v16;
              }
            }
          }
          v15 += 2;
          --v14;
        }
        while (v14);
      }
      this = WTF::fastFree((WTF *)(v13 - 16), a2);
    }
  }
  v19 = __ldxr(v3);
  if (v19 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

void sub_1952DA864(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::LegacyTileCache::removeForegroundTiles(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id **v8;
  id *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id **v15;
  id *v16;
  WTF *v17;
  void *v18;
  int v19;

  v2 = this;
  v3 = (unsigned __int8 *)(this + 172);
  if (__ldaxr((unsigned __int8 *)(this + 172)))
  {
    __clrex();
LABEL_4:
    this = MEMORY[0x19AEA534C](this + 172);
    goto LABEL_5;
  }
  if (__stxr(1u, v3))
    goto LABEL_4;
LABEL_5:
  if (!*(_BYTE *)(v2 + 60))
  {
    v5 = *(_QWORD *)(v2 + 72);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6)
    {
      *(_QWORD *)(v5 + 40) = 0;
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = (id **)(v6 + 8);
        do
        {
          if (*((_DWORD *)v8 - 2) != 0x80000000)
          {
            v9 = *v8;
            *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
              {
                WebCore::LegacyTileGridTile::~LegacyTileGridTile(v9);
                WTF::fastFree(v10, v11);
              }
              else
              {
                --*(_DWORD *)v9;
              }
            }
          }
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      this = WTF::fastFree((WTF *)(v6 - 16), a2);
    }
  }
  v12 = *(_QWORD *)(v2 + 80);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      *(_QWORD *)(v12 + 40) = 0;
      v14 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v14)
      {
        v15 = (id **)(v13 + 8);
        do
        {
          if (*((_DWORD *)v15 - 2) != 0x80000000)
          {
            v16 = *v15;
            *v15 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
              {
                WebCore::LegacyTileGridTile::~LegacyTileGridTile(v16);
                WTF::fastFree(v17, v18);
              }
              else
              {
                --*(_DWORD *)v16;
              }
            }
          }
          v15 += 2;
          --v14;
        }
        while (v14);
      }
      this = WTF::fastFree((WTF *)(v13 - 16), a2);
    }
  }
  v19 = __ldxr(v3);
  if (v19 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

void sub_1952DA9FC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::LegacyTileCache::setTileBordersVisible(uint64_t this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _BOOL4 v27;

  if (*(unsigned __int8 *)(this + 64) == a2)
    return this;
  v2 = this;
  *(_BYTE *)(this + 64) = a2;
  v3 = *(_QWORD **)(this + 72);
  v4 = v3[5];
  if (!v4)
  {
    v6 = 0;
    this = 0;
    v5 = 0;
LABEL_21:
    v11 = v4 + 16 * v5;
    v4 = this;
    goto LABEL_22;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = v4 + 16 * v5;
  if (!*(_DWORD *)(v4 - 12))
  {
    this = v4 + 16 * v5;
    goto LABEL_21;
  }
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    while (1)
    {
      v8 = !*(_DWORD *)v4 && *(_DWORD *)(v4 + 4) == 0x80000000;
      v9 = v8;
      if (*(_DWORD *)v4 != 0x80000000 && !v9)
        break;
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
  }
  v11 = v6;
LABEL_22:
  while (v4 != v6)
  {
    this = WebCore::LegacyTileGridTile::showBorder(*(WebCore::LegacyTileGridTile **)(v4 + 8), (const WebCore::Color *)*(unsigned __int8 *)(*v3 + 64));
    v12 = v4 + 16;
    v4 = v11;
    if (v12 != v11)
    {
      v4 = v12;
      while (1)
      {
        v13 = !*(_DWORD *)v4 && *(_DWORD *)(v4 + 4) == 0x80000000;
        v14 = v13;
        if (*(_DWORD *)v4 != 0x80000000 && !v14)
          break;
        v4 += 16;
        if (v4 == v11)
        {
          v4 = v11;
          break;
        }
      }
    }
  }
  v16 = *(_QWORD **)(v2 + 80);
  if (v16)
  {
    v17 = v16[5];
    if (v17)
    {
      v18 = *(unsigned int *)(v17 - 4);
      v19 = v17 + 16 * v18;
      if (*(_DWORD *)(v17 - 12))
      {
        if ((_DWORD)v18)
        {
          v20 = 16 * v18;
          while (1)
          {
            v21 = !*(_DWORD *)v17 && *(_DWORD *)(v17 + 4) == 0x80000000;
            v22 = v21;
            if (*(_DWORD *)v17 != 0x80000000 && !v22)
              break;
            v17 += 16;
            v20 -= 16;
            if (!v20)
            {
              v17 = v19;
              break;
            }
          }
        }
        v24 = v19;
        goto LABEL_59;
      }
      this = v17 + 16 * v18;
    }
    else
    {
      v19 = 0;
      this = 0;
      v18 = 0;
    }
    v24 = v17 + 16 * v18;
    v17 = this;
LABEL_59:
    while (v17 != v19)
    {
      this = WebCore::LegacyTileGridTile::showBorder(*(WebCore::LegacyTileGridTile **)(v17 + 8), (const WebCore::Color *)*(unsigned __int8 *)(*v16 + 64));
      v25 = v17 + 16;
      v17 = v24;
      if (v25 != v24)
      {
        v17 = v25;
        while (1)
        {
          v26 = !*(_DWORD *)v17 && *(_DWORD *)(v17 + 4) == 0x80000000;
          v27 = v26;
          if (*(_DWORD *)v17 != 0x80000000 && !v27)
            break;
          v17 += 16;
          if (v17 == v24)
          {
            v17 = v24;
            break;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LegacyTileCache::setTilePaintCountersVisible(uint64_t this, char a2)
{
  *(_BYTE *)(this + 65) = a2;
  return this;
}

uint64_t WebCore::LegacyTileGrid::dropDistantTiles(WebCore::LegacyTileGrid *this, int a2, double a3)
{
  int v6;
  int v7;
  double v8;
  const WebCore::IntSize *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  id *v13;
  int v14;
  uint64_t v15;
  int v16;
  double v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  float *v21;
  int v22;
  uint64_t v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _BOOL8 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  float v38;
  double v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  WebCore::LegacyTileGrid *v50;
  float v51;
  float v52;
  uint64_t result;
  int v54;
  float v55;
  float v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  BOOL v65;
  _BOOL4 v66;
  uint64_t *v68;
  double *v69;
  double v70;
  _BOOL8 v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  double v80;
  double v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  double v93;
  int v94;
  int v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  int v104;
  double v105;
  BOOL v106;
  int v107;
  double v108;
  double v109;
  int v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  size_t v117;
  unint64_t v118;
  double *v119;
  double *v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  double *v125;
  uint64_t v126;
  uint64_t v127;
  double *v128;
  double v129;
  uint64_t v130;
  int64_t v131;
  double *v132;
  double *v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  unint64_t v137;
  double *v138;
  double v139;
  double v140;
  uint64_t v141;
  double *v142;
  uint64_t *v143;
  BOOL v144;
  _BOOL4 v145;
  unint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  unsigned int v150;
  id *v151;
  int v152;
  int v153;
  int v154;
  WebCore::LegacyTileGrid *v155;
  __int128 v156;
  size_t v157;
  uint64_t v158;

  v6 = *((_DWORD *)this + 6);
  v7 = *((_DWORD *)this + 7);
  objc_msgSend(**(id **)this, "screenScale");
  *(float *)&v8 = v8;
  LODWORD(v157) = (int)(float)((float)v6 * *(float *)&v8);
  HIDWORD(v157) = (int)(float)((float)v7 * *(float *)&v8);
  v10 = WebCore::LegacyTileLayerPool::bytesBackingLayerWithPixelSize((WebCore::LegacyTileLayerPool *)&v157, v9);
  v11 = v10;
  v13 = (id *)((char *)this + 40);
  v12 = *((_QWORD *)this + 5);
  if (v12)
    v14 = *(_DWORD *)(v12 - 12);
  else
    v14 = 0;
  v155 = this;
  v15 = *(_QWORD *)this;
  if (!WebCore::LegacyTileCache::tileCapacityForGrid(WebCore::LegacyTileGrid *)::capacity)
  {
    v10 = WTF::ramSize((WTF *)v10);
    if (v10 >> 29)
      v16 = 0x4000000;
    else
      v16 = 0x2000000;
    if (v10 >> 30)
      v16 = 0x8000000;
    WebCore::LegacyTileCache::tileCapacityForGrid(WebCore::LegacyTileGrid *)::capacity = v16;
  }
  WTF::WallTime::now((WTF::WallTime *)v10);
  if (v17 - *(double *)&WebCore::systemMemoryLevel(void)::previousCheckTime >= 0.1)
  {
    WebCore::systemMemoryLevel(void)::previousCheckTime = *(_QWORD *)&v17;
    v157 = 4;
    sysctlbyname("kern.memorystatus_level", &WebCore::systemMemoryLevel(void)::memoryFreeLevel, &v157, 0, 0);
  }
  if (WebCore::systemMemoryLevel(void)::memoryFreeLevel > 14)
  {
    if (WebCore::systemMemoryLevel(void)::memoryFreeLevel > 0x13)
    {
      v18 = (3 * WebCore::LegacyTileCache::tileCapacityForGrid(WebCore::LegacyTileGrid *)::capacity) >> 2;
      if (WebCore::systemMemoryLevel(void)::memoryFreeLevel > 0x1D)
        v18 = WebCore::LegacyTileCache::tileCapacityForGrid(WebCore::LegacyTileGrid *)::capacity;
    }
    else
    {
      v18 = WebCore::LegacyTileCache::tileCapacityForGrid(WebCore::LegacyTileGrid *)::capacity >> 1;
    }
  }
  else
  {
    v18 = WebCore::LegacyTileCache::tileCapacityForGrid(WebCore::LegacyTileGrid *)::capacity >> 2;
  }
  v19 = v14 * v11;
  if (*(_BYTE *)(v15 + 60) && *(WebCore::LegacyTileGrid **)(v15 + 72) == v155)
  {
    if (*(_DWORD *)(v15 + 52) == 3 || (v21 = *(float **)(v15 + 80)) == 0 || *(float *)(v15 + 160) != v21[8])
      v21 = (float *)v155;
    if (v21 == (float *)v155)
      v20 = v18;
    else
      v20 = v18 >> 2;
  }
  else
  {
    v20 = (3 * v18) >> 2;
  }
  v22 = v11 * a2 - v20 + v19;
  if (v22 < 1)
    return 1;
  v23 = *(_QWORD *)v155;
  v24 = (void *)*((_QWORD *)v155 + 1);
  if (*(_BYTE *)(*(_QWORD *)v155 + 40))
  {
    v25 = *(float *)(v23 + 24);
    v26 = *(float *)(v23 + 28);
    v27 = *(float *)(v23 + 32);
    v28 = *(float *)(v23 + 36);
  }
  else
  {
    objc_msgSend(*(id *)v23, "extendedVisibleRect");
    v25 = v30;
    v26 = v31;
    v27 = v32;
    v28 = v33;
  }
  objc_msgSend(v24, "convertRect:fromLayer:", objc_msgSend(*(id *)v23, "hostLayer"), v25, v26, v27, v28);
  v38 = v37;
  v40 = v39;
  v41 = floorf(v40);
  v42 = 2147500000.0;
  if (v41 < 2147500000.0)
  {
    v42 = -2147500000.0;
    if (v41 > -2147500000.0)
      v42 = (float)(int)v41;
  }
  v43 = v36;
  v44 = v35;
  v45 = floorf(v38);
  v46 = 2147500000.0;
  if (v45 < 2147500000.0)
  {
    v46 = -2147500000.0;
    if (v45 > -2147500000.0)
      v46 = (float)(int)v45;
  }
  v47 = v38 + v43;
  v48 = ceilf(v40 + v44);
  v49 = 2147500000.0;
  v50 = v155;
  if (v48 < 2147500000.0)
  {
    v49 = -2147500000.0;
    if (v48 > -2147500000.0)
      v49 = (float)(int)v48;
  }
  v51 = ceilf(v47);
  v52 = 2147500000.0;
  if (v51 < 2147500000.0)
  {
    v52 = -2147500000.0;
    if (v51 > -2147500000.0)
      v52 = (float)(int)v51;
  }
  if (v42 >= 2147500000.0)
  {
    result = 0x7FFFFFFFLL;
  }
  else if (v42 <= -2147500000.0)
  {
    result = 0x80000000;
  }
  else
  {
    result = (int)v42;
  }
  if (v46 >= 2147500000.0)
  {
    v54 = 0x7FFFFFFF;
  }
  else if (v46 <= -2147500000.0)
  {
    v54 = 0x80000000;
  }
  else
  {
    v54 = (int)v46;
  }
  v55 = v49 - v42;
  v56 = v52 - v46;
  if (v55 >= 2147500000.0)
  {
    v57 = 0x7FFFFFFF;
  }
  else if (v55 <= -2147500000.0)
  {
    v57 = 0x80000000;
  }
  else
  {
    v57 = (int)v55;
  }
  if (v56 >= 2147500000.0)
  {
    v58 = 0x7FFFFFFF;
  }
  else if (v56 <= -2147500000.0)
  {
    v58 = 0x80000000;
  }
  else
  {
    v58 = (int)v56;
  }
  v59 = *(_DWORD *)(*(_QWORD *)v155 + 52);
  v157 = 0;
  v158 = 0;
  v60 = *((_QWORD *)v155 + 5);
  if (v60)
  {
    v61 = *(unsigned int *)(v60 - 4);
    v62 = (uint64_t *)(v60 + 16 * v61);
    if (*(_DWORD *)(v60 - 12))
    {
      v63 = (uint64_t *)*((_QWORD *)v155 + 5);
      if ((_DWORD)v61)
      {
        v64 = 16 * v61;
        v63 = (uint64_t *)*((_QWORD *)v155 + 5);
        while (1)
        {
          v65 = !*(_DWORD *)v63 && *((_DWORD *)v63 + 1) == 0x80000000;
          v66 = v65;
          if (*(_DWORD *)v63 != 0x80000000 && !v66)
            break;
          v63 += 2;
          v64 -= 16;
          if (!v64)
          {
            v63 = v62;
            goto LABEL_77;
          }
        }
      }
      goto LABEL_77;
    }
    v63 = (uint64_t *)(v60 + 16 * v61);
  }
  else
  {
    v63 = 0;
    v61 = 0;
  }
  v62 = (uint64_t *)(v60 + 16 * v61);
LABEL_77:
  if (v60)
    v68 = (uint64_t *)(v60 + 16 * *(unsigned int *)(v60 - 4));
  else
    v68 = 0;
  if (v68 == v63)
  {
    v69 = 0;
  }
  else
  {
    v150 = v20;
    v151 = v13;
    v152 = a2;
    v69 = 0;
    LODWORD(v70) = 0;
    v72 = v57 < 1 || v58 < 1;
    v73 = v57 + result;
    if (v59 == 5)
      v74 = 0;
    else
      v74 = v54;
    v75 = v58 + v74;
    if (v57 >= 0)
      v76 = v57;
    else
      v76 = v57 + 1;
    if (v58 >= 0)
      v77 = v58;
    else
      v77 = v58 + 1;
    v78 = (result + (v76 >> 1));
    v79 = v74 + (v77 >> 1);
    v80 = (double)v58;
    v81 = (double)v57;
    v82 = v22 / v11;
    v153 = v22 / v11;
    v154 = v79;
    do
    {
      v83 = v63[1];
      v84 = *(_QWORD *)(v83 + 24);
      v85 = *(_QWORD *)(v83 + 32);
      v86 = HIDWORD(v84);
      v87 = HIDWORD(v85);
      if (v72
        || ((int)v85 >= 1 ? (v88 = SHIDWORD(v85) < 1) : (v88 = 1),
            !v88 ? (v89 = (int)v85 + (int)v84 <= (int)result) : (v89 = 1),
            !v89 ? (v90 = v73 <= (int)v84) : (v90 = 1),
            !v90 ? (v91 = HIDWORD(v85) + HIDWORD(v84) <= v74) : (v91 = 1),
            !v91 ? (v92 = v75 <= SHIDWORD(v84)) : (v92 = 1),
            v92))
      {
        v94 = v85 + ((v85 & 0x80000000) != 0);
        v95 = v87 + ((v87 & 0x80000000) != 0);
        v96 = *(int *)(*(_QWORD *)v50 + 56);
        v97 = 1.0;
        v98 = 1.0;
        v99 = 1.0;
        v100 = 1.0;
        v101 = 1.0;
        v102 = 1.0;
        if (v96 <= 3)
        {
          v97 = dbl_1968DDD98[v96];
          v98 = dbl_1968DDDB8[v96];
          v99 = dbl_1968DDDD8[v96];
          v100 = dbl_1968DDDF8[v96];
          v101 = dbl_1968DDE18[v96];
          v102 = dbl_1968DDE38[v96];
        }
        v103 = v84 + (v94 >> 1);
        v104 = v86 + (v95 >> 1);
        v105 = v102 * v80 / v81;
        v106 = __OFSUB__(v103, (_DWORD)v78);
        v107 = v103 - v78;
        if (v107 < 0 != v106)
          v100 = v101;
        v108 = v100 * v105;
        v109 = v99 * v81 / v80;
        v106 = __OFSUB__(v104, v79);
        v110 = v104 - v79;
        if (v110 < 0 != v106)
          v97 = v98;
        v93 = v97 * v109 * (double)v110 * (v97 * v109 * (double)v110) + v108 * (double)v107 * (v108 * (double)v107);
      }
      else
      {
        v93 = 0.0;
      }
      if (v93 > a3)
      {
        v111 = *v63;
        *(double *)&v156 = v93;
        *((_QWORD *)&v156 + 1) = v111;
        if (LODWORD(v70) == (_DWORD)v158)
        {
          v112 = v72;
          v113 = v78;
          v114 = result;
          v115 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v157, LODWORD(v70) + 1, (unint64_t)&v156);
          v116 = HIDWORD(v158);
          v117 = v157;
          *(_OWORD *)(v157 + 16 * HIDWORD(v158)) = *(_OWORD *)v115;
          v50 = v155;
          result = v114;
          v69 = (double *)v117;
          v78 = v113;
          v72 = v112;
          v82 = v153;
          v79 = v154;
        }
        else
        {
          *(_OWORD *)&v69[2 * LODWORD(v70)] = v156;
          v116 = HIDWORD(v158);
          v69 = (double *)v157;
        }
        *(_QWORD *)&v70 = (v116 + 1);
        HIDWORD(v158) = LODWORD(v70);
        if (LODWORD(v70) >= 2)
        {
          v118 = (unint64_t)(*(_QWORD *)&v70 - 2) >> 1;
          v119 = &v69[2 * v118];
          v120 = &v69[2 * LODWORD(v70)];
          v122 = *(v120 - 2);
          v121 = v120 - 2;
          v123 = v122;
          v124 = *v119;
          if (*v119 > v122)
          {
            v70 = v69[2 * LODWORD(v70) - 1];
            do
            {
              v125 = v119;
              *v121 = v124;
              v121[1] = v119[1];
              if (!v118)
                break;
              v118 = (v118 - 1) >> 1;
              v119 = &v69[2 * v118];
              v124 = *v119;
              v121 = v125;
            }
            while (*v119 > v123);
            *v125 = v123;
            v125[1] = v70;
            LODWORD(v70) = HIDWORD(v158);
          }
        }
        if (LODWORD(v70) > v82)
        {
          if (LODWORD(v70) != 1)
          {
            v126 = 0;
            v127 = LODWORD(v70);
            v128 = &v69[2 * LODWORD(v70)];
            v129 = *v69;
            v130 = *((_QWORD *)v69 + 1);
            v131 = ((unint64_t)LODWORD(v70) - 2) >> 1;
            v132 = v69;
            do
            {
              v133 = &v132[2 * v126 + 2];
              v134 = (2 * v126) | 1;
              v126 = 2 * v126 + 2;
              if (v126 >= v127)
              {
                v135 = *v133;
                v126 = v134;
              }
              else
              {
                v135 = *v133;
                if (*v133 <= v133[2])
                {
                  v126 = v134;
                }
                else
                {
                  v135 = v133[2];
                  v133 += 2;
                }
              }
              *v132 = v135;
              v132[1] = v133[1];
              v132 = v133;
            }
            while (v126 <= v131);
            if (v133 == v128 - 2)
            {
              *v133 = v129;
              *((_QWORD *)v133 + 1) = v130;
            }
            else
            {
              *v133 = *(v128 - 2);
              v133[1] = *(v128 - 1);
              *(v128 - 2) = v129;
              *((_QWORD *)v128 - 1) = v130;
              v136 = (char *)v133 - (char *)v69 + 16;
              if (v136 >= 17)
              {
                v137 = (((unint64_t)v136 >> 4) - 2) >> 1;
                v138 = &v69[2 * v137];
                v139 = *v138;
                v140 = *v133;
                if (*v138 > *v133)
                {
                  v141 = *((_QWORD *)v133 + 1);
                  do
                  {
                    v142 = v138;
                    *v133 = v139;
                    v133[1] = v138[1];
                    if (!v137)
                      break;
                    v137 = (v137 - 1) >> 1;
                    v138 = &v69[2 * v137];
                    v139 = *v138;
                    v133 = v142;
                  }
                  while (*v138 > v140);
                  *v142 = v140;
                  *((_QWORD *)v142 + 1) = v141;
                }
              }
            }
          }
          if (!HIDWORD(v158))
          {
            __break(0xC471u);
            return result;
          }
          LODWORD(v70) = --HIDWORD(v158);
        }
      }
      v143 = v63 + 2;
      v63 = v62;
      if (v143 != v62)
      {
        v63 = v143;
        while (1)
        {
          v144 = !*(_DWORD *)v63 && *((_DWORD *)v63 + 1) == 0x80000000;
          v145 = v144;
          if (*(_DWORD *)v63 != 0x80000000 && !v145)
            break;
          v63 += 2;
          if (v63 == v62)
          {
            v63 = v62;
            break;
          }
        }
      }
    }
    while (v63 != v68);
    a2 = v152;
    if (LODWORD(v70))
    {
      v147 = 0;
      v148 = 16 * LODWORD(v70);
      v13 = v151;
      do
      {
        WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::remove(v151, LODWORD(v69[v147 / 8 + 1]), HIDWORD(v69[v147 / 8 + 1]));
        v147 += 16;
      }
      while (v148 != v147);
    }
    else
    {
      v13 = v151;
    }
    v20 = v150;
  }
  if (a3 == 0.0)
  {
    v29 = 1;
    if (!v69)
      return v29;
  }
  else
  {
    v149 = *v13;
    if (*v13)
      LODWORD(v149) = *(v149 - 3);
    v29 = ((_DWORD)v149 + a2) * v11 <= v20;
    if (!v69)
      return v29;
  }
  v157 = 0;
  LODWORD(v158) = 0;
  WTF::fastFree((WTF *)v69, v34);
  return v29;
}

void sub_1952DB518(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17)
    WTF::fastFree(a17, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LegacyTileCache::drawLayer(uint64_t a1, void *a2, CGContext *a3, int a4)
{
  _opaque_pthread_t *v8;
  _opaque_pthread_t *v9;
  unint64_t v10;
  pthread_key_t *v11;
  _QWORD *v12;
  double x;
  double width;
  double height;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unsigned __int8 *v24;
  void *v25;
  double v26;
  double v27;
  CGImage *v29;
  int v30;
  double v31;
  size_t v32;
  CGFloat v33;
  double v34;
  double v35;
  int v36;
  uint64_t v37;
  double v38;
  double v39;
  float v40;
  unsigned int i;
  uint64_t v42;
  float v43;
  float v44;
  double *v45;
  const WebCore::Color *v46;
  uint64_t v47;
  void *v48;
  CGFloat a;
  double v50;
  double v51;
  double v52;
  double v53;
  CTFontRef v54;
  void *v55;
  void *v56;
  const __CFAllocator *v57;
  const __CFDictionary *v58;
  size_t v59;
  const __CFString *v60;
  const __CFAttributedString *v61;
  const __CTLine *v62;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  double y;
  CGAffineTransform color;
  void *values[2];
  void *keys[2];
  UInt8 __str[16];
  uint64_t v72;
  CGRect ClipBoundingBox;
  CGRect v74;
  CGRect v75;
  CGRect v76;

  v72 = *MEMORY[0x1E0C80C00];
  if (webThreadStarted == 1)
  {
    v8 = (_opaque_pthread_t *)webThread;
    v9 = pthread_self();
    if (!pthread_equal(v8, v9))
      pthread_main_np();
  }
  v10 = atomic_load(&CurrentThreadContext(void)::flag);
  if (v10 != -1)
  {
    *(_QWORD *)&color.a = keys;
    *(_QWORD *)__str = &color;
    std::__call_once(&CurrentThreadContext(void)::flag, __str, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>);
  }
  v11 = (pthread_key_t *)threadContext;
  v12 = pthread_getspecific(*(_QWORD *)threadContext);
  if (!v12)
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v12[1] = v11;
    pthread_setspecific(*v11, v12);
    *v12 = 0;
  }
  *v12 = a3;
  ClipBoundingBox = CGContextGetClipBoundingBox(a3);
  x = ClipBoundingBox.origin.x;
  y = ClipBoundingBox.origin.y;
  width = ClipBoundingBox.size.width;
  height = ClipBoundingBox.size.height;
  objc_msgSend(a2, "frame");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  CGContextTranslateCTM(a3, -v16, -v18);
  v24 = (unsigned __int8 *)(a1 + 174);
  v25 = (void *)objc_msgSend(*(id *)a1, "hostLayer");
  objc_msgSend(a2, "bounds");
  objc_msgSend(v25, "convertRect:fromLayer:", a2);
  CGContextScaleCTM(a3, v21 / v26, v23 / v27);
  if (__ldaxr((unsigned __int8 *)(a1 + 174)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](a1 + 174);
LABEL_12:
  v29 = *(CGImage **)(a1 + 8);
  if (v29)
    CFRetain(*(CFTypeRef *)(a1 + 8));
  v30 = __ldxr(v24);
  if (v30 != 1)
  {
    __clrex();
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 174));
    if (v29)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (__stlxr(0, v24))
    goto LABEL_19;
  if (v29)
  {
LABEL_17:
    CGContextSetRGBFillColor(a3, 1.0, 1.0, 1.0, 1.0);
    v74 = CGContextGetClipBoundingBox(a3);
    CGContextFillRect(a3, v74);
    objc_msgSend(a2, "contentsScale");
    CGContextScaleCTM(a3, 1.0 / v31, -1.0 / v31);
    v32 = CGImageGetWidth(v29);
    v33 = (double)CGImageGetHeight(v29);
    CGContextTranslateCTM(a3, 0.0, -v33);
    v75.size.width = (double)v32;
    v75.origin.x = 0.0;
    v75.origin.y = 0.0;
    v75.size.height = v33;
    CGContextDrawImage(a3, v75, v29);
    CFRelease(v29);
    goto LABEL_41;
  }
LABEL_20:
  objc_msgSend(a2, "frame");
  v35 = v34;
  if (objc_msgSend(*(id *)a1, "useOrientationDependentFontAntialiasing"))
    v36 = objc_msgSend(a2, "isOpaque");
  else
    v36 = 0;
  +[WAKWindow hasLandscapeOrientation](WAKWindow, "hasLandscapeOrientation");
  CGContextGetFontAntialiasingStyle();
  if (v36)
    CGContextSetFontAntialiasingStyle();
  if (a4 == 1)
    objc_msgSend(*(id *)a1, "setIsInSnapshottingPaint:", 1);
  v37 = objc_msgSend(a2, "regionBeingDrawn");
  objc_msgSend(a2, "contentsScale");
  if (!v37)
    goto LABEL_36;
  v39 = v38;
  CGSRegionEnumerator();
  v40 = 0.0;
  for (i = -11; ; ++i)
  {
    v42 = CGSNextRect();
    if (!v42)
      break;
    v40 = v40 + *(double *)(v42 + 16) * *(double *)(v42 + 24);
  }
  CGSReleaseRegionEnumerator();
  if (i >= 0xFFFFFFF7 && (v43 = v40 / (v39 * v39), v44 = width * height, (float)(1.0 - (float)(v43 / v44)) > 0.5))
  {
    CGSRegionEnumerator();
    while (1)
    {
      v45 = (double *)CGSNextRect();
      if (!v45)
        break;
      objc_msgSend((id)objc_msgSend(*(id *)a1, "hostLayer"), "convertRect:fromLayer:", a2, *v45 / v39, v35 - (v45[1] + v45[3]) / v39, v45[2] / v39, v45[3] / v39);
      objc_msgSend(*(id *)a1, "displayRect:");
    }
    CGSReleaseRegionEnumerator();
  }
  else
  {
LABEL_36:
    objc_msgSend((id)objc_msgSend(*(id *)a1, "hostLayer"), "convertRect:fromLayer:", a2, x, y, width, height);
    objc_msgSend(*(id *)a1, "displayRect:");
  }
  if (a4 == 1)
    objc_msgSend(*(id *)a1, "setIsInSnapshottingPaint:", 0);
  if (v36)
    CGContextSetFontAntialiasingStyle();
LABEL_41:
  objc_msgSend(a2, "setPaintCount:", objc_msgSend(a2, "paintCount") + 1);
  if (*(_BYTE *)(a1 + 65))
  {
    snprintf((char *)__str, 0x10uLL, "%d", objc_msgSend(a2, "paintCount"));
    CGContextSaveGState(a3);
    CGContextTranslateCTM(a3, v17, v19);
    if (*(_QWORD *)(a1 + 72) == objc_msgSend(a2, "tileGrid"))
      v47 = 0x1104000033FF0080;
    else
      v47 = 0x1104000033E60080;
    keys[0] = (void *)v47;
    WebCore::cachedCGColor((WebCore *)keys, v46, &color);
    CGContextSetFillColorWithColor(a3, *(CGColorRef *)&color.a);
    a = color.a;
    color.a = 0.0;
    if (a != 0.0)
      CFRelease(*(CFTypeRef *)&a);
    if (((unint64_t)keys[0] & 0x8000000000000) != 0)
    {
      v64 = (unsigned int *)((unint64_t)keys[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v64);
        WTF::fastFree((WTF *)v64, v48);
      }
    }
    objc_msgSend(a2, "bounds");
    v51 = v50;
    v53 = v52;
    v76.size.width = (double)(12 * strlen((const char *)__str) + 10);
    v76.size.height = 25.0;
    v76.origin.x = v51;
    v76.origin.y = v53;
    CGContextFillRect(a3, v76);
    if (*(_BYTE *)(a1 + 66))
      CGContextSetRGBFillColor(a3, 1.0, 0.0, 0.0, 0.400000006);
    else
      CGContextSetRGBFillColor(a3, 1.0, 1.0, 1.0, 0.600000024);
    memset(&color, 0, sizeof(color));
    CGAffineTransformMakeScale(&color, 1.0, -1.0);
    v54 = CTFontCreateWithName(CFSTR("Helvetica"), 25.0, &color);
    v55 = (void *)*MEMORY[0x1E0CA8558];
    keys[0] = *(void **)MEMORY[0x1E0CA8188];
    keys[1] = v55;
    v56 = (void *)*MEMORY[0x1E0C9AE50];
    values[0] = v54;
    values[1] = v56;
    v57 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v58 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v59 = strlen((const char *)__str);
    v60 = CFStringCreateWithBytesNoCopy(v57, __str, v59, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v61 = CFAttributedStringCreate(v57, v60, v58);
    v62 = CTLineCreateWithAttributedString(v61);
    CGContextSetTextPosition(a3, v51 + 3.0, v53 + 20.0);
    CTLineDraw(v62, a3);
    CGContextRestoreGState(a3);
    if (v62)
      CFRelease(v62);
    if (v61)
      CFRelease(v61);
    if (v60)
      CFRelease(v60);
    if (v58)
      CFRelease(v58);
    if (v54)
      CFRelease(v54);
  }
  return objc_msgSend((id)objc_msgSend(*(id *)a1, "contentView"), "performSelector:withObject:afterDelay:", sel__dispatchTileDidDraw_, a2, 0.0);
}

void sub_1952DBC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;

  if (v20)
    CGContextSetFontAntialiasingStyle();
  _Unwind_Resume(exception_object);
}

_OWORD *WebCore::LegacyTileCache::setNeedsDisplayInRect(WebCore::LegacyTileCache *this, const WebCore::IntRect *a2)
{
  unsigned __int8 *v4;
  _OWORD *result;
  uint64_t v7;
  int v8;

  v4 = (unsigned __int8 *)this + 173;
  if (__ldaxr((unsigned __int8 *)this + 173))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 173);
LABEL_5:
  result = (_OWORD *)((char *)this + 144);
  v7 = *((unsigned int *)this + 39);
  if ((_DWORD)v7 == *((_DWORD *)this + 38))
  {
    result = (_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, (unint64_t)a2);
    *(_OWORD *)(*((_QWORD *)this + 18) + 16 * *((unsigned int *)this + 39)) = *result;
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)result + 16 * v7) = *(_OWORD *)a2;
  }
  ++*((_DWORD *)this + 39);
  if (!(_DWORD)v7)
    result = (_OWORD *)objc_msgSend((id)objc_msgSend(*(id *)this, "contentView"), "_scheduleRenderingUpdateForPendingTileCacheRepaint");
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1952DBEA0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF *WebCore::LegacyTileCache::invalidateTiles(WebCore::LegacyTileCache *this, const WebCore::IntRect *a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *result;
  const WebCore::IntRect *v32;
  void *v33;
  float *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  WTF::MemoryPressureHandler *v43;
  double v44;
  double v45;
  double v46;
  float v47;
  double v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  float v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;

  if (!*((_BYTE *)this + 60))
  {
    v30 = (WTF *)*((_QWORD *)this + 9);
    return WebCore::LegacyTileGrid::invalidateTiles(v30, a2);
  }
  if (*((_DWORD *)this + 13) != 3
    && (v4 = *((_QWORD *)this + 10)) != 0
    && (v5 = *((float *)this + 40), v5 == *(float *)(v4 + 32)))
  {
    v6 = *((_QWORD *)this + 9);
  }
  else
  {
    v6 = *((_QWORD *)this + 9);
    v5 = *((float *)this + 40);
    v4 = v6;
  }
  v7 = *(float *)(v6 + 32) / v5;
  v8 = v7 * (float)*(int *)a2;
  v9 = v7 * (float)*((int *)a2 + 1);
  v10 = floorf(v8);
  v11 = 2147500000.0;
  if (v10 < 2147500000.0)
  {
    v11 = -2147500000.0;
    if (v10 > -2147500000.0)
      v11 = (float)(int)v10;
  }
  v12 = v7 * (float)*((int *)a2 + 2);
  v13 = v7 * (float)*((int *)a2 + 3);
  v14 = floorf(v9);
  v15 = 2147500000.0;
  if (v14 < 2147500000.0)
  {
    v15 = -2147500000.0;
    if (v14 > -2147500000.0)
      v15 = (float)(int)v14;
  }
  v16 = v9 + v13;
  v17 = ceilf(v8 + v12);
  v18 = 2147500000.0;
  if (v17 < 2147500000.0)
  {
    v18 = -2147500000.0;
    if (v17 > -2147500000.0)
      v18 = (float)(int)v17;
  }
  v19 = ceilf(v16);
  v20 = 2147500000.0;
  if (v19 < 2147500000.0)
  {
    v20 = -2147500000.0;
    if (v19 > -2147500000.0)
      v20 = (float)(int)v19;
  }
  if (v11 >= 2147500000.0)
  {
    v21 = 0x7FFFFFFFLL;
  }
  else if (v11 <= -2147500000.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v11;
  }
  if (v15 >= 2147500000.0)
  {
    v22 = 0x7FFFFFFF00000000;
  }
  else if (v15 <= -2147500000.0)
  {
    v22 = 0x8000000000000000;
  }
  else
  {
    v22 = (unint64_t)(int)v15 << 32;
  }
  v23 = v18 - v11;
  v24 = v20 - v15;
  v25 = 0x7FFFFFFFLL;
  v26 = 0x80000000;
  if (v23 > -2147500000.0)
    v26 = (int)v23;
  if (v23 < 2147500000.0)
    v25 = v26;
  v27 = 0x7FFFFFFF00000000;
  v28 = 0x8000000000000000;
  if (v24 > -2147500000.0)
    v28 = (unint64_t)(int)v24 << 32;
  if (v24 < 2147500000.0)
    v27 = v28;
  v75 = v22 | v21;
  v76 = v27 | v25;
  if (v4 != v6)
  {
    v29 = *(_QWORD *)(*((_QWORD *)this + 10) + 40);
    if (v29 && *(_DWORD *)(v29 - 12))
    {
      v77 = 0;
      v78 = 0;
      WebCore::LegacyTileGrid::dropTilesBetweenRects((id *)v6, (const WebCore::IntRect *)&v75, (const WebCore::IntRect *)&v77);
      v30 = (WTF *)*((_QWORD *)this + 10);
      return WebCore::LegacyTileGrid::invalidateTiles(v30, a2);
    }
    v32 = (const WebCore::IntRect *)&v75;
    result = (WTF *)v6;
    return WebCore::LegacyTileGrid::invalidateTiles(result, v32);
  }
  v34 = *(float **)v6;
  v33 = *(void **)(v6 + 8);
  if (*(_BYTE *)(*(_QWORD *)v6 + 40))
  {
    v35 = v34[6];
    v36 = v34[7];
    v37 = v34[8];
    v38 = v34[9];
  }
  else
  {
    objc_msgSend(*(id *)v34, "extendedVisibleRect", 3.53369517e72, v75, v76);
    v35 = v39;
    v36 = v40;
    v37 = v41;
    v38 = v42;
  }
  v43 = (WTF::MemoryPressureHandler *)objc_msgSend(v33, "convertRect:fromLayer:", objc_msgSend(*(id *)v34, "hostLayer", v75, v76), v35, v36, v37, v38);
  v47 = v46;
  v49 = v48;
  v50 = floorf(v49);
  v51 = 2147500000.0;
  if (v50 < 2147500000.0)
  {
    v51 = -2147500000.0;
    if (v50 > -2147500000.0)
      v51 = (float)(int)v50;
  }
  v52 = v45;
  v53 = v44;
  v54 = floorf(v47);
  v55 = 2147500000.0;
  if (v54 < 2147500000.0)
  {
    v55 = -2147500000.0;
    if (v54 > -2147500000.0)
      v55 = (float)(int)v54;
  }
  v56 = v47 + v52;
  v57 = ceilf(v49 + v53);
  v58 = 2147500000.0;
  if (v57 < 2147500000.0)
  {
    v58 = -2147500000.0;
    if (v57 > -2147500000.0)
      v58 = (float)(int)v57;
  }
  v59 = ceilf(v56);
  v60 = 2147500000.0;
  if (v59 < 2147500000.0)
  {
    v60 = -2147500000.0;
    if (v59 > -2147500000.0)
      v60 = (float)(int)v59;
  }
  if (v51 >= 2147500000.0)
  {
    v61 = 0x7FFFFFFFLL;
  }
  else if (v51 <= -2147500000.0)
  {
    v61 = 0x80000000;
  }
  else
  {
    v61 = (int)v51;
  }
  if (v55 >= 2147500000.0)
  {
    v62 = 0x7FFFFFFF00000000;
  }
  else if (v55 <= -2147500000.0)
  {
    v62 = 0x8000000000000000;
  }
  else
  {
    v62 = (unint64_t)(int)v55 << 32;
  }
  v63 = v58 - v51;
  v64 = v60 - v55;
  if (v63 >= 2147500000.0)
  {
    v65 = 0x7FFFFFFFLL;
  }
  else if (v63 <= -2147500000.0)
  {
    v65 = 0x80000000;
  }
  else
  {
    v65 = (int)v63;
  }
  if (v64 >= 2147500000.0)
  {
    v66 = 0x7FFFFFFF00000000;
  }
  else if (v64 <= -2147500000.0)
  {
    v66 = 0x8000000000000000;
  }
  else
  {
    v66 = (unint64_t)(int)v64 << 32;
  }
  v67 = v66 | v65;
  v68 = *(_DWORD *)(*(_QWORD *)v6 + 52);
  if (v68 == 5)
    v69 = 0;
  else
    v69 = v62;
  v70 = v69 | v61;
  if (v68 != 1)
  {
    if (*(_BYTE *)(*(_QWORD *)v6 + 67))
    {
      v71 = WTF::MemoryPressureHandler::singleton(v43);
      v72 = atomic_load((unsigned __int8 *)(v71 + 4));
      if (v72 != 2 && !*(_BYTE *)(v71 + 7))
      {
        if ((int)v65 >= 0)
          v73 = v65;
        else
          v73 = v65 + 1;
        LODWORD(v77) = v61 - (v73 >> 1);
        HIDWORD(v77) = HIDWORD(v69) - HIDWORD(v66);
        LODWORD(v78) = (v73 & 0xFFFFFFFE) + v65;
        HIDWORD(v78) = 3 * HIDWORD(v66);
        v70 = WebCore::LegacyTileGrid::adjustCoverRectForPageBounds((id *)v6, (const WebCore::IntRect *)&v77);
        v67 = v74;
      }
    }
  }
  v77 = v70;
  v78 = v67;
  WebCore::LegacyTileGrid::dropTilesBetweenRects(*((id **)this + 9), (const WebCore::IntRect *)&v75, (const WebCore::IntRect *)&v77);
  result = WebCore::LegacyTileGrid::invalidateTiles(*((WTF **)this + 9), (const WebCore::IntRect *)&v75);
  if (*((_DWORD *)this + 13) == 3)
  {
    result = (WTF *)*((_QWORD *)this + 10);
    if (result)
    {
      v32 = a2;
      return WebCore::LegacyTileGrid::invalidateTiles(result, v32);
    }
  }
  return result;
}

WTF *WebCore::LegacyTileGrid::invalidateTiles(WTF *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  id *v3;
  WTF *v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  _BOOL4 v33;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  int v54;
  unsigned int *v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v68;
  int v69;
  int v70;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  BOOL v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v83;
  WTF *v84;
  unint64_t v85;
  int v86;
  WTF *v87;
  void *v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v94;
  int v95;
  int v97;
  int v98;
  int v99;
  int v101;
  int v102;
  int v103;
  int v104;
  int v106;
  int v107;
  int v108;
  int v109;
  int v111;
  int v112;
  _QWORD *v114;
  unint64_t v115;
  BOOL v116;
  _BOOL4 v117;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  void *v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  float v135;
  double v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  int v149;
  int v150;
  float v151;
  float v152;
  int v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  _DWORD *v158;
  int *v159;
  unsigned int v160;
  int v161;
  int v162;
  uint64_t v163;
  int *v164;
  int v165;
  int v166;
  int v168;
  int *v169;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  BOOL v177;
  int v178;
  BOOL v180;
  unint64_t v181;
  WTF *v184;
  void *v185;
  WTF *v186;
  uint64_t v187;
  unsigned int v188;
  int v189;
  unint64_t v190;
  WTF *v191;
  uint64_t v192;

  v3 = (id *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v5 = this;
    objc_msgSend(*((id *)this + 1), "size");
    v7 = (int)v6;
    v9 = (int)v8;
    v10 = *((_DWORD *)v5 + 12);
    v11 = *((_DWORD *)v5 + 13);
    v12 = v10 & ~(v10 >> 31);
    v13 = *((_DWORD *)v5 + 14);
    v14 = *((_DWORD *)v5 + 15);
    if (v13 + v10 >= (int)v7)
      v15 = (int)v6;
    else
      v15 = v13 + v10;
    if (v14 + v11 >= (int)v9)
      v16 = v9;
    else
      v16 = (v14 + v11);
    v17 = v12 < v15 && (v11 & ~(v11 >> 31)) < (int)v16;
    if (v17)
      v18 = v12;
    else
      v18 = 0;
    if (v17)
      v19 = v11 & ~(v11 >> 31);
    else
      v19 = 0;
    if (v17)
      v20 = v15;
    else
      v20 = 0;
    if (v17)
      v21 = v16;
    else
      v21 = 0;
    if (v10 != (_DWORD)v18
      || v11 != v19
      || ((v22 = v21 - v11, v13 == v20 - v10) ? (v23 = v14 == v22) : (v23 = 0), !v23))
    {
      *((_QWORD *)v5 + 6) = 0;
      *((_QWORD *)v5 + 7) = v7 | (v9 << 32);
    }
    v191 = 0;
    v192 = 0;
    v24 = *((_DWORD *)a2 + 2);
    v25 = *((_DWORD *)v5 + 6);
    if (v24 <= 4 * v25)
    {
      v26 = *((_DWORD *)a2 + 3);
      v27 = *((_DWORD *)v5 + 7);
      if (v26 <= 4 * v27)
      {
        v36 = *((_DWORD *)a2 + 1);
        v37 = *((_DWORD *)v5 + 4);
        v38 = *((_DWORD *)v5 + 5);
        if (v37)
          v39 = v25 - v37;
        else
          v39 = 0;
        if (v38)
          v40 = v27 - v38;
        else
          v40 = 0;
        v41 = ((v40 + v36) / v27) & ~(((v40 + v36) / v27) >> 31);
        v188 = ((v26 + v36 + v40 - 1) / v27) & ~(((v26 + v36 + v40 - 1) / v27) >> 31);
        if (v41 > v188)
          goto LABEL_279;
        v42 = ((v39 + *(_DWORD *)a2) / v25) & ~(((v39 + *(_DWORD *)a2) / v25) >> 31);
        v43 = (v24 + *(_DWORD *)a2 + v39 - 1) / v25;
        v44 = v43 & ~(v43 >> 31);
        v187 = v42;
        if (v42 > v44 || !*v3)
          goto LABEL_279;
        v186 = v5;
        v45 = v44 + 1;
LABEL_61:
        v46 = v187;
        do
        {
          v190 = __PAIR64__(v41, v46);
          v47 = *v3;
          if (*v3)
          {
            v48 = *(v47 - 2);
            v49 = v48 & ((0xD7862706ELL * (unint64_t)(95187966 * v41 + 277951225 * (_DWORD)v46)) >> 4);
            v50 = &v47[4 * v49];
            v52 = *v50;
            v51 = v50[1];
            if (v46 == v52 && v51 == v41)
            {
LABEL_75:
              v57 = *(_QWORD *)&v47[4 * v49 + 2];
              if (v57)
              {
                v58 = *(_DWORD *)v57 + 1;
                *(_DWORD *)v57 = v58;
                v59 = *(_DWORD *)(v57 + 32);
                v60 = *(_DWORD *)(v57 + 36);
                if (v59 >= 1 && v60 >= 1)
                {
                  v62 = *((_DWORD *)a2 + 2);
                  if (v62 >= 1)
                  {
                    v63 = *((_DWORD *)a2 + 3);
                    if (v63 >= 1)
                    {
                      v64 = *(_DWORD *)(v57 + 24);
                      v65 = *(_DWORD *)a2 + v62;
                      v66 = v59 + v64;
                      if (v65 > v64 && *(_DWORD *)a2 < v66)
                      {
                        v68 = *(_DWORD *)(v57 + 28);
                        v69 = *((_DWORD *)a2 + 1);
                        v70 = v60 + v68;
                        if (v69 + v63 > v68 && v69 < v70)
                        {
                          v72 = *((_DWORD *)a2 + 1);
                          if (*(_DWORD *)a2 <= v64)
                            v73 = *(_DWORD *)(v57 + 24);
                          else
                            v73 = *(_DWORD *)a2;
                          if (v72 <= v68)
                            v74 = *(_DWORD *)(v57 + 28);
                          else
                            v74 = *((_DWORD *)a2 + 1);
                          if (v66 >= *((_DWORD *)a2 + 2) + *(_DWORD *)a2)
                            v66 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
                          v75 = *((_DWORD *)a2 + 3) + v72;
                          if (v70 >= v75)
                            v76 = v75;
                          else
                            v76 = v70;
                          v77 = v73 < v66 && v74 < v76;
                          if (v77)
                            v78 = v73;
                          else
                            v78 = 0;
                          if (v77)
                            v79 = v74;
                          else
                            v79 = 0;
                          if (!v77)
                          {
                            v66 = 0;
                            v76 = 0;
                          }
                          v80 = v66 - v78;
                          v81 = v76 - v79;
                          if (v80 >= 1 && v81 >= 1)
                          {
                            v16 = objc_msgSend(*(id *)(v57 + 16), "setNeedsDisplayInRect:", (double)(v78 - v64), (double)(v79 - v68), (double)v80, (double)v81);
                            if (*(_BYTE *)(**(_QWORD **)(v57 + 8) + 65))
                              v16 = objc_msgSend(*(id *)(v57 + 16), "setNeedsDisplayInRect:", 0.0, 0.0, 46.0, 25.0);
                          }
                          v83 = HIDWORD(v192);
                          if (HIDWORD(v192) == (_DWORD)v192)
                          {
                            v16 = (uint64_t)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v191, HIDWORD(v192) + 1, (unint64_t)&v190);
                            v83 = HIDWORD(v192);
                            v84 = v191;
                            v85 = *(_QWORD *)v16;
                          }
                          else
                          {
                            v85 = v190;
                            v84 = v191;
                          }
                          *((_QWORD *)v84 + v83) = v85;
                          ++HIDWORD(v192);
                          v58 = *(_DWORD *)v57;
                        }
                      }
                    }
                  }
                }
                v86 = v58 - 1;
                if (v86)
                {
                  *(_DWORD *)v57 = v86;
                }
                else
                {
                  WebCore::LegacyTileGridTile::~LegacyTileGridTile((id *)v57);
                  v16 = WTF::fastFree(v87, v88);
                }
              }
            }
            else
            {
              v54 = 1;
              while ((_DWORD)v52 || v51 != 0x80000000)
              {
                v49 = ((_DWORD)v49 + v54) & v48;
                v55 = &v47[4 * v49];
                v52 = *v55;
                v51 = v55[1];
                ++v54;
                if (v46 == v52 && v51 == v41)
                  goto LABEL_75;
              }
            }
          }
          ++v46;
        }
        while (v46 != v45);
        while (v41 != v188)
        {
          ++v41;
          if (*v3)
            goto LABEL_61;
        }
        v89 = HIDWORD(v192);
        goto LABEL_196;
      }
    }
    v28 = (unint64_t)*v3;
    if (*v3)
    {
      v29 = *(unsigned int *)(v28 - 4);
      v30 = v28 + 16 * v29;
      if (*(_DWORD *)(v28 - 12))
      {
        if ((_DWORD)v29)
        {
          v31 = 16 * v29;
          while (1)
          {
            v32 = !*(_DWORD *)v28 && *(_DWORD *)(v28 + 4) == 0x80000000;
            v33 = v32;
            if (*(_DWORD *)v28 != 0x80000000 && !v33)
              break;
            v28 += 16;
            v31 -= 16;
            if (!v31)
            {
              v28 = v30;
              break;
            }
          }
        }
        v35 = v30;
        goto LABEL_134;
      }
      v16 = v28 + 16 * v29;
    }
    else
    {
      v30 = 0;
      v16 = 0;
      v29 = 0;
    }
    v35 = v28 + 16 * v29;
    v28 = v16;
LABEL_134:
    if (v30 == v28)
      goto LABEL_279;
    v89 = 0;
    do
    {
      v90 = *(_QWORD *)(v28 + 8);
      v91 = *(_DWORD *)(v90 + 32);
      v92 = *(_DWORD *)(v90 + 36);
      if (v91 >= 1 && v92 >= 1)
      {
        v94 = *((_DWORD *)a2 + 2);
        v95 = *((_DWORD *)a2 + 3);
        if (v94 >= 1 && v95 >= 1)
        {
          v97 = *(_DWORD *)(v90 + 24);
          v98 = *(_DWORD *)a2 + v94;
          v99 = v91 + v97;
          if (v98 > v97 && *(_DWORD *)a2 < v99)
          {
            v101 = *(_DWORD *)(v90 + 28);
            v102 = *((_DWORD *)a2 + 1);
            v103 = v102 + v95;
            v104 = v92 + v101;
            if (v103 > v101 && v102 < v104)
            {
              v106 = *((_DWORD *)a2 + 1);
              if (*(_DWORD *)a2 <= v97)
                v107 = *(_DWORD *)(v90 + 24);
              else
                v107 = *(_DWORD *)a2;
              if (v106 <= v101)
                v108 = *(_DWORD *)(v90 + 28);
              else
                v108 = *((_DWORD *)a2 + 1);
              if (v99 >= *((_DWORD *)a2 + 2) + *(_DWORD *)a2)
                v99 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
              v109 = *((_DWORD *)a2 + 3) + v106;
              if (v104 >= v109)
                v104 = v109;
              if (v107 >= v99 || v108 >= v104)
              {
                v107 = 0;
                v108 = 0;
                v99 = 0;
                v104 = 0;
              }
              v111 = v99 - v107;
              v112 = v104 - v108;
              if (v111 >= 1 && v112 >= 1)
              {
                objc_msgSend(*(id *)(v90 + 16), "setNeedsDisplayInRect:", (double)(v107 - v97), (double)(v108 - v101), (double)v111, (double)v112);
                if (*(_BYTE *)(**(_QWORD **)(v90 + 8) + 65))
                  objc_msgSend(*(id *)(v90 + 16), "setNeedsDisplayInRect:", 0.0, 0.0, 46.0, 25.0);
              }
              if (HIDWORD(v192) == (_DWORD)v192)
              {
                v16 = (uint64_t)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v191, HIDWORD(v192) + 1, v28);
                v114 = (_QWORD *)((char *)v191 + 8 * HIDWORD(v192));
              }
              else
              {
                v114 = (_QWORD *)((char *)v191 + 8 * HIDWORD(v192));
                v16 = v28;
              }
              *v114 = *(_QWORD *)v16;
              v89 = ++HIDWORD(v192);
            }
          }
        }
      }
      v115 = v28 + 16;
      v28 = v35;
      if (v115 != v35)
      {
        v28 = v115;
        while (1)
        {
          v116 = !*(_DWORD *)v28 && *(_DWORD *)(v28 + 4) == 0x80000000;
          v117 = v116;
          if (*(_DWORD *)v28 != 0x80000000 && !v117)
            break;
          v28 += 16;
          if (v28 == v35)
          {
            v28 = v35;
            break;
          }
        }
      }
    }
    while (v28 != v30);
LABEL_196:
    if (v89)
    {
      v119 = *(_QWORD *)v5;
      v120 = *(_DWORD *)(*(_QWORD *)v5 + 52);
      if (v120 == 1)
        goto LABEL_203;
      if (*(_BYTE *)(v119 + 67))
      {
        v121 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v16);
        v122 = atomic_load((unsigned __int8 *)(v121 + 4));
        if (v122 != 2 && !*(_BYTE *)(v121 + 7))
          goto LABEL_279;
        v119 = *(_QWORD *)v5;
        v120 = *(_DWORD *)(*(_QWORD *)v5 + 52);
      }
      if (v120 <= 1)
      {
LABEL_203:
        v123 = (void *)*((_QWORD *)v5 + 1);
        if (*(_BYTE *)(v119 + 40))
        {
          v124 = *(float *)(v119 + 24);
          v125 = *(float *)(v119 + 28);
          v126 = *(float *)(v119 + 32);
          v127 = *(float *)(v119 + 36);
        }
        else
        {
          objc_msgSend(*(id *)v119, "extendedVisibleRect");
          v124 = v128;
          v125 = v129;
          v126 = v130;
          v127 = v131;
        }
        objc_msgSend(v123, "convertRect:fromLayer:", objc_msgSend(*(id *)v119, "hostLayer", v186), v124, v125, v126, v127);
        v135 = v134;
        v137 = v136;
        v138 = floorf(v137);
        v139 = 2147500000.0;
        if (v138 < 2147500000.0)
        {
          v139 = -2147500000.0;
          if (v138 > -2147500000.0)
            v139 = (float)(int)v138;
        }
        v140 = v133;
        v141 = v132;
        v142 = floorf(v135);
        v143 = 2147500000.0;
        if (v142 < 2147500000.0)
        {
          v143 = -2147500000.0;
          if (v142 > -2147500000.0)
            v143 = (float)(int)v142;
        }
        v144 = v135 + v140;
        v145 = ceilf(v137 + v141);
        v146 = 2147500000.0;
        if (v145 < 2147500000.0)
        {
          v146 = -2147500000.0;
          if (v145 > -2147500000.0)
            v146 = (float)(int)v145;
        }
        v147 = ceilf(v144);
        v148 = 2147500000.0;
        if (v147 < 2147500000.0)
        {
          v148 = -2147500000.0;
          if (v147 > -2147500000.0)
            v148 = (float)(int)v147;
        }
        if (v139 >= 2147500000.0)
        {
          v149 = 0x7FFFFFFF;
        }
        else if (v139 <= -2147500000.0)
        {
          v149 = 0x80000000;
        }
        else
        {
          v149 = (int)v139;
        }
        v189 = v149;
        if (v143 >= 2147500000.0)
        {
          v150 = 0x7FFFFFFF;
        }
        else if (v143 <= -2147500000.0)
        {
          v150 = 0x80000000;
        }
        else
        {
          v150 = (int)v143;
        }
        v151 = v146 - v139;
        v152 = v148 - v143;
        if (v151 >= 2147500000.0)
        {
          v153 = 0x7FFFFFFF;
        }
        else if (v151 <= -2147500000.0)
        {
          v153 = 0x80000000;
        }
        else
        {
          v153 = (int)v151;
        }
        if (v152 >= 2147500000.0)
        {
          v154 = 0x7FFFFFFF;
        }
        else if (v152 <= -2147500000.0)
        {
          v154 = 0x80000000;
        }
        else
        {
          v154 = (int)v152;
        }
        v155 = HIDWORD(v192);
        if (HIDWORD(v192))
        {
          v156 = 0;
          if (*(_DWORD *)(*(_QWORD *)v5 + 52) == 5)
            v157 = 0;
          else
            v157 = v150;
          do
          {
            if (v156 >= HIDWORD(v192))
            {
              __break(0xC471u);
              JUMPOUT(0x1952DCD60);
            }
            v158 = *v3;
            if (*v3)
            {
              v159 = (int *)((char *)v191 + 8 * v156);
              v160 = *(v158 - 2);
              v161 = *v159;
              v162 = v159[1];
              v163 = v160 & ((0xD7862706ELL
                                          * (unint64_t)(277951225 * *v159 + 95187966 * v162)) >> 4);
              v164 = &v158[4 * v163];
              v166 = *v164;
              v165 = v164[1];
              if (*v164 == v161 && v165 == v162)
              {
LABEL_248:
                v171 = *(_QWORD *)&v158[4 * v163 + 2];
                if (v171)
                  ++*(_DWORD *)v171;
                goto LABEL_251;
              }
              v168 = 1;
              while (v166 || v165 != 0x80000000)
              {
                v163 = ((_DWORD)v163 + v168) & v160;
                v169 = &v158[4 * v163];
                v166 = *v169;
                v165 = v169[1];
                ++v168;
                if (v166 == v161 && v165 == v162)
                  goto LABEL_248;
              }
            }
            v171 = 0;
LABEL_251:
            v172 = *(_QWORD *)(v171 + 24);
            v173 = *(_QWORD *)(v171 + 32);
            v174 = HIDWORD(v173);
            v177 = (int)v173 < 1 || SHIDWORD(v173) < 1 || v153 < 1 || v154 < 1;
            v178 = v173 + v172;
            v180 = v177 || v153 + v189 <= (int)v172 || v178 <= v189;
            v181 = HIDWORD(v172);
            if (v180 || v157 + v154 <= (int)v181 || v157 >= (int)v174 + (int)v181)
              WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::remove(v3, *((_DWORD *)v191 + 2 * v156), *((_DWORD *)v191 + 2 * v156 + 1));
            if (*(_DWORD *)v171 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile((id *)v171);
              WTF::fastFree(v184, v185);
            }
            else
            {
              --*(_DWORD *)v171;
            }
          }
          while (++v156 != v155);
        }
      }
    }
LABEL_279:
    this = v191;
    if (v191)
    {
      v191 = 0;
      LODWORD(v192) = 0;
      return (WTF *)WTF::fastFree(this, (void *)v18);
    }
  }
  return this;
}

void sub_1952DCD84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

id *WebCore::LegacyTileGrid::dropTilesBetweenRects(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  _DWORD *v5;
  id *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v20;
  int v21;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v27;
  int v28;
  int v29;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;

  v44 = 0;
  v45 = 0;
  v6 = this + 5;
  v5 = this[5];
  if (v5)
  {
    v7 = *(v5 - 1);
    v8 = (unint64_t)&v5[4 * v7];
    if (*(v5 - 3))
    {
      v9 = (unint64_t)this[5];
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = (unint64_t)this[5];
        while (1)
        {
          v11 = !*(_DWORD *)v9 && *(_DWORD *)(v9 + 4) == 0x80000000;
          v12 = v11;
          if (*(_DWORD *)v9 != 0x80000000 && !v12)
            break;
          v9 += 16;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_17;
          }
        }
      }
      goto LABEL_17;
    }
    v9 = (unint64_t)&v5[4 * v7];
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (unint64_t)&v5[4 * v7];
  if (!v5)
  {
    v14 = 0;
    goto LABEL_22;
  }
LABEL_17:
  v14 = &v5[4 * *(v5 - 1)];
LABEL_22:
  if (v14 == (_DWORD *)v9)
    goto LABEL_76;
  v15 = 0;
  do
  {
    v16 = *(_QWORD *)(v9 + 8);
    v17 = *(_QWORD *)(v16 + 32);
    v18 = HIDWORD(v17);
    if ((int)v17 >= 1 && SHIDWORD(v17) >= 1)
    {
      v20 = *((_DWORD *)a2 + 2);
      v21 = *((_DWORD *)a2 + 3);
      if (v20 >= 1 && v21 >= 1)
      {
        v23 = *(_QWORD *)(v16 + 24);
        v24 = *(_DWORD *)a2 + v20;
        v25 = v17 + v23;
        if (v24 > (int)v23 && *(_DWORD *)a2 < v25)
        {
          v27 = HIDWORD(v23);
          v28 = *((_DWORD *)a2 + 1);
          v29 = v18 + HIDWORD(v23);
          if (v28 + v21 > SHIDWORD(v23) && v28 < v29)
          {
            if ((v31 = *((_DWORD *)a3 + 2), v31 < 1)
              || (v32 = *((_DWORD *)a3 + 3), v32 < 1)
              || (*(_DWORD *)a3 + v31 > (int)v23 ? (v33 = *(_DWORD *)a3 < v25) : (v33 = 0),
                  !v33 || ((v34 = *((_DWORD *)a3 + 1), v34 + v32 > (int)v27) ? (v35 = v34 < v29) : (v35 = 0), !v35)))
            {
              if (v15 == (_DWORD)v45)
              {
                this = (id *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v15 + 1, v9);
                v36 = (char *)v44 + 8 * HIDWORD(v45);
              }
              else
              {
                v36 = (char *)v44 + 8 * v15;
                this = (id *)v9;
              }
              *(_QWORD *)v36 = *this;
              v15 = ++HIDWORD(v45);
            }
          }
        }
      }
    }
    v37 = v9 + 16;
    v9 = v8;
    if (v37 != v8)
    {
      v9 = v37;
      while (1)
      {
        v38 = !*(_DWORD *)v9 && *(_DWORD *)(v9 + 4) == 0x80000000;
        v39 = v38;
        if (*(_DWORD *)v9 != 0x80000000 && !v39)
          break;
        v9 += 16;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  while ((_DWORD *)v9 != v14);
  if (!v15)
  {
LABEL_76:
    this = (id *)v44;
    if (v44)
    {
      v44 = 0;
      LODWORD(v45) = 0;
      return (id *)WTF::fastFree((WTF *)this, a2);
    }
  }
  else
  {
    v41 = 0;
    v42 = 0;
    v43 = 8 * v15;
    while (v42 < HIDWORD(v45))
    {
      this = WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::remove(v6, *(_DWORD *)((char *)v44 + v41), *(_DWORD *)((char *)v44 + v41 + 4));
      ++v42;
      v41 += 8;
      if (v43 == v41)
        goto LABEL_76;
    }
    __break(0xC471u);
  }
  return this;
}

void sub_1952DD06C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::LegacyTileCache::setTilingMode(WebCore::LegacyTileCache *this, int a2)
{
  int v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  void (*v11[6])(_QWORD);

  v2 = *((_DWORD *)this + 13);
  if (v2 != a2)
  {
    *((_DWORD *)this + 13) = a2;
    if (*((float *)this + 42) == 0.0)
    {
      if (a2 == 4 || *((float *)this + 41) == 0.0)
      {
LABEL_8:
        if (v2 != 3)
          goto LABEL_24;
        v4 = (unsigned __int8 *)this + 172;
        if (__ldaxr((unsigned __int8 *)this + 172))
        {
          __clrex();
        }
        else if (!__stxr(1u, v4))
        {
LABEL_13:
          if (*((_BYTE *)this + 60) && *((_DWORD *)this + 13) != 3)
          {
            v6 = *((_QWORD *)this + 10);
            if (v6)
            {
              v8 = *((_QWORD *)this + 9);
              if (*((float *)this + 40) == *(float *)(v6 + 32))
              {
                v7 = *((_QWORD *)this + 10);
                if (v6 != v8)
                {
LABEL_17:
                  if (v8)
                    objc_msgSend((id)objc_msgSend(*(id *)this, "hostLayer"), "insertSublayer:above:", *(_QWORD *)(v6 + 8), *(_QWORD *)(v8 + 8));
                  v9 = __ldxr(v4);
                  if (v9 == 1)
                  {
                    if (!__stlxr(0, v4))
                    {
LABEL_24:
                      if (!*((_BYTE *)this + 62))
                      {
                        *((_BYTE *)this + 62) = 1;
                        v10 = (void (*)(_QWORD))*((_QWORD *)this + 2);
                        v11[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
                        v11[1] = (void (*)(_QWORD))3221225472;
                        v11[2] = (void (*)(_QWORD))___ZN7WebCore15LegacyTileCache13setTilingModeENS0_10TilingModeE_block_invoke;
                        v11[3] = (void (*)(_QWORD))&unk_1E3353458;
                        v11[4] = v10;
                        v11[5] = (void (*)(_QWORD))this;
                        WebThreadRun(v11);
                      }
                      return;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WebCore::LegacyTileCache *)((char *)this + 172));
                  goto LABEL_24;
                }
              }
              else
              {
                v7 = *((_QWORD *)this + 9);
              }
            }
            else
            {
              v7 = *((_QWORD *)this + 9);
            }
          }
          else
          {
            v7 = *((_QWORD *)this + 9);
            v6 = *((_QWORD *)this + 10);
          }
          v8 = v6;
          v6 = v7;
          goto LABEL_17;
        }
        MEMORY[0x19AEA534C]((char *)this + 172);
        goto LABEL_13;
      }
    }
    else if (a2 == 4)
    {
      goto LABEL_8;
    }
    WebCore::LegacyTileCache::commitScaleChange(this);
    goto LABEL_24;
  }
}

void sub_1952DD224(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t ___ZN7WebCore15LegacyTileCache13setTilingModeENS0_10TilingModeE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned int v3;
  unsigned __int8 *v5;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 40);
  result = objc_msgSend(*(id *)(a1 + 32), "isDead");
  if ((result & 1) == 0)
  {
    *(_BYTE *)(v1 + 62) = 0;
    result = objc_msgSend(*(id *)v1, "contentView");
    v3 = *(_DWORD *)(v1 + 52);
    if (v3 <= 5 && ((1 << v3) & 0x2C) != 0)
    {
      if (!*(_BYTE *)(v1 + 69))
      {
        result = objc_msgSend((id)result, "_willStartScrollingOrZooming");
        *(_BYTE *)(v1 + 69) = 1;
      }
      return result;
    }
    if (*(_BYTE *)(v1 + 69))
    {
      result = objc_msgSend((id)result, "_didFinishScrollingOrZooming");
      *(_BYTE *)(v1 + 69) = 0;
      v3 = *(_DWORD *)(v1 + 52);
    }
    if (v3 != 4)
    {
      v5 = (unsigned __int8 *)(v1 + 172);
      if (__ldaxr((unsigned __int8 *)(v1 + 172)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v5))
      {
LABEL_16:
        v7 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)result);
        v9 = atomic_load((unsigned __int8 *)(v7 + 4));
        if (v9 == 2 || *(_BYTE *)(v7 + 7))
          WebCore::LegacyTileCache::removeAllNonVisibleTilesInternal((WebCore::LegacyTileCache *)v1, v8);
        if (!*(_BYTE *)(v1 + 60)
          || *(_DWORD *)(v1 + 52) == 3
          || (v10 = *(_QWORD *)(v1 + 80)) == 0
          || *(float *)(v1 + 160) != *(float *)(v10 + 32))
        {
          v10 = *(_QWORD *)(v1 + 72);
        }
        result = (uint64_t)WebCore::LegacyTileGrid::createTiles((_QWORD *)v10, 0);
        if (*(_DWORD *)(v1 + 156))
          result = objc_msgSend((id)objc_msgSend(*(id *)v1, "contentView"), "_scheduleRenderingUpdateForPendingTileCacheRepaint");
        v11 = __ldxr(v5);
        if (v11 == 1)
        {
          if (!__stlxr(0, v5))
            return result;
        }
        else
        {
          __clrex();
        }
        return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 172));
      }
      result = MEMORY[0x19AEA534C](v1 + 172);
      goto LABEL_16;
    }
  }
  return result;
}

void sub_1952DD39C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::LegacyTileCache::doPendingRepaints(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  WTF *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (*(_DWORD *)(this + 156))
  {
    v2 = this;
    if ((*(_DWORD *)(this + 52) - 2) >= 4)
    {
      v3 = (unsigned __int8 *)(this + 172);
      if (__ldaxr((unsigned __int8 *)(this + 172)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v3))
      {
        goto LABEL_8;
      }
      this = MEMORY[0x19AEA534C](this + 172);
LABEL_8:
      v5 = (unsigned __int8 *)(v2 + 173);
      if (__ldaxr((unsigned __int8 *)(v2 + 173)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v5))
      {
        goto LABEL_12;
      }
      this = MEMORY[0x19AEA534C](v2 + 173);
LABEL_12:
      v7 = *(WTF **)(v2 + 144);
      v8 = *(unsigned int *)(v2 + 156);
      *(_QWORD *)(v2 + 144) = 0;
      *(_QWORD *)(v2 + 152) = 0;
      v9 = __ldxr(v5);
      if (v9 == 1)
      {
        if (!__stlxr(0, v5))
        {
          if (!(_DWORD)v8)
          {
LABEL_20:
            if (v7)
              this = WTF::fastFree(v7, a2);
            v12 = __ldxr(v3);
            if (v12 == 1)
            {
              if (!__stlxr(0, v3))
                return this;
            }
            else
            {
              __clrex();
            }
            return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 172));
          }
LABEL_18:
          v10 = 0;
          v11 = 16 * v8;
          do
          {
            this = (uint64_t)WebCore::LegacyTileCache::invalidateTiles((WebCore::LegacyTileCache *)v2, (WTF *)((char *)v7 + v10));
            v10 += 16;
          }
          while (v11 != v10);
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      this = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 173));
      if (!(_DWORD)v8)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  return this;
}

void sub_1952DD4F8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::LegacyTileCache::prepareToDraw(WebCore::LegacyTileCache *this)
{
  uint64_t result;
  void *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  WTF *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  result = objc_msgSend((id)objc_msgSend(*(id *)this, "contentView"), "viewWillDraw");
  if (*((_DWORD *)this + 39))
  {
    v4 = (unsigned __int8 *)this + 172;
    if (__ldaxr((unsigned __int8 *)this + 172))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C]((char *)this + 172);
LABEL_6:
    v6 = (unsigned __int8 *)this + 173;
    if (__ldaxr((unsigned __int8 *)this + 173))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_10;
    }
    result = MEMORY[0x19AEA534C]((char *)this + 173);
LABEL_10:
    v8 = (WTF *)*((_QWORD *)this + 18);
    v9 = *((unsigned int *)this + 39);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    v10 = __ldxr(v6);
    if (v10 == 1)
    {
      if (!__stlxr(0, v6))
      {
        if (!(_DWORD)v9)
        {
LABEL_18:
          if (v8)
            result = WTF::fastFree(v8, v3);
          v13 = __ldxr(v4);
          if (v13 == 1)
          {
            if (!__stlxr(0, v4))
              return result;
          }
          else
          {
            __clrex();
          }
          return WTF::Lock::unlockSlow((WebCore::LegacyTileCache *)((char *)this + 172));
        }
LABEL_16:
        v11 = 0;
        v12 = 16 * v9;
        do
        {
          result = (uint64_t)WebCore::LegacyTileCache::invalidateTiles(this, (WTF *)((char *)v8 + v11));
          v11 += 16;
        }
        while (v12 != v11);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WebCore::LegacyTileCache *)((char *)this + 173));
    if (!(_DWORD)v9)
      goto LABEL_18;
    goto LABEL_16;
  }
  return result;
}

void sub_1952DD660(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::LegacyTileCache::setLayerPoolCapacity(WebCore::LegacyTileCache *this)
{
  {
    qword_1EE2F4F80 = 0;
    byte_1EE2F4F88 = 0;
    WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool = 0u;
    *(_OWORD *)algn_1EE2F4F68 = 0u;
    byte_1EE2F4F78 = 0;
  }
  WebCore::LegacyTileLayerPool::setCapacity((WebCore::LegacyTileLayerPool *)&WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool, this);
}

uint64_t WebCore::LegacyTileCache::drainLayerPool(WebCore::LegacyTileCache *this, void *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  {
    qword_1EE2F4F80 = 0;
    byte_1EE2F4F88 = 0;
    WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool = 0u;
    *(_OWORD *)algn_1EE2F4F68 = 0u;
    byte_1EE2F4F78 = 0;
  }
  if (__ldaxr((unsigned __int8 *)&byte_1EE2F4F78))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&byte_1EE2F4F78))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](&byte_1EE2F4F78);
LABEL_7:
  v3 = WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool;
  if ((_QWORD)WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool)
  {
    *(_QWORD *)&WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool = 0;
    WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::deallocateTable(v3, a2);
  }
  result = WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool + 8, 0);
  dword_1EE2F4F70 = 0;
  v5 = __ldxr((unsigned __int8 *)&byte_1EE2F4F78);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)&byte_1EE2F4F78);
  }
  if (__stlxr(0, (unsigned __int8 *)&byte_1EE2F4F78))
    return WTF::Lock::unlockSlow((WTF::Lock *)&byte_1EE2F4F78);
  return result;
}

void sub_1952DD7C0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&byte_1EE2F4F78);
  goto LABEL_6;
}

void WebCore::LegacyTileCache::dumpTiles(WebCore::LegacyTileCache *this)
{
  float *v2;
  WebCore::LegacyTileGrid *v3;
  BOOL v4;
  float *v5;

  NSLog(CFSTR("================="));
  NSLog(CFSTR("ZOOMED OUT"));
  if (!*((_BYTE *)this + 60)
    || *((_DWORD *)this + 13) == 3
    || (v2 = (float *)*((_QWORD *)this + 10)) == 0
    || ((v3 = (WebCore::LegacyTileGrid *)*((_QWORD *)this + 9), *((float *)this + 40) == v2[8])
      ? (v4 = v3 == (WebCore::LegacyTileGrid *)v2)
      : (v4 = 1),
        v4))
  {
    NSLog(CFSTR("<ACTIVE>"));
    v3 = (WebCore::LegacyTileGrid *)*((_QWORD *)this + 9);
  }
  WebCore::LegacyTileGrid::dumpTiles(v3);
  NSLog(CFSTR("================="));
  if (*((_QWORD *)this + 10))
  {
    NSLog(CFSTR("ZOOMED IN"));
    v5 = (float *)*((_QWORD *)this + 10);
    if (*((_BYTE *)this + 60) && *((_DWORD *)this + 13) != 3 && v5 && *((float *)this + 40) == v5[8]
      || v5 == *((float **)this + 9))
    {
      NSLog(CFSTR("<ACTIVE>"));
      v5 = (float *)*((_QWORD *)this + 10);
    }
    WebCore::LegacyTileGrid::dumpTiles((WebCore::LegacyTileGrid *)v5);
    NSLog(CFSTR("================="));
  }
}

void WebCore::LegacyTileGrid::dumpTiles(WebCore::LegacyTileGrid *this)
{
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  BOOL v42;
  _BOOL4 v43;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  const __CFString *v54;
  const __CFString *v57;
  unsigned int *v59;
  BOOL v60;
  _BOOL4 v61;
  uint64_t v63;
  unsigned int *v64;
  BOOL v65;
  _BOOL4 v66;
  uint64_t v68;

  v2 = *(_QWORD *)this;
  v3 = (void *)*((_QWORD *)this + 1);
  if (*(_BYTE *)(*(_QWORD *)this + 40))
  {
    v4 = *(float *)(v2 + 24);
    v5 = *(float *)(v2 + 28);
    v6 = *(float *)(v2 + 32);
    v7 = *(float *)(v2 + 36);
  }
  else
  {
    objc_msgSend(*(id *)v2, "extendedVisibleRect");
    v4 = v8;
    v5 = v9;
    v6 = v10;
    v7 = v11;
  }
  objc_msgSend(v3, "convertRect:fromLayer:", objc_msgSend(*(id *)v2, "hostLayer"), v4, v5, v6, v7);
  v15 = v14;
  v17 = v16;
  v18 = floorf(v17);
  v19 = 2147500000.0;
  if (v18 < 2147500000.0)
  {
    v19 = -2147500000.0;
    if (v18 > -2147500000.0)
      v19 = (float)(int)v18;
  }
  v20 = v13;
  v21 = v12;
  v22 = floorf(v15);
  v23 = 2147500000.0;
  if (v22 < 2147500000.0)
  {
    v23 = -2147500000.0;
    if (v22 > -2147500000.0)
      v23 = (float)(int)v22;
  }
  v24 = v15 + v20;
  v25 = ceilf(v17 + v21);
  v26 = 2147500000.0;
  if (v25 < 2147500000.0)
  {
    v26 = -2147500000.0;
    if (v25 > -2147500000.0)
      v26 = (float)(int)v25;
  }
  v27 = ceilf(v24);
  v28 = 2147500000.0;
  if (v27 < 2147500000.0)
  {
    v28 = -2147500000.0;
    if (v27 > -2147500000.0)
      v28 = (float)(int)v27;
  }
  if (v19 >= 2147500000.0)
  {
    v29 = 0x7FFFFFFFLL;
  }
  else if (v19 <= -2147500000.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v19;
  }
  v68 = v29;
  if (v23 >= 2147500000.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147500000.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v23;
  }
  v31 = v26 - v19;
  v32 = v28 - v23;
  if (v31 > -2147500000.0)
    v33 = (int)v31;
  else
    v33 = 0x80000000;
  if (v31 < 2147500000.0)
    v34 = v33;
  else
    v34 = 0x7FFFFFFFLL;
  if (v32 > -2147500000.0)
    v35 = (int)v32;
  else
    v35 = 0x80000000;
  if (v32 < 2147500000.0)
    v36 = v35;
  else
    v36 = 0x7FFFFFFFLL;
  if (*(_DWORD *)(*(_QWORD *)this + 52) == 5)
    v37 = 0;
  else
    v37 = v30;
  NSLog(CFSTR("transformed visibleRect = [%6d %6d %6d %6d]"), 3.53369517e72, v68, v37, v34, v36);
  v38 = (unsigned int *)*((_QWORD *)this + 5);
  if (!v38)
  {
    v40 = 0;
    v46 = 0;
    v39 = 0;
LABEL_56:
    v45 = &v38[4 * v39];
    v38 = v46;
    goto LABEL_57;
  }
  v39 = *(v38 - 1);
  v40 = &v38[4 * v39];
  if (!*(v38 - 3))
  {
    v46 = &v38[4 * v39];
    goto LABEL_56;
  }
  if ((_DWORD)v39)
  {
    v41 = 16 * v39;
    while (1)
    {
      v42 = !*v38 && v38[1] == 0x80000000;
      v43 = v42;
      if (*v38 != 0x80000000 && !v43)
        break;
      v38 += 4;
      v41 -= 16;
      if (!v41)
      {
        v38 = v40;
        break;
      }
    }
  }
  v45 = v40;
LABEL_57:
  if (v40 != v38)
  {
    if ((int)v34 < 1 || (int)v36 < 1)
    {
      LODWORD(v63) = 0;
      do
      {
        v63 = (v63 + 1);
        NSLog(CFSTR("#%-3d (%3d %3d) - [%6d %6d %6d %6d]%@"), v63, *v38, v38[1], *(_QWORD *)(*((_QWORD *)v38 + 1) + 24), HIDWORD(*(_QWORD *)(*((_QWORD *)v38 + 1) + 24)), *(_QWORD *)(*((_QWORD *)v38 + 1) + 32), HIDWORD(*(_QWORD *)(*((_QWORD *)v38 + 1) + 32)), &stru_1E3487BC0);
        NSLog(CFSTR("     %@"), objc_msgSend(*(id *)(*((_QWORD *)v38 + 1) + 16), "contents"));
        v64 = v38 + 4;
        v38 = v45;
        if (v64 != v45)
        {
          v38 = v64;
          while (1)
          {
            v65 = !*v38 && v38[1] == 0x80000000;
            v66 = v65;
            if (*v38 != 0x80000000 && !v66)
              break;
            v38 += 4;
            if (v38 == v45)
            {
              v38 = v45;
              break;
            }
          }
        }
      }
      while (v38 != v40);
    }
    else
    {
      LODWORD(v47) = 0;
      do
      {
        v48 = (unsigned int *)*((_QWORD *)v38 + 1);
        v49 = v48[6];
        v50 = v48[7];
        v53 = v48 + 8;
        v51 = v48[8];
        v52 = v53[1];
        v47 = (v47 + 1);
        v54 = CFSTR(" *");
        if ((int)v52 + (int)v50 <= (int)v37)
          v54 = &stru_1E3487BC0;
        if ((int)v34 + (int)v68 <= (int)v49 || (int)v51 + (int)v49 <= (int)v68 || (int)v36 + (int)v37 <= (int)v50)
          v57 = &stru_1E3487BC0;
        else
          v57 = v54;
        if ((int)v51 < 1 || (int)v52 < 1)
          v57 = &stru_1E3487BC0;
        NSLog(CFSTR("#%-3d (%3d %3d) - [%6d %6d %6d %6d]%@"), v47, *v38, v38[1], v49, v50, v51, v52, v57);
        NSLog(CFSTR("     %@"), objc_msgSend(*(id *)(*((_QWORD *)v38 + 1) + 16), "contents"));
        v59 = v38 + 4;
        v38 = v45;
        if (v59 != v45)
        {
          v38 = v59;
          while (1)
          {
            v60 = !*v38 && v38[1] == 0x80000000;
            v61 = v60;
            if (*v38 != 0x80000000 && !v61)
              break;
            v38 += 4;
            if (v38 == v45)
            {
              v38 = v45;
              break;
            }
          }
        }
      }
      while (v38 != v40);
    }
  }
}

void WebCore::LegacyTileGrid::~LegacyTileGrid(id *this)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  id **v5;
  id *v6;
  WTF *v7;
  void *v8;
  id v9;

  objc_msgSend(this[1], "removeFromSuperlayer");
  v3 = (unsigned int *)this[5];
  if (v3)
  {
    v4 = *(v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = (id **)(v3 + 2);
      do
      {
        if (*((_DWORD *)v5 - 2) != 0x80000000)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v6);
              WTF::fastFree(v7, v8);
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 4), v2);
  }
  v9 = this[1];
  this[1] = 0;
  if (v9)
    CFRelease(v9);
}

void sub_1952DDDF4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  id **v7;
  id *v8;
  WTF *v9;
  void *v10;

  v4 = *(_QWORD *)(v2 + 40);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v7 = (id **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v7 - 2) != 0x80000000)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v8);
              WTF::fastFree(v9, v10);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
        }
        v7 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v6 = *(const void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v6)
    CFRelease(v6);
  _Unwind_Resume(exception_object);
}

id *WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::remove(id *result, int a2, int a3)
{
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v19;
  void *v20;

  v3 = *result;
  if (*result)
  {
    v4 = (uint64_t *)result;
    v5 = *(v3 - 2);
    v6 = v5 & ((0xD7862706ELL * (unint64_t)(277951225 * a2 + 95187966 * a3)) >> 4);
    v7 = (char *)&v3[4 * v6];
    v9 = *(_DWORD *)v7;
    v8 = *((_DWORD *)v7 + 1);
    if (*(_DWORD *)v7 != a2 || v8 != a3)
    {
      v11 = 1;
      while (v9 || v8 != 0x80000000)
      {
        v6 = (v6 + v11) & v5;
        v7 = (char *)&v3[4 * v6];
        v9 = *(_DWORD *)v7;
        v8 = *((_DWORD *)v7 + 1);
        ++v11;
        if (*(_DWORD *)v7 == a2 && v8 == a3)
          goto LABEL_16;
      }
      v7 = (char *)&v3[4 * *(v3 - 1)];
    }
LABEL_16:
    if (&v3[4 * *(v3 - 1)] != (_DWORD *)v7)
    {
      *(_DWORD *)v7 = 0x80000000;
      result = (id *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::LegacyTileGridTile::~LegacyTileGridTile(result);
          result = (id *)WTF::fastFree(v19, v20);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++*(_DWORD *)(*v4 - 16);
      v13 = *v4;
      if (*v4)
        v14 = *(_DWORD *)(v13 - 12) - 1;
      else
        v14 = -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *v4;
      if (*v4)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return (id *)WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::rehash(v4, v17 >> 1, 0);
      }
    }
  }
  return result;
}

WebCore::LegacyTileGridTile *WebCore::LegacyTileGrid::addTileForIndex(WebCore::LegacyTileGrid *this, int32x2_t *a2)
{
  int32x2_t v4;
  int32x2_t v5;
  float64_t v6;
  float64x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  __int32 v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  WebCore::LegacyTileGridTile *v15;
  WebCore::LegacyTileGridTile *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  WebCore::LegacyTileGridTile *v23;

  v4 = *(int32x2_t *)((char *)this + 24);
  v5 = vmla_s32((int32x2_t)vbic_s8((int8x8_t)vsub_s32(*(int32x2_t *)((char *)this + 16), v4), (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)this + 16))), v4, *a2);
  objc_msgSend(*((id *)this + 1), "size");
  v7.f64[1] = v6;
  v8 = vmax_s32(v5, 0);
  v9 = vmin_s32(vmovn_s64(vcvtq_s64_f64(v7)), vadd_s32(v5, v4));
  v10 = vcgt_s32(v9, v8);
  v11 = v9.i32[1];
  if ((v10.i8[0] & v10.i8[4] & 1) != 0)
    v12 = v8.u32[0];
  else
    v12 = 0;
  if ((v10.i8[0] & v10.i8[4] & 1) != 0)
    v13 = v8.u32[1];
  else
    v13 = 0;
  if ((v10.i8[0] & v10.i8[4] & 1) != 0)
    v14 = v9.i32[0];
  else
    v14 = 0;
  if ((v10.i8[0] & v10.i8[4] & 1) == 0)
    v11 = 0;
  v20 = v12 | (v13 << 32);
  v21 = v14 - v12;
  v22 = v11 - v13;
  v15 = (WebCore::LegacyTileGridTile *)WTF::fastMalloc((WTF *)0x28);
  WebCore::LegacyTileGridTile::LegacyTileGridTile(v15, this, (const WebCore::IntRect *)&v20);
  v23 = v15;
  WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::inlineSet<WebCore::IntPoint const&,WTF::Ref<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>((uint64_t)&v19, (uint64_t *)this + 5, a2, (void **)&v23);
  result = v23;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::LegacyTileGridTile::~LegacyTileGridTile((id *)v23);
      return (WebCore::LegacyTileGridTile *)WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  return result;
}

void sub_1952DE0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
    {
      WebCore::LegacyTileGridTile::~LegacyTileGridTile(a14);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)a14;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LegacyTileGridTile::showBorder(WebCore::LegacyTileGridTile *this, const WebCore::Color *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  CFTypeRef v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  CFTypeRef cf;

  v2 = (void *)*((_QWORD *)this + 2);
  if ((_DWORD)a2)
  {
    if (*(_QWORD *)(**((_QWORD **)this + 1) + 72) == *((_QWORD *)this + 1))
      v3 = 0x1104000033FF0080;
    else
      v3 = 0x1104000033E60080;
    v10 = v3;
    WebCore::cachedCGColor((WebCore *)&v10, a2, &cf);
    objc_msgSend(v2, "setBorderColor:", cf);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    if ((v10 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
    }
    return objc_msgSend(v2, "setBorderWidth:", 0.5);
  }
  else
  {
    objc_msgSend(*((id *)this + 2), "setBorderColor:", 0);
    return objc_msgSend(v2, "setBorderWidth:", 0.0);
  }
}

void sub_1952DE208(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::LegacyTileGrid::adjustCoverRectForPageBounds(id *this, const WebCore::IntRect *a2)
{
  WTF::MemoryPressureHandler *v4;
  double v5;
  double v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v35;
  int v36;
  int v37;
  int v38;

  v4 = (WTF::MemoryPressureHandler *)objc_msgSend(this[1], "size");
  v7 = (int)v5;
  v8 = (int)v6;
  v10 = *(_DWORD *)a2;
  v9 = *((_DWORD *)a2 + 1);
  v12 = *((_DWORD *)a2 + 2);
  v11 = *((_DWORD *)a2 + 3);
  v13 = (int)v5 - (v12 + *(_DWORD *)a2);
  if ((int)v5 >= v12 + *(_DWORD *)a2)
    v13 = 0;
  v14 = v8 - (v11 + v9);
  if (v8 >= v11 + v9)
    v14 = 0;
  v15 = v13 + (v10 & ~(v10 >> 31));
  v16 = v14 + (v9 & ~(v9 >> 31));
  v17 = v15 & ~(v15 >> 31);
  v18 = v16 & ~(v16 >> 31);
  v19 = v15 + v12;
  if (v19 >= v7)
    v19 = (int)v5;
  v20 = v16 + v11;
  if (v20 >= v8)
    v20 = (int)v6;
  v21 = v17 < v19 && v18 < v20;
  if (v21)
    v22 = v17;
  else
    v22 = 0;
  if (v21)
    v23 = v18;
  else
    v23 = 0;
  if (v21)
    v24 = v19;
  else
    v24 = 0;
  if (v21)
    v25 = v20;
  else
    v25 = 0;
  v26 = v22 | (v23 << 32);
  v27 = v24 - v22;
  v28 = v25 - v23;
  if (((_DWORD)v22 != v10 || (_DWORD)v23 != v9 || v27 != v12 || v28 != v11)
    && v27 >= 1
    && v28 >= 1
    && *((_DWORD *)*this + 13) != 1)
  {
    if (*((_BYTE *)*this + 67))
    {
      v35 = WTF::MemoryPressureHandler::singleton(v4);
      v36 = atomic_load((unsigned __int8 *)(v35 + 4));
      if (v36 != 2 && !*(_BYTE *)(v35 + 7))
      {
        if (v7 >= v24)
          v37 = v24;
        else
          v37 = v7;
        if (v8 >= v25)
          v38 = v25;
        else
          v38 = v8;
        if ((int)v22 >= v37 || (int)v23 >= v38)
        {
          LODWORD(v22) = 0;
          v23 = 0;
        }
        return v22 | (unint64_t)(v23 << 32);
      }
    }
  }
  return v26;
}

WebCore::LegacyTileGridTile *WebCore::LegacyTileGridTile::LegacyTileGridTile(WebCore::LegacyTileGridTile *this, WebCore::LegacyTileGrid *a2, const WebCore::IntRect *a3)
{
  uint64_t v5;
  double v6;
  double v7;
  WebCore::Widget *v8;
  LegacyTileLayer *v9;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  CFTypeRef cf;
  uint64_t v27;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a3;
  v5 = *((_QWORD *)this + 4);
  objc_msgSend(**(id **)a2, "screenScale");
  v7 = v6;
  *(float *)&v6 = v6;
  LODWORD(v27) = (int)(float)((float)(int)v5 * *(float *)&v6);
  HIDWORD(v27) = (int)(float)((float)SHIDWORD(v5) * *(float *)&v6);
  {
    qword_1EE2F4F80 = 0;
    byte_1EE2F4F88 = 0;
    WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool = 0u;
    *(_OWORD *)algn_1EE2F4F68 = 0u;
    byte_1EE2F4F78 = 0;
  }
  WebCore::LegacyTileLayerPool::takeLayerWithSize((WebCore::LegacyTileLayerPool *)&WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool, (const WebCore::IntSize *)&v27, &cf);
  v9 = (LegacyTileLayer *)cf;
  cf = 0;
  v10 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v9;
  if (v10)
  {
    CFRelease(v10);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v9 = (LegacyTileLayer *)*((_QWORD *)this + 2);
  }
  if (!v9)
  {
    v9 = objc_alloc_init(LegacyTileLayer);
    v12 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v12)
    {
      CFRelease(v12);
      v9 = (LegacyTileLayer *)*((_QWORD *)this + 2);
    }
  }
  if (WebCore::screenSupportsExtendedColor(0, v8))
    -[LegacyTileLayer setContentsFormat:](v9, "setContentsFormat:", *MEMORY[0x1E0CD29E0]);
  -[LegacyTileLayer setTileGrid:](v9, "setTileGrid:", a2, cf, v27);
  -[LegacyTileLayer setOpaque:](v9, "setOpaque:", *(unsigned __int8 *)(**((_QWORD **)this + 1) + 63));
  -[LegacyTileLayer setEdgeAntialiasingMask:](v9, "setEdgeAntialiasingMask:", 0);
  -[LegacyTileLayer setNeedsLayoutOnGeometryChange:](v9, "setNeedsLayoutOnGeometryChange:", 0);
  -[LegacyTileLayer setContentsScale:](v9, "setContentsScale:", v7);
  -[LegacyTileLayer setDrawsAsynchronously:](v9, "setDrawsAsynchronously:", *(unsigned __int8 *)(**((_QWORD **)this + 1) + 66));
  v13 = *((_QWORD *)a2 + 5);
  if (v13)
    v14 = *(unsigned int *)(v13 - 12);
  else
    v14 = 0;
  objc_msgSend(*((id *)a2 + 1), "insertSublayer:atIndex:", v9, v14);
  -[LegacyTileLayer setFrame:](v9, "setFrame:", (double)*((int *)this + 6), (double)*((int *)this + 7), (double)*((int *)this + 8), (double)*((int *)this + 9));
  v16 = *((_DWORD *)this + 6);
  v15 = *((_DWORD *)this + 7);
  v17 = *((_DWORD *)this + 8);
  if (v17 < 1 || (v18 = *((_DWORD *)this + 9), v18 <= 0))
  {
    v21 = 0;
    v22 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = v17 + v16;
    v20 = v18 + v15;
    v21 = *((_DWORD *)this + 6);
    v22 = *((_DWORD *)this + 7);
  }
  v23 = v19 - v21;
  if (v23 >= 1)
  {
    v24 = v20 - v22;
    if (v24 >= 1)
    {
      objc_msgSend(*((id *)this + 2), "setNeedsDisplayInRect:", (double)(v21 - v16), (double)(v22 - v15), (double)v23, (double)v24);
      if (*(_BYTE *)(**((_QWORD **)this + 1) + 65))
        objc_msgSend(*((id *)this + 2), "setNeedsDisplayInRect:", 0.0, 0.0, 46.0, 25.0);
    }
  }
  WebCore::LegacyTileGridTile::showBorder(this, (const WebCore::Color *)*(unsigned __int8 *)(**((_QWORD **)this + 1) + 64));
  return this;
}

void sub_1952DE65C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void WebCore::LegacyTileGridTile::~LegacyTileGridTile(id *this)
{
  id v2;
  CFTypeRef v3;
  id v4;
  CFTypeRef cf;

  objc_msgSend(this[2], "setTileGrid:", 0);
  objc_msgSend(this[2], "removeFromSuperlayer");
  {
    qword_1EE2F4F80 = 0;
    byte_1EE2F4F88 = 0;
    WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool = 0u;
    *(_OWORD *)algn_1EE2F4F68 = 0u;
    byte_1EE2F4F78 = 0;
  }
  v2 = this[2];
  cf = v2;
  if (v2)
    CFRetain(v2);
  WebCore::LegacyTileLayerPool::addLayer((uint64_t)&WebCore::LegacyTileLayerPool::sharedPool(void)::sharedPool, (id *)&cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = this[2];
  this[2] = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1952DE734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  const void *v12;

  v12 = *(const void **)(v10 + 16);
  *(_QWORD *)(v10 + 16) = 0;
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

WTF **WTF::RefCounted<WebCore::DeviceMotionData>::deref(WTF **this, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
        WTF::fastFree(v3, a2);
      else
        --*(_DWORD *)v3;
    }
    v4 = (WTF *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
    v5 = (WTF *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::LegacyTileCache::*&)(void),WebCore::LegacyTileCache*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = 16 * v8;
      v12 = v7;
      do
      {
        v13 = *(_OWORD *)v12;
        v12 = (WTF *)((char *)v12 + 16);
        *v9++ = v13;
        v11 -= 16;
      }
      while (v11);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  id *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  BOOL v28;
  uint64_t v29;
  id *v30;
  _QWORD *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  void *v41;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *(v12 - 1) = 0x8000000000000000;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (int *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != 0x80000000)
      {
        v18 = v16[1];
        if (v17)
          v19 = 0;
        else
          v19 = v18 == 0x80000000;
        if (v19)
        {
          v22 = v6 + 16 * v13;
          v23 = *(id **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v23);
              WTF::fastFree(v36, v37);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v24 = v21 & ((0xD7862706ELL * (unint64_t)(277951225 * v17 + 95187966 * v18)) >> 4);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = (_DWORD *)(v20 + 16 * v24);
            v24 = (v24 + v25++) & v21;
            if (*v27)
              v28 = 0;
            else
              v28 = v27[1] == 0x80000000;
          }
          while (!v28);
          v29 = v20 + 16 * v26;
          v32 = *(id **)(v29 + 8);
          v31 = (_QWORD *)(v29 + 8);
          v30 = v32;
          *v31 = 0;
          if (v32)
          {
            if (*(_DWORD *)v30 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v30);
              WTF::fastFree(v38, v39);
            }
            else
            {
              --*(_DWORD *)v30;
            }
          }
          *(_QWORD *)v27 = *(_QWORD *)v16;
          v33 = v6 + 16 * v13;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *v31 = v34;
          v35 = *(id **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
            {
              WebCore::LegacyTileGridTile::~LegacyTileGridTile(v35);
              WTF::fastFree(v40, v41);
            }
            else
            {
              --*(_DWORD *)v35;
            }
          }
          if (v16 == a3)
            v14 = v27;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

id *WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::inlineSet<WebCore::IntPoint const&,WTF::Ref<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>(uint64_t a1, uint64_t *a2, _DWORD *a3, void **a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  id *v13;
  int v14;
  int v15;
  BOOL v16;
  id *v17;
  int v18;
  BOOL v19;
  void *v20;
  id *result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = v10 & ((0xD7862706ELL * (unint64_t)(277951225 * *a3 + 95187966 * v11)) >> 4);
  v13 = (id *)(v8 + 16 * v12);
  v15 = *(_DWORD *)v13;
  v14 = *((_DWORD *)v13 + 1);
  if (*(_DWORD *)v13)
    v16 = 0;
  else
    v16 = v14 == 0x80000000;
  if (v16)
  {
LABEL_20:
    *v13 = *(id *)a3;
    v20 = *a4;
    *a4 = 0;
    result = (id *)v13[1];
    v13[1] = v20;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::LegacyTileGridTile::~LegacyTileGridTile(result);
        result = (id *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_32;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_41:
        result = (id *)WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WTF::RefPtr<WebCore::LegacyTileGridTile,WTF::RawPtrTraits<WebCore::LegacyTileGridTile>,WTF::DefaultRefDerefTraits<WebCore::LegacyTileGridTile>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::rehash(a2, v28, (int *)v13);
        v13 = result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_45;
      }
LABEL_32:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_41;
    }
LABEL_45:
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v17 = 0;
  v18 = 1;
  while (v15 != *a3 || v14 != v11)
  {
    if (v15 == 0x80000000)
      v17 = v13;
    v12 = (v12 + v18) & v10;
    v13 = (id *)(v8 + 16 * v12);
    v15 = *(_DWORD *)v13;
    v14 = *((_DWORD *)v13 + 1);
    ++v18;
    if (*(_DWORD *)v13)
      v19 = 0;
    else
      v19 = v14 == 0x80000000;
    if (v19)
    {
      if (v17)
      {
        *v17 = (id)0x8000000000000000;
        v17[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v13 = v17;
      }
      goto LABEL_20;
    }
  }
  if ((v9 & 1) != 0)
    v29 = 0;
  else
    v29 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v29;
  *(_BYTE *)(a1 + 16) = 0;
  v30 = *a4;
  *a4 = 0;
  result = (id *)v13[1];
  v13[1] = v30;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::LegacyTileGridTile::~LegacyTileGridTile(result);
      return (id *)WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::DOMCache::~DOMCache(WebCore::DOMCache *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  if (!*((_BYTE *)this + 64))
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), *((_QWORD *)this + 5), *((_QWORD *)this + 6));
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;

  if (!*((_BYTE *)this + 64))
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), *((_QWORD *)this + 5), *((_QWORD *)this + 6));
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  WTF::fastFree(v8, v9);
}

void WebCore::DOMCache::doMatch(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  WebCore::FetchRequest *v9;
  WTF::MonotonicTime *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24[2];
  int v25;
  WebCore::FetchRequest *v26;
  uint64_t v27;
  int v28;
  char v29;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v29 = 0;
    WebCore::DOMCache::requestFromInfo(a1, a2, a3[1], &v29, (uint64_t)&v26);
    if (v28)
    {
      if (v29)
      {
        v8 = *a4;
        *a4 = 0;
        v24[0] = 0;
        v25 = 0;
      }
      else
      {
        if (v28 != 1)
        {
          v18 = std::__throw_bad_variant_access[abi:sn180100]();
          WebCore::DOMCache::requestFromInfo(v18, v19, v20, v21, v22);
          return;
        }
        v16 = (char)v26;
        v17 = v27;
        v27 = 0;
        v8 = *a4;
        *a4 = 0;
        LOBYTE(v24[0]) = v16;
        v24[1] = v17;
        v25 = 1;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, v24);
      if (v25 != -1)
        ((void (*)(_QWORD **, uint64_t *))off_1E3353500[v25])(&v23, v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      v9 = v26;
      v26 = 0;
      WebCore::FetchRequest::resourceRequest(v9, (uint64_t)v24);
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 1)
          v10 = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::FetchRequest *))(*(_QWORD *)v9 + 16))(v9);
        else
          --*((_DWORD *)v9 + 6);
      }
      WTF::MonotonicTime::now(v10);
      v12 = v11;
      v13 = *a4;
      *a4 = 0;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v14 = &off_1E3353718;
      v14[1] = a1;
      v14[2] = v13;
      v14[3] = v12;
      v23 = v14;
      WebCore::DOMCache::queryCache(a1, v24, a3, 1, (uint64_t *)&v23);
      if (v23)
        (*(void (**)(_QWORD *))(*v23 + 8))(v23);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v24, v15);
    }
    if (v28 != -1)
      ((void (*)(uint64_t *, WebCore::FetchRequest **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v28])(v24, &v26);
  }
}

void WebCore::DOMCache::requestFromInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;

  if (*(_DWORD *)(a2 + 8))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v7)
      v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
    else
      v8 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v14 = 0;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    WebCore::FetchRequest::create(v8, a2, (uint64_t)&v14, (uint64_t)v27);
    WebCore::FetchRequestInit::~FetchRequestInit((WebCore::FetchRequestInit *)&v14, v9);
    if (v28)
    {
      if (v28 == 1)
      {
        v10 = v27[1];
        *(_BYTE *)a5 = v27[0];
        *(_QWORD *)(a5 + 8) = v10;
        *(_DWORD *)(a5 + 16) = 1;
      }
      else
      {
        v13 = std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::DOMCache::queryCache(v13);
      }
      return;
    }
    v12 = v27[0];
    goto LABEL_16;
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if ((*(_BYTE *)(v12 + 472) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 288));
    *(_BYTE *)(v12 + 472) |= 1u;
  }
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)(v12 + 376), "GET", 3) & 1) != 0 || (a3 & 1) != 0)
  {
LABEL_16:
    if ((*(_BYTE *)(v12 + 472) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 288));
      *(_BYTE *)(v12 + 472) |= 1u;
    }
    if ((*(_BYTE *)(v12 + 296) & 2) != 0)
    {
      *(_QWORD *)a5 = v12;
      *(_DWORD *)(a5 + 16) = 0;
      return;
    }
    if (a4)
      *a4 = 1;
    goto LABEL_21;
  }
  if (a4)
    *a4 = 1;
LABEL_21:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a5 = 33;
  *(_DWORD *)(a5 + 16) = 1;
  if (*(_DWORD *)(v12 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  else
    --*(_DWORD *)(v12 + 24);
}

void WebCore::DOMCache::queryCache(uint64_t a1, uint64_t *a2, char *a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::SecurityContext *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int **v35;
  void *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF::FunctionDispatcher *v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  WTF::NativePromiseBase *v66;
  void *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  WTF *v92;
  unsigned int v93;
  unsigned int v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  void *v97;
  int v98;
  unsigned int *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  void *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  __int128 v110;
  unsigned int *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  __int16 v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF *v135;
  char v136;
  __int16 v137;
  char v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  __int128 v144;
  unsigned int *v145;
  unsigned int *v146;
  __int128 v147;
  const char *v148;
  uint64_t v149;
  WTF::NativePromiseBase *v150;
  char v151;
  __int128 v152;
  uint64_t v153;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v11 = *(unsigned __int8 *)(v7 + 178);
      if (*(_BYTE *)(v7 + 178))
      {
        if (v11 == 1 || v11 == 2)
          ++*(_DWORD *)(v7 + 216);
      }
      else
      {
        *(_DWORD *)(v7 - 264) += 2;
      }
      v12 = *a2;
      *a2 = 0;
      v112 = v12;
      v113 = *(_OWORD *)(a2 + 1);
      v114 = *(_OWORD *)(a2 + 3);
      *((_DWORD *)a2 + 2) = v113 & 0xFFFFFFFE;
      v13 = a2[5];
      a2[5] = 0;
      v115 = v13;
      v14 = *((_OWORD *)a2 + 4);
      v116 = *((_OWORD *)a2 + 3);
      v117 = v14;
      *((_DWORD *)a2 + 12) = v116 & 0xFFFFFFFE;
      v118 = a2[10];
      v15 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a2 + 11) = 0u;
      v119 = v15;
      *(_QWORD *)&v15 = a2[13];
      a2[13] = 0;
      v120 = v15;
      v16 = a2[14];
      a2[14] = 0;
      v121 = v16;
      *(_QWORD *)&v15 = a2[15];
      a2[15] = 0;
      v122 = v15;
      v17 = a2[16];
      a2[16] = 0;
      v123 = v17;
      *(_QWORD *)&v15 = a2[17];
      a2[17] = 0;
      v124 = v15;
      LODWORD(v17) = *((_DWORD *)a2 + 36);
      v126 = *((_BYTE *)a2 + 148);
      v125 = v17;
      v18 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a2 + 19) = 0u;
      v127 = v18;
      v130 = *((_BYTE *)a2 + 184);
      v19 = a2[21];
      v20 = a2[22];
      a2[21] = 0;
      v128 = v19;
      v129 = v20;
      v21 = a2[24];
      a2[24] = 0;
      v131 = v21;
      v22 = *(_QWORD *)(a1 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          v24 = v23 - 96;
        else
          v24 = 0;
      }
      else
      {
        v24 = 0;
      }
      v132 = *(_WORD *)(v24 + 24);
      v25 = *(WTF::StringImpl **)(v24 + 32);
      if (v25)
        *(_DWORD *)v25 += 2;
      v133 = v25;
      v26 = *(WTF::StringImpl **)(v24 + 40);
      if (v26)
        *(_DWORD *)v26 += 2;
      v134 = v26;
      if (v22)
      {
        v27 = *(_QWORD *)(v22 + 8);
        if (v27)
          v28 = (WebCore::SecurityContext *)(v27 - 96);
        else
          v28 = 0;
      }
      else
      {
        v28 = 0;
      }
      WebCore::SecurityContext::securityOrigin(v28, (WTF::StringImpl *)a2);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      v135 = (WTF *)v29;
      v136 = *a3;
      v137 = *(_WORD *)(a3 + 1);
      v138 = a4;
      (*(void (**)(unsigned int **__return_ptr, _QWORD, _QWORD, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 56)
                                                                                             + 40))(&v111, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v112);
      v31 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v31 = 1;
      ++*(_DWORD *)(a1 + 24);
      *(_QWORD *)(v31 + 8) = a1;
      ++*(_QWORD *)(a1 + 16);
      v32 = *a5;
      *a5 = 0;
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = &unk_1E3353B28;
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v34 = &off_1E3353B50;
      v34[1] = a1;
      v34[2] = v31;
      v34[3] = v32;
      *(_QWORD *)&v139 = v34;
      *((_QWORD *)&v139 + 1) = v33;
      v35 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
      *v35 = 0;
      v35[1] = 0;
      v37 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = v35;
      v38 = *v35;
      *v35 = (unsigned int *)v37;
      if (!v38)
        goto LABEL_138;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v36);
      }
      v37 = (uint64_t)*v35;
      if (*v35)
      {
LABEL_138:
        do
          v41 = __ldaxr((unsigned int *)v37);
        while (__stlxr(v41 + 1, (unsigned int *)v37));
      }
      v42 = (uint64_t)v111;
      v43 = *(WTF::FunctionDispatcher **)(v7 + 192);
      if (!v43)
      {
        v43 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
        v44 = 1;
        *((_DWORD *)v43 + 2) = 1;
        v45 = WTF::FunctionDispatcher::FunctionDispatcher(v43);
        *(_QWORD *)v45 = off_1E33A7800;
        v46 = *(_OWORD *)(v7 + 144);
        *(_OWORD *)(v45 + 16) = *(_OWORD *)(v7 + 128);
        *(_OWORD *)(v45 + 32) = v46;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 64))(v7 - 96))
        {
          v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v47)
            v47 = WTF::Thread::initializeCurrentTLS(0);
          v44 = *(_DWORD *)(v47 + 48);
        }
        *((_DWORD *)v43 + 12) = v44;
        v48 = *(_QWORD *)(v7 + 192);
        *(_QWORD *)(v7 + 192) = v43;
        if (v48)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
          v43 = *(WTF::FunctionDispatcher **)(v7 + 192);
        }
      }
      v49 = *(_QWORD *)(v7 + 8);
      if (v49)
        goto LABEL_139;
      v49 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = v7;
      v104 = *(unsigned int **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = v49;
      if (!v104)
        goto LABEL_139;
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        atomic_store(1u, v104);
        WTF::fastFree((WTF *)v104, v103);
      }
      v49 = *(_QWORD *)(v7 + 8);
      if (v49)
      {
LABEL_139:
        do
          v50 = __ldaxr((unsigned int *)v49);
        while (__stlxr(v50 + 1, (unsigned int *)v49));
      }
      v142 = 0;
      v141 = 0;
      v151 = 0;
      v143 = 0;
      v144 = 0u;
      v110 = v139;
      v139 = 0u;
      v140 = 0u;
      v51 = WTF::fastMalloc((WTF *)0x50);
      (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v43 + 32))(v43);
      v52 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v52 = off_1E3353A58;
      *(_QWORD *)(v52 + 8) = v49;
      v150 = 0;
      *(_BYTE *)(v52 + 16) = 0;
      *(_OWORD *)(v52 + 24) = v110;
      v152 = 0u;
      v153 = 0;
      *(_QWORD *)(v52 + 40) = v35;
      *(_DWORD *)(v51 + 8) = 1;
      *(_QWORD *)(v51 + 16) = v43;
      *(_OWORD *)(v51 + 24) = 0u;
      *(_QWORD *)(v51 + 40) = "enqueueTaskWhenSettled";
      *(_QWORD *)(v51 + 48) = 0;
      *(_WORD *)(v51 + 56) = 0;
      *(_QWORD *)v51 = &off_1E3353AC8;
      v54 = (unsigned int *)(v42 + 8);
      *(_QWORD *)(v51 + 64) = 0;
      *(_QWORD *)(v51 + 72) = v52;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
      v145 = (unsigned int *)v42;
      v146 = (unsigned int *)v51;
      v147 = v140;
      v148 = "enqueueTaskWhenSettled";
      v149 = 0;
      WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v150, v53);
      WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v141, v56);
      if (v37)
      {
        v57 = *(uint64_t **)(v37 + 8);
        if (v57)
        {
          WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(v7 + 200, v57, (uint64_t)&v150);
          v58 = *(_QWORD *)(v37 + 8);
          v59 = v146;
          v60 = v146 + 2;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 + 1, v60));
          v62 = *(unsigned int **)(v58 + 8);
          *(_QWORD *)(v58 + 8) = v59;
          if (v62)
          {
            v63 = v62 + 2;
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              atomic_store(1u, v62 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
            }
          }
          v66 = (WTF::NativePromiseBase *)v146;
          v146 = 0;
          v150 = v66;
          WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v145, &v150, (WTF::Logger::LogSiteIdentifier *)&v147);
          v68 = (unsigned int *)v150;
          v150 = 0;
          if (v68)
          {
            v69 = v68 + 2;
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              atomic_store(1u, v68 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
            }
          }
          v51 = (uint64_t)v146;
          if (!v146)
          {
            v146 = 0;
            goto LABEL_62;
          }
          v42 = (uint64_t)v145;
        }
      }
      v146 = 0;
      v150 = (WTF::NativePromiseBase *)v51;
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(v42, &v150, (WTF::Logger::LogSiteIdentifier *)&v147);
      v72 = (unsigned int *)v150;
      v150 = 0;
      if (v72)
      {
        v73 = v72 + 2;
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          atomic_store(1u, v72 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
        }
      }
      v76 = v146;
      v146 = 0;
      if (v76)
      {
        v77 = v76 + 2;
        do
        {
          v78 = __ldaxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
        }
      }
LABEL_62:
      v80 = v145;
      v145 = 0;
      if (!v80)
        goto LABEL_66;
      v81 = v80 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 16))(v80);
        if (v37)
        {
          do
          {
LABEL_67:
            v84 = __ldaxr((unsigned int *)v37);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, (unsigned int *)v37));
          if (!v85)
          {
            atomic_store(1u, (unsigned int *)v37);
            WTF::fastFree((WTF *)v37, v67);
          }
        }
      }
      else
      {
LABEL_66:
        if (v37)
          goto LABEL_67;
      }
      if ((_QWORD)v139)
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v139 + 1) + 16))(*((_QWORD *)&v139 + 1), &v139);
      v86 = *((_QWORD *)&v139 + 1);
      *((_QWORD *)&v139 + 1) = 0;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      v87 = v139;
      *(_QWORD *)&v139 = 0;
      if (v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      v88 = v111;
      v111 = 0;
      if (v88)
      {
        v89 = v88 + 2;
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          atomic_store(1u, v88 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 16))(v88);
        }
      }
      v92 = v135;
      v135 = 0;
      if (v92)
      {
        do
        {
          v93 = __ldaxr((unsigned int *)v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, (unsigned int *)v92));
        if (!v94)
        {
          atomic_store(1u, (unsigned int *)v92);
          v107 = (WTF::StringImpl *)*((_QWORD *)v92 + 6);
          *((_QWORD *)v92 + 6) = 0;
          if (v107)
          {
            if (*(_DWORD *)v107 == 2)
              WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v67);
            else
              *(_DWORD *)v107 -= 2;
          }
          v108 = (WTF::StringImpl *)*((_QWORD *)v92 + 5);
          *((_QWORD *)v92 + 5) = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2)
              WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v67);
            else
              *(_DWORD *)v108 -= 2;
          }
          v109 = *((unsigned int *)v92 + 8);
          if ((_DWORD)v109 != -1)
            ((void (*)(unsigned int **, char *))off_1E3353590[v109])(&v145, (char *)v92 + 8);
          *((_DWORD *)v92 + 8) = -1;
          WTF::fastFree(v92, v67);
        }
      }
      v95 = v134;
      v134 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
          WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v67);
        else
          *(_DWORD *)v95 -= 2;
      }
      v96 = v133;
      v133 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v67);
        else
          *(_DWORD *)v96 -= 2;
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v112, v67);
      v98 = *(unsigned __int8 *)(v7 + 178);
      if (*(_BYTE *)(v7 + 178))
      {
        if (v98 == 1)
        {
          if (*(_DWORD *)(v7 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 40))(v7 - 96);
          else
            --*(_DWORD *)(v7 + 216);
        }
        else if (v98 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 216));
        }
      }
      else if (*(_DWORD *)(v7 - 264) == 2)
      {
        if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v97);
      }
      else
      {
        *(_DWORD *)(v7 - 264) -= 2;
      }
      return;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v145) = 33;
  v99 = v146;
  v146 = 0;
  LOBYTE(v112) = 33;
  *(_QWORD *)&v113 = v99;
  DWORD2(v113) = 1;
  v100 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v100 + 16))(v100, &v112);
  (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  if (DWORD2(v113) != -1)
    ((void (*)(WTF::NativePromiseBase **, uint64_t *))off_1E3353580[DWORD2(v113)])(&v150, &v112);
  DWORD2(v113) = -1;
  v102 = (WTF::StringImpl *)v146;
  v146 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, v101);
    else
      *(_DWORD *)v102 -= 2;
  }
}

void WebCore::DOMCache::matchAll(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  int v14;
  void *v15;
  WebCore::FetchRequest *v16;
  void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[2];
  __int128 v27;
  WebCore::FetchRequest *v28;
  WTF::StringImpl *v29;
  int v30;
  char v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[7];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  char v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  objc_class *v48;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v25 = 0;
    WTF::URL::invalidate((WTF::URL *)&v25);
    v9 = v25;
    if (v25)
      *(_DWORD *)v25 += 2;
    v33 = *(_OWORD *)v26;
    v34 = v27;
    v32 = v9;
    v35[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v35);
    v35[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35[6] = v28;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0x10000;
    v11 = v40 & 0x80 | 4;
    v40 = v11;
    v41 = 0;
    v12 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v12 += 2;
      v11 = v40;
    }
    v42 = v12;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = v46 & 0xE0 | 5;
    v40 = v11 | 2;
    v13 = v25;
    v25 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v47 = 0;
    if (!*(_BYTE *)(a2 + 16))
    {
LABEL_29:
      WTF::MonotonicTime::now(v13);
      v21 = v20;
      v22 = *a4;
      *a4 = 0;
      v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v23 = &off_1E3353740;
      *((_QWORD *)v23 + 1) = a1;
      *((_QWORD *)v23 + 2) = v22;
      *((_QWORD *)v23 + 3) = v21;
      v25 = v23;
      WebCore::DOMCache::queryCache(a1, (uint64_t *)&v32, a3, 1, (uint64_t *)&v25);
      if (v25)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
LABEL_31:
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v32, v15);
      return;
    }
    v31 = 0;
    WebCore::DOMCache::requestFromInfo(a1, a2, a3[1], &v31, (uint64_t)&v28);
    v14 = v30;
    if (!v30)
    {
      v16 = v28;
      v28 = 0;
      WebCore::FetchRequest::resourceRequest(v16, (uint64_t)&v25);
      WebCore::ResourceRequest::operator=((uint64_t)&v32, (uint64_t)&v25);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v25, v17);
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 1)
          v13 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::FetchRequest *))(*(_QWORD *)v16 + 16))(v16);
        else
          --*((_DWORD *)v16 + 6);
      }
LABEL_26:
      if (v30 != -1)
        v13 = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebCore::FetchRequest **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v30])(&v25, &v28);
      if (v14)
        goto LABEL_31;
      goto LABEL_29;
    }
    if (v31)
    {
      v25 = 0;
      v26[0] = 0;
      v13 = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>>(*a4, (uint64_t)&v25);
      goto LABEL_26;
    }
    if (v30 != 1)
    {
      v24 = std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::DOMCache::add(v24);
      return;
    }
    v18 = v29;
    v29 = 0;
    v19 = *a4;
    v48 = 0;
    LOBYTE(v25) = (_BYTE)v28;
    if (v18)
      *(_DWORD *)v18 += 2;
    v26[0] = v18;
    WebCore::DeferredPromise::reject(v19, (unsigned __int8 *)&v25, 0, &v48);
    v13 = v26[0];
    v26[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v15);
        if (!v18)
          goto LABEL_26;
        goto LABEL_24;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v18)
      goto LABEL_26;
LABEL_24:
    if (*(_DWORD *)v18 == 2)
      v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v18 -= 2;
    goto LABEL_26;
  }
}

uint64_t WebCore::DOMCache::add(WebCore::FetchTasksHandler *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  WTF *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  WTF *v11;
  int v12;
  int v13;
  char v14;
  _BYTE v15[8];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15[0] = 0;
  v16 = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(WTF **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v5])(&v11, v15, a2);
    v16 = v5;
  }
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v12 = 1;
  v11 = v6;
  *(_BYTE *)v6 = 0;
  *((_DWORD *)v6 + 2) = -1;
  v7 = v16;
  if (v16 != -1)
  {
    ((void (*)(char *, WTF *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v16])(&v14, v6, v15);
    *((_DWORD *)v6 + 2) = v7;
  }
  v13 = 1;
  WebCore::DOMCache::addAll(a1, (uint64_t)&v11, a3);
  v9 = *((unsigned int *)v6 + 2);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v9])(&v14, v6);
  *((_DWORD *)v6 + 2) = -1;
  result = WTF::fastFree(v6, v8);
  if (v16 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v16])(&v14, v15);
  return result;
}

WebCore::FetchTasksHandler *WebCore::DOMCache::addAll(WebCore::FetchTasksHandler *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WebCore::FetchTasksHandler *v22;
  WTF *v23;
  uint64_t v24;
  unint64_t StatusReg;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::ScriptExecutionContext *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  objc_class *v46;

  v3 = *((_QWORD *)result + 1);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return result;
  v6 = (uint64_t)result;
  v39 = 0;
  v40 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v7)
    goto LABEL_32;
  if (v7 >> 29)
    goto LABEL_71;
  LODWORD(v40) = *(_DWORD *)(a2 + 12);
  v39 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  v8 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v8)
  {
LABEL_32:
    *(_DWORD *)(v6 + 24) += 2;
    v20 = *a3;
    *a3 = 0;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v21 = &off_1E33537A0;
    v21[1] = v6;
    v21[2] = v6;
    v21[3] = v20;
    result = (WebCore::FetchTasksHandler *)WTF::fastMalloc((WTF *)0x28);
    v22 = result;
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = v6;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = v21;
    if (HIDWORD(v40))
    {
      v23 = v39;
      v24 = 8 * HIDWORD(v40);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v26 = *(_QWORD *)v23;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v23 + 624) + 156))
          break;
        v27 = *(_QWORD *)(v6 + 8);
        if (v27)
        {
          v28 = *(_QWORD *)(v27 + 8);
          if (v28)
            v29 = (WebCore::ScriptExecutionContext *)(v28 - 96);
          else
            v29 = 0;
        }
        else
        {
          v29 = 0;
        }
        *(_QWORD *)v23 = 0;
        ++*(_DWORD *)v22;
        v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v30 = &off_1E3353840;
        *((_QWORD *)v30 + 1) = v6;
        *((_QWORD *)v30 + 2) = v26;
        *((_QWORD *)v30 + 3) = v22;
        v41 = v30;
        v31 = *(_QWORD *)(StatusReg + 736);
        if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
          v32 = WebCore::threadGlobalDataSlow(v30);
        v33 = *(_QWORD *)(v32 + 32);
        if (!v33)
        {
          WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v32);
          v33 = *(_QWORD *)(v32 + 32);
        }
        WebCore::FetchResponse::fetch(v29, v26, (uint64_t *)&v41, (WTF::StringImpl **)(v33 + 16));
        result = v41;
        if (v41)
          result = (WebCore::FetchTasksHandler *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
        if (!v24)
          goto LABEL_55;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = v41;
      v34 = *((_QWORD *)v22 + 4);
      *((_QWORD *)v22 + 4) = 0;
      if (v34)
      {
        LOBYTE(v41) = 16;
        v42 = result;
        v43 = 1;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 16))(v34, &v41);
        result = (WebCore::FetchTasksHandler *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        if (v43 != -1)
          result = (WebCore::FetchTasksHandler *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3353580[v43])(&v44, &v41);
      }
      else if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WebCore::FetchTasksHandler *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
LABEL_55:
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::FetchTasksHandler::~FetchTasksHandler(v22, v11);
      result = (WebCore::FetchTasksHandler *)WTF::fastFree(v37, v38);
    }
    else
    {
      --*(_DWORD *)v22;
    }
LABEL_57:
    v35 = v39;
    if (HIDWORD(v40))
    {
      v36 = 8 * HIDWORD(v40);
      do
      {
        result = *(WebCore::FetchTasksHandler **)v35;
        *(_QWORD *)v35 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 1)
            result = (WebCore::FetchTasksHandler *)(*(uint64_t (**)(WebCore::FetchTasksHandler *))(*(_QWORD *)result + 16))(result);
          else
            --*((_DWORD *)result + 6);
        }
        v35 = (WTF *)((char *)v35 + 8);
        v36 -= 8;
      }
      while (v36);
      v35 = v39;
    }
    if (v35)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      return (WebCore::FetchTasksHandler *)WTF::fastFree(v35, v11);
    }
    return result;
  }
  v9 = *(_QWORD *)a2;
  v10 = 16 * v8;
  while (1)
  {
    WebCore::DOMCache::requestFromInfo(v6, v9, 0, 0, (uint64_t)&v41);
    v12 = v43;
    if (v43)
      break;
    v15 = v41;
    v41 = 0;
    v44 = v15;
    LODWORD(v16) = HIDWORD(v40);
    if (HIDWORD(v40) == (_DWORD)v40)
    {
      v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v39, HIDWORD(v40) + 1, (unint64_t)&v44);
      v16 = HIDWORD(v40);
      v18 = v39;
      v19 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v18 + v16) = v19;
    }
    else
    {
      v44 = 0;
      *((_QWORD *)v39 + HIDWORD(v40)) = v15;
    }
    HIDWORD(v40) = v16 + 1;
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
        result = (WebCore::FetchTasksHandler *)(*(uint64_t (**)(WebCore::FetchTasksHandler *))(*(_QWORD *)result + 16))(result);
      else
        --*((_DWORD *)result + 6);
    }
LABEL_26:
    if (v43 != -1)
      result = (WebCore::FetchTasksHandler *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v43])(&v44, &v41);
    if (v12)
      goto LABEL_57;
    v9 += 16;
    v10 -= 16;
    if (!v10)
      goto LABEL_32;
  }
  if (v43 == 1)
  {
    v13 = v42;
    v42 = 0;
    v14 = *a3;
    v46 = 0;
    LOBYTE(v44) = (_BYTE)v41;
    if (v13)
      *(_DWORD *)v13 += 2;
    v45 = v13;
    WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v44, 0, &v46);
    result = v45;
    v45 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WebCore::FetchTasksHandler *)WTF::StringImpl::destroy(result, v11);
        if (!v13)
          goto LABEL_26;
        goto LABEL_15;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v13)
      goto LABEL_26;
LABEL_15:
    if (*(_DWORD *)v13 == 2)
      result = (WebCore::FetchTasksHandler *)WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
    goto LABEL_26;
  }
  result = (WebCore::FetchTasksHandler *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_71:
  __break(0xC471u);
  return result;
}

void WebCore::DOMCache::putWithResponseData(uint64_t a1, uint64_t *a2, uint64_t *a3, WebCore::FetchResponse **a4, char *a5)
{
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WebCore::FetchResponse *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  unsigned int *v42;
  uint64_t v43;
  WebCore::FetchResponse *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t (***v51)();
  int v52;
  _QWORD *v53;

  v7 = *((_DWORD *)a5 + 4);
  if (v7)
  {
    v8 = *a2;
    *a2 = 0;
    if (v7 != 1)
    {
      v42 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::DOMCache::batchPutOperation(v42, v43, v44, v45, v46);
      return;
    }
    v9 = *a5;
    v10 = *((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v11 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v11 = &off_1E33538A8;
    *(_QWORD *)(v11 + 8) = v8;
    *(_BYTE *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
    v12 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    v13 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(v12 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v13 + 2;
    v14 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v14 = &off_1E3353690;
    v14[1] = (uint64_t (**)())a1;
    v14[2] = (uint64_t (**)())v12;
    v14[3] = (uint64_t (**)())v11;
    v51 = v14;
    v15 = *(_QWORD *)(a1 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 - 96) + 104))(v16 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v17, 0, (uint64_t *)&v51);
        v14 = v51;
        v51 = 0;
        if (!v14)
          return;
      }
      else
      {
        v51 = 0;
      }
      v24 = *v14;
    }
    else
    {
      v51 = 0;
      v24 = &off_1E3353690;
    }
    v24[1]();
    return;
  }
  v51 = 0;
  v52 = 0;
  v20 = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  if (v20)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v20, &v50);
    if (v52 != -1)
    {
      if (v52 == 2)
      {
        v22 = v50;
        v23 = (uint64_t)v51;
        v50 = 0;
        v51 = (uint64_t (***)())v22;
        v53 = (_QWORD *)v23;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v53, v21);
LABEL_16:
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v50, v21);
        do
        {
          v27 = __ldaxr((unsigned int *)v20);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v20));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v20);
          v33 = *(unsigned int *)(v20 + 20);
          if ((_DWORD)v33)
          {
            v34 = *(_QWORD *)(v20 + 8);
            v35 = v34 + 16 * v33;
            do
            {
              v36 = *(unsigned int **)(v34 + 8);
              *(_QWORD *)(v34 + 8) = 0;
              if (v36)
              {
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v47 = v34;
                  v48 = v35;
                  atomic_store(1u, v36);
                  v49 = (WTF *)v36;
                  v39 = v36[6];
                  if ((_DWORD)v39 != -1)
                    ((void (*)(_QWORD **, unsigned int *))off_1E3353660[v39])(&v53, v36 + 2);
                  *((_DWORD *)v49 + 6) = -1;
                  WTF::fastFree(v49, v26);
                  v34 = v47;
                  v35 = v48;
                }
              }
              v34 += 16;
            }
            while (v34 != v35);
          }
          v40 = *(WTF **)(v20 + 8);
          if ((WTF *)(v20 + 24) != v40 && v40 != 0)
          {
            *(_QWORD *)(v20 + 8) = 0;
            *(_DWORD *)(v20 + 16) = 0;
            WTF::fastFree(v40, v26);
          }
          WTF::fastFree((WTF *)v20, v26);
        }
        goto LABEL_19;
      }
      ((void (*)(_QWORD **, uint64_t (****)()))off_1E3353540[v52])(&v53, &v51);
    }
    v25 = v50;
    v50 = 0;
    v51 = (uint64_t (***)())v25;
    v52 = 2;
    goto LABEL_16;
  }
LABEL_19:
  v29 = *a3;
  v30 = *a4;
  ++*(_DWORD *)(a1 + 24);
  v31 = *a2;
  *a2 = 0;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v32 = &off_1E33538D0;
  v32[1] = a1;
  v32[2] = a1;
  v32[3] = v31;
  v53 = v32;
  WebCore::DOMCache::batchPutOperation((unsigned int *)a1, v29, v30, (uint64_t)&v51, (uint64_t *)&v53);
  if (v53)
    (*(void (**)(_QWORD *))(*v53 + 8))(v53);
  if (v52 != -1)
    ((void (*)(_QWORD **, uint64_t (****)()))off_1E3353540[v52])(&v53, &v51);
}

void WebCore::DOMCache::batchPutOperation(unsigned int *a1, uint64_t a2, WebCore::FetchResponse *this, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  CFTypeRef v37;
  int v38;
  WTF::StringImpl *v39;
  __int128 v40;
  WTF::StringImpl *v41;
  CFTypeRef v42;
  int v43;
  void *v44;
  WTF::StringImpl *v45;
  CFTypeRef v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  CFTypeRef v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  __int128 v76;
  _DWORD *v77;
  uint64_t v78;
  char v79;
  CFTypeRef cf;
  _DWORD v81[2];
  WTF::StringImpl *v82;
  __int128 v83;
  __int128 v84;
  WTF::StringImpl *v85;
  char v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[19];
  CFTypeRef v106;
  char v107;
  _BYTE v108[8];
  int v109;
  uint64_t v110;
  __int128 v111;
  char v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  char v127;
  __int128 v128;
  _DWORD *v129;
  uint64_t v130;
  char v131;
  const void *v132;
  _DWORD v133[2];
  WTF::StringImpl *v134;
  __int128 v135;
  __int128 v136;
  WTF::StringImpl *v137;
  char v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[19];
  CFTypeRef v158;
  char v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  WebCore::DOMCache::toConnectionRecord((uint64_t)&v111, (uint64_t)a1, a2, this, a4);
  v59 = v111;
  v60 = v112;
  v7 = v113;
  v8 = v116;
  v113 = 0;
  v61 = v7;
  v62 = v114;
  v63 = v115;
  LODWORD(v114) = v114 & 0xFFFFFFFE;
  v116 = 0;
  v64 = v8;
  v65 = v117;
  v66 = v118;
  LODWORD(v117) = v117 & 0xFFFFFFFE;
  v9 = v120;
  v120 = 0u;
  v68 = v9;
  v10 = v121;
  v121 = 0;
  v67 = v119;
  v69 = v10;
  v11 = v122;
  v122 = 0;
  v70 = v11;
  v12 = v123;
  v123 = 0;
  v71 = v12;
  v13 = v124;
  v124 = 0;
  v72 = v13;
  v14 = v125;
  v125 = 0;
  v73 = v14;
  v75 = v127;
  v74 = v126;
  v15 = v128;
  v128 = 0u;
  v76 = v15;
  v79 = v131;
  v77 = v129;
  v78 = v130;
  v16 = v132;
  v129 = 0;
  v132 = 0;
  cf = v16;
  *(_DWORD *)((char *)v81 + 3) = *(_DWORD *)((char *)v133 + 3);
  v81[0] = v133[0];
  v83 = v135;
  v84 = v136;
  v17 = v134;
  v18 = v137;
  v134 = 0;
  v137 = 0;
  v82 = v17;
  v85 = v18;
  v86 = v138;
  v19 = v140;
  LODWORD(v140) = v140 & 0xFFFFFFFE;
  v20 = v139;
  v21 = v142;
  v139 = 0;
  v88 = v19;
  v89 = v141;
  v142 = 0;
  v87 = v20;
  v90 = v21;
  v91 = v143;
  v22 = v144;
  v23 = v145;
  v144 = 0u;
  v145 = 0u;
  v92 = v22;
  v93 = v23;
  v24 = v146;
  v146 = 0;
  v94 = v24;
  v25 = v147;
  v147 = 0;
  v95 = v25;
  v26 = v148;
  v148 = 0;
  v96 = v26;
  v27 = v149;
  v149 = 0;
  v97 = v27;
  LOBYTE(v98) = 0;
  v99 = 0;
  if (v151)
  {
    v28 = v150;
    v150 = 0;
    v98 = v28;
    v99 = 1;
  }
  v103 = v155;
  v104 = v156;
  *(_OWORD *)v105 = *(_OWORD *)v157;
  *(_DWORD *)&v105[15] = *(_DWORD *)&v157[15];
  v100 = v152;
  v101 = v153;
  v102 = v154;
  v29 = v158;
  v158 = 0;
  v106 = v29;
  v107 = v159;
  v108[0] = 0;
  v109 = -1;
  v30 = v161;
  if (v161 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E33535B0[v161])(&v55, v108, &v160);
    v109 = v30;
  }
  v110 = v162;
  v31 = WTF::fastMalloc((WTF *)0x240);
  v56 = 1;
  v55 = v31;
  v32 = v60;
  *(_OWORD *)v31 = v59;
  *(_BYTE *)(v31 + 16) = v32;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v31 + 24), (const WebCore::ResourceRequestBase::RequestData *)&v61);
  v33 = v76;
  if ((_QWORD)v76)
    *(_DWORD *)v76 += 2;
  *(_QWORD *)(v31 + 176) = v33;
  v34 = *((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
    **((_DWORD **)&v76 + 1) += 2;
  *(_QWORD *)(v31 + 184) = v34;
  v35 = v77;
  if (v77)
    ++*v77;
  *(_QWORD *)(v31 + 192) = v35;
  v36 = v78;
  *(_BYTE *)(v31 + 208) = v79;
  *(_QWORD *)(v31 + 200) = v36;
  v37 = cf;
  *(_QWORD *)(v31 + 216) = cf;
  if (v37)
    CFRetain(v37);
  v38 = v81[0];
  *(_DWORD *)(v31 + 227) = *(_DWORD *)((char *)v81 + 3);
  *(_DWORD *)(v31 + 224) = v38;
  v39 = v82;
  if (v82)
    *(_DWORD *)v82 += 2;
  *(_QWORD *)(v31 + 232) = v39;
  v40 = v84;
  *(_OWORD *)(v31 + 240) = v83;
  *(_OWORD *)(v31 + 256) = v40;
  v41 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  *(_QWORD *)(v31 + 272) = v41;
  *(_BYTE *)(v31 + 280) = v86;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v31 + 288), (const WebCore::ResourceResponseBase *)&v87);
  v42 = v106;
  *(_QWORD *)(v31 + 528) = v106;
  if (v42)
    CFRetain(v42);
  *(_BYTE *)(v31 + 536) = v107;
  *(_BYTE *)(v31 + 544) = 0;
  *(_DWORD *)(v31 + 552) = -1;
  v43 = v109;
  if (v109 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_1E3353C88[v109])(&v58, v31 + 544, v108);
    *(_DWORD *)(v31 + 552) = v43;
  }
  *(_QWORD *)(v31 + 560) = v110;
  v57 = 1;
  WebCore::DOMCache::batchPutOperation(a1, (uint64_t)&v55, a5);
  WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct((WTF::StringImpl *)v31, (WTF::StringImpl *)(v31 + 576));
  WTF::fastFree((WTF *)v31, v44);
  if (v109 != -1)
    ((void (*)(char *, _BYTE *))off_1E3353540[v109])(&v58, v108);
  v109 = -1;
  v46 = v106;
  v106 = 0;
  if (v46)
    CFRelease(v46);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v87, v45);
  v48 = v85;
  v85 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v82;
  v82 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v47);
    else
      *(_DWORD *)v49 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v61, v47);
  if (v161 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E3353540[v161])(&v59, &v160);
  v161 = -1;
  v51 = v158;
  v158 = 0;
  if (v51)
    CFRelease(v51);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v139, v50);
  v53 = v137;
  v137 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v134;
  v134 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v52);
    else
      *(_DWORD *)v54 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v113, v52);
}

uint64_t WebCore::DOMCache::put(uint64_t result, uint64_t a2, WebCore::FetchBodyOwner **a3, uint64_t *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  objc_class *v22;
  WTF::StringImpl *v23;
  objc_class *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebCore::FetchBodyOwner *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  WebCore::FetchBodyOwner *v41;
  uint64_t v42;
  objc_class *v43;
  uint64_t v44;
  objc_class *v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  objc_class *v50;
  _DWORD *v51;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54[2];
  __int128 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  int v60;
  objc_class *v61;
  WTF::StringImpl *v62;
  objc_class *v63;

  v5 = *(_QWORD *)(result + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (!*(_BYTE *)(v6 + 180))
      {
        v9 = (WTF::StringImpl *)result;
        WebCore::DOMCache::requestFromInfo(result, a2, 0, 0, (uint64_t)&v58);
        if (v60)
        {
          if (v60 == 1)
          {
            v10 = v59;
            v59 = 0;
            v11 = *a4;
            v61 = 0;
            LOBYTE(v54[0]) = (_BYTE)v58;
            if (v10)
              *(_DWORD *)v10 += 2;
            v54[1] = v10;
            WebCore::DeferredPromise::reject(v11, (unsigned __int8 *)v54, 0, &v61);
            result = (uint64_t)v54[1];
            v54[1] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
                if (v10)
                {
LABEL_12:
                  if (*(_DWORD *)v10 == 2)
                    result = WTF::StringImpl::destroy(v10, v12);
                  else
                    *(_DWORD *)v10 -= 2;
                }
LABEL_63:
                if (v60 != -1)
                  return ((uint64_t (*)(WTF::StringImpl **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v60])(v54, &v58);
                return result;
              }
              *(_DWORD *)result -= 2;
            }
            if (v10)
              goto LABEL_12;
            goto LABEL_63;
          }
          result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_126:
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
          if (!v9)
            goto LABEL_60;
          goto LABEL_123;
        }
        v4 = v58;
        v58 = 0;
        result = (uint64_t)WebCore::FetchBodyOwner::loadingException((uint64_t *)v54, *a3);
        if ((_BYTE)v55)
        {
          v13 = *a4;
          v14 = (char)v54[0];
          v15 = v54[1];
          if (v54[1])
            *(_DWORD *)v54[1] += 4;
          v63 = 0;
          LOBYTE(v61) = v14;
          v62 = v15;
          WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v61, 0, &v63);
          result = (uint64_t)v62;
          v62 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
              if (!v15)
                goto LABEL_23;
LABEL_21:
              if (*(_DWORD *)v15 == 2)
                result = WTF::StringImpl::destroy(v15, v16);
              else
                *(_DWORD *)v15 -= 2;
LABEL_23:
              if (!(_BYTE)v55 || (result = (uint64_t)v54[1], v54[1] = 0, !result))
              {
LABEL_60:
                if (v4)
                {
                  if (v4[6] == 1)
                    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
                  else
                    --v4[6];
                }
                goto LABEL_63;
              }
              goto LABEL_58;
            }
            *(_DWORD *)result -= 2;
          }
          if (!v15)
            goto LABEL_23;
          goto LABEL_21;
        }
        v17 = *((_QWORD *)*a3 + 19);
        v18 = *(unsigned int *)(v17 + 20);
        if ((_DWORD)v18)
        {
          v19 = 0;
          v20 = (WTF::StringImpl **)(*(_QWORD *)(v17 + 8) + 8);
          while (*((_WORD *)v20 - 4) != 87)
          {
            ++v19;
            v20 += 2;
            if (v18 == v19)
              goto LABEL_30;
          }
          if (v19 >= v18)
          {
            __break(0xC471u);
            goto LABEL_131;
          }
          v21 = *v20;
          if (*v20)
            *(_DWORD *)v21 += 2;
        }
        else
        {
LABEL_30:
          v21 = 0;
        }
        v54[0] = v21;
        LOBYTE(v63) = 0;
        v22 = (objc_class *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = off_1E3353568;
        *((_QWORD *)v22 + 1) = &v63;
        v61 = v22;
        MEMORY[0x19AEA70E0](v54, 44, &v61);
        v24 = v61;
        v61 = 0;
        if (v24)
          (*(void (**)(objc_class *))(*(_QWORD *)v24 + 8))(v24);
        v25 = v63;
        v26 = v54[0];
        v54[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::destroy(v26, v23);
            if (v25)
              goto LABEL_52;
LABEL_48:
            if (*((_BYTE *)*a3 + 544))
              v27 = (uint64_t)*a3 + 288;
            else
              v27 = (uint64_t)*a3 + 552;
            WebCore::ResourceResponse::platformLazyInit(v27, 1);
            if (*(_WORD *)(v27 + 136) == 206)
            {
LABEL_52:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v29 = *a4;
              LOBYTE(v61) = 33;
              v63 = 0;
              LOBYTE(v54[0]) = 33;
              v30 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              v54[1] = v30;
              WebCore::DeferredPromise::reject(v29, (unsigned __int8 *)v54, 0, &v63);
              v31 = v54[1];
              v54[1] = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v16);
                else
                  *(_DWORD *)v31 -= 2;
              }
              result = (uint64_t)v62;
              v62 = 0;
              if (!result)
                goto LABEL_60;
LABEL_58:
              if (*(_DWORD *)result != 2)
              {
                *(_DWORD *)result -= 2;
                goto LABEL_60;
              }
LABEL_129:
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
              goto LABEL_60;
            }
            v32 = *a3;
            if (*((_BYTE *)*a3 + 128))
            {
              if (*((_BYTE *)v32 + 136))
                goto LABEL_52;
              v33 = *((_QWORD *)v32 + 15);
              if (v33)
              {
                result = WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v33 + 8));
                if ((result & 1) != 0)
                  goto LABEL_52;
                if (!*((_BYTE *)v32 + 128))
                  goto LABEL_131;
                if (WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*((_QWORD *)v32 + 15) + 8)))
                  goto LABEL_52;
                v32 = *a3;
              }
            }
            if (!*((_BYTE *)v32 + 128) || (*((_DWORD *)v32 + 12) - 1) > 1)
            {
LABEL_84:
              if (*((_QWORD *)v32 + 101))
                goto LABEL_85;
              if (*((_BYTE *)v32 + 128))
              {
                if (*((_QWORD *)v32 + 15))
                {
LABEL_85:
                  v40 = *a4;
                  *a4 = 0;
                  v41 = *a3;
                  *a3 = 0;
                  v42 = WTF::fastMalloc((WTF *)0x10);
                  *(_DWORD *)v42 = 1;
                  ++*((_DWORD *)v9 + 6);
                  *(_QWORD *)(v42 + 8) = v9;
                  ++*((_QWORD *)v9 + 2);
                  v57 = v9;
                  v43 = (objc_class *)WTF::fastMalloc((WTF *)0x38);
                  *(_QWORD *)v43 = off_1E3353920;
                  *((_QWORD *)v43 + 1) = v40;
                  *((_QWORD *)v43 + 2) = v4;
                  *((_QWORD *)v43 + 3) = v41;
                  *(_OWORD *)v54 = 0u;
                  v55 = 0u;
                  *((_QWORD *)v43 + 4) = 0;
                  *((_QWORD *)v43 + 5) = v42;
                  v56 = 0;
                  *((_QWORD *)v43 + 6) = v9;
                  v61 = v43;
                  *((_BYTE *)v32 + 136) = 1;
                  if (*((_BYTE *)v32 + 128) && (v44 = *((_QWORD *)v32 + 15)) != 0)
                  {
                    v45 = v43;
                    v46 = WTF::fastMalloc((WTF *)0x18);
                    *(_DWORD *)(v46 + 8) = 1;
                    *(_QWORD *)v46 = off_1E3367688;
                    *(_QWORD *)(v46 + 16) = v45;
                    v47 = (_DWORD *)*((_QWORD *)v32 + 10);
                    *((_QWORD *)v32 + 10) = v46;
                    if (v47)
                    {
                      if (v47[2] == 1)
                      {
                        (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
                        v46 = *((_QWORD *)v32 + 10);
                      }
                      else
                      {
                        --v47[2];
                      }
                    }
                    WebCore::InternalReadableStream::pipeTo(*(_QWORD *)(v44 + 8), (WTF::StringImpl *)v46);
                  }
                  else
                  {
                    WebCore::FetchResponse::Loader::consumeDataByChunk(*((_QWORD *)v32 + 101), (uint64_t *)&v61);
                    if (v61)
                      (*(void (**)(objc_class *))(*(_QWORD *)v61 + 8))(v61);
                  }
                  result = WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::~$_0((uint64_t)v54, v48);
                  goto LABEL_63;
                }
                *((_BYTE *)v32 + 136) = 1;
                WebCore::FetchBody::take((uint64_t *)v32 + 5, v28, (uint64_t)v54);
              }
              else
              {
                v54[0] = 0;
                LODWORD(v54[1]) = 0;
              }
              ++*((_DWORD *)v9 + 6);
              v49 = *a4;
              *a4 = 0;
              v50 = (objc_class *)WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v50 = &off_1E3353958;
              *((_QWORD *)v50 + 1) = v9;
              *((_QWORD *)v50 + 2) = v9;
              *((_QWORD *)v50 + 3) = v49;
              v61 = v50;
              WebCore::DOMCache::batchPutOperation((unsigned int *)v9, (uint64_t)v4, v32, (uint64_t)v54, (uint64_t *)&v61);
              result = (uint64_t)v61;
              if (v61)
                result = (*(uint64_t (**)(objc_class *))(*(_QWORD *)v61 + 8))(v61);
              if (LODWORD(v54[1]) != -1)
                result = ((uint64_t (*)(objc_class **, WTF::StringImpl **))off_1E3353540[LODWORD(v54[1])])(&v61, v54);
              goto LABEL_60;
            }
            v34 = *((_QWORD *)v9 + 1);
            if (v34)
            {
              v35 = *(_QWORD *)(v34 + 8);
              if (v35)
                v36 = (WebCore::ScriptExecutionContext *)(v35 - 96);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v37 = WebCore::ScriptExecutionContext::globalObject(v36);
            if (!*((_BYTE *)v32 + 128) || *((_BYTE *)v32 + 192))
              goto LABEL_83;
            v28 = (void *)v37;
            v38 = (WTF *)*((_QWORD *)v32 + 15);
            if (v38)
              goto LABEL_81;
            result = WebCore::FetchBodyOwner::createReadableStream(v32, (uint64_t)v28, (uint64_t)v54);
            if ((_BYTE)v55)
            {
              v9 = v54[1];
              v53 = *a4;
              v61 = 0;
              if (v54[1])
                *(_DWORD *)v54[1] += 2;
              v54[1] = v9;
              WebCore::DeferredPromise::reject(v53, (unsigned __int8 *)v54, 0, &v61);
              result = (uint64_t)v54[1];
              v54[1] = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  goto LABEL_126;
                *(_DWORD *)result -= 2;
              }
              if (!v9)
                goto LABEL_60;
LABEL_123:
              if (*(_DWORD *)v9 != 2)
              {
                *(_DWORD *)v9 -= 2;
                goto LABEL_60;
              }
              result = (uint64_t)v9;
              goto LABEL_129;
            }
            if (*((_BYTE *)v32 + 128))
            {
              v38 = (WTF *)*((_QWORD *)v32 + 15);
              if (v38)
              {
LABEL_81:
                v39 = (*(_DWORD *)v38)++;
                if (v39)
                {
                  *(_DWORD *)v38 = v39;
                }
                else
                {
                  v51 = (_DWORD *)*((_QWORD *)v38 + 1);
                  *((_QWORD *)v38 + 1) = 0;
                  if (v51)
                  {
                    v52 = v38;
                    if (v51[4] == 1)
                      (*(void (**)(_DWORD *, void *))(*(_QWORD *)v51 + 16))(v51, v28);
                    else
                      --v51[4];
                    v38 = v52;
                  }
                  WTF::fastFree(v38, v28);
                }
              }
LABEL_83:
              v32 = *a3;
              goto LABEL_84;
            }
LABEL_131:
            __break(1u);
            return result;
          }
          *(_DWORD *)v26 -= 2;
        }
        if (v25)
          goto LABEL_52;
        goto LABEL_48;
      }
    }
  }
  return result;
}

uint64_t WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  char v27;

  v3 = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v11 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v11 + 16);
      *((_QWORD *)v3 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v11 + 24, a2);
      WTF::fastFree(v3, v12);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v13 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v4 + 8);
        v15 = v14 + 16 * v13;
        do
        {
          v16 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v24 = v14;
              v25 = v15;
              v23 = v4;
              atomic_store(1u, v16);
              v26 = (WTF *)v16;
              v19 = v16[6];
              if ((_DWORD)v19 != -1)
                ((void (*)(char *, unsigned int *))off_1E3353660[v19])(&v27, v16 + 2);
              *((_DWORD *)v26 + 6) = -1;
              WTF::fastFree(v26, a2);
              v4 = v23;
              v14 = v24;
              v15 = v25;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
      v20 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v20 && v20 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v22 = v4;
        WTF::fastFree(v20, a2);
        v4 = v22;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  v8 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[6];
  }
  v9 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  return a1;
}

uint64_t WebCore::DOMCache::remove(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[2];
  int v13;

  v4 = *(_QWORD *)(result + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v7 = result;
    WebCore::DOMCache::requestFromInfo(result, a2, *(_BYTE *)(a3 + 1), 0, (uint64_t)v12);
    if (v13)
    {
      result = WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*a4, 0);
    }
    else
    {
      v8 = (_DWORD *)v12[0];
      v12[0] = 0;
      ++*(_DWORD *)(v7 + 24);
      v9 = *a4;
      *a4 = 0;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v10 = &off_1E33539A8;
      v10[1] = v7;
      v10[2] = v7;
      v10[3] = v9;
      v11 = v10;
      WebCore::DOMCache::batchDeleteOperation(v7, (uint64_t)v8, a3, (uint64_t *)&v11);
      result = (uint64_t)v11;
      if (v11)
        result = (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
      if (v8[6] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[6];
    }
    if (v13 != -1)
      return ((uint64_t (*)(_QWORD **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v13])(&v11, v12);
  }
  return result;
}

unsigned int *WebCore::DOMCache::batchDeleteOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  int v27;
  char v28;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v8 = *(unsigned __int8 *)(v6 + 178);
    if (*(_BYTE *)(v6 + 178))
    {
      if (v8 == 1 || v8 == 2)
        ++*(_DWORD *)(v6 + 216);
    }
    else
    {
      *(_DWORD *)(v6 - 264) += 2;
    }
    (*(void (**)(unsigned int **__return_ptr, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56)
                                                                                                  + 48))(&v24, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2 + 288, a3);
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    v10 = *a4;
    *a4 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &unk_1E3353C48;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = &off_1E3353C70;
    v12[1] = a1;
    v12[2] = v9;
    v12[3] = v10;
    *(_QWORD *)&v26 = v12;
    *((_QWORD *)&v26 + 1) = v11;
    WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(v6 - 96, (uint64_t *)&v24, &v26);
    if ((_QWORD)v26)
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1), &v26);
    v14 = *((_QWORD *)&v26 + 1);
    *((_QWORD *)&v26 + 1) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v26;
    *(_QWORD *)&v26 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    result = v24;
    v24 = 0;
    if (result)
    {
      v17 = result + 2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
    v20 = *(unsigned __int8 *)(v6 + 178);
    if (*(_BYTE *)(v6 + 178))
    {
      if (v20 == 1)
      {
        if (*(_DWORD *)(v6 + 216) == 1)
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 40))(v6 - 96);
        else
          --*(_DWORD *)(v6 + 216);
      }
      else if (v20 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
      }
    }
    else if (*(_DWORD *)(v6 - 264) == 2)
    {
      if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v13);
    }
    else
    {
      *(_DWORD *)(v6 - 264) -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v24) = 33;
    v21 = v25;
    v25 = 0;
    LOBYTE(v26) = 33;
    *((_QWORD *)&v26 + 1) = v21;
    v27 = 1;
    v22 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 16))(v22, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v27 != -1)
      off_1E33535A0[v27](&v28, (uint64_t)&v26);
    v27 = -1;
    result = (unsigned int *)v25;
    v25 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      else
        *result -= 2;
    }
  }
  return result;
}

void WebCore::DOMCache::keys(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  int v14;
  void *v15;
  WebCore::FetchRequest *v16;
  void *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WebCore::FetchRequest *v23[2];
  int v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[7];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  char v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v20 = 0;
    WTF::URL::invalidate((WTF::URL *)&v20);
    v9 = v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    v26 = v21;
    v27 = v22;
    v25 = v9;
    v28[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v28);
    v28[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28[6] = v23[0];
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0x10000;
    v11 = v33 & 0x80 | 4;
    v33 = v11;
    v34 = 0;
    v12 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v12 += 2;
      v11 = v33;
    }
    v35 = v12;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = v39 & 0xE0 | 5;
    v33 = v11 | 2;
    v13 = v20;
    v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v40 = 0;
    if (!*(_BYTE *)(a2 + 16))
      goto LABEL_19;
    WebCore::DOMCache::requestFromInfo(a1, a2, a3[1], 0, (uint64_t)v23);
    v14 = v24;
    if (v24)
    {
      v20 = 0;
      *(_QWORD *)&v21 = 0;
      WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>>(*a4, (uint64_t)&v20);
    }
    else
    {
      v16 = v23[0];
      v23[0] = 0;
      WebCore::FetchRequest::resourceRequest(v16, (uint64_t)&v20);
      WebCore::ResourceRequest::operator=((uint64_t)&v25, (uint64_t)&v20);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v20, v17);
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 1)
          (*(void (**)(WebCore::FetchRequest *))(*(_QWORD *)v16 + 16))(v16);
        else
          --*((_DWORD *)v16 + 6);
      }
    }
    if (v24 != -1)
      ((void (*)(WTF::StringImpl **, WebCore::FetchRequest **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v24])(&v20, v23);
    if (!v14)
    {
LABEL_19:
      v18 = *a4;
      *a4 = 0;
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v19 = &off_1E3353A08;
      *((_QWORD *)v19 + 1) = a1;
      *((_QWORD *)v19 + 2) = v18;
      v20 = v19;
      WebCore::DOMCache::queryCache(a1, (uint64_t *)&v25, a3, 0, (uint64_t *)&v20);
      if (v20)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v25, v15);
  }
}

void WebCore::DOMCache::toConnectionRecord(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::FetchResponse *this, uint64_t a5)
{
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  WTF *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  const void *v44;
  int v45;
  _DWORD *v46;
  __int128 v47;
  _DWORD *v48;
  char v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFTypeRef v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  CFTypeRef v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  _DWORD *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  __int128 v96;
  _DWORD *v97;
  uint64_t v98;
  char v99;
  const void *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[19];
  CFTypeRef cf;
  char v121;
  char v122[9];

  WebCore::FetchResponse::resourceResponse(this, (uint64_t)&v101);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v81, (const WebCore::ResourceRequestBase::RequestData *)(a3 + 288));
  v11 = *(_DWORD **)(a3 + 440);
  if (v11)
    *v11 += 2;
  *(_QWORD *)&v96 = v11;
  v12 = *(_DWORD **)(a3 + 448);
  if (v12)
    *v12 += 2;
  *((_QWORD *)&v96 + 1) = v12;
  v13 = *(_DWORD **)(a3 + 456);
  if (v13)
    ++*v13;
  v14 = *(_QWORD *)(a3 + 464);
  v97 = v13;
  v98 = v14;
  v99 = *(_BYTE *)(a3 + 472);
  v15 = *(const void **)(a3 + 480);
  v100 = v15;
  if (v15)
    CFRetain(v15);
  v16 = *(_QWORD *)(a3 + 152);
  v17 = *(unsigned int *)(v16 + 20);
  v77 = 0;
  LODWORD(v78) = 0;
  HIDWORD(v78) = v17;
  v76 = a5;
  if ((_DWORD)v17)
  {
    if (v17 >> 28)
      goto LABEL_57;
    v18 = WTF::fastMalloc((WTF *)(16 * v17));
    v19 = v18;
    LODWORD(v78) = v17;
    v77 = v18;
    v20 = *(unsigned int *)(v16 + 20);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = *(_QWORD *)(v16 + 8);
      v23 = v22 + 16 * v20;
      do
      {
        v24 = v22 + v21;
        *(_WORD *)(v18 + v21) = *(_WORD *)(v22 + v21);
        v25 = *(_DWORD **)(v22 + v21 + 8);
        if (v25)
          *v25 += 2;
        *(_QWORD *)(v18 + v21 + 8) = v25;
        v21 += 16;
      }
      while (v24 + 16 != v23);
    }
  }
  else
  {
    v19 = 0;
  }
  v26 = 0;
  v27 = *(unsigned int *)(v16 + 36);
  v79 = 0;
  LODWORD(v80) = 0;
  HIDWORD(v80) = v27;
  if (!(_DWORD)v27)
    goto LABEL_19;
  if (v27 >> 28)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1952E22C0);
  }
  v65 = WTF::fastMalloc((WTF *)(16 * v27));
  v26 = (WTF *)v65;
  LODWORD(v80) = v27;
  v79 = v65;
  v66 = *(unsigned int *)(v16 + 36);
  if ((_DWORD)v66)
  {
    v67 = 0;
    v68 = *(_QWORD *)(v16 + 24);
    v69 = v68 + 16 * v66;
    do
    {
      v70 = v68 + v67;
      v71 = *(_DWORD **)(v68 + v67);
      if (v71)
        *v71 += 2;
      *(_QWORD *)(v65 + v67) = v71;
      v72 = *(_DWORD **)(v70 + 8);
      if (v72)
        *v72 += 2;
      *(_QWORD *)(v65 + v67 + 8) = v72;
      v67 += 16;
    }
    while (v70 + 16 != v69);
  }
LABEL_19:
  v28 = a2;
  if ((v99 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v81);
    v99 |= 1u;
  }
  if (HIDWORD(v89))
  {
    v73 = 16 * HIDWORD(v89);
    v74 = (WTF::StringImpl **)(*((_QWORD *)&v88 + 1) + 8);
    do
    {
      v75 = *v74;
      *v74 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v10);
        else
          *(_DWORD *)v75 -= 2;
      }
      v74 += 2;
      v73 -= 16;
    }
    while (v73);
  }
  v29 = (WTF *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    *((_QWORD *)&v88 + 1) = 0;
    LODWORD(v89) = 0;
    WTF::fastFree(v29, v10);
  }
  v77 = 0;
  v78 = 0;
  *((_QWORD *)&v88 + 1) = v19;
  LODWORD(v89) = v17;
  HIDWORD(v89) = v17;
  if (HIDWORD(v91))
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v90, (WTF *)((char *)v90 + 16 * HIDWORD(v91)));
  v30 = v90;
  if (v90)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree(v30, v10);
  }
  v79 = 0;
  v80 = 0;
  v90 = v26;
  LODWORD(v91) = v27;
  HIDWORD(v91) = v27;
  v99 &= ~2u;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v77, v10);
  v32 = *((_QWORD *)this + 104);
  if (!v32)
  {
    v32 = WebCore::CacheStorageConnection::computeRecordBodySize(*(_QWORD *)(v28 + 56), (uint64_t)this, v76);
    *((_QWORD *)this + 104) = v32;
  }
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(*(_QWORD *)(a3 + 152) + 4);
  v33 = v81;
  v81 = 0;
  *(_QWORD *)(a1 + 24) = v33;
  v34 = v82;
  v35 = v83;
  *(_OWORD *)(a1 + 32) = v82;
  *(_OWORD *)(a1 + 48) = v35;
  LODWORD(v82) = v34 & 0xFFFFFFFE;
  v36 = v84;
  v84 = 0;
  *(_QWORD *)(a1 + 64) = v36;
  v37 = v85;
  v38 = v86;
  *(_OWORD *)(a1 + 72) = v85;
  *(_OWORD *)(a1 + 88) = v38;
  LODWORD(v85) = v37 & 0xFFFFFFFE;
  *(_QWORD *)(a1 + 104) = v87;
  v39 = v88;
  v88 = 0u;
  *(_OWORD *)(a1 + 112) = v39;
  *(_QWORD *)&v39 = v89;
  v89 = 0;
  *(_QWORD *)(a1 + 128) = v39;
  v40 = v90;
  v90 = 0;
  *(_QWORD *)(a1 + 136) = v40;
  *(_QWORD *)&v39 = v91;
  v91 = 0;
  *(_QWORD *)(a1 + 144) = v39;
  v41 = v92;
  v92 = 0;
  *(_QWORD *)(a1 + 152) = v41;
  *(_QWORD *)&v39 = v93;
  v93 = 0;
  *(_QWORD *)(a1 + 160) = v39;
  LODWORD(v41) = v94;
  *(_BYTE *)(a1 + 172) = v95;
  *(_DWORD *)(a1 + 168) = v41;
  v42 = v96;
  v96 = 0u;
  *(_OWORD *)(a1 + 176) = v42;
  v43 = v98;
  *(_BYTE *)(a1 + 208) = v99;
  v44 = v100;
  *(_QWORD *)(a1 + 192) = v97;
  *(_QWORD *)(a1 + 200) = v43;
  v97 = 0;
  v100 = 0;
  *(_QWORD *)(a1 + 216) = v44;
  v45 = *(_DWORD *)(a3 + 560);
  *(_DWORD *)(a1 + 227) = *(_DWORD *)(a3 + 563);
  *(_DWORD *)(a1 + 224) = v45;
  v46 = *(_DWORD **)(a3 + 568);
  if (v46)
    *v46 += 2;
  *(_QWORD *)(a1 + 232) = v46;
  v47 = *(_OWORD *)(a3 + 592);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a3 + 576);
  *(_OWORD *)(a1 + 256) = v47;
  v48 = *(_DWORD **)(a3 + 616);
  if (v48)
    *v48 += 2;
  *(_QWORD *)(a1 + 272) = v48;
  v49 = *(_BYTE *)(*((_QWORD *)this + 19) + 4);
  v50 = v102;
  v51 = v103;
  *(_OWORD *)(a1 + 296) = v102;
  *(_OWORD *)(a1 + 312) = v51;
  v52 = v50;
  v53 = v106;
  v106 = 0u;
  v54 = v107;
  v107 = 0u;
  *(_BYTE *)(a1 + 280) = v49;
  v55 = v101;
  v56 = v104;
  v101 = 0;
  *(_QWORD *)(a1 + 288) = v55;
  LODWORD(v102) = v52 & 0xFFFFFFFE;
  v104 = 0;
  v57 = v105;
  *(_QWORD *)(a1 + 328) = v56;
  *(_QWORD *)(a1 + 336) = v57;
  *(_OWORD *)(a1 + 344) = v53;
  *(_OWORD *)(a1 + 360) = v54;
  *(_QWORD *)&v53 = v108;
  v108 = 0;
  *(_QWORD *)(a1 + 376) = v53;
  v58 = v109;
  v109 = 0;
  *(_QWORD *)(a1 + 384) = v58;
  *(_QWORD *)&v53 = v110;
  v110 = 0;
  *(_QWORD *)(a1 + 392) = v53;
  v59 = v111;
  v111 = 0;
  *(_QWORD *)(a1 + 400) = v59;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (v113)
  {
    v60 = v112;
    v112 = 0;
    *(_QWORD *)(a1 + 408) = v60;
    *(_BYTE *)(a1 + 416) = 1;
  }
  *(_OWORD *)(a1 + 472) = v117;
  *(_OWORD *)(a1 + 488) = v118;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)v119;
  *(_DWORD *)(a1 + 519) = *(_DWORD *)&v119[15];
  *(_OWORD *)(a1 + 424) = v114;
  *(_OWORD *)(a1 + 440) = v115;
  *(_OWORD *)(a1 + 456) = v116;
  v61 = cf;
  cf = 0;
  *(_QWORD *)(a1 + 528) = v61;
  *(_BYTE *)(a1 + 536) = v121;
  *(_BYTE *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = -1;
  v62 = *(unsigned int *)(v76 + 8);
  if ((_DWORD)v62 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33535B0[v62])(v122, a1 + 544, v76);
    *(_DWORD *)(a1 + 552) = v62;
  }
  *(_QWORD *)(a1 + 560) = v32;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v81, v31);
  v64 = cf;
  cf = 0;
  if (v64)
    CFRelease(v64);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v101, v63);
}

unsigned int *WebCore::DOMCache::batchPutOperation(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  char *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  __int128 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  uint64_t v62;
  unsigned int *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66[2];
  char v67;
  uint64_t v68;
  unsigned int v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _DWORD v97[2];
  WTF::StringImpl *v98;
  __int128 v99;
  __int128 v100;
  WTF::StringImpl *v101;
  char v102;
  uint64_t v103[35];
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;

  v4 = *((_QWORD *)result + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v7 = *(unsigned __int8 *)(v5 + 178);
    v62 = v5;
    if (*(_BYTE *)(v5 + 178))
    {
      if (v7 == 1 || v7 == 2)
        ++*(_DWORD *)(v5 + 216);
    }
    else
    {
      *(_DWORD *)(v5 - 264) += 2;
    }
    v60 = result;
    v64 = 0;
    v65 = 0;
    v8 = *(_DWORD *)(a2 + 12);
    if (v8)
    {
      if (v8 >= 0x6EB3E5)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v65) = 592 * v8 / 0x250;
      v64 = (WTF *)WTF::fastMalloc((WTF *)(592 * v8));
      v9 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(uint64_t **)a2;
        v12 = 576 * v9;
        do
        {
          WebCore::DOMCacheEngine::toCrossThreadRecord(v11, (uint64_t)v66);
          v13 = v64;
          v14 = (char *)v64 + 592 * v10;
          v15 = v67;
          *(_OWORD *)v14 = *(_OWORD *)v66;
          v14[16] = v15;
          v16 = v68;
          v68 = 0;
          *((_QWORD *)v14 + 3) = v16;
          v17 = *((_DWORD *)v14 + 8) & 0xFFFFFFFE | v69 & 1;
          *((_DWORD *)v14 + 8) = v17;
          v18 = v17 & 0xFFFFFFFD | (2 * ((v69 >> 1) & 1));
          *((_DWORD *)v14 + 8) = v18;
          v19 = v18 & 0xFFFFFFFB | (4 * ((v69 >> 2) & 1));
          *((_DWORD *)v14 + 8) = v19;
          v20 = v19 & 0xFFFFFFC7 | (8 * ((v69 >> 3) & 7));
          *((_DWORD *)v14 + 8) = v20;
          *((_DWORD *)v14 + 8) = v69 & 0xFFFFFFC0 | v20 & 0x3F;
          *(_OWORD *)(v14 + 36) = v70;
          *(_QWORD *)(v14 + 52) = v71;
          *((_DWORD *)v14 + 15) = v72;
          v69 &= ~1u;
          v21 = v73;
          v73 = 0;
          *((_QWORD *)v14 + 8) = v21;
          v22 = *((_DWORD *)v14 + 18) & 0xFFFFFFFE | v74 & 1;
          *((_DWORD *)v14 + 18) = v22;
          v23 = v22 & 0xFFFFFFFD | (2 * ((v74 >> 1) & 1));
          *((_DWORD *)v14 + 18) = v23;
          v24 = v23 & 0xFFFFFFFB | (4 * ((v74 >> 2) & 1));
          *((_DWORD *)v14 + 18) = v24;
          v25 = v24 & 0xFFFFFFC7 | (8 * ((v74 >> 3) & 7));
          *((_DWORD *)v14 + 18) = v25;
          *((_DWORD *)v14 + 18) = v74 & 0xFFFFFFC0 | v25 & 0x3F;
          *(_OWORD *)(v14 + 76) = v75;
          *(_QWORD *)(v14 + 92) = v76;
          *((_DWORD *)v14 + 25) = v77;
          v74 &= ~1u;
          *((_QWORD *)v14 + 13) = v78;
          v26 = v79;
          v79 = 0;
          *((_QWORD *)v14 + 15) = 0;
          *((_QWORD *)v14 + 16) = 0;
          *((_QWORD *)v14 + 14) = v26;
          v27 = v80;
          v80 = 0;
          *((_QWORD *)v14 + 15) = v27;
          LODWORD(v27) = v81;
          v81 = 0;
          *((_DWORD *)v14 + 32) = v27;
          LODWORD(v27) = v82;
          v82 = 0;
          *((_DWORD *)v14 + 33) = v27;
          *((_QWORD *)v14 + 17) = 0;
          *((_QWORD *)v14 + 18) = 0;
          v28 = v83;
          v83 = 0;
          *((_QWORD *)v14 + 17) = v28;
          LODWORD(v28) = v84;
          v84 = 0;
          *((_DWORD *)v14 + 36) = v28;
          LODWORD(v28) = v85;
          v85 = 0;
          *((_DWORD *)v14 + 37) = v28;
          *((_QWORD *)v14 + 19) = 0;
          *((_QWORD *)v14 + 20) = 0;
          v29 = v86;
          v86 = 0;
          *((_QWORD *)v14 + 19) = v29;
          LODWORD(v29) = v87;
          v87 = 0;
          *((_DWORD *)v14 + 40) = v29;
          LODWORD(v29) = v88;
          v88 = 0;
          *((_DWORD *)v14 + 41) = v29;
          LODWORD(v29) = v89;
          v14[172] = v90;
          *((_DWORD *)v14 + 42) = v29;
          v30 = v91;
          v91 = 0;
          *((_QWORD *)v14 + 22) = v30;
          v31 = v92;
          v92 = 0;
          *((_QWORD *)v14 + 23) = v31;
          v32 = v93;
          v93 = 0;
          *((_QWORD *)v14 + 24) = v32;
          v33 = v94;
          v14[208] = v95;
          *((_QWORD *)v14 + 25) = v33;
          v34 = v96;
          v96 = 0;
          *((_QWORD *)v14 + 27) = v34;
          LODWORD(v34) = v97[0];
          *(_DWORD *)(v14 + 227) = *(_DWORD *)((char *)v97 + 3);
          *((_DWORD *)v14 + 56) = v34;
          v35 = v98;
          v98 = 0;
          *((_QWORD *)v14 + 29) = v35;
          v36 = v100;
          *((_OWORD *)v14 + 15) = v99;
          *((_OWORD *)v14 + 16) = v36;
          v37 = v101;
          v101 = 0;
          *((_QWORD *)v14 + 34) = v37;
          v14[280] = v102;
          WebCore::ResourceResponseData::ResourceResponseData((uint64_t)(v14 + 288), v103);
          v14[568] = 0;
          *((_DWORD *)v14 + 144) = -1;
          v39 = v105;
          if (v105 == -1)
          {
            v40 = 0xFFFFFFFFLL;
          }
          else
          {
            ((void (*)(unsigned int **, char *, uint64_t *))off_1E33535B0[v105])(&v63, v14 + 568, &v104);
            *((_DWORD *)v14 + 144) = v39;
            v40 = v105;
          }
          *((_QWORD *)v13 + 74 * v10 + 73) = v106;
          v10 = ++HIDWORD(v65);
          if (v40 != 0xFFFFFFFFLL)
            ((void (*)(unsigned int **, uint64_t *))off_1E3353540[v40])(&v63, &v104);
          v105 = -1;
          WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v103, v38);
          v42 = v101;
          v101 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v41);
            else
              *(_DWORD *)v42 -= 2;
          }
          v43 = v98;
          v98 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v41);
            else
              *(_DWORD *)v43 -= 2;
          }
          WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v68, v41);
          v11 += 72;
          v12 -= 576;
        }
        while (v12);
      }
    }
    (*(void (**)(unsigned int **__return_ptr, _QWORD, _QWORD, _QWORD, WTF **))(**((_QWORD **)v60 + 7) + 56))(&v63, *((_QWORD *)v60 + 7), *((_QWORD *)v60 + 5), *((_QWORD *)v60 + 6), &v64);
    v44 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v44 = 1;
    ++v60[6];
    *(_QWORD *)(v44 + 8) = v60;
    ++*((_QWORD *)v60 + 2);
    v45 = *a3;
    *a3 = 0;
    v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v46 = off_1E3353CB0;
    v47 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v47 = &off_1E3353CD8;
    *((_QWORD *)v47 + 1) = v60;
    *((_QWORD *)v47 + 2) = v44;
    *((_QWORD *)v47 + 3) = v45;
    v66[0] = v47;
    v66[1] = v46;
    WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(v62 - 96, (uint64_t *)&v63, (__int128 *)v66);
    if (v66[0])
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v66[1] + 16))(v66[1], v66);
    v49 = v66[1];
    v66[1] = 0;
    if (v49)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v50 + 8))(v50);
    v51 = v63;
    v63 = 0;
    if (v51)
    {
      v52 = v51 + 2;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v51 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 16))(v51);
      }
    }
    if (HIDWORD(v65))
      WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(v64, (WTF *)((char *)v64 + 592 * HIDWORD(v65)));
    result = (unsigned int *)v64;
    if (v64)
    {
      v64 = 0;
      LODWORD(v65) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v48);
    }
    v55 = *(unsigned __int8 *)(v62 + 178);
    if (*(_BYTE *)(v62 + 178))
    {
      if (v55 == 1)
      {
        if (*(_DWORD *)(v62 + 216) == 1)
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v62 - 96) + 40))(v62 - 96);
        else
          --*(_DWORD *)(v62 + 216);
      }
      else if (v55 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v62 + 216));
      }
    }
    else if (*(_DWORD *)(v62 - 264) == 2)
    {
      if ((*(_WORD *)(v62 - 258) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v62 - 288), v48);
    }
    else
    {
      *(_DWORD *)(v62 - 264) -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v64) = 33;
    v56 = v65;
    v65 = 0;
    LOBYTE(v66[0]) = 33;
    v66[1] = v56;
    v67 = 1;
    v57 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v57 + 16))(v57, v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    if (v67)
    {
      v59 = v66[1];
      v66[1] = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v58);
        else
          *(_DWORD *)v59 -= 2;
      }
    }
    result = (unsigned int *)v65;
    v65 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v58);
      else
        *result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DOMCache::stop(uint64_t this)
{
  if (!*(_BYTE *)(this + 64))
  {
    *(_BYTE *)(this + 64) = 1;
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(this + 56) + 72))(*(_QWORD *)(this + 56), *(_QWORD *)(this + 40), *(_QWORD *)(this + 48));
  }
  return this;
}

WTF::StringImpl *WebCore::DOMCacheEngine::convertToExceptionAndLog(char *a1, uint64_t a2, int a3)
{
  char v5;
  uint64_t *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v5 = 6;
  switch(a3)
  {
    case 0:
      break;
    case 1:
      v5 = 33;
      break;
    case 2:
      v5 = 33;
      break;
    case 3:
      v5 = 18;
      break;
    case 4:
      v5 = 33;
      break;
    case 6:
      v5 = 33;
      break;
    default:
      v5 = 33;
      break;
  }
  v6 = (uint64_t *)(a1 + 8);
  result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v5;
  if (a2)
  {
    v8 = *v6;
    if (*v6)
    {
      v9 = *(_DWORD *)(v8 + 4);
      *(_DWORD *)v8 += 2;
      if (v9 < 0 || (v10 = (v9 + 28), __OFADD__(v9, 28)))
      {
        v13 = 0;
        goto LABEL_27;
      }
      v11 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
    }
    else
    {
      v11 = 1;
      v10 = 28;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v11, (int8x16_t *)"Cache API operation failed: ", 0x1Cu, v8, &v13);
    if (v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 248))(a2, 1, 2, &v13, 0);
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          if (!v8)
            return result;
          goto LABEL_19;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v8)
        return result;
LABEL_19:
      if (*(_DWORD *)v8 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, v12);
      *(_DWORD *)v8 -= 2;
      return result;
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1952E2BA8);
  }
  return result;
}

BOOL WebCore::DOMCacheEngine::queryCacheMatch(WebCore::ResourceRequest *this, WebCore::ResourceRequest *a2, uint64_t a3, _BYTE *a4)
{
  _BOOL8 v8;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  char v15;
  WTF::StringImpl *v16;

  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (!WebCore::DOMCacheEngine::matchURLs(this, (WTF::StringImpl **)a2, a4))
    return 0;
  if (a4[2])
    return 1;
  WebCore::ResourceResponseBase::httpHeaderField(a3, 87, &v16);
  if (!v16)
    return 1;
  v15 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &unk_1E3353D00;
  v10[1] = &v15;
  v10[2] = a2;
  v10[3] = this;
  v14 = v10;
  MEMORY[0x19AEA70E0](&v16, 44, &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v8 = v15 == 0;
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v8;
}

uint64_t WebCore::DOMCacheEngine::matchURLs(WebCore::ResourceRequest *this, WTF::StringImpl **a2, _BYTE *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v6 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v6 += 2;
  v12 = v6;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v11 = v7;
  if (*a3)
  {
    WTF::URL::setQuery();
    WTF::URL::setQuery();
  }
  v9 = WTF::equalIgnoringFragmentIdentifier();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v9;
}

uint64_t WebCore::DOMCacheEngine::queryCacheMatch(WebCore::ResourceRequest *a1, WTF::StringImpl **a2, char a3, uint64_t **a4, _BYTE *a5)
{
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WebCore::HTTPHeaderNamesHash *v17;
  uint64_t v18;
  unint64_t v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t v25;
  WTF::StringImpl *v26;

  if (!WebCore::DOMCacheEngine::matchURLs(a1, a2, a5))
    return 0;
  v9 = a5[2];
  v10 = a5[2] != 0;
  if (!v9 && (a3 & 1) == 0)
  {
    v11 = *a4;
    if (*a4)
    {
      v13 = *((unsigned int *)v11 - 1);
      v14 = &v11[2 * v13];
      if (*((_DWORD *)v11 - 3))
      {
        v12 = *a4;
        if ((_DWORD)v13)
        {
          v25 = 16 * v13;
          v12 = *a4;
          while ((unint64_t)(*v12 + 1) <= 1)
          {
            v12 += 2;
            v25 -= 16;
            if (!v25)
            {
              v12 = v14;
              goto LABEL_7;
            }
          }
        }
        goto LABEL_7;
      }
      v12 = &v11[2 * v13];
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v14 = &v11[2 * v13];
LABEL_7:
    if (v11)
      v15 = &v11[2 * *((unsigned int *)v11 - 1)];
    else
      v15 = 0;
    if (v15 != v12)
    {
      while (1)
      {
        v16 = *v12;
        if (*v12)
        {
          v17 = *(WebCore::HTTPHeaderNamesHash **)(v16 + 8);
          v18 = *(unsigned int *)(v16 + 4);
          v19 = ((unint64_t)*(unsigned int *)(v16 + 16) >> 2) & 1;
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 1;
        }
        if ((*((_BYTE *)a1 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(a1);
          *((_BYTE *)a1 + 184) |= 1u;
        }
        WebCore::HTTPHeaderMap::get((uint64_t)a1 + 96, v17, (char *)(v18 | (v19 << 32)), &v26);
        v10 = WTF::equal((WTF *)v12[1], v26, v20);
        v22 = v26;
        v26 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::destroy(v22, v21);
            if (!(_DWORD)v10)
              return v10;
            goto LABEL_18;
          }
          *(_DWORD *)v22 -= 2;
        }
        if (!(_DWORD)v10)
          return v10;
LABEL_18:
        v23 = v12 + 2;
        v12 = v14;
        if (v23 != v14)
        {
          v12 = v23;
          while ((unint64_t)(*v12 + 1) <= 1)
          {
            v12 += 2;
            if (v12 == v14)
            {
              v12 = v14;
              break;
            }
          }
        }
        if (v12 == v15)
          return v10;
      }
    }
    return 1;
  }
  return v10;
}

uint64_t WebCore::DOMCacheEngine::copyResponseBody(uint64_t a1)
{
  uint64_t v1;
  WebCore::DOMCacheEngine::Record *v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::DOMCacheEngine::Record *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DOMCacheEngine::Record::copy(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))off_1E3353D30[v1])(&v5, a1);
  }
}

void WebCore::DOMCacheEngine::Record::copy(WebCore::DOMCacheEngine::Record *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;
  const void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  char *v17;

  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)this + 16);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(a2 + 24), (WebCore::DOMCacheEngine::Record *)((char *)this + 24));
  v4 = (_DWORD *)*((_QWORD *)this + 22);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 176) = v4;
  v5 = (_DWORD *)*((_QWORD *)this + 23);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 184) = v5;
  v6 = (_DWORD *)*((_QWORD *)this + 24);
  if (v6)
    ++*v6;
  v7 = *((_QWORD *)this + 25);
  *(_QWORD *)(a2 + 192) = v6;
  *(_QWORD *)(a2 + 200) = v7;
  *(_BYTE *)(a2 + 208) = *((_BYTE *)this + 208);
  v8 = (const void *)*((_QWORD *)this + 27);
  *(_QWORD *)(a2 + 216) = v8;
  if (v8)
    CFRetain(v8);
  *(_DWORD *)(a2 + 224) = *((_DWORD *)this + 56);
  *(_DWORD *)(a2 + 227) = *(_DWORD *)((char *)this + 227);
  v9 = (_DWORD *)*((_QWORD *)this + 29);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a2 + 232) = v9;
  v10 = *((_OWORD *)this + 16);
  *(_OWORD *)(a2 + 240) = *((_OWORD *)this + 15);
  *(_OWORD *)(a2 + 256) = v10;
  v11 = (_DWORD *)*((_QWORD *)this + 34);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a2 + 272) = v11;
  *(_BYTE *)(a2 + 280) = *((_BYTE *)this + 280);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a2 + 288), (WebCore::DOMCacheEngine::Record *)((char *)this + 288));
  v12 = (const void *)*((_QWORD *)this + 66);
  *(_QWORD *)(a2 + 528) = v12;
  if (v12)
    CFRetain(v12);
  *(_BYTE *)(a2 + 536) = *((_BYTE *)this + 536);
  v13 = *((unsigned int *)this + 138);
  if ((_DWORD)v13 == -1)
  {
    v14 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::DOMCacheEngine::toCrossThreadRecord(v14, v15);
  }
  else
  {
    v17 = &v16;
    ((void (*)(char **, char *))off_1E3353D30[v13])(&v17, (char *)this + 544);
    *(_QWORD *)(a2 + 560) = *((_QWORD *)this + 70);
  }
}

void WebCore::DOMCacheEngine::toCrossThreadRecord(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint8x8_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41[35];
  WTF::StringImpl *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  _QWORD v64[2];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  WebCore::ResourceRequestBase::isolatedCopy((WebCore::ResourceRequestBase *)(a1 + 3), (uint64_t)&v43);
  v2.i32[0] = *((_DWORD *)a1 + 56);
  v35 = *((_BYTE *)a1 + 229);
  v36 = *((_BYTE *)a1 + 228);
  v8 = *((_BYTE *)a1 + 230);
  WTF::String::isolatedCopy();
  v9 = a1[32];
  v34 = a1[30];
  v37 = a1[31];
  v38 = a1[33];
  v10 = (WTF::StringImpl *)v41[0];
  WTF::String::isolatedCopy();
  v11 = *((_BYTE *)a1 + 280);
  WebCore::ResourceResponseBase::crossThreadData((WebCore::ResourceResponseBase *)(a1 + 36), (uint64_t)v41);
  v12 = *((unsigned int *)a1 + 138);
  if ((_DWORD)v12 != -1)
  {
    v64[0] = &v63;
    ((void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *))off_1E3353D18[v12])(&v39, v64, a1 + 68);
    v13 = a1[70];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
    v14 = v43;
    v15 = v46;
    v43 = 0;
    *(_QWORD *)(a2 + 24) = v14;
    v16 = v44;
    v17 = v45;
    *(_OWORD *)(a2 + 32) = v44;
    *(_OWORD *)(a2 + 48) = v17;
    LODWORD(v44) = v16 & 0xFFFFFFFE;
    v46 = 0;
    *(_QWORD *)(a2 + 64) = v15;
    v18 = v47;
    v19 = v48;
    *(_OWORD *)(a2 + 72) = v47;
    *(_OWORD *)(a2 + 88) = v19;
    LODWORD(v47) = v18 & 0xFFFFFFFE;
    *(_QWORD *)&v19 = v51;
    *(_QWORD *)(a2 + 104) = v49;
    v20 = v50;
    v50 = 0u;
    *(_OWORD *)(a2 + 112) = v20;
    v51 = 0;
    *(_QWORD *)(a2 + 128) = v19;
    v21 = v52;
    v52 = 0;
    *(_QWORD *)(a2 + 136) = v21;
    *(_QWORD *)&v19 = v53;
    v53 = 0;
    *(_QWORD *)(a2 + 144) = v19;
    v22 = v54;
    v54 = 0;
    *(_QWORD *)(a2 + 152) = v22;
    *(_QWORD *)&v19 = v55;
    v55 = 0;
    *(_QWORD *)(a2 + 160) = v19;
    LODWORD(v22) = v56;
    *(_BYTE *)(a2 + 172) = v57;
    *(_DWORD *)(a2 + 168) = v22;
    v23 = v58;
    v58 = 0u;
    *(_OWORD *)(a2 + 176) = v23;
    v24 = v59;
    v25 = v60;
    *(_BYTE *)(a2 + 208) = v61;
    *(_QWORD *)(a2 + 192) = v24;
    *(_QWORD *)(a2 + 200) = v25;
    v26 = v62;
    v59 = 0;
    v62 = 0;
    *(_QWORD *)(a2 + 216) = v26;
    *(_DWORD *)(a2 + 224) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    *(_BYTE *)(a2 + 228) = v36;
    *(_BYTE *)(a2 + 229) = v35;
    *(_BYTE *)(a2 + 230) = v8;
    if (v10)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)(a2 + 232) = v10;
    *(_QWORD *)(a2 + 240) = v34;
    *(_QWORD *)(a2 + 248) = v37;
    *(_QWORD *)(a2 + 256) = v9;
    v27 = v42;
    v42 = 0;
    *(_QWORD *)(a2 + 264) = v38;
    *(_QWORD *)(a2 + 272) = v27;
    *(_BYTE *)(a2 + 280) = v11;
    WebCore::ResourceResponseData::ResourceResponseData(a2 + 288, v41);
    *(_BYTE *)(a2 + 568) = 0;
    *(_DWORD *)(a2 + 576) = -1;
    v29 = v40;
    if (v40 == -1)
    {
      *(_QWORD *)(a2 + 584) = v13;
    }
    else
    {
      ((void (*)(_QWORD *, uint64_t, uint64_t *))off_1E33535B0[v40])(v64, a2 + 568, &v39);
      *(_DWORD *)(a2 + 576) = v29;
      v30 = v40;
      *(_QWORD *)(a2 + 584) = v13;
      if ((_DWORD)v30 != -1)
        ((void (*)(_QWORD *, uint64_t *))off_1E3353540[v30])(v64, &v39);
    }
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v41, v28);
    v32 = v42;
    v42 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v31);
        if (v10)
        {
LABEL_12:
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v31);
          else
            *(_DWORD *)v10 -= 2;
        }
LABEL_14:
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v43, v31);
        return;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (v10)
      goto LABEL_12;
    goto LABEL_14;
  }
  v33 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::DOMCacheEngine::fromCrossThreadRecord(v33);
}

void WebCore::DOMCacheEngine::fromCrossThreadRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  WebCore::ResourceRequestBase::RequestData::RequestData(a2 + 24, (uint64_t *)(a1 + 24));
  v4 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a2 + 176) = v4;
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a2 + 192) = v5;
  *(_QWORD *)(a2 + 200) = v6;
  *(_BYTE *)(a2 + 208) = *(_BYTE *)(a1 + 208);
  v7 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a2 + 216) = v7;
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 224);
  *(_DWORD *)(a2 + 227) = *(_DWORD *)(a1 + 227);
  v8 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a2 + 232) = v8;
  v9 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a2 + 256) = v9;
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a1 + 272);
  *(_BYTE *)(a2 + 280) = *(_BYTE *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = 0;
  WebCore::ResourceResponseBase::fromCrossThreadData(a1 + 288, a2 + 288);
  *(_BYTE *)(a2 + 544) = 0;
  *(_DWORD *)(a2 + 552) = -1;
  v10 = *(unsigned int *)(a1 + 576);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33535B0[v10])(&v11, a2 + 544, a1 + 568);
    *(_DWORD *)(a2 + 552) = v10;
  }
  *(_QWORD *)(a2 + 560) = *(_QWORD *)(a1 + 584);
}

void WebCore::DOMCacheEngine::CrossThreadRecord::isolatedCopy(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint8x8_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::DOMCacheStorage *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41[35];
  WTF::StringImpl *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  _QWORD v64[2];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  WebCore::ResourceRequestBase::isolatedCopy((WebCore::ResourceRequestBase *)(a1 + 3), (uint64_t)&v43);
  v2.i32[0] = *((_DWORD *)a1 + 56);
  v35 = *((_BYTE *)a1 + 229);
  v36 = *((_BYTE *)a1 + 228);
  v8 = *((_BYTE *)a1 + 230);
  WTF::String::isolatedCopy();
  v9 = a1[32];
  v34 = a1[30];
  v37 = a1[31];
  v38 = a1[33];
  v10 = (WTF::StringImpl *)v41[0];
  WTF::String::isolatedCopy();
  v11 = *((_BYTE *)a1 + 280);
  WebCore::ResourceResponseData::isolatedCopy((WebCore::ResourceResponseData *)(a1 + 36), (uint64_t)v41);
  v12 = *((unsigned int *)a1 + 144);
  if ((_DWORD)v12 != -1)
  {
    v64[0] = &v63;
    ((void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *))off_1E3353D18[v12])(&v39, v64, a1 + 71);
    v13 = a1[73];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
    v14 = v43;
    v15 = v46;
    v43 = 0;
    *(_QWORD *)(a2 + 24) = v14;
    v16 = v44;
    v17 = v45;
    *(_OWORD *)(a2 + 32) = v44;
    *(_OWORD *)(a2 + 48) = v17;
    LODWORD(v44) = v16 & 0xFFFFFFFE;
    v46 = 0;
    *(_QWORD *)(a2 + 64) = v15;
    v18 = v47;
    v19 = v48;
    *(_OWORD *)(a2 + 72) = v47;
    *(_OWORD *)(a2 + 88) = v19;
    LODWORD(v47) = v18 & 0xFFFFFFFE;
    *(_QWORD *)&v19 = v51;
    *(_QWORD *)(a2 + 104) = v49;
    v20 = v50;
    v50 = 0u;
    *(_OWORD *)(a2 + 112) = v20;
    v51 = 0;
    *(_QWORD *)(a2 + 128) = v19;
    v21 = v52;
    v52 = 0;
    *(_QWORD *)(a2 + 136) = v21;
    *(_QWORD *)&v19 = v53;
    v53 = 0;
    *(_QWORD *)(a2 + 144) = v19;
    v22 = v54;
    v54 = 0;
    *(_QWORD *)(a2 + 152) = v22;
    *(_QWORD *)&v19 = v55;
    v55 = 0;
    *(_QWORD *)(a2 + 160) = v19;
    LODWORD(v22) = v56;
    *(_BYTE *)(a2 + 172) = v57;
    *(_DWORD *)(a2 + 168) = v22;
    v23 = v58;
    v58 = 0u;
    *(_OWORD *)(a2 + 176) = v23;
    v24 = v59;
    v25 = v60;
    *(_BYTE *)(a2 + 208) = v61;
    *(_QWORD *)(a2 + 192) = v24;
    *(_QWORD *)(a2 + 200) = v25;
    v26 = v62;
    v59 = 0;
    v62 = 0;
    *(_QWORD *)(a2 + 216) = v26;
    *(_DWORD *)(a2 + 224) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    *(_BYTE *)(a2 + 228) = v36;
    *(_BYTE *)(a2 + 229) = v35;
    *(_BYTE *)(a2 + 230) = v8;
    if (v10)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)(a2 + 232) = v10;
    *(_QWORD *)(a2 + 240) = v34;
    *(_QWORD *)(a2 + 248) = v37;
    *(_QWORD *)(a2 + 256) = v9;
    v27 = v42;
    v42 = 0;
    *(_QWORD *)(a2 + 264) = v38;
    *(_QWORD *)(a2 + 272) = v27;
    *(_BYTE *)(a2 + 280) = v11;
    WebCore::ResourceResponseData::ResourceResponseData(a2 + 288, v41);
    *(_BYTE *)(a2 + 568) = 0;
    *(_DWORD *)(a2 + 576) = -1;
    v29 = v40;
    if (v40 == -1)
    {
      *(_QWORD *)(a2 + 584) = v13;
    }
    else
    {
      ((void (*)(_QWORD *, uint64_t, uint64_t *))off_1E33535B0[v40])(v64, a2 + 568, &v39);
      *(_DWORD *)(a2 + 576) = v29;
      v30 = v40;
      *(_QWORD *)(a2 + 584) = v13;
      if ((_DWORD)v30 != -1)
        ((void (*)(_QWORD *, uint64_t *))off_1E3353540[v30])(v64, &v39);
    }
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v41, v28);
    v32 = v42;
    v42 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v31);
        if (v10)
        {
LABEL_12:
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v31);
          else
            *(_DWORD *)v10 -= 2;
        }
LABEL_14:
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v43, v31);
        return;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (v10)
      goto LABEL_12;
    goto LABEL_14;
  }
  v33 = (WebCore::DOMCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::DOMCacheStorage::~DOMCacheStorage(v33);
}

void WebCore::DOMCacheStorage::~DOMCacheStorage(WebCore::DOMCacheStorage *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E3354220;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((unsigned int *)this + 11);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        WTF::RefCounted<WebCore::DOMCache>::deref(v10 + 24, a2);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3354220;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((unsigned int *)this + 11);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        WTF::RefCounted<WebCore::DOMCache>::deref(v10 + 24, a2);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  WTF::fastFree(v12, v13);
}

void WebCore::DOMCacheStorage::origin(WebCore::DOMCacheStorage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  _BYTE v22[24];
  int v23;
  _BYTE v24[24];
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), a2), v6))
  {
    v7 = v6;
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    if (v9)
      v10 = v9 - 96;
    else
      v10 = 0;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 256))(v10);
    v22[0] = 0;
    v23 = -1;
    v12 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E33535C8[v12])(&v21, v22, v11 + 8);
      v23 = v12;
    }
    v24[0] = 0;
    v25 = -1;
    v13 = v7[8];
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, _BYTE *, unsigned int *))off_1E33535C8[v13])(&v21, v24, v7 + 2);
      v25 = v13;
      LODWORD(v12) = v23;
    }
    *(_BYTE *)this = 0;
    *((_DWORD *)this + 6) = -1;
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *, WebCore::DOMCacheStorage *, _BYTE *))off_1E33535D8[v12])(&v21, this, v22);
      *((_DWORD *)this + 6) = v12;
      LODWORD(v13) = v25;
    }
    *((_BYTE *)this + 32) = 0;
    v14 = (WebCore::DOMCacheStorage *)((char *)this + 32);
    *((_DWORD *)this + 14) = -1;
    if ((_DWORD)v13 == -1)
    {
      *((_BYTE *)this + 64) = 1;
    }
    else
    {
      ((void (*)(char *))off_1E33535D8[v13])(&v21);
      *((_DWORD *)this + 14) = v13;
      v15 = v25;
      *((_BYTE *)this + 64) = 1;
      if ((_DWORD)v15 != -1)
        ((void (*)(char *, _BYTE *))off_1E3353590[v15])(&v21, v24);
    }
    v25 = -1;
    if (v23 != -1)
      ((void (*)(char *, _BYTE *))off_1E3353590[v23])(&v21, v22);
    do
    {
      v16 = __ldaxr(v7);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v7));
    if (!v17)
    {
      atomic_store(1u, v7);
      v18 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
      *((_QWORD *)v7 + 6) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v14);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v14);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v7[8];
      if ((_DWORD)v20 != -1)
        ((void (*)(_BYTE *, unsigned int *))off_1E3353590[v20])(v22, v7 + 2);
      v7[8] = -1;
      WTF::fastFree((WTF *)v7, v14);
    }
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 64) = 0;
  }
}

WTF::StringImpl *WebCore::DOMCacheStorage::match(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *result;
  char v17[8];
  int v18;
  __int16 v19;
  char v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  uint64_t v23;
  char v24;

  v17[0] = 0;
  v18 = -1;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t *, char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v7])(&v23, v17, a2);
    v18 = v7;
  }
  v19 = *a3;
  v20 = *((_BYTE *)a3 + 2);
  v8 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  v9 = (_DWORD *)*a4;
  *a4 = 0;
  v21 = v8;
  v22 = v9;
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v10 = &off_1E3353D80;
  *(_QWORD *)(v10 + 8) = a1;
  *(_BYTE *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = -1;
  v11 = v18;
  if (v18 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v18])(&v23, v10 + 16, v17);
    *(_DWORD *)(v10 + 24) = v11;
  }
  *(_WORD *)(v10 + 32) = v19;
  *(_BYTE *)(v10 + 34) = v20;
  *(_QWORD *)(v10 + 40) = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)(v10 + 48) = v12;
  v23 = v10;
  WebCore::DOMCacheStorage::retrieveCaches(a1, &v23);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[4];
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  if (v18 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v18])(&v24, v17);
  return result;
}

unsigned int *WebCore::DOMCacheStorage::retrieveCaches(uint64_t a1, uint64_t *a2)
{
  _OWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::FunctionDispatcher *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  void *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *result;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unsigned int *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  __int128 v96;
  unsigned int *v97;
  WTF::StringImpl *v98;
  __int128 v99;
  const char *v100;
  uint64_t v101;
  WTF::NativePromiseBase *v102;
  WTF::StringImpl *v103;
  __int128 v104;
  uint64_t v105;
  _BYTE v106[24];
  int v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  WebCore::DOMCacheStorage::origin((WebCore::DOMCacheStorage *)v106, (WTF::StringImpl *)a1);
  if (v110)
  {
    (*(void (**)(unsigned int **__return_ptr, _QWORD, _BYTE *, _QWORD))(**(_QWORD **)(a1 + 56) + 32))(&v90, *(_QWORD *)(a1 + 56), v106, *(_QWORD *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 96;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    v8 = *a2;
    *a2 = 0;
    v87 = a1;
    *(_QWORD *)&v88 = v8;
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    *((_QWORD *)&v88 + 1) = v9;
    v11 = *(_QWORD *)(a1 + 56);
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (v110)
    {
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
      *v14 = v11;
      *((_BYTE *)v14 + 8) = 0;
      v15 = v14 + 1;
      *((_DWORD *)v14 + 8) = -1;
      v16 = v107;
      if (v107 != -1)
      {
        ((void (*)(unsigned int **, _QWORD *, _BYTE *))off_1E33535C8[v107])(&v97, v15, v106);
        *((_DWORD *)v14 + 8) = v16;
      }
      *((_BYTE *)v14 + 40) = 0;
      *((_DWORD *)v14 + 16) = -1;
      v17 = v109;
      if (v109 != -1)
      {
        ((void (*)(unsigned int **))off_1E33535C8[v109])(&v97);
        *((_DWORD *)v14 + 16) = v17;
      }
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v14 + 80))(*v14, v15);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = &unk_1E3353EA0;
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v19 = off_1E3353EC8;
      v19[1] = v87;
      v19[2] = v88;
      v20 = *((_QWORD *)&v88 + 1);
      v88 = 0u;
      v19[3] = v20;
      v19[4] = v14;
      v89 = 0;
      *(_QWORD *)&v91 = v19;
      *((_QWORD *)&v91 + 1) = v18;
      v2 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
      *v2 = 0u;
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = v2;
      v9 = *(_QWORD *)v2;
      *(_QWORD *)v2 = v21;
      if (!v9)
      {
        do
LABEL_17:
          v24 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v24 + 1, (unsigned int *)v21));
LABEL_18:
        v25 = (uint64_t)v90;
        v26 = *(WTF::FunctionDispatcher **)(v7 + 288);
        if (!v26)
        {
          v26 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
          v27 = 1;
          *((_DWORD *)v26 + 2) = 1;
          v28 = WTF::FunctionDispatcher::FunctionDispatcher(v26);
          *(_QWORD *)v28 = off_1E33A7800;
          v29 = *(_OWORD *)(v7 + 240);
          *(_OWORD *)(v28 + 16) = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v28 + 32) = v29;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7))
          {
            v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v30)
              v30 = WTF::Thread::initializeCurrentTLS(0);
            v27 = *(_DWORD *)(v30 + 48);
          }
          *((_DWORD *)v26 + 12) = v27;
          v31 = *(_QWORD *)(v7 + 288);
          *(_QWORD *)(v7 + 288) = v26;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
            v26 = *(WTF::FunctionDispatcher **)(v7 + 288);
          }
        }
        v32 = *(_QWORD *)(v7 + 104);
        if (v32)
          goto LABEL_108;
        v32 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 8) = v7 + 96;
        v83 = *(unsigned int **)(v7 + 104);
        *(_QWORD *)(v7 + 104) = v32;
        if (!v83)
          goto LABEL_108;
        do
        {
          v84 = __ldaxr(v83);
          v85 = v84 - 1;
        }
        while (__stlxr(v85, v83));
        if (!v85)
        {
          atomic_store(1u, v83);
          WTF::fastFree((WTF *)v83, v82);
        }
        v32 = *(_QWORD *)(v7 + 104);
        if (v32)
        {
LABEL_108:
          do
            v33 = __ldaxr((unsigned int *)v32);
          while (__stlxr(v33 + 1, (unsigned int *)v32));
        }
        v94 = 0;
        v93 = 0;
        LOBYTE(v103) = 0;
        v95 = 0;
        v96 = 0u;
        v86 = v91;
        v91 = 0u;
        v92 = 0u;
        v34 = WTF::fastMalloc((WTF *)0x50);
        (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v26 + 32))(v26);
        v35 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v35 = off_1E3353DD0;
        *(_QWORD *)(v35 + 8) = v32;
        v102 = 0;
        *(_BYTE *)(v35 + 16) = 0;
        *(_OWORD *)(v35 + 24) = v86;
        v104 = 0u;
        v105 = 0;
        *(_QWORD *)(v35 + 40) = v2;
        *(_DWORD *)(v34 + 8) = 1;
        *(_QWORD *)(v34 + 16) = v26;
        *(_OWORD *)(v34 + 24) = 0u;
        *(_QWORD *)(v34 + 40) = "enqueueTaskWhenSettled";
        *(_QWORD *)(v34 + 48) = 0;
        *(_WORD *)(v34 + 56) = 0;
        *(_QWORD *)v34 = &off_1E3353E40;
        v37 = (unsigned int *)(v25 + 8);
        *(_QWORD *)(v34 + 64) = 0;
        *(_QWORD *)(v34 + 72) = v35;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
        v97 = (unsigned int *)v25;
        v98 = (WTF::StringImpl *)v34;
        v99 = v92;
        v100 = "enqueueTaskWhenSettled";
        v101 = 0;
        WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v102, v36);
        WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v93, v39);
        if (v21)
        {
          v40 = *(uint64_t **)(v21 + 8);
          if (v40)
          {
            WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(v7 + 296, v40, (uint64_t)&v102);
            v41 = *(_QWORD *)(v21 + 8);
            v42 = v98;
            v43 = (unsigned int *)((char *)v98 + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 + 1, v43));
            v45 = *(unsigned int **)(v41 + 8);
            *(_QWORD *)(v41 + 8) = v42;
            if (v45)
            {
              v46 = v45 + 2;
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                atomic_store(1u, v45 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
              }
            }
            v49 = v98;
            v98 = 0;
            v102 = v49;
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v97, &v102, (WTF::Logger::LogSiteIdentifier *)&v99);
            v51 = (unsigned int *)v102;
            v102 = 0;
            if (v51)
            {
              v52 = v51 + 2;
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                atomic_store(1u, v51 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
              }
            }
            v34 = (uint64_t)v98;
            if (!v98)
            {
              v98 = 0;
              goto LABEL_55;
            }
            v25 = (uint64_t)v97;
          }
        }
        v98 = 0;
        v102 = (WTF::NativePromiseBase *)v34;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(v25, &v102, (WTF::Logger::LogSiteIdentifier *)&v99);
        v55 = (unsigned int *)v102;
        v102 = 0;
        if (v55)
        {
          v56 = v55 + 2;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            atomic_store(1u, v55 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
          }
        }
        v59 = (unsigned int *)v98;
        v98 = 0;
        if (v59)
        {
          v60 = v59 + 2;
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
          {
            atomic_store(1u, v59 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
          }
        }
LABEL_55:
        v63 = v97;
        v97 = 0;
        if (!v63)
          goto LABEL_59;
        v64 = v63 + 2;
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          atomic_store(1u, v63 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 16))(v63);
          if (v21)
          {
            do
            {
LABEL_60:
              v67 = __ldaxr((unsigned int *)v21);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, (unsigned int *)v21));
            if (!v68)
            {
              atomic_store(1u, (unsigned int *)v21);
              WTF::fastFree((WTF *)v21, v50);
            }
          }
        }
        else
        {
LABEL_59:
          if (v21)
            goto LABEL_60;
        }
        if ((_QWORD)v91)
          (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v91 + 1) + 16))(*((_QWORD *)&v91 + 1), &v91);
        v69 = *((_QWORD *)&v91 + 1);
        *((_QWORD *)&v91 + 1) = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        v70 = v91;
        *(_QWORD *)&v91 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
        WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0(&v87, v50);
        result = v90;
        v90 = 0;
        if (result)
        {
          v72 = result + 2;
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            atomic_store(1u, result + 2);
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
          }
        }
        goto LABEL_85;
      }
      do
      {
        v22 = __ldaxr((unsigned int *)v9);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v9));
      if (v23)
      {
LABEL_16:
        v21 = *(_QWORD *)v2;
        if (!*(_QWORD *)v2)
          goto LABEL_18;
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, v10);
    goto LABEL_16;
  }
  v75 = *(_QWORD *)(a1 + 8);
  if (v75)
  {
    v76 = *(_QWORD *)(v75 + 8);
    if (v76)
      v77 = v76 - 96;
    else
      v77 = 0;
  }
  else
  {
    v77 = 0;
  }
  WebCore::DOMCacheEngine::convertToExceptionAndLog((char *)&v102, v77, 5);
  LOBYTE(v97) = (_BYTE)v102;
  v78 = v103;
  v103 = 0;
  v98 = v78;
  LOBYTE(v99) = 1;
  v79 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v79 + 16))(v79, &v97);
  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  if ((_BYTE)v99)
  {
    v81 = v98;
    v98 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, v80);
      else
        *(_DWORD *)v81 -= 2;
    }
  }
  result = (unsigned int *)v103;
  v103 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v80);
    else
      *result -= 2;
  }
LABEL_85:
  if (v110)
  {
    if (v109 != -1)
      result = (unsigned int *)((uint64_t (*)(unsigned int **, uint64_t *))off_1E3353590[v109])(&v97, &v108);
    v109 = -1;
    if (v107 != -1)
      return (unsigned int *)((uint64_t (*)(unsigned int **, _BYTE *))off_1E3353590[v107])(&v97, v106);
  }
  return result;
}

_QWORD *WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)v3 + 88))(*(_QWORD *)v3, v3 + 2);
    v5 = v3[16];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))off_1E3353590[v5])(&v15, v3 + 10);
    v3[16] = -1;
    v6 = v3[8];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))off_1E3353590[v6])(&v16, v3 + 2);
    v3[8] = -1;
    v7 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    WTF::fastFree((WTF *)v3, v4);
  }
  v11 = (WTF *)a1[2];
  a1[2] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v14 = *((_QWORD *)v11 + 1);
      --*(_QWORD *)(v14 + 16);
      *((_QWORD *)v11 + 1) = 0;
      if (*(_DWORD *)(v14 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      else
        --*(_DWORD *)(v14 + 24);
      WTF::fastFree(v11, a2);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = a1[1];
  a1[1] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

_QWORD *WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  char v16;
  char v17;

  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)v3 + 88))(*(_QWORD *)v3, v3 + 2);
    v5 = v3[16];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))off_1E3353590[v5])(&v16, v3 + 10);
    v3[16] = -1;
    v6 = v3[8];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))off_1E3353590[v6])(&v17, v3 + 2);
    v3[8] = -1;
    v7 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    WTF::fastFree((WTF *)v3, v4);
  }
  v11 = (WTF *)a1[3];
  a1[3] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v15 = *((_QWORD *)v11 + 1);
      --*(_QWORD *)(v15 + 16);
      *((_QWORD *)v11 + 1) = 0;
      if (*(_DWORD *)(v15 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      else
        --*(_DWORD *)(v15 + 24);
      WTF::fastFree(v11, a2);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[4];
  }
  v13 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  return a1;
}

uint64_t WebCore::DOMCacheStorage::stop(uint64_t this)
{
  *(_BYTE *)(this + 64) = 1;
  return this;
}

uint64_t WebCore::WindowOrWorkerGlobalScopeCaches::caches@<X0>(uint64_t this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::DOMWindowCaches *v11;

  if (*(_BYTE *)(this + 274))
    goto LABEL_18;
  if ((*(_BYTE *)(this + 76) & 4) != 0)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 14;
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  if (*((_BYTE *)a2 + 56))
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return this;
  }
  v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6 + 1;
  v7 = *((_QWORD *)a2 + 9);
  if (!v7)
    goto LABEL_10;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_10;
  if (*(_BYTE *)(v8 + 178))
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1952E4A10);
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9
    || (v10 = *(_QWORD *)(v9 + 8)) == 0
    || *(WebCore::ScriptExecutionContext **)(*(_QWORD *)(v10 + 296) + 696) != a2)
  {
LABEL_10:
    this = 0;
    goto LABEL_13;
  }
  v11 = (WebCore::DOMWindowCaches *)WebCore::DOMWindowCaches::from(a2, a2);
  this = WebCore::DOMWindowCaches::caches(v11);
  v6 = *((_DWORD *)a2 + 6) - 1;
LABEL_13:
  *(_QWORD *)a3 = this;
  *(_DWORD *)(a3 + 16) = 0;
  if (!v6)
    return (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 72))(a2);
  *((_DWORD *)a2 + 6) = v6;
  return this;
}

uint64_t WebCore::WindowOrWorkerGlobalScopeCaches::caches(WebCore::WindowOrWorkerGlobalScopeCaches *this, WebCore::ScriptExecutionContext *a2, WebCore::WorkerGlobalScope *a3)
{
  uint64_t *v4;
  const char **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned __int8 *v19;
  const char *v20[2];
  const char *v21[3];

  v4 = (uint64_t *)((char *)a2 + 432);
  v21[0] = "WorkerGlobalScopeCaches";
  v21[1] = (const char *)24;
  v5 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)a2 + 54, v21);
  if (!v5 || (v6 = (uint64_t)v5[2]) == 0)
  {
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = off_1E33534D0;
    *(_QWORD *)(v6 + 8) = a2;
    *(_QWORD *)(v6 + 16) = 0;
    v19 = (unsigned __int8 *)v6;
    v20[0] = "WorkerGlobalScopeCaches";
    v20[1] = (const char *)24;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>(v4, v20, &v19, (uint64_t)v21);
    v7 = v19;
    v19 = 0;
    if (v7)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 8);
    v10 = WebCore::WorkerGlobalScope::cacheStorageConnection((WebCore::WorkerGlobalScope *)v9);
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = WTF::fastMalloc((WTF *)0x48);
    v8 = v13;
    *(_DWORD *)(v13 + 24) = 1;
    if (v9 && !*(_BYTE *)(v9 + 274))
    {
      v14 = v9 - 192;
      v15 = *(_QWORD *)(v9 + 512);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
          v14 = v16;
      }
      v9 = v14 + 192;
    }
    *(_QWORD *)v13 = &off_1E33A18C0;
    *(_QWORD *)(v13 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v13, (WebCore::ScriptExecutionContext *)v9);
    *(_QWORD *)v8 = &off_1E33A0540;
    *(_QWORD *)(v8 + 16) = 0;
    if (v9)
    {
      if (*(_BYTE *)(v9 + 278))
      {
        __break(0xC471u);
        JUMPOUT(0x1952E4C14);
      }
      v20[0] = (const char *)v8;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v9 + 128), (uint64_t *)v20, (uint64_t)v21);
    }
    *(_QWORD *)v8 = &off_1E3354220;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = v10;
    *(_BYTE *)(v8 + 64) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
    v17 = *(_DWORD **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v8;
    if (v17)
    {
      if (v17[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
        return *(_QWORD *)(v6 + 16);
      }
      else
      {
        --v17[6];
      }
    }
  }
  return v8;
}

uint64_t *WebCore::CompressionStreamEncoder::encode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_11;
  v16 = (uint64_t *)&v15;
  v6 = (void *)((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_0[v4])(&v16);
  WebCore::CompressionStreamEncoder::compress(a1, v6, v7, (uint64_t)&v16);
  if (!v18)
  {
    v10 = v16;
    v15 = v16;
    v16 = 0;
    if (!*((_BYTE *)v15 + 64))
      goto LABEL_6;
    goto LABEL_12;
  }
  if (v18 != 1)
  {
LABEL_11:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_12:
    v13 = v10[4];
    if (v13)
    {
      v11 = *(_QWORD *)(v13 + 32);
      if (!v11)
      {
LABEL_8:
        *(_QWORD *)a3 = v11;
        *(_DWORD *)(a3 + 16) = 0;
        result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v15);
        v9 = v18;
        if (v18 == -1)
          return result;
        return (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v15, &v16);
      }
LABEL_7:
      JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v15, &v14);
      v11 = v14;
      goto LABEL_8;
    }
LABEL_6:
    v11 = v10[6];
    if (!v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = v17;
  v17 = 0;
  *(_BYTE *)a3 = (_BYTE)v16;
  *(_QWORD *)(a3 + 8) = v8;
  v9 = 1;
  *(_DWORD *)(a3 + 16) = 1;
  return (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v15, &v16);
}

uint64_t WebCore::CompressionStreamEncoder::compress@<X0>(uint64_t result@<X0>, void *a2@<X1>, WTF *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  z_stream *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v35;
  _QWORD v36[3];
  int v37[2];

  v4 = result;
  if ((unint64_t)a3 <= *(_QWORD *)(result + 8))
    v6 = *(_QWORD *)(result + 8);
  else
    v6 = (unint64_t)a3;
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(result + 32) = a2;
  v7 = (z_stream *)(result + 32);
  *(_DWORD *)(result + 40) = (_DWORD)a3;
  if (!*(_BYTE *)(result + 24))
  {
    *(_BYTE *)(result + 24) = 1;
    v16 = *(char *)(result + 144);
    if (v16 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1952E50F0);
    }
    result = deflateInit2_((z_streamp)(result + 32), 5, 8, dword_1968DDE58[v16], 8, 0, "1.2.12", 112);
    if ((_DWORD)result)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = v36[1];
      *(_BYTE *)a4 = 33;
      *(_QWORD *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = 1;
      return result;
    }
  }
  v8 = 0;
  do
  {
    while (v6)
    {
      if (!HIDWORD(v6))
      {
        result = WTF::tryFastMalloc((WTF *)v6);
        v9 = (WTF *)v36[0];
        if (v36[0])
          goto LABEL_12;
      }
      v6 >>= 2;
      if (v6 < *(_QWORD *)(v4 + 8))
      {
        *(_BYTE *)a4 = 36;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_50;
      }
    }
    v9 = 0;
LABEL_12:
    *(_QWORD *)(v4 + 56) = v9;
    *(_DWORD *)(v4 + 64) = v6;
    v10 = deflate(v7, 4 * *(unsigned __int8 *)(v4 + 25));
    v11 = (v10 + 5) > 6 || ((1 << (v10 + 5)) & 0x61) == 0;
    if (v11)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = 0;
      *(_BYTE *)a4 = 33;
      v13 = 1;
      *(_DWORD *)(a4 + 16) = 1;
      if (v9)
        goto LABEL_25;
    }
    else
    {
      if (!*(_DWORD *)(v4 + 40) && (v10 != 1 ? (v12 = *(_BYTE *)(v4 + 25) == 0) : (v12 = 1), v12))
      {
        v13 = 0;
        v14 = (v6 - *(_DWORD *)(v4 + 64));
      }
      else
      {
        v14 = v6;
        v6 <<= v6 < *(_QWORD *)(v4 + 16);
        v13 = 1;
      }
      WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)v37);
      v8 = *(_QWORD *)v37;
      result = WebCore::FragmentedSharedBuffer::append(*(uint64_t *)v37, v9, (WTF *)v14);
      v15 = 1;
      if (v9)
LABEL_25:
        result = WTF::fastFree(v9, a2);
    }
    if (!v15)
      goto LABEL_50;
  }
  while ((v13 & 1) != 0);
  result = (uint64_t)WebCore::SharedBufferBuilder::takeAsArrayBuffer((WebCore::SharedBufferBuilder *)v37, v36);
  v18 = v36[0];
  if (v36[0])
  {
    v35 = 0;
    v36[0] = 0;
    *(_QWORD *)a4 = v18;
    result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v35);
    v19 = (_QWORD *)v36[0];
    *(_DWORD *)(a4 + 16) = 0;
    v36[0] = 0;
    if (v19)
    {
      v11 = *(_DWORD *)v19 == 2;
      *(_DWORD *)v19 -= 2;
      if (v11)
      {
        v20 = v19[10];
        if (v20)
        {
          *(_QWORD *)(v20 + 8) = 3;
          v19[10] = 0;
        }
        if ((v19[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v19 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v19 + 2));
        v22 = (WTF *)v19[1];
        if ((v22 & 1) == 0 && v22)
        {
          v23 = *(WTF **)v22;
          if (*(_QWORD *)v22)
          {
            *(_QWORD *)v22 = 0;
            *((_DWORD *)v22 + 2) = 0;
            WTF::fastFree(v23, v21);
          }
          WTF::fastFree(v22, v21);
        }
        result = WTF::fastFree((WTF *)v19, v21);
      }
    }
  }
  else
  {
    *(_BYTE *)a4 = 36;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  v8 = *(_QWORD *)v37;
LABEL_50:
  *(_QWORD *)v37 = 0;
  if (v8)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v8);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v8));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v8);
      v26 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v8 + 8);
        v28 = v27 + 16 * v26;
        do
        {
          v29 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              v32 = v29[6];
              if ((_DWORD)v32 != -1)
                ((void (*)(_QWORD *, unsigned int *))off_1E3353660[v32])(v36, v29 + 2);
              v29[6] = -1;
              WTF::fastFree((WTF *)v29, a2);
            }
          }
          v27 += 16;
        }
        while (v27 != v28);
      }
      v33 = *(WTF **)(v8 + 8);
      if ((WTF *)(v8 + 24) != v33 && v33 != 0)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        WTF::fastFree(v33, a2);
      }
      return WTF::fastFree((WTF *)v8, a2);
    }
  }
  return result;
}

uint64_t *WebCore::CompressionStreamEncoder::flush@<X0>(WebCore::CompressionStreamEncoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  *((_BYTE *)this + 25) = 1;
  WebCore::CompressionStreamEncoder::compress((uint64_t)this, 0, 0, (uint64_t)&v12);
  if (!v14)
  {
    v5 = v12;
    v11 = v12;
    v12 = 0;
    if (*(_BYTE *)(v11 + 64) && (v8 = *(_QWORD *)(v5 + 32)) != 0)
    {
      v6 = *(_QWORD *)(v8 + 32);
      if (!v6)
      {
LABEL_7:
        *(_QWORD *)a2 = v6;
        *(_DWORD *)(a2 + 16) = 0;
        result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v11);
        v4 = v14;
        if (v14 == -1)
          return result;
        return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v11, &v12);
      }
    }
    else
    {
      v6 = *(_QWORD *)(v5 + 48);
      if (!v6)
        goto LABEL_7;
    }
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v11, &v10);
    v6 = v10;
    goto LABEL_7;
  }
  if (v14 != 1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::DecompressionStreamDecoder::decode(v9);
  }
  v3 = v13;
  v13 = 0;
  *(_BYTE *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = 1;
  *(_DWORD *)(a2 + 16) = 1;
  return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v11, &v12);
}

uint64_t *WebCore::DecompressionStreamDecoder::decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_11;
  v16 = (uint64_t *)&v15;
  v6 = (void *)((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_0[v4])(&v16);
  WebCore::DecompressionStreamDecoder::decompressZlib(a1, v6, v7, (uint64_t)&v16);
  if (!v18)
  {
    v10 = v16;
    v15 = v16;
    v16 = 0;
    if (!*((_BYTE *)v15 + 64))
      goto LABEL_6;
    goto LABEL_12;
  }
  if (v18 != 1)
  {
LABEL_11:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_12:
    v13 = v10[4];
    if (v13)
    {
      v11 = *(_QWORD *)(v13 + 32);
      if (!v11)
      {
LABEL_8:
        *(_QWORD *)a3 = v11;
        *(_DWORD *)(a3 + 16) = 0;
        result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v15);
        v9 = v18;
        if (v18 == -1)
          return result;
        return (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v15, &v16);
      }
LABEL_7:
      JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v15, &v14);
      v11 = v14;
      goto LABEL_8;
    }
LABEL_6:
    v11 = v10[6];
    if (!v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = v17;
  v17 = 0;
  *(_BYTE *)a3 = (_BYTE)v16;
  *(_QWORD *)(a3 + 8) = v8;
  v9 = 1;
  *(_DWORD *)(a3 + 16) = 1;
  return (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v15, &v16);
}

uint64_t *WebCore::DecompressionStreamDecoder::flush@<X0>(WebCore::DecompressionStreamDecoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  *((_BYTE *)this + 25) = 1;
  WebCore::DecompressionStreamDecoder::decompressZlib((uint64_t)this, 0, 0, (uint64_t)&v15);
  if (!v17)
  {
    v5 = v15;
    v14 = v15;
    v15 = 0;
    if (*(_BYTE *)(v14 + 64) && (v8 = *(_QWORD *)(v5 + 32)) != 0)
    {
      v6 = *(_QWORD *)(v8 + 32);
      if (!v6)
      {
LABEL_7:
        *(_QWORD *)a2 = v6;
        *(_DWORD *)(a2 + 16) = 0;
        result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v14);
        v4 = v17;
        if (v17 == -1)
          return result;
        return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v14, &v15);
      }
    }
    else
    {
      v6 = *(_QWORD *)(v5 + 48);
      if (!v6)
        goto LABEL_7;
    }
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v14, &v13);
    v6 = v13;
    goto LABEL_7;
  }
  if (v17 != 1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::DecompressionStreamDecoder::decompressZlib(v9, v10, v11, v12);
  }
  v3 = v16;
  v16 = 0;
  *(_BYTE *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = 1;
  *(_DWORD *)(a2 + 16) = 1;
  return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v14, &v15);
}

uint64_t WebCore::DecompressionStreamDecoder::decompressZlib@<X0>(uint64_t result@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  z_stream *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  BOOL v33;
  uint64_t v34;
  _QWORD v35[3];
  int v36[2];

  v4 = result;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(result + 32) = a2;
  v7 = (z_stream *)(result + 32);
  *(_DWORD *)(result + 40) = a3;
  if (!*(_BYTE *)(result + 24))
  {
    *(_BYTE *)(result + 24) = 1;
    v15 = *(char *)(result + 192);
    if (v15 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1952E57A0);
    }
    result = inflateInit2_((z_streamp)(result + 32), dword_1968DDE58[v15], "1.2.12", 112);
    if ((_DWORD)result)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = v35[1];
      *(_BYTE *)a4 = 33;
      *(_QWORD *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = 1;
      return result;
    }
  }
  v8 = 0;
  do
  {
    while (1)
    {
      if (!v6)
      {
        v9 = 0;
        break;
      }
      if (!HIDWORD(v6))
      {
        result = WTF::tryFastMalloc((WTF *)v6);
        v9 = (WTF *)v35[0];
        if (v35[0])
          break;
      }
      v6 >>= 2;
      if (v6 < *(_QWORD *)(v4 + 8))
      {
        *(_BYTE *)a4 = 36;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_47;
      }
    }
    *(_QWORD *)(v4 + 56) = v9;
    *(_DWORD *)(v4 + 64) = v6;
    v10 = inflate(v7, 4 * *(unsigned __int8 *)(v4 + 25));
    if (v10 == -5)
    {
      if (*(_BYTE *)(v4 + 25))
      {
LABEL_15:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = 0;
        v12 = v35[0];
        *(_BYTE *)a4 = 33;
        *(_QWORD *)(a4 + 8) = v12;
        goto LABEL_20;
      }
    }
    else if (v10)
    {
      if (v10 == 1)
      {
        if (*(_DWORD *)(v4 + 40))
          goto LABEL_15;
        goto LABEL_25;
      }
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = 0;
      *(_BYTE *)a4 = 33;
LABEL_20:
      v14 = 1;
      *(_DWORD *)(a4 + 16) = 1;
      if (!v9)
        goto LABEL_22;
LABEL_21:
      result = WTF::fastFree(v9, a2);
      goto LABEL_22;
    }
    if (*(_DWORD *)(v4 + 40) || *(_BYTE *)(v4 + 25))
    {
      v13 = v6;
      v6 <<= v6 < *(_QWORD *)(v4 + 16);
      v14 = 1;
      goto LABEL_26;
    }
LABEL_25:
    v14 = 0;
    v13 = (v6 - *(_DWORD *)(v4 + 64));
LABEL_26:
    WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)v36);
    v8 = *(_QWORD *)v36;
    result = WebCore::FragmentedSharedBuffer::append(*(uint64_t *)v36, v9, (WTF *)v13);
    v11 = 1;
    if (v9)
      goto LABEL_21;
LABEL_22:
    if (!v11)
      goto LABEL_47;
  }
  while ((v14 & 1) != 0);
  result = (uint64_t)WebCore::SharedBufferBuilder::takeAsArrayBuffer((WebCore::SharedBufferBuilder *)v36, v35);
  v17 = v35[0];
  if (v35[0])
  {
    v34 = 0;
    v35[0] = 0;
    *(_QWORD *)a4 = v17;
    result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v34);
    v18 = (_QWORD *)v35[0];
    *(_DWORD *)(a4 + 16) = 0;
    v35[0] = 0;
    if (v18)
    {
      v33 = *(_DWORD *)v18 == 2;
      *(_DWORD *)v18 -= 2;
      if (v33)
      {
        v19 = v18[10];
        if (v19)
        {
          *(_QWORD *)(v19 + 8) = 3;
          v18[10] = 0;
        }
        if ((v18[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v18 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v18 + 2));
        v21 = (WTF *)v18[1];
        if ((v21 & 1) == 0 && v21)
        {
          v22 = *(WTF **)v21;
          if (*(_QWORD *)v21)
          {
            *(_QWORD *)v21 = 0;
            *((_DWORD *)v21 + 2) = 0;
            WTF::fastFree(v22, v20);
          }
          WTF::fastFree(v21, v20);
        }
        result = WTF::fastFree((WTF *)v18, v20);
      }
    }
  }
  else
  {
    *(_BYTE *)a4 = 36;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  v8 = *(_QWORD *)v36;
LABEL_47:
  *(_QWORD *)v36 = 0;
  if (v8)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v8);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v8));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v8);
      v25 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v25)
      {
        v26 = *(_QWORD *)(v8 + 8);
        v27 = v26 + 16 * v25;
        do
        {
          v28 = *(unsigned int **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              v31 = v28[6];
              if ((_DWORD)v31 != -1)
                ((void (*)(_QWORD *, unsigned int *))off_1E3353660[v31])(v35, v28 + 2);
              v28[6] = -1;
              WTF::fastFree((WTF *)v28, a2);
            }
          }
          v26 += 16;
        }
        while (v26 != v27);
      }
      v32 = *(WTF **)(v8 + 8);
      v33 = (WTF *)(v8 + 24) == v32 || v32 == 0;
      if (!v33)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        WTF::fastFree(v32, a2);
      }
      return WTF::fastFree((WTF *)v8, a2);
    }
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ContactProperty>>>(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ContactProperty>>>::convert<WebCore::ContactProperty,0ul>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

WTF *WebCore::ContactsManager::select(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _QWORD *v50;
  WTF::StringImpl *v51[5];
  WTF *v52;
  size_t __len;
  char v54;
  WTF::StringImpl *v55;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_14;
  v7 = *(_QWORD *)(v6 + 64);
  if (!v7)
    goto LABEL_14;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_14;
  v9 = *(_QWORD *)(v8 + 72);
  if (!v9)
    goto LABEL_14;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_14;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1952E5B24);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11)
  {
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  v12 = *(_QWORD **)(v11 + 8);
  if (!v12)
  {
LABEL_15:
    v18 = 1;
    goto LABEL_16;
  }
  v16 = (unsigned int *)(v12 + 1);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  if (*(_QWORD **)(v12[16] + 8) == v12)
  {
    if (v12[37])
    {
      v25 = v12[3];
      if (v25)
      {
        if (*(_QWORD *)(v25 + 8))
        {
          if (WTF::isMainThread((WTF *)a1))
          {
            {
              if (WebCore::currentToken(void)::token
                && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
                && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
              {
                v50 = v12;
                if (*(_BYTE *)(a1 + 24))
                {
                  v29 = *a4;
                  v51[0] = 0;
                  v30 = 8;
                }
                else
                {
                  v32 = (WTF *)*(unsigned int *)(a2 + 12);
                  if ((_DWORD)v32)
                  {
                    v55 = 0;
                    v52 = 0;
                    __len = 0;
                    v54 = 0;
                    if (&v52 != (WTF **)a2)
                    {
                      v33 = (WTF *)WTF::fastMalloc(v32);
                      LODWORD(__len) = (_DWORD)v32;
                      v52 = v33;
                      if (HIDWORD(__len))
                      {
                        memmove(v33, *(const void **)a2, HIDWORD(__len));
                        v34 = HIDWORD(__len);
                        v33 = v52;
                      }
                      else
                      {
                        v34 = 0;
                      }
                      memcpy((char *)v33 + v34, (const void *)(*(_QWORD *)a2 + v34), *(_QWORD *)a2 + *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + v34));
                      HIDWORD(__len) = *(_DWORD *)(a2 + 12);
                    }
                    v54 = *a3;
                    WTF::URL::truncatedForUseAsBase((WTF::URL *)(v50[37] + 736));
                    v36 = v51[0];
                    if (v51[0])
                      *(_DWORD *)v51[0] += 2;
                    v37 = v55;
                    v55 = v36;
                    if (v37)
                    {
                      if (*(_DWORD *)v37 == 2)
                      {
                        WTF::StringImpl::destroy(v37, v35);
                        v36 = v51[0];
                      }
                      else
                      {
                        *(_DWORD *)v37 -= 2;
                      }
                    }
                    v51[0] = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, v35);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    *(_BYTE *)(a1 + 24) = 1;
                    v38 = *(_QWORD *)(*(_QWORD *)(v50[3] + 8) + 48);
                    v39 = *a4;
                    *a4 = 0;
                    v40 = *(_QWORD *)(a1 + 8);
                    if (v40)
                      goto LABEL_84;
                    v40 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v40 = 1;
                    *(_QWORD *)(v40 + 8) = a1;
                    v42 = *(unsigned int **)(a1 + 8);
                    *(_QWORD *)(a1 + 8) = v40;
                    if (!v42)
                      goto LABEL_84;
                    do
                    {
                      v43 = __ldaxr(v42);
                      v44 = v43 - 1;
                    }
                    while (__stlxr(v44, v42));
                    if (!v44)
                    {
                      atomic_store(1u, v42);
                      WTF::fastFree((WTF *)v42, v41);
                    }
                    v40 = *(_QWORD *)(a1 + 8);
                    if (v40)
                    {
LABEL_84:
                      do
                        v45 = __ldaxr((unsigned int *)v40);
                      while (__stlxr(v45 + 1, (unsigned int *)v40));
                    }
                    v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                    *(_QWORD *)v46 = &off_1E33540D8;
                    *((_QWORD *)v46 + 1) = v39;
                    *((_QWORD *)v46 + 2) = v40;
                    v51[0] = v46;
                    (*(void (**)(_QWORD, WTF **, WTF::StringImpl **))(**(_QWORD **)(v38 + 16) + 832))(*(_QWORD *)(v38 + 16), &v52, v51);
                    v48 = v51[0];
                    v51[0] = 0;
                    if (v48)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v48 + 8))(v48);
                    v49 = v55;
                    v55 = 0;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, v47);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    result = v52;
                    if (v52)
                    {
                      v52 = 0;
                      LODWORD(__len) = 0;
                      result = (WTF *)WTF::fastFree(result, v47);
                    }
                    goto LABEL_46;
                  }
                  v29 = *a4;
                  v51[0] = 0;
                  v30 = 33;
                }
                WebCore::DeferredPromise::reject(v29, (JSC::JSGlobalObject *)v30, (JSC::JSGlobalObject *)v51, 0);
                result = v51[0];
                v51[0] = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF *)WTF::StringImpl::destroy(result, v31);
                  else
                    *(_DWORD *)result -= 2;
                }
LABEL_46:
                v12 = v50;
                goto LABEL_20;
              }
            }
            else
            {
              WebCore::currentToken(void)::token = 0;
            }
          }
          v26 = *a4;
          v51[0] = 0;
          WebCore::DeferredPromise::reject(v26, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)v51, 0);
          result = v51[0];
          v51[0] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF *)WTF::StringImpl::destroy(result, v27);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_20;
        }
      }
    }
  }
  v18 = 0;
LABEL_16:
  v19 = *a4;
  v51[0] = 0;
  WebCore::DeferredPromise::reject(v19, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v51, 0);
  result = v51[0];
  v51[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF *)WTF::StringImpl::destroy(result, v20);
      if ((v18 & 1) != 0)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v18 & 1) != 0)
    return result;
LABEL_20:
  v22 = (unsigned int *)(v12 + 1);
  do
  {
    v23 = __ldaxr(v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v22));
  if (!v24)
  {
    atomic_store(1u, v22);
    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = off_1E31FE290;
    *((_QWORD *)v28 + 1) = v22;
    v51[0] = v28;
    WTF::ensureOnMainThread();
    result = v51[0];
    v51[0] = 0;
    if (result)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::NavigatorContacts::~NavigatorContacts(WebCore::NavigatorContacts *this, void *a2)
{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  bmalloc::api *v12;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v12 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v12;
        }
      }
      v7 = *((_QWORD *)v3 + 1);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 0;
        v8 = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            v11 = v3;
            WTF::fastFree((WTF *)v8, a2);
            v3 = v11;
          }
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  bmalloc::api *v12;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v12 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v12;
        }
      }
      v7 = *((_QWORD *)v3 + 1);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 0;
        v8 = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            v11 = v3;
            WTF::fastFree((WTF *)v8, a2);
            v3 = v11;
          }
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::NavigatorContacts::contacts@<X0>(_QWORD *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = this[1];
  if (v3)
    goto LABEL_7;
  v4 = this;
  v5 = this[2];
  v3 = bmalloc::api::isoAllocate();
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 24), v5);
  v7 = *(unsigned int **)(v5 + 24);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v3 + 16) = v7;
  *(_BYTE *)(v3 + 24) = 0;
  this = (_QWORD *)v4[1];
  v4[1] = v3;
  if (!this)
    goto LABEL_7;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
LABEL_7:
    ++*(_DWORD *)v3;
    goto LABEL_8;
  }
  v9 = (unsigned int *)this[2];
  this[2] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v17 = this;
      WTF::fastFree((WTF *)v9, v6);
      this = v17;
    }
  }
  v12 = this[1];
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)this[1];
    this[1] = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        v16 = this;
        WTF::fastFree((WTF *)v13, v6);
        this = v16;
      }
    }
  }
  else
  {
    this[1] = 0;
  }
  this = (_QWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)this, v6);
  v3 = v4[1];
  if (v3)
    goto LABEL_7;
LABEL_8:
  *a2 = v3;
  return this;
}

uint64_t WebCore::DOMCache::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::DOMCache::deref(WebCore::DOMCache *this, WTF::StringImpl *a2)
{
  return WTF::RefCounted<WebCore::DOMCache>::deref((uint64_t)this + 24, a2);
}

uint64_t WebCore::DOMCacheStorage::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::DOMCacheStorage::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

void WebCore::DOMWindowCaches::~DOMWindowCaches(WebCore::DOMWindowCaches *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33534B0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33534B0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::WorkerGlobalScopeCaches::~WorkerGlobalScopeCaches(WebCore::WorkerGlobalScopeCaches *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E33534D0;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
}

void WebCore::WorkerGlobalScopeCaches::~WorkerGlobalScopeCaches(WebCore::WorkerGlobalScopeCaches *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33534D0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WTF::fastFree(this, a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::FormData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WebCore::FormData **a2)
{
  WebCore::FormData *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, a2);
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a2, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::hasResponseVaryStarHeaderValue(WebCore::FetchResponse const&)::{lambda(WTF::StringView)#1},void,WTF::StringView>::call(uint64_t result, char *a2, unint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  char *i;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v24;

  v3 = *(_BYTE **)(result + 8);
  if (*v3)
    return result;
  v4 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      v5 = 0;
      while (1)
      {
        v6 = a2[v5];
        v7 = v6 > 0x20;
        v8 = (1 << v6) & 0x100002600;
        if (v7 || v8 == 0)
          break;
        if (a3 == ++v5)
          return result;
      }
      if ((_DWORD)a3 != 1)
      {
        v10 = (a3 - 1);
        while (v10 < a3)
        {
          v11 = a2[v10];
          v7 = v11 > 0x20;
          v12 = (1 << v11) & 0x100002600;
          if (!v7 && v12 != 0)
          {
            if ((_DWORD)--v10)
              continue;
          }
          if (!(_DWORD)v5 && (_DWORD)v10 == (_DWORD)a3 - 1)
            goto LABEL_42;
          goto LABEL_22;
        }
        goto LABEL_57;
      }
      if ((_DWORD)v5)
      {
        LODWORD(v10) = 0;
LABEL_22:
        v14 = (v10 - v5 + 1);
        if ((unint64_t)a3 - v5 < v14)
          goto LABEL_57;
        a2 += v5;
        a3 = v14 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)a3)
  {
    v15 = 0;
    for (i = a2; ; i += 2)
    {
      v17 = *(unsigned __int16 *)i;
      v7 = v17 > 0x20;
      v18 = (1 << v17) & 0x100002600;
      if (v7 || v18 == 0)
        break;
      if (a3 == ++v15)
        return result;
    }
    if ((_DWORD)a3 != 1)
    {
      v20 = (a3 - 1);
      while (v20 < a3)
      {
        v21 = *(unsigned __int16 *)&a2[2 * v20];
        v7 = v21 > 0x20;
        v22 = (1 << v21) & 0x100002600;
        if (!v7 && v22 != 0)
        {
          if ((_DWORD)--v20)
            continue;
        }
        if ((_DWORD)v15 || (_DWORD)v20 != (_DWORD)a3 - 1)
          goto LABEL_56;
        goto LABEL_42;
      }
      goto LABEL_57;
    }
    if ((_DWORD)v15)
    {
      LODWORD(v20) = 0;
LABEL_56:
      a3 = (v20 - v15 + 1);
      a2 = i;
      if (v4 - v15 < a3)
      {
LABEL_57:
        __break(1u);
        return result;
      }
    }
  }
LABEL_42:
  if (a2 == "*" || a3 != 1)
  {
    if (a2 != "*" || a3 != 1)
      return result;
LABEL_50:
    *v3 = 1;
    return result;
  }
  if ((a3 & 0xFF00000000) != 0)
    v24 = *a2;
  else
    v24 = *(unsigned __int16 *)a2;
  if (v24 == 42)
    goto LABEL_50;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine6RecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 576 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine6RecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF *WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = (_DWORD *)*((_QWORD *)this + 16);
    *((_QWORD *)v2 + 16) = 0;
    if (v5)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5, a2);
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 12);
    *((_QWORD *)v2 + 12) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

WTF *WebCore::doSequentialMatch(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t *a5)
{
  unint64_t v6;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *result;
  uint64_t v24;
  WTF *v25;
  unint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;

  v6 = *(unsigned int *)(a2 + 12);
  if (v6 <= a1)
  {
    v24 = *a5;
    *a5 = 0;
    v25 = 0;
    v27 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, &v25);
    if (v27 != -1)
      ((void (*)(uint64_t *, WTF **))off_1E3353500[v27])(&v33, &v25);
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8 * a1);
    v25 = *(WTF **)a2;
    v11 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v26 = __PAIR64__(v6, v11);
    LOBYTE(v27) = 0;
    v28 = -1;
    v12 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v12])(&v33, &v27, a3);
      v28 = v12;
    }
    v29 = *(_WORD *)a4;
    v30 = a4[2];
    v13 = *a5;
    *a5 = 0;
    v31 = v13;
    v32 = a1;
    v14 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v14 = &off_1E3353608;
    *(_QWORD *)(v14 + 8) = v25;
    v15 = v26;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)(v14 + 16) = v15;
    *(_BYTE *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 32) = -1;
    v16 = v28;
    if (v28 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v28])(&v33, v14 + 24, &v27);
      *(_DWORD *)(v14 + 32) = v16;
    }
    *(_WORD *)(v14 + 40) = v29;
    *(_BYTE *)(v14 + 42) = v30;
    v17 = v31;
    v31 = 0;
    *(_QWORD *)(v14 + 48) = v17;
    *(_QWORD *)(v14 + 56) = v32;
    v33 = v14;
    WebCore::DOMCache::doMatch(v10, a3, a4, &v33);
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v19 = v31;
    v31 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v28 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v28])(&v34, &v27);
    v28 = -1;
    if (HIDWORD(v26))
    {
      v20 = v25;
      v21 = 8 * HIDWORD(v26);
      do
      {
        v22 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
          WTF::RefCounted<WebCore::DOMCache>::deref(v22 + 24, v18);
        v20 = (WTF *)((char *)v20 + 8);
        v21 -= 8;
      }
      while (v21);
    }
    result = v25;
    if (v25)
    {
      v25 = 0;
      LODWORD(v26) = 0;
      return (WTF *)WTF::fastFree(result, v18);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::doSequentialMatch(unsigned long,WTF::Vector<WTF::Ref<WebCore::DOMCache,WTF::RawPtrTraits<WebCore::DOMCache>,WTF::DefaultRefDerefTraits<WebCore::DOMCache>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::variant<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>>>)> &&)::$_0,void,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  char v11;

  *(_QWORD *)a1 = &off_1E3353608;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v4])(&v11, a1 + 24);
  *(_DWORD *)(a1 + 32) = -1;
  v5 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        WTF::RefCounted<WebCore::DOMCache>::deref(v8 + 24, a2);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v9 = *(WTF **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::doSequentialMatch(unsigned long,WTF::Vector<WTF::Ref<WebCore::DOMCache,WTF::RawPtrTraits<WebCore::DOMCache>,WTF::DefaultRefDerefTraits<WebCore::DOMCache>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::variant<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>>>)> &&)::$_0,void,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  char v11;

  *(_QWORD *)this = &off_1E3353608;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v4])(&v11, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 1);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        WTF::RefCounted<WebCore::DOMCache>::deref(v8 + 24, a2);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v9 = (WTF *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::doSequentialMatch(unsigned long,WTF::Vector<WTF::Ref<WebCore::DOMCache,WTF::RawPtrTraits<WebCore::DOMCache>,WTF::DefaultRefDerefTraits<WebCore::DOMCache>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::variant<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>>>)> &&)::$_0,void,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>>::call(uint64_t a1, char *a2)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  _QWORD v9[2];
  int v10;
  char v11;

  v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x1952E6C34);
    }
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    LOBYTE(v9[0]) = v3;
    v9[1] = v4;
    v10 = 1;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
      v8 = *(_QWORD *)(a1 + 56) + 1;
      *(_QWORD *)(a1 + 56) = v8;
      return WebCore::doSequentialMatch(v8, a1 + 8, a1 + 24, (char *)(a1 + 40), (uint64_t *)(a1 + 48));
    }
    *(_QWORD *)a2 = 0;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    v9[0] = v6;
    v10 = 0;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v9);
  if (v10 != -1)
    ((void (*)(char *, _QWORD *))off_1E3353500[v10])(&v11, v9);
  return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebCore::Supplement<WebCore::LocalDOMWindow>::~Supplement()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WTF::RefCounted<WebCore::DOMCache>::deref(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    if (!*(_BYTE *)(result + 40))
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(result + 32) + 72))(*(_QWORD *)(result + 32), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24));
    v3 = *(unsigned int **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
    v7 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 - 24), a2);
    return WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::DOMCache>(WebCore::DOMCache &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;

  *a1 = &off_1E3353690;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v7 + 24, a2);
      WTF::fastFree(v4, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    WTF::RefCounted<WebCore::DOMCache>::deref(v5 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::DOMCache>(WebCore::DOMCache &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E3353690;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v7 + 24, a2);
      WTF::fastFree(v4, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::RefCounted<WebCore::DOMCache>::deref(v5 + 24, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::DOMCache>(WebCore::DOMCache &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33536B8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33536B8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v15;
  _BYTE v16[16];
  int v17;
  uint64_t (***v18)();

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v15 = v3;
  v16[0] = 0;
  v17 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E33536D0[v4])(&v18, v16, a2);
    v17 = v4;
  }
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E33536F0;
  *(_QWORD *)(v5 + 8) = v15;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 32) = -1;
  v6 = v17;
  if (v17 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E33536D0[v17])(&v18, v5 + 16, v16);
    *(_DWORD *)(v5 + 32) = v6;
  }
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(v2 + 24);
  *(_QWORD *)(v7 + 8) = v2;
  ++*(_QWORD *)(v2 + 16);
  *(_DWORD *)(v2 + 24) = v8 + 2;
  v9 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E3353690;
  v9[1] = (uint64_t (**)())v2;
  v9[2] = (uint64_t (**)())v7;
  v9[3] = (uint64_t (**)())v5;
  v18 = v9;
  v10 = *(_QWORD *)(v2 + 8);
  if (!v10)
  {
    v18 = 0;
    v13 = &off_1E3353690;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v18 = 0;
    goto LABEL_10;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, 0, (uint64_t *)&v18);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
LABEL_10:
    v13 = *v9;
LABEL_11:
    v13[1]();
  }
  if (v17 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E3353500[v17])(&v18, v16);
  v17 = -1;
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E33536F0;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3353500[v2])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E33536F0;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3353500[v3])(&v6, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>> &&)::{lambda(void)#1},void>::call(_QWORD *result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;
  objc_class *v15;

  v1 = result;
  v2 = *((_DWORD *)result + 8);
  if (v2)
  {
    if (v2 != 1)
    {
      v12 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WebCore::DOMCache::doMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::CompletionHandler>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler>>>)> &&)::$_0,void,WebCore::CacheQueryOptions &&<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(v12);
    }
    v3 = result[1];
    v4 = *((_BYTE *)v1 + 16);
    v5 = (WTF::StringImpl *)v1[3];
    v1[3] = 0;
    v15 = 0;
    v13[0] = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v14 = v5;
    WebCore::DeferredPromise::reject(v3, v13, 0, &v15);
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        if (!v5)
          return result;
        goto LABEL_9;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_9:
    if (*(_DWORD *)v5 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v5, v6);
    *(_DWORD *)v5 -= 2;
    return result;
  }
  v8 = result[1];
  v7 = (_DWORD *)result[2];
  if (v7)
    return (_QWORD *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FetchResponse>>(result[1], v7);
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
    return (_QWORD *)MEMORY[0x19AEA32A0](v13);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::doMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::CompletionHandler>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler>>>)> &&)::$_0,void,WebCore::CacheQueryOptions &&<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3353718;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::doMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::CompletionHandler>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler>>>)> &&)::$_0,void,WebCore::CacheQueryOptions &&<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3353718;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DOMCache::doMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::CompletionHandler>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler>>>)> &&)::$_0,void,WebCore::CacheQueryOptions &&<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, char *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  uint64_t *v10;
  WebCore::ScriptExecutionContext *v11;
  uint64_t v12;
  double v13;
  uint64_t v14[2];
  int v15;
  char v16;

  v3 = *((_DWORD *)a2 + 4);
  if (v3)
  {
    if (v3 != 1)
    {
      v10 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::createResponse(v10, v11, v12, v13);
      return;
    }
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    LOBYTE(v14[0]) = v4;
    v14[1] = v5;
    v15 = 1;
  }
  else
  {
    if (*((_DWORD *)a2 + 3))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8);
      if (v7)
        v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
      else
        v8 = 0;
      WebCore::createResponse(v14, v8, *(_QWORD *)a2, *(double *)(a1 + 24));
      v9 = v14[0];
    }
    else
    {
      v9 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v14[0] = v9;
    v15 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, v14);
  if (v15 != -1)
    ((void (*)(char *, uint64_t *))off_1E3353500[v15])(&v16, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void WebCore::createResponse(uint64_t *a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, double a4)
{
  const void *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD **v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  char v32;
  _BYTE v33[112];
  WTF *v34;
  __int16 v35;
  CFTypeRef cf;
  char v37;
  _QWORD *v38;

  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v33, (const WebCore::ResourceResponseBase *)(a3 + 288));
  v8 = *(const void **)(a3 + 528);
  cf = v8;
  if (v8)
    CFRetain(v8);
  v37 = *(_BYTE *)(a3 + 536);
  v35 = v35 & 0xC3FF | 0x2000;
  v9 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)v9 = 1;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_DWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 112) = -1;
  *(_QWORD *)(v9 + 120) = -1;
  *(_QWORD *)(v9 + 128) = 0;
  *(double *)(v9 + 64) = a4;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  *(_QWORD *)(v9 + 72) = v11;
  v12 = v34;
  v34 = (WTF *)v9;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v22 = (_DWORD *)*((_QWORD *)v12 + 16);
      *((_QWORD *)v12 + 16) = 0;
      if (v22)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v22, v10);
      v23 = (WTF::StringImpl *)*((_QWORD *)v12 + 12);
      *((_QWORD *)v12 + 12) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v10);
        else
          *(_DWORD *)v23 -= 2;
      }
      WTF::fastFree(v12, v10);
    }
  }
  LOBYTE(v28) = 0;
  v32 = 0;
  WebCore::FetchResponse::create(a2, (uint64_t)&v28, *(_BYTE *)(a3 + 280), (uint64_t)v33, (uint64_t)a1);
  if (v32)
  {
    v16 = v31;
    v31 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        v21 = (_DWORD *)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        if (v21)
        {
          if (v21[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
          else
            --v21[4];
        }
        WTF::fastFree(v16, v15);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v30, v15);
    if ((_DWORD)v29 != -1)
      ((void (*)(uint64_t *, _QWORD ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v29])(&v26, &v28);
  }
  v17 = *(unsigned int *)(a3 + 552);
  if ((_DWORD)v17 == -1
    || (v18 = *a1,
        v28 = &v38,
        ((void (*)(uint64_t *__return_ptr, _QWORD ***, uint64_t))off_1E3353D30[v17])(&v26, &v28, a3 + 544),
        *(_QWORD *)(v18 + 832) = *(_QWORD *)(a3 + 560),
        v28 = (_QWORD **)v18,
        v29 = v18,
        v27 == -1))
  {
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>>(v24, v25);
  }
  else
  {
    v38 = &v28;
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13FetchResponse11setBodyDataEONS_7variantIJDnNS6_3RefINS8_8FormDataENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_12SharedBufferENSD_ISI_EENSF_ISI_EEEEEEEyE3__0JZNS9_11setBodyDataESN_yE3__1ZNS9_11setBodyDataESN_yE3__2EEEEEJRNS0_6__implIJDnSH_SL_EEEEEEDcOT_DpOT0____fmatrix[v27](&v38, &v26);
    if (v27 != -1)
      ((void (*)(_QWORD ***, uint64_t *))off_1E3353540[v27])(&v28, &v26);
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v33, v19);
  }
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  _DWORD **v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)v6[7];
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(_DWORD ***)a2;
        v12 = 8 * v10;
        do
        {
          v13 = (objc_class *)WebCore::wrap<WebCore::FetchResponse>((uint64_t)v6, v8, *v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::matchAll(std::optional<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3353740;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::matchAll(std::optional<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3353740;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::matchAll(std::optional<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v15;
  __int128 v16;
  _BYTE v17[16];
  int v18;
  uint64_t v19;
  uint64_t (***v20)();

  v3 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v15 = v3;
  v16 = v3;
  v17[0] = 0;
  v18 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E3353758[v4])(&v20, v17, a2);
    v18 = v4;
  }
  v19 = *(_QWORD *)(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v5 = &off_1E3353778;
  *(_OWORD *)(v5 + 8) = v16;
  *(_BYTE *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  v6 = v18;
  if (v18 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E3353758[v18])(&v20, v5 + 24, v17);
    *(_DWORD *)(v5 + 40) = v6;
  }
  *(_QWORD *)(v5 + 48) = v19;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(v15 + 24);
  *(_QWORD *)(v7 + 8) = v15;
  ++*(_QWORD *)(v15 + 16);
  *(_DWORD *)(v15 + 24) = v8 + 2;
  v9 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E3353690;
  v9[1] = (uint64_t (**)())v15;
  v9[2] = (uint64_t (**)())v7;
  v9[3] = (uint64_t (**)())v5;
  v20 = v9;
  v10 = *(_QWORD *)(v15 + 8);
  if (!v10)
  {
    v20 = 0;
    v13 = &off_1E3353690;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v20 = 0;
    goto LABEL_10;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, 0, (uint64_t *)&v20);
  v9 = v20;
  v20 = 0;
  if (v9)
  {
LABEL_10:
    v13 = *v9;
LABEL_11:
    v13[1]();
  }
  if (v18 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E3353580[v18])(&v20, v17);
  v18 = -1;
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine6RecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine6RecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache8matchAllEONSt3__18optionalINS4_7variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEEEONS2_17CacheQueryOptionsEONS2_18DOMPromiseDeferredINS2_11IDLSequenceINS2_12IDLInterfaceINS2_13FetchResponseEEEEEEEEN3__0clINS2_11ExceptionOrINS_6VectorINS2_14DOMCacheEngine6RecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E3353778;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3353580[v2])(&v5, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache8matchAllEONSt3__18optionalINS4_7variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEEEONS2_17CacheQueryOptionsEONS2_18DOMPromiseDeferredINS2_11IDLSequenceINS2_12IDLInterfaceINS2_13FetchResponseEEEEEEEEN3__0clINS2_11ExceptionOrINS_6VectorINS2_14DOMCacheEngine6RecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E3353778;
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3353580[v3])(&v6, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache8matchAllEONSt3__18optionalINS4_7variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEEEONS2_17CacheQueryOptionsEONS2_18DOMPromiseDeferredINS2_11IDLSequenceINS2_12IDLInterfaceINS2_13FetchResponseEEEEEEEEN3__0clINS2_11ExceptionOrINS_6VectorINS2_14DOMCacheEngine6RecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  int v2;
  char v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::ScriptExecutionContext *v20;
  void *v21;
  WTF *v22;
  _DWORD *v23;
  void *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  objc_class *v27;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *(_BYTE *)(a1 + 24);
      v4 = *(WTF::StringImpl **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      v5 = *(_QWORD *)(a1 + 16);
      v27 = 0;
      LOBYTE(v25) = v3;
      if (v4)
        *(_DWORD *)v4 += 2;
      v26 = v4;
      WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v25, 0, &v27);
      v7 = v26;
      v26 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v6);
          if (!v4)
            return;
          goto LABEL_9;
        }
        *(_DWORD *)v7 -= 2;
      }
      if (!v4)
        return;
LABEL_9:
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v6);
      else
        *(_DWORD *)v4 -= 2;
      return;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_35:
    __break(0xC471u);
    return;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(WTF::StringImpl **)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 36);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = *(double *)(a1 + 48);
  v25 = 0;
  v26 = 0;
  if (!(_DWORD)v10)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>>(*(_QWORD *)(a1 + 16), (uint64_t)&v25);
    if (!v9)
      return;
    goto LABEL_29;
  }
  if (v10 >> 29)
    goto LABEL_35;
  v12 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
  v13 = 0;
  v14 = 0;
  v15 = 0;
  LODWORD(v26) = v10;
  v25 = v12;
  v16 = 9 * v10;
  v17 = (WTF::StringImpl *)((char *)v9 + 576 * v10);
  v18 = v16 << 6;
  do
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
    if (v19)
      v20 = (WebCore::ScriptExecutionContext *)(v19 - 96);
    else
      v20 = 0;
    WebCore::createResponse((uint64_t *)&v27, v20, (uint64_t)v9 + v13, v11);
    *(_QWORD *)((char *)v12 + v15) = v27;
    v15 += 8;
    --v14;
    v13 += 576;
  }
  while (v18 != v13);
  HIDWORD(v26) = -v14;
  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchResponse>>>(*(_QWORD *)(a1 + 16), (uint64_t)&v25);
  if (v14)
  {
    v22 = v12;
    do
    {
      v23 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v23)
      {
        if (v23[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[6];
      }
      v22 = (WTF *)((char *)v22 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  WTF::fastFree(v12, v21);
  WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct(v9, v17);
  if (v9)
LABEL_29:
    WTF::fastFree(v9, v24);
}

void WebCore::FetchTasksHandler::~FetchTasksHandler(WebCore::FetchTasksHandler *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  char v11;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v9[0] = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v9[1] = v4;
    v10 = 0;
    *((_QWORD *)this + 4) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v10 != -1)
      ((void (*)(char *, _QWORD *))off_1E3353580[v10])(&v11, v9);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v6 = *((_DWORD *)this + 7);
  if (v6)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct(*((WTF::StringImpl **)this + 2), (WTF::StringImpl *)(*((_QWORD *)this + 2) + 576 * v6));
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    WTF::RefCounted<WebCore::DOMCache>::deref(v8 + 24, (WTF::StringImpl *)a2);
}

void WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v12 = v2;
    v13 = v3;
    v5 = a1;
    do
    {
      v6 = *((unsigned int *)v5 + 138);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E3353540[v6])(&v11, (char *)v5 + 544);
      *((_DWORD *)v5 + 138) = -1;
      v7 = (const void *)*((_QWORD *)v5 + 66);
      *((_QWORD *)v5 + 66) = 0;
      if (v7)
        CFRelease(v7);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WTF::StringImpl *)((char *)v5 + 288), a2);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 34);
      *((_QWORD *)v5 + 34) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 29);
      *((_QWORD *)v5 + 29) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      WebCore::ResourceRequest::~ResourceRequest((WTF::StringImpl *)((char *)v5 + 24), v8);
      v5 = (WTF::StringImpl *)((char *)v5 + 576);
    }
    while (v5 != a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33537A0;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33537A0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t (**v19)();
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned int v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *((_DWORD *)a2 + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3 != 1)
    {
      v20 = std::__throw_bad_variant_access[abi:sn180100]();
      WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(void)#1},void>::~CallableWrapper(v20);
      return;
    }
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = &off_1E33537C8;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    v9 = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v8 + 8) = v2;
    ++*(_QWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 24) = v9 + 2;
    v10 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v10 = &off_1E3353690;
    v10[1] = (uint64_t (**)())v2;
    v10[2] = (uint64_t (**)())v8;
    v10[3] = (uint64_t (**)())v7;
    v23 = (WTF::StringImpl *)v10;
    v11 = *(_QWORD *)(v2 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v13, 0, (uint64_t *)&v23);
        v10 = (uint64_t (***)())v23;
        v23 = 0;
        if (!v10)
          return;
      }
      else
      {
        v23 = 0;
      }
      v19 = *v10;
    }
    else
    {
      v23 = 0;
      v19 = &off_1E3353690;
    }
    v19[1]();
  }
  else
  {
    v14 = *(WTF::StringImpl **)a2;
    v23 = *(WTF::StringImpl **)a2;
    v15 = *((_DWORD *)a2 + 2);
    v16 = *((_DWORD *)a2 + 3);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v24 = v15;
    v25 = v16;
    v21 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v17 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v17 = &off_1E33537F0;
    *(_QWORD *)(v17 + 8) = v2;
    *(_OWORD *)(v17 + 16) = v21;
    v22 = v17;
    WebCore::DOMCache::batchPutOperation((unsigned int *)v2, (uint64_t)&v23, &v22);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v16)
      WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct(v14, (WTF::StringImpl *)((char *)v14 + 576 * v16));
    if (v14)
      WTF::fastFree(v14, v18);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E33537C8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33537C8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  unsigned __int8 v7[8];
  WTF::StringImpl *v8;
  objc_class *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = 0;
  v7[0] = v3;
  if (v4)
    *(_DWORD *)v4 += 2;
  v8 = v4;
  WebCore::DeferredPromise::reject(v2, v7, 0, &v9);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      if (!v4)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v4)
    return result;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v5);
  *(_DWORD *)v4 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(WebCore::DOMPromiseDeferred<void> &&<void> &&)#1},void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33537F0;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(WebCore::DOMPromiseDeferred<void> &&<void> &&)#1},void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33537F0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(WebCore::DOMPromiseDeferred<void> &&<void> &&)#1},void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::call(uint64_t a1, char *a2))()
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t (***result)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2[16];
  if (a2[16])
  {
    v6 = *a2;
    v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)0x28);
  v8 = v7;
  *(_QWORD *)v7 = &off_1E3353818;
  *(_QWORD *)(v7 + 8) = v4;
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  if (v5)
  {
    *(_BYTE *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v2;
    *(_BYTE *)(v7 + 32) = 1;
    v2 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  v10 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v9 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v10 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3353690;
  result[1] = (uint64_t (**)())v3;
  result[2] = (uint64_t (**)())v9;
  result[3] = (uint64_t (**)())v8;
  v17 = result;
  v12 = *(_QWORD *)(v3 + 8);
  if (!v12)
  {
    v17 = 0;
    v16 = &off_1E3353690;
LABEL_13:
    result = (uint64_t (***)())v16[1]();
    if (!v5)
      return result;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
  {
    v17 = 0;
    goto LABEL_12;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v14, 0, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_12:
    v16 = *result;
    goto LABEL_13;
  }
  if (!v5)
    return result;
LABEL_14:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (uint64_t (***)())WTF::StringImpl::destroy(v2, v15);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(WebCore::DOMPromiseDeferred<void> &&<void> &&)#1}::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)a1 = &off_1E3353818;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(WebCore::DOMPromiseDeferred<void> &&<void> &&)#1}::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3353818;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::{lambda(WebCore::DOMPromiseDeferred<void> &&<void> &&)#1}::operator()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)(a1 + 8), a1 + 16);
}

WTF::StringImpl *WebCore::DOMPromiseDeferred<void>::settle(WTF::StringImpl *result, uint64_t a2)
{
  unsigned __int8 v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  objc_class *v12;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(_BYTE *)a2;
    v3 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)result;
    v12 = 0;
    v10[0] = v2;
    if (v3)
      *(_DWORD *)v3 += 2;
    v11 = v3;
    WebCore::DeferredPromise::reject(v4, v10, 0, &v12);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v3)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v3)
      return result;
LABEL_8:
    if (*(_DWORD *)v3 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v5);
    *(_DWORD *)v3 -= 2;
    return result;
  }
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)(*(_QWORD *)result + 24);
  if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
  {
    v8 = *(_QWORD *)(v6 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
      v9 = 0;
    else
      v9 = *(uint64_t **)v8;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v6, v9, 0, (objc_class *)0xA);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::FetchTasksHandler *v3;
  _DWORD *v4;
  WTF *v6;
  void *v7;

  *a1 = &off_1E3353840;
  v3 = (WebCore::FetchTasksHandler *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FetchTasksHandler::~FetchTasksHandler(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::FetchTasksHandler *v3;
  _DWORD *v4;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3353840;
  v3 = (WebCore::FetchTasksHandler *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FetchTasksHandler::~FetchTasksHandler(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DOMCache::addAll(WTF::Vector<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  void *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  __int128 v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  const void *v102;
  int v103;
  int *v104;
  const void *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _DWORD *v114;
  void *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  _QWORD *v120;
  int v121;
  __int16 v122;
  char v123;
  char v124;
  WTF::StringImpl *v125[2];
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  __int128 v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  _DWORD v156[2];
  WTF::StringImpl *v157;
  __int128 v158;
  __int128 v159;
  WTF::StringImpl *v160;
  char v161;
  uint64_t v162;
  unsigned int v163;
  __int128 v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _BYTE v186[19];
  const void *v187;
  char v188;
  uint64_t v189;
  int v190;
  _QWORD v191[4];

  v191[3] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)(v7 + 32))
    return;
  v8 = *((_DWORD *)a2 + 4);
  if (!v8)
  {
    v3 = a1;
    v12 = *(_QWORD *)(a1 + 8);
    v2 = *a2;
    *a2 = 0;
    v13 = v2 + 288;
    if (*(_BYTE *)(v2 + 544))
      v14 = v2 + 288;
    else
      v14 = v2 + 552;
    WebCore::ResourceResponse::platformLazyInit(v14, 1);
    if ((*(__int16 *)(v14 + 136) - 200) >= 0x64)
    {
      v20 = *(_QWORD *)(v3 + 24);
      goto LABEL_35;
    }
    v15 = *(_QWORD *)(v2 + 152);
    v16 = *(unsigned int *)(v15 + 20);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = (WTF::StringImpl **)(*(_QWORD *)(v15 + 8) + 8);
      while (*((_WORD *)v18 - 4) != 87)
      {
        ++v17;
        v18 += 2;
        if (v16 == v17)
          goto LABEL_15;
      }
      if (v17 >= v16)
      {
        __break(0xC471u);
        return;
      }
      v19 = *v18;
      if (*v18)
        *(_DWORD *)v19 += 2;
    }
    else
    {
LABEL_15:
      v19 = 0;
    }
    v125[0] = v19;
    LOBYTE(v122) = 0;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E3353568;
    v21[1] = &v122;
    v120 = v21;
    MEMORY[0x19AEA70E0](v125, 44, &v120);
    v23 = (uint64_t)v120;
    v120 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v122;
    v25 = v125[0];
    v125[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v22);
        if (v24)
          goto LABEL_29;
        goto LABEL_31;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v24)
    {
LABEL_29:
      v20 = *(_QWORD *)(v3 + 24);
      goto LABEL_35;
    }
LABEL_31:
    if (!*(_BYTE *)(v2 + 544))
      v13 = v2 + 552;
    WebCore::ResourceResponse::platformLazyInit(v13, 1);
    if (*(_WORD *)(v13 + 136) != 206)
    {
      v122 = 0;
      v123 = 0;
      v29 = *(_QWORD *)(v3 + 24);
      v30 = *(unsigned int *)(v29 + 28);
      if (!(_DWORD)v30)
      {
LABEL_49:
        v35 = *(_QWORD *)(v3 + 16);
        v120 = 0;
        v121 = 0;
        WebCore::DOMCache::toConnectionRecord((uint64_t)v125, v12, v35, (WebCore::FetchResponse *)v2, (uint64_t)&v120);
        v37 = (uint64_t *)(v29 + 16);
        v38 = *(unsigned int *)(v29 + 28);
        if ((_DWORD)v38 == *(_DWORD *)(v29 + 24))
        {
          v39 = WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)v125);
          v40 = v39 + 560;
          v41 = *(_DWORD *)(v29 + 28);
          v42 = *(_QWORD *)(v29 + 16);
          v43 = v42 + 576 * v41;
          v44 = *(_OWORD *)v39;
          *(_BYTE *)(v43 + 16) = v39[16];
          *(_OWORD *)v43 = v44;
          WebCore::ResourceRequestBase::RequestData::RequestData(v43 + 24, (uint64_t *)v39 + 3);
          v45 = *((_QWORD *)v39 + 22);
          *((_QWORD *)v39 + 22) = 0;
          *(_QWORD *)(v43 + 176) = v45;
          v46 = *((_QWORD *)v39 + 23);
          *((_QWORD *)v39 + 23) = 0;
          *(_QWORD *)(v43 + 184) = v46;
          v47 = *((_QWORD *)v39 + 24);
          *((_QWORD *)v39 + 24) = 0;
          *(_QWORD *)(v43 + 192) = v47;
          v48 = *((_QWORD *)v39 + 25);
          *(_BYTE *)(v43 + 208) = v39[208];
          *(_QWORD *)(v43 + 200) = v48;
          v49 = *((_QWORD *)v39 + 27);
          *((_QWORD *)v39 + 27) = 0;
          *(_QWORD *)(v43 + 216) = v49;
          LODWORD(v49) = *((_DWORD *)v39 + 56);
          *(_DWORD *)(v43 + 227) = *(_DWORD *)(v39 + 227);
          *(_DWORD *)(v43 + 224) = v49;
          v50 = *((_QWORD *)v39 + 29);
          *((_QWORD *)v39 + 29) = 0;
          *(_QWORD *)(v43 + 232) = v50;
          v51 = *((_OWORD *)v39 + 16);
          *(_OWORD *)(v43 + 240) = *((_OWORD *)v39 + 15);
          *(_OWORD *)(v43 + 256) = v51;
          v52 = *((_QWORD *)v39 + 34);
          *((_QWORD *)v39 + 34) = 0;
          *(_QWORD *)(v43 + 272) = v52;
          *(_BYTE *)(v43 + 280) = v39[280];
          v53 = WebCore::ResourceResponseBase::ResourceResponseBase(v43 + 288, (uint64_t *)v39 + 36);
          v54 = *((_QWORD *)v39 + 66);
          *((_QWORD *)v39 + 66) = 0;
          *(_QWORD *)(v43 + 528) = v54;
          *(_BYTE *)(v43 + 536) = v39[536];
          *(_BYTE *)(v43 + 544) = 0;
          *(_DWORD *)(v43 + 552) = -1;
          v55 = *((unsigned int *)v39 + 138);
          if ((_DWORD)v55 != -1)
          {
            ((void (*)(char *, uint64_t, char *, __n128))off_1E33535B0[v55])(&v124, v43 + 544, v39 + 544, v53);
            *(_DWORD *)(v43 + 552) = v55;
          }
          v56 = v42 + 576 * v41;
        }
        else
        {
          v57 = *v37;
          v58 = *v37 + 576 * v38;
          v59 = *(_OWORD *)v125;
          *(_BYTE *)(v58 + 16) = v126;
          *(_OWORD *)v58 = v59;
          v60 = v127;
          v127 = 0;
          *(_QWORD *)(v58 + 24) = v60;
          v61 = *(_DWORD *)(v58 + 32) & 0xFFFFFFFE | v128 & 1;
          *(_DWORD *)(v58 + 32) = v61;
          v62 = v61 & 0xFFFFFFFD | (2 * ((v128 >> 1) & 1));
          *(_DWORD *)(v58 + 32) = v62;
          v63 = v62 & 0xFFFFFFFB | (4 * ((v128 >> 2) & 1));
          *(_DWORD *)(v58 + 32) = v63;
          v64 = v63 & 0xFFFFFFC7 | (8 * ((v128 >> 3) & 7));
          *(_DWORD *)(v58 + 32) = v64;
          *(_DWORD *)(v58 + 32) = v128 & 0xFFFFFFC0 | v64 & 0x3F;
          *(_OWORD *)(v58 + 36) = v129;
          *(_QWORD *)(v58 + 52) = v130;
          *(_DWORD *)(v58 + 60) = v131;
          v128 &= ~1u;
          v65 = v132;
          v132 = 0;
          *(_QWORD *)(v58 + 64) = v65;
          v66 = *(_DWORD *)(v58 + 72) & 0xFFFFFFFE | v133 & 1;
          *(_DWORD *)(v58 + 72) = v66;
          v67 = v66 & 0xFFFFFFFD | (2 * ((v133 >> 1) & 1));
          *(_DWORD *)(v58 + 72) = v67;
          v68 = v67 & 0xFFFFFFFB | (4 * ((v133 >> 2) & 1));
          *(_DWORD *)(v58 + 72) = v68;
          v69 = v68 & 0xFFFFFFC7 | (8 * ((v133 >> 3) & 7));
          *(_DWORD *)(v58 + 72) = v69;
          *(_DWORD *)(v58 + 72) = v133 & 0xFFFFFFC0 | v69 & 0x3F;
          *(_OWORD *)(v58 + 76) = v134;
          *(_QWORD *)(v58 + 92) = v135;
          *(_DWORD *)(v58 + 100) = v136;
          v133 &= ~1u;
          *(_QWORD *)(v58 + 104) = v137;
          v70 = v138;
          v138 = 0;
          *(_QWORD *)(v58 + 120) = 0;
          *(_QWORD *)(v58 + 128) = 0;
          *(_QWORD *)(v58 + 112) = v70;
          v71 = v139;
          v139 = 0;
          *(_QWORD *)(v58 + 120) = v71;
          LODWORD(v71) = v140;
          v140 = 0;
          *(_DWORD *)(v58 + 128) = v71;
          LODWORD(v71) = v141;
          v141 = 0;
          *(_DWORD *)(v58 + 132) = v71;
          *(_QWORD *)(v58 + 136) = 0;
          *(_QWORD *)(v58 + 144) = 0;
          v72 = v142;
          v142 = 0;
          *(_QWORD *)(v58 + 136) = v72;
          LODWORD(v72) = v143;
          v143 = 0;
          *(_DWORD *)(v58 + 144) = v72;
          LODWORD(v72) = v144;
          v144 = 0;
          *(_DWORD *)(v58 + 148) = v72;
          *(_QWORD *)(v58 + 152) = 0;
          *(_QWORD *)(v58 + 160) = 0;
          v73 = v145;
          v145 = 0;
          *(_QWORD *)(v58 + 152) = v73;
          LODWORD(v73) = v146;
          v146 = 0;
          *(_DWORD *)(v58 + 160) = v73;
          LODWORD(v73) = v147;
          v147 = 0;
          *(_DWORD *)(v58 + 164) = v73;
          LODWORD(v73) = v148;
          *(_BYTE *)(v58 + 172) = v149;
          *(_DWORD *)(v58 + 168) = v73;
          v74 = v150;
          v150 = 0;
          *(_QWORD *)(v58 + 176) = v74;
          v75 = v151;
          v151 = 0;
          *(_QWORD *)(v58 + 184) = v75;
          v76 = v152;
          v152 = 0;
          *(_QWORD *)(v58 + 192) = v76;
          v77 = v153;
          *(_BYTE *)(v58 + 208) = v154;
          *(_QWORD *)(v58 + 200) = v77;
          v78 = v155;
          v155 = 0;
          *(_QWORD *)(v58 + 216) = v78;
          LODWORD(v78) = v156[0];
          *(_DWORD *)(v58 + 227) = *(_DWORD *)((char *)v156 + 3);
          *(_DWORD *)(v58 + 224) = v78;
          v79 = v157;
          v157 = 0;
          *(_QWORD *)(v58 + 232) = v79;
          v80 = v159;
          *(_OWORD *)(v58 + 240) = v158;
          *(_OWORD *)(v58 + 256) = v80;
          v81 = v160;
          v160 = 0;
          *(_QWORD *)(v58 + 272) = v81;
          *(_BYTE *)(v58 + 280) = v161;
          v82 = v58 + 288;
          v83 = v162;
          v162 = 0;
          *(_QWORD *)(v58 + 288) = v83;
          v84 = *(_DWORD *)(v58 + 296) & 0xFFFFFFFE | v163 & 1;
          *(_DWORD *)(v58 + 296) = v84;
          v85 = v84 & 0xFFFFFFFD | (2 * ((v163 >> 1) & 1));
          *(_DWORD *)(v58 + 296) = v85;
          v86 = v85 & 0xFFFFFFFB | (4 * ((v163 >> 2) & 1));
          *(_DWORD *)(v58 + 296) = v86;
          v87 = v86 & 0xFFFFFFC7 | (8 * ((v163 >> 3) & 7));
          *(_DWORD *)(v58 + 296) = v87;
          *(_DWORD *)(v58 + 296) = v163 & 0xFFFFFFC0 | v87 & 0x3F;
          *(_OWORD *)(v58 + 300) = v164;
          *(_QWORD *)(v58 + 316) = v165;
          *(_DWORD *)(v58 + 324) = v166;
          v163 &= ~1u;
          v88 = v167;
          v167 = 0;
          *(_QWORD *)(v58 + 328) = v88;
          *(_QWORD *)(v58 + 336) = v168;
          v89 = v169;
          v169 = 0;
          *(_QWORD *)(v58 + 344) = v89;
          v90 = v170;
          v170 = 0;
          *(_QWORD *)(v58 + 352) = v90;
          v91 = v171;
          v171 = 0;
          *(_QWORD *)(v58 + 368) = 0;
          *(_QWORD *)(v58 + 376) = 0;
          *(_QWORD *)(v58 + 360) = v91;
          v92 = v172;
          v172 = 0;
          *(_QWORD *)(v58 + 368) = v92;
          LODWORD(v92) = v173;
          v173 = 0;
          *(_DWORD *)(v58 + 376) = v92;
          LODWORD(v92) = v174;
          v174 = 0;
          *(_DWORD *)(v58 + 380) = v92;
          *(_QWORD *)(v58 + 384) = 0;
          *(_QWORD *)(v58 + 392) = 0;
          v93 = v175;
          v175 = 0;
          *(_QWORD *)(v58 + 384) = v93;
          LODWORD(v93) = v176;
          v176 = 0;
          *(_DWORD *)(v58 + 392) = v93;
          LODWORD(v93) = v177;
          v177 = 0;
          *(_DWORD *)(v58 + 396) = v93;
          v94 = v178;
          v178 = 0;
          *(_QWORD *)(v58 + 400) = v94;
          *(_BYTE *)(v58 + 408) = 0;
          *(_BYTE *)(v58 + 416) = 0;
          if (v180)
          {
            v95 = v179;
            v179 = 0;
            *(_QWORD *)(v82 + 120) = v95;
            *(_BYTE *)(v82 + 128) = 1;
          }
          v40 = v191;
          v96 = v181;
          v97 = v182;
          *(_OWORD *)(v82 + 168) = v183;
          *(_OWORD *)(v82 + 152) = v97;
          *(_OWORD *)(v82 + 136) = v96;
          v98 = v184;
          v99 = v185;
          v100 = *(_OWORD *)v186;
          *(_DWORD *)(v82 + 231) = *(_DWORD *)&v186[15];
          *(_OWORD *)(v82 + 216) = v100;
          *(_OWORD *)(v82 + 200) = v99;
          *(_OWORD *)(v82 + 184) = v98;
          v101 = v57 + 576 * v38;
          v102 = v187;
          v187 = 0;
          *(_QWORD *)(v101 + 528) = v102;
          *(_BYTE *)(v101 + 536) = v188;
          *(_BYTE *)(v101 + 544) = 0;
          *(_DWORD *)(v101 + 552) = -1;
          v103 = v190;
          if (v190 != -1)
          {
            v104 = (int *)(v101 + 552);
            ((void (*)(char *, uint64_t, uint64_t *))off_1E33535B0[v190])(&v124, v101 + 544, &v189);
            *v104 = v103;
          }
          v56 = v57 + 576 * v38;
        }
        *(_QWORD *)(v56 + 560) = *v40;
        v6 = (*(_DWORD *)(v29 + 28) + 1);
        *(_DWORD *)(v29 + 28) = v6;
        v5 = off_1E3353540;
        if (v190 != -1)
          ((void (*)(char *, uint64_t *))off_1E3353540[v190])(&v124, &v189);
        v190 = -1;
        v4 = (WebCore::ResourceResponseBase *)&v162;
        v105 = v187;
        v187 = 0;
        if (!v105)
          goto LABEL_62;
        goto LABEL_96;
      }
      v31 = *(_QWORD *)(v29 + 16) + 288;
      v32 = 576 * v30;
      while (1)
      {
        WebCore::FetchRequest::resourceRequest(*(WebCore::FetchRequest **)(v3 + 16), (uint64_t)v125);
        v33 = WebCore::DOMCacheEngine::queryCacheMatch((WebCore::ResourceRequest *)v125, (WebCore::ResourceRequest *)(v31 - 264), v31, &v122);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v125, v34);
        if (v33)
          break;
        v31 += 576;
        v32 -= 576;
        if (!v32)
        {
          v29 = *(_QWORD *)(v3 + 24);
          goto LABEL_49;
        }
      }
      v116 = *(_QWORD *)(v3 + 24);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v118 = v125[0];
      v119 = *(_QWORD *)(v116 + 32);
      *(_QWORD *)(v116 + 32) = 0;
      if (v119)
      {
        LOBYTE(v125[0]) = 8;
        v125[1] = v118;
        LODWORD(v126) = 1;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v119 + 16))(v119, v125);
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
        if ((_DWORD)v126 != -1)
        {
          ((void (*)(_QWORD **, WTF::StringImpl **))off_1E3353580[v126])(&v120, v125);
          if (!v2)
            return;
          goto LABEL_41;
        }
      }
      else if (v118)
      {
        if (*(_DWORD *)v118 == 2)
        {
          WTF::StringImpl::destroy(v118, v117);
          if (!v2)
            return;
          goto LABEL_41;
        }
        *(_DWORD *)v118 -= 2;
      }
      if (!v2)
        return;
      goto LABEL_41;
    }
    v20 = *(_QWORD *)(v3 + 24);
LABEL_35:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = v125[0];
    v28 = *(_QWORD *)(v20 + 32);
    *(_QWORD *)(v20 + 32) = 0;
    if (v28)
    {
      LOBYTE(v125[0]) = 33;
      v125[1] = v27;
      LODWORD(v126) = 1;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, v125);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      if ((_DWORD)v126 != -1)
        ((void (*)(_QWORD **, WTF::StringImpl **))off_1E3353580[v126])(&v120, v125);
    }
    else if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
LABEL_41:
    if (*(_DWORD *)(v2 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      --*(_DWORD *)(v2 + 24);
    return;
  }
  if (v8 == 1)
  {
    v9 = *(_BYTE *)a2;
    v10 = (WTF::StringImpl *)a2[1];
    a2[1] = 0;
    v11 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 32) = 0;
    if (v11)
    {
      LOBYTE(v125[0]) = v9;
      v125[1] = v10;
      LODWORD(v126) = 1;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, v125);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if ((_DWORD)v126 != -1)
        ((void (*)(_QWORD **, WTF::StringImpl **))off_1E3353580[v126])(&v120, v125);
    }
    else if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    return;
  }
  v105 = (const void *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_96:
  CFRelease(v105);
LABEL_62:
  WebCore::ResourceResponseBase::~ResourceResponseBase(v4, v36);
  v107 = v160;
  v160 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, v106);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = v157;
  v157 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v106);
    else
      *(_DWORD *)v108 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v127, v106);
  if (v121 != -1)
    ((void (*)(char *, _QWORD **))v5[v121])(&v124, &v120);
  v109 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  v125[1] = (WTF::StringImpl *)(v6 - 1);
  v110 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v110 = off_1E3353868;
  v110[1] = v109;
  v110[2] = v6 - 1;
  v110[3] = 0;
  v125[0] = 0;
  v126 = 0;
  v127 = 0;
  v110[4] = v2;
  v120 = v110;
  *(_BYTE *)(v2 + 136) = 1;
  if (*(_BYTE *)(v2 + 128) && (v111 = *(_QWORD *)(v2 + 120)) != 0)
  {
    v112 = v110;
    v113 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v113 + 8) = 1;
    *(_QWORD *)v113 = off_1E3367688;
    *(_QWORD *)(v113 + 16) = v112;
    v114 = *(_DWORD **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = v113;
    if (v114)
    {
      if (v114[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v114 + 8))(v114);
        v113 = *(_QWORD *)(v2 + 80);
      }
      else
      {
        --v114[2];
      }
    }
    WebCore::InternalReadableStream::pipeTo(*(_QWORD *)(v111 + 8), (WTF::StringImpl *)v113);
  }
  else
  {
    WebCore::FetchResponse::Loader::consumeDataByChunk(*(_QWORD *)(v2 + 808), (uint64_t *)&v120);
    if (v120)
      (*(void (**)(_QWORD *))(*v120 + 8))(v120);
  }
  _ZZZN7WebCore8DOMCache6addAllEON3WTF6VectorINSt3__17variantIJNS1_6RefPtrINS_12FetchRequestENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEENS1_6StringEEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS_18DOMPromiseDeferredIvEEEN3__1clINS_11ExceptionOrINS1_3RefINS_13FetchResponseENS7_ISP_EENS9_ISP_EEEEEEEEDaOT_ENUlSW_E_D1Ev((uint64_t)v125, v115);
}

uint64_t _ZZZN7WebCore8DOMCache6addAllEON3WTF6VectorINSt3__17variantIJNS1_6RefPtrINS_12FetchRequestENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEENS1_6StringEEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS_18DOMPromiseDeferredIvEEEN3__1clINS_11ExceptionOrINS1_3RefINS_13FetchResponseENS7_ISP_EENS9_ISP_EEEEEEEEDaOT_ENUlSW_E_D1Ev(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::FetchTasksHandler *v7;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v3 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v4 + 8);
        v13 = v12 + 16 * v11;
        do
        {
          v14 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v20 = v13;
              v21 = v12;
              v22 = (WTF *)v14;
              v23 = v4;
              atomic_store(1u, v14);
              v17 = v14[6];
              if ((_DWORD)v17 != -1)
                ((void (*)(char *, unsigned int *))off_1E3353660[v17])(&v25, v14 + 2);
              *((_DWORD *)v22 + 6) = -1;
              WTF::fastFree(v22, a2);
              v4 = v23;
              v13 = v20;
              v12 = v21;
            }
          }
          v12 += 16;
        }
        while (v12 != v13);
      }
      v18 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v18 && v18 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v24 = v4;
        WTF::fastFree(v18, a2);
        v4 = v24;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(WebCore::FetchTasksHandler **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::FetchTasksHandler::~FetchTasksHandler(v7, a2);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return a1;
}

char *WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (unint64_t)v5 + 576 * *(unsigned int *)(a1 + 12), v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x71C71D)
      {
        __break(0xC471u);
        JUMPOUT(0x1952E9B20);
      }
      v17 = (uint64_t)v5 + 576 * *(unsigned int *)(a1 + 12);
      v18 = 576 * v16;
      v19 = WTF::fastMalloc((WTF *)(576 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFC0) / 0x240;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::DOMCacheEngine::Record>::move((uint64_t)v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x71C71D)
      {
        __break(0xC471u);
        JUMPOUT(0x1952E9B28);
      }
      v10 = 576 * v9;
      v11 = WTF::fastMalloc((WTF *)(576 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFC0) / 0x240;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::DOMCacheEngine::Record>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 64 * ((uint64_t)(v3 - (_QWORD)v5) >> 6);
  }
  return (char *)v3;
}

void WTF::VectorMover<false,WebCore::DOMCacheEngine::Record>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    v31 = v3;
    v32 = v4;
    v8 = 0;
    do
    {
      v9 = a1 + v8;
      v10 = a3 + v8;
      v11 = *(_OWORD *)(a1 + v8);
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(a1 + v8 + 16);
      *(_OWORD *)v10 = v11;
      WebCore::ResourceRequestBase::RequestData::RequestData(a3 + v8 + 24, (uint64_t *)(a1 + v8 + 24));
      v12 = *(_QWORD *)(a1 + v8 + 176);
      *(_QWORD *)(v9 + 176) = 0;
      *(_QWORD *)(v10 + 176) = v12;
      v13 = *(_QWORD *)(a1 + v8 + 184);
      *(_QWORD *)(v9 + 184) = 0;
      *(_QWORD *)(v10 + 184) = v13;
      v14 = *(_QWORD *)(a1 + v8 + 192);
      *(_QWORD *)(v9 + 192) = 0;
      *(_QWORD *)(v10 + 192) = v14;
      v15 = *(_QWORD *)(a1 + v8 + 200);
      *(_BYTE *)(v10 + 208) = *(_BYTE *)(a1 + v8 + 208);
      *(_QWORD *)(v10 + 200) = v15;
      v16 = *(_QWORD *)(a1 + v8 + 216);
      *(_QWORD *)(v9 + 216) = 0;
      *(_QWORD *)(v10 + 216) = v16;
      LODWORD(v16) = *(_DWORD *)(a1 + v8 + 224);
      *(_DWORD *)(v10 + 227) = *(_DWORD *)(a1 + v8 + 227);
      *(_DWORD *)(v10 + 224) = v16;
      v17 = *(_QWORD *)(a1 + v8 + 232);
      *(_QWORD *)(v9 + 232) = 0;
      *(_QWORD *)(v10 + 232) = v17;
      v18 = *(_OWORD *)(a1 + v8 + 256);
      *(_OWORD *)(v10 + 240) = *(_OWORD *)(a1 + v8 + 240);
      *(_OWORD *)(v10 + 256) = v18;
      v19 = *(_QWORD *)(a1 + v8 + 272);
      *(_QWORD *)(v9 + 272) = 0;
      *(_QWORD *)(v10 + 272) = v19;
      *(_BYTE *)(v10 + 280) = *(_BYTE *)(a1 + v8 + 280);
      v21 = WebCore::ResourceResponseBase::ResourceResponseBase(a3 + v8 + 288, (uint64_t *)(a1 + v8 + 288));
      v22 = *(_QWORD *)(a1 + v8 + 528);
      *(_QWORD *)(v9 + 528) = 0;
      *(_QWORD *)(v10 + 528) = v22;
      *(_BYTE *)(v10 + 536) = *(_BYTE *)(a1 + v8 + 536);
      *(_BYTE *)(v10 + 544) = 0;
      *(_DWORD *)(v10 + 552) = -1;
      v23 = *(unsigned int *)(a1 + v8 + 552);
      if ((_DWORD)v23 == -1)
      {
        *(_QWORD *)(v10 + 560) = *(_QWORD *)(v9 + 560);
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t, __n128))off_1E33535B0[v23])(&v29, v10 + 544, v9 + 544, v21);
        *(_DWORD *)(v10 + 552) = v23;
        v24 = *(unsigned int *)(v9 + 552);
        *(_QWORD *)(v10 + 560) = *(_QWORD *)(v9 + 560);
        if ((_DWORD)v24 != -1)
          ((void (*)(char *, uint64_t))off_1E3353540[v24])(&v30, v9 + 544);
      }
      *(_DWORD *)(v9 + 552) = -1;
      v25 = *(const void **)(v9 + 528);
      *(_QWORD *)(v9 + 528) = 0;
      if (v25)
        CFRelease(v25);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v9 + 288), v20);
      v27 = *(WTF::StringImpl **)(v9 + 272);
      *(_QWORD *)(v9 + 272) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = *(WTF::StringImpl **)(v9 + 232);
      *(_QWORD *)(v9 + 232) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v26);
        else
          *(_DWORD *)v28 -= 2;
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + v8 + 24), v26);
      v8 += 576;
    }
    while (a1 + v8 != a2);
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache6addAllEONS_6VectorINSt3__17variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS2_18DOMPromiseDeferredIvEEEN3__1clINS2_11ExceptionOrINS_3RefINS2_13FetchResponseENS9_ISR_EENSB_ISR_EEEEEEEEDaOT_EUlSY_E_vJONSP_IPNS5_4spanIKhLm18446744073709551615EEEEEEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353868;
  _ZZZN7WebCore8DOMCache6addAllEON3WTF6VectorINSt3__17variantIJNS1_6RefPtrINS_12FetchRequestENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEENS1_6StringEEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS_18DOMPromiseDeferredIvEEEN3__1clINS_11ExceptionOrINS1_3RefINS_13FetchResponseENS7_ISP_EENS9_ISP_EEEEEEEEDaOT_ENUlSW_E_D1Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache6addAllEONS_6VectorINSt3__17variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS2_18DOMPromiseDeferredIvEEEN3__1clINS2_11ExceptionOrINS_3RefINS2_13FetchResponseENS9_ISR_EENSB_ISR_EEEEEEEEDaOT_EUlSY_E_vJONSP_IPNS5_4spanIKhLm18446744073709551615EEEEEEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353868;
  _ZZZN7WebCore8DOMCache6addAllEON3WTF6VectorINSt3__17variantIJNS1_6RefPtrINS_12FetchRequestENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEENS1_6StringEEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS_18DOMPromiseDeferredIvEEEN3__1clINS_11ExceptionOrINS1_3RefINS_13FetchResponseENS7_ISP_EENS9_ISP_EEEEEEEEDaOT_ENUlSW_E_D1Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache6addAllEONS_6VectorINSt3__17variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS2_18DOMPromiseDeferredIvEEEN3__1clINS2_11ExceptionOrINS_3RefINS2_13FetchResponseENS9_ISR_EENSB_ISR_EEEEEEEEDaOT_EUlSY_E_vJONSP_IPNS5_4spanIKhLm18446744073709551615EEEEEEE4callES15_(uint64_t *result, char *a2)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  WTF **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;

  v2 = result[1];
  if (!*(_QWORD *)(v2 + 32))
    return result;
  v3 = *((_DWORD *)a2 + 4);
  if (!v3)
  {
    v6 = result;
    v7 = *(WTF ***)a2;
    if (*(_QWORD *)a2)
    {
      WebCore::SharedBufferBuilder::ensureBuffer(result + 3);
      return (uint64_t *)WebCore::FragmentedSharedBuffer::append(v6[3], *v7, v7[1]);
    }
    v8 = result[3];
    v9 = v6[4];
    v10 = v6[2];
    if (v8)
    {
      v6[3] = 0;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = v8 + 24;
      *(_QWORD *)(v8 + 16) = 1;
      *(_BYTE *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
    }
    v20 = v8;
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v8, &v19);
    result = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v20, v11);
    v12 = v19;
    v19 = 0;
    v20 = v12;
    LODWORD(v21) = 2;
    if (v10 >= *(unsigned int *)(v2 + 28))
      goto LABEL_27;
    v13 = *(_QWORD *)(v2 + 16);
    v14 = WebCore::CacheStorageConnection::computeRecordBodySize(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 56), v9, (uint64_t)&v20);
    v16 = v13 + 576 * v10;
    *(_QWORD *)(v16 + 560) = v14;
    v17 = v16 + 544;
    v18 = *(unsigned int *)(v16 + 552);
    if ((_DWORD)v18 == -1)
    {
      if ((_DWORD)v21 == -1)
      {
LABEL_22:
        LODWORD(v21) = -1;
        return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v19, v15);
      }
    }
    else if ((_DWORD)v21 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_1E3353540[v18])(&v23, v17);
      *(_DWORD *)(v17 + 8) = -1;
      goto LABEL_20;
    }
    v23 = v16 + 544;
    ((void (*)(uint64_t *, uint64_t, uint64_t *))off_1E3353880[v21])(&v23, v17, &v20);
LABEL_20:
    if ((_DWORD)v21 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E3353540[v21])(&v23, &v20);
    goto LABEL_22;
  }
  if (v3 != 1)
  {
    result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    __break(0xC471u);
    return result;
  }
  v4 = *a2;
  result = (uint64_t *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v5)
  {
    LOBYTE(v20) = v4;
    v21 = result;
    v22 = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v20);
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v22 != -1)
      return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E3353580[v22])(&v23, &v20);
  }
  else if (result)
  {
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3353540[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

WebCore::FormData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(WebCore::FormData *result, WebCore::FormData **a2, WebCore::FormData **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::FormData *v6;
  WebCore::FormData *v7;
  bmalloc::api *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WebCore::FormData *)((uint64_t (*)(char *, uint64_t))off_1E3353540[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, a2);
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;
      v9 = v7;
      return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, a2);
    }
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E3353540[v5])(&v10, v4);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v8;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E33538A8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33538A8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  unsigned __int8 v7[8];
  WTF::StringImpl *v8;
  objc_class *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = 0;
  v7[0] = v3;
  if (v4)
    *(_DWORD *)v4 += 2;
  v8 = v4;
  WebCore::DeferredPromise::reject(v2, v7, 0, &v9);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      if (!v4)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v4)
    return result;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v5);
  *(_DWORD *)v4 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_1,void,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>><void> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33538D0;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_1,void,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>><void> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33538D0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_1,void,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>><void> &&>::call(uint64_t a1, char *a2))()
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t (***result)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2[16];
  if (a2[16])
  {
    v6 = *a2;
    v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)0x28);
  v8 = v7;
  *(_QWORD *)v7 = &off_1E33538F8;
  *(_QWORD *)(v7 + 8) = v4;
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  if (v5)
  {
    *(_BYTE *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v2;
    *(_BYTE *)(v7 + 32) = 1;
    v2 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  v10 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v9 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v10 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3353690;
  result[1] = (uint64_t (**)())v3;
  result[2] = (uint64_t (**)())v9;
  result[3] = (uint64_t (**)())v8;
  v17 = result;
  v12 = *(_QWORD *)(v3 + 8);
  if (!v12)
  {
    v17 = 0;
    v16 = &off_1E3353690;
LABEL_13:
    result = (uint64_t (***)())v16[1]();
    if (!v5)
      return result;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
  {
    v17 = 0;
    goto LABEL_12;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v14, 0, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_12:
    v16 = *result;
    goto LABEL_13;
  }
  if (!v5)
    return result;
LABEL_14:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (uint64_t (***)())WTF::StringImpl::destroy(v2, v15);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_1::operator()(WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>><void> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)a1 = &off_1E33538F8;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_1::operator()(WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>><void> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33538F8;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::putWithResponseData(WebCore::DOMPromiseDeferred<void> &&,WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&,WebCore::ExceptionOr<WTF::RefPtr<WebCore::SharedBuffer,WebCore::FetchRequest<WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>,WTF::RawPtrTraits<WTF::Ref><WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&>>> &&)::$_1::operator()(WebCore::DOMPromiseDeferred<void> &&<WebCore::FetchResponse,WebCore::FetchRequest<WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FetchRequest,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>><void> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)(a1 + 8), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3353920;
  WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353920;
  WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  WebCore::FetchResponse **v6;
  uint64_t *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF **v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20[2];
  int v21;
  char v22;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = (WebCore::FetchResponse **)(a1 + 24);
      v7 = (uint64_t *)(a1 + 16);
      LOBYTE(v18) = *(_BYTE *)a2;
      v8 = v18;
      v9 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v19 = v9;
      WTF::String::isolatedCopy();
      LOBYTE(v20[0]) = v8;
      v21 = 1;
      WebCore::DOMCache::putWithResponseData(v4, v3, v7, v6, (char *)v20);
      if (v21 != -1)
        ((void (*)(char *, uint64_t *))off_1E3353938[v21])(&v22, v20);
      v21 = -1;
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v17);
    }
  }
  else
  {
    v12 = *(WTF ***)a2;
    if (*(_QWORD *)a2)
    {
      WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(a1 + 32));
      return (WTF::StringImpl *)WebCore::FragmentedSharedBuffer::append(*(_QWORD *)(a1 + 32), *v12, v12[1]);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 32);
      if (v13)
      {
        *(_QWORD *)(a1 + 32) = 0;
      }
      else
      {
        v13 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v13 = 1;
        *(_QWORD *)(v13 + 8) = v13 + 24;
        *(_QWORD *)(v13 + 16) = 1;
        *(_BYTE *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
      }
      v20[0] = v13;
      WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v13, &v18);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v20, v14);
      v15 = v18;
      v18 = 0;
      v20[0] = v15;
      v21 = 0;
      WebCore::DOMCache::putWithResponseData(v4, v3, (uint64_t *)(a1 + 16), (WebCore::FetchResponse **)(a1 + 24), (char *)v20);
      if (v21 != -1)
        ((void (*)(char *, uint64_t *))off_1E3353938[v21])(&v22, v20);
      v21 = -1;
      return (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v18, v16);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)result));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)result);
      v5 = *(unsigned int *)(result + 20);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(result + 8);
        v7 = v6 + 16 * v5;
        do
        {
          v8 = *(unsigned int **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              v14 = v7;
              v15 = v6;
              v17 = result;
              atomic_store(1u, v8);
              v16 = (WTF *)v8;
              v11 = v8[6];
              if ((_DWORD)v11 != -1)
                ((void (*)(char *, unsigned int *))off_1E3353660[v11])(&v19, v8 + 2);
              *((_DWORD *)v16 + 6) = -1;
              WTF::fastFree(v16, a2);
              result = v17;
              v7 = v14;
              v6 = v15;
            }
          }
          v6 += 16;
        }
        while (v6 != v7);
      }
      v12 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v12 && v12 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v18 = result;
        WTF::fastFree(v12, a2);
        result = v18;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3353958;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3353958;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1,void,WebCore::ExceptionOr<void> &&>::call(uint64_t a1, char *a2))()
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t (***result)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2[16];
  if (a2[16])
  {
    v6 = *a2;
    v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)0x28);
  v8 = v7;
  *(_QWORD *)v7 = &off_1E3353980;
  *(_QWORD *)(v7 + 8) = v4;
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  if (v5)
  {
    *(_BYTE *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v2;
    *(_BYTE *)(v7 + 32) = 1;
    v2 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  v10 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v9 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v10 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3353690;
  result[1] = (uint64_t (**)())v3;
  result[2] = (uint64_t (**)())v9;
  result[3] = (uint64_t (**)())v8;
  v17 = result;
  v12 = *(_QWORD *)(v3 + 8);
  if (!v12)
  {
    v17 = 0;
    v16 = &off_1E3353690;
LABEL_13:
    result = (uint64_t (***)())v16[1]();
    if (!v5)
      return result;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
  {
    v17 = 0;
    goto LABEL_12;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v14, 0, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_12:
    v16 = *result;
    goto LABEL_13;
  }
  if (!v5)
    return result;
LABEL_14:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (uint64_t (***)())WTF::StringImpl::destroy(v2, v15);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1::operator()(WebCore::ExceptionOr<void> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)a1 = &off_1E3353980;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1::operator()(WebCore::ExceptionOr<void> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3353980;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::put(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::DOMPromiseDeferred<void> &&)::$_1::operator()(WebCore::ExceptionOr<void> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)(a1 + 8), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::remove(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33539A8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::remove(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33539A8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DOMCache>::deref(v4 + 24, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::remove(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v15;
  _BYTE v16[16];
  int v17;
  uint64_t (***v18)();

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v15 = v3;
  v16[0] = 0;
  v17 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E33539C0[v4])(&v18, v16, a2);
    v17 = v4;
  }
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E33539E0;
  *(_QWORD *)(v5 + 8) = v15;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 32) = -1;
  v6 = v17;
  if (v17 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E33539C0[v17])(&v18, v5 + 16, v16);
    *(_DWORD *)(v5 + 32) = v6;
  }
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(v2 + 24);
  *(_QWORD *)(v7 + 8) = v2;
  ++*(_QWORD *)(v2 + 16);
  *(_DWORD *)(v2 + 24) = v8 + 2;
  v9 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E3353690;
  v9[1] = (uint64_t (**)())v2;
  v9[2] = (uint64_t (**)())v7;
  v9[3] = (uint64_t (**)())v5;
  v18 = v9;
  v10 = *(_QWORD *)(v2 + 8);
  if (!v10)
  {
    v18 = 0;
    v13 = &off_1E3353690;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v18 = 0;
    goto LABEL_10;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, 0, (uint64_t *)&v18);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
LABEL_10:
    v13 = *v9;
LABEL_11:
    v13[1]();
  }
  if (v17 != -1)
    ((void (**)(uint64_t (****)(), uint64_t))off_1E33535A0)[v17](&v18, (uint64_t)v16);
  v17 = -1;
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::remove(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0::operator()(WebCore::ExceptionOr<BOOL> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E33539E0;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    off_1E33535A0[v2](&v5, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::remove(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0::operator()(WebCore::ExceptionOr<BOOL> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E33539E0;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    off_1E33535A0[v3](&v6, (uint64_t)this + 16);
  *((_DWORD *)this + 8) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::remove(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0::operator()(WebCore::ExceptionOr<BOOL> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  objc_class *v11;

  v1 = *(_DWORD *)(a1 + 32);
  if (!v1)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  if (v1 != 1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>>(v7, v8);
  }
  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v11 = 0;
  v9[0] = v2;
  if (v3)
    *(_DWORD *)v3 += 2;
  v10 = v3;
  WebCore::DeferredPromise::reject(v4, v9, 0, &v11);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      if (!v3)
        return result;
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v3)
    return result;
LABEL_9:
  if (*(_DWORD *)v3 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v5);
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  _DWORD **v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)v6[7];
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(_DWORD ***)a2;
        v12 = 8 * v10;
        do
        {
          v13 = (objc_class *)WebCore::wrap<WebCore::FetchRequest>((uint64_t)v6, v8, *v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::keys(std::optional<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3353A08;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::keys(std::optional<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3353A08;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::keys(std::optional<std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String>> &&,WebCore::CacheQueryOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v14;
  __int128 v15;
  _BYTE v16[16];
  int v17;
  uint64_t (***v18)();

  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v14 = v2;
  v15 = v2;
  v16[0] = 0;
  v17 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E3353758[v3])(&v18, v16, a2);
    v17 = v3;
  }
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v4 = &off_1E3353A30;
  *(_OWORD *)(v4 + 8) = v15;
  *(_BYTE *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  v5 = v17;
  if (v17 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E3353758[v17])(&v18, v4 + 24, v16);
    *(_DWORD *)(v4 + 40) = v5;
  }
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(v14 + 24);
  *(_QWORD *)(v6 + 8) = v14;
  ++*(_QWORD *)(v14 + 16);
  *(_DWORD *)(v14 + 24) = v7 + 2;
  v8 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E3353690;
  v8[1] = (uint64_t (**)())v14;
  v8[2] = (uint64_t (**)())v6;
  v8[3] = (uint64_t (**)())v4;
  v18 = v8;
  v9 = *(_QWORD *)(v14 + 8);
  if (!v9)
  {
    v18 = 0;
    v12 = &off_1E3353690;
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v18 = 0;
    goto LABEL_10;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 0, (uint64_t *)&v18);
  v8 = v18;
  v18 = 0;
  if (v8)
  {
LABEL_10:
    v12 = *v8;
LABEL_11:
    v12[1]();
  }
  if (v17 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E3353580[v17])(&v18, v16);
  v17 = -1;
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache4keysEONSt3__18optionalINS4_7variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEEEONS2_17CacheQueryOptionsEONS2_18DOMPromiseDeferredINS2_11IDLSequenceINS2_12IDLInterfaceIS8_EEEEEEEN3__0clINS2_11ExceptionOrINS_6VectorINS2_14DOMCacheEngine6RecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E3353A30;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3353580[v2])(&v5, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache4keysEONSt3__18optionalINS4_7variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEEEONS2_17CacheQueryOptionsEONS2_18DOMPromiseDeferredINS2_11IDLSequenceINS2_12IDLInterfaceIS8_EEEEEEEN3__0clINS2_11ExceptionOrINS_6VectorINS2_14DOMCacheEngine6RecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E3353A30;
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3353580[v3])(&v6, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8DOMCache4keysEONSt3__18optionalINS4_7variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEEEONS2_17CacheQueryOptionsEONS2_18DOMPromiseDeferredINS2_11IDLSequenceINS2_12IDLInterfaceIS8_EEEEEEEN3__0clINS2_11ExceptionOrINS_6VectorINS2_14DOMCacheEngine6RecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  int v1;
  char v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ScriptExecutionContext *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  const void *v35;
  WTF::StringImpl *v36;
  __int128 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD *Request;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  void *v44;
  WTF *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  _DWORD *v63;
  void *v64;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73[2];
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  _QWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  char v85;
  const void *v86;
  objc_class *v87;
  int v88;
  uint64_t v89;
  WTF *v90;
  char v91;
  uint64_t v92;

  v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = *(_BYTE *)(a1 + 24);
      v3 = *(WTF::StringImpl **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      v4 = *(_QWORD *)(a1 + 16);
      v87 = 0;
      LOBYTE(v77) = v2;
      if (v3)
        *(_DWORD *)v3 += 2;
      v78 = v3;
      WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v77, 0, &v87);
      v6 = v78;
      v78 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v5);
          if (!v3)
            return;
          goto LABEL_9;
        }
        *(_DWORD *)v6 -= 2;
      }
      if (!v3)
        return;
LABEL_9:
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v5);
      else
        *(_DWORD *)v3 -= 2;
      return;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_106:
    __break(0xC471u);
LABEL_109:
    JUMPOUT(0x1952EBECCLL);
  }
  v68 = *(_QWORD *)(a1 + 8);
  v7 = *(WTF::StringImpl **)(a1 + 24);
  v8 = *(unsigned int *)(a1 + 36);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v70 = 0;
  v71 = 0;
  if (!(_DWORD)v8)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>>(*(_QWORD *)(a1 + 16), (uint64_t)&v70);
    if (!v7)
      return;
    goto LABEL_100;
  }
  if (v8 >> 29)
  {
    __break(0xC471u);
    goto LABEL_109;
  }
  v9 = 0;
  v69 = (WTF::StringImpl *)((char *)v7 + 576 * v8);
  v70 = WTF::fastMalloc((WTF *)(8 * v8));
  LODWORD(v71) = v8;
  v67 = v70;
  v66 = v7;
  v10 = 8;
  do
  {
    v11 = v9;
    v12 = v10;
    v13 = *(_QWORD *)(v68 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (WebCore::ScriptExecutionContext *)(v14 - 96);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    v16 = *((_BYTE *)v7 + 16);
    if ((*((_BYTE *)v7 + 208) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WTF::StringImpl *)((char *)v7 + 24));
      *((_BYTE *)v7 + 208) |= 1u;
    }
    v17 = *((unsigned int *)v7 + 33);
    v77 = 0;
    LODWORD(v78) = 0;
    HIDWORD(v78) = v17;
    if ((_DWORD)v17)
    {
      if (v17 >> 28)
        goto LABEL_106;
      v18 = WTF::fastMalloc((WTF *)(16 * v17));
      v19 = v18;
      LODWORD(v78) = v17;
      v77 = v18;
      v20 = *((unsigned int *)v7 + 33);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = *((_QWORD *)v7 + 15);
        v23 = v22 + 16 * v20;
        do
        {
          v24 = v22 + v21;
          *(_WORD *)(v18 + v21) = *(_WORD *)(v22 + v21);
          v25 = *(_DWORD **)(v22 + v21 + 8);
          if (v25)
            *v25 += 2;
          *(_QWORD *)(v18 + v21 + 8) = v25;
          v21 += 16;
        }
        while (v24 + 16 != v23);
      }
    }
    else
    {
      v19 = 0;
    }
    v26 = *((unsigned int *)v7 + 37);
    v79 = 0;
    LODWORD(v80) = 0;
    HIDWORD(v80) = v26;
    if ((_DWORD)v26)
    {
      if (v26 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1952EBED4);
      }
      v47 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v26));
      LODWORD(v80) = v26;
      v79 = v47;
      v48 = *((unsigned int *)v7 + 37);
      if ((_DWORD)v48)
      {
        v49 = *((_QWORD *)v7 + 17);
        v50 = v49 + 16 * v48;
        do
        {
          v51 = *(_DWORD **)v49;
          if (*(_QWORD *)v49)
            *v51 += 2;
          *v47 = v51;
          v52 = *(_DWORD **)(v49 + 8);
          if (v52)
            *v52 += 2;
          v47[1] = v52;
          v49 += 16;
          v47 += 2;
        }
        while (v49 != v50);
        v19 = v77;
      }
    }
    v27 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v27 = 1;
    *(_BYTE *)(v27 + 4) = v16;
    v77 = 0;
    *(_QWORD *)(v27 + 8) = v19;
    v28 = v78;
    v78 = 0;
    *(_QWORD *)(v27 + 16) = v28;
    v29 = v79;
    v79 = 0;
    *(_QWORD *)(v27 + 24) = v29;
    v30 = v80;
    v80 = 0;
    *(_QWORD *)(v27 + 32) = v30;
    *(_QWORD *)(v27 + 48) = 0;
    *(_QWORD *)(v27 + 56) = 0;
    *(_QWORD *)(v27 + 40) = 0;
    v92 = v27;
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v77, v31);
    LOBYTE(v87) = 0;
    v91 = 0;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v77, (WTF::StringImpl *)((char *)v7 + 24));
    v32 = (_DWORD *)*((_QWORD *)v7 + 22);
    if (v32)
      *v32 += 2;
    v81 = v32;
    v33 = (_DWORD *)*((_QWORD *)v7 + 23);
    if (v33)
      *v33 += 2;
    v82 = v33;
    v34 = (_DWORD *)*((_QWORD *)v7 + 24);
    if (v34)
      ++*v34;
    v84 = *((_QWORD *)v7 + 25);
    v85 = *((_BYTE *)v7 + 208);
    v35 = (const void *)*((_QWORD *)v7 + 27);
    v83 = v34;
    v86 = v35;
    if (v35)
      CFRetain(v35);
    v73[0] = *((_DWORD *)v7 + 56);
    *(int *)((char *)v73 + 3) = *(_DWORD *)((char *)v7 + 227);
    v36 = (WTF::StringImpl *)*((_QWORD *)v7 + 29);
    if (v36)
      *(_DWORD *)v36 += 2;
    v74 = v36;
    v37 = *((_OWORD *)v7 + 16);
    v75 = *((_OWORD *)v7 + 15);
    v76 = v37;
    v38 = (WTF::StringImpl *)*((_QWORD *)v7 + 34);
    if (v38)
      *(_DWORD *)v38 += 2;
    v72 = v38;
    v39 = WTF::fastMalloc((WTF *)0x290);
    Request = (_QWORD *)WebCore::FetchRequest::FetchRequest(v39, v15, (uint64_t)&v87, &v92, (uint64_t)&v77, v73, (uint64_t *)&v72);
    WebCore::ActiveDOMObject::suspendIfNeeded(Request);
    v42 = v72;
    v72 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v74;
    v74 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v41);
      else
        *(_DWORD *)v43 -= 2;
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v77, v41);
    if (v91)
    {
      v45 = v90;
      v90 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
        {
          v53 = (_DWORD *)*((_QWORD *)v45 + 1);
          *((_QWORD *)v45 + 1) = 0;
          if (v53)
          {
            if (v53[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 16))(v53);
            else
              --v53[4];
          }
          WTF::fastFree(v45, v44);
        }
        else
        {
          --*(_DWORD *)v45;
        }
      }
      WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v89, v44);
      if (v88 != -1)
        ((void (*)(uint64_t *, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v88])(&v77, &v87);
    }
    v46 = v92;
    v92 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
      {
        v54 = *(unsigned int *)(v46 + 52);
        if ((_DWORD)v54)
        {
          v57 = *(WTF::StringImpl ***)(v46 + 40);
          v58 = 8 * v54;
          do
          {
            v59 = *v57;
            *v57 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
                WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v44);
              else
                *(_DWORD *)v59 -= 2;
            }
            ++v57;
            v58 -= 8;
          }
          while (v58);
        }
        v55 = *(WTF **)(v46 + 40);
        if (v55)
        {
          *(_QWORD *)(v46 + 40) = 0;
          *(_DWORD *)(v46 + 48) = 0;
          WTF::fastFree(v55, v44);
        }
        WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v46 + 8), (WTF::StringImpl *)v44);
        WTF::fastFree((WTF *)v46, v56);
      }
      else
      {
        --*(_DWORD *)v46;
      }
    }
    v9 = v11 + 1;
    *(_QWORD *)(v67 + 8 * v11) = v39;
    v7 = (WTF::StringImpl *)((char *)v7 + 576);
    v10 = v12 + 8;
  }
  while (v7 != v69);
  HIDWORD(v71) = v11 + 1;
  v60 = (WTF *)v70;
  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FetchRequest>>>(*(_QWORD *)(a1 + 16), (uint64_t)&v70);
  v7 = v66;
  if ((_DWORD)v11 != -1)
  {
    v62 = v60;
    do
    {
      v63 = *(_DWORD **)v62;
      *(_QWORD *)v62 = 0;
      if (v63)
      {
        if (v63[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 16))(v63);
        else
          --v63[6];
      }
      v62 = (WTF *)((char *)v62 + 8);
      v12 -= 8;
    }
    while (v12);
  }
  if (v60)
    WTF::fastFree(v60, v61);
  WTF::VectorDestructor<true,WebCore::DOMCacheEngine::Record>::destruct(v66, v69);
  if (v66)
LABEL_100:
    WTF::fastFree(v7, v64);
}

unsigned int *WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *a2;
  if (!*a2)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)*a2;
    *a2 = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *a2;
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS5_5ErrorELj0EE11whenSettledIZNS4_22ScriptExecutionContext22enqueueTaskWhenSettledISB_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS9_SA_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISO_EENS_21DefaultRefDerefTraitsISO_EEEENS4_10TaskSourceEOT0_EUlOSO_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESY_RKNS_6Logger17LogSiteIdentifierEEUlSK_E_vJSK_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353A58;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS5_5ErrorELj0EE11whenSettledIZNS4_22ScriptExecutionContext22enqueueTaskWhenSettledISB_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS9_SA_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISO_EENS_21DefaultRefDerefTraitsISO_EEEENS4_10TaskSourceEOT0_EUlOSO_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESY_RKNS_6Logger17LogSiteIdentifierEEUlSK_E_vJSK_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353A58;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS5_5ErrorELj0EE11whenSettledIZNS4_22ScriptExecutionContext22enqueueTaskWhenSettledISB_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS9_SA_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISO_EENS_21DefaultRefDerefTraitsISO_EEEENS4_10TaskSourceEOT0_EUlOSO_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESY_RKNS_6Logger17LogSiteIdentifierEEUlSK_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[16];
  int v26;
  uint64_t v27;
  char v28;

  v4 = *(_QWORD *)(a1 + 40);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v15 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v24 = v15;
      v25[0] = 0;
      v26 = -1;
      v16 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v16 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E3353A80[v16])(&v27, v25, a2);
        v26 = v16;
      }
      v17 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v17 = &off_1E3353AA0;
      *(_QWORD *)(v17 + 8) = v24;
      v18 = *((_QWORD *)&v24 + 1);
      v24 = 0uLL;
      *(_QWORD *)(v17 + 16) = v18;
      *(_BYTE *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 40) = -1;
      v19 = v26;
      if (v26 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3353A80[v26])(&v27, v17 + 24, v25);
        *(_DWORD *)(v17 + 40) = v19;
      }
      v27 = v17;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, &v27);
      v21 = v27;
      v27 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (v26 != -1)
        ((void (*)(char *, _BYTE *))off_1E3353A70[v26])(&v28, v25);
      v26 = -1;
      if ((_QWORD)v24)
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1), &v24);
      v22 = *((_QWORD *)&v24 + 1);
      *((_QWORD *)&v24 + 1) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      result = (unsigned int *)v24;
      *(_QWORD *)&v24 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v23 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v23 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v23 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v20);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 592 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorINS2_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedISB_SC_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS2_10TaskSourceEOT0_ENUlOSN_E_clISI_EEDaSX_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_1E3353AA0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3353A70[v2])(&v7, a1 + 24);
  v3 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 40) = -1;
  if (*(_QWORD *)(a1 + 8))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v3;
  *v3 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorINS2_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedISB_SC_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS2_10TaskSourceEOT0_ENUlOSN_E_clISI_EEDaSX_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)this = &off_1E3353AA0;
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3353A70[v3])(&v8, (char *)this + 24);
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 10) = -1;
  if (*((_QWORD *)this + 1))
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this + 8);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v4;
  *v4 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorINS2_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedISB_SC_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS2_10TaskSourceEOT0_ENUlOSN_E_clISI_EEDaSX_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E3353AC8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3353AF8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3353AC8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3353AF8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 16);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v15)
  {
    v5 = *((_DWORD *)v15 + 1);
    if (v14)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v14)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v14 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0) && (!v14 || (*((_BYTE *)v14 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v15, 60, v14, 62, a2);
  if (!*a2)
    goto LABEL_31;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      return WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;

  if ((a7 | a6) < 0)
    goto LABEL_29;
  v8 = a6 + a7;
  v9 = __OFADD__(a6, a7);
  if (a5 < 0 || v9)
    goto LABEL_29;
  v10 = __OFADD__(a5, v8);
  v11 = a5 + v8;
  v12 = v10;
  if (a4 < 0 || v12)
    goto LABEL_29;
  v10 = __OFADD__(a4, v11);
  v13 = a4 + v11;
  v14 = v10;
  if (a3 < 0 || v14)
    goto LABEL_29;
  v10 = __OFADD__(a3, v13);
  v15 = a3 + v13;
  v16 = v10;
  if (a2 < 0
    || v16
    || ((v10 = __OFADD__(a2, v15), v17 = a2 + v15, !v10) ? (v18 = 0) : (v18 = 1),
        (result & 0x80000000) != 0 || v18 || (v10 = __OFADD__((_DWORD)result, v17), v19 = result + v17, v10)))
  {
LABEL_29:
    *(_DWORD *)(a8 + 4) = 0;
    *(_BYTE *)a8 = 1;
  }
  else
  {
    *(_BYTE *)a8 = 0;
    *(_DWORD *)(a8 + 4) = v19;
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v11 = (uint64_t *)(a1 + 16);
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *v11;
  *v11 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WTF::Logger *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::Logger *v46;
  WTF::NativePromiseBase *v47;
  WTF::Logger::LogSiteIdentifier *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  WTF::NativePromiseBase *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  WTF::Lock *v68;
  char v69;
  WTF::Logger *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  __int128 buf;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v68 = v6;
  v69 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 128) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v15 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v77, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v76);
  WTF::String::String((WTF::String *)&v75, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v73, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v72, "]");
  v70 = v77;
  v85 = v76;
  *(_QWORD *)&buf = v78;
  v83 = v74;
  v84 = v75;
  v81 = v16;
  v82 = v73;
  v80 = v72;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v70, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, &v79);
  if (!v79)
  {
    __break(0xC471u);
    return result;
  }
  v18 = v72;
  v72 = 0;
  if (!v18)
  {
LABEL_11:
    if (v16)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v18, v17);
  if (v16)
  {
LABEL_12:
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_14:
  v19 = v73;
  v73 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v74;
  v74 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v75;
  v75 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v76;
  v76 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v17);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v77;
  v77 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v78;
  v78 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v17);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *((_QWORD *)v15 + 4);
  v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v26)
  {
    WTF::String::utf8();
    v28 = v70 ? (char *)v70 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v28;
    _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v26 = (uint64_t)v70;
    v70 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        v26 = WTF::fastFree((WTF *)v26, v27);
      else
        --*(_DWORD *)v26;
    }
  }
  if (*v15 && v15[16] >= 4u)
  {
    v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v30 = *v29;
      if ((v30 & 1) != 0)
        break;
      v31 = __ldaxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | 1, v29))
        {
          v66 = (const char *)a2;
          v32 = WTF::Logger::observers((WTF::Logger *)v26);
          v33 = *(unsigned int *)(v32 + 12);
          if ((_DWORD)v33)
          {
            v34 = *(uint64_t **)v32;
            v67 = *(_QWORD *)v32 + 8 * v33;
            do
            {
              v35 = *v34;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v87 = 0;
              WTF::String::String((WTF::String *)&v88, " invoking maybeSettle() [");
              v89 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v90);
              v91 = 0;
              WTF::String::String((WTF::String *)&v92, " callback:");
              v93 = 0;
              WTF::LogArgument<void const*>::toString();
              v95 = 0;
              WTF::String::String((WTF::String *)&v96, " isNothing:");
              v97 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v98 = v70;
              v99 = 0;
              WTF::String::String((WTF::String *)v100, "]");
              v70 = 0;
              v71 = 0;
              v36 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v71) = 8;
              v70 = v36;
              v37 = HIDWORD(v71);
              *((_DWORD *)v36 + 4 * HIDWORD(v71)) = buf;
              v38 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v36 + 2 * v37 + 1) = v38;
              *((_DWORD *)v36 + 4 * (v37 + 1)) = v87;
              v39 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 1) + 1) = v39;
              *((_DWORD *)v36 + 4 * (v37 + 2)) = v89;
              v40 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 2) + 1) = v40;
              *((_DWORD *)v36 + 4 * (v37 + 3)) = v91;
              v41 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 3) + 1) = v41;
              *((_DWORD *)v36 + 4 * (v37 + 4)) = v93;
              v42 = v94;
              if (v94)
                *(_DWORD *)v94 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 4) + 1) = v42;
              *((_DWORD *)v36 + 4 * (v37 + 5)) = v95;
              v43 = v96;
              if (v96)
                *(_DWORD *)v96 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 5) + 1) = v43;
              *((_DWORD *)v36 + 4 * (v37 + 6)) = v97;
              v44 = v98;
              if (v98)
                *(_DWORD *)v98 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 6) + 1) = v44;
              *((_DWORD *)v36 + 4 * (v37 + 7)) = v99;
              v45 = v100[0];
              if (v100[0])
                *(_DWORD *)v100[0] += 2;
              *((_QWORD *)v36 + 2 * (v37 + 7) + 1) = v45;
              HIDWORD(v71) = v37 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v35 + 16))(v35, v15, 4, &v70);
              v46 = v70;
              if (HIDWORD(v71))
              {
                v47 = v8;
                v48 = a3;
                v49 = 16 * HIDWORD(v71);
                v50 = (WTF::StringImpl **)((char *)v70 + 8);
                do
                {
                  v51 = *v50;
                  *v50 = 0;
                  if (v51)
                  {
                    if (*(_DWORD *)v51 == 2)
                      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v51 -= 2;
                  }
                  v50 += 2;
                  v49 -= 16;
                }
                while (v49);
                v46 = v70;
                a3 = v48;
                v8 = v47;
              }
              if (v46)
              {
                v70 = 0;
                LODWORD(v71) = 0;
                WTF::fastFree(v46, v27);
              }
              v52 = v100[0];
              v100[0] = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v98;
              v98 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v96;
              v96 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v94;
              v94 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v92;
              v92 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = v90;
              v90 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v88;
              v88 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v59 -= 2;
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v67);
          }
          v60 = __ldxr(v29);
          if (v60 == 1)
          {
            if (!__stlxr(0, v29))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v79;
  v79 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 80))
  {
    result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v68, v10, v11, v12, v13, v14, v66);
  }
  else
  {
    v61 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v61 == *(_DWORD *)(a1 + 96))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 88), v61 + 1, (unint64_t)a2);
      v61 = *(unsigned int *)(a1 + 100);
      v62 = v61 + 1;
      v63 = *(_QWORD *)(a1 + 88);
      v64 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v62 = v61 + 1;
      v63 = *(_QWORD *)(a1 + 88);
      v64 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v63 + 8 * v61) = v64;
    *(_DWORD *)(a1 + 100) = v62;
  }
  if (v69)
  {
    result = (unsigned __int8 *)v68;
    v65 = __ldxr((unsigned __int8 *)v68);
    if (v65 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v68))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  WTF::NativePromiseBase *v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned __int8 *result;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v25;
  int v26;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  const char *v37;
  int v38;
  const char *v39;
  WTF::Logger::LogSiteIdentifier *v40;
  uint64_t v41;
  _QWORD v42[2];
  int v43;
  char v44;

  v11 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v12 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v12 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v13 = *((_QWORD *)v11 + 2);
      v14 = (unsigned int *)((char *)v11 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = (unsigned int *)(a2 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = &off_1E3354178;
      v18[1] = v11;
      v18[2] = v11;
      v18[3] = a2;
      v42[0] = v18;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v42);
      result = (unsigned __int8 *)v42[0];
      v42[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v11 + 56))
  {
    v42[0] = v11;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v20 = result[16] >= 4u;
    else
      v20 = 0;
    if (v20)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v42, " callSite:", (WTF::NativePromiseBase *)((char *)v11 + 24), "]");
    return result;
  }
  v21 = *a3;
  v22 = __ldxr(*a3);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v21))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
  v23 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v25 = *(_DWORD *)(a2 + 80);
  v26 = __ldxr(v23);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v23))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v25 != 2)
  {
    if (__ldaxr(v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_65;
    LOBYTE(v42[0]) = 0;
    v43 = -1;
    v30 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v30 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E3353A80[v30])(&v44, v42, a2 + 56);
      v43 = v30;
    }
    v31 = __ldxr(v23);
    if (v31 == 1)
    {
      if (!__stlxr(0, v23))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, a2, v42);
        if (v43 != -1)
          ((void (*)(char *, _QWORD *))off_1E3353A70[v43])(&v44, v42);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_65:
    v33 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(v33, v34, v35, v36, v37, v38, v39, v40, a9);
  }
  v41 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v29 = __ldxr(v23);
  if (v29 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v41 + 16))(v42, v41);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, a2, v42);
  if (v43 != -1)
    ((void (*)(char *, _QWORD *))off_1E3353A70[v43])(&v44, v42);
  v43 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, const char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  WTF::Logger::LogSiteIdentifier *v57;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86[3];

  v86[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  v57 = a8;
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v71 = v63;
  v72 = v64;
  v69 = v61;
  v70 = v62;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v16 = v61;
    v61 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v62;
    v62 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v63;
    v63 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v64;
    v64 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v65;
    v65 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v66;
    v66 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v15);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v67;
    v67 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v15);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *(NSObject **)(a1 + 32);
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v24)
    {
      WTF::String::utf8();
      v26 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v24 = (uint64_t)v59;
      v59 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          v24 = WTF::fastFree((WTF *)v24, v25);
        else
          --*(_DWORD *)v24;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v28 = *v27;
        if ((v28 & 1) != 0)
          break;
        v29 = __ldaxr(v27);
        if (v29 == v28)
        {
          if (!__stxr(v28 | 1, v27))
          {
            v30 = WTF::Logger::observers((WTF::Logger *)v24);
            v31 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v31)
            {
              v32 = *(uint64_t **)v30;
              v55 = *(_QWORD *)v30 + 8 * v31;
              do
              {
                v33 = *v32;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(v57);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v34;
                v35 = HIDWORD(v60);
                *((_DWORD *)v34 + 4 * HIDWORD(v60)) = buf;
                v36 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v34 + 2 * v35 + 1) = v36;
                *((_DWORD *)v34 + 4 * (v35 + 1)) = v75;
                v37 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
                *((_DWORD *)v34 + 4 * (v35 + 2)) = v77;
                v38 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
                *((_DWORD *)v34 + 4 * (v35 + 3)) = v79;
                v39 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 3) + 1) = v39;
                *((_DWORD *)v34 + 4 * (v35 + 4)) = v81;
                v40 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 4) + 1) = v40;
                *((_DWORD *)v34 + 4 * (v35 + 5)) = v83;
                v41 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 5) + 1) = v41;
                *((_DWORD *)v34 + 4 * (v35 + 6)) = v85;
                v42 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v34 + 2 * (v35 + 6) + 1) = v42;
                HIDWORD(v60) = v35 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v59);
                v43 = v59;
                if (HIDWORD(v60))
                {
                  v44 = 16 * HIDWORD(v60);
                  v45 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v43 = v59;
                }
                if (v43)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v43, v25);
                }
                v47 = v86[0];
                v86[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v84;
                v84 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v82;
                v82 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v80;
                v80 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v78;
                v78 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v76;
                v76 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                ++v32;
              }
              while (v32 != (uint64_t *)v55);
            }
            v54 = __ldxr(v27);
            if (v54 == 1)
            {
              if (!__stlxr(0, v27))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3354178;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3354178;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  int v20;
  char v21;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v19[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v19, v15);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
      if (v20 != -1)
        ((void (*)(char *, _QWORD *))off_1E3353A70[v20])(&v21, v19);
      v20 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1952EEC54);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 80) != 1)
    goto LABEL_46;
  LOBYTE(v19[0]) = 0;
  v20 = -1;
  v17 = *(unsigned int *)(v10 + 72);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E3353A80[v17])(&v21, v19, v10 + 56);
    v20 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
  if (v20 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E3353A70[v20])(&v21, v19);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::queryCache(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions const&,WebCore::DOMCache::ShouldRetrieveResponses,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_1,void,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::ExceptionOr<WTF::Vector::CrossThreadRecord,0ul,WebCore::DOMCacheEngine::Record,16ul,WTF::CrashOnOverflow>,WTF::Vector::Error> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  v2 = *a2;
  v4[0] = 5;
  v5 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3353A70[v5])(&v6, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::queryCache(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions const&,WebCore::DOMCache::ShouldRetrieveResponses,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::ExceptionOr<WTF::Vector::CrossThreadRecord,0ul,WebCore::DOMCacheEngine::Record,16ul,WTF::CrashOnOverflow>,WTF::Vector::Error> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E3353B50;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v6 + 24, a2);
      WTF::fastFree(v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::queryCache(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions const&,WebCore::DOMCache::ShouldRetrieveResponses,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::ExceptionOr<WTF::Vector::CrossThreadRecord,0ul,WebCore::DOMCacheEngine::Record,16ul,WTF::CrashOnOverflow>,WTF::Vector::Error> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E3353B50;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v6 + 24, a2);
      WTF::fastFree(v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::queryCache(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions const&,WebCore::DOMCache::ShouldRetrieveResponses,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::ExceptionOr<WTF::Vector::CrossThreadRecord,0ul,WebCore::DOMCacheEngine::Record,16ul,WTF::CrashOnOverflow>,WTF::Vector::Error> &&>::call(WTF::StringImpl *result, unsigned __int8 *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  __int128 v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  CFTypeRef v66;
  unsigned int v67;
  uint64_t v68;
  CFTypeRef v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  WTF::StringImpl *v75;
  char v76[8];
  WTF::StringImpl *v77;
  char v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  _DWORD v110[2];
  WTF::StringImpl *v111;
  __int128 v112;
  __int128 v113;
  WTF::StringImpl *v114;
  char v115;
  uint64_t v116;
  unsigned int v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[19];
  CFTypeRef cf;
  char v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;

  v2 = result;
  v146 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v3 + 64))
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 96;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v7 = 5;
    goto LABEL_14;
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *(_QWORD *)(v3 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v6 = v11 - 96;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    if (v9 == 1)
    {
      v7 = *a2;
LABEL_14:
      WebCore::DOMCacheEngine::convertToExceptionAndLog(v76, v6, v7);
      v12 = v77;
      v77 = 0;
      LOBYTE(v79) = v76[0];
      *((_QWORD *)&v79 + 1) = v12;
      v80 = 1;
      v13 = *((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 16))(v13, &v79);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v80 != -1)
        ((void (*)(char *, __int128 *))off_1E3353580[v80])(&v78, &v79);
      v80 = -1;
      result = v77;
      v77 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_49:
    __break(0xC471u);
    return result;
  }
  v15 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v15)
  {
    if (v15 >= 0x71C71D)
      goto LABEL_49;
    v16 = 576 * v15;
    v17 = WTF::fastMalloc((WTF *)(576 * v15));
    v18 = (v16 & 0xFFFFFFC0) / 0x240;
    v15 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v15)
    {
      v75 = v2;
      v19 = 0;
      v20 = *(_QWORD *)a2;
      v21 = 592 * v15;
      v74 = ((unint64_t)(16 * v15 - 16) >> 4) + 1;
      do
      {
        WebCore::DOMCacheEngine::fromCrossThreadRecord(v20, (uint64_t)&v79);
        v23 = v17;
        v24 = v17 + v19;
        v25 = v79;
        *(_BYTE *)(v24 + 16) = v80;
        *(_OWORD *)v24 = v25;
        v26 = v81;
        v81 = 0;
        *(_QWORD *)(v24 + 24) = v26;
        v27 = *(_DWORD *)(v17 + v19 + 32) & 0xFFFFFFFE | v82 & 1;
        *(_DWORD *)(v24 + 32) = v27;
        v28 = v27 & 0xFFFFFFFD | (2 * ((v82 >> 1) & 1));
        *(_DWORD *)(v24 + 32) = v28;
        v29 = v28 & 0xFFFFFFFB | (4 * ((v82 >> 2) & 1));
        *(_DWORD *)(v24 + 32) = v29;
        v30 = v29 & 0xFFFFFFC7 | (8 * ((v82 >> 3) & 7));
        *(_DWORD *)(v24 + 32) = v30;
        *(_DWORD *)(v24 + 32) = v82 & 0xFFFFFFC0 | v30 & 0x3F;
        *(_OWORD *)(v24 + 36) = v83;
        *(_QWORD *)(v24 + 52) = v84;
        *(_DWORD *)(v24 + 60) = v85;
        v82 &= ~1u;
        v31 = v86;
        v86 = 0;
        *(_QWORD *)(v24 + 64) = v31;
        v32 = *(_DWORD *)(v17 + v19 + 72) & 0xFFFFFFFE | v87 & 1;
        *(_DWORD *)(v24 + 72) = v32;
        v33 = v32 & 0xFFFFFFFD | (2 * ((v87 >> 1) & 1));
        *(_DWORD *)(v24 + 72) = v33;
        v34 = v33 & 0xFFFFFFFB | (4 * ((v87 >> 2) & 1));
        *(_DWORD *)(v24 + 72) = v34;
        v35 = v34 & 0xFFFFFFC7 | (8 * ((v87 >> 3) & 7));
        *(_DWORD *)(v24 + 72) = v35;
        *(_DWORD *)(v24 + 72) = v87 & 0xFFFFFFC0 | v35 & 0x3F;
        *(_OWORD *)(v24 + 76) = v88;
        *(_QWORD *)(v24 + 92) = v89;
        *(_DWORD *)(v24 + 100) = v90;
        v87 &= ~1u;
        *(_QWORD *)(v24 + 104) = v91;
        v36 = v92;
        v92 = 0;
        *(_QWORD *)(v24 + 120) = 0;
        *(_QWORD *)(v24 + 128) = 0;
        *(_QWORD *)(v24 + 112) = v36;
        v37 = v93;
        v93 = 0;
        *(_QWORD *)(v24 + 120) = v37;
        LODWORD(v37) = v94;
        v94 = 0;
        *(_DWORD *)(v24 + 128) = v37;
        LODWORD(v37) = v95;
        v95 = 0;
        *(_DWORD *)(v24 + 132) = v37;
        *(_QWORD *)(v24 + 136) = 0;
        *(_QWORD *)(v24 + 144) = 0;
        v38 = v96;
        v96 = 0;
        *(_QWORD *)(v24 + 136) = v38;
        LODWORD(v38) = v97;
        v97 = 0;
        *(_DWORD *)(v24 + 144) = v38;
        LODWORD(v38) = v98;
        v98 = 0;
        *(_DWORD *)(v24 + 148) = v38;
        *(_QWORD *)(v24 + 152) = 0;
        *(_QWORD *)(v24 + 160) = 0;
        v39 = v99;
        v99 = 0;
        *(_QWORD *)(v24 + 152) = v39;
        LODWORD(v39) = v100;
        v100 = 0;
        *(_DWORD *)(v24 + 160) = v39;
        LODWORD(v39) = v101;
        v101 = 0;
        *(_DWORD *)(v24 + 164) = v39;
        LODWORD(v39) = v102;
        *(_BYTE *)(v24 + 172) = v103;
        *(_DWORD *)(v24 + 168) = v39;
        v40 = v104;
        v104 = 0;
        *(_QWORD *)(v24 + 176) = v40;
        v41 = v105;
        v105 = 0;
        *(_QWORD *)(v24 + 184) = v41;
        v42 = v106;
        v106 = 0;
        *(_QWORD *)(v24 + 192) = v42;
        v43 = v107;
        *(_BYTE *)(v24 + 208) = v108;
        *(_QWORD *)(v24 + 200) = v43;
        v44 = v109;
        v109 = 0;
        *(_QWORD *)(v24 + 216) = v44;
        LODWORD(v44) = v110[0];
        *(_DWORD *)(v24 + 227) = *(_DWORD *)((char *)v110 + 3);
        *(_DWORD *)(v24 + 224) = v44;
        v45 = v111;
        v111 = 0;
        *(_QWORD *)(v24 + 232) = v45;
        v46 = v113;
        *(_OWORD *)(v24 + 240) = v112;
        *(_OWORD *)(v24 + 256) = v46;
        v47 = v114;
        v114 = 0;
        *(_QWORD *)(v24 + 272) = v47;
        *(_BYTE *)(v24 + 280) = v115;
        v48 = v116;
        v116 = 0;
        *(_QWORD *)(v24 + 288) = v48;
        v49 = *(_DWORD *)(v17 + v19 + 296) & 0xFFFFFFFE | v117 & 1;
        *(_DWORD *)(v24 + 296) = v49;
        v50 = v49 & 0xFFFFFFFD | (2 * ((v117 >> 1) & 1));
        *(_DWORD *)(v24 + 296) = v50;
        v51 = v50 & 0xFFFFFFFB | (4 * ((v117 >> 2) & 1));
        *(_DWORD *)(v24 + 296) = v51;
        v52 = v51 & 0xFFFFFFC7 | (8 * ((v117 >> 3) & 7));
        *(_DWORD *)(v24 + 296) = v52;
        *(_DWORD *)(v24 + 296) = v117 & 0xFFFFFFC0 | v52 & 0x3F;
        *(_OWORD *)(v17 + v19 + 300) = v118;
        *(_QWORD *)(v17 + v19 + 316) = v119;
        *(_DWORD *)(v24 + 324) = v120;
        v117 &= ~1u;
        v53 = v121;
        v121 = 0;
        *(_QWORD *)(v24 + 328) = v53;
        *(_QWORD *)(v24 + 336) = v122;
        v54 = v123;
        v123 = 0;
        *(_QWORD *)(v24 + 344) = v54;
        v55 = v124;
        v124 = 0;
        *(_QWORD *)(v24 + 352) = v55;
        v56 = v125;
        v125 = 0;
        *(_QWORD *)(v24 + 368) = 0;
        *(_QWORD *)(v24 + 376) = 0;
        *(_QWORD *)(v24 + 360) = v56;
        v57 = v126;
        v126 = 0;
        *(_QWORD *)(v24 + 368) = v57;
        LODWORD(v57) = v127;
        v127 = 0;
        *(_DWORD *)(v24 + 376) = v57;
        LODWORD(v57) = v128;
        v128 = 0;
        *(_DWORD *)(v24 + 380) = v57;
        *(_QWORD *)(v24 + 384) = 0;
        *(_QWORD *)(v24 + 392) = 0;
        v58 = v129;
        v129 = 0;
        *(_QWORD *)(v24 + 384) = v58;
        LODWORD(v58) = v130;
        v130 = 0;
        *(_DWORD *)(v24 + 392) = v58;
        LODWORD(v58) = v131;
        v131 = 0;
        *(_DWORD *)(v24 + 396) = v58;
        v59 = v132;
        v132 = 0;
        *(_QWORD *)(v24 + 400) = v59;
        *(_BYTE *)(v24 + 408) = 0;
        *(_BYTE *)(v24 + 416) = 0;
        if (v134)
        {
          v60 = v133;
          v133 = 0;
          *(_QWORD *)(v24 + 408) = v60;
          *(_BYTE *)(v24 + 416) = 1;
        }
        v61 = v135;
        v62 = v137;
        *(_OWORD *)(v24 + 440) = v136;
        *(_OWORD *)(v24 + 456) = v62;
        *(_OWORD *)(v24 + 424) = v61;
        v63 = v138;
        v64 = v139;
        v65 = *(_OWORD *)v140;
        *(_DWORD *)(v24 + 519) = *(_DWORD *)&v140[15];
        *(_OWORD *)(v24 + 488) = v64;
        *(_OWORD *)(v24 + 504) = v65;
        *(_OWORD *)(v24 + 472) = v63;
        v66 = cf;
        cf = 0;
        *(_QWORD *)(v24 + 528) = v66;
        *(_BYTE *)(v24 + 536) = v142;
        *(_BYTE *)(v24 + 544) = 0;
        *(_DWORD *)(v24 + 552) = -1;
        v67 = v144;
        if (v144 == -1)
        {
          v17 = v23;
          *(_QWORD *)(v23 + v19 + 560) = v145;
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t *))off_1E33535B0[v144])(v76, v24 + 544, &v143);
          *(_DWORD *)(v24 + 552) = v67;
          v68 = v144;
          v17 = v23;
          *(_QWORD *)(v23 + v19 + 560) = v145;
          if ((_DWORD)v68 != -1)
            ((void (*)(char *, uint64_t *))off_1E3353540[v68])(v76, &v143);
        }
        v144 = -1;
        v69 = cf;
        cf = 0;
        if (v69)
          CFRelease(v69);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v116, v22);
        v71 = v114;
        v114 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v70);
          else
            *(_DWORD *)v71 -= 2;
        }
        v72 = v111;
        v111 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
            WTF::StringImpl::destroy(v72, v70);
          else
            *(_DWORD *)v72 -= 2;
        }
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v81, v70);
        v20 += 592;
        v19 += 576;
        v21 -= 592;
      }
      while (v21);
      v18 = (v16 & 0xFFFFFFC0) / 0x240;
      v2 = v75;
      LODWORD(v15) = v74;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  *(_QWORD *)&v79 = v17;
  *((_QWORD *)&v79 + 1) = __PAIR64__(v15, v18);
  v80 = 0;
  v73 = *((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 16))(v73, &v79);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  if (v80 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, __int128 *))off_1E3353580[v80])(v76, &v79);
  return result;
}

unsigned int *WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  unsigned int **v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF::FunctionDispatcher *v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::NativePromiseBase *v37;
  void *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *result;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  void *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  unsigned int *v66;
  unsigned int *v67;
  __int128 v68;
  const char *v69;
  uint64_t v70;
  WTF::NativePromiseBase *v71;
  char v72;
  __int128 v73;
  uint64_t v74;

  v6 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
  *v6 = 0;
  v6[1] = 0;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v6;
  v9 = *v6;
  *v6 = (unsigned int *)v8;
  if (!v9)
    goto LABEL_63;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v7);
  }
  v8 = (uint64_t)*v6;
  if (*v6)
  {
LABEL_63:
    do
      v12 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v12 + 1, (unsigned int *)v8));
  }
  v13 = *a2;
  v14 = *(WTF::FunctionDispatcher **)(a1 + 288);
  if (!v14)
  {
    v14 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
    v15 = 1;
    *((_DWORD *)v14 + 2) = 1;
    v16 = WTF::FunctionDispatcher::FunctionDispatcher(v14);
    *(_QWORD *)v16 = off_1E33A7800;
    v17 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(v16 + 32) = v17;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    {
      v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v18)
        v18 = WTF::Thread::initializeCurrentTLS(0);
      v15 = *(_DWORD *)(v18 + 48);
    }
    *((_DWORD *)v14 + 12) = v15;
    v19 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v14;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      v14 = *(WTF::FunctionDispatcher **)(a1 + 288);
    }
  }
  v20 = *(_QWORD *)(a1 + 104);
  if (v20)
    goto LABEL_64;
  v20 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = a1 + 96;
  v58 = *(unsigned int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v20;
  if (!v58)
    goto LABEL_64;
  do
  {
    v59 = __ldaxr(v58);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v58));
  if (!v60)
  {
    atomic_store(1u, v58);
    WTF::fastFree((WTF *)v58, v57);
  }
  v20 = *(_QWORD *)(a1 + 104);
  if (v20)
  {
LABEL_64:
    do
      v21 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v21 + 1, (unsigned int *)v20));
  }
  v63 = 0;
  v62 = 0;
  v72 = 0;
  v64 = 0;
  v65 = 0u;
  v61 = *a3;
  *a3 = 0u;
  v22 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v14 + 32))(v14);
  v23 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v23 = off_1E3353B78;
  *(_QWORD *)(v23 + 8) = v20;
  v71 = 0;
  *(_BYTE *)(v23 + 16) = 0;
  *(_OWORD *)(v23 + 24) = v61;
  v73 = 0u;
  v74 = 0;
  *(_QWORD *)(v23 + 40) = v6;
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = v14;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_QWORD *)(v22 + 40) = "enqueueTaskWhenSettled";
  *(_QWORD *)(v22 + 48) = 0;
  *(_WORD *)(v22 + 56) = 0;
  *(_QWORD *)v22 = &off_1E3353BE8;
  v25 = (unsigned int *)(v13 + 8);
  *(_QWORD *)(v22 + 64) = 0;
  *(_QWORD *)(v22 + 72) = v23;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v66 = (unsigned int *)v13;
  v67 = (unsigned int *)v22;
  v68 = 0u;
  v69 = "enqueueTaskWhenSettled";
  v70 = 0;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v71, v24);
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v62, v27);
  if (v8)
  {
    v28 = *(uint64_t **)(v8 + 8);
    if (v28)
    {
      WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(a1 + 296, v28, (uint64_t)&v71);
      v29 = *(_QWORD *)(v8 + 8);
      v30 = v67;
      v31 = v67 + 2;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      v33 = *(unsigned int **)(v29 + 8);
      *(_QWORD *)(v29 + 8) = v30;
      if (v33)
      {
        v34 = v33 + 2;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v33 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
        }
      }
      v37 = (WTF::NativePromiseBase *)v67;
      v67 = 0;
      v71 = v37;
      WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v66, &v71, (WTF::Logger::LogSiteIdentifier *)&v68);
      v39 = (unsigned int *)v71;
      v71 = 0;
      if (v39)
      {
        v40 = v39 + 2;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          atomic_store(1u, v39 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
        }
      }
      v22 = (uint64_t)v67;
      if (!v67)
      {
        v67 = 0;
        goto LABEL_44;
      }
      v13 = (uint64_t)v66;
    }
  }
  v67 = 0;
  v71 = (WTF::NativePromiseBase *)v22;
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(v13, &v71, (WTF::Logger::LogSiteIdentifier *)&v68);
  v43 = (unsigned int *)v71;
  v71 = 0;
  if (v43)
  {
    v44 = v43 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v43 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
    }
  }
  v47 = v67;
  v67 = 0;
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v47 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
    }
  }
LABEL_44:
  result = v66;
  v66 = 0;
  if (!result)
    goto LABEL_48;
  v52 = result + 2;
  do
  {
    v53 = __ldaxr(v52);
    v54 = v53 - 1;
  }
  while (__stlxr(v54, v52));
  if (!v54)
  {
    atomic_store(1u, result + 2);
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    if (!v8)
      return result;
  }
  else
  {
LABEL_48:
    if (!v8)
      return result;
  }
  do
  {
    v55 = __ldaxr((unsigned int *)v8);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v8));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)v8);
    return (unsigned int *)WTF::fastFree((WTF *)v8, v38);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE11whenSettledIZNS7_22ScriptExecutionContext22enqueueTaskWhenSettledISA_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS6_S9_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS7_10TaskSourceEOT0_EUlOSN_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESX_RKNS_6Logger17LogSiteIdentifierEEUlSJ_E_vJSJ_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353B78;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE11whenSettledIZNS7_22ScriptExecutionContext22enqueueTaskWhenSettledISA_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS6_S9_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS7_10TaskSourceEOT0_EUlOSN_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESX_RKNS_6Logger17LogSiteIdentifierEEUlSJ_E_vJSJ_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353B78;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE11whenSettledIZNS7_22ScriptExecutionContext22enqueueTaskWhenSettledISA_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS6_S9_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS7_10TaskSourceEOT0_EUlOSN_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESX_RKNS_6Logger17LogSiteIdentifierEEUlSJ_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[16];
  int v26;
  uint64_t v27;
  char v28;

  v4 = *(_QWORD *)(a1 + 40);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v15 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v24 = v15;
      v25[0] = 0;
      v26 = -1;
      v16 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v16 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E3353BA0[v16])(&v27, v25, a2);
        v26 = v16;
      }
      v17 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v17 = &off_1E3353BC0;
      *(_QWORD *)(v17 + 8) = v24;
      v18 = *((_QWORD *)&v24 + 1);
      v24 = 0uLL;
      *(_QWORD *)(v17 + 16) = v18;
      *(_BYTE *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 40) = -1;
      v19 = v26;
      if (v26 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3353BA0[v26])(&v27, v17 + 24, v25);
        *(_DWORD *)(v17 + 40) = v19;
      }
      v27 = v17;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, &v27);
      v21 = v27;
      v27 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (v26 != -1)
        ((void (*)(char *, _BYTE *))off_1E3353B90[v26])(&v28, v25);
      v26 = -1;
      if ((_QWORD)v24)
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1), &v24);
      v22 = *((_QWORD *)&v24 + 1);
      *((_QWORD *)&v24 + 1) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      result = (unsigned int *)v24;
      *(_QWORD *)&v24 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v23 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v23 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v23 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v20);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS2_14DOMCacheEngine5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS9_SB_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEENS2_10TaskSourceEOT0_ENUlOSM_E_clISH_EEDaSW_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_1E3353BC0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3353B90[v2])(&v7, a1 + 24);
  v3 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 40) = -1;
  if (*(_QWORD *)(a1 + 8))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v3;
  *v3 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS2_14DOMCacheEngine5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS9_SB_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEENS2_10TaskSourceEOT0_ENUlOSM_E_clISH_EEDaSW_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)this = &off_1E3353BC0;
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3353B90[v3])(&v8, (char *)this + 24);
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 10) = -1;
  if (*((_QWORD *)this + 1))
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this + 8);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v4;
  *v4 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS2_14DOMCacheEngine5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS9_SB_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEENS2_10TaskSourceEOT0_ENUlOSM_E_clISH_EEDaSW_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E3353BE8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3353C18;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3353BE8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3353C18;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 16);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 128) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v70);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 80))
  {
    result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 96))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 88), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 100);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 88);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 88);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 100) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  char v31;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E33541A0;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v29[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v29);
      result = (unsigned __int8 *)v29[0];
      v29[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v29[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v29, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 80);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_65;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
    v24 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E3353BA0[v24])(&v31, v29, a2 + 56);
      v30 = v24;
    }
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
        if (v30 != -1)
          ((void (*)(char *, _QWORD *))off_1E3353B90[v30])(&v31, v29);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_65:
    v27 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v27);
  }
  v28 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v28 + 16))(v29, v28);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
  if (v30 != -1)
    ((void (*)(char *, _QWORD *))off_1E3353B90[v30])(&v31, v29);
  v30 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E33541A0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33541A0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  int v20;
  char v21;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v19[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v19, v15);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
      if (v20 != -1)
        ((void (*)(char *, _QWORD *))off_1E3353B90[v20])(&v21, v19);
      v20 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1952F1A98);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 80) != 1)
    goto LABEL_46;
  LOBYTE(v19[0]) = 0;
  v20 = -1;
  v17 = *(unsigned int *)(v10 + 72);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E3353BA0[v17])(&v21, v19, v10 + 56);
    v20 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
  if (v20 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E3353B90[v20])(&v21, v19);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::batchDeleteOperation(WebCore::FetchRequest const&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_1,void,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  v2 = *a2;
  v4[0] = 5;
  v5 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3353B90[v5])(&v6, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::batchDeleteOperation(WebCore::FetchRequest const&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E3353C70;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v6 + 24, a2);
      WTF::fastFree(v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::batchDeleteOperation(WebCore::FetchRequest const&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E3353C70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v6 + 24, a2);
      WTF::fastFree(v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DOMCache::batchDeleteOperation(WebCore::FetchRequest const&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&>::call(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18[8];
  WTF::StringImpl *v19;
  char v20[8];
  WTF::StringImpl *v21;
  int v22;
  char v23;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 64))
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 96;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v7 = 5;
LABEL_14:
    WebCore::DOMCacheEngine::convertToExceptionAndLog(v18, v6, v7);
    v11 = v19;
    v19 = 0;
    v20[0] = v18[0];
    v21 = v11;
    v22 = 1;
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v12 + 16))(v12, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v22 != -1)
      off_1E33535A0[v22](&v23, (uint64_t)v20);
    v22 = -1;
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    return;
  }
  v8 = *((_DWORD *)a2 + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v3 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v9 = v10 - 96;
      else
        v9 = 0;
    }
    if (v8 != 1)
    {
      v16 = std::__throw_bad_variant_access[abi:sn180100]();
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(v16, v17);
      return;
    }
    v7 = *a2;
    v6 = v9;
    goto LABEL_14;
  }
  v20[0] = *((_DWORD *)a2 + 3) != 0;
  v22 = 0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 16))(v15, v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v22 != -1)
    off_1E33535A0[v22](v18, (uint64_t)v20);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 1;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = *a3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v3;
}

void WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = a1;
    do
    {
      v6 = *((unsigned int *)v5 + 144);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E3353540[v6])(&v10, (char *)v5 + 568);
      *((_DWORD *)v5 + 144) = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WTF::StringImpl *)((char *)v5 + 288), a2);
      v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 34);
      *((_QWORD *)v5 + 34) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 29);
      *((_QWORD *)v5 + 29) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      WebCore::ResourceRequest::~ResourceRequest((WTF::StringImpl *)((char *)v5 + 24), v7);
      v5 = (WTF::StringImpl *)((char *)v5 + 592);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::batchPutOperation(WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_2,void,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  v2 = *a2;
  v4[0] = 5;
  v5 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3353B90[v5])(&v6, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCache::batchPutOperation(WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E3353CD8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v6 + 24, a2);
      WTF::fastFree(v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCache::batchPutOperation(WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E3353CD8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      WTF::RefCounted<WebCore::DOMCache>::deref(v6 + 24, a2);
      WTF::fastFree(v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCache::batchPutOperation(WTF::Vector<WebCore::DOMCacheEngine::Record,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&>::call(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  uint64_t v16;
  char v17[8];
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 64))
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 96;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v7 = 5;
    goto LABEL_14;
  }
  v8 = *((_DWORD *)a2 + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v3 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v9 = v10 - 96;
      else
        v9 = 0;
    }
    if (v8 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x1952F21A4);
    }
    v7 = *a2;
    v6 = v9;
LABEL_14:
    WebCore::DOMCacheEngine::convertToExceptionAndLog(v17, v6, v7);
    v11 = v18;
    v18 = 0;
    LOBYTE(v19) = v17[0];
    v20 = v11;
    LOBYTE(v21) = 1;
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if ((_BYTE)v21)
    {
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    result = v18;
    v18 = 0;
    if (result)
      goto LABEL_19;
    return result;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v19);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if ((_BYTE)v21)
  {
    result = v20;
    v20 = 0;
    if (result)
    {
LABEL_19:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCacheEngine::queryCacheMatch(WebCore::ResourceRequest const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::CacheQueryOptions const&)::$_0,void,WTF::StringView>::call(WTF::StringImpl *result, char *a2, unint64_t a3)
{
  WebCore::ResourceRequest *v3;
  unint64_t v4;
  char *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v26;
  WebCore::ResourceRequest *v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore::ResourceRequest *v31;
  WebCore::ResourceRequest *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  v3 = (WebCore::ResourceRequest *)*((_QWORD *)result + 1);
  if (*(_BYTE *)v3)
    return result;
  v4 = a3;
  v5 = a2;
  v6 = result;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      v7 = 0;
      while (1)
      {
        v8 = a2[v7];
        v9 = v8 > 0x20;
        v10 = (1 << v8) & 0x100002600;
        if (v9 || v10 == 0)
          break;
        if (a3 == ++v7)
        {
          v4 = 0x100000000;
          v5 = "";
          goto LABEL_41;
        }
      }
      if ((_DWORD)a3 != 1)
      {
        v12 = (a3 - 1);
        while (v12 < a3)
        {
          v13 = a2[v12];
          v9 = v13 > 0x20;
          v14 = (1 << v13) & 0x100002600;
          if (!v9 && v14 != 0)
          {
            if ((_DWORD)--v12)
              continue;
          }
          if (!(_DWORD)v7 && (_DWORD)v12 == (_DWORD)a3 - 1)
            goto LABEL_41;
          goto LABEL_21;
        }
        goto LABEL_68;
      }
      if ((_DWORD)v7)
      {
        LODWORD(v12) = 0;
LABEL_21:
        v16 = (v12 - v7 + 1);
        if ((unint64_t)a3 - v7 < v16)
          goto LABEL_68;
        v5 = &a2[v7];
        v4 = v16 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)a3)
  {
    v17 = 0;
    v18 = a2;
    while (1)
    {
      v19 = *(unsigned __int16 *)v18;
      v9 = v19 > 0x20;
      v20 = (1 << v19) & 0x100002600;
      if (v9 || v20 == 0)
        break;
      ++v17;
      v18 += 2;
      if (a3 == v17)
      {
        v4 = 0x100000000;
        v5 = "";
        goto LABEL_41;
      }
    }
    if ((_DWORD)a3 != 1)
    {
      v22 = (a3 - 1);
      while (v22 < a3)
      {
        v23 = *(unsigned __int16 *)&a2[2 * v22];
        v9 = v23 > 0x20;
        v24 = (1 << v23) & 0x100002600;
        if (!v9 && v24 != 0)
        {
          if ((_DWORD)--v22)
            continue;
        }
        if ((_DWORD)v17 || (_DWORD)v22 != (_DWORD)a3 - 1)
          goto LABEL_67;
        goto LABEL_41;
      }
      goto LABEL_68;
    }
    if ((_DWORD)v17)
    {
      LODWORD(v22) = 0;
LABEL_67:
      v4 = (v22 - v17 + 1);
      v5 = v18;
      if ((unint64_t)a3 - v17 < v4)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
  }
LABEL_41:
  if (v5 == "*" || v4 != 1)
  {
    if (v5 != "*" || v4 != 1)
      goto LABEL_50;
LABEL_49:
    *(_BYTE *)v3 = 1;
    return result;
  }
  if ((v4 & 0xFF00000000) != 0)
    v26 = *v5;
  else
    v26 = *(unsigned __int16 *)v5;
  if (v26 == 42)
    goto LABEL_49;
LABEL_50:
  v3 = (WebCore::ResourceRequest *)*((_QWORD *)result + 2);
  if ((*((_BYTE *)v3 + 184) & 1) == 0)
  {
LABEL_69:
    v31 = v3;
    WebCore::ResourceRequest::doUpdateResourceRequest(v3);
    v3 = v31;
    *((_BYTE *)v31 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::get((uint64_t)v3 + 96, (WebCore::HTTPHeaderNamesHash *)v5, (char *)v4, &v34);
  v27 = (WebCore::ResourceRequest *)*((_QWORD *)v6 + 3);
  if ((*((_BYTE *)v27 + 184) & 1) == 0)
  {
    v32 = (WebCore::ResourceRequest *)*((_QWORD *)v6 + 3);
    WebCore::ResourceRequest::doUpdateResourceRequest(v27);
    v27 = v32;
    *((_BYTE *)v32 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::get((uint64_t)v27 + 96, (WebCore::HTTPHeaderNamesHash *)v5, (char *)v4, &v33);
  **((_BYTE **)v6 + 1) = WTF::equal(v34, v33, v28) ^ 1;
  v30 = v33;
  v33 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD v8[2];

  v3 = *a1;
  v4 = bmalloc::api::isoAllocate();
  *(_DWORD *)v4 = 1;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = v4 + 8;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(v3 + 32);
  v8[0] = 0;
  v8[1] = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore15FormDataElementELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(v8, (uint64_t *)(v3 + 8));
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, v8);
  result = WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  *(_DWORD *)(a2 + 8) = 1;
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::DOMCacheEngine::isolatedResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v5;

  v2 = *a1;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v5 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 2;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v5, a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 1;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_0,WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_1,WebCore::DOMCacheEngine::copyResponseBody(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v5;

  v2 = *a1;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v5 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 2;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v5, a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::doSequentialMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;

  *a1 = &off_1E3353D58;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::doSequentialMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3353D58;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::doSequentialMatch(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::CacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::RefPtr<WebCore::FetchResponse,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::CacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::CacheQueryOptions &&>> &&>>>>::call(uint64_t *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;
  objc_class *v15;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    if (v2 != 1)
    {
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::MultiCacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::MultiCacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::MultiCacheQueryOptions &&>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(v12);
    }
    v3 = result[2];
    v4 = *(_BYTE *)a2;
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v15 = 0;
    v13[0] = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v14 = v5;
    WebCore::DeferredPromise::reject(v3, v13, 0, &v15);
    result = (uint64_t *)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        if (!v5)
          return result;
        goto LABEL_9;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_9:
    if (*(_DWORD *)v5 == 2)
      return (uint64_t *)WTF::StringImpl::destroy(v5, v6);
    *(_DWORD *)v5 -= 2;
    return result;
  }
  v7 = *(_DWORD **)a2;
  v8 = result[2];
  if (v7)
    return (uint64_t *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FetchResponse>>(result[2], v7);
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
    return (uint64_t *)MEMORY[0x19AEA32A0](v13);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::MultiCacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::MultiCacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::MultiCacheQueryOptions &&>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_1E3353D80;
  v3 = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v7, a1 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::MultiCacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::MultiCacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::MultiCacheQueryOptions &&>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)this = &off_1E3353D80;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12FetchRequestENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v7, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::match(std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::MultiCacheQueryOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::MultiCacheQueryOptions &&>,WTF::DefaultRefDerefTraits<WebCore::MultiCacheQueryOptions &&>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t result, char *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  objc_class *v32;
  WTF *v33;
  WTF::StringImpl *v34;

  v3 = result;
  if (a2[16])
  {
    v4 = *(_QWORD *)(result + 48);
    v5 = *a2;
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v32 = 0;
    LOBYTE(v33) = v5;
    if (v6)
      *(_DWORD *)v6 += 2;
    v34 = v6;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v33, 0, &v32);
    result = (uint64_t)v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        if (!v6)
          return result;
LABEL_8:
        if (*(_DWORD *)v6 == 2)
          return WTF::StringImpl::destroy(v6, v7);
        *(_DWORD *)v6 -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v6)
      return result;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 40))
  {
    if (!*(_DWORD *)(v8 + 44))
    {
LABEL_15:
      v10 = *(_QWORD *)(v3 + 48);
      v11 = *(_QWORD *)(v10 + 24);
      if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
      {
        v12 = *(_QWORD *)(v10 + 32);
        if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0)
          v13 = 0;
        else
          v13 = *(uint64_t **)v12;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v10, v13, 0, (objc_class *)0xA);
        return MEMORY[0x19AEA32A0](&v33);
      }
      return result;
    }
    v9 = 0;
    while (1)
    {
      result = WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9) + 32), *(const WTF::StringImpl **)(v3 + 40), a3);
      if ((result & 1) != 0)
        break;
      if (++v9 >= *(unsigned int *)(v8 + 44))
        goto LABEL_15;
    }
    if (v9 < *(unsigned int *)(v8 + 44))
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9);
      ++*(_DWORD *)(v29 + 24);
      v30 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      v31 = (WTF *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v31 = &off_1E33536B8;
      *((_QWORD *)v31 + 1) = v29;
      *((_QWORD *)v31 + 2) = v29;
      *((_QWORD *)v31 + 3) = v30;
      v33 = v31;
      WebCore::DOMCache::doMatch(v29, v3 + 16, (char *)(v3 + 32), (uint64_t *)&v33);
      result = (uint64_t)v33;
      if (v33)
        return (*(uint64_t (**)(WTF *))(*(_QWORD *)v33 + 8))(v33);
      return result;
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1952F2D24);
  }
  v33 = 0;
  v34 = 0;
  v14 = *(unsigned int *)(v8 + 44);
  if ((_DWORD)v14)
  {
    if (v14 >> 29)
      goto LABEL_45;
    v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
    LODWORD(v34) = v14;
    v33 = v15;
    v16 = *(unsigned int *)(v8 + 44);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v8 + 32);
      v19 = 8 * v16;
      do
      {
        v20 = *(_QWORD *)(v18 + 8 * v17);
        ++*(_DWORD *)(v20 + 24);
        *((_QWORD *)v15 + v17++) = v20;
        v19 -= 8;
      }
      while (v19);
      HIDWORD(v34) = v17;
    }
  }
  v21 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v21 = 1;
  ++*(_DWORD *)(v8 + 24);
  *(_QWORD *)(v21 + 8) = v8;
  ++*(_QWORD *)(v8 + 16);
  v22 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  v23 = (objc_class *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v23 = &off_1E3353D58;
  *((_QWORD *)v23 + 1) = v21;
  *((_QWORD *)v23 + 2) = v22;
  v32 = v23;
  WebCore::doSequentialMatch(0, (uint64_t)&v33, v3 + 16, (char *)(v3 + 32), (uint64_t *)&v32);
  result = (uint64_t)v32;
  if (v32)
    result = (*(uint64_t (**)(objc_class *))(*(_QWORD *)v32 + 8))(v32);
  v25 = v33;
  if (HIDWORD(v34))
  {
    v26 = 8 * HIDWORD(v34);
    v27 = v33;
    do
    {
      v28 = *(_QWORD *)v27;
      *(_QWORD *)v27 = 0;
      if (v28)
        result = WTF::RefCounted<WebCore::DOMCache>::deref(v28 + 24, v24);
      v27 = (WTF *)((char *)v27 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  if (v25)
    return WTF::fastFree(v25, v24);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::has(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E3353DA8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::has(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E3353DA8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::has(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  objc_class *v14;

  if (*(_BYTE *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_BYTE *)a2;
    v6 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v14 = 0;
    v12[0] = v5;
    if (v6)
      *(_DWORD *)v6 += 2;
    v13 = v6;
    WebCore::DeferredPromise::reject(v4, v12, 0, &v14);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!v6)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v6)
      return result;
LABEL_8:
    if (*(_DWORD *)v6 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v7);
    *(_DWORD *)v6 -= 2;
    return result;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v9 + 44))
  {
    v10 = 0;
    do
    {
      v11 = WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) + 32), *(const WTF::StringImpl **)(a1 + 16), a3);
      if ((v11 & 1) != 0)
        break;
      ++v10;
    }
    while (v10 < *(unsigned int *)(v9 + 44));
  }
  else
  {
    v11 = 0;
  }
  return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 24), v11);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENS4_5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS7_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS5_S6_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEENS3_10TaskSourceEOT0_EUlOSK_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlSG_E_vJSG_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353DD0;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENS4_5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS7_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS5_S6_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEENS3_10TaskSourceEOT0_EUlOSK_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlSG_E_vJSG_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353DD0;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)>>(WTF::Ref<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENS4_5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS7_NS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS5_S6_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEENS3_10TaskSourceEOT0_EUlOSK_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlSG_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[24];
  int v26;
  uint64_t v27;
  char v28;

  v4 = *(_QWORD *)(a1 + 40);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v15 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v24 = v15;
      v25[0] = 0;
      v26 = -1;
      v16 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v16 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E3353DF8[v16])(&v27, v25, a2);
        v26 = v16;
      }
      v17 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)v17 = &off_1E3353E18;
      *(_QWORD *)(v17 + 8) = v24;
      v18 = *((_QWORD *)&v24 + 1);
      v24 = 0uLL;
      *(_QWORD *)(v17 + 16) = v18;
      *(_BYTE *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 48) = -1;
      v19 = v26;
      if (v26 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3353DF8[v26])(&v27, v17 + 24, v25);
        *(_DWORD *)(v17 + 48) = v19;
      }
      v27 = v17;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, &v27);
      v21 = v27;
      v27 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (v26 != -1)
        ((void (*)(char *, _BYTE *))off_1E3353DE8[v26])(&v28, v25);
      v26 = -1;
      if ((_QWORD)v24)
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1), &v24);
      v22 = *((_QWORD *)&v24 + 1);
      *((_QWORD *)&v24 + 1) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      result = (unsigned int *)v24;
      *(_QWORD *)&v24 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v23 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v23 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v23 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v20);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS2_14DOMCacheEngine10CacheInfosENS6_5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS7_S8_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_10TaskSourceEOT0_ENUlOSJ_E_clISE_EEDaST_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_1E3353E18;
  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3353DE8[v2])(&v7, a1 + 24);
  v3 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(_QWORD *)(a1 + 8))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v3;
  *v3 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS2_14DOMCacheEngine10CacheInfosENS6_5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS7_S8_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_10TaskSourceEOT0_ENUlOSJ_E_clISE_EEDaST_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)this = &off_1E3353E18;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3353DE8[v3])(&v8, (char *)this + 24);
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 12) = -1;
  if (*((_QWORD *)this + 1))
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this + 8);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v4;
  *v4 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS2_14DOMCacheEngine10CacheInfosENS6_5ErrorELj0EEENS_30CompletionHandlerWithFinalizerIFvONSt12experimental15fundamentals_v38expectedIS7_S8_EEEEEEEvONS_3RefIT_NS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_10TaskSourceEOT0_ENUlOSJ_E_clISE_EEDaST_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E3353E40;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3353E70;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3353E40;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3353E70;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 24);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 136) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v70);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 88))
  {
    result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 104))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 96), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 108);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 96);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 96);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 108) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[3];
  int v30;
  char v31;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 137));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E3354150;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v29[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v29);
      result = (unsigned __int8 *)v29[0];
      v29[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v29[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v29, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 88);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 88) != 1)
      goto LABEL_65;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
    v24 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E3353DF8[v24])(&v31, v29, a2 + 56);
      v30 = v24;
    }
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
        if (v30 != -1)
          ((void (*)(char *, _QWORD *))off_1E3353DE8[v30])(&v31, v29);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 88) != 2)
  {
LABEL_65:
    v27 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v27);
  }
  v28 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v28 + 16))(v29, v28);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
  if (v30 != -1)
    ((void (*)(char *, _QWORD *))off_1E3353DE8[v30])(&v31, v29);
  v30 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3354150;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3354150;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v19[3];
  int v20;
  char v21;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v19[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 88);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 88) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v19, v15);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
      if (v20 != -1)
        ((void (*)(char *, _QWORD *))off_1E3353DE8[v20])(&v21, v19);
      v20 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1952F50B8);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 88) != 1)
    goto LABEL_46;
  LOBYTE(v19[0]) = 0;
  v20 = -1;
  v17 = *(unsigned int *)(v10 + 80);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E3353DF8[v17])(&v21, v19, v10 + 56);
    v20 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
  if (v20 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E3353DE8[v20])(&v21, v19);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,std::experimental::fundamentals_v3::Error> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];
  int v5;
  char v6;

  v2 = *a2;
  v4[0] = 5;
  v5 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3353DE8[v5])(&v6, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,std::experimental::fundamentals_v3::Error> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353EC8;
  WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,std::experimental::fundamentals_v3::Error> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353EC8;
  WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::retrieveCaches(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,std::experimental::fundamentals_v3::Error> &&>::call(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  char v56[8];
  WTF::StringImpl *v57;
  char v58;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 64))
    goto LABEL_2;
  v10 = *(_QWORD *)(v3 + 8);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v12 = v11 - 96;
    v13 = *(unsigned __int8 *)(v11 + 178);
    if (*(_BYTE *)(v11 + 178))
    {
      if (v13 == 1 || v13 == 2)
        ++*(_DWORD *)(v11 + 216);
    }
    else
    {
      *(_DWORD *)(v11 - 264) += 2;
    }
    v14 = *((_DWORD *)a2 + 6);
    if (!v14)
    {
      v21 = *((_QWORD *)a2 + 2);
      if (*(_QWORD *)(v3 + 48) != v21)
      {
        *(_QWORD *)(v3 + 48) = v21;
        v22 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v22)
        {
          if (v22 >> 29)
          {
            __break(0xC471u);
LABEL_95:
            JUMPOUT(0x1952F56B8);
          }
          v53 = WTF::fastMalloc((WTF *)(8 * v22));
          v23 = *((_DWORD *)a2 + 3);
          if (v23)
          {
            v49 = v22;
            v24 = 0;
            v25 = *(uint64_t **)a2;
            v52 = *(_QWORD *)a2 + 24 * v23;
            v51 = v11 - 288;
            do
            {
              v26 = *(unsigned int *)(v3 + 44);
              v27 = *v25;
              if ((_DWORD)v26)
              {
                v28 = 0;
                v29 = v25[1];
                while (1)
                {
                  v30 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v28);
                  if (v27 == *(_QWORD *)(v30 + 40) && v29 == *(_QWORD *)(v30 + 48))
                    break;
                  if (v26 == ++v28)
                    goto LABEL_44;
                }
                if (v28 >= v26)
                  goto LABEL_93;
                ++*(_DWORD *)(v30 + 24);
              }
              else
              {
                v29 = v25[1];
LABEL_44:
                v32 = *(unsigned int **)(v3 + 56);
                v33 = v32 + 2;
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 + 1, v33));
                v35 = WTF::fastMalloc((WTF *)0x48);
                v30 = v35;
                *(_DWORD *)(v35 + 24) = 1;
                v36 = v11;
                v37 = *(unsigned __int8 *)(v11 + 178);
                v38 = v12;
                if (!v37)
                {
                  v39 = *(_QWORD *)(v36 + 416);
                  v40 = v51;
                  if (v39)
                  {
                    v41 = *(_QWORD *)(v39 + 8);
                    v40 = v51;
                    if (v41)
                      v40 = v41;
                  }
                  v12 = v40 + 192;
                }
                *(_QWORD *)v35 = &off_1E33A18C0;
                *(_QWORD *)(v35 + 8) = 0;
                WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v35, (WebCore::ScriptExecutionContext *)v12);
                *(_QWORD *)v30 = &off_1E33A0540;
                *(_QWORD *)(v30 + 16) = 0;
                if (*(_BYTE *)(v12 + 278))
                {
                  __break(0xC471u);
                  goto LABEL_95;
                }
                v54 = v30;
                WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v12 + 128), &v54, (uint64_t)v56);
                *(_QWORD *)v30 = &off_1E33541C8;
                v42 = v25[2];
                v25[2] = 0;
                *(_QWORD *)(v30 + 32) = v42;
                *(_QWORD *)(v30 + 40) = v27;
                *(_QWORD *)(v30 + 48) = v29;
                *(_QWORD *)(v30 + 56) = v32;
                *(_BYTE *)(v30 + 64) = 0;
                (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v32 + 64))(v32, v27, v29);
                WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v30);
                v12 = v38;
                v11 = v36;
              }
              v43 = v24 + 1;
              *(_QWORD *)(v53 + 8 * v24) = v30;
              v25 += 3;
              ++v24;
            }
            while (v25 != (uint64_t *)v52);
            LODWORD(v22) = v49;
          }
          else
          {
            v43 = 0;
          }
        }
        else
        {
          v43 = 0;
          v53 = 0;
        }
        v44 = *(unsigned int *)(v3 + 44);
        v45 = *(WTF **)(v3 + 32);
        if ((_DWORD)v44)
        {
          v46 = 8 * v44;
          do
          {
            v47 = *(_QWORD *)v45;
            *(_QWORD *)v45 = 0;
            if (v47)
              WTF::RefCounted<WebCore::DOMCache>::deref(v47 + 24, (WTF::StringImpl *)a2);
            v45 = (WTF *)((char *)v45 + 8);
            v46 -= 8;
          }
          while (v46);
          v45 = *(WTF **)(v3 + 32);
        }
        if (v45)
        {
          *(_QWORD *)(v3 + 32) = 0;
          *(_DWORD *)(v3 + 40) = 0;
          WTF::fastFree(v45, a2);
        }
        *(_QWORD *)(v3 + 32) = v53;
        *(_DWORD *)(v3 + 40) = v22;
        *(_DWORD *)(v3 + 44) = v43;
        v2 = a1;
      }
      v56[0] = 0;
      v58 = 0;
      v48 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v48 + 16))(v48, v56);
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      if (v58)
      {
        result = (unsigned int *)v57;
        v57 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
          else
            *result -= 2;
        }
      }
      goto LABEL_26;
    }
    v15 = 0;
  }
  else
  {
    v14 = *((_DWORD *)a2 + 6);
    v15 = 1;
    if (!v14)
    {
LABEL_2:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v54) = 33;
      v56[0] = 33;
      v4 = v55;
      v55 = 0;
      v57 = v4;
      v58 = 1;
      v5 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v56);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (v58)
      {
        v7 = v57;
        v57 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      result = (unsigned int *)v55;
      v55 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        else
          *result -= 2;
      }
      return result;
    }
    v12 = 0;
  }
  if (v14 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_93:
    __break(0xC471u);
    JUMPOUT(0x1952F572CLL);
  }
  WebCore::DOMCacheEngine::convertToExceptionAndLog((char *)&v54, v12, *a2);
  v56[0] = v54;
  v16 = v55;
  v55 = 0;
  v57 = v16;
  v58 = 1;
  v17 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 16))(v17, v56);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v58)
  {
    v19 = v57;
    v57 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  result = (unsigned int *)v55;
  v55 = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      if ((v15 & 1) != 0)
        return result;
      goto LABEL_26;
    }
    *result -= 2;
  }
  if ((v15 & 1) != 0)
    return result;
LABEL_26:
  v20 = *(unsigned __int8 *)(v12 + 274);
  if (*(_BYTE *)(v12 + 274))
  {
    if (v20 == 1)
    {
      if (*(_DWORD *)(v12 + 312) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      else
        --*(_DWORD *)(v12 + 312);
    }
    else if (v20 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v12 + 312));
    }
  }
  else if (*(_DWORD *)(v12 - 168) == 2)
  {
    if ((*(_WORD *)(v12 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 192), v18);
  }
  else
  {
    *(_DWORD *)(v12 - 168) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::open(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E3353EF0;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::open(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E3353EF0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::open(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const WTF::StringImpl **v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  void *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  WTF::FunctionDispatcher *v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  const WTF::StringImpl *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  WTF *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  _QWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  void *v74;
  void *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  WTF *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  void *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  WTF *v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  void *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  const WTF::StringImpl *v130;
  __int128 v131;
  _QWORD *v132;
  unsigned int *v133;
  __int128 v134;
  WTF *v135;
  char v136;
  _QWORD v137[2];
  __int128 v138;
  __int128 v139;
  unsigned int *v140;
  unsigned int *v141;
  __int128 v142;
  const char *v143;
  uint64_t v144;
  WTF *v145;
  WTF::StringImpl *v146;
  _QWORD v147[2];
  __int128 v148;
  uint64_t v149;
  WTF *v150;
  unsigned __int8 v151[8];
  WTF::StringImpl *v152;
  int v153;
  _BYTE v154[24];
  int v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 16))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = v11 - 96;
        v13 = *(unsigned __int8 *)(v11 + 178);
        if (*(_BYTE *)(v11 + 178))
        {
          if (v13 == 1 || v13 == 2)
            ++*(_DWORD *)(v11 + 216);
        }
        else
        {
          *(_DWORD *)(v11 - 264) += 2;
        }
        v14 = (const WTF::StringImpl **)(a1 + 16);
        if (*(_DWORD *)(v9 + 44))
        {
          v15 = 0;
          while ((WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v15) + 32), *v14, a3) & 1) == 0)
          {
            if (++v15 >= *(unsigned int *)(v9 + 44))
              goto LABEL_18;
          }
          if (v15 >= *(unsigned int *)(v9 + 44))
            goto LABEL_191;
          v60 = *(_QWORD **)(*(_QWORD *)(v9 + 32) + 8 * v15);
          v61 = (_DWORD *)v60[4];
          if (v61)
            *v61 += 2;
          v62 = v60[5];
          v63 = v60[6];
          v64 = *(unsigned int **)(v9 + 56);
          v65 = v64 + 2;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 + 1, v65));
          v67 = WTF::fastMalloc((WTF *)0x48);
          v68 = v67;
          *(_DWORD *)(v67 + 24) = 1;
          v69 = v67 + 24;
          if (!*(_BYTE *)(v11 + 178))
          {
            v70 = v11 - 288;
            v71 = *(_QWORD *)(v11 + 416);
            if (v71)
            {
              v72 = *(_QWORD *)(v71 + 8);
              if (v72)
                v70 = v72;
            }
            v12 = v70 + 192;
          }
          *(_QWORD *)v67 = &off_1E33A18C0;
          *(_QWORD *)(v67 + 8) = 0;
          WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v67, (WebCore::ScriptExecutionContext *)v12);
          *(_QWORD *)v68 = &off_1E33A0540;
          *(_QWORD *)(v68 + 16) = 0;
          if (*(_BYTE *)(v12 + 278))
          {
LABEL_191:
            __break(0xC471u);
            JUMPOUT(0x1952F63E8);
          }
          v145 = (WTF *)v68;
          WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v12 + 128), (uint64_t *)&v145, (uint64_t)v151);
          *(_QWORD *)v68 = &off_1E33541C8;
          *(_QWORD *)(v68 + 32) = v61;
          *(_QWORD *)(v68 + 40) = v62;
          *(_QWORD *)(v68 + 48) = v63;
          *(_QWORD *)(v68 + 56) = v64;
          *(_BYTE *)(v68 + 64) = 0;
          (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v64 + 64))(v64, v62, v63);
          WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v68);
          WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMCache>>(*(_QWORD *)(a1 + 24), (WTF *)v68);
          result = (unsigned int *)WTF::RefCounted<WebCore::DOMCache>::deref(v69, v73);
          goto LABEL_159;
        }
LABEL_18:
        v16 = *(_QWORD *)(v9 + 56);
        WebCore::DOMCacheStorage::origin((WebCore::DOMCacheStorage *)v151, (WTF::StringImpl *)v9);
        if (!v156)
          goto LABEL_174;
        (*(void (**)(unsigned int **__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v16 + 16))(&v133, v16, v151, a1 + 16);
        if (v156)
        {
          if (v155 != -1)
            ((void (*)(WTF **, _BYTE *))off_1E3353590[v155])(&v145, v154);
          v155 = -1;
          if (v153 != -1)
            ((void (*)(WTF **, unsigned __int8 *))off_1E3353590[v153])(&v145, v151);
        }
        v129 = v9;
        v19 = *v14;
        if (*v14)
          *(_DWORD *)v19 += 2;
        v20 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        v130 = v19;
        *(_QWORD *)&v131 = v20;
        v21 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 1;
        ++*(_DWORD *)(v9 + 24);
        *(_QWORD *)(v21 + 8) = v9;
        ++*(_QWORD *)(v9 + 16);
        *((_QWORD *)&v131 + 1) = v21;
        v22 = *(_QWORD *)(v9 + 56);
        v23 = (unsigned int *)(v22 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
        WebCore::DOMCacheStorage::origin((WebCore::DOMCacheStorage *)v151, (WTF::StringImpl *)v9);
        if (v156)
        {
          v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
          *v25 = v22;
          *((_BYTE *)v25 + 8) = 0;
          v26 = v25 + 1;
          *((_DWORD *)v25 + 8) = -1;
          v27 = v153;
          if (v153 != -1)
          {
            ((void (*)(WTF **, _QWORD *, unsigned __int8 *))off_1E33535C8[v153])(&v145, v26, v151);
            *((_DWORD *)v25 + 8) = v27;
          }
          *((_BYTE *)v25 + 40) = 0;
          *((_DWORD *)v25 + 16) = -1;
          v28 = v155;
          if (v155 != -1)
          {
            ((void (*)(WTF **))off_1E33535C8[v155])(&v145);
            *((_DWORD *)v25 + 16) = v28;
          }
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v25 + 80))(*v25, v26);
          v132 = v25;
          v9 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          v29 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v29 = 1;
          *(_QWORD *)(v29 + 8) = v9;
          v17 = *(unsigned int **)v9;
          *(_QWORD *)v9 = v29;
          if (!v17)
          {
            do
LABEL_37:
              v32 = __ldaxr((unsigned int *)v29);
            while (__stlxr(v32 + 1, (unsigned int *)v29));
LABEL_38:
            v128 = (uint64_t)v133;
            v33 = *(WTF::FunctionDispatcher **)(v11 + 192);
            if (!v33)
            {
              v33 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
              v34 = 1;
              *((_DWORD *)v33 + 2) = 1;
              v35 = WTF::FunctionDispatcher::FunctionDispatcher(v33);
              *(_QWORD *)v35 = off_1E33A7800;
              v36 = *(_OWORD *)(v11 + 144);
              *(_OWORD *)(v35 + 16) = *(_OWORD *)(v11 + 128);
              *(_OWORD *)(v35 + 32) = v36;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 64))(v11 - 96))
              {
                v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v37)
                  v37 = WTF::Thread::initializeCurrentTLS(0);
                v34 = *(_DWORD *)(v37 + 48);
              }
              *((_DWORD *)v33 + 12) = v34;
              v38 = *(_QWORD *)(v11 + 192);
              *(_QWORD *)(v11 + 192) = v33;
              if (v38)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
                v33 = *(WTF::FunctionDispatcher **)(v11 + 192);
              }
            }
            v39 = *(_QWORD *)(v11 + 8);
            if (v39)
              goto LABEL_195;
            v39 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v39 = 1;
            *(_QWORD *)(v39 + 8) = v11;
            v124 = *(unsigned int **)(v11 + 8);
            *(_QWORD *)(v11 + 8) = v39;
            if (!v124)
              goto LABEL_195;
            do
            {
              v125 = __ldaxr(v124);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v124));
            if (!v126)
            {
              atomic_store(1u, v124);
              WTF::fastFree((WTF *)v124, v123);
            }
            v39 = *(_QWORD *)(v11 + 8);
            if (v39)
            {
LABEL_195:
              do
                v40 = __ldaxr((unsigned int *)v39);
              while (__stlxr(v40 + 1, (unsigned int *)v39));
            }
            v136 = 0;
            v42 = v129;
            v41 = v130;
            v137[0] = v129;
            if (v130)
              *(_DWORD *)v130 += 2;
            v127 = v131;
            v131 = 0u;
            v43 = v132;
            v132 = 0;
            v134 = 0u;
            v137[1] = v41;
            v135 = 0;
            LOBYTE(v146) = 0;
            v147[0] = v42;
            if (v41)
              *(_DWORD *)v41 += 2;
            v147[1] = v41;
            v138 = 0uLL;
            v139 = 0uLL;
            v44 = WTF::fastMalloc((WTF *)0x50);
            (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v33 + 32))(v33);
            v45 = WTF::fastMalloc((WTF *)0x48);
            *(_QWORD *)v45 = off_1E3353F18;
            *(_QWORD *)(v45 + 8) = v39;
            v145 = 0;
            *(_BYTE *)(v45 + 16) = 0;
            *(_QWORD *)(v45 + 24) = v42;
            if (v41)
              *(_DWORD *)v41 += 2;
            *(_QWORD *)(v45 + 32) = v41;
            *(_OWORD *)(v45 + 40) = v127;
            v148 = 0u;
            *(_QWORD *)(v45 + 56) = v43;
            *(_QWORD *)(v45 + 64) = v9;
            v149 = 0;
            v150 = 0;
            *(_DWORD *)(v44 + 8) = 1;
            *(_QWORD *)(v44 + 16) = v33;
            *(_OWORD *)(v44 + 24) = 0u;
            *(_QWORD *)(v44 + 40) = "enqueueTaskWhenSettled";
            *(_QWORD *)(v44 + 48) = 0;
            *(_WORD *)(v44 + 56) = 0;
            *(_QWORD *)v44 = &off_1E3353F68;
            v47 = (unsigned int *)(v128 + 8);
            *(_QWORD *)(v44 + 64) = 0;
            *(_QWORD *)(v44 + 72) = v45;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
            v140 = (unsigned int *)v128;
            v141 = (unsigned int *)v44;
            v142 = v134;
            v143 = "enqueueTaskWhenSettled";
            v144 = 0;
            v49 = v150;
            v150 = 0;
            if (v49)
            {
              v50 = (unsigned int *)*((_QWORD *)v49 + 1);
              *((_QWORD *)v49 + 1) = 0;
              if (v50)
              {
                v51 = v50 + 2;
                do
                {
                  v52 = __ldaxr(v51);
                  v53 = v52 - 1;
                }
                while (__stlxr(v53, v51));
                if (!v53)
                {
                  atomic_store(1u, v50 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
                }
              }
              if (*(_QWORD *)v49)
              {
                *(_QWORD *)(*(_QWORD *)v49 + 8) = 0;
                v54 = *(unsigned int **)v49;
                *(_QWORD *)v49 = 0;
                if (v54)
                {
                  do
                  {
                    v55 = __ldaxr(v54);
                    v56 = v55 - 1;
                  }
                  while (__stlxr(v56, v54));
                  if (!v56)
                  {
                    atomic_store(1u, v54);
                    WTF::fastFree((WTF *)v54, v46);
                  }
                }
              }
              else
              {
                *(_QWORD *)v49 = 0;
              }
              WTF::fastFree(v49, v46);
            }
            WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(v147, v46);
            v76 = (unsigned int *)v145;
            v145 = 0;
            if (v76)
            {
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
              {
                atomic_store(1u, v76);
                WTF::fastFree((WTF *)v76, v75);
              }
            }
            v79 = (WTF *)*((_QWORD *)&v139 + 1);
            *((_QWORD *)&v139 + 1) = 0;
            if (v79)
            {
              v80 = (unsigned int *)*((_QWORD *)v79 + 1);
              *((_QWORD *)v79 + 1) = 0;
              if (v80)
              {
                v81 = v80 + 2;
                do
                {
                  v82 = __ldaxr(v81);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, v81));
                if (!v83)
                {
                  atomic_store(1u, v80 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
                }
              }
              if (*(_QWORD *)v79)
              {
                *(_QWORD *)(*(_QWORD *)v79 + 8) = 0;
                v84 = *(unsigned int **)v79;
                *(_QWORD *)v79 = 0;
                if (v84)
                {
                  do
                  {
                    v85 = __ldaxr(v84);
                    v86 = v85 - 1;
                  }
                  while (__stlxr(v86, v84));
                  if (!v86)
                  {
                    atomic_store(1u, v84);
                    WTF::fastFree((WTF *)v84, v75);
                  }
                }
              }
              else
              {
                *(_QWORD *)v79 = 0;
              }
              WTF::fastFree(v79, v75);
            }
            WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(v137, v75);
            v88 = (unsigned int *)v135;
            v135 = 0;
            if (!v88)
              goto LABEL_115;
            do
            {
              v89 = __ldaxr(v88);
              v90 = v89 - 1;
            }
            while (__stlxr(v90, v88));
            if (!v90)
            {
              atomic_store(1u, v88);
              WTF::fastFree((WTF *)v88, v87);
              if (!v29)
                goto LABEL_129;
            }
            else
            {
LABEL_115:
              if (!v29)
                goto LABEL_129;
            }
            v87 = *(void **)(v29 + 8);
            if (v87)
            {
              WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(v11 + 200, (uint64_t *)v87, (uint64_t)&v145);
              v91 = *(_QWORD *)(v29 + 8);
              v92 = v141;
              v93 = v141 + 2;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 + 1, v93));
              v95 = *(unsigned int **)(v91 + 8);
              *(_QWORD *)(v91 + 8) = v92;
              if (v95)
              {
                v96 = v95 + 2;
                do
                {
                  v97 = __ldaxr(v96);
                  v98 = v97 - 1;
                }
                while (__stlxr(v98, v96));
                if (!v98)
                {
                  atomic_store(1u, v95 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 8))(v95);
                }
              }
              v99 = (WTF *)v141;
              v141 = 0;
              v145 = v99;
              WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v140, &v145, (WTF::Logger::LogSiteIdentifier *)&v142);
              v100 = (unsigned int *)v145;
              v145 = 0;
              if (v100)
              {
                v101 = v100 + 2;
                do
                {
                  v102 = __ldaxr(v101);
                  v103 = v102 - 1;
                }
                while (__stlxr(v103, v101));
                if (!v103)
                {
                  atomic_store(1u, v100 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 8))(v100);
                }
              }
            }
LABEL_129:
            v104 = (WTF *)v141;
            if (v141)
            {
              v141 = 0;
              v145 = v104;
              WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v140, &v145, (WTF::Logger::LogSiteIdentifier *)&v142);
              v105 = (unsigned int *)v145;
              v145 = 0;
              if (v105)
              {
                v106 = v105 + 2;
                do
                {
                  v107 = __ldaxr(v106);
                  v108 = v107 - 1;
                }
                while (__stlxr(v108, v106));
                if (!v108)
                {
                  atomic_store(1u, v105 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v105 + 8))(v105);
                }
              }
              v109 = v141;
              v141 = 0;
              if (v109)
              {
                v110 = v109 + 2;
                do
                {
                  v111 = __ldaxr(v110);
                  v112 = v111 - 1;
                }
                while (__stlxr(v112, v110));
                if (!v112)
                {
                  atomic_store(1u, v109 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 8))(v109);
                }
              }
            }
            else
            {
              v141 = 0;
            }
            v113 = v140;
            v140 = 0;
            if (!v113)
              goto LABEL_145;
            v114 = v113 + 2;
            do
            {
              v115 = __ldaxr(v114);
              v116 = v115 - 1;
            }
            while (__stlxr(v116, v114));
            if (!v116)
            {
              atomic_store(1u, v113 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 16))(v113);
              if (v29)
              {
                do
                {
LABEL_146:
                  v117 = __ldaxr((unsigned int *)v29);
                  v118 = v117 - 1;
                }
                while (__stlxr(v118, (unsigned int *)v29));
                if (!v118)
                {
                  atomic_store(1u, (unsigned int *)v29);
                  WTF::fastFree((WTF *)v29, v87);
                }
              }
            }
            else
            {
LABEL_145:
              if (v29)
                goto LABEL_146;
            }
            WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(&v129, v87);
            if (v156)
            {
              if (v155 != -1)
                ((void (*)(WTF **, _BYTE *))off_1E3353590[v155])(&v145, v154);
              v155 = -1;
              if (v153 != -1)
                ((void (*)(WTF **, unsigned __int8 *))off_1E3353590[v153])(&v145, v151);
            }
            result = v133;
            v133 = 0;
            if (result)
            {
              v119 = result + 2;
              do
              {
                v120 = __ldaxr(v119);
                v121 = v120 - 1;
              }
              while (__stlxr(v121, v119));
              if (!v121)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
LABEL_159:
            v122 = *(unsigned __int8 *)(v11 + 178);
            if (*(_BYTE *)(v11 + 178))
            {
              if (v122 == 1)
              {
                if (*(_DWORD *)(v11 + 216) == 1)
                  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 40))(v11 - 96);
                else
                  --*(_DWORD *)(v11 + 216);
              }
              else if (v122 == 2)
              {
                return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v11 + 216));
              }
            }
            else if (*(_DWORD *)(v11 - 264) == 2)
            {
              if ((*(_WORD *)(v11 - 258) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)(v11 - 288), v74);
            }
            else
            {
              *(_DWORD *)(v11 - 264) -= 2;
            }
            return result;
          }
          do
          {
            v30 = __ldaxr(v17);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v17));
          if (v31)
          {
LABEL_36:
            v29 = *(_QWORD *)v9;
            if (!*(_QWORD *)v9)
              goto LABEL_38;
            goto LABEL_37;
          }
        }
        else
        {
LABEL_174:
          __break(1u);
        }
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v18);
        goto LABEL_36;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v145) = 33;
    v57 = *(_QWORD *)(a1 + 24);
    v58 = v146;
    v146 = 0;
    v135 = 0;
    v151[0] = 33;
    if (v58)
      *(_DWORD *)v58 += 2;
    v152 = v58;
    WebCore::DeferredPromise::reject(v57, v151, 0, &v135);
    v59 = v152;
    v152 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::destroy(v59, v7);
        if (!v58)
          goto LABEL_74;
        goto LABEL_72;
      }
      *(_DWORD *)v59 -= 2;
    }
    if (!v58)
      goto LABEL_74;
LABEL_72:
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v7);
    else
      *(_DWORD *)v58 -= 2;
LABEL_74:
    result = (unsigned int *)v146;
    v146 = 0;
    if (result)
    {
      if (*result != 2)
      {
        *result -= 2;
        return result;
      }
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    }
    return result;
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)a2;
  v6 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v145 = 0;
  v151[0] = v5;
  if (v6)
    *v6 += 2;
  v152 = (WTF::StringImpl *)v6;
  WebCore::DeferredPromise::reject(v4, v151, 0, &v145);
  result = (unsigned int *)v152;
  v152 = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      if (v6)
        goto LABEL_8;
      return result;
    }
    *result -= 2;
  }
  if (v6)
  {
LABEL_8:
    if (*v6 != 2)
    {
      *v6 -= 2;
      return result;
    }
    result = v6;
    return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMCache>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::DOMCache>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS4_5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS7_ZNS3_15DOMCacheStorage6doOpenERKNS_6StringEONS3_18DOMPromiseDeferredINS3_12IDLInterfaceINS3_8DOMCacheEEEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS3_10TaskSourceEOT0_EUlOSN_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESX_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS5_S6_EEE_vJS1A_EED1Ev(_QWORD *a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *a1 = off_1E3353F18;
  v3 = (WTF *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(a1 + 3, a2);
  v12 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS4_5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS7_ZNS3_15DOMCacheStorage6doOpenERKNS_6StringEONS3_18DOMPromiseDeferredINS3_12IDLInterfaceINS3_8DOMCacheEEEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS3_10TaskSourceEOT0_EUlOSN_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESX_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS5_S6_EEE_vJS1A_EED0Ev(WTF *a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)a1 = off_1E3353F18;
  v3 = (WTF *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1((_QWORD *)a1 + 3, a2);
  v12 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
  }
  return WTF::fastFree(a1, v11);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS4_5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS7_ZNS3_15DOMCacheStorage6doOpenERKNS_6StringEONS3_18DOMPromiseDeferredINS3_12IDLInterfaceINS3_8DOMCacheEEEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEENS3_10TaskSourceEOT0_EUlOSN_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESX_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS5_S6_EEE_vJS1A_EE4callES1A_(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  __int128 v25;
  _QWORD v26[5];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 64);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v15 = *(_DWORD **)(a1 + 32);
      v26[0] = v16;
      if (v15)
        *v15 += 2;
      v26[1] = v15;
      v25 = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      v17 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      v18 = a2[1];
      v27 = *a2;
      v28 = v18;
      v19 = WTF::fastMalloc((WTF *)0x50);
      *(_QWORD *)v19 = off_1E3353F40;
      *(_QWORD *)(v19 + 8) = v16;
      if (v15)
        *v15 += 2;
      *(_QWORD *)(v19 + 16) = v15;
      *(_OWORD *)(v19 + 24) = v25;
      memset(&v26[2], 0, 24);
      *(_QWORD *)(v19 + 40) = v17;
      v20 = v28;
      *(_OWORD *)(v19 + 48) = v27;
      *(_OWORD *)(v19 + 64) = v20;
      v29 = v19;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, &v29);
      v22 = v29;
      v29 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      result = (unsigned int *)WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(v26, v21);
      v24 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v24 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v24 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v23);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS2_14DOMCacheEngine30CacheIdentifierOperationResultENS6_5ErrorELj0EEEZNS2_15DOMCacheStorage6doOpenERKNS_6StringEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_8DOMCacheEEEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEENS2_10TaskSourceEOT0_ENUlOSM_E_clINSt12experimental15fundamentals_v38expectedIS7_S8_EEEEDaSW_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353F40;
  WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS2_14DOMCacheEngine30CacheIdentifierOperationResultENS6_5ErrorELj0EEEZNS2_15DOMCacheStorage6doOpenERKNS_6StringEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_8DOMCacheEEEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEENS2_10TaskSourceEOT0_ENUlOSM_E_clINSt12experimental15fundamentals_v38expectedIS7_S8_EEEEDaSW_EUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353F40;
  WebCore::DOMCacheStorage::doOpen(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::DOMCache>> &&)::$_1::~$_1((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS2_14DOMCacheEngine30CacheIdentifierOperationResultENS6_5ErrorELj0EEEZNS2_15DOMCacheStorage6doOpenERKNS_6StringEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_8DOMCacheEEEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEENS2_10TaskSourceEOT0_ENUlOSM_E_clINSt12experimental15fundamentals_v38expectedIS7_S8_EEEEDaSW_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  objc_class *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = (unsigned __int8 *)(v4 - 96);
      v6 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
      v7 = *(_DWORD *)(a1 + 72);
      if (v7)
      {
        v8 = 0;
        goto LABEL_9;
      }
      if (!*(_BYTE *)(a1 + 64))
        goto LABEL_53;
      v15 = *(_QWORD *)(a1 + 16);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 4);
        *(_DWORD *)v15 += 2;
        if (v16 < 0)
        {
LABEL_95:
          v46 = 0;
          goto LABEL_96;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = __OFADD__(v16, 29);
      v18 = v16 + 29;
      if (v17 || __OFADD__(v18, 26))
        goto LABEL_95;
      v19 = !v15 || (*(_BYTE *)(v15 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v18 + 26), v19, (int8x16_t *)"There was an error making ", 0x1Au, v15, (int8x16_t *)" persistent on the filesystem", 0x1Du, &v46);
      if (!v46)
        goto LABEL_96;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v5 + 248))(v4 - 96, 1, 2, &v46, 0);
      v25 = v46;
      v46 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, v24);
          if (v15)
          {
LABEL_51:
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v15, v24);
            else
              *(_DWORD *)v15 -= 2;
          }
LABEL_53:
          v26 = *(_DWORD **)(a1 + 16);
          if (v26)
            *v26 += 2;
          if (*(_DWORD *)(a1 + 72))
          {
LABEL_94:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_95;
          }
          v27 = *(_QWORD *)(a1 + 48);
          v28 = *(_QWORD *)(a1 + 56);
          v29 = *(unsigned int **)(v2 + 56);
          v30 = v29 + 2;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          v32 = WTF::fastMalloc((WTF *)0x48);
          v33 = v32;
          *(_DWORD *)(v32 + 24) = 1;
          v34 = v4 - 96;
          if (!*(_BYTE *)(v4 + 178))
          {
            v35 = v4 - 288;
            v36 = *(_QWORD *)(v4 + 416);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 8);
              if (v37)
                v35 = v37;
            }
            v34 = v35 + 192;
          }
          *(_QWORD *)v32 = &off_1E33A18C0;
          *(_QWORD *)(v32 + 8) = 0;
          WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v32, (WebCore::ScriptExecutionContext *)v34);
          *(_QWORD *)v33 = &off_1E33A0540;
          *(_QWORD *)(v33 + 16) = 0;
          if (!*(_BYTE *)(v34 + 278))
          {
            v43 = v33;
            WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v34 + 128), &v43, (uint64_t)&v46);
            *(_QWORD *)v33 = &off_1E33541C8;
            *(_QWORD *)(v33 + 32) = v26;
            *(_QWORD *)(v33 + 40) = v27;
            *(_QWORD *)(v33 + 48) = v28;
            *(_QWORD *)(v33 + 56) = v29;
            *(_BYTE *)(v33 + 64) = 0;
            (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v29 + 64))(v29, v27, v28);
            v46 = (WTF::StringImpl *)v33;
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v33);
            result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMCache>>(*(_QWORD *)(a1 + 24), (WTF *)v33);
            v38 = *(unsigned int *)(v2 + 44);
            if ((_DWORD)v38 == *(_DWORD *)(v2 + 40))
            {
              result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v2 + 32), v38 + 1, (unint64_t)&v46);
              v39 = *(unsigned int *)(v2 + 44);
              v40 = *(_QWORD *)(v2 + 32);
              v41 = *(_QWORD *)result;
              *(_QWORD *)result = 0;
              *(_QWORD *)(v40 + 8 * v39) = v41;
              v42 = v46;
              *(_DWORD *)(v2 + 44) = v39 + 1;
              v46 = 0;
              if (v42)
                result = (WTF::StringImpl *)WTF::RefCounted<WebCore::DOMCache>::deref((uint64_t)v42 + 24, v11);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v38) = v33;
              *(_DWORD *)(v2 + 44) = v38 + 1;
            }
            goto LABEL_22;
          }
LABEL_96:
          __break(0xC471u);
          JUMPOUT(0x1952F6F68);
        }
        *(_DWORD *)v25 -= 2;
      }
      if (v15)
        goto LABEL_51;
      goto LABEL_53;
    }
  }
  v7 = *(_DWORD *)(a1 + 72);
  if (v7)
  {
    v5 = 0;
    v8 = 1;
LABEL_9:
    if (v7 == 1)
    {
      WebCore::DOMCacheEngine::convertToExceptionAndLog((char *)&v43, (uint64_t)v5, *(unsigned __int8 *)(a1 + 48));
      v9 = *(_QWORD *)(a1 + 24);
      v10 = v44;
      v44 = 0;
      v45 = 0;
      LOBYTE(v46) = v43;
      if (v10)
        *(_DWORD *)v10 += 2;
      v47 = v10;
      WebCore::DeferredPromise::reject(v9, (unsigned __int8 *)&v46, 0, &v45);
      v12 = v47;
      v47 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v11);
          if (v10)
          {
LABEL_16:
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v11);
            else
              *(_DWORD *)v10 -= 2;
          }
LABEL_18:
          result = v44;
          v44 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
              if ((v8 & 1) != 0)
                return result;
              goto LABEL_22;
            }
            *(_DWORD *)result -= 2;
          }
          if ((v8 & 1) != 0)
            return result;
LABEL_22:
          v14 = v5[274];
          if (v5[274])
          {
            if (v14 == 1)
            {
              if (*((_DWORD *)v5 + 78) == 1)
                return (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 40))(v5);
              else
                --*((_DWORD *)v5 + 78);
            }
            else if (v14 == 2)
            {
              return (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v5 + 78);
            }
          }
          else if (*((_DWORD *)v5 - 42) == 2)
          {
            if ((*((_WORD *)v5 - 81) & 0x400) == 0)
              return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v11);
          }
          else
          {
            *((_DWORD *)v5 - 42) -= 2;
          }
          return result;
        }
        *(_DWORD *)v12 -= 2;
      }
      if (v10)
        goto LABEL_16;
      goto LABEL_18;
    }
    goto LABEL_94;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v43) = 33;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = v44;
  v44 = 0;
  v45 = 0;
  LOBYTE(v46) = 33;
  if (v21)
    *(_DWORD *)v21 += 2;
  v47 = v21;
  WebCore::DeferredPromise::reject(v20, (unsigned __int8 *)&v46, 0, &v45);
  v23 = v47;
  v47 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v22);
      if (!v21)
        goto LABEL_42;
      goto LABEL_40;
    }
    *(_DWORD *)v23 -= 2;
  }
  if (!v21)
    goto LABEL_42;
LABEL_40:
  if (*(_DWORD *)v21 == 2)
    WTF::StringImpl::destroy(v21, v22);
  else
    *(_DWORD *)v21 -= 2;
LABEL_42:
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E3353F68;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3353F98;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3353F68;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3353F98;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 24);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 136) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v70);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 88))
  {
    result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 104))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 96), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 108);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 96);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 96);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 108) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  _QWORD *v28;
  _OWORD v29[2];

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 137));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E3354100;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      *(_QWORD *)&v29[0] = v12;
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 16))(v7, v29);
      result = *(unsigned __int8 **)&v29[0];
      *(_QWORD *)&v29[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    *(_QWORD *)&v29[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v29, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 88);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 88) != 1)
      goto LABEL_60;
    v25 = *(_OWORD *)(a2 + 72);
    v29[0] = *(_OWORD *)(a2 + 56);
    v29[1] = v25;
    v26 = __ldxr(v17);
    if (v26 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _OWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 88) != 2)
  {
LABEL_60:
    v28 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v28);
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(v29, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _OWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3354100;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3354100;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  _OWORD v19[2];

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 88);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 88) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v19, v14);
            (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_41:
          v18 = std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::remove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(v18);
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 88) != 1)
          goto LABEL_41;
        v16 = *(_OWORD *)(v10 + 72);
        v19[0] = *(_OWORD *)(v10 + 56);
        v19[1] = v16;
        v17 = __ldxr(v11);
        if (v17 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  *(_QWORD *)&v19[0] = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::remove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E3353FC8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::remove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E3353FC8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::remove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, char *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  objc_class *v24;
  WTF::FunctionDispatcher *v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::NativePromiseBase *v48;
  void *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  void *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  objc_class *v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  objc_class *v82;
  unsigned int *v83;
  __int128 v84;
  const char *v85;
  uint64_t v86;
  WTF::NativePromiseBase *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  if (a2[16])
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *a2;
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v82 = 0;
    LOBYTE(v87) = v5;
    if (v6)
      *(_DWORD *)v6 += 2;
    v88 = v6;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v87, 0, &v82);
    result = (uint64_t)v88;
    v88 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        if (!v6)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v6)
      return result;
LABEL_8:
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v7);
    *(_DWORD *)v6 -= 2;
    return result;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v9 + 44))
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 24), 0);
  v10 = 0;
  while (1)
  {
    result = WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) + 32), *(const WTF::StringImpl **)(a1 + 16), a3);
    if ((result & 1) != 0)
      break;
    if (++v10 >= *(unsigned int *)(v9 + 44))
      return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 24), 0);
  }
  v11 = *(_QWORD *)(v9 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v13 = v12 - 96;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  if (v10 >= *(unsigned int *)(v9 + 44))
  {
    __break(0xC471u);
    return result;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10);
  (*(void (**)(objc_class **__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v9 + 56) + 24))(&v75, *(_QWORD *)(v9 + 56), *(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48));
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v16 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  ++*(_DWORD *)(v9 + 24);
  *(_QWORD *)(v16 + 8) = v9;
  ++*(_QWORD *)(v9 + 16);
  v17 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
  *v17 = 0;
  v17[1] = 0;
  v19 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v17;
  v20 = *v17;
  *v17 = (unsigned int *)v19;
  if (!v20)
    goto LABEL_93;
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v18);
  }
  v19 = (uint64_t)*v17;
  if (*v17)
  {
LABEL_93:
    do
      v23 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v23 + 1, (unsigned int *)v19));
  }
  v24 = v75;
  v25 = *(WTF::FunctionDispatcher **)(v13 + 288);
  if (!v25)
  {
    v25 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
    v26 = 1;
    *((_DWORD *)v25 + 2) = 1;
    v27 = WTF::FunctionDispatcher::FunctionDispatcher(v25);
    *(_QWORD *)v27 = off_1E33A7800;
    v28 = *(_OWORD *)(v13 + 240);
    *(_OWORD *)(v27 + 16) = *(_OWORD *)(v13 + 224);
    *(_OWORD *)(v27 + 32) = v28;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13))
    {
      v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v29)
        v29 = WTF::Thread::initializeCurrentTLS(0);
      v26 = *(_DWORD *)(v29 + 48);
    }
    *((_DWORD *)v25 + 12) = v26;
    v30 = *(_QWORD *)(v13 + 288);
    *(_QWORD *)(v13 + 288) = v25;
    if (v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      v25 = *(WTF::FunctionDispatcher **)(v13 + 288);
    }
  }
  v31 = *(_QWORD *)(v13 + 104);
  if (v31)
    goto LABEL_94;
  v31 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)(v31 + 8) = v13 + 96;
  v72 = *(unsigned int **)(v13 + 104);
  *(_QWORD *)(v13 + 104) = v31;
  if (!v72)
    goto LABEL_94;
  do
  {
    v73 = __ldaxr(v72);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v72));
  if (!v74)
  {
    atomic_store(1u, v72);
    WTF::fastFree((WTF *)v72, v71);
  }
  v31 = *(_QWORD *)(v13 + 104);
  if (v31)
  {
LABEL_94:
    do
      v32 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v32 + 1, (unsigned int *)v31));
  }
  v78 = 0;
  v76 = 0u;
  v77 = 0;
  LOBYTE(v88) = 0;
  v89 = v9;
  v79 = v9;
  v80 = 0;
  v81 = 0u;
  v33 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v25 + 32))(v25);
  v34 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v34 = off_1E3353FF0;
  *(_QWORD *)(v34 + 8) = v31;
  v87 = 0;
  *(_BYTE *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = v9;
  *(_QWORD *)(v34 + 32) = v15;
  v90 = 0u;
  *(_QWORD *)(v34 + 40) = v16;
  *(_QWORD *)(v34 + 48) = v17;
  v91 = 0;
  *(_DWORD *)(v33 + 8) = 1;
  *(_QWORD *)(v33 + 16) = v25;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_QWORD *)(v33 + 40) = "enqueueTaskWhenSettled";
  *(_QWORD *)(v33 + 48) = 0;
  *(_WORD *)(v33 + 56) = 0;
  *(_QWORD *)v33 = &off_1E3354040;
  v36 = (unsigned int *)((char *)v24 + 8);
  *(_QWORD *)(v33 + 64) = 0;
  *(_QWORD *)(v33 + 72) = v34;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 + 1, v36));
  v82 = v24;
  v83 = (unsigned int *)v33;
  v84 = v76;
  v85 = "enqueueTaskWhenSettled";
  v86 = 0;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1>(WTF::Ref<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1 &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v87, v35);
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1>(WTF::Ref<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1 &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)&v77, v38);
  if (v19)
  {
    v39 = *(uint64_t **)(v19 + 8);
    if (v39)
    {
      WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(v13 + 296, v39, (uint64_t)&v87);
      v40 = *(_QWORD *)(v19 + 8);
      v41 = v83;
      v42 = v83 + 2;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
      v44 = *(unsigned int **)(v40 + 8);
      *(_QWORD *)(v40 + 8) = v41;
      if (v44)
      {
        v45 = v44 + 2;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v44 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
        }
      }
      v48 = (WTF::NativePromiseBase *)v83;
      v83 = 0;
      v87 = v48;
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v82, &v87, (WTF::Logger::LogSiteIdentifier *)&v84);
      v50 = (unsigned int *)v87;
      v87 = 0;
      if (v50)
      {
        v51 = v50 + 2;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v50 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
        }
      }
      v33 = (uint64_t)v83;
      if (!v83)
      {
        v83 = 0;
        goto LABEL_64;
      }
      v24 = v82;
    }
  }
  v83 = 0;
  v87 = (WTF::NativePromiseBase *)v33;
  WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::maybeSettle((uint64_t)v24, &v87, (WTF::Logger::LogSiteIdentifier *)&v84);
  v54 = (unsigned int *)v87;
  v87 = 0;
  if (v54)
  {
    v55 = v54 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v54 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
    }
  }
  v58 = v83;
  v83 = 0;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
LABEL_64:
  v62 = (unsigned int *)v82;
  v82 = 0;
  if (!v62)
    goto LABEL_68;
  v63 = v62 + 2;
  do
  {
    v64 = __ldaxr(v63);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v63));
  if (!v65)
  {
    atomic_store(1u, v62 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 16))(v62);
    if (v19)
    {
      do
      {
LABEL_69:
        v66 = __ldaxr((unsigned int *)v19);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, (unsigned int *)v19));
      if (!v67)
      {
        atomic_store(1u, (unsigned int *)v19);
        WTF::fastFree((WTF *)v19, v49);
      }
    }
  }
  else
  {
LABEL_68:
    if (v19)
      goto LABEL_69;
  }
  result = (uint64_t)v75;
  v75 = 0;
  if (result)
  {
    v68 = (unsigned int *)(result + 8);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, (unsigned int *)(result + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1>(WTF::Ref<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1 &&)::{lambda(WTF::Ref&&)#1}::~TaskSource(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;

  v3 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v11 = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v17 = *((_QWORD *)v11 + 1);
      --*(_QWORD *)(v17 + 16);
      *((_QWORD *)v11 + 1) = 0;
      if (*(_DWORD *)(v17 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      else
        --*(_DWORD *)(v17 + 24);
      WTF::fastFree(v11, a2);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[4];
  }
  v13 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS6_ZNS3_15DOMCacheStorage8doRemoveERKNS_6StringEONS3_18DOMPromiseDeferredINS3_10IDLBooleanEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEENS3_10TaskSourceEOT0_EUlOSK_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS5_EEE_vJS17_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3353FF0;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1>(WTF::Ref<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1 &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS6_ZNS3_15DOMCacheStorage8doRemoveERKNS_6StringEONS3_18DOMPromiseDeferredINS3_10IDLBooleanEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEENS3_10TaskSourceEOT0_EUlOSK_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS5_EEE_vJS17_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3353FF0;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1>(WTF::Ref<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::TaskSource,WebCore::DOMCacheStorage::doRemove(WTF::String const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_1 &&)::{lambda(WTF::Ref&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS6_ZNS3_15DOMCacheStorage8doRemoveERKNS_6StringEONS3_18DOMPromiseDeferredINS3_10IDLBooleanEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEENS3_10TaskSourceEOT0_EUlOSK_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS5_EEE_vJS17_EE4callES17_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  __int128 v20;
  unsigned int *v21;

  v4 = *(_QWORD *)(a1 + 48);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v15 = *(_QWORD *)(a1 + 40);
      v20 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v16 = *a2;
      v17 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v17 = &off_1E3354018;
      *(_OWORD *)(v17 + 8) = v20;
      *(_QWORD *)(v17 + 24) = v15;
      *(_QWORD *)(v17 + 32) = v16;
      v21 = (unsigned int *)v17;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, (uint64_t *)&v21);
      result = v21;
      v21 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v19 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v19 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v19 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v18);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIbNS2_14DOMCacheEngine5ErrorELj0EEEZNS2_15DOMCacheStorage8doRemoveERKNS_6StringEONS2_18DOMPromiseDeferredINS2_10IDLBooleanEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_10TaskSourceEOT0_ENUlOSJ_E_clINSt12experimental15fundamentals_v38expectedIbS7_EEEEDaST_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;

  *a1 = &off_1E3354018;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIbNS2_14DOMCacheEngine5ErrorELj0EEEZNS2_15DOMCacheStorage8doRemoveERKNS_6StringEONS2_18DOMPromiseDeferredINS2_10IDLBooleanEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_10TaskSourceEOT0_ENUlOSJ_E_clINSt12experimental15fundamentals_v38expectedIbS7_EEEEDaST_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3354018;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIbNS2_14DOMCacheEngine5ErrorELj0EEEZNS2_15DOMCacheStorage8doRemoveERKNS_6StringEONS2_18DOMPromiseDeferredINS2_10IDLBooleanEEEE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_10TaskSourceEOT0_ENUlOSJ_E_clINSt12experimental15fundamentals_v38expectedIbS7_EEEEDaST_EUlvE_vJEE4callEv(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  char v13[8];
  WTF::StringImpl *v14;
  char v15[8];
  WTF::StringImpl *v16;
  objc_class *v17;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 36);
  if (!v3)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 16), v2 != 0);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 96;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  if (v3 != 1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(v12);
  }
  WebCore::DOMCacheEngine::convertToExceptionAndLog(v13, v6, v2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v14;
  v14 = 0;
  v17 = 0;
  v15[0] = v13[0];
  if (v8)
    *(_DWORD *)v8 += 2;
  v16 = v8;
  WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)v15, 0, &v17);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (!v8)
        goto LABEL_15;
      goto LABEL_13;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v8)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v9);
  else
    *(_DWORD *)v8 -= 2;
LABEL_15:
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E3354040;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3354070;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3354040;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3354070;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 4);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 112) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v70);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 64))
  {
    result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 80))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 72), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 84);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 72);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 72);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 84) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD *v27;
  unsigned __int8 *v28;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E3354128;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v28 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v28);
      result = v28;
      v28 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v28 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v28, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 64);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 64) != 1)
      goto LABEL_60;
    v28 = *(unsigned __int8 **)(a2 + 56);
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v28);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 64) != 2)
  {
LABEL_60:
    v27 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v27);
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v28, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3354128;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3354128;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 64);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 64) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v18, v14);
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_41:
          v17 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::keys(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDOMString>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(v17);
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 64) != 1)
          goto LABEL_41;
        v18 = *(_QWORD *)(v10 + 56);
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  v18 = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v18, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::keys(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDOMString>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33540A0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::keys(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDOMString>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33540A0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMCacheStorage::keys(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDOMString>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(WTF::StringImpl *result, char *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  objc_class *v22;

  v2 = result;
  if (a2[16])
  {
    v3 = *((_QWORD *)result + 2);
    v4 = *a2;
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v22 = 0;
    LOBYTE(v20) = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v21 = v5;
    WebCore::DeferredPromise::reject(v3, (unsigned __int8 *)&v20, 0, &v22);
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (!v5)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_8:
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
    *(_DWORD *)v5 -= 2;
    return result;
  }
  v7 = *((_QWORD *)result + 1);
  v20 = 0;
  v21 = 0;
  v8 = *(unsigned int *)(v7 + 44);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v21) = v8;
    v20 = v9;
    v10 = *(unsigned int *)(v7 + 44);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v7 + 32);
      v13 = 8 * v10;
      do
      {
        v14 = *(_DWORD **)(*(_QWORD *)(v12 + 8 * v11) + 32);
        if (v14)
          *v14 += 2;
        v15 = v11 + 1;
        *((_QWORD *)v9 + v11++) = v14;
        v13 -= 8;
      }
      while (v13);
      HIDWORD(v21) = v15;
    }
  }
  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDOMString>>(*((_QWORD *)v2 + 2), (uint64_t)&v20);
  if (HIDWORD(v21))
  {
    v17 = v20;
    v18 = 8 * HIDWORD(v21);
    do
    {
      v19 = *(WTF::StringImpl **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  result = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, v16);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDOMString>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(uint64_t *a1, const char **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  const char **v16;
  const char *v17;
  const char *v18;
  int v19;
  int i;
  const char *v23;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (unsigned __int8 *)a2[1];
  if (!v4)
  {
    v14 = 0;
    goto LABEL_12;
  }
  v5 = -1640531527;
  v6 = (_DWORD)v4 - 1;
  if ((_DWORD)v4 != 1)
  {
    v7 = *a2;
    if (v6 == 1)
    {
LABEL_9:
      v5 = ((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11))
         + (((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11)) >> 17);
      goto LABEL_10;
    }
    v8 = v6 >> 1;
    v9 = *a2;
    do
    {
      v10 = v5 + *(unsigned __int8 *)v9;
      v11 = (v10 << 16) ^ (*((unsigned __int8 *)v9 + 1) << 11);
      v5 = (v11 ^ v10) + ((v11 ^ v10) >> 11);
      v9 += 2;
      --v8;
    }
    while (v8);
    if ((v6 & 1) != 0)
    {
      v7 += 2 * (v6 >> 1);
      goto LABEL_9;
    }
  }
LABEL_10:
  v12 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (!v14)
    v14 = 0x800000;
LABEL_12:
  v15 = v14 & v3;
  v16 = (const char **)(v2 + 24 * (v14 & v3));
  v17 = *v16;
  if (!*v16)
    return 0;
  v18 = *a2;
  if (!*a2)
  {
    if (v17 != (const char *)-1 && v17 == 0)
      return v16;
    for (i = 1; ; ++i)
    {
      v15 = (v15 + i) & v3;
      v16 = (const char **)(v2 + 24 * v15);
      v23 = *v16;
      if (!*v16)
        break;
      if (v23 != (const char *)-1 && v23 == 0)
        return v16;
    }
    return 0;
  }
  v19 = 1;
  while (v17 == (const char *)-1 || strcmp(v17, v18))
  {
    v15 = (v15 + v19) & v3;
    v16 = (const char **)(v2 + 24 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
      return 0;
  }
  return v16;
}

unsigned __int8 **WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>@<X0>(uint64_t *a1@<X0>, const char **a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  const char *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  const char *v25;
  unsigned __int8 **v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 **result;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  char v40;
  uint64_t v41;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (unsigned __int8 *)a2[1];
  if (v11)
  {
    v12 = -1640531527;
    v13 = (_DWORD)v11 - 1;
    if ((_DWORD)v11 == 1)
      goto LABEL_12;
    v14 = *a2;
    if (v13 != 1)
    {
      v15 = v13 >> 1;
      v16 = *a2;
      do
      {
        v17 = v12 + *(unsigned __int8 *)v16;
        v18 = (*((unsigned __int8 *)v16 + 1) << 11) ^ (v17 << 16);
        v12 = (v18 ^ v17) + ((v18 ^ v17) >> 11);
        v16 += 2;
        --v15;
      }
      while (v15);
      if ((v13 & 1) == 0)
      {
LABEL_12:
        v19 = (v12 ^ (8 * v12)) + ((v12 ^ (8 * v12)) >> 5);
        v20 = (v19 ^ (4 * v19)) + ((v19 ^ (4 * v19)) >> 15);
        v21 = v20 ^ (v20 << 10);
        if (!v21)
          v21 = 0x800000;
        goto LABEL_14;
      }
      v14 += 2 * (v13 >> 1);
    }
    v12 = ((v12 + *(unsigned __int8 *)v14) ^ ((v12 + *(unsigned __int8 *)v14) << 11))
        + (((v12 + *(unsigned __int8 *)v14) ^ ((v12 + *(unsigned __int8 *)v14) << 11)) >> 17);
    goto LABEL_12;
  }
  v21 = 0;
LABEL_14:
  v22 = v21 & v10;
  v23 = (unsigned __int8 **)(v8 + 24 * (v21 & v10));
  v24 = *v23;
  if (!*v23)
    goto LABEL_31;
  v40 = v9;
  v41 = a4;
  v25 = *a2;
  if (*a2)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v24 == (unsigned __int8 *)-1)
      {
        v26 = v23;
      }
      else if (!strcmp((const char *)v24, v25))
      {
        goto LABEL_43;
      }
      v22 = (v22 + v27) & v10;
      v23 = (unsigned __int8 **)(v8 + 24 * v22);
      v24 = *v23;
      ++v27;
    }
    while (*v23);
LABEL_29:
    a4 = v41;
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v23 = v26;
    }
LABEL_31:
    *(_OWORD *)v23 = *(_OWORD *)a2;
    v29 = *a3;
    *a3 = 0;
    result = (unsigned __int8 **)v23[2];
    v23[2] = v29;
    if (result)
      result = (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
    v31 = *a1;
    if (*a1)
      v32 = *(_DWORD *)(v31 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *a1;
    if (*a1)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_42;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_47:
        result = (unsigned __int8 **)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, v37, v23);
        v23 = result;
        v33 = *a1;
        if (*a1)
          LODWORD(v36) = *(_DWORD *)(v33 - 4);
        else
          LODWORD(v36) = 0;
        goto LABEL_54;
      }
LABEL_42:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
      goto LABEL_47;
    }
LABEL_54:
    *(_QWORD *)a4 = v23;
    *(_QWORD *)(a4 + 8) = v33 + 24 * v36;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v26 = 0;
  v28 = 1;
  while (1)
  {
    if (v24 == (unsigned __int8 *)-1)
    {
      v26 = v23;
      goto LABEL_28;
    }
    if (!v24)
      break;
LABEL_28:
    v22 = (v22 + v28) & v10;
    v23 = (unsigned __int8 **)(v8 + 24 * v22);
    v24 = *v23;
    ++v28;
    if (!*v23)
      goto LABEL_29;
  }
LABEL_43:
  if ((v40 & 1) != 0)
    v38 = 0;
  else
    v38 = *(_DWORD *)(v8 - 4);
  *(_QWORD *)v41 = v23;
  *(_QWORD *)(v41 + 8) = v8 + 24 * v38;
  *(_BYTE *)(v41 + 16) = 0;
  v39 = *a3;
  *a3 = 0;
  result = (unsigned __int8 **)v23[2];
  v23[2] = v39;
  if (result)
    return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (unsigned __int8 **)(v6 + 24 * v11);
      v14 = *v13;
      if (*v13 != (unsigned __int8 *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = v13[1];
          if (v19)
          {
            v20 = -1640531527;
            v21 = (_DWORD)v19 - 1;
            if (v21)
            {
              if (v21 == 1)
                goto LABEL_20;
              v22 = v21 >> 1;
              v23 = *v13;
              do
              {
                v24 = v20 + *v23;
                v25 = (v24 << 16) ^ (v23[1] << 11);
                v20 = (v25 ^ v24) + ((v25 ^ v24) >> 11);
                v23 += 2;
                --v22;
              }
              while (v22);
              if ((v21 & 1) != 0)
              {
                v14 += 2 * (v21 >> 1);
LABEL_20:
                v26 = (v20 + *v14) ^ ((v20 + *v14) << 11);
                v20 = v26 + (v26 >> 17);
              }
            }
            v27 = (v20 ^ (8 * v20)) + ((v20 ^ (8 * v20)) >> 5);
            v28 = (v27 ^ (4 * v27)) + ((v27 ^ (4 * v27)) >> 15);
            v29 = v28 ^ (v28 << 10);
            if (!v29)
              v29 = 0x800000;
          }
          else
          {
            v29 = 0;
          }
          v30 = 0;
          do
          {
            v31 = v29 & v18;
            v32 = (_QWORD *)(v17 + 24 * (v29 & v18));
            v29 = ++v30 + (v29 & v18);
          }
          while (*v32);
          v33 = v17 + 24 * v31;
          v36 = *(_QWORD *)(v33 + 16);
          v35 = (_QWORD *)(v33 + 16);
          v34 = v36;
          *v35 = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          *(_OWORD *)v32 = *(_OWORD *)v13;
          v37 = v6 + 24 * v11;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v35 = v38;
          v39 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (v13 == a3)
            v12 = v32;
          goto LABEL_31;
        }
        v15 = v6 + 24 * v11;
        v16 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 + 16) = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
LABEL_31:
      if (++v11 == v7)
        goto LABEL_35;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_35:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

unsigned __int8 **WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>@<X0>(uint64_t *a1@<X0>, const char **a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  const char *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  const char *v25;
  unsigned __int8 **v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 **result;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  char v40;
  uint64_t v41;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (unsigned __int8 *)a2[1];
  if (v11)
  {
    v12 = -1640531527;
    v13 = (_DWORD)v11 - 1;
    if ((_DWORD)v11 == 1)
      goto LABEL_12;
    v14 = *a2;
    if (v13 != 1)
    {
      v15 = v13 >> 1;
      v16 = *a2;
      do
      {
        v17 = v12 + *(unsigned __int8 *)v16;
        v18 = (*((unsigned __int8 *)v16 + 1) << 11) ^ (v17 << 16);
        v12 = (v18 ^ v17) + ((v18 ^ v17) >> 11);
        v16 += 2;
        --v15;
      }
      while (v15);
      if ((v13 & 1) == 0)
      {
LABEL_12:
        v19 = (v12 ^ (8 * v12)) + ((v12 ^ (8 * v12)) >> 5);
        v20 = (v19 ^ (4 * v19)) + ((v19 ^ (4 * v19)) >> 15);
        v21 = v20 ^ (v20 << 10);
        if (!v21)
          v21 = 0x800000;
        goto LABEL_14;
      }
      v14 += 2 * (v13 >> 1);
    }
    v12 = ((v12 + *(unsigned __int8 *)v14) ^ ((v12 + *(unsigned __int8 *)v14) << 11))
        + (((v12 + *(unsigned __int8 *)v14) ^ ((v12 + *(unsigned __int8 *)v14) << 11)) >> 17);
    goto LABEL_12;
  }
  v21 = 0;
LABEL_14:
  v22 = v21 & v10;
  v23 = (unsigned __int8 **)(v8 + 24 * (v21 & v10));
  v24 = *v23;
  if (!*v23)
    goto LABEL_31;
  v40 = v9;
  v41 = a4;
  v25 = *a2;
  if (*a2)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v24 == (unsigned __int8 *)-1)
      {
        v26 = v23;
      }
      else if (!strcmp((const char *)v24, v25))
      {
        goto LABEL_43;
      }
      v22 = (v22 + v27) & v10;
      v23 = (unsigned __int8 **)(v8 + 24 * v22);
      v24 = *v23;
      ++v27;
    }
    while (*v23);
LABEL_29:
    a4 = v41;
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v23 = v26;
    }
LABEL_31:
    *(_OWORD *)v23 = *(_OWORD *)a2;
    v29 = *a3;
    *a3 = 0;
    result = (unsigned __int8 **)v23[2];
    v23[2] = v29;
    if (result)
      result = (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
    v31 = *a1;
    if (*a1)
      v32 = *(_DWORD *)(v31 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *a1;
    if (*a1)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_42;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_49:
        result = (unsigned __int8 **)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, v37, v23);
        v23 = result;
        v33 = *a1;
        if (*a1)
          LODWORD(v36) = *(_DWORD *)(v33 - 4);
        else
          LODWORD(v36) = 0;
        goto LABEL_51;
      }
LABEL_42:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
      goto LABEL_49;
    }
LABEL_51:
    *(_QWORD *)a4 = v23;
    *(_QWORD *)(a4 + 8) = v33 + 24 * v36;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v26 = 0;
  v28 = 1;
  while (1)
  {
    if (v24 == (unsigned __int8 *)-1)
    {
      v26 = v23;
      goto LABEL_28;
    }
    if (!v24)
      break;
LABEL_28:
    v22 = (v22 + v28) & v10;
    v23 = (unsigned __int8 **)(v8 + 24 * v22);
    v24 = *v23;
    ++v28;
    if (!*v23)
      goto LABEL_29;
  }
LABEL_43:
  if ((v40 & 1) != 0)
    v38 = 0;
  else
    v38 = *(_DWORD *)(v8 - 4);
  *(_QWORD *)v41 = v23;
  *(_QWORD *)(v41 + 8) = v8 + 24 * v38;
  *(_BYTE *)(v41 + 16) = 0;
  v39 = *a3;
  *a3 = 0;
  result = (unsigned __int8 **)v23[2];
  v23[2] = v39;
  if (result)
    return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (unsigned __int8 **)(v6 + 24 * v11);
      v14 = *v13;
      if (*v13 != (unsigned __int8 *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = v13[1];
          if (v19)
          {
            v20 = -1640531527;
            v21 = (_DWORD)v19 - 1;
            if (v21)
            {
              if (v21 == 1)
                goto LABEL_19;
              v22 = v21 >> 1;
              v23 = *v13;
              do
              {
                v24 = v20 + *v23;
                v25 = (v24 << 16) ^ (v23[1] << 11);
                v20 = (v25 ^ v24) + ((v25 ^ v24) >> 11);
                v23 += 2;
                --v22;
              }
              while (v22);
              if ((v21 & 1) != 0)
              {
                v14 += 2 * (v21 >> 1);
LABEL_19:
                v26 = (v20 + *v14) ^ ((v20 + *v14) << 11);
                v20 = v26 + (v26 >> 17);
              }
            }
            v27 = (v20 ^ (8 * v20)) + ((v20 ^ (8 * v20)) >> 5);
            v28 = (v27 ^ (4 * v27)) + ((v27 ^ (4 * v27)) >> 15);
            v29 = v28 ^ (v28 << 10);
            if (!v29)
              v29 = 0x800000;
          }
          else
          {
            v29 = 0;
          }
          v30 = 0;
          do
          {
            v31 = v29 & v18;
            v32 = (_QWORD *)(v17 + 24 * (v29 & v18));
            v29 = ++v30 + (v29 & v18);
          }
          while (*v32);
          v33 = v17 + 24 * v31;
          v36 = *(_QWORD *)(v33 + 16);
          v35 = (_QWORD *)(v33 + 16);
          v34 = v36;
          *v35 = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          *(_OWORD *)v32 = *(_OWORD *)v13;
          v37 = v6 + 24 * v11;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v35 = v38;
          v39 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (v13 == a3)
            v12 = v32;
          goto LABEL_30;
        }
        v15 = v6 + 24 * v11;
        v16 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 + 16) = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
LABEL_30:
      if (++v11 == v7)
        goto LABEL_34;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_34:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ContactProperty>>>::convert<WebCore::ContactProperty,0ul>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  JSC::VM *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  JSC::VM *v27;

  v6 = *(JSC::VM **)(a1 + 56);
  v27 = v6;
  v22 = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v7 = *((_DWORD *)a3 + 3);
  if (v7 >= 9)
  {
    v22 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v23) == 1;
    v7 = *((_DWORD *)a3 + 3);
    if (v7)
    {
LABEL_3:
      v8 = *a3;
      v9 = v7;
      do
      {
        v10 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::ContactProperty>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*v8);
        if (*((_DWORD *)v6 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
            goto LABEL_30;
        }
        v11 = v23;
        if ((_DWORD)v23 != HIDWORD(v23) && (v24 != (WTF *)((char *)v25 + 8) ? (v12 = v24 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v24 + v23) = v10;
          LODWORD(v23) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v13) == 1)
            v22 = 1;
        }
        ++v8;
      }
      while (--v9);
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  if (v22)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v20 = v24;
    v21 = v23;
    v15 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v16 = JSC::constructArray();
      goto LABEL_22;
    }
  }
LABEL_30:
  v16 = 0;
LABEL_22:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = (WTF *)&v23;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v14);
  return v16;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ContactsManager::select(WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ContactsSelectOptions const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E33540D8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContactsManager::select(WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ContactsSelectOptions const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E33540D8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ContactsManager::select(WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ContactsSelectOptions const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v8;
  uint64_t v9;
  const WebCore::ContactInfo *v10;
  JSC::JSGlobalObject *v11;
  JSC::VM *v12;
  unsigned int v13;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  objc_class *v16;
  int v17;
  BOOL v18;
  JSValue v19;
  void *v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  objc_class *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF *v38;
  _OWORD v39[4];
  uint64_t v40;
  JSC::VM *v41;

  v3 = *((_QWORD *)result + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      *(_BYTE *)(v4 + 24) = 0;
  }
  v5 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(a2 + 16))
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = *(_QWORD *)(v5 + 32);
      if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
        v8 = 0;
      else
        v8 = *(WebCore **)v7;
      v9 = *((_QWORD *)v8 + 7);
      MEMORY[0x19AEA3294](&v33, v9);
      v11 = **(JSC::JSGlobalObject ***)(v5 + 32);
      v12 = (JSC::VM *)*((_QWORD *)v8 + 7);
      v41 = v12;
      LOBYTE(v36) = 0;
      v37 = 0x800000000;
      v38 = (WTF *)((char *)v39 + 8);
      memset(v39, 0, sizeof(v39));
      v40 = 0;
      v13 = *(_DWORD *)(a2 + 12);
      if (v13 >= 9)
      {
        LOBYTE(v36) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v37) == 1;
        v13 = *(_DWORD *)(a2 + 12);
        if (v13)
        {
LABEL_13:
          v14 = *(WebCore::JSDOMGlobalObject **)a2;
          v15 = 48 * v13;
          do
          {
            v16 = (objc_class *)WebCore::convertDictionaryToJS(v8, v11, v14, v10);
            if (*((_DWORD *)v12 + 20))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
                goto LABEL_49;
            }
            v17 = v37;
            if ((_DWORD)v37 != HIDWORD(v37) && (v38 != (WTF *)((char *)v39 + 8) ? (v18 = v38 == 0) : (v18 = 1), v18))
            {
              *((_QWORD *)v38 + v37) = v16;
              LODWORD(v37) = v17 + 1;
            }
            else
            {
              v19.super.isa = v16;
              if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v37, v19) == 1)
                LOBYTE(v36) = 1;
            }
            v14 = (WebCore::JSDOMGlobalObject *)((char *)v14 + 48);
            v15 -= 48;
          }
          while (v15);
        }
      }
      else if (v13)
      {
        goto LABEL_13;
      }
      if ((_BYTE)v36)
      {
        JSC::throwOutOfMemoryError();
      }
      else
      {
        v34 = v38;
        v35 = v37;
        v22 = (JSC::VM *)*((_QWORD *)v11 + 7);
        if (!*((_DWORD *)v22 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) == 0)
        {
          v23 = (objc_class *)JSC::constructArray();
          goto LABEL_36;
        }
      }
LABEL_49:
      v23 = 0;
LABEL_36:
      v24 = *(uint64_t **)&v39[0];
      if (*(_QWORD *)&v39[0])
      {
        v34 = (WTF *)&v37;
        v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v39[0], (uint64_t *)&v34);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v24, v27);
      }
      if (v38 != (WTF *)((char *)v39 + 8) && v38)
        WTF::fastFree(v38, v20);
      v25 = *(_QWORD *)(v9 + 16);
      if (!v25)
      {
        WebCore::DeferredPromise::callFunction(v5, (uint64_t *)v8, 0, v23);
        v25 = *(_QWORD *)(v9 + 16);
        if (!v25)
          return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v33);
      }
      v26 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v8);
      if (!(*(unsigned int (**)(_QWORD *))(*v26 + 64))(v26))
      {
LABEL_46:
        WebCore::reportException(v8, v25, 0, 0, 0);
        return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v33);
      }
      v28 = v26[43];
      if (*(_QWORD *)(v9 + 24) == v25)
      {
LABEL_63:
        *(_BYTE *)(*(_QWORD *)(v28 + 8) + 93442) = 1;
        *(_BYTE *)(v5 + 44) = 1;
        goto LABEL_46;
      }
      if (!v28)
        goto LABEL_46;
      v29 = (unsigned __int8 *)(v28 + 40);
      if (__ldaxr((unsigned __int8 *)(v28 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v29))
      {
        goto LABEL_57;
      }
      MEMORY[0x19AEA534C](v28 + 40);
LABEL_57:
      v31 = *(unsigned __int8 *)(v28 + 41);
      v32 = __ldxr(v29);
      if (v32 == 1)
      {
        if (!__stlxr(0, v29))
        {
LABEL_62:
          if (!v31)
            goto LABEL_46;
          goto LABEL_63;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v28 + 40));
      goto LABEL_62;
    }
  }
  else
  {
    v36 = 0;
    WebCore::DeferredPromise::reject(v5, (JSC::JSGlobalObject *)0x18, (JSC::JSGlobalObject *)&v36, 0);
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1952FCBD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

uint64_t WebCore::LegacyTileLayerPool::bytesBackingLayerWithPixelSize(WebCore::LegacyTileLayerPool *this, const WebCore::IntSize *a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;

  v2 = *(_DWORD *)this;
  v3 = *((_DWORD *)this + 1);
  if (*(int *)this < 0)
    v2 = -v2;
  if (v3 < 0)
    v3 = -v3;
  v4 = v3 * (unint64_t)v2;
  if ((v4 & 0xFFFFFFFF00000000) != 0 || v4 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x1952FCCD8);
  }
  return (4 * v4);
}

_QWORD *WebCore::LegacyTileLayerPool::listOfLayersWithSize(uint64_t a1, int *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  const void **v41;
  const void *v42;
  const void **v43;
  uint64_t v44;
  const void *v45;
  const void **v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v51;

  v5 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash((uint64_t *)a1, 8u, 0);
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v6 = *(_DWORD *)(v5 - 8);
    else
      v6 = 0;
    goto LABEL_31;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 & ((0xD7862706ELL * (unint64_t)(277951225 * *a2 + 95187966 * v8)) >> 4);
  v10 = (_QWORD *)(v5 + 40 * v9);
  v11 = *(_DWORD *)v10;
  v12 = *((_DWORD *)v10 + 1);
  if (*(_DWORD *)v10 != *a2 || v12 != v8)
  {
    v14 = 1;
    while (v11 | v12)
    {
      v9 = (v9 + v14) & v6;
      v10 = (_QWORD *)(v5 + 40 * v9);
      v11 = *(_DWORD *)v10;
      v12 = *((_DWORD *)v10 + 1);
      ++v14;
      if (*(_DWORD *)v10 == v7 && v12 == v8)
        goto LABEL_17;
    }
    v10 = (_QWORD *)(v5 + 40 * *(unsigned int *)(v5 - 4));
  }
LABEL_17:
  if (v10 == (_QWORD *)(v5 + 40 * *(unsigned int *)(v5 - 4)))
  {
LABEL_31:
    v23 = a2[1];
    v24 = v6 & ((0xD7862706ELL * (unint64_t)(277951225 * *a2 + 95187966 * v23)) >> 4);
    v10 = (_QWORD *)(v5 + 40 * v24);
    v25 = *(_DWORD *)v10;
    v26 = *((_DWORD *)v10 + 1);
    if (*v10)
    {
      v27 = 0;
      v28 = 1;
      while (v25 != *a2 || v26 != v23)
      {
        if ((v25 & v26) == 0xFFFFFFFF)
          v27 = v10;
        v24 = (v24 + v28) & v6;
        v10 = (_QWORD *)(v5 + 40 * v24);
        v25 = *(_DWORD *)v10;
        v26 = *((_DWORD *)v10 + 1);
        ++v28;
        if (!*v10)
        {
          if (v27)
          {
            v27[4] = 0;
            *(_OWORD *)v27 = 0u;
            *((_OWORD *)v27 + 1) = 0u;
            --*(_DWORD *)(*(_QWORD *)a1 - 16);
            v10 = v27;
          }
          goto LABEL_40;
        }
      }
      goto LABEL_71;
    }
LABEL_40:
    v29 = v10[1];
    v30 = v10[2];
    *v10 = *(_QWORD *)a2;
    v10[1] = 0;
    v31 = (WTF *)v10[3];
    v10[2] = 0;
    v10[3] = 0;
    v32 = *((unsigned int *)v10 + 8);
    *((_DWORD *)v10 + 8) = 0;
    v33 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        goto LABEL_52;
    }
    else
    {
      if (3 * v38 > 4 * v37)
      {
LABEL_52:
        if (v29 <= v30)
        {
          if (v29 != v30)
          {
            v46 = (const void **)((char *)v31 + 8 * v29);
            v47 = 8 * v30 - 8 * v29;
            do
            {
              v48 = *v46;
              *v46 = 0;
              if (v48)
                CFRelease(v48);
              ++v46;
              v47 -= 8;
            }
            while (v47);
          }
        }
        else
        {
          if (v30)
          {
            v40 = 8 * v30;
            v41 = (const void **)v31;
            do
            {
              v42 = *v41;
              *v41 = 0;
              if (v42)
                CFRelease(v42);
              ++v41;
              v40 -= 8;
            }
            while (v40);
          }
          if (v29 != v32)
          {
            v43 = (const void **)((char *)v31 + 8 * v29);
            v44 = 8 * v32 - 8 * v29;
            do
            {
              v45 = *v43;
              *v43 = 0;
              if (v45)
                CFRelease(v45);
              ++v43;
              v44 -= 8;
            }
            while (v44);
          }
        }
        if (v31)
          WTF::fastFree(v31, a2);
LABEL_71:
        v49 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v49 != *(_DWORD *)(a1 + 16))
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v49) = *(_QWORD *)a2;
          goto LABEL_73;
        }
        v51 = a1 + 8;
LABEL_79:
        WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntSize const&>(v51, (unint64_t)a2);
        return v10 + 1;
      }
      if (!(_DWORD)v38)
      {
        v39 = 8;
        goto LABEL_51;
      }
    }
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
LABEL_51:
    v10 = WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash((uint64_t *)a1, v39, (int *)v10);
    goto LABEL_52;
  }
  if (a3 == 1)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v17)
    {
      v18 = v17 - 1;
      v19 = (_DWORD *)(v16 + 8 * v17 - 4);
      do
      {
        if (*(v19 - 1) == v7 && *v19 == v8)
          break;
        v19 -= 2;
        --v18;
      }
      while (v18 != -1);
    }
    else
    {
      v18 = -1;
    }
    v21 = v16 + 8 * v18;
    if (v21 + 8 != v16 + 8 * v17)
    {
      memmove((void *)v21, (const void *)(v21 + 8), 8 * v17 - 8 * v18 - 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 20);
    }
    v22 = v17 - 1;
    *(_DWORD *)(a1 + 20) = v22;
    if (v22 != *(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22) = *(_QWORD *)a2;
LABEL_73:
      ++*(_DWORD *)(a1 + 20);
      return v10 + 1;
    }
    v51 = a1 + 8;
    goto LABEL_79;
  }
  return v10 + 1;
}

void WebCore::LegacyTileLayerPool::addLayer(uint64_t a1, id *a2)
{
  double v4;
  int v5;
  double v6;
  int v7;
  WTF::MemoryPressureHandler *v8;
  double v9;
  float v10;
  uint64_t v12;
  int v13;
  unsigned __int8 *v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF *v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  const void **v36;
  _QWORD *v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  _QWORD *v41;
  const void **v42;
  uint64_t v43;
  const void *v44;
  const void *v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  dispatch_time_t v52;
  NSObject *global_queue;
  int v54;
  int v55;
  int v56;
  _QWORD block[5];

  objc_msgSend(*a2, "frame");
  v5 = (int)v4;
  v7 = (int)v6;
  v8 = (WTF::MemoryPressureHandler *)objc_msgSend(*a2, "contentsScale");
  v10 = v9;
  v55 = (int)(float)(v10 * (float)v5);
  v56 = (int)(float)(v10 * (float)v7);
  if (!*(_DWORD *)(a1 + 28))
    return;
  if ((int)(float)(v10 * (float)v5) < 1 || (int)(float)(v10 * (float)v7) < 1)
    return;
  v12 = WTF::MemoryPressureHandler::singleton(v8);
  v13 = atomic_load((unsigned __int8 *)(v12 + 4));
  if (v13 == 2 || *(_BYTE *)(v12 + 7) != 0)
    return;
  v15 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_15:
  v17 = WebCore::LegacyTileLayerPool::listOfLayersWithSize(a1, &v55, 0);
  v18 = v17;
  v19 = *v17;
  v20 = v17[1];
  if (*v17)
  {
    if (v20 + 1 != v19)
      goto LABEL_50;
    LODWORD(v19) = *((_DWORD *)v17 + 6);
  }
  else
  {
    v19 = *((unsigned int *)v17 + 6);
    if (v20)
    {
      if (v20 != v19 - 1)
        goto LABEL_49;
    }
    else if ((_DWORD)v19)
    {
LABEL_49:
      v19 = v19;
      goto LABEL_50;
    }
  }
  v21 = v19;
  v22 = ((unint64_t)v19 >> 2) + v19;
  if (v22 <= 0xF)
    v22 = 15;
  if (v22 >= 0x1FFFFFFF)
  {
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x1952FD4A4);
  }
  v23 = (WTF *)v17[2];
  v24 = v22 + 1;
  v25 = WTF::fastMalloc((WTF *)(8 * (v22 + 1)));
  v27 = (_QWORD *)v25;
  *((_DWORD *)v18 + 6) = v24;
  v18[2] = v25;
  v28 = *v18;
  v29 = v18[1];
  if (*v18 <= v29)
  {
    if (*v18 != v29)
    {
      v41 = (_QWORD *)(v25 + 8 * v28);
      v42 = (const void **)((char *)v23 + 8 * v28);
      v43 = 8 * v29 - 8 * v28;
      do
      {
        v44 = *v42;
        *v42 = 0;
        *v41 = v44;
        v45 = *v42;
        *v42 = 0;
        if (v45)
          CFRelease(v45);
        ++v41;
        ++v42;
        v43 -= 8;
      }
      while (v43);
    }
  }
  else
  {
    if (v29)
    {
      v30 = 8 * v29;
      v31 = v23;
      do
      {
        v32 = *(const void **)v31;
        *(_QWORD *)v31 = 0;
        *v27 = v32;
        v33 = *(const void **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
          CFRelease(v33);
        ++v27;
        v31 = (WTF *)((char *)v31 + 8);
        v30 -= 8;
      }
      while (v30);
      v24 = *((_DWORD *)v18 + 6);
      v28 = *v18;
      v27 = (_QWORD *)v18[2];
    }
    v34 = v28 - v21 + v24;
    if (v28 != v21)
    {
      v35 = v24;
      v36 = (const void **)((char *)v23 + 8 * v28);
      v37 = &v27[v35];
      v38 = 8 * v28 - 8 * v21;
      do
      {
        v39 = *v36;
        *v36 = 0;
        *(_QWORD *)((char *)v37 + v38) = v39;
        v40 = *v36;
        *v36 = 0;
        if (v40)
          CFRelease(v40);
        ++v36;
        v38 += 8;
      }
      while (v38);
    }
    *v18 = v34;
  }
  if (v23)
  {
    if ((WTF *)v18[2] == v23)
    {
      v18[2] = 0;
      *((_DWORD *)v18 + 6) = 0;
    }
    WTF::fastFree(v23, v26);
  }
  v19 = *v18;
  if (!*v18)
  {
    LODWORD(v19) = *((_DWORD *)v18 + 6);
    goto LABEL_49;
  }
LABEL_50:
  v46 = v19 - 1;
  *v18 = v46;
  v47 = *a2;
  *(_QWORD *)(v18[2] + 8 * v46) = *a2;
  if (v47)
    v47 = (void *)CFRetain(v47);
  v48 = v55;
  v49 = v56;
  if (v55 < 0)
    v48 = -v55;
  if (v56 < 0)
    v49 = -v56;
  v50 = v49 * (unint64_t)v48;
  if ((v50 & 0xFFFFFFFF00000000) != 0)
    goto LABEL_68;
  if (v50 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x1952FD4ACLL);
  }
  *(_DWORD *)(a1 + 24) += 4 * v50;
  WTF::WallTime::now((WTF::WallTime *)v47);
  *(_QWORD *)(a1 + 40) = v51;
  if (!*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 1;
    v52 = dispatch_time(0, 1000000000);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN7WebCore19LegacyTileLayerPool13schedulePruneEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_after(v52, global_queue, block);
  }
  v54 = __ldxr(v15);
  if (v54 == 1)
  {
    if (!__stlxr(0, v15))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
}

void sub_1952FD4B8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::LegacyTileLayerPool::takeLayerWithSize(WebCore::LegacyTileLayerPool *this@<X0>, const WebCore::IntSize *a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v5;
  unsigned __int8 *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  int v20;

  if (!*((_DWORD *)this + 7) || (*(int *)a2 >= 1 ? (v5 = *((_DWORD *)a2 + 1) <= 0) : (v5 = 1), v5))
  {
    *a3 = 0;
    return;
  }
  v7 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_12:
  v9 = WebCore::LegacyTileLayerPool::listOfLayersWithSize((uint64_t)this, (int *)a2, 1);
  v10 = v9;
  v11 = *v9;
  if (*v9 == v9[1])
  {
    *a3 = 0;
  }
  else
  {
    v12 = *(_DWORD *)a2;
    v13 = *((_DWORD *)a2 + 1);
    if (*(int *)a2 < 0)
      v12 = -v12;
    if (v13 < 0)
      v13 = -v13;
    v14 = v13 * (unint64_t)v12;
    if ((v14 & 0xFFFFFFFF00000000) != 0 || v14 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x1952FD634);
    }
    *((_DWORD *)this + 6) -= 4 * v14;
    v15 = v9[2];
    v16 = *(_QWORD *)(v15 + 8 * v11);
    *(_QWORD *)(v15 + 8 * v11) = 0;
    *a3 = v16;
    v17 = v9[2];
    v18 = *(const void **)(v17 + 8 * v11);
    *(_QWORD *)(v17 + 8 * v11) = 0;
    if (v18)
    {
      CFRelease(v18);
      v11 = *v10;
    }
    if (v11 == *((unsigned int *)v10 + 6) - 1)
      v19 = 0;
    else
      v19 = v11 + 1;
    *v10 = v19;
  }
  v20 = __ldxr(v7);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v7))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
}

void sub_1952FD640(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::LegacyTileLayerPool::setCapacity(WebCore::LegacyTileLayerPool *this, unsigned int a2)
{
  unsigned __int8 *v4;
  dispatch_time_t v6;
  NSObject *global_queue;
  int v8;
  _QWORD block[5];

  v4 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_5:
  if (*((_DWORD *)this + 7) > a2 && !*((_BYTE *)this + 48))
  {
    *((_BYTE *)this + 48) = 1;
    v6 = dispatch_time(0, 1000000000);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN7WebCore19LegacyTileLayerPool13schedulePruneEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_after(v6, global_queue, block);
  }
  *((_DWORD *)this + 7) = a2;
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void ___ZN7WebCore19LegacyTileLayerPool13schedulePruneEv_block_invoke(WTF::WallTime *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  char *v4;
  void *v5;
  double v6;
  double v7;
  unsigned int v8;
  float v9;
  unsigned int i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v20;
  int v21;
  unsigned int v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v47;
  double v48;
  dispatch_time_t v49;
  NSObject *global_queue;
  int v51;
  _QWORD block[5];

  v1 = *((_QWORD *)a1 + 4);
  v2 = (unsigned __int8 *)(v1 + 32);
  if (__ldaxr((unsigned __int8 *)(v1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  a1 = (WTF::WallTime *)MEMORY[0x19AEA534C](v1 + 32);
LABEL_5:
  *(_BYTE *)(v1 + 48) = 0;
  v4 = (char *)WTF::WallTime::now(a1);
  v7 = v6 - *(double *)(v1 + 40);
  if (v7 <= 5.0)
  {
    v9 = v7 / -5.0;
    v8 = (float)((float)(*(_DWORD *)(v1 + 28) >> 2)
                             + (float)((float)((3 * *(_DWORD *)(v1 + 28)) >> 2) * (float)(v9 + 1.0)));
  }
  else
  {
    v8 = *(_DWORD *)(v1 + 28) >> 2;
  }
  for (i = *(_DWORD *)(v1 + 24); i > v8; i = *(_DWORD *)(v1 + 24))
  {
    if (!*(_DWORD *)(v1 + 20))
    {
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x1952FDBE4);
    }
    v11 = *(_QWORD *)v1;
    v12 = **(_QWORD **)(v1 + 8);
    v13 = HIDWORD(v12);
    if (*(_QWORD *)v1)
    {
      v14 = *(_DWORD *)(v11 - 8);
      v15 = v14 & ((0xD7862706ELL * (unint64_t)(277951225 * v12 + 95187966 * HIDWORD(v12))) >> 4);
      v16 = v11 + 40 * v15;
      v17 = *(_DWORD *)v16;
      v18 = *(_DWORD *)(v16 + 4);
      if (*(_DWORD *)v16 == (_DWORD)v12 && v18 == HIDWORD(v12))
      {
        v26 = v11 + 40 * v15;
        v27 = *(char **)(v26 + 16);
        v25 = v26 + 16;
        v24 = v27;
        if (*(char **)(v25 - 8) == v27)
          goto LABEL_48;
      }
      else
      {
        v20 = 1;
        v5 = (void *)*(unsigned int *)(v16 + 4);
        v21 = *(_DWORD *)v16;
        v22 = v14 & ((0xD7862706ELL * (unint64_t)(277951225 * v12 + 95187966 * HIDWORD(v12))) >> 4);
        while (v21 | v5)
        {
          v22 = (v22 + v20) & v14;
          v16 = v11 + 40 * v22;
          v21 = *(_DWORD *)v16;
          v5 = (void *)*(unsigned int *)(v16 + 4);
          ++v20;
          if (*(_DWORD *)v16 == (_DWORD)v12 && (_DWORD)v5 == HIDWORD(v12))
            goto LABEL_28;
        }
        v16 = v11 + 40 * *(unsigned int *)(v11 - 4);
LABEL_28:
        v25 = v16 + 16;
        v24 = *(char **)(v16 + 16);
        v4 = *(char **)(v16 + 8);
        if (v4 == v24)
        {
          v28 = 1;
          while (v17 | v18)
          {
            v15 = (v15 + v28) & v14;
            v16 = v11 + 40 * v15;
            v17 = *(_DWORD *)v16;
            v18 = *(_DWORD *)(v16 + 4);
            ++v28;
            if (*(_DWORD *)v16 == (_DWORD)v12 && v18 == HIDWORD(v12))
              goto LABEL_48;
          }
          v16 = v11 + 40 * *(unsigned int *)(v11 - 4);
LABEL_48:
          if (v11 + 40 * *(unsigned int *)(v11 - 4) != v16)
          {
            *(_QWORD *)v16 = -1;
            v32 = *(_QWORD *)(v16 + 8);
            v33 = *(_QWORD *)(v16 + 16);
            v34 = *(WTF **)(v16 + 24);
            if (v32 > v33)
            {
              if (v33)
              {
                v35 = 8 * v33;
                do
                {
                  v4 = *(char **)v34;
                  *(_QWORD *)v34 = 0;
                  if (v4)
                    CFRelease(v4);
                  v34 = (WTF *)((char *)v34 + 8);
                  v35 -= 8;
                }
                while (v35);
                v34 = *(WTF **)(v16 + 24);
                v32 = *(_QWORD *)(v16 + 8);
              }
              v36 = *(unsigned int *)(v16 + 32);
              if (v32 != v36)
              {
                v37 = (void **)((char *)v34 + 8 * v32);
                v38 = 8 * v36 - 8 * v32;
                do
                {
                  v4 = (char *)*v37;
                  *v37 = 0;
                  if (v4)
                    CFRelease(v4);
                  ++v37;
                  v38 -= 8;
                }
                while (v38);
              }
              goto LABEL_67;
            }
            if (v32 != v33)
            {
              v39 = (void **)((char *)v34 + 8 * v32);
              v40 = 8 * v33 - 8 * v32;
              do
              {
                v4 = (char *)*v39;
                *v39 = 0;
                if (v4)
                  CFRelease(v4);
                ++v39;
                v40 -= 8;
              }
              while (v40);
LABEL_67:
              v34 = *(WTF **)(v16 + 24);
            }
            if (v34)
            {
              *(_QWORD *)(v16 + 24) = 0;
              *(_DWORD *)(v16 + 32) = 0;
              v4 = (char *)WTF::fastFree(v34, v5);
            }
            ++*(_DWORD *)(*(_QWORD *)v1 - 16);
            v41 = *(_QWORD *)v1;
            if (*(_QWORD *)v1)
              v42 = *(_DWORD *)(v41 - 12) - 1;
            else
              v42 = -1;
            *(_DWORD *)(v41 - 12) = v42;
            v43 = *(_QWORD *)v1;
            if (*(_QWORD *)v1)
            {
              v44 = 6 * *(_DWORD *)(v43 - 12);
              v45 = *(_DWORD *)(v43 - 4);
              if (v44 < v45 && v45 >= 9)
                v4 = (char *)WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash((uint64_t *)v1, v45 >> 1, 0);
            }
          }
LABEL_80:
          v47 = *(unsigned int *)(v1 + 20);
          if ((_DWORD)v47 != 1)
          {
            v4 = (char *)memmove(*(void **)(v1 + 8), (const void *)(*(_QWORD *)(v1 + 8) + 8), 8 * v47 - 8);
            LODWORD(v47) = *(_DWORD *)(v1 + 20);
          }
          *(_DWORD *)(v1 + 20) = v47 - 1;
          continue;
        }
      }
    }
    else
    {
      v24 = (char *)MEMORY[0x10];
      if (MEMORY[8] == MEMORY[0x10])
        goto LABEL_80;
      v16 = 0;
      v25 = 16;
    }
    if ((v12 & 0x80000000) != 0)
      LODWORD(v12) = -(int)v12;
    if ((v13 & 0x80000000) != 0)
      LODWORD(v13) = -(int)v13;
    v30 = v13 * (unint64_t)v12;
    if ((v30 & 0xFFFFFFFF00000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1952FDBECLL);
    }
    if (v30 >> 30)
      goto LABEL_94;
    *(_DWORD *)(v1 + 24) = i - 4 * v30;
    if (!v24)
      v24 = (char *)*(unsigned int *)(v16 + 32);
    *(_QWORD *)v25 = v24 - 1;
    v31 = *(_QWORD *)(v16 + 24);
    v4 = *(char **)(v31 + 8 * (_QWORD)(v24 - 1));
    *(_QWORD *)(v31 + 8 * (_QWORD)(v24 - 1)) = 0;
    if (v4)
      CFRelease(v4);
  }
  WTF::WallTime::now((WTF::WallTime *)v4);
  if (v48 - *(double *)(v1 + 40) <= 5.0 && !*(_BYTE *)(v1 + 48))
  {
    *(_BYTE *)(v1 + 48) = 1;
    v49 = dispatch_time(0, 1000000000);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN7WebCore19LegacyTileLayerPool13schedulePruneEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v1;
    dispatch_after(v49, global_queue, block);
  }
  v51 = __ldxr(v2);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_91;
  }
  if (__stlxr(0, v2))
LABEL_91:
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 32));
}

void sub_1952FDBF8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WebCore::LocalCurrentContextSaver *WebCore::LocalCurrentContextSaver::LocalCurrentContextSaver(WebCore::LocalCurrentContextSaver *this, CGContext *a2)
{
  CGContext *v4;

  *(_BYTE *)this = 0;
  if (a2 && (CGContext *)PAL::softLinkUIKitUIGraphicsGetCurrentContext(this) != a2)
  {
    PAL::softLinkUIKitUIGraphicsPushContext(a2, v4);
    *(_BYTE *)this = 1;
  }
  return this;
}

{
  CGContext *v4;

  *(_BYTE *)this = 0;
  if (a2 && (CGContext *)PAL::softLinkUIKitUIGraphicsGetCurrentContext(this) != a2)
  {
    PAL::softLinkUIKitUIGraphicsPushContext(a2, v4);
    *(_BYTE *)this = 1;
  }
  return this;
}

void WebCore::LocalCurrentContextSaver::~LocalCurrentContextSaver(WebCore::LocalCurrentContextSaver *this)
{
  if (*(_BYTE *)this)
    PAL::softLinkUIKitUIGraphicsPopContext(this);
}

{
  if (*(_BYTE *)this)
    PAL::softLinkUIKitUIGraphicsPopContext(this);
}

uint64_t ___ZN7WebCore27LocalCurrentTraitCollectionC2Ebb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 32))
    v4 = 2;
  else
    v4 = 1;
  objc_msgSend(a2, "setUserInterfaceStyle:", v4);
  return objc_msgSend(a2, "setUserInterfaceLevel:", *(unsigned __int8 *)(a1 + 33));
}

WebCore::LocalCurrentTraitCollection *WebCore::LocalCurrentTraitCollection::LocalCurrentTraitCollection(WebCore::LocalCurrentTraitCollection *this, UITraitCollection *a2)
{
  const void *v4;
  const void *v5;
  void *v6;

  *(_QWORD *)this = 0;
  v4 = (const void *)objc_msgSend((id)PAL::getUITraitCollectionClass(this), "currentTraitCollection");
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_msgSend((id)PAL::getUITraitCollectionClass((PAL *)v6), "setCurrentTraitCollection:", a2);
  return this;
}

{
  const void *v4;
  const void *v5;
  void *v6;

  *(_QWORD *)this = 0;
  v4 = (const void *)objc_msgSend((id)PAL::getUITraitCollectionClass(this), "currentTraitCollection");
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_msgSend((id)PAL::getUITraitCollectionClass((PAL *)v6), "setCurrentTraitCollection:", a2);
  return this;
}

void sub_1952FDE00(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void sub_1952FDE90(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void sub_1952FDEF4(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Pasteboard::Pasteboard(uint64_t a1, uint64_t *a2, _DWORD **a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_1E3354370;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = WebCore::s_platformStrategies;
  v8 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v8)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v7 + 16) = v8;
    v5 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v8 + 80))(v8, a3, v5);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_1952FDFAC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;

  v4 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Pasteboard::nameOfDragPasteboard@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v4;
  return result;
}

WTF::StringImpl *WebCore::Pasteboard::createForDragAndDrop@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v13;
  v12 = v13;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  v6 = v5;
  *v5 = off_1E3354370;
  v7 = *a1;
  *a1 = 0;
  v5[1] = v7;
  if (v4)
    *(_DWORD *)v4 += 2;
  v5[2] = v4;
  v8 = WebCore::s_platformStrategies;
  v9 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v9)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v8 + 16) = v9;
    v7 = v6[1];
  }
  v6[3] = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v9 + 80))(v9, &v12, v7);
  *((_BYTE *)v6 + 32) = 0;
  *((_BYTE *)v6 + 56) = 0;
  *a2 = v6;
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1952FE128(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  WTF::StringImpl *v9;

  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Pasteboard::create@<X0>(WebCore::Pasteboard *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;

  *(_QWORD *)&v14 = *((_QWORD *)this + 7);
  BYTE8(v14) = *((_BYTE *)this + 64);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E327FAB0;
  *(_OWORD *)(v5 + 8) = v14;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  v7 = v6;
  v6[1] = v5;
  v10 = (_DWORD *)*((_QWORD *)this + 9);
  v9 = (char *)this + 72;
  v8 = v10;
  *v6 = off_1E3354370;
  if (v10)
    *v8 += 2;
  v6[2] = v8;
  v11 = WebCore::s_platformStrategies;
  v12 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v12)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v11 + 16) = v12;
    v5 = v7[1];
  }
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v12 + 80))(v12, v9, v5);
  v7[3] = result;
  *((_BYTE *)v7 + 32) = 0;
  *((_BYTE *)v7 + 56) = 0;
  *a2 = v7;
  return result;
}

void sub_1952FE290(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::Pasteboard::createForCopyAndPaste@<X0>(PAL *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t UIKit_UIPasteboardNameGeneral;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  UIKit_UIPasteboardNameGeneral = PAL::get_UIKit_UIPasteboardNameGeneral(a1);
  v5 = WTF::fastMalloc((WTF *)0x40);
  MEMORY[0x19AEA5508](&v12, UIKit_UIPasteboardNameGeneral);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)v5 = off_1E3354370;
  *(_QWORD *)(v5 + 8) = v6;
  v7 = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  *(_QWORD *)(v5 + 16) = v7;
  v8 = WebCore::s_platformStrategies;
  v9 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v9)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v8 + 16) = v9;
    v6 = *(_QWORD *)(v5 + 8);
  }
  *(_QWORD *)(v5 + 24) = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v9 + 80))(v9, &v12, v6);
  *(_BYTE *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  *a2 = v5;
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1952FE3E4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF *v10;

  WTF::fastFree(v10, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::Pasteboard::write(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 8))(v5, a2, a1 + 16, *(_QWORD *)(a1 + 8));
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, a2, a1 + 16, *(_QWORD *)(a1 + 8));
}

{
  uint64_t v4;
  uint64_t (***v5)(_QWORD, uint64_t, uint64_t, _QWORD);

  v4 = WebCore::s_platformStrategies;
  v5 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t, _QWORD))(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  return (**v5)(v5, a2, a1 + 16, *(_QWORD *)(a1 + 8));
}

WTF::StringImpl *WebCore::Pasteboard::writePlainText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  MEMORY[0x19AEA5508](&v8, objc_msgSend((id)*MEMORY[0x1E0CEC610], "identifier"));
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(v5, &v8, a2, a1 + 16, *(_QWORD *)(a1 + 8));
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1952FE5DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Pasteboard::write(WebCore::Pasteboard *this, const WebCore::Color *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  return (*(uint64_t (**)(uint64_t, const WebCore::Color *, char *, _QWORD))(*(_QWORD *)v5 + 144))(v5, a2, (char *)this + 16, *((_QWORD *)this + 1));
}

uint64_t WebCore::Pasteboard::canSmartReplace(WebCore::Pasteboard *this)
{
  return 1;
}

WTF::StringImpl *WebCore::Pasteboard::read(uint64_t a1, _BYTE *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  if (a5)
    v8 = a4;
  else
    v8 = 0;
  v9 = WebCore::s_platformStrategies;
  v10 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (v10)
  {
    if (!a3)
      goto LABEL_15;
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v9 + 16) = v10;
    if (!a3)
      goto LABEL_15;
  }
  MEMORY[0x19AEA5508](&v25, objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier"));
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v10 + 176))(&v26, v10, v8, &v25, a1 + 16, *(_QWORD *)(a1 + 8));
  v12 = v26;
  v26 = 0;
  v13 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      v24 = v26;
      v26 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v11);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v13 -= 2;
      v26 = 0;
    }
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v21 = 1;
    goto LABEL_29;
  }
LABEL_15:
  MEMORY[0x19AEA5508](&v25, objc_msgSend((id)*MEMORY[0x1E0CEC590], "identifier", v25));
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v10 + 176))(&v26, v10, v8, &v25, a1 + 16, *(_QWORD *)(a1 + 8));
  v16 = v26;
  v26 = 0;
  v17 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v15);
      v22 = v26;
      v26 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v15);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v17 -= 2;
      v26 = 0;
    }
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    MEMORY[0x19AEA5508](&v25, objc_msgSend((id)*MEMORY[0x1E0CEC610], "identifier", v25));
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v10 + 176))(&v26, v10, v8, &v25, a1 + 16, *(_QWORD *)(a1 + 8));
    v19 = v26;
    v26 = 0;
    v20 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v18);
        v23 = v26;
        v26 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v18);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v20 -= 2;
        v26 = 0;
      }
    }
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v21 = 0;
LABEL_29:
  a2[8] = v21;
  return result;
}

void sub_1952FE9B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Pasteboard::readPasteboardWebContentDataForType(uint64_t a1, uint64_t a2, uint64_t a3, __CFString *a4, uint64_t a5, int a6)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v116;
  _OWORD v118[2];
  WTF::StringImpl *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122[6];

  v122[5] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((-[__CFString isEqualToString:](a4, "isEqualToString:", WebCore::WebArchivePboardType) & 1) != 0
    || -[__CFString isEqualToString:](a4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC658], "identifier")))
  {
    MEMORY[0x19AEA5508](&v121, a4);
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 184))(v122, a3, a6, 1, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
    v13 = v121;
    v121 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(_QWORD *)(a1 + 24);
    v15 = WebCore::s_platformStrategies;
    v16 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v16)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v15 + 16) = v16;
    }
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 80))(v16, a1 + 16, *(_QWORD *)(a1 + 8));
    v19 = v122[0];
    if (v14 != v17)
    {
      v21 = 2;
      goto LABEL_12;
    }
    if (v122[0])
    {
      v20 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a2 + 64))(a2, v122[0]);
      v19 = v122[0];
      v21 = v20 ^ 1u;
LABEL_12:
      v122[0] = 0;
      if (v19)
      {
        do
        {
          v22 = __ldaxr((unsigned int *)v19);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)v19));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)v19);
          v24 = *((unsigned int *)v19 + 5);
          if ((_DWORD)v24)
          {
            v25 = *((_QWORD *)v19 + 1);
            v26 = v25 + 16 * v24;
            do
            {
              v27 = *(unsigned int **)(v25 + 8);
              *(_QWORD *)(v25 + 8) = 0;
              if (v27)
              {
                do
                {
                  v28 = __ldaxr(v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v27));
                if (!v29)
                {
                  atomic_store(1u, v27);
                  v30 = v27[6];
                  if ((_DWORD)v30 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33542C8[v30])(&v121, v27 + 2);
                  v27[6] = -1;
                  WTF::fastFree((WTF *)v27, v18);
                }
              }
              v25 += 16;
            }
            while (v25 != v26);
          }
LABEL_151:
          v116 = (WTF *)*((_QWORD *)v19 + 1);
          if ((WTF::StringImpl *)((char *)v19 + 24) != v116 && v116 != 0)
          {
            *((_QWORD *)v19 + 1) = 0;
            *((_DWORD *)v19 + 4) = 0;
            WTF::fastFree(v116, v18);
          }
          WTF::fastFree(v19, v18);
          return v21;
        }
      }
      return v21;
    }
    return 1;
  }
  v31 = (void *)*MEMORY[0x1E0CEC518];
  if (-[__CFString isEqualToString:](a4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC518], "identifier")))
  {
    MEMORY[0x19AEA5508](&v121, objc_msgSend(v31, "identifier"));
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 176))(v122, a3, a6, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
    v33 = v121;
    v121 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = *(_QWORD *)(a1 + 24);
    v35 = WebCore::s_platformStrategies;
    v36 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v36)
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v35 + 16) = v36;
    }
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v36 + 80))(v36, a1 + 16, *(_QWORD *)(a1 + 8));
    v39 = v122[0];
    if (v34 == v38)
    {
      if (!v122[0])
        return 1;
      v40 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 32))(a2, v122);
      goto LABEL_34;
    }
LABEL_142:
    v21 = 2;
LABEL_143:
    v122[0] = 0;
    if (!v39)
      return v21;
    goto LABEL_144;
  }
  if ((-[__CFString isEqualToString:](a4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC638], "identifier")) & 1) != 0)
    return 1;
  v42 = (void *)*MEMORY[0x1E0CEC4E8];
  if (!-[__CFString isEqualToString:](a4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC4E8], "identifier")))
  {
    v50 = (void *)*MEMORY[0x1E0CEC5C0];
    if (-[__CFString isEqualToString:](a4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC5C0], "identifier")))
    {
      MEMORY[0x19AEA5508](&v121, objc_msgSend(v50, "identifier"));
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 184))(v122, a3, a6, 1, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
      v52 = v121;
      v121 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v51);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = *(_QWORD *)(a1 + 24);
      v54 = WebCore::s_platformStrategies;
      v55 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
      if (!v55)
      {
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
        *(_QWORD *)(v54 + 16) = v55;
      }
      v56 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v55 + 80))(v55, a1 + 16, *(_QWORD *)(a1 + 8));
      v19 = v122[0];
      if (v53 == v56)
      {
        if (!v122[0])
          return 1;
        v57 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a2 + 80))(a2, v122[0]);
        v19 = v122[0];
        v21 = v57 ^ 1u;
      }
      else
      {
        v21 = 2;
      }
      v122[0] = 0;
      if (v19)
      {
        do
        {
          v83 = __ldaxr((unsigned int *)v19);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, (unsigned int *)v19));
        if (!v84)
        {
          atomic_store(1u, (unsigned int *)v19);
          v85 = *((unsigned int *)v19 + 5);
          if ((_DWORD)v85)
          {
            v86 = *((_QWORD *)v19 + 1);
            v87 = v86 + 16 * v85;
            do
            {
              v88 = *(unsigned int **)(v86 + 8);
              *(_QWORD *)(v86 + 8) = 0;
              if (v88)
              {
                do
                {
                  v89 = __ldaxr(v88);
                  v90 = v89 - 1;
                }
                while (__stlxr(v90, v88));
                if (!v90)
                {
                  atomic_store(1u, v88);
                  v91 = v88[6];
                  if ((_DWORD)v91 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33542C8[v91])(&v121, v88 + 2);
                  v88[6] = -1;
                  WTF::fastFree((WTF *)v88, v18);
                }
              }
              v86 += 16;
            }
            while (v86 != v87);
          }
          goto LABEL_151;
        }
      }
      return v21;
    }
    v122[0] = (WTF::StringImpl *)objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier");
    v122[1] = (WTF::StringImpl *)objc_msgSend((id)*MEMORY[0x1E0CEC600], "identifier");
    v122[2] = (WTF::StringImpl *)objc_msgSend((id)*MEMORY[0x1E0CEC530], "identifier");
    v122[3] = (WTF::StringImpl *)objc_msgSend((id)*MEMORY[0x1E0CEC4F8], "identifier");
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v122, 4), "containsObject:", a4))
    {
      MEMORY[0x19AEA5508](&v121, a4);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 184))(v122, a3, a6, 1, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
      v59 = v121;
      v121 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v58);
        else
          *(_DWORD *)v59 -= 2;
      }
      v60 = *(_QWORD *)(a1 + 24);
      v61 = WebCore::s_platformStrategies;
      v62 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
      if (!v62)
      {
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
        *(_QWORD *)(v61 + 16) = v62;
      }
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v62 + 80))(v62, a1 + 16, *(_QWORD *)(a1 + 8));
      v19 = v122[0];
      if (v60 == v63)
      {
        if (!v122[0])
          return 1;
        v121 = v122[0];
        v122[0] = 0;
        v120 = 0;
        MEMORY[0x19AEA5508](&v119, a4);
        v64 = *(_OWORD *)(a5 + 72);
        v118[0] = *(_OWORD *)(a5 + 56);
        v118[1] = v64;
        v21 = (*(unsigned int (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, _OWORD *))(*(_QWORD *)a2 + 40))(a2, &v121, &v119, v118) ^ 1;
        v66 = v119;
        v119 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v65);
          else
            *(_DWORD *)v66 -= 2;
        }
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v121, v65);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v120, v67);
        v19 = v122[0];
      }
      else
      {
        v21 = 2;
      }
      v122[0] = 0;
      if (v19)
      {
        do
        {
          v99 = __ldaxr((unsigned int *)v19);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, (unsigned int *)v19));
        if (!v100)
        {
          atomic_store(1u, (unsigned int *)v19);
          v101 = *((unsigned int *)v19 + 5);
          if ((_DWORD)v101)
          {
            v102 = *((_QWORD *)v19 + 1);
            v103 = v102 + 16 * v101;
            do
            {
              v104 = *(unsigned int **)(v102 + 8);
              *(_QWORD *)(v102 + 8) = 0;
              if (v104)
              {
                do
                {
                  v105 = __ldaxr(v104);
                  v106 = v105 - 1;
                }
                while (__stlxr(v106, v104));
                if (!v106)
                {
                  atomic_store(1u, v104);
                  v107 = v104[6];
                  if ((_DWORD)v107 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33542C8[v107])(&v121, v104 + 2);
                  v104[6] = -1;
                  WTF::fastFree((WTF *)v104, v18);
                }
              }
              v102 += 16;
            }
            while (v102 != v103);
          }
          goto LABEL_151;
        }
      }
      return v21;
    }
    if (!-[__CFString isEqualToString:](a4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier")))
    {
      v92 = *MEMORY[0x1E0CA5C20];
      if (UTTypeConformsTo(a4, (CFStringRef)*MEMORY[0x1E0CA5C20]))
      {
        MEMORY[0x19AEA5508](&v121, v92);
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 176))(v122, a3, a6, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
        v94 = v121;
        v121 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, v93);
          else
            *(_DWORD *)v94 -= 2;
        }
        v95 = *(_QWORD *)(a1 + 24);
        v96 = WebCore::s_platformStrategies;
        v97 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
        if (!v97)
        {
          v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
          *(_QWORD *)(v96 + 16) = v97;
        }
        v98 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v97 + 80))(v97, a1 + 16, *(_QWORD *)(a1 + 8));
        v39 = v122[0];
        if (v95 != v98)
          goto LABEL_142;
        if (!v122[0])
          return 1;
      }
      else
      {
        v108 = *MEMORY[0x1E0CA5C88];
        if (!UTTypeConformsTo(a4, (CFStringRef)*MEMORY[0x1E0CA5C88]))
          return 1;
        MEMORY[0x19AEA5508](&v121, v108);
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 176))(v122, a3, a6, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
        v110 = v121;
        v121 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
            WTF::StringImpl::destroy(v110, v109);
          else
            *(_DWORD *)v110 -= 2;
        }
        v111 = *(_QWORD *)(a1 + 24);
        v112 = WebCore::s_platformStrategies;
        v113 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
        if (!v113)
        {
          v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
          *(_QWORD *)(v112 + 16) = v113;
        }
        v114 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v113 + 80))(v113, a1 + 16, *(_QWORD *)(a1 + 8));
        v39 = v122[0];
        if (v111 != v114)
          goto LABEL_142;
        if (!v122[0])
          return 1;
      }
      v40 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 56))(a2, v122);
LABEL_34:
      v41 = v40;
      v39 = v122[0];
      v21 = v41 ^ 1u;
      goto LABEL_143;
    }
    v121 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a3 + 192))(v122, a3, a6, a1 + 16, &v121, *(_QWORD *)(a1 + 8));
    v77 = *(_QWORD *)(a1 + 24);
    v78 = WebCore::s_platformStrategies;
    v79 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v79)
    {
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v78 + 16) = v79;
    }
    v80 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 80))(v79, a1 + 16, *(_QWORD *)(a1 + 8));
    v81 = v122[0];
    if (v77 == v80)
    {
      if (!v122[0])
      {
        v21 = 1;
        goto LABEL_131;
      }
      v82 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(a2, v122, &v121);
      v81 = v122[0];
      v21 = v82 ^ 1u;
    }
    else
    {
      v21 = 2;
    }
    v122[0] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, v37);
      else
        *(_DWORD *)v81 -= 2;
    }
LABEL_131:
    v39 = v121;
    v121 = 0;
    if (!v39)
      return v21;
LABEL_144:
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v37);
    else
      *(_DWORD *)v39 -= 2;
    return v21;
  }
  MEMORY[0x19AEA5508](&v121, objc_msgSend(v42, "identifier"));
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)a3 + 184))(v122, a3, a6, 1, &v121, a1 + 16, *(_QWORD *)(a1 + 8));
  v44 = v121;
  v121 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = *(_QWORD *)(a1 + 24);
  v46 = WebCore::s_platformStrategies;
  v47 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v47)
  {
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v46 + 16) = v47;
  }
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v47 + 80))(v47, a1 + 16, *(_QWORD *)(a1 + 8));
  v19 = v122[0];
  if (v45 == v48)
  {
    if (!v122[0])
      return 1;
    v49 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a2 + 72))(a2, v122[0]);
    v19 = v122[0];
    v21 = v49 ^ 1u;
  }
  else
  {
    v21 = 2;
  }
  v122[0] = 0;
  if (v19)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)v19);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)v19));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)v19);
      v70 = *((unsigned int *)v19 + 5);
      if ((_DWORD)v70)
      {
        v71 = *((_QWORD *)v19 + 1);
        v72 = v71 + 16 * v70;
        do
        {
          v73 = *(unsigned int **)(v71 + 8);
          *(_QWORD *)(v71 + 8) = 0;
          if (v73)
          {
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
            {
              atomic_store(1u, v73);
              v76 = v73[6];
              if ((_DWORD)v76 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33542C8[v76])(&v121, v73 + 2);
              v73[6] = -1;
              WTF::fastFree((WTF *)v73, v18);
            }
          }
          v71 += 16;
        }
        while (v71 != v72);
      }
      goto LABEL_151;
    }
  }
  return v21;
}

void sub_1952FF59C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Pasteboard::read(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WebCore::PasteboardItemInfo *v21;
  WTF::StringImpl *v22;
  _BOOL4 v23;
  int v24;
  WTF::StringImpl *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  __CFString *v29;
  __CFString *v30;
  int v31;
  uint64_t v32;
  __CFString *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  const WebCore::PasteboardItemInfo *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  const WTF::StringImpl *v56;
  const WTF::StringImpl *v57;
  unint64_t i;
  int v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __CFString *v65;
  int PasteboardWebContentDataForType;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WTF *v78;
  const void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  _BOOL4 v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  uint64_t v99;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  WTF::StringImpl *v106[2];
  __int128 v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl **v112;
  int v113;
  _QWORD *v114;
  unsigned int v115;
  WTF::AtomStringImpl *v116;
  __int128 v117;
  __int128 v118;
  char v119;
  _BYTE v120[128];
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 48))(&v110);
  v9 = v110;
  if (v110)
    *(_DWORD *)v110 += 2;
  v10 = (WTF::StringImpl *)a2[1];
  a2[1] = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v9 = v110;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v110 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = v110;
  v99 = a1 + 16;
  v14 = WTF::equal(*(WTF **)(a1 + 16), v110, v12);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (!v14)
  {
    v37 = WebCore::s_platformStrategies;
    v38 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v38)
    {
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v37 + 16) = v38;
    }
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 216))(v38, v99, *(_QWORD *)(a1 + 8));
    if (!v39)
      return;
    if ((a3 & 1) != 0)
    {
      v90 = 0;
    }
    else
    {
      {
        v40 = byte_1ECE90A59;
      }
      else
      {
        v40 = 0;
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
      v90 = v40 != 0;
    }
    v41 = 0;
    v95 = a5;
    v97 = (void *)*MEMORY[0x1E0CEC658];
    v92 = (void *)*MEMORY[0x1E0CEC518];
    v86 = (void *)*MEMORY[0x1E0CEC580];
    v84 = (void *)*MEMORY[0x1E0CEC530];
    v85 = (void *)*MEMORY[0x1E0CEC600];
    v83 = (void *)*MEMORY[0x1E0CEC4F8];
    v93 = v39;
    v81 = (void *)*MEMORY[0x1E0CEC610];
    v82 = (void *)*MEMORY[0x1E0CEC618];
    v87 = (void *)*MEMORY[0x1E0CEC4E8];
    v88 = (void *)*MEMORY[0x1E0CEC5C0];
    while (1)
    {
      if (v95 && v41 != a4)
        goto LABEL_184;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 200))(&v110, v38, v41, v99, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8));
      if (!v119)
        return;
      if (v90)
        break;
LABEL_126:
      v54 = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v57 = (const WTF::StringImpl *)v121;
      if (v115)
      {
        for (i = 0; i < v115; ++i)
        {
          v54 = WTF::equal((WTF *)v114[i], v57, v56);
          v59 = v54;
          if ((v54 & 1) != 0)
            break;
        }
      }
      else
      {
        v59 = 0;
      }
      if (!v57)
        goto LABEL_135;
      if (*(_DWORD *)v57 != 2)
      {
        *(_DWORD *)v57 -= 2;
LABEL_135:
        if (v59)
          goto LABEL_136;
        goto LABEL_140;
      }
      v54 = WTF::StringImpl::destroy(v57, v55);
      if (v59)
      {
LABEL_136:
        if ((byte_1ECE81BC1 & 1) == 0)
        {
          *(_QWORD *)&v121 = WebCore::WebArchivePboardType;
          *((_QWORD *)&v121 + 1) = objc_msgSend(v97, "identifier");
          *(_QWORD *)&v122 = objc_msgSend(v92, "identifier");
          *((_QWORD *)&v122 + 1) = objc_msgSend(v86, "identifier");
          v123 = objc_msgSend(v85, "identifier");
          v124 = objc_msgSend(v84, "identifier");
          v125 = objc_msgSend(v83, "identifier");
          v126 = objc_msgSend(v82, "identifier");
          v127 = objc_msgSend(v81, "identifier");
          v128 = objc_msgSend(v87, "identifier");
          v129 = objc_msgSend(v88, "identifier");
          v80 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v121, 11);
          qword_1ECE81BD8 = (uint64_t)v80;
          if (v80)
            CFRetain(v80);
          byte_1ECE81BC1 = 1;
        }
        v60 = (void *)qword_1ECE81BD8;
        if (qword_1ECE81BD8)
          CFRetain((CFTypeRef)qword_1ECE81BD8);
        goto LABEL_142;
      }
LABEL_140:
      v61 = (void *)WebCore::Pasteboard::supportedWebContentPasteboardTypes((WebCore::Pasteboard *)v54);
      v60 = v61;
      if (v61)
        CFRetain(v61);
LABEL_142:
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v101, v120, 16);
      if (!v62)
        goto LABEL_178;
      v63 = *(_QWORD *)v102;
      if ((a3 & 1) != 0)
      {
LABEL_144:
        v64 = 0;
        while (1)
        {
          if (*(_QWORD *)v102 != v63)
            objc_enumerationMutation(v60);
          v65 = *(__CFString **)(*((_QWORD *)&v101 + 1) + 8 * v64);
          if ((-[__CFString isEqualToString:](v65, "isEqualToString:", WebCore::WebArchivePboardType) & 1) != 0
            || (-[__CFString isEqualToString:](v65, "isEqualToString:", objc_msgSend(v97, "identifier")) & 1) != 0
            || (-[__CFString isEqualToString:](v65, "isEqualToString:", objc_msgSend(v92, "identifier")) & 1) != 0
            || (-[__CFString isEqualToString:](v65, "isEqualToString:", objc_msgSend(v88, "identifier")) & 1) != 0
            || -[__CFString isEqualToString:](v65, "isEqualToString:", objc_msgSend(v87, "identifier")))
          {
            if (!v119)
              goto LABEL_215;
            PasteboardWebContentDataForType = WebCore::Pasteboard::readPasteboardWebContentDataForType(a1, (uint64_t)a2, v38, v65, (uint64_t)&v110, v41);
            v67 = PasteboardWebContentDataForType ? 0 : 5;
            v52 = PasteboardWebContentDataForType == 2 ? 1 : v67;
            if (v52)
              break;
          }
          if (v62 == ++v64)
          {
            v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v101, v120, 16);
            v52 = 0;
            if (v62)
              goto LABEL_144;
            goto LABEL_179;
          }
        }
      }
      else
      {
LABEL_163:
        v68 = 0;
        while (1)
        {
          if (*(_QWORD *)v102 != v63)
            objc_enumerationMutation(v60);
          if (!v119)
            goto LABEL_215;
          v69 = WebCore::Pasteboard::readPasteboardWebContentDataForType(a1, (uint64_t)a2, v38, *(__CFString **)(*((_QWORD *)&v101 + 1) + 8 * v68), (uint64_t)&v110, v41);
          v70 = v69 ? 0 : 5;
          v52 = v69 == 2 ? 1 : v70;
          if (v52)
            break;
          if (v62 == ++v68)
          {
            v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v101, v120, 16);
            v52 = 0;
            if (v62)
              goto LABEL_163;
            goto LABEL_179;
          }
        }
      }
      if (v52 == 5)
LABEL_178:
        v52 = 0;
LABEL_179:
      if (v60)
        CFRelease(v60);
LABEL_181:
      if (v119)
        WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&v110, v44);
      if ((v52 | 4) != 4)
        return;
LABEL_184:
      if (++v41 == v93)
        return;
    }
    if (WebCore::prefersAttachmentRepresentation((WebCore *)&v110, v42))
    {
      if (!v119)
        goto LABEL_215;
      if (v113)
      {
        v43 = *v112;
        if (*v112)
          *(_DWORD *)v43 += 2;
      }
      else
      {
        v43 = 0;
      }
      v106[0] = v43;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v38 + 184))(&v109, v38, v41, 1, v106, v99, *(_QWORD *)(a1 + 8));
      v45 = v109;
      if (v109)
      {
        WebCore::readURLAlongsideAttachmentIfNecessary((uint64_t)a2, v38, (WTF::String *)v106, v99, v41, *(_QWORD *)(a1 + 8));
        if (!v119)
          goto LABEL_215;
        v47 = v109;
        v48 = v116;
        if (v116)
        {
          if ((*((_BYTE *)v116 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v116 += 2;
            v108 = v48;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v116, v46);
            v108 = (WTF::StringImpl *)v121;
            if (!v119)
              goto LABEL_215;
          }
        }
        else
        {
          v108 = 0;
        }
        v105[0] = v117;
        v105[1] = v118;
        (*(void (**)(_QWORD *, WTF::StringImpl *, WTF::StringImpl **, WTF::StringImpl **, _OWORD *))(*a2 + 88))(a2, v47, v106, &v108, v105);
        v49 = v108;
        v108 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v44);
          else
            *(_DWORD *)v49 -= 2;
        }
        v50 = v109;
        v109 = 0;
        if (v50)
        {
          do
            v51 = __ldaxr((unsigned int *)v50);
          while (__stlxr(v51 - 1, (unsigned int *)v50));
          if (v51 == 1)
          {
            atomic_store(1u, (unsigned int *)v50);
            v71 = *((unsigned int *)v50 + 5);
            if ((_DWORD)v71)
            {
              v72 = *((_QWORD *)v50 + 1);
              v73 = v72 + 16 * v71;
              do
              {
                v74 = *(unsigned int **)(v72 + 8);
                *(_QWORD *)(v72 + 8) = 0;
                if (v74)
                {
                  do
                  {
                    v75 = __ldaxr(v74);
                    v76 = v75 - 1;
                  }
                  while (__stlxr(v76, v74));
                  if (!v76)
                  {
                    atomic_store(1u, v74);
                    v77 = v74[6];
                    if ((_DWORD)v77 != -1)
                      ((void (*)(__int128 *, unsigned int *))off_1E33542C8[v77])(&v121, v74 + 2);
                    v74[6] = -1;
                    WTF::fastFree((WTF *)v74, v44);
                  }
                }
                v72 += 16;
              }
              while (v72 != v73);
            }
            v78 = (WTF *)*((_QWORD *)v50 + 1);
            if ((WTF::StringImpl *)((char *)v50 + 24) != v78 && v78 != 0)
            {
              *((_QWORD *)v50 + 1) = 0;
              *((_DWORD *)v50 + 4) = 0;
              WTF::fastFree(v78, v44);
            }
            WTF::fastFree(v50, v44);
          }
        }
        v52 = 4;
      }
      else
      {
        v52 = 0;
      }
      v53 = v106[0];
      v106[0] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::destroy(v53, v44);
          if (v45)
            goto LABEL_181;
          goto LABEL_125;
        }
        *(_DWORD *)v53 -= 2;
      }
      if (v45)
        goto LABEL_181;
    }
LABEL_125:
    if (!v119)
      goto LABEL_215;
    goto LABEL_126;
  }
  v15 = WebCore::s_platformStrategies;
  v16 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v16)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v15 + 16) = v16;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 216))(v16, v99, *(_QWORD *)(a1 + 8));
  if (v17)
  {
    v18 = 0;
    v19 = v17;
    v20 = a5;
    v96 = (void *)*MEMORY[0x1E0CEC658];
    v94 = (void *)*MEMORY[0x1E0CEC518];
    v91 = (void *)*MEMORY[0x1E0CEC5C0];
    v89 = (void *)*MEMORY[0x1E0CEC4E8];
    while (1)
    {
      if (v20 && v18 != a4)
        goto LABEL_84;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 200))(&v110, v16, v18, v99, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8));
      if (!v119)
        return;
      if (v111)
      {
        v22 = *(WTF::StringImpl **)v110;
        if (*(_QWORD *)v110)
          *(_DWORD *)v22 += 2;
      }
      else
      {
        v22 = 0;
      }
      v109 = v22;
      if ((a3 & 1) != 0)
        break;
      {
        if (!byte_1ECE90A59)
          break;
        if (v22)
          v23 = *((_DWORD *)v22 + 1) == 0;
        else
          v23 = 1;
        v24 = !v23;
      }
      else
      {
        v24 = 0;
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
LABEL_32:
      if (v113)
      {
        v25 = *v112;
        if (*v112)
          *(_DWORD *)v25 += 2;
      }
      else
      {
        v25 = 0;
      }
      v108 = v25;
      if (!v24)
        goto LABEL_41;
      if (!WebCore::prefersAttachmentRepresentation((WebCore *)&v110, v21))
      {
        if (!v119)
          goto LABEL_215;
LABEL_41:
        if (v115)
        {
          v27 = v114;
          if ((a3 & 1) == 0)
          {
            v32 = 8 * v115;
            while (1)
            {
              if (*v27 && (WTF::StringImpl::operator NSString *(), *v27))
                v33 = (__CFString *)WTF::StringImpl::operator NSString *();
              else
                v33 = &stru_1E3487BC0;
              if (!v119)
                break;
              v34 = WebCore::Pasteboard::readPasteboardWebContentDataForType(a1, (uint64_t)a2, v16, v33, (uint64_t)&v110, v18);
              v26 = v34;
              if (!v34)
                goto LABEL_75;
              if (v34 == 2)
                goto LABEL_74;
              ++v27;
              v32 -= 8;
              if (!v32)
                goto LABEL_70;
            }
LABEL_215:
            __break(1u);
          }
          v28 = 8 * v115;
          while (1)
          {
            v29 = *v27 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
            if ((-[__CFString isEqualToString:](v29, "isEqualToString:", WebCore::WebArchivePboardType) & 1) != 0
              || (-[__CFString isEqualToString:](v29, "isEqualToString:", objc_msgSend(v96, "identifier")) & 1) != 0
              || (-[__CFString isEqualToString:](v29, "isEqualToString:", objc_msgSend(v94, "identifier")) & 1) != 0
              || (-[__CFString isEqualToString:](v29, "isEqualToString:", objc_msgSend(v91, "identifier")) & 1) != 0
              || -[__CFString isEqualToString:](v29, "isEqualToString:", objc_msgSend(v89, "identifier")))
            {
              if (*v27)
                v30 = (__CFString *)WTF::StringImpl::operator NSString *();
              else
                v30 = &stru_1E3487BC0;
              if (!v119)
                goto LABEL_215;
              v31 = WebCore::Pasteboard::readPasteboardWebContentDataForType(a1, (uint64_t)a2, v16, v30, (uint64_t)&v110, v18);
              v26 = v31;
              if (!v31)
                goto LABEL_75;
              if (v31 == 2)
                break;
            }
            ++v27;
            v28 -= 8;
            if (!v28)
              goto LABEL_70;
          }
LABEL_74:
          v26 = 1;
        }
        else
        {
LABEL_70:
          if (v24)
          {
            if (!v119)
              goto LABEL_215;
            *(_OWORD *)v106 = v117;
            v107 = v118;
            (*(void (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*a2 + 16))(a2, &v109, v106, &v108);
          }
          v26 = 0;
        }
        goto LABEL_75;
      }
      WebCore::readURLAlongsideAttachmentIfNecessary((uint64_t)a2, v16, (WTF::String *)&v108, v99, v18, *(_QWORD *)(a1 + 8));
      if (!v119)
        goto LABEL_215;
      v121 = v117;
      v122 = v118;
      (*(void (**)(_QWORD *, WTF::StringImpl **, __int128 *, WTF::StringImpl **))(*a2 + 16))(a2, &v109, &v121, &v108);
      v26 = 4;
LABEL_75:
      v35 = v108;
      v108 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v21);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = v109;
      v109 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v21);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (v119)
        WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&v110, v21);
      if ((v26 | 4) != 4)
        return;
LABEL_84:
      if (++v18 == v19)
        return;
    }
    v24 = 0;
    goto LABEL_32;
  }
}

void sub_195300660(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43,WTF *a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  WTF *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  WTF *v71;

  v61 = a44;
  a44 = 0;
  if (v61)
  {
    do
    {
      v62 = __ldaxr((unsigned int *)v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, (unsigned int *)v61));
    if (!v63)
    {
      atomic_store(1u, (unsigned int *)v61);
      v64 = *((unsigned int *)v61 + 5);
      if ((_DWORD)v64)
      {
        v65 = *((_QWORD *)v61 + 1);
        v66 = v65 + 16 * v64;
        do
        {
          v67 = *(unsigned int **)(v65 + 8);
          *(_QWORD *)(v65 + 8) = 0;
          if (v67)
          {
            do
            {
              v68 = __ldaxr(v67);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v67));
            if (!v69)
            {
              atomic_store(1u, v67);
              v70 = v67[6];
              if ((_DWORD)v70 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33542C8[v70])(&a43, v67 + 2);
              v67[6] = -1;
              WTF::fastFree((WTF *)v67, a2);
            }
          }
          v65 += 16;
        }
        while (v65 != v66);
      }
      v71 = (WTF *)*((_QWORD *)v61 + 1);
      if ((WTF *)((char *)v61 + 24) != v71 && v71 != 0)
      {
        *((_QWORD *)v61 + 1) = 0;
        *((_DWORD *)v61 + 4) = 0;
        WTF::fastFree(v71, a2);
      }
      WTF::fastFree(v61, a2);
    }
  }
  if (a39)
  {
    if (*(_DWORD *)a39 == 2)
      WTF::StringImpl::destroy(a39, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a39 -= 2;
  }
  if (a60)
    WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&a45, (WTF::StringImpl *)a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::prefersAttachmentRepresentation(WebCore *this, const WebCore::PasteboardItemInfo *a2)
{
  WTF::StringImpl *v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  if (!*((_DWORD *)this + 7))
    return 0;
  v2 = (WTF::StringImpl *)**((_QWORD **)this + 2);
  if (!v2)
    return 0;
  v3 = *((_DWORD *)v2 + 1);
  *(_DWORD *)v2 += 2;
  v4 = *((unsigned __int8 *)this + 112);
  if (v3)
    v5 = v4 == 1;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    goto LABEL_22;
  }
  if (v4 == 2 || !*((_BYTE *)this + 112) && (v7 = *((_QWORD *)this + 6)) != 0 && *(_DWORD *)(v7 + 4))
  {
    v6 = 1;
    goto LABEL_22;
  }
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", WTF::StringImpl::operator NSString *());
  v9 = v8;
  if (v8)
    CFRetain(v8);
  if (objc_msgSend(v9, "conformsToType:", *MEMORY[0x1E0CEC638])
    || (objc_msgSend(v9, "conformsToType:", *MEMORY[0x1E0CEC570]) & 1) != 0
    || (objc_msgSend(v9, "conformsToType:", *MEMORY[0x1E0CEC478]) & 1) != 0)
  {
    v6 = 1;
    if (!v9)
      goto LABEL_22;
    goto LABEL_19;
  }
  v6 = 0;
  if (v9)
LABEL_19:
    CFRelease(v9);
LABEL_22:
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  return v6;
}

void sub_1953009B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void WebCore::readURLAlongsideAttachmentIfNecessary(uint64_t a1, uint64_t a2, WTF::String *this, uint64_t a4, int a5, uint64_t a6)
{
  int v11;
  CFStringRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFStringRef inUTI[5];
  WTF::StringImpl *v17;

  WTF::String::createCFString(this);
  v11 = UTTypeConformsTo(inUTI[0], (CFStringRef)*MEMORY[0x1E0CA5CB0]);
  v12 = inUTI[0];
  inUTI[0] = 0;
  if (v12)
    CFRelease(v12);
  if (v11)
  {
    v17 = 0;
    (*(void (**)(CFStringRef *__return_ptr, uint64_t, _QWORD, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 192))(inUTI, a2, a5, a4, &v17, a6);
    v14 = (WTF::StringImpl *)inUTI[0];
    if (!inUTI[0])
      goto LABEL_11;
    if (HIDWORD(inUTI[0]->isa))
    {
      (*(void (**)(uint64_t, CFStringRef *, WTF::StringImpl **))(*(_QWORD *)a1 + 48))(a1, inUTI, &v17);
      v14 = (WTF::StringImpl *)inUTI[0];
      inUTI[0] = 0;
      if (!v14)
        goto LABEL_11;
    }
    else
    {
      inUTI[0] = 0;
    }
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
LABEL_11:
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
}

void sub_195300B08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (cf)
  {
    if (*(_DWORD *)cf == 2)
      WTF::StringImpl::destroy(cf, a2);
    else
      *(_DWORD *)cf -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Pasteboard::supportedWebContentPasteboardTypes(WebCore::Pasteboard *this)
{
  const void *v2;
  _QWORD v3[12];

  v3[11] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_129 & 1) == 0)
  {
    v3[1] = objc_msgSend((id)*MEMORY[0x1E0CEC658], "identifier", WebCore::WebArchivePboardType);
    v3[2] = objc_msgSend((id)*MEMORY[0x1E0CEC4E8], "identifier");
    v3[3] = objc_msgSend((id)*MEMORY[0x1E0CEC5C0], "identifier");
    v3[4] = objc_msgSend((id)*MEMORY[0x1E0CEC518], "identifier");
    v3[5] = objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier");
    v3[6] = objc_msgSend((id)*MEMORY[0x1E0CEC600], "identifier");
    v3[7] = objc_msgSend((id)*MEMORY[0x1E0CEC530], "identifier");
    v3[8] = objc_msgSend((id)*MEMORY[0x1E0CEC4F8], "identifier");
    v3[9] = objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier");
    v3[10] = objc_msgSend((id)*MEMORY[0x1E0CEC610], "identifier");
    v2 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 11);
    qword_1ECE81BC8 = (uint64_t)v2;
    if (v2)
      CFRetain(v2);
    _MergedGlobals_129 = 1;
  }
  return qword_1ECE81BC8;
}

uint64_t WebCore::Pasteboard::supportedFileUploadPasteboardTypes(WebCore::Pasteboard *this)
{
  uint64_t v1;
  _QWORD v3[4];

  v3[3] = *MEMORY[0x1E0C80C00];
  v1 = objc_msgSend((id)*MEMORY[0x1E0CEC528], "identifier");
  v3[1] = objc_msgSend((id)*MEMORY[0x1E0CEC498], "identifier", v1);
  v3[2] = objc_msgSend((id)*MEMORY[0x1E0CEC678], "identifier");
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 3);
}

BOOL WebCore::Pasteboard::hasData(WebCore::Pasteboard *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebCore::s_platformStrategies;
  v3 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v2 + 16) = v3;
  }
  return (*(unsigned int (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v3 + 216))(v3, (char *)this + 16, *((_QWORD *)this + 1)) != 0;
}

void WebCore::Pasteboard::clear(WebCore::Pasteboard *this, WTF **a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;

  WebCore::cocoaTypeFromHTMLClipboardType((WebCore *)&v11, a2);
  v3 = v11;
  if (v11)
  {
    v4 = WebCore::s_platformStrategies;
    v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v5)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v4 + 16) = v5;
    }
    MEMORY[0x19AEA5508](&v10, v3);
    v9 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, char *, _QWORD))(*(_QWORD *)v5 + 24))(v5, &v10, &v9, (char *)this + 16, *((_QWORD *)this + 1));
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    CFRelease(v3);
  }
}

void sub_195300EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  const void *v11;

  CFRelease(v11);
  _Unwind_Resume(a1);
}

__CFString *WebCore::cocoaTypeFromHTMLClipboardType(WebCore *this, WTF **a2)
{
  WTF::StringImpl *v4;
  __CFString *v5;
  WTF::StringImpl *v6;
  const __CFString *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __CFString *result;
  WTF::StringImpl *v11;

  WebCore::PlatformPasteboard::platformPasteboardTypeForSafeTypeForDOMToReadAndWrite(&v11, a2, 0);
  if (v11)
  {
    v5 = (__CFString *)WTF::StringImpl::operator NSString *();
    v6 = v11;
    v11 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        if (!v5)
          goto LABEL_7;
        goto LABEL_6;
      }
      *(_DWORD *)v6 -= 2;
    }
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    v5 = &stru_1E3487BC0;
  }
LABEL_6:
  if (-[__CFString length](v5, "length"))
  {
LABEL_14:
    *(_QWORD *)this = v5;
    return (__CFString *)CFRetain(v5);
  }
LABEL_7:
  if (*a2)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  WebCore::utiTypeFromCocoaType((WebCore *)&v11, v7);
  if (!v11)
    goto LABEL_23;
  v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v8);
      if (v5)
        goto LABEL_14;
      goto LABEL_19;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (v5)
    goto LABEL_14;
LABEL_19:
  if (!*a2)
  {
LABEL_23:
    v5 = &stru_1E3487BC0;
    goto LABEL_14;
  }
  result = (__CFString *)WTF::StringImpl::operator NSString *();
  v5 = result;
  *(_QWORD *)this = result;
  if (result)
    return (__CFString *)CFRetain(v5);
  return result;
}

void sub_195301040(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::Pasteboard::clear(WebCore::Pasteboard *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = WebCore::s_platformStrategies;
  v3 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v2 + 16) = v3;
  }
  v7 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, char *, _QWORD))(*(_QWORD *)v3 + 24))(v3, &v8, &v7, (char *)this + 16, *((_QWORD *)this + 1));
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195301124(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Pasteboard::readPlatformValuesAsStrings(WebCore::Pasteboard *this@<X0>, WTF **a2@<X1>, const WTF::String *a3@<X3>, uint64_t a4@<X2>, WTF **a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  unint64_t v19;
  __CFString *v20;
  unint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  unint64_t v33;
  void *v34;
  WTF::StringImpl *v35;

  v10 = WebCore::s_platformStrategies;
  v11 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v11)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v10 + 16) = v11;
  }
  WebCore::cocoaTypeFromHTMLClipboardType((WebCore *)&v34, a2);
  v12 = v34;
  if (!v34)
  {
    *a5 = 0;
    a5[1] = 0;
    return;
  }
  MEMORY[0x19AEA5508](&v35, v34);
  (*(void (**)(WTF **__return_ptr, uint64_t, WTF::StringImpl **, const WTF::String *, _QWORD))(*(_QWORD *)v11 + 72))(&v32, v11, &v35, a3, *((_QWORD *)this + 1));
  v14 = v35;
  v35 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (!objc_msgSend(v12, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC590], "identifier")))
  {
LABEL_32:
    v26 = WebCore::s_platformStrategies;
    v27 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v27)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v26 + 16) = v27;
    }
    if ((*(uint64_t (**)(uint64_t, const WTF::String *, _QWORD))(*(_QWORD *)v27 + 80))(v27, a3, 0) == a4)
    {
      *a5 = v32;
      a5[1] = (WTF *)v33;
LABEL_38:
      CFRelease(v12);
      return;
    }
    *a5 = 0;
    a5[1] = 0;
    v29 = v32;
    if (HIDWORD(v33))
    {
      v30 = 8 * HIDWORD(v33);
      do
      {
        v31 = *(WTF::StringImpl **)v29;
        *(_QWORD *)v29 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v28);
          else
            *(_DWORD *)v31 -= 2;
        }
        v29 = (WTF *)((char *)v29 + 8);
        v30 -= 8;
      }
      while (v30);
      v29 = v32;
      if (!v32)
        goto LABEL_38;
    }
    else if (!v32)
    {
      goto LABEL_38;
    }
    v32 = 0;
    LODWORD(v33) = 0;
    WTF::fastFree(v29, v28);
    goto LABEL_38;
  }
  v16 = HIDWORD(v33);
  if (!HIDWORD(v33))
  {
    v17 = 0;
    goto LABEL_28;
  }
  if (!(HIDWORD(v33) >> 29))
  {
    v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v33)));
    if (HIDWORD(v33))
    {
      v18 = 0;
      v19 = 0;
      do
      {
        if (*((_QWORD *)v32 + v19))
          v20 = (__CFString *)WTF::StringImpl::operator NSString *();
        else
          v20 = &stru_1E3487BC0;
        MEMORY[0x19AEA5508](&v35, -[__CFString precomposedStringWithCanonicalMapping](v20, "precomposedStringWithCanonicalMapping"));
        v21 = v19 + 1;
        *((_QWORD *)v17 + v19) = v35;
        v18 -= 8;
        v19 = v21;
      }
      while (v21 < HIDWORD(v33));
      if (HIDWORD(v33))
      {
        v22 = v32;
        v23 = 8 * HIDWORD(v33);
        do
        {
          v24 = *(WTF::StringImpl **)v22;
          *(_QWORD *)v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v15);
            else
              *(_DWORD *)v24 -= 2;
          }
          v22 = (WTF *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
      }
      goto LABEL_29;
    }
LABEL_28:
    LODWORD(v21) = 0;
LABEL_29:
    v25 = v32;
    if (v32)
    {
      v32 = 0;
      LODWORD(v33) = 0;
      WTF::fastFree(v25, v15);
    }
    v32 = v17;
    v33 = __PAIR64__(v21, v16);
    goto LABEL_32;
  }
  __break(0xC471u);
}

void sub_19530142C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11, uint64_t a12, WTF::StringImpl *a13)
{
  const void *v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  if (v15)
  {
    v17 = 8 * v15;
    v18 = (WTF::StringImpl **)v14;
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      ++v18;
      v17 -= 8;
    }
    while (v17);
  }
  if (v14)
    WTF::fastFree(v14, a2);
  if (a11)
  {
    v20 = a9;
    v21 = 8 * a11;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  CFRelease(v13);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebCore::Pasteboard::addHTMLClipboardTypesForCocoaType(uint64_t *a1, WTF **a2)
{
  __CFString *v4;
  const WTF::StringImpl *v5;
  __CFString *v6;
  __CFString *v7;
  WTF::StringImpl **result;
  __CFString *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __CFString *v12;
  const WTF::String *v13;
  const WTF::StringImpl *v14;
  const __CFString *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BYTE v18[24];

  if (*a2)
    v4 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E3487BC0;
  if ((-[__CFString isEqualToString:](v4, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC590], "identifier")) & 1) != 0)
    return WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, (WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, v5, (uint64_t)v18);
  v6 = *a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
  if ((-[__CFString isEqualToString:](v6, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC630], "identifier")) & 1) != 0)
    return WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, (WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, v5, (uint64_t)v18);
  v7 = *a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
  if (-[__CFString isEqualToString:](v7, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC628], "identifier")))return WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, (WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, v5, (uint64_t)v18);
  if (*a2)
    v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E3487BC0;
  if (-[__CFString isEqualToString:](v9, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier")))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, &v17, v10, (uint64_t)v18);
LABEL_25:
    result = (WTF::StringImpl **)v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (*a2)
    v12 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E3487BC0;
  if (-[__CFString isEqualToString:](v12, "isEqualToString:", objc_msgSend((id)*MEMORY[0x1E0CEC518], "identifier")))WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, (WTF::StringImpl **)&WebCore::textHTMLContentTypeAtomData, v14, (uint64_t)v18);
  result = (WTF::StringImpl **)WebCore::cocoaTypeToImageType(a2, v13);
  if (!(_DWORD)result)
  {
    if (*a2)
      v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E3487BC0;
    WebCore::utiTypeFromCocoaType((WebCore *)&v17, v15);
    if (v17 && *((_DWORD *)v17 + 1))
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, &v17, v16, (uint64_t)v18);
    else
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(a1, a2, v16, (uint64_t)v18);
    goto LABEL_25;
  }
  return result;
}

void sub_1953017A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::utiTypeFromCocoaType(WebCore *this, const __CFString *a2)
{
  const __CFString *v3;
  const __CFString *PreferredIdentifierForTag;
  const __CFString *v5;
  CFStringRef v6;

  v3 = (const __CFString *)*MEMORY[0x1E0CA5A90];
  PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A90], a2, 0);
  if (PreferredIdentifierForTag)
  {
    v5 = PreferredIdentifierForTag;
    v6 = UTTypeCopyPreferredTagWithClass(PreferredIdentifierForTag, v3);
    MEMORY[0x19AEA5508](this, v6);
    if (v6)
      CFRelease(v6);
    CFRelease(v5);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_195301A18(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::Pasteboard::writeString(WebCore::Pasteboard *this, WTF **a2, const WTF::String *a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;

  WebCore::cocoaTypeFromHTMLClipboardType((WebCore *)&v11, a2);
  v5 = v11;
  if (v11)
  {
    v6 = WebCore::s_platformStrategies;
    v7 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v7)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v6 + 16) = v7;
    }
    MEMORY[0x19AEA5508](&v10, v5);
    (*(void (**)(uint64_t, WTF::StringImpl **, const WTF::String *, char *, _QWORD))(*(_QWORD *)v7 + 24))(v7, &v10, a3, (char *)this + 16, *((_QWORD *)this + 1));
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    CFRelease(v5);
  }
}

void sub_195301B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  const void *v9;

  CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebCore::Pasteboard::readFilePaths(WebCore::Pasteboard *this@<X0>, WTF **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  int v20;
  char v21;
  WTF *v22;
  WTF *v23;

  v22 = 0;
  v23 = 0;
  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 16) = v5;
  }
  v6 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v5 + 216))(v5, (char *)this + 16, *((_QWORD *)this + 1));
  if (!v6)
  {
LABEL_22:
    *a2 = v22;
    a2[1] = v23;
    return;
  }
  v7 = 0;
  v8 = v6;
  while (1)
  {
    (*(void (**)(WTF::StringImpl ***__return_ptr, uint64_t, uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)v5 + 200))(&v19, v5, v7, (char *)this + 16, *((_QWORD *)this + 3), *((_QWORD *)this + 1));
    if (!v21)
      break;
    if (v20)
    {
      v10 = *v19;
      if (*v19)
      {
        *(_DWORD *)v10 += 2;
        v18 = v10;
        if (*((_DWORD *)v10 + 1))
        {
          LODWORD(v11) = HIDWORD(v23);
          if (HIDWORD(v23) == (_DWORD)v23)
          {
            v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v18);
            v11 = HIDWORD(v23);
            v13 = v22;
            v14 = *v12;
            *v12 = 0;
            *((_QWORD *)v13 + v11) = v14;
          }
          else
          {
            v18 = 0;
            *((_QWORD *)v22 + HIDWORD(v23)) = v10;
          }
          HIDWORD(v23) = v11 + 1;
          v10 = v18;
          v18 = 0;
          if (!v10)
            goto LABEL_16;
        }
        else
        {
          v18 = 0;
        }
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
LABEL_16:
    if (v21)
      WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&v19, v9);
    if (v8 == ++v7)
      goto LABEL_22;
  }
  *a2 = 0;
  a2[1] = 0;
  v15 = v22;
  if (!HIDWORD(v23))
  {
    if (!v22)
      return;
LABEL_34:
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v15, v9);
    return;
  }
  v16 = 8 * HIDWORD(v23);
  do
  {
    v17 = *(WTF::StringImpl **)v15;
    *(_QWORD *)v15 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v9);
      else
        *(_DWORD *)v17 -= 2;
    }
    v15 = (WTF *)((char *)v15 + 8);
    v16 -= 8;
  }
  while (v16);
  v15 = v22;
  if (v22)
    goto LABEL_34;
}

void sub_195301D40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a26)
    WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&a11, a2);
  v28 = *(unsigned int *)(v26 - 52);
  v29 = *(WTF **)(v26 - 64);
  if ((_DWORD)v28)
  {
    v30 = 8 * v28;
    do
    {
      v31 = *(WTF::StringImpl **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, a2);
        else
          *(_DWORD *)v31 -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
    v29 = *(WTF **)(v26 - 64);
    if (!v29)
LABEL_9:
      _Unwind_Resume(exception_object);
  }
  else if (!v29)
  {
    goto LABEL_9;
  }
  *(_QWORD *)(v26 - 64) = 0;
  *(_DWORD *)(v26 - 56) = 0;
  WTF::fastFree(v29, a2);
  goto LABEL_9;
}

WebCore::PlatformPasteboard *WebCore::PlatformPasteboard::PlatformPasteboard(WebCore::PlatformPasteboard *this)
{
  const void *v2;

  v2 = (const void *)objc_msgSend((id)PAL::getUIPasteboardClass[0](this), "generalPasteboard");
  *(_QWORD *)this = v2;
  if (v2)
    CFRetain(v2);
  return this;
}

{
  const void *v2;

  v2 = (const void *)objc_msgSend((id)PAL::getUIPasteboardClass[0](this), "generalPasteboard");
  *(_QWORD *)this = v2;
  if (v2)
    CFRetain(v2);
  return this;
}

WebCore::PlatformPasteboard *WebCore::PlatformPasteboard::PlatformPasteboard(WebCore::PlatformPasteboard *this, WTF **a2)
{
  const WTF::StringImpl *v4;
  PAL *v5;
  WTF::StringImpl *v6;
  int v7;
  WebItemProviderPasteboard *v8;
  WebItemProviderPasteboard *v9;
  const void *v10;
  WTF::StringImpl *v12;

  *(_QWORD *)this = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = (PAL *)WTF::equal(*a2, v12, v4);
  v7 = (int)v5;
  if (!v12)
  {
LABEL_4:
    if ((_DWORD)v5)
      goto LABEL_5;
LABEL_8:
    v8 = (WebItemProviderPasteboard *)objc_msgSend((id)PAL::getUIPasteboardClass[0](v5), "generalPasteboard");
    v9 = v8;
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_4;
  }
  v5 = (PAL *)WTF::StringImpl::destroy(v12, v6);
  if (!v7)
    goto LABEL_8;
LABEL_5:
  v8 = +[WebItemProviderPasteboard sharedInstance](WebItemProviderPasteboard, "sharedInstance");
  v9 = v8;
  if (!v8)
    goto LABEL_10;
LABEL_9:
  CFRetain(v8);
LABEL_10:
  v10 = *(const void **)this;
  *(_QWORD *)this = v9;
  if (v10)
    CFRelease(v10);
  return this;
}

void sub_195301F40(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  const void **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  int v7;
  const void *v8;

  v4 = v3;
  if (v4)
  {
    v6 = v4;
    v7 = *(_DWORD *)v4 - 2;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, a2);
  }
  v8 = *v2;
  *v2 = 0;
  if (v8)
    CFRelease(v8);
  _Unwind_Resume(exception_object);
}

double WebCore::PlatformPasteboard::getTypes(id *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  double result;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;

  WTF::makeVector<WTF::String>((void *)objc_msgSend(*a1, "pasteboardTypes"), (uint64_t)&v10);
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v7 = *(WTF::StringImpl ***)a2;
    v8 = 8 * v4;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v3);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v5 = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v5, v3);
  }
  *(_QWORD *)a2 = v10;
  result = v11;
  *(double *)(a2 + 8) = v11;
  return result;
}

void sub_195302038(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11)
{
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a11)
  {
    v12 = a9;
    v13 = 8 * a11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformPasteboard::bufferForType(id *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  uint64_t v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  WebCore::PlatformPasteboard::readBuffer(this, 0, 1, a2, &v6);
  a3[2] = v6;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  a3[1] = v5;
}

void sub_195302104(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  _Unwind_Resume(a1);
}

void WebCore::PlatformPasteboard::readBuffer(id *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  __CFString *v10;
  uint64_t v11;
  id v12;
  const __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WebCore::FragmentedSharedBuffer *v19;

  if (*a4)
    v10 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E3487BC0;
  if (-[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("com.apple.uikit.image")))
    goto LABEL_17;
  if (a3)
  {
    if (a2 < 0)
      goto LABEL_17;
  }
  else
  {
    a2 = 0;
  }
  if (a2 >= objc_msgSend(*a1, "numberOfItems"))
  {
LABEL_17:
    *a5 = 0;
    return;
  }
  v11 = objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndex:", a2);
  v12 = *a1;
  if (*a4)
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E3487BC0;
  v14 = (void *)objc_msgSend(v12, "dataForPasteboardType:inItemSet:", v13, v11);
  v15 = v14;
  if (v14)
    CFRetain(v14);
  if (objc_msgSend(v15, "count"))
  {
    v19 = (WebCore::FragmentedSharedBuffer *)objc_msgSend(v15, "firstObject");
    if (v19)
    {
      WebCore::SharedBuffer::create<NSData *&>(&v19, &v18);
      v16 = v18;
      v18 = 0;
      *a5 = v16;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v18, v17);
      if (!v15)
        return;
LABEL_20:
      CFRelease(v15);
      return;
    }
  }
  *a5 = 0;
  if (v15)
    goto LABEL_20;
}

void sub_19530224C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformPasteboard::performAsDataOwner(PAL *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[5];

  if (((_DWORD)a1 - 1) < 3)
    v3 = ((_BYTE)a1 - 1) + 1;
  else
    v3 = 0;
  v4 = (void *)PAL::getUIPasteboardClass[0](a1);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN7WebCore18PlatformPasteboard18performAsDataOwnerENS_13DataOwnerTypeEON3WTF8FunctionIFvvEEE_block_invoke;
  v6[3] = &__block_descriptor_40_e5_v8__0l;
  v6[4] = a2;
  return objc_msgSend(v4, "_performAsDataOwner:block:", v3, v6);
}

uint64_t ___ZN7WebCore18PlatformPasteboard18performAsDataOwnerENS_13DataOwnerTypeEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32));
}

uint64_t WebCore::PlatformPasteboard::numberOfFiles(id *this)
{
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(*this, "numberOfFiles");
  else
    return 0;
}

void WebCore::PlatformPasteboard::informationForItemAtIndex(id *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  void *v8;
  void *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  double v67;
  double v68;
  uint64_t v70;
  uint64_t v71;
  WebCore::IOSApplication *v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::IOSApplication *isMobileMail;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  void *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const __CFString *v87;
  uint64_t v88;
  const __CFString *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  WTF *v112;
  WTF::StringImpl *v113;
  WTF *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  id *v119;
  const __CFString *v120;
  const __CFString *v121;
  const __CFString *inConformsToUTI;
  _QWORD *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[40];
  __int128 v146;
  __int16 v147;
  WTF *v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  _BYTE v152[128];
  _BYTE v153[128];
  _BYTE v154[128];
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v151 = a2;
  if (objc_msgSend(*this, "numberOfItems") <= a2 || objc_msgSend(*this, "changeCount") != a3)
  {
    *a4 = 0;
    a4[120] = 0;
    return;
  }
  v145[32] = 0;
  LOBYTE(v146) = 0;
  BYTE8(v146) = 0;
  v147 = 0;
  v143 = 0u;
  v144 = 0u;
  memset(v145, 0, 25);
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v8 = (void *)objc_msgSend((id)objc_msgSend(*this, "itemProviders"), "objectAtIndex:", a2);
  v119 = this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v124 = 0;
    v9 = (void *)objc_msgSend(*this, "fileUploadURLsAtIndex:fileTypes:", a2, &v124);
    v10 = objc_msgSend(v9, "count");
    v11 = v10;
    if (v10)
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195302D80);
      }
      v12 = WTF::fastMalloc((WTF *)(8 * v10));
      DWORD2(v143) = v11;
      *(_QWORD *)&v143 = v12;
    }
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v13 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v139, v155, 16, a4);
    if (v13)
    {
      v14 = *(_QWORD *)v140;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v140 != v14)
            objc_enumerationMutation(v9);
          v16 = objc_msgSend(*(id *)(*((_QWORD *)&v139 + 1) + 8 * v15), "path");
          v17 = HIDWORD(v143);
          if (HIDWORD(v143) == DWORD2(v143))
          {
            v18 = HIDWORD(v143) + ((unint64_t)HIDWORD(v143) >> 2);
            if (v18 >= 0x10)
              v19 = v18 + 1;
            else
              v19 = 16;
            if (v19 <= (unint64_t)HIDWORD(v143) + 1)
              v20 = HIDWORD(v143) + 1;
            else
              v20 = v19;
            if (v20 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195302D68);
            }
            v21 = (void *)v143;
            v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
            DWORD2(v143) = v20;
            *(_QWORD *)&v143 = v22;
            memcpy(v22, v21, 8 * v17);
            if (v21)
            {
              if ((void *)v143 == v21)
              {
                *(_QWORD *)&v143 = 0;
                DWORD2(v143) = 0;
              }
              WTF::fastFree((WTF *)v21, v23);
            }
            v24 = v143 + 8 * HIDWORD(v143);
          }
          else
          {
            v24 = v143 + 8 * HIDWORD(v143);
          }
          MEMORY[0x19AEA5508](v24, v16);
          ++HIDWORD(v143);
          ++v15;
        }
        while (v13 != v15);
        v25 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v139, v155, 16);
        v13 = v25;
      }
      while (v25);
    }
    v26 = -[WTF::StringImpl count](v124, "count");
    v27 = v26;
    if (v26)
    {
      if (v26 >> 29)
      {
LABEL_158:
        __break(0xC471u);
        JUMPOUT(0x195302D58);
      }
      v28 = WTF::fastMalloc((WTF *)(8 * v26));
      DWORD2(v144) = v27;
      *(_QWORD *)&v144 = v28;
    }
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v29 = v124;
    v30 = -[WTF::StringImpl countByEnumeratingWithState:objects:count:](v124, "countByEnumeratingWithState:objects:count:", &v135, v154, 16);
    if (v30)
    {
      v31 = *(_QWORD *)v136;
      do
      {
        v32 = 0;
        do
        {
          if (*(_QWORD *)v136 != v31)
            objc_enumerationMutation(v29);
          v33 = *(_QWORD *)(*((_QWORD *)&v135 + 1) + 8 * v32);
          v34 = HIDWORD(v144);
          if (HIDWORD(v144) == DWORD2(v144))
          {
            v35 = HIDWORD(v144) + ((unint64_t)HIDWORD(v144) >> 2);
            if (v35 >= 0x10)
              v36 = v35 + 1;
            else
              v36 = 16;
            if (v36 <= (unint64_t)HIDWORD(v144) + 1)
              v37 = HIDWORD(v144) + 1;
            else
              v37 = v36;
            if (v37 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195302D70);
            }
            v38 = (void *)v144;
            v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
            DWORD2(v144) = v37;
            *(_QWORD *)&v144 = v39;
            memcpy(v39, v38, 8 * v34);
            if (v38)
            {
              if ((void *)v144 == v38)
              {
                *(_QWORD *)&v144 = 0;
                DWORD2(v144) = 0;
              }
              WTF::fastFree((WTF *)v38, v40);
            }
            v41 = v144 + 8 * HIDWORD(v144);
          }
          else
          {
            v41 = v144 + 8 * HIDWORD(v144);
          }
          MEMORY[0x19AEA5508](v41, v33);
          ++HIDWORD(v144);
          ++v32;
        }
        while (v30 != v32);
        v42 = -[WTF::StringImpl countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v135, v154, 16);
        v30 = v42;
      }
      while (v42);
    }
  }
  else
  {
    v43 = (void *)objc_msgSend(v8, "web_fileUploadContentTypes");
    v44 = objc_msgSend(v43, "count");
    if (v44)
    {
      if (v44 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195302D88);
      }
      DWORD2(v144) = v44;
      *(_QWORD *)&v144 = WTF::fastMalloc((WTF *)(8 * v44));
    }
    v45 = objc_msgSend(v43, "count", a4);
    if (v45)
    {
      if (v45 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195302D90);
      }
      DWORD2(v143) = v45;
      *(_QWORD *)&v143 = WTF::fastMalloc((WTF *)(8 * v45));
    }
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v46 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v131, v153, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v132;
      do
      {
        v48 = 0;
        do
        {
          if (*(_QWORD *)v132 != v47)
            objc_enumerationMutation(v43);
          v49 = *(_QWORD *)(*((_QWORD *)&v131 + 1) + 8 * v48);
          v50 = HIDWORD(v144);
          if (HIDWORD(v144) == DWORD2(v144))
          {
            v51 = HIDWORD(v144) + ((unint64_t)HIDWORD(v144) >> 2);
            if (v51 >= 0x10)
              v52 = v51 + 1;
            else
              v52 = 16;
            if (v52 <= (unint64_t)HIDWORD(v144) + 1)
              v53 = HIDWORD(v144) + 1;
            else
              v53 = v52;
            if (v53 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195302D60);
            }
            v54 = (void *)v144;
            v55 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
            DWORD2(v144) = v53;
            *(_QWORD *)&v144 = v55;
            memcpy(v55, v54, 8 * v50);
            if (v54)
            {
              if ((void *)v144 == v54)
              {
                *(_QWORD *)&v144 = 0;
                DWORD2(v144) = 0;
              }
              WTF::fastFree((WTF *)v54, v56);
            }
            v57 = v144 + 8 * HIDWORD(v144);
          }
          else
          {
            v57 = v144 + 8 * HIDWORD(v144);
          }
          MEMORY[0x19AEA5508](v57, v49);
          ++HIDWORD(v144);
          v124 = 0;
          LODWORD(v59) = HIDWORD(v143);
          if (HIDWORD(v143) == DWORD2(v143))
          {
            v61 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v143, HIDWORD(v143) + 1, (unint64_t)&v124);
            v59 = HIDWORD(v143);
            v62 = v143;
            v63 = *v61;
            *v61 = 0;
            *(_QWORD *)(v62 + 8 * v59) = v63;
          }
          else
          {
            *(_QWORD *)(v143 + 8 * HIDWORD(v143)) = 0;
          }
          HIDWORD(v143) = v59 + 1;
          v60 = v124;
          v124 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v58);
            else
              *(_DWORD *)v60 -= 2;
          }
          ++v48;
        }
        while (v46 != v48);
        v64 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v131, v153, 16);
        v46 = v64;
      }
      while (v64);
    }
  }
  v65 = objc_msgSend(v8, "preferredPresentationStyle");
  v66 = v65 == 1;
  if (v65 == 2)
    v66 = 2;
  v150 = v66;
  objc_msgSend(v8, "preferredPresentationSize");
  if (v68 != *MEMORY[0x1E0C9D820] || v67 != *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    objc_msgSend(v8, "preferredPresentationSize");
    v71 = v70;
    v72 = (WebCore::IOSApplication *)objc_msgSend(v8, "preferredPresentationSize");
    v74 = v73;
    isMobileMail = (WebCore::IOSApplication *)WebCore::IOSApplication::isMobileMail(v72);
    if ((isMobileMail & 1) != 0
      || WebCore::IOSApplication::isMailCompositionService(isMobileMail))
    {
      v76 = 0;
      v74 = 0;
    }
    else
    {
      v76 = 1;
    }
    *(_QWORD *)&v145[24] = v71;
    v145[32] = 1;
    *(_QWORD *)&v146 = v74;
    *((_QWORD *)&v146 + 1) = v76;
  }
  HIBYTE(v147) = objc_msgSend(v8, "web_containsFileURLAndFileUploadContent");
  MEMORY[0x19AEA5508](&v124, objc_msgSend(v8, "suggestedName"));
  v78 = v124;
  v124 = 0;
  v79 = *(WTF::StringImpl **)&v145[16];
  *(_QWORD *)&v145[16] = v78;
  if (v79)
  {
    v80 = *(_DWORD *)v79 - 2;
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::destroy(v79, v77);
      v79 = v124;
      v124 = 0;
      if (!v79)
        goto LABEL_105;
      v80 = *(_DWORD *)v79 - 2;
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::destroy(v79, v117);
        goto LABEL_105;
      }
    }
    *(_DWORD *)v79 = v80;
  }
LABEL_105:
  v81 = (void *)objc_msgSend(v8, "registeredTypeIdentifiers");
  v130 = v81;
  v82 = objc_msgSend(v81, "count");
  v83 = v82;
  if (v82)
  {
    if (v82 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195302D78);
    }
    v84 = WTF::fastMalloc((WTF *)(8 * v82));
    *(_DWORD *)&v145[8] = v83;
    *(_QWORD *)v145 = v84;
  }
  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v85 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v126, v152, 16);
  if (v85)
  {
    v86 = *(_QWORD *)v127;
    v87 = (const __CFString *)*MEMORY[0x1E0CA5C88];
    inConformsToUTI = (const __CFString *)*MEMORY[0x1E0CA5C90];
    v121 = (const __CFString *)*MEMORY[0x1E0CA5C48];
    v120 = (const __CFString *)*MEMORY[0x1E0CA5B50];
    do
    {
      v88 = 0;
      do
      {
        if (*(_QWORD *)v127 != v86)
          objc_enumerationMutation(v81);
        v89 = *(const __CFString **)(*((_QWORD *)&v126 + 1) + 8 * v88);
        v90 = *(unsigned int *)&v145[12];
        if (*(_DWORD *)&v145[12] == *(_DWORD *)&v145[8])
        {
          v91 = *(unsigned int *)&v145[12] + ((unint64_t)*(unsigned int *)&v145[12] >> 2);
          if (v91 >= 0x10)
            v92 = v91 + 1;
          else
            v92 = 16;
          if (v92 <= (unint64_t)*(unsigned int *)&v145[12] + 1)
            v93 = *(unsigned int *)&v145[12] + 1;
          else
            v93 = v92;
          if (v93 >> 29)
            goto LABEL_158;
          v94 = *(void **)v145;
          v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
          *(_DWORD *)&v145[8] = v93;
          *(_QWORD *)v145 = v95;
          memcpy(v95, v94, 8 * v90);
          if (v94)
          {
            if (*(void **)v145 == v94)
            {
              *(_QWORD *)v145 = 0;
              *(_DWORD *)&v145[8] = 0;
            }
            WTF::fastFree((WTF *)v94, v96);
          }
          v97 = *(_QWORD *)v145 + 8 * *(unsigned int *)&v145[12];
        }
        else
        {
          v97 = *(_QWORD *)v145 + 8 * *(unsigned int *)&v145[12];
        }
        MEMORY[0x19AEA5508](v97, v89);
        ++*(_DWORD *)&v145[12];
        if (UTTypeIsDeclared(v89)
          && !UTTypeConformsTo(v89, v87)
          && !UTTypeConformsTo(v89, inConformsToUTI)
          && !UTTypeConformsTo(v89, v121)
          && !UTTypeConformsTo(v89, v120))
        {
          LOBYTE(v147) = 1;
        }
        ++v88;
      }
      while (v85 != v88);
      v98 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v126, v152, 16);
      v85 = v98;
    }
    while (v98);
  }
  v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v99 = off_1E33542F8;
  v99[1] = &v130;
  v99[2] = v119;
  v99[3] = &v151;
  v123 = v99;
  WebCore::webSafeTypes(&v124, v81, 1, &v123);
  if (HIDWORD(v149))
  {
    v114 = v148;
    v115 = 8 * HIDWORD(v149);
    do
    {
      v116 = *(WTF::StringImpl **)v114;
      *(_QWORD *)v114 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
          WTF::StringImpl::destroy(v116, v100);
        else
          *(_DWORD *)v116 -= 2;
      }
      v114 = (WTF *)((char *)v114 + 8);
      v115 -= 8;
    }
    while (v115);
  }
  v101 = v148;
  if (v148)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree(v101, v100);
  }
  v102 = v124;
  v124 = 0;
  v148 = v102;
  v103 = v125;
  v125 = 0;
  v149 = v103;
  (*(void (**)(_QWORD *))(*v99 + 8))(v99);
  v104 = v143;
  *(_QWORD *)&v143 = 0;
  *(_QWORD *)v118 = v104;
  v105 = *((_QWORD *)&v143 + 1);
  *((_QWORD *)&v143 + 1) = 0;
  *(_QWORD *)(v118 + 8) = v105;
  v106 = v144;
  *(_QWORD *)&v144 = 0;
  *(_QWORD *)(v118 + 16) = v106;
  v107 = *((_QWORD *)&v144 + 1);
  *((_QWORD *)&v144 + 1) = 0;
  *(_QWORD *)(v118 + 24) = v107;
  v108 = *(_QWORD *)v145;
  *(_QWORD *)v145 = 0;
  *(_QWORD *)(v118 + 32) = v108;
  v109 = *(_QWORD *)&v145[8];
  *(_QWORD *)&v145[8] = 0;
  *(_QWORD *)(v118 + 40) = v109;
  *(_QWORD *)(v118 + 48) = *(_QWORD *)&v145[16];
  v110 = *(_OWORD *)&v145[24];
  v111 = v146;
  *(_WORD *)(v118 + 88) = v147;
  *(_OWORD *)(v118 + 72) = v111;
  *(_OWORD *)(v118 + 56) = v110;
  v112 = v148;
  *(_QWORD *)&v145[16] = 0;
  v148 = 0;
  *(_QWORD *)(v118 + 96) = v112;
  *(_QWORD *)&v110 = v149;
  v149 = 0;
  *(_QWORD *)(v118 + 104) = v110;
  *(_BYTE *)(v118 + 112) = v150;
  *(_BYTE *)(v118 + 120) = 1;
  WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&v143, v113);
}

void sub_195302D9C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl **a15, int a16, unsigned int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  WTF::StringImpl **v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;

  if (a17)
  {
    v54 = a15;
    v55 = 8 * a17;
    do
    {
      v56 = *v54;
      *v54 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, a2);
        else
          *(_DWORD *)v56 -= 2;
      }
      ++v54;
      v55 -= 8;
    }
    while (v55);
  }
  if (a15)
    WTF::fastFree((WTF *)a15, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  WebCore::PasteboardItemInfo::~PasteboardItemInfo((WebCore::PasteboardItemInfo *)&a52, v57);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformPasteboard::changeCount(id *this)
{
  return objc_msgSend(*this, "changeCount");
}

_QWORD *WebCore::webSafeTypes(_QWORD *a1, void *a2, int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int data;
  int v19;
  WTF::StringImpl ***v20;
  int i;
  int v22;
  WTF::StringImpl ***v23;
  WTF **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const char *v27;
  int v28;
  CFStringRef v29;
  WTF::StringImpl *v30;
  const WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  WTF::StringImpl **v37;
  CFStringRef v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  WTF::StringImpl ***v43;
  int j;
  int v45;
  WTF **v46;
  CFStringRef v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl ***v53;
  BOOL v54;
  WTF::StringImpl ***v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v63;
  const __CFString *v64;
  uint64_t v66;
  const __CFString *v67;
  const __CFString *inConformsToUTI;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  CFStringRef inUTI;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v70, v78, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v71;
    inConformsToUTI = (const __CFString *)*MEMORY[0x1E0CA5C20];
    v67 = (const __CFString *)*MEMORY[0x1E0CA5B78];
    v64 = (const __CFString *)*MEMORY[0x1E0CA5C40];
    v63 = (const __CFString *)*MEMORY[0x1E0CA5B50];
    v7 = 0x1E0CB3000uLL;
    v59 = (const __CFString *)*MEMORY[0x1E0CA5C10];
    v60 = (const __CFString *)*MEMORY[0x1E0CA5C90];
    v66 = *MEMORY[0x1E0CA5B48];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v71 != v6)
          objc_enumerationMutation(a2);
        v9 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v8);
        if ((objc_msgSend(v9, "isEqualToString:", objc_msgSend(*(id *)(v7 + 2368), "stringWithUTF8String:", "com.apple.WebKit.custom-pasteboard-data", v59)) & 1) != 0)goto LABEL_97;
        MEMORY[0x19AEA5508](&inUTI, v9);
        if ((WTF::equal((WTF *)inUTI, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v10) & 1) != 0
          || (WTF::equal((WTF *)inUTI, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v12) & 1) != 0)
        {
          v13 = 1;
        }
        else
        {
          v13 = MEMORY[0x19AEA53F4](inUTI, "text/uri-list", 13);
        }
        v14 = (WTF::StringImpl *)inUTI;
        inUTI = 0;
        if (!v14)
          goto LABEL_14;
        if (*(_DWORD *)v14 != 2)
        {
          *(_DWORD *)v14 -= 2;
LABEL_14:
          if (v13)
            goto LABEL_15;
          goto LABEL_26;
        }
        WTF::StringImpl::destroy(v14, v11);
        if (v13)
        {
LABEL_15:
          MEMORY[0x19AEA5508](&inUTI, v9);
          v16 = v74;
          if (v74
            || (WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(&v74, 0), (v16 = v74) != 0))
          {
            v17 = *(_DWORD *)(v16 - 8);
          }
          else
          {
            v17 = 0;
          }
          data = inUTI->data;
          if (data < 0x100)
            v19 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)inUTI);
          else
            v19 = data >> 8;
          v20 = 0;
          for (i = 1; ; ++i)
          {
            v22 = v19 & v17;
            v23 = (WTF::StringImpl ***)(v16 + 8 * (v19 & v17));
            v24 = *v23;
            if (!*v23)
              break;
            if (v24 != (WTF **)-1)
            {
              v23 = v20;
              if ((WTF::equal(*v24, (const WTF::StringImpl *)inUTI, v15) & 1) != 0)
                goto LABEL_94;
            }
            v19 = i + v22;
            v20 = v23;
          }
          if (v20)
          {
            *v20 = 0;
            --*(_DWORD *)(v74 - 16);
            v23 = v20;
          }
          v37 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
          v38 = inUTI;
          inUTI = 0;
          v37[1] = 0;
          v37[2] = 0;
          *v37 = (WTF::StringImpl *)v38;
          *v23 = v37;
          if (v74)
            v39 = *(_DWORD *)(v74 - 12) + 1;
          else
            v39 = 1;
          *(_DWORD *)(v74 - 12) = v39;
          if (v74)
            v40 = *(_DWORD *)(v74 - 12);
          else
            v40 = 0;
          v41 = (*(_DWORD *)(v74 - 16) + v40);
          v42 = *(unsigned int *)(v74 - 4);
          if (v42 > 0x400)
          {
            if (v42 > 2 * v41)
              goto LABEL_91;
            goto LABEL_79;
          }
          if (3 * v42 <= 4 * v41)
            goto LABEL_79;
          goto LABEL_91;
        }
LABEL_26:
        MEMORY[0x19AEA5508](&v69, v9);
        WTF::String::createCFString((WTF::String *)&v69);
        v27 = "text/plain";
        if (!UTTypeConformsTo(inUTI, inConformsToUTI))
        {
          v27 = "text/html";
          if (!UTTypeConformsTo(inUTI, v67)
            && !UTTypeConformsTo(inUTI, WebCore::WebArchivePboardType)
            && !UTTypeConformsTo(inUTI, v64)
            && !UTTypeConformsTo(inUTI, v63))
          {
            v28 = UTTypeConformsTo(inUTI, v60);
            v27 = v28 ? "text/uri-list" : 0;
            if (!v28 && a3)
            {
              if (UTTypeConformsTo(inUTI, v59))
                v27 = "image/png";
              else
                v27 = 0;
            }
          }
        }
        v29 = inUTI;
        inUTI = 0;
        if (v29)
          CFRelease(v29);
        v30 = v69;
        v69 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::destroy(v30, v26);
            if (!v27)
              goto LABEL_97;
            goto LABEL_45;
          }
          *(_DWORD *)v30 -= 2;
        }
        if (!v27)
          goto LABEL_97;
LABEL_45:
        strlen(v27);
        WTF::String::fromUTF8();
        if (MEMORY[0x19AEA53F4](inUTI, "text/uri-list", 13)
          && ((objc_msgSend(a2, "containsObject:", v66) & 1) != 0
           || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4) & 1) != 0))
        {
          v32 = (WTF::StringImpl *)inUTI;
          inUTI = 0;
          if (!v32)
            goto LABEL_97;
LABEL_95:
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v25);
          else
            *(_DWORD *)v32 -= 2;
          goto LABEL_97;
        }
        v33 = v74;
        if (v74
          || (WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(&v74, 0), (v33 = v74) != 0))
        {
          v34 = *(_DWORD *)(v33 - 8);
        }
        else
        {
          v34 = 0;
        }
        v35 = inUTI->data;
        if (v35 < 0x100)
          v36 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)inUTI);
        else
          v36 = v35 >> 8;
        v43 = 0;
        for (j = 1; ; ++j)
        {
          v45 = v36 & v34;
          v23 = (WTF::StringImpl ***)(v33 + 8 * (v36 & v34));
          v46 = *v23;
          if (!*v23)
            break;
          if (v46 != (WTF **)-1)
          {
            v23 = v43;
            if ((WTF::equal(*v46, (const WTF::StringImpl *)inUTI, v31) & 1) != 0)
              goto LABEL_94;
          }
          v36 = j + v45;
          v43 = v23;
        }
        if (v43)
        {
          *v43 = 0;
          --*(_DWORD *)(v74 - 16);
          v23 = v43;
        }
        v37 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
        v47 = inUTI;
        inUTI = 0;
        v37[1] = 0;
        v37[2] = 0;
        *v37 = (WTF::StringImpl *)v47;
        *v23 = v37;
        if (v74)
          v48 = *(_DWORD *)(v74 - 12) + 1;
        else
          v48 = 1;
        *(_DWORD *)(v74 - 12) = v48;
        if (v74)
          v49 = *(_DWORD *)(v74 - 12);
        else
          v49 = 0;
        v50 = (*(_DWORD *)(v74 - 16) + v49);
        v51 = *(unsigned int *)(v74 - 4);
        if (v51 > 0x400)
        {
          if (v51 > 2 * v50)
            goto LABEL_91;
LABEL_79:
          v37 = (WTF::StringImpl **)*WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(&v74, v23);
          goto LABEL_91;
        }
        if (3 * v51 <= 4 * v50)
          goto LABEL_79;
LABEL_91:
        v52 = v76;
        v37[1] = (WTF::StringImpl *)v76;
        v37[2] = 0;
        v53 = (WTF::StringImpl ***)(v52 + 2);
        v54 = v52 == 0;
        v55 = (WTF::StringImpl ***)&v75;
        if (!v54)
          v55 = v53;
        *v55 = v37;
        v76 = v37;
LABEL_94:
        v32 = (WTF::StringImpl *)inUTI;
        inUTI = 0;
        v7 = 0x1E0CB3000;
        if (v32)
          goto LABEL_95;
LABEL_97:
        ++v8;
      }
      while (v8 != v5);
      v56 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v70, v78, 16);
      v5 = v56;
    }
    while (v56);
  }
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>(WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>> const&)::{lambda(WTF::String&&)#1},WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>> const>(&v74, a1);
  return WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet(&v74, v57);
}

void sub_195303508(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CFTypeRef cf)
{
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet(&a29, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformPasteboard::stringForType@<X0>(id *this@<X0>, WTF **a2@<X1>, WebCore::Pasteboard *a3@<X8>)
{
  id v6;
  uint64_t result;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WebCore::PlatformPasteboard::readString(this, a2, 0, a3);
  v6 = *this;
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
    return result;
  result = WebCore::shouldTreatAtLeastOneTypeAsFile((void *)objc_msgSend(v6, "pasteboardTypes"));
  if (!(_DWORD)result)
    return result;
  MEMORY[0x19AEA5508](&v12, *MEMORY[0x1E0CA5C90]);
  v10 = WTF::equal(*a2, v12, v8);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      if (!v10)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v10)
    return result;
LABEL_7:
  result = WebCore::Pasteboard::canExposeURLToDOMWhenPasteboardContainsFiles(a3, v9);
  if ((result & 1) == 0)
  {
    result = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_195303694(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformPasteboard::readString(id *this@<X0>, WTF **a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  id v16;
  const __CFString *v17;
  void *v18;
  id v19;
  const __CFString *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  char isKindOfClass;
  WTF::StringImpl *v34[5];
  WTF::StringImpl *v35;

  MEMORY[0x19AEA5508](v34, *MEMORY[0x1E0CA5C90]);
  v10 = WTF::equal(*a2, v34[0], v8);
  v11 = v34[0];
  v34[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      if (v10)
        goto LABEL_5;
LABEL_12:
      if (a3 < 0
        || objc_msgSend(*this, "numberOfItems") <= a3
        || ((v15 = objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndex:", a3), v16 = *this, !*a2)
          ? (v17 = &stru_1E3487BC0)
          : (v17 = (const __CFString *)WTF::StringImpl::operator NSString *()),
            (v18 = (void *)objc_msgSend((id)objc_msgSend(v16, "valuesForPasteboardType:inItemSet:", v17, v15, v34[0]), "firstObject")) == 0&& ((v19 = *this, !*a2)? (v20 = &stru_1E3487BC0): (v20 = (const __CFString *)WTF::StringImpl::operator NSString *()), (v18 = (void *)objc_msgSend((id)objc_msgSend(v19, "dataForPasteboardType:inItemSet:", v20, v15), "firstObject")) == 0)))
      {
        *a4 = 0;
        return;
      }
      CFRetain(v18);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v21 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v18, 4);
        CFRelease(v18);
        v18 = (void *)v21;
      }
      MEMORY[0x19AEA5508](v34, *MEMORY[0x1E0CA5C20]);
      if ((WTF::equal(*a2, v34[0], v22) & 1) != 0)
      {
        v24 = 1;
      }
      else
      {
        MEMORY[0x19AEA5508](&v35, *MEMORY[0x1E0CA5B78]);
        v24 = WTF::equal(*a2, v35, v25);
        v26 = v35;
        v35 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v23);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
      v27 = v34[0];
      v34[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, v23);
          if (v24)
          {
LABEL_33:
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v28 = (uint64_t)v18;
            else
              v28 = 0;
LABEL_36:
            MEMORY[0x19AEA5508](a4, v28);
            if (!v18)
              return;
            goto LABEL_51;
          }
LABEL_41:
          MEMORY[0x19AEA5508](v34, *MEMORY[0x1E0CA5C88]);
          v31 = WTF::equal(*a2, v34[0], v29);
          v32 = v34[0];
          v34[0] = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::destroy(v32, v30);
              if (!v31)
                goto LABEL_50;
              goto LABEL_45;
            }
            *(_DWORD *)v32 -= 2;
          }
          if (!v31)
            goto LABEL_50;
LABEL_45:
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          v28 = (uint64_t)v18;
          if ((isKindOfClass & 1) != 0)
            goto LABEL_36;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v28 = objc_msgSend(v18, "string", v34[0]);
            goto LABEL_36;
          }
LABEL_50:
          *a4 = 0;
          if (!v18)
            return;
LABEL_51:
          CFRelease(v18);
          return;
        }
        *(_DWORD *)v27 -= 2;
      }
      if (v24)
        goto LABEL_33;
      goto LABEL_41;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_12;
LABEL_5:
  v35 = 0;
  WebCore::PlatformPasteboard::readURL(this, &v35, a3, (WTF::URL *)v34);
  v12 = objc_msgSend((id)WTF::URL::operator NSURL *(), "absoluteString");
  MEMORY[0x19AEA5508](a4, v12);
  v14 = v34[0];
  v34[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v13);
    else
      *(_DWORD *)v35 -= 2;
  }
}

void sub_195303A58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  const void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::PlatformPasteboard::color@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  PAL *v3;
  WebCore *v4;
  CGColor *v5;
  unint64_t result;
  uint64_t v7;

  v3 = (PAL *)objc_msgSend(*this, "dataForPasteboardType:", WebCore::UIColorPboardType);
  v4 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", PAL::getUIColorClass(v3), v3, 0), "CGColor");
  result = WebCore::roundAndClampToSRGBALossy(v4, v5);
  v7 = bswap32(result) | 0x1104000000000000;
  if (!BYTE4(result))
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t WebCore::PlatformPasteboard::url@<X0>(WTF::URL *a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  return WTF::URL::invalidate(a1);
}

void sub_195303BF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;

  v3 = v2;
  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformPasteboard::copy(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::PlatformPasteboard::addTypes()
{
  return 0;
}

uint64_t WebCore::PlatformPasteboard::setTypes()
{
  return 0;
}

uint64_t WebCore::PlatformPasteboard::setBufferForType()
{
  return 0;
}

uint64_t WebCore::PlatformPasteboard::setURL()
{
  return 0;
}

uint64_t WebCore::PlatformPasteboard::setStringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return 0;
}

uint64_t WebCore::PlatformPasteboard::platformPasteboardTypeForSafeTypeForDOMToReadAndWrite(_QWORD *a1, WTF **a2, const WTF::StringImpl *a3)
{
  int v3;
  const WTF::StringImpl *v6;
  uint64_t result;

  v3 = (int)a3;
  if (WTF::equal(*a2, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, a3)
    || WTF::equal(*a2, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v6)
    || (result = MEMORY[0x19AEA53F4](*a2, "text/uri-list", 13), (_DWORD)result)
    || v3 && (result = MEMORY[0x19AEA53F4](*a2, "image/png", 9), (_DWORD)result))
  {
    JUMPOUT(0x19AEA5508);
  }
  *a1 = 0;
  return result;
}

uint64_t WebCore::PlatformPasteboard::setColor(void **this, const WebCore::Color *a2)
{
  WebItemProviderRegistrationInfoList *v4;
  void *v5;
  void *UIColorClass;
  const WebCore::Color *v7;
  const void *v8;
  const void *v9;
  CFTypeRef v10;
  uint64_t v11;
  void *v12;
  CFTypeRef cf;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(WebItemProviderRegistrationInfoList);
  v5 = (void *)MEMORY[0x1E0CB36F8];
  UIColorClass = (void *)PAL::getUIColorClass((PAL *)v4);
  WebCore::cachedCGColor(a2, v7, &cf);
  v8 = (const void *)objc_msgSend(UIColorClass, "_disambiguated_due_to_CIImage_colorWithCGColor:", cf);
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  v11 = objc_msgSend(v5, "archivedDataWithRootObject:requiringSecureCoding:error:", v9, 0, 0, cf, v15);
  -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", v11, WebCore::UIColorPboardType);
  if (v9)
    CFRelease(v9);
  v12 = *this;
  cf = v4;
  WebCore::registerItemsToPasteboard((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &cf, 1), v12);
  if (v4)
    CFRelease(v4);
  return 0;
}

void sub_195303E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  const void *v9;

  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformPasteboard::write(void **this, const WebCore::PasteboardWebContent *a2)
{
  WebItemProviderRegistrationInfoList *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  const __CFString *v11;
  void *v12;
  CFTypeRef v13;
  WebCore::SharedBuffer *v14;
  CFTypeRef v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  CFTypeRef v20;
  WebCore::SharedBuffer *v21;
  CFTypeRef v22;
  WebCore::SharedBuffer *v23;
  CFTypeRef v24;
  uint64_t v25;
  WebItemProviderRegistrationInfoList *v26;
  uint64_t v27;
  _DWORD *v28;
  void *v29;
  CFTypeRef v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WebCore::SharedBuffer *v40;
  CFTypeRef cf;
  WTF *v42;
  uint64_t v43;
  CFTypeRef v44[2];

  v44[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(WebItemProviderRegistrationInfoList);
  -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", objc_msgSend(CFSTR("iOS rich content paste pasteboard type"), "dataUsingEncoding:", 4), CFSTR("iOS rich content paste pasteboard type"));
  v6 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 16 * v6;
    do
    {
      if (v8 >= *((unsigned int *)a2 + 19)
        || (WebCore::FragmentedSharedBuffer::makeContiguous(*(WTF **)(*((_QWORD *)a2 + 8) + v7 + 8), v44),
            WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)v44[0], (WebCoreSharedBufferData **)&cf),
            v8 >= *((unsigned int *)a2 + 19)))
      {
        __break(0xC471u);
        JUMPOUT(0x195304334);
      }
      v10 = cf;
      if (*(_QWORD *)(*((_QWORD *)a2 + 8) + v7))
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E3487BC0;
      -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", v10, v11);
      v13 = cf;
      cf = 0;
      if (v13)
        CFRelease(v13);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v44, v12);
      ++v8;
      v7 += 16;
    }
    while (v9 != v7);
  }
  v14 = (WebCore::SharedBuffer *)*((_QWORD *)a2 + 2);
  if (v14)
  {
    WebCore::SharedBuffer::createNSData(v14, (WebCoreSharedBufferData **)&cf);
    -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", cf, WebCore::WebArchivePboardType);
    -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", cf, objc_msgSend((id)*MEMORY[0x1E0CEC658], "identifier"));
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v16 = (void *)MEMORY[0x1E0CB3710];
    v17 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
    WebCore::FragmentedSharedBuffer::makeContiguous(*((WTF **)a2 + 5), v44);
    WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)v44[0], (WebCoreSharedBufferData **)&cf);
    v19 = objc_msgSend(v16, "unarchivedObjectOfClasses:fromData:error:", v17, cf, 0);
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v44, v18);
    if (v19)
      -[WebItemProviderRegistrationInfoList addRepresentingObject:](v4, "addRepresentingObject:", v19);
  }
  v21 = (WebCore::SharedBuffer *)*((_QWORD *)a2 + 3);
  if (v21)
  {
    WebCore::SharedBuffer::createNSData(v21, (WebCoreSharedBufferData **)&cf);
    -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", cf, *MEMORY[0x1E0CA5B50]);
    v22 = cf;
    cf = 0;
    if (v22)
      CFRelease(v22);
  }
  v23 = (WebCore::SharedBuffer *)*((_QWORD *)a2 + 4);
  if (v23)
  {
    WebCore::SharedBuffer::createNSData(v23, (WebCoreSharedBufferData **)&cf);
    -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", cf, *MEMORY[0x1E0CA5C40]);
    v24 = cf;
    cf = 0;
    if (v24)
      CFRelease(v24);
  }
  v25 = *((_QWORD *)a2 + 6);
  if (v25 && *(_DWORD *)(v25 + 4))
    -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", objc_msgSend((id)WTF::StringImpl::operator NSString *(), "dataUsingEncoding:", 4), *MEMORY[0x1E0CA5B78]);
  v26 = (WebItemProviderRegistrationInfoList *)((char *)a2 + 56);
  v27 = *((_QWORD *)a2 + 7);
  if (v27 && *(_DWORD *)(v27 + 4))
    WebCore::addRepresentationsForPlainText((WebCore *)v4, v26, v5);
  cf = 0;
  v42 = 0;
  v43 = 0;
  v28 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v28 += 2;
  cf = v28;
  WebCore::PasteboardCustomData::createSharedBuffer((WebCore::PasteboardCustomData *)&cf, (uint64_t)v26);
  WebCore::SharedBuffer::createNSData(v40, (WebCoreSharedBufferData **)v44);
  -[WebItemProviderRegistrationInfoList addData:forType:](v4, "addData:forType:", v44[0], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.custom-pasteboard-data"));
  v30 = v44[0];
  v44[0] = 0;
  if (v30)
    CFRelease(v30);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v40, v29);
  v31 = *this;
  v44[0] = v4;
  WebCore::registerItemsToPasteboard((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 1), v31);
  if (HIDWORD(v43))
  {
    v33 = 32 * HIDWORD(v43);
    v34 = (char *)v42 + 16;
    do
    {
      v35 = *((unsigned int *)v34 + 2);
      if ((_DWORD)v35 != -1)
        ((void (*)(CFTypeRef *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v35])(v44, v34);
      *((_DWORD *)v34 + 2) = -1;
      v36 = (WTF::StringImpl *)*((_QWORD *)v34 - 1);
      *((_QWORD *)v34 - 1) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v32);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = (WTF::StringImpl *)*((_QWORD *)v34 - 2);
      *((_QWORD *)v34 - 2) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v32);
        else
          *(_DWORD *)v37 -= 2;
      }
      v34 += 32;
      v33 -= 32;
    }
    while (v33);
  }
  v38 = v42;
  if (v42)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    WTF::fastFree(v38, v32);
  }
  v39 = (WTF::StringImpl *)cf;
  cf = 0;
  if (!v39)
  {
LABEL_51:
    if (!v4)
      return;
    goto LABEL_52;
  }
  if (*(_DWORD *)v39 != 2)
  {
    *(_DWORD *)v39 -= 2;
    goto LABEL_51;
  }
  WTF::StringImpl::destroy(v39, v32);
  if (v4)
LABEL_52:
    CFRelease(v4);
}

void sub_195304340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12, int a13, CFTypeRef a14)
{
  const void *v14;

  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

Class WebCore::addRepresentationsForPlainText(WebCore *this, WebItemProviderRegistrationInfoList *a2, const WTF::String *a3)
{
  Class result;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  __CFString *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;

  result = a2->super.isa;
  if (!a2->super.isa || !*((_DWORD *)result + 1))
    return result;
  v6 = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:encodingInvalidCharacters:", WTF::StringImpl::operator NSString *(), 0);
  MEMORY[0x19AEA52E0](&v12, v6);
  v8 = v13;
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      if ((v8 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    *(_DWORD *)v9 -= 2;
  }
  if ((v8 & 1) != 0)
LABEL_8:
    -[WebCore addRepresentingObject:](this, "addRepresentingObject:", v6);
LABEL_9:
  if (a2->super.isa)
    v10 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E3487BC0;
  v11 = -[__CFString dataUsingEncoding:](v10, "dataUsingEncoding:", 4);
  return (Class)-[WebCore addData:forType:](this, "addData:forType:", v11, *MEMORY[0x1E0CA5CA0]);
}

void WebCore::PlatformPasteboard::write(void **this, const WebCore::PasteboardImage *a2)
{
  const WTF::String *v4;
  WebItemProviderRegistrationInfoList *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  const __CFString *v11;
  CFTypeRef v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  NSURL *v17;
  uint64_t v18;
  void *v19;
  const WTF::String *v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  int v25;
  void *v26;
  CFTypeRef v27;
  const __CFString *v28;
  const __CFString *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::SharedBuffer *v34;
  CFTypeRef v35;
  CFTypeRef cf[2];

  cf[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v5 = objc_alloc_init(WebItemProviderRegistrationInfoList);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 16 * v6;
    do
    {
      if (v8 >= *((unsigned int *)a2 + 21)
        || (WebCore::SharedBuffer::createNSData(*(WebCore::SharedBuffer **)(*((_QWORD *)a2 + 9) + v7 + 8), (WebCoreSharedBufferData **)cf), v8 >= *((unsigned int *)a2 + 21)))
      {
        __break(0xC471u);
        JUMPOUT(0x19530488CLL);
      }
      v10 = cf[0];
      if (*(_QWORD *)(*((_QWORD *)a2 + 9) + v7))
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E3487BC0;
      -[WebItemProviderRegistrationInfoList addData:forType:](v5, "addData:forType:", v10, v11);
      v12 = cf[0];
      cf[0] = 0;
      if (v12)
        CFRelease(v12);
      ++v8;
      v7 += 16;
    }
    while (v9 != v7);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v13 = (_DWORD *)*((_QWORD *)a2 + 8);
    if (v13)
    {
      if (v13[1])
      {
        *v13 += 2;
        cf[0] = v13;
        if ((WebCore::isDeclaredUTI((WebCore *)cf, v4) & 1) == 0)
        {
          WebCore::UTIFromMIMEType((const WTF::StringImpl **)cf, v20, v21, (uint64_t)&v35);
          v24 = v35;
          v23 = (WTF::StringImpl *)cf[0];
          v35 = 0;
          cf[0] = v24;
          if (v23)
          {
            v25 = *(_DWORD *)v23 - 2;
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::destroy(v23, v22);
              v23 = (WTF::StringImpl *)v35;
              v35 = 0;
              if (!v23)
                goto LABEL_26;
              v25 = *(_DWORD *)v23 - 2;
              if (*(_DWORD *)v23 == 2)
              {
                WTF::StringImpl::destroy(v23, v33);
                goto LABEL_26;
              }
            }
            *(_DWORD *)v23 = v25;
          }
        }
LABEL_26:
        WebCore::FragmentedSharedBuffer::makeContiguous(*((WTF **)a2 + 7), &v34);
        WebCore::SharedBuffer::createNSData(v34, (WebCoreSharedBufferData **)&v35);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v34, v26);
        v27 = v35;
        if (cf[0])
          v28 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v28 = &stru_1E3487BC0;
        -[WebItemProviderRegistrationInfoList addData:forType:](v5, "addData:forType:", v27, v28);
        -[WebItemProviderRegistrationInfoList setPreferredPresentationSize:](v5, "setPreferredPresentationSize:", *((float *)a2 + 24), *((float *)a2 + 25));
        if (*((_QWORD *)a2 + 11))
          v29 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v29 = &stru_1E3487BC0;
        -[WebItemProviderRegistrationInfoList setSuggestedName:](v5, "setSuggestedName:", v29);
        v31 = v35;
        v35 = 0;
        if (v31)
          CFRelease(v31);
        v32 = (WTF::StringImpl *)cf[0];
        cf[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
      }
    }
  }
  v14 = (void *)WTF::URL::operator NSURL *();
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 6);
    if (v15 && *(_DWORD *)(v15 + 4))
    {
      v18 = WTF::StringImpl::operator NSString *();
    }
    else
    {
      v16 = (WTF *)WTF::URL::operator NSURL *();
      v18 = WTF::userVisibleString(v16, v17);
    }
    objc_msgSend(v14, "_web_setTitle:", v18);
    -[WebItemProviderRegistrationInfoList addRepresentingObject:](v5, "addRepresentingObject:", v14);
  }
  v19 = *this;
  cf[0] = v5;
  WebCore::registerItemsToPasteboard((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", cf, 1), v19);
  if (v5)
    CFRelease(v5);
}

void sub_195304898(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF::StringImpl *a11)
{
  const void *v11;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      if (!v11)
LABEL_9:
        _Unwind_Resume(exception_object);
    }
    else
    {
      *(_DWORD *)a11 -= 2;
      if (!v11)
        goto LABEL_9;
    }
  }
  else if (!v11)
  {
    goto LABEL_9;
  }
  CFRelease(v11);
  goto LABEL_9;
}

void WebCore::PlatformPasteboard::write(void **this, const WTF::String *a2, WebItemProviderRegistrationInfoList *a3)
{
  WebItemProviderRegistrationInfoList *v6;
  __CFString *v7;
  void *v8;
  const WTF::String *v9;
  uint64_t v10;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = objc_alloc_init(WebItemProviderRegistrationInfoList);
  -[WebItemProviderRegistrationInfoList setPreferredPresentationStyle:](v6, "setPreferredPresentationStyle:", 1);
  if (*(_QWORD *)a2)
    v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  if (a3->super.isa && *((_DWORD *)a3->super.isa + 1) && -[__CFString length](v7, "length"))
  {
    if (UTTypeConformsTo(v7, (CFStringRef)*MEMORY[0x1E0CA5C90])
      || UTTypeConformsTo(v7, (CFStringRef)*MEMORY[0x1E0CA5C88]))
    {
      WebCore::addRepresentationsForPlainText((WebCore *)v6, a3, v9);
    }
    else
    {
      v10 = -[__CFString dataUsingEncoding:](v7, "dataUsingEncoding:", 4);
      if (*(_QWORD *)a2)
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E3487BC0;
      -[WebItemProviderRegistrationInfoList addData:forType:](v6, "addData:forType:", v10, v11);
    }
  }
  v8 = *this;
  v12[0] = v6;
  WebCore::registerItemsToPasteboard((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1), v8);
  if (v6)
    CFRelease(v6);
}

void sub_195304AA8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformPasteboard::write(void **a1, _QWORD *a2)
{
  WebItemProviderRegistrationInfoList *v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  void *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(WebItemProviderRegistrationInfoList);
  -[WebItemProviderRegistrationInfoList setPreferredPresentationStyle:](v4, "setPreferredPresentationStyle:", 1);
  v5 = (void *)WTF::URL::operator NSURL *();
  if (v5)
  {
    v6 = a2[5];
    if (v6 && *(_DWORD *)(v6 + 4))
      objc_msgSend(v5, "_web_setTitle:", WTF::StringImpl::operator NSString *());
    -[WebItemProviderRegistrationInfoList addRepresentingObject:](v4, "addRepresentingObject:", v5);
    if (*a2)
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E3487BC0;
    -[WebItemProviderRegistrationInfoList addRepresentingObject:](v4, "addRepresentingObject:", v7);
  }
  v8 = *a1;
  v9[0] = v4;
  WebCore::registerItemsToPasteboard((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1), v8);
  if (v4)
    CFRelease(v4);
}

void sub_195304BD0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite@<X0>(id *this@<X0>, const WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  WTF ***v24;
  int i;
  int v26;
  WTF ***v27;
  WTF **v28;
  WTF::StringImpl *v29;
  WTF **v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WTF **v37;
  WTF ***v38;
  BOOL v39;
  WTF ***v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  _DWORD *v45;
  void *v46;
  uint64_t v47;
  WTF ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const WTF::StringImpl *v62;
  uint64_t result;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF *v66;
  const WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  _DWORD *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  void *v83;
  WTF::StringImpl *v84;
  const WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF ***v100;
  WTF ***v101;
  id obj;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF *v105;
  unsigned int v106;
  WebCore::FragmentedSharedBuffer *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _DWORD *v116;
  uint64_t v117;
  WTF **v118;
  WTF::StringImpl *v119[15];
  char v120;
  _BYTE v121[128];
  _BYTE v122[128];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v3 = (void *)objc_msgSend(*this, "itemProviders");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v112, v122, 16);
  if (v4)
  {
    v99 = *(_QWORD *)v113;
    v96 = v3;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v113 != v99)
          objc_enumerationMutation(v3);
        v6 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * v5);
        if (!objc_msgSend((id)objc_msgSend(v6, "teamData"), "length"))
          goto LABEL_72;
        v7 = (void *)MEMORY[0x1E0C99E60];
        v8 = objc_opt_class();
        v9 = objc_opt_class();
        v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", objc_msgSend(v7, "setWithObjects:", v8, v9, objc_opt_class(), 0), objc_msgSend(v6, "teamData"), 0);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_72;
        v11 = objc_msgSend(v10, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.drag-and-drop-team-data.origin"));
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_72;
        MEMORY[0x19AEA5508](v119, v11);
        v14 = WTF::equal(v119[0], *a2, v12);
        v15 = v119[0];
        v119[0] = 0;
        if (!v15)
          goto LABEL_12;
        if (*(_DWORD *)v15 != 2)
        {
          *(_DWORD *)v15 -= 2;
LABEL_12:
          if ((v14 & 1) == 0)
            goto LABEL_72;
          goto LABEL_13;
        }
        WTF::StringImpl::destroy(v15, v13);
        if ((v14 & 1) == 0)
          goto LABEL_72;
LABEL_13:
        obj = (id)objc_msgSend(v10, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.drag-and-drop-team-data.custom-types"));
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v121, 16);
          if (v16)
          {
            v17 = *(_QWORD *)v109;
            v97 = v5;
            v98 = v4;
            do
            {
              v18 = 0;
              do
              {
                if (*(_QWORD *)v109 != v17)
                  objc_enumerationMutation(obj);
                MEMORY[0x19AEA5508](v119, *(_QWORD *)(*((_QWORD *)&v108 + 1) + 8 * v18));
                v20 = (uint64_t)v116;
                if (v116
                  || (v42 = WTF::fastZeroedMalloc((WTF *)0x50),
                      v116 = (_DWORD *)(v42 + 16),
                      *(_QWORD *)(v42 + 8) = 0x800000007,
                      *(_DWORD *)v42 = 0,
                      *(v116 - 3) = 0,
                      (v20 = (uint64_t)v116) != 0))
                {
                  v21 = *(_DWORD *)(v20 - 8);
                }
                else
                {
                  v21 = 0;
                }
                v22 = *((_DWORD *)v119[0] + 4);
                if (v22 < 0x100)
                  v23 = WTF::StringImpl::hashSlowCase(v119[0]);
                else
                  v23 = v22 >> 8;
                v24 = 0;
                for (i = 1; ; ++i)
                {
                  v26 = v23 & v21;
                  v27 = (WTF ***)(v20 + 8 * (v23 & v21));
                  v28 = *v27;
                  if (!*v27)
                    break;
                  if (v28 != (WTF **)-1)
                  {
                    v27 = v24;
                    if ((WTF::equal(*v28, v119[0], v19) & 1) != 0)
                      goto LABEL_40;
                  }
                  v23 = i + v26;
                  v24 = v27;
                }
                if (v24)
                {
                  *v24 = 0;
                  --*(v116 - 4);
                  v27 = v24;
                }
                v30 = (WTF **)WTF::fastMalloc((WTF *)0x18);
                v31 = v119[0];
                v119[0] = 0;
                v30[1] = 0;
                v30[2] = 0;
                *v30 = v31;
                *v27 = v30;
                if (v116)
                  v32 = *(v116 - 3) + 1;
                else
                  v32 = 1;
                *(v116 - 3) = v32;
                v33 = (uint64_t)v116;
                if (v116)
                  v34 = *(v116 - 3);
                else
                  v34 = 0;
                v35 = (*(v116 - 4) + v34);
                v36 = *(v116 - 1);
                if (v36 > 0x400)
                {
                  if (v36 <= 2 * v35)
                    goto LABEL_53;
                }
                else if (3 * v36 <= 4 * v35)
                {
                  if ((_DWORD)v36)
                  {
LABEL_53:
                    v43 = *(v116 - 3);
                    v44 = (_DWORD)v36 << (6 * v43 >= (2 * v36));
                  }
                  else
                  {
                    v43 = *(v116 - 3);
                    v44 = 8;
                  }
                  v45 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v44 + 16));
                  v116 = v45 + 4;
                  v45[2] = v44 - 1;
                  v45[3] = v44;
                  *v45 = 0;
                  *(v116 - 3) = v43;
                  if ((_DWORD)v36)
                  {
                    v47 = 0;
                    v48 = 0;
                    do
                    {
                      v49 = *(WTF::StringImpl ***)(v33 + 8 * v47);
                      if ((unint64_t)v49 + 1 >= 2)
                      {
                        v100 = (WTF ***)(v33 + 8 * v47);
                        v101 = v48;
                        v50 = (uint64_t)v116;
                        v51 = v116 ? *(v116 - 2) : 0;
                        v52 = *v49;
                        v53 = *((_DWORD *)*v49 + 4);
                        v54 = v53 < 0x100 ? WTF::StringImpl::hashSlowCase(v52) : v53 >> 8;
                        v55 = 0;
                        do
                        {
                          v56 = v54 & v51;
                          v54 = ++v55 + v56;
                        }
                        while (*(_QWORD *)(v50 + 8 * v56));
                        v48 = v101;
                        *(_QWORD *)(v50 + 8 * v56) = *v100;
                        if (v100 == v27)
                          v48 = (WTF ***)(v50 + 8 * v56);
                      }
                      ++v47;
                    }
                    while (v47 != v36);
                  }
                  else
                  {
                    v48 = 0;
                  }
                  WTF::fastFree((WTF *)(v33 - 16), v46);
                  v30 = *v48;
                }
                v37 = v118;
                v30[1] = (WTF *)v118;
                v30[2] = 0;
                v38 = (WTF ***)(v37 + 2);
                v39 = v37 == 0;
                v40 = (WTF ***)&v117;
                if (!v39)
                  v40 = v38;
                *v40 = v30;
                v118 = v30;
LABEL_40:
                v41 = v119[0];
                v119[0] = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, v29);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                ++v18;
              }
              while (v18 != v16);
              v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v121, 16);
              v16 = v57;
              v3 = v96;
              v5 = v97;
              v4 = v98;
            }
            while (v57);
          }
        }
LABEL_72:
        ++v5;
      }
      while (v5 != v4);
      v58 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v112, v122, 16);
      v4 = v58;
    }
    while (v58);
  }
  v107 = 0;
  v107 = (WebCore::FragmentedSharedBuffer *)objc_msgSend(*this, "dataForPasteboardType:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.custom-pasteboard-data"));
  if (!v107)
    goto LABEL_118;
  WebCore::SharedBuffer::create<NSData *&>(&v107, &v103);
  if (*(_DWORD *)(v103 + 20))
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v103 + 8) + 8);
    v60 = *(unsigned int *)(v59 + 24);
    if ((_DWORD)v60 == -1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_135;
    }
    v119[0] = (WTF::StringImpl *)&v120;
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v60])(v119, v59 + 8);
  }
  WTF::Persistence::Decoder::Decoder();
  WebCore::PasteboardCustomData::fromPersistenceDecoder(&v104);
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v119);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v103, v61);
  result = WTF::equal(v104, *a2, v62);
  if ((result & 1) == 0)
  {
    LODWORD(v65) = v106;
    goto LABEL_98;
  }
  v65 = v106;
  if (!v106)
  {
LABEL_112:
    v77 = v105;
    goto LABEL_113;
  }
  if (v106 >> 29)
  {
LABEL_135:
    __break(0xC471u);
    return result;
  }
  v66 = (WTF *)(8 * v106);
  v68 = (WTF *)WTF::fastMalloc(v66);
  v69 = 0;
  v70 = v105;
  v71 = v68;
  do
  {
    v72 = *(_DWORD **)((char *)v70 + v69);
    if (v72)
      *v72 += 2;
    *(_QWORD *)v71 = v72;
    v71 = (WTF *)((char *)v71 + 8);
    v69 += 32;
  }
  while (32 * v65 != v69);
  v73 = 0;
  do
  {
    WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)&v116, (WTF::StringImpl **)((char *)v73 + (_QWORD)v68), v67, (uint64_t)v119);
    v73 = (WTF *)((char *)v73 + 8);
  }
  while (v66 != v73);
  v75 = 0;
  do
  {
    v76 = *(WTF::StringImpl **)((char *)v75 + (_QWORD)v68);
    *(_QWORD *)((char *)v75 + (_QWORD)v68) = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v74);
      else
        *(_DWORD *)v76 -= 2;
    }
    v75 = (WTF *)((char *)v75 + 8);
  }
  while (v66 != v75);
  WTF::fastFree(v68, v74);
LABEL_98:
  v77 = v105;
  if ((_DWORD)v65)
  {
    v78 = 32 * v65;
    v79 = (char *)v105 + 16;
    do
    {
      v80 = *((unsigned int *)v79 + 2);
      if ((_DWORD)v80 != -1)
        ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v80])(v119, v79);
      *((_DWORD *)v79 + 2) = -1;
      v81 = (WTF::StringImpl *)*((_QWORD *)v79 - 1);
      *((_QWORD *)v79 - 1) = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v64);
        else
          *(_DWORD *)v81 -= 2;
      }
      v82 = (WTF::StringImpl *)*((_QWORD *)v79 - 2);
      *((_QWORD *)v79 - 2) = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v64);
        else
          *(_DWORD *)v82 -= 2;
      }
      v79 += 32;
      v78 -= 32;
    }
    while (v78);
    goto LABEL_112;
  }
LABEL_113:
  if (v77)
  {
    v105 = 0;
    WTF::fastFree(v77, v64);
  }
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, v64);
    else
      *(_DWORD *)v104 -= 2;
  }
LABEL_118:
  v83 = (void *)objc_msgSend(*this, "pasteboardTypes");
  v84 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v84 = off_1E3354320;
  *((_QWORD *)v84 + 1) = this;
  v119[0] = v84;
  WebCore::webSafeTypes(&v104, v83, 0, v119);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v84 + 8))(v84);
  if (HIDWORD(v105))
  {
    v86 = (WTF::StringImpl **)v104;
    v87 = 8 * HIDWORD(v105);
    do
    {
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)&v116, v86++, v85, (uint64_t)v119);
      v87 -= 8;
    }
    while (v87);
  }
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>(WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>> const&)::{lambda(WTF::String&&)#1},WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>> const>(&v116, a3);
  if (HIDWORD(v105))
  {
    v90 = v104;
    v91 = 8 * HIDWORD(v105);
    do
    {
      v92 = *(WTF::StringImpl **)v90;
      *(_QWORD *)v90 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
          WTF::StringImpl::destroy(v92, v88);
        else
          *(_DWORD *)v92 -= 2;
      }
      v90 = (WTF::StringImpl *)((char *)v90 + 8);
      v91 -= 8;
    }
    while (v91);
  }
  v89 = v104;
  if (v104)
  {
    v104 = 0;
    LODWORD(v105) = 0;
    WTF::fastFree(v89, v88);
  }
  return (uint64_t)WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet(&v116, v88);
}

void sub_1953054D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,WTF *a26,int a27,unsigned int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49)
{
  WTF *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  v50 = a26;
  if (a28)
  {
    v51 = 32 * a28;
    v52 = (char *)a26 + 16;
    do
    {
      v53 = *((unsigned int *)v52 + 2);
      if ((_DWORD)v53 != -1)
        ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v53])(&a49, v52);
      *((_DWORD *)v52 + 2) = -1;
      v54 = (WTF::StringImpl *)*((_QWORD *)v52 - 1);
      *((_QWORD *)v52 - 1) = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, a2);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = (WTF::StringImpl *)*((_QWORD *)v52 - 2);
      *((_QWORD *)v52 - 2) = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, a2);
        else
          *(_DWORD *)v55 -= 2;
      }
      v52 += 32;
      v51 -= 32;
    }
    while (v51);
    v50 = a26;
  }
  if (v50)
    WTF::fastFree(v50, a2);
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet(&a46, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformPasteboard::write(void **a1, uint64_t *a2)
{
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WebItemProviderRegistrationInfoList *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  WebCore::SharedBuffer *v12;
  uint64_t result;
  uint64_t v14;
  WTF *v15;
  int v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  CFTypeRef v22;
  WTF *v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t (**v31)();
  CFTypeRef v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef v39;
  WTF *v40;
  uint64_t v41;
  CFTypeRef cf;
  CFTypeRef v43;
  _QWORD v44[2];
  WebCore::SharedBuffer *v45[3];

  v45[2] = *(WebCore::SharedBuffer **)MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a2 + 3));
  v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    v5 = *a2;
    v6 = *a2 + 24 * v4;
    do
    {
      v7 = objc_alloc_init(WebItemProviderRegistrationInfoList);
      v39 = v7;
      -[WebItemProviderRegistrationInfoList setPreferredPresentationStyle:](v7, "setPreferredPresentationStyle:", 1);
      v9 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v9)
      {
        v10 = (_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
        while (!*v10)
        {
          v10 += 4;
          if (!--v9)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        if (!*(_QWORD *)v5 || !*(_DWORD *)(*(_QWORD *)v5 + 4))
          goto LABEL_29;
      }
      WebCore::PasteboardCustomData::createSharedBuffer((WebCore::PasteboardCustomData *)v5, v8);
      WebCore::SharedBuffer::createNSData(v45[0], (WebCoreSharedBufferData **)&v43);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v45, v11);
      if (v43)
      {
        v44[0] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.drag-and-drop-team-data.origin");
        if (*(_QWORD *)v5)
          v12 = (WebCore::SharedBuffer *)WTF::StringImpl::operator NSString *();
        else
          v12 = (WebCore::SharedBuffer *)&stru_1E3487BC0;
        v45[0] = v12;
        result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.drag-and-drop-team-data.custom-types");
        v44[1] = result;
        v40 = 0;
        v41 = 0;
        v14 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v14)
        {
          if (v14 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
          LODWORD(v41) = v14;
          v40 = v15;
          v16 = *(_DWORD *)(v5 + 20);
          if (v16)
          {
            v17 = *(_DWORD ***)(v5 + 8);
            v18 = *(unsigned int *)(v5 + 20);
            do
            {
              v19 = *v17;
              if (*v17)
                *v19 += 2;
              *(_QWORD *)v15 = v19;
              v15 = (WTF *)((char *)v15 + 8);
              v17 += 4;
              --v18;
            }
            while (v18);
            HIDWORD(v41) = v16;
          }
        }
        WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v40, (uint64_t *)&cf);
        v45[1] = (WebCore::SharedBuffer *)cf;
        v21 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 2);
        v22 = cf;
        cf = 0;
        if (v22)
          CFRelease(v22);
        if (HIDWORD(v41))
        {
          v33 = v40;
          v34 = 8 * HIDWORD(v41);
          do
          {
            v35 = *(WTF::StringImpl **)v33;
            *(_QWORD *)v33 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
              {
                v37 = v34;
                WTF::StringImpl::destroy(v35, v20);
                v34 = v37;
              }
              else
              {
                *(_DWORD *)v35 -= 2;
              }
            }
            v33 = (WTF *)((char *)v33 + 8);
            v34 -= 8;
          }
          while (v34);
        }
        v23 = v40;
        if (v40)
        {
          v40 = 0;
          LODWORD(v41) = 0;
          WTF::fastFree(v23, v20);
        }
        v24 = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v21, 1, 0, v37);
        if (v24)
        {
          -[WebItemProviderRegistrationInfoList setTeamData:](v7, "setTeamData:", v24);
          -[WebItemProviderRegistrationInfoList addData:forType:](v7, "addData:forType:", v43, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.WebKit.custom-pasteboard-data"));
        }
        v25 = v43;
        v43 = 0;
        if (v25)
          CFRelease(v25);
      }
LABEL_29:
      v26 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E3354348;
      v26[1] = (uint64_t (**)())&v39;
      v27 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v27)
      {
        v28 = 32 * v27;
        v29 = *(_QWORD *)(v5 + 8) + 16;
        do
        {
          v30 = *(_DWORD *)(v29 + 8);
          if (v30 == 1 || !v30 && *(_QWORD *)v29)
            ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v26)[2])(v26, v29 - 16, v29);
          v29 += 32;
          v28 -= 32;
        }
        while (v28);
        v31 = *v26;
      }
      else
      {
        v31 = off_1E3354348;
      }
      ((void (*)(uint64_t (***)()))v31[1])(v26);
      if (v39)
      {
        objc_msgSend(v3, "addObject:");
        v32 = v39;
        v39 = 0;
        if (v32)
          CFRelease(v32);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  WebCore::registerItemsToPasteboard(v3, *a1);
  v36 = objc_msgSend(*a1, "changeCount");
  if (v3)
    CFRelease(v3);
  return v36;
}

void sub_195305A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, CFTypeRef cf, CFTypeRef a16, uint64_t a17, uint64_t a18, char a19)
{
  const void *v19;

  if (v19)
    CFRelease(v19);
  _Unwind_Resume(exception_object);
}

void WebCore::registerItemsToPasteboard(void *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(a1);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "itemProvider");
        if (v8)
          objc_msgSend(v4, "addObject:", v8);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }
  objc_msgSend(a2, "setItemProviders:", v4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(a2, "stageRegistrationLists:", a1);
  if (v4)
    CFRelease(v4);
}

void sub_195305CE0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformPasteboard::count(id *this)
{
  return objc_msgSend(*this, "numberOfItems");
}

uint64_t WebCore::PlatformPasteboard::allStringsForType@<X0>(id *this@<X0>, WTF **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t i;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  result = objc_msgSend(*this, "numberOfItems");
  v7 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (result << 32)
  {
    if ((unint64_t)result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)((8 * result) & 0x7FFFFFFFFLL));
    *(_DWORD *)(a3 + 8) = v7;
    *(_QWORD *)a3 = result;
  }
  if (v7 >= 1)
  {
    for (i = 0; v7 != i; ++i)
    {
      WebCore::PlatformPasteboard::readString(this, a2, i, &v15);
      result = (uint64_t)v15;
      if (v15)
      {
        if (*((_DWORD *)v15 + 1))
        {
          v10 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
          {
            v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v10 + 1, (unint64_t)&v15);
            v10 = *(unsigned int *)(a3 + 12);
            v13 = *(_QWORD *)a3;
            v14 = *v12;
            *v12 = 0;
            *(_QWORD *)(v13 + 8 * v10) = v14;
          }
          else
          {
            v11 = *(_QWORD *)a3;
            v15 = 0;
            *(_QWORD *)(v11 + 8 * v10) = result;
          }
          *(_DWORD *)(a3 + 12) = v10 + 1;
          result = (uint64_t)v15;
          v15 = 0;
          if (!result)
            continue;
        }
        else
        {
          v15 = 0;
        }
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_195305E4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v12 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v12)
  {
    v14 = *(WTF::StringImpl ***)v10;
    v15 = 8 * v12;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v13 = *(WTF **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformPasteboard::readURL(id *this@<X0>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X1>, WTF::URL *a4@<X8>)
{
  const __CFString *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30[17];

  v30[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (a3 < 0)
    goto LABEL_12;
  if (objc_msgSend(*this, "numberOfItems") <= a3)
    goto LABEL_12;
  v8 = (const __CFString *)*MEMORY[0x1E0CA5C90];
  v9 = objc_msgSend((id)objc_msgSend(*this, "valuesForPasteboardType:inItemSet:", *MEMORY[0x1E0CA5C90], objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndex:", a3)), "firstObject");
  if (!v9)
    goto LABEL_12;
  v10 = (void *)v9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithDataRepresentation:relativeToURL:", v10, 0);
      if (v10)
        goto LABEL_10;
    }
LABEL_12:
    *(_QWORD *)a4 = 0;
    WTF::URL::invalidate(a4);
    return;
  }
  CFRetain(v10);
LABEL_10:
  MEMORY[0x19AEA52E0](&v24, v10);
  if (objc_msgSend((id)objc_msgSend(*this, "itemProviders"), "count") <= (unint64_t)(int)a3)
    v11 = 0;
  else
    v11 = (void *)objc_msgSend((id)objc_msgSend(*this, "itemProviders"), "objectAtIndex:", (int)a3);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v12 = (void *)objc_msgSend(v11, "registeredTypeIdentifiers");
  v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v27 != v15)
          objc_enumerationMutation(v12);
        if (UTTypeConformsTo(*(CFStringRef *)(*((_QWORD *)&v26 + 1) + 8 * i), v8))
        {
          v17 = 1;
          goto LABEL_24;
        }
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v14)
        continue;
      break;
    }
  }
  v17 = v25 & 1;
LABEL_24:
  v18 = v24;
  v24 = 0;
  if (!v18)
  {
LABEL_27:
    if ((v17 & 1) != 0)
      goto LABEL_28;
LABEL_33:
    *(_QWORD *)a4 = 0;
    WTF::URL::invalidate(a4);
    goto LABEL_34;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_27;
  }
  WTF::StringImpl::destroy(v18, v13);
  if ((v17 & 1) == 0)
    goto LABEL_33;
LABEL_28:
  MEMORY[0x19AEA5508](v30, objc_msgSend(v10, "_web_title"));
  v20 = v30[0];
  v30[0] = 0;
  v21 = *a2;
  *a2 = v20;
  if (v21)
  {
    v22 = *(_DWORD *)v21 - 2;
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v19);
      v21 = v30[0];
      v30[0] = 0;
      if (!v21)
        goto LABEL_31;
      v22 = *(_DWORD *)v21 - 2;
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v23);
        goto LABEL_31;
      }
    }
    *(_DWORD *)v21 = v22;
  }
LABEL_31:
  MEMORY[0x19AEA52E0](a4, v10);
LABEL_34:
  CFRelease(v10);
}

void sub_1953061C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v13;

  v13 = *v11;
  *v11 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers(void **a1, uint64_t a2)
{
  void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = *a1;
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2, (uint64_t *)&cf);
    objc_msgSend(v4, "updateSupportedTypeIdentifiers:", cf);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_1953062C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformPasteboard::write(void **this, const WebCore::PasteboardCustomData *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v20;
  int v21;
  int v22;
  char v23;
  WTF::StringImpl *v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v3 += 2;
  v24 = v3;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v25, (uint64_t *)a2 + 1);
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v21 = 1;
  v20 = v4;
  v6 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  *(_QWORD *)v4 = v6;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4 + 8, (uint64_t *)&v25);
  v22 = 1;
  v7 = WebCore::PlatformPasteboard::write(this, (uint64_t *)&v20);
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + 8, v8);
  v10 = *(WTF::StringImpl **)v5;
  *(_QWORD *)v5 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::fastFree(v5, v9);
  if (v27)
  {
    v12 = 32 * v27;
    v13 = (char *)v25 + 16;
    do
    {
      v14 = *((unsigned int *)v13 + 2);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(&v23, v13);
      *((_DWORD *)v13 + 2) = -1;
      v15 = (WTF::StringImpl *)*((_QWORD *)v13 - 1);
      *((_QWORD *)v13 - 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v11);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = (WTF::StringImpl *)*((_QWORD *)v13 - 2);
      *((_QWORD *)v13 - 2) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v11);
        else
          *(_DWORD *)v16 -= 2;
      }
      v13 += 32;
      v12 -= 32;
    }
    while (v12);
  }
  v17 = v25;
  if (v25)
  {
    v25 = 0;
    v26 = 0;
    WTF::fastFree(v17, v11);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v11);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v7;
}

void sub_1953064C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, WTF::StringImpl *a16, WTF *a17, int a18, unsigned int a19)
{
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20, a2);
  v23 = *(WTF::StringImpl **)v19;
  *(_QWORD *)v19 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::fastFree(v19, v22);
  if (a19)
  {
    v27 = 32 * a19;
    v28 = (char *)a17 + 16;
    do
    {
      v29 = *((unsigned int *)v28 + 2);
      if ((_DWORD)v29 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v29])(&a15, v28);
      *((_DWORD *)v28 + 2) = -1;
      v30 = (WTF::StringImpl *)*((_QWORD *)v28 - 1);
      *((_QWORD *)v28 - 1) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v24);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = (WTF::StringImpl *)*((_QWORD *)v28 - 2);
      *((_QWORD *)v28 - 2) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v24);
        else
          *(_DWORD *)v31 -= 2;
      }
      v28 += 32;
      v27 -= 32;
    }
    while (v27);
  }
  v25 = a17;
  if (a17)
  {
    a17 = 0;
    a18 = 0;
    WTF::fastFree(v25, v24);
  }
  v26 = a16;
  a16 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformPasteboard::containsURLStringSuitableForLoading(id *this)
{
  double Types;
  uint64_t v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  Types = WebCore::PlatformPasteboard::getTypes(this, (uint64_t)&v26);
  v3 = *MEMORY[0x1E0CA5C90];
  MEMORY[0x19AEA5508](&v23, *MEMORY[0x1E0CA5C90], Types);
  v6 = HIDWORD(v27);
  if (HIDWORD(v27))
  {
    v7 = (WTF **)v26;
    v8 = HIDWORD(v27) - 1;
    do
    {
      v9 = WTF::equal(*v7, v23, v5);
      v10 = v9;
      if (v8)
        v11 = v9;
      else
        v11 = 1;
      --v8;
      ++v7;
    }
    while (v11 != 1);
  }
  else
  {
    v10 = 0;
  }
  v12 = v23;
  v23 = 0;
  if (!v12)
  {
LABEL_12:
    if ((v10 & 1) != 0)
      goto LABEL_13;
LABEL_25:
    v15 = 0;
    goto LABEL_29;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v12, v4);
  if ((v10 & 1) == 0)
    goto LABEL_25;
LABEL_13:
  MEMORY[0x19AEA5508](&v23, v3);
  WebCore::PlatformPasteboard::stringForType(this, &v23, (WebCore::Pasteboard *)&v25);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v25;
  if (!v25)
  {
    v15 = 1;
    goto LABEL_29;
  }
  if (!*((_DWORD *)v25 + 1))
  {
    v25 = 0;
    v15 = 1;
LABEL_27:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v4);
    else
      *(_DWORD *)v14 -= 2;
    goto LABEL_29;
  }
  v16 = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", WTF::StringImpl::operator NSString *());
  MEMORY[0x19AEA52E0](&v23, v16);
  v15 = (v24 >> 1) & 1;
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v4);
    else
      *(_DWORD *)v17 -= 2;
  }
  v14 = v25;
  v25 = 0;
  if (v14)
    goto LABEL_27;
LABEL_29:
  v18 = v26;
  if ((_DWORD)v6)
  {
    v20 = 8 * v6;
    v21 = v26;
    do
    {
      v22 = *(WTF::StringImpl **)v21;
      *(_QWORD *)v21 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v4);
        else
          *(_DWORD *)v22 -= 2;
      }
      v21 = (WTF *)((char *)v21 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  if (v18)
    WTF::fastFree(v18, v4);
  return v15;
}

void sub_1953067D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl **a15, int a16, unsigned int a17)
{
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a17)
  {
    v18 = 8 * a17;
    v19 = a15;
    do
    {
      v20 = *v19;
      *v19 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v19;
      v18 -= 8;
    }
    while (v18);
  }
  if (a15)
    WTF::fastFree((WTF *)a15, a2);
  _Unwind_Resume(exception_object);
}

unsigned int (*WebCore::screenSupportsHighDynamicRange(WebCore *this, WebCore::Widget *a2))(_QWORD)
{
  WebCore *v2;
  _DWORD *v3;
  BOOL v4;
  unsigned int (*result)(_QWORD);
  unsigned int (*v6)(_QWORD);
  _QWORD block[4];
  char v8;

  {
    v2 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
  }
  else
  {
    v2 = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  v3 = WebCore::screenData(v2);
  if (v3)
  {
    v4 = *((_BYTE *)v3 + 50) == 0;
    return (unsigned int (*)(_QWORD))!v4;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v8 = 1;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  if (!PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary)
    return 0;
  {
    result = (unsigned int (*)(_QWORD))dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTShouldPlayHDRVideo");
    v6 = result;
    PAL::softLinkMediaToolboxMTShouldPlayHDRVideo = result;
    PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(void)::loaded = result != 0;
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (!PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(void)::loaded)
    return 0;
  v6 = (unsigned int (*)(_QWORD))PAL::softLinkMediaToolboxMTShouldPlayHDRVideo;
LABEL_14:
  v4 = v6(0) == 0;
  return (unsigned int (*)(_QWORD))!v4;
}

CFTypeRef WebCore::screenColorSpace@<X0>(_QWORD *a1@<X8>)
{
  WebCore *v4;
  WebCore *v5;
  CFTypeRef result;
  CFTypeRef v7;
  unint64_t v8;
  char v9;
  char **v10;
  char *v11;

  {
    v4 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
  }
  else
  {
    v4 = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  v5 = (WebCore *)WebCore::screenData(v4);
  if (v5)
  {
    if (*((_BYTE *)v5 + 48))
    {
LABEL_5:
      result = (CFTypeRef)WebCore::extendedSRGBColorSpaceRef(v5);
      v7 = result;
      if (result)
        result = CFRetain(result);
      *a1 = v7;
      return result;
    }
  }
  else
  {
    v5 = (WebCore *)MGGetBoolAnswer();
    if ((_DWORD)v5)
      goto LABEL_5;
  }
  v8 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v8 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a1 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

void WebCore::screenAvailableRect(WebCore *this, WebCore::Widget *a2)
{
  WebCore *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  uint64_t i;
  WebCore *v15;
  uint64_t v16;
  CGRect v17;
  CGRect v18;

  if (this)
  {
    v2 = this;
    v3 = (void *)*((_QWORD *)this + 5);
    if (v3)
    {
      v4 = (void *)objc_msgSend(v3, "window");
      LODWORD(v5) = 0;
      LODWORD(v6) = 0;
      LODWORD(v7) = 0;
      if (v4)
      {
        v8 = *MEMORY[0x1E0C9D538];
        v9 = *(double *)(MEMORY[0x1E0C9D538] + 8);
        objc_msgSend(v4, "availableScreenSize", v7, v6, v5);
        v11 = v10;
        v13 = v12;
        v17.origin.x = v8;
        v17.origin.y = v9;
        v17.size.width = v11;
        v17.size.height = v13;
        CGRectGetMaxX(v17);
        v18.origin.x = v8;
        v18.origin.y = v9;
        v18.size.width = v11;
        v18.size.height = v13;
        CGRectGetMaxY(v18);
      }
    }
    else
    {
      for (i = *((_QWORD *)v2 + 4); i; i = *((_QWORD *)v15 + 4))
      {
        v15 = *(WebCore **)(i + 8);
        if (!v15)
          break;
        v2 = v15;
      }
      if (((*(uint64_t (**)(WebCore *, WebCore::Widget *))(*(_QWORD *)v2 + 72))(v2, a2) & 1) == 0)
        (*(void (**)(WebCore *))(*(_QWORD *)v2 + 80))(v2);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore *))(*(_QWORD *)v2 + 720))(v2) + 24)
                                  + 8)
                      + 48);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 184))(v16);
    }
  }
}

float WebCore::screenPPIFactor(WebCore *this)
{
  WebCore *v1;
  _DWORD *v2;
  int *v3;

  {
    v1 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
  }
  else
  {
    v1 = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  v2 = WebCore::screenData(v1);
  if (v2)
  {
    v3 = v2 + 13;
  }
  else
  {
    v3 = &dword_1ECE81BC4;
    if (qword_1ECE81BD0 != -1)
      dispatch_once(&qword_1ECE81BD0, &__block_literal_global_41);
  }
  return *(float *)v3;
}

void WebCore::overrideAvailableScreenSize(WebCore *this)
{
  PAL *HasIPadCapability;
  float v2;
  float v3;
  WebCore *v4;
  float *v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v17;
  float v18;
  float v19;
  float v20;
  char v24;
  char **v25;
  char *v26;

  HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(this);
  if ((_DWORD)HasIPadCapability
    && (objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(HasIPadCapability), "sharedApplication"), "_isClassic") & 1) != 0)
  {
    v2 = 320.0;
    v3 = 480.0;
  }
  else
  {
    {
      v4 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
    }
    else
    {
      v4 = 0;
      WebCore::screenProperties(void)::screenProperties = 0;
      qword_1ECE90D08 = 0;
    }
    v5 = (float *)WebCore::screenData(v4);
    if (v5)
    {
      v2 = v5[2];
      v3 = v5[3];
    }
    else
    {
      objc_msgSend((id)objc_msgSend((id)PAL::getUIScreenClass(0), "mainScreen"), "bounds");
      v2 = v6;
      v3 = v7;
    }
  }
  v8 = atomic_load(&qword_1ECE81BE0);
  if (v8 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&qword_1ECE81BE0, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::isInternalInstall(void)::$_0 &&>>);
  }
  if (byte_1ECE81BC2)
  {
    {
      if (byte_1ECE90A51)
        return;
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v9 = 0;
    if (v2 <= v3)
    {
      v17 = 480.0;
      v18 = 320.0;
      do
      {
        v19 = *(float *)((char *)&unk_1968DDEE0 + v9);
        v20 = *(float *)((char *)&unk_1968DDEE0 + v9 + 4);
        if (v19 > v2 && v20 > v3)
          break;
        if (v19 == v2 && v20 == v3)
          break;
        if (v18 <= v19 && v17 <= v20)
        {
          v17 = *(float *)((char *)&unk_1968DDEE0 + v9 + 4);
          v18 = *(float *)((char *)&unk_1968DDEE0 + v9);
        }
        v9 += 8;
      }
      while (v9 != 168);
    }
    else
    {
      v10 = 480.0;
      v11 = 320.0;
      do
      {
        v12 = *(float *)((char *)&unk_1968DDEE0 + v9);
        v13 = *(float *)((char *)&unk_1968DDEE0 + v9 + 4);
        if (v12 > v3 && v13 > v2)
          break;
        if (v12 == v3 && v13 == v2)
          break;
        if (v11 <= v12 && v10 <= v13)
        {
          v10 = *(float *)((char *)&unk_1968DDEE0 + v9 + 4);
          v11 = *(float *)((char *)&unk_1968DDEE0 + v9);
        }
        v9 += 8;
      }
      while (v9 != 168);
    }
  }
}

void WebCore::Pasteboard::~Pasteboard(WebCore::Pasteboard *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E3354370;
  if (*((_BYTE *)this + 56))
  {
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E3354370;
  if (*((_BYTE *)this + 56))
  {
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::Pasteboard::isStatic(WebCore::Pasteboard *this)
{
  return 0;
}

uint64_t WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  int *v5;
  int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  WTF *v13;
  WTF **v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  const void *v20;
  const void **v21;
  uint64_t v22;
  const void *v23;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (int *)(a1 + 40 * i);
      v7 = *v5;
      v6 = v5[1];
      if (v7 == -1 && v6 == -1)
        continue;
      v9 = a1 + 40 * i;
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 16);
      v12 = (_QWORD *)(v9 + 8);
      v14 = (WTF **)(v12 + 2);
      v13 = (WTF *)v12[2];
      if (v10 <= v11)
      {
        if (v10 == v11)
          goto LABEL_26;
        v21 = (const void **)((char *)v13 + 8 * v10);
        v22 = 8 * v11 - 8 * v10;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
            CFRelease(v23);
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      else
      {
        if (v11)
        {
          v15 = 8 * v11;
          do
          {
            v16 = *(const void **)v13;
            *(_QWORD *)v13 = 0;
            if (v16)
              CFRelease(v16);
            v13 = (WTF *)((char *)v13 + 8);
            v15 -= 8;
          }
          while (v15);
          v13 = *v14;
          v10 = *v12;
        }
        v17 = *(unsigned int *)(a1 + 40 * i + 32);
        if (v10 != v17)
        {
          v18 = (const void **)((char *)v13 + 8 * v10);
          v19 = 8 * v17 - 8 * v10;
          do
          {
            v20 = *v18;
            *v18 = 0;
            if (v20)
              CFRelease(v20);
            ++v18;
            v19 -= 8;
          }
          while (v19);
        }
      }
      v13 = *v14;
LABEL_26:
      if (v13)
      {
        *v14 = 0;
        *(_DWORD *)(a1 + 40 * i + 32) = 0;
        WTF::fastFree(v13, a2);
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::shouldTreatAtLeastOneTypeAsFile(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)v13;
  do
  {
    v4 = 0;
    do
    {
      if (*(_QWORD *)v13 != v3)
        objc_enumerationMutation(a1);
      MEMORY[0x19AEA5508](&v11, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v4));
      v7 = WebCore::cocoaTypeToImageType(&v11, v5);
      v8 = v11;
      v11 = 0;
      if (!v8)
        goto LABEL_9;
      if (*(_DWORD *)v8 != 2)
      {
        *(_DWORD *)v8 -= 2;
LABEL_9:
        if (v7)
          return 1;
        goto LABEL_10;
      }
      WTF::StringImpl::destroy(v8, v6);
      if (v7)
        return 1;
LABEL_10:
      ++v4;
    }
    while (v2 != v4);
    v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    v2 = v9;
  }
  while (v9);
  return 0;
}

void sub_195307338(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::isInternalInstall(void)::$_0 &&>>()
{
  uint64_t result;

  result = os_variant_has_internal_content();
  byte_1ECE81BC2 = result;
  return result;
}

_QWORD *WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RetainPtr<LegacyTileLayer>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  WTF **v22;
  WTF *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  int v31;
  const void **v32;
  uint64_t v33;
  const void *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  WTF *v46;
  WTF **v47;
  BOOL v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  const void **v52;
  uint64_t v53;
  const void *v54;
  const void **v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t *v59;
  WTF *v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unint64_t v64;
  const void **v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  const void **v69;
  uint64_t v70;
  const void *v71;
  const void **v72;
  uint64_t v73;
  const void *v74;
  WTF *v75;
  _QWORD *result;
  uint64_t v77;
  _QWORD *v80;
  uint64_t v81;
  unsigned int v82;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v77 = v5;
    v81 = v4;
    while (1)
    {
      v14 = (int *)(v4 + 40 * v11);
      v15 = *v14;
      v16 = v14[1];
      if (*v14 == -1 && v16 == -1)
        goto LABEL_84;
      if (v15 | v16)
      {
        v30 = *a1;
        v80 = v12;
        if (*a1)
          v31 = *(_DWORD *)(v30 - 8);
        else
          v31 = 0;
        v35 = v31 & ((0xD7862706ELL * (unint64_t)(277951225 * v15 + 95187966 * v16)) >> 4);
        v36 = 1;
        do
        {
          v37 = v35;
          v38 = (_QWORD *)(v30 + 40 * v35);
          v35 = (v35 + v36++) & v31;
        }
        while (*v38);
        v39 = v37;
        v40 = v30 + 40 * v37;
        v43 = *(_QWORD *)(v40 + 8);
        v42 = (_QWORD *)(v40 + 8);
        v41 = v43;
        v45 = v42 + 1;
        v44 = v42[1];
        v47 = (WTF **)(v42 + 2);
        v46 = (WTF *)v42[2];
        v48 = v43 == v44;
        v82 = v37;
        if (v43 > v44)
        {
          if (v44)
          {
            v49 = 8 * v44;
            do
            {
              v50 = *(const void **)v46;
              *(_QWORD *)v46 = 0;
              if (v50)
                CFRelease(v50);
              v46 = (WTF *)((char *)v46 + 8);
              v49 -= 8;
            }
            while (v49);
            v46 = *v47;
            v41 = *v42;
            v39 = v82;
          }
          v51 = *(unsigned int *)(v30 + 40 * v39 + 32);
          if (v41 != v51)
          {
            v52 = (const void **)((char *)v46 + 8 * v41);
            v53 = 8 * v51 - 8 * v41;
            do
            {
              v54 = *v52;
              *v52 = 0;
              if (v54)
                CFRelease(v54);
              ++v52;
              v53 -= 8;
            }
            while (v53);
          }
          goto LABEL_57;
        }
        if (!v48)
        {
          v55 = (const void **)((char *)v46 + 8 * v41);
          v56 = 8 * v44 - 8 * v41;
          do
          {
            v57 = *v55;
            *v55 = 0;
            if (v57)
              CFRelease(v57);
            ++v55;
            v56 -= 8;
          }
          while (v56);
LABEL_57:
          v46 = *v47;
          v39 = v82;
        }
        if (v46)
        {
          *v47 = 0;
          *(_DWORD *)(v30 + 40 * v39 + 32) = 0;
          WTF::fastFree(v46, v8);
          v39 = v82;
        }
        *v38 = *(_QWORD *)v14;
        v58 = v81 + 40 * v11;
        *(_OWORD *)v42 = 0u;
        *((_OWORD *)v42 + 1) = 0u;
        v60 = *(WTF **)(v58 + 24);
        v59 = (uint64_t *)(v58 + 24);
        *v42 = *(v59 - 2);
        *(v59 - 2) = 0;
        v61 = *v45;
        *v45 = *(v59 - 1);
        *(v59 - 1) = v61;
        *v47 = v60;
        *v59 = 0;
        v62 = v30 + 40 * v39;
        v63 = v59 + 1;
        *(_DWORD *)(v62 + 32) = *((_DWORD *)v59 + 2);
        *((_DWORD *)v59 + 2) = 0;
        v64 = *(v59 - 2);
        if (v64 > v61)
        {
          if (v61)
          {
            v65 = 0;
            v66 = 8 * v61;
            do
            {
              v67 = *v65;
              *v65 = 0;
              if (v67)
                CFRelease(v67);
              ++v65;
              v66 -= 8;
            }
            while (v66);
            v68 = *v59;
            v64 = *(v59 - 2);
            v61 = *v63;
          }
          else
          {
            v68 = 0;
          }
          v4 = v81;
          if (v64 != v61)
          {
            v72 = (const void **)(v68 + 8 * v64);
            v73 = 8 * v61 - 8 * v64;
            do
            {
              v74 = *v72;
              *v72 = 0;
              if (v74)
                CFRelease(v74);
              ++v72;
              v73 -= 8;
            }
            while (v73);
          }
          goto LABEL_79;
        }
        v4 = v81;
        if (v64 != v61)
        {
          v69 = (const void **)(8 * v64);
          v70 = 8 * v61 - 8 * v64;
          do
          {
            v71 = *v69;
            *v69 = 0;
            if (v71)
              CFRelease(v71);
            ++v69;
            v70 -= 8;
          }
          while (v70);
LABEL_79:
          v75 = (WTF *)*v59;
          if (*v59)
          {
            *v59 = 0;
            *v63 = 0;
            WTF::fastFree(v75, v8);
          }
        }
        v12 = v80;
        if (v14 == a3)
          v12 = v38;
        v13 = v77;
        goto LABEL_84;
      }
      v18 = v4 + 40 * v11;
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(_QWORD *)(v18 + 16);
      v21 = (_QWORD *)(v18 + 8);
      v22 = (WTF **)(v21 + 2);
      v23 = (WTF *)v21[2];
      if (v19 <= v20)
      {
        if (v19 == v20)
          goto LABEL_34;
        v32 = (const void **)((char *)v23 + 8 * v19);
        v33 = 8 * v20 - 8 * v19;
        do
        {
          v34 = *v32;
          *v32 = 0;
          if (v34)
            CFRelease(v34);
          ++v32;
          v33 -= 8;
        }
        while (v33);
      }
      else
      {
        if (v20)
        {
          v24 = 8 * v20;
          do
          {
            v25 = *(const void **)v23;
            *(_QWORD *)v23 = 0;
            if (v25)
              CFRelease(v25);
            v23 = (WTF *)((char *)v23 + 8);
            v24 -= 8;
          }
          while (v24);
          v23 = *v22;
          v19 = *v21;
        }
        v26 = *(unsigned int *)(v4 + 40 * v11 + 32);
        if (v19 != v26)
        {
          v27 = (const void **)((char *)v23 + 8 * v19);
          v28 = 8 * v26 - 8 * v19;
          do
          {
            v29 = *v27;
            *v27 = 0;
            if (v29)
              CFRelease(v29);
            ++v27;
            v28 -= 8;
          }
          while (v28);
        }
      }
      v23 = *v22;
LABEL_34:
      if (v23)
      {
        *v22 = 0;
        *(_DWORD *)(v4 + 40 * v11 + 32) = 0;
        WTF::fastFree(v23, v8);
      }
LABEL_84:
      if (++v11 == v13)
        goto LABEL_87;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_87:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>>,WTF::ListHashSetNode<WTF::String> *>(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v2;
  unsigned int v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = **a2;
  v5 = *((_DWORD *)v4 + 4);
  if (v5 < 0x100)
    v6 = WTF::StringImpl::hashSlowCase(v4);
  else
    v6 = v5 >> 8;
  v7 = 0;
  do
  {
    v8 = v6 & v3;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(v2 + 8 * v8));
  return v2 + 8 * v8;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformPasteboard::informationForItemAtIndex(unsigned long,long long)::$_1,BOOL>::call(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  int canExposeURLToDOMWhenPasteboardContainsFiles;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = *(id **)(a1 + 16);
  if (!WebCore::shouldTreatAtLeastOneTypeAsFile(**(void ***)(a1 + 8)))
    return 0;
  v3 = **(_QWORD **)(a1 + 24);
  MEMORY[0x19AEA5508](&v11, *MEMORY[0x1E0CA5C90]);
  WebCore::PlatformPasteboard::readString(v2, &v11, v3, &v12);
  canExposeURLToDOMWhenPasteboardContainsFiles = WebCore::Pasteboard::canExposeURLToDOMWhenPasteboardContainsFiles((WebCore::Pasteboard *)&v12, v4);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = canExposeURLToDOMWhenPasteboardContainsFiles ^ 1u;
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v8;
}

void sub_195307930(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::Detail::CallableWrapper<WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite(WTF::String const&)::$_0,BOOL>::call(uint64_t a1)
{
  id *v1;
  _BOOL8 v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = *(id **)(a1 + 8);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 0;
  MEMORY[0x19AEA5508](&v7, *MEMORY[0x1E0CA5C90]);
  WebCore::PlatformPasteboard::stringForType(v1, &v7, (WebCore::Pasteboard *)&v8);
  v4 = v8;
  if (v8)
  {
    v2 = *((_DWORD *)v8 + 1) == 0;
    v8 = 0;
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  else
  {
    v8 = 0;
    v2 = 1;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v2;
}

void sub_195307A3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::createItemProviderRegistrationList(WebCore::PasteboardCustomData const&)::$_0,void,WTF::String const&,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>::call(uint64_t a1, WTF **a2, uint64_t a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  CFTypeRef v11;
  const __CFString *v12;
  void *v13;
  CFTypeRef v14;
  void *v15;
  void *v16;
  int v17;
  CFStringRef v18;
  uint64_t v19;
  const __CFString *v20;
  CFTypeRef cf;
  CFStringRef inUTI;
  WTF::StringImpl *v23;

  result = (WTF::StringImpl *)WebCore::PlatformPasteboard::platformPasteboardTypeForSafeTypeForDOMToReadAndWrite(&v23, a2, (const WTF::StringImpl *)1);
  if (!v23)
    return result;
  if (*((_DWORD *)v23 + 1))
  {
    v7 = *(_DWORD *)(a3 + 8);
    if (v7)
    {
      if (v7 != 1)
      {
        result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        return result;
      }
      v8 = *(unsigned int **)a3;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      inUTI = (CFStringRef)v8;
      v10 = **(void ***)(a1 + 8);
      WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)v8, (WebCoreSharedBufferData **)&cf);
      v11 = cf;
      if (v23)
        v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v12 = &stru_1E3487BC0;
      objc_msgSend(v10, "addData:forType:", v11, v12);
      v14 = cf;
      cf = 0;
      if (v14)
        CFRelease(v14);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&inUTI, v13);
      goto LABEL_19;
    }
    if (*(_QWORD *)a3)
    {
      v15 = (void *)WTF::StringImpl::operator NSString *();
      WTF::String::createCFString((WTF::String *)&v23);
      if (UTTypeConformsTo(inUTI, (CFStringRef)*MEMORY[0x1E0CA5C90]))
      {
        v16 = **(void ***)(a1 + 8);
        v15 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v15);
      }
      else
      {
        v17 = UTTypeConformsTo(inUTI, (CFStringRef)*MEMORY[0x1E0CA5C20]);
        v16 = **(void ***)(a1 + 8);
        if (!v17)
        {
          v19 = objc_msgSend(v15, "dataUsingEncoding:", 4);
          if (v23)
            v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v20 = &stru_1E3487BC0;
          objc_msgSend(v16, "addData:forType:", v19, v20);
LABEL_17:
          v18 = inUTI;
          inUTI = 0;
          if (v18)
            CFRelease(v18);
          goto LABEL_19;
        }
      }
      objc_msgSend(v16, "addRepresentingObject:", v15);
      goto LABEL_17;
    }
  }
LABEL_19:
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195307C34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NavigatorCookieConsent::requestCookieConsent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  if (!v3)
    goto LABEL_12;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_12;
  if (*(_BYTE *)(v6 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7)
  {
LABEL_12:
    v8 = 0;
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
LABEL_13:
    v11 = 1;
    goto LABEL_14;
  }
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8)
  {
    v18 = *(_QWORD *)(v8 + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 16);
        v21 = *a3;
        *a3 = 0;
        v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = &off_1E33547F8;
        *((_QWORD *)v22 + 1) = v21;
        v24 = v22;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 1752))(v20, &v24);
        result = (uint64_t)v24;
        v24 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        goto LABEL_18;
      }
    }
  }
  v11 = 0;
LABEL_14:
  v12 = *a3;
  v24 = 0;
  WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v24, 0);
  result = (uint64_t)v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      if ((v11 & 1) != 0)
        return result;
      goto LABEL_18;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v11 & 1) != 0)
    return result;
LABEL_18:
  v15 = (unsigned int *)(v8 + 8);
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E31FE290;
    *((_QWORD *)v23 + 1) = v15;
    v24 = v23;
    WTF::ensureOnMainThread();
    result = (uint64_t)v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::CookieChangeEvent::~CookieChangeEvent(WebCore::CookieChangeEvent *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  unsigned int v5;
  WTF *v6;

  v3 = *((_DWORD *)this + 25);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct(*((WTF::StringImpl **)this + 11), (WTF::StringImpl *)(*((_QWORD *)this + 11) + 56 * v3));
  v4 = (WTF *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_DWORD *)this + 21);
  if (v5)
    WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct(*((WTF::StringImpl **)this + 9), (WTF::StringImpl *)(*((_QWORD *)this + 9) + 56 * v5));
  v6 = (WTF *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v6, a2);
  }
  WebCore::Event::~Event(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CookieChangeEvent::~CookieChangeEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::CookieStore::scriptExecutionContext(WebCore::CookieStore *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::CookieStore::MainThreadBridge::ensureOnMainThread(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  void *v8;
  int v9;
  bmalloc::api *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (result)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      ++*(_DWORD *)(result + 24);
  }
  v3 = *(_QWORD *)(result + 40);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = v4 - 96;
    v6 = *(unsigned __int8 *)(v4 + 178);
    if (*(_BYTE *)(v4 + 178))
    {
      if (v6 == 1 || v6 == 2)
      {
        v7 = 0;
        ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v7 = 0;
      *(_DWORD *)(v4 - 264) += 2;
    }
  }
  else
  {
    v5 = 0;
    v7 = 1;
  }
  if (*(_DWORD *)(result + 24) == 1)
  {
    WebCore::CookieStore::~CookieStore((WebCore::CookieStore *)result, a2);
    result = bmalloc::api::isoDeallocate(v10, v11);
    if ((v7 & 1) != 0)
      return result;
  }
  else
  {
    --*(_DWORD *)(result + 24);
    if ((v7 & 1) != 0)
      return result;
  }
  if (*(_BYTE *)(v5 + 274))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5) & 1) == 0)
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v5 + 360) + 128);
    v13 = *a2;
    *a2 = 0;
    v14 = v13;
    v15 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 56))(v12, &v14);
    result = v14;
    v14 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_DWORD *)(v5 - 168) += 2;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v5);
    if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v8);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v9 = *(unsigned __int8 *)(v5 + 274);
  if (*(_BYTE *)(v5 + 274))
  {
    if (v9 == 1)
    {
      if (*(_DWORD *)(v5 + 312) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      else
        --*(_DWORD *)(v5 + 312);
    }
    else if (v9 == 2)
    {
      return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
    }
  }
  else if (*(_DWORD *)(v5 - 168) == 2)
  {
    if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v8);
  }
  else
  {
    *(_DWORD *)(v5 - 168) -= 2;
  }
  return result;
}

_QWORD *WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3354840;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

_QWORD *WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WebCore::CookieStoreGetOptions &&::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3354840;
      v11[1] = v7;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  return a1;
}

_QWORD *WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;

  v3 = a1[26];
  a1[26] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 9), a2);
  v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E3354840;
      v13[1] = v9;
      v14 = v13;
      WTF::ensureOnMainThread();
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  return a1;
}

_QWORD *WebCore::CookieStore::create@<X0>(WebCore::CookieStore *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  _QWORD *v20;

  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = &unk_1E33A4FC0;
  v7 = (_QWORD *)(v5 + 32);
  if (this && !*((_BYTE *)this + 274))
  {
    v8 = (char *)this - 192;
    v9 = *((_QWORD *)this + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    this = (WebCore::CookieStore *)(v8 + 192);
  }
  *(_QWORD *)(v5 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v5 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 32), this);
  *(_QWORD *)(v6 + 32) = &off_1E33A0540;
  *(_QWORD *)(v6 + 48) = 0;
  if (this)
  {
    if (*((_BYTE *)this + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1953085E0);
    }
    v20 = v7;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 16, (uint64_t *)&v20, (uint64_t)&v19);
  }
  *(_QWORD *)v6 = off_1E3354528;
  *(_QWORD *)(v6 + 32) = &unk_1E33545D0;
  *(_QWORD *)(v6 + 56) = &unk_1E3354628;
  *(_QWORD *)(v6 + 64) = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v11 = 1;
  v12 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v6);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(_QWORD *)(v11 + 8) = v12;
  v14 = (_OWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v6 + 40);
  if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
  {
    v17 = *(_OWORD *)(v16 + 144);
    *v14 = *(_OWORD *)(v16 + 128);
    *(_OWORD *)(v11 + 32) = v17;
  }
  else
  {
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
  }
  *(_QWORD *)(v6 + 72) = v11;
  *(_BYTE *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v7);
}

void WebCore::CookieStore::~CookieStore(WebCore::CookieStore *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v3 = *((_QWORD *)this + 9);
  v4 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v23 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v23)
      {
        v27 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v23));
        v4 = v27;
      }
      v24 = *(WTF **)(v4 + 16);
      if (v24)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v26 = v4;
        WTF::fastFree(v24, a2);
        v4 = v26;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 14);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (_DWORD **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (_DWORD *)-1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (v10[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
            else
              --v10[4];
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E3354840;
      v25[1] = v15;
      v28 = v25;
      WTF::ensureOnMainThread();
      if (v28)
        (*(void (**)(_QWORD *))(*v28 + 8))(v28);
    }
  }
  v18 = *((_QWORD *)this + 8);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::CookieStore *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v22);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CookieStore::~CookieStore(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::CookieStore::~CookieStore(WebCore::CookieStore *this, void *a2)
{
  WebCore::CookieStore::~CookieStore((WebCore::CookieStore *)((char *)this - 32), a2);
}

{
  WebCore::CookieStore::~CookieStore((WebCore::CookieStore *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CookieStore::~CookieStore((WebCore::CookieStore *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CookieStore::~CookieStore((WebCore::CookieStore *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::CookieStore::get(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  objc_class *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45[2];
  WTF::StringImpl *v46[2];
  objc_class *v47;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v7 = *(unsigned __int8 *)(v5 + 178);
    if (*(_BYTE *)(v5 + 178))
    {
      if (v7 == 1 || v7 == 2)
        ++*(_DWORD *)(v5 + 216);
    }
    else
    {
      *(_DWORD *)(v5 - 264) += 2;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), a2);
    if (v8)
    {
      v9 = v8;
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
      if (v8[8] == 1)
      {
        v11 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v47 = 0;
        LOBYTE(v44) = 14;
        if (v43)
          *(_DWORD *)v43 += 2;
        v45[0] = v43;
        WebCore::DeferredPromise::reject(v11, (unsigned __int8 *)&v44, 0, &v47);
        v13 = v45[0];
        v45[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        result = v43;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v43, v12);
          else
            *(_DWORD *)v43 -= 2;
        }
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 104);
        v17 = (uint64_t *)(a1 + 104);
        *v17 = v18 + 1;
        WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v44, v17 + 1, v17, a3);
        v19 = *v17;
        v20 = *(v17 - 4);
        do
          v21 = __ldaxr((unsigned int *)v20);
        while (__stlxr(v21 + 1, (unsigned int *)v20));
        v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = off_1E3354A80;
        *((_QWORD *)v22 + 1) = v19;
        v44 = (WTF::StringImpl *)v20;
        do
          v23 = __ldaxr((unsigned int *)v20);
        while (__stlxr(v23 + 1, (unsigned int *)v20));
        v45[0] = (WTF::StringImpl *)v20;
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        v46[1] = v22;
        v24 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v24 = off_1E3354890;
        *(_QWORD *)(v24 + 8) = v44;
        *(WTF::StringImpl **)(v24 + 16) = v45[0];
        v25 = v45[1];
        *(_OWORD *)v45 = 0u;
        *(_QWORD *)(v24 + 24) = v25;
        *(WTF::StringImpl **)(v24 + 32) = v46[0];
        v26 = v46[1];
        *(_OWORD *)v46 = 0u;
        *(_QWORD *)(v24 + 40) = v26;
        v47 = (objc_class *)v24;
        WebCore::CookieStore::MainThreadBridge::ensureOnMainThread(*(_QWORD *)(v20 + 8), &v47);
        if (v47)
          (*(void (**)(objc_class *))(*(_QWORD *)v47 + 8))(v47);
        v27 = v46[1];
        v46[1] = 0;
        if (v27)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
        v28 = v46[0];
        v46[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v12);
          else
            *(_DWORD *)v28 -= 2;
        }
        result = v45[1];
        v45[1] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          else
            *(_DWORD *)result -= 2;
        }
        v29 = (unsigned int *)v45[0];
        v45[0] = 0;
        if (v29)
        {
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            atomic_store(1u, v29);
            v42 = (objc_class *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v42 = off_1E3354840;
            *((_QWORD *)v42 + 1) = v29;
            v47 = v42;
            WTF::ensureOnMainThread();
            result = v47;
            v47 = 0;
            if (result)
              result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          }
        }
        do
        {
          v32 = __ldaxr((unsigned int *)v20);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, (unsigned int *)v20));
        if (!v33)
        {
          atomic_store(1u, (unsigned int *)v20);
          v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v41 = off_1E3354840;
          *((_QWORD *)v41 + 1) = v20;
          v44 = v41;
          WTF::ensureOnMainThread();
          result = v44;
          v44 = 0;
          if (result)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        }
      }
      do
      {
        v34 = __ldaxr(v9);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v9));
      if (!v35)
      {
        atomic_store(1u, v9);
        v38 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
        *((_QWORD *)v9 + 6) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v12);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
        *((_QWORD *)v9 + 5) = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v12);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = v9[8];
        if ((_DWORD)v40 != -1)
          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33547B8[v40])(&v44, v9 + 2);
        v9[8] = -1;
        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v9, v12);
      }
    }
    else
    {
      v37 = *a3;
      v44 = 0;
      WebCore::DeferredPromise::reject(v37, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v44, 0);
      result = v44;
      v44 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
    v36 = *(unsigned __int8 *)(v5 + 178);
    if (*(_BYTE *)(v5 + 178))
    {
      if (v36 == 1)
      {
        if (*(_DWORD *)(v5 + 216) == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
        else
          --*(_DWORD *)(v5 + 216);
      }
      else if (v36 == 2)
      {
        return (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
      }
    }
    else if (*(_DWORD *)(v5 - 264) == 2)
    {
      if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v12);
    }
    else
    {
      *(_DWORD *)(v5 - 264) -= 2;
    }
  }
  else
  {
    v15 = *a3;
    v44 = 0;
    WebCore::DeferredPromise::reject(v15, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v44, 0);
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_36;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  v20 = *a4;
  *a4 = 0;
  result = (uint64_t *)v16[1];
  *v16 = v11;
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_26;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_31:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, v28, v16);
      v16 = result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_31;
  }
LABEL_35:
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_36:
  *v7 = (uint64_t)v16;
  v7[1] = v30;
  *((_BYTE *)v7 + 16) = v29;
  return result;
}

unsigned int *WebCore::CookieStore::getAll(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int *result;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char isSameOriginDomain;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  char v61;
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  WTF::StringImpl *v66;
  char v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70[2];
  __int128 v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = v5 - 96;
      v9 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v9 == 1 || v9 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), a2);
      if (!v10)
      {
        v48 = *a3;
        v69 = 0;
        WebCore::DeferredPromise::reject(v48, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v69, 0);
        result = (unsigned int *)v69;
        v69 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
          else
            *result -= 2;
        }
        goto LABEL_74;
      }
      v11 = v10;
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
      if (v10[8] == 1)
      {
        v13 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v65 = 14;
        v62 = 0;
        LOBYTE(v69) = 14;
        v14 = v66;
        if (v66)
          *(_DWORD *)v66 += 2;
        v70[0] = v14;
        WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v69, 0, &v62);
        v16 = v70[0];
        v70[0] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        result = (unsigned int *)v66;
        v66 = 0;
        if (!result)
          goto LABEL_72;
        goto LABEL_70;
      }
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v5 - 96);
      v21 = *(WTF::StringImpl **)v20;
      if (*(_QWORD *)v20)
        *(_DWORD *)v21 += 2;
      v62 = v21;
      v22 = *(_OWORD *)(v20 + 24);
      v63 = *(_OWORD *)(v20 + 8);
      v64 = v22;
      if (!*((_QWORD *)a2 + 1))
        goto LABEL_34;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)(v5 - 96) + 120))(&v69, v5 - 96, (_QWORD *)a2 + 1, 0);
      if (*(_BYTE *)(v5 + 178) || (WTF::equal(v69, v21, v23) & 1) != 0)
      {
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v69, (uint64_t *)&v68);
        v24 = v68;
        isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v11, v68);
        v68 = 0;
        do
        {
          v27 = __ldaxr((unsigned int *)v24);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v24));
        if (v28)
        {
          if ((isSameOriginDomain & 1) != 0)
          {
LABEL_28:
            v29 = v69;
            v69 = 0;
            v30 = v62;
            v62 = v29;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::destroy(v30, v26);
                v31 = v69;
              }
              else
              {
                v31 = 0;
                *(_DWORD *)v30 -= 2;
              }
            }
            else
            {
              v31 = 0;
            }
            v63 = *(_OWORD *)v70;
            LODWORD(v70[0]) &= ~1u;
            v64 = v71;
            v69 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v26);
              else
                *(_DWORD *)v31 -= 2;
            }
LABEL_34:
            v33 = *(_QWORD *)(a1 + 104);
            v32 = (uint64_t *)(a1 + 104);
            *v32 = v33 + 1;
            WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v69, v32 + 1, v32, a3);
            v34 = *v32;
            v35 = *(v32 - 4);
            do
              v36 = __ldaxr((unsigned int *)v35);
            while (__stlxr(v36 + 1, (unsigned int *)v35));
            v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v37 = off_1E3354AA8;
            v37[1] = v34;
            v69 = (WTF::StringImpl *)v35;
            do
              v38 = __ldaxr((unsigned int *)v35);
            while (__stlxr(v38 + 1, (unsigned int *)v35));
            v70[0] = (WTF::StringImpl *)v35;
            WTF::String::isolatedCopy();
            WTF::String::isolatedCopy();
            WTF::URL::isolatedCopy();
            v76 = v37;
            v39 = WTF::fastMalloc((WTF *)0x58);
            *(_QWORD *)v39 = off_1E3354940;
            *(_QWORD *)(v39 + 8) = v69;
            *(WTF::StringImpl **)(v39 + 16) = v70[0];
            v40 = v70[1];
            *(_OWORD *)v70 = 0u;
            *(_QWORD *)(v39 + 24) = v40;
            *(_QWORD *)(v39 + 32) = v71;
            v41 = *((_QWORD *)&v71 + 1);
            v71 = 0u;
            *(_QWORD *)(v39 + 40) = v41;
            LODWORD(v41) = v72;
            *(_DWORD *)(v39 + 48) = v72;
            *(_OWORD *)(v39 + 52) = v73;
            *(_QWORD *)(v39 + 68) = v74;
            *(_DWORD *)(v39 + 76) = v75;
            v72 = v41 & 0xFFFFFFFE;
            v42 = v76;
            v76 = 0;
            *(_QWORD *)(v39 + 80) = v42;
            v68 = (WTF::StringImpl *)v39;
            WebCore::CookieStore::MainThreadBridge::ensureOnMainThread(*(_QWORD *)(v35 + 8), &v68);
            if (v68)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v68 + 8))(v68);
            WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WebCore::CookieStoreGetOptions &&::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0(&v69, v43);
            do
            {
              v44 = __ldaxr((unsigned int *)v35);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, (unsigned int *)v35));
            if (!v45)
            {
              atomic_store(1u, (unsigned int *)v35);
              v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v46 = off_1E3354840;
              *((_QWORD *)v46 + 1) = v35;
              v69 = v46;
              WTF::ensureOnMainThread();
              v47 = v69;
              v69 = 0;
              if (v47)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47 + 8))(v47);
            }
            goto LABEL_69;
          }
        }
        else
        {
          v61 = isSameOriginDomain;
          atomic_store(1u, (unsigned int *)v24);
          v49 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
          *((_QWORD *)v24 + 6) = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v26);
            else
              *(_DWORD *)v49 -= 2;
          }
          v50 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
          *((_QWORD *)v24 + 5) = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v26);
            else
              *(_DWORD *)v50 -= 2;
          }
          v51 = *((unsigned int *)v24 + 8);
          if ((_DWORD)v51 != -1)
            ((void (*)(char *, char *))off_1E33547B8[v51])(&v67, (char *)v24 + 8);
          *((_DWORD *)v24 + 8) = -1;
          WTF::fastFree(v24, v26);
          if ((v61 & 1) != 0)
            goto LABEL_28;
        }
      }
      v52 = *a3;
      v68 = 0;
      WebCore::DeferredPromise::reject(v52, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v68, 0);
      v53 = v68;
      v68 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v15);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = v69;
      v69 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v15);
        else
          *(_DWORD *)v54 -= 2;
      }
LABEL_69:
      result = (unsigned int *)v62;
      v62 = 0;
      if (!result)
      {
        do
        {
LABEL_72:
          v55 = __ldaxr(v11);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v11));
        if (!v56)
        {
          atomic_store(1u, v11);
          v58 = (WTF::StringImpl *)*((_QWORD *)v11 + 6);
          *((_QWORD *)v11 + 6) = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v15);
            else
              *(_DWORD *)v58 -= 2;
          }
          v59 = (WTF::StringImpl *)*((_QWORD *)v11 + 5);
          *((_QWORD *)v11 + 5) = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v15);
            else
              *(_DWORD *)v59 -= 2;
          }
          v60 = v11[8];
          if ((_DWORD)v60 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33547B8[v60])(&v69, v11 + 2);
          v11[8] = -1;
          result = (unsigned int *)WTF::fastFree((WTF *)v11, v15);
        }
LABEL_74:
        v57 = *(unsigned __int8 *)(v5 + 178);
        if (*(_BYTE *)(v5 + 178))
        {
          if (v57 == 1)
          {
            if (*(_DWORD *)(v5 + 216) == 1)
              return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v5 - 96);
            else
              --*(_DWORD *)(v5 + 216);
          }
          else if (v57 == 2)
          {
            return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
          }
        }
        else if (*(_DWORD *)(v5 - 264) == 2)
        {
          if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v15);
        }
        else
        {
          *(_DWORD *)(v5 - 264) -= 2;
        }
        return result;
      }
LABEL_70:
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
      else
        *result -= 2;
      goto LABEL_72;
    }
  }
  v18 = *a3;
  v69 = 0;
  WebCore::DeferredPromise::reject(v18, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v69, 0);
  result = (unsigned int *)v69;
  v69 = 0;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CookieStore::set(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;

  v6 = *a2;
  *a2 = 0;
  v7 = *a3;
  *a3 = 0;
  v13 = v6;
  v14 = v7;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = 0;
  WebCore::CookieStore::set(a1, (uint64_t)&v13, a4);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CookieStore::set(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  double v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  void *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  char v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107[2];
  _BYTE v108[32];
  uint64_t v109;
  __int16 v110;
  char v111;
  uint64_t v112;
  uint64_t v113[5];
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  char v124;
  __int128 v125;
  __int128 v126;
  _BYTE v127[27];
  __int128 v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  char v132;
  _QWORD *v133;
  objc_class *v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = v5 - 96;
      v9 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v9 == 1 || v9 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), (WTF::StringImpl *)a2);
      if (!v10)
      {
        v92 = *a3;
        v119 = 0;
        WebCore::DeferredPromise::reject(v92, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v119, 0);
        v93 = v119;
        v119 = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2)
            WTF::StringImpl::destroy(v93, v16);
          else
            *(_DWORD *)v93 -= 2;
        }
        goto LABEL_158;
      }
      v11 = v10;
      do
        v12 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v12 + 1, (unsigned int *)v10));
      v13 = *(unsigned int *)(v10 + 32);
      if ((_DWORD)v13 == 1)
      {
        v14 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v117 = 14;
        v107[0] = 0;
        LOBYTE(v119) = 14;
        v15 = v118;
        if (v118)
          *(_DWORD *)v118 += 2;
        *(_QWORD *)&v120 = v15;
        WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v119, 0, v107);
        v17 = (WTF::StringImpl *)v120;
        *(_QWORD *)&v120 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v118;
        v118 = 0;
        if (!v18)
          goto LABEL_156;
        if (*(_DWORD *)v18 != 2)
        {
          *(_DWORD *)v18 -= 2;
          goto LABEL_156;
        }
        goto LABEL_166;
      }
      v22 = *(WTF::StringImpl **)(v10 + 40);
      if (v22)
        *(_DWORD *)v22 += 2;
      if ((_DWORD)v13 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_192;
      }
      v119 = (WTF::StringImpl *)v107;
      v23 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33547A8[v13])(&v119, v10 + 8);
      if (v23)
        *(_DWORD *)v23 += 2;
      LOBYTE(v109) = 0;
      v110 = 0;
      v111 = 0;
      *(_OWORD *)v107 = 0u;
      memset(v108, 0, 25);
      v112 = 0;
      v113[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v113);
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v25 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      v26 = v107[0];
      v107[0] = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v28 = v107[1];
      v107[1] = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          v28 = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      WTF::WallTime::now(v28);
      *(double *)&v108[16] = v30 * 1000.0;
      v31 = *(WTF::StringImpl **)(a2 + 32);
      if (v31)
      {
        *(_QWORD *)(a2 + 32) = 0;
      }
      else if (v22)
      {
        *(_DWORD *)v22 += 2;
        v31 = v22;
      }
      else
      {
        v31 = 0;
      }
      v32 = *(WTF::StringImpl **)v108;
      *(_QWORD *)v108 = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::destroy(v32, v29);
          if (!*(_QWORD *)v108)
            goto LABEL_66;
LABEL_39:
          if (WTF::StringImpl::startsWith())
          {
            v33 = *a3;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v134 = 0;
            LOBYTE(v119) = 33;
            if (v106)
              *(_DWORD *)v106 += 2;
            *(_QWORD *)&v120 = v106;
            WebCore::DeferredPromise::reject(v33, (unsigned __int8 *)&v119, 0, &v134);
            v35 = (WTF::StringImpl *)v120;
            *(_QWORD *)&v120 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v106;
            if (!v106)
              goto LABEL_150;
LABEL_148:
            if (*(_DWORD *)v36 != 2)
            {
              *(_DWORD *)v36 -= 2;
              goto LABEL_150;
            }
            goto LABEL_167;
          }
          if (*(_QWORD *)v108)
          {
            if (!v23)
            {
              if (!*(_DWORD *)(*(_QWORD *)v108 + 4))
                goto LABEL_56;
              goto LABEL_142;
            }
          }
          else if (!v23)
          {
            goto LABEL_56;
          }
          if ((WTF::StringImpl::endsWith() & 1) != 0)
          {
            v37 = *(unsigned int *)(v23 + 4);
            if (*(_QWORD *)v108)
            {
              v38 = *(_DWORD *)(*(_QWORD *)v108 + 4);
              if (v37 <= v38)
                goto LABEL_56;
            }
            else
            {
              if (!(_DWORD)v37)
                goto LABEL_56;
              v38 = 0;
            }
            v39 = v37 - v38;
            v40 = v39 >= v37
                ? v37 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32)
                : ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32) | v39;
            v119 = *(WTF::StringImpl **)(v23 + 8);
            *(_QWORD *)&v120 = v40;
            if ((WTF::StringView::endsWith() & 1) != 0)
            {
LABEL_56:
              WTF::String::utf8();
              v41 = v119;
              if (v119)
              {
                v42 = *((_QWORD *)v119 + 1);
                v119 = 0;
                if (*(_DWORD *)v41 == 1)
                {
                  WTF::fastFree(v41, v29);
                  if (v42 >= 0x401)
                  {
LABEL_59:
                    v43 = *a3;
                    WTF::tryFastCompactMalloc((WTF *)0x4E);
                    v44 = v119;
                    if (v119)
                    {
                      *(_QWORD *)v119 = 0x3A00000002;
                      qmemcpy((char *)v44 + 20, "The size of the domain must not be greater than 1024 bytes", 58);
                      *((_QWORD *)v44 + 1) = (char *)v44 + 20;
                      *((_DWORD *)v44 + 4) = 4;
LABEL_90:
                      v134 = 0;
                      LOBYTE(v119) = 33;
                      *(_DWORD *)v44 = 4;
                      *(_QWORD *)&v120 = v44;
                      WebCore::DeferredPromise::reject(v43, (unsigned __int8 *)&v119, 0, &v134);
                      v58 = (WTF::StringImpl *)v120;
                      *(_QWORD *)&v120 = 0;
                      if (v58)
                      {
                        if (*(_DWORD *)v58 == 2)
                          WTF::StringImpl::destroy(v58, v34);
                        else
                          *(_DWORD *)v58 -= 2;
                      }
                      if (*(_DWORD *)v44 != 2)
                      {
                        *(_DWORD *)v44 -= 2;
LABEL_150:
                        WebCore::Cookie::~Cookie((WebCore::Cookie *)v107, v34);
                        if (v23)
                        {
                          if (*(_DWORD *)v23 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v23, v16);
                          else
                            *(_DWORD *)v23 -= 2;
                        }
                        v8 = v5 - 96;
                        if (!v22)
                          goto LABEL_156;
                        if (*(_DWORD *)v22 != 2)
                        {
                          *(_DWORD *)v22 -= 2;
                          goto LABEL_156;
                        }
                        v18 = v22;
LABEL_166:
                        WTF::StringImpl::destroy(v18, v16);
                        do
                        {
LABEL_156:
                          v96 = __ldaxr((unsigned int *)v11);
                          v97 = v96 - 1;
                        }
                        while (__stlxr(v97, (unsigned int *)v11));
                        if (!v97)
                        {
                          atomic_store(1u, (unsigned int *)v11);
                          v99 = *(WTF::StringImpl **)(v11 + 48);
                          *(_QWORD *)(v11 + 48) = 0;
                          if (v99)
                          {
                            if (*(_DWORD *)v99 == 2)
                              WTF::StringImpl::destroy(v99, v16);
                            else
                              *(_DWORD *)v99 -= 2;
                          }
                          v100 = *(WTF::StringImpl **)(v11 + 40);
                          *(_QWORD *)(v11 + 40) = 0;
                          if (v100)
                          {
                            if (*(_DWORD *)v100 == 2)
                              WTF::StringImpl::destroy(v100, v16);
                            else
                              *(_DWORD *)v100 -= 2;
                          }
                          v101 = *(unsigned int *)(v11 + 32);
                          if ((_DWORD)v101 != -1)
                            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33547B8[v101])(&v119, v11 + 8);
                          *(_DWORD *)(v11 + 32) = -1;
                          WTF::fastFree((WTF *)v11, v16);
                        }
LABEL_158:
                        v98 = *(unsigned __int8 *)(v5 + 178);
                        if (*(_BYTE *)(v5 + 178))
                        {
                          if (v98 == 1)
                          {
                            if (*(_DWORD *)(v5 + 216) == 1)
                              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
                            else
                              --*(_DWORD *)(v5 + 216);
                          }
                          else if (v98 == 2)
                          {
                            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
                          }
                        }
                        else if (*(_DWORD *)(v5 - 264) == 2)
                        {
                          if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v16);
                        }
                        else
                        {
                          *(_DWORD *)(v5 - 264) -= 2;
                        }
                        return;
                      }
                      v36 = v44;
LABEL_167:
                      WTF::StringImpl::destroy(v36, v34);
                      goto LABEL_150;
                    }
LABEL_195:
                    __break(0xC471u);
                    JUMPOUT(0x19530A4CCLL);
                  }
                }
                else
                {
                  --*(_DWORD *)v41;
                  if (v42 > 0x400)
                    goto LABEL_59;
                }
              }
LABEL_66:
              v45 = *(_QWORD *)(a2 + 40);
              *(_QWORD *)(a2 + 40) = 0;
              v46 = *(WTF::StringImpl **)&v108[8];
              *(_QWORD *)&v108[8] = v45;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                {
                  WTF::StringImpl::destroy(v46, v29);
                  if (!*(_QWORD *)&v108[8])
                    goto LABEL_109;
                  goto LABEL_70;
                }
                *(_DWORD *)v46 -= 2;
              }
              if (!v45)
                goto LABEL_109;
LABEL_70:
              if ((WTF::StringImpl::startsWith() & 1) == 0)
              {
                v59 = *a3;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v134 = 0;
                LOBYTE(v119) = 33;
                if (v104)
                  *(_DWORD *)v104 += 2;
                *(_QWORD *)&v120 = v104;
                WebCore::DeferredPromise::reject(v59, (unsigned __int8 *)&v119, 0, &v134);
                v60 = (WTF::StringImpl *)v120;
                *(_QWORD *)&v120 = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy(v60, v34);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                v36 = v104;
                if (!v104)
                  goto LABEL_150;
                goto LABEL_148;
              }
              if (*(_QWORD *)&v108[8])
              {
                if ((WTF::StringImpl::endsWith() & 1) != 0)
                  goto LABEL_85;
                v47 = *(_QWORD *)&v108[8];
                if (*(_QWORD *)&v108[8])
                {
                  v48 = *(_DWORD *)(*(_QWORD *)&v108[8] + 4);
                  **(_DWORD **)&v108[8] += 2;
                  if ((v48 & 0x80000000) == 0)
                  {
                    v49 = (v48 + 1);
                    if (!__OFADD__(v48, 1))
                    {
                      v102 = 0;
                      v50 = 0;
                      if ((*(_BYTE *)(v47 + 16) & 4) == 0)
                      {
LABEL_78:
                        v103 = (WTF::StringImpl *)v47;
                        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v49, v50, v47, 47, &v119);
                        v52 = v119;
                        if (!v119)
                          goto LABEL_195;
                        v119 = 0;
                        v53 = *(WTF::StringImpl **)&v108[8];
                        *(_QWORD *)&v108[8] = v52;
                        v54 = v103;
                        if (v53)
                        {
                          if (*(_DWORD *)v53 == 2)
                          {
                            WTF::StringImpl::destroy(v53, v51);
                            v54 = v103;
                            v91 = v119;
                            v119 = 0;
                            if (v91)
                            {
                              if (*(_DWORD *)v91 == 2)
                              {
                                WTF::StringImpl::destroy(v91, v51);
                                v54 = v103;
                              }
                              else
                              {
                                *(_DWORD *)v91 -= 2;
                              }
                            }
                          }
                          else
                          {
                            *(_DWORD *)v53 -= 2;
                            v119 = 0;
                          }
                        }
                        if ((v102 & 1) == 0)
                        {
                          if (*(_DWORD *)v54 == 2)
                            WTF::StringImpl::destroy(v54, v51);
                          else
                            *(_DWORD *)v54 -= 2;
                        }
LABEL_85:
                        WTF::String::utf8();
                        v56 = v119;
                        if (v119)
                        {
                          v57 = *((_QWORD *)v119 + 1);
                          v119 = 0;
                          if (*(_DWORD *)v56 == 1)
                          {
                            WTF::fastFree(v56, v55);
                            if (v57 >= 0x401)
                              goto LABEL_88;
                          }
                          else
                          {
                            --*(_DWORD *)v56;
                            if (v57 > 0x400)
                            {
LABEL_88:
                              v43 = *a3;
                              WTF::tryFastCompactMalloc((WTF *)0x4C);
                              v44 = v119;
                              if (!v119)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19530A4D4);
                              }
                              *(_QWORD *)v119 = 0x3800000002;
                              qmemcpy((char *)v44 + 20, "The size of the path must not be greater than 1024 bytes", 56);
                              *((_QWORD *)v44 + 1) = (char *)v44 + 20;
                              *((_DWORD *)v44 + 4) = 4;
                              goto LABEL_90;
                            }
                          }
                        }
LABEL_109:
                        if (*(_BYTE *)(a2 + 24))
                        {
                          *(_QWORD *)&v108[24] = *(_QWORD *)(a2 + 16);
                          LOBYTE(v109) = 1;
                        }
                        v61 = *(unsigned __int8 *)(a2 + 48);
                        if (v61 <= 2)
                          v116 = 2 - v61;
                        v63 = *(_QWORD *)(a1 + 104);
                        v62 = (uint64_t *)(a1 + 104);
                        *v62 = v63 + 1;
                        WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v119, v62 + 1, v62, a3);
                        v64 = *v62;
                        v65 = *(v62 - 4);
                        do
                          v66 = __ldaxr((unsigned int *)v65);
                        while (__stlxr(v66 + 1, (unsigned int *)v65));
                        v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                        *v67 = off_1E3354AD0;
                        v67[1] = v64;
                        v119 = (WTF::StringImpl *)v65;
                        do
                          v68 = __ldaxr((unsigned int *)v65);
                        while (__stlxr(v68 + 1, (unsigned int *)v65));
                        *(_QWORD *)&v120 = v65;
                        WTF::String::isolatedCopy();
                        WTF::String::isolatedCopy();
                        *(_QWORD *)&v122 = *(_QWORD *)(a2 + 16);
                        BYTE8(v122) = *(_BYTE *)(a2 + 24);
                        WTF::String::isolatedCopy();
                        WTF::String::isolatedCopy();
                        v124 = *(_BYTE *)(a2 + 48);
                        WTF::String::isolatedCopy();
                        WTF::String::isolatedCopy();
                        WTF::String::isolatedCopy();
                        WTF::String::isolatedCopy();
                        v69 = *(_QWORD *)&v108[16];
                        v70 = *(_QWORD *)&v108[24];
                        v71 = v109;
                        v72 = v110;
                        v73 = v111;
                        WTF::String::isolatedCopy();
                        WTF::URL::isolatedCopy();
                        v74 = v114;
                        v114 = 0;
                        *(_QWORD *)&v125 = v141;
                        *((_QWORD *)&v125 + 1) = v140;
                        *(_QWORD *)&v126 = v139;
                        *((_QWORD *)&v126 + 1) = v138;
                        *(_QWORD *)v127 = v69;
                        *(_QWORD *)&v127[8] = v70;
                        *(_QWORD *)&v127[16] = v71;
                        *(_WORD *)&v127[24] = v72;
                        v127[26] = v73;
                        *(_QWORD *)&v128 = v137;
                        *((_QWORD *)&v128 + 1) = v134;
                        *(_OWORD *)v129 = v135;
                        *(_OWORD *)&v129[16] = v136;
                        v130 = v74;
                        v75 = v115;
                        v115 = 0;
                        v131 = v75;
                        v132 = v116;
                        v133 = v67;
                        v76 = WTF::fastMalloc((WTF *)0xE0);
                        *(_QWORD *)v76 = off_1E33549E0;
                        *(_QWORD *)(v76 + 8) = v119;
                        *(_QWORD *)(v76 + 16) = v120;
                        v77 = *((_QWORD *)&v120 + 1);
                        v120 = 0u;
                        *(_QWORD *)(v76 + 24) = v77;
                        v78 = v121;
                        v121 = 0;
                        *(_QWORD *)(v76 + 32) = v78;
                        *(_OWORD *)(v76 + 40) = v122;
                        *(_QWORD *)(v76 + 56) = v123;
                        v79 = *((_QWORD *)&v123 + 1);
                        v123 = 0u;
                        *(_QWORD *)(v76 + 64) = v79;
                        *(_BYTE *)(v76 + 72) = v124;
                        *(_QWORD *)(v76 + 80) = v125;
                        v80 = *((_QWORD *)&v125 + 1);
                        v125 = 0u;
                        *(_QWORD *)(v76 + 88) = v80;
                        *(_QWORD *)(v76 + 96) = v126;
                        v81 = *((_QWORD *)&v126 + 1);
                        v126 = 0u;
                        *(_QWORD *)(v76 + 104) = v81;
                        v82 = *(_OWORD *)v127;
                        *(_OWORD *)(v76 + 123) = *(_OWORD *)&v127[11];
                        *(_OWORD *)(v76 + 112) = v82;
                        *(_QWORD *)(v76 + 144) = v128;
                        v83 = *((_QWORD *)&v128 + 1);
                        v128 = 0u;
                        *(_QWORD *)(v76 + 152) = v83;
                        LODWORD(v83) = *(_DWORD *)v129;
                        *(_DWORD *)(v76 + 160) = *(_DWORD *)v129;
                        *(_OWORD *)(v76 + 164) = *(_OWORD *)&v129[4];
                        *(_QWORD *)(v76 + 180) = *(_QWORD *)&v129[20];
                        *(_DWORD *)(v76 + 188) = *(_DWORD *)&v129[28];
                        *(_DWORD *)v129 = v83 & 0xFFFFFFFE;
                        v84 = v130;
                        v130 = 0;
                        *(_QWORD *)(v76 + 192) = v84;
                        *(_QWORD *)&v82 = v131;
                        v131 = 0;
                        *(_QWORD *)(v76 + 200) = v82;
                        *(_BYTE *)(v76 + 208) = v132;
                        v85 = v133;
                        v133 = 0;
                        *(_QWORD *)(v76 + 216) = v85;
                        v134 = (objc_class *)v76;
                        WebCore::CookieStore::MainThreadBridge::ensureOnMainThread(*(_QWORD *)(v65 + 8), &v134);
                        if (v134)
                          (*(void (**)(objc_class *))(*(_QWORD *)v134 + 8))(v134);
                        WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0(&v119, v86);
                        do
                        {
                          v87 = __ldaxr((unsigned int *)v65);
                          v88 = v87 - 1;
                        }
                        while (__stlxr(v88, (unsigned int *)v65));
                        if (!v88)
                        {
                          atomic_store(1u, (unsigned int *)v65);
                          v89 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v89 = off_1E3354840;
                          *((_QWORD *)v89 + 1) = v65;
                          v119 = v89;
                          WTF::ensureOnMainThread();
                          v90 = v119;
                          v119 = 0;
                          if (v90)
                            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v90 + 8))(v90);
                        }
                        goto LABEL_150;
                      }
LABEL_77:
                      v50 = 1;
                      goto LABEL_78;
                    }
                  }
LABEL_192:
                  v119 = 0;
                  goto LABEL_195;
                }
              }
              else
              {
                v47 = 0;
              }
              v102 = 1;
              v49 = 1;
              goto LABEL_77;
            }
          }
LABEL_142:
          v94 = *a3;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v134 = 0;
          LOBYTE(v119) = 33;
          if (v105)
            *(_DWORD *)v105 += 2;
          *(_QWORD *)&v120 = v105;
          WebCore::DeferredPromise::reject(v94, (unsigned __int8 *)&v119, 0, &v134);
          v95 = (WTF::StringImpl *)v120;
          *(_QWORD *)&v120 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, v34);
            else
              *(_DWORD *)v95 -= 2;
          }
          v36 = v105;
          if (!v105)
            goto LABEL_150;
          goto LABEL_148;
        }
        *(_DWORD *)v32 -= 2;
      }
      if (!v31)
        goto LABEL_66;
      goto LABEL_39;
    }
  }
  v19 = *a3;
  v119 = 0;
  WebCore::DeferredPromise::reject(v19, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v119, 0);
  v21 = v119;
  v119 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
}

WTF::StringImpl *WebCore::CookieStore::remove(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v5 = *a2;
  *a2 = 0;
  v10 = v5;
  v11 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CookieStore::remove(a1, (uint64_t)&v10, a3);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::CookieStore::remove(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int *result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  double v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  double v37;
  char v38;
  WTF::StringImpl *v39[2];
  char v40;
  char v41;
  WTF::StringImpl *v42;
  objc_class *v43;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v8 == 1 || v8 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), (WTF::StringImpl *)a2);
      if (!v9)
      {
        v31 = *a3;
        v35 = 0;
        WebCore::DeferredPromise::reject(v31, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v35, 0);
        result = (unsigned int *)v35;
        v35 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
          else
            *result -= 2;
        }
        goto LABEL_38;
      }
      v10 = v9;
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
      if (v9[8] == 1)
      {
        v12 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v41 = 14;
        v43 = 0;
        LOBYTE(v35) = 14;
        v13 = v42;
        if (v42)
          *(_DWORD *)v42 += 2;
        v36 = v13;
        WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v35, 0, &v43);
        v15 = v36;
        v36 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        result = (unsigned int *)v42;
        v42 = 0;
        if (!result)
          goto LABEL_36;
      }
      else
      {
        v38 = 0;
        LOBYTE(v37) = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v20 = v43;
        v40 = 0;
        v21 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = 0;
        v35 = v21;
        v22 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v22 += 2;
        v36 = v22;
        v23 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_OWORD *)v39 = v23;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v19);
          else
            *(_DWORD *)v20 -= 2;
        }
        WTF::WallTime::now(v20);
        v37 = (v24 + -86400.0) * 1000.0;
        v38 = 1;
        WebCore::CookieStore::set(a1, (uint64_t)&v35, a3);
        v25 = v39[1];
        v39[1] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v14);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v39[0];
        v39[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v14);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v36;
        v36 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v14);
          else
            *(_DWORD *)v27 -= 2;
        }
        result = (unsigned int *)v35;
        v35 = 0;
        if (!result)
          goto LABEL_36;
      }
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
      else
        *result -= 2;
      do
      {
LABEL_36:
        v28 = __ldaxr(v10);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v10));
      if (!v29)
      {
        atomic_store(1u, v10);
        v32 = (WTF::StringImpl *)*((_QWORD *)v10 + 6);
        *((_QWORD *)v10 + 6) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v14);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = (WTF::StringImpl *)*((_QWORD *)v10 + 5);
        *((_QWORD *)v10 + 5) = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v14);
          else
            *(_DWORD *)v33 -= 2;
        }
        v34 = v10[8];
        if ((_DWORD)v34 != -1)
          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33547B8[v34])(&v35, v10 + 2);
        v10[8] = -1;
        result = (unsigned int *)WTF::fastFree((WTF *)v10, v14);
      }
LABEL_38:
      v30 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v30 == 1)
        {
          if (*(_DWORD *)(v5 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
          else
            --*(_DWORD *)(v5 + 216);
        }
        else if (v30 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
        }
      }
      else if (*(_DWORD *)(v5 - 264) == 2)
      {
        if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v14);
      }
      else
      {
        *(_DWORD *)(v5 - 264) -= 2;
      }
      return result;
    }
  }
  v17 = *a3;
  v35 = 0;
  WebCore::DeferredPromise::reject(v17, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v35, 0);
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    else
      *result -= 2;
  }
  return result;
}

void WebCore::CookieStore::cookiesAdded(WTF::WallTime *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  WebCore *v7;
  WTF::StringImpl *v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unsigned __int8 *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  __int128 v18;
  _DWORD *v19;
  _DWORD *v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  WTF *v73;
  WTF *v74;
  int v75;
  uint64_t v77;
  WTF::StringImpl *v78[2];
  WTF::StringImpl *v79[2];
  __int128 v80;
  __int16 v81;
  WTF::StringImpl *v82[2];
  __int128 v83;
  _BYTE v84[27];
  _DWORD *v85;
  _DWORD *v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  int v90;
  int v91;
  unsigned __int8 v92;
  __int16 v93;
  unsigned __int8 v94;
  __int128 v95;
  __int128 v96;

  v3 = *((_QWORD *)a1 + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = *(unsigned __int8 *)(v4 + 178);
      v77 = *(_QWORD *)(v3 + 8);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0u;
      v96 = 0u;
      v7 = (WebCore *)WTF::WallTime::now(a1);
      v10 = a3[3];
      if ((_DWORD)v10)
      {
        v11 = v9 * 1000.0;
        v12 = 136 * v10;
        v13 = (unsigned __int8 *)(*(_QWORD *)a3 + 128);
        while (1)
        {
          v14 = (WTF::StringImpl *)*((_QWORD *)v13 - 16);
          if (v14)
            *(_DWORD *)v14 += 2;
          v82[0] = v14;
          v15 = (WTF::StringImpl *)*((_QWORD *)v13 - 15);
          if (v15)
            *(_DWORD *)v15 += 2;
          v82[1] = v15;
          v16 = (_DWORD *)*((_QWORD *)v13 - 14);
          if (v16)
            *v16 += 2;
          *(_QWORD *)&v83 = v16;
          v17 = (_DWORD *)*((_QWORD *)v13 - 13);
          if (v17)
            *v17 += 2;
          *((_QWORD *)&v83 + 1) = v17;
          v18 = *((_OWORD *)v13 - 6);
          *(_OWORD *)&v84[11] = *(_OWORD *)(v13 - 85);
          *(_OWORD *)v84 = v18;
          v19 = (_DWORD *)*((_QWORD *)v13 - 8);
          if (v19)
            *v19 += 2;
          v85 = v19;
          v20 = (_DWORD *)*((_QWORD *)v13 - 7);
          if (v20)
            *v20 += 2;
          v86 = v20;
          v21 = *((_OWORD *)v13 - 2);
          v87 = *((_OWORD *)v13 - 3);
          v88 = v21;
          v22 = *((unsigned int *)v13 - 1);
          v89 = 0;
          v90 = 0;
          v91 = v22;
          if ((_DWORD)v22)
          {
            if ((v22 & 0x80000000) != 0)
            {
              __break(0xC471u);
              return;
            }
            v23 = (void *)WTF::fastMalloc((WTF *)(2 * v22));
            v90 = v22;
            v89 = v23;
            memcpy(v23, *((const void **)v13 - 2), 2 * *((unsigned int *)v13 - 1));
          }
          v24 = *v13;
          v92 = *v13;
          if (!v84[16] || *(double *)&v84[8] >= v11)
          {
            v35 = *(_OWORD *)v82;
            v36 = v83;
            *(_OWORD *)v82 = 0u;
            v83 = 0u;
            *(_OWORD *)v78 = v35;
            *(_OWORD *)v79 = v36;
            v80 = *(_OWORD *)&v84[8];
            v81 = v84[25];
            if (v24 == 1)
              goto LABEL_38;
            if (!v24)
            {
              LOBYTE(v24) = 2;
LABEL_38:
              HIBYTE(v81) = v24;
            }
            if (HIDWORD(v95) == DWORD2(v95))
            {
              v37 = WTF::Vector<WebCore::CookieListItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v95, HIDWORD(v95) + 1, (unint64_t)v78);
              v38 = v95 + 56 * HIDWORD(v95);
              v39 = *(_QWORD *)v37;
              *(_QWORD *)v37 = 0;
              *(_QWORD *)v38 = v39;
              v40 = *((_QWORD *)v37 + 1);
              *((_QWORD *)v37 + 1) = 0;
              *(_QWORD *)(v38 + 8) = v40;
              v41 = *((_QWORD *)v37 + 2);
              *((_QWORD *)v37 + 2) = 0;
              *(_QWORD *)(v38 + 16) = v41;
              v42 = *((_QWORD *)v37 + 3);
              *((_QWORD *)v37 + 3) = 0;
              *(_QWORD *)(v38 + 24) = v42;
              LOWORD(v42) = *((_WORD *)v37 + 24);
              *(_OWORD *)(v38 + 32) = *((_OWORD *)v37 + 2);
              *(_WORD *)(v38 + 48) = v42;
            }
            else
            {
              v43 = v95 + 56 * HIDWORD(v95);
              v78[0] = 0;
              *(_QWORD *)v43 = v35;
              v44 = v78[1];
              v78[1] = 0;
              *(_QWORD *)(v43 + 8) = v44;
              v45 = v79[0];
              v79[0] = 0;
              *(_QWORD *)(v43 + 16) = v45;
              v46 = v79[1];
              v79[1] = 0;
              *(_QWORD *)(v43 + 24) = v46;
              v47 = v80;
              *(_WORD *)(v43 + 48) = v81;
              *(_OWORD *)(v43 + 32) = v47;
            }
            ++HIDWORD(v95);
            goto LABEL_45;
          }
          v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
          if (*MEMORY[0x1E0CBF6F0])
            *(_DWORD *)v25 += 2;
          v26 = v82[1];
          v82[1] = v25;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::destroy(v26, v8);
              v25 = v82[1];
              v24 = v92;
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          v27 = v82[0];
          v78[0] = v82[0];
          v78[1] = v25;
          v28 = v83;
          *(_OWORD *)v82 = 0u;
          v83 = 0u;
          *(_OWORD *)v79 = v28;
          v80 = *(_OWORD *)&v84[8];
          v81 = v84[25];
          if (v24 == 1)
            goto LABEL_32;
          if (!v24)
            break;
LABEL_33:
          if (HIDWORD(v96) == DWORD2(v96))
          {
            v29 = WTF::Vector<WebCore::CookieListItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, HIDWORD(v96) + 1, (unint64_t)v78);
            v30 = v96 + 56 * HIDWORD(v96);
            v31 = *(_QWORD *)v29;
            *(_QWORD *)v29 = 0;
            *(_QWORD *)v30 = v31;
            v32 = *((_QWORD *)v29 + 1);
            *((_QWORD *)v29 + 1) = 0;
            *(_QWORD *)(v30 + 8) = v32;
            v33 = *((_QWORD *)v29 + 2);
            *((_QWORD *)v29 + 2) = 0;
            *(_QWORD *)(v30 + 16) = v33;
            v34 = *((_QWORD *)v29 + 3);
            *((_QWORD *)v29 + 3) = 0;
            *(_QWORD *)(v30 + 24) = v34;
            LOWORD(v34) = *((_WORD *)v29 + 24);
            *(_OWORD *)(v30 + 32) = *((_OWORD *)v29 + 2);
            *(_WORD *)(v30 + 48) = v34;
          }
          else
          {
            v48 = v96 + 56 * HIDWORD(v96);
            v78[0] = 0;
            *(_QWORD *)v48 = v27;
            v49 = v78[1];
            v78[1] = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v79[0];
            v79[0] = 0;
            *(_QWORD *)(v48 + 16) = v50;
            v51 = v79[1];
            v79[1] = 0;
            *(_QWORD *)(v48 + 24) = v51;
            v52 = v80;
            *(_WORD *)(v48 + 48) = v81;
            *(_OWORD *)(v48 + 32) = v52;
          }
          ++HIDWORD(v96);
LABEL_45:
          v53 = v79[1];
          v79[1] = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v8);
            else
              *(_DWORD *)v53 -= 2;
          }
          v54 = v79[0];
          v79[0] = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v8);
            else
              *(_DWORD *)v54 -= 2;
          }
          v55 = v78[1];
          v78[1] = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v8);
            else
              *(_DWORD *)v55 -= 2;
          }
          v56 = v78[0];
          v78[0] = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v8);
            else
              *(_DWORD *)v56 -= 2;
          }
          WebCore::Cookie::~Cookie((WebCore::Cookie *)v82, v8);
          v13 += 136;
          v12 -= 136;
          if (!v12)
            goto LABEL_64;
        }
        LOBYTE(v24) = 2;
LABEL_32:
        HIBYTE(v81) = v24;
        goto LABEL_33;
      }
LABEL_64:
      v57 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v57 || (v58 = *(_QWORD *)(v57 + 96)) == 0)
        v58 = WebCore::threadGlobalDataSlow(v7);
      v59 = *(_QWORD *)(v58 + 40);
      if (!v59)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v58);
        v59 = *(_QWORD *)(v58 + 40);
      }
      v60 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v60);
      v62 = v93;
      v63 = HIBYTE(v93);
      v64 = v94;
      *(_QWORD *)(v60 + 8) = 0;
      *(_DWORD *)(v60 + 16) = 1;
      if (v62)
        v65 = 1868290;
      else
        v65 = 1868288;
      v66 = v65 | (4 * v63) | (8 * v64) | *(_DWORD *)(v60 + 20) & 0xFFC00000 | (*(_QWORD *)(v59 + 368) != 0);
      *(_DWORD *)(v60 + 20) = v66;
      v67 = *(_DWORD **)(v59 + 368);
      if (v67)
      {
        *v67 += 2;
        v66 = *(_DWORD *)(v60 + 20);
      }
      *(_QWORD *)(v60 + 24) = v67;
      *(_QWORD *)(v60 + 32) = 0;
      *(_QWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = v61;
      *(_DWORD *)(v60 + 20) = v66 | 0x4000;
      *(_QWORD *)v60 = off_1E3354460;
      v68 = v95;
      *(_QWORD *)&v95 = 0;
      *(_QWORD *)(v60 + 64) = 0;
      *(_QWORD *)(v60 + 72) = v68;
      v69 = *((_QWORD *)&v95 + 1);
      *((_QWORD *)&v95 + 1) = 0;
      *(_QWORD *)(v60 + 80) = v69;
      v70 = v96;
      *(_QWORD *)&v96 = 0;
      *(_QWORD *)(v60 + 88) = v70;
      v71 = *((_QWORD *)&v96 + 1);
      *((_QWORD *)&v96 + 1) = 0;
      *(_QWORD *)(v60 + 96) = v71;
      v82[0] = (WTF::StringImpl *)v60;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)a1 + 4, (uint64_t)a1, 0, (uint64_t *)v82);
      if (v82[0])
      {
        if (*((_DWORD *)v82[0] + 4) == 1)
          (*(void (**)(void))(*(_QWORD *)v82[0] + 8))();
        else
          --*((_DWORD *)v82[0] + 4);
      }
      if (HIDWORD(v96))
        WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct((WTF::StringImpl *)v96, (WTF::StringImpl *)(v96 + 56 * HIDWORD(v96)));
      v73 = (WTF *)v96;
      if ((_QWORD)v96)
      {
        *(_QWORD *)&v96 = 0;
        DWORD2(v96) = 0;
        WTF::fastFree(v73, v72);
      }
      if (HIDWORD(v95))
        WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct((WTF::StringImpl *)v95, (WTF::StringImpl *)(v95 + 56 * HIDWORD(v95)));
      v74 = (WTF *)v95;
      if ((_QWORD)v95)
      {
        *(_QWORD *)&v95 = 0;
        DWORD2(v95) = 0;
        WTF::fastFree(v74, v72);
      }
      v75 = *(unsigned __int8 *)(v77 + 178);
      if (*(_BYTE *)(v77 + 178))
      {
        if (v75 == 1)
        {
          if (*(_DWORD *)(v77 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v77 - 96) + 40))(v77 - 96);
          else
            --*(_DWORD *)(v77 + 216);
        }
        else if (v75 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v77 + 216));
        }
      }
      else if (*(_DWORD *)(v77 - 264) == 2)
      {
        if ((*(_WORD *)(v77 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v77 - 288), v72);
      }
      else
      {
        *(_DWORD *)(v77 - 264) -= 2;
      }
    }
  }
}

void `non-virtual thunk to'WebCore::CookieStore::cookiesAdded(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  WebCore::CookieStore::cookiesAdded((WTF::WallTime *)(a1 - 56), a2, a3);
}

unsigned int *WebCore::CookieStore::cookiesDeleted(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _DWORD *v21;
  __int128 v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD *v40;
  void *v41;
  int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  __int128 v49;
  _BYTE v50[27];
  _DWORD *v51;
  _DWORD *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  int v56;
  int v57;
  unsigned __int8 v58;
  __int128 v59;

  v3 = *((_QWORD *)result + 5);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v6 = (uint64_t)result;
  v7 = *(unsigned __int8 *)(v4 + 178);
  if (*(_BYTE *)(v4 + 178))
  {
    if (v7 == 1 || v7 == 2)
      ++*(_DWORD *)(v4 + 216);
  }
  else
  {
    *(_DWORD *)(v4 - 264) += 2;
  }
  v8 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v8)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_37;
  }
  if (v8 >= 0x4924925)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  v9 = 56 * v8;
  result = (unsigned int *)WTF::fastMalloc((WTF *)(56 * v8));
  v11 = result;
  v12 = v9 / 0x38;
  if (!*((_DWORD *)a3 + 3))
  {
LABEL_37:
    LODWORD(v13) = 0;
    goto LABEL_38;
  }
  v43 = v12;
  v44 = result;
  v45 = v6;
  v46 = v4;
  v13 = 0;
  v14 = (char *)result + 49;
  v15 = 128;
  do
  {
    v16 = *a3;
    v17 = *a3 + v15;
    v18 = *(_DWORD **)(v17 - 128);
    if (v18)
      *v18 += 2;
    v47 = v18;
    v19 = *(WTF::StringImpl **)(v17 - 120);
    if (v19)
      *(_DWORD *)v19 += 2;
    v48 = v19;
    v20 = *(_DWORD **)(v16 + v15 - 112);
    if (v20)
      *v20 += 2;
    *(_QWORD *)&v49 = v20;
    v21 = *(_DWORD **)(v16 + v15 - 104);
    if (v21)
      *v21 += 2;
    *((_QWORD *)&v49 + 1) = v21;
    v22 = *(_OWORD *)(v16 + v15 - 96);
    *(_OWORD *)&v50[11] = *(_OWORD *)(v16 + v15 - 85);
    *(_OWORD *)v50 = v22;
    v23 = *(_DWORD **)(v16 + v15 - 64);
    if (v23)
      *v23 += 2;
    v51 = v23;
    v24 = *(_DWORD **)(v16 + v15 - 56);
    if (v24)
      *v24 += 2;
    v52 = v24;
    v25 = *(_OWORD *)(v16 + v15 - 32);
    v53 = *(_OWORD *)(v16 + v15 - 48);
    v54 = v25;
    v26 = *(unsigned int *)(v16 + v15 - 4);
    v55 = 0;
    v56 = 0;
    v57 = v26;
    if ((_DWORD)v26)
    {
      if ((v26 & 0x80000000) == 0)
      {
        v27 = (void *)WTF::fastMalloc((WTF *)(2 * v26));
        v56 = v26;
        v55 = v27;
        memcpy(v27, *(const void **)(v16 + v15 - 16), 2 * *(unsigned int *)(v16 + v15 - 4));
        goto LABEL_24;
      }
      __break(0xC471u);
LABEL_67:
      JUMPOUT(0x19530B524);
    }
LABEL_24:
    v28 = *(unsigned __int8 *)(v16 + v15);
    v58 = *(_BYTE *)(v16 + v15);
    v29 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v29 += 2;
    v30 = v48;
    v48 = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v10);
        v29 = v48;
        v28 = v58;
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v31 = v47;
    v47 = 0;
    v48 = 0;
    v32 = v49;
    v49 = 0uLL;
    v59 = *(_OWORD *)&v50[8];
    v33 = v50[25];
    if (v28 != 1)
    {
      if (v28)
        LOBYTE(v28) = 0;
      else
        LOBYTE(v28) = 2;
    }
    *(_QWORD *)(v14 - 49) = v31;
    *(_QWORD *)(v14 - 41) = v29;
    *(_OWORD *)(v14 - 33) = v32;
    *(_OWORD *)(v14 - 17) = v59;
    *(v14 - 1) = v33;
    *v14 = v28;
    v14 += 56;
    ++v13;
    WebCore::Cookie::~Cookie((WebCore::Cookie *)&v47, v10);
    v15 += 136;
  }
  while (v13 < *((unsigned int *)a3 + 3));
  v6 = v45;
  v4 = v46;
  v12 = v43;
  v11 = v44;
LABEL_38:
  v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
    v35 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v36 = *(_QWORD *)(v35 + 40);
  if (!v36)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
    v36 = *(_QWORD *)(v35 + 40);
  }
  v37 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v37);
  *(_QWORD *)(v37 + 8) = 0;
  *(_DWORD *)(v37 + 16) = 1;
  v39 = *(_DWORD *)(v37 + 20) & 0xFFC00000 | 0x1C8200 | (*(_QWORD *)(v36 + 368) != 0);
  *(_DWORD *)(v37 + 20) = v39;
  v40 = *(_DWORD **)(v36 + 368);
  if (v40)
  {
    *v40 += 2;
    v39 = *(_DWORD *)(v37 + 20);
  }
  *(_QWORD *)(v37 + 24) = v40;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 40) = 0;
  *(_QWORD *)(v37 + 48) = 0;
  *(_QWORD *)(v37 + 56) = v38;
  *(_DWORD *)(v37 + 20) = v39 | 0x4000;
  *(_QWORD *)v37 = off_1E3354460;
  *(_QWORD *)(v37 + 64) = 0;
  *(_QWORD *)(v37 + 72) = 0;
  *(_QWORD *)(v37 + 80) = 0;
  *(_QWORD *)(v37 + 88) = v11;
  *(_DWORD *)(v37 + 96) = v12;
  *(_DWORD *)(v37 + 100) = v13;
  v47 = (_DWORD *)v37;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v6 + 32), v6, 0, (uint64_t *)&v47);
  result = v47;
  if (v47)
  {
    if (v47[4] == 1)
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 8))();
    else
      --v47[4];
  }
  v42 = *(unsigned __int8 *)(v4 + 178);
  if (*(_BYTE *)(v4 + 178))
  {
    if (v42 == 1)
    {
      if (*(_DWORD *)(v4 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 40))(v4 - 96);
      else
        --*(_DWORD *)(v4 + 216);
    }
    else if (v42 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
    }
  }
  else if (*(_DWORD *)(v4 - 264) == 2)
  {
    if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v41);
  }
  else
  {
    *(_DWORD *)(v4 - 264) -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::CookieStore::cookiesDeleted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::CookieStore::cookiesDeleted((unsigned int *)(a1 - 56), a2, a3);
}

unsigned int *WebCore::CookieStore::stop(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        v4 = this;
        v5 = (_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) += 2;
        if (*((_BYTE *)this + 80))
        {
          v6 = *(_QWORD *)(v3 + 240);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                {
                  v10 = *(_QWORD *)(v9 + 16);
                  if (v10)
                    goto LABEL_34;
                  v10 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v10 = 1;
                  *(_QWORD *)(v10 + 8) = v9;
                  this = *(unsigned int **)(v9 + 16);
                  *(_QWORD *)(v9 + 16) = v10;
                  if (!this)
                    goto LABEL_34;
                  do
                  {
                    v11 = __ldaxr(this);
                    v12 = v11 - 1;
                  }
                  while (__stlxr(v12, this));
                  if (!v12)
                  {
                    atomic_store(1u, this);
                    this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
                  }
                  v10 = *(_QWORD *)(v9 + 16);
                  if (v10)
                  {
LABEL_34:
                    do
                      v13 = __ldaxr((unsigned int *)v10);
                    while (__stlxr(v13 + 1, (unsigned int *)v10));
                    if (*(_QWORD *)(v10 + 8))
                    {
                      WTF::URL::host((WTF::URL *)(v3 + 448));
                      if ((v14 & 0xFF00000000) != 0)
                        WTF::String::String();
                      else
                        WTF::String::String();
                      (*(void (**)(_QWORD, WTF::StringImpl **, unsigned int *))(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 888)
                                                                                         + 88))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 888), &v17, v4 + 14);
                      *((_BYTE *)v4 + 80) = 0;
                      this = (unsigned int *)v17;
                      v17 = 0;
                      if (this)
                      {
                        if (*this == 2)
                          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
                        else
                          *this -= 2;
                      }
                    }
                    do
                    {
                      v15 = __ldaxr((unsigned int *)v10);
                      v16 = v15 - 1;
                    }
                    while (__stlxr(v16, (unsigned int *)v10));
                    if (!v16)
                    {
                      atomic_store(1u, (unsigned int *)v10);
                      this = (unsigned int *)WTF::fastFree((WTF *)v10, a2);
                    }
                  }
                }
              }
            }
          }
        }
        if (*v5 == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
        }
        else
        {
          *v5 -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::CookieStore::stop(WebCore::CookieStore *this, void *a2)
{
  return WebCore::CookieStore::stop((unsigned int *)this - 8, a2);
}

uint64_t WebCore::CookieStore::virtualHasPendingActivity(WebCore::CookieStore *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t `non-virtual thunk to'WebCore::CookieStore::virtualHasPendingActivity(WebCore::CookieStore *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t WebCore::CookieStore::eventTargetInterface(WebCore::CookieStore *this)
{
  return 52;
}

unsigned int *WebCore::CookieStore::eventListenersDidChange(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  WTF::StringImpl *v35;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        v4 = this;
        v5 = *((unsigned __int8 *)this + 80);
        v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
        {
          this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
          v7 = (uint64_t)this;
        }
        v8 = *(_QWORD *)(v7 + 40);
        if (!v8)
        {
          this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
          v8 = *(_QWORD *)(v7 + 40);
        }
        v9 = *((_QWORD *)v4 + 2);
        if ((v9 & 0x1000000000000) != 0
          && (v28 = v9 & 0xFFFFFFFFFFFFLL, v29 = *(unsigned int *)(v28 + 28), (_DWORD)v29))
        {
          v30 = *(uint64_t **)(v28 + 16);
          v31 = *(_QWORD *)(v8 + 368);
          v32 = 32 * v29 - 32;
          do
          {
            v33 = *v30;
            v30 += 4;
            v10 = v33 == v31;
            v34 = v33 == v31 || v32 == 0;
            v32 -= 32;
          }
          while (!v34);
        }
        else
        {
          v10 = 0;
        }
        *((_BYTE *)v4 + 80) = v10;
        if (v5 != v10)
        {
          v11 = *((_QWORD *)v4 + 5);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              if (*(_BYTE *)(v12 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x19530B998);
              }
              v13 = (_DWORD *)(v12 - 264);
              *(_DWORD *)(v12 - 264) += 2;
              v14 = *(_QWORD *)(v12 + 240);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (v15)
                {
                  v16 = *(_QWORD *)(v15 + 24);
                  if (v16)
                  {
                    v17 = *(_QWORD *)(v16 + 8);
                    if (v17)
                    {
                      v18 = *(_QWORD *)(v17 + 16);
                      if (v18)
                        goto LABEL_58;
                      v18 = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)v18 = 1;
                      *(_QWORD *)(v18 + 8) = v17;
                      this = *(unsigned int **)(v17 + 16);
                      *(_QWORD *)(v17 + 16) = v18;
                      if (!this)
                        goto LABEL_58;
                      do
                      {
                        v19 = __ldaxr(this);
                        v20 = v19 - 1;
                      }
                      while (__stlxr(v20, this));
                      if (!v20)
                      {
                        atomic_store(1u, this);
                        this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
                      }
                      v18 = *(_QWORD *)(v17 + 16);
                      if (v18)
                      {
LABEL_58:
                        do
                          v21 = __ldaxr((unsigned int *)v18);
                        while (__stlxr(v21 + 1, (unsigned int *)v18));
                        v22 = *(_QWORD *)(v18 + 8);
                        if (v22)
                        {
                          v23 = *(_DWORD **)(v22 + 888);
                          ++v23[2];
                          WTF::URL::host((WTF::URL *)(v12 + 448));
                          if ((v24 & 0xFF00000000) != 0)
                            WTF::String::String();
                          else
                            WTF::String::String();
                          v25 = 80;
                          if (!*((_BYTE *)v4 + 80))
                            v25 = 88;
                          (*(void (**)(_DWORD *, WTF::StringImpl **, unsigned int *))(*(_QWORD *)v23 + v25))(v23, &v35, v4 + 14);
                          this = (unsigned int *)v35;
                          v35 = 0;
                          if (this)
                          {
                            if (*this == 2)
                              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
                            else
                              *this -= 2;
                          }
                          if (v23[2] == 1)
                            this = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 120))(v23);
                          else
                            --v23[2];
                        }
                        do
                        {
                          v26 = __ldaxr((unsigned int *)v18);
                          v27 = v26 - 1;
                        }
                        while (__stlxr(v27, (unsigned int *)v18));
                        if (!v27)
                        {
                          atomic_store(1u, (unsigned int *)v18);
                          this = (unsigned int *)WTF::fastFree((WTF *)v18, a2);
                        }
                      }
                    }
                  }
                }
              }
              if (*v13 == 2)
              {
                if ((*(_WORD *)(v12 - 258) & 0x400) == 0)
                  return WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 288), a2);
              }
              else
              {
                *v13 -= 2;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v3 = *a2;
  if (!*a2)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  v11 = *(unsigned int *)(v3 - 4);
  if (v8 == v11)
  {
LABEL_9:
    *result = 0;
    return result;
  }
  v12 = (_QWORD *)(v3 + 16 * v8);
  v13 = v12 + 1;
  v14 = v12[1];
  if (!v14)
  {
    *result = 0;
LABEL_13:
    v3 += 16 * v11;
    if ((_QWORD *)v3 == v12)
      return result;
    goto LABEL_14;
  }
  *v13 = 0;
  v3 = *a2;
  *result = v14;
  if (v3)
  {
    v11 = *(unsigned int *)(v3 - 4);
    goto LABEL_13;
  }
LABEL_14:
  if ((_QWORD *)v3 != v12)
  {
    *v12 = -1;
    *v13 = 0;
    ++*(_DWORD *)(*a2 - 16);
    v15 = *a2;
    if (*a2)
      v16 = *(_DWORD *)(v15 - 12) - 1;
    else
      v16 = -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *a2;
    if (*a2)
    {
      v18 = 6 * *(_DWORD *)(v17 - 12);
      v19 = *(_DWORD *)(v17 - 4);
      if (v18 < v19 && v19 >= 9)
        return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, v19 >> 1, 0);
    }
  }
  return result;
}

void WebCore::ExtendableCookieChangeEvent::~ExtendableCookieChangeEvent(WebCore::ExtendableCookieChangeEvent *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  unsigned int v5;
  WTF *v6;

  v3 = *((_DWORD *)this + 33);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct(*((WTF::StringImpl **)this + 15), (WTF::StringImpl *)(*((_QWORD *)this + 15) + 56 * v3));
  v4 = (WTF *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_DWORD *)this + 29);
  if (v5)
    WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct(*((WTF::StringImpl **)this + 13), (WTF::StringImpl *)(*((_QWORD *)this + 13) + 56 * v5));
  v6 = (WTF *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v6, a2);
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ExtendableCookieChangeEvent::~ExtendableCookieChangeEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::BasicCredential::isConditionalMediationAvailable(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  objc_class *v13;

  v2 = *(_QWORD *)(a1 + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    result = (WTF::StringImpl *)WebCore::AuthenticatorCoordinator::isConditionalMediationAvailable(*(_QWORD *)(v5 + 1256), a1, a2);
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return (WTF::StringImpl *)WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    v7 = *a2;
    v12 = 0;
    v13 = 0;
    v11[0] = 8;
    WebCore::DeferredPromise::reject(v7, v11, 0, &v13);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::CredentialsContainer::scopeAndCrossOriginParent(unsigned int *this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WebCore::SecurityContext *v13;
  const WebCore::SecurityOrigin *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  const WebCore::SecurityOrigin *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  _BYTE v37[24];
  int v38;
  char v39;
  uint64_t v40;

  v2 = this;
  v40 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v3 = *((_QWORD *)a2 + 1)) == 0)
  {
    *this = 0;
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 40) = 0;
    return this;
  }
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3 + 192), a2);
  v5 = v4;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = *(WTF::StringImpl **)(v3 + 736);
  if (v7)
    *(_DWORD *)v7 += 2;
  v33 = v7;
  v34 = *(_OWORD *)(v3 + 744);
  v35 = *(_OWORD *)(v3 + 760);
  v37[0] = 0;
  v39 = 0;
  v8 = WebCore::Document::parentDocument((WebCore::Document *)v3);
  if (!v8)
  {
LABEL_38:
    *v2 = 1;
    *((_BYTE *)v2 + 8) = 0;
    *((_BYTE *)v2 + 40) = 0;
    goto LABEL_43;
  }
  v10 = v8;
  *(_DWORD *)(v8 + 24) += 2;
  v11 = 1;
  do
  {
    v12 = v10;
    v13 = (WebCore::SecurityContext *)(v10 + 192);
    WebCore::SecurityContext::securityOrigin(v13, v9);
    if ((WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v5, v14) & 1) == 0)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v36, (const WTF::URL *)&v33);
      v16 = WTF::URL::host((WTF::URL *)(v12 + 736));
      v18 = WebCore::RegistrableDomain::matches(&v36, v16, v17);
      v19 = v36;
      v36 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v15);
        else
          *(_DWORD *)v19 -= 2;
      }
      v11 &= v18;
    }
    if (!v39)
    {
      WebCore::SecurityContext::securityOrigin(v13, v15);
      if (!WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v5, v20))
      {
        WebCore::SecurityContext::securityOrigin(v13, v21);
        v23 = v22 + 8;
        if (v39)
        {
          v24 = *(unsigned int *)(v22 + 32);
          if (v38 == -1)
          {
            if ((_DWORD)v24 == -1)
              goto LABEL_25;
          }
          else if ((_DWORD)v24 == -1)
          {
            ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33547B8[v38])(&v36, v37, v23);
            v38 = -1;
            goto LABEL_25;
          }
          v36 = (WTF::StringImpl *)v37;
          ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33547C8[v24])(&v36, v37, v23);
        }
        else
        {
          v37[0] = 0;
          v38 = -1;
          v25 = *(unsigned int *)(v22 + 32);
          if ((_DWORD)v25 != -1)
          {
            ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33547D8[v25])(&v36, v37, v23);
            v38 = v25;
          }
          v39 = 1;
        }
      }
    }
LABEL_25:
    v26 = WebCore::Document::parentDocument((WebCore::Document *)v12);
    v10 = v26;
    if (v26)
      *(_DWORD *)(v26 + 24) += 2;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  while (v10);
  if (!v39)
    goto LABEL_38;
  v9 = (WTF::StringImpl *)(v2 + 2);
  if ((v11 & 1) != 0)
    *v2 = 2;
  else
    *v2 = 0;
  *((_BYTE *)v2 + 8) = 0;
  *((_BYTE *)v2 + 40) = 0;
  v2[8] = -1;
  v27 = v38;
  if (v38 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *, _BYTE *))off_1E33547D8[v38])(&v36, v9, v37);
    v2[8] = v27;
  }
  *((_BYTE *)v2 + 40) = 1;
LABEL_43:
  if (v39 && v38 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33547B8[v38])(&v36, v37);
  this = (unsigned int *)v33;
  v33 = 0;
  if (!this)
  {
LABEL_49:
    if (!v5)
      goto LABEL_52;
    goto LABEL_50;
  }
  if (*this != 2)
  {
    *this -= 2;
    goto LABEL_49;
  }
  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
  if (v5)
  {
    do
    {
LABEL_50:
      v28 = __ldaxr(v5);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v5));
    if (!v29)
    {
      atomic_store(1u, v5);
      v30 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v9);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v9);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v5[8];
      if ((_DWORD)v32 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33547B8[v32])(&v33, v5 + 2);
      v5[8] = -1;
      this = (unsigned int *)WTF::fastFree((WTF *)v5, v9);
    }
  }
LABEL_52:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v9);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::CredentialsContainer::get(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unsigned int *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19[8];
  WTF::StringImpl *v20;
  objc_class *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  result = (unsigned int *)WebCore::CredentialsContainer::performCommonChecks<WebCore::CredentialRequestOptions>(a1, (uint64_t)a2, a3);
  if ((_DWORD)result)
  {
    if (a2[232])
    {
      v7 = *(WTF::StringImpl **)(a1 + 16);
      if (v7)
      {
        v8 = *((_QWORD *)v7 + 1);
        if (v8)
        {
          v9 = 0;
          *(_DWORD *)(v8 + 24) += 2;
          goto LABEL_6;
        }
      }
      else
      {
        v8 = 0;
      }
      v9 = 1;
LABEL_6:
      if (*a2 != 3)
      {
        if (!WebCore::Document::hasFocus((WebCore::Document *)v8))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v16 = *a3;
          v19[0] = 31;
          v21 = 0;
          LOBYTE(v22) = 31;
          v17 = v20;
          if (v20)
            *(_DWORD *)v20 += 2;
          v23 = v17;
          WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v22, 0, &v21);
          v18 = v23;
          v23 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v11);
            else
              *(_DWORD *)v18 -= 2;
          }
          result = (unsigned int *)v20;
          v20 = 0;
          if (result)
          {
            if (*result == 2)
            {
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
              if ((v9 & 1) != 0)
                return result;
LABEL_30:
              if (*(_DWORD *)(v8 + 24) == 2)
              {
                if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                  return WebCore::Node::removedLastRef((WebCore::Node *)v8, v11);
              }
              else
              {
                *(_DWORD *)(v8 + 24) -= 2;
              }
              return result;
            }
            *result -= 2;
          }
LABEL_29:
          if ((v9 & 1) != 0)
            return result;
          goto LABEL_30;
        }
        v7 = *(WTF::StringImpl **)(a1 + 16);
      }
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 528) + 8) + 24) + 8) + 1256);
      WebCore::CredentialsContainer::scopeAndCrossOriginParent((unsigned int *)&v22, v7);
      result = (unsigned int *)WebCore::AuthenticatorCoordinator::discoverFromExternalSource(v10, (_QWORD *)v8, a2, &v22, a3);
      if (v25 && v24 != -1)
      {
        result = (unsigned int *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E33547B8[v24])(v19, &v23);
        if ((v9 & 1) != 0)
          return result;
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = *a3;
    v19[0] = 6;
    v21 = 0;
    LOBYTE(v22) = 6;
    v13 = v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    v23 = v13;
    WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v22, 0, &v21);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = (unsigned int *)v20;
    v20 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
      else
        *result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CredentialsContainer::performCommonChecks<WebCore::CredentialRequestOptions>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  objc_class *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24[8];
  WTF::StringImpl *v25;
  objc_class *v26;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      if ((WebCore::Document::isFullyActive((WebCore::Document *)v5) & 1) != 0)
      {
        v8 = *(_QWORD *)(v5 + 528);
        if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(_QWORD *)(v9 + 24)) != 0 && *(_QWORD *)(v10 + 8))
        {
          v11 = *(_QWORD *)(a2 + 8);
          if (!v11 || !*(_BYTE *)(v11 + 156))
          {
            v17 = 1;
LABEL_22:
            if (*(_DWORD *)(v5 + 24) == 2)
            {
              if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
            }
            else
            {
              *(_DWORD *)(v5 + 24) -= 2;
            }
            return v17;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v12 = *a3;
          v13 = 16;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v12 = *a3;
          v13 = 6;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = *a3;
        v13 = 31;
      }
      LOBYTE(v22) = v13;
      v26 = 0;
      v24[0] = v13;
      v14 = v23;
      if (v23)
        *(_DWORD *)v23 += 2;
      v25 = v14;
      WebCore::DeferredPromise::reject(v12, v24, 0, &v26);
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = 0;
      goto LABEL_22;
    }
  }
  v19 = *a3;
  v22 = 0;
  v24[0] = 6;
  v25 = 0;
  WebCore::DeferredPromise::reject(v19, v24, 0, &v22);
  v21 = v25;
  v25 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  return 0;
}

uint64_t WebCore::CredentialsContainer::store(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  objc_class *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *a3;
  v11 = 0;
  v9[0] = 6;
  if (v8)
    *(_DWORD *)v8 += 2;
  v10 = v8;
  WebCore::DeferredPromise::reject(v4, v9, 0, &v11);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

void WebCore::CredentialsContainer::isCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  WebCore::Document *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17[8];
  WTF::StringImpl *v18;
  objc_class *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!WebCore::CredentialsContainer::performCommonChecks<WebCore::CredentialRequestOptions>(a1, a2, a3))
    return;
  if (*(_BYTE *)(a2 + 312))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v7 = *(WebCore::Document **)(v6 + 8);
    else
      v7 = 0;
    if ((WebCore::Document::hasFocus(v7) & 1) != 0)
    {
      v8 = *(WTF::StringImpl **)(a1 + 16);
      v9 = (_QWORD *)*((_QWORD *)v8 + 1);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[66] + 8) + 24) + 8) + 1256);
      WebCore::CredentialsContainer::scopeAndCrossOriginParent(&v20, v8);
      WebCore::AuthenticatorCoordinator::create(v10, v9, (unsigned __int8 *)a2, v20, (uint64_t **)(a2 + 8), a3);
      if (v23)
      {
        if (v22 != -1)
          ((void (*)(char *, WTF::StringImpl **))off_1E33547B8[v22])(v17, &v21);
      }
      return;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *a3;
    v12 = 31;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *a3;
    v12 = 6;
  }
  v17[0] = v12;
  v19 = 0;
  LOBYTE(v20) = v12;
  v13 = v18;
  if (v18)
    *(_DWORD *)v18 += 2;
  v21 = v13;
  WebCore::DeferredPromise::reject(v11, (unsigned __int8 *)&v20, 0, &v19);
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
}

uint64_t WebCore::CredentialsContainer::preventSilentAccess(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  objc_class *v14;

  v3 = *(_QWORD *)(result + 16);
  if (v3
    && (result = *(_QWORD *)(v3 + 8)) != 0
    && (result = WebCore::Document::isFullyActive((WebCore::Document *)result), (result & 1) == 0))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = *a2;
    v14 = 0;
    v12[0] = 31;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    WebCore::DeferredPromise::reject(v8, v12, 0, &v14);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (uint64_t)v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v4 = *a2;
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 && *(_QWORD *)v5 && (*(_BYTE *)(v5 + 8) & 3) == 0)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
        v7 = 0;
      else
        v7 = *(uint64_t **)v6;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v4, v7, 0, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v12);
    }
  }
  return result;
}

void WebCore::NavigatorCredentials::~NavigatorCredentials(WebCore::NavigatorCredentials *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
    else
      --v2[2];
  }
}

void WebCore::NavigatorCredentials::~NavigatorCredentials(WebCore::NavigatorCredentials *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

_DWORD *WebCore::NavigatorCredentials::credentials(WebCore::NavigatorCredentials *this, WebCore::Navigator *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  const char **v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int8 *v28[2];

  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19530CB10);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || !*(_QWORD *)(v7 + 296))
    return 0;
  v9 = (uint64_t *)((char *)this + 72);
  v28[0] = "NavigatorCredentials";
  v28[1] = (unsigned __int8 *)21;
  v10 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v28);
  if (!v10 || (v11 = (uint64_t)v10[2]) == 0)
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = off_1E3354778;
    *(_QWORD *)(v11 + 8) = 0;
    v28[0] = (unsigned __int8 *)v11;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v9, "NavigatorCredentials", (unsigned __int8 *)0x15, (const char **)v28);
    v12 = v28[0];
    v28[0] = 0;
    if (v12)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 8) + 72) + 8);
  if (*(_BYTE *)(v13 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19530CB30);
  }
  v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 240) + 8) + 296));
  v16 = v14;
  if (v14)
  {
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 + 1, v14));
    v20 = *(_QWORD *)(v11 + 8);
    v19 = v11 + 8;
    result = (_DWORD *)v20;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v16);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v16));
      if (!v22)
      {
        v23 = (uint64_t)result;
        atomic_store(1u, v16);
        v24 = v16[7];
        if ((_DWORD)v24)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v24));
        v25 = (WTF *)*((_QWORD *)v16 + 2);
        if (v25)
        {
          *((_QWORD *)v16 + 2) = 0;
          v16[6] = 0;
          WTF::fastFree(v25, v15);
        }
        WTF::fastFree((WTF *)v16, v15);
        return (_DWORD *)v23;
      }
      return result;
    }
  }
  else
  {
    v26 = *(_QWORD *)(v11 + 8);
    v19 = v11 + 8;
    result = (_DWORD *)v26;
    if (v26)
      return result;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)0x18);
  result[2] = 1;
  *(_QWORD *)result = off_1E3354748;
  *((_QWORD *)result + 2) = v16;
  v27 = *(_DWORD **)v19;
  *(_QWORD *)v19 = result;
  if (v27)
  {
    if (v27[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 24))(v27);
      return *(_DWORD **)v19;
    }
    else
    {
      --v27[2];
    }
  }
  return result;
}

uint64_t WebCore::CookieStore::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::CookieStore *WebCore::CookieStore::derefEventTarget(WebCore::CookieStore *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::CookieStore::~CookieStore(this, a2);
    return (WebCore::CookieStore *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::CookieStore::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::CookieStore *WebCore::CookieStore::deref(WebCore::CookieStore *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::CookieStore::~CookieStore(this, a2);
    return (WebCore::CookieStore *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CookieStore::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CookieStore::deref(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::CookieStore::~CookieStore((WebCore::CookieStore *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

void WebCore::CredentialsContainer::~CredentialsContainer(WebCore::CredentialsContainer *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E3354748;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E3354748;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::host(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::host(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::host(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::host(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return MEMORY[0x1E0CBF738];
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKSZ_EEEDcSR_DpT0_(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKSZ_EEEDcSR_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E33547B8[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[2] = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  __int16 v10;
  _DWORD *v11;
  _DWORD *v12;
  char v13;

  v4 = result;
  v5 = result[6];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(_DWORD **)(a3 + 8);
      if (v9)
        *v9 += 2;
      result = *(unsigned int **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v9;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *result -= 2;
      }
      v10 = *(_WORD *)(a3 + 16);
      *(_BYTE *)(a2 + 18) = *(_BYTE *)(a3 + 18);
      *(_WORD *)(a2 + 16) = v10;
      return result;
    }
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E33547B8[v5])(&v13, result);
  }
  v4[6] = -1;
  v11 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v11 += 2;
  *(_QWORD *)v4 = v11;
  v12 = *(_DWORD **)(a3 + 8);
  if (v12)
    *v12 += 2;
  *((_QWORD *)v4 + 1) = v12;
  v4[4] = *(_DWORD *)(a3 + 16);
  v4[6] = 0;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NavigatorCookieConsent::requestCookieConsent(WebCore::RequestCookieConsentOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CookieConsentDecisionResult>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33547F8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NavigatorCookieConsent::requestCookieConsent(WebCore::RequestCookieConsentOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CookieConsentDecisionResult>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33547F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::NavigatorCookieConsent::requestCookieConsent(WebCore::RequestCookieConsentOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CookieConsentDecisionResult>::call(uint64_t *result, int a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  switch(a2)
  {
    case 2:
      return (uint64_t *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(result[1], 0);
    case 1:
      return (uint64_t *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(result[1], 1);
    case 0:
      v2 = result[1];
      v4 = 0;
      WebCore::DeferredPromise::reject(v2, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&v4, 0);
      result = (uint64_t *)v4;
      v4 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
        else
          *(_DWORD *)result -= 2;
      }
      break;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::CookieStore::MainThreadBridge,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)v3);
        v6 = *(unsigned int *)(v3 + 28);
        if ((_DWORD)v6)
        {
          v9 = v3;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
          v3 = v9;
        }
        v7 = *(WTF **)(v3 + 16);
        if (v7)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
          v8 = v3;
          WTF::fastFree(v7, a2);
          v3 = v8;
        }
        WTF::fastFree((WTF *)v3, a2);
      }
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::ensureOnContextThread(WTF::Function<void ()(WebCore::CookieStore&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E3354868;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3354840;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::ensureOnContextThread(WTF::Function<void ()(WebCore::CookieStore&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E3354868;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3354840;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::ensureOnContextThread(WTF::Function<void ()(WebCore::CookieStore&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;
  WebCore::CookieStore *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(WebCore::CookieStore **)(v1 + 8);
    if (v2)
    {
      ++*((_DWORD *)v2 + 6);
      result = (*(uint64_t (**)(_QWORD, WebCore::CookieStore *))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), v2);
      if (*((_DWORD *)v2 + 6) == 1)
      {
        WebCore::CookieStore::~CookieStore(v2, v3);
        return bmalloc::api::isoDeallocate(v4, v5);
      }
      else
      {
        --*((_DWORD *)v2 + 6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3354890;
  WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3354890;
  WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  unsigned int *result;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19530D700);
  }
  v4 = a1[1];
  v5 = (WebCore::Node *)(a2 - 192);
  *(_DWORD *)(a2 - 168) += 2;
  v6 = *(_QWORD *)(a2 + 336);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (v8 = *(_QWORD *)(v7 + 24)) == 0 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v10 = 0;
LABEL_19:
    v23 = 1;
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    v12 = *(unsigned int **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v10;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      v10 = *(_QWORD *)(v9 + 16);
      if (!v10)
        goto LABEL_19;
    }
  }
  do
    v15 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v15 + 1, (unsigned int *)v10));
  v16 = *(_QWORD *)(v10 + 8);
  if (v16)
  {
    v17 = *(_DWORD **)(v16 + 888);
    ++v17[2];
    v18 = a1[2];
    a1[2] = 0;
    v19 = a1[5];
    a1[5] = 0;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v20 = &off_1E33548F0;
    v20[1] = v4;
    v20[2] = v18;
    v20[3] = v19;
    *(_QWORD *)&v38[0] = v20;
    (*(void (**)(_DWORD *, WebCore::Node *, uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)v17 + 64))(v17, v5, a2 + 544, a1 + 3, v38);
    result = *(unsigned int **)&v38[0];
    *(_QWORD *)&v38[0] = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    if (v17[2] == 1)
      result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 120))(v17);
    else
      --v17[2];
    do
    {
LABEL_39:
      v34 = __ldaxr((unsigned int *)v10);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v10));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v10);
      result = (unsigned int *)WTF::fastFree((WTF *)v10, v21);
    }
    goto LABEL_42;
  }
  v23 = 0;
LABEL_20:
  v24 = a1[5];
  a1[5] = 0;
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = &off_1E33548B8;
  v25[1] = v24;
  v26 = *(_OWORD *)(v4 + 32);
  v38[0] = *(_OWORD *)(v4 + 16);
  v38[1] = v26;
  do
    v27 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v27 + 1, (unsigned int *)v4));
  v28 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v28 = &off_1E3354868;
  *((_QWORD *)v28 + 1) = v4;
  *((_QWORD *)v28 + 2) = v25;
  v36 = v28;
  v37 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_26:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v30 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v38);
  if (v30)
  {
    v31 = v30[4];
    if (v31)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 88))(v30[4]) & 1) != 0)
      {
        v32 = 1;
        goto LABEL_32;
      }
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v31 + 336))(v31, &v36);
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = 0;
LABEL_32:
  v33 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v33 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v32)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v32)
LABEL_35:
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v36 + 16))(v36, v31);
LABEL_36:
  result = v36;
  v36 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if ((v23 & 1) == 0)
    goto LABEL_39;
LABEL_42:
  if (*(_DWORD *)(a2 - 168) == 2)
  {
    if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v5, v21);
  }
  else
  {
    *(_DWORD *)(a2 - 168) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::Function)#1},void,WTF::Function>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33548B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::Function)#1},void,WTF::Function>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33548B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::Function)#1},void,WTF::Function>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4[8];
  uint64_t v5;
  int v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v4[0] = 14;
  v5 = 0;
  v6 = 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, a2, v4);
  if (v6 != -1)
    return ((uint64_t (*)(char *, char *))off_1E33548D0[v6])(&v7, v4);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore6CookieELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WebCore::Cookie *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::Cookie **)a2;
    v5 = 136 * v3;
    do
    {
      WebCore::Cookie::~Cookie(v4, a2);
      v4 = (WebCore::Cookie *)(v6 + 136);
      v5 -= 136;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore6CookieELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::FastMalloc> &&)#1},void,std::__1>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E33548F0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3354840;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::FastMalloc> &&)#1},void,std::__1>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E33548F0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3354840;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::Cookie *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::FastMalloc> &&)#1},void,std::__1>::call(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  WebCore::Cookie *v12;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  WebCore::Cookie *result;
  uint64_t v20;
  uint64_t v21;
  WebCore::Cookie *v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)v24, (unint64_t *)a2);
    v7 = *(WTF **)&v24[0];
    v3 = DWORD2(v24[0]);
    v2 = HIDWORD(v24[0]);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)0x28);
  v9 = v8;
  *(_QWORD *)v8 = &off_1E3354918;
  *(_QWORD *)(v8 + 8) = v5;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  if (v6)
  {
    *(_QWORD *)(v8 + 16) = v7;
    *(_DWORD *)(v8 + 24) = v3;
    *(_DWORD *)(v8 + 28) = v2;
    *(_BYTE *)(v8 + 32) = 1;
    v2 = 0;
    v7 = 0;
  }
  v10 = *(_OWORD *)(v4 + 32);
  v24[0] = *(_OWORD *)(v4 + 16);
  v24[1] = v10;
  do
    v11 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v11 + 1, (unsigned int *)v4));
  v12 = (WebCore::Cookie *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = &off_1E3354868;
  *((_QWORD *)v12 + 1) = v4;
  *((_QWORD *)v12 + 2) = v9;
  v22 = v12;
  v23 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v24);
  if (v14)
  {
    v16 = v14[4];
    if (v16)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v14[4]) & 1) != 0)
      {
        v17 = 1;
        goto LABEL_18;
      }
      (*(void (**)(uint64_t, WebCore::Cookie **))(*(_QWORD *)v16 + 336))(v16, &v22);
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
LABEL_18:
  v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v18 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v17)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v17)
LABEL_21:
    (*(void (**)(WebCore::Cookie *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v16);
LABEL_22:
  result = v22;
  v22 = 0;
  if (result)
    result = (WebCore::Cookie *)(*(uint64_t (**)(WebCore::Cookie *))(*(_QWORD *)result + 8))(result);
  if (v6)
  {
    if (v2)
    {
      v20 = 136 * v2;
      result = v7;
      do
      {
        WebCore::Cookie::~Cookie(result, v15);
        result = (WebCore::Cookie *)(v21 + 136);
        v20 -= 136;
      }
      while (v20);
    }
    if (v7)
      return (WebCore::Cookie *)WTF::fastFree(v7, v15);
  }
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  unsigned int v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  _BYTE v42[27];
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _BYTE v45[32];
  uint64_t v46;
  uint64_t v47;
  char v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;

  v2 = *a2;
  v3 = *((_DWORD *)a2 + 3);
  if (v3)
  {
    v34 = a2;
    v35 = result;
    v36 = v2 + 136 * v3;
    do
    {
      WTF::String::isolatedCopy();
      v4 = (WTF::StringImpl **)(v2 + 8);
      WTF::String::isolatedCopy();
      v5 = (WTF::StringImpl **)(v2 + 16);
      WTF::String::isolatedCopy();
      v6 = (WTF::StringImpl **)(v2 + 24);
      WTF::String::isolatedCopy();
      v7 = *(_QWORD *)(v2 + 32);
      v8 = *(_QWORD *)(v2 + 40);
      v9 = *(_QWORD *)(v2 + 48);
      v10 = *(_WORD *)(v2 + 56);
      v11 = *(_BYTE *)(v2 + 58);
      v37 = (WTF::StringImpl **)(v2 + 64);
      WTF::String::isolatedCopy();
      v12 = (WTF::StringImpl **)(v2 + 72);
      WTF::URL::isolatedCopy();
      v14 = *(_QWORD *)(v2 + 112);
      *(_QWORD *)(v2 + 112) = 0;
      v15 = *(_BYTE *)(v2 + 128);
      v16 = v55;
      v17 = v56;
      v39 = v55;
      v40 = v54;
      v41 = v53;
      *(_QWORD *)v42 = v7;
      *(_QWORD *)&v42[8] = v8;
      *(_QWORD *)&v42[16] = v9;
      *(_WORD *)&v42[24] = v10;
      v42[26] = v11;
      v43 = v52;
      v44 = v49;
      *(_OWORD *)v45 = v50;
      *(_OWORD *)&v45[16] = v51;
      v46 = v14;
      v18 = *(_QWORD *)(v2 + 120);
      *(_QWORD *)(v2 + 120) = 0;
      v47 = v18;
      v48 = v15;
      v38 = 0;
      v19 = *(WTF::StringImpl **)v2;
      *(_QWORD *)v2 = v17;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v13);
          v16 = v39;
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
      v39 = 0;
      v20 = *v4;
      *v4 = v16;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v13);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v40;
      v40 = 0;
      v22 = *v5;
      *v5 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v13);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v41;
      v41 = 0;
      v24 = *v6;
      *v6 = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v13);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = *(_OWORD *)v42;
      *(_OWORD *)(v2 + 43) = *(_OWORD *)&v42[11];
      *(_OWORD *)(v2 + 32) = v25;
      v26 = v43;
      v43 = 0;
      v27 = *v37;
      *v37 = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v13);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v44;
      v44 = 0;
      v29 = *v12;
      *v12 = v28;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v13);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = *(_DWORD *)v45;
      *(_DWORD *)v45 &= ~1u;
      *(_DWORD *)(v2 + 80) = v30;
      *(_OWORD *)(v2 + 84) = *(_OWORD *)&v45[4];
      *(_QWORD *)(v2 + 100) = *(_QWORD *)&v45[20];
      *(_DWORD *)(v2 + 108) = *(_DWORD *)&v45[28];
      v31 = *(WTF **)(v2 + 112);
      if (v31)
      {
        *(_QWORD *)(v2 + 112) = 0;
        *(_DWORD *)(v2 + 120) = 0;
        WTF::fastFree(v31, v13);
      }
      v32 = v46;
      v46 = 0;
      *(_QWORD *)(v2 + 112) = v32;
      LODWORD(v32) = v47;
      LODWORD(v47) = 0;
      *(_DWORD *)(v2 + 120) = v32;
      LODWORD(v32) = HIDWORD(v47);
      HIDWORD(v47) = 0;
      *(_DWORD *)(v2 + 124) = v32;
      *(_BYTE *)(v2 + 128) = v48;
      WebCore::Cookie::~Cookie((WebCore::Cookie *)&v38, v13);
      v2 += 136;
    }
    while (v2 < v36);
    a2 = v34;
    result = v35;
    v2 = *v34;
    v3 = *((_DWORD *)v34 + 3);
  }
  *(_QWORD *)result = v2;
  v33 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)(result + 8) = v33;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::FastMalloc> &&)#1}::operator()(std::__1)::{lambda(WTF::Function)#1},void,WTF::Function>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Cookie *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E3354918;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v3)
    {
      v4 = *(WebCore::Cookie **)(a1 + 16);
      v5 = 136 * v3;
      do
      {
        WebCore::Cookie::~Cookie(v4, a2);
        v4 = (WebCore::Cookie *)(v6 + 136);
        v5 -= 136;
      }
      while (v5);
    }
    v7 = *(WTF **)(a1 + 16);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::FastMalloc> &&)#1}::operator()(std::__1)::{lambda(WTF::Function)#1},void,WTF::Function>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WebCore::Cookie *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E3354918;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((unsigned int *)this + 7);
    if ((_DWORD)v3)
    {
      v4 = (WebCore::Cookie *)*((_QWORD *)this + 2);
      v5 = 136 * v3;
      do
      {
        WebCore::Cookie::~Cookie(v4, a2);
        v4 = (WebCore::Cookie *)(v6 + 136);
        v5 -= 136;
      }
      while (v5);
    }
    v7 = (WTF *)*((_QWORD *)this + 2);
    if (v7)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::get(WebCore::CookieStoreGetOptions &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::FastMalloc> &&)#1}::operator()(std::__1)::{lambda(WTF::Function)#1},void,WTF::Function>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v6 = v3;
    v7 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, a2, &v5);
  }
  else
  {
    LOBYTE(v5) = 33;
    v6 = 0;
    v7 = 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, &v5);
  }
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E33548D0[v7])(&v8, &v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3354940;
  WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WebCore::CookieStoreGetOptions &&::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3354940;
  WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WebCore::CookieStoreGetOptions &&::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WebCore::CookieStoreGetOptions &&::Vector<WebCore::Cookie,0ul,WebCore::CookieStoreGetOptions &&::CrashOnOverflow,16ul,WebCore::CookieStoreGetOptions &&::FastMalloc>> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  unsigned int *result;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19530E46CLL);
  }
  v4 = a1[1];
  v5 = (WebCore::Node *)(a2 - 192);
  *(_DWORD *)(a2 - 168) += 2;
  v6 = *(_QWORD *)(a2 + 336);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (v8 = *(_QWORD *)(v7 + 24)) == 0 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v10 = 0;
LABEL_17:
    v23 = 1;
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    v12 = *(unsigned int **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v10;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      v10 = *(_QWORD *)(v9 + 16);
      if (!v10)
        goto LABEL_17;
    }
  }
  do
    v15 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v15 + 1, (unsigned int *)v10));
  v16 = *(_QWORD *)(v10 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 888);
    v18 = a1[2];
    a1[2] = 0;
    v19 = a1[10];
    a1[10] = 0;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v20 = &off_1E3354990;
    v20[1] = v4;
    v20[2] = v18;
    v20[3] = v19;
    *(_QWORD *)&v38[0] = v20;
    (*(void (**)(uint64_t, WebCore::Node *, _QWORD *, _QWORD *, _OWORD *))(*(_QWORD *)v17 + 64))(v17, v5, a1 + 5, a1 + 3, v38);
    result = *(unsigned int **)&v38[0];
    *(_QWORD *)&v38[0] = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    do
    {
LABEL_37:
      v34 = __ldaxr((unsigned int *)v10);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v10));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v10);
      result = (unsigned int *)WTF::fastFree((WTF *)v10, v21);
    }
    goto LABEL_40;
  }
  v23 = 0;
LABEL_18:
  v24 = a1[10];
  a1[10] = 0;
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = &off_1E3354968;
  v25[1] = v24;
  v26 = *(_OWORD *)(v4 + 32);
  v38[0] = *(_OWORD *)(v4 + 16);
  v38[1] = v26;
  do
    v27 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v27 + 1, (unsigned int *)v4));
  v28 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v28 = &off_1E3354868;
  *((_QWORD *)v28 + 1) = v4;
  *((_QWORD *)v28 + 2) = v25;
  v36 = v28;
  v37 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_24:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v30 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v38);
  if (v30)
  {
    v31 = v30[4];
    if (v31)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 88))(v30[4]) & 1) != 0)
      {
        v32 = 1;
        goto LABEL_30;
      }
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v31 + 336))(v31, &v36);
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = 0;
LABEL_30:
  v33 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v33 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v32)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v32)
LABEL_33:
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v36 + 16))(v36, v31);
LABEL_34:
  result = v36;
  v36 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if ((v23 & 1) == 0)
    goto LABEL_37;
LABEL_40:
  if (*(_DWORD *)(a2 - 168) == 2)
  {
    if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v5, v21);
  }
  else
  {
    *(_DWORD *)(a2 - 168) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::URL &&)#1},void,WTF::URL &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3354968;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::URL &&)#1},void,WTF::URL &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3354968;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::URL &&)#1},void,WTF::URL &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4[8];
  uint64_t v5;
  int v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v4[0] = 14;
  v5 = 0;
  v6 = 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, a2, v4);
  if (v6 != -1)
    return ((uint64_t (*)(char *, char *))off_1E33548D0[v6])(&v7, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::CrashOnOverflow> &&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E3354990;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3354840;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::CrashOnOverflow> &&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E3354990;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3354840;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::Cookie *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::CrashOnOverflow> &&)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  WebCore::Cookie *v12;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  WebCore::Cookie *result;
  uint64_t v20;
  uint64_t v21;
  WebCore::Cookie *v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)v24, (unint64_t *)a2);
    v7 = *(WTF **)&v24[0];
    v3 = DWORD2(v24[0]);
    v2 = HIDWORD(v24[0]);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)0x28);
  v9 = v8;
  *(_QWORD *)v8 = &off_1E33549B8;
  *(_QWORD *)(v8 + 8) = v5;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  if (v6)
  {
    *(_QWORD *)(v8 + 16) = v7;
    *(_DWORD *)(v8 + 24) = v3;
    *(_DWORD *)(v8 + 28) = v2;
    *(_BYTE *)(v8 + 32) = 1;
    v2 = 0;
    v7 = 0;
  }
  v10 = *(_OWORD *)(v4 + 32);
  v24[0] = *(_OWORD *)(v4 + 16);
  v24[1] = v10;
  do
    v11 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v11 + 1, (unsigned int *)v4));
  v12 = (WebCore::Cookie *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = &off_1E3354868;
  *((_QWORD *)v12 + 1) = v4;
  *((_QWORD *)v12 + 2) = v9;
  v22 = v12;
  v23 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v24);
  if (v14)
  {
    v16 = v14[4];
    if (v16)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v14[4]) & 1) != 0)
      {
        v17 = 1;
        goto LABEL_18;
      }
      (*(void (**)(uint64_t, WebCore::Cookie **))(*(_QWORD *)v16 + 336))(v16, &v22);
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
LABEL_18:
  v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v18 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v17)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v17)
LABEL_21:
    (*(void (**)(WebCore::Cookie *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v16);
LABEL_22:
  result = v22;
  v22 = 0;
  if (result)
    result = (WebCore::Cookie *)(*(uint64_t (**)(WebCore::Cookie *))(*(_QWORD *)result + 8))(result);
  if (v6)
  {
    if (v2)
    {
      v20 = 136 * v2;
      result = v7;
      do
      {
        WebCore::Cookie::~Cookie(result, v15);
        result = (WebCore::Cookie *)(v21 + 136);
        v20 -= 136;
      }
      while (v20);
    }
    if (v7)
      return (WebCore::Cookie *)WTF::fastFree(v7, v15);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::CrashOnOverflow> &&)#1}::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::URL &&)#1},void,WTF::URL &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Cookie *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E33549B8;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v3)
    {
      v4 = *(WebCore::Cookie **)(a1 + 16);
      v5 = 136 * v3;
      do
      {
        WebCore::Cookie::~Cookie(v4, a2);
        v4 = (WebCore::Cookie *)(v6 + 136);
        v5 -= 136;
      }
      while (v5);
    }
    v7 = *(WTF **)(a1 + 16);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::CrashOnOverflow> &&)#1}::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::URL &&)#1},void,WTF::URL &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WebCore::Cookie *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E33549B8;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((unsigned int *)this + 7);
    if ((_DWORD)v3)
    {
      v4 = (WebCore::Cookie *)*((_QWORD *)this + 2);
      v5 = 136 * v3;
      do
      {
        WebCore::Cookie::~Cookie(v4, a2);
        v4 = (WebCore::Cookie *)(v6 + 136);
        v5 -= 136;
      }
      while (v5);
    }
    v7 = (WTF *)*((_QWORD *)this + 2);
    if (v7)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::getAll(WebCore::CookieStoreGetOptions &&,WTF::URL &&,WTF::Function<void ()(WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(std::optional<WTF::CrashOnOverflow> &&)#1}::operator()(WebCore::ScriptExecutionContext &)::{lambda(WTF::URL &&)#1},void,WTF::URL &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v6 = v3;
    v7 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, a2, &v5);
  }
  else
  {
    LOBYTE(v5) = 33;
    v6 = 0;
    v7 = 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, &v5);
  }
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E33548D0[v7])(&v8, &v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33549E0;
  WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33549E0;
  WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  unsigned int *result;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  char v36;
  _OWORD v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19530EE68);
  }
  v4 = a1[1];
  v5 = (WebCore::Document *)(a2 - 192);
  *(_DWORD *)(a2 - 168) += 2;
  v6 = *(_QWORD *)(a2 + 336);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (v8 = *(_QWORD *)(v7 + 24)) == 0 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v10 = 0;
LABEL_17:
    v22 = 1;
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    v11 = *(unsigned int **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v10;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, (void *)a2);
      }
      v10 = *(_QWORD *)(v9 + 16);
      if (!v10)
        goto LABEL_17;
    }
  }
  do
    v14 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v14 + 1, (unsigned int *)v10));
  v15 = *(_QWORD *)(v10 + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 888);
    v17 = a1[2];
    a1[2] = 0;
    v18 = a1[27];
    a1[27] = 0;
    WebCore::Document::invalidateDOMCookieCache(v5, (WTF::StringImpl *)a2);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v19 = &off_1E3354A30;
    v19[1] = v4;
    v19[2] = v17;
    v19[3] = v18;
    *(_QWORD *)&v37[0] = v19;
    (*(void (**)(uint64_t, WebCore::Document *, uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)v16 + 72))(v16, v5, a2 + 544, a1 + 10, v37);
    result = *(unsigned int **)&v37[0];
    *(_QWORD *)&v37[0] = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    do
    {
LABEL_37:
      v33 = __ldaxr((unsigned int *)v10);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v10));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v10);
      result = (unsigned int *)WTF::fastFree((WTF *)v10, v20);
    }
    goto LABEL_40;
  }
  v22 = 0;
LABEL_18:
  v23 = a1[27];
  a1[27] = 0;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = &off_1E3354A08;
  v24[1] = v23;
  v25 = *(_OWORD *)(v4 + 32);
  v37[0] = *(_OWORD *)(v4 + 16);
  v37[1] = v25;
  do
    v26 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v26 + 1, (unsigned int *)v4));
  v27 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v27 = &off_1E3354868;
  *((_QWORD *)v27 + 1) = v4;
  *((_QWORD *)v27 + 2) = v24;
  v35 = v27;
  v36 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_24:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v29 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v37);
  if (v29)
  {
    v30 = v29[4];
    if (v30)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v29[4]) & 1) != 0)
      {
        v31 = 1;
        goto LABEL_30;
      }
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v30 + 336))(v30, &v35);
    }
  }
  else
  {
    v30 = 0;
  }
  v31 = 0;
LABEL_30:
  v32 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v32 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v31)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v31)
LABEL_33:
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v35 + 16))(v35, v30);
LABEL_34:
  result = v35;
  v35 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if ((v22 & 1) == 0)
    goto LABEL_37;
LABEL_40:
  if (*(_DWORD *)(a2 - 168) == 2)
  {
    if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v5, v20);
  }
  else
  {
    *(_DWORD *)(a2 - 168) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WebCore::Cookie &&)#1},void,WebCore::Cookie &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3354A08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WebCore::Cookie &&)#1},void,WebCore::Cookie &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3354A08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(WebCore::Cookie &&)#1},void,WebCore::Cookie &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v5[0] = 14;
  v6 = 0;
  v7 = 1;
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, a2, v5);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E3354A30;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3354840;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E3354A30;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3354840;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  _QWORD *v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E3354A58;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v6 = *(_OWORD *)(v3 + 32);
  v17[0] = *(_OWORD *)(v3 + 16);
  v17[1] = v6;
  do
    v7 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v7 + 1, (unsigned int *)v3));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E3354868;
  v8[1] = v3;
  v8[2] = v5;
  v15 = v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v10[4]) & 1) != 0)
      {
        v12 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 336))(v11, &v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_13:
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v12)
LABEL_16:
    (*(void (**)(_QWORD *, uint64_t))(*v15 + 16))(v15, v11);
LABEL_17:
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(WebCore::Cookie &&)#1},void,WebCore::Cookie &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3354A58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(WebCore::Cookie &&)#1},void,WebCore::Cookie &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3354A58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::CookieStore::MainThreadBridge::set(WebCore::CookieInit &&,WebCore::Cookie &&,WTF::Function<void ()(WebCore::CookieStore&,std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(WebCore::Cookie &&)#1},void,WebCore::Cookie &&>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  char v4[8];
  WTF::StringImpl *v5;
  char v6;

  if (*(_BYTE *)(a1 + 16))
  {
    v4[0] = 0;
    v6 = 0;
  }
  else
  {
    v4[0] = 33;
    v5 = 0;
    v6 = 1;
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, v4);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
            else
              --v27[4];
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_DWORD **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            else
              --v30[4];
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_DWORD **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
            else
              --v16[4];
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::CookieStore::get(WebCore::CookieStoreGetOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WebCore::Cookie *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40[2];
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  char v44;
  char v45;
  uint64_t *v46;
  objc_class *v47;

  result = WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v46, (uint64_t *)(a2 + 112), *(_QWORD *)(a1 + 8));
  v9 = (uint64_t)v46;
  if (!v46)
    return result;
  v10 = *(_DWORD *)(a3 + 16);
  if (!v10)
  {
    v3 = *(_QWORD *)a3;
    v15 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (!(_DWORD)v15)
    {
      v31 = *(_QWORD *)(v9 + 24);
      if (v31 && *(_QWORD *)v31 && (*(_BYTE *)(v31 + 8) & 3) == 0)
      {
        v32 = *(_QWORD *)(v9 + 32);
        if (!v32 || (*(_BYTE *)(v32 + 8) & 3) != 0)
          v33 = 0;
        else
          v33 = *(uint64_t **)v32;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v9, v33, 0, (objc_class *)2);
        MEMORY[0x19AEA32A0](v40);
      }
      goto LABEL_48;
    }
    v16 = *(_OWORD *)v3;
    v18 = *(WTF::StringImpl **)(v3 + 16);
    v17 = *(WTF::StringImpl **)(v3 + 24);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)v40 = v16;
    v41 = v18;
    v42 = v17;
    v43 = *(_OWORD *)(v3 + 40);
    v44 = *(_BYTE *)(v3 + 57);
    v45 = 0;
    v19 = *(unsigned __int8 *)(v3 + 128);
    if (v19 != 1)
    {
      if (*(_BYTE *)(v3 + 128))
        goto LABEL_17;
      LOBYTE(v19) = 2;
    }
    v45 = v19;
LABEL_17:
    v20 = *(_QWORD *)(v9 + 24);
    if (!v20 || !*(_QWORD *)v20 || (*(_BYTE *)(v20 + 8) & 3) != 0)
      goto LABEL_26;
    v21 = *(_QWORD *)(v9 + 32);
    if (!v21 || (*(_BYTE *)(v21 + 8) & 3) != 0)
      a3 = 0;
    else
      a3 = *(_QWORD *)v21;
    v22 = *(_QWORD *)(a3 + 56);
    MEMORY[0x19AEA3294](&v47, v22);
    v23 = (objc_class *)WebCore::convertDictionaryToJS(a3, **(WebCore::JSDOMGlobalObject ***)(v9 + 32), (double *)v40);
    v24 = *(_QWORD *)(v22 + 16);
    if (!v24)
    {
      WebCore::DeferredPromise::callFunction(v9, (uint64_t *)a3, 0, v23);
      v24 = *(_QWORD *)(v22 + 16);
      if (!v24)
      {
LABEL_25:
        MEMORY[0x19AEA32A0](&v47);
        v17 = v42;
LABEL_26:
        v42 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v8);
          else
            *(_DWORD *)v17 -= 2;
        }
        v25 = v41;
        v41 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v8);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v40[1];
        v40[1] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v8);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v40[0];
        v40[0] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v8);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = 136 * v15;
        v29 = (WebCore::Cookie *)v3;
        do
        {
          WebCore::Cookie::~Cookie(v29, v8);
          v29 = (WebCore::Cookie *)(v30 + 136);
          v28 -= 136;
        }
        while (v28);
LABEL_48:
        if (v3)
          WTF::fastFree((WTF *)v3, v8);
        goto LABEL_50;
      }
    }
    v38 = v15;
    v39 = v24;
    v34 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a3);
    if (!(*(unsigned int (**)(_QWORD *))(*v34 + 64))(v34))
      goto LABEL_63;
    v5 = v34[43];
    if (*(_QWORD *)(v22 + 24) == v39)
    {
LABEL_79:
      *(_BYTE *)(*(_QWORD *)(v5 + 8) + 93442) = 1;
      *(_BYTE *)(v9 + 44) = 1;
      goto LABEL_63;
    }
    if (!v5)
    {
LABEL_63:
      WebCore::reportException((JSC::JSGlobalObject *)a3, v39, 0, 0, 0);
      v15 = v38;
      goto LABEL_25;
    }
    v4 = (unsigned __int8 *)(v5 + 40);
    if (__ldaxr((unsigned __int8 *)(v5 + 40)))
    {
      __clrex();
LABEL_72:
      MEMORY[0x19AEA534C](v4);
LABEL_73:
      v36 = *(unsigned __int8 *)(v5 + 41);
      v37 = __ldxr(v4);
      if (v37 == 1)
      {
        if (!__stlxr(0, v4))
        {
LABEL_78:
          if (v36)
            goto LABEL_79;
          goto LABEL_63;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      goto LABEL_78;
    }
LABEL_71:
    if (!__stxr(1u, v4))
      goto LABEL_73;
    goto LABEL_72;
  }
  if (v10 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_71;
  }
  v11 = *(_BYTE *)a3;
  v12 = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v47 = 0;
  LOBYTE(v40[0]) = v11;
  if (v12)
    *(_DWORD *)v12 += 2;
  v40[1] = v12;
  WebCore::DeferredPromise::reject(v9, (unsigned __int8 *)v40, 0, &v47);
  v14 = v40[1];
  v40[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      if (!v12)
        goto LABEL_50;
      goto LABEL_10;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v12)
    goto LABEL_50;
LABEL_10:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v13);
  else
    *(_DWORD *)v12 -= 2;
LABEL_50:
  result = v46;
  if (v46)
  {
    if (*((_DWORD *)v46 + 4) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v46 + 16))(v46);
    else
      --*((_DWORD *)v46 + 4);
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::CookieStore::getAll(WebCore::CookieStoreGetOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CookieStore&,WebCore::ExceptionOr<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  WTF *v8;
  unsigned int v9;
  uint64_t *result;
  void *v12;
  uint64_t v13;
  int v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _BYTE *v19;
  unsigned int v20;
  WTF *v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::JSDOMGlobalObject *v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  objc_class *v34;
  int v35;
  BOOL v36;
  JSValue v37;
  void *v38;
  objc_class *v39;
  JSC::VM *v40;
  uint64_t *v41;
  uint64_t v42;
  WebCore::Cookie *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  WTF *v53;
  uint64_t *v54;
  char v55[8];
  objc_class *v56;
  int v57;
  WTF::StringImpl *v58[2];
  WTF *v59;
  _OWORD v60[4];
  uint64_t v61;
  JSC::VM *v62;

  result = WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v54, (uint64_t *)(a2 + 112), *(_QWORD *)(a1 + 8));
  v13 = (uint64_t)v54;
  if (!v54)
    return result;
  v14 = *(_DWORD *)(a3 + 16);
  if (!v14)
  {
    v8 = *(WTF **)a3;
    v5 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((_DWORD)v5)
    {
      if (v5 >= 0x4924925)
      {
        __break(0xC471u);
        return result;
      }
      a3 = WTF::fastMalloc((WTF *)(56 * v5));
      v19 = (_BYTE *)(a3 + 49);
      v20 = (136 * v5 - 136) / 0x88uLL + 1;
      v21 = v8;
      do
      {
        v22 = *(_OWORD *)v21;
        v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v21 + 1) = 0uLL;
        *(_OWORD *)v58 = *(_OWORD *)((char *)v21 + 40);
        v24 = *((unsigned __int8 *)v21 + 128);
        if (v24 != 1)
        {
          if (*((_BYTE *)v21 + 128))
            LOBYTE(v24) = 0;
          else
            LOBYTE(v24) = 2;
        }
        v25 = *((_BYTE *)v21 + 57);
        *(_OWORD *)(v19 - 49) = v22;
        *(_OWORD *)(v19 - 33) = v23;
        *(_OWORD *)(v19 - 17) = *(_OWORD *)v58;
        *(v19 - 1) = v25;
        *v19 = v24;
        v19 += 56;
        v21 = (WTF *)((char *)v21 + 136);
      }
      while (v21 != (WTF *)((char *)v8 + 136 * v5));
    }
    else
    {
      a3 = 0;
      v20 = 0;
    }
    v26 = *(_QWORD *)(v13 + 24);
    if (!v26 || !*(_QWORD *)v26 || (*(_BYTE *)(v26 + 8) & 3) != 0)
      goto LABEL_55;
    v27 = *(_QWORD *)(v13 + 32);
    if (!v27 || (*(_BYTE *)(v27 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(uint64_t **)v27;
    v28 = v4[7];
    MEMORY[0x19AEA3294](v55, v28);
    v29 = **(WebCore::JSDOMGlobalObject ***)(v13 + 32);
    v30 = (JSC::VM *)v4[7];
    v62 = v30;
    LOBYTE(v58[0]) = 0;
    v58[1] = (WTF::StringImpl *)0x800000000;
    v59 = (WTF *)((char *)v60 + 8);
    memset(v60, 0, sizeof(v60));
    v61 = 0;
    if (v20 >= 9)
    {
      v53 = v8;
      v31 = v20;
      v52 = v20;
      v51 = v28;
      LOBYTE(v58[0]) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v58[1]) == 1;
    }
    else
    {
      if (!v20)
        goto LABEL_47;
      v51 = v28;
      v53 = v8;
      v52 = v20;
      v31 = v20;
    }
    v32 = 56 * v31;
    v33 = (double *)a3;
    do
    {
      v34 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v4, v29, v33);
      if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
      {
        v39 = 0;
        v8 = v53;
        v20 = v52;
        v28 = v51;
        goto LABEL_49;
      }
      v35 = (int)v58[1];
      if (LODWORD(v58[1]) != HIDWORD(v58[1]) && (v59 != (WTF *)((char *)v60 + 8) ? (v36 = v59 == 0) : (v36 = 1), v36))
      {
        *((_QWORD *)v59 + LODWORD(v58[1])) = v34;
        LODWORD(v58[1]) = v35 + 1;
      }
      else
      {
        v37.super.isa = v34;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v58[1], v37) == 1)
          LOBYTE(v58[0]) = 1;
      }
      v33 += 7;
      v32 -= 56;
    }
    while (v32);
    v8 = v53;
    v20 = v52;
    v28 = v51;
    if (LOBYTE(v58[0]))
    {
      JSC::throwOutOfMemoryError();
      goto LABEL_79;
    }
LABEL_47:
    v56 = v59;
    v57 = (int)v58[1];
    v40 = (JSC::VM *)*((_QWORD *)v29 + 7);
    if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
    {
      v39 = (objc_class *)JSC::constructArray();
LABEL_49:
      v41 = *(uint64_t **)&v60[0];
      if (*(_QWORD *)&v60[0])
      {
        v56 = (objc_class *)&v58[1];
        v47 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v60[0], (uint64_t *)&v56);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v41, v47);
      }
      if (v59 != (WTF *)((char *)v60 + 8) && v59)
        WTF::fastFree(v59, v38);
      v6 = *(_QWORD *)(v28 + 16);
      if (!v6)
      {
        WebCore::DeferredPromise::callFunction(v13, v4, 0, v39);
        v6 = *(_QWORD *)(v28 + 16);
        if (!v6)
          goto LABEL_54;
      }
      v45 = v28;
      v9 = v20;
      v46 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v4);
      if (!(*(unsigned int (**)(_QWORD *))(*v46 + 64))(v46))
        goto LABEL_76;
      v3 = v46[43];
      if (*(_QWORD *)(v45 + 24) == v6)
      {
LABEL_94:
        *(_BYTE *)(*(_QWORD *)(v3 + 8) + 93442) = 1;
        *(_BYTE *)(v13 + 44) = 1;
        goto LABEL_76;
      }
      if (!v3)
      {
LABEL_76:
        WebCore::reportException((JSC::JSGlobalObject *)v4, v6, 0, 0, 0);
        v20 = v9;
LABEL_54:
        MEMORY[0x19AEA32A0](v55);
LABEL_55:
        if (v20)
          WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct((WTF::StringImpl *)a3, (WTF::StringImpl *)(a3 + 56 * v20));
        if (a3)
          WTF::fastFree((WTF *)a3, v12);
        if ((_DWORD)v5)
        {
          v42 = 136 * v5;
          v43 = v8;
          do
          {
            WebCore::Cookie::~Cookie(v43, v12);
            v43 = (WebCore::Cookie *)(v44 + 136);
            v42 -= 136;
          }
          while (v42);
        }
        if (v8)
          WTF::fastFree(v8, v12);
        goto LABEL_64;
      }
      v7 = (unsigned __int8 *)(v3 + 40);
      if (__ldaxr((unsigned __int8 *)(v3 + 40)))
      {
        __clrex();
LABEL_87:
        MEMORY[0x19AEA534C](v7);
LABEL_88:
        v49 = *(unsigned __int8 *)(v3 + 41);
        v50 = __ldxr(v7);
        if (v50 == 1)
        {
          if (!__stlxr(0, v7))
          {
LABEL_93:
            if (v49)
              goto LABEL_94;
            goto LABEL_76;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        goto LABEL_93;
      }
LABEL_86:
      if (!__stxr(1u, v7))
        goto LABEL_88;
      goto LABEL_87;
    }
LABEL_79:
    v39 = 0;
    goto LABEL_49;
  }
  if (v14 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_86;
  }
  v15 = *(_BYTE *)a3;
  v16 = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v56 = 0;
  LOBYTE(v58[0]) = v15;
  if (v16)
    *(_DWORD *)v16 += 2;
  v58[1] = v16;
  WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)v58, 0, &v56);
  v18 = v58[1];
  v58[1] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v17);
      if (!v16)
        goto LABEL_64;
      goto LABEL_10;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v16)
    goto LABEL_64;
LABEL_10:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v17);
  else
    *(_DWORD *)v16 -= 2;
LABEL_64:
  result = v54;
  if (v54)
  {
    if (*((_DWORD *)v54 + 4) == 1)
      return (uint64_t *)(*(uint64_t (**)(void))(*v54 + 16))();
    else
      --*((_DWORD *)v54 + 4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  _WORD *v14;
  int8x16_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  char v32;
  uint64_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v7 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v9 = v33;
        if (v33)
        {
          v10 = (_BYTE *)(v33 + 20);
          *(_DWORD *)v33 = 2;
          *(_DWORD *)(v33 + 4) = v7;
          *(_QWORD *)(v33 + 8) = v33 + 20;
          *(_DWORD *)(v33 + 16) = 4;
          if (a3)
          {
            v11 = *(_BYTE **)(a3 + 8);
            v12 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v12)
              {
                if ((_DWORD)v12 == 1)
                  *v10 = *v11;
                else
                  result = (uint64_t)memcpy((void *)(v33 + 20), v11, v12);
              }
            }
            else
            {
              if (v12 < 0x10)
              {
                v29 = (unsigned __int128 *)(v33 + 20);
              }
              else
              {
                v29 = (unsigned __int128 *)&v10[v12 & 0xFFFFFFF0];
                v30 = (unsigned __int128 *)(v33 + 20);
                do
                {
                  v31 = (unsigned __int128)vld2q_s8(v11);
                  v11 += 32;
                  *v30++ = v31;
                }
                while (v30 != v29);
              }
              while (v29 != (unsigned __int128 *)&v10[v12])
              {
                v32 = *v11;
                v11 += 2;
                *(_BYTE *)v29 = v32;
                v29 = (unsigned __int128 *)((char *)v29 + 1);
              }
            }
            v13 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v13 = 0;
          }
          v10[v13] = a4;
        }
        goto LABEL_33;
      }
LABEL_35:
      v9 = 0;
      goto LABEL_33;
    }
LABEL_34:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)result)
    goto LABEL_34;
  if (result > 0x7FFFFFEF)
    goto LABEL_35;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v9 = v33;
  if (v33)
  {
    v14 = (_WORD *)(v33 + 20);
    *(_DWORD *)v33 = 2;
    *(_DWORD *)(v33 + 4) = v7;
    *(_QWORD *)(v33 + 8) = v33 + 20;
    *(_DWORD *)(v33 + 16) = 0;
    if (a3)
    {
      v15 = *(int8x16_t **)(a3 + 8);
      v16 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v17 = (char *)&v14[v16];
        if (v16 >= 0x40)
        {
          v18 = (char *)&v14[v16 & 0xFFFFFFC0];
          v20 = 0uLL;
          v21 = (char *)(v33 + 20);
          do
          {
            v34.val[0] = *v15;
            v22 = v15[1];
            v35.val[0] = v15[2];
            v23 = v15[3];
            v15 += 4;
            v24 = v23;
            v35.val[1] = 0uLL;
            v36.val[0] = v22;
            v34.val[1] = 0uLL;
            v25 = v21;
            vst2q_s8(v25, v34);
            v25 += 32;
            v36.val[1] = 0uLL;
            vst2q_s8(v25, v36);
            v26 = v21 + 64;
            vst2q_s8(v26, v35);
            v27 = v21 + 96;
            vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
            v21 += 128;
          }
          while (v21 != v18);
        }
        else
        {
          v18 = (char *)(v33 + 20);
        }
        while (v18 != v17)
        {
          v28 = v15->u8[0];
          v15 = (int8x16_t *)((char *)v15 + 1);
          *(_WORD *)v18 = v28;
          v18 += 2;
        }
      }
      else if ((_DWORD)v16 == 1)
      {
        *v14 = v15->i16[0];
      }
      else if ((_DWORD)v16)
      {
        result = (uint64_t)memcpy((void *)(v33 + 20), v15, 2 * v16);
      }
      v19 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v19 = 0;
    }
    v14[v19] = a4;
  }
LABEL_33:
  *a5 = v9;
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::CookieStore::set(WebCore::CookieInit &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CookieStore&,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  _DWORD *v5;
  unsigned __int8 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;
  objc_class *v15;

  result = (WTF::StringImpl *)WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(a2 + 112), *(_QWORD *)(a1 + 8));
  v5 = (_DWORD *)v12;
  if (v12)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v9 = *(_QWORD *)(v12 + 24);
      if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
      {
        v10 = *(_QWORD *)(v12 + 32);
        if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
          v11 = 0;
        else
          v11 = *(uint64_t **)v10;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction((uint64_t)v5, v11, 0, (objc_class *)0xA);
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v13);
      }
      goto LABEL_18;
    }
    v6 = *(_BYTE *)a3;
    v7 = *(WTF::StringImpl **)(a3 + 8);
    if (v7)
      *(_DWORD *)v7 += 4;
    v14 = v7;
    v15 = 0;
    v13[0] = v6;
    WebCore::DeferredPromise::reject((uint64_t)v5, v13, 0, &v15);
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        if (v7)
        {
LABEL_9:
          if (*(_DWORD *)v7 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v8);
          else
            *(_DWORD *)v7 -= 2;
        }
LABEL_18:
        if (v5[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        --v5[4];
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (v7)
      goto LABEL_9;
    goto LABEL_18;
  }
  return result;
}

void sub_1953103E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1953104E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PreviewConverter::PreviewConverter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WebPreviewConverterDelegate *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v20[2];

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3405D00;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  v20[0] = (unsigned int *)v6;
  WebCore::SharedBufferBuilder::initialize((WebCore::SharedBufferBuilder *)(a1 + 24), v20);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v20, v7);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 86) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 112), (const WebCore::ResourceResponseBase *)a2);
  v8 = *(const void **)(a2 + 240);
  *(_QWORD *)(a1 + 352) = v8;
  if (v8)
    CFRetain(v8);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 392;
  *(_QWORD *)(a1 + 384) = 1;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
    goto LABEL_17;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a3;
  v11 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v9;
  if (!v11)
    goto LABEL_17;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
LABEL_17:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(a1 + 400) = v9;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  v15 = -[WebPreviewConverterDelegate initWithDelegate:]([WebPreviewConverterDelegate alloc], "initWithDelegate:", a1);
  *(_QWORD *)(a1 + 424) = v15;
  v16 = objc_alloc((Class)PAL::getQLPreviewConverterClass((PAL *)v15));
  v17 = *(_QWORD *)(a1 + 424);
  v18 = *(_QWORD *)(a1 + 352);
  if (!v18)
  {
    if ((*(_BYTE *)(a1 + 250) & 1) != 0)
    {
      v18 = 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)(a1 + 112));
      v18 = *(_QWORD *)(a1 + 352);
    }
  }
  *(_QWORD *)(a1 + 432) = objc_msgSend(v16, "initWithConnection:delegate:response:options:", 0, v17, v18, 0);
  return a1;
}

void sub_1953107AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  WTF::StringImpl **v17;
  WebCore::ResourceResponseBase *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  const void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;

  WebCore::ResourceResponseBase::~ResourceResponseBase(v18, a2);
  v22 = *(const void **)(v15 + 96);
  *(_QWORD *)(v15 + 96) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *v20;
  *v20 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *v17;
  *v17 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *v19;
  *v19 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *v16;
  *v16 = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v26));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v26);
      v33 = *(unsigned int *)(v26 + 20);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD *)(v26 + 8);
        v35 = v34 + 16 * v33;
        do
        {
          v36 = *(unsigned int **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              v39 = v36[6];
              if ((_DWORD)v39 != -1)
                ((void (*)(char *, unsigned int *))off_1E3354E00[v39])(&a15, v36 + 2);
              v36[6] = -1;
              WTF::fastFree((WTF *)v36, v21);
            }
          }
          v34 += 16;
        }
        while (v34 != v35);
      }
      v40 = *(WTF **)(v26 + 8);
      if ((WTF *)(v26 + 24) != v40 && v40 != 0)
      {
        *(_QWORD *)(v26 + 8) = 0;
        *(_DWORD *)(v26 + 16) = 0;
        WTF::fastFree(v40, v21);
      }
      WTF::fastFree((WTF *)v26, v21);
    }
  }
  v29 = *(_QWORD *)(v15 + 8);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 0;
    v30 = *(unsigned int **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = 0;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v21);
      }
    }
  }
  else
  {
    *(_QWORD *)(v15 + 8) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::PreviewConverter::platformSupportedMIMETypes@<X0>(WebCore::PreviewConverter *this@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  WTF::StringImpl **v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unint64_t v51;
  int v52;
  const void *SupportedMIMETypes;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  if ((_MergedGlobals_130 & 1) == 0)
  {
    SupportedMIMETypes = (const void *)PAL::softLinkQuickLookQLPreviewGetSupportedMIMETypes(this);
    qword_1ECE81BF0 = (uint64_t)SupportedMIMETypes;
    if (SupportedMIMETypes)
      CFRetain(SupportedMIMETypes);
    _MergedGlobals_130 = 1;
  }
  v3 = (void *)qword_1ECE81BF0;
  result = objc_msgSend((id)qword_1ECE81BF0, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v56;
    v7 = MEMORY[0x1E0CBF868];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v56 != v6)
          objc_enumerationMutation(v3);
        MEMORY[0x19AEA5508](&v54, *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * v8));
        v10 = *a2;
        if (*a2
          || (v11 = WTF::fastZeroedMalloc((WTF *)0x50),
              *a2 = v11 + 16,
              *(_DWORD *)(v11 + 12) = 8,
              *(_DWORD *)(*a2 - 8) = 7,
              *(_DWORD *)(*a2 - 16) = 0,
              *(_DWORD *)(*a2 - 12) = 0,
              (v10 = *a2) != 0))
        {
          v12 = *(_DWORD *)(v10 - 8);
        }
        else
        {
          v12 = 0;
        }
        v13 = v54;
        v14 = *((_DWORD *)v54 + 4);
        v15 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
        v16 = *((unsigned int *)v54 + 1);
        v17 = -1640531527;
        if ((v14 & 4) != 0)
        {
          if (v16 >= 2)
          {
            v18 = 0;
            do
            {
              v19 = v17 + *(unsigned __int8 *)(v7 + v15[v18]);
              v20 = (v19 << 16) ^ (*(unsigned __int8 *)(v7 + v15[v18 + 1]) << 11) ^ v19;
              v17 = v20 + (v20 >> 11);
              v21 = v18 + 3;
              v18 += 2;
            }
            while (v21 < v16);
          }
          if ((v16 & 1) == 0)
            goto LABEL_17;
          v22 = *(unsigned __int8 *)(v7 + v15[v16 - 1]);
        }
        else
        {
          if (v16 >= 2)
          {
            v48 = 0;
            do
            {
              v49 = &v15[2 * v48];
              v50 = *(unsigned __int16 *)v49 | (32 * (*(unsigned __int16 *)v49 - 65 < 0x1A));
              LODWORD(v49) = (((*((unsigned __int16 *)v49 + 1) - 65 < 0x1A) << 16) | (*((unsigned __int16 *)v49 + 1) << 11)) ^ ((v17 + v50) << 16) ^ (v17 + v50);
              v17 = (_DWORD)v49 + (v49 >> 11);
              v51 = v48 + 3;
              v48 += 2;
            }
            while (v51 < v16);
          }
          if ((v16 & 1) == 0)
            goto LABEL_17;
          v52 = *(unsigned __int16 *)&v15[2 * v16 - 2];
          v22 = v52 | (32 * ((v52 - 65) < 0x1A));
        }
        v17 = ((v17 + v22) ^ ((v17 + v22) << 11)) + (((v17 + v22) ^ ((v17 + v22) << 11)) >> 17);
LABEL_17:
        v23 = 0;
        v24 = 0;
        v25 = (v17 ^ (8 * v17)) + ((v17 ^ (8 * v17)) >> 5);
        v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
        v27 = (v26 ^ (v26 << 10)) & 0xFFFFFF;
        if (!v27)
          v27 = 0x800000;
        while (1)
        {
          v28 = v27 & v12;
          v29 = (WTF::StringImpl **)(v10 + 8 * v28);
          v30 = *v29;
          if (!*v29)
            break;
          if (v30 == (WTF::StringImpl *)-1)
            goto LABEL_23;
          if (*((_DWORD *)v30 + 1) != (_DWORD)v16)
          {
LABEL_22:
            v29 = v23;
            goto LABEL_23;
          }
          v31 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
          if ((*((_BYTE *)v30 + 16) & 4) != 0)
          {
            if ((v14 & 4) != 0)
            {
              if (!(_DWORD)v16)
                goto LABEL_63;
              v9 = *(unsigned __int8 *)(v7 + *v15);
              if (*(unsigned __int8 *)(v7 + *v31) != (_DWORD)v9)
                goto LABEL_22;
              v9 = 1;
              do
              {
                v32 = v9;
                if (v16 == v9)
                  break;
                v37 = *(unsigned __int8 *)(v7 + v31[v9]);
                v38 = *(unsigned __int8 *)(v7 + v15[v9++]);
              }
              while (v37 == v38);
            }
            else
            {
              if (!(_DWORD)v16)
                goto LABEL_63;
              v9 = *(unsigned __int16 *)v15 | (32 * (*(unsigned __int16 *)v15 - 65 < 0x1A));
              if ((_DWORD)v9 != *(unsigned __int8 *)(v7 + *v31))
                goto LABEL_22;
              v9 = 1;
              do
              {
                v32 = v9;
                if (v16 == v9)
                  break;
                v34 = *(unsigned __int8 *)(v7 + v31[v9]);
                v35 = *(unsigned __int16 *)&v15[2 * v9] | (32
                                                         * (*(unsigned __int16 *)&v15[2 * v9] - 65 < 0x1A));
                ++v9;
              }
              while (v35 == v34);
            }
          }
          else if ((v14 & 4) != 0)
          {
            if (!(_DWORD)v16)
              goto LABEL_63;
            v9 = *(unsigned __int8 *)(v7 + *v15);
            if ((*(unsigned __int16 *)v31 | (32 * (*(unsigned __int16 *)v31 - 65 < 0x1A))) != (_DWORD)v9)
              goto LABEL_22;
            v9 = 1;
            do
            {
              v32 = v9;
              if (v16 == v9)
                break;
              v36 = *(unsigned __int16 *)&v31[2 * v9] | (32
                                                       * (*(unsigned __int16 *)&v31[2 * v9] - 65 < 0x1A));
              ++v9;
            }
            while (v36 == *(unsigned __int8 *)(v7 + v15[v32]));
          }
          else
          {
            if (!(_DWORD)v16)
              goto LABEL_63;
            v9 = *(unsigned __int16 *)v15 | (32 * (*(unsigned __int16 *)v15 - 65 < 0x1A));
            if ((*(unsigned __int16 *)v31 | (32 * (*(unsigned __int16 *)v31 - 65 < 0x1A))) != (_DWORD)v9)
              goto LABEL_22;
            v9 = 1;
            do
            {
              v32 = v9;
              if (v16 == v9)
                break;
              v33 = *(unsigned __int16 *)&v31[2 * v9] | (32
                                                       * (*(unsigned __int16 *)&v31[2 * v9] - 65 < 0x1A));
              ++v9;
            }
            while (v33 == (*(unsigned __int16 *)&v15[2 * v32] | (32
                                                                * (*(unsigned __int16 *)&v15[2 * v32] - 65 < 0x1A))));
          }
          v29 = v23;
          if (v32 >= v16)
            goto LABEL_63;
LABEL_23:
          ++v24;
          v27 = v28 + v24;
          v23 = v29;
        }
        if (v23)
        {
          *v23 = 0;
          --*(_DWORD *)(*a2 - 16);
          v13 = v54;
          v29 = v23;
        }
        v54 = 0;
        v39 = *v29;
        *v29 = v13;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = *a2;
        if (*a2)
          v41 = *(_DWORD *)(v40 - 12) + 1;
        else
          v41 = 1;
        *(_DWORD *)(v40 - 12) = v41;
        v42 = *a2;
        if (*a2)
          v43 = *(_DWORD *)(v42 - 12);
        else
          v43 = 0;
        v44 = (*(_DWORD *)(v42 - 16) + v43);
        v45 = *(unsigned int *)(v42 - 4);
        if (v45 > 0x400)
        {
          if (v45 <= 2 * v44)
            goto LABEL_75;
        }
        else
        {
          if (3 * v45 > 4 * v44)
            goto LABEL_63;
          if ((_DWORD)v45)
LABEL_75:
            v47 = (_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
          else
            v47 = 8;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, v47, v29);
        }
LABEL_63:
        v46 = v54;
        v54 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v46 -= 2;
        }
        ++v8;
      }
      while (v8 != v5);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_195310FD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl ***v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;

  v12 = *v10;
  if (v12)
  {
    v13 = *((unsigned int *)v12 - 1);
    if ((_DWORD)v13)
    {
      v14 = v12;
      do
      {
        v15 = *v14;
        if (*v14 != (WTF::StringImpl *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, a2);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        ++v14;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 2), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::QLPreviewGetSupportedMIMETypesSet(WebCore *this)
{
  _QWORD *v1;
  const void *SupportedMIMETypes;

  v1 = &unk_1ECE81000;
  if ((_MergedGlobals_130 & 1) == 0)
  {
    SupportedMIMETypes = (const void *)PAL::softLinkQuickLookQLPreviewGetSupportedMIMETypes(this);
    qword_1ECE81BF0 = (uint64_t)SupportedMIMETypes;
    if (SupportedMIMETypes)
      CFRetain(SupportedMIMETypes);
    _MergedGlobals_130 = 1;
    v1 = (_QWORD *)&unk_1ECE81000;
  }
  return v1[382];
}

uint64_t WebCore::PreviewConverter::platformPreviewResponse@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  uint64_t result;
  char v5;
  int64x2_t v6;

  v3 = (const void *)objc_msgSend(this[54], "previewResponse");
  *(_QWORD *)a2 = 0;
  result = WTF::URL::invalidate((WTF::URL *)a2);
  *(_BYTE *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_BYTE *)(a2 + 120) = 0;
  v5 = *(_BYTE *)(a2 + 138) & 0xCE | 1;
  *(_BYTE *)(a2 + 138) = v5;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 144) = v6;
  *(int64x2_t *)(a2 + 160) = v6;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a2 + 200) = v6;
  *(_QWORD *)(a2 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 224) &= 0xF0u;
  *(_WORD *)(a2 + 232) &= 0xC000u;
  *(_BYTE *)(a2 + 234) = *(_BYTE *)(a2 + 234) & 0xF8 | 2;
  *(_QWORD *)(a2 + 240) = v3;
  if (v3)
  {
    result = (uint64_t)CFRetain(v3);
    v5 = *(_BYTE *)(a2 + 138);
  }
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 138) = v5 & 0xF0 | (v3 == 0);
  return result;
}

void sub_1953111AC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v2;

  WebCore::ResourceResponseBase::~ResourceResponseBase(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::PreviewConverter::previewFileName(id *this)
{
  objc_msgSend(this[54], "previewFileName");
  JUMPOUT(0x19AEA5508);
}

void WebCore::PreviewConverter::previewUTI(id *this)
{
  objc_msgSend(this[54], "previewUTI");
  JUMPOUT(0x19AEA5508);
}

void WebCore::PreviewConverter::platformUnlockWithPassword(WebCore::PreviewConverter *this, const WTF::String *a2)
{
  PAL *v4;
  PAL *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t QuickLook_kQLPreviewOptionPasswordKey;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v4 = (PAL *)objc_alloc((Class)PAL::getQLPreviewConverterClass(this));
  v5 = v4;
  v6 = *((_QWORD *)this + 53);
  v7 = *((_QWORD *)this + 44);
  if (!v7)
  {
    if ((*((_BYTE *)this + 250) & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse((WebCore::PreviewConverter *)((char *)this + 112));
      v7 = *((_QWORD *)this + 44);
    }
  }
  if (*(_QWORD *)a2)
  {
    QuickLook_kQLPreviewOptionPasswordKey = PAL::get_QuickLook_kQLPreviewOptionPasswordKey(v4);
    if (*(_QWORD *)a2)
      v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v8 = &stru_1E3487BC0;
    v13[0] = v8;
    v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &QuickLook_kQLPreviewOptionPasswordKey, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = -[PAL initWithConnection:delegate:response:options:](v5, "initWithConnection:delegate:response:options:", 0, v6, v7, v9);
  v11 = (const void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = v10;
  if (v11)
    CFRelease(v11);
}

uint64_t WebCore::removeQLPreviewConverterForURL(WebCore *this, NSURL *a2)
{
  id v4;
  id v5;
  uint64_t result;
  int v7;

  if (__ldaxr((unsigned __int8 *)&unk_1ECE81BE9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECE81BE9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&unk_1ECE81BE9, a2);
LABEL_5:
  if (byte_1ECE81BEA == 1)
  {
    v4 = (id)qword_1ECE81C18;
  }
  else
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    qword_1ECE81C18 = (uint64_t)v4;
    byte_1ECE81BEA = 1;
  }
  objc_msgSend(v4, "removeObjectForKey:", this);
  if (byte_1ECE81BEB == 1)
  {
    v5 = (id)qword_1ECE81C20;
  }
  else
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    qword_1ECE81C20 = (uint64_t)v5;
    byte_1ECE81BEB = 1;
  }
  result = objc_msgSend(v5, "removeObjectForKey:", this);
  v7 = __ldxr((unsigned __int8 *)&unk_1ECE81BE9);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE81BE9);
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1ECE81BE9))
    return WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE81BE9);
  return result;
}

void sub_195311434(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE81BE9);
  goto LABEL_6;
}

void WebCore::registerQLPreviewConverterIfNeeded(WebCore *this@<X0>, NSURL *a2@<X1>, NSString *a3@<X2>, _QWORD *a4@<X8>)
{
  PAL *v8;
  NSURL *v9;
  NSString *v10;
  PAL *v11;
  void *v12;
  uint64_t v13;
  id v15;
  id v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef v19;
  void *v20;
  const void *SupportedMIMETypes;
  _BYTE v22[184];
  char v23;
  CFTypeRef cf;

  v8 = (PAL *)PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType(this, a2, a3);
  v9 = (NSURL *)v8;
  if ((_MergedGlobals_130 & 1) == 0)
  {
    SupportedMIMETypes = (const void *)PAL::softLinkQuickLookQLPreviewGetSupportedMIMETypes(v8);
    qword_1ECE81BF0 = (uint64_t)SupportedMIMETypes;
    if (SupportedMIMETypes)
      CFRetain(SupportedMIMETypes);
    _MergedGlobals_130 = 1;
  }
  if (!objc_msgSend((id)qword_1ECE81BF0, "containsObject:", v9))
  {
    *a4 = 0;
    if (!v9)
      return;
    goto LABEL_32;
  }
  v11 = (PAL *)PAL::softLinkQuickLookQLTypeCopyUTIForURLAndMimeType(this, v9, v10);
  v12 = (void *)objc_msgSend(objc_alloc((Class)PAL::getQLPreviewConverterClass(v11)), "initWithData:name:uti:options:", a3, 0, v11, 0);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v22, (NSURLRequest *)objc_msgSend(v12, "previewRequest"));
  if ((v23 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v22);
    v23 |= 1u;
  }
  v13 = WTF::URL::operator NSURL *();
  if (__ldaxr((unsigned __int8 *)&unk_1ECE81BE9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECE81BE9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](&unk_1ECE81BE9);
LABEL_11:
  if (byte_1ECE81BEA == 1)
  {
    v15 = (id)qword_1ECE81C18;
  }
  else
  {
    v15 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    qword_1ECE81C18 = (uint64_t)v15;
    byte_1ECE81BEA = 1;
  }
  objc_msgSend(v15, "setObject:forKey:", v12, v13);
  if (byte_1ECE81BEB == 1)
  {
    v16 = (id)qword_1ECE81C20;
  }
  else
  {
    v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    qword_1ECE81C20 = (uint64_t)v16;
    byte_1ECE81BEB = 1;
  }
  objc_msgSend(v16, "setObject:forKey:", &stru_1E3487BC0, v13);
  v17 = __ldxr((unsigned __int8 *)&unk_1ECE81BE9);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1ECE81BE9))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE81BE9);
  if ((v23 & 2) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformRequest((WebCore::ResourceRequest *)v22);
    v23 |= 2u;
  }
  v18 = cf;
  if (cf)
    CFRetain(cf);
  v19 = (id)CFMakeCollectable(v18);
  *a4 = v19;
  if (v19)
    CFRetain(v19);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v22, v20);
  if (v12)
    CFRelease(v12);
  if (!v11)
  {
    if (!v9)
      return;
LABEL_32:
    CFRelease(v9);
    return;
  }
  CFRelease(v11);
  if (v9)
    goto LABEL_32;
}

void sub_1953116EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void *WebCore::createTemporaryFileForQuickLook(WebCore *this, NSString *a2)
{
  void *result;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _QWORD v14[3];
  NSString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = (void *)WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("QuickLookContent"), a2);
  if (result)
  {
    v4 = result;
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v13 = 0;
    v6 = &unk_1ECE81000;
    if ((byte_1ECE81BEC & 1) == 0)
    {
      v14[0] = *MEMORY[0x1E0CB2A98];
      v15 = NSUserName();
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 448, v13, v14[0], *MEMORY[0x1E0CB2AA8]);
      v14[2] = *MEMORY[0x1E0CB2AD8];
      v10 = *MEMORY[0x1E0CB2AB8];
      v16 = v9;
      v17 = v10;
      v11 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v15, v14, 3);
      qword_1ECE81C28 = (uint64_t)v11;
      if (v11)
        CFRetain(v11);
      byte_1ECE81BEC = 1;
      v6 = (_QWORD *)&unk_1ECE81000;
    }
    if (objc_msgSend(v5, "setAttributes:ofItemAtPath:error:", v6[389], v4, &v13))
    {
      v7 = objc_msgSend(v4, "stringByAppendingPathComponent:", -[WebCore lastPathComponent](this, "lastPathComponent"));
      v8 = &unk_1ECE81000;
      if ((byte_1ECE81BED & 1) == 0)
      {
        v14[0] = *MEMORY[0x1E0CB2A98];
        v15 = NSUserName();
        v14[1] = *MEMORY[0x1E0CB2AA8];
        v16 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 384);
        v12 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v15, v14, 2);
        qword_1ECE81C30 = (uint64_t)v12;
        if (v12)
          CFRetain(v12);
        byte_1ECE81BED = 1;
        v8 = (_QWORD *)&unk_1ECE81000;
      }
      if (objc_msgSend(v5, "_web_createFileAtPath:contents:attributes:", v7, 0, v8[390], v13))
        return (void *)v7;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::ScrollAnimator::create@<X0>(WebCore::ScrollAnimator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = WTF::fastMalloc((WTF *)0xB0);
  *(_QWORD *)v5 = off_1E3405EF0;
  *(_QWORD *)(v5 + 8) = this;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = &off_1E3406D78;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = v5;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 110) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = this;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(v5 + 128) = result;
  *(_BYTE *)(v5 + 136) = 0;
  *(_QWORD *)v5 = off_1E3354B08;
  *(_QWORD *)(v5 + 168) = 0;
  *(_DWORD *)(v5 + 140) = 0;
  *(_DWORD *)(v5 + 143) = 0;
  *(_QWORD *)(v5 + 156) = 0;
  *(_QWORD *)(v5 + 148) = 0;
  *a2 = v5;
  return result;
}

uint64_t WebCore::ScrollAnimatorIOS::handleTouchEvent(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  WebCore::ScrollableArea *v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  int v26;
  int v27;
  int v29;
  float v30;
  int v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  uint64_t v39;
  int8x16_t v40;
  double v41;
  int8x16_t v42;
  unsigned int v43;
  float v44;
  uint64_t v45;
  int8x16_t v46;
  double v47;
  int8x16_t v48;

  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 == 13)
  {
    if (*(_DWORD *)(a2 + 60) == 1)
    {
      result = 0;
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 4);
      *(_QWORD *)(a1 + 148) = v5;
      *(_QWORD *)(a1 + 156) = v5;
      *(_WORD *)(a1 + 144) = 1;
      *(_BYTE *)(a1 + 146) = 0;
      *(_DWORD *)(a1 + 140) = 0;
      return result;
    }
    if (!*(_BYTE *)(a1 + 144))
      return 0;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a1 + 144))
    return 0;
  if ((v3 - 15) <= 1 || *(_DWORD *)(a2 + 60) != 1)
  {
LABEL_17:
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    if (*(_BYTE *)(a1 + 146))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 4);
  v7 = *(_DWORD *)(a1 + 156);
  v8 = *(_DWORD *)(a1 + 160);
  v9 = v7 - v6;
  v10 = v8 - HIDWORD(v6);
  *(_QWORD *)(a1 + 156) = v6;
  if (!*(_QWORD *)(a1 + 168))
  {
    if (v9 < 0)
      v11 = 3;
    else
      v11 = v7 != v6;
    v12 = *(_QWORD *)(a1 + 8);
    if (v8 == HIDWORD(v6))
    {
      if (v7 == (_DWORD)v6)
      {
        do
        {
          v13 = v12;
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 584))(v12);
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = v12;
          if (!WebCore::ScrollableArea::isPinnedOnSide(v12, v11))
            break;
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 584))(v13);
        }
        while (v12);
      }
    }
    else
    {
      v14 = 2 * (v10 > 0);
      if (v7 == (_DWORD)v6)
      {
        do
        {
          v13 = v12;
          if (!WebCore::ScrollableArea::isPinnedOnSide(v12, v14))
            break;
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 584))(v13);
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = v12;
          if (!WebCore::ScrollableArea::isPinnedOnSide(v12, v14))
            break;
          if (!WebCore::ScrollableArea::isPinnedOnSide(v13, v11))
            break;
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 584))(v13);
        }
        while (v12);
      }
    }
    *(_QWORD *)(a1 + 168) = v13;
  }
  if (*(_BYTE *)(a1 + 145))
  {
    v15 = *(_DWORD *)(a1 + 140);
    goto LABEL_32;
  }
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 424))(*(_QWORD *)(a1 + 8));
  if (v19 == (_DWORD)v21 && (_DWORD)v20 == HIDWORD(v21))
    return 0;
  v23 = *(_DWORD *)(a1 + 152);
  v24 = v23 - HIDWORD(v6);
  if (v19 == (_DWORD)v21 && (_DWORD)v20 != HIDWORD(v21))
  {
    v15 = 3;
    *(_DWORD *)(a1 + 140) = 3;
    if (v24 < 0)
      v24 = HIDWORD(v6) - v23;
    if (v24 >= 0xA)
    {
      v17 = 0;
      *(_BYTE *)(a1 + 145) = 1;
LABEL_71:
      v16 = *(WebCore::ScrollableArea **)(a1 + 168);
      goto LABEL_72;
    }
    goto LABEL_84;
  }
  v26 = *(_DWORD *)(a1 + 148);
  v27 = v26 - v6;
  if (v19 != (_DWORD)v21 && (_DWORD)v20 == HIDWORD(v21))
  {
    v15 = 2;
    *(_DWORD *)(a1 + 140) = 2;
    if (v27 >= 0)
      v33 = v26 - v6;
    else
      v33 = v6 - v26;
    if (v33 >= 0xA)
    {
      *(_BYTE *)(a1 + 145) = 1;
      v16 = *(WebCore::ScrollableArea **)(a1 + 168);
LABEL_68:
      v34 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v16 + 392))(v16);
      if (v34)
      {
        if (v9 >= 0)
          v43 = v9;
        else
          v43 = -v9;
        if (v9 >= 0)
          v44 = *(float *)(v34 + 112) * (float)v43;
        else
          v44 = -(float)(*(float *)(v34 + 112) * (float)v43);
        v45 = WebCore::ScrollableArea::scrollAnimator(v16);
        *(float *)v46.i32 = v44;
        v17 = WebCore::ScrollAnimator::singleAxisScroll(v45, 0, 1, v46, v47, v48);
      }
      else
      {
        v17 = 0;
      }
      if (*(_DWORD *)(a1 + 140) == 2)
        goto LABEL_74;
      goto LABEL_71;
    }
    goto LABEL_84;
  }
  *(_BYTE *)(a1 + 145) = 1;
  v15 = *(_DWORD *)(a1 + 140);
  if (v15)
    goto LABEL_32;
  if (v26 != (_DWORD)v6 && v23 != HIDWORD(v6))
  {
    if (v24 >= 0)
      v29 = v23 - HIDWORD(v6);
    else
      v29 = HIDWORD(v6) - v23;
    v30 = (float)v29;
    if (v27 >= 0)
      v31 = v26 - v6;
    else
      v31 = v6 - v26;
    v32 = atanf(v30 / (float)v31);
    if (v32 <= 0.34907)
    {
      v15 = 2;
    }
    else
    {
      if (v32 < 1.2217)
      {
        v15 = 0;
        goto LABEL_84;
      }
      v15 = 3;
    }
    *(_DWORD *)(a1 + 140) = v15;
  }
LABEL_84:
  if (!*(_BYTE *)(a1 + 145))
    return 0;
LABEL_32:
  v16 = *(WebCore::ScrollableArea **)(a1 + 168);
  if (v15 != 3)
    goto LABEL_68;
  v17 = 0;
LABEL_72:
  v35 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v16 + 400))(v16);
  if (v35)
  {
    if (v10 >= 0)
      v37 = v10;
    else
      v37 = -v10;
    if (v10 >= 0)
      v38 = *(float *)(v35 + 112) * (float)v37;
    else
      v38 = -(float)(*(float *)(v35 + 112) * (float)v37);
    v39 = WebCore::ScrollableArea::scrollAnimator(v16);
    *(float *)v40.i32 = v38;
    LODWORD(v35) = WebCore::ScrollAnimator::singleAxisScroll(v39, 1, 1, v40, v41, v42);
  }
  v17 |= v35;
LABEL_74:
  if (!*(_BYTE *)(a1 + 146))
  {
    if (v17)
    {
      *(_BYTE *)(a1 + 146) = 1;
      v36 = 14;
      goto LABEL_79;
    }
    return 0;
  }
  if (v17)
  {
    v36 = 16;
LABEL_79:
    (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 8 * v36))();
  }
  return 1;
}

uint64_t WebCore::ScrollView::documentView(id *this)
{
  return objc_msgSend(this[5], "documentView");
}

void *WebCore::ScrollView::platformAddChild(id *this, WebCore::Widget *a2)
{
  void *v3;
  void *v4;
  void *result;

  v3 = (void *)objc_msgSend(this[5], "documentView");
  v4 = (void *)*((_QWORD *)a2 + 5);
  result = (void *)objc_msgSend(v4, "conformsToProtocol:", &unk_1EE342188);
  if ((_DWORD)result)
  {
    result = (void *)objc_msgSend(v4, "superview");
    v4 = result;
    if (!result)
      return result;
  }
  else if (!v4)
  {
    return result;
  }
  result = (void *)objc_msgSend(v4, "superview");
  if (result != v3)
    return (void *)objc_msgSend(v3, "addSubview:", v4);
  return result;
}

uint64_t WebCore::ScrollView::platformRemoveChild(WebCore::ScrollView *this, WebCore::Widget *a2)
{
  void *v2;

  v2 = (void *)*((_QWORD *)a2 + 5);
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_1EE342188))
    v2 = (void *)objc_msgSend(v2, "superview");
  return objc_msgSend(v2, "removeFromSuperview");
}

uint64_t WebCore::ScrollView::platformSetScrollbarModes(id *this)
{
  return objc_msgSend(this[5], "setScrollingModes:vertical:andLock:", *((unsigned __int8 *)this + 168), *((unsigned __int8 *)this + 169), 0);
}

uint64_t WebCore::ScrollView::platformSetCanBlitOnScroll(id *this, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(this[5], "contentView"), "setCopiesOnScroll:", a2);
}

float WebCore::ScrollView::platformExposedContentRect(WebCore::ScrollView *this)
{
  void *v1;
  double v2;
  double v3;
  double v4;

  v1 = (void *)*((_QWORD *)this + 5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "exposedContentRect");
    return v2;
  }
  else
  {
    objc_msgSend(v1, "visibleRect");
    v3 = v4;
    objc_msgSend(v1, "bounds");
  }
  return v3;
}

void sub_195312144(_Unwind_Exception *exception_object, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x195312120);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ScrollView::setActualScrollPosition(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  void *v3;
  uint64_t result;

  v3 = (void *)*((_QWORD *)this + 5);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
    return objc_msgSend(v3, "setActualScrollPosition:", (double)*(int *)a2, (double)*((int *)a2 + 1));
  return result;
}

float WebCore::ScrollView::platformTopContentInset(WebCore::ScrollView *this)
{
  return 0.0;
}

uint64_t WebCore::ScrollView::platformVisibleContentRect(id *this, int a2)
{
  uint64_t v2;
  id *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  float v13;
  float v14;
  CGFloat v15;
  CGRect v17;

  v3 = this;
  if (a2 && (v4 = (void *)objc_msgSend(this[5], "documentView")) != 0)
    objc_msgSend(v4, "visibleRect");
  else
    objc_msgSend(v3[5], "documentVisibleRect");
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v8;
  v13 = v5;
  LODWORD(v2) = vcvtms_s32_f32(v13);
  v14 = v6;
  LODWORD(v3) = vcvtms_s32_f32(v14);
  v15 = v9;
  CGRectGetMaxX(*(CGRect *)(&v6 - 1));
  v17.origin.x = v9;
  v17.origin.y = v10;
  v17.size.width = v11;
  v17.size.height = v12;
  CGRectGetMaxY(v17);
  return v2 | ((_QWORD)v3 << 32);
}

void sub_1953122E0()
{
  objc_end_catch();
  JUMPOUT(0x1953122F8);
}

void sub_19531231C()
{
  objc_end_catch();
  JUMPOUT(0x195312324);
}

unint64_t WebCore::ScrollView::platformVisibleContentSize(id *this, int a2)
{
  void *v3;
  double v4;
  unsigned int v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  int v13;
  float v14;
  unsigned int v15;

  if (a2 && (v3 = (void *)objc_msgSend(this[5], "documentView")) != 0)
  {
    objc_msgSend(v3, "visibleRect");
    v5 = (int)v4;
    v7 = (int)v6;
  }
  else
  {
    objc_msgSend(this[5], "documentVisibleRect");
    v10 = v9;
    v12 = ceilf(v10);
    if (v12 > -2147500000.0)
      v13 = (int)v12;
    else
      v13 = 0x80000000;
    if (v12 < 2147500000.0)
      v5 = v13;
    else
      v5 = 0x7FFFFFFF;
    v11 = v8;
    v14 = ceilf(v11);
    if (v14 > -2147500000.0)
      v15 = (int)v14;
    else
      v15 = 0x80000000;
    if (v14 < 2147500000.0)
      v7 = v15;
    else
      v7 = 0x7FFFFFFFLL;
  }
  return v5 | (unint64_t)(v7 << 32);
}

void sub_1953123FC()
{
  objc_end_catch();
  JUMPOUT(0x195312414);
}

void sub_195312438()
{
  objc_end_catch();
  JUMPOUT(0x195312440);
}

uint64_t WebCore::ScrollView::platformSetContentsSize(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[5], "documentView"), "setBoundsSize:", (double)((_DWORD)this[32] & ~(*((int *)this + 64) >> 31)), (double)(*((_DWORD *)this + 65) & ~(*((int *)this + 65) >> 31)));
}

void sub_195312490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

uint64_t WebCore::ScrollView::platformSetScrollbarsSuppressed(id *this, uint64_t a2)
{
  return objc_msgSend(this[5], "setScrollBarsSuppressed:repaintOnUnsuppress:", *((unsigned __int8 *)this + 318), a2);
}

uint64_t WebCore::ScrollView::platformSetScrollPosition(id *this, const WebCore::IntPoint *a2)
{
  int v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = *(_DWORD *)a2;
  v3 = *((_DWORD *)a2 + 1);
  objc_msgSend(this[5], "scrollOrigin");
  v6 = -v5;
  if ((double)v4 <= v6)
    v7 = v6;
  else
    v7 = (double)v4;
  objc_msgSend(this[5], "scrollOrigin");
  v9 = -v8;
  if ((double)v3 <= v9)
    v10 = v9;
  else
    v10 = (double)v3;
  return objc_msgSend((id)objc_msgSend(this[5], "documentView"), "scrollPoint:", v7, v10);
}

void sub_1953125D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  NSException *v16;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

uint64_t WebCore::ScrollView::platformRepaintContentRectangle(id *this, const WebCore::IntRect *a2)
{
  return objc_msgSend((id)objc_msgSend(this[5], "documentView"), "setNeedsDisplayInRect:", (double)*(int *)a2, (double)*((int *)a2 + 1), (double)*((int *)a2 + 2), (double)*((int *)a2 + 3));
}

void sub_1953126A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

unint64_t WebCore::ScrollView::platformContentsToScreen(id *this, const WebCore::IntRect *a2)
{
  void *v3;
  unint64_t v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat y;
  CGRect v15;
  CGRect v16;

  v3 = (void *)objc_msgSend(this[5], "documentView");
  v4 = (unint64_t)v3;
  if (!v3)
    return 0;
  objc_msgSend(v3, "convertRect:toView:", 0, (double)*(int *)a2, (double)*((int *)a2 + 1), (double)*((int *)a2 + 2), (double)*((int *)a2 + 3));
  v6 = v5;
  v8 = v7;
  objc_msgSend((id)objc_msgSend((id)v4, "window"), "convertBaseToScreen:", v9, v10);
  v12 = v11;
  y = v15.origin.y;
  *(float *)&v11 = v11;
  LODWORD(v4) = vcvtms_s32_f32(*(float *)&v11);
  *(float *)&v11 = v15.origin.y;
  LODWORD(a2) = vcvtms_s32_f32(*(float *)&v11);
  v15.origin.x = v12;
  v15.size.width = v6;
  v15.size.height = v8;
  CGRectGetMaxX(v15);
  v16.origin.x = v12;
  v16.origin.y = y;
  v16.size.width = v6;
  v16.size.height = v8;
  CGRectGetMaxY(v16);
  return v4 | ((_QWORD)a2 << 32);
}

void sub_19531285C()
{
  objc_end_catch();
  JUMPOUT(0x195312864);
}

unint64_t WebCore::ScrollView::platformScreenToContents(id *this, const WebCore::IntPoint *a2)
{
  void *v3;
  void *v4;
  double v5;
  uint64_t v6;
  double v7;
  unint64_t v8;

  v3 = (void *)objc_msgSend(this[5], "documentView");
  v4 = v3;
  if (v3)
  {
    objc_msgSend((id)objc_msgSend(v3, "window"), "convertScreenToBase:", (double)*(int *)a2, (double)*((int *)a2 + 1));
    objc_msgSend(v4, "convertPoint:fromView:", 0);
    v6 = (int)v5;
    v8 = (unint64_t)(int)v7 << 32;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  return v8 | v6;
}

void sub_19531292C()
{
  objc_end_catch();
  JUMPOUT(0x195312934);
}

uint64_t WebCore::ScrollView::platformSetScrollOrigin(id *this, const WebCore::IntPoint *a2)
{
  return objc_msgSend(this[5], "setScrollOrigin:updatePositionAtAll:immediately:", (double)*(int *)a2, (double)*((int *)a2 + 1));
}

uint64_t WebCore::ScrollbarThemeIOS::scrollbarThickness()
{
  return 0;
}

double WebCore::ScrollbarThemeIOS::initialAutoscrollTimerDelay(WebCore::ScrollbarThemeIOS *this)
{
  return 0.0;
}

double WebCore::ScrollbarThemeIOS::autoscrollTimerDelay(WebCore::ScrollbarThemeIOS *this)
{
  return 0.0;
}

uint64_t WebCore::ScrollbarThemeIOS::buttonsPlacement(WebCore::ScrollbarThemeIOS *this)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::hasButtons(WebCore::ScrollbarThemeIOS *this, WebCore::Scrollbar *a2)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::hasThumb(WebCore::ScrollbarThemeIOS *this, WebCore::Scrollbar *a2)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::backButtonRect()
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::forwardButtonRect()
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::paint()
{
  return 1;
}

uint64_t WebCore::ThemeIOS::userPrefersContrast(WebCore::ThemeIOS *this)
{
  return PAL::softLinkUIKitUIAccessibilityDarkerSystemColorsEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityDarkerSystemColorsEnabled);
}

uint64_t WebCore::ThemeIOS::userPrefersReducedMotion(WebCore::ThemeIOS *this)
{
  return PAL::softLinkUIKitUIAccessibilityIsReduceMotionEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityIsReduceMotionEnabled);
}

uint64_t WebCore::ThemeIOS::userPrefersOnOffLabels(WebCore::ThemeIOS *this)
{
  return PAL::softLinkUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled);
}

uint64_t ___ZN7WebCore19UIFoundationLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
  qword_1ECE81BF8 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initNSColor(WebCore *this)
{
  if (qword_1ECE81C38 != -1)
    dispatch_once(&qword_1ECE81C38, &__block_literal_global_29_1);
  return qword_1ECE81C40;
}

uint64_t WebCore::initNSTextAttachment(WebCore *this)
{
  if (qword_1ECE81C48 != -1)
    dispatch_once(&qword_1ECE81C48, &__block_literal_global_31_0);
  return qword_1ECE81C50;
}

uint64_t WebCore::initNSTextList(WebCore *this)
{
  if (qword_1ECE81C58 != -1)
    dispatch_once(&qword_1ECE81C58, &__block_literal_global_35_1);
  return qword_1ECE81C60;
}

uint64_t WebCore::initNSTextTableBlock(WebCore *this)
{
  if (qword_1ECE81C68 != -1)
    dispatch_once(&qword_1ECE81C68, &__block_literal_global_39_1);
  return qword_1ECE81C70;
}

uint64_t WebCore::initNSTextTable(WebCore *this)
{
  if (qword_1ECE81C78 != -1)
    dispatch_once(&qword_1ECE81C78, &__block_literal_global_41_1);
  return qword_1ECE81C80;
}

uint64_t WebCore::initNSTextTab(WebCore *this)
{
  if (qword_1ECE81C88 != -1)
    dispatch_once(&qword_1ECE81C88, &__block_literal_global_43_1);
  return qword_1ECE81C90;
}

uint64_t WebCore::initNSAdaptiveImageGlyph(WebCore *this)
{
  if (qword_1ECE81C98 != -1)
    dispatch_once(&qword_1ECE81C98, &__block_literal_global_45_1);
  return qword_1ECE81CA0;
}

uint64_t WebCore::get_UIFoundation_NSAdaptiveImageGlyphAttributeName(WebCore *this)
{
  if (qword_1ECE81C10 != -1)
    dispatch_once(&qword_1ECE81C10, &__block_literal_global_42);
  return qword_1ECE81C08;
}

uint64_t ___ZN7WebCore50get_UIFoundation_NSAdaptiveImageGlyphAttributeNameEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81BF8, "NSAdaptiveImageGlyphAttributeName");
  if (result)
  {
    qword_1ECE81C08 = *(_QWORD *)result;
  }
  else
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

PAL *WebCore::viewController(WebCore *this, UIView *a2)
{
  PAL *isMobileSafari;
  PAL *v4;

  isMobileSafari = (PAL *)WebCore::IOSApplication::isMobileSafari(this);
  if ((isMobileSafari & 1) == 0)
    return (PAL *)objc_msgSend((id)PAL::getUIViewControllerClass[0](isMobileSafari), "viewControllerForView:", this);
  v4 = (PAL *)-[WebCore nextResponder](this, "nextResponder");
  PAL::getUIViewControllerClass[0](v4);
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  if ((WebCore *)-[PAL viewIfLoaded](v4, "viewIfLoaded") == this)
    return v4;
  return 0;
}

uint64_t WebCore::ScrollingEffectsControllerClient::scrollAnimationEnabled(WebCore::ScrollingEffectsControllerClient *this)
{
  return 1;
}

uint64_t WebCore::ScrollAnimator::processWheelEventForScrollSnap()
{
  return 0;
}

uint64_t WebCore::ScrollAnimator::isRubberBandInProgress(WebCore::ScrollAnimator *this)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::supportsControlTints(WebCore::ScrollbarThemeIOS *this)
{
  return 1;
}

uint64_t WebCore::ScrollbarTheme::invalidateOnMouseEnterExit(WebCore::ScrollbarTheme *this)
{
  return 0;
}

unsigned int *WebCore::ScrollbarTheme::paintScrollCorner(WebCore::ScrollbarTheme *this, WebCore::ScrollableArea *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  float v4;
  float v5;
  unsigned int *result;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  float v11[4];

  v4 = (float)*((int *)a4 + 1);
  v11[0] = (float)*(int *)a4;
  v11[1] = v4;
  v5 = (float)*((int *)a4 + 3);
  v11[2] = (float)*((int *)a4 + 2);
  v11[3] = v5;
  v10 = 0x11040000FFFFFFFFLL;
  result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, float *, uint64_t *))(*(_QWORD *)a3 + 224))(a3, v11, &v10);
  if ((v10 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void sub_195312E9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ScrollbarTheme::shouldSnapBackToDragOrigin()
{
  return 0;
}

uint64_t WebCore::ScrollbarTheme::shouldDragDocumentInsteadOfThumb()
{
  return 0;
}

uint64_t WebCore::ScrollbarTheme::isMockTheme(WebCore::ScrollbarTheme *this)
{
  return 0;
}

void WebCore::ThemeIOS::~ThemeIOS(WebCore::ThemeIOS *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t ___ZN7WebCoreL11initNSColorEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSColor");
  qword_1ECE81C40 = result;
  if (result)
  {
    WebCore::getNSColorClass = WebCore::NSColorFunction;
  }
  else
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSColorFunction(WebCore *this)
{
  return qword_1ECE81C40;
}

uint64_t ___ZN7WebCoreL20initNSTextAttachmentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSTextAttachment");
  qword_1ECE81C50 = result;
  if (result)
  {
    WebCore::getNSTextAttachmentClass = WebCore::NSTextAttachmentFunction;
  }
  else
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSTextAttachmentFunction(WebCore *this)
{
  return qword_1ECE81C50;
}

uint64_t ___ZN7WebCoreL14initNSTextListEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSTextList");
  qword_1ECE81C60 = result;
  if (result)
  {
    WebCore::getNSTextListClass = WebCore::NSTextListFunction;
  }
  else
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSTextListFunction(WebCore *this)
{
  return qword_1ECE81C60;
}

uint64_t ___ZN7WebCoreL20initNSTextTableBlockEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSTextTableBlock");
  qword_1ECE81C70 = result;
  if (result)
  {
    WebCore::getNSTextTableBlockClass = WebCore::NSTextTableBlockFunction;
  }
  else
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSTextTableBlockFunction(WebCore *this)
{
  return qword_1ECE81C70;
}

uint64_t ___ZN7WebCoreL15initNSTextTableEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSTextTable");
  qword_1ECE81C80 = result;
  if (result)
  {
    WebCore::getNSTextTableClass = WebCore::NSTextTableFunction;
  }
  else
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSTextTableFunction(WebCore *this)
{
  return qword_1ECE81C80;
}

uint64_t ___ZN7WebCoreL13initNSTextTabEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSTextTab");
  qword_1ECE81C90 = result;
  if (result)
  {
    WebCore::getNSTextTabClass = WebCore::NSTextTabFunction;
  }
  else
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSTextTabFunction(WebCore *this)
{
  return qword_1ECE81C90;
}

uint64_t ___ZN7WebCoreL24initNSAdaptiveImageGlyphEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore19UIFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81C00 != -1)
    dispatch_once(&qword_1ECE81C00, block);
  result = (uint64_t)objc_getClass("NSAdaptiveImageGlyph");
  qword_1ECE81CA0 = result;
  if (result)
  {
    WebCore::getNSAdaptiveImageGlyphClass = WebCore::NSAdaptiveImageGlyphFunction;
  }
  else
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::NSAdaptiveImageGlyphFunction(WebCore *this)
{
  return qword_1ECE81CA0;
}

void WebCore::DOMFileSystem::~DOMFileSystem(WebCore::DOMFileSystem *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

WTF::StringImpl *WebCore::DOMFileSystem::root@<X0>(WebCore::DOMFileSystem *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::ContextDestructionObserver *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  _BYTE v16[24];
  uint64_t v17;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v7 = (uint64_t)v6;
  *((_QWORD *)v6 + 3) = 0;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a2 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *((_QWORD *)v6 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v6, a2);
  *(_QWORD *)v7 = &off_1E33A0540;
  *(_QWORD *)(v7 + 16) = 0;
  if (*((_BYTE *)a2 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195313694);
  }
  v17 = v7;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 16, &v17, (uint64_t)v16);
  *(_DWORD *)(v7 + 32) = 1;
  *(_QWORD *)v7 = &off_1E3354FD0;
  ++*((_DWORD *)this + 2);
  *(_QWORD *)(v7 + 40) = this;
  WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v15, v11);
  v12 = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)(v7 + 56) = v12;
  *(_QWORD *)v7 = &off_1E3354F10;
  *a3 = v7;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMFileSystem::fileAsEntry@<X0>(WebCore::DOMFileSystem *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::ScriptExecutionContext *v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  WebCore::ContextDestructionObserver *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  uint64_t (**v18)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v19;
  BOOL v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  int v24;
  WebCore::ContextDestructionObserver *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  const WTF::String *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  WTF::StringImpl *v33;
  _BYTE v34[24];
  uint64_t v35;

  v3 = a2;
  v6 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v6 + 185))
  {
    if (*(_BYTE *)(v6 + 184))
      goto LABEL_3;
  }
  else
  {
    v19 = WTF::FileSystemImpl::fileTypeFollowingSymlinks((WTF::FileSystemImpl *)(v6 + 128), a2);
    v20 = (v19 & 0xFF00000000) != 0 && (_DWORD)v19 == 1;
    v21 = v20;
    *(_WORD *)(v6 + 184) = v21 | 0x100;
    v6 = *((_QWORD *)this + 3);
    if (v20)
    {
LABEL_3:
      v7 = *(_QWORD *)(v6 + 144);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 4);
        *(_DWORD *)v7 += 2;
        if (v8 < 0 || (v9 = (v8 + 1), __OFADD__(v8, 1)))
        {
          v33 = 0;
          goto LABEL_53;
        }
        v10 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
      }
      else
      {
        v9 = 1;
        v10 = 1;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, v10, 47, v7, &v33);
      if (v33)
      {
        v11 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
        v12 = (uint64_t)v11;
        *((_QWORD *)v11 + 3) = 0;
        if (!*((_BYTE *)v3 + 274))
        {
          v13 = (char *)v3 - 192;
          v14 = *((_QWORD *)v3 + 64);
          if (v14)
          {
            v15 = *(char **)(v14 + 8);
            if (v15)
              v13 = v15;
          }
          v3 = (WebCore::ScriptExecutionContext *)(v13 + 192);
        }
        *(_QWORD *)v11 = &off_1E33A18C0;
        *((_QWORD *)v11 + 1) = 0;
        WebCore::ContextDestructionObserver::observeContext(v11, v3);
        *(_QWORD *)v12 = &off_1E33A0540;
        *(_QWORD *)(v12 + 16) = 0;
        if (!*((_BYTE *)v3 + 278))
        {
          v35 = v12;
          WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v3 + 16, &v35, (uint64_t)v34);
          *(_DWORD *)(v12 + 32) = 1;
          *(_QWORD *)v12 = &off_1E3354FD0;
          ++*((_DWORD *)this + 2);
          *(_QWORD *)(v12 + 40) = this;
          WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v33, v16);
          v17 = v33;
          if (v33)
            *(_DWORD *)v33 += 2;
          *(_QWORD *)(v12 + 56) = v17;
          v18 = &off_1E3354F10;
          goto LABEL_38;
        }
        goto LABEL_55;
      }
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x1953139F8);
    }
  }
  v7 = *(_QWORD *)(v6 + 144);
  if (v7)
  {
    v22 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)v7 += 2;
    if (v22 < 0 || (v23 = (v22 + 1), __OFADD__(v22, 1)))
    {
      v33 = 0;
      goto LABEL_55;
    }
    v24 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
  }
  else
  {
    v23 = 1;
    v24 = 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v23, v24, 47, v7, &v33);
  if (!v33)
  {
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x1953139B0);
  }
  v25 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v12 = (uint64_t)v25;
  *((_QWORD *)v25 + 3) = 0;
  if (!*((_BYTE *)v3 + 274))
  {
    v26 = (char *)v3 - 192;
    v27 = *((_QWORD *)v3 + 64);
    if (v27)
    {
      v28 = *(char **)(v27 + 8);
      if (v28)
        v26 = v28;
    }
    v3 = (WebCore::ScriptExecutionContext *)(v26 + 192);
  }
  *(_QWORD *)v25 = &off_1E33A18C0;
  *((_QWORD *)v25 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v25, v3);
  *(_QWORD *)v12 = &off_1E33A0540;
  *(_QWORD *)(v12 + 16) = 0;
  if (*((_BYTE *)v3 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1953139DCLL);
  }
  v35 = v12;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v3 + 16, &v35, (uint64_t)v34);
  *(_DWORD *)(v12 + 32) = 1;
  *(_QWORD *)v12 = &off_1E3354FD0;
  ++*((_DWORD *)this + 2);
  *(_QWORD *)(v12 + 40) = this;
  WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v33, v29);
  v30 = v33;
  if (v33)
    *(_DWORD *)v33 += 2;
  *(_QWORD *)(v12 + 56) = v30;
  v18 = &off_1E3355038;
LABEL_38:
  *(_QWORD *)v12 = v18;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v12);
  *a3 = v12;
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      if (!v7)
        return result;
      goto LABEL_42;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    return result;
LABEL_42:
  if (*(_DWORD *)v7 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v31);
  *(_DWORD *)v7 -= 2;
  return result;
}

WTF *WebCore::DOMFileSystem::evaluatePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  int v11;
  unsigned int v12;
  int v15;
  int v16;
  uint64_t v18;
  __int128 *v19;
  WTF *v20;
  __int128 v21;
  void *v22;
  __int128 v23;
  const char **v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  WTF *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v28 = a3;
  v29 = a4;
  v30 = 47;
  v31 = 0;
  v24 = (const char **)&v28;
  v25 = 0;
  v27 = (_DWORD)a4 == 0;
  result = (WTF *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v24);
  v5 = v29;
  while (v25 != v5 || !v27)
  {
    v6 = *((unsigned int *)v24 + 2);
    if (v6 <= v25)
    {
      *(_QWORD *)&v23 = "";
      *((_QWORD *)&v23 + 1) = 0x100000000;
LABEL_21:
      v12 = HIDWORD(v33);
LABEL_46:
      v18 = v12;
      if (v12 == (_DWORD)v33)
      {
        v19 = (__int128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, v12 + 1, (unint64_t)&v23);
        v18 = HIDWORD(v33);
        v20 = v32;
        v21 = *v19;
      }
      else
      {
        v20 = v32;
        v21 = v23;
      }
      *((_OWORD *)v20 + v18) = v21;
      v16 = HIDWORD(v33) + 1;
      goto LABEL_50;
    }
    LODWORD(v7) = v26;
    if (v6 - v25 <= v26)
    {
      if (!v25)
      {
        v9 = *v24;
        v7 = (uint64_t)v24[1];
        goto LABEL_13;
      }
      LODWORD(v7) = v6 - v25;
    }
    v7 = v7;
    v8 = v6 - v25;
    if (*((_BYTE *)v24 + 12))
    {
      if (v8 < v7)
        goto LABEL_55;
      v9 = &(*v24)[v25];
      v7 = v7 | 0x100000000;
    }
    else
    {
      if (v8 < v7)
      {
LABEL_55:
        __break(1u);
        return result;
      }
      v9 = &(*v24)[2 * v25];
    }
LABEL_13:
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v7;
    if (v9 != "." && (_DWORD)v7 == 1)
    {
      if ((v7 & 0xFF00000000) != 0)
        v11 = *(unsigned __int8 *)v9;
      else
        v11 = *(unsigned __int16 *)v9;
      if (v11 != 46)
        goto LABEL_21;
    }
    else if (v9 != "." || (_DWORD)v7 != 1)
    {
      if (v9 != ".." && (_DWORD)v7 == 2)
      {
        v12 = HIDWORD(v33);
        if ((v7 & 0xFF00000000) != 0)
        {
          if (*v9 != 46)
            goto LABEL_46;
          v15 = *((unsigned __int8 *)v9 + 1);
        }
        else
        {
          if (*(_WORD *)v9 != 46)
            goto LABEL_46;
          v15 = *((unsigned __int16 *)v9 + 1);
        }
        if (v15 != 46)
          goto LABEL_46;
      }
      else
      {
        v12 = HIDWORD(v33);
        if (v9 != ".." || (_DWORD)v7 != 2)
          goto LABEL_46;
      }
      if (!v12)
        goto LABEL_51;
      v16 = v12 - 1;
LABEL_50:
      HIDWORD(v33) = v16;
    }
LABEL_51:
    result = (WTF *)WTF::StringView::SplitResult::Iterator::operator++();
  }
  WTF::FileSystemImpl::pathByAppendingComponents();
  result = v32;
  if (v32)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

uint64_t WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::DOMFileSystem *v8;
  bmalloc::api *v10;
  void *v11;

  v3 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 274);
    if (*(_BYTE *)(v6 + 274))
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(v6 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        else
          --*(_DWORD *)(v6 + 312);
      }
      else if (v7 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
      }
    }
    else if (*(_DWORD *)(v6 - 168) == 2)
    {
      if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v6 - 168) -= 2;
    }
  }
  v8 = *(WebCore::DOMFileSystem **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v8, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::DOMFileSystem::getParent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a3 + 56);
  if (v7)
  {
    v8 = *(WTF::StringImpl **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::resolveRelativeVirtualPath((WTF *)&v25, v8, v9, "..", 0x100000002uLL);
  if (v25)
  {
    v10 = *(_QWORD *)(v25 + 8);
    v11 = *(unsigned int *)(v25 + 4) | ((unint64_t)((*(_DWORD *)(v25 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  WebCore::DOMFileSystem::evaluatePath((uint64_t)&v24, a1, v10, v11);
  v12 = *(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 8);
  v13 = *(char *)(a2 + 274);
  if (v13 <= 2)
    *(_DWORD *)(a2 + qword_1968DDFB0[v13]) += dword_1968DDFC8[v13];
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v14 = *a4;
  *a4 = 0;
  v22 = v14;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v15 = off_1E3355150;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = v20;
  v15[4] = v21;
  v23 = v15;
  v15[5] = v22;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 32))(v12, &v23);
  v17 = v23;
  v23 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = (WTF::StringImpl *)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::resolveRelativeVirtualPath(WTF *result, WTF::StringImpl *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  __int128 *v16;
  WTF *v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  int v25;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  __int128 *v32;
  WTF *v33;
  __int128 v34;
  WTF *v36;
  WTF *v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v45;
  WTF::StringImpl *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int128 *v49;
  unsigned __int128 *v50;
  unsigned __int128 v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  WTF::StringImpl **v61;
  uint64_t v62;
  BOOL v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  char v67;
  WTF *v68;
  uint64_t v69;

  v5 = (WTF::StringImpl *)a4;
  v6 = result;
  if (!(_DWORD)a5
    || ((v7 = a5 & 0xFF00000000, (a5 & 0xFF00000000) != 0) ? (v8 = *a4) : (v8 = *(unsigned __int16 *)a4), v8 != 47))
  {
    v9 = a5;
    goto LABEL_10;
  }
  if ((_DWORD)a5 == 1)
  {
    if (!v7)
      return (WTF *)WTF::String::String();
    return (WTF *)WTF::String::String();
  }
  v9 = (a5 - 1);
  v55 = a5 - 1;
  if (!v7)
  {
    if (v55 >= v9)
    {
      v5 = (WTF::StringImpl *)(a4 + 2);
LABEL_129:
      a2 = (WTF::StringImpl *)"/";
      while (1)
      {
        v56 = v9 & 0xFF00000000;
        v57 = (v9 & 0xFF00000000) != 0 ? *(unsigned __int8 *)v5 : *(unsigned __int16 *)v5;
        if (v57 != 47)
          break;
        if ((_DWORD)v9 == 1)
        {
          if (!v56)
            return (WTF *)WTF::String::String();
          return (WTF *)WTF::String::String();
        }
        v58 = (v9 - 1);
        v59 = v9 - 1;
        if (v56)
        {
          if (v59 < v58)
            goto LABEL_149;
          v5 = (WTF::StringImpl *)((char *)v5 + 1);
          v9 = v58 | 0x100000000;
          if (!(_DWORD)v58)
            break;
        }
        else
        {
          if (v59 < v58)
            goto LABEL_149;
          v5 = (WTF::StringImpl *)((char *)v5 + 2);
          v9 = (v9 - 1);
          if (!(_DWORD)v58)
            break;
        }
      }
      a3 = 0x100000001;
      goto LABEL_10;
    }
LABEL_149:
    __break(1u);
    return result;
  }
  if (v55 < v9)
    goto LABEL_149;
  v5 = (WTF::StringImpl *)(a4 + 1);
  v9 |= 0x100000000uLL;
  if ((_DWORD)v9)
    goto LABEL_129;
  a3 = 0x100000001;
  a2 = (WTF::StringImpl *)"/";
LABEL_10:
  v68 = 0;
  v69 = 0;
  v64 = a2;
  v65 = (WTF::StringImpl *)a3;
  LOWORD(v66) = 47;
  BYTE2(v66) = 0;
  v61 = &v64;
  LODWORD(v62) = 0;
  v63 = (_DWORD)a3 == 0;
  result = (WTF *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v61);
  v10 = (int)v65;
  while ((_DWORD)v62 != v10 || !v63)
  {
    v11 = *((unsigned int *)v61 + 2);
    if (v11 <= v62)
    {
      v12 = 0x100000000;
      v14 = "";
    }
    else
    {
      LODWORD(v12) = HIDWORD(v62);
      if ((v11 - v62) <= HIDWORD(v62))
      {
        if (!(_DWORD)v62)
        {
          v14 = (const char *)*v61;
          v12 = (uint64_t)v61[1];
          goto LABEL_22;
        }
        LODWORD(v12) = v11 - v62;
      }
      v12 = v12;
      v13 = v11 - v62;
      if (*((_BYTE *)v61 + 12))
      {
        if (v13 < v12)
          goto LABEL_149;
        v14 = (char *)*v61 + v62;
        v12 = v12 | 0x100000000;
      }
      else
      {
        if (v13 < v12)
          goto LABEL_149;
        v14 = (char *)*v61 + 2 * v62;
      }
    }
LABEL_22:
    *(_QWORD *)&v60 = v14;
    *((_QWORD *)&v60 + 1) = v12;
    v15 = HIDWORD(v69);
    if (HIDWORD(v69) == (_DWORD)v69)
    {
      v16 = (__int128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v68, HIDWORD(v69) + 1, (unint64_t)&v60);
      v15 = HIDWORD(v69);
      v17 = v68;
      v18 = *v16;
    }
    else
    {
      v17 = v68;
      v18 = v60;
    }
    *((_OWORD *)v17 + v15) = v18;
    ++HIDWORD(v69);
    result = (WTF *)WTF::StringView::SplitResult::Iterator::operator++();
  }
  v64 = v5;
  v65 = (WTF::StringImpl *)v9;
  LOWORD(v66) = 47;
  BYTE2(v66) = 0;
  v61 = &v64;
  LODWORD(v62) = 0;
  v63 = (_DWORD)v9 == 0;
  result = (WTF *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v61);
  v19 = (int)v65;
  while (2)
  {
    if ((_DWORD)v62 != v19 || !v63)
    {
      v20 = *((unsigned int *)v61 + 2);
      if (v20 <= v62)
      {
        *(_QWORD *)&v60 = "";
        *((_QWORD *)&v60 + 1) = 0x100000000;
      }
      else
      {
        LODWORD(v21) = HIDWORD(v62);
        if ((v20 - v62) <= HIDWORD(v62))
        {
          if ((_DWORD)v62)
          {
            LODWORD(v21) = v20 - v62;
            goto LABEL_33;
          }
          v23 = (const char *)*v61;
          v21 = (uint64_t)v61[1];
        }
        else
        {
LABEL_33:
          v21 = v21;
          v22 = v20 - v62;
          if (*((_BYTE *)v61 + 12))
          {
            if (v22 < v21)
              goto LABEL_149;
            v23 = (char *)*v61 + v62;
            v21 = v21 | 0x100000000;
          }
          else
          {
            if (v22 < v21)
              goto LABEL_149;
            v23 = (char *)*v61 + 2 * v62;
          }
        }
        *(_QWORD *)&v60 = v23;
        *((_QWORD *)&v60 + 1) = v21;
        if (v23 != "." && (_DWORD)v21 == 1)
        {
          if ((v21 & 0xFF00000000) != 0)
            v25 = *(unsigned __int8 *)v23;
          else
            v25 = *(unsigned __int16 *)v23;
          if (v25 == 46)
            goto LABEL_73;
        }
        else
        {
          if (v23 == "." && (_DWORD)v21 == 1)
            goto LABEL_73;
          if (v23 == ".." || (_DWORD)v21 != 2)
          {
            v29 = HIDWORD(v69);
            if (v23 != ".." || (_DWORD)v21 != 2)
            {
LABEL_68:
              v31 = v29;
              if (v29 == (_DWORD)v69)
              {
                v32 = (__int128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v68, v29 + 1, (unint64_t)&v60);
                v31 = HIDWORD(v69);
                v33 = v68;
                v34 = *v32;
              }
              else
              {
                v33 = v68;
                v34 = v60;
              }
              *((_OWORD *)v33 + v31) = v34;
              v30 = HIDWORD(v69) + 1;
LABEL_72:
              HIDWORD(v69) = v30;
              goto LABEL_73;
            }
LABEL_62:
            if (v29)
            {
              v30 = v29 - 1;
              goto LABEL_72;
            }
LABEL_73:
            result = (WTF *)WTF::StringView::SplitResult::Iterator::operator++();
            continue;
          }
          if ((v21 & 0xFF00000000) != 0)
          {
            if (*v23 == 46)
            {
              v28 = *((unsigned __int8 *)v23 + 1);
              goto LABEL_61;
            }
          }
          else if (*(_WORD *)v23 == 46)
          {
            v28 = *((unsigned __int16 *)v23 + 1);
LABEL_61:
            v29 = HIDWORD(v69);
            if (v28 != 46)
              goto LABEL_68;
            goto LABEL_62;
          }
        }
      }
      v29 = HIDWORD(v69);
      goto LABEL_68;
    }
    break;
  }
  if (!HIDWORD(v69))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *v6 = v64;
    goto LABEL_123;
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 1;
  v36 = v68;
  v37 = (WTF *)((char *)v68 + 16 * HIDWORD(v69));
  while (2)
  {
    v38 = *(WTF::StringImpl ***)v36;
    v39 = *((_QWORD *)v36 + 1);
    v40 = v39 + 1;
    if ((_DWORD)v39 == -1)
      v40 = -1;
    if (__CFADD__(v40, v66))
      v41 = 0xFFFFFFFFLL;
    else
      v41 = (v40 + v66);
    v42 = v65;
    if (v65 || (v42 = v64) != 0)
    {
      v43 = *((_DWORD *)v42 + 4) & 4;
      if ((v39 & 0xFF00000000) != 0 && v43 != 0)
        goto LABEL_98;
LABEL_95:
      v45 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v64);
      if (v45)
      {
        *(_WORD *)v45 = 47;
        v61 = v38;
        v62 = v39;
        WTF::StringView::getCharacters<char16_t>(&v61, (char *)(v45 + 2));
      }
    }
    else
    {
      if ((v39 & 0xFF00000000) == 0)
        goto LABEL_95;
LABEL_98:
      v47 = (_BYTE *)MEMORY[0x19AEA4824](&v64, v41);
      if (v47)
      {
        *v47 = 47;
        v48 = v47 + 1;
        if ((v39 & 0xFF00000000) != 0)
        {
          if ((_DWORD)v39)
          {
            if ((_DWORD)v39 == 1)
              *v48 = *(_BYTE *)v38;
            else
              memcpy(v48, v38, v39);
          }
        }
        else
        {
          if (v39 < 0x10)
          {
            v49 = (unsigned __int128 *)v48;
          }
          else
          {
            v49 = (unsigned __int128 *)&v48[v39 & 0xFFFFFFF0];
            v50 = (unsigned __int128 *)v48;
            do
            {
              v51 = (unsigned __int128)vld2q_s8((const char *)v38);
              v38 += 4;
              *v50++ = v51;
            }
            while (v50 != v49);
          }
          while (v49 != (unsigned __int128 *)&v48[v39])
          {
            v52 = *(_BYTE *)v38;
            v38 = (WTF::StringImpl **)((char *)v38 + 2);
            *(_BYTE *)v49 = v52;
            v49 = (unsigned __int128 *)((char *)v49 + 1);
          }
        }
      }
    }
    v36 = (WTF *)((char *)v36 + 16);
    if (v36 != v37)
      continue;
    break;
  }
  v53 = v64;
  if (v64
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v64),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v64),
        (v53 = v64) != 0))
  {
    *(_DWORD *)v53 += 2;
  }
  *v6 = v53;
  v54 = v65;
  v65 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::destroy(v54, v46);
      v53 = v64;
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v64 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v46);
    else
      *(_DWORD *)v53 -= 2;
  }
LABEL_123:
  result = v68;
  if (v68)
  {
    v68 = 0;
    LODWORD(v69) = 0;
    return (WTF *)WTF::fastFree(result, v46);
  }
  return result;
}

uint64_t WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WebCore::DOMFileSystem *v8;
  bmalloc::api *v10;
  void *v11;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 274);
    if (*(_BYTE *)(v6 + 274))
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(v6 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        else
          --*(_DWORD *)(v6 + 312);
      }
      else if (v7 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
      }
    }
    else if (*(_DWORD *)(v6 - 168) == 2)
    {
      if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v6 - 168) -= 2;
    }
  }
  v8 = *(WebCore::DOMFileSystem **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v8, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  return a1;
}

WebCore::DOMFileSystem *WebCore::DOMFileSystem::getEntry(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, _BYTE *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WebCore::DOMFileSystem *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v34;
  uint64_t v36;
  int v37;
  WebCore::DOMFileSystem *result;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  const WTF::StringImpl *v50;
  unint64_t v51;
  uint64_t v52;
  WebCore::DOMFileSystem *v53;
  WTF::StringImpl *v54;
  WebCore::DOMFileSystem *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebCore::DOMFileSystem *v68;
  int v69;
  WebCore::DOMFileSystem *v70;
  uint64_t v71;
  WebCore::DOMFileSystem *v72;
  uint64_t (**v73)();
  bmalloc::api *v74;
  void *v75;
  WebCore::DOMFileSystem *v76[2];
  WTF::StringImpl *v77[2];
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;

  v12 = *a4;
  if (!*a4)
    goto LABEL_70;
  v13 = *(unsigned int *)(v12 + 4);
  if (!(_DWORD)v13)
    goto LABEL_70;
  v14 = *(unsigned int *)(v12 + 16);
  v15 = *(WebCore::DOMFileSystem **)(v12 + 8);
  v16 = (v14 >> 2) & 1;
  v17 = v13 & 0xFFFFFFFEFFFFFFFFLL | (v16 << 32);
  if ((_DWORD)v16)
  {
    if (*(_BYTE *)v15 != 47)
      goto LABEL_12;
    if (v13 >= 2)
    {
      if (v13 - 1 >= (unint64_t)(v13 - 1))
      {
        v15 = (WebCore::DOMFileSystem *)((char *)v15 + 1);
        v17 = (v13 + 0xFFFFFFFFLL) | 0x100000000;
        goto LABEL_12;
      }
LABEL_125:
      __break(1u);
    }
LABEL_126:
    v17 = 0x100000000;
    v15 = (WebCore::DOMFileSystem *)"";
    goto LABEL_12;
  }
  if (*(_WORD *)v15 == 47)
  {
    if (v13 > 1)
    {
      v18 = v13 - 1;
      v17 = v18;
      if (v18 >= v18)
      {
        v15 = (WebCore::DOMFileSystem *)((char *)v15 + 2);
        goto LABEL_12;
      }
      goto LABEL_125;
    }
    goto LABEL_126;
  }
LABEL_12:
  v76[0] = v15;
  v76[1] = (WebCore::DOMFileSystem *)v17;
  LOWORD(v77[0]) = 47;
  BYTE2(v77[0]) = 0;
  v81 = (WTF::StringImpl *)v76;
  v82 = 0;
  v84 = (_DWORD)v17 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v81);
  v19 = (int)v76[1];
  for (i = v82; v82 != v19 || !v84; i = v82)
  {
    v21 = *((unsigned int *)v81 + 2);
    if (v21 <= i)
      goto LABEL_56;
    LODWORD(v22) = v83;
    if (v21 - i <= v83)
    {
      if (!i)
      {
        v25 = *(const char **)v81;
        v22 = *((_QWORD *)v81 + 1);
        goto LABEL_23;
      }
      LODWORD(v22) = v21 - i;
    }
    v23 = i;
    v22 = v22;
    v24 = v21 - i;
    if (*((_BYTE *)v81 + 12))
    {
      if (v24 < v22)
        goto LABEL_125;
      v25 = (const char *)(*(_QWORD *)v81 + v23);
      v22 = v22 | 0x100000000;
    }
    else
    {
      if (v24 < v22)
        goto LABEL_125;
      v25 = (const char *)(*(_QWORD *)v81 + 2 * v23);
    }
LABEL_23:
    v26 = v22;
    if (!(_DWORD)v22)
      goto LABEL_56;
    if (v25 != "." && (_DWORD)v22 == 1)
    {
      if ((v22 & 0xFF00000000) == 0)
      {
        v34 = *(unsigned __int16 *)v25;
LABEL_55:
        if (v34 == 46)
          goto LABEL_56;
LABEL_64:
        v36 = 0;
        v30 = 0;
        do
        {
          v37 = *(unsigned __int16 *)&v25[2 * v36];
          if (!*(_WORD *)&v25[2 * v36])
            break;
          if (v37 == 47)
            break;
          if (v37 == 92)
            break;
          v30 = ++v36 >= v26;
        }
        while (v26 != v36);
        goto LABEL_37;
      }
      v28 = *(unsigned __int8 *)v25;
      goto LABEL_31;
    }
    if (v25 == "." && (_DWORD)v22 == 1)
      goto LABEL_56;
    if (v25 != ".." && (_DWORD)v22 == 2)
    {
      if ((v22 & 0xFF00000000) == 0)
      {
        if (*(_WORD *)v25 == 46)
        {
          v34 = *((unsigned __int16 *)v25 + 1);
          goto LABEL_55;
        }
        goto LABEL_64;
      }
      if (*v25 == 46)
      {
        v28 = *((unsigned __int8 *)v25 + 1);
LABEL_31:
        if (v28 == 46)
          goto LABEL_56;
      }
    }
    else
    {
      if (v25 == ".." && (_DWORD)v22 == 2)
        goto LABEL_56;
      if ((v22 & 0xFF00000000) == 0)
        goto LABEL_64;
    }
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = v25[v29];
      if (!v25[v29])
        break;
      if (v31 == 47)
        break;
      if (v31 == 92)
        break;
      v30 = ++v29 >= v26;
    }
    while (v26 != v29);
LABEL_37:
    if (!v30)
    {
      v71 = *a6;
      *a6 = 0;
      v72 = (WebCore::DOMFileSystem *)WTF::fastMalloc((WTF *)0x10);
      v73 = &off_1E33551D0;
LABEL_72:
      *(_QWORD *)v72 = v73;
      *((_QWORD *)v72 + 1) = v71;
      v76[0] = v72;
      WTF::callOnMainThread();
      result = v76[0];
      v76[0] = 0;
      if (result)
        return (WebCore::DOMFileSystem *)(*(uint64_t (**)(WebCore::DOMFileSystem *))(*(_QWORD *)result + 8))(result);
      return result;
    }
LABEL_56:
    WTF::StringView::SplitResult::Iterator::operator++();
  }
LABEL_70:
  if (*a5)
  {
    v71 = *a6;
    *a6 = 0;
    v72 = (WebCore::DOMFileSystem *)WTF::fastMalloc((WTF *)0x10);
    v73 = &off_1E33551F8;
    goto LABEL_72;
  }
  v39 = *(_QWORD *)(a3 + 56);
  if (v39)
  {
    v40 = *(unsigned int *)(v39 + 16);
    v41 = *(WTF::StringImpl **)(v39 + 8);
    LODWORD(v39) = *(_DWORD *)(v39 + 4);
    v42 = (v40 >> 2) & 1;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  v43 = *a4;
  if (*a4)
  {
    v44 = *(unsigned int *)(v43 + 16);
    v45 = *(unsigned __int8 **)(v43 + 8);
    LODWORD(v43) = *(_DWORD *)(v43 + 4);
    v46 = (v44 >> 2) & 1;
  }
  else
  {
    v45 = 0;
    v46 = 1;
  }
  WebCore::resolveRelativeVirtualPath((WTF *)&v81, v41, v39 | (unint64_t)(v42 << 32), v45, v43 | (unint64_t)(v46 << 32));
  v47 = v81;
  if (v81)
  {
    v48 = *((_QWORD *)v81 + 1);
    v47 = *((_DWORD *)v81 + 1);
    v49 = ((unint64_t)*((unsigned int *)v81 + 4) >> 2) & 1;
  }
  else
  {
    v48 = 0;
    v49 = 1;
  }
  WebCore::DOMFileSystem::evaluatePath((uint64_t)&v80, a1, v48, v47 | (v49 << 32));
  if (WTF::equal(v80, *(const WTF::StringImpl **)(a1 + 32), v50))
  {
    v51 = a2[274];
    if (v51 <= 2)
      *(_DWORD *)&a2[qword_1968DDFB0[v51]] += dword_1968DDFC8[v51];
    v52 = *a6;
    *a6 = 0;
    v53 = (WebCore::DOMFileSystem *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v53 = &off_1E3355220;
    *((_QWORD *)v53 + 1) = a1;
    *((_QWORD *)v53 + 2) = a2;
    *((_QWORD *)v53 + 3) = v52;
    v76[0] = v53;
    WTF::callOnMainThread();
    v55 = v76[0];
    v76[0] = 0;
    if (v55)
      (*(void (**)(WebCore::DOMFileSystem *))(*(_QWORD *)v55 + 8))(v55);
  }
  else
  {
    v56 = *(_QWORD *)(a1 + 32);
    if (v56 && *(_DWORD *)(v56 + 4))
    {
      v58 = *(_QWORD *)(a1 + 40);
      ++*(_DWORD *)(a1 + 8);
      v76[0] = (WebCore::DOMFileSystem *)a1;
      v59 = a2[274];
      if (v59 <= 2)
        *(_DWORD *)&a2[qword_1968DDFB0[v59]] += dword_1968DDFC8[v59];
      v76[1] = (WebCore::DOMFileSystem *)a2;
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      v60 = *a6;
      *a6 = 0;
      v78 = v60;
      v61 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v61 = off_1E3355248;
      *(WebCore::DOMFileSystem **)(v61 + 8) = v76[0];
      *(WebCore::DOMFileSystem **)(v61 + 16) = v76[1];
      *(WTF::StringImpl **)(v61 + 24) = v77[0];
      v62 = v77[1];
      *(_OWORD *)v76 = 0u;
      *(_OWORD *)v77 = 0u;
      *(_QWORD *)(v61 + 32) = v62;
      v63 = v78;
      v78 = 0;
      v79 = v61;
      *(_QWORD *)(v61 + 40) = v63;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v58 + 32))(v58, &v79);
      v64 = v79;
      v79 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      v65 = v78;
      v78 = 0;
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      v66 = v77[1];
      v77[1] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v54);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = v77[0];
      v77[0] = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v54);
        else
          *(_DWORD *)v67 -= 2;
      }
      v68 = v76[1];
      v76[1] = 0;
      if (v68)
      {
        v69 = *((unsigned __int8 *)v68 + 274);
        if (*((_BYTE *)v68 + 274))
        {
          if (v69 == 1)
          {
            if (*((_DWORD *)v68 + 78) == 1)
              (*(void (**)(WebCore::DOMFileSystem *))(*(_QWORD *)v68 + 40))(v68);
            else
              --*((_DWORD *)v68 + 78);
          }
          else if (v69 == 2)
          {
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v68 + 78);
          }
        }
        else if (*((_DWORD *)v68 - 42) == 2)
        {
          if ((*((_WORD *)v68 - 81) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::DOMFileSystem *)((char *)v68 - 192), v54);
        }
        else
        {
          *((_DWORD *)v68 - 42) -= 2;
        }
      }
      v70 = v76[0];
      v76[0] = 0;
      if (v70)
      {
        if (*((_DWORD *)v70 + 2) == 1)
        {
          WebCore::DOMFileSystem::~DOMFileSystem(v70, v54);
          bmalloc::api::isoDeallocate(v74, v75);
        }
        else
        {
          --*((_DWORD *)v70 + 2);
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v76[0]) = 5;
      LODWORD(v77[0]) = 1;
      (*(void (**)(_QWORD, WebCore::DOMFileSystem **))(*(_QWORD *)*a6 + 16))(*a6, v76);
      if (LODWORD(v77[0]) != -1)
        ((void (*)(uint64_t *, WebCore::DOMFileSystem **))off_1E33550A0[LODWORD(v77[0])])(&v79, v76);
    }
  }
  v57 = v80;
  v80 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v54);
    else
      *(_DWORD *)v57 -= 2;
  }
  result = v81;
  v81 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WebCore::DOMFileSystem *)WTF::StringImpl::destroy(result, v54);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMFileSystem::getFile(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  WTF::StringImpl *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[2];
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    v9 = *(_QWORD *)(a3 + 56);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 4);
      *(_DWORD *)v9 += 2;
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v10 | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v11 = 0;
      v12 = 0x100000000;
    }
    v30 = (WTF::StringImpl *)v9;
    WebCore::DOMFileSystem::evaluatePath((uint64_t)&v29, a1, v11, v12);
    v13 = *(_QWORD *)(a1 + 40);
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v14 = *(char *)(a2 + 274);
    if (v14 <= 2)
      *(_DWORD *)(a2 + qword_1968DDFB0[v14]) += dword_1968DDFC8[v14];
    v15 = *a4;
    *a4 = 0;
    *(_QWORD *)&v27 = a2;
    *((_QWORD *)&v27 + 1) = v15;
    v16 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v16 = &off_1E3355298;
    *(WTF::StringImpl **)(v16 + 8) = v26[0];
    *(WTF::StringImpl **)(v16 + 16) = v26[1];
    *(_QWORD *)(v16 + 24) = v27;
    v17 = *((_QWORD *)&v27 + 1);
    *(_OWORD *)v26 = 0u;
    v27 = 0u;
    *(_QWORD *)(v16 + 32) = v17;
    v28 = v16;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 32))(v13, &v28);
    v19 = v28;
    v28 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *((_QWORD *)&v27 + 1);
    *((_QWORD *)&v27 + 1) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v27;
    *(_QWORD *)&v27 = 0;
    if (v21)
    {
      v22 = *(unsigned __int8 *)(v21 + 274);
      if (*(_BYTE *)(v21 + 274))
      {
        if (v22 == 1)
        {
          if (*(_DWORD *)(v21 + 312) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
          else
            --*(_DWORD *)(v21 + 312);
        }
        else if (v22 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v21 + 312));
        }
      }
      else if (*(_DWORD *)(v21 - 168) == 2)
      {
        if ((*(_WORD *)(v21 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v21 - 192), v18);
      }
      else
      {
        *(_DWORD *)(v21 - 168) -= 2;
      }
    }
    v23 = v26[1];
    v26[1] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v26[0];
    v26[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v26[0]) = 5;
    LODWORD(v27) = 1;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a4 + 16))(*a4, v26);
    if ((_DWORD)v27 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33550B0[v27])(&v30, v26);
  }
  return result;
}

_QWORD *WebCore::FileSystemDirectoryEntry::createReader@<X0>(WebCore::FileSystemDirectoryEntry *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::ContextDestructionObserver *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v6 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v7 = (uint64_t)v6;
  *((_QWORD *)v6 + 3) = 0;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a2 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *((_QWORD *)v6 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v6, a2);
  *(_QWORD *)v7 = &off_1E33A0540;
  *(_QWORD *)(v7 + 16) = 0;
  if (*((_BYTE *)a2 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195315274);
  }
  v13 = v7;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 16, &v13, (uint64_t)&v12);
  *(_DWORD *)(v7 + 32) = 1;
  *(_QWORD *)v7 = &off_1E3354F78;
  ++*((_DWORD *)this + 8);
  *(_QWORD *)(v7 + 40) = this;
  *(_BYTE *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 64) = 0;
  *(_WORD *)(v7 + 72) = 0;
  *a3 = v7;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7);
}

uint64_t WebCore::FileSystemDirectoryEntry::getFile(uint64_t a1, char *a2, uint64_t *a3, _BYTE *a4, uint64_t *a5, uint64_t *a6)
{
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v12 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v14 = v12;
  *(_QWORD *)v12 = off_1E33553B0;
  if (!(*a5 | *a6))
    return WTF::fastFree(v12, v13);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  ++*(_DWORD *)(a1 + 32);
  *(_QWORD *)(v17 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  v18 = *a5;
  *a5 = 0;
  v19 = *a6;
  *a6 = 0;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v20 = &off_1E3355310;
  v20[1] = a1;
  v20[2] = v17;
  v20[3] = v14;
  v20[4] = v18;
  v20[5] = v19;
  v21 = v20;
  WebCore::DOMFileSystem::getEntry(v16, a2, a1, a3, a4, &v21);
  result = (uint64_t)v21;
  if (v21)
    return (*(uint64_t (**)(_QWORD *))(*v21 + 8))(v21);
  return result;
}

uint64_t WebCore::FileSystemDirectoryEntry::getDirectory(uint64_t a1, char *a2, uint64_t *a3, _BYTE *a4, uint64_t *a5, uint64_t *a6)
{
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v12 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v14 = v12;
  *(_QWORD *)v12 = off_1E33553D8;
  if (!(*a5 | *a6))
    return WTF::fastFree(v12, v13);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  ++*(_DWORD *)(a1 + 32);
  *(_QWORD *)(v17 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  v18 = *a5;
  *a5 = 0;
  v19 = *a6;
  *a6 = 0;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v20 = &off_1E3355310;
  v20[1] = a1;
  v20[2] = v17;
  v20[3] = v14;
  v20[4] = v18;
  v20[5] = v19;
  v21 = v20;
  WebCore::DOMFileSystem::getEntry(v16, a2, a1, a3, a4, &v21);
  result = (uint64_t)v21;
  if (v21)
    return (*(uint64_t (**)(_QWORD *))(*v21 + 8))(v21);
  return result;
}

void WebCore::FileSystemDirectoryReader::~FileSystemDirectoryReader(WebCore::FileSystemDirectoryReader *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;

  if (*((_BYTE *)this + 64))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[8];
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
}

{
  WTF::StringImpl *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;

  if (*((_BYTE *)this + 64))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[8];
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  bmalloc::api::isoDeallocate(this, v5);
}

WTF::StringImpl *WebCore::FileSystemDirectoryReader::readEntries(WTF::StringImpl *result, char *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  char v29;

  if (*((_BYTE *)result + 72))
  {
    v6 = *a4;
    if (*a4)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v25) = 8;
      WebCore::DOMException::create((unsigned __int8 *)&v25, (uint64_t *)&v27);
      ++*(_DWORD *)(v6 + 16);
      v7 = (uint64_t)v27;
      v27 = 0;
      v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v8 = &off_1E33552E8;
      *((_QWORD *)v8 + 1) = v6;
      *((_QWORD *)v8 + 2) = v7;
      v28 = v8;
      v29 = 0;
      (*(void (**)(char *, WTF::StringImpl **))(*(_QWORD *)a2 + 336))(a2, &v28);
      v10 = v28;
      v28 = 0;
      if (v10)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
      v11 = v27;
      v27 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      result = v26;
      v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  v12 = result;
  if (*((_BYTE *)result + 64))
  {
    v13 = *a4;
    if (*a4)
    {
      WebCore::DOMException::create((unsigned __int8 *)result + 48, (uint64_t *)&v25);
      ++*(_DWORD *)(v13 + 16);
      v14 = (uint64_t)v25;
      v25 = 0;
      v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v15 = &off_1E33552E8;
      *((_QWORD *)v15 + 1) = v13;
      *((_QWORD *)v15 + 2) = v14;
      v28 = v15;
      v29 = 0;
      (*(void (**)(char *, WTF::StringImpl **))(*(_QWORD *)a2 + 336))(a2, &v28);
      v16 = v28;
      v28 = 0;
      if (v16)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) != 1)
        {
          --*((_DWORD *)result + 2);
          return result;
        }
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  else
  {
    if (*((_BYTE *)result + 73))
    {
      v18 = *a3;
      ++*(_DWORD *)(*a3 + 16);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v19 = &off_1E33554B0;
      *((_QWORD *)v19 + 1) = v18;
      *((_QWORD *)v19 + 2) = 0;
      *((_QWORD *)v19 + 3) = 0;
      v28 = v19;
      v29 = 0;
      (*(void (**)(char *, WTF::StringImpl **))(*(_QWORD *)a2 + 336))(a2, &v28);
    }
    else
    {
      *((_BYTE *)result + 72) = 1;
      v20 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      ++*((_DWORD *)v12 + 8);
      *(_QWORD *)(v20 + 8) = v12;
      ++*((_QWORD *)v12 + 2);
      v21 = a2[274];
      if (v21 <= 2)
        *(_DWORD *)&a2[qword_1968DDFB0[v21]] += dword_1968DDFC8[v21];
      v22 = *a3;
      *a3 = 0;
      v23 = *a4;
      *a4 = 0;
      v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v24 = &off_1E3355410;
      *((_QWORD *)v24 + 1) = v12;
      *((_QWORD *)v24 + 2) = a2;
      *((_QWORD *)v24 + 3) = v22;
      *((_QWORD *)v24 + 4) = v23;
      *((_QWORD *)v24 + 5) = v20;
      v28 = v24;
      WTF::callOnMainThread();
    }
    result = v28;
    v28 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::FileSystemEntry::~FileSystemEntry(WebCore::FileSystemEntry *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebCore::DOMFileSystem *v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;

  *(_QWORD *)this = &off_1E3354FD0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::DOMFileSystem *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v5, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v5 + 2);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FileSystemEntry::~FileSystemEntry(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::ScriptExecutionContext *WebCore::HTMLInputElementEntriesAPI::webkitEntries@<X0>(WebCore::ScriptExecutionContext *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::String *v18;
  bmalloc::api *v19;
  void *v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;

  v4 = *((_QWORD *)a2 + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) == 0)
    {
      v6 = (uint64_t *)(v4 + 32);
      LODWORD(v7) = v5 >> 5;
      if (!(_DWORD)v7)
        goto LABEL_13;
LABEL_6:
      v7 = v7;
      while (1)
      {
        v8 = *v6;
        if (*v6 == WebCore::HTMLNames::webkitdirectoryAttr
          || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitdirectoryAttr + 24)
          && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitdirectoryAttr + 32))
        {
          goto LABEL_14;
        }
        v6 += 2;
        if (!--v7)
          goto LABEL_13;
      }
    }
    v6 = *(uint64_t **)(v4 + 40);
    LODWORD(v7) = *(_DWORD *)(v4 + 52);
    if ((_DWORD)v7)
      goto LABEL_6;
  }
LABEL_13:
  v9 = *((_QWORD *)a2 + 30);
  if (*(_DWORD *)(v9 + 12) != 64 || (v10 = *(_DWORD **)(v9 + 72)) == 0)
  {
LABEL_14:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return this;
  }
  v25 = this;
  ++v10[2];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v11 = v10[7];
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    this = (WebCore::ScriptExecutionContext *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a3 + 8) = v11;
    *(_QWORD *)a3 = this;
    LODWORD(v13) = v10[7];
    if ((_DWORD)v13)
    {
      v14 = (uint64_t)this;
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * v15);
        ++*(_DWORD *)(v16 + 16);
        v17 = bmalloc::api::isoAllocate();
        *(_QWORD *)v17 = 0;
        *(_DWORD *)(v17 + 8) = 1;
        WTF::createVersion4UUIDString((WTF *)v17);
        *(_QWORD *)(v17 + 24) = v16;
        WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)(v16 + 128), v18);
        WTF::WorkQueue::create();
        this = WebCore::DOMFileSystem::fileAsEntry((WebCore::DOMFileSystem *)v17, v25, &v26);
        if (*(_DWORD *)(v17 + 8) == 1)
        {
          WebCore::DOMFileSystem::~DOMFileSystem((WebCore::DOMFileSystem *)v17, a2);
          this = (WebCore::ScriptExecutionContext *)bmalloc::api::isoDeallocate(v19, v20);
        }
        else
        {
          --*(_DWORD *)(v17 + 8);
        }
        *(_QWORD *)(v14 + 8 * v15) = v26;
        *(_DWORD *)(a3 + 12) = v15 + 1;
        v13 = v10[7];
        ++v15;
      }
      while (v15 < v13);
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (v10[2] == 1)
  {
    if ((_DWORD)v13)
    {
      v21 = (_DWORD **)*((_QWORD *)v10 + 2);
      v22 = 8 * v13;
      do
      {
        v23 = *v21;
        *v21 = 0;
        if (v23)
        {
          if (v23[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
          else
            --v23[4];
        }
        ++v21;
        v22 -= 8;
      }
      while (v22);
    }
    v24 = (WTF *)*((_QWORD *)v10 + 2);
    if (v24)
    {
      *((_QWORD *)v10 + 2) = 0;
      v10[6] = 0;
      WTF::fastFree(v24, a2);
    }
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)(*(_QWORD *)v10 + 8) = 3;
      *(_QWORD *)v10 = 0;
    }
    return (WebCore::ScriptExecutionContext *)bmalloc::api::isoDeallocate((bmalloc::api *)v10, a2);
  }
  else
  {
    --v10[2];
  }
  return this;
}

uint64_t WebCore::FileSystemDirectoryReader::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

uint64_t WebCore::FileSystemDirectoryReader::deref(uint64_t this, WTF::StringImpl *a2)
{
  WebCore::ActiveDOMObject *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;

  v2 = (WebCore::ActiveDOMObject *)this;
  if (*(_DWORD *)(this + 32) == 1)
  {
    if (*(_BYTE *)(this + 64))
    {
      v3 = *(WTF::StringImpl **)(this + 56);
      *((_QWORD *)v2 + 7) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
    }
    v4 = (_DWORD *)*((_QWORD *)v2 + 5);
    *((_QWORD *)v2 + 5) = 0;
    if (v4)
    {
      if (v4[8] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[8];
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, a2);
    v6 = *((_QWORD *)v2 + 3);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *((_QWORD *)v2 + 3) = 0;
    }
    return bmalloc::api::isoDeallocate(v2, v5);
  }
  else
  {
    --*(_DWORD *)(this + 32);
  }
  return this;
}

uint64_t WebCore::FileSystemEntry::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

_DWORD *WebCore::FileSystemEntry::deref(_DWORD *this)
{
  if (this[8] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[8];
  return this;
}

uint64_t WebCore::FileSystemEntry::isFile(WebCore::FileSystemEntry *this)
{
  return 0;
}

uint64_t WebCore::FileSystemEntry::isDirectory(WebCore::FileSystemEntry *this)
{
  return 0;
}

void WebCore::FileSystemDirectoryEntry::~FileSystemDirectoryEntry(WebCore::FileSystemDirectoryEntry *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::FileSystemEntry::~FileSystemEntry(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::FileSystemDirectoryEntry::isDirectory(WebCore::FileSystemDirectoryEntry *this)
{
  return 1;
}

void WebCore::FileSystemFileEntry::~FileSystemFileEntry(WebCore::FileSystemFileEntry *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::FileSystemEntry::~FileSystemEntry(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::FileSystemFileEntry::isFile(WebCore::FileSystemFileEntry *this)
{
  return 1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore15FileSystemEntryENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[8] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[8];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore15FileSystemEntryENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::StringView::getCharacters<char16_t>(_BYTE *result, char *__dst)
{
  int8x16_t *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v2 = *(int8x16_t **)result;
  v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    v4 = &__dst[2 * v3];
    if (v3 >= 0x40)
    {
      v5 = &__dst[2 * (v3 & 0xFFFFFFC0)];
      v6 = 0uLL;
      do
      {
        v14.val[0] = *v2;
        v7 = v2[1];
        v15.val[0] = v2[2];
        v8 = v2[3];
        v2 += 4;
        v9 = v8;
        v15.val[1] = 0uLL;
        v16.val[0] = v7;
        v14.val[1] = 0uLL;
        v10 = __dst;
        vst2q_s8(v10, v14);
        v10 += 32;
        v16.val[1] = 0uLL;
        vst2q_s8(v10, v16);
        v11 = __dst + 64;
        vst2q_s8(v11, v15);
        v12 = __dst + 96;
        vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
        __dst += 128;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      v13 = v2->u8[0];
      v2 = (int8x16_t *)((char *)v2 + 1);
      *(_WORD *)__dst = v13;
      __dst += 2;
    }
  }
  else if ((_DWORD)v3 == 1)
  {
    *(_WORD *)__dst = v2->i16[0];
  }
  else if ((_DWORD)v3)
  {
    return memcpy(__dst, v2, 2 * v3);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15FileSystemEntryENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[8] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[8];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15FileSystemEntryENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v9;
  _OWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int8x16_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  size_t v23;
  uint64_t v24;
  unsigned __int128 v25;
  char v26;
  uint64_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  v7 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v9 = v27;
        if (v27)
        {
          *(_DWORD *)v27 = 2;
          *(_DWORD *)(v27 + 4) = v7;
          *(_BYTE *)(v27 + 20) = a3;
          *(_QWORD *)(v27 + 8) = v27 + 20;
          *(_DWORD *)(v27 + 16) = 4;
          if (a4)
          {
            result = v27 + 21;
            v10 = *(_OWORD **)(a4 + 8);
            v11 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v11)
              {
                if ((_DWORD)v11 == 1)
                {
                  *(_BYTE *)result = *(_BYTE *)v10;
                  goto LABEL_23;
                }
LABEL_9:
                result = (uint64_t)memcpy((void *)result, v10, v11);
                goto LABEL_23;
              }
            }
            else
            {
              v23 = result + v11;
              if (v11 >= 0x10)
              {
                v24 = result + (v11 & 0xFFFFFFF0);
                do
                {
                  v25 = (unsigned __int128)vld2q_s8((const char *)v10);
                  v10 += 2;
                  *(_OWORD *)result = v25;
                  result += 16;
                }
                while (result != v24);
                result = v24;
              }
              while (result != v23)
              {
                v26 = *(_BYTE *)v10;
                v10 = (_OWORD *)((char *)v10 + 2);
                *(_BYTE *)result++ = v26;
              }
            }
          }
        }
        goto LABEL_23;
      }
LABEL_28:
      v9 = 0;
      goto LABEL_23;
    }
LABEL_27:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v9 = v27;
  if (v27)
  {
    *(_DWORD *)v27 = 2;
    *(_DWORD *)(v27 + 4) = v7;
    *(_WORD *)(v27 + 20) = a3;
    *(_QWORD *)(v27 + 8) = v27 + 20;
    *(_DWORD *)(v27 + 16) = 0;
    if (a4)
    {
      result = v27 + 22;
      v10 = *(_OWORD **)(a4 + 8);
      v12 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) == 0)
      {
        if ((_DWORD)v12 == 1)
        {
          *(_WORD *)result = *(_WORD *)v10;
          goto LABEL_23;
        }
        if (!(_DWORD)v12)
          goto LABEL_23;
        v11 = 2 * v12;
        goto LABEL_9;
      }
      v13 = result + 2 * v12;
      if (v12 >= 0x40)
      {
        v14 = result + 2 * (v12 & 0xFFFFFFC0);
        v15 = 0uLL;
        do
        {
          v28.val[0] = (int8x16_t)*v10;
          v16 = *((int8x16_t *)v10 + 1);
          v29.val[0] = (int8x16_t)v10[2];
          v17 = v10[3];
          v10 += 4;
          v18 = v17;
          v29.val[1] = 0uLL;
          v30.val[0] = v16;
          v28.val[1] = 0uLL;
          v19 = (char *)result;
          vst2q_s8(v19, v28);
          v19 += 32;
          v30.val[1] = 0uLL;
          vst2q_s8(v19, v30);
          v20 = (char *)(result + 64);
          vst2q_s8(v20, v29);
          v21 = (char *)(result + 96);
          vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
          result += 128;
        }
        while (result != v14);
        result = v14;
      }
      while (result != v13)
      {
        v22 = *(unsigned __int8 *)v10;
        v10 = (_OWORD *)((char *)v10 + 1);
        *(_WORD *)result = v22;
        result += 2;
      }
    }
  }
LABEL_23:
  *a5 = v9;
  return result;
}

unint64_t WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 16 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33550E0;
  WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33550E0;
  WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  int v2;
  uint64_t v3;
  WTF::FileSystemImpl *v5;
  uint64_t v6;
  const WTF::String *v7;
  int v9;
  const WTF::String *v10;
  unsigned int v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  const WTF::String *v17;
  uint64_t v18;
  char v19;
  WTF::StringImpl *v20;
  char *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  WTF *result;
  bmalloc::api *v60;
  void *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  WTF *v65[2];
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  int v73;
  char v74[8];
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;

  v5 = (WTF::FileSystemImpl *)(a1 + 32);
  v6 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)(a1 + 32), a2);
  if ((v6 & 0xFF00000000) == 0 || v6 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v71) = 5;
    v9 = 1;
    v73 = 1;
    goto LABEL_51;
  }
  WTF::FileSystemImpl::listDirectory(v5, v7);
  v11 = HIDWORD(v65[1]);
  if (!HIDWORD(v65[1]))
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_48;
  }
  if (HIDWORD(v65[1]) >> 28)
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x1953169B8);
  }
  v12 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v65[1])));
  v64 = HIDWORD(v65[1]);
  v13 = 0;
  v14 = 0;
  v15 = v65[0];
  v16 = 8 * HIDWORD(v65[1]);
  do
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    if ((WTF::FileSystemImpl::isHiddenFile((WTF::FileSystemImpl *)&v71, v17) & 1) != 0
      || (v18 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v71, v10), (v18 & 0xFF00000000) == 0))
    {
      v3 &= 0xFFFFFFFFFFFFFF00;
      v19 = 1;
    }
    else
    {
      v19 = 0;
      v3 = *(_QWORD *)v15;
      *(_QWORD *)v15 = 0;
      v2 = v18;
    }
    v20 = v71;
    v71 = 0;
    if (!v20)
      goto LABEL_16;
    if (*(_DWORD *)v20 != 2)
    {
      *(_DWORD *)v20 -= 2;
LABEL_16:
      if ((v19 & 1) != 0)
        goto LABEL_18;
LABEL_17:
      v13 = v14 + 1;
      v21 = (char *)v12 + 16 * v14;
      *(_QWORD *)v21 = v3;
      *((_DWORD *)v21 + 2) = v2;
      ++v14;
      v3 = 0;
      goto LABEL_18;
    }
    WTF::StringImpl::destroy(v20, v10);
    if ((v19 & 1) == 0)
      goto LABEL_17;
LABEL_18:
    v15 = (WTF *)((char *)v15 + 8);
    v16 -= 8;
  }
  while (v16);
  v11 = v64;
  if (v64 <= v14)
    goto LABEL_48;
  if (v13 > v14)
  {
    v22 = (WTF::StringImpl **)((char *)v12 + 16 * v14);
    v23 = 16 * v13 - 16 * v14;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v10);
        else
          *(_DWORD *)v24 -= 2;
      }
      v22 += 2;
      v23 -= 16;
    }
    while (v23);
    v13 = v14;
  }
  if (!v14)
  {
    v26 = v12;
    goto LABEL_45;
  }
  if (v14 >> 28)
    goto LABEL_109;
  v25 = WTF::fastMalloc((WTF *)(16 * v14));
  v26 = (WTF *)v25;
  if (v13 && (WTF *)v25 != v12)
  {
    v27 = 0;
    do
    {
      v28 = (char *)v26 + v27;
      v29 = (_QWORD *)((char *)v12 + v27);
      v30 = *(_QWORD *)((char *)v12 + v27);
      *v29 = 0;
      *(_QWORD *)v28 = v30;
      *((_DWORD *)v28 + 2) = *(_DWORD *)((char *)v12 + v27 + 8);
      v31 = *(WTF::StringImpl **)((char *)v12 + v27);
      *v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v10);
        else
          *(_DWORD *)v31 -= 2;
      }
      v27 += 16;
    }
    while (v29 + 2 != (_QWORD *)((char *)v12 + 16 * v13));
  }
  v11 = v14;
LABEL_45:
  if (v26 == v12)
  {
    v26 = 0;
    v11 = 0;
  }
  WTF::fastFree(v12, v10);
  v12 = v26;
LABEL_48:
  v71 = v12;
  v72 = __PAIR64__(v13, v11);
  v73 = 0;
  v32 = v65[0];
  if (HIDWORD(v65[1]))
  {
    v62 = 8 * HIDWORD(v65[1]);
    do
    {
      v63 = *(WTF::StringImpl **)v32;
      *(_QWORD *)v32 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v10);
        else
          *(_DWORD *)v63 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v62 -= 8;
    }
    while (v62);
    v32 = v65[0];
    if (v65[0])
      goto LABEL_101;
  }
  else
  {
    if (!v65[0])
      goto LABEL_50;
LABEL_101:
    v65[0] = 0;
    LODWORD(v65[1]) = 0;
    WTF::fastFree(v32, v10);
  }
LABEL_50:
  v9 = v73;
LABEL_51:
  v33 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)v65 = v33;
  v34 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v66 = v34;
  if (!v9)
  {
    v39 = v71;
    v40 = v72;
    v41 = HIDWORD(v72);
    v71 = 0;
    v72 = 0;
    if (!(_DWORD)v41)
    {
LABEL_66:
      v67 = v39;
      v68 = __PAIR64__(v41, v40);
      v69 = 0;
      goto LABEL_67;
    }
    v42 = (unint64_t)v39;
    while (1)
    {
      WTF::String::isolatedCopy();
      LODWORD(v77) = *(_DWORD *)(v42 + 8);
      v44 = v76;
      v76 = 0;
      v45 = *(WTF::StringImpl **)v42;
      *(_QWORD *)v42 = v44;
      if (v45)
      {
        v46 = *(_DWORD *)v45 - 2;
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::destroy(v45, v43);
          v45 = v76;
          *(_DWORD *)(v42 + 8) = v77;
          v76 = 0;
          if (!v45)
            goto LABEL_61;
          v46 = *(_DWORD *)v45 - 2;
          if (*(_DWORD *)v45 == 2)
          {
            WTF::StringImpl::destroy(v45, v47);
            goto LABEL_61;
          }
        }
        *(_DWORD *)v45 = v46;
      }
LABEL_61:
      v42 += 16;
      if (v42 >= (unint64_t)v39 + 16 * v41)
        goto LABEL_66;
    }
  }
  if (v9 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_109;
  }
  v35 = (char)v71;
  v74[0] = (char)v71;
  v36 = (WTF::StringImpl *)v72;
  v72 = 0;
  v75 = v36;
  WTF::String::isolatedCopy();
  LOBYTE(v76) = v35;
  LOBYTE(v67) = v35;
  v68 = v77;
  v69 = 1;
  v77 = 0;
  v38 = v75;
  v75 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_67:
  WTF::String::isolatedCopy();
  v48 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v48 = &off_1E3355108;
  *(WTF **)(v48 + 8) = v65[0];
  v49 = v65[1];
  v65[0] = 0;
  v65[1] = 0;
  *(_QWORD *)(v48 + 16) = v49;
  v50 = v66;
  v66 = 0;
  *(_QWORD *)(v48 + 24) = v50;
  *(_BYTE *)(v48 + 32) = 0;
  *(_DWORD *)(v48 + 48) = -1;
  v51 = v69;
  if (v69 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))off_1E3355130[v69])(&v76, v48 + 32, &v67);
    *(_DWORD *)(v48 + 48) = v51;
  }
  v52 = v70;
  v70 = 0;
  *(_QWORD *)(v48 + 56) = v52;
  v76 = (WTF::StringImpl *)v48;
  WTF::callOnMainThread();
  v54 = v76;
  v76 = 0;
  if (v54)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v54 + 8))(v54);
  v55 = v70;
  v70 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v53);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (v69 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E3355120[v69])(v74, &v67);
  v69 = -1;
  v56 = v66;
  v66 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = v65[1];
  v65[1] = 0;
  if (v57)
  {
    v58 = *((unsigned __int8 *)v57 + 274);
    if (*((_BYTE *)v57 + 274))
    {
      if (v58 == 1)
      {
        if (*((_DWORD *)v57 + 78) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v57 + 40))(v57);
        else
          --*((_DWORD *)v57 + 78);
      }
      else if (v58 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v57 + 78);
      }
    }
    else if (*((_DWORD *)v57 - 42) == 2)
    {
      if ((*((_WORD *)v57 - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WTF *)((char *)v57 - 192), v53);
    }
    else
    {
      *((_DWORD *)v57 - 42) -= 2;
    }
  }
  result = v65[0];
  v65[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(result, v53);
      result = (WTF *)bmalloc::api::isoDeallocate(v60, v61);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  if (v73 != -1)
    return (WTF *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3355120[v73])(v65, &v71);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::DOMFileSystem *v8;
  bmalloc::api *v10;
  void *v11;
  char v12;

  *(_QWORD *)a1 = &off_1E3355108;
  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3355120[v4])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 274);
    if (*(_BYTE *)(v6 + 274))
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(v6 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        else
          --*(_DWORD *)(v6 + 312);
      }
      else if (v7 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
      }
    }
    else if (*(_DWORD *)(v6 - 168) == 2)
    {
      if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v6 - 168) -= 2;
    }
  }
  v8 = *(WebCore::DOMFileSystem **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v8, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::DOMFileSystem *v8;
  bmalloc::api *v10;
  void *v11;
  char v12;

  *(_QWORD *)this = &off_1E3355108;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3355120[v4])(&v12, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 274);
    if (*(_BYTE *)(v6 + 274))
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(v6 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        else
          --*(_DWORD *)(v6 + 312);
      }
      else if (v7 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
      }
    }
    else if (*(_DWORD *)(v6 - 168) == 2)
    {
      if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v6 - 168) -= 2;
    }
  }
  v8 = (WebCore::DOMFileSystem *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v8, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::listDirectory(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  WebCore::ContextDestructionObserver *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WTF::String *v30;
  WTF::StringImpl *v31;
  uint64_t (**v32)(WebCore::ContextDestructionObserver *__hidden);
  WebCore::ContextDestructionObserver *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const WTF::String *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char *v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  char *v47;
  unsigned int v48;
  WTF *v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD **v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t result;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;

  v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    if (v3 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
      v58 = 0;
LABEL_110:
      __break(0xC471u);
      JUMPOUT(0x195317218);
    }
    v4 = *(_BYTE *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    LOBYTE(v59) = v4;
    v60 = v5;
    v61 = 1;
    goto LABEL_103;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v56 = 0;
  v57 = 0;
  v8 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
LABEL_112:
      JUMPOUT(0x1953171E8);
    }
    v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v57) = v8;
    v56 = v9;
    v10 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = v11 + 16 * v10;
      while (1)
      {
        v13 = *(WTF::StringImpl **)(a1 + 56);
        if (v13)
          *(_DWORD *)v13 += 2;
        v14 = *(_QWORD *)v11;
        if (*(_QWORD *)v11)
          *(_DWORD *)v14 += 2;
        if (v13)
        {
          v15 = *((_DWORD *)v13 + 1);
          if (!v14)
            goto LABEL_78;
        }
        else
        {
          v15 = 0;
          if (!v14)
          {
LABEL_78:
            v16 = 0;
            goto LABEL_15;
          }
        }
        v16 = *(_DWORD *)(v14 + 4);
        if (v16 < 0)
          goto LABEL_109;
LABEL_15:
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        v19 = v17;
        if (v15 < 0)
          goto LABEL_109;
        if ((v19 & 1) != 0)
          goto LABEL_109;
        v20 = (v15 + v18);
        if (__OFADD__(v15, v18))
          goto LABEL_109;
        if (v13)
        {
          v21 = *((_DWORD *)v13 + 4);
          v22 = (v21 >> 2) & 1;
          if (v14 && (v21 & 4) != 0)
LABEL_24:
            v22 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, v22, (uint64_t)v13, 47, v14, &v58);
          if (!v58)
            goto LABEL_110;
          if (v14)
          {
            if (*(_DWORD *)v14 != 2)
            {
              *(_DWORD *)v14 -= 2;
              goto LABEL_29;
            }
            WTF::StringImpl::destroy((WTF::StringImpl *)v14, a2);
            if (!v13)
              goto LABEL_32;
          }
          else
          {
LABEL_29:
            if (!v13)
              goto LABEL_32;
          }
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
          goto LABEL_32;
        }
        if (v14)
          goto LABEL_24;
        if ((v20 & 0x80000000) != 0)
          goto LABEL_109;
        WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
        v46 = v59;
        if (!v59)
          goto LABEL_109;
        v47 = (char *)(v59 + 5);
        *v59 = 2;
        v46[1] = v20;
        *((_QWORD *)v46 + 1) = v46 + 5;
        v46[4] = 4;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v47, 0, 47, 0);
        v58 = (WTF::StringImpl *)v46;
LABEL_32:
        v23 = *(_DWORD *)(v11 + 8);
        if (v23 == 1)
        {
          v33 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
          v25 = (uint64_t)v33;
          *((_QWORD *)v33 + 3) = 0;
          if (v6)
          {
            v34 = v6;
            if (!*(_BYTE *)(v6 + 274))
            {
              v35 = *(_QWORD *)(v6 + 512);
              v36 = v6 - 192;
              if (v35)
              {
                v37 = *(_QWORD *)(v35 + 8);
                v36 = v6 - 192;
                if (v37)
                  v36 = v37;
              }
              v34 = v36 + 192;
            }
          }
          else
          {
            v34 = 0;
          }
          *(_QWORD *)v33 = &off_1E33A18C0;
          *((_QWORD *)v33 + 1) = 0;
          WebCore::ContextDestructionObserver::observeContext(v33, (WebCore::ScriptExecutionContext *)v34);
          *(_QWORD *)v25 = &off_1E33A0540;
          *(_QWORD *)(v25 + 16) = 0;
          if (v34)
          {
            if (*(_BYTE *)(v34 + 278))
            {
              __break(0xC471u);
              JUMPOUT(0x195317208);
            }
            v62 = v25;
            WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v34 + 128), &v62, (uint64_t)&v59);
          }
          *(_DWORD *)(v25 + 32) = 1;
          *(_QWORD *)v25 = &off_1E3354FD0;
          ++*(_DWORD *)(v7 + 8);
          *(_QWORD *)(v25 + 40) = v7;
          WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v58, v38);
          v39 = v58;
          if (v58)
            *(_DWORD *)v58 += 2;
          *(_QWORD *)(v25 + 56) = v39;
          v32 = &off_1E3354F10;
LABEL_58:
          *(_QWORD *)v25 = v32;
          WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v25);
          goto LABEL_60;
        }
        if (!v23)
        {
          v24 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
          v25 = (uint64_t)v24;
          *((_QWORD *)v24 + 3) = 0;
          if (v6)
          {
            v26 = v6;
            if (!*(_BYTE *)(v6 + 274))
            {
              v27 = *(_QWORD *)(v6 + 512);
              v28 = v6 - 192;
              if (v27)
              {
                v29 = *(_QWORD *)(v27 + 8);
                v28 = v6 - 192;
                if (v29)
                  v28 = v29;
              }
              v26 = v28 + 192;
            }
          }
          else
          {
            v26 = 0;
          }
          *(_QWORD *)v24 = &off_1E33A18C0;
          *((_QWORD *)v24 + 1) = 0;
          WebCore::ContextDestructionObserver::observeContext(v24, (WebCore::ScriptExecutionContext *)v26);
          *(_QWORD *)v25 = &off_1E33A0540;
          *(_QWORD *)(v25 + 16) = 0;
          if (v26)
          {
            if (*(_BYTE *)(v26 + 278))
            {
              __break(0xC471u);
              goto LABEL_112;
            }
            v62 = v25;
            WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v26 + 128), &v62, (uint64_t)&v59);
          }
          *(_DWORD *)(v25 + 32) = 1;
          *(_QWORD *)v25 = &off_1E3354FD0;
          ++*(_DWORD *)(v7 + 8);
          *(_QWORD *)(v25 + 40) = v7;
          WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v58, v30);
          v31 = v58;
          if (v58)
            *(_DWORD *)v58 += 2;
          *(_QWORD *)(v25 + 56) = v31;
          v32 = &off_1E3355038;
          goto LABEL_58;
        }
        v25 = 0;
LABEL_60:
        v40 = v58;
        v58 = 0;
        if (!v40)
          goto LABEL_63;
        if (*(_DWORD *)v40 != 2)
        {
          *(_DWORD *)v40 -= 2;
LABEL_63:
          if (v25)
            goto LABEL_64;
          goto LABEL_70;
        }
        WTF::StringImpl::destroy(v40, a2);
        if (v25)
        {
LABEL_64:
          v59 = (_DWORD *)v25;
          LODWORD(v41) = HIDWORD(v57);
          if (HIDWORD(v57) == (_DWORD)v57)
          {
            v42 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v56, HIDWORD(v57) + 1, (unint64_t)&v59);
            v41 = HIDWORD(v57);
            v43 = v56;
            v44 = *(_QWORD *)v42;
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v43 + v41) = v44;
          }
          else
          {
            v59 = 0;
            *((_QWORD *)v56 + HIDWORD(v57)) = v25;
          }
          HIDWORD(v57) = v41 + 1;
          v45 = v59;
          v59 = 0;
          if (v45)
          {
            if (v45[8] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 16))(v45);
            else
              --v45[8];
          }
        }
LABEL_70:
        v11 += 16;
        if (v11 == v12)
        {
          LODWORD(v8) = v57;
          v48 = HIDWORD(v57);
          v49 = v56;
          v50 = HIDWORD(v57);
          goto LABEL_89;
        }
      }
    }
    v49 = v9;
  }
  else
  {
    v49 = 0;
  }
  v48 = 0;
  v50 = 0;
LABEL_89:
  if (v50 < v8)
  {
    if (v50 < v48)
    {
      v51 = v48;
      v52 = (_DWORD **)((char *)v49 + 8 * v50);
      v53 = 8 * v51 - 8 * v50;
      do
      {
        v54 = *v52;
        *v52 = 0;
        if (v54)
        {
          if (v54[8] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 16))(v54);
          else
            --v54[8];
        }
        ++v52;
        v53 -= 8;
      }
      while (v53);
      v48 = v50;
    }
    if (v50)
    {
      v49 = (WTF *)WTF::fastRealloc(v49, (void *)(8 * v50));
      LODWORD(v8) = v50;
    }
    else if (v49)
    {
      WTF::fastFree(v49, a2);
      LODWORD(v8) = 0;
      v49 = 0;
    }
  }
  v59 = v49;
  v60 = __PAIR64__(v48, v8);
  v61 = 0;
LABEL_103:
  result = (*(uint64_t (**)(_QWORD, _DWORD **))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), &v59);
  if (v61 != -1)
    return ((uint64_t (*)(WTF **, _DWORD **))off_1E3355090[v61])(&v56, &v59);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore11ListedChildELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore11ListedChildELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore11ListedChildELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore11ListedChildELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3355150;
  WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3355150;
  WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WebCore::DOMFileSystem *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::DOMFileSystem *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::DOMFileSystem *v18;
  int v19;
  WebCore::DOMFileSystem *result;
  bmalloc::api *v21;
  void *v22;
  WebCore::DOMFileSystem *v23[2];
  _BYTE v24[16];
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28[16];
  int v29;
  char v30;

  v3 = (WTF::FileSystemImpl *)(a1 + 24);
  if ((WTF::FileSystemImpl::isHiddenFile((WTF::FileSystemImpl *)(a1 + 24), a2) & 1) != 0
    || (v5 = WTF::FileSystemImpl::fileType(v3, v4), (v5 & 0xFF00000000) == 0))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 5;
  }
  else
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)v28 = v7;
      goto LABEL_7;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 13;
  }
  v28[0] = v8;
  v6 = 1;
LABEL_7:
  v29 = v6;
  v9 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)v23 = v9;
  WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::String>>::copy(v28, (uint64_t)v24);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v26 = v10;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v11 = &off_1E3355178;
  *(WebCore::DOMFileSystem **)(v11 + 8) = v23[0];
  v12 = v23[1];
  *(_OWORD *)v23 = 0u;
  *(_QWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 40) = -1;
  v13 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33551A0[v25])(&v27, v11 + 24, v24);
    *(_DWORD *)(v11 + 40) = v13;
  }
  v14 = v26;
  v26 = 0;
  *(_QWORD *)(v11 + 48) = v14;
  v27 = v11;
  WTF::callOnMainThread();
  v16 = v27;
  v27 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v26;
  v26 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v25 != -1)
    ((void (*)(char *, _BYTE *))off_1E3355190[v25])(&v30, v24);
  v25 = -1;
  v18 = v23[1];
  v23[1] = 0;
  if (v18)
  {
    v19 = *((unsigned __int8 *)v18 + 274);
    if (*((_BYTE *)v18 + 274))
    {
      if (v19 == 1)
      {
        if (*((_DWORD *)v18 + 78) == 1)
          (*(void (**)(WebCore::DOMFileSystem *))(*(_QWORD *)v18 + 40))(v18);
        else
          --*((_DWORD *)v18 + 78);
      }
      else if (v19 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v18 + 78);
      }
    }
    else if (*((_DWORD *)v18 - 42) == 2)
    {
      if ((*((_WORD *)v18 - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::DOMFileSystem *)((char *)v18 - 192), v15);
    }
    else
    {
      *((_DWORD *)v18 - 42) -= 2;
    }
  }
  result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(result, (WTF::StringImpl *)v15);
      result = (WebCore::DOMFileSystem *)bmalloc::api::isoDeallocate(v21, v22);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  if (v29 != -1)
    return (WebCore::DOMFileSystem *)((uint64_t (*)(WebCore::DOMFileSystem **, char *))off_1E3355190[v29])(v23, v28);
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::String>>::copy@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    v8 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    v10 = v8;
    WTF::String::isolatedCopy();
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 16) = 0;
    result = v10;
    if (!v10)
      return result;
    goto LABEL_6;
  }
  if (v3 != 1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v9);
  }
  v4 = *a1;
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  v11 = v5;
  WTF::String::isolatedCopy();
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 16) = 1;
  result = v11;
  if (v11)
  {
LABEL_6:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::DOMFileSystem *v7;
  bmalloc::api *v9;
  void *v10;
  char v11;

  *(_QWORD *)a1 = &off_1E3355178;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3355190[v4])(&v11, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = *(WebCore::DOMFileSystem **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v7, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::DOMFileSystem *v7;
  bmalloc::api *v9;
  void *v10;
  char v11;

  *(_QWORD *)this = &off_1E3355178;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3355190[v4])(&v11, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = (WebCore::DOMFileSystem *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v7, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::ContextDestructionObserver *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  int v22;
  uint64_t v23;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *(_BYTE *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      LOBYTE(v21[0]) = v3;
      v21[1] = v4;
      v22 = 1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v21);
      if (v22 != -1)
        ((void (*)(uint64_t *, _QWORD *))off_1E33551B0[v22])(&v23, v21);
    }
    else
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(v17, v18, v19);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v7 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v20 = v7;
    v8 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v9 = (uint64_t)v8;
    *((_QWORD *)v8 + 3) = 0;
    if (v5 && !*(_BYTE *)(v5 + 274))
    {
      v10 = v5 - 192;
      v11 = *(_QWORD *)(v5 + 512);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v5 = v10 + 192;
    }
    *(_QWORD *)v8 = &off_1E33A18C0;
    *((_QWORD *)v8 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v8, (WebCore::ScriptExecutionContext *)v5);
    *(_QWORD *)v9 = &off_1E33A0540;
    *(_QWORD *)(v9 + 16) = 0;
    if (v5)
    {
      if (*(_BYTE *)(v5 + 278))
      {
        __break(0xC471u);
        JUMPOUT(0x195317B08);
      }
      v23 = v9;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v5 + 128), &v23, (uint64_t)v21);
    }
    *(_DWORD *)(v9 + 32) = 1;
    *(_QWORD *)v9 = &off_1E3354FD0;
    ++*(_DWORD *)(v6 + 8);
    *(_QWORD *)(v9 + 40) = v6;
    WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v20, v13);
    v14 = v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    *(_QWORD *)(v9 + 56) = v14;
    *(_QWORD *)v9 = &off_1E3354F10;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
    v21[0] = v9;
    v22 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v21);
    if (v22 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E33551B0[v22])(&v23, v21);
    v22 = -1;
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore24FileSystemDirectoryEntryENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[8] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[8];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore24FileSystemDirectoryEntryENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33551D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33551D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3[0] = 13;
  v4 = 1;
  result = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33550A0[v4])(&v5, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33551F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33551F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3[0] = 14;
  v4 = 1;
  result = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33550A0[v4])(&v5, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  *a1 = &off_1E3355220;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = &off_1E3355220;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v3[2];
  int v4;
  char v5;

  WebCore::DOMFileSystem::root(*(WebCore::DOMFileSystem **)(a1 + 8), *(WebCore::ScriptExecutionContext **)(a1 + 16), v3);
  v4 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E33550A0[v4])(&v5, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_3,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3355248;
  WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_3,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3355248;
  WebCore::DOMFileSystem::getParent(WebCore::ScriptExecutionContext &,WebCore::FileSystemEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::FileSystemDirectoryEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryEntry>>> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_3,void>::call(uint64_t a1, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::DOMFileSystem *v10[2];
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (WTF::FileSystemImpl *)(a1 + 24);
  if ((WTF::FileSystemImpl::isHiddenFile((WTF::FileSystemImpl *)(a1 + 24), a2) & 1) != 0)
    v5 = 0;
  else
    v5 = WTF::FileSystemImpl::fileType(v3, v4);
  v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)v10 = v6;
  WTF::String::isolatedCopy();
  BYTE4(v12) = BYTE4(v5);
  LODWORD(v12) = v5;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v13 = v7;
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = &off_1E3355270;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)v10;
  *(_QWORD *)(v8 + 24) = v11;
  *(_QWORD *)(v8 + 32) = v12;
  *(_QWORD *)(v8 + 40) = v13;
  v14 = v8;
  WTF::callOnMainThread();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_3::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WebCore::DOMFileSystem *v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3355270;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = (WebCore::DOMFileSystem *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v7, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_3::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WebCore::DOMFileSystem *v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E3355270;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = (WebCore::DOMFileSystem *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem(v7, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getEntry(WebCore::ScriptExecutionContext &,WebCore::FileSystemDirectoryEntry &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>> &&)> &&)::$_3::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ContextDestructionObserver *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::String *v10;
  _DWORD *v11;
  uint64_t (**v12)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v13;
  uint64_t v14;
  WebCore::ContextDestructionObserver *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::String *v19;
  _DWORD *v20;
  uint64_t result;
  _QWORD v22[2];
  int v23;
  uint64_t v24;

  if (!*(_BYTE *)(a1 + 36))
    goto LABEL_16;
  v2 = *(_DWORD *)(a1 + 32);
  if (!v2)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v15 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v6 = (uint64_t)v15;
    *((_QWORD *)v15 + 3) = 0;
    if (v13 && !*(_BYTE *)(v13 + 274))
    {
      v16 = v13 - 192;
      v17 = *(_QWORD *)(v13 + 512);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
          v16 = v18;
      }
      v13 = v16 + 192;
    }
    *(_QWORD *)v15 = &off_1E33A18C0;
    *((_QWORD *)v15 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v15, (WebCore::ScriptExecutionContext *)v13);
    *(_QWORD *)v6 = &off_1E33A0540;
    *(_QWORD *)(v6 + 16) = 0;
    if (v13)
    {
      if (*(_BYTE *)(v13 + 278))
      {
        __break(0xC471u);
        JUMPOUT(0x195318670);
      }
      v24 = v6;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v13 + 128), &v24, (uint64_t)v22);
    }
    *(_DWORD *)(v6 + 32) = 1;
    *(_QWORD *)v6 = &off_1E3354FD0;
    ++*(_DWORD *)(v14 + 8);
    *(_QWORD *)(v6 + 40) = v14;
    WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)(a1 + 24), v19);
    v20 = *(_DWORD **)(a1 + 24);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v6 + 56) = v20;
    v12 = &off_1E3355038;
    goto LABEL_29;
  }
  if (v2 != 1)
  {
LABEL_16:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22[0]) = 5;
    v23 = 1;
    goto LABEL_30;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v6 = (uint64_t)v5;
  *((_QWORD *)v5 + 3) = 0;
  if (v3 && !*(_BYTE *)(v3 + 274))
  {
    v7 = v3 - 192;
    v8 = *(_QWORD *)(v3 + 512);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v7 = v9;
    }
    v3 = v7 + 192;
  }
  *(_QWORD *)v5 = &off_1E33A18C0;
  *((_QWORD *)v5 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v5, (WebCore::ScriptExecutionContext *)v3);
  *(_QWORD *)v6 = &off_1E33A0540;
  *(_QWORD *)(v6 + 16) = 0;
  if (v3)
  {
    if (*(_BYTE *)(v3 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195318650);
    }
    v24 = v6;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v3 + 128), &v24, (uint64_t)v22);
  }
  *(_DWORD *)(v6 + 32) = 1;
  *(_QWORD *)v6 = &off_1E3354FD0;
  ++*(_DWORD *)(v4 + 8);
  *(_QWORD *)(v6 + 40) = v4;
  WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)(a1 + 24), v10);
  v11 = *(_DWORD **)(a1 + 24);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v6 + 56) = v11;
  v12 = &off_1E3354F10;
LABEL_29:
  *(_QWORD *)v6 = v12;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6);
  v22[0] = v6;
  v23 = 0;
LABEL_30:
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v22);
  if (v23 != -1)
    return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E33550A0[v23])(&v24, v22);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getFile(WebCore::ScriptExecutionContext &,WebCore::FileSystemFileEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  *a1 = &off_1E3355298;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getFile(WebCore::ScriptExecutionContext &,WebCore::FileSystemFileEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = &off_1E3355298;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getFile(WebCore::ScriptExecutionContext &,WebCore::FileSystemFileEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  uint64_t v5;
  char v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *result;
  uint64_t v19;
  WTF::StringImpl *v20;
  _BYTE v21[16];
  int v22;
  __int128 v23;
  uint64_t v24;
  char v25[16];
  int v26;
  char v27;

  v3 = (WTF::FileSystemImpl *)(a1 + 8);
  if ((WTF::FileSystemImpl::isHiddenFile((WTF::FileSystemImpl *)(a1 + 8), a2) & 1) != 0
    || (v5 = WTF::FileSystemImpl::fileType(v3, v4), (v5 & 0xFF00000000) == 0))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 5;
    goto LABEL_6;
  }
  if ((_DWORD)v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 13;
LABEL_6:
    v25[0] = v6;
    v7 = 1;
    goto LABEL_7;
  }
  v7 = 0;
  v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)v25 = v19;
LABEL_7:
  v26 = v7;
  WTF::String::isolatedCopy();
  WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::String>>::copy(v25, (uint64_t)v21);
  v8 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v23 = v8;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v9 = &off_1E33552C0;
  v10 = v20;
  v20 = 0;
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = -1;
  v11 = v22;
  if (v22 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33551A0[v22])(&v24, v9 + 16, v21);
    *(_DWORD *)(v9 + 32) = v11;
  }
  *(_QWORD *)(v9 + 40) = v23;
  v12 = *((_QWORD *)&v23 + 1);
  v23 = 0uLL;
  *(_QWORD *)(v9 + 48) = v12;
  v24 = v9;
  WTF::callOnMainThread();
  v14 = v24;
  v24 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)&v23 + 1);
  *((_QWORD *)&v23 + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v23;
  *(_QWORD *)&v23 = 0;
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v16 + 274);
    if (*(_BYTE *)(v16 + 274))
    {
      if (v17 == 1)
      {
        if (*(_DWORD *)(v16 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
        else
          --*(_DWORD *)(v16 + 312);
      }
      else if (v17 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v16 + 312));
      }
    }
    else if (*(_DWORD *)(v16 - 168) == 2)
    {
      if ((*(_WORD *)(v16 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v16 - 192), v13);
    }
    else
    {
      *(_DWORD *)(v16 - 168) -= 2;
    }
  }
  if (v22 != -1)
    ((void (*)(char *, _BYTE *))off_1E3355190[v22])(&v27, v21);
  v22 = -1;
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)result -= 2;
  }
  if (v26 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, char *))off_1E3355190[v26])(&v20, v25);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getFile(WebCore::ScriptExecutionContext &,WebCore::FileSystemFileEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v9;

  *(_QWORD *)a1 = &off_1E33552C0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_1E3355190[v6])(&v9, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getFile(WebCore::ScriptExecutionContext &,WebCore::FileSystemFileEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v9;

  *(_QWORD *)this = &off_1E33552C0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E3355190[v6])(&v9, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DOMFileSystem::getFile(WebCore::ScriptExecutionContext &,WebCore::FileSystemFileEntry &,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  int v2;
  char v3;
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  _BYTE v13[16];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _QWORD v17[2];
  int v18;
  char v19;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *(_BYTE *)(a1 + 16);
      v4 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      LOBYTE(v17[0]) = v3;
      v17[1] = v4;
      v18 = 1;
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v17);
      if (v18 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _QWORD *))off_1E33550B0[v18])(v13, v17);
    }
    else
    {
      v12 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::ErrorCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(v12);
    }
  }
  else
  {
    v6 = (WTF::StringImpl **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 40);
    v14 = 0;
    v15 = 0;
    v13[0] = 0;
    v13[8] = 0;
    WebCore::File::create(&v14, v7, v6, &v15, (WTF::String *)v13, (uint64_t *)&v16);
    v8 = (uint64_t)v16;
    v16 = 0;
    v17[0] = v8;
    v18 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v17);
    if (v18 != -1)
      ((void (*)(char *, _QWORD *))off_1E33550B0[v18])(&v19, v17);
    v18 = -1;
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[4];
    }
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ErrorCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E33552E8;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ErrorCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33552E8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ErrorCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 32) == 1)
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v5 = *(WTF::StringImpl **)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v6 = *(_DWORD **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v6)
      {
        if (v6[8] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[8];
      }
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v3, a2);
      v8 = *(_QWORD *)(v3 + 24);
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        *(_QWORD *)(v3 + 24) = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, v7);
    }
    else
    {
      --*(_DWORD *)(v3 + 32);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryEntry::getEntry(WebCore::ScriptExecutionContext &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<BOOL ()(WebCore::FileSystemEntry const&)> &&,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::Function<BOOL ()(WebCore::FileSystemEntry const&)> &&<WebCore::ErrorCallback,WebCore::FileSystemEntryCallback<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WebCore::FileSystemEntryCallback<WebCore::FileSystemEntry>,WTF::RawPtrTraits<WTF::RefPtr><WebCore::FileSystemEntry>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v8;

  *a1 = &off_1E3355310;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = *((_QWORD *)v6 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v6 + 1) = 0;
      if (*(_DWORD *)(v8 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 32);
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryEntry::getEntry(WebCore::ScriptExecutionContext &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<BOOL ()(WebCore::FileSystemEntry const&)> &&,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::Function<BOOL ()(WebCore::FileSystemEntry const&)> &&<WebCore::ErrorCallback,WebCore::FileSystemEntryCallback<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WebCore::FileSystemEntryCallback<WebCore::FileSystemEntry>,WTF::RawPtrTraits<WTF::RefPtr><WebCore::FileSystemEntry>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v8;

  *(_QWORD *)this = &off_1E3355310;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = *((_QWORD *)v6 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v6 + 1) = 0;
      if (*(_DWORD *)(v8 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 32);
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryEntry::getEntry(WebCore::ScriptExecutionContext &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::Function<BOOL ()(WebCore::FileSystemEntry const&)> &&,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::Function<BOOL ()(WebCore::FileSystemEntry const&)> &&<WebCore::ErrorCallback,WebCore::FileSystemEntryCallback<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemEntry,WebCore::FileSystemEntryCallback<WebCore::FileSystemEntry>,WTF::RawPtrTraits<WTF::RefPtr><WebCore::FileSystemEntry>>> &&>::call(uint64_t result, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1953194BCLL);
    }
    v6 = 0;
    v7 = v5 - 288;
    *(_DWORD *)(v5 - 264) += 2;
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  if (*((_DWORD *)a2 + 4))
  {
    if (v7 && *(_QWORD *)(result + 40))
    {
      v8 = WebCore::Document::eventLoop((WebCore::Document *)v7, a2);
      v9 = v3[5];
      v3[5] = 0;
      if (*((_DWORD *)a2 + 4) != 1)
      {
        v26 = std::__throw_bad_variant_access[abi:sn180100]();
        return _ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE_vJEED1Ev(v26);
      }
      v10 = v8;
      v11 = *(_BYTE *)a2;
      v12 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v13 = v3[2];
      v3[2] = 0;
      v14 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v14 = &off_1E3355338;
      *(_QWORD *)(v14 + 8) = v9;
      *(_BYTE *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v12;
      *(_QWORD *)(v14 + 32) = v13;
      v27 = (_QWORD *)v14;
      v15 = v10;
      goto LABEL_15;
    }
  }
  else
  {
    v16 = *(_DWORD **)a2;
    *(_QWORD *)a2 = 0;
    result = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v16);
    if ((result & 1) != 0)
    {
      if (v7 && v3[4])
      {
        v17 = WebCore::Document::eventLoop((WebCore::Document *)v7, a2);
        v18 = v3[4];
        v3[4] = 0;
        v19 = v3[2];
        v3[2] = 0;
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v20 = &off_1E3355388;
        v20[1] = v18;
        v20[2] = v16;
        v20[3] = v19;
        v27 = v20;
        v15 = v17;
LABEL_15:
        WebCore::EventLoopTaskGroup::queueTask(v15, 11, (uint64_t *)&v27);
        result = (uint64_t)v27;
        v27 = 0;
        if (!result)
          goto LABEL_25;
        v21 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
        goto LABEL_17;
      }
    }
    else if (v7)
    {
      if (v3[5])
      {
        v22 = WebCore::Document::eventLoop((WebCore::Document *)v7, a2);
        v23 = v3[5];
        v3[5] = 0;
        v24 = v3[2];
        v3[2] = 0;
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v25 = &off_1E3355360;
        v25[1] = v23;
        v25[2] = v24;
        v27 = v25;
        WebCore::EventLoopTaskGroup::queueTask(v22, 11, (uint64_t *)&v27);
        result = (uint64_t)v27;
        v27 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    if (v16)
    {
      if (v16[8] == 1)
      {
        v21 = *(uint64_t (**)(void))(*(_QWORD *)v16 + 16);
LABEL_17:
        result = v21();
        goto LABEL_25;
      }
      --v16[8];
    }
  }
LABEL_25:
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E3355338;
  v3 = (WTF *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3355338;
  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  _DWORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  WebCore::DOMException::create((unsigned __int8 *)(a1 + 16), (uint64_t *)&v3);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v1 + 40))(v1, v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE0_vJEED1Ev(_QWORD *a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;

  *a1 = &off_1E3355360;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v6 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3355360;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v6 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE0_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  unsigned __int8 v5[8];
  WTF::StringImpl *v6;
  _DWORD *v7;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 13;
  WebCore::DOMException::create(v5, (uint64_t *)&v7);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v1 + 40))(v1, v7);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE1_vJEED1Ev(_QWORD *a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E3355388;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[8];
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE1_vJEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3355388;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[8];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore24FileSystemDirectoryEntry8getEntryERNS2_22ScriptExecutionContextERKNS_6StringERKNS3_5FlagsEONS_8FunctionIFbRKNS2_15FileSystemEntryEEEEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEONSJ_INS2_13ErrorCallbackENSL_ISR_EENSN_ISR_EEEEEN3__0clINS2_11ExceptionOrINS_3RefISD_NSL_ISD_EENSN_ISD_EEEEEEEEDaOT_EUlvE1_vJEE4callEv(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryEntry::getFile(WebCore::ScriptExecutionContext &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>> &&)::$_0,BOOL,WebCore::FileSystemEntry const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryEntry::getDirectory(WebCore::ScriptExecutionContext &,WTF::String const&,WebCore::FileSystemDirectoryEntry::Flags const&,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>> &&)::$_0,BOOL,WebCore::FileSystemEntry const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  void *v9;

  *a1 = &off_1E3355410;
  v3 = (uint64_t *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 274);
    if (*(_BYTE *)(v6 + 274))
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(v6 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        else
          --*(_DWORD *)(v6 + 312);
      }
      else if (v7 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
      }
    }
    else if (*(_DWORD *)(v6 - 168) == 2)
    {
      if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v6 - 168) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  void *v9;

  *(_QWORD *)this = &off_1E3355410;
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 274);
    if (*(_BYTE *)(v6 + 274))
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(v6 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        else
          --*(_DWORD *)(v6 + 312);
      }
      else if (v7 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
      }
    }
    else if (*(_DWORD *)(v6 - 168) == 2)
    {
      if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v6 - 168) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  const WTF::StringImpl *v11;
  char *v12;
  uint64_t v13;
  WebCore::DOMFileSystem *v14;
  uint64_t v15;
  WebCore::DOMFileSystem *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::DOMFileSystem *v28;
  int v29;
  WebCore::DOMFileSystem *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  bmalloc::api *v33;
  void *v34;
  __int128 v35;
  WebCore::DOMFileSystem *v36[2];
  WTF::StringImpl *v37[2];
  WTF::StringImpl *v38;
  WebCore::DOMFileSystem *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 72) = 0;
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(char **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 40);
  v35 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = &off_1E3355438;
  *((_QWORD *)v6 + 1) = v1;
  *((_OWORD *)v6 + 1) = v35;
  *((_QWORD *)v6 + 4) = v5;
  v7 = *(_QWORD *)(v2 + 56);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)v7 += 2;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = ((unint64_t)*(unsigned int *)(v7 + 16) >> 2) & 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v10 = 1;
  }
  v42 = (WTF::StringImpl *)v7;
  WebCore::DOMFileSystem::evaluatePath((uint64_t)&v41, v3, v9, v8 | (v10 << 32));
  if (WTF::equal(v41, *(const WTF::StringImpl **)(v3 + 32), v11))
  {
    v39 = 0;
    v40 = 0;
    WebCore::DOMFileSystem::fileAsEntry((WebCore::DOMFileSystem *)v3, (WebCore::ScriptExecutionContext *)v4, (uint64_t *)v36);
    v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v39, 1uLL, (unint64_t)v36);
    v13 = HIDWORD(v40);
    v14 = v39;
    v15 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v14 + v13) = v15;
    v16 = v36[0];
    v17 = v13 + 1;
    v36[0] = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 8) == 1)
        (*(void (**)(WebCore::DOMFileSystem *))(*(_QWORD *)v16 + 16))(v16);
      else
        --*((_DWORD *)v16 + 8);
    }
    v36[0] = v14;
    v36[1] = (WebCore::DOMFileSystem *)__PAIR64__(v17, v40);
    LODWORD(v37[0]) = 0;
    (*(void (**)(WTF::StringImpl *, WebCore::DOMFileSystem **))(*(_QWORD *)v6 + 16))(v6, v36);
    if (LODWORD(v37[0]) != -1)
      ((void (*)(char *, WebCore::DOMFileSystem **))off_1E3355090[LODWORD(v37[0])])(&v43, v36);
  }
  else
  {
    v19 = *(_QWORD *)(v3 + 40);
    ++*(_DWORD *)(v3 + 8);
    v36[0] = (WebCore::DOMFileSystem *)v3;
    v20 = v4[274];
    if (v20 <= 2)
      *(_DWORD *)&v4[qword_1968DDFB0[v20]] += dword_1968DDFC8[v20];
    v36[1] = (WebCore::DOMFileSystem *)v4;
    v37[0] = v6;
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v21 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v21 = off_1E33550E0;
    *(WebCore::DOMFileSystem **)(v21 + 8) = v36[0];
    *(WebCore::DOMFileSystem **)(v21 + 16) = v36[1];
    *(WTF::StringImpl **)(v21 + 24) = v37[0];
    v22 = v37[1];
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)v37 = 0u;
    *(_QWORD *)(v21 + 32) = v22;
    v23 = v38;
    v38 = 0;
    v39 = (WebCore::DOMFileSystem *)v21;
    *(_QWORD *)(v21 + 40) = v23;
    (*(void (**)(uint64_t, WebCore::DOMFileSystem **))(*(_QWORD *)v19 + 32))(v19, &v39);
    v24 = (char *)v39;
    v39 = 0;
    if (v24)
      (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
    v25 = v38;
    v38 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v37[1];
    v37[1] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v18);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v37[0];
    v37[0] = 0;
    if (v27)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
    v28 = v36[1];
    v36[1] = 0;
    if (v28)
    {
      v29 = *((unsigned __int8 *)v28 + 274);
      if (*((_BYTE *)v28 + 274))
      {
        if (v29 == 1)
        {
          if (*((_DWORD *)v28 + 78) == 1)
            (*(void (**)(WebCore::DOMFileSystem *))(*(_QWORD *)v28 + 40))(v28);
          else
            --*((_DWORD *)v28 + 78);
        }
        else if (v29 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v28 + 78);
        }
      }
      else if (*((_DWORD *)v28 - 42) == 2)
      {
        if ((*((_WORD *)v28 - 81) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::DOMFileSystem *)((char *)v28 - 192), v18);
      }
      else
      {
        *((_DWORD *)v28 - 42) -= 2;
      }
    }
    v30 = v36[0];
    v36[0] = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1)
      {
        WebCore::DOMFileSystem::~DOMFileSystem(v30, v18);
        bmalloc::api::isoDeallocate(v33, v34);
      }
      else
      {
        --*((_DWORD *)v30 + 2);
      }
    }
    v6 = 0;
  }
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v18);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      if (v6)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
      return result;
    }
    *(_DWORD *)result -= 2;
  }
  if (v6)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1},void,WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  _DWORD *v5;
  void *v7;

  *a1 = &off_1E3355438;
  v3 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1},void,WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  _DWORD *v5;
  void *v7;

  *(_QWORD *)this = &off_1E3355438;
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1},void,WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(unsigned int *result, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  __int128 v23;
  unsigned int *v24;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if (*(_BYTE *)(v6 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19531A4F0);
    }
    v7 = v6 - 288;
    *(_DWORD *)(v6 - 264) += 2;
    v8 = *((_DWORD *)a2 + 4);
    if (!v8)
    {
      *(_BYTE *)(v4 + 73) = 1;
      v15 = WebCore::Document::eventLoop((WebCore::Document *)v7, (WTF::StringImpl *)a2);
      v16 = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      v17 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (!*((_DWORD *)a2 + 4))
      {
        v18 = v15;
        v19 = *a2;
        v20 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v21 = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v21 = off_1E3355488;
        *((_QWORD *)v21 + 1) = v16;
        *((_QWORD *)v21 + 2) = v17;
        *((_QWORD *)v21 + 3) = v19;
        *((_QWORD *)v21 + 4) = v20;
        v24 = v21;
        WebCore::EventLoopTaskGroup::queueTask(v18, 11, (uint64_t *)&v24);
        result = v24;
        v24 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_19;
      }
LABEL_30:
      v22 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#1},void>::~CallableWrapper(v22);
    }
    v9 = 0;
  }
  else
  {
    v8 = *((_DWORD *)a2 + 4);
    v9 = 1;
    if (!v8)
    {
      *(_BYTE *)(v4 + 73) = 1;
      return result;
    }
    v7 = 0;
  }
  if (v8 != 1)
    goto LABEL_30;
  v10 = *(_BYTE *)a2;
  v11 = a2[1];
  a2[1] = 0;
  v12 = *(unsigned __int8 *)(v4 + 64);
  *(_BYTE *)(v4 + 48) = v10;
  if (v12)
  {
    result = *(unsigned int **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = v11;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *result -= 2;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 56) = v11;
    *(_BYTE *)(v4 + 64) = 1;
  }
  if (*((_QWORD *)v3 + 3))
  {
    if (v7)
    {
      v13 = WebCore::Document::eventLoop((WebCore::Document *)v7, (WTF::StringImpl *)a2);
      v23 = *(_OWORD *)(v3 + 6);
      *((_QWORD *)v3 + 3) = 0;
      *((_QWORD *)v3 + 4) = 0;
      v14 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v14 = &off_1E3355460;
      *(_QWORD *)(v14 + 8) = v4;
      *(_OWORD *)(v14 + 16) = v23;
      v24 = (unsigned int *)v14;
      WebCore::EventLoopTaskGroup::queueTask(v13, 11, (uint64_t *)&v24);
      result = v24;
      v24 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if ((v9 & 1) == 0)
  {
LABEL_19:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  void *v6;

  *a1 = &off_1E3355460;
  v3 = (uint64_t *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  void *v6;

  *(_QWORD *)this = &off_1E3355460;
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#1},void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = result[1];
  if (*(_BYTE *)(v1 + 64))
  {
    v2 = result[2];
    WebCore::DOMException::create((unsigned __int8 *)(v1 + 48), (uint64_t *)&v3);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 40))(v2, v3);
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t *v8;
  _DWORD *v9;
  void *v11;

  *(_QWORD *)a1 = off_1E3355488;
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 24);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[8] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[8];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      --*(_QWORD *)(v8[1] + 16);
      WTF::Ref<WebCore::FileSystemDirectoryReader,WTF::RawPtrTraits<WebCore::FileSystemDirectoryReader>,WTF::DefaultRefDerefTraits<WebCore::FileSystemDirectoryReader>>::~Ref(v8 + 1, (WTF::StringImpl *)a2);
      WTF::fastFree((WTF *)v8, v11);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  return a1;
}

{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#2},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryReader::readEntries(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileSystemEntriesCallback,WTF::RawPtrTraits<WebCore::FileSystemEntriesCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntriesCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)#1}::operator()(WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemEntriesCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E33554B0;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 16);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[8] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[8];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemEntriesCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E33554B0;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[8] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[8];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemEntriesCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::Vector<WTF::Ref<WebCore::FileSystemEntry,WTF::RawPtrTraits<WebCore::FileSystemEntry>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemEntry::getParent(WebCore::ScriptExecutionContext &,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v7;

  *a1 = &off_1E33554E8;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (WTF *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v5 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemEntry::getParent(WebCore::ScriptExecutionContext &,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E33554E8;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v5 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemEntry::getParent(WebCore::ScriptExecutionContext &,WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::FileSystemEntryCallback,WTF::RawPtrTraits<WebCore::FileSystemEntryCallback>,WTF::DefaultRefDerefTraits<WebCore::FileSystemEntryCallback>> &&>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemDirectoryEntry,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&>::call(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[16];
  int v20;
  WTF *v21;
  uint64_t v22;
  char v23;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        v5 = result;
        v6 = (_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) += 2;
        v7 = WebCore::Document::eventLoop((WebCore::Document *)(v3 - 288), (WTF::StringImpl *)a2);
        v8 = *(_OWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        v18 = v8;
        v19[0] = 0;
        v20 = -1;
        v9 = a2[4];
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E3355500[v9])(&v22, v19, a2);
          v20 = v9;
        }
        v10 = *(WTF **)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        v21 = v10;
        v11 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v11 = &off_1E3355520;
        *(_OWORD *)(v11 + 8) = v18;
        *(_BYTE *)(v11 + 24) = 0;
        *(_DWORD *)(v11 + 40) = -1;
        v12 = v20;
        if (v20 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3355500[v20])(&v22, v11 + 24, v19);
          *(_DWORD *)(v11 + 40) = v12;
        }
        v13 = v21;
        v21 = 0;
        v22 = v11;
        *(_QWORD *)(v11 + 48) = v13;
        WebCore::EventLoopTaskGroup::queueTask(v7, 11, &v22);
        v15 = v22;
        v22 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = v21;
        v21 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            v17 = *((_QWORD *)v16 + 1);
            --*(_QWORD *)(v17 + 16);
            *((_QWORD *)v16 + 1) = 0;
            if (*(_DWORD *)(v17 + 32) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
            else
              --*(_DWORD *)(v17 + 32);
            WTF::fastFree(v16, v14);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
        if (v20 != -1)
          ((void (*)(char *, _BYTE *))off_1E33551B0[v20])(&v23, v19);
        v20 = -1;
        result = 0;
        if (*v6 == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v14);
        }
        else
        {
          *v6 -= 2;
        }
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore24FileSystemDirectoryEntryENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore24FileSystemDirectoryEntryENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore15FileSystemEntry9getParentERNS2_22ScriptExecutionContextEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEONS6_INS2_13ErrorCallbackENS8_ISE_EENSA_ISE_EEEEEN3__0clINS2_11ExceptionOrINS_3RefINS2_24FileSystemDirectoryEntryENS8_ISN_EENSA_ISN_EEEEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_1E3355520;
  v3 = *(WTF **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v8 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E33551B0[v4])(&v9, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore15FileSystemEntry9getParentERNS2_22ScriptExecutionContextEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEONS6_INS2_13ErrorCallbackENS8_ISE_EENSA_ISE_EEEEEN3__0clINS2_11ExceptionOrINS_3RefINS2_24FileSystemDirectoryEntryENS8_ISN_EENSA_ISN_EEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)this = &off_1E3355520;
  v3 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v8 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E33551B0[v4])(&v9, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore15FileSystemEntry9getParentERNS2_22ScriptExecutionContextEONS_6RefPtrINS2_23FileSystemEntryCallbackENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEONS6_INS2_13ErrorCallbackENS8_ISE_EENSA_ISE_EEEEEN3__0clINS2_11ExceptionOrINS_3RefINS2_24FileSystemDirectoryEntryENS8_ISN_EENSA_ISN_EEEEEEEEDaOT_EUlvE_vJEE4callEv(WTF::StringImpl *result)
{
  int v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  _DWORD *v11;

  v1 = *((_DWORD *)result + 10);
  if (v1)
  {
    v2 = *((_QWORD *)result + 2);
    if (v2)
    {
      if (v1 == 1)
      {
        v9[0] = *((_BYTE *)result + 24);
        v3 = (WTF::StringImpl *)*((_QWORD *)result + 4);
        *((_QWORD *)result + 4) = 0;
        v10 = v3;
        WebCore::DOMException::create(v9, (uint64_t *)&v11);
        (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v2 + 40))(v2, v11);
        v5 = v11;
        v11 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
        result = v10;
        v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v8 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>>> &&>::~CallableWrapper(v8);
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)result + 1);
    if (v6)
    {
      v7 = (_DWORD *)*((_QWORD *)result + 3);
      *((_QWORD *)result + 3) = 0;
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v6 + 40))(v6, v7);
      if (v7)
      {
        if (v7[8] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[8];
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v7;

  *a1 = &off_1E3355548;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (WTF *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v5 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3355548;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v5 + 1) = 0;
      if (*(_DWORD *)(v7 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 32);
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::FileSystemFileEntry::file(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::FileCallback,WTF::RawPtrTraits<WebCore::FileCallback>,WTF::DefaultRefDerefTraits<WebCore::FileCallback>> &&,WTF::RefPtr<WebCore::ErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)::$_0>>> &&>::call(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[16];
  int v20;
  WTF *v21;
  uint64_t v22;
  char v23;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        v5 = result;
        v6 = (_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) += 2;
        v7 = WebCore::Document::eventLoop((WebCore::Document *)(v3 - 288), (WTF::StringImpl *)a2);
        v8 = *(_OWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        v18 = v8;
        v19[0] = 0;
        v20 = -1;
        v9 = a2[4];
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E3355560[v9])(&v22, v19, a2);
          v20 = v9;
        }
        v10 = *(WTF **)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        v21 = v10;
        v11 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v11 = &off_1E3355580;
        *(_OWORD *)(v11 + 8) = v18;
        *(_BYTE *)(v11 + 24) = 0;
        *(_DWORD *)(v11 + 40) = -1;
        v12 = v20;
        if (v20 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3355560[v20])(&v22, v11 + 24, v19);
          *(_DWORD *)(v11 + 40) = v12;
        }
        v13 = v21;
        v21 = 0;
        v22 = v11;
        *(_QWORD *)(v11 + 48) = v13;
        WebCore::EventLoopTaskGroup::queueTask(v7, 11, &v22);
        v15 = v22;
        v22 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = v21;
        v21 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            v17 = *((_QWORD *)v16 + 1);
            --*(_QWORD *)(v17 + 16);
            *((_QWORD *)v16 + 1) = 0;
            if (*(_DWORD *)(v17 + 32) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
            else
              --*(_DWORD *)(v17 + 32);
            WTF::fastFree(v16, v14);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
        if (v20 != -1)
          ((void (*)(char *, _BYTE *))off_1E33550B0[v20])(&v23, v19);
        v20 = -1;
        result = 0;
        if (*v6 == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v14);
        }
        else
        {
          *v6 -= 2;
        }
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19FileSystemFileEntry4fileERNS2_22ScriptExecutionContextEONS_3RefINS2_12FileCallbackENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEONS_6RefPtrINS2_13ErrorCallbackENS8_ISF_EENSA_ISF_EEEEEN3__0clINS2_11ExceptionOrINS6_INS2_4FileENS8_ISN_EENSA_ISN_EEEEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_1E3355580;
  v3 = *(WTF **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v8 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E33550B0[v4])(&v9, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19FileSystemFileEntry4fileERNS2_22ScriptExecutionContextEONS_3RefINS2_12FileCallbackENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEONS_6RefPtrINS2_13ErrorCallbackENS8_ISF_EENSA_ISF_EEEEEN3__0clINS2_11ExceptionOrINS6_INS2_4FileENS8_ISN_EENSA_ISN_EEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)this = &off_1E3355580;
  v3 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v8 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 32);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E33550B0[v4])(&v9, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

WebValidationBubbleTapRecognizer *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore19FileSystemFileEntry4fileERNS2_22ScriptExecutionContextEONS_3RefINS2_12FileCallbackENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEONS_6RefPtrINS2_13ErrorCallbackENS8_ISF_EENSA_ISF_EEEEEN3__0clINS2_11ExceptionOrINS6_INS2_4FileENS8_ISN_EENSA_ISN_EEEEEEEEDaOT_EUlvE_vJEE4callEv(WebValidationBubbleTapRecognizer *result)
{
  int m_ptr;
  void *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  void *v6;
  _DWORD *isa;
  WebValidationBubbleTapRecognizer *v8;
  SEL v9;
  id v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  _DWORD *v13;

  m_ptr = (int)result[1]._tapGestureRecognizer.m_ptr;
  if (m_ptr)
  {
    v2 = result->_tapGestureRecognizer.m_ptr;
    if (v2)
    {
      if (m_ptr == 1)
      {
        v11[0] = result[1].super.isa;
        v3 = (WTF::StringImpl *)result[1]._popoverController.m_ptr;
        result[1]._popoverController.m_ptr = 0;
        v12 = v3;
        WebCore::DOMException::create(v11, (uint64_t *)&v13);
        (*(void (**)(void *, _DWORD *))(*(_QWORD *)v2 + 40))(v2, v13);
        v5 = v13;
        v13 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
        result = (WebValidationBubbleTapRecognizer *)v12;
        v12 = 0;
        if (result)
        {
          if (LODWORD(result->super.isa) == 2)
            return (WebValidationBubbleTapRecognizer *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
          else
            LODWORD(result->super.isa) -= 2;
        }
      }
      else
      {
        v8 = (WebValidationBubbleTapRecognizer *)std::__throw_bad_variant_access[abi:sn180100]();
        return -[WebValidationBubbleTapRecognizer initWithPopoverController:](v8, v9, v10);
      }
    }
  }
  else
  {
    v6 = result->_popoverController.m_ptr;
    isa = result[1].super.isa;
    result[1].super.isa = 0;
    result = (WebValidationBubbleTapRecognizer *)(*(uint64_t (**)(void *, _DWORD *))(*(_QWORD *)v6 + 40))(v6, isa);
    if (isa)
    {
      if (isa[4] == 1)
        return (WebValidationBubbleTapRecognizer *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)isa + 8))(isa);
      else
        --isa[4];
    }
  }
  return result;
}

uint64_t WebCore::ValidationBubble::ValidationBubble(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  _DWORD *v5;
  void *v6;
  const void *v7;
  WebValidationBubbleTapRecognizer *v8;
  const void *v9;
  id AssociatedObject;
  const __CFString *v11;
  uint64_t v12;
  double v13;
  double v14;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  v5 = *a3;
  if (*a3)
    *v5 += 2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  if (qword_1ECE81CD8 != -1)
    dispatch_once(&qword_1ECE81CD8, &__block_literal_global_43);
  v6 = (void *)objc_msgSend(objc_alloc((Class)qword_1ECE81CD0), "init");
  v7 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v7)
  {
    CFRelease(v7);
    v6 = *(void **)(a1 + 32);
  }
  objc_msgSend(v6, "setModalPresentationStyle:", 7);
  v8 = -[WebValidationBubbleTapRecognizer initWithPopoverController:]([WebValidationBubbleTapRecognizer alloc], "initWithPopoverController:", *(_QWORD *)(a1 + 32));
  v9 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  if (v9)
    CFRelease(v9);
  AssociatedObject = objc_getAssociatedObject(*(id *)(a1 + 32), &validationBubbleViewControllerLabelKey);
  if (*a3)
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E3487BC0;
  objc_msgSend(AssociatedObject, "setText:", v11);
  objc_msgSend((id)objc_msgSend(AssociatedObject, "font"), "pointSize");
  *(_QWORD *)(a1 + 24) = v12;
  objc_msgSend(AssociatedObject, "sizeThatFits:", 300.0, 1.79769313e308);
  objc_msgSend(*(id *)(a1 + 32), "setPreferredContentSize:", v13 + 34.0, v14 + 18.0);
  return a1;
}

void sub_19531BBA8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  WTF::StringImpl *v8;

  objc_destroyWeak((id *)(v2 + 32));
  v5 = (const void *)v1[6];
  v1[6] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)v1[5];
  v1[5] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)v1[4];
  v1[4] = 0;
  if (v7)
    CFRelease(v7);
  v8 = (WTF::StringImpl *)v1[2];
  v1[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebCore::ValidationBubble::~ValidationBubble(id *this)
{
  WTF::StringImpl *v2;
  id v3;
  id v4;
  id v5;
  WTF::StringImpl *v6;

  objc_msgSend(this[4], "dismissViewControllerAnimated:completion:", 0, 0);
  objc_destroyWeak(this + 7);
  v3 = this[6];
  this[6] = 0;
  if (v3)
    CFRelease(v3);
  v4 = this[5];
  this[5] = 0;
  if (v4)
    CFRelease(v4);
  v5 = this[4];
  this[4] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

void sub_19531BCB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  WTF::StringImpl *v7;

  objc_destroyWeak((id *)(v1 + 56));
  v4 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(WTF::StringImpl **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(a1);
}

id *WebCore::ValidationBubble::show(id *this)
{
  id *result;
  id Weak;
  id v4;
  PAL *v5;
  uint64_t (*v6)(PAL *__hidden, unsigned int, objc_object *);
  uint64_t UIKit_UIAccessibilityAnnouncementNotification;
  const __CFString *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  _QWORD v15[4];
  WebCore::ValidationBubble *v16;

  result = (id *)objc_msgSend(this[4], "parentViewController");
  if (!result)
  {
    result = (id *)objc_msgSend(this[4], "presentingViewController");
    if (!result && !*((_BYTE *)this + 64))
    {
      ++*(_DWORD *)this;
      *((_BYTE *)this + 64) = 1;
      Weak = objc_loadWeak(this + 7);
      v4 = this[4];
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3321888768;
      v15[2] = ___ZN7WebCore16ValidationBubble4showEv_block_invoke;
      v15[3] = &__block_descriptor_40_e8_32c45_ZTSKZN7WebCore16ValidationBubble4showEvE3__0_e5_v8__0l;
      *(_DWORD *)this += 2;
      v16 = (WebCore::ValidationBubble *)this;
      v5 = (PAL *)objc_msgSend(Weak, "presentViewController:animated:completion:", v4, 0, v15);
      if (*(_DWORD *)this == 1)
      {
        WebCore::ValidationBubble::~ValidationBubble(this);
        v5 = (PAL *)WTF::fastFree(v9, v10);
      }
      else
      {
        --*(_DWORD *)this;
      }
      v6 = PAL::softLinkUIKitUIAccessibilityPostNotification;
      UIKit_UIAccessibilityAnnouncementNotification = PAL::get_UIKit_UIAccessibilityAnnouncementNotification(v5);
      if (this[2])
        v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v8 = &stru_1E3487BC0;
      ((void (*)(uint64_t, const __CFString *))v6)(UIKit_UIAccessibilityAnnouncementNotification, v8);
      result = (id *)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::ValidationBubble::~ValidationBubble(result);
          result = (id *)WTF::fastFree(v13, v14);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      if (*(_DWORD *)this == 1)
      {
        WebCore::ValidationBubble::~ValidationBubble(this);
        return (id *)WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  return result;
}

void sub_19531BE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14)
{
  id *v14;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;

  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
    {
      WebCore::ValidationBubble::~ValidationBubble(a14);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)a14;
    }
  }
  if (*(_DWORD *)v14 == 1)
  {
    WebCore::ValidationBubble::~ValidationBubble(v14);
    WTF::fastFree(v20, v21);
  }
  else
  {
    --*(_DWORD *)v14;
  }
  if (*(_DWORD *)v14 == 1)
  {
    WebCore::ValidationBubble::~ValidationBubble(v14);
    WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)v14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore16ValidationBubble4showEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "view"), "setAccessibilityElementsHidden:", 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 0;
  return result;
}

uint64_t __copy_helper_block_e8_32c45_ZTSKZN7WebCore16ValidationBubble4showEvE3__0(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a2 + 32);
  if (v2)
    ++*v2;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

id *__destroy_helper_block_e8_32c45_ZTSKZN7WebCore16ValidationBubble4showEvE3__0(uint64_t a1)
{
  id *result;
  WTF *v3;
  void *v4;

  result = *(id **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ValidationBubble::~ValidationBubble(result);
      return (id *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::ValidationBubble::setAnchorRect(WebCore::ValidationBubble **this, const WebCore::IntRect *a2, UIViewController *a3)
{
  PAL *v3;
  WebCore::ValidationBubble *v5;
  void *v6;
  WebValidationBubbleDelegate *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::ValidationBubble *v11;
  PAL *isMobileSafari;
  _QWORD v13[3];

  v3 = (PAL *)a3;
  v5 = (WebCore::ValidationBubble *)this;
  v13[2] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v11 = this[1];
    if (!v11)
    {
LABEL_13:
      NSLog(CFSTR("Failed to find a view controller to show form validation popover"));
      return;
    }
    while (1)
    {
      isMobileSafari = (PAL *)WebCore::IOSApplication::isMobileSafari((WebCore::IOSApplication *)this);
      if ((isMobileSafari & 1) == 0)
        break;
      v3 = (PAL *)-[WebCore::ValidationBubble nextResponder](v11, "nextResponder");
      PAL::getUIViewControllerClass[0](v3);
      if ((objc_opt_isKindOfClass() & 1) != 0
        && (WebCore::ValidationBubble *)-[PAL viewIfLoaded](v3, "viewIfLoaded") == v11)
      {
        goto LABEL_11;
      }
LABEL_12:
      this = (WebCore::ValidationBubble **)-[WebCore::ValidationBubble superview](v11, "superview");
      v11 = (WebCore::ValidationBubble *)this;
      if (!this)
        goto LABEL_13;
    }
    v3 = (PAL *)objc_msgSend((id)PAL::getUIViewControllerClass[0](isMobileSafari), "viewControllerForView:", v11);
LABEL_11:
    if (v3)
      goto LABEL_2;
    goto LABEL_12;
  }
LABEL_2:
  v6 = (void *)objc_msgSend(*((id *)v5 + 4), "popoverPresentationController");
  v7 = objc_alloc_init(WebValidationBubbleDelegate);
  v8 = (const void *)*((_QWORD *)v5 + 6);
  *((_QWORD *)v5 + 6) = v7;
  if (v8)
  {
    CFRelease(v8);
    v7 = (WebValidationBubbleDelegate *)*((_QWORD *)v5 + 6);
  }
  objc_msgSend(v6, "setDelegate:", v7);
  v9 = -[PAL view](v3, "view");
  v10 = *((_QWORD *)v5 + 1);
  v13[0] = v9;
  v13[1] = v10;
  objc_msgSend(v6, "setPassthroughViews:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 2));
  objc_msgSend(v6, "setSourceView:", *((_QWORD *)v5 + 1));
  objc_msgSend(v6, "setSourceRect:", (double)*(int *)a2, (double)*((int *)a2 + 1), (double)*((int *)a2 + 2), (double)*((int *)a2 + 3));
  objc_storeWeak((id *)v5 + 7, v3);
}

objc_class *webAVPlayerControllerClass(void)
{
  objc_class *ClassPair;
  objc_class *v1;
  objc_class *v2;
  Method *v3;
  const char *v4;
  IMP MethodImplementation;
  void (*v6)(void);
  unint64_t i;
  const char *Name;
  const char *TypeEncoding;
  Method *v10;
  unint64_t j;
  const char *v12;
  void (*Implementation)(void);
  const char *v14;
  unsigned int outCount;

  ClassPair = (objc_class *)webAVPlayerControllerClass(void)::webAVPlayerControllerForwarderClass;
  if (!webAVPlayerControllerClass(void)::webAVPlayerControllerForwarderClass)
  {
    v1 = (objc_class *)_MergedGlobals_32();
    v2 = (objc_class *)objc_opt_class();
    ClassPair = objc_allocateClassPair(v1, "WebAVPlayerControllerForwarder_AVKitCompatible", 0);
    objc_registerClassPair(ClassPair);
    outCount = 0;
    v3 = class_copyMethodList(v1, &outCount);
    v4 = NSSelectorFromString(CFSTR("_web_unknownMethod"));
    MethodImplementation = class_getMethodImplementation(v1, v4);
    if (outCount)
    {
      v6 = MethodImplementation;
      for (i = 0; i < outCount; ++i)
      {
        Name = method_getName(v3[i]);
        TypeEncoding = method_getTypeEncoding(v3[i]);
        class_addMethod(ClassPair, Name, v6, TypeEncoding);
      }
    }
    free(v3);
    v10 = class_copyMethodList(v2, &outCount);
    if (outCount)
    {
      for (j = 0; j < outCount; ++j)
      {
        v12 = method_getName(v10[j]);
        if (!-[NSString hasPrefix:](NSStringFromSelector(v12), "hasPrefix:", CFSTR(".")))
        {
          Implementation = method_getImplementation(v10[j]);
          v14 = method_getTypeEncoding(v10[j]);
          class_replaceMethod(ClassPair, v12, Implementation, v14);
        }
      }
    }
    free(v10);
    class_addIvar(ClassPair, "_playerController", 8uLL, 3u, "{RetainPtr<WebAVPlayerController>=^v}");
    webAVPlayerControllerClass(void)::webAVPlayerControllerForwarderClass = (uint64_t)ClassPair;
  }
  return ClassPair;
}

void sub_19531C6D4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

Class initAVPlayerController(void)
{
  Class result;

  if ((byte_1ECE81CAD & 1) == 0)
  {
    *(_QWORD *)algn_1ECE81CE8 = dlopen("/System/Library/Frameworks/AVKit.framework/AVKit", 2);
    byte_1ECE81CAD = 1;
  }
  result = objc_getClass("AVPlayerController");
  qword_1ECE81CE0 = (uint64_t)result;
  _MergedGlobals_32 = AVPlayerControllerFunction;
  return result;
}

void sub_19531E910(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19531EDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_3:
      v9 = 0;
      a2[2] = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      a2[3] = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a2;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a2;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v8 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a3;
    v13 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *(_QWORD *)(a3 + 8);
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v37, a1);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

void sub_19531F0C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (!a12)
    goto LABEL_4;
  do
  {
    v14 = __ldaxr((unsigned int *)a12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)a12));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)a12);
    WTF::fastFree(a12, a2);
    if (!v12)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if (!v12)
      goto LABEL_8;
  }
  do
  {
    v16 = __ldaxr(v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v12));
  if (!v17)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = result[3];
  v5 = result[2] + 1;
  result[2] = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)result;
    if (!*(_QWORD *)result)
    {
LABEL_3:
      LODWORD(v6) = 0;
      v3[2] = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      v3[3] = 2 * v7;
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v9)
      goto LABEL_31;
    v10 = 0;
    do
    {
      while (1)
      {
        v11 = --v9;
        result = *(unsigned int **)(v6 + 8 * v9);
        if ((unint64_t)result + 1 >= 2 && !*((_QWORD *)result + 1))
          break;
        if (!(_DWORD)v9)
          goto LABEL_21;
      }
      *(_QWORD *)(v6 + 8 * v9) = 0;
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        v19 = v9;
        v20 = v6;
        v18 = v10;
        v21 = v9;
        result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        v6 = v20;
        v11 = v21;
        v9 = v19;
        v10 = v18;
      }
      *(_QWORD *)(v6 + 8 * v11) = -1;
      ++v10;
    }
    while (v11);
LABEL_21:
    v6 = *(_QWORD *)v3;
    if (v10)
    {
      *(_DWORD *)(v6 - 16) += v10;
      v14 = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
        v15 = *(_DWORD *)(v14 - 12);
      else
        v15 = 0;
      *(_DWORD *)(v14 - 12) = v15 - v10;
      v6 = *(_QWORD *)v3;
    }
    if (!v6)
      goto LABEL_3;
    v16 = *(_DWORD *)(v6 - 4);
    if (v16 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v16)
    {
LABEL_31:
      v3[2] = 0;
    }
    else
    {
      result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3);
      v6 = *(_QWORD *)v3;
      v3[2] = 0;
      if (!v6)
        goto LABEL_4;
    }
    LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = (WTF *)a2[1];
  if (v8)
  {
    if (*((_QWORD *)v8 + 1))
      return (unsigned int *)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)v3, v8);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_2:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_3:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  v5 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v5)
    goto LABEL_25;
  v6 = 0;
  do
  {
    while (1)
    {
      v7 = --v5;
      v8 = *(_QWORD *)(v3 + 8 * v5);
      if ((unint64_t)(v8 + 1) >= 2 && !*(_QWORD *)(v8 + 8))
        break;
      if (!(_DWORD)v5)
        goto LABEL_15;
    }
    *(_QWORD *)(v3 + 8 * v5) = 0;
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v18 = v5;
      v19 = v3;
      v17 = v6;
      v20 = v5;
      WTF::fastFree((WTF *)v8, a2);
      v3 = v19;
      v7 = v20;
      v5 = v18;
      v6 = v17;
    }
    *(_QWORD *)(v3 + 8 * v7) = -1;
    ++v6;
  }
  while (v7);
LABEL_15:
  v3 = *(_QWORD *)a1;
  if (v6)
  {
    *(_DWORD *)(v3 - 16) += v6;
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v12 = *(_DWORD *)(v11 - 12);
    else
      v12 = 0;
    *(_DWORD *)(v11 - 12) = v12 - v6;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
    goto LABEL_2;
  v13 = *(_DWORD *)(v3 - 4);
  if (v13 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v13)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
    v3 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (!v3)
      goto LABEL_3;
  }
  v15 = *(_DWORD *)(v3 - 12);
  if (v15 >= 0x7FFFFFFF)
    v16 = -2;
  else
    v16 = 2 * v15;
  *(_DWORD *)(a1 + 12) = v16;
  return *(unsigned int *)(v3 - 12);
}

void sub_19531F8F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11)
{
  WTF *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v12 = a9;
  if (a11)
  {
    do
    {
      v13 = *(unsigned int **)v12;
      *(_QWORD *)v12 = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, a2);
        }
      }
      v12 = (WTF *)((char *)v12 + 8);
    }
    while (v12 != (WTF *)((char *)a9 + 8 * a11));
    v12 = a9;
  }
  if (v12)
    WTF::fastFree(v12, a2);
  _Unwind_Resume(exception_object);
}

void sub_19531FEAC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, unsigned int a13, WTF *a14, int a15, unsigned int a16)
{
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v17 = a11;
  if (a13)
  {
    do
    {
      v18 = *(unsigned int **)v17;
      *(_QWORD *)v17 = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, a2);
        }
      }
      v17 = (WTF *)((char *)v17 + 8);
    }
    while (v17 != (WTF *)((char *)a11 + 8 * a13));
    v17 = a11;
  }
  if (v17)
    WTF::fastFree(v17, a2);
  v21 = a14;
  if (a16)
  {
    do
    {
      v22 = *(unsigned int **)v21;
      *(_QWORD *)v21 = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, a2);
        }
      }
      v21 = (WTF *)((char *)v21 + 8);
    }
    while (v21 != (WTF *)((char *)a14 + 8 * a16));
    v21 = a14;
  }
  if (v21)
    WTF::fastFree(v21, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::WebSQLiteDatabaseTrackerClient::sharedWebSQLiteDatabaseTrackerClient(WebCore::WebSQLiteDatabaseTrackerClient *this)
{
  WTF::RunLoop *v2;
  WTF::RunLoop *v3;
  _QWORD *v4;

  if ((byte_1ECE81CAB & 1) == 0)
  {
    qword_1ECE81D28 = (uint64_t)&off_1E33555D8;
    v2 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E3355780;
    *((_QWORD *)v2 + 1) = &qword_1ECE81D28;
    qword_1ECE81D30 = (uint64_t)v2;
    unk_1ECE81D38 = 0x4000000000000000;
    v3 = (WTF::RunLoop *)WTF::RunLoop::main(v2);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v4 = off_1E3355738;
    v4[1] = PAL::HysteresisActivity::hysteresisTimerFired;
    v4[2] = 0;
    v4[3] = &qword_1ECE81D30;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE81D40, v3);
    qword_1ECE81D40[0] = off_1E32051C0;
    qword_1ECE81D40[3] = v4;
    byte_1ECE81D60 = 0;
    byte_1ECE81CAB = 1;
  }
  return &qword_1ECE81D28;
}

void sub_195320280(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = qword_1ECE81D30;
  qword_1ECE81D30 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(a1);
}

void WebCore::WebSQLiteDatabaseTrackerClient::~WebSQLiteDatabaseTrackerClient(WebCore::WebSQLiteDatabaseTrackerClient *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 3) = off_1E32051C0;
  v2 = (WebCore::WebSQLiteDatabaseTrackerClient *)((char *)this + 24);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 3) = off_1E32051C0;
  v2 = (WebCore::WebSQLiteDatabaseTrackerClient *)((char *)this + 24);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::WebSQLiteDatabaseTrackerClient::willBeginFirstTransaction(WebCore::WebSQLiteDatabaseTrackerClient *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  WTF::RunLoop::main(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33557A8;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WTF::RunLoop::dispatch();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_195320408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebSQLiteDatabaseTrackerClient::didFinishLastTransaction(WebCore::WebSQLiteDatabaseTrackerClient *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  WTF::RunLoop::main(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33557D0;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WTF::RunLoop::dispatch();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_195320494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1953205D4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE81CB0);
  goto LABEL_6;
}

void sub_1953207CC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE81CB0);
  goto LABEL_6;
}

WebCore::Widget *WebCore::Widget::Widget(WebCore::Widget *this, CFTypeRef cf)
{
  const void *v4;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E3355608;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_WORD *)this + 12) = 0;
  if (cf)
  {
    CFRetain(cf);
    v4 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = cf;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  return this;
}

void WebCore::Widget::~Widget(WebCore::Widget *this, void *a2)
{
  const void *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  *(_QWORD *)this = off_1E3355608;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, a2);
      else
        --*(_DWORD *)v6;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::Widget::show(uint64_t this)
{
  void *v1;

  if (!*(_BYTE *)(this + 24))
  {
    *(_BYTE *)(this + 24) = 1;
    v1 = *(void **)(this + 40);
    if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EE342188))
      v1 = (void *)objc_msgSend(v1, "superview");
    return objc_msgSend(v1, "setHidden:", 0);
  }
  return this;
}

uint64_t WebCore::Widget::platformWidget(WebCore::Widget *this)
{
  return *((_QWORD *)this + 5);
}

void WebCore::Widget::paint(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  CGContext *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) == 0)
  {
    v6 = *(void **)(a1 + 40);
    if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
      v6 = (void *)objc_msgSend(v6, "superview");
    v7 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    CGContextSaveGState(v7);
    objc_msgSend(v6, "frame");
    v9 = v8;
    v11 = v10;
    objc_msgSend(v6, "bounds");
    CGContextTranslateCTM(v7, v9 - v12, v11 - v13);
    objc_msgSend(v6, "convertRect:fromView:", objc_msgSend(v6, "superview"), (double)*a3, (double)a3[1], (double)a3[2], (double)a3[3]);
    objc_msgSend(v6, "displayRectIgnoringOpacity:inContext:", v7);
    CGContextRestoreGState(v7);
  }
}

unint64_t WebCore::Widget::convertFromRootToContainingWindow(WebCore::Widget *this, const WebCore::Widget *a2, const WebCore::IntPoint *a3)
{
  void *v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  float v11;
  unsigned int v12;
  float v13;

  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    v5 = (void *)objc_msgSend(*((id *)this + 5), "documentView", a3);
    v6 = (double)*(int *)a2;
    v7 = (double)*((int *)a2 + 1);
    if (v5)
      objc_msgSend(v5, "convertPoint:toView:", 0, v6, v7);
    else
      objc_msgSend(v4, "convertPoint:toView:", 0, v6, v7);
    v11 = v9;
    v12 = llroundf(v11);
    v13 = v10;
    LODWORD(v8) = llroundf(v13);
  }
  else
  {
    v12 = *(_DWORD *)a2;
    v8 = *((unsigned int *)a2 + 1);
  }
  return v12 | (unint64_t)(v8 << 32);
}

void sub_195320B80()
{
  objc_end_catch();
  JUMPOUT(0x195320B88);
}

unint64_t WebCore::Widget::convertFromContainingWindowToRoot(WebCore::Widget *this, const WebCore::Widget *a2, const WebCore::IntPoint *a3)
{
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  uint64_t v11;

  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    v5 = (void *)objc_msgSend(*((id *)this + 5), "documentView", a3);
    v6 = (double)*(int *)a2;
    v7 = (double)*((int *)a2 + 1);
    if (v5)
      objc_msgSend(v5, "convertPoint:fromView:", 0, v6, v7);
    else
      objc_msgSend(v4, "convertPoint:fromView:", 0, v6, v7);
    v10 = (int)(float)(int)v8;
    v11 = (int)(float)(int)v9;
  }
  else
  {
    v10 = *(_DWORD *)a2;
    v11 = *((unsigned int *)a2 + 1);
  }
  return v10 | (unint64_t)(v11 << 32);
}

void sub_195320C30()
{
  objc_end_catch();
  JUMPOUT(0x195320C38);
}

void WebCore::Widget::setPlatformWidget(WebCore::Widget *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 5);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (CFTypeRef)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 5) = cf;
    if (v3)
      CFRelease(v3);
  }
}

uint64_t _notificationCallback(uint64_t a1, int a2, void *a3)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(a3, "_adjustScrollers");
  return result;
}

uint64_t scrollViewToPoint(WAKScrollView *a1, CGPoint a2)
{
  double y;
  double x;
  id v5;
  void *v6;
  WAKScrollView *v7;
  uint64_t v8;
  id v9;
  void *v10;
  float v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  double v36;
  uint64_t v37;
  void (**v39)(void);

  y = a2.y;
  x = a2.x;
  v5 = -[WAKScrollView documentView](a1, "documentView");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = a1;
  while (1)
  {
    v8 = -[WAKView superview](v7, "superview");
    if (!v8)
      break;
    v7 = (WAKScrollView *)v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_9;
  }
  v9 = -[WAKScrollView delegate](a1, "delegate");
  if (v9)
  {
    v10 = v9;
    if ((objc_opt_respondsToSelector() & 1) != 0
      && !objc_msgSend(v10, "scrollView:shouldScrollToPoint:", a1, x, y))
    {
      return 0;
    }
  }
LABEL_9:
  v11 = x;
  v12 = 0.0;
  v13 = 0.0;
  if (v11 > 0.0)
  {
    objc_msgSend(-[WAKScrollView documentView](a1, "documentView"), "frame");
    v15 = v14;
    v16 = -[WAKScrollView contentView](a1, "contentView");
    LODWORD(v17) = 0;
    if (v16)
    {
      objc_msgSend(v16, "frame", v17);
      *(float *)&v17 = v18;
    }
    v19 = v15;
    v20 = v19 - *(float *)&v17;
    if (v20 <= 0.0)
      v20 = 0.0;
    if (v20 <= v11)
      v21 = v20;
    else
      v21 = v11;
    v22 = -v21;
    if (v20 <= 0.0)
      v23 = 0.0;
    else
      v23 = v22;
    v13 = v23;
  }
  v24 = y;
  if (v24 > 0.0)
  {
    objc_msgSend(-[WAKScrollView documentView](a1, "documentView"), "frame");
    v26 = v25;
    v27 = -[WAKScrollView contentView](a1, "contentView");
    LODWORD(v28) = 0;
    if (v27)
    {
      objc_msgSend(v27, "frame", v28);
      *(float *)&v28 = v29;
    }
    v30 = v26;
    v31 = v30 - *(float *)&v28;
    if (v31 <= 0.0)
      v31 = 0.0;
    if (v31 <= v24)
      v32 = v31;
    else
      v32 = v24;
    v33 = -v32;
    if (v31 <= 0.0)
      v34 = 0.0;
    else
      v34 = v33;
    v12 = v34;
  }
  objc_msgSend(v6, "frame");
  if (v36 == v13 && v35 == v12)
    return 0;
  objc_msgSend(v6, "setFrameOrigin:", v13, v12);
  v37 = 1;
  -[WAKView setNeedsDisplay:](a1, "setNeedsDisplay:", 1);
  v39 = *(void (***)(void))(objc_msgSend(v6, "_viewRef") + 16);
  if (v39 && *v39)
    (*v39)();
  return v37;
}

uint64_t WebCore::Widget::setParentVisible(uint64_t this, char a2)
{
  *(_BYTE *)(this + 25) = a2;
  return this;
}

uint64_t WebCore::Widget::isLocalFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isRemoteFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isPluginViewBase(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isScrollbar(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isScrollView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::accessibilityHitTest()
{
  return 0;
}

uint64_t WebCore::Widget::accessibilityObject(WebCore::Widget *this)
{
  return 0;
}

void ___ZL46allocWebValidationBubbleViewControllerInstancev_block_invoke(PAL *a1)
{
  objc_class *v1;

  v1 = (objc_class *)PAL::getUIViewControllerClass[0](a1);
  qword_1ECE81CD0 = (uint64_t)objc_allocateClassPair(v1, "WebValidationBubbleViewController", 0);
  class_addMethod((Class)qword_1ECE81CD0, sel_viewDidLoad, (IMP)WebValidationBubbleViewController_viewDidLoad, "v@:");
  class_addMethod((Class)qword_1ECE81CD0, sel_viewWillLayoutSubviews, (IMP)WebValidationBubbleViewController_viewWillLayoutSubviews, "v@:");
  class_addMethod((Class)qword_1ECE81CD0, sel_viewSafeAreaInsetsDidChange, (IMP)WebValidationBubbleViewController_viewSafeAreaInsetsDidChange, "v@:");
  objc_registerClassPair((Class)qword_1ECE81CD0);
}

void WebValidationBubbleViewController_viewDidLoad(void *a1)
{
  PAL *v2;
  PAL *v3;
  void *UIFontClass;
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)PAL::getUIViewControllerClass[0]((PAL *)a1);
  v2 = (PAL *)objc_msgSendSuper(&v5, sel_viewDidLoad);
  v3 = (PAL *)objc_msgSend(objc_alloc((Class)PAL::getUILabelClass[0](v2)), "init");
  UIFontClass = (void *)PAL::getUIFontClass(v3);
  -[PAL setFont:](v3, "setFont:", objc_msgSend(UIFontClass, "preferredFontForTextStyle:", PAL::get_UIKit_UIFontTextStyleCallout((PAL *)UIFontClass)));
  -[PAL setLineBreakMode:](v3, "setLineBreakMode:", 4);
  -[PAL setNumberOfLines:](v3, "setNumberOfLines:", 4);
  objc_msgSend((id)objc_msgSend(a1, "view"), "addSubview:", v3);
  objc_setAssociatedObject(a1, &validationBubbleViewControllerLabelKey, v3, (void *)1);
  if (v3)
    CFRelease(v3);
}

void sub_1953217F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebValidationBubbleViewController_viewWillLayoutSubviews(void *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  objc_super v15;

  v15.receiver = a1;
  v15.super_class = (Class)PAL::getUIViewControllerClass[0]((PAL *)a1);
  objc_msgSendSuper(&v15, sel_viewWillLayoutSubviews);
  objc_msgSend((id)objc_msgSend(a1, "view"), "bounds");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  objc_msgSend((id)objc_msgSend(a1, "view"), "safeAreaInsets");
  return objc_msgSend(objc_getAssociatedObject(a1, &validationBubbleViewControllerLabelKey), "setFrame:", v3 + v10 + 17.0, v5 + v11 + 9.0, v7 - (v10 + v12) + -34.0, v9 - (v11 + v13) + -18.0);
}

uint64_t WebValidationBubbleViewController_viewSafeAreaInsetsDidChange(void *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  objc_super v15;

  v15.receiver = a1;
  v15.super_class = (Class)PAL::getUIViewControllerClass[0]((PAL *)a1);
  objc_msgSendSuper(&v15, sel_viewSafeAreaInsetsDidChange);
  objc_msgSend((id)objc_msgSend(a1, "view"), "bounds");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  objc_msgSend((id)objc_msgSend(a1, "view"), "safeAreaInsets");
  return objc_msgSend(objc_getAssociatedObject(a1, &validationBubbleViewControllerLabelKey), "setFrame:", v3 + v10 + 17.0, v5 + v11 + 9.0, v7 - (v10 + v12) + -34.0, v9 - (v11 + v13) + -18.0);
}

uint64_t AVPlayerControllerFunction(void)
{
  return qword_1ECE81CE0;
}

Class initCMMotionManager(void)
{
  Class result;
  void *v1;

  if ((byte_1ECE81CAE & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/CoreMotion.framework/CoreMotion", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x195321AB4);
    }
    unk_1ECE81D00 = v1;
    byte_1ECE81CAE = 1;
  }
  result = objc_getClass("CMMotionManager");
  qword_1ECE81CF8 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  off_1ECE7B398 = CMMotionManagerFunction;
  return result;
}

uint64_t CMMotionManagerFunction(void)
{
  return qword_1ECE81CF8;
}

uint64_t PAL::HysteresisActivity::hysteresisTimerFired(PAL::HysteresisActivity *this)
{
  WTF::RunLoop::TimerBase::stop((PAL::HysteresisActivity *)((char *)this + 16));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, 1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (PAL::HysteresisActivity::*&)(void),PAL::HysteresisActivity*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t ___ZL38getTransactionBackgroundTaskIdentifierv_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(+[WebBackgroundTaskController sharedController](WebBackgroundTaskController, "sharedController"), "invalidBackgroundTaskIdentifier");
  qword_1ECE81D20 = result;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _OWORD *v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  size_t v51;
  uint64_t v52;
  unsigned __int128 v53;
  char v54;
  uint64_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v55;
        if (!v55)
          goto LABEL_41;
        v16 = (_BYTE *)(v55 + 20);
        *(_DWORD *)v55 = 2;
        *(_DWORD *)(v55 + 4) = v13;
        *(_QWORD *)(v55 + 8) = v55 + 20;
        *(_DWORD *)(v55 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v16 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v55 + 20), a3, a4);
        }
        v17 = &v16[a4];
        if (a6)
        {
          if (a6 == 1)
          {
            *v17 = *(_BYTE *)a5;
            if (!a7)
              goto LABEL_41;
LABEL_12:
            result = (uint64_t)&v17[a6];
            v18 = *(_OWORD **)(a7 + 8);
            v19 = *(unsigned int *)(a7 + 4);
            if ((*(_BYTE *)(a7 + 16) & 4) != 0)
            {
              if ((_DWORD)v19)
              {
                if ((_DWORD)v19 == 1)
                {
                  *(_BYTE *)result = *(_BYTE *)v18;
                  goto LABEL_41;
                }
LABEL_15:
                result = (uint64_t)memcpy((void *)result, v18, v19);
                goto LABEL_41;
              }
            }
            else
            {
              v51 = result + v19;
              if (v19 >= 0x10)
              {
                v52 = result + (v19 & 0xFFFFFFF0);
                do
                {
                  v53 = (unsigned __int128)vld2q_s8((const char *)v18);
                  v18 += 2;
                  *(_OWORD *)result = v53;
                  result += 16;
                }
                while (result != v52);
                result = v52;
              }
              while (result != v51)
              {
                v54 = *(_BYTE *)v18;
                v18 = (_OWORD *)((char *)v18 + 2);
                *(_BYTE *)result++ = v54;
              }
            }
            goto LABEL_41;
          }
          result = (uint64_t)memcpy(&v16[a4], a5, a6);
        }
        if (!a7)
          goto LABEL_41;
        goto LABEL_12;
      }
LABEL_49:
      v15 = 0;
      goto LABEL_41;
    }
LABEL_48:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_41;
  }
  if (!(_DWORD)result)
    goto LABEL_48;
  if (result > 0x7FFFFFEF)
    goto LABEL_49;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v55;
  if (v55)
  {
    v20 = (char *)(v55 + 20);
    *(_DWORD *)v55 = 2;
    *(_DWORD *)(v55 + 4) = v13;
    *(_QWORD *)(v55 + 8) = v55 + 20;
    *(_DWORD *)(v55 + 16) = 0;
    v21 = (char *)(v55 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v22 = &v20[2 * (a4 & 0xFFFFFFC0)];
      v23 = 0uLL;
      do
      {
        v56.val[0] = (int8x16_t)*a3;
        v24 = *((int8x16_t *)a3 + 1);
        v59.val[0] = (int8x16_t)a3[2];
        v25 = a3[3];
        a3 += 4;
        v26 = v25;
        v59.val[1] = 0uLL;
        v62.val[0] = v24;
        v56.val[1] = 0uLL;
        v27 = v20;
        vst2q_s8(v27, v56);
        v27 += 32;
        v62.val[1] = 0uLL;
        vst2q_s8(v27, v62);
        v28 = v20 + 64;
        vst2q_s8(v28, v59);
        v29 = v20 + 96;
        vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
        v20 += 128;
      }
      while (v20 != v22);
      v20 = v22;
    }
    while (v20 != v21)
    {
      v30 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v20 = v30;
      v20 += 2;
    }
    result = (uint64_t)&v21[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      v31 = &v21[2 * (a6 & 0xFFFFFFC0)];
      v32 = 0uLL;
      do
      {
        v57.val[0] = (int8x16_t)*a5;
        v33 = *((int8x16_t *)a5 + 1);
        v60.val[0] = (int8x16_t)a5[2];
        v34 = a5[3];
        a5 += 4;
        v35 = v34;
        v60.val[1] = 0uLL;
        v63.val[0] = v33;
        v57.val[1] = 0uLL;
        v36 = v21;
        vst2q_s8(v36, v57);
        v36 += 32;
        v63.val[1] = 0uLL;
        vst2q_s8(v36, v63);
        v37 = v21 + 64;
        vst2q_s8(v37, v60);
        v38 = v21 + 96;
        vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
        v21 += 128;
      }
      while (v21 != v31);
      v21 = v31;
    }
    while (v21 != (char *)result)
    {
      v39 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)v21 = v39;
      v21 += 2;
    }
    if (a7)
    {
      v18 = *(_OWORD **)(a7 + 8);
      v40 = *(unsigned int *)(a7 + 4);
      if ((*(_BYTE *)(a7 + 16) & 4) == 0)
      {
        if ((_DWORD)v40 == 1)
        {
          *(_WORD *)result = *(_WORD *)v18;
          goto LABEL_41;
        }
        if (!(_DWORD)v40)
          goto LABEL_41;
        v19 = 2 * v40;
        goto LABEL_15;
      }
      v41 = result + 2 * v40;
      if (v40 >= 0x40)
      {
        v42 = result + 2 * (v40 & 0xFFFFFFC0);
        v43 = 0uLL;
        do
        {
          v58.val[0] = (int8x16_t)*v18;
          v44 = *((int8x16_t *)v18 + 1);
          v61.val[0] = (int8x16_t)v18[2];
          v45 = v18[3];
          v18 += 4;
          v46 = v45;
          v61.val[1] = 0uLL;
          v64.val[0] = v44;
          v58.val[1] = 0uLL;
          v47 = (char *)result;
          vst2q_s8(v47, v58);
          v47 += 32;
          v64.val[1] = 0uLL;
          vst2q_s8(v47, v64);
          v48 = (char *)(result + 64);
          vst2q_s8(v48, v61);
          v49 = (char *)(result + 96);
          vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
          result += 128;
        }
        while (result != v42);
        result = v42;
      }
      while (result != v41)
      {
        v50 = *(unsigned __int8 *)v18;
        v18 = (_OWORD *)((char *)v18 + 1);
        *(_WORD *)result = v50;
        result += 2;
      }
    }
  }
LABEL_41:
  *a8 = v15;
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::MotionManagerClient&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)a2, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = result;
  }
  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_7;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_6;
  if (!(_DWORD)v8)
  {
    v23 = 0;
    v9 = *(_QWORD *)a2;
    goto LABEL_55;
  }
  v22 = 8 * v8;
  v9 = *(_QWORD *)a2;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v22 -= 8;
    if (!v22)
    {
      v9 = v7;
      break;
    }
  }
LABEL_7:
  if (v6)
  {
    v23 = *(unsigned int *)(v6 - 4);
LABEL_55:
    v10 = v6 + 8 * v23;
    goto LABEL_9;
  }
  v10 = 0;
LABEL_9:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v11 = v9 + 8;
      v9 = v7;
      if (v11 != v7)
      {
        v9 = v11;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v12 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v12 = 0;
  for (; v9 != v12; ++a2[2])
  {
    v13 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    result = *(_QWORD *)(v13 + 8);
    if (result)
      goto LABEL_59;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v13;
    v15 = *(unsigned int **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = result;
    if (!v15)
      goto LABEL_59;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
    result = *(_QWORD *)(v13 + 8);
    if (result)
    {
LABEL_59:
      do
        v18 = __ldaxr((unsigned int *)result);
      while (__stlxr(v18 + 1, (unsigned int *)result));
    }
    v19 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = result;
    *(_DWORD *)(a1 + 12) = v19 + 1;
    v20 = v7;
    if (v9 + 8 != v7)
    {
      v20 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
      {
        v20 += 8;
        if (v20 == v7)
        {
          v20 = v7;
          break;
        }
      }
    }
    v9 = v10;
    if (v20 != v10)
    {
      v9 = v20;
      if (!*(_QWORD *)(*(_QWORD *)v20 + 8))
      {
        while (1)
        {
          v21 = v9 + 8;
          v9 = v7;
          if (v21 != v7)
          {
            v9 = v21;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v10)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_44;
        }
        v9 = v10;
      }
    }
LABEL_44:
    ;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSQLiteDatabaseTrackerClient::WebSQLiteDatabaseTrackerClient(void)::$_0,void,PAL::HysteresisState>::call(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return +[WebDatabaseTransactionBackgroundTaskController endBackgroundTask](WebDatabaseTransactionBackgroundTaskController, "endBackgroundTask");
  else
    return +[WebDatabaseTransactionBackgroundTaskController startBackgroundTask](WebDatabaseTransactionBackgroundTaskController, "startBackgroundTask");
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSQLiteDatabaseTrackerClient::willBeginFirstTransaction(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 56))
  {
    *(_BYTE *)(v1 + 56) = 1;
    if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v1 + 24)))
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 24));
    else
      return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8), 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSQLiteDatabaseTrackerClient::didFinishLastTransaction(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v1 + 56))
  {
    *(_BYTE *)(v1 + 56) = 0;
    return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

void WebCore::FetchBody::~FetchBody(WebCore::FetchBody *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        else
          --v5[4];
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBody *)((char *)this + 16), a2);
  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, WebCore::FetchBody *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v4])(&v6, this);
  *((_DWORD *)this + 2) = -1;
}

{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        else
          --v5[4];
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBody *)((char *)this + 16), a2);
  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, WebCore::FetchBody *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v4])(&v6, this);
  *((_DWORD *)this + 2) = -1;
}

uint64_t WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_6>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[4];
  _QWORD *v10;

  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FetchBody::fromFormData(v8);
  }
  else
  {
    v10 = v9;
    return ((uint64_t (*)(_QWORD **))off_1E3355BC0[v6])(&v10);
  }
}

void WebCore::FetchBody::fromFormData(WebCore::ScriptExecutionContext *a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  __int128 v47;
  __int128 v48;
  char v49;
  __int128 v50;
  uint64_t v51;

  WebCore::FormData::asSharedBuffer(*a2, (uint64_t *)&v39);
  if (v39)
  {
    v43 = v39;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0u;
    v48 = 0u;
    v49 = 0;
    v51 = 0;
    v50 = 0uLL;
    v39 = 0;
    v42 = 0;
    WebCore::FetchBodyConsumer::setData((uint64_t)&v46, (unsigned int **)&v43);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v43, v7);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v42, v8);
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 8) = -1;
    v10 = v45;
    if (v45 != -1)
    {
      ((void (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))off_1E33559F8[v45])(&v43, a3, &v44);
      *(_DWORD *)(a3 + 8) = v10;
    }
    *(_DWORD *)(a3 + 16) = v46;
    *(_OWORD *)(a3 + 24) = v47;
    v11 = v48;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)(a3 + 40) = v11;
    *(_BYTE *)(a3 + 56) = v49;
    v12 = v50;
    v50 = 0u;
    *(_OWORD *)(a3 + 64) = v12;
    *(_QWORD *)(a3 + 80) = v51;
    *(_BYTE *)(a3 + 88) = 1;
    v51 = 0;
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v46, v9);
    if (v45 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v45])(&v43, &v44);
    v14 = v39;
    v39 = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)v14);
        v17 = *((unsigned int *)v14 + 5);
        if ((_DWORD)v17)
        {
          v18 = *((_QWORD *)v14 + 1);
          v19 = v18 + 16 * v17;
          do
          {
            v20 = *(unsigned int **)(v18 + 8);
            *(_QWORD *)(v18 + 8) = 0;
            if (v20)
            {
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                v37 = v18;
                v38 = v19;
                atomic_store(1u, v20);
                v23 = v20[6];
                if ((_DWORD)v23 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E3355A48[v23])(&v44, v20 + 2);
                v20[6] = -1;
                WTF::fastFree((WTF *)v20, v13);
                v18 = v37;
                v19 = v38;
              }
            }
            v18 += 16;
          }
          while (v18 != v19);
        }
        v35 = (WTF *)*((_QWORD *)v14 + 1);
        if ((WTF::StringImpl *)((char *)v14 + 24) != v35 && v35 != 0)
        {
          *((_QWORD *)v14 + 1) = 0;
          *((_DWORD *)v14 + 4) = 0;
          WTF::fastFree(v35, v13);
        }
        WTF::fastFree(v14, v13);
      }
    }
    return;
  }
  if (*((_DWORD *)*a2 + 5) == 1)
  {
    v24 = (*a2)[1];
    if (v24)
    {
      if (*(_DWORD *)(v24 + 40) == 2)
      {
        v25 = *(WTF::StringImpl **)v24;
        if (*(_QWORD *)v24)
          *(_DWORD *)v25 += 2;
        v39 = v25;
        v26 = *(_OWORD *)(v24 + 24);
        v40 = *(_OWORD *)(v24 + 8);
        v41 = v26;
        if (!v25)
          goto LABEL_25;
LABEL_27:
        v43 = 0;
        v44 = 0;
        v28 = bmalloc::api::isoAllocate();
        v30 = WebCore::Blob::Blob(v28, v29, a1, (const WTF::URL *)&v39, (WTF::String *)&v44, 0, 1, 0, (const WTF::URL *)&v43);
        WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v30 + 24));
        v31 = v43;
        v43 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v6);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v44;
        v44 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v6);
          else
            *(_DWORD *)v32 -= 2;
        }
        v45 = 1;
        v46 = 0;
        v49 = 0;
        v44 = 0;
        *(_QWORD *)a3 = v28;
        *(_DWORD *)(a3 + 8) = 1;
        *(_DWORD *)(a3 + 16) = 0;
        v47 = 0u;
        v48 = 0u;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_BYTE *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        v50 = 0u;
        *(_OWORD *)(a3 + 72) = 0u;
        goto LABEL_34;
      }
    }
  }
  v39 = 0;
  WTF::URL::invalidate((WTF::URL *)&v39);
  if (v39)
    goto LABEL_27;
LABEL_25:
  v27 = (uint64_t)*a2;
  *a2 = 0;
  v45 = 2;
  v46 = 0;
  v49 = 0;
  v44 = 0;
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = 2;
  *(_DWORD *)(a3 + 16) = 0;
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v50 = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
LABEL_34:
  *(_BYTE *)(a3 + 88) = 1;
  v51 = 0;
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v46, v6);
  if (v45 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v45])(&v43, &v44);
  v34 = v39;
  v39 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
}

unsigned int *WebCore::FetchBodyConsumer::setData(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  void *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  char v22;

  v2 = *a2;
  *a2 = 0;
  v21 = v2;
  WebCore::SharedBufferBuilder::operator=((WebCore::SharedBufferBuilder *)(a1 + 8), &v21);
  result = v21;
  v21 = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      v7 = result[5];
      if ((_DWORD)v7)
      {
        v8 = *((_QWORD *)result + 1);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v9;
              v17 = v8;
              v18 = (WTF *)v10;
              v19 = result;
              atomic_store(1u, v10);
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v13])(&v22, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, v3);
              result = v19;
              v9 = v16;
              v8 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = (WTF *)*((_QWORD *)result + 1);
      if (result + 6 != (unsigned int *)v14 && v14 != 0)
      {
        *((_QWORD *)result + 1) = 0;
        result[4] = 0;
        v20 = result;
        WTF::fastFree(v14, v3);
        result = v20;
      }
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

WTF *WebCore::FetchBody::consume(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *result;
  WTF::StringImpl *v13;

  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return WebCore::FetchBody::consumeBlob(a1, (WebCore::FetchBodyOwner *)a2, a3);
    case 2:
      return WebCore::FetchBody::consumeFormData((WTF::StringImpl *)a1, a2[1], a2[19], a3);
    case 3:
      return WebCore::FetchBody::consumeArrayBuffer((WTF::StringImpl *)a1, a2[19], a3);
    case 4:
      return (WTF *)WebCore::FetchBody::consumeArrayBufferView(a1, a2[19], a3);
    case 5:
      WTF::URLParser::serialize();
      WebCore::FetchBody::consumeText(a1, (uint64_t)a2, a3, (uint64_t)v13);
      goto LABEL_8;
    case 6:
      return WebCore::FetchBody::consumeText(a1, (uint64_t)a2, a3, *(_QWORD *)a1);
    default:
      v6 = a2[19];
      v7 = *(unsigned int *)(v6 + 20);
      if (!(_DWORD)v7)
        goto LABEL_6;
      v8 = 0;
      v9 = (WTF::StringImpl **)(*(_QWORD *)(v6 + 8) + 8);
      break;
  }
  while (*((_WORD *)v9 - 4) != 26)
  {
    ++v8;
    v9 += 2;
    if (v7 == v8)
    {
LABEL_6:
      v10 = 0;
      goto LABEL_7;
    }
  }
  if (v8 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195322B78);
  }
  v10 = *v9;
  if (*v9)
    *(_DWORD *)v10 += 2;
LABEL_7:
  v13 = v10;
  WebCore::FetchBodyConsumer::resolve((WTF::StringImpl *)(a1 + 16), a3, &v13, (uint64_t)a2, *(_QWORD *)(a1 + 80));
LABEL_8:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::FetchBodyConsumer::setConsumePromise(WTF *a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  WebCore::UserGestureToken *v6;
  uint64_t v7;
  _DWORD *result;
  WTF *v9;
  void *v10;

  if (WTF::isMainThread(a1))
  {
    {
      v5 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v5 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = (WebCore::UserGestureToken *)*((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v6, v4);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *a2;
  *a2 = 0;
  result = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v7;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *WebCore::FetchBody::consumeArrayBuffer(WTF::StringImpl *result, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;

  v3 = a3;
  v4 = result;
  v5 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 8) + 8);
    while (*((_WORD *)v7 - 4) != 26)
    {
      ++v6;
      v7 += 2;
      if (v5 == v6)
        goto LABEL_5;
    }
    if (v6 >= v5)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *v7;
    if (*v7)
      *(_DWORD *)v8 += 2;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  v16 = v8;
  if (*((_DWORD *)result + 2) == 3)
  {
    v9 = *(_QWORD *)result;
    v10 = *(_QWORD *)(*(_QWORD *)result + 16);
    if (!v10)
      goto LABEL_14;
    v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (!v11)
      goto LABEL_14;
    if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
      goto LABEL_13;
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (!*MEMORY[0x1E0CC10F0])
LABEL_13:
    v10 = (v10 & 0x3FFFFFFFFLL) + v11;
LABEL_14:
  if (*(_BYTE *)(v9 + 64) && (v15 = *(_QWORD *)(v9 + 32)) != 0)
    v12 = *(_QWORD *)(v15 + 32);
  else
    v12 = *(_QWORD *)(v9 + 48);
  WebCore::resolveWithTypeAndData(v3, (WTF::StringImpl *)*((unsigned int *)v4 + 4), (uint64_t)&v16, (void *)v10, v12);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  v14 = *((unsigned int *)v4 + 2);
  if ((_DWORD)v14 != -1)
  {
    if (!(_DWORD)v14)
    {
      *(_QWORD *)v4 = 0;
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v14])(&v17, v4);
  }
  *(_QWORD *)v4 = 0;
  *((_DWORD *)v4 + 2) = 0;
  return result;
}

uint64_t WebCore::FetchBody::consumeArrayBufferView(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  void *v9;
  size_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  v4 = result;
  v5 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 8) + 8);
    while (*((_WORD *)v7 - 4) != 26)
    {
      ++v6;
      v7 += 2;
      if (v5 == v6)
        goto LABEL_5;
    }
    if (v6 >= v5)
      goto LABEL_21;
    v8 = *v7;
    if (*v7)
      *(_DWORD *)v8 += 2;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  v13 = v8;
  if (*(_DWORD *)(result + 8) != 4)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
    __break(0xC471u);
    return result;
  }
  v9 = (void *)JSC::ArrayBufferView::span(*(JSC::ArrayBufferView **)result);
  WebCore::resolveWithTypeAndData(a3, (WTF::StringImpl *)*(unsigned int *)(v4 + 16), (uint64_t)&v13, v9, v10);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  v12 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v12 != -1)
  {
    if (!(_DWORD)v12)
    {
      *(_QWORD *)v4 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v12])(&v14, v4);
  }
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF *WebCore::FetchBody::consumeText(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  WTF *result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  int v20;
  unsigned int v21;

  if (a4)
  {
    v7 = *(_QWORD *)(a4 + 8);
    v8 = *(unsigned int *)(a4 + 4) | ((unint64_t)((*(_DWORD *)(a4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  result = (WTF *)PAL::TextCodecUTF8::encodeUTF8(v7, v8, (uint64_t)&v19);
  v10 = *(_QWORD *)(a2 + 152);
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (WTF::StringImpl **)(*(_QWORD *)(v10 + 8) + 8);
    while (*((_WORD *)v13 - 4) != 26)
    {
      ++v12;
      v13 += 2;
      if (v11 == v12)
        goto LABEL_7;
    }
    if (v12 >= v11)
    {
      __break(0xC471u);
      return result;
    }
    v14 = *v13;
    if (*v13)
      *(_DWORD *)v14 += 2;
  }
  else
  {
LABEL_7:
    v14 = 0;
  }
  v18 = v14;
  WebCore::resolveWithTypeAndData(a3, (WTF::StringImpl *)*(unsigned int *)(a1 + 16), (uint64_t)&v18, v19, v21);
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v17 != -1)
  {
    if (!(_DWORD)v17)
    {
      *(_QWORD *)a1 = 0;
      goto LABEL_19;
    }
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v17])(&v18, a1);
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_19:
  result = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

WTF::StringImpl *WebCore::FetchBody::consumeBlob(uint64_t a1, WebCore::FetchBodyOwner *a2, uint64_t *a3)
{
  WebCore::FetchBodyConsumer *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = (WebCore::FetchBodyConsumer *)(a1 + 16);
  WebCore::FetchBodyConsumer::setConsumePromise((WTF *)(a1 + 16), a3);
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    result = WebCore::FetchBodyOwner::loadBlob(a2, *(const WebCore::Blob **)a1, v5);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7 != -1)
    {
      if (!(_DWORD)v7)
      {
        *(_QWORD *)a1 = 0;
        return result;
      }
      result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v7])(&v9, a1);
    }
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::FetchBody::consumeFormData(v8);
  }
  return result;
}

WTF::StringImpl *WebCore::FetchBody::consumeFormData(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v34;
  WTF::StringImpl *v35;
  _QWORD *v36;
  WTF *v37;
  void *v38;
  WebCore::FormDataConsumer *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _QWORD v48[4];
  uint64_t v49;
  WTF *v50;
  char v51;

  v5 = result;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (WTF::StringImpl **)(*(_QWORD *)(a3 + 8) + 8);
    while (*((_WORD *)v8 - 4) != 26)
    {
      ++v7;
      v8 += 2;
      if (v6 == v7)
        goto LABEL_5;
    }
    if (v7 >= v6)
      goto LABEL_60;
    v9 = *v8;
    if (*v8)
      *(_DWORD *)v9 += 2;
  }
  else
  {
LABEL_5:
    v9 = 0;
  }
  v47 = v9;
  if (*((_DWORD *)result + 2) != 2)
    goto LABEL_59;
  v10 = (unsigned int *)((char *)result + 16);
  v11 = *(_QWORD *)result;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12)
      v13 = v12 - 96;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  WebCore::FormData::asSharedBuffer(*(_QWORD **)result, (uint64_t *)&v50);
  v15 = v50;
  if (!v50)
  {
LABEL_38:
    if (v13 && !v15)
    {
      v48[0] = (char *)v5 + 16;
      v34 = *a4;
      *a4 = 0;
      v35 = v47;
      if (v47)
        *(_DWORD *)v47 += 2;
      v48[2] = v35;
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      v37 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v37 = off_1E3355AA0;
      *((_QWORD *)v37 + 1) = v10;
      v48[1] = 0;
      *((_QWORD *)v37 + 2) = v34;
      if (v35)
        *(_DWORD *)v35 += 2;
      *((_QWORD *)v37 + 3) = v35;
      *((_QWORD *)v37 + 4) = 0;
      v48[3] = 0;
      v50 = v37;
      WebCore::FormDataConsumer::FormDataConsumer(v36, v11, v13, (uint64_t *)&v50);
      if (v50)
        (*(void (**)(WTF *))(*(_QWORD *)v50 + 8))(v50);
      v39 = (WebCore::FormDataConsumer *)*((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = v36;
      if (v39)
      {
        WebCore::FormDataConsumer::~FormDataConsumer(v39);
        WTF::fastFree(v40, v41);
      }
      WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0::~$_0(v48, v38);
    }
    goto LABEL_49;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(v50, &v49);
  v16 = v49;
  if (!*(_DWORD *)(v49 + 20))
  {
    v19 = 0;
    goto LABEL_18;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8);
  v18 = *(unsigned int *)(v17 + 24);
  if ((_DWORD)v18 == -1)
  {
LABEL_59:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
    __break(0xC471u);
    return result;
  }
  v48[0] = &v51;
  v19 = (void *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v18])(v48, v17 + 8);
LABEL_18:
  WebCore::resolveWithTypeAndData(a4, (WTF::StringImpl *)*v10, (uint64_t)&v47, v19, *(_QWORD *)(v16 + 48));
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v49, v20);
  v21 = v50;
  v50 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v24 = *((unsigned int *)v21 + 5);
      if ((_DWORD)v24)
      {
        v25 = *((_QWORD *)v21 + 1);
        v26 = v25 + 16 * v24;
        do
        {
          v27 = *(unsigned int **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v45 = v26;
              v46 = v25;
              v44 = v21;
              atomic_store(1u, v27);
              v30 = v27;
              v31 = v27[6];
              if ((_DWORD)v31 != -1)
                ((void (*)(_QWORD *, unsigned int *))off_1E3355A48[v31])(v48, v27 + 2);
              v30[6] = -1;
              WTF::fastFree((WTF *)v30, v14);
              v21 = v44;
              v26 = v45;
              v25 = v46;
            }
          }
          v25 += 16;
        }
        while (v25 != v26);
      }
      v32 = (WTF *)*((_QWORD *)v21 + 1);
      if ((WTF *)((char *)v21 + 24) != v32 && v32 != 0)
      {
        *((_QWORD *)v21 + 1) = 0;
        *((_DWORD *)v21 + 4) = 0;
        v43 = v21;
        WTF::fastFree(v32, v14);
        v21 = v43;
      }
      WTF::fastFree(v21, v14);
      goto LABEL_38;
    }
  }
LABEL_49:
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  v42 = *((unsigned int *)v5 + 2);
  if ((_DWORD)v42 != -1)
  {
    if (!(_DWORD)v42)
    {
      *(_QWORD *)v5 = 0;
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v42])(v48, v5);
  }
  *(_QWORD *)v5 = 0;
  *((_DWORD *)v5 + 2) = 0;
  return result;
}

